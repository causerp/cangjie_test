// EXEC: %compiler %cmp_opt_chir2hlir %f -o %output
// EXEC: %run %run_opt %output %run_args

import std.ast.*
import std.collection.*

let kinds = ArrayList<TokenKind>(
    [
        TokenKind.DOT,
        TokenKind.COMMA,
        TokenKind.LPAREN,
        TokenKind.RPAREN,
        TokenKind.LSQUARE,
        TokenKind.RSQUARE,
        TokenKind.LCURL,
        TokenKind.RCURL,
        TokenKind.EXP,
        TokenKind.MUL,
        TokenKind.MOD,
        TokenKind.DIV,
        TokenKind.ADD,
        TokenKind.SUB,
        TokenKind.INCR,
        TokenKind.DECR,
        TokenKind.AND,
        TokenKind.OR,
        TokenKind.COALESCING,
        TokenKind.PIPELINE,
        TokenKind.COMPOSITION,
        TokenKind.NOT,
        TokenKind.BITAND,
        TokenKind.BITOR,
        TokenKind.BITXOR,
        TokenKind.BITNOT,
        TokenKind.LSHIFT,
        TokenKind.RSHIFT,
        TokenKind.COLON,
        TokenKind.SEMI,
        TokenKind.ASSIGN,
        TokenKind.ADD_ASSIGN,
        TokenKind.SUB_ASSIGN,
        TokenKind.MUL_ASSIGN,
        TokenKind.EXP_ASSIGN,
        TokenKind.DIV_ASSIGN,
        TokenKind.MOD_ASSIGN,
        TokenKind.AND_ASSIGN,
        TokenKind.OR_ASSIGN,
        TokenKind.BITAND_ASSIGN,
        TokenKind.BITOR_ASSIGN,
        TokenKind.BITXOR_ASSIGN,
        TokenKind.LSHIFT_ASSIGN,
        TokenKind.RSHIFT_ASSIGN,
        TokenKind.ARROW,
        TokenKind.BACKARROW,
        TokenKind.DOUBLE_ARROW,
        TokenKind.RANGEOP,
        TokenKind.CLOSEDRANGEOP,
        TokenKind.ELLIPSIS,
        TokenKind.HASH,
        TokenKind.AT,
        TokenKind.QUEST,
        TokenKind.LT,
        TokenKind.GT,
        TokenKind.LE,
        TokenKind.GE,
        TokenKind.IS,
        TokenKind.AS,
        TokenKind.NOTEQ,
        TokenKind.EQUAL,
        TokenKind.WILDCARD,
        TokenKind.INT8,
        TokenKind.INT16,
        TokenKind.INT32,
        TokenKind.INT64,
        TokenKind.INTNATIVE,
        TokenKind.UINT8,
        TokenKind.UINT16,
        TokenKind.UINT32,
        TokenKind.UINT64,
        TokenKind.UINTNATIVE,
        TokenKind.FLOAT16,
        TokenKind.FLOAT32,
        TokenKind.FLOAT64,
        TokenKind.RUNE,
        TokenKind.BOOLEAN,
        TokenKind.NOTHING,
        TokenKind.UNIT,
        TokenKind.STRUCT,
        TokenKind.ENUM,
        TokenKind.VARRAY,
        TokenKind.THISTYPE,
        TokenKind.PACKAGE,
        TokenKind.IMPORT,
        TokenKind.CLASS,
        TokenKind.INTERFACE,
        TokenKind.FUNC,
        TokenKind.MACRO,
        TokenKind.QUOTE,
        TokenKind.DOLLAR,
        TokenKind.LET,
        TokenKind.VAR,
        TokenKind.CONST,
        TokenKind.TYPE,
        TokenKind.INIT,
        TokenKind.THIS,
        TokenKind.SUPER,
        TokenKind.IF,
        TokenKind.ELSE,
        TokenKind.CASE,
        TokenKind.TRY,
        TokenKind.CATCH,
        TokenKind.FINALLY,
        TokenKind.FOR,
        TokenKind.DO,
        TokenKind.WHILE,
        TokenKind.THROW,
        TokenKind.RETURN,
        TokenKind.CONTINUE,
        TokenKind.BREAK,
        TokenKind.IN,
        TokenKind.NOT_IN,
        TokenKind.MATCH,
        TokenKind.WHERE,
        TokenKind.EXTEND,
        TokenKind.WITH,
        TokenKind.PROP,
        TokenKind.STATIC,
        TokenKind.PUBLIC,
        TokenKind.PRIVATE,
        TokenKind.INTERNAL,
        TokenKind.PROTECTED,
        TokenKind.OVERRIDE,
        TokenKind.REDEF,
        TokenKind.ABSTRACT,
        TokenKind.SEALED,
        TokenKind.OPEN,
        TokenKind.FOREIGN,
        TokenKind.INOUT,
        TokenKind.MUT,
        TokenKind.UNSAFE,
        TokenKind.OPERATOR,
        TokenKind.SPAWN,
        TokenKind.SYNCHRONIZED,
        TokenKind.UPPERBOUND,
        TokenKind.MAIN,
        TokenKind.IDENTIFIER,
        TokenKind.PACKAGE_IDENTIFIER,
        TokenKind.INTEGER_LITERAL,
        TokenKind.RUNE_BYTE_LITERAL,
        TokenKind.FLOAT_LITERAL,
        TokenKind.COMMENT,
        TokenKind.NL,
        TokenKind.END,
        TokenKind.SENTINEL,
        TokenKind.RUNE_LITERAL,
        TokenKind.STRING_LITERAL,
        TokenKind.JSTRING_LITERAL,
        TokenKind.MULTILINE_STRING,
        TokenKind.MULTILINE_RAW_STRING,
        TokenKind.BOOL_LITERAL,
        TokenKind.UNIT_LITERAL,
        TokenKind.DOLLAR_IDENTIFIER,
        TokenKind.ANNOTATION,
        TokenKind.AT_EXCL,
        TokenKind.COMMON,
        TokenKind.PLATFORM,
        TokenKind.PERFORM,
        TokenKind.RESUME,
        TokenKind.THROWING,
        TokenKind.HANDLE,
        TokenKind.ILLEGAL,
        TokenKind.DOUBLE_COLON,
        TokenKind.FEATURES
    ]
)
let strs = ArrayList<String>(
    [
        "DOT",
        "COMMA",
        "LPAREN",
        "RPAREN",
        "LSQUARE",
        "RSQUARE",
        "LCURL",
        "RCURL",
        "EXP",
        "MUL",
        "MOD",
        "DIV",
        "ADD",
        "SUB",
        "INCR",
        "DECR",
        "AND",
        "OR",
        "COALESCING",
        "PIPELINE",
        "COMPOSITION",
        "NOT",
        "BITAND",
        "BITOR",
        "BITXOR",
        "BITNOT",
        "LSHIFT",
        "RSHIFT",
        "COLON",
        "SEMI",
        "ASSIGN",
        "ADD_ASSIGN",
        "SUB_ASSIGN",
        "MUL_ASSIGN",
        "EXP_ASSIGN",
        "DIV_ASSIGN",
        "MOD_ASSIGN",
        "AND_ASSIGN",
        "OR_ASSIGN",
        "BITAND_ASSIGN",
        "BITOR_ASSIGN",
        "BITXOR_ASSIGN",
        "LSHIFT_ASSIGN",
        "RSHIFT_ASSIGN",
        "ARROW",
        "BACKARROW",
        "DOUBLE_ARROW",
        "RANGEOP",
        "CLOSEDRANGEOP",
        "ELLIPSIS",
        "HASH",
        "AT",
        "QUEST",
        "LT",
        "GT",
        "LE",
        "GE",
        "IS",
        "AS",
        "NOTEQ",
        "EQUAL",
        "WILDCARD",
        "INT8",
        "INT16",
        "INT32",
        "INT64",
        "INTNATIVE",
        "UINT8",
        "UINT16",
        "UINT32",
        "UINT64",
        "UINTNATIVE",
        "FLOAT16",
        "FLOAT32",
        "FLOAT64",
        "RUNE",
        "BOOLEAN",
        "NOTHING",
        "UNIT",
        "STRUCT",
        "ENUM",
        "VARRAY",
        "THISTYPE",
        "PACKAGE",
        "IMPORT",
        "CLASS",
        "INTERFACE",
        "FUNC",
        "MACRO",
        "QUOTE",
        "DOLLAR",
        "LET",
        "VAR",
        "CONST",
        "TYPE",
        "INIT",
        "THIS",
        "SUPER",
        "IF",
        "ELSE",
        "CASE",
        "TRY",
        "CATCH",
        "FINALLY",
        "FOR",
        "DO",
        "WHILE",
        "THROW",
        "RETURN",
        "CONTINUE",
        "BREAK",
        "IN",
        "NOT_IN",
        "MATCH",
        "WHERE",
        "EXTEND",
        "WITH",
        "PROP",
        "STATIC",
        "PUBLIC",
        "PRIVATE",
        "INTERNAL",
        "PROTECTED",
        "OVERRIDE",
        "REDEF",
        "ABSTRACT",
        "SEALED",
        "OPEN",
        "FOREIGN",
        "INOUT",
        "MUT",
        "UNSAFE",
        "OPERATOR",
        "SPAWN",
        "SYNCHRONIZED",
        "UPPERBOUND",
        "MAIN",
        "IDENTIFIER",
        "PACKAGE_IDENTIFIER",
        "INTEGER_LITERAL",
        "RUNE_BYTE_LITERAL",
        "FLOAT_LITERAL",
        "COMMENT",
        "NL",
        "END",
        "SENTINEL",
        "RUNE_LITERAL",
        "STRING_LITERAL",
        "JSTRING_LITERAL",
        "MULTILINE_STRING",
        "MULTILINE_RAW_STRING",
        "BOOL_LITERAL",
        "UNIT_LITERAL",
        "DOLLAR_IDENTIFIER",
        "ANNOTATION",
        "AT_EXCLAMATION",
        "COMMON",
        "PLATFORM",
        "PERFORM",
        "RESUME",
        "THROWING",
        "HANDLE",
        "ILLEGAL",
        "DOUBLE_COLON",
        "FEATURES"
    ]
)

main(): Int64 {
    // if enum TokenKind has been changed, please update the kind list above, otherwise this case will fail.
    for (i in 0..kinds.size) {
        // test TokenKind.operator == when equal
        if (getTokenKind(UInt16(i)) != kinds[i]) {
            return 1
        }

        // test toString() of TokenKind
        if (kinds[i].toString() != strs[i]) {
            return 2
        }
    }

    // test TokenKind.operator == when not equal
    for (i in 0..(kinds.size - 1)) {
        if (kinds[i] == TokenKind.FEATURES) {
            return 3
        }
    }

    // test getTokenID
    for (kind in kinds) {
        let tokens = Tokens(ArrayList<Token>([Token(kind)]))
        let bytes = tokens.toBytes()
        let id = Int64(bytes[4])
        if (kinds[id] != kind) {
            return 4
        }
    }

    return 0
}
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 *
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
