

   package www .w .
 w. wx







@Frozen
@Deprecated[ message: "tt" ]
  @When [  test || !debug]
   public func foo<T, w>   (
x: Bool,
  y: Int64,
  arr2 : VArray < Int16, $0 >,z!: Float64
): Unit  where T <: XX & XX , w <: XX {
    File
    FuncDecl
    ParameterList
    Block
    UnitLiteral
    RefType
    FuncType
    TupleType
    OptionType
    1
    1.0
    r'a'
    r"b"
    b
    "line"
    'line'
    """
    123"""
    '''
    123'''
    #"123"#
    ##'123'##
    #""
    1234\n
    1324
    ""#
    throwing
    resume
    perform
    handle
    let s: A =  ""
    let s: A<B, C, D> =  ""
    let f: (String, Int32) -> Unit = 1
    let t: (String, Int32) = 1
    let o: ?Int64 = 1
    let o: ??String = 1
    true
    false
    ()
    2 + 2
    foo(
1, a: 3 +  3
    )
    !false
    let x:  Int64 =  1
 var    x = 0 + 1
 const  yy =  1
    8 is Int64
    1 as
    Int32
    Int16(
      10)
    (1    +    1   )
 foo< Int64  >
 ()
 a = 10 << 1
 a = 10 >> 1
 a &&= 2
 a ||= 2
 var x = 1 |>  { x: Int64 => f(a: x) }
 var hh = h1<Int64> ~> h2<Int64>

 let y: (Int64) = (1)
  [  1,   2,  4, 5   ]
  (  1 , "hello",    1.0,   r'a'   )
  let arr: VArray<Int64, $5> = VArray<Int64, $5>   ([0, 0, 0, 0, 0])

  a?(b)
  i ++
  i--
  1..10
      a[   0   ]
  a.  B
  break
      continue
  {a: Int64 => e1
                e2 }
{   => e1
                e2 }
                throw Expection("   hello")
}

 public func foo1() { }

  func foo2() { }

  main(

) : Int64{
  2 + 3
var input   : A. b. c = 1
}