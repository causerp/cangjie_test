// Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
// This source file is part of the Cangjie project, licensed under Apache-2.0
// with Runtime Library Exception.
//
// See https://cangjie-lang.cn/pages/LICENSE for license information.

// (CJNATIVE and not Windows) EXEC-PIPE-0: %compiler %cmp_opt %f -o %output %compile_shared_lib_opt %import_java_interop 2>& 1 | compare %f

// ASSERT: scan-not error

package javaapp.my

import interoplib.interop.*
import java.lang.JObject
import std.unittest.assertEqual
import std.unittest.testmacro.Assert

@JavaMirror
open class M {
    init()
}

@JavaImpl
class A <: M {
    A() {
        super()
    }
}

class CJClass {}

unsafe func testJObject(m: JObject, n: Int64) {
    let r = match (m) {
        case obj : JObject => 1
        case obj : M => 2
        case obj : A => 3
        case obj : CJClass => 4
        case _ => -1
    }
    @Assert(r == n)
}

unsafe func test(m: M, n: Int64) {
    let r = match (m) {
        case obj : JObject => 1
        case obj : M => 2
        case obj : A => 3
        case obj : CJClass => 4
        case _ => -1
    }
    @Assert(r == n)
}

unsafe func testCJClass(m: CJClass, n: Int64) {
    let r = match (m) {
        case obj : JObject => 1
        case obj : M => 2
        case obj : A => 3
        case obj : CJClass => 4
        case _ => -1
    }
    @Assert(r == n)
}

unsafe func testDeep(t: Option<(A, Option<M>)>, n: Int64) {
    let r = match (t) {
        case Some((a : JObject, Some(m : A))) => 1
        case Some((_ : M, Some(m : JObject))) => 2
        case Some((_ : M, Some(_ : A))) => 3
        case Some((a : CJClass, Some(_))) => -1
        case _ => -1
    }
    @Assert(r == n)
}
