[root]
  path = ../../
[suffix]
  cj = //
  info = //
[env]
  LD_LIBRARY_PATH=./:$LD_LIBRARY_PATH
[condition]
condition=
  CJNATIVE
  x86
[internal-var]
  # cjc
  compiler = cjc
  compiler_frontend = cjc-frontend
  cmp_opt = --error-count-limit=all --diagnostic-format=json
  cmp_opt_frontend = --error-count-limit=all --diagnostic-format=json
  output = %%n.%%suffix
  suffix = out
  test_suffix = %%dylib_suffix
  middle = a
  null_path=/dev/null
  serial_compile = -j 1
  close_apc_compile = --apc=1

  # cjfmt
  cjfmt = $CANGJIE_HOME/tools/bin/cjfmt

  # cjlint
  lint = $CANGJIE_HOME/tools/bin/cjlint
  cangjieDir = $CANGJIE_HOME
  cangjieStdxPath = $CANGJIE_STDX_PATH

  # cjcov
  cjcov = $CANGJIE_HOME/tools/bin/cjcov

  # cjtrace-recover
  cjtrace_recover = $CANGJIE_HOME/tools/bin/cjtrace-recover

  # run
  export = export
  source = source
  run = export LD_LIBRARY_PATH=$(pwd):$LD_LIBRARY_PATH &&
  run_pkg = export LD_LIBRARY_PATH=$(pwd):$LD_LIBRARY_PATH &&
  run_macro = export LD_LIBRARY_PATH=$(pwd):$LD_LIBRARY_PATH &&
  run_stdx = export LD_LIBRARY_PATH=$(pwd):$CANGJIE_STDX_PATH:$LD_LIBRARY_PATH &&
  run_opt =
  run_args =
  run_args_arg =

  # link
  static_std = --static-std
  dy_std = --dy-std
  static_libs = --static-libs
  dy_libs = --dy-libs
  ldd = ldd

  # Packages
  main = main
  mod_opt = --module
  mod_name = --module-name module_name
  pkg_opt = --package

  # Output types
  compile_lib_opt = --output-type=staticlib
  compile_dylib_opt = --output-type=dylib
  compile_chir_opt = --output-type=chir --experimental

  # cjmp
  compile_dylib_opt_cjmp = mp.chir --common-part-cjo=mp.cjo --output-type=dylib --experimental
  compile_lib_opt_cjmp = mp.chir --common-part-cjo=mp.cjo --output-type=staticlib --experimental
  link_cjmp = -L . -lmp

  # stable abi
  cmp_stable_abi_dylib = -L. -lstable_abi

  # Optimization
  enableConstPropagation = --fchir-constant-propagation
  incremental_compile = --incremental-compile --experimental

  # Overflow
  overflow_wrapping = --int-overflow=wrapping

  # Concurrency
  # sync-link =

  # Conditional Compilation
  conditional_compilation_config_opt = --cfg

  # API
  # ffiC-link =
  link-core = -lcangjie-std-core
  # link-convert =
  # link-log =
  # link-io =
  # link-os =
  link-collection =
  # link-time =
  # link-format =
  # link-regex =
  # link-unicode =
  # link-json =
  # link-serialization =
  # link-math =
  # link-random =
  # link-argopt =
  # link-net =
  # link-ffiC =
  # link-unittest =
  link-eh = -lstdx.effect --experimental --enable-eh
  # stdx-sync-link =
  stdx-package = -L $CANGJIE_HOME/runtime/lib/%%run_env/
  cangjie-stdx-package = $CANGJIE_STDX_PATH
  stdx-library-path = -L $CANGJIE_STDX_PATH %%cangjie-stdx-import-path
  import-cangjie-stdx = -L $CANGJIE_STDX_PATH -lstdx.unittest.data -lstdx.unittest -lstdx.encoding.json -lstdx.serialization.serialization -lstdx.serialization -lstdx.net.http -lstdx.net.tls -lstdx.net.tls.common -lstdx.net -lstdx.logger -lstdx.log -lstdx.encoding.url -lstdx.encoding.json.stream -lstdx.crypto.kit -lstdx.crypto.x509 -lstdx.crypto.crypto -lstdx.crypto.keys -lstdx.crypto.digest -lstdx.crypto.common -lstdx.encoding.hex -lstdx.encoding.base64 -lstdx.encoding -lstdx.crypto -lstdx.compress.zlib -lstdx.compress -lstdx.actors -lstdx.syntax %%cangjie-stdx-import-path --dy-std
  import-stdx-fuzz = -L $CANGJIE_STDX_PATH -lstdx.fuzz.fuzzFFI -lstdx.fuzz.fuzz  %%cangjie-stdx-import-path
  cangjie-stdx-import-path = --import-path  $CANGJIE_STDX_PATH 

  # c ffi
  cffi_output = lib%%n.%%dylib_suffix
  ffic_opt = -L . -l %%n %%n.cj
  pkg_compile = --output-type=dylib -L . -l c_ffi
  pkg_link = -L . -l c_ffi -l pkg
  cffi_runtime_opt =
  cffi_runtime_link = -I$CANGJIE_HOME/include -L $CANGJIE_HOME/runtime/lib/%%run_env/ -lcangjie-runtime --rtlib=compiler-rt %%cffi_std_link -ldl -fno-omit-frame-pointer -lboundscheck
  cffi_runtime_link_no_elfloader = -D__DSU__ -I$CANGJIE_HOME/include -L $CANGJIE_HOME/runtime/lib/%%run_env/ -lcangjie-runtime --rtlib=compiler-rt %%cffi_std_link -ldl -fno-omit-frame-pointer
  cffi_runtime_ld = --output-type=dylib -L . -l ffi%%n
  cffi_std_link = -lstdc++
  sanitizer_hwasan = --sanitize=hwaddress
  boundscheck = -I$CANGJIE_HOME/include -L $CANGJIE_HOME/runtime/lib/%%run_env/ -lboundscheck

  # Tools
  set =
  plugin_lsp_suffix = so

  # chir dis
  chir-dis = chir-dis

  # clang
  clang = clang
  clang_opt = -shared -fPIC

  # common
  ls = ls
  libdir = $CANGJIE_HOME/modules/%%run_env/
  run_env = linux_x86_64_cjnative
  cat = cat
  mv = mv
  rm = rm
  cp = cp
  touch = touch
  diff = diff
  grep = grep
  sed = sed
  sed_opt = -i
  chmod = chmod
  pwd =$(pwd)
  mkdir = mkdir

  # MetaProgramming
  use_ast =
  use_pic_ast =
  pic_opt =
  macro_lib_opt =
  append_opt =
  append_pic_opt =
  append_macro_lib_opt =
  macro_debug = --debug-macro
  enable_macro =
  cmp_macro = --error-count-limit=all --diagnostic-format=json --compile-macro
  macro_lib = 
  macro_opt = --output-type=dylib
  run_macro_opt =

  # cjpm
  cjpm = cjpm
  cjpm_opt =
  cpm_bin_path = ./build/bin
  python = python3
  dump-parse = -frontend --dump-parse
  closebuf = stdbuf -o0 -e0
  export_expand = export PATH=$(pwd):$PATH

  # cjpm git
  git_dir_prefix = GIT_DIR=
  git_dir_suffix =

  # Obfuscation
  obf_string = --fobf-string
  no_obf_string =  --fno-obf-string
  obf_const = --fobf-const
  no_obf_const =  --fno-obf-const
  obf_layout = --fobf-layout
  no_obf_layout =  --fno-obf-layout
  obf_cf_flatten = --fobf-cf-flatten
  no_obf_cf_flatten = --fno-obf-cf-flatten
  obf_cf_bogus = --fobf-cf-bogus
  no_obf_cf_bogus = --fno-obf-cf-bogus
  obf_export=--fobf-export-symbols
  no_obf_export=--fno-obf-export-symbols
  obf_sym_input=--obf-sym-input-mapping
  obf_sym_output=--obf-sym-output-mapping
  obf_apply_mapping=--obf-apply-mapping-file
  obf_sym_prefix=--obf-sym-prefix
  obf_source_path=--fobf-source-path
  no_obf_source_path=--fno-obf-source-path
  obf_line_number=--fobf-line-number
  no_obf_line_number=--fno-obf-line-number
  obf_all = --fobf-all
  save_temps = --save-temps=.
  disassembler = LD_LIBRARY_PATH=$CANGJIE_HOME/third_party/llvm/lib:$LD_LIBRARY_PATH $CANGJIE_HOME/third_party/llvm/bin/llvm-dis

  # cjdb
  cmp_output = 

  dylib_suffix = so

  # std/libs/unittest
  cmp_utest_opt = --test
  run_utest_opt = %%utest_no_progress
  utest_no_progress = --no-progress

  # java
  java = java
  javac = javac
  java_mirror_gen = -Dpackage.mode=true -jar $CANGJIE_HOME/tools/bin/java-mirror-gen.jar -d . -cp .
  cp_loader_jar = -cp .:$CANGJIE_HOME/lib/library-loader.jar
  jffi_link = -L . -linteroplib.interop -lcinteroplib -ljava.lang

[description]
  title = Cangjie2cjnative Test
