/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

// LEVEL: 2
// DEPENDENCE:  ../../../lsp_test.py ../../../sourcecode/cangjieTest/cangjiesource ../../../lsp_config.txt
// EXEC: %python lsp_test.py textDocument_completion_131.info

Req#
{"jsonrpc": "2.0", "id": "0", "method": "initialize", "params": {"processId": null, "rootPath": "cangjiesource", "rootUri": "cangjiesource", "capabilities": {"workspace": {"applyEdit": true, "workspaceEdit": {}, "didChangeWatchedFiles": {}, "symbol": {}, "executeCommand": {}, "workspaceFolders": false, "configuration": false}, "textDocument": {"synchronization": {"willSave": true, "willSaveWaitUntil": true, "didSave": true}, "completion": {"completionItem": {"snippetSupport": true}}, "hover": {}, "signatureHelp": {}, "references": {}, "documentHighlight": {"dynamicRegistration": true}, "formatting": {}, "rangeFormatting": {}, "onTypeFormatting": {}, "definition": {}, "codeAction": {}, "documentLink": {}, "rename": {"prepareSupport": true}, "semanticHighlightingCapabilities": {"semanticHighlighting": true}, "callHierarchy": {}, "semanticTokens": {"tokenTypes": ["namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "member", "label"], "tokenModifiers": ["declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary"], "dynamicRegistration": true}}}}}
{"jsonrpc":"2.0","method":"initialized","params":{}}
{"jsonrpc": "2.0", "method": "textDocument/didOpen", "params": {"textDocument": {"uri": "cangjiesource/src/Pattern_matching/constant001.cj", "languageId": "Cangjie", "version": 1, "text": "/*\n * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.\n * This source file is part of the Cangjie project, licensed under Apache-2.0\n * with Runtime Library Exception.\n *\n * See https://cangjie-lang.cn/pages/LICENSE for license information.\n */\n\npackage default.Pattern_matching\n\nfunc f() {\n    let score1: Int64 = 90\n    let PASS1 = 60\n    let FULL = 100\n    var scoreResult: String = match (score1) {\n        case 0 => \"zero\"\n        case 10 | 20 | 30 | 40 | 50 => \"fail\"\n        case 70 | 80 => \"good\"\n        case _ => \"not a valid score\"\n    }\n}\n"}}}
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"cangjiesource/src/Pattern_matching/constant001.cj","version":2},"contentChanges":[{"range":{"start":{"line":14,"character":30},"end":{"line":14,"character":44}},"rangeLength":14,"text":"m"}]}}
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"cangjiesource/src/Pattern_matching/constant001.cj","version":3},"contentChanges":[{"range":{"start":{"line":14,"character":30},"end":{"line":14,"character":31}},"rangeLength":1,"text":"ma"}]}}
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"cangjiesource/src/Pattern_matching/constant001.cj","version":4},"contentChanges":[{"range":{"start":{"line":14,"character":30},"end":{"line":14,"character":32}},"rangeLength":2,"text":"mat"}]}}
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"cangjiesource/src/Pattern_matching/constant001.cj","version":5},"contentChanges":[{"range":{"start":{"line":14,"character":30},"end":{"line":14,"character":33}},"rangeLength":3,"text":"matc"}]}}
{"jsonrpc":"2.0","id":2128,"method":"textDocument/completion","params":{"textDocument":{"uri":"cangjiesource/src/Pattern_matching/constant001.cj"},"position":{"line":14,"character":34},"context":{"triggerKind":1}}}
{"jsonrpc": "2.0", "id": 2129, "method": "shutdown", "params": {}}
{"jsonrpc": "2.0", "method": "exit", "params": {}}

Rev#
{"id": 2128,"jsonrpc": "2.0","result": [{"deprecated": false,"detail": "(class) public open class IllegalFormatException <: IllegalArgumentException","documentation": "","filterText": "IllegalFormatException","insertText": "IllegalFormatException","insertTextFormat": 1,"kind": 7,"label": "IllegalFormatException","sortText": "585455"},{"deprecated": false,"detail": "(function) public func init()","documentation": "","filterText": "IllegalFormatException","insertText": "IllegalFormatException()","insertTextFormat": 1,"kind": 3,"label": "IllegalFormatException()","sortText": "585455"},{"deprecated": false,"detail": "(function) public func init(message: String)","documentation": "","filterText": "IllegalFormatException","insertText": "IllegalFormatException(${1:message: String})","insertTextFormat": 2,"kind": 3,"label": "IllegalFormatException(message: String)","sortText": "585455"},{"deprecated": false,"detail": "(class) public class IncompatiblePackageException <: Exception","documentation": "","filterText": "IncompatiblePackageException","insertText": "IncompatiblePackageException","insertTextFormat": 1,"kind": 7,"label": "IncompatiblePackageException","sortText": "577143"},{"deprecated": false,"detail": "(function) public func init()","documentation": "","filterText": "IncompatiblePackageException","insertText": "IncompatiblePackageException()","insertTextFormat": 1,"kind": 3,"label": "IncompatiblePackageException()","sortText": "577143"},{"deprecated": false,"detail": "(function) public func init(message: String)","documentation": "","filterText": "IncompatiblePackageException","insertText": "IncompatiblePackageException(${1:message: String})","insertTextFormat": 2,"kind": 3,"label": "IncompatiblePackageException(message: String)","sortText": "577143"},{"deprecated": false,"detail": "","documentation": "","filterText": "match","insertText": "match","insertTextFormat": 1,"kind": 14,"label": "match","sortText": "422000"},{"deprecated": false,"detail": "match (condExpr) {}","documentation": "","filterText": "match","insertText": "match (${0:condExpr}) {\n\t\n}","insertTextFormat": 2,"kind": 14,"label": "match (condExpr) {}","sortText": "422000"}]}