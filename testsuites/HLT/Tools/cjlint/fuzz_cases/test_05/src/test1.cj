/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

// random seed:1658515236894

// All global variable need to be defined before use!
public var var_1658515236894_141 : Rune = 'B'
public var var_1658515236894_166 : Array<Bool> = [(Int32(8) is Range<Int16>), (UInt64(UInt64(53)) is Range<Int16>), true, false, true, (":\\Jsn}zSzy" is Float64), false, true, true, (Float32(-50.0) is Option<UInt8>)]
public var var_1658515236894_211 : Option<UInt8> = ((Int16(-93)&127..Int16(126)&127:6|1) as UInt8)
public let var_1658515236894_269 : UInt8 = UInt8(UInt8(113))
public let var_1658515236894_285 : Int8 = Int8(UInt8(UInt8(181)))
public let var_1658515236894_526 : Range<UInt8> = (UInt8(47)&127..UInt8(97)&127:49|1)
public var var_1658515236894_673 : ?Unit = Option<Unit>.None
public let var_1658515236894_858 : Array<((Float32, Int8, Unit), Unit, UInt8)> = [((Float32(Float32(17.0)), Int8(37), ()), (), UInt8(UInt8(Int8(40)))), ((Float32(-119.0), Int8(-91), ()), (), UInt8(118)), ((Float32(4.0), Int8(Int8(3)), ()), (), UInt8(Int8(-37))), ((Float32(-65.0), Int8(101), ()), (), UInt8(Int8(-125))), ((Float32(Float32(-2.0)), Int8(61), ()), (), UInt8(Int8(-109))), ((Float32(86.0), Int8(-110), ()), (), UInt8(89)), ((Float32(Float32(42.0)), Int8(-72), ()), (), UInt8(77)), ((Float32(87.0), Int8(Int8(-70)), ()), (), UInt8(UInt8(125))), ((Float32(Float32(-14.0)), Int8(UInt8(38)), ()), (), UInt8(Int8(-114))), ((Float32(Float32(-116.0)), Int8(Int8(-78)), ()), (), UInt8(76))]
public var var_1658515236894_1175 : Unit = ()
public let var_1658515236894_1201 : ?Option<UInt8> = (((UInt8(133)&127..UInt8(129)&127:47|1), UInt16(Int8(-104)), (UInt32(Int16(59)), (UInt16(212)&127..=UInt16(196)&127:(103|1)), 19.0, ((Int8(-114)&127..=Int8(-118)&127:((-59)|1)) is Int32), (), (Option<Unit>.None is Bool), (Int8(86)&127..=Int8(-18)&127:(-128)|1)), (Int16(70)&127..Int16(126)&127:(-13)|1), (Int16(-121)&127..=Int16(-19)&127:109|1)) as Option<UInt8>)
let var_1658515236894_1631 : (Range<UInt8>, Bool) = ((UInt8(139)&127..UInt8(105)&127:73|1), ((124&127..=Int64(Int32(55))&127:((-101)|1)) is Option<Enum_1658515236894_981>))
public let var_1658515236894_1758 : (((Float32, Int8, Unit), Unit, UInt8), Int16, Option<UInt8>) = (((Float32(Float32(-57.0)), Int8(24), ()), (), UInt8(66)), Int16(-50), ((Float32(Float32(71.0)), Int8(79), ()) as UInt8))
public func func_1658515236894_227(param_1658515236894_228 : Int32) : Bool { // block id: 229
    var_1658515236894_70
}

public func func_1658515236894_237(param_1658515236894_238 : Range<UInt32>) : Int32 { // block id: 239
    Int32(27)
}

public func func_1658515236894_441(param_1658515236894_442 : ((Int8) -> Int64) -> Int64) : Unit { // block id: 445
    let var_1658515236894_459 : (UInt32, Range<UInt16>, Float64, Bool, Unit, Bool, Range<Int8>) = (UInt32(Int16(2)), (UInt16(148)&127..=UInt16(246)&127:95|1), Float64(Float64(Float64(Float32(-49.0)))), (UInt8(184) is Int8), (), false, (Int8(UInt8(Int8(-3)))&127..Int8(-18)&127:((-33)|1)));
    try { // block id: 449
        var var_1658515236894_480 : Int16 = Int16(111);
        ((var_1658515236894_269&127..=UInt8(130)&127:(15|1)), var_1658515236894_456, var_1658515236894_459, (var_1658515236894_480&127..var_1658515236894_480&127:((-47)|1)), var_1658515236894_485)
    } finally { // block id: 487
        var var_1658515236894_489 : (Range<UInt8>, UInt16, (UInt32, Range<UInt16>, Float64, Bool, Unit, Bool, Range<Int8>), Range<Int16>, Range<Int16>) = ((UInt8(70)&127..=UInt8(127)&127:48|1), UInt16(UInt16(18)), (UInt32(7), (UInt16(242)&127..=UInt16(242)&127:(-60)|1), 51.0, true, (), (Int16(UInt16(102)) is Range<Int8>), (Int8(Int8(84))&127..=Int8(Int8(-41))&127:(Int64(UInt64(169))|1))), (Int16(UInt8(UInt8(111)))&127..Int16(Int8(-1))&127:(69|1)), (Int16(-44)&127..Int16(Int16(105))&127:(Int64(UInt8(Int8(90)))|1)));
        var_1658515236894_489
    }[4];
    var_1658515236894_526;
    func_1658515236894_529(namedParam_1658515236894_530 : func_1658515236894_374, namedParam_1658515236894_533 : (var_1658515236894_802[0] ?? [UInt32(109), UInt32(33), UInt32(48), UInt32(233), UInt32(147), UInt32(8), UInt32(116), UInt32(35), UInt32(124), UInt32(76)][0]))
}

public func func_1658515236894_998(param_1658515236894_999 : ((Float32, Int8, Unit), Unit, UInt8)) : Int64 { // block id: 1000
    var_1658515236894_704;
    var_1658515236894_737
}

public interface Interface_1658515236894_1059<T0, T1> where T0 <: Float32, T1 <: Option<Array<((Float32, Int8, Unit), Unit, UInt8)>> {
    func func_1658515236894_1574() : UInt16 { // block id: 1575
        if (var_1658515236894_1579) { // block id: 1581
            (var_1658515236894_292, (UInt16(67)&127..=var_1658515236894_456&127:(var_1658515236894_19|1)), 88.0, true, (), true, (var_1658515236894_285&127..=Int8(-105)&127:((-33)|1)))
        } else { // block id: 1596
            if (true) { 'f' } else { var_1658515236894_1601 } ;
            var_1658515236894_1091
        }[4];
        if (match (Option<Bool>.None) {
            case _ : Unit => 
                var_1658515236894_1023;
                var_1658515236894_25;
                (var_1658515236894_1617, var_1658515236894_1579)
            
            case _ => 
                var_1658515236894_121 <<= ((UInt8(195)) & 7);
                var_1658515236894_1631
            
            case _ => 
                var_1658515236894_1631
            
        }[1]) { // block id: 1644
            let var_1658515236894_1648 : (UInt32, Range<UInt16>, Array<Bool>, Option<Unit>, Range<Int16>, Range<UInt64>) = (UInt32(Int32(-2)), (UInt16(102)&127..UInt16(3)&127:(96|1)), [true, false, true, false, false, true, true, true, true, false], (Option<UInt32>.Some(UInt32(UInt16(250))) as Unit), (Int16(-102)&127..=Int16(Int8(Int8(97)))&127:((-49)|1)), (UInt64(202)&127..UInt64(UInt32(UInt16(161)))&127:((-66)|1)));
            if (var_1658515236894_11) { var_1658515236894_1648 } else { var_1658515236894_1648 } ;
            var loopTimeVar_1658515236894_1677 : Range<UInt64> = (UInt64(59)&127..UInt64(Int32(UInt16(Int8(89))))&127:(Int64(Int32(108))|1));
            for (i in loopTimeVar_1658515236894_1677 where true) {

            };
            Struct_1658515236894_195<Range<UInt16>, Option<Enum_1658515236894_981>>.var_1658515236894_1689
        } else if (var_1658515236894_1571.var_1658515236894_1694) { // block id: 1696
            var_1658515236894_1571.var_1658515236894_1700
        } else { // block id: 1702
            var var_1658515236894_1720 : UInt64 = UInt64((-72));
            match (var_1658515236894_1705) {
                case Some(caseVar_1658515236894_1710 : Option<Option<UInt8>>) => 
                    var var_1658515236894_1716 : Range<Int8> = (Int8(105)&127..=Int8(-82)&127:(-93)|1);
                    if (true) { (Int8(17)&127..=Int8(90)&127:(-92)|1) } else { var_1658515236894_1716 } ;
                    var_1658515236894_1720 %= ((UInt64(231)) | 1)
                
                case Some(defaultValue) => 
                    var_1658515236894_25
                
                case caseVar_1658515236894_1730 : Option<Option<UInt8>> => 
                    var_1658515236894_1720--;
                    var_1658515236894_292 *= var_1658515236894_1263
                
                case _ => 
                    var_1658515236894_98;
                    var_1658515236894_1155 = Int32(100)
                
            };
            var_1658515236894_456 >> ((UInt16(116)) & 7)
        }
    }

}

public open class Class_1658515236894_1056 <: Interface_1658515236894_1059<Float32, Option<Array<((Float32, Int8, Unit), Unit, UInt8)>>> {
    public init() { // block id: 1058

    }
;
    public static var var_1658515236894_1062 : Unit = ();
    public let var_1658515236894_1694 : Bool = true;
    let var_1658515236894_1700 : UInt16 = UInt16(27)
}


public func func_1658515236894_1004(param_1658515236894_1005 : (Int8) -> Int64) : ((Float32, Int8, Unit), Unit, UInt8) { // block id: 1008
    if (try { // block id: 1011
        ();
        true
    } finally { // block id: 1014
        if (false) { (var_1658515236894_121&127..var_1658515236894_269&127:(var_1658515236894_19|1)) } else { (UInt8(90)&127..UInt8(19)&127:125|1) } ;
        var_1658515236894_1023;
        false
    }) { (if ((var_1658515236894_787|>func_1658515236894_227)) { (var_1658515236894_1036 ?? Option<UInt8>.Some(var_1658515236894_121)) } else { func_1658515236894_1041<UInt8>(optionalParam_1658515236894_1042 : var_1658515236894_1146) } ) } else { func_1658515236894_1041<UInt8>() } ;
    let var_1658515236894_1251 : (Bool, Range<Int64>) = ((Option<UInt8>.None is Range<UInt64>), ((-16)&127..(-93)&127:(Int64(Int8(-8))|1)));
    var var_1658515236894_1273 : Range<Int64> = ((-63)&127..=78&127:25|1);
    var loopTimeVar_1658515236894_1281 : Int64 = 0;
    do {
        loopTimeVar_1658515236894_1281++;

    } while ((try { // block id: 1244
        Int16(-25) & Int16(29);
        if (false) { var_1658515236894_1251 } else { var_1658515236894_1251 } 
    } finally { // block id: 1261
        var_1658515236894_1263;
        var_1658515236894_737 + 27;
        if (var_1658515236894_11) { (false, var_1658515236894_1273) } else { (false, ((-48)&127..=84&127:21|1)) } 
    }[0]) && loopTimeVar_1658515236894_1281 < 100 ) ;
    var_1658515236894_98
}

main(): Int64 {
    try {
        try { // block id: 8
            if (var_1658515236894_11) { ###"+s%%~]yK\\("### } else { "3^(!xWY_1N" } 
        } catch (e: Exception) { // block id: 15
            (-48.0) ** var_1658515236894_19;
            var_1658515236894_25;
            var_1658515236894_28
        } finally { // block id: 30
            var_1658515236894_28
        };
        (Option<UInt8>.None ?? -var_1658515236894_40);
        match (Option<Bool>.None) {
            case caseVar_1658515236894_1784 => 
                if (var_1658515236894_1579) { [UInt32(177), UInt32(239), UInt32(175), UInt32(185), UInt32(150), UInt32(197), UInt32(121), UInt32(240), UInt32(212), UInt32(88)] } else { var_1658515236894_704 } ;
                var_1658515236894_1791
            
            case caseVar_1658515236894_1795 : (UInt32, Int64, UInt16, UInt32) => 
                var_1658515236894_1631;
                var_1658515236894_1800 + (-83.0);
                var_1658515236894_1460 & var_1658515236894_1791
            
            case _ => 
                var_1658515236894_1155 <<= ((Int32(103)) & 7);
                var_1658515236894_285
            
        }|>(func_1658515236894_309~>func_1658515236894_114)
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var_1658515236894_269*var_1658515236894_269), 64)
        crccheck.updateBuffer(UInt64(var_1658515236894_285*var_1658515236894_285), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
