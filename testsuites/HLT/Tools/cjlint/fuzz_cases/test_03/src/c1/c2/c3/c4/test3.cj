/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

// random seed:1654945724184

// All global variable need to be defined before use!
package c1.c2.c3.c4
public let var44 : UInt64 = UInt64(UInt64((-64)))
public var var125 : Class66 = Class66()
let var204 : Interface70 = Class66()
public let var216 : Unit = ()
public var var223 : UInt16 = UInt16(108)
var var274 : UInt32 = UInt32(Int32(9))
public let var346 : Int64 = Int64(UInt32(Int8(Int8(Int8(106)))))
let var364 : ?Bool = Option<Bool>.None
public var var371 : Float32 = Float32(Float32(Float32(Float32(Float32(-101.0)))))
public let var381 : Unit = ()
let var396 : ?Int64 = Option<Int64>.None
var var413 : Range<Int16> = (Int16(Int8(UInt8(UInt8(141))))&127..Int16(-86)&127:(Int64(UInt16(UInt16(Int8(4))))|1))
let var454 : Aggregate450<UInt8, Int8, Class66> = Aggregate450<UInt8, Int8, Class66>()
public var var471 : Range<UInt8> = (UInt8(120)&127..=UInt8(251)&127:((-124)|1))
let var486 : Int16 = Int16(115)
let var519 : Range<Int8> = (Int8(-37)&127..=Int8(-81)&127:13|1)
public interface Interface72<T0> where T0 <: Int16 {

}

public interface Interface71<T0> <: Interface72<Int16> {

}

public interface Interface70 <: Interface71<Int16> {

}

public interface Interface69<T0> <: Interface70 {

}

public open class Class66 <: Interface69<Rune> & Resource {
    public init() { // block id: 68

    }
;
    var var128 : Bool = false;
    public var var250 : Float64 = (-83.0);
    public static let var261 : ?Bool = Option<Bool>.None;
    public let var523 : Range<Int32> = (Int32(105)&127..Int32(-110)&127:(38|1));
    public var var538 : (Range<Int16>, Array<Int64>, Int16, UInt64) = ((Int16(-37)&127..=Int16(106)&127:((-94)|1)), [114, (-121), (-77), 10, (-84), 105, 52, (-119), 79, 49], Int16(69), UInt64(58))
    public func isClosed(): Bool { return true }
    public func close(): Unit {}
}



public struct Aggregate450<T0, T1, T2> where T0 <: UInt8, T1 <: Int8, T2 <: Class66 & Interface69<Rune> {
    public init() { // block id: 452

    }
;
    var var457 : Bool = true
}


func func318<T0, T1, T2>(param319 : Int16) : Int32 { // block id: 320
    var var326 : Bool = true;
    var var368 : Float32 = Float32(60.0);
    match (if (var326) { Option<Bool>.Some(false) } else { Option<Bool>.Some(false) } ) {
        case caseVar334 : Range<Int8> => 
            var216;
            UInt16(108) & UInt16(179);
            (var216, (param319&127..=param319&127:(var346|1)))
        
        case _ : Float64 => 
            ();
            var var357 : (Unit, Range<Int16>) = ((), (Int16(-70)&127..=Int16(49)&127:6|1));
            var357
        
        case _ => 
            var364;
            var368 /= Float32((Int32(var371)) | 1);
            if (true) { (var381, (Int16(9)&127..Int16(-98)&127:109|1)) } else { (var216, (param319&127..param319&127:((-99)|1))) } 
        
    }[0];
    var var426 : (Unit, Range<Int16>) = ((), (Int16(55)&127..Int16(29)&127:11|1));
    let var435 : Range<UInt64> = (UInt64(202)&127..UInt64(246)&127:27|1);
    (match (var396) {
        case caseVar400 => 
            var346
        
        case _ => 
            Class66();
            -81
        
    }, try { // block id: 409
        ((), var413)
    } finally { // block id: 424
        var426
    }, [(UInt64(247)&127..UInt64(153)&127:85|1), var435, var435, var435, (UInt64(6)&127..UInt64(189)&127:(-115)|1), var435, var435, (UInt64(221)&127..=var44&127:(14|1)), var435, (UInt64(126)&127..=UInt64(198)&127:98|1)][7], var454.var457, [UInt8(163), UInt8(31), UInt8(99), UInt8(70), UInt8(236), UInt8(66), UInt8(118), UInt8(19), UInt8(158), UInt8(132)][9], (Option<Range<UInt8>>.Some((UInt8(202)&127..=UInt8(54)&127:43|1)) ?? var471))[2];
    Int32(-23)
}

extend Class66 {
    public func func77<T0>(namedParam78 ! : T0) : Int64 { // block id: 79
        let var90 : Range<Int16> = (Int16(-46)&127..=Int16(-116)&127:((-67)|1));
        var var97 : ?Bool = ((Int16(110)&127..=Int16(57)&127:(-40)|1) as Bool);
        let var104 : Int64 = 0;
        let var116 : Float32 = Float32(Float32(-19.0));
        func func138<T0, T1>(param139 : Range<Int32>, namedParam140 ! : Array<Bool>) : Bool { // block id: 141
            ();
            var var162 : Int8 = Int8(Int8(UInt8(Int8(-86))));
            (if (var128) { Option<Int64>.None } else { Option<Int64>.None }  ?? var104 | var104) < try { // block id: 157
                if (false) { (var162&127..Int8(95)&127:((-82)|1)) } else { (Int8(-126)&127..Int8(-118)&127:(-23)|1) } ;
                Float32(-120.0);
                10
            } catch (_) { // block id: 172
                (Int8(-36)&127..Int8(79)&127:((-124)|1));
                if (var128) { Class66() } else { Class66() } ;
                var104
            }
        }
;
        func func132<T0, T1>(optionalParam133 ! : UInt16 = UInt16(155)) : Rune where T0 <: UInt8, T1 <: Array<Int64> { // block id: 135
            let var184 : Range<UInt16> = (UInt16(139)&127..=UInt16(91)&127:(Int64(Int16(Int16(Int16(-25))))|1));
            var var291 : Rune = 't';
            if (func138<Range<Int8>, Interface72<Int16>>(match (var184) {
                case _ : Range<Int32> => 
                    ();
                    (Int32(92)&127..=Int32(80)&127:(-125)|1)
                
                case _ : Array<Bool> => 
                    if (var128) { Class66() } else { var204 } ;
                    (Int32(77)&127..=Int32(-72)&127:(-13)|1)
                
                case _ : Range<Int16> => 
                    var var212 : Int8 = Int8(53);
                    var212 &= var212;
                    var216;
                    (Int32(10)&127..Int32(-59)&127:(-65)|1)
                
                case _ => 
                    var223 ^= optionalParam133;
                    let var227 : Range<Int32> = (Int32(Int32(Int32(-110)))&127..=Int32(101)&127:(48|1));
                    var227
                
            }, namedParam140 : [true, false, false, false, false, true, false, true, false, false])) { if (match {
                case var128 => 
                ();
                Int32(63);
                Int8(-100) < Int8(101)
                case true => 
                (Int16(-22)&127..=Int16(-89)&127:72|1);
                (-75.0) != var250
                case _ => 
                Class66();
                if (var128) { var90 } else { (Int16(71)&127..Int16(-38)&127:(-5)|1) } ;
                false
            }) { // block id: 259
                var261;
                'T'
            } else { // block id: 264
                '4'
            } } else { if (try { // block id: 268
                ();
                var90;
                UInt32(217) >= var274
            } catch (e: Exception) { // block id: 277
                false
            }) { // block id: 279
                'b'
            } else if (("/zExa6g=b*" is (Range<Int32>, Array<Bool>) -> Bool)) { // block id: 283
                namedParam78;
                Int8(107);
                '2'
            } else { // block id: 287
                if (var128) { var291 } else { var291 } 
            } } 
        }
;
        if (((var90, (Int8(-74)&127..Int8(94)&127:(-27)|1), var97, ((-2)&127..=(-26)&127:(var104|1)), ())[2] ?? try { // block id: 109
            ();
            Int8(26);
            true
        } finally { // block id: 113
            var116 <= Float32(-51.0)
        })) { // block id: 120
            Class66();
            Int32(-18)
        } else if (var125.var128) { // block id: 130
            func132<UInt8, Array<Int64>>(optionalParam133 : UInt16(12));
            var var311 : Int8 = Int8(Int8(-107));
            try { // block id: 296
                ();
                true
            } catch (e: Exception) { // block id: 299
                let var307 : Range<UInt64> = (UInt64(8)&127..UInt64(250)&127:(-91)|1);
                if (true) { (UInt64(35)&127..=UInt64(99)&127:(56|1)) } else { var307 } ;
                var311 == Int8(-90)
            } finally { // block id: 315
                false
            };
            let var479 : (Int16) -> Int32 = { lambdaParameter482 : Int16 => Int32(16) };
            var486|>var479
        } else { // block id: 488
            let var493 : (Unit, Range<Int16>) = ((), (Int16(UInt8(183))&127..=Int16(Int16(-107))&127:(109|1)));
            try { // block id: 490
                ();
                var493
            } catch (e: Exception) { // block id: 502
                let var504 : Int32 = Int32(-97);
                var504;
                UInt8(207);
                ((), (Int16(-50)&127..=Int16(34)&127:67|1))
            } finally { // block id: 510
                var216;
                (var216, (var486&127..=Int16(-48)&127:((-100)|1)))
            };
            var519;
            match (var523) {
                case _ => 
                    Class66();
                    Int32(-88)
                
            }
        };
        ();
        var538[1][0]
    }

}

extend<T0, T1, T2> Aggregate450<T0, T1, T2> where T0 <: UInt8, T1 <: Int8, T2 <: Class66 & Interface69<Rune> {

}

