/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

// random seed:1653993955692

// All global variable need to be defined before use!
import e1.e2.e3.e4.e5.*
public var var21 : Int64 = (-119)
var var34 : Array<Bool> = Array<Bool>(10){ i => true }
public var var52 : Range<UInt8> = (UInt8(226)&127..UInt8(191)&127:122|1)
public var var56 : Float32 = Float32(Float32(Float32(Float32(-51.0))))
let var5973 : Int64 = (-9)
var var6093 : String = "\"'Ho}2pzEb"
var var6157 : Array<Array<Bool>> = [[true, false, false, true, true, true, false, true, false, false], [true, true, true, true, false, false, true, false, false, true], [false, true, false, true, true, true, false, true, false, false], [false, true, true, true, true, false, true, false, false, false], [true, false, false, false, true, false, true, true, true, true], [false, true, false, true, true, true, true, true, false, false], [false, false, false, true, false, true, true, false, true, false], [false, false, false, true, false, false, false, true, true, false], [true, true, true, false, false, true, false, false, true, true], [false, true, true, false, true, true, true, true, true, true]]
func func66() : Range<UInt8> { // block id: 67
    var var5987 : ?Range<Int16> = ((((UInt16(46)&127..UInt16(226)&127:(-90)|1), ((-123)&127..=(-36)&127:(72|1)), [[false, false, true, false, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, false], [true, false, true, false, false, true, false, true, false, false], [false, true, false, true, true, false, true, false, true, true], [false, true, false, false, true, true, false, false, false, false], [true, true, false, true, true, false, false, true, true, false], [false, false, true, true, false, false, true, true, true, false], [true, false, false, false, false, false, true, true, true, true], [false, false, true, false, false, true, false, false, false, false], [true, false, true, true, true, false, false, true, false, true]], [true, false, false, true, true, false, true, false, false, false]) as Range<Int16>) as Range<Int16>);
    var var6075 : (Option<Result<(Range<UInt32>, (Result<Result<Range<UInt32>>>, ((Range<UInt16>, Range<Int64>, Array<Array<Bool>>, Array<Bool>), (Range<UInt16>, Range<Int64>, Array<Array<Bool>>, Array<Bool>), Range<UInt32>, (Int64, Range<UInt64>, Unit, Int8), Bool, Int16, Unit, Range<UInt32>, Int32)))>>, (Int64, Range<UInt64>, Unit, Int8)) = (Option<Result<(Range<UInt32>, (Result<Result<Range<UInt32>>>, ((Range<UInt16>, Range<Int64>, Array<Array<Bool>>, Array<Bool>), (Range<UInt16>, Range<Int64>, Array<Array<Bool>>, Array<Bool>), Range<UInt32>, (Int64, Range<UInt64>, Unit, Int8), Bool, Int16, Unit, Range<UInt32>, Int32)))>>.Some(Result<(Range<UInt32>, (Result<Result<Range<UInt32>>>, ((Range<UInt16>, Range<Int64>, Array<Array<Bool>>, Array<Bool>), (Range<UInt16>, Range<Int64>, Array<Array<Bool>>, Array<Bool>), Range<UInt32>, (Int64, Range<UInt64>, Unit, Int8), Bool, Int16, Unit, Range<UInt32>, Int32)))>.Err(Exception("LangFuzz Inner Exception"))), ((-19), (UInt64(Int16(-16))&127..UInt64(198)&127:(Int64((-66))|1)), (), Int8(Int8(UInt8(133)))));
    let var6202 : Aggregate2618<Array<Unit>> = Aggregate2618<Array<Unit>>();
    func69(optionalParam70 : if (true) { (if (true) { (UInt64(87)&127..=UInt64(148)&127:(var1770|1)) } else { (var927&127..UInt64(79)&127:(var1965|1)) } ) } else { (var927&127..var927&127:(var5973|1)) } , namedParam79 : [try { // block id: 5977
        var1429
    } finally { // block id: 5979
        'R';
        (UInt16(202)&127..UInt16(52)&127:94|1);
        false && true
    }, match (var5987) {
        case caseVar6000 => 
            Int8(-27);
            let var6004 : String = "KwI5_X<Rb6";
            var6004;
            var3416 <= var3416
        
        case caseVar6011 => 
            if (var1429) { [[false, true, true, true, true, true, true, false, true, false], [false, true, false, true, true, true, true, false, false, false], [true, false, false, true, false, false, true, false, true, true], [true, true, false, true, false, true, false, false, true, false], [false, true, true, true, false, true, false, false, true, true], [true, true, true, true, false, true, false, false, false, false], [true, true, false, true, true, false, true, true, true, true], [true, true, false, false, false, false, true, true, true, true], [true, true, false, false, false, true, false, true, false, true], [false, true, false, false, true, false, true, true, false, false]] } else { [[true, true, true, false, false, false, true, false, false, false], [true, false, false, true, true, true, true, true, true, false], [false, true, true, true, true, false, true, true, true, false], [true, true, false, true, false, true, true, true, true, false], [true, true, false, true, false, false, true, false, true, false], [false, true, false, true, false, false, true, true, true, false], [false, false, true, false, false, false, true, true, false, false], [true, true, false, false, true, true, false, false, true, true], [false, false, false, false, false, false, true, false, true, true], [false, false, false, true, false, true, true, true, false, false]] } ;
            "Ua{'jq<%Om@";
            var1965 <= (-15)
        
        case _ => 
            ();
            let var6026 : Array<Result<Bool>> = [Result<Bool>.Err(Exception("LangFuzz Inner Exception")), Result<Bool>.Ok(((Int16(49)&127..=Int16(118)&127:(51|1)) is Result<Bool>)), Result<Bool>.Err(Exception("LangFuzz Inner Exception")), Result<Bool>.Ok(((Int32(-53)&127..=Int32(37)&127:(-87)|1) is (UInt16, Result<Array<Bool>>, Rune, (Range<Int8>, Int16, Int32, Unit, String, Float64, Int32, Range<Int32>)) -> Result<Int16>)), Result<Bool>.Ok(true), Result<Bool>.Err(Exception("LangFuzz Inner Exception")), Result<Bool>.Err(Exception("LangFuzz Inner Exception")), Result<Bool>.Ok(((Result<Bool>.Err(Exception("LangFuzz Inner Exception")) as Range<UInt64>) is () -> Result<Int16>)), Result<Bool>.Ok((92.0 is (UInt8) -> (Option<Rune>, Array<Array<Bool>>, UInt32))), Result<Bool>.Err(Exception("LangFuzz Inner Exception"))];
            var6026;
            true
        
        case _ : (Float64, UInt32, Range<UInt64>, Range<UInt8>) => 
            var584;
            if (var2301) { var6059 } else { Result<(Range<UInt16>, Range<Int64>, Array<Array<Bool>>, Array<Bool>)>.Err(Exception("LangFuzz Inner Exception")) } ;
            var4638
        
        case _ => 
            var1449;
            (UInt32(98)&127..=UInt32(51)&127:19|1);
            false
        
    }, try { // block id: 6069
        false
    } catch (_) { // block id: 6071
        ((UInt32(119)&127..=UInt32(241)&127:76|1), var6075, var1449, var6093, Int32(-105));
        var2912
    }, true, match (var6059) {
        case _ : Result<Class598> => 
            var var6105 : UInt64 = UInt64(191);
            var6105 <<= ((UInt64(80)) & 7);
            if (var4638) { (var639, "P|bRa{=DR.@") } else { var2381 } ;
            var2866
        
        case caseVar6117 => 
            var4581
        
        case _ : Array<Unit> => 
            if (true) { [var639, var34, [false, false, false, false, true, true, true, false, true, true], [true, false, true, false, false, false, false, true, true, true], var34, var34, [false, true, false, false, true, true, true, true, false, true], [false, true, var2912, true, var2912, false, true, var3453, true, true], [var831, var831, var2205, false, var4638, var1835, var2912, true, false, false], [true, false, false, true, true, false, true, false, true, false]] } else { var6157 } ;
            if (var2866) { (UInt64(193)&127..UInt64(70)&127:64|1) } else { (UInt64(217)&127..UInt64(138)&127:((-103)|1)) } ;
            true
        
        case _ => 
            Result<Result<Range<UInt8>>>.Ok(Result<Range<UInt8>>.Err(Exception("LangFuzz Inner Exception")));
            true
        
    }, var1429 && var4638, match {
        case var1835 => 
        if (var2866) { Result<Array<Array<Bool>>>.Ok(var6157) } else { var1722 } ;
        var584;
        var2866
        case var831 => 
        var5603;
        true
        case _ => 
        var2866
    }, match (Option<Result<Array<Bool>>>.None) {
        case _ => 
            var584;
            Result<Result<Unit>>.Err(Exception("LangFuzz Inner Exception"));
            true
        
    }, if (true) { // block id: 6200
        var6202;
        var4638
    } else if (var2205) { // block id: 6206
        false
    } else { // block id: 6208
        false
    }, match (var3416) {
        case caseVar6214 => 
            var2912
        
        case caseVar6219 : Result<Unit> => 
            ();
            var56 += var56;
            var4581
        
        case _ : Result<Range<UInt8>> => 
            var4507 &= var2000;
            ();
            UInt16(126) >= var3416
        
        case _ => 
            ();
            UInt16(183) ^ UInt16(32);
            UInt16(136) >= var3416
        
    }]);
    var var6253 : ?Result<Bool> = ([[false, true, true, false, true, true, true, true, false, true], [true, false, false, false, false, true, true, false, false, true], [true, true, false, false, false, false, false, false, false, false], [true, true, false, false, true, true, true, false, true, true], [true, false, true, true, true, true, false, false, true, true], [false, false, true, true, true, false, false, false, true, true], [true, false, false, false, false, true, false, true, true, false], [false, false, true, false, true, false, false, true, false, false], [true, true, false, true, true, true, true, false, true, true], [false, true, true, false, false, true, true, true, false, true]] as Result<Bool>);
    let var6278 : Result<Result<Range<UInt8>>> = Result<Result<Range<UInt8>>>.Err(Exception("LangFuzz Inner Exception"));
    if (((var6253 ?? Result<Bool>.Ok(false)) ?? match ((-44.0)) {
        case 95.0 => 
            ();
            ();
            var2205
        
        case _ => 
            var21 /= ((108) | 1);
            var4581 && var4581
        
    })) { (if (false) { var6278 } else { var6278 }  ?? (var6278 ?? var6284)) } else { Result<Range<UInt8>>.Err(Exception("LangFuzz Inner Exception")) } ;
    (UInt8(169)&127..=UInt8(53)&127:(-90)|1)
}

main(): Int64 {
    try {
        var var15 : (String) -> Bool = func8;
        if (("""
\"@JMK
p|jn^
"""|>var15)) { // block id: 18
            Int8(84);
            var21
        } else if (var34[6]) { // block id: 50
            var52;
            var56 *= Float32(-14.0);
            30
        } else { // block id: 63
            var21
        };
        func66();
        try { // block id: 6290
            ();
            var var6295 : Int64 = Int64(UInt16(UInt8(46)));
            var21 * var6295
        } catch (e: Exception) { // block id: 6299
            var56 ** Float32(Int32(Float32(76.0)) & 3);
            (-95) * (-57)
        } finally { // block id: 6306
            (-2)
        } | 24
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var21*var21), 64)
        crccheck.updateBuffer(UInt64(var5973*var5973), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
