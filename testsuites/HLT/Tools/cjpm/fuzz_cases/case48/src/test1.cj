/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

package test

// random seed:1705516984964
// All global variable need to be defined before use!
internal import test.d1.d2.d3.*

let var_1705516984964_322: Class_1705516984964_150 = Class_1705516984964_150()
var var_1705516984964_412: Struct_1705516984964_384 = Struct_1705516984964_384()
public let var_1705516984964_492: Array<Option<Unit>> = [(("hp;C3\"bc8[", [UInt64(15), UInt64(252), UInt64(233),
        UInt64(194), UInt64(126), UInt64(154), UInt64(3), UInt64(166), UInt64(43), UInt64(86)], UInt8(16)) as Unit),
    (((Int32(Int32(UInt8(225))) & 127)..=(Int32(Int32(16)) & 127) : (Int64(64) | 1)) as Unit), Option<Unit>.None,
    (Class_1705516984964_422<Option<Array<Option<Unit>>>>() as Unit), Option<Unit>.None, Option<Unit>.None,
    Option<Unit>.None, (Int16(Int16(-76)) as Unit), Option<Unit>.None, Option<Unit>.None]
public let var_1705516984964_527: (Option<Interface_1705516984964_155>, Range<UInt8>, Int64, Option<(String, Array<UInt64>, 
    UInt8)>) = (Option<Interface_1705516984964_155>.None, ((UInt8(UInt8(52)) & 127)..=(UInt8(UInt8(189)) & 127) : (Int64(27) |
        1)), Int64(UInt16(146)), (((Int16(Int16(-76)) & 127)..=(Int16(Int16(-123)) & 127) : (Int64(99) | 1)) as (String, 
        Array<UInt64>, UInt8)))
public let var_1705516984964_1002: Bool = true
var var_1705516984964_1020: (Option<Array<Option<Unit>>>, Unit, Struct_1705516984964_384, Bool, Range<Int32>, Option<(Bool, 
    Unit, UInt16)>, Option<Unit>) = (Option<Array<Option<Unit>>>.None, (), Struct_1705516984964_384(), true, ((Int32(Int32(9)) &
        127)..=(Int32(Int32(68)) & 127) : (Int64(125) | 1)), Option<(Bool, Unit, UInt16)>.None, ((((UInt32(UInt32(87)) &
        127)..=(UInt32(UInt32(249)) & 127) : (Int64(68) | 1)) as Range<Int16>) as Unit))
public let var_1705516984964_1090: UInt16 = UInt16(42)
public let var_1705516984964_1094: (Int16, (String, Array<UInt64>, UInt8), Range<Int16>, Int64, (Bool, Unit, UInt16), 
    String, Int32) = (Int16(60), (###"`]k)JkcJ(J"###, [UInt64(252), UInt64(Int32(-76)), UInt64(232), UInt64(UInt8(146)),
            UInt64(Int8(107)), UInt64(252), UInt64(Int16(-79)), UInt64(UInt32(229)), UInt64(UInt16(166)),
            UInt64(UInt16(21))], UInt8(243)), ((Int16(Int16(UInt8(UInt8(221)))) & 127)..(Int16(Int16(108)) & 127) : (Int64(UInt16(203)) |
        1)), Int64(88), ((Struct_1705516984964_384() is Rune), (), UInt16(UInt8(92))), "me?mNMK%M[", Int32(16))
public let var_1705516984964_1135: Option<Unit> = Option<Unit>.None
let var_1705516984964_1142: VArray<Unit, $2> = VArray<Unit, $2>(repeat: ())

public func func_1705516984964_146(param_1705516984964_147: Option<(String, Array<UInt64>, UInt8)>): Bool { // block id: 148
    let var_1705516984964_290: (Int16, (String, Array<UInt64>, UInt8), Range<Int16>, Int64, (Bool, Unit, UInt16), String, 
        Int32) = (Int16(UInt16(5)), ("""
%P=*y
_]8:/
""", [UInt64(45), UInt64(187), UInt64(134), UInt64(22), UInt64(248),
                UInt64(62), UInt64(66), UInt64(91), UInt64(163), UInt64(103)], UInt8(UInt8(209))), ((Int16(Int16(-84)) &
            127)..(Int16(Int16(-7)) & 127) : (Int64(UInt64(Int32(-121))) | 1)), Int64(UInt64(Int32(112))), ((UInt32(UInt16(72)) is UInt16),
            (), UInt16(160)), "e}|i#:iZ5N", Int32(UInt16(Int16(Int8(84)))));
    Class_1705516984964_150.func_1705516984964_158(var_1705516984964_290[4],
        namedParam_1705516984964_160: var_1705516984964_322.var_1705516984964_325,
        namedParam_1705516984964_161: var_1705516984964_335[5])
}

public func func_1705516984964_375(param_1705516984964_376: Int64): Option<(String, Array<UInt64>, UInt8)> { // block id: 377
    (Struct_1705516984964_384.var_1705516984964_389 ?? var_1705516984964_412.func_1705516984964_415(
        var_1705516984964_457, namedParam_1705516984964_417: Class_1705516984964_150()));
    try { // block id: 463
        var_1705516984964_466 <<= ((var_1705516984964_469) & 7)
        var var_1705516984964_475: ?Interface_1705516984964_155 = (Int16(95) as Interface_1705516984964_155);
        let var_1705516984964_483: String = """
'R,,B
dq2N4
""";
        var var_1705516984964_487: UInt8 = UInt8(21);
        (var_1705516984964_475, ((UInt8(UInt8(5)) & 127)..(UInt8(UInt8(250)) & 127) : (Int64(94) | 1)),
            var_1705516984964_469, Option<(String, Array<UInt64>, UInt8)>.Some(
                (var_1705516984964_483, [UInt64(25), UInt64(106), UInt64(140), UInt64(190), UInt64(4), UInt64(87),
                        UInt64(54), UInt64(92), UInt64(19), UInt64(41)], var_1705516984964_487)))
    } catch (e: Exception) { // block id: 489
        var_1705516984964_457;
        var_1705516984964_492;
        var_1705516984964_527
    }[3]
}

public func func_1705516984964_11<T0>(): Bool { // block id: 12
    ();
    var var_1705516984964_539: Interface_1705516984964_155 = Class_1705516984964_150();
    var_1705516984964_539.func_1705516984964_542() |> (func_1705516984964_375 ~> func_1705516984964_146)
}

main(): Int64 {
    try {
        var var_1705516984964_1073: ?Float32 = Option<Float32>.Some(Float32(Float32(-37.0)));
        if ((Int8(Int8(67)) is Float32)) { // block id: 9
            func_1705516984964_11<Option<Interface_1705516984964_155>>();
            Option<(Range<UInt32>, Option<Unit>, Unit, (Bool, Unit, UInt16), Range<Int16>, Int64, Range<UInt32>)>.Some(
                var_1705516984964_978);
            if (var_1705516984964_1002) { // block id: 1004
                Float32(-50.0)
            } else if (var_1705516984964_1002) { // block id: 1007
                var_1705516984964_457;
                var_1705516984964_457;
                Float32(88.0)
            } else { // block id: 1011
                ();
                var_1705516984964_1014
            }
        } else if (var_1705516984964_1020[3]) { // block id: 1032
            VArray<Unit, $2>({i => ()})[1];
            var loopTimeVar_1705516984964_1042: Array<UInt64> = [UInt64(174), UInt64(UInt16(175)), UInt64(26),
                UInt64(128), UInt64(UInt32(UInt32(239))), UInt64(UInt64(18)), UInt64(128), UInt64(134),
                UInt64(UInt64(Int16(93))), UInt64(37)];
            for (i in loopTimeVar_1705516984964_1042 where var_1705516984964_1002) {
            }
            (Option<Float32>.None ?? var_1705516984964_1014)
        } else { // block id: 1067
            (Option<Unit>.None ?? var_1705516984964_457);
            (var_1705516984964_1073 ?? var_1705516984964_1014)
        };
        var var_1705516984964_1179: Range<UInt32> = ((UInt32(UInt32(39)) & 127)..=(UInt32(UInt32(233)) & 127) : (Int64(106) |
            1));
        (((true, var_1705516984964_457, var_1705516984964_1090), var_1705516984964_322, var_1705516984964_1094,
            var_1705516984964_1135, Option<Range<Int64>>.None, Int64(81), var_1705516984964_1090,
            Struct_1705516984964_255(), var_1705516984964_1142)[4] ?? ((Int64(if (var_1705516984964_1002) { // block id: 1150
            var_1705516984964_457;
            Option<Unit>.None;
            var_1705516984964_469 | var_1705516984964_469
        } else { // block id: 1156
            var_1705516984964_978;
            Int64(-53)
        }) & 127)..=(Int64(try { // block id: 1160
            var_1705516984964_457;
            let var_1705516984964_1163: Int64 = Int64(-101);
            var_1705516984964_1163
        } catch (e: Exception) { // block id: 1165
            var_1705516984964_457;
            var_1705516984964_492;
            Int64(3) + Int64(-92)
        } finally { // block id: 1171
            Option<Range<UInt64>>.None;
            Int64(46) % ((Int64(86)) | 1)
        }) & 127) : (try { // block id: 1177
            var_1705516984964_1179;
            var_1705516984964_1182;
            var_1705516984964_469 * Int64(41)
        } catch (_) { // block id: 1195
            var_1705516984964_466
        } | 1)));
        var_1705516984964_1200[5]
        // CRC Check All Variables
        var crcCheck = CrcCheck(5000, 32)
        crcCheck.updateBuffer(UInt64(var_1705516984964_1090 * var_1705516984964_1090), 64)
        crcCheck.crcCheck()
        crcCheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) {
        println("Exception: NoneValueException")
    }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        buffer = Array<Int64>(buffer_n, {i => 0})
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, {i => 0})
        var byte_c = 1
        var byte_index = 0
        while (value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[(i + buffer_index) % buffer.size] = byteArray[i + byte_index]
            i++
        }
        buffer_index = (buffer_index + i) % buffer.size
    }

    func updateBuffer(input: Bool, byte_n: Int64): Unit {
        if (input == true) {
            updateBuffer(1, byte_n)
        } else {
            updateBuffer(0, byte_n)
        }
    }

    func updateBuffer(input: Rune, byte_n: Int64): Unit {
        updateBuffer(UInt64(UInt32(input)), byte_n)
    }

    func updateBuffer(input: String, byte_n: Int64): Unit {
        for (c in input) {
            updateBuffer(c, byte_n)
        }
    }

    func updateBuffer(input: Unit, byte_n: Int64): Unit {
        updateBuffer(input.toString(), byte_n)
    }

    func updateBuffer(input: Any, byte_n: Int64): Unit {
        if (input is Hashable) {
            match (input as Hashable) {
                case Some(v) => updateBuffer(UInt64(v.hashCode()), byte_n)
                case _ => updateBuffer(1, byte_n)
            }
        } else if (input is ToString) {
            match (input as ToString) {
                case Some(v) => updateBuffer(v.toString(), byte_n)
                case _ => updateBuffer(1, byte_n)
            }
        } else {
            updateBuffer(1, byte_n)
        }
    }
    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, {i => 0})
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2 ** 2 * crc_output[i] + 2 ** 1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
