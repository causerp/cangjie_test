/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

package test

// random seed:1706535172786
// All global variable need to be defined before use!
internal import test.b1.b2.*

public var var_1706535172786_34: Option<Bool> = Option<Bool>.None
public var var_1706535172786_40: Bool = (Float32(Float32(Float32(Float32(34.0)))) is Int8)
public let var_1706535172786_225: Range<Int16> = ((Int16(Int16(43)) & 127)..=(Int16(Int16(-23)) & 127) : (Int64(59) | 1))
public var var_1706535172786_232: Int64 = Int64(-107)
const var_1706535172786_462: UInt16 = 112
public let var_1706535172786_468: (Interface_1706535172786_132, Int16, Array<UInt64>, Int64, Int16, Array<UInt64>, Array<Float32>) = (Class_1706535172786_125(),
    Int16(UInt16(UInt8(UInt8(210)))), [UInt64(Int16(Int16(-77))), UInt64(64), UInt64(112), UInt64(150),
        UInt64(UInt32(Int32(-64))), UInt64(Int64(UInt8(136))), UInt64(234), UInt64(UInt32(UInt16(68))), UInt64(232),
        UInt64(UInt8(110))], Int64(-43), Int16(11), [UInt64(196), UInt64(72), UInt64(168), UInt64(43), UInt64(2),
        UInt64(236), UInt64(190), UInt64(161), UInt64(238), UInt64(66)], [Float32(Float32(Float32(94.0))),
        Float32(125.0), Float32(88.0), Float32(Float32(18.0)), Float32(Float32(-24.0)), Float32(-79.0), Float32(-105.0),
        Float32(42.0), Float32(-32.0), Float32(Float32(Float32(-30.0)))])
public var var_1706535172786_589: (Range<Int16>, Float64, Array<UInt64>, Option<Array<Option<Bool>>>, Range<UInt32>, 
    Option<Bool>, Unit, Range<UInt32>) = (((Int16(Int16(UInt8(200))) & 127)..=(Int16(Int16(UInt8(UInt8(192)))) & 127) : (Int64(96) |
        1)), Float64(Float32(Float32(81.0))), [UInt64(38), UInt64(6), UInt64(49), UInt64(67), UInt64(170), UInt64(20),
        UInt64(172), UInt64(39), UInt64(216), UInt64(125)], (Class_1706535172786_125() as Array<Option<Bool>>), ((UInt32(UInt32(133)) &
        127)..=(UInt32(UInt32(97)) & 127) : (Int64(103) | 1)), Option<Bool>.None, (), ((UInt32(UInt32(96)) & 127)..=(UInt32(UInt32(250)) &
        127) : (Int64(-112) | 1)))
public var var_1706535172786_630: Array<Option<Bool>> = [(((Int32(Int32(36)) & 127)..(Int32(Int32(-123)) & 127) : (Int64(-101) |
    1)) as Bool), Option<Bool>.None,
    (((UInt8(UInt8(240)) & 127)..=(UInt8(UInt8(UInt8(12))) & 127) : (Int64(Int8(118)) | 1)) as Bool),
    (Class_1706535172786_125() as Bool), Option<Bool>.None, Option<Bool>.None, (Float64(Float32(66.0)) as Bool),
    ((Int64(Int32(-88)) as Unit) as Bool), ((Option<Array<Option<Bool>>>.None is Unit) as Bool), Option<Bool>.None]
public let var_1706535172786_666: Array<UInt64> = [UInt64(UInt16(128)), UInt64(229), UInt64(96), UInt64(207),
    UInt64(135), UInt64(186), UInt64(194), UInt64(47), UInt64(Int8(Int8(-22))), UInt64(118)]
public let var_1706535172786_727: Bool = ((((Int16(Int16(-23)) & 127)..(Int16(Int16(-18)) & 127) : (Int64(-55) | 1)), ("""
|a{MA^
]7L/+
""" is () -> String),
    UInt64(16), Int32(Int32(28)), ((Int64(Int64(-126)) & 127)..=(Int64(Int64(116)) & 127) : (Int64(-125) | 1))) is Array<Unit>)
public var var_1706535172786_814: Int8 = Int8(85)
public var var_1706535172786_843: Option<Unit> = (Option<Bool>.None as Unit)
public var var_1706535172786_866: Bool = (Class_1706535172786_125() is () -> Bool)
public var var_1706535172786_951: UInt64 = UInt64(248)

public open class Class_1706535172786_58 <: Interface_1706535172786_61 & Resource {
    public init() { // block id: 60

    }

    static prop var_1706535172786_402: (Interface_1706535172786_132, Int16, Array<UInt64>, Int64, Int16, Array<UInt64>, 
        Array<Float32>) { // block id: 403
        get() { // block id: 405
            (Class_1706535172786_125(), Int16(Int16(-17)), [UInt64(244), UInt64(25), UInt64(183), UInt64(128),
                    UInt64(Int8(100)), UInt64(Int64(-84)), UInt64(191), UInt64(Int32(-11)), UInt64(227), UInt64(92)],
                Int64(-1), Int16(-32), [UInt64(56), UInt64(76), UInt64(218), UInt64(212), UInt64(0), UInt64(60),
                    UInt64(88), UInt64(204), UInt64(240), UInt64(177)], [Float32(-108.0), Float32(68.0), Float32(4.0),
                    Float32(98.0), Float32(-38.0), Float32(43.0), Float32(-67.0), Float32(43.0), Float32(-15.0),
                    Float32(21.0)])
        }
    }
    prop var_1706535172786_528: Option<Array<Option<Bool>>> { // block id: 529
        get() { // block id: 531
            ((UInt64(40) as (Range<Int16>, Bool, UInt64, Int32, Range<Int64>)) as Array<Option<Bool>>)
        }
    }
    public static func func_1706535172786_237(
        optionalParam_1706535172786_238!: Array<UInt64> = [UInt64(137), UInt64(60), UInt64(133), UInt64(254),
            UInt64(180), UInt64(115), UInt64(197), UInt64(108), UInt64(38), UInt64(229)],
        optionalParam_1706535172786_240!: Bool = (((UInt64(UInt64(Int32(Int16(-35)))) & 127)..=(UInt64(UInt64(UInt64(27))) &
            127) : (Int64(UInt64(UInt8(8))) | 1)) is UInt32),
        optionalParam_1706535172786_251!: Array<UInt64> = [UInt64(151), UInt64(96), UInt64(100), UInt64(225), UInt64(2),
            UInt64(164), UInt64(96), UInt64(100), UInt64(49), UInt64(70)],
        namedParam_1706535172786_253!: (Range<Int16>, Float64, Range<UInt64>) -> Float32): Class_1706535172786_58 { // block id: 258
        if (func_1706535172786_261()) { // block id: 398
            var_1706535172786_402[2]
        } else { // block id: 429
            (Option<Interface_1706535172786_131>.None ?? Class_1706535172786_125());
            try (resource = Class_1706535172786_58()) { // block id: 438

            } finally { // block id: 439
                var_1706535172786_232 |= var_1706535172786_232
                var var_1706535172786_659: Option<Unit> = Option<Unit>.Some(());
                Class_1706535172786_125(var_1706535172786_659);
                var_1706535172786_296
            };
            if (true) {
                var_1706535172786_666
            } else {
                var_1706535172786_666
            }
        };
        Class_1706535172786_58()
    };

    mut prop var_1706535172786_1060: Unit { // block id: 1061
        get() { // block id: 1063
            ();
            ();
            var_1706535172786_1262
        }
        set(Value) { // block id: 1068
            (((Int16(Int16(Int8(-118))) & 127)..=(Int16(Int16(-57)) & 127) : (Int64(63) | 1)), Float64(119.0), [UInt64(8),
                    UInt64(237), UInt64(162), UInt64(146), UInt64(231), UInt64(54), UInt64(161), UInt64(239),
                    UInt64(192), UInt64(54)], (Class_1706535172786_125() as Array<Option<Bool>>), ((UInt32(UInt32(24)) &
                    127)..(UInt32(UInt32(54)) & 127) : (Int64(117) | 1)), Option<Bool>.None, (), ((UInt32(UInt32(70)) &
                    127)..(UInt32(UInt32(115)) & 127) : (Int64(54) | 1)));
            ();
            var_1706535172786_1262 = Value
        }
    }
    let var_1706535172786_1089: Unit = ();
    public func func_1706535172786_902(namedParam_1706535172786_903!: (Float32, Int8) -> UInt16,
        namedParam_1706535172786_907!: (Range<Int16>, Float64, Array<UInt64>, Option<Array<Option<Bool>>>, Range<UInt32>, 
            Option<Bool>, Unit, Range<UInt32>)): Array<Unit> { // block id: 908
        var loopTimeVar_1706535172786_932: Int = 0;
        while ((if (if (var_1706535172786_727) { // block id: 913
                true
            } else if (var_1706535172786_40) { // block id: 916
                var_1706535172786_727
            } else { // block id: 918
                Int32(115);
                true
            }) { // block id: 921
                var_1706535172786_296;
                true
            } else { // block id: 924
                let var_1706535172786_926: String = """
*^ \"t
PheI~
""";
                var_1706535172786_926;
                false
            }) && loopTimeVar_1706535172786_932 < 100) {
            loopTimeVar_1706535172786_932++;
            continue
        };
        var loopTimeVar_1706535172786_988: Array<UInt64> = [UInt64(Int16(-60)), UInt64(Int8(UInt8(UInt8(164)))),
            UInt64(166), UInt64(38), UInt64(197), UInt64(199), UInt64(49), UInt64(Int16(-114)), UInt64(UInt32(156)),
            UInt64(Int8(56))];
        for (i in loopTimeVar_1706535172786_988 where (Option<(Range<Int16>, Bool, UInt64, Int32, Range<Int64>)>.Some(
            (((Int16(Int16(66)) & 127)..(Int16(Int16(68)) & 127) : (Int64(87) | 1)), var_1706535172786_40, UInt64(213),
                Int32(-120), ((Int64(Int64(15)) & 127)..=(Int64(Int64(125)) & 127) : (Int64(-91) | 1)))) ?? (var_1706535172786_225,
            var_1706535172786_866, var_1706535172786_951, var_1706535172786_954, var_1706535172786_958))[1]) {
            try { // block id: 968
                var_1706535172786_630
            } finally { // block id: 970
                var_1706535172786_296;
                if (false) {
                    var_1706535172786_975
                } else {
                    var_1706535172786_975
                };
                var_1706535172786_630
            };
            (Option<Unit>.None ?? ())
        };
        const var_1706535172786_1021: Bool = true;
        let var_1706535172786_1034: Option<Range<Int32>> = (((UInt8(UInt8(23)) & 127)..(UInt8(UInt8(220)) & 127) : (Int64(12) |
            1)) as Range<Int32>);
        try { // block id: 1008
            (Option<Unit>.None ?? var_1706535172786_296);
            if (false) { // block id: 1014
                ();
                var_1706535172786_951 /= ((var_1706535172786_951) | 1)
                ()
            } else if (var_1706535172786_1021) { // block id: 1023
                [(), (), (), (), (), (), (), (), (), ()];
                ()
            };
            [(), (), (), (), (), (), (), (), (), ()]
        } catch (e: Exception) { // block id: 1027
            (var_1706535172786_1034 ?? var_1706535172786_975);
            (Option<Unit>.Some(var_1706535172786_296) ?? ());
            const var_1706535172786_1085: Unit = ();
            (Option<Array<Unit>>.Some(
                [var_1706535172786_296, var_1706535172786_1055, (), (), var_1706535172786_1060, var_1706535172786_1085,
                    (), var_1706535172786_1089, (), var_1706535172786_1085]) ?? [var_1706535172786_1060, (), (),
                var_1706535172786_1085, (), var_1706535172786_1055, (), (), (), ()])
        }
    };

    var var_1706535172786_1262: Unit = ()
    static init() {
    }
    public func isClosed(): Bool {
        return false
    }
    public func close(): Unit {}
}

public interface Interface_1706535172786_132 {}

public open class Class_1706535172786_125 <: Interface_1706535172786_128 {
    public init() { // block id: 127

    }

    public static let var_1706535172786_135: Class_1706535172786_58
    private init(param_1706535172786_541: Interface_1706535172786_61, namedParam_1706535172786_542!: Int32,
        optionalParam_1706535172786_543!: Range<Int64> = ((Int64(Int64(50)) & 127)..=(Int64(Int64(-121)) & 127) : (Int64(10) |
            1))) { // block id: 545
        var loopTimeVar_1706535172786_557: Array<UInt64> = [UInt64(158), UInt64(93), UInt64(64), UInt64(UInt8(Int8(45))),
            UInt64(Int64(3)), UInt64(Int64(66)), UInt64(Int32(86)), UInt64(199), UInt64(UInt16(Int16(UInt16(251)))),
            UInt64(Int16(95))];
        for (i in loopTimeVar_1706535172786_557 where try { // block id: 548
            var_1706535172786_296;
            ();
            false
        } catch (e: Exception) { // block id: 552
            var_1706535172786_40 && var_1706535172786_40
        }) {
        }
    };

    init(param_1706535172786_445: Option<Unit>, optionalParam_1706535172786_446!: () -> String = {=> ###"ni5FE+sAa8"###}) { // block id: 452
        try (resource = Class_1706535172786_58()) { // block id: 454
            Option<UInt16>.Some(var_1706535172786_462).getOrThrow();
            ()
        } catch (e: Exception) { // block id: 465
            var_1706535172786_468[1];
            ();
            ()
        };
        let var_1706535172786_525: Class_1706535172786_58 = Class_1706535172786_58();
        var var_1706535172786_537: Interface_1706535172786_129 = Class_1706535172786_125(Class_1706535172786_58(),
            namedParam_1706535172786_542: Int32(UInt8(101)));
        (var_1706535172786_525.var_1706535172786_528 ?? var_1706535172786_537.func_1706535172786_582(
            namedParam_1706535172786_583: UInt64(48)))
    };

    public open override func func_1706535172786_582(namedParam_1706535172786_583!: UInt64): Array<Option<Bool>> { // block id: 584
        (var_1706535172786_589[3] ?? try { // block id: 610
            [var_1706535172786_34, var_1706535172786_34, Option<Bool>.Some(true), Option<Bool>.None,
                Option<Bool>.Some(var_1706535172786_40), var_1706535172786_34, Option<Bool>.Some(var_1706535172786_40),
                var_1706535172786_34, var_1706535172786_34, var_1706535172786_625]
        } finally { // block id: 627
            var_1706535172786_296;
            var_1706535172786_630
        })
    };

    public static func func_1706535172786_705(param_1706535172786_706: (Int16, Float64, Float32, Unit) -> String,
        namedParam_1706535172786_712!: Option<Interface_1706535172786_131>,
        namedParam_1706535172786_713!: Interface_1706535172786_61): Interface_1706535172786_132 { // block id: 714
        var var_1706535172786_751: ?Interface_1706535172786_131 = Option<Interface_1706535172786_131>.Some(
            Class_1706535172786_125());
        if ((var_1706535172786_34 is Array<Option<Bool>>)) {
            if (var_1706535172786_40) { // block id: 720
                Int16(-84);
                var_1706535172786_296;
                if (var_1706535172786_40) {
                    Option<Bool>.Some(var_1706535172786_727)
                } else {
                    Option<Bool>.None
                }
            } else { // block id: 738
                let var_1706535172786_740: ?(Range<Int16>, Bool, UInt64, Int32, Range<Int64>) = Option<(Range<Int16>, 
                        Bool, UInt64, Int32, Range<Int64>)>.None;
                var_1706535172786_740;
                var_1706535172786_296;
                Option<Bool>.None
            }
        } else {
            match ((var_1706535172786_727, ((Int8(Int8(-16)) & 127)..=(Int8(Int8(111)) & 127) : (Int64(50) | 1)),
                var_1706535172786_751)[2]) {
                case caseVar_1706535172786_757 =>
                    Option<Bool>.Some(var_1706535172786_727);
                    var_1706535172786_625

                case _ =>
                    var var_1706535172786_767: Float64 = Float64(Float32(-3.0));
                    var_1706535172786_767 += Float64(82.0)
                    Option<Bool>.Some(var_1706535172786_40)
            }
        };
        (var_1706535172786_782 ?? var_1706535172786_785)[3] - var_1706535172786_814;
        var var_1706535172786_849: Interface_1706535172786_132 = Class_1706535172786_125();
        var var_1706535172786_872: Option<Option<Interface_1706535172786_132>> = Option<Option<Interface_1706535172786_132>>
            .None;
        ((try { // block id: 827
            [var_1706535172786_625, Option<Bool>.Some(var_1706535172786_727), Option<Bool>.None, var_1706535172786_625,
                Option<Bool>.Some(true), var_1706535172786_625, Option<Bool>.None, Option<Bool>.Some(true),
                var_1706535172786_625, var_1706535172786_625];
            var_1706535172786_843;
            Option<Option<Interface_1706535172786_132>>.Some(
                Option<Interface_1706535172786_132>.Some(var_1706535172786_849))
        } finally { // block id: 851
            Option<Interface_1706535172786_131>.None;
            [Option<Bool>.None, Option<Bool>.Some(var_1706535172786_40), Option<Bool>.Some(var_1706535172786_40),
                Option<Bool>.Some(var_1706535172786_40), var_1706535172786_625, var_1706535172786_34,
                var_1706535172786_625, Option<Bool>.Some(var_1706535172786_866), var_1706535172786_34,
                var_1706535172786_34];
            var_1706535172786_872
        } ?? Option<Interface_1706535172786_132>.None) ?? try { // block id: 876
            var_1706535172786_849
        } finally { // block id: 878
            var_1706535172786_866 &&= true
            Class_1706535172786_125(Option<Unit>.None)
        })
    }

    static init() {
        var_1706535172786_135 = Class_1706535172786_58()
    }
}

main(): Int64 {
    try {
        let var_1706535172786_25: Option<Bool> = (((Int32(Int32(-69)) & 127)..=(Int32(Int32(125)) & 127) : (Int64(79) | 1)) as Bool);
        if (([var_1706535172786_25, var_1706535172786_25, var_1706535172786_25, var_1706535172786_34,
            Option<Bool>.Some(false), Option<Bool>.Some(var_1706535172786_40), var_1706535172786_25, Option<Bool>.None,
            Option<Bool>.Some(var_1706535172786_40), Option<Bool>.None][5] ?? (((UInt64(UInt64(44)) & 127)..(UInt64(UInt64(122)) &
            127) : (Int64(-115) | 1)) is Array<UInt64>))) { // block id: 54

        }
        var var_1706535172786_1105: (Float32, Int8) -> UInt16 = func_1706535172786_313;
        func_1706535172786_138().func_1706535172786_902(namedParam_1706535172786_903: var_1706535172786_1105,
            namedParam_1706535172786_907: var_1706535172786_589)[3];
        let var_1706535172786_1209: (Bool, (Bool, Int64, Class_1706535172786_58, Array<Float32>, (Interface_1706535172786_132, 
            Int16, Array<UInt64>, Int64, Int16, Array<UInt64>, Array<Float32>), Range<UInt16>)) = (false, (true, Int64(-27),
                Class_1706535172786_58(), [Float32(Float32(37.0)), Float32(Float32(103.0)), Float32(50.0),
                    Float32(Float32(94.0)), Float32(-50.0), Float32(110.0), Float32(Float32(95.0)),
                    Float32(Float32(-40.0)), Float32(Float32(-29.0)), Float32(Float32(-82.0))], (Class_1706535172786_125(),
                    Int16(Int16(-91)), [UInt64(155), UInt64(49), UInt64(167), UInt64(57), UInt64(67), UInt64(176),
                        UInt64(66), UInt64(51), UInt64(67), UInt64(115)], Int64(-96), Int16(UInt16(123)), [UInt64(139),
                        UInt64(130), UInt64(72), UInt64(17), UInt64(32), UInt64(204), UInt64(61), UInt64(15), UInt64(62),
                        UInt64(144)], [Float32(-114.0), Float32(84.0), Float32(-1.0), Float32(-10.0), Float32(97.0),
                        Float32(-37.0), Float32(114.0), Float32(83.0), Float32(52.0), Float32(7.0)]), ((UInt16(UInt16(UInt16(249))) &
                    127)..=(UInt16(UInt16(177)) & 127) : (Int64(-59) | 1))));
        match ((Option<(Bool, Range<Int8>, Option<Interface_1706535172786_131>)>.None ?? (var_1706535172786_727, ((Int8(Int8(106)) &
                127)..=(Int8(Int8(108)) & 127) : (Int64(120) | 1)), Option<Interface_1706535172786_131>.None))) {
            case (_, _, caseVar_1706535172786_1123) =>
                var_1706535172786_1127 -= var_1706535172786_1127
                var var_1706535172786_1151: Option<Bool> = Option<Bool>.None;
                (var_1706535172786_225, Float64(-111.0), [var_1706535172786_951, UInt64(117), UInt64(173),
                        var_1706535172786_951, var_1706535172786_951, var_1706535172786_951, UInt64(17), UInt64(77),
                        UInt64(70), var_1706535172786_951], Option<Array<Option<Bool>>>.Some(
                        [Option<Bool>.None, var_1706535172786_34, Option<Bool>.None, var_1706535172786_1151,
                            Option<Bool>.Some(false), Option<Bool>.None, var_1706535172786_1151, Option<Bool>.Some(true),
                            var_1706535172786_1151, Option<Bool>.None]), ((UInt32(UInt32(72)) & 127)..(UInt32(UInt32(140)) &
                        127) : (Int64(7) | 1)), Option<Bool>.Some(true), var_1706535172786_296, ((UInt32(UInt32(222)) &
                        127)..=(UInt32(var_1706535172786_1168) & 127) : (var_1706535172786_232 | 1)));
                var_1706535172786_232 * Int64(84)

            case _ =>
                let var_1706535172786_1186: Option<Array<Option<Bool>>> = (Option<Unit>.None as Array<Option<Bool>>);
                (((Int16(Int16(-100)) & 127)..(Int16(Int16(-73)) & 127) : (Int64(-76) | 1)), var_1706535172786_1182, [UInt64(86),
                        UInt64(112), UInt64(155), UInt64(176), UInt64(253), UInt64(107), UInt64(82), UInt64(144),
                        UInt64(207), UInt64(156)], var_1706535172786_1186, var_1706535172786_1190, Option<Bool>.Some(
                        true), var_1706535172786_1055, ((UInt32(UInt32(240)) & 127)..=(UInt32(UInt32(128)) & 127) : (Int64(93) |
                        1)));
                var_1706535172786_296;
                Int64(-5) - Int64(37)
        } - var_1706535172786_1209[1][1]
        // CRC Check All Variables
        var crcCheck = CrcCheck(5000, 32)
        crcCheck.updateBuffer(UInt64(var_1706535172786_232 * var_1706535172786_232), 64)
        crcCheck.updateBuffer(UInt64(var_1706535172786_462 * var_1706535172786_462), 64)
        crcCheck.updateBuffer(UInt64(var_1706535172786_814 * var_1706535172786_814), 64)
        crcCheck.updateBuffer(UInt64(var_1706535172786_951 * var_1706535172786_951), 64)
        crcCheck.crcCheck()
        crcCheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) {
        println("Exception: NoneValueException")
    }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        buffer = Array<Int64>(buffer_n, {i => 0})
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, {i => 0})
        var byte_c = 1
        var byte_index = 0
        while (value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[(i + buffer_index) % buffer.size] = byteArray[i + byte_index]
            i++
        }
        buffer_index = (buffer_index + i) % buffer.size
    }

    func updateBuffer(input: Bool, byte_n: Int64): Unit {
        if (input == true) {
            updateBuffer(1, byte_n)
        } else {
            updateBuffer(0, byte_n)
        }
    }

    func updateBuffer(input: Rune, byte_n: Int64): Unit {
        updateBuffer(UInt64(UInt32(input)), byte_n)
    }

    func updateBuffer(input: String, byte_n: Int64): Unit {
        for (c in input) {
            updateBuffer(c, byte_n)
        }
    }

    func updateBuffer(input: Unit, byte_n: Int64): Unit {
        updateBuffer(input.toString(), byte_n)
    }

    func updateBuffer(input: Any, byte_n: Int64): Unit {
        if (input is Hashable) {
            match (input as Hashable) {
                case Some(v) => updateBuffer(UInt64(v.hashCode()), byte_n)
                case _ => updateBuffer(1, byte_n)
            }
        } else if (input is ToString) {
            match (input as ToString) {
                case Some(v) => updateBuffer(v.toString(), byte_n)
                case _ => updateBuffer(1, byte_n)
            }
        } else {
            updateBuffer(1, byte_n)
        }
    }
    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, {i => 0})
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2 ** 2 * crc_output[i] + 2 ** 1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
