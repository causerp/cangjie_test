/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

// random seed:1653600871254

// All global variable need to be defined before use!
package test.h1.h2

public let var75: Int32 = Int32(UInt8(202))
public var var209: Bool = ((((UInt16(UInt16(61)) & 127)..=(UInt16(144) & 127) : ((Int64(UInt32(47)) | 1))), ((Int32(-122) &
        127)..(Int32(88) & 127) : (22 | 1)), r't', UInt32(Int16(UInt8(77))), Option<Int32>.None, UInt16(UInt8(Int8(53))),
    ()) is Option<Array<Range<Int16>>>)
var var286: Float32 = Float32(113.0)
public let var357: ?Range<Int64> = ((([UInt32(223), UInt32(161), UInt32(110), UInt32(18), UInt32(107), UInt32(86),
    UInt32(101), UInt32(181), UInt32(6), UInt32(188)] as Unit) as Range<Int64>) as Range<Int64>)
public let var452: UInt8 = UInt8(UInt8(UInt8(Int8(UInt8(29)))))
public var var473: Int32 = Int32(UInt8(UInt8(Int8(Int8(-19)))))
public var var527: Option<Array<Range<Int16>>> = Option<Array<Range<Int16>>>.None
public var var539: Class531<Option<Array<Range<Int16>>>, Int16> = Class531<Option<Array<Range<Int16>>>, Int16>()
public var var591: Float64 = Float64(Float32(119.0))

public func func31<T0, T1>(param32: Float64): Range<Int64> { // block id: 33
    let var41: Bool = false;
    let var46: (Range<UInt16>, Range<Int32>, Rune, UInt32, Option<Int32>, UInt16, Unit) = (((UInt16(49) & 127)..(UInt16(118) &
            127) : (((-23) | 1))), ((Int32(-82) & 127)..(Int32(88) & 127) : ((-25) | 1)), r'X', UInt32(Int8(-75)), Option<Int32>
            .None, UInt16(40), ());
    let var162: Int16 = Int16(UInt8(UInt8(208)));
    let var233: Unit = ();
    func func61(param62: Float32, namedParam63!: Option<Int32>): Option<Int32> { // block id: 64
        let var80: Int64 = Int64(UInt16(171));
        if (([UInt32(185), UInt32(226), UInt32(197), UInt32(120), UInt32(253), UInt32(217), UInt32(221), UInt32(223),
            UInt32(87), UInt32(111)][8] is Rune)) { // block id: 71

        } else if ((((var75 & 127)..=(var75 & 127) : ((var80 | 1))) is Int8)) { // block id: 83
            let var156: Rune = r'F';
            func func85<T0, T1>(): Range<Int16> { // block id: 86
                let var102: Option<Array<Range<Int16>>> = Option<Array<Range<Int16>>>.Some(
                    [((Int16(Int8(-58)) & 127)..(Int16(-102) & 127) : ((Int64((-1)) | 1))),
                        ((Int16(51) & 127)..(Int16(13) & 127) : (119 | 1)),
                        ((Int16(-65) & 127)..(Int16(Int8(-23)) & 127) : ((7 | 1))),
                        ((Int16(UInt8(104)) & 127)..(Int16(Int16(83)) & 127) : ((Int64(UInt8(106)) | 1))),
                        ((Int16(68) & 127)..=(Int16(UInt8(181)) & 127) : ((61 | 1))),
                        ((Int16(22) & 127)..(Int16(UInt8(163)) & 127) : ((Int64(Int32(73)) | 1))),
                        ((Int16(101) & 127)..=(Int16(40) & 127) : (69 | 1)),
                        ((Int16(12) & 127)..(Int16(102) & 127) : ((-16) | 1)),
                        ((Int16(Int8(107)) & 127)..=(Int16(UInt16(22)) & 127) : ((123 | 1))),
                        ((Int16(UInt16(144)) & 127)..(Int16(-49) & 127) : ((Int64(Int32(-93)) | 1)))]);
                ((Option<Option<Array<Range<Int16>>>>.Some(Option<Array<Range<Int16>>>.None) ?? var102) ?? match (param32) {
                    case 116.0 | -13.0 | -75.0 | 97.0 =>
                        ();
                        var156;
                        [((Int16(109) & 127)..(Int16(84) & 127) : ((-112) | 1)),
                            ((var162 & 127)..=(Int16(32) & 127) : ((var80 | 1))),
                            ((var162 & 127)..=(var162 & 127) : (((-116) | 1))),
                            ((Int16(-47) & 127)..=(Int16(117) & 127) : ((var80 | 1))),
                            ((var162 & 127)..(var162 & 127) : (((-3) | 1))),
                            ((Int16(-128) & 127)..=(Int16(97) & 127) : ((102 | 1))),
                            ((Int16(-56) & 127)..=(var162 & 127) : ((114 | 1))),
                            ((Int16(48) & 127)..(Int16(-113) & 127) : ((-18) | 1)),
                            ((Int16(27) & 127)..(Int16(29) & 127) : (((-26) | 1))),
                            ((var162 & 127)..=(var162 & 127) : ((var80 | 1)))]

                    case _ =>
                        var41 && true;
                        let var203: Unit = ();
                        var203;
                        [((Int16(18) & 127)..(Int16(-52) & 127) : (62 | 1)),
                            ((Int16(-94) & 127)..(Int16(-32) & 127) : ((-86) | 1)),
                            ((Int16(120) & 127)..=(Int16(-120) & 127) : ((-94) | 1)),
                            ((Int16(103) & 127)..(Int16(-42) & 127) : (73 | 1)),
                            ((Int16(-21) & 127)..=(Int16(-46) & 127) : ((-48) | 1)),
                            ((Int16(32) & 127)..=(Int16(-57) & 127) : ((-106) | 1)),
                            ((Int16(74) & 127)..=(Int16(-100) & 127) : (48 | 1)),
                            ((Int16(-7) & 127)..=(Int16(-13) & 127) : (93 | 1)),
                            ((Int16(71) & 127)..(Int16(-63) & 127) : (88 | 1)),
                            ((Int16(123) & 127)..(Int16(106) & 127) : ((-71) | 1))]
                })[0]
            };

            func85<Int16, Range<Int32>>();
            var209 = false
        };
        let var236: Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
        match (try { // block id: 231
            var233;
            var236
        } catch (_) { // block id: 238
            [(), (), var233, var233, var233, (), (), var233, var233, ()]
        }) {
            case _ =>
                //UInt64(20) ** (UInt64(248) & 3);
                if (var209) {
                    namedParam63
                } else {
                    namedParam63
                }

            case caseVar262 =>
                UInt32(144);
                Option<Int32>.None;
                Option<Int32>.Some(var75)

            case _ =>
                var233;
                if (false) {
                    Option<Int32>.None
                } else {
                    Option<Int32>.Some(var75)
                }

            case _ =>
                if (true) {
                    namedParam63
                } else {
                    namedParam63
                };
                ((UInt16(112) & 127)..(UInt16(62) & 127) : ((-58) | 1));
                Option<Int32>.None
        }
    };

    var var289: Option<Int32> = Option<Int32>.None;
    (if (var41) {
        var46[4]
    } else {
        func61(var286, namedParam63: var289)
    } ?? match (match (Option<Array<Range<Int16>>>.Some(
        [((Int16(4) & 127)..=(Int16(-103) & 127) : ((-98) | 1)), ((Int16(-122) & 127)..=(Int16(-8) & 127) : ((-40) | 1)),
            ((Int16(15) & 127)..=(Int16(2) & 127) : (96 | 1)), ((Int16(-24) & 127)..=(Int16(76) & 127) : ((-118) | 1)),
            ((Int16(-83) & 127)..(Int16(53) & 127) : ((-120) | 1)), ((Int16(-63) & 127)..(Int16(100) & 127) : (110 | 1)),
            ((Int16(-74) & 127)..=(Int16(-3) & 127) : ((-48) | 1)), ((Int16(-63) & 127)..(Int16(1) & 127) : (111 | 1)),
            ((Int16(-46) & 127)..=(Int16(-115) & 127) : (104 | 1)), ((Int16(-40) & 127)..(Int16(7) & 127) : ((-40) | 1))])) {
        case _ =>
            var233;
            Option<Int32>.Some(var75)

        case caseVar303 =>
            ();
            var var310: Int64 = 63;
            ((UInt16(128) & 127)..=(UInt16(179) & 127) : ((var310 | 1)));
            if (true) {
                Option<Int32>.None
            } else {
                Option<Int32>.Some(Int32(47))
            }

        case _ =>
            var233;
            var233;
            if (false) {
                var289
            } else {
                Option<Int32>.Some(var75)
            }
    }) {
        case _ => var75 % ((Int32(89)) | 1)
    });
    var var345: Option<Array<Range<Int16>>> = Option<Array<Range<Int16>>>.None;
    let var349: Option<Option<Array<Range<Int16>>>> = Option<Option<Array<Range<Int16>>>>.None;
    try { // block id: 332
        Option<Unit>.Some(()).getOrThrow();
        if (false) {
            Option<Option<Array<Range<Int16>>>>.None
        } else {
            Option<Option<Array<Range<Int16>>>>.Some(var345)
        }
    } finally { // block id: 347
        var349
    };
    var var369: ??Range<Int64> = Option<Option<Range<Int64>>>.Some(
        Option<Range<Int64>>.Some((((-58) & 127)..=((-80) & 127) : ((-81) | 1))));
    (var357 ?? ((var369 ?? var357) ?? match (var345) {
        case caseVar378 =>
            let var384: Range<Int64> = ((Int64(Int8(10)) & 127)..(50 & 127) : ((33 | 1)));
            if (var209) {
                ((95 & 127)..((-102) & 127) : ((-75) | 1))
            } else {
                var384
            }

        case caseVar392: UInt32 => ((1 & 127)..=(88 & 127) : (124 | 1))

        case caseVar397 =>
            var var404: Int64 = Int64(UInt16(125));
            if (true) {
                ((45 & 127)..=(var404 & 127) : ((var404 | 1)))
            } else {
                ((var404 & 127)..=((-6) & 127) : ((4 | 1)))
            }

        case caseVar414: Range<UInt64> =>
            let var417: Range<Int64> = ((100 & 127)..=(0 & 127) : ((75 | 1)));
            var417

        case _ =>
            ();
            let var427: Int64 = 97;
            ((var427 & 127)..(var427 & 127) : ((121 | 1)))
    }))
}

public interface Interface535<T0> {}

public interface Interface536<T0, T1> <: Interface535<Int8> {}

public interface Interface534 <: Interface535<Int8> & Interface536<Option<Option<Range<Int64>>>, Int8> {}

public interface Interface537 {}

public open class Class531<T0, T1> <: Interface534 & Interface537 {
    public init() { // block id: 533

    }

    public var var542: (Float64, Int32, Int32) = (81.0, Int32(-58), Int32(-96))
}

extend Class531<Option<Array<Range<Int16>>>, Int16> {}
