/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

package test

// random seed:1653600871254

// All global variable need to be defined before use!
internal import test.h1.h2.*

var var18: Unit = ()
let var488: Int64 = Int64(Int16(21))
public let var549: Array<Range<Int16>> = [((Int16(-80) & 127)..(Int16(13) & 127) : ((-28) | 1)),
    ((Int16(-52) & 127)..=(Int16(72) & 127) : ((-56) | 1)), ((Int16(86) & 127)..=(Int16(89) & 127) : (88 | 1)),
    ((Int16(90) & 127)..(Int16(-48) & 127) : ((-112) | 1)), ((Int16(-32) & 127)..=(Int16(-44) & 127) : ((-84) | 1)),
    ((Int16(40) & 127)..=(Int16(97) & 127) : ((-5) | 1)), ((Int16(-113) & 127)..=(Int16(101) & 127) : ((-92) | 1)),
    ((Int16(-7) & 127)..(Int16(89) & 127) : (65 | 1)), ((Int16(68) & 127)..(Int16(39) & 127) : ((-43) | 1)),
    ((Int16(-2) & 127)..=(Int16(70) & 127) : (125 | 1))]
public var var600: Int16 = Int16(UInt8(130))
let var610: Range<Int8> = ((Int8(26) & 127)..=(Int8(-62) & 127) : ((-2) | 1))
var var632: UInt16 = UInt16(Int8(Int8(UInt8(136))))
public let var642: Int64 = 75

func func432(param433: Option<Unit>): Range<Int64> { // block id: 434
    let var441: Range<Int16> = ((Int16(-118) & 127)..=(Int16(42) & 127) : (16 | 1));
    let var446: Float64 = Float64(Float32(89.0));
    (var357 ?? func31<Array<Range<Int16>>, Interface534>(try { // block id: 439
        var441;
        91.0 ** Float64(Int32(var446) & 3)
    } catch (e: Exception) { // block id: 449
        ();
        var452;
        var446
    }))
}

public func func462(param463: Float64): Option<Unit> { // block id: 464
    try { // block id: 466
        (param463, Int32(64), var473)[0];
        let var484: UInt16 = UInt16(243);
        match ((((var484 & 127)..=(var484 & 127) : ((var488 | 1))), ((var75 & 127)..=(Int32(-24) & 127) : (((-78) | 1))),
            r'X', UInt32(184), Option<Int32>.Some(Int32(-8)), var484, var18)) {
            case _ =>
                Option<Unit>.None;
                Option<Array<Range<Int16>>>.None

            case (_, caseVar508: Range<Int16>, _, caseVar509: Range<Int64>, caseVar510: Range<Int8>, caseVar511: (Float64, 
                        Int32, Int32), _) => Option<Array<Range<Int16>>>.None

            case _ =>
                Option<Option<Range<Int64>>>.None;
                let var521: Int16 = Int16(8);
                if (false) {
                    ((var521 & 127)..(var521 & 127) : ((var488 | 1)))
                } else {
                    ((Int16(-87) & 127)..=(Int16(-34) & 127) : (96 | 1))
                };
                var527
        }
    } catch (e: Exception) { // block id: 529
        var539.var542;
        var549[9];
        let var568: String = """
>IW-(
Qe_m\\
""";
        try { // block id: 553
            var18;
            if (false) {
                ((Int32(-66) & 127)..(Int32(-9) & 127) : (93 | 1))
            } else {
                ((var473 & 127)..=(Int32(-29) & 127) : ((var488 | 1)))
            };
            if (false) {
                Option<Array<Range<Int16>>>.None
            } else {
                var527
            }
        } finally { // block id: 566
            var568;
            ();
            var527
        }
    };
    Option<Unit>.None
}

main(): Int64 {
    try {
        [var18, var18, (), var18, (), var18, var18, (), (), ()][2];
        var var460: (Option<Unit>) -> Range<Int64> = func432;
        let var574: (Float64) -> Option<Unit> = {
            lambdaParameter577: Float64 => ([((Int16(83) & 127)..=(Int16(34) & 127) : ((-45) | 1)),
                ((Int16(-14) & 127)..(Int16(-40) & 127) : (12 | 1)),
                ((Int16(-102) & 127)..(Int16(-95) & 127) : ((-36) | 1)),
                ((Int16(-103) & 127)..(Int16(-41) & 127) : (74 | 1)), ((Int16(-32) & 127)..=(Int16(0) & 127) : ((-6) | 1)),
                ((Int16(-28) & 127)..=(Int16(123) & 127) : (34 | 1)), ((Int16(65) & 127)..(Int16(-47) & 127) : (104 | 1)),
                ((Int16(49) & 127)..(Int16(-13) & 127) : (10 | 1)), ((Int16(77) & 127)..=(Int16(20) & 127) : (71 | 1)),
                ((Int16(27) & 127)..(Int16(62) & 127) : (44 | 1))] as Unit)
        };
        try { // block id: 582
            (-83);
            116.0
        } catch (e: Exception) { // block id: 585
            var var588: UInt64 = UInt64(16);
            var588++;
            var591
        } |> (var574 ~> var460);
        if (if (var209) { // block id: 597
            var600 /= ((var600) | 1)
            let var605: Bool = true;
            var605
        } else if (var209) { // block id: 608
            var610;
            var var614: UInt8 = UInt8(6);
            var614 &= UInt8(103)
            false
        } else { // block id: 618
            var18;
            if (true) {
                Class531<Option<Array<Range<Int16>>>, Int16>()
            } else {
                Class531<Option<Array<Range<Int16>>>, Int16>()
            };
            false
        }) { // block id: 625
            [((Int16(-122) & 127)..(Int16(-24) & 127) : (121 | 1)), ((Int16(64) & 127)..(Int16(-41) & 127) : ((-109) | 1)),
                ((Int16(47) & 127)..(Int16(86) & 127) : ((-54) | 1)), ((Int16(-2) & 127)..=(Int16(-16) & 127) : (19 | 1)),
                ((Int16(60) & 127)..(Int16(121) & 127) : ((-31) | 1)),
                ((Int16(-74) & 127)..(Int16(-92) & 127) : ((-15) | 1)), ((Int16(-90) & 127)..=(Int16(-6) & 127) : (32 | 1)),
                ((Int16(-90) & 127)..=(Int16(12) & 127) : ((-27) | 1)), ((Int16(43) & 127)..(Int16(-124) & 127) : (22 | 1)),
                ((Int16(-68) & 127)..=(Int16(42) & 127) : (14 | 1))];
            108 / (((-24)) | 1)
        } else if ((var632 is Range<Int64>)) { // block id: 637
            ();
            var18;
            var642 >> (((-75)) & 7)
        } else { // block id: 645
            ();
            var18;
            let var651: Int64 = Int64(Int16(Int8(UInt8(33))));
            (-87) / ((var651) | 1)
        }
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var488 * var488), 64)
        crccheck.updateBuffer(UInt64(var600 * var600), 64)
        crccheck.updateBuffer(UInt64(var632 * var632), 64)
        crccheck.updateBuffer(UInt64(var642 * var642), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) {
        println("Exception: NoneValueException")
    }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        buffer = Array<Int64>(buffer_n, {i => 0})
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, {i => 0})
        var byte_c = 1
        var byte_index = 0
        while (value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, {i => 0})
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2 ** 2 * crc_output[i] + 2 ** 1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
