/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

package test

// random seed:1654010810666

// All global variable need to be defined before use!
public let var21: Option<Int8> = Option<Int8>.None
let var35: Class30 = Class30()
var var53: Bool = (Int16(-109) is Float64)
var var104: Int8 = Int8(Int8(Int8(56)))
public var var173: Unit = ()
let var203: Array<Enum198> = [Enum198.defaultValue, Enum198.defaultValue, Enum198.defaultValue, Enum198.defaultValue,
    Enum198.defaultValue, Enum198.defaultValue, Enum198.defaultValue, Enum198.defaultValue, Enum198.defaultValue,
    Enum198.defaultValue]
public let var228: Option<Int8> = Option<Int8>.None
var var267: Float32 = Float32(23.0)
public var var309: Int64 = Int64(Int16(UInt16(107)))
public let var336: (UInt16, Range<UInt64>, (String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, 
    Int32)), (Bool, UInt8, Int32), Range<Int8>, Range<Int64>, Float32) = (UInt16(15), ((UInt64(0) & 127)..(UInt64(Int8(Int8(-56))) &
        127) : ((Int64(UInt16(110)) | 1))), ("""
&3_M,
}pwhx
""", ((UInt16(242) & 127)..=(UInt16(178) & 127) : (27 | 1)),
        Int16(UInt8(223)), (), Int64(UInt8(231)), Int8(UInt8(UInt8(116))), [r'E', r'7', r'x', r'X', r'm', r'G', r's',
            r'6', r'9', r'n'], ((UInt8(207) is (String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, 
                UInt8, Int32))), UInt8(121), Int32(-121))), ((Int16(UInt8(59)) is Interface33), UInt8(142), Int32(UInt8(UInt8(58)))),
    ((Int8(94) & 127)..(Int8(-61) & 127) : (((-102) | 1))), ((Int64(UInt32(UInt16(84))) & 127)..=(Int64(UInt32(Int8(124))) &
        127) : ((Int64(Int8(43)) | 1))), Float32(-15.0))
var var411: Rune = r'G'
var var415: Rune = r'p'
public let var428: Option<Option<Array<Rune>>> = Option<Option<Array<Rune>>>.None
public var var446: Array<Rune> = Array<Rune>(10) {i => r'B'}
var var466: Int32 = Int32(-5)
var var505: ?(Bool, UInt8, Int32) = Option<(Bool, UInt8, Int32)>.None
var var603: Enum198 = Enum198.defaultValue
public var var639: UInt32 = UInt32(Int32(Int16(Int16(46))))
public var var684: Int16 = Int16(-89)
var var795: Array<Rune> = Array<Rune>(10) {i => r'x'}
public var var863: UInt64 = UInt64(10)
public var var910: (Class30, UInt8, Int64) = (Class30(), UInt8(UInt8(UInt8(80))), Int64(Int32(14)))
public let var962: (Bool, UInt8, Int32) = ((Option<Array<Rune>>.None is Range<UInt64>), UInt8(Int8(Int8(Int8(-55)))),
    Int32(14))
public var var1026: (Int32, UInt16, Option<Option<(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, 
    UInt8, Int32))>>, Float32) = (Int32(Int16(UInt16(134))), UInt16(15), Option<Option<(String, Range<UInt16>, Int16, 
            Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32))>>.None, Float32(-26.0))
public var var1117: Range<Int8> = ((Int8(42) & 127)..=(Int8(-84) & 127) : (((-114) | 1)))
public let var1162: Bool = ((((UInt16(173) & 127)..=(UInt16(40) & 127) : ((-117) | 1)), """
6(Ncy
)0*<&
""", (true is Int16),
    ("3g'.s_SY9Y", ((UInt16(136) & 127)..=(UInt16(69) & 127) : ((3 | 1))), Int16(24), (), 84, Int8(-92), [r'R', r'i',
            r'U', r'u', r'6', r'y', r'b', r'c', r'g', r'8'], (true, UInt8(45), Int32(77))), r'2') is (Option<Array<Rune>>) -> Int64)
var var1202: UInt8 = UInt8(229)
let var1527: (Range<Int32>, Int32, Range<Int8>, Bool, Unit, String, (Bool, UInt8, Int32)) = (((Int32(UInt32(65)) & 127)..=(Int32(-77) &
        127) : (((-14) | 1))), Int32(119), ((Int8(Int8(-37)) & 127)..=(Int8(Int8(-71)) & 127) : ((Int64(Int32(-73)) | 1))),
    ((([r'E', r'T', r'P', r'W', r'n', r'h', r'S', r'r', r'T', r'I'] is Option<Class30>), UInt8(92), Int32(UInt8(104))) is Range<UInt64>),
    (), "Mk\"muDMbk9", (true, UInt8(Int8(-12)), Int32(Int16(Int16(-78)))))
public let var1644: UInt64 = UInt64(Int16(-45))
var var1681: Interface33 = Class30()
public var var1716: Array<Int8> = [Int8(92), Int8(92), Int8(119), Int8(-108), Int8(56), Int8(64), Int8(126), Int8(-8),
    Int8(7), Int8(-15)]
public let var1835: String = ">3y*o`@|1 "
public var var1866: Option<Bool> = Option<Bool>.None
let var1873: Range<UInt8> = ((UInt8(81) & 127)..(UInt8(184) & 127) : ((-16) | 1))
public let var1908: Unit = ()
var var1926: Int8 = Int8(102)
public var var1982: Int8 = Int8(UInt8(Int8(103)))
let var2023: Int32 = Int32(105)
var var2175: (String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32)) = (###"v.R:S6${var1835}sEDu"###,
    ((UInt16(245) & 127)..=(UInt16(89) & 127) : (25 | 1)), Int16(Int8(Int8(Int8(79)))), (), Int64(UInt64(UInt8(68))),
    Int8(Int8(Int8(Int8(72)))), [r'6', r'l', r'U', r'g', r'g', r'x', r'T', r'P', r'A', r'E'], ((Option<UInt16>.None is Option<Option<Int8>>),
        UInt8(124), Int32(-44)))
public var var2223: Range<Int64> = (((-68) & 127)..(Int64(17) & 127) : ((Int64(UInt8(226)) | 1)))
public var var2328: UInt8 = UInt8(47)
var var2339: Float64 = 39.0
public let var2347: Float32 = Float32(-102.0)
let var2360: ?Range<Int32> = ((((UInt16(Int16(-87)) & 127)..=(UInt16(UInt16(46)) & 127) : ((33 | 1))),
    "`y^${var1835}|y-z`+h", (UInt32(Int8(15)) is Int16), ("t${var1835}W${var1835}7dA!ZGC#", ((UInt16(17) & 127)..(UInt16(28) &
            127) : ((43 | 1))), Int16(Int16(-46)), (), Int64(Int16(59)), Int8(-109), [r'c', r'n', r'Q', r't', r'Y', r'R',
            r'V', r'C', r't', r'I'], (false, UInt8(63), Int32(-96))), r'w') as Range<Int32>)
public var var2606: Int16 = Int16(35)
public var var2647: UInt16 = UInt16(UInt8(UInt8(209)))
public let var2662: ?(Option<Option<(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32))>>, 
    Int16) = Option<(Option<Option<(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32))>>, 
        Int16)>.None
let var2755: Option<Enum198> = Option<Enum198>.None
public let var2867: Bool = (Option<(Option<Option<(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, 
        UInt8, Int32))>>, Int16)>.None is (Class30, UInt8, Int64))
public let var2952: Range<UInt32> = ((UInt32(110) & 127)..=(UInt32(13) & 127) : (91 | 1))
var var2991: (String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32)) = ("""
@I${var1835}@s<
8JFl_
""",
    ((UInt16(Int8(41)) & 127)..=(UInt16(Int8(UInt8(195))) & 127) : ((Int64(UInt64(122)) | 1))), Int16(-31), (), (-28),
    Int8(-74), [r'5', r'b', r'G', r'K', r'P', r'N', r'd', r'B', r'S', r'Z'], ((Option<Array<Rune>>.None is Range<UInt64>),
        UInt8(99), Int32(UInt8(Int8(-22)))))
let var3086: ?(Range<Int32>, Int32, Range<Int8>, Bool, Unit, String, (Bool, UInt8, Int32)) = Option<(Range<Int32>, Int32, 
        Range<Int8>, Bool, Unit, String, (Bool, UInt8, Int32))>.None
var var3095: Array<Class30> = [Class30(), Class30(), Class30(), Class30(), Class30(), Class30(), Class30(), Class30(),
    Class30(), Class30()]
var var3116: ?UInt16 = (Option<Unit>.None as UInt16)
var var3158: Option<Option<Int8>> = Option<Option<Int8>>.None
var var3272: Range<UInt16> = ((UInt16(183) & 127)..(UInt16(169) & 127) : ((-66) | 1))
public let var3278: Int8 = Int8(UInt8(UInt8(Int8(Int8(-9)))))
public let var3309: String = """
Y${var1835}4A${var1835}G[
w5pC${var1835}#
"""
public var var3508: Array<Range<UInt32>> = [((UInt32(57) & 127)..=(UInt32(65) & 127) : (43 | 1)),
    ((UInt32(183) & 127)..=(UInt32(217) & 127) : ((-51) | 1)), ((UInt32(105) & 127)..=(UInt32(170) & 127) : (25 | 1)),
    ((UInt32(58) & 127)..(UInt32(153) & 127) : ((-116) | 1)), ((UInt32(26) & 127)..=(UInt32(56) & 127) : (39 | 1)),
    ((UInt32(68) & 127)..=(UInt32(178) & 127) : ((-2) | 1)), ((UInt32(134) & 127)..=(UInt32(189) & 127) : ((-106) | 1)),
    ((UInt32(175) & 127)..(UInt32(92) & 127) : ((-84) | 1)), ((UInt32(181) & 127)..=(UInt32(226) & 127) : (91 | 1)),
    ((UInt32(61) & 127)..(UInt32(56) & 127) : ((-79) | 1))]
let var3577: Int32 = Int32(-117)
public var var3594: ?(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32)) = ((Enum198
    .defaultValue as (Bool, UInt8, Int32)) as (String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, 
    UInt8, Int32)))
var var3776: Range<UInt64> = ((UInt64(113) & 127)..(UInt64(231) & 127) : (59 | 1))
let var3898: Bool = true
public let var3907: UInt32 = UInt32(219)
var var3937: Option<Bool> = Option<Bool>.None
public var var3955: Option<Option<Array<Rune>>> = (Option<Option<(Range<Int32>, Int32, Range<Int8>, Bool, Unit, String, 
        (Bool, UInt8, Int32))>>.None as Option<Array<Rune>>)

public interface Interface33 {
    static func func127(namedParam128!: Rune, namedParam129!: Int64, namedParam130!: UInt8, namedParam131!: String): Unit { // block id: 132

    }
}

public open class Class30 <: Interface33 {
    public init() { // block id: 32

    }

    public var var38: Bool = true;
    public static let var3789: Range<Int8> = ((Int8(-120) & 127)..(Int8(24) & 127) : ((-76) | 1));
    private static var var3816: ?(Range<UInt16>, String, Bool, (String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, 
        (Bool, UInt8, Int32)), Rune) = Option<(Range<UInt16>, String, Bool, (String, Range<UInt16>, Int16, Unit, Int64, 
            Int8, Array<Rune>, (Bool, UInt8, Int32)), Rune)>.None;
    public init(optionalParam116!: Float64 = Float64(Float64(19.0)), optionalParam120!: Unit = (),
        optionalParam122!: UInt64 = UInt64(107), namedParam124!: Int64) { // block id: 125
        func127(
            namedParam128: func144(Float32(-5.0), ((UInt16(76) & 127)..=(UInt16(219) & 127) : ((namedParam124 | 1))))[4],
            namedParam129: namedParam124, namedParam130: UInt8(125),
            namedParam131: if ((Option<Bool>.Some(false) ?? true)) { // block id: 3719
                UInt16(91);
                "@fG>x_fb;("
            } else if (true) { // block id: 3723
                let var3728: ?Int8 = Option<Int8>.Some(Int8(Int8(-74)));
                if (var2867) {
                    [var3728, Option<Int8>.Some(Int8(60)), var3728, Option<Int8>.Some(var1982), Option<Int8>.None,
                        Option<Int8>.Some(var1982), var3728, var3728, var3728, var3728]
                } else {
                    [var3728, var3728, Option<Int8>.None, Option<Int8>.Some(Int8(24)), Option<Int8>.Some(var1982),
                        var3728, Option<Int8>.None, Option<Int8>.None, var3728, var3728]
                };
                """
ic,Sl
!-+ob
"""
            } else { // block id: 3758
                let var3760: Unit = ();
                var3760;
                if (true) {
                    var3309
                } else {
                    "*5tvHMF<M~"
                }
            });
        var var3782: Bool = true;
        var loopTimeVar3809: Int64 = 0;
        do {
            loopTimeVar3809++;
            match ([((UInt32(42) & 127)..(UInt32(113) & 127) : ((-119) | 1)),
                ((UInt32(247) & 127)..(UInt32(0) & 127) : ((-86) | 1)),
                ((UInt32(225) & 127)..=(UInt32(29) & 127) : ((-96) | 1)),
                ((UInt32(151) & 127)..=(UInt32(2) & 127) : ((-26) | 1)),
                ((UInt32(133) & 127)..=(UInt32(45) & 127) : (54 | 1)), ((UInt32(135) & 127)..(UInt32(3) & 127) : (33 | 1)),
                ((UInt32(165) & 127)..(UInt32(121) & 127) : ((-103) | 1)),
                ((UInt32(250) & 127)..(UInt32(72) & 127) : (78 | 1)),
                ((UInt32(214) & 127)..(UInt32(118) & 127) : (108 | 1)),
                ((UInt32(81) & 127)..(UInt32(171) & 127) : ((-107) | 1))]) {
                case _ =>
                    var1835;
                    var3776

                case _ =>
                    if (var3782) {
                        var1527
                    } else {
                        (((Int32(47) & 127)..=(Int32(120) & 127) : ((-40) | 1)), Int32(106), var3789, var2867, (),
                            var3309, (var2867, UInt8(103), var3577))
                    };
                    if (false) {
                        var3776
                    } else {
                        ((UInt64(96) & 127)..(UInt64(109) & 127) : (28 | 1))
                    }
            };
            var loopTimeVar3807: Int64 = 0;
            while ((true) && loopTimeVar3807 < 100) {
                loopTimeVar3807++;
                var173
            }
        } while ((var2867) && loopTimeVar3809 < 100);
        var var3856: UInt16 = UInt16(Int16(Int16(Int8(88))));
        (var3816 ?? (if (false) {
            Option<(Range<UInt16>, String, Bool, (String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, 
                    UInt8, Int32)), Rune)>.Some((var3272, var1835, false, var2175, r'G'))
        } else {
            Option<(Range<UInt16>, String, Bool, (String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, 
                    UInt8, Int32)), Rune)>.Some(
                (((UInt16(177) & 127)..=(UInt16(130) & 127) : ((50 | 1))), var1835, false, ("iLndcojwNp", ((UInt16(162) &
                            127)..(var2647 & 127) : ((namedParam124 | 1))), Int16(94), var173, (-13), Int8(62), [r'7',
                            r'I', r'0', r'Z', r'8', r'h', r'x', r'4', r'z', r'D'], var962), var415))
        } ?? if (var3782) { // block id: 3851
            optionalParam120;
            (((var3856 & 127)..=(UInt16(74) & 127) : ((107 | 1))), ###"sG-R\\4v3UZ"###, var53, var2991, r'J')
        } else { // block id: 3867
            let var3870: Range<UInt16> = ((UInt16(41) & 127)..=(UInt16(169) & 127) : (76 | 1));
            (var3870, "a{`_(zU$K/[", var3782, ("0X\\|]v1yHd", ((UInt16(246) & 127)..=(UInt16(48) & 127) : (103 | 1)),
                    Int16(126), optionalParam120, var309, var1982, var446, var962), r't')
        }))
    }
}

func func79(param80: Class30): Bool { // block id: 81
    true
}

public enum Enum198 {
    defaultValue
    | enumValue2438((Range<UInt16>) -> Option<Array<Rune>>,
        Option<(Range<Int32>, Int32, Range<Int8>, Bool, Unit, String, (Bool, UInt8, Int32))>,
        (String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32)))
}

func func316(param317: Option<Array<Rune>>): Int64 { // block id: 318
    var var329: ?(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32)) = (true as (String, 
        Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32)));
    (if (var53) {
        var329
    } else {
        var329
    } ?? var336[2])[4]
}

func func395(param396: Range<UInt16>): Option<Array<Rune>> { // block id: 397
    let var431: Option<Array<Rune>> = Option<Array<Rune>>.Some([r'K', r'K', r'u', r'Y', r'R', r'G', r'2', r'F', r'O',
        r'Z']);
    if (var53) {
        (Option<Option<Array<Rune>>>.Some(
            Option<Array<Rune>>.Some([r'u', r'A', var411, r'V', var415, var415, var411, var415, var415, var415])) ?? (var428 ??
            var431))
    } else {
        Option<Array<Rune>>.Some(var446)
    }
}

public func func1068(): Int8 { // block id: 496
    var var508: (Bool, UInt8, Int32) = (((UInt64(107), Float32(Float32(30.0)), Option<Int8>.Some(Int8(-3))) is Int16),
        UInt8(36), Int32(UInt8(Int8(107))));
    var var530: (Float32, Range<Int64>, (UInt16, Range<UInt64>, (String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, 
        (Bool, UInt8, Int32)), (Bool, UInt8, Int32), Range<Int8>, Range<Int64>, Float32), Range<Int32>) = (Float32(Float32(Float32(100.0))),
        ((Int64(Int16(UInt16(111))) & 127)..=(Int64(Int8(UInt8(13))) & 127) : ((1 | 1))), (UInt16(UInt16(83)), ((UInt64(33) &
                127)..(UInt64(144) & 127) : ((-67) | 1)), ("1PBh9`ljY^", ((UInt16(226) & 127)..=(UInt16(61) & 127) : ((15 |
                    1))), Int16(Int8(-23)), (), (-30), Int8(28), [r'v', r's', r'H', r'q', r'7', r'u', r'J', r'f', r'y',
                    r'P'], (true, UInt8(185), Int32(59))), ((Int16(-2) is Int32), UInt8(UInt8(41)), Int32(15)), ((Int8(-76) &
                127)..=(Int8(-50) & 127) : ((-93) | 1)), ((94 & 127)..=((-7) & 127) : ((66 | 1))), Float32(Float32(Float32(117.0)))),
        ((Int32(UInt8(247)) & 127)..(Int32(81) & 127) : ((Int64(UInt16(177)) | 1))));
    var var616: Unit = ();
    var var622: Range<Int64> = (((-86) & 127)..=(63 & 127) : ((-9) | 1));
    if (((var505 ?? var508) is Unit)) {
        (Option<(Float32, Range<Int64>, (UInt16, Range<UInt64>, (String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, 
                (Bool, UInt8, Int32)), (Bool, UInt8, Int32), Range<Int8>, Range<Int64>, Float32), Range<Int32>)>.Some(
            var530) ?? var530)[1]
    } else {
        (if (match {
            case var53 =>
                [Enum198.defaultValue, Enum198.defaultValue, var603, Enum198.defaultValue, var603, var603, var603,
                    var603, var603, Enum198.defaultValue];
                var104;
                true
            case _ =>
                var616;
                var53 || false
        }) {
            var622
        } else {
            (if (var53) {
                ((71 & 127)..((-75) & 127) : ((-112) | 1))
            } else {
                ((var309 & 127)..((-49) & 127) : ((var309 | 1)))
            })
        })
    };
    var var658: ?Int8 = (UInt16(176) as Int8);
    (if ((var639 is Option<Int8>)) {
        (Option<Option<Int8>>.None ?? Option<Int8>.Some(var104))
    } else {
        [Option<Int8>.Some(var104), var658, var658, var658, Option<Int8>.Some(var104), var658, Option<Int8>.Some(var104),
            Option<Int8>.Some(Int8(-2)), var658, var658][9]
    } ?? try { // block id: 674
        var53 && var53;
        Int8(108) & var104
    } finally { // block id: 681
        var684 |= var684
        ();
        var104
    })
}

public struct Aggregate827 {
    public init() { // block id: 829

    }

    public let var834: (Option<Option<(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, 
        Int32))>>, Int16) = (Option<Option<(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, 
                Int32))>>.None, Int16(-49))
}

public func func847(): Option<(Float32, Range<Int64>, (UInt16, Range<UInt64>, (String, Range<UInt16>, Int16, Unit, 
    Int64, Int8, Array<Rune>, (Bool, UInt8, Int32)), (Bool, UInt8, Int32), Range<Int8>, Range<Int64>, Float32), Range<Int32>)> { // block id: 848
    Option<(Float32, Range<Int64>, (UInt16, Range<UInt64>, (String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, 
            (Bool, UInt8, Int32)), (Bool, UInt8, Int32), Range<Int8>, Range<Int64>, Float32), Range<Int32>)>.None
}

public func func902(param903: Option<UInt16>): UInt16 { // block id: 904
    var var945: UInt16 = UInt16(229);
    if (func79(var910[0])) { // block id: 919
        var173;
        var loopTimeVar928: Int64 = 0;
        while ((false) && loopTimeVar928 < 100) {
            loopTimeVar928++;
            Int32(22);
            Option<Array<Rune>>.Some([r'6', r'C', r'm', r'O', r'q', r'n', r'S', r'c', r'M', r'V'])
        };
        var var935: ?(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32)) = (UInt64(UInt16(167)) as (String, 
            Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32)));
        match ((var466, UInt16(23),
            Option<Option<(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32))>>.Some(
                var935), Float32(-63.0))) {
            case _ =>
                ();
                -var945
        }
    } else { // block id: 947
        try { // block id: 949
            var945
        } catch (_) { // block id: 951
            UInt16(158)
        }
    }
}

func func1388(param1389: UInt64): Int8 { // block id: 1390
    Option<(Range<Int32>, Int32, Range<Int8>, Bool, Unit, String, (Bool, UInt8, Int32))>.None;
    let var1431: Array<Int8> = Array<Int8>(10) {i => Int8(11)}
    match ((((var684 & 127)..=(var684 & 127) : ((var309 | 1))), var684, var173, (((Int32(-16) & 127)..(var466 & 127) : ((var309 |
                1))), Int32(82), ((Int8(50) & 127)..(Int8(-93) & 127) : ((-19) | 1)), false, (), "]C(%)4V-6(", var962), [var411,
            r'q', var411, r'8', var415, r'A', r'g', r'A', var415, var415])[3]) {
        case _ =>
            var910;
            var1431
    }[6]
}

public func func1478(param1479: Bool): (Option<Option<(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, 
    UInt8, Int32))>>, Int16) { // block id: 1480
    var var1482: Range<UInt64> = ((UInt64(26) & 127)..=(UInt64(153) & 127) : ((Int64(UInt32(153)) | 1)));
    var1482;
    var var1489: (Option<Option<(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32))>>, 
        Int16) = (Option<Option<(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32))>>
            .None, Int16(-91));
    var1489
}

func func1670<T0>(
    param1671: Option<(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32))>,
    namedParam1672!: (UInt16, Range<UInt64>, (String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, 
        UInt8, Int32)), (Bool, UInt8, Int32), Range<Int8>, Range<Int64>, Float32),
    namedParam1673!: Option<Option<Array<Rune>>>): (String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, 
    UInt8, Int32)) { // block id: 1674
    match ([var1681, var1681, var1681, Class30(), Class30(), Class30(), var1681, Class30(), Class30(), var1681][2]) {
        case caseVar1713 => var1716

        case caseVar1720 =>
            30.0;
            [Int8(-96), Int8(-92), Int8(13), Int8(35), Int8(121), Int8(-25), Int8(-48), Int8(13), Int8(-104), Int8(89)]

        case _ => [Int8(24), Int8(1), Int8(-63), Int8(63), Int8(-120), Int8(28), Int8(85), Int8(-76), Int8(-84),
            Int8(-50)]
    }[1];
    let var1742: ?Array<Range<UInt32>> = ([((Int32(11) & 127)..=(Int32(26) & 127) : ((-123) | 1)),
        ((Int32(1) & 127)..(Int32(-109) & 127) : (54 | 1)), ((Int32(-80) & 127)..(Int32(122) & 127) : ((-79) | 1)),
        ((Int32(116) & 127)..=(Int32(-126) & 127) : ((-84) | 1)), ((Int32(-102) & 127)..(Int32(-14) & 127) : (77 | 1)),
        ((Int32(59) & 127)..(Int32(-46) & 127) : (20 | 1)), ((Int32(-41) & 127)..=(Int32(-104) & 127) : ((-100) | 1)),
        ((Int32(-76) & 127)..=(Int32(-61) & 127) : (78 | 1)), ((Int32(-46) & 127)..=(Int32(45) & 127) : ((-113) | 1)),
        ((Int32(-45) & 127)..(Int32(79) & 127) : (117 | 1))] as Array<Range<UInt32>>);
    var var1749: Array<Range<UInt32>> = [((UInt32(218) & 127)..=(UInt32(123) & 127) : (12 | 1)),
        ((UInt32(98) & 127)..(UInt32(161) & 127) : ((-24) | 1)), ((UInt32(56) & 127)..=(UInt32(46) & 127) : ((-104) | 1)),
        ((UInt32(103) & 127)..=(UInt32(53) & 127) : (2 | 1)), ((UInt32(34) & 127)..=(UInt32(195) & 127) : (3 | 1)),
        ((UInt32(205) & 127)..=(UInt32(60) & 127) : ((-125) | 1)), ((UInt32(13) & 127)..(UInt32(214) & 127) : ((-125) | 1)),
        ((UInt32(199) & 127)..(UInt32(214) & 127) : (50 | 1)), ((UInt32(41) & 127)..=(UInt32(240) & 127) : (60 | 1)),
        ((UInt32(121) & 127)..=(UInt32(47) & 127) : (13 | 1))];
    ((Option<Option<Array<Range<UInt32>>>>.None ?? var1742) ?? (Option<Array<Range<UInt32>>>.Some(
        [((UInt32(96) & 127)..=(UInt32(120) & 127) : (27 | 1)), ((UInt32(193) & 127)..(UInt32(120) & 127) : (114 | 1)),
            ((UInt32(73) & 127)..=(UInt32(41) & 127) : ((-8) | 1)), ((UInt32(194) & 127)..(UInt32(93) & 127) : ((-26) | 1)),
            ((UInt32(254) & 127)..(UInt32(113) & 127) : ((-13) | 1)),
            ((UInt32(54) & 127)..=(UInt32(249) & 127) : ((-39) | 1)), ((UInt32(159) & 127)..(UInt32(254) & 127) : (9 | 1)),
            ((UInt32(86) & 127)..=(UInt32(48) & 127) : (100 | 1)), ((UInt32(135) & 127)..=(UInt32(97) & 127) : ((-32) | 1)),
            ((UInt32(56) & 127)..(UInt32(249) & 127) : (37 | 1))]) ?? var1749))[8];
    var var1759: (Float32, Range<Int64>, (UInt16, Range<UInt64>, (String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, 
        (Bool, UInt8, Int32)), (Bool, UInt8, Int32), Range<Int8>, Range<Int64>, Float32), Range<Int32>) = (Float32(Float32(-84.0)),
        ((54 & 127)..=(66 & 127) : (8 | 1)), (UInt16(UInt8(136)), ((UInt64(UInt64(231)) & 127)..(UInt64(0) & 127) : (((-30) |
                1))), (###"[SR}m*]B.2"###, ((UInt16(39) & 127)..=(UInt16(175) & 127) : ((-108) | 1)), Int16(73), (), (-15),
                Int8(-104), [r'b', r'7', r'v', r'A', r'3', r'R', r'Y', r'S', r'Y', r'b'], (true, UInt8(202), Int32(32))),
            ((Option<Option<Array<Rune>>>.None is (UInt16, Range<UInt64>, (String, Range<UInt16>, Int16, Unit, Int64, 
                    Int8, Array<Rune>, (Bool, UInt8, Int32)), (Bool, UInt8, Int32), Range<Int8>, Range<Int64>, Float32)),
                UInt8(109), Int32(UInt16(57))), ((Int8(-37) & 127)..=(Int8(-75) & 127) : (83 | 1)), ((Int64(Int32(42)) &
                127)..(9 & 127) : (((-115) | 1))), Float32(Float32(Float32(49.0)))), ((Int32(UInt32(210)) & 127)..(Int32(Int32(UInt8(209))) &
            127) : ((Int64((-103)) | 1))));
    var var1816: UInt16 = UInt16(151);
    var var1825: (Class30, UInt8, Int64) = (Class30(), UInt8(UInt8(UInt8(Int8(-22)))), 31);
    var var1882: Option<Array<Rune>> = Option<Array<Rune>>.Some([r'C', r'x', r'R', r'W', r'2', r'4', r'W', r't', r'i',
        r'X']);
    let var2074: Int64 = Int64(UInt16(UInt8(54)));
    if (false) {
        (if (var53) { // block id: 1757
                var1759;
                "k cyfiUC9G"
            } else if (var53) { // block id: 1810
                var1202 >> ((UInt8(157)) & 7);
                var1816 >>= ((UInt16(40)) & 7)
                if (false) {
                    """
5+t'm
OV!!_
"""
                } else {
                    "Yb\"[~4Q^S*"
                }
            } else { // block id: 1823
                var1825;
                ();
                var1835
            }, if (var53) {
                ((var1816 & 127)..=(UInt16(144) & 127) : (((-26) | 1)))
            } else {
                ((UInt16(247) & 127)..(UInt16(220) & 127) : ((var309 | 1)))
            }, match {
                case var1162 =>
                    var53 &&= true
                    ();
                    var684 & Int16(-69)
                case _ => Int16(57)
            }, try { // block id: 1860
                ();
                if (false) {
                    Option<Bool>.None
                } else {
                    var1866
                };
                var173
            } finally { // block id: 1869
                if (var1162) {
                    var1873
                } else {
                    ((UInt8(2) & 127)..=(var1202 & 127) : ((var309 | 1)))
                };
                if (false) {
                    var1882
                } else {
                    Option<Array<Rune>>.Some([r'w', var415, r'V', r'V', r'w', var411, var415, r'l', var415, r'L'])
                };
                var1908
            }, var309, match ((var466, var1816, Option<Option<(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, 
                        (Bool, UInt8, Int32))>>.None, Float32(-12.0))) {
                case caseVar1919: (String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32)) =>
                    if (var53) {
                        param1671
                    } else {
                        Option<(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32))>
                            .None
                    };
                    var1926

                case (caseVar1930: Option<Option<(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, 
                            UInt8, Int32))>>, caseVar1931, _, _) => var104

                case (caseVar1936, caseVar1937, caseVar1938: Option<Class30>, _) => var104 ^ Int8(-114)

                case (caseVar1945, caseVar1946: Class30, _, _) => -Int8(38)

                case _ =>
                    if (true) {
                        Enum198.defaultValue
                    } else {
                        var603
                    };
                    """
Z%<3n
I9:zx
""";
                    var1926 + Int8(44)
            }, match (var1202) {
                case caseVar1964 => [r'c', r'6', var411, var415, var411, var415, r'x', var415, r'O', var411]

                case _ =>
                    var1982 - Int8(38);
                    var795

                case _ =>
                    ();
                    if (true) {
                        (((Int16(18) & 127)..=(var684 & 127) : ((100 | 1))), Int16(97), (), var1527, var446)
                    } else {
                        (((Int16(-27) & 127)..=(Int16(-23) & 127) : (79 | 1)), var684, var173, var1527, [r'w', r'U',
                                r'7', r'm', r'j', r'n', r'3', r'j', r'2', r't'])
                    };
                    if (true) {
                        var446
                    } else {
                        var446
                    }
            }, try { // block id: 2013
                (var53, var1202, Int32(122))
            } catch (_) { // block id: 2018
                (var1162, var1202, var2023)
            })
    } else {
        match {
            case true && true =>
                var var2033: (String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32)) = ("vQ/<P>;n%J",
                    ((UInt16(UInt8(Int8(28))) & 127)..=(UInt16(187) & 127) : (((-52) | 1))), Int16(-10), (), Int64(Int8(Int8(104))),
                    Int8(Int8(UInt8(UInt8(232)))), [r'F', r'j', r'U', r'O', r't', r'3', r'L', r'0', r'D', r'0'], (false,
                        UInt8(13), Int32(UInt16(UInt16(214)))));
                if (var1162) {
                    var2033
                } else {
                    ("jPTcyVQ!W,", ((UInt16(82) & 127)..=(UInt16(151) & 127) : ((-27) | 1)), Int16(32), var173, var2074,
                        var1926, [r's', r'v', r'l', r'T', r'v', r'd', r'P', r'D', r'f', r'7'], (var53, UInt8(159), Int32(123)))
                }
            case _ =>
                let var2088: (String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32)) = ("""
Iy\"Vs
Oww]F
""",
                    ((UInt16(Int16(-77)) & 127)..(UInt16(125) & 127) : ((Int64(Int16(Int8(76))) | 1))), Int16(UInt16(2)),
                    (), Int64(UInt16(53)), Int8(-29), [r'Y', r'U', r'0', r'I', r'u', r'A', r'z', r'5', r'v', r'd'], (((Float32(12.0),
                            (((-77) & 127)..=((-16) & 127) : ((75 | 1))), (UInt16(189), ((UInt64(68) & 127)..(UInt64(63) &
                                    127) : (63 | 1)), ("X3w[c~H5A.", ((UInt16(6) & 127)..=(UInt16(75) & 127) : ((30 | 1))),
                                    Int16(25), (), (-8), Int8(41), [r'l', r'U', r'B', r'o', r'4', r'5', r'x', r'y', r'i',
                                        r'B'], (false, UInt8(106), Int32(-19))), (false, UInt8(31), Int32(-14)), ((Int8(93) &
                                    127)..=(Int8(22) & 127) : ((106 | 1))), (((-99) & 127)..(74 & 127) : ((106 | 1))),
                                Float32(39.0)), ((Int32(-103) & 127)..(Int32(76) & 127) : ((-9) | 1))) is Aggregate827),
                        UInt8(93), Int32(Int8(72))));
                if (false) {
                    var2088
                } else {
                    (var1835, ((var1816 & 127)..(UInt16(179) & 127) : (((-90) | 1))), Int16(-2), (), (-24), Int8(65),
                        var446, var962)
                }
        }
    }
}

public func func1068(
    param1069: (Option<Option<(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32))>>, 
        Int16)): Range<UInt64> { // block id: 1070
    let var1080: Aggregate827 = Aggregate827();
    let var1130: String = """
Jy_N2
/rHsE
""";
    let var1153: UInt8 = UInt8(Int8(Int8(UInt8(UInt8(217)))));
    let var1220: Option<Class30> = Option<Class30>.Some(Class30());
    let var1259: UInt16 = UInt16(105);
    let var1450: (UInt64) -> Int8 = {lambdaParameter1453: UInt64 => Int8(Int8(-92))};
    func func1085(namedParam1086!: (UInt64, Float32, Option<Int8>),
        optionalParam1087!: (Option<Option<(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, 
            Int32))>>, Int16) = ((Int16(UInt16(100)) as Option<(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, 
                (Bool, UInt8, Int32))>), Int16(-3)), optionalParam1093!: Int64 = (-103)): Option<Int8> { // block id: 1095
        var var1104: ?(Range<Int32>, Int32, Range<Int8>, Bool, Unit, String, (Bool, UInt8, Int32)) = ((Class30(), UInt8(34),
            56) as (Range<Int32>, Int32, Range<Int8>, Bool, Unit, String, (Bool, UInt8, Int32)));
        var var1186: Range<UInt32> = ((UInt32(57) & 127)..(UInt32(52) & 127) : ((Int64(UInt64(Int32(Int32(7)))) | 1)));
        try { // block id: 1097
            (var1104 ?? (((var466 & 127)..(Int32(78) & 127) : (((-86) | 1))), var466, var1117, true, (), "3J8rfo7YO%",
                var962));
            match {
                case true => var1130
                case true =>
                    ((UInt32(22) & 127)..=(UInt32(80) & 127) : ((-4) | 1));
                    """
'h:no
[K0h`
"""

                case _ =>
                    var173;
                    var104;
                    var1130
            };
            match (var910) {
                case (caseVar1144: Range<Int32>, _: Array<Rune>, _) =>
                    Option<(Bool, UInt8, Int32)>.Some((true, var1153, Int32(69)));
                    if (var1162) {
                        var1186
                    } else {
                        var1186
                    }

                case (caseVar1197: (Range<Int32>, Int32, Range<Int8>, Bool, Unit, String, (Bool, UInt8, Int32)), _, caseVar1198: Bool) =>
                    var1202 %= ((var1202) | 1)
                    ();
                    if (false) {
                        var1186
                    } else {
                        ((var639 & 127)..(var639 & 127) : (((-100) | 1)))
                    }

                case _: Range<UInt64> =>
                    var173;
                    if (var53) {
                        var1220
                    } else {
                        var1220
                    };
                    ((UInt32(158) & 127)..(UInt32(142) & 127) : ((optionalParam1093 | 1)))

                case _ =>
                    var53 &&= false
                    ();
                    ((UInt32(108) & 127)..(UInt32(200) & 127) : ((-124) | 1))
            }
        } catch (e: Exception) { // block id: 1236
            ((UInt32(69) & 127)..=(UInt32(105) & 127) : (105 | 1))
        };
        let var1357: Option<Unit> = Option<Unit>.None;
        (match ([((Int32(118) & 127)..=(Int32(-120) & 127) : ((-49) | 1)),
            ((Int32(36) & 127)..(Int32(59) & 127) : (38 | 1)), ((Int32(-92) & 127)..(Int32(98) & 127) : (32 | 1)),
            ((Int32(7) & 127)..=(Int32(100) & 127) : ((-106) | 1)), ((Int32(108) & 127)..(Int32(75) & 127) : ((-40) | 1)),
            ((Int32(78) & 127)..=(Int32(-103) & 127) : (19 | 1)), ((Int32(-39) & 127)..(Int32(-90) & 127) : (8 | 1)),
            ((Int32(-83) & 127)..(Int32(27) & 127) : ((-73) | 1)), ((Int32(-47) & 127)..(Int32(-13) & 127) : ((-34) | 1)),
            ((Int32(-72) & 127)..=(Int32(-54) & 127) : ((-35) | 1))][1]) {
            case _ =>
                let var1263: (String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32)) = ("X&ZD|#,8h]",
                    ((UInt16(Int16(Int16(-70))) & 127)..(UInt16(144) & 127) : ((Int64(Int16(UInt8(72))) | 1))), Int16(-36),
                    (), Int64(UInt32(Int32(-92))), Int8(Int8(Int8(Int8(-124)))), [r'c', r'3', r'8', r'Y', r'k', r'J',
                        r'B', r'3', r'g', r'k'], (([((Int32(94) & 127)..=(Int32(-128) & 127) : (((-108) | 1))),
                            ((Int32(59) & 127)..=(Int32(-111) & 127) : (1 | 1)),
                            ((Int32(-35) & 127)..(Int32(122) & 127) : (((-9) | 1))),
                            ((Int32(116) & 127)..=(Int32(-33) & 127) : (((-10) | 1))),
                            ((Int32(24) & 127)..=(Int32(-54) & 127) : ((119 | 1))),
                            ((Int32(-117) & 127)..=(Int32(-47) & 127) : ((7 | 1))),
                            ((Int32(91) & 127)..=(Int32(-38) & 127) : ((-14) | 1)),
                            ((Int32(86) & 127)..=(Int32(110) & 127) : (((-60) | 1))),
                            ((Int32(-3) & 127)..(Int32(-20) & 127) : (((-59) | 1))),
                            ((Int32(86) & 127)..=(Int32(72) & 127) : (((-5) | 1)))] is (Option<UInt16>) -> UInt16),
                        UInt8(Int8(-93)), Int32(-23)));
                (var267, (((-113) & 127)..=((-11) & 127) : ((optionalParam1093 | 1))), (var1259, ((UInt64(31) & 127)..=(UInt64(151) &
                            127) : (81 | 1)), var1263, var962, ((var104 & 127)..=(Int8(-113) & 127) : ((38 | 1))), ((33 &
                            127)..((-104) & 127) : ((var309 | 1))), var267), ((Int32(85) & 127)..=(Int32(88) & 127) : (51 |
                        1)));
                var var1347: UInt16 = UInt16(UInt8(Int8(UInt8(UInt8(52)))));
                var1347 ^= var1347
                if (true) {
                    var1357
                } else {
                    var1357
                }

            case _ =>
                var173;
                var1357
        } ?? ());
        Option<Int8>.Some(match (Float32(26.0)) {
            case -7.0 | -60.0 | 73.0 | -123.0 =>
                var173;
                var35;
                Int8(-82)

            case 89.0 | -2.0 | 45.0 => Int8(-40)

            case _ =>
                var863 = var863
                var104 / ((var104) | 1)
        } ^ (UInt64(3) |> var1450))
    };

    (try { // block id: 1073
            UInt64(88) >> ((UInt64(208)) & 7)
        } catch (_) { // block id: 1077
            var173;
            var1080;
            var863
        }, Float32(-41.0), func1085(namedParam1086: match (Option<Unit>.None) {
            case caseVar1462 =>
                var173;
                (UInt64(238), var267, var228)

            case _ =>
                var104++;
                (UInt64(6), Float32(-100.0), Option<Int8>.None)
        }, optionalParam1087: (true |> func1478)));
    var var1522: Range<Int16> = ((Int16(-26) & 127)..(Int16(-16) & 127) : ((-64) | 1));
    let var1587: (Option<UInt16>) -> UInt16 = {lambdaParameter1590: Option<UInt16> => UInt16(101)};
    var var1596: ?(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32)) = (((Int8(38) &
        127)..=(Int8(-12) & 127) : (64 | 1)) as (String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, 
        UInt8, Int32)));
    let var2248: (Bool, UInt8, Int32) = (((Class30(), UInt8(UInt8(212)), Int64(16)) is Int8), UInt8(146), Int32(98));
    (if ((Option<Bool>.Some(var1162) ?? true)) { // block id: 1505
            var267
        } else if ((Option<Bool>.Some(var1162) ?? true)) { // block id: 1511
            var173;
            Float32(-123.0) * var267
        } else { // block id: 1516
            var309 ^= 114
            (var1522, var684, (), var1527, [r'P', r'F', r'D', r'J', r'j', r'1', r'x', r'O', r'7', r'K']);
            var267
        }, if ((!false)) {
            (if (var1162) {
                ((78 & 127)..((-83) & 127) : ((var309 | 1)))
            } else {
                (((-43) & 127)..=(103 & 127) : (25 | 1))
            })
        } else {
            ((var309 & 127)..(var309 & 127) : ((63 | 1)))
        }, ((Option<UInt16>.None |> var1587), match (var1596) {
                case caseVar1601 =>
                    var684;
                    if (var1162) {
                        ((UInt64(116) & 127)..(UInt64(93) & 127) : ((-89) | 1))
                    } else {
                        ((UInt64(58) & 127)..=(UInt64(88) & 127) : ((var309 | 1)))
                    }

                case caseVar1613 =>
                    var173;
                    ((UInt64(199) & 127)..=(UInt64(180) & 127) : ((var309 | 1)))

                case caseVar1622 =>
                    Enum198.defaultValue;
                    ();
                    if (true) {
                        ((UInt64(39) & 127)..(UInt64(189) & 127) : (((-16) | 1)))
                    } else {
                        ((var863 & 127)..(UInt64(224) & 127) : ((var309 | 1)))
                    }

                case _ =>
                    var173;
                    var1259;
                    ((var863 & 127)..=(var1644 & 127) : ((var309 | 1)))

                case _ =>
                    ((Int16(-25) & 127)..(var684 & 127) : ((24 | 1)));
                    let var1657: Range<UInt64> = ((UInt64(UInt8(Int8(UInt8(6)))) & 127)..=(UInt64(30) & 127) : ((72 | 1)));
                    if (false) {
                        var1657
                    } else {
                        ((var863 & 127)..(var1644 & 127) : ((90 | 1)))
                    }
            }, func1670<Range<UInt32>>(
                Option<(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32))>.None,
                namedParam1672: (var1259, ((UInt64(32) & 127)..(UInt64(16) & 127) : (67 | 1)), var2175, (true, var1153,
                        var2023), var1117, (((-7) & 127)..=(var309 & 127) : ((102 | 1))), var267),
                namedParam1673: var428), match (var684) {
                case _ =>
                    (UInt16(201), ((var863 & 127)..(UInt64(171) & 127) : ((var309 | 1))), var2175, var962, var1117,
                        var2223, Float32(39.0));
                    var1202++;
                    var962

                case caseVar2236: Array<Range<Int32>> => (true, var1202, Int32(-30))

                case caseVar2244 =>
                    ();
                    var2248

                case _ =>
                    ();
                    var411;
                    if (var53) {
                        (var1162, UInt8(188), var2023)
                    } else {
                        var962
                    }
            }, match ((((-106) & 127)..=((-1) & 127) : ((119 | 1)))) {
                case _ =>
                    let var2279: Option<Array<Rune>> = Option<Array<Rune>>.Some(
                        [r'e', r'q', r'G', r'8', r'o', r'w', r'M', r'8', r's', r'4']);
                    Option<Option<Array<Rune>>>.Some(var2279);
                    let var2293: Range<Int8> = ((Int8(115) & 127)..(Int8(34) & 127) : ((-15) | 1));
                    var2293
            }, match (Option<Option<Array<Range<UInt32>>>>.Some(Option<Array<Range<UInt32>>>.None)) {
                case caseVar2300 =>
                    var1153;
                    if (var1162) {
                        ((var309 & 127)..=(var309 & 127) : ((121 | 1)))
                    } else {
                        ((111 & 127)..(var309 & 127) : (((-101) | 1)))
                    }

                case _ =>
                    var173;
                    if (true) {
                        ((97 & 127)..((-110) & 127) : ((-85) | 1))
                    } else {
                        (((-90) & 127)..(101 & 127) : (99 | 1))
                    }
            }, match (Option<Int8>.Some(var104)) {
                case _: Range<UInt64> =>
                    var2328 += var1153
                    var267 * Float32(77.0)

                case caseVar2336: Option<Unit> =>
                    var2339;
                    var267

                case _ =>
                    (UInt64(72), var2347, var228);
                    Float32(-38.0)
            }), (if (false) {
            Option<Range<Int32>>.None
        } else {
            var2360
        } ?? ((Int32(2) & 127)..=(Int32(-28) & 127) : ((-55) | 1))));
    var var2393: Range<UInt64> = ((UInt64(50) & 127)..=(UInt64(51) & 127) : ((Int64(UInt8(Int8(Int8(113)))) | 1)));
    var2393
}

public func func1022(param1023: Option<Class30>): String { // block id: 1024
    var1026;
    try { // block id: 1035
        let var2432: ??(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32)) = ([Enum198
            .defaultValue, Enum198.defaultValue,
            Enum198.enumValue2438(func395,
            ([Option<Int8>.None, Option<Int8>.Some(Int8(-100)), Option<Int8>.Some(Int8(78)), Option<Int8>.None,
                Option<Int8>.None, Option<Int8>.None, Option<Int8>.Some(Int8(87)), Option<Int8>.Some(Int8(125)),
                Option<Int8>.Some(Int8(-18)), Option<Int8>.Some(Int8(-37))] as (Range<Int32>, Int32, Range<Int8>, Bool, 
                Unit, String, (Bool, UInt8, Int32))),
            ("I<FC#ndjb3", ((UInt16(13) & 127)..=(UInt16(155) & 127) : ((62 | 1))), Int16(-37), (), 69, Int8(-70), [r'0',
                    r'L', r's', r'C', r'Z', r'W', r'f', r'H', r'2', r'v'], (true, UInt8(103), Int32(-67)))),
            Enum198.enumValue2438(func395,
            Option<(Range<Int32>, Int32, Range<Int8>, Bool, Unit, String, (Bool, UInt8, Int32))>.None,
            ("*Vzu!^mk%V", ((UInt16(196) & 127)..(UInt16(47) & 127) : (51 | 1)), Int16(-18), (), 26, Int8(-32), [r'K',
                    r'j', r'r', r'w', r'H', r'k', r'4', r'v', r'f', r'I'], (true, UInt8(70), Int32(-37)))),
            Enum198.enumValue2438(func395,
            Option<(Range<Int32>, Int32, Range<Int8>, Bool, Unit, String, (Bool, UInt8, Int32))>.None,
            ("""
vE??1
aN5cz
""", ((UInt16(200) & 127)..(UInt16(88) & 127) : (112 | 1)), Int16(3), (), (-55), Int8(-66),
                [r'f', r'7', r'L', r'J', r'k', r'S', r'M', r'e', r'h', r'7'], (true, UInt8(17), Int32(-120)))),
            Enum198.enumValue2438(func395,
            (((UInt8(117) & 127)..=(UInt8(80) & 127) : ((-61) | 1)) as (Range<Int32>, Int32, Range<Int8>, Bool, Unit, 
                String, (Bool, UInt8, Int32))),
            ("w\\fXyER'tQ", ((UInt16(32) & 127)..(UInt16(79) & 127) : ((-95) | 1)), Int16(-110), (), 74, Int8(4), [r'w',
                    r'a', r'I', r's', r'q', r'M', r'T', r'Z', r'P', r'r'], (false, UInt8(200), Int32(25)))),
            Enum198.defaultValue,
            Enum198.enumValue2438(func395,
            Option<(Range<Int32>, Int32, Range<Int8>, Bool, Unit, String, (Bool, UInt8, Int32))>.None,
            (###"0hZxSsa{`5X"###, ((UInt16(85) & 127)..(UInt16(150) & 127) : (38 | 1)), Int16(26), (), (-67), Int8(118),
                [r'n', r'P', r'b', r'7', r'z', r'n', r'V', r'B', r'G', r'O'], (false, UInt8(205), Int32(121)))),
            Enum198.defaultValue,
            Enum198.enumValue2438(func395,
            Option<(Range<Int32>, Int32, Range<Int8>, Bool, Unit, String, (Bool, UInt8, Int32))>.Some(
                (((Int32(-89) & 127)..(Int32(43) & 127) : ((-8) | 1)), Int32(-33), ((Int8(52) & 127)..(Int8(-31) & 127) : (96 |
                        1)), false, (), """
0vgh?
*9H#5
""", (false, UInt8(215), Int32(77)))),
            ("""
D4c:a
U)=$'
""", ((UInt16(148) & 127)..(UInt16(104) & 127) : (((-82) | 1))), Int16(-44), (), 16, Int8(-59),
                [r'E', r'J', r'6', r'N', r'G', r'L', r'n', r'h', r'M', r'q'], (true, UInt8(47), Int32(92))))] as Option<(String, 
            Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32))>);
        func func1040<T0>(param1041: (UInt64, Float32, Option<Int8>), param1042: Class30, namedParam1043!: Range<Int16>): Range<UInt64> { // block id: 1044
            (var104 & 127)..(Int8(Int8(121)) & 127) : ((try { // block id: 1050
                var910;
                var863 %= ((UInt64(111)) | 1)
                (-75)
            } finally { // block id: 1056
                let var1060: String = ###"0|WWzY+[Nb"###;
                if (var53) {
                    var1060
                } else {
                    """
95\\${var1060}>u
UxMK\"
"""
                };
                var173;
                var309 >> ((var309) & 7)
            } | 1))
            let var2409: ?(Option<Option<(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, 
                Int32))>>, Int16) = ((Int8(UInt8(UInt8(85))) as Option<Array<Rune>>) as (Option<Option<(String, Range<UInt16>, 
                Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32))>>, Int16));
            match (var2409.getOrThrow()) {
                case _: Bool =>
                    var309 &= var309
                    (Option<Option<(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32))>>
                            .Some(
                                Option<(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, 
                                        Int32))>.None), Int16(-31))

                case (_, caseVar2427) =>
                    ((UInt16(11) & 127)..(UInt16(238) & 127) : ((-108) | 1));
                    (var2432, Int16(117))

                case _: Int64 =>
                    var2606 /= ((var2606) | 1)
                    var1908;
                    (var2432, Int16(-119))

                case _ => (Option<Option<(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, 
                            Int32))>>.None, var684)
            } |> func1068
        };

        func func1037(): Unit { // block id: 1038
            func1040<Range<Int8>>((var863, var267, (Option<Option<Int8>>.None ?? Option<Int8>.Some(Int8(4)))),
                if (var53) {
                    match (49.0) {
                        case 6.0 =>
                            var173;
                            if (var53) {
                                var35
                            } else {
                                Class30()
                            }

                        case 17.0 | 58.0 =>
                            (-15);
                            var2647 %= ((UInt16(119)) | 1)
                            Class30()

                        case _ =>
                            if (true) {
                                Option<(Option<Option<(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, 
                                        UInt8, Int32))>>, Int16)>.Some((var2432, Int16(-33)))
                            } else {
                                var2662
                            };
                            var173;
                            Class30()
                    }
                } else {
                    (Option<Class30>.Some(var35) ?? var35)
                }, namedParam1043: try { // block id: 2671
                    var173;
                    var466 = Int32(-29)
                    if (true) {
                        ((Int16(-91) & 127)..(Int16(-21) & 127) : ((-89) | 1))
                    } else {
                        ((Int16(43) & 127)..(Int16(27) & 127) : ((-106) | 1))
                    }
                } finally { // block id: 2680
                    ((var2606 & 127)..(var2606 & 127) : ((var309 | 1)))
                });
            let var2691: Option<Enum198> = Option<Enum198>.Some(
                Enum198.enumValue2438(func395,
                    Option<(Range<Int32>, Int32, Range<Int8>, Bool, Unit, String, (Bool, UInt8, Int32))>.Some(
                        (((Int32(118) & 127)..=(Int32(27) & 127) : ((121 | 1))), Int32(84), ((Int8(103) & 127)..=(Int8(87) &
                                127) : (((-98) | 1))), true, (), """
T@%&.
aht['
""", (true, UInt8(251), Int32(-114)))),
                    (###"$wC^z hJr-"###, ((UInt16(221) & 127)..=(UInt16(236) & 127) : (((-110) | 1))), Int16(UInt16(40)),
                        (), Int64(Int32(45)), Int8(86), [r'W', r'0', r'W', r'q', r'Y', r'6', r'w', r'E', r'X', r'z'], (true,
                            UInt8(101), Int32(-79)))));
            var var2765: ?(Range<Int32>, Int32, Range<Int8>, Bool, Unit, String, (Bool, UInt8, Int32)) = Option<(Range<Int32>, 
                    Int32, Range<Int8>, Bool, Unit, String, (Bool, UInt8, Int32))>.None;
            (var2691 ?? match ((-66)) {
                case -107 => Option<Enum198>.None

                case -16 | -88 | -56 =>
                    var2755;
                    let var2762: (Range<UInt16>) -> Option<Array<Rune>> = func395;
                    if (false) {
                        Option<Enum198>.Some(Enum198.enumValue2438(var2762, var2765, var2175))
                    } else {
                        Option<Enum198>.None
                    }

                case _ =>
                    if (false) {
                        var2755
                    } else {
                        Option<Enum198>.None
                    }
            }.getOrThrow());
            ()
        };

        func1037()
    } catch (_) { // block id: 2776
        match ((var35, UInt8(93), var309)) {
            case (_, caseVar2784: (Range<Int32>, Int32, Range<Int8>, Bool, Unit, String, (Bool, UInt8, Int32)), caseVar2785: Interface33) =>
                let var2788: (Option<Option<(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, 
                    Int32))>>, Int16) = (((Float32(Float32(54.0)), (((-53) & 127)..=(92 & 127) : ((-107) | 1)), (UInt16(98),
                            ((UInt64(54) & 127)..=(UInt64(96) & 127) : ((-42) | 1)), ("""
2?}9K
hK5Zs
""", ((UInt16(69) &
                                    127)..=(UInt16(28) & 127) : ((91 | 1))), Int16(36), (), 69, Int8(86), [r'U', r'Q',
                                    r'i', r'Z', r'6', r'5', r'g', r'b', r'2', r'g'], (true, UInt8(197), Int32(24))), (true,
                                UInt8(154), Int32(-124)), ((Int8(-60) & 127)..=(Int8(6) & 127) : ((24 | 1))), ((10 & 127)..=(117 &
                                127) : (48 | 1)), Float32(-120.0)), ((Int32(-123) & 127)..(Int32(73) & 127) : ((106 | 1)))) as Option<(String, 
                        Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32))>), Int16(UInt8(UInt8(223))));
                var2788;
                var1908;
                var2339 -= (-57.0)

            case caseVar2846 => var1908

            case _ => var53 = var1162
        }
    };
    let var2860: Option<String> = Option<String>.None;
    var var2887: UInt64 = UInt64(42);
    var var2898: Array<Interface33> = Array<Interface33>(10) {i => Class30()}
    (var2860 ?? match {
        case try { // block id: 2864
            if (var2867) {
                var228
            } else {
                Option<Int8>.Some(Int8(64))
            };
            let var2874: Range<UInt32> = ((UInt32(59) & 127)..=(UInt32(251) & 127) : ((-34) | 1));
            var2874;
            !var53
        } finally { // block id: 2878
            var104 += Int8(-91)
            true
        } =>
            UInt64(20) | var2887;
            var var2890: Unit = ();
            var2890;
            if (false) {
                var1835
            } else {
                "Xiya=_t ~J"
            }
        case _ =>
            var2898;
            ###"?,kKT>9M!O"###
    })
}

public func func954(param955: Option<(Bool, UInt8, Int32)>): UInt16 { // block id: 956
    var var976: (Range<UInt16>, String, Bool, (String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, 
        UInt8, Int32)), Rune) = (((UInt16(37) & 127)..(UInt16(UInt8(138)) & 127) : (((-15) | 1))), """
[s+c^
9f8 B
""", ((Class30(),
            UInt8(UInt8(94)), Int64(Int8(-66))) is (UInt64, Float32, Option<Int8>)), ("""
6)pki
sjK&T
""", ((UInt16(198) &
                127)..(UInt16(127) & 127) : ((58 | 1))), Int16(UInt8(UInt8(189))), (), Int64(Int16(-115)), Int8(-65), [r'O',
                r'6', r'o', r'H', r'E', r'I', r'n', r'Z', r'Q', r'Y'], (false, UInt8(53), Int32(70))), r'R');
    let var2915: Option<Unit> = Option<Unit>.Some(());
    if ((param955 ?? var962)[0]) { // block id: 972
        var976[0];
        Option<Class30>.None |> func1022;
        (var2915 ?? var173)
    };
    var var2988: Range<UInt64> = ((UInt64(135) & 127)..(UInt64(113) & 127) : ((-14) | 1));
    let var3081: Option<Option<(Range<Int32>, Int32, Range<Int8>, Bool, Unit, String, (Bool, UInt8, Int32))>> = Option<Option<(Range<Int32>, 
            Int32, Range<Int8>, Bool, Unit, String, (Bool, UInt8, Int32))>>.Some(
        (((Int8(-31) & 127)..=(Int8(92) & 127) : (5 | 1)) as (Range<Int32>, Int32, Range<Int8>, Bool, Unit, String, (Bool, 
            UInt8, Int32))));
    try { // block id: 2920
        var loopTimeVar2928: Range<UInt64> = ((UInt64(UInt64(239)) & 127)..=(UInt64(UInt64(141)) & 127) : ((Int64(Int16(125)) |
            1)));
        for (i in loopTimeVar2928 where var53) {
            var863 *= var1644
            [Int8(116), Int8(-37), Int8(-10), Int8(-99), Int8(69), Int8(-2), Int8(-39), Int8(-116), Int8(37), Int8(20)]
        };
        Option<Unit>.None.getOrThrow();
        ()
    } catch (_) { // block id: 2939
        let var2942: Option<Enum198> = (((Int8(120) & 127)..(Int8(-73) & 127) : (14 | 1)) as Enum198);
        let var2962: UInt32 = UInt32(113);
        var var2977: Unit = ();
        match (var2942) {
            case _ =>
                var1908;
                [((UInt32(33) & 127)..=(UInt32(14) & 127) : (50 | 1)), var2952, var2952,
                    ((UInt32(197) & 127)..(var639 & 127) : ((36 | 1))),
                    ((UInt32(254) & 127)..(var2962 & 127) : ((var309 | 1))),
                    ((UInt32(212) & 127)..(UInt32(3) & 127) : ((114 | 1))), ((var639 & 127)..(var2962 & 127) : ((114 | 1))),
                    ((UInt32(158) & 127)..(UInt32(19) & 127) : (68 | 1)),
                    ((UInt32(63) & 127)..(UInt32(81) & 127) : (17 | 1)),
                    ((UInt32(251) & 127)..=(UInt32(73) & 127) : (88 | 1))];
                var2977

            case None =>
                var173;
                if (var2867) {
                    (var2647, var2988, var2991, var962, var1117, ((110 & 127)..=(12 & 127) : ((-17) | 1)), var2347)
                } else {
                    (var2647, ((UInt64(241) & 127)..(var1644 & 127) : ((67 | 1))), (var1835, ((var2647 & 127)..(var2647 &
                                127) : ((var309 | 1))), var684, var173, 62, Int8(111), [r'5', r'c', r'1', r'k', r'B',
                                r'b', r'k', r'3', r'M', r'Y'], var962), var962, ((Int8(-6) & 127)..(var104 & 127) : (((-43) |
                            1))), var2223, var2347)
                };
                ()

            case Some(caseVar3056: Option<Option<(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, 
                        UInt8, Int32))>>) =>
                var267 -= var2347
                var684 |= Int16(72)
                ()

            case None => ()

            case _ =>
                var428;
                ()
        };
        ()
    } finally { // block id: 3074
        (var3081 ?? var3086);
        if (false) { // block id: 3090
            var2339 = 63.0
            var3095;
            ()
        }
    };
    (Option<UInt16>.Some(var2647) ?? ((((UInt64(225) & 127)..=(UInt64(234) & 127) : ((-98) | 1)) as UInt16) ?? (var3116 ??
        var2647)))
}

public func func3123(param3124: Option<UInt16>): Option<(Bool, UInt8, Int32)> { // block id: 3125
    var var3139: ?Int8 = Option<Int8>.Some(Int8(9));
    var var3181: ??(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32)) = (Option<Option<(Range<Int32>, 
            Int32, Range<Int8>, Bool, Unit, String, (Bool, UInt8, Int32))>>.None as Option<(String, Range<UInt16>, 
        Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32))>);
    var var3200: ?(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32)) = Option<(String, 
            Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32))>.Some(
        ("aX57igH.oA", ((UInt16(Int16(91)) & 127)..(UInt16(19) & 127) : ((Int64(UInt32(119)) | 1))), Int16(-62), (),
            Int64(UInt16(UInt8(109))), Int8(UInt8(164)), [r's', r'9', r'h', r'A', r'd', r'Z', r'I', r'T', r'G', r'W'], (true,
                UInt8(Int8(-90)), Int32(70))));
    (match (match (var2175) {
        case (_: Option<Option<Int8>>, _, _: Unit, _, caseVar3132: Enum198, _: Option<Bool>, _: Option<Range<Int32>>, caseVar3133) =>
            var1908;
            var173;
            Option<Option<Int8>>.Some(var3139)

        case _: Array<Interface33> =>
            var1926;
            ();
            Option<Option<Int8>>.Some(Option<Int8>.Some(var1982))

        case _ =>
            if (true) {
                Option<Option<Int8>>.Some(Option<Int8>.Some(var1926))
            } else {
                var3158
            }
    }) {
        case caseVar3162: Option<(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32))> =>
            let var3167: ??(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32)) = ((Class30(),
                UInt8(147), Int64(Int32(UInt8(59)))) as Option<(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, 
                (Bool, UInt8, Int32))>);
            if (var2867) {
                var3167
            } else {
                Option<Option<(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32))>>
                    .None
            }

        case caseVar3178: (Float32, Range<Int64>, (UInt16, Range<UInt64>, (String, Range<UInt16>, Int16, Unit, Int64, 
                Int8, Array<Rune>, (Bool, UInt8, Int32)), (Bool, UInt8, Int32), Range<Int8>, Range<Int64>, Float32), 
                Range<Int32>) => var3181

        case caseVar3186: Option<Bool> =>
            Option<Option<Int8>>.None;
            var3181

        case caseVar3192: Option<UInt16> =>
            ();
            var1908;
            if (var2867) {
                Option<Option<(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32))>>
                    .Some(var3200)
            } else {
                var3181
            }

        case _ => Option<Option<(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32))>>
            .Some(var3200)
    } ?? match (if (var2867) { // block id: 3241
        var2647 <<= ((UInt16(103)) & 7)
        var910
    } else if (true) { // block id: 3247
        ();
        ();
        var910
    } else { // block id: 3251
        if (false) {
            var1835
        } else {
            "l[!Y[Uo(/-"
        };
        Float32(86.0);
        (Class30(), UInt8(217), var309)
    }) {
        case _: Range<Int8> =>
            var2647 += UInt16(216)
            Option<(Bool, UInt8, Int32)>.None;
            Option<(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32))>.Some(
                ("""
E=1R8
GUQ?#
""", var3272, Int16(5), (), (-100), var3278, [r'J', var415, r'i', r'9', r'a', r'r',
                        r'7', r'9', r'i', r'o'], (var2867, var2328, Int32(-47))))

        case _ =>
            ();
            if (false) {
                var3200
            } else {
                Option<(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32))>.Some(
                    (var3309, ((UInt16(190) & 127)..=(UInt16(83) & 127) : (((-47) | 1))), Int16(52), var1908, var309,
                        Int8(115), [var415, r'J', var415, var411, r'6', r'l', r'Q', var415, r'L', r't'], var962))
            }

        case _ =>
            var3158;
            Option<(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32))>.Some(var2175)
    });
    if ((r'8' is Array<Range<UInt32>>)) {
        (if (if (var53) { // block id: 3342
            false
        } else { // block id: 3344
            false
        }) {
            match (((UInt32(242) & 127)..(UInt32(117) & 127) : ((-98) | 1))) {
                case caseVar3350 => Option<(Bool, UInt8, Int32)>.Some((true, var2328, var2023))

                case caseVar3359: Range<UInt8> => var505

                case caseVar3364: Aggregate827 =>
                    var var3369: Float32 = Float32(Float32(-50.0));
                    (UInt64(153), var3369, Option<Int8>.None);
                    Option<Option<Int8>>.Some(var3139);
                    Option<(Bool, UInt8, Int32)>.None

                case caseVar3378: Option<Option<Int8>> =>
                    if (var1162) {
                        var505
                    } else {
                        Option<(Bool, UInt8, Int32)>.Some((var1162, UInt8(141), Int32(41)))
                    }

                case _ => var505
            }
        } else {
            var505
        })
    } else {
        Option<(Bool, UInt8, Int32)>.None
    }
}

func func898(param899: Class30): (Int32, UInt16, Option<Option<(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, 
    (Bool, UInt8, Int32))>>, Float32) { // block id: 900
    var var3121: (Option<(Bool, UInt8, Int32)>) -> UInt16 = func954;
    var var3412: (Option<Option<(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32))>>, 
        Int16) = (((((Int32(95) & 127)..(Int32(122) & 127) : (2 | 1)), Int32(-21), ((Int8(100) & 127)..(Int8(83) & 127) : ((5 |
                1))), false, (), ###"CK[4/e$]`+"###, (true, UInt8(35), Int32(-127))) as Option<(String, Range<UInt16>, 
            Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32))>), Int16(Int8(-38)));
    match ((Option<Option<Range<Int32>>>.None ?? Option<Range<Int32>>.None)) {
        case _ =>
            var var3407: Bool = ((Int16(-19) as (Range<Int32>, Int32, Range<Int8>, Bool, Unit, String, (Bool, UInt8, 
                Int32))) is () -> Int8);
            if (var3407) {
                var3412
            } else {
                (Option<Option<(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32))>>
                        .None, var2606)
            };
            Option<UInt16>.None

        case caseVar3437 =>
            Enum198.defaultValue;
            var173;
            Option<UInt16>.Some(UInt16(122))

        case caseVar3445 =>
            var1202 *= var2328
            Option<Option<Int8>>.None;
            if (false) {
                Option<UInt16>.None
            } else {
                var3116
            }

        case _ => Option<UInt16>.Some(UInt16(182))
    } |> (func3123 ~> var3121);
    let var3567: (Int32, UInt16, Option<Option<(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, 
        UInt8, Int32))>>, Float32) = (Int32(32), UInt16(21), (((Int16(-95) & 127)..(Int16(29) & 127) : ((-14) | 1)) as Option<(String, 
            Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32))>), Float32(-14.0));
    let var3581: ??(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32)) = (() as Option<(String, 
        Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32))>);
    match (Option<Enum198>.Some(
        match ([Class30(), Class30(), Class30(), Class30(), Class30(), Class30(), Class30(), var1681, Class30(),
            Class30()]) {
            case _: (Range<Int32>, Int32, Range<Int8>, Bool, Unit, String, (Bool, UInt8, Int32)) =>
                if (var2867) {
                    [((var639 & 127)..(var639 & 127) : ((var309 | 1))), ((var639 & 127)..=(var639 & 127) : ((26 | 1))),
                        ((var639 & 127)..(UInt32(184) & 127) : ((var309 | 1))),
                        ((UInt32(169) & 127)..(UInt32(27) & 127) : ((-42) | 1)),
                        ((UInt32(224) & 127)..(UInt32(69) & 127) : ((var309 | 1))),
                        ((UInt32(254) & 127)..(UInt32(142) & 127) : ((112 | 1))),
                        ((UInt32(51) & 127)..=(UInt32(211) & 127) : ((-60) | 1)),
                        ((UInt32(205) & 127)..(UInt32(18) & 127) : ((-5) | 1)),
                        ((UInt32(187) & 127)..(UInt32(97) & 127) : ((113 | 1))), var2952]
                } else {
                    var3508
                };
                var639 *= UInt32(155)
                var var3515: (Range<UInt16>) -> Option<Array<Rune>> = func395;
                Enum198.enumValue2438(var3515, var3086,
                    (var1835, var3272, var2606, var173, 36, Int8(40), [r'N', r'g', r'F', r'b', r'b', r'i', r'U', r'f',
                            r'C', r'y'], (var1162, UInt8(161), var2023)))

            case caseVar3532 =>
                var267;
                var603

            case _ =>
                var1926 %= ((var1926) | 1)
                let var3543: (Range<UInt16>) -> Option<Array<Rune>> = func395;
                Enum198.enumValue2438(var3543,
                    Option<(Range<Int32>, Int32, Range<Int8>, Bool, Unit, String, (Bool, UInt8, Int32))>.Some(var1527),
                    ("""
i+c;>
41m/c
""", ((UInt16(64) & 127)..=(UInt16(38) & 127) : ((-54) | 1)), Int16(-37), (), 56,
                        var1982, var795, (var2867, UInt8(101), Int32(63))))
        })) {
        case Some(caseVar3561: String) =>
            var411;
            if (var1162) {
                var3567
            } else {
                var1026
            };
            (var3577, var2647, var3581, Float32(-61.0))

        case _ =>
            var603;
            var795;
            (Int32(5), UInt16(165),
                Option<Option<(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32))>>
                    .Some(var3594), Float32(-6.0))
    }
}

func func840(param841: Rune, param842: Class30, optionalParam843!: UInt16 = UInt16(157)): Option<(String, Range<UInt16>, 
    Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32))> { // block id: 845
    func847();
    var var871: Range<Int32> = ((Int32(-50) & 127)..(Int32(46) & 127) : (59 | 1));
    var loopTimeVar886: Range<UInt64> = ((UInt64((-73)) & 127)..(UInt64(15) & 127) : ((Int64(UInt32(UInt8(196))) | 1)));
    for (i in loopTimeVar886 where match {
        case false => var53
        case _ =>
            false;
            ((UInt16(64) & 127)..(UInt16(177) & 127) : ((var309 | 1)));
            var863 >= var863
    }) {
        let var875: Range<Int8> = ((Int8(-25) & 127)..=(Int8(45) & 127) : (103 | 1));
        (var871, Int32(-45), var875, false, (), "(EQ_1i `kU", (true, UInt8(47), Int32(-77)))[4];
        ()
    };
    ((Class30() |> func898)[2] ?? (try { // block id: 3604
        var1644;
        Float32(-67.0);
        var1835
    } catch (_) { // block id: 3608
        ((var1644 & 127)..(var863 & 127) : ((var309 | 1)));
        ();
        "HTi,.qy?mf"
    } as (String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32))))
}

func func814<T0>(param815: UInt8, namedParam816!: Float64, namedParam817!: Range<Int64>): Array<Rune> { // block id: 818
    let var831: Aggregate827 = Aggregate827();
    (var831.var834[0] ?? func840(r'1', Class30()));
    try { // block id: 3618
        if (var53) { // block id: 3621
            var1908
        } else if (false) { // block id: 3624
            ()
        };
        Option<Array<Rune>>.Some([r'K', r'z', r'n', r'M', r'T', r'L', r'C', r'F', r'B', r'i']).getOrThrow()
    } catch (e: Exception) { // block id: 3633
        (Option<Unit>.Some(()) ?? ());
        var var3640: ?UInt16 = Option<UInt16>.Some(UInt16(193));
        (var3640 as Option<(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32))>);
        [r'k', r'q', r'v', r'U', r'X', r'w', r'I', r'b', r'm', r'K']
    }
}

func func490(param491: Range<UInt8>): Array<Rune> { // block id: 492
    UInt8(func1068());
    var var695: Class30 = Class30();
    if (func79([var695, var695, var695, var695, Class30(), Class30(), var35, Class30(), Class30(), var35][2])) {
        match (Int16(UInt16(203))) {
            case caseVar712: Option<(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32))> => [r'N',
                r'V', r'z', r'k', r'b', r'x', r'z', r'b', r'U', r'x']

            case -123 | 56 =>
                if (var53) {
                    ((var309 & 127)..=((-108) & 127) : ((var309 | 1)))
                } else {
                    ((var309 & 127)..(30 & 127) : (((-6) | 1)))
                };
                ();
                if (false) {
                    [r'G', r'E', r'v', r'T', r'Z', r'M', r'T', r'K', r'B', r'P']
                } else {
                    var446
                }

            case caseVar735: (Bool, UInt8, Int32) => [r'Z', r'O', r'L', r'W', r'e', r'x', r'C', r'q', r'X', r'C']

            case 20 | -15 | -47 | 112 =>
                false;
                var var745: ?(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32)) = (((Int16(-40) &
                    127)..=(Int16(99) & 127) : (84 | 1)) as (String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, 
                    (Bool, UInt8, Int32)));
                let var750: (String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32)) = ("Z\\=D]e'Wui",
                    ((UInt16(251) & 127)..=(UInt16(229) & 127) : ((-34) | 1)), Int16(Int8(UInt8(UInt8(48)))), (), Int64(Int64(UInt16(Int16(-15)))),
                    Int8(Int8(-65)), [r's', r'L', r'd', r'a', r'd', r'H', r'Z', r'F', r'D', r'E'], (([Enum198
                            .defaultValue, Enum198.defaultValue, Enum198.defaultValue, Enum198.defaultValue,
                            Enum198.defaultValue, Enum198.defaultValue, Enum198.defaultValue, Enum198.defaultValue,
                            Enum198.defaultValue, Enum198.defaultValue] is Range<Int8>), UInt8(Int8(Int8(-72))), Int32(Int32(-15))));
                if (var53) {
                    var745
                } else {
                    Option<(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32))>.Some(
                        var750)
                };
                var795

            case _ =>
                if (var53) {
                    [r'u', r'l', r'q', r'Z', r'U', r'a', r'F', r'w', r'C', r'P']
                } else {
                    [r'8', r't', r'6', r'p', r'5', r'2', r'I', r'p', r'i', r'T']
                }
        }
    } else {
        func814<Option<Array<Rune>>>(if (true) { // block id: 3646
            var1908;
            var1908;
            var1202 / ((var1202) | 1)
        } else if (false) { // block id: 3653
            var2328
        } else { // block id: 3655
            var1908;
            if (false) {
                Option<Array<Rune>>.Some([r'H', r'8', r'e', r'N', r'6', r'b', r'j', r'l', r'L', r'5'])
            } else {
                Option<Array<Rune>>.Some([r'5', r'8', r'g', r'v', r'm', r'1', r'n', r'P', r'A', r'e'])
            };
            var2328 | UInt8(6)
        }, namedParam816: var2339, namedParam817: try { // block id: 3668
            ();
            var173;
            (((-101) & 127)..((-111) & 127) : (60 | 1))
        } catch (_) { // block id: 3672
            var173;
            var1908;
            var2223
        })
    }
}

public func func144(param145: Float32, param146: Range<UInt16>): Array<Rune> { // block id: 147
    var var156: ?UInt16 = (UInt64(UInt64(228)) as UInt16);
    let var388: (Option<Array<Rune>>) -> Int64 = {lambdaParameter391: Option<Array<Rune>> => 107};
    let var459: (Range<UInt16>) -> Option<Array<Rune>> = func395;
    let var481: Range<Int32> = ((Int32(62) & 127)..=(Int32(-36) & 127) : (9 | 1));
    let var3677: (Range<UInt8>) -> Array<Rune> = func490;
    try { // block id: 149
        var156.getOrThrow();
        ();
        let var167: Option<Array<Rune>> = Option<Array<Rune>>.Some([r'B', r'N', r'P', r'c', r'3', r'k', r'J', r'O', r'x',
            r'9']);
        (var167 ?? [r'P', r'c', r'g', r'F', r'k', r'9', r'w', r'L', r'j', r'Z'])
    } finally { // block id: 171
        var173;
        let var254: Int64 = Int64(Int8(Int8(Int8(13))));
        let var272: Int16 = Int16(UInt8(82));
        let var294: Range<Int64> = ((83 & 127)..((-125) & 127) : ((-5) | 1));
        func func176(
            optionalParam177!: Range<UInt32> = ((UInt32(Int16(Int8(UInt8(23)))) & 127)..=(UInt32(196) & 127) : (((-100) |
                1))), namedParam185!: (Class30) -> Bool,
            optionalParam188!: (UInt64, Float32, Option<Int8>) = (UInt64(78), Float32(-95.0), Option<Int8>.Some(
                    Int8(-10))), namedParam194!: (UInt64, Float32, Option<Int8>)): Array<Rune> { // block id: 195
            var var300: Int64 = (-75);
            match (match (var203[9]) {
                case caseVar218 => var21

                case defaultValue =>
                    ();
                    if (var53) {
                        var228
                    } else {
                        Option<Int8>.Some(Int8(-53))
                    }

                case caseVar234: Float64 =>
                    Int8(16);
                    true;
                    var21

                case _ =>
                    Int8(58);
                    Float32(104.0) + param145;
                    if (true) {
                        Option<Int8>.None
                    } else {
                        var228
                    }
            }) {
                case _ => ((var254 & 127)..=(69 & 127) : ((var254 | 1)))

                case caseVar263: UInt8 =>
                    var267 *= Float32(-82.0)
                    -var272
                    ((53 & 127)..=((-118) & 127) : ((-100) | 1))

                case _ =>
                    ();
                    ((126 & 127)..(var254 & 127) : ((94 | 1)))

                case _: Option<Class30> =>
                    let var290: Float64 = (-10.0);
                    5.0 + var290;
                    var173;
                    var294

                case _ =>
                    var300 %= (((-69)) | 1)
                    ();
                    if (true) {
                        ((var254 & 127)..(var309 & 127) : ((37 | 1)))
                    } else {
                        ((113 & 127)..=((-1) & 127) : ((-104) | 1))
                    }
            };
            var var486: UInt16 = UInt16(32);
            (try { // block id: 462
                ();
                var466 %= ((Int32(54)) | 1)
                param146
            } catch (_) { // block id: 470
                17.0;
                var var474: UInt16 = UInt16(114);
                ((var474 & 127)..=(UInt16(236) & 127) : ((var300 | 1)))
            } finally { // block id: 478
                (((-16) & 127)..(45 & 127) : (84 | 1));
                var481;
                ((UInt16(216) & 127)..=(var486 & 127) : ((10 | 1)))
            } |> var459) |> var388;
            try { // block id: 3680
                var2175;
                ((UInt8(83) & 127)..=(UInt8(128) & 127) : ((var254 | 1)))
            } finally { // block id: 3686
                var1873
            } |> var3677
        };

        let var3690: (UInt64, Float32, Option<Int8>) = (UInt64(Int32(UInt32(14))), Float32(Float32(18.0)), Option<Int8>
                .None);
        func176(namedParam185: func79, optionalParam188: var3690, namedParam194: (var863, param145, Option<Int8>.None))
    }
}

func func112(optionalParam113!: Class30 = Class30(optionalParam122: UInt64(183), namedParam124: (-56)),
    optionalParam3886!: Rune = r'Z',
    namedParam3888!: (Option<(String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32))>, (UInt16, 
            Range<UInt64>, (String, Range<UInt16>, Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32)), (Bool, 
            UInt8, Int32), Range<Int8>, Range<Int64>, Float32), Option<Option<Array<Rune>>>) -> (String, Range<UInt16>, 
        Int16, Unit, Int64, Int8, Array<Rune>, (Bool, UInt8, Int32)), namedParam3893!: Option<Option<Array<Rune>>>): (Bool, 
    UInt8, Int32) { // block id: 3894
    var var3924: Unit = ();
    if ((!var3898)) {
        if (true) { // block id: 3902
            var962
        } else if (UInt32(231) >= var3907) { // block id: 3909
            ();
            Option<Class30>.None;
            if (var1162) {
                (true, UInt8(18), Int32(-12))
            } else {
                (var53, UInt8(22), Int32(-50))
            }
        } else { // block id: 3922
            var3924;
            (var3898, var2328, Int32(3))
        }
    } else {
        ((var3937 as (Bool, UInt8, Int32)) ?? try { // block id: 3940
            var962
        } finally { // block id: 3942
            (true, UInt8(118), var2023)
        })
    }
}

public func func7(param8: Rune): Bool { // block id: 9
    let var26: UInt8 = UInt8(111);
    ((UInt64(131), Float32(45.0), var21)[2] ?? Int8(var26));
    var var95: Class30 = Class30();
    var var100: Unit = ();
    if (var35.var38) { // block id: 40
        let var64: UInt16 = UInt16(17);
        match (false) {
            case _ =>
                ();
                UInt16(106)

            case _: Int16 =>
                if (var53) {
                    Class30()
                } else {
                    Class30()
                };
                ();
                UInt16(241)

            case _ => var64 / ((UInt16(172)) | 1)
        };
        var var68: Bool = true;
        var68;
        let var74: Unit = ();
        var loopTimeVar77: Int64 = 0;
        while ((true) && loopTimeVar77 < 100) {
            loopTimeVar77++;
            var74
        }
    } else if (((Option<Class30>.None ?? var95) |> {lambdaParameter85: Class30 => var53})) { // block id: 98
        var100;
        var104 = var104
    };
    func112(optionalParam3886: if (true) {
        var415
    } else {
        var411
    }, namedParam3888: func1670<Range<UInt32>>, namedParam3893: if (var1162) {
        var3955
    } else {
        var3955
    })[0]
}

main(): Int64 {
    try {
        let var3961: (Rune) -> Bool = func7;
        var loopTimeVar3965: Range<UInt64> = ((UInt64(UInt64(36)) & 127)..(UInt64(79) & 127) : ((22 | 1)));
        for (i in loopTimeVar3965 where (r'S' |> var3961)) {
        }
        (Option<Unit>.None ?? (var1982 ^= Int8(89)));
        var var4021: ?Int8 = Option<Int8>.Some(Int8(Int8(UInt8(108))));
        if (match {
            case var3898 =>
                var173;
                var1908;
                UInt64(169) == UInt64(218)
            case var1162 => UInt32(159) != UInt32(185)
            case _ => !var3898
        }) { // block id: 3993
            (-83) & var309
        } else { // block id: 3997
            ("\\ ?O@!Y6$8", ((UInt16(193) & 127)..=(UInt16(167) & 127) : (107 | 1)), Int16(114), var1908, var309, Int8(103),
                [r'A', var411, r'z', var411, var415, var415, var415, r'0', var411, r't'], var962);
            if (true) {
                Option<Int8>.None
            } else {
                var4021
            };
            34
        }
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var104 * var104), 64)
        crccheck.updateBuffer(UInt64(var309 * var309), 64)
        crccheck.updateBuffer(UInt64(var466 * var466), 64)
        crccheck.updateBuffer(UInt64(var639 * var639), 64)
        crccheck.updateBuffer(UInt64(var684 * var684), 64)
        crccheck.updateBuffer(UInt64(var863 * var863), 64)
        crccheck.updateBuffer(UInt64(var1202 * var1202), 64)
        crccheck.updateBuffer(UInt64(var1644 * var1644), 64)
        crccheck.updateBuffer(UInt64(var1926 * var1926), 64)
        crccheck.updateBuffer(UInt64(var1982 * var1982), 64)
        crccheck.updateBuffer(UInt64(var2023 * var2023), 64)
        crccheck.updateBuffer(UInt64(var2328 * var2328), 64)
        crccheck.updateBuffer(UInt64(var2606 * var2606), 64)
        crccheck.updateBuffer(UInt64(var2647 * var2647), 64)
        crccheck.updateBuffer(UInt64(var3278 * var3278), 64)
        crccheck.updateBuffer(UInt64(var3577 * var3577), 64)
        crccheck.updateBuffer(UInt64(var3907 * var3907), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) {
        println("Exception: NoneValueException")
    }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        buffer = Array<Int64>(buffer_n, {i => 0})
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, {i => 0})
        var byte_c = 1
        var byte_index = 0
        while (value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, {i => 0})
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2 ** 2 * crc_output[i] + 2 ** 1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}

extend Aggregate827 {}

extend Enum198 {}
