/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

package test

// random seed:1705416334745
// All global variable need to be defined before use!
internal import test.c1.*

let var_1705416334745_623: Array<Option<Unit>> = [Option<Unit>.None, Option<Unit>.None,
    (UInt16(UInt8(UInt8(180))) as Unit), (UInt8(199) as Unit),
    (((UInt8(UInt8(UInt8(12))) & 127)..(UInt8(UInt8(Int8(-29))) & 127) : (Int64(Int64(111)) | 1)) as Unit),
    Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, (UInt64(Int32(Int16(98))) as Unit), Option<Unit>.None]
public var var_1705416334745_654: ?Unit = ([UInt64(233), UInt64(215), UInt64(114), UInt64(136), UInt64(82), UInt64(15),
    UInt64(52), UInt64(182), UInt64(127), UInt64(184)] as Unit)
let var_1705416334745_710: Range<Int64> = ((Int64(Int64(-97)) & 127)..(Int64(Int64(-106)) & 127) : (Int64(-47) | 1))
public var var_1705416334745_730: Enum_1705416334745_351 = Enum_1705416334745_351.enumValue_1705416334745_732
public const var_1705416334745_808: Unit = ()
let var_1705416334745_816: Int8 = Int8(-50)
const var_1705416334745_820: Int = 37
public var var_1705416334745_840: Int = Int64(UInt64(67))
var var_1705416334745_888: ((UInt64, Int64, Range<Int64>, Float32, Array<Option<Unit>>), Enum_1705416334745_351, Int32) = ((UInt64(UInt32(Int8(-91))),
        Int64(-53), ((Int64(Int64(UInt64(158))) & 127)..(Int64(Int64(-99)) & 127) : (Int64(50) | 1)), Float32(Float32(-8.0)),
        [Option<Unit>.None, (Int32(15) as Unit), Option<Unit>.None, Option<Unit>.None,
            (((UInt16(UInt16(80)) & 127)..(UInt16(UInt16(230)) & 127) : (Int64(86) | 1)) as Unit), (UInt16(99) as Unit),
            Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None]), Enum_1705416334745_351
        .enumValue_1705416334745_732, Int32(-111))

func func_1705416334745_11(param_1705416334745_12: UInt16): Option<Unit> { // block id: 13
    let var_1705416334745_617: Bool = (((Int32(Int32(38)) & 127)..(Int32(Int32(113)) & 127) : (Int64(3) | 1)) is () -> Bool);
    var var_1705416334745_685: String = "gZMY9m\"vh7";
    match (if ((var_1705416334745_617 |> func_1705416334745_17<Unit, Range<Int16>>)) {
        var_1705416334745_623[6]
    } else {
        [var_1705416334745_654, var_1705416334745_654, var_1705416334745_654, var_1705416334745_654,
            Option<Unit>.Some(var_1705416334745_662), Option<Unit>.Some(()), Option<Unit>.None, var_1705416334745_654,
            Option<Unit>.None, var_1705416334745_654][8]
    }) {
        case caseVar_1705416334745_673: Range<UInt16> => var_1705416334745_288 & var_1705416334745_288

        case _ =>
            if (false) {
                """
Wl1<b
mA\"PX
"""
            } else {
                var_1705416334745_685
            };
            var_1705416334745_288 + UInt64(143)
    };
    (var_1705416334745_662, var_1705416334745_698, (UInt64(254), Int64(31), var_1705416334745_710, Float32(17.0), [Option<Unit>
                .Some(()), Option<Unit>.Some(()), Option<Unit>.None, var_1705416334745_654, Option<Unit>.None,
                Option<Unit>.Some(var_1705416334745_662), var_1705416334745_654,
                Option<Unit>.Some(var_1705416334745_662), var_1705416334745_654, Option<Unit>.Some(())]),
        var_1705416334745_730, UInt64(147))[2][4][8]
}

main(): Int64 {
    try {
        var var_1705416334745_738: (UInt16) -> Option<Unit> = func_1705416334745_11;
        ((if (false) { // block id: 742
            const var_1705416334745_745: UInt16 = 118;
            var_1705416334745_745 >> ((var_1705416334745_745) & 7)
        } else { // block id: 748
            var var_1705416334745_751: UInt8 = UInt8(Int8(101));
            var_1705416334745_751++;
            var_1705416334745_662;
            UInt16(178)
        } |> var_1705416334745_738) ?? var_1705416334745_759[4]);
        let var_1705416334745_829: Class_1705416334745_249 = Class_1705416334745_249();
        if (try { // block id: 774
            var var_1705416334745_777: Int32 = Int32(UInt32(245));
            var_1705416334745_777 += var_1705416334745_777
            const var_1705416334745_783: Bool = true;
            !var_1705416334745_783
        } catch (e: Exception) { // block id: 785
            var_1705416334745_554 / ((var_1705416334745_554) | 1);
            let var_1705416334745_792: Class_1705416334745_249 = Class_1705416334745_249();
            if (true) {
                var_1705416334745_792
            } else {
                Class_1705416334745_249()
            };
            var_1705416334745_524 <= var_1705416334745_524
        } finally { // block id: 798
            var_1705416334745_662;
            true
        }) { // block id: 801
            ();
            let var_1705416334745_812: Bool = true;
            try { // block id: 804
                var_1705416334745_698
            } finally { // block id: 806
                var_1705416334745_808;
                if (var_1705416334745_812) {
                    ((Int8(var_1705416334745_816) & 127)..(Int8(var_1705416334745_816) & 127) : (var_1705416334745_820 |
                        1))
                } else {
                    ((Int8(Int8(-57)) & 127)..(Int8(Int8(-126)) & 127) : (Int64(53) | 1))
                }
            }
        } else if (((var_1705416334745_829.var_1705416334745_832) is (Bool) -> Bool)) { // block id: 837
            var_1705416334745_840 |= var_1705416334745_840
            Class_1705416334745_249.var_1705416334745_847
        } else { // block id: 852
            (Option<Range<Int8>>.Some(((Int8(Int8(102)) & 127)..(Int8(Int8(34)) & 127) : (Int64(74) | 1))) ?? ((Int8(Int8(-59)) &
                127)..=(Int8(Int8(-22)) & 127) : (Int64(33) | 1)))
        };
        let var_1705416334745_874: (UInt8, UInt16, UInt8, Int64) -> Int8 = {
            lambdaParameter_1705416334745_877: UInt8, lambdaParameter_1705416334745_878: UInt16, 
                lambdaParameter_1705416334745_879: UInt8, lambdaParameter_1705416334745_880: Int64 => Int8(-78)
        };
        match (if ((((UInt32(UInt32(249)) & 127)..=(UInt32(var_1705416334745_322) & 127) : (Int64(-100) | 1)) is () -> UInt16)) {
            Enum_1705416334745_351.enumValue_1705416334745_354(
                ((Int64(Int64(16)) & 127)..(Int64(Int64(24)) & 127) : (Int64(86) | 1)), var_1705416334745_874, Int32(45),
                [UInt64(137), UInt64(155), UInt64(219), UInt64(254), UInt64(71), UInt64(139), UInt64(249), UInt64(1),
                    UInt64(194), UInt64(38)])
        } else {
            var_1705416334745_888[1]
        }) {
            case _ =>
                var var_1705416334745_927: Bool = (Float32(-74.0) is () -> UInt16);
                var_1705416334745_927 &&= false
                var_1705416334745_840
        }
        // CRC Check All Variables
        var crcCheck = CrcCheck(5000, 32)
        crcCheck.updateBuffer(UInt64(var_1705416334745_816 * var_1705416334745_816), 64)
        crcCheck.updateBuffer(UInt64(var_1705416334745_820 * var_1705416334745_820), 64)
        crcCheck.updateBuffer(UInt64(var_1705416334745_840 * var_1705416334745_840), 64)
        crcCheck.crcCheck()
        crcCheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) {
        println("Exception: NoneValueException")
    }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        buffer = Array<Int64>(buffer_n, {i => 0})
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, {i => 0})
        var byte_c = 1
        var byte_index = 0
        while (value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[(i + buffer_index) % buffer.size] = byteArray[i + byte_index]
            i++
        }
        buffer_index = (buffer_index + i) % buffer.size
    }

    func updateBuffer(input: Bool, byte_n: Int64): Unit {
        if (input == true) {
            updateBuffer(1, byte_n)
        } else {
            updateBuffer(0, byte_n)
        }
    }

    func updateBuffer(input: Rune, byte_n: Int64): Unit {
        updateBuffer(UInt64(UInt32(input)), byte_n)
    }

    func updateBuffer(input: String, byte_n: Int64): Unit {
        for (c in input) {
            updateBuffer(c, byte_n)
        }
    }

    func updateBuffer(input: Unit, byte_n: Int64): Unit {
        updateBuffer(input.toString(), byte_n)
    }

    func updateBuffer(input: Any, byte_n: Int64): Unit {
        if (input is Hashable) {
            match (input as Hashable) {
                case Some(v) => updateBuffer(UInt64(v.hashCode()), byte_n)
                case _ => updateBuffer(1, byte_n)
            }
        } else if (input is ToString) {
            match (input as ToString) {
                case Some(v) => updateBuffer(v.toString(), byte_n)
                case _ => updateBuffer(1, byte_n)
            }
        } else {
            updateBuffer(1, byte_n)
        }
    }
    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, {i => 0})
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2 ** 2 * crc_output[i] + 2 ** 1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
