/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

package test

// random seed:1649662184500

// All global variable need to be defined before use!
var var17: Int64 = Int64(Int16(UInt16(214)))
public var var33: Bool = (Int32(Int32(Int8(Int8(-35)))) is Rune)
var var41: Unit = ()
var var273: UInt8 = UInt8(151)
var var320: Bool = ("-z18-`u+J\"" is (Interface94) -> Rune)
public var var332: Range<UInt8> = ((UInt8(4) & 127)..=(UInt8(57) & 127) : ((-21) | 1))
public var var522: Interface96 = Class90<String, Range<UInt8>>()
let var547: Unit = ()

public func func57<T0, T1, T2>(): Bool { // block id: 58
    var var65: (UInt16) -> Bool = func60<Float32, Array<Option<Rune>>>;
    var68 |> var65
}

public func func80(): Bool { // block id: 58
    var var65: (UInt16) -> Bool = func60<Float32, Array<Option<Rune>>>;
    var68 |> var65
}

public interface Interface99 <: Interface100 {}

public interface Interface95 <: Interface96 {}

public interface Interface93<T0> <: Interface94 {
    func func110(param153: Interface94): Rune { // block id: 154
        var156;
        let var182: Interface97 = Class90<String, Range<UInt8>>();
        let var216: Int8 = Int8(UInt8(221));
        (if (match (Enum162.defaultValue) {
            case defaultValue =>
                var var171: Rune = r't';
                if (true) {
                    var171
                } else {
                    r'5'
                };
                ((Int16(123) & 127)..(Int16(111) & 127) : ((-44) | 1));
                Int16(-84) >= Int16(-76)

            case defaultValue =>
                var182;
                true

            case defaultValue =>
                Class90<String, Range<UInt8>>();
                true

            case defaultValue =>
                if (true) {
                    Class90<String, Range<UInt8>>()
                } else {
                    Class90<String, Range<UInt8>>()
                };
                var33

            case _ => var30
        }) { // block id: 206
            Class90<String, Range<UInt8>>();
            Int8(-75);
            Int8(-35)
        } else { // block id: 210
            var30 ||= false
            ();
            var216
        } & 127)..(var220 & 127) : ((Int64(UInt32(56)) | 1))
        var var231: (Range<UInt64>, UInt64, Float64, Rune, Int64, UInt16, Range<UInt8>) = (((UInt64(177) & 127)..=(UInt64(190) &
                127) : ((-118) | 1)), UInt64(96), 8.0, r'O', Int64(UInt8(Int8(67))), UInt16(UInt16(134)), ((UInt8(133) &
                127)..=(UInt8(75) & 127) : ((-42) | 1)));
        try { // block id: 227
            var182;
            Class90<String, Range<UInt8>>();
            var231
        } finally { // block id: 243
            Float32(-128.0);
            var247 & var247;
            var231
        }[3]
    };

    func func110(): Int16 { // block id: 111
        ((var133 ?? var136)[1] ?? var102.func110(Class90<String, Range<UInt8>>()));
        if ((var261 ?? if (var265) { // block id: 267
            var33
        } else if (false) { // block id: 270
            var273 /= ((var273) | 1)
            var33
        } else { // block id: 277
            var265
        })) { // block id: 279
            try { // block id: 281
                var283;
                Int16(103)
            } catch (e: Exception) { // block id: 286
                var156;
                Int16(-19)
            }
        } else { // block id: 289
            ((Int8(-38) & 127)..(var220 & 127) : ((var17 | 1)));
            Int16(-128)
        }
    }
}

public func func85(param86: Rune): Int8 { // block id: 87
    var102.var105 |= var102.func110()
    var var306: Int64 = (-121);
    var var346: ((String, Bool, Float32, Int64, UInt16, String), Range<UInt8>, UInt8, (String, Bool, Float32, Int64, 
        UInt16, String), Range<Int16>) = ((###"$0GfYnaTLu"###, (((UInt8(69) & 127)..(UInt8(230) & 127) : ((29 | 1))) is Int64),
            Float32(Float32(-11.0)), (-117), UInt16(Int16(96)), "=Q( kgN8|I"), ((UInt8(144) & 127)..(UInt8(71) & 127) : ((38 |
            1))), UInt8(113), (###"y2?u`^T&3["###, ((((UInt64(120) & 127)..(UInt64(77) & 127) : (36 | 1)), UInt64(44), (-60.0),
                r'w', (-81), UInt16(49), ((UInt8(21) & 127)..(UInt8(22) & 127) : ((54 | 1)))) is Int8), Float32(Float32(Float32(-73.0))),
            Int64(UInt16(UInt8(17))), UInt16(207), "&07,7mn5TD"), ((Int16(Int16(Int16(-17))) & 127)..(Int16(54) & 127) : ((Int64(UInt64(180)) |
            1))));
    if ((UInt16(212), UInt64(136), true, var306)[2]) { // block id: 309
        var var312: Int16 = Int16(Int8(UInt8(125)));
        var312 ^= Int16(-34)
        var41;
        if (var320) {
            ((###"-6/!f$x6mS"###, false, var14, var306, UInt16(118), ###"#a{JfRpP(1J"###), var332, UInt8(110), (var23,
                    var265, var14, var17, UInt16(48), """
6(THm
&M(;a{
"""), var343)
        } else {
            var346
        }
    } else { // block id: 395
        var346
    }[3];
    var var416: Interface99 = Class90<String, Range<UInt8>>();
    (Option<Int8>.Some(match (var402) {
        case -5 | 37 | -55 =>
            var68;
            var220

        case caseVar411: Option<Int8> =>
            if (var320) {
                var416
            } else {
                var416
            };
            Int8(-1) << ((Int8(97)) & 7)

        case _: Unit => var220

        case _ =>
            ();
            var432 &= var402
            Int8(26) + var442
    }) ?? match {
        case try { // block id: 446
            ((var247 & 127)..(Int16(90) & 127) : (((-107) | 1)));
            UInt8(44) == UInt8(59)
        } finally { // block id: 454
            var220 != var442
        } => var220
        case _ => var442
    })
}

main(): Int64 {
    try {
        if (("""
@>*In
@ZZ0$
""", false, var14, var17, UInt16(215), var23)[1]) { // block id: 26
            r'q';
            var30 && var33
        } else { // block id: 39
            var41;
            var41;
            true
        };
        match ((104.0 |> func47)) {
            case caseVar467: ((String, Bool, Float32, Int64, UInt16, String), Range<UInt8>, UInt8, (String, Bool, 
                    Float32, Int64, UInt16, String), Range<Int16>) =>
                var471 += var471
                ((var23, true, var14, (-25), UInt16(80), "h[+i]u54mb"), ((var273 & 127)..=(var273 & 127) : ((10 | 1))),
                    var273, var488, ((Int16(26) & 127)..(Int16(48) & 127) : ((var17 | 1))));
                Float32(121.0)

            case 24 | 42 | -69 | -92 =>
                Option<Array<Option<Rune>>>.None;
                var14

            case _ =>
                var41;
                var156 / Float64((Int32(var156)) | 1);
                Float32(62.0)

            case _ =>
                if (var265) {
                    var522
                } else {
                    Class90<String, Range<UInt8>>()
                };
                Float32(-63.0)
        };
        if (match (Class90<String, Range<UInt8>>()) {
            case _ =>
                var41;
                true
        }) { // block id: 533
            var195 ^ UInt64(5);
            24 | var17
        } else { // block id: 540
            var var543: Int8 = Int8(96);
            var543 ^= Int8(110)
            var547;
            var17
        }
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var17 * var17), 64)
        crccheck.updateBuffer(UInt64(var273 * var273), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) {
        println("Exception: NoneValueException")
    }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        buffer = Array<Int64>(buffer_n, {i => 0})
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, {i => 0})
        var byte_c = 1
        var byte_index = 0
        while (value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, {i => 0})
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2 ** 2 * crc_output[i] + 2 ** 1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
