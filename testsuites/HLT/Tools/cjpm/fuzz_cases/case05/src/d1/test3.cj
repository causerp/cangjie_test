/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

// random seed:1648437787813

// All global variable need to be defined before use!
package test.d1

public var var118: Unit = ()
public var var173: Int8 = Int8(UInt8(UInt8(163)))
public var var178: Float32 = Float32(Float32(Float32(Float32(-30.0))))
var var192: Range<Int32> = (((Int32(126) & 127))..((Int32(-64) & 127)) : ((83 | 1)))
public let var208: Range<UInt16> = (((UInt16(156) & 127))..=((UInt16(34) & 127)) : ((41 | 1)))
public var var265: Range<UInt32> = (((UInt32(188) & 127))..=((UInt32(UInt16(76)) & 127)) : (((Int64(UInt8(Int8(-69))) | 1))))
public let var290: Range<UInt16> = (((UInt16(Int8(UInt8(3))) & 127))..=((UInt16(Int8(UInt8(56))) & 127)) : (((Int64(UInt16(53)) |
    1))))
public var var317: UInt64 = UInt64(Int8(Int8(UInt8(UInt8(22)))))
public var var396: Option<Array<Option<Unit>>> = Option<Array<Option<Unit>>>.None
public var var473: Int64 = Int64(Int8(67))
public let var538: (Float32, Int32, (Range<UInt8>, Unit), Int16, (Rune, Bool, Int8, Float32, Int64), (Rune, Bool, Int8, 
    Float32, Int64)) = (Float32(115.0), Int32(-20), ((((UInt8(22) & 127))..((UInt8(192) & 127)) : (((1 | 1)))), ()),
    Int16(-127), (r'7', ((((UInt8(100) & 127))..((UInt8(78) & 127)) : (((19 | 1)))) is ((Rune, Bool, Int8, Float32, 
                Int64)) -> UInt16), Int8(Int8(UInt8(247))), Float32(Float32(-28.0)), Int64(UInt8(Int8(-104)))), (r'I', ((((32 &
            127))..=((89 & 127)) : ((92 | 1))) is Int64), Int8(-28), Float32(70.0), Int64(UInt32(UInt16(30)))))
public let var584: (Int32, Range<UInt8>, Range<UInt64>, Range<Int64>, Option<Class365>, UInt32) = (Int32(Int16(31)), (((UInt8(186) &
        127))..=((UInt8(15) & 127)) : ((75 | 1))), (((UInt64(206) & 127))..=((UInt64(45) & 127)) : ((43 | 1))), ((((-13) &
        127))..(((-20) & 127)) : (((-98) | 1))), Option<Class365>.None, UInt32(122))
public let var640: ?Range<UInt32> = Option<Range<UInt32>>.None
public var var656: Bool = false
public let var662: Bool = true
public let var888: Interface369 = Class365()
public var var1001: Option<Option<Int32>> = Option<Option<Int32>>.None
public let var1072: Float64 = 76.0
var var1092: ?Float64 = ((((UInt16(254) & 127))..=((UInt16(110) & 127)) : ((((-121) | 1)))) as Float64)
let var1124: Option<Class365> = Option<Class365>.None
public var var1158: Range<Int8> = (((Int8(20) & 127))..((Int8(-5) & 127)) : (((Int64(UInt64(UInt64(98))) | 1))))
public var var1290: Int16 = Int16(UInt16(UInt16(215)))
var var1297: (Range<UInt64>, Range<UInt8>, Int32) = ((((UInt64(127) & 127))..((UInt64(45) & 127)) : (((-29) | 1))), (((UInt8(153) &
        127))..((UInt8(92) & 127)) : (((-11) | 1))), Int32(46))
let var1413: ?Unit = Option<Unit>.None
var var1466: UInt64 = UInt64(Int16(UInt8(UInt8(128))))
public var var1478: Range<Int16> = (((Int16(-122) & 127))..((Int16(-1) & 127)) : (((32 | 1))))
let var1561: (Float32, Int32, Range<Int32>, Unit, (Float32, Int32, (Range<UInt8>, Unit), Int16, (Rune, Bool, Int8, 
    Float32, Int64), (Rune, Bool, Int8, Float32, Int64))) = (Float32(Float32(75.0)), Int32(UInt32(Int32(53))), (((Int32(UInt16(0)) &
        127))..=((Int32(UInt32(UInt32(206))) & 127)) : (((Int64(Int16(100)) | 1)))), (), (Float32(Float32(Float32(101.0))),
        Int32(UInt8(54)), ((((UInt8(231) & 127))..=((UInt8(18) & 127)) : (((-126) | 1))), ()), Int16(-10), (r'O', false,
            Int8(-69), Float32(-122.0), Int64(UInt16(64))), (r'z', false, Int8(-50), Float32(53.0), (-49))))
public var var1623: UInt8 = UInt8(169)
public let var1776: (Range<UInt8>, Unit) = ((((UInt8(234) & 127))..((UInt8(202) & 127)) : (((-73) | 1))), ())
let var1863: ((Unit, UInt16, Int16, Float32, Float32, Int32, Int8, UInt8), Int16, Bool, Int16, (Range<UInt64>, Range<UInt8>, 
    Int32), Unit, (Range<UInt64>, Range<UInt8>, Int32)) = (((), UInt16(Int8(92)), Int16(-110), Float32(Float32(Float32(13.0))),
        Float32(98.0), Int32(-18), Int8(Int8(UInt8(130))), UInt8(Int8(-47))), Int16(UInt16(UInt16(199))), false, Int16(Int16(86)),
    ((((UInt64(91) & 127))..((UInt64(26) & 127)) : ((26 | 1))), (((UInt8(118) & 127))..=((UInt8(105) & 127)) : (((52 | 1)))),
        Int32(UInt16(Int16(73)))), (), ((((UInt64(130) & 127))..((UInt64(25) & 127)) : ((28 | 1))), (((UInt8(Int8(106)) &
            127))..=((UInt8(Int8(35)) & 127)) : (((Int64(Int8(-121)) | 1)))), Int32(38)))
public let var1935: Interface369 = Class365()
let var2075: ?Option<Int32> = (UInt64(Int8(Int8(-18))) as Option<Int32>)
public var var2115: Bool = (118.0 is Unit)
public var var2176: Rune = r'n'
public var var2203: Int32 = Int32(60)
var var2210: Bool = false
public var var2234: UInt8 = UInt8(188)
public let var2240: UInt64 = UInt64(UInt8(126))
public let var2264: Rune = r'6'
public let var2296: Int32 = Int32(-83)
let var2302: Int16 = Int16(-109)
public var var2408: Option<Option<Int32>> = Option<Option<Int32>>.None
public let var2460: Int16 = Int16(Int16(-105))
public let var2482: String = "]VB}_w.tUk"
public let var2519: Aggregate356 = Aggregate356()
public var var2552: Range<Int64> = ((((-53) & 127))..((12 & 127)) : (((-122) | 1)))
public var var2733: UInt8 = UInt8(UInt8(UInt8(Int8(Int8(-91)))))
public let var2778: ??Aggregate356 = Option<Option<Aggregate356>>.None
public var var2783: Option<Bool> = Option<Bool>.None
let var2820: ?Aggregate356 = (Option<Option<Int32>>.None as Aggregate356)
public var var2877: Interface373 = Class365()
public let var2913: Unit = ()
public var var2934: (Rune, Bool, Int8, Float32, Int64) = (r'Z', true, Int8(113), Float32(99.0), (-5))
public var var3000: (UInt64, Unit, Range<UInt32>, (Float32, Int32, Range<Int32>, Unit, (Float32, Int32, (Range<UInt8>, 
    Unit), Int16, (Rune, Bool, Int8, Float32, Int64), (Rune, Bool, Int8, Float32, Int64))), Option<Bool>, Bool, (Float32, 
    Int32, Range<Int32>, Unit, (Float32, Int32, (Range<UInt8>, Unit), Int16, (Rune, Bool, Int8, Float32, Int64), (Rune, 
    Bool, Int8, Float32, Int64))), Int32) = (UInt64(UInt64(48)), (), (((UInt32(Int8(UInt8(76))) & 127))..=((UInt32(216) &
        127)) : (((Int64(UInt8(106)) | 1)))), (Float32(123.0), Int32(UInt32(Int8(-84))), (((Int32(Int8(18)) & 127))..=((Int32(UInt32(169)) &
            127)) : ((((-98) | 1)))), (), (Float32(Float32(-14.0)), Int32(UInt16(191)), ((((UInt8(37) & 127))..((UInt8(128) &
                    127)) : (((93 | 1)))), ()), Int16(Int16(-95)), (r'N', false, Int8(71), Float32(-66.0), (-15)), (r'S',
                false, Int8(33), Float32(-95.0), 9))), Option<Bool>.None, true, (Float32(-67.0), Int32(-78), (((Int32(-126) &
            127))..((Int32(Int32(-62)) & 127)) : (((Int64(UInt16(190)) | 1)))), (), (Float32(Float32(-65.0)), Int32(Int8(-70)),
            ((((UInt8(184) & 127))..((UInt8(179) & 127)) : (((-36) | 1))), ()), Int16(80), (r'5', true, Int8(48),
                Float32(93.0), (-99)), (r'A', true, Int8(108), Float32(49.0), (-90)))), Int32(-15))
public var var3215: Rune = r'z'
public let var3224: UInt32 = UInt32(UInt16(Int16(36)))
public let var3320: Float32 = Float32(Float32(Float32(Float32(-34.0))))
public var var3354: Range<UInt8> = (((UInt8(113) & 127))..=((UInt8(185) & 127)) : (((-119) | 1)))
let var3487: (Option<Interface372>, Range<UInt8>) = (Option<Interface372>.None, (((UInt8(Int8(UInt8(219))) & 127))..=((UInt8(105) &
        127)) : (((Int64(Int32(UInt16(155))) | 1)))))
public var var3570: ??(Float32, Int32, (Range<UInt8>, Unit), Int16, (Rune, Bool, Int8, Float32, Int64), (Rune, Bool, 
    Int8, Float32, Int64)) = Option<Option<(Float32, Int32, (Range<UInt8>, Unit), Int16, (Rune, Bool, Int8, Float32, 
        Int64), (Rune, Bool, Int8, Float32, Int64))>>.None
let var3712: Interface371 = Class365()
public var var3761: Interface372 = Class365()
public let var3904: ?Range<UInt32> = ("""
0${var2482}sy${var2482}D0
i,f${var2482}W5
""" as Range<UInt32>)
var var3939: ?Option<Int32> = Option<Option<Int32>>.None
public let var4093: Option<Option<Int32>> = Option<Option<Int32>>.None
let var4107: Class365 = Class365()
let var4167: Array<Int64> = [90, (-120), 36, (-64), 55, (-36), 49, (-101), (-39), 49]
public var var4174: Int32 = Int32(UInt32(UInt8(65)))
public var var4263: Range<UInt64> = (((UInt64(52) & 127))..((UInt64(160) & 127)) : (((Int64(UInt16(57)) | 1))))
public var var4746: Interface370 = Class365()
var var5406: (Unit, UInt16, Int16, Float32, Float32, Int32, Int8, UInt8) = ((), UInt16(142), Int16(-74), Float32(Float32(-19.0)),
    Float32(20.0), Int32(Int8(-50)), Int8(Int8(UInt8(24))), UInt8(227))
let var5425: Range<UInt64> = (((UInt64(223) & 127))..((UInt64(124) & 127)) : (((-43) | 1)))
public var var5490: UInt8 = UInt8(4)
var var5518: UInt64 = UInt64(162)
public var var5556: Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
public let var5629: Option<Rune> = Option<Rune>.None
var var5640: ?Bool = Option<Bool>.None
public var var5663: Unit = ()
public var var5669: UInt32 = UInt32(72)
public var var5799: Rune = r'P'
public let var5858: Bool = true
public let var5958: UInt16 = UInt16(49)
public let var5988: Bool = true
public let var6007: ?Unit = Option<Unit>.None
let var6157: Int16 = Int16(20)
public let var6178: Option<Int64> = Option<Int64>.None
var var6214: ?UInt8 = ((((UInt64(UInt16(216)) & 127))..=((UInt64(Int16(47)) & 127)) : (((74 | 1)))) as UInt8)
let var6414: Unit = ()
public let var6536: Option<Int32> = Option<Int32>.None
var var6612: Unit = ()
public var var6664: ?Option<Option<Int32>> = Option<Option<Option<Int32>>>.None
let var6720: Bool = (Int8(UInt8(UInt8(Int8(42)))) is (Range<Int64>) -> Bool)
public let var6728: Bool = false
var var6767: UInt32 = UInt32(111)
public let var6824: Array<UInt32> = [UInt32(184), UInt32(21), UInt32(128), UInt32(89), UInt32(168), UInt32(198),
    UInt32(0), UInt32(220), UInt32(3), UInt32(16)]
public let var6851: Range<Int64> = ((((-9) & 127))..=((124 & 127)) : ((121 | 1)))
var var6902: (Float32, Int32, (Range<UInt8>, Unit), Int16, (Rune, Bool, Int8, Float32, Int64), (Rune, Bool, Int8, 
    Float32, Int64)) = (Float32(Float32(Float32(-16.0))), Int32(Int32(110)), ((((UInt8(UInt8(107)) & 127))..=((UInt8(97) &
            127)) : (((Int64(UInt64(246)) | 1)))), ()), Int16(103), (r'i', false, Int8(Int8(UInt8(196))), Float32(Float32(Float32(16.0))),
        Int64(UInt64(202))), (r'd', false, Int8(Int8(47)), Float32(-81.0), Int64(UInt32(UInt8(102)))))
public var var7118: Bool = (Option<Option<(Float32, Int32, (Range<UInt8>, Unit), Int16, (Rune, Bool, Int8, Float32, 
        Int64), (Rune, Bool, Int8, Float32, Int64))>>.None is Option<Option<Unit>>)
public var var7596: Float32 = Float32(Float32(30.0))
public let var7645: (Rune, Bool, Int8, Float32, Int64) = (r'H', true, Int8(35), Float32(-103.0), Int64(Int32(Int32(45))))
public var var7672: ?UInt8 = Option<UInt8>.None

func func158(param159: (Rune, Bool, Int8, Float32, Int64)): UInt16 { // block id: 160
    var var162: UInt16 = UInt16(UInt8(UInt8(Int8(UInt8(2)))));
    var162
}

public struct Aggregate356 {
    public init() { // block id: 358

    }

    static var var361: Float64 = 55.0
}

public interface Interface370 {}

public interface Interface374 {}

public interface Interface373 <: Interface370 & Interface374 {
    static func func607(): Option<Array<Option<Unit>>> { // block id: 608
        var2877 |> func610;
        match (Option<Option<Option<Int32>>>.None) {
            case caseVar6528: Option<Option<Option<Int32>>> =>
                var var6532: Bool = ([94, 30, (-113), (-106), (-61), (-37), (-40), 98, 6, 74] is Interface369);
                if (var6532) {
                    var6536
                } else {
                    var6536
                };
                if (false) {
                    var396
                } else {
                    var396
                }

            case _: Bool =>
                var118;
                UInt8(128);
                let var6550: Array<Option<Unit>> = Array<Option<Unit>>(10) {
                    i => ((((UInt64(Int16(-45)) & 127))..=((UInt64(Int32(-115)) & 127)) : (((Int64(Int8(-43)) | 1)))) as Unit)
                }
                Option<Array<Option<Unit>>>.Some(var6550)

            case _: Option<Option<(Float32, Int32, (Range<UInt8>, Unit), Int16, (Rune, Bool, Int8, Float32, Int64), (Rune, 
                    Bool, Int8, Float32, Int64))>> =>
                ();
                var6612;
                Option<Array<Option<Unit>>>.Some(
                    [Option<Unit>.Some(()), Option<Unit>.None, Option<Unit>.Some(var5663), var1413, Option<Unit>.None,
                        Option<Unit>.None, Option<Unit>.None, Option<Unit>.Some(var5663), var1413, Option<Unit>.Some(())])

            case _: Float32 =>
                if (true) {
                    var396
                } else {
                    Option<Array<Option<Unit>>>.None
                }

            case _ => var396
        }
    }
}

public interface Interface372 <: Interface373 {}

public interface Interface371 <: Interface370 & Interface372 {}

public interface Interface369 <: Interface370 & Interface371 {}

public interface Interface368 <: Interface369 {}

public open class Class365 <: Interface368 {
    public init() { // block id: 367

    }

    public static let var957: Int32 = Int32(-53);
    public init(namedParam897!: Rune, optionalParam898!: Bool = false, namedParam900!: UInt32,
        optionalParam901!: Array<UInt32> = Array<UInt32>(10) {i => UInt32(229)}) { // block id: 922
        var var966: Option<Int32> = Option<Int32>.None;
        try { // block id: 924
            var var938: UInt16 = UInt16(UInt8(44));
            var var949: UInt32 = UInt32(Int16(109));
            match ((-45.0)) {
                case -28.0 | -127.0 =>
                    var118;
                    Class365();
                    var178

                case -81.0 =>
                    (((var938 & 127))..=((UInt16(33) & 127)) : ((((-91) | 1))));
                    var178

                case _ =>
                    ();
                    var949 |= UInt32(65)
                    Float32(-69.0)
            };
            (Option<Int32>.None ?? var957)
        } finally { // block id: 959
            if (false) {
                Class365()
            } else {
                Class365()
            };
            (var966 ?? Int32(88))
        };
        ()
    };

    static var var2889: UInt32 = UInt32(18);
    public init(
        namedParam3121!: (UInt64, Unit, Range<UInt32>, (Float32, Int32, Range<Int32>, Unit, (Float32, Int32, (Range<UInt8>, 
            Unit), Int16, (Rune, Bool, Int8, Float32, Int64), (Rune, Bool, Int8, Float32, Int64))), Option<Bool>, Bool, 
            (Float32, Int32, Range<Int32>, Unit, (Float32, Int32, (Range<UInt8>, Unit), Int16, (Rune, Bool, Int8, 
            Float32, Int64), (Rune, Bool, Int8, Float32, Int64))), Int32), namedParam3122!: Rune,
        namedParam3123!: Range<Int16>,
        optionalParam3124!: Option<Option<Int32>> = Option<Option<Int32>>.Some(Option<Int32>.Some(Int32(Int8(51))))) { // block id: 3129
        var var3132: Array<Bool> = [(UInt64(47) is Option<Option<Int32>>), false, false,
            (UInt8(177) is Option<Option<Int32>>), true, false, true,
            (Option<Interface372>.Some(
            Class365(namedParam897: r'n', namedParam900: UInt32(108),
                optionalParam901: [UInt32(248), UInt32(22), UInt32(117), UInt32(117), UInt32(23), UInt32(248),
                    UInt32(115), UInt32(222), UInt32(47), UInt32(200)])) is Class365), (UInt8(254) is Option<Int32>),
            true];
        match (var3132) {
            case _: Array<Bool> => var173 = var173

            case _ => var118

            case _: Bool =>
                ();
                ()

            case _: Option<Option<Aggregate356>> =>
                ();
                var118

            case _ =>
                var640;
                Int32(54);
                var2913
        }
    };

    public static let var3506: Option<Interface372> = Option<Interface372>.None;
    public init(
        optionalParam3366!: Range<UInt32> = (((UInt32(136) & 127))..=((UInt32(UInt32(122)) & 127)) : (((Int64(UInt32(160)) |
            1)))), namedParam3373!: (Range<UInt64>, Range<UInt8>, Int32), namedParam3374!: Option<Unit>) { // block id: 3375
        var loopTimeVar3482: Int64 = 0;
        while ((((Option<Range<Int64>>.None ?? (((120 & 127))..(((-16) & 127)) : ((62 | 1)))) |> func3378)) &&
                loopTimeVar3482 < 100) {
            loopTimeVar3482++;
        };
        match (try { // block id: 3485
            var3487
        } finally { // block id: 3498
            var473 *= (-71)
            var173--;
            (var3506, (((UInt8(159) & 127))..((var2733 & 127)) : (((125 | 1)))))
        }) {
            case _ =>
                ();
                var118;
                let var3517: UInt16 = UInt16(Int8(UInt8(216)));
                var3517
        }
    };

    public init(param2893: Interface373,
        param2894: ((Float32, Int32, (Range<UInt8>, Unit), Int16, (Rune, Bool, Int8, Float32, Int64), (Rune, Bool, Int8, 
            Float32, Int64)), Option<Range<UInt32>>)) { // block id: 2895
        ();
        var var4290: (Range<UInt8>) -> (UInt64, Unit, Range<UInt32>, (Float32, Int32, Range<Int32>, Unit, (Float32, 
            Int32, (Range<UInt8>, Unit), Int16, (Rune, Bool, Int8, Float32, Int64), (Rune, Bool, Int8, Float32, Int64))), 
            Option<Bool>, Bool, (Float32, Int32, Range<Int32>, Unit, (Float32, Int32, (Range<UInt8>, Unit), Int16, (Rune, 
            Bool, Int8, Float32, Int64), (Rune, Bool, Int8, Float32, Int64))), Int32) = func2942;
        if (func1486(optionalParam1487: try { // block id: 2900
            (var178, var2203, (((Int32(22) & 127))..((Int32(8) & 127)) : (((-93) | 1))), var118, var538)
        } finally { // block id: 2907
            (var178, Int32(116), (((Int32(-60) & 127))..((Int32(119) & 127)) : ((1 | 1))), var2913, var538)
        },
            optionalParam1527: (Option<(Float32, Int32, (Range<UInt8>, Unit), Int16, (Rune, Bool, Int8, Float32, Int64), 
                    (Rune, Bool, Int8, Float32, Int64))>.None ?? (Float32(-124.0), var957, var1776, Int16(-95), (r'w',
                    var2210, var173, Float32(3.0), var473), var2934)), namedParam1555: (var3354 |> var4290))) { // block id: 4293

        }
    };

    public init(param2841: Float64, optionalParam2842!: UInt16 = UInt16(Int16(UInt16(156))),
        namedParam2846!: Interface370, optionalParam2847!: String = "oY\"]C\"?NJL") { // block id: 2849
        var var4704: UInt32 = UInt32(198);
        match (if (match (Option<Bool>.None) {
            case _ => false

            case _ =>
                (-113.0);
                var118;
                true

            case caseVar2866: Int16 =>
                var1776;
                true

            case _: Interface369 =>
                let var4303: Int32 = Int32(UInt8(Int8(Int8(-38))));
                var var4320: Array<Interface373> = [Class365(
                    Class365(optionalParam3366: (((UInt32(156) & 127))..((UInt32(17) & 127)) : ((((-42) | 1)))),
                        namedParam3373: ((((UInt64(102) & 127))..=((UInt64(120) & 127)) : (((-84) | 1))), (((UInt8(24) &
                                127))..=((UInt8(175) & 127)) : ((((-96) | 1)))), Int32(-111)),
                        namedParam3374: Option<Unit>.None),
                    ((Float32(122.0), Int32(-60), ((((UInt8(61) & 127))..=((UInt8(60) & 127)) : ((((-31) | 1)))), ()),
                            Int16(100), (r'H', false, Int8(-37), Float32(36.0), (-50)), (r'Z', false, Int8(-116),
                                Float32(-17.0), (-10))), (Option<(Range<UInt8>, Unit)>.None as Range<UInt32>))),
                    Class365(),
                    Class365(
                    namedParam3121: (UInt64(118), (), (((UInt32(128) & 127))..=((UInt32(132) & 127)) : ((((-37) | 1)))),
                        (Float32(98.0), Int32(55), (((Int32(-99) & 127))..=((Int32(57) & 127)) : (((26 | 1)))), (), (Float32(118.0),
                                Int32(-32), ((((UInt8(152) & 127))..((UInt8(75) & 127)) : (((-106) | 1))), ()), Int16(21),
                                (r'I', false, Int8(-32), Float32(-111.0), (-99)), (r'Y', true, Int8(121), Float32(-3.0),
                                    (-109)))), Option<Bool>.Some(true), ((((UInt16(253) & 127))..=((UInt16(247) & 127)) : (((87 |
                            1)))) is UInt8), (Float32(-2.0), Int32(-31), (((Int32(1) & 127))..=((Int32(104) & 127)) : (((-12) |
                                1))), (), (Float32(-125.0), Int32(60), ((((UInt8(223) & 127))..=((UInt8(210) & 127)) : ((105 |
                                        1))), ()), Int16(43), (r'U', true, Int8(-15), Float32(-66.0), (-66)), (r'D',
                                    false, Int8(-117), Float32(-49.0), (-125)))), Int32(-17)), namedParam3122: r'f',
                    namedParam3123: (((Int16(-85) & 127))..=((Int16(106) & 127)) : ((108 | 1)))),
                    Class365(optionalParam3366: (((UInt32(104) & 127))..=((UInt32(56) & 127)) : (((-14) | 1))),
                    namedParam3373: ((((UInt64(173) & 127))..=((UInt64(47) & 127)) : ((31 | 1))), (((UInt8(166) & 127))..((UInt8(86) &
                            127)) : ((((-108) | 1)))), Int32(-52)), namedParam3374: Option<Unit>.None),
                    Class365(namedParam897: r'n', optionalParam898: true, namedParam900: UInt32(UInt32(Int16(64))),
                    optionalParam901: [UInt32(61), UInt32(95), UInt32(135), UInt32(128), UInt32(204), UInt32(61),
                        UInt32(88), UInt32(249), UInt32(208), UInt32(97)]),
                    Class365(
                    namedParam3373: ((((UInt64(240) & 127))..((UInt64(213) & 127)) : ((28 | 1))), (((UInt8(151) & 127))..((UInt8(15) &
                            127)) : (((91 | 1)))), Int32(-51)),
                    namedParam3374: (((((Int32(120) & 127))..((Int32(-116) & 127)) : ((((-46) | 1)))) as Option<Int32>) as Unit)),
                    Class365(
                    namedParam3373: ((((UInt64(249) & 127))..((UInt64(215) & 127)) : ((101 | 1))), (((UInt8(211) & 127))..=((UInt8(200) &
                            127)) : ((82 | 1))), Int32(-52)),
                    namedParam3374: ((((), UInt16(194), Int16(-111), Float32(-49.0), Float32(87.0), Int32(94), Int8(37),
                            UInt8(52)), Int16(-84), false, Int16(30), ((((UInt64(241) & 127))..((UInt64(20) & 127)) : (((123 |
                                1)))), (((UInt8(67) & 127))..=((UInt8(101) & 127)) : (((-59) | 1))), Int32(-27)), (), ((((UInt64(69) &
                                127))..((UInt64(148) & 127)) : ((41 | 1))), (((UInt8(231) & 127))..=((UInt8(200) & 127)) : (((-97) |
                                1))), Int32(-62))) as Unit)),
                    Class365(
                    namedParam3121: (UInt64(UInt64(137)), (), (((UInt32(100) & 127))..=((UInt32(162) & 127)) : (((95 | 1)))),
                        (Float32(-84.0), Int32(84), (((Int32(-79) & 127))..=((Int32(89) & 127)) : ((21 | 1))), (), (Float32(36.0),
                                Int32(-78), ((((UInt8(5) & 127))..((UInt8(158) & 127)) : ((68 | 1))), ()), Int16(56), (r'I',
                                    false, Int8(-127), Float32(32.0), (-80)), (r'P', true, Int8(75), Float32(-70.0), (-76)))),
                        Option<Bool>.Some(true), ([(-72), 16, 92, (-33), (-110), 65, 35, 35, 27, 31] is Array<Bool>), (Float32(-75.0),
                            Int32(1), (((Int32(126) & 127))..((Int32(-29) & 127)) : ((((-45) | 1)))), (), (Float32(89.0),
                                Int32(-64), ((((UInt8(186) & 127))..((UInt8(104) & 127)) : ((53 | 1))), ()), Int16(65), (r'1',
                                    true, Int8(112), Float32(-36.0), (-28)), (r'5', false, Int8(25), Float32(114.0), (-119)))),
                        Int32(-110)), namedParam3122: r'4',
                    namedParam3123: (((Int16(-19) & 127))..((Int16(UInt16(112)) & 127)) : (((Int64(Int8(33)) | 1))))),
                    Class365(),
                    Class365(
                    namedParam3121: (UInt64(178), (), (((UInt32(119) & 127))..((UInt32(65) & 127)) : (((105 | 1)))), (Float32(113.0),
                            Int32(-13), (((Int32(-99) & 127))..=((Int32(-73) & 127)) : (((32 | 1)))), (), (Float32(97.0),
                                Int32(-3), ((((UInt8(3) & 127))..=((UInt8(179) & 127)) : (((118 | 1)))), ()), Int16(-56),
                                (r'f', true, Int8(-36), Float32(-83.0), 35), (r's', false, Int8(-117), Float32(11.0), 124))),
                        Option<Bool>.None, (((Float32(-114.0), Int32(-91), ((((UInt8(214) & 127))..((UInt8(171) & 127)) : (((-3) |
                                        1))), ()), Int16(20), (r'K', true, Int8(51), Float32(-16.0), 105), (r'8', false,
                                    Int8(-108), Float32(50.0), 58)), Option<Range<UInt32>>.None) is Range<UInt64>), (Float32(0.0),
                            Int32(-10), (((Int32(29) & 127))..((Int32(122) & 127)) : (((50 | 1)))), (), (Float32(-31.0),
                                Int32(-52), ((((UInt8(184) & 127))..((UInt8(142) & 127)) : ((79 | 1))), ()), Int16(-77),
                                (r'R', true, Int8(-111), Float32(-115.0), 37), (r'T', false, Int8(-76), Float32(-117.0),
                                    77))), Int32(UInt8(105))), namedParam3122: r'Z',
                    namedParam3123: (((Int16(UInt8(39)) & 127))..((Int16(-107) & 127)) : ((((-90) | 1)))),
                    optionalParam3124: Option<Option<Int32>>.None)];
                if (var2115) {
                    [var2877, var2877, var2877, Class365(), var2877, var2877, var2877,
                        Class365(namedParam897: var2176, optionalParam898: var656, namedParam900: var2889),
                        Class365(
                        Class365(optionalParam3366: (((var3224 & 127))..((UInt32(188) & 127)) : (((var473 | 1)))),
                            namedParam3373: ((((UInt64(134) & 127))..=((UInt64(82) & 127)) : ((109 | 1))), (((UInt8(85) &
                                    127))..=((UInt8(198) & 127)) : (((-1) | 1))), var4303), namedParam3374: var1413),
                        (var538, var3904)),
                        Class365(namedParam3121: var3000, namedParam3122: r'T',
                        namedParam3123: (((Int16(100) & 127))..((Int16(108) & 127)) : (((56 | 1)))))]
                } else {
                    var4320
                };
                ();
                param2841 >= param2841

            case _ =>
                var2913;
                var2115
        }) {
            (if (var2210) {
                (((UInt8(202) & 127))..((UInt8(222) & 127)) : ((33 | 1)))
            } else {
                var3354
            })
        } else {
            (Option<Range<UInt8>>.Some(var3354) ?? (((UInt8(244) & 127))..((UInt8(156) & 127)) : (((var473 | 1)))))
        }) {
            case _ =>
                let var4714: Array<UInt32> = [UInt32(142), UInt32(UInt32(Int8(UInt8(198)))), UInt32(Int32(UInt32(252))),
                    UInt32(UInt8(Int8(Int8(52)))), UInt32(UInt8(183)), UInt32(Int16(-67)), UInt32(Int8(41)), UInt32(170),
                    UInt32(UInt16(UInt8(UInt8(168)))), UInt32(UInt16(164))];
                if (false) {
                    [UInt32(150), UInt32(214), var4704, var3224, var3224, UInt32(35), UInt32(97), UInt32(34), var3224,
                        UInt32(236)]
                } else {
                    var4714
                };
                var888
        };
        ()
    };

    static var var4824: UInt32 = UInt32(112);
    public init(namedParam2378!: Float64, namedParam2379!: Option<Option<Int32>>,
        optionalParam2380!: Float32 = Float32(114.0),
        optionalParam2382!: Range<Int8> = (((Int8(-19) & 127))..((Int8(56) & 127)) : (((103 | 1))))) { // block id: 2387
        let var4762: (Interface371) -> Aggregate356 = func2389;
        if (try { // block id: 4766
            true
        } finally { // block id: 4768
            var2210
        }) {
            var3712
        } else {
            match (UInt64(49)) {
                case _: Option<Int64> =>
                    Option<UInt8>.None;
                    var2203 &= Int32(111)
                    Class365(namedParam897: r'4', optionalParam898: false, namedParam900: var3224,
                        optionalParam901: [var2889, UInt32(16), var3224, UInt32(175), UInt32(71), var3224, var3224,
                            UInt32(251), var3224, var3224])

                case caseVar4797 =>
                    (Option<Interface372>.Some(var3761), var3354);
                    Class365()

                case 100 | 126 | 225 => Class365()

                case _: UInt8 =>
                    if (true) {
                        Class365(namedParam897: r'w', namedParam900: UInt32(175),
                            optionalParam901: [var3224, var2889, var2889, var3224, var3224, var4824, UInt32(218),
                                UInt32(165), var2889, UInt32(8)])
                    } else {
                        var3712
                    }

                case _ =>
                    if (var2210) {
                        var3712
                    } else {
                        Class365()
                    }
            }
        } |> var4762;
        ()
    };

    public static let var6669: ?Unit = Option<Unit>.None;
    public init(param603: Option<Int32>) { // block id: 604
        (func607() ?? [if (var5858) {
            Option<Unit>.Some(var2913)
        } else {
            Option<Unit>.None
        }, if (var5988) {
            Option<Unit>.None
        } else {
            Option<Unit>.None
        }, (Option<Option<Aggregate356>>.Some(var2820) as Unit), var1413, if (var5858) {
            Option<Unit>.Some(())
        } else {
            var1413
        }, var1413, try { // block id: 6661
            (((Int8(-68) & 127))..=((Int8(40) & 127)) : ((70 | 1)));
            var6664;
            Option<Unit>.None
        } catch (_) { // block id: 6667
            var6669
        }, Option<Unit>.None, (Option<Option<Unit>>.None ?? var6669), (Option<Float64>.None as Unit)])
    };

    public let var6700: Bool = false
}

public func func2942(): Option<Range<UInt32>> { // block id: 648
    let var682: (Unit, UInt16, Int16, Float32, Float32, Int32, Int8, UInt8) = ((), UInt16(Int16(90)), Int16(18), Float32(52.0),
        Float32(Float32(Float32(66.0))), Int32(-10), Int8(Int8(UInt8(UInt8(64)))), UInt8(UInt8(UInt8(230))));
    var loopTimeVar704: Int64 = 0;
    while ((if (false) { // block id: 652
            var118;
            var118;
            var656
        } else if ([var662, true, var662, false, false, var662, var662, false, true, var662][0]) { // block id: 674
            var118;
            Option<Class365>.None;
            var662
        } else { // block id: 678
            if (var656) {
                var682
            } else {
                var682
            };
            var662
        }) && loopTimeVar704 < 100) {
        loopTimeVar704++;
    };
    var var707: Float64 = (-79.0);
    let var979: Interface371 = Class365();
    func func711(param712: Unit, param713: Option<Option<Int32>>): Float64 { // block id: 714
        let var720: (UInt64, Unit, Range<UInt32>, (Float32, Int32, Range<Int32>, Unit, (Float32, Int32, (Range<UInt8>, 
            Unit), Int16, (Rune, Bool, Int8, Float32, Int64), (Rune, Bool, Int8, Float32, Int64))), Option<Bool>, Bool, 
            (Float32, Int32, Range<Int32>, Unit, (Float32, Int32, (Range<UInt8>, Unit), Int16, (Rune, Bool, Int8, 
            Float32, Int64), (Rune, Bool, Int8, Float32, Int64))), Int32) = (UInt64(UInt16(Int8(Int8(-66)))), (), (((UInt32(22) &
                127))..((UInt32(UInt8(147)) & 127)) : ((((-69) | 1)))), (Float32(Float32(79.0)), Int32(Int16(Int16(60))),
                (((Int32(Int8(-43)) & 127))..((Int32(Int8(-62)) & 127)) : (((56 | 1)))), (), (Float32(Float32(-54.0)),
                    Int32(93), ((((UInt8(231) & 127))..=((UInt8(58) & 127)) : ((62 | 1))), ()), Int16(UInt8(62)), (r's',
                        true, Int8(3), Float32(-111.0), (-103)), (r'Y', false, Int8(1), Float32(-119.0), (-14)))), Option<Bool>
                .None, (Float32(Float32(Float32(46.0))) is Unit), (Float32(Float32(Float32(-67.0))), Int32(-67), (((Int32(69) &
                    127))..=((Int32(UInt32(217)) & 127)) : (((Int64(UInt64(107)) | 1)))), (), (Float32(-23.0), Int32(23),
                    ((((UInt8(189) & 127))..((UInt8(238) & 127)) : (((1 | 1)))), ()), Int16(UInt8(14)), (r'O', true,
                        Int8(96), Float32(5.0), (-107)), (r'X', true, Int8(115), Float32(58.0), (-71)))), Int32(8));
        var var822: Float32 = Float32(125.0);
        var var829: Option<Bool> = Option<Bool>.None;
        var var843: Int32 = Int32(100);
        var var859: (Rune, Bool, Int8, Float32, Int64) = (r'P', false, Int8(-32), Float32(Float32(Float32(Float32(42.0)))),
            Int64(Int16(UInt16(60))));
        var var883: UInt16 = UInt16(212);
        var var993: Int64 = 82;
        match (match (var720[4]) {
            case _ =>
                let var816: UInt32 = UInt32(178);
                let var846: (Range<UInt8>, Unit) = ((((UInt8(UInt8(Int8(83))) & 127))..=((UInt8(Int8(29)) & 127)) : (((Int64(UInt32(38)) |
                        1)))), ());
                (UInt64(31), (), (((var816 & 127))..((UInt32(128) & 127)) : (((var473 | 1)))), (var822, Int32(101), (((Int32(-9) &
                            127))..=((Int32(7) & 127)) : (((-104) | 1))), var118, var538), var829, var656, (var178,
                        Int32(58), (((Int32(60) & 127))..((Int32(-33) & 127)) : ((((-83) | 1)))), (), (Float32(66.0),
                            var843, var846, Int16(-94), var859, var859)), Int32(-105));
                ();
                var var875: Interface369 = Class365();
                var875

            case caseVar879: Int16 =>
                var118;
                var888

            case _ =>
                var var971: Rune = r'a';
                if (true) {
                    Class365()
                } else {
                    Class365(namedParam897: var971, optionalParam898: var662, namedParam900: UInt32(208))
                }
        }) {
            case _: Int64 =>
                var979;
                ();
                91.0

            case _: Interface369 =>
                ();
                var118;
                95.0

            case _ =>
                var993 |= (-90)
                var var997: Float64 = (-115.0);
                var997
        }
    };

    var707 = func711(var118, var1001) / Float64((Int32(Float64(Float32(40.0)))) | 1)
    try { // block id: 1008
        var178 / Float32((Int32(Float32(91.0))) | 1);
        (var538, Option<Range<UInt32>>.None)
    } catch (e: Exception) { // block id: 1015
        (var538, var640)
    }[1]
}

func func643(param644: Option<Int32>): Option<Range<UInt32>> { // block id: 645
    func2942()
}

public func func1486(
    optionalParam1487!: (Float32, Int32, Range<Int32>, Unit, (Float32, Int32, (Range<UInt8>, Unit), Int16, (Rune, Bool, 
        Int8, Float32, Int64), (Rune, Bool, Int8, Float32, Int64))) = (Float32(74.0), Int32(Int16(-114)), (((Int32(46) &
            127))..=((Int32(-95) & 127)) : ((((-56) | 1)))), (), (Float32(Float32(Float32(54.0))), Int32(Int32(UInt16(174))),
            ((((UInt8(150) & 127))..((UInt8(60) & 127)) : (((43 | 1)))), ()), Int16(-76), (r'Y', false, Int8(UInt8(251)),
                Float32(-109.0), Int64(Int32(-76))), (r'k', (60.0 is Array<Unit>), Int8(27), Float32(Float32(59.0)), (-35)))),
    optionalParam1527!: (Float32, Int32, (Range<UInt8>, Unit), Int16, (Rune, Bool, Int8, Float32, Int64), (Rune, Bool, 
        Int8, Float32, Int64)) = (Float32(Float32(-92.0)), Int32(UInt16(175)), ((((UInt8(119) & 127))..((UInt8(204) & 127)) : ((95 |
                1))), ()), Int16(63), (r'Z', true, Int8(-105), Float32(106.0), (-75)), (r's', true, Int8(Int8(Int8(53))),
            Float32(Float32(Float32(-14.0))), Int64(UInt16(UInt16(23))))),
    namedParam1555!: (UInt64, Unit, Range<UInt32>, (Float32, Int32, Range<Int32>, Unit, (Float32, Int32, (Range<UInt8>, 
        Unit), Int16, (Rune, Bool, Int8, Float32, Int64), (Rune, Bool, Int8, Float32, Int64))), Option<Bool>, Bool, (Float32, 
        Int32, Range<Int32>, Unit, (Float32, Int32, (Range<UInt8>, Unit), Int16, (Rune, Bool, Int8, Float32, Int64), (Rune, 
        Bool, Int8, Float32, Int64))), Int32),
    optionalParam1556!: Array<UInt32> = [UInt32(188), UInt32(132), UInt32(96), UInt32(72), UInt32(227), UInt32(64),
        UInt32(249), UInt32(228), UInt32(161), UInt32(109)]): Bool { // block id: 1558
    true
}

public func func1392(param1393: Option<Interface372>, param1394: Float32): Unit { // block id: 1395
    ();
    let var1404: Option<Option<Int32>> = Option<Option<Int32>>.None;
    var var1423: Int32 = Int32(Int16(31));
    var var1429: Option<Bool> = Option<Bool>.None;
    ((var1404 ?? try { // block id: 1407
        var118;
        Option<Int32>.Some(Int32(-71))
    } catch (e: Exception) { // block id: 1411
        var1413;
        Option<Int32>.Some(Int32(-17))
    } finally { // block id: 1417
        if (true) {
            Option<Int32>.None
        } else {
            Option<Int32>.Some(var1423)
        }
    }) ?? if ((var1429 ?? var656)) { // block id: 1432
        let var1443: ?Unit = Option<Unit>.None;
        [var1413, var1413, var1413, Option<Unit>.None, Option<Unit>.None, var1413, var1413, Option<Unit>.None, var1443,
            var1443];
        ();
        Int32(-103)
    } else if ((var1429 ?? var656)) { // block id: 1451
        var1423
    } else { // block id: 1453
        var var1457: Array<Bool> = [true, true, true, false, false, true, false, true, true, true];
        if (false) {
            var1457
        } else {
            var1457
        };
        var656 ||= var662
        var1423
    });
    let var1474: Rune = r'x';
    var1466 >>= ((if ((var1474 is Float32)) { // block id: 1476
        var1478;
        Class365();
        var1466
    } else if (func1486(optionalParam1487: var1561, optionalParam1527: var538,
        namedParam1555: (UInt64(181), var118, (((UInt32(223) & 127))..=((UInt32(85) & 127)) : ((80 | 1))), var1561,
            var1429, false, (Float32(18.0), var1423, (((Int32(69) & 127))..=((var1423 & 127)) : (((85 | 1)))), (), var538),
            var1423))) { // block id: 1618
        UInt64(229)
    } else { // block id: 1620
        var1623 >>= ((var1623) & 7)
        var1466
    }) & 7)
}

public func func1838(param1839: Range<UInt8>): Unit { // block id: 1840
    if ([true, true, false, var656, false, var662, var662, var656, var656, var656][5]) { // block id: 1855
        var178;
        var loopTimeVar1909: Int64 = 0;
        while ((var662) && loopTimeVar1909 < 100) {
            loopTimeVar1909++;
            if (var656) {
                var1863
            } else {
                var1863
            };
            var118
        }
    } else if (try { // block id: 1911
        var118;
        var1466 == var317
    } catch (e: Exception) { // block id: 1916
        var var1919: UInt16 = UInt16(234);
        (((var1919 & 127))..((UInt16(144) & 127)) : ((((-91) | 1))));
        ();
        var656
    }) { // block id: 1925
        ();
        var loopTimeVar1938: Int64 = 0;
        while ((var662) && loopTimeVar1938 < 100) {
            loopTimeVar1938++;
            ();
            if (true) {
                Class365()
            } else {
                var1935
            }
        }
    };
    var118;
    var var1963: UInt32 = UInt32(65);
    var loopTimeVar1990: Int64 = 0;
    while ((try { // block id: 1942
            let var1944: Range<UInt64> = (((UInt64(UInt32(110)) & 127))..=((UInt64(UInt32(40)) & 127)) : (((Int64(Int64(UInt32(159))) |
                1))));
            var1944;
            var var1954: Option<Interface372> = Option<Interface372>.Some(Class365());
            var1954;
            var1290 > var1290
        } catch (_) { // block id: 1960
            var1963++;
            let var1968: Range<UInt32> = (((UInt32(Int16(Int8(Int8(91)))) & 127))..((UInt32(UInt16(89)) & 127)) : ((((-99) |
                1))));
            if (var662) {
                var1968
            } else {
                (((var1963 & 127))..((var1963 & 127)) : (((121 | 1))))
            };
            true
        } finally { // block id: 1982
            var118;
            var662
        }) && loopTimeVar1990 < 100) {
        loopTimeVar1990++;
        func1392(Option<Interface372>.None, var178)
    }
}

public func func2749(param2750: Array<Interface373>): Aggregate356 { // block id: 2751
    (((UInt32(44) & 127))..=((UInt32(138) & 127)) : ((96 | 1)));
    ((try { // block id: 2764
        var118;
        Option<Option<Aggregate356>>.None
    } finally { // block id: 2767
        ();
        var1466 |= var317
        if (true) {
            Option<Option<Aggregate356>>.Some(Option<Aggregate356>.Some(Aggregate356()))
        } else {
            var2778
        }
    } ?? try { // block id: 2781
        var2783;
        let var2788: ?Aggregate356 = ([Option<Int32>.None, Option<Int32>.None, Option<Int32>.Some(Int32(62)),
            Option<Int32>.Some(Int32(-110)), Option<Int32>.None, Option<Int32>.Some(Int32(99)), Option<Int32>.None,
            Option<Int32>.Some(Int32(-57)), Option<Int32>.None, Option<Int32>.Some(Int32(Int32(123)))] as Aggregate356);
        if (var2115) {
            var2788
        } else {
            var2788
        }
    } catch (e: Exception) { // block id: 2808
        let var2812: ?Aggregate356 = Option<Aggregate356>.None;
        if (false) {
            var2812
        } else {
            Option<Aggregate356>.None
        }
    } finally { // block id: 2815
        Int16(59) * var2460;
        var2820
    }) ?? Aggregate356())
}

func func3398(): UInt8 { // block id: 3399
    var118;
    UInt8(124)
}

func func3391(param3392: Interface373, param3393: Unit, param3394: Option<Interface372>): UInt8 { // block id: 3395
    func3398() ^ match ([(var3215, true, var173, Float32(91.0), 74), var2934, var2934, var2934, var2934,
        (r'1', true, Int8(-33), Float32(75.0), var473), var2934, var2934, var2934,
        (r'x', var2115, var173, Float32(-6.0), var473)][9]) {
        case _ => var2234 | var2733
    }
}

func func3378(param3379: Range<Int64>): Bool { // block id: 3380
    let var3383: (Range<UInt8>) -> Unit = {lambdaParameter3386: Range<UInt8> => ()};
    var var3447: ?UInt8 = ((((UInt64(48) & 127))..((UInt64(181) & 127)) : ((50 | 1))) as UInt8);
    let var3454: Array<Int64> = [(-22), 93, (-70), 77, (-47), 52, (-29), (-12), (-38), 18];
    (((func3391(var2877, (), Option<Interface372>.Some(Class365())) & 127))..=(((var3447 ?? var1623) & 127)) : (((var3454[6] |
        1)))) |> var3383;
    var loopTimeVar3470: Int64 = 0;
    do {
        loopTimeVar3470++;
        Int16(103);
        (Option<Range<UInt16>>.Some(var290) ?? (((UInt16(221) & 127))..=((UInt16(127) & 127)) : ((121 | 1))))
    } while ((false) && loopTimeVar3470 < 100);
    true
}

func func3337(param3338: UInt16): Bool { // block id: 3339
    var var3351: Option<Interface372> = Option<Interface372>.None;
    var var3530: Unit = ();
    let var3543: (Option<Interface372>, Range<UInt8>) = (Option<Interface372>.None, (((UInt8(16) & 127))..((UInt8(205) &
            127)) : (((-39) | 1))));
    (match (Class365(namedParam897: r'M', namedParam900: var3224,
        optionalParam901: [UInt32(15), UInt32(41), UInt32(231), UInt32(53), UInt32(0), UInt32(226), UInt32(40),
            UInt32(186), UInt32(239), UInt32(124)])) {
        case _: Option<Float64> => (var3351, var3354)

        case _: Option<Class365> =>
            var2115;
            if (false) {
                (Option<Interface372>.Some(
                        Class365(
                            namedParam3373: ((((UInt64(8) & 127))..((UInt64(31) & 127)) : ((59 | 1))), (((UInt8(247) &
                                    127))..=((var1623 & 127)) : ((((-96) | 1)))), Int32(-30)),
                            namedParam3374: Option<Unit>.Some(var3530))), (((var2234 & 127))..((UInt8(147) & 127)) : (((100 |
                        1)))))
            } else {
                (Option<Interface372>.None, var3354)
            }

        case _ =>
            Option<Unit>.None;
            var3543
    } as Option<Aggregate356>);
    if (if ((var2783 ?? var656)) { // block id: 3552
        var662 && var2115
    } else if (false) { // block id: 3557
        false
    } else { // block id: 3559
        Float32(-12.0) > Float32(78.0)
    }) { // block id: 3563
        (var3570 ?? Option<(Float32, Int32, (Range<UInt8>, Unit), Int16, (Rune, Bool, Int8, Float32, Int64), (Rune, Bool, 
                Int8, Float32, Int64))>.None);
        var loopTimeVar3577: Int64 = 0;
        do {
            loopTimeVar3577++;
        } while ((var656) && loopTimeVar3577 < 100);
        var2115
    } else { // block id: 3579
        if (var2210) { // block id: 3582
            var118;
            var662
        } else { // block id: 3585
            true
        }
    }
}

public func func3240(param3241: Aggregate356): (Range<UInt8>, Unit) { // block id: 3242
    try { // block id: 3244
        var473;
        var var3260: Bool = (Aggregate356() is (Range<UInt8>, Unit));
        var var3275: Int64 = Int64(UInt64(249));
        match (var2783) {
            case _: Int64 =>
                ();
                var2783;
                var2913

            case caseVar3256: Array<Bool> => var3260 ||= var2115

            case _ =>
                (((Int32(-97) & 127))..=((var2203 & 127)) : ((((-28) | 1))));
                let var3271: Unit = ();
                var3271;
                var3275 %= (((-33)) | 1)
        }
    } finally { // block id: 3279
        var loopTimeVar3289: Int64 = 0;
        do {
            loopTimeVar3289++;
            if (false) {
                Option<Array<Option<Unit>>>.None
            } else {
                Option<Array<Option<Unit>>>.None
            };
            var118
        } while ((false) && loopTimeVar3289 < 100);
        let var3292: Option<Interface372> = Option<Interface372>.Some(
            Class365(namedParam897: r'A', namedParam900: UInt32(78),
                optionalParam901: [UInt32(Int8(74)), UInt32(66), UInt32(134), UInt32(UInt32(198)), UInt32(200),
                    UInt32(135), UInt32(UInt32(114)), UInt32(Int32(24)), UInt32(UInt16(252)), UInt32(Int16(40))]));
        func1392(var3292, Float32(-111.0));
        let var3326: Float32 = Float32(Float32(-107.0));
        var loopTimeVar3333: Int64 = 0;
        do {
            loopTimeVar3333++;
            var3320 / Float32((Int32(var3326)) | 1);
            var473 >>= (((-11)) & 7)
        } while ((true) && loopTimeVar3333 < 100)
    };
    let var3588: (UInt16) -> Bool = func3337;
    var var3631: Bool = true;
    var var3694: UInt32 = UInt32(UInt8(UInt8(Int8(1))));
    if (if ((UInt16(2) |> var3588)) { // block id: 3591
        false && var656
    } else { // block id: 3595
        ();
        true
    }) { // block id: 3598
        match ([(), var2913, (), var118, var118, var118, var118, (), var118, ()]) {
            case _ =>
                ();
                var var3617: UInt16 = UInt16(17);
                var3617 /= ((var3617) | 1)
                if (false) {
                    var1776
                } else {
                    var1776
                }

            case _: Array<UInt32> =>
                ();
                var3320;
                if (var3631) {
                    (var3354, ())
                } else {
                    var1776
                }

            case _ => ((((UInt8(121) & 127))..=((UInt8(30) & 127)) : ((49 | 1))), var2913)

            case caseVar3645 =>
                var var3654: Range<UInt8> = (((UInt8(Int8(Int8(UInt8(164)))) & 127))..=((UInt8(UInt8(UInt8(112))) & 127)) : (((Int64(UInt8(59)) |
                    1))));
                if (false) {
                    ((((UInt8(203) & 127))..((UInt8(185) & 127)) : (((-108) | 1))), var2913)
                } else {
                    (var3654, var2913)
                }

            case _ => var1776
        }
    } else if ((if (var2210) {
        Option<Bool>.None
    } else {
        Option<Bool>.Some(var2210)
    } ?? if (var656) { // block id: 3681
        var118;
        var2203 > Int32(106)
    } else { // block id: 3686
        false
    })) { // block id: 3688
        var118;
        try { // block id: 3691
            var3694 *= var3224
            ((((UInt8(79) & 127))..((UInt8(38) & 127)) : (((-94) | 1))), var2913)
        } finally { // block id: 3703
            if (var3631) {
                Class365(namedParam897: r'A', optionalParam898: true, namedParam900: var3224,
                    optionalParam901: [UInt32(99), UInt32(7), UInt32(140), UInt32(67), UInt32(64), UInt32(79),
                        UInt32(163), UInt32(160), UInt32(32), UInt32(82)])
            } else {
                var3712
            };
            Int16(14) - Int16(15);
            if (true) {
                ((((UInt8(141) & 127))..=((UInt8(93) & 127)) : ((43 | 1))), var118)
            } else {
                var1776
            }
        }
    } else { // block id: 3723
        let var3726: Range<UInt8> = (((UInt8(UInt8(146)) & 127))..=((UInt8(150) & 127)) : (((35 | 1))));
        (var3726, var2913)
    }
}

func func3113(
    param3114: Option<(Float32, Int32, (Range<UInt8>, Unit), Int16, (Rune, Bool, Int8, Float32, Int64), (Rune, Bool, 
        Int8, Float32, Int64))>): Range<Int64> { // block id: 3115
    func func3237(): Array<Option<Int32>> { // block id: 3238
        let var3734: (Aggregate356) -> (Range<UInt8>, Unit) = func3240;
        let var3767: Array<UInt32> = Array<UInt32>(10) {i => UInt32(14)}
        try { // block id: 3737
            var290;
            (var3320, var2203, var1776, var1290, (r'4', false, Int8(37), Float32(91.0), 87), var2934);
            var2519
        } catch (_) { // block id: 3752
            if (true) {
                Aggregate356()
            } else {
                var2519
            }
        } finally { // block id: 3757
            if (var2115) {
                var3761
            } else {
                Class365(namedParam897: var3215, namedParam900: var3224, optionalParam901: var3767)
            };
            var2519
        } |> var3734;
        var var3792: Option<Int32> = Option<Int32>.None;
        var var3826: UInt32 = UInt32(Int8(UInt8(96)));
        [var3792, try { // block id: 3795
            var1290 = Int16(-106)
            var118;
            Option<Int32>.None
        } finally { // block id: 3801
            var var3804: UInt32 = UInt32(218);
            var3804 *= UInt32(170)
            if (var2210) {
                var3792
            } else {
                Option<Int32>.None
            }
        }, Option<Int32>.Some((var3792 ?? var2203)), Option<Int32>.Some(var2203), try { // block id: 3818
            var118;
            Option<Int32>.Some(var2296)
        } catch (_) { // block id: 3822
            var1863;
            var3826 >>= ((var3224) & 7)
            if (true) {
                var3792
            } else {
                var3792
            }
        } finally { // block id: 3835
            var317 <<= ((UInt64(97)) & 7)
            var3792
        }, if ((var2783 ?? var2210)) {
            var3792
        } else {
            try { // block id: 3846
                var2203--;
                var3792
            } catch (_) { // block id: 3850
                if (true) {
                    var3792
                } else {
                    Option<Int32>.None
                }
            }
        }, match (if (false) { // block id: 3858
            var173 >>= ((Int8(-108)) & 7)
            var3215
        } else if (var2210) { // block id: 3864
            var317 *= var2240
            ();
            r'S'
        } else { // block id: 3870
            r'A'
        }) {
            case r'6' | r'6' | r'6' | r'6' => var3792

            case _ =>
                var2733 &= UInt8(22)
                false;
                var3792

            case r'K' => var3792

            case r'9' | r'6' | r's' | r'p' => var3792

            case _ =>
                (((UInt8(236) & 127))..=((UInt8(116) & 127)) : ((7 | 1)));
                if (false) {
                    var640
                } else {
                    var3904
                };
                if (false) {
                    Option<Int32>.Some(Int32(93))
                } else {
                    Option<Int32>.None
                }
        }, var3792, var3792, if (if (var662) { // block id: 3917
            Option<Option<Int32>>.None;
            ();
            true
        } else { // block id: 3921
            var var3924: Int8 = Int8(Int8(Int8(UInt8(Int8(106)))));
            var3924--;
            var317 != var1466
        }) {
            (var3939 ?? var3792)
        } else {
            Option<Int32>.Some(var2296)
        }]
    };

    var var3955: Range<UInt64> = (((UInt64(Int8(Int8(123))) & 127))..((UInt64(251) & 127)) : (((Int64(Int16(UInt8(Int8(-1)))) |
        1))));
    try { // block id: 3117
        let var3209: UInt32 = UInt32(48);
        [Class365(namedParam3121: var3000, namedParam3122: r'e', namedParam3123: var1478), var2877, Class365(),
            Class365(
            namedParam3121: (UInt64(161), var2913, var265, var1561, var2783, true, (Float32(5.0), Int32(-61), var192,
                    var118, var538), Int32(-33)), namedParam3122: r'P',
            namedParam3123: (((Int16(96) & 127))..=((var1290 & 127)) : (((38 | 1)))), optionalParam3124: var1001),
            Class365(), Class365(), Class365(namedParam897: var2176, namedParam900: var3209), var2877, Class365(),
            Class365(namedParam897: var3215, optionalParam898: false, namedParam900: UInt32(218),
            optionalParam901: [var3209, UInt32(37), var3209, var3224, UInt32(171), UInt32(5), var3224, var3209, var3224,
                var3224])];
        var473
    } finally { // block id: 3235
        func3237();
        try { // block id: 3945
            var118;
            Option<Option<Int32>>.None
        } finally { // block id: 3948
            var2203 |= var2296
            Option<Option<Int32>>.None
        };
        match (var3955) {
            case _ =>
                var var3969: UInt32 = UInt32(Int16(Int8(-94)));
                var3969 >>= ((UInt32(119)) & 7)
                var888;
                (-76)
        }
    };
    var2552
}

func func3109(param3110: UInt16): Range<Int64> { // block id: 3111
    var var3980: ((Float32, Int32, (Range<UInt8>, Unit), Int16, (Rune, Bool, Int8, Float32, Int64), (Rune, Bool, Int8, 
        Float32, Int64)), Option<Range<UInt32>>) = ((Float32(44.0), Int32(75), ((((UInt8(141) & 127))..=((UInt8(145) &
                    127)) : (((-94) | 1))), ()), Int16(UInt16(Int16(-28))), (r'y', false, Int8(13), Float32(Float32(106.0)),
                Int64(126)), (r'D', true, Int8(Int8(18)), Float32(102.0), Int64(Int32(-58)))), (Class365(
            optionalParam3366: (((UInt32(57) & 127))..=((UInt32(180) & 127)) : (((107 | 1)))),
            namedParam3373: ((((UInt64(25) & 127))..=((UInt64(251) & 127)) : ((((-111) | 1)))), (((UInt8(76) & 127))..=((UInt8(246) &
                    127)) : (((-82) | 1))), Int32(-58)), namedParam3374: (105.0 as Unit)) as Range<UInt32>));
    match (var3980) {
        case _ =>
            var1072;
            var118;
            Option<(Float32, Int32, (Range<UInt8>, Unit), Int16, (Rune, Bool, Int8, Float32, Int64), (Rune, Bool, Int8, 
                    Float32, Int64))>.None
    } |> func3113
}

func func3106(): Option<Option<Int32>> { // block id: 3107
    let var4028: (UInt16) -> Range<Int64> = func3109;
    var var4045: UInt16 = UInt16(1);
    try { // block id: 4031
        var656 ||= true
        var2203 ^= Int32(-24)
        UInt16(57) & UInt16(9)
    } finally { // block id: 4041
        var118;
        var1092;
        var4045
    } |> var4028;
    let var4059: ?Option<Option<Int32>> = ((Float32(Float32(Float32(-55.0))), Int32(-13), (((Int32(-120) & 127))..=((Int32(94) &
            127)) : (((-64) | 1))), (), (Float32(Float32(-20.0)), Int32(UInt16(77)), ((((UInt8(7) & 127))..((UInt8(79) &
                    127)) : (((11 | 1)))), ()), Int16(-47), (r'A', false, Int8(-53), Float32(-21.0), (-48)), (r'Z', true,
                Int8(13), Float32(28.0), 103))) as Option<Option<Int32>>);
    ((Option<Option<Option<Option<Int32>>>>.None ?? var4059) ?? var4093)
}

public func func2947(param2948: Float32): Range<UInt8> { // block id: 2949
    let var2954: Array<Option<Int32>> = Array<Option<Int32>>(10) {i => Option<Int32>.None}
    var var3086: UInt32 = UInt32(UInt32(163));
    var loopTimeVar3103: Int64 = 0;
    while (((match (var2954) {
            case _: (Option<Interface372>, Range<UInt8>) => var2783

            case _: Interface368 => Option<Bool>.None

            case _ =>
                var118;
                var118;
                var2783

            case _ =>
                Class365(namedParam897: r'A', optionalParam898: var2210, namedParam900: UInt32(236));
                (((Int8(-108) & 127))..=((Int8(-99) & 127)) : ((97 | 1)));
                Option<Bool>.None
        } ?? func1486(namedParam1555: var3000,
            optionalParam1556: [var3086, var3086, var3086, UInt32(160), var3086, UInt32(157), var3086, var3086,
                UInt32(90), UInt32(81)]))) && loopTimeVar3103 < 100) {
        loopTimeVar3103++;
        (((UInt8(73) & 127))..=((UInt8(19) & 127)) : ((83 | 1))) |> func1838
    };
    match (func3106()) {
        case _ => ()

        case _: Range<Int64> =>
            var118;
            if (var2115) {
                Class365()
            } else {
                var4107
            };
            ()

        case _ =>
            ();
            ()
    };
    var var4131: UInt16 = UInt16(162);
    (((var2733 & 127))..=((UInt8((var173 + var173)) & 127)) : ((Option<Int64>.None ?? if (false) { // block id: 4128
        var4131 += UInt16(149)
        115
    } else { // block id: 4135
        (-117)
    }) | 1))
}

public func func2942(param2943: Range<UInt8>): (UInt64, Unit, Range<UInt32>, (Float32, Int32, Range<Int32>, Unit, (Float32, 
    Int32, (Range<UInt8>, Unit), Int16, (Rune, Bool, Int8, Float32, Int64), (Rune, Bool, Int8, Float32, Int64))), Option<Bool>, 
    Bool, (Float32, Int32, Range<Int32>, Unit, (Float32, Int32, (Range<UInt8>, Unit), Int16, (Rune, Bool, Int8, Float32, 
    Int64), (Rune, Bool, Int8, Float32, Int64))), Int32) { // block id: 2944
    var var4138: (Float32) -> Range<UInt8> = func2947;
    func1838((match (var208) {
        case _ =>
            var2778;
            var3320
    } |> var4138));
    var var4159: ?(Range<UInt8>, Unit) = Option<(Range<UInt8>, Unit)>.Some(
        ((((UInt8(199) & 127))..((UInt8(169) & 127)) : ((70 | 1))), ()));
    var var4231: Option<Option<Int32>> = Option<Option<Int32>>.None;
    match (((Option<Option<(Range<UInt8>, Unit)>>.Some(var4159) ?? var4159) ?? match (var4167) {
        case _ =>
            ();
            var1776

        case caseVar4183 =>
            if (var662) {
                Option<(Range<UInt8>, Unit)>.None
            } else {
                var4159
            };
            (((UInt8(78) & 127))..((UInt8(244) & 127)) : (((-44) | 1)));
            ((((UInt8(140) & 127))..((var2234 & 127)) : (((59 | 1)))), var2913)

        case caseVar4198 =>
            (-20);
            if (true) {
                Option<Aggregate356>.Some(Aggregate356())
            } else {
                var2820
            };
            ((((UInt8(183) & 127))..=((UInt8(239) & 127)) : ((((-98) | 1)))), var2913)

        case caseVar4214 =>
            ();
            var1776

        case _ =>
            Option<Range<UInt32>>.Some((((UInt32(0) & 127))..=((UInt32(241) & 127)) : (((-39) | 1))));
            var1776
    })) {
        case (caseVar4225, caseVar4226) =>
            var1092;
            Option<Option<Option<Int32>>>.Some(var4231);
            (var317, (), var265, (Float32(126.0), Int32(29), (((var2296 & 127))..((Int32(48) & 127)) : (((var473 | 1)))),
                    var2913, var538), var2783, true, var1561, var2203)

        case caseVar4252 => var3000

        case (caseVar4257, ()) =>
            if (var2210) {
                var4263
            } else {
                (((var2240 & 127))..((UInt64(36) & 127)) : (((var473 | 1))))
            };
            var3000

        case _ =>
            ();
            (UInt64(12), (), (((UInt32(253) & 127))..((UInt32(25) & 127)) : ((((-89) | 1)))), var1561, var2783, false,
                var1561, Int32(101))
    }
}

func func2389(param2390: Interface371): Aggregate356 { // block id: 2391
    var var2432: Range<UInt8> = (((UInt8(213) & 127))..((UInt8(43) & 127)) : (((36 | 1))));
    var var2446: UInt16 = UInt16(UInt16(Int8(95)));
    try { // block id: 2393
        match (96.0) {
            case caseVar2398 =>
                var118;
                (((Int32(14) & 127))..((Int32(-24) & 127)) : (((-8) | 1)));
                ()

            case caseVar2405 =>
                var2408;
                ()

            case 26.0 =>
                var118;
                ();
                ()

            case _ =>
                var317 %= ((var317) | 1)
                var1466--;
                var var2426: UInt16 = UInt16(Int16(115));
                var2426++
        };
        var2432 |> func1838;
        var loopTimeVar2468: Range<UInt64> = (((UInt64(40) & 127))..=((UInt64(Int16(-60)) & 127)) : ((((-45) | 1))));
        for (i in loopTimeVar2468 where true) {
            var118;
            if (var662) {
                (var118, var2446, Int16(62), var178, var178, var2203, Int8(123), var1623)
            } else {
                (var118, var2446, var2460, Float32(19.0), Float32(-107.0), Int32(90), Int8(117), UInt8(91))
            }
        }
    } finally { // block id: 2474
        match (Option<Float64>.None) {
            case _ => ()
        };
        match (var2482) {
            case _ =>
                if (var2115) {
                    var1478
                } else {
                    var1478
                };
                ()
        }
    };
    let var2493: Array<Unit> = Array<Unit>(10) {i => ()}
    let var2566: Range<UInt64> = (((UInt64(93) & 127))..((UInt64(105) & 127)) : (((-52) | 1)));
    match (var2493) {
        case _ =>
            Option<Option<Int32>>.None;
            Option<Float64>.Some(var1072)

        case caseVar2513 =>
            var118;
            if (true) {
                var2519
            } else {
                Aggregate356()
            };
            if (true) {
                Option<Float64>.Some((-23.0))
            } else {
                Option<Float64>.None
            }

        case caseVar2529 =>
            if (var656) {
                Option<Float64>.Some((-126.0))
            } else {
                Option<Float64>.None
            }

        case caseVar2538 =>
            119;
            var118;
            Option<Float64>.None

        case _ =>
            let var2556: Class365 = Class365();
            if (true) {
                (var2203, (((UInt8(64) & 127))..=((UInt8(189) & 127)) : ((1 | 1))), (((UInt64(79) & 127))..((UInt64(72) &
                        127)) : ((116 | 1))), var2552, Option<Class365>.Some(var2556), UInt32(199))
            } else {
                (var2296, (((UInt8(235) & 127))..((var1623 & 127)) : (((15 | 1)))), var2566, ((((-101) & 127))..(((-115) &
                        127)) : ((103 | 1))), var1124, UInt32(4))
            };
            var1092
    };
    let var2576: Array<Option<Int32>> = Array<Option<Int32>>(10) {i => Option<Int32>.None}
    try { // block id: 2573
        let var2603: Array<Interface373> = [Class365(namedParam897: r'N',
            optionalParam898: ((Option<Interface372>.None, (((UInt8(195) & 127))..((UInt8(96) & 127)) : ((((-66) | 1))))) is (Unit, 
                UInt16, Int16, Float32, Float32, Int32, Int8, UInt8)), namedParam900: UInt32(245),
            optionalParam901: [UInt32(230), UInt32(137), UInt32(178), UInt32(10), UInt32(29), UInt32(132), UInt32(125),
                UInt32(163), UInt32(163), UInt32(233)]),
            Class365(namedParam897: r'a', namedParam900: UInt32(UInt32(Int16(50))),
            optionalParam901: [UInt32(140), UInt32(Int16(-123)), UInt32(190), UInt32(UInt32(40)), UInt32(Int32(-79)),
                UInt32(UInt8(156)), UInt32(2), UInt32(UInt8(164)), UInt32(66), UInt32(231)]),
            Class365(namedParam897: r'g', optionalParam898: (Option<Float64>.Some((-7.0)) is Interface373),
            namedParam900: UInt32(Int8(-104)),
            optionalParam901: [UInt32(Int32(115)), UInt32(59), UInt32(Int8(23)), UInt32(Int16(-90)), UInt32(UInt8(56)),
                UInt32(UInt16(9)), UInt32(176), UInt32(UInt16(10)), UInt32(UInt16(242)), UInt32(201)]), Class365(),
            Class365(),
            Class365(namedParam897: r't', optionalParam898: (90 is Option<Option<Int32>>),
            namedParam900: UInt32(UInt32(145)),
            optionalParam901: [UInt32(252), UInt32(46), UInt32(238), UInt32(55), UInt32(120), UInt32(139), UInt32(32),
                UInt32(199), UInt32(63), UInt32(83)]), Class365(),
            Class365(namedParam897: r'3', optionalParam898: ((Class365() as Range<UInt32>) is Option<Interface372>),
            namedParam900: UInt32(170)), Class365(namedParam897: r'O', namedParam900: UInt32(Int8(11))), Class365()];
        match (var2576) {
            case _: Interface368 =>
                let var2684: Array<Interface373> = [Class365(namedParam897: r'Q', optionalParam898: false,
                    namedParam900: UInt32(211)), Class365(), Class365(namedParam897: r'n', namedParam900: UInt32(97)),
                    Class365(), Class365(namedParam897: r'5', optionalParam898: true, namedParam900: UInt32(UInt32(134))),
                    Class365(), Class365(), Class365(),
                    Class365(namedParam897: r'j', optionalParam898: false, namedParam900: UInt32(Int16(68)),
                    optionalParam901: [UInt32(69), UInt32(214), UInt32(117), UInt32(67), UInt32(131), UInt32(100),
                        UInt32(55), UInt32(19), UInt32(52), UInt32(96)]),
                    Class365(namedParam897: r'P', namedParam900: UInt32(UInt8(UInt8(219))),
                    optionalParam901: [UInt32(50), UInt32(15), UInt32(43), UInt32(39), UInt32(234), UInt32(146),
                        UInt32(164), UInt32(246), UInt32(42), UInt32(228)])];
                if (var656) {
                    var2603
                } else {
                    var2684
                };
                var118;
                var656 &&= var2115

            case caseVar2721 =>
                Option<Interface372>.None;
                var118;
                var173 += var173

            case _ => var2733 -= var1623

            case _: Option<Class365> => ()

            case _ =>
                ();
                ()
        };
        let var2830: UInt32 = UInt32(62);
        var var2835: Interface373 = Class365(namedParam897: r'T', namedParam900: UInt32(84));
        [Class365(namedParam897: r'a', optionalParam898: false, namedParam900: var2830), Class365(), Class365(), var2835,
            Class365(103.0, optionalParam2842: UInt16(181), namedParam2846: var4746), var2835, var2877, var2877,
            Class365((-37.0), optionalParam2842: UInt16(23), namedParam2846: var4746), var2877] |> func2749
    } finally { // block id: 4756
        (Option<Aggregate356>.Some(Aggregate356()) ?? var2519)
    }
}

public func func2099(param2100: UInt16): Option<Int32> { // block id: 2101
    var var2123: ((Float32, Int32, (Range<UInt8>, Unit), Int16, (Rune, Bool, Int8, Float32, Int64), (Rune, Bool, Int8, 
        Float32, Int64)), Option<Range<UInt32>>) = ((Float32(Float32(117.0)), Int32(UInt32(254)), ((((UInt8(132) & 127))..=((UInt8(6) &
                    127)) : ((126 | 1))), ()), Int16(UInt8(UInt8(58))), (r'1', (93 is Option<Float64>), Int8(Int8(43)),
                Float32(Float32(-31.0)), Int64(Int8(-107))), (r'c', false, Int8(Int8(-66)), Float32(Float32(124.0)), (-94))),
        Option<Range<UInt32>>.Some((((UInt32(Int16(-103)) & 127))..=((UInt32(153) & 127)) : (((Int64(Int16(69)) | 1))))));
    var var2164: Bool = false;
    var var2183: (Rune, Bool, Int8, Float32, Int64) = (r'T', true, Int8(40), Float32(Float32(61.0)), Int64(UInt16(Int8(Int8(16)))));
    let var2220: UInt32 = UInt32(Int8(Int8(-75)));
    let var2259: Int16 = Int16(UInt16(Int16(63)));
    let var2273: Int64 = (-44);
    let var2290: Int32 = Int32(UInt32(Int32(Int32(111))));
    match (if ([true, true, false, var656, true, var656, false, var662, var2115, var662][3]) {
        try { // block id: 2121
            var2123
        } finally { // block id: 2161
            var var2172: Int16 = Int16(-81);
            if (var2164) {
                ((Float32(87.0), Int32(-37), var1776, var2172, (var2176, false, var173, Float32(102.0), var473), var2183),
                    Option<Range<UInt32>>.Some(var265))
            } else {
                (var538, Option<Range<UInt32>>.None)
            }
        }
    } else {
        ((Float32(-13.0), var2203, var1776, var1290, (r'B', var2210, var173, Float32(103.0), (-107)), var2183),
            Option<Range<UInt32>>.Some((((UInt32(127) & 127))..=((var2220 & 127)) : ((((-38) | 1))))))
    }) {
        case (caseVar2227: (Unit, UInt16, Int16, Float32, Float32, Int32, Int8, UInt8), caseVar2228: Array<Bool>) =>
            var var2246: Range<Int64> = ((((-66) & 127))..((29 & 127)) : ((((-18) | 1))));
            (Int32(2), (((var2234 & 127))..=((var1623 & 127)) : (((120 | 1)))), (((var2240 & 127))..=((UInt64(159) & 127)) : (((var473 |
                    1)))), var2246, var1124, var2220);
            false;
            ()

        case _ => var118
    };
    let var4886: Option<Array<Option<Unit>>> = Option<Array<Option<Unit>>>.None;
    var var4889: Option<Int32> = Option<Int32>.Some(Int32(120));
    var var4915: UInt32 = UInt32(Int8(109));
    (var3939 ?? if (var2164) {
        match (var4093) {
            case _ =>
                var var4860: Float64 = (-64.0);
                var4860 -= (-89.0)
                var4263;
                if (false) {
                    Option<Int32>.None
                } else {
                    Option<Int32>.None
                }

            case _: Interface369 =>
                (var2176, var2210, Int8(2), var3320, var473);
                var var4878: Option<Int32> = Option<Int32>.None;
                var4878

            case caseVar4882 =>
                var118;
                var4886;
                var4889

            case _ =>
                [77, 80, var2273, var473, var473, (-47), (-26), (-122), (-51), var473];
                Option<Int32>.None
        }
    } else {
        match (Option<Option<(Float32, Int32, (Range<UInt8>, Unit), Int16, (Rune, Bool, Int8, Float32, Int64), (Rune, 
                Bool, Int8, Float32, Int64))>>.None) {
            case _: Option<Range<UInt32>> =>
                if (true) {
                    [var4915, var4915, var3224, UInt32(4), var3224, var2220, UInt32(182), UInt32(64), var3224,
                        UInt32(220)]
                } else {
                    [UInt32(102), UInt32(99), UInt32(93), UInt32(121), UInt32(53), UInt32(34), UInt32(30), UInt32(177),
                        UInt32(125), UInt32(102)]
                };
                [false, true, true, false, true, false, false, false, false, false];
                var4889

            case _ =>
                if (true) {
                    var4889
                } else {
                    var4889
                }

            case _ =>
                var4107;
                var4889
        }
    })
}

func func1814(param1815: Option<Bool>): Option<Int32> { // block id: 1816
    let var1992: (Range<UInt8>) -> Unit = func1838;
    let var2005: Int32 = Int32(Int32(31));
    let var2021: Option<Interface372> = Option<Interface372>.Some(
        Class365(namedParam897: r'V', optionalParam898: (Option<Int32>.None is Option<Unit>),
            namedParam900: UInt32(UInt32(Int8(41)))));
    let var4959: UInt16 = UInt16(124);
    let var5012: Unit = ();
    func func1820(namedParam1821!: Interface370, namedParam1822!: Range<UInt8>,
        optionalParam1823!: Range<UInt8> = (((UInt8(Int8(Int8(UInt8(180)))) & 127))..((UInt8(Int8(UInt8(Int8(-58)))) &
            127)) : (((Int64(UInt16(47)) | 1)))), namedParam1835!: Option<Int32>): Array<Option<Int32>> { // block id: 1836
        optionalParam1823 |> var1992;
        var var2033: UInt32 = UInt32(151);
        match (Int32(94) - try { // block id: 1999
            ();
            ();
            Int32(-104) | var2005
        } catch (e: Exception) { // block id: 2008
            ();
            ();
            Int32(-55)
        }) {
            case 31 | 72 | 31 =>
                "\"'==-kBkM'";
                if (var656) {
                    var2021
                } else {
                    var2021
                };
                (((var2033 & 127))..=((var2033 & 127)) : ((((-81) | 1))))

            case _ =>
                var118;
                var118;
                (((UInt32(244) & 127))..=((UInt32(42) & 127)) : (((var473 | 1))))
        };
        var var2068: Int32 = Int32(Int8(35));
        var var5015: (Float32, Int32, (Range<UInt8>, Unit), Int16, (Rune, Bool, Int8, Float32, Int64), (Rune, Bool, 
            Int8, Float32, Int64)) = (Float32(Float32(Float32(-99.0))), Int32(-79), ((((UInt8(93) & 127))..((UInt8(107) &
                    127)) : ((71 | 1))), ()), Int16(83), (r'v', (((), UInt16(201), Int16(-83), Float32(7.0), Float32(115.0),
                    Int32(0), Int8(20), UInt8(146)) is () -> Option<Option<Int32>>), Int8(Int8(-4)), Float32(Float32(Float32(24.0))),
                Int64(90)), (r'a', true, Int8(Int8(UInt8(86))), Float32(Float32(Float32(17.0))), Int64(UInt16(UInt16(13)))));
        var var5073: ?Option<Int32> = Option<Option<Int32>>.Some(Option<Int32>.None);
        [Option<Int32>.None, (Option<Option<Int32>>.Some(Option<Int32>.None) ?? if (var656) {
            Option<Int32>.None
        } else {
            Option<Int32>.Some(Int32(-108))
        }),
            (try { // block id: 2061
            var118;
            Option<Option<Int32>>.Some(namedParam1835)
        } finally { // block id: 2065
            var2068 ^= Int32(-59)
            if (false) {
                var2075
            } else {
                var2075
            }
        } ?? [namedParam1835, namedParam1835, namedParam1835, Option<Int32>.Some(var2005), Option<Int32>.Some(Int32(64)),
            namedParam1835, namedParam1835, Option<Int32>.Some(var2068), Option<Int32>.None, Option<Int32>.None][3]),
            Option<Int32>.None,
            (match ((Int32(-53), (((UInt8(242) & 127))..((UInt8(179) & 127)) : (((-48) | 1))), (((UInt64(253) & 127))..=((UInt64(144) &
                127)) : (((var473 | 1)))), var2552, Option<Class365>.Some(Class365()), UInt32(69))) {
            case _ =>
                var2913;
                var4959

            case caseVar4963 =>
                var2913;
                Int32(27) + var2068;
                UInt16(237) ^ var4959

            case caseVar4974 =>
                var2519;
                Int32(-84);
                var4959

            case caseVar4981: ((Unit, UInt16, Int16, Float32, Float32, Int32, Int8, UInt8), Int16, Bool, Int16, (Range<UInt64>, 
                    Range<UInt8>, Int32), Unit, (Range<UInt64>, Range<UInt8>, Int32)) =>
                var4263;
                UInt16(16)

            case _ =>
                var2913;
                (((var2234 & 127))..((UInt8(7) & 127)) : (((90 | 1))));
                UInt16(192)
        } |> func2099), (try { // block id: 4995
            var2913;
            ();
            var1001
        } finally { // block id: 4999
            (var1466, (), (((UInt32(44) & 127))..((UInt32(18) & 127)) : (((-14) | 1))), var1561, var2783, var656, (Float32(91.0),
                    Int32(55), var192, var5012, var5015), var2296);
            ();
            if (true) {
                Option<Option<Int32>>.None
            } else {
                Option<Option<Int32>>.Some(Option<Int32>.None)
            }
        } ?? Option<Int32>.Some(Int32(50))), ((Option<Option<Option<Int32>>>.None ?? var5073) ?? Option<Int32>.None),
            namedParam1835, Option<Int32>.Some(match {
            case var2115 =>
                ();
                -var2296
            case _ => var4174
        }), if ((true && true)) {
            namedParam1835
        } else {
            Option<Int32>.None
        }]
    };

    let var5106: Int64 = 105;
    var var5112: Option<Int32> = Option<Int32>.Some(Int32(47));
    func1820(namedParam1821: try { // block id: 5094
        if (var662) {
            var4746
        } else {
            var4746
        }
    } finally { // block id: 5099
        var4746
    }, namedParam1822: (((UInt8(40) & 127))..((UInt8(195) & 127)) : ((38 | 1))),
        optionalParam1823: (((var2234 & 127))..((UInt8(57) & 127)) : (((var5106 | 1)))),
        namedParam1835: if (false) {
            Option<Int32>.None
        } else {
            var5112
        })[4]
}

func func1640(optionalParam1641!: Option<Int32> = Option<Int32>.None): Interface373 { // block id: 1643
    var var1646: UInt16 = UInt16(118);
    var1646 >>= ((if (false) { // block id: 1650
        var118;
        var1646
    } else { // block id: 1653
        UInt16(71)
    }) & 7)
    var var1664: Array<Option<Unit>> = Array<Option<Unit>>(10) {i => Option<Unit>.Some(())}
    var var1735: Int32 = Int32(24);
    match (var290) {
        case _: ((Float32, Int32, (Range<UInt8>, Unit), Int16, (Rune, Bool, Int8, Float32, Int64), (Rune, Bool, Int8, 
                Float32, Int64)), Option<Range<UInt32>>) =>
            var173 |= var173
            var1664

        case _ =>
            var1735 = Int32(11)
            var118;
            [var1413, var1413, Option<Unit>.None, var1413, Option<Unit>.None, var1413, Option<Unit>.None, var1413,
                var1413, var1413]

        case caseVar1752 =>
            var118;
            if (false) {
                var1664
            } else {
                [Option<Unit>.Some(var118), Option<Unit>.Some(()), var1413, var1413, Option<Unit>.None, var1413, var1413,
                    var1413, Option<Unit>.Some(var118), Option<Unit>.Some(())]
            }

        case _ =>
            var1776;
            if (false) {
                var1664
            } else {
                [Option<Unit>.Some(()), var1413, var1413, Option<Unit>.Some(()), Option<Unit>.None,
                    Option<Unit>.Some(var118), Option<Unit>.None, var1413, Option<Unit>.None, var1413]
            }
    };
    let var5168: Bool = true;
    let var5189: Array<Interface373> = [Class365(Float64(Float32(-126.0)), optionalParam2842: UInt16(65),
        namedParam2846: Class365(namedParam897: r'j', optionalParam898: (Class365() is Interface374),
            namedParam900: UInt32(67),
            optionalParam901: [UInt32(183), UInt32(155), UInt32(89), UInt32(54), UInt32(7), UInt32(116), UInt32(147),
                UInt32(149), UInt32(180), UInt32(236)])), Class365(),
        Class365(namedParam2378: Float64((-6.0)), namedParam2379: Option<Option<Int32>>.None,
        optionalParam2380: Float32(-72.0)),
        Class365(namedParam897: r'z',
        optionalParam898: (Option<Bool>.Some(true) is (Option<Interface372>, Range<UInt8>)), namedParam900: UInt32(146),
        optionalParam901: [UInt32(229), UInt32(14), UInt32(34), UInt32(127), UInt32(179), UInt32(58), UInt32(60),
            UInt32(144), UInt32(143), UInt32(105)]),
        Class365(namedParam897: r'x', namedParam900: UInt32(UInt8(UInt8(18))),
        optionalParam901: [UInt32(95), UInt32(0), UInt32(37), UInt32(108), UInt32(251), UInt32(15), UInt32(90),
            UInt32(135), UInt32(170), UInt32(62)]),
        Class365(
        namedParam3121: (UInt64(225), (), (((UInt32(81) & 127))..=((UInt32(207) & 127)) : ((((-53) | 1)))), (Float32(-105.0),
                Int32(58), (((Int32(-123) & 127))..((Int32(35) & 127)) : (((-125) | 1))), (), (Float32(-65.0), Int32(70),
                    ((((UInt8(197) & 127))..((UInt8(48) & 127)) : ((117 | 1))), ()), Int16(99), (r'a', false, Int8(56),
                        Float32(-37.0), (-3)), (r'2', false, Int8(-117), Float32(39.0), 92))), Option<Bool>.None, true, (Float32(-66.0),
                Int32(11), (((Int32(-60) & 127))..((Int32(-79) & 127)) : (((10 | 1)))), (), (Float32(110.0), Int32(-56),
                    ((((UInt8(138) & 127))..((UInt8(182) & 127)) : (((30 | 1)))), ()), Int16(0), (r'G', false, Int8(58),
                        Float32(-76.0), 121), (r'X', false, Int8(-110), Float32(89.0), 92))), Int32(Int16(45))),
        namedParam3122: r'P', namedParam3123: (((Int16(-18) & 127))..((Int16(-38) & 127)) : (((-81) | 1))),
        optionalParam3124: Option<Option<Int32>>.Some(Option<Int32>.Some(Int32(-4)))),
        Class365(namedParam2378: 58.0, namedParam2379: Option<Option<Int32>>.Some(Option<Int32>.Some(Int32(68))),
        optionalParam2380: Float32(Float32(0.0))),
        Class365(Class365(),
        ((Float32(-119.0), Int32(-55), ((((UInt8(55) & 127))..((UInt8(123) & 127)) : (((-67) | 1))), ()), Int16(-120), (r't',
                    false, Int8(14), Float32(-46.0), 34), (r'Z', true, Int8(57), Float32(-52.0), (-30))), Option<Range<UInt32>>
                .None)),
        Class365(Float64(Float64(110.0)), namedParam2846: Class365(namedParam897: r'p', namedParam900: UInt32(Int8(-2))),
        optionalParam2847: """
$$!z]
@E*t\"
"""),
        Class365((-104.0), optionalParam2842: UInt16(176),
        namedParam2846: Class365(
            Class365(namedParam2378: (-19.0), namedParam2379: Option<Option<Int32>>.Some(Option<Int32>.None),
                optionalParam2380: Float32(-111.0),
                optionalParam2382: (((Int8(-2) & 127))..=((Int8(126) & 127)) : (((23 | 1))))),
            ((Float32(34.0), Int32(-117), ((((UInt8(150) & 127))..((UInt8(40) & 127)) : (((85 | 1)))), ()), Int16(78), (r'b',
                        true, Int8(-126), Float32(82.0), (-68)), (r'M', false, Int8(-113), Float32(80.0), (-63))), Option<Range<UInt32>>
                    .None)))];
    func func1800(): Array<Interface373> { // block id: 1801
        var loopTimeVar1812: Int64 = 0;
        do {
            loopTimeVar1812++;
            Int8(Int8(-114))
        } while ((((((var473 & 127))..(((-30) & 127)) : (((var473 | 1)))) is UInt64)) && loopTimeVar1812 < 100);
        var var5140: Option<Interface372> = Option<Interface372>.Some(
            Class365(namedParam897: r'X', namedParam900: UInt32(UInt32(Int16(-90)))));
        if (match {
            case false =>
                ();
                false
            case _ =>
                ();
                var var5127: UInt16 = UInt16(UInt16(Int8(-118)));
                var5127 = UInt16(19)
                var2210 || var2115
        }) {
            try { // block id: 5136
                if (false) {
                    var5140
                } else {
                    var5140
                };
                if (var656) {
                    Option<Bool>.None
                } else {
                    var2783
                }
            } finally { // block id: 5152
                Option<Bool>.None
            }
        } else {
            (if (false) {
                Option<Bool>.Some(var656)
            } else {
                var2783
            })
        } |> func1814;
        if (if (false) { // block id: 5162
            if (var656) {
                [false, var5168, true, false, var2210, true, var656, var656, var5168, false]
            } else {
                [true, true, false, false, true, true, false, true, false, false]
            };
            var2210
        } else { // block id: 5180
            var473 += var473
            var118;
            var1072 <= (-20.0)
        }) {
            var5189
        } else {
            var5189
        }
    };

    func1800()[8]
}

func func1635(
    param1636: ((Unit, UInt16, Int16, Float32, Float32, Int32, Int8, UInt8), Int16, Bool, Int16, (Range<UInt64>, Range<UInt8>, 
        Int32), Unit, (Range<UInt64>, Range<UInt8>, Int32)), param1637: Range<Int32>): Float32 { // block id: 1638
    func1640();
    Float32(108.0)
}

func func1630(param1631: String): (Option<Interface372>, Range<UInt8>) { // block id: 1632
    let var5443: Option<Range<Int32>> = Option<Range<Int32>>.Some(
        (((Int32(UInt32(66)) & 127))..=((Int32(UInt8(Int8(-17))) & 127)) : ((((-47) | 1)))));
    var var5458: UInt32 = UInt32(UInt32(5));
    var var5482: Option<Range<Int64>> = Option<Range<Int64>>.None;
    match (func1635(if (false) {
        (((), UInt16(45), Int16(9), var178, var3320, Int32(-53), var173, var2234), Int16(-61), false, var1290, (var4263,
                (((UInt8(16) & 127))..((UInt8(184) & 127)) : (((var473 | 1)))), var2296), (), var1297)
    } else {
        (var5406, var2302, true, var1290, (var5425, (((var2733 & 127))..=((UInt8(98) & 127)) : (((var473 | 1)))), var2203),
            (), (var5425, (((UInt8(157) & 127))..=((UInt8(207) & 127)) : (((-45) | 1))), Int32(-69)))
    }, (var5443 ?? var192))) {
        case _ =>
            var5458 &= var5458
            let var5463: Unit = ();
            var5463

        case caseVar5467 => var5458 &= var3224

        case -34.0 =>
            var1072;
            ()

        case 57.0 | 37.0 | -128.0 =>
            var5482;
            ()

        case _ => ();
    };
    if ((var2302 is (Interface371) -> Aggregate356) && if (true) { // block id: 5499
        ();
        [var662, false, false, var662, var662, var656, var2115, var656, false, true];
        var2210 || true
    } else { // block id: 5515
        var5518 % ((UInt64(143)) | 1);
        Int16(-40) >= Int16(-37)
    }) { // block id: 5524
        var var5534: Unit = ();
        try { // block id: 5526
            var473 ^= (-117)
            var473 %= ((var473) | 1)
            var5534
        } finally { // block id: 5536
            var4174--
        };
        var loopTimeVar5545: Int64 = 0;
        while ((false) && loopTimeVar5545 < 100) {
            loopTimeVar5545++;
            80;
            """
7hM5j
 OHM:
"""
        }
    };
    var3487
}

public func func1269(param1270: Interface371): Unit { // block id: 1271
    var var1278: (Unit, UInt16, Int16, Float32, Float32, Int32, Int8, UInt8) = ((), UInt16(81), Int16(UInt8(249)),
        Float32(88.0), Float32(-91.0), Int32(-60), Int8(-107), UInt8(142));
    let var1307: Unit = ();
    var var1310: ((Float32, Int32, (Range<UInt8>, Unit), Int16, (Rune, Bool, Int8, Float32, Int64), (Rune, Bool, Int8, 
        Float32, Int64)), Option<Range<UInt32>>) = ((Float32(Float32(Float32(3.0))), Int32(97), ((((UInt8(248) & 127))..=((UInt8(0) &
                    127)) : ((90 | 1))), ()), Int16(UInt16(18)), (r'p', ([(), (), (), (), (), (), (), (), (), ()] is String),
                Int8(88), Float32(Float32(-115.0)), Int64(UInt16(215))), (r'u', false, Int8(57), Float32(-89.0), Int64(Int8(99)))),
        Option<Range<UInt32>>.None);
    let var1382: UInt32 = UInt32(170);
    var var1389: Rune = r'7';
    match (if ((var1278, var1290, var662, var1290, var1297, (), var1297)[2]) { // block id: 1305
        var1307;
        var1310
    } else { // block id: 1349
        let var1354: Range<UInt32> = (((UInt32(65) & 127))..((UInt32(27) & 127)) : (((Int64(Int64(UInt16(44))) | 1))));
        (var538, Option<Range<UInt32>>.Some(var1354))
    }) {
        case _: Float32 => r'V'

        case (caseVar1367: Range<UInt8>, _) =>
            ();
            r'A'

        case _ =>
            let var1377: UInt32 = UInt32(85);
            [UInt32(47), UInt32(224), var1377, UInt32(89), var1377, var1382, UInt32(105), UInt32(114), UInt32(202),
                var1382];
            var1389
    };
    var var5548: (String) -> (Option<Interface372>, Range<UInt8>) = func1630;
    func1392((var2482 |> var5548)[0], match (if (true) {
        var5556
    } else {
        [var118, var1307, var2913, var1307, (), (), (), (), (), var2913]
    }) {
        case _: Array<Interface373> => var178

        case caseVar5575 => Float32(16.0)

        case _ =>
            var1466++;
            var2913;
            var178
    })
}

public func func1204(param1205: Float64): Interface372 { // block id: 1206
    let var1208: Unit = ();
    var1208;
    var var1228: Option<Interface372> = Option<Interface372>.Some(
        Class365(namedParam897: r'Q',
            optionalParam898: ((((Int32(-112) & 127))..((Int32(41) & 127)) : ((((-41) | 1)))) is Interface368),
            namedParam900: UInt32(208),
            optionalParam901: [UInt32(249), UInt32(115), UInt32(Int8(47)), UInt32(127), UInt32(77), UInt32(162),
                UInt32(UInt16(86)), UInt32(155), UInt32(Int32(20)), UInt32(Int32(-126))]));
    let var5653: Unit = ();
    func func1262(param1263: Option<Bool>, namedParam1264!: Array<Unit>,
        namedParam1265!: ((Float32, Int32, (Range<UInt8>, Unit), Int16, (Rune, Bool, Int8, Float32, Int64), (Rune, Bool, 
            Int8, Float32, Int64)), Option<Range<UInt32>>), namedParam1266!: Array<Unit>): Interface372 { // block id: 1267
        let var5585: (Interface371) -> Unit = func1269;
        var var5588: Interface371 = Class365();
        var5588 |> var5585;
        try { // block id: 5591
            Class365(namedParam3373: var1297, namedParam3374: Option<Unit>.Some(()))
        } finally { // block id: 5596
            (Option<Interface373>.None ?? Class365(
                namedParam3373: ((((UInt64(236) & 127))..=((UInt64(26) & 127)) : ((55 | 1))), var3354, var4174),
                namedParam3374: Option<Unit>.None))
        };
        let var5679: UInt16 = UInt16(30);
        Class365(namedParam897: (try { // block id: 5616
            if (var656) {
                Option<Rune>.Some(r'r')
            } else {
                Option<Rune>.None
            }
        } finally { // block id: 5622
            var2203 /= ((var2296) | 1)
            if (false) {
                var5629
            } else {
                var5629
            }
        } ?? if (true) { // block id: 5634
            r'y'
        } else { // block id: 5636
            if (var2210) {
                var5640
            } else {
                var5640
            };
            if (var662) {
                ###"a{7I17Ra7\\}"###
            } else {
                var2482
            };
            var2264
        }), optionalParam898: match (match ([(), var5653, var2913, (), (), (), (), var5653, var2913, var5663]) {
            case _ =>
                var5669--;
                let var5674: UInt16 = UInt16(155);
                UInt16(6) | var5674
        }) {
            case 30 =>
                var2234 &= var5490
                var5653;
                var2302 < Int16(45)

            case _ =>
                if (true) {
                    Option<Range<UInt16>>.None
                } else {
                    Option<Range<UInt16>>.Some((((UInt16(44) & 127))..((UInt16(43) & 127)) : (((119 | 1)))))
                };
                true && var2210
        }, namedParam900: var5669)
    };

    let var5717: (Unit, UInt16, Int16, Float32, Float32, Int32, Int8, UInt8) = ((), UInt16(166), Int16(Int16(UInt16(79))),
        Float32(Float32(Float32(Float32(119.0)))), Float32(Float32(-91.0)), Int32(Int16(UInt8(184))), Int8(62), UInt8(178));
    var var5737: Bool = true;
    var var5759: UInt8 = UInt8(200);
    (try { // block id: 1216
        var var1221: UInt16 = UInt16(Int16(-8));
        if (true) {
            (((var1221 & 127))..((var1221 & 127)) : (((var473 | 1))))
        } else {
            var290
        };
        var1228
    } finally { // block id: 1253
        var var1257: ?Unit = Option<Unit>.None;
        if (var656) {
            var1257
        } else {
            var1257
        };
        var1228
    } ?? func1262(if (var662) {
        Option<Bool>.None
    } else {
        Option<Bool>.Some(var2210)
    }, namedParam1264: match (Option<Range<UInt32>>.None) {
        case _ =>
            ();
            if (true) {
                (var5717, var2302, var5737, Int16(90), (var4263, (((UInt8(4) & 127))..=((UInt8(158) & 127)) : (((var473 |
                            1)))), Int32(120)), var1208, var1297)
            } else {
                (var5717, Int16(81), var2115, var1290, (var5425, (((var2733 & 127))..=((var5759 & 127)) : (((var473 | 1)))),
                        var2203), (), (var5425, (((var2234 & 127))..((UInt8(232) & 127)) : (((6 | 1)))), Int32(-126)))
            };
            if (true) {
                var5556
            } else {
                [var1208, (), var2913, var5653, var5653, var118, (), (), (), var2913]
            }
    }, namedParam1265: match (Int32(-57)) {
        case _ =>
            var1290--;
            ((var3320, Int32(-2), var1776, Int16(33), (var5799, true, var173, Float32(-54.0), var473), (var2264, true,
                        Int8(-46), var3320, (-71))), Option<Range<UInt32>>.None)
    }, namedParam1266: try { // block id: 5813

        var var5830: Unit = ();
        if (var656) {
            [(), var118, (), (), var1208, (), var118, var5663, (), var5830]
        } else {
            [(), var5663, var5653, (), (), (), (), (), var1208, var5653]
        }
    } finally { // block id: 5843
        ();
        var5556
    }))
}

public func func1201(): (Int32, Range<UInt8>, Range<UInt64>, Range<Int64>, Option<Class365>, UInt32) { // block id: 1202
    var1072 |> func1204;
    var var5883: Float64 = (-93.0);
    let var5902: ((Float32, Int32, (Range<UInt8>, Unit), Int16, (Rune, Bool, Int8, Float32, Int64), (Rune, Bool, Int8, 
        Float32, Int64)), Option<Range<UInt32>>) = ((Float32(Float32(Float32(124.0))), Int32(-46), ((((UInt8(192) & 127))..((UInt8(104) &
                    127)) : (((87 | 1)))), ()), Int16(UInt16(10)), (r'G', (Option<Aggregate356>.Some(Aggregate356()) is UInt64),
                Int8(99), Float32(81.0), Int64(UInt64(193))), (r'P', ([(), (), (), (), (), (), (), (), (), ()] is Range<Int32>),
                Int8(-96), Float32(-125.0), (-24))), Option<Range<UInt32>>.Some(
            (((UInt32(104) & 127))..=((UInt32(190) & 127)) : (((Int64(UInt8(33)) | 1))))));
    var var5998: Option<Option<Option<Int32>>> = Option<Option<Option<Int32>>>.None;
    var var6010: Unit = ();
    if (match ((var2877 as Bool)) {
        case caseVar5854 =>
            ();
            var5858

        case _: Int16 => false && var662

        case caseVar5868: String => var2210

        case caseVar5873: Unit =>
            var1072 + var1072;
            true

        case _ => false
    }) { // block id: 5886
        match (Option<Int32>.None) {
            case caseVar5891 =>
                ();
                UInt64(Int64(var1466) ** (var2240 & 3))

            case caseVar5899: Option<Option<Int32>> =>
                var5902;
                UInt64(11)

            case _ =>
                UInt64(224);
                var2913;
                UInt64(245)

            case _: Option<Interface372> =>
                ();
                var var5952: UInt16 = UInt16(UInt16(UInt8(UInt8(244))));
                var5952 <<= ((var5958) & 7)
                var2240 >> ((UInt64(212)) & 7)

            case _ => var1466
        };
        var loopTimeVar5973: Range<UInt64> = (((UInt64(UInt8(54)) & 127))..=((UInt64(152) & 127)) : (((Int64(UInt8(70)) |
            1))));
        for (i in loopTimeVar5973 where var2115) {
            ();
            Option<Option<Int32>>.Some(Option<Int32>.Some(var4174))
        }
    } else if (if (false && var662) { // block id: 5984
        var656
    } else { // block id: 5986
        var5988
    }) { // block id: 5990
        Option<(Range<UInt8>, Unit)>.None;
        (var5998 ?? Option<Option<Int32>>.None);
        (var6007 ?? var6010)
    };
    var var6110: Int32 = Int32(Int8(-96));
    try { // block id: 6013
        try { // block id: 6015
            var6010;
            Option<Range<UInt16>>.Some((((var5958 & 127))..=((UInt16(204) & 127)) : (((var473 | 1)))))
        } catch (_) { // block id: 6022
            var1935;
            var var6027: Option<Range<UInt16>> = ([UInt32(107), UInt32(149), UInt32(66), UInt32(190), UInt32(243),
                UInt32(114), UInt32(160), UInt32(145), UInt32(30), UInt32(113)] as Range<UInt16>);
            if (var662) {
                var6027
            } else {
                Option<Range<UInt16>>.None
            }
        };
        let var6037: Option<(Int32, Range<UInt8>, Range<UInt64>, Range<Int64>, Option<Class365>, UInt32)> = Option<(Int32, 
                Range<UInt8>, Range<UInt64>, Range<Int64>, Option<Class365>, UInt32)>.Some(
            (Int32(30), (((UInt8(239) & 127))..=((UInt8(182) & 127)) : ((101 | 1))), (((UInt64(235) & 127))..=((UInt64(173) &
                    127)) : ((95 | 1))), (((52 & 127))..(((-4) & 127)) : (((Int64(UInt16(221)) | 1)))), Option<Class365>
                    .None, UInt32(108)));
        var6037.getOrThrow()
    } catch (e: Exception) { // block id: 6050
        let var6066: ?Unit = Option<Unit>.Some(());
        try { // block id: 6052
            ();
            if (false) {
                var584
            } else {
                var584
            }
        } catch (_) { // block id: 6058
            var6010;
            ();
            var584
        } finally { // block id: 6062
            ();
            [var6066, var6066, var1413, Option<Unit>.None, Option<Unit>.Some(()), var6066, var1413, var1413,
                Option<Unit>.Some(var118), var1413];
            (Int32(87), (((var2234 & 127))..((var1623 & 127)) : (((54 | 1)))), (((UInt64(155) & 127))..=((UInt64(230) &
                    127)) : ((35 | 1))), (((var473 & 127))..((var473 & 127)) : (((var473 | 1)))), Option<Class365>
                    .Some(var4107), var5669)
        }
    } finally { // block id: 6094
        try { // block id: 6096
            ();
            if (var656) {
                var888
            } else {
                Class365(namedParam897: r'I', optionalParam898: var656, namedParam900: UInt32(183))
            }
        } finally { // block id: 6105
            var888
        };
        ();
        (var6110, (((UInt8(233) & 127))..((UInt8(99) & 127)) : ((87 | 1))), (((UInt64(88) & 127))..=((UInt64(190) & 127)) : (((51 |
                1)))), (((var473 & 127))..((var473 & 127)) : ((((-127) | 1)))), Option<Class365>.None, UInt32(216))
    }
}

public func func1140(param1141: (Option<Int32>) -> Option<Range<UInt32>>): (Int32, Range<UInt8>, Range<UInt64>, Range<Int64>, 
    Option<Class365>, UInt32) { // block id: 1144
    ();
    var var1194: UInt64 = UInt64(UInt32(95));
    try { // block id: 1147
        var var1182: Int8 = Int8(UInt8(UInt8(Int8(UInt8(192)))));
        match (UInt64(8)) {
            case caseVar1152 =>
                if (var662) {
                    (((Int8(-62) & 127))..=((Int8(-7) & 127)) : ((80 | 1)))
                } else {
                    var1158
                };
                ()

            case 128 | 194 | 141 =>
                Option<Class365>.None;
                var656 &&= var656
                ()

            case _: Range<UInt16> => var118

            case _ => var1182 ^= var173
        };
        var loopTimeVar1198: Int64 = 0;
        do {
            loopTimeVar1198++;
            ();
            var1194
        } while ((var656) && loopTimeVar1198 < 100)
    } catch (_) { // block id: 1199

    }
    func1201()
}

public func func6127(param644: Option<Int32>): Option<Range<UInt32>> { // block id: 645
    func2942()
}

func func1050(param1051: UInt16): (Int32, Range<UInt8>, Range<UInt64>, Range<Int64>, Option<Class365>, UInt32) { // block id: 1052
    var var1106: Int32 = Int32(-45);
    let var1110: UInt8 = UInt8(Int8(-11));
    let var1134: Range<UInt64> = (((UInt64(96) & 127))..=((UInt64(116) & 127)) : (((-61) | 1)));
    let var6125: ((Option<Int32>) -> Option<Range<UInt32>>) -> (Int32, Range<UInt8>, Range<UInt64>, Range<Int64>, Option<Class365>, 
        UInt32) = func1140;
    var var6163: Option<(Int32, Range<UInt8>, Range<UInt64>, Range<Int64>, Option<Class365>, UInt32)> = Option<(Int32, 
            Range<UInt8>, Range<UInt64>, Range<Int64>, Option<Class365>, UInt32)>.Some(
        (Int32(UInt32(149)), (((UInt8(153) & 127))..((UInt8(198) & 127)) : (((-47) | 1))), (((UInt64(73) & 127))..((UInt64(93) &
                127)) : ((41 | 1))), ((((-111) & 127))..(((-89) & 127)) : (((-91) | 1))), Option<Class365>.Some(
                Class365()), UInt32(241)));
    let var6197: UInt32 = UInt32(UInt8(107));
    if (((Option<Float64>.None ?? 60.0) <= match {
        case true =>
            var118;
            if (var662) {
                Class365()
            } else {
                var888
            };
            var1072 + (-63.0)
        case false =>
            var var1078: Range<Int8> = (((Int8(-105) & 127))..=((Int8(Int8(-16)) & 127)) : (((Int64((-46)) | 1))));
            var1078;
            (-3.0)
        case _ => 53.0
    })) {
        (if (try { // block id: 1090
            var1092;
            Class365();
            var656
        } catch (e: Exception) { // block id: 1100
            var662
        }) {
            (if (var662) {
                (var1106, (((var1110 & 127))..((var1110 & 127)) : ((((-82) | 1)))), (((var317 & 127))..((UInt64(220) &
                        127)) : (((var473 | 1)))), (((115 & 127))..((var473 & 127)) : (((27 | 1)))), var1124, UInt32(174))
            } else {
                (var1106, (((var1110 & 127))..((var1110 & 127)) : (((42 | 1)))), var1134, ((((-56) & 127))..(((-25) & 127)) : (((-76) |
                        1))), var1124, UInt32(237))
            })
        } else {
            (func6127 |> var6125)
        })
    } else {
        (match (var2302) {
            case -109 | -109 =>
                if (var2210) {
                    Option<(Int32, Range<UInt8>, Range<UInt64>, Range<Int64>, Option<Class365>, UInt32)>.None
                } else {
                    Option<(Int32, Range<UInt8>, Range<UInt64>, Range<Int64>, Option<Class365>, UInt32)>.Some(var584)
                }

            case _: (Float32, Int32, (Range<UInt8>, Unit), Int16, (Rune, Bool, Int8, Float32, Int64), (Rune, Bool, Int8, 
                    Float32, Int64)) => Option<(Int32, Range<UInt8>, Range<UInt64>, Range<Int64>, Option<Class365>, 
                    UInt32)>.None

            case _ =>
                UInt8(38);
                var var6152: Option<(Int32, Range<UInt8>, Range<UInt64>, Range<Int64>, Option<Class365>, UInt32)> = Option<(Int32, 
                        Range<UInt8>, Range<UInt64>, Range<Int64>, Option<Class365>, UInt32)>.None;
                var6152

            case 20 =>
                var1413;
                ();
                var6163

            case _ =>
                var1413;
                var6178;
                var6163
        } ?? match (var1776) {
            case _ =>
                if (false) {
                    (Int32(-44), var3354, (((var2240 & 127))..((UInt64(91) & 127)) : ((((-105) | 1)))), var2552, var1124,
                        var6197)
                } else {
                    var584
                }
        })
    }
}

func func1044(param1045: Interface369): Unit { // block id: 1046
    var var6202: (UInt16) -> (Int32, Range<UInt8>, Range<UInt64>, Range<Int64>, Option<Class365>, UInt32) = func1050;
    try { // block id: 1048
        UInt16(30) |> var6202
    } finally { // block id: 6205
        var loopTimeVar6223: Range<UInt64> = (((UInt64(209) & 127))..=((UInt64(UInt16(223)) & 127)) : (((Int64(UInt16(Int8(UInt8(232)))) |
            1))));
        for (i in loopTimeVar6223 where false) {
            if (var2115) {
                Option<UInt8>.Some(UInt8(44))
            } else {
                var6214
            };
            ()
        };
        (var4174, (((var1623 & 127))..((UInt8(233) & 127)) : (((64 | 1)))), var5425, (((9 & 127))..((113 & 127)) : ((77 |
                1))), var1124, var3224)
    };
    let var6256: Array<(Rune, Bool, Int8, Float32, Int64)> = [(r'X', false, Int8(-63), Float32(Float32(-20.0)), Int64(Int64(Int32(123)))),
        (r'n', false, Int8(Int8(UInt8(94))), Float32(55.0), Int64(Int32(UInt16(208)))),
        (r'm', ((Float32(-93.0), Int32(103), ((((UInt8(40) & 127))..=((UInt8(187) & 127)) : ((55 | 1))), ()), Int16(-80),
            (r'L', true, Int8(-31), Float32(-37.0), (-33)), (r'0', true, Int8(101), Float32(111.0), (-70))) is Unit),
        Int8(Int8(11)), Float32(Float32(Float32(-45.0))), (-95)),
        (r'l', ((((UInt8(111) & 127))..=((UInt8(113) & 127)) : ((((-10) | 1)))) is Option<Option<(Float32, Int32, (Range<UInt8>, 
            Unit), Int16, (Rune, Bool, Int8, Float32, Int64), (Rune, Bool, Int8, Float32, Int64))>>), Int8(25), Float32(Float32(57.0)),
        102), (r'c', true, Int8(-123), Float32(40.0), (-125)),
        (r'u', false, Int8(Int8(-94)), Float32(117.0), Int64(UInt64(Int8(30)))),
        (r'h', ((Class365() as Option<Option<Int32>>) is (Interface371) -> Aggregate356), Int8(UInt8(222)), Float32(1.0),
        Int64(UInt16(182))), (r'w', false, Int8(108), Float32(-1.0), Int64(UInt32(UInt8(73)))),
        (r'I', true, Int8(-91), Float32(Float32(-54.0)), Int64(48)),
        (r'b', true, Int8(Int8(UInt8(206))), Float32(22.0), 110)];
    if (var2115) { // block id: 6244
        var loopTimeVar6249: Int64 = 0;
        while ((false) && loopTimeVar6249 < 100) {
            loopTimeVar6249++;
        };
    } else if (true) { // block id: 6253
        match (var6256) {
            case caseVar6367: Range<UInt64> =>
                ();
                ((((UInt8(98) & 127))..((UInt8(102) & 127)) : ((39 | 1))), ());
                Option<Bool>.Some(var656)

            case caseVar6377: Interface374 => var2783

            case _: Option<Unit> =>
                if (false) {
                    var2783
                } else {
                    var2783
                }

            case _ =>
                var5663;
                Option<Bool>.None
        };
        if (var2210) { // block id: 6393
            var var6399: Option<Int32> = Option<Int32>.None;
            if (var5858) {
                Option<Int32>.Some(Int32(-102))
            } else {
                var6399
            };
            var2913
        }
    }
}

func func1021(param1022: Range<UInt64>): Option<Range<UInt32>> { // block id: 1023
    try { // block id: 1025

    } finally { // block id: 1026
        var loopTimeVar1032: Int64 = 0;
        while ((true) && loopTimeVar1032 < 100) {
            loopTimeVar1032++;
            ()
        };
        var loopTimeVar1038: Range<UInt64> = (((UInt64(97) & 127))..((UInt64(11) & 127)) : (((98 | 1))));
        for (i in loopTimeVar1038 where var662) {
            UInt8(34);
            var118
        };
        Class365(namedParam897: r'M', namedParam900: var5669) |> func1044
    };
    var3904
}

public func func6410(param6411: Option<Int32>): Range<UInt64> { // block id: 6412
    var6414;
    (((UInt64(169) & 127))..((UInt64(163) & 127)) : (((-117) | 1)))
}

public func func610(param611: Interface373): Range<Int64> { // block id: 612
    let var630: Bool = true;
    let var6430: Option<Int32> = Option<Int32>.Some(Int32(72));
    try { // block id: 614
        (Option<Unit>.None ?? var118);
        let var624: Bool = false;
        let var6408: (Range<UInt64>) -> Option<Range<UInt32>> = func1021;
        func func619(param620: Interface370): Unit { // block id: 621
            if (var624) {
                try { // block id: 627
                    let var633: ?Range<UInt32> = (105 as Range<UInt32>);
                    if (var630) {
                        var633
                    } else {
                        var633
                    }
                } finally { // block id: 637
                    (((Int16(74) & 127))..((Int16(-3) & 127)) : (((-104) | 1)));
                    var640
                }
            } else {
                (match (var265) {
                    case _ =>
                        var178 += Float32(58.0)
                        if (var2210) {
                            var1092
                        } else {
                            var1092
                        };
                        var6430
                } |> (func6410 ~> var6408))
            };
            try { // block id: 6434
                if (false) { // block id: 6437
                    var6414
                };
                match (var2408) {
                    case _ =>
                        if (false) {
                            var3712
                        } else {
                            var3712
                        };
                        (((var5958 & 127))..((UInt16(111) & 127)) : (((92 | 1))));
                        var2913
                };
                Option<UInt8>.None
            } finally { // block id: 6453
                (Option<Int32>.None ?? Int32(-63));
                var loopTimeVar6462: Range<UInt64> = (((UInt64(Int32(Int16(UInt8(6)))) & 127))..((UInt64(187) & 127)) : ((((-106) |
                    1))));
                for (i in loopTimeVar6462 where true) {
                    var6414;
                    ()
                };
                match ((((var1623 & 127))..=((UInt8(88) & 127)) : (((var473 | 1))))) {
                    case _ =>
                        if (var630) {
                            var6214
                        } else {
                            Option<UInt8>.None
                        }
                }
            };
            var loopTimeVar6504: Int64 = 0;
            do {
                loopTimeVar6504++;
                var loopTimeVar6501: Int64 = 0;
                while ((var5988) && loopTimeVar6501 < 100) {
                    loopTimeVar6501++;
                    if (false) {
                        var3487
                    } else {
                        var3487
                    };
                    var6157 ^ Int16(-122)
                };
                param620
            } while ((try { // block id: 6483
                var5663;
                false
            } catch (_) { // block id: 6486
                UInt8(67);
                false
            }) && loopTimeVar6504 < 100)
        };

        func619(
            Class365(namedParam2378: (-115.0), namedParam2379: Option<Option<Int32>>.None,
                optionalParam2380: Float32(21.0)))
    } catch (e: Exception) { // block id: 6509
        var loopTimeVar6515: Range<UInt64> = (((UInt64(120) & 127))..((UInt64(213) & 127)) : (((Int64(Int32(92)) | 1))));
        for (i in loopTimeVar6515 where true) {
            ();
            var1863
        }
    };
    ((((-91) & 127))..(((-122) & 127)) : (((-112) | 1)))
}

func func376(optionalParam377!: Int32 = Int32(-6), namedParam379!: Range<UInt8>, namedParam380!: Rune): Class365 { // block id: 381
    var118;
    var var399: Array<Option<Unit>> = [(Int32(65) as Unit), (UInt64(4) as Unit), Option<Unit>.None,
        Option<Unit>.Some(()), (r'4' as Unit), Option<Unit>.Some(()),
        ((((UInt16(UInt16(226)) & 127))..((UInt16(Int16(-109)) & 127)) : ((((-86) | 1)))) as Unit), Option<Unit>.None,
        Option<Unit>.Some(()),
        ((((UInt16(UInt8(203)) & 127))..=((UInt16(UInt8(163)) & 127)) : (((Int64(Int32(112)) | 1)))) as Unit)];
    let var448: (Range<UInt8>, Unit) = ((((UInt8(14) & 127))..((UInt8(109) & 127)) : ((0 | 1))), ());
    let var456: UInt8 = UInt8(201);
    func func432(): Unit { // block id: 433
        var var439: Int16 = Int16(Int16(119));
        var var444: Bool = (r'b' is Int32);
        let var477: (Rune, Bool, Int8, Float32, Int64) = (r'8', false, Int8(125), Float32(65.0), Int64(Int32(UInt8(31))));
        if ((var439 is Option<Unit>)) {
            (if (var444) {
                var448
            } else {
                ((((UInt8(37) & 127))..=((var456 & 127)) : ((((-14) | 1)))), var118)
            })
        } else {
            (var178, optionalParam377, var448, Int16(-88), (r'S', var444, var173, Float32(-24.0), var473), var477)[2]
        }[1];
        var var514: Int64 = 118;
        let var519: Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
        (Float32(-1.0) * var178, ((((UInt64(39) & 127))..((UInt64(235) & 127)) : ((((-99) | 1)))), (((UInt8(241) & 127))..((UInt8(189) &
                    127)) : ((26 | 1))), optionalParam377)[2], if (var444) {
                (((optionalParam377 & 127))..((Int32(-93) & 127)) : (((var473 | 1))))
            } else {
                (((Int32(77) & 127))..=((Int32(-56) & 127)) : (((var514 | 1))))
            }, var519[3], match (Class365()) {
                case _ =>
                    Class365();
                    var538
            })[3]
    };

    ((var396 ?? var399)[2] ?? func432());
    (if (false) {
        var584
    } else {
        var584
    }[4] ?? try { // block id: 596
        var118;
        Class365()
    } catch (e: Exception) { // block id: 599
        var118;
        Class365(Option<Int32>.None)
    } finally { // block id: 6682
        [Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, var1413, var1413,
            Option<Unit>.Some(var5663), var1413, Option<Unit>.Some(()), Option<Unit>.Some(())]
    })
}

func func352(param353: Rune): Array<UInt32> { // block id: 354
    Aggregate356.var361;
    let var6707: Option<Interface373> = Option<Interface373>.None;
    let var6775: UInt32 = UInt32(UInt8(Int8(UInt8(211))));
    var var6787: UInt8 = UInt8(UInt8(UInt8(190)));
    var var6801: Array<UInt32> = Array<UInt32>(10) {i => UInt32(Int32(-118))}
    if ((func376(namedParam379: var3354, namedParam380: var2176).var6700)) {
        match (if (false) { // block id: 6705
            var6707;
            ();
            Int8(31) > var173
        } else { // block id: 6713
            var5663;
            false
        }) {
            case true | false | true | false =>
                var173;
                var2176 = r'U'
                if (true) {
                    [var5669, var5669, var3224, UInt32(86), var5669, var3224, var5669, var3224, var5669, var5669]
                } else {
                    [var5669, UInt32(110), var3224, UInt32(73), var5669, var3224, UInt32(203), UInt32(250), var5669,
                        UInt32(142)]
                }

            case true => [UInt32(117), UInt32(184), var6767, var6767, var6767, UInt32(79), UInt32(196), UInt32(160),
                var6775, var6775]

            case _ =>
                var118;
                var5490 *= var6787
                if (var6720) {
                    [UInt32(176), UInt32(213), UInt32(196), UInt32(191), UInt32(34), UInt32(186), UInt32(88),
                        UInt32(155), UInt32(36), UInt32(36)]
                } else {
                    [UInt32(112), UInt32(169), UInt32(119), UInt32(167), UInt32(139), UInt32(233), UInt32(231),
                        UInt32(203), UInt32(84), UInt32(65)]
                }
        }
    } else {
        try { // block id: 6796
            if (false) {
                [UInt32(17), UInt32(131), UInt32(225), UInt32(170), UInt32(212), UInt32(46), UInt32(82), UInt32(224),
                    UInt32(192), UInt32(30)]
            } else {
                var6801
            }
        } finally { // block id: 6819
            var2203 %= ((Int32(-126)) | 1)
            var6824
        }
    }
}

public func func133(param134: String, optionalParam135!: Option<Bool> = Option<Bool>.None): Option<Int32> { // block id: 137
    var var154: UInt16 = UInt16(168);
    var var184: Int64 = (-99);
    let var200: Int64 = Int64(Int16(-80));
    let var213: UInt32 = UInt32(UInt32(UInt32(35)));
    match ((try { // block id: 141
        var var144: Bool = false;
        if (var144) {
            param134
        } else {
            "W6fg\\zt;^W"
        };
        UInt16(216)
    } finally { // block id: 149
        (((UInt8(241) & 127))..=((UInt8(133) & 127)) : (((-66) | 1)));
        optionalParam135;
        var154 << ((var154) & 7)
    } & 127)..=((((r'B', true, var173, var178, var184) |> func158) & 127)) : ((try { // block id: 187
        Int8(118) ^ var173;
        var192;
        24
    } catch (_) { // block id: 195
        ();
        ();
        -var200
    } | 1))) {
        case _ =>
            if (true) {
                var208
            } else {
                (((UInt16(185) & 127))..=((UInt16(35) & 127)) : ((117 | 1)))
            };
            var213 ^ var213;
            var178
    };
    let var241: Int16 = Int16(-84);
    let var251: ?Range<UInt32> = ((((UInt32(Int16(53)) & 127))..((UInt32(Int32(-60)) & 127)) : (((89 | 1)))) as Range<UInt32>);
    let var326: Int8 = Int8(14);
    func func225(param226: Bool, namedParam227!: Range<Int64>, namedParam228!: Range<Int8>, namedParam229!: Bool): Option<Option<Int32>> { // block id: 230
        match ((((((Int16(-114) & 127))..=((var241 & 127)) : (((106 | 1)))) as Range<UInt32>) ?? match (optionalParam135) {
            case caseVar248: UInt64 =>
                var251;
                Int32(13) / ((Int32(-123)) | 1);
                if (true) {
                    var265
                } else {
                    (((UInt32(154) & 127))..=((UInt32(2) & 127)) : (((var200 | 1))))
                }

            case caseVar279 =>
                var118;
                ();
                (((UInt32(224) & 127))..((UInt32(144) & 127)) : (((-82) | 1)))

            case caseVar286: Range<Int16> =>
                var118;
                var290;
                (((UInt32(11) & 127))..((UInt32(197) & 127)) : (((-16) | 1)))

            case _: Option<Bool> => var265

            case _ => (((var213 & 127))..((var213 & 127)) : (((var200 | 1))))
        })) {
            case caseVar313 =>
                var317 |= var317
                var326 & Int8(124)

            case caseVar331 =>
                Int32(78);
                Int16(-58) % ((var241) | 1);
                Int8(102)

            case _ => Int8(-6) & var173
        };
        if (try { // block id: 347
            true
        } catch (_) { // block id: 349
            true
        }) {
            func352(r'v')
        } else {
            [var3224, var3224, var6767, UInt32(86), UInt32(98), UInt32(174), var3224, var5669, var6767, var213]
        }[9];
        match (Option<Rune>.None) {
            case _ =>
                ();
                ();
                if (namedParam229) {
                    var1001
                } else {
                    var2408
                }
        }
    };

    (func225(false, namedParam227: var6851, namedParam228: var1158, namedParam229: try { // block id: 6855
        Option<Unit>.Some(());
        if (var2210) {
            var2778
        } else {
            var2778
        };
        var6728
    } catch (_) { // block id: 6863
        var173 = Int8(-89)
        var656
    }) ?? var6536)
}

public func func127(param128: Range<UInt64>): Bool { // block id: 129
    let var6954: Array<Interface373> = [Class365(
        namedParam3121: (UInt64(UInt64(23)), (), (((UInt32(101) & 127))..=((UInt32(149) & 127)) : (((-71) | 1))), (Float32(-50.0),
                Int32(78), (((Int32(-26) & 127))..=((Int32(86) & 127)) : ((43 | 1))), (), (Float32(52.0), Int32(-76), ((((UInt8(54) &
                            127))..((UInt8(220) & 127)) : ((((-108) | 1)))), ()), Int16(85), (r'2', false, Int8(76),
                        Float32(104.0), 96), (r'n', true, Int8(20), Float32(-17.0), 76))), Option<Bool>.Some(false), (((((UInt64(42) &
                    127))..=((UInt64(94) & 127)) : (((77 | 1)))), (((UInt8(24) & 127))..((UInt8(48) & 127)) : ((((-113) |
                    1)))), Int32(85)) is Option<Rune>), (Float32(-37.0), Int32(59), (((Int32(99) & 127))..((Int32(66) &
                    127)) : (((-72) | 1))), (), (Float32(-54.0), Int32(-73), ((((UInt8(62) & 127))..((UInt8(145) & 127)) : ((((-8) |
                            1)))), ()), Int16(-117), (r'L', false, Int8(-64), Float32(28.0), 35), (r'S', false, Int8(-70),
                        Float32(37.0), 89))), Int32(8)), namedParam3122: r'8',
        namedParam3123: (((Int16(29) & 127))..((Int16(UInt16(164)) & 127)) : (((Int64(UInt64(144)) | 1)))),
        optionalParam3124: Option<Option<Int32>>.Some(Option<Int32>.None)), Class365(),
        Class365(3.0, optionalParam2842: UInt16(180),
        namedParam2846: Class365(namedParam2378: (-105.0), namedParam2379: Option<Option<Int32>>.None,
            optionalParam2380: Float32(49.0),
            optionalParam2382: (((Int8(38) & 127))..((Int8(47) & 127)) : ((((-102) | 1)))))),
        Class365(namedParam2378: 46.0, namedParam2379: Option<Option<Int32>>.None,
        optionalParam2380: Float32(Float32(91.0)),
        optionalParam2382: (((Int8(-23) & 127))..((Int8(UInt8(160)) & 127)) : (((Int64(Int16(-60)) | 1))))),
        Class365(Option<Int32>.Some(Int32(UInt16(6)))),
        Class365(namedParam897: r'6', optionalParam898: false, namedParam900: UInt32(32)),
        Class365(
        namedParam3373: ((((UInt64(130) & 127))..=((UInt64(228) & 127)) : (((37 | 1)))), (((UInt8(128) & 127))..((UInt8(32) &
                127)) : ((((-49) | 1)))), Int32(46)), namedParam3374: Option<Unit>.None),
        Class365(Float64(Float64(Float32(-126.0))), optionalParam2842: UInt16(Int16(15)),
        namedParam2846: Class365(namedParam897: r'c', namedParam900: UInt32(UInt8(192)))), Class365(),
        Class365(Option<Int32>.None)];
    var loopTimeVar7096: Int64 = 0;
    do {
        loopTimeVar7096++;
        var6954
    } while ((match (func133("OYrs:zMP6a")) {
        case _: Option<Int32> =>
            if (true) {
                (var1466, (), (((UInt32(241) & 127))..((UInt32(165) & 127)) : ((112 | 1))), var1561, Option<Bool>.None,
                    true, (Float32(64.0), Int32(90), (((Int32(8) & 127))..((Int32(60) & 127)) : ((42 | 1))), (), var538),
                    Int32(25))
            } else {
                (UInt64(64), var6612, (((UInt32(120) & 127))..((UInt32(253) & 127)) : ((((-40) | 1)))), (Float32(-114.0),
                        Int32(-116), (((Int32(116) & 127))..=((Int32(31) & 127)) : ((51 | 1))), (), var6902), Option<Bool>
                        .None, false, var1561, Int32(-61))
            };
            var656

        case _ => false

        case _ => var1072 > var1072
    }) && loopTimeVar7096 < 100);
    var6720
}

public func func110(param111: (Rune, Bool, Int8, Float32, Int64)): Option<Int32> { // block id: 112
    func func115(): Option<Int32> { // block id: 116
        var118;
        var var7126: Float32 = Float32(-102.0);
        (Option<Bool>.Some(((((var5518 & 127))..=((var1466 & 127)) : (((37 | 1)))) |> func127)) ?? (var5640 ?? if (var656) { // block id: 7107
            Option<Range<UInt16>>.Some((((UInt16(218) & 127))..((UInt16(226) & 127)) : (((-83) | 1))));
            var473;
            var5958 <= var5958
        } else { // block id: 7114
            var2210 &&= var7118
            var5518 /= ((UInt64(63)) | 1)
            var7126 != var3320
        }));
        var6536
    };

    match (func115()) {
        case caseVar7132: Option<Unit> =>
            r'W';
            if (var2210) {
                Option<Int32>.Some(Int32(32))
            } else {
                Option<Int32>.None
            }

        case caseVar7142 => Option<Int32>.None

        case _ =>
            UInt64(197);
            Option<Int32>.None
    }
}

extend Class365 {}
