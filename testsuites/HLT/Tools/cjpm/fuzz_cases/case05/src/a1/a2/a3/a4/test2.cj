/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

// random seed:1648437787813

// All global variable need to be defined before use!
package test.a1.a2.a3.a4

internal import test.d1.*

public var var12: UInt16 = UInt16(UInt16(Int8(-126)))
public var var19: Float32 = Float32(-15.0)
let var93: Bool = (Option<Int32>.None is Option<Int32>)
let var105: Int32 = Int32(UInt16(UInt16(64)))
public let var7294: Array<(Rune, Bool, Int8, Float32, Int64)> = [(r'z', ((-39) is Range<UInt32>), Int8(-65), Float32(Float32(39.0)),
    (-96)), (r'T', false, Int8(102), Float32(Float32(Float32(1.0))), Int64(UInt8(147))),
    (r'S', (Option<Option<(Float32, Int32, (Range<UInt8>, Unit), Int16, (Rune, Bool, Int8, Float32, Int64), (Rune, Bool, 
            Int8, Float32, Int64))>>.None is () -> Option<Array<Option<Unit>>>), Int8(UInt8(138)), Float32(Float32(115.0)),
    62),
    (r'S', (Option<(Int32, Range<UInt8>, Range<UInt64>, Range<Int64>, Option<Class365>, UInt32)>.None is Option<(Range<UInt8>, 
        Unit)>), Int8(Int8(Int8(-73))), Float32(Float32(Float32(72.0))), (-68)),
    (r'Q', true, Int8(-24), Float32(Float32(Float32(-115.0))), (-47)),
    (r'Z', ([(r'6', false, Int8(-120), Float32(-3.0), (-84)), (r'n', true, Int8(76), Float32(-88.0), (-95)),
        (r'r', true, Int8(66), Float32(-73.0), (-125)), (r'e', false, Int8(-58), Float32(-120.0), (-121)),
        (r'g', false, Int8(-41), Float32(80.0), 116), (r'b', false, Int8(-116), Float32(-99.0), 108),
        (r'K', true, Int8(54), Float32(113.0), (-50)), (r'j', false, Int8(11), Float32(-111.0), (-34)),
        (r'2', false, Int8(34), Float32(68.0), 25), (r'F', true, Int8(11), Float32(36.0), 3)] is Aggregate356), Int8(9),
    Float32(Float32(-58.0)), 66),
    (r'F', ((Float32(122.0), Int32(-84), ((Int32(68) & 127)..(Int32(-77) & 127) : (114 | 1)), (), (Float32(-22.0), Int32(-85),
            (((UInt8(33) & 127)..(UInt8(6) & 127) : (38 | 1)), ()), Int16(110), (r'o', true, Int8(-40), Float32(-86.0),
                31), (r'G', true, Int8(37), Float32(63.0), 17))) is Option<Range<Int32>>), Int8(-40), Float32(-121.0), 92),
    (r'A', false, Int8(Int8(UInt8(97))), Float32(Float32(-112.0)), Int64(102)),
    (r'7', (UInt32(6) is (Range<UInt8>) -> Unit), Int8(-70), Float32(-14.0), (-35)),
    (r'q', (Option<Interface372>.None is Int32), Int8(118), Float32(52.0), 11)]
public var var7529: Bool = false
public let var7675: UInt8 = UInt8(Int8(-117))
public let var7704: (Unit, UInt16, Int16, Float32, Float32, Int32, Int8, UInt8) = ((), UInt16(249), Int16(Int8(35)),
    Float32(22.0), Float32(-61.0), Int32(UInt16(Int16(21))), Int8(Int8(Int8(-47))), UInt8(162))
public let var7737: Range<UInt64> = ((UInt64(4) & 127)..(UInt64(214) & 127) : ((-103) | 1))

public func func67(optionalParam68!: UInt32 = UInt32(Int32(-75)),
    optionalParam71!: Range<Int8> = ((Int8(-110) & 127)..=(Int8(UInt8(UInt8(Int8(-110)))) & 127) : ((18 | 1)))): Int16 { // block id: 79
    let var7150: ((Rune, Bool, Int8, Float32, Int64)) -> Option<Int32> = func110;
    let var7168: Option<Interface373> = Option<Interface373>.None;
    (if ((Option<Bool>.Some(var93) ?? true)) {
        (Option<Option<Int32>>.None ?? Option<Int32>.Some(var105))
    } else {
        ((var3215, true, Int8(-16), var178, var473) |> var7150)
    } ?? try { // block id: 7159
        var173 -= Int8(94)
        var105
    } catch (_) { // block id: 7164
        var4174
    } finally { // block id: 7166
        var7168;
        Int32(-111)
    });
    if (((Option<Option<Int32>>.None as Bool) ?? false)) {
        try { // block id: 7177
            var888;
            let var7180: Array<(Rune, Bool, Int8, Float32, Int64)> = [(r'N', true, Int8(Int8(14)), Float32(-104.0),
                Int64(Int32(-14))),
                (r'm', (((UInt32(101) & 127)..(UInt32(13) & 127) : ((118 | 1))) is Option<Int32>), Int8(UInt8(30)),
                Float32(Float32(-18.0)), (-104)),
                (r'g', ((Int32(-39), ((UInt8(130) & 127)..=(UInt8(22) & 127) : (2 | 1)), ((UInt64(201) & 127)..=(UInt64(228) &
                        127) : ((-1) | 1)), (((-85) & 127)..=(58 & 127) : (((-71) | 1))), Option<Class365>.None, UInt32(150)) is Option<Option<Int32>>),
                Int8(-25), Float32(Float32(104.0)), Int64(UInt64(UInt8(173)))),
                (r'p', (Option<Bool>.None is Option<Bool>), Int8(Int8(UInt8(21))), Float32(-73.0), 60),
                (r'h', false, Int8(UInt8(UInt8(57))), Float32(-93.0), Int64(Int32(85))),
                (r'S', (Int32(UInt16(182)) is (Float64) -> Interface372), Int8(Int8(Int8(-93))), Float32(Float32(-55.0)),
                Int64(UInt32(171))), (r'p', true, Int8(59), Float32(-106.0), Int64(Int16(UInt8(147)))),
                (r'n', (Option<Rune>.Some(r'B') is (Option<Bool>, Array<Unit>, ((Float32, Int32, (Range<UInt8>, Unit), 
                        Int16, (Rune, Bool, Int8, Float32, Int64), (Rune, Bool, Int8, Float32, Int64)), Option<Range<UInt32>>),
                    Array<Unit>) -> Interface372), Int8(Int8(UInt8(253))), Float32(65.0), Int64(UInt32(119))),
                (r'I', false, Int8(-28), Float32(Float32(Float32(-79.0))), Int64(Int32(Int32(45)))),
                (r'w', (Int32(Int8(-101)) is (UInt64, Unit, Range<UInt32>, (Float32, Int32, Range<Int32>, Unit, (Float32, 
                    Int32, (Range<UInt8>, Unit), Int16, (Rune, Bool, Int8, Float32, Int64), (Rune, Bool, Int8, Float32, 
                    Int64))), Option<Bool>, Bool, (Float32, Int32, Range<Int32>, Unit, (Float32, Int32, (Range<UInt8>, 
                    Unit), Int16, (Rune, Bool, Int8, Float32, Int64), (Rune, Bool, Int8, Float32, Int64))), Int32)),
                Int8(Int8(-62)), Float32(Float32(92.0)), Int64((-14)))];
            var7180
        } catch (_) { // block id: 7291
            ();
            var7294
        } finally { // block id: 7463
            if (var656) {
                var2408
            } else {
                var2408
            };
            let var7485: (Rune, Bool, Int8, Float32, Int64) = (r'5', (Int8(UInt8(223)) is Option<Option<Option<Int32>>>),
                Int8(UInt8(Int8(76))), Float32(-92.0), (-104));
            if (true) {
                [var2934, var2934, var2934, var2934, var2934, var2934, var2934,
                    (r'n', var5988, Int8(-27), Float32(-20.0), var473), var7485, var2934]
            } else {
                var7294
            }
        }
    } else {
        [if (false) { // block id: 7501
            ((UInt16(133) & 127)..=(UInt16(140) & 127) : ((-91) | 1));
            (r'C', var5858, var173, var178, var473)
        } else if (var6728) { // block id: 7510
            (r'j', var5858, Int8(-83), Float32(107.0), (-33))
        } else { // block id: 7517
            if (true) {
                (r'5', true, Int8(-88), var178, var473)
            } else {
                (var5799, var7529, var173, Float32(-64.0), 121)
            }
        }, try { // block id: 7535
            ();
            var2934
        } finally { // block id: 7538
            var5663;
            (r'p', false, var173, Float32(-80.0), var473)
        }, try { // block id: 7547
            (r'Y', var2115, var173, var19, 72)
        } catch (e: Exception) { // block id: 7554
            (var2264, true, Int8(-28), var178, var473)
        } finally { // block id: 7561
            if (var5858) {
                var3761
            } else {
                var3761
            };
            if (true) {
                var2934
            } else {
                var2934
            }
        }, (r'U', var7529, var173, Float32(24.0), 77), try { // block id: 7577
            ();
            if (false) {
                var2934
            } else {
                var2934
            }
        } finally { // block id: 7583
            var2934
        }, match (Option<Interface373>.None) {
            case caseVar7589: Array<Option<Unit>> => (r'k', var2115, Int8(-72), var7596, (-8))

            case _ =>
                var12 -= UInt16(87)
                var2934
        }, if (true) { // block id: 7608
            var2934
        } else if (true) { // block id: 7611
            Option<Interface372>.Some(
                Class365(namedParam897: r'G', optionalParam898: var5858, namedParam900: optionalParam68));
            var2115 ||= var2115
            var2934
        } else { // block id: 7621
            var2934
        }, try { // block id: 7624
            (r'w', true, Int8(87), Float32(64.0), (-69))
        } catch (e: Exception) { // block id: 7631
            var3354;
            if (false) {
                var2934
            } else {
                (var2176, false, Int8(115), Float32(44.0), 88)
            }
        }, try { // block id: 7643
            var7645
        } catch (_) { // block id: 7654
            var2913;
            var7645
        }, if (var662) { // block id: 7659
            var2934
        } else { // block id: 7661
            (r'P', false, var173, Float32(-66.0), var473)
        }]
    };
    Int16(UInt8((var7672 ?? var7675)))
}
