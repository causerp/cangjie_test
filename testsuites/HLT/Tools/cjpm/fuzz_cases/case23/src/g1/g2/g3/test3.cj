/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

// random seed:1656680033494

// All global variable need to be defined before use!
package test.g1.g2.g3

public var var77: UInt32 = UInt32(Int16(-92))
public let var97: Bool = false

public struct Aggregate16<T0> {
    public init() { // block id: 18

    }

    public static var var43: Option<Int16> = Option<Int16>.None;
    static let var59: Int16 = Int16(-48);
    private static let var147: Int64 = 112;
    let var150: Range<UInt16> = ((UInt16(211) & 127)..(UInt16(190) & 127) : ((-35) | 1));
    public func func23<T0, T1>(): Int64 { // block id: 24
        Int64(([var43, Option<Int16>.Some(Int16(27)), Option<Int16>.None, var43, var43, var43,
            Option<Int16>.Some(Int16(23)), Option<Int16>.None, var43, Option<Int16>.None][1] ?? var59 ^ var59));
        (Option<Unit>.None ?? [(), (), (), (), (), (), (), (), (), ()][2]);
        var var85: UInt64 = UInt64(94);
        let var89: Int64 = 120;
        var var102: Int64 = Int64(UInt32(UInt32(36)));
        let var124: Unit = ();
        try { // block id: 74
            var77 &= UInt32(224)
            68
        } finally { // block id: 82
            var85 >>= ((var85) & 7)
            var89
        } << (((if (false) { // block id: 94
            var89
        } else if (var97) { // block id: 99
            var102 ^= var102
            var var108: Int64 = Int64(UInt64(UInt8(253)));
            var108
        } else { // block id: 112
            ((Int32(47) & 127)..=(Int32(-127) & 127) : ((-5) | 1));
            let var115: Unit = ();
            var115;
            var102
        } * match (Option<Int16>.None) {
            case _: UInt32 =>
                var124;
                let var127: Int64 = Int64(Int8(UInt8(49)));
                var127

            case caseVar133: Unit =>
                var124;
                26

            case _: Int64 =>
                Int32(18);
                if (false) {
                    ((UInt16(162) & 127)..=(UInt16(179) & 127) : ((var147 | 1)))
                } else {
                    var150
                };
                var147

            case _ =>
                var85 ^= UInt64(93)
                var124;
                var89
        })) & 7)
    }
}

extend<T0> Aggregate16<T0> {}
