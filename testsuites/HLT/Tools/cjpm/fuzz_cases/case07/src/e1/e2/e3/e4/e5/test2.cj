/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

// random seed:1648447975737

// All global variable need to be defined before use!
package test.e1.e2.e3.e4.e5

internal import test.a1.a2.*

public let var66: Range<Int8> = ((Int8(67) & 127)..(Int8(Int8(36)) & 127) : ((25 | 1)))
var var182: Range<Int64> = (((-10) & 127)..=(10 & 127) : (10 | 1))
var var199: Range<UInt16> = ((UInt16(56) & 127)..=(UInt16(4) & 127) : (124 | 1))
var var266: Array<Float64> = [50.0, 93.0, (-19.0), 12.0, 103.0, 21.0, 58.0, (-25.0), 117.0, (-71.0)]
var var293: Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
public var var305: Int32 = Int32(UInt16(25))
public let var320: Bool = (((UInt16(172) & 127)..(UInt16(142) & 127) : ((-55) | 1)) is Range<UInt16>)
public var var327: Int8 = Int8(UInt8(UInt8(UInt8(UInt8(75)))))
public let var337: Int64 = Int64(UInt16(147))

public func func61<T0>(param62: Range<Int8>): Unit { // block id: 63

}

public func func61<T0, T1>(param20: Range<UInt64>, param21: T1, param22: T0): Array<Unit> { // block id: 23
    try { // block id: 25
        var var32: ?Unit = (((UInt16(80) & 127)..(UInt16(UInt8(41)) & 127) : (((-90) | 1))) as Unit);
        (var32 ?? ());
        var loopTimeVar44: Range<UInt64> = ((UInt64(225) & 127)..=(UInt64(134) & 127) : ((Int64(Int32(98)) | 1)));
        for (i in loopTimeVar44 where true) {
            param21
        }
    } finally { // block id: 50
        var loopTimeVar59: Int64 = 0;
        do {
            loopTimeVar59++;
            var55;
            "O*YO+(&a{1y"
        } while ((true) && loopTimeVar59 < 100);
        var66 |> func61<Range<UInt32>>
    };
    var var167: Bool = true;
    if (if (var167) { // block id: 169
        true
    } else { // block id: 171
        var173;
        true
    }) {
        (if (var167) {
            var179
        } else {
            var182
        })
    } else {
        ((var186 & 127)..(var186 & 127) : ((var186 | 1)))
    } |> func73;
    var var207: Int8 = Int8(91);
    var var212: Int32 = Int32(-117);
    var var245: Int16 = Int16(UInt16(Int16(UInt16(UInt8(114)))));
    let var261: String = ###"8mfTYQse-V"###;
    match ((match (var199) {
        case caseVar203 =>
            var207 -= Int8(31)
            var212 += Int32(108)
            if (true) {
                ((Int8(-110) & 127)..(var207 & 127) : ((var186 | 1)))
            } else {
                ((Int8(-2) & 127)..=(Int8(66) & 127) : (12 | 1))
            }

        case caseVar224 =>
            ();
            ();
            if (false) {
                ((Int8(-126) & 127)..=(var207 & 127) : ((var186 | 1)))
            } else {
                ((var207 & 127)..=(Int8(114) & 127) : (((-59) | 1)))
            }

        case _: Range<Int64> =>
            if (false) {
                ((var245 & 127)..(var245 & 127) : ((2 | 1)))
            } else {
                ((Int16(-3) & 127)..=(Int16(13) & 127) : ((-42) | 1))
            };
            ((Int8(14) & 127)..(Int8(37) & 127) : ((-104) | 1))

        case _ =>
            if (true) {
                "vRa{f8$pPN]"
            } else {
                var261
            };
            if (false) {
                var266
            } else {
                [(-70.0), 56.0, 73.0, (-29.0), 117.0, 86.0, (-56.0), 108.0, 34.0, (-108.0)]
            };
            var66
    } |> {lambdaParameter194: Range<Int8> => var173})) {
        case _: Float32 =>
            var var275: Int32 = Int32(Int8(Int8(UInt8(Int8(113)))));
            var275 >>= ((var212) & 7)
            var173;
            var var284: Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
            var284

        case _ =>
            var212 |= Int32(-69)
            var199;
            var293
    }
}
