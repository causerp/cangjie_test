/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

// random seed:1648455427176

// All global variable need to be defined before use!
package test.a1.a2.a3

let var31: Aggregate27 = Aggregate27()
var var61: Int64 = Int64(Int32(-102))
public var var73: Unit = ()
public let var122: Bool = ((UInt8(233), Float64(Float64(Float32(89.0))), UInt16(UInt16(30))) is (Bool, Int64, ((UInt32, 
    Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64), UInt32, Unit, Float64, UInt64))
var var158: UInt64 = UInt64(181)
public var var166: Float32 = Float32(-42.0)
public var var202: Int16 = Int16(-33)
public let var286: UInt16 = UInt16(UInt16(153))
public var var328: Class19 = Class19()
var var496: Int32 = Int32(UInt32(153))
var var609: UInt8 = UInt8(Int8(50))
public let var617: Rune = r'B'
public let var797: Option<((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64)> = Option<((UInt32, Unit, UInt64), 
        UInt16, UInt8, UInt64, Bool, Int64)>.None
var var846: Option<Unit> = Option<Unit>.None
public var var1403: Bool = ((r'W', (([Int8(-94), Int8(-13), Int8(-49), Int8(75), Int8(-70), Int8(117), Int8(95),
            Int8(83), Int8(-103), Int8(45)] is ((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64)), (-59), ((UInt32(157),
                (), UInt64(161)), UInt16(131), UInt8(235), UInt64(225), true, 18), UInt32(89), (), 12.0, UInt64((-120))),
    ((Int16(UInt8(218)) & 127)..=(Int16(Int16(-120)) & 127) : ((Int64(Int32(-23)) | 1))), Float32(Float32(7.0)), ([Int8(102),
        Int8(67), Int8(42), Int8(-99), Int8(25), Int8(52), Int8(-113), Int8(-18), Int8(-106), Int8(20)] is UInt64), ((UInt32(188) &
        127)..(UInt32(181) & 127) : ((38 | 1)))) is (UInt8, Float64, UInt16))
let var1465: (UInt8, Float64, UInt16) = (UInt8(UInt8(12)), Float64(Float32(Float32(-15.0))), UInt16(UInt8(45)))
var var1476: Bool = ([Int8(41), Int8(Int8(115)), Int8(UInt8(UInt8(189))), Int8(122), Int8(Int8(109)), Int8(UInt8(210)),
    Int8(UInt8(75)), Int8(90), Int8(-109), Int8(-81)] is Option<UInt64>)
var var1598: Array<Bool> = [true, false, true, false, true, false, false, false, false, true]
public let var1824: (Range<Int64>, Array<Bool>, Array<Array<Bool>>, Float64, Int8, Unit) = (((102 & 127)..=(96 & 127) : ((-126) |
        1)), [false, true, true, true, false, false, true, true, false, false], [[false, true, false, true, false, true,
        true, true, true, true], [false, false, false, true, false, false, false, true, true, false],
        [true, false, false, true, false, true, false, false, false, false],
        [true, false, false, false, false, true, false, false, false, true],
        [false, false, true, true, false, true, true, true, false, false],
        [true, true, true, true, false, false, true, false, false, true],
        [false, false, false, true, true, false, true, true, true, true],
        [false, false, true, true, false, false, false, true, false, true],
        [true, false, false, false, true, false, false, false, false, false],
        [true, false, false, true, true, true, true, true, false, true]], 56.0, Int8(UInt8(19)), ())
var var1844: (Bool, Int64, ((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64), UInt32, Unit, Float64, UInt64) = (false,
    Int64(Int8(58)), ((UInt32(Int8(-18)), (), UInt64(UInt32(75))), UInt16(92), UInt8(123), UInt64(Int32(34)), true, 47),
    UInt32(63), (), (-127.0), UInt64(197))
public var var1906: Int64 = Int64(UInt8(65))
var var1923: Int16 = Int16(-45)
public var var1939: (Unit, Float64, Range<UInt64>, (Array<Unit>, Range<Int64>, Array<Unit>, Int32, UInt8, Float64, Rune), 
    Range<UInt8>) = ((), 94.0, ((UInt64(Int16(UInt8(219))) & 127)..=(UInt64(226) & 127) : ((Int64(Int32(-68)) | 1))), ([(),
            (), (), (), (), (), (), (), (), ()], ((105 & 127)..(59 & 127) : (69 | 1)), [(), (), (), (), (), (), (), (),
            (), ()], Int32(Int32(51)), UInt8(132), Float64(Float32(Float32(-6.0))), r'R'), ((UInt8(57) & 127)..(UInt8(50) &
        127) : ((-36) | 1)))
var var2362: Bool = (((UInt64(137) & 127)..(UInt64(UInt8(UInt8(21))) & 127) : ((Int64(Int32(UInt8(41))) | 1))) is Option<((UInt32, 
    Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64)>)
var var2519: Float64 = 84.0
public var var2550: ?Option<Option<Aggregate27>> = Option<Option<Option<Aggregate27>>>.None
var var2594: Option<Option<Aggregate27>> = Option<Option<Aggregate27>>.None
public let var2602: ?UInt64 = Option<UInt64>.None
public let var2635: Range<UInt64> = ((UInt64(UInt32(Int32(UInt32(188)))) & 127)..=(UInt64(UInt16(181)) & 127) : (((-8) |
    1)))
var var2682: (Array<Unit>, Range<Int64>, Array<Unit>, Int32, UInt8, Float64, Rune) = ([(), (), (), (), (), (), (), (),
        (), ()], (((-92) & 127)..=(42 & 127) : (((-26) | 1))), [(), (), (), (), (), (), (), (), (), ()], Int32(UInt16(54)),
    UInt8(42), Float64(22.0), r'5')
let var2731: Option<(Int8, (UInt8, Float64, UInt16), Option<Option<Option<Aggregate27>>>, Range<UInt16>, (UInt8, 
    Float64, UInt16), Range<UInt8>, ((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64))> = (44 as (Int8, (UInt8, 
    Float64, UInt16), Option<Option<Option<Aggregate27>>>, Range<UInt16>, (UInt8, Float64, UInt16), Range<UInt8>, ((UInt32, 
    Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64)))
public var var2747: Int64 = Int64(UInt16(UInt8(UInt8(UInt8(29)))))
var var2844: Array<Array<Bool>> = [[true, true, false, false, true, true, false, true, true, false],
    [true, true, true, true, false, false, false, false, true, true],
    [true, true, false, true, true, true, true, true, false, true],
    [false, false, true, false, true, false, false, true, true, true],
    [true, false, true, true, true, false, true, false, false, false],
    [false, false, false, true, false, false, true, false, false, false],
    [false, true, true, false, false, true, false, false, false, false],
    [false, false, false, true, false, true, false, true, false, false],
    [false, true, false, false, true, false, true, false, true, true],
    [true, true, true, true, false, false, false, false, true, false]]
let var2913: Bool = ((((75 & 127)..(101 & 127) : ((-9) | 1)), [true, false, false, true, true, false, false, false,
        (r'g' is Array<Range<Int32>>), false], [[true, false, false, true, false, true, true, false, false, true],
        [true, false, false, false, false, false, true, false, false, true],
        [false, true, true, true, false, false, true, false, true, true],
        [true, true, true, false, true, false, false, true, true, true],
        [false, true, false, true, false, false, true, false, true, true],
        [false, true, false, true, false, false, false, true, true, true],
        [false, true, true, true, true, true, true, false, true, true],
        [true, true, false, false, false, true, false, true, false, true],
        [true, false, false, true, true, true, false, false, false, true],
        [true, true, false, false, true, false, true, true, false, false]], Float64(Float32(Float32(63.0))), Int8(UInt8(221)),
    ()) is Option<Option<Aggregate27>>)
let var2995: Bool = ((43.0, Int16(UInt8(UInt8(84))), [Int16(Int8(-91)), Int16(Int16(65)), Int16(Int16(43)), Int16(-126),
        Int16(-77), Int16(UInt8(122)), Int16(UInt8(0)), Int16(Int8(5)), Int16(-121), Int16(-10)], ((Int16(29) & 127)..(Int16(Int16(-45)) &
        127) : ((126 | 1))), ((Int8(Int8(-98)) & 127)..=(Int8(-120) & 127) : ((Int64(Int32(-110)) | 1))), (UInt32(UInt32(248)),
        (), UInt64(Int8(-66)))) is (Array<Array<Bool>>) -> (UInt8, Float64, UInt16))
public let var3335: UInt16 = UInt16(124)
var var3395: Int16 = Int16(UInt16(UInt16(74)))
public let var3405: String = """
&da{cw
4);gs
"""
var var3420: Int16 = Int16(-92)
let var3446: Range<Int8> = ((Int8(-98) & 127)..(Int8(11) & 127) : ((6 | 1)))
public let var3462: Unit = ()
let var3473: Unit = ()
public var var3667: Enum1584 = Enum1584.defaultValue
var var3679: UInt8 = UInt8(Int8(UInt8(UInt8(Int8(-26)))))
let var3733: (Int8, (UInt8, Float64, UInt16), Option<Option<Option<Aggregate27>>>, Range<UInt16>, (UInt8, Float64, 
    UInt16), Range<UInt8>, ((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64)) = (Int8(UInt8(UInt8(UInt8(173)))),
    (UInt8(60), 34.0, UInt16(Int16(-100))), ((((66 & 127)..=((-35) & 127) : (((-46) | 1))), [false, true, false, false,
            false, true, false, true, false, false], [[false, true, true, false, true, true, false, false, true, true],
            [true, false, false, true, false, false, false, true, false, false],
            [true, false, false, false, false, true, true, true, true, false],
            [false, false, true, true, true, true, true, false, true, true],
            [false, true, false, false, true, false, false, false, false, true],
            [false, true, false, false, true, false, true, false, true, false],
            [false, true, false, true, false, false, false, true, true, false],
            [true, true, false, true, false, false, true, false, false, true],
            [true, true, false, false, true, true, true, true, false, false],
            [false, true, true, true, false, true, true, true, true, false]], (-99.0), Int8(-51), ()) as Option<Option<Aggregate27>>),
    ((UInt16(Int8(UInt8(161))) & 127)..=(UInt16(Int16(-36)) & 127) : ((Int64(UInt16(146)) | 1))), (UInt8(UInt8(173)), (-45.0),
        UInt16(UInt8(229))), ((UInt8(Int8(-109)) & 127)..=(UInt8(UInt8(135)) & 127) : (((-89) | 1))), ((UInt32(13), (),
            UInt64(Int8(20))), UInt16(Int16(Int8(-82))), UInt8(151), UInt64(UInt64(172)), false, Int64(6)))
let var3955: UInt32 = UInt32(80)
public var var3993: UInt32 = UInt32(182)
public var var4046: Array<Range<Int32>> = [((Int32(46) & 127)..=(Int32(48) & 127) : (85 | 1)),
    ((Int32(UInt16(5)) & 127)..=(Int32(Int16(73)) & 127) : (((-121) | 1))),
    ((Int32(-10) & 127)..(Int32(-94) & 127) : (27 | 1)), ((Int32(-59) & 127)..=(Int32(82) & 127) : ((-69) | 1)),
    ((Int32(6) & 127)..(Int32(UInt8(207)) & 127) : ((Int64(UInt8(135)) | 1))),
    ((Int32(-105) & 127)..(Int32(46) & 127) : (90 | 1)), ((Int32(-119) & 127)..(Int32(-39) & 127) : (76 | 1)),
    ((Int32(Int16(UInt16(4))) & 127)..(Int32(-2) & 127) : (((-42) | 1))),
    ((Int32(Int32(55)) & 127)..=(Int32(UInt8(UInt8(151))) & 127) : ((4 | 1))),
    ((Int32(Int16(UInt8(3))) & 127)..=(Int32(38) & 127) : ((117 | 1)))]
public let var4127: Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
public let var4130: Range<Int64> = ((Int64(UInt32(Int16(Int8(98)))) & 127)..(102 & 127) : ((Int64(UInt8(Int8(UInt8(32)))) |
    1)))
public var var4146: Rune = r'f'
let var4227: Range<Int32> = ((Int32(50) & 127)..(Int32(5) & 127) : ((-4) | 1))
let var4399: ((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64) = ((UInt32(241), (), UInt64(80)), UInt16(98),
    UInt8(Int8(Int8(-1))), UInt64(214), true, (-41))
var var4543: Bool = true
let var4557: Bool = (Int16(Int16(58)) is UInt8)
var var4686: Unit = ()
public var var4727: UInt8 = UInt8(65)
let var4789: Option<Aggregate27> = Option<Aggregate27>.None
public var var4895: Float32 = Float32(Float32(Float32(112.0)))
let var4903: UInt32 = UInt32(186)
let var5268: Range<UInt8> = ((UInt8(Int8(83)) & 127)..(UInt8(Int8(Int8(-101))) & 127) : ((Int64(Int16(Int16(UInt8(136)))) |
    1)))
public var var5385: (Float64, Int16, Array<Int16>, Range<Int16>, Range<Int8>, (UInt32, Unit, UInt64)) = ((-102.0), Int16(Int16(Int16(Int8(115)))),
    [Int16(104), Int16(7), Int16(UInt16(UInt16(152))), Int16(56), Int16(Int8(Int8(-46))), Int16(47), Int16(UInt16(196)),
        Int16(Int8(UInt8(155))), Int16(UInt16(Int8(35))), Int16(-55)], ((Int16(105) & 127)..=(Int16(79) & 127) : ((-32) |
        1)), ((Int8(49) & 127)..(Int8(108) & 127) : (48 | 1)), (UInt32(Int32(-5)), (), UInt64(65)))
var var5522: Option<Array<Bool>> = Option<Array<Bool>>.None
public let var5569: Range<Int16> = ((Int16(-10) & 127)..=(Int16(-92) & 127) : (60 | 1))
public var var5748: Unit = ()
var var5894: Bool = true
public let var5946: Int8 = Int8(Int8(-114))
public var var6164: Int16 = Int16(UInt16(Int16(-99)))
public let var6176: (UInt32, Unit, UInt64) = (UInt32(Int32(-28)), (), UInt64(Int32(37)))
public var var6217: Option<Class19> = ((Option<Bool>.None as Class19) as Class19)

public open class Class19 {
    public init() { // block id: 21

    }

    public static var var24: UInt64 = UInt64(215);
    var var107: (UInt32, Unit, UInt64) = (UInt32(169), (), UInt64(91));
    var var115: Unit = ();
    static let var219: Unit = ();
    let var355: Float64 = 0.0;
    private static let var358: Bool = false;
    public static var var417: Bool = false;
    public let var423: (UInt8, Float64, UInt16) = (UInt8(224), 88.0, UInt16(183));
    public let var466: Unit = ();
    static let var529: UInt32 = UInt32(105);
    public let var624: Float64 = 113.0;
    var var1356: Bool = false;
    public open func func1575(param1576: Range<Int32>): Rune { // block id: 1577
        r'd'
    };

    public init(param4014: Array<Range<Int32>>, param4015: (UInt8) -> Array<Bool>, namedParam4018!: Range<UInt64>) { // block id: 4019
        match (try { // block id: 4022
            if (false) {
                Enum1584.defaultValue
            } else {
                var3667
            }
        } finally { // block id: 4027
            namedParam4018;
            Enum1584.defaultValue
        }) {
            case defaultValue =>
                if (var2995) {
                    var617
                } else {
                    r'Q'
                }

            case _ =>
                ();
                if (false) {
                    [false, false, false, true, true, false, false, false, false, true]
                } else {
                    var1598
                };
                var617
        }
    };

    public init(param4200: Range<UInt8>, param4201: Array<Range<Int32>>) { // block id: 4202
        match (UInt32(try { // block id: 4206
            var286 / ((var3335) | 1)
        } finally { // block id: 4210
            "weBt^a45^!";
            UInt16(31) ^ UInt16(75)
        })) {
            case _ =>
                var219;
                var496 <<= ((var496) & 7)
        }
    };

    static var var5216: Option<Float64> = Option<Float64>.None;
    public func func514(
        optionalParam515!: Option<UInt64> = ((((UInt16(134) & 127)..(UInt16(113) & 127) : (95 | 1)) as UInt64) as UInt64),
        optionalParam519!: Rune = r'D', namedParam521!: Int64, namedParam522!: Range<UInt8>): Float64 { // block id: 523
        if (match (var529) {
            case _ =>
                var var543: ((UInt32, Unit, UInt64), Range<UInt8>, Bool) = ((UInt32(88), (), UInt64(90)), ((UInt8(249) &
                        127)..=(UInt8(153) & 127) : (79 | 1)), (Int64(UInt8(153)) is UInt64));
                if (var122) {
                    ((UInt32(231), var219, UInt64(176)), namedParam522, true)
                } else {
                    var543
                }
        }[2]) {
            ((Int16(-2) & 127)..(Int16(28) & 127) : ((-33) | 1))
        } else {
            (Class19() |> {
                lambdaParameter664: Class19 =>
                    let var680: (Rune, (Bool, Int64, ((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64), 
                        UInt32, Unit, Float64, UInt64), Range<Int16>, Float32, Bool, Range<UInt32>) = (r'S', ((([(), (),
                                    (), (), (), (), (), (), (), ()], (((-25) & 127)..((-116) & 127) : ((103 | 1))), [(),
                                    (), (), (), (), (), (), (), (), ()], Int32(88), UInt8(243), (-20.0), r'P') is Aggregate27),
                            Int64(UInt64(118)), ((UInt32(37), (), UInt64(55)), UInt16(239), UInt8(UInt8(72)), UInt64(78),
                                ([(), (), (), (), (), (), (), (), (), ()] is Range<UInt32>), 58), UInt32(182), (), (-55.0),
                            UInt64(Int8(88))), ((Int16(UInt8(30)) & 127)..(Int16(-28) & 127) : ((2 | 1))), Float32(Float32(Float32(100.0))),
                        (false is Range<Int32>), ((UInt32(29) & 127)..=(UInt32(14) & 127) : (56 | 1)));
                    if (if (true) { // block id: 670
                        ();
                        false
                    } else { // block id: 673
                        false && var122
                    }) {
                        (if (var358) {
                            var680
                        } else {
                            (optionalParam519, (var358, var61, (var107, var286, var609, var24, false, (-16)), var529, (),
                                    var624, UInt64(171)), ((Int16(98) & 127)..=(var202 & 127) : ((namedParam521 | 1))),
                                Float32(50.0), true, ((var529 & 127)..=(var529 & 127) : ((var61 | 1))))
                        })
                    } else {
                        (Int16(82) |> func753)
                    }[2]
            })
        };
        try { // block id: 5185
            var var5187: Option<Option<Range<UInt8>>> = Option<Option<Range<UInt8>>>.Some(
                (((Option<Option<Range<UInt8>>>.None is (Range<Int64>) -> Int16), 12, ((UInt32(121), (), UInt64(30)),
                        UInt16(124), UInt8(61), UInt64(230), true, 71), UInt32(UInt16(80)), (), 2.0, UInt64(Int16(71))) as Range<UInt8>));
            var5187;
            var5216.getOrThrow()
        } finally { // block id: 5218
            var loopTimeVar5223: Int64 = 0;
            do {
                loopTimeVar5223++;
            } while ((true) && loopTimeVar5223 < 100);
            (Option<Float64>.Some((-43.0)) ?? (-9.0))
        }
    };

    protected let var5254: Range<Int16> = ((Int16(-6) & 127)..=(Int16(-43) & 127) : (64 | 1));
    private static var var5292: Option<Int8> = Option<Int8>.None;
    public let var5572: Float32 = Float32(-113.0);
    protected func func505(namedParam506!: Array<Unit>, namedParam507!: UInt16, namedParam508!: Range<Int32>,
        namedParam509!: UInt16): (Rune, (Bool, Int64, ((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64), 
        UInt32, Unit, Float64, UInt64), Range<Int16>, Float32, Bool, Range<UInt32>) { // block id: 510
        let var5230: ?Range<UInt8> = (Option<Int8>.Some(Int8(62)) as Range<UInt8>);
        var328.func514(optionalParam519: match (var5230) {
            case caseVar5236: Option<Aggregate27> => var4146

            case caseVar5241 =>
                [((Int32(-5) & 127)..(Int32(-117) & 127) : (94 | 1)),
                    ((Int32(-11) & 127)..=(Int32(-74) & 127) : ((-81) | 1)),
                    ((Int32(99) & 127)..(Int32(-79) & 127) : (8 | 1)), ((Int32(-20) & 127)..(Int32(60) & 127) : (65 | 1)),
                    ((Int32(56) & 127)..=(Int32(115) & 127) : (126 | 1)),
                    ((Int32(-25) & 127)..=(Int32(51) & 127) : (48 | 1)),
                    ((Int32(-68) & 127)..(Int32(-118) & 127) : (36 | 1)),
                    ((Int32(-36) & 127)..(Int32(-53) & 127) : (15 | 1)),
                    ((Int32(-124) & 127)..(Int32(14) & 127) : (58 | 1)),
                    ((Int32(-96) & 127)..=(Int32(53) & 127) : (25 | 1))];
                var3462;
                if (false) {
                    r'W'
                } else {
                    var617
                }

            case _ => r'U'
        }, namedParam521: match (var5254) {
            case caseVar5258 =>
                ((UInt32(190) & 127)..=(UInt32(49) & 127) : ((-3) | 1));
                (-97)

            case _ =>
                var797;
                ((Int16(-41) & 127)..=(Int16(-93) & 127) : ((-37) | 1));
                var1906
        }, namedParam522: var5268);
        let var5286: Int8 = Int8(Int8(Int8(Int8(74))));
        var var5327: Array<Int16> = Array<Int16>(10) {i => Int16(Int16(Int8(-117)))}
        match (try { // block id: 5281
            if (var2995) {
                Option<Int8>.Some(var5286)
            } else {
                var5292
            }
        } catch (e: Exception) { // block id: 5294
            var158--;
            Option<Int8>.None
        } finally { // block id: 5298
            var219;
            Option<Int8>.Some(Int8(62))
        }) {
            case _: UInt32 => Aggregate27()

            case _: (Rune, (Bool, Int64, ((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64), UInt32, Unit, 
                    Float64, UInt64), Range<Int16>, Float32, Bool, Range<UInt32>) =>
                [((Int32(-71) & 127)..(Int32(0) & 127) : ((-107) | 1)),
                    ((Int32(41) & 127)..(Int32(-79) & 127) : ((-94) | 1)),
                    ((Int32(71) & 127)..=(Int32(67) & 127) : ((-121) | 1)),
                    ((Int32(125) & 127)..(Int32(-53) & 127) : (31 | 1)),
                    ((Int32(116) & 127)..=(Int32(-5) & 127) : ((-124) | 1)),
                    ((Int32(-71) & 127)..(Int32(89) & 127) : (5 | 1)),
                    ((Int32(-72) & 127)..=(Int32(-60) & 127) : ((-102) | 1)),
                    ((Int32(36) & 127)..=(Int32(17) & 127) : (2 | 1)), ((Int32(63) & 127)..(Int32(-110) & 127) : (59 | 1)),
                    ((Int32(73) & 127)..(Int32(-61) & 127) : (73 | 1))];
                if (var2362) {
                    Aggregate27(namedParam5314: var107, namedParam5315: var1598, namedParam5316: var5327)
                } else {
                    var31
                }

            case caseVar5355 =>
                ();
                var466;
                Aggregate27(namedParam5314: var107, namedParam5315: var1598,
                    namedParam5316: [Int16(66), Int16(-42), Int16(-41), Int16(40), Int16(-125), Int16(57), Int16(82),
                        Int16(48), Int16(-120), Int16(90)])

            case caseVar5365 =>
                Option<Range<Int32>>.Some(var4227);
                let var5370: Range<UInt16> = ((UInt16(152) & 127)..(UInt16(212) & 127) : (39 | 1));
                var5370;
                Aggregate27()

            case _ =>
                if (var4543) {
                    (var355, var3395, var5327, var5254, var3446, var107)
                } else {
                    var5385
                };
                Aggregate27()
        };
        var var5478: (Rune, (Bool, Int64, ((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64), UInt32, Unit, 
            Float64, UInt64), Range<Int16>, Float32, Bool, Range<UInt32>) = (r'V', ((((UInt64(178) & 127)..=(UInt64(2) &
                    127) : ((-104) | 1)) is (Int8, (UInt8, Float64, UInt16), Option<Option<Option<Aggregate27>>>, Range<UInt16>, 
                    (UInt8, Float64, UInt16), Range<UInt8>, ((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64))),
                Int64(Int8(-84)), ((UInt32(201), (), UInt64(108)), UInt16(Int8(46)), UInt8(239), UInt64(UInt8(215)), (Option<Bool>
                        .Some(true) is (Option<UInt64>, Rune, Int64, Range<UInt8>) -> Float64), (-127)), UInt32(140), (),
                Float64(Float32(Float32(87.0))), UInt64(206)), ((Int16(110) & 127)..(Int16(30) & 127) : (7 | 1)),
            Float32(Float32(118.0)), true, ((UInt32(67) & 127)..=(UInt32(2) & 127) : (77 | 1)));
        var var5545: UInt32 = UInt32(UInt16(158));
        let var5558: Range<UInt32> = ((UInt32(57) & 127)..=(UInt32(184) & 127) : ((-62) | 1));
        if (if (var2362) { // block id: 5423
            ();
            let var5426: (UInt8, Float64, UInt16) = (UInt8(Int8(UInt8(37))), Float64(Float64(Float32(68.0))), UInt16(UInt8(UInt8(UInt8(92)))));
            var5426;
            true
        } else { // block id: 5439
            var166 = Float32(113.0)
            Int32(106);
            UInt8(35) == var4727
        }) {
            match {
                case true =>
                    let var5473: Range<UInt32> = ((UInt32(112) & 127)..(UInt32(180) & 127) : ((-34) | 1));
                    if (true) {
                        (var617, var1844, var5254, var166, var358, ((UInt32(9) & 127)..=(UInt32(207) & 127) : (107 | 1)))
                    } else {
                        (r'K', (var2995, var61, var4399, var4903, var115, (-96.0), var24), ((Int16(20) & 127)..(Int16(86) &
                                127) : ((-35) | 1)), var4895, false, var5473)
                    }
                case _ =>
                    var466;
                    var5478
            }
        } else {
            (if (("0j(<oWeU4r" is ((Rune, (Bool, Int64, ((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64), 
                    UInt32, Unit, Float64, UInt64), Range<Int16>, Float32, Bool, Range<UInt32>), Option<Aggregate27>) -> Class19)) {
                try { // block id: 5515
                    if (false) {
                        Option<Aggregate27>.Some(var31)
                    } else {
                        var4789
                    };
                    var5522;
                    var5478
                } catch (e: Exception) { // block id: 5525
                    var466;
                    var3420 /= ((var1923) | 1)
                    var5478
                } finally { // block id: 5531
                    (var617, (true, var2747, (var107, UInt16(52), UInt8(24), var24, var1403, (-65)), var5545, (), 43.0,
                            var158), ((var202 & 127)..(var1923 & 127) : ((42 | 1))), var166, var122, var5558)
                }
            } else {
                try { // block id: 5561
                    var5478
                } finally { // block id: 5563
                    ();
                    (r'i', var1844, var5569, var5572, true, ((var3993 & 127)..(var3955 & 127) : (((-78) | 1))))
                }
            })
        }
    };

    let var5604: ?Range<Int64> = Option<Range<Int64>>.None;
    protected func func408(param409: UInt8, param410: Range<Int8>, namedParam411!: Range<UInt8>): Float32 { // block id: 412
        try { // block id: 414
            if (var417) { // block id: 419
                var219;
                ();
                var423
            } else if (true) { // block id: 429
                ();
                if (true) {
                    var423
                } else {
                    (UInt8(27), var355, var286)
                }
            } else { // block id: 438
                (param409, var355, UInt16(152))
            };
            var423;
            try { // block id: 445
                ();
                if (false) {
                    ">k\"X(_7@&a"
                } else {
                    """
bC$NP
a{*)';
"""
                };
                Int32(84)
            } catch (_) { // block id: 452
                var24;
                ();
                let var456: Int32 = Int32(UInt32(109));
                var456
            } finally { // block id: 459
                Int32(-32)
            }
        } catch (_) { // block id: 461
            Option<Option<Aggregate27>>.None;
            this.var466;
            var var474: Int8 = Int8(Int8(89));
            var var480: Int32 = Int32(UInt8(UInt8(Int8(-13))));
            match {
                case true =>
                    Int8(-70) << ((var474) & 7);
                    var286;
                    var480 - var480
                case _ => -Int32(30)
            }
        } finally { // block id: 489
            if (var417) { // block id: 492
                ((UInt64(41) & 127)..=(UInt64(236) & 127) : (0 | 1));
                var166;
                var496
            } else { // block id: 499
                var496
            }
        };
        var var5600: (Float32) -> Option<Option<Aggregate27>> = func2597;
        Float32(Float64(func505(namedParam506: [(), (), (), (), (), (), (), (), (), ()], namedParam507: var3335,
            namedParam508: ((var496 & 127)..=(Int32(-55) & 127) : (((-67) | 1))), namedParam509: UInt16(238))[3]) **
            Float64(Int32(match (if (var122) {
            Enum1584.enumValue5591(var5600, func786, var5604)
        } else {
            Enum1584.enumValue5591(var5600, func786, Option<Range<Int64>>.None)
        }) {
            case _: Range<Int32> =>
                var24 += UInt64(70)
                Float32(76.0) * Float32(-84.0)

            case caseVar5621 =>
                if (true) {
                    [((Int32(79) & 127)..(Int32(-93) & 127) : ((-94) | 1)),
                        ((Int32(104) & 127)..=(Int32(39) & 127) : (106 | 1)),
                        ((Int32(-81) & 127)..=(Int32(95) & 127) : (84 | 1)),
                        ((Int32(-92) & 127)..(Int32(109) & 127) : (57 | 1)),
                        ((Int32(18) & 127)..=(Int32(24) & 127) : ((-44) | 1)),
                        ((Int32(-111) & 127)..(Int32(-85) & 127) : (107 | 1)),
                        ((Int32(-48) & 127)..(Int32(-31) & 127) : ((-88) | 1)),
                        ((Int32(86) & 127)..(Int32(-41) & 127) : (100 | 1)),
                        ((Int32(-85) & 127)..(Int32(-122) & 127) : (70 | 1)),
                        ((Int32(57) & 127)..=(Int32(-78) & 127) : (36 | 1))]
                } else {
                    var4046
                };
                ();
                -var166

            case _ =>
                if (var2362) {
                    var1939
                } else {
                    var1939
                };
                Float32(-90.0)
        }) & 3))
    };

    let var5763: Bool = false;
    protected func func389(param390: Int16): Unit { // block id: 391
        try { // block id: 393
            try { // block id: 395
                ();
                var166 *= var166
                ()
            } catch (e: Exception) { // block id: 401
                ()
            };
            [(), (), (), (), (), (), (), (), (), ()][3];
            func408(var609, var3446, namedParam411: ((UInt8(31) & 127)..(UInt8(103) & 127) : ((-122) | 1)))
        } catch (_) { // block id: 5640
            var2747 += (-111)
            [(), (), (), (), (), (), (), (), (), ()];
            var var5651: Option<Float32> = Option<Float32>.None;
            (var5651 ?? var166)
        };
        var var5671: Rune = r'r';
        var var5693: Unit = ();
        ((Option<Option<Option<Aggregate27>>>.None as Rune) ?? match (var4227) {
            case caseVar5665: Array<Array<Bool>> =>
                var3667;
                if (true) {
                    var5671
                } else {
                    r'2'
                }

            case caseVar5676: Aggregate2423 =>
                if (true) {
                    var4146
                } else {
                    var4146
                }

            case _ =>
                if (true) {
                    Aggregate27()
                } else {
                    var31
                };
                var5671

            case _ =>
                var5693;
                var5671;
                var5671
        });
        var loopTimeVar5830: Int64 = 0;
        do {
            loopTimeVar5830++;
            var var5778: (Rune, (Bool, Int64, ((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64), UInt32, 
                Unit, Float64, UInt64), Range<Int16>, Float32, Bool, Range<UInt32>) = (r'd', ((Option<Aggregate27>
                        .Some(
                            Aggregate27(namedParam5314: (UInt32(169), (), UInt64(251)),
                                namedParam5315: [false, false, true, true, false, false, false, true, true, false],
                                namedParam5316: [Int16(67), Int16(-48), Int16(50), Int16(118), Int16(-9), Int16(9),
                                    Int16(-122), Int16(-45), Int16(3), Int16(120)])) is (Float64, Int16, Array<Int16>, 
                        Range<Int16>, Range<Int8>, (UInt32, Unit, UInt64))), 80, ((UInt32(207), (), UInt64(160)), UInt16(172),
                        UInt8(UInt8(166)), UInt64(202), false, 42), UInt32(Int16(81)), (), 63.0, UInt64(UInt8(254))), ((Int16(-85) &
                    127)..=(Int16(108) & 127) : ((-60) | 1)), Float32(-44.0), (Option<Unit>.Some(()) is (Range<UInt8>,
                    Option<Option<Aggregate27>>, Range<Int16>) -> Option<Option<Aggregate27>>), ((UInt32(117) & 127)..(UInt32(126) &
                    127) : (5 | 1)));
            try { // block id: 5771

            } finally { // block id: 5772
                ((UInt64(173) & 127)..=(var158 & 127) : ((83 | 1)));
                var5778;
                var5693
            };
            ()
        } while ((if (var417) { // block id: 5701
            var1403 ||= true
            [var1598, [true, true, true, true, false, true, false, false, false, false],
                [false, true, true, false, true, false, true, false, false, false],
                [false, false, false, true, true, true, false, true, true, true],
                [false, true, false, true, false, false, false, true, false, false],
                [var358, var358, false, true, var122, true, false, var1476, var4557, false],
                [true, false, true, true, false, false, false, true, true, true],
                [var4543, false, false, false, true, var358, false, false, false, true],
                [false, true, true, false, true, true, true, false, true, false],
                [false, false, true, false, true, false, false, true, false, true]];
            UInt64(Int64(55) ** (UInt64(54) & 3))
        } else { // block id: 5739
            if (true) {
                var797
            } else {
                Option<((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64)>.Some(
                    ((var3955, var5748, UInt64(163)), var286, var609, var24, var4557, (-108)))
            };
            UInt64(156)
        } > match {
            case var1403 => -var24
            case var5763 => UInt64(173)
            case _ => var158
        }) && loopTimeVar5830 < 100)
    };

    public let var5888: Int32 = Int32(11);
    protected open func func342(namedParam343!: (UInt8, Float64, UInt16), namedParam344!: Unit, namedParam345!: Bool): Unit { // block id: 346
        var loopTimeVar371: Range<UInt64> = ((UInt64(238) & 127)..(UInt64(250) & 127) : ((Int64(Int64(Int8(96))) | 1)));
        for (i in loopTimeVar371 where 96.0 == if (false) { // block id: 352
            ();
            var355
        } else if (var358) { // block id: 360
            var73;
            Float64(Int64(var355) % Int64((Int32(var355)) | 1))
        } else { // block id: 365
            ();
            (-104.0) + var355
        }) {
        }
        this.func389(var1923);
        var var5847: Range<UInt16> = ((UInt16(Int16(UInt16(109))) & 127)..(UInt16(UInt16(UInt16(200))) & 127) : ((Int64(UInt32(138)) |
            1)));
        let var5897: ?Bool = ((Int16(-38) as Bool) as Bool);
        match ((var4127, if (true) {
                ((38 & 127)..(var61 & 127) : ((49 | 1)))
            } else {
                (((-86) & 127)..(88 & 127) : (30 | 1))
            }, try { // block id: 5843
                ();
                [var5847, ((UInt16(152) & 127)..(UInt16(206) & 127) : (81 | 1)),
                    ((UInt16(22) & 127)..=(var3335 & 127) : (((-3) | 1))),
                    ((UInt16(44) & 127)..=(UInt16(95) & 127) : ((-98) | 1)), var5847,
                    ((UInt16(59) & 127)..(UInt16(140) & 127) : (96 | 1)),
                    ((UInt16(187) & 127)..(UInt16(31) & 127) : ((-77) | 1)), var5847,
                    ((UInt16(27) & 127)..(UInt16(49) & 127) : (104 | 1)), var5847];
                var4127
            } catch (e: Exception) { // block id: 5870
                if (var417) {
                    [(), (), (), (), (), (), (), (), (), ()]
                } else {
                    var4127
                }
            }, Int32(Int16(100)), UInt8(UInt8(66)), (-89.0), (Option<Rune>.Some(r'6') ?? var617))) {
            case _: Option<Unit> =>
                var219;
                Option<Range<Int32>>.None;
                ()

            case _ => var1476 ||= false
        }
    };

    public static var var5976: ?Rune = Option<Rune>.None
}

public struct Aggregate27 {
    public init() { // block id: 29

    }

    static let var44: (UInt32, Unit, UInt64) = (UInt32(34), (), UInt64(204));
    let var2524: UInt16 = UInt16(222);
    public init(namedParam5314!: (UInt32, Unit, UInt64), namedParam5315!: Array<Bool>, namedParam5316!: Array<Int16>) { // block id: 5317
        Option<((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64)>.None;
        var loopTimeVar5323: Int64 = 0;
        do {
            loopTimeVar5323++;
        } while ((true) && loopTimeVar5323 < 100)
    };

    public func func34(optionalParam35!: Int32 = Int32(-112), namedParam37!: UInt8): UInt64 { // block id: 38
        var var87: UInt16 = UInt16(UInt8(62));
        try { // block id: 40
            var44[1];
            let var57: UInt64 = UInt64(107);
            (var44, UInt16(68), namedParam37, var57, true, var61)[3]
        } finally { // block id: 65
            var var68: Bool = (UInt64(100) is Int8);
            if (var68) { // block id: 71
                var73;
                ()
            } else if (var68) { // block id: 77

            }
            (Option<((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64)>.None ?? (var44, var87, UInt8(128),
                UInt64(44), false, 122));
            var var6255: (UInt16) -> UInt64 = func95<Int16, Unit, Option<Rune>>;
            var286 |> var6255
        }
    }
}

func func556(param557: Class19): Range<Int16> { // block id: 558
    let var645: Unit = ();
    func func561(param562: Int64, param563: Class19): Array<Unit> { // block id: 564
        var var575: Unit = ();
        try { // block id: 566
            [var73, var73, var73, (), (), var73, var575, (), var575, ()]
        } catch (e: Exception) { // block id: 580
            var var613: Float64 = Float64(90.0);
            ([(), (), var73, var575, (), var73, var575, var73, (), var575], (((-50) & 127)..=((-116) & 127) : (6 | 1)), [var575,
                    (), (), (), var73, (), var73, var73, (), var73], var496, var609, var613, var617)[2]
        } finally { // block id: 620
            param557.var624;
            let var629: Array<Unit> = Array<Unit>(10) {i => ()}
            if (true) {
                var629
            } else {
                [(), var73, var645, (), var73, var575, (), var73, (), ()]
            }
        }
    };

    func561(Int64(var202), Class19())[8];
    let var660: Range<Int16> = ((Int16(-78) & 127)..=(Int16(-98) & 127) : (114 | 1));
    var660
}

func func956(param957: Range<UInt64>): Bool { // block id: 958
    var609 -= var609
    let var969: (Range<Int64>, Array<Bool>, Array<Array<Bool>>, Float64, Int8, Unit) = ((((-55) & 127)..(Int64(UInt16(Int16(-54))) &
            127) : ((121 | 1))), [false, true, false, false, true, false, true, false, false, true], [[(UInt8(204) is (Range<Int64>, 
            Array<Bool>, Array<Array<Bool>>, Float64, Int8, Unit)),
            (((UInt32(156), (), UInt64(211)), ((UInt8(111) & 127)..=(UInt8(249) & 127) : ((-83) | 1)), true) is Array<Bool>),
            (Option<((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64)>.None is ((Rune, (Bool, Int64, ((UInt32, 
                Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64), UInt32, Unit, Float64, UInt64), Range<Int16>, 
                Float32, Bool, Range<UInt32>), Option<Aggregate27>) -> Class19),
            ([(), (), (), (), (), (), (), (), (), ()] is Option<UInt64>), false, (() is Unit),
            ((UInt32(55), (), UInt64(173)) is Range<UInt64>), false, true,
            ((((102 & 127)..((-7) & 127) : ((113 | 1))), [false, true, false, true, true, true, false, true, true, false],
            [[true, false, true, false, true, false, false, false, false, true],
                [true, true, true, false, false, true, false, false, true, false],
                [false, false, true, false, true, false, true, true, false, false],
                [true, false, true, false, true, true, true, false, false, true],
                [true, true, true, true, true, true, false, false, true, true],
                [false, false, true, false, false, true, false, true, false, false],
                [false, true, true, false, true, true, false, false, true, true],
                [true, true, false, false, true, false, false, false, true, false],
                [false, true, true, true, false, false, true, false, true, false],
                [true, false, false, false, true, false, true, true, false, false]], (-29.0), Int8(-29), ()) is (Range<Int64>, 
            Array<Bool>, Array<Array<Bool>>, Float64, Int8, Unit))],
            [true,
            (((UInt32(16), (), UInt64(213)), ((UInt8(207) & 127)..(UInt8(160) & 127) : ((-106) | 1)), false) is Range<Int8>),
            false, false, (Option<Aggregate27>.Some(Aggregate27()) is Range<Int16>), true, true, true, true,
            ((UInt8(242), 92.0, UInt16(34)) is Int16)],
            [((r'q', (true, (-36), ((UInt32(127), (), UInt64(26)), UInt16(128), UInt8(79), UInt64(32), true, 55), UInt32(68),
                (), (-107.0), UInt64(230)), ((Int16(-10) & 127)..=(Int16(113) & 127) : (37 | 1)), Float32(-76.0), true, ((UInt32(156) &
                127)..=(UInt32(25) & 127) : ((109 | 1)))) is Range<UInt32>), true, false, false, false, false, true,
            ("""
nO*@Z
%pdau
""" is Array<Int8>), (Option<Aggregate27>.None is (UInt32, Unit, UInt64)),
            (Aggregate27() is Int32)],
            [(((Int32(-53) & 127)..=(Int32(-109) & 127) : ((21 | 1))) is Range<UInt16>), (Int32(47) is Rune), true,
            (([(), (), (), (), (), (), (), (), (), ()], (((-36) & 127)..(37 & 127) : ((74 | 1))), [(), (), (), (), (),
                (), (), (), (), ()], Int32(38), UInt8(118), (-91.0), r'S') is ((Rune, (Bool, Int64, ((UInt32, Unit, 
                UInt64), UInt16, UInt8, UInt64, Bool, Int64), UInt32, Unit, Float64, UInt64), Range<Int16>, Float32, 
                Bool, Range<UInt32>), Option<Aggregate27>) -> Class19), false, false, false, false, false, true],
            [true, false, (((UInt32(175), (), UInt64(51)), UInt16(178), UInt8(236), UInt64(107), true, 81) is Array<Unit>),
            ([Int8(-48), Int8(-95), Int8(88), Int8(117), Int8(3), Int8(82), Int8(-60), Int8(-94), Int8(72), Int8(-61)] is (Range<Int64>, 
            Array<Bool>, Array<Array<Bool>>, Float64, Int8, Unit)),
            (((UInt8(94) & 127)..=(UInt8(159) & 127) : ((121 | 1))) is (Bool, Int64, ((UInt32, Unit, UInt64), UInt16, 
            UInt8, UInt64, Bool, Int64), UInt32, Unit, Float64, UInt64)), false, true,
            (((UInt32(89), (), UInt64(64)), UInt16(149), UInt8(0), UInt64(183), true, 83) is ((Rune, (Bool, Int64, ((UInt32, 
                Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64), UInt32, Unit, Float64, UInt64), Range<Int16>, 
                Float32, Bool, Range<UInt32>), Option<Aggregate27>) -> Class19),
            (((Int8(93) & 127)..=(Int8(-30) & 127) : (99 | 1)) is UInt8), false],
            [([[true, false, true, false, true, true, false, true, false, false],
            [true, true, true, false, false, true, true, true, true, true],
            [false, true, false, true, false, false, true, false, false, true],
            [true, true, true, false, true, false, true, true, false, false],
            [true, true, false, false, false, true, false, false, true, false],
            [true, false, true, true, true, false, true, true, false, false],
            [false, false, false, false, true, false, true, true, false, false],
            [true, true, true, false, false, true, true, true, false, true],
            [true, true, false, true, true, false, false, true, false, false],
            [false, true, true, false, true, true, false, true, false, true]] is Int64), false, (() is Bool), false,
            ((r'a', (false, (-110), ((UInt32(245), (), UInt64(239)), UInt16(252), UInt8(150), UInt64(169), false, (-7)),
                UInt32(20), (), (-116.0), UInt64(162)), ((Int16(-94) & 127)..=(Int16(-43) & 127) : ((85 | 1))), Float32(-16.0),
            true, ((UInt32(173) & 127)..(UInt32(27) & 127) : ((3 | 1)))) is UInt64),
            (Option<Aggregate27>.Some(Aggregate27()) is Int16), (Option<Option<Aggregate27>>.None is Array<Array<Bool>>),
            false,
            (([(), (), (), (), (), (), (), (), (), ()], (((-48) & 127)..((-115) & 127) : ((124 | 1))), [(), (), (), (),
                (), (), (), (), (), ()], Int32(-99), UInt8(215), (-84.0), r'e') is Bool),
            (Option<Option<Aggregate27>>.Some(Option<Aggregate27>.Some(Aggregate27())) is ((Rune, (Bool, Int64, ((UInt32, 
                Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64), UInt32, Unit, Float64, UInt64), Range<Int16>, 
                Float32, Bool, Range<UInt32>), Option<Aggregate27>) -> Class19)],
            [true, false, false, false, true, true, true, true, false, false],
            [true, true, true, false, true, true, false, true, false, false],
            [((-120.0) is (Int64, Class19) -> Array<Unit>),
            (([(), (), (), (), (), (), (), (), (), ()], (((-29) & 127)..=((-55) & 127) : ((91 | 1))), [(), (), (), (),
                (), (), (), (), (), ()], Int32(83), UInt8(198), 42.0, r'9') is (Rune, (Bool, Int64, ((UInt32, Unit, 
            UInt64), UInt16, UInt8, UInt64, Bool, Int64), UInt32, Unit, Float64, UInt64), Range<Int16>, Float32, Bool, 
            Range<UInt32>)), ((-78.0) is Rune), false, true, true, ((-107.0) is Array<Array<Bool>>),
            (Float32(66.0) is (UInt8, Float64, UInt16)), false,
            (Option<((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64)>.None is Range<UInt16>)],
            [(((Int16(66) & 127)..=(Int16(-63) & 127) : (((-111) | 1))) is Unit), (Option<Unit>.None is Int8),
            (UInt32(151) is (Class19) -> Range<Int16>), (###"UJ%9]7[v'&"### is Option<UInt64>),
            (Aggregate27() is UInt64), (((UInt32(219) & 127)..=(UInt32(104) & 127) : ((-25) | 1)) is Array<Unit>), false,
            false, false, true]], (-7.0), Int8(Int8(UInt8(218))), ());
    var969[2][2][2]
}

public enum Enum1584 {
    defaultValue
    | enumValue5591((Float32) -> Option<Option<Aggregate27>>,
        (Range<Int64>) -> (Rune, (Bool, Int64, ((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64), UInt32, 
            Unit, Float64, UInt64), Range<Int16>, Float32, Bool, Range<UInt32>), Option<Range<Int64>>)
}

public func func1569(param1570: UInt8): Array<Bool> { // block id: 1571
    var328.func1575(
        [((Int32(-34) & 127)..(Int32(24) & 127) : (47 | 1)), ((Int32(118) & 127)..=(Int32(31) & 127) : (31 | 1)),
            ((Int32(-98) & 127)..(Int32(-7) & 127) : ((-98) | 1)), ((Int32(86) & 127)..(Int32(47) & 127) : ((-104) | 1)),
            ((Int32(-126) & 127)..(Int32(-70) & 127) : ((-107) | 1)), ((Int32(26) & 127)..(Int32(-91) & 127) : (108 | 1)),
            ((Int32(102) & 127)..(Int32(79) & 127) : (11 | 1)), ((Int32(-2) & 127)..=(Int32(117) & 127) : ((-123) | 1)),
            ((Int32(38) & 127)..(Int32(58) & 127) : (123 | 1)), ((Int32(-5) & 127)..=(Int32(4) & 127) : ((-88) | 1))][8]);
    let var1605: ((UInt32, Unit, UInt64), Range<UInt8>, Bool) = ((UInt32(95), (), UInt64(23)), ((UInt8(179) & 127)..(UInt8(143) &
            127) : (80 | 1)), false);
    let var1642: Array<Bool> = Array<Bool>(10) {
        i => (((UInt32(132), (), UInt64(170)), ((UInt8(223) & 127)..(UInt8(109) & 127) : ((73 | 1))), ([((Int32(-44) &
                127)..=(Int32(38) & 127) : ((76 | 1))), ((Int32(-112) & 127)..=(Int32(-35) & 127) : ((-110) | 1)),
                ((Int32(-116) & 127)..(Int32(-100) & 127) : (106 | 1)),
                ((Int32(-24) & 127)..=(Int32(31) & 127) : ((-94) | 1)), ((Int32(20) & 127)..(Int32(-37) & 127) : (36 | 1)),
                ((Int32(94) & 127)..=(Int32(64) & 127) : ((-69) | 1)),
                ((Int32(-110) & 127)..=(Int32(89) & 127) : (115 | 1)), ((Int32(-117) & 127)..=(Int32(125) & 127) : (6 | 1)),
                ((Int32(-46) & 127)..=(Int32(-92) & 127) : ((-113) | 1)),
                ((Int32(-56) & 127)..(Int32(32) & 127) : (((-116) | 1)))] is Range<UInt16>)) is (Bool, Int64, ((UInt32, 
            Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64), UInt32, Unit, Float64, UInt64))
    }
    match (Enum1584.defaultValue) {
        case defaultValue =>
            var617;
            if (var1476) {
                var31
            } else {
                Aggregate27()
            };
            if (var1403) {
                var1598
            } else {
                [false, false, true, true, false, true, true, false, false, false]
            }

        case _ =>
            var1605;
            let var1615: UInt32 = UInt32(168);
            -var1615
            let var1628: Bool = false;
            if (true) {
                [var1403, false, true, true, var122, var122, var1476, var1628, true, false]
            } else {
                var1598
            }

        case caseVar1635 =>
            var797;
            [(), (), (), (), (), (), (), (), (), ()];
            if (true) {
                var1642
            } else {
                [true, true, false, true, false, false, false, true, true, true]
            }

        case defaultValue =>
            ();
            var1642

        case _ =>
            var73;
            [var1403, var1476, true, true, var122, false, true, var122, var1403, true]
    }
}

func func1981(param1982: ((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64)): (Array<Unit>, Range<Int64>, 
    Array<Unit>, Int32, UInt8, Float64, Rune) { // block id: 1983
    let var1985: (Array<Unit>, Range<Int64>, Array<Unit>, Int32, UInt8, Float64, Rune) = ([(), (), (), (), (), (), (),
            (), (), ()], ((29 & 127)..=(Int64(Int16(-100)) & 127) : ((Int64(Int16(UInt8(192))) | 1))), [(), (), (), (),
            (), (), (), (), (), ()], Int32(UInt8(248)), UInt8(Int8(-120)), Float64(Float32(77.0)), r'D');
    var1985
}

public struct Aggregate2423 {
    public init() { // block id: 2425

    }

    public static var var2428: (Int8, (UInt8, Float64, UInt16), Option<Option<Option<Aggregate27>>>, Range<UInt16>, (UInt8, 
        Float64, UInt16), Range<UInt8>, ((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64)) = (Int8(-48), (UInt8(65),
            (-88.0), UInt16(36)), Option<Option<Option<Aggregate27>>>.None, ((UInt16(34) & 127)..(UInt16(28) & 127) : ((6 |
            1))), (UInt8(120), (-20.0), UInt16(169)), ((UInt8(188) & 127)..(UInt8(215) & 127) : ((5 | 1))), ((UInt32(148),
                (), UInt64(222)), UInt16(143), UInt8(131), UInt64(92), false, 48))
}

public func func2597(param2598: Float32): Option<Option<Aggregate27>> { // block id: 2599
    let var2618: Option<Aggregate27> = Option<Aggregate27>.Some(Aggregate27());
    match (var2602) {
        case _ =>
            var73;
            var var2609: UInt16 = UInt16(87);
            var2609 &= UInt16(245)
            let var2614: Bool = true;
            if (var2614) {
                Option<Option<Aggregate27>>.Some(var2618)
            } else {
                Option<Option<Aggregate27>>.Some(var2618)
            }
    }
}

public func func95(param2728: Option<((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64)>): Option<(Int8, (UInt8, 
    Float64, UInt16), Option<Option<Option<Aggregate27>>>, Range<UInt16>, (UInt8, Float64, UInt16), Range<UInt8>, ((UInt32, 
    Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64))> { // block id: 2729
    var2731
}

func func2587(param2588: Class19): Range<Int32> { // block id: 2589
    let var2653: Unit = ();
    let var2667: Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    match ((Option<Option<Option<Aggregate27>>>.Some(var2594) ?? (Float32(50.0) |> func2597))) {
        case caseVar2627: Option<Int8> =>
            var var2659: Range<Int64> = ((Int64(UInt8(UInt8(131))) & 127)..=(9 & 127) : (((-1) | 1)));
            if (var1403) {
                ((), 4.0, var2635, ([var73, var73, var73, var73, (), var73, var2653, (), var2653, var2653], var2659,
                        var2667, Int32(83), var609, var2519, r'l'), ((UInt8(218) & 127)..=(var609 & 127) : ((var1906 | 1))))
            } else {
                ((), 53.0, var2635, var2682, ((var609 & 127)..=(var609 & 127) : ((var61 | 1))))
            };
            ();
            if (var2362) {
                var1824
            } else {
                var1824
            }

        case _ =>
            ();
            var1824
    };
    (Option<Range<Int32>>.None ?? match (func95(var797)) {
        case _ =>
            let var2741: Range<Int32> = ((Int32(-1) & 127)..=(Int32(1) & 127) : ((-103) | 1));
            if (false) {
                var2741
            } else {
                ((Int32(-74) & 127)..(Int32(-110) & 127) : ((var2747 | 1)))
            }

        case _ => ((Int32(67) & 127)..(Int32(99) & 127) : ((var2747 | 1)))
    })
}

func func2583(param2584: Option<Bool>): Option<Option<Option<Aggregate27>>> { // block id: 2585
    (Option<Class19>.Some(Class19()) ?? (Option<Class19>.None ?? Class19())) |> func2587;
    var loopTimeVar2813: Int64 = 0;
    do {
        loopTimeVar2813++;
        match (Enum1584.defaultValue) {
            case _ =>
                var73;
                var73
        }
    } while ((match (match (var166) {
        case _ => var328
    }) {
        case caseVar2782 => var2362

        case caseVar2787 =>
            var var2791: Int8 = Int8(82);
            var2791 /= ((var2791) | 1)
            UInt64(181) == var158

        case _ => true

        case _ =>
            ();
            false
    }) && loopTimeVar2813 < 100);
    var2550
}

func func2571(param2572: Array<Array<Bool>>): (UInt8, Float64, UInt16) { // block id: 2573
    let var2578: ?UInt64 = (Int32(-100) as UInt64);
    var var2816: (Option<Bool>) -> Option<Option<Option<Aggregate27>>> = func2583;
    match (if ((var2578 is UInt16)) {
        Option<Option<Option<Aggregate27>>>.None
    } else {
        (Option<Bool>.Some(var122) |> var2816)
    }) {
        case _ => var1465
    }
}

func func2459(param2460: ((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64)): (Int8, (UInt8, Float64, UInt16), 
    Option<Option<Option<Aggregate27>>>, Range<UInt16>, (UInt8, Float64, UInt16), Range<UInt8>, ((UInt32, Unit, UInt64), 
    UInt16, UInt8, UInt64, Bool, Int64)) { // block id: 2461
    let var2471: Option<Int8> = Option<Int8>.Some(Int8(-49));
    var var2476: Int8 = Int8(Int8(-91));
    var var2499: Array<Int64> = [(-93), 21, 56, (-55), 15, (-12), 98, 83, (-14), (-11)];
    var var2824: (Array<Array<Bool>>) -> (UInt8, Float64, UInt16) = {
        lambdaParameter2827: Array<Array<Bool>> => (UInt8(UInt8(Int8(-52))), Float64(Float32(-32.0)), UInt16(UInt16(95)))
    };
    let var2853: Array<Bool> = Array<Bool>(10) {i => true}
    let var2950: Bool = false;
    var var2968: Bool = false;
    var var2974: Range<UInt8> = ((UInt8(20) & 127)..(UInt8(54) & 127) : (126 | 1));
    var var2983: Int32 = Int32(71);
    var var3065: UInt8 = UInt8(Int8(UInt8(37)));
    ((if (true) {
            var2471
        } else {
            Option<Int8>.Some(var2476)
        } ?? match (true) {
            case false | true | true =>
                var var2487: Int8 = Int8(UInt8(Int8(UInt8(UInt8(106)))));
                var2487 + Int8(-27)

            case _ =>
                var797;
                var2499;
                var2476

            case _ =>
                var2476++;
                var2476 << ((Int8(120)) & 7)

            case _ => var2476 ^ var2476
        }), (UInt8(UInt8(24)), var2519, var31.var2524), match (try { // block id: 2528
            var609;
            var73;
            let var2533: Option<Option<Aggregate27>> = Option<Option<Aggregate27>>.Some(Option<Aggregate27>.None);
            Option<Option<Option<Aggregate27>>>.Some(var2533)
        } finally { // block id: 2536
            if (true) {
                Option<Option<Option<Aggregate27>>>.None
            } else {
                Option<Option<Option<Aggregate27>>>.None
            }
        }) {
            case caseVar2543 => caseVar2543

            case _: Int16 => var2550

            case _ =>
                var158;
                var2550

            case _ =>
                if (false) {
                    var2550
                } else {
                    var2550
                }
        }, if (var2362) {
            [((UInt16(22) & 127)..(UInt16(37) & 127) : (19 | 1)), ((UInt16(246) & 127)..=(UInt16(11) & 127) : ((-77) | 1)),
                ((UInt16(100) & 127)..=(UInt16(176) & 127) : (15 | 1)),
                ((UInt16(219) & 127)..(UInt16(224) & 127) : (101 | 1)),
                ((UInt16(188) & 127)..(UInt16(177) & 127) : (90 | 1)),
                ((UInt16(52) & 127)..=(UInt16(130) & 127) : (38 | 1)),
                ((UInt16(81) & 127)..=(UInt16(250) & 127) : (75 | 1)),
                ((UInt16(245) & 127)..=(UInt16(61) & 127) : ((-103) | 1)),
                ((UInt16(133) & 127)..(UInt16(34) & 127) : (112 | 1)),
                ((UInt16(98) & 127)..(UInt16(142) & 127) : ((-101) | 1))]
        } else {
            [((UInt16(46) & 127)..=(UInt16(12) & 127) : ((-56) | 1)), ((UInt16(67) & 127)..=(UInt16(253) & 127) : (91 | 1)),
                ((UInt16(36) & 127)..(UInt16(58) & 127) : (46 | 1)), ((UInt16(9) & 127)..(UInt16(1) & 127) : (2 | 1)),
                ((UInt16(146) & 127)..(UInt16(160) & 127) : (22 | 1)),
                ((UInt16(35) & 127)..(UInt16(246) & 127) : ((-124) | 1)),
                ((UInt16(46) & 127)..(UInt16(40) & 127) : ((-78) | 1)),
                ((UInt16(226) & 127)..=(UInt16(169) & 127) : ((-42) | 1)),
                ((UInt16(143) & 127)..(UInt16(249) & 127) : (94 | 1)),
                ((UInt16(102) & 127)..=(UInt16(189) & 127) : (90 | 1))]
        }[5], (try { // block id: 2838
            var1844;
            if (true) {
                [[true, false, false, false, true, false, true, true, true, false],
                    [true, true, true, true, true, false, false, true, true, true],
                    [false, true, false, false, false, false, false, false, true, false],
                    [true, true, false, false, false, false, false, false, false, true],
                    [true, true, false, true, false, false, true, true, true, false],
                    [false, true, true, true, false, true, true, false, false, false],
                    [true, false, false, true, true, false, false, false, true, true],
                    [true, true, true, false, true, false, false, true, false, true],
                    [false, false, false, false, true, true, false, true, true, false],
                    [true, true, false, true, false, false, true, true, true, false]]
            } else {
                var2844
            }
        } finally { // block id: 2846
            ();
            [[false, false, true, true, false, false, false, true, false, true],
                [false, false, true, false, false, false, true, true, false, true],
                [true, true, false, false, false, false, false, true, false, true], var2853, var2853,
                [var2913, var1476, false, false, true, false, var2362, var122, var122, var2362],
                [false, true, true, var2950, false, false, var2362, var122, true, true],
                [false, var1476, true, false, false, true, true, var2950, var2968, var122],
                [true, false, true, false, true, false, true, true, true, true],
                [true, true, true, false, true, false, false, false, true, false]]
        } |> var2824), var2974, if (var166 >= var166) { // block id: 2980
            var2983 -= Int32(26)
            ((UInt32(79), (), var158), var286, UInt8(12), var158, var2995, var61)
        } else { // block id: 3037
            let var3040: UInt32 = UInt32(UInt16(Int16(Int16(17))));
            (var3040, (), UInt64(217));
            let var3051: (UInt32, Unit, UInt64) = (UInt32(202), (), UInt64(209));
            if (true) {
                (var3051, var286, var609, UInt64(253), var2968, var61)
            } else {
                (var3051, var286, var3065, UInt64(182), var122, var2747)
            }
        })
}

func func3570(param3571: Class19, namedParam3572!: (Option<Bool>) -> Option<Option<Option<Aggregate27>>>,
    namedParam3575!: Float64, namedParam3576!: (Class19) -> Range<Int16>): ((UInt32, Unit, UInt64), UInt16, UInt8, 
    UInt64, Bool, Int64) { // block id: 3579
    var var3646: Array<Unit> = Array<Unit>(10) {i => ()}
    if (var1476) { // block id: 3582
        ((Int8(-112) & 127)..=(Int8(85) & 127) : ((-37) | 1));
        var var3591: ?Bool = Option<Bool>.Some(
            (Option<UInt64>.None is (Rune, (Bool, Int64, ((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64), 
                UInt32, Unit, Float64, UInt64), Range<Int16>, Float32, Bool, Range<UInt32>)));
        if (false) { // block id: 3586
            Float32(77.0);
            if (false) {
                var3591
            } else {
                var3591
            };
            ()
        };
        var var3618: ((UInt32, Unit, UInt64), Range<UInt8>, Bool) = ((UInt32(196), (), UInt64(108)), ((UInt8(100) & 127)..(UInt8(25) &
                127) : ((-58) | 1)), true);
        var loopTimeVar3626: Range<UInt64> = ((UInt64(106) & 127)..(UInt64(UInt64(UInt32(UInt8(165)))) & 127) : ((100 | 1)));
        for (i in loopTimeVar3626 where var2995) {
            let var3611: Int64 = Int64(Int64(UInt8(Int8(-66))));
            if (var122) {
                ((UInt32(32), (), UInt64(107)), ((var609 & 127)..=(UInt8(47) & 127) : ((var3611 | 1))), true)
            } else {
                var3618
            }
        }
    } else if ((((), (-66.0), var2635, ([(), (), (), (), (), (), (), (), (), ()], ((var1906 & 127)..=(var61 & 127) : ((76 |
                1))), var3646, Int32(46), var609, 11.0, r'A'), ((UInt8(91) & 127)..(UInt8(92) & 127) : (9 | 1))) is Array<Range<Int32>>)) { // block id: 3663
        if (false) {
            var3667
        } else {
            var3667
        };
        match (UInt16(20)) {
            case caseVar3674 =>
                ();
                UInt8(Int64(var3679) ** UInt64(UInt8(156) & 3))

            case _: Range<UInt64> =>
                var1906 -= 68
                var609

            case _ =>
                var var3705: Int16 = Int16(UInt8(UInt8(209)));
                var3705 %= ((var202) | 1)
                var3679 * var609

            case _ => var609
        };
        try { // block id: 3717
            var158 /= ((var158) | 1)
            var158 -= UInt64(100)
            var2362 ||= true
        } catch (e: Exception) { // block id: 3727
            if (false) {
                Option<(Int8, (UInt8, Float64, UInt16), Option<Option<Option<Aggregate27>>>, Range<UInt16>, (UInt8, 
                        Float64, UInt16), Range<UInt8>, ((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64))>
                    .None
            } else {
                Option<(Int8, (UInt8, Float64, UInt16), Option<Option<Option<Aggregate27>>>, Range<UInt16>, (UInt8, 
                        Float64, UInt16), Range<UInt8>, ((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64))>
                    .Some(var3733)
            };
            ()
        }
    };
    var var3830: Int8 = Int8(117);
    var loopTimeVar3833: Range<UInt64> = ((UInt64(UInt16(246)) & 127)..(UInt64(Int32(UInt8(Int8(-21)))) & 127) : ((Int64(UInt64(UInt32(UInt32(251)))) |
        1)));
    for (i in loopTimeVar3833 where (if (true) {
        Option<Bool>.None
    } else {
        Option<Bool>.None
    } ?? if (true) { // block id: 3813
        true
    } else { // block id: 3815
        var73;
        ();
        var2913
    })) {
        match (var286) {
            case _ =>
                var73;
                var1923 ^= Int16(93)
                var3830 <<= ((Int8(15)) & 7)
        }
    };
    var var3902: Bool = (Int32(-24) is Int64);
    var var3922: UInt64 = UInt64(UInt16(Int8(95)));
    let var3935: (UInt32, Unit, UInt64) = (UInt32(130), (), UInt64(UInt64(219)));
    if (var2995) { // block id: 3847
        var loopTimeVar3851: Range<UInt64> = ((UInt64(Int8(-11)) & 127)..=(UInt64(UInt8(149)) & 127) : (((-38) | 1)));
        for (i in loopTimeVar3851 where var2995) {
        }
        var3462;
        var var3867: ((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64) = ((UInt32(Int16(UInt8(8))), (),
                UInt64(69)), UInt16(115), UInt8(149), UInt64((-44)), true, Int64(UInt32(84)));
        var var3931: Int64 = (-108);
        match (Option<Option<Range<UInt8>>>.Some(
            Option<Range<UInt8>>.Some(((UInt8(157) & 127)..=(UInt8(33) & 127) : ((-33) | 1))))) {
            case _ => var3867

            case caseVar3884: Range<Int16> => var3867

            case _: Range<Int16> =>
                var var3891: Option<Int8> = Option<Int8>.None;
                var3891;
                ((UInt32(89), (), var158), UInt16(203), var609, var158, var3902, 57)

            case _: (Unit, Float64, Range<UInt64>, (Array<Unit>, Range<Int64>, Array<Unit>, Int32, UInt8, Float64, Rune), 
                    Range<UInt8>) =>
                UInt64(74);
                var var3912: UInt64 = UInt64(33);
                var3912 |= UInt64(156)
                if (var1476) {
                    ((UInt32(17), var3473, var3922), UInt16(215), UInt8(125), UInt64(56), true, var3931)
                } else {
                    (var3935, var3335, var609, var3912, true, (-65))
                }

            case _ =>
                ();
                var3462;
                if (false) {
                    ((var3955, var3473, var158), UInt16(220), UInt8(129), UInt64(60), var2913, var2747)
                } else {
                    var3867
                }
        }
    } else { // block id: 3965
        var loopTimeVar3969: Range<UInt64> = ((UInt64(230) & 127)..=(UInt64(Int32(59)) & 127) : ((Int64(UInt16(Int16(74))) |
            1)));
        for (i in loopTimeVar3969 where var2995) {
        }
        (var797 ?? (var3935, var286, var3679, UInt64(9), true, 72))
    }
}

func func2037(param2038: (Array<Unit>, Range<Int64>, Array<Unit>, Int32, UInt8, Float64, Rune)): ((UInt32, Unit, UInt64), 
    UInt16, UInt8, UInt64, Bool, Int64) { // block id: 2039
    func func2412(param2413: Range<UInt32>, param2414: Int32, optionalParam2415!: Int8 = Int8(-23),
        namedParam2417!: (Array<Unit>, Range<Int64>, Array<Unit>, Int32, UInt8, Float64, Rune)): Option<(Int8, (UInt8, 
        Float64, UInt16), Option<Option<Option<Aggregate27>>>, Range<UInt16>, (UInt8, Float64, UInt16), Range<UInt8>, ((UInt32, 
        Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64))> { // block id: 2418
        let var3075: (UInt32, Unit, UInt64) = (UInt32(240), (), UInt64(Int8(-74)));
        Option<(Int8, (UInt8, Float64, UInt16), Option<Option<Option<Aggregate27>>>, Range<UInt16>, (UInt8, Float64, 
                UInt16), Range<UInt8>, ((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64))>.Some(
            if (var1476) {
                (Aggregate2423.var2428)
            } else {
                ((var3075, UInt16(77), UInt8(6), var158, var122, var61) |> func2459)
            })
    };

    let var3139: Int8 = Int8(88);
    func func3294(optionalParam3295!: Enum1584 = Enum1584.defaultValue): Option<Option<Option<Aggregate27>>> { // block id: 3297
        let var3300: Option<Aggregate27> = Option<Aggregate27>.None;
        (var3300 as Option<Option<Aggregate27>>)
    };

    let var3304: Range<UInt16> = ((UInt16(138) & 127)..=(UInt16(94) & 127) : ((-114) | 1));
    let var3318: Range<Int16> = ((Int16(-15) & 127)..=(Int16(59) & 127) : ((-73) | 1));
    let var3323: UInt32 = UInt32(UInt32(UInt8(119)));
    func func2056(optionalParam2057!: Option<Option<Option<Aggregate27>>> = (true as Option<Option<Aggregate27>>),
        optionalParam2060!: Array<Array<Bool>> = [[false, false, true, false, false, false, false, true, false, false],
            [true, false, ([(), (), (), (), (), (), (), (), (), ()] is Array<Int8>), (r'9' is UInt16), false,
            (r'i' is (Range<UInt64>) -> Bool), false, false,
            (((Int16(-122) & 127)..=(Int16(-63) & 127) : (((-30) | 1))) is Float32),
            ((UInt32(99), (), UInt64(72)) is Enum1584)], [true, false, true, true, false, true, false, true, false,
            false], [true, true, false, false, false, true, false, false, false, false],
            [(((Int16(39) & 127)..=(Int16(-106) & 127) : ((29 | 1))) is (Range<Int32>) -> Rune), false,
            ((UInt8(218), (-70.0), UInt16(22)) is Range<Int8>),
            (Option<Option<Aggregate27>>.Some(Option<Aggregate27>.None) is (Unit, Float64, Range<UInt64>, (Array<Unit>, 
            Range<Int64>, Array<Unit>, Int32, UInt8, Float64, Rune), Range<UInt8>)),
            (([(), (), (), (), (), (), (), (), (), ()], (((-6) & 127)..((-87) & 127) : ((-18) | 1)), [(), (), (), (), (),
                (), (), (), (), ()], Int32(-31), UInt8(165), 47.0, r'K') is (Array<Unit>, Range<Int64>, Array<Unit>, 
            Int32, UInt8, Float64, Rune)), true, true, false, true, false],
            [true, true, true, true, true, false, true, true, false, true],
            [true, true, true, true, false, true, true, true, false, true],
            [(Class19() is Bool), false, (((79 & 127)..=(115 & 127) : (((-52) | 1))) is Option<Aggregate27>), false,
            true, (() is Option<UInt64>), true, true, false, true],
            [false, ((-100) is Option<Option<Aggregate27>>), false,
            ((Int8(120), (UInt8(190), (-97.0), UInt16(42)), Option<Option<Option<Aggregate27>>>.Some(
                Option<Option<Aggregate27>>.None), ((UInt16(200) & 127)..=(UInt16(27) & 127) : ((-75) | 1)), (UInt8(95),
                (-103.0), UInt16(12)), ((UInt8(42) & 127)..=(UInt8(239) & 127) : ((61 | 1))), ((UInt32(44), (), UInt64(193)),
                UInt16(82), UInt8(238), UInt64(65), false, 41)) is (Int64, Class19) -> Array<Unit>),
            ([(-9), 2, (-57), 70, 32, 28, 64, 62, (-93), 30] is (Array<Bool>, Option<Option<Aggregate27>>, Int8, (Bool, 
                Int64, ((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64), UInt32, Unit, Float64, UInt64)) -> Array<Bool>),
            false, true, false, false, ((Int32(27) as Option<Option<Aggregate27>>) is Range<Int32>)],
            [([false, true, true, false, false, false, true, false, false, true] is Array<Range<Int32>>), true, true,
            ((Int8(50), (UInt8(95), 18.0, UInt16(240)), Option<Option<Option<Aggregate27>>>.None, ((UInt16(105) & 127)..(UInt16(127) &
                127) : ((59 | 1))), (UInt8(247), 91.0, UInt16(106)), ((UInt8(149) & 127)..(UInt8(28) & 127) : (70 | 1)),
            ((UInt32(201), (), UInt64(102)), UInt16(145), UInt8(62), UInt64(244), false, (-84))) is (Int64, Range<Int8>,
            Array<Int16>, (Unit, Float64, Range<UInt64>, (Array<Unit>, Range<Int64>, Array<Unit>, Int32, UInt8, Float64, 
                Rune), Range<UInt8>)) -> Array<Bool>), true,
            (Option<((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64)>.Some(
            ((UInt32(145), (), UInt64(2)), UInt16(202), UInt8(71), UInt64(219), false, 53)) is (Int64, Range<Int8>, Array<Int16>,
            (Unit, Float64, Range<UInt64>, (Array<Unit>, Range<Int64>, Array<Unit>, Int32, UInt8, Float64, Rune), Range<UInt8>)) -> Array<Bool>),
            ([[false, false, true, false, false, true, true, true, false, true],
            [false, true, false, true, false, true, true, false, false, true],
            [true, true, false, true, false, true, true, true, false, false],
            [true, true, false, true, false, false, false, false, false, false],
            [true, false, false, true, false, true, true, false, false, true],
            [true, false, false, false, true, false, false, true, false, true],
            [true, false, true, false, true, true, true, true, true, false],
            [true, false, false, false, true, false, false, true, false, false],
            [false, true, true, true, true, true, false, false, true, true],
            [false, false, true, true, true, true, true, false, true, false]] is Rune),
            (Float32(Float32(90.0)) is (Range<UInt64>) -> Bool), false,
            (((), (-7.0), ((UInt64(42) & 127)..(UInt64(228) & 127) : ((50 | 1))), ([(), (), (), (), (), (), (), (), (),
                    ()], (((-7) & 127)..=(6 & 127) : ((51 | 1))), [(), (), (), (), (), (), (), (), (), ()], Int32(-14),
                UInt8(118), (-46.0), r'9'), ((UInt8(138) & 127)..(UInt8(191) & 127) : (((-37) | 1)))) is UInt32)]]): (Int8, 
        (UInt8, Float64, UInt16), Option<Option<Option<Aggregate27>>>, Range<UInt16>, (UInt8, Float64, UInt16), Range<UInt8>, 
        ((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64)) { // block id: 2351
        var var2375: Option<Option<Aggregate27>> = Option<Option<Aggregate27>>.None;
        let var3154: (UInt32, Unit, UInt64) = (UInt32(80), (), UInt64(40));
        var var3230: (Int8, (UInt8, Float64, UInt16), Option<Option<Option<Aggregate27>>>, Range<UInt16>, (UInt8, 
            Float64, UInt16), Range<UInt8>, ((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64)) = (Int8(-46), (UInt8(Int8(Int8(90))),
                Float64((-99.0)), UInt16(214)), Option<Option<Option<Aggregate27>>>.Some(
                Option<Option<Aggregate27>>.None), ((UInt16(70) & 127)..=(UInt16(148) & 127) : (77 | 1)), (UInt8(113),
                Float64(17.0), UInt16(Int16(UInt16(179)))), ((UInt8(Int8(UInt8(69))) & 127)..(UInt8(177) & 127) : ((39 |
                1))), ((UInt32(UInt32(98)), (), UInt64(84)), UInt16(179), UInt8(UInt8(171)), UInt64(39), true, Int64(Int8(Int8(92)))));
        if ((if (var122) {
            Option<Bool>.Some(var2362)
        } else {
            Option<Bool>.None
        } ?? match (var2375) {
            case _: Float64 =>
                var73;
                var73;
                var1403

            case _ => false

            case caseVar2389: Range<UInt32> =>
                ();
                var1476

            case _ =>
                ();
                var158;
                UInt32(64) > UInt32(253)

            case _ => var1906 <= 71
        })) {
            (func2412(((UInt32(235) & 127)..=(UInt32(176) & 127) : ((-94) | 1)), Int32(1), namedParam2417: var2682) ??
                try { // block id: 3090
                var var3094: (Int8, (UInt8, Float64, UInt16), Option<Option<Option<Aggregate27>>>, Range<UInt16>, (UInt8, 
                    Float64, UInt16), Range<UInt8>, ((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64)) = (Int8(Int8(87)),
                    (UInt8(16), 74.0, UInt16(89)), Option<Option<Option<Aggregate27>>>.None, ((UInt16(Int16(-53)) & 127)..(UInt16(UInt16(201)) &
                        127) : (((-2) | 1))), (UInt8(Int8(UInt8(173))), 45.0, UInt16(37)), ((UInt8(83) & 127)..(UInt8(221) &
                        127) : (26 | 1)), ((UInt32(Int32(117)), (), UInt64(Int8(-87))), UInt16(UInt8(Int8(-63))), UInt8(UInt8(73)),
                        UInt64(89), ((UInt8(24), 68.0, UInt16(250)) is UInt32), Int64(Int8(Int8(21)))));
                if (true) {
                    var3094
                } else {
                    (var3139, (UInt8(88), (-97.0), UInt16(210)), optionalParam2057, ((UInt16(203) & 127)..=(UInt16(150) &
                            127) : (121 | 1)), (UInt8(140), 80.0, var286), ((UInt8(130) & 127)..(UInt8(197) & 127) : ((-63) |
                            1)), (var3154, var286, var609, UInt64(20), var2913, (-32)))
                }
            } catch (e: Exception) { // block id: 3164
                var var3188: (Int8, (UInt8, Float64, UInt16), Option<Option<Option<Aggregate27>>>, Range<UInt16>, (UInt8, 
                    Float64, UInt16), Range<UInt8>, ((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64)) = (Int8(Int8(Int8(UInt8(113)))),
                    (UInt8(83), Float64(Float32(Float32(-72.0))), UInt16(UInt8(106))), Option<Option<Option<Aggregate27>>>
                        .None, ((UInt16(126) & 127)..=(UInt16(99) & 127) : ((-13) | 1)), (UInt8(UInt8(96)), Float64(Float32(Float32(-32.0))),
                        UInt16(Int8(-96))), ((UInt8(134) & 127)..=(UInt8(41) & 127) : (116 | 1)), ((UInt32(86), (),
                            UInt64(140)), UInt16(134), UInt8(Int8(52)), UInt64(Int32(-95)), ((Option<(Int8, (UInt8, 
                                Float64, UInt16), Option<Option<Option<Aggregate27>>>, Range<UInt16>, (UInt8, Float64, 
                                UInt16), Range<UInt8>, ((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64))>
                            .None as Option<Option<Aggregate27>>) is Range<UInt16>), (-122)));
                if (false) {
                    (Int8(-44), (var609, (-40.0), var286), Option<Option<Option<Aggregate27>>>.None, ((var286 & 127)..(var286 &
                            127) : ((var61 | 1))), var1465, ((UInt8(36) & 127)..=(UInt8(87) & 127) : (4 | 1)), (var3154,
                            UInt16(35), var609, UInt64(134), var1403, 0))
                } else {
                    var3188
                }
            } finally { // block id: 3226
                if (var2913) {
                    var3230
                } else {
                    var3230
                }
            })
        } else {
            (Int8(var609), match {
                    case true =>
                        (UInt32(39), var73, var158);
                        var73;
                        let var3286: (UInt8, Float64, UInt16) = (UInt8(154), (-111.0), UInt16(177));
                        if (false) {
                            var1465
                        } else {
                            var3286
                        }
                    case _ => var1465
                }, func3294(optionalParam3295: Enum1584.defaultValue), var3304, var1465, ((UInt8(152) & 127)..=(UInt8(61) &
                    127) : (43 | 1)), try { // block id: 3309
                    var var3313: Int16 = Int16(UInt8(168));
                    (var2519, var3313, [Int16(116), Int16(60), Int16(-58), Int16(-40), Int16(-11), Int16(-48),
                            Int16(-28), Int16(-4), Int16(-54), Int16(69)], var3318, ((Int8(75) & 127)..=(Int8(-41) & 127) : (3 |
                            1)), (var3323, (), var158));
                    ((var3323, (), var158), var3335, UInt8(92), var158, false, var61)
                } finally { // block id: 3341
                    UInt16(15);
                    (var3154, var3335, var609, var158, false, 82)
                })
        }
    };

    let var3356: Range<UInt8> = ((UInt8(UInt8(UInt8(247))) & 127)..=(UInt8(Int8(10)) & 127) : ((123 | 1)));
    func func2041(namedParam2042!: Range<UInt8>,
        optionalParam2043!: Option<Option<Aggregate27>> = Option<Option<Aggregate27>>.Some(Option<Aggregate27>.None),
        namedParam2046!: Range<Int16>): Option<Option<Aggregate27>> { // block id: 2047
        (func2056()[2] ?? try { // block id: 3352
            optionalParam2043
        } finally { // block id: 3354
            var3356;
            if (true) {
                var2594
            } else {
                Option<Option<Aggregate27>>.None
            }
        })
    };

    let var3381: ?Range<UInt8> = (((UInt32(82) & 127)..=(UInt32(199) & 127) : ((-67) | 1)) as Range<UInt8>);
    let var3414: Option<Int8> = Option<Int8>.Some(Int8(-74));
    func2041(
        namedParam2042: ((Option<Option<Range<UInt8>>>.Some(Option<Range<UInt8>>.None) ?? var3381) ?? ((UInt8(209) & 127)..(UInt8(76) &
            127) : ((-121) | 1))),
        namedParam2046: (if (false) { // block id: 3388
            var202
        } else { // block id: 3390
            var158++;
            var3395 << ((var202) & 7)
        } & 127)..(if (true) { // block id):( 3402
            ();
            var3405;
            var1923
        } else if (var2913) { // block id: 3409
            ();
            if (false) {
                var3414
            } else {
                var3414
            };
            Int16(Int64(var3420) ** UInt64(Int16(-94) & 3))
        } else { // block id: 3423
            Int16(77) >> ((Int16(-78)) & 7);
            var73;
            var202
        } & 127) : (match (var2594) {
            case _ =>
                if (var1476) {
                    Option<UInt64>.None
                } else {
                    var2602
                };
                var2747
        } | 1));
    var var3538: (UInt32, Unit, UInt64) = (UInt32(Int8(15)), (), UInt64(96));
    var var4085: (UInt8) -> Array<Bool> = func1569;
    if (var1476) {
        if ((Option<Bool>.None ?? var2995)) { // block id: 3444
            var3446;
            let var3481: (Unit, Float64, Range<UInt64>, (Array<Unit>, Range<Int64>, Array<Unit>, Int32, UInt8, Float64, 
                Rune), Range<UInt8>) = ((), (-56.0), ((UInt64(UInt32(Int8(-33))) & 127)..(UInt64(106) & 127) : ((3 | 1))),
                ([(), (), (), (), (), (), (), (), (), ()], (((-80) & 127)..=(10 & 127) : ((Int64((-34)) | 1))), [(), (),
                        (), (), (), (), (), (), (), ()], Int32(Int32(Int32(98))), UInt8(233), Float64((-125.0)), r'E'), ((UInt8(124) &
                    127)..=(UInt8(193) & 127) : ((-12) | 1)));
            if (true) {
                ((), 115.0, ((UInt64(58) & 127)..=(UInt64(170) & 127) : (60 | 1)), ([(), (), (), (), (), (), (), (), (),
                            ()], (((-47) & 127)..=((-53) & 127) : (95 | 1)), [var3462, (), var73, (), var3462, var73, (),
                            (), (), var3473], Int32(-123), var609, var2519, r'N'), ((UInt8(185) & 127)..(UInt8(44) & 127) : (51 |
                        1)))
            } else {
                var3481
            };
            var var3519: (UInt32, Unit, UInt64) = (UInt32(12), (), UInt64(27));
            (var3519, UInt16(39), var609, var158, var1403, (-97))
        } else if ((Option<Bool>.Some(false) ?? true)) { // block id: 3533
            var73;
            var73;
            (var3538, UInt16(163), UInt8(182), var158, false, var1906)
        } else { // block id: 3550
            Int8(-75);
            var var3553: ((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64) = ((UInt32(29), (), UInt64(Int32(Int8(34)))),
                UInt16(Int8(Int8(1))), UInt8(158), UInt64(Int32(-14)), false, 0);
            var3553
        }
    } else {
        func3570(match (Class19()) {
            case _: Array<Int16> =>
                var3993 -= var3993
                if (true) {
                    [var73, (), var73, var3473, var3473, (), var73, (), (), var3473]
                } else {
                    [(), (), (), (), (), (), (), (), (), ()]
                };
                if (true) {
                    Class19(var4046, var4085, namedParam4018: ((UInt64(29) & 127)..=(var158 & 127) : ((var2747 | 1))))
                } else {
                    var328
                }

            case _: (Rune, (Bool, Int64, ((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64), UInt32, Unit, 
                    Float64, UInt64), Range<Int16>, Float32, Bool, Range<UInt32>) =>
                ();
                var328

            case caseVar4099 => caseVar4099

            case _ => var328
        }, namedParam3572: func2583, namedParam3575: if (false) { // block id: 4108
            var3395 |= Int16(-7)
            102.0 / Float64((Int32(73.0)) | 1)
        } else { // block id: 4115
            var31;
            (-91.0)
        }, namedParam3576: func556)
    }
}

public func func1977(param1978: Range<UInt32>): Range<UInt64> { // block id: 1979
    let var4151: (Array<Unit>, Range<Int64>, Array<Unit>, Int32, UInt8, Float64, Rune) = ([(), (), (), (), (), (), (),
            (), (), ()], (((-4) & 127)..(99 & 127) : (24 | 1)), [(), (), (), (), (), (), (), (), (), ()], Int32(Int8(-33)),
        UInt8(UInt8(70)), Float64(Float32(-21.0)), r'9');
    (try { // block id: 4121
        var2747 <<= ((var61) & 7)
        (var4127, var4130, var4127, var496, var3679, var2519, var4146)
    } finally { // block id: 4148
        var2550;
        var4151
    } |> func2037) |> {
        lambdaParameter2005: ((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64) =>
            let var2011: (UInt32, Unit, UInt64) = (UInt32(249), (), UInt64(UInt32(150)));
            func1981(match {
                case (var2011 is Range<Int8>) => (var2011, UInt16(62), var609, var158, false, var1906)
                case _ => ((UInt32(72), (), var158), var286, UInt8(243), UInt64(116), true, var61)
            })
    };
    var var4178: Option<Bool> = Option<Bool>.None;
    match (if ((var3667 is UInt64)) {
        var4178
    } else {
        Option<Bool>.Some(false)
    }) {
        case caseVar4184: (Unit, Float64, Range<UInt64>, (Array<Unit>, Range<Int64>, Array<Unit>, Int32, UInt8, Float64, 
                Rune), Range<UInt8>) =>
            ();
            ();
            Option<Class19>.Some(Class19())

        case caseVar4193: Aggregate2423 =>
            var3473;
            var3462;
            let var4246: Int64 = Int64(1);
            Option<Class19>.Some(
                Class19(((var609 & 127)..=(UInt8(196) & 127) : (((-35) | 1))),
                    [var4227, ((Int32(-58) & 127)..(Int32(-102) & 127) : (110 | 1)),
                        ((Int32(-56) & 127)..=(Int32(49) & 127) : ((7 | 1))),
                        ((Int32(69) & 127)..(Int32(-89) & 127) : (((-125) | 1))),
                        ((Int32(22) & 127)..=(Int32(13) & 127) : (((-107) | 1))),
                        ((Int32(34) & 127)..=(var496 & 127) : ((var4246 | 1))),
                        ((Int32(-100) & 127)..=(Int32(7) & 127) : (19 | 1)), var4227,
                        ((Int32(54) & 127)..=(Int32(-67) & 127) : ((57 | 1))),
                        ((Int32(69) & 127)..=(var496 & 127) : ((88 | 1)))]))

        case _ =>
            Aggregate2423();
            Option<Class19>.None
    };
    var var4278: Option<Bool> = Option<Bool>.None;
    var var4293: Array<Int8> = [Int8(-42), Int8(67), Int8(41), Int8(-67), Int8(112), Int8(62), Int8(45), Int8(-101),
        Int8(43), Int8(33)];
    if (match (match (var2602) {
        case _ =>
            ();
            let var4272: Bool = ([false, false, false, false, false, false, true, true, false, false] is Array<Int8>);
            if (var4272) {
                Option<Bool>.Some(var2913)
            } else {
                var4278
            }
    }) {
        case _: (Bool, Int64, ((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64), UInt32, Unit, Float64, 
                UInt64) => !var122

        case _ => true
    }) {
        match (match (var4293) {
            case caseVar4297: UInt8 =>
                var1465;
                ((UInt32(42) & 127)..(UInt32(94) & 127) : (26 | 1))

            case caseVar4303: (UInt32, Unit, UInt64) => ((UInt32(162) & 127)..(UInt32(226) & 127) : ((-104) | 1))

            case _: Range<Int16> =>
                ((Int32(62) & 127)..(Int32(-101) & 127) : (40 | 1));
                var496 &= var496
                if (var2995) {
                    param1978
                } else {
                    ((UInt32(33) & 127)..(UInt32(63) & 127) : (15 | 1))
                }

            case _ =>
                if (true) {
                    ((Int8(7) & 127)..(Int8(-43) & 127) : ((-43) | 1))
                } else {
                    ((Int8(-31) & 127)..(Int8(58) & 127) : (60 | 1))
                };
                if (var2913) {
                    ((UInt32(111) & 127)..=(UInt32(122) & 127) : (117 | 1))
                } else {
                    ((UInt32(181) & 127)..(var3955 & 127) : ((27 | 1)))
                }
        }) {
            case _ => ((var158 & 127)..(UInt64(103) & 127) : (((-126) | 1)))

            case caseVar4339: Option<UInt64> =>
                ();
                var73;
                ((UInt64(186) & 127)..=(UInt64(19) & 127) : ((-9) | 1))

            case _ =>
                ();
                if (var2362) {
                    var2635
                } else {
                    ((UInt64(47) & 127)..=(UInt64(218) & 127) : (54 | 1))
                }

            case _ => ((var158 & 127)..(UInt64(3) & 127) : (((-58) | 1)))
        }
    } else {
        var2635
    }
}

func func1556(param1557: Array<Array<Bool>>): Array<Bool> { // block id: 1558
    let var1741: (Rune, (Bool, Int64, ((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64), UInt32, Unit, 
        Float64, UInt64), Range<Int16>, Float32, Bool, Range<UInt32>) = (r'c', ((((), 46.0, ((UInt64(130) & 127)..=(UInt64(242) &
                    127) : ((11 | 1))), ([(), (), (), (), (), (), (), (), (), ()], ((50 & 127)..(8 & 127) : (((-25) | 1))),
                    [(), (), (), (), (), (), (), (), (), ()], Int32(4), UInt8(21), (-112.0), r'x'), ((UInt8(55) & 127)..=(UInt8(96) &
                    127) : (((-36) | 1)))) is Range<UInt32>), 40, ((UInt32(82), (), UInt64(44)), UInt16(UInt8(236)),
                UInt8(121), UInt64(119), (Option<Unit>.Some(()) is (Range<Int64>, Array<Bool>, Array<Array<Bool>>, 
                    Float64, Int8, Unit)), Int64(UInt64(29))), UInt32(UInt16(143)), (), 40.0, UInt64(Int64(Int16(-128)))),
        ((Int16(-126) & 127)..(Int16(55) & 127) : (70 | 1)), Float32(85.0), ([Int8(-97), Int8(-87), Int8(95), Int8(106),
            Int8(-31), Int8(-23), Int8(-12), Int8(-87), Int8(100), Int8(-42)] is Range<Int8>), ((UInt32(162) & 127)..(UInt32(135) &
            127) : ((Int64(Int16(87)) | 1))));
    let var1819: Int8 = Int8(Int8(111));
    func func1562(namedParam1563!: Array<Bool>, namedParam1564!: Option<Option<Aggregate27>>, namedParam1565!: Int8,
        namedParam1566!: (Bool, Int64, ((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64), UInt32, Unit, 
            Float64, UInt64)): Array<Bool> { // block id: 1567
        var var1725: UInt32 = UInt32(238);
        match {
            case var1725 < UInt32(246) => UInt8(207)
            case if (var1403) { // block id: 1732
                var73;
                [[true, true, false, false, false, false, false, false, true, false],
                    [false, true, false, true, false, true, true, true, false, false],
                    [false, false, true, true, true, true, true, true, true, true],
                    [false, false, false, true, true, true, true, false, false, false],
                    [false, true, false, false, false, false, false, true, false, false],
                    [false, false, true, true, false, true, false, true, true, true],
                    [true, false, true, false, false, false, true, false, true, true],
                    [true, false, false, true, true, false, false, false, true, true],
                    [false, true, false, false, true, false, true, false, false, true],
                    [true, true, false, false, true, true, false, false, true, true]];
                var122
            } else if (var122) { // block id: 1737
                if (false) {
                    var1741
                } else {
                    var1741
                };
                false
            } else { // block id: 1801
                ();
                ();
                false
            } => UInt8(5)
            case _ =>
                ();
                let var1813: Range<Int64> = (((-37) & 127)..=(114 & 127) : (57 | 1));
                if (var1403) {
                    (var1813, var1598, param1557, (-103.0), var1819, var73)
                } else {
                    var1824
                };
                var609 + UInt8(19)
        } |> {lambdaParameter1719: UInt8 => [true, false, true, false, true, false, false, false, true, false]}
    };

    let var1838: Option<Option<Aggregate27>> = Option<Option<Aggregate27>>.Some(Option<Aggregate27>.Some(Aggregate27()));
    func func1869(param1870: Int64, optionalParam1871!: Range<Int8> = ((Int8(10) & 127)..(Int8(50) & 127) : ((-74) | 1)),
        namedParam1873!: Array<Int16>,
        namedParam1874!: (Unit, Float64, Range<UInt64>, (Array<Unit>, Range<Int64>, Array<Unit>, Int32, UInt8, Float64, 
            Rune), Range<UInt8>)): Array<Bool> { // block id: 1875
        match (try { // block id: 1878
            var609 ^= var609
            Option<Aggregate27>.Some(Aggregate27())
        } finally { // block id: 1884
            let var1886: Option<Unit> = Option<Unit>.Some(());
            var1886;
            var var1894: Option<Aggregate27> = Option<Aggregate27>.None;
            if (true) {
                Option<Aggregate27>.Some(var31)
            } else {
                var1894
            }
        }) {
            case caseVar1898 =>
                if (var1476) {
                    ((UInt32(9) & 127)..=(UInt32(186) & 127) : ((var1906 | 1)))
                } else {
                    ((UInt32(156) & 127)..(UInt32(107) & 127) : ((-92) | 1))
                };
                var73;
                [false, false, true, true, false, true, true, false, false, false]

            case _ =>
                var1465;
                var1598
        }
    };

    let var1918: Range<Int8> = ((Int8(69) & 127)..=(Int8(39) & 127) : (13 | 1));
    let var1928: Int16 = Int16(-116);
    var var1934: Int16 = Int16(Int16(3));
    let var4360: (Range<UInt32>) -> Range<UInt64> = func1977;
    var var4388: ?Aggregate27 = Option<Aggregate27>.Some(Aggregate27());
    [func1562(namedParam1563: [false, true, false, true, false, false, true, true, false, false],
        namedParam1564: var1838, namedParam1565: var1819, namedParam1566: var1844)[0],
        (func1869(var1906, optionalParam1871: var1918,
        namedParam1873: [Int16(56), var1923, Int16(-90), var202, var1928, var202, Int16(-47), Int16(68), var1934,
            Int16(-92)], namedParam1874: var1939) is Range<UInt32>), var1403, try { // block id: 1964
        UInt64(114) <= UInt64(140)
    } finally { // block id: 1968
        var122
    }, ([47, (-85), 124, (-12), (-88), 13, 11, (-100), (-53), 17][6] is Enum1584),
        func956((((UInt32(243) & 127)..=(var3955 & 127) : (((-64) | 1))) |> var4360)), try { // block id: 4367
        if (var2913) {
            Option<Int8>.None
        } else {
            Option<Int8>.Some(Int8(76))
        };
        var2995
    } finally { // block id: 4374
        ();
        if (true) {
            var1939
        } else {
            var1939
        };
        true
    }, match ((var4388 ?? var31)) {
        case _ =>
            Int32(-50);
            if (var1476) {
                var4399
            } else {
                var4399
            };
            (-100) != var1906

        case caseVar4418 =>
            false;
            var2913

        case _: (Rune, (Bool, Int64, ((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64), UInt32, Unit, 
                Float64, UInt64), Range<Int16>, Float32, Bool, Range<UInt32>) =>
            if (true) {
                var4388
            } else {
                var4388
            };
            var609++;
            var1476

        case _ =>
            ();
            var2913
    }, (var2550 is Array<Int64>), try { // block id: 4439
        var609 >= var609
    } catch (_) { // block id: 4443
        Int32(41) >= var496
    } finally { // block id: 4447
        var73;
        var73;
        true
    }]
}

public func func790(param791: Range<Int64>): Int16 { // block id: 792
    var var818: Array<Int8> = Array<Int8>(10) {i => Int8(21)}
    var loopTimeVar850: Int64 = 0;
    do {
        loopTimeVar850++;
        var818[4];
        (var846 ?? ())
    } while (((match (var797) {
        case _ =>
            let var804: UInt32 = UInt32(Int32(-41));
            ((var804, var73, UInt64(220)), UInt16(91), var609, var158, var122, (-6))
    } is Range<UInt8>)) && loopTimeVar850 < 100);
    let var945: (UInt32, Unit, UInt64) = (UInt32(Int32(UInt32(UInt32(59)))), (), UInt64(133));
    let var4575: Bool = true;
    let var4683: Int8 = Int8(81);
    let var4743: Int32 = Int32(-121);
    func func852(
        optionalParam853!: Option<((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64)> = Option<((UInt32, Unit, 
                UInt64), UInt16, UInt8, UInt64, Bool, Int64)>.Some(
            ((UInt32(150), (), UInt64(Int32(-112))), UInt16(Int8(126)), UInt8(216), UInt64(140), ((false, 43, ((UInt32(214),
                            (), UInt64(106)), UInt16(196), UInt8(138), UInt64(101), false, 109), UInt32(104), (), 42.0,
                    UInt64(187)) is Rune), (-44))),
        optionalParam884!: (Rune, (Bool, Int64, ((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64), UInt32, 
            Unit, Float64, UInt64), Range<Int16>, Float32, Bool, Range<UInt32>) = (r'l', (((true, 60, ((UInt32(230), (),
                            UInt64(227)), UInt16(82), UInt8(78), UInt64(110), true, 67), UInt32(226), (), 1.0, UInt64(48)) is UInt32),
                Int64(UInt32(Int32(5))), ((UInt32(195), (), UInt64(85)), UInt16(Int8(-61)), UInt8(60), UInt64(UInt32(85)),
                    (r'l' is (Array<Unit>, Range<Int64>, Array<Unit>, Int32, UInt8, Float64, Rune)), Int64(0)), UInt32(Int32(UInt8(85))),
                (), Float64(Float64(Float32(59.0))), UInt64(65)), ((Int16(45) & 127)..=(Int16(39) & 127) : (37 | 1)),
            Float32(Float32(90.0)), false, ((UInt32(Int32(-122)) & 127)..=(UInt32(55) & 127) : (((-44) | 1)))),
        optionalParam940!: Rune = r'C'): Int16 { // block id: 942
        var945[1];
        var var1362: Int64 = (-8);
        var var1368: (Unit, Float64, Range<UInt64>, (Array<Unit>, Range<Int64>, Array<Unit>, Int32, UInt8, Float64, 
            Rune), Range<UInt8>) = ((), 23.0, ((UInt64(138) & 127)..=(UInt64(48) & 127) : ((-19) | 1)), ([(), (), (), (),
                    (), (), (), (), (), ()], ((83 & 127)..(Int64(Int16(-3)) & 127) : ((Int64(Int32(-79)) | 1))), [(), (),
                    (), (), (), (), (), (), (), ()], Int32(-64), UInt8(Int8(UInt8(161))), Float64(Float32(-103.0)), r'V'),
            ((UInt8(178) & 127)..=(UInt8(94) & 127) : (69 | 1)));
        var loopTimeVar1456: Int64 = 0;
        while (((((UInt64(50) & 127)..(UInt64(170) & 127) : ((var1362 | 1))) |> {
                lambdaParameter1351: Range<UInt64> => var328.var1356
            })) && loopTimeVar1456 < 100) {
            loopTimeVar1456++;
            var1368[0];
            var loopTimeVar1454: Int64 = 0;
            while ((var1403) && loopTimeVar1454 < 100) {
                loopTimeVar1454++;
                var73
            }
        };
        var var1499: Option<Option<Aggregate27>> = Option<Option<Aggregate27>>.Some(
            Option<Aggregate27>.Some(Aggregate27()));
        var var1514: (Float64, Int16, Array<Int16>, Range<Int16>, Range<Int8>, (UInt32, Unit, UInt64)) = (Float64((-9.0)),
            Int16(76), [Int16(-90), Int16(-37), Int16(UInt16(Int8(-66))), Int16(UInt16(UInt8(232))), Int16(Int8(73)),
                Int16(104), Int16(Int16(92)), Int16(-114), Int16(Int8(114)), Int16(Int16(104))], ((Int16(98) & 127)..=(Int16(-30) &
                127) : (41 | 1)), ((Int8(Int8(-29)) & 127)..=(Int8(103) & 127) : ((Int64(Int32(46)) | 1))), (UInt32(247),
                (), UInt64(190)));
        let var4452: (Array<Array<Bool>>) -> Array<Bool> = func1556;
        let var4477: Option<Array<Bool>> = Option<Array<Bool>>.Some(
            [true, true, true, true, false, true, false, false, true, false]);
        func func1551(
            optionalParam1552!: Array<Int16> = [Int16(-10), Int16(-50), Int16(31), Int16(-56), Int16(42), Int16(103),
                Int16(15), Int16(-2), Int16(31), Int16(-55)]): Array<Int16> { // block id: 1554
            let var4499: Option<Array<Bool>> = Option<Array<Bool>>.Some(
                [(((UInt32(18), (), UInt64(138)), ((UInt8(97) & 127)..=(UInt8(199) & 127) : (29 | 1)), false) is ((Rune, 
                        (Bool, Int64, ((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64), UInt32, Unit, 
                        Float64, UInt64), Range<Int16>, Float32, Bool, Range<UInt32>), Option<Aggregate27>) -> Class19),
                    true, (() is Array<Int16>), true, true,
                    (((UInt8(165) & 127)..(UInt8(8) & 127) : ((106 | 1))) is UInt64), true,
                    (((UInt32(217), (), UInt64(145)), UInt16(132), UInt8(48), UInt64(153), false, (-89)) is (Range<Int32>) -> Rune),
                    (Option<Range<Int32>>.Some(((Int32(21) & 127)..=(Int32(82) & 127) : ((-70) | 1))) is Bool),
                    (((UInt16(79) & 127)..=(UInt16(211) & 127) : (((-94) | 1))) is Option<((UInt32, Unit, UInt64), 
                    UInt16, UInt8, UInt64, Bool, Int64)>)]);
            [var1598, (Option<Array<Bool>>.None ?? [true, true, true, true, true, true, true, true, true, true]),
                (Option<Array<Bool>>.None ?? [true, false, false, true, false, false, true, true, false, false]),
                match (optionalParam940) {
                case _ =>
                    if (false) {
                        var4477
                    } else {
                        Option<Array<Bool>>.Some([false, var2362, var2362, true, false, true, false, var2362, var122,
                            var2362])
                    };
                    var73;
                    if (false) {
                        [false, false, false, false, false, false, true, false, false, true]
                    } else {
                        var1598
                    }
            }, (var4499 ?? [true, var4543, false, var2995, true, false, var1476, true, false, var4543]),
                (var4477 ?? [var4557, var2913, false, var1403, var122, var1476, var2913, true, true, true]),
                if (false) {
                [true, var4575, false, var2913, var122, var122, var4543, false, var1403, false]
            } else {
                [true, false, true, false, false, true, var2913, var122, false, var2362]
            }, try { // block id: 4597
                var3473;
                var var4601: Int8 = Int8(Int8(-31));
                var4601 <<= ((var4601) & 7)
                [false, false, false, true, false, true, true, true, false, true]
            } catch (e: Exception) { // block id: 4606
                var var4619: Bool = (Option<Int8>.None is Range<Int16>);
                if (var122) {
                    [false, var4575, var4557, true, false, var2913, false, var4575, var4619, true]
                } else {
                    [false, false, false, false, false, true, false, true, true, false]
                }
            }, [false, var4543, false, var122, var122, var1403, true, false, var2995, true],
                [var2995, false, false, true, true, var4575, false, false, var122, true]] |> var4452;
            var var4650: Option<Bool> = Option<Bool>.Some(true);
            var var4656: Unit = ();
            (if ((var4650 ?? var2913)) {
                Option<Unit>.Some(var4656)
            } else {
                match (var3335) {
                    case _ =>
                        var158 /= ((UInt64(134)) | 1)
                        var846
                }
            } ?? var3462);
            let var4701: Range<UInt8> = ((UInt8(Int8(Int8(Int8(31)))) & 127)..(UInt8(Int8(Int8(22))) & 127) : ((Int64(Int32(-7)) |
                1)));
            match (match {
                case var4543 =>
                    ((UInt16(85) & 127)..=(UInt16(53) & 127) : ((-21) | 1));
                    if (false) {
                        (((56 & 127)..=((-36) & 127) : ((38 | 1))), [true, true, false, false, false, true, false, false,
                                false, true], [[false, true, false, true, true, false, true, true, true, true],
                                [false, true, false, true, false, false, false, true, false, false],
                                [false, false, true, true, true, false, false, true, true, true],
                                [true, true, true, true, true, false, false, false, false, true],
                                [false, true, true, true, true, false, false, true, true, true],
                                [false, false, true, true, true, true, false, true, true, false],
                                [true, true, false, true, false, false, false, false, false, false],
                                [false, false, true, true, false, true, true, false, false, false],
                                [false, true, true, true, false, true, false, true, true, false],
                                [false, true, false, true, true, false, false, true, false, true]], var2519, var4683,
                            var4686)
                    } else {
                        ((((-111) & 127)..(115 & 127) : (95 | 1)), [false, true, false, false, true, false, false, true,
                                false, false], [[true, false, true, true, false, true, true, true, true, true],
                                [false, false, false, true, true, false, false, true, false, false],
                                [false, false, false, false, true, false, true, false, true, true],
                                [false, true, true, false, false, true, true, true, true, false],
                                [false, true, true, false, false, false, false, true, true, false],
                                [true, true, false, false, false, true, false, true, false, true],
                                [false, true, true, true, true, true, false, true, false, false],
                                [false, true, true, true, true, true, false, false, true, false],
                                [false, true, true, false, true, false, false, false, false, false],
                                [false, true, true, false, false, false, false, false, true, false]], 80.0, var4683, ())
                    };
                    if (var4543) {
                        var2682
                    } else {
                        var2682
                    }
                case match (var4701) {
                    case _ => var2995
                } =>
                    var2550;
                    var286 << ((var286) & 7);
                    if (true) {
                        var2682
                    } else {
                        var2682
                    }
                case _ =>
                    var4727 /= ((var3679) | 1)
                    var2682
            }) {
                case caseVar4733: Range<UInt8> =>
                    var3473;
                    var4686;
                    optionalParam1552

                case _ => optionalParam1552
            }
        };

        if (if (var1403) { // block id: 1462
            UInt64(45);
            var1465;
            true
        } else if (var1476) { // block id: 1495
            if (var1403) {
                var1499
            } else {
                Option<Option<Aggregate27>>.None
            };
            var609 < UInt8(147)
        } else { // block id: 1507
            ###"dq/Ju5<tg&"###;
            !false
        }) {
            var1514[2]
        } else {
            func1551()
        }[9]
    };

    var var4795: (Rune, (Bool, Int64, ((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64), UInt32, Unit, 
        Float64, UInt64), Range<Int16>, Float32, Bool, Range<UInt32>) = (r'b', (([Int8(92), Int8(107), Int8(-70),
                Int8(120), Int8(6), Int8(-52), Int8(10), Int8(-128), Int8(-113), Int8(-15)] is Range<Int8>), (-29), ((UInt32(77),
                    (), UInt64(74)), UInt16(156), UInt8(177), UInt64(Int32(85)), true, (-26)), UInt32(56), (), 81.0,
            UInt64(Int32(UInt32(140)))), ((Int16(-12) & 127)..=(Int16(43) & 127) : ((-127) | 1)), Float32(-114.0), false,
        ((UInt32(32) & 127)..(UInt32(162) & 127) : ((Int64(Int16(-127)) | 1))));
    var var4921: Bool = true;
    func852(optionalParam884: match (Option<Option<Aggregate27>>.Some(var4789)) {
        case _ => var4795

        case caseVar4839 =>
            var var4843: Bool = true;
            var var4846: Option<Range<Int32>> = Option<Range<Int32>>.Some(
                ((Int32(66) & 127)..(Int32(52) & 127) : ((Int64(UInt32(27)) | 1))));
            if (var4843) {
                var4846
            } else {
                Option<Range<Int32>>.Some(((Int32(111) & 127)..=(Int32(90) & 127) : ((var1906 | 1))))
            };
            var var4862: ?Range<UInt8> = Option<Range<UInt8>>.None;
            if (var1403) {
                Option<Range<UInt8>>.None
            } else {
                var4862
            };
            var4795

        case _ =>
            var var4885: Int64 = Int64(UInt32(UInt16(206)));
            if (false) {
                (r'a', (var2362, 55, ((var3955, (), UInt64(154)), UInt16(218), UInt8(170), var158, var4557, var4885),
                        var3993, (), var2519, var158), ((Int16(85) & 127)..=(Int16(-3) & 127) : ((-78) | 1)), var4895,
                    var4543, ((UInt32(148) & 127)..=(var4903 & 127) : ((8 | 1))))
            } else {
                (r'N', var1844, ((var3395 & 127)..=(var3395 & 127) : ((89 | 1))), var166, var122, ((UInt32(166) & 127)..(UInt32(186) &
                        127) : ((-88) | 1)))
            }

        case _ =>
            var3473;
            var var4929: ((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64) = ((UInt32(187), (), UInt64(103)),
                UInt16(26), UInt8(UInt8(95)), UInt64(13), ((((126 & 127)..(53 & 127) : ((0 | 1))), [true, false, true,
                        false, true, false, true, true, false, true], [[false, true, true, false, false, true, false,
                        false, false, false], [true, false, true, true, true, false, false, true, false, false],
                        [true, true, false, true, false, false, true, true, true, false],
                        [false, false, false, false, true, false, true, true, true, false],
                        [true, false, false, true, false, false, false, false, false, true],
                        [true, true, true, true, false, false, true, false, false, false],
                        [true, false, true, false, true, true, true, true, true, true],
                        [false, false, false, false, false, true, false, true, false, false],
                        [false, false, true, true, true, false, false, false, true, true],
                        [false, true, true, false, false, false, true, true, true, false]], Float64(Float32(4.0)), Int8(Int8(-69)),
                    ()) is (Option<((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64)>, (Rune, (Bool, Int64, ((UInt32, 
                        Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64), UInt32, Unit, Float64, UInt64), Range<Int16>, 
                        Float32, Bool, Range<UInt32>), Rune) -> Int16), Int64(UInt64(Int16(61))));
            if (var4921) {
                (r'E', (var1403, (-114), var4929, UInt32(235), (), var2519, UInt64(11)), ((var3395 & 127)..=(Int16(110) &
                        127) : ((37 | 1))), var4895, false, ((UInt32(58) & 127)..(UInt32(205) & 127) : ((-87) | 1)))
            } else {
                var4795
            }
    }, optionalParam940: if (if (var4557) { // block id: 5050
        var1403
    } else { // block id: 5052
        var4686;
        [Int8(-79), Int8(-16), Int8(26), Int8(2), Int8(27), Int8(31), Int8(-59), Int8(17), Int8(-120), Int8(-9)];
        var3335 > var286
    }) { // block id: 5058
        var2747 ^= var2747
        r'H'
    } else { // block id: 5063
        let var5067: Array<Int16> = [Int16(52), Int16(118), Int16(-39), Int16(105), Int16(49), Int16(-16), Int16(-74),
            Int16(70), Int16(-29), Int16(-32)];
        if (true) {
            var5067
        } else {
            [var202, var3420, var202, var3420, var3420, var3395, Int16(15), Int16(103), Int16(-60), Int16(-28)]
        };
        var4146
    })
}

func func786(param787: Range<Int64>): (Rune, (Bool, Int64, ((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64), 
    UInt32, Unit, Float64, UInt64), Range<Int16>, Float32, Bool, Range<UInt32>) { // block id: 788
    (match (((var61 & 127)..(var2747 & 127) : (((-26) | 1)))) {
        case _ =>
            var var5095: Unit = ();
            var5095;
            Option<Range<Int64>>.Some((((-63) & 127)..=((-54) & 127) : ((var1906 | 1))))
    } ?? param787) |> func790;
    let var5104: (Rune, (Bool, Int64, ((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64), UInt32, Unit, 
        Float64, UInt64), Range<Int16>, Float32, Bool, Range<UInt32>) = (r'R', (true, 90, ((UInt32(45), (), UInt64(78)),
                UInt16(Int16(-81)), UInt8(UInt8(171)), UInt64(UInt8(167)), false, (-44)), UInt32(Int8(-61)), (), Float64(Float32(53.0)),
            UInt64(99)), ((Int16(13) & 127)..=(Int16(20) & 127) : (35 | 1)), Float32(Float32(123.0)), (((UInt8(115) & 127)..=(UInt8(42) &
            127) : ((-28) | 1)) is Option<Array<Bool>>), ((UInt32(96) & 127)..=(UInt32(62) & 127) : (95 | 1)));
    var5104
}

public func func753(param754: Int16): (Rune, (Bool, Int64, ((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64), 
    UInt32, Unit, Float64, UInt64), Range<Int16>, Float32, Bool, Range<UInt32>) { // block id: 755
    let var781: UInt8 = UInt8(UInt8(51));
    func func758(
        namedParam759!: (Rune, (Bool, Int64, ((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64), UInt32, Unit, 
            Float64, UInt64), Range<Int16>, Float32, Bool, Range<UInt32>),
        optionalParam760!: Option<Aggregate27> = Option<Aggregate27>.None): Class19 { // block id: 762
        var var765: ?UInt64 = Option<UInt64>.Some(UInt64(199));
        match (var765) {
            case _: Option<Aggregate27> =>
                var61 /= ((var61) | 1)
                var73;
                var328

            case _ =>
                var609 <<= ((var781) & 7)
                var328
        }
    };

    var var5136: (Range<Int64>) -> (Rune, (Bool, Int64, ((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64), 
        UInt32, Unit, Float64, UInt64), Range<Int16>, Float32, Bool, Range<UInt32>) = func786;
    func758(namedParam759: (((126 & 127)..(44 & 127) : ((-7) | 1)) |> var5136)).var466;
    let var5141: (Rune, (Bool, Int64, ((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64), UInt32, Unit, 
        Float64, UInt64), Range<Int16>, Float32, Bool, Range<UInt32>) = (r'p', (((Option<(Int8, (UInt8, Float64, UInt16), 
                    Option<Option<Option<Aggregate27>>>, Range<UInt16>, (UInt8, Float64, UInt16), Range<UInt8>, ((UInt32, 
                    Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64))>.None as Aggregate27) is Option<Option<Range<UInt8>>>),
            Int64(Int32(Int16(-4))), ((UInt32(44), (), UInt64(252)), UInt16(Int16(107)), UInt8(78), UInt64(Int32(-43)), ([false,
                    false, true, false, false, false, true, true, false, false] is Int8), Int64(UInt8(42))), UInt32(UInt16(Int8(7))),
            (), 3.0, UInt64(233)), ((Int16(-48) & 127)..=(Int16(30) & 127) : ((-87) | 1)), Float32(1.0), (Option<Option<Aggregate27>>
            .None is Range<UInt16>), ((UInt32(181) & 127)..(UInt32(UInt16(253)) & 127) : ((56 | 1))));
    var5141
}

func func335(param336: Float32, namedParam337!: UInt8): Unit { // block id: 338
    var328.func342(namedParam343: try { // block id: 5915
        var2731;
        (namedParam337, (-97.0), UInt16(20))
    } catch (e: Exception) { // block id: 5921
        var4686;
        var1465
    } finally { // block id: 5924
        ();
        if (var2362) {
            var1465
        } else {
            (namedParam337, 95.0, UInt16(14))
        }
    }, namedParam344: try { // block id: 5934
        ();
        ()
    } catch (_) { // block id: 5937
        var2519 *= var2519
    } finally { // block id: 5941
        ();
        var4686
    }, namedParam345: var5946 <= Int8(-84));
    let var5957: UInt64 = UInt64(UInt8(Int8(UInt8(Int8(61)))));
    (Option<Unit>.Some(()) ?? (var158 &= var5957 >> ((UInt64(202)) & 7)))
}

public func func236(param237: Bool): Option<Option<Aggregate27>> { // block id: 238
    var var294: UInt16 = UInt16(UInt16(65));
    let var305: Option<((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64)> = Option<((UInt32, Unit, UInt64), 
            UInt16, UInt8, UInt64, Bool, Int64)>.Some(
        ((UInt32(UInt32(77)), (), UInt64(UInt64(207))), UInt16(Int8(Int8(-107))), UInt8(26), UInt64(UInt8(Int8(80))), (Aggregate27() is Float32),
            5));
    if (match (match (Option<Aggregate27>.None) {
        case _ =>
            var73;
            var73;
            var var248: ?UInt64 = ((true, Int64(UInt16(UInt16(129))), ((UInt32(89), (), UInt64(13)), UInt16(UInt8(169)),
                    UInt8(Int8(-25)), UInt64(UInt32(154)), true, Int64(UInt16(26))), UInt32(5), (), 118.0, UInt64(239)) as UInt64);
            var248
    }) {
        case caseVar275 => UInt64(45) <= UInt64(86)

        case _ => UInt16(23) == var286

        case _ =>
            ();
            var294 &= var294
            true
    }) { // block id: 299
        var loopTimeVar325: Int64 = 0;
        while ((var122) && loopTimeVar325 < 100) {
            loopTimeVar325++;
            var73;
            var305
        }
    };
    var328.func331(Option<UInt64>.Some(var158));
    Option<Option<Aggregate27>>.Some(Option<Aggregate27>.Some(var31))
}

public func func222(param223: Aggregate27): Option<UInt64> { // block id: 224
    (((true |> func236) ?? match (UInt8(246)) {
        case caseVar6093: Range<UInt16> =>
            if (true) {
                Option<((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64)>.None
            } else {
                var797
            };
            var var6101: Int8 = Int8(Int8(Int8(Int8(68))));
            var6101 -= var6101
            var4789

        case _ =>
            var4727 >>= ((UInt8(196)) & 7)
            ((Int16(-101) & 127)..(Int16(96) & 127) : (50 | 1));
            Option<Aggregate27>.None
    }) ?? (Option<Aggregate27>.Some(Aggregate27()) ?? (Option<Aggregate27>.Some(var31) ?? var31)));
    Option<UInt64>.None
}

func func212(optionalParam213!: Unit = ()): Option<UInt64> { // block id: 215
    Class19.var219;
    let var6127: (Range<Int64>) -> (Rune, (Bool, Int64, ((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64), 
        UInt32, Unit, Float64, UInt64), Range<Int16>, Float32, Bool, Range<UInt32>) = func786;
    var var6130: ?Range<Int64> = Option<Range<Int64>>.Some((((-44) & 127)..(100 & 127) : (123 | 1)));
    var var6156: Int16 = Int16(Int8(15));
    func222(match (Enum1584.enumValue5591(func2597, var6127, var6130)) {
        case enumValue5591(_, caseVar6135, caseVar6136) =>
            let var6140: Bool = false;
            let var6145: (UInt32, Unit, UInt64) = (UInt32(86), (), UInt64((-111)));
            var var6170: Int16 = Int16(-56);
            if (var6140) {
                var31
            } else {
                Aggregate27(namedParam5314: var6145,
                    namedParam5315: [true, false, true, true, true, true, true, true, false, false],
                    namedParam5316: [Int16(-104), Int16(-48), var6156, var6156, Int16(48), Int16(-121), var3420, var6164,
                        var3395, var6170])
            }

        case _ => Aggregate27(namedParam5314: var6176,
            namedParam5315: [false, false, false, false, true, true, true, true, false, false],
            namedParam5316: [Int16(-22), var6156, Int16(77), var3420, var1923, var1923, Int16(21), Int16(38), var202,
                Int16(16)])
    })
}

func func99(param100: Class19): UInt64 { // block id: 101
    let var133: ((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64) = ((UInt32(148), (), UInt64(UInt16(225))),
        UInt16(UInt16(UInt16(84))), UInt8(UInt8(208)), UInt64(92), true, Int64(Int64(UInt64(186))));
    var var151: UInt32 = UInt32(Int16(UInt16(88)));
    try { // block id: 103
        param100.var107;
        param100.var115
    } finally { // block id: 117
        (var122, var61, var133, var151, (), 115.0, var158)[4];
        var loopTimeVar169: Int64 = 0;
        while ((var122) && loopTimeVar169 < 100) {
            loopTimeVar169++;
            ();
            var166
        }
    };
    let var180: UInt64 = UInt64(Int8(-110));
    var var6205: UInt64 = UInt64(Int32(74));
    (if (match {
        case false =>
            var180;
            let var184: Option<((UInt32, Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64)> = Option<((UInt32, Unit, 
                    UInt64), UInt16, UInt8, UInt64, Bool, Int64)>.Some(
                ((UInt32(119), (), UInt64(151)), UInt16(228), UInt8(134), UInt64(181), (Int16(UInt16(133)) is ((UInt32, 
                        Unit, UInt64), UInt16, UInt8, UInt64, Bool, Int64)), 26));
            var184;
            var122
        case _ =>
            var202 >>= ((Int16(74)) & 7)
            var151 -= var151
            var122 || var122
    }) {
        func212()
    } else {
        var2602
    } ?? try { // block id: 6197
        ();
        var180 << ((UInt64(124)) & 7)
    } finally { // block id: 6202
        var6205 * var6205
    })
}

func func95<T0, T1, T2>(param96: UInt16): UInt64 { // block id: 97
    var var6210: (Class19) -> UInt64 = func99;
    (try { // block id: 6214
        var3462;
        var6217
    } catch (_) { // block id: 6221
        -var4895
        var3473;
        var6217
    } ?? if (var122) {
        Class19()
    } else {
        Class19(((UInt8(242) & 127)..(var3679 & 127) : ((112 | 1))),
            [((Int32(99) & 127)..(Int32(118) & 127) : (121 | 1)), ((Int32(-77) & 127)..(Int32(60) & 127) : ((-47) | 1)),
                var4227, var4227, ((var496 & 127)..=(var496 & 127) : (((-60) | 1))), var4227,
                ((Int32(-51) & 127)..=(Int32(101) & 127) : ((var61 | 1))), var4227, var4227,
                ((var496 & 127)..(var496 & 127) : ((118 | 1)))])
    }) |> var6210
}

public func func14(param15: Int16): (UInt8, Float64, UInt16) { // block id: 16
    Class19.var24 %= ((var31.func34(optionalParam35: var496, namedParam37: var4727)) | 1)
    try { // block id: 6261
        let var6268: Option<Rune> = (() as Rune);
        (var6268 ?? var617);
        var1465
    } catch (_) { // block id: 6273
        (var846 ?? ());
        var1465
    }
}

extend Class19 {
    public func func331(param332: Option<UInt64>): Unit { // block id: 333
        func335(try { // block id: 5965
            ((Int32(24) & 127)..(Int32(-17) & 127) : ((-104) | 1));
            if (var5894) {
                var3405
            } else {
                var3405
            };
            Float32(-93.0)
        } catch (e: Exception) { // block id: 5972
            if (true) {
                var5976
            } else {
                var5976
            };
            Float32(-44.0)
        }, namedParam337: UInt8(if (true) { // block id: 5983
            Int16(82) << ((var1923) & 7);
            ();
            var4727
        } else if (true) { // block id: 5990
            var var5993: UInt16 = UInt16(175);
            var5993 <<= ((UInt16(246)) & 7)
            [(-111), var1906, var1906, 73, var2747, var2747, var2747, 113, 30, var1906];
            UInt8(148)
        } else { // block id: 6008
            UInt8(205)
        }));
        ();
        var loopTimeVar6081: Int64 = 0;
        (match ((Option<Array<Range<Int32>>>.Some(
            [((Int32(69) & 127)..=(Int32(-8) & 127) : (34 | 1)), ((Int32(-2) & 127)..(Int32(28) & 127) : (120 | 1)),
                ((Int32(-105) & 127)..(Int32(-126) & 127) : (32 | 1)), ((Int32(-90) & 127)..=(Int32(-123) & 127) : (3 | 1)),
                ((Int32(94) & 127)..=(Int32(-17) & 127) : ((-59) | 1)), ((Int32(-1) & 127)..=(Int32(42) & 127) : (99 | 1)),
                ((Int32(-116) & 127)..=(Int32(-110) & 127) : ((-28) | 1)),
                ((Int32(1) & 127)..=(Int32(118) & 127) : ((-93) | 1)),
                ((Int32(-111) & 127)..=(Int32(-19) & 127) : ((-82) | 1)), ((Int32(110) & 127)..(Int32(-5) & 127) : (6 | 1))]) ??
            var4046)) {
            case caseVar6023: Option<Float32> =>
                let var6036: Int32 = Int32(Int8(Int8(UInt8(UInt8(125)))));
                if (false) {
                    var2682
                } else {
                    ([(), (), (), (), (), (), (), (), (), ()], ((var2747 & 127)..=(var2747 & 127) : ((4 | 1))), var4127,
                        var6036, var609, (-110.0), var4146)
                };
                ();
                var846

            case _: Option<Option<Aggregate27>> =>
                Option<Bool>.Some(false);
                var115;
                var846

            case caseVar6056 =>
                var3993 &= var4903
                ();
                var846

            case _ =>
                var var6068: Option<Unit> = Option<Unit>.Some(());
                if (var1403) {
                    var6068
                } else {
                    Option<Unit>.Some(var466)
                }
        } ?? do {
            loopTimeVar6081++;
            ((UInt16(11) & 127)..(UInt16(34) & 127) : (((-35) | 1)))
        } while ((true) && loopTimeVar6081 < 100))
    }
}

extend Aggregate27 {}
