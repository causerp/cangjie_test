/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

package test

// All global variable need to be defined before use!
public var var26: Bool = (Class6() is Int16)
var var192: Int32 = Int32(-99)
var var214: Int8 = Int8(Int8(Int8(UInt8(Int8(20)))))
public var var222: Int64 = Int64(Int8(Int8(Int8(89))))
let var253: (Range<Int32>, Range<UInt64>, Range<Int32>, Bool, Array<Bool>, Bool, Range<Int8>, Range<Int8>) = ((((Int32(-27) &
        127))..=((Int32(-35) & 127)) : ((92 | 1))), (((UInt64(220) & 127))..((UInt64(254) & 127)) : (((-73) | 1))), (((Int32(-110) &
        127))..=((Int32(UInt32(Int8(-74))) & 127)) : ((((-60) | 1)))), (Int64(UInt64(65)) is Unit), [true, true, true,
        false, true, false, true, true, true, false], true, (((Int8(77) & 127))..=((Int8(-114) & 127)) : (((-6) | 1))), (((Int8(-82) &
        127))..=((Int8(-73) & 127)) : ((123 | 1))))
public var var277: Int64 = 124
public let var372: ?Rune = ((((Int64(Int8(Int8(30))) & 127))..((Int64(Int16(83)) & 127)) : ((((-73) | 1)))) as Rune)
var var413: String = "\"z\"O3^l'TQ"
var var438: UInt32 = UInt32(3)
public let var448: Range<UInt32> = (((UInt32(61) & 127))..=((UInt32(37) & 127)) : (((Int64(UInt64(143)) | 1))))
var var477: Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
let var519: (Int16, Rune, Int16, Array<Bool>, Int8, UInt16, Range<Int8>) = (Int16(UInt8(UInt8(Int8(106)))), r'6', Int16(UInt8(Int8(-9))),
    [false, false, false, false, true, false, true, true, false, true], Int8(-29), UInt16(59), (((Int8(-84) & 127))..((Int8(-119) &
        127)) : (((-20) | 1))))
public var var568: Array<Bool> = [false, false, (UInt32(180) is Class6), true, true, true, false,
    (Class6() is Range<UInt16>), (UInt64(UInt64(Int16(25))) is (Interface11, Int8, UInt32, Interface10) -> Rune), false]
var var592: UInt8 = UInt8(80)
public var var623: Option<Range<Int16>> = Option<Range<Int16>>.None
public let var626: Range<UInt16> = (((UInt16(Int8(-100)) & 127))..((UInt16(100) & 127)) : ((((-49) | 1))))
let var641: Range<Int32> = (((Int32(89) & 127))..=((Int32(118) & 127)) : ((113 | 1)))
public let var648: Float32 = Float32(59.0)
let var777: Unit = ()
var var804: Range<UInt64> = (((UInt64(197) & 127))..=((UInt64(182) & 127)) : (((-80) | 1)))
public let var808: Option<Class6> = Option<Class6>.None
public let var835: Class6 = Class6()
let var852: UInt16 = UInt16(UInt8(UInt8(251)))
var var874: Option<Int16> = Option<Int16>.None
public let var938: UInt16 = UInt16(66)
public let var981: Range<Int32> = (((Int32(UInt8(Int8(UInt8(229)))) & 127))..=((Int32(43) & 127)) : ((((-15) | 1))))
public var var1001: Bool = ((((Int16(Int8(Int8(87))) & 127))..=((Int16(UInt16(96)) & 127)) : (((17 | 1)))) is (Array<Array<Bool>>) -> Int64)
let var1020: (Unit, Int32) = ((), Int32(-66))
let var1025: Range<UInt8> = (((UInt8(240) & 127))..((UInt8(235) & 127)) : (((-102) | 1)))
public let var1031: Rune = r'2'
public let var1170: UInt16 = UInt16(3)
public var var1212: UInt64 = UInt64(UInt8(UInt8(UInt8(UInt8(86)))))
public var var1223: Unit = ()
let var1383: Range<Int16> = (((Int16(Int16(21)) & 127))..=((Int16(125) & 127)) : (((Int64(UInt8(Int8(125))) | 1))))
let var1395: Int16 = Int16(51)
let var1501: Option<Interface10> = Option<Interface10>.None
public var var1561: Unit = ()
public let var1659: Interface10 = Class6()
let var1662: Unit = ()
var var1681: UInt16 = UInt16(Int8(UInt8(100)))
let var1774: (Array<Array<Bool>>, Array<UInt16>, Unit, Int8) = ([[false, true, false, false, true, true, false, true,
        true, true], [false, false, false, false, true, false, true, false, true, true],
        [false, false, false, false, true, true, false, true, true, true],
        [true, true, true, false, true, true, false, true, true, true],
        [true, true, false, false, false, true, true, true, false, true],
        [true, true, false, true, true, true, true, true, true, true],
        [true, false, true, false, false, false, false, true, true, false],
        [true, false, true, true, true, false, true, true, true, false],
        [false, false, false, false, true, false, true, true, false, true],
        [false, true, false, true, true, true, false, true, false, false]], [UInt16(149), UInt16(169), UInt16(171),
        UInt16(165), UInt16(106), UInt16(132), UInt16(108), UInt16(192), UInt16(145), UInt16(231)], (), Int8(-118))
public let var1781: Unit = ()
let var1909: UInt16 = UInt16(Int16(UInt8(UInt8(Int8(-17)))))
public var var2107: (UInt8, Range<Int16>, Option<UInt8>, Range<UInt16>, Bool, Array<UInt16>, Range<Int64>) = (UInt8(6), (((Int16(-23) &
        127))..((Int16(-39) & 127)) : (((-120) | 1))), ((Int64(Int16(-57)) as Rune) as UInt8), (((UInt16(120) & 127))..((UInt16(2) &
        127)) : (((-66) | 1))), ((((Int8(-34) & 127))..((Int8(110) & 127)) : ((10 | 1))) is Bool), [UInt16(UInt8(Int8(85))),
        UInt16(121), UInt16(Int16(25)), UInt16(224), UInt16(49), UInt16(235), UInt16(UInt16(32)), UInt16(Int8(-32)),
        UInt16(UInt16(UInt8(110))), UInt16(UInt16(Int16(43)))], ((((-56) & 127))..(((-18) & 127)) : ((12 | 1))))
public var var2462: Range<Int8> = (((Int8(20) & 127))..((Int8(-122) & 127)) : (((-118) | 1)))
var var2491: Float64 = Float64(Float64(Float32(Float32(Float32(-109.0)))))
let var2593: Option<Unit> = Option<Unit>.None
let var2703: Bool = false
let var3061: String = "[${var413}dK%t${var413}S${var413})Ts'"
var var3200: Range<Int32> = (((Int32(-77) & 127))..((Int32(-56) & 127)) : (((Int64(UInt64(118)) | 1))))
public let var3212: Bool = ((Float64(Float32(82.0)) as Option<Range<Int16>>) is (Class6) -> Unit)
public let var3398: Range<UInt8> = (((UInt8(13) & 127))..=((UInt8(140) & 127)) : (((Int64(UInt64(UInt32(Int8(-24)))) | 1))))
public var var3539: Option<Option<Rune>> = Option<Option<Rune>>.None
public var var3555: Unit = ()
public let var3641: Bool = ((Option<Bool>.None as Option<Range<Int16>>) is (Interface11, Int8, UInt32, Interface10) -> Rune)
public var var3985: Range<Int64> = (((Int64(UInt64(134)) & 127))..((Int64(UInt64(UInt64(UInt8(100)))) & 127)) : (((Int64(UInt32(UInt16(226))) |
    1))))
let var4012: Option<Option<Interface10>> = Option<Option<Interface10>>.None
let var4104: UInt64 = UInt64(153)
public let var4142: Option<Range<UInt8>> = Option<Range<UInt8>>.None
var var4621: Array<Array<UInt16>> = Array<Array<UInt16>>(10) {
    i => [UInt16(62), UInt16(99), UInt16(231), UInt16(188), UInt16(13), UInt16(25), UInt16(104), UInt16(6), UInt16(75),
        UInt16(197)]
}
var var4697: UInt16 = UInt16(UInt16(UInt8(81)))
public var var4712: Int16 = Int16(Int16(99))
let var4760: Option<Float64> = Option<Float64>.None
public let var5381: Interface11 = Class6()
public let var5465: (UInt64, Range<Int32>, Array<Bool>, Range<UInt16>) = (UInt64(122), (((Int32(-89) & 127))..=((Int32(-86) &
        127)) : ((113 | 1))), [true, true, true, true, false, true, true, true, false, true], (((UInt16(Int16(97)) & 127))..((UInt16(120) &
        127)) : (((Int64(UInt8(Int8(105))) | 1)))))
public let var5496: Option<Unit> = Option<Unit>.None

public interface Interface9 {}

public interface Interface11 {}

public interface Interface10 <: Interface9 & Interface11 {
    func func5342(namedParam5343!: Int8, namedParam5344!: (Class6) -> Unit,
        namedParam5347!: (UInt64, Option<Rune>, UInt16, Int16) -> Unit, namedParam5353!: (Array<Array<Bool>>) -> Int64): Int64 { // block id: 5356
        let var5367: ?UInt8 = Option<UInt8>.Some(UInt8(161));
        var var5384: Interface11 = Class6(
            namedParam2530: (UInt64(225), (((Int32(109) & 127))..((Int32(37) & 127)) : ((59 | 1))), [(Option<Float64>
                    .None is Range<Int8>), false, false,
                    ("$9>a{v9\\aF*" is Option<(Range<Int32>, Range<UInt64>, Range<Int32>, Bool, Array<Bool>, Bool, Range<Int8>, 
                    Range<Int8>)>), false, false, true, false, true,
                    ((((UInt16(198) & 127))..((UInt16(254) & 127)) : ((70 | 1))) is Class6)], (((UInt16(178) & 127))..=((UInt16(4) &
                    127)) : ((62 | 1)))), optionalParam2531: func1520);
        if (if (([r'L', r'l', r'Z', r'i', r'A', r'q', r'u', r'u', r'd', r'5'] is (Interface9) -> String)) { // block id: 5361
            (-86.0);
            var2703
        } else if (var26) { // block id: 5365
            var5367;
            var3641
        } else { // block id: 5371
            var277;
            true
        }) {
            try { // block id: 5375
                var438;
                ();
                if (true) {
                    var5381
                } else {
                    var5384
                }
            } finally { // block id: 5405
                if (var1001) {
                    var5384
                } else {
                    Class6()
                }
            }
        } else {
            (if ((Option<UInt8>.None is (Interface11, Int8, UInt32, Interface10) -> Rune)) {
                try { // block id: 5414
                    var var5416: Option<Option<Unit>> = ((((Int16(Int16(Int8(-50))) & 127))..=((Int16(-22) & 127)) : (((Int64(UInt8(55)) |
                        1)))) as Option<Unit>);
                    var5416;
                    let var5426: Interface11 = Class6();
                    var5426
                } finally { // block id: 5428
                    var3555;
                    var5384
                }
            } else {
                try { // block id: 5432
                    var var5439: Int64 = Int64(Int32(74));
                    if (var3641) {
                        (((var4712 & 127))..=((var1395 & 127)) : (((var5439 | 1))))
                    } else {
                        (((Int16(-55) & 127))..((Int16(-73) & 127)) : (((-36) | 1)))
                    };
                    let var5448: Int32 = Int32(UInt8(30));
                    Class6(
                        namedParam2530: (UInt64(63), (((var5448 & 127))..((Int32(17) & 127)) : ((((-116) | 1)))), var568,
                            var626), optionalParam2531: func1520, optionalParam2535: var2593)
                } finally { // block id: 5457
                    (Int8(71), namedParam5343);
                    if (true) {
                        Class6(namedParam2530: var5465, optionalParam2531: func1520)
                    } else {
                        var5384
                    }
                }
            })
        };
        let var5481: Int64 = 64;
        var5481 >> ((match {
            case match ([var2593, Option<Unit>.Some(()), var2593, var2593, Option<Unit>.Some(()), var2593, var2593,
                var5496, var2593, var2593]) {
                case _ => var26

                case _ => Int8(-98) < var214

                case _ => true

                case _ => var438 != UInt32(161)

                case _ =>
                    if (var3212) {
                        (((var438 & 127))..=((UInt32(246) & 127)) : (((var5481 | 1))))
                    } else {
                        var448
                    };
                    var1001 &&= var2703
                    true
            } =>
                if (var26) {
                    var3061
                } else {
                    ###" 1Z,>+kmKw"###
                };
                ();
                var222 >> ((var222) & 7)
            case match (Option<UInt8>.Some(var592)) {
                case _: Interface11 =>
                    var2491 /= Float64((Int32((-128.0))) | 1)
                    var1001 || var3641

                case caseVar5556: Int32 => var1001

                case _ => false
            } => var277
            case _ =>
                if (true) {
                    var804
                } else {
                    (((var1212 & 127))..((var1212 & 127)) : (((101 | 1))))
                };
                ();
                99 % (((-65)) | 1)
        }) & 7)
    }
}

public open class Class6 <: Interface9 & Interface10 {
    public init() {}
    private static var var487: Option<Range<Int16>> = Option<Range<Int16>>.None;
    public init(namedParam2530!: (UInt64, Range<Int32>, Array<Bool>, Range<UInt16>),
        optionalParam2531!: (String) -> Option<Range<Int16>> = func1520,
        optionalParam2535!: Option<Unit> = Option<Unit>.None) { // block id: 2537
        var1212 &= try { // block id: 2541
            ();
            var1212
        } finally { // block id: 2544
            UInt64(26)
        }
    }

    public func func5342(namedParam5343!: Int8, namedParam5344!: (Class6) -> Unit,
        namedParam5347!: (UInt64, Option<Rune>, UInt16, Int16) -> Unit, namedParam5353!: (Array<Array<Bool>>) -> Int64): Int64 { // block id: 5356
        let var5367: ?UInt8 = Option<UInt8>.Some(UInt8(161));
        var var5384: Interface11 = Class6(
            namedParam2530: (UInt64(225), (((Int32(109) & 127))..((Int32(37) & 127)) : ((59 | 1))), [(Option<Float64>
                    .None is Range<Int8>), false, false,
                    ("$9>a{v9\\aF," is Option<(Range<Int32>, Range<UInt64>, Range<Int32>, Bool, Array<Bool>, Bool, Range<Int8>, 
                    Range<Int8>)>), false, false, true, false, true,
                    ((((UInt16(198) & 127))..((UInt16(254) & 127)) : ((70 | 1))) is Class6)], (((UInt16(178) & 127))..=((UInt16(4) &
                    127)) : ((62 | 1)))), optionalParam2531: func1520);
        if (true) {
            if (var1001) {
                var5384
            } else {
                Class6()
            }
        }
        let var5481: Int64 = 64;
        var5481 >> ((if (match ([var2593, Option<Unit>.Some(()), var2593, var2593, Option<Unit>.Some(()), var2593,
            var2593, var5496, var2593, var2593]) {
            case _ =>
                if (var3212) {
                    (((var438 & 127))..=((UInt32(246) & 127)) : (((var5481 | 1))))
                } else {
                    var448
                };
                var1001 &&= var2703
                true
        }) { // block id: 5533

            var222 >> ((var222) & 7)
        } else if (match (Option<UInt8>.Some(var592)) {
            case _ => false
        }) { // block id: 5562
            var277
        } else { // block id: 5564
            if (true) {
                var804
            } else {
                (((var1212 & 127))..((var1212 & 127)) : (((101 | 1))))
            };
            ();
            99 % (((-65)) | 1)
        }) & 7)
    }
}

func func360(param361: Array<Array<Bool>>): Int64 { // block id: 362
    (-113)
}

public func func541(param542: Class6): Unit { // block id: 543
}

public enum Enum792 {
    defaultValue
}

public func func1520(param1521: String): Option<Range<Int16>> { // block id: 1522
    [(), (), (), (), (), (), (), (), (), ()][4];
    var623
}

func func128(param129: UInt64, optionalParam130!: Option<Rune> = (Class6() as Rune), namedParam133!: UInt16,
    optionalParam134!: Int16 = Int16(Int8(UInt8(42)))): Unit { // block id: 138
    var var150: (Range<Int32>, Range<UInt64>, Range<Int32>, Bool, Array<Bool>, Bool, Range<Int8>, Range<Int8>) = ((((Int32(-95) &
            127))..((Int32(-41) & 127)) : ((((-38) | 1)))), (((UInt64(Int16(Int16(11))) & 127))..((UInt64(130) & 127)) : (((Int64(Int16(UInt8(131))) |
            1)))), (((Int32(8) & 127))..=((Int32(-59) & 127)) : ((25 | 1))), true, [true, true, false, false, true, true,
            true, false, true, true], (Float64(Float32(Float32(85.0))) is Class6), (((Int8(51) & 127))..=((Int8(UInt8(29)) &
            127)) : (((32 | 1)))), (((Int8(-5) & 127))..=((Int8(-29) & 127)) : ((22 | 1))));

    var loopTimeVar3967: Range<UInt64> = (((UInt64(Int64(UInt8(158))) & 127))..=((UInt64(85) & 127)) : ((((-121) | 1))));
    for (i in loopTimeVar3967 where true) {
        ()
    }
}

public func func118(param119: Array<Array<Bool>>): Array<Array<Bool>> { // block id: 120
    var var4021: (UInt64, UInt16, Class6, Array<Rune>, (Unit, Int32), Array<Bool>) = (UInt64(Int32(Int8(14))), UInt16(242),
        Class6(
            namedParam2530: (UInt64(124), (((Int32(-69) & 127))..=((Int32(-3) & 127)) : ((27 | 1))), [true, true, false,
                    false, true, false, true, false, false, false], (((UInt16(87) & 127))..((UInt16(114) & 127)) : ((122 |
                    1))))), [r'Y', r'K', r's', r'4', r'Y', r'n', r'M', r'r', r'c', r'z'], ((), Int32(-95)), [true, false,
            (r'A' is (Range<UInt8>, Range<UInt64>, Array<Unit>, Int16, UInt16, (Range<Int32>, Range<UInt64>, Range<Int32>, 
            Bool, Array<Bool>, Bool, Range<Int8>, Range<Int8>), Float64)),
            ([Option<Unit>.None, Option<Unit>.Some(()), Option<Unit>.None, Option<Unit>.Some(()), Option<Unit>.None,
            Option<Unit>.Some(()), Option<Unit>.Some(()), Option<Unit>.Some(()), Option<Unit>.Some(()),
            Option<Unit>.None] is (Int16) -> Array<Rune>), false, false,
            (Option<Int16>.Some(Int16(-69)) is (UInt64, UInt16, Class6, Array<Rune>, (Unit, Int32), Array<Bool>)), true,
            false, (((), Int32(54)) is Interface10)]);

    match (var4142) {
        case _ => [[true, true, false, true, false, true, true, true, true, false],
            [false, false, false, false, true, false, true, false, true, false],
            [false, false, true, true, true, false, true, false, false, false],
            [false, false, false, true, true, true, true, false, false, false],
            [false, false, true, false, false, false, true, true, true, true],
            [false, false, false, false, true, true, true, true, true, false],
            [true, false, false, true, true, true, true, false, true, false],
            [true, false, true, false, false, true, true, false, true, false],
            [false, true, true, true, true, false, true, true, true, false],
            [false, false, true, true, true, false, false, true, false, true]]
    }
}

public func func92(param93: Int16): Rune { // block id: 94
    func func102(namedParam103!: UInt8): Bool { // block id: 104
        var var4165: (Array<Array<Bool>>) -> Array<Array<Bool>> = func118;
        ([[false]] |> var4165)[8][7]
    }
    var loopTimeVar4490: Int64 = 0;
    do {
        loopTimeVar4490++;
    } while ((func102(namedParam103: UInt8(42))) && loopTimeVar4490 < 100);
    var1031
}

public func func45(optionalParam46!: Float64 = Float64(1.0)): Bool { // block id: 49
    try { // block id: 51

    } finally { // block id: 58
        let var4493: (Int16) -> Rune = func92;
        Int16(63) |> var4493
    };

    match (var4621) {
        case _ =>
            ();
            UInt8(116)

        case _ => UInt8(185) | UInt8(202)
    } < UInt8(167)
}

main(): Int64 {
    try {
        let var4875: UInt64 = UInt64(UInt32(64));
        func func34(optionalParam35!: Int8 = Int8(-23), optionalParam37!: UInt64 = UInt64(199), namedParam39!: Unit,
            optionalParam40!: Float64 = (-108.0)): Bool { // block id: 42
            var loopTimeVar4837: Int64 = 0;
            do {
                loopTimeVar4837++;
            } while ((func45(optionalParam46: (var4760 ?? 72.0))) && loopTimeVar4837 < 100);

            var loopTimeVar4864: Int64 = 0;
            do {
                loopTimeVar4864++;
            } while ((35 > var222) && loopTimeVar4864 < 100);
            let var4867: Option<Bool> = Option<Bool>.Some(false);
            (var4867 ?? false)
        }

        let var4989: Float64 = 72.0;
        func func21(namedParam22!: Float64): Bool { // block id: 23
            var loopTimeVar31: Int64 = 0;
            do {
                loopTimeVar31++;
            } while ((var26) && loopTimeVar31 < 100);
            var loopTimeVar4980: Range<UInt64> = (((UInt64(UInt16(216)) & 127))..((UInt64(148) & 127)) : ((((-46) | 1))));
            var var5019: Float32 = Float32(25.0);
            if (func34(optionalParam35: Int8(var592), optionalParam37: UInt64(243),
                namedParam39: for (i in loopTimeVar4980 where var3641) {
                    ();
                    ()
                }, optionalParam40: 74.0 * var4989)) { // block id: 4991
                var519;
                59.0 < var4989
            }
            return false
        }

        let var5072: Array<Array<Bool>> = [[false], [true],
            [true, ((Option<Option<Interface10>>.None as Enum792) is (Interface11) -> Option<Rune>), true,
            ((Int16(60), r'W', Int16(126), [true, false, false, true, false, false, true, false, false, true], Int8(100),
            UInt16(239), (((Int8(-47) & 127))..=((Int8(-3) & 127)) : (((84 | 1))))) is (Range<Int64>) -> Array<Unit>),
            true, false, true,
            (((((UInt64(49) & 127))..=((UInt64(164) & 127)) : (((-80) | 1))) as Option<Unit>) is (Range<Int16>) -> Rune),
            ((((UInt32(181) & 127))..=((UInt32(125) & 127)) : ((8 | 1))) is Option<Option<Interface10>>), true],
            [false, false, (Option<Bool>.None is Interface11), (Option<Option<Rune>>.None is Option<Range<Int16>>),
            ((((Int8(72) & 127))..((Int8(27) & 127)) : (((72 | 1)))) is Array<Rune>), true, true,
            (UInt16(145) is (Int16, Rune, Int16, Array<Bool>, Int8, UInt16, Range<Int8>)),
            (Enum792.defaultValue is ((Class6) -> Unit, Range<UInt8>, Int16) -> Range<UInt16>), true],
            [false, false, false, true, true, false, false, false, true, false],
            [false, false, false, false, false, false, true, false, true, false],
            [(Option<Array<Bool>>.None is Option<Float64>), true, false, false,
            (((((Int8(109) & 127))..((Int8(-3) & 127)) : (((5 | 1)))), [false, true, false, true, true, false, false,
                false, true, false], (((UInt64(166) & 127))..=((UInt64(50) & 127)) : (((-105) | 1))), (UInt64(96), (((Int32(63) &
                    127))..((Int32(-113) & 127)) : ((102 | 1))), [true, true, true, true, true, true, true, true, true,
                    false], (((UInt16(252) & 127))..((UInt16(254) & 127)) : (((51 | 1))))), (), (-47), (), (((UInt64(88) &
                127))..((UInt64(57) & 127)) : ((((-53) | 1))))) is Option<Array<UInt16>>), false, true, (true),
            ([Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.Some(()), Option<Unit>.None,
            Option<Unit>.None, Option<Unit>.None, Option<Unit>.Some(()), Option<Unit>.None, Option<Unit>.None] is UInt64),
            (true)]];
        let var5195: Int8 = Int8(124);
        func func13(namedParam14!: Int64, optionalParam15!: Unit = (), namedParam17!: UInt64): Class6 { // block id: 18
            if (func21(namedParam22: (Option<Float64>.None ?? var2491))) { // block id: 5050
                (Option<(Range<Int32>, Range<UInt64>, Range<Int32>, Bool, Array<Bool>, Bool, Range<Int8>, Range<Int8>)>
                    .None ?? ((((Int32(17) & 127))..((Int32(27) & 127)) : (((-51) | 1))), (((UInt64(245) & 127))..((UInt64(3) &
                        127)) : (((116 | 1)))), (((Int32(100) & 127))..((Int32(105) & 127)) : (((-103) | 1))), var3212, [false,
                        true, true, true, false, false, false, false, true, true], var2703, (((Int8(22) & 127))..((Int8(82) &
                        127)) : (((-61) | 1))), (((Int8(46) & 127))..((Int8(6) & 127)) : ((61 | 1)))));
                match ((var5072, [UInt16(75), UInt16(252), UInt16(117), UInt16(214), UInt16(45), UInt16(250),
                        UInt16(104), UInt16(105), UInt16(127), UInt16(166)], (), var214)) {
                    case (caseVar5191, caseVar5192: UInt8, caseVar5193: Option<Unit>, _) => var592 /= ((caseVar5192) | 1)

                    case (caseVar5203, _, _: Array<Option<Unit>>, -1) => var1561

                    case (caseVar5203, _, _: Array<Option<Unit>>, 102) => var1561

                    case (caseVar5203, _, _: Array<Option<Unit>>, 106) => var1561

                    case (caseVar5212, caseVar5213, _, caseVar5216) =>
                        ();
                        ();
                        var2491 = var2491 + 1.0

                    case (caseVar5224: Option<Array<UInt16>>, caseVar5225: Option<Interface10>, _: (Unit, Int32), caseVar5226: Range<Int16>) => var4697 |= UInt16(96)

                    case _ =>
                        ();
                        var1781
                }
            };
            var var5244: Option<(UInt64, Range<Int32>, Array<Bool>, Range<UInt16>)> = Option<(UInt64, Range<Int32>, 
                    Array<Bool>, Range<UInt16>)>.None;
            let var5248: (UInt64, Range<Int32>, Array<Bool>, Range<UInt16>) = (UInt64(52), (((Int32(-91) & 127))..=((Int32(65) &
                    127)) : (((-117) | 1))), [false,
                    (((-91), ")8BVWt+4Y]", (((Int16(109) & 127))..((Int16(24) & 127)) : (((-18) | 1))), (((UInt32(96) &
                        127))..((UInt32(5) & 127)) : ((((-4) | 1)))), Option<Range<Int16>>.Some(
                        (((Int16(-76) & 127))..((Int16(-46) & 127)) : (((37 | 1))))), (((UInt16(229) & 127))..((UInt16(119) &
                        127)) : (((-6) | 1))), ()) is (Range<Int8>) -> (UInt8, Range<Int16>, Option<UInt8>, Range<UInt16>, 
                    Bool, Array<UInt16>, Range<Int64>)), true,
                    ((((((Int32(-49) & 127))..((Int32(-111) & 127)) : ((((-38) | 1)))), (((UInt64(13) & 127))..((UInt64(142) &
                            127)) : ((89 | 1))), (((Int32(-10) & 127))..=((Int32(103) & 127)) : ((60 | 1))), true, [true,
                            false, true, false, false, false, true, false, false, false], false, (((Int8(65) & 127))..=((Int8(53) &
                            127)) : ((((-105) | 1)))), (((Int8(107) & 127))..((Int8(117) & 127)) : ((((-56) | 1))))),
                    true, ((), Int32(10)), (((UInt8(253) & 127))..=((UInt8(10) & 127)) : (((79 | 1)))), [r'Z', r'q',
                        r'9', r'7', r'L', r'V', r'p', r'H', r'M', r'p'], Int16(106), [[true, false, true, false, false,
                        false, false, false, false, false], [true, false, true, false, true, true, true, true, true,
                        true], [true, false, false, false, false, false, false, false, true, false],
                        [true, true, true, false, true, false, false, false, false, true],
                        [true, false, false, true, false, false, false, true, true, false],
                        [false, false, false, false, false, true, true, false, false, false],
                        [false, true, false, true, false, false, true, true, true, true],
                        [true, false, true, true, false, true, false, true, true, true],
                        [false, false, true, false, true, false, true, false, true, false],
                        [false, false, false, true, false, true, false, false, false, false]], UInt16(74)) is (Float64) -> Option<Interface10>),
                    false, (UInt32(93) is Option<Array<Bool>>),
                    (Option<Bool>.None is Option<(Range<Int32>, Range<UInt64>, Range<Int32>, Bool, Array<Bool>, Bool, 
                    Range<Int8>, Range<Int8>)>), (Option<Float64>.Some((-104.0)) is (Interface11) -> Option<Rune>),
                    ((Enum792.defaultValue as Array<UInt16>) is Array<Option<Unit>>),
                    (Option<Array<UInt16>>.None is Option<Bool>)], (((UInt16(44) & 127))..((UInt16(27) & 127)) : ((73 | 1))));
            Class6(namedParam2530: (if (true) {
                var5244
            } else {
                var5244
            } ?? var5248), optionalParam2535: var2593)
        };

        let var5579: (Class6) -> Unit = func541;
        func13(namedParam14: (-111), optionalParam15: (), namedParam17: var4875).func5342(namedParam5343: Int8(125),
            namedParam5344: var5579, namedParam5347: func128, namedParam5353: func360)
        // CRC Check All Variables

        ()
    } catch (e: NoneValueException) {
        println("Exception: NoneValueException")
    }

    return 0;
}

extend Enum792 {}
