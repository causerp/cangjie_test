/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

// random seed:1655034109710

// All global variable need to be defined before use!
package test.e1

var var24: Bool = (UInt16(UInt8(UInt8(145))) is Float32)
var var73: UInt32 = UInt32(UInt16(9))
var var81: ?UInt32 = Option<UInt32>.None
var var100: UInt16 = UInt16(Int8(91))
var var129: Aggregate125<Int16> = Aggregate125<Int16>()
public var var221: Rune = r'U'
public var var442: (Range<UInt8>, Int32, Rune, Rune, Array<UInt16>, Float32, UInt32, Range<UInt32>, Float32) = (((UInt8(183) &
        127)..=(UInt8(16) & 127) : ((-111) | 1)), Int32(UInt16(115)), r'X', r'w', [UInt16(137), UInt16(239), UInt16(149),
        UInt16(34), UInt16(39), UInt16(240), UInt16(171), UInt16(64), UInt16(161), UInt16(69)], Float32(-22.0), UInt32(UInt8(3)),
    ((UInt32(UInt8(UInt8(52))) & 127)..=(UInt32(Int8(49)) & 127) : ((Int64(UInt32(249)) | 1))), Float32(Float32(Float32(-105.0))))
public var var510: Int16 = Int16(-90)
public let var516: Int64 = (-33)

public struct Aggregate125<T0> {
    public init() { // block id: 127

    }

    private let var188: Int64 = (-24);
    static var var194: (UInt32, UInt64, UInt16, (UInt64, Bool, UInt32, UInt8, Unit, Bool, UInt16, UInt8)) = (UInt32(31),
        UInt64(52), UInt16(156), (UInt64(183), true, UInt32(187), UInt8(88), (), true, UInt16(133), UInt8(15)));
    public static var var233: (Rune, Int64, String, Int32, UInt32, Int64, Rune) = (r'9', (-97), "[sJZEP_9A5", Int32(-111),
        UInt32(228), (-127), r'o');
    func func132<T0>(optionalParam133!: UInt8 = UInt8(26), namedParam135!: Float32, namedParam136!: Int32,
        optionalParam137!: Float32 = Float32(Float32(Float32(Float32(80.0))))): UInt32 { // block id: 142
        let var181: Unit = ();
        func func147<T0, T1>(): Bool { // block id: 148
            let var245: ?Unit = (Int32(Int8(94)) as Unit);
            let var252: (Int8, (Int32, Bool, (UInt64, Bool, UInt32, UInt8, Unit, Bool, UInt16, UInt8)), UInt16, Int64, 
                Float32, UInt32, UInt8) = (Int8(-21), (Int32(55), true, (UInt64(21), false, UInt32(UInt16(12)), UInt8(29),
                        (), (UInt32(95) is UInt64), UInt16(UInt16(251)), UInt8(59))), UInt16(Int16(UInt8(Int8(38)))), 97,
                Float32(-118.0), UInt32(232), UInt8(Int8(93)));
            if (match (Int16(optionalParam133)) {
                case _: UInt8 => Int32(78) > namedParam136

                case -116 | 8 => var24

                case _ => var24
            }) { // block id: 166
                UInt8(133) % ((UInt8(209)) | 1);
                (Int32(-6), true, (UInt64(115), true, UInt32(227), optionalParam133, var181, true, var100, UInt8(50)))[2];
                var188
            } else if (var194[0] < (UInt32(73) / ((UInt32(116)) | 1))) { // block id: 212
                (r't', (-51), ###"~[+ct-\\eKO"###, namedParam136, UInt32(185), (-44), var221);
                (Option<Unit>.Some(()) ?? ());
                var233[1]
            } else { // block id: 243
                var245;
                var252[3]
            };
            var var296: (Range<UInt64>, Range<Int32>, Range<Int8>, Bool, Array<Array<UInt8>>) = (((UInt64(104) & 127)..=(UInt64(21) &
                    127) : (12 | 1)), ((Int32(-105) & 127)..(Int32(-114) & 127) : (31 | 1)), ((Int8(-18) & 127)..=(Int8(UInt8(21)) &
                    127) : ((55 | 1))), ((Int8(Int8(22)), (Int32(-26), true, (UInt64(166), false, UInt32(15), UInt8(135),
                            (), false, UInt16(83), UInt8(215))), UInt16(39), Int64(Int8(53)), Float32(Float32(97.0)),
                    UInt32(241), UInt8(UInt8(74))) is (UInt64, Bool, UInt32, UInt8, Unit, Bool, UInt16, UInt8)), [[UInt8(UInt8(72)),
                    UInt8(UInt8(109)), UInt8(83), UInt8(Int8(-9)), UInt8(Int8(-97)), UInt8(237), UInt8(UInt8(95)),
                    UInt8(Int8(-74)), UInt8(Int8(-49)), UInt8(189)],
                    [UInt8(104), UInt8(Int8(88)), UInt8(183), UInt8(UInt8(157)), UInt8(145), UInt8(92),
                    UInt8(UInt8(105)), UInt8(129), UInt8(Int8(12)), UInt8(52)],
                    [UInt8(198), UInt8(UInt8(162)), UInt8(127), UInt8(7), UInt8(164), UInt8(71), UInt8(UInt8(175)),
                    UInt8(26), UInt8(UInt8(221)), UInt8(UInt8(31))],
                    [UInt8(193), UInt8(61), UInt8(246), UInt8(216), UInt8(136), UInt8(135), UInt8(159), UInt8(153),
                    UInt8(188), UInt8(213)],
                    [UInt8(UInt8(226)), UInt8(4), UInt8(UInt8(49)), UInt8(UInt8(191)), UInt8(Int8(31)), UInt8(153),
                    UInt8(148), UInt8(227), UInt8(UInt8(240)), UInt8(34)],
                    [UInt8(16), UInt8(15), UInt8(186), UInt8(100), UInt8(250), UInt8(152), UInt8(226), UInt8(159),
                    UInt8(75), UInt8(254)],
                    [UInt8(45), UInt8(UInt8(16)), UInt8(158), UInt8(8), UInt8(50), UInt8(UInt8(197)), UInt8(Int8(-92)),
                    UInt8(73), UInt8(UInt8(47)), UInt8(Int8(41))],
                    [UInt8(95), UInt8(33), UInt8(168), UInt8(8), UInt8(29), UInt8(98), UInt8(248), UInt8(205),
                    UInt8(162), UInt8(245)],
                    [UInt8(Int8(89)), UInt8(UInt8(248)), UInt8(UInt8(146)), UInt8(Int8(9)), UInt8(248), UInt8(116),
                    UInt8(UInt8(242)), UInt8(UInt8(213)), UInt8(Int8(16)), UInt8(UInt8(221))],
                    [UInt8(206), UInt8(250), UInt8(214), UInt8(191), UInt8(113), UInt8(244), UInt8(23), UInt8(65),
                    UInt8(216), UInt8(234)]]);
            var296[4][6][6];
            var442[4][6] <= ((UInt16(222) << ((var100) & 7)) >> ((match {
                case true =>
                    [UInt16(90), UInt16(172), UInt16(132), UInt16(183), UInt16(55), UInt16(4), var100, UInt16(214),
                        UInt16(196), UInt16(166)];
                    UInt16(204)
                case _ =>
                    var252;
                    var100 | var100
            }) & 7))
        };

        if (func147<Option<Unit>, Int64>()) { // block id: 490
            var var493: Int64 = Int64(UInt64(Int8(UInt8(197))));
            var493 &= (-82)
            (r'8', (-70), "&o ^vew.v4", Int32(-117), var73, var493, r'R')
        } else { // block id: 507
            var510 >>= ((var510) & 7)
            var var519: String = "oB(.In1Cjc";
            (var221, var516, var519, Int32(-76), UInt32(59), var516, r'r')
        }[4]
    }
}

public func func8<T0>(param9: Rune): UInt32 { // block id: 10
    let var31: Unit = ();
    var loopTimeVar36: Int64 = 0;
    do {
        loopTimeVar36++;
    } while ((try { // block id: 13
        let var15: Unit = ();
        var15;
        var var19: Bool = false;
        var19 || false
    } catch (_) { // block id: 22
        var24
    } finally { // block id: 29
        var31;
        false
    }) && loopTimeVar36 < 100);
    let var46: (UInt64, Bool, UInt32, UInt8, Unit, Bool, UInt16, UInt8) = (UInt64(UInt64(UInt32(211))), true, UInt32(63),
        UInt8(Int8(50)), (), (Option<UInt32>.None is String), UInt16(226), UInt8(12));
    let var88: UInt64 = UInt64(83);
    let var96: Bool = (Option<UInt32>.None is Rune);
    let var104: UInt8 = UInt8(UInt8(Int8(UInt8(UInt8(133)))));
    let var528: Int32 = Int32(-27);
    (match (var46[3]) {
        case _: Int16 =>
            let var65: ?UInt32 = Option<UInt32>.None;
            var65

        case caseVar69: Int8 => Option<UInt32>.Some(var73)

        case 68 | 70 | 166 =>
            ();
            var81

        case 32 | 191 | 127 | 242 =>
            (var88, var24, var73, UInt8(4), (), var96, var100, var104);
            UInt64(56);
            if (true) {
                var81
            } else {
                Option<UInt32>.Some(UInt32(156))
            }

        case _ =>
            ();
            false;
            if (false) {
                var81
            } else {
                var81
            }
    } ?? var129.func132<Array<Array<UInt8>>>(namedParam135: Float32(-114.0), namedParam136: var528,
        optionalParam137: Float32(-59.0)))
}

extend Aggregate125<Int16> {}
