/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

package test

// random seed:1654014362902

// All global variable need to be defined before use!
internal import test.d1.d2.d3.*

public var var257: Range<UInt8> = ((UInt8(110) & 127)..=(UInt8(175) & 127) : (99 | 1))
public let var268: Float32 = Float32(-40.0)
public let var272: Int8 = Int8(-95)
public var var279: Range<UInt16> = ((UInt16(210) & 127)..(UInt16(UInt8(UInt8(Int8(-58)))) & 127) : (((-26) | 1)))
public var var378: UInt32 = UInt32(UInt16(Int8(57)))
public let var389: Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
public var var394: Int8 = Int8(UInt8(UInt8(140)))
var var462: Rune = 'A'
public var var497: UInt8 = UInt8(86)
public var var526: UInt64 = UInt64(215)
public var var536: Int16 = Int16(122)
public var var570: Option<Int16> = Option<Int16>.None
public let var581: Array<UInt16> = [UInt16(146), UInt16(170), UInt16(109), UInt16(8), UInt16(99), UInt16(218),
    UInt16(253), UInt16(110), UInt16(205), UInt16(155)]
public let var594: (String, Bool, (UInt8, UInt32), Range<Int64>, Array<Unit>) = ("c.4kHf18[p", (Int64(UInt64(UInt8(113))) is Interface93),
    (UInt8(203), UInt32(UInt8(UInt8(84)))), (((-68) & 127)..(30 & 127) : (((-24) | 1))), [(), (), (), (), (), (), (), (),
        (), ()])
public let var825: UInt64 = UInt64(Int16(-60))
var var887: UInt64 = UInt64(245)
var var899: Option<UInt16> = Option<UInt16>.None
public let var976: Bool = true
public var var1000: UInt32 = UInt32(Int32(Int32(-8)))

public interface Interface93 {}

public func func16(param17: UInt64): Int16 { // block id: 18
    Aggregate20.var25;
    var var206: Int32 = Int32(-90);
    var206 |> ({
        lambdaParameter165: Int32 =>
            var var173: Int8 = Int8(Int8(UInt8(83)));
            if (Int8(-119) != var173) { // block id: 177
                (var75, var181, var75, "JgeLB?]3-M", var173, UInt64(132), Int8(40))
            } else { // block id: 188
                var var192: (Float32, String, Float32, String, Int8, UInt64, Int8) = (Float32(11.0), "&$=b$)u9T5",
                    Float32(-6.0), """
A\"0ZS
IKII$
""", Int8(11), UInt64(109), Int8(Int8(UInt8(177))));
                if (true) {
                    var192
                } else {
                    var192
                }
            }[2]
    } ~> func83)
}

public func func635(param636: Range<UInt8>): (Range<UInt8>, Bool, UInt16, (Float32, String, Float32, String, Int8, 
    UInt64, Int8), Range<UInt16>, UInt64) { // block id: 637
    let var709: Int64 = 19;
    var var726: (Float32, String, Float32, String, Int8, UInt64, Int8) = (Float32(Float32(26.0)), "Px%@mn]Pa{R", Float32(-25.0),
        "k-T9Y+O~9W", Int8(-108), UInt64(194), Int8(UInt8(123)));
    if (try { // block id: 640
        ();
        var522;
        true
    } finally { // block id: 644
        var356;
        ();
        var404
    }) { // block id: 648
        try { // block id: 650
            var652;
            var655
        } catch (e: Exception) { // block id: 683
            let var705: UInt16 = UInt16(UInt16(143));
            if (false) {
                var655
            } else {
                (((var497 & 127)..(UInt8(31) & 127) : ((var106 | 1))), var404, UInt16(193), (Float32(-114.0),
                        "z;ePeRC^(!", Float32(124.0), "834K! ktA?", var272, UInt64(218), Int8(8)), ((UInt16(163) & 127)..=(var705 &
                        127) : ((var709 | 1))), var526)
            }
        } finally { // block id: 712
            var522;
            if (var404) {
                var655
            } else {
                var655
            }
        }
    } else if ((var563 is ((Int32) -> Int16) -> Int16)) { // block id: 720
        (var257, true, UInt16(182), var726, var279, UInt64(60))
    } else { // block id: 739
        (Option<Unit>.Some(()) ?? ());
        let var746: Class88 = Class88();
        var746.var749
    }
}

public func func926(optionalParam927!: Option<Unit> = (() as Unit)): Option<(Range<UInt8>, Bool, UInt16, (Float32, 
    String, Float32, String, Int8, UInt64, Int8), Range<UInt16>, UInt64)> { // block id: 930
    var var990: Array<Bool> = [false, false, false, true, true, true, true, true, true, true];
    if ([[false, true, false, true, false, true, true, false, false, false],
        [false, true, false, true, false, true, true, false, true, true],
        [var404, var404, var404, var944, var944, true, true, var944, false, var944],
        [true, false, false, true, true, true, true, true, false, true],
        [var404, true, false, false, true, false, false, var404, true, var976],
        [true, false, true, false, var976, var976, var944, var404, var976, true], var990, var990,
        [false, false, true, false, true, false, true, false, true, false],
        [true, true, false, true, false, false, false, false, true, false]][2][3]) { // block id: 997
        var1000 >>= ((UInt32(91)) & 7)
        let var1008: Unit = ();
        (Option<Unit>.None ?? var1008)
    };
    Option<(Range<UInt8>, Bool, UInt16, (Float32, String, Float32, String, Int8, UInt64, Int8), Range<UInt16>, UInt64)>
        .Some(if (if (false) { // block id: 1014
            var394 != var394
        } else if (var944) { // block id: 1019
            var497 -= UInt8(232)
            var536 += var536
            !false
        } else { // block id: 1028
            ();
            Class88();
            var404
        }) { // block id: 1032
            var var1034: Unit = ();
            var1034;
            (((UInt8(34) & 127)..=(UInt8(235) & 127) : ((-127) | 1)), false, UInt16(39), var858, ((UInt16(77) & 127)..=(UInt16(4) &
                    127) : (5 | 1)), UInt64(15))
        } else if (var1046[2]) { // block id: 1071
            if (true) {
                var279
            } else {
                var279
            };
            var655
        } else { // block id: 1077
            var655
        })
}

func func635(param466: Interface93): Int64 { // block id: 467
    let var628: ((Range<UInt8>, Bool, UInt16, (Float32, String, Float32, String, Int8, UInt64, Int8), Range<UInt16>, 
            UInt64)) -> Unit = {
        lambdaParameter631: (Range<UInt8>, Bool, UInt16, (Float32, String, Float32, String, Int8, UInt64, Int8), Range<UInt16>, 
            UInt64) => ()
    };
    let var776: Enum773 = Enum773.defaultValue;
    let var791: Float64 = (-109.0);
    ((((var356 & 127)..=(Int32(-15) & 127) : (((-12) | 1))), (((-6) & 127)..((-32) & 127) : ((-122) | 1)), var257, ((var536 &
            127)..=(var536 & 127) : ((var106 | 1))), var655, """
F1B?9
>;nZ_
""")[2] |> {
        lambdaParameter769: Range<UInt8> =>
            let var840: (Float32, String, Float32, String, Int8, UInt64, Int8) = (Float32(Float32(-66.0)),
                """
[k?eP
KJr^0
""", Float32(-65.0), "b80c~pmh <", Int8(Int8(Int8(UInt8(2)))), UInt64(UInt8(UInt8(UInt8(184)))),
                Int8(UInt8(163)));
            let var891: UInt16 = UInt16(88);
            (match (var776) {
                    case _ =>
                        ((Int8(38) & 127)..(Int8(-54) & 127) : (50 | 1));
                        var522;
                        ((UInt8(152) & 127)..(var497 & 127) : ((var106 | 1)))
                }, try { // block id: 787
                    ();
                    var791 > 126.0
                } finally { // block id: 794
                    var655;
                    false
                }, UInt16(148), match (func800(var181)) {
                    case _ =>
                        var835;
                        if (var404) {
                            var840
                        } else {
                            var858
                        }

                    case _ =>
                        if (var404) {
                            var840
                        } else {
                            var840
                        }
                }, (try { // block id: 876
                    ();
                    UInt16(5)
                } catch (e: Exception) { // block id: 879
                    (Float32(44.0), var181, Float32(46.0), var181, Int8(-91), var887, Int8(121));
                    var891
                } & 127)..=((var899 ?? var891) & 127) : ((var106 | 1)), var373)
    }) |> var628;
    var var1122: (Int64) -> Int64 = func921;
    [var106, var106, (-54), 57, (-74), (-78), var106, var106, (-99), var106][9] |> var1122
}

main(): Int64 {
    try {
        let var430: (Float64) -> Int16 = {lambdaParameter433: Float64 => Int16(UInt8(UInt8(251)))};
        var var444: Aggregate20 = Aggregate20();
        var var454: Unit = ();
        if (true) { // block id: 440
            if (var404) {
                var444
            } else {
                Aggregate20()
            };
            ();
            48.0 - 105.0
        } else { // block id: 451
            ();
            var454;
            let var457: Float64 = Float64(Float64(Float32(-85.0)));
            var457
        } |> var430;
        var462;
        let var1141: Interface93 = Class88();
        func635(if (false) {
            var1141
        } else {
            Class88()
        })
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var272 * var272), 64)
        crccheck.updateBuffer(UInt64(var378 * var378), 64)
        crccheck.updateBuffer(UInt64(var394 * var394), 64)
        crccheck.updateBuffer(UInt64(var497 * var497), 64)
        crccheck.updateBuffer(UInt64(var526 * var526), 64)
        crccheck.updateBuffer(UInt64(var536 * var536), 64)
        crccheck.updateBuffer(UInt64(var825 * var825), 64)
        crccheck.updateBuffer(UInt64(var887 * var887), 64)
        crccheck.updateBuffer(UInt64(var1000 * var1000), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) {
        println("Exception: NoneValueException")
    }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        buffer = Array<Int64>(buffer_n, {i => 0})
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, {i => 0})
        var byte_c = 1
        var byte_index = 0
        while (value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, {i => 0})
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2 ** 2 * crc_output[i] + 2 ** 1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
