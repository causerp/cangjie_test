/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

package test

// random seed:1706018465908
// All global variable need to be defined before use!
internal import test.a1.a2.a3.*
internal import test.d1.d2.d3.d4.d5.*

public const var_1706018465908_27: Unit = ()
public let var_1706018465908_76: Float32 = Float32(-37.0)
var var_1706018465908_82: Float32 = Float32(33.0)
public let var_1706018465908_397: String = """
qA>7r
n Aa{F
"""
public var var_1706018465908_410: Int16 = Int16(Int8(Int8(1)))
public var var_1706018465908_553: Range<Int8> = ((Int8(Int8(-118)) & 127)..(Int8(Int8(-107)) & 127) : (Int64(-97) | 1))

public const func func_1706018465908_122(optionalParam_1706018465908_123!: String = "](~7i@*gA,",
    optionalParam_1706018465908_125!: Rune = r'3', optionalParam_1706018465908_127!: Int8 = -100,
    namedParam_1706018465908_129!: UInt16): Unit { // block id: 130
    func_1706018465908_132<UInt64, UInt16, Rune>(namedParam_1706018465908_135: 129, namedParam_1706018465908_136: -4);
    ();
    var_1706018465908_27
}

public struct Struct_1706018465908_369<T0, T1, T2> {
    public init() { // block id: 371

    }

    private static prop var_1706018465908_470: Bool { // block id: 471
        get() { // block id: 473
            ([Float32(-52.0), Float32(74.0), Float32(3.0), Float32(65.0), Float32(109.0), Float32(91.0), Float32(-95.0),
                Float32(66.0), Float32(106.0), Float32(-38.0)] is (Unit) -> Int64)
        }
    }
    public var var_1706018465908_480: Class_1706018465908_108 = Class_1706018465908_108();
    func func_1706018465908_376(namedParam_1706018465908_377!: (Int32, UInt16, Int16, Int8) -> Unit,
        optionalParam_1706018465908_383!: (Int32, UInt16, Int16, Int8) -> Unit = func_1706018465908_132<UInt64, UInt16, Rune>,
        namedParam_1706018465908_390!: Array<UInt32>): String { // block id: 391
        let var_1706018465908_425: Enum_1706018465908_422 = Enum_1706018465908_422.enumValue_1706018465908_427;
        let var_1706018465908_443: UInt16 = UInt16(Int16(64));
        var var_1706018465908_450: Int8 = Int8(Int8(-48));
        const var_1706018465908_509: Int32 = 40;
        try { // block id: 393
            let var_1706018465908_402: Bool = (UInt16(162) is (String, Rune, Int8, UInt16) -> Unit);
            try { // block id: 395
                var_1706018465908_397
            } catch (_) { // block id: 399
                if (var_1706018465908_402) {
                    ###"\"!@rfC6p3A"###
                } else {
                    "/X9q$g,v+r"
                }
            } finally { // block id: 407
                var_1706018465908_410 <<= ((Int16(31)) & 7)
                if (var_1706018465908_402) {
                    var_1706018465908_397
                } else {
                    "RoFW?i 0R3"
                }
            }
        } catch (e: Exception) { // block id: 419
            ((Int16(Int16(21)) & 127)..(Int16(Int16(15)) & 127) : (Int64(95) | 1));
            match (var_1706018465908_425) {
                case _ =>
                    if (false) {
                        ((Int16(Int16(37)) & 127)..=(Int16(Int16(-19)) & 127) : (Int64(65) | 1))
                    } else {
                        ((Int16(Int16(-68)) & 127)..=(Int16(Int16(85)) & 127) : (Int64(61) | 1))
                    };
                    ((UInt16(var_1706018465908_443) & 127)..(UInt16(var_1706018465908_443) & 127) : (Int64(36) | 1));
                    var_1706018465908_450 ^= var_1706018465908_450

                case defaultValue => ()

                case _: Class_1706018465908_108 => ()

                case _ => var_1706018465908_27
            };
            var_1706018465908_397
        } finally { // block id: 467
            if (var_1706018465908_470) { // block id: 476
                if (false) {
                    var_1706018465908_480
                } else {
                    var_1706018465908_480
                }
            } else { // block id: 483
                var_1706018465908_480
            };
            if (var_1706018465908_470) { // block id: 487
                if (var_1706018465908_470) {
                    ((Int8(var_1706018465908_450) & 127)..(Int8(var_1706018465908_450) & 127) : (var_1706018465908_101 |
                        1))
                } else {
                    ((Int8(Int8(-88)) & 127)..(Int8(Int8(66)) & 127) : (Int64(-87) | 1))
                };
                var_1706018465908_497 = Float64(-116.0)
            } else if (var_1706018465908_470) { // block id: 505
                var_1706018465908_27;
                ((Int32(var_1706018465908_509) & 127)..(Int32(var_1706018465908_509) & 127) : (var_1706018465908_101 | 1));
                var_1706018465908_27
            };
            if (true) {
                """
s~lmR
2AXwf
"""
            } else {
                var_1706018465908_397
            }
        }
    }
}

main(): Int64 {
    try {
        if (UInt32(Int8(-108)) > [UInt32(90), UInt32(125), UInt32(12), UInt32(196), UInt32(241), UInt32(156),
            UInt32(118), UInt32(34), UInt32(16), UInt32(17)][7]) { // block id: 23
            try (resource = Class_1706018465908_108()) { // block id: 25
                var_1706018465908_27;
                ()
            } finally { // block id: 30
                var_1706018465908_27
            }
        };
        var var_1706018465908_45: Int8 = Int8(Int8(Int8(UInt8(Int8(86)))));
        var var_1706018465908_53: Bool = (UInt64(101) is Bool);
        var var_1706018465908_59: UInt32 = UInt32(Int32(UInt32(122)));
        try (resource = Class_1706018465908_691()) { // block id: 33
            ();
            const func func_1706018465908_36(namedParam_1706018465908_37!: Int8,
                optionalParam_1706018465908_38!: UInt64 = 183): Float32 { // block id: 40
                r'q';
                true;
                12.0
            };

            func_1706018465908_36(namedParam_1706018465908_37: var_1706018465908_45);
            var loopTimeVar_1706018465908_66: Int64 = 0;
            do {
                loopTimeVar_1706018465908_66++;
                var_1706018465908_59 %= ((var_1706018465908_59) | 1)
                ()
            } while ((var_1706018465908_53) && loopTimeVar_1706018465908_66 < 100)
        } catch (e: Exception) { // block id: 67
            var_1706018465908_70--;
            var var_1706018465908_88: Float32 = Float32(43.0);
            [var_1706018465908_76, Float32(81.0), Float32(36.0), Float32(-97.0), var_1706018465908_82, Float32(-106.0),
                var_1706018465908_76, var_1706018465908_82, var_1706018465908_88, var_1706018465908_76][6];
            var_1706018465908_53 &&= var_1706018465908_53
        };
        let var_1706018465908_373: Struct_1706018465908_369<Array<UInt32>, Int16, String> = Struct_1706018465908_369<Array<UInt32>, Int16, String>();
        let var_1706018465908_519: (Int32, UInt16, Int16, Int8) -> Unit = func_1706018465908_132<UInt64, UInt16, Rune>;
        const var_1706018465908_531: UInt32 = 150;
        let var_1706018465908_561: Array<UInt64> = [UInt64(116), UInt64(204), UInt64(44), UInt64(207), UInt64(116),
            UInt64(179), UInt64(240), UInt64(23), UInt64(229), UInt64(25)];
        func func_1706018465908_112<T0, T1>(param_1706018465908_113: String,
            optionalParam_1706018465908_114!: UInt32 = UInt32(Int16(82)),
            optionalParam_1706018465908_117!: Array<Float32> = [Float32(-90.0), Float32(30.0), Float32(-82.0),
                Float32(-124.0), Float32(-77.0), Float32(-18.0), Float32(-95.0), Float32(68.0), Float32(-59.0),
                Float32(53.0)], namedParam_1706018465908_119!: UInt16): Class_1706018465908_108 where T0 <: Class_1706018465908_108 { // block id: 120
            var var_1706018465908_539: Bool = ("a{C^Lbwna{=-" is Float64);
            func_1706018465908_122(
                optionalParam_1706018465908_123: var_1706018465908_373.func_1706018465908_376(
                    namedParam_1706018465908_377: var_1706018465908_519,
                    optionalParam_1706018465908_383: func_1706018465908_132<UInt64, UInt16, Rune>,
                    namedParam_1706018465908_390: [var_1706018465908_153, UInt32(44), var_1706018465908_153, UInt32(106),
                        var_1706018465908_351, UInt32(68), var_1706018465908_351, var_1706018465908_531, UInt32(183),
                        UInt32(194)]), optionalParam_1706018465908_125: r'g',
                namedParam_1706018465908_129: UInt16(if (var_1706018465908_539) { // block id: 542
                    UInt8(100)
                } else if (true) { // block id: 545
                    Enum_1706018465908_422.enumValue_1706018465908_547;
                    UInt8(23)
                } else { // block id: 549
                    if (var_1706018465908_539) {
                        var_1706018465908_553
                    } else {
                        ((Int8(Int8(-98)) & 127)..(Int8(Int8(-50)) & 127) : (Int64(-8) | 1))
                    };
                    r't';
                    UInt8(19) * UInt8(166)
                }));
            var_1706018465908_561;
            var_1706018465908_566[2]
        };

        let var_1706018465908_722: (String, Rune, Int8, UInt16) -> Unit = func_1706018465908_122;
        func_1706018465908_112<Class_1706018465908_108, Enum_1706018465908_422>(var_1706018465908_397,
            optionalParam_1706018465908_114: UInt32(227), namedParam_1706018465908_119: UInt16(62))
            .func_1706018465908_616(var_1706018465908_722) |> func_1706018465908_96
        // CRC Check All Variables
        var crcCheck = CrcCheck(5000, 32)
        crcCheck.updateBuffer(UInt64(var_1706018465908_45 * var_1706018465908_45), 64)
        crcCheck.updateBuffer(UInt64(var_1706018465908_59 * var_1706018465908_59), 64)
        crcCheck.updateBuffer(UInt64(var_1706018465908_410 * var_1706018465908_410), 64)
        crcCheck.updateBuffer(UInt64(var_1706018465908_531 * var_1706018465908_531), 64)
        crcCheck.crcCheck()
        crcCheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) {
        println("Exception: NoneValueException")
    }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        buffer = Array<Int64>(buffer_n, {i => 0})
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, {i => 0})
        var byte_c = 1
        var byte_index = 0
        while (value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[(i + buffer_index) % buffer.size] = byteArray[i + byte_index]
            i++
        }
        buffer_index = (buffer_index + i) % buffer.size
    }

    func updateBuffer(input: Bool, byte_n: Int64): Unit {
        if (input == true) {
            updateBuffer(1, byte_n)
        } else {
            updateBuffer(0, byte_n)
        }
    }

    func updateBuffer(input: Rune, byte_n: Int64): Unit {
        updateBuffer(UInt64(UInt32(input)), byte_n)
    }

    func updateBuffer(input: String, byte_n: Int64): Unit {
        for (c in input) {
            updateBuffer(c, byte_n)
        }
    }

    func updateBuffer(input: Unit, byte_n: Int64): Unit {
        updateBuffer(input.toString(), byte_n)
    }

    func updateBuffer(input: Any, byte_n: Int64): Unit {
        if (input is Hashable) {
            match (input as Hashable) {
                case Some(v) => updateBuffer(UInt64(v.hashCode()), byte_n)
                case _ => updateBuffer(1, byte_n)
            }
        } else if (input is ToString) {
            match (input as ToString) {
                case Some(v) => updateBuffer(v.toString(), byte_n)
                case _ => updateBuffer(1, byte_n)
            }
        } else {
            updateBuffer(1, byte_n)
        }
    }
    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, {i => 0})
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2 ** 2 * crc_output[i] + 2 ** 1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
