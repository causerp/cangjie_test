/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

package test

// random seed:1698864440757

// All global variable need to be defined before use!
internal import test.a1.a2.a3.a4.*

public var var_1698864440757_40: ?Range<Int64> = Option<Range<Int64>>.None
let var_1698864440757_83: (String, Range<Int8>, Float32, Range<UInt16>, Float64) = ("<_WisO|}Et", ((Int8(Int8(Int8(UInt8(207)))) &
        127)..(Int8(Int8(-97)) & 127) : (Int64(2) | 1)), Float32(87.0), ((UInt16(UInt16(51)) & 127)..(UInt16(UInt16(66)) &
        127) : (Int64(20) | 1)), Float64(Float64(62.0)))
const var_1698864440757_5139: Int64 = 97
var var_1698864440757_5268: UInt16 = UInt16(Int16(Int8(-6)))
public const var_1698864440757_5292: UInt32 = 234
var var_1698864440757_5396: Unit = ()
public var var_1698864440757_5440: Option<Bool> = ([((((Int16(Int16(-45)) & 127)..(Int16(Int16(16)) & 127) : (Int64(92) |
    1)) as UInt32) is Option<UInt32>),
    ((VArray<Unit, $1>({i => ()}) as Unit) is (Rune, (Range<UInt16>) -> Option<(Float64, UInt16, Rune, Array<UInt64>, 
        Option<(Range<Int64>, (String, Range<Int8>, Float32, Range<UInt16>, Float64), UInt32, Range<UInt16>)>)>, Rune, (Float64, 
        UInt16, Rune, Array<UInt64>, Option<(Range<Int64>, (String, Range<Int8>, Float32, Range<UInt16>, Float64), 
        UInt32, Range<UInt16>)>)) -> Bool), ((VArray<Float32, $2>({i => Float32(120.0)}) as Int32) is Array<Bool>),
    (Option<UInt32>.None is Int8),
    (VArray<Unit, $1>({i => ()}) is Option<((Option<Unit>, Bool, Option<Unit>, String, Option<Bool>), UInt16, Rune, 
    Option<Bool>, (String, Range<Int8>, Float32, Range<UInt16>, Float64))>), true,
    (Option<VArray<Unit, $1>>.None is Option<((Range<Int64>, (String, Range<Int8>, Float32, Range<UInt16>, Float64), 
    UInt32, Range<UInt16>), (Option<Unit>, Bool, Option<Unit>, String, Option<Bool>), Rune, ((Option<Unit>, Bool, Option<Unit>, 
    String, Option<Bool>), UInt16, Rune, Option<Bool>, (String, Range<Int8>, Float32, Range<UInt16>, Float64)), Option<(Range<Int64>, 
    (String, Range<Int8>, Float32, Range<UInt16>, Float64), UInt32, Range<UInt16>)>, Range<UInt32>)>),
    (((((Int64(Int64(-20)) & 127)..=(Int64(Int64(31)) & 127) : (Int64(-95) | 1)), ("AQ<94>Ec^-", ((Int8(Int8(-27)) & 127)..=(Int8(Int8(112)) &
                127) : (Int64(-91) | 1)), Float32(-37.0), ((UInt16(UInt16(45)) & 127)..(UInt16(UInt16(124)) & 127) : (Int64(-61) |
                1)), Float64(-38.0)), UInt32(UInt8(190)), ((UInt16(UInt16(8)) & 127)..(UInt16(UInt16(228)) & 127) : (Int64(12) |
            1))), ((Option<((Range<Int64>, (String, Range<Int8>, Float32, Range<UInt16>, Float64), UInt32, Range<UInt16>), 
                (Option<Unit>, Bool, Option<Unit>, String, Option<Bool>), Rune, ((Option<Unit>, Bool, Option<Unit>, 
                String, Option<Bool>), UInt16, Rune, Option<Bool>, (String, Range<Int8>, Float32, Range<UInt16>, Float64)), 
                Option<(Range<Int64>, (String, Range<Int8>, Float32, Range<UInt16>, Float64), UInt32, Range<UInt16>)>, 
                Range<UInt32>)>.None as Unit), false, (Option<Range<Int64>>.None as Unit), "}@R'a{:8IHp", (Option<UInt8>
            .None as Bool)), r'C', ((Option<Unit>.None, false, Option<Unit>.None, "5e P=g#PAi", Option<Bool>.None),
        UInt16(135), r'B', (Struct_1698864440757_633() as Bool), (###"= \\+\\_Pujv"###, ((Int8(Int8(-120)) & 127)..(Int8(Int8(0)) &
                127) : (Int64(-54) | 1)), Float32(-13.0), ((UInt16(UInt16(171)) & 127)..=(UInt16(UInt16(179)) & 127) : (Int64(-24) |
                1)), Float64(-103.0))), Option<(Range<Int64>, (String, Range<Int8>, Float32, Range<UInt16>, Float64), 
            UInt32, Range<UInt16>)>.None, ((UInt32(UInt32(UInt32(76))) & 127)..(UInt32(UInt32(Int16(-48))) & 127) : (Int64(-15) |
        1))) is Option<((Range<Int64>, (String, Range<Int8>, Float32, Range<UInt16>, Float64), UInt32, Range<UInt16>), (Option<Unit>, 
    Bool, Option<Unit>, String, Option<Bool>), Rune, ((Option<Unit>, Bool, Option<Unit>, String, Option<Bool>), UInt16, 
    Rune, Option<Bool>, (String, Range<Int8>, Float32, Range<UInt16>, Float64)), Option<(Range<Int64>, (String, Range<Int8>, 
    Float32, Range<UInt16>, Float64), UInt32, Range<UInt16>)>, Range<UInt32>)>), true, false] as Bool)
let var_1698864440757_5662: VArray<Unit, $1> = [()]

public func func_1698864440757_6(param_1698864440757_7: Int8): Unit { // block id: 8
    let var_1698864440757_80: Range<Int64> = ((Int64(Int64(94)) & 127)..=(Int64(Int64(-6)) & 127) : (Int64(-14) | 1));
    let var_1698864440757_5057: ?((Range<Int64>, (String, Range<Int8>, Float32, Range<UInt16>, Float64), UInt32, Range<UInt16>), 
        (Option<Unit>, Bool, Option<Unit>, String, Option<Bool>), Rune, ((Option<Unit>, Bool, Option<Unit>, String, 
        Option<Bool>), UInt16, Rune, Option<Bool>, (String, Range<Int8>, Float32, Range<UInt16>, Float64)), Option<(Range<Int64>, 
        (String, Range<Int8>, Float32, Range<UInt16>, Float64), UInt32, Range<UInt16>)>, Range<UInt32>) = (((((Int64(Int64(85)) &
        127)..=(Int64(Int64(-41)) & 127) : (Int64(90) | 1)) as ((Option<Unit>, Bool, Option<Unit>, String, Option<Bool>), 
        UInt16, Rune, Option<Bool>, (String, Range<Int8>, Float32, Range<UInt16>, Float64))) as ((Range<Int64>, (String, 
        Range<Int8>, Float32, Range<UInt16>, Float64), UInt32, Range<UInt16>), (Option<Unit>, Bool, Option<Unit>, String, 
        Option<Bool>), Rune, ((Option<Unit>, Bool, Option<Unit>, String, Option<Bool>), UInt16, Rune, Option<Bool>, (String, 
        Range<Int8>, Float32, Range<UInt16>, Float64)), Option<(Range<Int64>, (String, Range<Int8>, Float32, Range<UInt16>, 
        Float64), UInt32, Range<UInt16>)>, Range<UInt32>)) as ((Range<Int64>, (String, Range<Int8>, Float32, Range<UInt16>, 
        Float64), UInt32, Range<UInt16>), (Option<Unit>, Bool, Option<Unit>, String, Option<Bool>), Rune, ((Option<Unit>, 
        Bool, Option<Unit>, String, Option<Bool>), UInt16, Rune, Option<Bool>, (String, Range<Int8>, Float32, Range<UInt16>, 
        Float64)), Option<(Range<Int64>, (String, Range<Int8>, Float32, Range<UInt16>, Float64), UInt32, Range<UInt16>)>, 
        Range<UInt32>));
    let var_1698864440757_5067: Option<Bool> = Option<Bool>.None;
    func func_1698864440757_22(param_1698864440757_23: UInt64, optionalParam_1698864440757_24!: Float64 = Float64(33.0),
        namedParam_1698864440757_26!: Int16): Unit { // block id: 27
        var var_1698864440757_54: Option<(Range<Int64>, (String, Range<Int8>, Float32, Range<UInt16>, Float64), UInt32, 
            Range<UInt16>)> = ((((Int64(Int64(-88)) & 127)..(Int64(Int64(-25)) & 127) : (Int64(79) | 1)), ("""
@3=/~
K]VVa
""",
                ((Int8(Int8(UInt8(100))) & 127)..(Int8(Int8(Int8(-1))) & 127) : (Int64(-127) | 1)), Float32(-85.0), ((UInt16(UInt16(163)) &
                    127)..=(UInt16(UInt16(27)) & 127) : (Int64(Int16(-4)) | 1)), Float64(72.0)), UInt32(51), ((UInt16(UInt16(136)) &
                127)..=(UInt16(UInt16(76)) & 127) : (Int64(-44) | 1))) as (Range<Int64>, (String, Range<Int8>, Float32, 
            Range<UInt16>, Float64), UInt32, Range<UInt16>));
        var var_1698864440757_97: UInt32 = UInt32(UInt32(14));
        try { // block id: 33
            let var_1698864440757_45: Int = Int64(-32);
            (var_1698864440757_40 ?? ((Int64(Int64(-3)) & 127)..=(Int64(var_1698864440757_45) & 127) : (Int64(-80) | 1)));
            var_1698864440757_54.getOrThrow()
        } finally { // block id: 75
            let var_1698864440757_101: Range<UInt16> = ((UInt16(UInt16(Int8(UInt8(Int8(114))))) & 127)..(UInt16(UInt16(112)) &
                127) : (Int64(1) | 1));
            (Option<(Range<Int64>, (String, Range<Int8>, Float32, Range<UInt16>, Float64), UInt32, Range<UInt16>)>
                .Some((var_1698864440757_80, var_1698864440757_83, var_1698864440757_97, var_1698864440757_101)) ?? (((Int64(Int64(-124)) &
                    127)..(Int64(Int64(-86)) & 127) : (Int64(90) | 1)), var_1698864440757_83, var_1698864440757_97,
                var_1698864440757_101))
        }[1][2];
        (Option<Range<Int32>>.None ?? if ((match (var_1698864440757_5057) {
            case _ =>
                ();
                var_1698864440757_5067
        } ?? (Option<Array<Bool>>.Some(
            [true, true, false, var_1698864440757_1531, var_1698864440757_1531, false, var_1698864440757_1531,
                var_1698864440757_1531, var_1698864440757_5081, true]) is Int8))) {
            (try { // block id: 5118
                Option<Range<Int64>>.Some(var_1698864440757_462);
                Option<Range<Int32>>.Some(((Int32(Int32(-72)) & 127)..=(Int32(Int32(-71)) & 127) : (Int64(-57) | 1)))
            } catch (e: Exception) { // block id: 5123
                Option<Range<Int32>>.None
            } finally { // block id: 5125
                Option<Range<Int32>>.Some(((Int32(Int32(36)) & 127)..=(Int32(Int32(-62)) & 127) : (Int64(-18) | 1)))
            } ?? if (true) { // block id: 5130
                if (var_1698864440757_5081) {
                    var_1698864440757_3970
                } else {
                    var_1698864440757_5135
                };
                var_1698864440757_5139;
                if (true) {
                    ((Int32(Int32(125)) & 127)..=(Int32(Int32(-83)) & 127) : (var_1698864440757_3016 | 1))
                } else {
                    var_1698864440757_5148
                }
            } else { // block id: 5150
                ();
                if (false) {
                    ((Int32(Int32(-78)) & 127)..=(Int32(Int32(13)) & 127) : (Int64(53) | 1))
                } else {
                    ((Int32(Int32(-74)) & 127)..=(Int32(Int32(1)) & 127) : (Int64(86) | 1))
                }
            })
        } else {
            try { // block id: 5157
                let var_1698864440757_5159: ?(Float64, UInt16, Rune, Array<UInt64>, Option<(Range<Int64>, (String, Range<Int8>, 
                    Float32, Range<UInt16>, Float64), UInt32, Range<UInt16>)>) = Option<(Float64, UInt16, Rune, Array<UInt64>, 
                        Option<(Range<Int64>, (String, Range<Int8>, Float32, Range<UInt16>, Float64), UInt32, Range<UInt16>)>)>
                    .None;
                var_1698864440757_5159;
                var var_1698864440757_5166: Option<String> = (Option<((Range<Int64>, (String, Range<Int8>, Float32, 
                        Range<UInt16>, Float64), UInt32, Range<UInt16>), (Option<Unit>, Bool, Option<Unit>, String, 
                        Option<Bool>), Rune, ((Option<Unit>, Bool, Option<Unit>, String, Option<Bool>), UInt16, Rune, 
                        Option<Bool>, (String, Range<Int8>, Float32, Range<UInt16>, Float64)), Option<(Range<Int64>, (String, 
                        Range<Int8>, Float32, Range<UInt16>, Float64), UInt32, Range<UInt16>)>, Range<UInt32>)>.Some(
                    ((((Int64(Int64(-27)) & 127)..=(Int64(Int64(41)) & 127) : (Int64(-127) | 1)), ("7b6q;^[\\>P", ((Int8(Int8(-38)) &
                                    127)..=(Int8(Int8(101)) & 127) : (Int64(41) | 1)), Float32(Float32(-25.0)), ((UInt16(UInt16(21)) &
                                    127)..(UInt16(UInt16(104)) & 127) : (Int64(45) | 1)), Float64(Float64(-74.0))),
                            UInt32(196), ((UInt16(UInt16(Int16(84))) & 127)..=(UInt16(UInt16(Int16(79))) & 127) : (Int64(-7) |
                                1))), (((UInt16(92), VArray<Unit, $1>({i => ()}), UInt8(80), Option<(Range<Int64>, (String, 
                                        Range<Int8>, Float32, Range<UInt16>, Float64), UInt32, Range<UInt16>)>.None) as Unit),
                            ((false, Int32(81), false) is Range<UInt8>), Option<Unit>.Some(()), ###"\"XuWM4[rKn"###, (((UInt64(UInt64(22)) &
                                127)..(UInt64(UInt64(77)) & 127) : (Int64(-100) | 1)) as Bool)), r'n', ((Option<Unit>
                                    .Some(()), ((UInt64(230), r'3', Option<Array<Bool>>.Some(
                                        [false, true, true, false, true, false, false, true, true, true])) is (Float64, 
                                    UInt16, Rune, Array<UInt64>, Option<(Range<Int64>, (String, Range<Int8>, Float32, 
                                    Range<UInt16>, Float64), UInt32, Range<UInt16>)>)), (Option<(Float64, UInt16, Rune, 
                                        Array<UInt64>, Option<(Range<Int64>, (String, Range<Int8>, Float32, Range<UInt16>, 
                                        Float64), UInt32, Range<UInt16>)>)>.None as Unit), """
p<f?L
(~pX^
""", (Int16(35) as Bool)),
                            UInt16(Int16(UInt16(53))), r'U', (((Int32(Int32(90)) & 127)..=(Int32(Int32(2)) & 127) : (Int64(-7) |
                                1)) as Bool), ("8')`[U&w<!", ((Int8(Int8(-28)) & 127)..=(Int8(Int8(-86)) & 127) : (Int64(33) |
                                    1)), Float32(14.0), ((UInt16(UInt16(187)) & 127)..=(UInt16(UInt16(187)) & 127) : (Int64(102) |
                                    1)), Float64(99.0))), (((Option<((Range<Int64>, (String, Range<Int8>, Float32, Range<UInt16>, 
                                Float64), UInt32, Range<UInt16>), (Option<Unit>, Bool, Option<Unit>, String, Option<Bool>), 
                                Rune, ((Option<Unit>, Bool, Option<Unit>, String, Option<Bool>), UInt16, Rune, Option<Bool>, 
                                (String, Range<Int8>, Float32, Range<UInt16>, Float64)), Option<(Range<Int64>, (String, 
                                Range<Int8>, Float32, Range<UInt16>, Float64), UInt32, Range<UInt16>)>, Range<UInt32>)>
                            .None as Option<(Float64, UInt16, Rune, Array<UInt64>, Option<(Range<Int64>, (String, Range<Int8>, 
                            Float32, Range<UInt16>, Float64), UInt32, Range<UInt16>)>)>) as UInt16) as (Range<Int64>, (String, 
                            Range<Int8>, Float32, Range<UInt16>, Float64), UInt32, Range<UInt16>)), ((UInt32(UInt32(UInt32(236))) &
                            127)..=(UInt32(UInt32(142)) & 127) : (Int64(Int8(82)) | 1)))) as String);
                if (var_1698864440757_1531) {
                    Option<String>.Some("f\\;9T9f GV")
                } else {
                    var_1698864440757_5166
                };
                ((Int32(Int32(-34)) & 127)..(Int32(Int32(37)) & 127) : (Int64(-16) | 1))
            } catch (_) { // block id: 5266
                var_1698864440757_5268;
                var_1698864440757_5067;
                ((Int32(Int32(-104)) & 127)..=(Int32(Int32(-115)) & 127) : (Int64(-38) | 1))
            } finally { // block id: 5274
                if (true) {
                    Option<Bool>.Some(true)
                } else {
                    Option<Bool>.None
                };
                if (true) {
                    ((Int32(Int32(-40)) & 127)..(Int32(Int32(-14)) & 127) : (Int64(-123) | 1))
                } else {
                    var_1698864440757_5148
                }
            }
        }) |> func_1698864440757_117
    };

    VArray<Unit, $1>(repeat: func_1698864440757_22(
            UInt64(if (var_1698864440757_5081) { // block id: 5290
                var_1698864440757_5292
            } else if (var_1698864440757_5081) { // block id: 5295
                ();
                var_1698864440757_1494;
                var_1698864440757_5292
            } else { // block id: 5299
                let var_1698864440757_5301: Unit = ();
                var_1698864440757_5301;
                UInt32(61)
            }), optionalParam_1698864440757_24: match (Option<Unit>.Some(())) {
                case _ => Float64(34.0)
            }, namedParam_1698864440757_26: try { // block id: 5312
                Int16(124)
            } finally { // block id: 5314
                var_1698864440757_4319 * var_1698864440757_2900
            }))[0]
}

main(): Int64 {
    try {
        var var_1698864440757_5320: (Int8) -> Unit = func_1698864440757_6;
        let var_1698864440757_5334: (Range<Int16>, Class_1698864440757_124, (Float64, UInt16, Rune, Array<UInt64>, 
            Option<(Range<Int64>, (String, Range<Int8>, Float32, Range<UInt16>, Float64), UInt32, Range<UInt16>)>)) = (((Int16(Int16(-71)) &
                127)..(Int16(Int16(15)) & 127) : (Int64(UInt16(UInt16(Int8(-62)))) | 1)), Class_1698864440757_124(), (Float64(33.0),
                UInt16(Int8(UInt8(78))), r'Z', [UInt64(92), UInt64(25), UInt64(129), UInt64(Int64(Int16(UInt16(40)))),
                    UInt64(141), UInt64(160), UInt64(Int64(UInt32(188))), UInt64(UInt32(UInt16(231))),
                    UInt64(Int32(-75)), UInt64(128)], ((Option<Range<Int64>>.Some(
                    ((Int64(Int64(-99)) & 127)..=(Int64(Int64(-107)) & 127) : (Int64(-76) | 1))) as String) as (Range<Int64>, 
                    (String, Range<Int8>, Float32, Range<UInt16>, Float64), UInt32, Range<UInt16>))));
        (((var_1698864440757_5334 as Option<Int8>) ?? match (var_1698864440757_5334) {
            case (caseVar_1698864440757_5377, _, (caseVar_1698864440757_5378: (Range<Int64>, (String, Range<Int8>, 
                            Float32, Range<UInt16>, Float64), UInt32, Range<UInt16>), caseVar_1698864440757_5379, caseVar_1698864440757_5380, caseVar_1698864440757_5381: Range<UInt32>, caseVar_1698864440757_5382: Option<Option<Int8>>)) =>
                ();
                var_1698864440757_5387 += var_1698864440757_5387
                Option<Int8>.Some(var_1698864440757_471)

            case _: (UInt16, VArray<Unit, $1>, UInt8, Option<(Range<Int64>, (String, Range<Int8>, Float32, Range<UInt16>, 
                    Float64), UInt32, Range<UInt16>)>) =>
                var_1698864440757_5396;
                var_1698864440757_5396;
                Option<Int8>.None

            case _ => Option<Int8>.Some(var_1698864440757_471)
        }) ?? (((if (var_1698864440757_1531) {
            var_1698864440757_1621
        } else {
            var_1698864440757_1621
        }) as Int8) ?? Int8(-51))) |> var_1698864440757_5320;
        let var_1698864440757_5430: ?Option<((Option<Unit>, Bool, Option<Unit>, String, Option<Bool>), UInt16, Rune, 
            Option<Bool>, (String, Range<Int8>, Float32, Range<UInt16>, Float64))> = (Int32(UInt8(117)) as Option<((Option<Unit>, 
            Bool, Option<Unit>, String, Option<Bool>), UInt16, Rune, Option<Bool>, (String, Range<Int8>, Float32, Range<UInt16>, 
            Float64))>);
        var var_1698864440757_5533: VArray<Unit, $1> = [()];
        let var_1698864440757_5646: Range<UInt8> = ((UInt8(UInt8(Int8(79))) & 127)..(UInt8(UInt8(123)) & 127) : (Int64(Int64(27)) |
            1));
        (Option<VArray<Unit, $1>>.Some(
            if (((var_1698864440757_5430 ??
                Option<((Option<Unit>, Bool, Option<Unit>, String, Option<Bool>), UInt16, Rune, Option<Bool>, (String, 
                    Range<Int8>, Float32, Range<UInt16>, Float64))>.Some(
                (var_1698864440757_3301, var_1698864440757_5268, r'5', var_1698864440757_5440, var_1698864440757_83))) is Option<Option<((Option<Unit>, 
                Bool, Option<Unit>, String, Option<Bool>), UInt16, Rune, Option<Bool>, (String, Range<Int8>, Float32, 
                Range<UInt16>, Float64))>>)) { // block id: 5523
                (Option<UInt8>.None as Class_1698864440757_124);
                try { // block id: 5527
                    ();
                    if (var_1698864440757_5081) {
                        var_1698864440757_1816
                    } else {
                        var_1698864440757_5533
                    }
                } finally { // block id: 5535
                    VArray<Unit, $1>(repeat: var_1698864440757_5396)
                }
            } else { // block id: 5538
                if (var_1698864440757_5081) {
                    [true, true, false, false, false, false, true, false, false, false]
                } else {
                    [false, true, true, false, false, false, false, true, true, false]
                };
                var_1698864440757_5533
            }) ?? try { // block id: 5545
            var var_1698864440757_5552: VArray<Float32, $2> = [Float32(-119.0), Float32(-127.0)];
            if ((Option<Bool>.None ?? true)) {
                match (var_1698864440757_5552) {
                    case _: Option<Option<((Option<Unit>, Bool, Option<Unit>, String, Option<Bool>), UInt16, Rune, 
                            Option<Bool>, (String, Range<Int8>, Float32, Range<UInt16>, Float64))>> =>
                        if (true) {
                            VArray<Unit, $1>(repeat: var_1698864440757_5396)
                        } else {
                            VArray<Unit, $1>(repeat: var_1698864440757_5396)
                        }

                    case caseVar_1698864440757_5565: (Option<Unit>, Bool, Option<Unit>, String, Option<Bool>) =>
                        Option<Option<Unit>>.None;
                        if (true) {
                            var_1698864440757_327
                        } else {
                            var_1698864440757_327
                        };
                        if (var_1698864440757_1531) {
                            var_1698864440757_5533
                        } else {
                            VArray<Unit, $1>({i => ()})
                        }

                    case caseVar_1698864440757_5579: Range<Int32> => VArray<Unit, $1>(repeat: var_1698864440757_5396)

                    case _ =>
                        if (var_1698864440757_1531) {
                            VArray<Unit, $1>({i => ()})
                        } else {
                            var_1698864440757_5533
                        }
                }
            } else {
                Option<VArray<Unit, $1>>.None.getOrThrow()
            }
        } finally { // block id: 5593
            let var_1698864440757_5601: ?Option<VArray<Unit, $1>> = ((Option<((Range<Int64>, (String, Range<Int8>, 
                    Float32, Range<UInt16>, Float64), UInt32, Range<UInt16>), (Option<Unit>, Bool, Option<Unit>, String, 
                    Option<Bool>), Rune, ((Option<Unit>, Bool, Option<Unit>, String, Option<Bool>), UInt16, Rune, Option<Bool>, 
                    (String, Range<Int8>, Float32, Range<UInt16>, Float64)), Option<(Range<Int64>, (String, Range<Int8>, 
                    Float32, Range<UInt16>, Float64), UInt32, Range<UInt16>)>, Range<UInt32>)>.None as (UInt16, VArray<Unit, $1>, 
                UInt8, Option<(Range<Int64>, (String, Range<Int8>, Float32, Range<UInt16>, Float64), UInt32, Range<UInt16>)>)) as Option<VArray<Unit, $1>>);
            let var_1698864440757_5606: Option<VArray<Unit, $1>> = Option<VArray<Unit, $1>>.None;
            var var_1698864440757_5628: Int64 = Int64(Int8(Int8(-35)));
            var var_1698864440757_5635: UInt32 = UInt32(UInt8(UInt8(50)));
            match ((var_1698864440757_5601 ?? var_1698864440757_5606)) {
                case _: Float32 =>
                    (((Int64(Int64(-126)) & 127)..=(Int64(Int64(126)) & 127) : (Int64(35) | 1)), var_1698864440757_83,
                        UInt32(188), ((UInt16(UInt16(14)) & 127)..=(UInt16(UInt16(228)) & 127) : (var_1698864440757_5139 |
                            1)));
                    if (true) {
                        var_1698864440757_5533
                    } else {
                        var_1698864440757_1816
                    }

                case _: Array<UInt64> =>
                    var_1698864440757_5628 <<= ((var_1698864440757_3016) & 7)
                    var_1698864440757_5635++;
                    VArray<Unit, $1>({i => ()})

                case caseVar_1698864440757_5643 =>
                    var_1698864440757_5646;
                    var_1698864440757_1816

                case _ =>
                    var_1698864440757_5396;
                    var_1698864440757_5396;
                    if (false) {
                        var_1698864440757_5662
                    } else {
                        VArray<Unit, $1>({i => ()})
                    }

                case _ =>
                    if (var_1698864440757_5081) {
                        var_1698864440757_1816
                    } else {
                        var_1698864440757_5533
                    }
            }
        });
        var var_1698864440757_5704: ?Int64 = Option<Int64>.None;
        let var_1698864440757_5953: Float64 = Float64(12.0);
        let var_1698864440757_5958: Array<UInt64> = [UInt64(231), UInt64(147), UInt64(23), UInt64(157), UInt64(206),
            UInt64(214), UInt64(101), UInt64(71), UInt64(95), UInt64(141)];
        let var_1698864440757_5993: Option<(Range<Int64>, (String, Range<Int8>, Float32, Range<UInt16>, Float64), 
            UInt32, Range<UInt16>)> = Option<(Range<Int64>, (String, Range<Int8>, Float32, Range<UInt16>, Float64), 
                UInt32, Range<UInt16>)>.None;
        try { // block id: 5675
            var loopTimeVar_1698864440757_5685: Range<UInt64> = ((UInt64(UInt64(Int32(Int16(-69)))) & 127)..(UInt64(UInt64(UInt64(Int8(97)))) &
                127) : (Int64(Int64(Int16(95))) | 1));
            for (i in loopTimeVar_1698864440757_5685 where try { // block id: 5678
                var_1698864440757_5081
            } catch (_) { // block id: 5680
                false
            }) {
                var_1698864440757_5292;
                ()
            };
            (if (var_1698864440757_5081) {
                var_1698864440757_5704
            } else {
                var_1698864440757_5704
            } ?? var_1698864440757_5704.getOrThrow())
        } finally { // block id: 5709
            var var_1698864440757_5712: Option<Option<(Range<Int64>, (String, Range<Int8>, Float32, Range<UInt16>, 
                Float64), UInt32, Range<UInt16>)>> = (Option<Range<Int16>>.Some(
                ((Int16(Int16(Int16(-47))) & 127)..=(Int16(Int16(UInt8(5))) & 127) : (Int64(-12) | 1))) as Option<(Range<Int64>, 
                (String, Range<Int8>, Float32, Range<UInt16>, Float64), UInt32, Range<UInt16>)>);
            let var_1698864440757_5743: ((Range<Int64>, (String, Range<Int8>, Float32, Range<UInt16>, Float64), UInt32, 
                Range<UInt16>), (Option<Unit>, Bool, Option<Unit>, String, Option<Bool>), Rune, ((Option<Unit>, Bool, 
                Option<Unit>, String, Option<Bool>), UInt16, Rune, Option<Bool>, (String, Range<Int8>, Float32, Range<UInt16>, 
                Float64)), Option<(Range<Int64>, (String, Range<Int8>, Float32, Range<UInt16>, Float64), UInt32, Range<UInt16>)>, 
                Range<UInt32>) = ((((Int64(Int64(-34)) & 127)..=(Int64(Int64(-26)) & 127) : (Int64(27) | 1)), ("`+FG}!(;@a",
                        ((Int8(Int8(122)) & 127)..=(Int8(Int8(Int8(Int8(-82)))) & 127) : (Int64(UInt16(26)) | 1)),
                        Float32(-34.0), ((UInt16(UInt16(122)) & 127)..(UInt16(UInt16(177)) & 127) : (Int64(11) | 1)),
                        Float64(Float32(122.0))), UInt32(21), ((UInt16(UInt16(77)) & 127)..(UInt16(UInt16(24)) & 127) : (Int64(-110) |
                        1))), ((((UInt32(UInt32(224)) & 127)..(UInt32(UInt32(77)) & 127) : (Int64(76) | 1)) as Unit),
                    false, Option<Unit>.None, ###"Mi'a@J5*B&"###, ((((Int16(40) as Unit), false, Option<Unit>.None,
                        ###"!WZp4*}9ZJ"###, (Option<Unit>.Some(()) as Bool)) is Int16) as Bool)), r'9', ((Option<Unit>
                            .Some(()), false, (Option<Array<Array<UInt64>>>.Some(
                            [[UInt64(241), UInt64(100), UInt64(189), UInt64(222), UInt64(37), UInt64(100), UInt64(143),
                                UInt64(171), UInt64(66), UInt64(157)],
                                [UInt64(26), UInt64(42), UInt64(148), UInt64(181), UInt64(161), UInt64(48), UInt64(102),
                                UInt64(105), UInt64(40), UInt64(129)],
                                [UInt64(122), UInt64(179), UInt64(44), UInt64(124), UInt64(231), UInt64(166), UInt64(73),
                                UInt64(72), UInt64(25), UInt64(105)],
                                [UInt64(103), UInt64(90), UInt64(175), UInt64(232), UInt64(78), UInt64(160), UInt64(71),
                                UInt64(169), UInt64(251), UInt64(124)],
                                [UInt64(53), UInt64(171), UInt64(38), UInt64(242), UInt64(108), UInt64(51), UInt64(212),
                                UInt64(141), UInt64(107), UInt64(163)],
                                [UInt64(120), UInt64(6), UInt64(12), UInt64(77), UInt64(140), UInt64(190), UInt64(125),
                                UInt64(167), UInt64(131), UInt64(165)],
                                [UInt64(48), UInt64(184), UInt64(241), UInt64(208), UInt64(66), UInt64(43), UInt64(200),
                                UInt64(122), UInt64(79), UInt64(121)],
                                [UInt64(66), UInt64(40), UInt64(28), UInt64(221), UInt64(37), UInt64(93), UInt64(95),
                                UInt64(92), UInt64(180), UInt64(72)],
                                [UInt64(79), UInt64(249), UInt64(26), UInt64(44), UInt64(201), UInt64(64), UInt64(199),
                                UInt64(185), UInt64(13), UInt64(109)],
                                [UInt64(182), UInt64(30), UInt64(60), UInt64(174), UInt64(79), UInt64(4), UInt64(73),
                                UInt64(199), UInt64(43), UInt64(49)]]) as Unit), "W8|x833aAn", (Int16(50) as Bool)),
                    UInt16(250), r'B', ("@yV>t0@Mf3" as Bool), ("O:s\"2Az<P:", ((Int8(Int8(Int8(Int8(-55)))) & 127)..=(Int8(Int8(-32)) &
                            127) : (Int64(UInt64(UInt32(203))) | 1)), Float32(Float32(Float32(Float32(-111.0)))), ((UInt16(UInt16(UInt16(91))) &
                            127)..(UInt16(UInt16(UInt16(139))) & 127) : (Int64(UInt64(20)) | 1)), Float64(-85.0))),
                Option<(Range<Int64>, (String, Range<Int8>, Float32, Range<UInt16>, Float64), UInt32, Range<UInt16>)>
                    .Some(
                        (((Int64(Int64(-3)) & 127)..=(Int64(Int64(-2)) & 127) : (Int64(41) | 1)), (###"_:Kmu14\"XO"###, ((Int8(Int8(UInt8(101))) &
                                    127)..=(Int8(Int8(-21)) & 127) : (Int64(-29) | 1)), Float32(89.0), ((UInt16(UInt16(Int8(114))) &
                                    127)..=(UInt16(UInt16(215)) & 127) : (Int64(UInt32(20)) | 1)), Float64(111.0)),
                            UInt32(225), ((UInt16(UInt16(50)) & 127)..=(UInt16(UInt16(250)) & 127) : (Int64(67) | 1)))),
                ((UInt32(UInt32(120)) & 127)..(UInt32(UInt32(UInt32(126))) & 127) : (Int64(UInt64(67)) | 1)));
            match (var_1698864440757_5712) {
                case _ =>
                    var var_1698864440757_5728: ?(UInt16, VArray<Unit, $1>, UInt8, Option<(Range<Int64>, (String, Range<Int8>, 
                        Float32, Range<UInt16>, Float64), UInt32, Range<UInt16>)>) = (Option<(Float64, UInt16, Rune, 
                            Array<UInt64>, Option<(Range<Int64>, (String, Range<Int8>, Float32, Range<UInt16>, Float64), 
                            UInt32, Range<UInt16>)>)>.None as (UInt16, VArray<Unit, $1>, UInt8, Option<(Range<Int64>, (String, 
                        Range<Int8>, Float32, Range<UInt16>, Float64), UInt32, Range<UInt16>)>));
                    if (var_1698864440757_1531) {
                        Option<(UInt16, VArray<Unit, $1>, UInt8, Option<(Range<Int64>, (String, Range<Int8>, Float32, 
                                Range<UInt16>, Float64), UInt32, Range<UInt16>)>)>.None
                    } else {
                        var_1698864440757_5728
                    };
                    var_1698864440757_5396;
                    var_1698864440757_5733

                case _ =>
                    if (var_1698864440757_5081) {
                        Option<((Range<Int64>, (String, Range<Int8>, Float32, Range<UInt16>, Float64), UInt32, Range<UInt16>), 
                                (Option<Unit>, Bool, Option<Unit>, String, Option<Bool>), Rune, ((Option<Unit>, Bool, 
                                Option<Unit>, String, Option<Bool>), UInt16, Rune, Option<Bool>, (String, Range<Int8>, 
                                Float32, Range<UInt16>, Float64)), Option<(Range<Int64>, (String, Range<Int8>, Float32, 
                                Range<UInt16>, Float64), UInt32, Range<UInt16>)>, Range<UInt32>)>.None
                    } else {
                        Option<((Range<Int64>, (String, Range<Int8>, Float32, Range<UInt16>, Float64), UInt32, Range<UInt16>), 
                                (Option<Unit>, Bool, Option<Unit>, String, Option<Bool>), Rune, ((Option<Unit>, Bool, 
                                Option<Unit>, String, Option<Bool>), UInt16, Rune, Option<Bool>, (String, Range<Int8>, 
                                Float32, Range<UInt16>, Float64)), Option<(Range<Int64>, (String, Range<Int8>, Float32, 
                                Range<UInt16>, Float64), UInt32, Range<UInt16>)>, Range<UInt32>)>.Some(
                            var_1698864440757_5743)
                    };
                    var_1698864440757_484;
                    Option<(String, Range<Int8>, Float32, Range<UInt16>, Float64)>.None

                case _ =>
                    -var_1698864440757_5268
                    var_1698864440757_5396;
                    if (true) {
                        Option<(String, Range<Int8>, Float32, Range<UInt16>, Float64)>.Some(var_1698864440757_83)
                    } else {
                        Option<(String, Range<Int8>, Float32, Range<UInt16>, Float64)>.None
                    }
            };
            var var_1698864440757_5973: Float32 = Float32(Float32(-13.0));
            try { // block id: 5950
                (var_1698864440757_5953, UInt16(81), r'h', var_1698864440757_5958, var_1698864440757_1621)
            } catch (_) { // block id: 5961
                var_1698864440757_5396;
                (var_1698864440757_5953, UInt16(182), r'g', [UInt64(237), UInt64(96), UInt64(54), UInt64(56),
                        UInt64(139), UInt64(186), UInt64(99), UInt64(11), UInt64(148), UInt64(114)],
                    var_1698864440757_1621)
            } finally { // block id: 5969
                ();
                var_1698864440757_5973 *= Float32(-43.0)
                (Float64(-68.0), UInt16(51), var_1698864440757_3090, [UInt64(97), UInt64(88), UInt64(25), UInt64(254),
                        UInt64(220), var_1698864440757_5036, UInt64(40), UInt64(111), UInt64(160), UInt64(20)],
                    var_1698864440757_5993)
            };
            Int64(-35) * try { // block id: 5998
                if (false) {
                    ((Int8(Int8(-20)) & 127)..(Int8(Int8(-39)) & 127) : (Int64(96) | 1))
                } else {
                    ((Int8(var_1698864440757_471) & 127)..(Int8(Int8(117)) & 127) : (Int64(33) | 1))
                };
                Int64(56) + var_1698864440757_5139
            } catch (_) { // block id: 6012
                var_1698864440757_40;
                Int64(42) ^ Int64(-16)
            }
        } * Int64(12)
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var_1698864440757_5139 * var_1698864440757_5139), 64)
        crccheck.updateBuffer(UInt64(var_1698864440757_5268 * var_1698864440757_5268), 64)
        crccheck.updateBuffer(UInt64(var_1698864440757_5292 * var_1698864440757_5292), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) {
        println("Exception: NoneValueException")
    }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        buffer = Array<Int64>(buffer_n, {i => 0})
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, {i => 0})
        var byte_c = 1
        var byte_index = 0
        while (value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, {i => 0})
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2 ** 2 * crc_output[i] + 2 ** 1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
