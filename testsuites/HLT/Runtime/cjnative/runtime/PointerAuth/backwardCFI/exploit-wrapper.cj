/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 *
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

/**
 * How to use:
 *  1. Define let conf = ExploitConfig(...)
 *  2. Define exploit function: Unit which is used to execute exploited code
 *  3. Define victim function: define an anchor and pass it to attacker, e.g., ropAttacker(inout conf, inout anchor)
 */
@C
public struct ExploitConfig {
    // make sure it is aligned, otherwise it will SIGILL
    public let returnAddressAddon: UInt64
    // make sure victim and exploit function are not inlined by compiler
    // !! here is a mem leak, but doesn't matter since it will crash after rop !!
    public let victimMangleName: CString
    public let exploitMangleName: CString

    public init(returnAddressAddon!: UInt64, victimMangleName!: CString, exploitMangleName!: CString) {
        this.returnAddressAddon = returnAddressAddon
        this.victimMangleName = victimMangleName
        this.exploitMangleName = exploitMangleName
    }

    public init(returnAddressAddon!: UInt64, victimMangleName!: String, exploitMangleName!: String) {
        this.returnAddressAddon = returnAddressAddon
        this.victimMangleName = unsafe { LibC.mallocCString(victimMangleName) }
        this.exploitMangleName = unsafe { LibC.mallocCString(exploitMangleName) }
    }
}

foreign func ropAttacker(conf: CPointer<ExploitConfig>): Unit
