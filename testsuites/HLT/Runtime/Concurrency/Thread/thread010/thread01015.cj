/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 *
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

// LEVEL: 3
// EXEC: %compiler %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args

import std.sync.*
import std.collection.*

var count = AtomicInt64(0)

main(): Int64 {
    let syncCounter = SyncCounter(1)
    var fut = ArrayList<Future<Unit>>()
    Thread.handleUncaughtExceptionBy {
        thread: Thread, exception: Exception => if (thread.name == exception.toString()) {
            count.fetchAdd(1)
        }
    }

    for (i in 0..1000) {
        fut.add(spawn {
            syncCounter.waitUntilZero()
            Thread.currentThread.name = "Exception: ${i}"
            throw Exception("${i}")
        })
    }
    syncCounter.dec()
    for (i in 0..1000) {
        try {
            fut[i].get()
        } catch (_) {}
    }
    return count.load() - 1000
}
