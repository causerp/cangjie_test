/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args

public var var_1663485057206_35 : UInt16 = UInt16(UInt16(UInt8(UInt8(Int8(117)))))
public var var_1663485057206_180 : Bool = (Int32(UInt8(146)) is UInt32)
var var_1663485057206_197 : Unit = ()
let var_1663485057206_238 : Int64 = Int64(Int8(-25))
public enum Enum_1663485057206_9 {
    defaultValue
}
public open class Class_1663485057206_83 {
    init() { // block id: 85

    }
;
    public static mut prop var_1663485057206_88 : Bool { // block id: 89
        get() { // block id: 91
            (UInt64(49) is String);
            var_1663485057206_245
        }

        set(Value) { // block id: 96
            UInt16(Int8(Int8(Int8(-82))));
            Enum_1663485057206_9.defaultValue;
            ();
            (var_1663485057206_245 = Value)
        }

    };
    static mut prop var_1663485057206_245 : Bool { // block id: 246
        get() { // block id: 248
            ();
            ();
            false
        }

        set(Value) { // block id: 254

        }

    }
}




public func func_1663485057206_136() : Option<Unit> { // block id: 137
    let var_1663485057206_164 : ??Unit = ("""
k5@PG
s&8ro
""" as Option<Unit>);
    let var_1663485057206_169 : Int16 = Int16(Int16(Int8(-44)));
    let var_1663485057206_190 : ?Unit = Option<Unit>.Some(());
    var var_1663485057206_205 : ?Unit = Option<Unit>.Some(());
    ((try { // block id: 149
        let var_1663485057206_151 : Option<Option<Option<Unit>>> = (((UInt64(68)&127)..(UInt64(UInt64(UInt32(184)))&127):((Int64(UInt16(Int8(-91)))|1))) as Option<Option<Unit>>);
        var_1663485057206_151
    } finally { // block id: 161
        Option<Option<Option<Unit>>>.Some(var_1663485057206_164)
    } ?? match (var_1663485057206_169) {
        case _ => 
            var var_1663485057206_176 : Unit = ();
            var_1663485057206_176;
            var_1663485057206_180 ||= true;
            Option<Option<Unit>>.None
        
    }) ?? [var_1663485057206_190, Option<Unit>.Some(()), Option<Unit>.Some(var_1663485057206_197), Option<Unit>.None, Option<Unit>.Some(var_1663485057206_197), var_1663485057206_190, var_1663485057206_190, var_1663485057206_205, Option<Unit>.Some(()), Option<Unit>.None][7])
}

public func func_1663485057206_127() : Int64 { // block id: 128
    ();
    var var_1663485057206_216 : (Bool, Bool, Array<UInt64>, Range<UInt64>, Bool) = ((false is String), false, [UInt64(206), UInt64(113), UInt64(127), UInt64(101), UInt64(60), UInt64(218), UInt64(243), UInt64(53), UInt64(78), UInt64(17)], ((UInt64(8)&127)..=(UInt64(128)&127):(((-71)|1))), true);
    var loopTimeVar_1663485057206_230 : Int64 = 0;
    (func_1663485057206_136() ?? do {
        loopTimeVar_1663485057206_230++;

    } while ((var_1663485057206_216[1]) && loopTimeVar_1663485057206_230 < 100 ) );
    match ((-70)) {
        case caseVar_1663485057206_235 : Enum_1663485057206_9 => 
            var_1663485057206_238
        
        case _ => 
            (-74)
        
    }
}

main(): Int64 {
    try {
        var var_1663485057206_16 : Float32 = Float32(3.0);
        var var_1663485057206_53 : Int16 = Int16(Int16(-45));
        var var_1663485057206_66 : UInt8 = UInt8(137);
        let var_1663485057206_70 : Int64 = (-37);
        match (match (Enum_1663485057206_9.defaultValue) {
                case defaultValue => 
                    var_1663485057206_16
                
                case defaultValue => 
                    ();
                    UInt16(22);
                    Float32(37.0)
                
                case _ => 
                    Int8(-44);
                    var_1663485057206_16 + Float32(-3.0)
                
            }) {
            case _ : UInt32 => 
                var_1663485057206_35 -= UInt16(101);
                let var_1663485057206_44 : Int64 = Int64(Int16(-80));
                var_1663485057206_44 ** UInt64(143)
            
            case _ : Int16 => 
                var_1663485057206_53 -= var_1663485057206_53;
                42.0 >= (-7.0);
                (-87)
            
            case caseVar_1663485057206_63 : UInt16 => 
                var_1663485057206_66;
                var_1663485057206_70 & (-12)
            
            case _ => 
                var var_1663485057206_77 : Bool = false;
                var_1663485057206_77 &&= true;
                22
            
        };
        var loopTimeVar_1663485057206_108 : Range<UInt64> = ((UInt64(243)&127)..(UInt64(Int64(Int32(Int16(34))))&127):((Int64(Int8(56))|1)));
        for (i in loopTimeVar_1663485057206_108 where Class_1663485057206_83.var_1663485057206_88) {
            Int16(-70) / ((Int16(-89)) | 1);
            ()
        };
        func_1663485057206_127()
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var_1663485057206_53*var_1663485057206_53), 64)
        crccheck.updateBuffer(UInt64(var_1663485057206_66*var_1663485057206_66), 64)
        crccheck.updateBuffer(UInt64(var_1663485057206_70*var_1663485057206_70), 64)
        crccheck.updateBuffer(UInt64(var_1663485057206_238*var_1663485057206_238), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Enum_1663485057206_9 {

}

