/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args

var var_1693255805430_28 : ?(Unit, UInt64) = (() as (Unit, UInt64))
let var_1693255805430_39 : (Unit, UInt64) = ((), UInt64(167))
const var_1693255805430_63 : Unit = ()
public const var_1693255805430_74 : UInt16 = 165
public const var_1693255805430_107 : UInt = 159
const var_1693255805430_111 : Float32 = -124.0
const var_1693255805430_115 : Int64 = 79
public let var_1693255805430_167 : Bool = false
public var var_1693255805430_173 : VArray<Bool, $6> = [false, true, (((UInt32(UInt32(154))&127)..=(UInt32(UInt32(180))&127):(Int64(42)|1)) is Range<UInt16>), (((UInt64(UInt64(147))&127)..(UInt64(UInt64(61))&127):(Int64(17)|1)) is Range<UInt16>), false, false]
var var_1693255805430_188 : (Float32, VArray<Bool, $6>, Int32, Range<UInt32>, Option<(Unit, UInt64)>, Range<Int16>) = (Float32(Float32(76.0)), VArray<Bool, $6>({ i => true}), Int32(Int16(84)), ((UInt32(UInt32(22))&127)..(UInt32(UInt32(227))&127):(Int64(49)|1)), Option<(Unit, UInt64)>.None, ((Int16(Int16(-42))&127)..(Int16(Int16(-111))&127):(Int64(28)|1)))
public var var_1693255805430_215 : Bool = false
public let var_1693255805430_228 : Class_1693255805430_143 = Class_1693255805430_143()
public const var_1693255805430_253 : Bool = false
const var_1693255805430_264 : String = "$9fX:B2YP1"
public const var_1693255805430_301 : Float64 = -80.0
const var_1693255805430_319 : Rune = r'L'
public var var_1693255805430_347 : Class_1693255805430_343 = Class_1693255805430_343()
let var_1693255805430_384 : Class_1693255805430_380 = Class_1693255805430_380()
public let var_1693255805430_404 : Bool = ([UInt64(206), UInt64(236), UInt64(86), UInt64(227), UInt64(16), UInt64(183), UInt64(61), UInt64(190), UInt64(30), UInt64(161)] is (Float32, VArray<Bool, $6>, Int32, Range<UInt32>, Option<(Unit, UInt64)>, Range<Int16>))
const var_1693255805430_414 : UInt8 = 42
public var var_1693255805430_440 : Array<Rune> = [r'j', r'k', r'T', r'c', r'M', r'P', r'J', r's', r'N', r'P']
let var_1693255805430_464 : (VArray<Bool, $6>, Range<Int64>, Bool, Int16) = (VArray<Bool, $6>(repeat: (Int16(-48) is Range<UInt16>)), ((Int64(Int64(Int32(Int16(-103))))&127)..=(Int64(Int64(UInt32(87)))&127):(Int64(82)|1)), (((), UInt64(123)) is (Int8, Int16, Bool, Int32) -> Bool), Int16(8))

const func func_1693255805430_91() : Float32 { // block id: 92
    const var_1693255805430_100 : Int64 = 111;
    const func func_1693255805430_94(optionalParam_1693255805430_95 ! : UInt64 = 98, namedParam_1693255805430_97 ! : Int64) : Int64 { // block id: 98
        var_1693255805430_100
    }
;
    func_1693255805430_94(optionalParam_1693255805430_95 : 16, namedParam_1693255805430_97 : func_1693255805430_94(optionalParam_1693255805430_95 : 95, namedParam_1693255805430_97 : func_1693255805430_94(optionalParam_1693255805430_95 : var_1693255805430_107, namedParam_1693255805430_97 : 14)));
    var_1693255805430_111
}

const func func_1693255805430_80(param_1693255805430_81 : Float32, optionalParam_1693255805430_82 ! : Int64 = 88, namedParam_1693255805430_84 ! : Unit) : Float32 { // block id: 85
    254;
    const var_1693255805430_88 : UInt8 = 8;
    var_1693255805430_88;
    func_1693255805430_91()
}

const func func_1693255805430_50(param_1693255805430_51 : Int8, namedParam_1693255805430_52 ! : Int16, optionalParam_1693255805430_53 ! : Bool = true, namedParam_1693255805430_55 ! : Int32) : Bool { // block id: 56
    const func func_1693255805430_58(namedParam_1693255805430_59 ! : Unit) : Unit { // block id: 60
        ()
    }
;
    func_1693255805430_58(namedParam_1693255805430_59 : var_1693255805430_63);
    const func func_1693255805430_68(param_1693255805430_69 : Float32) : Bool { // block id: 70
        146 & var_1693255805430_74;
        func_1693255805430_58(namedParam_1693255805430_59 : var_1693255805430_63);
        true
    }
;
    false || func_1693255805430_68(func_1693255805430_80(-79.0, optionalParam_1693255805430_82 : var_1693255805430_115, namedParam_1693255805430_84 : ()))
}

public open class Class_1693255805430_143 {
    init() { // block id: 145

    }
;
    init(param_1693255805430_235 : Range<UInt8>, param_1693255805430_236 : (Float32, Int64, Unit) -> Float32) { // block id: 241
        let var_1693255805430_256 : (String) -> Bool = { lambdaParameter_1693255805430_259 : String => (((UInt16(UInt16(75))&127)..(UInt16(UInt16(77))&127):(Int64(-43)|1)) is UInt64) };
        var_1693255805430_264|>var_1693255805430_256;
        try { // block id: 267
            var_1693255805430_188;
            var var_1693255805430_328 : (String) -> Unit = func_1693255805430_270;
            var_1693255805430_264|>var_1693255805430_328;
            var_1693255805430_63
        } catch (_) { // block id: 332

        };
        try { // block id: 334
            Option<Unit>.Some(()).getOrThrow();
            var_1693255805430_347.var_1693255805430_350;
            var loopTimeVar_1693255805430_355 : Range<UInt64> = ((UInt64(UInt64(UInt16(101)))&127)..(UInt64(UInt64(UInt16(Int8(UInt8(62)))))&127):(Int64(UInt32(Int32(UInt16(127))))|1));
            for (i in loopTimeVar_1693255805430_355 where var_1693255805430_215) {

            }
        } catch (_) { // block id: 367
            var_1693255805430_215;
            var_1693255805430_63
        }
    }
;
    static const var_1693255805430_394 : Unit = ()
}

public const func func_1693255805430_243(param_1693255805430_244 : String) : Bool { // block id: 245
    var_1693255805430_63;
    ();
    const func func_1693255805430_249() : Bool { // block id: 250
        r'P';
        var_1693255805430_253
    }
;
    func_1693255805430_249()
}

public const func func_1693255805430_286(optionalParam_1693255805430_287 ! : Int16 = -48, optionalParam_1693255805430_289 ! : Int16 = 124) : Float64 { // block id: 291
    var_1693255805430_63;
    202 | ((108 / ((var_1693255805430_74) | 1)) << ((155) & 7));
    var_1693255805430_301
}

const func func_1693255805430_304(optionalParam_1693255805430_305 ! : Unit = ()) : Int16 { // block id: 307
    var_1693255805430_63;
    -87
}

const func func_1693255805430_279(optionalParam_1693255805430_280 ! : Int16 = 41, namedParam_1693255805430_282 ! : Float32, namedParam_1693255805430_283 ! : String) : Float64 { // block id: 284
    const var_1693255805430_311 : Int16 = 19;
    func_1693255805430_286(optionalParam_1693255805430_287 : func_1693255805430_304(), optionalParam_1693255805430_289 : var_1693255805430_311)
}

const func func_1693255805430_276() : Rune { // block id: 277
    func_1693255805430_279(namedParam_1693255805430_282 : 45.0, namedParam_1693255805430_283 : var_1693255805430_264);
    var_1693255805430_63;
    if (var_1693255805430_253) { var_1693255805430_319 } else { r'4' } 
}

const func func_1693255805430_270(param_1693255805430_271 : String) : Unit { // block id: 272
    const var_1693255805430_323 : Rune = r'G';
    if (true) { func_1693255805430_276() } else { var_1693255805430_323 } ;
    var_1693255805430_63;
    var_1693255805430_63
}


public open class Class_1693255805430_343 <: Class_1693255805430_143 {
    init() { // block id: 345

    }
;
    public let var_1693255805430_350 : ?(Unit, UInt64) = Option<(Unit, UInt64)>.None
}

public open class Class_1693255805430_380 {
    init() { // block id: 382

    }
;
    public prop var_1693255805430_387 : Class_1693255805430_143 { // block id: 388
        get() { // block id: 390
            ();
            Class_1693255805430_343()
        }

    }
}

func func_1693255805430_147() : Class_1693255805430_143 { // block id: 148
    const var_1693255805430_372 : UInt8 = 183;
    var var_1693255805430_377 : (Float32, Int64, Unit) -> Float32 = func_1693255805430_80;
    if (if (false) { VArray<Bool, $6>({ i => false}) } else { var_1693255805430_173 } [5]) { match (var_1693255805430_188[4]) {
        case _ : Rune => 
            var_1693255805430_215 ||= false;
            Class_1693255805430_143()
        
        case _ => 
            Class_1693255805430_143()
        
        case caseVar_1693255805430_225 => 
            var_1693255805430_228;
            Class_1693255805430_143()
        
        case _ => 
            Class_1693255805430_143(((UInt8(var_1693255805430_372)&127)..=(UInt8(UInt8(75))&127):(var_1693255805430_115|1)), var_1693255805430_377)
        
    } } else { (var_1693255805430_384.var_1693255805430_387) } 
}

public func func_1693255805430_45(param_1693255805430_46 : UInt16) : Unit { // block id: 47
    var var_1693255805430_127 : UInt8 = UInt8(202);
    var loopTimeVar_1693255805430_141 : Int64 = 0;
    do {
        loopTimeVar_1693255805430_141++;

    } while ((func_1693255805430_50(Int8(59) << ((Int8(-56)) & 7), namedParam_1693255805430_52 : Int16(113), optionalParam_1693255805430_53 : false, namedParam_1693255805430_55 : try { // block id: 124
        var_1693255805430_127 % ((var_1693255805430_127) | 1);
        Int32(-50) * Int32(-21)
    } finally { // block id: 133
        var_1693255805430_74 >> ((var_1693255805430_74) & 7);
        var_1693255805430_63;
        Int32(-67)
    })) && loopTimeVar_1693255805430_141 < 100 ) ;
    Class_1693255805430_143.var_1693255805430_394
}


func func_1693255805430_8(param_1693255805430_9 : Float32) : Rune { // block id: 10
    (match (Option<(Unit, UInt64)>.Some(((), UInt64(134)))) {
        case caseVar_1693255805430_25 => 
            var_1693255805430_28
        
        case _ => 
            var var_1693255805430_35 : Bool = false;
            !var_1693255805430_35;
            Option<(Unit, UInt64)>.None
        
    } ?? var_1693255805430_39)[0];
    var var_1693255805430_397 : (UInt16) -> Unit = func_1693255805430_45;
    UInt16((var_1693255805430_404, var_1693255805430_74, var_1693255805430_173, UInt8(30), ((), UInt64(24)), var_1693255805430_414)[1])|>var_1693255805430_397;
    var var_1693255805430_427 : (Option<Array<Rune>>, UInt8, Array<UInt64>, Range<Int64>) = (Option<Array<Rune>>.None, UInt8(196), [UInt64(43), UInt64(86), UInt64(130), UInt64(240), UInt64(123), UInt64(127), UInt64(10), UInt64(42), UInt64(89), UInt64(121)], ((Int64(Int64(90))&127)..=(Int64(Int64(-10))&127):(Int64(-23)|1)));
    (var_1693255805430_427[0] ?? if (true) { var_1693255805430_440 } else { [r'C', r'3', r'h', r'2', r'T', r'F', r'6', r'J', r'W', r'3'] } )[9]
}

main(): Int64 {
    try {
        var var_1693255805430_455 : (Float32) -> Rune = func_1693255805430_8;
        var_1693255805430_111 * Float32(-66.0)|>var_1693255805430_455;
        var loopTimeVar_1693255805430_504 : Array<Rune> = [r'0', r'4', r'l', r'X', r'4', r'W', r'2', r'd', r't', r'E'];
        for (i in loopTimeVar_1693255805430_504 where var_1693255805430_464[2]) {
            var_1693255805430_63
        };
        [Int64(-126), Int64(97), Int64(-45), Int64(-103), Int64(-29), Int64(-126), Int64(59), Int64(-70), Int64(26), Int64(-115)][9]
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Int32 {
        var i = 0
		var res = ""
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
        if ( res == "00000000000" ){
            return 0
        }
        return 1
    }
}
extend Class_1693255805430_380 {

}

extend Class_1693255805430_143 {

}

extend Class_1693255805430_343 {

}

