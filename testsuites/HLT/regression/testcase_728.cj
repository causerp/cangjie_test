/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args

public const var_1734919229696_30: Unit = ()
public let var_1734919229696_46: Bool = (Int64(Int8(UInt8(Int8(120)))) is Unit)
public var var_1734919229696_64: UInt8 = UInt8(43)
internal let var_1734919229696_67: UInt8 = UInt8(Int8(-22))
public const var_1734919229696_95: UInt32 = 230
public var var_1734919229696_185: Array<Bool> = [false, (Int16(-69) is (UInt8) -> Unit), false, false,
    (Int16(-14) is Range<UInt64>), true,
    ([(UInt16(70) is Range<UInt16>), true, false,
    (((UInt8(UInt8(157)) & 127)..(UInt8(UInt8(67)) & 127) : (Int64(38) | 1)) is Float32), true, false,
    (UInt32(59) is Range<UInt64>), true,
    (((Int32(Int32(-53)) & 127)..=(Int32(Int32(-37)) & 127) : (Int64(89) | 1)) is Range<Int32>), true] is UInt16), true,
    true, false]
public var var_1734919229696_253: Float64 = Float64(56.0)
internal var var_1734919229696_327: VArray<Unit, $1> = [()]
@Deprecated
public var var_1734919229696_350: Range<UInt8> = ((UInt8(UInt8(105)) & 127)..(UInt8(UInt8(174)) & 127) : (Int64(-50) | 1))
@Deprecated
public var var_1734919229696_440: VArray<Bool, $8> = VArray<Bool, $8>({i => false})
public var var_1734919229696_476: UInt64 = UInt64(145)
public var var_1734919229696_500: Class_1734919229696_409 = Class_1734919229696_409()
public let var_1734919229696_507: Float32 = Float32(80.0)
@Deprecated
public const var_1734919229696_534: Bool = false
public let var_1734919229696_539: Bool = (((UInt8(UInt8(UInt8(48))) & 127)..=(UInt8(UInt8(223)) & 127) : (Int64(UInt16(8)) |
    1)) is Interface_1734919229696_413<UInt8>)
public var var_1734919229696_556: UInt16 = UInt16(55)
@Deprecated
public let var_1734919229696_564: ?Class_1734919229696_409 = (Class_1734919229696_245() as Class_1734919229696_409)
public var var_1734919229696_602: Array<Range<UInt8>> = [((UInt8(UInt8(12)) & 127)..=(UInt8(UInt8(135)) & 127) : (Int64(-81) |
    1)), ((UInt8(UInt8(136)) & 127)..=(UInt8(UInt8(104)) & 127) : (Int64(61) | 1)),
    ((UInt8(UInt8(80)) & 127)..(UInt8(UInt8(115)) & 127) : (Int64(-85) | 1)),
    ((UInt8(UInt8(12)) & 127)..(UInt8(UInt8(89)) & 127) : (Int64(-81) | 1)),
    ((UInt8(UInt8(254)) & 127)..=(UInt8(UInt8(186)) & 127) : (Int64(73) | 1)),
    ((UInt8(UInt8(230)) & 127)..=(UInt8(UInt8(Int8(84))) & 127) : (Int64(UInt8(83)) | 1)),
    ((UInt8(UInt8(148)) & 127)..(UInt8(UInt8(88)) & 127) : (Int64(-112) | 1)),
    ((UInt8(UInt8(227)) & 127)..=(UInt8(UInt8(134)) & 127) : (Int64(112) | 1)),
    ((UInt8(UInt8(Int8(-48))) & 127)..(UInt8(UInt8(Int8(UInt8(78)))) & 127) : (Int64(-5) | 1)),
    ((UInt8(UInt8(Int8(Int8(12)))) & 127)..=(UInt8(UInt8(64)) & 127) : (Int64(Int8(UInt8(177))) | 1))]
public let var_1734919229696_714: Array<UInt64> = [UInt64(246), UInt64(103), UInt64(160), UInt64(88), UInt64(247),
    UInt64(234), UInt64(139), UInt64(58), UInt64(40), UInt64(216)]
@Deprecated
internal let var_1734919229696_779: (Int64, UInt32) = (Int64(-23), UInt32(28))
@Deprecated
public let var_1734919229696_893: Int64 = Int64(UInt8(154))
public var var_1734919229696_911: Unit = ()

internal const func func_1734919229696_14<T0, T1>(optionalParam_1734919229696_15!: String = """
pBc!8
XV?.u
""",
    namedParam_1734919229696_17!: Unit, namedParam_1734919229696_18!: Bool): Int16 { // block id: 19
    const func func_1734919229696_25(param_1734919229696_26: Int64): Unit { // block id: 27
        ();
        var_1734919229696_30;
        const func func_1734919229696_33<T0, T1, T2>(): Unit { // block id: 34

        }

        func_1734919229696_33<UInt16, Rune, UInt16>()
    };

    const func func_1734919229696_21(param_1734919229696_22: Int8): Unit { // block id: 23
        const var_1734919229696_36: Int = 5;
        func_1734919229696_25(var_1734919229696_36)
    };

    func_1734919229696_21(37);
    51.0;
    19
}

public const func func_1734919229696_9(param_1734919229696_89: UInt8): Unit { // block id: 90

}

@Frozen
func func_1734919229696_9(param_1734919229696_10: Unit): UInt32 { // block id: 11
    var loopTimeVar_1734919229696_53: Int = 0;
    Int16(func_1734919229696_14<String, String>(
        namedParam_1734919229696_17: while ((false) && loopTimeVar_1734919229696_53 < 100) {
            loopTimeVar_1734919229696_53++;
            ();
            var_1734919229696_46
        }, namedParam_1734919229696_18: if (true) { // block id: 56
            var_1734919229696_46 || var_1734919229696_46
        } else if (var_1734919229696_46) { // block id: 61
            var_1734919229696_64 *= var_1734919229696_67
            -UInt32(172)
            var_1734919229696_64 > UInt8(99)
        } else { // block id: 75
            false
        }));
    const func func_1734919229696_80(param_1734919229696_81: UInt8, namedParam_1734919229696_82!: Bool,
        namedParam_1734919229696_83!: Float32, optionalParam_1734919229696_84!: UInt16 = 176): UInt32 { // block id: 86
        const var_1734919229696_92: UInt8 = 21;
        func_1734919229696_9(var_1734919229696_92);
        var_1734919229696_95
    };

    try { // block id: 78
        func_1734919229696_80(UInt8(105), namedParam_1734919229696_82: var_1734919229696_46,
            namedParam_1734919229696_83: Float32(96.0))
    } catch (e: Exception) { // block id: 100
        try { // block id: 102
            var_1734919229696_95 / ((var_1734919229696_95) | 1)
        } finally { // block id: 106
            ();
            UInt32(62) - UInt32(151)
        }
    }
}

public open class Class_1734919229696_245 {
    public init() { // block id: 247

    }

    public static let var_1734919229696_641: Int32
    public let var_1734919229696_669: Int = Int64(106);
    public var var_1734919229696_674: Struct_1734919229696_274 = Struct_1734919229696_274();

    @Frozen
    private static mut prop var_1734919229696_690: Option<Array<Range<UInt8>>> { // block id: 691
        get() { // block id: 693
            ();
            Option<Array<Range<UInt8>>>.None
        }
        set(Value) { // block id: 698
            ();
            ()
        }
    }

    @Frozen
    func func_1734919229696_589(): Int32 { // block id: 590
        var var_1734919229696_660: Bool = false;
        if (var_1734919229696_46) { // block id: 593
            var loopTimeVar_1734919229696_598: Int64 = 0;
            do {
                loopTimeVar_1734919229696_598++;
            } while ((var_1734919229696_539) && loopTimeVar_1734919229696_598 < 100);
            var_1734919229696_602[9]
        } else if ((try { // block id: 635
            var_1734919229696_500;
            var_1734919229696_30;
            [UInt64(139), UInt64(229), UInt64(107), UInt64(186), UInt64(31), UInt64(137), UInt64(79), UInt64(24),
                UInt64(208), UInt64(19)]
        } finally { // block id: 639
            var_1734919229696_641;
            var_1734919229696_185;
            [UInt64(253), UInt64(252), var_1734919229696_476, var_1734919229696_476, UInt64(168), UInt64(189),
                UInt64(78), var_1734919229696_476, var_1734919229696_476, UInt64(193)]
        } is Class_1734919229696_245)) { // block id: 655
            ((UInt8(UInt8(53)) & 127)..=(UInt8(UInt8(42)) & 127) : (Int64(-101) | 1))
        } else { // block id: 657
            var_1734919229696_660 ||= false
            if (var_1734919229696_660) {
                ((UInt8(var_1734919229696_64) & 127)..=(UInt8(UInt8(172)) & 127) : (var_1734919229696_669 | 1))
            } else {
                var_1734919229696_350
            }
        };
        let var_1734919229696_710: ?Array<UInt64> = Option<Array<UInt64>>.None;
        var_1734919229696_674.func_1734919229696_677((var_1734919229696_690 ?? var_1734919229696_602), Int8(Int8(-108)),
            namedParam_1734919229696_680: (var_1734919229696_710 ?? [UInt64(131), UInt64(137), UInt64(67), UInt64(59),
                UInt64(193), UInt64(114), UInt64(60), UInt64(120), UInt64(182), UInt64(190)]),
            namedParam_1734919229696_681: var_1734919229696_714)
    };

    public open func func_1734919229696_749(): Unit { // block id: 750
        let var_1734919229696_758: Class_1734919229696_754 = Class_1734919229696_754();
        ((Int64(var_1734919229696_669) & 127)..=(Int64(var_1734919229696_758.var_1734919229696_761) & 127) : ((Option<(Int64, 
                UInt32)>.Some((Int64(96), var_1734919229696_95)) ?? var_1734919229696_779)[0] | 1));
        if (((Class_1734919229696_409(), var_1734919229696_602, Class_1734919229696_754(), """
0J~|z
kRh;S
""")[3] is Range<UInt8>)) { // block id: 794

        }
    }

    static init() {
        var_1734919229696_641 = Int32(-60)
    }
}

public struct Struct_1734919229696_274 {
    @Frozen
    public init() { // block id: 276

    }

    let var_1734919229696_281: Bool = false;
    static var var_1734919229696_322: Int32 = Int32(-63);

    @Frozen
    static prop var_1734919229696_335: Range<Int8> { // block id: 336
        get() { // block id: 338
            ((Int8(Int8(-50)) & 127)..=(Int8(Int8(UInt8(181))) & 127) : (Int64(-110) | 1))
        }
    }
    var var_1734919229696_574: Class_1734919229696_409 = Class_1734919229696_409();
    public static var var_1734919229696_586: Class_1734919229696_245 = Class_1734919229696_245();

    @Frozen
    public func func_1734919229696_677(param_1734919229696_678: Array<Range<UInt8>>, param_1734919229696_679: Int8,
        namedParam_1734919229696_680!: Array<UInt64>, namedParam_1734919229696_681!: Array<UInt64>): Int32 { // block id: 682
        Int32(-88)
    };

    public init(param_1734919229696_309: (Unit) -> UInt32, param_1734919229696_312: Range<UInt8>) { // block id: 313
        var var_1734919229696_319: Int32 = Int32(101);
        var var_1734919229696_346: Int8 = Int8(Int8(50));
        if (var_1734919229696_46) { // block id: 316
            var_1734919229696_319 &= var_1734919229696_322
            var_1734919229696_327[0];
            (var_1734919229696_335, Int32(-8), var_1734919229696_346, var_1734919229696_350)[2]
        } else if (VArray<Bool, $8>(repeat: var_1734919229696_46)[1]) { // block id: 365
            match (Option<Class_1734919229696_245>.Some(Class_1734919229696_245())) {
                case _ =>
                    VArray<Unit, $1>(repeat: ());
                    Int8(-69)
            }
        } else { // block id: 375
            if (true) { // block id: 378
                if (var_1734919229696_46) {
                    ###"jV[)(D[9(n"###
                } else {
                    "\"-q^cVR%iW"
                };
                var_1734919229696_30;
                var_1734919229696_322
            } else if (true) { // block id: 386
                var_1734919229696_319 * var_1734919229696_322
            } else { // block id: 390
                (var_1734919229696_335, Int32(-84), var_1734919229696_346, var_1734919229696_350);
                var_1734919229696_319
            };
            if (true) { // block id: 399

            } else if (false) { // block id: 401

            }
            var_1734919229696_440 |> func_1734919229696_403
        };
        let var_1734919229696_582: (String, Unit, Bool) -> Int16 = func_1734919229696_577;
        var_1734919229696_582 |> func_1734919229696_463;
        var_1734919229696_586.func_1734919229696_589()
    }
}

public sealed interface Interface_1734919229696_412 {}

public interface Interface_1734919229696_416<T0, T1> {}

public interface Interface_1734919229696_418 <: Interface_1734919229696_416<UInt8, VArray<Int8, $3>> {}

public interface Interface_1734919229696_417 <: Interface_1734919229696_416<UInt8, VArray<Int8, $3>> &
    Interface_1734919229696_418 {}

public interface Interface_1734919229696_415 <: Interface_1734919229696_416<UInt8, VArray<Int8, $3>> &
    Interface_1734919229696_417 {}

public sealed interface Interface_1734919229696_414 <: Interface_1734919229696_415 {}

public interface Interface_1734919229696_413<T0> <: Interface_1734919229696_414 {}

@Deprecated
public open class Class_1734919229696_409 <: Interface_1734919229696_412 & Interface_1734919229696_413<UInt8> {
    public init() { // block id: 411

    }

    @Frozen
    static mut prop var_1734919229696_421: VArray<Int8, $3> { // block id: 422
        get() { // block id: 424
            ();
            VArray<Int8, $3>(repeat: Int8(Int8(-124)));
            var_1734919229696_919
        }
        set(Value) { // block id: 436
            var_1734919229696_919 = Value
        }
    }

    @Frozen
    public prop var_1734919229696_761: Int { // block id: 762
        get() { // block id: 764
            Int64(Int16(13))
        }
    }
    static mut prop var_1734919229696_919: VArray<Int8, $3> { // block id: 920
        get() { // block id: 922
            VArray<Int8, $3>(repeat: Int8(111))
        }
        set(Value) { // block id: 933
            Int8(Int8(-57));
            ()
        }
    }
}

public func func_1734919229696_403(param_1734919229696_404: VArray<Bool, $8>): Int8 { // block id: 405
    Class_1734919229696_409.var_1734919229696_421[1]
}

func func_1734919229696_463(param_1734919229696_464: (String, Unit, Bool) -> Int16): Class_1734919229696_409 { // block id: 469
    var var_1734919229696_484: Int32 = Int32(Int32(UInt8(UInt8(Int8(-85)))));
    try { // block id: 471
        try { // block id: 473
            var_1734919229696_476 |= var_1734919229696_476
            ();
            Class_1734919229696_409()
        } catch (_) { // block id: 481
            var_1734919229696_484 <<= ((Int32(-67)) & 7)
            var var_1734919229696_493: Int8 = Int8(29);
            var var_1734919229696_497: Int8 = Int8(123);
            VArray<Int8, $3>(repeat: var_1734919229696_493);
            var_1734919229696_500
        }
    } catch (e: Exception) { // block id: 502
        [var_1734919229696_507, Float32(48.0), Float32(40.0), Float32(-95.0), Float32(-83.0), var_1734919229696_507,
            var_1734919229696_507, var_1734919229696_507, var_1734919229696_507, Float32(11.0)][8];
        if (var_1734919229696_46) { // block id: 521
            ();
            if (var_1734919229696_46) {
                VArray<Bool, $8>({i => true})
            } else {
                var_1734919229696_440
            };
            ()
        } else if (var_1734919229696_539) { // block id: 547
            let var_1734919229696_549: Int8 = Int8(25);
            var_1734919229696_549;
            var_1734919229696_484 ^= var_1734919229696_484
            var_1734919229696_556++
        };
        (var_1734919229696_564 ?? Class_1734919229696_409())
    } finally { // block id: 568
        var var_1734919229696_571: Struct_1734919229696_274 = Struct_1734919229696_274();
        var_1734919229696_571.var_1734919229696_574
    }
}

@Deprecated
const func func_1734919229696_577(optionalParam_1734919229696_15: String, namedParam_1734919229696_17: Unit,
    namedParam_1734919229696_18: Bool): Int16 { // block id: 19
    const func func_1734919229696_25(param_1734919229696_26: Int64): Unit { // block id: 27
        ();
        var_1734919229696_30;
        const func func_1734919229696_33<T0, T1, T2>(): Unit { // block id: 34

        }

        func_1734919229696_33<UInt16, Rune, UInt16>()
    };

    const func func_1734919229696_21(param_1734919229696_22: Int8): Unit { // block id: 23
        const var_1734919229696_36: Int = 5;
        func_1734919229696_25(var_1734919229696_36)
    };

    func_1734919229696_21(37);
    51.0;
    19
}

public open class Class_1734919229696_754 <: Class_1734919229696_409 & Interface_1734919229696_416<UInt8, VArray<Int8, $3>> {
    public init() { // block id: 756

    }
}

internal func func_1734919229696_241(param_1734919229696_242: Unit): Int64 { // block id: 243
    const var_1734919229696_258: UInt16 = 66;
    let var_1734919229696_278: Struct_1734919229696_274 = Struct_1734919229696_274();
    let var_1734919229696_302: (Struct_1734919229696_274, Float64, Class_1734919229696_245, Struct_1734919229696_274) = (Struct_1734919229696_274(),
        Float64(-124.0), Class_1734919229696_245(), Struct_1734919229696_274(func_1734919229696_9,
            ((UInt8(UInt8(99)) & 127)..=(UInt8(UInt8(158)) & 127) : (Int64(-123) | 1))));
    func func_1734919229696_249(): Class_1734919229696_245 { // block id: 250
        var var_1734919229696_264: UInt32 = UInt32(69);
        var_1734919229696_253 -= if (var_1734919229696_258 <= UInt16(218)) { // block id: 261
            var_1734919229696_264 += var_1734919229696_95
            var var_1734919229696_270: Int64 = Int64(-55);
            var_1734919229696_253 ** var_1734919229696_270;
            var_1734919229696_253
        } else if (var_1734919229696_278.var_1734919229696_281) { // block id: 283
            var_1734919229696_30;
            var_1734919229696_253
        } else { // block id: 286
            if (true) {
                ((Int64(Int64(91)) & 127)..(Int64(Int64(-89)) & 127) : (Int64(92) | 1))
            } else {
                ((Int64(Int64(61)) & 127)..=(Int64(Int64(-58)) & 127) : (Int64(-60) | 1))
            };
            ();
            var_1734919229696_253
        };
        var var_1734919229696_722: (Range<Int32>, VArray<Unit, $2>, Range<UInt64>, Class_1734919229696_245, Int64, Rune, 
            Int16) = (((Int32(Int32(Int8(Int8(-99)))) & 127)..(Int32(Int32(92)) & 127) : (Int64(UInt16(Int16(-51))) | 1)),
            VArray<Unit, $2>({i => ()}), ((UInt64(UInt64(229)) & 127)..(UInt64(UInt64(UInt64(Int16(-86)))) & 127) : (Int64(-108) |
                1)), Class_1734919229696_245(), Int64(UInt16(153)), r'v', Int16(UInt8(128)));
        (Option<Class_1734919229696_245>.Some(var_1734919229696_302[2]) ?? var_1734919229696_722[3])
    };

    func_1734919229696_249().func_1734919229696_749();
    var var_1734919229696_798: Int16 = Int16(UInt16(Int8(UInt8(125))));
    UInt64((var_1734919229696_798 & Int16(-69)));
    let var_1734919229696_833: VArray<Unit, $2> = [(), ()];
    var var_1734919229696_840: Class_1734919229696_245 = Class_1734919229696_245();
    if (var_1734919229696_46) { // block id: 806
        let var_1734919229696_852: VArray<Bool, $8> = [((((Int32(Int32(21)) & 127)..(Int32(Int32(3)) & 127) : (Int64(119) |
                1)), VArray<Unit, $2>({i => ()}), ((UInt64(UInt64(167)) & 127)..=(UInt64(UInt64(62)) & 127) : (Int64(45) |
                1)), Class_1734919229696_245(), Int64(Int64(-112)), r'q', Int16(53)) is UInt64),
            (Option<Array<UInt64>>.Some(
            [UInt64(171), UInt64(219), UInt64(84), UInt64(58), UInt64(123), UInt64(36), UInt64(123), UInt64(239),
                UInt64(37), UInt64(45)]) is Range<Int8>), false, (((Int64(94), UInt32(60)) is UInt8) is VArray<Bool, $8>),
            false, (Int32(-116) is Float32), false, true];
        if (true) { // block id: 809
            Class_1734919229696_409();
            VArray<Bool, $8>({i => true})
        } else if (var_1734919229696_539) { // block id: 821
            var_1734919229696_30;
            var var_1734919229696_825: Range<Int32> = ((Int32(Int32(101)) & 127)..=(Int32(Int32(Int32(UInt8(46)))) & 127) : (Int64(119) |
                1));
            (var_1734919229696_825, var_1734919229696_833, ((UInt64(var_1734919229696_476) & 127)..(UInt64(var_1734919229696_476) &
                    127) : (Int64(-75) | 1)), var_1734919229696_840, Int64(-38), r'2', var_1734919229696_798);
            if (true) {
                var_1734919229696_440
            } else {
                var_1734919229696_440
            }
        } else { // block id: 849
            var_1734919229696_67;
            var_1734919229696_852
        };
        match (Class_1734919229696_245()) {
            case _: UInt64 =>
                var_1734919229696_833;
                var_1734919229696_893

            case _ =>
                var_1734919229696_30;
                var_1734919229696_893
        }
    } else { // block id: 901
        if (var_1734919229696_534) { // block id: 904
            var_1734919229696_840;
            var_1734919229696_893 + var_1734919229696_893
        } else { // block id: 909
            var_1734919229696_911;
            var_1734919229696_893
        }
    }
}

main(): Int64 {
    try {
        var loopTimeVar_1734919229696_120: Int = 0;
        UInt32(86) + func_1734919229696_9(do {
            loopTimeVar_1734919229696_120++;
            break;
            var var_1734919229696_117: Int32 = Int32(-39);
            var_1734919229696_117--
        } while ((var_1734919229696_46) && loopTimeVar_1734919229696_120 < 100));
        var var_1734919229696_175: Int32 = Int32(Int8(UInt8(UInt8(31))));
        var loopTimeVar_1734919229696_239: Int = 0;
        do {
            loopTimeVar_1734919229696_239++;
            var loopTimeVar_1734919229696_231: Int64 = 0;
            while ((true) && loopTimeVar_1734919229696_231 < 100) {
                loopTimeVar_1734919229696_231++;
            };
            VArray<Unit, $2>({i => ()})[0]
        } while ((match (var_1734919229696_95) {
            case caseVar_1734919229696_137 =>
                if (false) {
                    [true, true, true, false, true, false, false, true, false, false]
                } else {
                    [var_1734919229696_46, true, var_1734919229696_46, var_1734919229696_46, var_1734919229696_46,
                        var_1734919229696_46, false, false, false, true]
                }

            case _: Range<UInt16> =>
                var_1734919229696_30;
                var_1734919229696_30;
                [false, var_1734919229696_46, var_1734919229696_46, var_1734919229696_46, var_1734919229696_46,
                    var_1734919229696_46, true, true, true, false]

            case caseVar_1734919229696_171 =>
                var_1734919229696_175 &= Int32(-21)
                if (var_1734919229696_46) {
                    [true, false, false, true, false, false, true, false, true, false]
                } else {
                    var_1734919229696_185
                }

            case _ =>
                var_1734919229696_30;
                if (false) {
                    [false, true, false, false, true, false, true, false, true, true]
                } else {
                    [false, false, true, false, false, true, true, false, false, true]
                }
        }[0]) && loopTimeVar_1734919229696_239 < 100);
        let var_1734919229696_915: (Unit) -> Int64 = func_1734919229696_241;
        () |> var_1734919229696_915
        // CRC Check All Variables
        var crcCheck = CrcCheck(5000, 32)
        crcCheck.updateBuffer(UInt64(var_1734919229696_64 * var_1734919229696_64), 64)
        crcCheck.updateBuffer(UInt64(var_1734919229696_67 * var_1734919229696_67), 64)
        crcCheck.updateBuffer(UInt64(var_1734919229696_175 * var_1734919229696_175), 64)
        crcCheck.updateBuffer(UInt64(var_1734919229696_893 * var_1734919229696_893), 64)
        crcCheck.crcCheck()
        crcCheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) {
        println("Exception: NoneValueException")
    }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        buffer = Array<Int64>(buffer_n, {i => 0})
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, {i => 0})
        var byte_c = 1
        var byte_index = 0
        while (value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[(i + buffer_index) % buffer.size] = byteArray[i + byte_index]
            i++
        }
        buffer_index = (buffer_index + i) % buffer.size
    }

    func updateBuffer(input: Bool, byte_n: Int64): Unit {
        if (input == true) {
            updateBuffer(1, byte_n)
        } else {
            updateBuffer(0, byte_n)
        }
    }

    func updateBuffer(input: Rune, byte_n: Int64): Unit {
        updateBuffer(UInt64(UInt32(input)), byte_n)
    }

    func updateBuffer(input: String, byte_n: Int64): Unit {
        for (c in input) {
            updateBuffer(c, byte_n)
        }
    }

    func updateBuffer(input: Unit, byte_n: Int64): Unit {
        updateBuffer(input.toString(), byte_n)
    }

    func updateBuffer(input: Any, byte_n: Int64): Unit {
        if (input is Hashable) {
            match (input as Hashable) {
                case Some(v) => updateBuffer(UInt64(v.hashCode()), byte_n)
                case _ => updateBuffer(1, byte_n)
            }
        } else if (input is ToString) {
            match (input as ToString) {
                case Some(v) => updateBuffer(v.toString(), byte_n)
                case _ => updateBuffer(1, byte_n)
            }
        } else {
            updateBuffer(1, byte_n)
        }
    }
    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, {i => 0})
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2 ** 2 * crc_output[i] + 2 ** 1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}

extend Class_1734919229696_245 {}
