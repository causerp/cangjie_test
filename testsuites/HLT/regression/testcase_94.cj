/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args 

public var var_1658797067096_170 : Int32 = Int32(-4)
let var_1658797067096_217 : ?Rune = (Option<Rune>.None as Rune)
public let var_1658797067096_235 : Rune = r'6'


public open class Class_1658797067096_257<T0, T1, T2> {
    public init() { // block id: 259

    }
;
    static let var_1658797067096_262 : Bool = false;
    public let var_1658797067096_272 : Int64 = 126
}

main(): Int64 {
    try {
        let var_1658797067096_46 : Range<Int8> = ((Int8(66)&127)..=(Int8(UInt8(229))&127):((70|1)));
        let var_1658797067096_182 : UInt64 = UInt64(69);
        let var_1658797067096_190 : Int16 = Int16(UInt16(Int8(17)));
        func func_1658797067096_11<T0, T1>(optionalParam_1658797067096_12 ! : Int8 = Int8(UInt8(UInt8(UInt8(Int8(-58))))), optionalParam_1658797067096_18 ! : Int8 = Int8(UInt8(UInt8(Int8(60)))), optionalParam_1658797067096_23 ! : Bool = (Int32(Int32(66)) is Int16)) : Option<Rune> where T1 <: Class_1658797067096_257<Int64, Range<UInt8>, Float64> { // block id: 27
            let var_1658797067096_132 : UInt32 = UInt32(Int8(Int8(-42)));
            let var_1658797067096_141 : (Int32, Int16, Float32, UInt64) = (Int32(32), Int16(UInt8(UInt8(112))), Float32(Float32(-2.0)), UInt64(UInt64(UInt64(UInt32(251)))));
            let var_1658797067096_156 : (Int32, Int16, Float32, UInt64) = (Int32(-127), Int16(62), Float32(Float32(-112.0)), UInt64(Int64(Int8(UInt8(150)))));
            var var_1658797067096_175 : UInt64 = UInt64(129);
            let var_1658797067096_187 : Int32 = Int32(116);
            try { // block id: 41
                let var_1658797067096_43 : Unit = ();
                var_1658797067096_43;
                var_1658797067096_46;
                var var_1658797067096_53 : Array<(Int32, Int16, Float32, UInt64)> = [(Int32(UInt16(100)), Int16(-48), Float32(-98.0), UInt64(40)), (Int32(Int8(Int8(55))), Int16(-79), Float32(58.0), UInt64(Int64(UInt32(21)))), (Int32(UInt16(Int8(-27))), Int16(-15), Float32(-105.0), UInt64(48)), (Int32(UInt8(57)), Int16(-125), Float32(35.0), UInt64(Int32(75))), (Int32(-34), Int16(UInt16(UInt8(203))), Float32(Float32(-97.0)), UInt64(202)), (Int32(UInt32(204)), Int16(75), Float32(105.0), UInt64(64)), (Int32(Int16(UInt16(57))), Int16(70), Float32(-45.0), UInt64(98)), (Int32(-38), Int16(Int16(Int8(51))), Float32(61.0), UInt64(155)), (Int32(Int32(-73)), Int16(-42), Float32(-98.0), UInt64(UInt64(202))), (Int32(55), Int16(UInt16(Int16(-33))), Float32(Float32(-71.0)), UInt64(Int8(UInt8(121))))];
                var_1658797067096_53
            } finally { // block id: 129
                ((var_1658797067096_132&127)..(UInt32(217)&127):((33|1)));
                ((UInt16(78)&127)..=(UInt16(60)&127):(126|1));
                [var_1658797067096_141, var_1658797067096_141, var_1658797067096_141, var_1658797067096_156, var_1658797067096_156, var_1658797067096_156, (var_1658797067096_170, Int16(43), Float32(27.0), var_1658797067096_175), (Int32(97), Int16(60), Float32(39.0), var_1658797067096_182), var_1658797067096_156, (var_1658797067096_187, var_1658797067096_190, Float32(-63.0), var_1658797067096_182)]
            }[4][1];
            if (optionalParam_1658797067096_23) { // block id: 200
                Option<Rune>.Some(r'h');
                [(), (), (), (), (), (), (), (), (), ()][3];
                var loopTimeVar_1658797067096_210 : Range<UInt64> = ((UInt64(UInt8(212))&127)..(UInt64(34)&127):((50|1)));
                for (i in loopTimeVar_1658797067096_210 where optionalParam_1658797067096_23) {

                }
            };
            var_1658797067096_217
        }
;
        let var_1658797067096_221 : Int8 = Int8(-15);
        var var_1658797067096_224 : Bool = (((UInt16(103)&127)..(UInt16(109)&127):((-64)|1)) is Bool);
        (func_1658797067096_11<UInt16, Class_1658797067096_257<Int64, Range<UInt8>, Float64>>(optionalParam_1658797067096_12 : var_1658797067096_221, optionalParam_1658797067096_23 : var_1658797067096_224) ?? if (var_1658797067096_224) { // block id: 229
            var_1658797067096_190;
            if (true) { r'U' } else { var_1658797067096_235 } 
        } else if (false) { // block id: 238
            Int32(-96) << ((var_1658797067096_170) & 7);
            r'g'
        } else { // block id: 243
            if (false) { var_1658797067096_235 } else { var_1658797067096_235 } 
        });
        func_1658797067096_11<UInt16, Class_1658797067096_257<Int64, Range<UInt8>, Float64>>(optionalParam_1658797067096_12 : (Option<Int8>.None ?? Int8(-100)), optionalParam_1658797067096_23 : Class_1658797067096_257<Int64, Range<UInt8>, Float64>.var_1658797067096_262);
        let var_1658797067096_269 : Class_1658797067096_257<Int64, Range<UInt8>, Float64> = Class_1658797067096_257<Int64, Range<UInt8>, Float64>();
        Int64(var_1658797067096_182) - (var_1658797067096_269.var_1658797067096_272)
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var_1658797067096_170*var_1658797067096_170), 64)
        crccheck.updateBuffer(UInt64(var_1658797067096_182*var_1658797067096_182), 64)
        crccheck.updateBuffer(UInt64(var_1658797067096_190*var_1658797067096_190), 64)
        crccheck.updateBuffer(UInt64(var_1658797067096_221*var_1658797067096_221), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
