/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %overflow_wrapping %cmp_opt %f -o %output


var var65: Bool = (Class16() is Range<UInt32>)
public let var88: Unit = ()
let var134: ?Unit = Option<Unit>.None
let var165: UInt16 = UInt16(Int8(UInt8(83)))
public var var187: Range<Int32> = (Int32(Int16(-16)) & 127)..(Int32(Int16(UInt8(Int8(14)))) & 127 ):( (Int64(UInt64(UInt8(Int8(119))))|
    1))
public var var251: Bool = false
var var274: Range<Int16> = ((Int16(74) & 127)..=(Int16(112) & 127 ):( (49 | 1)))
public var var288: ??Unit = Option<Option<Unit>>.None
public var var298: Int64 = 2
public var var348: Range<UInt64> = ((UInt64(70) & 127)..=(UInt64(181) & 127 ):( (Int64(UInt32(140)) | 1)))
var var379: (Range<Int32>,Bool) = ((Int32(UInt8(Int8(-119))) & 127)..=(Int32(UInt32(UInt16(41))) & 127 ):( (Int64(Int64(Int8(106)))|
        1)), true)
public let var443: Unit = ()
var var482: Float64 = 34.0
public var var631: UInt16 = UInt16(Int8(Int8(-85)))
public let var690: Interface24 = Class490<Range<Int16>>()
public let var743: (Range<Int32>,Bool) = (((Int32(-6) & 127)..=(Int32(-6) & 127 ):( (-26) | 1)), true)
public var var775: UInt8 = UInt8(149)
public let var845: Interface22 = Class16()
public let var862: Range<UInt64> = ((UInt64(UInt32(55)) & 127)..=(UInt64(Int32(-9)) & 127 ):( (Int64(Int32(98)) | 1)))
var var925: UInt32 = UInt32(227)
var var945: Int64 = Int64(UInt16(121))
public var var1087: UInt8 = UInt8(Int8(Int8(Int8(-1))))
public var var1093: (Int32,Range<UInt8>,Float64,(Range<Int32>,Bool),UInt64,UInt32,Range<UInt32>,UInt16) = (Int32(UInt32(247)),
    ((UInt8(249) & 127)..=(UInt8(218) & 127 ):( 73 | 1)), Float64(Float32(Float32(Float32(-6.0)))), ((Int32(Int16(-118)) & 127)..(Int32(Int16(108))&
            127 : (Int64(UInt16(60)) | 1)), (((UInt32(81) & 127)..=(UInt32(247) & 127 ):( (-75) | 1)) is Option<Int16>)),
    UInt64(46), UInt32(238), ((UInt32(116) & 127)..(UInt32(UInt8(Int8(38))) & 127 ):( (Int64(UInt32(Int16(-120))) | 1))),
    UInt16(UInt16(Int16(13))))
let var1133: Range<Int8> = ((Int8(-66) & 127)..=(Int8(-3) & 127 ):( (Int64(UInt64(Int8(Int8(57)))) | 1)))
public var var1142: Range<Int32> = ((Int32(89) & 127)..(Int32(32) & 127 ):( (Int64(UInt8(UInt8(UInt8(74)))) | 1)))
public var var1152: Int32 = Int32(UInt16(201))
public var var1185: Bool = (((UInt32(31) & 127)..(UInt32(114) & 127 ):( 57 | 1)) is (Range<Int32>,Bool))
public let var1190: UInt16 = UInt16(225)
var var1198: Int16 = Int16(Int16(59))
var var1214: Range<UInt32> = ((UInt32(171) & 127)..(UInt32(Int32(UInt32(Int8(19)))) & 127 ):( ((-61) | 1)))
public var var1290: ?Bool = (UInt16(199) as Bool)
public var var1323: Unit = ()
var var1385: String = "|Zv3qE5sN>"
var var1493: (Int32,Range<UInt8>,Float64,(Range<Int32>,Bool),UInt64,UInt32,Range<UInt32>,UInt16) = (Int32(UInt8(UInt8(90))),
    ((UInt8(32) & 127)..=(UInt8(226) & 127 ):( 55 | 1)), (-24.0), (((Int32(20) & 127)..=(Int32(Int16(-92)) & 127 ):( (48 | 1))),
        false), UInt64(Int32(Int16(-22))), UInt32(241), ((UInt32(201) & 127)..(UInt32(212) & 127 ):( 80 | 1)), UInt16(177))
public let var1515: Range<UInt64> = ((UInt64(77) & 127)..=(UInt64(Int32(112)) & 127 ):( (Int64(UInt32(184)) | 1)))
public var var1571: UInt32 = UInt32(233)
let var1608: ?(UInt8,(Int32,Range<UInt8>,Float64,(Range<Int32>,Bool),UInt64,UInt32,Range<UInt32>,UInt16),Int8,Range<UInt64>,
    Range<Int8>,Range<Int32>,Array<UInt8>,Int32) = (UInt16(169) as (UInt8,(Int32,Range<UInt8>,Float64,(Range<Int32>,Bool),
    UInt64,UInt32,Range<UInt32>,UInt16),Int8,Range<UInt64>,Range<Int8>,Range<Int32>,Array<UInt8>,Int32))
var var1696: UInt64 = UInt64(145)
public let var1833: ??Unit = (((Int8(-53) & 127)..=(Int8(-17) & 127 ):( (-112) | 1)) as Option<Unit>)
public let var1880: ?Unit = Option<Unit>.None
var var2114: String = ###"xzM0DSkQ3>"###
public let var2155: Int16 = Int16(UInt16(UInt16(UInt16(132))))
var var2161: Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
public let var2306: (Range<Int8>,UInt64,Range<UInt8>,(UInt32,Int32,UInt8,Unit,Range<Int8>),Range<UInt8>) = (Int8(-10) &
        127)..(Int8(UInt8(UInt8(225))) & 127 ):( ((-116) | 1))), UInt64(219), ((UInt8(51) & 127)..=(UInt8(156) & 127 ):( 29 | 1)), (UInt32(157),
        Int32(UInt16(61)), UInt8(UInt8(38)), (), ((Int8(53) & 127)..=(Int8(-111) & 127 ):( 30 | 1))), ((UInt8(64) & 127)..(UInt8(244)&
        127) : 126 | 1))
public let var2343: (UInt32,Int32,UInt8,Unit,Range<Int8>) = (UInt32(158), Int32(16), UInt8(Int8(UInt8(Int8(96)))), (), (Int8(94)&
        127)..(Int8(29) & 127 ):( ((-89) | 1))))
var var2424: Range<UInt8> = ((UInt8(91) & 127)..=(UInt8(67) & 127 ):( 52 | 1))
public var var2431: UInt64 = UInt64(Int32(99))
var var2504: Int16 = Int16(UInt16(78))
let var2518: Range<UInt16> = ((UInt16(Int16(Int8(Int8(-111)))) & 127)..=(UInt16(50) & 127 ):( (Int64(Int32(Int8(-68))) | 1)))
public let var2554: Array<Range<Int16>> = [((Int16(6) & 127)..=(Int16(15) & 127 ):( 21 | 1)),
((Int16(55) & 127)..(Int16(120) & 127 ):( (-87) | 1)), ((Int16(UInt16(67)) & 127)..(Int16(Int8(Int8(84))) & 127 ):( ((-67) | 1))),
((Int16(Int16(UInt8(40))) & 127)..=(Int16(-56) & 127 ):( (Int64(UInt32(165)) | 1))),
((Int16(88) & 127)..(Int16(-122) & 127 ):( 0 | 1)), ((Int16(63) & 127)..(Int16(-121) & 127 ):( (Int64(UInt32(UInt32(14))) | 1))),
((Int16(Int8(-125)) & 127)..=(Int16(-85) & 127 ):( ((-127) | 1))),
((Int16(58) & 127)..(Int16(Int8(UInt8(197))) & 127 ):( (Int64(Int64(UInt8(90))) | 1))),
((Int16(-90) & 127)..=(Int16(12) & 127 ):( (Int64(UInt64(UInt32(70))) | 1))),
((Int16(Int16(Int8(-118))) & 127)..=(Int16(UInt16(Int16(-50))) & 127 ):( (111 | 1)))]
public var var2761: (UInt8,Int32,Float64,Bool) = (UInt8(245), Int32(113), 1.0, true)
var var2791: Int32 = Int32(Int8(103))
public let var2807: ??Bool = Option<Option<Bool>>.None
public var var2885: Array<Interface24> = Array<Interface24>(10) {i => Class16()}
let var2922: ?UInt64 = (((Int8(-75) & 127)..=(Int8(125) & 127 ):( (-122) | 1)) as UInt64)
public var var2957: Range<UInt32> = ((UInt32(91) & 127)..(UInt32(112) & 127 ):( (Int64(Int8(110)) | 1)))
var var3026: (UInt32,Int32,UInt8,Unit,Range<Int8>) = (UInt32(Int32(UInt8(198))), Int32(94), UInt8(Int8(-34)), (), (Int8(Int8(31))&
(        127)..=(Int8(-39) & 127 ):( ((-118) | 1))))
public var var3097: Bool = (false is Option<Option<Bool>>)
public var var3153: ??Bool = Option<Option<Bool>>.None
public var var3179: (Range<UInt16>,Unit,Range<UInt32>,Range<UInt64>,Float64,Range<UInt16>) = (((UInt16(210) & 127)..(UInt16(UInt8(163))&
)        127 : (Int64(UInt16(UInt16(129))) | 1)), (), ((UInt32(29) & 127)..=(UInt32(112) & 127 ):( (37 | 1))), (UInt64((-92)) &
(        127)..(UInt64(193) & 127 ):( (Int64(UInt32(Int32(13))) | 1))), Float64(Float32(Float32(-29.0))), ((UInt16(163) & 127)..(UInt16(170)&
)        127 : (-59) | 1))
public var var3328: ??(Range<Int64>,Range<Int8>,Range<UInt64>,UInt8,UInt32,Int32) = Option<Option<(Range<Int64>,Range<Int8>,
        Range<UInt64>,UInt8,UInt32,Int32)>>.None
var var3381: Rune = 'w'
public var var3456: Range<Int8> = ((Int8(-123) & 127)..=(Int8(Int8(14)) & 127 ):( (Int64(UInt32(191)) | 1)))
public var var3604: (UInt32,Int32,UInt8,Unit,Range<Int8>) = (UInt32(Int32(UInt32(39))), Int32(91), UInt8(UInt8(20)), (),
    ((Int8(55) & 127)..=(Int8(UInt8(UInt8(110))) & 127 ):( (Int64(Int8(-70)) | 1))))
var var3758: Float32 = Float32(-47.0)
var var3769: Option<Int32> = Option<Int32>.None
public var var3783: Int32 = Int32(UInt8(Int8(-121)))
var var3826: Int64 = 34
var var3843: Int64 = (-60)
public var var4012: (Range<UInt16>,Unit,Range<UInt32>,Range<UInt64>,Float64,Range<UInt16>) = (((UInt16(249) & 127)..(UInt16(98)&
)        127 : (-19) | 1), (), ((UInt32(57) & 127)..=(UInt32(240) & 127 ):( 62 | 1)), ((UInt64(62) & 127)..=(UInt64(6) & 127 ):( (-8)|
)        1), Float64(Float32(Float32(11.0))), ((UInt16(27) & 127)..(UInt16(156) & 127 ):( 93 | 1)))
public let var4209: Interface20<Int64> = Class16()
public var var4346: Option<UInt32> = (UInt32(2) as UInt32)
public let var4412: Unit = ()
var var4421: Range<Int64> = (((-58) & 127)..(Int64(Int16(61)) & 127 ):( (Int64(UInt8(106)) | 1)))
var var4437: UInt32 = UInt32(Int8(Int8(84)))
public var var4456: Array<Range<Int16>> = [((Int16(-51) & 127)..(Int16(-34) & 127 ):( 14 | 1)),
((Int16(87) & 127)..(Int16(-79) & 127 ):( 101 | 1)), ((Int16(106) & 127)..(Int16(96) & 127 ):( 78 | 1)),
((Int16(-45) & 127)..(Int16(49) & 127 ):( (-31) | 1)), ((Int16(-12) & 127)..=(Int16(1) & 127 ):( 8 | 1)),
((Int16(-5) & 127)..(Int16(-56) & 127 ):( 43 | 1)), ((Int16(-29) & 127)..(Int16(-58) & 127 ):( (-86) | 1)),
((Int16(13) & 127)..(Int16(-117) & 127 ):( (-125) | 1)), ((Int16(125) & 127)..(Int16(-23) & 127 ):( 99 | 1)),
((Int16(18) & 127)..(Int16(85) & 127 ):( (-34) | 1))]
public interface Interface24 {}

public interface Interface23 <: Interface24 {}

public interface Interface22 <: Interface23 {}

public interface Interface25 {
    static func func97(namedParam98!: Range<UInt8>, namedParam99!: Int32, namedParam100!: Float64): UInt32 { // block id: 101
        let var264: Float32 = Float32(Float32(Float32(Float32(Float32(-97.0)))))
        let var294: Int32 = Int32(UInt16(25))
        func func104<T0, T1>(param105: Interface24, param106: Range<Int32>, namedParam107!: Rune): Bool where T0 <: Float64,
            T1 <: Option<(Int32,Range<UInt8>,Float64,(Range<Int32>,Bool),UInt64,UInt32,Range<UInt32>,UInt16)> { // block id: 108
            let var117: ?Unit = Option<Unit>.None;
            try { // block id: 110
                var117.getOrThrow();
                try (resource = Class490<Range<Int16>>()) { // block id: 120
                } finally { // block id: 121
                    let var123: Unit = ()
                    var123
                    var123
                }
                var var256: (Interface25) -> Range<Int32> = func127
                Class16() |> var256
            } finally { // block id: 259
                try (resource = Class490<Range<Int16>>()) { // block id: 261
                    Float64(var264) ** Float64(Int32(var264) & 3)
                    ()
                } catch (e: Exception) { // block id: 272
                    var274
                    ()
                } finally { // block id: 280
                    ()
                }
                (var288 ?? Option<Unit>.None)
                ((Int32(110) & 127)..(var294 & 127 ):( (var298 | 1)))
            }
            var var306: ?Unit = Option<Unit>.Some(());
            var var310: Unit = ()
            (var306 ?? var310)
            let var338: Bool = false
            let var367: String = "=dBB+zEW*}"
            match (match (var306) {
                case _: UInt8 =>
                    var310
                    var310
                    ((UInt64(63) & 127)..(UInt64(217) & 127 ):( (-113) | 1))

                case _: Range<Int64> =>
                    ()
                    ()
                    ((UInt64(107) & 127)..=(UInt64(226) & 127 ):( (var298 | 1)))

                case caseVar334 =>
                    if (var338) {
                        param106
                    } else {
                        ((Int32(70) & 127)..=(Int32(-32) & 127 ):( (var298 | 1)))
                    }
                    if (var338) {
                        var348
                    } else {
                        ((UInt64(178) & 127)..(UInt64(248) & 127 ):( (-60) | 1))
                    }

                case _: Option<Unit> => ((UInt64(244) & 127)..(UInt64(122) & 127 ):( (-3) | 1))

                case _ => var348
            }) {
                case _ =>
                    var310
                    var367
                    (((Int32(102) & 127)..=(Int32(-108) & 127 ):( 78 | 1)), false)

                case caseVar374: UInt64 =>
                    UInt8(180)
                    var310
                    var379

                case _ =>
                    Int64(var165) ** UInt64(UInt16(140) & 3)
                    if (var251) {
                        (((Int32(-80) & 127)..=(Int32(4) & 127 ):( 101 | 1)), var251)
                    } else {
                        (((namedParam99 & 127)..=(namedParam99 & 127 ):( (82 | 1))), true)
                    }
            }[1]
        }

        var var410: Interface24 = Class16();
        var var619: (Interface25) -> Range<Int32> = {lambdaParameter622: Interface25 => ((Int32(-64) & 127)..(Int32(-107) &
)                127 : (-79) | 1)}
        var loopTimeVar640: Int64 = 0
        while ((func104<Float64, Option<(Int32,Range<UInt8>,Float64,(Range<Int32>,Bool),UInt64,UInt32,Range<UInt32>,
                    UInt16)>>(var410, ((Int32(13) & 127)..(Int32(-20) & 127 ):( (var298 | 1))),
                namedParam107: func1822(UInt8(183), var264, var619))) && loopTimeVar640 < 100) {
            loopTimeVar640++
            var loopTimeVar638: Int64 = 0
            while ((true) && loopTimeVar638 < 100) {
                loopTimeVar638++
                var631 |= var165
                var443
            }
        }
        let var4397: UInt8 = UInt8(UInt8(52))
        ((var134 |> func647) ?? match (match (var775) {
            case 123 =>
                23.0 ** Float64(Int32((-51.0)) & 3)
                if (true) {
                    ((UInt8(197) & 127)..(var775 & 127 ):( (102 | 1)))
                } else {
                    ((UInt8(213) & 127)..(UInt8(125) & 127 ):( 20 | 1))
                }

            case caseVar4369: Array<Interface24> =>
                var298 <<= ((var298) & 7)
                var2424

            case 213 | 158 | 24 | 193 =>
                if (false) {
                    ((var165 & 127)..=(UInt16(77) & 127 ):( (var298 | 1)))
                } else {
                    ((UInt16(235) & 127)..=(UInt16(15) & 127 ):( 29 | 1))
                }
                if (var251) {
                    (((Int8(5) & 127)..(Int8(-44) & 127 ):( (-31) | 1)), UInt64(244), ((UInt8(217) & 127)..=(UInt8(248) & 127 ):( (-46)|
)                            1), var3604, var2424)
                } else {
                    var2306
                }
                ((UInt8(223) & 127)..(var4397 & 127 ):( ((-76) | 1)))

            case _ =>
                var443
                if (var251) {
                    namedParam98
                } else {
                    ((UInt8(113) & 127)..(UInt8(49) & 127 ):( (-26) | 1))
                }
        }) {
            case _: (UInt32,Int32,UInt8,Unit,Range<Int8>) =>
                var4412
                var2161
                var1571

            case caseVar4418 =>
                var4421
                UInt32(224)

            case _ =>
                ((UInt64(199) & 127)..(var1696 & 127 ):( ((-71) | 1)))
                var4437 & UInt32(39)
        })
    }
}

public interface Interface21 <: Interface22 & Interface25 {}

public interface Interface20<T0> <: Interface21 & Interface23 where T0 <: Int64 {}

public interface Interface19 <: Interface20<Int64> & Interface21 {
    static func func97(namedParam98!: Range<UInt8>, namedParam99!: Int32, namedParam100!: Float64): UInt32 { // block id: 101
        let var264: Float32 = Float32(Float32(Float32(Float32(Float32(-97.0)))))
        let var294: Int32 = Int32(UInt16(25))
        func func104<T0, T1>(param105: Interface24, param106: Range<Int32>, namedParam107!: Rune): Bool { // block id: 108
            let var117: ?Unit = Option<Unit>.None;
            try { // block id: 110
                var117.getOrThrow();
                try (resource = Class490<Range<Int16>>()) { // block id: 120
                } finally { // block id: 121
                    let var123: Unit = ()
                    var123
                    var123
                }
                var var256: (Interface25) -> Range<Int32> = func127
                Class16() |> var256
            } finally { // block id: 259
                try (resource = Class490<Range<Int16>>()) { // block id: 261
                    Float32(Float64(var264) ** Float64(Int32(var264) & 3))
                    ()
                } catch (e: Exception) { // block id: 272
                    var274
                    ()
                } finally { // block id: 280
                    ()
                }
                (var288 ?? Option<Unit>.None)
                ((Int32(110) & 127)..(var294 & 127 ):( (var298 | 1)))
            }
            var var306: ?Unit = Option<Unit>.Some(());
            var var310: Unit = ()
            (var306 ?? var310)
            let var338: Bool = false
            let var367: String = "=dBB+zEW*}"
            match (match (var306) {
                case _: UInt8 =>
                    var310
                    var310
                    ((UInt64(63) & 127)..(UInt64(217) & 127 ):( (-113) | 1))

                case _: Range<Int64> =>
                    ()
                    ()
                    ((UInt64(107) & 127)..=(UInt64(226) & 127 ):( (var298 | 1)))

                case caseVar334 =>
                    if (var338) {
                        param106
                    } else {
                        ((Int32(70) & 127)..=(Int32(-32) & 127 ):( (var298 | 1)))
                    }
                    if (var338) {
                        var348
                    } else {
                        ((UInt64(178) & 127)..(UInt64(248) & 127 ):( (-60) | 1))
                    }

                case _: Option<Unit> => ((UInt64(244) & 127)..(UInt64(122) & 127 ):( (-3) | 1))

                case _ => var348
            }) {
                case _ =>
                    var310
                    var367
                    (((Int32(102) & 127)..=(Int32(-108) & 127 ):( 78 | 1)), false)

                case caseVar374: UInt64 =>
                    UInt8(180)
                    var310
                    var379

                case _ =>
                    UInt16(Int64(var165) ** (140 & 3))
                    if (var251) {
                        (((Int32(-80) & 127)..=(Int32(4) & 127 ):( 101 | 1)), var251)
                    } else {
                        (((namedParam99 & 127)..=(namedParam99 & 127 ):( (82 | 1))), true)
                    }
            }[1]
        }

        var var410: Interface24 = Class16();
        var var619: (Interface25) -> Range<Int32> = {lambdaParameter622: Interface25 => ((Int32(-64) & 127)..(Int32(-107) &
)                127 : (-79) | 1)}
        var loopTimeVar640: Int64 = 0
        while ((func104<Float64, Option<(Int32,Range<UInt8>,Float64,(Range<Int32>,Bool),UInt64,UInt32,Range<UInt32>,
                    UInt16)>>(var410, ((Int32(13) & 127)..(Int32(-20) & 127 ):( (var298 | 1))),
                namedParam107: func1822(UInt8(183), var264, var619))) && loopTimeVar640 < 100) {
            loopTimeVar640++
            var loopTimeVar638: Int64 = 0
            while ((true) && loopTimeVar638 < 100) {
                loopTimeVar638++
                var631 |= var165
                var443
            }
        }
        let var4397: UInt8 = UInt8(UInt8(52))
        ((var134 |> func647) ?? match (match (var775) {
            case 123 =>
                23.0 ** Float64(Int32((-51.0)) & 3)
                if (true) {
                    ((UInt8(197) & 127)..(var775 & 127 ):( (102 | 1)))
                } else {
                    ((UInt8(213) & 127)..(UInt8(125) & 127 ):( 20 | 1))
                }

            case caseVar4369: Array<Interface24> =>
                var298 <<= ((var298) & 7)
                var2424

            case 213 | 158 | 24 | 193 =>
                if (false) {
                    ((var165 & 127)..=(UInt16(77) & 127 ):( (var298 | 1)))
                } else {
                    ((UInt16(235) & 127)..=(UInt16(15) & 127 ):( 29 | 1))
                }
                if (var251) {
                    (((Int8(5) & 127)..(Int8(-44) & 127 ):( (-31) | 1)), UInt64(244), ((UInt8(217) & 127)..=(UInt8(248) & 127 ):( (-46)|
)                            1), var3604, var2424)
                } else {
                    var2306
                }
                ((UInt8(223) & 127)..(var4397 & 127 ):( ((-76) | 1)))

            case _ =>
                var443
                if (var251) {
                    namedParam98
                } else {
                    ((UInt8(113) & 127)..(UInt8(49) & 127 ):( (-26) | 1))
                }
        }) {
            case _: (UInt32,Int32,UInt8,Unit,Range<Int8>) =>
                var4412
                var2161
                var1571

            case caseVar4418 =>
                var4421
                UInt32(224)

            case _ =>
                ((UInt64(199) & 127)..(var1696 & 127 ):( ((-71) | 1)))
                var4437 & UInt32(39)
        })
    }
}

public open class Class16 <: Interface19 & Resource {
    public init() { // block id: 18
    }

    public static var var28: Int64 = (-81)
    public init(param77: Int32, optionalParam78!: Interface22 = Class16(), namedParam80!: Interface21) { // block id: 81
        match (Class16()) {
            case _ =>
                UInt16(108)
                var88
        }
    }

    public static var var827: UInt8 = UInt8(163)
    static let var908: Float64 = (-26.0)
    public init(param816: Int32, namedParam817!: Range<UInt16>, optionalParam818!: Int8 = Int8(-62),
        namedParam820!: Interface20<Int64>) { // block id: 821
        var var878: (Range<Int64>,Range<Int8>,Range<UInt64>,UInt8,UInt32,Int32) = ((((-90) & 127)..=(118 & 127 ):( (Int64(UInt16(UInt8(179)))|
)                1)), ((Int8(-103) & 127)..(Int8(Int8(UInt8(139))) & 127 ):( (Int64(Int64(Int32(-48))) | 1))), (UInt64(Int8(37))&
(                127)..(UInt64(168) & 127 ):( (Int64(UInt64(1)) | 1))), UInt8(85), UInt32(127), Int32(-125))
        [var827, UInt8(111), UInt8(204), var827, var827, UInt8(11), var827, var827, UInt8(229), UInt8(131)][2] >> ((match (Class16(
            Int32(-127), optionalParam78: var845, namedParam80: Class16())) {
            case caseVar850 =>
                let var853: Float64 = (-114.0)
                var853
                ((((-14) & 127)..=(var28 & 127 ):( (var28 | 1))), ((Int8(102) & 127)..=(Int8(86) & 127 ):( (-16) | 1)), var862, UInt8(89),
                    UInt32(72), param816)

            case _ =>
                ((Int16(0) & 127)..(Int16(77) & 127 ):( 108 | 1))
                var878

            case caseVar905: Array<UInt8> =>
                var908
                var878

            case _ =>
                var88
                var var930: Range<Int64> = ((Int64(UInt64(Int32(84))) & 127)..(64 & 127 ):( (113 | 1)))
                if (true) {
                    (((19 & 127)..=(107 & 127 ):( (-27) | 1)), ((optionalParam818 & 127)..=(optionalParam818 & 127 ):( (var28 | 1))),
                        ((UInt64(254) & 127)..(UInt64(224) & 127 ):( 78 | 1)), var827, var925, Int32(99))
                } else {
                    (var930, ((Int8(-51) & 127)..(Int8(62) & 127 ):( (27 | 1))), ((UInt64(91) & 127)..(UInt64(158) & 127 ):( (var945|
)                            1)), var827, UInt32(66), param816)
                }
        }[3]) & 7)
        let var1296: (Range<UInt32>) -> Unit = func953
        var1214 |> var1296
        var loopTimeVar1328: Int64 = 0
        while ((func9([var88, (), (), (), (), (), var88, (), (), ()][9])) && loopTimeVar1328 < 100) {
            loopTimeVar1328++
            (UInt32(150), Int32(42), var1087, var1323, var1133)[3]
        }
    }

    public static var var1366: Int8 = Int8(56)
    public init(namedParam1334!: (UInt32,Int32,UInt8,Unit,Range<Int8>),
        optionalParam1335!: (Range<Int32>,Bool) = (((Int32(UInt16(UInt16(137))) & 127)..=(Int32(Int8(Int8(-5))) & 127 ):( ((-90)|
)                1)), (((UInt32(Int8(-93)) & 127)..(UInt32(Int16(-51)) & 127 ):( (Int64(Int16(100)) | 1))) is Option<Option<Unit>>)),
        namedParam1353!: UInt8) { // block id: 1354
        match (if (var1185 || var65) { // block id: 1360
            var1198 * Int16(40)
            var1366++
            Int16(-101)
        } else { // block id: 1369
            ()
            var1198
        }) {
            case -70 | -100 | -66 | 3 =>
                var827 <<= ((var1087) & 7)
                ()
                36

            case caseVar1382: (Range<Int64>,Range<Int8>,Range<UInt64>,UInt8,UInt32,Int32) =>
                var1385
                """
Q[FeU
Sa{iF%
"""
                var945

            case _ =>
                if (var65) {
                    namedParam1334
                } else {
                    namedParam1334
                }
                var var1397: UInt16 = UInt16(UInt8(Int8(-16)))
                var1397 = var1190
                4
        }
        var var1404: Aggregate959 = Aggregate959();
        var1404
        var925 /= ((UInt32(85)) | 1)
    }

    public static var var2787: Interface21 = Class16();
    public init(namedParam2676!: Interface22, namedParam2677!: Array<Range<UInt16>>) { // block id: 2678
        var var2696: UInt64 = UInt64(79)
        var var2719: Range<UInt16> = ((UInt16(Int16(UInt16(215))) & 127)..(UInt16(19) & 127 ):( (Int64(UInt32(UInt16(115))) |
)            1))
        (Option<Float64>.None ?? match (match (Option<Float64>.Some(var908)) {
            case _: Range<UInt16> =>
                (((Int32(20) & 127)..(var1152 & 127 ):( (var28 | 1))), var65)
                ((UInt64(23) & 127)..(UInt64(117) & 127 ):( (-18) | 1))
                var2696

            case caseVar2700: Float32 => var2696

            case caseVar2705: Range<UInt64> =>
                var1214
                [((var1190 & 127)..(UInt16(165) & 127 ):( (115 | 1))), ((var1190 & 127)..=(UInt16(97) & 127 ):( ((-34) | 1))),
                ((UInt16(91) & 127)..(UInt16(192) & 127 ):( 98 | 1)), var2719, ((UInt16(162) & 127)..(UInt16(18) & 127 ):( (-7) | 1)),
                ((var1190 & 127)..=(var1190 & 127 ):( (var945 | 1))), ((UInt16(109) & 127)..(var1190 & 127 ):( (79 | 1))),
                ((UInt16(149) & 127)..(UInt16(187) & 127 ):( 66 | 1)), ((var1190 & 127)..(UInt16(80) & 127 ):( (var28 | 1))),
                ((UInt16(209) & 127)..(UInt16(101) & 127 ):( (-116) | 1))]
                UInt64(13)

            case _ => UInt64(237) / ((var2696) | 1)
        }) {
            case 35 =>
                -Int16(41)
                Int32(-10)
                var908

            case _ =>
                if (false) {
                    var2761
                } else {
                    (UInt8(238), Int32(-80), (-36.0), var1185)
                }
                var1366
                var908
        })
        (if (var1185) {
            match (((Int8(-50) & 127)..(Int8(89) & 127 ):( (-93) | 1))) {
                case _: Interface21 =>
                    var2787

                    if (var65) {
                        Option<Option<Bool>>.None
                    } else {
                        Option<Option<Bool>>.Some(var1290)
                    }

                case _ =>
                    94
                    if (var65) {
                        Option<Option<Bool>>.None
                    } else {
                        var2807
                    }
            }
        } else {
            ((UInt8(198), var1152, (-60.0), var65) as Option<Bool>)
        } ?? match ((Option<Int64>.None ?? (-49))) {
            case _ =>
                var65
                var1290
        })
    }

    protected init(namedParam3043!: Option<Option<Bool>>, namedParam3044!: Bool,
        optionalParam3045!: (UInt32,Int32,UInt8,Unit,Range<Int8>) = (UInt32(Int16(-75)), Int32(UInt32(1)), UInt8(Int8(111)),
            (), ((Int8(-109) & 127)..(Int8(110) & 127 ):( 55 | 1)))) { // block id: 3055
        var loopTimeVar3132: Int64 = 0
        while ((try { // block id: 3060
                if (var1185) {
                    [true, true, false, false, true, false, true, false, false, true]
                } else {
                    [false, false, false, false, false, true, true, true, false, false]
                }
            } catch (e: Exception) { // block id: 3065
                let var3069: Array<Bool> = [true,
                ((((96 & 127)..=((-10) & 127 ):( 37 | 1)), ((Int8(50) & 127)..(Int8(-33) & 127 ):( (96 | 1))), ((UInt64(82) & 127)..(UInt64(89)&
)                            127 : 91 | 1), UInt8(26), UInt32(168), Int32(-69)) is Option<(UInt8,(Int32,Range<UInt8>,
                        Float64,(Range<Int32>,Bool),UInt64,UInt32,Range<UInt32>,UInt16),Int8,Range<UInt64>,Range<Int8>,
                        Range<Int32>,Array<UInt8>,Int32)>), true, true, false,
                (UInt32(UInt8(178)) is (Option<UInt64>, ((UInt8,(Int32,Range<UInt8>,Float64,(Range<Int32>,Bool),UInt64,
                                UInt32,Range<UInt32>,UInt16),Int8,Range<UInt64>,Range<Int8>,Range<Int32>,Array<UInt8>,
                                Int32)) -> Unit) -> Bool),
                (UInt8(59) is Option<(UInt8,(Int32,Range<UInt8>,Float64,(Range<Int32>,Bool),UInt64,UInt32,Range<UInt32>,
                        UInt16),Int8,Range<UInt64>,Range<Int8>,Range<Int32>,Array<UInt8>,Int32)>), true, false, true]
                if (false) {
                    var3069
                } else {
                    [false, var3097, true, true, false, true, var3097, false, false, var65]
                }
                if (false) {
                    [false, false, false, false, false, false, true, true, true, true]
                } else {
                    [var1185, namedParam3044, var3097, true, var1185, var1185, var3097, namedParam3044, true, var65]
                }
            }[7]) && loopTimeVar3132 < 100) {
            loopTimeVar3132++
            var65 &&= true
            if (var3097) {
                "kl$X=k]4MN"
            } else {
                var1385
            }
        }
        match (([(), (), (), (), (), (), (), (), (), ()] as Float64)) {
            case _ => if (false) {
                    (var925, Int32(125), var827, (), var1133)
                } else {
                    (var925, Int32(-4), var1087, var88, ((Int8(115) & 127)..=(Int8(-50) & 127 ):( (-34) | 1)))
                }
        }
    }

    public static var var3225: UInt16 = UInt16(18)
    private static var var3238: Interface20<Int64> = Class16();
    protected init(param3008: Range<Int64>, param3009: Option<Bool>,
        optionalParam3010!: (Interface25) -> Range<Int32> = func127) { // block id: 3014
        var var3161: Bool = (Class16(Int32(Int16(-30)),
            namedParam80: Class16(
                namedParam1334: (UInt32(109), Int32(89), UInt8(153), (), ((Int8(23) & 127)..=(Int8(-14) & 127 ):( ((-32) | 1)))),
                namedParam1353: UInt8(UInt8(41)))) is (Range<Int8>,UInt64,Range<UInt8>,(UInt32,Int32,UInt8,Unit,Range<Int8>),
            Range<UInt8>))
        var var3215: Float64 = Float64(Float32(90.0))
        match (if (UInt16(159) > UInt16(83)) { // block id: 3020
            var1323
            if (var65) {
                Class16(namedParam1334: var3026, namedParam1353: UInt8(205))
            } else {
                Class16(namedParam3043: var3153, namedParam3044: var1185)
            }
            var908
        } else if (false) { // block id: 3158
            if (var3161) {
                var3179
            } else {
                (((var1190 & 127)..(var1190 & 127 ):( (34 | 1))), var1323, var1214, var862, (-5.0), ((UInt16(52) & 127)..=(UInt16(221)&
)                        127 : (-15) | 1))
            }
            var3215
        } else { // block id: 3218
            118.0
        }) {
            case _ =>
                var3225 |= var1190
                var3161 ||= true
                var3225 &= UInt16(167)

            case _ => var1323
        }
        var3238
        var var3260: Float64 = (-128.0)
        var loopTimeVar3269: Int64 = 0
        while ((true) && loopTimeVar3269 < 100) {
            loopTimeVar3269++
            ((Int16(-89) & 127)..=(var1198 & 127 ):( (var945 | 1)))
            match ('r') {
                case '8' => var1323

                case caseVar3255 =>
                    ()
                    var3260 -= 60.0
                    var1323

                case _ =>
                    ()
                    var88
            }
        }
    }

    static let var3386: Rune = 'D'
    static var var3390: Range<Int32> = ((Int32(-120) & 127)..=(Int32(-101) & 127 ):( (22 | 1)))
    public init(
        optionalParam3004!: Interface20<Int64> = Class16(
            namedParam2676: Class16((((-105) & 127)..=((-27) & 127 ):( (90 | 1))), Option<Bool>.None),
            namedParam2677: [((UInt16(139) & 127)..=(UInt16(241) & 127 ):( (-39) | 1)),
            ((UInt16(UInt16(165)) & 127)..(UInt16(Int16(33)) & 127 ):( (Int64(123) | 1))),
            ((UInt16(73) & 127)..(UInt16(38) & 127 ):( (-120) | 1)), ((UInt16(167) & 127)..(UInt16(232) & 127 ):( ((-78) | 1))),
            ((UInt16(Int8(-37)) & 127)..(UInt16(Int8(72)) & 127 ):( (Int64(UInt8(195)) | 1))),
            ((UInt16(238) & 127)..=(UInt16(184) & 127 ):( 114 | 1)),
            ((UInt16(Int8(-36)) & 127)..(UInt16(Int16(16)) & 127 ):( (Int64(20) | 1))),
            ((UInt16(240) & 127)..(UInt16(70) & 127 ):( (-25) | 1)), ((UInt16(55) & 127)..=(UInt16(212) & 127 ):( 118 | 1)),
            ((UInt16(Int16(46)) & 127)..(UInt16(Int16(-108)) & 127 ):( (120 | 1)))]),
        optionalParam3312!: Range<UInt32> = ((UInt32(148) & 127)..(UInt32(94) & 127 ):( 36 | 1)),
        namedParam3314!: (Range<UInt16>,Unit,Range<UInt32>,Range<UInt64>,Float64,Range<UInt16>)) { // block id: 3315
        match (((var3328 ?? Option<(Range<Int64>,Range<Int8>,Range<UInt64>,UInt8,UInt32,Int32)>.Some(
            (((18 & 127)..((-41) & 127 ):( (-67) | 1)), ((var1366 & 127)..(Int8(73) & 127 ):( (var945 | 1))), var862, var827, UInt32(197),
                var2791))) ?? (Option<(Range<Int64>,Range<Int8>,Range<UInt64>,UInt8,UInt32,Int32)>.Some(
            (((49 & 127)..(22 & 127 ):( 21 | 1)), ((Int8(-23) & 127)..=(Int8(26) & 127 ):( 113 | 1)), ((UInt64(116) & 127)..(UInt64(14)&
)                    127 : (2 | 1)), var827, var925, var2791)) ?? ((((-46) & 127)..=(var28 & 127 ):( (var945 | 1))), (Int8(73) &
(                127)..(Int8(-86) & 127 ):( (-73) | 1)), var862, var1087, UInt32(201), var2791)))) {
            case (_, caseVar3365: Option<Bool>, _: Aggregate959, caseVar3366, caseVar3367, _: Option<Option<(Range<Int64>,
                        Range<Int8>,Range<UInt64>,UInt8,UInt32,Int32)>>) => if (false) {
                    'X'
                } else {
                    'T'
                }

            case _: Array<Bool> =>
                var88
                var1366 |= var1366
                var3381

            case _ => var3386
        }
        var var3404: Bool = (Int32(UInt8(Int8(116))) is Int8)
        (var3390, [false, var1185, var65, var65, false, false, var3404, false, false, var1185][4])
    }

    public init(namedParam3497!: Option<Option<(Range<Int64>,Range<Int8>,Range<UInt64>,UInt8,UInt32,Int32)>>,
        optionalParam3498!: Array<Range<UInt16>> = [((UInt16(60) & 127)..=(UInt16(203) & 127 ):( 111 | 1)),
        ((UInt16(89) & 127)..(UInt16(16) & 127 ):( 11 | 1)), ((UInt16(41) & 127)..=(UInt16(44) & 127 ):( 11 | 1)),
        ((UInt16(250) & 127)..=(UInt16(204) & 127 ):( 92 | 1)), ((UInt16(13) & 127)..(UInt16(182) & 127 ):( 42 | 1)),
        ((UInt16(129) & 127)..=(UInt16(172) & 127 ):( (-37) | 1)), ((UInt16(39) & 127)..(UInt16(8) & 127 ):( 120 | 1)),
        ((UInt16(181) & 127)..=(UInt16(176) & 127 ):( 117 | 1)), ((UInt16(29) & 127)..(UInt16(115) & 127 ):( 77 | 1)),
        ((UInt16(94) & 127)..=(UInt16(245) & 127 ):( (-59) | 1))],
        optionalParam3500!: Option<Float64> = Option<Float64>.Some((-23.0)),
        namedParam3503!: (UInt64) -> Option<UInt64>) { // block id: 3506
        var loopTimeVar3528: Int64 = 0
        while ((((Option<Option<Bool>>.None ?? Option<Bool>.Some(true)) ?? (var3390 is (Interface25) -> Range<Int32>))) &&
                loopTimeVar3528 < 100) {
            loopTimeVar3528++
            if (false) { // block id: 3522
                var1323
                var1152 -= var2791
            }
        }
    }

    public init(param70: Int32, namedParam71!: Unit,
        optionalParam72!: Range<UInt8> = ((UInt8(118) & 127)..=(UInt8(219) & 127 ):( 123 | 1)),
        optionalParam74!: Interface22 = Class16(Int32(UInt16(Int16(-125))), optionalParam78: Class16(),
            namedParam80: Class16())) { // block id: 95
        func97(
            namedParam98: try { // block id: 4443
                var88
                optionalParam72
            } finally { // block id: 4446
                optionalParam72
            },
            namedParam99: Int32(var1198),
            namedParam100: var908
        );
        [((UInt64(101) & 127)..=(UInt64(19) & 127 ):( (-33) | 1)), ((UInt64(252) & 127)..(UInt64(218) & 127 ):( (-87) | 1)),
        ((UInt64(65) & 127)..(UInt64(67) & 127 ):( (-127) | 1)), ((UInt64(251) & 127)..(UInt64(60) & 127 ):( 9 | 1)),
        ((UInt64(152) & 127)..=(UInt64(219) & 127 ):( 122 | 1)), ((UInt64(132) & 127)..=(UInt64(216) & 127 ):( (-68) | 1)),
        ((UInt64(95) & 127)..(UInt64(202) & 127 ):( 107 | 1)), ((UInt64(244) & 127)..=(UInt64(61) & 127 ):( 117 | 1)),
        ((UInt64(93) & 127)..(UInt64(141) & 127 ):( 102 | 1)), ((UInt64(160) & 127)..=(UInt64(204) & 127 ):( (-29) | 1))][0]
        var4456
    }

    public func isClosed(): Bool {
        return true
    }
    public func close(): Unit {}
}

public func func9(param10: Unit): Bool { // block id: 11
    let var32: Bool = (() is Class16)
    try (resource = Class16()) { // block id: 13
    } finally { // block id: 14
        Class16.var28;
        var loopTimeVar37: Range<UInt64> = ((UInt64(45) & 127)..=(UInt64(UInt64(UInt64(27))) & 127 ):( (75 | 1)))
        for (i in loopTimeVar37 where var32) {
            continue
        }
    }
    false
}

public func func127(param128: Interface25): Range<Int32> { // block id: 129
    var var178: Range<UInt16> = ((UInt16(77) & 127)..(UInt16(Int8(-86)) & 127 ):( (Int64(Int8(UInt8(103))) | 1)))
    try { // block id: 131
        let var156: Int8 = Int8(-128)
        let var170: Int64 = Int64(Int8(Int8(Int8(-28))))
        match (var134) {
            case caseVar138 => if (false) {
                    ((UInt16(238) & 127)..=(UInt16(101) & 127 ):( 2 | 1))
                } else {
                    ((UInt16(56) & 127)..(UInt16(16) & 127 ):( 42 | 1))
                }

            case _: Unit =>
                let var148: Range<UInt16> = ((UInt16(57) & 127)..=(UInt16(129) & 127 ):( (-93) | 1))
                var148

            case _ =>
                Int8(20) ^ var156
                (-60.0)
                if (false) {
                    ((UInt16(194) & 127)..(UInt16(235) & 127 ):( (-61) | 1))
                } else {
                    ((UInt16(20) & 127)..=(var165 & 127 ):( (var170 | 1)))
                }

            case _ => var178
        }
        var187
    } catch (e: Exception) { // block id: 199
        let var201: Rune = 'j'
        var201
        var187
    } finally { // block id: 204
        var var241: Unit = ()
        match (var134) {
            case _: Unit =>
                var var211: Unit = ()
                var211
                var165

            case caseVar216 => UInt16(52)

            case _ =>
                if (true) {
                    param128
                } else {
                    Class16()
                }
                UInt32(187) % ((UInt32(28)) | 1)
                UInt16(201) & var165

            case _ => UInt16(Int64(var165) ** ((33) & 3))

            case _ =>
                var241
                var241
                UInt16(190)
        }
        match (Option<Unit>.None) {
            case _ => if (var251) {
                    ((Int32(18) & 127)..=(Int32(-108) & 127 ):( 7 | 1))
                } else {
                    ((Int32(86) & 127)..(Int32(122) & 127 ):( 59 | 1))
                }
        }
    }
}

public open class Class490<T0> <: Interface25 & Interface24 & Resource {
    public init() { // block id: 492
    }

    public static var var495: Int16 = Int16(58)
    static let var2936: ?Unit = Option<Unit>.None;
    public init(namedParam1452!: Option<Option<Unit>>) { // block id: 1453
        (((-93) & 127)..=((-124) & 127 ):( (-56) | 1))
        let var2926: (UInt64) -> Option<UInt64> = func1462<Interface23, Option<Option<Unit>>>
        var var2970: ?(UInt32,Int32,UInt8,Unit,Range<Int8>) = ((Int32(UInt32(UInt8(42))), ((UInt8(2) & 127)..=(UInt8(118) &
)                127 : 85 | 1), Float64(Float32(-31.0)), (((Int32(111) & 127)..(Int32(-68) & 127 ):( (-98) | 1)), true), UInt64(UInt64(187)),
            UInt32(UInt16(152)), ((UInt32(36) & 127)..=(UInt32(UInt16(67)) & 127 ):( ((-53) | 1))), UInt16(106)) as (UInt32,
            Int32,UInt8,Unit,Range<Int8>))
        ((UInt64(161) |> var2926) ?? match (var2155) {
            case caseVar2933: Bool =>
                var2936
                -var1696

            case caseVar2942 =>
                var var2946: Int32 = Int32(UInt16(Int8(UInt8(91))))
                (var2946, ((UInt8(47) & 127)..(UInt8(76) & 127 ):( (-87) | 1)), (-120.0), var743, var1696, var1571, var2957,
                    var165)
                UInt64(83)

            case _: Option<UInt32> =>
                UInt32(66)
                var2970
                var2431 >> ((var1696) & 7)

            case _ =>
                Class490<Range<Int16>>();
                var2431
        }) - var2431
    }

    public func isClosed(): Bool {
        return true
    }
    public func close(): Unit {}
}

func func428(param429: (Range<Int32>,Bool)): Int8 { // block id: 430
    var var439: ??Unit = Option<Option<Unit>>.None;
    var var457: Int32 = Int32(UInt32(24))
    let var474: UInt64 = UInt64(UInt32(189))
    let var479: Int64 = 122
    let var485: Range<UInt16> = ((UInt16(102) & 127)..(UInt16(111) & 127 ):( 54 | 1))
    if (match ((var439 ?? Option<Unit>.Some(var443))) {
        case _ =>
            ()
            var251 || var251
    }) { // block id: 451
        var loopTimeVar462: Int64 = 0
        do {
            loopTimeVar462++
            var457++
            var443
        } while ((var251) && loopTimeVar462 < 100)
        (((var165 & 127)..(UInt16(34) & 127 ):( (var298 | 1))), (), ((UInt32(18) & 127)..=(UInt32(68) & 127 ):( 55 | 1)), (var474 &
(                127)..=(var474 & 127 ):( (var479 | 1))), var482, var485)[1]
    }
    var var515: Int16 = Int16(-19)
    Class490<Range<Int16>>.var495 *= (try { // block id: 503
        Option<Int16>.None
    } finally { // block id: 505
        let var507: Interface24 = Class490<Range<Int16>>();
        var507
        ()
        let var511: ?Int16 = Option<Int16>.None;
        var511
    } ?? var515 & var515)
    var var519: Int8 = Int8(-18)
    var519
}

public func func1822(param418: UInt8, param419: Float32, param420: (Interface25) -> Range<Int32>): Rune { // block id: 423
    var var522: ((Range<Int32>,Bool)) -> Int8 = {lambdaParameter525: (Range<Int32>,Bool) => Int8(17)}
    var var587: Int8 = Int8(-101)
    match (((var187, var251) |> var522)) {
        case -109 | -128 | -101 | -85 =>
            var var535: Interface25 = Class490<Range<Int16>>();
            var535
            ((), var251, ((var165 & 127)..=(var165 & 127 ):( ((-95) | 1))), 'W', param419, (var187, true), UInt32(168), UInt16(218))

        case caseVar553 =>
            var134
            var443
            var var558: (Unit,Bool,Range<UInt16>,Rune,Float32,(Range<Int32>,Bool),UInt32,UInt16) = ((), true, (UInt16(UInt16(7))&
(                    127)..(UInt16(Int8(Int8(29))) & 127 ):( (Int64(Int16(-103)) | 1))), 'L', Float32(Float32(Float32(Float32(54.0)))),
                (((Int32(14) & 127)..(Int32(36) & 127 ):( (-120) | 1)), (Class490<Range<Int16>>() is Int64)), UInt32(UInt32(UInt16(UInt8(115)))),
                UInt16(187))
            var558

        case _ =>
            var587
            ()
            var var591: (Unit,Bool,Range<UInt16>,Rune,Float32,(Range<Int32>,Bool),UInt32,UInt16) = ((), (Int64((-124)) is Unit),
                ((UInt16(222) & 127)..=(UInt16(112) & 127 ):( 46 | 1)), 'P', Float32(-57.0), (((Int32(Int32(92)) & 127)..=(Int32(Int8(-79))&
)                        127 : (Int64(UInt8(218)) | 1)), (46.0 is UInt64)), UInt32(UInt32(UInt32(Int16(-52)))), UInt16(231))
            var591
    }[3]
}

public struct Aggregate959 {
    public init() { // block id: 961
    }

    static let var964: (UInt8,(Int32,Range<UInt8>,Float64,(Range<Int32>,Bool),UInt64,UInt32,Range<UInt32>,UInt16),Int8,
        Range<UInt64>,Range<Int8>,Range<Int32>,Array<UInt8>,Int32) = (UInt8(178), (Int32(66), ((UInt8(153) & 127)..(UInt8(250)&
)                127 : ((-2) | 1)), 32.0, (((Int32(-114) & 127)..=(Int32(-11) & 127 ):( ((-107) | 1))), true), UInt64(138),
            UInt32(116), ((UInt32(182) & 127)..(UInt32(16) & 127 ):( (-81) | 1)), UInt16(140)), Int8(42), ((UInt64(215) & 127)..(UInt64(74)&
)            127 : (-16) | 1), ((Int8(-97) & 127)..(Int8(-15) & 127 ):( (79 | 1))), ((Int32(0) & 127)..=(Int32(14) & 127 ):( 10 | 1)),
        [UInt8(4), UInt8(79), UInt8(244), UInt8(27), UInt8(12), UInt8(182), UInt8(132), UInt8(162), UInt8(56),
        UInt8(226)], Int32(93))
}

public func func1253(): Unit { // block id: 1254
    var var1268: Bool = true
    let var1277: ?Int16 = (((Int32(113) & 127)..=(Int32(-72) & 127 ):( (-12) | 1)) as Int16)
    try (resource = Class490<Range<Int16>>()) { // block id: 1256
        var loopTimeVar1264: Int64 = 0
        do {
            loopTimeVar1264++
            var251 &&= var251
        } while ((var251) && loopTimeVar1264 < 100)
    } catch (_) { // block id: 1265
        var loopTimeVar1272: Int64 = 0
        while ((var1268) && loopTimeVar1272 < 100) {
            loopTimeVar1272++
        }
        if (true) {
            Option<Int16>.None
        } else {
            var1277
        }
        var loopTimeVar1287: Int64 = 0
        do {
            loopTimeVar1287++
            ()
            -UInt64(240)
        } while ((true) && loopTimeVar1287 < 100)
    }
}

public func func1028(param1029: Range<Int16>, optionalParam1030!: Option<Bool> = Option<Bool>.None): Unit { // block id: 1032
    let var1037: (UInt8,(Int32,Range<UInt8>,Float64,(Range<Int32>,Bool),UInt64,UInt32,Range<UInt32>,UInt16),Int8,Range<UInt64>,
        Range<Int8>,Range<Int32>,Array<UInt8>,Int32) = (UInt8(252), (Int32(66), ((UInt8(82) & 127)..=(UInt8(10) & 127 ):( (Int64(38)|
)                1)), (-13.0), (((Int32(-12) & 127)..(Int32(-49) & 127 ):( (-126) | 1)), (((Int8(-63) & 127)..(Int8(-113) & 127 ):( (46|
)                    1)) is (UInt64,Int16,UInt8,Range<Int8>,Array<Interface24>,UInt16,Float32,Range<Int16>))), UInt64(UInt32(Int8(22))),
            UInt32(UInt16(UInt16(122))), ((UInt32(157) & 127)..=(UInt32(Int8(-49)) & 127 ):( (9 | 1))), UInt16(Int8(Int8(116)))),
        Int8(-45), ((UInt64(166) & 127)..(UInt64(46) & 127 ):( (-78) | 1)), ((Int8(-30) & 127)..=(Int8(-45) & 127 ):( 0 | 1)), (Int32(72)&
(            127)..=(Int32(UInt8(UInt8(118))) & 127 ):( (75 | 1))), [UInt8(91), UInt8(14), UInt8(61), UInt8(54), UInt8(76),
        UInt8(131), UInt8(116), UInt8(207), UInt8(76), UInt8(195)], Int32(UInt8(UInt8(UInt8(93)))))
    var var1127: Range<UInt64> = ((UInt64(244) & 127)..(UInt64(18) & 127 ):( ((-103) | 1)))
    match (try { // block id: 1035
        var1037
    } catch (_) { // block id: 1083
        var65
        (var1087, var1093, Int8(87), var1127, var1133, var1142, [UInt8(37), UInt8(72), UInt8(202), UInt8(39), UInt8(42),
            UInt8(170), UInt8(196), UInt8(55), UInt8(115), UInt8(162)], var1152)
    }) {
        case caseVar1157 => UInt32(181) - var925

        case (_: Interface21, _, caseVar1164, caseVar1165, _: Range<Int32>, caseVar1166, _: (Unit,Bool,Range<UInt16>,
                    Rune,Float32,(Range<Int32>,Bool),UInt32,UInt16), caseVar1167: (Range<Int64>,Range<Int8>,Range<UInt64>,
                    UInt8,UInt32,Int32)) => UInt32(194)

        case _ => var925
    }
    var var1207: Range<UInt32> = ((UInt32(74) & 127)..(UInt32(Int16(47)) & 127 ):( (93 | 1)))
    var var1228: Int8 = Int8(Int8(118))
    ((try { // block id: 1180
        param1029
    } catch (e: Exception) { // block id: 1182
        if (var1185) {
            ((var1190 & 127)..(UInt16(192) & 127 ):( (var945 | 1)))
        } else {
            ((UInt16(171) & 127)..(UInt16(41) & 127 ):( (-107) | 1))
        }
        ((Int16(-55) & 127)..=(var1198 & 127 ):( (var945 | 1)))
    } finally { // block id: 1202
        ()
        if (true) {
            var1207
        } else {
            var1214
        }
        if (var1185) {
            param1029
        } else {
            ((Int16(80) & 127)..=(Int16(-11) & 127 ):( (-8) | 1))
        }
    } as Float64) ?? match (var1228) {
        case _: Array<UInt8> =>
            var1185 ||= var1185
            86.0

        case _ =>
            var var1241: (Range<Int32>,Bool) = (((Int32(-55) & 127)..(Int32(25) & 127 ):( (-19) | 1)), true)
            var1241
            var var1248: Float64 = Float64(Float64(65.0))
            (-54.0) ** Float64(Int32(var1248) & 3)
    })
    func1253()
}

func func953(param954: Range<UInt32>): Unit { // block id: 955
    Aggregate959.var964[4]
    var loopTimeVar1294: Int64 = 0
    do {
        loopTimeVar1294++
        func1028(((Int16(30) & 127)..(Int16(-39) & 127 ):( (-91) | 1)), optionalParam1030: var1290)
    } while (((try { // block id: 1011
        Option<Bool>.None
    } finally { // block id: 1013
        0.0
        var88
        var var1019: ?Bool = Option<Bool>.Some(true);
        if (true) {
            var1019
        } else {
            var1019
        }
    } ?? (var88 |> func9))) && loopTimeVar1294 < 100)
}

func func1471(
    param1472: (UInt8,(Int32,Range<UInt8>,Float64,(Range<Int32>,Bool),UInt64,UInt32,Range<UInt32>,UInt16),Int8,Range<UInt64>,
        Range<Int8>,Range<Int32>,Array<UInt8>,Int32)): Unit { // block id: 1473
}

func func1822(param1823: Array<UInt8>, param1824: (UInt32,Int32,UInt8,Unit,Range<Int8>)): Bool { // block id: 1825
    ((var1833 ?? match ((((56 & 127)..=((-60) & 127 ):( (-96) | 1)), ((Int8(9) & 127)..(Int8(19) & 127 ):( (-13) | 1)), (UInt64(206)&
(            127)..(UInt64(196) & 127 ):( (-85) | 1)), var775, var1571, Int32(2))) {
        case _: Option<Option<Unit>> =>
            var443
            var var1849: ?Unit = Option<Unit>.Some(());
            var1849

        case caseVar1854: (Range<Int64>,Range<Int8>,Range<UInt64>,UInt8,UInt32,Int32) =>
            var348
            Option<Unit>.None
        case (_: Range<UInt16>, caseVar1860: Option<(UInt8,(Int32,Range<UInt8>,Float64,(Range<Int32>,Bool),UInt64,UInt32,
                    Range<UInt32>,UInt16),Int8,Range<UInt64>,Range<Int8>,Range<Int32>,Array<UInt8>,Int32)>, _, caseVar1861: UInt8, _, caseVar1862) =>
            (((-42) & 127)..=(var298 & 127 ):( (39 | 1)))
            Class16();
            let var1872: ?Unit = (((UInt32(93) & 127)..=(UInt32(164) & 127 ):( (Int64(UInt32(158)) | 1))) as Unit)
            if (var251) {
                var1872
            } else {
                var1880
            }

        case _ =>
            var298 *= 69
            ()
            var1880
    }) is Interface21)
}

func func2225(param2226: UInt16): (UInt32,Int32,UInt8,Unit,Range<Int8>) { // block id: 2227
    let var2272: (Range<Int8>,UInt64,Range<UInt8>,(UInt32,Int32,UInt8,Unit,Range<Int8>),Range<UInt8>) = ((Int8(UInt8(54))&
(            127)..(Int8(Int8(101)) & 127 ):( (Int64(UInt16(UInt16(11))) | 1))), UInt64(5), ((UInt8(Int8(-46)) & 127)..(UInt8(UInt8(67))&
)            127 : (Int64(UInt16(Int8(-32))) | 1)), (UInt32(27), Int32(126), UInt8(68), (), ((Int8(68) & 127)..=(Int8(113) &
)                127 : 59 | 1)), ((UInt8(132) & 127)..=(UInt8(UInt8(Int8(113))) & 127 ):( (Int64(UInt64(UInt64(192))) | 1))))
    var var2331: Range<Int8> = ((Int8(-54) & 127)..=(Int8(-58) & 127 ):( (-112) | 1))
    let var2335: Range<UInt8> = ((UInt8(73) & 127)..(UInt8(UInt8(UInt8(185))) & 127 ):( ((-42) | 1)))
    match (var165) {
        case _ =>
            var var2236: (Range<Int8>,UInt64,Range<UInt8>,(UInt32,Int32,UInt8,Unit,Range<Int8>),Range<UInt8>) = ((Int8(UInt8(175))&
(                    127)..(Int8(Int8(-24)) & 127 ):( (2 | 1))), UInt64(UInt32(Int8(-42))), ((UInt8(110) & 127)..(UInt8(147) & 127 ):( 1|
)                    1), (UInt32(126), Int32(93), UInt8(154), (), ((Int8(-35) & 127)..=(Int8(-3) & 127 ):( ((-40) | 1)))), (UInt8(156)&
(                    127)..=(UInt8(UInt8(234)) & 127 ):( (Int64(Int32(UInt8(210))) | 1))))
            var2236

        case caseVar2266 =>
            ((Int16(86) & 127)..=(Int16(100) & 127 ):( (-50) | 1))
            if (false) {
                var2272
            } else {
                var2306
            }

        case _ => if (true) {
                (var2331, UInt64(209), var2335, var2343, var2335)
            } else {
                var2306
            }
    }[3]
}

public func func2138(param2139: () -> Unit): Option<(Int32,Range<UInt8>,Float64,(Range<Int32>,Bool),UInt64,UInt32,Range<UInt32>,
    UInt16)> { // block id: 2141
    let var2149: Int8 = Int8(-34)
    var loopTimeVar2207: Int64 = 0
    while (((UInt32(148) * var1571) != match (var2149) {
            case _ =>
                var2155
                var2161
                UInt32(74)

            case caseVar2176 =>
                var443
                var1571

            case caseVar2182 => var1571 % ((UInt32(24)) | 1)

            case _ =>
                let var2193: Unit = ()
                [(), (), var2193, (), var2193, var2193, (), var443, (), var2193]
                var1571 * var1571
        }) && loopTimeVar2207 < 100) {
        loopTimeVar2207++
    }
    var var2218: ?(UInt32,Int32,UInt8,Unit,Range<Int8>) = (Int16(Int8(UInt8(Int8(-126)))) as (UInt32,Int32,UInt8,Unit,
        Range<Int8>))
    var var2360: (UInt16) -> (UInt32,Int32,UInt8,Unit,Range<Int8>) = func2225
    match ((if (var251) {
        Option<(UInt32,Int32,UInt8,Unit,Range<Int8>)>.None
    } else {
        var2218
    } ?? (var631 |> var2360))) {
        case (caseVar2365, caseVar2366, caseVar2367: UInt32, caseVar2368: Option<Option<Unit>>, _) =>
            let var2371: ?(UInt32,Int32,UInt8,Unit,Range<Int8>) = Option<(UInt32,Int32,UInt8,Unit,Range<Int8>)>.Some(
                (UInt32(197), Int32(UInt16(201)), UInt8(UInt8(156)), (), ((Int8(74) & 127)..(Int8(-29) & 127 ):( 24 | 1))));
            var2371
            var var2382: Interface23 = Class16(
                namedParam1334: (UInt32(Int32(UInt8(19))), Int32(-7), UInt8(168), (), ((Int8(-121) & 127)..=(Int8(UInt8(213))&
)                        127 : (Int64(UInt32(84)) | 1))), namedParam1353: UInt8(211));
            var2382

        case caseVar2400: Option<(UInt8,(Int32,Range<UInt8>,Float64,(Range<Int32>,Bool),UInt64,UInt32,Range<UInt32>,
                UInt16),Int8,Range<UInt64>,Range<Int8>,Range<Int32>,Array<UInt8>,Int32)> => Class16()

        case _ =>
            var1608
            Class16()
    }
    var var2408: Option<(Int32,Range<UInt8>,Float64,(Range<Int32>,Bool),UInt64,UInt32,Range<UInt32>,UInt16)> = ((Int64(Int8(-97))&
(        127)..(73 & 127 ):( (Int64(Int16(-58)) | 1))) as (Int32,Range<UInt8>,Float64,(Range<Int32>,Bool),UInt64,UInt32,Range<UInt32>,
        UInt16))
    var2408
}

public func func2417(): Unit { // block id: 1254
    var var1268: Bool = true
    let var1277: ?Int16 = (((Int32(113) & 127)..=(Int32(-72) & 127 ):( (-12) | 1)) as Int16)
    try (resource = Class490<Range<Int16>>()) { // block id: 1256
        var loopTimeVar1264: Int64 = 0
        do {
            loopTimeVar1264++
            var251 &&= var251
        } while ((var251) && loopTimeVar1264 < 100)
    } catch (_) { // block id: 1265
        var loopTimeVar1272: Int64 = 0
        while ((var1268) && loopTimeVar1272 < 100) {
            loopTimeVar1272++
        }
        if (true) {
            Option<Int16>.None
        } else {
            var1277
        }
        var loopTimeVar1287: Int64 = 0
        do {
            loopTimeVar1287++
            ()
            -UInt64(240)
        } while ((true) && loopTimeVar1287 < 100)
    }
}

func func1663(param1664: Interface25): (UInt8,(Int32,Range<UInt8>,Float64,(Range<Int32>,Bool),UInt64,UInt32,Range<UInt32>,
    UInt16),Int8,Range<UInt64>,Range<Int8>,Range<Int32>,Array<UInt8>,Int32) { // block id: 1665
    ()
    var var1676: Float32 = Float32(-105.0)
    var var1718: Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
    match (if (var251) { // block id: 1671
        var775--
        var1676 /= Float32((Int32(var1676)) | 1)
    } else if (false) { // block id: 1680
        ()
    }) {
        case () | () | () =>
            var var1689: Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
            if (false) {
                [(), (), (), (), (), (), (), (), (), ()]
            } else {
                var1689
            }

        case _: String =>
            var1696 = var1696
            let var1700: (Unit,Bool,Range<UInt16>,Rune,Float32,(Range<Int32>,Bool),UInt32,UInt16) = ((), false, (UInt16(202)&
(                    127)..(UInt16(157) & 127 ):( (-49) | 1)), '3', Float32(32.0), (((Int32(-6) & 127)..(Int32(31) & 127 ):( 122 | 1)),
                    (UInt32(Int16(-97)) is ((Range<Int32>,Bool)) -> Int8)), UInt32(Int16(UInt16(106))), UInt16(Int8(-39)))
            var1700
            var1718

        case () => if (var251) {
                var1718
            } else {
                var1718
            }

        case _ =>
            var251 ||= true
            var1718
    }[1]
    let var1762: (UInt8,Int32,Float64,Bool) = (UInt8(180), Int32(UInt8(117)), Float64(Float32(Float32(32.0))), ((-91) is Interface22))
    let var1777: Int32 = Int32(Int16(-70))
    let var1920: Int8 = Int8(-108)
    func func1746(param1747: Option<UInt64>,
        namedParam1748!: ((UInt8,(Int32,Range<UInt8>,Float64,(Range<Int32>,Bool),UInt64,UInt32,Range<UInt32>,UInt16),
                Int8,Range<UInt64>,Range<Int8>,Range<Int32>,Array<UInt8>,Int32)) -> Unit): Bool { // block id: 1751
        if (match (var379) {
            case caseVar1759: (Int32,Range<UInt8>,Float64,(Range<Int32>,Bool),UInt64,UInt32,Range<UInt32>,UInt16) => var1762

            case _ => (var775, var1777, var482, false)
        }[3]) { // block id: 1783
            var var1802: Int32 = Int32(-27)
            var var1814: Int32 = Int32(6)
            match (var274) {
                case caseVar1788: Array<UInt8> => var443

                case caseVar1793 => var443

                case _ =>
                    Int8(3)
                    var1802 -= var1777

                case caseVar1807 => var443

                case _ =>
                    var var1817: Int32 = Int32(Int8(UInt8(110)))
                    var1814 ^= var1817
            }
            let var1890: Array<UInt8> = Array<UInt8>(10) {i => UInt8(214)}
            func1822(var1890, (var1571, Int32(-45), var775, var443, ((var1920 & 127)..=(Int8(21) & 127 ):( (var298 | 1)))))
        } else { // block id: 1924
            func1822([var775, var775, UInt8(44), UInt8(253), var775, var775, var775, var775, var775, var775],
                (UInt32(146), Int32(23), UInt8(208), (), ((var1920 & 127)..(Int8(-39) & 127 ):( ((-37) | 1)))))
        }
    }

    let var1949: (Option<UInt64>,Range<Int64>,Range<UInt64>,Range<UInt16>) = (Option<UInt64>.None, ((68 & 127)..(96 & 127 ):( 101|
)            1), ((UInt64(93) & 127)..(UInt64(29) & 127 ):( (98 | 1))), ((UInt16(78) & 127)..=(UInt16(UInt8(62)) & 127 ):( (Int64(Int16(UInt8(178)))|
)            1)))
    var var1971: Int16 = Int16(7)
    let var2051: (UInt8,(Int32,Range<UInt8>,Float64,(Range<Int32>,Bool),UInt64,UInt32,Range<UInt32>,UInt16),Int8,Range<UInt64>,
        Range<Int8>,Range<Int32>,Array<UInt8>,Int32) = (UInt8(UInt8(Int8(25))), (Int32(18), ((UInt8(47) & 127)..=(UInt8(93)&
)                127 : 33 | 1), Float64(Float64((-53.0))), (((Int32(118) & 127)..=(Int32(93) & 127 ):( (-81) | 1)), (true is Option<Bool>)),
            UInt64((-86)), UInt32(131), ((UInt32(172) & 127)..=(UInt32(99) & 127 ):( (Int64(19) | 1))), UInt16(128)), Int8(-94),
        ((UInt64(171) & 127)..(UInt64(UInt16(169)) & 127 ):( ((-104) | 1))), ((Int8(-54) & 127)..=(Int8(-42) & 127 ):( (Int64(Int64(Int32(-69)))|
)            1)), ((Int32(66) & 127)..=(Int32(9) & 127 ):( 73 | 1)), [UInt8(UInt8(Int8(-65))), UInt8(126), UInt8(UInt8(230)),
        UInt8(196), UInt8(UInt8(UInt8(129))), UInt8(68), UInt8(114), UInt8(220), UInt8(Int8(UInt8(163))),
        UInt8(UInt8(UInt8(211)))], Int32(34))
    func func2127(namedParam2128!: UInt64, namedParam2129!: Interface25, namedParam2130!: Class490<Range<Int16>>): (Int32,
        Range<UInt8>,Float64,(Range<Int32>,Bool),UInt64,UInt32,Range<UInt32>,UInt16) { // block id: 2131
        ((func2417 |> func2138) ?? (Option<(Int32,Range<UInt8>,Float64,(Range<Int32>,Bool),UInt64,UInt32,Range<UInt32>,
                UInt16)>.None ?? (var1777, var2424, var482, (var187, var251), var2431, UInt32(191), ((UInt32(16) & 127)..=(UInt32(30)&
)                127 : 9 | 1), var165)))
    }

    var var2440: Class490<Range<Int16>> = Class490<Range<Int16>>();
    let var2444: Int8 = Int8(-19)
    if (func1746(var1949[0], namedParam1748: func1471)) {
        if (try { // block id: 1968
            var1971++
            var443
            var1696 > UInt64(56)
        } catch (e: Exception) { // block id: 1977
            false
        } finally { // block id: 1979
            var443
            false
        }) { // block id: 1982
            ()
            var var1985: (UInt8,(Int32,Range<UInt8>,Float64,(Range<Int32>,Bool),UInt64,UInt32,Range<UInt32>,UInt16),Int8,
                Range<UInt64>,Range<Int8>,Range<Int32>,Array<UInt8>,Int32) = (UInt8(UInt8(UInt8(31))), (Int32(Int16(Int16(-113))),
                    ((UInt8(37) & 127)..=(UInt8(230) & 127 ):( (-93) | 1)), Float64(Float32(44.0)), (((Int32(64) & 127)..(Int32(-84)&
)                            127 : (-75) | 1), (Class16() is Interface19)), UInt64(Int32(UInt8(18))), UInt32(193), (UInt32(UInt32(40))&
(                        127)..=(UInt32(103) & 127 ):( ((-47) | 1))), UInt16(68)), Int8(105), ((UInt64(99) & 127)..=(UInt64(99) &
)                    127 : (-92) | 1), ((Int8(Int8(UInt8(203))) & 127)..=(Int8(44) & 127 ):( (116 | 1))), (Int32(UInt32(147)) &
(                    127)..(Int32(Int16(UInt16(8))) & 127 ):( (Int64(15) | 1))), [UInt8(57), UInt8(251),
                UInt8(UInt8(UInt8(131))), UInt8(UInt8(Int8(-73))), UInt8(Int8(Int8(-22))), UInt8(170), UInt8(121),
                UInt8(71), UInt8(180), UInt8(UInt8(200))], Int32(UInt8(159)))
            var1985
        } else { // block id: 2047
            if (var251) {
                var2051
            } else {
                var2051
            }
        }
    } else {
        (try { // block id: 2112
                var2114
                var298 &= 124
                UInt8(35) % ((UInt8(58)) | 1)
            } finally { // block id: 2122
                UInt8(58) % ((UInt8(252)) | 1)
            }, func2127(namedParam2128: var1696, namedParam2129: param1664, namedParam2130: var2440), var2444 >> ((var2444)&
                7), var1515, ((var1920 & 127)..=(Int8(15) & 127 ):( (124 | 1))), ((Int32(14) & 127)..(Int32(37) & 127 ):( 33 | 1)), [UInt8(121),
            UInt8(163), UInt8(95), UInt8(137), UInt8(4), UInt8(93), UInt8(150), UInt8(134), UInt8(26), UInt8(59)], Int32(-95))
    }
}

public func func1643(param1644: Interface23): (UInt8,(Int32,Range<UInt8>,Float64,(Range<Int32>,Bool),UInt64,UInt32,Range<UInt32>,
    UInt16),Int8,Range<UInt64>,Range<Int8>,Range<Int32>,Array<UInt8>,Int32) { // block id: 1645
    ()
    let var1660: Range<UInt16> = ((UInt16(143) & 127)..(UInt16(20) & 127 ):( (-38) | 1))
    match (((UInt8(212) & 127)..(UInt8(207) & 127 ):( (-80) | 1))) {
        case _ =>
            var var1653: Int32 = Int32(Int32(-36))
            var1653--
            if (true) {
                ((UInt16(66) & 127)..=(UInt16(196) & 127 ):( 27 | 1))
            } else {
                var1660
            }
    }
    let var2456: (Interface25) -> (UInt8,(Int32,Range<UInt8>,Float64,(Range<Int32>,Bool),UInt64,UInt32,Range<UInt32>,
        UInt16),Int8,Range<UInt64>,Range<Int8>,Range<Int32>,Array<UInt8>,Int32) = func1663
    let var2459: Interface25 = Class490<Range<Int16>>();
    var2459 |> var2456
}

func func1479(param1480: Interface25, param1481: Int16, namedParam1482!: Range<UInt16>,
    optionalParam1483!: Int8 = Int8(Int8(75))): (UInt8,(Int32,Range<UInt8>,Float64,(Range<Int32>,Bool),UInt64,UInt32,
    Range<UInt32>,UInt16),Int8,Range<UInt64>,Range<Int8>,Range<Int32>,Array<UInt8>,Int32) { // block id: 1486
    var var1535: (Unit,Bool,Range<UInt16>,Rune,Float32,(Range<Int32>,Bool),UInt32,UInt16) = ((), ((Int8(Int8(-52)) as Option<Unit>) is Option<Option<Unit>>),
        ((UInt16(62) & 127)..=(UInt16(8) & 127 ):( 74 | 1)), 'g', Float32(Float32(Float32(70.0))), (((Int32(Int16(5)) & 127)..(Int32(UInt8(50))&
)                127 : (Int64(Int8(65)) | 1)), true), UInt32(167), UInt16(220))
    var var1574: Int32 = Int32(-8)
    if (var251) { // block id: 1489
        (var775, var1493, optionalParam1483, var1515, ((Int8(-16) & 127)..(Int8(-9) & 127 ):( (-18) | 1)), ((Int32(-65) & 127)..=(Int32(101)&
)                127 : 2 | 1), [UInt8(97), UInt8(150), UInt8(108), UInt8(198), UInt8(25), UInt8(249), UInt8(39),
            UInt8(129), UInt8(251), UInt8(74)], Int32(113))
    } else if (match (0.0 * var482) {
        case caseVar1532 =>
            var1535
            var443
            false

        case caseVar1562 => UInt32(223) > UInt32(24)

        case _ =>
            var var1579: Range<Int8> = ((Int8(71) & 127)..(Int8(Int8(Int8(-62))) & 127 ):( ((-118) | 1)))
            (var1571, var1574, UInt8(123), var443, var1579)
            var251
    }) { // block id: 1587
        var var1595: UInt64 = UInt64(112)
        (namedParam1482, var443, ((UInt32(212) & 127)..=(UInt32(158) & 127 ):( 75 | 1)), ((var1595 & 127)..(var1595 & 127 ):( ((-41)|
)                1)), (-32.0), namedParam1482)[1]
        var var1638: Array<UInt8> = [UInt8(185), UInt8(118), UInt8(163), UInt8(53), UInt8(247), UInt8(221), UInt8(112),
        UInt8(212), UInt8(233), UInt8(92)]
        (var1608 ?? (UInt8(198), (var1574, ((UInt8(59) & 127)..=(UInt8(183) & 127 ):( (-19) | 1)), (-18.0), (((Int32(-72) & 127)..=(Int32(65)&
)                        127 : (var298 | 1)), false), UInt64(191), UInt32(176), ((UInt32(196) & 127)..(UInt32(6) & 127 ):( (88|
)                    1)), UInt16(81)), Int8(71), var1515, ((Int8(116) & 127)..(Int8(68) & 127 ):( (-100) | 1)), ((var1574 & 127)..=(Int32(-24)&
)                127 : (22 | 1)), var1638, Int32(-13)))
    } else { // block id: 1641
        Class16() |> func1643
    }
}

func func1466(param1467: Range<Int16>): Unit { // block id: 1468
    Option<Option<Unit>>.None;
    var var2466: Interface25 = Class16(
        namedParam1334: (UInt32(163), Int32(64), UInt8(161), (), ((Int8(UInt8(93)) & 127)..(Int8(UInt8(156)) & 127 ):( (99 | 1)))),
        optionalParam1335: (((Int32(49) & 127)..=(Int32(UInt16(192)) & 127 ):( (Int64(UInt16(251)) | 1))), (() is Class16)),
        namedParam1353: UInt8(Int8(Int8(Int8(124)))));
    var var2536: UInt16 = UInt16(Int16(-4))
    func1479(
        if (true) {
            var2466
        } else {
            Class490<Range<Int16>>()
        },
        try { // block id: 2494
            ((46 & 127)..(var298 & 127 ):( ((-95) | 1)))
            [UInt8(227), UInt8(131), UInt8(179), UInt8(201), UInt8(24), UInt8(209), UInt8(164), UInt8(69), UInt8(193),
            UInt8(57)]
            Int16(109)
        } finally { // block id: 2501
            var2504 <<= ((Int16(19)) & 7)
            var2155
        },
        namedParam1482: [((var165 & 127)..(var631 & 127 ):( ((-51) | 1))), ((UInt16(18) & 127)..(UInt16(254) & 127 ):( (-21) | 1)),
        var2518, ((UInt16(63) & 127)..(UInt16(116) & 127 ):( (-38) | 1)), var2518, var2518,
        ((UInt16(82) & 127)..=(UInt16(72) & 127 ):( 48 | 1)), var2518, ((var165 & 127)..(var2536 & 127 ):( (116 | 1))), var2518][3]
    ) |> {lambdaParameter1476: (UInt8,(Int32,Range<UInt8>,Float64,(Range<Int32>,Bool),UInt64,UInt32,Range<UInt32>,UInt16),
        Int8,Range<UInt64>,Range<Int8>,Range<Int32>,Array<UInt8>,Int32) => }
}

public func func1462<T0, T1>(param1463: UInt64): Option<UInt64> where T0 <: Interface23 & Interface24,
    T1 <: Option<Option<Unit>> { // block id: 1464
    let var2543: (Range<Int16>) -> Unit = func1466
    var var2615: Int32 = Int32(-125)
    var var2668: Interface24 = Class16();
    var var2829: Array<Range<UInt16>> = [((UInt16(25) & 127)..(UInt16(UInt8(50)) & 127 ):( (116 | 1))),
    ((UInt16(UInt16(246)) & 127)..=(UInt16(14) & 127 ):( (Int64(UInt64(184)) | 1))),
    ((UInt16(176) & 127)..(UInt16(92) & 127 ):( 93 | 1)), ((UInt16(92) & 127)..(UInt16(29) & 127 ):( (-11) | 1)),
    ((UInt16(Int8(Int8(-34))) & 127)..(UInt16(176) & 127 ):( ((-20) | 1))), ((UInt16(60) & 127)..=(UInt16(143) & 127 ):( (-96) | 1)),
    ((UInt16(7) & 127)..=(UInt16(86) & 127 ):( 57 | 1)),
    ((UInt16(241) & 127)..=(UInt16(UInt8(Int8(-116))) & 127 ):( (Int64(UInt32(UInt32(238))) | 1))),
    ((UInt16(202) & 127)..=(UInt16(Int8(21)) & 127 ):( (Int64(UInt8(186)) | 1))),
    ((UInt16(46) & 127)..(UInt16(33) & 127 ):( (-123) | 1))]
    try { // block id: 2548
        var1571 %= ((var1571) | 1)
        ((Int16(109) & 127)..=(Int16(40) & 127 ):( (-74) | 1))
        var2554
    } finally { // block id: 2606
        let var2621: UInt8 = UInt8(200)
        var var2875: Int8 = Int8(Int8(UInt8(UInt8(198))))
        if (false) {
            [Class16(namedParam1334: var2343, optionalParam1335: (((var2615 & 127)..=(var2615 & 127 ):( (var298 | 1))), var251),
                    namedParam1353: var2621), Class490<Range<Int16>>(), Class16(), var690, Class16(),
            Class490<Range<Int16>>(), var2668,
            Class16(Int32(-41), namedParam817: ((UInt16(44) & 127)..=(UInt16(207) & 127 ):( (-59) | 1)),
                    optionalParam818: Int8(44),
                    namedParam820: Class16(namedParam2676: Class16(), namedParam2677: var2829)),
            Class16(
                    namedParam1334: (var1571, Int32(-23), UInt8(190), var443, ((var2875 & 127)..(Int8(-105) & 127 ):( (var298|
)                            1))), namedParam1353: UInt8(109)), var2668]
        } else {
            var2885
        }
        [((Int16(16) & 127)..(Int16(78) & 127 ):( 76 | 1)), ((var2504 & 127)..(Int16(83) & 127 ):( (var298 | 1))),
        ((Int16(53) & 127)..(var2155 & 127 ):( (var298 | 1))), var274, ((Int16(103) & 127)..=(Int16(86) & 127 ):( (-30) | 1)),
        var274, ((Int16(66) & 127)..(Int16(111) & 127 ):( (-68) | 1)), ((var2155 & 127)..=(Int16(-87) & 127 ):( (var298 | 1))),
        var274, ((Int16(-126) & 127)..=(Int16(37) & 127 ):( (54 | 1)))]
    }[9] |> var2543
    var2922
}

func func721(param722: Option<Unit>): Interface24 { // block id: 723
    let var751: UInt32 = UInt32(Int32(Int16(UInt8(52))))
    let var3531: ?(Range<Int64>,Range<Int8>,Range<UInt64>,UInt8,UInt32,Int32) = Option<(Range<Int64>,Range<Int8>,Range<UInt64>,
            UInt8,UInt32,Int32)>.None;
    let var3538: Interface22 = Class16(namedParam2676: Class16(),
        namedParam2677: [((UInt16(39) & 127)..=(UInt16(UInt8(42)) & 127 ):( (74 | 1))),
        ((UInt16(222) & 127)..(UInt16(UInt8(100)) & 127 ):( (4 | 1))), ((UInt16(42) & 127)..(UInt16(24) & 127 ):( (-56) | 1)),
        ((UInt16(UInt16(7)) & 127)..=(UInt16(Int16(8)) & 127 ):( ((-32) | 1))), ((UInt16(65) & 127)..=(UInt16(169) & 127 ):( 83 | 1)),
        ((UInt16(UInt16(217)) & 127)..=(UInt16(28) & 127 ):( (81 | 1))),
        ((UInt16(17) & 127)..=(UInt16(139) & 127 ):( (Int64(UInt16(10)) | 1))),
        ((UInt16(156) & 127)..=(UInt16(12) & 127 ):( (-28) | 1)), ((UInt16(142) & 127)..=(UInt16(225) & 127 ):( 50 | 1)),
        ((UInt16(201) & 127)..(UInt16(197) & 127 ):( (100 | 1)))]);
    let var3598: Float32 = Float32(117.0)
    func func726(param727: Option<Unit>): Array<Interface24> { // block id: 728
        ()
        ((Int8(86) & 127)..=(Int8(-12) & 127 ):( 0 | 1))
        let var738: Int32 = Int32(124)
        let var763: Int16 = Int16(UInt16(UInt8(102)))
        let var799: (UInt64,Int16,UInt8,Range<Int8>,Array<Interface24>,UInt16,Float32,Range<Int16>) = (UInt64(Int16(-31)),
            Int16(-91), UInt8(UInt8(33)), ((Int8(47) & 127)..=(Int8(UInt8(39)) & 127 ):( (Int64(Int64(UInt32(2))) | 1))), [Class16(
                    Int32(Int16(-115)), namedParam817: ((UInt16(9) & 127)..=(UInt16(179) & 127 ):( 81 | 1)),
                    namedParam820: Class16(
                        namedParam1334: (UInt32(67), Int32(-41), UInt8(97), (), ((Int8(96) & 127)..(Int8(61) & 127 ):( (111 |
)                                1))), optionalParam1335: (((Int32(-95) & 127)..=(Int32(-125) & 127 ):( (-113) | 1)), false),
                        namedParam1353: UInt8(152))), Class16(),
            Class16(namedParam1334: (UInt32(130), Int32(-114), UInt8(120), (), ((Int8(-89) & 127)..(Int8(53) & 127 ):( (52 | 1)))),
                    namedParam1353: UInt8(Int8(23))), Class16(), Class490<Range<Int16>>(),
            Class16(namedParam1334: (UInt32(181), Int32(70), UInt8(125), (), ((Int8(-75) & 127)..=(Int8(53) & 127 ):( (-92) |
)                            1)), optionalParam1335: (((Int32(104) & 127)..(Int32(-91) & 127 ):( (-34) | 1)), false),
                    namedParam1353: UInt8(142)), Class16(), Class490<Range<Int16>>(),
            Class490<Range<Int16>>(namedParam1452: Option<Option<Unit>>.None),
            Class16(
                    namedParam2676: Class16(
                        namedParam3314: (((UInt16(185) & 127)..(UInt16(200) & 127 ):( ((-72) | 1))), (), ((UInt32(89) & 127)..=(UInt32(61)&
)                                127 : 40 | 1), ((UInt64(58) & 127)..=(UInt64(78) & 127 ):( 27 | 1)), 93.0, ((UInt16(227) & 127)..(UInt16(248)&
)                                127 : 93 | 1))),
                    namedParam2677: [((UInt16(250) & 127)..(UInt16(206) & 127 ):( (76 | 1))),
                    ((UInt16(28) & 127)..(UInt16(35) & 127 ):( 80 | 1)), ((UInt16(123) & 127)..(UInt16(167) & 127 ):( 32 | 1)),
                    ((UInt16(128) & 127)..(UInt16(205) & 127 ):( 98 | 1)), ((UInt16(88) & 127)..=(UInt16(68) & 127 ):( 124 | 1)),
                    ((UInt16(20) & 127)..(UInt16(69) & 127 ):( (-91) | 1)), ((UInt16(30) & 127)..(UInt16(29) & 127 ):( 22 | 1)),
                    ((UInt16(207) & 127)..(UInt16(71) & 127 ):( ((-69) | 1))), ((UInt16(195) & 127)..(UInt16(54) & 127 ):( 42 | 1)),
                    ((UInt16(65) & 127)..=(UInt16(93) & 127 ):( 5 | 1))])], UInt16(59), Float32(-87.0), (Int16(Int8(-111)) &
(                127)..=(Int16(UInt16(185)) & 127 ):( (Int64(Int16(Int16(-18))) | 1))))
        let var3466: Interface20<Int64> = Class16(
            namedParam1334: (UInt32(Int32(13)), Int32(125), UInt8(180), (), ((Int8(-10) & 127)..=(Int8(-19) & 127 ):( 57 | 1))),
            namedParam1353: UInt8(117));
        ((var738, ((UInt8(225) & 127)..(UInt8(228) & 127 ):( 85 | 1)), 31.0, var743, UInt64(139), UInt32(200), ((var751 & 127)..=(var751&
)                    127 : (var298 | 1)), UInt16(17))[4], Int16(61) >> ((var763) & 7), match (var751) {
                case _ =>
                    var443
                    var775 % ((UInt8(108)) | 1)

                case _ =>
                    var var783: UInt32 = UInt32(UInt8(UInt8(UInt8(78))))
                    var783 += var783
                    ()
                    UInt8(48)

                case caseVar793: Unit => UInt8(60)

                case _ =>
                    var799
                    ()
                    UInt8(218)
            }, if (true) {
                ((Int8(-119) & 127)..=(Int8(-88) & 127 ):( 114 | 1))
            } else {
                var3456
            }, [Class16(optionalParam3004: var3466,
                    namedParam3314: (((UInt16(61) & 127)..=(UInt16(56) & 127 ):( ((-110) | 1))), (), ((UInt32(218) & 127)..(UInt32(151)&
)                            127 : 41 | 1), ((UInt64(167) & 127)..=(UInt64(106) & 127 ):( 18 | 1)), 110.0, var2518)), var690,
            Class16(),
            Class16(var738, namedParam817: ((UInt16(136) & 127)..=(UInt16(223) & 127 ):( 63 | 1)), namedParam820: Class16()),
            var690, var690, var690,
            Class16(
                    namedParam3497: Option<Option<(Range<Int64>,Range<Int8>,Range<UInt64>,UInt8,UInt32,Int32)>>.Some(
                        var3531), optionalParam3500: Option<Float64>.None,
                    namedParam3503: func1462<Interface23, Option<Option<Unit>>>), var690,
            Class16(namedParam2676: var3538,
                    namedParam2677: [((UInt16(29) & 127)..(UInt16(77) & 127 ):( (-58) | 1)),
                    ((UInt16(61) & 127)..(UInt16(113) & 127 ):( (-66) | 1)), ((UInt16(33) & 127)..(UInt16(5) & 127 ):( (-17) | 1)),
                    ((UInt16(152) & 127)..(UInt16(30) & 127 ):( 74 | 1)), ((UInt16(133) & 127)..=(UInt16(23) & 127 ):( (-17) | 1)),
                    ((UInt16(159) & 127)..=(UInt16(253) & 127 ):( 100 | 1)), ((UInt16(244) & 127)..=(UInt16(161) & 127 ):( 37 | 1)),
                    ((UInt16(136) & 127)..(UInt16(63) & 127 ):( 19 | 1)), ((UInt16(14) & 127)..=(UInt16(217) & 127 ):( 118 | 1)),
                    ((UInt16(213) & 127)..=(UInt16(191) & 127 ):( 6 | 1))])], if (true) { // block id: 3579
                var631
            } else { // block id: 3581
                Option<Option<Unit>>.None;
                (((15 & 127)..=(var298 & 127 ):( (var298 | 1))), ((Int8(21) & 127)..(Int8(38) & 127 ):( 72 | 1)), ((UInt64(127) & 127)..(UInt64(197)&
)                        127 : (-16) | 1), UInt8(100), var1571, Int32(103))
                UInt16(213) % ((var165) | 1)
            }, Int32(var3598) % (Int32(var3598) | 1), match (Option<(UInt32,Int32,UInt8,Unit,Range<Int8>)>.Some(
                var3604)) {
                case _ =>
                    var443
                    var274
            })[4]
    }

    func726(Option<Unit>.None)[9]
}

func func652(param653: (Range<Int32>,Bool)): Bool { // block id: 654
    let var693: Interface24 = Class490<Range<Int16>>();
    let var3628: (Option<Unit>) -> Interface24 = func721
    let var3696: (UInt8,Int32,Float64,Bool) = (UInt8(224), Int32(64), (-37.0), ([((Int16(63) & 127)..=(Int16(49) & 127 ):( (-119)|
)                1), ((Int16(-42) & 127)..(Int16(27) & 127 ):( (69 | 1))), ((Int16(81) & 127)..(Int16(-73) & 127 ):( ((-59) | 1))),
        ((Int16(-27) & 127)..(Int16(-100) & 127 ):( ((-8) | 1))), ((Int16(-85) & 127)..(Int16(88) & 127 ):( (-107) | 1)),
        ((Int16(-50) & 127)..(Int16(-1) & 127 ):( ((-116) | 1))), ((Int16(51) & 127)..=(Int16(-82) & 127 ):( ((-123) | 1))),
        ((Int16(69) & 127)..=(Int16(-65) & 127 ):( ((-38) | 1))), ((Int16(-57) & 127)..=(Int16(-105) & 127 ):( (-39) | 1)),
        ((Int16(-19) & 127)..(Int16(57) & 127 ):( (-90) | 1))] is ((UInt8,(Int32,Range<UInt8>,Float64,(Range<Int32>,Bool),
                UInt64,UInt32,Range<UInt32>,UInt16),Int8,Range<UInt64>,Range<Int8>,Range<Int32>,Array<UInt8>,Int32)) -> Unit))
    let var3899: UInt16 = UInt16(103)
    let var3916: (UInt64) -> Option<UInt64> = func1462<Interface23, Option<Option<Unit>>>
    try { // block id: 656
        var loopTimeVar661: Range<UInt64> = ((UInt64(33) & 127)..(UInt64(82) & 127 ):( ((-5) | 1)))
        for (i in loopTimeVar661 where false) {
            var443
        }
        let var3651: Option<Bool> = Option<Bool>.Some(false);
        let var3790: Int32 = Int32(UInt16(79))
        let var3817: Option<(Range<UInt16>,Unit,Range<UInt32>,Range<UInt64>,Float64,Range<UInt16>)> = Option<(Range<UInt16>,
                Unit,Range<UInt32>,Range<UInt64>,Float64,Range<UInt16>)>.None;
        let var3885: ?(Range<Int64>,Range<Int8>,Range<UInt64>,UInt8,UInt32,Int32) = ([(), (), (), (), (), (), (), (),
        (), ()] as (Range<Int64>,Range<Int8>,Range<UInt64>,UInt8,UInt32,Int32))
        func func667(optionalParam668!: Option<Unit> = (() as Unit),
            optionalParam671!: (Range<Int32>,Bool) = (((Int32(117) & 127)..=(Int32(78) & 127 ):( ((-37) | 1))), true),
            namedParam678!: (Range<UInt16>,Unit,Range<UInt32>,Range<UInt64>,Float64,Range<UInt16>),
            namedParam679!: (Unit) -> Bool): Range<UInt8> { // block id: 682
            var var3667: Int8 = Int8(UInt8(66))
            var var3776: Int32 = Int32(110)
            if (match ([Class490<Range<Int16>>(), var690, var693, var693, var693, var693, var690,
            Class490<Range<Int16>>(), var690, var693][3]) {
                case _: UInt64 =>
                    var443
                    true

                case caseVar710: Array<Interface24> => var251

                case _ =>
                    var482 + (-8.0)
                    var251
            }) { // block id: 719
                Option<Unit>.None |> var3628
                ((Int8(-64) & 127)..(Int8(104) & 127 ):( (-128) | 1))
                let var3638: Option<Int32> = (((Float32(Float32(2.0)) as Option<Unit>) as Int16) as Int32)
                var3638.getOrThrow()
            } else if (if ((var3651 ?? var251)) { // block id: 3655
                Int16(-80) <= var2504
            } else if (try { // block id: 3660
                true
            } finally { // block id: 3662
                var251
            }) { // block id: 3664
                var3667 |= var3667
                var631 += var165
                !var251
            } else { // block id: 3676
                var775 ^= var775
                var251
            }) { // block id: 3681
                try { // block id: 3683
                    Int32(-4)
                    var3667 += var3667
                    ((var2155 & 127)..(Int16(38) & 127 ):( (99 | 1)))
                } finally { // block id: 3692
                    if (true) {
                        var3696
                    } else {
                        var3696
                    }
                    var443
                    ((var2504 & 127)..=(Int16(1) & 127 ):( (var298 | 1)))
                }
                match (((var298 & 127)..(18 & 127 ):( (14 | 1)))) {
                    case caseVar3744: Interface24 =>
                        var2504 >>= ((var2155) & 7)
                        var251 &&= true
                        var443

                    case _ =>

                        ()

                    case _ => var2504 *= Int16(109)
                }
                var3769.getOrThrow()
            } else { // block id: 3771
                [var3776, Int32(122), Int32(-40), var3776, var3776, var3783, Int32(46), Int32(-102), var3790, Int32(63)][1]
            }
            let var3930: Int64 = Int64(UInt32(Int32(49)))
            var var3982: UInt32 = UInt32(154)
            match (if (if (var251) { // block id: 3799
                94.0 > var482
            } else if (var251) { // block id: 3804
                var1571 ^= var1571
                false
            } else { // block id: 3809
                false
            }) {
                (var3817 ?? (var2518, var443, ((var1571 & 127)..(var1571 & 127 ):( (var3826 | 1))), ((UInt64(243) & 127)..=(UInt64(1)&
)                        127 : (var298 | 1)), (-94.0), var2518))
            } else {
                (Option<(Range<UInt16>,Unit,Range<UInt32>,Range<UInt64>,Float64,Range<UInt16>)>.None ?? (var2518, var443,
                    ((UInt32(65) & 127)..(UInt32(143) & 127 ):( (var3843 | 1))), var1515, var482, var2518))
            }) {
                case (_: Option<Int32>, caseVar3850: UInt64, caseVar3851, caseVar3852: Range<Int32>, caseVar3853, caseVar3854) =>var2424

                case _ =>
                    var3604
                    namedParam678
                    ((UInt8(129) & 127)..=(UInt8(69) & 127 ):( (85 | 1)))

                case _ =>
                    let var3941: ??(Range<Int64>,Range<Int8>,Range<UInt64>,UInt8,UInt32,Int32) = Option<Option<(Range<Int64>,
                            Range<Int8>,Range<UInt64>,UInt8,UInt32,Int32)>>.None;
                    let var3977: Range<UInt16> = ((UInt16(0) & 127)..(UInt16(161) & 127 ):( (-111) | 1))
                    (var2431, Int16(-53), UInt8(31), var3456, [Class16(var3790,
                                namedParam817: ((var165 & 127)..(var631 & 127 ):( (var3843 | 1))),
                                optionalParam818: Int8(-72), namedParam820: Class16()),
                        Class16(
                                namedParam3497: Option<Option<(Range<Int64>,Range<Int8>,Range<UInt64>,UInt8,UInt32,Int32)>>.
                                Some(var3885),
                                optionalParam3498: [((var165 & 127)..(var165 & 127 ):( (var298 | 1))),
                                ((var165 & 127)..(UInt16(157) & 127 ):( (114 | 1))),
                                ((var3899 & 127)..=(UInt16(15) & 127 ):( ((-112) | 1))), var2518, var2518,
                                ((UInt16(73) & 127)..(UInt16(159) & 127 ):( 73 | 1)),
                                ((UInt16(179) & 127)..=(UInt16(241) & 127 ):( (-5) | 1)),
                                ((UInt16(70) & 127)..(UInt16(144) & 127 ):( (-117) | 1)),
                                ((var631 & 127)..=(var3899 & 127 ):( (14 | 1))), ((UInt16(192) & 127)..=(UInt16(54) & 127 ):( 70 | 1))],
                                optionalParam3500: Option<Float64>.Some(32.0), namedParam3503: var3916),
                        Class16(Int32(27), namedParam817: var2518, optionalParam818: var3667,
                                namedParam820: Class16(
                                    namedParam2676: Class16(namedParam1334: var3604,
                                        optionalParam1335: (((Int32(87) & 127)..=(Int32(-55) & 127 ):( (var3930 | 1))), true),
                                        namedParam1353: var775),
                                    namedParam2677: [((UInt16(207) & 127)..=(UInt16(116) & 127 ):( (-7) | 1)),
                                    ((UInt16(209) & 127)..=(UInt16(71) & 127 ):( (-103) | 1)),
                                    ((UInt16(247) & 127)..=(UInt16(89) & 127 ):( 17 | 1)),
                                    ((UInt16(185) & 127)..(UInt16(123) & 127 ):( (-67) | 1)),
                                    ((UInt16(235) & 127)..=(UInt16(43) & 127 ):( (-7) | 1)),
                                    ((UInt16(20) & 127)..=(UInt16(56) & 127 ):( 12 | 1)),
                                    ((UInt16(83) & 127)..(UInt16(80) & 127 ):( (-81) | 1)),
                                    ((UInt16(0) & 127)..(UInt16(172) & 127 ):( (-44) | 1)),
                                    ((UInt16(76) & 127)..=(UInt16(164) & 127 ):( 6 | 1)),
                                    ((UInt16(38) & 127)..=(UInt16(37) & 127 ):( (-82) | 1))])), var690, var690,
                        Class16(namedParam3497: var3941, namedParam3503: func1462<Interface23, Option<Option<Unit>>>),
                        var690,
                        Class16(
                                namedParam2676: Class16(namedParam1334: (UInt32(115), var3776, UInt8(89), (), var3456),
                                    namedParam1353: UInt8(16)),
                                namedParam2677: [((UInt16(88) & 127)..=(UInt16(121) & 127 ):( ((-70) | 1))),
                                ((UInt16(48) & 127)..=(UInt16(125) & 127 ):( (-100) | 1)),
                                ((UInt16(145) & 127)..=(UInt16(61) & 127 ):( (var3826 | 1))),
                                ((UInt16(112) & 127)..(var3899 & 127 ):( (58 | 1))),
                                ((UInt16(167) & 127)..(var631 & 127 ):( ((-24) | 1))), var2518, var2518, var2518, var2518,
                                var3977]),
                        Class16(
                                namedParam1334: (var3982, Int32(21), var775, (), ((Int8(-29) & 127)..=(Int8(-114) & 127 ):( (96|
)                                        1))), namedParam1353: UInt8(0)), var690], UInt16(233), Float32(34.0), (Int16(84)&
(                            127)..(var2155 & 127 ):( ((-11) | 1))))
                    ()
                    if (var251) {
                        ((var775 & 127)..(var775 & 127 ):( (var3930 | 1)))
                    } else {
                        ((UInt8(190) & 127)..(UInt8(78) & 127 ):( (-69) | 1))
                    }
            }
        }

        func667(optionalParam668: var134, optionalParam671: (((Int32(-29) & 127)..=(Int32(111) & 127 ):( (-35) | 1)), false),
            namedParam678: var4012, namedParam679: func9)
    } catch (_) { // block id: 4023
        match ((var2518, var443, var2957, var1515, var482, ((UInt16(183) & 127)..=(UInt16(144) & 127 ):( 0 | 1)))) {
            case _ => ()

            case _ =>
                ()
                -var3899
                ()
        }
        ((var775 & 127)..=(var775 & 127 ):( (var3826 | 1)))
    }
    let var4050: Array<Bool> = [false, false,
    ([Int32(-9), Int32(-108), Int32(-31), Int32(UInt16(23)), Int32(Int8(-37)), Int32(UInt16(169)), Int32(24), Int32(74),
        Int32(UInt16(209)), Int32(-120)] is Option<(Range<Int64>,Range<Int8>,Range<UInt64>,UInt8,UInt32,Int32)>),
    (62.0 is Array<Range<UInt16>>), (Int64(UInt16(Int8(97))) is Range<Int64>), false, false,
    (Option<(UInt32,Int32,UInt8,Unit,Range<Int8>)>.Some(
            (UInt32(165), Int32(-102), UInt8(167), (), ((Int8(-73) & 127)..=(Int8(19) & 127 ):( 40 | 1)))) is (Option<UInt64>,
            Range<Int64>,Range<UInt64>,Range<UInt16>)), true,
    (((Int8(-113) & 127)..=(Int8(-5) & 127 ):( 103 | 1)) is (Range<Int64>,Range<Int8>,Range<UInt64>,UInt8,UInt32,Int32))]
    var var4097: (Unit,Bool,Range<UInt16>,Rune,Float32,(Range<Int32>,Bool),UInt32,UInt16) = ((), false, ((UInt16(11) & 127)..=(UInt16(118)&
)            127 : (-120) | 1), 'J', Float32(104.0), (((Int32(Int8(-20)) & 127)..=(Int32(Int16(-122)) & 127 ):( (Int64(UInt64(98))|
)                1)), true), UInt32(Int16(95)), UInt16(Int8(-95)))
    (if (var4050[5]) { // block id: 4090
        var var4093: Int8 = Int8(-31)
        var4093 <<= ((var4093) & 7)
        var4097
    } else { // block id: 4117
        if (var251) {
            var1880
        } else {
            var1880
        }
        var var4129: Rune = 'S'
        if (false) {
            (var443, var251, var2518, var4129, var3758, (((Int32(-41) & 127)..(Int32(-128) & 127 ):( 108 | 1)), var251),
                var1571, var631)
        } else {
            var4097
        }
    } is Interface20<Int64>)
}

public func func647(param648: Option<Unit>): Option<UInt32> { // block id: 649
    var var4139: ((Range<Int32>,Bool)) -> Bool = func652
    var var4206: Range<UInt16> = ((UInt16(46) & 127)..(UInt16(31) & 127 ):( 118 | 1))
    let var4213: (Int32,Range<UInt8>,Float64,(Range<Int32>,Bool),UInt64,UInt32,Range<UInt32>,UInt16) = (Int32(UInt16(Int8(2))),
        ((UInt8(UInt8(223)) & 127)..=(UInt8(141) & 127 ):( (Int64(Int32(UInt16(185))) | 1))), (-36.0), (((Int32(1) & 127)..=(Int32(Int16(-38))&
)                127 : (Int64(Int8(-85)) | 1)), (UInt8(UInt8(188)) is (UInt64,Int16,UInt8,Range<Int8>,Array<Interface24>,
                UInt16,Float32,Range<Int16>))), UInt64(230), UInt32(Int8(UInt8(192))), ((UInt32(106) & 127)..=(UInt32(218) &
)            127 : (-69) | 1), UInt16(UInt8(UInt8(63))))
    if (((var187, false) |> var4139)) { // block id: 4144
        var var4150: Array<UInt8> = [UInt8(117), UInt8(Int8(-15)), UInt8(UInt8(UInt8(105))),
        UInt8(Int8(Int8(Int8(106)))), UInt8(UInt8(46)), UInt8(UInt8(207)), UInt8(238), UInt8(145),
        UInt8(UInt8(Int8(Int8(-114)))), UInt8(Int8(Int8(Int8(-115))))]
        var var4203: Int32 = Int32(-49)
        try { // block id: 4146
            if (false) {
                var4150
            } else {
                var4150
            }
            var251 &&= true
            (Int32(-58), var2424, (-7.0), (((var3783 & 127)..(Int32(-48) & 127 ):( ((-81) | 1))), var251), UInt64(168), var1571,
                ((UInt32(54) & 127)..=(UInt32(181) & 127 ):( 7 | 1)), UInt16(113))
        } finally { // block id: 4194
            if (var251) {
                """
.P;~^
n_gU,
"""
            } else {
                var2114
            }
            if (var251) {
                Class16(var4203, namedParam817: var4206, namedParam820: var4209)
            } else {
                var690
            }
            var4213
        }
        [(), var443, (), (), var443, var443, (), (), var443, ()][8]
    } else if (var251) { // block id: 4258
    }
    let var4269: ?Array<Range<Int16>> = ((((Int8(102) & 127)..=(Int8(57) & 127 ):( 59 | 1)), UInt64(227), ((UInt8(181) & 127)..(UInt8(82)&
)            127 : 94 | 1), (UInt32(158), Int32(104), UInt8(160), (), ((Int8(-74) & 127)..(Int8(-8) & 127 ):( 15 | 1))), (UInt8(227)&
(            127)..=(UInt8(125) & 127 ):( (Int64((-62)) | 1)))) as Array<Range<Int16>>)
    var var4340: Rune = 'j'
    match ((if (true) {
        Option<Array<Range<Int16>>>.None
    } else {
        var4269
    } ?? try { // block id: 4287
        var3843 /= (((-10)) | 1)
        [((Int16(-5) & 127)..(Int16(-128) & 127 ):( 112 | 1)), ((Int16(107) & 127)..=(Int16(69) & 127 ):( 91 | 1)),
        ((Int16(4) & 127)..(Int16(-62) & 127 ):( (-38) | 1)), ((Int16(-68) & 127)..(Int16(-39) & 127 ):( 73 | 1)),
        ((Int16(-47) & 127)..=(Int16(-17) & 127 ):( (-66) | 1)), ((Int16(3) & 127)..(Int16(-98) & 127 ):( 19 | 1)),
        ((Int16(-71) & 127)..=(Int16(-19) & 127 ):( (-22) | 1)), ((Int16(99) & 127)..(Int16(-1) & 127 ):( (-83) | 1)),
        ((Int16(80) & 127)..=(Int16(-76) & 127 ):( 104 | 1)), ((Int16(-6) & 127)..(Int16(-121) & 127 ):( (-54) | 1))]
    } finally { // block id: 4292
        [var443, var443, (), var443, var443, var443, var443, var443, (), ()]
        ()
        if (var251) {
            var2554
        } else {
            [((Int16(-48) & 127)..(Int16(-55) & 127 ):( 124 | 1)), ((Int16(70) & 127)..=(Int16(110) & 127 ):( (-11) | 1)),
            ((Int16(25) & 127)..=(Int16(-55) & 127 ):( 77 | 1)), ((Int16(95) & 127)..=(Int16(60) & 127 ):( 9 | 1)),
            ((Int16(-74) & 127)..(Int16(29) & 127 ):( (-9) | 1)), ((Int16(-38) & 127)..=(Int16(12) & 127 ):( 108 | 1)),
            ((Int16(7) & 127)..(Int16(96) & 127 ):( (-53) | 1)), ((Int16(76) & 127)..=(Int16(-94) & 127 ):( (-96) | 1)),
            ((Int16(103) & 127)..=(Int16(-80) & 127 ):( 40 | 1)), ((Int16(-73) & 127)..(Int16(-96) & 127 ):( (-120) | 1))]
        }
    })) {
        case caseVar4311 =>
            var1571 |= UInt32(126)
            ()
            var443

        case caseVar4320: (Range<Int32>,Bool) =>
            var2504 &= Int16(-72)
            ()

        case _: Rune =>
            var631 = var631
            var3758
            var251 &&= false

        case _ =>
            var443
            var4340
            var3783 -= var3783
    }
    var4346
}

main(): Int64 {
    try {
        let var54: (Unit) -> Bool = {lambdaParameter57: Unit => (true is Int16)}
        let var4463: Interface19 = Class16();
        var loopTimeVar4466: Range<UInt64> = ((UInt64(Int32(UInt8(UInt8(39)))) & 127)..=(UInt64(30) & 127 ):( (38 | 1)))
        for (i in loopTimeVar4466 where (() |> var54)) {
            if (var65) {
                Class16(var1152, namedParam71: (), optionalParam72: ((UInt8(150) & 127)..(UInt8(88) & 127 ):( (-72) | 1)),
                    optionalParam74: var845)
            } else {
                var4463
            }
            ()
        }
        var945

        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var925 * var925), 64)
        crccheck.updateBuffer(UInt64(var945 * var945), 64)
        crccheck.updateBuffer(UInt64(var1198 * var1198), 64)
        crccheck.updateBuffer(UInt64(var2791 * var2791), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()

    } catch (e: NoneValueException) {
        println("Exception: NoneValueException")
    }
    return 0
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        buffer = Array<Int64>(buffer_n, {i => 0})
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0,
                0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, {i => 0})
        var byte_c = 1
        var byte_index = 0
        while (value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, {i => 0})
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2 ** 2 * crc_output[i] + 2 ** 1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Aggregate959 {}

extend Class16 {}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_expected_character
// ASSERT: scan parse_expected_expression


