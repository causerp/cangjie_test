/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args

// All global variable need to be defined before use!
public var var_1673022723185_53 : Int16 = Int16(-37)
var var_1673022723185_72 : Bool = (UInt32(Int16(UInt16(7))) is Int64)
public var var_1673022723185_118 : Option<Int32> = Option<Int32>.None
public let var_1673022723185_128 : Array<Int64> = [Int64(Int8(Int8(73))), Int64(37), Int64(UInt32(UInt8(Int8(-8)))), (-113), Int64(UInt32(UInt16(Int16(53)))), Int64(Int8(UInt8(207))), Int64(Int32(UInt8(Int8(-89)))), Int64(Int32(Int8(-26))), Int64(UInt64(Int16(Int8(-89)))), (-28)]
var var_1673022723185_174 : Int64 = Int64(Int8(-107))
public var var_1673022723185_190 : Range<UInt16> = ((UInt16(95)&127)..(UInt16(130)&127):((Int64(UInt16(37))|1)))
public let var_1673022723185_305 : Unit = ()
var var_1673022723185_331 : (Float64, Range<Int32>, Array<UInt64>, Range<UInt16>) = (Float64(Float64(Float32(Float32(-1.0)))), ((Int32(51)&127)..=(Int32(61)&127):((Int64(UInt64(180))|1))), [UInt64(21), UInt64(161), UInt64(169), UInt64(228), UInt64(179), UInt64(4), UInt64(68), UInt64(159), UInt64(6), UInt64(99)], ((UInt16(27)&127)..(UInt16(Int16(-35))&127):((Int64(Int32(Int16(45)))|1))))
public var var_1673022723185_453 : Array<Bool> = [false, true, true, false, true, ((Float64((-74.0)), ((Int32(-98)&127)..(Int32(-54)&127):(98|1)), [UInt64(25), UInt64(46), UInt64(65), UInt64(124), UInt64(154), UInt64(117), UInt64(73), UInt64(76), UInt64(189), UInt64(107)], ((UInt16(147)&127)..(UInt16(14)&127):((-61)|1))) is Range<Int32>), false, (UInt32(138) is Int32), (Int8(-44) is UInt64), false]
var var_1673022723185_530 : Option<Option<Int64>> = (UInt32(UInt8(211)) as Option<Int64>)
let var_1673022723185_549 : Range<Int64> = ((19&127)..=(30&127):((-72)|1))
let var_1673022723185_612 : Range<Int64> = ((91&127)..=((-81)&127):((-97)|1))
public var var_1673022723185_649 : UInt16 = UInt16(236)
public var var_1673022723185_685 : Range<Int8> = ((Int8(-29)&127)..(Int8(55)&127):(122|1))
public var var_1673022723185_748 : ?Range<UInt8> = (((UInt32(UInt32(UInt32(60)))&127)..=(UInt32(239)&127):((35|1))) as Range<UInt8>)
var var_1673022723185_846 : Unit = ()
var var_1673022723185_856 : Struct_1673022723185_312 = Struct_1673022723185_312()
public var var_1673022723185_900 : Unit = ()
var var_1673022723185_913 : ?Range<UInt16> = Option<Range<UInt16>>.None
let var_1673022723185_964 : UInt64 = UInt64(Int16(Int16(Int16(UInt16(206)))))
let var_1673022723185_1005 : String = """
4-GK;
}Ala{l
"""
var var_1673022723185_1013 : Float64 = 66.0
let var_1673022723185_1055 : Bool = true
public enum Enum_1673022723185_17 {
    defaultValue |
    enumValue_1673022723185_22(Int8, Int64, Float32, Int32)
}


public func func_1673022723185_109(param_1673022723185_110 : Range<Int32>) : Float64 { // block id: 111
    var var_1673022723185_121 : Int32 = Int32(47);
    (var_1673022723185_118 ?? var_1673022723185_121);
    if (match (var_1673022723185_128[4]) {
        case 125 | 47 | 8 | -86 => 
            let var_1673022723185_164 : Unit = ();
            var_1673022723185_164;
            ();
            false
        
        case _ => 
            var_1673022723185_121;
            var_1673022723185_174 |= (-25);
            false && false
        
        case caseVar_1673022723185_183 => 
            true
        
        case _ => 
            true
        
    }) { var_1673022723185_190 } else { (if ([false, false, true, false, true, true, true, false, false, true][7]) { (Option<Range<UInt16>>.None ?? ((UInt16(144)&127)..(UInt16(210)&127):((var_1673022723185_174|1)))) } else { match (((UInt32(23)&127)..=(UInt32(192)&127):((-68)|1))) {
        case caseVar_1673022723185_215 => 
            UInt64(125);
            var_1673022723185_190
        
        case _ : Option<Int32> => 
            ((UInt16(6)&127)..=(UInt16(117)&127):((117|1)))
        
        case _ : Option<Int32> => 
            ((UInt32(29)&127)..=(UInt32(85)&127):((var_1673022723185_174|1)));
            ((UInt8(48)&127)..=(UInt8(175)&127):((-30)|1));
            ((UInt16(135)&127)..(UInt16(64)&127):((-3)|1))
        
        case _ => 
            ();
            ((UInt16(114)&127)..(UInt16(8)&127):(120|1))
        
    } } ) } ;
    let var_1673022723185_244 : (Range<UInt16>, Range<Int32>, (Float64, Range<UInt64>, Float64, UInt16, Rune), UInt16) = (((UInt16(198)&127)..=(UInt16(177)&127):(50|1)), ((Int32(Int32(-110))&127)..(Int32(20)&127):((55|1))), (67.0, ((UInt64(237)&127)..=(UInt64(120)&127):(56|1)), 71.0, UInt16(94), r's'), UInt16(Int8(Int8(-110))));
    var_1673022723185_244[2][2]
}


func func_1673022723185_298<T0, T1>(param_1673022723185_299 : T1) : Option<Range<UInt8>> { // block id: 300
    r'8';
    Option<Range<UInt8>>.None
}

public struct Struct_1673022723185_312 {
    public init() { // block id: 314

    }
;
    public static mut prop var_1673022723185_939 : Range<UInt32> { // block id: 940
        get() { // block id: 942
            ();
            ();
            ((UInt32(125)&127)..(UInt32(25)&127):(126|1))
        }

        set(Value) { // block id: 948
            UInt16(Int8(UInt8(54)));
            ();
            ()
        }

    }
}



public interface Interface_1673022723185_509<T0, T1> {

}

public interface Interface_1673022723185_508 <: Interface_1673022723185_509<Rune, Range<UInt16>> {

}

public interface Interface_1673022723185_507<T0> <: Interface_1673022723185_508 {

}

public open class Class_1673022723185_504 <: Interface_1673022723185_507<Array<Bool>> {
    public init() { // block id: 506

    }
;
    static mut prop var_1673022723185_512 : Int64 { // block id: 513
        get() { // block id: 515
            Class_1673022723185_504();
            ();
            Int64(UInt64(UInt32(84)));
            var_1673022723185_1159
        }

        set(Value) { // block id: 523
            var_1673022723185_1159 = Value
        }

    };
    prop var_1673022723185_987 : UInt8 { // block id: 988
        get() { // block id: 990
            UInt8(Int8(UInt8(40)))
        }

    };
    static var var_1673022723185_1159 : Int64 = 24
}

public func func_1673022723185_484() : Unit { // block id: 485
    ((Option<Option<Int64>>.Some(Option<Int64>.Some((-33))) ?? Option<Int64>.None) ?? Int64(UInt8(80))) >> (((Class_1673022723185_504.var_1673022723185_512)) & 7);
    var_1673022723185_305
}

public func func_1673022723185_449(param_1673022723185_450 : Array<Int64>) : Range<Int64> { // block id: 451
    var_1673022723185_453;
    func_1673022723185_484();
    let var_1673022723185_546 : Int64 = (-74);
    match ((var_1673022723185_530, UInt8(176), [((31&127)..((-3)&127):(26|1)), ((118&127)..=((-52)&127):(113|1)), ((9&127)..=(98&127):(((-96)|1))), ((91&127)..=(77&127):((var_1673022723185_546|1))), var_1673022723185_549, ((var_1673022723185_546&127)..=((-77)&127):(((-30)|1))), (((-41)&127)..=(115&127):(87|1)), ((var_1673022723185_546&127)..(var_1673022723185_546&127):((var_1673022723185_546|1))), (((-105)&127)..((-121)&127):((var_1673022723185_546|1))), ((var_1673022723185_174&127)..=(65&127):((var_1673022723185_174|1)))], var_1673022723185_53, 5)[0]) {
        case _ => 
            var_1673022723185_305;
            ();
            if (var_1673022723185_72) { (((-19)&127)..=((-9)&127):(14|1)) } else { ((74&127)..(54&127):((-70)|1)) } 
        
    }
}




func func_1673022723185_6(param_1673022723185_7 : Float32) : Unit { // block id: 8
    var var_1673022723185_12 : Int64 = Int64(Int32(UInt16(186)));
    let var_1673022723185_20 : Enum_1673022723185_17 = Enum_1673022723185_17.enumValue_1673022723185_22(Int8(63), (-67), Float32(-48.0), Int32(Int8(25)));
    let var_1673022723185_57 : Float32 = Float32(56.0);
    let var_1673022723185_264 : (Range<Int32>) -> Float64 = func_1673022723185_109;
    var loopTimeVar_1673022723185_272 : Array<Bool> = [(([73, (-41), (-44), (-52), (-113), 11, 59, 92, (-63), 120] as Int32) is Rune), false, ((((-107)&127)..=(Int64(UInt8(116))&127):(((-41)|1))) is Range<Int8>), true, false, (Int16(-16) is Range<UInt8>), false, false, true, true];
    for (i in loopTimeVar_1673022723185_272 where var_1673022723185_12 <= match (var_1673022723185_20) {
        case enumValue_1673022723185_22(caseVar_1673022723185_34, _, caseVar_1673022723185_35 : UInt32, caseVar_1673022723185_36) => 
            ();
            ();
            var_1673022723185_12
        
        case caseVar_1673022723185_43 => 
            32 % ((var_1673022723185_12) | 1)
        
        case defaultValue => 
            var_1673022723185_53 += Int16(-59);
            var_1673022723185_57;
            var_1673022723185_12
        
        case enumValue_1673022723185_22(_ : Enum_1673022723185_17, caseVar_1673022723185_62 : UInt8, _, _ : UInt64) => 
            ();
            36
        
        case _ => 
            (-93)
        
    }) {
        var loopTimeVar_1673022723185_78 : Array<UInt64> = [UInt64(UInt16(Int16(48))), UInt64(Int32(UInt16(31))), UInt64(UInt16(136)), UInt64(UInt64(172)), UInt64(147), UInt64(91), UInt64(188), UInt64(Int16(Int8(66))), UInt64(166), UInt64(UInt8(116))];
        for (i in loopTimeVar_1673022723185_78 where var_1673022723185_72) {

        };
        let var_1673022723185_268 : Int32 = Int32(-110);
        ((var_1673022723185_268&127)..=(Int32(-20)&127):((99|1)))|>var_1673022723185_264
    };
    let var_1673022723185_365 : (Float64, Range<UInt64>, Float64, UInt16, Rune) = (Float64(Float32(-8.0)), ((UInt64(86)&127)..=(UInt64(59)&127):((-103)|1)), Float64(Float32(105.0)), UInt16(Int8(-64)), r'o');
    let var_1673022723185_376 : Range<Int64> = ((Int64(Int32(-73))&127)..=(Int64(Int8(Int8(Int8(75))))&127):((Int64(UInt32(Int16(97)))|1)));
    let var_1673022723185_760 : ((Float64, Range<UInt64>, Float64, UInt16, Rune), Int64, Range<UInt16>, UInt8, Option<Int64>, Range<UInt16>, Array<UInt64>) = ((Float64(40.0), ((UInt64(Int8(124))&127)..=(UInt64(55)&127):(((-38)|1))), (-125.0), UInt16(163), r'0'), (-74), ((UInt16(51)&127)..(UInt16(UInt16(115))&127):((Int64(Int16(UInt16(103)))|1))), UInt8(UInt8(Int8(UInt8(26)))), (Int32(118) as Int64), ((UInt16(165)&127)..=(UInt16(Int8(-90))&127):((21|1))), [UInt64(144), UInt64(117), UInt64(203), UInt64(59), UInt64(36), UInt64(97), UInt64(98), UInt64(219), UInt64(250), UInt64(42)]);
    let var_1673022723185_853 : Class_1673022723185_504 = Class_1673022723185_504();
    func func_1673022723185_316<T0, T1>(optionalParam_1673022723185_317 ! : Struct_1673022723185_312 = Struct_1673022723185_312()) : Struct_1673022723185_312 { // block id: 319
        let var_1673022723185_362 : String = """
v0R\"D
WIoEY
""";
        let var_1673022723185_431 : UInt64 = UInt64(UInt16(Int16(UInt8(105))));
        let var_1673022723185_628 : Int64 = 95;
        var loopTimeVar_1673022723185_695 : Array<Range<Int64>> = [(((-125)&127)..=((-112)&127):(94|1)), (((-114)&127)..(113&127):(8|1)), (((-123)&127)..(119&127):(77|1)), ((3&127)..(41&127):(95|1)), (((-49)&127)..((-32)&127):(46|1)), ((53&127)..(23&127):((-88)|1)), (((-99)&127)..=(111&127):(87|1)), ((61&127)..(85&127):((-87)|1)), (((-60)&127)..(82&127):(24|1)), ((Int64(Int64(UInt8(188)))&127)..(3&127):(((-78)|1)))];
        for (i in loopTimeVar_1673022723185_695 where var_1673022723185_72) {
            let var_1673022723185_358 : UInt32 = UInt32(72);
            let var_1673022723185_680 : Int8 = Int8(Int8(-52));
            func func_1673022723185_324(namedParam_1673022723185_325 ! : UInt32, namedParam_1673022723185_326 ! : Int8) : Range<Int64> { // block id: 327
                var_1673022723185_331[2];
                let var_1673022723185_393 : Array<Range<Int64>> = [(((-28)&127)..=((-81)&127):(70|1)), ((109&127)..(58&127):(48|1)), (((-119)&127)..=((-6)&127):((-64)|1)), ((75&127)..=((-11)&127):((-116)|1)), ((Int64(UInt64(UInt32(116)))&127)..=((-103)&127):((53|1))), (((-64)&127)..((-116)&127):((-77)|1)), ((100&127)..=(32&127):((-74)|1)), ((113&127)..=(Int64(UInt32(57))&127):((Int64(Int32(Int16(-72)))|1))), ((Int64(69)&127)..=((-48)&127):((26|1))), ((Int64(UInt32(UInt8(80)))&127)..=(Int64(UInt16(71))&127):((Int64(Int16(Int16(-66)))|1)))];
                let var_1673022723185_442 : UInt64 = UInt64(Int16(-67));
                [(var_1673022723185_358, r'5', var_1673022723185_362, var_1673022723185_365, var_1673022723185_376, ((UInt8(43)&127)..=(UInt8(176)&127):((99|1))), Float32(18.0), var_1673022723185_393, [UInt64(86), var_1673022723185_431, var_1673022723185_431, UInt64(237), var_1673022723185_431, UInt64(16), var_1673022723185_431, var_1673022723185_442, var_1673022723185_442, var_1673022723185_442])[4], (var_1673022723185_128|>func_1673022723185_449), try { // block id: 582
                    ();
                    var_1673022723185_305;
                    var_1673022723185_549
                } catch (e: Exception) { // block id: 586
                    ((1&127)..(30&127):((-127)|1))
                } finally { // block id: 588
                    if (true) { (((-9)&127)..((-11)&127):((-62)|1)) } else { var_1673022723185_376 } 
                }, var_1673022723185_549, var_1673022723185_393[3], ((var_1673022723185_174&127)..=(var_1673022723185_174&127):(((-69)|1))), try { // block id: 602
                    if (var_1673022723185_72) { var_1673022723185_376 } else { (((-2)&127)..((-36)&127):((-12)|1)) } 
                } finally { // block id: 607
                    if (var_1673022723185_72) { (((-100)&127)..=(103&127):((-1)|1)) } else { var_1673022723185_612 } 
                }, (((-110)&127)..=((-46)&127):(84|1)), match (Option<Int64>.Some(var_1673022723185_174)) {
                    case _ => 
                        var_1673022723185_305;
                        ();
                        if (false) { var_1673022723185_612 } else { ((var_1673022723185_628&127)..(6&127):((var_1673022723185_174|1))) } 
                    
                    case caseVar_1673022723185_634 : Float32 => 
                        ();
                        var_1673022723185_376
                    
                    case _ => 
                        if (var_1673022723185_72) { ((Int16(-70)&127)..=(Int16(90)&127):((-76)|1)) } else { ((Int16(-10)&127)..(var_1673022723185_53&127):((var_1673022723185_174|1))) } ;
                        var_1673022723185_649++;
                        (((-32)&127)..(14&127):(37|1))
                    
                }, match (Option<Option<Int64>>.None) {
                    case caseVar_1673022723185_656 : Range<Int8> => 
                        ((55&127)..=(121&127):((-77)|1))
                    
                    case caseVar_1673022723185_661 : Array<Bool> => 
                        if (true) { ((39&127)..=(var_1673022723185_628&127):((var_1673022723185_628|1))) } else { ((var_1673022723185_628&127)..=(63&127):((77|1))) } 
                    
                    case _ => 
                        if (false) { ((Int8(-26)&127)..=(var_1673022723185_680&127):(((-108)|1))) } else { var_1673022723185_685 } ;
                        if (var_1673022723185_72) { var_1673022723185_612 } else { (((-113)&127)..=((-78)&127):(81|1)) } 
                    
                }][4]
            }
;
            func_1673022723185_324(namedParam_1673022723185_325 : UInt32(39), namedParam_1673022723185_326 : Int8(-97));
            var_1673022723185_365
        };
        let var_1673022723185_723 : Range<UInt64> = ((UInt64(27)&127)..=(UInt64(200)&127):(111|1));
        var var_1673022723185_726 : Float64 = Float64(Float64(Float32(117.0)));
        var var_1673022723185_802 : Interface_1673022723185_508 = Class_1673022723185_504();
        var var_1673022723185_810 : Int16 = Int16(UInt8(250));
        var var_1673022723185_826 : Int8 = Int8(UInt8(Int8(Int8(Int8(49)))));
        try { // block id: 713
            let var_1673022723185_732 : Rune = r'u';
            if (true) { // block id: 716
                ();
                if (false) { ((-66.0), var_1673022723185_723, var_1673022723185_726, var_1673022723185_649, var_1673022723185_732) } else { var_1673022723185_365 } 
            } else { // block id: 735
                var_1673022723185_365
            };
            var_1673022723185_431;
            let var_1673022723185_744 : Option<Option<Range<UInt8>>> = (UInt8(42) as Option<Range<UInt8>>);
            (var_1673022723185_744 ?? var_1673022723185_748)
        } finally { // block id: 756
            var_1673022723185_760[4];
            var var_1673022723185_838 : UInt32 = UInt32(UInt32(Int32(UInt16(Int16(110)))));
            var var_1673022723185_849 : Interface_1673022723185_508 = Class_1673022723185_504();
            match (((UInt8(218)&127)..=(UInt8(88)&127):((-99)|1))) {
                case caseVar_1673022723185_798 : Array<Range<Int64>> => 
                    var_1673022723185_53;
                    var_1673022723185_802
                
                case caseVar_1673022723185_806 => 
                    var_1673022723185_810--;
                    if (false) { Class_1673022723185_504() } else { Class_1673022723185_504() } 
                
                case _ : Option<Option<Range<UInt8>>> => 
                    if (false) { (((-107)&127)..=((-42)&127):(45|1)) } else { ((3&127)..=(36&127):(25|1)) } ;
                    var_1673022723185_826 >>= ((var_1673022723185_826) & 7);
                    Class_1673022723185_504()
                
                case _ => 
                    var_1673022723185_838 -= UInt32(187);
                    var_1673022723185_846;
                    var_1673022723185_849
                
            };
            (var_1673022723185_853 as Range<UInt8>)
        };
        var_1673022723185_856
    }
;
    let var_1673022723185_975 : Range<UInt8> = ((UInt8(223)&127)..=(UInt8(33)&127):(102|1));
    let var_1673022723185_1032 : Array<Int64> = [(-121), 106, 55, (-19), 107, 77, 6, 61, 39, 121];
    func func_1673022723185_308<T0, T1>(namedParam_1673022723185_309 ! : Range<Int64>) : Range<UInt8> { // block id: 310
        func_1673022723185_316<Interface_1673022723185_509<Rune, Range<UInt16>>, Bool>(optionalParam_1673022723185_317 : if (false) { Struct_1673022723185_312() } else { var_1673022723185_856 } ).func_1673022723185_863(func_1673022723185_484);
        var_1673022723185_975;
        var var_1673022723185_999 : Interface_1673022723185_508 = Class_1673022723185_504();
        ((Option<UInt8>.None ?? var_1673022723185_853.var_1673022723185_987)&127)..(UInt8(Int8(55))&127):((match (var_1673022723185_999) {
            case _ : Int16 =>
                var_1673022723185_1005;
                var_1673022723185_174
            
            case caseVar_1673022723185_1010 => 
                var_1673022723185_1013;
                var_1673022723185_174
            
            case caseVar_1673022723185_1018 => 
                var_1673022723185_846;
                var_1673022723185_999;
                (-22)
            
            case _ => 
                ();
                54 - (-97)
            
        } - var_1673022723185_1032[8]|1))
    }
;
    ((var_1673022723185_305|>func_1673022723185_298<Int64, Unit>) ?? func_1673022723185_308<Range<Int16>, Range<UInt16>>(namedParam_1673022723185_309 : var_1673022723185_376));
    var var_1673022723185_1098 : (Array<UInt64>, Unit, Range<Int64>, Unit, (Range<UInt16>, Range<Int32>, (Float64, Range<UInt64>, Float64, UInt16, Rune), UInt16)) = ([UInt64(129), UInt64(UInt8(Int8(41))), UInt64(185), UInt64(60), UInt64(Int8(102)), UInt64(209), UInt64(Int16(21)), UInt64(21), UInt64(UInt16(Int8(-78))), UInt64(123)], (), (((-112)&127)..=(Int64(UInt16(240))&127):((Int64(Int32(Int16(29)))|1))), (), (((UInt16(92)&127)..=(UInt16(251)&127):(116|1)), ((Int32(96)&127)..(Int32(-127)&127):(60|1)), (Float64(68.0), ((UInt64(252)&127)..=(UInt64(240)&127):((-54)|1)), Float64((-53.0)), UInt16(75), r'd'), UInt16(245)));
    if (if (var_1673022723185_72) { // block id: 1041
        ();
        let var_1673022723185_1046 : UInt8 = UInt8(UInt8(UInt8(147)));
        UInt8(63) != var_1673022723185_1046
    } else { // block id: 1050
        Enum_1673022723185_17.defaultValue;
        ((UInt32(89)&127)..(UInt32(253)&127):((-78)|1));
        var_1673022723185_1055 && var_1673022723185_1055
    }) { // block id: 1058
        if (var_1673022723185_1055) { var_1673022723185_853 } else { Class_1673022723185_504() } ;
        var var_1673022723185_1064 : (Array<UInt64>, Unit, Range<Int64>, Unit, (Range<UInt16>, Range<Int32>, (Float64, Range<UInt64>, Float64, UInt16, Rune), UInt16)) = ([UInt64(0), UInt64(237), UInt64(249), UInt64(107), UInt64(146), UInt64(45), UInt64(58), UInt64(232), UInt64(135), UInt64(177)], (), ((Int64(UInt32(Int8(13)))&127)..((-121)&127):(((-120)|1))), (), (((UInt16(151)&127)..(UInt16(168)&127):(((-50)|1))), ((Int32(75)&127)..=(Int32(UInt8(73))&127):((90|1))), (8.0, ((UInt64(104)&127)..=(UInt64(211)&127):((72|1))), Float64(103.0), UInt16(186), r'q'), UInt16(120)));
        var_1673022723185_1064
    } else { // block id: 1096
        var_1673022723185_1098
    }[1]
}

main(): Int64 {
    try {
        Float32(Float32(121.0))|>func_1673022723185_6;
        var var_1673022723185_1147 : UInt8 = UInt8(UInt8(211));
        UInt64(121) / ((try { // block id: 1145
            var_1673022723185_1147;
            ();
            UInt64(29)
        } finally { // block id: 1152
            var_1673022723185_964 - UInt64(156)
        }) | 1);
        120
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var_1673022723185_53*var_1673022723185_53), 64)
        crccheck.updateBuffer(UInt64(var_1673022723185_174*var_1673022723185_174), 64)
        crccheck.updateBuffer(UInt64(var_1673022723185_649*var_1673022723185_649), 64)
        crccheck.updateBuffer(UInt64(var_1673022723185_964*var_1673022723185_964), 64)
        crccheck.updateBuffer(UInt64(var_1673022723185_1147*var_1673022723185_1147), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Struct_1673022723185_312 {
    func func_1673022723185_863(param_1673022723185_864 : () -> Unit) : Unit { // block id: 866
        if (match (try { // block id: 870
            var_1673022723185_748
        } finally { // block id: 872
            var_1673022723185_53 | var_1673022723185_53;
            var_1673022723185_748
        }) {
            case _ => 
                var_1673022723185_846;
                var_1673022723185_846;
                false
            
            case _ => 
                ();
                ();
                true
            
            case _ => 
                UInt16(177) >= UInt16(126)
            
            case _ => 
                var_1673022723185_72
            
        }) { // block id: 898
            var_1673022723185_900
        };
        var var_1673022723185_956 : Int64 = 96;
        match (match ((Option<Option<Range<UInt16>>>.Some(Option<Range<UInt16>>.Some(((UInt16(254)&127)..(UInt16(59)&127):((-25)|1)))) ?? var_1673022723185_913)) {
            case _ => 
                ((UInt64(30)&127)..(UInt64(1)&127):((-68)|1));
                ();
                [((76&127)..=(49&127):((-114)|1)), ((32&127)..=(43&127):((-3)|1)), (((-109)&127)..=(66&127):(19|1)), (((-51)&127)..=(14&127):(113|1)), ((41&127)..((-54)&127):(89|1)), (((-3)&127)..=((-90)&127):(37|1)), ((34&127)..=(37&127):((-26)|1)), ((48&127)..((-16)&127):(112|1)), (((-114)&127)..(97&127):((-60)|1)), (((-51)&127)..=((-59)&127):((-91)|1))]
            
        }) {
            case _ => 
                var_1673022723185_72 &&= true
            
            case _ => 
                var_1673022723185_846
            
            case caseVar_1673022723185_932 => 
                ()
            
            case _ : Enum_1673022723185_17 => 
                var_1673022723185_939;
                var_1673022723185_956 = (-13)
            
            case _ => 
                ((UInt64(89)&127)..(var_1673022723185_964&127):((var_1673022723185_956|1)));
                ();
                var_1673022723185_900
            
        }
    }

}

extend Enum_1673022723185_17 {

}

