/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args 

public let var45 : Aggregate41 = Aggregate41()
public let var158 : Unit = ()
public let var165 : Int64 = Int64(Int8(-20))
let var520 : Float32 = Float32(Float32(48.0))
var var537 : Array<Bool> = [false, true, true, false, false, false, true, false, false, true]
public var var543 : Bool = (() is Array<Bool>)
var var583 : Bool = false
public let var593 : Range<Int8> = ((Int8(48)&127)..(Int8(UInt8(UInt8(UInt8(8))))&127):((2|1)))
public var var609 : UInt64 = UInt64(58)
public var var620 : Int64 = (-100)
var var625 : ?Unit = (Int32(UInt16(Int8(Int8(-17)))) as Unit)
public var var716 : Rune = r'L'
public var var723 : Int8 = Int8(-54)
public let var727 : Int16 = Int16(126)
public var var732 : UInt16 = UInt16(Int8(UInt8(93)))
var var780 : UInt32 = UInt32(71)
var var787 : UInt8 = UInt8(UInt8(Int8(96)))
public var var818 : String = "SXumbWG#rs"
var var867 : Int32 = Int32(UInt8(UInt8(Int8(5))))
public var var933 : Array<Int32> = [Int32(-90), Int32(61), Int32(-7), Int32(9), Int32(-128), Int32(-92), Int32(-25), Int32(-124), Int32(87), Int32(-23)]
public var var961 : Enum958 = Enum958.defaultValue
public var var967 : Range<UInt64> = ((UInt64(116)&127)..=(UInt64(174)&127):(30|1))
public let var988 : Int16 = Int16(Int16(-99))
public var var1244 : Array<Array<Bool>> = [[(false is Range<UInt64>), ([Int32(-23), Int32(113), Int32(12), Int32(66), Int32(126), Int32(-84), Int32(4), Int32(109), Int32(23), Int32(-52)] is Interface16), true, false, (((UInt16(166)&127)..=(UInt16(196)&127):((48|1))) is Range<UInt32>), (r'Z' is (UInt64) -> Unit), false, true, true, (UInt16(118) is Option<Option<Unit>>)], [true, false, true, true, true, true, false, false, false, true], [false, true, true, true, (Float32(Float32(47.0)) is Option<Option<Unit>>), (Float32(Float32(-32.0)) is Range<UInt32>), (() is UInt8), true, (Int8(63) is Range<Int8>), ([[true, false, true, false, false, true, true, true, true, true], [true, false, false, true, true, true, true, false, true, false], [false, true, true, true, true, false, true, false, true, false], [false, false, true, false, false, true, true, true, false, true], [false, false, false, true, false, false, true, false, true, false], [false, true, true, true, false, true, false, false, false, true], [true, true, false, false, true, true, false, false, false, false], [false, true, false, false, false, false, false, true, true, false], [true, false, true, false, true, false, false, false, true, true], [false, true, true, true, true, true, false, false, true, true]] is Enum958)], [true, false, false, true, true, true, true, true, false, false], [false, (UInt32(194) is Range<UInt16>), true, (((UInt64(188)&127)..=(UInt64(105)&127):(((-33)|1))) is Range<UInt32>), false, (((Int32(14)&127)..(Int32(-83)&127):((-113)|1)) is Range<Int8>), false, (((Int16(19)&127)..=(Int16(102)&127):(19|1)) is Float32), (((UInt32(248)&127)..=(UInt32(5)&127):((-125)|1)) is Range<UInt32>), (Enum527.defaultValue is Range<Int32>)], [false, false, false, true, true, false, true, true, true, true], [false, true, true, false, false, true, false, true, true, true], [false, false, true, false, false, false, true, true, false, false], [false, true, true, ([true, true, false, false, false, false, false, false, true, true] is Enum527), (() is Range<Int16>), false, (((UInt8(196)&127)..=(UInt8(38)&127):((-2)|1)) is Option<Unit>), false, (((UInt64(160)&127)..(UInt64(107)&127):((-105)|1)) is Array<Int32>), false], [true, false, false, true, false, false, false, true, true, true]]
public let var1471 : Array<Bool> = Array<Bool>(10){ i => false }

public interface Interface16 {

}

public open class Class13 <: Interface16 {
    public init() { // block id: 15

    }
;
    static let var19 : Unit = ()
}

public struct Aggregate41 {
    public init() { // block id: 43

    }
;
    public let var161 : Unit = ();
    var var192 : Array<Range<UInt32>> = [((UInt32(42)&127)..=(UInt32(223)&127):((46|1))), ((UInt32(104)&127)..=(UInt32(35)&127):((-43)|1)), ((UInt32(191)&127)..(UInt32(146)&127):((48|1))), ((UInt32(138)&127)..=(UInt32(166)&127):((-35)|1)), ((UInt32(87)&127)..=(UInt32(209)&127):((121|1))), ((UInt32(147)&127)..(UInt32(172)&127):((90|1))), ((UInt32(155)&127)..(UInt32(4)&127):((-41)|1)), ((UInt32(128)&127)..=(UInt32(126)&127):((-41)|1)), ((UInt32(162)&127)..(UInt32(50)&127):((33|1))), ((UInt32(141)&127)..(UInt32(102)&127):(118|1))];
    private let var231 : (UInt64, Range<UInt16>, Array<Array<Bool>>, Unit, Range<Int8>, Array<Array<Bool>>) = (UInt64(229), ((UInt16(43)&127)..(UInt16(82)&127):((-53)|1)), [[false, true, false, false, false, false, false, false, true, false], [true, false, true, false, false, true, true, false, false, false], [true, false, true, true, false, false, true, false, false, true], [true, false, true, true, false, false, false, true, true, true], [false, false, true, false, false, true, false, true, true, true], [false, true, true, false, true, false, true, false, false, false], [false, false, true, true, true, false, true, false, true, true], [true, false, true, false, true, true, true, true, false, false], [false, false, true, true, true, true, true, false, true, false], [true, true, false, false, false, false, true, false, false, true]], (), ((Int8(-34)&127)..=(Int8(42)&127):((94|1))), [[false, true, false, true, false, false, true, false, false, true], [true, true, true, false, true, true, false, false, false, false], [false, false, false, false, true, true, false, false, true, true], [false, false, false, true, true, false, true, false, false, true], [false, true, false, true, true, true, true, false, true, false], [false, true, true, false, true, false, true, true, true, false], [true, false, true, false, true, false, false, true, true, true], [false, true, true, false, true, false, true, false, true, true], [true, false, false, true, false, false, true, true, false, true], [true, true, true, true, true, false, true, true, true, true]]);
    let var373 : Bool = false;
    public func func64(optionalParam65 ! : Float32 = Float32(-34.0), optionalParam67 ! : Array<Bool> = Array<Bool>(10){ i => false }, optionalParam145 ! : Range<Int64> = (((-25)&127)..=(77&127):(29|1)), namedParam147 ! : Int16) : Array<Array<Bool>> { // block id: 148
        if (true) { // block id: 151

        };
        var var182 : UInt16 = UInt16(39);
        match (try { // block id: 154
                (((-9)&127)..=((-44)&127):(77|1))
            } catch (e: Exception) { // block id: 156
                var158;
                var161;
                ((var165&127)..((-114)&127):(((-34)|1)))
            }) {
            case _ => 
                var var175 : Int64 = 62;
                var175 %= ((var175) | 1)
            
            case _ => 
                var182 /= ((UInt16(159)) | 1);
                var158
            
        };
        var var396 : Bool = (((Int16(UInt16(UInt8(218)))&127)..=(Int16(100)&127):((Int64(Int32(Int16(-97)))|1))) is Float64);
        let var460 : Bool = (Int32(Int32(119)) is Int8);
        match (var192[8]) {
            case caseVar222 => 
                var var226 : Int32 = Int32(UInt32(245));
                var226 <<= ((Int32(-108)) & 7);
                var231
            
            case _ : Array<Bool> => 
                -optionalParam65;
                118;
                var231
            
            case _ => 
                let var378 : UInt64 = UInt64(Int16(Int16(UInt8(Int8(67)))));
                var var391 : Range<Int8> = ((Int8(-50)&127)..(Int8(-73)&127):(44|1));
                let var419 : Bool = false;
                if (var373) { var231 } else { (var378, ((UInt16(99)&127)..(var182&127):((38|1))), [[true, false, true, true, false, true, true, true, false, false], [false, true, false, true, true, true, true, false, true, false], [true, false, true, false, false, true, true, true, false, true], [true, true, false, true, false, false, true, false, false, true], [false, true, true, false, false, true, true, true, true, false], [true, false, false, true, true, true, true, false, true, false], [false, true, false, true, true, true, false, false, false, true], [true, false, false, false, false, true, false, true, true, true], [false, false, false, false, false, false, true, false, true, false], [false, false, true, true, false, false, true, true, true, true]], (), var391, [[var396, true, false, false, var396, true, true, false, true, var396], optionalParam67, [var373, var419, var373, true, false, false, var419, true, false, var419], optionalParam67, optionalParam67, [var419, var373, false, var396, var396, false, false, false, var419, var373], [false, var373, var373, true, var373, var373, false, var373, var373, true], optionalParam67, [var373, var373, var396, var419, var460, true, false, false, false, true], [var373, var396, var419, var419, var419, true, var460, false, var460, false]]) } 
            
        }[2]
    }
;
    let var482 : Range<Int64> = (((-40)&127)..=(63&127):(35|1));
    var var502 : Int16 = Int16(65);
    public let var510 : String = "pKCq*a(a\"I";
    public static let var514 : Range<Int16> = ((Int16(-97)&127)..=(Int16(115)&127):((-10)|1));
    public func func48(namedParam49 ! : UInt64) : Unit { // block id: 50
        func64(optionalParam145 : var482, namedParam147 : Int16(93))[1][0];
        ((try { // block id: 494
            ();
            var158;
            if (true) { ((Int16(98)&127)..(var502&127):(((-118)|1))) } else { ((Int16(63)&127)..(Int16(-37)&127):(102|1)) } 
        } catch (_) { // block id: 506
            if (false) { var510 } else { "j\"~&yS&T2Q" } ;
            var514
        } finally { // block id: 516
            var158;
            var520 - var520;
            var514
        } as Unit) ?? ())
    }
;
    public init(param930 : Float64) { // block id: 931
        var933;
        var158
    }

}


public enum Enum527 {
    defaultValue |
    enumValue530(Array<Array<Bool>>, Range<Int8>, Range<Int64>)
}
func func37(param38 : UInt16) : Rune { // block id: 39
    var45.func48(namedParam49 : match (Enum527.enumValue530([[true, false, false, true, true, true, true, true, true, false], var537, [false, false, true, false, true, true, false, true, true, true], [true, var543, true, var543, false, var543, var543, false, var543, true], [false, var543, var543, var543, true, var543, var543, var543, var543, var543], [false, false, true, false, true, true, true, false, true, false], var537, var537, [var543, false, false, true, false, true, false, var543, false, var543], [false, true, var583, var583, false, var583, var543, var543, false, false]], var593, (((-101)&127)..((-41)&127):((-10)|1)))) {
        case enumValue530(caseVar604, caseVar605, _) => 
            param38;
            var609
        
        case caseVar613 : Enum527 => 
            UInt64(77)
        
        case _ => 
            var620 |= var620;
            UInt64(228)
        
    });
    var625;
    let var635 : ?Unit = Option<Unit>.Some(());
    var var666 : Range<Int64> = (((-54)&127)..(55&127):((3|1)));
    let var688 : Unit = ();
    var var703 : UInt32 = UInt32(Int8(-67));
    match ((match (var635) {
            case caseVar640 => 
                var var645 : Int16 = Int16(Int8(UInt8(190)));
                ((Int16(-79)&127)..=(var645&127):((var165|1)));
                if (false) { ((var620&127)..=(93&127):((var620|1))) } else { (((-9)&127)..=(48&127):((-52)|1)) } ;
                var var662 : Int64 = (-71);
                if (false) { (((-25)&127)..=(var662&127):((19|1))) } else { var666 } 
            
            case _ => 
                if (var583) { var666 } else { var666 } 
            
            case _ => 
                Aggregate41();
                var158;
                var666
            
        } as Unit)) {
        case _ : Range<Int8> => 
            Float32(-126.0);
            var688;
            r'm'
        
        case caseVar693 : Class13 => 
            ();
            r'D'
        
        case caseVar699 => 
            var703 <<= ((UInt32(153)) & 7);
            var var708 : Rune = r'3';
            var708
        
        case _ : Range<Int16> => 
            if (true) { var716 } else { r'8' } 
        
        case _ => 
            var723 = Int8(-101);
            var727;
            r'L'
        
    }
}

public func func768(param769 : UInt16) : Rune { // block id: 770
    var158;
    var var794 : Int32 = Int32(Int32(75));
    try { // block id: 773
        var716
    } catch (e: Exception) { // block id: 775
        try { // block id: 777
            var780 ^= UInt32(64);
            r'r'
        } finally { // block id: 784
            var787 *= var787;
            var794 = Int32(-53);
            var716
        }
    } finally { // block id: 799
        ();
        (Option<Unit>.Some(var158) ?? var158);
        if (true) { r'T' } else { var716 } 
    }
}

public func func768(namedParam760 ! : UInt16, namedParam761 ! : Aggregate41, namedParam762 ! : Aggregate41, namedParam763 ! : Unit) : Int64 { // block id: 764
    var158;
    match ((UInt16(207) / ((namedParam760) | 1)|>func768)) {
        case _ => 
            (-8)
        
    }
}



func func824(param825 : (UInt16, Aggregate41, Aggregate41, Unit) -> Int64) : Aggregate41 { // block id: 831
    let var848 : Range<UInt64> = ((UInt64(174)&127)..=(UInt64(Int32(46))&127):((Int64(UInt8(UInt8(Int8(-120))))|1)));
    let var883 : ?Int32 = Option<Int32>.None;
    match ((Option<Option<Unit>>.None ?? var625)) {
        case caseVar843 => 
            if (false) { var848 } else { var848 } ;
            Class13();
            let var860 : Int32 = Int32(-70);
            var860
        
        case caseVar864 : Interface16 => 
            var867
        
        case _ => 
            Int32(111)
        
    } & (if (false) { var883 } else { var883 }  ?? [Int32(-42), Int32(124), Int32(-6), Int32(105), Int32(-58), Int32(89), Int32(115), Int32(16), Int32(37), Int32(8)][8]);
    var var912 : ??Unit = (((UInt32(119)&127)..=(UInt32(12)&127):((-54)|1)) as Option<Unit>);
    match ((try { // block id: 893
            Option<Unit>.None
        } catch (_) { // block id: 895
            var165;
            var867 += var867;
            var625
        } finally { // block id: 901
            Int8(-79);
            var625
        } as Int32)) {
        case caseVar906 => 
            if (var543) { Option<Option<Unit>>.None } else { var912 } ;
            if (var583) { var45 } else { Aggregate41() } 
        
        case _ => 
            Aggregate41()
        
    }
}

public func func937(namedParam760 : UInt16, namedParam761 : Aggregate41, namedParam762 : Aggregate41, namedParam763 : Unit) : Int64 { // block id: 764
    var158;
    match ((UInt16(207) / ((namedParam760) | 1)|>func768)) {
        case _ => 
            (-8)
        
    }
}

public enum Enum958 {
    defaultValue
}
func func31(param32 : Bool) : Int64 { // block id: 33
    var var923 : ((UInt16, Aggregate41, Aggregate41, Unit) -> Int64) -> Aggregate41 = { lambdaParameter926 : (UInt16, Aggregate41, Aggregate41, Unit) -> Int64 => Aggregate41(1.0) };
    var var943 : (UInt16, Aggregate41, Aggregate41, Unit) -> Int64 = { lambdaParameter946 : UInt16, lambdaParameter947 : Aggregate41, lambdaParameter948 : Aggregate41, lambdaParameter949 : Unit => Int64(Int16(-61)) };
    var var999 : (UInt64, Range<UInt16>, Array<Array<Bool>>, Unit, Range<Int8>, Array<Array<Bool>>) = (UInt64(187), ((UInt16(UInt16(253))&127)..=(UInt16(2)&127):((Int64(UInt8(Int8(9)))|1))), [[false, true, true, false, true, true, true, true, true, false], [true, false, true, true, true, false, true, true, true, false], [true, false, false, true, false, false, false, false, true, true], [false, false, false, true, true, false, true, true, false, true], [true, true, true, true, true, false, false, false, false, false], [true, false, false, false, true, true, true, true, false, false], [false, false, true, true, false, true, true, false, false, true], [false, true, false, false, false, true, false, false, false, true], [false, false, true, false, false, false, true, true, true, false], [false, true, true, false, true, false, false, false, false, false]], (), ((Int8(98)&127)..=(Int8(76)&127):((Int64(UInt64(Int32(-27)))|1))), [[true, false, true, true, true, true, true, false, true, true], [false, false, true, true, true, true, false, false, true, false], [(UInt64(59) is (UInt16) -> Rune), ("@IwwO9Pq1c" is UInt16), true, true, true, false, false, (((UInt64(139)&127)..=(UInt64(87)&127):(((-18)|1))) is UInt8), false, (Int8(-99) is Rune)], [false, true, true, true, true, false, false, true, false, true], [true, true, ([((UInt32(11)&127)..=(UInt32(80)&127):((72|1))), ((UInt32(58)&127)..=(UInt32(174)&127):(((-81)|1))), ((UInt32(156)&127)..(UInt32(212)&127):(12|1)), ((UInt32(172)&127)..=(UInt32(163)&127):((-113)|1)), ((UInt32(135)&127)..(UInt32(243)&127):(51|1)), ((UInt32(203)&127)..(UInt32(215)&127):(99|1)), ((UInt32(30)&127)..=(UInt32(127)&127):((-113)|1)), ((UInt32(181)&127)..=(UInt32(108)&127):(81|1)), ((UInt32(2)&127)..=(UInt32(82)&127):((17|1))), ((UInt32(135)&127)..=(UInt32(62)&127):(((-35)|1)))] is Float64), (Option<Unit>.Some(()) is Option<Option<Unit>>), false, (Option<Unit>.None is Bool), false, false, (UInt16(248) is Float64), (Enum958.defaultValue is Class13)], [false, true, (Class13() is Range<Int8>), (((UInt64(189)&127)..(UInt64(31)&127):((115|1))) is Rune), true, (((Int8(-27)&127)..(Int8(0)&127):(((-32)|1))) is UInt32), ([[true, true, true, true, false, false, false, false, true, true], [true, true, true, true, false, true, false, true, false, true], [false, true, true, false, true, true, true, true, false, true], [false, true, false, true, true, false, false, true, false, true], [false, true, true, false, false, false, true, false, true, true], [true, false, false, true, true, false, true, true, false, true], [true, false, true, false, false, false, false, false, true, true], [true, false, false, false, true, false, false, true, true, true], [true, false, false, true, false, false, true, false, true, true], [true, true, false, true, false, false, true, false, false, false]] is Int32), (Class13() is Option<Int32>), true, true], [(42 is Range<Int32>), (Int8(-117) is Class13), (Enum958.defaultValue is Range<Int32>), false, ((-121.0) is Range<UInt16>), (() is UInt8), (Option<Int32>.None is Range<UInt16>), true, true, true], [false, true, false, false, true, true, false, false, false, false], [(true is UInt64), (Class13() is Option<Unit>), true, (Class13() is (Float32, Array<Bool>, Range<Int64>, Int16) -> Array<Array<Bool>>), ([false, true, false, false, false, true, true, false, true, false] is Float32), true, (UInt16(99) is Range<Int32>), (r'C' is (UInt16) -> Rune), false, (((104&127)..((-12)&127):((-59)|1)) is Array<Bool>)], [(Option<Option<Unit>>.Some(Option<Unit>.Some(())) is Class13), true, (r'I' is Range<UInt16>), (UInt32(189) is Range<Int16>), false, true, false, (() is Bool), ((((-22)&127)..=(54&127):((-60)|1)) is (UInt16, Aggregate41, Aggregate41, Unit) -> Int64), (Enum958.defaultValue is Unit)]]);
    let var1240 : UInt16 = UInt16(82);
    let var1402 : Bool = true;
    var var1426 : Bool = ((((UInt16(Int8(43))&127)..=(UInt16(UInt8(144))&127):((Int64(Int32(-60))|1))) is Array<Bool>) is Array<Range<UInt32>>);
    match ((var732|>func37)) {
        case r'D' | r'5' => 
            var158;
            let var741 : Unit = ();
            var741;
            var620
        
        case r'T' => 
            var165;
            105
        
        case _ : Unit => 
            var var753 : Int64 = (-70);
            var753
        
        case _ => 
            (-8)
        
    } - func768(namedParam760 : match (var818) {
        case _ => 
            UInt16(188)
        
    }, namedParam761 : (var943|>var923), namedParam762 : if (true) { var45 } else { var45 } , namedParam763 : match (var961) {
        case defaultValue => 
            var967;
            var609 ^= UInt64(54);
            ()
        
        case _ : Int8 => 
            var158;
            ();
            var583 ||= param32
        
        case defaultValue => 
            var158;
            var727 & var988;
            var609 >>= ((var609) & 7)
        
        case _ => 
            let var1405 : Bool = false;
            if (var583) { var999 } else { (var609, ((UInt16(99)&127)..(var1240&127):((var165|1))), var1244, var158, var593, [[true, var543, var543, false, param32, param32, var543, param32, param32, true], [false, true, var1402, var1405, var543, true, false, false, var543, var543], [false, var583, false, false, false, var583, true, false, param32, true], [var1426, true, false, param32, var1405, false, var583, param32, false, var543], [true, true, false, true, false, true, false, false, true, true], [false, false, true, true, var1402, var1405, var543, var543, var1426, param32], [false, true, true, false, false, var1426, false, var1402, false, var1402], [false, true, true, true, true, true, false, false, false, true], var537, var1471]) } ;
            var158
        
    })
}


main(): Int64 {
    try {
        (Option<Unit>.None ?? Class13.var19);
        UInt8(try { // block id: 23
            UInt8(56)
        } catch (_) { // block id: 25
            var var27 : UInt8 = UInt8(UInt8(245));
            var27
        });
        var var1574 : (Bool) -> Int64 = func31;
        (Option<Bool>.Some(var583) ?? var583)|>var1574
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var620*var620), 64)
        crccheck.updateBuffer(UInt64(var723*var723), 64)
        crccheck.updateBuffer(UInt64(var727*var727), 64)
        crccheck.updateBuffer(UInt64(var732*var732), 64)
        crccheck.updateBuffer(UInt64(var867*var867), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Aggregate41 {

}

extend Class13 {

}

