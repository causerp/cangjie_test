/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args 

public var var_1690317770616_22 : (Int32, Enum_1690317770616_11, Int16) = (Int32(Int32(UInt8(UInt8(184)))), Enum_1690317770616_11.defaultValue, Int16(UInt8(Int8(UInt8(25)))))
let var_1690317770616_123 : Unit = ()
public let var_1690317770616_126 : Option<Array<Int16>> = ([UInt64(UInt64(Int32(-87))), UInt64(173), UInt64(74), UInt64(185), UInt64(168), UInt64(Int8(UInt8(111))), UInt64(71), UInt64(184), UInt64(Int16(Int16(-88))), UInt64(UInt16(84))] as Array<Int16>)
public let var_1690317770616_166 : Int64 = Int64(Int32(Int32(Int8(UInt8(151)))))
public let var_1690317770616_237 : Option<Unit> = (((UInt32(UInt32(164))&127)..(UInt32(UInt32(188))&127):(49|1)) as Unit)
public let var_1690317770616_268 : Bool = (((Int16(Int16(-8))&127)..(Int16(Int16(121))&127):((-119)|1)) is Rune)
public let var_1690317770616_311 : (Range<UInt64>, Int64, Rune, Option<Array<Int16>>, Int64, Int8, Int64) = (((UInt64(UInt64(204))&127)..=(UInt64(UInt64(70))&127):((-101)|1)), (-118), r'P', Option<Array<Int16>>.None, Int64(UInt16(30)), Int8(84), Int64(64))
public let var_1690317770616_376 : UInt64 = UInt64(175)
public let var_1690317770616_383 : Range<Int16> = ((Int16(Int16(110))&127)..=(Int16(Int16(69))&127):(52|1))
var var_1690317770616_406 : Bool = (Struct_1690317770616_338() is Array<Int16>)
let var_1690317770616_505 : (Array<Bool>, Int16, Range<UInt16>, UInt32, Int8, Range<Int16>, Range<Int64>) = ([(() is Int64), ((((Int8(Int8(-71))&127)..(Int8(Int8(33))&127):(96|1)) is Range<UInt64>) is Option<(Array<Bool>, Int16, Range<UInt16>, UInt32, Int8, Range<Int16>, Range<Int64>)>), true, ((r'8' as (Int32, Enum_1690317770616_11, Int16)) is Range<Int32>), true, (Int32(88) is Range<Int64>), false, false, true, true], Int16(UInt16(16)), ((UInt16(UInt16(208))&127)..=(UInt16(UInt16(140))&127):((-55)|1)), UInt32(13), Int8(UInt8(120)), ((Int16(Int16(-17))&127)..=(Int16(Int16(-40))&127):((-118)|1)), ((Int64((-83))&127)..(Int64(Int64(Int8(UInt8(1))))&127):(Int64(UInt32(28))|1)))
var var_1690317770616_566 : (Range<Int32>, Class_1690317770616_49, UInt8, UInt64, UInt8, Int64) = (((Int32(Int32(0))&127)..(Int32(Int32(55))&127):((-62)|1)), Class_1690317770616_49(), UInt8(UInt8(Int8(Int8(46)))), UInt64(Int16(UInt16(UInt8(216)))), UInt8(68), Int64(UInt8(UInt8(UInt8(242)))))
public var var_1690317770616_730 : Rune = r'q'
var var_1690317770616_742 : UInt32 = UInt32(133)
public let var_1690317770616_791 : Class_1690317770616_49 = Class_1690317770616_49()
let var_1690317770616_879 : UInt64 = UInt64(Int8(UInt8(Int8(-77))))
public var var_1690317770616_888 : UInt16 = UInt16(87)
public let var_1690317770616_943 : (Unit, Rune, UInt64, UInt16) = ((), r'n', UInt64(71), UInt16(50))
public var var_1690317770616_1133 : Option<Bool> = Option<Bool>.None
let var_1690317770616_1332 : Int32 = Int32(Int32(Int8(Int8(-88))))
public var var_1690317770616_1340 : Option<Option<Unit>> = Option<Option<Unit>>.None
public var var_1690317770616_1381 : UInt8 = UInt8(UInt8(75))
let var_1690317770616_1620 : ?Int64 = (Option<Array<Int16>>.None as Int64)
public enum Enum_1690317770616_11 {
    defaultValue
}

public open class Class_1690317770616_49 <: Resource {
    public init() { // block id: 51

    }
;
    let var_1690317770616_56 : Bool = true;
    prop var_1690317770616_421 : Unit { // block id: 422
        get() { // block id: 424
            ();
            ()
        }

    };
    static var var_1690317770616_558 : Int64 = 101;
    func func_1690317770616_292(optionalParam_1690317770616_293 ! : String = """
DgR&n
AW}Ez
""", namedParam_1690317770616_295 ! : UInt8) : Option<Array<Int16>> { // block id: 296
        let var_1690317770616_392 : (Range<UInt32>) -> Option<Array<Int16>> = func_1690317770616_359;
        try { // block id: 564
            var_1690317770616_566
        } finally { // block id: 586
            Option<Array<Int16>>.None;
            let var_1690317770616_589 : Option<Bool> = (((Int32(Int32(Int16(-121)))&127)..=(Int32(Int32(-66))&127):(84|1)) as Bool);
            var_1690317770616_589;
            (((Int32(Int32(90))&127)..(Int32(Int32(16))&127):(83|1)), Class_1690317770616_49(), UInt8(63), UInt64(241), UInt8(48), var_1690317770616_558)
        }[1]|>(func_1690317770616_394~>var_1690317770616_392)
    }
;
    static let var_1690317770616_636 : Array<Bool> = [true, false, false, true, false, false, true, false, true, true];
    private static prop var_1690317770616_673 : Array<Option<Bool>> { // block id: 674
        get() { // block id: 676
            ();
            ((Int32(-12), Enum_1690317770616_11.defaultValue, Int16(UInt8(7))) as Bool);
            [(() as Bool), Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, (((), r'o', UInt64(194), UInt16(0)) as Bool), ([Int16(-88), Int16(41), Int16(104), Int16(-63), Int16(-104), Int16(81), Int16(81), Int16(-13), Int16(-121), Int16(-31)] as Bool), ((() as Bool) as Bool), Option<Bool>.None, (Option<Unit>.None as Bool), (((UInt16(UInt16(46))&127)..=(UInt16(UInt16(24))&127):((-49)|1)) as Bool)]
        }

    };
    static func func_1690317770616_629(param_1690317770616_630 : Float32) : Rune { // block id: 631
        var loopTimeVar_1690317770616_671 : Int64 = 0;
        while ((if (var_1690317770616_636[2]) { // block id: 649
            var var_1690317770616_654 : Option<Bool> = (((UInt8(UInt8(55))&127)..(UInt8(UInt8(235))&127):(21|1)) as Bool);
            if (var_1690317770616_268) { Option<Bool>.None } else { var_1690317770616_654 } ;
            true && false
        } else { // block id: 660
            UInt64(173) << ((var_1690317770616_376) & 7);
            ();
            var_1690317770616_268
        }) && loopTimeVar_1690317770616_671 < 100 ) {
            loopTimeVar_1690317770616_671++;
            let var_1690317770616_668 : Range<UInt8> = ((UInt8(UInt8(72))&127)..(UInt8(UInt8(48))&127):(116|1));
            var_1690317770616_668
        };
        var_1690317770616_673;
        try { // block id: 717
            let var_1690317770616_721 : Array<Range<UInt16>> = [((UInt16(UInt16(186))&127)..(UInt16(UInt16(122))&127):(59|1)), ((UInt16(UInt16(194))&127)..(UInt16(UInt16(68))&127):((-118)|1)), ((UInt16(UInt16(105))&127)..=(UInt16(UInt16(105))&127):((-97)|1)), ((UInt16(UInt16(100))&127)..=(UInt16(UInt16(247))&127):((-16)|1)), ((UInt16(UInt16(208))&127)..(UInt16(UInt16(89))&127):(110|1)), ((UInt16(UInt16(185))&127)..(UInt16(UInt16(121))&127):((-101)|1)), ((UInt16(UInt16(4))&127)..=(UInt16(UInt16(177))&127):((-5)|1)), ((UInt16(UInt16(47))&127)..=(UInt16(UInt16(47))&127):((-26)|1)), ((UInt16(UInt16(202))&127)..(UInt16(UInt16(202))&127):(83|1)), ((UInt16(UInt16(174))&127)..(UInt16(UInt16(119))&127):((-119)|1))];
            var_1690317770616_721[7];
            var var_1690317770616_736 : Int16 = Int16(125);
            var var_1690317770616_739 : Range<UInt16> = ((UInt16(UInt16(77))&127)..(UInt16(UInt16(191))&127):(26|1));
            try { // block id: 725
                if (false) { r'o' } else { var_1690317770616_730 } 
            } catch (e: Exception) { // block id: 732
                var var_1690317770616_745 : Int8 = Int8(UInt8(158));
                ([false, false, false, true, true, false, false, false, true, false], var_1690317770616_736, var_1690317770616_739, var_1690317770616_742, var_1690317770616_745, ((Int16(Int16(-57))&127)..=(Int16(Int16(11))&127):(70|1)), ((Int64((-126))&127)..=(Int64(var_1690317770616_558)&127):(var_1690317770616_558|1)));
                r'T'
            }
        } catch (e: Exception) { // block id: 754
            var_1690317770616_730
        } finally { // block id: 756
            var_1690317770616_123;
            var var_1690317770616_771 : Unit = ();
            [var_1690317770616_123, var_1690317770616_123, (), (), var_1690317770616_123, var_1690317770616_123, (), var_1690317770616_123, (), var_1690317770616_771][0];
            (var_1690317770616_730, UInt64(145))[0]
        }
    }
;
    var var_1690317770616_794 : UInt64 = UInt64(166);
    mut prop var_1690317770616_965 : (Unit, Rune, UInt64, UInt16) { // block id: 966
        get() { // block id: 968
            ();
            ();
            ((), r'x', UInt64(160), UInt16(UInt8(203)))
        }

        set(Value) { // block id: 979
            ();
            ();
            ()
        }

    };
    static mut prop var_1690317770616_988 : Array<Int16> { // block id: 989
        get() { // block id: 991
            [Int16(-121), Int16(UInt16(Int8(-29))), Int16(55), Int16(UInt8(243)), Int16(31), Int16(-29), Int16(Int8(UInt8(7))), Int16(-75), Int16(54), Int16(-12)];
            var_1690317770616_1657
        }

        set(Value) { // block id: 1010
            var_1690317770616_1657 = Value
        }

    };
    static let var_1690317770616_1195 : Array<Range<UInt16>> = [((UInt16(UInt16(18))&127)..=(UInt16(UInt16(34))&127):((-89)|1)), ((UInt16(UInt16(66))&127)..(UInt16(UInt16(211))&127):((-56)|1)), ((UInt16(UInt16(77))&127)..(UInt16(UInt16(58))&127):(29|1)), ((UInt16(UInt16(229))&127)..(UInt16(UInt16(180))&127):(90|1)), ((UInt16(UInt16(253))&127)..=(UInt16(UInt16(209))&127):(83|1)), ((UInt16(UInt16(38))&127)..(UInt16(UInt16(24))&127):((-3)|1)), ((UInt16(UInt16(166))&127)..(UInt16(UInt16(109))&127):(104|1)), ((UInt16(UInt16(227))&127)..=(UInt16(UInt16(176))&127):((-53)|1)), ((UInt16(UInt16(131))&127)..=(UInt16(UInt16(194))&127):((-110)|1)), ((UInt16(UInt16(10))&127)..(UInt16(UInt16(122))&127):((-85)|1))];
    private static let var_1690317770616_1374 : Float64 = 10.0;
    private static mut prop var_1690317770616_1530 : Int8 { // block id: 1531
        get() { // block id: 1533
            Int8(UInt8(120))
        }

        set(Value) { // block id: 1538
            ()
        }

    };
    public open func func_1690317770616_1282(param_1690317770616_1283 : Range<UInt64>) : Option<Enum_1690317770616_11> { // block id: 1284
        let var_1690317770616_1304 : Int16 = Int16(8);
        let var_1690317770616_1355 : (Float64, UInt16, Float64, Int16, Unit, UInt8, Int64) = (Float64(14.0), UInt16(Int16(UInt8(92))), (-95.0), Int16(106), (), UInt8(17), Int64(Int64(UInt32(UInt32(223)))));
        if ((if (false) { // block id: 1289
            ();
            ();
            var_1690317770616_730
        } else if (var_1690317770616_406) { // block id: 1294
            (((Int32(Int32(-21))&127)..=(Int32(Int32(-32))&127):(41|1)), var_1690317770616_791, UInt8(217), var_1690317770616_879, UInt8(90), (-52));
            var_1690317770616_1304 - Int16(126);
            if (var_1690317770616_268) { var_1690317770616_730 } else { var_1690317770616_730 } 
        } else { // block id: 1311
            if (var_1690317770616_406) { r'Y' } else { var_1690317770616_730 } 
        } is Array<Unit>)) { // block id: 1316
            var var_1690317770616_1318 : ?Float32 = ((((), r'z', UInt64(208), UInt16(217)) as (Int32, Enum_1690317770616_11, Int16)) as Float32);
            var_1690317770616_1318;
            if (var_1690317770616_268) { // block id: 1328
                ((Int32(Int32(1))&127)..=(Int32(var_1690317770616_1332)&127):(var_1690317770616_558|1))
            } else { // block id: 1338
                var_1690317770616_1340;
                var var_1690317770616_1349 : Range<Int32> = ((Int32(Int32(-105))&127)..=(Int32(Int32(26))&127):((-116)|1));
                if (true) { ((Int32(var_1690317770616_1332)&127)..=(Int32(var_1690317770616_1332)&127):((-61)|1)) } else { var_1690317770616_1349 } 
            }
        } else { // block id: 1351
            var_1690317770616_1355[4];
            (var_1690317770616_1374, UInt16(175), var_1690317770616_1374, var_1690317770616_1304, (), var_1690317770616_1381, 10)[4];
            (true, ((Int32(Int32(-79))&127)..=(Int32(Int32(89))&127):(44|1)), [var_1690317770616_56, var_1690317770616_406, var_1690317770616_268, var_1690317770616_268, true, var_1690317770616_56, true, true, true, var_1690317770616_56], var_1690317770616_794)[1]
        };
        var var_1690317770616_1415 : ?(Int64, UInt32, (String, Int64, UInt16, (Array<Bool>, Int16, Range<UInt16>, UInt32, Int8, Range<Int16>, Range<Int64>), UInt64, Bool, Range<UInt8>, (Unit, Rune, UInt64, UInt16)), (Float64, UInt16, Float64, Int16, Unit, UInt8, Int64), String, Bool) = Option<(Int64, UInt32, (String, Int64, UInt16, (Array<Bool>, Int16, Range<UInt16>, UInt32, Int8, Range<Int16>, Range<Int64>), UInt64, Bool, Range<UInt8>, (Unit, Rune, UInt64, UInt16)), (Float64, UInt16, Float64, Int16, Unit, UInt8, Int64), String, Bool)>.None;
        var var_1690317770616_1430 : (Int64, UInt32, (String, Int64, UInt16, (Array<Bool>, Int16, Range<UInt16>, UInt32, Int8, Range<Int16>, Range<Int64>), UInt64, Bool, Range<UInt8>, (Unit, Rune, UInt64, UInt16)), (Float64, UInt16, Float64, Int16, Unit, UInt8, Int64), String, Bool) = (Int64(Int16(125)), UInt32(145), (###"?\\KE}^(q3e"###, Int64(Int16(-20)), UInt16(133), ([false, false, false, true, true, true, false, true, true, true], Int16(-70), ((UInt16(UInt16(213))&127)..(UInt16(UInt16(30))&127):(53|1)), UInt32(UInt16(54)), Int8(8), ((Int16(Int16(-113))&127)..(Int16(Int16(-17))&127):((-6)|1)), ((Int64((-23))&127)..(Int64((-11))&127):((-16)|1))), UInt64(57), (Enum_1690317770616_11.defaultValue is Enum_1690317770616_11), ((UInt8(UInt8(UInt8(177)))&127)..(UInt8(UInt8(103))&127):(Int64(UInt16(211))|1)), ((), r'9', UInt64((-45)), UInt16(Int16(35)))), ((-36.0), UInt16(Int16(-49)), Float64(Float64(Float32(-88.0))), Int16(106), (), UInt8(25), Int64(36)), "5)3c]w:>Qj", ((###"f<j=cK,.Ur"###, (-128), UInt16(Int16(-10)), ([true, false, true, true, true, false, false, true, false, false], Int16(-48), ((UInt16(UInt16(155))&127)..(UInt16(UInt16(81))&127):(68|1)), UInt32(126), Int8(-112), ((Int16(Int16(-37))&127)..=(Int16(Int16(-58))&127):((-78)|1)), ((Int64(33)&127)..(Int64((-126))&127):((-79)|1))), UInt64(UInt16(182)), ((Int32(109), Enum_1690317770616_11.defaultValue, Int16(113)) is Array<Option<Bool>>), ((UInt8(UInt8(179))&127)..(UInt8(UInt8(230))&127):((-34)|1)), ((), r'i', UInt64(214), UInt16(244))) is UInt16));
        ([var_1690317770616_1415, var_1690317770616_1415, var_1690317770616_1415, var_1690317770616_1415, var_1690317770616_1415, Option<(Int64, UInt32, (String, Int64, UInt16, (Array<Bool>, Int16, Range<UInt16>, UInt32, Int8, Range<Int16>, Range<Int64>), UInt64, Bool, Range<UInt8>, (Unit, Rune, UInt64, UInt16)), (Float64, UInt16, Float64, Int16, Unit, UInt8, Int64), String, Bool)>.None, var_1690317770616_1415, var_1690317770616_1415, var_1690317770616_1415, var_1690317770616_1415][7] ?? try { // block id: 1428
            var_1690317770616_1430
        } finally { // block id: 1527
            var_1690317770616_1530 /= ((Int8(114)) | 1);
            ();
            var_1690317770616_1430
        })[4];
        var var_1690317770616_1553 : Struct_1690317770616_1549 = Struct_1690317770616_1549();
        try { // block id: 1545
            Option<Enum_1690317770616_11>.None
        } finally { // block id: 1547
            var_1690317770616_1553.var_1690317770616_1556
        }
    }
;
    static var var_1690317770616_1657 : Array<Int16> = [Int16(-5), Int16(-79), Int16(44), Int16(114), Int16(115), Int16(-119), Int16(82), Int16(-45), Int16(50), Int16(103)]
    public func isClosed(): Bool { return false }
    public func close(): Unit {}
}

func func_1690317770616_7(param_1690317770616_8 : UInt64) : Bool { // block id: 9
    match ((Option<(Int32, Enum_1690317770616_11, Int16)>.Some(var_1690317770616_22) ?? (Int32(-46), Enum_1690317770616_11.defaultValue, Int16(-62)))[1]) {
        case _ => 
            if (true) { r'3' } else { r'r' } ;
            Int32(29)
        
    };
    let var_1690317770616_61 : Bool = true;
    let var_1690317770616_77 : Float32 = Float32(Float32(-112.0));
    if (false) { // block id: 47
        let var_1690317770616_53 : Class_1690317770616_49 = Class_1690317770616_49();
        var_1690317770616_53.var_1690317770616_56
    } else { // block id: 58
        let var_1690317770616_66 : Int32 = Int32(Int8(UInt8(184)));
        var loopTimeVar_1690317770616_73 : Int64 = 0;
        do {
            loopTimeVar_1690317770616_73++;
            (var_1690317770616_66, Enum_1690317770616_11.defaultValue, Int16(-24))
        } while ((var_1690317770616_61) && loopTimeVar_1690317770616_73 < 100 ) ;
        Float32(-43.0) == var_1690317770616_77
    }
}




func func_1690317770616_222(param_1690317770616_223 : Int8, param_1690317770616_224 : Array<Int16>) : Class_1690317770616_49 { // block id: 225
    (if (false) { // block id: 233
        if (false) { var_1690317770616_237 } else { Option<Unit>.None } 
    } else if ((Option<Bool>.None ?? false)) { // block id: 251
        ();
        Option<Unit>.Some(var_1690317770616_123)
    } else { // block id: 255
        let var_1690317770616_258 : UInt16 = UInt16(UInt16(UInt16(243)));
        let var_1690317770616_263 : UInt16 = UInt16(60);
        ((UInt16(var_1690317770616_258)&127)..=(UInt16(var_1690317770616_263)&127):(2|1));
        if (var_1690317770616_268) { var_1690317770616_237 } else { Option<Unit>.None } 
    } ?? var_1690317770616_123);
    Class_1690317770616_49()
}

public struct Struct_1690317770616_338 {
    init() { // block id: 340

    }
;
    static mut prop var_1690317770616_343 : (Unit, Rune, UInt64, UInt16) { // block id: 344
        get() { // block id: 346
            ((), r'M', UInt64(219), UInt16(Int16(UInt16(235))))
        }

        set(Value) { // block id: 356

        }

    };
    public static mut prop var_1690317770616_1105 : Bool { // block id: 1106
        get() { // block id: 1108
            ((Int32(-18), Enum_1690317770616_11.defaultValue, Int16(-56)) is Bool)
        }

        set(Value) { // block id: 1116
            ()
        }

    }
}

public func func_1690317770616_298(param_1690317770616_299 : Class_1690317770616_49) : Option<Array<Int16>> { // block id: 300
    ((Int16(Int16(-26))&127)..=(Int16(Int16(88))&127):(73|1));
    func func_1690317770616_305(param_1690317770616_306 : Bool, param_1690317770616_307 : Range<Int16>, param_1690317770616_308 : (Unit, Rune, UInt64, UInt16)) : (Range<UInt64>, Int64, Rune, Option<Array<Int16>>, Int64, Int8, Int64) { // block id: 309
        var_1690317770616_311
    }
;
    func_1690317770616_305([false, false, true, true, true, true, var_1690317770616_268, var_1690317770616_268, false, true][2], ((Int16(Int16(83))&127)..(Int16(Int16(59))&127):(27|1)), Struct_1690317770616_338.var_1690317770616_343)[3]
}

func func_1690317770616_359(param_1690317770616_360 : Range<UInt32>) : Option<Array<Int16>> { // block id: 361
    try (resource = Class_1690317770616_49()) { // block id: 363
        (var_1690317770616_237 ?? var_1690317770616_123)
    } catch (_) { // block id: 367

    };
    (try { // block id: 370
        UInt64(35)
    } catch (_) { // block id: 372
        UInt64(23) + var_1690317770616_376
    } finally { // block id: 378
        var var_1690317770616_380 : Unit = ();
        var_1690317770616_380;
        var_1690317770616_383;
        var_1690317770616_376 - var_1690317770616_376
    } as Array<Int16>)
}


public func func_1690317770616_394(param_1690317770616_395 : Class_1690317770616_49) : Range<UInt32> { // block id: 396
    let var_1690317770616_418 : Class_1690317770616_49 = Class_1690317770616_49();
    (if (var_1690317770616_268 && true) { // block id: 402
        Int16(-79);
        var_1690317770616_406 ||= true;
        Option<Unit>.Some(())
    } else { // block id: 412
        var_1690317770616_237
    } ?? (var_1690317770616_237 ?? var_1690317770616_418.var_1690317770616_421));
    var var_1690317770616_432 : Array<Option<Bool>> = [Option<Bool>.Some(([Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None] is (Range<UInt64>, Int64, Rune, Option<Array<Int16>>, Int64, Int8, Int64))), (((UInt8(UInt8(63))&127)..(UInt8(UInt8(202))&127):(40|1)) as Bool), Option<Bool>.None, Option<Bool>.Some(((Int32(-35), Enum_1690317770616_11.defaultValue, Int16(105)) is UInt8)), (((Int32(Int32(120))&127)..(Int32(Int32(UInt16(55)))&127):(Int64(UInt8(188))|1)) as Bool), (((Int32(Int32(-34))&127)..(Int32(Int32(-32))&127):((-41)|1)) as Bool), (((), r'c', UInt64(80), UInt16(UInt8(235))) as Bool), (Option<Unit>.Some(()) as Bool), (((UInt8(UInt8(157))&127)..=(UInt8(UInt8(81))&127):((-128)|1)) as Bool), Option<Bool>.Some(false)];
    var loopTimeVar_1690317770616_494 : Int64 = 0;
    do {
        loopTimeVar_1690317770616_494++;
        continue
    } while (((var_1690317770616_432[6] ?? try { // block id: 481
        UInt32(195);
        var_1690317770616_406
    } catch (e: Exception) { // block id: 484
        false
    } finally { // block id: 486
        let var_1690317770616_488 : Rune = r'e';
        var_1690317770616_488;
        true
    })) && loopTimeVar_1690317770616_494 < 100 ) ;
    var var_1690317770616_552 : UInt32 = UInt32(243);
    ((UInt32((Option<(Array<Bool>, Int16, Range<UInt16>, UInt32, Int8, Range<Int16>, Range<Int64>)>.None ?? var_1690317770616_505)[3])&127)..=(UInt32(match (var_1690317770616_126) {
        case _ => 
            var_1690317770616_123;
            var_1690317770616_552 + var_1690317770616_552
        
    })&127):(Class_1690317770616_49.var_1690317770616_558|1))
}


public func func_1690317770616_217(param_1690317770616_218 : Array<UInt64>) : Rune { // block id: 219
    let var_1690317770616_276 : Int8 = Int8(-83);
    var var_1690317770616_281 : (Int32, Float32, Array<Int16>, Range<Int32>, UInt16) = (Int32(Int32(39)), Float32(Float32(38.0)), [Int16(70), Int16(118), Int16(-18), Int16(83), Int16(-113), Int16(-30), Int16(32), Int16(61), Int16(116), Int16(-120)], ((Int32(Int32(-57))&127)..(Int32(Int32(-113))&127):((-50)|1)), UInt16(82));
    let var_1690317770616_611 : UInt32 = UInt32(124);
    func_1690317770616_222(var_1690317770616_276, var_1690317770616_281[2]).func_1690317770616_292(namedParam_1690317770616_295 : try { // block id: 605
        if (var_1690317770616_268) { ((UInt32(UInt32(37))&127)..(UInt32(var_1690317770616_611)&127):((-66)|1)) } else { ((UInt32(UInt32(151))&127)..(UInt32(UInt32(235))&127):(var_1690317770616_166|1)) } ;
        var var_1690317770616_619 : UInt8 = UInt8(UInt8(Int8(125)));
        var_1690317770616_619
    } finally { // block id: 623
        var_1690317770616_123;
        UInt8(14)
    });
    Class_1690317770616_49.func_1690317770616_629((Option<Float32>.None ?? Float32(110.0)))
}




func func_1690317770616_213(param_1690317770616_214 : Int16) : (Unit, Rune, UInt64, UInt16) { // block id: 215
    var var_1690317770616_808 : ?UInt64 = Option<UInt64>.Some(UInt64(Int16(4)));
    var var_1690317770616_818 : UInt64 = UInt64(UInt64(207));
    var var_1690317770616_836 : (String, Int64, UInt16, (Array<Bool>, Int16, Range<UInt16>, UInt32, Int8, Range<Int16>, Range<Int64>), UInt64, Bool, Range<UInt8>, (Unit, Rune, UInt64, UInt16)) = ("#nqoJA:]Q<", Int64(UInt64(182)), UInt16(217), ([false, false, true, false, false, true, true, false, false, true], Int16(97), ((UInt16(UInt16(188))&127)..=(UInt16(UInt16(UInt16(42)))&127):(Int64(UInt16(163))|1)), UInt32(UInt32(Int8(-105))), Int8(-122), ((Int16(Int16(-9))&127)..(Int16(Int16(21))&127):(81|1)), ((Int64(Int64(Int16(27)))&127)..(Int64(54)&127):((-31)|1))), UInt64(63), ((r'k', UInt64(63)) is Array<Range<UInt16>>), ((UInt8(UInt8(125))&127)..=(UInt8(UInt8(8))&127):((-95)|1)), ((), r'6', UInt64(73), UInt16(123)));
    [var_1690317770616_791.var_1690317770616_794, [UInt64(144), UInt64(131), UInt64(184), UInt64(253), UInt64(24), UInt64(238), UInt64(166), UInt64(112), UInt64(36), UInt64(63)][3], var_1690317770616_376 | var_1690317770616_376, (var_1690317770616_808 ?? UInt64(42)), try { // block id: 814
        var_1690317770616_123;
        var_1690317770616_818 ^ UInt64(31)
    } catch (_) { // block id: 822
        ((UInt16(UInt16(208))&127)..(UInt16(UInt16(159))&127):(var_1690317770616_166|1));
        UInt64(160) ^ var_1690317770616_376
    }, UInt64(166) | UInt64(127), var_1690317770616_836[4], if (false) { // block id: 875
        var_1690317770616_818 % ((var_1690317770616_879) | 1)
    } else { // block id: 884
        var_1690317770616_22;
        var_1690317770616_888++;
        UInt64(251) | var_1690317770616_818
    }, try { // block id: 894
        var_1690317770616_237;
        var_1690317770616_123;
        UInt64(62)
    } catch (e: Exception) { // block id: 898
        var_1690317770616_376
    } finally { // block id: 900
        var_1690317770616_123;
        UInt64(245)
    }, var_1690317770616_791.var_1690317770616_794]|>func_1690317770616_217;
    let var_1690317770616_914 : ??(Int32, Enum_1690317770616_11, Int16) = Option<Option<(Int32, Enum_1690317770616_11, Int16)>>.Some(Option<(Int32, Enum_1690317770616_11, Int16)>.None);
    let var_1690317770616_954 : ?Float32 = Option<Float32>.Some(Float32(23.0));
    try { // block id: 907
        (var_1690317770616_914 ?? Option<(Int32, Enum_1690317770616_11, Int16)>.None);
        let var_1690317770616_928 : Bool = true;
        var loopTimeVar_1690317770616_935 : Int64 = 0;
        while ((true) && loopTimeVar_1690317770616_935 < 100 ) {
            loopTimeVar_1690317770616_935++;
            var var_1690317770616_923 : Int16 = Int16(-76);
            var_1690317770616_923 ^= Int16(-75);
            var var_1690317770616_932 : Array<UInt64> = [UInt64(185), UInt64(175), UInt64(44), UInt64(229), UInt64(119), UInt64(185), UInt64(165), UInt64(150), UInt64(134), UInt64(195)];
            if (var_1690317770616_928) { [UInt64(87), UInt64(217), UInt64(62), UInt64(60), UInt64(104), UInt64(101), UInt64(170), UInt64(9), UInt64(212), UInt64(53)] } else { var_1690317770616_932 } 
        };
        Option<(Unit, Rune, UInt64, UInt16)>.Some(var_1690317770616_943).getOrThrow()
    } finally { // block id: 949
        if (var_1690317770616_268) { // block id: 952
            var_1690317770616_954;
            ()
        } else if (var_1690317770616_268) { // block id: 959
            var_1690317770616_566;
            ()
        };
        var_1690317770616_791.var_1690317770616_965
    }
}


public func func_1690317770616_209(param_1690317770616_210 : Int16) : Array<Int16> { // block id: 211
    Class_1690317770616_49.var_1690317770616_988[6]|>func_1690317770616_213;
    (((UInt32(153) - UInt32(30)) as Option<Unit>) ?? try { // block id: 1024
        ();
        let var_1690317770616_1027 : Array<Option<Unit>> = [Option<Unit>.Some(()), (r'l' as Unit), Option<Unit>.None, Option<Unit>.None, ((r'9', UInt64(Int8(50))) as Unit), ((((UInt8(UInt8(64))&127)..(UInt8(UInt8(181))&127):(15|1)) is Int32) as Unit), (UInt32(156) as Unit), (("NS<U2#x/}V", Int64(Int32(-119)), UInt16(124), ([true, true, true, false, false, false, true, false, true, false], Int16(116), ((UInt16(UInt16(186))&127)..=(UInt16(UInt16(25))&127):(45|1)), UInt32(69), Int8(12), ((Int16(Int16(17))&127)..=(Int16(Int16(-44))&127):((-79)|1)), ((Int64(3)&127)..(Int64((-11))&127):((-21)|1))), UInt64(207), false, ((UInt8(UInt8(101))&127)..(UInt8(UInt8(238))&127):((-21)|1)), ((), r'f', UInt64(126), UInt16(52))) as Unit), ((-82) as Unit), (Float64(Float32(19.0)) as Unit)];
        var_1690317770616_1027
    } catch (e: Exception) { // block id: 1081
        var_1690317770616_126;
        ();
        [var_1690317770616_237, var_1690317770616_237, Option<Unit>.Some(()), var_1690317770616_237, var_1690317770616_237, Option<Unit>.None, Option<Unit>.Some(var_1690317770616_123), Option<Unit>.Some(()), Option<Unit>.None, Option<Unit>.Some(())]
    }[4]);
    var var_1690317770616_1126 : ?Float32 = Option<Float32>.Some(Float32(-31.0));
    if ((Struct_1690317770616_338.var_1690317770616_1105) || var_1690317770616_268) { // block id: 1119
        var var_1690317770616_1136 : Array<Int16> = [Int16(UInt16(94)), Int16(-125), Int16(-124), Int16(-12), Int16(-88), Int16(-96), Int16(Int16(Int8(94))), Int16(UInt16(UInt16(112))), Int16(5), Int16(UInt8(26))];
        var var_1690317770616_1164 : Int16 = Int16(-45);
        match (Option<Option<Unit>>.None) {
            case _ : UInt64 => 
                var_1690317770616_1126;
                if (var_1690317770616_268) { Option<Bool>.None } else { var_1690317770616_1133 } ;
                var_1690317770616_1136
            
            case _ => 
                var_1690317770616_123;
                ();
                if (true) { [Int16(15), var_1690317770616_1164, Int16(-105), Int16(-67), Int16(-48), Int16(45), var_1690317770616_1164, var_1690317770616_1164, var_1690317770616_1164, var_1690317770616_1164] } else { var_1690317770616_1136 } 
            
            case _ => 
                Float32(-67.0) + Float32(51.0);
                ();
                var_1690317770616_1136
            
        }
    } else { // block id: 1182
        let var_1690317770616_1185 : Option<Array<Int16>> = Option<Array<Int16>>.Some([Int16(-77), Int16(98), Int16(106), Int16(-14), Int16(123), Int16(-36), Int16(122), Int16(118), Int16(-35), Int16(-39)]);
        (var_1690317770616_1185 ?? [Int16(-103), Int16(-2), Int16(49), Int16(103), Int16(-109), Int16(-41), Int16(6), Int16(-124), Int16(-101), Int16(76)])
    }
}

func func_1690317770616_157(param_1690317770616_158 : Range<UInt64>) : Array<Int16> { // block id: 159
    var loopTimeVar_1690317770616_172 : Range<UInt64> = ((UInt64(UInt64(Int8(116)))&127)..=(UInt64(UInt64(153))&127):(100|1));
    let var_1690317770616_181 : Bool = (((UInt16(UInt16(208))&127)..=(UInt16(UInt16(60))&127):((-42)|1)) is Float64);
    let var_1690317770616_187 : Float64 = Float64(Float32(-76.0));
    var var_1690317770616_1236 : UInt8 = UInt8(UInt8(158));
    let var_1690317770616_1247 : ?Float32 = Option<Float32>.Some(Float32(Float32(86.0)));
    if ((for (i in loopTimeVar_1690317770616_172 where false) {
        var_1690317770616_166
    } is (Unit, Rune, UInt64, UInt16))) { // block id: 178
        var var_1690317770616_199 : UInt32 = UInt32(Int16(-53));
        if (var_1690317770616_181) { // block id: 184
            var_1690317770616_187 * (-73.0);
            [UInt64(140), UInt64(47), UInt64(29), UInt64(31), UInt64(122), UInt64(86), UInt64(21), UInt64(98), UInt64(164), UInt64(189)];
            ()
        } else if (var_1690317770616_181) { // block id: 194
            ();
            ((UInt8(UInt8(127))&127)..=(UInt8(UInt8(169))&127):((-70)|1));
            var_1690317770616_199++
        };
        let var_1690317770616_203 : Array<Int16> = [Int16(87), Int16(-99), Int16(-30), Int16(-24), Int16(-127), Int16(-74), Int16(-3), Int16(113), Int16(41), Int16(-79)];
        var_1690317770616_203
    } else if (true) { // block id: 206
        var_1690317770616_123;
        Int16(125)|>func_1690317770616_209
    } else { // block id: 1191
        Class_1690317770616_49.var_1690317770616_1195;
        match (Option<Array<Int16>>.None) {
            case caseVar_1690317770616_1226 : Array<Option<Bool>> => 
                ();
                ()
            
            case caseVar_1690317770616_1232 => 
                var_1690317770616_1236 *= var_1690317770616_1236;
                var_1690317770616_742--
            
            case _ => 
                if (var_1690317770616_181) { var_1690317770616_1247 } else { Option<Float32>.None } ;
                ()
            
        };
        let var_1690317770616_1258 : Array<Int16> = [Int16(-25), Int16(-100), Int16(11), Int16(-123), Int16(-55), Int16(-8), Int16(2), Int16(-77), Int16(-77), Int16(29)];
        (Int32(33), Float32(119.0), var_1690317770616_1258, ((Int32(Int32(112))&127)..=(Int32(Int32(110))&127):(60|1)), UInt16(66))[2]
    }
}



public struct Struct_1690317770616_1549 {
    public init() { // block id: 1551

    }
;
    public prop var_1690317770616_1556 : ?Enum_1690317770616_11 { // block id: 1557
        get() { // block id: 1559
            Int8(-105);
            ();
            Option<Enum_1690317770616_11>.None
        }

    }
}

func func_1690317770616_100(param_1690317770616_101 : Option<(Int32, Enum_1690317770616_11, Int16)>) : Enum_1690317770616_11 { // block id: 102
    let var_1690317770616_149 : (Int32, Enum_1690317770616_11, Int16) = (Int32(Int32(-102)), Enum_1690317770616_11.defaultValue, Int16(55));
    var var_1690317770616_1267 : (Range<UInt64>) -> Array<Int16> = func_1690317770616_157;
    (try { // block id: 120
        ((Int8(Int8(-124))&127)..=(Int8(Int8(39))&127):(93|1));
        var_1690317770616_123;
        var_1690317770616_126
    } catch (e: Exception) { // block id: 146
        var_1690317770616_123;
        var_1690317770616_149;
        Option<Array<Int16>>.None
    } ?? (((UInt64(UInt64(222))&127)..=(UInt64(UInt64(214))&127):(var_1690317770616_166|1))|>var_1690317770616_1267))[4];
    let var_1690317770616_1568 : Enum_1690317770616_11 = Enum_1690317770616_11.defaultValue;
    (var_1690317770616_791.func_1690317770616_1282(((UInt64(var_1690317770616_376)&127)..(UInt64(UInt64(103))&127):(var_1690317770616_166|1))) ?? var_1690317770616_1568)
}


func func_1690317770616_94(param_1690317770616_95 : Int64) : (Unit, Rune, UInt64, UInt16) { // block id: 96
    let var_1690317770616_1571 : (Option<(Int32, Enum_1690317770616_11, Int16)>) -> Enum_1690317770616_11 = func_1690317770616_100;
    var var_1690317770616_1574 : ?(Int32, Enum_1690317770616_11, Int16) = (Option<Option<(Int32, Enum_1690317770616_11, Int16)>>.None as (Int32, Enum_1690317770616_11, Int16));
    var var_1690317770616_1608 : UInt64 = UInt64(125);
    match (match ((var_1690317770616_1574|>var_1690317770616_1571)) {
        case _ : Unit => 
            50
        
        case defaultValue => 
            ();
            var_1690317770616_123;
            (-61)
        
        case _ => 
            UInt8(9);
            var_1690317770616_888 *= var_1690317770616_888;
            var_1690317770616_166 << ((85) & 7)
        
    }) {
        case caseVar_1690317770616_1598 => 
            Option<UInt64>.Some(UInt64(34));
            var_1690317770616_123;
            var_1690317770616_123
        
        case _ => 
            var_1690317770616_1608++
        
    };
    if ((var_1690317770616_237 is (Range<UInt64>) -> Array<Int16>)) { ((Int64((var_1690317770616_1620 ?? var_1690317770616_166))&127)..=(Int64(Int64(UInt32(176)))&127):(var_1690317770616_166 + (-4)|1)) } else { try { // block id: 1630
        ((Int64(var_1690317770616_166)&127)..=(Int64(var_1690317770616_166)&127):(var_1690317770616_166|1))
    } catch (_) { // block id: 1635
        let var_1690317770616_1637 : ?(Int64, UInt32, (String, Int64, UInt16, (Array<Bool>, Int16, Range<UInt16>, UInt32, Int8, Range<Int16>, Range<Int64>), UInt64, Bool, Range<UInt8>, (Unit, Rune, UInt64, UInt16)), (Float64, UInt16, Float64, Int16, Unit, UInt8, Int64), String, Bool) = Option<(Int64, UInt32, (String, Int64, UInt16, (Array<Bool>, Int16, Range<UInt16>, UInt32, Int8, Range<Int16>, Range<Int64>), UInt64, Bool, Range<UInt8>, (Unit, Rune, UInt64, UInt16)), (Float64, UInt16, Float64, Int16, Unit, UInt8, Int64), String, Bool)>.None;
        var_1690317770616_1637;
        var_1690317770616_123;
        if (var_1690317770616_406) { ((Int64((-37))&127)..=(Int64((-91))&127):((-34)|1)) } else { ((Int64(29)&127)..(Int64((-32))&127):((-49)|1)) } 
    } finally { // block id: 1644
        ();
        Option<Option<Unit>>.Some(var_1690317770616_237);
        ((Int64((-42))&127)..=(Int64(98)&127):((-41)|1))
    } } ;
    var_1690317770616_943
}

main(): Int64 {
    try {
        var var_1690317770616_85 : Int16 = Int16(Int8(99));
        var loopTimeVar_1690317770616_90 : Int64 = 0;
        do {
            loopTimeVar_1690317770616_90++;
            var_1690317770616_85 |= Int16(18)
        } while (((UInt64(2)|>func_1690317770616_7)) && loopTimeVar_1690317770616_90 < 100 ) ;
        let var_1690317770616_1651 : (Int64) -> (Unit, Rune, UInt64, UInt16) = func_1690317770616_94;
        (102|>var_1690317770616_1651)[0];
        var_1690317770616_166
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var_1690317770616_85*var_1690317770616_85), 64)
        crccheck.updateBuffer(UInt64(var_1690317770616_166*var_1690317770616_166), 64)
        crccheck.updateBuffer(UInt64(var_1690317770616_376*var_1690317770616_376), 64)
        crccheck.updateBuffer(UInt64(var_1690317770616_742*var_1690317770616_742), 64)
        crccheck.updateBuffer(UInt64(var_1690317770616_879*var_1690317770616_879), 64)
        crccheck.updateBuffer(UInt64(var_1690317770616_888*var_1690317770616_888), 64)
        crccheck.updateBuffer(UInt64(var_1690317770616_1332*var_1690317770616_1332), 64)
        crccheck.updateBuffer(UInt64(var_1690317770616_1381*var_1690317770616_1381), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }
    func getCrcOutput(): Int32 {
        var i = 0
        var res = ""
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            res = res + hex_value.toString()
            i = i + 3
        }
        print("\n")
        if ( res == "3165153043675030506334517440362017475453422407" ){
            return 0
        }
        return 1
    }
}
extend Struct_1690317770616_338 {

}

