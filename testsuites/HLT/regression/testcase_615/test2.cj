/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args

public var var_1714396772838_38 : Enum_1714396772838_35<Range<UInt64>, Bool> = Enum_1714396772838_35<Range<UInt64>, Bool>.enumValue_1714396772838_40(Float64(Float64(Float32(43.0))), ((Int8(Int8(-116))&127)..=(Int8(Int8(-29))&127):(Int64(-126)|1)), UInt32(UInt8(UInt8(131))), UInt32(229))
var var_1714396772838_63 : VArray<UInt64, $5> = [UInt64(122), UInt64(59), UInt64(68), UInt64(164), UInt64(154)]
public const var_1714396772838_70 : UInt64 = 244
public let var_1714396772838_81 : Int = Int64(25)
let var_1714396772838_162 : Int16 = Int16(Int8(-41))
public let var_1714396772838_250 : ?Unit = (VArray<UInt64, $5>(repeat: UInt64(UInt32(Int32(-94)))) as Unit)
public var var_1714396772838_278 : Int32 = Int32(-16)
public var var_1714396772838_283 : Int64 = Int64(Int8(-66))
public var var_1714396772838_288 : Unit = ()
var var_1714396772838_383 : ?(UInt64, Class_1714396772838_125, Rune) = Option<(UInt64, Class_1714396772838_125, Rune)>.None
public let var_1714396772838_396 : Float64 = Float64(Float32(Float32(Float32(-116.0))))
var var_1714396772838_407 : UInt16 = UInt16(Int16(40))
public const var_1714396772838_413 : UInt32 = 225
var var_1714396772838_437 : Float32 = Float32(Float32(15.0))
public var var_1714396772838_458 : Class_1714396772838_454 = Class_1714396772838_454()
public var var_1714396772838_488 : Option<(Range<UInt32>, UInt8, UInt16, Range<Int16>, Unit, Class_1714396772838_125, Bool)> = Option<(Range<UInt32>, UInt8, UInt16, Range<Int16>, Unit, Class_1714396772838_125, Bool)>.None
public var var_1714396772838_500 : Class_1714396772838_125 = Class_1714396772838_125()
let var_1714396772838_506 : ((UInt64, Class_1714396772838_125, Rune), Range<UInt64>, VArray<Int64, $8>) = ((UInt64(UInt16(98)), Class_1714396772838_135(), r'u'), ((UInt64(UInt64(120))&127)..(UInt64(UInt64(195))&127):(Int64(9)|1)), VArray<Int64, $8>({ i => Int64(-20)}))
public var var_1714396772838_544 : UInt = UInt64(Int64(-56))
public var var_1714396772838_632 : Range<Int16> = ((Int16(Int16(Int8(107)))&127)..=(Int16(Int16(-19))&127):(Int64(Int32(Int32(-63)))|1))
public var var_1714396772838_644 : Int = Int64(UInt16(79))
let var_1714396772838_656 : Int16 = Int16(Int8(-13))
public let var_1714396772838_679 : Bool = (((UInt8(UInt8(84))&127)..(UInt8(UInt8(110))&127):(Int64(-91)|1)) is Range<UInt32>)
public var var_1714396772838_683 : String = """
E)@o8
_F]|O
"""
public let var_1714396772838_694 : Class_1714396772838_689<Class_1714396772838_135, UInt16> = Class_1714396772838_689<Class_1714396772838_135, UInt16>()
public var var_1714396772838_711 : Class_1714396772838_707 = Class_1714396772838_707()
public var var_1714396772838_789 : Range<UInt64> = ((UInt64(UInt64(229))&127)..(UInt64(UInt64(76))&127):(Int64(32)|1))
public let var_1714396772838_795 : VArray<UInt64, $5> = [UInt64(113), UInt64(148), UInt64(134), UInt64(251), UInt64(8)]
public struct Struct_1714396772838_7 {
    public init() { // block id: 9

    }
;
    static mut prop var_1714396772838_12 : Rune { // block id: 13
        get() { // block id: 15
            r'V';
            var_1714396772838_831
        }

        set(Value) { // block id: 19
            Int64(-103);
            ();
            var_1714396772838_831 = Value
        }

    };
    static let var_1714396772838_386 : (UInt64, Class_1714396772838_125, Rune) = (UInt64(4), Class_1714396772838_135(), r'O');
    static var var_1714396772838_423 : Bool = true;
    public static func func_1714396772838_348<T0>(param_1714396772838_349 : String, optionalParam_1714396772838_350 ! : UInt8 = UInt8(99), namedParam_1714396772838_352 ! : Option<Unit>) : Enum_1714396772838_35<Range<UInt64>, Bool> { // block id: 353
        var var_1714396772838_368 : Option<(UInt64, Class_1714396772838_125, Rune)> = (((UInt16(UInt16(67))&127)..(UInt16(UInt16(8))&127):(Int64(42)|1)) as (UInt64, Class_1714396772838_125, Rune));
        (try { // block id: 362
            Option<(UInt64, Class_1714396772838_125, Rune)>.None
        } catch (_) { // block id: 364
            var_1714396772838_288;
            UInt64(156);
            var_1714396772838_368
        } finally { // block id: 371
            var_1714396772838_288;
            if (true) { Option<(UInt64, Class_1714396772838_125, Rune)>.None } else { var_1714396772838_368 } 
        } ?? (var_1714396772838_383 ?? var_1714396772838_386))[1];
        var loopTimeVar_1714396772838_452 : Int64 = 0;
        while ((match ((var_1714396772838_396 as Enum_1714396772838_35<Range<UInt64>, Bool>)) {
            case caseVar_1714396772838_403 : Int16 => 
                var_1714396772838_407 ^= UInt16(149);
                var_1714396772838_413 == var_1714396772838_413
            
            case caseVar_1714396772838_418 => 
                Option<(UInt64, Class_1714396772838_125, Rune)>.None;
                var_1714396772838_396;
                var_1714396772838_423
            
            case _ => 
                ();
                true
            
        }) && loopTimeVar_1714396772838_452 < 100 ) {
            loopTimeVar_1714396772838_452++;
            try (resource = Class_1714396772838_125()) { // block id: 432

            } catch (_) { // block id: 433
                var_1714396772838_288;
                var_1714396772838_437 += Float32(-105.0)
            };
            match (var_1714396772838_383) {
                case _ => 
                    if (var_1714396772838_423) { var_1714396772838_250 } else { Option<Unit>.None } ;
                    var_1714396772838_63
                
            }
        };
        var_1714396772838_458.func_1714396772838_461(VArray<Int64, $8>(repeat: var_1714396772838_81)[3], (var_1714396772838_488 ?? (((UInt32(var_1714396772838_413)&127)..=(UInt32(UInt32(157))&127):(var_1714396772838_81|1)), UInt8(242), UInt16(86), ((Int16(Int16(-34))&127)..(Int16(Int16(112))&127):(Int64(117)|1)), (), var_1714396772838_500, false)), namedParam_1714396772838_464 : var_1714396772838_506[0])
    }
;
    static prop var_1714396772838_530 : Byte { // block id: 531
        get() { // block id: 533
            ();
            ();
            UInt8(UInt8(56))
        }

    };
    static func func_1714396772838_335(param_1714396772838_336 : (Unit, Unit, Range<UInt32>, (Range<UInt32>, UInt8, UInt16, Range<Int16>, Unit, Class_1714396772838_125, Bool), Range<Int32>), optionalParam_1714396772838_337 ! : Range<Int16> = ((Int16(Int16(53))&127)..=(Int16(Int16(52))&127):(Int64(-52)|1))) : Class_1714396772838_125 { // block id: 339
        let var_1714396772838_527 : String = "]c*\\2-eMB+";
        let var_1714396772838_556 : Option<(UInt64, Class_1714396772838_125, Rune)> = Option<(UInt64, Class_1714396772838_125, Rune)>.None;
        let var_1714396772838_565 : Int16 = Int16(36);
        match ((Option<Enum_1714396772838_35<Range<UInt64>, Bool>>.None ?? func_1714396772838_348<UInt16>(var_1714396772838_527, optionalParam_1714396772838_350 : var_1714396772838_530, namedParam_1714396772838_352 : Option<Unit>.None))) {
            case defaultValue => 
                var_1714396772838_544 *= UInt64(215);
                var_1714396772838_288;
                Class_1714396772838_125()
            
            case defaultValue => 
                if (true) { var_1714396772838_556 } else { var_1714396772838_556 } ;
                Class_1714396772838_135()
            
            case _ => 
                ((Int16(var_1714396772838_565)&127)..(Int16(var_1714396772838_565)&127):(var_1714396772838_81|1));
                var_1714396772838_288;
                Class_1714396772838_135(namedParam_1714396772838_170 : var_1714396772838_423, namedParam_1714396772838_171 : Int32(40))
            
        }
    }
;
    static mut prop var_1714396772838_831 : Rune { // block id: 832
        get() { // block id: 834
            UInt32(189);
            r'3'
        }

        set(Value) { // block id: 839
            ();
            ()
        }

    }
}

public enum Enum_1714396772838_35<T0, T1> {
    defaultValue |
    enumValue_1714396772838_40(Float64, Range<Int8>, UInt32, UInt32) |
    enumValue_1714396772838_611(Option<Unit>, Range<Int32>)
}
public open class Class_1714396772838_125 <: Resource {
    public init() { // block id: 127

    }
;
    public prop var_1714396772838_223 : ?Unit { // block id: 224
        get() { // block id: 226
            ((UInt64(UInt64(211))&127)..=(UInt64(UInt64(186))&127):(Int64(110)|1));
            ((UInt32(UInt32(88))&127)..=(UInt32(UInt32(UInt32(Int8(-60))))&127):(Int64(Int64(Int64(-25)))|1));
            (() as Unit)
        }

    };
    public prop var_1714396772838_714 : (Range<UInt64>, Bool, Int64) { // block id: 715
        get() { // block id: 717
            (((UInt64(UInt64(Int8(108)))&127)..(UInt64(UInt64(UInt32(81)))&127):(Int64(Int32(-120))|1)), (Class_1714396772838_689<Class_1714396772838_135, UInt16>((), Int16(-11), UInt16(161)) is Range<Int8>), Int64(19))
        }

    };
    public prop var_1714396772838_766 : UInt64 { // block id: 767
        get() { // block id: 769
            ((UInt64(UInt64(Int16(Int8(-102))))&127)..(UInt64(UInt64(UInt64(235)))&127):(Int64(Int64(54))|1));
            ();
            UInt64(82)
        }

    };
    public open func func_1714396772838_663(namedParam_1714396772838_664 ! : Float64, namedParam_1714396772838_665 ! : Array<UInt64>, namedParam_1714396772838_666 ! : Range<Int8>) : (Range<UInt64>, Bool, Int64) { // block id: 667
        var loopTimeVar_1714396772838_703 : Int = 0;
        (try { // block id: 670
            -UInt8(80);
            Option<Unit>.Some(())
        } finally { // block id: 675
            ();
            if (var_1714396772838_679) { var_1714396772838_683 } else { "`~}god!S=/" } ;
            Option<Unit>.None
        } ?? (var_1714396772838_694.var_1714396772838_223 ?? while ((var_1714396772838_679) && loopTimeVar_1714396772838_703 < 100 ) {
            loopTimeVar_1714396772838_703++;
            ((UInt32(UInt32(77))&127)..=(UInt32(UInt32(13))&127):(Int64(-58)|1));
            var_1714396772838_288
        }));
        var var_1714396772838_799 : UInt = UInt64(152);
        var var_1714396772838_809 : Int = Int64(UInt8(Int8(UInt8(86))));
        try { // block id: 705
            var_1714396772838_711.var_1714396772838_714
        } finally { // block id: 756
            ((Int32(Int32(52))&127)..(Int32(Int32(74))&127):(Int64(72)|1));
            UInt8(139) / ((UInt8(120)) | 1);
            try { // block id: 762
                (((UInt64(var_1714396772838_766)&127)..=(UInt64(var_1714396772838_766)&127):(var_1714396772838_283|1)), var_1714396772838_679, Int64(-112))
            } catch (e: Exception) { // block id: 784
                UInt16(49);
                ();
                (var_1714396772838_789, true, Int64(-68))
            } finally { // block id: 793
                var_1714396772838_795;
                var_1714396772838_799 *= var_1714396772838_799;
                (((UInt64(var_1714396772838_799)&127)..(UInt64(UInt64(52))&127):(var_1714396772838_283|1)), var_1714396772838_679, var_1714396772838_809)
            }
        }
    }

    public func isClosed(): Bool { return false }
    public func close(): Unit {}
}

public open class Class_1714396772838_135 <: Class_1714396772838_125 {
    public init() { // block id: 137

    }
;
    public static const var_1714396772838_140 : Bool = true;
    public init(namedParam_1714396772838_170 ! : Bool, namedParam_1714396772838_171 ! : Int32) { // block id: 172
        ();
        func func_1714396772838_185(namedParam_1714396772838_186 ! : Range<Int8>, optionalParam_1714396772838_187 ! : Array<UInt64> = [UInt64(205), UInt64(UInt8(Int8(-85))), UInt64(228), UInt64(117), UInt64(37), UInt64(Int16(UInt16(UInt16(39)))), UInt64(Int8(Int8(Int8(47)))), UInt64(Int8(UInt8(UInt8(185)))), UInt64(32), UInt64(Int64(Int32(-44)))], optionalParam_1714396772838_212 ! : Int16 = Int16(UInt8(102)), namedParam_1714396772838_215 ! : Rune) : Class_1714396772838_125 { // block id: 216
            Class_1714396772838_125()
        }
;
        const var_1714396772838_243 : Bool = true;
        func func_1714396772838_180<T0>() : Option<Unit> { // block id: 181
            var var_1714396772838_220 : Rune = r'l';
            match (func_1714396772838_185(namedParam_1714396772838_186 : ((Int8(Int8(-20))&127)..=(Int8(Int8(-56))&127):(Int64(78)|1)), namedParam_1714396772838_215 : var_1714396772838_220).var_1714396772838_223) {
                case _ => 
                    let var_1714396772838_246 : ?Unit = Option<Unit>.Some(());
                    if (var_1714396772838_243) { var_1714396772838_246 } else { var_1714396772838_250 } 
                
                case _ => 
                    Option<Unit>.None
                
                case _ => 
                    Option<Unit>.None
                
            }
        }
;
        (func_1714396772838_180<Float32>() ?? if (false) { // block id: 275
            var_1714396772838_278 /= ((var_1714396772838_278) | 1);
            var_1714396772838_283 |= var_1714396772838_283;
            var_1714396772838_288
        })
    }

    static init() {
    }
}





public open class Class_1714396772838_454 {
    public init() { // block id: 456

    }
;
    func func_1714396772838_461(param_1714396772838_462 : Int64, param_1714396772838_463 : (Range<UInt32>, UInt8, UInt16, Range<Int16>, Unit, Class_1714396772838_125, Bool), namedParam_1714396772838_464 ! : (UInt64, Class_1714396772838_125, Rune), optionalParam_1714396772838_465 ! : Rune = r'A') : Enum_1714396772838_35<Range<UInt64>, Bool> { // block id: 467
        ();
        var_1714396772838_38
    }

    static init() {
    }
}


public interface Interface_1714396772838_692<T0, T1, T2> {

}

public open class Class_1714396772838_689<T0, T1> <: Class_1714396772838_125 & Interface_1714396772838_692<Bool, Range<Int64>, UInt64> where T0 <: Class_1714396772838_135 & Class_1714396772838_125 {
    public init() { // block id: 691

    }
;
    public init(param_1714396772838_729 : Unit, param_1714396772838_730 : Int16, param_1714396772838_731 : UInt16, optionalParam_1714396772838_732 ! : UInt8 = UInt8(Int8(Int8(Int8(110))))) { // block id: 737
        var var_1714396772838_743 : Struct_1714396772838_739 = Struct_1714396772838_739();
        var_1714396772838_743.var_1714396772838_746
    }

    static init() {
    }
}

public open class Class_1714396772838_707 <: Class_1714396772838_125 {
    public init() { // block id: 709

    }

}

public struct Struct_1714396772838_739 {
    public init() { // block id: 741

    }
;
    public prop var_1714396772838_746 : Unit { // block id: 747
        get() { // block id: 749
            ();
            ()
        }

    }
}

main(): Int64 {
    try {
        Struct_1714396772838_7.var_1714396772838_12;
        var var_1714396772838_58 : Int8 = Int8(Int8(95));
        var var_1714396772838_87 : UInt64 = UInt64(UInt32(96));
        match (var_1714396772838_38) {
            case _ : String => 
                var_1714396772838_58 |= Int8(37);
                var_1714396772838_63
            
            case _ : Range<Int8> => 
                VArray<UInt64, $5>(repeat: var_1714396772838_70)
            
            case _ => 
                var_1714396772838_81 & Int64(-29);
                VArray<UInt64, $5>(repeat: var_1714396772838_70)
            
            case _ => 
                var var_1714396772838_98 : UInt16 = UInt16(Int8(84));
                var_1714396772838_98 <<= ((var_1714396772838_98) & 7);
                var var_1714396772838_103 : Range<Int8> = ((Int8(Int8(-101))&127)..=(Int8(Int8(-96))&127):(Int64(Int8(-47))|1));
                var_1714396772838_103;
                const var_1714396772838_111 : Bool = true;
                if (var_1714396772838_111) { var_1714396772838_63 } else { VArray<UInt64, $5>({ i => UInt64(175)}) } 
            
        }[2] ^ var_1714396772838_87;
        let var_1714396772838_145 : Bool = false;
        let var_1714396772838_154 : Range<UInt32> = ((UInt32(UInt32(32))&127)..=(UInt32(UInt32(196))&127):(Int64(-98)|1));
        const var_1714396772838_157 : UInt8 = 151;
        let var_1714396772838_310 : (Unit, Unit, Range<UInt32>, (Range<UInt32>, UInt8, UInt16, Range<Int16>, Unit, Class_1714396772838_125, Bool), Range<Int32>) = ((), (), ((UInt32(UInt32(224))&127)..=(UInt32(UInt32(118))&127):(Int64(-72)|1)), (((UInt32(UInt32(UInt8(72)))&127)..=(UInt32(UInt32(190))&127):(Int64(UInt16(153))|1)), UInt8(242), UInt16(55), ((Int16(Int16(76))&127)..=(Int16(Int16(-71))&127):(Int64(15)|1)), (), Class_1714396772838_125(), (UInt64(UInt32(108)) is Range<UInt16>)), ((Int32(Int32(-61))&127)..(Int32(Int32(-42))&127):(Int64(-11)|1)));
        func func_1714396772838_129<T0>(param_1714396772838_130 : UInt16) : Class_1714396772838_125 { // block id: 131
            var loopTimeVar_1714396772838_306 : Int = 0;
            while ((if (Class_1714396772838_135.var_1714396772838_140) { // block id: 142
                ((Int8(Int8(-110))&127)..(Int8(Int8(79))&127):(Int64(122)|1));
                var_1714396772838_145
            } else { // block id: 147
                var_1714396772838_145
            }) && loopTimeVar_1714396772838_306 < 100 ) {
                loopTimeVar_1714396772838_306++;
                (var_1714396772838_154, var_1714396772838_157, UInt16(191), ((Int16(var_1714396772838_162)&127)..(Int16(var_1714396772838_162)&127):(var_1714396772838_81|1)), (), Class_1714396772838_135(namedParam_1714396772838_170 : var_1714396772838_145, namedParam_1714396772838_171 : Int32(93)), var_1714396772838_145)[4];
                var loopTimeVar_1714396772838_297 : Range<UInt64> = ((UInt64(UInt64(166))&127)..(UInt64(UInt64(UInt32(UInt8(Int8(-85)))))&127):(Int64(49)|1));
                for (i in loopTimeVar_1714396772838_297 where false) {

                }
            };
            var_1714396772838_310[2];
            let var_1714396772838_576 : (VArray<Int64, $8>, (Unit, Unit, Range<UInt32>, (Range<UInt32>, UInt8, UInt16, Range<Int16>, Unit, Class_1714396772838_125, Bool), Range<Int32>), Class_1714396772838_454, Class_1714396772838_454) = (VArray<Int64, $8>(repeat: Int64(Int8(-55))), ((), (), ((UInt32(UInt32(151))&127)..(UInt32(UInt32(149))&127):(Int64(16)|1)), (((UInt32(UInt32(69))&127)..(UInt32(UInt32(51))&127):(Int64(47)|1)), UInt8(Int8(-43)), UInt16(Int16(14)), ((Int16(Int16(26))&127)..=(Int16(Int16(70))&127):(Int64(-7)|1)), (), Class_1714396772838_135(namedParam_1714396772838_170 : true, namedParam_1714396772838_171 : Int32(-15)), (Enum_1714396772838_35<Range<UInt64>, Bool>.enumValue_1714396772838_611(Option<Unit>.Some(()), ((Int32(Int32(-7))&127)..(Int32(Int32(73))&127):(Int64(33)|1))) is Enum_1714396772838_35<Range<UInt64>, Bool>)), ((Int32(Int32(93))&127)..(Int32(Int32(71))&127):(Int64(59)|1))), Class_1714396772838_454(), Class_1714396772838_454());
            Struct_1714396772838_7.func_1714396772838_335(var_1714396772838_576[1], optionalParam_1714396772838_337 : [((Int16(Int16(-6))&127)..(Int16(var_1714396772838_162)&127):(Int64(-61)|1)), ((Int16(Int16(-106))&127)..(Int16(Int16(110))&127):(Int64(91)|1)), ((Int16(Int16(53))&127)..=(Int16(Int16(13))&127):(Int64(72)|1)), ((Int16(Int16(13))&127)..(Int16(Int16(-2))&127):(Int64(44)|1)), var_1714396772838_632, ((Int16(var_1714396772838_162)&127)..=(Int16(Int16(-25))&127):(var_1714396772838_644|1)), var_1714396772838_632, ((Int16(var_1714396772838_162)&127)..=(Int16(Int16(8))&127):(Int64(-121)|1)), ((Int16(Int16(91))&127)..=(Int16(Int16(-14))&127):(Int64(22)|1)), ((Int16(Int16(-126))&127)..(Int16(var_1714396772838_656)&127):(Int64(101)|1))][0])
        }
;
        func_1714396772838_129<Class_1714396772838_454>(var_1714396772838_407).func_1714396772838_663(namedParam_1714396772838_664 : Float64(20.0), namedParam_1714396772838_665 : [UInt64(238), UInt64(130), UInt64(118), UInt64(143), var_1714396772838_87, var_1714396772838_70, var_1714396772838_87, UInt64(128), UInt64(252), UInt64(111)], namedParam_1714396772838_666 : ((Int8(Int8(51))&127)..=(Int8(Int8(-6))&127):(Int64(29)|1)))[2]
        // CRC Check All Variables
        var crcCheck = CrcCheck(5000, 32)
        crcCheck.updateBuffer(UInt64(var_1714396772838_58*var_1714396772838_58), 64)
        crcCheck.updateBuffer(UInt64(var_1714396772838_70*var_1714396772838_70), 64)
        crcCheck.updateBuffer(UInt64(var_1714396772838_87*var_1714396772838_87), 64)
        crcCheck.updateBuffer(UInt64(var_1714396772838_157*var_1714396772838_157), 64)
        crcCheck.updateBuffer(UInt64(var_1714396772838_162*var_1714396772838_162), 64)
        crcCheck.updateBuffer(UInt64(var_1714396772838_407*var_1714396772838_407), 64)
        crcCheck.updateBuffer(UInt64(var_1714396772838_413*var_1714396772838_413), 64)
        crcCheck.updateBuffer(UInt64(var_1714396772838_544*var_1714396772838_544), 64)
        crcCheck.updateBuffer(UInt64(var_1714396772838_644*var_1714396772838_644), 64)
        crcCheck.updateBuffer(UInt64(var_1714396772838_656*var_1714396772838_656), 64)
        crcCheck.crcCheck()
        crcCheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[(i + buffer_index) % buffer.size] = byteArray[i + byte_index]
            i++
        }
        buffer_index = (buffer_index + i) % buffer.size
    }

    func updateBuffer(input: Bool, byte_n: Int64): Unit {
        if (input == true) {
            updateBuffer(1, byte_n)
        } else {
            updateBuffer(0, byte_n)
        }
    }

    func updateBuffer(input: Rune, byte_n: Int64): Unit {
        updateBuffer(UInt64(UInt32(input)), byte_n)
    }

    func updateBuffer(input: String, byte_n: Int64): Unit {
        for (c in input) {
            updateBuffer(c, byte_n)
        }
    }

    func updateBuffer(input: Unit, byte_n: Int64): Unit {
        updateBuffer(input.toString(), byte_n)
    }

    func updateBuffer(input: Any, byte_n: Int64) : Unit {
        if (input is Hashable) {
            match(input as Hashable) {
                case Some(v) => updateBuffer(UInt64(v.hashCode()), byte_n)
                case _=> updateBuffer(1, byte_n)
            }
            
        } else if (input is ToString) {
            match(input as ToString) {
                case Some(v) => updateBuffer(v.toString(), byte_n)
                case _=> updateBuffer(1, byte_n)
            }
        } else {
            updateBuffer(1, byte_n)
        }
    }     
    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}

extend Class_1714396772838_707 {

}

extend Class_1714396772838_135 {

}

extend Class_1714396772838_454 {

}

