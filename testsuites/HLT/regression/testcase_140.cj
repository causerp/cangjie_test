/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args

let var_1663086714215_8 : Bool = true
public var var_1663086714215_23 : (Int16, Bool, Int64, Bool, UInt64) = (Int16(-80), (UInt8(UInt8(UInt8(139))) is UInt64), (-6), true, UInt64(UInt8(22)))
public var var_1663086714215_73 : Int16 = Int16(18)
public var var_1663086714215_102 : ?(Unit, Int64, Int64) = Option<(Unit, Int64, Int64)>.None
let var_1663086714215_126 : String = "~6\"Q)g}Hid"
let var_1663086714215_153 : Rune = 'd'
public let var_1663086714215_167 : Int64 = (-100)
public var var_1663086714215_202 : UInt64 = UInt64(UInt16(UInt8(Int8(Int8(-71)))))
var var_1663086714215_228 : Int32 = Int32(Int16(Int16(UInt8(18))))
let var_1663086714215_252 : (Int32, (Range<Int8>, Int16, (Unit, Int64, Int64)), Range<UInt8>, Range<Int32>, Int64, String) = (Int32(UInt8(40)), (((Int8(-6)&127)..(Int8(UInt8(4))&127):(((-106)|1))), Int16(121), ((), Int64(UInt16(201)), Int64(UInt8(149)))), ((UInt8(183)&127)..=(UInt8(183)&127):((-57)|1)), ((Int32(56)&127)..=(Int32(110)&127):(24|1)), 117, """
,W^-S
UH5v_
""")
public let var_1663086714215_285 : Int8 = Int8(15)
public var var_1663086714215_291 : (Int64, Float64, (Range<Int8>, Int16, (Unit, Int64, Int64)), Range<Int16>) = (Int64(UInt8(UInt8(103))), Float64(Float64(Float32(-116.0))), (((Int8(-27)&127)..=(Int8(-105)&127):(51|1)), Int16(-50), ((), (-66), Int64(Int32(-98)))), ((Int16(UInt8(224))&127)..=(Int16(-74)&127):((Int64(Int32(Int32(-6)))|1))))


public func func_1663086714215_150<T0>() : Rune { // block id: 151
    var_1663086714215_153
}



public func func_1663086714215_146<T0, T1>(param_1663086714215_147 : Option<Unit>) : Int16 { // block id: 148
    func_1663086714215_150<Range<UInt8>>();
    var var_1663086714215_188 : Bool = (Int8(45) is Float64);
    (Option<Bool>.Some(try { // block id: 162
        'a';
        115 == var_1663086714215_167
    } finally { // block id: 169
        false
    }) ?? if ([false, false, true, false, true, true, true, true, true, false][7]) { // block id: 184
        true
    } else if (if (var_1663086714215_188) { // block id: 191
        var var_1663086714215_197 : Bool = true;
        if (true) { (Int16(56), var_1663086714215_197, (-48), var_1663086714215_197, var_1663086714215_202) } else { var_1663086714215_23 } ;
        UInt64(111);
        var_1663086714215_188
    } else if (true) { // block id: 212
        var_1663086714215_202 = var_1663086714215_202;
        let var_1663086714215_219 : Int32 = Int32(Int16(UInt8(85)));
        Int32(29) != var_1663086714215_219
    } else { // block id: 223
        var_1663086714215_188
    }) { // block id: 225
        var_1663086714215_228 == Int32(124)
    } else { // block id: 234
        UInt16(101);
        !true
    });
    let var_1663086714215_248 : Option<(Int32, (Range<Int8>, Int16, (Unit, Int64, Int64)), Range<UInt8>, Range<Int32>, Int64, String)> = (((UInt16(121)&127)..(UInt16(242)&127):((-47)|1)) as (Int32, (Range<Int8>, Int16, (Unit, Int64, Int64)), Range<UInt8>, Range<Int32>, Int64, String));
    (var_1663086714215_248 ?? var_1663086714215_252)[1][1]
}

main(): Int64 {
    try {
        var loopTimeVar_1663086714215_13 : Int64 = 0;
        do {
            loopTimeVar_1663086714215_13++;
            UInt8(227)
        } while ((var_1663086714215_8) && loopTimeVar_1663086714215_13 < 100 ) ;
        let var_1663086714215_59 : Int64 = 67;
        func func_1663086714215_36<T0, T1>(optionalParam_1663086714215_37 ! : Unit = ()) : Unit { // block id: 39
            let var_1663086714215_85 : UInt64 = UInt64(37);
            try { // block id: 41
                try { // block id: 43
                    var var_1663086714215_46 : UInt64 = UInt64(Int16(-126));
                    var_1663086714215_46 <<= ((var_1663086714215_46) & 7);
                    var_1663086714215_23
                } finally { // block id: 51
                    if (var_1663086714215_8) { var_1663086714215_23 } else { (Int16(-102), true, var_1663086714215_59, true, UInt64(42)) } 
                }
            } finally { // block id: 63
                var var_1663086714215_66 : Int64 = 98;
                var_1663086714215_66 ^ var_1663086714215_59;
                if (var_1663086714215_8) { (var_1663086714215_73, var_1663086714215_8, (-25), var_1663086714215_8, UInt64(67)) } else { (var_1663086714215_73, false, var_1663086714215_66, false, var_1663086714215_85) } 
            };
            (Option<Unit>.None ?? ())
        }
;
        func func_1663086714215_15<T0>(param_1663086714215_16 : Unit, param_1663086714215_17 : Int16, namedParam_1663086714215_18 ! : Int8) : String { // block id: 19
            var_1663086714215_23[2];
            func_1663086714215_36<Range<UInt16>, Range<Int64>>(optionalParam_1663086714215_37 : (var_1663086714215_102 ?? (param_1663086714215_16, var_1663086714215_59, var_1663086714215_59))[0]);
            match (var_1663086714215_59) {
                case -100 => 
                    if (var_1663086714215_8) { (param_1663086714215_16, 39, var_1663086714215_59) } else { ((), (-82), var_1663086714215_59) } ;
                    116;
                    var_1663086714215_126
                
                case caseVar_1663086714215_130 => 
                    let var_1663086714215_133 : Rune = 'a';
                    var_1663086714215_133;
                    "mm:D3RWIC<"
                
                case _ => 
                    var_1663086714215_102;
                    if (var_1663086714215_8) { """
l}?qr
'2<N6
""" } else { var_1663086714215_126 } ;
                    var_1663086714215_126
                
            }
        }
;
        let var_1663086714215_276 : (Option<Unit>) -> Int16 = { lambdaParameter_1663086714215_279 : Option<Unit> => Int16(Int16(54)) };
        func_1663086714215_15<Range<Int64>>(func_1663086714215_36<Range<UInt16>, Range<Int64>>(), (Option<Unit>.None|>var_1663086714215_276), namedParam_1663086714215_18 : var_1663086714215_285);
        var_1663086714215_291[0] % ((var_1663086714215_167) | 1)
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var_1663086714215_59*var_1663086714215_59), 64)
        crccheck.updateBuffer(UInt64(var_1663086714215_73*var_1663086714215_73), 64)
        crccheck.updateBuffer(UInt64(var_1663086714215_285*var_1663086714215_285), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
