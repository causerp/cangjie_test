/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// (CJNATIVE) EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// (CJNATIVE) RUN-EXEC: %run %run_opt %output %run_args
// (not CJNATIVE) ERRCHECK: %compiler %overflow_wrapping %f %cmp_opt

public var var_1692650161489_19 : (Rune, Int16, Bool, Int16, VArray<Unit, $4>) = (r'4', Int16(UInt8(UInt8(102))), true, Int16(-127), VArray<Unit, $4>({ i => ()}))
let var_1692650161489_100 : Int = Int64(-62)
public let var_1692650161489_104 : Class_1692650161489_67 = Class_1692650161489_67()
let var_1692650161489_125 : Class_1692650161489_67 = Class_1692650161489_67()
var var_1692650161489_219 : UInt = UInt64(UInt16(Int8(Int8(5))))
public let var_1692650161489_257 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
public let var_1692650161489_270 : Float32 = Float32(Float32(-36.0))
public var var_1692650161489_370 : Bool = (((UInt16(UInt16(UInt16(UInt8(35))))&127)..=(UInt16(UInt16(Int16(Int16(53))))&127):(Int64(UInt64(159))|1)) is String)
let var_1692650161489_443 : Float64 = Float64(55.0)
public let var_1692650161489_449 : Option<Bool> = Option<Bool>.None
var var_1692650161489_483 : Array<UInt64> = [UInt64(169), UInt64(227), UInt64(UInt32(Int32(UInt16(227)))), UInt64(Int16(Int8(UInt8(36)))), UInt64(UInt16(UInt16(UInt8(214)))), UInt64(UInt64(Int16(-35))), UInt64(32), UInt64(151), UInt64(UInt16(208)), UInt64(UInt8(120))]
let var_1692650161489_570 : ?Int8 = ((((UInt8(UInt8(233))&127)..=(UInt8(UInt8(126))&127):(Int64(19)|1)) as Int8) as Int8)
public let var_1692650161489_639 : Enum_1692650161489_285<Range<Int8>> = Enum_1692650161489_285<Range<Int8>>.defaultValue
let var_1692650161489_669 : Range<UInt16> = ((UInt16(UInt16(22))&127)..(UInt16(UInt16(18))&127):(Int64(16)|1))
public let var_1692650161489_692 : UInt8 = UInt8(Int8(UInt8(53)))
var var_1692650161489_719 : Int = Int64(-19)
let var_1692650161489_829 : Rune = r'E'
func func_1692650161489_35(param_1692650161489_36 : UInt8) : Int64 { // block id: 37
    let var_1692650161489_43 : (Range<UInt16>, UInt16, Range<Int32>, VArray<Int64, $2>, Float64) = (((UInt16(UInt16(109))&127)..=(UInt16(UInt16(190))&127):(Int64(109)|1)), UInt16(UInt16(177)), ((Int32(Int32(UInt8(184)))&127)..(Int32(Int32(11))&127):(Int64(-120)|1)), VArray<Int64, $2>({ i => Int64(-89)}), Float64(-44.0));
    var_1692650161489_43[3][0]
}

public open class Class_1692650161489_67 {
    init() { // block id: 69

    }
;
    static var var_1692650161489_86 : UInt16;
    static let var_1692650161489_92 : VArray<Int64, $2>;
    static let var_1692650161489_130 : Class_1692650161489_67;
    public prop var_1692650161489_764 : (Bool, (UInt32, Range<Int32>, UInt8)) { // block id: 765
        get() { // block id: 767
            ();
            ((((Int32(Int32(44))&127)..(Int32(Int32(6))&127):(Int64(98)|1)) is Option<Int8>), (UInt32(152), ((Int32(Int32(-96))&127)..=(Int32(Int32(-67))&127):(Int64(24)|1)), UInt8(Int8(-41))))
        }

    };
    public prop var_1692650161489_782 : String { // block id: 783
        get() { // block id: 785
            "Wa{&)oT@l\"m"
        }

    };
    mut prop var_1692650161489_816 : Option<Rune> { // block id: 817
        get() { // block id: 819
            ();
            (("<s;Va{'E@V@" as Int8) as Rune);
            var_1692650161489_1044
        }

        set(Value) { // block id: 826
            ();
            var_1692650161489_1044 = Value
        }

    };
    public let var_1692650161489_839 : Range<UInt64> = ((UInt64(UInt64(26))&127)..=(UInt64(UInt64(8))&127):(Int64(90)|1));
    protected prop var_1692650161489_854 : Unit { // block id: 855
        get() { // block id: 857
            ();
            ()
        }

    };
    private mut prop var_1692650161489_872 : (Int8, Array<Unit>, Float32, Range<Int16>, Array<Unit>) { // block id: 873
        get() { // block id: 875
            (Int8(UInt8(Int8(-47))), [(), (), (), (), (), (), (), (), (), ()], Float32(80.0), ((Int16(Int16(-74))&127)..=(Int16(Int16(95))&127):(Int64(-9)|1)), [(), (), (), (), (), (), (), (), (), ()])
        }

        set(Value) { // block id: 886
            ();
            (false, (UInt32(Int32(-63)), ((Int32(Int32(-101))&127)..=(Int32(Int32(83))&127):(Int64(-46)|1)), UInt8(166)));
            ()
        }

    };
    protected mut prop var_1692650161489_900 : (UInt32, Range<Int32>, UInt8) { // block id: 901
        get() { // block id: 903
            (UInt32(235), ((Int32(Int32(-21))&127)..=(Int32(Int32(UInt8(20)))&127):(Int64(62)|1)), UInt8(Int8(UInt8(108))))
        }

        set(Value) { // block id: 916
            ();
            ();
            ()
        }

    };
    public func func_1692650161489_167(param_1692650161489_168 : Range<UInt64>) : (Float32, Int64) { // block id: 169
        let var_1692650161489_186 : Struct_1692650161489_182 = Struct_1692650161489_182();
        if ((((Int64(Int64(-123))&127)..=(Int64(Int64(37))&127):(Int64(14)|1)) is Int16)) { (var_1692650161489_186.var_1692650161489_799) } else { (var_1692650161489_816 ?? var_1692650161489_829) } |>{ lambdaParameter_1692650161489_177 : Rune => var_1692650161489_186.func_1692650161489_189(namedParam_1692650161489_190 : var_1692650161489_782, namedParam_1692650161489_191 : var_1692650161489_669, namedParam_1692650161489_192 : ((UInt16(UInt16(109))&127)..=(UInt16(UInt16(206))&127):(var_1692650161489_719|1)))[0] };
        var var_1692650161489_845 : VArray<Unit, $3> = [(), (), ()];
        var var_1692650161489_936 : Unit = ();
        (var_1692650161489_839, ((UInt16(UInt16(81))&127)..(UInt16(UInt16(144))&127):(Int64(9)|1)), Float32(81.0), [var_1692650161489_845, var_1692650161489_845, var_1692650161489_845, VArray<Unit, $3>(repeat: var_1692650161489_854), var_1692650161489_845, var_1692650161489_845, var_1692650161489_845, var_1692650161489_845, var_1692650161489_845, VArray<Unit, $3>({ i => ()})], var_1692650161489_872, var_1692650161489_900, [VArray<Unit, $3>(repeat: ()), VArray<Unit, $3>(repeat: ()), VArray<Unit, $3>({ i => ()}), VArray<Unit, $3>(repeat: var_1692650161489_854), var_1692650161489_845, VArray<Unit, $3>(repeat: var_1692650161489_936), var_1692650161489_845, VArray<Unit, $3>(repeat: var_1692650161489_936), var_1692650161489_845, VArray<Unit, $3>(repeat: var_1692650161489_936)], var_1692650161489_692)[3][4][2];
        var var_1692650161489_967 : Array<VArray<Unit, $3>> = [VArray<Unit, $3>(repeat: ()), VArray<Unit, $3>({ i => ()}), VArray<Unit, $3>(repeat: ()), VArray<Unit, $3>({ i => ()}), VArray<Unit, $3>({ i => ()}), VArray<Unit, $3>({ i => ()}), VArray<Unit, $3>(repeat: ()), VArray<Unit, $3>({ i => ()}), VArray<Unit, $3>({ i => ()}), VArray<Unit, $3>({ i => ()})];
        var var_1692650161489_1014 : (VArray<Unit, $4>, (Float32, Int64), Int32, Int8, Rune, Float32) = (VArray<Unit, $4>(repeat: ()), (Float32(Float32(41.0)), Int64(Int16(42))), Int32(Int8(109)), Int8(Int8(53)), r'P', Float32(-65.0));
        ((var_1692650161489_967 as (VArray<Unit, $4>, (Float32, Int64), Int32, Int8, Rune, Float32)) ?? try { // block id: 1010
            ();
            ();
            var_1692650161489_1014
        } catch (_) { // block id: 1032
            var_1692650161489_1014
        })[1]
    }
;
    public static var var_1692650161489_1040 : UInt8;
    var var_1692650161489_1044 : Option<Rune> = Option<Rune>.None
    static init() {
        var_1692650161489_86 = UInt16(40)
        var_1692650161489_92 = [Int64(18), Int64(-82)]
        var_1692650161489_130 = Class_1692650161489_67()
        var_1692650161489_1040 = UInt8(121)
    }
}

public func func_1692650161489_79(param_1692650161489_80 : VArray<Int64, $2>) : Bool { // block id: 81
    ((Class_1692650161489_67.var_1692650161489_86) is UInt64)
}

public const func func_1692650161489_171(param_1692650161489_172 : Rune) : UInt32 { // block id: 173
    209
}

public struct Struct_1692650161489_182 {
    init() { // block id: 184

    }
;
    public func func_1692650161489_189(namedParam_1692650161489_190 ! : String, namedParam_1692650161489_191 ! : Range<UInt16>, namedParam_1692650161489_192 ! : Range<UInt16>) : (UInt32, Range<Int32>, UInt8) { // block id: 193
        const var_1692650161489_711 : UInt16 = 26;
        var var_1692650161489_722 : Int64 = Int64(UInt32(UInt16(205)));
        func_1692650161489_35(((((UInt16(var_1692650161489_711)&127)..=(UInt16(var_1692650161489_711)&127):(Int64(16)|1)), var_1692650161489_711, ((Int32(Int32(51))&127)..(Int32(Int32(45))&127):(Int64(-99)|1)), VArray<Int64, $2>(repeat: var_1692650161489_719), var_1692650161489_443)|>func_1692650161489_197)[2]);
        var var_1692650161489_730 : UInt32 = UInt32(119);
        let var_1692650161489_735 : (Float32, UInt32, (Int32, Float32, Int8, Range<Int8>), Range<UInt64>) = (Float32(-41.0), UInt32(UInt16(Int8(-128))), (Int32(-90), Float32(Float32(Float32(-78.0))), Int8(-20), ((Int8(Int8(-65))&127)..=(Int8(Int8(26))&127):(Int64(-58)|1))), ((UInt64(UInt64(UInt32(UInt32(230))))&127)..=(UInt64(UInt64(Int8(25)))&127):(Int64(-65)|1)));
        var_1692650161489_730 ^= var_1692650161489_735[1];
        var_1692650161489_125.var_1692650161489_764[1]
    }
;
    mut prop var_1692650161489_799 : Rune { // block id: 800
        get() { // block id: 802
            ();
            ();
            r'Z'
        }

        set(Value) { // block id: 808
            ()
        }

    }
}

public enum Enum_1692650161489_285<T0> {
    defaultValue
}
public open class Class_1692650161489_319<T0> <: Class_1692650161489_67 {
    init() { // block id: 321

    }
;
    public static prop var_1692650161489_324 : Enum_1692650161489_285<Range<Int8>> { // block id: 325
        get() { // block id: 327
            UInt64(UInt8(Int8(-50)));
            Enum_1692650161489_285<Range<Int8>>.defaultValue
        }

    }
}

public func func_1692650161489_348(param_1692650161489_355 : Int8, namedParam_1692650161489_356 ! : VArray<Unit, $4>) : Unit { // block id: 357
    ((Int64(Int64(99))&127)..=(Int64(Int64(-39))&127):(Int64(-49)|1));
    var loopTimeVar_1692650161489_398 : Int64 = 0;
    while ((match (try { // block id: 362
        if (false) { ((Int32(Int32(32))&127)..=(Int32(Int32(-46))&127):(Int64(114)|1)) } else { ((Int32(Int32(-101))&127)..(Int32(Int32(43))&127):(Int64(-58)|1)) } 
    } finally { // block id: 367
        var_1692650161489_370 &&= var_1692650161489_370;
        let var_1692650161489_383 : Range<Int32> = ((Int32(Int32(-72))&127)..=(Int32(Int32(UInt32(UInt8(81))))&127):(Int64(60)|1));
        var_1692650161489_383
    }) {
        case _ => 
            ();
            UInt8(148) <= UInt8(68)
        
    }) && loopTimeVar_1692650161489_398 < 100 ) {
        loopTimeVar_1692650161489_398++;

    }
}


public func func_1692650161489_348(param_1692650161489_349 : Float64, namedParam_1692650161489_350 ! : Array<Unit>, namedParam_1692650161489_351 ! : Class_1692650161489_67) : Range<Int32> { // block id: 352
    var var_1692650161489_407 : Int8 = Int8(-7);
    let var_1692650161489_426 : Unit = ();
    var var_1692650161489_435 : VArray<Unit, $4> = [(), (), (), ()];
    func_1692650161489_348((Int32(83), var_1692650161489_270, Int8(-1), ((Int8(var_1692650161489_407)&127)..=(Int8(var_1692650161489_407)&127):(var_1692650161489_100|1)))[2], namedParam_1692650161489_356 : if ((Option<Bool>.None ?? var_1692650161489_370)) { // block id: 420
        var var_1692650161489_422 : Unit = ();
        var_1692650161489_422;
        VArray<Unit, $4>(repeat: var_1692650161489_426)
    } else { // block id: 431
        ();
        var_1692650161489_426;
        var_1692650161489_435
    });
    ((Int32(Int32(103))&127)..=(Int32(Int32(-69))&127):(Int64(-88)|1))
}

func func_1692650161489_288(param_1692650161489_289 : Range<UInt32>, optionalParam_1692650161489_290 ! : Range<Int64> = ((Int64(Int64(UInt32(Int8(Int8(-106)))))&127)..=(Int64(Int64(-101))&127):(Int64(-26)|1)), optionalParam_1692650161489_298 ! : (UInt8) -> Int64 = { lambdaParameter_1692650161489_301 : UInt8 => Int64(UInt64(105)) }, namedParam_1692650161489_307 ! : Class_1692650161489_67) : Enum_1692650161489_285<Range<Int8>> { // block id: 308
    let var_1692650161489_344 : Enum_1692650161489_285<Range<Int8>> = Enum_1692650161489_285<Range<Int8>>.defaultValue;
    try { // block id: 310
        let var_1692650161489_312 : Int8 = Int8(UInt8(Int8(Int8(Int8(-9)))));
        var_1692650161489_312;
        Class_1692650161489_319<Class_1692650161489_67>.var_1692650161489_324
    } catch (e: Exception) { // block id: 332
        var var_1692650161489_337 : Int32 = Int32(28);
        try { // block id: 334
            var_1692650161489_337 += var_1692650161489_337;
            var_1692650161489_257;
            Enum_1692650161489_285<Range<Int8>>.defaultValue
        } catch (e: Exception) { // block id: 342
            var_1692650161489_344
        }
    } finally { // block id: 346
        func_1692650161489_348(var_1692650161489_443, namedParam_1692650161489_350 : var_1692650161489_257, namedParam_1692650161489_351 : var_1692650161489_125);
        const var_1692650161489_463 : Unit = ();
        match (var_1692650161489_449) {
            case _ => 
                var var_1692650161489_454 : Range<Int32> = ((Int32(Int32(UInt32(137)))&127)..=(Int32(Int32(Int32(Int16(42))))&127):(Int64(-17)|1));
                var_1692650161489_454;
                var_1692650161489_463;
                Enum_1692650161489_285<Range<Int8>>.defaultValue
            
        }
    }
}

func func_1692650161489_467(param_1692650161489_468 : UInt16, optionalParam_1692650161489_469 ! : (UInt8) -> Int64 = func_1692650161489_35, optionalParam_1692650161489_473 ! : Int16 = Int16(-24), namedParam_1692650161489_475 ! : Array<UInt64>) : Range<UInt32> { // block id: 476
    ((UInt32(UInt32(138))&127)..(UInt32(UInt32(5))&127):(Int64(67)|1))
}

public open class Class_1692650161489_509 <: Class_1692650161489_319<Class_1692650161489_67> {
    init() { // block id: 511

    }
;
    public static var var_1692650161489_514 : Range<Int64> = ((Int64(Int64(92))&127)..=(Int64(Int64(106))&127):(Int64(-127)|1))
}



public func func_1692650161489_281<T0>(param_1692650161489_282 : Range<UInt16>) : Class_1692650161489_67 { // block id: 283
    let var_1692650161489_480 : (UInt8) -> Int64 = func_1692650161489_35;
    const var_1692650161489_540 : Unit = ();
    let var_1692650161489_547 : Bool = (Int32(12) is Array<Unit>);
    match (func_1692650161489_288(func_1692650161489_467(UInt16(16), optionalParam_1692650161489_469 : var_1692650161489_480, namedParam_1692650161489_475 : var_1692650161489_483), optionalParam_1692650161489_290 : Class_1692650161489_509.var_1692650161489_514, namedParam_1692650161489_307 : try { // block id: 520
        const var_1692650161489_523 : UInt16 = 82;
        ((UInt16(var_1692650161489_523)&127)..=(UInt16(var_1692650161489_523)&127):(var_1692650161489_100|1));
        var var_1692650161489_529 : Int64 = Int64(75);
        var_1692650161489_529 <<= ((Int64(-93)) & 7);
        if (var_1692650161489_370) { Class_1692650161489_67() } else { Class_1692650161489_67() } 
    } catch (e: Exception) { // block id: 536
        ();
        VArray<Unit, $4>(repeat: var_1692650161489_540);
        if (var_1692650161489_547) { var_1692650161489_125 } else { var_1692650161489_104 } 
    } finally { // block id: 552
        var_1692650161489_370 &&= var_1692650161489_370;
        var_1692650161489_125
    })) {
        case _ => 
            ()
        
    };
    var_1692650161489_540;
    let var_1692650161489_591 : Int32 = Int32(UInt8(8));
    if (var_1692650161489_547) { match ((var_1692650161489_570 ?? Int8(52))) {
        case _ : VArray<Int64, $2> => 
            var_1692650161489_104
        
        case 107 => 
            var_1692650161489_370 ||= var_1692650161489_370;
            var_1692650161489_104
        
        case _ : Float32 => 
            let var_1692650161489_596 : Int8 = Int8(105);
            (var_1692650161489_591, Float32(-55.0), var_1692650161489_596, ((Int8(var_1692650161489_596)&127)..=(Int8(var_1692650161489_596)&127):(Int64(42)|1)));
            if (var_1692650161489_547) { Class_1692650161489_67() } else { Class_1692650161489_319<Class_1692650161489_67>() } 
        
        case -124 | 93 | -90 => 
            ();
            if (var_1692650161489_547) { Class_1692650161489_319<Class_1692650161489_67>() } else { Class_1692650161489_67() } ;
            var_1692650161489_104
        
        case _ => 
            if (true) { Class_1692650161489_67() } else { Class_1692650161489_67() } 
        
    } } else { ((Option<Class_1692650161489_67>.Some(Class_1692650161489_509()), var_1692650161489_257)[0] ?? if (var_1692650161489_370) { Class_1692650161489_319<Class_1692650161489_67>() } else { var_1692650161489_125 } ) } 
}

func func_1692650161489_197(param_1692650161489_198 : (Range<UInt16>, UInt16, Range<Int32>, VArray<Int64, $2>, Float64)) : (UInt32, Range<Int32>, UInt8) { // block id: 199
    var var_1692650161489_231 : Float32 = Float32(89.0);
    let var_1692650161489_237 : Unit = ();
    let var_1692650161489_247 : Unit = ();
    try { // block id: 205
        let var_1692650161489_207 : Range<Int32> = ((Int32(Int32(-56))&127)..(Int32(Int32(Int8(Int8(109))))&127):(Int64(UInt64(UInt32(72)))|1));
        var_1692650161489_207;
        ((UInt64(UInt64(77))&127)..(UInt64(var_1692650161489_219)&127):(Int64(109)|1));
        let var_1692650161489_227 : Int8 = Int8(75);
        (var_1692650161489_227, [(), (), (), (), (), (), (), (), (), ()], var_1692650161489_231, ((Int16(Int16(-29))&127)..(Int16(Int16(71))&127):(Int64(81)|1)), [(), var_1692650161489_237, var_1692650161489_237, var_1692650161489_237, (), (), (), (), var_1692650161489_237, var_1692650161489_247])
    } finally { // block id: 249
        ();
        let var_1692650161489_252 : Unit = ();
        var_1692650161489_252;
        let var_1692650161489_275 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
        (Int8(10), var_1692650161489_257, var_1692650161489_270, ((Int16(Int16(70))&127)..(Int16(Int16(110))&127):(Int64(16)|1)), var_1692650161489_275)
    }[4][3];
    let var_1692650161489_656 : (Float32, Int64) = (Float32(21.0), Int64(-66));
    func_1692650161489_281<String>(match (var_1692650161489_639) {
        case caseVar_1692650161489_643 => 
            let var_1692650161489_646 : Range<UInt16> = ((UInt16(UInt16(49))&127)..=(UInt16(UInt16(14))&127):(Int64(122)|1));
            var_1692650161489_646
        
        case caseVar_1692650161489_653 : VArray<Unit, $4> => 
            var_1692650161489_656;
            var var_1692650161489_662 : Int32 = Int32(UInt16(UInt16(Int16(UInt8(115)))));
            var_1692650161489_662--;
            var_1692650161489_669
        
        case _ => 
            ((UInt16(UInt16(140))&127)..(UInt16(UInt16(14))&127):(Int64(-70)|1))
        
    }).func_1692650161489_675(var_1692650161489_449, func_1692650161489_35)
}



main(): Int64 {
    try {
        var_1692650161489_19[4][3];
        func func_1692650161489_71(param_1692650161489_72 : Range<Int64>, namedParam_1692650161489_73 ! : VArray<Int64, $2>, namedParam_1692650161489_74 ! : Array<UInt64>, namedParam_1692650161489_75 ! : Range<UInt64>) : Class_1692650161489_67 { // block id: 76
            var var_1692650161489_109 : Int8 = Int8(Int8(UInt8(196)));
            var var_1692650161489_115 : Range<Int8> = ((Int8(Int8(Int8(-127)))&127)..(Int8(Int8(Int8(UInt8(Int8(-97)))))&127):(Int64(16)|1));
            if ((Class_1692650161489_67.var_1692650161489_92|>func_1692650161489_79)) { try { // block id: 95
                ((Int32(Int32(41))&127)..=(Int32(Int32(-22))&127):(var_1692650161489_100|1));
                ();
                var_1692650161489_104
            } finally { // block id: 106
                var_1692650161489_109 %= ((Int8(43)) | 1);
                var_1692650161489_115;
                var_1692650161489_125
            } } else { (Class_1692650161489_67.var_1692650161489_130) } 
        }
;
        Class_1692650161489_67.var_1692650161489_1040|>{ lambdaParameter_1692650161489_62 : UInt8 => var var_1692650161489_133 : Range<Int64> = ((Int64(Int64(Int16(UInt8(145))))&127)..=(Int64(Int64(Int16(UInt8(Int8(-113)))))&127):(Int64(64)|1)); let var_1692650161489_148 : UInt64 = UInt64(UInt16(UInt16(UInt16(145)))); func_1692650161489_71(var_1692650161489_133, namedParam_1692650161489_73 : VArray<Int64, $2>(repeat: var_1692650161489_100), namedParam_1692650161489_74 : [var_1692650161489_148, var_1692650161489_148, UInt64(201), UInt64(204), UInt64(217), var_1692650161489_148, var_1692650161489_148, var_1692650161489_148, UInt64(161), UInt64(9)], namedParam_1692650161489_75 : ((UInt64(UInt64(144))&127)..=(UInt64(UInt64(192))&127):(Int64(-72)|1))).func_1692650161489_167(((UInt64(UInt64(88))&127)..(UInt64(UInt64(180))&127):(Int64(71)|1)))[1] }
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var_1692650161489_100*var_1692650161489_100), 64)
        crccheck.updateBuffer(UInt64(var_1692650161489_219*var_1692650161489_219), 64)
        crccheck.updateBuffer(UInt64(var_1692650161489_692*var_1692650161489_692), 64)
        crccheck.updateBuffer(UInt64(var_1692650161489_719*var_1692650161489_719), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Int32 {
        var i = 0
        var res = ""
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
        if ( res == "07404637466451336621277" ){
            return 0
        }
        return 1
    }
}
extend<T0> Class_1692650161489_319<T0> {

}

extend Class_1692650161489_67 {
    func func_1692650161489_675(param_1692650161489_676 : Option<Bool>, param_1692650161489_677 : (UInt8) -> Int64) : (UInt32, Range<Int32>, UInt8) { // block id: 680
        ((UInt64(UInt64(118))&127)..=(UInt64(UInt64(218))&127):(Int64(90)|1));
        (UInt32(match (Option<Bool>.Some(var_1692650161489_370)) {
            case caseVar_1692650161489_689 : (Rune, Int16, Bool, Int16, VArray<Unit, $4>) => 
                var_1692650161489_692
            
            case _ => 
                Enum_1692650161489_285<Range<Int8>>.defaultValue;
                [UInt64(100), UInt64(60), UInt64(213), UInt64(93), UInt64(220), UInt64(254), UInt64(135), UInt64(187), UInt64(180), UInt64(16)];
                UInt8(226) + UInt8(117)
            
        }), ((Int32(Int32(98))&127)..(Int32(Int32(-88))&127):(Int64(-121)|1)), UInt8(110))
    }

}
// ASSERT: scan-1 sema_varray_cjvm_in_ref_type

