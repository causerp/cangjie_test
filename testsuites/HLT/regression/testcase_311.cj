/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output

public let var29 : Int8 = Int8(20)
public var var70 : Float64 = Float64(Int8(2))
public var var156 : Int64 = Int64(119.0)
public let var164 : Bool = false
public var var168 : Int32 = Int32(Int64(UInt16(94)))
public var var218 : Unit = ()
public let var221 : Bool = true
public var var240 : UInt32 = UInt32(Int16(Int16(Int16(58.0))))
public var var247 : Bool = false
public var var277 : Int16 = Int16(120)
public var var312 : (Int64,Int8,(Float32,Int64,Bool,UInt64,Int32)) = (66, Int8(15), (Float32(-40.0), 51, false, UInt64(130), Int32(UInt8(65))))
public var var328 : (Float32,Int64,Bool,UInt64,Int32) = (Float32(66.0), (-126), (Float64(UInt8(217)) is Range<UInt8>), UInt64(135), Int32(124))
public var var353 : Float32 = Float32(94.0)
public let var394 : Option<Unit> = Option<Unit>.None
public var var439 : Int32 = Int32(Int16(UInt64(Float32(Int32(-108)))))
public let var457 : (UInt32,Float64) = (UInt32(UInt32(Int32(UInt64(151)))), (-24.0))
public let var472 : Enum469<Array<(Int64,Int8,(Float32,Int64,Bool,UInt64,Int32))>, Range<Int16>, Int16> = Enum469<Array<(Int64,Int8,(Float32,Int64,Bool,UInt64,Int32))>, Range<Int16>, Int16>.defaultValue
public let var488 : Range<UInt64> = (UInt64(163)..UInt64(91):(45|1))
main(): Int64 {
    let var20 : Bool = true;
    let var144 : UInt16 = UInt16(84);
    let var179 : (Int64,Int8,(Float32,Int64,Bool,UInt64,Int32)) = (Int64(Float64(Int16(-111))), Int8(73), (Float32(-96.0), Int64(Int16(Int16(-110))), false, UInt64(8), Int32(37)));
    func func9<T0, T1, T2>(namedParam10 ! : Int32, optionalParam11 ! : UInt32 = UInt32(Float64(UInt64(133)))) : Bool { // block id: 15
        let var33 : Bool = (Float64(UInt16(Int32(62))) is Unit);
        let var90 : Float64 = (-49.0);
        let var115 : UInt64 = UInt64(Int8(9));
        func func40<T0>(param41 : UInt16, namedParam42 ! : Unit, optionalParam43 ! : Float32 = Float32(-53.0), optionalParam45 ! : Unit = ()) : Bool { // block id: 47
            var loopTimeVar52 : Int64 = 0;
            while (false && loopTimeVar52 < 100 ) {
                loopTimeVar52++;

            };
            let var60 : Int64 = Int64(UInt8(Float32(36.0)));
            var var78 : (Float32,Int64,Bool,UInt64,Int32) = (Float32(54.0), 87, false, UInt64(183), Int32(UInt16((-10))));
            if ((Float32(-15.0), var60, true, UInt64(95), Int32(55))[2]) { match (var70) {
                case _ =>
                    "SyxgNhn1y2";
                    var78

                case -49.0 =>
                    (Float32(-107.0), var60, var20, UInt64(248), namedParam10)

                case _ =>
                    ();
                    UInt64(167);
                    var78

                case -49.0 =>
                    ();
                    (optionalParam43, (-113), var33, var115, Int32(-117))

                case _ =>
                    var115;
                    var78

            } } else { match ((-53)) {
                case 120 | 36 | -44 =>
                    var90;
                    var78

                case caseVar133 : UInt32 =>
                    optionalParam45;
                    var78

                case _ =>
                    var78;
                    param41;
                    var78

            } } [2]
        }
;
        let var147 : Unit = ();
        var var235 : Unit = ();
        func func369<T0, T1, T2>(optionalParam370 ! : Option<Int16> = (UInt8(127) as Int16), optionalParam373 ! : Range<Int8> = (Int8(Int32(Float32(UInt8(38))))..=Int8(-120):(13|1)), namedParam381 ! : Int16, namedParam382 ! : Float64) : Bool { // block id: 383
            match (match (UInt64(153)) {
                    case _ : Enum196 =>
                        ();
                        var147;
                        var394

                    case caseVar398 : String =>
                        var147;
                        var394

                    case 210 | 83 | 9 | 198 =>
                        (80..(-71):(var156|1));
                        Option<Unit>.None

                    case 9 =>
                        ();
                        85.0;
                        Option<Unit>.None

                    case _ =>
                        Option<Unit>.Some(var218)

                }) {
                case caseVar423 =>
                    Option<Unit>.Some(var218);
                    var328

                case _ =>
                    var218;
                    let var434 : Int64 = (-119);
                    (var353, var434, var164, UInt64(127), var439)

            }[2]
        }
;
        if (if (if (var20) { // block id: 22
            var20
        } else if (false) { // block id: 25
            var20
        } else { // block id: 27
            var29;
            "uqaYISfoBo";
            var33
        }) { var20 } else { func40<Float32>(var144, namedParam42 : var147, optionalParam43 : Float32(-26.0), optionalParam45 : ()) } ) { // block id: 151
            (var156, Int8(63), (Float32(37.0), var156, var164, UInt64(5), var168))[1];
            (UInt16(152), var33, var179)[1]
        } else if (if (match (Enum196.defaultValue) {
            case caseVar201 : UInt32 =>
                true

            case defaultValue =>
                ();
                var33;
                var33

            case defaultValue =>
                var164

            case defaultValue =>
                var218;
                var221

            case _ =>
                var147;
                ();
                var20

        }) { // block id: 228
            var147;
            ();
            var221
        } else if (true) { // block id: 233
            var235;
            false
        } else { // block id: 238
            var240;
            var247
        }) { // block id: 249
            (Option<Unit>.Some(var218) ?? ());
            (Option<Unit>.None ?? var147);
            func262((var144, var221, ((-5), Int8(37), (var353, (-89), false, UInt64(88), Int32(117)))), (Float32(107.0), (-80), false, UInt64(126), var168), Int8(34), namedParam266 : Enum196.defaultValue)
        } else { // block id: 367
            func369<Enum196, Range<Int32>, Option<Unit>>(optionalParam373 : (Int8(-41)..=var29:(67|1)), namedParam381 : var277, namedParam382 : (-61.0))
        }
    }
;
    if (func9<Range<UInt64>, Range<UInt64>, UInt32>(namedParam10 : var439, optionalParam11 : var240)) { var457[1] } else { Float64(var353) } ;
    match (match (var472) {
            case defaultValue =>
                'a'

            case _ =>
                '0'

        }) {
        case _ =>
            var156

        case _ =>
            var488;
            var156

    }
    // CRC Check All Variables
    var crccheck = CrcCheck(5000, 32)
    crccheck.updateBuffer(UInt64(var144), 64)
    crccheck.updateBuffer(UInt64(var168), 64)
    crccheck.updateBuffer(UInt64(var240), 64)
    crccheck.updateBuffer(UInt64(var439), 64)
    crccheck.crcCheck()
    crccheck.getCrcOutput()

    return 0;
}

class CrcCheck {
    public var buffer: Array<Int32>
    public var poly: Array<Int32>
    public var crc_output: Array<Int32>
    public var poly_n: Int64
    public var buffer_index: Int64
    public var crc_output_n: Int64

    public init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int32> (crc_output_n, repeat:0)
        buffer = Array<Int32> (buffer_n, repeat:0)
        poly_n = crc_n + 1
        poly = Array<Int32> (poly_n, repeat:0)
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    public func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int32> (byte_n, repeat:0)
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    public func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int32> (crc_output_n, repeat:0)
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int32> (crc_output_n, repeat:0)
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    public func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = Int32(2**2) * crc_output[i] + Int32(2**1) * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
    }
}
public enum Enum196 {
    defaultValue
}

public func func262(param263 : (UInt16,Bool,(Int64,Int8,(Float32,Int64,Bool,UInt64,Int32))), param264 : (Float32,Int64,Bool,UInt64,Int32), param265 : Int8, namedParam266 ! : Enum196) : Bool { // block id: 267
    var var281 : Option<Int16> = Option<Int16>.None;
    let var284 : Int16 = Int16(UInt16(129));
    if (var164) { // block id: 270
        (var281 ?? var284);
        try { // block id: 288
            ();
            Enum196.defaultValue
        } catch (_) { // block id: 291
            var218;
            var70;
            namedParam266
        };
        if (true) { var247 } else { var221 }
    } else { // block id: 299
        [var312, var312, (var156, Int8(108), var328), (var156, param265, var328), var312][3];
        false
    }
}


public enum Enum469<T0, T1, T2> {
    defaultValue
}
extend<T0, T1, T2> Enum469<T0, T1, T2> {

}

extend Enum196 {

}
// ASSERT: scan sema_unreachable_pattern
// ASSERT: scan chir_typecast_overflow
// ASSERT: scan chir_dce_unused_expression
// ASSERT: scan chir_dce_unused_variable


