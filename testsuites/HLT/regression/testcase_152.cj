/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args

public let var_1663265029350_42 : UInt16 = UInt16(137)
public var var_1663265029350_53 : Int64 = Int64(UInt32(16))
var var_1663265029350_67 : UInt64 = UInt64(249)
let var_1663265029350_96 : Unit = ()
public var var_1663265029350_162 : Unit = ()
public let var_1663265029350_177 : Float64 = Float64(Float32(-45.0))
public let var_1663265029350_218 : Option<Int16> = (Int32(Int8(107)) as Int16)
let var_1663265029350_296 : Int8 = Int8(-66)
public func func_1663265029350_8<T0>(param_1663265029350_9 : Int16) : Unit { // block id: 10
    var var_1663265029350_28 : (Unit, UInt64, UInt16, Rune) = ((), UInt64(26), UInt16(61), r'E');
    match (try { // block id: 15
            var var_1663265029350_18 : Int64 = (-125);
            var_1663265029350_18 ^ 120
        } finally { // block id: 21
            48
        }) {
        case _ => 
            let var_1663265029350_37 : UInt64 = UInt64(UInt32(UInt8(87)));
            if (false) { var_1663265029350_28 } else { ((), var_1663265029350_37, var_1663265029350_42, r'g') } ;
            var_1663265029350_28
        
    }[0]
}

public struct Struct_1663265029350_76<T0, T1> {
    public init() { // block id: 78

    }
;
    public prop var_1663265029350_84 : Float64 { // block id: 85
        get() { // block id: 87
            (-36.0)
        }

    };
    private static var var_1663265029350_153 : Int8 = Int8(14);
    let var_1663265029350_202 : Int16 = Int16(87);
    public static prop var_1663265029350_241 : Unit { // block id: 242
        get() { // block id: 244
            ();
            ();
            ()
        }

    };
    public prop var_1663265029350_268 : Bool { // block id: 269
        get() { // block id: 271
            (((UInt64(138)&127)..(UInt64(40)&127):((-34)|1)) is (Unit, UInt64, UInt16, Rune))
        }

    };
    public func func_1663265029350_106<T0, T1, T2>(namedParam_1663265029350_107 ! : Int64, namedParam_1663265029350_108 ! : (Int16) -> Unit) : UInt32 { // block id: 111
        var var_1663265029350_119 : Enum_1663265029350_113 = Enum_1663265029350_113.defaultValue;
        var var_1663265029350_129 : (Int16, Enum_1663265029350_113, Int8, Int8, Float64, String) = (Int16(-93), Enum_1663265029350_113.defaultValue, Int8(UInt8(UInt8(207))), Int8(-7), (-109.0), """
`6Qqf
Pw\\jk
""");
        let var_1663265029350_157 : String = """
,G(8A
Zl'>\"
""";
        let var_1663265029350_190 : Rune = r'n';
        var var_1663265029350_194 : UInt32 = UInt32(49);
        var var_1663265029350_207 : Float64 = (-56.0);
        match (match (var_1663265029350_119) {
                case _ => 
                    var_1663265029350_84 * var_1663265029350_84;
                    UInt16(37);
                    var_1663265029350_129
                
                case defaultValue => 
                    var_1663265029350_129
                
                case _ : Float32 => 
                    let var_1663265029350_148 : Int16 = Int16(41);
                    (var_1663265029350_148, var_1663265029350_119, Int8(61), var_1663265029350_153, var_1663265029350_84, var_1663265029350_157)
                
                case _ => 
                    var_1663265029350_162;
                    (Int16(-84), Enum_1663265029350_113.enumValue_1663265029350_167(Float32(-118.0), func_1663265029350_8<Float32>), var_1663265029350_153, Int8(-111), var_1663265029350_177, var_1663265029350_157)
                
            }[1]) {
            case defaultValue => 
                var_1663265029350_162;
                if (true) { r'e' } else { var_1663265029350_190 } ;
                var_1663265029350_194 -= var_1663265029350_194
            
            case _ => 
                ();
                var_1663265029350_202 / ((var_1663265029350_202) | 1);
                var_1663265029350_207 = var_1663265029350_207
            
        };
        if ((var_1663265029350_218 ?? var_1663265029350_202) == Int16(-83)) { // block id: 224
            [var_1663265029350_162, var_1663265029350_162, (), var_1663265029350_241, (), var_1663265029350_162, (), var_1663265029350_162, (), var_1663265029350_162][8];
            ["""
FSl[]
T#FFf
""", """
Q}WuE
p(n.Z
""", "jH5mlVd~3p", "e7>Z<q}rF4", "u+Nm4qX(j(", """
+I=p|
^ ?F6
""", "ENzvYjT7+L", """
PzSiM
AXaZ}
""", "$Y$od4}&?x", ###"kMk5o5+Z*'"###][1]
        } else if ((###"A${var_1663265029350_157}8^${var_1663265029350_157}7${var_1663265029350_157}T>!Tc.${var_1663265029350_157}"### is Array<String>)) { // block id: 261
            [true, true, false, false, true, true, false, false, false, true][6];
            if (var_1663265029350_268) { """
35]1/
SvwUr
""" } else { "8*TVoj-I<c" } 
        } else { // block id: 276
            if (true) { "CiIpYur^Oq" } else { """
Aa4<}
#G\\+_
""" } 
        };
        match (r'g') {
            case caseVar_1663265029350_285 => 
                ();
                var_1663265029350_194 >> ((var_1663265029350_194) & 7)
            
            case _ : UInt64 => 
                var_1663265029350_296 * var_1663265029350_153;
                var_1663265029350_162;
                var_1663265029350_194
            
            case _ : UInt32 => 
                var_1663265029350_162;
                var_1663265029350_194
            
            case r'5' | r'w' | r'L' => 
                42 - namedParam_1663265029350_107;
                var_1663265029350_194 << ((var_1663265029350_194) & 7)
            
            case _ => 
                var_1663265029350_194
            
        }
    }

}

public enum Enum_1663265029350_113 {
    defaultValue |
    enumValue_1663265029350_167(Float32, (Int16) -> Unit)
}

main(): Int64 {
    try {
        let var_1663265029350_58 : Int16 = Int16(UInt16(UInt16(68)));
        if (false) { // block id: 50
            var_1663265029350_53 |= 36;
            var_1663265029350_58
        } else if (true) { // block id: 63
            var_1663265029350_42;
            var_1663265029350_67 *= var_1663265029350_67;
            Int16(-40)
        } else { // block id: 71
            Int16(-109) % ((Int16(-49)) | 1)
        }|>func_1663265029350_8<Float32>;
        func func_1663265029350_80<T0>() : Struct_1663265029350_76<Rune, Bool> { // block id: 81
            Struct_1663265029350_76<Rune, Bool>()
        }
;
        func_1663265029350_80<String>().var_1663265029350_84;
        let var_1663265029350_319 : Int64 = Int64(UInt32(25));
        let var_1663265029350_323 : (Int16) -> Unit = func_1663265029350_8<Float32>;
        func func_1663265029350_99(namedParam_1663265029350_100 ! : UInt16) : Int64 { // block id: 101
            Int64((func_1663265029350_80<String>().func_1663265029350_106<Enum_1663265029350_113, Range<UInt64>, Int16>(namedParam_1663265029350_107 : var_1663265029350_319, namedParam_1663265029350_108 : var_1663265029350_323)))
        }
;
        func func_1663265029350_90(optionalParam_1663265029350_91 ! : String = "z*QK4LFvm(", namedParam_1663265029350_93 ! : Int64) : Int64 { // block id: 94
            var_1663265029350_96;
            func_1663265029350_99(namedParam_1663265029350_100 : var_1663265029350_42)
        }
;
        func_1663265029350_90(namedParam_1663265029350_93 : func_1663265029350_99(namedParam_1663265029350_100 : UInt16(83)))
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var_1663265029350_58*var_1663265029350_58), 64)
        crccheck.updateBuffer(UInt64(var_1663265029350_67*var_1663265029350_67), 64)
        crccheck.updateBuffer(UInt64(var_1663265029350_319*var_1663265029350_319), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Enum_1663265029350_113 {

}

extend<T0, T1> Struct_1663265029350_76<T0, T1> {

}

