/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC-1: %compiler %cmp_opt %f -o %output

public let var37 : (Float32, UInt64, Rune) = (Float32(Float32(Float32(-47.0))), UInt64(38), 'G')
public var var55 : Int64 = (-103)
public let var75 : Aggregate71 = Aggregate71()
public var var173 : Bool = false
public let var177 : Class129 = Class129()
public let var197 : Int8 = Int8(39)
public let var224 : Array<Unit> = Array<Unit>(10){ i => () }
public var var243 : Bool = ((-16) is Class129)
public let var256 : Aggregate71 = Aggregate71()
public var var266 : Float64 = 104.0
public let var269 : Range<UInt32> = (UInt32(78)&127..UInt32(173)&127:14|1)
public let var273 : Bool = (UInt32(Int8(87)) is (Float32, UInt64, Rune))
public let var281 : Enum161 = Enum161.defaultValue
public let var287 : UInt64 = UInt64(UInt32(131))
let var371 : UInt16 = UInt16(80)
public var var389 : Int8 = Int8(46)
public let var400 : Array<Int8> = [Int8(0), Int8(74), Int8(-13), Int8(-68), Int8(-67), Int8(48), Int8(67), Int8(122), Int8(63), Int8(3)]
public var var405 : Float32 = Float32(-62.0)
public var var435 : String = "\\A&e&4R-o#"
public let var475 : Float64 = Float64(Float32(Float32(20.0)))
public let var486 : UInt64 = UInt64(UInt8(25))
public let var573 : Rune = 'n'
public let var580 : Unit = ()
public var var596 : Rune = 'F'
public var var600 : Rune = 'e'
public var var605 : Int16 = Int16(UInt8(Int8(UInt8(UInt8(140)))))
public var var837 : Int32 = Int32(106)
let var898 : Array<Float32> = Array<Float32>(10){ i => Float32(-60.0) }
public var var942 : Float32 = Float32(7.0)
public let var988 : Array<Rune> = ['I', 'P', 'z', 'h', 'R', 'r', 'Y', 'f', '4', 'x']
public var var1031 : (Float64, Int64, Option<Int64>, UInt32, Array<Rune>, Unit, Range<Int16>) = (Float64(39.0), (-58), Option<Int64>.None, UInt32(94), ['g', 'D', 'v', 'v', 'c', '0', 'D', 'q', 'X', 'S'], (), (Int16(-33)&127..=Int16(-36)&127:(-57)|1))
public var var1245 : ?Float32 = (Option<Array<Int8>>.None as Float32)
public var var1278 : UInt16 = UInt16(UInt8(103))
public let var1295 : Unit = ()
public var var1355 : UInt8 = UInt8(UInt8(168))
public let var1417 : ?(UInt16, Range<Int32>, Int16, (Unit, Range<Int64>, Unit)) = Option<(UInt16, Range<Int32>, Int16, (Unit, Range<Int64>, Unit))>.None
public let var1465 : Unit = ()
public let var1481 : Array<Option<Bool>> = Array<Option<Bool>>(10){ i => Option<Bool>.None }
public var var1522 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
public var var1553 : (UInt16, Range<Int32>, Int16, (Unit, Range<Int64>, Unit)) = (UInt16(Int16(Int16(35))), (Int32(Int32(1))&127..=Int32(95)&127:(95|1)), Int16(UInt16(244)), ((), ((-81)&127..=(-90)&127:(-14)|1), ()))
public let var1587 : (Int32, (Range<UInt8>, Array<Unit>, Int8, Int32, Int16)) = (Int32(-21), ((UInt8(85)&127..UInt8(240)&127:(Int64(Int32(-118))|1)), [(), (), (), (), (), (), (), (), (), ()], Int8(-66), Int32(Int8(Int8(66))), Int16(UInt8(55))))
public let var1620 : Array<Int32> = [Int32(Int8(UInt8(Int8(-47)))), Int32(-47), Int32(108), Int32(53), Int32(-3), Int32(Int8(32)), Int32(UInt16(81)), Int32(UInt32(58)), Int32(UInt8(152)), Int32(-89)]
public let var1640 : ((Float32, UInt64, Rune), Unit, Array<Rune>, String, Float64) = ((Float32(Float32(-110.0)), UInt64(246), 'a'), (), ['E', 'h', 'F', '2', 'g', 'e', 'd', 'd', 'g', 'a'], "Oug,a{;a=9t", (-41.0))
public let var1707 : (Array<Int32>, ((Float32, UInt64, Rune), Unit, Array<Rune>, String, Float64), UInt8, Array<Rune>) = ([Int32(59), Int32(87), Int32(116), Int32(-90), Int32(93), Int32(71), Int32(-86), Int32(91), Int32(-76), Int32(105)], ((Float32(-96.0), UInt64(65), '4'), (), ['2', 'F', 'F', 'f', 'H', 'e', '7', '0', 'g', 'f'], "~\\X61+,EUo", 12.0), UInt8(Int8(UInt8(63))), ['l', '4', 'h', 'Y', '1', 'P', 'c', '3', 'v', 'Q'])
public var var1879 : ((Float32, UInt64, Rune), Unit, Array<Rune>, String, Float64) = ((Float32(80.0), UInt64(157), 'M'), (), ['W', 'l', '8', 'W', '3', 'u', 'P', '0', 'B', 'k'], "sik8B?Wl80", Float64(Float64(Float32(Float32(45.0)))))
public let var2030 : Unit = ()
public var var2082 : UInt64 = UInt64(124)
public let var2171 : Int32 = Int32(Int8(-30))
public var var2220 : ?Range<UInt64> = Option<Range<UInt64>>.None
public let var2233 : Option<Bool> = (Int8(Int8(Int8(UInt8(83)))) as Bool)
public let var2260 : UInt32 = UInt32(50)
public let var2293 : ??Array<Int8> = ([(), (), (), (), (), (), (), (), (), ()] as Option<Array<Int8>>)
var var2466 : ?Array<Int8> = Option<Array<Int8>>.None
public var var2533 : Bool = false
public var var2579 : UInt16 = UInt16(UInt16(UInt8(UInt8(UInt8(121)))))
let var2653 : Int8 = Int8(33)
var var2668 : Int64 = 120
public let var2704 : Range<UInt8> = (UInt8(136)&127..UInt8(99)&127:((-72)|1))
public struct Aggregate71 {
    public init() { // block id: 73

    }
;
    let var152 : (Int16, Int32, UInt8, Float64, Unit) = (Int16(-96), Int32(61), UInt8(99), (-84.0), ());
    public static var var701 : Float64 = 94.0;
    static let var823 : (Float64, Int64, Option<Int64>, UInt32, Array<Rune>, Unit, Range<Int16>) = (24.0, (-92), Option<Int64>.None, UInt32(212), ['v', 'I', 'b', 'z', 'm', 'e', 'E', '4', 't', 'a'], (), (Int16(6)&127..Int16(-74)&127:104|1));
    public static var var1312 : Bool = true;
    public static func func1088(optionalParam1089 ! : ((Float32, UInt64, Rune)) -> (Unit, Range<Int64>, Unit) = { lambdaParameter1092 : (Float32, UInt64, Rune) => ((), (40&127..=Int64(Int8(-121))&127:((-116)|1)), ()) }) : Unit { // block id: 1104
        UInt32((Option<Array<UInt8>>.Some([UInt8(188), UInt8(37), UInt8(143), UInt8(80), UInt8(84), UInt8(246), UInt8(218), UInt8(96), UInt8(96), UInt8(13)]) ?? [UInt8(203), UInt8(144), UInt8(172), UInt8(0), UInt8(36), UInt8(196), UInt8(8), UInt8(228), UInt8(186), UInt8(72)])[6]);
        var var1130 : ?Unit = ([UInt8(180), UInt8(138), UInt8(186), UInt8(200), UInt8(31), UInt8(243), UInt8(123), UInt8(157), UInt8(247), UInt8(7)] as Unit);
        var389 = match (match (Option<Array<Int8>>.Some([Int8(70), Int8(-92), Int8(-125), Int8(79), Int8(-60), Int8(-94), Int8(42), Int8(124), Int8(106), Int8(-27)])) {
                case caseVar1125 => 
                    if (var243) { var1130 } else { Option<Unit>.None } 
                
                case _ : Option<Float32> => 
                    (-48.0) * 59.0;
                    Option<Unit>.Some(var580)
                
                case caseVar1144 : Option<Array<UInt8>> => 
                    if (false) { Option<Unit>.None } else { Option<Unit>.None } 
                
                case _ => 
                    var580;
                    Option<Unit>.Some(var580)
                
            }) {
            case _ => 
                Int8(-74) << ((Int8(-57)) & 7)
            
        };
        var loopTimeVar1320 : Range<UInt64> = (UInt64(104)&127..=UInt64(Int32(-83))&127:(Int64(UInt64(122))|1));
        for (i in loopTimeVar1320 where var243) {
            func1303|>func1164;
            try (resource = Class129()) { // block id: 1307
                continue;
                var243 ||= var1312;
                var1295
            } catch (e: Exception) { // block id: 1315
                var580
            } finally { // block id: 1317
                (93&127..96&127:(-6)|1);
                ()
            }
        }
    }
;
    func func78() : UInt16 { // block id: 79
        let var84 : Int16 = Int16(Int8(UInt8(UInt8(Int8(44)))));
        var var96 : UInt8 = UInt8(Int8(UInt8(36)));
        var var116 : UInt64 = UInt64(89);
        match (match (var84 + var84) {
                case _ : Int8 => 
                    var96 %= ((UInt8(10)) | 1);
                    Int8(-89)
                
                case _ => 
                    let var105 : String = "'t#QQdfRQB";
                    var105;
                    var var108 : Int8 = Int8(29);
                    var108
                
            }) {
            case caseVar112 : Unit => 
                var116--
            
            case _ => 
                var55 ^= var55
            
        };
        var var125 : Float32 = Float32(-122.0);
        let var168 : Unit = ();
        func func133(param134 : Int8, param135 : Bool) : Class129 { // block id: 136
            var var140 : Class129 = Class129();
            try { // block id: 138
                var140
            } finally { // block id: 142
                var loopTimeVar148 : Int64 = 0;
                while ((param135) && loopTimeVar148 < 100 ) {
                    loopTimeVar148++;
                    ()
                };
                var152[4];
                match (Enum161.defaultValue) {
                    case _ : Bool => 
                        var168;
                        param135;
                        if (var173) { var140 } else { var177 } 
                    
                    case _ => 
                        ();
                        var55;
                        var140
                    
                    case defaultValue => 
                        var168;
                        var177
                    
                    case _ => 
                        if (false) { Class129() } else { Class129() } 
                    
                }
            }
        }
;
        (var125, UInt64(185), func133(var197, true).func566(namedParam202 : var605, namedParam203 : """
[Xim-
@#: 4
"""));
        if (!false) { // block id: 2458
            ();
            var266 %= Float64((Int32(62.0)) | 1);
            UInt16(36)
        } else { // block id: 2464
            var2466;
            var2293;
            UInt16(119)
        } << ((UInt16(166)) & 7)
    }

}

public open class Class129 <: Resource {
    public init() { // block id: 131

    }
;
    public static let var354 : (Unit, Range<Int64>, Unit) = ((), ((-54)&127..=(-69)&127:(111|1)), ());
    private static var var563 : Range<UInt8> = (UInt8(61)&127..UInt8(132)&127:32|1);
    public static var var652 : ?Float64 = Option<Float64>.None;
    static let var796 : ?Int64 = Option<Int64>.None;
    public static var var809 : Int32 = Int32(65);
    private static let var893 : ?Float32 = Option<Float32>.None;
    public static var var965 : UInt64 = UInt64(97);
    protected static func func883(param884 : (UInt16, Range<Int32>, Int16, (Unit, Range<Int64>, Unit))) : Array<Rune> { // block id: 885
        match ((var893 ?? var898[5])) {
            case -19.0 | -21.0 => 
                if (var173) { (Int8(-73)&127..Int8(58)&127:(-123)|1) } else { (Int8(50)&127..Int8(58)&127:69|1) } ;
                var37;
                var287 - var486
            
            case _ => 
                var55 >>= ((113) & 7);
                [Float32(-25.0), var405, Float32(-80.0), var942, var942, Float32(119.0), var942, var405, var405, var405];
                UInt64(186)
            
            case _ => 
                Option<Rune>.None;
                var287 | var486
            
        };
        func706(var75);
        let var972 : Rune = 'N';
        let var978 : Rune = 'l';
        let var1009 : Rune = '0';
        try { // block id: 960
            try { // block id: 962
                var965 += UInt64(7);
                [var600, 'n', var972, var972, var600, '5', var978, 'm', var600, var573]
            } catch (e: Exception) { // block id: 983
                var266 %= Float64((Int32((-105.0))) | 1);
                var988
            }
        } catch (_) { // block id: 990
            Option<Unit>.Some(var580);
            var loopTimeVar997 : Int64 = 0;
            while ((var273) && loopTimeVar997 < 100 ) {
                loopTimeVar997++;

            };
            if (var273) { var988 } else { [var573, 'g', '8', var972, var600, var978, var1009, 'I', 'm', var972] } 
        }
    }
;
    static let var1068 : ?Array<Int8> = Option<Array<Int8>>.None;
    protected static func func1016(optionalParam1017 ! : Option<Int64> = ((Float64(Float32(59.0)), (Int8(33)&127..Int8(-22)&127:107|1)) as Int64), namedParam1023 ! : Array<Unit>, namedParam1024 ! : ((Float32, UInt64, Rune), Unit, Array<Rune>, String, Float64)) : Option<Array<Int8>> { // block id: 1025
        match ((try { // block id: 1029
                var1031;
                var371 << ((UInt16(71)) & 7);
                Option<Array<Int8>>.Some(var400)
            } finally { // block id: 1056
                var197;
                var580;
                Option<Array<Int8>>.None
            } as Rune)) {
            case _ : Option<Float64> => 
                var266
            
            case _ => 
                Float32(-50.0);
                var1068;
                (-105.0)
            
        };
        var loopTimeVar1076 : Range<UInt64> = (UInt64((-85))&127..UInt64(249)&127:(Int64(UInt8(Int8(UInt8(140))))|1));
        (Option<Unit>.Some(for (i in loopTimeVar1076 where false) {

        }) ?? Aggregate71.func1088());
        var var1333 : ??Array<Int8> = (Aggregate71() as Option<Array<Int8>>);
        var var1346 : (Option<Array<Int8>>) -> Option<Unit> = func1338;
        (var1333 ?? match ((Option<Array<Int8>>.Some([Int8(79), Int8(-2), Int8(-31), Int8(-10), Int8(90), Int8(-1), Int8(-68), Int8(-115), Int8(25), Int8(-76)])|>var1346)) {
            case _ => 
                var1355 += UInt8(35);
                if (false) { var1068 } else { Option<Array<Int8>>.None } 
            
            case caseVar1365 => 
                var1068
            
            case caseVar1370 : Range<Int16> => 
                ();
                (Int32(-71)&127..Int32(21)&127:60|1);
                if (var243) { var1068 } else { Option<Array<Int8>>.None } 
            
            case _ => 
                var893;
                var1068
            
        })
    }
;
    static let var1396 : Unit = ();
    private static func func684(optionalParam685 ! : ((Float32, UInt64, Rune), Unit, Array<Rune>, String, Float64) = ((Float32(-108.0), UInt64(155), 'm'), (), ['b', 'Y', 'Y', '2', 'R', '1', '0', '1', '4', 't'], ###"xeO*\\rtm1 "###, 95.0)) : Float64 { // block id: 695
        var var714 : Unit = ();
        try (resource = Class129()) { // block id: 697
            Aggregate71.var701;
            ()
        } catch (_) { // block id: 704
            Aggregate71()|>func706;
            (Option<Unit>.None ?? var714);
            (Option<Unit>.Some(var714) ?? var580)
        } finally { // block id: 724
            var256|>func706
        };
        let var768 : (UInt16, Range<Int32>, Int16, (Unit, Range<Int64>, Unit)) = (UInt16(73), (Int32(121)&127..=Int32(-39)&127:17|1), Int16(-115), ((), (Int64(UInt64(137))&127..=Int64(Int16(-84))&127:(Int64(UInt8(202))|1)), ()));
        let var1385 : ?Unit = (Option<Rune>.Some('r') as Unit);
        let var1793 : (Array<Float32>) -> Array<Unit> = func1406;
        let var1817 : (Float64, Range<Int8>) = (Float64(Float32(14.0)), (Int8(87)&127..Int8(91)&127:((-76)|1)));
        func func759(namedParam760 ! : Option<Rune>, optionalParam761 ! : Int16 = Int16(-41)) : (Float64, Range<Int8>) { // block id: 763
            let var875 : Range<Int64> = (75&127..(-43)&127:15|1);
            (try { // block id: 766
                var768;
                var580;
                var55
            } catch (e: Exception) { // block id: 785
                var580;
                125
            }&127..=(if (true) { var796 } else { Option<Int64>.None }  ?? if (var273) { // block id: 801
                (-22) | var55
            } else { // block id: 805
                var37;
                var809 >>= ((var809) & 7);
                (-72)
            })&127:((func883(var768)|>{ lambdaParameter852 : Array<Rune> => let var864 : (Aggregate71) -> Unit = func706; try { // block id: 855
                Option<Unit>.None.getOrThrow();
                (var796 ?? (-43))
            } catch (e: Exception) { // block id: 861
                Aggregate71()|>var864;
                var55 + var55
            } finally { // block id: 870
                ((), var875, ())[2];
                Enum161.defaultValue;
                func814(lambdaParameter852)
            } })|1));
            func1016(optionalParam1017 : try { // block id: 1383
                var1385;
                Option<Int64>.None
            } finally { // block id: 1390
                [var1295, var580, var580, var1396, (), (), (), (), var1295, var1396];
                Option<Int64>.None
            }, namedParam1023 : ([Float32(-81.0), Float32(-91.0), Float32(9.0), Float32(-95.0), Float32(101.0), Float32(75.0), Float32(48.0), Float32(114.0), Float32(-74.0), Float32(-114.0)]|>var1793), namedParam1024 : if (false) { ([var837, Int32(36), Int32(15), Int32(-8), Int32(-8), Int32(-95), var837, var809, var809, var809], var1640, UInt8(159), var988) } else { var1707 } [1]);
            var1817
        }
;
        (if (var173) { Option<Float64>.None } else { Option<Float64>.Some(var266) }  ?? if (true) { // block id: 737
            var714;
            124.0
        } else if (false) { // block id: 741
            (var371, (Int32(-44)&127..Int32(-78)&127:((-128)|1)), var605, var354);
            var714;
            116.0
        } else { // block id: 752
            (-56.0);
            ();
            var475
        }) + func759(namedParam760 : Option<Rune>.None, optionalParam761 : Int16(-109))[0]
    }
;
    let var2149 : Unit = ();
    public static var var2211 : Option<Range<UInt64>> = Option<Range<UInt64>>.None;
    static func func625(optionalParam626 ! : (Int64) -> Rune = { lambdaParameter629 : Int64 => 'f' }, namedParam634 ! : ((Float32, UInt64, Rune)) -> (Unit, Range<Int64>, Unit)) : (UInt16, Range<Int32>, Int16, (Unit, Range<Int64>, Unit)) { // block id: 637
        let var1933 : (Range<UInt8>, Array<Unit>, Int8, Int32, Int16) = ((UInt8(UInt8(UInt8(22)))&127..UInt8(UInt8(UInt8(195)))&127:((-5)|1)), [(), (), (), (), (), (), (), (), (), ()], Int8(UInt8(233)), Int32(UInt16(146)), Int16(UInt16(UInt8(Int8(55)))));
        let var2053 : Unit = ();
        func func640(namedParam641 ! : Enum161) : Class129 { // block id: 642
            (try { // block id: 649
                [Int8(-21), Int8(-88), Int8(-77), Int8(-42), Int8(-92), Int8(-55), Int8(-63), Int8(-73), Int8(-31), Int8(126)];
                var652
            } catch (_) { // block id: 654
                (UInt16(19), (Int32(-126)&127..Int32(4)&127:((-101)|1)), var605, var354);
                if (true) { Option<Float64>.None } else { var652 } 
            } finally { // block id: 667
                let var669 : Array<Unit> = Array<Unit>(10){ i => () };
                var669;
                Option<Float64>.Some((-15.0))
            } ?? func684(optionalParam685 : match (var435) {
                case _ => 
                    if (var173) { var1640 } else { ((Float32(-74.0), UInt64(2), 'E'), var1396, ['3', 't', 'k', 'W', 'i', 'k', 'x', '7', '7', 'n'], var435, var475) } 
                
                case _ => 
                    ((Float32(60.0), UInt64(196), 'Q'), var580, [var596, var596, 'o', 'V', var573, '5', 'e', '5', var600, var600], "#pd&u:lX K", var475)
                
                case "OUBq+j?wb4" | """
OvyaU
tIsFM
""" => 
                    var965 **= (var965 & 3);
                    var1640
                
                case _ => 
                    var var1915 : Rune = '0';
                    if (false) { var1879 } else { (var37, (), ['R', var600, '1', var600, var596, 'B', var573, '0', var1915, '0'], "+ACy59SUbl", (-14.0)) } 
                
            }));
            let var1977 : ((Int32, (Range<UInt8>, Array<Unit>, Int8, Int32, Int16)), UInt32, (Int16, Int32, UInt8, Float64, Unit), UInt8, (Int16, Int32, UInt8, Float64, Unit)) = ((Int32(UInt32(UInt32(124))), ((UInt8(70)&127..UInt8(146)&127:96|1), [(), (), (), (), (), (), (), (), (), ()], Int8(UInt8(19)), Int32(Int32(-77)), Int16(UInt16(52)))), UInt32(94), (Int16(Int8(-45)), Int32(UInt32(Int16(22))), UInt8(Int8(UInt8(91))), Float64((-111.0)), ()), UInt8(138), (Int16(-69), Int32(46), UInt8(96), 99.0, ()));
            var var2057 : (Int16, Int32, UInt8, Float64, Unit) = (Int16(UInt16(UInt8(Int8(4)))), Int32(UInt8(55)), UInt8(13), Float64((-107.0)), ());
            try { // block id: 1923
                var var1925 : Unit = ();
                var1925;
                if (false) { ((Int32(63), var1933), UInt32(41), (Int16(-72), var837, var1355, (-89.0), ()), UInt8(20), (var605, Int32(-120), var1355, var475, ())) } else { var1977 } 
            } catch (_) { // block id: 2022
                let var2045 : UInt32 = UInt32(197);
                ((var809, ((UInt8(39)&127..=UInt8(25)&127:47|1), [var2030, (), (), (), (), var2030, (), var1295, var580, var580], Int8(12), Int32(-124), Int16(-80))), var2045, (var605, var809, var1355, (-91.0), var2053), var1355, var2057)
            }[2];
            try { // block id: 2071
                try { // block id: 2073
                    ();
                    namedParam641;
                    var var2077 : Class129 = Class129();
                    var2077
                } catch (e: Exception) { // block id: 2079
                    var2082 **= (var965 & 3);
                    var177
                } finally { // block id: 2086
                    if (true) { Class129() } else { Class129() } 
                }
            } catch (_) { // block id: 2091
                var var2124 : Int8 = Int8(Int8(UInt8(UInt8(Int8(-85)))));
                match (((UInt8(75)&127..=UInt8(219)&127:(-18)|1), [(), (), (), (), (), (), (), (), (), ()], var197, var837, var605)) {
                    case caseVar2101 => 
                        [var1355, var1355, var1355, UInt8(210), var1355, UInt8(169), UInt8(130), var1355, UInt8(53), UInt8(221)];
                        Class129()
                    
                    case caseVar2117 => 
                        var177
                    
                    case _ => 
                        var2124 |= var197;
                        var177
                    
                }
            }
        }
;
        func640(namedParam641 : if (var173) { Enum161.enumValue2135(var1640, (var605&127..Int16(-5)&127:(var55|1)), Class129(), Int8(57)) } else { var281 } ).var2149;
        ((try { // block id: 2158
            ([var837, Int32(-42), Int32(-66), var837, Int32(10), var837, Int32(-35), var837, Int32(-96), var2171], var1640, UInt8(65), [var596, 'g', 'y', 'o', var600, 's', '4', 'F', 'h', 'g']);
            var809 &= var2171;
            [Int32(-42), Int32(80), Int32(61), Int32(-88), Int32(45), Int32(-85), Int32(75), Int32(-29), Int32(32), Int32(30)]
        } finally { // block id: 2191
            if (var273) { (var55&127..=96&127:(var55|1)) } else { (21&127..=var55&127:(var55|1)) } ;
            var1620
        } as Range<UInt64>) ?? ((Option<Option<Range<UInt64>>>.Some(var2211) ?? var2211) ?? (var2220 ?? (UInt64(215)&127..=UInt64(105)&127:(-3)|1))));
        if (match ((Option<Option<Bool>>.Some(Option<Bool>.None) ?? var2233)) {
            case caseVar2241 => 
                var243
            
            case caseVar2246 : (UInt16, Range<Int32>, Int16, (Unit, Range<Int64>, Unit)) => 
                var605 <= var605
            
            case _ : (Array<Int32>, ((Float32, UInt64, Rune), Unit, Array<Rune>, String, Float64), UInt8, Array<Rune>) => 
                var1587;
                if (true) { (UInt32(226)&127..=UInt32(193)&127:78|1) } else { (var2260&127..=UInt32(165)&127:(var55|1)) } ;
                UInt32(9) > UInt32(37)
            
            case _ : Bool => 
                false
            
            case _ => 
                Int16(108);
                var243 || var243
            
        }) { var1553 } else { var1553 } 
    }
;
    protected func func566() : Option<Aggregate71> { // block id: 567
        var loopTimeVar620 : Int64 = 0;
        while (((match (Option<Rune>.Some(var573)) {
            case caseVar577 => 
                var580;
                Aggregate71()
            
            case caseVar585 : (UInt16, Range<Int32>, Int16, (Unit, Range<Int64>, Unit)) => 
                let var591 : Rune = 'X';
                ['c', 'E', var591, 'x', var573, var596, 'H', var600, 'B', 'L'];
                var605;
                if (var273) { Aggregate71() } else { Aggregate71() } 
            
            case _ => 
                Aggregate71()
            
        } is String)) && loopTimeVar620 < 100 ) {
            loopTimeVar620++;

        };
        let var2281 : ((Float32, UInt64, Rune)) -> (Unit, Range<Int64>, Unit) = func348;
        ((Class129.func625(optionalParam626 : func208, namedParam634 : var2281)) as Aggregate71)
    }
;
    public open func func566(namedParam202 ! : Int16, namedParam203 ! : String) : Rune { // block id: 204
        var var453 : Rune = '6';
        var var466 : Rune = 'O';
        let var514 : Unit = ();
        let var537 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
        let var559 : ?Range<UInt8> = (UInt8(72) as Range<UInt8>);
        func func495(namedParam496 ! : Range<Int32>) : Option<Aggregate71> { // block id: 497
            let var524 : Float32 = Float32(Float32(Float32(Float32(10.0))));
            var var546 : ?Unit = Option<Unit>.None;
            var loopTimeVar550 : Int64 = 0;
            do {
                loopTimeVar550++;
                var537[4];
                (var546 ?? var514)
            } while ((if ((Option<Bool>.None ?? true)) { // block id: 507
                true
            } else if (var173 && true) { // block id: 512
                var514;
                ();
                true
            } else { // block id: 518
                (Int16(-74)&127..=Int16(-67)&127:(-98)|1);
                if (true) { (var524, UInt64(63), 'S') } else { var37 } ;
                var173
            }) && loopTimeVar550 < 100 ) ;
            let var2359 : Option<Aggregate71> = Option<Aggregate71>.Some(Aggregate71());
            try { // block id: 552
                (var559 ?? var563);
                func566()
            } finally { // block id: 2283
                try (resource = Class129()) { // block id: 2285
                    UInt32(139);
                    var1396
                } catch (e: Exception) { // block id: 2288
                    var942 *= Float32(59.0);
                    var2293;
                    ()
                } finally { // block id: 2307
                    if (true) { Enum161.defaultValue } else { var281 } ;
                    var2082 *= var2082
                };
                if (false) { var2220 } else { Option<Range<UInt64>>.Some((UInt64(47)&127..=UInt64(25)&127:79|1)) } ;
                match (Option<Array<Int8>>.None) {
                    case caseVar2324 => 
                        ();
                        var1707;
                        Option<Aggregate71>.Some(Aggregate71())
                    
                    case caseVar2332 : (Float64, Int64, Option<Int64>, UInt32, Array<Rune>, Unit, Range<Int16>) => 
                        if (false) { Option<Bool>.None } else { var2233 } ;
                        if (false) { Option<Aggregate71>.Some(Aggregate71()) } else { Option<Aggregate71>.Some(var256) } 
                    
                    case caseVar2346 : Array<Option<Bool>> => 
                        Option<Aggregate71>.None
                    
                    case _ : Option<Option<Array<Int8>>> => 
                        ();
                        Option<Aggregate71>.None
                    
                    case _ => 
                        Option<Unit>.Some(());
                        var2359
                    
                }
            }
        }
;
        func func481(param482 : Range<Int64>, param483 : Int16) : (Float32, UInt64, Rune) { // block id: 484
            var486;
            var var2369 : ?Unit = (Enum161.defaultValue as Unit);
            (func495(namedParam496 : (Int32(105)&127..=Int32(43)&127:(-33)|1)) ?? try { // block id: 2364
                var75
            } catch (e: Exception) { // block id: 2366
                ();
                var2369;
                if (true) { var256 } else { var75 } 
            } finally { // block id: 2376
                ();
                Aggregate71()
            });
            var var2400 : (Float32, UInt64, Rune) = (Float32(-47.0), UInt64(91), 'E');
            match ([Int32(20), Int32(78), Int32(-57), Int32(50), Int32(-59), Int32(16), Int32(126), Int32(37), Int32(33), Int32(-70)]) {
                case caseVar2383 : Range<UInt32> => 
                    ();
                    ([var837, Int32(-26), var2171, Int32(8), Int32(113), var837, var837, var2171, var837, Int32(25)], (var2400, (), ['X', 'i', 't', 'R', 'M', 'H', 'Q', 'U', 'H', 'B'], """
C0t8Y
5p(Vw
""", var475), var1355, ['x', 'M', 'A', '2', 's', var573, var600, var573, var573, 'p']);
                    if (true) { (var942, var486, 'M') } else { (Float32(-125.0), UInt64(226), var600) } 
                
                case _ => 
                    UInt64(99) | var486;
                    if (var273) { (var942, UInt64(220), var600) } else { var37 } 
                
            }
        }
;
        try { // block id: 206
            var55|>func208
        } catch (e: Exception) { // block id: 442
            Int8(Int8(119));
            (Option<Rune>.Some('K') ?? var453)
        } finally { // block id: 455
            (var37, (), [var453, 'E', '4', 'Q', var466, var453, 'b', var453, 'q', var453], "8/eN^3bT=s", var475)[1];
            func481(((-1)&127..=(-113)&127:(var55|1)), Int16(-111));
            if (false) { 'X' } else { 'Z' } 
        }
    }

    public func isClosed(): Bool { return true }
    public func close(): Unit {}
}

public enum Enum161 {
    defaultValue |
    enumValue2135(((Float32, UInt64, Rune), Unit, Array<Rune>, String, Float64), Range<Int16>, Class129, Int8)
}
public func func348(param349 : (Float32, UInt64, Rune)) : (Unit, Range<Int64>, Unit) { // block id: 350
    Class129.var354
}


public func func208(param209 : Int64) : Rune { // block id: 210
    let var296 : UInt32 = UInt32(UInt8(UInt8(UInt8(75))));
    func func337(optionalParam338 ! : Int16 = Int16(UInt16(23))) : Bool { // block id: 341
        var173
    }
;
    let var344 : Int16 = Int16(Int16(109));
    var var412 : Int64 = Int64(Int16(99));
    if (match (var224[5]) {
        case caseVar239 => 
            ();
            var243
        
        case caseVar248 => 
            var243
        
        case () | () | () | () => 
            var75;
            var256;
            false
        
        case () => 
            var173
        
        case _ => 
            var266;
            var269;
            var273 && var273
        
    }) { // block id: 278

    } else if (match (var281) {
        case _ => 
            var287;
            true
        
        case _ => 
            var296 >= UInt32(70)
        
        case defaultValue => 
            ();
            var273
        
        case _ => 
            let var310 : Unit = ();
            var310;
            let var315 : Rune = 'r';
            if (true) { var315 } else { var315 } ;
            true
        
    }) { // block id: 319
        var loopTimeVar324 : Int64 = 0;
        while ((false) && loopTimeVar324 < 100 ) {
            loopTimeVar324++;

        };
        func func326(namedParam327 ! : Float32, optionalParam328 ! : Int8 = Int8(34), namedParam330 ! : Range<Int16>, namedParam331 ! : Int32) : Unit { // block id: 332
            var var376 : (Unit, Range<Int64>, Unit) = ((), ((-108)&127..Int64((-67))&127:((-45)|1)), ());
            if (func337(optionalParam338 : var344)) { ((namedParam327, UInt64(63), '6')|>func348) } else { (var371, (Int32(12)&127..Int32(-123)&127:115|1), Int16(-15), var376)[3] } [0];
            var389 *= (Option<Array<Int8>>.Some(var400) ?? var400)[8]
        }
;
        func326(namedParam327 : var405, optionalParam328 : Int8(51), namedParam330 : (Int16(-87)&127..=Int16(-35)&127:(-100)|1), namedParam331 : Int32(-48));
        var412 -= var412
    };
    let var426 : Array<Rune> = ['U', 'o', 'H', 'd', 'b', 'P', '9', 'K', 'I', 'Z'];
    if (false) { (var37, (), var426, "x?go_&!Rsb", var266) } else { (var37, (), ['K', 'w', 'p', 'B', 'h', 'h', 'J', 'u', 'k', 'K'], var435, var266) } [2][5]
}







public func func706(param707 : Aggregate71) : Unit { // block id: 708

}



public func func814(param815 : Array<Rune>) : Int64 { // block id: 816
    (Aggregate71.var823[2] ?? try { // block id: 834
        var837 >>= ((var837) & 7);
        var55 & (-39)
    } finally { // block id: 843
        var837 %= ((var837) | 1);
        Option<Float64>.Some(91.0);
        var55
    })
}



func func1164(param1165 : (Aggregate71) -> Unit) : Array<Rune> { // block id: 1168
    var loopTimeVar1194 : Int64 = 0;
    while ((try { // block id: 1171
        (UInt8(237)&127..UInt8(124)&127:62|1);
        var273
    } catch (e: Exception) { // block id: 1174
        ();
        var173
    }) && loopTimeVar1194 < 100 ) {
        loopTimeVar1194++;
        var loopTimeVar1181 : Range<UInt64> = (UInt64(170)&127..=UInt64(Int8(Int8(-42)))&127:(Int64(Int16(35))|1));
        for (i in loopTimeVar1181 where false) {

        };
        [Int32(-45), Int32(-50), Int32(31), Int32(36), Int32(28), Int32(117), Int32(-62), Int32(-112), Int32(-68), Int32(20)][0]
    };
    var var1203 : ((Float32, UInt64, Rune), Unit, Array<Rune>, String, Float64) = ((Float32(83.0), UInt64(156), 'A'), (), ['O', 'N', 'g', '8', 'N', 'T', 'h', 'I', 'X', 'I'], ###"7c78X[D<Ja"###, Float64((-41.0)));
    match (match (if (true) { // block id: 1199
                let var1227 : Float32 = Float32(Float32(107.0));
                if (true) { var1203 } else { ((var1227, UInt64(93), 'l'), var580, ['n', '1', 'p', 'f', '7', 'F', 'E', 'P', '1', 'V'], """
R|Ymj
.#O8g
""", (-46.0)) } 
            } else { // block id: 1236
                var435;
                var1203
            }) {
            case _ => 
                if (var173) { var1245 } else { Option<Float32>.Some(var942) } 
            
            case (_ : Array<Unit>,_ : Option<Rune>,caseVar1252,caseVar1253 : Class129,caseVar1254 : Array<Rune>) => 
                ();
                Option<Float32>.None
            
            case _ => 
                if (var273) { var1245 } else { Option<Float32>.Some(var942) } 
            
            case _ => 
                if (false) { Option<Float32>.None } else { var1245 } 
            
        }) {
        case _ : Int64 => 
            var580;
            var1278 >>= ((UInt16(143)) & 7)
        
        case caseVar1284 => 
            var580
        
        case _ : Range<UInt16> => 
            (82&127..=var55&127:((-92)|1));
            var1295;
            ()
        
        case _ => 
            ()
        
    };
    var988
}

public func func1303(param707 : Aggregate71) : Unit { // block id: 708

}


public func func1338(param1339 : Option<Array<Int8>>) : Option<Unit> { // block id: 1340
    var var1342 : ?Unit = Option<Unit>.Some(());
    var1342
}



public func func1469(param1470 : UInt32) : Float32 { // block id: 1471
    if ((var1481[2] ?? match (Option<Range<UInt8>>.None) {
        case caseVar1518 : Range<Int64> => 
            var1295;
            var1522;
            false && true
        
        case caseVar1529 => 
            var405 = Float32(-103.0);
            if (true) { "tt\\17\\$TMX" } else { "?2c#,$tXoQ" } ;
            true
        
        case _ => 
            var173
        
    })) { Option<Rune>.None } else { Option<Rune>.None } ;
    var942
}

public func func1406(param1407 : Array<Float32>) : Array<Unit> { // block id: 1408
    try { // block id: 1410
        var1417.getOrThrow();
        var224[5];
        var1245.getOrThrow()
    } catch (e: Exception) { // block id: 1424
        if (false) { ['Z', 'H', 'y', 'U', 'y', 'O', 'y', 'P', 'F', 'T'] } else { ['r', var596, 'o', '6', 'G', var573, 'V', var596, var600, var573] } ;
        if (var173) { (Int8(102)&127..=var197&127:(19|1)) } else { (Int8(96)&127..Int8(122)&127:(-106)|1) } ;
        [Float32(55.0), Float32(-27.0), Float32(-87.0), Float32(73.0), Float32(-109.0), Float32(126.0), Float32(-101.0), var942, Float32(12.0), var942][6]
    } finally { // block id: 1459
        ((), (61&127..11&127:117|1), var1465)[0];
        let var1546 : (UInt32) -> Float32 = func1469;
        UInt32(134)|>var1546
    };
    var var1734 : Unit = ();
    if ((var1553[0] == try { // block id: 1571
        var1245;
        UInt16(8) | UInt16(113)
    } catch (e: Exception) { // block id: 1576
        UInt16(165)
    } finally { // block id: 1578
        var371 & UInt16(46)
    })) { var1587[1][1] } else { match ((var1620, var1640, var1355, ['c', 'd', 'f', '3', '8', 'F', 'E', 'Z', 't', 'o'])[3]) {
        case caseVar1656 : Array<Unit> => 
            var var1661 : (Array<Int32>, ((Float32, UInt64, Rune), Unit, Array<Rune>, String, Float64), UInt8, Array<Rune>) = ([Int32(108), Int32(Int16(Int16(-11))), Int32(UInt16(Int8(112))), Int32(113), Int32(Int8(-3)), Int32(UInt8(167)), Int32(Int32(62)), Int32(94), Int32(Int32(-51)), Int32(Int8(Int8(-20)))], ((Float32(Float32(-49.0)), UInt64(179), 'c'), (), ['V', 'h', 'z', 'X', 'd', 'q', 't', '5', '5', 'k'], """
-RsB5
!F%g]
""", (-30.0)), UInt8(70), ['0', 'B', 's', 'k', 'j', 'j', 'J', '2', 'S', 'K']);
            if (true) { var1661 } else { var1707 } ;
            var1734;
            var1522
        
        case caseVar1739 => 
            ();
            var580;
            var1522
        
        case _ : Float32 => 
            if (var273) { [(), (), (), (), (), (), (), (), (), ()] } else { [(), (), var1465, (), (), var580, var580, var1465, (), var1734] } 
        
        case caseVar1763 : Float32 => 
            var1295;
            ((var405, UInt64(127), '1'), var1465, ['W', 'S', 'p', 'w', 'Z', '6', 'O', 'Q', 'l', 'C'], "nz) _JmaH1", var475);
            [(), (), (), (), (), (), (), (), (), ()]
        
        case _ => 
            if (var273) { var1522 } else { [var1295, (), var580, (), var1734, var1734, var1465, (), (), ()] } 
        
    } } 
}





func func67(param68 : String) : UInt8 { // block id: 69
    var75.func78();
    var var2552 : UInt8 = UInt8(61);
    (match (var2293) {
        case caseVar2477 => 
            var580;
            var1355
        
        case caseVar2483 : Option<Range<UInt64>> => 
            ();
            ();
            var1355 + UInt8(224)
        
        case _ => 
            ([Int32(5), Int32(35), Int32(-45), Int32(110), Int32(-123), Int32(-7), Int32(106), Int32(53), Int32(-16), var837], var1640, var1355, ['e', 'r', 'w', '4', 'e', 'm', '0', 'Y', 'E', 'K']);
            let var2508 : ?Range<UInt8> = Option<Range<UInt8>>.Some((UInt8(1)&127..UInt8(209)&127:113|1));
            var2508;
            UInt8(74)
        
    } << ((if (false) { // block id: 2514
        UInt8(1) & var1355
    } else { // block id: 2518
        var580;
        ();
        var1355 ** (var1355 & 3)
    }) & 7)) ** (match (if (var243) { // block id: 2527
            ();
            var1355 ** (var1355 & 3)
        } else if (var2533) { // block id: 2535
            var var2537 : (Float64, Range<Int8>) = (Float64(Float32(-119.0)), (Int8(UInt8(Int8(-63)))&127..=Int8(-55)&127:((-40)|1)));
            var2537;
            var1355
        } else { // block id: 2548
            var1355 % ((var2552) | 1)
        }) {
        case caseVar2556 => 
            var1355
        
        case 29 | 214 | 166 => 
            var1465;
            var475;
            var2552 << ((var2552) & 7)
        
        case _ => 
            UInt8(144)
        
    } & 3)
}

public func func7<T0>() : Float64 { // block id: 8
    let var15 : Bool = (Float64(Float32(Float32(Float32(-30.0)))) is Bool);
    var var25 : Int16 = Int16(-25);
    var loopTimeVar46 : Int64 = 0;
    while ((try { // block id: 11
        true
    } catch (e: Exception) { // block id: 13
        var15
    } finally { // block id: 21
        ();
        var25 + var25;
        var var30 : UInt64 = UInt64(131);
        var30 == var30
    }) && loopTimeVar46 < 100 ) {
        loopTimeVar46++;
        var37[0]
    };
    let var2571 : (String) -> UInt8 = func67;
    try { // block id: 48

    } finally { // block id: 49
        var loopTimeVar65 : Int64 = 0;
        do {
            loopTimeVar65++;
            var55 |= 24;
            let var62 : Rune = 's';
            if (false) { '2' } else { var62 } 
        } while ((var15) && loopTimeVar65 < 100 ) ;
        "H[|%&8LseM"|>var2571;
        ()
    };
    var var2596 : Range<UInt8> = (UInt8(205)&127..UInt8(126)&127:40|1);
    var var2617 : Unit = ();
    match (match ((var2579&127..=UInt16(31)&127:(var55|1))) {
            case caseVar2589 => 
                var605 **= (Int16(20) & 3);
                ();
                var2596
            
            case caseVar2600 => 
                var389--;
                var2596
            
            case caseVar2607 : UInt64 => 
                var var2610 : ?Float64 = Option<Float64>.Some(0.0);
                var2610;
                var2596
            
            case _ => 
                var2617;
                var173 &&= true;
                (UInt8(224)&127..=UInt8(137)&127:55|1)
            
        }) {
        case _ => 
            var389 /= ((Int8(102)) | 1);
            var1245;
            40.0
        
        case _ => 
            var2617;
            if (var173) { (UInt64(194)&127..=UInt64(133)&127:(-104)|1) } else { (UInt64(3)&127..UInt64(202)&127:16|1) } ;
            var266
        
        case _ => 
            if (var273) { [Int8(-20), Int8(42), Int8(-58), Int8(76), Int8(110), Int8(111), Int8(-123), Int8(32), Int8(-64), Int8(45)] } else { [Int8(-96), Int8(124), var197, Int8(-100), Int8(23), var389, var2653, var2653, Int8(-76), var2653] } ;
            ();
            var475
        
    }
}

main(): Int64 {
    try {
        func7<Array<Int32>>();
        let var2676 : ?Range<UInt8> = ((Int8(UInt8(27))&127..=Int8(Int8(-112))&127:(Int64(UInt32(87))|1)) as Range<UInt8>);
        let var2688 : UInt8 = UInt8(170);
        match ((var2260 as Int64)) {
            case caseVar2665 : Bool => 
                var2668
            
            case _ => 
                if (var2533) { var2676 } else { Option<Range<UInt8>>.Some((var2688&127..var1355&127:(63|1))) } ;
                var55
            
            case _ => 
                ();
                (-55)
            
            case _ => 
                if (true) { var2704 } else { (UInt8(222)&127..=UInt8(179)&127:11|1) } ;
                var var2711 : Int32 = Int32(UInt16(UInt16(111)));
                var2711;
                77
            
            case _ => 
                if (var273) { ([Int32(32), Int32(-29), Int32(123), Int32(-46), Int32(35), Int32(-73), Int32(30), Int32(119), Int32(-12), Int32(66)], (var37, (), ['x', 'E', 'w', 'A', 'k', 'o', 'b', 'h', 'f', 's'], "\\>2Y3(w(#+", 20.0), UInt8(182), ['u', 'w', '5', 's', 'R', 'f', 'w', 'A', 'T', 't']) } else { (var1620, var1879, UInt8(4), [var573, var573, 'F', var600, 'v', 's', 's', '1', var600, var596]) } ;
                var2668 ** (var2668 & 3)
            
        }
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var55*var55), 64)
        crccheck.updateBuffer(UInt64(var197*var197), 64)
        crccheck.updateBuffer(UInt64(var371*var371), 64)
        crccheck.updateBuffer(UInt64(var1355*var1355), 64)
        crccheck.updateBuffer(UInt64(var2082*var2082), 64)
        crccheck.updateBuffer(UInt64(var2260*var2260), 64)
        crccheck.updateBuffer(UInt64(var2579*var2579), 64)
        crccheck.updateBuffer(UInt64(var2668*var2668), 64)
        crccheck.updateBuffer(UInt64(var2688*var2688), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Aggregate71 {

}

extend Class129 {

}

