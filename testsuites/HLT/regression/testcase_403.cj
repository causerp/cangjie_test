/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output 


public let var_1690838888522_18 : ?Int32 = (match (Int64(UInt16(24))) {
    case newVar: Int32 => Option<Int32>.Some(newVar)
    case _ => Option<Int32>.None
})
public var var_1690838888522_82 : Enum_1690838888522_79 = Enum_1690838888522_79.defaultValue
public var var_1690838888522_89 : UInt8 = UInt8(230)
let var_1690838888522_185 : Array<UInt64> = [UInt64(UInt32(170)), UInt64(219), UInt64(43), UInt64(UInt64((-70))), UInt64(208), UInt64(60), UInt64(Int32(UInt8(175))), UInt64(Int8(UInt8(UInt8(43)))), UInt64(51), UInt64(233)]
public var var_1690838888522_217 : UInt16 = UInt16(UInt8(17))
public let var_1690838888522_269 : Bool = true
public var var_1690838888522_355 : Int8 = Int8(Int8(Int8(-71)))
public var var_1690838888522_365 : Bool = (match (UInt8(Int8(UInt8(UInt8(4))))) {
    case _: UInt64 => true
    case _ => false
})
public var var_1690838888522_380 : Bool = true
public var var_1690838888522_409 : Range<UInt8> = ((UInt8(UInt8(142))&127)..=(UInt8(UInt8(145))&127):((-87)|1))
public var var_1690838888522_460 : UInt64 = UInt64(UInt64(250))
let var_1690838888522_481 : Rune = 'J'
public var var_1690838888522_603 : Array<Bool> = [false, false, false, false, false, false, false, false, false, false]
var var_1690838888522_623 : UInt32 = UInt32(UInt16(17))
public var var_1690838888522_635 : Interface_1690838888522_36<Rune> = Class_1690838888522_33()
let var_1690838888522_691 : Int8 = Int8(UInt8(182))
public var var_1690838888522_746 : Float32 = Float32(-53.0)
public var var_1690838888522_750 : UInt8 = UInt8(Int8(-15))
var var_1690838888522_757 : Array<UInt16> = [UInt16(Int16(UInt16(18))), UInt16(Int16(19)), UInt16(117), UInt16(87), UInt16(0), UInt16(Int16(77)), UInt16(Int16(UInt16(Int8(11)))), UInt16(54), UInt16(UInt16(UInt16(72))), UInt16(Int16(-35))]

public interface Interface_1690838888522_36<T0> where T0 <: Rune {

}

public interface Interface_1690838888522_37 {

}

public open class Class_1690838888522_33 <: Interface_1690838888522_36<Rune> & Interface_1690838888522_37 & Resource {
    public Class_1690838888522_33() { // block id: 35

    }
;
    public static mut prop var_1690838888522_49 : Bool { // block id: 50
        get() { // block id: 52
            Option<Int32>.None;
            (match (Float64(Float32(31.0))) {
                case _: Int8 => true
                case _ => false
            })
        }

        set(Value) { // block id: 59
            ();
            65;
            ()
        }

    };
    public var var_1690838888522_338 : Range<UInt8> = ((UInt8(UInt8(218))&127)..=(UInt8(UInt8(232))&127):(80|1));
    public let var_1690838888522_376 : Unit = ();
    public let var_1690838888522_525 : Bool = false;
    public var var_1690838888522_648 : UInt8 = UInt8(154);
    public prop var_1690838888522_737 : Int32 { // block id: 738
        get() { // block id: 740
            Int32(Int8(UInt8(UInt8(83))))
        }

    }
    public func isClosed(): Bool { return false }
    public func close(): Unit {}
}

public enum Enum_1690838888522_79 {
    defaultValue
}
public func func_1690838888522_73(param_1690838888522_74 : Bool) : Bool { // block id: 75
    let var_1690838888522_103 : ?Int32 = Option<Int32>.None;
    var var_1690838888522_124 : Int16 = Int16(Int16(UInt16(Int8(-58))));
    var loopTimeVar_1690838888522_137 : Int64 = 0;
    do {
        loopTimeVar_1690838888522_137++;

    } while ((if (let defaultValue <- var_1690838888522_82) {
        var_1690838888522_89 >> ((UInt8(201)) & 7);
        ();
        var var_1690838888522_94 : UInt32 = UInt32(UInt32(35));
        var_1690838888522_94
    } else {
        ();
        UInt32(135)
    } <= match (var_1690838888522_103) {
        case caseVar_1690838888522_107 => 
            Enum_1690838888522_79.defaultValue;
            'Z';
            UInt32(180) - UInt32(112)
        
        case _ => 
            ();
            UInt32(62)
        
        case _ : Rune => 
            var_1690838888522_124 = var_1690838888522_124 / ((Int16(-111)) | 1);
            UInt32(107)
        
        case _ => 
            UInt16(225);
            UInt32(115)
        
    }) && loopTimeVar_1690838888522_137 < 100 ) ;
    func func_1690838888522_247<T0>() : Bool { // block id: 248
        ();
        if (try { // block id: 252
            ();
            let var_1690838888522_256 : UInt8 = UInt8(43);
            var_1690838888522_256 < UInt8(169)
        } catch (e: Exception) { // block id: 259
            true
        }) { // block id: 261
            (match (((Int8(Int8(20))&127)..=(Int8(Int8(31))&127):(67|1))) {
                case _: Range<Int32> => true
                case _ => false
            })
        } else { // block id: 264
            [var_1690838888522_269, var_1690838888522_269, var_1690838888522_269, var_1690838888522_269, var_1690838888522_269, false, false, false, false, true][8]
        }
    }
;
    try { // block id: 139
        ();
        var loopTimeVar_1690838888522_144 : Array<UInt64> = [UInt64(UInt32(152)), UInt64(UInt8(59)), UInt64(Int64(Int8(Int8(107)))), UInt64(Int32(Int32(Int8(118)))), UInt64(UInt16(253)), UInt64(UInt32(Int16(-6))), UInt64(53), UInt64(247), UInt64(Int8(Int8(-90))), UInt64(UInt8(187))];
        let iter141 = loopTimeVar_1690838888522_144.iterator()
        while (true) {
            match (iter141.next()) {
                case None => break
                case Some(v) => match (v) {
                    case i where (true) => ();
                    case _ => continue
                }
            }
        }
;
        true || false
    } catch (e: Exception) { // block id: 182
        let var_1690838888522_228 : UInt64 = UInt64(Int16(UInt16(164)));
        match (var_1690838888522_185) {
            case _ : Range<UInt8> => 
                ((Int8(Int8(19))&127)..(Int8(Int8(-107))&127):((-86)|1));
                ();
                var var_1690838888522_221 : Int64 = Int64(UInt8(Int8(113)));
                if (false) { ((UInt16(UInt16(109))&127)..=(UInt16(UInt16(13))&127):(57|1)) } else { ((UInt16(UInt16(194))&127)..(UInt16(var_1690838888522_217)&127):(var_1690838888522_221|1)) } 
            
            case _ => 
                var_1690838888522_228;
                ();
                var var_1690838888522_239 : Int64 = Int64(UInt32(132));
                if (true) { ((UInt16(var_1690838888522_217)&127)..=(UInt16(UInt16(2))&127):(var_1690838888522_239|1)) } else { ((UInt16(var_1690838888522_217)&127)..=(UInt16(var_1690838888522_217)&127):(5|1)) } 
            
        };
        func_1690838888522_247<String>()
    } finally { // block id: 281
        if (let caseVar_1690838888522_286 <- var_1690838888522_82) {
            if (true) { ((UInt64(UInt64(42))&127)..(UInt64(UInt64(216))&127):((-20)|1)) } else { ((UInt64(UInt64(81))&127)..(UInt64(UInt64(112))&127):(118|1)) } ;
            !false
        } else {
            var_1690838888522_124 == var_1690838888522_124
        }
    }
}

public func func_1690838888522_466<T0, T1>(param_1690838888522_467 : T0) : UInt16 { // block id: 468
    UInt16(UInt16(175))
}

public func func_1690838888522_619(param_1690838888522_620 : Interface_1690838888522_37) : UInt32 { // block id: 621
    var_1690838888522_623
}

public enum Enum_1690838888522_651<T0, T1> where T0 <: UInt64, T1 <: Range<UInt64> {
    defaultValue
}

public struct Struct_1690838888522_713<T0> where T0 <: UInt32 {
    public init() { // block id: 715

    }
;
    public mut prop var_1690838888522_720 : String { // block id: 721
        get() { // block id: 723
            "a{EFmFf1]=P";
            ((UInt16(UInt16(225))&127)..=(UInt16(UInt16(90))&127):(Int64(Int8(22))|1));
            ###"=!|:\"]JI.F"###;
            var_1690838888522_851
        }

        set(Value) { // block id: 733
            Class_1690838888522_33();
            ();
            var_1690838888522_851 = Value
        }

    };
    var var_1690838888522_851 : String = ###"0GbBj]]O#`"###
}

main(): Int64 {
    try {
        let var_1690838888522_300 : (Bool) -> Bool = { lambdaParameter_1690838888522_303 : Bool => (match ((match (((UInt16(UInt16(44))&127)..(UInt16(UInt16(71))&127):((-115)|1))) {
            case newVar: Int32 => Option<Int32>.Some(newVar)
            case _ => Option<Int32>.None
        })) {
            case _: String => true
            case _ => false
        }) };
        let var_1690838888522_486 : Unit = ();
        let var_1690838888522_501 : Int64 = (-23);
        let var_1690838888522_522 : Class_1690838888522_33 = Class_1690838888522_33();
        let var_1690838888522_551 : Bool = (match (((UInt32(UInt32(Int32(-103)))&127)..(UInt32(UInt32(Int16(-38)))&127):(56|1))) {
            case _: Float64 => true
            case _ => false
        });
        let var_1690838888522_627 : (Interface_1690838888522_37) -> UInt32 = { lambdaParameter_1690838888522_630 : Interface_1690838888522_37 => UInt32(239) };
        func func_1690838888522_441<T0>(namedParam_1690838888522_442 ! : Interface_1690838888522_36<Rune>, namedParam_1690838888522_443 ! : Float64, optionalParam_1690838888522_444 ! : Range<Int8> = ((Int8(Int8(68))&127)..(Int8(Int8(UInt8(UInt8(Int8(-20)))))&127):((-42)|1))) : UInt32 where T0 <: UInt32 { // block id: 452
            let var_1690838888522_505 : Float64 = Float64(Float32(Float32(Float32(-73.0))));
            let var_1690838888522_516 : Float32 = Float32(Float32(Float32(-96.0)));
            ((UInt16(match (var_1690838888522_18) {
                case _ => 
                    var_1690838888522_460;
                    var_1690838888522_217
                
            } | var_1690838888522_217)&127)..(UInt16(({ lambdaParameter_1690838888522_473 : Array<Bool> => func_1690838888522_466<Array<Bool>, Unit>(false, try { // block id: 479
                var_1690838888522_481;
                false
            } finally { // block id: 484
                var_1690838888522_486;
                true
            }, match (((Int8(Int8(-128))&127)..(Int8(Int8(-107))&127):((-37)|1))) {
                case _ => 
                    ((UInt16(var_1690838888522_217)&127)..(UInt16(var_1690838888522_217)&127):(var_1690838888522_501|1));
                    var_1690838888522_505 < var_1690838888522_505
                
                case _ => 
                    Float32(1.0) <= var_1690838888522_516
                
            }, var_1690838888522_522.var_1690838888522_525, if (false) { // block id: 529
                Float32(46.0);
                false
            } else { // block id: 532
                if (false) { ((UInt8(var_1690838888522_89)&127)..(UInt8(var_1690838888522_89)&127):(var_1690838888522_501|1)) } else { var_1690838888522_409 } ;
                if (var_1690838888522_365) { var_1690838888522_82 } else { Enum_1690838888522_79.defaultValue } ;
                var_1690838888522_269
            }, (func_1690838888522_73(true)), (func_1690838888522_73(var_1690838888522_551)), (match ('d') {
                case _: (Unit, UInt32, String) -> Class_1690838888522_33 => true
                case _ => false
            }), true, try { // block id: 563
                ();
                false
            } catch (_) { // block id: 566
                var_1690838888522_501;
                var_1690838888522_365 || var_1690838888522_380
            }) }(if (var_1690838888522_380) { // block id: 573
                var_1690838888522_460 = var_1690838888522_460 >> ((var_1690838888522_460) & 7);
                [true, false, false, true, false, false, true, true, true, false]
            } else { // block id: 578
                if (var_1690838888522_269) { ((Int8(Int8(-77))&127)..=(Int8(var_1690838888522_355)&127):(12|1)) } else { ((Int8(Int8(-105))&127)..=(Int8(Int8(-4))&127):(62|1)) } ;
                var_1690838888522_365 = var_1690838888522_365 || (false);
                if (false) { [true, var_1690838888522_269, false, false, var_1690838888522_269, false, false, true, false, true] } else { var_1690838888522_603 } 
            })))&127):(try { // block id: 606
                Class_1690838888522_33();
                var_1690838888522_501
            } catch (e: Exception) { // block id: 609
                var_1690838888522_89 = var_1690838888522_89 ^ (var_1690838888522_89);
                Int8(67);
                (-105)
            } finally { // block id: 615
                UInt64(182);
                var_1690838888522_501
            }|1));
            var_1690838888522_627(Class_1690838888522_33())
        }
;
        let var_1690838888522_638 : Float64 = Float64(Float64(Float32(-68.0)));
        func func_1690838888522_24(optionalParam_1690838888522_25 ! : UInt32 = UInt32(2), optionalParam_1690838888522_27 ! : Float32 = Float32(-40.0), namedParam_1690838888522_29 ! : Unit, namedParam_1690838888522_30 ! : UInt8) : Int32 { // block id: 31
            let var_1690838888522_66 : Float32 = Float32(Float32(Float32(Float32(117.0))));
            let var_1690838888522_360 : Unit = ();
            func func_1690838888522_39(param_1690838888522_40 : Unit, param_1690838888522_41 : UInt32, param_1690838888522_42 : String) : Class_1690838888522_33 { // block id: 43
                if (if (Class_1690838888522_33.var_1690838888522_49) { // block id: 63
                    var_1690838888522_66 >= var_1690838888522_66
                } else if ((var_1690838888522_300(var_1690838888522_269))) { // block id: 312
                    ();
                    var_1690838888522_269
                } else { // block id: 315
                    true
                }) { // block id: 317
                    ();
                    var_1690838888522_217;
                    var var_1690838888522_326 : Int8 = Int8(UInt8(Int8(112)));
                    try (resource = Class_1690838888522_33()) { // block id: 321
                        ()
                    } finally { // block id: 323
                        var_1690838888522_326 = var_1690838888522_326 >> ((Int8(-51)) & 7)
                    }
                };
                var var_1690838888522_335 : Class_1690838888522_33 = Class_1690838888522_33();
                try { // block id: 332
                    var_1690838888522_335.var_1690838888522_338;
                    var var_1690838888522_343 : Unit = ();
                    var var_1690838888522_349 : Int8 = Int8(UInt8(UInt8(Int8(1))));
                    try (resource = Class_1690838888522_33()) { // block id: 341
                        var_1690838888522_343;
                        ()
                    } finally { // block id: 346
                        var_1690838888522_349 = var_1690838888522_349 ^ (var_1690838888522_355);
                        var_1690838888522_360;
                        ()
                    };
                    var_1690838888522_365 = var_1690838888522_365
                } finally { // block id: 372
                    var_1690838888522_335.var_1690838888522_376;
                    var loopTimeVar_1690838888522_391 : Range<UInt64> = ((UInt64(UInt64(UInt64(111)))&127)..(UInt64(UInt64(UInt32(149)))&127):(12|1));
                    let iter378 = loopTimeVar_1690838888522_391.iterator()
                    while (true) {
                        match (iter378.next()) {
                            case None => break
                            case Some(v) => match (v) {
                                case i where (var_1690838888522_380) => var var_1690838888522_385 : UInt64 = UInt64(4);var_1690838888522_385 = UInt64(147);var_1690838888522_89 = var_1690838888522_89 ^ (UInt8(200))
                                case _ => continue
                            }
                        }
                    }
;
                    ()
                };
                var_1690838888522_335
            }
;
            var chainCall32 = func_1690838888522_39(match (Option<Int32>.None) {
                case caseVar_1690838888522_404 => 
                    if (false) { var_1690838888522_409 } else { var_1690838888522_409 } ;
                    Enum_1690838888522_79.defaultValue;
                    var_1690838888522_380 = var_1690838888522_380 || (var_1690838888522_380)
                
                case _ : Interface_1690838888522_37 => 
                    var_1690838888522_82;
                    var_1690838888522_365 = var_1690838888522_365 || (false);
                    ()
                
                case _ => 
                    ();
                    ();
                    var_1690838888522_360
                
                case caseVar_1690838888522_432 : Int8 => 
                    let var_1690838888522_435 : Unit = ();
                    var_1690838888522_435
                
                case _ => 
                    var_1690838888522_360
                
            }, func_1690838888522_441<UInt32>(namedParam_1690838888522_442 : var_1690838888522_635, namedParam_1690838888522_443 : var_1690838888522_638, optionalParam_1690838888522_444 : ((Int8(var_1690838888522_355)&127)..=(Int8(Int8(64))&127):(6|1))), "T'YFZIA2'#");chainCall32.var_1690838888522_648;
            var var_1690838888522_654 : Enum_1690838888522_651<UInt64, Range<UInt64>> = Enum_1690838888522_651<UInt64, Range<UInt64>>.defaultValue;
            match (var_1690838888522_654) {
                case defaultValue => 
                    var_1690838888522_360;
                    var var_1690838888522_662 : Int32 = Int32(114);
                    var_1690838888522_662 = var_1690838888522_662 | (var_1690838888522_662)
                
                case defaultValue => 
                    var_1690838888522_623;
                    var_1690838888522_360
                
                case caseVar_1690838888522_672 => 
                    Enum_1690838888522_79.defaultValue;
                    ()
                
                case _ => 
                    var_1690838888522_89 = var_1690838888522_89 * (var_1690838888522_89);
                    ()
                
                case _ => 
                    var_1690838888522_217 = var_1690838888522_217 + (var_1690838888522_217);
                    var_1690838888522_355 = var_1690838888522_355 << ((var_1690838888522_691) & 7);
                    var_1690838888522_460 = var_1690838888522_460 & (var_1690838888522_460)
                
            };
            let var_1690838888522_710 : UInt32 = UInt32(229);
            var var_1690838888522_717 : Struct_1690838888522_713<UInt32> = Struct_1690838888522_713<UInt32>();
            var chainCall697 = func_1690838888522_39([(), (), (), (), (), (), (), (), (), ()][0], (match (Option<UInt32>.None) {
                case Some(num) => num
                case None => var_1690838888522_710
            }), var_1690838888522_717.var_1690838888522_720);chainCall697.var_1690838888522_737
        }
;
        (match (try { // block id: 12
            Option<Int32>.None
        } catch (e: Exception) { // block id: 14
            if (true) { var_1690838888522_18 } else { var_1690838888522_18 } 
        }) {
            case Some(num) => num
            case None => func_1690838888522_24(optionalParam_1690838888522_27 : var_1690838888522_746, namedParam_1690838888522_29 : var_1690838888522_486, namedParam_1690838888522_30 : var_1690838888522_750)
        });
        var_1690838888522_757[6] < try { // block id: 781
            ((Int8(Int8(78))&127)..(Int8(Int8(-77))&127):(var_1690838888522_501|1));
            var var_1690838888522_788 : Int16 = Int16(99);
            var_1690838888522_788 = var_1690838888522_788 ^ (Int16(-109));
            var_1690838888522_217
        } catch (_) { // block id: 792
            UInt64(231);
            var var_1690838888522_795 : Unit = ();
            var_1690838888522_795;
            UInt16(169) - var_1690838888522_217
        };
        match (if (var_1690838888522_365) { // block id: 803
            UInt64(77) * UInt64(134);
            ((Int64(90)&127)..(Int64((-27))&127):((-33)|1))
        } else if (false) { // block id: 809
            ((Int64(84)&127)..(Int64(3)&127):((-109)|1))
        } else { // block id: 811
            var_1690838888522_486;
            ((Int8(Int8(-111))&127)..=(Int8(Int8(-123))&127):(39|1));
            var var_1690838888522_817 : Int64 = Int64(UInt64(Int32(60)));
            ((Int64((-16))&127)..=(Int64(var_1690838888522_817)&127):(var_1690838888522_817|1))
        }) {
            case caseVar_1690838888522_824 : Range<UInt32> => 
                Int16(-110);
                var_1690838888522_486;
                var_1690838888522_501
            
            case caseVar_1690838888522_831 => 
                let var_1690838888522_834 : Unit = ();
                var_1690838888522_834;
                ();
                (-91) & (-32)
            
            case _ : Option<Int32> => 
                Class_1690838888522_33();
                112
            
            case _ => 
                (-18) >> (((-46)) & 7)
            
        }
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var_1690838888522_501*var_1690838888522_501), 64)
        crccheck.updateBuffer(UInt64(var_1690838888522_623*var_1690838888522_623), 64)
        crccheck.updateBuffer(UInt64(var_1690838888522_691*var_1690838888522_691), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Class_1690838888522_33 {

}
// ASSERT: scan sema_unreachable_pattern
// ASSERT: scan sema_wrong_number_of_arguments


