/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args

@Deprecated
public var var_1740491678422_30: Float32 = Float32(Float32(24.0))
@Deprecated
internal const var_1740491678422_159: String = "#&DMW_f!s1"
@Deprecated
internal let var_1740491678422_192: VArray<Int32, $5> = [Int32(105), Int32(-86), Int32(-114), Int32(46), Int32(103)]
public var var_1740491678422_228: Int32 = Int32(-92)
@Deprecated
public var var_1740491678422_270: Int16 = Int16(UInt16(157))
internal const var_1740491678422_305: UInt16 = 95
@Deprecated
internal let var_1740491678422_314: Int64 = Int64(69)
let var_1740491678422_319: Array<Int64> = [Int64(-67), Int64(119), Int64(74), Int64(56), Int64(-119), Int64(-76),
    Int64(0), Int64(109), Int64(39), Int64(-26)]
@Deprecated
public let var_1740491678422_450: Unit = ()
@Deprecated
internal var var_1740491678422_475: Range<Int64> = ((Int64(Int64(UInt8(Int8(-103)))) & 127)..(Int64(Int64(86)) & 127) : (Int64(-128) |
    1))
var var_1740491678422_506: Range<UInt16> = ((UInt16(UInt16(180)) & 127)..=(UInt16(UInt16(172)) & 127) : (Int64(-114) | 1))
@Deprecated
public let var_1740491678422_558: Class_1740491678422_552 = Class_1740491678422_552()
@Deprecated
internal let var_1740491678422_609: ?Option<String> = (")\"(2${var_1740491678422_159}t${var_1740491678422_159}B#t${var_1740491678422_159}V)" as Option<String>)
@Deprecated
public const var_1740491678422_767: UInt = 117
@Deprecated
var var_1740491678422_804: UInt = UInt64(Int8(UInt8(Int8(59))))
@Deprecated
public let var_1740491678422_819: UInt32 = UInt32(UInt8(247))
internal let var_1740491678422_827: Class_1740491678422_823 = Class_1740491678422_823()
@Deprecated
var var_1740491678422_884: Option<String> = Option<String>.None
@Deprecated
public var var_1740491678422_890: (Array<UInt64>, Range<UInt16>, Bool, Float32, Option<VArray<Int32, $5>>, Range<Int32>) = ([UInt64(157),
        UInt64(211), UInt64(75), UInt64(49), UInt64(29), UInt64(146), UInt64(188), UInt64(116), UInt64(188), UInt64(146)],
    ((UInt16(UInt16(241)) & 127)..=(UInt16(UInt16(110)) & 127) : (Int64(Int64(-43)) | 1)), (VArray<Int32, $5>(repeat: Int32(Int16(-5))) is Array<Option<String>>),
    Float32(Float32(Float32(Float32(-58.0)))), (Option<(Unit, Array<Int64>, Option<String>, Range<UInt16>, Float64)>
        .None as VArray<Int32, $5>), ((Int32(Int32(38)) & 127)..=(Int32(Int32(13)) & 127) : (Int64(-42) | 1)))
@Deprecated
internal let var_1740491678422_944: (Float32, Float64, Range<Int16>, Array<Unit>, Unit, Range<Int8>, Range<UInt8>) = (Float32(Float32(Float32(-67.0))),
    Float64(22.0), ((Int16(Int16(7)) & 127)..=(Int16(Int16(-60)) & 127) : (Int64(-122) | 1)), [(), (), (), (), (), (),
        (), (), (), ()], (), ((Int8(Int8(-63)) & 127)..(Int8(Int8(-81)) & 127) : (Int64(-38) | 1)), ((UInt8(UInt8(128)) &
        127)..=(UInt8(UInt8(47)) & 127) : (Int64(-5) | 1)))
@Deprecated
public let var_1740491678422_981: Float32 = Float32(55.0)
public var var_1740491678422_1002: Unit = ()
@Deprecated
public var var_1740491678422_1005: Range<Int8> = ((Int8(Int8(-12)) & 127)..(Int8(Int8(-84)) & 127) : (Int64(-40) | 1))
@Deprecated
internal let var_1740491678422_1011: Int = Int64(Int32(81))
@Deprecated
public let var_1740491678422_1018: ???(Unit, Array<Int64>, Option<String>, Range<UInt16>, Float64) = ([Int64(-90),
    Int64(63), Int64(UInt64(UInt16(125))), Int64(Int64(UInt32(215))), Int64(-121), Int64(Int64(88)), Int64(UInt32(217)),
    Int64(1), Int64(67), Int64(UInt16(248))] as Option<Option<(Unit, Array<Int64>, Option<String>, Range<UInt16>, 
    Float64)>>)
public var var_1740491678422_1098: Bool = true
public const var_1740491678422_1142: UInt64 = 150
internal var var_1740491678422_1149: UInt16 = UInt16(Int16(-49))
public var var_1740491678422_1157: Option<VArray<Int32, $5>> = Option<VArray<Int32, $5>>.None
internal var var_1740491678422_1191: Option<Bool> = Option<Bool>.None
public let var_1740491678422_1234: ?(Float32, Float64, Range<Int16>, Array<Unit>, Unit, Range<Int8>, Range<UInt8>) = Option<(Float32, 
        Float64, Range<Int16>, Array<Unit>, Unit, Range<Int8>, Range<UInt8>)>.None
@Deprecated
public let var_1740491678422_1251: (Range<UInt16>, Interface_1740491678422_555, Option<Array<Range<UInt8>>>, Unit, Bool, 
    Range<UInt32>, Float64, Option<(Unit, Array<Int64>, Option<String>, Range<UInt16>, Float64)>, Int64) = (((UInt16(UInt16(130)) &
        127)..(UInt16(UInt16(143)) & 127) : (Int64(81) | 1)), Class_1740491678422_552(), (((), [Int64(49), Int64(-70),
            Int64(69), Int64(101), Int64(118), Int64(-59), Int64(13), Int64(-55), Int64(-74), Int64(44)], ([Int16(-38),
            Int16(88), Int16(-29), Int16(27), Int16(106), Int16(-29), Int16(-77), Int16(14), Int16(109), Int16(-4)] as String),
        ((UInt16(UInt16(160)) & 127)..(UInt16(UInt16(130)) & 127) : (Int64(80) | 1)), Float64(Float64(-8.0))) as Array<Range<UInt8>>),
    (), (() is Interface_1740491678422_43<Int16>), ((UInt32(UInt32(188)) & 127)..(UInt32(UInt32(80)) & 127) : (Int64(-47) |
        1)), Float64(Float32(Float32(106.0))), (VArray<Int32, $5>(repeat: Int32(UInt16(105))) as (Unit, Array<Int64>, 
        Option<String>, Range<UInt16>, Float64)), Int64(UInt16(162)))
@Deprecated
public var var_1740491678422_1362: Range<UInt16> = ((UInt16(UInt16(252)) & 127)..(UInt16(UInt16(244)) & 127) : (Int64(UInt16(Int8(UInt8(105)))) |
    1))
public var var_1740491678422_1377: UInt16 = UInt16(116)
@Deprecated
public const var_1740491678422_1398: Int = -51
public var var_1740491678422_1623: UInt32 = UInt32(Int32(Int16(-24)))
var var_1740491678422_1735: String = "nEa{Sm+[z*9"
let var_1740491678422_1748: ?(Unit, Array<Int64>, Option<String>, Range<UInt16>, Float64) = Option<(Unit, Array<Int64>, 
        Option<String>, Range<UInt16>, Float64)>.None
public let var_1740491678422_1809: Rune = r'P'
public var var_1740491678422_1822: UInt16 = UInt16(UInt16(UInt16(Int16(87))))
public var var_1740491678422_1829: Int64 = Int64(UInt64(81))

public interface Interface_1740491678422_43<T0> {}

public open class Class_1740491678422_40 <: Interface_1740491678422_43<Int16> & Resource {
    public init() { // block id: 42

    }

    @Frozen
    public init(optionalParam_1740491678422_381!: VArray<Int32, $5> = VArray<Int32, $5>({i => Int32(50)}),
        namedParam_1740491678422_392!: (Int64, (Unit, Int16, UInt16, String) -> Unit) -> UInt16) { // block id: 401
        var var_1740491678422_415: ??(Unit, Array<Int64>, Option<String>, Range<UInt16>, Float64) = Option<Option<(Unit, 
                Array<Int64>, Option<String>, Range<UInt16>, Float64)>>.None;
        let var_1740491678422_419: (Unit, Array<Int64>, Option<String>, Range<UInt16>, Float64) = ((), [Int64(UInt64(Int8(104))),
                Int64(29), Int64(UInt32(164)), Int64(Int64(-36)), Int64(59), Int64(UInt64(214)), Int64(31),
                Int64(Int32(UInt32(234))), Int64(61), Int64(UInt32(252))], (Int8(UInt8(UInt8(107))) as String), ((UInt16(UInt16(151)) &
                127)..=(UInt16(UInt16(21)) & 127) : (Int64(92) | 1)), Float64(Float32(87.0)));
        let var_1740491678422_455: Range<UInt16> = ((UInt16(UInt16(39)) & 127)..=(UInt16(UInt16(72)) & 127) : (Int64(-116) |
            1));
        ((var_1740491678422_415 ?? Option<(Unit, Array<Int64>, Option<String>, Range<UInt16>, Float64)>.Some(
            var_1740491678422_419)) ?? (var_1740491678422_450, [Int64(-101), Int64(-19), Int64(77), Int64(-79),
                Int64(-62), Int64(-32), Int64(-112), Int64(98), Int64(-9), Int64(-46)], Option<String>.None,
            var_1740491678422_455, Float64(-100.0)))[3];
        let var_1740491678422_464: Struct_1740491678422_349 = Struct_1740491678422_349();
        var_1740491678422_464.var_1740491678422_467;
        var_1740491678422_475
    };

    @Frozen
    private static prop var_1740491678422_515: ?(Unit, Array<Int64>, Option<String>, Range<UInt16>, Float64) { // block id: 516
        get() { // block id: 518
            Option<(Unit, Array<Int64>, Option<String>, Range<UInt16>, Float64)>.None
        }
    }

    @Frozen
    private static mut prop var_1740491678422_614: UInt32 { // block id: 615
        get() { // block id: 617
            Struct_1740491678422_349();
            UInt32(97);
            var_1740491678422_1408
        }
        set(Value) { // block id: 622
            ();
            var_1740491678422_1408 = Value
        }
    }

    @Frozen
    private mut prop var_1740491678422_645: Option<String> { // block id: 646
        get() { // block id: 648
            (Float32(Float32(Float32(3.0))) as String)
        }
        set(Value) { // block id: 655
            ()
        }
    }
    static var var_1740491678422_659: Float64 = Float64(84.0);
    let var_1740491678422_771: ?(Unit, Array<Int64>, Option<String>, Range<UInt16>, Float64) = Option<(Unit, Array<Int64>, 
            Option<String>, Range<UInt16>, Float64)>.None;
    let var_1740491678422_816: String = "Q&#8W3*0!p";

    @Frozen
    public open func func_1740491678422_494(namedParam_1740491678422_495!: UInt32): String { // block id: 496
        var var_1740491678422_509: ??(Unit, Array<Int64>, Option<String>, Range<UInt16>, Float64) = Option<Option<(Unit, 
                Array<Int64>, Option<String>, Range<UInt16>, Float64)>>.Some(
            Option<(Unit, Array<Int64>, Option<String>, Range<UInt16>, Float64)>.None);
        match (try { // block id: 499
            const var_1740491678422_502: Bool = false;
            if (var_1740491678422_502) {
                ((UInt16(UInt16(219)) & 127)..(UInt16(UInt16(159)) & 127) : (Int64(-83) | 1))
            } else {
                var_1740491678422_506
            };
            var_1740491678422_509
        } catch (_) { // block id: 512
            Option<Option<(Unit, Array<Int64>, Option<String>, Range<UInt16>, Float64)>>.Some(var_1740491678422_515)
        }) {
            case caseVar_1740491678422_522 =>
                var_1740491678422_228 /= ((Int32(98)) | 1)
                if (false) {
                    var_1740491678422_319
                } else {
                    [var_1740491678422_314, var_1740491678422_314, Int64(102), Int64(44), var_1740491678422_314,
                        var_1740491678422_314, Int64(16), var_1740491678422_314, Int64(-65), var_1740491678422_314]
                }

            case _ =>
                var_1740491678422_450;
                var_1740491678422_319

            case _ =>
                ();
                [Int64(-100), Int64(-85), Int64(66), Int64(74), Int64(-122), Int64(119), Int64(89), Int64(18), Int64(87),
                    Int64(39)]
        };
        let var_1740491678422_574: ((String) -> UInt16) -> UInt16 = func_1740491678422_289;
        var var_1740491678422_579: (Array<UInt64>, Range<UInt16>, Bool, Float32, Option<VArray<Int32, $5>>, Range<Int32>) = ([UInt64(112),
                UInt64(246), UInt64(117), UInt64(34), UInt64(146), UInt64(37), UInt64(158), UInt64(247), UInt64(17),
                UInt64(100)], ((UInt16(UInt16(207)) & 127)..=(UInt16(UInt16(220)) & 127) : (Int64(-62) | 1)), true,
            Float32(Float32(Float32(6.0))), Option<VArray<Int32, $5>>.None, ((Int32(Int32(-119)) & 127)..=(Int32(Int32(103)) &
                127) : (Int64(69) | 1)));
        let var_1740491678422_591: Range<Int32> = ((Int32(Int32(62)) & 127)..(Int32(Int32(-86)) & 127) : (Int64(-71) | 1));
        var_1740491678422_558.func_1740491678422_561(var_1740491678422_574,
            namedParam_1740491678422_567: var_1740491678422_579[4], namedParam_1740491678422_568: var_1740491678422_591,
            namedParam_1740491678422_569: (Option<Option<Option<(Unit, Array<Int64>, Option<String>, Range<UInt16>, 
                    Float64)>>>.None ?? Option<Option<(Unit, Array<Int64>, Option<String>, Range<UInt16>, Float64)>>
                .None));
        let var_1740491678422_665: Array<Option<String>> = [Option<String>.Some("Ch(z*5kK^W"),
            ([Int16(UInt8(38)), Int16(-80), Int16(-19), Int16(UInt8(123)), Int16(Int16(4)), Int16(UInt8(96)), Int16(118),
            Int16(UInt16(155)), Int16(Int8(61)), Int16(-3)] as String),
            (((), [Int64(23), Int64(-12), Int64(4), Int64(-78), Int64(-70), Int64(-86), Int64(-26), Int64(-50),
                Int64(74), Int64(86)], (((Int64(Int64(-62)) & 127)..=(Int64(Int64(10)) & 127) : (Int64(-3) | 1)) as String),
            ((UInt16(UInt16(197)) & 127)..(UInt16(UInt16(166)) & 127) : (Int64(-36) | 1)), Float64(-117.0)) as String),
            (Option<Option<(Unit, Array<Int64>, Option<String>, Range<UInt16>, Float64)>>.Some(
            (Option<(Unit, Array<Int64>, Option<String>, Range<UInt16>, Float64)>.None as (Unit, Array<Int64>, Option<String>, 
                Range<UInt16>, Float64))) as String), (VArray<Int32, $5>({i => Int32(54)}) as String),
            Option<String>.None,
            ([UInt64(Int32(-37)), UInt64(UInt8(52)), UInt64(236), UInt64(154), UInt64(151), UInt64(UInt8(164)),
            UInt64(Int16(17)), UInt64(UInt8(66)), UInt64(Int32(-124)), UInt64(Int64(20))] as String),
            Option<String>.Some("\" 6hIUg*Ce"),
            (((Int64(Int64(-7)) & 127)..=(Int64(Int64(14)) & 127) : (Int64(-53) | 1)) as String),
            (([(), (), (), (), (), (), (), (), (), ()] as Option<Option<(Unit, Array<Int64>, Option<String>, Range<UInt16>, 
            Float64)>>) as String)];
        ((try { // block id: 607
            var_1740491678422_609
        } catch (_) { // block id: 612
            var_1740491678422_614;
            var var_1740491678422_625: Bool = true;
            var_1740491678422_625;
            Option<Option<String>>.None
        } finally { // block id: 628
            var var_1740491678422_640: Int64 = Int64(105);
            (var_1740491678422_450, [var_1740491678422_314, Int64(112), Int64(51), Int64(-4), var_1740491678422_314,
                    Int64(70), Int64(-125), var_1740491678422_640, var_1740491678422_640, var_1740491678422_314],
                var_1740491678422_645, ((UInt16(UInt16(168)) & 127)..(UInt16(UInt16(118)) & 127) : (Int64(76) | 1)),
                var_1740491678422_659);
            var_1740491678422_609
        } ?? var_1740491678422_665[7]) ?? match (try { // block id: 761
            ();
            Option<Option<(Unit, Array<Int64>, Option<String>, Range<UInt16>, Float64)>>.Some(
                Option<(Unit, Array<Int64>, Option<String>, Range<UInt16>, Float64)>.None)
        } finally { // block id: 765
            var_1740491678422_767;
            Option<Option<(Unit, Array<Int64>, Option<String>, Range<UInt16>, Float64)>>.Some(var_1740491678422_771)
        }) {
            case _: String =>
                const var_1740491678422_777: String = "F'5WWI(6*M";
                var_1740491678422_777

            case caseVar_1740491678422_781 =>
                ();
                var_1740491678422_450;
                var_1740491678422_159

            case caseVar_1740491678422_788 => var_1740491678422_159

            case caseVar_1740491678422_793: Array<Unit> =>
                if (false) {
                    var_1740491678422_159
                } else {
                    var_1740491678422_159
                }

            case _ =>
                var_1740491678422_804 &= var_1740491678422_767
                const var_1740491678422_812: Bool = true;
                if (var_1740491678422_812) {
                    var_1740491678422_159
                } else {
                    var_1740491678422_816
                }
        })
    };

    static let var_1740491678422_863: Array<Range<UInt8>> = [((UInt8(UInt8(129)) & 127)..(UInt8(UInt8(235)) & 127) : (Int64(-8) |
        1)), ((UInt8(UInt8(66)) & 127)..(UInt8(UInt8(103)) & 127) : (Int64(31) | 1)),
        ((UInt8(UInt8(212)) & 127)..=(UInt8(UInt8(81)) & 127) : (Int64(12) | 1)),
        ((UInt8(UInt8(41)) & 127)..=(UInt8(UInt8(17)) & 127) : (Int64(123) | 1)),
        ((UInt8(UInt8(234)) & 127)..=(UInt8(UInt8(17)) & 127) : (Int64(-106) | 1)),
        ((UInt8(UInt8(218)) & 127)..=(UInt8(UInt8(56)) & 127) : (Int64(124) | 1)),
        ((UInt8(UInt8(2)) & 127)..=(UInt8(UInt8(70)) & 127) : (Int64(5) | 1)),
        ((UInt8(UInt8(93)) & 127)..(UInt8(UInt8(133)) & 127) : (Int64(100) | 1)),
        ((UInt8(UInt8(243)) & 127)..(UInt8(UInt8(226)) & 127) : (Int64(-9) | 1)),
        ((UInt8(UInt8(114)) & 127)..=(UInt8(UInt8(122)) & 127) : (Int64(104) | 1))];
    public static func func_1740491678422_46(): Float32 { // block id: 47
        var var_1740491678422_856: Range<UInt8> = ((UInt8(UInt8(162)) & 127)..=(UInt8(UInt8(52)) & 127) : (Int64(-45) | 1));
        func_1740491678422_49(optionalParam_1740491678422_50: var_1740491678422_827.var_1740491678422_830,
            namedParam_1740491678422_54: (Option<Array<Range<UInt8>>>.Some(
                [((UInt8(UInt8(48)) & 127)..=(UInt8(UInt8(195)) & 127) : (Int64(45) | 1)),
                    ((UInt8(UInt8(97)) & 127)..(UInt8(UInt8(71)) & 127) : (Int64(-81) | 1)),
                    ((UInt8(UInt8(141)) & 127)..(UInt8(UInt8(25)) & 127) : (Int64(-8) | 1)),
                    ((UInt8(UInt8(148)) & 127)..(UInt8(UInt8(67)) & 127) : (Int64(100) | 1)),
                    ((UInt8(UInt8(83)) & 127)..(UInt8(UInt8(96)) & 127) : (Int64(-7) | 1)), var_1740491678422_856,
                    var_1740491678422_856, ((UInt8(UInt8(245)) & 127)..=(UInt8(UInt8(154)) & 127) : (Int64(109) | 1)),
                    var_1740491678422_856, var_1740491678422_856]) ?? var_1740491678422_863)[2])
    };

    static mut prop var_1740491678422_1408: UInt32 { // block id: 1409
        get() { // block id: 1411
            ();
            ();
            UInt32(208)
        }
        set(Value) { // block id: 1417
            ();
            UInt64(221);
            ()
        }
    }
    public static mut prop var_1740491678422_1699: Bool { // block id: 1700
        get() { // block id: 1702
            ();
            (Float32(Float32(27.0)) is Int64)
        }
        set(Value) { // block id: 1709
            ()
        }
    }
    public func isClosed(): Bool {
        return true
    }
    public func close(): Unit {}
}

@Frozen
@Deprecated
internal func func_1740491678422_85<T0>(param_1740491678422_86: String): Float32 { // block id: 87
    var var_1740491678422_90: Option<VArray<Int32, $5>> = ([(), (), (), (), (), (), (), (), (), ()] as VArray<Int32, $5>);
    var var_1740491678422_117: String = "t5HmnIJ'KW";
    match (var_1740491678422_90) {
        case caseVar_1740491678422_105: Range<UInt8> => -var_1740491678422_30

        case _ => Float32(-83.0)

        case _ =>
            var_1740491678422_117;
            var_1740491678422_30
    }
}

public func func_1740491678422_121(param_1740491678422_122: (String) -> Float32): Float32 { // block id: 125
    const var_1740491678422_130: Bool = false;
    var var_1740491678422_135: Byte = UInt8(245);
    const var_1740491678422_153: Int32 = 98;
    func_1740491678422_85<Range<Int8>>(
        if (if (var_1740491678422_130) { // block id: 132
            var_1740491678422_135 == UInt8(102)
        } else if (var_1740491678422_130) { // block id: 139
            var_1740491678422_135 %= ((var_1740491678422_135) | 1)
            true
        } else { // block id: 144
            const var_1740491678422_148: UInt64 = 216;
            UInt64(216) ^ var_1740491678422_148;
            ();
            var_1740491678422_153 != Int32(7)
        }) {
            (if (var_1740491678422_130) {
                var_1740491678422_159
            } else {
                var_1740491678422_159
            })
        } else {
            (Option<String>.Some(var_1740491678422_159) ?? var_1740491678422_159)
        })
}

func func_1740491678422_241(param_1740491678422_86: String): Float32 { // block id: 87
    var var_1740491678422_90: Option<VArray<Int32, $5>> = ([(), (), (), (), (), (), (), (), (), ()] as VArray<Int32, $5>);
    var var_1740491678422_117: String = "t5HmnIJ'KW";
    match (var_1740491678422_90) {
        case caseVar_1740491678422_105: Range<UInt8> => -var_1740491678422_30

        case _ => Float32(-83.0)

        case _ =>
            var_1740491678422_117;
            var_1740491678422_30
    }
}

@Frozen
public const func func_1740491678422_247<T0>(param_1740491678422_248: Unit,
    optionalParam_1740491678422_249!: Int16 = 119, optionalParam_1740491678422_251!: UInt16 = 190,
    namedParam_1740491678422_253!: String): Unit { // block id: 254

}

@Frozen
public const func func_1740491678422_284(param_1740491678422_285: String): UInt16 { // block id: 286
    115
}

@Deprecated
internal func func_1740491678422_295(param_1740491678422_296: Int64,
    namedParam_1740491678422_297!: (Unit, Int16, UInt16, String) -> Unit): UInt16 { // block id: 303
    var_1740491678422_305
}

public func func_1740491678422_289(param_1740491678422_290: (String) -> UInt16): UInt16 { // block id: 293
    var var_1740491678422_323: (Unit, Int16, UInt16, String) -> Unit = func_1740491678422_247<UInt32>;
    func_1740491678422_295((Option<Int64>.Some(var_1740491678422_314) ?? var_1740491678422_319[9]),
        namedParam_1740491678422_297: var_1740491678422_323)
}

@Frozen
public const func func_1740491678422_326(param_1740491678422_285: String): UInt16 { // block id: 286
    115
}

@Frozen
@Deprecated
public func func_1740491678422_328(param_1740491678422_329: String): (String) -> UInt16 { // block id: 330
    func_1740491678422_326
}

public struct Struct_1740491678422_349 {
    public init() { // block id: 351

    }

    public var var_1740491678422_370: UInt8 = UInt8(233);

    @Frozen
    prop var_1740491678422_467: Unit { // block id: 468
        get() { // block id: 470
            ();
            Class_1740491678422_40();
            ()
        }
    }
}

@Frozen
public func func_1740491678422_243(param_1740491678422_244: String): (String) -> Float32 { // block id: 245
    var var_1740491678422_257: Bool = false;
    let var_1740491678422_261: Unit = ();
    var loopTimeVar_1740491678422_265: Int = 0;
    func_1740491678422_247<UInt32>(do {
        loopTimeVar_1740491678422_265++;
        var_1740491678422_261;
        ()
    } while ((var_1740491678422_257) && loopTimeVar_1740491678422_265 < 100),
        optionalParam_1740491678422_249: [var_1740491678422_270, Int16(-128), var_1740491678422_270,
            var_1740491678422_270, Int16(-78), var_1740491678422_270, Int16(35), var_1740491678422_270, Int16(7),
            var_1740491678422_270][6],
        optionalParam_1740491678422_251: (["""
#}|i7
E0*,y
""", ###"1'7~F;a{<,%"###, ###"YKg%<\"TocK"###, "lNkbq)V'~h",
            "!4!/3AA02q", ###"W-H,<oq%~v"###, """
kN7)1
R*ta{n
""", """
s)JbB
OT^zJ
""", ###"6&gw.d$IP|"###,
            "ed<i*56RTN"][3] |> (func_1740491678422_328 ~> func_1740491678422_289)),
        namedParam_1740491678422_253: try { // block id: 338
            ###"8G_[BcurZ3"###
        } finally { // block id: 340
            var_1740491678422_257 ||= false
            if (false) {
                var_1740491678422_159
            } else {
                var_1740491678422_159
            }
        });
    var var_1740491678422_353: Struct_1740491678422_349 = Struct_1740491678422_349();
    var_1740491678422_353.var_1740491678422_370;
    var var_1740491678422_373: (String) -> Float32 = func_1740491678422_241;
    var_1740491678422_373
}

public sealed interface Interface_1740491678422_556 <: Interface_1740491678422_43<Int16> {
    @Frozen
    func func_1740491678422_561(param_1740491678422_562: ((String) -> UInt16) -> UInt16,
        namedParam_1740491678422_567!: Option<VArray<Int32, $5>>, namedParam_1740491678422_568!: Range<Int32>,
        namedParam_1740491678422_569!: Option<Option<(Unit, Array<Int64>, Option<String>, Range<UInt16>, Float64)>>): Int16 { // block id: 570
        var_1740491678422_450;
        var_1740491678422_270
    }
}

public interface Interface_1740491678422_555 <: Interface_1740491678422_43<Int16> & Interface_1740491678422_556 {
    func func_1740491678422_561(param_1740491678422_562: ((String) -> UInt16) -> UInt16,
        namedParam_1740491678422_567!: Option<VArray<Int32, $5>>, namedParam_1740491678422_568!: Range<Int32>,
        namedParam_1740491678422_569!: Option<Option<(Unit, Array<Int64>, Option<String>, Range<UInt16>, Float64)>>): Int16 { // block id: 1426
        var var_1740491678422_1435: Option<Array<Range<UInt8>>> = ((Int32(-73) as Option<String>) as Array<Range<UInt8>>);
        let var_1740491678422_1440: Struct_1740491678422_349 = Struct_1740491678422_349();
        var var_1740491678422_1466: UInt8 = UInt8(Int8(97));
        var var_1740491678422_1472: Bool = false;
        if (match ((UInt16(187) as Option<(Float32, Float64, Range<Int16>, Array<Unit>, Unit, Range<Int8>, Range<UInt8>)>)) {
            case _: Option<Option<(Float32, Float64, Range<Int16>, Array<Unit>, Unit, Range<Int8>, Range<UInt8>)>> =>
                var_1740491678422_1435;
                var_1740491678422_1440;
                true || true

            case caseVar_1740491678422_1447: Option<Option<String>> =>
                var_1740491678422_1002;
                true

            case _ =>
                let var_1740491678422_1456: Int64 = Int64(Int32(84));
                var_1740491678422_1456 > var_1740491678422_1456

            case _ =>
                var_1740491678422_450;
                var_1740491678422_1466 >>= ((UInt8(7)) & 7)
                var_1740491678422_1472 || var_1740491678422_1472
        }) { // block id: 1475
            ();
            try (resource = Class_1740491678422_40()) { // block id: 1478
                var_1740491678422_1002;
                ()
            } finally { // block id: 1481
                var_1740491678422_1018;
                Class_1740491678422_40();
                const var_1740491678422_1485: Unit = ();
                var_1740491678422_1485
            };
            var loopTimeVar_1740491678422_1493: Array<UInt64> = [UInt64(UInt16(199)), UInt64(UInt64(212)), UInt64(223),
                UInt64(96), UInt64(UInt32(250)), UInt64(228), UInt64(146), UInt64(Int64(-15)), UInt64(UInt32(242)),
                UInt64(UInt32(165))];
            for (i in loopTimeVar_1740491678422_1493 where false) {
                Float32(102.0) / Float32((Int32(var_1740491678422_30)) | 1)
            }
        } else if (false) { // block id: 1512

        }
        const var_1740491678422_1530: Int8 = 65;
        let var_1740491678422_1555: Option<Unit> = (VArray<Int32, $5>(repeat: Int32(-109)) as Unit);
        var var_1740491678422_1630: (Array<UInt64>, Range<UInt16>, Bool, Float32, Option<VArray<Int32, $5>>, Range<Int32>) = ([UInt64(6),
                UInt64(190), UInt64(67), UInt64(175), UInt64(222), UInt64(103), UInt64(217), UInt64(140), UInt64(69),
                UInt64(132)], ((UInt16(UInt16(3)) & 127)..=(UInt16(UInt16(189)) & 127) : (Int64(UInt16(Int8(11))) | 1)),
            (((), [Int64(44), Int64(84), Int64(77), Int64(-58), Int64(47), Int64(-70), Int64(104), Int64(103),
                    Int64(-70), Int64(-3)], (((UInt32(UInt32(249)) & 127)..(UInt32(UInt32(253)) & 127) : (Int64(116) | 1)) as String),
                ((UInt16(UInt16(192)) & 127)..(UInt16(UInt16(220)) & 127) : (Int64(60) | 1)), Float64(19.0)) is UInt8),
            Float32(Float32(Float32(Float32(-7.0)))), ((Float64(103.0) as String) as VArray<Int32, $5>), ((Int32(Int32(UInt8(3))) &
                127)..(Int32(Int32(Int8(UInt8(171)))) & 127) : (Int64(UInt32(72)) | 1)));
        (if (try { // block id: 1520
            var_1740491678422_228 < Int32(-45)
        } catch (_) { // block id: 1524
            UInt16(199);
            var_1740491678422_1472
        } finally { // block id: 1527
            var_1740491678422_1530 >= var_1740491678422_1530
        }) { // block id: 1533
            var var_1740491678422_1545: Unit = ();
            if (var_1740491678422_1472) {
                [(), (), (), (), (), (), (), (), (), ()]
            } else {
                [var_1740491678422_1002, var_1740491678422_450, var_1740491678422_450, var_1740491678422_450, (),
                    var_1740491678422_450, var_1740491678422_1545, (), var_1740491678422_1002, var_1740491678422_1002]
            };
            var_1740491678422_1530;
            Option<Unit>.None
        } else { // block id: 1552
            var_1740491678422_450;
            var_1740491678422_1555
        } ?? match (try { // block id: 1570
            var_1740491678422_890
        } catch (_) { // block id: 1572
            var_1740491678422_1002;
            var_1740491678422_1018;
            var var_1740491678422_1577: Array<UInt64> = [UInt64(22), UInt64(UInt32(Int32(104))), UInt64(152),
                UInt64(189), UInt64(UInt8(190)), UInt64(36), UInt64(124), UInt64(Int32(Int32(UInt8(221)))),
                UInt64(UInt32(138)), UInt64(181)];
            var var_1740491678422_1598: UInt16 = UInt16(UInt16(193));
            let var_1740491678422_1606: Option<VArray<Int32, $5>> = (VArray<Int32, $5>({i => Int32(67)}) as VArray<Int32, $5>);
            var var_1740491678422_1618: Range<Int32> = ((Int32(Int32(10)) & 127)..(Int32(Int32(51)) & 127) : (Int64(-39) |
                1));
            (var_1740491678422_1577, ((UInt16(var_1740491678422_1598) & 127)..=(UInt16(var_1740491678422_1598) & 127) : (Int64(107) |
                    1)), false, var_1740491678422_30, var_1740491678422_1606, var_1740491678422_1618)
        } finally { // block id: 1620
            var_1740491678422_1623 += UInt32(223)
            ();
            var_1740491678422_1630
        }) {
            case _ =>
                var_1740491678422_1630;
                ()
        });
        Int16(-13) >> (((Option<(Range<Int32>, String, Range<UInt32>, Int16, Range<Int8>)>.None ?? (((Int32(Int32(-58)) &
                127)..(Int32(Int32(50)) & 127) : (Int64(-13) | 1)), """
pNrOz
aX`oW
""", ((UInt32(var_1740491678422_1623) &
                127)..=(UInt32(UInt32(166)) & 127) : (Int64(-47) | 1)), Int16(115), ((Int8(Int8(-65)) & 127)..(Int8(var_1740491678422_1530) &
                127) : (Int64(96) | 1))))[3]) & 7)
    }
}

public open class Class_1740491678422_552 <: Class_1740491678422_40 & Interface_1740491678422_43<Int16> & Interface_1740491678422_555 {
    public init() { // block id: 554

    }

    public init(namedParam_1740491678422_1722!: Range<UInt8>,
        namedParam_1740491678422_1723!: (Float32, Float64, Range<Int16>, Array<Unit>, Unit, Range<Int8>, Range<UInt8>)) { // block id: 1724
        const var_1740491678422_1745: Bool = true;
        var var_1740491678422_1838: Bool = (Option<Option<(Unit, Array<Int64>, Option<String>, Range<UInt16>, Float64)>>
            .Some(Option<(Unit, Array<Int64>, Option<String>, Range<UInt16>, Float64)>.None) is Int32);
        ((try { // block id: 1728
            if (false) {
                "+\\%xa{QrBRj"
            } else {
                "7M)nqt;Kk,"
            }
        } catch (_) { // block id: 1733
            var_1740491678422_1735
        } as Unit) ?? match (if (true) { // block id: 1740
            Option<Option<String>>.None;
            Int32(4);
            var var_1740491678422_1751: ?(Unit, Array<Int64>, Option<String>, Range<UInt16>, Float64) = ((Option<Int64>
                    .Some(Int64(Int16(19))), (Float32(42.0), Float64(-39.0), ((Int16(Int16(-86)) & 127)..=(Int16(Int16(57)) &
                        127) : (Int64(-112) | 1)), [(), (), (), (), (), (), (), (), (), ()], (), ((Int8(Int8(-44)) & 127)..=(Int8(Int8(35)) &
                        127) : (Int64(39) | 1)), ((UInt8(UInt8(197)) & 127)..(UInt8(UInt8(113)) & 127) : (Int64(117) | 1))),
                (((Option<Int64>.Some(Int64(-92)), (Float32(39.0), Float64(-98.0), ((Int16(Int16(-114)) & 127)..=(Int16(Int16(113)) &
                            127) : (Int64(-64) | 1)), [(), (), (), (), (), (), (), (), (), ()], (), ((Int8(Int8(85)) &
                            127)..(Int8(Int8(98)) & 127) : (Int64(4) | 1)), ((UInt8(UInt8(47)) & 127)..=(UInt8(UInt8(13)) &
                            127) : (Int64(-102) | 1))), Option<(Unit, Array<Int64>, Option<String>, Range<UInt16>, 
                            Float64)>.None, Option<Option<Option<(Unit, Array<Int64>, Option<String>, Range<UInt16>, 
                            Float64)>>>.None) as String) as (Unit, Array<Int64>, Option<String>, Range<UInt16>, Float64)),
                Option<Option<Option<(Unit, Array<Int64>, Option<String>, Range<UInt16>, Float64)>>>.None) as (Unit, 
                Array<Int64>, Option<String>, Range<UInt16>, Float64));
            if (var_1740491678422_1745) {
                var_1740491678422_1748
            } else {
                var_1740491678422_1751
            }
        } else if (false) { // block id: 1801
            Option<Option<Option<(Unit, Array<Int64>, Option<String>, Range<UInt16>, Float64)>>>.None;
            Option<(Unit, Array<Int64>, Option<String>, Range<UInt16>, Float64)>.None
        } else { // block id: 1804
            if (true) {
                r'9'
            } else {
                var_1740491678422_1809
            };
            if (var_1740491678422_1745) {
                var_1740491678422_1748
            } else {
                Option<(Unit, Array<Int64>, Option<String>, Range<UInt16>, Float64)>.Some(
                    (var_1740491678422_1002, [Int64(-58), Int64(18), Int64(51), Int64(0), Int64(115), Int64(69),
                            Int64(87), Int64(24), Int64(-60), Int64(78)], Option<String>.Some(var_1740491678422_1735), ((UInt16(var_1740491678422_1822) &
                            127)..=(UInt16(UInt16(77)) & 127) : (var_1740491678422_1829 | 1)), Float64(-24.0)))
            }
        }) {
            case _: Array<Range<UInt8>> => var_1740491678422_1838 &&= var_1740491678422_1838

            case _ =>
                ();
                ()
        });
        var var_1740491678422_1879: Int8 = Int8(41);
        try (resource = Class_1740491678422_40()) { // block id: 1849
            [(), var_1740491678422_450, (), var_1740491678422_450, (), (), (), var_1740491678422_1002, (),
                var_1740491678422_450];
            var loopTimeVar_1740491678422_1864: Range<UInt64> = ((UInt64(UInt64(229)) & 127)..(UInt64(UInt64(Int8(-20))) &
                127) : (Int64(UInt8(UInt8(UInt8(63)))) | 1));
            for (i in loopTimeVar_1740491678422_1864 where false) {
            }
        } catch (e: Exception) { // block id: 1873

        } finally { // block id: 1874
            UInt64(var_1740491678422_228);
            var_1740491678422_1879++
        }
    };

    public open override func func_1740491678422_561(param_1740491678422_562: ((String) -> UInt16) -> UInt16,
        namedParam_1740491678422_567!: Option<VArray<Int32, $5>>, namedParam_1740491678422_568!: Range<Int32>,
        namedParam_1740491678422_569!: Option<Option<(Unit, Array<Int64>, Option<String>, Range<UInt16>, Float64)>>): Int16 { // block id: 1694
        let var_1740491678422_1717: Interface_1740491678422_555 = Class_1740491678422_552(
            namedParam_1740491678422_1722: ((UInt8(UInt8(UInt8(163))) & 127)..=(UInt8(UInt8(161)) & 127) : (Int64(70) | 1)),
            namedParam_1740491678422_1723: (Float32(Float32(Float32(108.0))), Float64(-26.0), ((Int16(Int16(97)) & 127)..=(Int16(Int16(13)) &
                    127) : (Int64(28) | 1)), [(), (), (), (), (), (), (), (), (), ()], (), ((Int8(Int8(-103)) & 127)..(Int8(Int8(-36)) &
                    127) : (Int64(117) | 1)), ((UInt8(UInt8(100)) & 127)..=(UInt8(UInt8(227)) & 127) : (Int64(-101) | 1))));
        let var_1740491678422_1915: UInt32 = UInt32(251);
        try { // block id: 1697
            var_1740491678422_1699;
            Option<(Unit, Array<Int64>, Option<String>, Range<UInt16>, Float64)>.None;
            var var_1740491678422_1714: Range<UInt16> = ((UInt16(UInt16(207)) & 127)..(UInt16(UInt16(97)) & 127) : (Int64(99) |
                1));
            (var_1740491678422_1714, var_1740491678422_1717, Option<Array<Range<UInt8>>>.None, (), var_1740491678422_1699,
                ((UInt32(var_1740491678422_1408) & 127)..(UInt32(var_1740491678422_1915) & 127) : (Int64(21) | 1)),
                Float64(-4.0), Option<(Unit, Array<Int64>, Option<String>, Range<UInt16>, Float64)>.None, Int64(43))
        } catch (_) { // block id: 1921
            var var_1740491678422_1924: UInt8 = UInt8(UInt8(UInt8(Int8(-116))));
            var_1740491678422_1924++;
            UInt64(124);
            var_1740491678422_1251
        }[3];
        try { // block id: 1933
            var_1740491678422_270 ^ Int16(-72)
        } catch (_) { // block id: 1937
            if (false) { // block id: 1940
                ((Int32(Int32(-123)) & 127)..=(Int32(Int32(-76)) & 127) : (Int64(-105) | 1));
                Int16(-52)
            } else { // block id: 1943
                Struct_1740491678422_349();
                var_1740491678422_1829 += var_1740491678422_1829
                var_1740491678422_270
            }
        }
    }
}

internal func func_1740491678422_49(optionalParam_1740491678422_50!: UInt8 = UInt8(83),
    optionalParam_1740491678422_52!: Array<UInt64> = [UInt64(55), UInt64(226), UInt64(73), UInt64(101), UInt64(122),
        UInt64(197), UInt64(133), UInt64(197), UInt64(218), UInt64(40)], namedParam_1740491678422_54!: Range<UInt8>): Float32 { // block id: 55
    let var_1740491678422_61: Rune = r'k';
    let var_1740491678422_65: Int32 = Int32(-118);
    if ((var_1740491678422_61 is Class_1740491678422_40)) {
        VArray<Int32, $5>(repeat: var_1740491678422_65)
    } else {
        (Option<VArray<Int32, $5>>.None ?? VArray<Int32, $5>(repeat: var_1740491678422_65))
    }[4];
    const var_1740491678422_184: Bool = false;
    let var_1740491678422_224: Unit = ();
    let var_1740491678422_378: Class_1740491678422_40 = Class_1740491678422_40(
        optionalParam_1740491678422_381: VArray<Int32, $5>({i => Int32(-24)}),
        namedParam_1740491678422_392: func_1740491678422_295);
    var_1740491678422_378.func_1740491678422_494(namedParam_1740491678422_495: var_1740491678422_819) |> (func_1740491678422_243 ~>
        {
        lambdaParameter_1740491678422_172: (String) -> Float32 => Float32(match (if (true) { // block id: 180
            ((UInt16(UInt16(131)) & 127)..=(UInt16(UInt16(105)) & 127) : (Int64(-60) | 1));
            Option<String>.None
        } else if (var_1740491678422_184) { // block id: 186
            Option<String>.None
        } else { // block id: 188
            if (false) {
                var_1740491678422_192
            } else {
                var_1740491678422_192
            };
            ();
            Option<String>.None
        }) {
            case caseVar_1740491678422_199 => Float32(17.0)

            case _ =>
                var var_1740491678422_207: Int = Int64(Int64(UInt16(152)));
                var_1740491678422_207 *= Int64(22)
                Option<VArray<Int32, $5>>.None;
                var_1740491678422_30

            case caseVar_1740491678422_216 => Float32(-112.0)

            case caseVar_1740491678422_221 =>
                var_1740491678422_224;
                var_1740491678422_228 &= var_1740491678422_65
                var_1740491678422_30

            case _ =>
                var_1740491678422_224;
                ((Int32(Int32(-1)) & 127)..(Int32(var_1740491678422_228) & 127) : (Int64(-117) | 1));
                Float32(113.0)
        })
    })
}

@Deprecated
public open class Class_1740491678422_823 <: Class_1740491678422_40 {
    @Frozen
    public init() { // block id: 825

    }

    @Frozen
    public mut prop var_1740491678422_830: Byte { // block id: 831
        get() { // block id: 833
            Int16(6);
            UInt8(149)
        }
        set(Value) { // block id: 838
            ();
            ()
        }
    }
}

@Frozen
public func func_1740491678422_36(param_1740491678422_37: Int32): (Float32, Float64, Range<Int16>, Array<Unit>, Unit, 
    Range<Int8>, Range<UInt8>) { // block id: 38
    Class_1740491678422_40.func_1740491678422_46();
    match (var_1740491678422_884) {
        case _ =>
            var_1740491678422_890;
            var_1740491678422_450;
            ()
    };
    let var_1740491678422_928: Option<Option<(Float32, Float64, Range<Int16>, Array<Unit>, Unit, Range<Int8>, Range<UInt8>)>> = (((UInt8(UInt8(173)) &
        127)..=(UInt8(UInt8(207)) & 127) : (Int64(78) | 1)) as Option<(Float32, Float64, Range<Int16>, Array<Unit>, 
        Unit, Range<Int8>, Range<UInt8>)>);
    var var_1740491678422_1042: (Option<Int64>, (Float32, Float64, Range<Int16>, Array<Unit>, Unit, Range<Int8>, Range<UInt8>), 
        Option<(Unit, Array<Int64>, Option<String>, Range<UInt16>, Float64)>, Option<Option<Option<(Unit, Array<Int64>, 
        Option<String>, Range<UInt16>, Float64)>>>) = ((Class_1740491678422_552() as Int64), (Float32(Float32(Float32(-65.0))),
            Float64(-58.0), ((Int16(Int16(33)) & 127)..=(Int16(Int16(-1)) & 127) : (Int64(-68) | 1)), [(), (), (), (),
                (), (), (), (), (), ()], (), ((Int8(Int8(Int8(-19))) & 127)..=(Int8(Int8(Int8(-114))) & 127) : (Int64(97) |
                1)), ((UInt8(UInt8(32)) & 127)..=(UInt8(UInt8(211)) & 127) : (Int64(-60) | 1))), ((() as (Unit, Array<Int64>, 
            Option<String>, Range<UInt16>, Float64)) as (Unit, Array<Int64>, Option<String>, Range<UInt16>, Float64)), (((Int32(Int32(23)) &
            127)..(Int32(Int32(-80)) & 127) : (Int64(77) | 1)) as Option<Option<(Unit, Array<Int64>, Option<String>, 
            Range<UInt16>, Float64)>>));
    ((var_1740491678422_928 ?? match (((Int32(Int32(-55)) & 127)..(Int32(Int32(95)) & 127) : (Int64(-72) | 1))) {
        case caseVar_1740491678422_935: Float32 => Option<(Float32, Float64, Range<Int16>, Array<Unit>, Unit, Range<Int8>, 
                Range<UInt8>)>.None

        case _ =>
            Float64(115.0);
            Option<(Float32, Float64, Range<Int16>, Array<Unit>, Unit, Range<Int8>, Range<UInt8>)>.Some(
                var_1740491678422_944)
    }) ?? try { // block id: 968
        Option<Option<String>>.Some(var_1740491678422_884);
        var var_1740491678422_973: Option<Int64> = Option<Int64>.Some(Int64(UInt32(UInt32(Int8(88)))));
        var var_1740491678422_984: Float64 = Float64(Float64(61.0));
        let var_1740491678422_988: Range<Int16> = ((Int16(Int16(78)) & 127)..(Int16(Int16(-64)) & 127) : (Int64(-93) | 1));
        var var_1740491678422_1015: ?(Unit, Array<Int64>, Option<String>, Range<UInt16>, Float64) = Option<(Unit, Array<Int64>, 
                Option<String>, Range<UInt16>, Float64)>.None;
        (var_1740491678422_973, (var_1740491678422_981, var_1740491678422_984, var_1740491678422_988, [var_1740491678422_450,
                    var_1740491678422_450, (), (), (), (), (), var_1740491678422_450, var_1740491678422_450,
                    var_1740491678422_450], var_1740491678422_1002, var_1740491678422_1005, ((UInt8(UInt8(246)) & 127)..(UInt8(UInt8(220)) &
                    127) : (var_1740491678422_1011 | 1))), var_1740491678422_1015, var_1740491678422_1018)
    } catch (_) { // block id: 1038
        var_1740491678422_450;
        var_1740491678422_450;
        var_1740491678422_1042
    }[1])
}

@Frozen
public func func_1740491678422_24(param_1740491678422_25: Range<Int16>,
    optionalParam_1740491678422_26!: Range<Int64> = ((Int64(Int64(11)) & 127)..(Int64(Int64(-33)) & 127) : (Int64(83) | 1))): Array<Unit> { // block id: 28
    var_1740491678422_30;
    let var_1740491678422_1078: (Int32) -> (Float32, Float64, Range<Int16>, Array<Unit>, Unit, Range<Int8>, Range<UInt8>) = func_1740491678422_36;
    var var_1740491678422_1082: Struct_1740491678422_349 = Struct_1740491678422_349();
    (match (var_1740491678422_1082) {
        case _: Option<(Unit, Array<Int64>, Option<String>, Range<UInt16>, Float64)> =>
            ();
            Int32(-48) * var_1740491678422_228

        case caseVar_1740491678422_1093: Unit =>
            var_1740491678422_1002;
            var_1740491678422_1098 ||= var_1740491678422_1098
            var_1740491678422_228

        case _ =>
            ();
            var_1740491678422_228 << ((var_1740491678422_228) & 7)

        case _ =>
            var var_1740491678422_1113: Range<UInt16> = ((UInt16(UInt16(229)) & 127)..=(UInt16(UInt16(119)) & 127) : (Int64(-97) |
                1));
            var_1740491678422_1113;
            let var_1740491678422_1116: Interface_1740491678422_43<Int16> = Class_1740491678422_823();
            var_1740491678422_1116;
            Int32(-98)
    } |> var_1740491678422_1078)[4];
    var var_1740491678422_1160: Range<Int32> = ((Int32(Int32(UInt32(UInt32(205)))) & 127)..(Int32(Int32(UInt16(115))) &
        127) : (Int64(UInt64(Int32(-58))) | 1));
    let var_1740491678422_1197: Option<Bool> = Option<Bool>.None;
    if (if ((Option<Bool>.Some(var_1740491678422_1098) ?? false)) { // block id: 1130
        false
    } else if (([var_1740491678422_767, var_1740491678422_767, UInt64(239), var_1740491678422_767, UInt64(232),
            UInt64(222), var_1740491678422_1142, var_1740491678422_1142, UInt64(196), UInt64(44)], ((UInt16(var_1740491678422_1149) &
            127)..=(UInt16(var_1740491678422_1149) & 127) : (Int64(108) | 1)), true, Float32(59.0),
        var_1740491678422_1157, var_1740491678422_1160)[2]) { // block id: 1171
        ();
        if (true) {
            Option<Int64>.None
        } else {
            Option<Int64>.None
        };
        true
    } else { // block id: 1178
        ();
        ();
        Int16(-124) >= var_1740491678422_270
    }) {
        (if ((var_1740491678422_1191 ?? false)) {
            [(), (), (), (), (), (), (), (), (), ()]
        } else {
            match (var_1740491678422_1197) {
                case _: Int16 =>
                    const var_1740491678422_1206: Unit = ();
                    [var_1740491678422_450, (), var_1740491678422_1206, (), var_1740491678422_1206,
                        var_1740491678422_450, var_1740491678422_1002, (), (), ()]

                case caseVar_1740491678422_1217 =>
                    var_1740491678422_1018;
                    Option<Option<(Float32, Float64, Range<Int16>, Array<Unit>, Unit, Range<Int8>, Range<UInt8>)>>.None;
                    if (false) {
                        [(), (), (), (), (), (), (), (), (), ()]
                    } else {
                        [(), (), (), (), (), (), (), (), (), ()]
                    }

                case caseVar_1740491678422_1227 => [(), (), (), (), (), (), (), (), (), ()]

                case _ =>
                    var_1740491678422_1234;
                    [var_1740491678422_450, (), (), var_1740491678422_1002, var_1740491678422_1002, (),
                        var_1740491678422_450, (), var_1740491678422_1002, var_1740491678422_450]
            }
        })
    } else {
        if (var_1740491678422_1251[4]) { // block id: 1296
            if (var_1740491678422_1098) {
                [var_1740491678422_450, var_1740491678422_450, var_1740491678422_1002, (), var_1740491678422_1002, (),
                    (), (), var_1740491678422_1002, ()]
            } else {
                [(), (), (), (), (), (), (), (), (), ()]
            }
        } else if ((Option<Bool>.Some(false) ?? true)) { // block id: 1315
            var_1740491678422_1018;
            var_1740491678422_1098 ||= true
            [(), (), (), (), (), (), (), (), (), ()]
        } else { // block id: 1321
            ();
            -UInt16(93)
            [(), (), (), (), (), (), (), (), (), ()]
        }
    }
}

@Frozen
public func func_1740491678422_19(
    optionalParam_1740491678422_20!: Range<UInt16> = ((UInt16(UInt16(110)) & 127)..=(UInt16(UInt16(54)) & 127) : (Int64(29) |
        1))): Array<Unit> { // block id: 22
    let var_1740491678422_1334: ?(Float32, Range<Int16>, Range<Int32>) = (((UInt32(UInt32(191)) & 127)..(UInt32(UInt32(61)) &
        127) : (Int64(48) | 1)) as (Float32, Range<Int16>, Range<Int32>));
    func_1740491678422_24(
        (var_1740491678422_1334 ?? (Float32(-41.0), ((Int16(Int16(-35)) & 127)..(Int16(Int16(-68)) & 127) : (Int64(-85) |
                1)), ((Int32(Int32(-109)) & 127)..(Int32(Int32(123)) & 127) : (Int64(5) | 1))))[1])
}

main(): Int64 {
    try {
        const var_1740491678422_1372: String = "J`aB+BsS/*";
        func_1740491678422_19(optionalParam_1740491678422_20: if (var_1740491678422_1098) { // block id: 1344
            var var_1740491678422_1352: Range<UInt16> = ((UInt16(UInt16(89)) & 127)..(UInt16(UInt16(Int16(-102))) & 127) : (Int64(-12) |
                1));
            if (false) {
                ((UInt16(UInt16(75)) & 127)..=(UInt16(UInt16(46)) & 127) : (Int64(122) | 1))
            } else {
                var_1740491678422_1352
            }
        } else if (true) { // block id: 1359
            UInt32(179);
            var_1740491678422_1362
        } else { // block id: 1370
            var_1740491678422_1372;
            ((UInt16(UInt16(20)) & 127)..(UInt16(var_1740491678422_1377) & 127) : (Int64(-66) | 1))
        })[1];
        var var_1740491678422_1393: Byte = UInt8(135);
        (Int64(28) % (((Int64(-63) << ((Int64(-42)) & 7))) | 1)) ^ try { // block id: 1388
            !false
            var_1740491678422_1393 *= var_1740491678422_1393
            -var_1740491678422_1398
        } catch (_) { // block id: 1400
            var_1740491678422_1398 % ((var_1740491678422_1398) | 1)
        } finally { // block id: 1404
            var_1740491678422_1398 - var_1740491678422_1398
        }
        // CRC Check All Variables
        var crcCheck = CrcCheck(5000, 32)
        crcCheck.updateBuffer(UInt64(var_1740491678422_1393 * var_1740491678422_1393), 64)
        crcCheck.updateBuffer(UInt64(var_1740491678422_1398 * var_1740491678422_1398), 64)
        crcCheck.crcCheck()
        crcCheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) {
        println("Exception: NoneValueException")
    }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        buffer = Array<Int64>(buffer_n, {i => 0})
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, {i => 0})
        var byte_c = 1
        var byte_index = 0
        while (value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[(i + buffer_index) % buffer.size] = byteArray[i + byte_index]
            i++
        }
        buffer_index = (buffer_index + i) % buffer.size
    }

    func updateBuffer(input: Bool, byte_n: Int64): Unit {
        if (input == true) {
            updateBuffer(1, byte_n)
        } else {
            updateBuffer(0, byte_n)
        }
    }

    func updateBuffer(input: Rune, byte_n: Int64): Unit {
        updateBuffer(UInt64(UInt32(input)), byte_n)
    }

    func updateBuffer(input: String, byte_n: Int64): Unit {
        for (c in input) {
            updateBuffer(c, byte_n)
        }
    }

    func updateBuffer(input: Unit, byte_n: Int64): Unit {
        updateBuffer(input.toString(), byte_n)
    }

    func updateBuffer(input: Any, byte_n: Int64): Unit {
        if (input is Hashable) {
            match (input as Hashable) {
                case Some(v) => updateBuffer(UInt64(v.hashCode()), byte_n)
                case _ => updateBuffer(1, byte_n)
            }
        } else if (input is ToString) {
            match (input as ToString) {
                case Some(v) => updateBuffer(v.toString(), byte_n)
                case _ => updateBuffer(1, byte_n)
            }
        } else {
            updateBuffer(1, byte_n)
        }
    }
    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, {i => 0})
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2 ** 2 * crc_output[i] + 2 ** 1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
