/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args

public let var_1667391161668_87 : Bool = false
var var_1667391161668_177 : Array<UInt64> = [UInt64(Int8(118)), UInt64(UInt64(252)), UInt64(0), UInt64(UInt8(Int8(UInt8(173)))), UInt64(226), UInt64(16), UInt64(UInt64(Int64((-40)))), UInt64(65), UInt64(UInt8(106)), UInt64(11)]
let var_1667391161668_209 : Int8 = Int8(UInt8(UInt8(Int8(106))))
public let var_1667391161668_218 : Unit = ()
public let var_1667391161668_246 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
public var var_1667391161668_262 : Class_1667391161668_117<Option<Range<UInt8>>, Option<(Option<Array<Float64>>, Int64, Array<Bool>, (Unit, Bool))>> = Class_1667391161668_117<Option<Range<UInt8>>, Option<(Option<Array<Float64>>, Int64, Array<Bool>, (Unit, Bool))>>()
public var var_1667391161668_268 : Range<Int32> = ((Int32(31)&127)..=(Int32(-122)&127):((Int64(UInt64(UInt64(25)))|1)))
public var var_1667391161668_343 : Int32 = Int32(-125)
let var_1667391161668_390 : UInt8 = UInt8(133)
var var_1667391161668_405 : UInt8 = UInt8(UInt8(Int8(-57)))
public var var_1667391161668_410 : Int64 = Int64(UInt16(UInt8(Int8(Int8(56)))))
public var var_1667391161668_468 : (Unit, Bool) = ((), (###"sp3[K/0gOo"### is Interface_1667391161668_120<Array<Bool>>))
var var_1667391161668_569 : ??(Option<Array<Float64>>, Int64, Array<Bool>, (Unit, Bool)) = Option<Option<(Option<Array<Float64>>, Int64, Array<Bool>, (Unit, Bool))>>.None
var var_1667391161668_648 : Option<Option<Array<Float64>>> = (() as Option<Array<Float64>>)
public let var_1667391161668_655 : Array<Bool> = [false, true, false, true, true, true, true, false, true, false]
let var_1667391161668_729 : Option<Range<Int64>> = Option<Range<Int64>>.None
public var var_1667391161668_812 : Int8 = Int8(Int8(UInt8(Int8(UInt8(181)))))
public var var_1667391161668_911 : Float64 = 125.0
public var var_1667391161668_965 : Interface_1667391161668_121 = Class_1667391161668_117<Option<Range<UInt8>>, Option<(Option<Array<Float64>>, Int64, Array<Bool>, (Unit, Bool))>>()
public var var_1667391161668_1063 : (Range<UInt16>, Array<Float64>, Range<UInt64>, Array<Float64>, Range<Int32>) = (((UInt16(158)&127)..(UInt16(177)&127):((Int64(UInt8(UInt8(202)))|1))), [Float64(Float32(109.0)), Float64(Float32(Float32(111.0))), 62.0, 62.0, (-57.0), Float64(Float64((-70.0))), Float64(Float64((-66.0))), (-22.0), 68.0, 21.0], ((UInt64(65)&127)..(UInt64(173)&127):((-32)|1)), [(-33.0), 114.0, 103.0, 53.0, (-14.0), 108.0, 17.0, 63.0, 39.0, (-110.0)], ((Int32(-6)&127)..(Int32(99)&127):(19|1)))
public var var_1667391161668_1156 : Int16 = Int16(90)
public interface Interface_1667391161668_121 {

}

public interface Interface_1667391161668_120<T0> <: Interface_1667391161668_121 {

}

public interface Interface_1667391161668_122<T0, T1> <: Interface_1667391161668_120<Array<Bool>> {

}

public open class Class_1667391161668_117<T0, T1> <: Interface_1667391161668_120<Array<Bool>> & Interface_1667391161668_122<Unit, Array<Float64>> {
    public init() { // block id: 119

    }
;
    public let var_1667391161668_265 : Bool = false;
    let var_1667391161668_735 : (Option<Array<Float64>>, Int64, Array<Bool>, (Unit, Bool)) = (Option<Array<Float64>>.None, (-78), [true, false, false, false, true, true, true, true, false, true], ((), true));
    public init(namedParam_1667391161668_127 ! : Int16, optionalParam_1667391161668_128 ! : Int32 = Int32(-84), optionalParam_1667391161668_130 ! : Range<Int64> = ((122&127)..(Int64(UInt64(173))&127):((Int64(UInt8(10))|1))), optionalParam_1667391161668_137 ! : Range<UInt8> = ((UInt8(209)&127)..=(UInt8(UInt8(10))&127):((Int64(Int8(UInt8(188)))|1)))) { // block id: 145
        let var_1667391161668_372 : (Float32) -> Option<Range<UInt8>> = { lambdaParameter_1667391161668_375 : Float32 => (Float32(Float32(-19.0)) as Range<UInt8>) };
        var var_1667391161668_381 : Float32 = Float32(Float32(60.0));
        var var_1667391161668_393 : Int64 = (-76);
        var var_1667391161668_396 : Range<UInt8> = ((UInt8(211)&127)..=(UInt8(UInt8(50))&127):(((-92)|1)));
        if (if (var_1667391161668_87) { [var_1667391161668_87, true, var_1667391161668_87, var_1667391161668_87, var_1667391161668_87, false, var_1667391161668_87, var_1667391161668_87, var_1667391161668_87, var_1667391161668_87] } else { [false, false, false, true, true, false, true, true, true, false] } [5]) { ((var_1667391161668_381|>var_1667391161668_372) ?? [((UInt8(130)&127)..(var_1667391161668_390&127):((var_1667391161668_393|1))), var_1667391161668_396, ((var_1667391161668_390&127)..=(var_1667391161668_405&127):((var_1667391161668_410|1))), var_1667391161668_396, ((UInt8(143)&127)..(var_1667391161668_390&127):((var_1667391161668_393|1))), ((UInt8(33)&127)..(var_1667391161668_390&127):((var_1667391161668_393|1))), ((UInt8(196)&127)..(UInt8(144)&127):(6|1)), ((UInt8(46)&127)..(UInt8(197)&127):(((-32)|1))), var_1667391161668_396, ((var_1667391161668_390&127)..=(var_1667391161668_405&127):((var_1667391161668_393|1)))][0]) } else { try { // block id: 437
            var_1667391161668_218;
            if (var_1667391161668_87) { ((UInt8(18)&127)..=(var_1667391161668_390&127):((var_1667391161668_393|1))) } else { ((UInt8(141)&127)..=(UInt8(154)&127):(78|1)) } 
        } catch (_) { // block id: 446
            Int32(10) - var_1667391161668_343;
            ((UInt8(75)&127)..=(UInt8(250)&127):((63|1)))
        } } ;
        let var_1667391161668_905 : UInt16 = UInt16(177);
        let var_1667391161668_915 : Float64 = (-51.0);
        (func_1667391161668_462(var_1667391161668_905) ?? [(-116.0), 83.0, var_1667391161668_911, var_1667391161668_911, var_1667391161668_915, var_1667391161668_915, var_1667391161668_915, (-104.0), 72.0, var_1667391161668_915])[3]
    }
;
    public let var_1667391161668_1103 : (Range<Int16>, UInt64, Float32, (Unit, Bool), Option<Option<Array<Float64>>>, Rune, (Range<UInt16>, Array<Float64>, Range<UInt64>, Array<Float64>, Range<Int32>), Array<Bool>) = (((Int16(-64)&127)..(Int16(86)&127):((126|1))), UInt64(224), Float32(54.0), ((), false), Option<Option<Array<Float64>>>.None, r'a', (((UInt16(175)&127)..(UInt16(26)&127):((64|1))), [(-109.0), 18.0, (-103.0), 67.0, (-10.0), 43.0, (-102.0), 63.0, 74.0, (-24.0)], ((UInt64(219)&127)..=(UInt64(127)&127):(105|1)), [35.0, 45.0, (-38.0), 1.0, 114.0, (-15.0), (-4.0), (-78.0), (-102.0), (-58.0)], ((Int32(14)&127)..(Int32(-43)&127):(((-108)|1)))), [true, false, false, true, false, false, false, true, true, false]);
    public var var_1667391161668_1188 : Int16 = Int16(59)
}


func func_1667391161668_170(param_1667391161668_171 : Float32) : Option<Range<UInt8>> { // block id: 172
    var var_1667391161668_233 : Int32 = Int32(UInt32(215));
    match (var_1667391161668_177) {
        case _ => 
            var var_1667391161668_202 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
            var_1667391161668_202
        
        case caseVar_1667391161668_206 => 
            var_1667391161668_209;
            let var_1667391161668_226 : Unit = ();
            [(), (), var_1667391161668_218, (), (), var_1667391161668_218, var_1667391161668_218, var_1667391161668_218, var_1667391161668_226, ()]
        
        case _ => 
            var_1667391161668_233 += Int32(47);
            var var_1667391161668_239 : UInt32 = UInt32(Int16(UInt16(Int16(-111))));
            var_1667391161668_239 %= ((UInt32(52)) | 1);
            var_1667391161668_246
        
    }[7];
    var var_1667391161668_281 : (UInt8, (Range<UInt16>, Array<Float64>, Range<UInt64>, Array<Float64>, Range<Int32>), Range<Int64>, Range<Int32>, Float32, Float64) = (UInt8(172), (((UInt16(182)&127)..=(UInt16(30)&127):(60|1)), [Float64((-26.0)), (-54.0), Float64((-76.0)), (-15.0), 80.0, Float64(Float32(-120.0)), 50.0, Float64(Float32(-16.0)), Float64(79.0), Float64(26.0)], ((UInt64(64)&127)..=(UInt64(127)&127):(69|1)), [(-90.0), 5.0, Float64(42.0), Float64(Float32(19.0)), Float64((-81.0)), Float64(Float32(24.0)), 41.0, Float64(46.0), (-23.0), (-90.0)], ((Int32(-112)&127)..=(Int32(28)&127):((110|1)))), (((-68)&127)..=(66&127):(((-91)|1))), ((Int32(Int8(UInt8(145)))&127)..=(Int32(-48)&127):((Int64(UInt64(UInt64(192)))|1))), Float32(Float32(71.0)), 20.0);
    if ((var_1667391161668_262.var_1667391161668_265)) { var_1667391161668_268 } else { var_1667391161668_281[1][4] } ;
    let var_1667391161668_368 : Option<Range<UInt8>> = ([UInt64(10), UInt64(162), UInt64(54), UInt64(234), UInt64(78), UInt64(211), UInt64(114), UInt64(245), UInt64(56), UInt64(46)] as Range<UInt8>);
    match (var_1667391161668_343) {
        case _ : Range<Int8> => 
            ();
            var_1667391161668_218;
            let var_1667391161668_353 : Option<Range<UInt8>> = ("O;Bl`0ueLj" as Range<UInt8>);
            if (var_1667391161668_87) { var_1667391161668_353 } else { var_1667391161668_353 } 
        
        case _ => 
            let var_1667391161668_360 : String = "h/>]T[/1Ho";
            var_1667391161668_360;
            var var_1667391161668_364 : UInt8 = UInt8(53);
            var_1667391161668_364 *= var_1667391161668_364;
            var_1667391161668_368
        
    }
}





func func_1667391161668_575(param_1667391161668_576 : Array<Range<UInt8>>) : (Option<Array<Float64>>, Int64, Array<Bool>, (Unit, Bool)) { // block id: 577
    var var_1667391161668_579 : (Option<Array<Float64>>, Int64, Array<Bool>, (Unit, Bool)) = (Option<Array<Float64>>.Some([(-82.0), (-105.0), Float64((-119.0)), Float64(Float32(-80.0)), Float64(Float32(-90.0)), Float64((-4.0)), Float64((-9.0)), 15.0, Float64(Float32(-105.0)), 49.0]), Int64(UInt8(245)), [true, true, true, ((-31) is Option<Array<Float64>>), true, ("nTbeT-nyYK" is Range<UInt64>), true, ((UInt8(175), (((UInt16(1)&127)..=(UInt16(69)&127):((-113)|1)), [67.0, 31.0, 42.0, (-49.0), 118.0, 19.0, (-35.0), 76.0, (-23.0), 76.0], ((UInt64(182)&127)..(UInt64(36)&127):(((-53)|1))), [77.0, 37.0, 21.0, (-109.0), (-69.0), (-44.0), (-79.0), 31.0, 109.0, (-53.0)], ((Int32(50)&127)..=(Int32(-7)&127):(71|1))), (((-31)&127)..((-30)&127):((-59)|1)), ((Int32(-89)&127)..=(Int32(-126)&127):((3|1))), Float32(58.0), 42.0) is Float64), true, true], ((), (UInt8(Int8(-112)) is Array<UInt64>)));
    var_1667391161668_579
}


public func func_1667391161668_462(param_1667391161668_463 : UInt16) : Option<Array<Float64>> { // block id: 464
    var_1667391161668_468[0];
    var var_1667391161668_485 : Option<Option<Array<Float64>>> = Option<Option<Array<Float64>>>.Some(("""
[%<C2
K/on~
""" as Array<Float64>));
    let var_1667391161668_689 : (Option<Array<Float64>>, Int64, Array<Bool>, (Unit, Bool)) = (Option<Array<Float64>>.None, 18, [false, true, true, true, true, true, false, true, false, false], ((), false));
    func func_1667391161668_493<T0, T1>(namedParam_1667391161668_494 ! : Interface_1667391161668_122<Unit, Array<Float64>>, namedParam_1667391161668_495 ! : Unit, namedParam_1667391161668_496 ! : Range<Int64>, optionalParam_1667391161668_497 ! : (Range<UInt16>, Array<Float64>, Range<UInt64>, Array<Float64>, Range<Int32>) = (((UInt16(Int8(UInt8(40)))&127)..(UInt16(9)&127):((Int64(UInt16(UInt8(87)))|1))), [Float64(Float32(Float32(-57.0))), (-81.0), (-85.0), Float64(Float32(Float32(11.0))), Float64(Float64(30.0)), Float64((-20.0)), (-38.0), 73.0, Float64(Float32(103.0)), (-37.0)], ((UInt64(103)&127)..(UInt64(81)&127):(36|1)), [42.0, Float64(Float32(86.0)), Float64((-29.0)), Float64(Float64(86.0)), 23.0, Float64(Float32(46.0)), Float64(Float32(Float32(-125.0))), Float64(53.0), 51.0, Float64(Float32(Float32(85.0)))], ((Int32(Int8(75))&127)..(Int32(-36)&127):(((-117)|1))))) : (Option<Array<Float64>>, Int64, Array<Bool>, (Unit, Bool)) { // block id: 553
        let var_1667391161668_668 : Float64 = Float64(Float64(0.0));
        let var_1667391161668_702 : Array<Range<UInt8>> = [((UInt8(51)&127)..(UInt8(180)&127):((-31)|1)), ((UInt8(90)&127)..(UInt8(15)&127):((-122)|1)), ((UInt8(81)&127)..(UInt8(76)&127):(49|1)), ((UInt8(253)&127)..=(UInt8(109)&127):(42|1)), ((UInt8(187)&127)..=(UInt8(212)&127):((-104)|1)), ((UInt8(95)&127)..(UInt8(63)&127):((-45)|1)), ((UInt8(20)&127)..(UInt8(143)&127):(53|1)), ((UInt8(25)&127)..=(UInt8(66)&127):(114|1)), ((UInt8(202)&127)..(UInt8(186)&127):((-42)|1)), ((UInt8(146)&127)..=(UInt8(79)&127):(119|1))];
        let var_1667391161668_713 : (Option<Array<Float64>>, Int64, Array<Bool>, (Unit, Bool)) = ((UInt32(186) as Array<Float64>), (-7), [true, false, false, false, true, true, false, false, false, false], ((), true));
        var var_1667391161668_772 : Range<UInt8> = ((UInt8(238)&127)..=(UInt8(124)&127):((-6)|1));
        var var_1667391161668_820 : Array<Range<UInt8>> = [((UInt8(UInt8(88))&127)..(UInt8(215)&127):((Int64(UInt16(UInt8(182)))|1))), ((UInt8(234)&127)..(UInt8(209)&127):((-59)|1)), ((UInt8(Int8(UInt8(3)))&127)..=(UInt8(Int8(UInt8(7)))&127):(((-67)|1))), ((UInt8(233)&127)..=(UInt8(186)&127):(121|1)), ((UInt8(UInt8(Int8(68)))&127)..=(UInt8(Int8(-34))&127):((Int64(101)|1))), ((UInt8(229)&127)..=(UInt8(200)&127):((-124)|1)), ((UInt8(Int8(5))&127)..(UInt8(UInt8(Int8(-4)))&127):((79|1))), ((UInt8(Int8(41))&127)..=(UInt8(135)&127):((Int64(UInt16(171))|1))), ((UInt8(74)&127)..(UInt8(Int8(-64))&127):((79|1))), ((UInt8(61)&127)..(UInt8(131)&127):((-1)|1))];
        (if ((Float32(-58.0) <= Float32(38.0))) { (var_1667391161668_569 ?? Option<(Option<Array<Float64>>, Int64, Array<Bool>, (Unit, Bool))>.None) } else { (Option<Option<Array<Float64>>>.None as (Option<Array<Float64>>, Int64, Array<Bool>, (Unit, Bool))) }  ?? (match (var_1667391161668_689) {
            case (_,caseVar_1667391161668_757 : UInt8,_,_ : Array<Range<UInt8>>) => 
                let var_1667391161668_775 : Range<UInt8> = ((UInt8(UInt8(141))&127)..(UInt8(250)&127):((Int64(UInt64(49))|1)));
                let var_1667391161668_788 : UInt8 = UInt8(211);
                if (false) { [((UInt8(249)&127)..(UInt8(26)&127):(((-6)|1))), ((UInt8(124)&127)..=(var_1667391161668_405&127):(((-70)|1))), ((UInt8(130)&127)..=(UInt8(142)&127):((-83)|1)), var_1667391161668_772, var_1667391161668_775, ((UInt8(138)&127)..(var_1667391161668_405&127):(((-96)|1))), ((var_1667391161668_788&127)..(UInt8(129)&127):((var_1667391161668_410|1))), var_1667391161668_775, ((UInt8(24)&127)..=(var_1667391161668_390&127):((103|1))), var_1667391161668_775] } else { [((UInt8(223)&127)..=(UInt8(100)&127):((-69)|1)), ((UInt8(227)&127)..(UInt8(17)&127):((-58)|1)), ((UInt8(42)&127)..=(UInt8(19)&127):(121|1)), ((UInt8(161)&127)..=(UInt8(114)&127):(121|1)), ((UInt8(229)&127)..(UInt8(85)&127):((-17)|1)), ((UInt8(104)&127)..(UInt8(36)&127):((-65)|1)), ((UInt8(110)&127)..(UInt8(33)&127):((-85)|1)), ((UInt8(72)&127)..=(UInt8(26)&127):(76|1)), ((UInt8(159)&127)..(UInt8(233)&127):((-40)|1)), ((UInt8(116)&127)..=(UInt8(119)&127):((-7)|1))] } 
            
            case (_ : Option<Range<Int64>>,caseVar_1667391161668_801,caseVar_1667391161668_802,_) => 
                [((UInt8(200)&127)..(UInt8(149)&127):((-67)|1)), ((UInt8(196)&127)..(UInt8(7)&127):((-45)|1)), ((UInt8(16)&127)..(UInt8(216)&127):(66|1)), ((UInt8(86)&127)..(UInt8(85)&127):((-79)|1)), ((UInt8(116)&127)..=(UInt8(223)&127):((-53)|1)), ((UInt8(149)&127)..(UInt8(41)&127):((-44)|1)), ((UInt8(219)&127)..(UInt8(214)&127):((-105)|1)), ((UInt8(223)&127)..=(UInt8(155)&127):(3|1)), ((UInt8(80)&127)..=(UInt8(39)&127):((-51)|1)), ((UInt8(163)&127)..(UInt8(176)&127):(24|1))]
            
            case (_,caseVar_1667391161668_807 : Int16,_,_) => 
                ();
                var_1667391161668_812 %= ((var_1667391161668_209) | 1);
                var_1667391161668_820
            
            case (_,caseVar_1667391161668_869 : Option<Range<Int64>>,_ : Int8,caseVar_1667391161668_870 : Array<Range<UInt8>>) => 
                var_1667391161668_702
            
            case _ => 
                Int16(94);
                if (true) { var_1667391161668_820 } else { [var_1667391161668_772, ((UInt8(249)&127)..(UInt8(3)&127):((-108)|1)), ((UInt8(208)&127)..=(UInt8(25)&127):((-22)|1)), ((UInt8(169)&127)..=(UInt8(66)&127):((-78)|1)), ((UInt8(39)&127)..(var_1667391161668_390&127):(((-90)|1))), ((UInt8(185)&127)..(UInt8(44)&127):((var_1667391161668_410|1))), var_1667391161668_772, ((UInt8(114)&127)..=(UInt8(102)&127):((-9)|1)), ((UInt8(7)&127)..=(UInt8(42)&127):((-70)|1)), ((UInt8(169)&127)..=(UInt8(34)&127):(88|1))] } 
            
        }|>{ lambdaParameter_1667391161668_639 : Array<Range<UInt8>> => try { // block id: 642
            let var_1667391161668_676 : Float64 = Float64(Float32(-35.0));
            if (var_1667391161668_87) { // block id: 645
                var_1667391161668_218;
                var_1667391161668_648;
                (Option<Array<Float64>>.None, var_1667391161668_410, var_1667391161668_655, ((), var_1667391161668_87))
            } else if (false) { // block id: 661
                (Option<Array<Float64>>.Some([86.0, 126.0, var_1667391161668_668, var_1667391161668_668, (-22.0), 7.0, var_1667391161668_676, var_1667391161668_676, 43.0, (-3.0)]), (-121), var_1667391161668_655, ((), true))
            } else { // block id: 687
                var_1667391161668_689
            }
        } catch (e: Exception) { // block id: 697
            let var_1667391161668_709 : Unit = ();
            (var_1667391161668_702, ((var_1667391161668_209&127)..=(Int8(65)&127):((14|1))), var_1667391161668_709)[2];
            var_1667391161668_713
        } finally { // block id: 722
            (var_1667391161668_729 ?? ((71&127)..(49&127):(105|1)));
            var_1667391161668_262.var_1667391161668_735
        } }))
    }
;
    let var_1667391161668_897 : Interface_1667391161668_122<Unit, Array<Float64>> = Class_1667391161668_117<Option<Range<UInt8>>, Option<(Option<Array<Float64>>, Int64, Array<Bool>, (Unit, Bool))>>();
    let var_1667391161668_901 : Range<Int64> = (((-12)&127)..((-31)&127):(118|1));
    (if (true) { Option<Option<Array<Float64>>>.None } else { (if (false) { var_1667391161668_485 } else { Option<Option<Array<Float64>>>.None } ) }  ?? func_1667391161668_493<Range<UInt16>, String>(namedParam_1667391161668_494 : var_1667391161668_897, namedParam_1667391161668_495 : (), namedParam_1667391161668_496 : var_1667391161668_901)[0])
}

public func func_1667391161668_23<T0>(param_1667391161668_24 : Float64) : Int32 { // block id: 25
    let var_1667391161668_45 : (Float32, Range<UInt32>, UInt8, Array<UInt64>, UInt8, Range<UInt8>, Range<UInt32>) = (Float32(Float32(-99.0)), ((UInt32(82)&127)..=(UInt32(210)&127):((-15)|1)), UInt8(49), [UInt64(67), UInt64(7), UInt64(105), UInt64(Int32(Int32(-16))), UInt64(Int32(Int32(-111))), UInt64(UInt8(Int8(122))), UInt64(UInt8(Int8(86))), UInt64(UInt8(UInt8(82))), UInt64(UInt16(70)), UInt64(191)], UInt8(0), ((UInt8(Int8(-52))&127)..(UInt8(97)&127):((Int64(UInt64(0))|1))), ((UInt32(251)&127)..(UInt32(189)&127):((-43)|1)));
    var var_1667391161668_102 : Int16 = Int16(81);
    if (true) { // block id: 28
        [27.0, (-12.0), 115.0, (-114.0), 38.0, (-111.0), 107.0, (-72.0), 55.0, 42.0][4];
        var_1667391161668_45[4];
        Int16(UInt16(52))
    } else { // block id: 84
        let var_1667391161668_98 : UInt64 = UInt64(58);
        let var_1667391161668_107 : Float64 = (-63.0);
        let var_1667391161668_110 : Unit = ();
        if (var_1667391161668_87) { // block id: 89
            -Int16(31)
        } else if (true) { // block id: 93
            r'I';
            ((UInt64(226)&127)..(var_1667391161668_98&127):((53|1)));
            var_1667391161668_102
        } else { // block id: 104
            -var_1667391161668_107;
            var_1667391161668_110;
            Int16(-90)
        }
    };
    let var_1667391161668_124 : Class_1667391161668_117<Option<Range<UInt8>>, Option<(Option<Array<Float64>>, Int64, Array<Bool>, (Unit, Bool))>> = Class_1667391161668_117<Option<Range<UInt8>>, Option<(Option<Array<Float64>>, Int64, Array<Bool>, (Unit, Bool))>>(namedParam_1667391161668_127 : Int16(Int16(-99)), optionalParam_1667391161668_137 : ((UInt8(199)&127)..(UInt8(0)&127):(126|1)));
    var var_1667391161668_948 : Int32 = Int32(64);
    var var_1667391161668_951 : Rune = r'P';
    let var_1667391161668_954 : (Range<Int8>, Int32, Rune) = (((Int8(-116)&127)..=(Int8(-40)&127):(68|1)), Int32(Int16(Int16(40))), r'B');
    let var_1667391161668_982 : (Range<Int8>, Int32, Rune) = (((Int8(-18)&127)..=(Int8(Int8(UInt8(253)))&127):((Int64(UInt64(Int16(-122)))|1))), Int32(UInt16(230)), r'm');
    if (var_1667391161668_124.var_1667391161668_265) { // block id: 927
        let var_1667391161668_929 : (Range<Int8>, Int32, Rune) = (((Int8(-1)&127)..=(Int8(59)&127):((-85)|1)), Int32(Int16(22)), r'5');
        var_1667391161668_929
    } else if (var_1667391161668_87) { // block id: 936
        var_1667391161668_410 |= var_1667391161668_410;
        if (var_1667391161668_87) { (((var_1667391161668_812&127)..(var_1667391161668_209&127):((48|1))), var_1667391161668_948, var_1667391161668_951) } else { var_1667391161668_954 } 
    } else { // block id: 961
        if (false) { var_1667391161668_965 } else { var_1667391161668_965 } ;
        var var_1667391161668_971 : Range<Int8> = ((Int8(Int8(Int8(Int8(10))))&127)..(Int8(UInt8(26))&127):(((-77)|1)));
        ([((UInt8(210)&127)..=(UInt8(186)&127):(73|1)), ((UInt8(94)&127)..=(UInt8(102)&127):(71|1)), ((UInt8(244)&127)..=(UInt8(193)&127):((-86)|1)), ((UInt8(115)&127)..(UInt8(99)&127):((-59)|1)), ((UInt8(237)&127)..=(UInt8(252)&127):(55|1)), ((UInt8(223)&127)..=(UInt8(183)&127):((-80)|1)), ((UInt8(185)&127)..(UInt8(226)&127):(44|1)), ((UInt8(122)&127)..=(UInt8(245)&127):((-111)|1)), ((UInt8(9)&127)..(UInt8(147)&127):((-82)|1)), ((UInt8(115)&127)..=(UInt8(240)&127):(27|1))], var_1667391161668_971, ());
        var_1667391161668_982
    }[1]
}


main(): Int64 {
    try {
        let var_1667391161668_1194 : (Array<UInt64>, Option<Option<Array<Float64>>>, Range<Int8>) = ([UInt64(163), UInt64(UInt8(162)), UInt64(200), UInt64(Int8(Int8(42))), UInt64(Int32(Int32(117))), UInt64(236), UInt64(UInt64(230)), UInt64(Int8(UInt8(108))), UInt64(UInt8(68)), UInt64(186)], Option<Option<Array<Float64>>>.Some((Option<Array<Float64>>.None as Array<Float64>)), ((Int8(89)&127)..(Int8(-57)&127):((-19)|1)));
        func func_1667391161668_8() : Unit { // block id: 9
            let var_1667391161668_20 : Unit = ();
            let var_1667391161668_1004 : ?Bool = Option<Bool>.None;
            let var_1667391161668_1010 : UInt16 = UInt16(67);
            func func_1667391161668_11(param_1667391161668_12 : Unit, namedParam_1667391161668_13 ! : String, optionalParam_1667391161668_14 ! : UInt16 = UInt16(106), optionalParam_1667391161668_16 ! : Rune = r'p') : Int32 { // block id: 18
                var_1667391161668_20;
                if ((var_1667391161668_1004 ?? var_1667391161668_87)) { // block id: 1007
                    ((var_1667391161668_1010&127)..(UInt16(67)&127):((var_1667391161668_410|1)));
                    ();
                    var_1667391161668_911
                } else if ((-120.0) <= (-80.0)) { // block id: 1019
                    Option<Range<Int64>>.None;
                    121.0
                } else { // block id: 1022
                    (-59.0) - var_1667391161668_911
                }|>func_1667391161668_23<Option<(Option<Array<Float64>>, Int64, Array<Bool>, (Unit, Bool))>>
            }
;
            var loopTimeVar_1667391161668_1048 : Int64 = 0;
            func_1667391161668_11(while ((try { // block id: 1028
                var var_1667391161668_1030 : Bool = false;
                var_1667391161668_1030
            } finally { // block id: 1032
                UInt32(127);
                [9.0, (-128.0), 68.0, (-121.0), var_1667391161668_911, var_1667391161668_911, var_1667391161668_911, var_1667391161668_911, (-25.0), 94.0];
                false
            }) && loopTimeVar_1667391161668_1048 < 100 ) {
                loopTimeVar_1667391161668_1048++;

            }, namedParam_1667391161668_13 : ["aFYoJA%MwT", "NJ/> 7 }y|", "tZm.4=8_z(", "m&j2=~:%k5", "FdEWy[1FX\"", "tYs2Ye'oC+", "aeAqt0kx/'", """
<(}O[
^k-:r
""", """
Q5QFZ
*TF0V
""", "1Q+pC0#X@a"][8], optionalParam_1667391161668_14 : if (false) { // block id: 1055
                Class_1667391161668_117<Option<Range<UInt8>>, Option<(Option<Array<Float64>>, Int64, Array<Bool>, (Unit, Bool))>>(namedParam_1667391161668_127 : Int16(-42), optionalParam_1667391161668_128 : var_1667391161668_343, optionalParam_1667391161668_137 : ((UInt8(89)&127)..(UInt8(99)&127):((-91)|1)));
                var_1667391161668_1010
            } else { // block id: 1061
                var_1667391161668_1063;
                let var_1667391161668_1093 : UInt16 = UInt16(Int8(Int8(-109)));
                var_1667391161668_1093
            });
            match (var_1667391161668_262.var_1667391161668_1103[4]) {
                case caseVar_1667391161668_1152 => 
                    var_1667391161668_1156 |= var_1667391161668_1156;
                    ()
                
                case caseVar_1667391161668_1162 : Range<UInt64> => 
                    Option<Option<Array<Float64>>>.Some(Option<Array<Float64>>.None);
                    var_1667391161668_410;
                    var_1667391161668_812 %= ((var_1667391161668_812) | 1)
                
                case _ : Option<Range<Int64>> => 
                    var_1667391161668_218
                
                case _ => 
                    ();
                    ();
                    var_1667391161668_20
                
                case _ => 
                    var_1667391161668_20;
                    ()
                
            };
            var_1667391161668_262.var_1667391161668_1188 |= match (var_1667391161668_1194[1]) {
                case _ => 
                    Int16(104)
                
                case _ => 
                    var_1667391161668_812 >>= ((var_1667391161668_812) & 7);
                    ();
                    Int16(-89)
                
            }
        }
;
        func_1667391161668_8();
        let var_1667391161668_1235 : UInt64 = UInt64(UInt8(85));
        Int64(Int64(var_1667391161668_1235))
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var_1667391161668_1235*var_1667391161668_1235), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
