/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args 

public const var_1710847320053_21 : UInt64 = 98
public var var_1710847320053_46 : (UInt8, Bool, UInt8, Bool, Bool) = (UInt8(UInt8(Int8(43))), (match (r'O') {
    case _: Int32 => true
    case _ => false
}), UInt8(101), (match (UInt32(UInt8(Int8(-108)))) {
    case _: Float64 => true
    case _ => false
}), true)
public var var_1710847320053_82 : Struct_1710847320053_64 = Struct_1710847320053_64()
const var_1710847320053_180 : Bool = false
public var var_1710847320053_184 : String = "-c(!k!t@K8"
const var_1710847320053_282 : UInt16 = 172
public var var_1710847320053_294 : Byte = UInt8(61)
public var var_1710847320053_307 : (Int8, Int64, UInt64, Float64, ((Unit, Unit, Int64, Float32, UInt16, Int32), UInt16, Option<(UInt8, Bool, UInt8, Bool, Bool)>, (UInt8, UInt64, Int32, Bool, Bool, Unit, UInt16, Int16), Range<Int32>), Range<Int16>, Range<Int64>, Array<UInt64>) = (Int8(UInt8(UInt8(123))), Int64(UInt16(82)), UInt64(Int8(86)), Float64(Float64(-37.0)), (((), (), Int64(-72), Float32(63.0), UInt16(UInt8(168)), Int32(UInt16(218))), UInt16(191), (match (((UInt8(UInt8(25))&127)..(UInt8(UInt8(63))&127):(Int64(72)|1))) {
    case newVar: (UInt8, Bool, UInt8, Bool, Bool) => Option<(UInt8, Bool, UInt8, Bool, Bool)>.Some(newVar)
    case _ => Option<(UInt8, Bool, UInt8, Bool, Bool)>.None
}), (UInt8(UInt8(46)), UInt64(UInt32(189)), Int32(-127), (match ((UInt8(216), false, UInt8(32), false, true)) {
    case _: Range<Int64> => true
    case _ => false
}), (match (UInt8(216)) {
    case _: Bool => true
    case _ => false
}), (), UInt16(82), Int16(UInt16(194))), ((Int32(Int32(104))&127)..(Int32(Int32(0))&127):(Int64(1)|1))), ((Int16(Int16(-85))&127)..=(Int16(Int16(UInt16(24)))&127):(Int64(UInt16(245))|1)), ((Int64(Int64(120))&127)..(Int64(Int64(101))&127):(Int64(-113)|1)), [UInt64(241), UInt64(67), UInt64(33), UInt64(238), UInt64(226), UInt64(150), UInt64(126), UInt64(76), UInt64(118), UInt64(114)])
public var var_1710847320053_363 : ((UInt8, UInt64, Int32, Bool, Bool, Unit, UInt16, Int16), Range<Int16>, Range<Int16>, Array<UInt64>) = ((UInt8(132), UInt64(122), Int32(-111), true, (match ("I${var_1710847320053_184}975st${var_1710847320053_184}h${var_1710847320053_184}An>${var_1710847320053_184}") {
    case _: Range<Int32> => true
    case _ => false
}), (), UInt16(Int8(-80)), Int16(UInt8(111))), ((Int16(Int16(UInt16(55)))&127)..=(Int16(Int16(-103))&127):(Int64(-46)|1)), ((Int16(Int16(44))&127)..(Int16(Int16(115))&127):(Int64(-87)|1)), [UInt64(178), UInt64(41), UInt64(10), UInt64(50), UInt64(148), UInt64(201), UInt64(120), UInt64(20), UInt64(223), UInt64(176)])
public const var_1710847320053_386 : Int = -124
var var_1710847320053_391 : Unit = ()
public const var_1710847320053_418 : Float64 = 43.0
public const var_1710847320053_423 : Int16 = 43
public const var_1710847320053_428 : Int8 = -12
public var var_1710847320053_464 : Range<Int32> = ((Int32(Int32(103))&127)..=(Int32(Int32(-77))&127):(Int64(126)|1))
public let var_1710847320053_484 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
var var_1710847320053_503 : (UInt32, UInt32, Option<Int64>, Range<UInt16>, Range<Int32>, Array<UInt64>, Option<(Int8, Int64, UInt64, Float64, ((Unit, Unit, Int64, Float32, UInt16, Int32), UInt16, Option<(UInt8, Bool, UInt8, Bool, Bool)>, (UInt8, UInt64, Int32, Bool, Bool, Unit, UInt16, Int16), Range<Int32>), Range<Int16>, Range<Int64>, Array<UInt64>)>) = (UInt32(UInt32(245)), UInt32(142), Option<Int64>.None, ((UInt16(UInt16(205))&127)..(UInt16(UInt16(Int16(63)))&127):(Int64(81)|1)), ((Int32(Int32(-69))&127)..=(Int32(Int32(-72))&127):(Int64(-104)|1)), [UInt64(UInt32(Int32(5))), UInt64(UInt16(237)), UInt64(25), UInt64(225), UInt64(184), UInt64(Int64(119)), UInt64(117), UInt64(UInt64(UInt8(177))), UInt64(222), UInt64(Int32(-54))], (match (((Int32(Int32(-114))&127)..(Int32(Int32(-128))&127):(Int64(-94)|1))) {
    case newVar: (Int8, Int64, UInt64, Float64, ((Unit, Unit, Int64, Float32, UInt16, Int32), UInt16, Option<(UInt8, Bool, UInt8, Bool, Bool)>, (UInt8, UInt64, Int32, Bool, Bool, Unit, UInt16, Int16), Range<Int32>), Range<Int16>, Range<Int64>, Array<UInt64>) => Option<(Int8, Int64, UInt64, Float64, ((Unit, Unit, Int64, Float32, UInt16, Int32), UInt16, Option<(UInt8, Bool, UInt8, Bool, Bool)>, (UInt8, UInt64, Int32, Bool, Bool, Unit, UInt16, Int16), Range<Int32>), Range<Int16>, Range<Int64>, Array<UInt64>)>.Some(newVar)
    case _ => Option<(Int8, Int64, UInt64, Float64, ((Unit, Unit, Int64, Float32, UInt16, Int32), UInt16, Option<(UInt8, Bool, UInt8, Bool, Bool)>, (UInt8, UInt64, Int32, Bool, Bool, Unit, UInt16, Int16), Range<Int32>), Range<Int16>, Range<Int64>, Array<UInt64>)>.None
}))
public var var_1710847320053_541 : Int32 = Int32(Int32(Int16(Int16(UInt16(152)))))
public var var_1710847320053_549 : Float32 = Float32(Float32(Float32(-6.0)))
public var var_1710847320053_617 : Float32 = Float32(-49.0)
public let var_1710847320053_623 : UInt16 = UInt16(UInt8(14))
public var var_1710847320053_655 : (UInt8, UInt64, Int32, Bool, Bool, Unit, UInt16, Int16) = (UInt8(117), UInt64(Int64(-49)), Int32(Int32(UInt8(203))), (match (UInt16(176)) {
    case _: Int16 => true
    case _ => false
}), true, (), UInt16(UInt16(Int8(Int8(-71)))), Int16(Int16(UInt16(17))))
public const var_1710847320053_693 : Float32 = 11.0
public var var_1710847320053_734 : Bool = true
public let var_1710847320053_748 : Int64 = Int64(5)
public var var_1710847320053_777 : Int16 = Int16(-16)
public let var_1710847320053_787 : UInt8 = UInt8(UInt8(159))
public var var_1710847320053_798 : Range<Int16> = ((Int16(Int16(75))&127)..(Int16(Int16(88))&127):(Int64(UInt32(182))|1))
public var var_1710847320053_903 : UInt64 = UInt64(15)
public var var_1710847320053_932 : Unit = ()
let var_1710847320053_945 : Int = Int64(Int64(Int32(Int16(8))))
public var var_1710847320053_957 : ((Unit, Unit, Int64, Float32, UInt16, Int32), UInt16, Option<(UInt8, Bool, UInt8, Bool, Bool)>, (UInt8, UInt64, Int32, Bool, Bool, Unit, UInt16, Int16), Range<Int32>) = (((), (), Int64(-44), Float32(9.0), UInt16(235), Int32(Int32(-85))), UInt16(212), (match (Enum_1710847320053_171.enumValue_1710847320053_970((((), (), Int64(-126), Float32(-68.0), UInt16(125), Int32(122)), UInt16(138), Option<(UInt8, Bool, UInt8, Bool, Bool)>.None, (UInt8(150), UInt64(200), Int32(69), false, false, (), UInt16(125), Int16(-51)), ((Int32(Int32(-77))&127)..(Int32(Int32(37))&127):(Int64(-107)|1))), "sc@\\r,=6G[", Int64(UInt16(190)))) {
    case newVar: (UInt8, Bool, UInt8, Bool, Bool) => Option<(UInt8, Bool, UInt8, Bool, Bool)>.Some(newVar)
    case _ => Option<(UInt8, Bool, UInt8, Bool, Bool)>.None
}), (UInt8(Int8(73)), UInt64(UInt16(229)), Int32(86), true, true, (), UInt16(UInt16(60)), Int16(Int8(84))), ((Int32(Int32(-96))&127)..=(Int32(Int32(19))&127):(Int64(-100)|1)))
public var var_1710847320053_1039 : (Unit, Unit, Int64, Float32, UInt16, Int32) = ((), (), Int64(55), Float32(Float32(-33.0)), UInt16(UInt16(Int8(-19))), Int32(UInt32(114)))
public var var_1710847320053_1053 : Int8 = Int8(-108)
public var var_1710847320053_1056 : Int8 = Int8(Int8(-127))
public var var_1710847320053_1286 : Option<Range<Int32>> = (match (Enum_1710847320053_171.enumValue_1710847320053_1289) {
    case newVar: Range<Int32> => Option<Range<Int32>>.Some(newVar)
    case _ => Option<Range<Int32>>.None
})
public const var_1710847320053_1293 : Bool = true
public var var_1710847320053_1339 : UInt16 = UInt16(236)
public let var_1710847320053_1386 : Range<Int64> = ((Int64(Int64(52))&127)..(Int64(Int64(-18))&127):(Int64(32)|1))
public var var_1710847320053_1389 : Array<UInt64> = [UInt64(UInt16(UInt8(Int8(28)))), UInt64(UInt8(Int8(Int8(64)))), UInt64(UInt32(UInt32(98))), UInt64(26), UInt64(82), UInt64(1), UInt64(Int8(UInt8(UInt8(205)))), UInt64(151), UInt64(104), UInt64(48)]
public struct Struct_1710847320053_64 {
    public Struct_1710847320053_64() { // block id: 66

    }
;
    public let var_1710847320053_71 : (Unit, Unit, Int64, Float32, UInt16, Int32) = ((), (), Int64(8), Float32(81.0), UInt16(252), Int32(-76));
    public init(param_1710847320053_258 : (((UInt8, UInt64, Int32, Bool, Bool, Unit, UInt16, Int16), Range<Int16>, Range<Int16>, Array<UInt64>), ((UInt8, UInt64, Int32, Bool, Bool, Unit, UInt16, Int16), Range<Int16>, Range<Int16>, Array<UInt64>)), param_1710847320053_259 : Int64, param_1710847320053_260 : Int32) { // block id: 261
        { lambdaParameter_1710847320053_291 : UInt8 =>  }(var_1710847320053_294);
        (match (Option<(Int8, Int64, UInt64, Float64, ((Unit, Unit, Int64, Float32, UInt16, Int32), UInt16, Option<(UInt8, Bool, UInt8, Bool, Bool)>, (UInt8, UInt64, Int32, Bool, Bool, Unit, UInt16, Int16), Range<Int32>), Range<Int16>, Range<Int64>, Array<UInt64>)>.None) {
            case Some(num) => num
            case None => var_1710847320053_307
        })[4][0]
    }

}

public func func_1710847320053_26(param_1710847320053_27 : Unit) : (Unit, Unit, Int64, Float32, UInt16, Int32) { // block id: 28
    var var_1710847320053_33 : (UInt8, Bool, UInt8, Bool, Bool) = (UInt8(30), (match (UInt16(217)) {
        case _: UInt8 => true
        case _ => false
    }), UInt8(UInt8(UInt8(40))), false, false);
    var loopTimeVar_1710847320053_60 : Int = 0;
    while ((var_1710847320053_33[1]) && loopTimeVar_1710847320053_60 < 100 ) {
        loopTimeVar_1710847320053_60++;
        var_1710847320053_46
    };
    try { // block id: 62
        let var_1710847320053_68 : Struct_1710847320053_64 = Struct_1710847320053_64();
        var_1710847320053_68.var_1710847320053_71
    } catch (_) { // block id: 79
        var_1710847320053_82.var_1710847320053_71
    }
}



public enum Enum_1710847320053_171 {
    defaultValue |
    enumValue_1710847320053_394(Float64, Int64) |
    enumValue_1710847320053_970(((Unit, Unit, Int64, Float32, UInt16, Int32), UInt16, Option<(UInt8, Bool, UInt8, Bool, Bool)>, (UInt8, UInt64, Int32, Bool, Bool, Unit, UInt16, Int16), Range<Int32>), String, Int64) |
    enumValue_1710847320053_1289
}
public const func func_1710847320053_267(param_1710847320053_268 : UInt16, optionalParam_1710847320053_269 ! : Rune = r'M', namedParam_1710847320053_271 ! : String) : Unit { // block id: 272

    return
}

public const func func_1710847320053_263(param_1710847320053_264 : UInt8) : Unit { // block id: 265
    const func func_1710847320053_274(param_1710847320053_275 : UInt16) : UInt16 { // block id: 276
        const var_1710847320053_278 : Unit = ();
        var_1710847320053_278;
        ();
        var_1710847320053_282
    }
;
    func_1710847320053_267(func_1710847320053_274(71), namedParam_1710847320053_271 : "x@d|TpQ)J~");
    func_1710847320053_267(247, namedParam_1710847320053_271 : ".'8*Pr%< f")
    return
}


public const func func_1710847320053_132(param_1710847320053_403 : Int8, namedParam_1710847320053_404 ! : Int16, namedParam_1710847320053_405 ! : Int8, namedParam_1710847320053_406 ! : Int16) : Float64 { // block id: 407
    ();
    14.0;
    const func func_1710847320053_411(param_1710847320053_412 : UInt64, namedParam_1710847320053_413 ! : Float64, optionalParam_1710847320053_414 ! : Int16 = -116) : Float64 { // block id: 416
        var_1710847320053_418
    }
;
    func_1710847320053_411(203, namedParam_1710847320053_413 : var_1710847320053_418, optionalParam_1710847320053_414 : var_1710847320053_423)
}

public const func func_1710847320053_398(param_1710847320053_399 : UInt16) : Float64 { // block id: 400
    func_1710847320053_132(-57, namedParam_1710847320053_404 : 103, namedParam_1710847320053_405 : var_1710847320053_428, namedParam_1710847320053_406 : var_1710847320053_423)
}

public func func_1710847320053_174(param_1710847320053_175 : Range<UInt16>) : Enum_1710847320053_171 { // block id: 176
    if (var_1710847320053_180 || match (var_1710847320053_184) {
        case "P1a{XY(1.Z)" => 
            var var_1710847320053_190 : Range<UInt32> = ((UInt32(UInt32(163))&127)..(UInt32(UInt32(89))&127):(Int64(34)|1));
            var_1710847320053_190;
            ();
            var_1710847320053_180
        
        case caseVar_1710847320053_199 : Float64 => 
            true
        
        case "&052*1`@8o" | "rw23y!__\"l" | "tseW:\"(0YF" | """
t<-:+
i?I3!
""" => 
            var_1710847320053_180
        
        case _ => 
            var_1710847320053_180 || true
        
    }) { // block id: 212
        func func_1710847320053_214(optionalParam_1710847320053_215 ! : Range<Int64> = ((Int64(Int64(-21))&127)..(Int64(Int64(-84))&127):(Int64(7)|1)), optionalParam_1710847320053_220 ! : Unit = ()) : Unit { // block id: 222

            return
        }
;
        func_1710847320053_214();
        var loopTimeVar_1710847320053_226 : Array<UInt64> = [UInt64(102), UInt64(UInt16(UInt16(Int8(-44)))), UInt64(104), UInt64(104), UInt64(UInt32(Int32(UInt32(188)))), UInt64(UInt16(Int8(-77))), UInt64(201), UInt64(UInt8(UInt8(83))), UInt64(Int64(UInt64(114))), UInt64(Int64(Int32(-43)))];
        let iter223 = loopTimeVar_1710847320053_226.iterator()
        while (true) {
            match (iter223.next()) {
                case None => break
                case Some(v) => match (v) {
                    case i where (false) => ();
                    case _ => continue
                }
            }
        }

    };
    if (true) { // block id: 254

    } else if ((match (Struct_1710847320053_64((var_1710847320053_363, var_1710847320053_363), var_1710847320053_386, Int32(8))) {
        case _: (Int8, Int64, UInt64, Float64, ((Unit, Unit, Int64, Float32, UInt16, Int32), UInt16, Option<(UInt8, Bool, UInt8, Bool, Bool)>, (UInt8, UInt64, Int32, Bool, Bool, Unit, UInt16, Int16), Range<Int32>), Range<Int16>, Range<Int64>, Array<UInt64>) => true
        case _ => false
    })) { // block id: 389
        var_1710847320053_391
    };
    var var_1710847320053_448 : UInt16 = UInt16(243);
    var var_1710847320053_460 : Int16 = Int16(-16);
    Enum_1710847320053_171.enumValue_1710847320053_394((func_1710847320053_398(try { // block id: 433
        ();
        [var_1710847320053_21, UInt64(202), UInt64(56), UInt64(8), UInt64(247), var_1710847320053_21, UInt64(96), var_1710847320053_21, UInt64(87), var_1710847320053_21];
        var_1710847320053_448 - var_1710847320053_448
    } finally { // block id: 451
        ();
        var_1710847320053_448
    })), try { // block id: 455
        Int64(5)
    } catch (e: Exception) { // block id: 457
        var_1710847320053_460 = var_1710847320053_460 | (var_1710847320053_460);
        var_1710847320053_464;
        var_1710847320053_386
    } finally { // block id: 467
        let var_1710847320053_481 : Unit = ();
        if (var_1710847320053_180) { [(), var_1710847320053_391, (), var_1710847320053_391, var_1710847320053_391, (), (), var_1710847320053_391, (), var_1710847320053_481] } else { var_1710847320053_484 } ;
        var_1710847320053_386
    })
}



public func func_1710847320053_163(param_1710847320053_164 : Rune, optionalParam_1710847320053_165 ! : Int64 = Int64(Int16(Int8(120)))) : Range<Int64> { // block id: 169
    var var_1710847320053_498 : (Range<UInt16>) -> Enum_1710847320053_171 = func_1710847320053_174;
    match ((var_1710847320053_498(var_1710847320053_503[3]))) {
        case _ => 
            var_1710847320053_541 = var_1710847320053_541 + (Int32(-16));
            var_1710847320053_549
        
    };
    var var_1710847320053_561 : Option<Option<(UInt8, Bool, UInt8, Bool, Bool)>> = (match (UInt32(229)) {
        case newVar: Option<(UInt8, Bool, UInt8, Bool, Bool)> => Option<Option<(UInt8, Bool, UInt8, Bool, Bool)>>.Some(newVar)
        case _ => Option<Option<(UInt8, Bool, UInt8, Bool, Bool)>>.None
    });
    var var_1710847320053_611 : Bool = true;
    if (match ((match (var_1710847320053_561) {
        case Some(num) => num
        case None => Option<(UInt8, Bool, UInt8, Bool, Bool)>.Some((UInt8(64), var_1710847320053_180, UInt8(3), false, var_1710847320053_180))
    })) {
        case _ => 
            var_1710847320053_391;
            var_1710847320053_391;
            var_1710847320053_21 != UInt64(3)
        
        case _ => 
            var_1710847320053_391;
            var_1710847320053_180
        
    }) { try { // block id: 585
        ();
        ((Int8(Int8(-65))&127)..(Int8(Int8(-36))&127):(var_1710847320053_386|1))
    } finally { // block id: 591
        var var_1710847320053_594 : Int16 = Int16(UInt8(Int8(UInt8(66))));
        var_1710847320053_594 = var_1710847320053_594 * (Int16(25));
        let var_1710847320053_601 : Range<UInt32> = ((UInt32(UInt32(166))&127)..(UInt32(UInt32(185))&127):(Int64(89)|1));
        var_1710847320053_601;
        ((Int8(Int8(-61))&127)..=(Int8(Int8(71))&127):(Int64(66)|1))
    } } else { match (if (false) { // block id: 607
        Option<(Int8, Int64, UInt64, Float64, ((Unit, Unit, Int64, Float32, UInt16, Int32), UInt16, Option<(UInt8, Bool, UInt8, Bool, Bool)>, (UInt8, UInt64, Int32, Bool, Bool, Unit, UInt16, Int16), Range<Int32>), Range<Int16>, Range<Int64>, Array<UInt64>)>.None;
        Int32(-107)
    } else if (var_1710847320053_611) { // block id: 613
        var_1710847320053_549;
        var_1710847320053_617 - Float32(-27.0);
        var_1710847320053_541
    } else { // block id: 621
        var_1710847320053_623;
        Int32(-67)
    }) {
        case 14 | -29 => 
            ();
            ();
            ((Int8(var_1710847320053_428)&127)..=(Int8(Int8(89))&127):(var_1710847320053_386|1))
        
        case caseVar_1710847320053_638 : Rune => 
            ((Int64(Int64(-125))&127)..(Int64(var_1710847320053_386)&127):(var_1710847320053_386|1));
            var_1710847320053_21 % ((UInt64(191)) | 1);
            ((Int8(Int8(43))&127)..=(Int8(Int8(61))&127):(Int64(38)|1))
        
        case -13 => 
            var var_1710847320053_652 : Rune = r'k';
            var_1710847320053_652;
            var_1710847320053_655;
            let var_1710847320053_677 : Range<Int8> = ((Int8(Int8(-7))&127)..=(Int8(Int8(UInt8(70)))&127):(Int64(UInt8(UInt8(160)))|1));
            if (var_1710847320053_180) { var_1710847320053_677 } else { var_1710847320053_677 } 
        
        case _ => 
            ((Int8(Int8(23))&127)..=(Int8(Int8(-25))&127):(Int64(-18)|1));
            var_1710847320053_549 = var_1710847320053_549 - (var_1710847320053_693);
            ((Int8(Int8(118))&127)..=(Int8(Int8(-49))&127):(Int64(47)|1))
        
    } } ;
    let var_1710847320053_718 : Int = Int64(28);
    const var_1710847320053_737 : Bool = true;
    const var_1710847320053_769 : Bool = false;
    var var_1710847320053_840 : Array<Int64> = [Int64(UInt16(UInt16(Int16(5)))), Int64(UInt8(134)), Int64(UInt16(240)), Int64(UInt32(184)), Int64(Int16(Int16(UInt8(130)))), Int64(UInt64(194)), Int64(-97), Int64(41), Int64(-9), Int64(Int32(-83))];
    ((Int64(Int64((match (Option<UInt32>.None) {
        case Some(num) => num
        case None => UInt32(54)
    })))&127)..(Int64(try { // block id: 707
        Int64(-70) ^ Int64(-127)
    } catch (_) { // block id: 711
        var_1710847320053_391;
        var_1710847320053_386 ** var_1710847320053_21
    } % ((match (var_1710847320053_718) {
        case caseVar_1710847320053_722 : Array<Unit> => 
            ();
            Int64(21) * Int64(-76)
        
        case _ : Bool => 
            ();
            var_1710847320053_734 = var_1710847320053_734 && (var_1710847320053_737);
            Int64(93)
        
        case -117 | 95 | -16 | 120 => 
            var_1710847320053_391;
            var_1710847320053_391;
            var_1710847320053_718 & var_1710847320053_748
        
        case 13 => 
            var_1710847320053_391;
            Option<UInt32>.Some(UInt32(247));
            Int64(-83)
        
        case _ => 
            ();
            let var_1710847320053_782 : Array<UInt64> = [UInt64(117), UInt64(68), UInt64(171), UInt64(179), UInt64(252), UInt64(192), UInt64(59), UInt64(189), UInt64(37), UInt64(143)];
            (((UInt8(83), UInt64(147), Int32(-95), false, var_1710847320053_769, (), UInt16(246), Int16(-62)), ((Int16(Int16(-22))&127)..(Int16(Int16(-8))&127):(Int64(110)|1)), ((Int16(var_1710847320053_777)&127)..=(Int16(var_1710847320053_777)&127):(var_1710847320053_718|1)), var_1710847320053_782), ((var_1710847320053_787, var_1710847320053_21, Int32(-128), false, false, var_1710847320053_391, UInt16(75), Int16(18)), var_1710847320053_798, ((Int16(var_1710847320053_777)&127)..(Int16(Int16(71))&127):(Int64(80)|1)), [UInt64(88), UInt64(88), UInt64(80), UInt64(200), UInt64(200), var_1710847320053_21, var_1710847320053_21, UInt64(47), var_1710847320053_21, var_1710847320053_21]));
            Int64(38)
        
    }) | 1))&127):(if (var_1710847320053_180) { // block id: 823
        ((UInt16(UInt16(82))&127)..=(UInt16(UInt16(59))&127):(Int64(67)|1));
        var_1710847320053_391;
        var_1710847320053_718
    } else if (var_1710847320053_611) { // block id: 828
        var_1710847320053_391;
        var_1710847320053_391;
        var_1710847320053_748 & Int64(72)
    } else { // block id: 834
        -Int64(27)
    } % ((var_1710847320053_840[5]) | 1)|1))
}


public func func_1710847320053_132(param_1710847320053_133 : Range<Int32>) : (((UInt8, UInt64, Int32, Bool, Bool, Unit, UInt16, Int16), Range<Int16>, Range<Int16>, Array<UInt64>), ((UInt8, UInt64, Int32, Bool, Bool, Unit, UInt16, Int16), Range<Int16>, Range<Int16>, Array<UInt64>)) { // block id: 134
    const var_1710847320053_148 : Bool = true;
    let var_1710847320053_153 : UInt8 = UInt8(Int8(36));
    if ((match (Option<(UInt8, Bool, UInt8, Bool, Bool)>.Some((UInt8(204), true, UInt8(58), var_1710847320053_148, var_1710847320053_148))) {
        case Some(num) => num
        case None => (var_1710847320053_153, true, var_1710847320053_153, var_1710847320053_148, var_1710847320053_148)
    })[1]) { // block id: 161
        func_1710847320053_163(r'E', optionalParam_1710847320053_165 : var_1710847320053_386)
    } else { // block id: 866
        let var_1710847320053_879 : UInt = UInt64(Int64(Int16(UInt8(UInt8(19)))));
        if (false) { var_1710847320053_82 } else { Struct_1710847320053_64(((var_1710847320053_655, ((Int16(Int16(112))&127)..(Int16(Int16(18))&127):(Int64(-114)|1)), ((Int16(Int16(-127))&127)..(Int16(Int16(53))&127):(Int64(94)|1)), [var_1710847320053_21, var_1710847320053_879, var_1710847320053_21, UInt64(218), var_1710847320053_879, var_1710847320053_21, var_1710847320053_879, UInt64(197), var_1710847320053_21, var_1710847320053_879]), (var_1710847320053_655, var_1710847320053_798, ((Int16(Int16(120))&127)..=(Int16(Int16(-9))&127):(Int64(-88)|1)), [UInt64(111), var_1710847320053_879, var_1710847320053_879, var_1710847320053_879, var_1710847320053_903, UInt64(242), var_1710847320053_879, var_1710847320053_21, UInt64(147), UInt64(60)])), var_1710847320053_386, var_1710847320053_541) } ;
        ((Int64(var_1710847320053_386)&127)..(Int64(Int64(1))&127):(var_1710847320053_748|1))
    };
    let var_1710847320053_1062 : Array<UInt64> = [UInt64(Int8(UInt8(56))), UInt64(233), UInt64(Int16(UInt8(83))), UInt64(Int16(Int16(UInt16(218)))), UInt64(42), UInt64(22), UInt64(UInt16(UInt8(Int8(9)))), UInt64(Int32(-75)), UInt64(Int8(UInt8(244))), UInt64(137)];
    (var_1710847320053_363, ((match (Option<(UInt8, UInt64, Int32, Bool, Bool, Unit, UInt16, Int16)>.Some((UInt8(41), UInt64(72), var_1710847320053_541, true, true, var_1710847320053_932, UInt16(26), Int16(-65)))) {
        case Some(num) => num
        case None => var_1710847320053_655
    }), try { // block id: 938
        if (var_1710847320053_734) { ((Int16(var_1710847320053_777)&127)..=(Int16(Int16(-53))&127):(var_1710847320053_945|1)) } else { ((Int16(var_1710847320053_777)&127)..(Int16(var_1710847320053_423)&127):(var_1710847320053_748|1)) } 
    } catch (_) { // block id: 954
        Int64(-99);
        var_1710847320053_957;
        var_1710847320053_798
    } finally { // block id: 1012
        if (false) { ((Int16(var_1710847320053_777)&127)..=(Int16(var_1710847320053_423)&127):(var_1710847320053_748|1)) } else { var_1710847320053_798 } 
    }, try { // block id: 1021
        var_1710847320053_932;
        var_1710847320053_798
    } finally { // block id: 1024
        Float64(-78.0);
        ((Int16(var_1710847320053_777)&127)..(Int16(var_1710847320053_423)&127):(Int64(-24)|1))
    }, match (Enum_1710847320053_171.enumValue_1710847320053_394(var_1710847320053_418, var_1710847320053_386)) {
        case enumValue_1710847320053_394(_, caseVar_1710847320053_1036 : Range<UInt16>) => 
            var_1710847320053_1039;
            var_1710847320053_1053 = var_1710847320053_1053 - (var_1710847320053_1056);
            if (var_1710847320053_734) { var_1710847320053_1062 } else { [var_1710847320053_21, var_1710847320053_903, var_1710847320053_21, UInt64(51), var_1710847320053_21, UInt64(193), UInt64(80), UInt64(111), var_1710847320053_21, var_1710847320053_21] } 
        
        case enumValue_1710847320053_970((_,caseVar_1710847320053_1100 : Bool,_,(_ : Range<UInt32>,caseVar_1710847320053_1101 : Array<Int64>,caseVar_1710847320053_1102 : UInt64,_ : Range<UInt64>,_,caseVar_1710847320053_1103 : Int64,caseVar_1710847320053_1104,_ : (Unit, Unit, Int64, Float32, UInt16, Int32)),caseVar_1710847320053_1105 : Range<UInt8>), caseVar_1710847320053_1106, _ : Range<UInt32>) => 
            if (var_1710847320053_148) { [UInt64(41), UInt64(195), var_1710847320053_903, var_1710847320053_21, UInt64(26), UInt64(152), UInt64(51), var_1710847320053_21, UInt64(35), UInt64(232)] } else { var_1710847320053_1062 } 
        
        case _ => 
            var_1710847320053_903 = var_1710847320053_903 & (var_1710847320053_21);
            if (true) { var_1710847320053_1062 } else { var_1710847320053_1062 } 
        
    }))
}

public func func_1710847320053_10(param_1710847320053_11 : Rune, param_1710847320053_12 : UInt16, optionalParam_1710847320053_13 ! : UInt16 = UInt16(Int16(UInt16(Int8(Int8(104)))))) : (UInt8, UInt64, Int32, Bool, Bool, Unit, UInt16, Int16) { // block id: 19
    var_1710847320053_21;
    let var_1710847320053_113 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    ({ lambdaParameter_1710847320053_87 : Unit => var var_1710847320053_92 : Int64 = Int64(55); func_1710847320053_26((var_1710847320053_92 = var_1710847320053_92 | ((match (Option<Int64>.None) {
        case Some(num) => num
        case None => var_1710847320053_92
    })))) }(var_1710847320053_113[8]))[1];
    func_1710847320053_132(((Int32(Int32(27))&127)..(Int32(Int32(78))&127):(var_1710847320053_386|1)))[0][0]
}


main(): Int64 {
    try {
        if (func_1710847320053_10(r'6', var_1710847320053_623, optionalParam_1710847320053_13 : var_1710847320053_623)[4]) { // block id: 1142
            var var_1710847320053_1146 : ((Int8, Int64, UInt64, Float64, ((Unit, Unit, Int64, Float32, UInt16, Int32), UInt16, Option<(UInt8, Bool, UInt8, Bool, Bool)>, (UInt8, UInt64, Int32, Bool, Bool, Unit, UInt16, Int16), Range<Int32>), Range<Int16>, Range<Int64>, Array<UInt64>), ((UInt8, UInt64, Int32, Bool, Bool, Unit, UInt16, Int16), Range<Int16>, Range<Int16>, Array<UInt64>), Range<UInt64>, UInt16, Int64, Int64, UInt16, Array<Int64>) = ((Int8(Int8(-76)), Int64(-14), UInt64(203), Float64(-7.0), (((), (), Int64(-31), Float32(54.0), UInt16(120), Int32(-48)), UInt16(187), Option<(UInt8, Bool, UInt8, Bool, Bool)>.None, (UInt8(161), UInt64(112), Int32(119), true, true, (), UInt16(205), Int16(-94)), ((Int32(Int32(69))&127)..(Int32(Int32(-126))&127):(Int64(-74)|1))), ((Int16(Int16(UInt16(71)))&127)..=(Int16(Int16(-35))&127):(Int64(UInt64(158))|1)), ((Int64(Int64(49))&127)..(Int64(Int64(39))&127):(Int64(64)|1)), [UInt64(UInt32(172)), UInt64(103), UInt64(184), UInt64(62), UInt64(UInt64(86)), UInt64(UInt8(106)), UInt64(UInt16(181)), UInt64(Int16(124)), UInt64(175), UInt64(85)]), ((UInt8(240), UInt64(Int32(124)), Int32(17), (match (((UInt32(UInt32(159))&127)..(UInt32(UInt32(98))&127):(Int64(-109)|1))) {
                case _: Range<UInt32> => true
                case _ => false
            }), true, (), UInt16(116), Int16(UInt16(115))), ((Int16(Int16(UInt16(79)))&127)..(Int16(Int16(Int16(-124)))&127):(Int64(Int64(-33))|1)), ((Int16(Int16(Int8(-4)))&127)..(Int16(Int16(50))&127):(Int64(Int64(-52))|1)), [UInt64(92), UInt64(UInt16(194)), UInt64(Int32(-76)), UInt64(217), UInt64(34), UInt64(162), UInt64(155), UInt64(69), UInt64(UInt64(83)), UInt64(Int16(101))]), ((UInt64(UInt64(UInt8(UInt8(191))))&127)..(UInt64(UInt64(Int8(76)))&127):(Int64(-67)|1)), UInt16(4), Int64(115), Int64(-101), UInt16(UInt16(112)), [Int64(-66), Int64(UInt8(Int8(30))), Int64(Int16(UInt8(68))), Int64(Int64(Int64(-108))), Int64(-93), Int64(UInt32(UInt16(224))), Int64(52), Int64(Int16(-75)), Int64(Int8(60)), Int64(32)]);
            var_1710847320053_1146[3]
        } else { // block id: 1275
            [((UInt8(UInt8(58))&127)..(UInt8(UInt8(116))&127):(Int64(68)|1)), ((UInt8(UInt8(143))&127)..=(UInt8(UInt8(93))&127):(Int64(68)|1)), ((UInt8(UInt8(207))&127)..=(UInt8(UInt8(0))&127):(Int64(49)|1)), ((UInt8(UInt8(32))&127)..(UInt8(UInt8(44))&127):(Int64(48)|1)), ((UInt8(UInt8(78))&127)..(UInt8(UInt8(116))&127):(Int64(-52)|1)), ((UInt8(UInt8(106))&127)..(UInt8(UInt8(229))&127):(Int64(-72)|1)), ((UInt8(UInt8(120))&127)..=(UInt8(UInt8(134))&127):(Int64(-40)|1)), ((UInt8(UInt8(111))&127)..=(UInt8(UInt8(115))&127):(Int64(73)|1)), ((UInt8(UInt8(167))&127)..(UInt8(UInt8(53))&127):(Int64(-55)|1)), ((UInt8(UInt8(84))&127)..=(UInt8(UInt8(210))&127):(Int64(97)|1))][9];
            (match (var_1710847320053_1286) {
                case Some(num) => num
                case None => var_1710847320053_464
            });
            if (var_1710847320053_1293) { // block id: 1295
                UInt16(231)
            } else if (true) { // block id: 1298
                ();
                var_1710847320053_623 * UInt16(169)
            } else { // block id: 1303
                var_1710847320053_777 = var_1710847320053_777 - 1;
                ();
                UInt16(248) & UInt16(214)
            }
        };
        let var_1710847320053_1314 : Array<UInt64> = [UInt64(161), UInt64(161), UInt64(73), UInt64(33), UInt64(Int64(-25)), UInt64(Int16(UInt16(45))), UInt64(Int64(91)), UInt64(Int8(UInt8(121))), UInt64(96), UInt64(Int32(Int32(UInt32(34))))];
        let var_1710847320053_1348 : ((Unit, Unit, Int64, Float32, UInt16, Int32), UInt16, Option<(UInt8, Bool, UInt8, Bool, Bool)>, (UInt8, UInt64, Int32, Bool, Bool, Unit, UInt16, Int16), Range<Int32>) = (((), (), Int64(-99), Float32(Float32(74.0)), UInt16(Int16(119)), Int32(UInt16(60))), UInt16(Int16(UInt8(Int8(-105)))), (match (((UInt32(UInt32(242))&127)..=(UInt32(UInt32(68))&127):(Int64(-34)|1))) {
            case newVar: (UInt8, Bool, UInt8, Bool, Bool) => Option<(UInt8, Bool, UInt8, Bool, Bool)>.Some(newVar)
            case _ => Option<(UInt8, Bool, UInt8, Bool, Bool)>.None
        }), (UInt8(Int8(-121)), UInt64(158), Int32(47), false, (match (Int32(37)) {
            case _: Option<UInt32> => true
            case _ => false
        }), (), UInt16(8), Int16(121)), ((Int32(Int32(Int32(96)))&127)..=(Int32(Int32(Int8(UInt8(219))))&127):(Int64(-64)|1)));
        try { // block id: 1312
            var_1710847320053_1314;
            var_1710847320053_307
        } finally { // block id: 1336
            var_1710847320053_1339 = var_1710847320053_1339 % ((var_1710847320053_1339) | 1);
            (var_1710847320053_428, Int64(-25), UInt64(18), Float64(46.0), var_1710847320053_1348, var_1710847320053_798, var_1710847320053_1386, var_1710847320053_1389)
        }[1]
        // CRC Check All Variables
        var crcCheck = CrcCheck(5000, 32)
        crcCheck.updateBuffer(UInt64(var_1710847320053_21*var_1710847320053_21), 64)
        crcCheck.updateBuffer(UInt64(var_1710847320053_386*var_1710847320053_386), 64)
        crcCheck.updateBuffer(UInt64(var_1710847320053_428*var_1710847320053_428), 64)
        crcCheck.updateBuffer(UInt64(var_1710847320053_623*var_1710847320053_623), 64)
        crcCheck.updateBuffer(UInt64(var_1710847320053_748*var_1710847320053_748), 64)
        crcCheck.updateBuffer(UInt64(var_1710847320053_777*var_1710847320053_777), 64)
        crcCheck.updateBuffer(UInt64(var_1710847320053_787*var_1710847320053_787), 64)
        crcCheck.updateBuffer(UInt64(var_1710847320053_945*var_1710847320053_945), 64)
        crcCheck.crcCheck()
        crcCheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[(i + buffer_index) % buffer.size] = byteArray[i + byte_index]
            i++
        }
        buffer_index = (buffer_index + i) % buffer.size
    }

    func updateBuffer(input: Bool, byte_n: Int64): Unit {
        if (input == true) {
            updateBuffer(1, byte_n)
        } else {
            updateBuffer(0, byte_n)
        }
    }

    func updateBuffer(input: Rune, byte_n: Int64): Unit {
        updateBuffer(UInt64(UInt32(input)), byte_n)
    }

    func updateBuffer(input: String, byte_n: Int64): Unit {
        for (c in input) {
            updateBuffer(c, byte_n)
        }
    }

    func updateBuffer(input: Unit, byte_n: Int64): Unit {
        updateBuffer(input.toString(), byte_n)
    }

    func updateBuffer(input: Any, byte_n: Int64) : Unit {
        if (input is Hashable) {
            match(input as Hashable) {
                case Some(v) => updateBuffer(UInt64(v.hashCode()), byte_n)
                case _=> updateBuffer(1, byte_n)
            }
            
        } else if (input is ToString) {
            match(input as ToString) {
                case Some(v) => updateBuffer(v.toString(), byte_n)
                case _=> updateBuffer(1, byte_n)
            }
        } else {
            updateBuffer(1, byte_n)
        }
    }     
    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}

extend Int32 {
    operator func ()(x: Int32): Int32 {
        return this - x
    }
}

