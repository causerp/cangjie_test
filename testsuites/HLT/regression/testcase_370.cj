/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output


// random seed:1631160220125

// All global variable need to be defined before use!
public var var15 :  (UInt32,Bool,Int32) = (UInt32(Float32(Int8(UInt64(109)))), true, Int32(-21))
 var var31 : Unit = ()
 let var125 : Float64 = Float64(UInt16(Float32(Int32(-122))))
 var var311 : Option<Float64> = Option<Float64>.Some(var125)
public var var467 : UInt16 = UInt16(66)
 var var503 : Int32 = Int32(82)
 var var511 : Option<Int32> = Option<Int32>.Some(var503)
 let var609 : Enum601<Option<Bool>, Float32> = Enum601<Option<Bool>, Float32>.defaultValue
 let var717 : Int64 = Int64(UInt8((-42)))
 var var725 : UInt64 = UInt64(29)
public let var845 : Rune = r'x'
 var var781 : Bool = ([(Int16(116) is Unit), (r'I' is () -> Int32), (Option<Option<Int32>>.Some(var511) is Range<Int64>), false, (Int8(101) is UInt8), (Float32(UInt8(207)) is String), false, true, (((), [Int32(-2), Int32(81), Int32(-128), Int32(107), Int32(118), Int32(-106), Int32(-108), Int32(-85), Int32(83), Int32(-21)], (), ([Int32(-81), Int32(11), Int32(72), Int32(18), Int32(95), Int32(-125), Int32(-76), Int32(-101), Int32(8), Int32(124)], UInt16(244), (-48), UInt32(77), Class94(), UInt8(37), ((Int32(-41))..(Int32(32)):((90|1))), 109.0, (UInt32(21), true, Int32(69))), (Int8(-103), r'L', Int16(-2), (), (), ((UInt16(192))..(UInt16(46)):((-23)|1)))) is Class632<Option<Int32>, Enum601<Option<Bool>, Float32>>), (UInt64(UInt32(241)) is Range<UInt32>)] is  (Int8,Rune,Int16,Unit,Unit,Range<UInt16>))
 let var874 : Array<Rune> = [r'w', r'M', r'r', r'K', r'3', r'Z', r'Z', r'c', r'R', r'p']
 let var899 : Option<Enum601<Option<Bool>, Float32>> = Option<Enum601<Option<Bool>, Float32>>.None
 var var975 : Int8 = Int8(Int8(Int64(Int64(Int32(-7)))))
public var var1059 :  (Rune,Range<Int32>,UInt64,Range<UInt8>,Bool) = (r'0', ((Int32(UInt16(UInt32(115))))..(Int32(-91)):(((-4)|1))), UInt64(239), ((UInt8(198))..(UInt8(UInt64(Int32(-81)))):(((-46)|1))), (Int16(UInt16(6)) is Float64))
public var var1081 : Class94 = Class94()
public let var1267 : Range<Int16> = ((Int16(Float32(89.0)))..=(Int16(115.0)):(((-69)|1)))
public var var1290 : Range<UInt32> = ((UInt32(Int8(121)))..(UInt32(UInt64(118))):((Int64(56.0)|1)))
 var var1355 : UInt8 = UInt8(76)
public var var1863 : Interface633 = Class632<Option<Int32>, Enum601<Option<Bool>, Float32>>()
public let var1904 : Int32 = Int32(50)
 let var2068 : Bool = true
public let var2216 : Range<Int32> = ((Int32(-90))..=(Int32(-4)):((-71)|1))
 let var2266 : Rune = r'Z'
 let var2292 : Range<Int64> = (((-111))..(37):((73|1)))
 let var2350 : Array<Range<UInt64>> = [((UInt64(39))..(UInt64(199)):((-15)|1)), ((UInt64(118))..=(UInt64(146)):((-117)|1)), ((UInt64(117))..=(UInt64(82)):((-105)|1)), ((UInt64(161))..(UInt64(251)):(59|1)), ((UInt64(23))..(UInt64(165)):(66|1)), ((UInt64(21))..=(UInt64(145)):((-88)|1)), ((UInt64(240))..(UInt64(190)):((-38)|1)), ((UInt64(210))..=(UInt64(120)):((-65)|1)), ((UInt64(30))..(UInt64(115)):((-48)|1)), ((UInt64(103))..(UInt64(178)):(86|1))]
 var var2357 : Enum2354 = Enum2354.defaultValue
 var var2465 : Rune = r'e'
 let var2528 : UInt32 = UInt32(243)
 var var2600 : Array<Range<UInt64>> = [((UInt64(198))..(UInt64(83)):((-19)|1)), ((UInt64(189))..(UInt64(76)):((-61)|1)), ((UInt64(150))..=(UInt64(83)):((-8)|1)), ((UInt64(174))..=(UInt64(137)):((-34)|1)), ((UInt64(57))..(UInt64(1)):((-34)|1)), ((UInt64(110))..(UInt64(100)):((-107)|1)), ((UInt64(106))..=(UInt64(173)):(62|1)), ((UInt64(225))..(UInt64(29)):((-19)|1)), ((UInt64(243))..=(UInt64(171)):(123|1)), ((UInt64(84))..(UInt64(165)):(95|1))]
main(): Int64 {
    let var71 : Option<Unit> = Option<Unit>.Some(var31);
    let var117 : Unit = ();
    let var269 : Rune = r'f';
    let var281 :  (Int8,Rune,Int16,Unit,Unit,Range<UInt16>) = (Int8(-32), r'M', Int16(111), (), (), ((UInt16(78))..(UInt16(3)):((Int64(Int32(-106))|1))));
    func func246() : Class94 { // block id: 247
        62.0;
        let var272 : Int16 = Int16(-125);
        match (try { // block id: 253
                var31;
                var117;
                var125
            } catch (_) { // block id: 257
                ();
                73.0
            }) {
            case -122.0 | -1.0 | -122.0 | -122.0 => 
                (Int8(-84), var269, var272, var31, var31, ((UInt16(244))..=(UInt16(196)):(54|1)))
            
            case _ => 
                [Int32(-59), Int32(115), Int32(-107), Int32(-2), Int32(122), Int32(75), Int32(-104), Int32(-28), Int32(49), Int32(-21)];
                var281
            
        }[4];
        Class94()
    }
;
    func func234<T0, T1>(optionalParam235 ! : Range<Int32> = ((Int32(UInt16(241)))..(Int32(-127)):((Int64(Int8(-100))|1))), namedParam242 ! : String) : String where T0 <: Option<Range<Int16>>, T1 <: Array<Enum601<Option<Bool>, Float32>> { // block id: 243
        func246().func296(Class94.var308, var311)
    }
;
    let var470 : Int64 = Int64(UInt64(78));
    let var487 : UInt32 = UInt32(UInt8(183));
    func func6() : Int32 { // block id: 7
        let var53 : Int16 = Int16(Int16(Float32(19.0)));
        let var152 : Class94 = Class94();
        let var318 : String = "1 XXp~xXG4";
        let var347 : Bool = ((UInt32(Int64(UInt8(180))), (((UInt64(80))..(UInt64(19)):((-56)|1)) is (Range<Int32>, String) -> String), Int32(Int16(-109))) is Range<Int32>);
        let var367 : (Unit,Array<Int32>,Unit,(Array<Int32>,UInt16,Int64,UInt32,Class94,UInt8,Range<Int32>,Float64, (UInt32,Bool,Int32)), (Int8,Rune,Int16,Unit,Unit,Range<UInt16>)) = ((), [Int32(UInt32(Int8(57))), Int32(UInt32(UInt32(224))), Int32(UInt32(UInt8(73))), Int32(UInt8(194)), Int32(UInt16(Int16(-102))), Int32(UInt16(131)), Int32(Int16(124)), Int32(UInt16(Float32(49.0))), Int32(UInt64(Float32(5.0))), Int32(-122)], (), ([Int32(UInt16(252)), Int32(-56), Int32(UInt64(203)), Int32(106), Int32(-54), Int32(-33), Int32(UInt8(225)), Int32(UInt64(67)), Int32(-74), Int32(26)], UInt16(15), 66, UInt32(Int32(UInt8(203))), Class94(), UInt8(162), ((Int32(-88))..=(Int32(11)):((-103)|1)), Float64(Int16((-108))), (UInt32(Int8(-127)), (((Int8(-122))..=(Int8(44)):(((-128)|1))) is UInt8), Int32(Int32(-23)))), (Int8(-112), r'd', Int16(126), (), (), ((UInt16(64))..=(UInt16(223)):((-97)|1))));
        func func222(param223 : Rune, optionalParam224 ! : () -> Int32 = func6, namedParam227 ! : UInt32, namedParam228 ! : Option<Unit>) : Class94 { // block id: 229
            Class94();
            var loopTimeVar324 : Range<UInt64> = ((UInt64(Float32(UInt64(237))))..=(UInt64(Int8(44))):((Int64(Int16(Float64(UInt64(228))))|1)));
            for (i in loopTimeVar324 where ((func234<Option<Range<Int16>>, Array<Enum601<Option<Bool>, Float32>>>(namedParam242 : var318) is Option<Unit>))) {
                (Option<Unit>.None ?? ())
            };
            match (var311) {
                case _ => 
                    ();
                    [var347, var347, var347, false, false, true, true, var347, true, var347];
                    var367
                
                case _ : UInt32 => 
                    ();
                    var367
                
                case _ => 
                    var var454 : Int32 = Int32(UInt16(UInt8(Int16(Int8(97)))));
                    ([Int32(-97), Int32(40), Int32(31), var454, var454, var454, var454, var454, var454, var454], var467, var470, UInt32(236), var152, UInt8(221), ((var454)..(var454):((var470|1))), var125, var15);
                    var367
                
            }[3][4]
        }
;
        func func9() : Int32 { // block id: 10
            let var40 : UInt64 = UInt64(148);
            let var47 : Bool = (63.0 is Int16);
            if (var15[1]) { // block id: 24
                (Option<Unit>.Some(var31) ?? ());
                match (r'O') {
                    case _ => 
                        var40
                    
                };
                if (true) { // block id: 44
                    Int16(104)
                } else if (var47) { // block id: 50
                    ();
                    var53
                } else { // block id: 57
                    Option<Unit>.None;
                    ();
                    Int16(-82)
                }
            } else { // block id: 61
                var loopTimeVar69 : Int64 = 0;
                do {
                    loopTimeVar69++;
                    let var66 : Rune = r'w';
                    var66
                } while (var47 && loopTimeVar69 < 100 ) ;
                var71;
                match (Int32(-36)) {
                    case _ => 
                        var53
                    
                    case caseVar81 => 
                        ();
                        Int16(85)
                    
                    case -2 => 
                        var53
                    
                    case _ => 
                        var53
                    
                }
            };
            func func134(param135 : UInt32, namedParam136 ! : Bool) : Unit { // block id: 137
                var31;
                let var202 : String = "*7M{Y;g*VT";
                var loopTimeVar204 : Range<UInt64> = ((UInt64(UInt32(29)))..(UInt64(Float64(Int64((-51))))):((Int64(UInt64(11))|1)));
                for (i in loopTimeVar204 where (var152.var155[4])) {
                    if (var47) { """
B(v}@*gcMU
%YQl]0,6aS
""" } else { var202 } 
                }
            }
;
            if (Class94.var99) { // block id: 108
                try { // block id: 110
                    Float32(-31.0);
                    var31;
                    var31
                } catch (_) { // block id: 114
                    var31;
                    var117
                };
                (Option<Float64>.None ?? var125)
            } else { // block id: 132
                func134(UInt32(7), namedParam136 : var47);
                Float64(9)
            };
            func222(r'h', namedParam227 : var487, namedParam228 : var71).func296(namedParam493 : ((Int16(-20))..=(Int16(72)):(92|1)), namedParam494 : ((UInt8(153))..=(UInt8(253)):(19|1)), namedParam495 : var845)[7]
        }
;
        func9()
    }
;
    func6();
    (if (false) { Option<Unit>.None } else { var71 }  ?? var117);
    if ((var2465 is Option<Enum601<Option<Bool>, Float32>>)) { (if (var781) { 57 } else { var470 } ) } else { try { // block id: 2622
        94
    } finally { // block id: 2624
        (-19)
    } } 
    // CRC Check All Variables
    var crccheck = CrcCheck(5000, 32)
    crccheck.updateBuffer(UInt64(var470), 64)
    crccheck.updateBuffer(UInt64(var487), 64)
    crccheck.updateBuffer(UInt64(var467), 64)
    crccheck.updateBuffer(UInt64(var503), 64)
    crccheck.updateBuffer(UInt64(var717), 64)
    crccheck.updateBuffer(UInt64(var725), 64)
    crccheck.updateBuffer(UInt64(var975), 64)
    crccheck.updateBuffer(UInt64(var1355), 64)
    crccheck.updateBuffer(UInt64(var1904), 64)
    crccheck.updateBuffer(UInt64(var2528), 64)
    crccheck.crcCheck()
    crccheck.getCrcOutput()

    return 0;
}

class CrcCheck {
    public var buffer: Array<Int64>
    public var poly: Array<Int64>
    public var crc_output: Array<Int64>
    public var poly_n: Int64
    public var buffer_index: Int64
    public var crc_output_n: Int64

    public init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    public func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    public func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    public func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}

public open class Class94 {
    public init() { // block id: 96

    }
;
    public static mut prop var99 : Bool { // block id: 100
        get() { // block id: 102
            false;
            var2629
        }

        set(Value) { // block id: 106
            ();
            var2629 = Value
        }

    };
    public let var155 : Array<Bool> = [(((Int16(20))..=(Int16(Int8(-111))):(((-97)|1))) is UInt16), (((UInt32(224))..=(UInt32(187)):((-106)|1)) is Int16), (Option<Float64>.None is Array<Bool>), (((Int64(Int16(102)))..((-36)):((Int64(115)|1))) is UInt16), (UInt64(22) is Range<UInt32>), (((UInt64((-88.0)))..(UInt64(UInt16(227))):(((-65)|1))) is Option<Unit>), false, (((UInt16(137))..(UInt16(154)):(75|1)) is Range<UInt64>), (((Int8(8))..=(Int8(Int16(-75))):((Int64(Int16(41))|1))) is () -> Int32), true];
    public let var303 : String = ###"P?q U#Hw2Y"###;
    public open func func296(param297 : Range<Int8>, param298 : Option<Float64>) : String { // block id: 299
        this.var303
    }
;
    public static let var308 : Range<Int8> = ((Int8(109))..(Int8(72)):((-107)|1));
    public static var var517 : Option<Option<Int32>> = Option<Option<Int32>>.Some(var511);
    public static let var612 : Option<Enum601<Option<Bool>, Float32>> = Option<Enum601<Option<Bool>, Float32>>.None;
    public mut prop var1084 : Range<Int16> { // block id: 1085
        get() { // block id: 1087
            [((UInt64(166))..(UInt64(219)):(109|1)), ((UInt64(114))..(UInt64(104)):((-93)|1)), ((UInt64(87))..=(UInt64(149)):(30|1)), ((UInt64(193))..(UInt64(200)):((-94)|1)), ((UInt64(186))..(UInt64(159)):((-48)|1)), ((UInt64(189))..(UInt64(172)):((-2)|1)), ((UInt64(210))..=(UInt64(58)):(117|1)), ((UInt64(245))..(UInt64(215)):(1|1)), ((UInt64(180))..(UInt64(28)):((-29)|1)), ((UInt64(238))..(UInt64(44)):(57|1))];
            ();
            ((Int16(-125))..(Int16(-16)):((-41)|1))
        }

        set(Value) { // block id: 1093
            19;
            Int8(Int64(Float32(-82.0)));
            ()
        }

    };
    public static func func587() : Array<Rune> { // block id: 588
        if (try { // block id: 591
            ();
            var31;
            var99
        } catch (e: Exception) { // block id: 595
            var517;
            false
        } finally { // block id: 598
            var99
        }) { match ((var612 ?? var609)) {
            case _ => 
                var31
            
            case defaultValue => 
                var31;
                var31;
                ()
            
            case _ => 
                ();
                var31;
                ()
            
        } } else { Class632<Option<Int32>, Enum601<Option<Bool>, Float32>>.var638[2] } ;
        func703(if (var781) { [Enum601<Option<Bool>, Float32>.defaultValue, Enum601<Option<Bool>, Float32>.defaultValue, var609, var609, Enum601<Option<Bool>, Float32>.defaultValue, Enum601<Option<Bool>, Float32>.defaultValue, Enum601<Option<Bool>, Float32>.defaultValue, Enum601<Option<Bool>, Float32>.defaultValue, var609, var609] } else { [Enum601<Option<Bool>, Float32>.defaultValue, Enum601<Option<Bool>, Float32>.defaultValue, Enum601<Option<Bool>, Float32>.defaultValue, Enum601<Option<Bool>, Float32>.defaultValue, var609, var609, Enum601<Option<Bool>, Float32>.defaultValue, var609, var609, var609] } [4])
    }
;
    public let var1303 : Int16 = Int16(UInt32(UInt8(3)));
    public static prop var1379 : (Range<UInt64>, (UInt32,Bool,Int32),Rune,UInt16,Range<Int64>,Unit) { // block id: 1380
        get() { // block id: 1382
            ();
            ((UInt16(199))..=(UInt16(13)):((-40)|1));
            (((UInt64(139))..=(UInt64(3.0)):((65|1))), (UInt32(UInt64(118)), false, Int32(-91)), r'L', UInt16(225), ((Int64(UInt64(136)))..=((-32)):((Int64(31.0)|1))), ())
        }

    };
    public static var var1558 : Bool = true;
    private static let var1592 : Option<Bool> = ((((), [Int32(-79), Int32(-125), Int32(-99), Int32(-84), Int32(23), Int32(20), Int32(-20), Int32(49), Int32(40), Int32(-8)], (), ([Int32(59), Int32(-111), Int32(4), Int32(61), Int32(86), Int32(4), Int32(63), Int32(35), Int32(32), Int32(-45)], UInt16(205), (-61), UInt32(95), Class94(), UInt8(195), ((Int32(6))..=(Int32(-61)):(8|1)), (-88.0), (UInt32(132), true, Int32(63))), (Int8(65), r'x', Int16(-107), (), (), ((UInt16(64))..=(UInt16(28)):((-117)|1)))) as Float64) as Bool);
    public var var1649 : Array< (Rune,Range<Int32>,UInt64,Range<UInt8>,Bool)> = [(r'z', ((Int32(-14))..(Int32(52)):((-61)|1)), UInt64(85), ((UInt8(Int16(-68)))..=(UInt8(169)):((Int64(Int32(110))|1))), (((UInt64(17))..=(UInt64(146)):(((-76)|1))) is (Option<Enum601<Option<Bool>, Float32>>, (Unit,Array<Int32>,Unit,(Array<Int32>,UInt16,Int64,UInt32,Class94,UInt8,Range<Int32>,Float64, (UInt32,Bool,Int32)), (Int8,Rune,Int16,Unit,Unit,Range<UInt16>)), Range<Int16>, Int8) -> Array<Rune>)), (r'a', ((Int32(86))..(Int32(-68)):((-77)|1)), UInt64(UInt32(189)), ((UInt8(172))..(UInt8(134)):((-46)|1)), (((Int8(95))..=(Int8(92)):(93|1)) is  (Rune,Range<Int32>,UInt64,Range<UInt8>,Bool))), (r'K', ((Int32(4))..=(Int32(64.0)):((Int64((-125.0))|1))), UInt64(85), ((UInt8(149))..(UInt8(78)):((-104)|1)), ([Int32(-125), Int32(-112), Int32(116), Int32(111), Int32(97), Int32(78), Int32(-91), Int32(5), Int32(-54), Int32(-31)] is () -> Class94)), (r'B', ((Int32(37))..(Int32(-87)):(76|1)), UInt64(114.0), ((UInt8(103))..(UInt8(UInt64(253))):((Int64(Int32(-106))|1))), true), (r'X', ((Int32(9))..(Int32(-100)):((-88)|1)), UInt64(216), ((UInt8(100))..=(UInt8(226)):((-115)|1)), true), (r'4', ((Int32(-66))..=(Int32(72)):((-97)|1)), UInt64(4.0), ((UInt8(196))..=(UInt8(UInt32(151))):((31|1))), (((125)..=((-75)):(59|1)) is Option<Bool>)), (r'R', ((Int32(-45))..=(Int32(45)):((-120)|1)), UInt64(176), ((UInt8(241))..(UInt8(100)):(41|1)), (Option<Rune>.Some(var845) is Range<UInt16>)), (r'T', ((Int32(-66))..=(Int32(24)):(54|1)), UInt64(62), ((UInt8((-70.0)))..=(UInt8(Int16(121))):((90|1))), false), (r'I', ((Int32(-74))..=(Int32(Int16(9))):((Int64(Int8(-48))|1))), UInt64(114), ((UInt8(141))..=(UInt8(253)):((-80)|1)), true), (r'u', ((Int32(33))..=(Int32(88)):(19|1)), UInt64(157), ((UInt8(UInt32(77)))..(UInt8(UInt8(63))):((98|1))), (((), [Int32(42), Int32(46), Int32(89), Int32(-38), Int32(-46), Int32(-107), Int32(21), Int32(100), Int32(-46), Int32(113)], (), ([Int32(57), Int32(20), Int32(-11), Int32(19), Int32(-72), Int32(-75), Int32(6), Int32(93), Int32(-62), Int32(88)], UInt16(165), 98, UInt32(1), Class94(), UInt8(126), ((Int32(42))..=(Int32(-115)):(((-1)|1))), 95.0, (UInt32(47), false, Int32(-82))), (Int8(45), r'E', Int16(62), (), (), ((UInt16(39))..=(UInt16(217)):((108|1))))) is Int64))];
    protected var var2280 : Range<UInt64> = ((UInt64(157))..=(UInt64(129)):(((-119)|1)));
    public let var2316 : Bool = true;
    protected let var2534 : Float64 = 70.0;
    public prop var2557 : Array<Int32> { // block id: 2558
        get() { // block id: 2560
            Option<Bool>.None;
            r'L';
            [Int32(83), Int32(UInt64(Int16(-60))), Int32(-4), Int32(UInt64(107)), Int32(Int8(-81)), Int32(Int64(UInt32(47))), Int32(UInt16(151)), Int32(-2), Int32(Float32(9.0)), Int32(-53)]
        }

    };
    public open func func296(namedParam493 ! : Range<Int16>, namedParam494 ! : Range<UInt8>, namedParam495 ! : Rune) : Array<Int32> { // block id: 496
        var var556 : Int8 = Int8(UInt64(Int64(Int16(UInt8(85)))));
        ((try { // block id: 515
            var517
        } catch (_) { // block id: 520
            var31;
            Option<Unit>.Some(var31);
            Option<Option<Int32>>.Some(var511)
        } finally { // block id: 525
            ();
            ((UInt64(189))..=(UInt64(104)):(54|1));
            Option<Option<Int32>>.Some(var511)
        } ?? if (var99) { Option<Int32>.None } else { var511 } ) ?? try { // block id: 537
            ((Int8(43))..(Int8(73)):(35|1));
            var var547 : Int32 = Int32(Float32(Int32(-93)));
            [var503, Int32(122), Int32(71), Int32(-123), Int32(-8), Int32(-120), var547, Int32(41), var547, var503]
        } finally { // block id: 554
            var556;
            [Int32(117), Int32(-8), Int32(73), Int32(-30), Int32(67), Int32(-74), Int32(114), Int32(32), Int32(-75), Int32(-23)]
        }[2]);
        let var1220 :  (Int8,Rune,Int16,Unit,Unit,Range<UInt16>) = (Int8(91), r'1', Int16(-100), (), (), ((UInt16(19))..(UInt16(137)):(((-82)|1))));
        let var1280 : Array<Array<Range<UInt64>>> = [[((UInt64(75))..=(UInt64(9)):((-21)|1)), ((UInt64(159))..=(UInt64(234)):(91|1)), ((UInt64(171))..(UInt64(3)):(38|1)), ((UInt64(184))..=(UInt64(200)):(47|1)), ((UInt64(112))..(UInt64(86)):((-42)|1)), ((UInt64(83))..=(UInt64(10)):(41|1)), ((UInt64(246))..=(UInt64(66)):((-123)|1)), ((UInt64(251))..=(UInt64(5)):((-25)|1)), ((UInt64(112))..(UInt64(39)):(79|1)), ((UInt64(79))..(UInt64(55)):((-76)|1))], [((UInt64(24))..(UInt64(169)):(116|1)), ((UInt64(231))..=(UInt64(8)):(86|1)), ((UInt64(86))..(UInt64(58)):((-101)|1)), ((UInt64(148))..(UInt64(212)):(83|1)), ((UInt64(209))..=(UInt64(36)):((-35)|1)), ((UInt64(87))..(UInt64(222)):((-95)|1)), ((UInt64(238))..=(UInt64(140)):(51|1)), ((UInt64(213))..=(UInt64(72)):(5|1)), ((UInt64(14))..(UInt64(220)):(71|1)), ((UInt64(190))..(UInt64(137)):(76|1))], [((UInt64(88))..(UInt64(219)):((-77)|1)), ((UInt64(15))..=(UInt64(199)):(14|1)), ((UInt64(27))..=(UInt64(128)):((-81)|1)), ((UInt64(251))..=(UInt64(30)):(93|1)), ((UInt64(135))..(UInt64(247)):(84|1)), ((UInt64(47))..(UInt64(63)):((-52)|1)), ((UInt64(104))..(UInt64(86)):((-18)|1)), ((UInt64(145))..(UInt64(24)):(63|1)), ((UInt64(114))..(UInt64(220)):(14|1)), ((UInt64(77))..=(UInt64(119)):(69|1))], [((UInt64(37))..=(UInt64(138)):(21|1)), ((UInt64(186))..(UInt64(230)):((-88)|1)), ((UInt64(11))..(UInt64(63)):((-1)|1)), ((UInt64(143))..(UInt64(191)):(51|1)), ((UInt64(222))..=(UInt64(145)):(72|1)), ((UInt64(64))..=(UInt64(60)):((-61)|1)), ((UInt64(135))..(UInt64(212)):((-125)|1)), ((UInt64(17))..=(UInt64(25)):(100|1)), ((UInt64(193))..(UInt64(64)):(31|1)), ((UInt64(40))..(UInt64(230)):(4|1))], [((UInt64(209))..(UInt64(37)):((-44)|1)), ((UInt64(42))..(UInt64(216)):((-28)|1)), ((UInt64(74))..=(UInt64(196)):((-14)|1)), ((UInt64(113))..(UInt64(12)):(49|1)), ((UInt64(217))..=(UInt64(127)):((-43)|1)), ((UInt64(157))..=(UInt64(118)):((-118)|1)), ((UInt64(93))..(UInt64(217)):((-62)|1)), ((UInt64(63))..(UInt64(62)):(63|1)), ((UInt64(245))..=(UInt64(166)):(38|1)), ((UInt64(85))..=(UInt64(83)):(39|1))], [((UInt64(212))..=(UInt64(27)):((-128)|1)), ((UInt64(220))..(UInt64(142)):(103|1)), ((UInt64(191))..=(UInt64(246)):((-23)|1)), ((UInt64(247))..(UInt64(88)):((-87)|1)), ((UInt64(164))..=(UInt64(155)):((-4)|1)), ((UInt64(56))..=(UInt64(193)):((-74)|1)), ((UInt64(96))..=(UInt64(245)):((-109)|1)), ((UInt64(53))..=(UInt64(11)):((-93)|1)), ((UInt64(247))..(UInt64(105)):(35|1)), ((UInt64(135))..(UInt64(30)):((-71)|1))], [((UInt64(108))..=(UInt64(187)):((-28)|1)), ((UInt64(215))..=(UInt64(39)):(106|1)), ((UInt64(156))..(UInt64(72)):(1|1)), ((UInt64(237))..=(UInt64(54)):(106|1)), ((UInt64(148))..=(UInt64(99)):((-71)|1)), ((UInt64(191))..(UInt64(37)):(99|1)), ((UInt64(106))..(UInt64(169)):(104|1)), ((UInt64(156))..=(UInt64(90)):((-84)|1)), ((UInt64(254))..=(UInt64(74)):((-4)|1)), ((UInt64(12))..(UInt64(129)):((-11)|1))], [((UInt64(184))..=(UInt64(101)):(22|1)), ((UInt64(253))..=(UInt64(91)):((-100)|1)), ((UInt64(87))..(UInt64(111)):(49|1)), ((UInt64(212))..=(UInt64(217)):(124|1)), ((UInt64(196))..=(UInt64(231)):((-56)|1)), ((UInt64(40))..(UInt64(14)):((-7)|1)), ((UInt64(157))..(UInt64(6)):(44|1)), ((UInt64(14))..(UInt64(13)):(119|1)), ((UInt64(228))..(UInt64(45)):((-9)|1)), ((UInt64(235))..(UInt64(246)):(27|1))], [((UInt64(139))..=(UInt64(85)):((-106)|1)), ((UInt64(31))..(UInt64(152)):(2|1)), ((UInt64(171))..=(UInt64(120)):(98|1)), ((UInt64(244))..(UInt64(61)):(86|1)), ((UInt64(218))..(UInt64(41)):(34|1)), ((UInt64(143))..=(UInt64(58)):((-99)|1)), ((UInt64(152))..=(UInt64(88)):(106|1)), ((UInt64(13))..(UInt64(43)):((-78)|1)), ((UInt64(241))..=(UInt64(58)):(88|1)), ((UInt64(151))..=(UInt64(61)):((-110)|1))], [((UInt64(172))..=(UInt64(171)):(14|1)), ((UInt64(76))..=(UInt64(137)):(118|1)), ((UInt64(161))..=(UInt64(8)):(10|1)), ((UInt64(178))..=(UInt64(62)):((-70)|1)), ((UInt64(208))..(UInt64(130)):(96|1)), ((UInt64(238))..=(UInt64(208)):(66|1)), ((UInt64(148))..=(UInt64(81)):((-96)|1)), ((UInt64(199))..(UInt64(156)):(48|1)), ((UInt64(152))..(UInt64(57)):(7|1)), ((UInt64(95))..(UInt64(84)):((-27)|1))]];
        func func579(namedParam580 ! : Range<UInt32>, namedParam581 ! : Rune, namedParam582 ! : Array<Bool>) : Range<Int16> { // block id: 583
            func587()[1];
            let var1243 : UInt8 = UInt8(Int32(82));
            var var1253 : Int16 = Int16(2);
            (Float64(Int8(-107)), ((UInt64(138))..=(UInt64(248)):((112|1))), match (Option<Option<Int32>>.None) {
                case _ : Bool => 
                    var var1210 : UInt8 = UInt8(UInt64(130));
                    (var31, [var503, Int32(44), Int32(-2), Int32(107), Int32(-62), var503, var503, var503, Int32(104), Int32(-95)], var31, ([Int32(-108), Int32(-120), Int32(-128), Int32(101), Int32(9), Int32(57), Int32(-35), Int32(-128), Int32(56), Int32(-39)], UInt16(65), 45, UInt32(250), Class94(), var1210, ((Int32(-70))..(var503):((100|1))), var125, var15), var1220);
                    namedParam494
                
                case _ : Int8 => 
                    ((UInt8(73))..(UInt8(245)):((-95)|1))
                
                case caseVar1238 : Array<Bool> => 
                    var1059;
                    ((var1243)..=(UInt8(210)):((122|1)))
                
                case _ => 
                    var31;
                    var1253;
                    ((UInt8(199))..=(UInt8(217)):((-35)|1))
                
                case _ => 
                    ();
                    [r'0', r'v', r'L', r'G', r'O', r'O', r'q', r'T', r'm', r'6'];
                    namedParam494
                
            }, (Option<Range<Int16>>.Some(var1267) ?? ((Int16(93))..(Int16(53)):((-91)|1))), var1280[1])[3]
        }
;
        let var1321 : Unit = ();
        let var1374 : Option<Rune> = Option<Rune>.None;
        let var1520 : UInt32 = UInt32(122);
        let var1813 : (Array<Int32>,UInt16,Int64,UInt32,Class94,UInt8,Range<Int32>,Float64, (UInt32,Bool,Int32)) = ([Int32(-60), Int32(-111), Int32(-38), Int32(-22), Int32(-47), Int32(83), Int32(-55), Int32(-118), Int32(-12), Int32(-39)], UInt16(Float64(Int32(-97))), (-66), UInt32(Int8(Int16(-30))), Class94(), UInt8(UInt32(113)), ((Int32(Float32(-48.0)))..=(Int32(-114)):((Int64(40.0)|1))), 27.0, (UInt32(165), ([[((UInt64(37))..=(UInt64(248)):((-105)|1)), ((UInt64(206))..=(UInt64(179)):((-113)|1)), ((UInt64(89))..=(UInt64(175)):((-20)|1)), ((UInt64(213))..=(UInt64(244)):((-49)|1)), ((UInt64(61))..(UInt64(53)):(9|1)), ((UInt64(55))..=(UInt64(181)):((-33)|1)), ((UInt64(146))..(UInt64(200)):((-67)|1)), ((UInt64(68))..=(UInt64(199)):(105|1)), ((UInt64(81))..(UInt64(78)):(24|1)), ((UInt64(114))..=(UInt64(176)):(47|1))], [((UInt64(6))..(UInt64(17)):((-62)|1)), ((UInt64(32))..(UInt64(251)):(82|1)), ((UInt64(58))..(UInt64(48)):((-72)|1)), ((UInt64(118))..(UInt64(82)):(46|1)), ((UInt64(155))..(UInt64(169)):((-54)|1)), ((UInt64(110))..=(UInt64(20)):(112|1)), ((UInt64(140))..=(UInt64(18)):((-39)|1)), ((UInt64(124))..(UInt64(169)):(103|1)), ((UInt64(74))..(UInt64(143)):(66|1)), ((UInt64(124))..=(UInt64(38)):((-29)|1))], [((UInt64(214))..=(UInt64(129)):((-116)|1)), ((UInt64(0))..=(UInt64(15)):((-49)|1)), ((UInt64(209))..(UInt64(141)):(60|1)), ((UInt64(136))..=(UInt64(21)):((-107)|1)), ((UInt64(156))..(UInt64(146)):((-77)|1)), ((UInt64(52))..=(UInt64(2)):((-65)|1)), ((UInt64(178))..=(UInt64(152)):(115|1)), ((UInt64(186))..=(UInt64(31)):((-80)|1)), ((UInt64(61))..=(UInt64(63)):((-7)|1)), ((UInt64(218))..(UInt64(156)):(39|1))], [((UInt64(62))..(UInt64(104)):((-79)|1)), ((UInt64(68))..(UInt64(156)):((-29)|1)), ((UInt64(88))..(UInt64(112)):((-13)|1)), ((UInt64(28))..=(UInt64(205)):((-36)|1)), ((UInt64(205))..=(UInt64(167)):(106|1)), ((UInt64(3))..(UInt64(12)):((-28)|1)), ((UInt64(19))..(UInt64(120)):((-17)|1)), ((UInt64(154))..(UInt64(50)):((-107)|1)), ((UInt64(169))..=(UInt64(195)):((-57)|1)), ((UInt64(173))..(UInt64(4)):(74|1))], [((UInt64(31))..=(UInt64(191)):((-115)|1)), ((UInt64(6))..=(UInt64(26)):((-81)|1)), ((UInt64(117))..(UInt64(124)):((-93)|1)), ((UInt64(54))..(UInt64(102)):(120|1)), ((UInt64(25))..=(UInt64(163)):(98|1)), ((UInt64(60))..=(UInt64(66)):((-106)|1)), ((UInt64(114))..=(UInt64(239)):((-26)|1)), ((UInt64(168))..=(UInt64(46)):(114|1)), ((UInt64(107))..=(UInt64(141)):(14|1)), ((UInt64(247))..(UInt64(249)):((-88)|1))], [((UInt64(15))..(UInt64(14)):(50|1)), ((UInt64(96))..=(UInt64(109)):(18|1)), ((UInt64(2))..(UInt64(5)):((-76)|1)), ((UInt64(90))..=(UInt64(43)):((-95)|1)), ((UInt64(123))..=(UInt64(248)):((-33)|1)), ((UInt64(44))..=(UInt64(48)):((-70)|1)), ((UInt64(191))..=(UInt64(251)):((-116)|1)), ((UInt64(141))..(UInt64(21)):((-67)|1)), ((UInt64(233))..(UInt64(223)):((-127)|1)), ((UInt64(123))..(UInt64(233)):(57|1))], [((UInt64(194))..=(UInt64(217)):(57|1)), ((UInt64(12))..(UInt64(2)):((-43)|1)), ((UInt64(92))..(UInt64(54)):((-51)|1)), ((UInt64(224))..=(UInt64(134)):((-73)|1)), ((UInt64(168))..=(UInt64(70)):((-45)|1)), ((UInt64(25))..=(UInt64(6)):(95|1)), ((UInt64(20))..=(UInt64(11)):(72|1)), ((UInt64(201))..(UInt64(137)):((-87)|1)), ((UInt64(30))..=(UInt64(249)):((-97)|1)), ((UInt64(31))..(UInt64(200)):((-40)|1))], [((UInt64(155))..=(UInt64(29)):(81|1)), ((UInt64(252))..=(UInt64(238)):((-33)|1)), ((UInt64(37))..=(UInt64(215)):((-112)|1)), ((UInt64(208))..(UInt64(181)):((-59)|1)), ((UInt64(82))..(UInt64(55)):(47|1)), ((UInt64(250))..=(UInt64(152)):(105|1)), ((UInt64(45))..=(UInt64(67)):(101|1)), ((UInt64(124))..=(UInt64(197)):(18|1)), ((UInt64(183))..(UInt64(43)):((-120)|1)), ((UInt64(15))..=(UInt64(188)):((-86)|1))], [((UInt64(155))..(UInt64(207)):(48|1)), ((UInt64(50))..(UInt64(6)):(52|1)), ((UInt64(5))..(UInt64(189)):((-98)|1)), ((UInt64(237))..=(UInt64(198)):(9|1)), ((UInt64(32))..(UInt64(243)):(68|1)), ((UInt64(229))..=(UInt64(73)):((-104)|1)), ((UInt64(182))..=(UInt64(22)):(100|1)), ((UInt64(121))..(UInt64(238)):((-19)|1)), ((UInt64(54))..(UInt64(20)):((-54)|1)), ((UInt64(113))..=(UInt64(248)):(13|1))], [((UInt64(52))..(UInt64(64)):((-80)|1)), ((UInt64(185))..=(UInt64(198)):((-91)|1)), ((UInt64(117))..=(UInt64(213)):(22|1)), ((UInt64(95))..=(UInt64(146)):(106|1)), ((UInt64(133))..=(UInt64(22)):(56|1)), ((UInt64(227))..=(UInt64(167)):((-94)|1)), ((UInt64(75))..=(UInt64(81)):(55|1)), ((UInt64(38))..(UInt64(41)):((-33)|1)), ((UInt64(11))..(UInt64(233)):(108|1)), ((UInt64(81))..=(UInt64(137)):((-127)|1))]] is Int16), Int32(Int64(UInt16(33)))));
        func func565(param566 : Range<Int32>, optionalParam567 ! : Range<Int64> = (((-125))..(37):((Int64(UInt16(UInt16(212)))|1))), namedParam574 ! : UInt16, optionalParam575 ! : Range<UInt8> = ((UInt8(137))..(UInt8(118)):(58|1))) : Range<UInt64> { // block id: 577
            var var1310 : Range<UInt16> = ((UInt16(18))..(UInt16(189)):(((-61)|1)));
            let var1527 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
            func func1407<T0>(namedParam1408 ! : Option<Rune>, optionalParam1409 ! : Option<Range<UInt32>> = Option<Range<UInt32>>.Some(var1290), namedParam1412 ! : (Range<UInt32>, Rune, Array<Bool>) -> Range<Int16>) : Array<Bool> where T0 <: Option<Range<UInt32>> { // block id: 1417
                try { // block id: 1419
                    var var1487 : Bool = (Option<Enum601<Option<Bool>, Float32>>.None is Option<Rune>);
                    [(r'r', ((Int32(-87))..=(Int32(80)):(120|1)), UInt64(253), ((var1355)..=(UInt8(28)):((22|1))), var781), (r'B', ((Int32(82))..=(Int32(-30)):((var717|1))), var725, ((UInt8(55))..(UInt8(87)):(102|1)), var99), (r'v', param566, var725, optionalParam575, var781), var1059, (r'j', ((Int32(-11))..(var503):(((-128)|1))), var725, ((UInt8(182))..(UInt8(186)):(59|1)), var781), (namedParam495, ((Int32(-77))..=(Int32(-45)):(98|1)), var725, ((var1355)..=(UInt8(65)):((38|1))), true), (var845, ((var503)..=(Int32(-8)):((var717|1))), var725, ((UInt8(85))..=(UInt8(42)):(73|1)), true), (r'q', ((Int32(-1))..(Int32(-45)):(7|1)), var725, namedParam494, true), (r'C', param566, var725, ((UInt8(43))..=(UInt8(151)):((-109)|1)), var1487), (r'B', ((Int32(-31))..=(var503):((var717|1))), var725, ((var1355)..=(UInt8(121)):((1|1))), false)][1];
                    [var99, var1487, var781, var1487, false, var99, var1487, var781, false, true]
                } catch (e: Exception) { // block id: 1514
                    var loopTimeVar1523 : Int64 = 0;
                    while (false && loopTimeVar1523 < 100 ) {
                        loopTimeVar1523++;
                        Option<Int32>.None;
                        var1520
                    };
                    var1527[1];
                    [false, true, true, false, false, false, false, true, true, true]
                } finally { // block id: 1531
                    if (var99) { // block id: 1534
                        true;
                        var1321
                    };
                    try { // block id: 1538
                        var125;
                        ((UInt32(150))..(UInt32(221)):((var717|1)));
                        var125
                    } catch (_) { // block id: 1545
                        80.0
                    };
                    if (var781) { [var781, var99, var99, var781, false, var781, var781, var1558, var99, var99] } else { [true, false, true, false, true, false, false, true, true, false] } 
                }
            }
;
            let var1572 : (Range<UInt32>, Rune, Array<Bool>) -> Range<Int16> = func579;
            func579(namedParam580 : (match ((Int8(120), r'P', var1303, (), var31, var1310)) {
                case (caseVar1317 : Range<UInt8>,'H',3,(),_,caseVar1323) => 
                    var31;
                    Option<Range<UInt32>>.None

                case (caseVar1317 : Range<UInt8>,'x',3,(),_,caseVar1323) => 
                    var31;
                    Option<Range<UInt32>>.None

                case (_,'x',_,_ : Interface633,(),caseVar1331 : (Array<Int32>,UInt16,Int64,UInt32,Class94,UInt8,Range<Int32>,Float64, (UInt32,Bool,Int32))) =>
                    var1220;
                    [var781, var99, var781, var781, false, var99, var99, var781, var781, true];
                    Option<Range<UInt32>>.Some(var1290)
                
                case _ => 
                    ();
                    Option<Range<UInt32>>.Some(var1290)
                
            } ?? if (var99) { // block id: 1352
                ((var1355)..=(UInt8(223)):(((-89)|1)));
                var1290
            } else { // block id: 1360
                var1290
            }), namedParam581 : (try { // block id: 1369
                UInt16(84);
                Option<Rune>.Some(var845)
            } finally { // block id: 1372
                var1374
            } ?? var1379[2]), namedParam582 : func1407<Option<Range<UInt32>>>(namedParam1408 : Class632<Option<Int32>, Enum601<Option<Bool>, Float32>>.var1566, namedParam1412 : var1572));
            var1321;
            let var1807 : Range<UInt64> = ((UInt64(140))..=(UInt64(11)):((-110)|1));
            if (match {
                case match (Option<Int32>.Some(var503)) {
                    case _ => 
                        var1321;
                        false
                    
                } => 
                var781
                case (var1592 ?? false) => 
                false
                case _ => 
                ();
                false
            }) { // block id: 1635
                var loopTimeVar1641 : Range<UInt64> = ((UInt64(26))..(UInt64(140)):((108|1)));
                for (i in loopTimeVar1641 where (var99)) {
                    UInt64(138);
                    ()
                };
                this.var1649;
                var1807
            } else { // block id: 1809
                Class94();
                var1813[2];
                try { // block id: 1842
                    let var1844 : Rune = r'f';
                    var1844;
                    Class632<Option<Int32>, Enum601<Option<Bool>, Float32>>();
                    ((UInt64(63))..=(UInt64(7)):((-98)|1))
                } finally { // block id: 1848
                    (var975, r'k', var1303, (), var31, var1310);
                    37;
                    ((UInt64(230))..(UInt64(160)):((-47)|1))
                }
            }
        }
;
        func565(if ((var1374 is () -> Int32)) { (var1863.func1866(namedParam1867 : var2216, namedParam1868 : var1813)) } else { (((Int32(-81))..=(Int32(-82)):((-12)|1)), (var845, var2216, var725, ((var1355)..(UInt8(160)):((var717|1))), true), var874, [r'I', r'8', r'8', r'G', var2266, namedParam495, var845, r'i', r'l', namedParam495], UInt16(191))[0] } , optionalParam567 : if (var99) { (var2280, (var1520, var781, var1904), r'x', UInt16(0), var2292, var1321) } else { (((UInt64(233))..(UInt64(111)):(124|1)), (var1520, var99, var503), namedParam495, var467, ((83)..=(72):((var717|1))), ()) } [4], namedParam574 : if ((this.var2316)) { var467 } else { (if (true) { var467 } else { var467 } ) } );
        match (func2326(optionalParam2327 : ((Int32(89))..(Int32(-83)):((-52)|1))).var2534) {
            case -122.0 => 
                var var2543 : Int32 = Int32(82);
                [var503, var2543, var1904, var1904, var1904, Int32(-39), Int32(-27), Int32(-114), Int32(79), Int32(62)]
            
            case -25.0 => 
                var2557
            
            case caseVar2586 => 
                [Int32(-16), Int32(-25), Int32(-75), Int32(119), Int32(11), Int32(21), Int32(-107), Int32(-24), Int32(-80), Int32(-81)]
            
            case _ => 
                (var2534, var2280, ((UInt8(180))..=(UInt8(205)):(20|1)), ((Int16(38))..=(Int16(109)):(((-47)|1))), var2600);
                ();
                var2557
            
        }
    }
;
    public static var var2629 : Bool = (Int16(UInt8(UInt64(27))) is Range<Int16>)
}




public enum Enum601<T0, T1> where T0 <: Option<Bool>, T1 <: Float32 {
    defaultValue
}

public open class Class632<T0, T1> <: Interface633 where T0 <: Option<Int32>, T1 <: Enum601<Option<Bool>, Float32> {
    public init() { // block id: 635

    }
;
    public static prop var638 : (Unit,Array<Int32>,Unit,(Array<Int32>,UInt16,Int64,UInt32,Class94,UInt8,Range<Int32>,Float64, (UInt32,Bool,Int32)), (Int8,Rune,Int16,Unit,Unit,Range<UInt16>)) { // block id: 639
        get() { // block id: 641
            ();
            ((), [Int32(UInt32(236)), Int32(UInt8(214)), Int32(-115), Int32((-79)), Int32(UInt32(65)), Int32(-31), Int32(Float32(-106.0)), Int32(64), Int32(UInt8(64)), Int32(Int32(106))], (), ([Int32(67), Int32(110), Int32(69), Int32(-42), Int32(-65), Int32(2), Int32(-116), Int32(-119), Int32(-110), Int32(-33)], UInt16(0), (-94), UInt32(21), Class94(), UInt8(61), ((Int32(47))..=(Int32(126)):((51|1))), (-64.0), (UInt32(70), true, Int32(-99))), (Int8(-113), r'4', Int16(Float32(65.0)), (), (), ((UInt16(50))..=(UInt16(112)):(((-86)|1)))))
        }

    };
    public static prop var1566 : Option<Rune> { // block id: 1567
        get() { // block id: 1569
            Option<Rune>.None
        }

    }
}

public interface Interface633 {
    func func2201(param2202 : (Array<Int32>,UInt16,Int64,UInt32,Class94,UInt8,Range<Int32>,Float64, (UInt32,Bool,Int32))) : Range<Int32> { // block id: 2203
        try { // block id: 2205
            var var2207 : Range<Int32> = ((Int32(UInt32((-112))))..(Int32(-91)):((85|1)));
            var2207
        } finally { // block id: 2214
            var2216
        }
    }
;
    func func1866(namedParam1867 ! : Range<Int32>, namedParam1868 ! : (Array<Int32>,UInt16,Int64,UInt32,Class94,UInt8,Range<Int32>,Float64, (UInt32,Bool,Int32))) : Range<Int32> { // block id: 1869
        var var1884 : Range<UInt8> = ((UInt8(151))..(UInt8(95)):((Int64(UInt8(UInt8(175)))|1)));
        try { // block id: 1871
            let var1924 :  (Rune,Range<Int32>,UInt64,Range<UInt8>,Bool) = (r'q', ((Int32(-83))..(Int32(65)):(119|1)), UInt64(UInt32(52)), ((UInt8(UInt8(39)))..(UInt8(131)):((Int64(Int32(4))|1))), (([(r'g', ((Int32(-54))..(Int32(24)):(((-122)|1))), UInt64(226), ((UInt8(141))..=(UInt8(241)):((29|1))), true), (r'H', ((Int32(-121))..(Int32(81)):((-75)|1)), UInt64(201), ((UInt8(172))..=(UInt8(147)):((-27)|1)), false), (r'7', ((Int32(-113))..(Int32(-21)):(18|1)), UInt64(176), ((UInt8(251))..=(UInt8(22)):((95|1))), false), (r'y', ((Int32(-50))..=(Int32(93)):(((-55)|1))), UInt64(97), ((UInt8(155))..=(UInt8(246)):((55|1))), false), (r'j', ((Int32(-75))..(Int32(-91)):(88|1)), UInt64(142), ((UInt8(15))..=(UInt8(134)):((-109)|1)), false), (r'r', ((Int32(-98))..=(Int32(-25)):((83|1))), UInt64(120), ((UInt8(244))..=(UInt8(143)):(66|1)), false), (r'u', ((Int32(58))..(Int32(35)):(((-4)|1))), UInt64(45), ((UInt8(60))..(UInt8(68)):(((-92)|1))), false), (r'T', ((Int32(58))..=(Int32(0)):(((-13)|1))), UInt64(53), ((UInt8(14))..(UInt8(203)):((74|1))), true), (r'X', ((Int32(-78))..=(Int32(15)):(((-95)|1))), UInt64(54), ((UInt8(50))..=(UInt8(235)):((70|1))), true), (r'N', ((Int32(32))..=(Int32(82)):((-42)|1)), UInt64(160), ((UInt8(24))..=(UInt8(79)):(97|1)), true)], UInt16(Int8(70)), Int8((-26.0)), UInt8(Int16(84))) is UInt16));
            let var2046 : Int32 = Int32(47.0);
            ([(var845, ((Int32(61))..(var503):((45|1))), var725, var1884, false), (r'K', namedParam1867, var725, var1884, false), var1059, (r'r', ((Int32(-108))..(var1904):(((-59)|1))), UInt64(218), ((var1355)..=(UInt8(1)):(((-12)|1))), var781), var1059, (r'2', namedParam1867, var725, ((UInt8(207))..=(UInt8(34)):(68|1)), true), var1059, var1059, var1924, (r'V', ((var503)..=(var2046):(((-111)|1))), var725, var1884, true)], UInt16(44), Int8(-14), UInt8(136))[2]
        } finally { // block id: 2057
            var31;
            Int8(-90)
        };
        let var2065 : UInt32 = UInt32(65);
        match (var15) {
            case (65,true,caseVar2071 : Range<Int32>) => 
                ((), [Int32(53), Int32(106), Int32(-62), Int32(-111), Int32(70), Int32(101), Int32(-18), Int32(-89), Int32(10), Int32(-95)], (), namedParam1868, (var975, r'E', Int16(-122), (), (), ((UInt16(38))..=(UInt16(54)):(95|1))))
            
            case _ => 
                let var2093 : Array<Int32> = [Int32(-45), Int32(-61), Int32(-11), Int32(-79), Int32(-55), Int32(117), Int32(87), Int32(68), Int32(65), Int32(-30)];
                (var31, [Int32(27), Int32(-112), Int32(97), Int32(37), Int32(-53), Int32(49), Int32(29), Int32(21), Int32(25), Int32(68)], var31, (var2093, UInt16(40), var717, var2065, var1081, var1355, ((Int32(24))..=(Int32(-73)):(1|1)), var125, (var2065, var2068, Int32(105))), (Int8(-87), var845, Int16(18), var31, var31, ((UInt16(242))..=(UInt16(141)):((-2)|1))))
            
        };
        let var2139 : Bool = ((UInt8(246), ((UInt64(35))..(UInt64(196)):((-43)|1)), ((UInt16(133))..=(UInt16(78)):((Int64(UInt32(27))|1))), (r's', ((Int32(27))..=(Int32(-55)):(26|1)), UInt64(41), ((UInt8(23))..(UInt8(247)):((27|1))), true), ((Int32(UInt16(98)))..(Int32(-36)):((Int64(Int8(-63))|1))), (), ((Int64(UInt8(214)))..((-6)):((85|1))), Int16(UInt64(238))) is Array<Rune>);
        let var2175 : Range<Int64> = ((Int64(Int8(33)))..=(Int64(102.0)):((Int64(UInt64(Int8(-66)))|1)));
        try { // block id: 2114
            (var1355, ((UInt64(249))..=(var725):((var717|1))), ((UInt16(125))..=(var467):((var717|1))), (r'z', ((var503)..(var503):((95|1))), UInt64(16), ((UInt8(23))..=(UInt8(58)):((113|1))), var2139), namedParam1867, (), var2175, Int16(5))[4]
        } finally { // block id: 2186
            [r'u', r'c', var845, r'0', r's', var845, var845, r's', r'G', r'e'];
            var1863.func2201(([var503, var503, var1904, var1904, var503, Int32(-58), Int32(-31), var1904, var1904, Int32(46)], UInt16(199), var717, UInt32(103), var1081, UInt8(151), ((var503)..=(Int32(11)):((var717|1))), var125, (UInt32(75), false, var1904)))
        }
    }

}

 func func703(param704 : Enum601<Option<Bool>, Float32>, optionalParam705 ! : UInt16 = UInt16(Int32(-70))) : Array<Rune> { // block id: 708
    var var734 : Range<UInt64> = ((UInt64(UInt8(UInt64(Int8(-47)))))..(UInt64(201)):((Int64((-87.0))|1)));
    let var757 : Range<UInt64> = ((UInt64(Float32(-124.0)))..=(UInt64(132)):((Int64(Float64(UInt16(221)))|1)));
    let var766 : Range<UInt64> = ((UInt64(161))..=(UInt64(211)):(87|1));
    try { // block id: 710
        try { // block id: 712
            ((UInt64(202))..(UInt64(18)):((var717|1)))
        } catch (_) { // block id: 721
            ((UInt64(209))..=(var725):((var717|1)))
        }
    } catch (_) { // block id: 728
        Int32(-74);
        [var734, ((UInt64(211))..(UInt64(127)):(57|1)), ((UInt64(81))..=(UInt64(205)):((-113)|1)), ((var725)..(var725):((var717|1))), ((UInt64(158))..(UInt64(211)):((-8)|1)), ((UInt64(56))..=(UInt64(233)):(16|1)), ((UInt64(167))..(UInt64(161)):((-119)|1)), ((var725)..=(UInt64(99)):(((-24)|1))), var757, var766][9]
    };
    var var991 : (Unit,Array<Int32>,Unit,(Array<Int32>,UInt16,Int64,UInt32,Class94,UInt8,Range<Int32>,Float64, (UInt32,Bool,Int32)), (Int8,Rune,Int16,Unit,Unit,Range<UInt16>)) = ((), [Int32(UInt64(230)), Int32(-2), Int32(UInt16(117)), Int32(85), Int32(-82), Int32(-90), Int32(Float64(Int8(-30))), Int32(-23), Int32(Float32(Float32(-53.0))), Int32(Float32(Int32(117)))], (), ([Int32(-34), Int32(37), Int32(Int32(79)), Int32(Int8(-99)), Int32((-70.0)), Int32(-1), Int32(8), Int32(65), Int32(26), Int32(37)], UInt16(UInt8(58)), 114, UInt32(249), Class94(), UInt8(58), ((Int32(-107))..(Int32(119)):(30|1)), Float64(Int64(Int8(-103))), (UInt32(17), false, Int32((-50.0)))), (Int8(UInt32(211)), r'S', Int16(-2), (), (), ((UInt16(175))..=(UInt16(65)):((22|1)))));
    var var1103 : Int16 = Int16(67.0);
    let var1109 : Range<Int16> = ((Int16(1))..=(Int16(-54)):(31|1));
    let var1143 : Int8 = Int8(UInt64(57.0));
    func770(match (((Int32(-99))..(Int32(-14)):(38|1))) {
        case _ => 
            var31;
            122.0;
            var899
        
        case _ => 
            ();
            ();
            Option<Enum601<Option<Bool>, Float32>>.None
        
    }, try { // block id: 907
        [Int32(-51), var503, Int32(-22), var503, Int32(-95), Int32(-86), Int32(66), Int32(-36), Int32(88), var503];
        ();
        let var921 : (Unit,Array<Int32>,Unit,(Array<Int32>,UInt16,Int64,UInt32,Class94,UInt8,Range<Int32>,Float64, (UInt32,Bool,Int32)), (Int8,Rune,Int16,Unit,Unit,Range<UInt16>)) = ((), [Int32(-33), Int32(-60), Int32(-18), Int32(-121), Int32(122), Int32(-74), Int32(75), Int32(-85), Int32(-64), Int32(-89)], (), ([Int32(58), Int32(69), Int32(-35), Int32(13), Int32(120), Int32(-30), Int32(120), Int32(32), Int32(5), Int32(55)], UInt16(182), 37, UInt32(39), Class94(), UInt8(UInt64(Int32(4))), ((Int32(UInt16(155)))..=(Int32(58)):((105|1))), Float64(Float64(Int16(-46))), (UInt32(Int16(-12)), false, Int32(-90))), (Int8(UInt16(241)), r'z', Int16(Float32(-103.0)), (), (), ((UInt16((-104.0)))..=(UInt16(UInt16(144))):(((-122)|1)))));
        var921
    } finally { // block id: 972
        var var983 : Int16 = Int16(Int16(87));
        (var975, r'N', var983, var31, (), ((UInt16(225))..=(UInt16(21)):((-85)|1)));
        ();
        var991
    }, if (var1059[4]) { (var1081.var1084) } else { (if (true) { ((var1103)..=(Int16(114)):(((-36)|1))) } else { var1109 } ) } , namedParam774 : match (if (var781) { (Int8(69), var845, Int16(-107), (), (), ((UInt16(245))..=(optionalParam705):(((-118)|1)))) } else { (Int8(-86), var845, var1103, (), (), ((UInt16(183))..=(UInt16(109)):(97|1))) } ) {
        case (caseVar1133 : Range<Int8>,caseVar1134 : Int16,_ : String,caseVar1135 : Interface633,_ : Range<UInt64>,_ : UInt64) => 
            var975
        
        case _ => 
            Float32(-45.0);
            ();
            var1143
        
    })
}

public func func770(param771 : Option<Enum601<Option<Bool>, Float32>>, param772 : (Unit,Array<Int32>,Unit,(Array<Int32>,UInt16,Int64,UInt32,Class94,UInt8,Range<Int32>,Float64, (UInt32,Bool,Int32)), (Int8,Rune,Int16,Unit,Unit,Range<UInt16>)), param773 : Range<Int16>, namedParam774 ! : Int8) : Array<Rune> { // block id: 775
    ();
    try { // block id: 778
        match {
            case var781 => 
            ((UInt16(151))..=(UInt16(70)):(94|1));
            (namedParam774, var845, Int16(96), var31, (), ((UInt16(66))..(var467):(((-9)|1))));
            ((namedParam774)..(namedParam774):((9|1)))
            case _ => 
            let var860 : Range<Int8> = ((Int8(UInt32((-48))))..(Int8(Int32(-47))):(((-77)|1)));
            var860
        };
        Option<Array<Rune>>.None.getOrThrow()
    } catch (_) { // block id: 877
        let var879 : Array<Rune> = [r'9', r'c', r'8', r'2', r'k', r'Z', r'D', r'9', r'R', r'E'];
        var879
    }
}






 func func2326(optionalParam2327 ! : Range<Int32> = ((Int32(82))..=(Int32(-25)):((-86)|1))) : Class94 { // block id: 2329
    var var2334 : Option<Option<Int32>> = Option<Option<Int32>>.Some(var511);
    var var2383 : (Range<Int64>,Range<Int64>,Array<Range<UInt64>>,Bool,UInt16,Array<Int32>) = (((31)..(19):(61|1)), ((Int64(Int32(UInt16(72))))..(Int64(UInt32(18.0))):((Int64(Int8(Float32(86.0)))|1))), [((UInt64(Int32(14)))..=(UInt64(45)):(((-60)|1))), ((UInt64((-57.0)))..(UInt64(Float32(89.0))):((Int64((-17))|1))), ((UInt64(UInt16(168)))..=(UInt64(127)):(((-64)|1))), ((UInt64(180))..=(UInt64(160)):(44|1)), ((UInt64(202))..(UInt64(53)):((-80)|1)), ((UInt64(130))..=(UInt64(UInt32(133))):((92|1))), ((UInt64(105))..(UInt64(32)):(20|1)), ((UInt64(87))..(UInt64(37)):((-47)|1)), ((UInt64(Int8(28)))..=(UInt64(169)):((Int64(Float32(69.0))|1))), ((UInt64(Int16(44)))..(UInt64(UInt16(219))):(((-17)|1)))], (Option<Unit>.None is (Range<Int32>, (Rune,Range<Int32>,UInt64,Range<UInt8>,Bool),Array<Rune>,Array<Rune>,UInt16)), UInt16(Int16(-107)), [Int32(UInt32(157)), Int32(-113), Int32((-70.0)), Int32(94), Int32(Float32(-100.0)), Int32(29), Int32(-60), Int32(UInt8(62)), Int32(105), Int32(-16)]);
    (if ((var2334 is Array< (Rune,Range<Int32>,UInt64,Range<UInt8>,Bool)>)) { try { // block id: 2340
        var31;
        ();
        ((Int32(-67))..(Int32(43)):((var717|1)))
    } finally { // block id: 2347
        var31;
        var2350;
        var2216
    } } else { match (var2357) {
        case defaultValue => 
            ((UInt32(93))..(UInt32(100)):(6|1));
            ();
            ((Int32(47))..(var1904):((var717|1)))
        
        case defaultValue => 
            ((Int32(109))..=(Int32(1)):((-61)|1))
        
        case _ => 
            ((UInt16(64))..(UInt16(168)):((109|1)));
            ((Int32(40))..(Int32(17)):((-9)|1))
        
    } } , if (var2383[3]) { (Option< (Rune,Range<Int32>,UInt64,Range<UInt8>,Bool)>.None ?? (var2465, ((Int32(67))..=(Int32(-103)):(60|1)), var725, ((UInt8(120))..(UInt8(50)):(8|1)), false)) } else { (if (var2068) { var1059 } else { (var2266, var2216, UInt64(189), ((UInt8(253))..(UInt8(61)):((-83)|1)), var781) } ) } , var874, try { // block id: 2482
        var874
    } finally { // block id: 2484
        var31;
        [r'T', r'l', r'2', r'f', r'i', r'z', r'd', r'5', r'0', r'y']
    }, UInt16(239));
    var var2490 : (UInt8,Range<UInt64>,Range<UInt16>, (Rune,Range<Int32>,UInt64,Range<UInt8>,Bool),Range<Int32>,Unit,Range<Int64>,Int16) = (UInt8(146), ((UInt64(72))..=(UInt64(56)):(12|1)), ((UInt16(37))..=(UInt16(0)):(107|1)), (r'W', ((Int32(-83))..=(Int32(58)):(68|1)), UInt64(27), ((UInt8(UInt16(121)))..(UInt8(115)):(((-128)|1))), false), ((Int32(UInt8(Int16(-23))))..=(Int32(81)):((Int64(Int8(Int32(-100)))|1))), (), ((28)..(Int64(Int16(-34))):(((-122)|1))), Int16(-79));
    match (var2490) {
        case _ : (Array< (Rune,Range<Int32>,UInt64,Range<UInt8>,Bool)>,UInt16,Int8,UInt8) =>
            ((UInt8(248))..=(UInt8(206)):((-89)|1));
            Class94()
        
        case _ => 
            var2528;
            var2068;
            Class94()
        
    }
}

public enum Enum2354 {
    defaultValue
}

extend Class94 {

}

extend<T0, T1> Class632<T0, T1> where T0 <: Option<Int32>, T1 <: Enum601<Option<Bool>, Float32> {

}

extend<T0, T1> Enum601<T0, T1> where T0 <: Option<Bool>, T1 <: Float32 {

}


/*
return code: 139
*/
// ASSERT: scan sema_unreachable_pattern
// ASSERT: scan sema_recursive_constructor_call


