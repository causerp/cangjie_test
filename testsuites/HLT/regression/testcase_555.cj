/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// (CJNATIVE) EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// (CJNATIVE) RUN-EXEC: %run %run_opt %output %run_args
// (not CJNATIVE) ERRCHECK: %compiler %overflow_wrapping %f %cmp_opt

public var var_1702191518486_217 : Class_1702191518486_212 = Class_1702191518486_212()
let var_1702191518486_325 : Option<Bool> = (Class_1702191518486_212() as Bool)
var var_1702191518486_502 : Unit = ()
let var_1702191518486_520 : Unit = ()
let var_1702191518486_625 : (Array<UInt64>, VArray<Unit, $7>, Range<UInt8>, Option<(Float32, Interface_1702191518486_580, (Int16, Range<UInt64>, Bool, Range<Int32>, Range<UInt8>, Range<Int8>), Option<Array<VArray<Unit, $7>>>, Int32)>, Range<UInt8>, Option<VArray<Bool, $1>>, Bool, Int8) = ([UInt64(107), UInt64(199), UInt64(246), UInt64(18), UInt64(44), UInt64(47), UInt64(0), UInt64(58), UInt64(144), UInt64(138)], VArray<Unit, $7>({ i => ()}), ((UInt8(UInt8(Int8(Int8(41))))&127)..=(UInt8(UInt8(UInt8(UInt8(226))))&127):(Int64(12)|1)), (Class_1702191518486_571() as (Float32, Interface_1702191518486_580, (Int16, Range<UInt64>, Bool, Range<Int32>, Range<UInt8>, Range<Int8>), Option<Array<VArray<Unit, $7>>>, Int32)), ((UInt8(UInt8(198))&127)..(UInt8(UInt8(241))&127):(Int64(63)|1)), (((UInt8(UInt8(75))&127)..(UInt8(UInt8(20))&127):(Int64(-71)|1)) as VArray<Bool, $1>), (UInt64(UInt16(Int8(42))) is (Int16) -> Bool), Int8(78))
const var_1702191518486_697 : Int32 = 22
let var_1702191518486_706 : Int16 = Int16(Int16(UInt8(Int8(Int8(-119)))))
let var_1702191518486_713 : Range<UInt64> = ((UInt64(UInt64(UInt8(154)))&127)..(UInt64(UInt64(195))&127):(Int64(Int64(-82))|1))
public let var_1702191518486_731 : Range<Int8> = ((Int8(Int8(-72))&127)..(Int8(Int8(-52))&127):(Int64(-55)|1))
public let var_1702191518486_752 : Option<UInt8> = Option<UInt8>.None
let var_1702191518486_903 : Int16 = Int16(123)
public let var_1702191518486_918 : (Int64, Int16, Int8, Option<Unit>, String) = (Int64(-33), Int16(Int16(Int16(-113))), Int8(Int8(Int8(Int8(76)))), Option<Unit>.None, ###"<z7q%rhcD}"###)
let var_1702191518486_938 : Class_1702191518486_94 = Class_1702191518486_94()
public const var_1702191518486_978 : UInt8 = 190
public let var_1702191518486_1018 : Option<Array<Range<Int32>>> = Option<Array<Range<Int32>>>.None
const var_1702191518486_1028 : Int32 = 111
var var_1702191518486_1041 : Range<Int32> = ((Int32(Int32(-93))&127)..=(Int32(Int32(-118))&127):(Int64(-11)|1))
let var_1702191518486_1059 : Array<Float32> = [Float32(-120.0), Float32(49.0), Float32(78.0), Float32(-90.0), Float32(-103.0), Float32(125.0), Float32(-107.0), Float32(-21.0), Float32(-20.0), Float32(109.0)]
public var var_1702191518486_1088 : UInt32 = UInt32(Int32(-9))
public let var_1702191518486_1099 : Bool = false
var var_1702191518486_1146 : Option<Array<VArray<Unit, $7>>> = Option<Array<VArray<Unit, $7>>>.None
var var_1702191518486_1154 : Bool = true
public const var_1702191518486_1157 : Rune = r'z'
const var_1702191518486_1176 : UInt = 166
var var_1702191518486_1186 : UInt = UInt64(234)
public const var_1702191518486_1196 : Unit = ()
public var var_1702191518486_1199 : Range<UInt8> = ((UInt8(UInt8(224))&127)..=(UInt8(UInt8(97))&127):(Int64(18)|1))
public var var_1702191518486_1207 : Option<VArray<Bool, $1>> = (UInt8(116) as VArray<Bool, $1>)
public var var_1702191518486_1275 : Int64 = Int64(-77)
public let var_1702191518486_1322 : Array<UInt64> = [UInt64(3), UInt64(UInt16(UInt8(UInt8(168)))), UInt64(UInt64(184)), UInt64(Int32(Int8(Int8(63)))), UInt64(Int32(Int16(114))), UInt64(Int32(Int32(UInt16(233)))), UInt64(51), UInt64(Int32(-20)), UInt64(UInt16(241)), UInt64(189)]
public let var_1702191518486_1356 : Float32 = Float32(Float32(100.0))
var var_1702191518486_1499 : (Array<VArray<Unit, $7>>, (Int64, Int16, Int8, Option<Unit>, String), Interface_1702191518486_582, Int32) = ([VArray<Unit, $7>({ i => ()}), VArray<Unit, $7>({ i => ()}), VArray<Unit, $7>({ i => ()}), VArray<Unit, $7>({ i => ()}), VArray<Unit, $7>({ i => ()}), VArray<Unit, $7>({ i => ()}), VArray<Unit, $7>({ i => ()}), VArray<Unit, $7>({ i => ()}), VArray<Unit, $7>(repeat: ()), VArray<Unit, $7>(repeat: ())], (Int64(-20), Int16(UInt16(Int8(-80))), Int8(Int8(25)), (Class_1702191518486_571() as Unit), """
7^KDJ
GcOD~
"""), Class_1702191518486_571(), Int32(22))

public open class Class_1702191518486_94 {
    public init() { // block id: 96

    }
;
    public static const var_1702191518486_300 : Int8 = 41
    static init() {
    }
}


public interface Interface_1702191518486_215<T0, T1> {
    static func func_1702191518486_561() : VArray<Bool, $1> { // block id: 562
        let var_1702191518486_596 : UInt8 = UInt8(UInt8(166));
        let var_1702191518486_721 : Bool = false;
        let var_1702191518486_727 : Int64 = Int64(-101);
        let var_1702191518486_760 : UInt64 = UInt64(60);
        const var_1702191518486_820 : Int16 = 117;
        let var_1702191518486_851 : Array<Int16> = [Int16(-81), Int16(-94), Int16(-40), Int16(59), Int16(69), Int16(112), Int16(111), Int16(-22), Int16(50), Int16(-8)];
        let var_1702191518486_879 : Int16 = Int16(-1);
        const var_1702191518486_894 : Int16 = -86;
        func func_1702191518486_608(param_1702191518486_609 : UInt32, namedParam_1702191518486_610 ! : (Int64, Int16, Int8, Option<Unit>, String), namedParam_1702191518486_611 ! : Interface_1702191518486_574, optionalParam_1702191518486_612 ! : UInt32 = UInt32(138)) : Int16 { // block id: 614
            (var_1702191518486_625[3] ?? try { // block id: 656
                let var_1702191518486_658 : Interface_1702191518486_574 = Class_1702191518486_571();
                var_1702191518486_658;
                ();
                let var_1702191518486_663 : Float32 = Float32(Float32(Float32(Float32(-107.0))));
                var var_1702191518486_670 : (Int16, Range<UInt64>, Bool, Range<Int32>, Range<UInt8>, Range<Int8>) = (Int16(UInt8(Int8(UInt8(216)))), ((UInt64(UInt64(103))&127)..=(UInt64(UInt64(UInt16(251)))&127):(Int64(-33)|1)), true, ((Int32(Int32(-58))&127)..(Int32(Int32(UInt32(Int8(-8))))&127):(Int64(UInt64(118))|1)), ((UInt8(UInt8(30))&127)..=(UInt8(UInt8(148))&127):(Int64(67)|1)), ((Int8(Int8(Int8(111)))&127)..(Int8(Int8(53))&127):(Int64(-120)|1)));
                (var_1702191518486_663, Class_1702191518486_571(), var_1702191518486_670, Option<Array<VArray<Unit, $7>>>.None, var_1702191518486_697)
            } finally { // block id: 699
                var_1702191518486_520;
                var var_1702191518486_735 : Array<VArray<Unit, $7>> = [[(), (), (), (), (), (), ()], [(), (), (), (), (), (), ()], [(), (), (), (), (), (), ()], [(), (), (), (), (), (), ()], [(), (), (), (), (), (), ()], [(), (), (), (), (), (), ()], [(), (), (), (), (), (), ()], [(), (), (), (), (), (), ()], [(), (), (), (), (), (), ()], [(), (), (), (), (), (), ()]];
                let var_1702191518486_738 : Int32 = Int32(Int32(UInt32(UInt16(31))));
                (Float32(-79.0), Class_1702191518486_571(), (var_1702191518486_706, var_1702191518486_713, var_1702191518486_721, ((Int32(Int32(-128))&127)..=(Int32(Int32(-4))&127):(var_1702191518486_727|1)), ((UInt8(UInt8(151))&127)..=(UInt8(UInt8(59))&127):(Int64(-36)|1)), var_1702191518486_731), Option<Array<VArray<Unit, $7>>>.Some(var_1702191518486_735), var_1702191518486_738)
            })[1];
            const var_1702191518486_807 : Int8 = -59;
            var var_1702191518486_812 : Option<Array<VArray<Unit, $7>>> = Option<Array<VArray<Unit, $7>>>.None;
            var var_1702191518486_854 : Array<Int16> = [Int16(60), Int16(Int8(-93)), Int16(Int8(Int8(9))), Int16(17), Int16(Int8(UInt8(228))), Int16(-28), Int16(-83), Int16(-83), Int16(-87), Int16(56)];
            match ((var_1702191518486_752 ?? UInt8(102))) {
                case _ => 
                    ((UInt64(var_1702191518486_760)&127)..=(UInt64(var_1702191518486_760)&127):(var_1702191518486_727|1));
                    var_1702191518486_706 & Int16(-74)
                
                case 120 | 205 => 
                    let var_1702191518486_774 : Range<UInt32> = ((UInt32(UInt32(Int8(20)))&127)..(UInt32(UInt32(UInt16(136)))&127):(Int64(UInt32(72))|1));
                    if (var_1702191518486_721) { ((UInt32(UInt32(242))&127)..(UInt32(UInt32(217))&127):(Int64(-87)|1)) } else { var_1702191518486_774 } ;
                    Int16(62) + var_1702191518486_706
                
                case _ => 
                    Class_1702191518486_571();
                    Option<(Float32, Interface_1702191518486_580, (Int16, Range<UInt64>, Bool, Range<Int32>, Range<UInt8>, Range<Int8>), Option<Array<VArray<Unit, $7>>>, Int32)>.Some((Float32(-93.0), Class_1702191518486_571(), (Int16(-116), ((UInt64(var_1702191518486_760)&127)..(UInt64(var_1702191518486_760)&127):(Int64(86)|1)), true, ((Int32(var_1702191518486_697)&127)..(Int32(Int32(-114))&127):(var_1702191518486_727|1)), ((UInt8(UInt8(248))&127)..(UInt8(UInt8(32))&127):(Int64(-62)|1)), ((Int8(var_1702191518486_807)&127)..(Int8(Int8(125))&127):(Int64(-89)|1))), var_1702191518486_812, Int32(-116)));
                    var_1702191518486_706
                
                case _ => 
                    var_1702191518486_820
                
            } + [[Int16(98), Int16(4), Int16(-26), Int16(64), Int16(-70), Int16(-60), Int16(-106), Int16(36), Int16(-108), Int16(31)], [Int16(-42), var_1702191518486_706, var_1702191518486_820, Int16(7), Int16(12), var_1702191518486_706, Int16(-81), Int16(-38), Int16(85), var_1702191518486_706], [Int16(-76), var_1702191518486_706, Int16(-78), Int16(-101), var_1702191518486_706, var_1702191518486_820, Int16(80), Int16(46), var_1702191518486_820, var_1702191518486_706], var_1702191518486_851, var_1702191518486_854, [Int16(-14), Int16(-77), var_1702191518486_820, var_1702191518486_706, Int16(93), Int16(19), var_1702191518486_879, var_1702191518486_706, var_1702191518486_879, var_1702191518486_706], var_1702191518486_851, [Int16(-99), var_1702191518486_820, var_1702191518486_879, var_1702191518486_706, Int16(-83), var_1702191518486_879, var_1702191518486_820, var_1702191518486_894, Int16(31), var_1702191518486_706], var_1702191518486_851, [Int16(32), var_1702191518486_879, var_1702191518486_903, var_1702191518486_820, var_1702191518486_894, Int16(105), Int16(20), Int16(-18), var_1702191518486_879, var_1702191518486_820]][6][1]
        }
;
        const var_1702191518486_915 : UInt32 = 171;
        var var_1702191518486_931 : Interface_1702191518486_574 = Class_1702191518486_571();
        VArray<Bool, $1>(repeat: (func_1702191518486_608(var_1702191518486_915, namedParam_1702191518486_610 : var_1702191518486_918, namedParam_1702191518486_611 : var_1702191518486_931)|>{ lambdaParameter_1702191518486_567 : Int16 => var var_1702191518486_585 : Class_1702191518486_571 = Class_1702191518486_571(); match (var_1702191518486_585.var_1702191518486_588) {
            case caseVar_1702191518486_592 : UInt64 => 
                var_1702191518486_596 % ((var_1702191518486_596) | 1);
                false
            
            case _ => 
                Int8(83) <= Int8(33)
            
        } }))
    }

}

public open class Class_1702191518486_212 <: Class_1702191518486_94 & Interface_1702191518486_215<Bool, Range<UInt8>> {
    public init() { // block id: 214

    }
;
    static const var_1702191518486_238 : UInt64 = 115;
    public static prop var_1702191518486_242 : Int { // block id: 243
        get() { // block id: 245
            Int64(106)
        }

    };
    public mut prop var_1702191518486_1450 : Option<Range<Int8>> { // block id: 1451
        get() { // block id: 1453
            Class_1702191518486_571();
            ((Int32(Int32(UInt8(Int8(71))))&127)..(Int32(Int32(101))&127):(Int64(Int8(104))|1));
            Option<Range<Int8>>.None;
            var_1702191518486_1601
        }

        set(Value) { // block id: 1465
            Int16(UInt8(115));
            ();
            var_1702191518486_1601 = Value
        }

    };
    public func func_1702191518486_220(param_1702191518486_221 : Float32, optionalParam_1702191518486_222 ! : UInt32 = UInt32(64), optionalParam_1702191518486_224 ! : Option<Unit> = Option<Unit>.None, optionalParam_1702191518486_226 ! : UInt32 = UInt32(106)) : VArray<Unit, $7> { // block id: 228
        var loopTimeVar_1702191518486_267 : Int64 = 0;
        while ((false) && loopTimeVar_1702191518486_267 < 100 ) {
            loopTimeVar_1702191518486_267++;
            const var_1702191518486_248 : Bool = true;
            (Int16(40), ((UInt64(var_1702191518486_238)&127)..(UInt64(var_1702191518486_238)&127):(var_1702191518486_242|1)), var_1702191518486_248, ((Int32(Int32(-30))&127)..=(Int32(Int32(-61))&127):(Int64(6)|1)), ((UInt8(UInt8(239))&127)..(UInt8(UInt8(70))&127):(Int64(-81)|1)), ((Int8(Int8(47))&127)..(Int8(Int8(126))&127):(Int64(-98)|1)))[4];
            var loopTimeVar_1702191518486_260 : Range<UInt64> = ((UInt64(UInt64(UInt16(110)))&127)..=(UInt64(UInt64(150))&127):(Int64(-59)|1));
            for (i in loopTimeVar_1702191518486_260 where false) {

            }
        };
        let var_1702191518486_286 : (Int16) -> Bool = func_1702191518486_270;
        var loopTimeVar_1702191518486_302 : Range<UInt64> = ((UInt64(UInt64(148))&127)..(UInt64(UInt64(162))&127):(Int64(-29)|1));
        for (i in loopTimeVar_1702191518486_302 where (if (false) { // block id: 290
            ();
            Int16(58) % ((Int16(-66)) | 1)
        } else { // block id: 295
            Int8(-2);
            Int16(-31)
        }|>var_1702191518486_286)) {
            var_1702191518486_300
        };
        (var_1702191518486_1450 ?? try { // block id: 1470
            var_1702191518486_1196;
            var var_1702191518486_1474 : Int8 = Int8(29);
            ((Int8(var_1702191518486_1474)&127)..(Int8(Int8(-9))&127):(var_1702191518486_1275|1))
        } finally { // block id: 1478
            if (true) { ((Int8(Int8(-127))&127)..=(Int8(Int8(78))&127):(Int64(69)|1)) } else { ((Int8(Int8(-11))&127)..=(Int8(Int8(-39))&127):(Int64(-35)|1)) } 
        })|>func_1702191518486_308
    }
;
    mut prop var_1702191518486_1601 : Option<Range<Int8>> { // block id: 1602
        get() { // block id: 1604
            (Int64(Int32(-92)) as Range<Int8>)
        }

        set(Value) { // block id: 1610

        }

    };
    public static func func_1702191518486_561() : VArray<Bool, $1> { // block id: 562
        let var_1702191518486_596 : UInt8 = UInt8(UInt8(166));
        let var_1702191518486_721 : Bool = false;
        let var_1702191518486_727 : Int64 = Int64(-101);
        let var_1702191518486_760 : UInt64 = UInt64(60);
        const var_1702191518486_820 : Int16 = 117;
        let var_1702191518486_851 : Array<Int16> = [Int16(-81), Int16(-94), Int16(-40), Int16(59), Int16(69), Int16(112), Int16(111), Int16(-22), Int16(50), Int16(-8)];
        let var_1702191518486_879 : Int16 = Int16(-1);
        const var_1702191518486_894 : Int16 = -86;
        func func_1702191518486_608(param_1702191518486_609 : UInt32, namedParam_1702191518486_610 ! : (Int64, Int16, Int8, Option<Unit>, String), namedParam_1702191518486_611 ! : Interface_1702191518486_574, optionalParam_1702191518486_612 ! : UInt32 = UInt32(138)) : Int16 { // block id: 614
            (var_1702191518486_625[3] ?? try { // block id: 656
                let var_1702191518486_658 : Interface_1702191518486_574 = Class_1702191518486_571();
                var_1702191518486_658;
                ();
                let var_1702191518486_663 : Float32 = Float32(Float32(Float32(Float32(-107.0))));
                var var_1702191518486_670 : (Int16, Range<UInt64>, Bool, Range<Int32>, Range<UInt8>, Range<Int8>) = (Int16(UInt8(Int8(UInt8(216)))), ((UInt64(UInt64(103))&127)..=(UInt64(UInt64(UInt16(251)))&127):(Int64(-33)|1)), true, ((Int32(Int32(-58))&127)..(Int32(Int32(UInt32(Int8(-8))))&127):(Int64(UInt64(118))|1)), ((UInt8(UInt8(30))&127)..=(UInt8(UInt8(148))&127):(Int64(67)|1)), ((Int8(Int8(Int8(111)))&127)..(Int8(Int8(53))&127):(Int64(-120)|1)));
                (var_1702191518486_663, Class_1702191518486_571(), var_1702191518486_670, Option<Array<VArray<Unit, $7>>>.None, var_1702191518486_697)
            } finally { // block id: 699
                var_1702191518486_520;
                var var_1702191518486_735 : Array<VArray<Unit, $7>> = [[(), (), (), (), (), (), ()], [(), (), (), (), (), (), ()], [(), (), (), (), (), (), ()], [(), (), (), (), (), (), ()], [(), (), (), (), (), (), ()], [(), (), (), (), (), (), ()], [(), (), (), (), (), (), ()], [(), (), (), (), (), (), ()], [(), (), (), (), (), (), ()], [(), (), (), (), (), (), ()]];
                let var_1702191518486_738 : Int32 = Int32(Int32(UInt32(UInt16(31))));
                (Float32(-79.0), Class_1702191518486_571(), (var_1702191518486_706, var_1702191518486_713, var_1702191518486_721, ((Int32(Int32(-128))&127)..=(Int32(Int32(-4))&127):(var_1702191518486_727|1)), ((UInt8(UInt8(151))&127)..=(UInt8(UInt8(59))&127):(Int64(-36)|1)), var_1702191518486_731), Option<Array<VArray<Unit, $7>>>.Some(var_1702191518486_735), var_1702191518486_738)
            })[1];
            const var_1702191518486_807 : Int8 = -59;
            var var_1702191518486_812 : Option<Array<VArray<Unit, $7>>> = Option<Array<VArray<Unit, $7>>>.None;
            var var_1702191518486_854 : Array<Int16> = [Int16(60), Int16(Int8(-93)), Int16(Int8(Int8(9))), Int16(17), Int16(Int8(UInt8(228))), Int16(-28), Int16(-83), Int16(-83), Int16(-87), Int16(56)];
            match ((var_1702191518486_752 ?? UInt8(102))) {
                case _ => 
                    ((UInt64(var_1702191518486_760)&127)..=(UInt64(var_1702191518486_760)&127):(var_1702191518486_727|1));
                    var_1702191518486_706 & Int16(-74)
                
                case 120 | 205 => 
                    let var_1702191518486_774 : Range<UInt32> = ((UInt32(UInt32(Int8(20)))&127)..(UInt32(UInt32(UInt16(136)))&127):(Int64(UInt32(72))|1));
                    if (var_1702191518486_721) { ((UInt32(UInt32(242))&127)..(UInt32(UInt32(217))&127):(Int64(-87)|1)) } else { var_1702191518486_774 } ;
                    Int16(62) + var_1702191518486_706
                
                case _ => 
                    Class_1702191518486_571();
                    Option<(Float32, Interface_1702191518486_580, (Int16, Range<UInt64>, Bool, Range<Int32>, Range<UInt8>, Range<Int8>), Option<Array<VArray<Unit, $7>>>, Int32)>.Some((Float32(-93.0), Class_1702191518486_571(), (Int16(-116), ((UInt64(var_1702191518486_760)&127)..(UInt64(var_1702191518486_760)&127):(Int64(86)|1)), true, ((Int32(var_1702191518486_697)&127)..(Int32(Int32(-114))&127):(var_1702191518486_727|1)), ((UInt8(UInt8(248))&127)..(UInt8(UInt8(32))&127):(Int64(-62)|1)), ((Int8(var_1702191518486_807)&127)..(Int8(Int8(125))&127):(Int64(-89)|1))), var_1702191518486_812, Int32(-116)));
                    var_1702191518486_706
                
                case _ => 
                    var_1702191518486_820
                
            } + [[Int16(98), Int16(4), Int16(-26), Int16(64), Int16(-70), Int16(-60), Int16(-106), Int16(36), Int16(-108), Int16(31)], [Int16(-42), var_1702191518486_706, var_1702191518486_820, Int16(7), Int16(12), var_1702191518486_706, Int16(-81), Int16(-38), Int16(85), var_1702191518486_706], [Int16(-76), var_1702191518486_706, Int16(-78), Int16(-101), var_1702191518486_706, var_1702191518486_820, Int16(80), Int16(46), var_1702191518486_820, var_1702191518486_706], var_1702191518486_851, var_1702191518486_854, [Int16(-14), Int16(-77), var_1702191518486_820, var_1702191518486_706, Int16(93), Int16(19), var_1702191518486_879, var_1702191518486_706, var_1702191518486_879, var_1702191518486_706], var_1702191518486_851, [Int16(-99), var_1702191518486_820, var_1702191518486_879, var_1702191518486_706, Int16(-83), var_1702191518486_879, var_1702191518486_820, var_1702191518486_894, Int16(31), var_1702191518486_706], var_1702191518486_851, [Int16(32), var_1702191518486_879, var_1702191518486_903, var_1702191518486_820, var_1702191518486_894, Int16(105), Int16(20), Int16(-18), var_1702191518486_879, var_1702191518486_820]][6][1]
        }
;
        const var_1702191518486_915 : UInt32 = 171;
        var var_1702191518486_931 : Interface_1702191518486_574 = Class_1702191518486_571();
        VArray<Bool, $1>(repeat: (func_1702191518486_608(var_1702191518486_915, namedParam_1702191518486_610 : var_1702191518486_918, namedParam_1702191518486_611 : var_1702191518486_931)|>{ lambdaParameter_1702191518486_567 : Int16 => var var_1702191518486_585 : Class_1702191518486_571 = Class_1702191518486_571(); match (var_1702191518486_585.var_1702191518486_588) {
            case caseVar_1702191518486_592 : UInt64 => 
                var_1702191518486_596 % ((var_1702191518486_596) | 1);
                false
            
            case _ => 
                Int8(83) <= Int8(33)
            
        } }))
    }

}

public const func func_1702191518486_270(param_1702191518486_271 : Int16) : Bool { // block id: 272
    const func func_1702191518486_274() : Int64 { // block id: 275
        -72 >> (((111 % ((53) | 1))) & 7)
    }
;
    func_1702191518486_274();
    const var_1702191518486_282 : String = "=6,kLZ6$se";
    var_1702191518486_282;
    true
}



sealed public interface Interface_1702191518486_576 {

}

public interface Interface_1702191518486_575 <: Interface_1702191518486_576 {

}

sealed public interface Interface_1702191518486_579 {

}

public interface Interface_1702191518486_578 <: Interface_1702191518486_579 {

}

sealed public interface Interface_1702191518486_580 {

}

public interface Interface_1702191518486_577 <: Interface_1702191518486_578 & Interface_1702191518486_580 {

}

public interface Interface_1702191518486_574 <: Interface_1702191518486_575 & Interface_1702191518486_577 {

}

sealed public interface Interface_1702191518486_583 {

}

sealed public interface Interface_1702191518486_582 <: Interface_1702191518486_583 {

}

sealed public interface Interface_1702191518486_581 <: Interface_1702191518486_582 {

}

public open class Class_1702191518486_571 <: Interface_1702191518486_574 & Interface_1702191518486_581 {
    public init() { // block id: 573

    }
;
    public let var_1702191518486_588 : Class_1702191518486_94 = Class_1702191518486_212();
    init(param_1702191518486_1066 : Bool) { // block id: 1067
        let var_1702191518486_1081 : VArray<Bool, $1> = VArray<Bool, $1>(repeat: false);
        try { // block id: 1069
            if (true) { // block id: 1072
                var var_1702191518486_1075 : Bool = true;
                if (var_1702191518486_1075) { [UInt64(218), UInt64(187), UInt64(63), UInt64(2), UInt64(93), UInt64(23), UInt64(238), UInt64(237), UInt64(94), UInt64(198)] } else { [UInt64(59), UInt64(101), UInt64(147), UInt64(116), UInt64(128), UInt64(54), UInt64(12), UInt64(150), UInt64(84), UInt64(112)] } ;
                ();
                var_1702191518486_1081
            } else if (false) { // block id: 1085
                var_1702191518486_1088 %= ((var_1702191518486_1088) | 1);
                UInt32(65);
                VArray<Bool, $1>(repeat: false)
            } else { // block id: 1095
                var_1702191518486_325;
                var var_1702191518486_1103 : Bool = (Option<VArray<Bool, $1>>.Some(VArray<Bool, $1>(repeat: (UInt8(84) is Range<UInt16>))) is Interface_1702191518486_574);
                if (var_1702191518486_1099) { VArray<Bool, $1>(repeat: var_1702191518486_1103) } else { VArray<Bool, $1>(repeat: var_1702191518486_1103) } 
            };
            const var_1702191518486_1120 : Rune = r'k';
            match (var_1702191518486_752) {
                case caseVar_1702191518486_1115 => 
                    var_1702191518486_502;
                    var_1702191518486_706;
                    var_1702191518486_1120
                
                case caseVar_1702191518486_1124 => 
                    r'4'
                
                case caseVar_1702191518486_1129 : Range<Int32> => 
                    UInt32(59);
                    [Int16(-69), Int16(-34), Int16(-11), Int16(-102), Int16(-71), Int16(60), Int16(62), Int16(-29), Int16(-48), Int16(79)];
                    var_1702191518486_1120
                
                case _ => 
                    var_1702191518486_1120
                
            }
        } catch (_) { // block id: 1138
            (Float64(84.0), UInt16(182), var_1702191518486_520, var_1702191518486_1146, true, var_1702191518486_903, ((Int16(Int16(22))&127)..=(Int16(Int16(91))&127):(Int64(-101)|1)))[2];
            if (var_1702191518486_1154) { var_1702191518486_1157 } else { r'w' } 
        };
        var var_1702191518486_1166 : Int16 = Int16(Int16(-68));
        if ((Option<VArray<Bool, $1>>.None is Int64)) { // block id: 1163
            var_1702191518486_1166 -= Int16(-43)
        }
    }
;
    public init(optionalParam_1702191518486_1234 ! : Array<Range<Int32>> = [((Int32(Int32(81))&127)..(Int32(Int32(-38))&127):(Int64(18)|1)), ((Int32(Int32(-56))&127)..=(Int32(Int32(123))&127):(Int64(-25)|1)), ((Int32(Int32(-121))&127)..=(Int32(Int32(-66))&127):(Int64(124)|1)), ((Int32(Int32(0))&127)..(Int32(Int32(-103))&127):(Int64(96)|1)), ((Int32(Int32(51))&127)..=(Int32(Int32(31))&127):(Int64(-42)|1)), ((Int32(Int32(-19))&127)..=(Int32(Int32(96))&127):(Int64(-27)|1)), ((Int32(Int32(43))&127)..=(Int32(Int32(-84))&127):(Int64(-86)|1)), ((Int32(Int32(-75))&127)..(Int32(Int32(61))&127):(Int64(-26)|1)), ((Int32(Int32(17))&127)..(Int32(Int32(-128))&127):(Int64(-124)|1)), ((Int32(Int32(-110))&127)..(Int32(Int32(-8))&127):(Int64(31)|1))], optionalParam_1702191518486_1236 ! : (Int16) -> Bool = func_1702191518486_270, namedParam_1702191518486_1240 ! : Option<Unit>, namedParam_1702191518486_1241 ! : Bool) { // block id: 1242
        var loopTimeVar_1702191518486_1246 : Range<UInt64> = ((UInt64(UInt64(UInt32(60)))&127)..(UInt64(UInt64(204))&127):(Int64(51)|1));
        for (i in loopTimeVar_1702191518486_1246 where var_1702191518486_1154) {

        };
        const var_1702191518486_1260 : Int64 = 26;
        var var_1702191518486_1374 : Int64 = Int64(59);
        let var_1702191518486_1382 : (Bool, Range<UInt32>, Array<Int16>, Range<UInt64>, Range<UInt16>) = (false, ((UInt32(UInt32(194))&127)..(UInt32(UInt32(116))&127):(Int64(57)|1)), [Int16(79), Int16(-6), Int16(-12), Int16(UInt8(UInt8(243))), Int16(115), Int16(Int16(Int8(-56))), Int16(27), Int16(-118), Int16(Int16(34)), Int16(UInt8(6))], ((UInt64(UInt64(16))&127)..(UInt64(UInt64(246))&127):(Int64(-73)|1)), ((UInt16(UInt16(5))&127)..=(UInt16(UInt16(68))&127):(Int64(-70)|1)));
        if (([((Int32(Int32(9))&127)..(Int32(Int32(121))&127):(Int64(-11)|1)), ((Int32(Int32(118))&127)..=(Int32(var_1702191518486_1028)&127):(var_1702191518486_1260|1)), ((Int32(var_1702191518486_697)&127)..=(Int32(var_1702191518486_1028)&127):(var_1702191518486_1260|1)), ((Int32(Int32(85))&127)..=(Int32(Int32(-42))&127):(Int64(-8)|1)), ((Int32(Int32(-19))&127)..=(Int32(Int32(102))&127):(Int64(41)|1)), var_1702191518486_1041, var_1702191518486_1041, var_1702191518486_1041, ((Int32(var_1702191518486_697)&127)..(Int32(Int32(7))&127):(var_1702191518486_1275|1)), ((Int32(Int32(-17))&127)..=(Int32(var_1702191518486_1028)&127):(var_1702191518486_1260|1))] is Rune)) { ((UInt32(UInt32(23))&127)..(UInt32(match (()) {
            case caseVar_1702191518486_1287 : Range<Int8> => 
                -UInt32(24)
            
            case () => 
                UInt32(135) % ((UInt32(215)) | 1)
            
            case () | () => 
                Class_1702191518486_212();
                let var_1702191518486_1302 : Range<Int64> = ((Int64(Int64(53))&127)..(Int64(Int64(-68))&127):(Int64(75)|1));
                var_1702191518486_1302;
                var_1702191518486_1088
            
            case caseVar_1702191518486_1307 => 
                ();
                -var_1702191518486_1088
            
            case _ => 
                var_1702191518486_1088
            
        })&127):(if (var_1702191518486_1154) { // block id: 1318
            if (var_1702191518486_1154) { var_1702191518486_1322 } else { [UInt64(183), UInt64(124), UInt64(112), UInt64(156), UInt64(182), UInt64(73), UInt64(73), UInt64(94), UInt64(12), UInt64(2)] } ;
            var_1702191518486_1196;
            var_1702191518486_1260
        } else if (true) { // block id: 1352
            [Float32(47.0), var_1702191518486_1356, var_1702191518486_1356, var_1702191518486_1356, Float32(40.0), var_1702191518486_1356, var_1702191518486_1356, Float32(57.0), var_1702191518486_1356, Float32(-76.0)];
            var_1702191518486_1275 << ((Int64(-97)) & 7)
        } else { // block id: 1370
            ();
            UInt64(42);
            var_1702191518486_1374
        }|1)) } else { try { // block id: 1379
            ();
            var_1702191518486_1382
        } finally { // block id: 1405
            var var_1702191518486_1408 : Byte = UInt8(180);
            var_1702191518486_1408 *= var_1702191518486_1408;
            (true, ((UInt32(var_1702191518486_1088)&127)..(UInt32(UInt32(186))&127):(Int64(-34)|1)), [Int16(-12), Int16(9), Int16(-126), Int16(42), Int16(102), Int16(2), Int16(-39), Int16(22), Int16(105), Int16(95)], ((UInt64(var_1702191518486_1186)&127)..(UInt64(var_1702191518486_1186)&127):(var_1702191518486_1374|1)), ((UInt16(UInt16(163))&127)..=(UInt16(UInt16(179))&127):(Int64(-18)|1)))
        }[1] } ;
        var_1702191518486_1374++
    }

}




public func func_1702191518486_308(param_1702191518486_309 : Range<Int8>) : VArray<Unit, $7> { // block id: 310
    const var_1702191518486_316 : Int8 = -15;
    var var_1702191518486_335 : UInt32 = UInt32(UInt8(9));
    let var_1702191518486_351 : Unit = ();
    const var_1702191518486_400 : Bool = false;
    let var_1702191518486_409 : Int = Int64(UInt32(137));
    let var_1702191518486_423 : Range<UInt32> = ((UInt32(UInt32(214))&127)..(UInt32(UInt32(8))&127):(Int64(-49)|1));
    let var_1702191518486_436 : VArray<Unit, $7> = [(), (), (), (), (), (), ()];
    const var_1702191518486_482 : Unit = ();
    if ((Int16(var_1702191518486_316)|>func_1702191518486_270)) { // block id: 318
        (var_1702191518486_325 ?? false)
    } else if ((if (false) { // block id: 332
        var_1702191518486_335 += UInt32(253);
        var var_1702191518486_341 : Bool = ((UInt64(Int8(Int8(84))) as Bool) is Bool);
        if (var_1702191518486_341) { var_1702191518486_325 } else { Option<Bool>.None } 
    } else { // block id: 349
        var_1702191518486_351;
        var_1702191518486_351;
        var_1702191518486_325
    } ?? (var_1702191518486_706|>{ lambdaParameter_1702191518486_358 : Int16 => const var_1702191518486_406 : UInt32 = 74; func func_1702191518486_368(namedParam_1702191518486_369 ! : Range<UInt8>, namedParam_1702191518486_370 ! : Bool, optionalParam_1702191518486_371 ! : (UInt16, UInt16, UInt8, Rune, UInt64, String, Int32) = (UInt16(UInt16(68)), UInt16(191), UInt8(217), r'X', UInt64(UInt16(88)), ">Z;@RRHmp*", Int32(Int8(UInt8(141)))), namedParam_1702191518486_384 ! : Option<Array<VArray<Unit, $7>>>) : Option<VArray<Bool, $1>> { // block id: 385
        const var_1702191518486_391 : Bool = false;
        let var_1702191518486_396 : VArray<Bool, $1> = [false];
        let var_1702191518486_498 : Unit = ();
        (if ((Option<Bool>.None ?? var_1702191518486_391)) { // block id: 393
            Option<VArray<Bool, $1>>.Some(var_1702191518486_396);
            if (var_1702191518486_400) { ((UInt32(UInt32(82))&127)..(UInt32(UInt32(238))&127):(Int64(-94)|1)) } else { ((UInt32(UInt32(90))&127)..=(UInt32(var_1702191518486_406)&127):(var_1702191518486_409|1)) } 
        } else if (match (var_1702191518486_325) {
            case _ => 
                var var_1702191518486_419 : Int64 = Int64(UInt64(226));
                var_1702191518486_419--;
                var_1702191518486_423;
                var_1702191518486_400 || var_1702191518486_391
            
            case caseVar_1702191518486_430 => 
                ();
                Option<Array<VArray<Unit, $7>>>.Some([var_1702191518486_436, VArray<Unit, $7>(repeat: var_1702191518486_351), var_1702191518486_436, VArray<Unit, $7>({ i => ()}), var_1702191518486_436, VArray<Unit, $7>(repeat: var_1702191518486_351), var_1702191518486_436, var_1702191518486_436, var_1702191518486_436, VArray<Unit, $7>(repeat: var_1702191518486_351)]);
                true
            
            case _ => 
                var_1702191518486_351;
                true
            
        }) { // block id: 490
            var_1702191518486_351;
            [VArray<Unit, $7>({ i => ()}), VArray<Unit, $7>(repeat: var_1702191518486_502), var_1702191518486_436, var_1702191518486_436, var_1702191518486_436, var_1702191518486_436, VArray<Unit, $7>(repeat: var_1702191518486_351), VArray<Unit, $7>(repeat: var_1702191518486_520), VArray<Unit, $7>({ i => ()}), var_1702191518486_436];
            ((UInt32(UInt32(233))&127)..(UInt32(var_1702191518486_406)&127):(var_1702191518486_409|1))
        } else { // block id: 548
            var_1702191518486_498;
            var_1702191518486_502;
            var_1702191518486_423
        } as VArray<Bool, $1>)
    }
; var var_1702191518486_555 : Option<Array<VArray<Unit, $7>>> = (Class_1702191518486_212() as Array<VArray<Unit, $7>>); (func_1702191518486_368(namedParam_1702191518486_369 : ((UInt8(UInt8(65))&127)..=(UInt8(UInt8(157))&127):(Int64(79)|1)), namedParam_1702191518486_370 : true, namedParam_1702191518486_384 : var_1702191518486_555) ?? Interface_1702191518486_215<Bool, Range<UInt8>>.func_1702191518486_561())[0] }))) { // block id: 935
        let var_1702191518486_949 : Range<Int32> = ((Int32(Int32(Int8(-46)))&127)..=(Int32(Int32(65))&127):(Int64(Int8(UInt8(253)))|1));
        match (var_1702191518486_938) {
            case caseVar_1702191518486_942 : Interface_1702191518486_582 => 
                UInt8(33)
            
            case _ : Range<UInt16> => 
                var_1702191518486_949;
                Int32(125) << ((var_1702191518486_697) & 7);
                const var_1702191518486_961 : UInt8 = 106;
                var_1702191518486_961
            
            case caseVar_1702191518486_965 : Unit => 
                var var_1702191518486_968 : Unit = ();
                var_1702191518486_968;
                UInt8(81) - UInt8(236)
            
            case caseVar_1702191518486_975 => 
                var_1702191518486_978
            
            case _ => 
                ();
                UInt8(102)
            
        };
        try { // block id: 986
            let var_1702191518486_988 : Unit = ();
            var_1702191518486_988;
            Class_1702191518486_571()
        } finally { // block id: 991
            Class_1702191518486_571()
        };
        var_1702191518486_400
    } else { // block id: 994
        let var_1702191518486_999 : Class_1702191518486_571 = Class_1702191518486_571();
        const var_1702191518486_1007 : UInt16 = 55;
        if (var_1702191518486_400) { // block id: 997
            var_1702191518486_999;
            UInt8(128) != UInt8(129)
        } else { // block id: 1004
            var_1702191518486_1007 == UInt16(224)
        }
    };
    let var_1702191518486_1031 : Int32 = Int32(UInt16(214));
    (var_1702191518486_1018 ?? [((Int32(Int32(31))&127)..(Int32(Int32(8))&127):(Int64(-3)|1)), ((Int32(var_1702191518486_697)&127)..=(Int32(var_1702191518486_697)&127):(Int64(-71)|1)), ((Int32(var_1702191518486_1028)&127)..(Int32(var_1702191518486_1031)&127):(Int64(-108)|1)), ((Int32(Int32(126))&127)..(Int32(var_1702191518486_697)&127):(Int64(126)|1)), ((Int32(Int32(0))&127)..(Int32(Int32(117))&127):(Int64(-100)|1)), var_1702191518486_1041, var_1702191518486_1041, ((Int32(Int32(81))&127)..=(Int32(Int32(48))&127):(Int64(23)|1)), ((Int32(var_1702191518486_697)&127)..=(Int32(var_1702191518486_1031)&127):(var_1702191518486_409|1)), ((Int32(Int32(-45))&127)..=(Int32(var_1702191518486_1031)&127):(Int64(-62)|1))])[6];
    var var_1702191518486_1231 : Interface_1702191518486_583 = Class_1702191518486_571(optionalParam_1702191518486_1234 : [((Int32(Int32(-26))&127)..(Int32(Int32(107))&127):(Int64(-25)|1)), ((Int32(Int32(92))&127)..(Int32(Int32(-49))&127):(Int64(-28)|1)), ((Int32(Int32(22))&127)..=(Int32(Int32(-82))&127):(Int64(68)|1)), ((Int32(Int32(54))&127)..(Int32(Int32(98))&127):(Int64(75)|1)), ((Int32(Int32(-55))&127)..=(Int32(Int32(16))&127):(Int64(37)|1)), ((Int32(Int32(-71))&127)..=(Int32(Int32(-51))&127):(Int64(92)|1)), ((Int32(Int32(-3))&127)..(Int32(Int32(-42))&127):(Int64(-120)|1)), ((Int32(Int32(111))&127)..=(Int32(Int32(93))&127):(Int64(89)|1)), ((Int32(Int32(67))&127)..(Int32(Int32(40))&127):(Int64(-94)|1)), ((Int32(Int32(23))&127)..(Int32(Int32(-18))&127):(Int64(102)|1))], namedParam_1702191518486_1240 : (r'2' as Unit), namedParam_1702191518486_1241 : (Class_1702191518486_571() is Option<Bool>));
    if ((var_1702191518486_1059[1] is Array<Int16>)) { (if ((Class_1702191518486_571(false) is Array<Range<Int32>>)) { ([UInt64(81), var_1702191518486_1176, var_1702191518486_1176, var_1702191518486_1176, UInt64(17), UInt64(142), UInt64(41), UInt64(188), UInt64(125), var_1702191518486_1186], VArray<Unit, $7>(repeat: var_1702191518486_520), var_1702191518486_1199, Option<(Float32, Interface_1702191518486_580, (Int16, Range<UInt64>, Bool, Range<Int32>, Range<UInt8>, Range<Int8>), Option<Array<VArray<Unit, $7>>>, Int32)>.None, ((UInt8(var_1702191518486_978)&127)..(UInt8(var_1702191518486_978)&127):(Int64(66)|1)), var_1702191518486_1207, true, Int8(52))[1] } else { VArray<Unit, $7>(repeat: var_1702191518486_1196) } ) } else { VArray<Unit, $7>(repeat: ()) } 
}


main(): Int64 {
    try {
        var var_1702191518486_55 : (UInt16, UInt16, UInt8, Rune, UInt64, String, Int32) = (UInt16(UInt16(Int16(UInt16(238)))), UInt16(3), UInt8(57), r'f', UInt64(UInt16(206)), """
r(00_
YQCr>
""", Int32(UInt8(215)));
        let var_1702191518486_98 : Class_1702191518486_94 = Class_1702191518486_94();
        try { // block id: 5
            var loopTimeVar_1702191518486_13 : Int = 0;
            while ((true) && loopTimeVar_1702191518486_13 < 100 ) {
                loopTimeVar_1702191518486_13++;
                Float32(-124.0) + Float32(124.0)
            };
            var var_1702191518486_20 : Option<Unit> = Option<Unit>.Some(());
            var_1702191518486_20.getOrThrow();
            const var_1702191518486_30 : Int = 97;
            match (var_1702191518486_20) {
                case caseVar_1702191518486_27 : UInt8 => 
                    var_1702191518486_30
                
                case _ => 
                    UInt8(219) * UInt8(186);
                    UInt64(250);
                    var_1702191518486_30
                
                case caseVar_1702191518486_42 => 
                    var_1702191518486_30
                
                case _ => 
                    Float64(-2.0);
                    Float32(62.0);
                    var_1702191518486_30
                
            }
        } catch (e: Exception) { // block id: 51
            var_1702191518486_55[4];
            let var_1702191518486_73 : (Int64, Int16, Int8, Option<Unit>, String) = (Int64(Int64(UInt32(UInt8(190)))), Int16(-53), Int8(87), Option<Unit>.None, "e+Um%@_RSf");
            var_1702191518486_73[0]
        } finally { // block id: 84
            const var_1702191518486_1490 : String = ###"0a{` XEGZ2v"###;
            func func_1702191518486_86(param_1702191518486_87 : (UInt16, UInt16, UInt8, Rune, UInt64, String, Int32), param_1702191518486_88 : (Int64, Int16, Int8, Option<Unit>, String), namedParam_1702191518486_89 ! : String, optionalParam_1702191518486_90 ! : Int64 = Int64(-109)) : Int64 { // block id: 92
                var_1702191518486_98.func_1702191518486_101<Option<Bool>, Range<Int64>>(namedParam_1702191518486_104 : try { // block id: 1488
                    var_1702191518486_1490
                } catch (e: Exception) { // block id: 1492
                    ();
                    ();
                    var_1702191518486_1490
                }, namedParam_1702191518486_105 : var_1702191518486_1499[1])
            }
;
            func_1702191518486_86(var_1702191518486_55, var_1702191518486_918, namedParam_1702191518486_89 : "O3'AT${var_1702191518486_1490}!$[${var_1702191518486_1490}.|")
        }
        // CRC Check All Variables
        var crcCheck = CrcCheck(5000, 32)
        crcCheck.updateBuffer(UInt64(var_1702191518486_697*var_1702191518486_697), 64)
        crcCheck.updateBuffer(UInt64(var_1702191518486_706*var_1702191518486_706), 64)
        crcCheck.updateBuffer(UInt64(var_1702191518486_903*var_1702191518486_903), 64)
        crcCheck.updateBuffer(UInt64(var_1702191518486_978*var_1702191518486_978), 64)
        crcCheck.updateBuffer(UInt64(var_1702191518486_1028*var_1702191518486_1028), 64)
        crcCheck.updateBuffer(UInt64(var_1702191518486_1088*var_1702191518486_1088), 64)
        crcCheck.updateBuffer(UInt64(var_1702191518486_1176*var_1702191518486_1176), 64)
        crcCheck.updateBuffer(UInt64(var_1702191518486_1186*var_1702191518486_1186), 64)
        crcCheck.updateBuffer(UInt64(var_1702191518486_1275*var_1702191518486_1275), 64)
        crcCheck.crcCheck()
        crcCheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[(i + buffer_index) % buffer.size] = byteArray[i + byte_index]
            i++
        }
        buffer_index = (buffer_index + i) % buffer.size
    }

    func updateBuffer(input: Bool, byte_n: Int64): Unit {
        if (input == true) {
            updateBuffer(1, byte_n)
        } else {
            updateBuffer(0, byte_n)
        }
    }

    func updateBuffer(input: Rune, byte_n: Int64): Unit {
        updateBuffer(UInt64(UInt32(input)), byte_n)
    }

    func updateBuffer(input: String, byte_n: Int64): Unit {
        for (c in input) {
            updateBuffer(c, byte_n)
        }
    }

    func updateBuffer(input: Unit, byte_n: Int64): Unit {
        updateBuffer(input.toString(), byte_n)
    }

    func updateBuffer(input: Any, byte_n: Int64) : Unit {
        if (input is Hashable) {
            match(input as Hashable) {
                case Some(v) => updateBuffer(UInt64(v.hashCode()), byte_n)
                case _=> updateBuffer(1, byte_n)
            }
            
        } else if (input is ToString) {
            match(input as ToString) {
                case Some(v) => updateBuffer(v.toString(), byte_n)
                case _=> updateBuffer(1, byte_n)
            }
        } else {
            updateBuffer(1, byte_n)
        }
    }     
    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}

extend Class_1702191518486_571 {

}

extend Class_1702191518486_212 {

}

extend Class_1702191518486_94 {
    func func_1702191518486_101<T0, T1>(optionalParam_1702191518486_102 ! : Float32 = Float32(-7.0), namedParam_1702191518486_104 ! : String, namedParam_1702191518486_105 ! : (Int64, Int16, Int8, Option<Unit>, String)) : Int64 { // block id: 106
        var var_1702191518486_127 : Array<VArray<Unit, $7>> = [VArray<Unit, $7>(repeat: ()), VArray<Unit, $7>({ i => ()}), VArray<Unit, $7>({ i => ()}), VArray<Unit, $7>(repeat: ()), VArray<Unit, $7>({ i => ()}), VArray<Unit, $7>(repeat: ()), VArray<Unit, $7>(repeat: ()), VArray<Unit, $7>({ i => ()}), VArray<Unit, $7>({ i => ()}), VArray<Unit, $7>({ i => ()})];
        (Option<Array<VArray<Unit, $7>>>.None ?? var_1702191518486_127)[0][2];
        var_1702191518486_217.func_1702191518486_220(Float32(var_1702191518486_1356), optionalParam_1702191518486_222 : UInt32(134));
        Int64(-121)
    }

}

// ASSERT: scan-11 sema_varray_captured
// ASSERT: scan-42 sema_varray_cjvm_in_ref_type
