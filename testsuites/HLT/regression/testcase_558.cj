/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args

public let var_1702393864588_12 : UInt8 = UInt8(Int8(UInt8(Int8(-72))))
public var var_1702393864588_21 : Rune = r'D'
public var var_1702393864588_42 : Int8 = Int8(Int8(30))
public const var_1702393864588_52 : Int32 = 112
public var var_1702393864588_63 : Bool = false
public var var_1702393864588_70 : Unit = ()
public let var_1702393864588_123 : Interface_1702393864588_103<UInt32, Float64> = Class_1702393864588_100()
public const var_1702393864588_136 : Float32 = 6.0
public let var_1702393864588_182 : ?UInt32 = (r'V' as UInt32)
let var_1702393864588_199 : UInt32 = UInt32(Int16(26))
let var_1702393864588_217 : ?Bool = Option<Bool>.None
public var var_1702393864588_264 : (UInt32, Int32, Float32, Enum_1702393864588_255) = (UInt32(Int8(UInt8(Int8(19)))), Int32(Int8(Int8(Int8(87)))), Float32(Float32(Float32(3.0))), Enum_1702393864588_255.enumValue_1702393864588_278(UInt8(134)))
let var_1702393864588_297 : ?UInt8 = Option<UInt8>.None
public var var_1702393864588_305 : (Int32, UInt8, UInt16, UInt8, Int64, Rune) = (Int32(UInt8(47)), UInt8(53), UInt16(19), UInt8(UInt8(UInt8(Int8(111)))), Int64(UInt8(UInt8(Int8(97)))), r'S')
public let var_1702393864588_349 : (Unit, (UInt32, Int32, Float32, Enum_1702393864588_255), Interface_1702393864588_104, Rune, Enum_1702393864588_255, (Int32, UInt8, UInt16, UInt8, Int64, Rune)) = ((), (UInt32(243), Int32(58), Float32(Float32(Float32(19.0))), Enum_1702393864588_255.enumValue_1702393864588_359(UInt32(Int16(126)), (">TwwSg 1oi" as UInt8), Class_1702393864588_100(), Int32(125))), Class_1702393864588_100(), r'O', Enum_1702393864588_255.enumValue_1702393864588_373((), Int64(UInt16(UInt16(141))), (() as Bool), Int64(Int64(-35))), (Int32(Int16(79)), UInt8(Int8(Int8(104))), UInt16(UInt16(Int8(-59))), UInt8(240), Int64(Int64(UInt16(156))), r'r'))
public var var_1702393864588_443 : Int64 = Int64(119)
public var var_1702393864588_505 : Int16 = Int16(63)
public var var_1702393864588_508 : UInt64 = UInt64(161)
public let var_1702393864588_523 : UInt16 = UInt16(254)
public let var_1702393864588_528 : (Bool, UInt16, Option<UInt8>) = ((Float64(-55.0) is (Int8) -> (UInt32, Int32, Float32, Enum_1702393864588_255)), UInt16(11), Option<UInt8>.None)
var var_1702393864588_544 : Class_1702393864588_100 = Class_1702393864588_100()
public var var_1702393864588_551 : Enum_1702393864588_255 = Enum_1702393864588_255.enumValue_1702393864588_553(r'h', (true, UInt16(Int8(-2)), (((), (UInt32(168), Int32(108), Float32(-2.0), Enum_1702393864588_255.enumValue_1702393864588_573(Class_1702393864588_100())), Class_1702393864588_100(), r'Z', Enum_1702393864588_255.enumValue_1702393864588_579(Option<UInt32>.None, r'q', Option<Bool>.None), (Int32(-8), UInt8(176), UInt16(157), UInt8(56), Int64(100), r'P')) as UInt8)), Enum_1702393864588_416<Float32>.enumValue_1702393864588_594(Option<Option<(Unit, (UInt32, Int32, Float32, Enum_1702393864588_255), Interface_1702393864588_104, Rune, Enum_1702393864588_255, (Int32, UInt8, UInt16, UInt8, Int64, Rune))>>.None, Float32(Float32(-37.0)), (Int32(-62), UInt8(Int8(-109)), UInt16(Int16(66)), UInt8(199), Int64(-124), r'i'), Float32(Float32(Float32(-60.0)))), func_1702393864588_169)
public const var_1702393864588_626 : Int32 = 108
public var var_1702393864588_630 : Enum_1702393864588_255 = Enum_1702393864588_255.enumValue_1702393864588_632(Int16(Int8(126)), Int64(UInt32(138)), Float32(109.0))
public var var_1702393864588_646 : ?Option<(Unit, (UInt32, Int32, Float32, Enum_1702393864588_255), Interface_1702393864588_104, Rune, Enum_1702393864588_255, (Int32, UInt8, UInt16, UInt8, Int64, Rune))> = (r'J' as Option<(Unit, (UInt32, Int32, Float32, Enum_1702393864588_255), Interface_1702393864588_104, Rune, Enum_1702393864588_255, (Int32, UInt8, UInt16, UInt8, Int64, Rune))>)
public var var_1702393864588_747 : Rune = r'h'
public const var_1702393864588_753 : Float32 = -95.0
public var var_1702393864588_780 : (Option<UInt32>, Option<(Unit, (UInt32, Int32, Float32, Enum_1702393864588_255), Interface_1702393864588_104, Rune, Enum_1702393864588_255, (Int32, UInt8, UInt16, UInt8, Int64, Rune))>, Int64, Float64) = (Option<UInt32>.None, (Option<UInt32>.None as (Unit, (UInt32, Int32, Float32, Enum_1702393864588_255), Interface_1702393864588_104, Rune, Enum_1702393864588_255, (Int32, UInt8, UInt16, UInt8, Int64, Rune))), Int64(-49), Float64(Float32(Float32(-29.0))))
public var var_1702393864588_810 : ?Class_1702393864588_100 = (Class_1702393864588_100() as Class_1702393864588_100)
public var var_1702393864588_826 : ?(Class_1702393864588_100, UInt64, UInt64, Int32, Int8) = ((Option<UInt32>.None, (Int64(73) as (Unit, (UInt32, Int32, Float32, Enum_1702393864588_255), Interface_1702393864588_104, Rune, Enum_1702393864588_255, (Int32, UInt8, UInt16, UInt8, Int64, Rune))), Int64(-50), Float64(Float64(Float64(12.0)))) as (Class_1702393864588_100, UInt64, UInt64, Int32, Int8))
public var var_1702393864588_838 : Class_1702393864588_100 = Class_1702393864588_100()
public let var_1702393864588_846 : Class_1702393864588_100 = Class_1702393864588_100()

public interface Interface_1702393864588_103<T0, T1> {

}

public interface Interface_1702393864588_104 <: Interface_1702393864588_103<UInt32, Float64> {
    static func func_1702393864588_290() : Bool { // block id: 291
        let var_1702393864588_419 : Enum_1702393864588_416<Float32> = Enum_1702393864588_416<Float32>.enumValue_1702393864588_421(Int64(11), Int32(UInt32(12)), (Int32(58), UInt8(170), UInt16(79), UInt8(111), Int64(-33), r'a'), (UInt32(115) as (Unit, (UInt32, Int32, Float32, Enum_1702393864588_255), Interface_1702393864588_104, Rune, Enum_1702393864588_255, (Int32, UInt8, UInt16, UInt8, Int64, Rune))));
        Int8(match (var_1702393864588_419) {
            case defaultValue => 
                var_1702393864588_443 %= ((var_1702393864588_443) | 1);
                var_1702393864588_42 ^= var_1702393864588_42;
                UInt8(226)
            
            case _ => 
                UInt8(116) / ((var_1702393864588_12) | 1)
            
            case caseVar_1702393864588_458 => 
                ();
                Enum_1702393864588_255.enumValue_1702393864588_373(var_1702393864588_70, Int64(-124), Option<Bool>.Some(true), var_1702393864588_443);
                var_1702393864588_12
            
            case caseVar_1702393864588_470 : Int64 => 
                (var_1702393864588_52, var_1702393864588_12, UInt16(33), UInt8(101), var_1702393864588_443, var_1702393864588_21);
                var_1702393864588_12
            
            case _ => 
                var_1702393864588_443 + Int64(77);
                const var_1702393864588_488 : Bool = false;
                if (var_1702393864588_488) { var_1702393864588_21 } else { var_1702393864588_21 } ;
                var_1702393864588_12
            
        })|>func_1702393864588_293;
        match (Float32(22.0)) {
            case _ : Int16 => 
                UInt64(59)
            
            case caseVar_1702393864588_501 : Rune => 
                var_1702393864588_505++;
                var_1702393864588_508
            
            case _ => 
                ();
                var_1702393864588_63;
                var_1702393864588_508
            
        };
        try { // block id: 519
            (var_1702393864588_63, var_1702393864588_523, Option<UInt8>.None)
        } catch (e: Exception) { // block id: 526
            var_1702393864588_528
        } finally { // block id: 534
            (var_1702393864588_63, UInt16(24), Option<UInt8>.Some(var_1702393864588_12))
        }[0]
    }

}

public open class Class_1702393864588_100 <: Interface_1702393864588_103<UInt32, Float64> & Interface_1702393864588_104 & Resource {
    public init() { // block id: 102

    }
;
    public static let var_1702393864588_143 : Class_1702393864588_100;
    public let var_1702393864588_547 : Bool = true;
    init(param_1702393864588_247 : UInt16, param_1702393864588_248 : Int8, optionalParam_1702393864588_249 ! : Unit = (), optionalParam_1702393864588_251 ! : Int16 = Int16(25)) { // block id: 253
        match (func_1702393864588_258(Int16(-26))) {
            case enumValue_1702393864588_579(_ : UInt8, caseVar_1702393864588_668, _ : Float64) => 
                var_1702393864588_443;
                ()
            
            case caseVar_1702393864588_674 : Int16 => 
                var_1702393864588_70;
                var_1702393864588_70
            
            case _ => 
                var_1702393864588_70;
                ()
            
        }
    }
;
    public static prop var_1702393864588_701 : Option<(Int32, UInt8, UInt16, UInt8, Int64, Rune)> { // block id: 702
        get() { // block id: 704
            Option<(Int32, UInt8, UInt16, UInt8, Int64, Rune)>.None;
            Option<UInt32>.None;
            Option<(Int32, UInt8, UInt16, UInt8, Int64, Rune)>.None
        }

    };
    public prop var_1702393864588_733 : Byte { // block id: 734
        get() { // block id: 736
            UInt8(UInt8(UInt8(UInt8(142))))
        }

    };
    public let var_1702393864588_852 : UInt = UInt64(54);
    public static func func_1702393864588_290() : Bool { // block id: 291
        let var_1702393864588_419 : Enum_1702393864588_416<Float32> = Enum_1702393864588_416<Float32>.enumValue_1702393864588_421(Int64(11), Int32(UInt32(12)), (Int32(58), UInt8(170), UInt16(79), UInt8(111), Int64(-33), r'a'), (UInt32(115) as (Unit, (UInt32, Int32, Float32, Enum_1702393864588_255), Interface_1702393864588_104, Rune, Enum_1702393864588_255, (Int32, UInt8, UInt16, UInt8, Int64, Rune))));
        Int8(match (var_1702393864588_419) {
            case defaultValue => 
                var_1702393864588_443 %= ((var_1702393864588_443) | 1);
                var_1702393864588_42 ^= var_1702393864588_42;
                UInt8(226)
            
            case _ => 
                UInt8(116) / ((var_1702393864588_12) | 1)
            
            case caseVar_1702393864588_458 => 
                ();
                Enum_1702393864588_255.enumValue_1702393864588_373(var_1702393864588_70, Int64(-124), Option<Bool>.Some(true), var_1702393864588_443);
                var_1702393864588_12
            
            case caseVar_1702393864588_470 : Int64 => 
                (var_1702393864588_52, var_1702393864588_12, UInt16(33), UInt8(101), var_1702393864588_443, var_1702393864588_21);
                var_1702393864588_12
            
            case _ => 
                var_1702393864588_443 + Int64(77);
                const var_1702393864588_488 : Bool = false;
                if (var_1702393864588_488) { var_1702393864588_21 } else { var_1702393864588_21 } ;
                var_1702393864588_12
            
        })|>func_1702393864588_293;
        match (Float32(22.0)) {
            case _ : Int16 => 
                UInt64(59)
            
            case caseVar_1702393864588_501 : Rune => 
                var_1702393864588_505++;
                var_1702393864588_508
            
            case _ => 
                ();
                var_1702393864588_63;
                var_1702393864588_508
            
        };
        try { // block id: 519
            (var_1702393864588_63, var_1702393864588_523, Option<UInt8>.None)
        } catch (e: Exception) { // block id: 526
            var_1702393864588_528
        } finally { // block id: 534
            (var_1702393864588_63, UInt16(24), Option<UInt8>.Some(var_1702393864588_12))
        }[0]
    }

    static init() {
        var_1702393864588_143 = Class_1702393864588_100()
    }
    public func isClosed(): Bool { return true }
    public func close(): Unit {}
}

public func func_1702393864588_169(param_1702393864588_170 : Option<UInt32>) : Unit { // block id: 171
    var_1702393864588_70;
    ()
}



public enum Enum_1702393864588_255 {
    defaultValue |
    enumValue_1702393864588_278(UInt8) |
    enumValue_1702393864588_359(UInt32, Option<UInt8>, Class_1702393864588_100, Int32) |
    enumValue_1702393864588_373(Unit, Int64, Option<Bool>, Int64) |
    enumValue_1702393864588_553(Rune, (Bool, UInt16, Option<UInt8>), Enum_1702393864588_416<Float32>, (Option<UInt32>) -> Unit) |
    enumValue_1702393864588_573(Class_1702393864588_100) |
    enumValue_1702393864588_579(Option<UInt32>, Rune, Option<Bool>) |
    enumValue_1702393864588_632(Int16, Int64, Float32)
}


func func_1702393864588_293(param_1702393864588_294 : Int8) : (UInt32, Int32, Float32, Enum_1702393864588_255) { // block id: 295
    var_1702393864588_297;
    match ((try (resource = Class_1702393864588_100()) { // block id: 302

    } finally { // block id: 303
        var_1702393864588_305;
        var_1702393864588_70;
        var_1702393864588_70
    } as UInt32)) {
        case _ => 
            var_1702393864588_52 - Int32(53);
            ();
            var_1702393864588_70
        
    };
    var var_1702393864588_403 : UInt16 = UInt16(98);
    let var_1702393864588_408 : Int = Int64(98);
    ((Option<Option<(Unit, (UInt32, Int32, Float32, Enum_1702393864588_255), Interface_1702393864588_104, Rune, Enum_1702393864588_255, (Int32, UInt8, UInt16, UInt8, Int64, Rune))>>.None ?? Option<(Unit, (UInt32, Int32, Float32, Enum_1702393864588_255), Interface_1702393864588_104, Rune, Enum_1702393864588_255, (Int32, UInt8, UInt16, UInt8, Int64, Rune))>.None) ?? try { // block id: 345
        ();
        var_1702393864588_123;
        var_1702393864588_349
    } finally { // block id: 400
        var_1702393864588_403 %= ((UInt16(115)) | 1);
        var_1702393864588_408 >= var_1702393864588_408;
        var_1702393864588_349
    })[1]
}

public enum Enum_1702393864588_416<T0> {
    defaultValue |
    enumValue_1702393864588_421(Int64, Int32, (Int32, UInt8, UInt16, UInt8, Int64, Rune), Option<(Unit, (UInt32, Int32, Float32, Enum_1702393864588_255), Interface_1702393864588_104, Rune, Enum_1702393864588_255, (Int32, UInt8, UInt16, UInt8, Int64, Rune))>) |
    enumValue_1702393864588_594(Option<Option<(Unit, (UInt32, Int32, Float32, Enum_1702393864588_255), Interface_1702393864588_104, Rune, Enum_1702393864588_255, (Int32, UInt8, UInt16, UInt8, Int64, Rune))>>, Float32, (Int32, UInt8, UInt16, UInt8, Int64, Rune), Float32)
}
public func func_1702393864588_283(param_1702393864588_284 : Float32) : Enum_1702393864588_255 { // block id: 285
    if ((Interface_1702393864588_104.func_1702393864588_290())) { if (var_1702393864588_544.var_1702393864588_547) { // block id: 549
        var_1702393864588_551
    } else { // block id: 615
        var var_1702393864588_617 : Option<(Unit, (UInt32, Int32, Float32, Enum_1702393864588_255), Interface_1702393864588_104, Rune, Enum_1702393864588_255, (Int32, UInt8, UInt16, UInt8, Int64, Rune))> = ("[pXrL-61iI" as (Unit, (UInt32, Int32, Float32, Enum_1702393864588_255), Interface_1702393864588_104, Rune, Enum_1702393864588_255, (Int32, UInt8, UInt16, UInt8, Int64, Rune)));
        var_1702393864588_617;
        var var_1702393864588_622 : Int32 = Int32(UInt16(92));
        var_1702393864588_622 &= var_1702393864588_626;
        var_1702393864588_551
    } } else { var_1702393864588_630 } 
}

public func func_1702393864588_258(param_1702393864588_259 : Int16) : Enum_1702393864588_255 { // block id: 260
    var_1702393864588_264[2];
    try { // block id: 643
        ();
        var_1702393864588_646;
        var var_1702393864588_651 : Float32 = Float32(Float32(Float32(20.0)));
        var_1702393864588_651 + var_1702393864588_136
    } catch (_) { // block id: 656
        var_1702393864588_63 ||= var_1702393864588_63;
        var_1702393864588_136
    } finally { // block id: 661
        var_1702393864588_136 / Float32((Int32(var_1702393864588_136)) | 1)
    }|>func_1702393864588_283
}


public func func_1702393864588_203(param_1702393864588_204 : Float32) : (Int32, UInt8, UInt16, UInt8, Int64, Rune) { // block id: 205
    if ((if (false) { // block id: 214
        var_1702393864588_70;
        var_1702393864588_217
    } else if (var_1702393864588_63) { // block id: 220
        var_1702393864588_182;
        if (true) { var_1702393864588_217 } else { var_1702393864588_217 } 
    } else { // block id: 226
        Option<Bool>.Some(var_1702393864588_63)
    } ?? match (()) {
        case () | () | () => 
            Int8(21);
            true
        
        case _ => 
            ();
            var_1702393864588_63
        
    })) { // block id: 241
        try (resource = Class_1702393864588_100()) { // block id: 243

        } finally { // block id: 244
            Class_1702393864588_100(var_1702393864588_523, Int8(-78), optionalParam_1702393864588_251 : Int16(44));
            var_1702393864588_70
        }
    };
    let var_1702393864588_695 : Option<(Int32, UInt8, UInt16, UInt8, Int64, Rune)> = (UInt32(250) as (Int32, UInt8, UInt16, UInt8, Int64, Rune));
    var var_1702393864588_722 : Int32 = Int32(UInt8(159));
    (if (var_1702393864588_63) { var_1702393864588_695 } else { (Class_1702393864588_100.var_1702393864588_701) }  ?? (if (true) { // block id: 711
        var_1702393864588_70;
        Option<UInt32>.None;
        Int32(89) | var_1702393864588_52
    } else if (false) { // block id: 718
        ();
        var_1702393864588_722--;
        var_1702393864588_722
    } else { // block id: 726
        var_1702393864588_349;
        true;
        Int32(-116)
    }, var_1702393864588_544.var_1702393864588_733, var_1702393864588_523 | UInt16(78), var_1702393864588_12, var_1702393864588_443, var_1702393864588_747))
}


public struct Struct_1702393864588_799 {
    public init() { // block id: 801

    }
;
    public static func func_1702393864588_804(param_1702393864588_805 : Unit, param_1702393864588_806 : Option<Option<(Unit, (UInt32, Int32, Float32, Enum_1702393864588_255), Interface_1702393864588_104, Rune, Enum_1702393864588_255, (Int32, UInt8, UInt16, UInt8, Int64, Rune))>>, namedParam_1702393864588_807 ! : UInt64) : Option<Class_1702393864588_100> { // block id: 808
        var_1702393864588_810
    }

}


public func func_1702393864588_163(param_1702393864588_164 : Int32) : Class_1702393864588_100 { // block id: 165
    try { // block id: 167
        const var_1702393864588_192 : Byte = 245;
        Option<UInt32>.Some(var_1702393864588_199)|>{ lambdaParameter_1702393864588_176 : Option<UInt32> => var loopTimeVar_1702393864588_196 : Int = 0; do {
            loopTimeVar_1702393864588_196++;
            var_1702393864588_182;
            (Option<UInt8>.Some(var_1702393864588_192) ?? UInt8(216))
        } while ((var_1702393864588_63) && loopTimeVar_1702393864588_196 < 100 )  };
        let var_1702393864588_750 : (Float32) -> (Int32, UInt8, UInt16, UInt8, Int64, Rune) = func_1702393864588_203;
        var_1702393864588_753|>var_1702393864588_750;
        if (false) { // block id: 757
            var_1702393864588_443
        } else if (true) { // block id: 760
            Int32(-73) + Int32(-107);
            var var_1702393864588_766 : UInt8 = UInt8(UInt8(UInt8(UInt8(89))));
            var_1702393864588_766++;
            Int64(121)
        } else { // block id: 772
            var_1702393864588_443 >> ((var_1702393864588_443) & 7)
        }
    } catch (e: Exception) { // block id: 776
        var_1702393864588_780[2]
    } finally { // block id: 790
        Int64(var_1702393864588_508)
    };
    const var_1702393864588_816 : UInt64 = 204;
    (Struct_1702393864588_799.func_1702393864588_804(var_1702393864588_70, Option<Option<(Unit, (UInt32, Int32, Float32, Enum_1702393864588_255), Interface_1702393864588_104, Rune, Enum_1702393864588_255, (Int32, UInt8, UInt16, UInt8, Int64, Rune))>>.None, namedParam_1702393864588_807 : var_1702393864588_816) ?? (var_1702393864588_826 ?? (var_1702393864588_838, UInt64(106), var_1702393864588_508, var_1702393864588_52, Int8(-13)))[0]);
    var_1702393864588_846
}

main(): Int64 {
    try {
        var var_1702393864588_75 : UInt64 = UInt64(Int16(Int8(-83)));
        match ((Int32(66), var_1702393864588_12, UInt16(154), UInt8(5), Int64(-2), var_1702393864588_21)[3]) {
            case caseVar_1702393864588_26 => 
                Int64(-65);
                ();
                var var_1702393864588_32 : Float32 = Float32(77.0);
                var_1702393864588_32 += var_1702393864588_32
            
            case caseVar_1702393864588_37 => 
                Int32(68);
                var_1702393864588_42 >>= ((Int8(-80)) & 7)
            
            case 68 => 
                Int32(-73) | var_1702393864588_52;
                let var_1702393864588_56 : Bool = (true is UInt32);
                if (var_1702393864588_56) { r'o' } else { r'U' } ;
                var_1702393864588_63 &&= var_1702393864588_56
            
            case 146 | 83 | 251 | 213 => 
                var_1702393864588_70;
                Int16(-32);
                var_1702393864588_75--
            
            case _ => 
                var_1702393864588_75 = UInt64(166)
            
        };
        let var_1702393864588_94 : UInt32 = UInt32(UInt16(Int8(-55)));
        func func_1702393864588_106<T0>(optionalParam_1702393864588_107 ! : Unit = (), optionalParam_1702393864588_109 ! : Unit = ()) : Class_1702393864588_100 { // block id: 111
            var var_1702393864588_119 : UInt32 = UInt32(156);
            var loopTimeVar_1702393864588_148 : Int = 0;
            do {
                loopTimeVar_1702393864588_148++;
                Class_1702393864588_100.var_1702393864588_143;
                Int16(UInt8(80))
            } while ((match (if (false) { // block id: 116
                var_1702393864588_119 -= var_1702393864588_119;
                var_1702393864588_123;
                Float64(36.0)
            } else { // block id: 126
                var_1702393864588_70;
                Float64(124.0) / Float64((Int32(Float64(52.0))) | 1)
            }) {
                case _ => 
                    var_1702393864588_136 == Float32(-62.0)
                
            }) && loopTimeVar_1702393864588_148 < 100 ) ;
            var loopTimeVar_1702393864588_161 : Int64 = 0;
            while ((true) && loopTimeVar_1702393864588_161 < 100 ) {
                loopTimeVar_1702393864588_161++;
                if (var_1702393864588_63) { // block id: 154
                    break;
                    Option<UInt32>.None;
                    var_1702393864588_70
                } else if (false) { // block id: 159

                }
            };
            Int32(42)|>func_1702393864588_163
        }
;
        Int64((Option<UInt32>.Some(var_1702393864588_94) ?? var_1702393864588_94)) ** (func_1702393864588_106<Option<(Unit, (UInt32, Int32, Float32, Enum_1702393864588_255), Interface_1702393864588_104, Rune, Enum_1702393864588_255, (Int32, UInt8, UInt16, UInt8, Int64, Rune))>>(optionalParam_1702393864588_107 : ()).var_1702393864588_852)
        // CRC Check All Variables
        var crcCheck = CrcCheck(5000, 32)
        crcCheck.updateBuffer(UInt64(var_1702393864588_12*var_1702393864588_12), 64)
        crcCheck.updateBuffer(UInt64(var_1702393864588_75*var_1702393864588_75), 64)
        crcCheck.updateBuffer(UInt64(var_1702393864588_94*var_1702393864588_94), 64)
        crcCheck.updateBuffer(UInt64(var_1702393864588_443*var_1702393864588_443), 64)
        crcCheck.updateBuffer(UInt64(var_1702393864588_505*var_1702393864588_505), 64)
        crcCheck.crcCheck()
        crcCheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[(i + buffer_index) % buffer.size] = byteArray[i + byte_index]
            i++
        }
        buffer_index = (buffer_index + i) % buffer.size
    }

    func updateBuffer(input: Bool, byte_n: Int64): Unit {
        if (input == true) {
            updateBuffer(1, byte_n)
        } else {
            updateBuffer(0, byte_n)
        }
    }

    func updateBuffer(input: Rune, byte_n: Int64): Unit {
        updateBuffer(UInt64(UInt32(input)), byte_n)
    }

    func updateBuffer(input: String, byte_n: Int64): Unit {
        for (c in input) {
            updateBuffer(c, byte_n)
        }
    }

    func updateBuffer(input: Unit, byte_n: Int64): Unit {
        updateBuffer(input.toString(), byte_n)
    }

    func updateBuffer(input: Any, byte_n: Int64) : Unit {
        if (input is Hashable) {
            match(input as Hashable) {
                case Some(v) => updateBuffer(UInt64(v.hashCode()), byte_n)
                case _=> updateBuffer(1, byte_n)
            }
            
        } else if (input is ToString) {
            match(input as ToString) {
                case Some(v) => updateBuffer(v.toString(), byte_n)
                case _=> updateBuffer(1, byte_n)
            }
        } else {
            updateBuffer(1, byte_n)
        }
    }     
    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}

