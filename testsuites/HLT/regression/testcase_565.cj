/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC-PIPE: %run %run_opt %output %run_args

public const var_1703183581107_13 : Int64 = -93
public var var_1703183581107_106 : UInt64 = UInt64(220)
public let var_1703183581107_129 : Struct_1703183581107_47 = Struct_1703183581107_47()
public let var_1703183581107_139 : Bool = (Int8(UInt8(Int8(27))) is UInt8)
public var var_1703183581107_156 : Unit = ()
public var var_1703183581107_192 : Array<Int64> = [Int64(94), Int64(90), Int64(-59), Int64(-30), Int64(-74), Int64(61), Int64(-7), Int64(-41), Int64(-44), Int64(45)]
public let var_1703183581107_209 : (Float64, Range<Int16>, String, Range<UInt64>, Struct_1703183581107_47) = (Float64(79.0), ((Int16(Int16(UInt16(UInt8(154))))&127)..=(Int16(Int16(-112))&127):(Int64(Int16(UInt8(220)))|1)), "~_:3;X<oP~", ((UInt64(UInt64(40))&127)..=(UInt64(UInt64(14))&127):(Int64(124)|1)), Struct_1703183581107_47())
public const var_1703183581107_233 : Int16 = 57
public var var_1703183581107_330 : UInt8 = UInt8(Int8(UInt8(UInt8(Int8(31)))))

const func func_1703183581107_22(param_1703183581107_23 : UInt8) : Int64 { // block id: 24
    const var_1703183581107_28 : Float32 = 0.0;
    -84.0 * var_1703183581107_28;
    -4
}

public struct Struct_1703183581107_47 {
    public init() { // block id: 49

    }
;
    var var_1703183581107_316 : Array<Int64> = [Int64(117), Int64(41), Int64(-100), Int64(-103), Int64(-1), Int64(-63), Int64(-104), Int64(-121), Int64(-125), Int64(-48)]
}


func func_1703183581107_51(optionalParam_1703183581107_52 ! : Range<UInt32> = ((UInt32(UInt32(UInt32(Int32(36))))&127)..=(UInt32(UInt32(155))&127):(Int64(-19)|1))) : Struct_1703183581107_47 { // block id: 59
    var var_1703183581107_61 : UInt32 = UInt32(UInt32(Int8(-60)));
    var_1703183581107_61;
    var var_1703183581107_70 : (Float64, Range<Int16>, String, Range<UInt64>, Struct_1703183581107_47) = (Float64(121.0), ((Int16(Int16(Int16(Int8(-111))))&127)..=(Int16(Int16(30))&127):(Int64(UInt16(Int16(50)))|1)), "jt$M2CkwX6", ((UInt64(UInt64(27))&127)..=(UInt64(UInt64(190))&127):(Int64(-7)|1)), Struct_1703183581107_47());
    const var_1703183581107_151 : Float64 = 94.0;
    let var_1703183581107_159 : Array<UInt64> = [UInt64(Int64(Int32(124))), UInt64(UInt8(Int8(UInt8(221)))), UInt64(UInt64(Int64(-82))), UInt64(231), UInt64(UInt32(39)), UInt64(UInt16(7)), UInt64(175), UInt64(Int32(63)), UInt64(20), UInt64(Int64(UInt32(UInt8(89))))];
    let var_1703183581107_240 : Range<UInt64> = ((UInt64(UInt64(UInt64(61)))&127)..=(UInt64(UInt64(Int32(Int32(94))))&127):(Int64(Int32(Int16(UInt16(135))))|1));
    try { // block id: 66
        var_1703183581107_70[4]
    } finally { // block id: 85
        const var_1703183581107_97 : UInt16 = 87;
        try { // block id: 87
            var var_1703183581107_90 : UInt16 = UInt16(UInt8(UInt8(12)));
            var_1703183581107_90 | var_1703183581107_90
        } catch (_) { // block id: 95
            var_1703183581107_97
        };
        let var_1703183581107_228 : Int16 = Int16(Int8(Int8(-127)));
        const var_1703183581107_237 : String = "t\\5]|oK f]";
        func func_1703183581107_117(namedParam_1703183581107_118 ! : Range<Int8>, namedParam_1703183581107_119 ! : Struct_1703183581107_47) : (Float64, Range<Int16>, String, Range<UInt64>, Struct_1703183581107_47) { // block id: 120
            var loopTimeVar_1703183581107_187 : Int64 = 0;
            while (((match (var_1703183581107_129) {
                case _ => 
                    Option<Bool>.Some(false)
                
            } ?? (Option<Bool>.None ?? var_1703183581107_139))) && loopTimeVar_1703183581107_187 < 100 ) {
                loopTimeVar_1703183581107_187++;
                (Int8(28), UInt8(12), var_1703183581107_151, UInt64(196), ((UInt64(UInt64(229))&127)..(UInt64(UInt64(118))&127):(Int64(-82)|1)), var_1703183581107_156, var_1703183581107_159)[2];
                var_1703183581107_156
            };
            try { // block id: 189
                var_1703183581107_192[8];
                try { // block id: 196
                    ();
                    var var_1703183581107_200 : Bool = false;
                    var_1703183581107_200 &&= var_1703183581107_139;
                    ()
                } finally { // block id: 204
                    ();
                    Int64(-25);
                    ()
                };
                var_1703183581107_209
            } catch (_) { // block id: 223
                (var_1703183581107_151, ((Int16(var_1703183581107_228)&127)..=(Int16(var_1703183581107_233)&127):(var_1703183581107_13|1)), var_1703183581107_237, var_1703183581107_240, var_1703183581107_129)
            }
        }
;
        const var_1703183581107_261 : Int8 = -117;
        func func_1703183581107_100(namedParam_1703183581107_101 ! : Range<Int64>, namedParam_1703183581107_102 ! : Bool) : (Float64, Range<Int16>, String, Range<UInt64>, Struct_1703183581107_47) { // block id: 103
            var_1703183581107_106 -= try { // block id: 109
                UInt64(78) | var_1703183581107_106;
                UInt64(180)
            } catch (e: Exception) { // block id: 114
                var_1703183581107_106
            };
            let var_1703183581107_258 : Int8 = Int8(-10);
            func_1703183581107_117(namedParam_1703183581107_118 : if ((UInt32(212) is Range<UInt32>)) { // block id: 255
                ((Int8(var_1703183581107_258)&127)..=(Int8(var_1703183581107_261)&127):(Int64(43)|1))
            } else { // block id: 264
                var_1703183581107_156;
                var var_1703183581107_268 : Bool = (Option<Bool>.Some(false) is UInt64);
                var_1703183581107_268 ||= false;
                if (true) { ((Int8(Int8(65))&127)..=(Int8(Int8(39))&127):(Int64(47)|1)) } else { ((Int8(Int8(-64))&127)..(Int8(var_1703183581107_258)&127):(var_1703183581107_13|1)) } 
            }, namedParam_1703183581107_119 : try { // block id: 281
                var_1703183581107_240;
                Struct_1703183581107_47()
            } catch (_) { // block id: 284
                var var_1703183581107_289 : Struct_1703183581107_47 = Struct_1703183581107_47();
                if (var_1703183581107_139) { Struct_1703183581107_47() } else { var_1703183581107_289 } 
            } finally { // block id: 291
                var var_1703183581107_294 : Int16 = Int16(-46);
                var_1703183581107_294 ^= Int16(117);
                var_1703183581107_129
            })
        }
;
        var var_1703183581107_299 : Range<Int64> = ((Int64(Int64(UInt16(UInt8(Int8(33)))))&127)..(Int64(Int64(-70))&127):(Int64(112)|1));
        func_1703183581107_100(namedParam_1703183581107_101 : var_1703183581107_299, namedParam_1703183581107_102 : true);
        Struct_1703183581107_47()
    }
}

main(): Int64 {
    try {
        var var_1703183581107_19 : Int8 = Int8(123);
        (Option<Int64>.Some(var_1703183581107_13) ?? Int64(63)) / (((Int64(var_1703183581107_19) + (var_1703183581107_330|>{ lambdaParameter_1703183581107_33 : UInt8 => var var_1703183581107_311 : UInt32 = UInt32(85); func_1703183581107_51(optionalParam_1703183581107_52 : ((UInt32(var_1703183581107_311)&127)..(UInt32(var_1703183581107_311)&127):(var_1703183581107_13|1))).var_1703183581107_316[0] }))) | 1)
        // CRC Check All Variables
        var crcCheck = CrcCheck(5000, 32)
        crcCheck.updateBuffer(UInt64(var_1703183581107_19*var_1703183581107_19), 64)
        crcCheck.crcCheck()
        crcCheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[(i + buffer_index) % buffer.size] = byteArray[i + byte_index]
            i++
        }
        buffer_index = (buffer_index + i) % buffer.size
    }

    func updateBuffer(input: Bool, byte_n: Int64): Unit {
        if (input == true) {
            updateBuffer(1, byte_n)
        } else {
            updateBuffer(0, byte_n)
        }
    }

    func updateBuffer(input: Rune, byte_n: Int64): Unit {
        updateBuffer(UInt64(UInt32(input)), byte_n)
    }

    func updateBuffer(input: String, byte_n: Int64): Unit {
        for (c in input) {
            updateBuffer(c, byte_n)
        }
    }

    func updateBuffer(input: Unit, byte_n: Int64): Unit {
        updateBuffer(input.toString(), byte_n)
    }

    func updateBuffer(input: Any, byte_n: Int64) : Unit {
        if (input is Hashable) {
            match(input as Hashable) {
                case Some(v) => updateBuffer(UInt64(v.hashCode()), byte_n)
                case _=> updateBuffer(1, byte_n)
            }
            
        } else if (input is ToString) {
            match(input as ToString) {
                case Some(v) => updateBuffer(v.toString(), byte_n)
                case _=> updateBuffer(1, byte_n)
            }
        } else {
            updateBuffer(1, byte_n)
        }
    }     
    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}

extend Struct_1703183581107_47 {

}

