/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// (not CJNATIVE) EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// (not CJNATIVE) RUN-EXEC-PIPE: %run %run_opt %output %run_args
// (CJNATIVE)  ERRCHECK: %compiler %overflow_wrapping %cmp_opt %f -o %output

public let var_1668535631687_27 : Float64 = Float64(116.0)
public let var_1668535631687_40 : Unit = ()
var var_1668535631687_54 : Bool = false
let var_1668535631687_73 : Int16 = Int16(34)
public var var_1668535631687_202 : Int16 = Int16(-10)
let var_1668535631687_209 : UInt64 = UInt64(88)
public let var_1668535631687_316 : Float64 = Float64(Float64((-78.0)))
public let var_1668535631687_434 : ?Int64 = (Class_1668535631687_259<Struct_1668535631687_367<Option<Int64>, Int16>, Option<Range<UInt64>>>() as Int64)
public var var_1668535631687_462 : Array<Int64> = [Int64(UInt16(UInt16(UInt8(165)))), Int64(UInt8(UInt8(160))), Int64(Int8(40)), Int64(UInt8(177)), Int64(UInt32(151)), Int64(Int16(4)), Int64(Int32(-12)), Int64(Int64(UInt64(UInt32(210)))), Int64(Int8(54)), Int64(UInt16(UInt16(Int16(92))))]
let var_1668535631687_519 : Range<Int32> = ((Int32(80)&127)..=(Int32(71)&127):((-109)|1))

func func_1668535631687_21<T0, T1, T2>(param_1668535631687_22 : Option<UInt16>) : Option<UInt16> { // block id: 23
    var var_1668535631687_44 : Int64 = 80;
    var var_1668535631687_51 : UInt64 = UInt64(60);
    let var_1668535631687_67 : Float32 = Float32(-94.0);
    if (match (var_1668535631687_27) {
        case -57.0 => 
            ();
            false
        
        case caseVar_1668535631687_37 => 
            var_1668535631687_40;
            var_1668535631687_44++;
            true
        
        case 6.0 => 
            var_1668535631687_51;
            var_1668535631687_54
        
        case 16.0 => 
            var_1668535631687_40;
            var_1668535631687_54
        
        case _ => 
            ();
            ();
            var_1668535631687_67 != var_1668535631687_67
        
    }) { Option<UInt16>.Some(UInt16(var_1668535631687_73)) } else { ([7.0, 86.0, (-96.0), (-43.0), 26.0, (-85.0), 104.0, 14.0, (-52.0), 78.0][6] as UInt16) } 
}

public open class Class_1668535631687_259<T0, T1> {
    public init() { // block id: 261

    }
;
    public prop var_1668535631687_338 : Int64 { // block id: 339
        get() { // block id: 341
            ((UInt32(UInt8(Int8(-28)))&127)..=(UInt32(216)&127):((74|1)));
            Int64(UInt16(140))
        }

    }
}

func func_1668535631687_263<T0>(optionalParam_1668535631687_264 ! : Range<UInt64> = ((UInt64(204)&127)..=(UInt64(4)&127):(74|1)), namedParam_1668535631687_266 ! : Array<Float64>, optionalParam_1668535631687_267 ! : Unit = (), optionalParam_1668535631687_269 ! : UInt16 = UInt16(238)) : Class_1668535631687_259<Struct_1668535631687_367<Option<Int64>, Int16>, Option<Range<UInt64>>> { // block id: 271
    Class_1668535631687_259<Struct_1668535631687_367<Option<Int64>, Int16>, Option<Range<UInt64>>>()
}



public struct Struct_1668535631687_367<T0, T1> {
    init() { // block id: 369

    }
;
    public static mut prop var_1668535631687_372 : Int64 { // block id: 373
        get() { // block id: 375
            ();
            ();
            56;
            var_1668535631687_551
        }

        set(Value) { // block id: 381
            Int64(UInt16(UInt16(201)));
            ();
            var_1668535631687_551 = Value
        }

    };
    static mut prop var_1668535631687_551 : Int64 { // block id: 552
        get() { // block id: 554
            (-106)
        }

        set(Value) { // block id: 558
            ();
            ()
        }

    }
}


func func_1668535631687_454(param_1668535631687_455 : Range<UInt32>) : Int64 { // block id: 456
    var_1668535631687_40;
    var_1668535631687_462[4] << (((Struct_1668535631687_367<Option<Int64>, Int16>.var_1668535631687_372)) & 7)
}

main(): Int64 {
    try {
        let var_1668535631687_106 : UInt16 = UInt16(Int16(UInt16(66)));
        let var_1668535631687_161 : Array<UInt64> = [UInt64(Int8(Int8(Int8(-52)))), UInt64(UInt32(1)), UInt64(231), UInt64(Int16(UInt16(Int16(99)))), UInt64(Int32(Int8(Int8(14)))), UInt64(UInt8(UInt8(100))), UInt64(Int16(UInt16(Int8(-106)))), UInt64(UInt32(UInt16(UInt8(70)))), UInt64(237), UInt64(UInt16(Int8(Int8(-36))))];
        let var_1668535631687_213 : UInt64 = UInt64(Int8(63));
        let var_1668535631687_280 : Range<UInt64> = ((UInt64(66)&127)..(UInt64(124)&127):(111|1));
        let var_1668535631687_285 : Int32 = Int32(Int8(-69));
        let var_1668535631687_304 : (UInt16, Array<UInt64>, Rune) = (UInt16(Int16(Int16(Int16(-110)))), [UInt64(2), UInt64(208), UInt64(208), UInt64(109), UInt64(188), UInt64(80), UInt64(111), UInt64(55), UInt64(226), UInt64(195)], r'D');
        func func_1668535631687_6(namedParam_1668535631687_7 ! : UInt8, optionalParam_1668535631687_8 ! : Int16 = Int16(Int8(Int8(-38))), namedParam_1668535631687_12 ! : Rune, namedParam_1668535631687_13 ! : Float32) : Int64 { // block id: 14
            let var_1668535631687_99 : Option<UInt16> = (UInt16(UInt8(Int8(-90))) as UInt16);
            ((try { // block id: 145
                var var_1668535631687_148 : Int64 = 26;
                var_1668535631687_148 / (((-92)) | 1);
                Option<UInt16>.Some(UInt16(131))
            } finally { // block id: 153
                var_1668535631687_99
            }|>{ lambdaParameter_1668535631687_91 : Option<UInt16> => let var_1668535631687_129 : Unit = (); match (try { // block id: 95
                if (var_1668535631687_54) { var_1668535631687_99 } else { Option<UInt16>.Some(var_1668535631687_106) } 
            } catch (_) { // block id: 110
                var_1668535631687_40;
                if (true) { var_1668535631687_99 } else { var_1668535631687_99 } 
            }) {
                case caseVar_1668535631687_118 => 
                    Option<UInt16>.None
                
                case caseVar_1668535631687_123 : Int8 => 
                    (-82.0) - var_1668535631687_27;
                    var_1668535631687_129;
                    var_1668535631687_99
                
                case caseVar_1668535631687_134 : Range<UInt64> => 
                    var_1668535631687_40;
                    var_1668535631687_99
                
                case _ => 
                    if (var_1668535631687_54) { Option<UInt16>.None } else { Option<UInt16>.None } 
                
            } }) ?? match ((var_1668535631687_106, var_1668535631687_161, r'S')) {
                case (_ : UInt64,_,caseVar_1668535631687_197 : Unit) => 
                    [15.0, 91.0, (-73.0), (-42.0), (-89.0), (-43.0), 114.0, (-110.0), 35.0, 100.0];
                    var_1668535631687_202 %= ((Int16(94)) | 1);
                    var var_1668535631687_224 : Rune = r'l';
                    (UInt16(182), [var_1668535631687_209, var_1668535631687_209, var_1668535631687_213, UInt64(91), var_1668535631687_209, UInt64(157), UInt64(114), var_1668535631687_209, var_1668535631687_209, UInt64(226)], var_1668535631687_224)
                
                case _ => 
                    ();
                    UInt16(97);
                    let var_1668535631687_233 : (UInt16, Array<UInt64>, Rune) = (UInt16(Int16(Int8(Int8(-5)))), [UInt64(Int32(18)), UInt64(232), UInt64(219), UInt64(207), UInt64(182), UInt64(UInt8(UInt8(9))), UInt64(133), UInt64(82), UInt64(146), UInt64(UInt16(Int8(-51)))], r'f');
                    if (false) { var_1668535631687_233 } else { var_1668535631687_233 } 
                
            }[0]);
            func_1668535631687_263<Float32>(optionalParam_1668535631687_264 : (Option<Range<UInt64>>.Some(var_1668535631687_280) ?? ((UInt64(135)&127)..(UInt64(5)&127):((-121)|1))), namedParam_1668535631687_266 : match (var_1668535631687_285) {
                case caseVar_1668535631687_290 : (UInt16, Array<UInt64>, Rune) => 
                    if (true) { var_1668535631687_99 } else { Option<UInt16>.Some(UInt16(215)) } ;
                    (-33.0);
                    [(-13.0), (-101.0), 111.0, 71.0, 48.0, 82.0, 33.0, 49.0, 41.0, (-29.0)]
                
                case -56 | -123 | -69 => 
                    var_1668535631687_40;
                    var_1668535631687_304;
                    [58.0, (-94.0), var_1668535631687_316, var_1668535631687_316, 71.0, (-49.0), (-122.0), var_1668535631687_316, (-66.0), (-40.0)]
                
                case _ => 
                    [(-62.0), 74.0, (-86.0), (-127.0), (-25.0), (-15.0), 16.0, (-10.0), (-65.0), (-26.0)]
                
            }, optionalParam_1668535631687_267 : (Option<Unit>.None ?? ())).var_1668535631687_338
        }
;
        let var_1668535631687_388 : ?Range<UInt64> = Option<Range<UInt64>>.None;
        let var_1668535631687_394 : Int64 = Int64(Int32(Int32(Int8(77))));
        let var_1668535631687_440 : Array<Int64> = [15, (-54), 3, (-71), (-34), 101, (-93), 89, 49, (-72)];
        func func_1668535631687_351<T0, T1>(namedParam_1668535631687_352 ! : Range<Int32>) : UInt8 { // block id: 353
            var var_1668535631687_360 : UInt8 = UInt8(59);
            let var_1668535631687_364 : Float32 = Float32(-47.0);
            var var_1668535631687_404 : Int32 = Int32(-1);
            var var_1668535631687_450 : Rune = r'w';
            [95, func_1668535631687_6(namedParam_1668535631687_7 : var_1668535631687_360, namedParam_1668535631687_12 : r'C', namedParam_1668535631687_13 : var_1668535631687_364), Struct_1668535631687_367<Option<Int64>, Int16>.var_1668535631687_372, match (var_1668535631687_388) {
                case _ : UInt64 => 
                    var_1668535631687_394
                
                case _ => 
                    var_1668535631687_404++;
                    (((-14)&127)..(var_1668535631687_394&127):((var_1668535631687_394|1)));
                    120 ^ var_1668535631687_394
                
                case _ => 
                    ();
                    [(-5), 33, 75, (-37), 35, 59, (-111), 97, (-59), 39];
                    var_1668535631687_394
                
                case _ => 
                    (-22) & (-58)
                
            }, 115, var_1668535631687_394 + 101, (var_1668535631687_434 ?? var_1668535631687_394), var_1668535631687_440[8], if (false) { // block id: 445
                var_1668535631687_394
            } else { // block id: 447
                Int16(125);
                var_1668535631687_450;
                var_1668535631687_394
            }, (((UInt32(114)&127)..(UInt32(45)&127):(12|1))|>func_1668535631687_454)][4];
            match (((Int16(47)&127)..(Int16(-56)&127):((-47)|1))) {
                case _ => 
                    var_1668535631687_360
                
                case _ : Option<Range<UInt64>> => 
                    var_1668535631687_360--;
                    UInt16(131);
                    UInt8(249) + UInt8(153)
                
                case _ => 
                    var_1668535631687_360 + var_1668535631687_360
                
            }
        }
;
        var var_1668535631687_532 : Rune = r'e';
        var var_1668535631687_547 : Float32 = Float32(Float32(32.0));
        func_1668535631687_6(namedParam_1668535631687_7 : func_1668535631687_351<Struct_1668535631687_367<Option<Int64>, Int16>, Range<Int16>>(namedParam_1668535631687_352 : var_1668535631687_519), optionalParam_1668535631687_8 : var_1668535631687_73, namedParam_1668535631687_12 : try { // block id: 523
            r'c'
        } catch (e: Exception) { // block id: 525
            UInt16(51);
            false;
            if (var_1668535631687_54) { r'u' } else { var_1668535631687_532 } 
        } finally { // block id: 534
            var var_1668535631687_537 : UInt64 = UInt64(UInt8(UInt8(Int8(22))));
            var_1668535631687_537 = UInt64(28);
            let var_1668535631687_544 : Rune = r'c';
            var_1668535631687_544
        }, namedParam_1668535631687_13 : var_1668535631687_547)
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var_1668535631687_73*var_1668535631687_73), 64)
        crccheck.updateBuffer(UInt64(var_1668535631687_106*var_1668535631687_106), 64)
        crccheck.updateBuffer(UInt64(var_1668535631687_202*var_1668535631687_202), 64)
        crccheck.updateBuffer(UInt64(var_1668535631687_209*var_1668535631687_209), 64)
        crccheck.updateBuffer(UInt64(var_1668535631687_213*var_1668535631687_213), 64)
        crccheck.updateBuffer(UInt64(var_1668535631687_285*var_1668535631687_285), 64)
        crccheck.updateBuffer(UInt64(var_1668535631687_394*var_1668535631687_394), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend<T0, T1> Struct_1668535631687_367<T0, T1> {

}

// (CJNATIVE) ASSERT: scan sema_static_variable_use_generic_parameter
