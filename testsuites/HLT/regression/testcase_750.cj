/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args

internal var var_1743341933151_26: Class_1743341933151_22 = Class_1743341933151_22()
internal var var_1743341933151_66: Bool = false
internal var var_1743341933151_185: VArray<UInt32, $4> = VArray<UInt32, $4>({i => UInt32(188)})
var var_1743341933151_239: Int8 = Int8(Int8(-95))
public var var_1743341933151_249: (UInt16, Int16, Float64, VArray<UInt32, $4>) = (UInt16(Int8(UInt8(Int8(86)))), Int16(75),
    Float64(Float32(-50.0)), VArray<UInt32, $4>({i => UInt32(30)}))
public var var_1743341933151_294: Float64 = Float64(-121.0)
var var_1743341933151_359: Class_1743341933151_355 = Class_1743341933151_355()
public var var_1743341933151_534: Rune = r'K'
let var_1743341933151_609: Option<Unit> = (((UInt64(UInt64(174)) & 127)..=(UInt64(UInt64(243)) & 127) : (Int64(-51) | 1)) as Unit)
let var_1743341933151_731: Unit = ()
public var var_1743341933151_734: Float32 = Float32(67.0)
public var var_1743341933151_737: Class_1743341933151_22 = Class_1743341933151_677()
public var var_1743341933151_795: UInt32 = UInt32(Int8(-51))
let var_1743341933151_817: Range<UInt64> = ((UInt64(UInt64(23)) & 127)..(UInt64(UInt64(109)) & 127) : (Int64(36) | 1))
public let var_1743341933151_820: String = "ZNBZI? KxD"
public let var_1743341933151_842: UInt16 = UInt16(198)
public var var_1743341933151_941: Unit = ()
@Deprecated
internal var var_1743341933151_945: Int64 = Int64(Int16(UInt8(200)))
public let var_1743341933151_956: Bool = true
public let var_1743341933151_984: Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
@Deprecated
public var var_1743341933151_1035: String = ###"W${var_1743341933151_820}m747/G${var_1743341933151_820}p${var_1743341933151_820}Ry"###
var var_1743341933151_1044: Option<String> = Option<String>.None
public var var_1743341933151_1055: UInt64 = UInt64(UInt32(UInt16(Int8(UInt8(131)))))
@Deprecated
internal var var_1743341933151_1065: Enum_1743341933151_95 = Enum_1743341933151_95.enumValue_1743341933151_1067(
    [(), (), (), (), (), (), (), (), (), ()],
    ((Int8(Int8(Int8(12))) & 127)..=(Int8(Int8(90)) & 127) : (Int64(Int64(Int64(123))) | 1)),
    (UInt16(211), Int16(UInt16(42)), Float64(-11.0), VArray<UInt32, $4>(repeat: UInt32(Int32(60)))))
public let var_1743341933151_1111: Int = Int64(UInt8(44))
public var var_1743341933151_1252: UInt8 = UInt8(79)
let var_1743341933151_1257: (Array<Unit>, Range<Int16>, Array<Unit>, Bool, Int16, Array<Unit>, Option<Struct_1743341933151_342>, 
    Bool) = ([(), (), (), (), (), (), (), (), (), ()], ((Int16(Int16(UInt8(221))) & 127)..=(Int16(Int16(Int16(84))) & 127) : (Int64(37) |
        1)), [(), (), (), (), (), (), (), (), (), ()], (Class_1743341933151_326() is Range<UInt64>), Int16(64), [(), (),
        (), (), (), (), (), (), (), ()], Option<Struct_1743341933151_342>.None, true)
let var_1743341933151_1295: Option<Bool> = (Float32(Float32(Float32(Float32(99.0)))) as Bool)
var var_1743341933151_1309: Int16 = Int16(Int8(-128))
let var_1743341933151_1483: Range<Int8> = ((Int8(Int8(113)) & 127)..(Int8(Int8(109)) & 127) : (Int64(-35) | 1))
let var_1743341933151_1520: Bool = true
var var_1743341933151_1533: UInt16 = UInt16(Int16(UInt16(41)))
public var var_1743341933151_1540: UInt64 = UInt64(UInt16(Int8(UInt8(Int8(-89)))))

public open class Class_1743341933151_22 <: Resource {
    public init() { // block id: 24

    }

    @Frozen
    prop var_1743341933151_29: Array<Unit> { // block id: 30
        get() { // block id: 32
            ();
            [(), (), (), (), (), (), (), (), (), ()]
        }
    }

    @Frozen
    public static mut prop var_1743341933151_100: Enum_1743341933151_95 { // block id: 101
        get() { // block id: 103
            Enum_1743341933151_95.enumValue_1743341933151_105(
                ((UInt32(UInt32(UInt32(189))) & 127)..(UInt32(UInt32(UInt8(65))) & 127) : (Int64(Int64(-96)) | 1)),
                UInt16(UInt16(2)), ((Int32(Int32(110)) & 127)..=(Int32(Int32(23)) & 127) : (Int64(-22) | 1)), r'Y');
            var_1743341933151_1122
        }
        set(Value) { // block id: 123
            UInt64(123);
            ();
            var_1743341933151_1122 = Value
        }
    }
    public static var var_1743341933151_323: Unit

    @Frozen
    public static prop var_1743341933151_368: Struct_1743341933151_342 { // block id: 369
        get() { // block id: 371
            Struct_1743341933151_342()
        }
    }
    protected static func func_1743341933151_346(): Struct_1743341933151_342 { // block id: 347
        (((var_1743341933151_359.var_1743341933151_362) as Struct_1743341933151_342) ?? var_1743341933151_368)
    };

    public static let var_1743341933151_387: (Array<Unit>, Range<Int16>, Array<Unit>, Bool, Int16, Array<Unit>, Option<Struct_1743341933151_342>, 
        Bool)
    public static let var_1743341933151_420: Option<Bool>
    static var var_1743341933151_473: Float32
    static var var_1743341933151_499: Array<Unit>
    static mut prop var_1743341933151_1122: Enum_1743341933151_95 { // block id: 1123
        get() { // block id: 1125
            ((Int64(Int64(-1)) & 127)..=(Int64(Int64(-110)) & 127) : (Int64(83) | 1));
            ();
            Enum_1743341933151_95.enumValue_1743341933151_1132
        }
        set(Value) { // block id: 1135
            ()
        }
    }
    static var var_1743341933151_1162: VArray<UInt32, $4> = [UInt32(228), UInt32(185), UInt32(32), UInt32(93)];
    mut prop var_1743341933151_1171: (Int32, Int16, Array<UInt64>, Option<Struct_1743341933151_342>) { // block id: 1172
        get() { // block id: 1174
            (Int32(Int8(Int8(87))), Int16(98), [UInt64(UInt32(60)), UInt64(UInt16(200)), UInt64(UInt8(15)),
                    UInt64(UInt32(18)), UInt64(UInt32(252)), UInt64(Int64(-100)), UInt64(215), UInt64(UInt32(19)),
                    UInt64(232), UInt64(85)], Option<Struct_1743341933151_342>.None)
        }
        set(Value) { // block id: 1201
            ((Int32(-42), Int16(UInt16(124)), [UInt64(97), UInt64(10), UInt64(202), UInt64(85), UInt64(84), UInt64(229),
                        UInt64(45), UInt64(126), UInt64(126), UInt64(234)], Option<Struct_1743341933151_342>.None),
                ###",4$SOuX (L"###, (((UInt64(UInt64(132)) & 127)..=(UInt64(UInt64(220)) & 127) : (Int64(-47) | 1)) is Range<Int8>));
            ()
        }
    }
    public var var_1743341933151_1220: Int32 = Int32(126);
    public var var_1743341933151_1582: Array<UInt64> = [UInt64(37), UInt64(69), UInt64(55), UInt64(133), UInt64(35),
        UInt64(116), UInt64(239), UInt64(136), UInt64(3), UInt64(166)];
    protected var var_1743341933151_1755: ((Int32, Int16, Array<UInt64>, Option<Struct_1743341933151_342>), String, 
        Bool) = ((Int32(43), Int16(60), [UInt64(242), UInt64(119), UInt64(164), UInt64(113), UInt64(228), UInt64(6),
                UInt64(108), UInt64(230), UInt64(68), UInt64(23)], Option<Struct_1743341933151_342>.None),
        """
2CHoo
F?7\"s
""", false);
    static var var_1743341933151_1896: Array<Option<Bool>> = [Option<Bool>.None, Option<Bool>.None, Option<Bool>.None,
        Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None,
        Option<Bool>.None];
    public static var var_1743341933151_1974: Bool = true
    static init() {
        var_1743341933151_323 = ()
        var_1743341933151_387 = ([(), (), (), (), (), (), (), (), (), ()], ((Int16(Int16(-71)) & 127)..(Int16(Int16(-25)) &
                127) : (Int64(-122) | 1)), [(), (), (), (), (), (), (), (), (), ()], true, Int16(16), [(), (), (), (),
                (), (), (), (), (), ()], Option<Struct_1743341933151_342>.None, true)
        var_1743341933151_420 = Option<Bool>.None
        var_1743341933151_473 = Float32(-68.0)
        var_1743341933151_499 = [(), (), (), (), (), (), (), (), (), ()]
    }
    public func isClosed(): Bool {
        return true
    }
    public func close(): Unit {}
}

public enum Enum_1743341933151_95 {
    defaultValue
    | enumValue_1743341933151_105(Range<UInt32>, UInt16, Range<Int32>, Rune)
    | enumValue_1743341933151_1067(Array<Unit>, Range<Int8>, (UInt16, Int16, Float64, VArray<UInt32, $4>))
    | enumValue_1743341933151_1132
}

@Frozen
@Deprecated
public func func_1743341933151_37(param_1743341933151_38: UInt32): Bool { // block id: 39
    let var_1743341933151_52: Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    var var_1743341933151_69: Bool = false;
    const var_1743341933151_81: Unit = ();
    let var_1743341933151_85: Option<Bool> = (((UInt8(UInt8(Int8(80))) & 127)..=(UInt8(UInt8(UInt8(Int8(-124)))) & 127) : (Int64(-74) |
        1)) as Bool);
    (if (try { // block id: 47
        if (false) {
            [(), (), (), (), (), (), (), (), (), ()]
        } else {
            var_1743341933151_52
        };
        var_1743341933151_66 ||= var_1743341933151_69
        true
    } finally { // block id: 72
        var_1743341933151_69
    }) { // block id: 74
        if (var_1743341933151_69) {
            Option<Bool>.None
        } else {
            Option<Bool>.None
        }
    } else { // block id: 79
        var_1743341933151_81;
        var_1743341933151_81;
        var_1743341933151_85
    } ?? match (Class_1743341933151_22.var_1743341933151_100) {
        case caseVar_1743341933151_128: Bool =>
            var_1743341933151_81;
            var_1743341933151_81;
            false

        case _ =>
            var var_1743341933151_138: Float32 = Float32(55.0);
            var_1743341933151_138 + var_1743341933151_138;
            false
    })
}

@Frozen
public func func_1743341933151_7(param_1743341933151_8: UInt16): Bool { // block id: 9
    var_1743341933151_26.var_1743341933151_29[1];
    var var_1743341933151_143: (UInt32) -> Bool = func_1743341933151_37;
    try { // block id: 148
        let var_1743341933151_155: UInt32 = UInt32(194);
        var var_1743341933151_159: VArray<UInt32, $4> = [UInt32(69), UInt32(47), UInt32(8), UInt32(13)];
        if (true) {
            VArray<UInt32, $4>({i => UInt32(232)})
        } else {
            var_1743341933151_159
        }
    } catch (e: Exception) { // block id: 161
        ();
        let var_1743341933151_168: UInt32 = UInt32(160);
        var var_1743341933151_173: VArray<UInt32, $4> = VArray<UInt32, $4>({i => UInt32(147)});
        if (false) {
            VArray<UInt32, $4>(repeat: UInt32(61))
        } else {
            var_1743341933151_173
        }
    } finally { // block id: 183
        var_1743341933151_185
    }[2] |> var_1743341933151_143
}

public open class Class_1743341933151_271 {
    public init() { // block id: 273

    }

    public static var var_1743341933151_276: ?UInt32 = Option<UInt32>.None
}

public interface Interface_1743341933151_331 {}

public sealed interface Interface_1743341933151_330 <: Interface_1743341933151_331 {}

public sealed interface Interface_1743341933151_329 <: Interface_1743341933151_330 & Interface_1743341933151_331 {
    @Frozen
    func func_1743341933151_600(namedParam_1743341933151_601!: Float64, namedParam_1743341933151_602!: UInt64,
        namedParam_1743341933151_603!: Range<Int8>): Bool { // block id: 604
        const var_1743341933151_635: Int32 = 73;
        match (var_1743341933151_609) {
            case caseVar_1743341933151_614: Range<UInt8> =>
                UInt32(20) % ((UInt32(1)) | 1);
                const var_1743341933151_623: Int32 = 55;
                if (true) {
                    VArray<Int32, $2>(repeat: var_1743341933151_623)
                } else {
                    VArray<Int32, $2>(repeat: Int32(44))
                }

            case _ => VArray<Int32, $2>({i => Int32(54)})
        }[0];
        var_1743341933151_66
    }
}

@Deprecated
public open class Class_1743341933151_326 <: Class_1743341933151_22 & Interface_1743341933151_329 & Interface_1743341933151_331 {
    @Frozen
    public init() { // block id: 328

    }

    static const var_1743341933151_378: UInt32 = 51;
    static const var_1743341933151_423: Bool = true;

    @Frozen
    private static mut prop var_1743341933151_458: Int64 { // block id: 459
        get() { // block id: 461
            ###"+mBf-!^R|x"###;
            Int64(Int8(-56))
        }
        set(Value) { // block id: 467
            ();
            ();
            ()
        }
    }
    public static func func_1743341933151_334(param_1743341933151_335: UInt64, param_1743341933151_336: Range<Int64>,
        param_1743341933151_337: UInt8, param_1743341933151_338: Range<UInt64>): Bool { // block id: 339
        var loopTimeVar_1743341933151_381: Int64 = 0;
        while ((func_1743341933151_346().var_1743341933151_374) && loopTimeVar_1743341933151_381 < 100) {
            loopTimeVar_1743341933151_381++;
            var_1743341933151_378
        };
        var var_1743341933151_446: UInt64 = UInt64(Int16(UInt8(Int8(UInt8(122)))));
        var var_1743341933151_490: Unit = ();
        if (if (var_1743341933151_387[3]) { // block id: 418
            var_1743341933151_420;
            var_1743341933151_423
        } else if (try { // block id: 426
            let var_1743341933151_428: Int16 = Int16(29);
            var_1743341933151_428;
            var_1743341933151_423 && true;
            var_1743341933151_423
        } finally { // block id: 434
            let var_1743341933151_436: Option<Struct_1743341933151_342> = Option<Struct_1743341933151_342>.None;
            var_1743341933151_436;
            false
        }) { // block id: 439
            var_1743341933151_423 && var_1743341933151_66
        } else { // block id: 443
            var_1743341933151_446 *= UInt64(0)
            ();
            true
        }) { // block id: 455
            var_1743341933151_458--;
            var_1743341933151_473 /= Float32((Int32(var_1743341933151_473)) | 1)
            (var_1743341933151_458, false)[1]
        } else { // block id: 482
            (Option<Unit>.None ?? var_1743341933151_490);
            try { // block id: 493
                var_1743341933151_378
            } finally { // block id: 495
                if (true) {
                    var_1743341933151_499
                } else {
                    [var_1743341933151_490, var_1743341933151_490, (), var_1743341933151_490, (), var_1743341933151_490,
                        (), (), (), var_1743341933151_490]
                };
                UInt32(123)
            };
            UInt32(39) < UInt32(40)
        }
    };

    static const var_1743341933151_1155: UInt16 = 180;
    private let var_1743341933151_1158: Int16 = Int16(61);
    static prop var_1743341933151_1709: Int8 { // block id: 1710
        get() { // block id: 1712
            ();
            Int8(111)
        }
    }
    public open override func func_1743341933151_600(namedParam_1743341933151_601!: Float64,
        namedParam_1743341933151_602!: UInt64, namedParam_1743341933151_603!: Range<Int8>): Bool { // block id: 1142
        var var_1743341933151_1225: Option<Struct_1743341933151_342> = Option<Struct_1743341933151_342>.Some(
            Struct_1743341933151_342(namedParam_1743341933151_970: Class_1743341933151_22(),
                optionalParam_1743341933151_971: ((UInt16(170), Int16(6), Float64(103.0), VArray<UInt32, $4>(repeat: UInt32(160))) as Bool)));
        var var_1743341933151_1605: Option<Range<Int8>> = Option<Range<Int8>>.None;
        let var_1743341933151_1625: Option<Array<Int64>> = (((UInt16(56), Int16(UInt16(234)), Float64(102.0), VArray<UInt32, $4>({
                        i => UInt32(1)
                    })), (((Int32(104), Int16(61), [UInt64(232), UInt64(207), UInt64(197), UInt64(129), UInt64(247),
                            UInt64(131), UInt64(134), UInt64(163), UInt64(239), UInt64(126)], Option<Struct_1743341933151_342>
                            .None), "D6Ko`!/^.\"", true), (Int32(53), Int16(-90), [UInt64(28), UInt64(120), UInt64(234),
                        UInt64(158), UInt64(157), UInt64(171), UInt64(13), UInt64(219), UInt64(62), UInt64(9)], Option<Struct_1743341933151_342>
                        .None), ()), (Option<Struct_1743341933151_342>.None, [UInt64(154), UInt64(44), UInt64(195),
                    UInt64(194), UInt64(37), UInt64(226), UInt64(105), UInt64(233), UInt64(225), UInt64(244)],
                Struct_1743341933151_342(namedParam_1743341933151_970: Class_1743341933151_22(),
                    optionalParam_1743341933151_971: Option<Bool>.None), (UInt16(60), Int16(-91), Float64(-90.0), VArray<UInt32, $4>({
                            i => UInt32(15)
                        })), (Int8(-66) as Range<Int8>), Int16(Int8(-112)), Float64(-121.0)), ((Int64(Int64(Int64(29))) &
                127)..=(Int64(Int64(UInt8(203))) & 127) : (Int64(UInt16(118)) | 1)), VArray<UInt32, $4>(repeat: UInt32(UInt16(44)))) as Array<Int64>);
        (((var_1743341933151_1155, var_1743341933151_1158, var_1743341933151_294, var_1743341933151_1162), ((var_1743341933151_1171,
                    """
o?X@n
9a{Ff~
""", true), (var_1743341933151_1220, Int16(-76), [UInt64(106), UInt64(27),
                        UInt64(172), UInt64(220), UInt64(134), UInt64(218), UInt64(230), UInt64(242), UInt64(32),
                        UInt64(60)], var_1743341933151_1225), var_1743341933151_941), (Option<Struct_1743341933151_342>
                    .Some(
                        Struct_1743341933151_342(
                            namedParam_1743341933151_1244: Option<Unit>.Some(var_1743341933151_731))),
                var_1743341933151_1582, Struct_1743341933151_342(), (UInt16(7), Int16(-10), var_1743341933151_294, VArray<UInt32, $4>({
                            i => UInt32(124)
                        })), var_1743341933151_1605, Int16(-13), Float64(95.0)), ((Int64(Int64(114)) & 127)..(Int64(Int64(-71)) &
                127) : (var_1743341933151_458 | 1)), VArray<UInt32, $4>(repeat: UInt32(115)))[2][4] ?? if (try { // block id: 1622
            var_1743341933151_731;
            var_1743341933151_1625;
            true
        } catch (_) { // block id: 1699
            false
        }) {
            (Option<Range<Int8>>.Some(
                ((Int8(var_1743341933151_1709) & 127)..=(Int8(var_1743341933151_1709) & 127) : (var_1743341933151_1111 |
                    1))) ?? ((Int8(Int8(71)) & 127)..(Int8(Int8(68)) & 127) : (Int64(120) | 1)))
        } else {
            ((Int8(Int8(81)) & 127)..(Int8(Int8(-98)) & 127) : (Int64(9) | 1))
        });
        var var_1743341933151_1807: Range<Int16> = ((Int16(Int16(-2)) & 127)..=(Int16(Int16(Int16(-35))) & 127) : (Int64(Int8(Int8(UInt8(14)))) |
            1));
        const var_1743341933151_1851: Int32 = 99;
        (try { // block id: 1722
                if (var_1743341933151_956) {
                    [(), (), (), (), (), (), (), (), (), ()]
                } else {
                    [var_1743341933151_941, var_1743341933151_731, var_1743341933151_731, var_1743341933151_323,
                        var_1743341933151_941, var_1743341933151_323, var_1743341933151_323, var_1743341933151_731, (),
                        ()]
                }
            } finally { // block id: 1737
                ((UInt64(UInt64(30)) & 127)..(UInt64(UInt64(47)) & 127) : (Int64(16) | 1));
                var var_1743341933151_1740: Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
                var_1743341933151_1740
            }, ((Int16(Int16(-74)) & 127)..(Int16(var_1743341933151_1158) & 127) : (Int64(41) | 1)), (Option<Array<Unit>>
                .None ?? [(), (), (), (), (), (), (), (), (), ()]), var_1743341933151_1755[2], var_1743341933151_1309, [(),
                (), (), (), (), (), (), (), (), ()], try { // block id: 1778
                if (false) {
                    Enum_1743341933151_95.enumValue_1743341933151_105(
                        ((UInt32(UInt32(177)) & 127)..(UInt32(UInt32(193)) & 127) : (Int64(31) | 1)), UInt16(67),
                        ((Int32(Int32(-11)) & 127)..=(Int32(Int32(-35)) & 127) : (Int64(-38) | 1)),
                        var_1743341933151_534)
                } else {
                    Enum_1743341933151_95.enumValue_1743341933151_105(
                        ((UInt32(UInt32(222)) & 127)..(UInt32(UInt32(168)) & 127) : (var_1743341933151_458 | 1)),
                        UInt16(203),
                        ((Int32(var_1743341933151_1220) & 127)..=(Int32(var_1743341933151_1220) & 127) : (var_1743341933151_1111 |
                            1)), var_1743341933151_534)
                };
                if (true) {
                    ((Int16(Int16(104)) & 127)..=(Int16(var_1743341933151_1158) & 127) : (Int64(71) | 1))
                } else {
                    var_1743341933151_1807
                };
                Option<Struct_1743341933151_342>.None
            } finally { // block id: 1817
                var_1743341933151_1171;
                Option<Struct_1743341933151_342>.None
            }, match (var_1743341933151_1158) {
                case caseVar_1743341933151_1824 => var_1743341933151_1252 >= UInt8(116)

                case 98 | 28 | 81 | -79 =>
                    var_1743341933151_731;
                    var_1743341933151_294 - Float64(85.0);
                    true || true

                case 62 | -103 =>
                    var_1743341933151_941;
                    var_1743341933151_956

                case _ =>
                    false;
                    var_1743341933151_323;
                    var_1743341933151_1851 >= Int32(42)
            })[3]
    };

    public let var_1743341933151_1866: (Array<Option<Bool>>, VArray<Int32, $2>, UInt32) = ([Option<Bool>.None,
            Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None,
            Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None], VArray<Int32, $2>(repeat: Int32(-102)),
        UInt32(98));
    static mut prop var_1743341933151_1921: (Array<Int64>, UInt64, Int32, Unit, Array<Unit>) { // block id: 1922
        get() { // block id: 1924
            ([Int64(-93), Int64(81), Int64(-40), Int64(-20), Int64(-97), Int64(31), Int64(-99), Int64(-86), Int64(63),
                    Int64(94)], UInt64(107), Int32(Int8(-91)), (), [(), (), (), (), (), (), (), (), (), ()])
        }
        set(Value) { // block id: 1934
            ()
        }
    }
}

public struct Struct_1743341933151_342 {
    public init() { // block id: 344

    }

    public var var_1743341933151_374: Bool = true;
    init(namedParam_1743341933151_970!: Class_1743341933151_22,
        optionalParam_1743341933151_971!: Option<Bool> = Option<Bool>.None,
        optionalParam_1743341933151_973!: (Int64, Bool) = (Int64(-92), (() is Option<Bool>))) { // block id: 978
        let var_1743341933151_1000: (Range<Int64>, Class_1743341933151_22, Option<Bool>, Range<UInt16>, Unit) = (((Int64(Int64(-48)) &
                127)..=(Int64(Int64(-56)) & 127) : (Int64(90) | 1)), Class_1743341933151_22(), Option<Bool>.None, ((UInt16(UInt16(237)) &
                127)..=(UInt16(UInt16(65)) & 127) : (Int64(-59) | 1)), ());
        if (var_1743341933151_66) { // block id: 981
            var var_1743341933151_1028: Int16 = Int16(-65);
            match (var_1743341933151_984) {
                case _ =>
                    var_1743341933151_1000;
                    var_1743341933151_1000;
                    ",De'.9vwYU"

                case caseVar_1743341933151_1011: Int16 =>
                    if (true) {
                        var_1743341933151_820
                    } else {
                        var_1743341933151_820
                    }

                case caseVar_1743341933151_1019: VArray<Int32, $2> =>
                    Float64(58.0);
                    var_1743341933151_820

                case _ =>
                    var_1743341933151_1028 >>= ((Int16(-110)) & 7)
                    if (true) {
                        var_1743341933151_820
                    } else {
                        var_1743341933151_1035
                    }
            }
        } else { // block id: 1037
            (var_1743341933151_1044 ?? ###"_?LvJ3*t\\U"###)
        };
        if (true) {
            (if (true) { // block id: 1052
                var_1743341933151_1055 -= UInt64(139)
            } else if (var_1743341933151_956) { // block id: 1063
                var_1743341933151_1065;
                ()
            } as String)
        } else {
            Option<String>.None
        }
    };

    static const var_1743341933151_1289: Int32 = -71;
    public static var var_1743341933151_1550: Bool = true;
    public init(namedParam_1743341933151_1244!: Option<Unit>) { // block id: 1245
        var var_1743341933151_1344: Int32 = Int32(Int32(-88));
        if (try { // block id: 1249
            var_1743341933151_1252 |= var_1743341933151_1252
            var_1743341933151_941;
            var_1743341933151_1257
        } finally { // block id: 1283
            var_1743341933151_731;
            var_1743341933151_1257
        }[3]) { // block id: 1287
            var_1743341933151_1289
        } else if ((if (var_1743341933151_956) {
            var_1743341933151_1295
        } else {
            var_1743341933151_1295
        } ?? match (UInt32(190)) {
            case _ =>
                var_1743341933151_1309 -= Int16(50)
                true

            case _ =>
                UInt32(210) + UInt32(254);
                [(), (), (), (), (), (), (), (), (), ()];
                var_1743341933151_795 < UInt32(171)

            case 29 => false || true

            case 50 | 0 | 55 | 243 => false

            case _ => true
        })) { // block id: 1338
            if (false) { // block id: 1341
                var_1743341933151_1344--;
                var_1743341933151_1309 /= ((var_1743341933151_1309) | 1)
            };
            var_1743341933151_1344
        } else { // block id: 1351
            var loopTimeVar_1743341933151_1356: Int64 = 0;
            while ((false) && loopTimeVar_1743341933151_1356 < 100) {
                loopTimeVar_1743341933151_1356++;
            };
            try { // block id: 1358
                var_1743341933151_1344 + Int32(78)
            } finally { // block id: 1362
                Int32(-97)
            }
        };
        var var_1743341933151_1454: Unit = ();
        var var_1743341933151_1487: Bool = true;
        try { // block id: 1365
            match (UInt32(244)) {
                case caseVar_1743341933151_1370 =>
                    var var_1743341933151_1374: Bool = (Int8(-36) is (Array<Unit>, Range<Int16>, Array<Unit>, Bool, 
                        Int16, Array<Unit>, Option<Struct_1743341933151_342>, Bool));
                    var_1743341933151_1374 ||= false

                case _ =>
                    if (var_1743341933151_956) {
                        [(), (), (), (), (), (), (), (), (), ()]
                    } else {
                        [(), (), (), (), (), (), (), (), (), ()]
                    };
                    ()

                case 18 =>
                    if (var_1743341933151_956) {
                        Option<Unit>.Some(())
                    } else {
                        var_1743341933151_609
                    };
                    var_1743341933151_734 -= Float32(-111.0)
                    ()

                case _ => var_1743341933151_1055 &= var_1743341933151_1055
            };
            var var_1743341933151_1407: Int64 = Int64(Int64(Int32(5)));
            try { // block id: 1405
                var_1743341933151_1407
            } finally { // block id: 1411
                var_1743341933151_1295;
                if (var_1743341933151_956) {
                    var_1743341933151_1295
                } else {
                    var_1743341933151_1295
                };
                var_1743341933151_1407
            };
            let var_1743341933151_1426: Array<Int64> = [Int64(UInt8(UInt8(UInt8(247)))), Int64(Int8(-27)), Int64(66),
                Int64(-96), Int64(Int8(Int8(3))), Int64(-74), Int64(-54), Int64(UInt64(UInt64(201))), Int64(-25),
                Int64(-89)];
            (Option<Array<Int64>>.Some(
                [Int64(-38), Int64(-59), Int64(-14), Int64(-3), Int64(-115), Int64(-65), Int64(70), Int64(-12),
                    Int64(13), Int64(51)]) ?? var_1743341933151_1426)
        } catch (e: Exception) { // block id: 1446
            match (((UInt16(UInt16(63)) & 127)..=(UInt16(UInt16(53)) & 127) : (Int64(68) | 1))) {
                case caseVar_1743341933151_1451: Option<Range<Int8>> =>
                    var_1743341933151_1454;
                    if (true) {
                        [Int64(-6), Int64(65), Int64(-4), Int64(-118), Int64(-27), Int64(-66), Int64(89), Int64(-115),
                            Int64(76), Int64(-127)]
                    } else {
                        [Int64(-81), Int64(83), var_1743341933151_1111, Int64(-55), var_1743341933151_1111, Int64(60),
                            Int64(36), Int64(-102), var_1743341933151_1111, Int64(-9)]
                    }

                case caseVar_1743341933151_1472 =>
                    UInt64(131) % ((var_1743341933151_1055) | 1);
                    var_1743341933151_1454;
                    [Int64(102), Int64(-9), Int64(-28), Int64(13), Int64(110), Int64(-57), Int64(114), Int64(44),
                        Int64(96), Int64(66)]

                case _: Int64 =>
                    var_1743341933151_1483;
                    var_1743341933151_1487 &&= var_1743341933151_1487
                    [var_1743341933151_1111, var_1743341933151_1111, Int64(-26), var_1743341933151_1111, Int64(-67),
                        Int64(72), var_1743341933151_1111, Int64(-5), Int64(-45), var_1743341933151_1111]

                case caseVar_1743341933151_1503: UInt16 =>
                    var_1743341933151_1309 = var_1743341933151_1309
                    [Int64(36), Int64(-73), Int64(99), Int64(59), Int64(-50), Int64(-58), Int64(103), Int64(-103),
                        Int64(35), Int64(-66)]

                case _ =>
                    ();
                    [Int64(-27), Int64(-92), Int64(-72), Int64(-99), Int64(-90), Int64(-20), Int64(-94), Int64(-113),
                        Int64(120), Int64(52)]
            }
        };
        let var_1743341933151_1558: Int8 = Int8(-122);
        if (if (VArray<Bool, $8>(repeat: var_1743341933151_1520)[2]) { // block id: 1530
            var_1743341933151_1533 <<= ((var_1743341933151_1533) & 7)
            var_1743341933151_1540 >>= ((var_1743341933151_1540) & 7)
            var_1743341933151_1520 && var_1743341933151_1550
        } else if (var_1743341933151_1520) { // block id: 1553
            ();
            var_1743341933151_1533;
            var_1743341933151_1558 > Int8(-58)
        } else { // block id: 1561
            var_1743341933151_731;
            var_1743341933151_956
        }) { // block id: 1564

        } else if ((Option<UInt16>.Some(var_1743341933151_1533) ?? var_1743341933151_1533) != (Option<UInt16>.Some(
            var_1743341933151_1533) ?? UInt16(42))) { // block id: 1578

        }
    }
}

public open class Class_1743341933151_355 <: Class_1743341933151_326 & Interface_1743341933151_329 {
    @Frozen
    public init() { // block id: 357

    }

    let var_1743341933151_362: Range<UInt32> = ((UInt32(UInt32(155)) & 127)..=(UInt32(UInt32(154)) & 127) : (Int64(92) |
        1));
    public static let var_1743341933151_588: Range<UInt64> = ((UInt64(UInt64(203)) & 127)..(UInt64(UInt64(187)) & 127) : (Int64(117) |
        1));
    static var var_1743341933151_1909: VArray<Int32, $2> = [Int32(114), Int32(-6)];
    static mut prop var_1743341933151_1949: Int16 { // block id: 1950
        get() { // block id: 1952
            Int16(UInt8(Int8(-74)))
        }
        set(Value) { // block id: 1958
            ()
        }
    }
    public open override func func_1743341933151_600(namedParam_1743341933151_601!: Float64,
        namedParam_1743341933151_602!: UInt64, namedParam_1743341933151_603!: Range<Int8>): Bool { // block id: 1856
        try { // block id: 1862
            var_1743341933151_1055;
            r'T';
            var_1743341933151_1866
        } finally { // block id: 1883
            if (var_1743341933151_956) {
                var_1743341933151_1162
            } else {
                VArray<UInt32, $4>(repeat: var_1743341933151_795)
            };
            var_1743341933151_1309++;
            (var_1743341933151_1896, var_1743341933151_1909, var_1743341933151_795)
        }[0][6];
        match (Option<Array<Int64>>.Some(var_1743341933151_1921[0])) {
            case caseVar_1743341933151_1939 =>
                (var_1743341933151_1533, Int16(-60), Float64(-128.0), var_1743341933151_1162);
                var_1743341933151_1309 /= ((var_1743341933151_1949) | 1)
                true

            case _ =>
                ();
                UInt32(125) != var_1743341933151_795

            case _ =>
                ();
                var_1743341933151_1974 &&= var_1743341933151_1974
                var_1743341933151_956
        }
    }
}

public interface Interface_1743341933151_680 {}

@Deprecated
public open class Class_1743341933151_677 <: Class_1743341933151_326 & Interface_1743341933151_330 & Interface_1743341933151_680 {
    @Frozen
    public init() { // block id: 679

    }

    @Frozen
    public static mut prop var_1743341933151_683: Unit { // block id: 684
        get() { // block id: 686
            ();
            ();
            ()
        }
        set(Value) { // block id: 692
            ();
            ((UInt64(UInt64(216)) & 127)..=(UInt64(UInt64(49)) & 127) : (Int64(125) | 1));
            ()
        }
    }
    public open override func func_1743341933151_600(namedParam_1743341933151_601!: Float64,
        namedParam_1743341933151_602!: UInt64, namedParam_1743341933151_603!: Range<Int8>): Bool { // block id: 1979
        const var_1743341933151_1994: Int16 = 85;
        var loopTimeVar_1743341933151_2009: Array<UInt64> = [UInt64(57), UInt64(UInt32(UInt16(224))), UInt64(Int8(74)),
            UInt64(UInt64(Int64(-99))), UInt64(Int64(-106)), UInt64(Int8(-3)), UInt64(247), UInt64(249), UInt64(155),
            UInt64(Int16(UInt8(Int8(-114))))];
        for (i in loopTimeVar_1743341933151_2009 where try { // block id: 1983
            if (true) {
                var_1743341933151_368
            } else {
                Struct_1743341933151_342(namedParam_1743341933151_970: Class_1743341933151_326(),
                    optionalParam_1743341933151_971: Option<Bool>.Some(true))
            };
            var_1743341933151_1309 * var_1743341933151_1994
        } finally { // block id: 1996
            Int16(82) << ((Int16(126)) & 7)
        } > (Int16(-89) / ((var_1743341933151_1309) | 1))) {
            if (var_1743341933151_423) { // block id: 2006
                ();
                var_1743341933151_731
            }
        };
        if (false) { // block id: 2034
            ((Int32(Int32(33)) & 127)..=(Int32(Int32(12)) & 127) : (Int64(52) | 1));
            var_1743341933151_423
        } else if (if (var_1743341933151_1520) { // block id: 2039
            (var_1743341933151_1155, var_1743341933151_1309, var_1743341933151_294, var_1743341933151_1162);
            VArray<Int32, $2>({i => Int32(102)});
            false && false
        } else { // block id: 2051
            Float64(62.0) > var_1743341933151_294
        }) { // block id: 2055
            var var_1743341933151_2059: UInt64 = UInt64(Int16(Int16(-77)));
            var_1743341933151_1111 ** var_1743341933151_2059;
            ();
            var_1743341933151_956
        } else { // block id: 2065
            false
        } || (UInt8(UInt8(152)) != var_1743341933151_1252)
    }
}

public func func_1743341933151_308(namedParam_1743341933151_309!: Float32,
    namedParam_1743341933151_310!: Class_1743341933151_22,
    optionalParam_1743341933151_311!: Range<UInt8> = ((UInt8(UInt8(117)) & 127)..=(UInt8(UInt8(Int8(UInt8(36)))) & 127) : (Int64(40) |
        1)), namedParam_1743341933151_318!: VArray<Bool, $6>): Unit { // block id: 319
    Class_1743341933151_22.var_1743341933151_323;
    var var_1743341933151_530: UInt16 = UInt16(178);
    var var_1743341933151_541: UInt64 = UInt64(Int32(48));
    var var_1743341933151_572: Range<Int64> = ((Int64(Int64(-46)) & 127)..(Int64(Int64(87)) & 127) : (Int64(66) | 1));
    let var_1743341933151_581: Byte = UInt8(Int8(UInt8(105)));
    Class_1743341933151_326.func_1743341933151_334(
        match (Enum_1743341933151_95.enumValue_1743341933151_105(
            ((UInt32(UInt32(167)) & 127)..=(UInt32(UInt32(201)) & 127) : (Int64(-78) | 1)), var_1743341933151_530,
            ((Int32(Int32(-73)) & 127)..(Int32(Int32(-24)) & 127) : (Int64(-113) | 1)), var_1743341933151_534)) {
            case _: UInt16 =>
                ();
                var_1743341933151_541

            case _: Option<Unit> => var_1743341933151_541

            case _ => var_1743341933151_541

            case _ =>
                let var_1743341933151_556: Range<UInt16> = ((UInt16(UInt16(194)) & 127)..=(UInt16(UInt16(Int16(107))) &
                    127) : (Int64(Int64(-23)) | 1));
                var_1743341933151_556;
                let var_1743341933151_565: UInt = UInt64(Int16(Int8(Int8(119))));
                var_1743341933151_565 << ((UInt64(227)) & 7)
        }, var_1743341933151_572, (Option<UInt8>.None ?? var_1743341933151_581),
        Class_1743341933151_355.var_1743341933151_588);
    let var_1743341933151_597: Interface_1743341933151_329 = Class_1743341933151_355();
    var var_1743341933151_646: UInt8 = UInt8(137);
    var var_1743341933151_666: UInt = UInt64(230);
    var var_1743341933151_700: (Range<Int64>, Class_1743341933151_22, Option<Bool>, Range<UInt16>, Unit) = (((Int64(Int64(39)) &
            127)..(Int64(Int64(107)) & 127) : (Int64(24) | 1)), Class_1743341933151_677(), Option<Bool>.None, ((UInt16(UInt16(199)) &
            127)..(UInt16(UInt16(70)) & 127) : (Int64(Int32(77)) | 1)), ());
    if (if (var_1743341933151_597.func_1743341933151_600(namedParam_1743341933151_601: Float64(30.0),
        namedParam_1743341933151_602: var_1743341933151_541,
        namedParam_1743341933151_603: ((Int8(Int8(79)) & 127)..=(Int8(Int8(-55)) & 127) : (Int64(59) | 1)))) { // block id: 642
        true;
        var_1743341933151_646 &= UInt8(23)
        var_1743341933151_66
    } else { // block id: 650
        var_1743341933151_66
    }) { // block id: 652
        match (var_1743341933151_294) {
            case _ => ()

            case _ => ()
        };
        [UInt64(151), var_1743341933151_666, var_1743341933151_541, var_1743341933151_666, var_1743341933151_541,
            UInt64(220), var_1743341933151_666, UInt64(1), UInt64(9), var_1743341933151_541];
        Class_1743341933151_677.var_1743341933151_683
    } else if ((var_1743341933151_700[4] is Rune)) { // block id: 712
        var_1743341933151_530 >>= ((UInt16(39)) & 7)
        let var_1743341933151_717: Class_1743341933151_677 = Class_1743341933151_677();
        var_1743341933151_717;
        var var_1743341933151_726: Int = Int64(Int8(-7));
        try (resource = Class_1743341933151_22()) { // block id: 720
            ();
            ()
        } finally { // block id: 723
            var_1743341933151_726 *= Int64(-112)
            var_1743341933151_731
        }
    }
}

@Frozen
internal func func_1743341933151_200(param_1743341933151_201: Range<UInt16>,
    optionalParam_1743341933151_202!: Int32 = Int32(Int32(UInt16(205))), namedParam_1743341933151_206!: Range<UInt16>): VArray<Bool, $6> { // block id: 207
    var loopTimeVar_1743341933151_267: Int64 = 0;
    while (((var_1743341933151_249[0] |> {
            lambdaParameter_1743341933151_212: UInt16 =>
                let var_1743341933151_216: (UInt32) -> Bool = {lambdaParameter_1743341933151_219: UInt32 => false};
                var var_1743341933151_229: Class_1743341933151_22 = Class_1743341933151_22();
                ((var_1743341933151_229 as UInt32) ?? try { // block id: 232
                    ();
                    UInt32(94)
                } finally { // block id: 235
                    ();
                    var_1743341933151_239 |= var_1743341933151_239
                    UInt32(213) - UInt32(245)
                }) |> var_1743341933151_216
        })) && loopTimeVar_1743341933151_267 < 100) {
        loopTimeVar_1743341933151_267++;
    };
    let var_1743341933151_747: VArray<Bool, $6> = [true, false, false, true, false, false];
    var loopTimeVar_1743341933151_768: Int = 0;
    while ((match (Class_1743341933151_271.var_1743341933151_276) {
            case caseVar_1743341933151_280: Range<Int32> =>
                Class_1743341933151_271();
                ((Int8(Int8(-61)) & 127)..=(Int8(Int8(13)) & 127) : (Int64(-99) | 1));
                const var_1743341933151_285: Bool = true;
                var_1743341933151_285

            case _ =>
                var_1743341933151_239 %= ((var_1743341933151_239) | 1)
                var_1743341933151_294;
                true

            case caseVar_1743341933151_299: VArray<UInt32, $4> => false

            case _ => true
        }) && loopTimeVar_1743341933151_768 < 100) {
        loopTimeVar_1743341933151_768++;
        let var_1743341933151_743: Int64 = Int64(UInt8(82));
        func_1743341933151_308(namedParam_1743341933151_309: var_1743341933151_734,
            namedParam_1743341933151_310: var_1743341933151_737,
            optionalParam_1743341933151_311: ((UInt8(UInt8(195)) & 127)..=(UInt8(UInt8(97)) & 127) : (var_1743341933151_743 |
                1)), namedParam_1743341933151_318: var_1743341933151_747);
        const var_1743341933151_753: Bool = true;
        try { // block id: 750
            if (var_1743341933151_753) {
                Option<Bool>.None
            } else {
                Option<Bool>.Some(var_1743341933151_753)
            };
            var_1743341933151_747
        } catch (_) { // block id: 759
            VArray<Bool, $6>(repeat: var_1743341933151_753)
        }
    };
    var var_1743341933151_775: ((Int32, Int16, Array<UInt64>, Option<Struct_1743341933151_342>), String, Bool) = ((Int32(-50),
            Int16(Int8(Int8(21))), [UInt64(171), UInt64(194), UInt64(184), UInt64(78), UInt64(158), UInt64(75),
                UInt64(199), UInt64(127), UInt64(130), UInt64(188)], (Class_1743341933151_677() as Struct_1743341933151_342)),
        "P]y;$Pdz23", false);
    let var_1743341933151_824: Bool = (Class_1743341933151_677() is (Float32, Class_1743341933151_22, Range<UInt8>,
        VArray<Bool, $6>) -> Unit);
    match (var_1743341933151_775[0][3]) {
        case caseVar_1743341933151_791: Unit =>
            var_1743341933151_795 <<= ((UInt32(93)) & 7)
            ();
            var var_1743341933151_802: Bool = (Class_1743341933151_355() is Option<Bool>);
            if (var_1743341933151_802) {
                VArray<Bool, $6>(repeat: true)
            } else {
                var_1743341933151_747
            }

        case _ =>
            var_1743341933151_817;
            var_1743341933151_820;
            VArray<Bool, $6>(repeat: var_1743341933151_824)
    }
}

main(): Int64 {
    try {
        let var_1743341933151_856: (((Int32, Int16, Array<UInt64>, Option<Struct_1743341933151_342>), String, Bool), (Int32, 
            Int16, Array<UInt64>, Option<Struct_1743341933151_342>), Unit) = (((Int32(UInt16(127)), Int16(UInt16(103)), [UInt64(193),
                        UInt64(93), UInt64(43), UInt64(103), UInt64(177), UInt64(200), UInt64(102), UInt64(3),
                        UInt64(213), UInt64(186)], (Class_1743341933151_355() as Struct_1743341933151_342)),
                ###"p1R~,HZ\\%r"###, false), (Int32(UInt8(209)), Int16(58), [UInt64(252), UInt64(25), UInt64(245),
                    UInt64(87), UInt64(141), UInt64(Int64(-113)), UInt64(Int64(-80)), UInt64(UInt16(192)), UInt64(93),
                    UInt64(UInt8(186))], (([(), (), (), (), (), (), (), (), (), ()], ((Int16(Int16(73)) & 127)..=(Int16(Int16(-50)) &
                        127) : (Int64(-12) | 1)), [(), (), (), (), (), (), (), (), (), ()], false, Int16(-22), [(), (),
                        (), (), (), (), (), (), (), ()], Option<Struct_1743341933151_342>.Some(
                        Struct_1743341933151_342()), true) as Struct_1743341933151_342)), ());
        var loopTimeVar_1743341933151_924: Range<UInt64> = ((UInt64(UInt64(UInt8(Int8(UInt8(55))))) & 127)..=(UInt64(UInt64(216)) &
            127) : (Int64(UInt32(42)) | 1));
        for (i in loopTimeVar_1743341933151_924 where (UInt16(26) |> {
            lambdaParameter_1743341933151_195: UInt16 =>
                var var_1743341933151_833: Range<UInt16> = ((UInt16(UInt16(27)) & 127)..=(UInt16(UInt16(73)) & 127) : (Int64(-27) |
                    1));
                func_1743341933151_200(var_1743341933151_833, namedParam_1743341933151_206: if (false) { // block id: 837
                    ();
                    ();
                    ((UInt16(var_1743341933151_842) & 127)..=(UInt16(UInt16(131)) & 127) : (Int64(13) | 1))
                } else { // block id: 846
                    ();
                    ();
                    ((UInt16(UInt16(223)) & 127)..(UInt16(UInt16(98)) & 127) : (Int64(12) | 1))
                })[4]
        })) {
            var_1743341933151_856[2]
        };
        let var_1743341933151_964: Option<Int64> = ((Option<Struct_1743341933151_342>.Some(
            Struct_1743341933151_342(namedParam_1743341933151_970: Class_1743341933151_326())) as Bool) as Int64);
        (try { // block id: 939
            var_1743341933151_941;
            var_1743341933151_945 -= Int64(19)
            let var_1743341933151_951: Option<Int64> = Option<Int64>.None;
            var_1743341933151_951
        } catch (_) { // block id: 953
            if (var_1743341933151_956) {
                Option<Int64>.Some(Int64(-51))
            } else {
                Option<Int64>.Some(Int64(41))
            }
        } finally { // block id: 962
            var_1743341933151_964
        } ?? (if (true) {
            Option<Int64>.Some(var_1743341933151_945)
        } else {
            Option<Int64>.Some(var_1743341933151_945)
        } ?? [Int64(64), Int64(-77), var_1743341933151_945, var_1743341933151_945, Int64(-17), var_1743341933151_945,
            var_1743341933151_1111, var_1743341933151_945, Int64(58), Int64(-6)][4]))
        // CRC Check All Variables
        var crcCheck = CrcCheck(5000, 32)
        crcCheck.updateBuffer(UInt64(var_1743341933151_239 * var_1743341933151_239), 64)
        crcCheck.updateBuffer(UInt64(var_1743341933151_842 * var_1743341933151_842), 64)
        crcCheck.updateBuffer(UInt64(var_1743341933151_945 * var_1743341933151_945), 64)
        crcCheck.crcCheck()
        crcCheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) {
        println("Exception: NoneValueException")
    }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        buffer = Array<Int64>(buffer_n, {i => 0})
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, {i => 0})
        var byte_c = 1
        var byte_index = 0
        while (value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[(i + buffer_index) % buffer.size] = byteArray[i + byte_index]
            i++
        }
        buffer_index = (buffer_index + i) % buffer.size
    }

    func updateBuffer(input: Bool, byte_n: Int64): Unit {
        if (input == true) {
            updateBuffer(1, byte_n)
        } else {
            updateBuffer(0, byte_n)
        }
    }

    func updateBuffer(input: Rune, byte_n: Int64): Unit {
        updateBuffer(UInt64(UInt32(input)), byte_n)
    }

    func updateBuffer(input: String, byte_n: Int64): Unit {
        for (c in input) {
            updateBuffer(c, byte_n)
        }
    }

    func updateBuffer(input: Unit, byte_n: Int64): Unit {
        updateBuffer(input.toString(), byte_n)
    }

    func updateBuffer(input: Any, byte_n: Int64): Unit {
        if (input is Hashable) {
            match (input as Hashable) {
                case Some(v) => updateBuffer(UInt64(v.hashCode()), byte_n)
                case _ => updateBuffer(1, byte_n)
            }
        } else if (input is ToString) {
            match (input as ToString) {
                case Some(v) => updateBuffer(v.toString(), byte_n)
                case _ => updateBuffer(1, byte_n)
            }
        } else {
            updateBuffer(1, byte_n)
        }
    }
    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, {i => 0})
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2 ** 2 * crc_output[i] + 2 ** 1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}

extend Enum_1743341933151_95 {}

extend Struct_1743341933151_342 {}

extend Class_1743341933151_355 {}

extend Class_1743341933151_271 {}
