/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args

public var var_1691623134514_37 : Float32 = Float32(Float32(-11.0))
public var var_1691623134514_68 : UInt8 = UInt8(249)
var var_1691623134514_108 : VArray<Int8, $3> = [Int8(19), Int8(-49), Int8(-128)]
public let var_1691623134514_198 : Int8 = Int8(73)
var var_1691623134514_209 : UInt16 = UInt16(82)
public let var_1691623134514_215 : Array<UInt16> = [UInt16(246), UInt16(162), UInt16(159), UInt16(77), UInt16(220), UInt16(163), UInt16(38), UInt16(38), UInt16(123), UInt16(13)]
public let var_1691623134514_261 : Range<Int16> = ((Int16(Int16(Int8(-15)))&127)..=(Int16(Int16(-73))&127):(Int64(10)|1))
public const var_1691623134514_269 : Unit = ()
public var var_1691623134514_274 : Int16 = Int16(Int16(36))
let var_1691623134514_295 : Range<Int8> = ((Int8(Int8(Int8(116)))&127)..=(Int8(Int8(UInt8(Int8(125))))&127):(Int64(UInt16(215))|1))
var var_1691623134514_328 : Int8 = Int8(Int8(Int8(-91)))
var var_1691623134514_341 : (UInt16, (Range<Int16>, Int16, Range<Int8>, Bool), Range<Int32>, Range<UInt64>, Int16, Float32, Float32, Int32) = (UInt16(UInt8(UInt8(Int8(67)))), (((Int16(Int16(13))&127)..(Int16(Int16(46))&127):(Int64(-92)|1)), Int16(Int16(UInt16(68))), ((Int8(Int8(-15))&127)..(Int8(Int8(-116))&127):(Int64(20)|1)), true), ((Int32(Int32(17))&127)..(Int32(Int32(-35))&127):(Int64(Int64(97))|1)), ((UInt64(UInt64(UInt16(116)))&127)..(UInt64(UInt64(Int8(60)))&127):(Int64(-118)|1)), Int16(Int16(59)), Float32(-110.0), Float32(-79.0), Int32(-113))
let var_1691623134514_390 : VArray<Float32, $5> = [Float32(Float32(Float32(-76.0))), Float32(Float32(-105.0)), Float32(-18.0), Float32(-22.0), Float32(Float32(Float32(22.0)))]
let var_1691623134514_403 : String = "l:YM(x?X_P"
public const var_1691623134514_419 : Int = -98
public var var_1691623134514_424 : Array<UInt64> = [UInt64(143), UInt64(131), UInt64(102), UInt64(196), UInt64(149), UInt64(229), UInt64(96), UInt64(129), UInt64(69), UInt64(62)]
public var var_1691623134514_438 : UInt16 = UInt16(129)
let var_1691623134514_622 : Float64 = Float64(Float32(-85.0))
var var_1691623134514_742 : UInt8 = UInt8(Int8(UInt8(205)))
let var_1691623134514_748 : Range<UInt8> = ((UInt8(UInt8(UInt8(UInt8(28))))&127)..=(UInt8(UInt8(Int8(Int8(-71))))&127):(Int64(-45)|1))
public let var_1691623134514_783 : Array<Class_1691623134514_248> = [Class_1691623134514_248(), Class_1691623134514_248(), Class_1691623134514_248(), Class_1691623134514_248(), Class_1691623134514_248(), Class_1691623134514_248(), Class_1691623134514_248(), Class_1691623134514_248(), Class_1691623134514_248(), Class_1691623134514_248()]
public var var_1691623134514_802 : Class_1691623134514_248 = Class_1691623134514_248()
let var_1691623134514_892 : Range<UInt32> = ((UInt32(UInt32(43))&127)..(UInt32(UInt32(220))&127):(Int64(-80)|1))
let var_1691623134514_912 : Int64 = Int64(UInt64(Int32(40)))
let var_1691623134514_960 : Rune = r'j'
var var_1691623134514_998 : UInt32 = UInt32(13)
var var_1691623134514_1031 : ?Enum_1691623134514_159 = ((Float64(89.0), Int32(-7), Int32(UInt16(86))) as Enum_1691623134514_159)
const var_1691623134514_1166 : UInt = 72
public const func func_1691623134514_8(optionalParam_1691623134514_9 ! : Int8 = 44, namedParam_1691623134514_11 ! : Float32) : UInt32 { // block id: 12
    const var_1691623134514_14 : UInt32 = 203;
    var_1691623134514_14
}

func func_1691623134514_54(param_1691623134514_55 : Int16) : (Float64, Int32, Int32) { // block id: 56
    let var_1691623134514_61 : Range<UInt32> = ((UInt32(UInt32(11))&127)..(UInt32(UInt32(6))&127):(Int64(11)|1));
    var var_1691623134514_71 : UInt8 = UInt8(Int8(UInt8(Int8(UInt8(160)))));
    let var_1691623134514_82 : Bool = ("a{vM<J.MY>P" is (Int8, Float32) -> UInt32);
    (if ((var_1691623134514_61 is Range<Int16>)) { // block id: 63
        Float64(-90.0)
    } else { // block id: 65
        var_1691623134514_68 /= ((var_1691623134514_71) | 1);
        """
sxZ;*
!S$sF
""";
        Float64(107.0)
    }, Int32(if (var_1691623134514_82) { // block id: 85
        ();
        ();
        Int8(-89)
    } else if (var_1691623134514_82) { // block id: 90
        Int8(11)
    } else { // block id: 92
        ();
        var var_1691623134514_96 : Int32 = Int32(Int8(UInt8(152)));
        var_1691623134514_96 |= Int32(-21);
        Int8(3) % ((Int8(86)) | 1)
    }), Int32(var_1691623134514_108[2]))
}

public enum Enum_1691623134514_159 {
    defaultValue |
    enumValue_1691623134514_164((Int16) -> (Float64, Int32, Int32), Range<UInt64>, VArray<Int8, $3>, Range<Int16>)
}
public open class Class_1691623134514_248 {
    init() { // block id: 250

    }
;
    static const var_1691623134514_255 : Bool = false;
    static prop var_1691623134514_632 : Array<VArray<Float32, $5>> { // block id: 633
        get() { // block id: 635
            ((Int16(Int16(-71))&127)..(Int16(Int16(-119))&127):(Int64(104)|1));
            [VArray<Float32, $5>({ i => Float32(14.0)}), VArray<Float32, $5>(repeat: Float32(Float32(-1.0))), VArray<Float32, $5>({ i => Float32(-104.0)}), VArray<Float32, $5>(repeat: Float32(Float32(-47.0))), VArray<Float32, $5>(repeat: Float32(Float32(81.0))), VArray<Float32, $5>({ i => Float32(-55.0)}), VArray<Float32, $5>(repeat: Float32(Float32(-3.0))), VArray<Float32, $5>(repeat: Float32(-23.0)), VArray<Float32, $5>({ i => Float32(-42.0)}), VArray<Float32, $5>(repeat: Float32(-7.0))]
        }

    };
    public static const var_1691623134514_815 : Int64 = -114;
    public prop var_1691623134514_852 : (Float64, Int32, Int32) { // block id: 853
        get() { // block id: 855
            ();
            (Float64(Float32(Float32(-115.0))), Int32(UInt8(UInt8(254))), Int32(UInt16(Int8(9))))
        }

    };
    public static let var_1691623134514_946 : ?String;
    protected mut prop var_1691623134514_951 : String { // block id: 952
        get() { // block id: 954
            ###"zFpa{A;CWEe"###;
            var_1691623134514_1190
        }

        set(Value) { // block id: 958
            var_1691623134514_1190 = Value
        }

    };
    public static const var_1691623134514_991 : UInt8 = 56;
    public open func func_1691623134514_965(param_1691623134514_966 : Range<UInt16>, namedParam_1691623134514_967 ! : (Array<UInt64>, Enum_1691623134514_159) -> Bool, namedParam_1691623134514_971 ! : Array<VArray<Float32, $5>>, namedParam_1691623134514_972 ! : (UInt32) -> VArray<Float32, $5>) : VArray<Float32, $5> { // block id: 975
        const var_1691623134514_1009 : Float32 = -82.0;
        var var_1691623134514_1045 : Float32 = Float32(107.0);
        VArray<Float32, $5>(repeat: if (if (var_1691623134514_255) { // block id: 980
            var_1691623134514_269;
            var_1691623134514_960;
            var_1691623134514_255
        } else { // block id: 984
            var var_1691623134514_987 : Int32 = Int32(111);
            var_1691623134514_987 -= Int32(4);
            var_1691623134514_991;
            false && var_1691623134514_255
        }) { // block id: 996
            var_1691623134514_998;
            var var_1691623134514_1001 : VArray<Unit, $4> = [(), (), (), ()];
            var_1691623134514_1001;
            const var_1691623134514_1012 : Float32 = -71.0;
            var_1691623134514_1009 - var_1691623134514_1012
        } else { // block id: 1014
            ();
            Float32(-24.0) - var_1691623134514_1009
        })
    }
;
    protected var var_1691623134514_1057 : Range<UInt16> = ((UInt16(UInt16(92))&127)..=(UInt16(UInt16(226))&127):(Int64(-51)|1));
    public let var_1691623134514_1135 : (Range<Int16>, Int16, Range<Int8>, Bool) = (((Int16(Int16(-57))&127)..(Int16(Int16(58))&127):(Int64(0)|1)), Int16(97), ((Int8(Int8(117))&127)..(Int8(Int8(30))&127):(Int64(106)|1)), true);
    var var_1691623134514_1190 : String = """
>]A9h
okR,0
"""
    static init() {
        var_1691623134514_946 = Option<String>.None
    }
}

public func func_1691623134514_232(optionalParam_1691623134514_233 ! : Range<Int8> = ((Int8(Int8(-26))&127)..(Int8(Int8(-48))&127):(Int64(-119)|1))) : (Range<Int16>, Int16, Range<Int8>, Bool) { // block id: 235
    let var_1691623134514_252 : Class_1691623134514_248 = Class_1691623134514_248();
    let var_1691623134514_279 : Int64 = Int64(UInt32(242));
    let var_1691623134514_305 : Bool = ((Float64(Float64(-16.0)), Int32(58), Int32(77)) is Enum_1691623134514_159);
    var var_1691623134514_316 : UInt = UInt64(148);
    var var_1691623134514_376 : Range<Int32> = ((Int32(Int32(17))&127)..(Int32(Int32(UInt8(UInt8(Int8(111)))))&127):(Int64(Int32(UInt32(UInt32(193))))|1));
    const var_1691623134514_410 : Unit = ();
    (if ((UInt32(63) is Range<UInt16>)) { // block id: 240
        var var_1691623134514_242 : Unit = ();
        var_1691623134514_242;
        let var_1691623134514_245 : Range<Int16> = ((Int16(Int16(-118))&127)..(Int16(Int16(-117))&127):(Int64(81)|1));
        var_1691623134514_245
    } else if (Class_1691623134514_248.var_1691623134514_255) { // block id: 257
        ();
        ();
        var_1691623134514_261
    } else { // block id: 267
        var_1691623134514_269;
        ();
        ((Int16(var_1691623134514_274)&127)..=(Int16(Int16(-83))&127):(var_1691623134514_279|1))
    }, try { // block id: 285
        const var_1691623134514_321 : Float32 = 49.0;
        (UInt16(214), (((Int16(var_1691623134514_274)&127)..=(Int16(var_1691623134514_274)&127):(Int64(-123)|1)), var_1691623134514_274, var_1691623134514_295, var_1691623134514_305), ((Int32(Int32(45))&127)..=(Int32(Int32(-100))&127):(Int64(-20)|1)), ((UInt64(UInt64(73))&127)..(UInt64(var_1691623134514_316)&127):(Int64(-3)|1)), var_1691623134514_274, var_1691623134514_321, Float32(-113.0), Int32(0))
    } finally { // block id: 325
        var_1691623134514_328 += var_1691623134514_328;
        if (true) { ((Int8(Int8(-27))&127)..=(Int8(Int8(63))&127):(Int64(-4)|1)) } else { ((Int8(var_1691623134514_198)&127)..(Int8(var_1691623134514_198)&127):(var_1691623134514_279|1)) } ;
        var_1691623134514_341
    }[4], match ((var_1691623134514_376, """
CX'k?
f/Aw;
""", r'6', var_1691623134514_390, var_1691623134514_403)[4]) {
        case _ => 
            var_1691623134514_269;
            var_1691623134514_410;
            if (true) { ((Int8(Int8(108))&127)..(Int8(Int8(-28))&127):(Int64(-69)|1)) } else { ((Int8(var_1691623134514_328)&127)..=(Int8(Int8(74))&127):(var_1691623134514_419|1)) } 
        
    }, true)
}

func func_1691623134514_224(namedParam_1691623134514_225 ! : Array<UInt64>, optionalParam_1691623134514_226 ! : Enum_1691623134514_159 = Enum_1691623134514_159.defaultValue) : Bool { // block id: 228
    func_1691623134514_232()[3]
}


func func_1691623134514_127(optionalParam_1691623134514_128 ! : Rune = r'Y', optionalParam_1691623134514_130 ! : Bool = (() is (Float64, Int32, Int32)), optionalParam_1691623134514_133 ! : (Int16) -> (Float64, Int32, Int32) = { lambdaParameter_1691623134514_136 : Int16 => (Float64(-58.0), Int32(Int16(Int8(99))), Int32(UInt8(UInt8(26)))) }) : Bool { // block id: 148
    const func func_1691623134514_150(param_1691623134514_151 : UInt16, param_1691623134514_152 : UInt16) : Rune { // block id: 153
        const var_1691623134514_155 : Rune = r'd';
        var_1691623134514_155
    }
;
    var var_1691623134514_162 : Enum_1691623134514_159 = Enum_1691623134514_159.enumValue_1691623134514_164({ lambdaParameter_1691623134514_173 : Int16 => (Float64(Float64(Float64(87.0))), Int32(-34), Int32(-64)) }, ((UInt64(UInt64(130))&127)..=(UInt64(UInt64(19))&127):(Int64(-123)|1)), VArray<Int8, $3>({ i => Int8(-94)}), ((Int16(Int16(UInt16(173)))&127)..(Int16(Int16(73))&127):(Int64(Int16(UInt8(189)))|1)));
    func_1691623134514_150(match (match (var_1691623134514_162) {
        case _ => 
            var_1691623134514_198
        
    }) {
        case _ => 
            var var_1691623134514_204 : Int16 = Int16(-97);
            var_1691623134514_204 <<= ((var_1691623134514_204) & 7);
            var_1691623134514_209 * UInt16(50)
        
    }, var_1691623134514_215[4]);
    var var_1691623134514_219 : Float32 = Float32(Float32(Float32(-106.0)));
    var_1691623134514_219;
    let var_1691623134514_448 : Bool = (UInt64(UInt32(Int16(74))) is Range<UInt8>);
    let var_1691623134514_466 : ?Enum_1691623134514_159 = (Int64(-52) as Enum_1691623134514_159);
    func_1691623134514_224(namedParam_1691623134514_225 : var_1691623134514_424, optionalParam_1691623134514_226 : if ((((Int16(Int16(83))&127)..=(Int16(var_1691623134514_274)&127):(var_1691623134514_419|1)), [UInt16(166), var_1691623134514_209, var_1691623134514_438, UInt16(114), var_1691623134514_209, var_1691623134514_209, var_1691623134514_209, var_1691623134514_209, var_1691623134514_438, var_1691623134514_209], var_1691623134514_448)[2]) { (var_1691623134514_162, UInt32(173))[0] } else { (var_1691623134514_466 ?? var_1691623134514_162) } )
}


func func_1691623134514_571(param_1691623134514_572 : UInt32) : VArray<Float32, $5> { // block id: 573
    const var_1691623134514_583 : Int32 = 65;
    let var_1691623134514_589 : Array<Int32> = [Int32(UInt16(UInt8(168))), Int32(UInt8(Int8(Int8(78)))), Int32(22), Int32(Int32(-85)), Int32(-102), Int32(-10), Int32(23), Int32(88), Int32(UInt32(43)), Int32(Int8(UInt8(Int8(-69))))];
    var loopTimeVar_1691623134514_626 : Int64 = 0;
    do {
        loopTimeVar_1691623134514_626++;
        VArray<Unit, $4>(repeat: ())[0];
        var_1691623134514_622
    } while (((Option<Int32>.Some(var_1691623134514_583) ?? var_1691623134514_583) >= var_1691623134514_589[6]) && loopTimeVar_1691623134514_626 < 100 ) ;
    Class_1691623134514_248.var_1691623134514_632[8]
}

func func_1691623134514_539(optionalParam_1691623134514_540 ! : Int64 = Int64(-71), optionalParam_1691623134514_542 ! : (Enum_1691623134514_159, UInt32) = (Enum_1691623134514_159.enumValue_1691623134514_164(func_1691623134514_54, ((UInt64(UInt64(8))&127)..=(UInt64(UInt64(Int64(-99)))&127):(Int64(Int32(61))|1)), VArray<Int8, $3>(repeat: Int8(UInt8(189))), ((Int16(Int16(-24))&127)..=(Int16(Int16(-99))&127):(Int64(Int32(63))|1))), UInt32(Int8(UInt8(UInt8(232))))), namedParam_1691623134514_567 ! : (Float64, Int32, Int32)) : Class_1691623134514_248 { // block id: 568
    var var_1691623134514_727 : (UInt32) -> VArray<Float32, $5> = func_1691623134514_571;
    match ((UInt32(Int32(27))|>var_1691623134514_727)) {
        case _ => 
            var_1691623134514_269;
            var_1691623134514_261;
            var var_1691623134514_737 : Bool = true;
            if (var_1691623134514_737) { ((UInt8(UInt8(98))&127)..=(UInt8(var_1691623134514_742)&127):(Int64(-25)|1)) } else { var_1691623134514_748 } 
        
    };
    var var_1691623134514_759 : Bool = true;
    var var_1691623134514_767 : UInt64 = UInt64(UInt8(189));
    var var_1691623134514_778 : VArray<Unit, $4> = [(), (), (), ()];
    if (var_1691623134514_759) { // block id: 761
        ();
        try { // block id: 764
            var_1691623134514_767 ^= UInt64(33);
            VArray<Unit, $4>(repeat: ())
        } catch (_) { // block id: 776
            var_1691623134514_778
        };
        var_1691623134514_783[5]
    } else { // block id: 796
        [Class_1691623134514_248(), Class_1691623134514_248(), Class_1691623134514_248(), var_1691623134514_802, Class_1691623134514_248(), var_1691623134514_802, var_1691623134514_802, var_1691623134514_802, var_1691623134514_802, Class_1691623134514_248()];
        var_1691623134514_269;
        var_1691623134514_802
    }
}

public struct Struct_1691623134514_818<T0> {
    init() { // block id: 820

    }
;
    static mut prop var_1691623134514_823 : (Enum_1691623134514_159, UInt32) { // block id: 824
        get() { // block id: 826
            (Enum_1691623134514_159.defaultValue, UInt32(Int8(Int8(-74))))
        }

        set(Value) { // block id: 834
            ()
        }

    };
    public prop var_1691623134514_841 : (Float64, Int32, Int32) { // block id: 842
        get() { // block id: 844
            ();
            (Float64(Float64(-118.0)), Int32(83), Int32(106))
        }

    }
}

func func_1691623134514_122(param_1691623134514_123 : Range<UInt32>) : (Float64, Int32, Int32) { // block id: 124
    var loopTimeVar_1691623134514_511 : Array<UInt16> = [UInt16(UInt16(Int16(Int16(-98)))), UInt16(40), UInt16(UInt8(UInt8(UInt8(60)))), UInt16(96), UInt16(Int16(UInt8(227))), UInt16(UInt16(103)), UInt16(Int8(3)), UInt16(UInt16(149)), UInt16(Int8(UInt8(UInt8(123)))), UInt16(192)];
    for (i in loopTimeVar_1691623134514_511 where func_1691623134514_127(optionalParam_1691623134514_133 : { lambdaParameter_1691623134514_472 : Int16 => var var_1691623134514_475 : (Float64, Int32, Int32) = (Float64(-97.0), Int32(-24), Int32(-44)); var_1691623134514_475 })) {
        var loopTimeVar_1691623134514_486 : Int64 = 0;
        while ((false) && loopTimeVar_1691623134514_486 < 100 ) {
            loopTimeVar_1691623134514_486++;
            ()
        };
        var loopTimeVar_1691623134514_492 : Array<UInt16> = [UInt16(197), UInt16(153), UInt16(251), UInt16(182), UInt16(UInt8(Int8(52))), UInt16(Int16(16)), UInt16(Int16(Int8(Int8(125)))), UInt16(UInt8(191)), UInt16(180), UInt16(54)];
        for (i in loopTimeVar_1691623134514_492 where true) {
            var_1691623134514_438;
            var_1691623134514_269
        }
    };
    let var_1691623134514_838 : Struct_1691623134514_818<VArray<Float32, $5>> = Struct_1691623134514_818<VArray<Float32, $5>>();
    func_1691623134514_539(optionalParam_1691623134514_540 : Class_1691623134514_248.var_1691623134514_815, optionalParam_1691623134514_542 : Struct_1691623134514_818<VArray<Float32, $5>>.var_1691623134514_823, namedParam_1691623134514_567 : var_1691623134514_838.var_1691623134514_841).var_1691623134514_852
}

func func_1691623134514_117<T0>(param_1691623134514_118 : Int16) : Int32 { // block id: 119
    var var_1691623134514_868 : (Range<UInt32>) -> (Float64, Int32, Int32) = func_1691623134514_122;
    let var_1691623134514_873 : (Range<Int16>, Array<UInt16>, Bool) = (((Int16(Int16(102))&127)..=(Int16(Int16(-116))&127):(Int64(76)|1)), [UInt16(18), UInt16(58), UInt16(52), UInt16(44), UInt16(116), UInt16(45), UInt16(176), UInt16(16), UInt16(51), UInt16(232)], (Int8(UInt8(159)) is Enum_1691623134514_159));
    (try { // block id: 871
        var_1691623134514_873;
        ();
        let var_1691623134514_882 : Range<UInt32> = ((UInt32(UInt32(UInt32(UInt16(104))))&127)..(UInt32(UInt32(47))&127):(Int64(UInt8(112))|1));
        var_1691623134514_882
    } finally { // block id: 890
        var_1691623134514_892
    }|>var_1691623134514_868)[1]
}


public open class Class_1691623134514_924<T0> <: Class_1691623134514_248 {
    init() { // block id: 926

    }
;
    public func func_1691623134514_931(param_1691623134514_932 : Array<UInt16>, param_1691623134514_933 : (Int16) -> Int32, namedParam_1691623134514_936 ! : Range<Int64>) : UInt64 { // block id: 937
        var var_1691623134514_1060 : (Array<UInt64>, Enum_1691623134514_159) -> Bool = func_1691623134514_224;
        let var_1691623134514_1073 : Float32 = Float32(Float32(17.0));
        let var_1691623134514_1130 : Bool = ((true as Float32) is Array<UInt64>);
        (((Int32(Int32(89))&127)..=(Int32(Int32(85))&127):(Int64(-32)|1)), (var_1691623134514_946 ?? var_1691623134514_802.var_1691623134514_951), var_1691623134514_960, var_1691623134514_802.func_1691623134514_965(var_1691623134514_1057, namedParam_1691623134514_967 : var_1691623134514_1060, namedParam_1691623134514_971 : [VArray<Float32, $5>(repeat: Float32(90.0)), var_1691623134514_390, VArray<Float32, $5>(repeat: Float32(-75.0)), var_1691623134514_390, VArray<Float32, $5>({ i => Float32(-1.0)}), VArray<Float32, $5>({ i => Float32(33.0)}), VArray<Float32, $5>(repeat: var_1691623134514_1073), var_1691623134514_390, VArray<Float32, $5>(repeat: var_1691623134514_1073), VArray<Float32, $5>(repeat: Float32(110.0))], namedParam_1691623134514_972 : func_1691623134514_571), match ((Option<(Range<Int16>, Int16, Range<Int8>, Bool)>.Some((((Int16(Int16(-127))&127)..=(Int16(var_1691623134514_274)&127):(Int64(-77)|1)), Int16(123), ((Int8(Int8(-122))&127)..=(Int8(Int8(109))&127):(Int64(-18)|1)), var_1691623134514_1130)) ?? var_1691623134514_1135)) {
            case _ => 
                var_1691623134514_403
            
        });
        match (try { // block id: 1152
            var_1691623134514_269;
            var_1691623134514_946
        } finally { // block id: 1155
            var_1691623134514_269;
            if (var_1691623134514_1130) { var_1691623134514_946 } else { Option<String>.None } 
        }) {
            case _ => 
                -Float32(23.0);
                var_1691623134514_1166
            
        }
    }

    static init() {
    }
}




public func func_1691623134514_47<T0>(param_1691623134514_48 : Range<UInt64>) : Int64 { // block id: 49
    var var_1691623134514_112 : (Int16) -> (Float64, Int32, Int32) = func_1691623134514_54;
    (Int16(81)|>var_1691623134514_112)[1] * ((Option<Int16>.None ?? Int16(21))|>func_1691623134514_117<Int32>);
    let var_1691623134514_909 : Bool = true;
    var var_1691623134514_928 : Class_1691623134514_924<VArray<Float32, $5>> = Class_1691623134514_924<VArray<Float32, $5>>();
    var var_1691623134514_1171 : Range<Int64> = ((Int64(Int64(30))&127)..(Int64(Int64(90))&127):(Int64(118)|1));
    try { // block id: 905
        ((UInt32(UInt32(20))&127)..=(UInt32(UInt32(28))&127):(Int64(-1)|1));
        !var_1691623134514_909;
        var_1691623134514_912
    } catch (_) { // block id: 916
        Int64(4) * Int64(123)
    } finally { // block id: 920
        var_1691623134514_892;
        Int64(-126)
    } ** (var_1691623134514_928.func_1691623134514_931([UInt16(53), UInt16(126), UInt16(7), UInt16(53), UInt16(242), UInt16(164), UInt16(5), UInt16(51), UInt16(149), UInt16(14)], func_1691623134514_117<Int32>, namedParam_1691623134514_936 : var_1691623134514_1171))
}

main(): Int64 {
    try {
        var var_1691623134514_32 : Float32 = Float32(57.0);
        func_1691623134514_8(optionalParam_1691623134514_9 : Int8(Int8(125)), namedParam_1691623134514_11 : VArray<Float32, $5>({ i => Float32(-117.0)})[2]);
        var loopTimeVar_1691623134514_45 : Int64 = 0;
        while ((true) && loopTimeVar_1691623134514_45 < 100 ) {
            loopTimeVar_1691623134514_45++;

        };
        let var_1691623134514_1174 : (Range<UInt64>) -> Int64 = func_1691623134514_47<Int64>;
        var var_1691623134514_1179 : Range<UInt64> = ((UInt64(UInt64(UInt32(UInt8(127))))&127)..(UInt64(UInt64(UInt64(135)))&127):(Int64(114)|1));
        if (true) { var_1691623134514_1179 } else { var_1691623134514_1179 } |>var_1691623134514_1174
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var_1691623134514_912*var_1691623134514_912), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Int32 {
        var i = 0
        var res = ""
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
        if ( res == "144032124125141" ){
            return 0
        }
        return 1
    }
}
extend Enum_1691623134514_159 {

}

extend Class_1691623134514_248 {

}

