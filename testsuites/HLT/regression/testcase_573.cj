/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC-PIPE: %run %run_opt %output %run_args

public const var_1706618786554_33 : Unit = ()
public const var_1706618786554_64 : Bool = false
public var var_1706618786554_97 : Array<Array<Bool>> = [[true, true, true, false, true, true, false, false, false, false], [(UInt16(Int8(-125)) is Bool), true, false, true, false, (Int8(89) is Range<UInt32>), true, true, true, true], [true, true, true, (Int8(Int8(38)) is Range<UInt16>), (UInt8(143) is Range<UInt16>), (r'j' is Range<UInt32>), (r'K' is Range<UInt16>), (UInt64(UInt8(45)) is Range<Int8>), true, ("ieTA.ijV*?" is Int64)], [(((UInt64(UInt64(39))&127)..(UInt64(UInt64(156))&127):(Int64(-32)|1)) is Int16), true, false, (() is Range<UInt64>), true, (UInt8(173) is Range<Int8>), false, (r'G' is Interface_1706618786554_11), true, false], [true, true, true, false, false, true, true, false, false, true], [true, false, true, true, true, false, true, false, true, true], [true, false, false, true, false, false, true, true, false, false], [(Class_1706618786554_8() is UInt8), true, true, (Class_1706618786554_8() is Int64), ((Option<Class_1706618786554_8>.None as Class_1706618786554_8) is Int8), false, ("""
gXt6*
%Ms+n
""" is Range<UInt16>), false, false, false], [false, false, false, true, false, true, false, false, false, true], [true, true, false, true, false, true, false, false, true, true]]
const var_1706618786554_251 : UInt32 = 204
const var_1706618786554_365 : Int8 = -3
const var_1706618786554_374 : String = "H9}_:Dza{ZP"
const var_1706618786554_408 : Rune = r't'
var var_1706618786554_418 : Int32 = Int32(-50)
public var var_1706618786554_452 : Struct_1706618786554_448 = Struct_1706618786554_448()
var var_1706618786554_470 : Bool = (((UInt64(UInt64(37))&127)..=(UInt64(UInt64(72))&127):(Int64(-3)|1)) is Range<UInt16>)
public var var_1706618786554_501 : Option<Bool> = (Float64(Float64(Float64(Float32(-24.0)))) as Bool)
public let var_1706618786554_511 : Rune = r'R'
public var var_1706618786554_568 : UInt = UInt64(UInt16(140))
public interface Interface_1706618786554_11 {

}

public open class Class_1706618786554_8 <: Interface_1706618786554_11 {
    public init() { // block id: 10

    }
;
    public init(optionalParam_1706618786554_73 ! : Float32 = Float32(Float32(20.0)), optionalParam_1706618786554_76 ! : UInt8 = UInt8(150), namedParam_1706618786554_78 ! : UInt8, optionalParam_1706618786554_79 ! : Int8 = Int8(-55)) { // block id: 81
        var loopTimeVar_1706618786554_172 : Range<UInt64> = ((UInt64(UInt64(Int16(122)))&127)..=(UInt64(UInt64(UInt32(26)))&127):(Int64(UInt16(Int8(UInt8(77))))|1));
        for (i in loopTimeVar_1706618786554_172 where var_1706618786554_97[8][3]) {

        };
        var var_1706618786554_425 : Class_1706618786554_421 = Class_1706618786554_421();
        try { // block id: 183
            var var_1706618786554_414 : Float32 = Float32(Float32(-77.0));
            func_1706618786554_185(namedParam_1706618786554_186 : var_1706618786554_414, optionalParam_1706618786554_187 : var_1706618786554_418);
            var_1706618786554_425.var_1706618786554_428
        } finally { // block id: 442
            [Int16(-126), Int16(32), Int16(-54), Int16(-125), Int16(114), Int16(32), Int16(114), Int16(-8), Int16(-3), Int16(-42)][3];
            Struct_1706618786554_448.var_1706618786554_455
        }
    }
;
    public mut prop var_1706618786554_529 : Byte { // block id: 530
        get() { // block id: 532
            UInt8(Int8(73));
            var_1706618786554_602
        }

        set(Value) { // block id: 537
            ();
            var_1706618786554_602 = Value
        }

    };
    mut prop var_1706618786554_602 : UInt8 { // block id: 603
        get() { // block id: 605
            UInt8(UInt8(240))
        }

        set(Value) { // block id: 610
            ();
            ();
            ()
        }

    }
    static init() {
    }
}


const func func_1706618786554_242(optionalParam_1706618786554_243 ! : UInt32 = 70, namedParam_1706618786554_245 ! : Bool, namedParam_1706618786554_246 ! : Unit, optionalParam_1706618786554_247 ! : Float32 = 111.0) : Unit { // block id: 249

}

public const func func_1706618786554_322(param_1706618786554_323 : Int8, param_1706618786554_324 : Int16, optionalParam_1706618786554_325 ! : String = """
&J]k1
n7Yt\"
""", optionalParam_1706618786554_327 ! : UInt8 = 77) : UInt64 { // block id: 329
    const var_1706618786554_331 : UInt64 = 165;
    var_1706618786554_331
}

const func func_1706618786554_334(optionalParam_1706618786554_335 ! : UInt16 = 119, optionalParam_1706618786554_337 ! : Rune = r'w', namedParam_1706618786554_339 ! : Rune) : Int8 { // block id: 340
    -52
}

public const func func_1706618786554_315(param_1706618786554_316 : Int32) : Int32 { // block id: 317
    const var_1706618786554_319 : Int32 = 59;
    var_1706618786554_319;
    const func func_1706618786554_353() : Int8 { // block id: 354
        const var_1706618786554_359 : Rune = r'H';
        (func_1706618786554_334(namedParam_1706618786554_339 : var_1706618786554_359) + func_1706618786554_334(optionalParam_1706618786554_337 : var_1706618786554_359, namedParam_1706618786554_339 : r'H')) * var_1706618786554_365
    }
;
    const func func_1706618786554_344(optionalParam_1706618786554_345 ! : Float64 = 70.0, namedParam_1706618786554_347 ! : UInt8) : Rune { // block id: 348
        if ((-101 >= func_1706618786554_353())) { r'm' } else { r'O' } 
    }
;
    const var_1706618786554_371 : Int16 = -21;
    func_1706618786554_322(func_1706618786554_334(optionalParam_1706618786554_337 : r'I', namedParam_1706618786554_339 : func_1706618786554_344(namedParam_1706618786554_347 : 93)), var_1706618786554_371, optionalParam_1706618786554_325 : var_1706618786554_374);
    -58 + ((-56 + 82) % ((27) | 1))
}

public const func func_1706618786554_185(namedParam_1706618786554_186 ! : Float32, optionalParam_1706618786554_187 ! : Int32 = -110) : Int8 { // block id: 189
    true;
    const func func_1706618786554_254(optionalParam_1706618786554_255 ! : UInt16 = 176, namedParam_1706618786554_257 ! : Int64, optionalParam_1706618786554_258 ! : String = "AvS}_p3q=)", namedParam_1706618786554_260 ! : Int64) : Bool { // block id: 261
        const var_1706618786554_263 : UInt = 228;
        var_1706618786554_263;
        const var_1706618786554_266 : Bool = false;
        var_1706618786554_266
    }
;
    const var_1706618786554_275 : Int32 = 10;
    const func func_1706618786554_302(param_1706618786554_303 : Unit) : Int32 { // block id: 304
        const var_1706618786554_310 : Int64 = 14;
        15 >> (((-90 - var_1706618786554_310)) & 7);
        var_1706618786554_33;
        func_1706618786554_315(-17) - var_1706618786554_275
    }
;
    const var_1706618786554_392 : Int64 = -65;
    const func func_1706618786554_193(optionalParam_1706618786554_194 ! : Int16 = -43, optionalParam_1706618786554_196 ! : UInt8 = 46, namedParam_1706618786554_198 ! : Rune) : Int8 { // block id: 199
        const func func_1706618786554_281() : Unit { // block id: 282
            ();
            const func func_1706618786554_285(param_1706618786554_286 : UInt8, namedParam_1706618786554_287 ! : Rune, optionalParam_1706618786554_288 ! : Int32 = 37) : Unit { // block id: 290
                ()
            }
;
            const var_1706618786554_293 : UInt8 = 121;
            func_1706618786554_285(var_1706618786554_293, namedParam_1706618786554_287 : r'X');
            ()
        }
;
        const var_1706618786554_299 : Float32 = -87.0;
        const func func_1706618786554_210() : Float64 { // block id: 211
            ();
            const var_1706618786554_231 : Float64 = -24.0;
            const func func_1706618786554_214(param_1706618786554_215 : Float32, optionalParam_1706618786554_216 ! : UInt32 = 104, namedParam_1706618786554_218 ! : Int16, namedParam_1706618786554_219 ! : String) : Float64 { // block id: 220
                ();
                const var_1706618786554_228 : UInt64 = 90;
                (-70.0 ** (109 ** var_1706618786554_228)) ** var_1706618786554_231
            }
;
            const func func_1706618786554_234(namedParam_1706618786554_235 ! : Int32, optionalParam_1706618786554_236 ! : Int16 = 117, optionalParam_1706618786554_238 ! : Int8 = -121) : Float32 { // block id: 240
                const func func_1706618786554_269(param_1706618786554_270 : Int32, namedParam_1706618786554_271 ! : Bool) : Int64 { // block id: 272
                    16
                }
;
                func_1706618786554_242(optionalParam_1706618786554_243 : var_1706618786554_251, namedParam_1706618786554_245 : func_1706618786554_254(namedParam_1706618786554_257 : func_1706618786554_269(var_1706618786554_275, namedParam_1706618786554_271 : var_1706618786554_64), optionalParam_1706618786554_258 : "KPlN`7Q|O7", namedParam_1706618786554_260 : 103), namedParam_1706618786554_246 : func_1706618786554_281(), optionalParam_1706618786554_247 : -112.0);
                var_1706618786554_299
            }
;
            func_1706618786554_214(func_1706618786554_234(namedParam_1706618786554_235 : func_1706618786554_302(var_1706618786554_33), optionalParam_1706618786554_236 : -74), namedParam_1706618786554_218 : 80, namedParam_1706618786554_219 : var_1706618786554_374)
        }
;
        const func func_1706618786554_201(optionalParam_1706618786554_202 ! : Int64 = 67, namedParam_1706618786554_204 ! : Int64, optionalParam_1706618786554_205 ! : UInt16 = 232) : Unit { // block id: 207
            func_1706618786554_210() ** ((var_1706618786554_392 * var_1706618786554_392) & -60);
            var_1706618786554_33
        }
;
        const var_1706618786554_400 : UInt16 = 190;
        func_1706618786554_201(optionalParam_1706618786554_202 : -80, namedParam_1706618786554_204 : var_1706618786554_392, optionalParam_1706618786554_205 : var_1706618786554_400);
        -110 * var_1706618786554_365;
        -77
    }
;
    func_1706618786554_193(optionalParam_1706618786554_196 : 105, namedParam_1706618786554_198 : var_1706618786554_408) & (-4 << ((var_1706618786554_365) & 7))
}

public open class Class_1706618786554_421 <: Interface_1706618786554_11 {
    public init() { // block id: 423

    }
;
    public prop var_1706618786554_428 : Rune { // block id: 429
        get() { // block id: 431
            ((Int8(Int8(Int8(UInt8(216))))&127)..(Int8(Int8(Int8(UInt8(52))))&127):(Int64(21)|1));
            ();
            r'3'
        }

    }
    static init() {
    }
}

public struct Struct_1706618786554_448 {
    public init() { // block id: 450

    }
;
    public static const var_1706618786554_455 : Rune = r'D'
}

sealed public interface Interface_1706618786554_481 {

}

sealed public interface Interface_1706618786554_480 <: Interface_1706618786554_481 {

}

sealed public interface Interface_1706618786554_479 <: Interface_1706618786554_480 {

}

sealed public interface Interface_1706618786554_482 {

}

public open class Class_1706618786554_476 <: Interface_1706618786554_479 & Interface_1706618786554_482 & Resource {
    public init() { // block id: 478

    }
;
    prop var_1706618786554_487 : Class_1706618786554_8 { // block id: 488
        get() { // block id: 490
            r'z';
            ();
            Class_1706618786554_8()
        }

    }
    static init() {
    }
    public func isClosed(): Bool { return true }
    public func close(): Unit {}
}

public func func_1706618786554_43(param_1706618786554_44 : Rune, optionalParam_1706618786554_45 ! : Unit = (), optionalParam_1706618786554_47 ! : Int8 = Int8(-84)) : Class_1706618786554_8 { // block id: 49
    UInt16(144);
    var var_1706618786554_70 : Class_1706618786554_8 = Class_1706618786554_8(namedParam_1706618786554_78 : UInt8(47));
    try { // block id: 52
        var var_1706618786554_59 : ?Class_1706618786554_8 = Option<Class_1706618786554_8>.None;
        var_1706618786554_59.getOrThrow()
    } catch (e: Exception) { // block id: 61
        if (var_1706618786554_64) { // block id: 66

        };
        UInt16(Int8(-106));
        var_1706618786554_70
    } finally { // block id: 458
        match ([[false, true, false, false, false, true, true, false, true, true], [false, false, false, false, true, false, false, false, true, true], [true, true, false, false, false, true, true, true, false, true], [false, true, true, true, false, true, false, true, true, true], [false, true, false, true, true, false, true, true, false, true], [true, true, false, false, false, true, true, false, true, true], [true, false, false, false, false, true, true, false, true, true], [false, false, false, false, true, false, true, true, true, false], [false, true, true, false, false, true, true, false, true, false], [false, true, false, true, true, true, false, true, false, true]]) {
            case _ : Range<UInt16> => 
                var_1706618786554_33
            
            case _ => 
                var_1706618786554_470 ||= true;
                var_1706618786554_33
            
        };
        var var_1706618786554_484 : Class_1706618786554_476 = Class_1706618786554_476();
        var_1706618786554_484.var_1706618786554_487
    }
}



main(): Int64 {
    try {
        const func func_1706618786554_27(namedParam_1706618786554_28 ! : UInt64) : Unit { // block id: 29
            103;
            ();
            var_1706618786554_33
        }
;
        const func func_1706618786554_17(optionalParam_1706618786554_18 ! : UInt32 = 115, optionalParam_1706618786554_20 ! : Int32 = -112) : Int64 { // block id: 22
            const func func_1706618786554_24() : Unit { // block id: 25
                func_1706618786554_27(namedParam_1706618786554_28 : 186);
                var_1706618786554_33;
                var_1706618786554_33
            }
;
            func_1706618786554_24();
            79
        }
;
        func func_1706618786554_13(param_1706618786554_14 : UInt16) : Class_1706618786554_8 { // block id: 15
            var var_1706618786554_40 : UInt32 = UInt32(136);
            func_1706618786554_17(optionalParam_1706618786554_18 : var_1706618786554_40);
            func_1706618786554_43(if ((var_1706618786554_501 ?? var_1706618786554_470)) { (if (var_1706618786554_470) { var_1706618786554_511 } else { var_1706618786554_511 } ) } else { (if (true) { var_1706618786554_511 } else { r'w' } ) } , optionalParam_1706618786554_45 : try (resource = Class_1706618786554_476()) { // block id: 519
                var var_1706618786554_521 : Option<Bool> = Option<Bool>.Some(false);
                var_1706618786554_521;
                var_1706618786554_33
            } finally { // block id: 525

            }, optionalParam_1706618786554_47 : Int8(4))
        }
;
        let var_1706618786554_542 : Interface_1706618786554_480 = Class_1706618786554_476();
        let var_1706618786554_555 : Byte = UInt8(Int8(Int8(UInt8(Int8(-86)))));
        func_1706618786554_13(UInt16(213)).var_1706618786554_529 <<= ((match ((var_1706618786554_542 as Class_1706618786554_8)) {
            case caseVar_1706618786554_546 : Bool => 
                UInt8(163) ^ UInt8(160)
            
            case _ => 
                var_1706618786554_555
            
        }) & 7);
        var var_1706618786554_575 : Int8 = Int8(-74);
        var loopTimeVar_1706618786554_583 : Range<UInt64> = ((UInt64(UInt64(UInt16(209)))&127)..(UInt64(UInt64(122))&127):(Int64(34)|1));
        for (i in loopTimeVar_1706618786554_583 where (var_1706618786554_501 ?? try { // block id: 565
            var_1706618786554_568 /= ((var_1706618786554_568) | 1);
            ();
            var_1706618786554_575 <= Int8(-23)
        } finally { // block id: 578
            Class_1706618786554_476();
            var_1706618786554_470
        })) {

        };
        Int64(((Option<Int8>.Some(Int8(-32)) ?? Int8(-52)) << ((Int8(var_1706618786554_555)) & 7)))
        // CRC Check All Variables
        var crcCheck = CrcCheck(5000, 32)
        crcCheck.updateBuffer(UInt64(var_1706618786554_418*var_1706618786554_418), 64)
        crcCheck.updateBuffer(UInt64(var_1706618786554_555*var_1706618786554_555), 64)
        crcCheck.updateBuffer(UInt64(var_1706618786554_575*var_1706618786554_575), 64)
        crcCheck.crcCheck()
        crcCheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[(i + buffer_index) % buffer.size] = byteArray[i + byte_index]
            i++
        }
        buffer_index = (buffer_index + i) % buffer.size
    }

    func updateBuffer(input: Bool, byte_n: Int64): Unit {
        if (input == true) {
            updateBuffer(1, byte_n)
        } else {
            updateBuffer(0, byte_n)
        }
    }

    func updateBuffer(input: Rune, byte_n: Int64): Unit {
        updateBuffer(UInt64(UInt32(input)), byte_n)
    }

    func updateBuffer(input: String, byte_n: Int64): Unit {
        for (c in input) {
            updateBuffer(c, byte_n)
        }
    }

    func updateBuffer(input: Unit, byte_n: Int64): Unit {
        updateBuffer(input.toString(), byte_n)
    }

    func updateBuffer(input: Any, byte_n: Int64) : Unit {
        if (input is Hashable) {
            match(input as Hashable) {
                case Some(v) => updateBuffer(UInt64(v.hashCode()), byte_n)
                case _=> updateBuffer(1, byte_n)
            }
            
        } else if (input is ToString) {
            match(input as ToString) {
                case Some(v) => updateBuffer(v.toString(), byte_n)
                case _=> updateBuffer(1, byte_n)
            }
        } else {
            updateBuffer(1, byte_n)
        }
    }     
    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}

extend Struct_1706618786554_448 {

}

