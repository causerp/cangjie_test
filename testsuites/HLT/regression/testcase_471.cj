/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC-PIPE-1: %compiler %cmp_opt %f 2>&1 |compare %f


public let var58 : Enum55 = Enum55.defaultValue
public var var64 : UInt32 = UInt32(UInt32(83))
public var var97 : Int16 = Int16(93)
public var var120 : UInt64 = UInt64(12)
public let var126 : Float64 = 89.0
public var var146 : UInt32 = UInt32(Int32(-4))
public var var150 : UInt32 = UInt32(Int16(Int16(Int8(93))))
public var var178 : String = """
2$Pbj
2*u|&
"""
public var var229 : Int32 = Int32(UInt32(Int8(Int8(Int8(-126)))))
public var var277 : Int64 = Int64(UInt8(UInt8(Int8(78))))
public var var333 : Interface15 = Class12()
public var var364 : Unit = ()
public let var379 : Unit = ()
public let var469 : Bool = false
public var var497 : Unit = ()
public var var602 : UInt8 = UInt8(224)
public var var610 : Range<Int64> = ((116&127)..(Int64(Int32(Int32(-39)))&127):((Int64(Int32(-96))|1)))
public let var624 : UInt16 = UInt16(UInt16(113))
public var var669 : ??Bool = Option<Option<Bool>>.None
public var var686 : Range<UInt32> = ((UInt32(36)&127)..=(UInt32(UInt32(91))&127):((Int64(Int32(108))|1)))
public let var758 : Array<Enum55> = [Enum55.defaultValue, Enum55.defaultValue, Enum55.defaultValue, Enum55.defaultValue, Enum55.defaultValue, Enum55.defaultValue, Enum55.defaultValue, Enum55.defaultValue, Enum55.defaultValue, Enum55.defaultValue]
var var773 : Int8 = Int8(-43)
var var790 : Result<Bool> = Result<Bool>.Err(Exception("LangFuzz Inner Exception"))
var var877 : Result<Result<Bool>> = Result<Result<Bool>>.Err(Exception("LangFuzz Inner Exception"))
public let var884 : Unit = ()
public let var897 : UInt8 = UInt8(Int8(Int8(UInt8(45))))
public var var907 : Bool = (Class824() is Float64)
public var var955 : Bool = false
public let var1011 : UInt8 = UInt8(38)
public let var1021 : Float64 = (-54.0)
public let var1037 : Result<Result<Unit>> = Result<Result<Unit>>.Err(Exception("LangFuzz Inner Exception"))
var var1110 : Range<Int32> = ((Int32(Int8(UInt8(UInt8(49))))&127)..=(Int32(Int16(Int16(37)))&127):((Int64(Int64(UInt8(Int8(89))))|1)))
let var1125 :  (Range<UInt64>,Interface17,Range<Int8>,Bool) = (((UInt64(23)&127)..=(UInt64(221)&127):((-124)|1)), Class12(), ((Int8(-92)&127)..(Int8(103)&127):((-103)|1)), ("""
6,_]g
&gL,N
""" is UInt8))
public let var1141 : Interface17 = Class12()
public let var1214 : ?Interface17 = (((UInt64(2)&127)..(UInt64(39)&127):((5|1))) as Interface17)
public var var1279 : Interface17 = Class12()
public var var1416 : (Int16,Float64, (UInt32,Rune,Unit,UInt32,Interface15,Int64,Bool,UInt64,UInt64),Range<Int32>,Bool,Range<Int64>) = (Int16(-104), Float64(Float32(Float32(Float32(-43.0)))), (UInt32(Int8(110)), 'O', (), UInt32(Int32(UInt16(5))), Class12(), 83, true, UInt64(Int32(-52)), UInt64(86)), ((Int32(-93)&127)..(Int32(Int32(Int32(96)))&127):((5|1))), ((UInt32(Int32(-84)), '7', (), UInt32(UInt8(16)), Class12(), Int64(Int32(89)), false, UInt64(110), UInt64(22)) is (Range<Int64>) -> Result<Bool>), (((-48)&127)..(109&127):((Int64(UInt64(UInt64(74)))|1))))
public var var1671 : Result<Array<Float64>> = Result<Array<Float64>>.Err(Exception("LangFuzz Inner Exception"))
let var1720 : Range<UInt8> = ((UInt8(165)&127)..=(UInt8(40)&127):((-42)|1))
public let var1745 : Array<Range<UInt8>> = [((UInt8(UInt8(Int8(60)))&127)..(UInt8(Int8(UInt8(212)))&127):((Int64(70)|1))), ((UInt8(UInt8(166))&127)..(UInt8(UInt8(UInt8(215)))&127):((Int64(UInt32(189))|1))), ((UInt8(241)&127)..(UInt8(8)&127):(96|1)), ((UInt8(138)&127)..=(UInt8(168)&127):((-99)|1)), ((UInt8(53)&127)..=(UInt8(24)&127):((Int64(Int32(Int32(-90)))|1))), ((UInt8(150)&127)..=(UInt8(76)&127):(2|1)), ((UInt8(UInt8(139))&127)..(UInt8(UInt8(83))&127):((33|1))), ((UInt8(119)&127)..(UInt8(166)&127):((-28)|1)), ((UInt8(UInt8(Int8(-70)))&127)..=(UInt8(UInt8(138))&127):((75|1))), ((UInt8(UInt8(168))&127)..=(UInt8(Int8(UInt8(166)))&127):(((-102)|1)))]
public let var1830 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
public var var1877 : Bool = (Int64(Int64(Int32(UInt32(187)))) is Array<Unit>)
public var var1942 : Float32 = Float32(-127.0)
public let var2003 : Range<UInt64> = ((UInt64(231)&127)..=(UInt64(108)&127):((-8)|1))
public var var2008 : Int8 = Int8(UInt8(250))
let var2020 : (Range<Int32>,Int64, (Range<UInt64>,Interface17,Range<Int8>,Bool),Range<UInt32>,Float64) = (((Int32(-11)&127)..=(Int32(Int8(UInt8(214)))&127):((Int64(Int16(Int8(28)))|1))), 18, (((UInt64(183)&127)..(UInt64(124)&127):(19|1)), Class12(), ((Int8(UInt8(98))&127)..=(Int8(UInt8(104))&127):((62|1))), false), ((UInt32(122)&127)..(UInt32(1)&127):((-106)|1)), Float64(Float64(Float32(-95.0))))
public var var2132 : Int8 = Int8(8)
public var var2135 : UInt16 = UInt16(97)
public var var2264 : UInt64 = UInt64(173)
public var var2268 : Int64 = Int64(Int16(UInt16(147)))
public let var2309 : Result<Option<Interface17>> = Result<Option<Interface17>>.Err(Exception("LangFuzz Inner Exception"))
public var var2381 : Result<Unit> = Result<Unit>.Err(Exception("LangFuzz Inner Exception"))
var var2454 : Range<Int64> = ((30&127)..=(Int64(UInt32(147))&127):((Int64(UInt8(UInt8(Int8(-27))))|1)))
let var2487 : Option<Bool> = (UInt64(163) as Bool)
public var var2695 : UInt64 = UInt64(Int8(116))
public var var2816 : Rune = '0'
public let var2885 : UInt16 = UInt16(UInt8(193))
public let var2913 : Bool = ((((UInt32(169)&127)..(UInt32(141)&127):((-19)|1)), Int32(UInt16(103)), (((-110)&127)..((-127)&127):(62|1)), ((UInt64(162)&127)..=(UInt64(77)&127):((-113)|1)), Int16(Int16(12)), Int8(-26)) is ((Range<Int64>) -> Result<Bool>) -> Unit)
public var var2974 : Bool = ((((Int16(95)&127)..(Int16(64)&127):(0|1)), Int8(-87), UInt16(68), (), ((UInt64(187)&127)..(UInt64(24)&127):(98|1))) is  (Int64,Interface16,Range<Int32>))
public var var3039 : Rune = 'e'
public let var3072 : Unit = ()
public var var3096 : Unit = ()
public let var3211 : Range<UInt32> = ((UInt32(177)&127)..(UInt32(170)&127):(17|1))
public let var3224 : Int8 = Int8(Int8(-49))
public let var3366 : Unit = ()
public let var3439 : UInt8 = UInt8(Int8(UInt8(UInt8(UInt8(156)))))
public var var3483 : Unit = ()
public var var3520 : Interface16 = Class12()
public var var3546 : Result<Unit> = Result<Unit>.Err(Exception("LangFuzz Inner Exception"))
public var var3584 : Class12 = Class12()
public let var3641 : Result<Enum55> = Result<Enum55>.Err(Exception("LangFuzz Inner Exception"))
var var3699 : Array<UInt32> = [UInt32(102), UInt32(89), UInt32(154), UInt32(124), UInt32(60), UInt32(141), UInt32(87), UInt32(238), UInt32(117), UInt32(149)]
public var var3761 : Interface17 = Class824()
public var var3790 : Option<Int8> = Option<Int8>.None
let var3821 : ?Int64 = Option<Int64>.None
public var var3844 : UInt64 = UInt64(178)
public let var3867 : Int32 = Int32(Int8(Int8(-43)))
var var3907 : Int8 = Int8(UInt8(UInt8(Int8(UInt8(126)))))
var var3921 : ?Bool = (Class12() as Bool)
public let var3925 : Bool = false
public interface Interface16 {

}

public interface Interface17 {
    func func3929() : Unit { // block id: 3930
        var3366;
        var loopTimeVar3948 : Int64 = 0;
        while ((var955) && loopTimeVar3948 < 100 ) {
            loopTimeVar3948++;
            var var3940 : Int64 = Int64(UInt8(64));
            if (false) { // block id: 3937
                var3940++;
                (-110.0);
                var3366
            } else if (true) { // block id: 3946

            }
        }
    }

}

public interface Interface15 <: Interface16 & Interface17 {

}

public open class Class12 <: Interface15 & Interface17 {
    public init() { // block id: 14

    }

    public static var var20 : Unit = ();
    protected let var50 : UInt8 = UInt8(141);
    private static var var80 : Bool = false;
    public init(optionalParam35 ! : Int8 = Int8(UInt8(246)), optionalParam38 ! : Int64 = Int64(Int64(Int16(-41))), optionalParam42 ! : Bool = (() is Int8), namedParam45 ! : Int32) { // block id: 46
        this.var50;
        let var161 : Rune = '3';
        if (match (match (var58) {
                case _ => 
                    var64 |= UInt32(15);
                    var var71 : String = "1pn[vw1&bu";
                    if (optionalParam42) { var71 } else { var71 } 
                
            }) {
            case "#,y4\\w 6AY" => 
                optionalParam42 || var80
            
            case _ => 
                var20;
                var20;
                optionalParam42
            
            case _ : Bool => 
                false
            
            case _ => 
                Int16(-112) > var97;
                var20;
                var97 != var97
            
        }) { // block id: 103
            (Result<Unit>.Ok(()) ?? var20);
            try { // block id: 113
                UInt32(216) > UInt32(248)
            } catch (_) { // block id: 117
                var120 %= ((var120) | 1);
                ();
                var126 != var126
            } finally { // block id: 129
                optionalParam35 >= Int8(-128)
            };
            var var143 : UInt32 = UInt32(217);
            if (true) { // block id: 135
                var20;
                var20;
                var64
            } else { // block id: 139
                ();
                var143 **= (var146 & 3);
                var150
            }
        } else { // block id: 155
            (UInt32(64), var161, (), var146, Class12(), 96, false, var120, UInt64(170))[4];
            if (false) { // block id: 173
                UInt32(112)
            } else { // block id: 175
                UInt32(113)
            }
        };
        var178
    }

    public init(namedParam254 ! : Int16) { // block id: 255
        var97;
        97.0
    }

    public var var3872 : UInt16 = UInt16(72);
    public func func3929() : Unit { // block id: 3930
        var3366;
        var loopTimeVar3948 : Int64 = 0;
        while ((var955) && loopTimeVar3948 < 100 ) {
            loopTimeVar3948++;
            var var3940 : Int64 = Int64(UInt8(64));
            if (false) { // block id: 3937
                var3940++;
                (-110.0);
                var3366
            } else if (true) { // block id: 3946

            }
        }
    }

}

public enum Enum55 {
    defaultValue
}

public func func198(param199 : Int32) :  (UInt32,Rune,Unit,UInt32,Interface15,Int64,Bool,UInt64,UInt64) { // block id: 200
    let var222 : Bool = ((Float32(Float32(Float32(-49.0))) is Float32) is UInt32);
    let var246 : Rune = 'K';
    var var353 : Result<Unit> = Result<Unit>.Err(Exception("LangFuzz Inner Exception"));
    try { // block id: 202
        var var208 : Float32 = Float32(Float32(9.0));
        let var216 : Unit = ();
        let var251 : Interface15 = Class12(namedParam254 : Int16(79));
        var var266 : Interface17 = Class12();
        if (true) { // block id: 205
            var208 *= Float32(-108.0);
            let var236 : Int64 = 109;
            (UInt32(121), 'A', var216, var146, Class12(optionalParam35 : Int8(-102), optionalParam42 : var222, namedParam45 : var229), var236, var222, var120, UInt64(104))
        } else if (var222) { // block id: 242
            (UInt32(181), var246, (), var146, var251, (-104), var222, UInt64(92), var120)
        } else { // block id: 263
            ();
            var266;
            let var294 : UInt64 = UInt64(94);
            if (var222) { (var146, 'y', (), var146, var251, var277, true, UInt64(168), var120) } else { (UInt32(98), var246, var216, var146, var251, var277, var222, var294, var120) } 
        }
    } catch (e: Exception) { // block id: 297
        var var303 : Bool = false;
        var loopTimeVar309 : Range<UInt64> = ((UInt64(0)&127)..(UInt64(36)&127):((71|1)));
        for (i in loopTimeVar309 where var222) {
            var var306 : Bool = false;
            var303 &&= var306;
            ()
        };
        (Int16(-41), var126, (var146, var246, (), var146, var333, 58, var303, var120, var120), ((Int32(-6)&127)..(Int32(33)&127):(35|1)), true, (((-60)&127)..(78&127):(49|1)))[2]
    } finally { // block id: 343
        let var347 : UInt16 = UInt16(209);
        (((var347&127)..(var347&127):((96|1))) is Range<UInt32>);
        var var393 :  (UInt32,Rune,Unit,UInt32,Interface15,Int64,Bool,UInt64,UInt64) = (UInt32(6), 'L', (), UInt32(Int16(-120)), Class12(), 66, true, UInt64(Int64(Int8(-80))), UInt64(63));
        match (var353) {
            case caseVar357 => 
                Class12();
                (UInt32(2), 'x', var364, UInt32(98), var333, var277, var222, var120, UInt64(79))
            
            case _ => 
                (UInt32(241), var246, var379, var146, var333, var277, var222, var120, var120)
            
            case _ => 
                if (false) { var393 } else { (var146, var246, var364, UInt32(179), var333, (-41), var222, var120, var120) } 
            
            case _ => 
                var393
            
        }
    }
}

public func func1292() :  (UInt32,Rune,Unit,UInt32,Interface15,Int64,Bool,UInt64,UInt64) { // block id: 196
    let var421 : (Int32) ->  (UInt32,Rune,Unit,UInt32,Interface15,Int64,Bool,UInt64,UInt64) = { lambdaParameter424 : Int32 => (UInt32(143), '7', (), UInt32(UInt16(UInt8(5))), Class12(namedParam254 : Int16(UInt16(137))), 35, false, UInt64(UInt8(22)), UInt64(125)) };
    Int32(77)|>var421
}



public func func654(param655 : Int8) : Option<Bool> { // block id: 656
    (match (var58) {
        case _ => 
            if (false) { var669 } else { Option<Option<Bool>>.None } 
        
    } ?? Option<Bool>.None)
}


public open class Class824 <: Interface16 & Interface17 {
    public init() { // block id: 826

    }
;
    let var831 : UInt8 = UInt8(58);
    var var1686 :  (Range<UInt64>,Interface17,Range<Int8>,Bool) = (((UInt64(109)&127)..(UInt64(171)&127):(((-87)|1))), Class12(), ((Int8(-14)&127)..(Int8(102)&127):((36|1))), true)
}


func func880(param881 : Range<Int64>) : Result<Bool> { // block id: 882
    var884;
    match (match (Result<Bool>.Ok(true)) {
            case _ => 
                var602 %= ((var897) | 1);
                var229 += var229;
                let var911 : Array<UInt32> = [UInt32(14), UInt32(1), UInt32(225), UInt32(120), UInt32(187), UInt32(225), UInt32(84), UInt32(198), UInt32(83), UInt32(87)];
                if (var907) { var911 } else { [UInt32(253), UInt32(88), UInt32(160), UInt32(189), UInt32(84), UInt32(230), UInt32(106), UInt32(89), UInt32(151), UInt32(106)] } 
            
        }[8]) {
        case 65 | 154 | 193 | 231 => 
            ();
            var126;
            Result<Bool>.Err(Exception("LangFuzz Inner Exception"))
        
        case _ => 
            ((UInt8(197)&127)..=(UInt8(43)&127):((-15)|1));
            Result<Bool>.Ok(var907)
        
    }
}



public struct Aggregate1084<T0> {
    public init() { // block id: 1086

    }
;
    public let var1091 :  (Range<UInt64>,Interface17,Range<Int8>,Bool) = (((UInt64(226)&127)..(UInt64(78)&127):((15|1))), Class824(), ((Int8(-99)&127)..=(Int8(33)&127):(29|1)), false);
    public init(param2586 : Int32, namedParam2587 ! : Bool, namedParam2588 ! : Float32, optionalParam2589 ! : (Range<Int64>,Array<Range<UInt8>>,UInt8,Result<Result<Unit>>,Unit,Array<Unit>,Range<Int32>) = ((((-77)&127)..=((-2)&127):((-58)|1)), [((UInt8(69)&127)..(UInt8(87)&127):((-107)|1)), ((UInt8(248)&127)..(UInt8(24)&127):(60|1)), ((UInt8(228)&127)..=(UInt8(124)&127):(124|1)), ((UInt8(156)&127)..(UInt8(212)&127):(22|1)), ((UInt8(206)&127)..=(UInt8(58)&127):((-111)|1)), ((UInt8(221)&127)..=(UInt8(225)&127):(9|1)), ((UInt8(162)&127)..=(UInt8(187)&127):((-91)|1)), ((UInt8(24)&127)..=(UInt8(45)&127):((-19)|1)), ((UInt8(116)&127)..(UInt8(141)&127):(21|1)), ((UInt8(174)&127)..(UInt8(52)&127):(100|1))], UInt8(UInt8(155)), Result<Result<Unit>>.Ok(Result<Unit>.Err(Exception("LangFuzz Inner Exception"))), (), [(), (), (), (), (), (), (), (), (), ()], ((Int32(-21)&127)..(Int32(-78)&127):(122|1)))) { // block id: 2600
        Option<Bool>.None;
        var364
    }

}

public func func1076(param1077 : Int64, param1078 : Range<Int64>, namedParam1079 ! : Result<Unit>) : Interface17 { // block id: 1080
    let var1088 : Aggregate1084<Array<Range<UInt8>>> = Aggregate1084<Array<Range<UInt8>>>();
    var1088.var1091[1]
}




public func func1541(param1542 : Option<Interface17>) :  (Range<UInt64>,Interface17,Range<Int8>,Bool) { // block id: 1543
    var379;
    var loopTimeVar1558 : Int64 = 0;
    while ((try { // block id: 1547
        false
    } catch (e: Exception) { // block id: 1549
        true
    }) && loopTimeVar1558 < 100 ) {
        loopTimeVar1558++;
        try { // block id: 1553

        } catch (_) { // block id: 1554

        } finally { // block id: 1555
            var379
        }
    };
    let var1587 : Result<(Range<Int32>,Int64, (Range<UInt64>,Interface17,Range<Int8>,Bool),Range<UInt32>,Float64)> = Result<(Range<Int32>,Int64, (Range<UInt64>,Interface17,Range<Int8>,Bool),Range<UInt32>,Float64)>.Err(Exception("LangFuzz Inner Exception"));
    let var1619 :  (String,Range<Int8>,Bool,Array<Unit>,UInt16,String,Int32) = ("?N5ftL~zM2", ((Int8(-97)&127)..=(Int8(-30)&127):(63|1)), false, [(), (), (), (), (), (), (), (), (), ()], UInt16(UInt16(Int16(UInt8(191)))), ###"(22yien1LR"###, Int32(Int32(-82)));
    func func1561(namedParam1562 ! : Array<Float64>, namedParam1563 ! : (Int64, Range<Int64>, Result<Unit>) -> Interface17) : Class824 { // block id: 1568
        try { // block id: 1570
            (((-75)&127)..=((-83)&127):(53|1))
        } finally { // block id: 1572
            try { // block id: 1574
                ((UInt16(106)&127)..(UInt16(9)&127):(108|1));
                var610
            } finally { // block id: 1577
                ((107&127)..(54&127):(9|1))
            }
        };
        let var1649 : UInt16 = UInt16(220);
        try { // block id: 1580
            (var1587 ?? (((Int32(90)&127)..(Int32(-18)&127):(124|1)), (-120), var1125, ((UInt32(140)&127)..=(UInt32(161)&127):((-69)|1)), var126));
            var var1602 : Int64 = Int64(Int8(UInt8(UInt8(239))));
            var var1609 : UInt16 = UInt16(UInt16(UInt16(248)));
            (((var97&127)..=(var97&127):((var1602|1))), Int8(-122), var1609, var884, ((UInt64(222)&127)..=(UInt64(210)&127):(43|1)))[3];
            var1619[4]
        } catch (_) { // block id: 1643
            ();
            [var1649, var1649, UInt16(55), var1649, UInt16(176), UInt16(214), UInt16(167), UInt16(88), var1649, var1649][4]
        } finally { // block id: 1661
            var1649
        };
        Class824()
    }
;
    func1561(namedParam1562 : (var1671 ?? [36.0, var126, 23.0, var1021, (-52.0), (-19.0), var126, (-36.0), var1021, 117.0]), namedParam1563 : func1076).var1686
}

func func1699(param1700 : Result<Bool>) :  (Range<UInt64>,Interface17,Range<Int8>,Bool) { // block id: 1701
    var1125
}

func func1844(param1845 : (Range<Int32>,Int64, (Range<UInt64>,Interface17,Range<Int8>,Bool),Range<UInt32>,Float64)) : Bool { // block id: 1846
    ();
    var var1909 : Range<UInt8> = ((UInt8(Int8(UInt8(UInt8(161))))&127)..=(UInt8(Int8(110))&127):((Int64(UInt64(Int32(103)))|1)));
    try { // block id: 1849
        var var1852 :  (Range<UInt32>,Int32,Range<Int64>,Range<UInt64>,Int16,Int8) = (((UInt32(Int32(-59))&127)..(UInt32(115)&127):((Int64(UInt32(Int8(104)))|1))), Int32(-111), (((-1)&127)..((-37)&127):((-48)|1)), ((UInt64(149)&127)..=(UInt64(151)&127):((-48)|1)), Int16(Int16(Int16(-46))), Int8(UInt8(45)));
        let var1936 : Float32 = Float32(123.0);
        match (var1852) {
            case ( _, -126,caseVar1871 : Result<Result<Bool>>,_ : UInt16,caseVar1872,caseVar1873) =>
                if (var1877) { [((var602&127)..=(UInt8(111)&127):((88|1))), var1720, ((UInt8(168)&127)..=(UInt8(248)&127):((-29)|1)), ((UInt8(89)&127)..(UInt8(217)&127):((-74)|1)), var1720, ((UInt8(158)&127)..(UInt8(246)&127):((var277|1))), ((UInt8(197)&127)..(UInt8(184)&127):((-62)|1)), ((var602&127)..(UInt8(186)&127):(((-56)|1))), ((UInt8(162)&127)..(UInt8(4)&127):(90|1)), ((UInt8(202)&127)..=(var602&127):((var277|1)))] } else { [var1720, var1909, var1720, ((UInt8(22)&127)..(UInt8(10)&127):(10|1)), ((UInt8(20)&127)..=(var897&127):((var277|1))), ((var897&127)..(UInt8(124)&127):((var277|1))), ((UInt8(175)&127)..(UInt8(243)&127):(18|1)), var1909, var1909, ((UInt8(56)&127)..(UInt8(181)&127):((-119)|1))] } ;
                var1936 - var1936;
                var1936 <= var1942
            
            case (_,_ : (Range<Int64>,Array<Range<UInt8>>,UInt8,Result<Result<Unit>>,Unit,Array<Unit>,Range<Int32>),caseVar1946,caseVar1947 : Range<Int64>,caseVar1948,caseVar1949) => 
                ();
                false && false
            
            case caseVar1957 : (Int16,Float64, (UInt32,Rune,Unit,UInt32,Interface15,Int64,Bool,UInt64,UInt64),Range<Int32>,Bool,Range<Int64>) =>
                var1877
            
            case _ => 
                var1877
            
            case _ => 
                var877;
                var1877
            
        }
    } catch (e: Exception) { // block id: 1968
        if (var955) { // block id: 1971
            var var1975 : Result<Unit> = Result<Unit>.Ok(());
            if (var955) { var1975 } else { var1975 } ;
            var1110;
            false
        } else { // block id: 1981
            var1877
        }
    } finally { // block id: 1983
        [false, true, false, true, false, true, true, true, false, false][0]
    }
}

public func func1706(param1707 : Option<Interface17>) : Result<Bool> { // block id: 1708
    match (try { // block id: 1711
            var var1729 : Range<UInt8> = ((UInt8(111)&127)..(UInt8(Int8(Int8(-19)))&127):((Int64(UInt8(164))|1)));
            if (false) { [((UInt8(16)&127)..=(UInt8(178)&127):((var277|1))), var1720, ((UInt8(110)&127)..(UInt8(205)&127):((var277|1))), var1720, ((UInt8(226)&127)..(UInt8(147)&127):(23|1)), var1729, ((UInt8(195)&127)..=(UInt8(67)&127):((92|1))), var1729, ((UInt8(98)&127)..=(UInt8(137)&127):((-97)|1)), ((UInt8(20)&127)..=(UInt8(205)&127):((-90)|1))] } else { var1745 } 
        } catch (_) { // block id: 1794
            [UInt32(66), UInt32(81), UInt32(249), UInt32(79), UInt32(68), UInt32(249), UInt32(58), UInt32(181), UInt32(27), UInt32(221)];
            var120--;
            var1745
        }) {
        case caseVar1801 => 
            [((UInt8(213)&127)..(UInt8(78)&127):((-101)|1)), ((UInt8(130)&127)..=(UInt8(109)&127):(66|1)), ((UInt8(85)&127)..=(var897&127):((var277|1))), ((UInt8(13)&127)..=(UInt8(121)&127):(55|1)), ((UInt8(121)&127)..=(UInt8(69)&127):((-28)|1)), ((UInt8(164)&127)..=(UInt8(50)&127):(113|1)), var1720, var1720, ((UInt8(22)&127)..=(UInt8(169)&127):((-117)|1)), var1720];
            var var1818 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
            var1818
        
        case _ => 
            ();
            let var1824 : Array<UInt32> = [UInt32(69), UInt32(45), UInt32(42), UInt32(39), UInt32(225), UInt32(155), UInt32(16), UInt32(40), UInt32(142), UInt32(223)];
            var1824;
            if (var907) { [(), (), (), (), (), (), (), (), (), ()] } else { var1830 } 
        
    };
    var var2049 : Class824 = Class824();
    if (((Result<(Range<Int32>,Int64, (Range<UInt64>,Interface17,Range<Int8>,Bool),Range<UInt32>,Float64)>.Ok((((Int32(89)&127)..(var229&127):((var277|1))), 83, (var2003, var1279, ((var2008&127)..(Int8(14)&127):((var277|1))), var955), ((UInt32(127)&127)..(var146&127):((var277|1))), var126)) ?? var2020)|>{ lambdaParameter1990 : (Range<Int32>,Int64, (Range<UInt64>,Interface17,Range<Int8>,Bool),Range<UInt32>,Float64) => false })) { Result<Bool>.Err(Exception("LangFuzz Inner Exception")) } else { try { // block id: 2047
        var2049;
        var790
    } finally { // block id: 2052
        Result<(Range<Int32>,Int64, (Range<UInt64>,Interface17,Range<Int8>,Bool),Range<UInt32>,Float64)>.Err(Exception("LangFuzz Inner Exception"));
        var97 += var97;
        Result<Bool>.Ok(true)
    } } 
}

public func func2060(param2061 :  (Range<UInt64>,Interface17,Range<Int8>,Bool)) : Result<Bool> { // block id: 2062
    var2008;
    func880(var610)
}

public func func2067(param2068 : Option<Interface17>) :  (Range<UInt64>,Interface17,Range<Int8>,Bool) { // block id: 2069
    let var2076 :  (Int64,Array<UInt16>,Int32,Range<UInt32>,Int32,Range<UInt16>) = (Int64(Int64(Int8(UInt8(140)))), [UInt16(155), UInt16(UInt8(26)), UInt16(UInt16(116)), UInt16(UInt16(247)), UInt16(Int16(110)), UInt16(225), UInt16(17), UInt16(68), UInt16(66), UInt16(Int16(UInt16(13)))], Int32(UInt32(228)), ((UInt32(203)&127)..=(UInt32(156)&127):(((-5)|1))), Int32(46), ((UInt16(Int16(101))&127)..=(UInt16(Int16(-65))&127):((Int64(UInt16(Int16(100)))|1))));
    var229 -= var2076[2] | var229;
    Int64(Int32(-48));
    let var2126 : Range<Int16> = ((Int16(31)&127)..=(Int16(-44)&127):((91|1)));
    var var2167 :  (UInt32,Rune,Unit,UInt32,Interface15,Int64,Bool,UInt64,UInt64) = (UInt32(Int32(-81)), 'D', (), UInt32(Int32(Int8(UInt8(172)))), Class12(optionalParam38 : Int64(UInt64(UInt64(29))), optionalParam42 : false, namedParam45 : Int32(UInt32(Int32(-1)))), Int64(Int64(UInt64(UInt32(232)))), (Float32(Float32(Float32(46.0))) is  (Int64,Interface16,Range<Int32>)), UInt64(Int8(102)), UInt64(135));
    var var2214 :  (Range<UInt64>,Interface17,Range<Int8>,Bool) = (((UInt64(UInt8(UInt8(43)))&127)..(UInt64(Int16(36))&127):((Int64(UInt32(119))|1))), Class824(), ((Int8(84)&127)..=(Int8(UInt8(23))&127):((Int64(UInt8(232))|1))), false);
    let var2292 : Int8 = Int8(-120);
    if ((try { // block id: 2121
        let var2139 : Range<UInt64> = ((UInt64(UInt16(235))&127)..=(UInt64(Int32(-54))&127):(((-16)|1)));
        var var2147 :  (Range<Int16>,Int8,UInt16,Unit,Range<UInt64>) = (((Int16(59)&127)..=(Int16(Int8(Int8(-67)))&127):(((-34)|1))), Int8(-51), UInt16(152), (), ((UInt64(223)&127)..(UInt64(174)&127):((-77)|1)));
        if (var1877) { (var2126, var2132, var2135, (), var2139) } else { var2147 } ;
        if (var955) { Result<Bool>.Err(Exception("LangFuzz Inner Exception")) } else { var790 } 
    } finally { // block id: 2163
        var790
    } ?? match (var2167) {
        case _ => 
            var1877
        
    })) { var1125 } else { (if (try { // block id: 2202
        var var2204 : Aggregate1084<Array<Range<UInt8>>> = Aggregate1084<Array<Range<UInt8>>>();
        var2204;
        var602 <= UInt8(194)
    } finally { // block id: 2209
        true
    }) { (if (false) { var2214 } else { var1125 } ) } else { match {
        case false => 
        var var2238 : UInt64 = UInt64(19);
        var2238++;
        ();
        let var2243 : Bool = (UInt16(UInt16(Int16(UInt16(137)))) is Float32);
        if (var2243) { (((UInt64(130)&127)..(var120&127):((var277|1))), var1141, ((Int8(21)&127)..(Int8(21)&127):(109|1)), true) } else { var1125 } 
        case var1877 => 
        var379;
        (((var2264&127)..=(var2264&127):((var2268|1))), var1141, ((Int8(-54)&127)..=(Int8(-105)&127):((-65)|1)), true)
        case _ => 
        Float32(-7.0) + Float32(-32.0);
        if (false) { (((UInt64(88)&127)..=(UInt64(172)&127):(96|1)), var1141, ((Int8(-60)&127)..(Int8(-29)&127):(101|1)), var1877) } else { (((UInt64(170)&127)..(UInt64(87)&127):(1|1)), var1141, ((var2008&127)..=(var2292&127):((var2268|1))), var1877) } 
    } } ) } 
}


func func1537(param1538 : Unit) :  (Int64,Interface16,Range<Int32>) { // block id: 1539
    let var1704 : (Result<Bool>) ->  (Range<UInt64>,Interface17,Range<Int8>,Bool) = func1699;
    if ((Class12(namedParam254 : Int16(10)) is  (UInt32,Rune,Unit,UInt32,Interface15,Int64,Bool,UInt64,UInt64))) { (((UInt64(84)&127)..=(UInt64(166)&127):((-7)|1)) as Interface17) } else { (var2309 ?? Option<Interface17>.Some(Class12(namedParam45 : Int32(104)))) } |>((func2067~>func2060)~>var1704);
    let var2315 :  (Int64,Interface16,Range<Int32>) = ((-48), Class824(), ((Int32(99)&127)..(Int32(95)&127):(10|1)));
    var2315
}

public func func1529(param1530 : (Range<Int64>) -> Result<Bool>) : Unit { // block id: 1533
    var var2321 : (Unit) ->  (Int64,Interface16,Range<Int32>) = func1537;
    ((Result<Unit>.Err(Exception("LangFuzz Inner Exception")) ?? ())|>var2321)[1];
    var loopTimeVar2392 : Int64 = 0;
    (match (if (var907) { var1037 } else { Result<Result<Unit>>.Ok(Result<Unit>.Err(Exception("LangFuzz Inner Exception"))) } ) {
        case _ : Result<Unit> => 
            let var2338 : Interface16 = Class12(optionalParam35 : Int8(UInt8(53)), optionalParam42 : ([("""
wt/|V
Uftx=
""" is Int16), (Aggregate1084<Array<Range<UInt8>>>() is (Range<Int32>, Int8) -> Enum55), false, (((Int32(-109)&127)..=(Int32(-22)&127):((-83)|1)) is Array<Interface17>), true, (((Int16(3)&127)..(Int16(-120)&127):(112|1)) is Result<Unit>), false, false, ([UInt32(33), UInt32(1), UInt32(61), UInt32(178), UInt32(61), UInt32(158), UInt32(223), UInt32(173), UInt32(66), UInt32(207)] is  (String,Range<Int8>,Bool,Array<Unit>,UInt16,String,Int32)), (Option<Interface17>.None is Array<Bool>)] is (Range<Int32>,Int64, (Range<UInt64>,Interface17,Range<Int8>,Bool),Range<UInt32>,Float64)), namedParam45 : Int32(-40));
            var2338;
            Result<Unit>.Err(Exception("LangFuzz Inner Exception"))
        
        case _ : Array<Range<UInt8>> => 
            Result<Unit>.Err(Exception("LangFuzz Inner Exception"))
        
        case caseVar2378 : Array<Unit> => 
            var2381
        
        case _ => 
            ();
            Result<Unit>.Ok(var379)
        
    } ?? do {
        loopTimeVar2392++;

    } while ((var907) && loopTimeVar2392 < 100 ) )
}

public func func2394(param881 : Range<Int64>) : Result<Bool> { // block id: 882
    var884;
    match (match (Result<Bool>.Ok(true)) {
            case _ => 
                var602 %= ((var897) | 1);
                var229 += var229;
                let var911 : Array<UInt32> = [UInt32(14), UInt32(1), UInt32(225), UInt32(120), UInt32(187), UInt32(225), UInt32(84), UInt32(198), UInt32(83), UInt32(87)];
                if (var907) { var911 } else { [UInt32(253), UInt32(88), UInt32(160), UInt32(189), UInt32(84), UInt32(230), UInt32(106), UInt32(89), UInt32(151), UInt32(106)] } 
            
        }[8]) {
        case 65 | 154 | 193 | 231 => 
            ();
            var126;
            Result<Bool>.Err(Exception("LangFuzz Inner Exception"))
        
        case _ => 
            ((UInt8(197)&127)..=(UInt8(43)&127):((-15)|1));
            Result<Bool>.Ok(var907)
        
    }
}



public func func1292(param1293 : Range<Int16>) : Bool { // block id: 1294
    func func1297(optionalParam1298 ! : (Int16,Float64, (UInt32,Rune,Unit,UInt32,Interface15,Int64,Bool,UInt64,UInt64),Range<Int32>,Bool,Range<Int64>) = (Int16(0), 75.0, (UInt32(228), 'u', (), UInt32(24), Class12(), Int64(Int8(92)), false, UInt64(UInt64(UInt16(166))), UInt64(Int8(Int8(50)))), ((Int32(Int16(UInt8(205)))&127)..(Int32(UInt8(223))&127):((Int64(Int32(UInt32(122)))|1))), true, (((-115)&127)..=(Int64(UInt32(115))&127):((Int64((-64))|1)))), namedParam1333 ! : (Int16,Float64, (UInt32,Rune,Unit,UInt32,Interface15,Int64,Bool,UInt64,UInt64),Range<Int32>,Bool,Range<Int64>)) : Bool { // block id: 1334
        var var1346 : Result<Unit> = Result<Unit>.Ok(());
        match (if (true) { (Option<Result<Result<Unit>>>.Some(Result<Result<Unit>>.Ok(var1346)) ?? var1037) } else { (var610, [((UInt8(200)&127)..(UInt8(96)&127):((-78)|1)), ((UInt8(209)&127)..=(UInt8(180)&127):(123|1)), ((UInt8(199)&127)..=(UInt8(29)&127):(42|1)), ((UInt8(2)&127)..=(UInt8(175)&127):(122|1)), ((UInt8(29)&127)..=(UInt8(190)&127):(95|1)), ((UInt8(34)&127)..=(UInt8(237)&127):(85|1)), ((UInt8(149)&127)..=(UInt8(191)&127):(59|1)), ((UInt8(31)&127)..(UInt8(186)&127):((-9)|1)), ((UInt8(69)&127)..(UInt8(228)&127):((-62)|1)), ((UInt8(144)&127)..(UInt8(80)&127):((-60)|1))], UInt8(4), Result<Result<Unit>>.Err(Exception("LangFuzz Inner Exception")), (), [(), (), (), (), (), (), (), (), (), ()], ((Int32(26)&127)..(Int32(-2)&127):(115|1)))[3] } ) {
            case caseVar1363 : Range<Int32> => 
                var955
            
            case caseVar1368 : Option<Interface17> => 
                var var1380 : UInt32 = UInt32(95);
                let var1383 : UInt32 = UInt32(68);
                [UInt32(228), UInt32(146), UInt32(151), var146, var146, UInt32(176), var146, UInt32(243), var1380, var1383];
                var907
            
            case caseVar1388 :  (UInt32,Rune,Unit,UInt32,Interface15,Int64,Bool,UInt64,UInt64) =>
                true
            
            case _ => 
                var955
            
            case _ => 
                Class12(optionalParam38 : var277, namedParam45 : var229);
                if (var955) { var1346 } else { Result<Unit>.Ok(var364) } ;
                Int16(-38) <= Int16(-22)
            
        }
    }
;
    var var1496 : Unit = ();
    var var2397 : (Range<Int64>) -> Result<Bool> = func2394;
    let var2437 : UInt32 = UInt32(Int8(-66));
    if (func1297(namedParam1333 : if (var955) { // block id: 1410
        var884;
        ();
        let var1467 :  (UInt32,Rune,Unit,UInt32,Interface15,Int64,Bool,UInt64,UInt64) = (UInt32(Int16(117)), 'Z', (), UInt32(Int8(75)), Class12(), Int64(Int32(79)), (Class824() is Range<Int8>), UInt64(Int64(Int8(Int8(-35)))), UInt64(Int8(Int8(Int8(78)))));
        if (true) { var1416 } else { (Int16(119), 2.0, var1467, ((Int32(65)&127)..(Int32(123)&127):(7|1)), var907, ((var277&127)..((-31)&127):((var277|1)))) } 
    } else { // block id: 1494
        var1496;
        var var1500 : Int16 = Int16(Int16(UInt16(117)));
        let var1506 :  (UInt32,Rune,Unit,UInt32,Interface15,Int64,Bool,UInt64,UInt64) = (UInt32(153), '7', (), UInt32(Int16(Int16(UInt8(66)))), Class12(), (-95), (Result<Bool>.Err(Exception("LangFuzz Inner Exception")) is (Int64, Range<Int64>, Result<Unit>) -> Interface17), UInt64(138), UInt64(Int16(Int16(Int16(-84)))));
        (var1500, 109.0, var1506, ((Int32(112)&127)..(Int32(115)&127):(25|1)), var907, var610)
    })) { // block id: 1527
        var2397|>func1529;
        (Option<Unit>.Some(()) ?? ());
        var loopTimeVar2419 : Range<UInt64> = ((UInt64(149)&127)..(UInt64(241)&127):((Int64(Int64(UInt16(66)))|1)));
        for (i in loopTimeVar2419 where true) {
            (((UInt64(83)&127)..(UInt64(98)&127):(45|1)), Class824(), ((var2008&127)..=(var2132&127):((19|1))), false);
            var1496
        }
    } else if ((match ((Int16(50), (-89.0), (var2437, 'I', var884, UInt32(116), var333, var277, true, UInt64(161), var2264), ((Int32(53)&127)..(var229&127):((var2268|1))), false, var2454)) {
        case ( 0,-16.0,(_,'3',caseVar2465 : (Range<Int64>,Array<Range<UInt8>>,UInt8,Result<Result<Unit>>,Unit,Array<Unit>,Range<Int32>),_ : Range<Int16>,_,-29 ,caseVar2466 : Result<Option<Interface17>>,70,_ : Rune),_,_ : Range<UInt64>,_ : Result<Result<Bool>>) => 
            var2020;
            ((Int16(-11)&127)..=(Int16(-33)&127):((76|1)));
            let var2478 : Option<Bool> = (([((UInt8(5)&127)..=(UInt8(239)&127):((-8)|1)), ((UInt8(87)&127)..(UInt8(23)&127):(18|1)), ((UInt8(251)&127)..=(UInt8(123)&127):(60|1)), ((UInt8(21)&127)..(UInt8(84)&127):((-62)|1)), ((UInt8(55)&127)..=(UInt8(240)&127):((-75)|1)), ((UInt8(131)&127)..(UInt8(206)&127):(38|1)), ((UInt8(30)&127)..(UInt8(6)&127):(63|1)), ((UInt8(174)&127)..(UInt8(158)&127):((-42)|1)), ((UInt8(120)&127)..=(UInt8(202)&127):(43|1)), ((UInt8(54)&127)..(UInt8(100)&127):((-98)|1))] as Bool) as Bool);
            if (true) { Option<Bool>.Some(true) } else { var2478 } 
        
        case _ => 
            if (var955) { var2487 } else { var2487 } 
        
    } ?? (var229 is UInt16))) { // block id: 2493
        var1021;
        var loopTimeVar2498 : Range<UInt64> = ((UInt64(UInt8(Int8(58)))&127)..(UInt64(Int8(UInt8(237)))&127):((95|1)));
        for (i in loopTimeVar2498 where true) {

        }
    };
    var2020;
    var var2520 : Int64 = Int64(Int32(7));
    var var2544 : Int64 = 28;
    var var2583 : Aggregate1084<Array<Range<UInt8>>> = Aggregate1084<Array<Range<UInt8>>>(Int32(Int32(UInt16(42))), namedParam2587 : ((Int16(-61), Float64(83.0), (UInt32(146), 'z', (), UInt32(57), Class12(namedParam254 : Int16(-52)), 18, true, UInt64(83), UInt64(46)), ((Int32(-102)&127)..(Int32(24)&127):(((-19)|1))), (((UInt32(238)&127)..=(UInt32(142)&127):((84|1))) is ((Range<Int32>,Int64, (Range<UInt64>,Interface17,Range<Int8>,Bool),Range<UInt32>,Float64)) -> Bool), (((-46)&127)..=(75&127):(104|1))) is Array<Enum55>), namedParam2588 : Float32(-10.0));
    if (if (try { // block id: 2511
        true
    } catch (_) { // block id: 2513
        false
    }) { // block id: 2515
        var2264;
        false
    } else { // block id: 2518
        var2520;
        var1496;
        var907
    }) { // block id: 2525
        var610;
        false || var955
    } else if ((var790 ?? (var1942 is Rune))) { // block id: 2534
        var var2568 : Int64 = 121;
        let var2571 : Range<Int64> = (((-12)&127)..(64&127):(23|1));
        try { // block id: 2536
            var364;
            if (var955) { var1279 } else { Class12() } ;
            ((var2544&127)..((-16)&127):(((-71)|1)))
        } catch (_) { // block id: 2548
            ();
            if (false) { ((59&127)..=(var2268&127):((var2268|1))) } else { var2454 } 
        } finally { // block id: 2557
            var379;
            var120 **= (var120 & 3);
            if (var955) { ((107&127)..=((-17)&127):((var2568|1))) } else { var2571 } 
        };
        match {
            case false => 
            true
            case _ => 
            var2268++;
            var907
        }
    } else { // block id: 2581
        var2583;
        if (true) { // block id: 2635
            [false, true, false, false, false, false, false, false, true, false];
            var126;
            var2135 < var2135
        } else if (false) { // block id: 2642
            var120 >= var2264
        } else { // block id: 2646
            var1877
        }
    }
}

func func1287(param1288 : Range<UInt16>) : Bool { // block id: 1289
    let var2656 :  (String,Range<Int8>,Bool,Array<Unit>,UInt16,String,Int32) = (###"6>(FnG3Z7<"###, ((Int8(-127)&127)..=(Int8(Int8(Int8(72)))&127):(((-104)|1))), false, [(), (), (), (), (), (), (), (), (), ()], UInt16(UInt16(Int16(UInt8(43)))), ###"e1d`f1}t0="###, Int32(Int8(Int8(UInt8(195)))));
    if ((((Int16(40)&127)..=(Int16(40)&127):((-88)|1))|>func1292)) { // block id: 2650
        var364;
        var loopTimeVar2677 : Int64 = 0;
        while ((true) && loopTimeVar2677 < 100 ) {
            loopTimeVar2677++;
            var2656
        }
    } else if (var1877) { // block id: 2679
        var379
    };
    match (match (if (false) { [((UInt8(238)&127)..(UInt8(147)&127):((-56)|1)), ((UInt8(133)&127)..=(UInt8(225)&127):((-38)|1)), ((UInt8(120)&127)..=(UInt8(244)&127):(118|1)), ((UInt8(78)&127)..=(UInt8(134)&127):((-32)|1)), ((UInt8(72)&127)..(UInt8(113)&127):(102|1)), ((UInt8(75)&127)..=(UInt8(32)&127):(49|1)), ((UInt8(155)&127)..=(UInt8(205)&127):((-9)|1)), ((UInt8(252)&127)..(UInt8(246)&127):((-6)|1)), ((UInt8(200)&127)..(UInt8(84)&127):(120|1)), ((UInt8(19)&127)..=(UInt8(72)&127):((-38)|1))] } else { [((UInt8(211)&127)..=(UInt8(6)&127):(53|1)), ((UInt8(18)&127)..(UInt8(69)&127):(22|1)), ((UInt8(102)&127)..(UInt8(158)&127):((-66)|1)), ((UInt8(106)&127)..(UInt8(101)&127):((-114)|1)), ((UInt8(121)&127)..(UInt8(108)&127):(95|1)), ((UInt8(221)&127)..=(UInt8(212)&127):((-77)|1)), ((UInt8(144)&127)..(UInt8(70)&127):(91|1)), ((UInt8(81)&127)..(UInt8(233)&127):((-30)|1)), ((UInt8(61)&127)..(UInt8(174)&127):((-68)|1)), ((UInt8(169)&127)..(UInt8(186)&127):((-23)|1))] } ) {
            case _ : Bool => 
                var229 * Int32(-107);
                var2695 = UInt64(99);
                ((var146&127)..(var146&127):((var2268|1)))
            
            case _ => 
                ((Int16(73)&127)..=(var97&127):(((-98)|1)));
                ((var146&127)..(UInt32(169)&127):((43|1)))
            
            case _ => 
                ((UInt32(51)&127)..(UInt32(109)&127):(63|1))
            
        }) {
        case caseVar2719 => 
            ();
            UInt64(239) > var2264
        
        case _ => 
            var1877
        
    }
}

public func func1062(param1063 : Array<Unit>) : Array<Interface17> { // block id: 1064
    var var1073 : Range<UInt8> = ((UInt8(223)&127)..=(UInt8(232)&127):(78|1));
    var var1133 : Range<UInt32> = ((UInt32(11)&127)..(UInt32(174)&127):((-64)|1));
    var var1163 :  (Range<UInt32>,Int32,Range<Int64>,Range<UInt64>,Int16,Int8) = (((UInt32(179)&127)..=(UInt32(Int8(Int8(-45)))&127):((78|1))), Int32(UInt32(101)), (((-91)&127)..((-113)&127):(((-101)|1))), ((UInt64(UInt16(171))&127)..=(UInt64(Int16(Int8(11)))&127):((99|1))), Int16(UInt16(45)), Int8(Int8(-42)));
    let var1191 : Int8 = Int8(Int8(Int8(5)));
    var var2729 : (Range<UInt16>) -> Bool = func1287;
    var var2733 : Interface17 = Class12(optionalParam35 : Int8(UInt8(Int8(Int8(11)))), namedParam45 : Int32(-62));
    [((var1073 as Interface17) ?? func1076(var277, (((-71)&127)..((-88)&127):(117|1)), namedParam1079 : Result<Unit>.Ok(var364))), (var1110, var277, var1125, var1133, var1021)[2][1], Class12(), match (var1141) {
        case _ => 
            ();
            Class824()
        
        case caseVar1150 => 
            Class12(namedParam254 : var97)
        
        case _ => 
            var1141
        
        case caseVar1160 : Int16 => 
            var1163;
            var364;
            Class12(optionalParam35 : var1191, optionalParam38 : var277, namedParam45 : var229)
        
        case _ => 
            var277 <<= (((-69)) & 7);
            if (true) { Class824() } else { Class12(optionalParam35 : Int8(-67), namedParam45 : var229) } 
        
    }, try { // block id: 1209
        Class12(namedParam45 : var229)
    } catch (e: Exception) { // block id: 1212
        var1214;
        ();
        if (false) { Class12() } else { var1141 } 
    }, match (try { // block id: 1227
            ((UInt8(75)&127)..=(UInt8(13)&127):((94|1)))
        } catch (e: Exception) { // block id: 1232
            var1073
        } finally { // block id: 1234
            ((UInt8(217)&127)..=(var602&127):((56|1)))
        }) {
        case caseVar1241 => 
            var884;
            var120--;
            var1141
        
        case caseVar1249 : Result<Unit> => 
            var277--;
            var884;
            Class12(optionalParam35 : var1191, namedParam45 : Int32(56))
        
        case _ => 
            ();
            var884;
            var var1266 : Interface17 = Class12();
            if (var907) { var1141 } else { var1266 } 
        
        case _ => 
            var var1276 : Int32 = Int32(-110);
            if (true) { Class12(optionalParam38 : var277, namedParam45 : var1276) } else { var1279 } 
        
        case _ => 
            var1279
        
    }, var1141, if ((((UInt16(149)&127)..(UInt16(115)&127):((-24)|1))|>var2729)) { var2733 } else { var1141 } , (var1214 ?? (Option<Interface17>.None ?? Class12(namedParam45 : Int32(123)))), Class824()]
}

func func1049(param1050 : Result<Result<Bool>>) : Interface17 { // block id: 1051
    func func1055(namedParam1056 ! : Range<Int16>, optionalParam1057 ! : Result<Bool> = Result<Bool>.Ok(false)) : Array<Interface17> { // block id: 1060
        [(), (), (), (), (), (), (), (), (), ()]|>func1062
    }
;
    let var2751 : Range<Int16> = ((Int16(-14)&127)..(Int16(56)&127):(((-11)|1)));
    let var2762 : Unit = ();
    var var2789 : UInt64 = UInt64(139);
    func1055(namedParam1056 : var2751, optionalParam1057 : match (Result<Bool>.Err(Exception("LangFuzz Inner Exception"))) {
        case _ => 
            var2762;
            if (var955) { Result<Bool>.Ok(var907) } else { Result<Bool>.Ok(var1877) } 
        
        case _ : (Range<Int64>,Array<Range<UInt8>>,UInt8,Result<Result<Unit>>,Unit,Array<Unit>,Range<Int32>) => 
            var1942;
            var907 ||= var955;
            var790
        
        case caseVar2780 => 
            Result<Bool>.Ok(var1877)
        
        case _ => 
            UInt64(102) | var2789;
            'X';
            var790
        
    })[7]
}

func func976<T0, T1>(param977 : Result<Result<Bool>>) : Range<Int8> where T0 <: Result<(Range<Int32>,Int64, (Range<UInt64>,Interface17,Range<Int8>,Bool),Range<UInt32>,Float64)>, T1 <: Range<Int16> { // block id: 978
    let var1045 : Array<Range<UInt8>> = [((UInt8(29)&127)..(UInt8(191)&127):((-72)|1)), ((UInt8(246)&127)..=(UInt8(73)&127):(102|1)), ((UInt8(131)&127)..=(UInt8(156)&127):(33|1)), ((UInt8(161)&127)..(UInt8(237)&127):(19|1)), ((UInt8(235)&127)..(UInt8(76)&127):((-20)|1)), ((UInt8(138)&127)..(UInt8(207)&127):(102|1)), ((UInt8(211)&127)..=(UInt8(223)&127):((-32)|1)), ((UInt8(59)&127)..(UInt8(71)&127):(50|1)), ((UInt8(37)&127)..(UInt8(112)&127):(1|1)), ((UInt8(234)&127)..=(UInt8(153)&127):(39|1))];
    try { // block id: 980
        var120 &= var120;
        var loopTimeVar1005 : Int64 = 0;
        do {
            loopTimeVar1005++;
            if (false) { [(), (), var379, var379, (), (), (), var884, (), var364] } else { [(), (), (), (), (), (), (), (), (), ()] } ;
            var146 -= var146
        } while ((false) && loopTimeVar1005 < 100 ) ;
        try { // block id: 1007
            ();
            ((var1011&127)..=(var602&127):((var277|1)));
            ((UInt8(236)&127)..=(UInt8(235)&127):(78|1))
        } catch (_) { // block id: 1016
            [(-96.0), var126, var1021, var126, (-69.0), 31.0, var1021, var1021, (-55.0), (-42.0)];
            var364;
            ((UInt8(60)&127)..(UInt8(169)&127):((34|1)))
        }
    } finally { // block id: 1035
        var1037;
        var610|>func880;
        var1045[4]
    };
    let var2795 : (Result<Result<Bool>>) -> Interface17 = func1049;
    try { // block id: 2798
        ();
        var364;
        Result<Result<Bool>>.Err(Exception("LangFuzz Inner Exception"))
    } finally { // block id: 2802
        if (var955) { var790 } else { Result<Bool>.Err(Exception("LangFuzz Inner Exception")) } ;
        Result<Result<Bool>>.Ok(var790)
    }|>var2795;
    (match (try { // block id: 2812
            if (var1877) { var2816 } else { 'n' } ;
            var333
        } catch (e: Exception) { // block id: 2820
            var1045;
            var2135--;
            if (var1877) { var333 } else { Class12(optionalParam38 : var2268, namedParam45 : var229) } 
        }) {
        case _ => 
            var2132 / ((Int8(113)) | 1)
        
    }&127)..(if (match {
        case var955 =>
        [(), (), (), (), (), (), (), (), (), ()];
        var884;
        var955
        case _ => 
        if (var907) { (((Int16(-39)&127)..(Int16(38)&127):((-15)|1)), var2132, UInt16(82), var364, ((var120&127)..=(var2264&127):(((-108)|1)))) } else { (((Int16(-36)&127)..(Int16(-12)&127):((-121)|1)), Int8(78), var2135, (), ((UInt64(20)&127)..(var2264&127):(((-8)|1)))) } ;
        ();
        true
    }) { // block id: 2865
        Int8(-126)
    } else if ((var2487 ?? var955)) { // block id: 2870
        Result<Result<Bool>>.Err(Exception("LangFuzz Inner Exception"));
        Int8(-69)
    } else { // block id: 2873
        UInt64(173);
        Int8(0)
    }&127):(Int64(UInt8(152))|1)
}

func func972(param973 : Array<Float64>) : Bool { // block id: 974
    var var2889 : UInt16 = UInt16(UInt16(208));
    func976<Result<(Range<Int32>,Int64, (Range<UInt64>,Interface17,Range<Int8>,Bool),Range<UInt32>,Float64)>, Range<Int16>>(match ([UInt16(227), UInt16(193), var2135, var2135, var2885, var2889, UInt16(12), UInt16(199), UInt16(240), UInt16(128)]) {
        case _ => 
            var877
        
    });
    match (if (true) { ((UInt64(133)&127)..(UInt64(190)&127):(71|1)) } else { ((var2695&127)..(var120&127):((var277|1))) } ) {
        case _ : Int16 => 
            var2913 || var1877
        
        case _ => 
            var364;
            false
        
        case _ => 
            var2695 == UInt64(100)
        
        case _ => 
            var955
        
        case _ => 
            var var2943 : Bool = (Int64(UInt64(UInt64(UInt16(189)))) is (Range<Int32>, Int8) -> Enum55);
            var2943
        
    } || false
}



public func func964(param965 : (Int8) -> Option<Bool>) : Result<Result<Unit>> { // block id: 968
    var var2952 : Array<Float64> = Array<Float64>(10){ i => (-18.0) };
    let var2997 : Range<UInt32> = ((UInt32(137)&127)..(UInt32(64)&127):((-111)|1));
    match (if ((var2952|>func972)) { Result<Bool>.Ok(true) } else { Result<Bool>.Ok(var2974) } ) {
        case caseVar2984 :  (Range<UInt32>,Int32,Range<Int64>,Range<UInt64>,Int16,Int8) =>
            ();
            var1037;
            (-58.0) * var1021
        
        case _ : Range<Int8> => 
            if (true) { var2997 } else { ((var146&127)..=(UInt32(67)&127):(((-104)|1))) } ;
            16.0 / Float64((Int32(var126)) | 1)
        
        case caseVar3008 : Float64 => 
            var126
        
        case _ => 
            115.0
        
    };
    let var3026 : ?Option< (UInt32,Rune,Unit,UInt32,Interface15,Int64,Bool,UInt64,UInt64)> = Option<Option< (UInt32,Rune,Unit,UInt32,Interface15,Int64,Bool,UInt64,UInt64)>>.Some((Int8(UInt8(Int8(-82))) as  (UInt32,Rune,Unit,UInt32,Interface15,Int64,Bool,UInt64,UInt64)));
    match (((var3026 ?? Option< (UInt32,Rune,Unit,UInt32,Interface15,Int64,Bool,UInt64,UInt64)>.None) ?? try { // block id: 3034
            ();
            (var146, var3039, var884, UInt32(243), Class12(namedParam254 : var97), var2268, false, UInt64(20), UInt64(51))
        } finally { // block id: 3049
            (UInt32(208), 'e', var364, UInt32(105), Class12(namedParam254 : var97), var277, var1877, var120, UInt64(28))
        })) {
        case (_,_ : Option<Result<Result<Unit>>>,_ : Array<Unit>,_ : Result<Unit>,caseVar3063 :  (UInt32,Rune,Unit,UInt32,Interface15,Int64,Bool,UInt64,UInt64),_ : Array<Interface17>,false, 104,54) =>
            [var379, (), var364, (), var884, var3072, (), var884, (), ()]
        
        case (caseVar3080,caseVar3081,_,_,_,-30, true,caseVar3082 : Range<Int64>,18) => 
            ();
            if (var955) { var1830 } else { var1830 } 
        
        case caseVar3091 => 
            var884;
            [var3096, var3072, var3072, (), (), (), var379, (), var3072, ()]
        
        case _ => 
            [(), (), (), (), (), (), (), (), (), ()]
        
    };
    match (try { // block id: 3112
            var1877;
            ((var897&127)..=(var1011&127):((var2268|1)))
        } finally { // block id: 3118
            var364;
            Class824();
            ((var602&127)..(UInt8(174)&127):((46|1)))
        }) {
        case _ => 
            var1037
        
        case _ => 
            if (var2974) { 'b' } else { var3039 } ;
            Class12(namedParam254 : var97);
            Result<Result<Unit>>.Ok(Result<Unit>.Ok(()))
        
    }
}

public func func3141(param655 : Int8) : Option<Bool> { // block id: 656
    (match (var58) {
        case _ => 
            if (false) { var669 } else { Option<Option<Bool>>.None } 
        
    } ?? Option<Bool>.None)
}




func func866(param867 : (Int8) -> Option<Bool>) :  (Range<UInt32>,Int32,Range<Int64>,Range<UInt64>,Int16,Int8) { // block id: 870
    (var877 ?? (match (Result<Bool>.Ok(true)) {
        case _ => 
            ((58&127)..(var277&127):((var277|1)))
        
    }|>func880));
    func func937(optionalParam938 ! : (Range<Int64>) -> Result<Bool> = { lambdaParameter941 : Range<Int64> => Result<Bool>.Err(Exception("LangFuzz Inner Exception")) }) : Result<Unit> { // block id: 946
        (if (if (var955) { // block id: 957
            [UInt32(13), UInt32(102), UInt32(37), UInt32(195), UInt32(24), UInt32(191), UInt32(223), UInt32(12), UInt32(226), UInt32(29)];
            false
        } else { // block id: 960
            true
        }) { Result<Result<Unit>>.Err(Exception("LangFuzz Inner Exception")) } else { (func3141|>func964) }  ?? try { // block id: 3145
            (var2003, var1279, ((Int8(81)&127)..(Int8(-67)&127):((-60)|1)), var2913);
            Result<Array<Float64>>.Err(Exception("LangFuzz Inner Exception"));
            if (true) { Result<Unit>.Err(Exception("LangFuzz Inner Exception")) } else { Result<Unit>.Err(Exception("LangFuzz Inner Exception")) } 
        } finally { // block id: 3156
            var602 |= var897;
            var1125;
            if (var2974) { Result<Unit>.Err(Exception("LangFuzz Inner Exception")) } else { Result<Unit>.Err(Exception("LangFuzz Inner Exception")) } 
        })
    }
;
    func937();
    let var3198 : ?? (Range<UInt32>,Int32,Range<Int64>,Range<UInt64>,Int16,Int8) = Option<Option< (Range<UInt32>,Int32,Range<Int64>,Range<UInt64>,Int16,Int8)>>.Some(Option< (Range<UInt32>,Int32,Range<Int64>,Range<UInt64>,Int16,Int8)>.None);
    var var3239 : Float64 = Float64((-87.0));
    var var3247 : ? (Range<UInt32>,Int32,Range<Int64>,Range<UInt64>,Int16,Int8) = Option< (Range<UInt32>,Int32,Range<Int64>,Range<UInt64>,Int16,Int8)>.Some((((UInt32(Int8(74))&127)..(UInt32(35)&127):((Int64(UInt16(94))|1))), Int32(91), (((-124)&127)..=(Int64(UInt32(24))&127):((50|1))), ((UInt64(38)&127)..(UInt64(215)&127):(82|1)), Int16(87), Int8(16)));
    ((match ([UInt32(62), UInt32(1), UInt32(69), UInt32(34), UInt32(122), UInt32(73), UInt32(177), UInt32(147), UInt32(78), UInt32(54)]) {
        case caseVar3179 => 
            let var3182 : ?? (Range<UInt32>,Int32,Range<Int64>,Range<UInt64>,Int16,Int8) = Option<Option< (Range<UInt32>,Int32,Range<Int64>,Range<UInt64>,Int16,Int8)>>.None;
            var3182
        
        case caseVar3186 => 
            if (var955) { 'K' } else { '5' } ;
            var var3194 : Bool = true;
            var3194 ||= var907;
            var3198
        
        case caseVar3203 : UInt8 => 
            if (false) { Option<Option< (Range<UInt32>,Int32,Range<Int64>,Range<UInt64>,Int16,Int8)>>.Some(Option< (Range<UInt32>,Int32,Range<Int64>,Range<UInt64>,Int16,Int8)>.Some((var3211, var229, ((var277&127)..=(var2268&127):(((-128)|1))), ((UInt64(79)&127)..(var2264&127):((var2268|1))), var97, var3224))) } else { var3198 }
        
        case _ => 
            ();
            var1942 -= var1942;
            var3198
        
    } ?? try { // block id: 3236
        var3239 -= var3239;
        var1214;
        let var3267 :  (Range<UInt32>,Int32,Range<Int64>,Range<UInt64>,Int16,Int8) = (((UInt32(226)&127)..(UInt32(40)&127):(123|1)), Int32(98), (((-99)&127)..(90&127):((-20)|1)), ((UInt64(40)&127)..(UInt64(78)&127):((-65)|1)), Int16(Int8(Int8(68))), Int8(59));
        if (true) { var3247 } else { Option< (Range<UInt32>,Int32,Range<Int64>,Range<UInt64>,Int16,Int8)>.Some(var3267) }
    } finally { // block id: 3277
        if (var2913) { Option< (Range<UInt32>,Int32,Range<Int64>,Range<UInt64>,Int16,Int8)>.None } else { Option< (Range<UInt32>,Int32,Range<Int64>,Range<UInt64>,Int16,Int8)>.Some((((var146&127)..=(var146&127):((var277|1))), Int32(-61), (((-5)&127)..((-49)&127):((var2268|1))), ((UInt64(188)&127)..=(UInt64(245)&127):((-98)|1)), Int16(55), var2008)) }
    }) ?? (((UInt32(163)&127)..(UInt32(206)&127):(101|1)), Int32(Int32(45)), try { // block id: 3300
        ();
        if (false) { (((-117)&127)..(var2268&127):((16|1))) } else { var610 } 
    } catch (_) { // block id: 3309
        if (false) { (((-55)&127)..(108&127):((-33)|1)) } else { ((42&127)..((-36)&127):((-89)|1)) } 
    }, (Result<Range<UInt64>>.Err(Exception("LangFuzz Inner Exception")) ?? var2003), var97, var2132))
}

public func func3324(param655 : Int8) : Option<Bool> { // block id: 656
    (match (var58) {
        case _ => 
            if (false) { var669 } else { Option<Option<Bool>>.None } 
        
    } ?? Option<Bool>.None)
}

func func805(param806 : Range<UInt64>) : Range<UInt16> { // block id: 807
    func func813(namedParam814 ! : Range<UInt8>, optionalParam815 ! : UInt8 = UInt8(Int8(UInt8(10)))) : Unit { // block id: 819

    }
;
    let var821 : Range<UInt8> = ((UInt8(190)&127)..(UInt8(173)&127):((-79)|1));
    func func809(namedParam810 ! : Range<Int64>) : Unit { // block id: 811
        let var828 : Class824 = Class824();
        func813(namedParam814 : var821, optionalParam815 : var828.var831)
    }
;
    func func836(param837 : Array<Unit>, namedParam838 ! : Class824, optionalParam839 ! :  (UInt32,Rune,Unit,UInt32,Interface15,Int64,Bool,UInt64,UInt64) = (UInt32(Int32(UInt32(158))), 'j', (), UInt32(Int16(-111)), Class12(), Int64(UInt64(UInt32(29))), (((UInt16(151)&127)..=(UInt16(85)&127):((-112)|1)) is Array<Enum55>), UInt64(27), UInt64(113))) :  (Range<UInt32>,Int32,Range<Int64>,Range<UInt64>,Int16,Int8) { // block id: 857
        var var860 : UInt16 = UInt16(Int8(UInt8(62)));
        var860 += var860;
        func3324|>func866
    }
;
    func809(namedParam810 : func836(var1830, namedParam838 : Class824(), optionalParam839 : (UInt32(120), 'F', var884, UInt32(78), Class12(namedParam254 : Int16(38)), (-113), var2913, var120, var120))[2]);
    var var3381 : Class824 = Class824();
    (var877 ?? try { // block id: 3344
        ();
        (((101&127)..(var277&127):((var2268|1))), var1745, var1011, Result<Result<Unit>>.Err(Exception("LangFuzz Inner Exception")), var884, [var364, (), (), (), var3072, (), var3072, (), (), var3366], ((Int32(-115)&127)..=(Int32(113)&127):((-113)|1)));
        if (var1877) { Result<Bool>.Ok(var907) } else { var790 } 
    } catch (_) { // block id: 3374
        var2135 -= UInt16(115);
        if (var1877) { var3381 } else { var3381 } ;
        var790
    });
    let var3453 : UInt16 = UInt16(Int16(Int8(UInt8(UInt8(193)))));
    try { // block id: 3386
        var var3396 : Float64 = 103.0;
        var loopTimeVar3400 : Int64 = 0;
        do {
            loopTimeVar3400++;
            ((UInt8(81)&127)..=(var602&127):(((-6)|1)));
            var3396 -= (-29.0)
        } while ((true) && loopTimeVar3400 < 100 ) ;
        ((UInt16(199)&127)..(UInt16(27)&127):(88|1))
    } catch (_) { // block id: 3402
        try { // block id: 3404
            UInt16(51);
            Option< (Range<UInt32>,Int32,Range<Int64>,Range<UInt64>,Int16,Int8)>.None;
            ((UInt16(85)&127)..(UInt16(112)&127):((-26)|1))
        } finally { // block id: 3408
            var2974 ||= true;
            var var3415 : Range<UInt16> = ((UInt16(204)&127)..(UInt16(251)&127):(22|1));
            if (true) { var3415 } else { ((UInt16(195)&127)..(UInt16(253)&127):((-44)|1)) } 
        }
    } finally { // block id: 3418
        let var3426 : Result<Option<Interface17>> = Result<Option<Interface17>>.Err(Exception("LangFuzz Inner Exception"));
        try { // block id: 3420
            var3381;
            if (true) { Result<Option<Interface17>>.Err(Exception("LangFuzz Inner Exception")) } else { var3426 } ;
            var2695
        } catch (_) { // block id: 3429
            var97;
            UInt64(148) / ((UInt64(28)) | 1)
        } finally { // block id: 3434
            var2695
        };
        ();
        match (var3439) {
            case caseVar3447 => 
                var379;
                ((UInt16(54)&127)..=(var3453&127):((var2268|1)))
            
            case _ => 
                ((UInt16(132)&127)..=(UInt16(188)&127):((-39)|1))
            
        }
    }
}


public func func793(optionalParam794 ! : (Int8) -> Option<Bool> = { lambdaParameter797 : Int8 => ([(-29.0), 35.0, 67.0, 120.0, (-117.0), 105.0, 47.0, 94.0, (-79.0), (-65.0)] as Bool) }) : Bool { // block id: 803
    let var3464 : (Range<UInt64>) -> Range<UInt16> = func805;
    try { // block id: 3467
        if (false) { ((53&127)..(var277&127):((var2268|1))) } else { (((-29)&127)..((-51)&127):((11|1))) } ;
        var2003
    } catch (_) { // block id: 3479
        var2003
    } finally { // block id: 3481
        var3483;
        var379;
        var var3488 : Bool = true;
        if (var3488) { var2003 } else { var2003 } 
    }|>var3464;
    if (var2913) { try { // block id: 3495
        Class824()
    } catch (_) { // block id: 3497
        var2003;
        (-41);
        let var3501 : Interface16 = Class12(namedParam254 : Int16(90));
        var3501
    } } else { (try { // block id: 3510
        Result<Interface16>.Err(Exception("LangFuzz Inner Exception"))
    } finally { // block id: 3512
        Result<Interface16>.Ok(Class12(optionalParam38 : 108, namedParam45 : Int32(-71)))
    } ?? if (false) { var3520 } else { Class12(namedParam254 : var97) } ) } ;
    var955
}


public func func780(param781 : (Int16,Float64, (UInt32,Rune,Unit,UInt32,Interface15,Int64,Bool,UInt64,UInt64),Range<Int32>,Bool,Range<Int64>)) : Unit { // block id: 782
    var var3526 : (Int8) -> Option<Bool> = func654;
    var loopTimeVar3530 : Int64 = 0;
    do {
        loopTimeVar3530++;

    } while (((var790 ?? func793(optionalParam794 : var3526))) && loopTimeVar3530 < 100 ) ;
    var var3551 : Result<Unit> = Result<Unit>.Ok(());
    var loopTimeVar3566 : Range<UInt64> = ((UInt64(UInt32(239))&127)..=(UInt64(116)&127):((Int64(UInt32(UInt8(124)))|1)));
    (if ((var897 < var602)) { try { // block id: 3541
        Float32(65.0);
        if (false) { var3546 } else { var3546 } 
    } catch (_) { // block id: 3549
        var3551
    } } else { (if (true) { var3551 } else { var3546 } ) }  ?? for (i in loopTimeVar3566 where true) {
        if (var907) { var877 } else { var877 } ;
        var3366
    })
}


public func func776(param777 : Unit) : Enum55 { // block id: 778
    var var3575 : ((Int16,Float64, (UInt32,Rune,Unit,UInt32,Interface15,Int64,Bool,UInt64,UInt64),Range<Int32>,Bool,Range<Int64>)) -> Unit = func780;
    var1416|>var3575;
    try { // block id: 3579
        var58
    } finally { // block id: 3581
        match (var3584) {
            case caseVar3588 => 
                Result<Result<Bool>>.Ok(Result<Bool>.Ok(var907));
                [var2885, UInt16(239), var624, UInt16(80), var2135, var624, var2885, var624, var2885, UInt16(209)];
                var229
            
            case caseVar3607 : Option<Interface17> => 
                ((UInt64(226)&127)..(UInt64(181)&127):(83|1));
                var229
            
            case caseVar3613 => 
                var229 & Int32(-60)
            
            case _ => 
                Result<(Range<Int32>,Int64, (Range<UInt64>,Interface17,Range<Int8>,Bool),Range<UInt32>,Float64)>.Err(Exception("LangFuzz Inner Exception"));
                var229
            
            case _ => 
                (-105) >> ((var277) & 7);
                if (var2913) { var1671 } else { Result<Array<Float64>>.Err(Exception("LangFuzz Inner Exception")) } ;
                var229 / ((Int32(-105)) | 1)
            
        };
        (var3641 ?? Enum55.defaultValue)
    }
}



func func443(param444 : Class12) : Enum55 { // block id: 445
    var var449 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    var449[9];
    if (match (Result<Unit>.Ok(())) {
        case caseVar459 => 
            var364;
            false
        
        case caseVar465 : UInt64 => 
            if (var469) { Result<Unit>.Ok(var364) } else { Result<Unit>.Ok(()) } ;
            var364;
            true
        
        case _ : UInt32 => 
            var469 && var469
        
        case _ => 
            ((Int32(-42)&127)..=(Int32(18)&127):((-65)|1));
            !false
        
    }) { (if (var469) { var449 } else { [(), (), (), (), (), (), (), (), (), ()] } ) } else { [(), var379, var379, var497, var379, var364, (), (), (), var497] } [4];
    var var566 :  (Range<UInt32>,Range<UInt32>,Enum55,Bool,Range<Int32>,UInt8) = (((UInt32(252)&127)..=(UInt32(Int16(UInt8(117)))&127):((Int64(Int8(UInt8(11)))|1))), ((UInt32(Int32(UInt32(12)))&127)..(UInt32(174)&127):((25|1))), Enum55.defaultValue, false, ((Int32(116)&127)..=(Int32(0)&127):(43|1)), UInt8(Int8(38)));
    let var674 : (Int8) -> Option<Bool> = { lambdaParameter677 : Int8 => Option<Bool>.None };
    let var708 : Rune = 'k';
    func func589(param590 : Range<Int32>, optionalParam591 ! : Int8 = Int8(83)) : Enum55 { // block id: 593
        match (try { // block id: 598
                Class12();
                var602 -= UInt8(78);
                ((UInt16(136)&127)..=(UInt16(44)&127):(53|1))
            } finally { // block id: 606
                if (false) { var610 } else { (((-13)&127)..(118&127):((-16)|1)) } ;
                optionalParam591 | optionalParam591;
                ((var624&127)..=(UInt16(229)&127):((var277|1)))
            }) {
            case _ => 
                var97;
                var97 /= ((Int16(6)) | 1);
                [var126, 81.0, 117.0, 96.0, 8.0, var126, var126, var126, 32.0, var126]
            
        }[6];
        let var722 : Bool = (((Int64(UInt16(UInt8(79)))&127)..((-49)&127):((Int64(Int16(2))|1))) is UInt16);
        var loopTimeVar755 : Int64 = 0;
        do {
            loopTimeVar755++;
            if (var722) { // block id: 731
                (((UInt32(175)&127)..(UInt32(60)&127):((-87)|1)), ((UInt32(205)&127)..=(UInt32(136)&127):((-108)|1)), var58, var722, ((Int32(26)&127)..(Int32(-100)&127):((-85)|1)), var602);
                ();
                var602
            } else if (var469) { // block id: 742
                (-67.0) - var126;
                var497;
                var602
            } else { // block id: 748
                ();
                var229 &= Int32(-58);
                UInt8(231)
            }
        } while ((((Int8(2)|>var674) ?? if (var469) { // block id: 683
            (var686, var686, Enum55.defaultValue, var469, param590, UInt8(235));
            ();
            var469
        } else if (var469) { // block id: 701
            ();
            var469
        } else { // block id: 704
            (var64, var708, (), var64, Class12(namedParam254 : var97), 37, false, UInt64(198), UInt64(198));
            true
        })) && loopTimeVar755 < 100 ) ;
        var758[9]
    }
;
    let var3645 : (Unit) -> Enum55 = func776;
    let var3666 : Enum55 = Enum55.defaultValue;
    [[Enum55.defaultValue, var58, var58, var58, Enum55.defaultValue, Enum55.defaultValue, var58, Enum55.defaultValue, Enum55.defaultValue, Enum55.defaultValue][9], match (var469) {
        case caseVar526 => 
            var var529 : Unit = ();
            var529;
            Enum55.defaultValue
        
        case false => 
            ((UInt8(132)&127)..(UInt8(91)&127):(((-5)|1)));
            ((Int32(-96)&127)..=(Int32(-76)&127):((-30)|1));
            Enum55.defaultValue
        
        case _ => 
            Int32(17);
            var497;
            if (false) { Enum55.defaultValue } else { var58 } 
        
        case _ => 
            var277 -= 83;
            if (false) { var58 } else { Enum55.defaultValue } 
        
    }, if (var469) { var58 } else { var58 } , var566[2], func589(((Int32(-122)&127)..(Int32(109)&127):((-109)|1)), optionalParam591 : var773), (()|>var3645), try { // block id: 3649
        if (var1877) { Enum55.defaultValue } else { Enum55.defaultValue } 
    } catch (e: Exception) { // block id: 3654
        var229 /= ((var229) | 1);
        if (var1877) { Enum55.defaultValue } else { Enum55.defaultValue } 
    } finally { // block id: 3662
        if (var1877) { var3666 } else { Enum55.defaultValue } 
    }, (Result<Enum55>.Ok(var3666) ?? var3666), try { // block id: 3674
        Option<Option<Bool>>.Some(Option<Bool>.None);
        Enum55.defaultValue
    } catch (e: Exception) { // block id: 3678
        if (var907) { Enum55.defaultValue } else { Enum55.defaultValue } 
    }, if (false) { var58 } else { Enum55.defaultValue } ][1]
}


public func func190(param191 : Rune, namedParam192 ! : Interface17) : Enum55 { // block id: 193
    func1292();
    try { // block id: 3690
        UInt64(193);
        ();
        if (false) { var3584 } else { Class12() } 
    } catch (e: Exception) { // block id: 3697
        var3699;
        var2309;
        Class12()
    } finally { // block id: 3703
        var3483;
        var146 = var150;
        if (var469) { Class12(optionalParam35 : Int8(-92), namedParam45 : Int32(-112)) } else { Class12() } 
    }|>func443
}


main(): Int64 {
    try {
        func functest(){
            if (false) { [Class12(optionalParam35 : var773, optionalParam38 : var277, optionalParam42 : false, namedParam45 : Int32(-67)), Class824()] }
        }
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}


class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}


extend Enum55 {

}

extend<T0> Aggregate1084<T0> where T0 <: Array<Range<UInt8>> {

}

extend Class12 {

}

extend Class824 {

}
// ASSERT: scan sema_undeclared_type_name
// ASSERT: scan sema_undeclared_identifier
// ASSERT: scan sema_unreachable_pattern
// ASSERT: scan sema_type_incompatible
// ASSERT: scan sema_mismatched_types
// ASSERT: scan sema_no_match_constructor
// ASSERT: scan sema_inconsistency_elemType
