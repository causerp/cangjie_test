/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %overflow_wrapping %cmp_opt %f -o %output

var var_1681218643550_56 : UInt16 = UInt16(252)
public var var_1681218643550_72 : Int64 = 9
public var var_1681218643550_89 : UInt64 = UInt64(UInt16(UInt16(70)))
public let var_1681218643550_179 : Unit = ()
var var_1681218643550_189 : Int32 = Int32(Int32(Int8(Int8(UInt8(27)))))
public let var_1681218643550_283 : Int16 = Int16(-47)
var var_1681218643550_303 : Array<Range<Int16>> = [((Int16(UInt8(Int8(103)))&127)..=(Int16(-27)&127):((Int64(Int16(49))|1))), ((Int16(-36)&127)..(Int16(Int8(126))&127):((Int64(72)|1))), ((Int16(Int8(Int8(23)))&127)..(Int16(UInt16(UInt8(42)))&127):((Int64(Int32(109))|1))), ((Int16(47)&127)..(Int16(5)&127):(48|1)), ((Int16(-66)&127)..(Int16(-71)&127):((-56)|1)), ((Int16(-17)&127)..=(Int16(65)&127):(0|1)), ((Int16(22)&127)..=(Int16(-21)&127):(88|1)), ((Int16(UInt8(Int8(-64)))&127)..=(Int16(UInt16(Int16(-86)))&127):((Int64(59)|1))), ((Int16(-85)&127)..=(Int16(-43)&127):((-41)|1)), ((Int16(107)&127)..=(Int16(7)&127):((Int64(UInt32(70))|1)))]
public let var_1681218643550_357 : Float32 = Float32(125.0)
let var_1681218643550_392 : (Unit, Int32) = ((), Int32(23))
public var var_1681218643550_401 : Class_1681218643550_158<Range<Int64>> = Class_1681218643550_158<Range<Int64>>()
public var var_1681218643550_418 : UInt8 = UInt8(63)
let var_1681218643550_460 : Range<Int8> = ((Int8(51)&127)..=(Int8(-73)&127):((Int64(Int16(79))|1)))

public interface Interface_1681218643550_162<T0, T1, T2> {

}

public interface Interface_1681218643550_164<T0, T1> <: Interface_1681218643550_162<UInt16, String, Array<Option<Float32>>> {

}

public interface Interface_1681218643550_163 <: Interface_1681218643550_162<UInt16, String, Array<Option<Float32>>> & Interface_1681218643550_164<Range<UInt16>, Range<Int64>> {

}

public interface Interface_1681218643550_161 <: Interface_1681218643550_162<UInt16, String, Array<Option<Float32>>> & Interface_1681218643550_163 {

}

public open class Class_1681218643550_158<T0> <: Interface_1681218643550_161 & Interface_1681218643550_164<Range<UInt16>, Range<Int64>> & Resource {
    public init() { // block id: 160

    }
;
    let var_1681218643550_169 : Float32 = Float32(26.0);
    static mut prop var_1681218643550_377 : String { // block id: 378
        get() { // block id: 380
            UInt32(UInt8(UInt8(UInt8(78))));
            """
ocq2Y
6$nq8
""";
            var_1681218643550_469
        }

        set(Value) { // block id: 388
            var_1681218643550_469 = Value
        }

    };
    static var var_1681218643550_469 : String = "Znr${var_1681218643550_377}~8s${var_1681218643550_377}a{$PY${var_1681218643550_377}"
    public func isClosed(): Bool { return false }
    public func close(): Unit {}
}


public func func_1681218643550_347<T0>(param_1681218643550_348 : Float32) : Unit { // block id: 349

}

func func_1681218643550_273<T0, T1>(param_1681218643550_274 : Range<Int8>) : Option<Int64> where T0 <: Unit, T1 <: UInt8 { // block id: 275
    let var_1681218643550_366 : Float64 = Float64(Float32(-73.0));
    try (resource = Class_1681218643550_158<Range<Int64>>()) { // block id: 277
        var var_1681218643550_289 : Range<Int16> = ((Int16(25)&127)..(Int16(-79)&127):((-53)|1));
        [((var_1681218643550_283&127)..(var_1681218643550_283&127):(((-126)|1))), ((Int16(15)&127)..(Int16(-13)&127):((-27)|1)), var_1681218643550_289, var_1681218643550_289, ((Int16(-16)&127)..(Int16(75)&127):((-100)|1)), var_1681218643550_289, var_1681218643550_289, ((Int16(-90)&127)..=(Int16(-12)&127):((25|1))), ((Int16(-32)&127)..=(Int16(-112)&127):((-116)|1)), ((Int16(13)&127)..(Int16(21)&127):((-31)|1))][3];
        var_1681218643550_303;
        let var_1681218643550_351 : (Float32) -> Unit = { lambdaParameter_1681218643550_354 : Float32 =>  };
        var_1681218643550_357|>var_1681218643550_351
    } finally { // block id: 359
        let var_1681218643550_371 : Range<UInt8> = ((UInt8(146)&127)..(UInt8(172)&127):((-56)|1));
        try (resource = Class_1681218643550_158<Range<Int64>>()) { // block id: 361
            var_1681218643550_179
        } catch (_) { // block id: 363
            var_1681218643550_366 - (-88.0);
            var_1681218643550_371;
            var_1681218643550_179
        };
        Class_1681218643550_158<Range<Int64>>.var_1681218643550_377;
        var_1681218643550_392[0]
    };
    var var_1681218643550_406 : Bool = true;
    let var_1681218643550_430 : (UInt8, UInt64, Int64, Option<Int64>, Range<Int32>, UInt64) = (UInt8(30), UInt64(UInt64(Int32(-34))), Int64(69), Option<Int64>.Some((-66)), ((Int32(-82)&127)..=(Int32(44)&127):((Int64(Int16(-95))|1))), UInt64(153));
    let var_1681218643550_454 : UInt32 = UInt32(UInt8(216));
    if (if ((var_1681218643550_401 is Range<Int16>)) { // block id: 403
        ();
        var_1681218643550_406
    } else { // block id: 408
        UInt16(248);
        ((UInt16(192)&127)..=(UInt16(111)&127):(2|1));
        true
    }) { if (var_1681218643550_406) { (var_1681218643550_418, var_1681218643550_89, (-43), Option<Int64>.Some((-110)), ((Int32(7)&127)..(Int32(-80)&127):((var_1681218643550_72|1))), var_1681218643550_89) } else { var_1681218643550_430 } [3] } else { ((if (var_1681218643550_406) { ((UInt32(98)&127)..(UInt32(154)&127):((-17)|1)) } else { ((UInt32(91)&127)..(var_1681218643550_454&127):((56|1))) } ) as Int64) } 
}

main(): Int64 {
    try {
        let var_1681218643550_22 : Bool = (UInt64(Int16(Int16(-109))) is Int64);
        let var_1681218643550_47 : Float64 = (-3.0);
        let var_1681218643550_50 : UInt32 = UInt32(UInt8(Int8(UInt8(119))));
        let var_1681218643550_128 : Array<Option<Float32>> = [Option<Float32>.None, (((UInt8(Int8(-116))&127)..(UInt8(UInt8(100))&127):(((-103)|1))) as Float32), (Int32(Int32(Int32(58))) as Float32), Option<Float32>.None, Option<Float32>.Some(Float32(-71.0)), Option<Float32>.Some(Float32(-40.0)), (Int8(6) as Float32), (((UInt32(54)&127)..=(UInt32(74)&127):((-118)|1)) as Float32), (Int32(Int16(Int8(46))) as Float32), Option<Float32>.None];
        func func_1681218643550_7<T0>(param_1681218643550_8 : Int32, optionalParam_1681218643550_9 ! : Int16 = Int16(110), namedParam_1681218643550_11 ! : Bool) : Bool { // block id: 12
            var var_1681218643550_28 : (UInt8, UInt64, Float64, UInt32, UInt16, UInt64) = (UInt8(119), UInt64((-104)), Float64((-52.0)), UInt32(Int16(UInt16(23))), UInt16(Int8(UInt8(Int8(119)))), UInt64(171));
            let var_1681218643550_67 : Bool = ('x' is (UInt8, UInt64, Float64, UInt32, UInt16, UInt64));
            let var_1681218643550_75 : Int32 = Int32(UInt16(Int8(Int8(UInt8(32)))));
            if ((-50.0) == (-108.0)) { // block id: 19
                if (var_1681218643550_22) { var_1681218643550_28 } else { (UInt8(8), UInt64(240), var_1681218643550_47, var_1681218643550_50, var_1681218643550_56, UInt64(175)) } 
            } else if (try { // block id: 60
                ();
                var_1681218643550_56 >= var_1681218643550_56
            } catch (_) { // block id: 65
                var_1681218643550_67
            } finally { // block id: 70
                var_1681218643550_72;
                var_1681218643550_75;
                var_1681218643550_67
            }) { // block id: 82
                UInt8(19);
                if (true) { (UInt8(113), var_1681218643550_89, var_1681218643550_47, UInt32(76), UInt16(154), UInt64(140)) } else { var_1681218643550_28 } 
            } else { // block id: 98
                if (var_1681218643550_67) { (UInt8(92), var_1681218643550_89, 68.0, var_1681218643550_50, var_1681218643550_56, var_1681218643550_89) } else { var_1681218643550_28 } 
            }[4];
            var var_1681218643550_166 : Class_1681218643550_158<Range<Int64>> = Class_1681218643550_158<Range<Int64>>();
            let var_1681218643550_185 : Range<UInt8> = ((UInt8(222)&127)..(UInt8(109)&127):((-78)|1));
            match ((var_1681218643550_128[1] ?? var_1681218643550_166.var_1681218643550_169)) {
                case 102.0 => 
                    ((Int32(123)&127)..(Int32(22)&127):((-111)|1));
                    true
                
                case _ => 
                    var_1681218643550_179;
                    if (true) { ((UInt8(217)&127)..=(UInt8(106)&127):(19|1)) } else { var_1681218643550_185 } ;
                    true
                
            }
        }
;
        if (func_1681218643550_7<Float32>(var_1681218643550_189, optionalParam_1681218643550_9 : Int16(47), namedParam_1681218643550_11 : true)) { // block id: 197
            123.0
        } else if (var_1681218643550_22) { // block id: 200
            var_1681218643550_179;
            54.0
        } else { // block id: 203
            var var_1681218643550_206 : Int8 = Int8(UInt8(219));
            var_1681218643550_206 >>= ((var_1681218643550_206) & 7);
            var_1681218643550_47 / Float64((Int32(11.0)) | 1)
        };
        match (match (((Int16(-9)&127)..=(Int16(-26)&127):((var_1681218643550_72|1)))) {
            case _ : (UInt8, UInt64, Float64, UInt32, UInt16, UInt64) => 
                var_1681218643550_50;
                Option<Float32>.None
            
            case _ : Int64 => 
                Option<Float32>.None
            
            case _ : Unit => 
                let var_1681218643550_235 : Float32 = Float32(-40.0);
                let var_1681218643550_238 : ?Float32 = Option<Float32>.None;
                if (true) { Option<Float32>.Some(var_1681218643550_235) } else { var_1681218643550_238 } 
            
            case _ : Range<Int8> => 
                var var_1681218643550_244 : ?Float32 = (Class_1681218643550_158<Range<Int64>>() as Float32);
                var_1681218643550_244
            
            case _ => 
                let var_1681218643550_252 : ?Float32 = Option<Float32>.Some(Float32(5.0));
                if (var_1681218643550_22) { var_1681218643550_252 } else { var_1681218643550_252 } 
            
        }) {
            case _ : Int32 => 
                ((var_1681218643550_50&127)..(UInt32(146)&127):((var_1681218643550_72|1)));
                Class_1681218643550_158<Range<Int64>>()
            
            case _ => 
                Class_1681218643550_158<Range<Int64>>()
            
        };
        ((var_1681218643550_460|>func_1681218643550_273<Unit, UInt8>) ?? Int64(Int32(18)))
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var_1681218643550_50*var_1681218643550_50), 64)
        crccheck.updateBuffer(UInt64(var_1681218643550_56*var_1681218643550_56), 64)
        crccheck.updateBuffer(UInt64(var_1681218643550_72*var_1681218643550_72), 64)
        crccheck.updateBuffer(UInt64(var_1681218643550_89*var_1681218643550_89), 64)
        crccheck.updateBuffer(UInt64(var_1681218643550_189*var_1681218643550_189), 64)
        crccheck.updateBuffer(UInt64(var_1681218643550_283*var_1681218643550_283), 64)
        crccheck.updateBuffer(UInt64(var_1681218643550_418*var_1681218643550_418), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend<T0> Class_1681218643550_158<T0> {

}
// ASSERT: scan sema_global_var_used_before_initialization
// ASSERT: scan sema_unreachable_pattern


