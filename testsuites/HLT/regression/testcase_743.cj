/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args

@Deprecated
public const var_1742566372377_64: UInt64 = 142
@Deprecated
public let var_1742566372377_68: VArray<Unit, $2> = [(), ()]
public let var_1742566372377_86: Array<Option<(UInt64, Int32, Class_1742566372377_11, Int16, Range<UInt16>, Int16, 
    VArray<Unit, $2>)>> = [Option<(UInt64, Int32, Class_1742566372377_11, Int16, Range<UInt16>, Int16, VArray<Unit, $2>)>
    .None, Option<(UInt64, Int32, Class_1742566372377_11, Int16, Range<UInt16>, Int16, VArray<Unit, $2>)>.None,
    Option<(UInt64, Int32, Class_1742566372377_11, Int16, Range<UInt16>, Int16, VArray<Unit, $2>)>.None,
    Option<(UInt64, Int32, Class_1742566372377_11, Int16, Range<UInt16>, Int16, VArray<Unit, $2>)>.None,
    Option<(UInt64, Int32, Class_1742566372377_11, Int16, Range<UInt16>, Int16, VArray<Unit, $2>)>.None,
    ((UInt64(UInt32(186)), Int32(-68), Class_1742566372377_11(), Int16(-18), ((UInt16(UInt16(196)) & 127)..=(UInt16(UInt16(100)) &
        127) : (Int64(-12) | 1)), Int16(UInt8(26)), VArray<Unit, $2>({i => ()})) as (UInt64, Int32, 
    Class_1742566372377_11, Int16, Range<UInt16>, Int16, VArray<Unit, $2>)),
    (([UInt64(216), UInt64(197), UInt64(72), UInt64(61), UInt64(184), UInt64(194), UInt64(2), UInt64(87), UInt64(145),
    UInt64(4)] as VArray<Unit, $2>) as (UInt64, Int32, Class_1742566372377_11, Int16, Range<UInt16>, Int16, VArray<Unit, $2>)),
    Option<(UInt64, Int32, Class_1742566372377_11, Int16, Range<UInt16>, Int16, VArray<Unit, $2>)>.None,
    Option<(UInt64, Int32, Class_1742566372377_11, Int16, Range<UInt16>, Int16, VArray<Unit, $2>)>.None,
    (Class_1742566372377_11() as (UInt64, Int32, Class_1742566372377_11, Int16, Range<UInt16>, Int16, VArray<Unit, $2>))]
let var_1742566372377_130: (UInt64, Int32, Class_1742566372377_11, Int16, Range<UInt16>, Int16, VArray<Unit, $2>) = (UInt64(UInt8(209)),
    Int32(UInt8(UInt8(230))), Class_1742566372377_11(), Int16(46), ((UInt16(UInt16(Int8(45))) & 127)..=(UInt16(UInt16(Int8(9))) &
        127) : (Int64(Int16(UInt16(126))) | 1)), Int16(-46), VArray<Unit, $2>({i => ()}))
public let var_1742566372377_154: Byte = UInt8(Int8(UInt8(155)))
public const var_1742566372377_159: Int8 = -54
@Deprecated
public let var_1742566372377_172: Int = Int64(UInt8(21))
public var var_1742566372377_202: Bool = (((UInt8(UInt8(109)) & 127)..=(UInt8(UInt8(Int8(7))) & 127) : (Int64(-52) | 1)) is Rune)
public let var_1742566372377_211: Int32 = Int32(-116)
public var var_1742566372377_262: Int16 = Int16(Int16(UInt16(Int16(-127))))
public var var_1742566372377_274: UInt8 = UInt8(UInt8(Int8(Int8(UInt8(144)))))
public var var_1742566372377_282: Unit = ()
@Deprecated
public var var_1742566372377_291: Range<Int8> = ((Int8(Int8(-76)) & 127)..=(Int8(Int8(-22)) & 127) : (Int64(118) | 1))
public var var_1742566372377_294: Range<Int64> = ((Int64(Int64(UInt64(188))) & 127)..=(Int64(Int64(41)) & 127) : (Int64(-102) |
    1))
@Deprecated
public var var_1742566372377_305: Array<UInt64> = [UInt64(198), UInt64(83), UInt64(67), UInt64(70), UInt64(139),
    UInt64(224), UInt64(121), UInt64(4), UInt64(97), UInt64(225)]
@Deprecated
public var var_1742566372377_366: Option<(UInt64, Int32, Class_1742566372377_11, Int16, Range<UInt16>, Int16, VArray<Unit, $2>)> = Option<(UInt64, 
        Int32, Class_1742566372377_11, Int16, Range<UInt16>, Int16, VArray<Unit, $2>)>.None
public var var_1742566372377_377: Int64 = Int64(UInt64(UInt8(UInt8(245))))
public var var_1742566372377_392: Struct_1742566372377_186 = Struct_1742566372377_186()
public var var_1742566372377_434: UInt64 = UInt64(29)
public let var_1742566372377_440: Range<UInt64> = ((UInt64(UInt64(57)) & 127)..=(UInt64(UInt64(48)) & 127) : (Int64(72) |
    1))
@Deprecated
public var var_1742566372377_449: Option<Bool> = (UInt8(9) as Bool)
@Deprecated
public let var_1742566372377_520: ?Int64 = Option<Int64>.None
public var var_1742566372377_535: Int32 = Int32(Int16(38))
internal let var_1742566372377_547: Enum_1742566372377_544<Range<UInt32>, Int64, Array<UInt64>> = Enum_1742566372377_544<Range<UInt32>, Int64, Array<UInt64>>
    .enumValue_1742566372377_549(UInt8(UInt8(86)), VArray<Unit, $2>(repeat: ()))

@Deprecated
public open class Class_1742566372377_11 {
    public init() { // block id: 13

    }

    @Frozen
    public mut prop var_1742566372377_162: Int64 { // block id: 163
        get() { // block id: 165
            Int64(UInt8(29));
            var_1742566372377_572
        }
        set(Value) { // block id: 170
            var_1742566372377_572 = Value
        }
    }

    @Frozen
    static mut prop var_1742566372377_398: Struct_1742566372377_186 { // block id: 399
        get() { // block id: 401
            Option<VArray<Unit, $2>>.None;
            ###"*-OZTgs/Uu"###;
            Struct_1742566372377_186()
        }
        set(Value) { // block id: 407
            ();
            ();
            ()
        }
    }
    var var_1742566372377_572: Int64 = Int64(41)
    static init() {
    }
}

@Frozen
func func_1742566372377_74<T0, T1>(): Class_1742566372377_11 { // block id: 75
    (var_1742566372377_86[1] ?? (Option<(UInt64, Int32, Class_1742566372377_11, Int16, Range<UInt16>, Int16, VArray<Unit, $2>)>
        .Some(var_1742566372377_130) ?? var_1742566372377_130))[2]
}

@Deprecated
public func func_1742566372377_74<T0>(param_1742566372377_16: UInt8, param_1742566372377_17: Int8): Class_1742566372377_11 { // block id: 18
    let var_1742566372377_38: (Class_1742566372377_11, Range<Int8>, Range<Int64>, Option<VArray<Unit, $2>>, Array<UInt64>, 
        Class_1742566372377_11, Int64, Option<VArray<Unit, $2>>) = (Class_1742566372377_11(), ((Int8(Int8(-116)) & 127)..=(Int8(Int8(32)) &
            127) : (Int64(-36) | 1)), ((Int64(Int64(-65)) & 127)..(Int64(Int64(Int64(-19))) & 127) : (Int64(UInt8(UInt8(53))) |
            1)), Option<VArray<Unit, $2>>.Some(VArray<Unit, $2>({i => ()})), [UInt64(167), UInt64(62), UInt64(66),
            UInt64(229), UInt64(182), UInt64(231), UInt64(139), UInt64(104), UInt64(212), UInt64(116)],
        Class_1742566372377_11(), Int64(Int16(100)), (((UInt16(UInt16(53)) & 127)..(UInt16(UInt16(18)) & 127) : (Int64(-29) |
            1)) as VArray<Unit, $2>));
    (var_1742566372377_38[3] ?? try { // block id: 61
        var_1742566372377_64 << ((UInt64(238)) & 7);
        var_1742566372377_68
    } finally { // block id: 70
        var_1742566372377_68
    })[1];
    func_1742566372377_74<Unit, Range<UInt64>>()
}

public struct Struct_1742566372377_186 {
    @Frozen
    public init() { // block id: 188

    }

    func func_1742566372377_412(param_1742566372377_413: Range<Int64>): Bool { // block id: 414
        ();
        (match (var_1742566372377_366) {
            case caseVar_1742566372377_425 =>
                ();
                Option<Bool>.None

            case _: Option<VArray<Unit, $2>> =>
                var_1742566372377_434++;
                if (var_1742566372377_202) {
                    ((UInt64(UInt64(150)) & 127)..(UInt64(UInt64(155)) & 127) : (Int64(53) | 1))
                } else {
                    var_1742566372377_440
                };
                Option<Bool>.None

            case _ =>
                if (true) {
                    var_1742566372377_449
                } else {
                    var_1742566372377_449
                }

            case _ =>
                var_1742566372377_262--;
                var_1742566372377_449
        } ?? func_1742566372377_460(match (var_1742566372377_274) {
            case 226 | 94 =>
                ();
                var_1742566372377_262

            case caseVar_1742566372377_475 => Int16(-22)

            case caseVar_1742566372377_480 => Int16(-8)

            case _ => var_1742566372377_262 - var_1742566372377_262
        }))
    }
}

@Frozen
func func_1742566372377_190(): Struct_1742566372377_186 { // block id: 191
    var var_1742566372377_223: Option<(UInt64, Int32, Class_1742566372377_11, Int16, Range<UInt16>, Int16, VArray<Unit, $2>)> = Option<(UInt64, 
            Int32, Class_1742566372377_11, Int16, Range<UInt16>, Int16, VArray<Unit, $2>)>.Some(
        (UInt64(UInt16(UInt16(232))), Int32(Int16(-59)), Class_1742566372377_11(), Int16(UInt16(UInt8(55))), ((UInt16(UInt16(239)) &
                127)..(UInt16(UInt16(206)) & 127) : (Int64(-102) | 1)), Int16(Int8(UInt8(253))), VArray<Unit, $2>({
                    i => ()
                })));
    match (if (try { // block id: 195
        ((UInt32(UInt32(106)) & 127)..(UInt32(UInt32(224)) & 127) : (Int64(17) | 1));
        false
    } catch (e: Exception) { // block id: 198
        ();
        UInt16(12);
        var_1742566372377_202
    } finally { // block id: 209
        var_1742566372377_211;
        Struct_1742566372377_186();
        true
    }) { // block id: 215
        ((Int64(Int64(-52)) & 127)..=(Int64(Int64(-126)) & 127) : (Int64(-76) | 1));
        if (var_1742566372377_202) {
            var_1742566372377_223
        } else {
            var_1742566372377_223
        }
    } else if (true) { // block id: 244
        if (var_1742566372377_202) {
            var_1742566372377_223
        } else {
            var_1742566372377_223
        }
    } else { // block id: 249
        let var_1742566372377_259: Range<UInt16> = ((UInt16(UInt16(81)) & 127)..=(UInt16(UInt16(156)) & 127) : (Int64(-117) |
            1));
        if (true) {
            Option<(UInt64, Int32, Class_1742566372377_11, Int16, Range<UInt16>, Int16, VArray<Unit, $2>)>.Some(
                (var_1742566372377_64, var_1742566372377_211, Class_1742566372377_11(), Int16(-88), var_1742566372377_259,
                    var_1742566372377_262, var_1742566372377_68))
        } else {
            Option<(UInt64, Int32, Class_1742566372377_11, Int16, Range<UInt16>, Int16, VArray<Unit, $2>)>.None
        }
    }) {
        case _ =>
            var_1742566372377_274 /= ((UInt8(188)) | 1)
            var_1742566372377_282;
            ()

        case _ =>
            var var_1742566372377_310: ?VArray<Unit, $2> = Option<VArray<Unit, $2>>.Some(VArray<Unit, $2>(repeat: ()));
            (Class_1742566372377_11(), var_1742566372377_291, var_1742566372377_294, Option<VArray<Unit, $2>>.Some(
                    VArray<Unit, $2>({i => ()})), var_1742566372377_305, Class_1742566372377_11(), Int64(-15),
                var_1742566372377_310);
            var_1742566372377_282;
            ()

        case caseVar_1742566372377_319: UInt32 =>
            var_1742566372377_282;
            var_1742566372377_262--

        case _: Range<UInt16> =>
            UInt16(132);
            ();
            var_1742566372377_262++

        case _ => ()
    };
    if (var_1742566372377_202) { // block id: 337
        if (var_1742566372377_202) {
            ((UInt64(UInt64(26)) & 127)..=(UInt64(UInt64(235)) & 127) : (Int64(10) | 1))
        } else {
            ((UInt64(UInt64(196)) & 127)..=(UInt64(UInt64(54)) & 127) : (Int64(52) | 1))
        };
        var loopTimeVar_1742566372377_357: Int64 = 0;
        do {
            loopTimeVar_1742566372377_357++;
            var var_1742566372377_347: UInt64 = UInt64(229);
            var_1742566372377_347--;
            if (false) {
                ((Int32(var_1742566372377_211) & 127)..=(Int32(var_1742566372377_211) & 127) : (var_1742566372377_172 | 1))
            } else {
                ((Int32(Int32(125)) & 127)..=(Int32(Int32(80)) & 127) : (Int64(-113) | 1))
            }
        } while ((var_1742566372377_202) && loopTimeVar_1742566372377_357 < 100);
        let var_1742566372377_359: Struct_1742566372377_186 = Struct_1742566372377_186();
        var_1742566372377_359
    } else if ((var_1742566372377_64 is Option<VArray<Unit, $2>>) || (var_1742566372377_366 is () -> Class_1742566372377_11)) { // block id: 368
        var loopTimeVar_1742566372377_384: Int64 = 0;
        do {
            loopTimeVar_1742566372377_384++;
            var_1742566372377_262 += var_1742566372377_262
            var_1742566372377_377 &= var_1742566372377_377
        } while ((var_1742566372377_202) && loopTimeVar_1742566372377_384 < 100);
        (UInt32(49), ())[1];
        var_1742566372377_392
    } else { // block id: 394
        Class_1742566372377_11.var_1742566372377_398
    }
}

@Deprecated
public const func func_1742566372377_460(param_1742566372377_461: Int16): Bool { // block id: 462
    12.0 >= 31.0
}

public enum Enum_1742566372377_544<T0, T1, T2> {
    defaultValue
    | enumValue_1742566372377_549(UInt8, VArray<Unit, $2>)
}

main(): Int64 {
    try {
        func_1742566372377_74<UInt32>(var_1742566372377_154, var_1742566372377_159).var_1742566372377_162 /= ((var_1742566372377_172) |
            1)
        if (func_1742566372377_74<UInt32>(var_1742566372377_154, var_1742566372377_159)
            .func_1742566372377_181<Int16, Range<UInt32>>(VArray<Unit, $2>(repeat: var_1742566372377_282))) { // block id: 496
            var loopTimeVar_1742566372377_502: Int = 0;
            while ((true) && loopTimeVar_1742566372377_502 < 100) {
                loopTimeVar_1742566372377_502++;
                ()
            };
            ();
            func func_1742566372377_505(namedParam_1742566372377_506!: VArray<Unit, $2>): Int64 { // block id: 507
                ((UInt8(UInt8(177)) & 127)..=(UInt8(UInt8(24)) & 127) : (Int64(-29) | 1));
                (if (false) { // block id: 516
                    Option<Int64>.None
                } else if (match (var_1742566372377_520) {
                    case _ => true

                    case _ =>
                        var_1742566372377_282;
                        ((Int32(Int32(-119)) & 127)..=(Int32(Int32(-35)) & 127) : (Int64(53) | 1));
                        var_1742566372377_202
                }) { // block id: 532
                    var_1742566372377_535 += var_1742566372377_211
                    var_1742566372377_520
                } else { // block id: 540
                    var_1742566372377_282;
                    Option<Int64>.None
                } ?? match (var_1742566372377_547) {
                    case _ =>
                        var_1742566372377_274 <<= ((UInt8(222)) & 7)
                        var_1742566372377_172
                })
            };

            func_1742566372377_505(namedParam_1742566372377_506: VArray<Unit, $2>({i => ()}))
        } else { // block id: 567
            Int64(-5)
        }
        // CRC Check All Variables
        var crcCheck = CrcCheck(5000, 32)
        crcCheck.updateBuffer(UInt64(var_1742566372377_274 * var_1742566372377_274), 64)
        crcCheck.crcCheck()
        crcCheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) {
        println("Exception: NoneValueException")
    }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        buffer = Array<Int64>(buffer_n, {i => 0})
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, {i => 0})
        var byte_c = 1
        var byte_index = 0
        while (value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[(i + buffer_index) % buffer.size] = byteArray[i + byte_index]
            i++
        }
        buffer_index = (buffer_index + i) % buffer.size
    }

    func updateBuffer(input: Bool, byte_n: Int64): Unit {
        if (input == true) {
            updateBuffer(1, byte_n)
        } else {
            updateBuffer(0, byte_n)
        }
    }

    func updateBuffer(input: Rune, byte_n: Int64): Unit {
        updateBuffer(UInt64(UInt32(input)), byte_n)
    }

    func updateBuffer(input: String, byte_n: Int64): Unit {
        for (c in input) {
            updateBuffer(c, byte_n)
        }
    }

    func updateBuffer(input: Unit, byte_n: Int64): Unit {
        updateBuffer(input.toString(), byte_n)
    }

    func updateBuffer(input: Any, byte_n: Int64): Unit {
        if (input is Hashable) {
            match (input as Hashable) {
                case Some(v) => updateBuffer(UInt64(v.hashCode()), byte_n)
                case _ => updateBuffer(1, byte_n)
            }
        } else if (input is ToString) {
            match (input as ToString) {
                case Some(v) => updateBuffer(v.toString(), byte_n)
                case _ => updateBuffer(1, byte_n)
            }
        } else {
            updateBuffer(1, byte_n)
        }
    }
    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, {i => 0})
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2 ** 2 * crc_output[i] + 2 ** 1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}

extend Struct_1742566372377_186 {}

extend<T0, T1, T2> Enum_1742566372377_544<T0, T1, T2> {}

extend Class_1742566372377_11 {
    public func func_1742566372377_181<T0, T1>(param_1742566372377_182: VArray<Unit, $2>): Bool { // block id: 183
        ((Int64(Int64(21)) & 127)..=(Int64(Int64(-39)) & 127) : (Int64(94) | 1));
        func_1742566372377_190().func_1742566372377_412(
            ((Int64(Int64(-24)) & 127)..(Int64(Int64(-37)) & 127) : (Int64(-119) | 1)))
    }
}
