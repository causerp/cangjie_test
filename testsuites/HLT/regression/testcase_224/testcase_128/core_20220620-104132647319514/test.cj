/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output


public var var13 : Class9 = Class9()
public var var21 : Int8 = Int8(UInt8(25))
public var var51 : Bool = (Option<Class9>.None is Int16)
let var56 : String = """
/hwc8
Na{Q!_
"""
public var var59 : (Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16) = ('A', Int64(UInt16(227)), Option<Class9>.None, Float32(Float32(-6.0)), true, ###"8u}h-w~6${var56}2a{${var56}"###, UInt16(28))
public let var74 : Class9 = Class9()
public let var78 : Int16 = Int16(-14)
public var var101 : ??Float64 = (Float64(Float32(Float32(-29.0))) as Option<Float64>)
let var111 : ?Class9 = Option<Class9>.None
public var var123 : ?Float64 = Option<Float64>.None
public let var155 : Float64 = Float64(80.0)
public let var180 : (Rune, Bool, Float64) = ('a', (Int8(-68) is Float64), Float64(Float64(104.0)))
public let var190 : Option<Option<Class9>> = Option<Option<Class9>>.None
var var207 : ?Class9 = (('h', Int64(Int16(UInt16(7))), (() as Class9), Float32(0.0), (Class9() is String), "K4${var56}I5o]${var56} ))9", UInt16(UInt8(81))) as Class9)
public let var235 : ?Bool = (Int32(UInt32(107)) as Bool)
public var var257 : Int16 = Int16(85)
public var var281 : UInt16 = UInt16(58)
public let var376 : Unit = ()
public var var387 : UInt32 = UInt32(Int32(UInt16(173)))
var var451 : Unit = ()
let var461 : Float32 = Float32(-118.0)
public let var604 : ??Float64 = (Int64(Int64(UInt8(208))) as Option<Float64>)
public let var611 : UInt64 = UInt64(UInt64(Int32(UInt32(Int32(21)))))
let var653 : (Rune, Bool, Float64) = ('Q', (((), (-58), "\\kYFV>?sNB", UInt8(226), "-VeU>/:z0M") is (Float64, Bool, Unit, String)), Float64(Float32(Float32(-77.0))))
public var var736 : Int64 = Int64(UInt16(UInt8(Int8(-68))))
var var742 : UInt16 = UInt16(212)
public let var782 : Enum759 = Enum759.defaultValue
let var806 : (UInt8, Int32, Option<Option<Float64>>, UInt8) = (UInt8(130), Int32(Int16(UInt16(UInt8(141)))), (Int8(-114) as Option<Float64>), UInt8(17))
let var1007 : UInt8 = UInt8(205)
let var1013 : ?UInt16 = Option<UInt16>.None
public var var1113 : UInt8 = UInt8(Int8(Int8(71)))
public let var1340 : Bool = true
var var1364 : Class324 = Class324()
public let var1428 : (Float64, Bool, Unit, String) = (Float64(Float32(-93.0)), (UInt16(Int8(UInt8(48))) is Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>), (), "\\g:L*24P^}")
public var var1517 : Unit = ()
public let var1632 : Rune = 'i'
let var1641 : UInt16 = UInt16(UInt8(UInt8(UInt8(130))))
public var var1717 : Int32 = Int32(UInt8(2))
public var var1750 : Bool = ((UInt16(49) is (Rune, Float64) -> Float64) is Int32)
public let var1991 : (Float64, UInt16, Range<UInt16>, Float64, Range<UInt16>) = (93.0, UInt16(175), (UInt16(138)&127..=UInt16(88)&127:(Int64(Int32(Int32(18)))|1)), Float64((-74.0)), (UInt16(UInt16(Int16(36)))&127..=UInt16(52)&127:(41|1)))
public var var2103 : Bool = (('r', ('V', false, 22.0), Int16(116), (-97), UInt16(Int16(17)), Int64(Int8(Int8(65)))) is Option<Float64>)
public var var2147 : Float64 = Float64(Float32(35.0))
let var2192 : Array<Bool> = [false, false, false, false, false, true, false, false, false, true]
public let var2251 : Bool = true
public let var2264 : Float64 = (-65.0)
var var2318 : String = "%7lR_B!Qtl"
public var var2440 : Float32 = Float32(Float32(25.0))
public let var2455 : (Float64, Unit, Bool, UInt64, Rune) = (15.0, (), false, UInt64(81), '5')
public var var2480 : ?UInt8 = Option<UInt8>.None
public var var2491 : (Float64, Unit, Bool, UInt64, Rune) = (Float64((-57.0)), (), (Option<Option<Class9>>.None is ((Option<Option<Float64>>) -> Bool, (Option<Bool>) -> Bool, Bool, (Rune, Bool, Float64)) -> Option<UInt8>), UInt64(136), 'N')
let var2710 : ?Class324 = ([(), (), (), (), (), (), (), (), (), ()] as Class324)
public let var2763 : Int64 = Int64(UInt32(Int16(114)))
public let var2814 : ??(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16) = Option<Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>>.None
public var var2851 : Float64 = Float64(Float32(111.0))
public let var2856 : Range<UInt16> = (UInt16(236)&127..=UInt16(165)&127:(Int64(Int8(62))|1))
public var var2901 : Option<Option<Class9>> = Option<Option<Class9>>.None
var var3002 : Array<Class9> = Array<Class9>(10){ i => Class324() }
public var var3176 : (Float64, Unit, Bool, UInt64, Rune) = (Float64((-74.0)), (), (Enum759.defaultValue is Array<Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>>), UInt64(Int8(Int8(UInt8(146)))), 'o')
public var var3202 : Rune = '9'
public open class Class9 <: Resource {
    public init() { // block id: 11

    }
;
    public let var16 : Bool = false;
    static func func249(namedParam250 ! : UInt16) : Unit { // block id: 251
        Int8(try { // block id: 254
            var257 *= Int16(-43);
            UInt8(174)
        } catch (_) { // block id: 261
            UInt8(101)
        });
        var loopTimeVar273 : Int64 = 0;
        do {
            loopTimeVar273++;
            if (true) { // block id: 268
                var257 -= var257
            }
        } while ((false) && loopTimeVar273 < 100 ) 
    }
;
    let var951 : Unit = ();
    public static let var1017 : Range<UInt8> = (UInt8(117)&127..UInt8(16)&127:9|1);
    static var var1021 : Int64 = 125;
    public static var var3022 : Bool = true;
    static var var3041 : Option<Array<(Float64, Unit, Bool, UInt64, Rune)>> = Option<Array<(Float64, Unit, Bool, UInt64, Rune)>>.None;
    public init(namedParam2927 ! : UInt8, namedParam2928 ! : (Unit) -> Bool, optionalParam2931 ! : Range<Int8> = (Int8(-119)&127..Int8(-50)&127:((-67)|1)), namedParam2936 ! : Array<UInt32>) { // block id: 2937
        var var2949 : Option<Unit> = (((UInt8(Int8(62))&127..=UInt8(UInt8(103))&127:(26|1)), (UInt32(136)&127..=UInt32(24)&127:(100|1)), 1, (('7', ('p', true, 35.0), Int16(113), (-21), UInt16(86), (-19)) as UInt16)) as Unit);
        (if ((Option<UInt16>.None is Class324)) { (if (var51) { Option<Unit>.Some(var451) } else { Option<Unit>.Some(var376) } ) } else { var2949 }  ?? (match ((Int8(-63)&127..=Int8(-56)&127:(-68)|1)) {
            case caseVar2979 => 
                Option<Unit>.Some(())
            
            case _ => 
                ();
                Option<Unit>.None
            
        } ?? ()));
        var var2992 : Option<(Float64, Unit, Bool, UInt64, Rune)> = (() as (Float64, Unit, Bool, UInt64, Rune));
        let var3044 : Array<(Float64, Unit, Bool, UInt64, Rune)> = Array<(Float64, Unit, Bool, UInt64, Rune)>(10){ i => (114.0, (), ((Option<(Float64, Unit, Bool, UInt64, Rune)>.Some(((-127.0), (), true, UInt64(51), 'P')) as Unit) is Option<Int64>), UInt64(UInt64(UInt8(154))), 'c') };
        if (match (match (var2992) {
                case _ => 
                    let var2998 : UInt32 = UInt32(UInt32(161));
                    var2998;
                    var3002
                
            }) {
            case _ => 
                if (var2103) { var2318 } else { """
7=!Xg
Y$^*O
""" } ;
                var3022
            
            case _ : Int64 => 
                false
            
            case _ => 
                !true
            
        }) { ((namedParam2927 as Array<(Float64, Unit, Bool, UInt64, Rune)>) ?? (var3041 ?? var3044)) } else { match (((var1428, var1517, var2264, true, var257, var155, Int16(-48), var2264) as UInt16)) {
            case _ => 
                var376;
                var1717 & var1717;
                [var2491, (97.0, (), var2103, UInt64(183), '5'), var2491, var3176, var2455, var3176, (var2264, var1517, true, UInt64(234), var1632), (var2264, (), true, var611, var3202), (var2264, (), var2251, UInt64(50), 'S'), (var155, (), var1340, UInt64(74), '5')]
            
            case caseVar3218 : (Float64, Bool, Unit, String) => 
                var var3249 : (Float64, Unit, Bool, UInt64, Rune) = ((-2.0), (), true, UInt64(9), 'd');
                [((-36.0), var1517, true, var611, 'V'), var3176, (106.0, var1517, false, UInt64(147), 'W'), (var2264, (), true, var611, var1632), var3176, (var2264, var1517, var51, var611, var1632), var2455, var3249, var2455, var3249]
            
            case _ => 
                var var3265 : (Float64, Unit, Bool, UInt64, Rune) = (Float64(Float32(-4.0)), (), true, UInt64(6), 'W');
                if (var1340) { [var3176, var3265, var2491, (var2147, (), var1340, UInt64(27), 'E'), var2491, var2455, var2491, var3176, var2491, ((-50.0), var1517, true, UInt64(185), '9')] } else { [var3176, ((-30.0), (), var1750, UInt64(37), 'u'), (var2147, var1517, var2251, UInt64(46), var3202), var3265, (12.0, (), false, var611, 't'), var3176, var3265, ((-89.0), (), var3022, var611, '3'), (var155, var451, true, var611, '5'), ((-71.0), (), false, var611, '6')] } 
            
        } } 
    }
;
    public init(param3358 : Array<Range<UInt16>>, param3359 : (Float64, Bool, Unit, String)) { // block id: 3360
        match (var257) {
            case -7 => 
                var1517
            
            case 42 => 
                ()
            
            case _ => 
                var451;
                var21 += Int8(68);
                var281 ^= var1641
            
        };
        var376;
        let var3415 : String = "U*J;}Ikrox";
        match ((if (var3022) { Option<Option<Option<Float64>>>.Some(Option<Option<Float64>>.Some(Option<Float64>.Some(var2147))) } else { Option<Option<Option<Float64>>>.Some(Option<Option<Float64>>.None) }  ?? (Option<Option<Option<Float64>>>.None ?? Option<Option<Float64>>.Some(var123)))) {
            case caseVar3401 => 
                var742
            
            case _ => 
                ();
                var1517;
                UInt16(139)
            
            case caseVar3412 : Int16 => 
                var3415;
                UInt16(132)
            
            case _ : (Float64, Unit, Bool, UInt64, Rune) => 
                Option<Bool>.None;
                var376;
                UInt16(100) ** (UInt16(19) & 3)
            
            case _ => 
                ();
                ();
                -var1641
            
        }
    }

    public func isClosed(): Bool { return true }
    public func close(): Unit {}
}




public func func33(namedParam34 ! : Rune, optionalParam35 ! : Float64 = Float64(Float64(Float64(Float64(Float32(-94.0)))))) : Float64 { // block id: 41
    (if (var51) { // block id: 54
        var56;
        var59
    } else { // block id: 70
        var59
    }[2] ?? var74);
    var78 - try { // block id: 81
        Int16(-110)
    } finally { // block id: 83
        Int16(48) << ((var78) & 7)
    };
    var var144 : Int64 = (-34);
    (((var101, var21, namedParam34)[0] ?? match (var111) {
        case _ : Int16 => 
            if (var51) { Option<Class9>.Some(Class9()) } else { var111 } ;
            optionalParam35;
            var123
        
        case _ : Bool => 
            if (true) { Option<Float64>.None } else { var123 } 
        
        case _ => 
            if (var51) { var123 } else { Option<Float64>.None } 
        
        case _ => 
            (-58) - var144;
            UInt64(176);
            if (true) { var123 } else { Option<Float64>.None } 
        
    }) ?? (-109.0))
}




public func func284<T0, T1, T2>(param285 : Option<Bool>) : Bool where T0 <: Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>, T1 <: Int32, T2 <: Array<Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>> { // block id: 286
    false
}

public func func240<T0, T1>() : Bool { // block id: 245
    Class9.func249(namedParam250 : (Option<UInt16>.None ?? var281));
    var var289 : (Option<Bool>) -> Bool = func284<Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>, Int32, Array<Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>>>;
    let var297 : Unit = ();
    match ((Class9() as UInt16)) {
        case _ => 
            var297;
            Option<Bool>.None
        
    }|>var289
}

public func func240(param241 : Option<Option<Float64>>) : Bool { // block id: 242
    func240<Option<Option<Class9>>, Option<Float64>>()
}


public open class Class324 <: Class9 {
    public init() { // block id: 326

    }
;
    let var421 : (Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16) = ('y', 30, Option<Class9>.None, Float32(59.0), false, """
H`4w:
\"A*G?
""", UInt16(102));
    public let var976 : UInt16 = UInt16(129);
    public static var var1329 : UInt16 = UInt16(3)
}

func func328(param329 : Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>, param330 : Int32) : Class324 { // block id: 331
    let var336 : (Option<Bool>) -> Bool = func284<Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>, Int32, Array<Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>>>;
    let var354 : Float32 = Float32(60.0);
    let var365 : UInt32 = UInt32(109);
    var var372 : String = "Gr/PBCy)o_";
    let var396 : Class324 = Class324();
    if (if ((Option<Bool>.Some(true)|>var336)) { // block id: 340
        var var344 : Bool = ((('z', ("gE)IsD0P\"Y" is Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>), Float64(Float32(23.0))) as (Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)) is (Rune, Float64) -> Float64);
        var51 ||= var344;
        var354;
        var257 < Int16(-45)
    } else { // block id: 359
        var21 >> ((Int8(74)) & 7);
        var365 != var365
    }) { match (try { // block id: 370
            var372
        } finally { // block id: 374
            var376;
            ();
            if (var51) { var372 } else { "`EH3a{J\\r~k" } 
        }) {
        case _ => 
            var387++;
            ();
            if (false) { Class324() } else { var396 } 
        
    } } else { var396 } 
}




public enum Enum759 {
    defaultValue
}
func func752(param753 : Option<Class9>) : Option<Option<Float64>> { // block id: 754
    ();
    match (match (var180) {
            case (caseVar765,caseVar766,caseVar767 : Int64) => 
                Enum759.defaultValue
            
            case _ => 
                (var155, var51, (), """
~E$<L
} p3o
""");
                var451;
                if (var51) { var782 } else { Enum759.defaultValue } 
            
            case (caseVar787,caseVar788 : Option<UInt8>,caseVar789 : Option<UInt16>) => 
                var451;
                ();
                Enum759.defaultValue
            
            case _ => 
                var782
            
        }) {
        case _ => 
            var51 ||= true;
            let var803 : Unit = ();
            var803;
            var806
        
    }[2]
}

public func func1188(param1189 : (Float64, Unit, Bool, UInt64, Rune)) : Unit { // block id: 1190
    var var1196 : Range<UInt8> = (UInt8(Int8(4))&127..UInt8(195)&127:(Int64(UInt32(180))|1));
    var var1204 : Range<UInt32> = (UInt32(79)&127..UInt32(Int16(-54))&127:(Int64(UInt64(Int8(Int8(-103))))|1));
    var var1233 : Int32 = Int32(109);
    match (Option<Option<Float64>>.Some(((var1196, var1204, var736, Option<UInt16>.None) as Float64))) {
        case caseVar1217 : Bool => 
            let var1222 : Int32 = Int32(63);
            Int32(-43) ** (var1222 & 3)
        
        case _ => 
            Int32(-115)
        
        case _ : ((Float64, Bool, Unit, String), Unit, Float64, Bool, Int16, Float64, Int16, Float64) => 
            var1233 * Int32(-22)
        
        case _ => 
            Int8(-4);
            var1233
        
    };
    let var1247 : Bool = ((Option<Option<Float64>>.None as Class9) is UInt16);
    var loopTimeVar1263 : Range<UInt64> = (UInt64(203)&127..=UInt64(9)&127:(Int64(Int64(Int32(-54)))|1));
    for (i in loopTimeVar1263 where try { // block id: 1242
        var51 &&= true;
        var1247
    } catch (_) { // block id: 1251
        var742;
        var376;
        true
    }) {
        try { // block id: 1257
            ();
            (UInt8(50)&127..=UInt8(205)&127:(-115)|1)
        } finally { // block id: 1260
            ();
            (UInt8(185)&127..UInt8(103)&127:(-16)|1)
        }
    };
    var loopTimeVar1280 : Range<UInt64> = (UInt64(190)&127..=UInt64(UInt64(19))&127:((-10)|1));
    for (i in loopTimeVar1280 where try { // block id: 1272
        var451;
        var51
    } finally { // block id: 1275
        false && var1247
    }) {

    }
}

public func func1320(param1321 : Option<Class9>) : Bool { // block id: 1322
    let var1343 : Class9 = Class324();
    (var281 >> (((Class324.var1329)) & 7)) == if ((Option<Bool>.Some(false)|>func284<Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>, Int32, Array<Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>>>)) { // block id: 1336
        var742
    } else { // block id: 1338
        var1340;
        var1343;
        UInt16(137)
    }
}


func func1401(param1402 : Range<Int64>) : UInt16 { // block id: 1403
    UInt16(139)
}


public func func1395(param1396 : (Option<Option<Float64>>, Int8, Rune)) : Array<Range<UInt16>> { // block id: 1397
    let var1411 : Range<Int64> = (Int64(Int16(UInt8(Int8(0))))&127..(-27)&127:((-52)|1));
    let var1450 : String = "X_vEThF;J&";
    let var1554 : UInt8 = UInt8(UInt8(UInt8(88)));
    var var1589 : (Float64, UInt16, Range<UInt16>, Float64, Range<UInt16>) = (Float64(123.0), UInt16(Int8(110)), (UInt16(108)&127..=UInt16(98)&127:(-55)|1), (-83.0), (UInt16(5)&127..=UInt16(168)&127:109|1));
    [var281, (try { // block id: 1407
        if (false) { var1411 } else { (var736&127..=var736&127:(9|1)) } 
    } finally { // block id: 1423
        var1411
    }|>func1401), if (match (var1428) {
        case caseVar1440 => 
            ('p', var736, Option<Class9>.Some(Class9()), Float32(6.0), false, var1450, var742);
            Int32(20);
            var1340
        
        case _ : Class9 => 
            false
        
        case (caseVar1461 : Range<Int64>,_ : Rune,caseVar1462 : (Unit, Int64, String, UInt8, String),caseVar1463) => 
            var51
        
        case _ => 
            false
        
    }) { // block id: 1469
        UInt16(52)
    } else { // block id: 1471
        var51 &&= var1340;
        var1340;
        UInt16(66)
    }, (Option<UInt16>.None ?? var281), UInt16((Option<UInt16>.Some(UInt16(21)) ?? var742)), match (match (var806) {
            case caseVar1494 => 
                (var257&127..=Int16(-5)&127:(var736|1))
            
            case (_,_ : (Rune, (Rune, Bool, Float64), Int16, Int64, UInt16, Int64),_ : (Rune, Bool, Float64),caseVar1502) => 
                var21 /= ((var21) | 1);
                (Int16(-74)&127..Int16(-15)&127:(-55)|1)
            
            case caseVar1510 => 
                18;
                (Int16(-63)&127..=Int16(-119)&127:(-11)|1)
            
            case _ => 
                var1517;
                if (false) { Option<Option<Class9>>.Some(Option<Class9>.None) } else { Option<Option<Class9>>.None } ;
                (Int16(-17)&127..=Int16(-58)&127:(var736|1))
            
        }) {
        case caseVar1530 : UInt8 => 
            ((-59.0), false, (), """
69xFQ
ia{ t@
""");
            UInt16(215) ** (var742 & 3)
        
        case _ => 
            var281
        
    }, UInt16(UInt16(156)), if (match (UInt16(204)) {
        case _ => 
            ();
            var1113 %= ((var1554) | 1);
            UInt16(71) != UInt16(195)
        
    }) { // block id: 1561
        if (true) { (UInt64(225)&127..=var611&127:(44|1)) } else { (UInt64(203)&127..UInt64(229)&127:94|1) } ;
        var180;
        var281 ^ var742
    } else if (var155 == var155) { // block id: 1576
        Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>.None;
        -UInt16(131)
    } else { // block id: 1580
        var451;
        ();
        UInt16(164)
    }, Class324.var1329, match (var1589) {
        case _ => 
            var451;
            var604;
            var742 & UInt16(54)
        
    }];
    ([(), (), (), (), (), (), (), (), (), ()] as Unit);
    [(UInt16(159)&127..UInt16(223)&127:79|1), (UInt16(216)&127..=UInt16(44)&127:81|1), (UInt16(90)&127..=UInt16(67)&127:(-23)|1), (UInt16(204)&127..UInt16(210)&127:(-128)|1), (UInt16(53)&127..UInt16(219)&127:92|1), (UInt16(59)&127..=UInt16(176)&127:32|1), (UInt16(190)&127..UInt16(161)&127:33|1), (UInt16(105)&127..=UInt16(121)&127:(-98)|1), (UInt16(70)&127..=UInt16(164)&127:(-28)|1), (UInt16(231)&127..=UInt16(252)&127:(-110)|1)]
}

public func func1387(param1388 : (Option<Class9>) -> Bool) : Range<UInt16> { // block id: 1391
    let var1609 : ((Option<Option<Float64>>, Int8, Rune)) -> Array<Range<UInt16>> = func1395;
    var var1614 : (Option<Option<Float64>>, Int8, Rune) = (((UInt8(207), Int32(63), Option<Option<Float64>>.None, UInt8(UInt8(176))) as Option<Float64>), Int8(UInt8(Int8(UInt8(58)))), 'S');
    (if (false) { var1614 } else { (var604, Int8(61), var1632) } |>var1609)[7]
}



public func func1353(param1354 : Option<Option<Float64>>) : Option<Class9> { // block id: 1355
    func func1377(optionalParam1378 ! : (Option<Bool>) -> Bool = func284<Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>, Int32, Array<Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>>>, namedParam1382 ! : Int32) : (Float64, Unit, Bool, UInt64, Rune) { // block id: 1383
        let var1651 : (Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16) = ('c', Int64(UInt16(Int16(UInt16(215)))), ((UInt8(UInt8(209)), Int32(-118), Option<Option<Float64>>.Some(Option<Float64>.Some((-69.0))), UInt8(Int8(32))) as Class9), Float32(Float32(Float32(-114.0))), true, """
I_Z.b
oDlnq
""", UInt16(2));
        var loopTimeVar1683 : Int64 = 0;
        do {
            loopTimeVar1683++;

        } while ((match (func1387(func1320)) {
            case _ : UInt16 => 
                var1641 <= var742
            
            case _ : Option<UInt16> => 
                var1651;
                !true
            
            case _ => 
                -var742;
                var51
            
        }) && loopTimeVar1683 < 100 ) ;
        let var1685 : (Float64, Unit, Bool, UInt64, Rune) = (Float64(Float32(Float32(Float32(121.0)))), (), true, UInt64(27), 'N');
        var1685
    }
;
    let var1725 : (Option<Option<Float64>>, Int8, Rune) = (Option<Option<Float64>>.Some(Option<Float64>.None), Int8(UInt8(150)), 'r');
    let var1762 : Bool = ((Int16(-26)&127..=Int16(-77)&127:(Int64(Int32(Int8(116)))|1)) is UInt64);
    let var1805 : Array<Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>> = [Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>.None, (([true, false, false, true, true, true, false, false, false, true] as UInt16) as (Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)), Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>.Some(('u', 33, Option<Class9>.Some(Class9()), Float32(Float32(45.0)), ((UInt8(13)&127..=UInt8(180)&127:(-9)|1) is Option<Class9>), """
_<S&$
mU]!q
""", UInt16(UInt8(229)))), ((Option<Option<Class9>>.Some(Option<Class9>.None) as UInt16) as (Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)), Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>.None, ('8' as (Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)), (UInt16(Int8(99)) as (Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)), Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>.Some(('G', Int64(Int32(48)), Option<Class9>.None, Float32(57.0), true, ###"l.aWa+-d  "###, UInt16(UInt16(122)))), Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>.None, (UInt16(UInt8(70)) as (Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16))];
    let var1889 : ?(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16) = (Float32(124.0) as (Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16));
    let var1906 : Option<Option<Class9>> = Option<Option<Class9>>.Some(((UInt64(71)&127..UInt64(UInt64(59))&127:(Int64(UInt16(6))|1)) as Class9));
    func func1368(param1369 : Range<UInt64>, param1370 : (Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16), optionalParam1371 ! : Range<UInt8> = (UInt8(16)&127..=UInt8(47)&127:(-49)|1), namedParam1373 ! : UInt16) : Option<Option<Class9>> { // block id: 1374
        var var1734 : Int32 = Int32(UInt32(39));
        func1188(func1377(optionalParam1378 : func284<Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>, Int32, Array<Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>>>, namedParam1382 : match ((var387&127..=UInt32(113)&127:(var736|1))) {
            case _ : Enum759 => 
                var var1707 : Float32 = Float32(Float32(64.0));
                var1707 -= Float32(-76.0);
                Int32(-6)
            
            case _ : Option<Class9> => 
                ();
                var1717
            
            case caseVar1722 : Range<Int16> => 
                var1725;
                var1734 + Int32(-33)
            
            case _ => 
                let var1743 : Int32 = Int32(-41);
                var1734 ** (var1743 & 3)
            
        }));
        let var1778 : Int64 = 28;
        var var1857 : ?(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16) = ((UInt32(69)&127..=UInt32(154)&127:(Int64(UInt64(6))|1)) as (Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16));
        if ([var1750, var1340, true, var51, true, false, true, var1340, var1762, true][7]) { (if (match ((var21&127..var21&127:(var1778|1))) {
            case _ : (Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16) => 
                ();
                false
            
            case _ => 
                var var1788 : (Float64, Unit, Bool, UInt64, Rune) = (Float64(Float32(Float32(29.0))), (), (((Option<UInt16>.Some(UInt16(166)) as UInt16) as (Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)) is (Option<Option<Float64>>, Int8, Rune)), UInt64(101), 'O');
                var1788;
                false
            
        }) { var1805[0] } else { (Option<Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>>.Some(var1857) ?? Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>.None) } ) } else { (if (if (var51) { // block id: 1868
            ('O', (var1632, var1762, (-22.0)), var257, var1778, var281, 46);
            var51
        } else { // block id: 1880
            var1517;
            38.0 > var155
        }) { var1857 } else { (if (false) { var1889 } else { var1889 } ) } ) } ;
        match ([false, false, false, false, false, true, true, true, false, true]) {
            case _ : Array<Unit> => 
                let var1899 : Unit = ();
                var1899;
                Option<Option<Class9>>.None
            
            case _ : Unit => 
                var1906
            
            case caseVar1917 => 
                ();
                Option<Option<Class9>>.Some(Option<Class9>.Some(var74))
            
            case _ => 
                (var1428, var451, var155, var1750, Int16(97), 73.0, var257, var155);
                var1906
            
        }
    }
;
    var var1936 : Range<UInt64> = (UInt64(244)&127..UInt64(16)&127:(-25)|1);
    var var1942 : ?Class9 = (('B', ('v', true, (-108.0)), Int16(Int16(93)), 106, UInt16(UInt8(36)), (-4)) as Class9);
    let var1959 : String = """
)a>S+
K_}U;
""";
    var var2026 : UInt64 = UInt64(156);
    (if ((var1364.var16)) { func1368(var1936, (var1632, 82, var1942, Float32(28.0), true, var1959, UInt16(136)), namedParam1373 : var1641) } else { (Option<Option<Option<Class9>>>.Some(Option<Option<Class9>>.Some(var1942)) ?? Option<Option<Class9>>.Some(Option<Class9>.Some(var74))) }  ?? match (Option<Option<Option<Class9>>>.None) {
        case caseVar1978 => 
            ();
            if (var1750) { var1942 } else { Option<Class9>.Some(var74) } 
        
        case caseVar1988 => 
            var1991;
            UInt64(187);
            Option<Class9>.Some(Class324())
        
        case _ : Unit => 
            var387;
            if (var51) { Option<Class9>.None } else { Option<Class9>.Some(Class9()) } 
        
        case _ => 
            var2026 -= UInt64(181);
            if (true) { var1942 } else { Option<Class9>.None } 
        
        case _ => 
            var257 &= var257;
            if (false) { Option<Class9>.None } else { Option<Class9>.None } 
        
    })
}

public func func598(param599 : Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>) : Bool { // block id: 600
    var loopTimeVar748 : Int64 = 0;
    while ((func240(var604)) && loopTimeVar748 < 100 ) {
        loopTimeVar748++;
        var611;
        let var623 : Bool = false;
        let var672 : (Float64, Bool, Unit, String) = (Float64(Float32(-117.0)), true, (), "c=GJ<7!w\"$");
        let var707 : (Rune, Bool, Float64) = ('P', (('M', ((-87) is ((Option<Option<Float64>>) -> Bool, (Option<Bool>) -> Bool, Bool, (Rune, Bool, Float64)) -> Option<UInt8>), Float64(Float32(-119.0))) is Option<Option<Class9>>), Float64(Float32(41.0)));
        func func618() : Float64 { // block id: 619
            var var628 : Rune = '8';
            if (var623) { match ((var628, (-81), Option<Class9>.Some(Class324()), Float32(-29.0), var623, """
a{6t@%
$W-$N
""", var281)) {
                case (caseVar648,caseVar649 : Option<Bool>,_ : Float32,_,_,caseVar650 : UInt16,_ : Rune) => 
                    var653
                
                case _ : UInt16 => 
                    if (var51) { var672 } else { var672 } ;
                    if (false) { (var628, true, (-45.0)) } else { (var628, false, 62.0) } 
                
                case (_,_,_,caseVar692 : Option<Bool>,caseVar693 : Option<Class9>,_,_ : Option<UInt8>) => 
                    ('8', var51, var155)
                
                case caseVar701 => 
                    if (true) { var180 } else { var707 } 
                
                case _ => 
                    ();
                    if (var51) { ('d', var623, var155) } else { var653 } 
                
            } } else { (var628, var653, Int16(58), var736, var742, 103)[1] } [2]
        }
;
        func618()
    };
    var var818 : (Option<Class9>) -> Option<Option<Float64>> = func752;
    var var821 : ?Class9 = Option<Class9>.None;
    let var842 : Class324 = Class324();
    let var1043 : (Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>, Int32) -> Class324 = { lambdaParameter1046 : Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>, lambdaParameter1047 : Int32 => Class324() };
    let var1072 : ((Float64, Bool, Unit, String), Unit, Float64, Bool, Int16, Float64, Int16, Float64) = ((Float64(Float32(Float32(-12.0))), (('q', ('q', true, 16.0), Int16(121), 115, UInt16(254), (-9)) is (UInt8, Int32, Option<Option<Float64>>, UInt8)), (), """
o1#k~
UF9,D
"""), (), Float64(Float32(59.0)), (Enum759.defaultValue is Array<Unit>), Int16(118), Float64(Float32(92.0)), Int16(112), Float64(Float32(15.0)));
    let var1157 : Unit = ();
    func func831() : Float64 { // block id: 832
        func func836(namedParam837 ! : Int8, namedParam838 ! : Option<UInt8>) : Class324 { // block id: 839
            var74;
            var842
        }
;
        var var1161 : String = """
+DUXL
Kp>_6
""";
        let var1171 : (Float64, UInt16, Range<UInt16>, Float64, Range<UInt16>) = (Float64(Float32(-118.0)), UInt16(53), (UInt16(88)&127..=UInt16(6)&127:(116|1)), 91.0, (UInt16(66)&127..UInt16(176)&127:((-2)|1)));
        if (func836(namedParam837 : var21, namedParam838 : Option<UInt8>.None).func847(var257, namedParam855 : var1043)) { // block id: 1050
            var var1053 : ?UInt8 = ((Float64(Float32(Float32(-63.0))), ((UInt8(17), Int32(-121), Option<Option<Float64>>.None, UInt8(54)) is (Option<Option<Float64>>) -> Bool), (), ";KvvXZ1#U ") as UInt8);
            match (var1053) {
                case caseVar1069 : Range<UInt8> => 
                    var1072;
                    var21 /= ((var21) | 1);
                    if (var51) { (UInt8(124)&127..var1007&127:((-107)|1)) } else { (var1113&127..=UInt8(19)&127:(112|1)) } 
                
                case caseVar1121 : Range<UInt8> => 
                    var451;
                    (UInt8(33)&127..UInt8(78)&127:(-28)|1)
                
                case _ => 
                    ();
                    if (var51) { Option<UInt16>.Some(var281) } else { var1013 } ;
                    (var1007&127..var1007&127:(var736|1))
                
                case caseVar1140 => 
                    Enum759.defaultValue;
                    (UInt8(6)&127..UInt8(102)&127:(var736|1))
                
                case _ => 
                    UInt8(24);
                    (UInt8(71)&127..=var1113&127:(119|1))
                
            };
            (var1157, var736, var1161, var1113, var1161)[0];
            87.0
        } else { // block id: 1167
            var1171[3]
        }
    }
;
    let var1287 : ((Float64, Unit, Bool, UInt64, Rune)) -> Unit = func1188;
    var loopTimeVar1317 : Int64 = 0;
    do {
        loopTimeVar1317++;
        var451;
        func func826() : Float64 { // block id: 827
            var var1311 : UInt8 = UInt8(UInt8(161));
            try { // block id: 829
                func831()
            } finally { // block id: 1186
                var var1295 : Rune = 'C';
                (var155, var451, var51, UInt64(137), var1295)|>var1287;
                (Option<Option<Float64>>.Some(var123), Int8(-76), 'L');
                try { // block id: 1303
                    var155 + (-119.0)
                } finally { // block id: 1307
                    ();
                    var1311 |= UInt8(205);
                    (-51.0)
                }
            }
        }
;
        func826()
    } while ((func240((var821|>var818))) && loopTimeVar1317 < 100 ) ;
    var var1347 : (Option<Class9>) -> Bool = { lambdaParameter1350 : Option<Class9> => false };
    Option<Option<Float64>>.Some(try { // block id: 2045
        ();
        var1113++;
        if (true) { Option<Float64>.Some(var155) } else { var123 } 
    } finally { // block id: 2054
        var257 *= Int16(86);
        var123
    })|>(func1353~>var1347)
}

public func func2062(param2063 : Option<Option<Float64>>) : Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)> { // block id: 2064
    var var2070 : (Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16) = ('V', Int64(Int16(Int8(Int8(49)))), ((Float64(12.0), (), false, UInt64(123), '4') as Class9), Float32(-58.0), true, ".n'+JiC?>Q", UInt16(135));
    let var2091 : String = "\\JYlQmb=~k";
    Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>.Some(if (true) { // block id: 2068
        var2070
    } else if (match (var2091) {
        case _ => 
            var376;
            var21 ^= Int8(-97);
            true
        
    }) { // block id: 2100
        var1517;
        var2103;
        let var2120 : Bool = false;
        let var2124 : Rune = 'w';
        let var2137 : ?Class9 = ([(UInt16(120)&127..UInt16(42)&127:(-6)|1), (UInt16(79)&127..=UInt16(58)&127:123|1), (UInt16(54)&127..UInt16(28)&127:81|1), (UInt16(157)&127..=UInt16(207)&127:32|1), (UInt16(238)&127..=UInt16(241)&127:(-25)|1), (UInt16(11)&127..=UInt16(66)&127:(-100)|1), (UInt16(17)&127..=UInt16(63)&127:71|1), (UInt16(251)&127..=UInt16(126)&127:(-21)|1), (UInt16(181)&127..=UInt16(102)&127:(-123)|1), (UInt16(183)&127..UInt16(108)&127:103|1)] as Class9);
        if (var2120) { (var2124, (-66), Option<Class9>.Some(var74), var461, true, var2091, var742) } else { ('m', 110, var2137, Float32(36.0), var1750, var2091, var281) } 
    } else { // block id: 2144
        var2147 *= var2147;
        var2070
    })
}

public func func443(param444 : Int16) : Option<UInt8> { // block id: 445
    try { // block id: 449
        var451;
        (120.0, true, var376, """
9tqa'
[=sc7
""")
    } finally { // block id: 458
        var461 + Float32(-97.0);
        if (false) { var74 } else { var74 } ;
        (18.0, var51, (), "N>N%%117u~")
    }[2];
    func func475(param476 : (Option<Option<Float64>>) -> Bool, namedParam479 ! : (Option<Bool>) -> Bool, optionalParam482 ! : Bool = ((UInt64(Int32(-13)) as Float64) is Class324), namedParam487 ! : (Rune, Bool, Float64)) : Option<UInt8> { // block id: 488
        try (resource = Class9()) { // block id: 490
            var51;
            var var525 : (Float64, Bool, Unit, String) = ((-104.0), false, (), """
kPoP@
-wJg\\
""");
            match (var235) {
                case caseVar496 => 
                    Int8(93) | var21;
                    Int32(18);
                    ()
                
                case _ => 
                    UInt32(80);
                    var21 *= Int8(-127);
                    var376
                
                case _ => 
                    var376
                
                case _ => 
                    if (optionalParam482) { (12.0, var51, (), "'vW|=UlTdm") } else { var525 } ;
                    var376
                
            };
            var451
        } catch (_) { // block id: 533
            (Option<Class324>.None ?? Class324());
            (Option<Unit>.Some(()) ?? ());
            var loopTimeVar553 : Int64 = 0;
            do {
                loopTimeVar553++;

            } while ((false) && loopTimeVar553 < 100 ) 
        } finally { // block id: 554
            var var560 : Unit = ();
            match (Option<Option<Float64>>.None) {
                case _ => 
                    var560
                
            };
            var var567 : Int64 = Int64((-114));
            (var451, var567, "Z7#4'v34ph", UInt8(62), """
`HlC 
EE|pz
""")[0]
        };
        ();
        match (try { // block id: 577
                ();
                if (false) { Option<Class9>.Some(var74) } else { Option<Class9>.Some(var74) } ;
                Option<Option<Float64>>.None
            } catch (_) { // block id: 586
                ();
                var var591 : ??Float64 = Option<Option<Float64>>.None;
                if (var51) { var591 } else { Option<Option<Float64>>.None } 
            }) {
            case _ => 
                Option<UInt8>.None
            
        }
    }
;
    var var2060 : (Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>) -> Bool = func598;
    var var2153 : (Option<Option<Float64>>) -> Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)> = func2062;
    var var2156 : (Option<Bool>) -> Bool = func284<Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>, Int32, Array<Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>>>;
    func475((var2153~>var2060), namedParam479 : var2156, optionalParam482 : (try { // block id: 2160
        ();
        ();
        var235
    } finally { // block id: 2164
        ();
        var235
    } is Array<Bool>), namedParam487 : (var1632, Int16(-68) == param444, Float64(Float32(116.0))))
}

func func433(param434 : Class324) : Option<Float64> { // block id: 435
    Float32(99.0);
    ((var257 ** (var257 & 3)|>func443) ?? (var1007 + var1113) << ((UInt8(Int8(-82))) & 7));
    var var2245 : UInt64 = UInt64(UInt32(UInt16(127)));
    if ((if (var1340) { var235 } else { Option<Bool>.None }  ?? var2192[9])) { match (try { // block id: 2197
            var var2204 : Range<UInt16> = (UInt16(UInt16(UInt16(Int16(-77))))&127..=UInt16(UInt8(167))&127:((-33)|1));
            (38.0, var742, (UInt16(217)&127..UInt16(238)&127:(-104)|1), 3.0, var2204)
        } finally { // block id: 2213
            var2103 ||= false;
            var21 **= (var21 & 3);
            if (var1340) { (70.0, UInt16(225), (UInt16(90)&127..=UInt16(70)&127:25|1), var155, (var1641&127..=var742&127:((-118)|1))) } else { var1991 } 
        }) {
        case (caseVar2234 : Option<UInt16>,caseVar2235,caseVar2236,caseVar2237,_) => 
            ();
            var123
        
        case _ => 
            var2245++;
            if (var2251) { Option<Float64>.Some((-49.0)) } else { var123 } 
        
    } } else { (if ([false, false, false, true, true, false, true, true, false, false][4]) { (Option<Option<Float64>>.Some(Option<Float64>.Some(var2264)) ?? var123) } else { var123 } ) } 
}

public func func306(param307 : Int8) : Option<Option<Float64>> { // block id: 308
    func func316(param317 : Option<Option<Float64>>, namedParam318 ! : Int8, optionalParam319 ! : Int8 = Int8(-17), namedParam321 ! : Option<Float64>) : (Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16) { // block id: 322
        var var416 : Int32 = Int32(Int8(-96));
        func328(((-38) as (Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)), match {
            case false => 
            var var405 : Rune = 'R';
            var405;
            var var409 : UInt64 = UInt64(212);
            var409 >>= ((var409) & 7);
            Int32(-121)
            case _ => 
            var416 >> ((var416) & 7)
        }).var421
    }
;
    var var2269 : (Class324) -> Option<Float64> = func433;
    (Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>.None ?? func316(Option<Option<Float64>>.None, namedParam318 : Int8(-42), namedParam321 : (Class324()|>var2269)));
    var var2274 : ?(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16) = Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>.None;
    match (var2274) {
        case caseVar2278 => 
            if (var2103) { Class324() } else { Class324() } 
        
        case _ => 
            var1364
        
    };
    var604
}


public func func226(param227 : Int16) : UInt32 { // block id: 228
    (var235 ?? ((var21|>func306)|>{ lambdaParameter302 : Option<Option<Float64>> => var51 }));
    let var2303 : ?(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16) = (Int16(Int8(101)) as (Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16));
    var var2323 : (Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16) = ('p', Int64(UInt32(UInt32(Int8(5)))), ((Int8(119)&127..Int8(-93)&127:(-109)|1) as Class9), Float32(-98.0), (Option<Class9>.None is Option<Bool>), "zjxSoa{+Hq.", UInt16(244));
    var var2434 : Option<(Float64, Unit, Bool, UInt64, Rune)> = Option<(Float64, Unit, Bool, UInt64, Rune)>.None;
    let var2515 : (Float64, Unit, Bool, UInt64, Rune) = ((-73.0), (), (Option<Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>>.Some(Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>.Some(('z', 63, Option<Class9>.Some(Class9()), Float32(80.0), false, """
%jt(]
JNfk*
""", UInt16(251)))) is (Int8, Option<UInt8>) -> Class324), UInt64(37), 'R');
    if (var1340) { (try { // block id: 2298
        var var2352 : Array<Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>> = Array<Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>>(10){ i => ("s*O]l?6[*Y" as (Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)) };
        if (true) { [var2303, var2303, var2303, Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>.Some((var1632, 111, Option<Class9>.Some(var74), var461, var2103, var2318, var742)), Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>.Some(var2323), Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>.Some(var2323), var2303, var2303, Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>.Some(('l', var736, Option<Class9>.None, Float32(122.0), false, var2318, var1641)), var2303] } else { var2352 } ;
        var376;
        Option<(Float64, Unit, Bool, UInt64, Rune)>.Some((0.0, (), false, var611, 'Z'))
    } catch (_) { // block id: 2432
        var2434
    } finally { // block id: 2436
        UInt32(85);
        var2440 += var461;
        Option<(Float64, Unit, Bool, UInt64, Rune)>.None
    } ?? match (var806) {
        case (caseVar2449 : Option<Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>>,_ : Option<Class324>,caseVar2450,caseVar2451 : Option<Option<Float64>>) => 
            var155;
            var2455
        
        case _ => 
            var2455
        
        case (_,caseVar2468 : Int16,_,_ : Option<Option<Option<Class9>>>) => 
            var2455
        
        case _ => 
            if (false) { var2455 } else { var2455 } 
        
    }) } else { (if (match (var2480) {
        case _ => 
            Int32(124) < Int32(75)
        
    }) { [var2491, ((-48.0), var451, false, UInt64(188), 'h'), var2455, (var2264, var376, var2251, UInt64(107), 'D'), var2455, var2515, (var155, var376, var1340, var611, var1632), var2515, var2455, var2491][6] } else { try { // block id: 2544
        var742 = var1641;
        ((-7.0), var1517, false, var611, var1632)
    } catch (e: Exception) { // block id: 2554
        var742 < UInt16(95);
        ();
        let var2565 : Bool = (((Int16(UInt16(181))&127..Int16(UInt8(75))&127:(Int64(UInt64(84))|1)) as Unit) is Option<Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>>);
        if (false) { (var2264, (), var2565, var611, 'B') } else { var2491 } 
    } } ) } ;
    var var2581 : Array<UInt32> = Array<UInt32>(10){ i => UInt32(UInt16(Int16(UInt8(175)))) };
    var2581[4]
}

public func func168(param169 : Unit) : Bool { // block id: 170
    (if (var180[1]) { var190 } else { (var180 as Option<Class9>) }  ?? if (try { // block id: 196
        ();
        ();
        var51
    } finally { // block id: 200
        var56;
        var51
    }) { var111 } else { (if (true) { var207 } else { var111 } ) } );
    var var2602 : (Int16) -> UInt32 = func226;
    try { // block id: 224
        let var2605 : Int16 = Int16(Int8(-123));
        var2605|>var2602;
        var loopTimeVar2612 : Int64 = 0;
        do {
            loopTimeVar2612++;

        } while ((false) && loopTimeVar2612 < 100 ) ;
        try { // block id: 2614
            var2147
        } finally { // block id: 2616
            var736 &= 126;
            var2264 + (-59.0)
        }
    } finally { // block id: 2623
        let var2626 : Int32 = Int32(UInt32(Int16(Int16(74))));
        var2626 | var1717;
        var loopTimeVar2642 : Int64 = 0;
        do {
            loopTimeVar2642++;
            var1113 |= var1113;
            var257 &= Int16(22)
        } while ((true) && loopTimeVar2642 < 100 ) ;
        var var2645 : Range<UInt32> = (UInt32(UInt8(81))&127..UInt32(UInt32(Int8(100)))&127:(Int64(UInt8(UInt8(Int8(-88))))|1));
        match (var2645) {
            case _ => 
                var376;
                ();
                var2264
            
            case caseVar2664 : ((Float64, Bool, Unit, String), Unit, Float64, Bool, Int16, Float64, Int16, Float64) => 
                ();
                var155
            
            case _ : Array<UInt32> => 
                var2264
            
            case _ => 
                22.0 / Float64((Int32((-53.0))) | 1)
            
        }
    };
    var var2686 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    let var2778 : ?Bool = (Int64(Int32(UInt16(UInt8(182)))) as Bool);
    if ((var257 % ((Int16(-83)) | 1)) != if (var2103) { // block id: 2684
        var2686;
        var51 ||= true;
        var78
    } else if (var51) { // block id: 2693
        var257
    } else { // block id: 2695
        var51;
        var782;
        var257 / ((var78) | 1)
    }) { // block id: 2701
        var var2727 : Range<UInt16> = (UInt16(49)&127..UInt16(214)&127:110|1);
        if (var1750) { // block id: 2704
            !var2251
        } else if (var1340) { // block id: 2708
            var2710;
            if (var1750) { (UInt16(244)&127..UInt16(132)&127:(-15)|1) } else { var2727 } ;
            false
        } else { // block id: 2730
            param169;
            Option<Option<Class9>>.Some(Option<Class9>.None);
            var2147 < (-100.0)
        }
    } else { // block id: 2737
        let var2770 : Range<UInt64> = (UInt64(33)&127..=UInt64(132)&127:98|1);
        try { // block id: 2739
            ();
            ();
            (UInt64(252)&127..=UInt64(61)&127:(-13)|1)
        } catch (_) { // block id: 2743
            if (true) { Enum759.defaultValue } else { Enum759.defaultValue } ;
            56;
            if (true) { (var611&127..=UInt64(183)&127:(126|1)) } else { (var611&127..=UInt64(66)&127:(34|1)) } 
        } finally { // block id: 2759
            var736 /= ((var2763) | 1);
            if (var1750) { var2770 } else { (UInt64(239)&127..UInt64(145)&127:40|1) } 
        };
        [(), (), (), (), (), (), (), (), (), ()][2];
        (var2778 ?? false)
    }
}


func func160(param161 : Int64, param162 : Option<Class9>, optionalParam163 ! : Class9 = Class9()) : Int64 { // block id: 165
    var var2786 : (Unit) -> Bool = func168;
    if ((try (resource = Class9()) { // block id: 2789

    } catch (e: Exception) { // block id: 2790
        ();
        if (var1750) { Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>.Some(var59) } else { Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>.None } ;
        ()
    } finally { // block id: 2798

    }|>var2786)) { // block id: 2799
        var2763
    } else if ((match (var387) {
        case 122 | 240 => 
            var376;
            Option<Bool>.None
        
        case caseVar2811 => 
            var2814;
            var235
        
        case 107 | 2 | 213 | 226 => 
            ();
            ();
            var235
        
        case 55 | 190 | 68 | 54 => 
            var1517;
            ();
            var235
        
        case _ => 
            var387 & var387;
            if (true) { Option<Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>>.None } else { Option<Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>>.Some(Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>.None) } ;
            var235
        
    } ?? false)) { // block id: 2841
        [(), (), (), (), (), (), (), (), (), ()][3];
        let var2883 : Range<UInt8> = (UInt8(108)&127..=UInt8(105)&127:(-99)|1);
        try (resource = Class9()) { // block id: 2846
            if (false) { (var2851, var281, var2856, var2147, var2856) } else { (var155, UInt16(125), (UInt16(197)&127..=UInt16(152)&127:101|1), (-16.0), var2856) } ;
            var2851 /= Float64((Int32(var2264)) | 1)
        } catch (_) { // block id: 2873
            var376;
            var21 |= var21
        } finally { // block id: 2878
            if (var2251) { (UInt8(123)&127..=UInt8(1)&127:11|1) } else { var2883 } ;
            ()
        };
        (Option<Int64>.Some(var736) ?? (-61))
    } else { // block id: 2894
        var190;
        try { // block id: 2897
            if (false) { var2901 } else { Option<Option<Class9>>.None } ;
            var736
        } catch (_) { // block id: 2905
            (-31) | var2763
        }
    }
}



main(): Int64 {
    try {
        var loopTimeVar31 : Int64 = 0;
        while ((var13.var16) && loopTimeVar31 < 100 ) {
            loopTimeVar31++;
            var21 **= (var21 & 3);
            let var28 : UInt16 = UInt16(20);
            UInt16(223) - var28
        };
        func33(namedParam34 : 'E', optionalParam35 : var155 ** Float64(Int32(var155) & 3));
        let var2923 : Array<Class9> = Array<Class9>(10){ i => Class9(namedParam2927 : UInt8(Int8(-59)), namedParam2928 : func168, optionalParam2931 : (Int8(40)&127..Int8(-63)&127:97|1), namedParam2936 : [UInt32(Int16(41)), UInt32(UInt16(149)), UInt32(UInt32(211)), UInt32(30), UInt32(44), UInt32(170), UInt32(Int16(10)), UInt32(98), UInt32(UInt8(62)), UInt32(90)]) };
        func160(try { // block id: 2910
            var376;
            (-33)
        } finally { // block id: 2913
            ();
            var376;
            var736 >> (((-65)) & 7)
        }, Option<Class9>.None, optionalParam163 : var2923[3])
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Class324 {
    public func func847(param848 : Int16, optionalParam849 ! : (Option<Option<Float64>>, Int8, Rune) = (((-89) as Option<Float64>), Int8(-64), 'k'), namedParam855 ! : (Option<(Rune, Int64, Option<Class9>, Float32, Bool, String, UInt16)>, Int32) -> Class324) : Bool { // block id: 859
        let var881 : UInt8 = UInt8(225);
        var var1036 : (Rune, Float64) -> Float64 = func33;
        let var1039 : Range<Int16> = (Int16(-125)&127..Int16(118)&127:15|1);
        func988(var1036, optionalParam995 : var1039)|>{ lambdaParameter863 : Option<Bool> => var var892 : Float64 = Float64((-48.0)); if (match {
            case (var155, (), false, UInt64(75), 'i')[2] => 
            if (true) { (var881, Int32(-61), Option<Option<Float64>>.Some(Option<Float64>.Some(14.0)), UInt8(53)) } else { var806 } ;
            66.0 > var892
            case _ => 
            var16
        }) { // block id: 897
            var var901 : ((Float64, Bool, Unit, String), Unit, Float64, Bool, Int16, Float64, Int16, Float64) = (((-31.0), ((113.0, false, (), ###"lWCGpbB(!}"###) is ((Float64, Bool, Unit, String), Unit, Float64, Bool, Int16, Float64, Int16, Float64)), (), """
PfmQJ
,Wv\\^
"""), (), Float64(Float32(Float32(Float32(124.0)))), (Option<Unit>.None is (Rune, Bool, Float64)), Int16(UInt16(UInt16(178))), Float64(Float64(Float32(Float32(-73.0)))), Int16(Int16(57)), (-128.0));
            var901[3]
        } else if (var16) { // block id: 932
            [(), (), var376, (), (), (), var951, (), var451, ()][3];
            var74.var16
        } else { // block id: 960
            if (true) { // block id: 963
                var451;
                var51 &&= true
            };
            [UInt16(141), UInt16(237), UInt16(35), var281, var976, UInt16(103), UInt16(20), var742, UInt16(75), UInt16(161)][3];
            var881 < UInt8(117)
        } }
    }
;
    private func func988(param989 : (Rune, Float64) -> Float64, optionalParam993 ! : Bool = false, optionalParam995 ! : Range<Int16> = (Int16(116)&127..Int16(-68)&127:103|1)) : Option<Bool> { // block id: 997
        let var1028 : Rune = '2';
        match (if (optionalParam993) { ((UInt8(189)&127..var1007&127:((-6)|1)), (UInt32(126)&127..=UInt32(145)&127:29|1), var736, var1013) } else { (var1017, (UInt32(67)&127..=UInt32(245)&127:(-109)|1), var1021, Option<UInt16>.None) } [3]) {
            case _ => 
                var1028;
                UInt64(27) ** (var611 & 3)
            
        };
        (false as Bool)
    }

}

extend Enum759 {

}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_trailing_closure_only_follow_name
// ASSERT: scan parse_expected_expr_or_decl_in
// ASSERT: scan parse_unexpected_declaration_in_scope
// ASSERT: scan parse_expected_character
// ASSERT: scan parse_expected_catch_or_finally_in_try
// ASSERT: scan parse_expected_left_brace


