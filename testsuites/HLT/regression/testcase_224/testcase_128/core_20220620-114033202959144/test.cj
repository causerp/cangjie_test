/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output


var var73 : UInt32 = UInt32(208)
public var var84 : Float64 = Float64(Float64(Float64(Float64(Float32(-45.0)))))
public let var194 : Range<Int32> = (Int32(1)&127..=Int32(35)&127:38|1)
var var200 : Array<Range<UInt8>> = Array<Range<UInt8>>(10){ i => (UInt8(104)&127..=UInt8(129)&127:89|1) }
var var250 : String = ###"~^^jP+g CI"###
public var var412 : Int64 = Int64(UInt64(Int32(UInt16(UInt16(248)))))
public let var486 : UInt8 = UInt8(190)
var var507 : Int16 = Int16(-80)
var var591 : Bool = true
var var606 : ?(UInt8, UInt64, Bool, Int16, Unit, UInt64) = Option<(UInt8, UInt64, Bool, Int16, Unit, UInt64)>.None
let var737 : (UInt8, UInt64, Bool, Int16, Unit, UInt64) = (UInt8(Int8(-72)), UInt64(34), true, Int16(Int8(75)), (), UInt64(124))
public let var755 : Array<Class7> = Array<Class7>(10){ i => Class7() }
var var768 : ?Bool = Option<Bool>.None
var var877 : Int8 = Int8(UInt8(73))
public var var895 : Float32 = Float32(Float32(Float32(Float32(Float32(66.0)))))
var var1042 : ?Int8 = Option<Int8>.None
public var var1118 : Range<UInt16> = (UInt16(71)&127..=UInt16(125)&127:116|1)
let var1146 : Int64 = Int64(36)
public let var1182 : UInt8 = UInt8(142)
let var1537 : Aggregate465 = Aggregate465()
let var1609 : Int64 = 53
let var1615 : (Int16, UInt32, Range<Int16>, Float64, Bool, Range<Int32>) = (Int16(-86), UInt32(UInt16(Int8(Int8(50)))), (Int16(UInt8(104))&127..Int16(Int16(UInt16(211)))&127:((-35)|1)), 2.0, ((UInt16(131)&127..UInt16(234)&127:81|1) is (Int16, UInt32, Range<Int16>, Float64, Bool, Range<Int32>)), (Int32(-9)&127..=Int32(UInt32(UInt8(252)))&127:(Int64(UInt64(Int16(25)))|1)))
public var var1660 : UInt64 = UInt64(199)
var var1749 : String = ###"T${var250}fPi${var250}0swU/j"###
var var1805 : Interface11 = Class7()
var var1847 : Range<UInt8> = (UInt8(UInt8(40))&127..UInt8(222)&127:((-7)|1))
public let var1858 : Range<UInt32> = (UInt32(232)&127..UInt32(244)&127:59|1)
public let var1909 : UInt16 = UInt16(UInt8(Int8(Int8(UInt8(100)))))
public var var1919 : Class7 = Class7()
let var1932 : Range<Int64> = ((-88)&127..=116&127:54|1)
let var1985 : Unit = ()
var var2028 : Enum309<Array<Range<UInt8>>, Int16> = Enum309<Array<Range<UInt8>>, Int16>.defaultValue
var var2033 : Enum1645 = Enum1645.defaultValue
public var var2131 : Enum309<Array<Range<UInt8>>, Int16> = Enum309<Array<Range<UInt8>>, Int16>.defaultValue
let var2134 : Array<Range<Int32>> = Array<Range<Int32>>(10){ i => (Int32(Int32(8))&127..=Int32(10)&127:((-19)|1)) }
public var var2214 : Int32 = Int32(UInt8(157))
public let var2522 : Bool = (((UInt16(53)&127..=UInt16(58)&127:112|1), (), (Int16(-107)&127..Int16(Int16(63))&127:(Int64((-85))|1)), (), 'X') is (Option<Bool>, Int8) -> Array<Class7>)
var var2780 : Int8 = Int8(-18)
public var var3055 : ((Int16, Range<UInt32>, UInt64), (UInt8, UInt64, Bool, Int16, Unit, UInt64), Int8, Interface11) = ((Int16(UInt8(UInt8(93))), (UInt32(UInt16(89))&127..=UInt32(202)&127:(65|1)), UInt64(200)), (UInt8(98), UInt64(144), ((Enum309<Array<Range<UInt8>>, Int16>.defaultValue as Unit) is Array<Class7>), Int16(-4), (), UInt64(45)), Int8(UInt8(UInt8(Int8(-55)))), Class7())
var var3086 : UInt16 = UInt16(Int8(UInt8(Int8(UInt8(40)))))
var var3104 : ?(UInt8, UInt64, Bool, Int16, Unit, UInt64) = Option<(UInt8, UInt64, Bool, Int16, Unit, UInt64)>.None
let var3199 : Unit = ()
public let var3593 : Bool = ([(UInt8(148)&127..=UInt8(8)&127:91|1), (UInt8(103)&127..=UInt8(171)&127:(-50)|1), (UInt8(121)&127..UInt8(237)&127:82|1), (UInt8(227)&127..=UInt8(240)&127:2|1), (UInt8(218)&127..=UInt8(240)&127:24|1), (UInt8(115)&127..=UInt8(198)&127:(-92)|1), (UInt8(131)&127..=UInt8(106)&127:(-43)|1), (UInt8(39)&127..=UInt8(96)&127:19|1), (UInt8(205)&127..=UInt8(141)&127:(-64)|1), (UInt8(139)&127..UInt8(179)&127:124|1)] is (Interface10) -> Option<Range<UInt16>>)
var var3675 : UInt8 = UInt8(87)
public let var3728 : Unit = ()
public interface Interface11 {
    func func2726(param2727 : Array<Range<UInt16>>, namedParam2728 ! : Range<UInt32>, namedParam2729 ! : UInt64) : Unit { // block id: 2730

    }

}

public interface Interface12 <: Interface11 {
    static func func1325() : Int8 { // block id: 1326
        let var2692 : Option<(Int8, Int64, UInt32, (Int16, Range<UInt32>, UInt64))> = Option<(Int8, Int64, UInt32, (Int16, Range<UInt32>, UInt64))>.None;
        if ((Option<Interface11>.Some(var1805) is Int64)) { try { // block id: 2673
            if (true) { var1858 } else { (var73&127..=UInt32(148)&127:((-35)|1)) } 
        } catch (e: Exception) { // block id: 2681
            if (var2522) { Aggregate465() } else { var1537 } ;
            ();
            (UInt32(52)&127..=UInt32(25)&127:(-119)|1)
        } finally { // block id: 2688
            if (true) { var2692 } else { var2692 } ;
            "cnN'#J @Pv";
            (UInt32(205)&127..=UInt32(190)&127:65|1)
        } } else { var1858 } |>(func1550~>func1329);
        Int8(1)
    }

}

public interface Interface10 <: Interface11 & Interface12 {
    func func17() : Unit { // block id: 18
        """
rm'Q8
k6$xO
"""|>func20;
        let var3866 : ?Enum1645 = Option<Enum1645>.Some(Enum1645.defaultValue);
        var loopTimeVar3887 : Int64 = 0;
        while ((try { // block id: 3860
            ###"u_'>$`fNn?"###;
            false
        } catch (_) { // block id: 3863
            var1985;
            var3866;
            var2522
        } finally { // block id: 3870
            var3199;
            (95&127..=(-107)&127:(var1609|1));
            var3593
        }) && loopTimeVar3887 < 100 ) {
            loopTimeVar3887++;
            var3728;
            if (false) { // block id: 3881
                ();
                var73 *= var73
            }
        }
    }
;
    func func2726(param2727 : Array<Range<UInt16>>, namedParam2728 ! : Range<UInt32>, namedParam2729 ! : UInt64) : Unit { // block id: 2730

    }

}

public open class Class7 <: Interface10 & Resource {
    public init() { // block id: 9

    }
;
    public static var var491 : Int16 = Int16(-50);
    static var var594 : ?Bool = Option<Bool>.None;
    public static var var615 : UInt64 = UInt64(0);
    public init(param581 : (Int16, UInt32, Range<Int16>, Float64, Bool, Range<Int32>)) { // block id: 582
        var loopTimeVar617 : Range<UInt64> = (UInt64(74)&127..=UInt64(60)&127:((-57)|1));
        for (i in loopTimeVar617 where (if (var591) { var594 } else { var594 }  ?? var591)) {
            Class7();
            (var606 ?? (var486, UInt64(144), true, var507, (), var615))
        }
    }
;
    private static var var912 : Unit = ();
    public init(optionalParam808 ! : (Range<UInt32>) -> Unit = func454, namedParam812 ! : UInt16, namedParam813 ! : Enum309<Array<Range<UInt8>>, Int16>, optionalParam814 ! : Array<Range<Int32>> = Array<Range<Int32>>(10){ i => (Int32(UInt32(Int8(-90)))&127..Int32(71)&127:((-65)|1)) }) { // block id: 859
        try (resource = Class7()) { // block id: 861
            try { // block id: 863
                var737;
                (Int8(37)&127..=Int8(3)&127:(-51)|1)
            } finally { // block id: 866
                var84;
                if (var591) { (Int8(72)&127..Int8(53)&127:(var412|1)) } else { (Int8(35)&127..=var877&127:(var412|1)) } 
            };
            (UInt32(114)&127..=var73&127:(var412|1))|>func454
        } catch (e: Exception) { // block id: 887
            var loopTimeVar901 : Range<UInt64> = (UInt64(UInt64(UInt8(166)))&127..=UInt64(154)&127:((-112)|1));
            for (i in loopTimeVar901 where false) {
                let var892 : Unit = ();
                var892;
                var895
            };
            (var912, var737, var912, (UInt8(86)&127..=UInt8(238)&127:(-57)|1), (var73&127..UInt32(93)&127:(95|1)))[0]
        }
    }
;
    var var1259 : Unit = ();
    private static let var1285 : ?Class7 = Option<Class7>.None;
    private static var var1293 : UInt16 = UInt16(63);
    public static let var1319 : Class7 = Class7();
    protected let var1322 : Int8 = Int8(-58);
    public var var1993 : Rune = 'q';
    var var2000 : (Range<UInt16>, Unit, Range<Int16>, Unit, Rune) = ((UInt16(117)&127..UInt16(226)&127:(82|1)), (), (Int16(45)&127..=Int16(-106)&127:(-77)|1), (), 'R');
    public init(param1819 : Range<UInt8>, optionalParam1820 ! : Int32 = Int32(55), optionalParam1822 ! : (Int16, UInt32, Range<Int16>, Float64, Bool, Range<Int32>) = (Int16(-76), UInt32(38), (Int16(114)&127..=Int16(-13)&127:(-4)|1), (-122.0), true, (Int32(-10)&127..=Int32(-64)&127:76|1)), namedParam1830 ! : Array<Interface11>) { // block id: 1831
        match (var1919.var2000) {
            case _ => 
                if (true) { var1805 } else { Class7(var1615) } ;
                (UInt32(130)&127..UInt32(167)&127:(-86)|1)
            
        }|>(func1971~>func1834);
        match (((var73 as Enum1645) ?? match (var2028) {
                case _ => 
                    var2033
                
            })) {
            case _ : (Unit, (UInt8, UInt64, Bool, Int16, Unit, UInt64), Unit, Range<UInt8>, Range<UInt32>) => 
                var591 &&= false;
                var591 ||= true;
                ()
            
            case _ => 
                var912
            
        };
        var var2050 : ?Aggregate465 = Option<Aggregate465>.Some(Aggregate465());
        let var2063 : Array<Range<Int32>> = [(Int32(Int16(UInt8(88)))&127..Int32(UInt32(150))&127:(Int64(Int8(Int8(-67)))|1)), (Int32(33)&127..=Int32(1)&127:80|1), (Int32(-97)&127..=Int32(-111)&127:38|1), (Int32(-101)&127..Int32(-64)&127:(26|1)), (Int32(71)&127..Int32(UInt32(Int16(-95)))&127:(Int64(UInt16(92))|1)), (Int32(Int32(Int8(-16)))&127..Int32(84)&127:(Int64(Int32(UInt8(83)))|1)), (Int32(-96)&127..=Int32(63)&127:(-121)|1), (Int32(Int8(UInt8(124)))&127..Int32(32)&127:((-15)|1)), (Int32(UInt32(69))&127..=Int32(UInt8(Int8(87)))&127:(Int64(UInt8(Int8(36)))|1)), (Int32(-106)&127..=Int32(35)&127:48|1)];
        let var2113 : Interface12 = Class7();
        match (var2050) {
            case caseVar2055 => 
                if (var591) { Class7(namedParam812 : var1909, namedParam813 : Enum309<Array<Range<UInt8>>, Int16>.defaultValue, optionalParam814 : var2063) } else { var2113 } ;
                ()
            
            case caseVar2118 : (Int16, UInt32, Range<Int16>, Float64, Bool, Range<Int32>) => 
                ()
            
            case _ => 
                ();
                ()
            
        }
    }
;
    public init(namedParam995 ! : (Unit, (UInt8, UInt64, Bool, Int16, Unit, UInt64), Unit, Range<UInt8>, Range<UInt32>), namedParam996 ! : Range<UInt8>, namedParam997 ! : Enum309<Array<Range<UInt8>>, Int16>, optionalParam998 ! : Int64 = Int64(UInt16(Int16(Int8(-113))))) { // block id: 1003
        func1005(optionalParam1006 : if ((true && var591)) { [(Int32(88)&127..=Int32(70)&127:(-53)|1), (Int32(-119)&127..=Int32(-79)&127:(-50)|1), (Int32(120)&127..=Int32(-59)&127:54|1), (Int32(-64)&127..Int32(-125)&127:(-114)|1), (Int32(-26)&127..=Int32(-107)&127:15|1), (Int32(14)&127..=Int32(57)&127:26|1), (Int32(86)&127..Int32(42)&127:124|1), (Int32(-113)&127..=Int32(121)&127:(-39)|1), (Int32(-55)&127..=Int32(-63)&127:(-9)|1), (Int32(-80)&127..Int32(68)&127:84|1)][7] } else { match ((var491, UInt32(157), (Int16(-114)&127..Int16(-55)&127:91|1), (-72.0), var591, var194)) {
            case _ => 
                (Int32(-113)&127..Int32(55)&127:(-107)|1)
            
        } } );
        let var1311 : UInt8 = UInt8(96);
        var loopTimeVar1315 : Int64 = 0;
        while ((func305((var1285 ?? Class7()))) && loopTimeVar1315 < 100 ) {
            loopTimeVar1315++;
            try { // block id: 1290
                var1293 >>= ((UInt16(63)) & 7);
                var var1303 : Int64 = Int64(UInt32(Int16(-15)));
                if (false) { (UInt8(13)&127..UInt8(223)&127:123|1) } else { (UInt8(57)&127..=UInt8(46)&127:(var1303|1)) } 
            } catch (e: Exception) { // block id: 1307
                (UInt8(253)&127..=var1311&127:(var412|1))
            }
        };
        (var1319.var1322) << ((func1325()) & 7)
    }
;
    public init(param2919 : Float32, param2920 : (Range<UInt16>, Unit, Range<Int16>, Unit, Rune)) { // block id: 2921
        var2214 %= ((Int32(Int32(-7)) | try { // block id: 2928
            var2214
        } finally { // block id: 2930
            var912;
            var2214
        }) | 1);
        match ((Int16(-62)&127..Int16(85)&127:(-112)|1)) {
            case caseVar2937 : (Unit, (UInt8, UInt64, Bool, Int16, Unit, UInt64), Unit, Range<UInt8>, Range<UInt32>) => 
                ();
                Enum1645.defaultValue;
                [var1118, var1118, var1118, (UInt16(128)&127..UInt16(52)&127:(var1146|1)), (var1909&127..UInt16(210)&127:((-5)|1)), var1118, (UInt16(6)&127..UInt16(45)&127:125|1), (UInt16(253)&127..UInt16(128)&127:(-8)|1), (var1293&127..=UInt16(76)&127:(var1609|1)), var1118]
            
            case caseVar2963 : Int64 => 
                var1985;
                [(UInt16(98)&127..UInt16(39)&127:56|1), (UInt16(97)&127..=UInt16(187)&127:54|1), (UInt16(204)&127..UInt16(221)&127:119|1), (UInt16(8)&127..UInt16(79)&127:(-22)|1), (UInt16(99)&127..=UInt16(188)&127:86|1), (UInt16(88)&127..UInt16(62)&127:(-14)|1), (UInt16(245)&127..UInt16(25)&127:121|1), (UInt16(73)&127..=UInt16(154)&127:(-87)|1), (UInt16(243)&127..UInt16(233)&127:(-81)|1), (UInt16(166)&127..UInt16(63)&127:18|1)]
            
            case _ => 
                var1985;
                if (false) { [(UInt16(101)&127..=UInt16(110)&127:58|1), (UInt16(200)&127..UInt16(160)&127:(-72)|1), (UInt16(155)&127..=UInt16(101)&127:(-38)|1), (UInt16(17)&127..UInt16(184)&127:92|1), (UInt16(155)&127..UInt16(26)&127:24|1), (UInt16(214)&127..UInt16(183)&127:65|1), (UInt16(25)&127..UInt16(62)&127:93|1), (UInt16(129)&127..=UInt16(39)&127:102|1), (UInt16(71)&127..=UInt16(102)&127:66|1), (UInt16(6)&127..=UInt16(234)&127:116|1)] } else { [var1118, (UInt16(41)&127..UInt16(237)&127:114|1), (var1909&127..=var1293&127:(var412|1)), (UInt16(208)&127..=var1909&127:(var412|1)), (var1909&127..var1293&127:((-43)|1)), var1118, (UInt16(18)&127..=UInt16(173)&127:(-4)|1), (var1293&127..var1293&127:(var1609|1)), (var1293&127..var1293&127:(var1609|1)), var1118] } 
            
        };
        var loopTimeVar3006 : Int64 = 0;
        while ((Float32(-7.0) != Float32(param2919)) && loopTimeVar3006 < 100 ) {
            loopTimeVar3006++;

        }
    }
;
    let var3829 : (UInt8, UInt64, Bool, Int16, Unit, UInt64) = (UInt8(228), UInt64(243), true, Int16(-47), (), UInt64(89))
    public func isClosed(): Bool { return false }
    public func close(): Unit {}
}

public func func64(param65 : String) : Interface11 { // block id: 66
    var var96 : Bool = false;
    if (try { // block id: 69
        Class7();
        var73 %= ((var73) | 1);
        true
    } catch (_) { // block id: 77
        false
    }) { """
0(^NY
:j721
""" } else { try { // block id: 81
        var84 /= Float64((Int32(var84)) | 1);
        ();
        """
C.W*i
i}vqq
"""
    } catch (e: Exception) { // block id: 93
        var96 &&= false;
        param65
    } } ;
    func func101(param102 : Range<Int32>, namedParam103 ! : Range<Int64>, namedParam104 ! : Range<UInt8>) : Interface11 { // block id: 105
        var var109 : Array<Interface11> = Array<Interface11>(10){ i => Class7() };
        var109[5]
    }
;
    var var127 : Array<Range<Int32>> = Array<Range<Int32>>(10){ i => (Int32(80)&127..Int32(-55)&127:(Int64(Int64(Int8(-15)))|1)) };
    var var179 : Interface10 = Class7();
    let var191 : UInt64 = UInt64(81);
    func101(try { // block id: 125
        var127
    } catch (_) { // block id: 172
        ();
        var127
    }[8], namedParam103 : if ((var179 is Interface12)) { [(79&127..=80&127:(-46)|1), (8&127..(-104)&127:(-28)|1), ((-86)&127..21&127:(-39)|1), (114&127..37&127:121|1), (70&127..=26&127:10|1), (16&127..(-75)&127:107|1), (65&127..=32&127:(-54)|1), ((-120)&127..(-81)&127:(-65)|1), (74&127..=(-53)&127:(-3)|1), (49&127..=(-85)&127:35|1)][3] } else { ('q', ((-110)&127..(-126)&127:41|1), var191, var194)[1] } , namedParam104 : var200[6])
}

public enum Enum309<T0, T1> where T0 <: Array<Range<UInt8>>, T1 <: Int16 {
    defaultValue |
    enumValue2716
}
func func305(param306 : Class7) : Bool { // block id: 307
    var var312 : Enum309<Array<Range<UInt8>>, Int16> = Enum309<Array<Range<UInt8>>, Int16>.defaultValue;
    match (var312) {
        case caseVar316 => 
            let var320 : Bool = false;
            var320 || var320
        
        case _ => 
            ();
            if (false) { (Int32(-59)&127..=Int32(6)&127:(8|1)) } else { (Int32(104)&127..Int32(119)&127:(-59)|1) } ;
            var var334 : Bool = (UInt64(UInt64(17)) is Array<Interface11>);
            var334
        
    }
}


public func func454(param455 : Range<UInt32>) : Unit { // block id: 456

}

public struct Aggregate465 {
    public init() { // block id: 467

    }
;
    private static let var478 : Float32 = Float32(15.0);
    public static func func1889(optionalParam1890 ! : Option<Class7> = (UInt64(84) as Class7)) : Unit { // block id: 1893
        let var1903 : (Range<UInt32>) -> Unit = { lambdaParameter1906 : Range<UInt32> =>  };
        let var1929 : Rune = 'o';
        if (func1754(Class7(optionalParam808 : var1903, namedParam812 : var1909, namedParam813 : Enum309<Array<Range<UInt8>>, Int16>.defaultValue))) { try { // block id: 1917
            var1919
        } finally { // block id: 1921
            optionalParam1890;
            ();
            Class7(var1615)
        } } else { match ((var1929, var1932, var1660, var194)) {
            case (caseVar1938,caseVar1939,caseVar1940,_ : (Int16, Range<UInt32>, UInt64)) => 
                Option<Unit>.None;
                Class7();
                Class7()
            
            case caseVar1947 => 
                (Int8(-29)&127..=Int8(14)&127:101|1);
                var1919
            
            case _ => 
                (var507, var1858, var1660);
                Class7(optionalParam808 : func454, namedParam812 : var1909, namedParam813 : Enum309<Array<Range<UInt8>>, Int16>.defaultValue)
            
            case _ => 
                ();
                var877++;
                var1919
            
        } } |>func1895
    }
;
    public func func472(param473 : Range<UInt64>, namedParam474 ! : Interface10, namedParam475 ! : Array<Range<Int64>>) : Unit { // block id: 476
        var478;
        let var494 : (Bool) -> Int16 = { lambdaParameter497 : Bool => Int16(-101) };
        ((Class7()|>func305)|>var494) / ((((Int16(-28) % ((var507) | 1)) % ((Int16(UInt8(106))) | 1))) | 1);
        let var3258 : (Range<UInt32>) -> (Range<UInt32>) -> Unit = func3154;
        (match (var2134) {
            case caseVar3269 : Array<Range<Int32>> => 
                Option<Range<UInt32>>.Some(var1858)
            
            case caseVar3275 => 
                var var3278 : ?Range<UInt32> = (((), (UInt8(UInt8(123)), UInt64(UInt16(79)), ([Class7(optionalParam808 : func454, namedParam812 : UInt16(107), namedParam813 : Enum309<Array<Range<UInt8>>, Int16>.enumValue2716), Class7(namedParam812 : UInt16(242), namedParam813 : Enum309<Array<Range<UInt8>>, Int16>.enumValue2716, optionalParam814 : [(Int32(79)&127..Int32(-43)&127:(-12)|1), (Int32(-109)&127..Int32(9)&127:(-38)|1), (Int32(-68)&127..=Int32(-22)&127:30|1), (Int32(100)&127..Int32(103)&127:21|1), (Int32(-37)&127..Int32(86)&127:94|1), (Int32(94)&127..Int32(-102)&127:(-9)|1), (Int32(-111)&127..=Int32(-112)&127:45|1), (Int32(75)&127..Int32(93)&127:(-120)|1), (Int32(-104)&127..=Int32(7)&127:75|1), (Int32(33)&127..=Int32(117)&127:60|1)]), Class7(optionalParam808 : func454, namedParam812 : UInt16(250), namedParam813 : Enum309<Array<Range<UInt8>>, Int16>.defaultValue), Class7(), Class7((Int16(66), UInt32(73), (Int16(-84)&127..Int16(-34)&127:(-66)|1), 37.0, true, (Int32(9)&127..=Int32(-91)&127:((-116)|1)))), Class7((Int16(-85), UInt32(36), (Int16(-125)&127..Int16(-73)&127:(-10)|1), (-28.0), true, (Int32(54)&127..Int32(95)&127:((-119)|1)))), Class7(), Class7(), Class7(), Class7(namedParam812 : UInt16(62), namedParam813 : Enum309<Array<Range<UInt8>>, Int16>.defaultValue)] is (Range<UInt32>) -> Unit), Int16(Int8(-35)), (), UInt64(UInt8(113))), (), (UInt8(170)&127..=UInt8(149)&127:(-1)|1), (UInt32(110)&127..UInt32(108)&127:(-17)|1)) as Range<UInt32>);
                var3278
            
            case _ => 
                var var3344 : ?Range<UInt32> = (126.0 as Range<UInt32>);
                if (true) { var3344 } else { Option<Range<UInt32>>.Some(var1858) } 
            
        } ?? (Option<Range<UInt32>>.None ?? (var73&127..var73&127:(var1609|1))))|>(var3258~>func513)
    }

}

public func func482(param483 : Bool) : Int16 { // block id: 484
    var486;
    Class7.var491
}



func func748(optionalParam749 ! : Option<Bool> = ("zfx$vj!ga{C" as Bool), namedParam752 ! : Int8) : Array<Class7> { // block id: 753
    var755
}

public func func520(namedParam521 ! : Enum309<Array<Range<UInt8>>, Int16>, optionalParam522 ! : Range<UInt64> = (UInt64(110)&127..=UInt64(3)&127:(-119)|1), namedParam524 ! : Int16, optionalParam525 ! : Int16 = Int16(UInt8(Int8(Int8(Int8(70)))))) : Class7 { // block id: 531
    let var576 : Bool = ([Class7((Int16(47), UInt32(188), (Int16(-69)&127..=Int16(47)&127:((-105)|1)), 94.0, true, (Int32(46)&127..=Int32(87)&127:(-23)|1))), Class7((Int16(-124), UInt32(11), (Int16(-33)&127..Int16(-38)&127:((-33)|1)), 111.0, true, (Int32(-108)&127..Int32(58)&127:((-44)|1)))), Class7(), Class7((Int16(-9), UInt32(41), (Int16(-105)&127..=Int16(-56)&127:10|1), 84.0, true, (Int32(-3)&127..=Int32(77)&127:((-122)|1)))), Class7(), Class7((Int16(-96), UInt32(153), (Int16(11)&127..Int16(74)&127:(-52)|1), 58.0, false, (Int32(25)&127..Int32(70)&127:(-41)|1))), Class7((Int16(-106), UInt32(160), (Int16(-126)&127..Int16(-109)&127:98|1), (-107.0), true, (Int32(0)&127..=Int32(48)&127:((-114)|1)))), Class7((Int16(-87), UInt32(93), (Int16(-40)&127..=Int16(16)&127:93|1), (-8.0), false, (Int32(-47)&127..Int32(114)&127:105|1))), Class7((Int16(-16), UInt32(156), (Int16(-45)&127..Int16(66)&127:((-94)|1)), 34.0, false, (Int32(-89)&127..=Int32(19)&127:42|1))), Class7()] is Range<UInt16>);
    let var699 : (Int16, UInt32, Range<Int16>, Float64, Bool, Range<Int32>) = (Int16(Int8(-88)), UInt32(UInt32(192)), (Int16(UInt16(UInt16(176)))&127..Int16(Int8(UInt8(112)))&127:(101|1)), 120.0, false, (Int32(32)&127..=Int32(98)&127:(-62)|1));
    let var724 : Float64 = 40.0;
    func func536(namedParam537 ! : Rune, optionalParam538 ! : Range<UInt32> = (UInt32(UInt32(251))&127..=UInt32(Int16(112))&127:(106|1)), namedParam545 ! : UInt32, namedParam546 ! : (UInt8, UInt64, Bool, Int16, Unit, UInt64)) : Bool { // block id: 547
        var var565 : Int32 = Int32(UInt16(Int8(UInt8(66))));
        var var572 : Array<Range<Int64>> = [(73&127..=85&127:35|1), ((-29)&127..29&127:58|1), (72&127..=66&127:(-43)|1), ((-43)&127..=74&127:66|1), ((-74)&127..=83&127:(-73)|1), ((-28)&127..97&127:47|1), (8&127..(-18)&127:45|1), ((-70)&127..=97&127:105|1), (125&127..=(-102)&127:116|1), ((-42)&127..=12&127:(-62)|1)];
        let var718 : Int16 = Int16(UInt16(226));
        try { // block id: 551
            (Int16(24), UInt32(164), (Int16(82)&127..=Int16(116)&127:6|1), var84, false, (Int32(63)&127..=Int32(-49)&127:((-58)|1)))
        } catch (_) { // block id: 562
            var565 &= var565;
            var572;
            if (var576) { var699 } else { (var718, namedParam545, (Int16(-125)&127..Int16(65)&127:78|1), var724, false, (Int32(-18)&127..var565&127:(var412|1))) } 
        }[4]
    }
;
    let var733 : Rune = 'R';
    var var774 : Array<Class7> = Array<Class7>(10){ i => Class7() };
    if (func536(namedParam537 : var733, namedParam545 : UInt32(238), namedParam546 : var737)) { func748(optionalParam749 : var768, namedParam752 : Int8(-29)) } else { try { // block id: 772
        var774
    } catch (_) { // block id: 965
        let var967 : Unit = ();
        var967;
        var967;
        var var976 : Class7 = Class7(namedParam812 : UInt16(15), namedParam813 : Enum309<Array<Range<UInt8>>, Int16>.defaultValue, optionalParam814 : [(Int32(5)&127..Int32(-19)&127:(-54)|1), (Int32(1)&127..=Int32(28)&127:(-92)|1), (Int32(-73)&127..=Int32(32)&127:15|1), (Int32(44)&127..=Int32(126)&127:15|1), (Int32(-60)&127..=Int32(115)&127:11|1), (Int32(-21)&127..=Int32(41)&127:(-55)|1), (Int32(-28)&127..=Int32(-3)&127:82|1), (Int32(-9)&127..Int32(94)&127:21|1), (Int32(29)&127..Int32(28)&127:27|1), (Int32(-38)&127..=Int32(98)&127:(-85)|1)]);
        [Class7(namedParam812 : UInt16(72), namedParam813 : Enum309<Array<Range<UInt8>>, Int16>.defaultValue, optionalParam814 : [(Int32(116)&127..=Int32(-40)&127:3|1), (Int32(26)&127..Int32(-105)&127:(-113)|1), (Int32(66)&127..Int32(-42)&127:20|1), (Int32(-75)&127..Int32(-1)&127:87|1), (Int32(25)&127..Int32(108)&127:96|1), (Int32(-87)&127..Int32(-11)&127:(-26)|1), (Int32(-60)&127..=Int32(-87)&127:(-102)|1), (Int32(-47)&127..Int32(8)&127:48|1), (Int32(-46)&127..=Int32(26)&127:118|1), (Int32(88)&127..=Int32(32)&127:13|1)]), var976, Class7(var699), Class7(), var976, var976, var976, var976, var976, var976]
    } } [2]
}



public func func1030(param1031 : Interface10) : Option<Range<UInt16>> { // block id: 1032
    let var1050 : Aggregate465 = Aggregate465();
    var loopTimeVar1056 : Range<UInt64> = (UInt64(Int16(-71))&127..UInt64(131)&127:(Int64(Int8(UInt8(169)))|1));
    for (i in loopTimeVar1056 where Int8(-87) != (var1042 ?? Int8(-22))) {
        if (true) { Aggregate465() } else { var1050 } ;
        if (var591) { Aggregate465() } else { var1050 } 
    };
    var var1065 : ?Range<UInt16> = Option<Range<UInt16>>.Some((UInt16(57)&127..UInt16(229)&127:(-95)|1));
    var1065
}

func func1005(optionalParam1006 ! : Range<Int32> = (Int32(Int32(UInt16(254)))&127..=Int32(UInt8(UInt8(89)))&127:(Int64(Int64(UInt32(UInt16(124))))|1)), optionalParam1018 ! : Enum309<Array<Range<UInt8>>, Int16> = Enum309<Array<Range<UInt8>>, Int16>.defaultValue) : Option<Bool> { // block id: 1020
    let var1022 : Unit = ();
    var1022;
    let var1069 : (Interface10) -> Option<Range<UInt16>> = func1030;
    var var1077 : Array<Range<Int32>> = [(Int32(UInt32(139))&127..=Int32(32)&127:(46|1)), (Int32(50)&127..Int32(-98)&127:(-108)|1), (Int32(-120)&127..=Int32(18)&127:108|1), (Int32(117)&127..Int32(119)&127:(-10)|1), (Int32(105)&127..=Int32(-2)&127:(-85)|1), (Int32(67)&127..Int32(-116)&127:(77|1)), (Int32(13)&127..Int32(110)&127:119|1), (Int32(-79)&127..Int32(109)&127:(-58)|1), (Int32(-83)&127..Int32(-98)&127:((-123)|1)), (Int32(-59)&127..=Int32(-29)&127:(56|1))];
    let var1137 : UInt16 = UInt16(UInt8(204));
    ((if (true) { Class7(namedParam812 : UInt16(215), namedParam813 : Enum309<Array<Range<UInt8>>, Int16>.defaultValue, optionalParam814 : var1077) } else { Class7(optionalParam808 : func454, namedParam812 : UInt16(177), namedParam813 : optionalParam1018) } |>var1069) ?? if (var591) { [(UInt16(140)&127..=UInt16(51)&127:96|1), (UInt16(32)&127..UInt16(41)&127:(var412|1)), (UInt16(124)&127..UInt16(165)&127:61|1), var1118, (UInt16(191)&127..UInt16(97)&127:50|1), var1118, (UInt16(13)&127..UInt16(124)&127:(-102)|1), (UInt16(100)&127..=UInt16(157)&127:(var412|1)), (UInt16(206)&127..=UInt16(35)&127:(-93)|1), (UInt16(128)&127..UInt16(13)&127:((-49)|1))] } else { [(UInt16(17)&127..UInt16(247)&127:(-99)|1), (UInt16(170)&127..=var1137&127:(var412|1)), (UInt16(50)&127..UInt16(73)&127:33|1), (UInt16(214)&127..var1137&127:(var1146|1)), (var1137&127..UInt16(26)&127:(var1146|1)), (var1137&127..=var1137&127:(var412|1)), (var1137&127..var1137&127:(var412|1)), (UInt16(238)&127..=UInt16(151)&127:90|1), (var1137&127..=var1137&127:(var1146|1)), var1118] } [8]);
    let var1195 : UInt8 = UInt8(UInt8(21));
    var var1238 : (Range<UInt16>, Unit, Range<Int16>, Unit, Rune) = ((UInt16(70)&127..=UInt16(188)&127:(-48)|1), (), (Int16(Int16(Int16(-84)))&127..=Int16(Int8(Int8(-38)))&127:(Int64(Int8(76))|1)), (), 's');
    var var1256 : Class7 = Class7();
    try { // block id: 1169
        var var1179 : Int32 = Int32(100);
        var var1206 : Class7 = Class7((Int16(UInt16(Int8(80))), UInt32(Int8(Int8(-9))), (Int16(-56)&127..=Int16(-4)&127:(-120)|1), Float64(Float32(79.0)), true, (Int32(-28)&127..=Int32(-6)&127:106|1)));
        match (Option<Int8>.None) {
            case caseVar1174 => 
                ();
                var1179++;
                var1182
            
            case caseVar1186 : Interface10 => 
                ();
                var486
            
            case caseVar1192 => 
                var1195
            
            case caseVar1200 : Array<Class7> => 
                UInt8(87)
            
            case _ => 
                var1206;
                UInt8(40)
            
        };
        (UInt8(199), (), Int8(-123), var895)[1];
        if (true) { Option<Bool>.Some(var591) } else { Option<Bool>.None } 
    } finally { // block id: 1234
        var1238[3];
        var1256.var1259;
        (Int8(68) as Bool)
    }
}

func func1334(param1335 : Interface12) : (UInt8, UInt64, Bool, Int16, Unit, UInt64) { // block id: 1336
    var var1343 : (UInt8, Unit, Int8, Float32) = (UInt8(Int8(-18)), (), Int8(115), Float32(73.0));
    match (var1343) {
        case _ => 
            UInt64(115) ^ UInt64(26);
            var var1356 : (String, Array<(UInt8, UInt64, Bool, Int16, Unit, UInt64)>, Range<Int16>, Range<Int16>) = ("""
dr5i3
VOha[
""", [(UInt8(Int8(-56)), UInt64(31), ((Int32(41)&127..=Int32(31)&127:(73|1)) is Interface10), Int16(-39), (), UInt64(43)), (UInt8(UInt8(171)), UInt64(UInt32(14)), false, Int16(-11), (), UInt64(43)), (UInt8(Int8(41)), UInt64(UInt16(165)), ((UInt32(125)&127..UInt32(64)&127:(54|1)) is Rune), Int16(Int8(74)), (), UInt64(102)), (UInt8(Int8(75)), UInt64(251), (Option<Bool>.Some(true) is Interface12), Int16(UInt8(120)), (), UInt64(247)), (UInt8(134), UInt64(UInt16(141)), ([(UInt16(169)&127..UInt16(242)&127:(-116)|1), (UInt16(119)&127..=UInt16(195)&127:89|1), (UInt16(25)&127..UInt16(17)&127:111|1), (UInt16(134)&127..=UInt16(25)&127:(-62)|1), (UInt16(15)&127..=UInt16(182)&127:(-94)|1), (UInt16(18)&127..=UInt16(9)&127:10|1), (UInt16(210)&127..UInt16(237)&127:(-123)|1), (UInt16(143)&127..UInt16(121)&127:18|1), (UInt16(101)&127..UInt16(136)&127:76|1), (UInt16(110)&127..=UInt16(1)&127:95|1)] is (Rune, Range<UInt32>, UInt32, (UInt8, UInt64, Bool, Int16, Unit, UInt64)) -> Bool), Int16(UInt16(132)), (), UInt64(Int32(123))), (UInt8(251), UInt64(UInt8(152)), false, Int16(-36), (), UInt64((-70))), (UInt8(UInt8(154)), UInt64(247), ((UInt8(205), (), Int8(-13), Float32(61.0)) is Aggregate465), Int16(-62), (), UInt64((-58))), (UInt8(UInt8(247)), UInt64(UInt32(136)), false, Int16(Int16(-61)), (), UInt64(Int16(57))), (UInt8(Int8(39)), UInt64(72), true, Int16(UInt16(31)), (), UInt64(UInt16(182))), (UInt8(Int8(43)), UInt64(176), ([(UInt16(252)&127..UInt16(100)&127:86|1), (UInt16(26)&127..UInt16(61)&127:51|1), (UInt16(17)&127..=UInt16(87)&127:108|1), (UInt16(219)&127..=UInt16(251)&127:116|1), (UInt16(14)&127..=UInt16(68)&127:(-22)|1), (UInt16(98)&127..UInt16(118)&127:86|1), (UInt16(60)&127..UInt16(11)&127:(-92)|1), (UInt16(112)&127..=UInt16(226)&127:11|1), (UInt16(154)&127..UInt16(75)&127:(-4)|1), (UInt16(21)&127..UInt16(224)&127:(-107)|1)] is Option<Int8>), Int16(-53), (), UInt64(235))], (Int16(58)&127..Int16(90)&127:71|1), (Int16(-29)&127..=Int16(-5)&127:(-60)|1));
            var1356
        
    }[1][0]
}


public func func1329(param1330 : (Rune, Range<Int64>, UInt64, Range<Int32>)) : Unit { // block id: 1331
    UInt64(217);
    let var1475 : (Interface12) -> (UInt8, UInt64, Bool, Int16, Unit, UInt64) = { lambdaParameter1478 : Interface12 => (UInt8(Int8(Int8(-12))), UInt64(73), ((Int32(-53)&127..Int32(108)&127:(33|1)) is Range<Int32>), Int16(UInt16(144)), (), UInt64(200)) };
    let var1521 : Array<Range<UInt16>> = [(UInt16(250)&127..UInt16(101)&127:108|1), (UInt16(31)&127..=UInt16(42)&127:(-20)|1), (UInt16(240)&127..UInt16(233)&127:(-21)|1), (UInt16(110)&127..UInt16(103)&127:121|1), (UInt16(59)&127..UInt16(178)&127:(-25)|1), (UInt16(232)&127..=UInt16(20)&127:(-22)|1), (UInt16(75)&127..=UInt16(1)&127:8|1), (UInt16(190)&127..UInt16(166)&127:35|1), (UInt16(114)&127..=UInt16(127)&127:(-97)|1), (UInt16(35)&127..UInt16(135)&127:83|1)];
    var var1525 : Interface12 = Class7();
    match (try { // block id: 1496
            var var1498 : Unit = ();
            var1498;
            Option<Int8>.Some(Int8(69));
            if (true) { Option<Int8>.None } else { var1042 } 
        } finally { // block id: 1506
            (var1182, UInt64(40), var591, Int16(88), (), UInt64(91));
            var1042
        }) {
        case _ => 
            var768;
            if (true) { var1521 } else { var1521 } ;
            var1525
        
    }|>var1475;
    var loopTimeVar1539 : Range<UInt64> = (UInt64(Int8(Int8(Int8(86))))&127..UInt64(146)&127:(Int64(Int32(UInt16(178)))|1));
    for (i in loopTimeVar1539 where var591) {
        (Option<Aggregate465>.None ?? var1537)
    }
}

public enum Enum1645 {
    defaultValue
}
public func func1743(param1744 : (Class7) -> Bool) : String { // block id: 1747
    var1749
}

public func func1754(param306 : Class7) : Bool { // block id: 307
    var var312 : Enum309<Array<Range<UInt8>>, Int16> = Enum309<Array<Range<UInt8>>, Int16>.defaultValue;
    match (var312) {
        case caseVar316 => 
            let var320 : Bool = false;
            var320 || var320
        
        case _ => 
            ();
            if (false) { (Int32(-59)&127..=Int32(6)&127:(8|1)) } else { (Int32(104)&127..Int32(119)&127:(-59)|1) } ;
            var var334 : Bool = (UInt64(UInt64(17)) is Array<Interface11>);
            var334
        
    }
}



public func func1895(param1896 : Class7) : Unit { // block id: 1897

}

public func func1834(param1835 : Rune) : Unit { // block id: 1836
    var loopTimeVar1845 : Int64 = 0;
    ((), var737, do {
        loopTimeVar1845++;

    } while ((true) && loopTimeVar1845 < 100 ) , var1847, (Int16(-39), var1858, UInt64(98))[1])[2];
    let var1879 : Int32 = Int32(Int8(3));
    let var1883 : Int32 = Int32(-64);
    (Option<Unit>.Some(func1329(('T', (46&127..=101&127:((-55)|1)), UInt64(166), (var1879&127..=var1883&127:(39|1))))) ?? Aggregate465.func1889(optionalParam1890 : Option<Class7>.None));
    ()
}

public func func1971(param1972 : Range<UInt32>) : Rune { // block id: 1973
    match (param1972) {
        case _ : Option<Int8> => 
            var1909;
            (UInt64(58)&127..UInt64(158)&127:(var412|1));
            var1985
        
        case _ => 
            ()
        
    };
    var1919.var1993
}




public func func1641(param1642 : Range<UInt16>) : Int64 { // block id: 1643
    var var1648 : Enum1645 = Enum1645.defaultValue;
    let var1664 : Class7 = Class7(namedParam812 : UInt16(134), namedParam813 : Enum309<Array<Range<UInt8>>, Int16>.defaultValue, optionalParam814 : [(Int32(124)&127..=Int32(73)&127:70|1), (Int32(97)&127..=Int32(69)&127:(-119)|1), (Int32(37)&127..Int32(23)&127:(-41)|1), (Int32(75)&127..=Int32(11)&127:38|1), (Int32(-102)&127..Int32(-95)&127:(Int64(UInt16(164))|1)), (Int32(69)&127..=Int32(-113)&127:(-36)|1), (Int32(21)&127..Int32(-66)&127:31|1), (Int32(-91)&127..=Int32(-128)&127:(-90)|1), (Int32(18)&127..Int32(55)&127:58|1), (Int32(-58)&127..=Int32(Int32(15))&127:((-108)|1))]);
    match (var1648) {
        case defaultValue => 
            Enum309<Array<Range<UInt8>>, Int16>.defaultValue;
            Class7(var1615)
        
        case _ => 
            var1660 /= ((UInt64(183)) | 1);
            var1664
        
    };
    let var1722 : (String) -> Interface11 = { lambdaParameter1725 : String => Class7((Int16(30), UInt32(UInt32(245)), (Int16(-127)&127..=Int16(61)&127:((-7)|1)), (-113.0), true, (Int32(-28)&127..=Int32(-98)&127:(70|1)))) };
    let var1788 : Int32 = Int32(UInt8(UInt8(UInt8(Int8(27)))));
    let var1795 : Int32 = Int32(UInt16(244));
    func func1688(optionalParam1689 ! : Option<Int8> = ((((UInt16(112)&127..=UInt16(206)&127:((-38)|1)), (), (Int16(-38)&127..=Int16(-57)&127:(67|1)), (), 'b') as (UInt8, UInt64, Bool, Int16, Unit, UInt64)) as Int8), optionalParam1704 ! : Float64 = 38.0, optionalParam1706 ! : (UInt8, UInt64, Bool, Int16, Unit, UInt64) = (UInt8(UInt8(Int8(UInt8(221)))), UInt64(UInt64(36)), false, Int16(-58), (), UInt64(5))) : Array<Interface11> { // block id: 1718
        var var1752 : ((Class7) -> Bool) -> String = func1743;
        let var1757 : (Class7) -> Bool = func1754;
        func func1761(namedParam1762 ! : Rune, namedParam1763 ! : Range<Int32>, optionalParam1764 ! : ((Rune, Range<Int64>, UInt64, Range<Int32>)) -> Unit = { lambdaParameter1767 : (Rune, Range<Int64>, UInt64, Range<Int32>) => () }) : Option<(UInt8, UInt64, Bool, Int16, Unit, UInt64)> { // block id: 1772
            try { // block id: 1774
                if (false) { var606 } else { var606 } 
            } finally { // block id: 1779
                match (Enum309<Array<Range<UInt8>>, Int16>.defaultValue) {
                    case _ => 
                        var606
                    
                }
            }
        }
;
        var var2220 : Int16 = Int16(UInt16(UInt8(61)));
        [((var1757|>var1752)|>var1722), match (func1761(namedParam1762 : 'w', namedParam1763 : (var1788&127..=var1795&127:(52|1)))) {
            case _ => 
                var var1802 : Unit = ();
                var1802;
                var1805
            
        }, ((Option<Interface11>.None as Interface11) ?? if (var591) { Class7() } else { Class7((UInt8(159)&127..=UInt8(28)&127:64|1), optionalParam1820 : Int32(-38), namedParam1830 : [Class7(namedParam812 : var1909, namedParam813 : var2131, optionalParam814 : var2134), Class7(), var1805, var1805, Class7((var507, UInt32(88), (Int16(-25)&127..Int16(111)&127:31|1), var84, var591, (Int32(-80)&127..Int32(-37)&127:84|1))), var1805, var1805, Class7(), var1805, var1805]) } ), if (var591) { ((Int16(43), (UInt32(195)&127..UInt32(85)&127:100|1), UInt64(31)), var737, Int8(-75), var1805) } else { ((var507, var1858, UInt64(120)), (UInt8(114), UInt64(203), var591, var507, (), UInt64(96)), Int8(-35), var1805) } [3], Class7(try { // block id: 2211
            var2214++;
            var1858;
            (var2220, var73, (var2220&127..=Int16(56)&127:(var412|1)), (-46.0), true, (Int32(-90)&127..=Int32(-109)&127:103|1))
        } finally { // block id: 2232
            ();
            var1615
        }), match (var412) {
            case _ => 
                var507;
                if (var591) { var1805 } else { var1805 } 
            
        }, var1805, ((var1858 as Interface11) ?? Class7()), var1805, var1805]
    }
;
    func1688(optionalParam1706 : (match (var1146) {
        case _ => 
            var755;
            var var2263 : UInt8 = UInt8(186);
            var2263 <<= ((var2263) & 7);
            Option<(UInt8, UInt64, Bool, Int16, Unit, UInt64)>.Some((UInt8(3), UInt64(88), var591, Int16(-116), (), UInt64(123)))
        
    } ?? var737));
    var var2299 : Option<(Int8, Int64, UInt32, (Int16, Range<UInt32>, UInt64))> = Option<(Int8, Int64, UInt32, (Int16, Range<UInt32>, UInt64))>.None;
    var var2302 : (Int8, Int64, UInt32, (Int16, Range<UInt32>, UInt64)) = (Int8(Int8(UInt8(Int8(-79)))), Int64(UInt16(241)), UInt32(181), (Int16(UInt8(53)), (UInt32(UInt8(230))&127..=UInt32(236)&127:(59|1)), UInt64(Int16(Int8(-68)))));
    (if (false) { Option<(Int8, Int64, UInt32, (Int16, Range<UInt32>, UInt64))>.Some((var877, (-45), var73, (Int16(-102), (UInt32(216)&127..=var73&127:(57|1)), UInt64(210)))) } else { Option<(Int8, Int64, UInt32, (Int16, Range<UInt32>, UInt64))>.None }  ?? (var2299 ?? var2302))[1]
}

func func1555(param1556 : Option<(UInt8, UInt64, Bool, Int16, Unit, UInt64)>) : Range<UInt8> { // block id: 1557
    var var1565 : Int32 = Int32(Int16(123));
    var var1581 : (Int16, UInt32, Range<Int16>, Float64, Bool, Range<Int32>) = (Int16(UInt8(UInt8(Int8(78)))), UInt32(199), (Int16(1)&127..=Int16(-67)&127:(-79)|1), Float64(Float64(Float32(Float32(80.0)))), ([(Int32(107)&127..=Int32(-113)&127:(-25)|1), (Int32(121)&127..Int32(85)&127:19|1), (Int32(115)&127..=Int32(-12)&127:75|1), (Int32(-48)&127..Int32(116)&127:23|1), (Int32(-51)&127..Int32(-85)&127:103|1), (Int32(-115)&127..Int32(-121)&127:97|1), (Int32(-11)&127..=Int32(76)&127:44|1), (Int32(-62)&127..=Int32(78)&127:90|1), (Int32(-128)&127..Int32(-90)&127:21|1), (Int32(25)&127..Int32(-31)&127:(-98)|1)] is Range<UInt32>), (Int32(31)&127..Int32(90)&127:33|1));
    try { // block id: 1559

    } catch (_) { // block id: 1560
        if (var591) { // block id: 1563
            var1565;
            if (var591) { (var507, var73, (Int16(-110)&127..=Int16(1)&127:53|1), (-61.0), true, (var1565&127..Int32(-24)&127:(23|1))) } else { var1581 } 
        } else { // block id: 1596
            var591 ||= var591;
            if (var591) { (var507, UInt32(22), (Int16(51)&127..Int16(90)&127:(var1609|1)), (-114.0), var591, var194) } else { var1615 } 
        };
        (UInt16(152)&127..=UInt16(65)&127:(93|1))|>func1641;
        var var2331 : Int32 = Int32(-31);
        var1565 %= ((var2331) | 1)
    };
    var var2337 : ((String, Array<(UInt8, UInt64, Bool, Int16, Unit, UInt64)>, Range<Int16>, Range<Int16>), Float64, Range<UInt64>, Array<Range<UInt16>>, Range<Int32>) = (("""
bCOM1
.-U&g
""", [(UInt8(118), UInt64(62), true, Int16(48), (), UInt64(140)), (UInt8(78), UInt64(111), true, Int16(-5), (), UInt64(157)), (UInt8(64), UInt64(197), false, Int16(-42), (), UInt64(242)), (UInt8(115), UInt64(181), true, Int16(-57), (), UInt64(80)), (UInt8(141), UInt64(104), true, Int16(97), (), UInt64(130)), (UInt8(73), UInt64(82), false, Int16(60), (), UInt64(170)), (UInt8(176), UInt64(174), false, Int16(76), (), UInt64(49)), (UInt8(247), UInt64(232), true, Int16(-106), (), UInt64(229)), (UInt8(117), UInt64(41), true, Int16(82), (), UInt64(0)), (UInt8(63), UInt64(30), true, Int16(-88), (), UInt64(23))], (Int16(-97)&127..Int16(70)&127:121|1), (Int16(-62)&127..=Int16(-68)&127:(-6)|1)), (-113.0), (UInt64(UInt16(UInt8(211)))&127..UInt64(126)&127:(Int64(UInt64(UInt32(141)))|1)), [(UInt16(156)&127..UInt16(90)&127:(-67)|1), (UInt16(201)&127..UInt16(86)&127:(-14)|1), (UInt16(UInt8(65))&127..UInt16(Int8(-30))&127:((-101)|1)), (UInt16(33)&127..=UInt16(242)&127:44|1), (UInt16(136)&127..UInt16(122)&127:(103|1)), (UInt16(223)&127..UInt16(107)&127:(-114)|1), (UInt16(61)&127..=UInt16(127)&127:110|1), (UInt16(195)&127..=UInt16(234)&127:34|1), (UInt16(UInt16(19))&127..=UInt16(Int16(59))&127:((-61)|1)), (UInt16(UInt8(86))&127..UInt16(UInt8(174))&127:(57|1))], (Int32(-126)&127..Int32(-7)&127:(Int64(UInt8(52))|1)));
    Float64(var2337[1]);
    match (try { // block id: 2460
            var591
        } catch (_) { // block id: 2462
            var var2466 : Array<Range<UInt16>> = Array<Range<UInt16>>(10){ i => (UInt16(53)&127..=UInt16(Int16(Int16(123)))&127:(Int64(UInt8(Int8(-118)))|1)) };
            if (true) { var2466 } else { var2466 } ;
            var2522
        } finally { // block id: 2535
            var877 **= (var877 & 3);
            let var2540 : Option<Unit> = (((Int8(UInt8(83))&127..Int8(-71)&127:(Int64(Int8(-93))|1)) as (Int8, Int64, UInt32, (Int16, Range<UInt32>, UInt64))) as Unit);
            var2540;
            false
        }) {
        case _ : Range<Int32> => 
            (var1182&127..var1182&127:(103|1))
        
        case _ => 
            (UInt8(150)&127..UInt8(128)&127:50|1)
        
    }
}

public func func1550(param1551 : Range<UInt32>) : (Rune, Range<Int64>, UInt64, Range<Int32>) { // block id: 1552
    let var2561 : (Option<(UInt8, UInt64, Bool, Int16, Unit, UInt64)>) -> Range<UInt8> = func1555;
    var var2611 : (Rune, Range<Int64>, UInt64, Range<Int32>) = ('s', (4&127..60&127:(Int64(UInt16(Int8(-45)))|1)), UInt64(231), (Int32(-106)&127..Int32(35)&127:(-49)|1));
    match ((match ((UInt16(1)&127..UInt16(170)&127:34|1)) {
            case _ : (Int16, UInt32, Range<Int16>, Float64, Bool, Range<Int32>) => 
                Option<(UInt8, UInt64, Bool, Int16, Unit, UInt64)>.Some((var486, UInt64(203), true, var507, var1985, UInt64(153)))
            
            case caseVar2578 => 
                if (var591) { Option<(UInt8, UInt64, Bool, Int16, Unit, UInt64)>.Some((UInt8(235), var1660, var2522, Int16(-15), (), var1660)) } else { var606 } 
            
            case caseVar2593 => 
                var877;
                var1985;
                var606
            
            case _ => 
                var1985;
                if (false) { var606 } else { var606 } 
            
        }|>var2561)) {
        case _ : (Int16, Range<UInt32>, UInt64) => 
            if (var2522) { var2611 } else { ('8', var1932, var1660, (Int32(44)&127..=Int32(16)&127:115|1)) } 
        
        case caseVar2629 : UInt32 => 
            var var2633 : Rune = 'U';
            (var2633, (var1146&127..(-86)&127:(22|1)), UInt64(123), (Int32(-84)&127..=Int32(77)&127:13|1))
        
        case _ => 
            ();
            if (var591) { ('1', (var412&127..=var1609&127:(var1609|1)), UInt64(97), var194) } else { var2611 } 
        
        case _ => 
            ();
            if (true) { var2611 } else { ('U', ((-34)&127..(-68)&127:44|1), var1660, (Int32(52)&127..Int32(-22)&127:(-65)|1)) } 
        
    }
}


func func513(param514 : (Range<UInt32>) -> Unit) : Unit { // block id: 517
    func520(namedParam521 : try { // block id: 992
        Class7(namedParam995 : ((), (var486, UInt64(88), true, var507, (), var1660), var1985, var1847, (UInt32(95)&127..=UInt32(57)&127:(-43)|1)), namedParam996 : (var486&127..UInt8(213)&127:(var412|1)), namedParam997 : Enum309<Array<Range<UInt8>>, Int16>.enumValue2716, optionalParam998 : var1146);
        var591 &&= var2522;
        var2028
    } finally { // block id: 2722
        Enum309<Array<Range<UInt8>>, Int16>.defaultValue
    }, namedParam524 : Int16(-65)).func2726([(UInt16(147)&127..=UInt16(37)&127:(-37)|1), (UInt16(236)&127..UInt16(204)&127:97|1), (UInt16(114)&127..UInt16(222)&127:13|1), (UInt16(221)&127..=UInt16(202)&127:(-88)|1), (UInt16(136)&127..=UInt16(229)&127:34|1), (UInt16(109)&127..UInt16(178)&127:(-38)|1), (UInt16(64)&127..UInt16(92)&127:(-57)|1), (UInt16(251)&127..=UInt16(97)&127:(-7)|1), (UInt16(133)&127..UInt16(116)&127:41|1), (UInt16(85)&127..=UInt16(10)&127:(-113)|1)], namedParam2728 : var1858, namedParam2729 : if (var2522) { // block id: 2735
        if (true) { (UInt32(174)&127..UInt32(62)&127:102|1) } else { (UInt32(147)&127..UInt32(217)&127:(-30)|1) } ;
        (Int32(-76)&127..Int32(-31)&127:(-84)|1);
        var1660
    } else if (var591) { // block id: 2743
        var877 /= ((Int8(37)) | 1);
        ();
        UInt64(130) - var1660
    } else { // block id: 2751
        var1985;
        var1660
    });
    let var2797 : Array<Interface11> = Array<Interface11>(10){ i => Class7() };
    (match (match ((var877&127..=var877&127:((-43)|1))) {
            case _ : Array<Class7> => 
                let var2769 : (UInt8, Unit, Int8, Float32) = (UInt8(Int8(-74)), (), Int8(92), Float32(113.0));
                var2769;
                var1985;
                (var877&127..var2780&127:(var412|1))
            
            case caseVar2785 => 
                var1985;
                var250;
                if (true) { caseVar2785 } else { caseVar2785 } 
            
            case _ => 
                var1985;
                var2797;
                (Int8(50)&127..=Int8(-99)&127:12|1)
            
        }) {
        case _ => 
            [(UInt16(72)&127..=UInt16(173)&127:49|1), (UInt16(215)&127..=UInt16(190)&127:26|1), (UInt16(72)&127..=UInt16(120)&127:46|1), (UInt16(207)&127..UInt16(75)&127:87|1), (UInt16(180)&127..UInt16(133)&127:(-46)|1), (UInt16(18)&127..=UInt16(69)&127:108|1), (UInt16(218)&127..=UInt16(23)&127:(-120)|1), (UInt16(71)&127..=UInt16(149)&127:(-13)|1), (UInt16(171)&127..=UInt16(168)&127:(-20)|1), (UInt16(105)&127..UInt16(61)&127:(-82)|1)];
            var3055;
            Option<Int16>.None
        
        case _ => 
            var3086 **= (var1909 & 3);
            let var3094 : ?Int16 = ((Int8(87)&127..Int8(60)&127:(107|1)) as Int16);
            var3094
        
    } ?? match {
        case true => 
        var3104;
        var507 + Int16(4)
        case if (var2522) { // block id: 3111
        Option<Interface11>.None;
        false
    } else if (var591) { // block id: 3115
        ();
        var1042;
        true
    } else { // block id: 3119
        false && var591
    } => 
        var1985;
        ();
        var507
        case _ => 
        var507 %= ((var507) | 1);
        ('x', var1932, var1660, (Int32(-55)&127..Int32(26)&127:(var1146|1)));
        var507
    });
    var loopTimeVar3145 : Range<UInt64> = (UInt64(3)&127..UInt64(UInt32(214))&127:(113|1));
    for (i in loopTimeVar3145 where false) {
        ();
        var1615
    }
}

public func func253(param455 : Range<UInt32>) : Unit { // block id: 456

}


func func3154(param3155 : Range<UInt32>) : (Range<UInt32>) -> Unit { // block id: 3156
    let var3164 : (Int8, Int64, UInt32, (Int16, Range<UInt32>, UInt64)) = (Int8(119), (-120), UInt32(95), (Int16(-105), (UInt32(118)&127..UInt32(213)&127:(-87)|1), UInt64(Int32(2))));
    match (match (try { // block id: 3160
                if (true) { var3164 } else { var3164 } 
            } finally { // block id: 3175
                var73 /= ((UInt32(15)) | 1);
                var412++;
                var3164
            }) {
            case caseVar3184 => 
                var1985;
                Enum1645.defaultValue
            
            case _ => 
                var1985;
                if (var591) { var2033 } else { Enum1645.defaultValue } 
            
            case _ => 
                var3199;
                (Int16(-86), (UInt32(131)&127..=UInt32(36)&127:(-127)|1), var1660);
                var2033
            
        }) {
        case _ => 
            var3199
        
    };
    if (true) { // block id: 3211
        let var3221 : Rune = 'F';
        match (var755) {
            case _ => 
                var2214;
                Option<(UInt8, UInt64, Bool, Int16, Unit, UInt64)>.Some(var737);
                var3221
            
            case caseVar3225 : Option<(UInt8, UInt64, Bool, Int16, Unit, UInt64)> => 
                var3221
            
            case caseVar3230 => 
                var3221
            
            case _ => 
                if (var591) { Option<Class7>.None } else { Option<Class7>.None } ;
                var2214 = Int32(-102);
                var3221
            
        }
    } else { // block id: 3243
        var var3250 : ?Rune = ('D' as Rune);
        (var3250 ?? 'S')
    };
    let var3255 : (Range<UInt32>) -> Unit = func253;
    var3255
}



func func257(param258 : Array<Range<UInt8>>, namedParam259 ! : UInt8, namedParam260 ! : (String) -> Interface11, optionalParam263 ! : String = ###"o5NO\\K/]\"N"###) : Class7 { // block id: 265
    let var433 : Unit = ();
    let var449 : Interface11 = Class7();
    func func299(param300 : Float32, param301 : Range<UInt32>) : Unit { // block id: 302
        let var345 : ?Class7 = (Int32(-97) as Class7);
        let var377 : Int64 = (-7);
        let var382 : UInt64 = UInt64(UInt32(UInt32(UInt8(Int8(-120)))));
        let var390 : Int32 = Int32(Int32(Int32(-18)));
        func func437(param438 : UInt16, param439 : (Class7) -> Bool) : Unit { // block id: 442

        }
;
        let var458 : (Range<UInt32>) -> Unit = { lambdaParameter461 : Range<UInt32> =>  };
        let var469 : Aggregate465 = Aggregate465();
        let var3367 : Array<Range<Int64>> = [((-31)&127..(-54)&127:(Int64(Int16(-72))|1)), ((-18)&127..=Int64(Int16(1))&127:(Int64(UInt8(165))|1)), (Int64(UInt16(UInt16(211)))&127..Int64(UInt16(183))&127:((-109)|1)), (123&127..=(-62)&127:(-17)|1), ((-103)&127..=63&127:(-25)|1), (122&127..62&127:44|1), ((-73)&127..=(-110)&127:(-25)|1), (Int64(Int32(UInt8(104)))&127..(-88)&127:(Int64(Int32(-12))|1)), ((-36)&127..36&127:(-18)|1), ((-23)&127..=0&127:(Int64(UInt16(UInt16(55)))|1))];
        let var3441 : Int64 = Int64(UInt16(116));
        var loopTimeVar3474 : Int64 = 0;
        do {
            loopTimeVar3474++;
            let var398 : Rune = 'H';
            func func351(optionalParam352 ! : Range<Int8> = (Int8(UInt8(Int8(Int8(121))))&127..=Int8(-41)&127:(Int64(Int16(-17))|1))) : Unit { // block id: 361
                try (resource = Class7()) { // block id: 363
                    var var368 : Int32 = Int32(8);
                    let var401 : Range<Int64> = ((-42)&127..=(-101)&127:31|1);
                    try { // block id: 365
                        var368 &= Int32(-110);
                        if (true) { ('B', (var377&127..=(-72)&127:(var377|1)), var382, (var390&127..=Int32(-100)&127:((-116)|1))) } else { (var398, var401, UInt64(70), (Int32(94)&127..=Int32(-63)&127:88|1)) } 
                    } finally { // block id: 405
                        (var398, (54&127..=(-3)&127:(var412|1)), UInt64(90), var194)
                    };
                    try { // block id: 421
                        ();
                        namedParam259
                    } finally { // block id: 424
                        UInt8(33);
                        UInt8(188)
                    };
                    match (namedParam259) {
                        case _ => 
                            ();
                            var433
                        
                    }
                } finally { // block id: 435
                    func437(UInt16(34), func305);
                    var loopTimeVar452 : Int64 = 0;
                    while ((false) && loopTimeVar452 < 100 ) {
                        loopTimeVar452++;
                        var449
                    };
                    (UInt32(113)&127..=UInt32(188)&127:(-78)|1)|>var458
                };
                var469.func472(if (var2522) { (var1660&127..=var382&127:(55|1)) } else { (UInt64(88)&127..=UInt64(175)&127:35|1) } , namedParam474 : match ((68&127..=(-53)&127:(-19)|1)) {
                    case _ => 
                        var3367;
                        if (var591) { Class7(optionalParam808 : var458, namedParam812 : var3086, namedParam813 : Enum309<Array<Range<UInt8>>, Int16>.enumValue2716, optionalParam814 : [(Int32(-116)&127..Int32(-121)&127:(-55)|1), (var2214&127..=Int32(18)&127:(var412|1)), (Int32(-9)&127..=Int32(43)&127:107|1), var194, var194, (Int32(-55)&127..=Int32(85)&127:66|1), var194, (Int32(-17)&127..Int32(-93)&127:(-36)|1), (Int32(47)&127..=Int32(-46)&127:21|1), (var390&127..var2214&127:(var412|1))]) } else { Class7(var1615) } 
                    
                }, namedParam475 : if (true) { [((-113)&127..(-1)&127:(-60)|1), (68&127..7&127:82|1), (55&127..=(-115)&127:102|1), (83&127..101&127:(-4)|1), (114&127..(-28)&127:71|1), ((-16)&127..=121&127:122|1), ((-117)&127..(-58)&127:126|1), (93&127..=(-77)&127:(-38)|1), ((-106)&127..=18&127:(-66)|1), (38&127..73&127:95|1)] } else { [(53&127..7&127:(65|1)), ((-12)&127..=(-62)&127:(-114)|1), (var3441&127..=var377&127:(119|1)), (var1146&127..83&127:(17|1)), var1932, (94&127..36&127:(var1146|1)), ((-51)&127..(-110)&127:(-8)|1), var1932, (93&127..=10&127:(-89)|1), (20&127..(-101)&127:21|1)] } )
            }
;
            func351();
            (Option<(UInt8, UInt64, Bool, Int16, Unit, UInt64)>.Some((UInt8(20), UInt64(161), true, Int16(-49), (), var382)) ?? var737)
        } while ((((var345 ?? Class7())|>func305)) && loopTimeVar3474 < 100 ) 
    }
;
    try (resource = Class7()) { // block id: 267
        var var270 : Range<UInt32> = (UInt32(UInt16(29))&127..=UInt32(Int16(UInt8(76)))&127:((-119)|1));
        match (var270) {
            case caseVar280 : Range<UInt32> => 
                ()
            
            case _ => 
                ()
            
            case _ => 
                var var291 : UInt64 = UInt64(10);
                var291 -= UInt64(115);
                var291 += var291
            
        }
    } finally { // block id: 297
        func299(var895, var1858)
    };
    var var3480 : ?Rune = Option<Rune>.Some('X');
    let var3519 : (Int16, Range<UInt32>, UInt64) = (Int16(38), (UInt32(117)&127..UInt32(21)&127:(-46)|1), UInt64(Int16(119)));
    let var3598 : (Range<UInt32>) -> Unit = func454;
    (match (var3480) {
        case _ => 
            Class7();
            ();
            let var3489 : ?Class7 = Option<Class7>.Some(Class7((Int16(Int8(108)), UInt32(Int8(27)), (Int16(-4)&127..Int16(-118)&127:(115|1)), Float64((-54.0)), ((Int16(96), (UInt32(27)&127..=UInt32(186)&127:(37|1)), UInt64(112)) is Enum309<Array<Range<UInt8>>, Int16>), (Int32(-43)&127..Int32(-3)&127:80|1))));
            var3489
        
        case caseVar3514 : Interface10 => 
            if (var2522) { var3519 } else { var3519 } ;
            Option<Class7>.Some(var1919)
        
        case _ : Option<Class7> => 
            let var3532 : ?Class7 = ((UInt8(209), UInt64(Int8(Int8(13))), false, Int16(UInt16(159)), (), UInt64(UInt16(Int8(-4)))) as Class7);
            var3532
        
        case _ => 
            var3199;
            let var3553 : ?Class7 = ((UInt32(55)&127..UInt32(66)&127:((-126)|1)) as Class7);
            if (var2522) { var3553 } else { Option<Class7>.None } 
        
        case _ => 
            ();
            Option<(Int8, Int64, UInt32, (Int16, Range<UInt32>, UInt64))>.None;
            Option<Class7>.Some(Class7(namedParam812 : var1909, namedParam813 : Enum309<Array<Range<UInt8>>, Int16>.enumValue2716, optionalParam814 : [(Int32(-98)&127..Int32(-60)&127:(-60)|1), (Int32(111)&127..Int32(121)&127:31|1), (var2214&127..var2214&127:(var1146|1)), (var2214&127..=Int32(-123)&127:(var1146|1)), (var2214&127..=Int32(-39)&127:(5|1)), var194, (Int32(33)&127..Int32(-68)&127:107|1), (Int32(-105)&127..Int32(79)&127:117|1), (var2214&127..Int32(43)&127:(var1146|1)), var194]))
        
    } ?? if (var3593) { Class7(optionalParam808 : var3598, namedParam812 : var3086, namedParam813 : Enum309<Array<Range<UInt8>>, Int16>.defaultValue, optionalParam814 : [(Int32(-92)&127..Int32(72)&127:30|1), (Int32(119)&127..=Int32(48)&127:8|1), (Int32(-4)&127..Int32(-28)&127:(-26)|1), (Int32(44)&127..=Int32(8)&127:(-14)|1), (Int32(100)&127..Int32(-28)&127:117|1), (Int32(-19)&127..Int32(59)&127:(-122)|1), (Int32(-46)&127..Int32(-103)&127:(-115)|1), (Int32(108)&127..=Int32(104)&127:18|1), (Int32(37)&127..=Int32(-112)&127:(-116)|1), (Int32(10)&127..=Int32(-95)&127:76|1)]) } else { try { // block id: 3604
        if (false) { var1919 } else { Class7((var507, var73, (var507&127..var507&127:((-80)|1)), 101.0, true, (Int32(104)&127..=var2214&127:(86|1)))) } 
    } finally { // block id: 3622
        ();
        Class7()
    } } )
}

func func253<T0, T1, T2>(param254 : Range<Int64>) : Class7 { // block id: 255
    var var3696 : UInt8 = UInt8(Int8(7));
    var var3723 : Int64 = 44;
    var var3795 : (String) -> Interface11 = func64;
    func257([match (var3055) {
        case _ : Int64 => 
            (UInt8(184)&127..=var1182&127:(59|1))
        
        case ((caseVar3637,_,_ : Array<Range<UInt16>>),(_,_,_ : Rune,caseVar3638 : Option<Aggregate465>,caseVar3639,_ : Aggregate465),caseVar3640 : Array<(UInt8, UInt64, Bool, Int16, Unit, UInt64)>,_ : (Range<UInt16>, Unit, Range<Int16>, Unit, Rune)) => 
            (UInt8(32), (), Int8(-75), Float32(39.0));
            ();
            var var3657 : UInt8 = UInt8(192);
            if (var3593) { (UInt8(27)&127..=UInt8(39)&127:((-39)|1)) } else { (UInt8(45)&127..=var3657&127:(57|1)) } 
        
        case caseVar3662 : Range<Int8> => 
            var3086 += var3086;
            (UInt8(38)&127..=UInt8(64)&127:(-71)|1)
        
        case _ => 
            var412 -= (-38);
            var3675 /= ((UInt8(199)) | 1);
            (var1182&127..var3675&127:(107|1))
        
    }, try { // block id: 3683
        UInt8(146);
        var1847
    } finally { // block id: 3686
        ();
        var var3690 : Rune = 'C';
        var3690 = var3690;
        (UInt8(184)&127..=var3696&127:(5|1))
    }, (var486&127..var3696&127:(var412|1)), match (Option<Range<UInt32>>.Some((UInt32(195)&127..UInt32(3)&127:122|1))) {
        case _ : Option<Aggregate465> => 
            false;
            ();
            (UInt8(253)&127..=UInt8(5)&127:((-127)|1))
        
        case _ => 
            var1847
        
    }, (UInt8(172)&127..UInt8(51)&127:(var3723|1)), try { // block id: 3726
        var3728;
        (var486&127..var486&127:(var412|1))
    } catch (e: Exception) { // block id: 3734
        var591 ||= var2522;
        (UInt8(94)&127..=UInt8(22)&127:63|1)
    }, (UInt8(217)&127..UInt8(4)&127:((-87)|1)), match (var877) {
        case _ => 
            if (false) { [(Int32(39)&127..Int32(-101)&127:16|1), (Int32(65)&127..=Int32(-70)&127:7|1), (Int32(98)&127..=Int32(-46)&127:51|1), (Int32(-35)&127..Int32(20)&127:(-30)|1), (Int32(74)&127..=Int32(-12)&127:(-83)|1), (Int32(106)&127..=Int32(-118)&127:86|1), (Int32(-91)&127..=Int32(13)&127:(-73)|1), (Int32(-21)&127..Int32(-102)&127:41|1), (Int32(-48)&127..=Int32(-86)&127:(-121)|1), (Int32(33)&127..Int32(-88)&127:(-103)|1)] } else { [(Int32(-90)&127..=Int32(-17)&127:77|1), (Int32(-64)&127..Int32(-102)&127:69|1), (Int32(49)&127..Int32(3)&127:53|1), (Int32(62)&127..=Int32(53)&127:70|1), (Int32(-27)&127..Int32(125)&127:(-49)|1), (Int32(-37)&127..Int32(-64)&127:108|1), (Int32(121)&127..Int32(102)&127:19|1), (Int32(-95)&127..=Int32(13)&127:(-82)|1), (Int32(120)&127..Int32(-99)&127:36|1), (Int32(-25)&127..=Int32(36)&127:(-73)|1)] } ;
            var1847
        
    }, match ((var507, (var73&127..var73&127:(107|1)), UInt64(103))) {
        case (caseVar3762 : Bool,caseVar3763,caseVar3764) => 
            var3199;
            if (false) { (UInt8(237)&127..=UInt8(9)&127:(-121)|1) } else { (UInt8(91)&127..UInt8(50)&127:(24|1)) } 
        
        case _ => 
            var3728;
            (UInt8(138)&127..UInt8(52)&127:25|1)
        
    }, (var3696&127..UInt8(125)&127:(var1609|1))], namedParam259 : UInt8(try { // block id: 3784
        ();
        var877 / ((Int8(-85)) | 1)
    } finally { // block id: 3789
        ();
        Int8(-96) >> ((var877) & 7)
    }), namedParam260 : var3795, optionalParam263 : if (var2522) { (if (var3593) { var1749 } else { ###"#|_NNr$>_."### } ) } else { var250 } )
}

func func27(param28 : Float32, optionalParam29 ! : Interface11 = Class7(), optionalParam31 ! : Bool = (Class7() is Bool), namedParam34 ! : Interface12) : Class7 { // block id: 35
    var var49 : Array<Interface10> = [Class7(), Class7(), Class7(), Class7(), Class7(), Class7(), Class7(), Class7(), Class7(), Class7()];
    if ((var49[7] is Interface12)) { Class7() } else { (var250|>func64) } ;
    let var3805 : (Range<Int64>) -> Class7 = func253<Rune, Array<Class7>, UInt64>;
    try { // block id: 3808
        var84 += var84;
        (75&127..=(-110)&127:(-50)|1)
    } catch (_) { // block id: 3813
        ((-51)&127..=(-70)&127:(-55)|1)
    }|>var3805
}


func func20(param21 : String) : Unit { // block id: 22
    func27(var895, namedParam34 : Class7(namedParam995 : (var3199, var737, var1985, var1847, (UInt32(23)&127..var73&127:((-123)|1))), namedParam996 : var1847, namedParam997 : var2131)).var3829[4];
    var3728;
    var var3851 : ?Unit = Option<Unit>.None;
    var loopTimeVar3855 : Int64 = 0;
    while ((false) && loopTimeVar3855 < 100 ) {
        loopTimeVar3855++;
        var3675 /= ((var3675) | 1);
        (var3851 ?? ())
    }
}


main(): Int64 {
    try {
        var var14 : Class7 = Class7();
        var14.func17();
        (((var486, var3728, Int8(-53), var895) as Int64) ?? 25)
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend<T0, T1> Enum309<T0, T1> {

}

extend Aggregate465 {

}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_unexpected_declaration_in_scope
// ASSERT: scan parse_expected_catch_or_finally_in_try
// ASSERT: scan parse_expected_left_brace
// ASSERT: scan parse_expected_case
// ASSERT: scan parse_expected_name
// ASSERT: scan parse_expected_character
// ASSERT: scan parse_expected_expr_or_decl_in


