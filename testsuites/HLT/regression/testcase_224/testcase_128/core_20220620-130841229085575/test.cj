/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output


var var61 : UInt8 = UInt8(94)
public let var167 : Range<UInt8> = (UInt8(239)&127..UInt8(Int8(Int8(Int8(57))))&127:(Int64(UInt16(111))|1))
var var200 : UInt16 = UInt16(100)
public var var204 : Int32 = Int32(Int16(Int16(UInt16(37))))
public let var239 : Int8 = Int8(0)
let var242 : Int64 = Int64(UInt16(Int8(Int8(Int8(39)))))
let var253 : Range<Int64> = (Int64(Int16(Int8(-65)))&127..Int64(Int32(UInt32(133)))&127:(Int64(Int64(UInt16(111)))|1))
public var var266 : Int64 = 78
public var var276 : (Bool, Bool, Range<UInt32>) = (true, true, (UInt32(89)&127..=UInt32(248)&127:50|1))
let var484 : Unit = ()
public var var494 : Bool = true
let var541 : Int16 = Int16(Int8(-128))
let var569 : Class8 = Class8()
public var var685 : ?Range<Int16> = Option<Range<Int16>>.None
var var720 : (((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit) = (((([Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None, Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None, Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None, Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None, Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None, Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None, Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None, Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None, Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None, Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None] is Class8), false, (UInt32(0)&127..=UInt32(221)&127:(110|1))), (UInt8(Int8(89))&127..=UInt8(63)&127:(Int64(UInt8(125))|1)), (UInt8(165)&127..=UInt8(239)&127:(Int64(Int32(-73))|1))), (UInt16(UInt8(Int8(2)))&127..UInt16(UInt16(Int16(-53)))&127:(76|1)), Int16(-44), ())
let var782 : UInt32 = UInt32(Int32(-108))
public var var820 : Unit = ()
public var var1066 : UInt32 = UInt32(Int32(-82))
let var1086 : Range<UInt16> = (UInt16(139)&127..UInt16(75)&127:23|1)
let var1099 : Int64 = (-46)
public var var1105 : ?Unit = Option<Unit>.None
public let var1180 : UInt8 = UInt8(UInt8(Int8(Int8(-84))))
var var1216 : (Range<UInt8>, UInt64, Bool, Range<UInt64>) = ((UInt8(Int8(-77))&127..=UInt8(UInt8(Int8(-1)))&127:(85|1)), UInt64(19), ((Int64(UInt64(130)) as Unit) is Unit), (UInt64(15)&127..=UInt64(90)&127:116|1))
public var var1421 : Range<UInt64> = (UInt64(Int64(Int32(13)))&127..UInt64(54)&127:(Int64(UInt8(164))|1))
let var1430 : (Unit, String, Float64, Array<UInt8>, String, Rune) = ((), ###"tx3*+a0VyM"###, (-14.0), [UInt8(112), UInt8(Int8(UInt8(11))), UInt8(UInt8(44)), UInt8(191), UInt8(UInt8(8)), UInt8(Int8(69)), UInt8(Int8(2)), UInt8(230), UInt8(UInt8(85)), UInt8(Int8(47))], ">1go0?a-/+", '4')
public let var1457 : (Range<Int16>, UInt64, Range<Int16>, Option<Unit>, Range<UInt64>, UInt64, (Unit, String, Float64, Array<UInt8>, String, Rune)) = ((Int16(114)&127..=Int16(43)&127:(-12)|1), UInt64(135), (Int16(-117)&127..Int16(-2)&127:(-65)|1), (((UInt16(16)&127..=UInt16(137)&127:(62|1)), [Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None, Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None, Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None, Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None, Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None, Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None, Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None, Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None, Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None, Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None]) as Unit), (UInt64(47)&127..=UInt64(71)&127:(-42)|1), UInt64(42), ((), """
TzBj$
+=ls%
""", (-77.0), [UInt8(223), UInt8(72), UInt8(99), UInt8(99), UInt8(132), UInt8(200), UInt8(41), UInt8(246), UInt8(32), UInt8(253)], "N60J$037GU", 'j'))
public let var1521 : (Option<Unit>, Range<UInt16>, Array<Int64>) = ((((UInt16(232)&127..=UInt16(1)&127:(-112)|1), [Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None, Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None, Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None, Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None, Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None, Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None, Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None, Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None, Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None, Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None]) as Unit), (UInt16(103)&127..=UInt16(118)&127:57|1), [(-118), 103, Int64(Int8(7)), 105, 84, Int64(Int32(UInt32(58))), Int64(Int16(Int16(-104))), Int64(Int32(Int32(37))), Int64(28), Int64(Int16(Int16(90)))])
let var1660 : Rune = 'h'
var var1748 : ?Bool = Option<Bool>.None
let var1752 : Bool = ((21&127..Int64(Int32(-86))&127:((-72)|1)) is (String, Option<Range<Int16>>, UInt8, ((Int8, Int8, Int64, (UInt8) -> Unit) -> UInt8) -> UInt8) -> Range<Int16>)
public let var1843 : Array<Rune> = ['x', 'C', '1', 'Z', 'S', 'i', 'x', 'n', '3', '9']
public let var1925 : ?Bool = (((true, (((Int16(-92)&127..=Int16(38)&127:12|1), UInt64(228), (Int16(-29)&127..Int16(88)&127:((-120)|1)), Option<Unit>.None, (UInt64(239)&127..=UInt64(32)&127:(-62)|1), UInt64(248), ((), "iVI4X!e;jD", 27.0, [UInt8(148), UInt8(55), UInt8(35), UInt8(239), UInt8(233), UInt8(52), UInt8(54), UInt8(12), UInt8(35), UInt8(143)], "Dm0Gk0g6A0", 'k')) is (Int8, Int8, Int64, (UInt8) -> Unit) -> UInt8), (UInt32(105)&127..UInt32(73)&127:(-63)|1)), (UInt8(86)&127..=UInt8(210)&127:(-97)|1), (UInt8(18)&127..=UInt8(75)&127:111|1)) as Bool)
public let var1990 : ?(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit) = ((((true, false, (UInt32(221)&127..UInt32(1)&127:(-52)|1)), (UInt8(205)&127..UInt8(14)&127:115|1), (UInt8(227)&127..UInt8(233)&127:(121|1))) as Bool) as (((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit))
var var2027 : Range<Int32> = (Int32(-95)&127..Int32(-16)&127:(-114)|1)
var var2125 : Int64 = Int64(Int64(UInt8(UInt8(72))))
let var2144 : Rune = '1'
public var var2189 : Float32 = Float32(Float32(94.0))
public var var2331 : UInt64 = UInt64(225)
public let var2349 : UInt64 = UInt64(70)
public let var2373 : Unit = ()
var var2479 : UInt16 = UInt16(UInt8(53))
var var2512 : Float64 = 40.0
let var2572 : Range<Int16> = (Int16(94)&127..=Int16(119)&127:59|1)
public var var2607 : ?Bool = ([(-53), 125, (-80), Int64((-45)), 14, Int64(Int8(-15)), Int64(UInt64(216)), (-61), 102, Int64(UInt64(Int32(33)))] as Bool)
public open class Class8 {
    public init() { // block id: 10

    }
;
    public static var var93 : (Bool, Bool, Range<UInt32>) = (false, false, (UInt32(253)&127..UInt32(223)&127:(-95)|1));
    public static var var521 : Int8 = Int8(39);
    var var670 : (Unit, String, Float64, Array<UInt8>, String, Rune) = ((), ###"xXic^Dt2;:"###, 40.0, [UInt8(134), UInt8(4), UInt8(169), UInt8(22), UInt8(62), UInt8(193), UInt8(40), UInt8(172), UInt8(65), UInt8(33)], "Muma~lJ7$3", 'p');
    static var var831 : Unit = ();
    static let var1763 : Int64 = (-24);
    let var1777 : Bool = true;
    public var var2056 : UInt32 = UInt32(86);
    static var var2132 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    public var var2491 : Option<Int64> = Option<Int64>.None;
    public let var2515 : Float64 = 68.0;
    public let var2627 : Float32 = Float32(62.0);
    protected var var2638 : Unit = ();
    public open func func2631(param2632 : (Option<Unit>, Range<UInt16>, Array<Int64>)) : Unit { // block id: 2633
        var1216;
        this.var2638
    }

}

public open class Class20 {
    public init() { // block id: 22

    }
;
    public static let var25 : Unit = ()
}

public func func15(param16 : UInt8) : Unit { // block id: 17
    ();
    Class20.var25
}


public func func29(param30 : Int8, param31 : Int8, param32 : Int64, namedParam33 ! : (UInt8) -> Unit) : UInt8 { // block id: 36
    var var55 : Array<UInt8> = [UInt8(112), UInt8(233), UInt8(242), UInt8(195), UInt8(206), UInt8(50), UInt8(60), UInt8(229), UInt8(118), UInt8(49)];
    UInt8((Option<Array<UInt8>>.Some(var55) ?? [UInt8(130), UInt8(174), var61, UInt8(229), UInt8(233), UInt8(201), UInt8(167), var61, UInt8(217), UInt8(244)])[0])
}


public func func79(param80 : (Int8, Int8, Int64, (UInt8) -> Unit) -> UInt8) : UInt8 { // block id: 86
    var loopTimeVar120 : Range<UInt64> = (UInt64(120)&127..UInt64((-76))&127:(Int64(UInt8(213))|1));
    for (i in loopTimeVar120 where Class8.var93[1]) {
        var var102 : Bool = ((Int8(-24)&127..Int8(62)&127:(Int64((-64))|1)) is Array<UInt8>);
        var loopTimeVar113 : Range<UInt64> = (UInt64(Int8(-126))&127..UInt64(10)&127:(Int64(UInt16(32))|1));
        for (i in loopTimeVar113 where var102) {
            let var111 : Unit = ();
            var111
        }
    };
    let var134 : Bool = (UInt8(Int8(UInt8(Int8(-28)))) is Int64);
    func func128() : Range<UInt8> { // block id: 129
        var var131 : Unit = ();
        var131;
        var134;
        var var150 : ?(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit) = ((83&127..=(-46)&127:(116|1)) as (((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit));
        (var150 ?? (((var134, true, (UInt32(221)&127..=UInt32(181)&127:(-50)|1)), (UInt8(137)&127..UInt8(47)&127:((-123)|1)), var167), (UInt16(143)&127..=UInt16(32)&127:104|1), Int16(-105), ()))[0][2]
    }
;
    func128();
    try { // block id: 182
        let var184 : Int8 = Int8(-19);
        var184;
        [UInt8(135), UInt8(66), UInt8(146), UInt8(153), UInt8(28), UInt8(158), UInt8(30), UInt8(183), UInt8(79), UInt8(197)][9]
    } catch (e: Exception) { // block id: 189
        if (true) { // block id: 192
            UInt8(226)
        } else if (false) { // block id: 195
            UInt8(121)
        } else { // block id: 197
            var200--;
            var204--;
            UInt8(237)
        }
    }
}

public func func213(param30 : Int8, param31 : Int8, param32 : Int64, namedParam33 : (UInt8) -> Unit) : UInt8 { // block id: 36
    var var55 : Array<UInt8> = [UInt8(112), UInt8(233), UInt8(242), UInt8(195), UInt8(206), UInt8(50), UInt8(60), UInt8(229), UInt8(118), UInt8(49)];
    UInt8((Option<Array<UInt8>>.Some(var55) ?? [UInt8(130), UInt8(174), var61, UInt8(229), UInt8(233), UInt8(201), UInt8(167), var61, UInt8(217), UInt8(244)])[0])
}

public func func223(param30 : Int8, param31 : Int8, param32 : Int64, namedParam33 : (UInt8) -> Unit) : UInt8 { // block id: 36
    var var55 : Array<UInt8> = [UInt8(112), UInt8(233), UInt8(242), UInt8(195), UInt8(206), UInt8(50), UInt8(60), UInt8(229), UInt8(118), UInt8(49)];
    UInt8((Option<Array<UInt8>>.Some(var55) ?? [UInt8(130), UInt8(174), var61, UInt8(229), UInt8(233), UInt8(201), UInt8(167), var61, UInt8(217), UInt8(244)])[0])
}

public func func307(param308 : (Int8, Int8, Int64, (UInt8) -> Unit) -> UInt8) : Class8 { // block id: 314
    let var321 : (Range<UInt16>, Array<Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>>) = ((UInt16(Int8(UInt8(191)))&127..=UInt16(UInt8(Int8(-98)))&127:(Int64(UInt64((-18)))|1)), [([Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None, Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None, Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.Some((((true, true, (UInt32(223)&127..UInt32(174)&127:((-63)|1))), (UInt8(91)&127..UInt8(35)&127:((-45)|1)), (UInt8(161)&127..UInt8(63)&127:((-120)|1))), (UInt16(127)&127..UInt16(40)&127:((-25)|1)), Int16(117), ())), Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.Some((((false, true, (UInt32(132)&127..=UInt32(74)&127:(-128)|1)), (UInt8(242)&127..UInt8(208)&127:((-108)|1)), (UInt8(159)&127..=UInt8(195)&127:(79|1))), (UInt16(24)&127..=UInt16(13)&127:(93|1)), Int16(70), ())), Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None, Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None, Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None, Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.Some((((true, false, (UInt32(47)&127..UInt32(43)&127:(-93)|1)), (UInt8(159)&127..=UInt8(158)&127:(-118)|1), (UInt8(118)&127..UInt8(114)&127:(73|1))), (UInt16(69)&127..=UInt16(17)&127:23|1), Int16(-77), ())), Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.Some((((false, true, (UInt32(176)&127..=UInt32(19)&127:(-46)|1)), (UInt8(6)&127..=UInt8(55)&127:(118|1)), (UInt8(176)&127..UInt8(230)&127:(-124)|1)), (UInt16(152)&127..UInt16(180)&127:((-22)|1)), Int16(-49), ())), Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None] as (((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)), Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None, ((false, true, (UInt32(92)&127..UInt32(247)&127:48|1)) as (((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)), ((Int8(125), (-99.0), Int8(44), 124) as (((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)), Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None, Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.Some((((true, false, (UInt32(72)&127..=UInt32(133)&127:((-99)|1))), (UInt8(221)&127..UInt8(56)&127:35|1), (UInt8(197)&127..UInt8(244)&127:((-81)|1))), (UInt16(120)&127..UInt16(131)&127:(61|1)), Int16(26), ())), Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.Some((((false, false, (UInt32(49)&127..=UInt32(191)&127:(116|1))), (UInt8(235)&127..UInt8(208)&127:(-57)|1), (UInt8(163)&127..UInt8(118)&127:((-109)|1))), (UInt16(166)&127..=UInt16(23)&127:(68|1)), Int16(-2), ())), Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None, Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None, Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None]);
    match (var321[1][1]) {
        case _ => 
            var484;
            (120&127..(-83)&127:(-76)|1)
        
        case caseVar489 => 
            79.0;
            let var497 : Range<Int64> = (98&127..1&127:(-113)|1);
            var var501 : Int64 = Int64(Int16(Int16(-126)));
            if (var494) { var497 } else { (var501&127..=var501&127:(111|1)) } 
        
        case caseVar509 : Unit => 
            let var512 : Range<Int64> = (53&127..=103&127:(-53)|1);
            var512
        
        case _ => 
            ((-47)&127..=62&127:122|1)
        
    };
    var var547 : ((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>) = ((false, false, (UInt32(29)&127..=UInt32(111)&127:(-94)|1)), (UInt8(235)&127..UInt8(146)&127:16|1), (UInt8(Int8(UInt8(141)))&127..=UInt8(UInt8(117))&127:(120|1)));
    match (Class8.var521) {
        case 39 | -60 | 24 | 65 => 
            var var528 : Int64 = Int64(Int8(UInt8(UInt8(51))));
            var528 &= 40;
            Class8()
        
        case caseVar537 : UInt16 => 
            (var541&127..=var541&127:((-94)|1));
            var547;
            Class8()
        
        case caseVar564 : Float64 => 
            if (var494) { var569 } else { var569 } 
        
        case _ => 
            var var576 : Int64 = (-1);
            var576 |= (-83);
            ();
            if (false) { var569 } else { var569 } 
        
    }
}

func func587(param30 : Int8, param31 : Int8, param32 : Int64, namedParam33 : (UInt8) -> Unit) : UInt8 { // block id: 36
    var var55 : Array<UInt8> = [UInt8(112), UInt8(233), UInt8(242), UInt8(195), UInt8(206), UInt8(50), UInt8(60), UInt8(229), UInt8(118), UInt8(49)];
    UInt8((Option<Array<UInt8>>.Some(var55) ?? [UInt8(130), UInt8(174), var61, UInt8(229), UInt8(233), UInt8(201), UInt8(167), var61, UInt8(217), UInt8(244)])[0])
}


public func func707(param30 : Int8, param31 : Int8, param32 : Int64, namedParam33 : (UInt8) -> Unit) : UInt8 { // block id: 36
    var var55 : Array<UInt8> = [UInt8(112), UInt8(233), UInt8(242), UInt8(195), UInt8(206), UInt8(50), UInt8(60), UInt8(229), UInt8(118), UInt8(49)];
    UInt8((Option<Array<UInt8>>.Some(var55) ?? [UInt8(130), UInt8(174), var61, UInt8(229), UInt8(233), UInt8(201), UInt8(167), var61, UInt8(217), UInt8(244)])[0])
}


public func func848(param849 : Rune) : Option<Unit> { // block id: 850
    let var863 : Array<Int64> = Array<Int64>(10){ i => Int64(UInt64(Int8(Int8(-91)))) };
    try { // block id: 854
        [125, (-83), 8, (-30), 69, (-108), (-20), 63, 118, (-78)]
    } finally { // block id: 856
        Int16(66) <= var541;
        if (true) { var863 } else { [118, 122, 16, 95, 107, 28, (-67), 29, (-85), (-62)] } 
    }[0];
    let var899 : Int64 = 115;
    var var909 : Int64 = Int64(99);
    if (var494) { // block id: 891
        var var913 : Int64 = Int64(UInt8(34));
        let var917 : (Option<Unit>, Range<UInt16>, Array<Int64>) = (([(82 as (((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)), ((UInt32(149)&127..=UInt32(35)&127:122|1) as (((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)), Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None, Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.Some((((false, true, (UInt32(174)&127..UInt32(122)&127:(-41)|1)), (UInt8(122)&127..UInt8(251)&127:107|1), (UInt8(71)&127..UInt8(95)&127:((-115)|1))), (UInt16(10)&127..UInt16(248)&127:(75|1)), Int16(-29), ())), Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.Some((((false, false, (UInt32(90)&127..UInt32(61)&127:(50|1))), (UInt8(87)&127..UInt8(42)&127:114|1), (UInt8(71)&127..=UInt8(240)&127:((-116)|1))), (UInt16(34)&127..UInt16(173)&127:(68|1)), Int16(-51), ())), Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None, Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None, ([Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None, Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None, Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None, Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.Some((((true, false, (UInt32(14)&127..UInt32(206)&127:((-66)|1))), (UInt8(71)&127..=UInt8(213)&127:(-22)|1), (UInt8(200)&127..=UInt8(81)&127:69|1)), (UInt16(196)&127..UInt16(231)&127:(-103)|1), Int16(-85), ())), Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.Some((((true, false, (UInt32(130)&127..=UInt32(57)&127:(125|1))), (UInt8(189)&127..=UInt8(86)&127:(126|1)), (UInt8(49)&127..=UInt8(171)&127:(55|1))), (UInt16(20)&127..UInt16(139)&127:69|1), Int16(-96), ())), Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None, Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.Some((((true, true, (UInt32(69)&127..UInt32(222)&127:25|1)), (UInt8(98)&127..=UInt8(139)&127:((-18)|1)), (UInt8(245)&127..=UInt8(73)&127:99|1)), (UInt16(31)&127..UInt16(89)&127:73|1), Int16(122), ())), Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.Some((((true, true, (UInt32(68)&127..UInt32(163)&127:(-32)|1)), (UInt8(188)&127..UInt8(88)&127:(15|1)), (UInt8(170)&127..UInt8(131)&127:(-63)|1)), (UInt16(199)&127..UInt16(169)&127:(-65)|1), Int16(71), ())), Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None, Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None] as (((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)), ((-50.0) as (((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)), ('a' as (((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit))] as Unit), (UInt16(Int8(Int8(-88)))&127..UInt16(79)&127:(Int64(Int16(UInt8(125)))|1)), [87, 105, 4, 116, (-69), (-60), 23, (-95), (-76), (-33)]);
        if (false) { (Option<Unit>.None, (UInt16(233)&127..UInt16(220)&127:69|1), [var899, 64, 43, 97, var899, var899, 28, var899, var909, var913]) } else { var917 } 
    } else if (try { // block id: 1055
        var200 <<= ((UInt16(66)) & 7);
        false || true;
        var494
    } catch (_) { // block id: 1063
        var1066 <<= ((var782) & 7);
        UInt64(76) >> ((UInt64(107)) & 7);
        var494
    } finally { // block id: 1074
        var820;
        var484;
        var494
    }) { // block id: 1078
        var494 &&= false;
        (Option<Unit>.Some(()), var1086, [20, 57, 27, var899, var899, (-121), var909, 41, var909, var1099])
    } else { // block id: 1101
        var484;
        (var1105, (UInt16(144)&127..UInt16(184)&127:(var909|1)), [63, 44, (-89), 51, (-72), 23, (-86), 4, (-94), (-47)])
    }[0]
}


func func1144(param1145 : Range<UInt16>) : Unit { // block id: 1146
    var var1156 : (Range<UInt8>, UInt64, Bool, Range<UInt64>) = ((UInt8(Int8(36))&127..=UInt8(UInt8(UInt8(121)))&127:(71|1)), UInt64(UInt8(120)), (((), ###"gE;I%E8=-y"###, Float64((-110.0)), [UInt8(37), UInt8(230), UInt8(186), UInt8(245), UInt8(249), UInt8(158), UInt8(230), UInt8(158), UInt8(146), UInt8(53)], """
f#\\P^
8av&\\
""", 'W') is Array<Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>>), (UInt64(209)&127..UInt64(57)&127:(-41)|1));
    let var1193 : UInt64 = UInt64(58);
    var loopTimeVar1206 : Int64 = 0;
    while ((try { // block id: 1151
        UInt64(107);
        let var1186 : UInt8 = UInt8(Int8(Int8(UInt8(206))));
        if (true) { var1156 } else { ((var1180&127..var1186&127:((-39)|1)), var1193, var494, (UInt64(163)&127..UInt64(222)&127:((-126)|1))) } 
    } finally { // block id: 1200
        var685;
        var1156
    }[2]) && loopTimeVar1206 < 100 ) {
        loopTimeVar1206++;

    }
}


public func func1144(param1251 : Range<UInt8>, param1252 : ((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), param1253 : UInt64) : Array<Int64> { // block id: 1254
    var var1256 : Array<Int64> = [40, 3, (-38), (-89), (-29), (-71), (-112), (-45), (-53), (-120)];
    var1256
}

public func func1140(param1141 : ((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>)) : Bool { // block id: 1142
    match ((Option<(Range<UInt8>, UInt64, Bool, Range<UInt64>)>.None ?? var1216)) {
        case (caseVar1233,caseVar1234 : Rune,caseVar1235 : Range<Int8>,caseVar1236) => 
            ();
            (var200&127..=var200&127:((-103)|1))
        
        case _ => 
            (UInt16(134)&127..UInt16(244)&127:((-43)|1))
        
    }|>func1144;
    func func1259() : Range<UInt8> { // block id: 1260
        (UInt8(235)&127..=UInt8(190)&127:(-78)|1)
    }
;
    var var1275 : UInt64 = UInt64(151);
    var var1283 : Array<UInt64> = [UInt64(157), UInt64(87), UInt64(82), UInt64(149), UInt64(118), UInt64(1), UInt64(118), UInt64(240), UInt64(239), UInt64(146)];
    func1144(func1259(), param1141, if (false) { // block id: 1266
        ();
        UInt64(53)
    } else if (false) { // block id: 1270
        (Int32(94)&127..=Int32(94)&127:9|1);
        ();
        var1275 ^ var1275
    } else { // block id: 1278
        UInt64(92)
    } % ((var1283[7]) | 1));
    let var1287 : Bool = false;
    var1287
}


public func func1386(param1387 : Range<Int16>, optionalParam1388 ! : Float32 = Float32(Float32(-113.0))) : Unit { // block id: 1391
    var var1400 : UInt64 = UInt64(227);
    var loopTimeVar1408 : Range<UInt64> = (UInt64(203)&127..=UInt64(UInt16(175))&127:((-18)|1));
    for (i in loopTimeVar1408 where var494) {
        var loopTimeVar1404 : Int64 = 0;
        while ((false) && loopTimeVar1404 < 100 ) {
            loopTimeVar1404++;
            var1400 -= var1400
        };
        (var1105 ?? var484)
    };
    var var1500 : ?Bool = ((() as Bool) as Bool);
    var loopTimeVar1565 : Int64 = 0;
    ((var1421, var1430, var1457, Int32(9), UInt8(73), var720)[2][3] ?? do {
        loopTimeVar1565++;
        Option<(Range<UInt8>, UInt64, Bool, Range<UInt64>)>.Some(((UInt8(154)&127..=var1180&127:((-94)|1)), UInt64(27), true, (var1400&127..var1400&127:(var1099|1))));
        if (false) { var1521 } else { (Option<Unit>.Some(()), (UInt16(218)&127..=UInt16(221)&127:34|1), [39, 114, (-65), (-38), 1, 36, (-7), (-75), 5, (-75)]) } 
    } while (((var1500 ?? var494)) && loopTimeVar1565 < 100 ) )
}

func func1770(param1771 : Range<Int32>) : Int64 { // block id: 1772
    if (var569.var1777) { // block id: 1779
        var var1783 : Unit = ();
        [var1783, var1783, (), (), (), (), var820, var484, (), var820][1];
        match (Option<Unit>.None) {
            case _ => 
                ()
            
            case caseVar1803 : Int16 => 
                ();
                var820;
                var494 &&= var494
            
            case caseVar1812 => 
                var var1816 : Int64 = 1;
                var1816 **= (106 & 3);
                var1099;
                ()
            
            case _ => 
                ();
                ()
            
        }
    };
    let var1866 : Rune = '6';
    let var1872 : Array<Rune> = ['q', '2', 'P', 't', 'f', 'z', 'U', '1', 'A', 'p'];
    let var1914 : Rune = 'K';
    let var1985 : Range<UInt16> = (UInt16(27)&127..UInt16(131)&127:(-46)|1);
    match ([[var1660, var1660, 'T', 'X', 'u', 'q', var1660, 'P', var1660, var1660], var1843, [var1660, var1660, 'h', var1660, var1660, 'Q', var1660, 'P', '3', var1866], var1843, var1843, var1843, var1872, [var1866, 'c', 'Q', '0', 'u', 'c', 'v', var1660, 'Z', '1'], [var1660, 'q', '1', var1660, var1660, var1866, 'A', var1866, var1660, 'U'], ['E', 'c', var1866, '5', var1866, var1660, var1914, 'o', var1866, 'y']][4][6]) {
        case 'E' => 
            var1925;
            var1099
        
        case _ => 
            let var1961 : ((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>) = ((false, true, (UInt32(1)&127..UInt32(158)&127:(-5)|1)), (UInt8(186)&127..UInt8(237)&127:(-3)|1), (UInt8(254)&127..UInt8(73)&127:(Int64(UInt64(UInt16(105)))|1)));
            (var1086, [Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.Some((var1961, (UInt16(177)&127..UInt16(6)&127:(-79)|1), var541, var820)), Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None, Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.Some(((var276, var167, var167), var1985, var541, ())), var1990, var1990, Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.Some((var1961, (var200&127..var200&127:(var1099|1)), Int16(-30), ())), Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None, Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None, var1990, var1990]);
            (-105)
        
        case _ => 
            var820;
            var820;
            var1099
        
    }
}

public func func1744(param1745 : Range<UInt32>) : Int64 { // block id: 1746
    var1748;
    var var2024 : (Range<Int32>) -> Int64 = func1770;
    match {
        case var1752 => 
        Class8.var1763
        case _ => 
        (var1105 ?? ());
        var2027|>var2024
    }
}

func func834() : Option<Unit> { // block id: 835
    let var1319 : (Option<Unit>, Range<UInt16>, Array<Int64>) = ((('O' as (Range<UInt8>, UInt64, Bool, Range<UInt64>)) as Unit), (UInt16(203)&127..UInt16(147)&127:(Int64(UInt8(UInt8(153)))|1)), [Int64(Int32(UInt16(157))), Int64(Int32(16)), 8, 86, Int64(UInt16(UInt8(199))), Int64(Int64(Int8(85))), Int64(Int32(UInt8(192))), Int64(Int8(84)), 82, (-31)]);
    let var1354 : ?(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit) = ((UInt16(169)&127..UInt16(12)&127:43|1) as (((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit));
    let var1569 : ?Bool = Option<Bool>.Some(true);
    let var1590 : (Option<Unit>, Range<UInt16>, Array<Int64>) = ((((Int16(-52)&127..=Int16(-65)&127:22|1), UInt64(119), (Int16(-52)&127..Int16(-95)&127:(-24)|1), Option<Unit>.Some(()), (UInt64(39)&127..=UInt64(103)&127:(-65)|1), UInt64(Int16(81)), ((), """
Jh+3q
j9sSO
""", 16.0, [UInt8(124), UInt8(61), UInt8(216), UInt8(128), UInt8(105), UInt8(229), UInt8(27), UInt8(196), UInt8(10), UInt8(187)], """
D\"|7w
6[+Ey
""", '7')) as Unit), (UInt16(UInt16(UInt16(43)))&127..=UInt16(6)&127:(Int64(UInt64(UInt16(52)))|1)), [(-115), (-40), (-2), 115, 57, 15, (-32), (-37), 117, (-63)]);
    let var1631 : UInt16 = UInt16(Int8(Int8(-42)));
    func func1124(optionalParam1125 ! : (Bool, Bool, Range<UInt32>) = (false, false, (UInt32(UInt32(UInt8(27)))&127..=UInt32(43)&127:(Int64(Int16(81))|1)))) : Option<Bool> { // block id: 1136
        let var1290 : (((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>)) -> Bool = func1140;
        var var1312 : UInt8 = UInt8(Int8(35));
        var var1371 : ?Range<Int16> = Option<Range<Int16>>.Some((Int16(120)&127..=Int16(47)&127:(-62)|1));
        if (if ((((var494, true, (var1066&127..=UInt32(218)&127:((-55)|1))), (UInt8(126)&127..var1180&127:(66|1)), (UInt8(141)&127..=UInt8(75)&127:34|1))|>var1290)) { // block id: 1305
            true
        } else if (false) { // block id: 1308
            ();
            var1312 = var1180;
            true
        } else { // block id: 1317
            var1319;
            !true
        }) { var1354 } else { (try { // block id: 1359
            var494 ||= false;
            var var1364 : UInt64 = UInt64(39);
            var1364
        } catch (e: Exception) { // block id: 1367
            UInt64(208)
        } finally { // block id: 1369
            var1371;
            var var1376 : UInt64 = UInt64(UInt32(202));
            var1376 %= ((var1376) | 1);
            UInt64(222) + var1376
        } as (((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)) } ;
        try { // block id: 1384
            func1386((Int16(-25)&127..Int16(-75)&127:(-62)|1));
            ();
            var1569
        } catch (e: Exception) { // block id: 1572
            match (Option<Unit>.Some(())) {
                case caseVar1578 : Array<Int64> => 
                    var820
                
                case _ : Float64 => 
                    Int16(53);
                    var820;
                    var820
                
                case _ => 
                    var1590;
                    var200 **= (var1631 & 3);
                    var204 ^= var204
                
            };
            if (true) { var1569 } else { Option<Bool>.None } 
        }
    }
;
    let var1644 : (Bool, Bool, Range<UInt32>) = (("I$;3t8 9N?" is Array<UInt8>), true, (UInt32(57)&127..UInt32(75)&127:(78|1)));
    let var1667 : Array<Option<Unit>> = Array<Option<Unit>>(10){ i => (((), "3/Qp;dW *U", 84.0, [UInt8(108), UInt8(155), UInt8(7), UInt8(122), UInt8(181), UInt8(37), UInt8(12), UInt8(132), UInt8(98), UInt8(150)], """
#r.\\$
Y*%1)
""", 'L') as Unit) };
    let var2030 : (Range<UInt32>) -> Int64 = { lambdaParameter2033 : Range<UInt32> => Int64(UInt16(Int8(UInt8(147)))) };
    func func837(namedParam838 ! : (Int8, Int8, Int64, (UInt8) -> Unit) -> UInt8, namedParam844 ! : UInt16) : Int64 { // block id: 845
        var var1730 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
        ((if (false) { var1660 } else { 'b' } |>{ lambdaParameter1115 : Rune => if ((func1124() ?? var1644[1])) { var1105 } else { (Int8(96) as Unit) }  }) ?? (var1667[0] ?? var1730[8]));
        (UInt32(183) % ((UInt32(212)) | 1)&127..=UInt32(18)&127:(Int64(var200)|1))|>var2030
    }
;
    var var2047 : (Int8, Int8, Int64, (UInt8) -> Unit) -> UInt8 = func29;
    func837(namedParam838 : var2047, namedParam844 : UInt16(var239));
    (UInt32((var569.var2056)) as Unit)
}

public func func825(param826 : UInt32) : Option<Unit> { // block id: 827
    Class8.var831;
    func834()
}

public func func816(param817 : Int16) : Option<Unit> { // block id: 818
    var820;
    let var2093 : Bool = (((-56)&127..=(-15)&127:(-10)|1) is Option<Array<UInt8>>);
    try { // block id: 823
        var782|>func825
    } catch (e: Exception) { // block id: 2060
        match (Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.Some(var720)) {
            case _ => 
                ();
                if (true) { Option<Unit>.None } else { var1105 } 
            
            case caseVar2074 => 
                ();
                if (true) { var1105 } else { var1105 } 
            
            case _ : Option<(Range<UInt8>, UInt64, Bool, Range<UInt64>)> => 
                var1105
            
            case _ => 
                ();
                Option<Unit>.None
            
            case _ => 
                var2093;
                var1105
            
        }
    }
}



public func func607(param608 : Bool) : Int16 { // block id: 609
    let var768 : ?(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit) = (UInt64(154) as (((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit));
    let var792 : Range<UInt16> = (UInt16(7)&127..=UInt16(238)&127:((-104)|1));
    let var2219 : (Rune) -> Option<Unit> = func848;
    func func620(namedParam621 ! : (Int8, Int8, Int64, (UInt8) -> Unit) -> UInt8, namedParam627 ! : Range<Int32>) : Unit { // block id: 628
        let var789 : Range<UInt8> = (UInt8(208)&127..UInt8(1)&127:(-39)|1);
        var loopTimeVar813 : Int64 = 0;
        do {
            loopTimeVar813++;
            (Option<Unit>.None ?? var484)
        } while ((var569.func633(var720, var541, namedParam636 : ((UInt16(87)&127..=UInt16(220)&127:0|1), [Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.None, var768, var768, var768, var768, Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>.Some((((param608, true, (var782&127..=var782&127:(60|1))), var167, var789), var792, var541, var484)), var768, var768, var768, var768]), namedParam637 : var239)) && loopTimeVar813 < 100 ) ;
        let var2222 : (Range<Int16>, Float32) -> Unit = func1386;
        ((var720[2]|>func816) ?? Class8.func2104(var2219, var2222));
        var var2226 : Int16 = Int16(UInt16(214));
        var var2279 : (Array<Unit>, UInt8, Unit, (Range<UInt8>, UInt64, Bool, Range<UInt64>), Int16, Int8) = ([(), (), (), (), (), (), (), (), (), ()], UInt8(UInt8(UInt8(Int8(-87)))), (), ((UInt8(23)&127..UInt8(64)&127:74|1), UInt64(57), true, (UInt64(118)&127..=UInt64(81)&127:(116|1))), Int16(UInt16(72)), Int8(41));
        let var2310 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
        var2226 >>= ((match (Option<Bool>.Some(false)) {
            case _ => 
                var820;
                [['C', 'z', 'S', 'S', 'D', '9', 'f', 'c', 'J', 'r'], ['G', 'a', 'j', '4', 'S', '7', '1', 'c', 'c', 'K'], ['I', 'L', 'b', 'h', '4', 'm', 'h', '7', 'Q', 'K'], ['w', '2', 'B', 'k', 'Z', 'd', 'b', 'G', 'q', 'x'], ['i', '5', 'r', 'w', 'U', '3', 'H', 'O', 'e', 'O'], ['c', 't', 'r', 'A', 'B', 'D', '2', 'L', 'N', 'r'], ['E', '6', 'a', 'T', 'L', 'K', '8', 'E', '0', 'S'], ['0', 'I', 'T', 'h', 'S', '3', 'W', 'P', 'R', 'e'], ['X', 'P', 'p', 'a', '7', 'g', 'h', '5', 'S', 's'], ['Y', '0', 'y', 'F', 'C', 'w', 'T', '3', 'f', 'F']];
                var var2240 : (Array<Unit>, UInt8, Unit, (Range<UInt8>, UInt64, Bool, Range<UInt64>), Int16, Int8) = ([(), (), (), (), (), (), (), (), (), ()], UInt8(UInt8(UInt8(UInt8(208)))), (), ((UInt8(193)&127..=UInt8(4)&127:2|1), UInt64(UInt64(152)), false, (UInt64(Int16(43))&127..=UInt64(193)&127:((-47)|1))), Int16(118), Int8(UInt8(1)));
                var2240
            
            case caseVar2273 : Array<Option<Unit>> => 
                ();
                if (true) { var2279 } else { (var2310, UInt8(43), (), (var789, UInt64(225), true, (UInt64(117)&127..=var2331&127:(32|1))), Int16(93), var239) } 
            
            case _ => 
                let var2344 : Unit = ();
                var var2362 : Unit = ();
                var var2370 : UInt8 = UInt8(218);
                if (false) { (var2310, var1180, var2344, (var167, var2349, false, (UInt64(198)&127..=UInt64(247)&127:46|1)), var2226, Int8(91)) } else { ([(), var820, var820, (), var2362, (), (), (), var484, var484], var2370, var2373, ((UInt8(102)&127..=UInt8(195)&127:(-16)|1), UInt64(111), false, var1421), Int16(14), Int8(69)) } 
            
        }[4]) & 7)
    }
;
    var loopTimeVar2447 : Int64 = 0;
    do {
        loopTimeVar2447++;
        let var2433 : ?Bool = Option<Bool>.None;
        func func614(namedParam615 ! : (Bool, Bool, Range<UInt32>), namedParam616 ! : Range<Int8>, namedParam617 ! : Unit) : Unit { // block id: 618
            let var2395 : Option<Range<Int32>> = ((UInt64(Int16(Int8(-93)))&127..UInt64(57)&127:(Int64(UInt8(Int8(44)))|1)) as Range<Int32>);
            func620(namedParam621 : func29, namedParam627 : (try { // block id: 2390
                UInt64(188);
                if (param608) { var2395 } else { Option<Range<Int32>>.None } 
            } catch (_) { // block id: 2406
                if (false) { Option<Range<Int32>>.Some(var2027) } else { Option<Range<Int32>>.None } 
            } ?? if (false) { (Int32(-70)&127..=var204&127:(var1099|1)) } else { var2027 } ));
            var loopTimeVar2435 : Range<UInt64> = (UInt64(Int8(Int8(91)))&127..=UInt64(58)&127:(Int64(Int16(-93))|1));
            for (i in loopTimeVar2435 where try { // block id: 2421
                ();
                false
            } finally { // block id: 2424
                var484;
                var484;
                var494 && var494
            }) {
                var2125;
                var2433
            }
        }
;
        func614(namedParam615 : var276, namedParam616 : (Int8(54)&127..Int8(100)&127:87|1), namedParam617 : ())
    } while ((true) && loopTimeVar2447 < 100 ) ;
    let var2540 : (Range<UInt8>, ((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), UInt64) -> Array<Int64> = func1144;
    var var2544 : ((Int8, Int8, Int64, (UInt8) -> Unit) -> UInt8) -> UInt8 = func79;
    var var2549 : UInt64 = UInt64(51);
    var var2558 : ?Bool = (UInt16(Int8(UInt8(UInt8(172)))) as Bool);
    let var2586 : UInt8 = UInt8(Int8(108));
    var var2597 : String = "%|,oilc?d=";
    (var569.func2452([UInt64(174), UInt64(232), var2349, UInt64(120), UInt64(159), var2349, UInt64(40), UInt64(226), var2331, UInt64(124)], var2540, (UInt8(200)&127..=UInt8(198)&127:(-101)|1), var2544)) + match {
        case var2549 >= var2349 => 
        ();
        var1066;
        Int16(-3)
        case (var2558 ?? true) => 
        Int16(-57)
        case _ => 
        ((Int16(11)&127..Int16(113)&127:(-1)|1), UInt64(3), var2572, Option<Unit>.Some(()), var1421, var2349, (var2373, "75ain:+7E6", 18.0, [var1180, UInt8(91), var2586, var2586, UInt8(142), var2586, var2586, var2586, var1180, var2586], var2597, var2144));
        Int16(-70)
    }
}

public struct Aggregate2643 {
    init() { // block id: 2645

    }
;
    public static let var2648 : Int64 = (-118)
}

main(): Int64 {
    try {
        func func298(optionalParam299 ! : Int16 = Int16(-43), optionalParam301 ! : Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)> = (Class20() as (((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)), namedParam304 ! : Bool) : Class8 { // block id: 305
            var var585 : ((Int8, Int8, Int64, (UInt8) -> Unit) -> UInt8) -> Class8 = func307;
            let var595 : (Int8, Int8, Int64, (UInt8) -> Unit) -> UInt8 = { lambdaParameter598 : Int8, lambdaParameter599 : Int8, lambdaParameter600 : Int64, lambdaParameter601 : (UInt8) -> Unit => UInt8(UInt8(UInt8(136))) };
            var595|>var585
        }
;
        let var2602 : (Bool) -> Int16 = func607;
        func func12() : Class8 { // block id: 13
            let var211 : ((Int8, Int8, Int64, (UInt8) -> Unit) -> UInt8) -> UInt8 = func79;
            func func72(param73 : Float64, param74 : UInt8) : Int8 { // block id: 75
                Int8(((func213|>var211) - (func223|>var211)))
            }
;
            let var283 : UInt8 = UInt8(Int8(40));
            var var294 : (UInt8) -> Unit = func15;
            func29(func72(49.0, UInt8(44)), (Int8(71), (-94.0), var239, var242)[0], if (true) { // block id: 251
                var253;
                var266 = var242;
                var266 ** (var242 & 3)
            } else { // block id: 272
                ((var276, (var283&127..var283&127:(var242|1)), var167), (UInt16(43)&127..UInt16(37)&127:(-95)|1), Int16(26), ());
                (-30)
            }, namedParam33 : var294)|>func15;
            func298(optionalParam299 : (var494|>var2602), namedParam304 : (var2607 ?? false)).var2627;
            Class8()
        }
;
        func12().func2631(var1521);
        ();
        Aggregate2643.var2648
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var61*var61), 64)
        crccheck.updateBuffer(UInt64(var242*var242), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Class8 {
    public func func2452(param2453 : Array<UInt64>, param2454 : (Range<UInt8>, ((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), UInt64) -> Array<Int64>, param2459 : Range<UInt8>, param2460 : ((Int8, Int8, Int64, (UInt8) -> Unit) -> UInt8) -> UInt8) : Int16 { // block id: 2463
        ();
        (try { // block id: 2467
            ();
            var831;
            var200
        } finally { // block id: 2471
            var820;
            UInt16(244) + var200
        }&127..try { // block id: 2477
            var2479
        } finally { // block id: 2482
            var200
        }&127:((var2491 ?? 17) / (((-89)) | 1)|1));
        if (((var276, (UInt8(103)&127..UInt8(77)&127:((-14)|1)), (UInt8(83)&127..UInt8(216)&127:(64|1))) is ((((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit), Int16, (Range<UInt16>, Array<Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>>), Int8) -> Bool)) { // block id: 2508
            ();
            var2512 **= Float64(Int32(var2515) & 3);
            Int16(-11) * var541
        } else if (var1752 && var1777) { // block id: 2523
            Int16(-102)
        } else { // block id: 2525
            Int16(-3)
        } >> ((Int16(-6)) & 7)
    }
;
    public func func633(param634 : (((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit), param635 : Int16, namedParam636 ! : (Range<UInt16>, Array<Option<(((Bool, Bool, Range<UInt32>), Range<UInt8>, Range<UInt8>), Range<UInt16>, Int16, Unit)>>), namedParam637 ! : Int8) : Bool { // block id: 638
        func func646(param647 : String, namedParam648 ! : Option<Range<Int16>>, optionalParam649 ! : UInt8 = UInt8(11), namedParam651 ! : ((Int8, Int8, Int64, (UInt8) -> Unit) -> UInt8) -> UInt8) : Range<Int16> { // block id: 654
            (Int16(62)&127..=Int16(-11)&127:(try { // block id: 659
                var var661 : Int64 = Int64(Int16(UInt8(222)));
                var661
            } catch (e: Exception) { // block id: 665
                (-60)
            }|1))
        }
;
        let var701 : ((Int8, Int8, Int64, (UInt8) -> Unit) -> UInt8) -> UInt8 = { lambdaParameter704 : (Int8, Int8, Int64, (UInt8) -> Unit) -> UInt8 => UInt8(214) };
        (Option<Range<Int16>>.None ?? func646(var670[1], namedParam648 : try { // block id: 680
            Option<Range<Int16>>.Some((Int16(-100)&127..Int16(114)&127:6|1))
        } catch (e: Exception) { // block id: 683
            var685
        } finally { // block id: 687
            var var690 : UInt32 = UInt32(Int8(39));
            var690 <<= ((UInt32(213)) & 7);
            if (true) { Option<Range<Int16>>.Some((Int16(-24)&127..Int16(-4)&127:(-89)|1)) } else { Option<Range<Int16>>.None } 
        }, optionalParam649 : (func707|>var701), namedParam651 : func79));
        var var717 : Bool = true;
        var717
    }
;
    static func func2104(param2105 : (Rune) -> Option<Unit>, param2108 : (Range<Int16>, Float32) -> Unit) : Unit { // block id: 2112
        let var2173 : Unit = ();
        var var2198 : Bool = (UInt32(Int16(Int16(37))) is Class20);
        var loopTimeVar2217 : Int64 = 0;
        do {
            loopTimeVar2217++;

        } while ((match (match ((var782&127..=UInt32(56)&127:(106|1))) {
                case _ : Range<UInt64> => 
                    var2125 -= var1099;
                    var2132
                
                case _ : Int32 => 
                    [var1660, var1660, var1660, var1660, '9', var2144, '7', var1660, var1660, var2144];
                    if (true) { [(), (), (), (), (), (), (), (), (), ()] } else { var2132 } 
                
                case _ : Float32 => 
                    var1763;
                    ();
                    [(), (), (), (), (), (), (), (), (), ()]
                
                case _ => 
                    ();
                    var820;
                    var2132
                
            }) {
            case _ => 
                (UInt16(48)&127..=UInt16(116)&127:(var1099|1));
                var2173;
                false && var1752
            
            case caseVar2180 => 
                if (var1752) { '2' } else { var2144 } ;
                Float32(39.0) <= var2189
            
            case _ => 
                var484;
                (61&127..=114&127:63|1);
                var2198
            
            case _ => 
                (Int8(-11)&127..Int8(23)&127:((-106)|1));
                ();
                var494
            
            case _ => 
                var2198
            
        }) && loopTimeVar2217 < 100 ) 
    }

}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_expected_while_in_do_while
// ASSERT: scan parse_unexpected_declaration_in_scope
// ASSERT: scan parse_expected_character
// ASSERT: scan parse_expected_catch_or_finally_in_try
// ASSERT: scan parse_expected_expr_or_decl_in


