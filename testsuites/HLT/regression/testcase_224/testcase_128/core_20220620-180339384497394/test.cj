/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output


var var32 : Int64 = 91
let var49 : String = """
9;@ot
s]MM`
"""
public let var56 : Unit = ()
public let var75 : Int16 = Int16(-120)
public var var82 : Bool = true
var var203 : (Float32, Range<UInt64>, Array<UInt16>, Enum40) = (Float32(-40.0), (UInt64(235)&127..=UInt64(196)&127:56|1), [UInt16(235), UInt16(188), UInt16(46), UInt16(131), UInt16(53), UInt16(183), UInt16(148), UInt16(14), UInt16(157), UInt16(65)], Enum40.defaultValue)
public let var312 : Interface174 = Class171()
var var379 : Option<Unit> = Option<Unit>.None
public let var417 : Bool = false
public let var457 : Rune = '2'
public var var475 : UInt16 = UInt16(Int16(-10))
let var500 : Interface179 = Class434()
public var var529 : UInt8 = UInt8(44)
public let var552 : Int32 = Int32(Int32(Int32(Int8(-65))))
public var var560 : (Range<UInt16>, Range<UInt16>, Float64, Range<Int64>) = ((UInt16(UInt8(UInt8(142)))&127..UInt16(228)&127:(Int64(UInt64(244))|1)), (UInt16(193)&127..UInt16(187)&127:0|1), Float64(Float32(97.0)), (78&127..(-88)&127:(-55)|1))
var var579 : (Range<UInt16>, Range<UInt16>, Float64, Range<Int64>) = ((UInt16(55)&127..=UInt16(129)&127:20|1), (UInt16(207)&127..=UInt16(UInt16(Int8(-97)))&127:(73|1)), Float64(Float32(-17.0)), ((-46)&127..=96&127:(-48)|1))
let var603 : Interface183 = Class434()
let var686 : Range<Int32> = (Int32(91)&127..Int32(47)&127:124|1)
let var728 : (Array<Rune>, String, Range<Int64>, Range<Int8>, UInt32) = (['u', '7', 'K', 'V', 'B', 'o', '6', 'm', 'Z', 'g'], """
&:v6N
\\4JB^
""", (Int64(Int16(-32))&127..=(-122)&127:(Int64(UInt16(10))|1)), (Int8(-107)&127..=Int8(Int8(Int8(-124)))&127:(Int64(Int8(Int8(69)))|1)), UInt32(Int16(13)))
public let var760 : UInt8 = UInt8(UInt8(UInt8(UInt8(148))))
public var var777 : Range<UInt16> = (UInt16(Int16(-64))&127..=UInt16(UInt8(Int8(UInt8(81))))&127:((-24)|1))
public var var809 : Int64 = Int64(UInt64(61))
let var859 : UInt32 = UInt32(Int8(Int8(37)))
let var877 : Int32 = Int32(Int8(48))
public let var881 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
let var897 : Range<UInt32> = (UInt32(UInt16(115))&127..UInt32(UInt32(Int8(UInt8(203))))&127:((-89)|1))
public var var907 : Int8 = Int8(9)
public var var926 : Unit = ()
public var var929 : Unit = ()
public var var938 : Array<Interface174> = [Class171(), Class171(), Class171(), Class171(), Class171(), Class171(), Class171(), Class171(), Class171(), Class171()]
var var958 : UInt32 = UInt32(249)
public var var973 : UInt64 = UInt64(UInt8(135))
public var var990 : UInt16 = UInt16(91)
public var var994 : Int64 = Int64(Int64(Int16(Int8(Int8(-10)))))
public let var1011 : Interface175 = Class171()
public var var1072 : Range<Int64> = ((-99)&127..(-97)&127:119|1)
public var var1107 : Array<Int16> = Array<Int16>(10){ i => Int16(UInt16(242)) }
public var var1186 : UInt8 = UInt8(Int8(UInt8(102)))
public var var1446 : Interface180 = Class434()
public var var1458 : Array<Array<Rune>> = [['Y', 'K', '5', 'V', '1', 'R', '8', 'K', 'L', 'E'], ['b', 'A', 's', 'N', 'G', 'd', 'f', '6', '3', 'O'], ['E', 'l', 'z', 'b', 'N', 'j', 'x', 'I', 'w', 'X'], ['B', '9', 'C', 'p', 'X', '4', 'w', 'r', 'b', '2'], ['B', 'u', 'V', 'c', 'X', 'M', 'N', 'x', '2', 'B'], ['u', 'z', 'b', 'f', 'r', 'o', 'z', 'A', 'n', 'y'], ['E', '7', '6', 'K', '9', 'D', 'F', 'b', 'O', '3'], ['s', 'X', 'Q', 'D', 'X', 't', 'd', 'l', 'H', 'Q'], ['L', 'v', 's', 'T', 'F', 't', 'g', 'r', 'p', 'k'], ['p', 'o', 'l', 'T', 'Z', 'P', 'Q', '8', '3', 'o']]
public var var1604 : Rune = 'w'
public var var1613 : Rune = '5'
public let var1631 : Rune = '7'
public var var1634 : Rune = 'G'
public var var1637 : Rune = 'e'
public let var1658 : Array<Rune> = ['z', '0', 'O', 'R', 'p', 'v', '8', 's', 'a', 'V']
let var1696 : Interface175 = Class171()
public var var1770 : Int8 = Int8(75)
public let var1776 : (Int64, Array<Rune>, Int64, Interface183, Int64) = (Int64(Int8(-65)), ['7', 'l', 'S', 'V', 'C', '2', 'I', 'W', 'x', 'S'], Int64(UInt8(188)), Class434(), Int64(UInt64(UInt64(175))))
public var var1804 : Bool = false
public let var1821 : UInt32 = UInt32(UInt8(32))
public var var1836 : UInt32 = UInt32(46)
let var1864 : ?Unit = Option<Unit>.None
public var var1902 : Array<UInt16> = [UInt16(23), UInt16(238), UInt16(253), UInt16(182), UInt16(146), UInt16(233), UInt16(26), UInt16(1), UInt16(27), UInt16(176)]
public let var1995 : Array<Rune> = ['f', 'c', 'R', 's', '1', 'F', 'f', 'V', 'N', 'Y']
let var2000 : Unit = ()
public var var2016 : Array<Bool> = [false, false, false, false, false, false, false, false, true, false]
public var var2314 : Unit = ()
var var2379 : Array<Rune> = ['n', 'm', 'o', 'v', 'q', 'j', 'S', '1', 'C', 'B']
public var var2439 : Float32 = Float32(Float32(Float32(-115.0)))
let var2501 : ??Int32 = ((Int16(Int8(Int8(-114))), (UInt32(Int8(-123))&127..UInt32(Int8(3))&127:(105|1)), Int8(UInt8(Int8(-4))), UInt64(96), (Int16(-24)&127..=Int16(-80)&127:(Int64(UInt16(80))|1)), Float64(Float32(113.0)), UInt64(Int16(UInt8(254))), Int32(UInt32(239)), [(), (), (), (), (), (), (), (), (), ()]) as Option<Int32>)
let var2641 : Class434 = Class434()
public let var2734 : Int16 = Int16(-25)
public let var2749 : ?Unit = Option<Unit>.None
public var var2761 : Int64 = Int64(Int8(-102))
var var3016 : Unit = ()
let var3295 : ?Unit = Option<Unit>.None
public var var3302 : Array<Bool> = [false, true, false, false, true, false, false, true, true, true]
public var var3320 : String = "]3R&Qej);d"
var var3501 : (Array<Rune>, Array<Unit>, Float64, Bool, Array<Bool>, Range<UInt8>, Range<Int64>, Unit) = (['h', 'C', 'Z', 'r', 'y', 'o', 'z', 'h', 'f', 'b'], [(), (), (), (), (), (), (), (), (), ()], 44.0, false, [false, (Class434() is (Int64) -> Range<Int16>), true, (Class434() is Range<Int8>), (UInt64(87) is Option<Unit>), true, (Class434() is Range<UInt8>), true, ([true, true, true, false, false, true, true, false, true, false] is Class171), (((Int32(-20), [true, true, true, true, false, true, true, true, true, false], Int16(93), [['y', 'L', 'f', 'D', 'w', 'e', 'B', '9', 'm', '4'], ['g', 'e', 'M', '9', 'a', 'K', 'A', 'l', 'S', 'T'], ['n', 'G', 't', 'g', 'Z', 'Y', 'c', 'K', 'l', 'I'], ['f', 'd', 'Q', 'M', 'O', 'e', 'K', 'c', 'S', 'X'], ['2', 'B', '2', 's', 'I', 's', 'B', 'g', 'h', '9'], ['I', 'N', 'O', 'g', '4', '5', 'P', '4', 'a', '3'], ['6', 'F', '0', 'R', 'T', 'j', 'Z', 'R', 'y', 'R'], ['K', 'Q', '4', '3', 'M', 'A', '6', 'Z', 'c', 'C'], ['v', 'j', 'Y', 'p', 'G', 'b', 'N', 's', 'S', 'L'], ['r', 'K', 'B', 'd', 'H', 'Z', 'h', 'E', 'z', '6']]) as Option<Int32>) is Interface179)], (UInt8(227)&127..=UInt8(235)&127:(-98)|1), (52&127..=11&127:(-103)|1), ())
public var var3609 : Int64 = Int64(UInt16(UInt16(UInt16(61))))
public let var3619 : Float64 = Float64(Float32(Float32(Float32(Float32(77.0)))))
public var var3641 : Range<UInt64> = (UInt64(115)&127..UInt64(45)&127:(Int64(UInt32(60))|1))
let var3680 : Range<UInt8> = (UInt8(Int8(UInt8(UInt8(144))))&127..UInt8(Int8(UInt8(79)))&127:(Int64(Int32(-50))|1))
public var var3712 : Array<UInt16> = Array<UInt16>(10){ i => UInt16(108) }
public var var3736 : (Array<Rune>, Unit, Array<Unit>) = (['m', 'O', 'K', 'T', 'H', 'F', 'k', 'R', 'K', 'x'], (), [(), (), (), (), (), (), (), (), (), ()])
public let var3814 : Interface174 = Class171()
public var var3938 : Interface179 = Class171()
public let var3969 : UInt8 = UInt8(UInt8(46))
public var var3990 : Unit = ()
var var4020 : Option<Interface176> = (UInt64(39) as Interface176)
public let var4054 : (Int16, Range<UInt32>, Int8, UInt64, Range<Int16>, Float64, UInt64, Int32, Array<Unit>) = (Int16(UInt16(201)), (UInt32(116)&127..UInt32(139)&127:10|1), Int8(Int8(Int8(-20))), UInt64(UInt64(UInt32(Int32(7)))), (Int16(-69)&127..=Int16(-72)&127:(-72)|1), 59.0, UInt64(159), Int32(25), [(), (), (), (), (), (), (), (), (), ()])
public let var4108 : Range<Int16> = (Int16(47)&127..Int16(56)&127:(-12)|1)
public let var4127 : Option<Int16> = ([Int16(47), Int16(UInt8(227)), Int16(-52), Int16(53), Int16(85), Int16(-33), Int16(-13), Int16(UInt8(Int8(22))), Int16(113), Int16(46)] as Int16)
public var var4212 : Range<UInt8> = (UInt8(120)&127..UInt8(116)&127:(-32)|1)
public let var4231 : Float32 = Float32(Float32(Float32(-115.0)))
public let var4449 : Int32 = Int32(Int32(-15))
public let var4485 : Option<(Float32, Range<UInt64>, Array<UInt16>, Enum40)> = ([Class171(), Class171(), Class171(), Class171(), Class171(), Class171(), Class171(), Class171(), Class171(), Class171()] as (Float32, Range<UInt64>, Array<UInt16>, Enum40))
var var4505 : Int32 = Int32(Int8(56))
public var var4588 : Range<UInt64> = (UInt64(226)&127..=UInt64(Int8(43))&127:(57|1))
public var var4596 : Option<Option<Int8>> = (0 as Option<Int8>)
public enum Enum40 {
    defaultValue |
    enumValue3790
}
public interface Interface174 {
    func func4625(param4626 : (Option<Option<Int32>>) -> Float64, param4629 : (Array<Bool>) -> Array<Bool>) : Bool { // block id: 4632
        true
    }

}

public interface Interface181 {

}

public interface Interface183 <: Interface181 {

}

public interface Interface182<T0, T1> <: Interface181 & Interface183 where T0 <: Array<UInt16>, T1 <: Range<UInt32> {
    func func396(namedParam397 ! : Interface183, namedParam398 ! : Unit) : Int32 { // block id: 399
        var var536 : (Array<Unit>) -> Bool = { lambdaParameter539 : Array<Unit> => true };
        var var546 : UInt32 = UInt32(UInt32(77));
        if (([(), (), (), (), (), (), (), (), (), ()]|>var536)) { // block id: 543
            var546 * var546;
            (var552&127..=var552&127:((-90)|1));
            var560
        } else { // block id: 573
            var var575 : Unit = ();
            var575;
            ();
            var579
        }[1];
        ();
        Int32((Option<Int32>.Some(var552) ?? Int32(24)))
    }

}

public interface Interface180 <: Interface181 & Interface182<Array<UInt16>, Range<UInt32>> {
    static func func382(namedParam383 ! : Range<Int16>, namedParam384 ! : Range<Int32>, namedParam385 ! : Int32) : Unit { // block id: 386
        let var393 : Interface180 = Class171();
        var var606 : Unit = ();
        let var632 : Interface183 = Class171();
        var var657 : UInt64 = UInt64(UInt8(Int8(28)));
        if (Int32(UInt8(249)) >= (var393.func396(namedParam397 : var603, namedParam398 : var606))) { // block id: 608
            let var611 : Range<Int8> = (Int8(UInt8(UInt8(227)))&127..Int8(Int8(UInt8(156)))&127:((-8)|1));
            var var625 : Unit = ();
            match (var611) {
                case _ : UInt8 => 
                    var606;
                    var625
                
                case caseVar629 => 
                    var632;
                    var417;
                    var529 <<= ((UInt8(214)) & 7)
                
                case caseVar640 : Int16 => 
                    var475;
                    Float32(-28.0);
                    let var645 : Unit = ();
                    var645
                
                case caseVar649 => 
                    var625;
                    ()
                
                case _ => 
                    var657 *= UInt64(150)
                
            };
            var606
        }
    }

}

public interface Interface179 <: Interface180 {

}

public interface Interface178<T0, T1> <: Interface179 & Interface181 where T0 <: Int16, T1 <: Interface183 & Interface181 {

}

public interface Interface177 <: Interface178<Int16, Interface183> & Interface180 {
    func func396(namedParam397 ! : Interface183, namedParam398 ! : Unit) : Int32 { // block id: 399
        var var536 : (Array<Unit>) -> Bool = { lambdaParameter539 : Array<Unit> => true };
        var var546 : UInt32 = UInt32(UInt32(77));
        match {
            case ([(), (), (), (), (), (), (), (), (), ()]|>var536) => 
            var546 * var546;
            (var552&127..=var552&127:((-90)|1));
            var560
            case _ => 
            var var575 : Unit = ();
            var575;
            ();
            var579
        }[1];
        ();
        Int32((Option<Int32>.Some(var552) ?? Int32(24)))
    }
;
    static func func382(namedParam383 ! : Range<Int16>, namedParam384 ! : Range<Int32>, namedParam385 ! : Int32) : Unit { // block id: 386
        let var393 : Interface180 = Class171();
        var var606 : Unit = ();
        let var632 : Interface183 = Class171();
        var var657 : UInt64 = UInt64(UInt8(Int8(28)));
        if (Int32(UInt8(249)) >= (var393.func396(namedParam397 : var603, namedParam398 : var606))) { // block id: 608
            let var611 : Range<Int8> = (Int8(UInt8(UInt8(227)))&127..Int8(Int8(UInt8(156)))&127:((-8)|1));
            var var625 : Unit = ();
            match (var611) {
                case _ : UInt8 => 
                    var606;
                    var625
                
                case caseVar629 => 
                    var632;
                    var417;
                    var529 <<= ((UInt8(214)) & 7)
                
                case caseVar640 : Int16 => 
                    var475;
                    Float32(-28.0);
                    let var645 : Unit = ();
                    var645
                
                case caseVar649 => 
                    var625;
                    ()
                
                case _ => 
                    var657 *= UInt64(150)
                
            };
            var606
        }
    }

}

public interface Interface176 <: Interface177 & Interface178<Int16, Interface183> {
    func func396(namedParam397 ! : Interface183, namedParam398 ! : Unit) : Int32 { // block id: 399
        var var536 : (Array<Unit>) -> Bool = { lambdaParameter539 : Array<Unit> => true };
        var var546 : UInt32 = UInt32(UInt32(77));
        match {
            case ([(), (), (), (), (), (), (), (), (), ()]|>var536) => 
            var546 * var546;
            (var552&127..=var552&127:((-90)|1));
            var560
            case _ => 
            var var575 : Unit = ();
            var575;
            ();
            var579
        }[1];
        ();
        Int32((Option<Int32>.Some(var552) ?? Int32(24)))
    }
;
    static func func382(namedParam383 ! : Range<Int16>, namedParam384 ! : Range<Int32>, namedParam385 ! : Int32) : Unit { // block id: 386
        let var393 : Interface180 = Class171();
        var var606 : Unit = ();
        let var632 : Interface183 = Class171();
        var var657 : UInt64 = UInt64(UInt8(Int8(28)));
        if (Int32(UInt8(249)) >= (var393.func396(namedParam397 : var603, namedParam398 : var606))) { // block id: 608
            let var611 : Range<Int8> = (Int8(UInt8(UInt8(227)))&127..Int8(Int8(UInt8(156)))&127:((-8)|1));
            var var625 : Unit = ();
            match (var611) {
                case _ : UInt8 => 
                    var606;
                    var625
                
                case caseVar629 => 
                    var632;
                    var417;
                    var529 <<= ((UInt8(214)) & 7)
                
                case caseVar640 : Int16 => 
                    var475;
                    Float32(-28.0);
                    let var645 : Unit = ();
                    var645
                
                case caseVar649 => 
                    var625;
                    ()
                
                case _ => 
                    var657 *= UInt64(150)
                
            };
            var606
        }
    }

}

public interface Interface175 <: Interface176 & Interface177 {
    func func396(namedParam397 ! : Interface183, namedParam398 ! : Unit) : Int32 { // block id: 399
        var var536 : (Array<Unit>) -> Bool = { lambdaParameter539 : Array<Unit> => true };
        var var546 : UInt32 = UInt32(UInt32(77));
        if (([(), (), (), (), (), (), (), (), (), ()]|>var536)) { // block id: 543
            var546 * var546;
            (var552&127..=var552&127:((-90)|1));
            var560
        } else { // block id: 573
            var var575 : Unit = ();
            var575;
            ();
            var579
        }[1];
        ();
        Int32((Option<Int32>.Some(var552) ?? Int32(24)))
    }
;
    static func func382(namedParam383 ! : Range<Int16>, namedParam384 ! : Range<Int32>, namedParam385 ! : Int32) : Unit { // block id: 386
        let var393 : Interface180 = Class171();
        var var606 : Unit = ();
        let var632 : Interface183 = Class171();
        var var657 : UInt64 = UInt64(UInt8(Int8(28)));
        if (Int32(UInt8(249)) >= (var393.func396(namedParam397 : var603, namedParam398 : var606))) { // block id: 608
            let var611 : Range<Int8> = (Int8(UInt8(UInt8(227)))&127..Int8(Int8(UInt8(156)))&127:((-8)|1));
            var var625 : Unit = ();
            match (var611) {
                case _ : UInt8 => 
                    var606;
                    var625
                
                case caseVar629 => 
                    var632;
                    var417;
                    var529 <<= ((UInt8(214)) & 7)
                
                case caseVar640 : Int16 => 
                    var475;
                    Float32(-28.0);
                    let var645 : Unit = ();
                    var645
                
                case caseVar649 => 
                    var625;
                    ()
                
                case _ => 
                    var657 *= UInt64(150)
                
            };
            var606
        }
    }

}

public open class Class171 <: Interface174 & Interface175 & Resource {
    public init() { // block id: 173

    }
;
    private static var var297 : Array<Interface174> = [Class171(), Class171(), Class171(), Class171(), Class171(), Class171(), Class171(), Class171(), Class171(), Class171()];
    public static let var2019 : Range<UInt8> = (UInt8(34)&127..UInt8(209)&127:71|1);
    private static var var2069 : Array<Array<Rune>> = [['S', 'D', 'a', 'a', 'r', 'N', 'L', 'Z', '2', '7'], ['u', 'u', 'q', '4', 'B', '0', 'd', 'G', 'F', 'm'], ['n', 'W', 'x', 'R', 'B', 'j', 'X', 'l', 'S', '6'], ['0', 'V', 'h', 'V', 'N', 'T', 'u', 'a', 'h', 'D'], ['s', 'u', 't', '1', 'i', 'i', 'n', 'g', '7', 'r'], ['w', 'v', 'J', 'a', 'L', '3', 'o', 'J', 'b', 'M'], ['d', 'd', '3', 'F', 'G', 'b', '5', 'A', 'W', 'z'], ['L', 'w', 'x', '3', 'R', 'Q', 'x', 'J', 'x', 'F'], ['x', 'y', 'f', 'G', 'Y', '9', 'y', 'S', '9', 'D'], ['W', 'M', 'c', 'E', '3', 'W', 'g', 'K', 'P', 'y']];
    public init(namedParam1978 ! : Int16, namedParam1979 ! : (Array<Rune>, Array<Unit>, Float64, Bool, Array<Bool>, Range<UInt8>, Range<Int64>, Unit), namedParam1980 ! : (Bool) -> Range<Int16>) { // block id: 1983
        match {
            case match (UInt8(5)) {
            case caseVar1990 => 
                var929;
                let var2011 : Float64 = Float64((-80.0));
                (var1995, [var56, var2000, (), (), (), var926, var926, var2000, (), var56], var2011, var82, var2016, var2019, ((-58)&127..=var994&127:((-114)|1)), ());
                false
            
            case 7 | 147 | 45 => 
                ();
                Int32(-31);
                var760 <= UInt8(199)
            
            case 224 | 6 => 
                var82
            
            case caseVar2041 : Int8 => 
                !var82
            
            case _ => 
                false
            
        } => 
            ();
            if (true) { ['N', 'A', 'l', 'n', '9', 'z', 'w', 'W', 'Y', 'Q'] } else { ['R', '4', 'M', 'C', 'G', 'c', '7', 'N', 'b', 'u'] } ;
            Int32(81) << ((Int32(58)) & 7)
            case _ => 
            ();
            var877 ^ var877
        } & (Int32(51), var2016, Int16(106), var2069)[0];
        17;
        match (try { // block id: 2165
                ();
                ();
                (var958&127..=UInt32(222)&127:(var994|1))
            } catch (e: Exception) { // block id: 2172
                (UInt32(248)&127..=var859&127:(var809|1))
            } finally { // block id: 2177
                var1186 **= (UInt8(161) & 3);
                var973--;
                if (true) { var897 } else { var897 } 
            }) {
            case _ => 
                if (var82) { var312 } else { var312 } ;
                var938
            
        }
    }
;
    public init(param1559 : Enum40, optionalParam1560 ! : (Range<UInt16>, Range<UInt16>, Float64, Range<Int64>) = ((UInt16(146)&127..=UInt16(61)&127:105|1), (UInt16(Int16(66))&127..UInt16(1)&127:((-92)|1)), Float64(Float32(67.0)), (Int64(UInt32(158))&127..=Int64(UInt32(131))&127:(Int64(126)|1)))) { // block id: 1577
        var loopTimeVar1581 : Range<UInt64> = (UInt64(105)&127..UInt64(UInt8(167))&127:((-4)|1));
        for (i in loopTimeVar1581 where true) {

        };
        if (UInt64(47) <= var973) { // block id: 1591
            """
amVgS
=2tM]
"""|>func1593
        } else if (var82) { // block id: 3403
            var809 += var994;
            match (param1559) {
                case _ => 
                    var2000;
                    var907 ^ var907
                
                case caseVar3418 : (Int32, Array<Bool>, Int16, Array<Array<Rune>>) => 
                    (UInt8(249)&127..=UInt8(156)&127:(-115)|1);
                    var926;
                    var907
                
                case _ : Range<UInt16> => 
                    var907 + Int8(33)
                
                case _ => 
                    Int8(-31)
                
            }
        } else { // block id: 3432
            var929;
            match (var2019) {
                case _ => 
                    var929;
                    var82 &&= var82
                
                case _ => 
                    var32++;
                    var926
                
                case _ => 
                    var958;
                    var994 <<= ((var32) & 7)
                
            };
            var907
        }
    }
;
    public init(namedParam368 ! : Range<Int8>, namedParam369 ! : Int32, namedParam370 ! : Range<Int64>, namedParam371 ! : UInt32) { // block id: 372
        let var666 : (Int16, Range<UInt32>, Int8, UInt64, Range<Int16>, Float64, UInt64, Int32, Array<Unit>) = (Int16(101), (UInt32(234)&127..=UInt32(166)&127:(-65)|1), Int8(21), UInt64(89), (Int16(77)&127..=Int16(119)&127:(-39)|1), Float64(Float32(Float32(92.0))), UInt64(Int64(Int8(Int8(-58)))), Int32(UInt32(4)), [(), (), (), (), (), (), (), (), (), ()]);
        let var691 : Unit = ();
        (var379 ?? func382(namedParam383 : var666[4], namedParam384 : var686, namedParam385 : try { // block id: 689
            var691;
            Int32(113)
        } catch (e: Exception) { // block id: 694
            var691;
            namedParam369 & Int32(68)
        } finally { // block id: 699
            Int32(45) ** (namedParam369 & 3)
        }));
        if ((try { // block id: 3824
            Int16(-103);
            Int16(-35) * var75
        } finally { // block id: 3829
            UInt8(68);
            if (false) { [var82, var82, false, var82, var82, true, var82, false, var82, false] } else { var2016 } ;
            Int16(-76) >> ((var75) & 7)
        }|>(func3657~>func711))) { // block id: 3848
            var926;
            var loopTimeVar3855 : Int64 = 0;
            do {
                loopTimeVar3855++;
                var2069
            } while ((var82) && loopTimeVar3855 < 100 ) 
        } else if ((if (false) { // block id: 3859
            "i67okPuO]*"
        } else { // block id: 3861
            var859 & namedParam371;
            var1186 += UInt8(129);
            var49
        } is Interface179)) { // block id: 3869
            var691
        }
    }
;
    static let var4028 : Interface176 = Class171();
    public static var var4197 : Int16 = Int16(79);
    public init(namedParam323 ! : Bool) { // block id: 324
        let var4005 : Float32 = Float32(Float32(Float32(Float32(Float32(-39.0)))));
        func326<String>(optionalParam327 : match (Option<Interface177>.None) {
            case _ => 
                var var3935 : Interface179 = Class171();
                if (true) { var3935 } else { var3938 } 
            
        }, namedParam329 : match (if (true) { [namedParam323, var82, true, false, namedParam323, namedParam323, var82, false, true, namedParam323] } else { var2016 } ) {
            case _ => 
                var82 ||= namedParam323;
                Class171()
            
        }, optionalParam330 : Float32(Float32(-110.0)) ** Float32(Int32(try { // block id: 3965
            var1186 %= ((var3969) | 1);
            Float32(-90.0)
        } catch (e: Exception) { // block id: 3973
            (Int16(113), (UInt32(191)&127..UInt32(92)&127:(-32)|1), var907, UInt64(28), (Int16(96)&127..Int16(-104)&127:(-22)|1), 36.0, var973, Int32(-92), [(), (), var2000, var2000, var2000, var3990, var929, var926, (), ()]);
            Option<Array<Int16>>.None;
            let var3999 : Float32 = Float32(-120.0);
            var3999 % Float32((Int32(var3999)) | 1)
        } finally { // block id: 4002
            var4005 * Float32(-8.0)
        }) & 3), namedParam333 : (if (false) { var4020 } else { Option<Interface176>.None }  ?? if (namedParam323) { Class171() } else { var4028 } ));
        match ((UInt8(20)&127..UInt8(158)&127:45|1)) {
            case _ => 
                var926;
                if (true) { [namedParam323, true, namedParam323, true, namedParam323, false, var82, true, false, false] } else { var2016 } 
            
            case _ => 
                ();
                var4054;
                [false, false, false, false, true, true, false, true, true, false]
            
        };
        var var4256 : Int8 = Int8(UInt8(UInt8(208)));
        [match (if (var82) { (var75, (UInt32(108)&127..=var958&127:(var3609|1)), Int8(-9), UInt64(206), (Int16(121)&127..=var75&127:(51|1)), (-59.0), UInt64(81), Int32(98), [(), (), (), (), (), (), (), var56, (), var929]) } else { (var75, var897, var907, var973, var4108, var3619, var973, var877, var881) } ) {
            case _ => 
                var3736;
                [Int16(-61), Int16(102), Int16(-99), Int16(78), Int16(110), Int16(-51), Int16(-14), Int16(57), Int16(-41), Int16(63)];
                Int16(66)
            
        }, (if (var82) { var4127 } else { Option<Int16>.None }  ?? match ("`$CYbBuCLG") {
            case caseVar4148 : Int16 => 
                let var4151 : Enum40 = Enum40.defaultValue;
                var4151;
                Int16(-92)
            
            case _ : (Int32, Array<Bool>, Int16, Array<Array<Rune>>) => 
                ();
                (Int32(-5), [false, true, false, false, false, true, true, false, false, false], Int16(-4), var2069);
                var75
            
            case "@`uD|]y,3D" => 
                Int16(91) + var75
            
            case _ => 
                Int16(-104)
            
        }), (Option<Int16>.Some(var75) ?? Int16(-89)), Int16(29), if (match (var4005) {
            case 8.0 | 111.0 | 5.0 => 
                var1186 <= var1186
            
            case _ => 
                true
            
        }) { // block id: 4190
            var897;
            var2016;
            Int16(-50)
        } else { // block id: 4194
            var3814;
            var4197
        }, var4197, if (false) { // block id: 4203
            var3990;
            ();
            Int16(-74)
        } else if (false) { // block id: 4208
            if (true) { var4212 } else { var2019 } ;
            ();
            var75
        } else { // block id: 4217
            var990 *= var990;
            Int16(93)
        } ^ var4197, var4197, if (if (namedParam323) { // block id: 4227
            var4005 <= var4231
        } else { // block id: 4235
            UInt8(243);
            true
        }) { // block id: 4238
            var4212;
            var4197 >> ((var75) & 7);
            var75
        } else { // block id: 4244
            Option<Int16>.None;
            ();
            Int16(80)
        }, Int16(if (namedParam323) { // block id: 4251
            Int8(-6)
        } else { // block id: 4253
            var4256 -= var4256;
            var4256
        })]
    }
;
    private static let var4346 : Enum40 = Enum40.defaultValue;
    public static var var4412 : Bool = false;
    private init(namedParam4276 ! : UInt16, namedParam4277 ! : (Array<Unit>) -> Bool) { // block id: 4280
        var973 -= match {
            case false => 
            var4197 %= ((Int16(42)) | 1);
            var926;
            var973
            case _ => 
            UInt64(200) ^ UInt64(75)
        };
        match (((Option<Option<Int8>>.None ?? Option<Int8>.None) ?? Int8(var760))) {
            case caseVar4312 => 
                var926;
                var973;
                ()
            
            case _ => 
                (UInt64(236)&127..=UInt64(38)&127:(var994|1));
                ()
            
        };
        let var4422 : Bool = (Enum40.enumValue3790 is UInt16);
        if (if (var82) { // block id: 4327
            if (var82) { ((UInt16(135)&127..=UInt16(111)&127:51|1), (UInt16(254)&127..UInt16(150)&127:120|1), 18.0, (var994&127..(-51)&127:(85|1))) } else { (var777, (UInt16(123)&127..=UInt16(6)&127:61|1), (-87.0), (119&127..=(-48)&127:(-18)|1)) } ;
            if (false) { var4346 } else { Enum40.defaultValue } ;
            var82
        } else if (try { // block id: 4351
            var56;
            var82
        } finally { // block id: 4354
            if (true) { (Int8(123)&127..Int8(88)&127:(-117)|1) } else { (var907&127..=var907&127:(81|1)) } ;
            false
        }) { // block id: 4363
            Int32(-113);
            var4197 <<= ((var75) & 7);
            true
        } else { // block id: 4369
            var82
        }) { // block id: 4371
            var82 ||= true;
            try (resource = Class171()) { // block id: 4376

            } finally { // block id: 4377
                var4054;
                var2000
            };
            ()
        } else if (match (Option<Interface177>.Some(Class171())) {
            case _ : Interface175 => 
                Float32(125.0) > Float32(-45.0)
            
            case _ : (Array<Rune>, Array<Unit>, Float64, Bool, Array<Bool>, Range<UInt8>, Range<Int64>, Unit) => 
                if (var82) { var312 } else { var312 } ;
                [Int16(7), Int16(112), Int16(16), Int16(-14), Int16(122), Int16(-55), Int16(-85), Int16(111), Int16(-69), Int16(59)];
                var82 || true
            
            case _ => 
                ();
                Int8(54) >= Int8(60)
            
            case _ => 
                [var4412, var82, true, var4412, false, var4412, false, var4412, var4422, var4412];
                var4412 ||= false;
                var4412
            
        }) { // block id: 4430
            var2000
        }
    }
;
    public init(namedParam281 ! : Range<Int8>, namedParam282 ! : Range<Int64>) { // block id: 283
        let var4434 : (Array<Unit>) -> Bool = func404;
        match ((-94.0)) {
            case _ : UInt16 => 
                var32 >>= ((2) & 7);
                if (var82) { var297 } else { [Class171(), var312, var312, Class171(), Class171(), Class171(), Class171(), var312, var312, Class171(namedParam323 : true)] } 
            
            case _ => 
                if (false) { var4020 } else { var4020 } ;
                var897;
                if (var82) { var938 } else { [Class171(namedParam4276 : var990, namedParam4277 : var4434), var3814, var3814, var312, Class171(namedParam323 : true), Class171(), var3814, Class171(namedParam4276 : var990, namedParam4277 : var4434), Class171(namedParam368 : namedParam281, namedParam369 : var4449, namedParam370 : (61&127..(-105)&127:3|1), namedParam371 : var859), Class171(namedParam323 : var4412)] } 
            
        }[9];
        let var4473 : Int16 = Int16(Int8(85));
        (if ((var809 < var32)) { ([Int16(31), var75, Int16(-10), Int16(68), var4473, Int16(-31), Int16(-26), var75, Int16(119), Int16(-125)] as (Float32, Range<UInt64>, Array<UInt16>, Enum40)) } else { try { // block id: 4482
            ();
            var4485
        } finally { // block id: 4498
            var926;
            var4485
        } }  ?? try { // block id: 4502
            var4505 **= (Int32(-124) & 3);
            var4054;
            var203
        } finally { // block id: 4511
            var4054;
            let var4516 : Int16 = Int16(-57);
            var4197 >>= ((var4516) & 7);
            var203
        });
        var var4551 : Int32 = Int32(UInt32(30));
        try (resource = Class171()) { // block id: 4520
            var926;
            var var4533 : Int64 = 105;
            match (var907) {
                case _ => 
                    if (var4412) { var3680 } else { (var760&127..=UInt8(123)&127:(var4533|1)) } 
                
            };
            var3609 >>= (((-55)) & 7)
        } finally { // block id: 4538
            (Int16(-81), (UInt32(18)&127..var859&127:((-76)|1)), var907, UInt64(106), (Int16(49)&127..Int16(17)&127:87|1), var3619, var973, var4551, [(), (), (), (), (), (), (), (), (), ()]);
            let var4585 : Bool = false;
            match ((Int32(-33)&127..var4505&127:(102|1))) {
                case _ : Float32 => 
                    if (false) { (Int8(-97)&127..=Int8(112)&127:(var3609|1)) } else { (Int8(-80)&127..=Int8(35)&127:(98|1)) } ;
                    Class171();
                    ()
                
                case caseVar4577 : Unit => 
                    Float32(-99.0);
                    ()
                
                case _ => 
                    if (var4585) { var4588 } else { (UInt64(117)&127..UInt64(140)&127:67|1) } ;
                    var4596;
                    ()
                
            }
        }
    }

    public func isClosed(): Bool { return false }
    public func close(): Unit {}
}




public open class Class434 <: Interface181 & Interface179 & Resource {
    public init() { // block id: 436

    }
;
    static let var439 : Rune = 'x'
    public func isClosed(): Bool { return true }
    public func close(): Unit {}
}

public func func404(param405 : Array<Unit>) : Bool { // block id: 406
    (Option<Array<Bool>>.Some([var417, var417, false, true, var417, false, var417, var417, true, var417]) ?? [false, false, false, false, true, true, false, true, true, true])[9];
    let var445 : Rune = 'B';
    var var450 : Rune = 'c';
    var var491 : Bool = ((UInt32(68)&127..=UInt32(118)&127:(-116)|1) is Array<Interface174>);
    match (if (true) { (Class434.var439) } else { [var445, 'Y', 'P', var450, var445, 'f', 'k', var450, var457, var445][3] } ) {
        case _ => 
            var var465 : UInt32 = UInt32(UInt32(105));
            var465;
            16.0;
            UInt16(11)
        
        case _ => 
            var475 /= ((UInt16(224)) | 1);
            var475 >> ((UInt16(131)) & 7)
        
        case 'w' | 'Z' => 
            var475
        
        case _ => 
            ();
            var491 &&= var417;
            UInt16(232)
        
    };
    var var505 : Int32 = Int32(Int16(Int16(UInt8(72))));
    match (match {
            case (var500 is Range<UInt8>) => 
            var505--;
            ();
            var417
            case _ => 
            var417
        }) {
        case true => 
            false
        
        case caseVar520 : Float64 => 
            let var523 : Bool = true;
            var523
        
        case _ => 
            var529 += var529;
            Float32(37.0) > Float32(125.0)
        
    }
}


public func func705(param706 : Int16) : Bool { // block id: 707
    func404([(), (), (), (), (), (), (), (), (), ()])
}

public func func715(param716 : Rune) : Array<Rune> { // block id: 717
    func func721(param722 : Array<Bool>, namedParam723 ! : Range<Int32>) : UInt8 { // block id: 724
        var728[3];
        var760
    }
;
    var loopTimeVar772 : Int64 = 0;
    while (((func721([false, false, true, false, false, false, false, true, true, false], namedParam723 : (Int32(56)&127..Int32(40)&127:22|1)) is (Array<Rune>, String, Range<Int64>, Range<Int8>, UInt32))) && loopTimeVar772 < 100 ) {
        loopTimeVar772++;
        [(), (), (), (), (), (), (), (), (), ()][6]
    };
    var var823 : Unit = ();
    match (match {
            case match (var777) {
            case caseVar788 : Range<Int32> => 
                var var814 : Range<Int8> = (Int8(-99)&127..=Int8(125)&127:(-45)|1);
                if (true) { var728 } else { ([param716, param716, 'm', 'f', param716, 'M', param716, 'P', 'P', param716], var49, ((-100)&127..=var809&127:(55|1)), var814, UInt32(120)) } ;
                true
            
            case _ : UInt16 => 
                Option<Unit>.Some(var823);
                if (true) { Enum40.defaultValue } else { Enum40.defaultValue } ;
                var var832 : Int32 = Int32(UInt8(229));
                Int32(-14) > var832
            
            case caseVar837 : Range<UInt8> => 
                var var841 : UInt32 = UInt32(245);
                var841 += var841;
                var82
            
            case _ : Range<UInt32> => 
                true
            
            case _ => 
                ();
                var82
            
        } => 
            UInt16(88);
            var var873 : UInt64 = UInt64(UInt16(181));
            (var75, (var859&127..var859&127:(var809|1)), Int8(52), UInt64(132), (var75&127..=var75&127:(85|1)), (-122.0), var873, var877, var881)
            case _ => 
            let var912 : Float64 = (-95.0);
            (var75, var897, var907, UInt64(238), (Int16(-53)&127..Int16(110)&127:29|1), var912, UInt64(103), var877, [var56, (), var56, (), var56, (), (), (), var926, var929])
        }) {
        case (caseVar933,_,_ : Array<Rune>,_,_,_,caseVar934 : String,_,caseVar935 : Option<Interface177>) => 
            var938;
            var823
        
        case caseVar953 : Array<UInt16> => 
            ();
            var958 <<= ((UInt32(34)) & 7)
        
        case _ : Unit => 
            let var967 : Array<UInt16> = [UInt16(146), UInt16(9), UInt16(9), UInt16(127), UInt16(108), UInt16(39), UInt16(147), UInt16(108), UInt16(157), UInt16(106)];
            if (var82) { var967 } else { [UInt16(27), UInt16(201), UInt16(66), UInt16(220), UInt16(147), UInt16(187), UInt16(93), UInt16(18), UInt16(62), UInt16(186)] } ;
            var728;
            var973 **= (UInt64(172) & 3)
        
        case (caseVar979,_,_,_ : Float64,_,_ : Range<Int64>,_,_ : UInt32,_) => 
            ();
            ()
        
        case _ => 
            if (var82) { (UInt16(136)&127..=UInt16(75)&127:121|1) } else { (var990&127..=var990&127:(var994|1)) } ;
            var82 &&= false;
            ()
        
    };
    try { // block id: 1005
        [Class171(), var1011, var1011, Class171(), Class171(), Class171(), Class171(), var1011, Class171(), Class171()][2];
        let var1025 : (Array<Rune>, Unit, Array<Unit>) = (['j', '5', 'F', 'J', 'w', 'v', '5', '5', 'I', 'b'], (), [(), (), (), (), (), (), (), (), (), ()]);
        var1025[1];
        ['A', 'o', 'R', 'N', 'c', 'b', '0', 'D', 'f', '4']
    } finally { // block id: 1042
        var loopTimeVar1046 : Range<UInt64> = (UInt64(233)&127..UInt64(Int8(UInt8(UInt8(45))))&127:(65|1));
        for (i in loopTimeVar1046 where var82) {

        };
        [['2', 'u', 'p', '8', 'i', 's', 'B', '2', 'f', 'x'], ['T', 'a', 'X', '5', 'u', 'K', 'R', 'l', 'x', 'l'], ['1', 'B', 'W', 'M', 'T', 'X', 'n', 'N', 'e', 'x'], ['O', '3', 'M', 'u', 'a', 'M', 'Z', '8', 'J', '8'], ['R', 'X', 'F', 'a', 'm', 'z', 'F', 'H', 'Y', '6'], ['o', 'i', 'T', 'h', 'c', 'D', '6', 'I', 'C', 'j'], ['i', 'K', 's', 'R', 'P', 'r', 'T', 'P', 'g', 'o'], ['m', 'Q', 'c', 'z', 'P', 'u', 'T', 'J', '4', 'r'], ['h', 'e', '3', 'l', 'l', 'F', 't', 'g', 'P', 'N'], ['m', 'A', 'C', '9', 'g', 'N', '3', 'h', 'h', 'a']][5]
    }
}

func func1059(param1060 : Array<Unit>) : Array<Rune> { // block id: 1061
    let var1075 : Range<Int8> = (Int8(-25)&127..Int8(15)&127:(-4)|1);
    if (true || true) { // block id: 1067
        (['Z', 'u', 'A', 'J', 'S', 'e', 'G', 'X', 'i', '4'], ###"ttDI#aV<tp"###, var1072, var1075, UInt32(125))
    } else { // block id: 1078
        ();
        var728
    }[0]
}

public func func1089(param1090 : Rune) : Array<Unit> { // block id: 1091
    var881
}


public func func1284(param1285 : Range<Int16>) : Bool { // block id: 1286
    false
}

public func func1343() : Interface177 { // block id: 1348
    let var1350 : Interface177 = Class171();
    var1350
}

public func func1361(param1362 : Bool) : Range<Int16> { // block id: 1363
    (Int16(-6)&127..Int16(-47)&127:106|1)
}

public func func1343(param1344 : Int64) : Range<Int16> { // block id: 1345
    func1343();
    let var1355 : (Unit, Array<Bool>) = ((), [true, false, true, true, false, false, false, true, true, true]);
    var1355[0];
    var var1368 : (Int16, Range<UInt32>, Int8, UInt64, Range<Int16>, Float64, UInt64, Int32, Array<Unit>) = (Int16(50), (UInt32(194)&127..UInt32(83)&127:(103|1)), Int8(69), UInt64(Int64(Int8(UInt8(156)))), (Int16(60)&127..=Int16(37)&127:106|1), 72.0, UInt64(45), Int32(UInt32(Int32(Int16(-106)))), [(), (), (), (), (), (), (), (), (), ()]);
    var var1412 : Unit = ();
    match (var1368) {
        case caseVar1391 => 
            (UInt8(235)&127..=UInt8(13)&127:80|1);
            Option<Array<Bool>>.None;
            var417
        
        case _ => 
            var475++;
            true
        
        case caseVar1404 => 
            false || false
        
        case _ => 
            var1412;
            var417 || var417
        
    }|>func1361
}

public func func1761(namedParam1762 ! : Interface180, optionalParam1763 ! : Float64 = Float64(Float32(Float32(-118.0))), namedParam1767 ! : Interface176) : Int8 { // block id: 1768
    var1770
}


public func func1850(param1851 : Array<Bool>) : Float64 { // block id: 1852
    var loopTimeVar1891 : Int64 = 0;
    (if ((Class171() is Interface180)) { try { // block id: 1862
        var1864
    } finally { // block id: 1866
        var var1869 : Int16 = Int16(Int8(-89));
        [var1869, var1869, var1869, Int16(71), var1869, Int16(-62), var1869, Int16(9), var1869, Int16(-63)];
        Option<Unit>.None
    } } else { (Int16(-58) as Unit) }  ?? do {
        loopTimeVar1891++;
        'V';
        [UInt16(148), UInt16(88), UInt16(216), UInt16(58), UInt16(110), UInt16(219), UInt16(125), UInt16(40), UInt16(186), UInt16(112)]
    } while ((((UInt8(11)&127..UInt8(86)&127:(-41)|1) is Interface179)) && loopTimeVar1891 < 100 ) );
    (Option<Unit>.None ?? ());
    let var1896 : Float64 = (-33.0);
    var1896
}



func func2445(param2446 : (Array<Bool>) -> Float64) : Unit { // block id: 2449
    let var2460 : Int16 = Int16(UInt8(87));
    var loopTimeVar2474 : Range<UInt64> = (UInt64(3)&127..UInt64(151)&127:(Int64(Int8(-78))|1));
    for (i in loopTimeVar2474 where try { // block id: 2452
        UInt32(242) >= var1836
    } finally { // block id: 2456
        Int16(17) - var2460;
        let var2467 : Range<UInt16> = (UInt16(48)&127..UInt16(33)&127:(83|1));
        if (var1804) { (UInt16(192)&127..=UInt16(86)&127:32|1) } else { var2467 } ;
        false
    }) {

    }
}

public func func2483(param1851 : Array<Bool>) : Float64 { // block id: 1852
    var loopTimeVar1891 : Int64 = 0;
    (if ((Class171() is Interface180)) { try { // block id: 1862
        var1864
    } finally { // block id: 1866
        var var1869 : Int16 = Int16(Int8(-89));
        [var1869, var1869, var1869, Int16(71), var1869, Int16(-62), var1869, Int16(9), var1869, Int16(-63)];
        Option<Unit>.None
    } } else { (Int16(-58) as Unit) }  ?? do {
        loopTimeVar1891++;
        'V';
        [UInt16(148), UInt16(88), UInt16(216), UInt16(58), UInt16(110), UInt16(219), UInt16(125), UInt16(40), UInt16(186), UInt16(112)]
    } while ((((UInt8(11)&127..UInt8(86)&127:(-41)|1) is Interface179)) && loopTimeVar1891 < 100 ) );
    (Option<Unit>.None ?? ());
    let var1896 : Float64 = (-33.0);
    var1896
}

public func func2486(param2487 : Option<Option<Int32>>) : Float64 { // block id: 2488
    var var2490 : Float64 = 91.0;
    var2490
}

public func func2493(param2494 : Array<Bool>) : Option<Option<Int32>> { // block id: 2495
    Option<Option<Int32>>.Some((Option<Option<Int32>>.None ?? (var2501 ?? Option<Int32>.Some(Int32(112)))))
}


public func func2347(param2348 : Interface177) : Int64 { // block id: 2349
    var var2359 : ?Int32 = Option<Int32>.Some(Int32(62));
    var var2370 : Bool = true;
    var var2388 : Rune = 'I';
    var var2420 : Bool = (Int8(UInt8(42)) is Int32);
    func func2435<T0, T1>(param2436 : Class434) : Unit where T0 <: Option<Array<Bool>>, T1 <: String { // block id: 2437
        var2439;
        ();
        let var2481 : ((Array<Bool>) -> Float64) -> Unit = func2445;
        (func2493~>func2486)|>var2481
    }
;
    var var2608 : (Option<Unit>, Bool, UInt16) = ((Class171(namedParam1978 : Int16(UInt8(180)), namedParam1979 : (['9', 'Y', 'W', 'P', 'I', 'P', '1', 'G', 'u', 'L'], [(), (), (), (), (), (), (), (), (), ()], 52.0, true, [false, false, true, true, false, false, true, false, true, false], (UInt8(120)&127..UInt8(8)&127:31|1), (53&127..=(-8)&127:94|1), ()), namedParam1980 : func1361) as Unit), true, UInt16(UInt16(Int8(Int8(6)))));
    var loopTimeVar2683 : Int64 = 0;
    do {
        loopTimeVar2683++;
        func func2426(namedParam2427 ! : (Array<Unit>) -> Bool, namedParam2430 ! : (Option<Unit>, Bool, UInt16)) : Unit { // block id: 2431
            var var2544 : Class434 = Class434();
            var var2554 : UInt64 = UInt64(66);
            try { // block id: 2433
                func2435<Option<Array<Bool>>, String>(var2544);
                var417
            } catch (e: Exception) { // block id: 2547
                false
            } finally { // block id: 2549
                try { // block id: 2551
                    var2554 - UInt64(111);
                    var2314;
                    var552 | Int32(-18)
                } finally { // block id: 2561
                    ['E', var1631, var1634, var1613, var1637, 'w', 'E', var457, 'C', var1637];
                    let var2576 : Int64 = Int64(UInt8(132));
                    (-91) * var2576;
                    Int32(-107) & var552
                };
                (Option<Bool>.Some(false) ?? var417)
            };
            var loopTimeVar2603 : Int64 = 0;
            while ((try { // block id: 2592
                var529;
                "e#%+K-5Kp1";
                Float32(55.0) < Float32(-23.0)
            } finally { // block id: 2598
                !var417
            }) && loopTimeVar2603 < 100 ) {
                loopTimeVar2603++;

            }
        }
;
        var var2605 : (Array<Unit>) -> Bool = func404;
        func2426(namedParam2427 : var2605, namedParam2430 : var2608);
        var var2669 : UInt64 = UInt64(164);
        var var2679 : Bool = true;
        match (var2641) {
            case _ => 
                ();
                ()
            
            case _ => 
                var2314
            
            case caseVar2654 => 
                var1836 <<= ((UInt32(69)) & 7);
                break;
                var2420 ||= false
            
            case _ => 
                ((UInt16(245)&127..=UInt16(136)&127:(-30)|1), var1446, var2669, (Int8(-80)&127..Int8(-29)&127:(62|1)), var1458);
                var2420 ||= var2679;
                var2314
            
        }
    } while ((match ((Option<Option<Int32>>.Some(var2359) ?? Option<Int32>.Some(Int32(110)))) {
        case _ : (Int64, Array<Rune>, Int64, Interface183, Int64) => 
            var475++;
            var2370
        
        case caseVar2374 : (Int32, Array<Bool>, Int16, Array<Array<Rune>>) => 
            let var2404 : Rune = 'W';
            [var1658, var2379, ['h', 'U', 'g', '8', 'Q', 'D', 'A', 'y', 'y', 'z'], ['E', 'p', '5', 'p', '7', 'P', 'F', '4', 'x', 'v'], [var1631, var1631, '6', var2388, var2388, '0', '0', '6', 'J', 'g'], ['g', 'T', 'C', '7', var457, var1637, var2404, '5', var1613, 'U'], ['C', 'o', 'V', 'u', 'b', 'A', '2', 'd', 'X', 'c'], ['u', 'C', 'n', 'Z', 'c', 'C', 'S', 'u', 'V', 'Y'], ['l', 'Z', 'I', '1', 'I', 's', 'u', 'd', 'C', 'U'], ['y', 'w', '1', 'B', '3', '7', 'j', 'g', 'P', 'b']];
            Option<Unit>.None;
            Float32(0.0) != Float32(112.0)
        
        case _ => 
            var2420
        
    }) && loopTimeVar2683 < 100 ) ;
    let var2706 : (Unit, Array<Bool>) = ((), [false, true, true, true, false, true, true, false, true, true]);
    var var2717 : UInt64 = UInt64(121);
    match {
        case match (UInt32(252) % ((var1821) | 1)) {
        case caseVar2691 : (Int64, Array<Rune>, Int64, Interface183, Int64) => 
            var1770 *= Int8(-85);
            var1836++;
            var2420
        
        case 167 | 208 => 
            UInt32(194);
            if (var2370) { var2706 } else { var2706 } ;
            var417
        
        case _ : Interface181 => 
            var2717 == var2717
        
        case _ : UInt64 => 
            ();
            var2314;
            var2420 && true
        
        case _ => 
            Int16(-110) < var2734
        
    } => 
        118 << ((121) & 7)
        case _ => 
        Int64(var1836)
    }
}

func func2323(optionalParam2324 ! : (Unit, Array<Bool>) = ((), [false, true, true, false, true, false, (57 is (Int16) -> Bool), ((Int32(-100) is Interface182<Array<UInt16>, Range<UInt32>>) is (Option<Unit>) -> Rune), true, (Int64(Int16(-49)) is (Array<Rune>, Unit, Array<Unit>))])) : Option<Unit> { // block id: 2343
    var var2744 : (Interface177) -> Int64 = func2347;
    (((Class171()|>var2744) as Unit) ?? ());
    var2749
}

public func func2302(param2303 : Range<UInt32>) : Unit { // block id: 2304
    ((var1864, true, var475)[0] ?? var2314);
    var529;
    var var2758 : Int8 = Int8(-53);
    var loopTimeVar2775 : Int64 = 0;
    (func2323() ?? while ((if (true) { // block id: 2754
        (Int8(33)&127..var2758&127:(var2761|1));
        true
    } else if (var1804) { // block id: 2766
        var2314;
        !var1804
    } else { // block id: 2770
        !var417
    }) && loopTimeVar2775 < 100 ) {
        loopTimeVar2775++;

    })
}

func func1912(optionalParam1913 ! : (Unit, Array<Bool>) = ((), [false, (((UInt16(83)&127..=UInt16(183)&127:82|1), Class171(), UInt64(228), (Int8(11)&127..=Int8(96)&127:(107|1)), [['O', 'k', '7', 'a', '1', 'W', 'c', 'Q', 'B', 'e'], ['p', '9', 'T', 'I', '3', 'T', 'U', 'z', 'a', '7'], ['q', 'K', 'U', 'U', '6', 'g', 'J', 'F', 'G', 'p'], ['h', '6', 'P', 'N', 'O', 'A', 'L', '6', 'C', 'v'], ['j', 'X', 'P', 'L', 'K', '0', 'W', 'p', 'E', 'O'], ['e', 'w', 'z', 'Z', 'M', 'x', 'g', 's', 'P', 'F'], ['2', 'h', 's', 'X', 't', 'U', 'i', 'n', 'j', '8'], ['H', 'x', 'G', 'y', 'Z', 'L', 'R', '4', 'u', 'j'], ['6', 'v', 'Q', 't', '7', 'G', '3', 'L', 'h', 'b'], ['G', 'I', 'K', 'L', 'A', '4', 'i', 'l', 'd', '6']]) is UInt8), true, (UInt64(Int16(-64)) is (Array<Rune>, Unit, Array<Unit>)), true, false, true, (Class171(namedParam1978 : Int16(-116), namedParam1979 : (['H', 'Q', 'N', 'q', 'r', '0', 'f', 'T', '0', 'J'], [(), (), (), (), (), (), (), (), (), ()], 28.0, true, [false, false, true, false, true, true, false, false, true, false], (UInt8(1)&127..UInt8(219)&127:(37|1)), (93&127..71&127:(61|1)), ()), namedParam1980 : func1361) is (Int16, Range<UInt32>, Int8, UInt64, Range<Int16>, Float64, UInt64, Int32, Array<Unit>)), (Class434() is (Int64, Array<Rune>, Int64, Interface183, Int64)), true]), namedParam2224 ! : Array<Unit>, namedParam2225 ! : Class434, optionalParam2226 ! : Interface180 = Class171(namedParam1978 : Int16(-114), namedParam1979 : (['s', 'r', 'i', 'W', 'X', 'S', '5', '3', 'J', 't'], [(), (), (), (), (), (), (), (), (), ()], 98.0, (((['b', '0', 'a', '9', 'c', 'i', '0', 'E', 'B', 'j'], [(), (), (), (), (), (), (), (), (), ()], 98.0, true, [true, false, false, false, false, false, false, true, true, false], (UInt8(170)&127..=UInt8(46)&127:53|1), (64&127..(-36)&127:(-54)|1), ()) as Array<Bool>) is (Int64, Array<Rune>, Int64, Interface183, Int64)), [false, true, true, false, true, true, true, false, false, false], (UInt8(Int8(-12))&127..=UInt8(UInt8(135))&127:((-127)|1)), (Int64(Int32(-1))&127..117&127:((-58)|1)), ()), namedParam1980 : func1361)) : (Array<Rune>, Array<Unit>, Float64, Bool, Array<Bool>, Range<UInt8>, Range<Int64>, Unit) { // block id: 2298
    try (resource = Class434()) { // block id: 2300
        (UInt32(0)&127..UInt32(143)&127:28|1)|>func2302;
        var1770 = var1770
    } catch (_) { // block id: 2781
        var loopTimeVar2785 : Range<UInt64> = (UInt64(209)&127..=UInt64(Int32(94))&127:((-58)|1));
        for (i in loopTimeVar2785 where var1804) {

        };
        if (false) { // block id: 2793

        };
        ()
    };
    let var2815 : (Option<Unit>, Bool, UInt16) = (Option<Unit>.None, true, UInt16(147));
    let var2838 : Float64 = (-118.0);
    let var3050 : Range<Int64> = ((-80)&127..Int64(Int16(Int16(Int16(-89))))&127:((-72)|1));
    let var3105 : Float64 = (-88.0);
    if (try { // block id: 2797
        var2314;
        var1804 &&= var417;
        var1804
    } finally { // block id: 2803
        var1804
    }) { // block id: 2805
        let var2885 : (Array<Rune>, Array<Unit>, Float64, Bool, Array<Bool>, Range<UInt8>, Range<Int64>, Unit) = (['M', 'y', 'J', 'J', 'T', '3', '4', 'J', 'B', '0'], [(), (), (), (), (), (), (), (), (), ()], (-22.0), true, [true, ((['2', 'S', 'x', 'N', 'n', 'q', '5', 'q', 'i', 'n'], [(), (), (), (), (), (), (), (), (), ()], 45.0, false, [true, false, false, true, true, true, true, true, false, true], (UInt8(184)&127..UInt8(51)&127:4|1), ((-2)&127..=(-2)&127:(-25)|1), ()) is (Int32, Array<Bool>, Int16, Array<Array<Rune>>)), ((Int32(-86), [false, true, false, true, false, true, true, true, false, false], Int16(-119), [['5', 'n', 'X', 'U', 'C', '8', 'I', 'A', 'I', 'O'], ['0', '2', 'q', '7', '5', 'e', 'q', 'B', 't', 'I'], ['z', 'O', 'j', 'a', 'J', 'x', 'K', 'I', 'I', 'Q'], ['u', 'p', 'V', 'd', 'W', 'R', 'x', '8', 'x', 'd'], ['k', 'B', 'G', '8', 'x', '8', '7', 'F', 'I', 'D'], ['f', 'J', 'c', 'V', 'q', 'w', '7', 'C', 'k', 'H'], ['i', 'V', 'l', '3', 'V', 'R', 'y', 'Y', 'm', 'l'], ['w', 'n', 'N', 'S', 't', 'q', 'S', 's', 'E', 'd'], ['S', 'N', '5', 'k', 's', 'o', 'z', 'o', '8', 'f'], ['e', 'O', 'h', 'M', '9', 'b', '8', 'Q', 'e', 'K']]) is (Bool) -> Range<Int16>), false, ([(), (), (), (), (), (), (), (), (), ()] is Interface182<Array<UInt16>, Range<UInt32>>), ((['R', 'E', '6', '7', '6', 'P', 'p', 'b', 'R', 's'], ###"WyqNh<&4G7"###, ((-25)&127..100&127:(-44)|1), (Int8(114)&127..=Int8(-66)&127:20|1), UInt32(181)) is Interface181), false, (UInt8(UInt8(198)) is Range<UInt64>), (((UInt16(126)&127..=UInt16(158)&127:((-7)|1)), Class434(), UInt64(74), (Int8(63)&127..Int8(-83)&127:104|1), [['5', '7', 'a', 'V', 'O', '9', '8', 'o', 'B', 'B'], ['A', 'm', 's', '7', 'u', 'J', 'b', 'j', 'u', 'x'], ['H', 'j', 'v', 'H', '2', 'B', 'B', 'I', 't', 'f'], ['F', 'A', 'B', 'g', 'r', 'C', 'm', 'x', '5', 'r'], ['y', 'i', 'T', 'H', 'f', 'g', 'U', '5', 'k', 'U'], ['5', 'h', 'l', 'x', 'i', 'G', 't', 'r', 'Y', 'T'], ['N', 'B', 'E', '0', 'V', 'j', 'a', '9', 'N', 'e'], ['z', 'L', 'q', '6', 'n', '4', 'B', 'r', '6', 'Z'], ['W', 'M', '6', 'J', 'H', '8', '7', 'U', '7', 'F'], ['D', 'U', 'c', 'n', '7', 'R', 'P', 'T', 'Y', 'S']]) is (Array<Rune>, Unit, Array<Unit>)), (Int16(Int16(58)) is (Int16) -> Bool)], (UInt8(Int8(UInt8(229)))&127..UInt8(2)&127:(Int64(Int64(Int8(117)))|1)), (Int64(Int8(-1))&127..=17&127:((-16)|1)), ());
        let var3021 : Array<Bool> = [false, true, false, false, false, true, true, true, true, false];
        match (UInt64(167)) {
            case 99 | 152 | 31 | 157 => 
                ();
                if (true) { var2815 } else { (var1864, false, UInt16(76)) } ;
                (['m', 'B', 'v', 'A', 'O', 'x', 'O', 'Y', 'C', 'c'], [var2314, var2314, var2314, (), var2314, (), var2314, var2314, var2314, var2314], var2838, true, [false, var1804, false, var417, false, var417, true, var417, var1804, var417], (UInt8(211)&127..=UInt8(47)&127:(-39)|1), ((-90)&127..=106&127:72|1), var2314)
            
            case 25 => 
                let var2871 : Bool = true;
                if (false) { (['e', 'B', 'a', 'S', 'I', '6', 'r', 'o', 'i', 'Z'], [(), (), (), (), (), (), (), (), (), ()], (-99.0), var417, [true, true, var417, true, var2871, var1804, true, true, var1804, var2871], (UInt8(11)&127..var529&127:(var2761|1)), (30&127..(-85)&127:7|1), ()) } else { var2885 } 
            
            case _ => 
                Class171();
                (['D', 'p', 'W', '3', 'K', 'C', '7', '9', 'X', 'Z'], [(), (), var2314, var2314, var2314, (), (), (), var2314, var3016], 109.0, var417, var3021, (UInt8(7)&127..=var529&127:(var2761|1)), ((-122)&127..89&127:(-125)|1), ())
            
        };
        (['V', var457, var1634, var1631, '5', 'U', var457, 'V', '7', 't'], namedParam2224, (-103.0), var1804, [false, false, true, false, false, true, true, false, false, false], (UInt8(155)&127..var529&127:((-111)|1)), var3050, var3016)
    } else { // block id: 3059
        var var3097 : Unit = ();
        var var3101 : Array<Rune> = ['1', 'e', 'o', '6', 'L', 'C', '2', 'i', 'h', 'e'];
        var var3109 : Array<Bool> = [(UInt32(128) is Array<Bool>), (Class171() is Int8), (Class434() is Option<Unit>), ("rb#K!^<l`D" is Array<Int16>), true, false, true, false, ((46&127..=87&127:(-43)|1) is Option<Option<Int32>>), ([Int16(38), Int16(-65), Int16(Int8(116)), Int16(-20), Int16(-75), Int16(2), Int16(90), Int16(-59), Int16(Int16(-34)), Int16(Int16(42))] is (Range<UInt16>, Range<UInt16>, Float64, Range<Int64>))];
        if (true) { ([var1613, 'Z', 'H', '0', var1634, 'O', var1634, var1631, var457, var1634], [(), (), (), (), (), (), (), (), (), ()], (-100.0), var417, [false, true, false, true, true, var1804, true, false, var417, var417], (var529&127..=UInt8(57)&127:(var2761|1)), (122&127..87&127:(34|1)), var3097) } else { (var3101, namedParam2224, var3105, true, var3109, (var529&127..=var529&127:(var2761|1)), var3050, var3016) } 
    }
}

public func func1905(param1906 : Array<Bool>) : Array<Bool> { // block id: 1907
    let var3147 : (Unit, Array<Bool>) = ((), [(([Int16(16), Int16(64), Int16(-29), Int16(-113), Int16(61), Int16(26), Int16(43), Int16(40), Int16(-81), Int16(50)] as Bool) is Unit), (((Int32(76)&127..=Int32(5)&127:(-72)|1) as Int32) is Range<Int16>), ((Option<Unit>.Some(()), true, UInt16(208)) is Range<Int32>), (((UInt16(7)&127..=UInt16(70)&127:((-109)|1)), (UInt16(136)&127..=UInt16(51)&127:((-53)|1)), 124.0, ((-39)&127..(-125)&127:(-13)|1)) is Array<Unit>), (Class171(namedParam1978 : Int16(-100), namedParam1979 : (['b', 'U', 'l', 'G', 'b', 'z', 'J', 'o', 'Z', 'n'], [(), (), (), (), (), (), (), (), (), ()], (-21.0), false, [true, true, true, false, false, false, true, false, true, true], (UInt8(136)&127..=UInt8(249)&127:46|1), (68&127..125&127:84|1), ()), namedParam1980 : func1361) is (Interface180, Float64, Interface176) -> Int8), ((UInt64(116)&127..UInt64(71)&127:(-124)|1) is Option<Unit>), ((['J', '5', 'n', 'v', 'K', 'w', 'A', 'a', 'o', 'L'], (), [(), (), (), (), (), (), (), (), (), ()]) is Interface175), false, true, (UInt16(44) is () -> Interface177)]);
    var var3252 : Int64 = (-25);
    let var3255 : Range<Int64> = ((-24)&127..19&127:126|1);
    let var3259 : (Bool) -> Range<Int16> = func1361;
    var var3291 : Int32 = Int32(13);
    var loopTimeVar3298 : Int64 = 0;
    while ((func1912(optionalParam1913 : var3147, namedParam2224 : [(), (), (), (), (), (), (), (), (), ()], namedParam2225 : var2641, optionalParam2226 : Class434())[3]) && loopTimeVar3298 < 100 ) {
        loopTimeVar3298++;
        let var3246 : UInt8 = UInt8(Int8(UInt8(Int8(-74))));
        match (Class171(namedParam1978 : Int16(-17), namedParam1979 : (var1658, [(), (), (), (), (), (), (), (), (), ()], 64.0, false, [false, true, true, false, false, false, true, false, true, false], (var529&127..var3246&127:(var3252|1)), var3255, ()), namedParam1980 : var3259)) {
            case caseVar3263 => 
                Option<Bool>.Some(var1804);
                Option<Unit>.None
            
            case caseVar3270 : Int32 => 
                var3016;
                var500;
                if (var1804) { var2749 } else { var2749 } 
            
            case caseVar3280 : Option<Int32> => 
                Option<Unit>.Some(())
            
            case _ => 
                var1770 = Int8(15);
                var3291 >>= ((var552) & 7);
                var3295
            
        }
    };
    param1906
}

public func func1843(param1844 : Interface180, namedParam1845 ! : (Range<Int16>) -> Bool) : Float64 { // block id: 1848
    if ((var1902 is (Array<Unit>) -> Bool)) { (var3302|>func1905) } else { var3302 } |>func1850
}

func func1816(param1817 : Int64) : Float64 { // block id: 1818
    let var1830 : Int16 = Int16(57);
    var1821 * UInt32(if (false) { // block id: 1827
        var56;
        var1830
    } else if (true) { // block id: 1833
        var1836 *= var1821;
        Int16(-106)
    } else { // block id: 1840
        var1830
    });
    var var3327 : Int32 = Int32(-109);
    let var3337 : Rune = '6';
    let var3370 : Float64 = Float64(Float32(Float32(-35.0)));
    let var3391 : (Bool) -> Range<Int16> = func1361;
    func1843(try { // block id: 3306
        (['9', 'c', var457, var1613, 'p', 's', 'c', var1637, var1631, 'i'], var3320, var1072, (Int8(3)&127..Int8(32)&127:(-84)|1), UInt32(110));
        var3327 /= ((Int32(-110)) | 1);
        var1446
    } catch (_) { // block id: 3331
        let var3359 : (Bool) -> Range<Int16> = func1361;
        Class171(namedParam1978 : Int16(-94), namedParam1979 : ([var3337, var1604, 'f', 'S', 'y', 'J', 'l', 'B', '2', 'Y'], var881, 29.0, var417, [false, false, false, false, true, false, true, true, false, true], (var1186&127..var529&127:((-123)|1)), (39&127..(-58)&127:109|1), ()), namedParam1980 : var3359)
    } finally { // block id: 3361
        let var3377 : Range<UInt8> = (UInt8(Int8(Int8(Int8(22))))&127..UInt8(244)&127:(36|1));
        if (var82) { Class171(namedParam1978 : var2734, namedParam1979 : (['B', 'n', '2', 'b', '2', 'a', '7', 'd', 'y', 'S'], [(), (), (), (), (), (), (), (), (), ()], var3370, false, [true, true, false, true, true, false, true, false, true, false], var3377, (var994&127..=39&127:(var809|1)), ()), namedParam1980 : var3391) } else { var1446 } 
    }, namedParam1845 : func1284)
}

public func func1593(param1594 : String) : Int8 { // block id: 1595
    var56;
    let var1712 : Array<Interface175> = [Class171(), Class171(), Class171(), Class171(), Class171(), Class171(), Class171(), Class171(), Class171(), Class171()];
    var loopTimeVar1759 : Int64 = 0;
    while ((if (([['V', var1604, '1', 'z', 'Y', var457, var457, 'F', var1613, var1604], [var1604, 'F', var1604, 'k', 't', '5', 'u', var457, var1613, 'C'], [var1613, 't', var1631, var1634, var1637, var1634, 'T', 'N', '8', 'l'], ['w', 'r', 'N', 't', 'i', '8', 'P', 'o', 'w', 't'], ['z', 'o', 'A', 'J', 'I', 'l', 'u', 'W', '8', '5'], ['C', var1637, var1631, var1634, var457, 'O', var1613, 'B', '7', var1634], var1658, ['P', 'T', var1604, var1613, var1631, 'L', 'g', '7', var457, 'A'], ['k', 'e', 'M', 'o', '9', 'f', 'T', '3', 'I', 'S'], ['K', 'Y', 'h', '4', 'U', 'z', 'P', 'j', 's', 'l']] is Range<Int8>)) { // block id: 1673
        if (false) { Option<Interface177>.None } else { Option<Interface177>.None } ;
        var990 /= ((UInt16(30)) | 1);
        false && var417
    } else { // block id: 1684
        false
    }) && loopTimeVar1759 < 100 ) {
        loopTimeVar1759++;
        match (Class434()) {
            case _ => 
                ();
                [Class171(), var1696, Class171(), var1696, Class171(), Class171(), Class171(), Class171(), var1696, Class171()]
            
            case _ : Interface179 => 
                if (false) { var1712 } else { [Class171(), var1696, var1696, Class171(), var1696, var1696, var1696, var1696, Class171(), Class171()] } 
            
            case _ => 
                Class171();
                var var1740 : Unit = ();
                var1740;
                var1712
            
        };
        let var1746 : Interface177 = Class171();
        try (resource = Class434()) { // block id: 1744
            var1746;
            ()
        } finally { // block id: 1749
            if (true) { (var475&127..var990&127:((-82)|1)) } else { (UInt16(4)&127..=UInt16(64)&127:71|1) } ;
            var56
        }
    };
    var var3396 : (Int64) -> Float64 = func1816;
    func1761(namedParam1762 : match (var1776[3]) {
        case caseVar1790 => 
            ();
            if (var82) { Class434() } else { var1446 } 
        
        case _ : Range<UInt16> => 
            ();
            var56;
            if (var1804) { Class171() } else { var1446 } 
        
        case _ : Array<Rune> => 
            var1446
        
        case _ => 
            Class171()
        
    }, optionalParam1763 : (var809|>var3396), namedParam1767 : Class171())
}

public func func1542(param1543 : (Array<Rune>, Unit, Array<Unit>)) : Interface180 { // block id: 1544
    let var1552 : Int8 = Int8(-72);
    let var3460 : Range<UInt16> = (UInt16(13)&127..UInt16(Int16(-99))&127:((-56)|1));
    match (Class171()) {
        case caseVar1549 : Rune => 
            var1552;
            if (var417) { Class171() } else { Class171(Enum40.defaultValue, optionalParam1560 : ((UInt16(216)&127..=UInt16(180)&127:13|1), var3460, (-82.0), (59&127..=(-119)&127:99|1))) } ;
            let var3470 : Enum40 = Enum40.defaultValue;
            Class171(var3470)
        
        case caseVar3474 : Interface177 => 
            ();
            var3016;
            var1446
        
        case _ => 
            Option<Option<Int32>>.None;
            Class434()
        
    }
}


public func func1324(param1325 : Range<Int32>) : Range<Int16> { // block id: 1326
    func func1328(optionalParam1329 ! : Interface180 = Class171(), optionalParam1331 ! : Interface183 = Class171(), optionalParam1333 ! : Range<Int16> = (Int16(-77)&127..=Int16(UInt8(Int8(-88)))&127:(Int64(Int32(52))|1))) : Range<Int16> { // block id: 1341
        (-36)|>func1343
    }
;
    var var1424 : Bool = (Int64(Int32(UInt8(Int8(-88)))) is Range<Int16>);
    var var1443 : Int64 = (-126);
    let var1452 : Int8 = Int8(UInt8(Int8(-113)));
    var var3494 : Option<Interface183> = Option<Interface183>.Some(Class171());
    func1328(optionalParam1329 : if (if (true) { // block id: 1422
        var1424
    } else { // block id: 1430
        ();
        var1424 &&= false;
        var417
    }) { ((UInt16(223)&127..UInt16(14)&127:(var1443|1)), var1446, UInt64(10), (Int8(27)&127..=var1452&127:(var1443|1)), var1458)[1] } else { ((var2379, var2314, [(), (), (), (), (), (), (), (), (), ()])|>func1542) } , optionalParam1331 : (var3494 ?? match (Class171(namedParam1978 : Int16(-51), namedParam1979 : var3501, namedParam1980 : func1361)) {
        case _ => 
            let var3549 : Enum40 = Enum40.defaultValue;
            if (var417) { Class171(var3549, optionalParam1560 : var579) } else { Class171(Enum40.defaultValue, optionalParam1560 : var560) } 
        
    }), optionalParam1333 : (Int16(-86)&127..Int16(-125)&127:14|1))
}


public func func1320(param1321 : Range<UInt64>) : Range<Int16> { // block id: 1322
    var var3557 : (Range<Int32>) -> Range<Int16> = func1324;
    let var3570 : Int32 = Int32(UInt8(Int8(2)));
    (Option<Range<Int32>>.None ?? try { // block id: 3566
        (var552&127..var3570&127:(var2761|1))
    } finally { // block id: 3575
        var312;
        var990 |= var990;
        (var3570&127..var552&127:(var994|1))
    })|>var3557
}

func func711(param712 : Array<Interface174>) : Bool { // block id: 713
    let var1083 : (Array<Unit>) -> Array<Rune> = { lambdaParameter1086 : Array<Unit> => ['8', 'V', 'L', 'e', 'Y', 'P', 'b', 'z', 'd', 'k'] };
    let var1179 : ?Array<Int16> = (Class171() as Array<Int16>);
    let var1212 : Class171 = Class171();
    func func1168(namedParam1169 ! : Option<Unit>) : Rune { // block id: 1170
        try { // block id: 1172
            var56;
            try { // block id: 1175
                if (false) { var1179 } else { var1179 } 
            } catch (e: Exception) { // block id: 1183
                var1186 &= UInt8(13);
                if (true) { var897 } else { (UInt32(192)&127..UInt32(84)&127:(-68)|1) } ;
                Option<Array<Int16>>.Some(var1107)
            } finally { // block id: 1197
                var1179
            }
        } catch (e: Exception) { // block id: 1199
            match (var881) {
                case _ : String => 
                    var973 += var973;
                    if (var82) { Class171() } else { var1212 } ;
                    let var1215 : ?Array<Int16> = ([UInt16(UInt16(97)), UInt16(56), UInt16(251), UInt16(UInt8(253)), UInt16(Int8(Int8(43))), UInt16(UInt8(Int8(-5))), UInt16(UInt8(13)), UInt16(246), UInt16(Int16(Int8(-20))), UInt16(159)] as Array<Int16>);
                    var1215
                
                case _ => 
                    if (var82) { (var990&127..=UInt16(65)&127:(var994|1)) } else { var777 } ;
                    ();
                    if (false) { Option<Array<Int16>>.None } else { Option<Array<Int16>>.Some([Int16(-120), Int16(-105), Int16(-120), Int16(-66), Int16(-94), Int16(94), Int16(122), Int16(-76), Int16(34), Int16(103)]) } 
                
            }
        } finally { // block id: 1252
            var var1261 : Rune = 'V';
            match (var379) {
                case _ => 
                    if (var82) { 'J' } else { var1261 } 
                
            };
            var1179
        };
        '1'
    }
;
    func1168(namedParam1169 : try { // block id: 1266
        if (true) { Class171() } else { Class171() } ;
        var56;
        Option<Unit>.Some(())
    } finally { // block id: 1274
        if (var82) { ['x', 'U', 'V', 'O', 'U', '4', 'v', 'H', 'b', 'G'] } else { ['E', 'M', 'X', '2', 'v', '3', 'J', 'D', 'p', 'J'] } ;
        if (true) { Option<Unit>.None } else { var379 } 
    })|>({ lambdaParameter1095 : Rune => match ((Option<Array<Int16>>.None ?? var1107)[3]) {
        case caseVar1135 => 
            var907 ^= Int8(113);
            [(), (), (), (), (), (), (), (), (), ()]
        
        case -11 => 
            if (false) { [(), (), (), (), (), (), (), (), (), ()] } else { var881 } 
        
        case _ => 
            ();
            let var1152 : Unit = ();
            var1152;
            var var1164 : Unit = ();
            [var56, (), var926, (), (), (), (), (), var1164, ()]
        
    } }~>var1083);
    let var1289 : (Range<Int16>) -> Bool = { lambdaParameter1292 : Range<Int16> => ((['y', 'h', 'r', 'G', '2', '5', 's', 'E', 'a', 'D'], (), [(), (), (), (), (), (), (), (), (), ()]) is Interface181) };
    let var3585 : (Range<UInt64>) -> Range<Int16> = func1320;
    (match (param712) {
        case caseVar3591 => 
            var56;
            (UInt64(106)&127..=var973&127:(var809|1))
        
        case _ : Range<UInt32> => 
            ();
            if (false) { ((var990&127..UInt16(202)&127:(var3609|1)), (UInt16(46)&127..var990&127:(31|1)), var3619, ((-30)&127..95&127:(94|1))) } else { ((var990&127..var990&127:(67|1)), var777, var3619, ((-45)&127..(-90)&127:(94|1))) } ;
            var3641
        
        case _ => 
            if (var82) { (var973&127..=var973&127:((-112)|1)) } else { var3641 } 
        
    }|>var3585)|>var1289
}

public func func3657(param3658 : Int16) : Array<Interface174> { // block id: 3659
    var2000;
    var var3766 : Int8 = Int8(Int8(UInt8(3)));
    if (try { // block id: 3663
        var var3666 : Int8 = Int8(UInt8(44));
        var3666 ^= var907;
        (Int8(6)&127..=Int8(80)&127:(var809|1));
        true
    } catch (_) { // block id: 3675
        var82
    }) { match (match (var3680) {
            case _ => 
                var907 = Int8(50);
                var56;
                var var3701 : Range<UInt32> = (UInt32(204)&127..=UInt32(112)&127:(Int64(UInt32(103))|1));
                if (false) { var3701 } else { (UInt32(214)&127..UInt32(12)&127:(-113)|1) } 
            
            case _ => 
                var3712;
                var3736;
                (UInt32(160)&127..=UInt32(220)&127:30|1)
            
            case _ : String => 
                if (var82) { var777 } else { var777 } ;
                ();
                var897
            
            case _ => 
                var49;
                var3766++;
                (UInt32(126)&127..=UInt32(245)&127:(-122)|1)
            
        }) {
        case caseVar3773 : Int32 => 
            var990;
            var938
        
        case _ => 
            var938
        
        case caseVar3783 => 
            (Float32(20.0), (UInt64(253)&127..UInt64(211)&127:9|1), [UInt16(180), UInt16(133), UInt16(128), UInt16(106), UInt16(204), UInt16(55), UInt16(90), UInt16(127), UInt16(105), UInt16(206)], Enum40.enumValue3790);
            var2000;
            var938
        
        case _ : Array<Array<Rune>> => 
            var958 /= ((UInt32(105)) | 1);
            if (var82) { var938 } else { var938 } 
        
        case _ => 
            if (true) { var938 } else { [var312, Class171(), Class171(), var312, var3814, Class171(), var3814, var312, Class171(), Class171()] } 
        
    } } else { var938 } 
}


public func func326<T0>(optionalParam327 ! : Interface179 = Class171(), namedParam329 ! : Interface175, optionalParam330 ! : Float32 = Float32(Float32(80.0)), namedParam333 ! : Interface176) : Unit where T0 <: String { // block id: 334
    var var358 : ?Interface177 = ([Class171(), Class171(), Class171(), Class171(), Class171(), Class171(namedParam368 : (Int8(79)&127..Int8(65)&127:(82|1)), namedParam369 : Int32(84), namedParam370 : ((-88)&127..(-117)&127:(46|1)), namedParam371 : UInt32(Int32(100))), Class171(), Class171(), Class171(namedParam368 : (Int8(-54)&127..Int8(81)&127:(-107)|1), namedParam369 : Int32(107), namedParam370 : (15&127..(-50)&127:(-86)|1), namedParam371 : UInt32(28)), Class171(namedParam368 : (Int8(-50)&127..Int8(102)&127:(104|1)), namedParam369 : Int32(UInt8(155)), namedParam370 : (45&127..=89&127:5|1), namedParam371 : UInt32(UInt32(254)))] as Interface177);
    let var3914 : Enum40 = Enum40.enumValue3790;
    let var3923 : Interface177 = Class171();
    (try { // block id: 341
        ();
        if (var82) { [(), (), (), var56, (), var56, var56, (), (), ()] } else { [(), (), (), (), (), (), (), (), (), ()] } ;
        var358
    } finally { // block id: 3899
        let var3902 : Interface177 = Class171();
        Option<Interface177>.Some(var3902)
    } ?? (if (var82) { Option<Interface177>.Some(Class171(var3914)) } else { Option<Interface177>.None }  ?? try { // block id: 3918
        Class171(Enum40.enumValue3790)
    } catch (e: Exception) { // block id: 3921
        var3923
    } finally { // block id: 3925
        var3923
    }));
    var2314
}






func func36(param37 : Bool) : Bool { // block id: 38
    let var43 : Enum40 = Enum40.defaultValue;
    match (var43) {
        case _ : Rune => 
            var49
        
        case defaultValue => 
            UInt32(232);
            var56;
            var49
        
        case _ => 
            ();
            var49
        
    };
    let var100 : UInt16 = UInt16(UInt16(Int8(UInt8(Int8(-73)))));
    let var143 : Array<UInt16> = Array<UInt16>(10){ i => UInt16(UInt16(Int8(Int8(-118)))) };
    let var215 : Class171 = Class171();
    let var234 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    func func185(namedParam186 ! : Interface174, optionalParam187 ! : Range<Int8> = (Int8(Int8(UInt8(UInt8(177))))&127..Int8(UInt8(Int8(96)))&127:(21|1))) : Class171 { // block id: 197
        let var252 : Float64 = 104.0;
        match (match (var203[3]) {
                case caseVar212 => 
                    var215;
                    [var56, (), (), (), var56, var56, (), var56, (), var56]
                
                case _ => 
                    UInt64(132) * UInt64(139);
                    var234
                
            }) {
            case _ => 
                75.0 ** Float64(Int32(var252) & 3);
                if (true) { Class171() } else { var215 } 
            
            case caseVar260 => 
                Class171()
            
            case _ : Range<Int8> => 
                var var268 : UInt8 = UInt8(Int8(UInt8(UInt8(98))));
                var268 *= var268;
                var100 ^ UInt16(153);
                if (param37) { Class171(namedParam281 : optionalParam187, namedParam282 : ((-84)&127..(-45)&127:((-15)|1))) } else { var215 } 
            
            case _ => 
                Class171();
                Class171()
            
        }
    }
;
    let var4611 : Interface174 = Class171(namedParam281 : (Int8(-83)&127..=Int8(85)&127:((-8)|1)), namedParam282 : (Int64(Int64((-13)))&127..Int64(Int8(-25))&127:((-80)|1)));
    let var4635 : (Option<Option<Int32>>) -> Float64 = func2486;
    func func64(optionalParam65 ! : UInt32 = UInt32(UInt8(Int8(Int8(52))))) : Bool { // block id: 70
        if (match (var75) {
            case -100 | 99 | 89 | -118 => 
                var82 &&= true;
                var82 ||= param37;
                UInt16(157)
            
            case -89 | 70 => 
                var var94 : Int32 = Int32(-113);
                var94 |= Int32(91);
                var56;
                var100 * UInt16(90)
            
            case _ : UInt16 => 
                var100 * var100;
                var56;
                var100
            
            case _ => 
                Int8(118);
                ();
                -UInt16(170)
            
            case _ => 
                var var126 : Int32 = Int32(Int8(Int8(36)));
                var126 -= Int32(20);
                var100
            
        } <= var143[8]) { // block id: 164
            [(), (), (), (), (), (), (), (), (), ()][8]
        };
        var56;
        func185(namedParam186 : var4611).func4625(var4635, func1905)
    }
;
    func64(optionalParam65 : UInt32(match {
        case false => 
        ();
        var49;
        var100 ** (var100 & 3)
        case _ => 
        var777;
        var990
    }))
}

main(): Int64 {
    try {
        let var10 : UInt16 = UInt16(Int16(76));
        let var20 : Bool = true;
        var var4655 : Bool = ((UInt32(32)&127..=UInt32(80)&127:(Int64(Int16(Int16(121)))|1)) is Array<Array<Rune>>);
        if (match (var10) {
            case 159 | 143 | 27 => 
                Int16(61) >> ((Int16(-86)) & 7);
                var20
            
            case _ => 
                -77;
                var20 || true
            
        }) { // block id: 29
            var32 ** (var32 & 3)
        } else if ((var20|>func36)) { // block id: 4652
            var4655 ||= var82;
            var3609 % ((var994) | 1)
        } else { // block id: 4667
            (-42) - 24
        }
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var10*var10), 64)
        crccheck.updateBuffer(UInt64(var32*var32), 64)
        crccheck.updateBuffer(UInt64(var75*var75), 64)
        crccheck.updateBuffer(UInt64(var760*var760), 64)
        crccheck.updateBuffer(UInt64(var859*var859), 64)
        crccheck.updateBuffer(UInt64(var877*var877), 64)
        crccheck.updateBuffer(UInt64(var907*var907), 64)
        crccheck.updateBuffer(UInt64(var958*var958), 64)
        crccheck.updateBuffer(UInt64(var4449*var4449), 64)
        crccheck.updateBuffer(UInt64(var4505*var4505), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Class434 {

}

extend Enum40 {

}

extend Class171 {

}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_trailing_closure_only_follow_name
// ASSERT: scan parse_expected_expr_or_decl_in
// ASSERT: scan parse_expected_catch_or_finally_in_try
// ASSERT: scan parse_expected_case
// ASSERT: scan parse_unexpected_declaration_in_scope
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_expected_left_brace
// ASSERT: scan parse_expected_character


