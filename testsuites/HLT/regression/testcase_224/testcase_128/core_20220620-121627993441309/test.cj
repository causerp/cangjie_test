/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output

public var var39 : Range<UInt16> = ((UInt16(Int16(UInt8(12)))&127)..=(UInt16(UInt8(UInt8(Int8(85))))&127):((Int64(UInt32(118))|1)))
public let var53 : Float32 = Float32(Float32(-48.0))
public var var66 : UInt32 = UInt32(Int32(UInt16(UInt8(223))))
public var var107 : Bool = (Int8(UInt8(Int8(UInt8(57)))) is Int8)
public var var159 : Option<Range<UInt64>> = Option<Range<UInt64>>.None
public let var162 : Range<UInt64> = ((UInt64(204)&127)..(UInt64(UInt32(Int16(-57)))&127):((Int64(Int8(57))|1)))
public let var181 : Unit = ()
public var var193 : ?Bool = (((Int16(100)&127)..(Int16(UInt16(134))&127):((18|1))) as Bool)
public var var231 : UInt8 = UInt8(UInt8(UInt8(81)))
public let var309 : Range<Int32> = ((Int32(UInt8(Int8(-87)))&127)..=(Int32(-26)&127):((Int64(UInt64(UInt64(69)))|1)))
public let var321 : Int8 = Int8(-99)
public let var331 : Int64 = (-109)
public let var335 : Int64 = Int64(Int8(UInt8(UInt8(201))))
public var var445 : Rune = r'A'
public var var458 : Int64 = Int64(Int8(UInt8(Int8(UInt8(37)))))
public var var491 : Int16 = Int16(46)
var var512 : (UInt64, Float64, String, Range<Int32>, Range<Int8>) = (UInt64(UInt16(UInt8(158))), (-27.0), "6m:}^?VveC", ((Int32(87)&127)..=(Int32(56)&127):(100|1)), ((Int8(-18)&127)..=(Int8(-60)&127):(((-110)|1))))
public let var538 : Range<Int8> = ((Int8(Int8(Int8(UInt8(18))))&127)..=(Int8(Int8(Int8(-41)))&127):((58|1)))
public var var628 : Int32 = Int32(83)
public var var730 : Int8 = Int8(-46)
public var var741 : ?Unit = Option<Unit>.None
public let var814 : UInt16 = UInt16(UInt16(15))
let var827 : Range<Int64> = ((34&127)..=(55&127):(54|1))
public let var841 : (Int64, Int16, Unit, Int64, Range<UInt64>, Unit) = (35, Int16(-124), (), (-4), ((UInt64(16)&127)..(UInt64(174)&127):(92|1)), ())
public var var866 : Option<Option<Unit>> = Option<Option<Unit>>.None
public let var869 : ?Unit = (Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.None as Unit)
public let var886 : Interface471<Range<Int16>, Option<(Rune, Float64, Option<Unit>, Range<UInt16>)>> = Class468()
public var var899 : Class468 = Class468()
public let var906 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
public let var919 : UInt64 = UInt64(Int32(Int32(UInt32(180))))
public var var971 : (Range<UInt32>, Option<(Rune, Float64, Option<Unit>, Range<UInt16>)>, String, Rune, Bool, Range<UInt64>) = (((UInt32(5)&127)..(UInt32(29)&127):((-54)|1)), (r'0' as (Rune, Float64, Option<Unit>, Range<UInt16>)), """
N6iYk
\"Q0OE
""", r'x', true, ((UInt64(Int64(Int8(-20)))&127)..=(UInt64(UInt16(UInt8(146)))&127):(((-89)|1))))
public var var1015 : (Rune, Float64, Option<Unit>, Range<UInt16>) = (r'X', Float64(29.0), (r'A' as Unit), ((UInt16(79)&127)..=(UInt16(Int8(Int8(15)))&127):(((-88)|1))))
public let var1281 : Bool = (Enum125.defaultValue is Interface472)
public var var1334 : Bool = (((-66), Int16(-128), (), 53, ((UInt64(187)&127)..=(UInt64(50)&127):(64|1)), ()) is Range<Int16>)
let var1480 : Array<Option<UInt16>> = Array<Option<UInt16>>(10){ i => Option<UInt16>.None }
public let var1583 : Int64 = (-124)
public let var1617 : Float64 = (-17.0)
public var var1634 : Range<Int16> = ((Int16(-6)&127)..(Int16(Int8(84))&127):(((-80)|1)))
public let var1656 : Option<(Int8, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Array<Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>>, Array<Unit>, Range<UInt32>, Unit)> = ((((UInt32(UInt32(103))&127)..(UInt32(Int8(78))&127):((Int64(UInt64(177))|1))), Option<(Rune, Float64, Option<Unit>, Range<UInt16>)>.None, "`'Whx,Km,o", r'L', true, ((UInt64(32)&127)..(UInt64(Int32(78))&127):((Int64(UInt16(140))|1)))) as (Int8, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Array<Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>>, Array<Unit>, Range<UInt32>, Unit))
public let var1681 : ?(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>) = Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.None
public let var1686 : (Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>) = (((UInt16(Int16(UInt16(187)))&127)..(UInt16(16)&127):((Int64(UInt64(UInt64(205)))|1))), (), ((-65), Int16(10), (), Int64(Int8(UInt8(214))), ((UInt64(146)&127)..=(UInt64(27)&127):(((-2)|1))), ()), Float64(Float32(Float32(81.0))), (), ((Int16(-63)&127)..=(Int16(52)&127):((-94)|1)), r'Q', UInt32(Int16(Int8(Int8(11)))), ((UInt16(Int16(UInt16(107)))&127)..(UInt16(Int8(Int8(112)))&127):((Int64(Int16(71))|1))))
var var1735 : ?(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>) = (Option<Bool>.None as (Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>))
public var var1744 : Unit = ()
public let var1769 : UInt16 = UInt16(201)
public let var1781 : Int64 = (-11)
public let var1793 : UInt32 = UInt32(219)
public let var1849 : UInt32 = UInt32(Int16(UInt8(177)))
let var1865 : ??(Int64, Int16, Unit, Int64, Range<UInt64>, Unit) = ((((Int8(-14)&127)..(Int8(57)&127):((-18)|1)) as Int64) as Option<(Int64, Int16, Unit, Int64, Range<UInt64>, Unit)>)
public var var1955 : Array<Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>> = [Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.None, Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.None, (Int8(UInt8(132)) as (Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)), (Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.None as (Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)), ((UInt8(157) as (Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)) as (Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)), Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.None, Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.None, Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.None, Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.None, Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.None]
var var2093 : ??Enum125 = ((((Int8(-119), ((-63), Int16(112), (), (-76), ((UInt64(129)&127)..(UInt64(52)&127):(((-80)|1))), ()), [Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.None, Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.None, Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.None, Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.None, Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.None, Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.None, Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.None, Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.None, Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.None, Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.None], [(), (), (), (), (), (), (), (), (), ()], ((UInt32(50)&127)..(UInt32(207)&127):((74|1))), ()), Int32(UInt16(3))) as UInt16) as Option<Enum125>)
public let var2129 : ?Enum125 = (Option<Range<UInt64>>.None as Enum125)
public let var2144 : Bool = false
var var2147 : Enum125 = Enum125.defaultValue
public let var2196 : (Option<Option<UInt8>>, Int8) = ((((UInt8(57)&127)..=(UInt8(UInt8(81))&127):((Int64(UInt8(64))|1))) as Option<UInt8>), Int8(Int8(93)))
public let var2210 : ?(Rune, Float64, Option<Unit>, Range<UInt16>) = Option<(Rune, Float64, Option<Unit>, Range<UInt16>)>.None
public let var2221 : ?UInt8 = Option<UInt8>.None
public var var2229 : Unit = ()
public var var2271 : ?(Rune, Float64, Option<Unit>, Range<UInt16>) = Option<(Rune, Float64, Option<Unit>, Range<UInt16>)>.None
public var var2347 : Array<UInt8> = [UInt8(15), UInt8(70), UInt8(117), UInt8(84), UInt8(210), UInt8(228), UInt8(92), UInt8(128), UInt8(167), UInt8(69)]
public let var2581 : Bool = true
public var var2594 : UInt64 = UInt64(Int32(79))
public let var2598 : UInt64 = UInt64(40)
public var var2728 : (UInt64, Float64, String, Range<Int32>, Range<Int8>) = (UInt64(221), (-66.0), "<\\ x3CSfoO", ((Int32(63)&127)..(Int32(-6)&127):(45|1)), ((Int8(UInt8(201))&127)..=(Int8(UInt8(15))&127):((28|1))))
public var var2750 : UInt16 = UInt16(Int16(UInt16(62)))
public enum Enum125 {
    defaultValue |
    enumValue760(Range<Int16>, Array<Bool>)
}


public func func171(param172 : Range<UInt16>) : Bool { // block id: 173
    var var206 : UInt16 = UInt16(Int8(-36));
    try { // block id: 175
        if (true) { // block id: 178
            ();
            var181
        } else if (var107) { // block id: 184
            ();
            var181
        };
        var193.getOrThrow()
    } finally { // block id: 200
        func func202() : Unit { // block id: 203
            ()
        }
;
        func202();
        var206;
        false
    }
}

public func func93(optionalParam94 ! : UInt8 = UInt8(UInt8(6)), optionalParam97 ! : Int16 = Int16(117)) : Bool { // block id: 99
    UInt8(109);
    let var128 : Enum125 = Enum125.defaultValue;
    try { // block id: 102
        [var107, var107, var107, false, false, false, var107, false, false, var107][8]
    } finally { // block id: 123
        var var135 : Rune = r'w';
        var var141 : Int32 = Int32(UInt8(Int8(Int8(Int8(-6)))));
        match (var128) {
            case defaultValue => 
                var135 = r'r';
                ();
                var141 + var141
            
            case _ => 
                var141;
                -var141
            
        };
        (var159 ?? var162);
        var39|>func171
    }
}



public func func257(optionalParam258 ! : Array<UInt8> = Array<UInt8>(10){ i => UInt8(111) }, namedParam276 ! : String, optionalParam277 ! : Array<Int64> = Array<Int64>(10){ i => 35 }) : Option<Range<UInt64>> { // block id: 297
    (var159 as Range<UInt64>)
}



public interface Interface471<T0, T1> {
    func func890(namedParam891 ! : Array<Unit>, namedParam892 ! : UInt64, namedParam893 ! : Range<Int32>) : Unit { // block id: 894
        ((Int8(126)&127)..(Int8(51)&127):(101|1));
        var899.var902 |= (-80)
    }

}

public interface Interface473 <: Interface471<Range<Int16>, Option<(Rune, Float64, Option<Unit>, Range<UInt16>)>> {

}

public interface Interface472 <: Interface471<Range<Int16>, Option<(Rune, Float64, Option<Unit>, Range<UInt16>)>> & Interface473 {
    func func890(namedParam891 ! : Array<Unit>, namedParam892 ! : UInt64, namedParam893 ! : Range<Int32>) : Unit { // block id: 894
        ((Int8(126)&127)..(Int8(51)&127):(101|1));
        var899.var902 |= (-80)
    }

}

public open class Class468 <: Interface471<Range<Int16>, Option<(Rune, Float64, Option<Unit>, Range<UInt16>)>> & Interface472 {
    public init() { // block id: 470

    }
;
    public let var478 : Bool = true;
    public let var665 : Unit = ();
    public var var902 : Int64 = 89;
    public func func890(namedParam891 ! : Array<Unit>, namedParam892 ! : UInt64, namedParam893 ! : Range<Int32>) : Unit { // block id: 894
        ((Int8(126)&127)..(Int8(51)&127):(101|1));
        var899.var902 |= (-80)
    }

}

public func func719(param720 : (Range<UInt16>) -> Bool, optionalParam723 ! : UInt64 = UInt64(155), namedParam725 ! : (Rune, Float64, Option<Unit>, Range<UInt16>), namedParam726 ! : Int32) : Range<Int8> { // block id: 727
    var730 *= var730;
    var181;
    try { // block id: 735
        try { // block id: 737
            if (true) { var741 } else { Option<Unit>.None } ;
            let var747 : Enum125 = Enum125.defaultValue;
            var var750 : Enum125 = Enum125.defaultValue;
            if (false) { var747 } else { var750 } 
        } catch (e: Exception) { // block id: 752
            Int16(33);
            ();
            Enum125.defaultValue
        } finally { // block id: 756
            if (false) { Enum125.enumValue760(((Int16(-111)&127)..(Int16(67)&127):((-18)|1)), [var107, var107, var107, var107, true, true, var107, true, var107, true]) } else { Enum125.defaultValue } 
        };
        ((Int8(-28)&127)..(Int8(16)&127):((-36)|1))
    } finally { // block id: 777
        var538
    }
}


public func func959(param787 : (UInt8, Int16) -> Bool, param791 : Range<Int64>, namedParam792 ! : Float64) : Unit { // block id: 793
    var181;
    let var803 : Option<Range<UInt16>> = Option<Range<UInt16>>.Some(((UInt16(UInt16(UInt16(10)))&127)..=(UInt16(Int8(-91))&127):(((-91)|1))));
    var loopTimeVar820 : Range<UInt64> = ((UInt64(181)&127)..=(UInt64(25)&127):((96|1)));
    for (i in loopTimeVar820 where func171((var803 ?? ((var814&127)..(var814&127):((var335|1)))))) {

    }
}


public func func857(param858 : Range<UInt16>) : Option<Unit> { // block id: 859
    (var866 ?? var869)
}


public func func947(param948 : (Range<UInt16>) -> Option<Unit>) : Unit { // block id: 951

}

public func func953(param858 : Range<UInt16>) : Option<Unit> { // block id: 859
    (var866 ?? var869)
}


public func func959(param960 : Range<Int16>) : Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)> { // block id: 961
    func func989(optionalParam990 ! : (Range<UInt32>, Option<(Rune, Float64, Option<Unit>, Range<UInt16>)>, String, Rune, Bool, Range<UInt64>) = (((UInt32(247)&127)..=(UInt32(176)&127):((-95)|1)), (Float32(Float32(Float32(-4.0))) as (Rune, Float64, Option<Unit>, Range<UInt16>)), """
EY8.;
.OuRg
""", r'o', (Int16(Int16(-64)) is Array<Int64>), ((UInt64(UInt64(UInt8(72)))&127)..=(UInt64(232)&127):((39|1)))), namedParam1008 ! : UInt64, namedParam1009 ! : ((Range<UInt16>) -> Option<Unit>) -> Unit, namedParam1012 ! : Interface472) : (Rune, Float64, Option<Unit>, Range<UInt16>) { // block id: 1013
        var1015
    }
;
    let var1031 : ((Range<UInt16>) -> Option<Unit>) -> Unit = func947;
    var var1034 : Interface472 = Class468();
    ((var971[1] ?? func989(optionalParam990 : var971, namedParam1008 : UInt64(112), namedParam1009 : var1031, namedParam1012 : var1034)) as (Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>))
}

private func func1037(param1038 : UInt8) : Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)> { // block id: 1039
    let var1048 : (Int8, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Array<Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>>, Array<Unit>, Range<UInt32>, Unit) = (Int8(31), (80, Int16(Int16(Int16(-66))), (), Int64(UInt64(177)), ((UInt64(67)&127)..=(UInt64(195)&127):((Int64(UInt8(141))|1))), ()), [Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.None, (((UInt64(12)&127)..(UInt64(144)&127):(121|1)) as (Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)), (Enum125.defaultValue as (Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)), ((Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.None as (Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)) as (Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)), Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.Some((((UInt16(16)&127)..(UInt16(207)&127):(11|1)), (), (32, Int16(100), (), 112, ((UInt64(17)&127)..=(UInt64(243)&127):(7|1)), ()), 77.0, (), ((Int16(46)&127)..=(Int16(-6)&127):(17|1)), r'J', UInt32(174), ((UInt16(121)&127)..(UInt16(144)&127):(56|1)))), Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.None, (Class468() as (Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)), (((Int8(-32), ((-12), Int16(89), (), 94, ((UInt64(61)&127)..=(UInt64(225)&127):(((-51)|1))), ()), [Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.Some((((UInt16(227)&127)..=(UInt16(94)&127):(((-25)|1))), (), ((-88), Int16(96), (), (-111), ((UInt64(29)&127)..(UInt64(227)&127):(((-37)|1))), ()), 108.0, (), ((Int16(-57)&127)..=(Int16(-100)&127):(((-7)|1))), r'S', UInt32(31), ((UInt16(162)&127)..=(UInt16(150)&127):((-93)|1)))), Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.None, Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.None, Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.None, Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.None, Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.None, Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.Some((((UInt16(181)&127)..=(UInt16(136)&127):((-103)|1)), (), ((-33), Int16(51), (), (-109), ((UInt64(48)&127)..(UInt64(178)&127):(106|1)), ()), 90.0, (), ((Int16(91)&127)..=(Int16(28)&127):((-87)|1)), r'n', UInt32(203), ((UInt16(10)&127)..(UInt16(252)&127):((75|1))))), Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.Some((((UInt16(109)&127)..(UInt16(24)&127):(((-87)|1))), (), (30, Int16(-64), (), (-9), ((UInt64(43)&127)..(UInt64(76)&127):((-118)|1)), ()), 92.0, (), ((Int16(-74)&127)..=(Int16(13)&127):((-13)|1)), r'3', UInt32(219), ((UInt16(184)&127)..=(UInt16(149)&127):(((-56)|1))))), Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.Some((((UInt16(198)&127)..=(UInt16(30)&127):((-4)|1)), (), ((-35), Int16(46), (), 19, ((UInt64(235)&127)..=(UInt64(184)&127):(((-84)|1))), ()), 16.0, (), ((Int16(89)&127)..=(Int16(-12)&127):(64|1)), r'm', UInt32(154), ((UInt16(30)&127)..=(UInt16(0)&127):(((-111)|1))))), Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.None], [(), (), (), (), (), (), (), (), (), ()], ((UInt32(78)&127)..=(UInt32(204)&127):(((-41)|1))), ()), Int32(-75)) as (Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)), Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.None, Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.Some((((UInt16(248)&127)..=(UInt16(98)&127):((-28)|1)), (), ((-11), Int16(-29), (), 57, ((UInt64(218)&127)..(UInt64(182)&127):((12|1))), ()), (-111.0), (), ((Int16(-18)&127)..(Int16(-57)&127):(73|1)), r'r', UInt32(209), ((UInt16(5)&127)..(UInt16(130)&127):((116|1)))))], [(), (), (), (), (), (), (), (), (), ()], ((UInt32(Int8(Int8(41)))&127)..(UInt32(155)&127):((16|1))), ());
    (var1048, Int32(-13))[0][2][5]
}


func func1465(param1466 : ((Range<UInt16>) -> Bool, UInt64, (Rune, Float64, Option<Unit>, Range<UInt16>), Int32) -> Range<Int8>, param1472 : (Range<UInt16>) -> Option<Unit>) : Int64 { // block id: 1475
    match (var1480[3]) {
        case _ => 
            var181;
            var181;
            var331
        
        case _ => 
            (-22)
        
        case _ => 
            var231 <<= ((var231) & 7);
            var335
        
    }
}

public func func1455(param1456 : ((Range<UInt16>) -> Bool, UInt64, (Rune, Float64, Option<Unit>, Range<UInt16>), Int32) -> Range<Int8>) : Int64 { // block id: 1462
    let var1546 : (Range<UInt16>) -> Option<Unit> = func857;
    Int64(func1465(param1456, var1546))
}

public func func1551(param720 : (Range<UInt16>) -> Bool, optionalParam723 : UInt64, namedParam725 : (Rune, Float64, Option<Unit>, Range<UInt16>), namedParam726 : Int32) : Range<Int8> { // block id: 727
    var730 *= var730;
    var181;
    try { // block id: 735
        try { // block id: 737
            if (true) { var741 } else { Option<Unit>.None } ;
            let var747 : Enum125 = Enum125.defaultValue;
            var var750 : Enum125 = Enum125.defaultValue;
            if (false) { var747 } else { var750 } 
        } catch (e: Exception) { // block id: 752
            Int16(33);
            ();
            Enum125.defaultValue
        } finally { // block id: 756
            if (false) { Enum125.enumValue760(((Int16(-111)&127)..(Int16(67)&127):((-18)|1)), [var107, var107, var107, var107, true, true, var107, true, var107, true]) } else { Enum125.defaultValue } 
        };
        ((Int8(-28)&127)..(Int8(16)&127):((-36)|1))
    } finally { // block id: 777
        var538
    }
}

public func func1444(param1445 : Range<Int16>) : UInt8 { // block id: 1446
    let var1549 : (((Range<UInt16>) -> Bool, UInt64, (Rune, Float64, Option<Unit>, Range<UInt16>), Int32) -> Range<Int8>) -> Int64 = func1455;
    let var1559 : ((Range<UInt16>) -> Bool, UInt64, (Rune, Float64, Option<Unit>, Range<UInt16>), Int32) -> Range<Int8> = func1551;
    (Option<Int64>.None ?? Int64((var1559|>var1549)));
    try { // block id: 1563
        var181;
        ();
        [var181, var181, (), var181, (), (), (), (), (), ()]
    } catch (_) { // block id: 1577
        var var1589 : Int64 = (-108);
        [51, var331, var335, var1583, (-47), var331, (-105), var1589, var335, (-128)];
        [(), var181, var181, var181, (), var181, var181, var181, (), ()]
    }[9];
    if (var1334) { // block id: 1608
        ();
        var66 = var66;
        UInt8(121)
    } else if (126.0 == var1617) { // block id: 1619
        UInt8(151) * UInt8(9)
    } else { // block id: 1623
        Class468();
        r'4';
        var231 % ((UInt8(66)) | 1)
    } - var231
}

public func func646(param647 : Range<Int8>, namedParam648 ! : Range<UInt16>) : Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)> { // block id: 649
    var var662 : Class468 = Class468();
    let var705 : (Rune, Float64, Option<Unit>, Range<UInt16>) = (r'R', 23.0, Option<Unit>.None, ((UInt16(232)&127)..=(UInt16(117)&127):((-2)|1)));
    let var780 : (Range<UInt16>) -> Bool = func171;
    let var850 : Enum125 = Enum125.defaultValue;
    func func882(namedParam883 ! : Class468) : Interface471<Range<Int16>, Option<(Rune, Float64, Option<Unit>, Range<UInt16>)>> { // block id: 884
        var886
    }
;
    var loopTimeVar935 : Int64 = 0;
    do {
        loopTimeVar935++;
        var662.var665;
        let var836 : String = ###"Y|*nZ}\"'v@"###;
        let var873 : (Range<UInt16>) -> Option<Unit> = { lambdaParameter876 : Range<UInt16> => Option<Unit>.None };
        func func668(optionalParam669 ! : Range<UInt32> = ((UInt32(UInt32(243))&127)..=(UInt32(Int32(UInt32(UInt32(234))))&127):((Int64(Int64(UInt64(UInt32(224))))|1))), namedParam681 ! : (UInt8, Int16) -> Bool) : Unit { // block id: 685
            func func688(namedParam689 ! : Range<Int8>, namedParam690 ! : Unit, namedParam691 ! : Enum125, namedParam692 ! : Option<Unit>) : Option<Unit> { // block id: 693
                try { // block id: 697
                    var66 -= var66;
                    var458 ^= var458;
                    var705
                } catch (e: Exception) { // block id: 711
                    (r'W', (-75.0), namedParam692, var39)
                }[2]
            }
;
            (func688(namedParam689 : func719(var780, optionalParam723 : UInt64(229), namedParam725 : var705, namedParam726 : var628), namedParam690 : func959(namedParam681, var827, namedParam792 : 108.0), namedParam691 : try { // block id: 831
                (UInt64(10), (-56.0), var836, ((Int32(76)&127)..(Int32(79)&127):((-27)|1)), ((Int8(111)&127)..=(Int8(-54)&127):(84|1)));
                var841;
                var850
            } finally { // block id: 852
                var181;
                var181;
                Enum125.defaultValue
            }, namedParam692 : (var39|>var873)) ?? func882(namedParam883 : Class468()).func890(namedParam891 : var906, namedParam892 : var919, namedParam893 : var309))
        }
;
        let var926 : (UInt8, Int16) -> Bool = { lambdaParameter929 : UInt8, lambdaParameter930 : Int16 => (() is Option<Range<UInt16>>) };
        func668(namedParam681 : var926)
    } while ((try { // block id: 652
        UInt64(176) & UInt64(146);
        var107
    } finally { // block id: 657
        true
    }) && loopTimeVar935 < 100 ) ;
    try { // block id: 937
        (Option<UInt16>.None ?? var814)
    } finally { // block id: 945
        func953|>func947;
        UInt16(var231)
    };
    let var1291 : Int8 = Int8(-26);
    let var1317 : (Range<UInt16>) -> Bool = func171;
    try { // block id: 1632
        var1634
    } catch (_) { // block id: 1640
        ();
        if (true) { ((Int16(69)&127)..=(var491&127):((9|1))) } else { var1634 } 
    }|>(func1444~>{ lambdaParameter1252 : UInt8 => var var1362 : (Int8, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Array<Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>>, Array<Unit>, Range<UInt32>, Unit) = (Int8(-10), (Int64(UInt8(Int8(-95))), Int16(UInt8(UInt8(95))), (), Int64(UInt8(Int8(66))), ((UInt64(209)&127)..(UInt64(49)&127):(63|1)), ()), [Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.Some((((UInt16(186)&127)..=(UInt16(1)&127):((-128)|1)), (), ((-44), Int16(50), (), 70, ((UInt64(30)&127)..=(UInt64(127)&127):(((-128)|1))), ()), 98.0, (), ((Int16(94)&127)..(Int16(76)&127):(49|1)), r'P', UInt32(138), ((UInt16(174)&127)..=(UInt16(109)&127):(((-55)|1))))), (###";eYB1T0opj"### as (Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)), Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.None, (Class468() as (Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)), ((Int8(90) as Range<UInt16>) as (Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)), Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.None, (Int32(-102) as (Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)), Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.Some((((UInt16(159)&127)..(UInt16(152)&127):(66|1)), (), (24, Int16(116), (), (-108), ((UInt64(142)&127)..=(UInt64(234)&127):((-124)|1)), ()), 118.0, (), ((Int16(24)&127)..(Int16(73)&127):(124|1)), r'h', UInt32(186), ((UInt16(56)&127)..=(UInt16(44)&127):((-69)|1)))), Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.None, Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.None], [(), (), (), (), (), (), (), (), (), ()], ((UInt32(Int16(32))&127)..=(UInt32(UInt32(Int8(123)))&127):(((-56)|1))), ()); ([var53 < var53, [var107, false, false, var107, var107, true, false, false, var107, false][6], [true, var107, false, var107, var107, var107, var1281, true, var107, false][2], Int8(35) < var1291, (UInt64(159) is (Int8, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Array<Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>>, Array<Unit>, Range<UInt32>, Unit)), try { // block id: 1296
        var181;
        true
    } catch (e: Exception) { // block id: 1299
        var193;
        var var1303 : UInt64 = UInt64(205);
        var1303 *= var1303;
        var107
    }, match (Class468()) {
        case _ => 
            var309;
            var628 != Int32(57)
        
    }, (((UInt16(84)&127)..(UInt16(204)&127):((-106)|1))|>var1317), match (UInt64(69)) {
        case 33 => 
            var741;
            (-38) >= (-55)
        
        case 242 | 145 | 80 | 206 => 
            var1334 || true
        
        case caseVar1346 => 
            var var1350 : UInt64 = UInt64(UInt16(UInt8(Int8(Int8(-37)))));
            var1350 += UInt64(176);
            true
        
        case _ => 
            (var1362, Int32(-124));
            true
        
    }, func93()] as (Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)) })
}


public func func642(param643 : UInt32) : Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)> { // block id: 644
    var var1741 : Range<UInt32> = ((UInt32(3)&127)..(UInt32(44)&127):(10|1));
    var var1756 : Int8 = Int8(UInt8(104));
    func646(match ((var1656 ?? (var321, var841, [var1681, var1681, Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.Some(var1686), Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.None, Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.Some(var1686), Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.None, Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.None, Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.None, var1735, var1735], [(), (), (), (), (), (), (), (), (), ()], var1741, var1744))) {
        case _ : Interface472 => 
            ();
            ((Int8(92)&127)..=(Int8(51)&127):(6|1))
        
        case _ : Option<Bool> => 
            ((var1756&127)..(var321&127):((var458|1)))
        
        case _ => 
            var899;
            ((Int8(61)&127)..(Int8(-79)&127):((-47)|1))
        
    }, namedParam648 : try { // block id: 1766
        var1769 * var814;
        if (var107) { [(-112), 57, 107, 41, 37, (-69), (-120), (-48), 17, (-62)] } else { [var335, var1583, var1583, (-85), var1781, (-24), var458, 111, var458, var331] } ;
        ((UInt16(3)&127)..=(UInt16(122)&127):((-66)|1))
    } catch (_) { // block id: 1789
        var39
    })
}

public func func404(param405 : UInt32) : Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)> { // block id: 406
    var var453 : ?(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>) = Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.None;
    var var475 : Class468 = Class468();
    let var569 : Bool = ([(Int64(UInt64(207)) is Range<UInt32>), false, true, (Option<Bool>.None is Option<UInt8>), (Option<Unit>.Some(()) is Range<UInt32>), true, false, false, ([true, true, false, true, false, false, false, true, false, true] is UInt32), (((Int16(-4)&127)..(Int16(16)&127):(((-81)|1))) is Range<Int64>)] is Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>);
    let var606 : Bool = (false is Range<UInt8>);
    let var619 : Range<Int64> = ((0&127)..((-21)&127):((-78)|1));
    try { // block id: 408
        try { // block id: 410
            let var418 : Range<Int64> = ((59&127)..=(Int64(UInt32(Int16(Int16(-49))))&127):((Int64(UInt32(120))|1)));
            if (false) { ((var335&127)..=(119&127):((19|1))) } else { var418 } ;
            Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.Some((((UInt16(115)&127)..=(UInt16(218)&127):((-25)|1)), (), (var331, Int16(68), var181, var331, ((UInt64(199)&127)..=(UInt64(62)&127):((-109)|1)), var181), (-77.0), (), ((Int16(-91)&127)..(Int16(-24)&127):((var331|1))), var445, var66, ((UInt16(237)&127)..=(UInt16(69)&127):((-85)|1))))
        } catch (_) { // block id: 449
            var181;
            ();
            var453
        } finally { // block id: 455
            var458 %= ((var335) | 1);
            Int8(13);
            var453
        };
        var475.var478
    } catch (e: Exception) { // block id: 480
        Float32(Float32(33.0));
        var var498 : (Int64, Int16, Unit, Int64, Range<UInt64>, Unit) = ((-34), Int16(-18), (), 28, ((UInt64(Int64(Int32(74)))&127)..=(UInt64(163)&127):((114|1))), ());
        let var559 : String = ###"ewA5n@:\"dX"###;
        if (var107) { // block id: 485
            if (false) { ((-16), var491, (), 41, ((UInt64(166)&127)..(UInt64(87)&127):(10|1)), var181) } else { var498 } ;
            var512
        } else if (false) { // block id: 525
            var475;
            let var531 : UInt64 = UInt64(Int8(-9));
            if (false) { (var531, (-111.0), "EuM_N+s9__", ((Int32(105)&127)..(Int32(40)&127):(47|1)), var538) } else { (var531, 28.0, """
=>kLZ
wKYf*
""", ((Int32(-97)&127)..(Int32(38)&127):(47|1)), ((Int8(79)&127)..(Int8(-76)&127):(12|1))) } 
        } else { // block id: 554
            (UInt64(245), 52.0, var559, var309, ((Int8(54)&127)..(Int8(39)&127):(9|1)))
        };
        [var107, false, var107, var569, var107, true, false, var606, true, var606][7]
    } finally { // block id: 612
        var var622 : Range<Int64> = ((49&127)..=(26&127):((-77)|1));
        try { // block id: 614
            ();
            if (false) { var619 } else { var622 } ;
            var39
        } finally { // block id: 625
            var628 = Int32(86);
            Option<UInt8>.None;
            ((UInt16(127)&127)..=(UInt16(246)&127):((var331|1)))
        };
        var181;
        false || true
    };
    var181;
    var1793|>func642
}


public func func252(param253 : UInt64) : Unit { // block id: 254
    var var305 : Float64 = (-38.0);
    var var353 : Int16 = Int16(Int8(Int8(Int8(Int8(-116)))));
    match (func257(namedParam276 : (UInt64(240), var305, "@a{B58\"p<fr", var309, ((Int8(-93)&127)..=(var321&127):(((-77)|1))))[2], optionalParam277 : if (true) { [13, (-42), var331, var331, var335, var335, 91, 79, 89, 42] } else { [45, 59, 126, (-85), (-64), (-47), (-9), (-62), (-39), (-18)] } )) {
        case caseVar348 : Float64 => 
            param253;
            var353 += Int16(126);
            var305 = caseVar348
        
        case _ => 
            var181;
            ((var331&127)..=(var331&127):((var331|1)));
            ()
        
        case _ : Unit => 
            ()
        
        case caseVar378 : Array<UInt8> => 
            var181
        
        case _ => 
            var107 ||= var107
        
    };
    func func394() : Option<(Int64, Int16, Unit, Int64, Range<UInt64>, Unit)> { // block id: 395
        var var1825 : (Int64, Int16, Unit, Int64, Range<UInt64>, Unit) = (Int64(UInt16(186)), Int16(65), (), Int64(UInt64(UInt64(45))), ((UInt64(UInt64(91))&127)..(UInt64(Int8(Int8(69)))&127):((Int64(Int8(UInt8(155)))|1))), ());
        ((var66|>func404) ?? if (false) { (var39, (), (var331, Int16(-81), (), (-108), ((UInt64(211)&127)..=(UInt64(45)&127):(4|1)), var1744), 34.0, var1744, ((Int16(-94)&127)..=(var491&127):(((-81)|1))), r'j', var66, var39) } else { (((var1769&127)..(var1769&127):((var458|1))), (), var1825, (-105.0), (), ((Int16(-87)&127)..=(Int16(16)&127):((-120)|1)), r'j', var1849, ((UInt16(254)&127)..=(UInt16(28)&127):((-95)|1))) } )[4];
        (try { // block id: 1861
            if (var1334) { var1865 } else { Option<Option<(Int64, Int16, Unit, Int64, Range<UInt64>, Unit)>>.Some(Option<(Int64, Int16, Unit, Int64, Range<UInt64>, Unit)>.None) } 
        } finally { // block id: 1871
            var181;
            var181;
            Option<Option<(Int64, Int16, Unit, Int64, Range<UInt64>, Unit)>>.None
        } ?? ((var1583, Int16(-73), (), var331, var162, var1744) as (Int64, Int16, Unit, Int64, Range<UInt64>, Unit)))
    }
;
    (func394() ?? if (true) { (51, var491, var1744, var458, ((UInt64(159)&127)..=(UInt64(84)&127):(110|1)), var1744) } else { var841 } )[2]
}

public func func249<T0, T1>() : Option<Unit> { // block id: 250
    var919|>func252;
    var181;
    let var1904 : Enum125 = Enum125.enumValue760(((Int16(-102)&127)..(Int16(123)&127):(64|1)), [((((UInt32(13)&127)..=(UInt32(52)&127):(((-127)|1))), Option<(Rune, Float64, Option<Unit>, Range<UInt16>)>.None, "TUJ,z+'FS~", r'g', true, ((UInt64(45)&127)..=(UInt64(13)&127):((-69)|1))) is () -> Option<(Int64, Int16, Unit, Int64, Range<UInt64>, Unit)>), (Option<Int64>.Some(12) is Range<UInt32>), (((UInt8(68)&127)..=(UInt8(184)&127):((36|1))) is Class468), true, (r'e' is (UInt64) -> Unit), true, false, (Int8(Int8(118)) is Unit), (Class468() is Range<UInt32>), (((UInt64(60)&127)..(UInt64(196)&127):(((-34)|1))) is Range<Int16>)]);
    try { // block id: 1898
        var1744;
        var866.getOrThrow()
    } catch (_) { // block id: 1902
        var1904;
        var1686[4];
        if (var107) { Option<Unit>.Some(var181) } else { var869 } 
    } finally { // block id: 1950
        (var730, var841, var1955, [(), (), (), (), (), (), (), (), (), ()], ((UInt32(26)&127)..(UInt32(69)&127):((-120)|1)), var181);
        if (var1281) { // block id: 1977
            ();
            ();
            var var1982 : UInt64 = UInt64(UInt32(UInt32(38)));
            var1982 /= ((var1982) | 1)
        };
        var var1991 : Array<Bool> = [true, false, true, false, false, true, true, false, true, true];
        try { // block id: 1988
            ();
            var1991;
            var741
        } catch (_) { // block id: 1994
            var741
        } finally { // block id: 1996
            let var1999 : Bool = (([true, (Int32(-46) is Array<Bool>), ([false, false, true, false, true, false, false, true, false, true] is (UInt32) -> Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>), true, true, true, false, ([false, false, false, false, true, false, true, true, false, true] is (Range<UInt16>) -> Option<Unit>), false, (UInt32(5) is (UInt64) -> Unit)] as Option<(Int64, Int16, Unit, Int64, Range<UInt64>, Unit)>) is Array<Int64>);
            if (var1999) { [UInt8(204), UInt8(130), UInt8(190), UInt8(9), UInt8(97), UInt8(96), var231, var231, UInt8(242), UInt8(150)] } else { [UInt8(152), var231, UInt8(176), var231, UInt8(72), UInt8(136), var231, UInt8(239), var231, UInt8(226)] } ;
            ();
            var869
        }
    }
}

public func func240(param241 : Enum125) : Unit { // block id: 242
    var var2064 : ?(Int64, Int16, Unit, Int64, Range<UInt64>, Unit) = (Option<UInt16>.None as (Int64, Int16, Unit, Int64, Range<UInt64>, Unit));
    var loopTimeVar2071 : Range<UInt64> = ((UInt64(220)&127)..(UInt64(UInt16(Int8(79)))&127):((Int64(Int8(-35))|1)));
    (func249<Rune, Array<Option<UInt16>>>() ?? for (i in loopTimeVar2071 where try { // block id: 2053
        param241;
        var1334 ||= var107;
        true
    } finally { // block id: 2059
        if (false) { Option<(Int64, Int16, Unit, Int64, Range<UInt64>, Unit)>.None } else { var2064 } ;
        Int32(22) == Int32(101)
    }) {

    })
}




public func func236(param237 : Int64) : UInt8 { // block id: 238
    let var2080 : (Enum125) -> Unit = func240;
    var var2136 : UInt64 = UInt64(95);
    var var2139 : UInt64 = UInt64(Int16(122));
    var var2159 : Bool = (Enum125.defaultValue is Option<Option<Enum125>>);
    ((var2093 ?? var2129) ?? try { // block id: 2133
        var2136 %= ((var2139) | 1);
        if (var2144) { var2147 } else { Enum125.enumValue760(var1634, [false, true, true, false, var2144, var1281, var2159, false, var2144, true]) } 
    } catch (e: Exception) { // block id: 2165
        if (false) { Enum125.enumValue760(((var491&127)..(Int16(-45)&127):(((-88)|1))), [false, true, true, true, true, true, true, true, false, true]) } else { Enum125.defaultValue } 
    } finally { // block id: 2175
        false;
        if (false) { Enum125.enumValue760(((var491&127)..(Int16(-5)&127):(((-20)|1))), [true, false, true, false, false, false, false, true, false, true]) } else { Enum125.defaultValue } 
    })|>var2080;
    ();
    let var2256 : ?(Rune, Float64, Option<Unit>, Range<UInt16>) = Option<(Rune, Float64, Option<Unit>, Range<UInt16>)>.Some((r'm', (-9.0), Option<Unit>.Some(()), ((UInt16(215)&127)..=(UInt16(Int8(-5))&127):((29|1)))));
    ((var2196[0] ?? match (var2210) {
        case caseVar2214 : Int32 => 
            var886;
            var53;
            if (var2159) { var2221 } else { var2221 } 
        
        case caseVar2226 => 
            var2229;
            Option<UInt8>.Some(var231)
        
        case _ => 
            UInt32(102) & UInt32(208);
            var2221
        
    }) ?? match ([var2210, var2210, Option<(Rune, Float64, Option<Unit>, Range<UInt16>)>.Some((var445, var1617, Option<Unit>.None, ((UInt16(44)&127)..(UInt16(159)&127):(7|1)))), var2210, Option<(Rune, Float64, Option<Unit>, Range<UInt16>)>.Some(var1015), var2210, var2256, var2256, var2256, var2271][9]) {
        case _ : Option<UInt16> => 
            -var231
        
        case _ => 
            Class468();
            var231 ^ UInt8(63)
        
    })
}

public func func88(param89 : UInt8) : Bool { // block id: 90
    let var2331 : (Int32, UInt8, Range<UInt16>) = (Int32(Int16(UInt8(108))), UInt8(Int8(-66)), ((UInt16(148)&127)..=(UInt16(Int8(Int8(98)))&127):(((-39)|1))));
    func func213(optionalParam214 ! : (UInt8, Int16) -> Bool = func93) : UInt8 { // block id: 219
        let var2324 : Option<Int64> = Option<Int64>.None;
        [(Option<UInt8>.Some(param89) ?? var231), func236((-56)), (Option<UInt8>.Some(UInt8(116)) ?? param89), UInt8(var321), try { // block id: 2293
            UInt8(236)
        } finally { // block id: 2295
            var181;
            var231
        }, UInt8(UInt8(75)), match (Class468()) {
            case caseVar2304 : Option<Unit> => 
                UInt8(79) + UInt8(165)
            
            case _ => 
                ();
                var231
            
            case _ => 
                var730 |= var321;
                if (false) { Option<Int64>.Some((-111)) } else { var2324 } ;
                param89
            
        }, UInt8(211), var2331[1], var2347[3]][6]
    }
;
    let var2357 : (Range<UInt64>, Int64, Array<Unit>, ((Int8, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Array<Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>>, Array<Unit>, Range<UInt32>, Unit), Int32)) = (((UInt64(222)&127)..=(UInt64(UInt8(Int8(2)))&127):((Int64(UInt16(Int16(-59)))|1))), Int64(UInt32(UInt8(UInt8(84)))), [(), (), (), (), (), (), (), (), (), ()], ((Int8(Int8(1)), ((-126), Int16(-33), (), (-29), ((UInt64(82)&127)..(UInt64(150)&127):((105|1))), ()), [Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.None, Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.Some((((UInt16(38)&127)..=(UInt16(185)&127):(34|1)), (), ((-67), Int16(-66), (), 92, ((UInt64(56)&127)..=(UInt64(211)&127):((42|1))), ()), 110.0, (), ((Int16(-16)&127)..(Int16(8)&127):(37|1)), r'j', UInt32(81), ((UInt16(88)&127)..=(UInt16(208)&127):(46|1)))), Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.Some((((UInt16(179)&127)..(UInt16(36)&127):(108|1)), (), ((-60), Int16(-23), (), 60, ((UInt64(195)&127)..(UInt64(77)&127):((44|1))), ()), (-14.0), (), ((Int16(-28)&127)..=(Int16(-19)&127):(126|1)), r'V', UInt32(139), ((UInt16(165)&127)..=(UInt16(219)&127):((-67)|1)))), Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.None, Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.Some((((UInt16(196)&127)..(UInt16(189)&127):(((-60)|1))), (), (64, Int16(57), (), 111, ((UInt64(114)&127)..=(UInt64(165)&127):((65|1))), ()), (-81.0), (), ((Int16(-16)&127)..(Int16(83)&127):(((-95)|1))), r'u', UInt32(165), ((UInt16(177)&127)..(UInt16(155)&127):(89|1)))), Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.Some((((UInt16(241)&127)..(UInt16(180)&127):((72|1))), (), ((-54), Int16(-34), (), (-109), ((UInt64(133)&127)..=(UInt64(56)&127):(((-112)|1))), ()), (-34.0), (), ((Int16(101)&127)..=(Int16(-10)&127):((-37)|1)), r'A', UInt32(193), ((UInt16(139)&127)..(UInt16(148)&127):(116|1)))), Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.Some((((UInt16(50)&127)..=(UInt16(140)&127):(((-119)|1))), (), (93, Int16(-64), (), 28, ((UInt64(33)&127)..=(UInt64(57)&127):((90|1))), ()), 48.0, (), ((Int16(-54)&127)..(Int16(-96)&127):((-91)|1)), r't', UInt32(68), ((UInt16(175)&127)..=(UInt16(134)&127):((-59)|1)))), Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.None, Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.None, Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.Some((((UInt16(205)&127)..=(UInt16(41)&127):((-8)|1)), (), (54, Int16(113), (), 2, ((UInt64(90)&127)..(UInt64(214)&127):((-126)|1)), ()), 17.0, (), ((Int16(111)&127)..=(Int16(27)&127):((28|1))), r'o', UInt32(152), ((UInt16(224)&127)..=(UInt16(143)&127):(((-94)|1)))))], [(), (), (), (), (), (), (), (), (), ()], ((UInt32(13)&127)..=(UInt32(197)&127):(97|1)), ()), Int32(85)));
    if (func93(optionalParam94 : func213(), optionalParam97 : Int16(UInt16(57)))) { // block id: 2353
        var2357[3];
        var var2532 : Unit = ();
        var2532
    };
    match {
        case !var2144 => 
        ();
        if (var1281) { Option<Option<(Int64, Int16, Unit, Int64, Range<UInt64>, Unit)>>.None } else { Option<Option<(Int64, Int16, Unit, Int64, Range<UInt64>, Unit)>>.None } ;
        var var2552 : String = """
F\\0sl
#7^:p
""";
        (((UInt32(45)&127)..(UInt32(36)&127):((var1583|1))), Option<(Rune, Float64, Option<Unit>, Range<UInt16>)>.Some(var1015), var2552, r'P', true, ((UInt64(88)&127)..=(UInt64(160)&127):(9|1)))
        case match (var2129) {
        case caseVar2561 : Int32 => 
            if (true) { Enum125.enumValue760(((var491&127)..(Int16(51)&127):(((-11)|1))), [var1281, var2144, var1281, var107, var107, false, var2144, var1334, false, var2581]) } else { Enum125.defaultValue } ;
            [true, true, true, false, true, true, true, true, true, false];
            var2581
        
        case _ => 
            UInt16(135) == var1769
        
    } => 
        var2594 |= var2598;
        Float32(102.0);
        var971
        case _ =>
        if (true) { (((UInt32(92)&127)..(UInt32(19)&127):(81|1)), var2210, "wED0)Gs..c", var445, true, ((UInt64(195)&127)..=(var919&127):(var1781|1))) } else { var971 }
    }[4]
}

public func func83(param84 : Range<Int32>) : Array<Int64> { // block id: 85
    var loopTimeVar2621 : Range<UInt64> = ((UInt64(Int32(-89))&127)..(UInt64(Int16(70))&127):(((-2)|1)));
    for (i in loopTimeVar2621 where (var231|>func88)) {

    };
    var var2648 : Array<Int64> = [117, 82, 49, 78, 66, 27, (-108), (-109), (-96), (-31)];
    if (var1334) { (if (if (var1334) { // block id: 2633
        false
    } else if (var2581) { // block id: 2636
        var181;
        var1281
    } else { // block id: 2639
        false
    }) { match (Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.Some(var1686)) {
        case _ : Rune => 
            var2648
        
        case _ => 
            if (false) { Option<Range<UInt16>>.Some(var39) } else { Option<Range<UInt16>>.Some(((var1769&127)..(UInt16(77)&127):(((-113)|1)))) } ;
            var2648
        
        case _ => 
            let var2678 : Unit = ();
            [Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.None, var1681, Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.None, var1735, Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.Some((((UInt16(0)&127)..(UInt16(159)&127):((43|1))), var2678, var841, (-113.0), var2229, var1634, var445, var1849, ((UInt16(63)&127)..(UInt16(43)&127):(43|1)))), var1681, var1735, var1681, var1735, Option<(Range<UInt16>, Unit, (Int64, Int16, Unit, Int64, Range<UInt64>, Unit), Float64, Unit, Range<Int16>, Rune, UInt32, Range<UInt16>)>.Some(var1686)];
            var2648
        
        case _ => 
            var971;
            Option<Option<Unit>>.Some(Option<Unit>.Some(()));
            [43, (-104), var335, var458, var335, var331, (-39), var335, var1781, var458]
        
    } } else { ([16, 27, (-87), (-118), (-53), (-45), 48, (-39), 124, 22], var2648, var231)[0] } ) } else { match (if (true) { (var919, 19.0, """
ynAPj
ox~Cq
""", ((Int32(36)&127)..=(Int32(42)&127):(26|1)), var538) } else { var2728 } ) {
        case (_ : Option<(Int64, Int16, Unit, Int64, Range<UInt64>, Unit)>,_,caseVar2742,_ : (UInt64, Float64, String, Range<Int32>, Range<Int8>),caseVar2743 : Class468) => 
            var628 >>= ((var628) & 7);
            var2750 += UInt16(41);
            var2648
        
        case (caseVar2758 : Option<Bool>,caseVar2759,_,caseVar2760 : Int16,caseVar2761 : Interface473) => 
            var2581;
            ();
            [var335, var458, var458, var458, var335, var1583, var1781, var1583, 105, (-91)]
        
        case _ => 
            [94, (-111), (-117), (-8), (-73), (-67), 96, 92, 104, (-69)]
        
    } } 
}

public func func8(optionalParam9 ! : Int64 = (-32), optionalParam11 ! : UInt64 = UInt64(Int32(UInt32(UInt16(253)))), optionalParam16 ! : UInt32 = UInt32(55), optionalParam18 ! : Bool = true) : Int64 { // block id: 20
    match ([(), (), (), (), (), (), (), (), (), ()][0]) {
        case caseVar36 => 
            var39;
            71.0;
            var53 == Float32(32.0)
        
        case _ => 
            optionalParam18
        
        case () => 
            var66 *= UInt32(211);
            Float32(-76.0) != Float32(-66.0)
        
        case _ => 
            false
        
    };
    ((Int16(-86)&127)..=(Int16(-89)&127):((-8)|1));
    Int64((((Int32(-29)&127)..=(Int32(79)&127):((-27)|1))|>func83)[0])
}

main(): Int64 {
    try {
        func8(optionalParam18 : (var193 ?? var1334))
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var335*var335), 64)
        crccheck.updateBuffer(UInt64(var491*var491), 64)
        crccheck.updateBuffer(UInt64(var730*var730), 64)
        crccheck.updateBuffer(UInt64(var814*var814), 64)
        crccheck.updateBuffer(UInt64(var1583*var1583), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Class468 {

}
// ASSERT: scan sema_unreachable_pattern
// ASSERT: scan chir_typecast_overflow
// ASSERT: scan chir_dce_unused_variable
// ASSERT: scan chir_dce_unused_expression
// ASSERT: scan chir_dce_unused_function
// ASSERT: scan chir_dce_unused_operator


