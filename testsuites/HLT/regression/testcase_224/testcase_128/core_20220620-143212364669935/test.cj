/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output


public let var43 : Unit = ()
public let var94 : Class51 = Class51()
public var var117 : Array<Float64> = [(-95.0), (-104.0), (-98.0), (-111.0), 102.0, 20.0, (-117.0), 6.0, 62.0, 49.0]
var var240 : UInt64 = UInt64(UInt64(UInt64(218)))
public var var309 : UInt32 = UInt32(UInt16(202))
public let var314 : Unit = ()
public var var326 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
public var var331 : UInt16 = UInt16(Int8(Int8(-124)))
public let var405 : Int16 = Int16(UInt8(251))
var var420 : ?Bool = Option<Bool>.None
public var var454 : Bool = true
var var459 : Range<Int32> = (Int32(-53)&127..=Int32(-118)&127:43|1)
public let var495 : ?Unit = Option<Unit>.None
public var var566 : Float32 = Float32(Float32(Float32(16.0)))
public let var683 : UInt8 = UInt8(UInt8(UInt8(251)))
public var var745 : Int32 = Int32(-48)
let var783 : Int64 = Int64(39)
let var835 : (UInt32, Array<Unit>, Array<Unit>, Range<UInt16>, Float64, String) = (UInt32(UInt16(UInt8(Int8(-103)))), [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], (UInt16(12)&127..UInt16(127)&127:21|1), Float64(Float32(Float32(Float32(122.0)))), """
m+kE6
.<KE.
""")
let var937 : ?Int64 = (UInt16(Int8(22)) as Int64)
var var945 : (String, Array<Bool>, Range<UInt16>, Float64, Int64) = ("T`^w$FGt#x", [false, true, true, true, true, true, true, true, true, true], (UInt16(89)&127..UInt16(UInt16(Int8(31)))&127:(64|1)), Float64(Float64(Float32(Float32(-39.0)))), (-106))
public let var1031 : (Option<Range<UInt8>>, UInt64, Range<Int16>, Array<UInt8>) = (Option<Range<UInt8>>.None, UInt64(14), (Int16(110)&127..=Int16(5)&127:((-100)|1)), [UInt8(85), UInt8(Int8(107)), UInt8(UInt8(UInt8(124))), UInt8(163), UInt8(UInt8(172)), UInt8(Int8(Int8(-6))), UInt8(4), UInt8(35), UInt8(UInt8(UInt8(230))), UInt8(UInt8(249))])
public var var1063 : Range<Int16> = (Int16(5)&127..=Int16(-6)&127:(Int64(Int16(44))|1))
let var1134 : Range<Int16> = (Int16(22)&127..=Int16(-72)&127:(-107)|1)
public var var1286 : Unit = ()
var var1375 : ?(UInt32, Array<Unit>, Array<Unit>, Range<UInt16>, Float64, String) = Option<(UInt32, Array<Unit>, Array<Unit>, Range<UInt16>, Float64, String)>.None
public let var1383 : String = """
k&LU'
Afal<
"""
public var var1637 : Aggregate994 = Aggregate994()
public var var1646 : ?Range<UInt32> = Option<Range<UInt32>>.None
public let var1725 : UInt8 = UInt8(148)
public var var1845 : Array<Bool> = [false, true, true, false, true, false, true, true, false, true]
public var var1961 : Option<Array<Unit>> = (Class51() as Array<Unit>)
public let var1999 : Option<Range<UInt16>> = ([(Class51() is UInt32), ((Int8(12)&127..Int8(41)&127:(-115)|1) is UInt16), true, false, true, true, (Option<Int16>.None is (UInt16) -> Unit), ('2' is (UInt32, Array<Unit>, Array<Unit>, Range<UInt16>, Float64, String)), (Option<Array<UInt8>>.None is Int16), true] as Range<UInt16>)
public var var2178 : Int64 = Int64(UInt64(Int8(35)))
public let var2188 : Array<UInt8> = [UInt8(102), UInt8(Int8(89)), UInt8(161), UInt8(118), UInt8(44), UInt8(Int8(Int8(91))), UInt8(129), UInt8(222), UInt8(Int8(Int8(Int8(-82)))), UInt8(247)]
public var var2222 : Bool = false
public let var2246 : (Unit, String, Array<UInt8>, Int8, Array<Bool>) = ((), "uTNRFYV${var1383}5bk", [UInt8(Int8(-60)), UInt8(88), UInt8(Int8(69)), UInt8(242), UInt8(160), UInt8(75), UInt8(236), UInt8(UInt8(Int8(-23))), UInt8(UInt8(19)), UInt8(Int8(50))], Int8(Int8(Int8(-14))), [false, false, true, true, false, true, false, false, false, true])
let var2313 : UInt64 = UInt64(Int8(90))
var var2328 : Float64 = Float64(Float64(Float64(Float64(Float32(8.0)))))

public open class Class51 <: Resource {
    public init() { // block id: 53

    }
;
    public var var58 : UInt32 = UInt32(15);
    public var var131 : Int64 = 11;
    static var var145 : Rune = 'W';
    public var var259 : Bool = false;
    public let var507 : Bool = false;
    let var589 : Unit = ();
    public static let var734 : ?Array<UInt8> = Option<Array<UInt8>>.None;
    public var var1176 : (Range<UInt16>, UInt64, UInt8, Range<UInt32>, UInt8) = ((UInt16(249)&127..UInt16(250)&127:101|1), UInt64(176), UInt8(118), (UInt32(208)&127..UInt32(55)&127:(-5)|1), UInt8(216));
    static var var1662 : Bool = true
    public func isClosed(): Bool { return false }
    public func close(): Unit {}
}

func func103(param104 : UInt8) : Float64 { // block id: 105
    var117[7]
}



public func func292(param293 : (Array<UInt8>, Range<UInt16>, Range<Int16>, UInt8, Range<UInt8>, Int16, Range<UInt16>, Int16)) : Bool { // block id: 294
    let var305 : ?(UInt32, Array<Unit>, Array<Unit>, Range<UInt16>, Float64, String) = Option<(UInt32, Array<Unit>, Array<Unit>, Range<UInt16>, Float64, String)>.None;
    var var336 : Int64 = Int64(Int64(Int32(112)));
    var var341 : Float64 = Float64(Float32(110.0));
    (var305 ?? (var309, [var314, var314, (), (), var314, var314, var314, (), (), var314], var326, (UInt16(222)&127..var331&127:(var336|1)), var341, """
bu\"L:
In<N\"
"""))[1][4];
    var var358 : Range<Int32> = (Int32(106)&127..Int32(98)&127:96|1);
    let var389 : Range<UInt16> = (UInt16(33)&127..=UInt16(171)&127:((-38)|1));
    try { // block id: 348
        match (Option<Int16>.None) {
            case caseVar353 => 
                if (false) { var358 } else { var358 } 
            
            case _ => 
                (Int32(-21)&127..=Int32(55)&127:(-124)|1)
            
            case _ => 
                UInt64(95) >> ((UInt64(204)) & 7);
                ();
                (Int32(4)&127..=Int32(-40)&127:30|1)
            
        };
        false
    } catch (e: Exception) { // block id: 373
        var var376 : Bool = false;
        var loopTimeVar381 : Int64 = 0;
        do {
            loopTimeVar381++;
            ()
        } while ((var376) && loopTimeVar381 < 100 ) ;
        if (true) { (var331&127..var331&127:(var336|1)) } else { var389 } ;
        (Option<Bool>.None ?? var376)
    } finally { // block id: 397
        match {
            case false => 
            ();
            true
            case _ => 
            var405;
            var var409 : Bool = false;
            var409
        }
    }
}

public func func412(param413 : Array<Unit>) : Bool { // block id: 414
    var314;
    (try { // block id: 418
        var420
    } finally { // block id: 422
        let var425 : (UInt32, Array<Unit>, Array<Unit>, Range<UInt16>, Float64, String) = (UInt32(160), [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], (UInt16(Int8(Int8(-82)))&127..=UInt16(UInt16(191))&127:(Int64(Int32(36))|1)), Float64(Float32(Float32(Float32(-49.0)))), "fs_hoW6<J,");
        Option<(UInt32, Array<Unit>, Array<Unit>, Range<UInt16>, Float64, String)>.Some(var425);
        (UInt16(224)&127..=UInt16(239)&127:(124|1));
        let var449 : Bool = false;
        if (var449) { Option<Bool>.None } else { Option<Bool>.Some(var454) } 
    } ?? try { // block id: 457
        var459;
        var314;
        var454 && var454
    } finally { // block id: 465
        (UInt32(51)&127..var309&127:((-95)|1));
        true
    })
}

public func func482(param483 : Range<UInt8>) : Unit { // block id: 484

}


public func func499(param500 : Array<UInt8>) : Unit { // block id: 501
    var var511 : (UInt32, UInt32) = (UInt32(Int8(-9)), UInt32(Int8(Int8(82))));
    var var527 : (Array<UInt8>, Range<UInt16>, Range<Int16>, UInt8, Range<UInt8>, Int16, Range<UInt16>, Int16) = ([UInt8(127), UInt8(140), UInt8(UInt8(UInt8(0))), UInt8(UInt8(Int8(-97))), UInt8(33), UInt8(UInt8(226)), UInt8(157), UInt8(UInt8(UInt8(125))), UInt8(Int8(-29)), UInt8(Int8(UInt8(247)))], (UInt16(252)&127..UInt16(131)&127:(-55)|1), (Int16(68)&127..=Int16(7)&127:41|1), UInt8(Int8(-10)), (UInt8(16)&127..=UInt8(203)&127:(-100)|1), Int16(90), (UInt16(UInt8(Int8(-18)))&127..UInt16(236)&127:(24|1)), Int16(39));
    let var582 : Int64 = Int64(Int8(-38));
    UInt64(if (var94.var507) { // block id: 509
        var511;
        var var520 : Int8 = Int8(UInt8(127));
        var520 = Int8(-58);
        Int8(24)
    } else if (func292(var527)) { // block id: 563
        var566 -= Float32(-100.0);
        var var573 : UInt8 = UInt8(178);
        var573 &= var573;
        Int8(-92)
    } else { // block id: 577
        (UInt64(179)&127..=var240&127:(var582|1));
        Int8(-112)
    });
    var94.var589
}

public func func597(param598 : Range<UInt8>) : Array<UInt8> { // block id: 599
    var var688 : UInt8 = UInt8(68);
    match (match (var420) {
            case _ => 
                var309 <<= ((var309) & 7);
                var var612 : UInt64 = UInt64(183);
                var612 <<= ((UInt64(165)) & 7);
                var420
            
        }) {
        case _ => 
            var314;
            var240 *= UInt64(179);
            let var631 : (Array<UInt8>, Range<UInt16>, Range<Int16>, UInt8, Range<UInt8>, Int16, Range<UInt16>, Int16) = ([UInt8(Int8(Int8(-4))), UInt8(174), UInt8(UInt8(113)), UInt8(UInt8(60)), UInt8(72), UInt8(154), UInt8(UInt8(UInt8(124))), UInt8(242), UInt8(UInt8(Int8(-41))), UInt8(104)], (UInt16(120)&127..=UInt16(Int16(UInt8(30)))&127:(26|1)), (Int16(-82)&127..=Int16(32)&127:(10|1)), UInt8(188), (UInt8(137)&127..UInt8(221)&127:(-110)|1), Int16(Int8(-24)), (UInt16(Int16(118))&127..UInt16(163)&127:(Int64(Int16(UInt16(212)))|1)), Int16(UInt16(Int16(55))));
            if (false) { (UInt64(8), (UInt8(104)&127..UInt8(16)&127:(-24)|1), [UInt8(54), UInt8(197), UInt8(164), UInt8(161), UInt8(126), UInt8(184), UInt8(164), UInt8(197), UInt8(163), UInt8(233)], (), var331, var631, Float32(-111.0)) } else { (UInt64(62), param598, [UInt8(226), var683, var688, var688, var688, var688, var688, UInt8(117), var683, UInt8(242)], (), var331, var631, Float32(42.0)) } 
        
    }[3];
    [UInt8(100), UInt8(252), UInt8(193), UInt8(143), UInt8(233), UInt8(88), UInt8(129), UInt8(126), UInt8(124), UInt8(99)]
}



func func486(param487 : UInt32) : Unit { // block id: 488
    var var592 : (Array<UInt8>) -> Unit = { lambdaParameter595 : Array<UInt8> =>  };
    var var714 : Int64 = Int64(UInt16(UInt8(208)));
    (var495 ?? ((Option<Range<UInt8>>.Some((UInt8(74)&127..=UInt8(98)&127:(var714|1))) ?? (UInt8(117)&127..UInt8(253)&127:126|1))|>(func597~>var592)));
    Class51.func722()
}

func func738(param739 : UInt16) : Unit { // block id: 740
    var var755 : Range<UInt8> = (UInt8(27)&127..=UInt8(Int8(55))&127:((-40)|1));
    var var799 : UInt8 = UInt8(Int8(UInt8(110)));
    match (((var745&127..=var745&127:((-103)|1)) as Unit)) {
        case _ : Range<UInt16> => 
            (UInt64(124)&127..=UInt64(173)&127:104|1);
            ();
            var755
        
        case caseVar763 => 
            if (true) { (var683&127..=UInt8(192)&127:((-94)|1)) } else { (UInt8(150)&127..UInt8(68)&127:39|1) } 
        
        case caseVar774 => 
            ();
            if (true) { (var683&127..=var683&127:(var783|1)) } else { var755 } 
        
        case caseVar789 => 
            (var683&127..var683&127:((-66)|1))
        
        case _ => 
            (var799&127..UInt8(173)&127:(var783|1))
        
    };
    var var807 : Array<UInt8> = Array<UInt8>(10){ i => UInt8(149) };
    func499(var807)
}


public struct Aggregate994 {
    public init() { // block id: 996

    }
;
    var var1001 : (String, Array<Bool>, Range<UInt16>, Float64, Int64) = ("""
p<NNO
vba{pD
""", [true, true, false, false, false, false, false, false, true, false], (UInt16(238)&127..=UInt16(134)&127:14|1), 82.0, 17);
    static let var1781 : (Array<UInt8>, Range<UInt16>, Range<Int16>, UInt8, Range<UInt8>, Int16, Range<UInt16>, Int16) = ([UInt8(224), UInt8(2), UInt8(156), UInt8(136), UInt8(111), UInt8(127), UInt8(163), UInt8(219), UInt8(237), UInt8(227)], (UInt16(52)&127..=UInt16(136)&127:(-64)|1), (Int16(-40)&127..Int16(-67)&127:38|1), UInt8(79), (UInt8(62)&127..=UInt8(184)&127:68|1), Int16(-99), (UInt16(35)&127..=UInt16(59)&127:113|1), Int16(-118))
}


func func828(param829 : UInt32) : UInt16 { // block id: 830
    let var867 : UInt32 = UInt32(163);
    let var879 : Bool = ('i' is Option<Bool>);
    let var1020 : (Array<Unit>) -> Bool = func412;
    func func1023() : Range<UInt16> { // block id: 1024
        var var1070 : Array<UInt8> = [UInt8(185), UInt8(199), UInt8(156), UInt8(107), UInt8(UInt8(Int8(Int8(25)))), UInt8(227), UInt8(UInt8(UInt8(Int8(63)))), UInt8(216), UInt8(186), UInt8(128)];
        (if (false) { var1031 } else { (Option<Range<UInt8>>.None, UInt64(110), var1063, var1070) } [0] as Array<UInt8>);
        let var1105 : Range<UInt16> = (UInt16(213)&127..=UInt16(165)&127:126|1);
        var var1137 : (Option<Range<UInt16>>, (UInt32, UInt32), Int32) = (Option<Range<UInt16>>.None, (UInt32(Int32(-55)), UInt32(Int16(Int16(-107)))), Int32(UInt16(Int8(Int8(-18)))));
        var var1155 : Option<Range<UInt16>> = (Class51() as Range<UInt16>);
        (match (Option<Array<UInt8>>.None) {
            case caseVar1100 : Aggregate994 => 
                let var1109 : UInt32 = UInt32(166);
                (Option<Range<UInt16>>.Some(var1105), (var1109, UInt32(112)), var745)
            
            case _ : Array<Unit> => 
                if (false) { (Option<Range<UInt16>>.None, (UInt32(190), UInt32(77)), var745) } else { (Option<Range<UInt16>>.Some(var1105), (UInt32(135), var309), Int32(122)) } 
            
            case _ => 
                var1134;
                var1137
            
        }[0] ?? match (if (var454) { var1155 } else { Option<Range<UInt16>>.None } ) {
            case _ : Float32 => 
                Aggregate994();
                (UInt16(111)&127..UInt16(91)&127:89|1)
            
            case _ => 
                (UInt16(102)&127..=UInt16(202)&127:(-9)|1)
            
        })
    }
;
    var loopTimeVar1169 : Int64 = 0;
    do {
        loopTimeVar1169++;
        let var886 : Bool = false;
        func func852(param853 : UInt16) : Range<UInt16> { // block id: 854
            var var890 : Bool = (Option<Range<UInt8>>.None is Option<Unit>);
            var745 = match {
                case if (var454) { // block id: 860
                var454
            } else { // block id: 862
                ();
                UInt32(151) <= var867
            } => 
                var314;
                [(), (), (), (), (), (), (), (), (), ()];
                var745 - var745
                case [var879, false, var454, var454, var886, var886, var890, var879, var454, false][6] => 
                var var899 : ?Array<UInt8> = Option<Array<UInt8>>.Some([UInt8(Int8(Int8(12))), UInt8(Int8(-44)), UInt8(118), UInt8(205), UInt8(Int8(-16)), UInt8(Int8(84)), UInt8(Int8(-98)), UInt8(UInt8(Int8(-77))), UInt8(Int8(63)), UInt8(63)]);
                var899;
                Int16(-50) | Int16(-93);
                var745
                case _ => 
                ();
                Option<Int16>.None;
                Int32(59)
            };
            ((var937 ?? 9) % ((var945[4]) | 1)) ^ (Class51.func964(namedParam965 : var1020));
            func1023()
        }
;
        func852(UInt16(130))
    } while ((func412(var835[1])) && loopTimeVar1169 < 100 ) ;
    UInt16(var94.var1176[4])
}

public func func1187(param1188 : Range<UInt8>) : UInt32 { // block id: 1189
    let var1234 : (Range<UInt16>, UInt64, UInt8, Range<UInt32>, UInt8) = ((UInt16(210)&127..=UInt16(194)&127:(Int64(Int32(76))|1)), UInt64(212), UInt8(Int8(-40)), (UInt32(Int8(Int8(26)))&127..=UInt32(UInt32(Int8(41)))&127:(104|1)), UInt8(194));
    var var1257 : Rune = '1';
    let var1268 : Range<UInt32> = (UInt32(6)&127..=UInt32(206)&127:103|1);
    try { // block id: 1193
        ();
        var var1196 : (UInt16, UInt16, Rune, Int16, UInt32, UInt32, Range<UInt8>, (Range<UInt16>, UInt64, UInt8, Range<UInt32>, UInt8)) = (UInt16(16), UInt16(Int16(Int8(-60))), 'L', Int16(41), UInt32(UInt8(245)), UInt32(55), (UInt8(10)&127..UInt8(UInt8(Int8(-2)))&127:(Int64(Int16(Int8(-117)))|1)), ((UInt16(46)&127..=UInt16(235)&127:(-17)|1), UInt64(4), UInt8(254), (UInt32(118)&127..=UInt32(57)&127:(-80)|1), UInt8(245)));
        var1196
    } catch (_) { // block id: 1221
        var314;
        if (true) { (var331, var331, 'D', var405, UInt32(243), UInt32(190), (UInt8(224)&127..UInt8(204)&127:(-20)|1), var1234) } else { (var331, UInt16(201), var1257, Int16(94), var309, UInt32(238), param1188, ((UInt16(123)&127..UInt16(171)&127:(-112)|1), var240, var683, var1268, UInt8(195))) } 
    }[4]
}

public func func103(param1279 : (UInt32) -> Unit, namedParam1282 ! : Aggregate994, namedParam1283 ! : Range<UInt32>) : Range<UInt8> { // block id: 1284
    var1286;
    let var1316 : (Unit, String, Array<UInt8>, Int8, Array<Bool>) = ((), ###"Jb<nO;e(Za{"###, [UInt8(182), UInt8(95), UInt8(UInt8(215)), UInt8(Int8(0)), UInt8(72), UInt8(Int8(-82)), UInt8(6), UInt8(224), UInt8(Int8(Int8(-86))), UInt8(248)], Int8(Int8(UInt8(Int8(36)))), [(UInt8(Int8(-110)) is Array<Unit>), (((UInt16(140)&127..=UInt16(28)&127:((-28)|1)), UInt64(62), UInt8(73), (UInt32(174)&127..=UInt32(84)&127:(59|1)), UInt8(25)) is () -> Range<UInt16>), false, true, ((Int32(-12)&127..Int32(-104)&127:(120|1)) is Int16), (Option<Int64>.Some(7) is (Option<Range<UInt8>>, UInt64, Range<Int16>, Array<UInt8>)), false, ((UInt16(73)&127..=UInt16(104)&127:(-97)|1) is Int8), true, true]);
    let var1386 : Array<UInt8> = [UInt8(UInt8(UInt8(46))), UInt8(Int8(9)), UInt8(Int8(Int8(49))), UInt8(UInt8(225)), UInt8(68), UInt8(86), UInt8(UInt8(251)), UInt8(210), UInt8(149), UInt8(76)];
    try { // block id: 1291
        var314;
        let var1296 : String = """
G\"ZCJ
?UEcy
""";
        var var1300 : Int8 = Int8(UInt8(31));
        ((), var1296, [UInt8(18), UInt8(62), UInt8(128), UInt8(96), UInt8(10), UInt8(211), UInt8(185), UInt8(187), UInt8(87), UInt8(73)], var1300, [false, true, false, var454, false, true, true, false, var454, true])
    } catch (_) { // block id: 1314
        var1316
    } finally { // block id: 1372
        ();
        var1375;
        let var1406 : Int8 = Int8(UInt8(UInt8(Int8(Int8(-84)))));
        if (true) { var1316 } else { (var1286, var1383, var1386, var1406, [false, true, true, true, false, true, true, false, false, true]) } 
    }[0];
    let var1468 : ?Int16 = ((((UInt64(240)&127..=UInt64(246)&127:(83|1)) as Array<UInt8>) as (UInt32, Array<Unit>, Array<Unit>, Range<UInt16>, Float64, String)) as Int16);
    let var1489 : (UInt16, UInt16, Rune, Int16, UInt32, UInt32, Range<UInt8>, (Range<UInt16>, UInt64, UInt8, Range<UInt32>, UInt8)) = (UInt16(54), UInt16(3), 'g', Int16(UInt16(53)), UInt32(UInt16(154)), UInt32(61), (UInt8(117)&127..UInt8(0)&127:104|1), ((UInt16(116)&127..UInt16(80)&127:((-55)|1)), UInt64(UInt8(137)), UInt8(Int8(UInt8(61))), (UInt32(UInt16(48))&127..=UInt32(13)&127:(9|1)), UInt8(UInt8(UInt8(4)))));
    let var1563 : UInt8 = UInt8(Int8(Int8(96)));
    let var1573 : Rune = 'Y';
    let var1588 : (Range<UInt16>, UInt64, UInt8, Range<UInt32>, UInt8) = ((UInt16(182)&127..=UInt16(79)&127:(-95)|1), UInt64(Int32(UInt32(Int8(43)))), UInt8(20), (UInt32(135)&127..=UInt32(UInt16(Int16(-92)))&127:((-63)|1)), UInt8(68));
    try { // block id: 1415
        let var1417 : Range<UInt8> = (UInt8(21)&127..UInt8(51)&127:(-87)|1);
        var1417
    } catch (e: Exception) { // block id: 1419
        func func1421(param1422 : Range<Int16>, optionalParam1423 ! : Option<Unit> = (((UInt16(114), UInt16(Int16(57)), 'c', Int16(-8), UInt32(Int32(-128)), UInt32(UInt16(234)), (UInt8(188)&127..=UInt8(64)&127:14|1), ((UInt16(19)&127..UInt16(22)&127:(112|1)), UInt64(80), UInt8(41), (UInt32(46)&127..UInt32(209)&127:(68|1)), UInt8(125))) as (UInt32, Array<Unit>, Array<Unit>, Range<UInt16>, Float64, String)) as Unit), namedParam1449 ! : (Range<UInt16>, UInt64, UInt8, Range<UInt32>, UInt8), optionalParam1450 ! : (UInt32) -> Unit = { lambdaParameter1453 : UInt32 =>  }) : Range<UInt8> { // block id: 1457
            var var1520 : Array<Option<Int16>> = Array<Option<Int16>>(10){ i => Option<Int16>.None };
            if (var454) { ([Option<Int16>.None, var1468, Option<Int16>.None, var1468, Option<Int16>.Some(Int16(43)), var1468, Option<Int16>.Some(Int16(-20)), var1468, Option<Int16>.None, Option<Int16>.None], (109&127..(-128)&127:(-67)|1), (UInt8(119)&127..UInt8(149)&127:(-101)|1), var1489) } else { (var1520, (var783&127..=61&127:(77|1)), (var1563&127..=UInt8(66)&127:(76|1)), (var331, UInt16(59), var1573, var405, UInt32(95), UInt32(229), (var683&127..=UInt8(244)&127:(var783|1)), namedParam1449)) } [0][9];
            (UInt8(147)&127..UInt8(99)&127:(-70)|1)
        }
;
        func1421(var1063, namedParam1449 : var1588, optionalParam1450 : func486)
    } finally { // block id: 1604
        Option<Int64>.Some(var783);
        let var1615 : (UInt32, UInt32) = (UInt32(21), UInt32(8));
        match {
            case true => 
            var var1611 : Unit = ();
            var1611;
            var783;
            var1615
            case _ => 
            ();
            (UInt32(10), var309)
        };
        (UInt8(116)&127..UInt8(12)&127:((-83)|1))
    }
}


public enum Enum1665 {
    defaultValue
}


func func478(param479 : UInt8) : Array<Unit> { // block id: 480
    var var1185 : (UInt32) -> UInt16 = func828;
    var var1629 : (UInt32) -> Unit = { lambdaParameter1632 : UInt32 =>  };
    func103(var1629, namedParam1282 : if (true) { var1637 } else { var1637 } , namedParam1283 : (var1646 ?? (var309&127..=UInt32(55)&127:((-60)|1))))|>({ lambdaParameter1274 : Range<UInt8> => var309 }~>(var1185~>func738));
    var var1668 : Enum1665 = Enum1665.defaultValue;
    var var1674 : Array<UInt8> = Array<UInt8>(10){ i => UInt8(227) };
    let var1721 : UInt8 = UInt8(72);
    let var1750 : Range<Int64> = (101&127..=(-50)&127:(Int64(Int8(-53))|1));
    var loopTimeVar1769 : Int64 = 0;
    let var1775 : Array<Bool> = [false, false, false, true, false, true, true, false, false, false];
    let var1802 : (Array<UInt8>, Range<UInt16>, Range<Int16>, UInt8, Range<UInt8>, Int16, Range<UInt16>, Int16) = ([UInt8(21), UInt8(Int8(88)), UInt8(UInt8(11)), UInt8(168), UInt8(Int8(66)), UInt8(33), UInt8(UInt8(204)), UInt8(UInt8(91)), UInt8(4), UInt8(212)], (UInt16(35)&127..UInt16(227)&127:(-49)|1), (Int16(Int16(125))&127..=Int16(Int8(126))&127:(Int64(Int16(UInt16(37)))|1)), UInt8(Int8(UInt8(136))), (UInt8(113)&127..=UInt8(35)&127:(-65)|1), Int16(Int16(UInt16(UInt16(216)))), (UInt16(154)&127..=UInt16(153)&127:((-18)|1)), Int16(27));
    var var1852 : Bool = ('x' is Option<Range<UInt32>>);
    let var1858 : Range<Int8> = (Int8(79)&127..=Int8(32)&127:(-99)|1);
    (-(var240 + var240), (UInt8(247)&127..UInt8(184)&127:68|1), if ((Class51.var1662)) { match (var1668) {
        case defaultValue => 
            var1674
        
        case _ => 
            var1674
        
        case _ => 
            var240 &= var240;
            var309++;
            [UInt8(189), UInt8(36), UInt8(143), UInt8(42), UInt8(220), UInt8(1), UInt8(48), UInt8(207), UInt8(73), UInt8(227)]
        
    } } else { try { // block id: 1708
        Option<Int16>.Some(Int16(34));
        var331;
        if (var454) { [UInt8(163), UInt8(82), UInt8(8), UInt8(32), UInt8(49), var1721, UInt8(153), var1725, var1721, UInt8(125)] } else { [var683, UInt8(180), var1721, UInt8(181), UInt8(237), var1725, UInt8(225), UInt8(132), UInt8(40), var683] } 
    } catch (_) { // block id: 1740
        var1286;
        var1674
    } finally { // block id: 1743
        var1286;
        [UInt8(55), UInt8(53), UInt8(180), UInt8(17), UInt8(143), UInt8(171), UInt8(124), UInt8(141), UInt8(228), UInt8(10)]
    } } , do {
        loopTimeVar1769++;
        Aggregate994()
    } while ((try { // block id: 1748
        var1750;
        var454
    } catch (_) { // block id: 1757
        var var1759 : Unit = ();
        var1759;
        ();
        true
    } finally { // block id: 1763
        ();
        true
    }) && loopTimeVar1769 < 100 ) , var331, if (var1775[1]) { (Aggregate994.var1781) } else { var1802 } , match {
        case var1845[6] => 
        var454 &&= var1852;
        var566
        case _ => 
        var1858;
        if (var454) { var1668 } else { var1668 } ;
        var566
    });
    let var1922 : ?Int16 = Option<Int16>.None;
    let var1926 : Option<Option<Int16>> = Option<Option<Int16>>.None;
    func func1866(optionalParam1867 ! : (Array<UInt8>, Range<UInt16>, Range<Int16>, UInt8, Range<UInt8>, Int16, Range<UInt16>, Int16) = ([UInt8(UInt8(252)), UInt8(176), UInt8(UInt8(173)), UInt8(120), UInt8(199), UInt8(Int8(Int8(114))), UInt8(139), UInt8(194), UInt8(53), UInt8(1)], (UInt16(Int16(Int16(9)))&127..UInt16(UInt8(169))&127:(99|1)), (Int16(UInt16(Int8(-22)))&127..=Int16(UInt8(Int8(-21)))&127:(108|1)), UInt8(142), (UInt8(Int8(17))&127..=UInt8(UInt8(Int8(-23)))&127:((-68)|1)), Int16(-33), (UInt16(138)&127..UInt16(43)&127:(-126)|1), Int16(-115))) : Array<Unit> { // block id: 1910
        var var1941 : Int8 = Int8(62);
        match ((if (true) { Option<Option<Int16>>.None } else { Option<Option<Int16>>.Some(var1922) }  ?? (var1926 ?? Option<Int16>.Some(var405)))) {
            case _ => 
                Int16(-100);
                ();
                var1845
            
            case _ => 
                (Int8(-115)&127..var1941&127:((-120)|1));
                [var454, var454, false, true, var454, true, var454, true, true, var454]
            
        };
        (var1961 ?? [(), (), (), (), (), (), (), (), (), ()])
    }
;
    func1866()
}

public func func472(param473 : (Array<UInt8>, Range<UInt16>, Range<Int16>, UInt8, Range<UInt8>, Int16, Range<UInt16>, Int16)) : Array<Unit> { // block id: 474
    ();
    (var683|>func478)[1];
    [(), (), (), (), (), (), (), (), (), ()]
}


public func func87(optionalParam88 ! : Float32 = Float32(Float32(-81.0))) : UInt64 { // block id: 91
    let var269 : (Array<UInt8>, Range<UInt16>, Range<Int16>, UInt8, Range<UInt8>, Int16, Range<UInt16>, Int16) = ([UInt8(131), UInt8(75), UInt8(194), UInt8(218), UInt8(216), UInt8(120), UInt8(184), UInt8(137), UInt8(232), UInt8(131)], (UInt16(216)&127..UInt16(74)&127:(-30)|1), (Int16(UInt16(55))&127..=Int16(Int8(Int8(-27)))&127:(Int64(Int16(-106))|1)), UInt8(UInt8(245)), (UInt8(55)&127..UInt8(15)&127:13|1), Int16(UInt8(Int8(-24))), (UInt16(201)&127..UInt16(191)&127:(-100)|1), Int16(8));
    func func264() : UInt8 { // block id: 265
        var269[3]
    }
;
    var94.func97(namedParam98 : func264());
    var var1980 : Range<UInt16> = (UInt16(UInt16(Int8(-96)))&127..=UInt16(Int8(21))&127:((-122)|1));
    if ((if (true) { // block id: 1972
        ();
        if (var454) { var269 } else { ([UInt8(207), UInt8(116), UInt8(44), UInt8(3), UInt8(214), UInt8(225), UInt8(181), UInt8(110), UInt8(194), UInt8(72)], var1980, var1134, UInt8(93), (UInt8(81)&127..UInt8(30)&127:126|1), Int16(-54), (var331&127..=var331&127:(var783|1)), Int16(66)) } 
    } else { // block id: 1997
        var1999;
        ([var683, UInt8(136), UInt8(211), UInt8(91), var683, UInt8(106), var1725, var683, var1725, UInt8(125)], (UInt16(207)&127..UInt16(252)&127:((-96)|1)), var1063, UInt8(23), (var1725&127..UInt8(47)&127:(var783|1)), Int16(-88), (UInt16(189)&127..var331&127:(var783|1)), var405)
    }|>(func472~>func412))) { // block id: 2045
        ();
        var var2048 : Float64 = Float64(Float64(Float32(Float32(-89.0))));
        var2048
    } else { // block id: 2053
        var309 /= ((UInt32(123)) | 1);
        var var2063 : Int16 = Int16(Int16(Int8(-59)));
        var loopTimeVar2068 : Range<UInt64> = (UInt64(165)&127..UInt64(210)&127:(100|1));
        for (i in loopTimeVar2068 where false) {
            ();
            var2063 *= Int16(49)
        };
        Float64(Float32(61.0))
    };
    var var2084 : Array<Option<UInt64>> = [Option<UInt64>.Some(UInt64(65)), (Option<Array<UInt8>>.None as UInt64), Option<UInt64>.None, (UInt32(92) as UInt64), Option<UInt64>.None, (Int32(124) as UInt64), Option<UInt64>.None, Option<UInt64>.None, ((Option<Range<UInt8>>.Some((UInt8(204)&127..UInt8(80)&127:(62|1))), UInt64(Int32(-85)), (Int16(-82)&127..=Int16(-108)&127:((-105)|1)), [UInt8(129), UInt8(241), UInt8(244), UInt8(153), UInt8(220), UInt8(76), UInt8(31), UInt8(243), UInt8(160), UInt8(167)]) as UInt64), Option<UInt64>.Some(UInt64(Int64(62)))];
    let var2118 : UInt64 = UInt64(46);
    UInt64((var2084[5] ?? var2118))
}



main(): Int64 {
    try {
        let var18 : Bool = true;
        let var32 : UInt32 = UInt32(Int16(-87));
        let var55 : Class51 = Class51();
        func func7(param8 : UInt64) : UInt32 { // block id: 9
            let var21 : ?Bool = ((-85.0) as Bool);
            if ((if (var18) { var21 } else { Option<Bool>.Some(var18) }  ?? var18)) { // block id: 27
                (var32, var32)[0]
            } else if (var18) { // block id: 38
                if (var18) { // block id: 41
                    var43
                };
                var loopTimeVar49 : Int64 = 0;
                while ((true) && loopTimeVar49 < 100 ) {
                    loopTimeVar49++;

                };
                var55.var58
            } else { // block id: 60
                var var67 : Int16 = Int16(72);
                var var75 : UInt16 = UInt16(178);
                if (true) { // block id: 63
                    ();
                    var67 ^= Int16(23);
                    var32 * var32
                } else { // block id: 73
                    var75;
                    if (var18) { var55 } else { var55 } ;
                    var32 ^ UInt32(94)
                }
            };
            var var2136 : UInt8 = UInt8(26);
            var var2143 : Range<Int64> = ((-42)&127..90&127:122|1);
            try (resource = Class51()) { // block id: 85
                func87(optionalParam88 : var566);
                var loopTimeVar2127 : Int64 = 0;
                do {
                    loopTimeVar2127++;
                    var1286;
                    var1286
                } while ((true) && loopTimeVar2127 < 100 ) ;
                var314
            } catch (_) { // block id: 2129
                try { // block id: 2131
                    var1961;
                    ();
                    var2136 |= UInt8(146)
                } finally { // block id: 2139
                    if (false) { var2143 } else { var2143 } ;
                    var43
                }
            };
            var var2155 : Option<UInt32> = Option<UInt32>.None;
            try { // block id: 2148
                (var2155 ?? UInt32(219))
            } catch (_) { // block id: 2158
                match {
                    case true => 
                    var2143;
                    var1286;
                    var309 << ((UInt32(96)) & 7)
                    case false => 
                    ();
                    UInt32(103)
                    case _ => 
                    var32
                }
            } finally { // block id: 2173
                try { // block id: 2175
                    var2178--;
                    if (var18) { (var43, """
:s=+<
a;CXe
""", var2188, Int8(10), var1845) } else { (var314, "'8?@\\UT)Jq", [UInt8(190), UInt8(105), UInt8(43), UInt8(49), UInt8(21), UInt8(154), UInt8(162), UInt8(88), UInt8(110), UInt8(129)], Int8(-2), [false, false, false, true, true, var18, var18, var2222, var18, true]) } 
                } finally { // block id: 2226
                    if (var2222) { (var1286, "tRF$4V\"`yq", var2188, Int8(83), [var2222, true, var454, false, var18, var454, false, true, var2222, true]) } else { var2246 } 
                };
                [(), (), (), var314, (), (), var1286, (), (), ()][3];
                (Option<UInt32>.None ?? UInt32(111))
            }
        }
;
        func7(match ([(-109.0), (-47.0), 119.0, (-94.0), (-22.0), (-62.0), 118.0, (-91.0), 36.0, (-80.0)]) {
            case _ : Rune => 
                var var2295 : (Option<Range<UInt16>>, (UInt32, UInt32), Int32) = (Option<Range<UInt16>>.Some((UInt16(100)&127..=UInt16(207)&127:86|1)), (UInt32(183), UInt32(Int32(UInt16(184)))), Int32(-95));
                if (var2222) { var2295 } else { var2295 } ;
                if (var18) { Option<Bool>.Some(false) } else { Option<Bool>.None } ;
                var2313 ** (var2313 & 3)
            
            case _ => 
                UInt64(100)
            
            case _ => 
                var331 + UInt16(230);
                var2328 = var2328;
                UInt64(162)
            
        });
        Int64((Option<UInt16>.None ?? UInt16(57)))
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var32*var32), 64)
        crccheck.updateBuffer(UInt64(var2313*var2313), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Class51 {
    static func func722() : Unit { // block id: 723
        var314;
        (var495 ?? func499((var734 ?? [UInt8(168), UInt8(203), UInt8(227), UInt8(129), UInt8(151), UInt8(136), UInt8(209), UInt8(98), UInt8(143), UInt8(174)])))
    }
;
    static func func964(namedParam965 ! : (Array<Unit>) -> Bool, optionalParam968 ! : String = "DfX<WM;$p8") : Int64 { // block id: 970
        let var998 : Aggregate994 = Aggregate994();
        if (false) { // block id: 974
            [(), (), (), (), (), (), (), (), (), ()];
            var314;
            21 << ((104) & 7)
        } else if (var783 == 101) { // block id: 983
            Int8(-80) & Int8(117);
            (-78)
        } else { // block id: 988
            (-105) ^ 65
        } % ((var998.var1001[4]) | 1)
    }
;
    func func97(namedParam98 ! : UInt8, optionalParam99 ! : Int16 = Int16(-119)) : Int16 { // block id: 101
        let var136 : Unit = ();
        let var168 : Float64 = Float64(Float32(-103.0));
        let var185 : UInt32 = UInt32(UInt16(246));
        [namedParam98, UInt8(147), namedParam98, UInt8(225), UInt8(192), namedParam98, UInt8(198), UInt8(89), UInt8(229), UInt8(159)][8]|>{ lambdaParameter122 : UInt8 => let var192 : (UInt32, UInt32) = (UInt32(88), UInt32(Int16(-33))); let var207 : String = ###"\\K<_ByxDt_"###; match (try { // block id: 126
                (namedParam98&127..UInt8(109)&127:(var131|1))
            } catch (e: Exception) { // block id: 133
                ();
                var136;
                (lambdaParameter122&127..namedParam98&127:((-7)|1))
            } finally { // block id: 142
                var145 = 'P';
                (UInt8(189)&127..UInt8(18)&127:(var131|1))
            }) {
            case _ : Range<UInt8> => 
                ();
                var136;
                var var158 : Float64 = Float64(Float64((-52.0)));
                var158
            
            case caseVar164 => 
                ();
                var168
            
            case _ => 
                Int32(60);
                (-115.0) ** Float64(Int32((-85.0)) & 3)
            
            case caseVar180 => 
                (UInt32(86)&127..var185&127:(19|1));
                if (true) { var192 } else { var192 } ;
                var168
            
            case _ => 
                var var203 : Bool = (Int16(63) is Class51);
                if (var203) { var207 } else { "}q;Gq5I 'o" } ;
                optionalParam99;
                (-58.0)
            
        } };
        func func245(optionalParam246 ! : Unit = ()) : Int16 { // block id: 248
            Int16(try { // block id: 251
                Int16(-89)
            } catch (e: Exception) { // block id: 253
                let var255 : Unit = ();
                var255;
                var259 ||= var259;
                optionalParam99
            })
        }
;
        try { // block id: 227
            var var234 : ?Int16 = Option<Int16>.Some(Int16(56));
            (var234 ?? optionalParam99)
        } finally { // block id: 238
            var240;
            func245()
        }
    }

}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_expected_catch_or_finally_in_try
// ASSERT: scan parse_unexpected_declaration_in_scope
// ASSERT: scan parse_expected_expr_or_decl_in


