/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output


public let var35 : Enum8 = Enum8.defaultValue
public let var43 : Unit = ()
public var var53 : Bool = false
public let var106 : Enum103<Bool> = Enum103<Bool>.defaultValue
public var var179 : Bool = false
public var var208 : Class203 = Class203()
public var var252 : Int64 = Int64(40)
public var var281 : Bool = ((UInt64(44)&127..=UInt64(UInt8(UInt8(146)))&127:((-61)|1)) is Class203)
public let var462 : UInt32 = UInt32(233)
public var var484 : Range<UInt16> = (UInt16(173)&127..UInt16(UInt16(Int8(86)))&127:(120|1))
public var var495 : Int8 = Int8(38)
public let var566 : Int8 = Int8(Int8(-78))
public var var578 : Rune = 'I'
public let var686 : UInt16 = UInt16(91)
public let var753 : String = "^,nQ7H(lQ$"
let var759 : ((Range<UInt8>, UInt64, Unit, Range<Int32>, Range<UInt32>), Array<Unit>, Float64, Range<Int16>, Bool, Int64, Array<Bool>, String, Unit) = (((UInt8(196)&127..UInt8(85)&127:126|1), UInt64(UInt16(167)), (), (Int32(UInt16(234))&127..Int32(16)&127:(113|1)), (UInt32(74)&127..=UInt32(60)&127:(-102)|1)), [(), (), (), (), (), (), (), (), (), ()], (-41.0), (Int16(124)&127..Int16(-59)&127:((-57)|1)), (() is Class526), (-39), [false, false, true, true, true, true, true, true, false, true], ###"?<${var753}sGw!0tx${var753}q"###, ())
public let var832 : Range<Int16> = (Int16(Int16(UInt16(240)))&127..Int16(UInt8(242))&127:(67|1))
public let var843 : Array<Bool> = Array<Bool>(10){ i => true }
var var874 : Array<Unit> = Array<Unit>(10){ i => () }
public var var1172 : (String, Range<Int16>) = (###"j(vUsLu${var753}U/4"###, (Int16(107)&127..Int16(-10)&127:(78|1)))
public var var1285 : Array<Bool> = [((((UInt8(230)&127..=UInt8(130)&127:5|1), UInt64(24), (), (Int32(107)&127..Int32(106)&127:27|1), (UInt32(183)&127..UInt32(147)&127:(75|1))), [(), (), (), (), (), (), (), (), (), ()], Float64(Float32(-38.0)), (Int16(-8)&127..Int16(48)&127:(-22)|1), false, Int64(Int8(67)), [false, true, true, true, false, true, false, false, false, true], ###"N_1uni[${var753}Cr${var753}T${var753}"###, ()) is Interface532), false, (((UInt16(103)&127..UInt16(41)&127:((-111)|1)), Int8(-50), Class526(), (UInt8(36)&127..=UInt8(66)&127:((-90)|1)), Float32(-75.0), 't') is String), ([Int16(20), Int16(-57), Int16(UInt8(38)), Int16(-99), Int16(Int8(-101)), Int16(-114), Int16(UInt8(36)), Int16(-18), Int16(62), Int16(Int8(-114))] is (Range<UInt16>) -> Unit), ((((UInt8(108)&127..=UInt8(238)&127:((-102)|1)), UInt64(160), (), (Int32(-113)&127..=Int32(-118)&127:48|1), (UInt32(182)&127..=UInt32(29)&127:(-31)|1)), [(), (), (), (), (), (), (), (), (), ()], Float64(Float32(126.0)), (Int16(-98)&127..Int16(-4)&127:(-101)|1), (UInt64(185) is Array<Unit>), Int64(UInt32(102)), [false, false, false, false, true, false, false, true, true, true], ###"6>vn,qT,=s"###, ()) is (String, Range<Int16>)), ((Int32(-82)&127..=Int32(Int8(-23))&127:(Int64(101)|1)) is Array<Int16>), true, false, true, ((Float32(Float32(-88.0)), [(), (), (), (), (), (), (), (), (), ()], 'K', (), "f${var753}EtSe4jO?j", [false, true, false, false, false, true, false, false, true, false], Float64(Float32(-119.0)), (true, (UInt32(115)&127..=UInt32(40)&127:(98|1)))) is (Int8) -> Unit)]
public var var1429 : Array<Bool> = Array<Bool>(10){ i => (((UInt8(170)&127..UInt8(137)&127:(-87)|1), UInt64(26), (), (Int32(-119)&127..Int32(-47)&127:45|1), (UInt32(190)&127..UInt32(159)&127:(88|1))) is Enum8) }
public let var1583 : Range<UInt32> = (UInt32(54)&127..UInt32(UInt16(Int8(-16)))&127:(49|1))
public let var1596 : Int64 = Int64(Int8(-63))
public let var1613 : Int16 = Int16(UInt8(Int8(UInt8(Int8(84)))))
public var var1683 : Unit = ()
let var1801 : (Array<Array<Bool>>, Array<Unit>, Range<Int16>, Range<UInt64>, Array<Range<UInt32>>) = ([[true, true, false, false, false, true, true, false, true, true], [false, true, true, false, true, true, false, false, true, true], [false, true, false, false, false, true, false, true, false, true], [false, true, true, true, false, false, false, false, false, false], [false, false, true, true, false, false, false, true, false, true], [true, true, false, true, false, false, false, true, false, true], [true, false, true, false, true, true, false, true, true, true], [true, true, false, false, false, false, true, false, false, false], [false, false, false, false, true, true, true, false, true, false], [true, true, true, true, true, false, false, true, true, true]], [(), (), (), (), (), (), (), (), (), ()], (Int16(52)&127..=Int16(4)&127:(Int64(Int16(Int8(45)))|1)), (UInt64(Int8(UInt8(112)))&127..UInt64(UInt16(UInt16(82)))&127:(36|1)), [(UInt32(50)&127..=UInt32(163)&127:71|1), (UInt32(157)&127..=UInt32(118)&127:(-100)|1), (UInt32(89)&127..=UInt32(235)&127:19|1), (UInt32(219)&127..UInt32(153)&127:104|1), (UInt32(105)&127..UInt32(20)&127:1|1), (UInt32(107)&127..UInt32(55)&127:(90|1)), (UInt32(152)&127..UInt32(0)&127:(-109)|1), (UInt32(126)&127..UInt32(87)&127:(-18)|1), (UInt32(176)&127..=UInt32(50)&127:(-43)|1), (UInt32(UInt32(1))&127..UInt32(Int8(-101))&127:(Int64(UInt16(123))|1))])
let var1858 : Array<Array<Bool>> = [[true, true, false, false, false, true, false, false, true, true], [true, true, false, false, false, false, false, false, true, false], [false, true, false, false, false, true, true, false, false, false], [false, true, true, true, false, false, true, true, true, false], [true, true, true, false, false, false, false, true, false, false], [false, true, false, true, true, true, false, false, false, true], [false, false, false, true, true, true, false, false, false, true], [true, true, false, true, true, true, true, true, true, false], [false, false, false, false, true, false, true, false, true, true], [true, false, false, false, true, false, false, false, true, false]]
public let var1911 : Array<Range<UInt32>> = Array<Range<UInt32>>(10){ i => (UInt32(123)&127..=UInt32(228)&127:22|1) }
var var1977 : UInt32 = UInt32(252)
public var var1980 : UInt32 = UInt32(UInt8(Int8(UInt8(UInt8(52)))))
public var var1991 : UInt64 = UInt64(152)
public var var2080 : Float32 = Float32(Float32(-13.0))
var var2094 : (Bool, Range<UInt32>) = (true, (UInt32(8)&127..UInt32(121)&127:((-39)|1)))
let var2228 : Array<Option<Unit>> = [Option<Unit>.None, ((0 as Option<Bool>) as Unit), Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, (() as Unit), ((UInt64(254)&127..=UInt64(65)&127:(-94)|1) as Unit), ((() as Array<Bool>) as Unit), ((((UInt8(172)&127..=UInt8(199)&127:((-12)|1)), UInt64(130), (), (Int32(58)&127..Int32(-104)&127:((-23)|1)), (UInt32(1)&127..=UInt32(62)&127:99|1)), [(), (), (), (), (), (), (), (), (), ()], Float64(Float32(-38.0)), (Int16(53)&127..Int16(99)&127:(-17)|1), false, 71, [true, false, true, true, true, false, false, true, false, true], """
9${var753}4UT${var753}a
1CVd#
""", ()) as Unit), Option<Unit>.None]
public var var2285 : (Array<Unit>, Unit, (String, Range<Int16>), Range<UInt64>, Range<Int16>, (String, Range<Int16>)) = ([(), (), (), (), (), (), (), (), (), ()], (), (###"5bn@vOA${var753}}${var753}Wa{"###, (Int16(-20)&127..=Int16(5)&127:11|1)), (UInt64(160)&127..UInt64(10)&127:(Int64(Int8(Int8(-85)))|1)), (Int16(82)&127..Int16(-69)&127:(-82)|1), ("XL\"bqt\"a$${var753}=", (Int16(-9)&127..=Int16(-61)&127:(-83)|1)))
var var2357 : Int32 = Int32(UInt8(245))
public var var2517 : ?Unit = (Class526() as Unit)
public var var2602 : Float32 = Float32(Float32(39.0))
public let var2621 : Array<Rune> = ['j', 'v', 'Z', 'e', 'r', 'm', 'b', '0', 'v', 'h']
public let var2647 : Bool = ((Int8(UInt8(UInt8(250)))&127..=Int8(UInt8(Int8(-102)))&127:(99|1)) is (Array<Array<Bool>>, Array<Unit>, Range<Int16>, Range<UInt64>, Array<Range<UInt32>>))
public let var2704 : (Float32, Array<Unit>, Rune, Unit, String, Array<Bool>, Float64, (Bool, Range<UInt32>)) = (Float32(Float32(Float32(Float32(117.0)))), [(), (), (), (), (), (), (), (), (), ()], 's', (), ###"tj${var753}>6${var753}_:N]${var753}t1"###, [false, true, false, false, true, false, true, true, true, true], Float64((-84.0)), ((Class526() is (Range<UInt16>, Int8, Interface529, Range<UInt8>, Float32, Rune)), (UInt32(72)&127..=UInt32(147)&127:108|1)))
public let var2729 : Range<UInt8> = (UInt8(Int8(-20))&127..=UInt8(Int8(UInt8(129)))&127:((-119)|1))
public var var2740 : Range<Int32> = (Int32(74)&127..Int32(-87)&127:42|1)
public var var2781 : Float64 = (-101.0)
public var var2906 : UInt16 = UInt16(UInt8(227))
public let var2926 : (Range<UInt32>, (Array<Array<Bool>>, Array<Unit>, Range<Int16>, Range<UInt64>, Array<Range<UInt32>>)) = ((UInt32(116)&127..UInt32(2)&127:(-60)|1), ([[false, true, false, false, false, false, true, true, false, true], [true, true, true, true, false, false, false, false, true, false], [false, false, false, true, true, true, true, false, true, true], [false, false, true, true, true, false, false, true, false, true], [false, true, false, false, true, false, false, false, false, false], [true, true, false, true, false, true, true, false, false, true], [false, false, false, false, true, false, true, true, true, true], [true, true, false, true, true, false, true, false, false, true], [true, false, true, true, true, true, true, false, false, false], [false, true, true, false, false, true, false, false, true, false]], [(), (), (), (), (), (), (), (), (), ()], (Int16(13)&127..=Int16(-9)&127:(-76)|1), (UInt64(58)&127..UInt64(UInt8(72))&127:(Int64(Int32(-99))|1)), [(UInt32(131)&127..UInt32(178)&127:(-108)|1), (UInt32(251)&127..UInt32(166)&127:2|1), (UInt32(124)&127..=UInt32(177)&127:(-39)|1), (UInt32(85)&127..=UInt32(154)&127:98|1), (UInt32(224)&127..UInt32(83)&127:(-127)|1), (UInt32(115)&127..=UInt32(60)&127:(-90)|1), (UInt32(228)&127..=UInt32(114)&127:41|1), (UInt32(28)&127..=UInt32(241)&127:(-122)|1), (UInt32(58)&127..UInt32(11)&127:104|1), (UInt32(193)&127..=UInt32(143)&127:(-101)|1)]))
var var3564 : Option<Int32> = ('K' as Int32)
var var3788 : (Array<Rune>, Float32, UInt64, UInt16, UInt8, UInt8) = (['Q', 'S', 't', 'i', 'o', 'h', 'v', 'J', 'D', 'f'], Float32(Float32(Float32(Float32(121.0)))), UInt64(75), UInt16(Int8(UInt8(238))), UInt8(210), UInt8(Int8(-56)))
public let var3819 : Interface531 = Class526()
var var3939 : Range<UInt32> = (UInt32(159)&127..UInt32(8)&127:(-19)|1)
public let var3964 : Enum916 = Enum916.defaultValue
public let var4008 : Interface532 = Class526()
public var var4034 : Unit = ()
var var4193 : Range<UInt32> = (UInt32(51)&127..UInt32(113)&127:7|1)
public var var4231 : ??Unit = ([(), (), (), (), (), (), (), (), (), ()] as Option<Unit>)
public var var4247 : Option<Range<UInt32>> = Option<Range<UInt32>>.None
public var var4317 : Unit = ()
var var4575 : Bool = false
let var4580 : Array<Int16> = [Int16(98), Int16(66), Int16(26), Int16(77), Int16(108), Int16(50), Int16(-84), Int16(14), Int16(121), Int16(-55)]
public let var4870 : UInt8 = UInt8(Int8(Int8(Int8(UInt8(45)))))
let var4994 : Option<Array<Unit>> = (6.0 as Array<Unit>)
public let var5009 : Bool = false
public var var5212 : Bool = (Class526() is (Int64) -> (Float32, Array<Unit>, Rune, Unit, String, Array<Bool>, Float64, (Bool, Range<UInt32>)))
let var5377 : Option<Option<Int64>> = ((UInt8(40)&127..=UInt8(Int8(UInt8(141)))&127:(Int64(UInt64(UInt32(14)))|1)) as Option<Int64>)
public let var5403 : Bool = false
public var var5460 : (Range<UInt8>, UInt64, Unit, Range<Int32>, Range<UInt32>) = ((UInt8(244)&127..=UInt8(Int8(60))&127:((-31)|1)), UInt64(Int32(Int32(Int16(-39)))), (), (Int32(Int16(95))&127..Int32(UInt8(94))&127:(Int64(Int8(UInt8(64)))|1)), (UInt32(160)&127..=UInt32(Int32(Int32(20)))&127:((-59)|1)))
public var var5494 : Bool = true
public var var5513 : Bool = false
public let var5684 : Bool = ((UInt64(234)&127..=UInt64(161)&127:((-13)|1)) is (Range<UInt32>) -> Unit)
let var5722 : Option<Option<Range<UInt32>>> = ([[true, false, true, true, true, false, true, true, false, false], [false, true, false, false, false, true, false, true, false, false], [true, true, true, false, true, true, false, true, false, false], [false, false, false, false, false, false, true, false, false, true], [false, false, true, false, true, false, true, false, false, false], [false, true, false, true, false, false, false, true, true, true], [false, true, true, true, false, false, true, true, true, true], [false, false, true, false, false, false, true, true, true, false], [false, true, false, true, true, true, true, false, true, true], [false, false, false, true, false, true, false, false, true, true]] as Option<Range<UInt32>>)
public let var5824 : ??Bool = Option<Option<Bool>>.None
public var var5884 : ?Unit = Option<Unit>.None
public var var5937 : UInt8 = UInt8(161)
public enum Enum8 {
    defaultValue
}
public enum Enum11 {
    defaultValue |
    enumValue16(Float64, Int8)
}
public enum Enum103<T0> where T0 <: Bool {
    defaultValue
}
public interface Interface206<T0, T1> where T0 <: UInt8, T1 <: Option<UInt8> {
    func func5565(namedParam5566 ! : Option<Array<Bool>>, namedParam5567 ! : Unit, namedParam5568 ! : Range<UInt16>, namedParam5569 ! : Enum916) : Float32 { // block id: 5570
        var loopTimeVar5604 : Int64 = 0;
        while ((UInt16(191) < var686) && loopTimeVar5604 < 100 ) {
            loopTimeVar5604++;
            match (var578) {
                case 's' | '0' | 'N' | 'T' => 
                    Class526();
                    namedParam5567
                
                case caseVar5585 => 
                    ()
                
                case caseVar5590 => 
                    ()
                
                case 'r' => 
                    ()
                
                case _ => 
                    (true, (UInt32(216)&127..=UInt32(148)&127:(-59)|1));
                    ()
                
            }
        };
        Float32(-61.0)
    }

}

public open class Class203 <: Interface206<UInt8, Option<UInt8>> & Resource {
    public init() { // block id: 205

    }
;
    var var211 : Float32 = Float32(117.0)
    public func isClosed(): Bool { return true }
    public func close(): Unit {}
}


func func233(param234 : Int16) : Range<UInt16> { // block id: 235
    let var237 : Range<UInt16> = (UInt16(28)&127..=UInt16(195)&127:13|1);
    var237
}

func func258(param259 : Range<UInt64>) : Array<Int16> { // block id: 260
    let var262 : Array<Int16> = [Int16(45), Int16(-71), Int16(16), Int16(-101), Int16(-122), Int16(71), Int16(-115), Int16(-122), Int16(-68), Int16(-34)];
    var262
}


public func func270(param271 : Range<UInt16>) : Unit { // block id: 272
    var var293 : Float32 = Float32(Float32(24.0));
    var loopTimeVar302 : Int64 = 0;
    do {
        loopTimeVar302++;

    } while (((Option<Bool>.Some(var281) ?? try { // block id: 290
        var293 %= Float32((Int32(Float32(-1.0))) | 1);
        true
    } finally { // block id: 298
        true
    })) && loopTimeVar302 < 100 ) 
}

public func func324(param325 : Range<UInt32>) : Option<Bool> { // block id: 326
    var var329 : Array<Array<Bool>> = [[true, true, false, true, true, false, false, true, true, false], [true, false, (Int32(-3) is Range<Int8>), (Int16(Int8(-66)) is Array<Array<Bool>>), false, true, (Float64(103.0) is Array<Int16>), ([[false, true, false, true, true, true, false, false, true, true], [true, false, false, false, false, false, true, false, true, false], [false, false, false, false, true, true, false, true, true, true], [true, false, false, false, false, false, true, true, true, true], [false, false, false, true, true, true, true, false, false, false], [true, true, true, true, false, true, true, true, true, true], [true, true, false, false, false, false, true, true, true, false], [false, true, false, false, false, false, true, false, true, false], [true, true, false, false, false, true, true, true, false, false], [true, false, true, true, false, false, false, false, false, false]] is Array<Unit>), true, (Option<Bool>.None is Enum8)], [true, ((UInt32(62)&127..=UInt32(197)&127:(-65)|1) is Int8), (('c' as Bool) is Enum8), false, ((UInt32(183)&127..=UInt32(236)&127:114|1) is Range<UInt8>), false, (UInt16(Int16(-24)) is Range<UInt8>), false, (UInt64(76) is Float64), (Int64(Int32(-85)) is Interface206<UInt8, Option<UInt8>>)], [false, false, true, true, false, true, false, true, false, true], [true, false, false, false, true, true, true, true, false, true], [(104.0 is (Range<UInt16>) -> Unit), (UInt32(12) is Array<Int16>), ("1vuG&+rF_E" is Range<UInt8>), ('6' is (Range<UInt16>) -> Unit), ((false as Bool) is Range<UInt8>), (Int8(-5) is Range<UInt16>), (((-24)&127..=(-79)&127:(-5)|1) is (Range<UInt16>) -> Unit), true, true, false], [false, true, false, false, true, false, true, false, true, true], [true, false, false, ([[true, false, false, true, true, true, false, false, false, true], [true, true, true, true, true, true, false, true, false, false], [false, false, true, true, false, false, true, false, false, true], [true, false, false, false, false, true, true, true, false, true], [false, false, true, false, false, true, false, true, false, true], [true, true, false, false, false, true, true, false, true, true], [true, true, true, true, false, false, false, true, false, true], [false, false, false, true, false, true, false, true, false, true], [false, true, false, false, false, true, true, false, true, false], [true, true, true, true, true, false, true, true, false, true]] is UInt16), (UInt32(UInt16(71)) is Range<UInt16>), ([Int16(121), Int16(-119), Int16(-7), Int16(54), Int16(-29), Int16(-4), Int16(-106), Int16(17), Int16(19), Int16(-84)] is Range<UInt8>), (UInt32(Int32(-66)) is Option<Bool>), (((-68)&127..111&127:27|1) is Float32), true, false], [false, true, false, false, true, true, false, true, false, true], [true, true, false, false, true, true, false, false, true, true]];
    var329[0];
    let var454 : ?Bool = ('R' as Bool);
    var454
}

public func func229(param230 : Int8) : Unit { // block id: 231
    let var265 : (Range<UInt64>) -> Array<Int16> = func258;
    ((UInt64(70)&127..=UInt64(70)&127:88|1)|>var265)[8]|>{ lambdaParameter241 : Int16 => try { // block id: 244
        func233(lambdaParameter241)
    } finally { // block id: 247
        (UInt16(63)&127..=UInt16(244)&127:(var252|1))
    } };
    let var311 : Unit = ();
    let var314 : Int16 = Int16(74);
    let var458 : (Range<UInt32>) -> Option<Bool> = func324;
    var var471 : Float64 = 108.0;
    var var477 : UInt16 = UInt16(114);
    match (((var462&127..=UInt32(154)&127:(var252|1))|>var458)) {
        case _ : Unit => 
            var471 /= Float64((Int32(var471)) | 1);
            var311;
            (var477&127..UInt16(159)&127:(99|1))
        
        case _ => 
            var484
        
    }|>{ lambdaParameter305 : Range<UInt16> => var loopTimeVar321 : Int64 = 0; do {
        loopTimeVar321++;

    } while ((try { // block id: 309
        var311;
        var314;
        true
    } finally { // block id: 317
        var281
    }) && loopTimeVar321 < 100 )  }
}

public interface Interface530 {

}

public interface Interface532 {

}

public interface Interface531 <: Interface530 & Interface532 {

}

public interface Interface529 <: Interface530 & Interface531 {

}

public open class Class526 <: Interface529 & Interface530 & Resource {
    public init() { // block id: 528

    }
;
    public var var537 : (Range<UInt8>, UInt64, Unit, Range<Int32>, Range<UInt32>) = ((UInt8(214)&127..=UInt8(211)&127:((-43)|1)), UInt64(231), (), (Int32(-86)&127..Int32(34)&127:(-57)|1), (UInt32(62)&127..=UInt32(111)&127:25|1));
    public static var var1158 : Rune = 'n';
    public init(optionalParam2970 ! : Option<Bool> = (Class526() as Bool), namedParam2973 ! : Array<Range<UInt32>>) { // block id: 2974
        ()
    }

    public func isClosed(): Bool { return true }
    public func close(): Unit {}
}


public enum Enum916 {
    defaultValue |
    enumValue3373(Array<Array<Bool>>)
}
func func583(optionalParam584 ! : UInt64 = UInt64(108), namedParam586 ! : Range<UInt32>, optionalParam587 ! : Option<Bool> = Option<Bool>.None, namedParam589 ! : Rune) : Bool { // block id: 590
    var var618 : Unit = ();
    let var692 : UInt16 = UInt16(66);
    let var701 : UInt8 = UInt8(4);
    var var710 : (Range<UInt8>, UInt64, Unit, Range<Int32>, Range<UInt32>) = ((UInt8(UInt8(Int8(-125)))&127..UInt8(73)&127:(Int64(Int32(UInt32(22)))|1)), UInt64(211), (), (Int32(45)&127..=Int32(Int16(-85))&127:(Int64((-14))|1)), (UInt32(Int32(Int16(29)))&127..UInt32(195)&127:(Int64(Int32(Int8(-63)))|1)));
    let var800 : (Range<UInt8>, UInt64, Unit, Range<Int32>, Range<UInt32>) = ((UInt8(Int8(-7))&127..UInt8(UInt8(UInt8(169)))&127:(Int64(Int32(UInt8(173)))|1)), UInt64(145), (), (Int32(-47)&127..=Int32(-98)&127:(-48)|1), (UInt32(171)&127..UInt32(34)&127:(Int64(Int16(53))|1)));
    let var972 : Unit = ();
    let var1047 : Bool = true;
    func func908(optionalParam909 ! : String = ###"Y)%h\\JUUzy"###, namedParam911 ! : Float64) : ((Range<UInt8>, UInt64, Unit, Range<Int32>, Range<UInt32>), Array<Unit>, Float64, Range<Int16>, Bool, Int64, Array<Bool>, String, Unit) { // block id: 912
        var843;
        var var931 : Enum916 = Enum916.defaultValue;
        let var993 : UInt8 = UInt8(Int8(UInt8(Int8(Int8(-49)))));
        let var1064 : Range<Int16> = (Int16(-104)&127..Int16(-106)&127:(20|1));
        match (match (match (Enum916.defaultValue) {
                    case _ => 
                        var281 &&= var281;
                        ();
                        if (true) { Enum916.defaultValue } else { var931 } 
                    
                    case _ => 
                        var931
                    
                }) {
                case defaultValue => 
                    if (var281) { Option<Bool>.None } else { Option<Bool>.Some(true) } 
                
                case defaultValue => 
                    [[true, true, true, true, false, true, false, false, true, false], [false, true, false, true, true, false, false, true, true, true], [true, true, false, false, false, true, true, true, false, true], [true, true, false, true, true, true, false, true, true, true], [true, false, false, true, false, false, false, false, false, false], [false, true, true, true, false, false, false, false, true, false], [true, false, false, true, false, true, false, true, true, false], [true, false, true, false, true, false, false, true, false, false], [true, false, true, true, true, true, false, false, true, false], [false, false, true, true, true, true, true, false, true, true]];
                    if (var281) { var931 } else { var931 } ;
                    Option<Bool>.None
                
                case caseVar955 => 
                    Option<Bool>.Some(true)
                
                case _ => 
                    ();
                    if (var281) { optionalParam587 } else { Option<Bool>.Some(false) } 
                
            }) {
            case caseVar969 => 
                var972;
                var759
            
            case _ => 
                var252 /= ((var252) | 1);
                var var983 : Int64 = (-53);
                var983 <<= ((91) & 7);
                var var1006 : Unit = ();
                let var1021 : Int16 = Int16(UInt8(UInt8(68)));
                let var1026 : Int64 = 122;
                var var1038 : Bool = (Float64(Float32(Float32(Float32(73.0)))) is Range<Int32>);
                if (false) { (((UInt8(134)&127..var993&127:(105|1)), optionalParam584, var972, (Int32(93)&127..=Int32(123)&127:90|1), (UInt32(118)&127..UInt32(118)&127:75|1)), [var1006, var1006, var972, var1006, var972, (), (), var972, var972, var1006], (-46.0), (Int16(-77)&127..var1021&127:(var1026|1)), var281, var252, [var281, var281, var281, var281, true, false, var1038, var281, var281, var1047], var753, ()) } else { var759 } 
            
            case _ => 
                (((UInt8(174)&127..UInt8(104)&127:(-54)|1), optionalParam584, (), (Int32(-88)&127..Int32(-116)&127:63|1), (UInt32(164)&127..UInt32(162)&127:(-61)|1)), [(), (), (), (), (), (), (), (), (), ()], 86.0, var1064, true, var252, [var1047, false, false, var1047, var281, var281, false, true, true, var1047], "e+GZWkk}2p", ())
            
        }
    }
;
    if ((Option<(Bool, Range<UInt32>)>.None ?? (false, namedParam586))[0]) { // block id: 604
        match (Option<(Bool, Range<UInt32>)>.None) {
            case caseVar609 : Bool => 
                ();
                ()
            
            case caseVar615 => 
                var618;
                var281 &&= var281;
                var618
            
            case _ => 
                var618
            
        };
        func270((UInt16(197)&127..UInt16(206)&127:(var252|1)));
        let var634 : Array<Bool> = [true, false, false, true, true, false, false, true, true, true];
        var634[8]
    } else if (if (var281) { // block id: 641
        let var643 : ((Range<UInt8>, UInt64, Unit, Range<Int32>, Range<UInt32>), Array<Unit>, Float64, Range<Int16>, Bool, Int64, Array<Bool>, String, Unit) = (((UInt8(137)&127..UInt8(209)&127:(-86)|1), UInt64(245), (), (Int32(31)&127..Int32(-16)&127:((-18)|1)), (UInt32(208)&127..=UInt32(174)&127:31|1)), [(), (), (), (), (), (), (), (), (), ()], Float64(29.0), (Int16(UInt8(89))&127..=Int16(Int8(-37))&127:(Int64(Int8(Int8(-11)))|1)), true, Int64(UInt32(47)), [false, false, true, false, false, false, false, true, false, true], "ZZ/Qtz;KhI", ());
        var643
    } else if (false) { // block id: 682
        (UInt16(56)&127..var686&127:(var252|1));
        ((var692&127..UInt16(191)&127:(var252|1)), var566, Class526(), (UInt8(19)&127..=var701&127:(46|1)), Float32(63.0), namedParam589);
        let var756 : Unit = ();
        if (var281) { (var710, [(), var618, var618, var618, (), var618, var618, (), (), ()], 18.0, (Int16(-53)&127..Int16(44)&127:86|1), false, var252, [false, true, true, false, false, false, false, true, true, false], var753, var756) } else { var759 } 
    } else { // block id: 794
        var701;
        var var869 : Unit = ();
        var var887 : Float64 = 123.0;
        if (var281) { (var800, [(), (), (), (), var618, var618, (), (), (), ()], (-113.0), var832, false, 36, var843, "z\\Fd`,^:DE", var869) } else { (var710, var874, var887, (Int16(-34)&127..=Int16(56)&127:(-68)|1), false, var252, [var281, var281, var281, true, true, var281, true, false, var281, var281], ###"yR4y<X(h72"###, var869) } 
    }[4]) { // block id: 906
        func908(namedParam911 : (-18.0));
        var281
    } else { // block id: 1086
        var281
    }
}


public func func1200(param1201 : Range<UInt32>) : Unit { // block id: 1202

}



public func func1902(param1903 : UInt16) : Range<UInt32> { // block id: 1904
    var var2007 : ??Bool = (([[true, false, false, false, true, true, false, false, false, false], [true, false, true, true, true, false, false, false, false, true], [true, false, false, false, true, false, true, false, false, true], [true, true, true, false, true, true, false, true, true, false], [false, false, false, true, false, false, false, true, false, false], [true, true, true, false, false, false, true, true, false, false], [false, true, true, true, true, true, true, false, true, false], [true, false, true, false, true, false, true, false, false, true], [false, true, false, false, false, false, false, true, false, true], [false, true, true, false, true, true, true, false, true, false]], [(), (), (), (), (), (), (), (), (), ()], (Int16(34)&127..=Int16(123)&127:((-103)|1)), (UInt64(196)&127..UInt64(140)&127:(Int64(Int16(-75))|1)), [(UInt32(107)&127..=UInt32(116)&127:(48|1)), (UInt32(13)&127..=UInt32(89)&127:79|1), (UInt32(161)&127..UInt32(239)&127:((-87)|1)), (UInt32(18)&127..=UInt32(155)&127:(-80)|1), (UInt32(9)&127..UInt32(93)&127:(62|1)), (UInt32(61)&127..=UInt32(97)&127:(-30)|1), (UInt32(165)&127..=UInt32(187)&127:3|1), (UInt32(166)&127..=UInt32(158)&127:(43|1)), (UInt32(47)&127..UInt32(6)&127:(-6)|1), (UInt32(77)&127..UInt32(196)&127:(-18)|1)]) as Option<Bool>);
    var loopTimeVar2051 : Int64 = 0;
    do {
        loopTimeVar2051++;
        let var2045 : ?Bool = Option<Bool>.None;
        (var2007 ?? var2045);
        var874[3]
    } while ((func583(optionalParam584 : UInt64(UInt64(208)), namedParam586 : var1911[7], namedParam589 : if (var281) { // block id: 1973
        ();
        var1977 <<= ((var1980) & 7);
        var578
    } else if (true) { // block id: 1988
        var1991 >>= ((var1991) & 7);
        var var1995 : UInt8 = UInt8(225);
        var1995;
        var578
    } else { // block id: 1998
        var578
    })) && loopTimeVar2051 < 100 ) ;
    var var2104 : (Float32, Array<Unit>, Rune, Unit, String, Array<Bool>, Float64, (Bool, Range<UInt32>)) = (Float32(Float32(Float32(Float32(-104.0)))), [(), (), (), (), (), (), (), (), (), ()], 'O', (), ###">zm2UZAsR3"###, [(UInt16(Int16(37)) is Array<Bool>), (Option<Option<Bool>>.Some(Option<Bool>.Some(true)) is (String, Range<Int16>)), ((UInt64(150)&127..UInt64(151)&127:((-2)|1)) is (Range<UInt32>, (Array<Array<Bool>>, Array<Unit>, Range<Int16>, Range<UInt64>, Array<Range<UInt32>>))), true, true, (((UInt16(92)&127..UInt16(1)&127:(-13)|1), Int8(-83), Class526(), (UInt8(22)&127..=UInt8(17)&127:(124|1)), Float32(-94.0), 'L') is Int8), (Class526() is Range<UInt16>), (Class526() is Unit), ((UInt16(217)&127..=UInt16(121)&127:(-124)|1) is (Float32, Array<Unit>, Rune, Unit, String, Array<Bool>, Float64, (Bool, Range<UInt32>))), true], Float64(72.0), (((true, (UInt32(102)&127..=UInt32(202)&127:(-102)|1)) is Float64), (UInt32(77)&127..UInt32(196)&127:(-33)|1)));
    var var2176 : (Bool, Range<UInt32>) = (((UInt16(UInt16(171))&127..UInt16(97)&127:((-104)|1)) is Option<Array<Bool>>), (UInt32(UInt8(26))&127..UInt32(Int16(Int16(-96)))&127:(Int64(UInt8(Int8(-92)))|1)));
    try { // block id: 2053
        try { // block id: 2055
            (UInt32(27)&127..UInt32(177)&127:(-37)|1)
        } finally { // block id: 2057
            [var578, var578, 'T', var578, var578, var578, var578, var578, var578, var578];
            var2007;
            var1583
        }
    } finally { // block id: 2071
        var var2084 : ?(Bool, Range<UInt32>) = ((Int32(-7)&127..=Int32(71)&127:60|1) as (Bool, Range<UInt32>));
        try { // block id: 2073
            if (false) { (UInt32(106)&127..=UInt32(68)&127:58|1) } else { (UInt32(175)&127..UInt32(238)&127:(-32)|1) } 
        } catch (e: Exception) { // block id: 2078
            var2080;
            var2084;
            if (true) { (UInt32(43)&127..UInt32(85)&127:(-109)|1) } else { (UInt32(136)&127..UInt32(145)&127:46|1) } 
        } finally { // block id: 2091
            Option<(Bool, Range<UInt32>)>.Some(var2094);
            var var2173 : Float64 = (-55.0);
            if (true) { var2104 } else { (Float32(-85.0), [(), (), (), (), (), (), (), (), (), ()], var578, (), var753, var1285, var2173, var2176) } ;
            var1583
        }
    }
}

func func1208<T0, T1>(param1209 : Interface529) : Range<UInt32> { // block id: 1210
    let var1239 : Bool = (((UInt16(Int8(58))&127..=UInt16(UInt16(214))&127:((-90)|1)), Int8(45), Class526(), (UInt8(UInt8(163))&127..UInt8(UInt8(55))&127:(Int64(UInt16(203))|1)), Float32(Float32(Float32(-49.0))), 'N') is (Float32, Array<Unit>, Rune, Unit, String, Array<Bool>, Float64, (Bool, Range<UInt32>)));
    let var1275 : Bool = true;
    let var1493 : Bool = ((UInt8(165)&127..UInt8(1)&127:(-106)|1) is Int16);
    var var1520 : Bool = false;
    (try { // block id: 1218
        UInt16(80);
        Option<Array<Array<Bool>>>.Some([[false, true, false, true, false, true, true, false, true, false], [true, true, false, true, true, true, true, true, false, false], [false, true, true, false, true, true, false, false, true, true], [false, false, true, true, false, true, false, true, true, false], [false, true, true, true, false, true, true, false, true, true], [true, false, true, false, false, false, true, true, false, true], [false, true, false, true, false, false, true, true, false, false], [false, false, true, true, false, false, true, true, false, false], [false, true, true, true, false, true, false, true, true, false], [false, true, false, false, false, false, false, true, false, false]])
    } finally { // block id: 1222
        var var1226 : ?Array<Array<Bool>> = (UInt32(68) as Array<Array<Bool>>);
        if (false) { var1226 } else { Option<Array<Array<Bool>>>.None } 
    } ?? try { // block id: 1231
        [[true, false, true, false, false, true, false, false, true, true], [false, true, true, false, false, true, true, false, true, true], [var281, var281, var1239, var281, var281, true, true, true, var1239, true], [true, true, true, true, false, false, true, true, false, true], var843, [false, true, true, false, true, false, false, false, false, false], [true, false, var1275, var1275, false, false, false, true, var281, false], var1285, var1429, var843]
    } finally { // block id: 1482
        ();
        [var843, [var1275, false, false, false, var1275, var1493, true, true, var1493, var281], var1285, [false, var1493, true, false, var1493, true, true, var281, false, true], [true, var281, var281, var1239, true, var281, var1520, var1520, false, true], [var1239, var1520, true, false, var1520, true, false, var1239, true, var281], var1285, var843, var1429, var1285]
    })[0];
    Option<(Bool, Range<UInt32>)>.None;
    let var1576 : UInt64 = UInt64(UInt64(Int64(UInt16(UInt8(48)))));
    let var1604 : Bool = (() is UInt32);
    let var1648 : Range<Int64> = (75&127..=112&127:125|1);
    let var1655 : (Range<UInt32>, (Array<Array<Bool>>, Array<Unit>, Range<Int16>, Range<UInt64>, Array<Range<UInt32>>)) = ((UInt32(93)&127..=UInt32(166)&127:(-23)|1), ([[true, false, true, true, true, true, false, true, true, true], [true, false, true, false, true, false, false, true, false, true], [false, false, false, true, true, true, false, true, false, false], [true, true, false, false, true, false, true, true, false, true], [false, false, false, true, true, true, false, true, true, false], [true, true, false, false, false, false, false, true, true, true], [true, true, false, false, true, true, true, false, false, true], [false, true, true, true, false, true, false, true, true, true], [true, false, true, false, true, true, true, false, true, false], [false, false, false, true, false, false, true, false, true, false]], [(), (), (), (), (), (), (), (), (), ()], (Int16(102)&127..=Int16(-70)&127:27|1), (UInt64(UInt16(132))&127..=UInt64(UInt16(201))&127:((-108)|1)), [(UInt32(120)&127..UInt32(71)&127:2|1), (UInt32(191)&127..=UInt32(176)&127:28|1), (UInt32(143)&127..UInt32(77)&127:(-10)|1), (UInt32(85)&127..=UInt32(114)&127:91|1), (UInt32(15)&127..UInt32(242)&127:118|1), (UInt32(207)&127..UInt32(229)&127:120|1), (UInt32(174)&127..UInt32(170)&127:(-93)|1), (UInt32(97)&127..UInt32(84)&127:(-106)|1), (UInt32(142)&127..=UInt32(37)&127:(-15)|1), (UInt32(73)&127..=UInt32(62)&127:(-14)|1)]));
    let var1873 : Range<UInt64> = (UInt64(Int32(UInt8(Int8(-107))))&127..UInt64(Int64(UInt32(Int8(-2))))&127:((-128)|1));
    func func1562(optionalParam1563 ! : Range<UInt16> = (UInt16(211)&127..=UInt16(61)&127:115|1), namedParam1565 ! : (Int8) -> Unit, namedParam1568 ! : (Bool, Range<UInt32>), optionalParam1569 ! : Range<UInt16> = (UInt16(138)&127..UInt16(42)&127:(-101)|1)) : Array<Range<UInt32>> { // block id: 1571
        ();
        var loopTimeVar1634 : Range<UInt64> = (UInt64(172)&127..=UInt64(Int8(Int8(Int8(7))))&127:(102|1));
        for (i in loopTimeVar1634 where func583(optionalParam584 : var1576, namedParam586 : var1583, optionalParam587 : ((var462&127..=var462&127:(var1596|1))|>func324), namedParam589 : match {
            case var1275 => 
            if (var1604) { 'u' } else { var578 } 
            case _ => 
            [Int16(-64), var1613, var1613, Int16(72), Int16(-93), var1613, var1613, Int16(-31), var1613, var1613];
            ((-62)&127..=var1596&127:(53|1));
            'U'
        })) {
            var832
        };
        match (var1648) {
            case caseVar1652 : Interface530 => 
                var1655
            
            case _ => 
                var1683;
                if (var1493) { var1655 } else { ((var462&127..var462&127:((-105)|1)), ([[false, var1275, var1493, false, var1239, false, var1493, false, var1493, var1493], [true, true, true, true, true, true, true, false, false, false], var1285, [false, false, true, true, true, false, true, false, true, false], [var1239, var281, false, var1239, var1604, true, false, true, true, var1493], [true, false, false, false, false, true, false, true, true, false], [var1604, true, var1275, false, false, var1493, var1275, var1275, var1239, true], var1429, var1429, [false, true, true, false, true, false, true, true, false, true]], var874, (var1613&127..=var1613&127:(90|1)), (UInt64(46)&127..=UInt64(161)&127:((-113)|1)), [(UInt32(35)&127..=UInt32(203)&127:12|1), (UInt32(5)&127..=UInt32(22)&127:(-94)|1), (UInt32(128)&127..UInt32(229)&127:101|1), (UInt32(179)&127..UInt32(16)&127:28|1), (UInt32(189)&127..UInt32(119)&127:117|1), (UInt32(86)&127..=UInt32(188)&127:101|1), (UInt32(228)&127..UInt32(228)&127:111|1), (UInt32(93)&127..UInt32(223)&127:8|1), (UInt32(177)&127..UInt32(59)&127:(-81)|1), (UInt32(196)&127..UInt32(18)&127:102|1)])) } 
            
            case caseVar1747 : Array<Rune> => 
                !var1493;
                if (var1493) { var1655 } else { ((UInt32(95)&127..var462&127:(89|1)), ([[true, true, false, false, true, false, false, true, false, false], var1429, [var1239, var1275, true, var1604, var1493, var1275, false, var1493, var1275, true], var843, [true, true, false, var1275, var1604, true, false, true, false, false], var1429, var843, [true, false, false, true, true, true, false, true, false, false], var1285, [true, false, true, true, false, true, true, false, true, false]], [(), (), (), (), (), (), (), (), (), ()], (Int16(2)&127..Int16(107)&127:(-99)|1), (UInt64(133)&127..UInt64(213)&127:(-30)|1), [(UInt32(68)&127..UInt32(63)&127:60|1), (UInt32(190)&127..=UInt32(120)&127:115|1), (UInt32(202)&127..UInt32(99)&127:(-86)|1), (UInt32(116)&127..UInt32(9)&127:(-67)|1), (UInt32(14)&127..UInt32(164)&127:46|1), (UInt32(123)&127..=UInt32(55)&127:121|1), (UInt32(95)&127..UInt32(183)&127:(-3)|1), (UInt32(226)&127..UInt32(0)&127:53|1), (UInt32(248)&127..=UInt32(35)&127:(-62)|1), (UInt32(179)&127..=UInt32(29)&127:122|1)])) } 
            
            case _ : Int32 => 
                (var1583, var1801)
            
            case _ => 
                if (true) { var1655 } else { ((UInt32(182)&127..UInt32(229)&127:84|1), (var1858, [var1683, var1683, var1683, (), var1683, var1683, (), var1683, (), ()], (Int16(104)&127..=Int16(-100)&127:(-107)|1), var1873, [(UInt32(207)&127..=UInt32(73)&127:(-72)|1), (UInt32(180)&127..=UInt32(85)&127:(-122)|1), (UInt32(103)&127..=UInt32(58)&127:107|1), (UInt32(235)&127..=UInt32(232)&127:(-11)|1), (UInt32(243)&127..=UInt32(248)&127:(-122)|1), (UInt32(201)&127..UInt32(55)&127:(-6)|1), (UInt32(131)&127..=UInt32(235)&127:(-98)|1), (UInt32(8)&127..=UInt32(55)&127:(-109)|1), (UInt32(184)&127..=UInt32(190)&127:109|1), (UInt32(71)&127..=UInt32(54)&127:118|1)])) } 
            
        }[1][4]
    }
;
    let var1890 : (Bool, Range<UInt32>) = ((("""
 ,D7I
G]-`7
""", (Int16(26)&127..Int16(-91)&127:((-5)|1))) is (Array<Array<Bool>>, Array<Unit>, Range<Int16>, Range<UInt64>, Array<Range<UInt32>>)), (UInt32(62)&127..UInt32(36)&127:122|1));
    if (func583(namedParam586 : if (false) { (UInt32(213)&127..=UInt32(221)&127:(-102)|1) } else { (var462&127..=UInt32(218)&127:(var252|1)) } , optionalParam587 : func324((UInt32(147)&127..=UInt32(196)&127:((-51)|1))), namedParam589 : ['W', 'r', 'm', 'i', 'E', 'Z', 'r', 'd', 'F', 'g'][9])) { func1562(optionalParam1563 : var484, namedParam1565 : func229, namedParam1568 : var1890)[4] } else { (try { // block id: 2196
        var686
    } catch (_) { // block id: 2198
        var686
    }|>func1902) } 
}




func func3951(param3952 : (Int8) -> Unit) : Unit { // block id: 3955
    func1200(if (if (var2647) { // block id: 3960
        if (var281) { var3964 } else { Enum916.defaultValue } ;
        true
    } else { // block id: 3968
        var2740;
        true || false
    }) { (Option<Range<UInt32>>.Some((UInt32(197)&127..=UInt32(23)&127:(-44)|1)) ?? (var462&127..var462&127:(var252|1))) } else { var1583 } )
}

func func2543(param230 : Int8) : Unit { // block id: 231
    let var265 : (Range<UInt64>) -> Array<Int16> = func258;
    ((UInt64(70)&127..=UInt64(70)&127:88|1)|>var265)[8]|>{ lambdaParameter241 : Int16 => try { // block id: 244
        func233(lambdaParameter241)
    } finally { // block id: 247
        (UInt16(63)&127..=UInt16(244)&127:(var252|1))
    } };
    let var311 : Unit = ();
    let var314 : Int16 = Int16(74);
    let var458 : (Range<UInt32>) -> Option<Bool> = func324;
    var var471 : Float64 = 108.0;
    var var477 : UInt16 = UInt16(114);
    match (((var462&127..=UInt32(154)&127:(var252|1))|>var458)) {
        case _ : Unit => 
            var471 /= Float64((Int32(var471)) | 1);
            var311;
            (var477&127..UInt16(159)&127:(99|1))
        
        case _ => 
            var484
        
    }|>{ lambdaParameter305 : Range<UInt16> => var loopTimeVar321 : Int64 = 0; do {
        loopTimeVar321++;

    } while ((try { // block id: 309
        var311;
        var314;
        true
    } finally { // block id: 317
        var281
    }) && loopTimeVar321 < 100 )  }
}


public func func3988(param3989 : Int8) : (Int8) -> Unit { // block id: 3990
    let var4001 : Option<Interface532> = ((UInt8(108) as Bool) as Interface532);
    let var4028 : Unit = ();
    var var4040 : Array<Bool> = [true, false, true, false, false, false, true, false, false, true];
    var var4062 : String = """
Xoe$e
u@,2h
""";
    match ((if (var2647) { Option<Interface532>.None } else { var4001 }  ?? if (true) { var4008 } else { var4008 } )) {
        case _ : Interface532 => 
            var var4015 : Array<Int16> = [Int16(-101), Int16(-2), Int16(75), Int16(-8), Int16(58), Int16(-6), Int16(81), Int16(114), Int16(74), Int16(104)];
            var4015;
            if (var2647) { (Float32(-111.0), [(), var1683, (), var1683, var1683, var4028, (), var4028, var4028, var4034], 'P', var4034, """
H\"dv+
gH/hX
""", var4040, (-49.0), var2094) } else { var2704 } 
        
        case _ => 
            if (true) { var2704 } else { var2704 } 
        
        case caseVar4054 : Int64 => 
            (Float32(-36.0), var874, var578, (), var4062, [false, var281, var2647, var281, var2647, var281, true, true, var2647, var281], (-2.0), var2094)
        
        case _ => 
            let var4106 : UInt8 = UInt8(UInt8(10));
            ([var281, true, true, var281, false, true, var281, var2647, true, var2647], (-127.0), [Int16(-7), var1613, Int16(36), var1613, var1613, var1613, Int16(-63), Int16(36), Int16(-16), var1613], ((var4106&127..var4106&127:(var1596|1)), UInt64(83), (), (Int32(-63)&127..=Int32(119)&127:106|1), (UInt32(216)&127..UInt32(54)&127:(-113)|1)), UInt64(222), var1911, Int16(50));
            var4028;
            if (false) { (Float32(-65.0), [(), (), (), (), (), (), (), (), (), ()], var578, (), "fc1'GA9jQ^", [true, false, true, false, true, true, true, true, true, true], (-90.0), var2094) } else { var2704 } 
        
    };
    func2543
}





func func2543(param2544 : (Range<UInt16>) -> Unit) : (Float32, Array<Unit>, Rune, Unit, String, Array<Bool>, Float64, (Bool, Range<UInt32>)) { // block id: 2547
    let var2551 : Range<Int8> = (Int8(UInt8(Int8(-87)))&127..=Int8(-66)&127:(26|1));
    var var2578 : UInt64 = UInt64(112);
    let var2774 : Range<UInt32> = (UInt32(101)&127..=UInt32(178)&127:101|1);
    let var2785 : (Range<UInt8>, UInt64, Unit, Range<Int32>, Range<UInt32>) = ((UInt8(39)&127..=UInt8(237)&127:48|1), UInt64(UInt8(UInt8(UInt8(160)))), (), (Int32(Int8(-113))&127..Int32(UInt16(80))&127:(Int64(Int64(Int8(19)))|1)), (UInt32(133)&127..UInt32(Int16(108))&127:(Int64(Int16(Int16(119)))|1)));
    let var2887 : Enum916 = Enum916.defaultValue;
    let var2899 : UInt8 = UInt8(UInt8(Int8(123)));
    let var3520 : UInt64 = UInt64(45);
    let var3602 : Int16 = Int16(Int16(-16));
    let var3700 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    let var3853 : Array<Bool> = [true, false, (Int8(76) is Int32), true, true, (Class526(namedParam2973 : [(UInt32(145)&127..=UInt32(101)&127:(-49)|1), (UInt32(50)&127..UInt32(190)&127:(-89)|1), (UInt32(49)&127..UInt32(48)&127:(-106)|1), (UInt32(196)&127..UInt32(184)&127:((-19)|1)), (UInt32(57)&127..=UInt32(242)&127:121|1), (UInt32(143)&127..UInt32(218)&127:98|1), (UInt32(26)&127..=UInt32(176)&127:(-2)|1), (UInt32(192)&127..UInt32(167)&127:30|1), (UInt32(89)&127..UInt32(240)&127:((-59)|1)), (UInt32(14)&127..UInt32(16)&127:(29|1))]) is Interface530), ((12&127..9&127:15|1) is (Range<UInt16>, Int8, Interface529, Range<UInt8>, Float32, Rune)), ('d' is Array<Unit>), ((Int8(121)&127..=Int8(-13)&127:(-115)|1) is (Range<UInt16>) -> Unit), ((UInt16(12)&127..UInt16(UInt16(208))&127:(Int64(UInt64(195))|1)) is (Interface529) -> Range<UInt32>)];
    func func2606(param2607 : (Range<UInt32>) -> Unit, param2610 : (Range<UInt32>) -> Option<Bool>, param2613 : Array<Int16>) : Array<Unit> { // block id: 2614
        let var2667 : Bool = (((-65)&127..7&127:86|1) is Enum103<Bool>);
        let var2675 : Bool = ((((['B', '0', 'F', 'M', '5', '4', 'S', 'T', 'W', 'e'], Float32(105.0), UInt64(186), UInt16(80), UInt8(221), UInt8(6)) is Float32), (UInt32(32)&127..UInt32(128)&127:(-27)|1)) is Float32);
        var var2769 : Int64 = Int64(UInt16(2));
        var var2821 : ?Bool = (((UInt8(200)&127..UInt8(UInt8(187))&127:(Int64(UInt64(50))|1)), UInt64(Int8(UInt8(175))), (), (Int32(41)&127..Int32(-97)&127:(-94)|1), (UInt32(Int16(47))&127..=UInt32(52)&127:(Int64(UInt64(219))|1))) as Bool);
        let var2891 : Array<Rune> = ['M', 'S', 'X', 'm', 'L', 'r', 'h', 'Q', 'S', 'j'];
        let var3545 : UInt32 = UInt32(Int8(UInt8(192)));
        func func2863(optionalParam2864 ! : Int32 = Int32(UInt32(Int8(-57))), namedParam2868 ! : Range<UInt8>) : (Range<UInt32>, (Array<Array<Bool>>, Array<Unit>, Range<Int16>, Range<UInt64>, Array<Range<UInt32>>)) { // block id: 2869
            ();
            ();
            var var3408 : (Range<UInt32>, (Array<Array<Bool>>, Array<Unit>, Range<Int16>, Range<UInt64>, Array<Range<UInt32>>)) = ((UInt32(227)&127..=UInt32(239)&127:61|1), ([[true, false, true, false, true, false, false, false, true, true], [false, false, false, true, true, false, true, false, false, true], [false, false, true, false, true, true, false, true, false, true], [false, false, true, true, false, true, false, true, false, false], [false, false, false, false, true, true, true, false, true, true], [true, false, false, true, true, false, false, false, true, false], [false, false, false, false, true, true, false, false, true, false], [false, false, true, true, true, false, false, true, false, false], [true, true, true, true, true, false, false, false, false, true], [false, false, true, true, true, true, true, false, false, true]], [(), (), (), (), (), (), (), (), (), ()], (Int16(-41)&127..=Int16(0)&127:29|1), (UInt64(40)&127..=UInt64(48)&127:(-70)|1), [(UInt32(159)&127..=UInt32(95)&127:(-31)|1), (UInt32(171)&127..UInt32(173)&127:(-38)|1), (UInt32(142)&127..UInt32(217)&127:109|1), (UInt32(26)&127..UInt32(2)&127:(-57)|1), (UInt32(87)&127..UInt32(17)&127:124|1), (UInt32(104)&127..UInt32(78)&127:86|1), (UInt32(195)&127..=UInt32(104)&127:17|1), (UInt32(149)&127..UInt32(164)&127:(-19)|1), (UInt32(252)&127..=UInt32(69)&127:(-115)|1), (UInt32(141)&127..=UInt32(190)&127:(-35)|1)]));
            var var3483 : Int8 = Int8(Int8(-24));
            var var3505 : Class526 = Class526();
            match {
                case var2675 => 
                var var2894 : Float32 = Float32(67.0);
                try (resource = Class526()) { // block id: 2876
                    ();
                    ();
                    var1683
                } catch (_) { // block id: 2880
                    ();
                    Option<(Bool, Range<UInt32>)>.Some(var2094);
                    var1683
                } finally { // block id: 2885
                    var2887;
                    (var2891, var2894, UInt64(100), var686, var2899, UInt8(168));
                    var2906++
                };
                if (var2675) { // block id: 2911
                    var1977 = UInt32(149)
                };
                let var3382 : Range<UInt64> = (UInt64(149)&127..UInt64(UInt32(Int8(UInt8(137))))&127:(Int64(Int16(UInt16(52)))|1));
                let var3394 : Bool = false;
                match {
                    case var281 => 
                    (UInt64(113)&127..=var1991&127:((-128)|1));
                    ();
                    let var2954 : Array<Array<Bool>> = Array<Array<Bool>>(10){ i => [([[true, true, false, false, false, true, true, true, false, false], [true, false, false, true, false, false, false, false, true, false], [false, false, true, false, false, true, false, true, true, true], [true, false, false, false, false, false, true, false, true, false], [true, false, true, true, true, true, false, false, false, true], [true, true, false, true, false, false, true, true, true, false], [false, false, false, false, false, true, false, false, false, false], [true, true, true, false, true, true, true, false, true, false], [false, true, false, true, false, false, true, false, false, true], [true, true, false, false, true, false, false, true, false, true]] is UInt16), true, false, true, true, true, (((UInt16(237)&127..=UInt16(48)&127:48|1), Int8(87), Class526(namedParam2973 : [(UInt32(252)&127..UInt32(243)&127:((-128)|1)), (UInt32(16)&127..UInt32(248)&127:((-14)|1)), (UInt32(15)&127..UInt32(82)&127:(10|1)), (UInt32(224)&127..=UInt32(134)&127:(79|1)), (UInt32(212)&127..UInt32(18)&127:119|1), (UInt32(246)&127..UInt32(249)&127:(-35)|1), (UInt32(187)&127..=UInt32(6)&127:(-59)|1), (UInt32(154)&127..=UInt32(156)&127:(-19)|1), (UInt32(24)&127..=UInt32(225)&127:99|1), (UInt32(20)&127..=UInt32(156)&127:(-8)|1)]), (UInt8(46)&127..UInt8(173)&127:(20|1)), Float32(6.0), 'c') is (Range<UInt32>, (Array<Array<Bool>>, Array<Unit>, Range<Int16>, Range<UInt64>, Array<Range<UInt32>>))), false, (UInt16(85) is Array<Array<Bool>>), false] };
                    if (var2647) { var2926 } else { (var1583, (var2954, [(), (), (), (), (), (), (), (), (), ()], (var1613&127..=Int16(-91)&127:((-42)|1)), var3382, [(UInt32(160)&127..UInt32(207)&127:110|1), (UInt32(223)&127..UInt32(153)&127:(-7)|1), (UInt32(113)&127..=UInt32(94)&127:(-28)|1), (UInt32(24)&127..UInt32(176)&127:45|1), (UInt32(236)&127..UInt32(51)&127:78|1), (UInt32(142)&127..UInt32(69)&127:(-5)|1), (UInt32(120)&127..UInt32(217)&127:(-26)|1), (UInt32(216)&127..=UInt32(39)&127:(-34)|1), (UInt32(228)&127..UInt32(131)&127:53|1), (UInt32(41)&127..=UInt32(154)&127:(-94)|1)])) } 
                    case var3394 => 
                    if (true) { [true, false, false, false, false, false, false, true, true, false] } else { [true, false, true, false, true, false, true, true, true, true] } ;
                    var2926
                    case _ => 
                    ();
                    if (var3394) { var2926 } else { var3408 } 
                }
                case _ => 
                if (var281) { // block id: 3480
                    var3483 **= (Int8(-97) & 3);
                    ()
                } else if (false) { // block id: 3489
                    ();
                    ()
                };
                try { // block id: 3493
                    var281 ||= false;
                    (var2774, var1801)
                } catch (e: Exception) { // block id: 3500
                    Int8(-48);
                    if (var281) { var3505 } else { var3505 } ;
                    (var1583, ([[false, true, false, false, false, true, false, false, true, false], [true, true, false, true, true, false, false, true, false, true], [false, false, true, false, false, false, false, true, true, false], [true, true, true, true, false, true, false, false, true, true], [false, false, false, false, false, true, true, true, true, true], [true, true, false, false, true, false, true, true, true, false], [false, true, false, true, false, false, true, false, false, true], [true, true, false, false, false, false, true, true, false, false], [false, true, false, false, false, true, false, false, false, false], [true, true, true, false, true, false, false, false, true, true]], var874, (var1613&127..=var1613&127:((-86)|1)), (UInt64(71)&127..var3520&127:(82|1)), [var1583, (UInt32(17)&127..var1980&127:(94|1)), (UInt32(225)&127..UInt32(2)&127:43|1), var2774, var1583, (UInt32(137)&127..var1977&127:(110|1)), (UInt32(250)&127..=UInt32(99)&127:(-50)|1), var1583, (var462&127..var1980&127:(3|1)), (UInt32(64)&127..var3545&127:((-60)|1))]))
                } finally { // block id: 3550
                    (UInt64(7)&127..var3520&127:(14|1));
                    ();
                    var2926
                }
            }
        }
;
        let var3715 : Bool = (6 is Range<Int32>);
        let var3728 : Interface531 = Class526(namedParam2973 : [(UInt32(15)&127..UInt32(166)&127:122|1), (UInt32(Int16(37))&127..=UInt32(UInt32(196))&127:(Int64(UInt32(182))|1)), (UInt32(4)&127..UInt32(204)&127:(-7)|1), (UInt32(Int32(48))&127..UInt32(UInt8(69))&127:(31|1)), (UInt32(235)&127..=UInt32(74)&127:(-87)|1), (UInt32(Int32(-89))&127..=UInt32(219)&127:(Int64(Int8(15))|1)), (UInt32(Int32(51))&127..=UInt32(Int16(-43))&127:(Int64(Int8(51))|1)), (UInt32(Int8(58))&127..UInt32(UInt32(173))&127:(76|1)), (UInt32(Int8(-101))&127..UInt32(UInt32(208))&127:(Int64(UInt32(8))|1)), (UInt32(Int16(121))&127..=UInt32(Int32(26))&127:((-96)|1))]);
        func func3936() : Int64 { // block id: 3937
            var3939;
            var var4139 : Option<Int8> = Option<Int8>.None;
            (try { // block id: 3943
                ();
                Option<Unit>.None
            } finally { // block id: 3946
                Option<Unit>.Some(var1683)
            } ?? ((var4139 ?? Int8(-46))|>(func3988~>func3951)));
            ((Option<Option<Int64>>.None ?? Option<Int64>.None) ?? var1596 - 81) + try { // block id: 4159
                var1980 -= var462;
                97
            } catch (_) { // block id: 4164
                124.0;
                var252
            }
        }
;
        var loopTimeVar4261 : Int64 = 0;
        do {
            loopTimeVar4261++;
            let var3583 : Int64 = (-44);
            let var3637 : (Array<Bool>, Float64, Array<Int16>, (Range<UInt8>, UInt64, Unit, Range<Int32>, Range<UInt32>), UInt64, Array<Range<UInt32>>, Int16) = ([false, true, true, false, true, true, true, false, true, true], Float64(Float64(Float64(45.0))), [Int16(80), Int16(46), Int16(38), Int16(-100), Int16(83), Int16(-62), Int16(78), Int16(112), Int16(-33), Int16(123)], ((UInt8(88)&127..UInt8(57)&127:27|1), UInt64(100), (), (Int32(-113)&127..Int32(UInt8(5))&127:(Int64(14)|1)), (UInt32(94)&127..=UInt32(UInt32(51))&127:(38|1))), UInt64(Int32(115)), [(UInt32(124)&127..UInt32(201)&127:4|1), (UInt32(244)&127..UInt32(95)&127:41|1), (UInt32(Int8(37))&127..UInt32(245)&127:(Int64(UInt64(84))|1)), (UInt32(UInt32(218))&127..=UInt32(Int16(12))&127:(Int64(Int16(-99))|1)), (UInt32(162)&127..UInt32(191)&127:88|1), (UInt32(135)&127..UInt32(241)&127:(-90)|1), (UInt32(102)&127..UInt32(11)&127:(-56)|1), (UInt32(209)&127..UInt32(112)&127:(-127)|1), (UInt32(239)&127..=UInt32(194)&127:22|1), (UInt32(24)&127..=UInt32(UInt8(228))&127:(Int64(UInt16(236))|1))], Int16(Int8(-89)));
            func func2860() : (Range<UInt8>, UInt64, Unit, Range<Int32>, Range<UInt32>) { // block id: 2861
                func2863(optionalParam2864 : (var3564 ?? Int32(-77)) ^ Int32(var1977), namedParam2868 : try { // block id: 3571
                    50.0;
                    if (var2667) { (UInt8(45)&127..=var2899&127:(var1596|1)) } else { (UInt8(152)&127..UInt8(210)&127:(var3583|1)) } 
                } finally { // block id: 3585
                    Option<Unit>.Some(var1683);
                    if (true) { ([true, false, true, true, false, false, true, false, false, false], 92.0, [var1613, Int16(-117), Int16(-89), var1613, var1613, Int16(58), Int16(110), var3602, var3602, var1613], var2785, var1991, [(UInt32(226)&127..var3545&127:(var252|1)), (UInt32(212)&127..UInt32(14)&127:(-81)|1), (UInt32(157)&127..=UInt32(126)&127:(var3583|1)), (UInt32(174)&127..UInt32(145)&127:(var252|1)), var2774, (UInt32(124)&127..=UInt32(170)&127:(-121)|1), (var1977&127..=var1980&127:(var3583|1)), var1583, (var3545&127..=var1980&127:(var1596|1)), var2774], var1613) } else { var3637 } ;
                    var2729
                });
                var var3844 : ?Bool = ((Int32(78)&127..=Int32(UInt16(177))&127:((-61)|1)) as Bool);
                if (try { // block id: 3695
                    var281 ||= var2675;
                    var3700;
                    var281
                } finally { // block id: 3713
                    var3715
                } && (var2926 is Option<(Bool, Range<UInt32>)>)) { // block id: 3720
                    match ('e') {
                        case 'v' => 
                            var1683;
                            var3728
                        
                        case _ : Array<Array<Bool>> => 
                            Class526()
                        
                        case '6' => 
                            var3788;
                            if (false) { Class526(optionalParam2970 : Option<Bool>.Some(var2647), namedParam2973 : var1911) } else { var3819 } 
                        
                        case _ => 
                            var2785;
                            var3819
                        
                    };
                    var var3837 : Rune = 'B';
                    match (var1683) {
                        case _ => 
                            Int16(-83);
                            var1683
                        
                        case _ => 
                            ();
                            var3837 = 'e'
                        
                    }
                } else if (((Option<Option<Bool>>.None ?? var3844) ?? (var3853 is (Array<Unit>, Unit, (String, Range<Int16>), Range<UInt64>, Range<Int16>, (String, Range<Int16>))))) { // block id: 3896

                };
                var var4173 : Int8 = Int8(UInt8(64));
                var loopTimeVar4240 : Int64 = 0;
                ((try { // block id: 3900
                    UInt8(205) / ((var2899) | 1)
                } finally { // block id: 3904
                    ();
                    ();
                    var2899
                }&127..=-UInt8(229)&127:(try { // block id: 3911
                    if (var3715) { var1911 } else { var1911 } ;
                    let var3924 : UInt8 = UInt8(Int8(-94));
                    if (true) { (var2899&127..=var2899&127:(var1596|1)) } else { (var3924&127..UInt8(134)&127:(var1596|1)) } ;
                    (-126)
                } finally { // block id: 3930
                    var1683;
                    ();
                    var3583
                }|1)), match (func3936()) {
                    case _ : Option<Range<UInt32>> => 
                        var1683;
                        var4173 >>= ((Int8(0)) & 7);
                        var3520
                    
                    case _ => 
                        UInt64(57)
                    
                    case _ : Array<Array<Bool>> => 
                        if (true) { Class526(optionalParam2970 : var3844, namedParam2973 : [(UInt32(94)&127..UInt32(71)&127:(-58)|1), (UInt32(177)&127..UInt32(188)&127:(-33)|1), var4193, var1583, (UInt32(161)&127..UInt32(116)&127:3|1), (UInt32(192)&127..UInt32(106)&127:(-3)|1), (var1980&127..=var1977&127:(var1596|1)), var3939, var2774, var4193]) } else { Class526(optionalParam2970 : var3844, namedParam2973 : var1911) } ;
                        if (false) { var2517 } else { Option<Unit>.Some(()) } ;
                        var3520
                    
                    case -78 => 
                        ();
                        var3520 / ((UInt64(240)) | 1)
                    
                    case _ => 
                        var3520
                    
                }, ((var4231 ?? Option<Unit>.Some(())) ?? while ((var3715) && loopTimeVar4240 < 100 ) {
                    loopTimeVar4240++;

                }), (Int32(-18)&127..Int32(73)&127:77|1), (try { // block id: 4244
                    ();
                    var4247
                } finally { // block id: 4249
                    (Int8(126)&127..var4173&127:(var252|1));
                    var1683;
                    if (true) { var4247 } else { var4247 } 
                } ?? var4193))
            }
;
            func2860()
        } while (((var2621, var2602, UInt64(177), UInt16(149), UInt8(127), UInt8(221))[4] <= match (var2285) {
            case caseVar2643 => 
                if (var2647) { (Float32(-68.0), [(), (), (), (), (), (), (), (), (), ()], 'P', (), var753, [var2647, false, var2667, var2667, false, false, var281, var2675, var281, var2647], (-103.0), (true, var1583)) } else { var2704 } ;
                var var2746 : Int64 = (-69);
                if (var281) { ([true, true, true, true, false, true, false, true, false, true], (-87.0), [Int16(13), Int16(105), Int16(114), Int16(-70), Int16(102), Int16(30), Int16(4), Int16(66), Int16(28), Int16(-95)], (var2729, UInt64(15), (), var2740, (var1980&127..=UInt32(7)&127:(var2746|1))), var1991, [(var1977&127..=UInt32(144)&127:(var2746|1)), (var462&127..=UInt32(220)&127:((-126)|1)), var1583, var1583, (var1977&127..=var462&127:((-96)|1)), var1583, (var1980&127..=UInt32(209)&127:(var2769|1)), (UInt32(185)&127..=UInt32(180)&127:(-45)|1), var2774, (UInt32(51)&127..UInt32(94)&127:(-38)|1)], var1613) } else { ([false, false, false, false, true, true, false, true, true, true], var2781, [Int16(-79), Int16(104), Int16(-56), Int16(80), Int16(89), Int16(-64), Int16(-78), Int16(-55), Int16(21), Int16(-41)], var2785, UInt64(122), var1911, Int16(8)) } ;
                UInt8(18)
            
            case (caseVar2814 : Array<Rune>,caseVar2815 : Interface532,caseVar2816 : Int8,caseVar2817,caseVar2818 : (String, Range<Int16>),_) => 
                var2821;
                var var2844 : UInt8 = UInt8(113);
                UInt8(147) % ((var2844) | 1)
            
            case _ : Unit => 
                UInt8(78)
            
            case _ => 
                var var2854 : UInt8 = UInt8(UInt8(130));
                var2854 << ((var2854) & 7)
            
        }) && loopTimeVar4261 < 100 ) ;
        let var4268 : Interface530 = Class526();
        match (try { // block id: 4264
                var4034;
                var1683;
                var4268
            } finally { // block id: 4270
                Class526(optionalParam2970 : var2821, namedParam2973 : [(UInt32(213)&127..UInt32(187)&127:(-6)|1), (UInt32(208)&127..UInt32(156)&127:(-88)|1), (UInt32(53)&127..=UInt32(69)&127:123|1), (UInt32(200)&127..UInt32(19)&127:(-80)|1), (UInt32(188)&127..UInt32(207)&127:(-28)|1), (UInt32(113)&127..UInt32(203)&127:68|1), (UInt32(228)&127..UInt32(146)&127:65|1), (UInt32(21)&127..=UInt32(76)&127:(-29)|1), (UInt32(129)&127..UInt32(51)&127:(-122)|1), (UInt32(246)&127..=UInt32(119)&127:(-127)|1)])
            }) {
            case _ : Range<Int16> => 
                if (false) { [(), (), (), (), (), (), var4034, (), var4034, var4034] } else { [(), (), (), (), (), (), (), (), (), ()] } 
            
            case _ => 
                [(), (), (), (), (), (), (), (), (), ()]
            
            case _ : (Float32, Array<Unit>, Rune, Unit, String, Array<Bool>, Float64, (Bool, Range<UInt32>)) => 
                if (false) { [(), (), (), (), (), (), (), (), (), ()] } else { [(), (), (), (), (), (), (), (), (), ()] } 
            
            case caseVar4304 : Option<(Bool, Range<UInt32>)> => 
                ();
                let var4312 : Unit = ();
                [var1683, var4034, (), var4312, var1683, var1683, var4317, var4034, (), ()]
            
            case _ => 
                if (var2647) { [var1683, (), var1683, var1683, var4034, (), (), (), var4034, var4317] } else { [(), (), (), (), (), (), (), (), (), ()] } 
            
        }
    }
;
    var var4339 : (Range<UInt32>) -> Unit = func1200;
    let var4342 : (Range<UInt32>) -> Option<Bool> = func324;
    let var4347 : Option<Option<Int64>> = Option<Option<Int64>>.Some(((['P', 'e', 's', 't', 'D', 'M', 'k', 'w', 'L', '4'], Float32(Float32(56.0)), UInt64(99), UInt16(78), UInt8(UInt8(135)), UInt8(UInt8(102))) as Int64));
    var var4381 : Int16 = Int16(-26);
    var loopTimeVar4437 : Range<UInt64> = (UInt64(UInt8(UInt8(Int8(103))))&127..UInt64(226)&127:((-57)|1));
    (match (var2551) {
        case caseVar2560 : (Bool, Range<UInt32>) => 
            ([[true, false, true, false, true, true, false, true, false, false], [false, true, true, true, true, true, false, true, true, false], [false, true, true, true, false, true, true, false, true, true], [true, true, false, true, true, true, false, false, false, false], [false, true, false, true, false, false, true, false, true, false], [true, true, true, true, false, false, true, true, true, true], [false, true, false, false, false, true, false, true, true, false], [false, false, true, false, true, false, true, true, true, true], [false, true, true, true, true, true, false, true, false, true], [true, true, true, false, true, false, true, false, true, true]], [(), var1683, var1683, (), var1683, (), var1683, var1683, (), ()], (Int16(-43)&127..=Int16(28)&127:70|1), (var2578&127..=UInt64(190)&127:(var252|1)), [(UInt32(144)&127..=UInt32(224)&127:45|1), (UInt32(68)&127..=UInt32(149)&127:(-39)|1), (UInt32(10)&127..=UInt32(111)&127:64|1), (UInt32(168)&127..=UInt32(156)&127:61|1), (UInt32(253)&127..=UInt32(104)&127:(-70)|1), (UInt32(200)&127..UInt32(121)&127:92|1), (UInt32(168)&127..=UInt32(137)&127:(-101)|1), (UInt32(134)&127..UInt32(121)&127:65|1), (UInt32(43)&127..=UInt32(73)&127:(-103)|1), (UInt32(200)&127..=UInt32(84)&127:(-112)|1)]);
            var2080
        
        case caseVar2586 => 
            var2080
        
        case caseVar2591 => 
            var var2595 : UInt16 = UInt16(11);
            var2595 = UInt16(75);
            var2080
        
        case _ => 
            var2602
        
    }, func2606(var4339, var4342, try { // block id: 4345
        var4347;
        [Int16(60), var1613, Int16(122), var3602, Int16(59), var1613, Int16(61), var1613, var3602, var3602]
    } finally { // block id: 4371
        var2357 + Int32(-98);
        [var1613, var3602, Int16(27), var3602, var4381, var1613, var1613, Int16(-8), var3602, Int16(87)]
    }), var578, for (i in loopTimeVar4437 where (var252 is () -> (Range<UInt8>, UInt64, Unit, Range<Int32>, Range<UInt32>))) {
        var4317;
        let var4398 : ?Bool = ([(UInt32(211)&127..UInt32(249)&127:(-31)|1), (UInt32(144)&127..=UInt32(10)&127:20|1), (UInt32(Int16(-52))&127..=UInt32(Int16(110))&127:(Int64(Int16(28))|1)), (UInt32(UInt16(123))&127..UInt32(225)&127:(119|1)), (UInt32(161)&127..UInt32(107)&127:123|1), (UInt32(196)&127..UInt32(59)&127:68|1), (UInt32(128)&127..=UInt32(69)&127:(Int64(UInt32(184))|1)), (UInt32(111)&127..UInt32(UInt16(40))&127:(Int64(Int32(-31))|1)), (UInt32(228)&127..UInt32(130)&127:(86|1)), (UInt32(41)&127..=UInt32(19)&127:(67|1))] as Bool);
        if (false) { Option<Option<Bool>>.Some(var4398) } else { Option<Option<Bool>>.None } 
    }, if ((var566 is Option<Option<Int64>>)) { // block id: 4448
        var2704;
        var2740;
        if (false) { "t7J_Ej-0^+" } else { var753 } 
    } else { // block id: 4455
        Int8(-72);
        var252 <<= ((51) & 7);
        var753
    }, try { // block id: 4462
        (124&127..var252&127:(122|1));
        [true, true, false, true, true, true, true, false, true, false];
        [true, false, false, false, true, false, false, true, true, true]
    } finally { // block id: 4469
        ();
        [true, false, true, false, true, false, true, false, true, true]
    }, Float64(match ([true, true, false, true, true, true, true, false, false, true]) {
        case _ => 
            ();
            var1683;
            Float32(46.0)
        
        case _ : (Range<UInt8>, UInt64, Unit, Range<Int32>, Range<UInt32>) => 
            var2602
        
        case _ : Option<Array<Bool>> => 
            Float32(24.0)
        
        case caseVar4491 => 
            var2357 ^= Int32(112);
            var252 &= 30;
            var2602
        
        case _ => 
            Float32(-94.0)
        
    }), var2094)
}

func func4505<T0, T1>(param271 : Range<UInt16>) : Unit { // block id: 272
    var var293 : Float32 = Float32(Float32(24.0));
    var loopTimeVar302 : Int64 = 0;
    do {
        loopTimeVar302++;

    } while (((Option<Bool>.Some(var281) ?? try { // block id: 290
        var293 %= Float32((Int32(Float32(-1.0))) | 1);
        true
    } finally { // block id: 298
        true
    })) && loopTimeVar302 < 100 ) 
}


func func2319(param2320 : Int64) : (Float32, Array<Unit>, Rune, Unit, String, Array<Bool>, Float64, (Bool, Range<UInt32>)) { // block id: 2321
    [(), (), (), (), (), (), (), (), (), ()][2];
    var var2334 : UInt8 = UInt8(Int8(UInt8(UInt8(75))));
    let var2364 : Bool = true;
    var var2367 : ?Bool = Option<Bool>.Some(false);
    var var2443 : Bool = ((Int8(-79)&127..=Int8(-74)&127:(-56)|1) is Array<Rune>);
    let var2465 : Bool = (([Int16(-51), Int16(UInt16(72)), Int16(39), Int16(Int16(-116)), Int16(UInt16(194)), Int16(Int16(-4)), Int16(UInt16(154)), Int16(-60), Int16(-28), Int16(23)] as Array<Bool>) is Range<UInt8>);
    if (func583(optionalParam584 : UInt64(165) * UInt64(159), namedParam586 : try { // block id: 2331
        (var2334&127..=UInt8(158)&127:((-56)|1));
        var578;
        (UInt32(41)&127..=UInt32(121)&127:(49|1))
    } catch (e: Exception) { // block id: 2346
        (var462&127..UInt32(152)&127:(57|1))
    } finally { // block id: 2351
        var2334 %= ((var2334) | 1);
        var2357 >>= ((Int32(108)) & 7);
        var1583
    }, optionalParam587 : if (var2364) { var2367 } else { Option<Bool>.Some(true) } , namedParam589 : try { // block id: 2373
        var252 **= (69 & 3);
        if (true) { 'E' } else { 'z' } 
    } finally { // block id: 2381
        var1683;
        var1683;
        if (var281) { 's' } else { var578 } 
    })) { try { // block id: 2389
        ();
        Option<Unit>.None
    } catch (e: Exception) { // block id: 2392
        var252;
        (UInt32(207)&127..=UInt32(158)&127:107|1);
        if (true) { Option<Unit>.None } else { Option<Unit>.None } 
    } finally { // block id: 2399
        var var2413 : Array<Bool> = [false, false, false, true, false, false, false, true, false, false];
        [[var281, false, var2364, var281, var2364, var2364, var281, var281, true, var2364], var2413, [var2364, false, var281, false, false, true, var281, true, false, var2364], var1429, var1285, [var2364, var2364, var2364, false, false, false, var281, true, var281, false], var1429, var2413, [var2443, false, var2443, false, var2364, true, var281, var281, false, var2443], [true, true, var281, true, var2443, var2443, var281, var2364, var2465, true]];
        Option<Unit>.None
    } } else { match (if (var2465) { [var1613, Int16(71), Int16(-7), var1613, var1613, Int16(-37), Int16(-126), var1613, Int16(89), var1613] } else { [var1613, var1613, Int16(-53), Int16(88), var1613, Int16(-61), var1613, var1613, var1613, var1613] } ) {
        case caseVar2513 : UInt32 => 
            'B';
            var2517
        
        case _ => 
            var var2523 : Unit = ();
            var2523;
            if (false) { [[false, false, false, true, false, true, false, false, true, false], [false, true, true, true, false, true, false, false, false, false], [true, true, false, true, true, true, false, false, false, false], [true, true, false, false, true, true, false, false, false, false], [true, true, false, false, true, false, true, false, true, true], [false, true, false, false, false, false, false, true, true, false], [false, true, true, false, false, false, true, true, false, false], [true, false, false, true, false, true, false, true, false, true], [false, true, false, false, false, true, false, false, false, true], [false, true, false, true, true, true, false, true, true, false]] } else { [[true, true, false, false, true, true, false, true, false, false], [false, false, false, true, true, true, false, false, true, true], [true, true, false, true, true, false, true, false, false, true], [false, true, true, true, true, true, false, false, false, false], [true, true, false, true, false, false, false, false, false, false], [true, true, true, true, false, true, true, false, false, true], [false, true, false, true, false, true, false, false, true, false], [true, false, false, true, true, false, true, false, true, true], [false, true, false, true, false, true, false, false, true, false], [false, false, true, false, false, true, true, true, true, false]] } ;
            var2517
        
    } } ;
    func func2534<T0>(namedParam2535 ! : Range<Int64>, optionalParam2536 ! : Interface531 = Class526()) : Array<Bool> { // block id: 2538
        [false, true, true, true, false, true, true, false, false, true]
    }
;
    var var4508 : (Range<UInt16>) -> Unit = func4505<Int16, Range<UInt16>>;
    let var4527 : Array<Bool> = [true, true, false, true, true, false, false, false, true, true];
    var var4549 : Unit = ();
    let var4565 : Bool = true;
    if (func2534<Option<(Bool, Range<UInt32>)>>(namedParam2535 : (31&127..=23&127:72|1))[7]) { (var4508|>func2543) } else { (var2602 ** Float32(Int32(var2080) & 3), (Option<Array<Unit>>.None ?? [(), (), (), (), (), (), (), (), (), ()]), try { // block id: 4522
        var578
    } catch (e: Exception) { // block id: 4524
        ();
        var4527;
        if (true) { 'x' } else { 'c' } 
    } finally { // block id: 4533
        'V'
    }, (var2334 ^= UInt8(146)), try { // block id: 4539
        if (false) { var753 } else { "-,8x;X.ZPS" } 
    } catch (_) { // block id: 4544
        var753
    } finally { // block id: 4546
        var1991;
        var4549;
        "dhlT/yU@0)"
    }, try { // block id: 4553
        var2334 &= var2334;
        var4527
    } finally { // block id: 4558
        ();
        if (var2465) { [true, var4565, var2443, false, false, false, true, false, var2465, var4575] } else { var1285 } 
    }, match (var4580) {
        case _ => 
            var686;
            ();
            (-114.0)
        
    }, (var2443, (UInt32(28)&127..=UInt32(149)&127:((-110)|1)))) } 
}



func func2210(param2211 : (UInt64, Range<UInt32>, Option<Bool>, Rune) -> Bool) : (Array<Bool>, Float64, Array<Int16>, (Range<UInt8>, UInt64, Unit, Range<Int32>, Range<UInt32>), UInt64, Array<Range<UInt32>>, Int16) { // block id: 2217
    (if (var281) { var2228 } else { var2228 } [5] ?? if (var281) { (var874, (), var1172, (UInt64(91)&127..UInt64(191)&127:(var252|1)), (Int16(-69)&127..=Int16(-66)&127:34|1), var1172) } else { var2285 } [1]);
    let var4594 : (Int64) -> (Float32, Array<Unit>, Rune, Unit, String, Array<Bool>, Float64, (Bool, Range<UInt32>)) = func2319;
    var var4603 : Option<(Float32, Array<Unit>, Rune, Unit, String, Array<Bool>, Float64, (Bool, Range<UInt32>))> = Option<(Float32, Array<Unit>, Rune, Unit, String, Array<Bool>, Float64, (Bool, Range<UInt32>))>.Some((Float32(-99.0), [(), (), (), (), (), (), (), (), (), ()], 'v', (), ###"sF~~3j!Iv)"###, [(Float32(-21.0) is (String, Float64) -> ((Range<UInt8>, UInt64, Unit, Range<Int32>, Range<UInt32>), Array<Unit>, Float64, Range<Int16>, Bool, Int64, Array<Bool>, String, Unit)), false, false, true, false, true, ([Option<Unit>.None, Option<Unit>.Some(()), Option<Unit>.None, Option<Unit>.Some(()), Option<Unit>.Some(()), Option<Unit>.Some(()), Option<Unit>.None, Option<Unit>.Some(()), Option<Unit>.Some(()), Option<Unit>.None] is (UInt64, Range<UInt32>, Option<Bool>, Rune) -> Bool), ([(UInt32(154)&127..UInt32(59)&127:((-44)|1)), (UInt32(206)&127..=UInt32(153)&127:(40|1)), (UInt32(179)&127..=UInt32(25)&127:(11|1)), (UInt32(127)&127..UInt32(207)&127:(42|1)), (UInt32(200)&127..=UInt32(64)&127:(-40)|1), (UInt32(68)&127..UInt32(158)&127:(23|1)), (UInt32(54)&127..UInt32(248)&127:(77|1)), (UInt32(244)&127..UInt32(154)&127:60|1), (UInt32(28)&127..UInt32(222)&127:(81|1)), (UInt32(22)&127..=UInt32(51)&127:(21|1))] is Option<Option<Unit>>), true, ([Int16(-61), Int16(-122), Int16(-53), Int16(10), Int16(80), Int16(-107), Int16(44), Int16(-103), Int16(-60), Int16(63)] is Array<Range<UInt32>>)], Float64(Float32(Float32(23.0))), ((((UInt32(225)&127..=UInt32(229)&127:(73|1)), ([[false, false, false, true, true, true, false, true, true, true], [false, true, false, false, true, true, false, true, false, false], [true, false, false, false, false, true, false, true, true, false], [false, true, true, true, true, true, true, true, true, true], [false, true, false, true, true, true, true, true, false, false], [false, false, true, false, true, false, true, false, true, true], [true, false, false, false, true, false, false, false, false, true], [true, false, false, false, false, false, false, true, true, true], [true, true, false, false, false, true, true, false, true, false], [true, true, true, true, true, false, true, true, false, false]], [(), (), (), (), (), (), (), (), (), ()], (Int16(-17)&127..Int16(31)&127:((-52)|1)), (UInt64(227)&127..=UInt64(41)&127:(47|1)), [(UInt32(20)&127..UInt32(51)&127:(1|1)), (UInt32(250)&127..=UInt32(189)&127:(35|1)), (UInt32(49)&127..=UInt32(29)&127:(-71)|1), (UInt32(74)&127..=UInt32(126)&127:((-94)|1)), (UInt32(76)&127..UInt32(47)&127:(-94)|1), (UInt32(83)&127..UInt32(151)&127:(89|1)), (UInt32(93)&127..=UInt32(237)&127:(-9)|1), (UInt32(222)&127..UInt32(150)&127:(-47)|1), (UInt32(179)&127..UInt32(186)&127:(-96)|1), (UInt32(65)&127..=UInt32(47)&127:(63|1))])) is Option<Option<Unit>>), (UInt32(163)&127..UInt32(11)&127:((-52)|1)))));
    if ((Option<Bool>.None ?? var281)) { (38|>var4594) } else { (var4603 ?? var2704) } [3];
    let var4763 : (Array<Bool>, Float64, Array<Int16>, (Range<UInt8>, UInt64, Unit, Range<Int32>, Range<UInt32>), UInt64, Array<Range<UInt32>>, Int16) = ([true, true, false, true, false, false, true, true, false, false], Float64(Float32(43.0)), [Int16(Int8(Int8(-28))), Int16(-126), Int16(-63), Int16(Int8(UInt8(104))), Int16(-111), Int16(-9), Int16(124), Int16(UInt16(UInt8(126))), Int16(UInt8(UInt8(191))), Int16(Int8(Int8(-102)))], ((UInt8(44)&127..UInt8(Int8(-11))&127:(Int64(UInt8(96))|1)), UInt64(UInt16(201)), (), (Int32(UInt8(29))&127..=Int32(Int16(9))&127:(Int64((-96))|1)), (UInt32(128)&127..=UInt32(1)&127:79|1)), UInt64(158), [(UInt32(UInt16(167))&127..UInt32(Int32(28))&127:((-49)|1)), (UInt32(100)&127..=UInt32(35)&127:49|1), (UInt32(UInt16(228))&127..UInt32(146)&127:((-22)|1)), (UInt32(105)&127..=UInt32(4)&127:(-105)|1), (UInt32(111)&127..=UInt32(125)&127:77|1), (UInt32(UInt16(230))&127..UInt32(UInt8(77))&127:(Int64((-51))|1)), (UInt32(17)&127..UInt32(126)&127:(-34)|1), (UInt32(Int32(-35))&127..=UInt32(31)&127:(Int64(UInt64(148))|1)), (UInt32(242)&127..=UInt32(UInt32(85))&127:(Int64(Int32(106))|1)), (UInt32(53)&127..UInt32(74)&127:44|1)], Int16(Int16(7)));
    var var4854 : ?Array<Array<Bool>> = Option<Array<Array<Bool>>>.Some([[false, true, true, true, true, false, false, true, true, false], [true, false, true, true, false, true, true, true, true, false], [true, true, false, true, true, false, false, true, true, true], [false, true, false, true, true, true, true, false, false, true], [false, false, true, false, true, true, false, true, true, true], [false, true, false, false, true, false, false, true, false, false], [true, false, true, true, true, false, true, true, false, true], [true, true, false, false, true, false, false, true, false, true], [true, true, false, false, false, true, true, true, false, false], [true, true, true, false, true, true, true, false, false, false]]);
    match {
        case var2647 => 
        var4763
        case _ => 
        (Option<Option<Array<Array<Bool>>>>.Some(var4854) ?? Option<Array<Array<Bool>>>.Some([[false, false, false, true, false, true, true, true, true, true], [false, true, false, true, false, true, false, true, true, true], [true, true, true, true, false, true, false, true, false, true], [true, false, false, true, true, false, false, true, true, false], [true, true, true, true, true, false, true, true, false, false], [true, false, true, true, true, false, false, false, true, true], [true, true, false, true, true, true, true, true, true, true], [false, false, true, true, false, true, true, false, false, false], [false, false, true, false, true, true, false, true, true, false], [true, true, true, true, true, false, false, false, false, true]]));
        if (var2647) { var4763 } else { ([false, false, false, true, false, true, false, true, true, false], (-44.0), [Int16(60), Int16(68), Int16(108), Int16(70), Int16(4), Int16(50), Int16(94), Int16(52), Int16(1), Int16(81)], ((UInt8(143)&127..=var4870&127:(52|1)), var1991, var1683, var2740, var3939), UInt64(233), var1911, var1613) } 
    }
}

public func func4887(optionalParam584 : UInt64, namedParam586 : Range<UInt32>, optionalParam587 : Option<Bool>, namedParam589 : Rune) : Bool { // block id: 590
    var var618 : Unit = ();
    let var692 : UInt16 = UInt16(66);
    let var701 : UInt8 = UInt8(4);
    var var710 : (Range<UInt8>, UInt64, Unit, Range<Int32>, Range<UInt32>) = ((UInt8(UInt8(Int8(-125)))&127..UInt8(73)&127:(Int64(Int32(UInt32(22)))|1)), UInt64(211), (), (Int32(45)&127..=Int32(Int16(-85))&127:(Int64((-14))|1)), (UInt32(Int32(Int16(29)))&127..UInt32(195)&127:(Int64(Int32(Int8(-63)))|1)));
    let var800 : (Range<UInt8>, UInt64, Unit, Range<Int32>, Range<UInt32>) = ((UInt8(Int8(-7))&127..UInt8(UInt8(UInt8(169)))&127:(Int64(Int32(UInt8(173)))|1)), UInt64(145), (), (Int32(-47)&127..=Int32(-98)&127:(-48)|1), (UInt32(171)&127..UInt32(34)&127:(Int64(Int16(53))|1)));
    let var972 : Unit = ();
    let var1047 : Bool = true;
    func func908(optionalParam909 ! : String = ###"Y)%h\\JUUzy"###, namedParam911 ! : Float64) : ((Range<UInt8>, UInt64, Unit, Range<Int32>, Range<UInt32>), Array<Unit>, Float64, Range<Int16>, Bool, Int64, Array<Bool>, String, Unit) { // block id: 912
        var843;
        var var931 : Enum916 = Enum916.defaultValue;
        let var993 : UInt8 = UInt8(Int8(UInt8(Int8(Int8(-49)))));
        let var1064 : Range<Int16> = (Int16(-104)&127..Int16(-106)&127:(20|1));
        match (match (match (Enum916.defaultValue) {
                    case _ => 
                        var281 &&= var281;
                        ();
                        if (true) { Enum916.defaultValue } else { var931 } 
                    
                    case _ => 
                        var931
                    
                }) {
                case defaultValue => 
                    if (var281) { Option<Bool>.None } else { Option<Bool>.Some(true) } 
                
                case defaultValue => 
                    [[true, true, true, true, false, true, false, false, true, false], [false, true, false, true, true, false, false, true, true, true], [true, true, false, false, false, true, true, true, false, true], [true, true, false, true, true, true, false, true, true, true], [true, false, false, true, false, false, false, false, false, false], [false, true, true, true, false, false, false, false, true, false], [true, false, false, true, false, true, false, true, true, false], [true, false, true, false, true, false, false, true, false, false], [true, false, true, true, true, true, false, false, true, false], [false, false, true, true, true, true, true, false, true, true]];
                    if (var281) { var931 } else { var931 } ;
                    Option<Bool>.None
                
                case caseVar955 => 
                    Option<Bool>.Some(true)
                
                case _ => 
                    ();
                    if (var281) { optionalParam587 } else { Option<Bool>.Some(false) } 
                
            }) {
            case caseVar969 => 
                var972;
                var759
            
            case _ => 
                var252 /= ((var252) | 1);
                var var983 : Int64 = (-53);
                var983 <<= ((91) & 7);
                var var1006 : Unit = ();
                let var1021 : Int16 = Int16(UInt8(UInt8(68)));
                let var1026 : Int64 = 122;
                var var1038 : Bool = (Float64(Float32(Float32(Float32(73.0)))) is Range<Int32>);
                if (false) { (((UInt8(134)&127..var993&127:(105|1)), optionalParam584, var972, (Int32(93)&127..=Int32(123)&127:90|1), (UInt32(118)&127..UInt32(118)&127:75|1)), [var1006, var1006, var972, var1006, var972, (), (), var972, var972, var1006], (-46.0), (Int16(-77)&127..var1021&127:(var1026|1)), var281, var252, [var281, var281, var281, var281, true, false, var1038, var281, var281, var1047], var753, ()) } else { var759 } 
            
            case _ => 
                (((UInt8(174)&127..UInt8(104)&127:(-54)|1), optionalParam584, (), (Int32(-88)&127..Int32(-116)&127:63|1), (UInt32(164)&127..UInt32(162)&127:(-61)|1)), [(), (), (), (), (), (), (), (), (), ()], 86.0, var1064, true, var252, [var1047, false, false, var1047, var281, var281, false, true, true, var1047], "e+GZWkk}2p", ())
            
        }
    }
;
    match {
        case (Option<(Bool, Range<UInt32>)>.None ?? (false, namedParam586))[0] => 
        match (Option<(Bool, Range<UInt32>)>.None) {
            case caseVar609 : Bool => 
                ();
                ()
            
            case caseVar615 => 
                var618;
                var281 &&= var281;
                var618
            
            case _ => 
                var618
            
        };
        func270((UInt16(197)&127..UInt16(206)&127:(var252|1)));
        let var634 : Array<Bool> = [true, false, false, true, true, false, false, true, true, true];
        var634[8]
        case match {
        case var281 => 
        let var643 : ((Range<UInt8>, UInt64, Unit, Range<Int32>, Range<UInt32>), Array<Unit>, Float64, Range<Int16>, Bool, Int64, Array<Bool>, String, Unit) = (((UInt8(137)&127..UInt8(209)&127:(-86)|1), UInt64(245), (), (Int32(31)&127..Int32(-16)&127:((-18)|1)), (UInt32(208)&127..=UInt32(174)&127:31|1)), [(), (), (), (), (), (), (), (), (), ()], Float64(29.0), (Int16(UInt8(89))&127..=Int16(Int8(-37))&127:(Int64(Int8(Int8(-11)))|1)), true, Int64(UInt32(47)), [false, false, true, false, false, false, false, true, false, true], "ZZ/Qtz;KhI", ());
        var643
        case false => 
        (UInt16(56)&127..var686&127:(var252|1));
        ((var692&127..UInt16(191)&127:(var252|1)), var566, Class526(), (UInt8(19)&127..=var701&127:(46|1)), Float32(63.0), namedParam589);
        let var756 : Unit = ();
        if (var281) { (var710, [(), var618, var618, var618, (), var618, var618, (), (), ()], 18.0, (Int16(-53)&127..Int16(44)&127:86|1), false, var252, [false, true, true, false, false, false, false, true, true, false], var753, var756) } else { var759 } 
        case _ => 
        var701;
        var var869 : Unit = ();
        var var887 : Float64 = 123.0;
        if (var281) { (var800, [(), (), (), (), var618, var618, (), (), (), ()], (-113.0), var832, false, 36, var843, "z\\Fd`,^:DE", var869) } else { (var710, var874, var887, (Int16(-34)&127..=Int16(56)&127:(-68)|1), false, var252, [var281, var281, var281, true, true, var281, true, false, var281, var281], ###"yR4y<X(h72"###, var869) } 
    }[4] => 
        func908(namedParam911 : (-18.0));
        var281
        case _ => 
        var281
    }
}

func func2202(param2203 : (Range<UInt32>) -> Unit) : Interface529 { // block id: 2206
    let var4885 : ((UInt64, Range<UInt32>, Option<Bool>, Rune) -> Bool) -> (Array<Bool>, Float64, Array<Int16>, (Range<UInt8>, UInt64, Unit, Range<Int32>, Range<UInt32>), UInt64, Array<Range<UInt32>>, Int16) = func2210;
    (func4887|>var4885)[3];
    var loopTimeVar4940 : Range<UInt64> = (UInt64(Int32(113))&127..UInt64(196)&127:(Int64((-100))|1));
    for (i in loopTimeVar4940 where try { // block id: 4896
        var4575 &&= var2647;
        97.0 > (-10.0)
    } finally { // block id: 4903
        false
    }) {
        try { // block id: 4907
            (var753, var832)
        } finally { // block id: 4911
            (Float32(-63.0), [(), (), (), (), (), (), (), (), var4317, ()], 'i', (), var753, [true, true, false, true, true, true, true, false, false, false], var2781, var2094);
            var var4936 : Int16 = Int16(UInt8(238));
            (var753, (Int16(57)&127..=var4936&127:(87|1)))
        }
    };
    var var4948 : Interface529 = Class526(optionalParam2970 : Option<Bool>.None, namedParam2973 : [(UInt32(164)&127..=UInt32(188)&127:(-49)|1), (UInt32(72)&127..UInt32(226)&127:(-18)|1), (UInt32(134)&127..UInt32(79)&127:25|1), (UInt32(Int8(-71))&127..=UInt32(81)&127:(Int64(UInt8(248))|1)), (UInt32(251)&127..UInt32(249)&127:(-120)|1), (UInt32(113)&127..UInt32(57)&127:(-106)|1), (UInt32(76)&127..UInt32(Int16(99))&127:(Int64(UInt32(53))|1)), (UInt32(155)&127..=UInt32(191)&127:(-66)|1), (UInt32(158)&127..UInt32(194)&127:(-112)|1), (UInt32(252)&127..=UInt32(Int16(80))&127:((-97)|1))]);
    var4948
}

public func func4979(param1201 : Range<UInt32>) : Unit { // block id: 1202

}



public func func1188(param1189 : Float64, param1190 : (Range<UInt16>) -> Unit) : Float64 { // block id: 1193
    let var4977 : ((Range<UInt32>) -> Unit) -> Interface529 = func2202;
    var var5025 : Int8 = Int8(Int8(UInt8(245)));
    (match {
        case true => 
        Option<Option<Bool>>.None;
        UInt16(207) ** (var686 & 3)
        case _ => 
        var4994;
        var1683;
        UInt16(214)
    }&127..=if (false) { // block id: 5001
        var1991 >>= ((UInt64(89)) & 7);
        UInt16(40) ** (UInt16(114) & 3)
    } else if (var5009) { // block id: 5011
        let var5013 : UInt16 = UInt16(UInt16(UInt8(Int8(80))));
        var5013
    } else { // block id: 5018
        (var462&127..=var462&127:(var1596|1));
        var var5030 : Int8 = Int8(10);
        var5025 |= var5030;
        var2906
    }&127:((-120) ** (var252 & 3)|1))|>{ lambdaParameter1197 : Range<UInt16> => var var4982 : (Range<UInt32>) -> Unit = func4979; ((var4982|>var4977)|>func1208<Array<Int16>, Option<Option<Array<Array<Bool>>>>>)|>{ lambdaParameter1205 : Range<UInt32> =>  } };
    (((Option<Int16>.None ?? Int16(33)) as Unit) ?? if (([true, false, true, true, false, true, false, true, true, true] is Array<Range<UInt32>>)) { // block id: 5052

    });
    var2781
}

func func1142(param1143 : Interface529) : Rune { // block id: 1144
    let var1149 : Float32 = Float32(64.0);
    let var1162 : (Range<UInt16>) -> Unit = { lambdaParameter1165 : Range<UInt16> => () };
    (var1149, if (true) { var874 } else { [(), (), (), (), (), (), (), (), (), ()] } , Class526.var1158, (var484|>var1162), var1172[0], (Option<Array<Bool>>.None ?? [false, false, false, false, true, true, true, false, true, true]), func1188(var2781, var1162), var2094)[3];
    var var5063 : ?Bool = (((UInt16(42)&127..UInt16(Int16(-1))&127:(13|1)), Int8(UInt8(159)), Class526(), (UInt8(148)&127..=UInt8(UInt8(97))&127:(Int64(Int32(-71))|1)), Float32(Float32(Float32(44.0))), 'e') as Bool);
    var var5150 : UInt64 = UInt64(129);
    var var5172 : Unit = ();
    try { // block id: 5059
        let var5089 : UInt32 = UInt32(171);
        var var5122 : Int8 = Int8(44);
        match (Class526(optionalParam2970 : var5063, namedParam2973 : [(UInt32(191)&127..=UInt32(38)&127:22|1), (UInt32(168)&127..var5089&127:(var1596|1)), (var5089&127..=UInt32(32)&127:(85|1)), (UInt32(60)&127..=UInt32(161)&127:(var1596|1)), (UInt32(89)&127..UInt32(250)&127:((-5)|1)), (UInt32(129)&127..=UInt32(253)&127:(-89)|1), (var5089&127..=UInt32(34)&127:(var252|1)), (var1980&127..=var462&127:(var1596|1)), (UInt32(185)&127..=UInt32(68)&127:22|1), var3939])) {
            case _ => 
                var2357--;
                var5122 >>= ((var5122) & 7)
            
            case caseVar5127 => 
                ()
            
            case caseVar5132 : Array<Bool> => 
                var4034;
                var2781 **= Float64(Int32(9.0) & 3);
                var1977 |= UInt32(135)
            
            case _ => 
                ();
                var1596 | var1596;
                ()
            
        };
        var5150 &= var1991;
        'B'
    } finally { // block id: 5154
        match ((UInt8(245)&127..UInt8(243)&127:(-121)|1)) {
            case caseVar5159 : Option<Int64> => 
                Option<Array<Unit>>.None
            
            case _ : Interface529 => 
                [(), (), var1683, var4317, (), var5172, var4317, (), (), var5172];
                Option<Array<Unit>>.Some([(), var1683, (), var1683, (), (), (), (), (), ()])
            
            case _ => 
                var2906 **= (var2906 & 3);
                Option<Array<Unit>>.Some([(), (), (), (), (), (), (), (), (), ()])
            
        };
        '1'
    }
}

func func549(param550 : Array<Array<Bool>>) : Bool { // block id: 551
    var var557 : Interface529 = Class526();
    try { // block id: 553
        if (false) { var557 } else { var557 } 
    } finally { // block id: 560
        let var573 : UInt8 = UInt8(5);
        (var484, var566, Class526(), (UInt8(53)&127..var573&127:((-98)|1)), Float32(-87.0), var578)[2]
    };
    let var1091 : Array<Range<UInt32>> = Array<Range<UInt32>>(10){ i => (UInt32(UInt16(UInt8(161)))&127..UInt32(UInt32(UInt32(253)))&127:((-36)|1)) };
    var var5272 : Int64 = Int64(Int8(UInt8(Int8(27))));
    let var5278 : Int64 = (-71);
    if (func583(namedParam586 : var1091[8], namedParam589 : (Class526(namedParam2973 : [(UInt32(63)&127..UInt32(99)&127:(-64)|1), (UInt32(85)&127..UInt32(92)&127:23|1), (UInt32(6)&127..=UInt32(215)&127:33|1), (UInt32(171)&127..=UInt32(84)&127:(-96)|1), (UInt32(171)&127..=UInt32(133)&127:12|1), (UInt32(215)&127..UInt32(83)&127:(-104)|1), (UInt32(111)&127..UInt32(91)&127:46|1), (UInt32(243)&127..UInt32(40)&127:84|1), (UInt32(100)&127..UInt32(166)&127:(-28)|1), (UInt32(82)&127..UInt32(44)&127:(-101)|1)])|>func1142))) { // block id: 5201
        var var5222 : UInt8 = UInt8(Int8(-23));
        var var5236 : Int16 = Int16(Int8(-110));
        let var5240 : Int16 = Int16(Int8(Int8(-88)));
        match (Class526(namedParam2973 : var1911)) {
            case _ => 
                var4034;
                var1683;
                var5212 ||= false
            
            case caseVar5218 => 
                var5222 |= UInt8(193);
                var4317;
                var5222 &= UInt8(234)
            
            case _ => 
                var4034;
                var5236 *= var5240
            
            case _ => 
                [[false, false, true, true, false, true, false, true, false, true], [false, true, false, false, false, true, true, true, true, true], [true, true, true, false, false, true, false, true, false, false], [true, false, false, false, true, true, false, true, true, true], [true, false, true, true, false, true, true, true, true, false], [true, true, false, false, true, false, true, false, true, false], [true, false, true, false, false, true, false, false, true, false], [true, true, true, true, true, false, true, true, true, true], [true, true, false, false, false, false, false, false, false, true], [true, true, true, false, false, false, true, false, false, false]];
                ()
            
        };
        match (Class526(namedParam2973 : var1091)) {
            case caseVar5253 => 
                ();
                var var5262 : UInt32 = UInt32(Int16(73));
                if (var2647) { (UInt32(50)&127..=UInt32(224)&127:(-15)|1) } else { (UInt32(104)&127..var5262&127:(46|1)) } 
            
            case _ : Range<Int8> => 
                var1683;
                var5272 -= var5278;
                (UInt32(125)&127..=UInt32(96)&127:(var5278|1))
            
            case caseVar5286 : Range<UInt32> => 
                (UInt32(61)&127..=var1980&127:(var1596|1))
            
            case caseVar5294 : Rune => 
                ();
                if (var5212) { (UInt32(36)&127..=UInt32(115)&127:51|1) } else { (UInt32(220)&127..UInt32(67)&127:36|1) } 
            
            case _ => 
                var1583
            
        };
        match ([var578, 'X', var578, var578, '0', var578, 't', var578, 'r', 'i']) {
            case _ => 
                var874;
                (-48);
                var1991
            
        }
    } else if (match (if (false) { // block id: 5324
            ();
            var4317;
            var2602
        } else { // block id: 5328
            [(), (), (), (), (), (), (), (), (), ()];
            ();
            Float32(2.0)
        }) {
        case -5.0 => 
            UInt8(82) / ((UInt8(12)) | 1);
            var1991;
            UInt8(54) <= UInt8(151)
        
        case caseVar5344 => 
            (var4870&127..var4870&127:(var252|1));
            var462 >= var462
        
        case _ => 
            ();
            ();
            !false
        
    }) { // block id: 5359
        UInt64(158)
    } else { // block id: 5361
        var1991 *= UInt64(21);
        match (var753) {
            case """
@@gm,
<jma{,
""" | "3Uzuje<\"3H" => 
                var1977 |= var1980
            
            case """
}nL@a
aQa|}
""" => 
                var5377;
                var4317
            
            case _ => 
                if (var281) { var843 } else { [var281, true, true, true, var281, var5009, false, false, var5403, true] } ;
                ((UInt32(103)&127..UInt32(98)&127:22|1), ([[false, false, false, true, false, true, true, true, true, true], [true, true, false, true, true, false, true, true, true, true], [false, true, true, false, true, false, false, true, true, false], [false, false, false, true, false, false, false, true, false, false], [false, true, false, false, true, false, true, true, false, false], [true, true, false, false, false, true, false, false, false, true], [true, true, true, true, true, false, false, true, true, true], [true, false, true, true, true, false, true, false, true, false], [true, false, false, false, true, false, false, true, false, true], [true, true, false, true, false, false, true, true, false, true]], [(), var1683, var4034, (), var1683, var4034, var4034, (), (), var4034], (Int16(63)&127..=Int16(98)&127:(-65)|1), (UInt64(69)&127..=UInt64(124)&127:16|1), [(UInt32(216)&127..=UInt32(36)&127:(-117)|1), (UInt32(78)&127..=UInt32(87)&127:(-82)|1), (UInt32(94)&127..UInt32(215)&127:(-4)|1), (UInt32(82)&127..=UInt32(54)&127:81|1), (UInt32(172)&127..UInt32(115)&127:(-72)|1), (UInt32(76)&127..=UInt32(50)&127:(-74)|1), (UInt32(201)&127..UInt32(30)&127:(-15)|1), (UInt32(70)&127..UInt32(139)&127:(-57)|1), (UInt32(223)&127..UInt32(187)&127:9|1), (UInt32(226)&127..=UInt32(107)&127:(-104)|1)]));
                var1683
            
        };
        try { // block id: 5426
            UInt64(143) / ((UInt64(199)) | 1)
        } finally { // block id: 5430
            var2781 ** Float64(Int32(111.0) & 3);
            var4034;
            var1991 | UInt64(192)
        }
    };
    (try { // block id: 5440
        UInt8(93)
    } finally { // block id: 5442
        var var5445 : Bool = ((UInt8(UInt8(UInt8(232))) as Range<UInt32>) is Array<Range<UInt32>>);
        var5445 ||= var281;
        var2906 += var2906;
        UInt8(122)
    } is Interface206<UInt8, Option<UInt8>>)
}

public func func520(param521 : Array<Unit>) : Bool { // block id: 522
    let var534 : Class526 = Class526();
    var534.var537[2];
    try { // block id: 5458
        var5460;
        [var1429, [var5212, var2647, false, true, var5494, var281, var5494, true, true, var4575], [false, false, false, true, true, false, false, false, false, true], [false, false, true, true, true, false, false, true, true, false], [true, var5403, true, var4575, false, var5403, var2647, true, var5513, var5009], [true, false, true, false, true, true, false, false, true, false], var1285, var1429, var1429, [true, var5494, false, var2647, true, var2647, var5009, false, true, true]]
    } finally { // block id: 5531
        if (var5403) { [[true, true, false, false, true, true, true, true, false, true], [true, true, false, false, true, false, true, true, false, false], [true, true, true, true, false, false, true, false, false, true], [true, true, false, true, true, false, true, false, false, false], [false, true, true, false, false, false, false, true, true, true], [true, false, false, true, false, true, true, true, false, false], [true, false, true, false, true, true, false, false, true, true], [true, false, false, true, true, true, true, false, false, true], [false, true, false, false, true, false, false, false, false, true], [true, false, true, false, true, false, false, true, false, true]] } else { var1858 } 
    }|>func549
}

public func func219(param220 : UInt8) : Unit { // block id: 221
    let var492 : (Int8) -> Unit = func229;
    var loopTimeVar517 : Int64 = 0;
    (Option<Unit>.Some((var495|>var492)) ?? do {
        loopTimeVar517++;

    } while ((try { // block id: 499
        var43;
        var495 < var495
    } catch (e: Exception) { // block id: 504
        let var506 : Int32 = Int32(Int8(UInt8(123)));
        var506;
        if (var53) { var208 } else { var208 } ;
        false
    }) && loopTimeVar517 < 100 ) );
    let var5537 : (Array<Unit>) -> Bool = func520;
    var loopTimeVar5546 : Int64 = 0;
    while ((([(), (), (), (), (), (), (), (), (), ()]|>var5537)) && loopTimeVar5546 < 100 ) {
        loopTimeVar5546++;
        (var1613&127..=Int16(94)&127:(var252|1))
    };
    var loopTimeVar5557 : Int64 = 0;
    do {
        loopTimeVar5557++;
        (var2285 as (Float32, Array<Unit>, Rune, Unit, String, Array<Bool>, Float64, (Bool, Range<UInt32>)));
        (Option<Unit>.Some(()) ?? ())
    } while ((true) && loopTimeVar5557 < 100 ) 
}




func func141(param142 : Array<Bool>) : Bool { // block id: 143
    let var154 : Unit = ();
    try { // block id: 146
        let var157 : Unit = ();
        if (var53) { [var43, (), (), var154, var157, (), (), var154, var157, ()] } else { [(), (), (), var43, (), (), var157, (), var154, var154] } 
    } catch (_) { // block id: 175
        var43;
        var179 ||= var179;
        var var183 : Array<Unit> = Array<Unit>(10){ i => () };
        var183
    }[9];
    func func215(namedParam216 ! : Int16) : Class203 { // block id: 217
        var var5559 : (UInt8) -> Unit = func219;
        var4870|>var5559;
        var208
    }
;
    let var5772 : Interface529 = Class526(optionalParam2970 : Option<Bool>.None, namedParam2973 : [(UInt32(39)&127..=UInt32(170)&127:(-62)|1), (UInt32(91)&127..=UInt32(51)&127:(-5)|1), (UInt32(220)&127..UInt32(130)&127:102|1), (UInt32(36)&127..=UInt32(229)&127:(-115)|1), (UInt32(78)&127..UInt32(92)&127:83|1), (UInt32(156)&127..=UInt32(139)&127:117|1), (UInt32(21)&127..=UInt32(116)&127:(-42)|1), (UInt32(233)&127..=UInt32(1)&127:73|1), (UInt32(131)&127..=UInt32(121)&127:85|1), (UInt32(204)&127..UInt32(169)&127:16|1)]);
    func func198<T0>(namedParam199 ! : Range<UInt16>) : UInt8 { // block id: 200
        var208.var211 *= func215(namedParam216 : Int16(28)).func5565(namedParam5566 : Option<Array<Bool>>.Some([true, true, true, true, true, true, true, true, true, true]), namedParam5567 : var4317, namedParam5568 : (var686&127..UInt16(116)&127:(97|1)), namedParam5569 : Enum916.defaultValue);
        try { // block id: 5615
            var loopTimeVar5708 : Range<UInt64> = (UInt64(UInt16(93))&127..=UInt64(UInt32(127))&127:(Int64(Int32(55))|1));
            for (i in loopTimeVar5708 where true) {
                let var5692 : Array<Unit> = Array<Unit>(10){ i => () };
                if (var5403) { (var1583, ([[false, true, var5212, true, false, var5212, false, true, true, var53], var843, param142, [var5494, false, true, false, false, true, var281, var281, false, var2647], [true, true, true, true, false, true, true, true, true, true], [false, var5009, true, true, false, true, false, true, true, true], [false, false, true, true, true, false, true, false, false, false], var1285, [var5513, var281, var179, true, true, var53, false, var5513, var179, var5494], [var2647, var281, true, var2647, var5494, var5513, false, false, var5684, var5009]], var5692, var832, (UInt64(59)&127..UInt64(182)&127:(-111)|1), var1911)) } else { var2926 } 
            };
            var5722.getOrThrow()
        } finally { // block id: 5725
            var var5753 : Int32 = Int32(-13);
            match (Option<Unit>.None) {
                case caseVar5730 => 
                    ();
                    var1683;
                    var1991 >>= ((var1991) & 7)
                
                case caseVar5739 : (String, Range<Int16>) => 
                    (UInt32(123)&127..=UInt32(199)&127:((-42)|1));
                    ()
                
                case caseVar5748 : Option<(Bool, Range<UInt32>)> => 
                    var4034;
                    var5753 <<= ((var5753) & 7);
                    ()
                
                case _ => 
                    var4317
                
            };
            try { // block id: 5761
                ((-20)&127..var252&127:((-42)|1));
                if (var5403) { (var484, Int8(125), var5772, var2729, var2080, var578) } else { (namedParam199, Int8(111), var5772, var2729, var2080, var578) } ;
                if (var5009) { var4247 } else { var4247 } 
            } catch (e: Exception) { // block id: 5790
                var2602;
                if (var5009) { Option<Range<UInt32>>.Some((UInt32(9)&127..UInt32(161)&127:(-65)|1)) } else { Option<Range<UInt32>>.None } 
            }
        };
        (match (UInt32(var1980)) {
            case _ => 
                var252--;
                ();
                Option<UInt8>.Some(UInt8(79))
            
        } ?? UInt8(75))
    }
;
    var var5819 : ?Range<UInt16> = Option<Range<UInt16>>.None;
    func198<Interface529>(namedParam199 : (var5819 ?? (UInt16(211)&127..UInt16(119)&127:(-78)|1))) > match (var5824) {
        case caseVar5828 : Range<UInt64> => 
            (var1596&127..(-127)&127:(var252|1));
            ();
            UInt8(186)
        
        case _ : (Range<UInt32>, (Array<Array<Bool>>, Array<Unit>, Range<Int16>, Range<UInt64>, Array<Range<UInt32>>)) => 
            UInt8(57) << ((UInt8(222)) & 7)
        
        case _ => 
            if (var5009) { var2285 } else { ([(), var4317, (), var4317, var1683, (), (), (), (), var1683], (), (var753, (Int16(-111)&127..Int16(-106)&127:(var1596|1))), (UInt64(86)&127..=UInt64(66)&127:96|1), var832, var1172) } ;
            var4870
        
    }
}


public func func82(param83 : Enum11) : String { // block id: 84
    let var114 : UInt16 = UInt16(117);
    let var5871 : (Array<Bool>) -> Bool = func141;
    func func121() : Unit { // block id: 122
        if (true) { // block id: 125
            [(), var43, (), var43, var43, var43, (), var43, (), ()][7]
        } else if (((Option<Array<Bool>>.None ?? [false, true, true, false, false, true, false, false, true, true])|>var5871)) { // block id: 5876
            var loopTimeVar5881 : Int64 = 0;
            while ((var5684) && loopTimeVar5881 < 100 ) {
                loopTimeVar5881++;

            };
            (var5884 ?? ());
            try (resource = Class203()) { // block id: 5888
                var252 >>= ((58) & 7)
            } finally { // block id: 5892

            }
        };
        ();
        var var5903 : Option<Int32> = Option<Int32>.Some(Int32(UInt32(UInt8(64))));
        if (false) { // block id: 5896
            ();
            if (var5212) { Option<Int32>.Some(Int32(112)) } else { var5903 } ;
            (var2517 ?? var4034)
        }
    }
;
    if ([[true, false, true, true, false, true, false, true, false, true], [false, true, true, false, true, true, true, false, true, false], [false, true, true, true, true, true, false, true, false, false], [false, false, false, false, false, false, true, true, false, false], [false, false, true, true, false, false, true, false, true, true], [false, true, false, false, true, true, true, false, true, true], [false, true, false, false, false, true, true, true, true, false], [true, false, false, true, false, false, true, false, false, true], [true, false, true, false, false, false, false, true, false, false], [true, false, true, false, false, true, true, true, false, false]][2][2]) { // block id: 101
        match (var106) {
            case _ => 
                if (true) { (var114&127..UInt16(158)&127:(54|1)) } else { (UInt16(13)&127..UInt16(81)&127:(-15)|1) } ;
                ()
            
        };
        func121();
        """
z/\"l8
[\"tUv
"""
    } else if (var53) { // block id: 5913
        (Option<String>.Some(var753) ?? ###"5<GoKjo9UG"###)
    } else { // block id: 5922
        var5824;
        if (false) { var753 } else { ###"_k)c>^!p>-"### } 
    }
}

main(): Int64 {
    try {
        var var14 : Enum11 = Enum11.enumValue16((-22.0), Int8(Int8(Int8(UInt8(15)))));
        match (match (var14) {
                case _ : Float64 => 
                    UInt16(105);
                    Enum8.defaultValue
                
                case defaultValue => 
                    ();
                    Enum8.defaultValue;
                    var35
                
                case defaultValue => 
                    !false;
                    var43;
                    var35
                
                case defaultValue => 
                    ();
                    (-66);
                    if (var53) { var35 } else { Enum8.defaultValue } 
                
                case _ => 
                    ();
                    var35
                
            }) {
            case caseVar63 => 
                let var66 : Int64 = Int64(Int32(Int8(21)));
                var66;
                true;
                var53 &&= true
            
            case _ => 
                var var77 : Unit = ();
                var77;
                var77;
                var77
            
        };
        match (var1172) {
            case caseVar5933 : Array<Bool> => 
                var5937 %= ((var4870) | 1);
                var14
            
            case _ : (Range<UInt8>, UInt64, Unit, Range<Int32>, Range<UInt32>) => 
                Option<Array<Bool>>.None;
                ();
                Enum11.defaultValue
            
            case (_ : Option<(Bool, Range<UInt32>)>,_ : Range<UInt8>) => 
                if (var5009) { Enum11.enumValue16(var2781, Int8(71)) } else { var14 } 
            
            case _ => 
                var1991 += UInt64(181);
                var1683;
                if (false) { Enum11.enumValue16(36.0, Int8(-37)) } else { var14 } 
            
        }|>func82;
        Int64(if (true) { // block id: 5971
            UInt16(161) & var2906
        } else { // block id: 5975
            ();
            var2906 & var2906
        })
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var495*var495), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_unexpected_declaration_in_scope
// ASSERT: scan parse_redundant_modifier
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_expected_left_brace
// ASSERT: scan parse_expected_case


