/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output


public let var54 : Bool = false
public var var103 : Int16 = Int16(Int8(Int8(UInt8(85))))
public let var138 : ?Bool = ("V`!ZppX7 x" as Bool)
public let var195 : Unit = ()
var var232 : (Float32, Bool, UInt16, UInt16, UInt16) = (Float32(25.0), (UInt8(UInt8(UInt8(140))) is UInt32), UInt16(UInt8(UInt8(UInt8(55)))), UInt16(75), UInt16(170))
public let var297 : ??Bool = Option<Option<Bool>>.None
public var var310 : (Int64, UInt32, Interface22, UInt16) = (Int64(UInt64(Int64(UInt16(105)))), UInt32(227), Class16(), UInt16(UInt8(UInt8(173))))
public var var333 : Unit = ()
public var var380 : Float32 = Float32(-81.0)
let var438 : Range<Int32> = (Int32(Int16(-10))&127..Int32(81)&127:(29|1))
var var499 : UInt64 = UInt64(235)
let var530 : ?Float32 = ((Float32(62.0), (UInt8(Int8(44)) is Array<Bool>), UInt16(70), UInt16(UInt16(192)), UInt16(Int8(UInt8(121)))) as Float32)
public var var546 : (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit) = (UInt8(UInt8(Int8(Int8(-5)))), UInt32(208), UInt64(24), true, (), (), Float32(125.0), ())
public let var582 : (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit) = (UInt8(19), UInt32(42), UInt64(89), false, (), (), Float32(55.0), ())
public let var599 : Enum65 = Enum65.defaultValue
public var var611 : (Unit, Unit, Float32, Enum65, UInt8, (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit)) = ((), (), Float32(-113.0), Enum65.defaultValue, UInt8(UInt8(104)), (UInt8(217), UInt32(UInt32(42)), UInt64(129), false, (), (), Float32(Float32(Float32(88.0))), ()))
public var var957 : UInt32 = UInt32(57)
var var1013 : UInt8 = UInt8(1)
public let var1030 : Int64 = Int64(UInt16(25))
public let var1219 : Float32 = Float32(Float32(-13.0))
public var var1233 : Bool = (Option<Unit>.None is Range<Int64>)
let var1260 : Bool = false
public var var1320 : Rune = 'X'
public var var1376 : Interface21 = Class16()
let var1383 : ((UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit), Range<UInt64>, (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit), UInt8, Option<(Unit, Unit, Float32, Enum65, UInt8, (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit))>, (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit), Range<Int16>, (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit)) = ((UInt8(185), UInt32(Int16(111)), UInt64(18), false, (), (), Float32(109.0), ()), (UInt64(111)&127..=UInt64(2)&127:(-104)|1), (UInt8(150), UInt32(14), UInt64(Int8(108)), (Option<(Unit, Unit, Float32, Enum65, UInt8, (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit))>.None is () -> (Unit, Unit, Float32, Enum65, UInt8, (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit))), (), (), Float32(-111.0), ()), UInt8(Int8(-113)), Option<(Unit, Unit, Float32, Enum65, UInt8, (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit))>.None, (UInt8(129), UInt32(UInt8(Int8(12))), UInt64(UInt8(UInt8(246))), ((Float32(27.0), true, UInt16(151), UInt16(0), UInt16(79)) is Array<Bool>), (), (), Float32(-13.0), ()), (Int16(89)&127..Int16(UInt8(UInt8(88)))&127:(29|1)), (UInt8(Int8(UInt8(165))), UInt32(231), UInt64(226), (((Int8(25)&127..Int8(-43)&127:(-22)|1) is ((UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit), Range<UInt64>, (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit), UInt8, Option<(Unit, Unit, Float32, Enum65, UInt8, (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit))>, (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit), Range<Int16>, (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit))) is Enum385<Option<Unit>, Int16>), (), (), Float32(Float32(Float32(-2.0))), ()))
var var1473 : Interface23 = Class16()
public let var1505 : UInt8 = UInt8(Int8(59))
var var1521 : UInt8 = UInt8(Int8(-52))
public let var1597 : Bool = false
var var1642 : Range<UInt16> = (UInt16(123)&127..=UInt16(144)&127:(-108)|1)
public let var1799 : String = "m75UpehIXb"
public var var1845 : Option<Interface24> = (Class16() as Interface24)
public let var1951 : Interface24 = Class16()
public let var1968 : Int32 = Int32(UInt16(163))
let var1985 : Class16 = Class16()
var var2019 : Aggregate208 = Aggregate208()
let var2070 : Interface24 = Class16()
public let var2167 : (Range<UInt8>, Range<UInt32>, Rune, Int16, Range<Int32>) = ((UInt8(116)&127..UInt8(17)&127:(-36)|1), (UInt32(43)&127..UInt32(UInt32(Int8(35)))&127:(Int64(UInt8(Int8(38)))|1)), 'C', Int16(-69), (Int32(-71)&127..Int32(113)&127:99|1))
public var var2244 : Int32 = Int32(-94)
var var2253 : Interface22 = Class16()
public var var2389 : Range<UInt8> = (UInt8(UInt8(235))&127..=UInt8(Int8(-102))&127:(Int64(Int64(Int16(-36)))|1))
public var var2411 : (Float64, Bool, Int32, Int64, Int16) = (Float64(Float64(Float64(Float32(2.0)))), (([Class16(), Class16(), Class16(), Class16(), Class16(), Class16(), Class16(), Class16(), Class16(), Class16()] as Option<Option<Bool>>) is ((UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit)) -> Unit), Int32(-41), Int64(UInt16(100)), Int16(84))
public let var2512 : (Range<Int32>, Range<UInt32>, Int32, Rune, String) = ((Int32(UInt16(34))&127..=Int32(Int8(Int8(121)))&127:(Int64((-24))|1)), (UInt32(174)&127..=UInt32(23)&127:(-50)|1), Int32(Int8(Int8(-17))), 'c', "lJe${var1799}Ym!${var1799}GuR${var1799}<")
public let var2541 : Rune = 't'
public let var2710 : Option<Unit> = Option<Unit>.None
var var2935 : (Range<Int32>, Range<UInt32>, Int32, Rune, String) = ((Int32(Int16(-105))&127..=Int32(Int16(-66))&127:(Int64(UInt32(16))|1)), (UInt32(Int16(110))&127..UInt32(UInt32(146))&127:(Int64(Int8(UInt8(50)))|1)), Int32(Int8(Int8(84))), 'u', "_?Ck9${var1799}a{S/q${var1799}_")
public var var3006 : ((UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit), UInt64) = ((UInt8(207), UInt32(UInt8(138)), UInt64(206), true, (), (), Float32(Float32(Float32(2.0))), ()), UInt64(72))
public let var3121 : ?((UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit), UInt64) = Option<((UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit), UInt64)>.None
let var3171 : Int8 = Int8(88)
public var var3179 : Option<Range<Int8>> = Option<Range<Int8>>.None
public var var3242 : Float64 = (-79.0)
let var3248 : ???Bool = (((UInt8(187), UInt32(17), UInt64(Int32(-123)), false, (), (), Float32(Float32(52.0)), ()), (UInt64(152)&127..UInt64(26)&127:((-32)|1)), (UInt8(25), UInt32(UInt32(207)), UInt64(UInt64(234)), true, (), (), Float32(104.0), ()), UInt8(30), Option<(Unit, Unit, Float32, Enum65, UInt8, (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit))>.None, (UInt8(Int8(74)), UInt32(Int32(-58)), UInt64(56), false, (), (), Float32(Float32(110.0)), ()), (Int16(109)&127..Int16(69)&127:(-97)|1), (UInt8(Int8(91)), UInt32(238), UInt64(17), (Class16() is Rune), (), (), Float32(2.0), ())) as Option<Option<Bool>>)
public var var3396 : Option<Option<Float64>> = (UInt16(121) as Option<Float64>)
public let var3562 : ?Enum65 = Option<Enum65>.None
public let var3568 : Range<UInt32> = (UInt32(UInt32(UInt32(63)))&127..UInt32(200)&127:(Int64(Int8(119))|1))
public var var3592 : Enum385<Option<Unit>, Int16> = Enum385<Option<Unit>, Int16>.defaultValue
public interface Interface24 {

}

public interface Interface23 <: Interface24 {

}

public interface Interface22 <: Interface23 {

}

public interface Interface21 <: Interface22 & Interface23 {

}

public interface Interface20 <: Interface21 {
    func func3164() : Float32 { // block id: 3165
        let var3182 : Range<Int8> = (Int8(Int8(UInt8(UInt8(204))))&127..Int8(Int8(-119))&127:(Int64(UInt64(10))|1));
        match (if ((Int8(9) != var3171)) { (var3179 ?? var3182) } else { (if (true) { var3182 } else { (Int8(36)&127..Int8(-49)&127:0|1) } ) } ) {
            case _ => 
                var195;
                ()
            
        };
        var var3202 : (Float32, Bool, UInt16, UInt16, UInt16) = (Float32(Float32(Float32(Float32(88.0)))), (Enum65.defaultValue is UInt32), UInt16(UInt16(UInt8(Int8(-20)))), UInt16(202), UInt16(Int16(-128)));
        (var3202 as Array<Interface24>);
        var380 * var380
    }

}

public interface Interface19 <: Interface20 {

}

public open class Class16 <: Interface19 & Interface24 & Resource {
    public init() { // block id: 18

    }
;
    static let var157 : (Int64, UInt32, Interface22, UInt16) = ((-123), UInt32(51), Class16(), UInt16(34));
    static let var338 : Bool = true;
    static let var745 : String = "1~2<sFa{M 8";
    private static var var758 : Int64 = 11;
    private static var var764 : ((UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit), Range<UInt64>, (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit), UInt8, Option<(Unit, Unit, Float32, Enum65, UInt8, (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit))>, (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit), Range<Int16>, (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit)) = ((UInt8(120), UInt32(66), UInt64(90), true, (), (), Float32(102.0), ()), (UInt64(31)&127..=UInt64(167)&127:(-51)|1), (UInt8(2), UInt32(0), UInt64(3), false, (), (), Float32(-65.0), ()), UInt8(222), Option<(Unit, Unit, Float32, Enum65, UInt8, (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit))>.None, (UInt8(115), UInt32(70), UInt64(60), true, (), (), Float32(-58.0), ()), (Int16(-11)&127..=Int16(76)&127:(13|1)), (UInt8(74), UInt32(72), UInt64(239), true, (), (), Float32(-13.0), ()));
    static let var967 : Unit = ();
    public init(param945 : Unit) { // block id: 946
        ();
        (if ((var138 ?? false)) { // block id: 953
            let var960 : UInt64 = UInt64(30);
            (UInt8(254), var957, var960, true, param945, param945, Float32(98.0), var967)
        } else { // block id: 969
            let var972 : UInt8 = UInt8(5);
            (var972, var957, var499, true, (), var967, Float32(-122.0), var967)
        } as Rune)
    }
;
    public init(param685 : UInt8) { // block id: 686
        let var697 : Interface22 = Class16();
        let var704 : Array<Bool> = [((Float32(Float32(10.0)), (((-60), UInt32(12), Class16(), UInt16(44)) is Class16), UInt16(135), UInt16(UInt16(26)), UInt16(UInt16(129))) is Interface20), ((-125) is (Int64, UInt32, Interface22, UInt16)), (UInt32(64) is Option<Rune>), false, false, (Class16() is Range<Int16>), (UInt32(Int8(-68)) is Interface23), (Class16() is UInt16), ((UInt64(70)&127..UInt64(44)&127:(Int64(Int32(94))|1)) is Range<Int32>), (UInt64(1) is Enum65)];
        var var810 : ((UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit), Range<UInt64>, (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit), UInt8, Option<(Unit, Unit, Float32, Enum65, UInt8, (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit))>, (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit), Range<Int16>, (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit)) = ((UInt8(66), UInt32(UInt8(UInt8(78))), UInt64(Int8(UInt8(132))), ((Enum65.defaultValue as Float32) is Interface21), (), (), Float32(Float32(Float32(107.0))), ()), (UInt64(106)&127..UInt64(218)&127:65|1), (UInt8(UInt8(170)), UInt32(131), UInt64(12), true, (), (), Float32(Float32(44.0)), ()), UInt8(Int8(62)), (((UInt8(156), UInt32(94), UInt64(121), false, (), (), Float32(-8.0), ()), (UInt64(151)&127..UInt64(69)&127:((-23)|1)), (UInt8(252), UInt32(226), UInt64(76), true, (), (), Float32(-26.0), ()), UInt8(UInt8(33)), (Option<(Unit, Unit, Float32, Enum65, UInt8, (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit))>.Some(((), (), Float32(74.0), Enum65.defaultValue, UInt8(246), (UInt8(175), UInt32(45), UInt64(177), true, (), (), Float32(103.0), ()))) as (Unit, Unit, Float32, Enum65, UInt8, (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit))), (UInt8(219), UInt32(189), UInt64(165), true, (), (), Float32(45.0), ()), (Int16(87)&127..Int16(71)&127:(-94)|1), (UInt8(210), UInt32(221), UInt64(112), false, (), (), Float32(20.0), ())) as (Unit, Unit, Float32, Enum65, UInt8, (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit))), (UInt8(UInt8(203)), UInt32(47), UInt64(UInt8(Int8(19))), true, (), (), Float32(Float32(Float32(-31.0))), ()), (Int16(-84)&127..=Int16(-77)&127:(-66)|1), (UInt8(71), UInt32(10), UInt64(195), false, (), (), Float32(-52.0), ()));
        let var942 : Interface21 = Class16(());
        var var987 : Rune = 'U';
        match (match (UInt32(Int16(72))) {
                case 148 => 
                    if (var338) { var697 } else { var697 } 
                
                case _ : Interface22 => 
                    var704;
                    var745;
                    Class16()
                
                case caseVar750 => 
                    ();
                    var697
                
                case _ => 
                    var758 %= (((-42)) | 1);
                    if (false) { var764 } else { var810 } ;
                    var697
                
            }) {
            case _ : (Int64, UInt32, Interface22, UInt16) => 
                var333;
                'W'
            
            case _ : Range<UInt32> => 
                if (false) { Class16() } else { var942 } ;
                'p'
            
            case _ : UInt16 => 
                var987
            
            case _ => 
                'K'
            
        }
    }
;
    static var var2668 : UInt16 = UInt16(181);
    static var var2705 : Int64 = 82;
    private static let var2724 : Range<UInt64> = (UInt64(209)&127..=UInt64(244)&127:26|1);
    public init(param2608 : UInt64, optionalParam2609 ! : Range<UInt8> = (UInt8(Int8(-99))&127..=UInt8(UInt8(Int8(Int8(-45))))&127:((-52)|1))) { // block id: 2618
        let var2628 : Float64 = Float64(Float32(Float32(82.0)));
        try (resource = Class16()) { // block id: 2620
            (Option<Float64>.Some(var2628) ?? 63.0);
            let var2647 : ?(Unit, Unit, Float32, Enum65, UInt8, (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit)) = Option<(Unit, Unit, Float32, Enum65, UInt8, (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit))>.None;
            match (UInt8(199)) {
                case caseVar2637 : Range<Int32> => 
                    Option<Float64>.Some((-3.0));
                    var1013 += var1521;
                    if (var54) { var2647 } else { Option<(Unit, Unit, Float32, Enum65, UInt8, (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit))>.None } 
                
                case 138 => 
                    var957--;
                    var2647
                
                case _ => 
                    var2647
                
            };
            match (var1799) {
                case """
vx1,%
)2HxD
""" => 
                    Option<Float32>.Some(var1219);
                    var2668 ^= UInt16(182);
                    var333
                
                case "N+-=1TEamB" | ";JMVSP+FN`" | ###"qGrO^i8I2H"### => 
                    var333
                
                case _ => 
                    ();
                    ()
                
                case _ => 
                    Class16();
                    let var2687 : ?Float64 = ([(), (), (), (), (), (), (), (), (), ()] as Float64);
                    if (var1597) { var2687 } else { var2687 } ;
                    var1013 |= UInt8(141)
                
            }
        } catch (_) { // block id: 2694
            var333;
            match (var2389) {
                case _ => 
                    (var2628, false, Int32(-81), var2705, var103)
                
            };
            (var2710 ?? var195)
        };
        try { // block id: 2714
            if (var338) { // block id: 2717
                var195;
                var333
            } else if (var54) { // block id: 2721

            };
            match (var2724) {
                case _ : Enum65 => 
                    (Int32(-54)&127..Int32(17)&127:17|1)
                
                case _ : Array<Option<Bool>> => 
                    if (true) { var438 } else { var438 } 
                
                case _ => 
                    (Int32(68)&127..=Int32(-128)&127:(-9)|1)
                
            }
        } catch (_) { // block id: 2740
            (Int32(-19)&127..Int32(64)&127:37|1)
        }
    }
;
    public init(param2923 : Int8) { // block id: 2924
        if (((if (var1233) { (UInt16(38)&127..=UInt16(117)&127:0|1) } else { (UInt16(244)&127..=UInt16(244)&127:37|1) } ) is Option<Option<Option<Bool>>>)) { // block id: 2931
            if (var1260) { var2935 } else { var2512 } 
        } else { // block id: 2958
            if (true) { (var438, (UInt32(169)&127..=UInt32(200)&127:(-9)|1), var1968, var1320, ";sk]R+mnVp") } else { ((Int32(105)&127..Int32(107)&127:(-82)|1), (UInt32(219)&127..=UInt32(139)&127:(var2705|1)), var2244, '3', var1799) } 
        };
        var loopTimeVar3036 : Int64 = 0;
        while ((match ((Option<((UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit), UInt64)>.None ?? (var582, UInt64(96)))) {
            case (caseVar2989,caseVar2990 : Int32) => 
                var758 == var2705
            
            case (_,caseVar2997) => 
                true
            
            case _ => 
                Option<Option<Interface24>>.None;
                if (false) { var3006 } else { (var546, UInt64(199)) } ;
                var1260
            
        }) && loopTimeVar3036 < 100 ) {
            loopTimeVar3036++;
            var loopTimeVar3029 : Range<UInt64> = (UInt64(232)&127..UInt64(109)&127:(Int64(UInt32(187))|1));
            for (i in loopTimeVar3029 where true) {

            }
        }
    }
;
    public static var var3351 : ?(Unit, Unit, Float32, Enum65, UInt8, (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit)) = Option<(Unit, Unit, Float32, Enum65, UInt8, (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit))>.None;
    private static var var3415 : Option<(Float32, Bool, UInt16, UInt16, UInt16)> = Option<(Float32, Bool, UInt16, UInt16, UInt16)>.None;
    public init(param3346 : Option<Float64>) { // block id: 3347
        if (match (var3351) {
            case caseVar3355 => 
                ();
                if (var338) { Class16() } else { Class16(Int8(-89)) } ;
                UInt16(115) < UInt16(31)
            
            case caseVar3368 : (Array<Option<UInt8>>, Range<Int8>, UInt8) => 
                (var103&127..var103&127:(var2705|1));
                var1233
            
            case _ => 
                if (var338) { var1376 } else { var1376 } ;
                var1233
            
        }) { (match (Option<((UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit), UInt64)>.Some(var3006)) {
            case _ => 
                var1376;
                if (true) { var3396 } else { var3396 } 
            
        } ?? if (var1233) { param3346 } else { param3346 } ) } else { try { // block id: 3405
            var2705 <<= ((var1030) & 7);
            var333;
            param3346
        } catch (e: Exception) { // block id: 3411
            if (var338) { var3415 } else { Option<(Float32, Bool, UInt16, UInt16, UInt16)>.None } ;
            if (var1597) { param3346 } else { Option<Float64>.None } 
        } } 
    }

    public func isClosed(): Bool { return true }
    public func close(): Unit {}
}

public func func30(namedParam31 ! : UInt8, optionalParam32 ! : UInt64 = UInt64(Int64(UInt64(Int16(Int8(53))))), namedParam38 ! : UInt64, namedParam39 ! : String) : Class16 { // block id: 40
    let var42 : Unit = ();
    var42;
    ((namedParam31, UInt32(72), UInt64(116), var54, var42, var42, Float32(44.0), ()), UInt64(251))[0][4];
    Class16()
}

public enum Enum65 {
    defaultValue
}


public func func118(param119 : (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit)) : Unit { // block id: 120
    var var123 : Bool = (Class16() is Int16);
    var123 ||= ((Option<Option<Bool>>.None ?? var138) ?? var123)
}

public func func143(param144 : UInt64) : Unit { // block id: 145

}

public struct Aggregate208 {
    public init() { // block id: 210

    }
;
    static var var213 : Float32 = Float32(62.0)
}



func func274(param275 : Range<UInt64>, optionalParam276 ! : Enum65 = Enum65.defaultValue) : Option<Option<Bool>> { // block id: 278
    var195;
    try { // block id: 281
        var var288 : ???Bool = (Class16() as Option<Option<Bool>>);
        var288.getOrThrow()
    } finally { // block id: 291
        -UInt32(75);
        (Option<Option<Option<Bool>>>.None ?? var297)
    }
}

public func func270<T0>(param271 : (Int64, UInt32, Interface22, UInt16)) : Option<Option<Bool>> where T0 <: Option<Array<Interface24>> { // block id: 272
    var var300 : Range<UInt64> = (UInt64(192)&127..=UInt64(212)&127:90|1);
    func274(var300)
}


public func func264(param265 : (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit)) : Bool { // block id: 266
    let var344 : Range<Int8> = (Int8(66)&127..=Int8(44)&127:38|1);
    try { // block id: 268
        var var303 : ((Int64, UInt32, Interface22, UInt16)) -> Option<Option<Bool>> = { lambdaParameter306 : (Int64, UInt32, Interface22, UInt16) => Option<Option<Bool>>.None };
        var310|>var303;
        var54 || true
    } catch (_) { // block id: 324
        (Option<Unit>.Some(var195) ?? var333);
        Class16.var338;
        (true is UInt16)
    } finally { // block id: 342
        var344;
        param265[3]
    }
}

public enum Enum385<T0, T1> where T0 <: Option<Unit>, T1 <: Int16 {
    defaultValue
}



func func181(param182 : Int64) : Bool { // block id: 183
    var var188 : Interface24 = Class16();
    var var199 : Float32 = Float32(118.0);
    Float32(match (var188) {
        case caseVar192 : Interface24 => 
            var195;
            var199 % Float32((Int32(Float32(104.0))) | 1)
        
        case _ => 
            Float32(57.0) ** Float32(Int32(var199) & 3)
        
    }) / Float32((Int32((Aggregate208.var213))) | 1);
    let var372 : UInt8 = UInt8(111);
    let var572 : UInt32 = UInt32(217);
    func func216() : (Unit, Unit, Float32, Enum65, UInt8, (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit)) { // block id: 217
        let var227 : Option<(Float32, Bool, UInt16, UInt16, UInt16)> = (Int16(Int8(-67)) as (Float32, Bool, UInt16, UInt16, UInt16));
        var loopTimeVar247 : Range<UInt64> = (UInt64(7)&127..=UInt64(Int64(Int32(UInt16(118))))&127:(75|1));
        for (i in loopTimeVar247 where (var227 ?? var232)[1]) {

        };
        let var415 : UInt16 = UInt16(213);
        let var448 : Int32 = Int32(49);
        let var461 : Int64 = (-128);
        let var493 : UInt32 = UInt32(16);
        var loopTimeVar514 : Range<UInt64> = (UInt64(Int8(Int8(75)))&127..=UInt64(221)&127:(70|1));
        (match (var103) {
            case _ => 
                var415 + var415;
                UInt8(18)
            
            case caseVar476 : Bool => 
                ();
                (Int16(-88)&127..=Int16(29)&127:(-61)|1);
                UInt8(74)
            
            case _ => 
                Class16();
                var var486 : Int8 = Int8(-93);
                var486++;
                UInt8(24) >> ((UInt8(14)) & 7)
            
        }, var493 | UInt32(145), try { // block id: 497
            var499
        } finally { // block id: 501
            126.0 - 11.0;
            var499
        }, try { // block id: 507
            true
        } finally { // block id: 509
            true
        }, for (i in loopTimeVar514 where var54) {

        }, (Option<Unit>.None ?? ()), (var530 ?? var380), func118(var546))|>{ lambdaParameter351 : (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit) => var var393 : UInt32 = UInt32(221); var var400 : Int8 = Int8(Int8(114)); if ([var54, true, var54, true, var54, var54, true, var54, var54, true][9]) { // block id: 368
            (var372, UInt32(191), UInt64(190), false, var333, (), var380, ())[2];
            match (Enum385<Option<Unit>, Int16>.defaultValue) {
                case defaultValue => 
                    -var393
                
                case caseVar397 : UInt16 => 
                    var400;
                    UInt32(12)
                
                case _ : Unit => 
                    var393
                
                case defaultValue => 
                    Aggregate208();
                    (UInt16(166)&127..=var415&127:(param182|1));
                    var393
                
                case _ => 
                    var232;
                    Option<Option<Option<Bool>>>.None;
                    UInt32(138)
                
            };
            [false, true, false, true, false, true, false, true, true, true][7]
        } else { // block id: 427
            var var453 : Int32 = Int32(Int16(Int16(-4)));
            try { // block id: 429
                ();
                if (false) { (Int32(-57)&127..Int32(-48)&127:(param182|1)) } else { var438 } 
            } catch (e: Exception) { // block id: 444
                var138;
                var448 % ((var448) | 1);
                let var458 : Int32 = Int32(-82);
                (var453&127..var458&127:(var461|1))
            };
            false
        } };
        (Option<(Unit, Unit, Float32, Enum65, UInt8, (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit))>.None ?? (((UInt8(16), var572, UInt64(80), false, var333, (), Float32(40.0), ()), (UInt64(128)&127..=UInt64(55)&127:35|1), var582, var372, Option<(Unit, Unit, Float32, Enum65, UInt8, (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit))>.Some((var333, var333, var380, var599, var372, var546)), var546, (var103&127..Int16(67)&127:(param182|1)), var582)[4] ?? var611))
    }
;
    func216();
    let var639 : ?Rune = Option<Rune>.None;
    var var658 : Range<UInt32> = (UInt32(208)&127..UInt32(207)&127:(-31)|1);
    (match ((var639 ?? 'y')) {
        case 'D' | 'i' | 'T' => 
            Option<Bool>.None;
            ((var372, var572, var499, true, var333, var333, Float32(64.0), ()), UInt64(251));
            var658
        
        case caseVar662 : UInt32 => 
            (UInt32(158)&127..UInt32(152)&127:34|1)
        
        case caseVar667 : Float64 => 
            var232;
            var var672 : Bool = (Option<Rune>.None is Bool);
            if (var672) { var658 } else { (UInt32(28)&127..UInt32(176)&127:(-94)|1) } 
        
        case caseVar679 => 
            var var682 : Interface22 = Class16(UInt8(91));
            var682;
            if (false) { Option<Option<Option<Bool>>>.Some(Option<Option<Bool>>.Some(var138)) } else { Option<Option<Option<Bool>>>.None } ;
            if (var54) { (UInt32(128)&127..=UInt32(219)&127:(109|1)) } else { (UInt32(194)&127..UInt32(89)&127:((-47)|1)) } 
        
        case _ => 
            var1013 >>= ((UInt8(177)) & 7);
            if (var54) { Option<Bool>.Some(false) } else { Option<Bool>.None } ;
            (UInt32(212)&127..=UInt32(149)&127:(-37)|1)
        
    } is Option<Unit>)
}

public func func166(namedParam167 ! : Float32, namedParam168 ! : Unit, optionalParam169 ! : ((UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit)) -> Unit = { lambdaParameter172 : (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit) =>  }) : Bool { // block id: 176
    var138;
    let var1023 : (Int64) -> Bool = { lambdaParameter1026 : Int64 => false };
    var var1058 : Int32 = Int32(20);
    let var1107 : Bool = ((UInt64(UInt8(UInt8(39))) as (Unit, Unit, Float32, Enum65, UInt8, (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit))) is Class16);
    if ((var1030|>var1023) || try { // block id: 1034
        Int16(44) ^ Int16(115);
        if (var54) { (var1013&127..=var1013&127:(var1030|1)) } else { (UInt8(163)&127..=UInt8(101)&127:(-78)|1) } ;
        true && var54
    } catch (_) { // block id: 1048
        var1013 &= UInt8(13);
        Float32(-128.0) != Float32(-49.0)
    } finally { // block id: 1055
        var1058 &= var1058;
        var333;
        false
    }) { // block id: 1063
        let var1069 : Unit = ();
        if (var54) { // block id: 1066
            ();
            var1069
        } else if (true) { // block id: 1072

        };
        var582|>func118;
        var54
    } else { // block id: 1077
        match (var297) {
            case _ : Option<Float32> => 
                Int16(98) | Int16(4)
            
            case caseVar1088 : Aggregate208 => 
                var103
            
            case caseVar1093 : Aggregate208 => 
                var1013++;
                var333;
                var103
            
            case _ => 
                Int16(-57)
            
        };
        if (false) { // block id: 1104
            var54;
            var1107
        } else { // block id: 1113
            false
        }
    }
}



func func1460(param1461 : Interface24) : UInt8 { // block id: 1462
    var var1542 : (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit) = (UInt8(13), UInt32(56), UInt64(UInt64(Int32(113))), true, (), (), Float32(28.0), ());
    if (try { // block id: 1465
        if (var54) { Option<Option<Bool>>.None } else { var297 } ;
        if (var1260) { var1473 } else { var1473 } ;
        var1233
    } catch (_) { // block id: 1477
        var1219 == var1219
    }) { // block id: 1481
        var1473;
        ((Int8(104)&127..=Int8(101)&127:((-72)|1)) as (Unit, Unit, Float32, Enum65, UInt8, (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit)));
        let var1494 : ?UInt8 = Option<UInt8>.None;
        (var1494 ?? UInt8(153))
    } else { // block id: 1497
        var var1530 : Bool = (Enum65.defaultValue is Int64);
        match ((UInt32(41)&127..UInt32(36)&127:59|1)) {
            case caseVar1502 : UInt16 => 
                var1505
            
            case caseVar1510 : Array<Bool> => 
                ();
                Enum385<Option<Unit>, Int16>.defaultValue;
                var1505
            
            case _ : Int32 => 
                var195;
                var546;
                var1521
            
            case caseVar1526 : ((UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit), UInt64) => 
                var1530 ||= true;
                var1505
            
            case _ => 
                ();
                if (false) { var582 } else { var1542 } ;
                var1505
            
        }
    }
}

public func func1194(param1195 : Option<Rune>) : (Unit, Unit, Float32, Enum65, UInt8, (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit)) { // block id: 1196
    let var1199 : ((UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit)) -> Unit = func118;
    try { // block id: 1202
        ();
        var195;
        var546
    } catch (_) { // block id: 1206
        Option<(Unit, Unit, Float32, Enum65, UInt8, (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit))>.None;
        [true, true, true, true, false, true, false, false, true, false];
        if (false) { (UInt8(153), UInt32(238), var499, false, var333, (), var1219, ()) } else { var582 } 
    } finally { // block id: 1224
        if (true) { var546 } else { (UInt8(128), var957, var499, var1233, var333, var195, Float32(-93.0), var195) } 
    }|>var1199;
    var var1244 : ?(Unit, Unit, Float32, Enum65, UInt8, (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit)) = ("""
2L,a{y
* $JK
""" as (Unit, Unit, Float32, Enum65, UInt8, (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit)));
    let var1292 : Float64 = 0.0;
    func func1268(param1269 : (Int64) -> Bool, namedParam1272 ! : (UInt8, UInt64, UInt64, String) -> Class16, optionalParam1278 ! : UInt16 = UInt16(89)) : Option<Float32> { // block id: 1280
        var599;
        var loopTimeVar1348 : Range<UInt64> = (UInt64(UInt64(Int32(105)))&127..UInt64(Int16(-105))&127:(Int64(UInt32(74))|1));
        for (i in loopTimeVar1348 where try { // block id: 1285
            ();
            let var1288 : Float64 = 57.0;
            var1288
        } catch (_) { // block id: 1290
            var1292
        } >= match (Class16()) {
            case caseVar1313 : Range<Int16> => 
                if (false) { param1195 } else { Option<Rune>.Some(var1320) } ;
                var1292
            
            case _ => 
                var195;
                ();
                var1292
            
            case _ => 
                Aggregate208();
                (-9.0)
            
        }) {
            [var957, UInt32(32), UInt32(234), UInt32(232), var957, var957, UInt32(58), UInt32(198), UInt32(189), var957][6]
        };
        ((Int16(-39)&127..=Int16(-108)&127:(-114)|1) as Float32)
    }
;
    var var1371 : ?Enum65 = Option<Enum65>.None;
    let var1563 : UInt8 = UInt8(73);
    let var1570 : Interface24 = Class16(UInt8(189));
    ((var1244 ?? ((), var195, Float32(-72.0), Enum65.defaultValue, UInt8(19), var546))[1], try (resource = Class16()) { // block id: 1256

    } finally { // block id: 1257
        if (var1260) { var1244 } else { Option<(Unit, Unit, Float32, Enum65, UInt8, (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit))>.Some(var611) } ;
        ()
    }, (func1268(func181, namedParam1272 : func30) ?? Float32(Float32(-119.0))), (if (true) { var1371 } else { var1371 }  ?? match (var1376) {
        case caseVar1380 => 
            var1383;
            ();
            var599
        
        case _ => 
            ();
            if (true) { var599 } else { Enum65.defaultValue } 
        
    }), (match (var1505) {
        case 53 | 84 | 115 | 119 => 
            Class16(var1563)
        
        case _ => 
            if (true) { var1570 } else { Class16(()) } 
        
    }|>func1460), match (func1460(Class16())) {
        case 222 | 222 | 127 => 
            var var1584 : UInt8 = UInt8(UInt8(60));
            var1013 |= var1584;
            var546
        
        case _ => 
            var var1592 : Int32 = Int32(Int16(74));
            var1592;
            if (var1597) { var611 } else { (var333, (), Float32(6.0), Enum65.defaultValue, var1521, var546) } ;
            var546
        
        case caseVar1610 : Interface21 => 
            var195;
            (var1013, var957, var499, var54, var333, var333, Float32(-22.0), ())
        
        case _ => 
            (UInt8(216), var957, var499, true, (), var195, var1219, ())
        
    })
}

func func1634(param1635 : UInt8) : (Unit, Unit, Float32, Enum65, UInt8, (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit)) { // block id: 1636
    var var1664 : ?Rune = ((Float32(97.0), false, UInt16(UInt8(UInt8(98))), UInt16(3), UInt16(Int8(Int8(48)))) as Rune);
    func1194(match (if (var1233) { var1642 } else { (UInt16(48)&127..UInt16(95)&127:(-116)|1) } ) {
        case _ => 
            var499 %= ((var499) | 1);
            if (var1233) { (UInt8(35), UInt32(22), UInt64(113), var1597, (), (), var380, ()) } else { var582 } ;
            var1664
        
        case _ => 
            var1664
        
    })
}

func func1685(param1686 : Option<(Unit, Unit, Float32, Enum65, UInt8, (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit))>) : Int8 { // block id: 1687
    Int8(88)
}


func func1872(param1873 : (Int64) -> Bool) : Interface24 { // block id: 1876
    var loopTimeVar1881 : Int64 = 0;
    while ((var1260) && loopTimeVar1881 < 100 ) {
        loopTimeVar1881++;

    };
    var var1898 : Int64 = 11;
    match ((UInt64(244)&127..UInt64(239)&127:32|1)) {
        case _ => 
            var1320 = '8';
            var195;
            ()
        
        case caseVar1894 => 
            var1898 %= (((-51)) | 1);
            var333;
            ()
        
        case _ => 
            var var1906 : UInt16 = UInt16(Int16(-49));
            var1906;
            var195
        
    };
    let var1922 : ?Bool = Option<Bool>.None;
    let var1935 : Interface24 = Class16();
    if (([var138, var138, var138, var138, var138, var138, var1922, var138, var138, var138][0] is Option<Option<Option<Bool>>>)) { match ((Option<Option<Bool>>.None as Interface24)) {
        case _ => 
            var1935
        
        case _ : Range<UInt64> => 
            var1935
        
        case _ => 
            var1935
        
    } } else { [Class16(), Class16(), var1935, var1951, Class16(var1505), var1935, var1951, var1951, var1951, Class16(())][8] } 
}

public func func1963(param182 : Int64) : Bool { // block id: 183
    var var188 : Interface24 = Class16();
    var var199 : Float32 = Float32(118.0);
    Float32(match (var188) {
        case caseVar192 : Interface24 => 
            var195;
            var199 % Float32((Int32(Float32(104.0))) | 1)
        
        case _ => 
            Float32(57.0) ** Float32(Int32(var199) & 3)
        
    }) / Float32((Int32((Aggregate208.var213))) | 1);
    let var372 : UInt8 = UInt8(111);
    let var572 : UInt32 = UInt32(217);
    func func216() : (Unit, Unit, Float32, Enum65, UInt8, (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit)) { // block id: 217
        let var227 : Option<(Float32, Bool, UInt16, UInt16, UInt16)> = (Int16(Int8(-67)) as (Float32, Bool, UInt16, UInt16, UInt16));
        var loopTimeVar247 : Range<UInt64> = (UInt64(7)&127..=UInt64(Int64(Int32(UInt16(118))))&127:(75|1));
        for (i in loopTimeVar247 where (var227 ?? var232)[1]) {

        };
        let var415 : UInt16 = UInt16(213);
        let var448 : Int32 = Int32(49);
        let var461 : Int64 = (-128);
        let var493 : UInt32 = UInt32(16);
        var loopTimeVar514 : Range<UInt64> = (UInt64(Int8(Int8(75)))&127..=UInt64(221)&127:(70|1));
        (match (var103) {
            case _ => 
                var415 + var415;
                UInt8(18)
            
            case caseVar476 : Bool => 
                ();
                (Int16(-88)&127..=Int16(29)&127:(-61)|1);
                UInt8(74)
            
            case _ => 
                Class16();
                var var486 : Int8 = Int8(-93);
                var486++;
                UInt8(24) >> ((UInt8(14)) & 7)
            
        }, var493 | UInt32(145), try { // block id: 497
            var499
        } finally { // block id: 501
            126.0 - 11.0;
            var499
        }, try { // block id: 507
            true
        } finally { // block id: 509
            true
        }, for (i in loopTimeVar514 where var54) {

        }, (Option<Unit>.None ?? ()), (var530 ?? var380), func118(var546))|>{ lambdaParameter351 : (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit) => var var393 : UInt32 = UInt32(221); var var400 : Int8 = Int8(Int8(114)); if ([var54, true, var54, true, var54, var54, true, var54, var54, true][9]) { // block id: 368
            (var372, UInt32(191), UInt64(190), false, var333, (), var380, ())[2];
            match (Enum385<Option<Unit>, Int16>.defaultValue) {
                case defaultValue => 
                    -var393
                
                case caseVar397 : UInt16 => 
                    var400;
                    UInt32(12)
                
                case _ : Unit => 
                    var393
                
                case defaultValue => 
                    Aggregate208();
                    (UInt16(166)&127..=var415&127:(param182|1));
                    var393
                
                case _ => 
                    var232;
                    Option<Option<Option<Bool>>>.None;
                    UInt32(138)
                
            };
            [false, true, false, true, false, true, false, true, true, true][7]
        } else { // block id: 427
            var var453 : Int32 = Int32(Int16(Int16(-4)));
            try { // block id: 429
                ();
                if (false) { (Int32(-57)&127..Int32(-48)&127:(param182|1)) } else { var438 } 
            } catch (e: Exception) { // block id: 444
                var138;
                var448 % ((var448) | 1);
                let var458 : Int32 = Int32(-82);
                (var453&127..var458&127:(var461|1))
            };
            false
        } };
        (Option<(Unit, Unit, Float32, Enum65, UInt8, (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit))>.None ?? (((UInt8(16), var572, UInt64(80), false, var333, (), Float32(40.0), ()), (UInt64(128)&127..=UInt64(55)&127:35|1), var582, var372, Option<(Unit, Unit, Float32, Enum65, UInt8, (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit))>.Some((var333, var333, var380, var599, var372, var546)), var546, (var103&127..Int16(67)&127:(param182|1)), var582)[4] ?? var611))
    }
;
    func216();
    let var639 : ?Rune = Option<Rune>.None;
    var var658 : Range<UInt32> = (UInt32(208)&127..UInt32(207)&127:(-31)|1);
    (match ((var639 ?? 'y')) {
        case 'D' | 'i' | 'T' => 
            Option<Bool>.None;
            ((var372, var572, var499, true, var333, var333, Float32(64.0), ()), UInt64(251));
            var658
        
        case caseVar662 : UInt32 => 
            (UInt32(158)&127..UInt32(152)&127:34|1)
        
        case caseVar667 : Float64 => 
            var232;
            var var672 : Bool = (Option<Rune>.None is Bool);
            if (var672) { var658 } else { (UInt32(28)&127..UInt32(176)&127:(-94)|1) } 
        
        case caseVar679 => 
            var var682 : Interface22 = Class16(UInt8(91));
            var682;
            if (false) { Option<Option<Option<Bool>>>.Some(Option<Option<Bool>>.Some(var138)) } else { Option<Option<Option<Bool>>>.None } ;
            if (var54) { (UInt32(128)&127..=UInt32(219)&127:(109|1)) } else { (UInt32(194)&127..UInt32(89)&127:((-47)|1)) } 
        
        case _ => 
            var1013 >>= ((UInt8(177)) & 7);
            if (var54) { Option<Bool>.Some(false) } else { Option<Bool>.None } ;
            (UInt32(212)&127..=UInt32(149)&127:(-37)|1)
        
    } is Option<Unit>)
}

func func1809<T0>(param1810 : Int32) : Interface24 where T0 <: Float64 { // block id: 1811
    let var1821 : (Range<Int32>, Range<UInt32>, Int32, Rune, String) = ((Int32(UInt8(129))&127..Int32(13)&127:(81|1)), (UInt32(161)&127..UInt32(168)&127:27|1), Int32(-22), '2', "o+,?e+pl*v");
    var var1838 : Int32 = Int32(Int16(91));
    var var1858 : Interface24 = Class16();
    (match (var1821[1]) {
        case _ => 
            var1838 <<= ((Int32(-63)) & 7);
            if (true) { var1845 } else { Option<Interface24>.None } 
        
        case _ => 
            var1845
        
    } ?? (if (false) { var1845 } else { Option<Interface24>.Some(var1858) }  ?? (func1963|>func1872)))
}


public func func1717(param1718 : Option<UInt8>) : Array<Interface24> { // block id: 1719
    try (resource = Class16()) { // block id: 1721
        [(), var333, var333, (), var195, (), var195, (), var333, var195][0]
    } catch (_) { // block id: 1736

    };
    var var1752 : Int8 = Int8(Int8(78));
    var var1805 : Int8 = Int8(Int8(-74));
    var var2030 : (Rune, Interface24, Range<Int16>) = ('g', Class16(()), (Int16(-3)&127..Int16(-24)&127:106|1));
    var var2087 : Interface24 = Class16();
    [func30(namedParam31 : match ([(), (), (), (), (), (), (), (), (), ()]) {
        case _ => 
            UInt8(97)
        
    }, optionalParam32 : try { // block id: 1745
        UInt64(85) ** (UInt64(1) & 3)
    } finally { // block id: 1749
        var1752--;
        var499
    }, namedParam38 : [UInt64(212), UInt64(12), var499, UInt64(150), var499, UInt64(33), var499, UInt64(40), UInt64(31), var499][5], namedParam39 : match (Int16(15)) {
        case 40 | -19 | 110 | -64 => 
            let var1781 : Int64 = Int64(UInt64(186));
            let var1787 : UInt8 = UInt8(Int8(104));
            if (var1260) { (var1013&127..=UInt8(162)&127:(var1781|1)) } else { (UInt8(79)&127..=var1787&127:(126|1)) } ;
            ();
            """
*'8w.
~&RWb
"""
        
        case _ => 
            ();
            if (var1260) { var1799 } else { var1799 } 
        
    }), Class16(UInt8(var1805)), (var1968|>func1809<Float64>), var1951, Class16(), match ((UInt8(68)&127..UInt8(147)&127:(-77)|1)) {
        case _ => 
            if (var1597) { var1951 } else { var1951 } 
        
        case _ => 
            var1985;
            (-42) * var1030;
            var1951
        
    }, try { // block id: 1992
        var1521 / ((var1013) | 1);
        var var1998 : Int32 = Int32(UInt32(165));
        var1998 <<= ((Int32(96)) & 7);
        if (false) { Class16(var333) } else { var1951 } 
    } catch (_) { // block id: 2007
        var1805 ^= var1805;
        let var2013 : Unit = ();
        Class16(var2013)
    }, match (var2019) {
        case caseVar2023 : Interface19 => 
            var333;
            var103 -= var103;
            var2030
        
        case caseVar2038 : Range<UInt64> => 
            (Int32(-126)&127..Int32(-61)&127:27|1);
            var232;
            if (var54) { var2030 } else { ('w', Class16(UInt8(65)), (Int16(32)&127..Int16(34)&127:(-51)|1)) } 
        
        case _ => 
            var1805--;
            Option<Option<Bool>>.Some(Option<Bool>.Some(true));
            var2030
        
    }[1], (Option<Array<Interface24>>.None ?? [Class16(), var1951, var2070, Class16(UInt8(222)), var2070, var2070, Class16(UInt8(193)), Class16(()), var1951, Class16(var333)])[7], (Option<Interface24>.Some(var2087) ?? Class16())]
}

public func func1194(param1711 : ((UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit)) -> Unit) : Array<Interface24> { // block id: 1714
    ();
    let var2096 : (Array<Option<UInt8>>, Range<Int8>, UInt8) = ([Option<UInt8>.None, ((UInt8(177), UInt32(101), UInt64(155), false, (), (), Float32(-5.0), ()) as UInt8), (((Int8(83)&127..=Int8(-105)&127:(102|1)) as Option<Option<Bool>>) as UInt8), Option<UInt8>.Some(UInt8(191)), (([UInt64(34), UInt64(149), UInt64(236), UInt64(115), UInt64(219), UInt64(142), UInt64(11), UInt64(89), UInt64(174), UInt64(142)] as Bool) as UInt8), Option<UInt8>.None, Option<UInt8>.Some(UInt8(169)), Option<UInt8>.Some(UInt8(234)), Option<UInt8>.Some(UInt8(22)), (('h', Class16(UInt8(29)), (Int16(-20)&127..=Int16(33)&127:(28|1))) as UInt8)], (Int8(-124)&127..Int8(-71)&127:(-99)|1), UInt8(UInt8(Int8(-62))));
    var2096[0][5]|>func1717
}

public func func1680(param1681 : Option<Rune>) : UInt8 { // block id: 1682
    let var1694 : UInt32 = UInt32(211);
    UInt8((((var1013, var1694, UInt64(127), var54, (), var333, var1219, ()) as (Unit, Unit, Float32, Enum65, UInt8, (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit)))|>func1685));
    func func1706<T0>(namedParam1707 ! : Interface21) : Array<Interface24> { // block id: 1708
        func1194(func118)
    }
;
    func1460(func1706<Option<Float64>>(namedParam1707 : var1376)[3])
}

func func147(param148 : ((UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit)) -> Unit) : Unit { // block id: 151
    Class16.var157[2];
    let var1117 : Float32 = Float32(3.0);
    var var1127 : Int8 = Int8(50);
    var var1155 : Int64 = (-47);
    let var1174 : Rune = 'f';
    func func1190(namedParam1191 ! : UInt8) : Bool { // block id: 1192
        Option<Rune>.None|>(func1680~>func1634);
        var1260
    }
;
    let var2199 : (Array<Option<UInt8>>, Range<Int8>, UInt8) = ([(true as UInt8), (((), (), Float32(87.0), Enum65.defaultValue, UInt8(124), (UInt8(170), UInt32(132), UInt64(204), false, (), (), Float32(-90.0), ())) as UInt8), Option<UInt8>.Some(UInt8(103)), Option<UInt8>.Some(UInt8(Int8(18))), (UInt16(UInt16(140)) as UInt8), (((-102)&127..=(-91)&127:(125|1)) as UInt8), Option<UInt8>.None, ([true, true, false, true, false, false, true, true, false, false] as UInt8), (UInt32(UInt32(163)) as UInt8), Option<UInt8>.None], (Int8(-124)&127..Int8(-56)&127:(-40)|1), UInt8(144));
    var loopTimeVar2259 : Int64 = 0;
    do {
        loopTimeVar2259++;
        var1155 <<= ((30) & 7);
        let var1165 : ??Bool = Option<Option<Bool>>.Some(Option<Bool>.Some(true));
        func func1159(param1160 : Option<Float32>, param1161 : Interface19) : Interface22 { // block id: 1162
            match (var1165) {
                case caseVar1171 => 
                    var1174;
                    ()
                
                case caseVar1179 => 
                    (-33.0);
                    ();
                    var333
                
                case _ => 
                    var195
                
            };
            match (if (func1190(namedParam1191 : UInt8(186))) { [var1320, var1320, 'h', var1174, var1174, 'g', 'k', 'k', 'u', var1320][5] } else { var2167[2] } ) {
                case 'e' | 'c' | '8' => 
                    var333
                
                case _ : Option<Interface24> => 
                    var var2191 : Int8 = Int8(Int8(UInt8(Int8(UInt8(53)))));
                    var2191 %= ((var2191) | 1);
                    var2199;
                    var2244++
                
                case _ => 
                    ();
                    Class16(var1505);
                    var195
                
            };
            var2253
        }
;
        func1159(Option<Float32>.Some(var1219), Class16())
    } while ((func166(namedParam167 : var1117 - Float32(-45.0), namedParam168 : try (resource = Class16()) { // block id: 1121
        Option<Bool>.Some(false);
        var195;
        var1127--
    } finally { // block id: 1129
        let var1131 : ((UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit), UInt64) = ((UInt8(UInt8(Int8(56))), UInt32(249), UInt64(65), ((Float32(52.0) as (Unit, Unit, Float32, Enum65, UInt8, (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit))) is ((UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit)) -> Unit), (), (), Float32(Float32(Float32(96.0))), ()), UInt64(78));
        var1131;
        var1127 = var1127
    })) && loopTimeVar2259 < 100 ) 
}

public func func2263<T0, T1>(param119 : (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit)) : Unit { // block id: 120
    var var123 : Bool = (Class16() is Int16);
    var123 ||= ((Option<Option<Bool>>.None ?? var138) ?? var123)
}


public func func2265(param2266 : UInt64) : ((UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit)) -> Unit { // block id: 2267
    var var2298 : Int64 = Int64(Int8(UInt8(Int8(-56))));
    var var2360 : ?Option<Interface24> = (Enum385<Option<Unit>, Int16>.defaultValue as Option<Interface24>);
    try { // block id: 2269
        if (false) { // block id: 2272
            var333;
            ()
        } else if (var1260) { // block id: 2276
            var380 %= Float32((Int32(Float32(45.0))) | 1);
            Option<UInt8>.None;
            ()
        };
        var var2290 : UInt16 = UInt16(51);
        match (var530) {
            case _ => 
                (UInt16(2)&127..=var2290&127:((-112)|1))
            
            case _ => 
                var2298 -= 32;
                ();
                var1642
            
            case _ => 
                if (var1233) { (114&127..=(-2)&127:(-32)|1) } else { (82&127..71&127:((-103)|1)) } ;
                var957;
                (UInt16(88)&127..=UInt16(35)&127:100|1)
            
            case caseVar2320 => 
                let var2325 : Interface20 = Class16();
                if (false) { var2325 } else { var2325 } ;
                var195;
                if (false) { var1642 } else { (UInt16(74)&127..UInt16(146)&127:(123|1)) } 
            
            case _ => 
                ();
                (UInt16(217)&127..UInt16(187)&127:(-115)|1)
            
        };
        let var2341 : Range<Int16> = (Int16(UInt8(UInt8(UInt8(124))))&127..Int16(UInt8(Int8(UInt8(53))))&127:((-74)|1));
        var2341
    } catch (e: Exception) { // block id: 2352
        var195;
        (var2360 ?? var1845);
        (var103&127..=var103&127:(13|1))
    } finally { // block id: 2368
        try (resource = Class16()) { // block id: 2370
            Option<UInt8>.Some(UInt8(134));
            ()
        } catch (_) { // block id: 2374

        };
        (Int16(89)&127..Int16(-104)&127:(-105)|1)
    };
    let var2377 : ((UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit)) -> Unit = func2263<UInt64, Option<Float32>>;
    var2377
}


func func2380(param2381 : (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit)) : UInt64 { // block id: 2382
    match (try { // block id: 2387
            var2389;
            let var2399 : (Float64, Bool, Int32, Int64, Int16) = ((-29.0), true, Int32(UInt16(15)), 32, Int16(UInt8(Int8(-1))));
            var2399
        } finally { // block id: 2409
            var2411
        }[3]) {
        case 115 => 
            var1985;
            var2244 |= Int32(18)
        
        case _ => 
            ()
        
    };
    12;
    let var2462 : Float64 = Float64(58.0);
    let var2588 : Unit = ();
    let var2762 : UInt16 = UInt16(UInt16(47));
    if (if (match (()) {
        case _ => 
            var var2454 : Int8 = Int8(-10);
            var2454 -= Int8(17);
            var1597
        
    }) { // block id: 2458
        73.0 != var2462
    } else { // block id: 2465
        var2244 |= Int32(-16);
        false
    }) { // block id: 2470
        try (resource = Class16()) { // block id: 2472
            (-69.0);
            ()
        } catch (e: Exception) { // block id: 2475
            ();
            [(), (), (), (), (), (), (), (), (), ()];
            var195
        };
        var loopTimeVar2487 : Range<UInt64> = (UInt64(Int8(UInt8(Int8(11))))&127..=UInt64(174)&127:(21|1));
        for (i in loopTimeVar2487 where false) {
            var195;
            if (var1597) { var599 } else { Enum65.defaultValue } 
        };
        let var2503 : Int64 = Int64(UInt32(147));
        try { // block id: 2496
            let var2499 : Int8 = Int8(45);
            (var2499&127..=Int8(52)&127:(var2503|1));
            UInt64(176)
        } catch (_) { // block id: 2507
            UInt64(173)
        }
    } else if (try { // block id: 2510
        var2512;
        var1233
    } catch (_) { // block id: 2529
        var195;
        let var2544 : String = """
l7(fZ
^@fFQ
""";
        var var2552 : Range<UInt32> = (UInt32(137)&127..UInt32(193)&127:(-77)|1);
        if (var1597) { (var438, (var957&127..=UInt32(69)&127:(var1030|1)), Int32(-37), var2541, var2544) } else { ((var1968&127..var2244&127:(74|1)), var2552, var2244, var2541, var2544) } ;
        var1233
    } finally { // block id: 2558
        if (var1260) { var2019 } else { Aggregate208() } ;
        Class16(UInt8(31));
        true
    }) { // block id: 2566
        var loopTimeVar2573 : Range<UInt64> = (UInt64(Int8(115))&127..UInt64(UInt16(Int8(UInt8(210))))&127:(Int64(Int32(90))|1));
        for (i in loopTimeVar2573 where false) {
            var1013 -= UInt8(99)
        };
        try (resource = Class16()) { // block id: 2584
            Class16();
            ();
            var2588
        } catch (_) { // block id: 2590

        } finally { // block id: 2591

        };
        var var2601 : (Int64, UInt32, Interface22, UInt16) = (Int64(Int32(88)), UInt32(98), Class16(UInt64(7)), UInt16(Int8(UInt8(Int8(19)))));
        try { // block id: 2593
            var499 | var499
        } finally { // block id: 2597
            if (var1597) { var2601 } else { (var1030, var957, Class16(UInt64(190), optionalParam2609 : (UInt8(227)&127..=UInt8(148)&127:(-87)|1)), UInt16(195)) } ;
            (var1030, UInt32(214), Class16(UInt64(219), optionalParam2609 : (UInt8(90)&127..UInt8(63)&127:35|1)), var2762);
            -UInt64(105)
        }
    } else { // block id: 2767
        let var2771 : Unit = ();
        var var2776 : ((UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit), UInt64) = ((UInt8(Int8(62)), UInt32(19), UInt64(204), ((Int16(39)&127..=Int16(-9)&127:(109|1)) is Array<Interface24>), (), (), Float32(Float32(6.0)), ()), UInt64(207));
        let var2798 : Array<UInt64> = [UInt64(53), UInt64(244), UInt64(130), UInt64(46), UInt64(28), UInt64(133), UInt64(105), UInt64(185), UInt64(216), UInt64(197)];
        try (resource = Class16()) { // block id: 2769
            var2771;
            if (false) { var2776 } else { var2776 } ;
            var2771
        } finally { // block id: 2796
            var2798;
            var103 <<= ((var103) & 7)
        };
        match (var599) {
            case _ : (Rune, Interface24, Range<Int16>) => 
                if (true) { Option<Rune>.Some(var2541) } else { Option<Rune>.None } ;
                var499
            
            case _ => 
                ();
                var1233 ||= true;
                UInt64(216)
            
        }
    }
}


func func114(param115 : String) : String { // block id: 116
    let var2261 : (((UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit)) -> Unit) -> Unit = func147;
    var var2822 : ((UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit)) -> UInt64 = func2380;
    try { // block id: 2825
        ();
        var var2829 : UInt64 = UInt64(92);
        var2829--;
        var546
    } finally { // block id: 2832
        var103 **= (Int16(106) & 3);
        ();
        var546
    }|>(var2822~>(func2265~>var2261));
    let var2878 : Unit = ();
    var var2892 : ?(Unit, Unit, Float32, Enum65, UInt8, (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit)) = ((Enum65.defaultValue as Float32) as (Unit, Unit, Float32, Enum65, UInt8, (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit)));
    var var3096 : Range<UInt64> = (UInt64(176)&127..UInt64(58)&127:(-34)|1);
    var var3126 : ?Option<Interface24> = ((UInt8(Int8(15)), UInt32(Int16(94)), UInt64(Int16(UInt8(43))), false, (), (), Float32(106.0), ()) as Option<Interface24>);
    if (if (var1597) { // block id: 2841
        ();
        var1260
    } else if (if (var1260) { // block id: 2846
        var195;
        var195;
        UInt32(252) < var957
    } else if (false) { // block id: 2853
        var195;
        var333;
        var1597 && var54
    } else { // block id: 2859
        Option<Option<Option<Bool>>>.None;
        Int8(1) <= Int8(-66)
    }) { // block id: 2864
        ();
        var54
    } else { // block id: 2867
        let var2886 : UInt64 = UInt64(62);
        if (false) { var1383 } else { ((UInt8(248), UInt32(215), var499, true, var2878, var333, var380, ()), (UInt64(165)&127..=var2886&127:((-59)|1)), var582, UInt8(20), var2892, var582, (Int16(88)&127..Int16(-67)&127:(-41)|1), var582) } ;
        let var2901 : Bool = false;
        if (var2901) { Option<Unit>.Some(()) } else { var2710 } ;
        true
    }) { // block id: 2907
        try { // block id: 2909
            var1233 &&= var54;
            var var2914 : Interface19 = Class16();
            var2914
        } finally { // block id: 2916
            let var2920 : Interface19 = Class16(Int8(Int8(UInt8(UInt8(75)))));
            if (true) { var2920 } else { var2920 } 
        };
        match ((UInt64(180)&127..=UInt64(90)&127:(-42)|1)) {
            case _ => 
                ();
                ();
                let var3051 : (Array<Option<UInt8>>, Range<Int8>, UInt8) = ([((Float32(39.0) as Rune) as UInt8), Option<UInt8>.Some(UInt8(38)), (Class16() as UInt8), Option<UInt8>.Some(UInt8(136)), Option<UInt8>.None, (['i', 'q', 'Z', 'V', 'P', '7', 'U', 'd', 'w', 'c'] as UInt8), (Class16() as UInt8), Option<UInt8>.None, Option<UInt8>.Some(UInt8(UInt8(223))), Option<UInt8>.Some(UInt8(141))], (Int8(82)&127..Int8(-67)&127:(-9)|1), UInt8(Int8(Int8(-98))));
                if (var1260) { var3051 } else { var3051 } 
            
        };
        match ("""
95?W\\
)}?1j
""") {
            case ###"4FRYBX(/Jq"### => 
                ();
                var3096;
                if (var1233) { param115 } else { ###"V8Epf[cWFa{"### } 
            
            case _ => 
                var1799
            
            case _ => 
                param115
            
        }
    } else if (true) { // block id: 3110
        match {
            case var1597 => 
            ();
            if (true) { var1799 } else { var1799 } 
            case _ => 
            var3121;
            if (var1260) { var3126 } else { var3126 } ;
            ###"JJ*bb&6l/l"###
        }
    } else { // block id: 3143
        if (var1260) { // block id: 3146
            param115
        } else if (true) { // block id: 3149
            """
Ya{<;J
 bpL:
"""
        } else { // block id: 3151
            """
NUf_Z
m^2/~
"""
        }
    }
}

public func func26(namedParam27 ! : Class16) : Class16 { // block id: 28
    var var70 : (Unit, Unit, Float32, Enum65, UInt8, (UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit)) = ((), (), Float32(Float32(79.0)), Enum65.defaultValue, UInt8(Int8(UInt8(Int8(74)))), (UInt8(Int8(105)), UInt32(239), UInt64(Int32(UInt8(73))), (Int64(82) is Unit), (), (), Float32(Float32(Float32(31.0))), ()));
    var var109 : UInt8 = UInt8(UInt8(179));
    var var3154 : (String) -> String = func114;
    func30(namedParam31 : match (var70[3]) {
        case _ => 
            Int16(66) & var103;
            var109
        
    }, namedParam38 : UInt64(39), namedParam39 : (match (var1219) {
        case _ => 
            ();
            var1799
        
    }|>var3154))
}



func func7(param8 : Float32) : Unit { // block id: 9
    func func11(param12 : Float64) : Float32 { // block id: 13
        UInt16(147);
        func26(namedParam27 : Class16()).func3164();
        var1219
    }
;
    var var3228 : UInt64 = UInt64(182);
    func11(Float64(Float32(100.0)) - if (var1233) { // block id: 3226
        var3228;
        88.0
    } else if (var54) { // block id: 3232
        ();
        var310;
        let var3236 : Float64 = (-33.0);
        var3236
    } else { // block id: 3238
        ();
        Option<(Float32, Bool, UInt16, UInt16, UInt16)>.None;
        var3242
    });
    var var3540 : UInt16 = UInt16(181);
    try (resource = Class16()) { // block id: 3245
        var var3307 : Range<Int16> = (Int16(-70)&127..=Int16(-3)&127:100|1);
        let var3310 : Array<Option<UInt8>> = [(((UInt8(171), UInt32(211), UInt64(28), true, (), (), Float32(36.0), ()), UInt64(106)) as UInt8), (Option<Array<Interface24>>.Some([Class16(()), Class16(UInt64(110), optionalParam2609 : (UInt8(204)&127..UInt8(248)&127:(-24)|1)), Class16(()), Class16(()), Class16(UInt8(227)), Class16(UInt64(194), optionalParam2609 : (UInt8(116)&127..=UInt8(179)&127:((-76)|1))), Class16(Option<Float64>.None), Class16(Option<Float64>.Some((-79.0))), Class16(Int8(48)), Class16(UInt64(243))]) as UInt8), Option<UInt8>.None, Option<UInt8>.None, Option<UInt8>.Some(UInt8(Int8(-11))), ([UInt64(143), UInt64(195), UInt64(211), UInt64(77), UInt64(31), UInt64(74), UInt64(179), UInt64(245), UInt64(21), UInt64(219)] as UInt8), ((UInt8(228), UInt32(204), UInt64(68), false, (), (), Float32(Float32(71.0)), ()) as UInt8), ((UInt32(16)&127..=UInt32(86)&127:11|1) as UInt8), ((Float32(47.0), false, UInt16(185), UInt16(UInt8(230)), UInt16(245)) as UInt8), ((Option<UInt8>.Some(UInt8(133)) as Option<Float64>) as UInt8)];
        match (var3248) {
            case _ : Float32 => 
                var3307;
                var3310
            
            case _ => 
                var var3466 : Int32 = Int32(-12);
                var3466;
                let var3472 : ?UInt8 = (([Option<UInt8>.None, Option<UInt8>.Some(UInt8(187)), (Class16(()) as UInt8), ((UInt8(49)&127..=UInt8(109)&127:(-59)|1) as UInt8), (Option<Array<Interface24>>.None as UInt8), Option<UInt8>.None, (((UInt8(1), UInt32(184), UInt64(35), true, (), (), Float32(86.0), ()), UInt64(247)) as UInt8), Option<UInt8>.Some(UInt8(148)), ((UInt8(188), UInt32(37), UInt64(195), true, (), (), Float32(-66.0), ()) as UInt8), Option<UInt8>.Some(UInt8(1))], (Int8(40)&127..=Int8(Int8(-61))&127:(Int64(11)|1)), UInt8(UInt8(Int8(-55)))) as UInt8);
                [Option<UInt8>.Some(UInt8(83)), var3472, var3472, Option<UInt8>.None, var3472, var3472, var3472, Option<UInt8>.Some(UInt8(81)), Option<UInt8>.Some(UInt8(76)), Option<UInt8>.Some(var1505)]
            
        };
        var3121;
        (var2710 ?? ())
    } catch (_) { // block id: 3537
        var3540 -= UInt16(18);
        var loopTimeVar3546 : Range<UInt64> = (UInt64(UInt64(UInt8(Int8(92))))&127..=UInt64(69)&127:(45|1));
        for (i in loopTimeVar3546 where false) {

        };
        ()
    } finally { // block id: 3555
        var195
    }
}

main(): Int64 {
    try {
        let var3558 : (Float32) -> Unit = func7;
        let var3577 : Float32 = Float32(Float32(16.0));
        match (var3562) {
            case _ => 
                var195;
                var3568;
                var3577
            
        }|>var3558;
        if (var103 < Int16(-49)) { // block id: 3584
            Float32(-28.0);
            Option<((UInt8, UInt32, UInt64, Bool, Unit, Unit, Float32, Unit), UInt64)>.None;
            Float32(-69.0) + var1219
        } else { // block id: 3590
            var3592;
            ();
            var380
        };
        match (var582) {
            case (caseVar3600 : (Rune, Interface24, Range<Int16>),caseVar3601 : Array<Option<UInt8>>,caseVar3602,caseVar3603 : Option<Option<Interface24>>,_ : Class16,caseVar3604 : String,caseVar3605,_ : Option<Option<Interface24>>) => 
                var1030 / (((-56)) | 1)
            
            case _ => 
                var1030 * 113
            
            case caseVar3618 => 
                var1030
            
            case _ => 
                var1030
            
        }
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Aggregate208 {

}

extend<T0, T1> Enum385<T0, T1> {

}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_unexpected_declaration_in_scope
// ASSERT: scan parse_expected_character
// ASSERT: scan parse_expected_expr_or_decl_in
// ASSERT: scan parse_expected_catch_or_finally_in_try
// ASSERT: scan parse_expected_left_brace
// ASSERT: scan parse_expected_case
// ASSERT: scan parse_unmatched_right_delimiter


