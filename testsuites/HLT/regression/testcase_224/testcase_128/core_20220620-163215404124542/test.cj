/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output


public var var74 : ??Unit = (Option<Unit>.None as Option<Unit>)
public let var244 : Class233 = Class233()
var var285 : Array<Int32> = [Int32(14), Int32(2), Int32(51), Int32(20), Int32(UInt32(UInt16(UInt16(84)))), Int32(UInt8(195)), Int32(Int16(125)), Int32(Int32(UInt32(Int8(-38)))), Int32(Int16(113)), Int32(UInt32(Int32(6)))]
public var var327 : Int32 = Int32(Int8(Int8(UInt8(Int8(97)))))
let var351 : (Range<Int8>, Unit, Range<UInt8>, Range<Int32>, Int64) = ((Int8(UInt8(Int8(-15)))&127..Int8(Int8(109))&127:(Int64(UInt8(49))|1)), (), (UInt8(223)&127..UInt8(86)&127:(Int64(UInt32(UInt32(86)))|1)), (Int32(-31)&127..Int32(-89)&127:20|1), (-11))
let var391 : ?((Range<Int8>, Unit, Range<UInt8>, Range<Int32>, Int64), Array<Int32>, String, Unit, Bool) = ((UInt8(Int8(Int8(119)))&127..UInt8(UInt8(UInt8(84)))&127:(Int64(Int32(UInt8(172)))|1)) as ((Range<Int8>, Unit, Range<UInt8>, Range<Int32>, Int64), Array<Int32>, String, Unit, Bool))
var var437 : UInt64 = UInt64(235)
let var445 : Unit = ()
public var var450 : ?(Range<Int16>, Range<Int32>, Int16, Option<Unit>) = ((Int16(UInt8(18))&127..Int16(UInt16(122))&127:(Int64(UInt32(209))|1)) as (Range<Int16>, Range<Int32>, Int16, Option<Unit>))
var var467 : ?(Range<Int16>, Range<Int32>, Int16, Option<Unit>) = Option<(Range<Int16>, Range<Int32>, Int16, Option<Unit>)>.None
let var504 : Bool = true
public var var511 : (Range<Int8>, Range<UInt8>, Array<Float32>, (Range<Int16>, Range<Int32>, Int16, Option<Unit>), Array<Int32>, UInt64, Bool, Range<Int8>) = ((Int8(-13)&127..=Int8(-9)&127:(94|1)), (UInt8(128)&127..UInt8(20)&127:(-67)|1), [Float32(-69.0), Float32(-119.0), Float32(78.0), Float32(-14.0), Float32(88.0), Float32(-22.0), Float32(62.0), Float32(67.0), Float32(-8.0), Float32(33.0)], ((Int16(-103)&127..Int16(84)&127:68|1), (Int32(-66)&127..Int32(60)&127:(Int64(Int16(76))|1)), Int16(Int8(95)), ((Int16(-57)&127..=Int16(-70)&127:(-42)|1) as Unit)), [Int32(UInt16(UInt16(110))), Int32(Int16(Int8(-87))), Int32(111), Int32(-23), Int32(-122), Int32(Int8(-111)), Int32(10), Int32(99), Int32(Int8(Int8(86))), Int32(-106)], UInt64(Int8(UInt8(103))), false, (Int8(-93)&127..=Int8(30)&127:(-92)|1))
public let var597 : Array<Array<Int32>> = [[Int32(34), Int32(93), Int32(100), Int32(4), Int32(78), Int32(124), Int32(-97), Int32(107), Int32(-128), Int32(59)], [Int32(-72), Int32(6), Int32(-90), Int32(116), Int32(2), Int32(111), Int32(15), Int32(Int8(-4)), Int32(UInt8(109)), Int32(110)], [Int32(-124), Int32(-63), Int32(-62), Int32(59), Int32(40), Int32(-66), Int32(26), Int32(-67), Int32(4), Int32(-85)], [Int32(UInt32(251)), Int32(Int8(-45)), Int32(Int8(UInt8(30))), Int32(-103), Int32(-60), Int32(Int8(-89)), Int32(UInt8(130)), Int32(Int32(UInt16(76))), Int32(67), Int32(-41)], [Int32(123), Int32(34), Int32(-122), Int32(-83), Int32(89), Int32(-52), Int32(-73), Int32(42), Int32(124), Int32(-19)], [Int32(-127), Int32(-56), Int32(47), Int32(99), Int32(-14), Int32(-39), Int32(-43), Int32(-77), Int32(43), Int32(-120)], [Int32(Int32(Int32(18))), Int32(55), Int32(UInt8(Int8(44))), Int32(-43), Int32(UInt8(UInt8(119))), Int32(-18), Int32(Int8(Int8(-7))), Int32(Int8(-43)), Int32(-15), Int32(Int32(52))], [Int32(69), Int32(122), Int32(-44), Int32(73), Int32(66), Int32(125), Int32(86), Int32(-111), Int32(46), Int32(-45)], [Int32(43), Int32(-119), Int32(-36), Int32(89), Int32(-105), Int32(24), Int32(59), Int32(-30), Int32(21), Int32(108)], [Int32(35), Int32(UInt8(UInt8(2))), Int32(UInt16(39)), Int32(-29), Int32(71), Int32(120), Int32(82), Int32(Int16(-7)), Int32(UInt8(208)), Int32(83)]]
var var871 : Int64 = Int64(Int32(Int16(UInt8(138))))
let var942 : Array<Bool> = [((UInt16(232)&127..UInt16(224)&127:((-15)|1)) is UInt8), ('O' is Option<UInt8>), true, true, ([false, false, false, false, false, false, true, true, false, false] is Interface239), true, true, ('H' is Range<Int8>), ((((49&127..94&127:((-35)|1)) as UInt8) as Bool) is Interface242), false]
public var var1103 : Bool = (Option<(Range<Int16>, Range<Int32>, Int16, Option<Unit>)>.None is Range<Int16>)
public var var1184 : Range<Int64> = (Int64(Int64(Int32(-3)))&127..=(-125)&127:(Int64(15)|1))
public let var1257 : Range<UInt16> = (UInt16(236)&127..UInt16(52)&127:(-24)|1)
let var1299 : Interface241 = Class233()
var var1371 : Unit = ()
public let var1426 : Int32 = Int32(Int8(UInt8(57)))
var var1715 : UInt8 = UInt8(237)
public var var1793 : Float32 = Float32(-36.0)
public var var1853 : ?(Float64, Range<UInt32>, Int32, Array<Range<UInt16>>, (UInt8, Range<UInt16>)) = ((UInt64(246), (), 'V') as (Float64, Range<UInt32>, Int32, Array<Range<UInt16>>, (UInt8, Range<UInt16>)))
let var1867 : Array<Range<UInt16>> = Array<Range<UInt16>>(10){ i => (UInt16(170)&127..=UInt16(122)&127:(-127)|1) }
public let var1945 : (UInt32, UInt16, Range<Int8>, ((Range<Int8>, Unit, Range<UInt8>, Range<Int32>, Int64), Array<Int32>, String, Unit, Bool), (UInt64, Unit, Rune), Int8) = (UInt32(UInt16(63)), UInt16(172), (Int8(-76)&127..=Int8(83)&127:0|1), (((Int8(115)&127..=Int8(-38)&127:(-68)|1), (), (UInt8(66)&127..UInt8(216)&127:(-105)|1), (Int32(-8)&127..=Int32(-25)&127:11|1), Int64(UInt64(141))), [Int32(21), Int32(26), Int32(-17), Int32(82), Int32(-64), Int32(60), Int32(-68), Int32(-84), Int32(95), Int32(106)], """
470Cp
rGK42
""", (), (Option<Bool>.None is Array<Float32>)), (UInt64(Int32(-90)), (), 'L'), Int8(-92))
public var var2026 : Range<Int32> = (Int32(UInt32(118))&127..Int32(Int8(UInt8(UInt8(5))))&127:(117|1))
var var2054 : Array<Option<UInt8>> = Array<Option<UInt8>>(10){ i => Option<UInt8>.None }
var var2118 : ?UInt8 = Option<UInt8>.None
let var2138 : UInt32 = UInt32(220)
let var2145 : Int8 = Int8(UInt8(Int8(UInt8(Int8(44)))))
public var var2160 : (UInt64, Unit, Rune) = (UInt64(128), (), '4')
let var2183 : ((Range<Int8>, Unit, Range<UInt8>, Range<Int32>, Int64), Array<Int32>, String, Unit, Bool) = (((Int8(54)&127..=Int8(4)&127:(-106)|1), (), (UInt8(28)&127..=UInt8(UInt8(215))&127:((-8)|1)), (Int32(96)&127..=Int32(-121)&127:(-104)|1), 45), [Int32(28), Int32(27), Int32(-88), Int32(-55), Int32(61), Int32(26), Int32(29), Int32(92), Int32(1), Int32(-98)], ###"tstuPz7K,Y"###, (), ([true, false, true, true, false, true, false, false, false, true] is Range<Int32>))
public let var2226 : UInt64 = UInt64(133)
var var2331 : Unit = ()
public let var2375 : ?Unit = Option<Unit>.None
public let var2444 : Range<Int8> = (Int8(Int8(-82))&127..=Int8(UInt8(198))&127:(65|1))
var var2458 : Int32 = Int32(Int16(93))
public let var2470 : String = """
rz_%a{
C]8A!
"""
public var var2507 : Int16 = Int16(52)
public var var2528 : ???Unit = ("""
A|<aO
f${var2470}0zsk
""" as Option<Option<Unit>>)
public var var2637 : UInt16 = UInt16(101)
var var2643 : ??Bool = ((Int8(-91)&127..Int8(Int8(UInt8(143)))&127:(Int64(UInt64(Int16(25)))|1)) as Option<Bool>)
public var var2655 : ?Bool = (Class233() as Bool)
var var2750 : Range<UInt64> = (UInt64(114)&127..UInt64(5)&127:40|1)
public let var2806 : Int8 = Int8(Int8(UInt8(UInt8(UInt8(124)))))
public let var3131 : (Option<(Range<Int16>, Range<Int32>, Int16, Option<Unit>)>, Range<UInt8>, Float64) = (('T' as (Range<Int16>, Range<Int32>, Int16, Option<Unit>)), (UInt8(84)&127..UInt8(106)&127:71|1), 16.0)
var var3156 : Option<Option<((Range<Int8>, Unit, Range<UInt8>, Range<Int32>, Int64), Array<Int32>, String, Unit, Bool)>> = Option<Option<((Range<Int8>, Unit, Range<UInt8>, Range<Int32>, Int64), Array<Int32>, String, Unit, Bool)>>.None
public var var3180 : Unit = ()
var var3289 : Array<Float32> = [Float32(83.0), Float32(109.0), Float32(-59.0), Float32(-82.0), Float32(-115.0), Float32(-106.0), Float32(72.0), Float32(52.0), Float32(-88.0), Float32(57.0)]
var var3432 : ?Int32 = Option<Int32>.None
var var3474 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
public var var3516 : UInt32 = UInt32(205)
let var3640 : Int32 = Int32(126)
var var3779 : Int8 = Int8(68)
public var var3786 : UInt64 = UInt64(UInt64(186))
let var3877 : (Range<Int16>, Range<Int32>, Int16, Option<Unit>) = ((Int16(-35)&127..=Int16(-127)&127:112|1), (Int32(41)&127..Int32(-2)&127:(-82)|1), Int16(Int16(Int8(106))), (Option<Option<Option<Unit>>>.None as Unit))
let var4144 : Interface240 = Class233()
public let var4157 : UInt8 = UInt8(83)
var var4253 : Option<Int16> = Option<Int16>.None
public var var4282 : Option<Bool> = Option<Bool>.None
var var4330 : Bool = false
let var4340 : Int32 = Int32(UInt8(UInt8(212)))
public let var4363 : Int32 = Int32(-25)
var var4523 : UInt8 = UInt8(Int8(-108))
let var4637 : Interface237 = Class233()
public var var4678 : Option<Array<Int32>> = ((Int32(Int16(-112)) as Unit) as Array<Int32>)
public var var4795 : Array<Array<Int32>> = [[Int32(36), Int32(59), Int32(-72), Int32(-91), Int32(-125), Int32(29), Int32(105), Int32(85), Int32(44), Int32(125)], [Int32(95), Int32(111), Int32(-106), Int32(123), Int32(74), Int32(-77), Int32(96), Int32(10), Int32(-65), Int32(-22)], [Int32(22), Int32(10), Int32(-86), Int32(14), Int32(-18), Int32(-73), Int32(-99), Int32(-8), Int32(-6), Int32(-10)], [Int32(42), Int32(-119), Int32(-21), Int32(-98), Int32(-67), Int32(31), Int32(114), Int32(-73), Int32(-124), Int32(-106)], [Int32(113), Int32(121), Int32(-38), Int32(-59), Int32(-29), Int32(-76), Int32(30), Int32(56), Int32(4), Int32(-7)], [Int32(56), Int32(46), Int32(119), Int32(-98), Int32(-92), Int32(-42), Int32(9), Int32(88), Int32(-98), Int32(-109)], [Int32(-8), Int32(55), Int32(0), Int32(-122), Int32(-92), Int32(-8), Int32(31), Int32(62), Int32(-57), Int32(-77)], [Int32(-113), Int32(118), Int32(-90), Int32(1), Int32(-73), Int32(119), Int32(-106), Int32(-46), Int32(-95), Int32(119)], [Int32(-3), Int32(-84), Int32(-69), Int32(122), Int32(110), Int32(106), Int32(116), Int32(-24), Int32(98), Int32(-93)], [Int32(-52), Int32(100), Int32(-106), Int32(62), Int32(25), Int32(-105), Int32(-52), Int32(-46), Int32(-109), Int32(-3)]]
public let var4801 : ?(Range<Int16>, Range<Int32>, Int16, Option<Unit>) = Option<(Range<Int16>, Range<Int32>, Int16, Option<Unit>)>.None



public func func83(param84 : Float64) : Unit { // block id: 85

}

public func func206(optionalParam207 ! : Unit = (), namedParam209 ! : Range<UInt32>, optionalParam210 ! : Int16 = Int16(33)) : Unit { // block id: 212
    ()
}


public interface Interface239 {

}

public interface Interface240 {

}

public interface Interface238 <: Interface239 & Interface240 {

}

public interface Interface237 <: Interface238 {

}

public interface Interface241 {

}

public interface Interface236 <: Interface237 & Interface241 {

}

public interface Interface242 <: Interface237 & Interface239 {

}

public open class Class233 <: Interface236 & Interface242 & Resource {
    public init() { // block id: 235

    }
;
    public var var247 : Float64 = (-20.0);
    public init(namedParam2015 ! : (UInt64, Unit, Rune), namedParam2016 ! : (Option<(Range<Int16>, Range<Int32>, Int16, Option<Unit>)>, Range<UInt8>, Float64)) { // block id: 2017
        let var2385 : (Rune) -> Bool = func2045;
        let var2587 : ((Float64) -> Bool) -> Rune = func2387;
        if (if (var504) { // block id: 2021
            ();
            var1103
        } else if ((var2026 is Range<UInt32>)) { // block id: 2035
            ();
            Class233();
            var504
        } else { // block id: 2039
            [(UInt16(66)&127..UInt16(250)&127:110|1), (UInt16(172)&127..=UInt16(87)&127:(-70)|1), (UInt16(16)&127..UInt16(69)&127:122|1), (UInt16(124)&127..=UInt16(191)&127:(-102)|1), (UInt16(87)&127..=UInt16(210)&127:25|1), (UInt16(176)&127..UInt16(72)&127:71|1), (UInt16(207)&127..UInt16(135)&127:86|1), (UInt16(230)&127..=UInt16(31)&127:109|1), (UInt16(240)&127..UInt16(63)&127:(-127)|1), (UInt16(198)&127..=UInt16(32)&127:83|1)];
            var1103
        }) { // block id: 2042

        } else if ((func2589|>(var2587~>var2385))) { // block id: 2592
            var loopTimeVar2597 : Int64 = 0;
            while ((var504) && loopTimeVar2597 < 100 ) {
                loopTimeVar2597++;

            };
            if (var504) { // block id: 2600
                var2444;
                var1371
            }
        }
    }
;
    private static var var2717 : (UInt8, Range<UInt16>) = (UInt8(197), (UInt16(214)&127..UInt16(136)&127:(-108)|1));
    private static var var2764 : Float64 = (-40.0);
    public static var var3016 : Range<UInt8> = (UInt8(146)&127..UInt8(18)&127:((-67)|1));
    private static var var3139 : Interface242 = Class233();
    public static let var3183 : Option<Int8> = Option<Int8>.None;
    public init(optionalParam3109 ! : Int16 = Int16(113), namedParam3111 ! : Range<Int64>, namedParam3112 ! : Unit) { // block id: 3113
        try { // block id: 3115
            try { // block id: 3117
                ();
                Class233()
            } finally { // block id: 3120
                if (var1103) { (var450, (UInt8(185)&127..=var1715&127:((-2)|1)), (-76.0)) } else { var3131 } ;
                var1793;
                var3139
            };
            try { // block id: 3142
                if (true) { var2375 } else { Option<Unit>.Some(()) } 
            } finally { // block id: 3148
                var2375
            };
            var3156.getOrThrow()
        } finally { // block id: 3158
            (Option<Unit>.Some(var1371) ?? ());
            (Option<Option<((Range<Int8>, Unit, Range<UInt8>, Range<Int32>, Int64), Array<Int32>, String, Unit, Bool)>>.Some(Option<((Range<Int8>, Unit, Range<UInt8>, Range<Int32>, Int64), Array<Int32>, String, Unit, Bool)>.Some(var2183)) ?? var391)
        };
        (try { // block id: 3178
            var3180;
            var3183
        } finally { // block id: 3185
            ();
            if (var1103) { Option<Int8>.Some(Int8(114)) } else { Option<Int8>.Some(Int8(14)) } 
        } ?? if ((Option<Bool>.Some(false) ?? false)) { // block id: 3198
            Int8(60)
        } else if (if (var1103) { // block id: 3202
            optionalParam3109 < var2507
        } else { // block id: 3206
            var504
        }) { // block id: 3208
            (var2764, (var2138&127..UInt32(158)&127:(var871|1)), var2458, [(UInt16(238)&127..UInt16(89)&127:(-4)|1), (UInt16(99)&127..=UInt16(164)&127:(-102)|1), (UInt16(184)&127..=UInt16(67)&127:49|1), (UInt16(34)&127..=UInt16(174)&127:104|1), (UInt16(44)&127..=UInt16(112)&127:(-22)|1), (UInt16(12)&127..UInt16(215)&127:(-117)|1), (UInt16(87)&127..UInt16(90)&127:89|1), (UInt16(39)&127..=UInt16(22)&127:(-79)|1), (UInt16(136)&127..UInt16(73)&127:(-81)|1), (UInt16(220)&127..=UInt16(44)&127:(-9)|1)], var2717);
            Int8(61) * Int8(24)
        } else { // block id: 3221
            var437;
            var3180;
            var2806
        })
    }
;
    public init(param2685 : Rune, optionalParam2686 ! : Option<UInt8> = (UInt64(Int16(120)) as UInt8)) { // block id: 2690
        var var2701 : Int64 = 46;
        let var2712 : Unit = ();
        var var2801 : UInt64 = UInt64(138);
        let var2937 : Int32 = Int32(UInt32(42));
        var loopTimeVar2955 : Int64 = 0;
        while ((if (try { // block id: 2694
            var2331;
            var1371;
            var504
        } catch (_) { // block id: 2698
            var2701 >>= ((110) & 7);
            false
        } finally { // block id: 2705
            var445;
            var2637 == UInt16(163)
        }) { // block id: 2710
            var2712;
            var1103
        } else if ((var2717 is (Unit, Range<UInt32>, Int16) -> Unit)) { // block id: 2721
            var2026;
            var445;
            let var2726 : Bool = ((((Int8(-108)&127..=Int8(97)&127:(-11)|1), (), (UInt8(13)&127..=UInt8(25)&127:(66|1)), (Int32(-7)&127..=Int32(-101)&127:(-56)|1), 64), [Int32(-74), Int32(92), Int32(-24), Int32(120), Int32(-76), Int32(19), Int32(-3), Int32(-42), Int32(-126), Int32(28)], "q[\"n\\OAzjG", (), ((Option<Bool>.Some(true) as Bool) is (Option<(Range<Int16>, Range<Int32>, Int16, Option<Unit>)>, Range<UInt8>, Float64))) is (Bool, ((Range<Int8>, Unit, Range<UInt8>, Range<Int32>, Int64), Array<Int32>, String, Unit, Bool), Range<Int32>, UInt8));
            !var2726
        } else { // block id: 2745
            if (true) { (UInt64(47)&127..UInt64(200)&127:(-10)|1) } else { var2750 } ;
            var504
        }) && loopTimeVar2955 < 100 ) {
            loopTimeVar2955++;
            var loopTimeVar2769 : Range<UInt64> = (UInt64(138)&127..=UInt64(113)&127:(Int64(Int32(-106))|1));
            for (i in loopTimeVar2769 where true) {
                (var450, (var1715&127..=UInt8(31)&127:(var871|1)), var2764);
                var1426 + var327
            };
            let var2782 : (Range<Int8>, Unit, Range<UInt8>, Range<Int32>, Int64) = ((Int8(92)&127..Int8(-45)&127:35|1), (), (UInt8(115)&127..UInt8(79)&127:(48|1)), (Int32(-127)&127..Int32(121)&127:1|1), Int64(UInt16(UInt8(Int8(112)))));
            let var2895 : (Bool, ((Range<Int8>, Unit, Range<UInt8>, Range<Int32>, Int64), Array<Int32>, String, Unit, Bool), Range<Int32>, UInt8) = (false, (((Int8(-112)&127..=Int8(38)&127:48|1), (), (UInt8(94)&127..=UInt8(245)&127:(46|1)), (Int32(59)&127..Int32(-35)&127:58|1), Int64((-16))), [Int32(-10), Int32(109), Int32(91), Int32(82), Int32(117), Int32(61), Int32(-31), Int32(-15), Int32(87), Int32(81)], "@EM\"S=eB1@", (), false), (Int32(-94)&127..=Int32(-50)&127:((-94)|1)), UInt8(212));
            var var2951 : Range<Int32> = (Int32(-41)&127..=Int32(19)&127:1|1);
            match ((UInt32(211), var2637, (Int8(-79)&127..Int8(-104)&127:16|1), (var2782, var285, "~()x__}\\4v", (), false), (var2801, (), param2685), var2806)) {
                case (caseVar2814 : Rune,_,_ : Float64,caseVar2815,(_,_ : UInt64,caseVar2816),_) => 
                    var var2820 : Bool = true;
                    var2820 &&= false;
                    ();
                    (false, caseVar2815, (Int32(36)&127..Int32(119)&127:(-119)|1), var1715)
                
                case caseVar2831 => 
                    ();
                    var var2837 : (Bool, ((Range<Int8>, Unit, Range<UInt8>, Range<Int32>, Int64), Array<Int32>, String, Unit, Bool), Range<Int32>, UInt8) = (((Int8(-26)&127..=Int8(-40)&127:(-27)|1) is Float64), (((Int8(89)&127..Int8(-56)&127:70|1), (), (UInt8(99)&127..=UInt8(254)&127:(88|1)), (Int32(82)&127..Int32(-93)&127:62|1), 70), [Int32(19), Int32(-37), Int32(96), Int32(-10), Int32(-71), Int32(16), Int32(-107), Int32(-123), Int32(-66), Int32(-98)], ###"M,NjPu9 Zj"###, (), ((UInt32(3)&127..UInt32(118)&127:((-104)|1)) is () -> UInt64)), (Int32(15)&127..=Int32(61)&127:(-36)|1), UInt8(32));
                    if (false) { var2837 } else { (false, (var2782, var285, var2470, (), var1103), var2026, UInt8(121)) } 
                
                case (_ : String,caseVar2873,caseVar2874,(_ : Int32,_,caseVar2875,_,_),_ : Array<Range<UInt16>>,caseVar2876 : Int32) => 
                    var1945;
                    if (var1103) { (true, (var351, var285, "+|\"\"Cqd#]M", (), var1103), (Int32(-93)&127..=caseVar2876&127:(var2701|1)), UInt8(220)) } else { var2895 } 
                
                case _ : UInt16 => 
                    Option<Option<Unit>>.None;
                    (true, var2183, (var2458&127..var2458&127:((-89)|1)), UInt8(145))
                
                case _ => 
                    [Int32(-112), Int32(-39), var327, var2937, Int32(39), var2937, var1426, var2458, var327, var1426];
                    (UInt8(34)&127..UInt8(99)&127:75|1);
                    (var504, var2183, var2951, UInt8(130))
                
            }
        };
        let var3053 : Interface242 = Class233();
        (match (match ((true, var2183, (Int32(116)&127..Int32(-92)&127:(-37)|1), var1715)) {
                case (_ : Range<UInt32>,((caseVar2966,caseVar2967,caseVar2968 : Array<Array<Bool>>,caseVar2969 : Interface240,caseVar2970),_,_,_ : (Range<Int8>, Unit, Range<UInt8>, Range<Int32>, Int64),_),_,caseVar2971) => 
                    var var2974 : Unit = ();
                    var2974;
                    ();
                    var2183
                
                case (caseVar2980,((caseVar2981,_ : Range<UInt8>,caseVar2982 : Bool,caseVar2983,_),caseVar2984,caseVar2985 : (UInt64, Unit, Rune),caseVar2986 : (Range<Int16>, Range<Int32>, Int16, Option<Unit>),_),caseVar2987,_) => 
                    var2712;
                    UInt64(134) << ((UInt64(209)) & 7);
                    var2183
                
                case caseVar2996 : Interface238 => 
                    if (var1103) { (var351, var285, var2470, var2712, true) } else { var2183 } 
                
                case (caseVar3009,(caseVar3010 : Array<Float32>,caseVar3011,_,caseVar3012,_ : String),_ : Range<Int16>,caseVar3013) => 
                    var3016;
                    var var3025 : String = """
8Tq@k
ra=@a
""";
                    (var351, caseVar3011, var3025, (), var504)
                
                case _ => 
                    var1103 &&= false;
                    var2801 &= var2226;
                    if (var504) { var2183 } else { var2183 } 
                
            }) {
            case (_ : UInt32,caseVar3043,_ : Interface237,caseVar3044 : Range<Int16>,caseVar3045 : Option<Unit>) => 
                if (var1103) { var391 } else { var391 } ;
                ();
                var3053
            
            case caseVar3057 => 
                if (true) { var285 } else { [Int32(75), Int32(61), Int32(-47), Int32(91), Int32(116), Int32(87), Int32(-105), Int32(67), Int32(-6), Int32(-22)] } ;
                let var3066 : Interface237 = Class233(namedParam2015 : (UInt64(12), (), 'j'), namedParam2016 : ((Int16(82) as (Range<Int16>, Range<Int32>, Int16, Option<Unit>)), (UInt8(Int8(-2))&127..UInt8(UInt8(184))&127:(Int64(UInt64(61))|1)), Float64((-99.0))));
                var var3085 : Interface237 = Class233();
                if (var504) { var3066 } else { var3085 } ;
                if (true) { Class233() } else { var3053 } 
            
            case ((_,_ : Array<Bool>,caseVar3093,_ : Option<Unit>,_),caseVar3094 : Range<UInt16>,_ : Range<UInt64>,caseVar3095 : Option<Range<Int32>>,_ : Interface242) => 
                if (var504) { Class233() } else { Class233() } 
            
            case _ : (Range<Int8>, Unit, Range<UInt8>, Range<Int32>, Int64) => 
                if (var1103) { var3053 } else { Class233(optionalParam3109 : Int16(-35), namedParam3111 : (85&127..(-68)&127:107|1), namedParam3112 : var3180) } 
            
            case _ => 
                var2712;
                Class233(namedParam3111 : var1184, namedParam3112 : ())
            
        } as Option<Option<Unit>>)
    }

    public func isClosed(): Bool { return false }
    public func close(): Unit {}
}



public func func222(param223 : Float64) : Bool { // block id: 224
    (Option<Unit>.None ?? func83(var244.var247));
    var var263 : Int8 = Int8(61);
    var var268 : Unit = ();
    let var272 : Range<Int32> = (Int32(114)&127..Int32(75)&127:(Int64(UInt16(Int16(43)))|1));
    let var280 : Int64 = Int64(Int64(Int32(46)));
    let var341 : Bool = (###"|>Z.p+D,OV"### is Float32);
    (Option<((Range<Int8>, Unit, Range<UInt8>, Range<Int32>, Int64), Array<Int32>, String, Unit, Bool)>.Some((((var263&127..Int8(-69)&127:(3|1)), var268, (UInt8(215)&127..=UInt8(62)&127:(-60)|1), var272, var280), var285, "JlO=v#LkSb", (), true)) ?? (((var263&127..Int8(18)&127:((-59)|1)), var268, (UInt8(184)&127..UInt8(127)&127:(-42)|1), var272, var280), [Int32(45), Int32(-35), Int32(-70), Int32(-37), var327, Int32(-17), Int32(-21), Int32(34), Int32(-14), Int32(5)], """
b\\Cwn
%zl[v
""", (), var341))[0][1];
    let var407 : UInt64 = UInt64(152);
    try { // block id: 347
        try (resource = Class233()) { // block id: 349
            var351;
            var268
        } finally { // block id: 371
            var263++
        };
        Option<Bool>.Some(var341).getOrThrow()
    } finally { // block id: 381
        var var387 : Bool = false;
        if (false) { // block id: 384
            var387 ||= var387;
            var391;
            !var341
        } else { // block id: 405
            var407;
            false
        }
    }
}



public func func560(param561 : Option<Unit>) : Option<Bool> { // block id: 562
    var var572 : Array<Unit> = Array<Unit>(10){ i => () };
    (Option<Array<Unit>>.Some(var572) ?? [var445, (), var445, (), var445, var445, (), var445, (), var445])[9];
    var597;
    var var705 : ?Bool = Option<Bool>.None;
    if (false) { match (Option<Unit>.None) {
        case _ : Array<Unit> => 
            if (true) { Option<Unit>.None } else { Option<Unit>.Some(()) } ;
            var var702 : Bool = true;
            (var351, [var327, Int32(-113), Int32(76), Int32(-123), var327, var327, Int32(-75), var327, var327, Int32(-46)], """
/9Lq=
F!)Q.
""", (), var702);
            var705
        
        case caseVar709 => 
            if (false) { var705 } else { Option<Bool>.None } 
        
        case _ => 
            var705
        
    } } else { var705 } 
}

func func421(param422 : (Float64) -> Bool) : Array<Bool> { // block id: 425
    var var478 : (Range<Int16>, Range<Int32>, Int16, Option<Unit>) = ((Int16(-54)&127..=Int16(55)&127:(Int64(Int16(-115))|1)), (Int32(-121)&127..Int32(-14)&127:(-41)|1), Int16(Int8(Int8(Int8(78)))), Option<Unit>.None);
    (match ((UInt64(245)&127..var437&127:(60|1))) {
        case caseVar442 : Interface239 => 
            var445;
            if (true) { var450 } else { var450 } 
        
        case caseVar462 => 
            if (false) { var467 } else { Option<(Range<Int16>, Range<Int32>, Int16, Option<Unit>)>.None } 
        
        case caseVar472 => 
            var445;
            ();
            Option<(Range<Int16>, Range<Int32>, Int16, Option<Unit>)>.Some(var478)
        
        case caseVar493 : Float32 => 
            var445;
            Option<Unit>.None;
            Option<(Range<Int16>, Range<Int32>, Int16, Option<Unit>)>.Some(var478)
        
        case _ => 
            var445;
            if (var504) { var450 } else { Option<(Range<Int16>, Range<Int32>, Int16, Option<Unit>)>.None } 
        
    } ?? var511[3])[3];
    Int32(-15);
    let var720 : (Option<Unit>) -> Option<Bool> = { lambdaParameter723 : Option<Unit> => (UInt32(UInt32(Int16(-22))) as Bool) };
    var var858 : Range<UInt64> = (UInt64(5)&127..=UInt64(Int32(-18))&127:(Int64(UInt32(Int16(Int8(25))))|1));
    var var985 : Array<Array<Bool>> = [[false, false, true, false, false, false, false, false, false, true], [true, false, false, false, false, false, false, false, true, true], [true, true, false, false, true, true, false, false, true, false], [false, false, false, true, true, false, true, false, true, true], [false, false, false, false, true, true, false, true, true, false], [true, true, false, true, true, false, false, false, false, false], [false, false, true, false, true, false, true, false, true, false], [true, true, false, false, false, true, false, false, false, false], [true, false, false, true, false, false, true, false, false, false], [true, false, false, true, true, false, true, false, true, true]];
    match ((Option<Unit>.None|>var720)) {
        case caseVar732 => 
            let var736 : Array<Bool> = Array<Bool>(10){ i => (Int32(Int32(-90)) is UInt16) };
            [var736, var736, [false, false, true, true, true, false, true, false, false, true], [false, true, false, false, true, false, true, true, true, true], var736, [false, true, true, true, false, false, true, true, false, true], [true, true, true, true, true, true, false, true, true, true], [false, true, var504, false, var504, false, true, var504, var504, var504], [true, true, false, false, true, false, false, false, true, true], var736]
        
        case caseVar852 : Rune => 
            var445;
            if (true) { var858 } else { (UInt64(49)&127..UInt64(70)&127:(var871|1)) } ;
            let var878 : Array<Bool> = [true, ([(), (), (), (), (), (), (), (), (), ()] is (Unit, Range<UInt32>, Int16) -> Unit), false, (Option<(Range<Int16>, Range<Int32>, Int16, Option<Unit>)>.Some(((Int16(-35)&127..Int16(54)&127:55|1), (Int32(-53)&127..=Int32(-2)&127:(-36)|1), Int16(-30), Option<Unit>.Some(()))) is Array<Array<Bool>>), false, ("m$.&Fv=>vh" is Int16), true, ([Int32(Int32(-80)), Int32(Int8(40)), Int32(70), Int32(-67), Int32(-19), Int32(-6), Int32(-9), Int32(Int16(-27)), Int32(88), Int32(UInt32(126))] is Interface237), false, true];
            [var878, [true, false, false, false, true, true, true, false, false, true], [false, var504, var504, true, var504, var504, var504, false, var504, var504], var878, var878, var878, [var504, var504, false, var504, var504, var504, false, false, false, false], [true, true, true, true, true, true, false, true, true, false], var942, [false, true, false, true, true, true, false, false, false, false]]
        
        case caseVar970 => 
            var var974 : String = """
3^WiP
E>Fr?
""";
            var974 = var974;
            [[true, false, true, false, true, true, false, true, true, true], [false, false, true, false, false, false, false, true, true, false], [false, true, false, false, false, false, false, true, true, true], [false, false, false, true, true, false, true, true, false, false], [true, false, true, true, true, true, false, true, true, false], [false, true, false, false, false, true, true, true, false, true], [false, false, false, false, true, true, false, true, false, true], [false, false, true, true, true, true, true, true, true, true], [true, true, true, true, true, false, false, true, false, true], [false, true, true, false, false, false, false, true, false, true]]
        
        case caseVar980 => 
            if (false) { var985 } else { [[false, false, true, false, true, true, false, false, true, true], var942, [var504, var504, true, true, var504, var504, var504, false, var504, var504], var942, var942, var942, var942, [true, true, var504, false, true, true, var504, true, var504, false], [var504, false, var504, true, var504, true, false, false, true, false], var942] } 
        
        case _ => 
            if (true) { var985 } else { [var942, [var504, true, true, false, false, var504, false, var504, false, false], [false, true, true, false, true, false, false, true, true, false], [true, false, true, false, true, false, true, true, false, false], [var504, var504, false, false, var504, var504, var504, var504, var504, var504], [var504, false, true, false, var504, var504, false, var504, var504, var504], [true, true, false, true, var504, false, true, var504, var504, var504], var942, [false, false, false, false, true, false, false, true, true, true], [false, false, false, false, true, true, true, true, true, true]] } 
        
    }[7]
}

func func1086(param223 : Float64) : Bool { // block id: 224
    (Option<Unit>.None ?? func83(var244.var247));
    var var263 : Int8 = Int8(61);
    var var268 : Unit = ();
    let var272 : Range<Int32> = (Int32(114)&127..Int32(75)&127:(Int64(UInt16(Int16(43)))|1));
    let var280 : Int64 = Int64(Int64(Int32(46)));
    let var341 : Bool = (###"|>Z.p+D,OV"### is Float32);
    (Option<((Range<Int8>, Unit, Range<UInt8>, Range<Int32>, Int64), Array<Int32>, String, Unit, Bool)>.Some((((var263&127..Int8(-69)&127:(3|1)), var268, (UInt8(215)&127..=UInt8(62)&127:(-60)|1), var272, var280), var285, "JlO=v#LkSb", (), true)) ?? (((var263&127..Int8(18)&127:((-59)|1)), var268, (UInt8(184)&127..UInt8(127)&127:(-42)|1), var272, var280), [Int32(45), Int32(-35), Int32(-70), Int32(-37), var327, Int32(-17), Int32(-21), Int32(34), Int32(-14), Int32(5)], """
b\\Cwn
%zl[v
""", (), var341))[0][1];
    let var407 : UInt64 = UInt64(152);
    try { // block id: 347
        try (resource = Class233()) { // block id: 349
            var351;
            var268
        } finally { // block id: 371
            var263++
        };
        Option<Bool>.Some(var341).getOrThrow()
    } finally { // block id: 381
        var var387 : Bool = false;
        if (false) { // block id: 384
            var387 ||= var387;
            var391;
            !var341
        } else { // block id: 405
            var407;
            false
        }
    }
}

public func func411<T0, T1>(param412 : (Float64) -> Bool) : Bool { // block id: 415
    Class233();
    var var1089 : (Float64) -> Bool = { lambdaParameter1092 : Float64 => true };
    var var1112 : UInt16 = UInt16(UInt8(Int8(85)));
    var var1117 : UInt16 = UInt16(Int16(UInt8(152)));
    var var1125 : Array<Range<UInt16>> = [(UInt16(135)&127..=UInt16(83)&127:68|1), (UInt16(88)&127..=UInt16(91)&127:54|1), (UInt16(18)&127..=UInt16(186)&127:(-15)|1), (UInt16(118)&127..=UInt16(237)&127:(-30)|1), (UInt16(12)&127..UInt16(99)&127:96|1), (UInt16(187)&127..UInt16(103)&127:(-24)|1), (UInt16(5)&127..=UInt16(71)&127:(-109)|1), (UInt16(127)&127..UInt16(31)&127:(-40)|1), (UInt16(124)&127..UInt16(244)&127:(-7)|1), (UInt16(197)&127..=UInt16(74)&127:99|1)];
    if ((var1089|>func421)[4]) { try { // block id: 1097
        (UInt16(249)&127..=UInt16(13)&127:12|1)
    } catch (_) { // block id: 1099
        var445;
        var1103 &&= false;
        (UInt16(139)&127..UInt16(253)&127:39|1)
    } finally { // block id: 1108
        ();
        (var1112&127..=var1117&127:((-40)|1))
    } } else { var1125[1] } ;
    let var1130 : ((Range<Int8>, Unit, Range<UInt8>, Range<Int32>, Int64), Array<Int32>, String, Unit, Bool) = (((Int8(71)&127..Int8(7)&127:(-31)|1), (), (UInt8(252)&127..=UInt8(3)&127:(-32)|1), (Int32(-105)&127..Int32(1)&127:(-123)|1), (-82)), [Int32(-118), Int32(48), Int32(-120), Int32(62), Int32(121), Int32(-115), Int32(-78), Int32(-14), Int32(-119), Int32(-107)], "D\\rTf~ptBZ", (), ("""
&ex)(
^cxoF
""" is Interface238));
    var1130[4]
}

public func func1906(param223 : Float64) : Bool { // block id: 224
    (Option<Unit>.None ?? func83(var244.var247));
    var var263 : Int8 = Int8(61);
    var var268 : Unit = ();
    let var272 : Range<Int32> = (Int32(114)&127..Int32(75)&127:(Int64(UInt16(Int16(43)))|1));
    let var280 : Int64 = Int64(Int64(Int32(46)));
    let var341 : Bool = (###"|>Z.p+D,OV"### is Float32);
    (Option<((Range<Int8>, Unit, Range<UInt8>, Range<Int32>, Int64), Array<Int32>, String, Unit, Bool)>.Some((((var263&127..Int8(-69)&127:(3|1)), var268, (UInt8(215)&127..=UInt8(62)&127:(-60)|1), var272, var280), var285, "JlO=v#LkSb", (), true)) ?? (((var263&127..Int8(18)&127:((-59)|1)), var268, (UInt8(184)&127..UInt8(127)&127:(-42)|1), var272, var280), [Int32(45), Int32(-35), Int32(-70), Int32(-37), var327, Int32(-17), Int32(-21), Int32(34), Int32(-14), Int32(5)], """
b\\Cwn
%zl[v
""", (), var341))[0][1];
    let var407 : UInt64 = UInt64(152);
    try { // block id: 347
        try (resource = Class233()) { // block id: 349
            var351;
            var268
        } finally { // block id: 371
            var263++
        };
        Option<Bool>.Some(var341).getOrThrow()
    } finally { // block id: 381
        var var387 : Bool = false;
        if (false) { // block id: 384
            var387 ||= var387;
            var391;
            !var341
        } else { // block id: 405
            var407;
            false
        }
    }
}



func func1497(param1498 : Interface238) : Option<Bool> { // block id: 1499
    var var1505 : Float32 = Float32(-10.0);
    let var1546 : Float64 = (-127.0);
    if (match (var1505) {
        case _ : Interface238 => 
            ();
            var351;
            var1103
        
        case _ : Array<Array<Int32>> => 
            UInt16(30) | UInt16(68);
            true
        
        case 9.0 => 
            37 << ((26) & 7);
            var504
        
        case _ : Array<Array<Bool>> => 
            var var1531 : Range<Int32> = (Int32(40)&127..=Int32(44)&127:(-88)|1);
            var1531;
            var1371;
            false
        
        case _ => 
            false || var1103
        
    }) { // block id: 1540
        var1371;
        97.0
    } else { // block id: 1543
        var1371;
        var1546
    }|>func83;
    var var1549 : ?Bool = (((Int8(88)&127..Int8(70)&127:(-118)|1), (), (UInt8(UInt8(44))&127..UInt8(210)&127:(Int64(66)|1)), (Int32(-54)&127..Int32(-127)&127:(Int64(UInt8(50))|1)), Int64(UInt32(141))) as Bool);
    var1549
}

public func func1471(param1472 : (Float64) -> Unit) : Int16 { // block id: 1475
    var var1570 : Bool = (Int64(UInt8(96)) is Range<UInt64>);
    let var1586 : (Option<(Range<Int16>, Range<Int32>, Int16, Option<Unit>)>, Range<UInt8>, Float64) = ((UInt64(Int32(Int16(-27))) as (Range<Int16>, Range<Int32>, Int16, Option<Unit>)), (UInt8(Int8(-115))&127..=UInt8(UInt8(Int8(-29)))&127:(Int64(Int16(115))|1)), Float64(Float32(Float32(2.0))));
    var var1630 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    let var1644 : Array<Range<UInt16>> = Array<Range<UInt16>>(10){ i => (UInt16(4)&127..UInt16(43)&127:(-55)|1) };
    if (func222(Float64(Float32(-103.0)))) { // block id: 1480
        var loopTimeVar1488 : Int64 = 0;
        do {
            loopTimeVar1488++;
            UInt32(107) / ((UInt32(128)) | 1)
        } while ((var1103) && loopTimeVar1488 < 100 ) ;
        Int16(Int16(18))
    } else if (((Class233()|>func1497) ?? var1570)) { // block id: 1574
        if (var1103) { // block id: 1577
            Int16(39)
        } else { // block id: 1579
            ();
            Int16(-59)
        }
    } else { // block id: 1582
        var1586[0];
        var var1608 : UInt8 = UInt8(Int8(Int8(UInt8(Int8(-17)))));
        var var1616 : Int16 = Int16(-103);
        var var1627 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
        try { // block id: 1605
            (var1608, (UInt16(45)&127..=UInt16(52)&127:(-24)|1));
            var1616
        } catch (e: Exception) { // block id: 1618
            var1257;
            Class233();
            var1616
        } finally { // block id: 1622
            let var1673 : (Array<Unit>, Array<Unit>, Array<Range<UInt16>>, Array<Range<UInt16>>, Unit) = ([(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(UInt16(244)&127..=UInt16(242)&127:10|1), (UInt16(217)&127..UInt16(169)&127:47|1), (UInt16(147)&127..UInt16(108)&127:(-31)|1), (UInt16(30)&127..UInt16(147)&127:12|1), (UInt16(208)&127..=UInt16(5)&127:(-86)|1), (UInt16(103)&127..UInt16(61)&127:(-99)|1), (UInt16(169)&127..UInt16(221)&127:87|1), (UInt16(33)&127..=UInt16(183)&127:(-64)|1), (UInt16(68)&127..UInt16(106)&127:(-50)|1), (UInt16(225)&127..=UInt16(129)&127:(-21)|1)], [(UInt16(176)&127..=UInt16(227)&127:78|1), (UInt16(31)&127..=UInt16(31)&127:(-35)|1), (UInt16(134)&127..UInt16(182)&127:99|1), (UInt16(137)&127..UInt16(15)&127:(-98)|1), (UInt16(97)&127..=UInt16(206)&127:74|1), (UInt16(224)&127..UInt16(51)&127:(-128)|1), (UInt16(196)&127..UInt16(26)&127:(-103)|1), (UInt16(111)&127..UInt16(241)&127:98|1), (UInt16(191)&127..=UInt16(206)&127:(-80)|1), (UInt16(170)&127..UInt16(115)&127:70|1)], ());
            if (false) { (var1627, var1630, [(UInt16(1)&127..UInt16(67)&127:103|1), (UInt16(216)&127..=UInt16(232)&127:(-18)|1), (UInt16(115)&127..=UInt16(238)&127:9|1), (UInt16(136)&127..=UInt16(226)&127:(-7)|1), (UInt16(185)&127..UInt16(7)&127:109|1), (UInt16(22)&127..UInt16(205)&127:(-121)|1), (UInt16(163)&127..UInt16(190)&127:24|1), (UInt16(9)&127..=UInt16(209)&127:(-25)|1), (UInt16(49)&127..=UInt16(194)&127:(-68)|1), (UInt16(54)&127..UInt16(74)&127:(-21)|1)], var1644, var1371) } else { var1673 } ;
            var var1702 : Int8 = Int8(-13);
            var1702--;
            Int16(-90) << ((var1616) & 7)
        }
    }
}

public func func1708(param84 : Float64) : Unit { // block id: 85

}

func func1398(param1399 : Option<UInt8>) : UInt64 { // block id: 1400
    let var1443 : Interface239 = Class233();
    var var1453 : (UInt8, Range<UInt16>) = (UInt8(159), (UInt16(UInt16(53))&127..=UInt16(115)&127:(87|1)));
    if (true) { // block id: 1403
        var loopTimeVar1409 : Range<UInt64> = (UInt64(Int16(Int16(Int8(66))))&127..UInt64(173)&127:(Int64(Int8(Int8(Int8(-92))))|1));
        for (i in loopTimeVar1409 where var1103) {
            var1371;
            Class233()
        };
        try { // block id: 1421
            Class233();
            var327 &= var1426
        } catch (e: Exception) { // block id: 1430
            ()
        };
        match {
            case false => 
            var437
            case var504 => 
            var437
            case _ => 
            if (false) { var1443 } else { var1443 } ;
            UInt64(65)
        }
    } else if (false) { // block id: 1448
        (59&127..(-2)&127:16|1);
        var1453[1];
        (UInt64(156), var1371, 'q')[0]
    } else { // block id: 1469
        func1708|>func1471;
        var437
    }
}



public func func1941(param1942 : Interface237) : (UInt32, UInt16, Range<Int8>, ((Range<Int8>, Unit, Range<UInt8>, Range<Int32>, Int64), Array<Int32>, String, Unit, Bool), (UInt64, Unit, Rune), Int8) { // block id: 1943
    var1945
}

public func func2229(param2230 : Int32) : ((Range<Int8>, Unit, Range<UInt8>, Range<Int32>, Int64), Array<Int32>, String, Unit, Bool) { // block id: 2231
    let var2236 : (Range<Int8>, Range<UInt8>, Array<Float32>, (Range<Int16>, Range<Int32>, Int16, Option<Unit>), Array<Int32>, UInt64, Bool, Range<Int8>) = ((Int8(56)&127..=Int8(-13)&127:115|1), (UInt8(92)&127..=UInt8(96)&127:20|1), [Float32(126.0), Float32(-18.0), Float32(Float32(59.0)), Float32(-76.0), Float32(57.0), Float32(64.0), Float32(Float32(Float32(6.0))), Float32(Float32(Float32(8.0))), Float32(110.0), Float32(Float32(85.0))], ((Int16(-75)&127..Int16(-75)&127:10|1), (Int32(-121)&127..=Int32(7)&127:113|1), Int16(Int16(UInt8(204))), Option<Unit>.Some(())), [Int32(67), Int32(UInt8(181)), Int32(Int16(UInt16(177))), Int32(85), Int32(-48), Int32(Int8(23)), Int32(72), Int32(UInt32(216)), Int32(61), Int32(19)], UInt64(28), true, (Int8(81)&127..=Int8(Int8(UInt8(19)))&127:(Int64(UInt32(UInt8(180)))|1)));
    var var2340 : Range<Int8> = (Int8(-72)&127..=Int8(19)&127:32|1);
    let var2348 : String = "^z;FfJa{Xc%";
    var loopTimeVar2356 : Int64 = 0;
    (try { // block id: 2234
        var2236;
        Option<((Range<Int8>, Unit, Range<UInt8>, Range<Int32>, Int64), Array<Int32>, String, Unit, Bool)>.None
    } catch (e: Exception) { // block id: 2292
        Option<((Range<Int8>, Unit, Range<UInt8>, Range<Int32>, Int64), Array<Int32>, String, Unit, Bool)>.None
    } finally { // block id: 2294
        var391
    } ?? (match {
        case var504 => 
        ();
        ((Int8(98)&127..=Int8(48)&127:45|1), (), (UInt8(246)&127..=UInt8(189)&127:(-32)|1), (Int32(8)&127..=Int32(93)&127:28|1), 114)
        case var504 => 
        var var2315 : Range<UInt8> = (UInt8(UInt8(192))&127..UInt8(Int8(-75))&127:(Int64(Int32(8))|1));
        if (false) { ((Int8(56)&127..=Int8(30)&127:60|1), var1371, var2315, (Int32(76)&127..Int32(-84)&127:25|1), var871) } else { ((var2145&127..=Int8(-99)&127:(92|1)), var2331, (UInt8(22)&127..=UInt8(170)&127:35|1), (Int32(-110)&127..=Int32(-60)&127:18|1), var871) } 
        case _ => 
        Int8(-91);
        (var2340, var445, (UInt8(70)&127..UInt8(219)&127:26|1), var2026, (-55))
    }, [Int32(49), Int32(-113), Int32(-29), Int32(107), Int32(50), Int32(-108), Int32(37), Int32(75), Int32(-114), Int32(-122)], var2348, while ((var504) && loopTimeVar2356 < 100 ) {
        loopTimeVar2356++;
        Option<Option<Unit>>.None;
        var445
    }, !true))
}


public func func2045(param2046 : Rune) : Bool { // block id: 2047
    let var2113 : ?UInt8 = (Class233() as UInt8);
    let var2133 : Int16 = Int16(-85);
    let var2141 : UInt16 = UInt16(200);
    match (if (true) { (if (var1103) { var2054 } else { var2054 } ) } else { [Option<UInt8>.None, Option<UInt8>.None, var2113, Option<UInt8>.None, var2118, var2113, Option<UInt8>.Some(UInt8(227)), var2118, Option<UInt8>.None, var2118] } ) {
        case caseVar2128 : (Option<(Range<Int16>, Range<Int32>, Int16, Option<Unit>)>, Range<UInt8>, Float64) => 
            (Int16(-79)&127..=var2133&127:(86|1));
            (var2138, var2141, (var2145&127..=var2145&127:((-52)|1)), (var351, [Int32(52), Int32(-47), Int32(42), Int32(-18), Int32(-53), Int32(-87), Int32(-74), Int32(57), Int32(45), Int32(-4)], "7(EL+hYaI#", (), var504), var2160, Int8(-28))
        
        case _ => 
            ();
            if (true) { var1945 } else { var1945 } 
        
        case _ => 
            if (true) { (var2138, var2141, (Int8(49)&127..=Int8(-41)&127:(-44)|1), var2183, var2160, Int8(5)) } else { (var2138, var2141, (Int8(-127)&127..=Int8(30)&127:(var871|1)), (var351, [Int32(-44), Int32(95), Int32(45), Int32(-79), Int32(40), Int32(-47), Int32(-35), Int32(-123), Int32(21), Int32(-30)], "1=qW?\\!rrN", var445, var1103), (UInt64(187), (), param2046), Int8(18)) } 
        
    };
    let var2367 : ?Range<Int32> = (Float32(-107.0) as Range<Int32>);
    (UInt64(250) != var2226, (Int32(-50)|>func2229), (var2367 ?? var2026), try { // block id: 2372
        ();
        var2375;
        UInt8(14)
    } catch (e: Exception) { // block id: 2378
        ();
        var1715 ** (var1715 & 3)
    })[0]
}



public func func2387(param2388 : (Float64) -> Bool) : Rune { // block id: 2391
    let var2396 : Range<UInt64> = (UInt64(137)&127..=UInt64(189)&127:48|1);
    let var2426 : ((Range<Int8>, Unit, Range<UInt8>, Range<Int32>, Int64), Array<Int32>, String, Unit, Bool) = (((Int8(117)&127..Int8(-71)&127:82|1), (), (UInt8(151)&127..UInt8(99)&127:82|1), (Int32(-27)&127..Int32(-47)&127:((-128)|1)), 12), [Int32(-111), Int32(-29), Int32(-41), Int32(-82), Int32(-86), Int32(76), Int32(-109), Int32(-75), Int32(-56), Int32(-88)], "173,#u9T0]", (), true);
    let var2474 : Bool = false;
    var var2516 : ?Rune = Option<Rune>.Some('s');
    if (match (var2396) {
        case caseVar2400 => 
            var2331;
            Int8(2)
        
        case _ => 
            var2145 - var2145
        
    } <= (var2145 << ((var2145) & 7))) { // block id: 2412
        match (var2118) {
            case _ => 
                let var2420 : Range<UInt32> = (UInt32(128)&127..=UInt32(251)&127:(-3)|1);
                if (false) { var2420 } else { (UInt32(215)&127..=UInt32(124)&127:126|1) } ;
                if (var504) { var2426 } else { ((var2444, var1371, (UInt8(219)&127..UInt8(39)&127:87|1), var2026, 76), [Int32(-79), var2458, Int32(69), var2458, var2458, var327, Int32(11), var1426, var327, Int32(115)], var2470, var1371, var2474) } ;
                let var2477 : (Range<Int16>, Range<Int32>, Int16, Option<Unit>) = ((Int16(-8)&127..Int16(-47)&127:(-62)|1), (Int32(31)&127..Int32(-21)&127:(-2)|1), Int16(83), ((((Int8(-106)&127..Int8(102)&127:(21|1)), (), (UInt8(75)&127..=UInt8(33)&127:((-87)|1)), (Int32(-104)&127..Int32(-99)&127:(-13)|1), 74), [Int32(20), Int32(-18), Int32(-64), Int32(-115), Int32(-27), Int32(53), Int32(-109), Int32(-68), Int32(-127), Int32(20)], """
Qg@A:
P?wNy
""", (), ("?g(C]*,lC`" is ((Float64) -> Bool) -> Array<Bool>)) as Unit));
                var2477
            
        };
        var var2502 : Rune = '6';
        var2502
    } else { // block id: 2504
        var2507 <<= ((var2507) & 7);
        (var2516 ?? 'D')
    };
    var loopTimeVar2546 : Range<UInt64> = (UInt64(UInt16(227))&127..=UInt64(UInt8(95))&127:(Int64(Int16(UInt8(68)))|1));
    (((var2528 ?? var74) ?? (var2470 as Unit)) ?? (Option<Unit>.Some(()) ?? for (i in loopTimeVar2546 where true) {
        if (var504) { Option<Unit>.Some(var2331) } else { var2375 } ;
        (Int16(90)&127..=Int16(77)&127:56|1)
    }));
    if (var1103) { match ((var1853 as (Range<Int16>, Range<Int32>, Int16, Option<Unit>))) {
        case _ => 
            var var2564 : Rune = 't';
            var2564
        
        case _ => 
            ();
            'T'
        
    } } else { match (((Int16(47)&127..=Int16(16)&127:(-53)|1), (Int32(-12)&127..=var2458&127:(var871|1)), var2507, Option<Unit>.Some(()))) {
        case _ => 
            if (var504) { '1' } else { 'c' } 
        
    } } 
}

public func func2589(param223 : Float64) : Bool { // block id: 224
    (Option<Unit>.None ?? func83(var244.var247));
    var var263 : Int8 = Int8(61);
    var var268 : Unit = ();
    let var272 : Range<Int32> = (Int32(114)&127..Int32(75)&127:(Int64(UInt16(Int16(43)))|1));
    let var280 : Int64 = Int64(Int64(Int32(46)));
    let var341 : Bool = (###"|>Z.p+D,OV"### is Float32);
    (Option<((Range<Int8>, Unit, Range<UInt8>, Range<Int32>, Int64), Array<Int32>, String, Unit, Bool)>.Some((((var263&127..Int8(-69)&127:(3|1)), var268, (UInt8(215)&127..=UInt8(62)&127:(-60)|1), var272, var280), var285, "JlO=v#LkSb", (), true)) ?? (((var263&127..Int8(18)&127:((-59)|1)), var268, (UInt8(184)&127..UInt8(127)&127:(-42)|1), var272, var280), [Int32(45), Int32(-35), Int32(-70), Int32(-37), var327, Int32(-17), Int32(-21), Int32(34), Int32(-14), Int32(5)], """
b\\Cwn
%zl[v
""", (), var341))[0][1];
    let var407 : UInt64 = UInt64(152);
    try { // block id: 347
        try (resource = Class233()) { // block id: 349
            var351;
            var268
        } finally { // block id: 371
            var263++
        };
        Option<Bool>.Some(var341).getOrThrow()
    } finally { // block id: 381
        var var387 : Bool = false;
        match {
            case false => 
            var387 ||= var387;
            var391;
            !var341
            case _ => 
            var407;
            false
        }
    }
}

func func1927(param1928 : (Interface238) -> Option<Bool>, namedParam1931 ! : ((Float64) -> Bool) -> Array<Bool>, namedParam1934 ! : UInt16, namedParam1935 ! : Range<Int16>) : Option<Option<Bool>> { // block id: 1936
    let var1971 : (Interface237) -> (UInt32, UInt16, Range<Int8>, ((Range<Int8>, Unit, Range<UInt8>, Range<Int32>, Int64), Array<Int32>, String, Unit, Bool), (UInt64, Unit, Rune), Int8) = { lambdaParameter1974 : Interface237 => (UInt32(Int16(Int16(-106))), UInt16(UInt8(10)), (Int8(-46)&127..Int8(-100)&127:(Int64(UInt64(209))|1)), (((Int8(-73)&127..=Int8(-60)&127:((-74)|1)), (), (UInt8(245)&127..UInt8(68)&127:34|1), (Int32(113)&127..Int32(89)&127:(10|1)), (-61)), [Int32(105), Int32(6), Int32(108), Int32(-99), Int32(104), Int32(32), Int32(-6), Int32(40), Int32(-75), Int32(104)], "s'2~,EO7qD", (), false), (UInt64(36), (), 'X'), Int8(UInt8(UInt8(154)))) };
    var var2012 : Interface237 = Class233(namedParam2015 : (UInt64(Int16(32)), (), 'A'), namedParam2016 : (([Option<UInt8>.Some(UInt8(22)), Option<UInt8>.Some(UInt8(232)), Option<UInt8>.Some(UInt8(40)), Option<UInt8>.Some(UInt8(38)), Option<UInt8>.Some(UInt8(6)), Option<UInt8>.None, Option<UInt8>.None, Option<UInt8>.Some(UInt8(207)), Option<UInt8>.Some(UInt8(171)), Option<UInt8>.Some(UInt8(243))] as (Range<Int16>, Range<Int32>, Int16, Option<Unit>)), (UInt8(60)&127..=UInt8(190)&127:67|1), (-84.0)));
    ((var2012|>var1971)[4] as Option<Bool>)
}





public func func1915(param1916 : Range<Int16>) : UInt16 { // block id: 1917
    var var2634 : ((Float64) -> Bool) -> Array<Bool> = func421;
    (if ((() is String)) { func1927(func1497, namedParam1931 : var2634, namedParam1934 : var2637, namedParam1935 : (Int16(119)&127..Int16(35)&127:51|1)) } else { (if (var1103) { var2643 } else { var2643 } ) }  ?? var2655);
    var var2666 : Int16 = Int16(UInt8(UInt8(Int8(-111))));
    Option<Bool>.Some(if (var504) { // block id: 2662
        var2507 **= (var2666 & 3);
        if (false) { [true, true, false, false, true, false, true, true, false, true] } else { var942 } ;
        true
    } else if (true) { // block id: 2677
        var1715 &= UInt8(42);
        let var2682 : Interface237 = Class233('G');
        var2682;
        true
    } else { // block id: 3236
        true
    } || (Option<Bool>.None ?? var1103));
    UInt16(45)
}


public func func1911(param1912 : Interface242) : UInt16 { // block id: 1913
    (Option<Range<Int16>>.Some((Int16(54)&127..Int16(15)&127:(-53)|1)) ?? (var2507&127..=Int16(-23)&127:(54|1)))|>func1915
}


public func func1906(param1907 : Array<Float32>) : Interface238 { // block id: 1908
    let var3259 : (Interface242) -> UInt16 = func1911;
    var var3267 : ?Interface242 = Option<Interface242>.Some(Class233(optionalParam3109 : Int16(UInt16(UInt16(85))), namedParam3111 : ((-84)&127..(-122)&127:(-49)|1), namedParam3112 : ()));
    var var3283 : Interface238 = Class233();
    match (((var3267 ?? Class233(namedParam3111 : var1184, namedParam3112 : ()))|>var3259)) {
        case _ => 
            var871;
            Option<Option<Option<Unit>>>.None;
            var3283
        
    }
}

public func func1769(param1770 : Option<(Array<Unit>, Array<Unit>, Array<Range<UInt16>>, Array<Range<UInt16>>, Unit)>) : Interface238 { // block id: 1771
    var var1775 : Interface238 = Class233();
    let var1823 : UInt32 = UInt32(UInt16(UInt16(229)));
    let var1840 : Range<UInt64> = (UInt64(47)&127..=UInt64(14)&127:(-26)|1);
    match (func1497(var1775)) {
        case _ => 
            var var1781 : Range<UInt64> = (UInt64(Int8(UInt8(89)))&127..=UInt64(232)&127:((-72)|1));
            var1781
        
        case _ => 
            var1793 *= Float32(91.0);
            [false, false, true, false, var504, false, var1103, true, false, var504];
            var var1808 : Range<UInt64> = (UInt64(164)&127..UInt64(82)&127:64|1);
            var1808
        
        case caseVar1812 : Range<Int8> => 
            var var1828 : Int64 = Int64(Int16(UInt8(Int8(79))));
            if (true) { (UInt32(84)&127..=UInt32(45)&127:((-61)|1)) } else { (UInt32(103)&127..var1823&127:(var1828|1)) } ;
            (UInt64(77)&127..UInt64(15)&127:124|1)
        
        case _ => 
            Float32(-34.0) * var1793;
            var1840
        
    };
    Float64(var1793) - (var1853 ?? ((-94.0), (UInt32(98)&127..=var1823&127:(var871|1)), var327, var1867, (UInt8(95), var1257)))[0];
    let var3286 : (Array<Float32>) -> Interface238 = func1906;
    var3289|>var3286
}



func func1747(param1748 : (Array<Unit>, Array<Unit>, Array<Range<UInt16>>, Array<Range<UInt16>>, Unit)) : Int32 { // block id: 1749
    let var3300 : Interface238 = Class233(optionalParam3109 : Int16(119), namedParam3111 : ((-104)&127..=Int64(UInt8(Int8(-39)))&127:(Int64(Int16(Int8(-107)))|1)), namedParam3112 : ());
    try { // block id: 1751
        try (resource = Class233()) { // block id: 1753
            (-69.0);
            if (false) { var244 } else { var244 } ;
            ()
        } catch (_) { // block id: 1760
            var1103 ||= var1103;
            var445
        };
        var437 = var437;
        func1769(Option<(Array<Unit>, Array<Unit>, Array<Range<UInt16>>, Array<Range<UInt16>>, Unit)>.Some(param1748))
    } finally { // block id: 3293
        if (false) { Class233(namedParam2015 : var2160, namedParam2016 : var3131) } else { var3300 } 
    };
    let var3357 : ?UInt8 = Option<UInt8>.Some(UInt8(UInt8(130)));
    match (match ((Option<Range<UInt64>>.None ?? (var437&127..=UInt64(242)&127:(var871|1)))) {
            case _ => 
                Option<Interface242>.Some(Class233())
            
        }) {
        case _ : Interface238 => 
            [Option<UInt8>.None, var2118, var2118, var2118, Option<UInt8>.Some(UInt8(11)), Option<UInt8>.None, var2118, var2118, var2118, var2118]
        
        case caseVar3345 : Range<UInt64> => 
            let var3349 : Bool = ((Class233() as Range<Int32>) is Range<Int16>);
            if (var3349) { var2054 } else { [var2118, var3357, Option<UInt8>.Some(var1715), Option<UInt8>.Some(var1715), Option<UInt8>.Some(UInt8(222)), var3357, Option<UInt8>.None, var3357, Option<UInt8>.Some(UInt8(49)), Option<UInt8>.Some(UInt8(175))] } 
        
        case _ => 
            ();
            var2507 != Int16(-94);
            [Option<UInt8>.None, var2118, Option<UInt8>.Some(UInt8(205)), Option<UInt8>.None, var2118, Option<UInt8>.None, var3357, var3357, var3357, var3357]
        
    };
    if (true) { // block id: 3394
        let var3406 : (UInt8, Range<UInt16>) = (UInt8(10), (UInt16(67)&127..UInt16(206)&127:((-15)|1)));
        var var3419 : Interface240 = Class233('q');
        match (var2507) {
            case 57 | -15 | 16 => 
                var871 /= ((var871) | 1);
                if (var504) { var3406 } else { (UInt8(190), (UInt16(124)&127..=UInt16(232)&127:100|1)) } 
            
            case _ => 
                var3419;
                Option<Bool>.None;
                var3406
            
        };
        var2458
    } else { // block id: 3425
        (var3432 ?? var1426)
    }
}

public func func1743(param1744 : Option<((Range<Int8>, Unit, Range<UInt8>, Range<Int32>, Int64), Array<Int32>, String, Unit, Bool)>) : Int32 { // block id: 1745
    let var3436 : ((Array<Unit>, Array<Unit>, Array<Range<UInt16>>, Array<Range<UInt16>>, Unit)) -> Int32 = func1747;
    let var3451 : (Array<Unit>, Array<Unit>, Array<Range<UInt16>>, Array<Range<UInt16>>, Unit) = ([(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(UInt16(125)&127..UInt16(136)&127:0|1), (UInt16(26)&127..UInt16(211)&127:(-8)|1), (UInt16(136)&127..UInt16(155)&127:112|1), (UInt16(167)&127..UInt16(22)&127:(-73)|1), (UInt16(68)&127..=UInt16(115)&127:(-37)|1), (UInt16(141)&127..=UInt16(237)&127:(-47)|1), (UInt16(185)&127..UInt16(191)&127:21|1), (UInt16(133)&127..=UInt16(27)&127:(-23)|1), (UInt16(180)&127..=UInt16(91)&127:24|1), (UInt16(49)&127..UInt16(203)&127:(-40)|1)], [(UInt16(121)&127..=UInt16(127)&127:123|1), (UInt16(164)&127..=UInt16(23)&127:(-99)|1), (UInt16(242)&127..=UInt16(217)&127:(-31)|1), (UInt16(13)&127..=UInt16(176)&127:53|1), (UInt16(144)&127..UInt16(118)&127:(-13)|1), (UInt16(225)&127..=UInt16(69)&127:(-38)|1), (UInt16(106)&127..=UInt16(9)&127:(-35)|1), (UInt16(33)&127..UInt16(134)&127:7|1), (UInt16(254)&127..UInt16(247)&127:(-76)|1), (UInt16(122)&127..UInt16(35)&127:35|1)], ());
    var var3501 : Range<UInt16> = (UInt16(247)&127..=UInt16(112)&127:(66|1));
    match (if (true) { Option<Range<Int32>>.Some((var1426&127..=var1426&127:((-105)|1))) } else { Option<Range<Int32>>.None } ) {
        case _ : Array<Float32> => 
            var3451
        
        case caseVar3470 : Array<Float32> => 
            (var3474, [var445, (), var3180, var2331, var1371, (), var1371, var1371, var3180, ()], [(var2637&127..=UInt16(118)&127:((-8)|1)), (UInt16(152)&127..UInt16(105)&127:(-84)|1), (UInt16(128)&127..UInt16(33)&127:(-105)|1), var1257, (UInt16(128)&127..UInt16(185)&127:(-63)|1), (var2637&127..var2637&127:(var871|1)), var3501, var1257, (UInt16(171)&127..UInt16(229)&127:(-123)|1), (UInt16(26)&127..=UInt16(199)&127:(-22)|1)], var1867, var2331)
        
        case _ => 
            var2458;
            var3516 -= var3516;
            ([(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(UInt16(87)&127..=UInt16(62)&127:40|1), (UInt16(94)&127..=UInt16(161)&127:(-24)|1), (UInt16(230)&127..UInt16(231)&127:(-32)|1), (UInt16(8)&127..UInt16(243)&127:4|1), (UInt16(177)&127..UInt16(17)&127:(-89)|1), (UInt16(36)&127..var2637&127:((-94)|1)), var1257, var3501, (var2637&127..UInt16(15)&127:(20|1)), (var2637&127..var2637&127:(var871|1))], [(UInt16(47)&127..UInt16(33)&127:122|1), (UInt16(140)&127..=UInt16(131)&127:81|1), (UInt16(153)&127..UInt16(20)&127:2|1), (UInt16(196)&127..UInt16(58)&127:(-27)|1), (UInt16(142)&127..UInt16(208)&127:108|1), (UInt16(84)&127..=UInt16(153)&127:(-108)|1), (UInt16(205)&127..=UInt16(173)&127:44|1), (UInt16(136)&127..=UInt16(210)&127:(-120)|1), (UInt16(67)&127..UInt16(42)&127:(-73)|1), (UInt16(211)&127..=UInt16(129)&127:(-124)|1)], ())
        
    }|>var3436
}

public func func1349(param1350 : String) : Int32 { // block id: 1351
    func func1355() : UInt64 { // block id: 1356
        Option<Array<Unit>>.Some(match ((Int32(82)&127..=Int32(-91)&127:115|1)) {
            case _ => 
                ();
                var445;
                [(), var445, var445, var445, var1371, (), (), (), var1371, ()]
            
            case _ => 
                [var1371, (), var445, (), (), (), var445, (), var1371, ()]
            
        });
        var var1732 : Int16 = Int16(UInt8(196));
        try { // block id: 1392
            ();
            var351[1];
            Option<UInt8>.Some(var1715)|>func1398
        } catch (e: Exception) { // block id: 1717
            try { // block id: 1719
                Class233()
            } catch (e: Exception) { // block id: 1722
                var1299
            };
            var loopTimeVar1729 : Int64 = 0;
            while ((var504) && loopTimeVar1729 < 100 ) {
                loopTimeVar1729++;
                var1371
            };
            UInt64(var1732)
        }
    }
;
    var loopTimeVar1741 : Int64 = 0;
    do {
        loopTimeVar1741++;

    } while ((func1355() < (Option<UInt8>.Some(var1715)|>func1398)) && loopTimeVar1741 < 100 ) ;
    var loopTimeVar3552 : Range<UInt64> = (UInt64(36)&127..=UInt64(102)&127:(56|1));
    match (for (i in loopTimeVar3552 where true) {
            var2458 **= (var1426 & 3)
        }) {
        case () | () | () | () => 
            var2458 /= ((var1426) | 1);
            ();
            Option<((Range<Int8>, Unit, Range<UInt8>, Range<Int32>, Int64), Array<Int32>, String, Unit, Bool)>.Some(((var2444, var445, (var1715&127..var1715&127:(98|1)), (var1426&127..=var2458&127:((-37)|1)), var871), [Int32(118), Int32(-93), Int32(52), Int32(-98), Int32(25), Int32(118), Int32(-6), Int32(110), Int32(64), Int32(104)], """
Mc)Fi
;iVPd
""", var3180, var504))
        
        case _ => 
            ();
            var var3605 : Int32 = Int32(Int16(39));
            var var3610 : Int32 = Int32(Int32(UInt8(UInt8(189))));
            let var3618 : Bool = false;
            Option<((Range<Int8>, Unit, Range<UInt8>, Range<Int32>, Int64), Array<Int32>, String, Unit, Bool)>.Some((((Int8(-77)&127..Int8(20)&127:(-48)|1), var2331, (var1715&127..=var1715&127:(var871|1)), (Int32(116)&127..Int32(77)&127:19|1), 69), [Int32(32), Int32(77), var2458, Int32(-112), Int32(-12), var327, Int32(-31), var3605, var2458, var3610], "4?Khl.L1q!", (), var3618))
        
    }|>func1743
}

public func func1149(param1150 : Float64) : (Float64) -> Bool { // block id: 1151
    let var1172 : UInt16 = UInt16(92);
    let var1180 : ?(Array<Unit>, Array<Unit>, Array<Range<UInt16>>, Array<Range<UInt16>>, Unit) = Option<(Array<Unit>, Array<Unit>, Array<Range<UInt16>>, Array<Range<UInt16>>, Unit)>.None;
    let var1196 : (Array<Unit>, Array<Unit>, Array<Range<UInt16>>, Array<Range<UInt16>>, Unit) = ([(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(UInt16(235)&127..UInt16(239)&127:45|1), (UInt16(245)&127..=UInt16(213)&127:82|1), (UInt16(122)&127..UInt16(2)&127:105|1), (UInt16(127)&127..UInt16(240)&127:(-103)|1), (UInt16(110)&127..UInt16(198)&127:(-115)|1), (UInt16(194)&127..UInt16(53)&127:34|1), (UInt16(204)&127..=UInt16(205)&127:121|1), (UInt16(184)&127..=UInt16(178)&127:(-62)|1), (UInt16(94)&127..=UInt16(99)&127:28|1), (UInt16(59)&127..UInt16(171)&127:37|1)], [(UInt16(56)&127..UInt16(186)&127:7|1), (UInt16(184)&127..=UInt16(172)&127:110|1), (UInt16(203)&127..UInt16(83)&127:118|1), (UInt16(9)&127..UInt16(77)&127:76|1), (UInt16(203)&127..=UInt16(155)&127:93|1), (UInt16(88)&127..=UInt16(208)&127:(-25)|1), (UInt16(23)&127..=UInt16(107)&127:(-50)|1), (UInt16(74)&127..UInt16(43)&127:(-25)|1), (UInt16(128)&127..UInt16(51)&127:4|1), (UInt16(138)&127..UInt16(111)&127:(-30)|1)], ());
    let var1221 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    let var1250 : Unit = ();
    let var1263 : Range<UInt16> = (UInt16(UInt16(UInt8(Int8(-52))))&127..=UInt16(21)&127:((-71)|1));
    let var3628 : Int32 = Int32(Int8(52));
    func func1155(namedParam1156 ! : Interface236, namedParam1157 ! : Float32, namedParam1158 ! : Option<Unit>, optionalParam1159 ! : Range<Int32> = (Int32(70)&127..Int32(41)&127:46|1)) : Bool { // block id: 1161
        let var1281 : Range<UInt16> = (UInt16(209)&127..=UInt16(154)&127:(Int64(Int16(UInt8(UInt8(128))))|1));
        (match ((var1172&127..UInt16(229)&127:(36|1))) {
            case _ => 
                namedParam1158;
                var1180
            
        } ?? match (var1184) {
            case _ : Float32 => 
                var1196
            
            case caseVar1215 => 
                var var1235 : Array<Range<UInt16>> = [(UInt16(8)&127..=UInt16(144)&127:(-46)|1), (UInt16(150)&127..=UInt16(27)&127:(-81)|1), (UInt16(249)&127..UInt16(245)&127:21|1), (UInt16(218)&127..UInt16(168)&127:13|1), (UInt16(253)&127..UInt16(57)&127:96|1), (UInt16(10)&127..=UInt16(62)&127:39|1), (UInt16(116)&127..=UInt16(172)&127:(-123)|1), (UInt16(102)&127..=UInt16(165)&127:(-64)|1), (UInt16(107)&127..UInt16(189)&127:84|1), (UInt16(183)&127..=UInt16(114)&127:(-53)|1)];
                if (true) { (var1221, var1221, var1235, var1235, var445) } else { ([(), (), (), (), (), (), (), (), (), ()], [(), var445, (), var445, var445, var445, (), var1250, (), var1250], [(UInt16(58)&127..=UInt16(82)&127:(-70)|1), (UInt16(18)&127..UInt16(237)&127:(-5)|1), (UInt16(196)&127..UInt16(249)&127:(-86)|1), (UInt16(184)&127..UInt16(150)&127:(-65)|1), (UInt16(78)&127..UInt16(252)&127:(-14)|1), (UInt16(244)&127..=UInt16(253)&127:0|1), (UInt16(216)&127..=UInt16(76)&127:(-78)|1), (UInt16(169)&127..UInt16(225)&127:(-57)|1), (UInt16(116)&127..=UInt16(72)&127:122|1), (UInt16(7)&127..UInt16(61)&127:49|1)], [var1257, var1257, var1257, (UInt16(54)&127..UInt16(79)&127:(-62)|1), var1263, (UInt16(111)&127..=var1172&127:(var871|1)), (UInt16(81)&127..UInt16(254)&127:27|1), (var1172&127..=UInt16(85)&127:((-94)|1)), var1281, (UInt16(164)&127..UInt16(152)&127:(var871|1))], var445) } 
            
            case _ => 
                if (false) { var1299 } else { Class233() } ;
                if (var1103) { var1196 } else { ([(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(UInt16(143)&127..=UInt16(57)&127:29|1), (UInt16(142)&127..=UInt16(45)&127:25|1), (UInt16(29)&127..UInt16(111)&127:48|1), (UInt16(21)&127..=UInt16(203)&127:(-105)|1), (UInt16(206)&127..=UInt16(131)&127:4|1), (UInt16(238)&127..=UInt16(22)&127:(-23)|1), (UInt16(134)&127..=UInt16(15)&127:(-86)|1), (UInt16(12)&127..UInt16(49)&127:46|1), (UInt16(41)&127..=UInt16(94)&127:48|1), (UInt16(217)&127..UInt16(230)&127:(-69)|1)], [(UInt16(160)&127..=UInt16(150)&127:(-118)|1), (UInt16(125)&127..=UInt16(184)&127:(-36)|1), (UInt16(191)&127..UInt16(0)&127:20|1), var1281, (UInt16(30)&127..=var1172&127:(64|1)), (UInt16(122)&127..=UInt16(124)&127:((-41)|1)), (UInt16(89)&127..=UInt16(5)&127:68|1), (UInt16(161)&127..UInt16(120)&127:11|1), (UInt16(190)&127..=UInt16(202)&127:((-12)|1)), var1257], var1250) } 
            
        })[4];
        var loopTimeVar1337 : Range<UInt64> = (UInt64(UInt32(UInt32(94)))&127..=UInt64(187)&127:(Int64(UInt8(Int8(-23)))|1));
        for (i in loopTimeVar1337 where func411<Interface242, Int8>(func222)) {
            ('B' is Option<Unit>)
        };
        let var3621 : (String) -> Int32 = func1349;
        var var3637 : ?Bool = Option<Bool>.None;
        let var3664 : UInt16 = UInt16(Int16(-92));
        match ([("<1~0L>U$4I"|>var3621), try { // block id: 3625
                ();
                var3628
            } finally { // block id: 3631
                var2470;
                if (var504) { Option<Bool>.None } else { var3637 } ;
                var3640
            }, var327 - var1426, Int32(Int8(-67)), try { // block id: 3648
                if (var1103) { [(UInt16(201)&127..UInt16(224)&127:25|1), (UInt16(7)&127..=UInt16(246)&127:30|1), (UInt16(138)&127..UInt16(139)&127:(-31)|1), (UInt16(187)&127..UInt16(44)&127:25|1), (UInt16(211)&127..UInt16(117)&127:41|1), (UInt16(239)&127..=UInt16(0)&127:(-30)|1), (UInt16(77)&127..UInt16(250)&127:5|1), (UInt16(181)&127..=UInt16(142)&127:59|1), (UInt16(22)&127..=UInt16(137)&127:(-48)|1), (UInt16(155)&127..=UInt16(139)&127:(-39)|1)] } else { [(UInt16(119)&127..UInt16(28)&127:(var871|1)), (UInt16(41)&127..UInt16(18)&127:(var871|1)), (var1172&127..=var3664&127:((-99)|1)), (UInt16(79)&127..UInt16(56)&127:(-72)|1), var1281, (UInt16(96)&127..UInt16(70)&127:(var871|1)), (UInt16(36)&127..=UInt16(252)&127:95|1), var1257, (var3664&127..var2637&127:((-56)|1)), var1263] } ;
                Int32(-50) | var2458
            } finally { // block id: 3684
                var1371;
                Int32(30)
            }, Int32(-67), try { // block id: 3689
                var1867;
                var2458 %= ((Int32(50)) | 1);
                Int32(-106)
            } finally { // block id: 3695
                Int32(-106) + Int32(82)
            }, match (var1299) {
                case caseVar3703 => 
                    105.0;
                    var327
                
                case _ => 
                    var504;
                    Int32(67)
                
            }, var3640, var1426 - var2458]) {
            case caseVar3717 : Option<Array<Unit>> => 
                let var3720 : ?Range<Int16> = (Option<Array<Unit>>.Some([(), (), (), (), (), (), (), (), (), ()]) as Range<Int16>);
                var3720;
                var504
            
            case caseVar3737 : Array<Range<UInt16>> => 
                true
            
            case caseVar3742 => 
                var1103
            
            case caseVar3747 => 
                var2331;
                var504
            
            case _ => 
                var445;
                var2331;
                var1426 != var1426
            
        }
    }
;
    var loopTimeVar3793 : Range<UInt64> = (UInt64(219)&127..=UInt64(Int8(UInt8(Int8(41))))&127:(Int64(UInt16(97))|1));
    for (i in loopTimeVar3793 where if (func1155(namedParam1156 : Class233(), namedParam1157 : var1793, namedParam1158 : Option<Unit>.Some(()))) { // block id: 3762
        [false, false, true, false, true, false, false, false, true, true];
        var504
    } else { // block id: 3765
        let var3767 : Bool = ((Option<Range<UInt64>>.None as Unit) is (Int32) -> ((Range<Int8>, Unit, Range<UInt8>, Range<Int32>, Int64), Array<Int32>, String, Unit, Bool));
        var3767
    }) {
        try (resource = Class233()) { // block id: 3773
            let var3775 : Rune = 'X';
            var3775;
            var3779 &= Int8(-83);
            ()
        } catch (e: Exception) { // block id: 3783
            var3786 += var437;
            var3779 |= var2145
        }
    };
    Int32(UInt8(38));
    func1906
}



func func111(param112 : Range<Int64>) : Int16 { // block id: 113
    let var3842 : Float64 = (-20.0);
    let var3969 : ?Range<UInt32> = Option<Range<UInt32>>.Some((UInt32(UInt16(78))&127..UInt32(145)&127:(Int64(Int8(13))|1)));
    let var4014 : Int64 = Int64(Int64(Int8(UInt8(Int8(104)))));
    let var4067 : ?Unit = Option<Unit>.None;
    func func216(namedParam217 ! : Option<Option<Unit>>, namedParam218 ! : Range<Int32>) : Range<UInt32> { // block id: 219
        let var1145 : ((Float64) -> Bool) -> Bool = func411<Interface242, Int8>;
        let var3806 : (Float64) -> (Float64) -> Bool = func1149;
        var var3870 : Bool = (Class233() is Interface236);
        var loopTimeVar3888 : Range<UInt64> = (UInt64(Int32(-47))&127..UInt64(Int32(UInt16(UInt8(171))))&127:(Int64(Int8(UInt8(UInt8(62))))|1));
        for (i in loopTimeVar3888 where (match (var327) {
            case caseVar3812 => 
                if (var504) { (var3516, UInt16(231), var2444, var2183, var2160, Int8(80)) } else { (UInt32(16), UInt16(205), (Int8(6)&127..=var3779&127:(var871|1)), var2183, var2160, Int8(71)) } ;
                let var3836 : Rune = 'n';
                if (var504) { var3836 } else { 'I' } ;
                (-71.0) / Float64((Int32(var3842)) | 1)
            
            case 52 => 
                let var3848 : Unit = ();
                var3848;
                var2331;
                (-111.0)
            
            case _ : Array<Float32> => 
                ();
                ();
                (-75.0)
            
            case 37 | 92 | 63 | 23 => 
                (-63.0)
            
            case _ => 
                var3842
            
        }|>(var3806~>var1145))) {
            if (true) { // block id: 3868

            } else if (var3870) { // block id: 3873
                if (var1103) { var3877 } else { var3877 } ;
                ()
            }
        };
        let var3904 : (Float64, Range<UInt32>, Int32, Array<Range<UInt16>>, (UInt8, Range<UInt16>)) = (38.0, (UInt32(176)&127..UInt32(98)&127:(-46)|1), Int32(51), [(UInt16(173)&127..UInt16(115)&127:(-29)|1), (UInt16(142)&127..=UInt16(33)&127:(-81)|1), (UInt16(Int16(60))&127..=UInt16(Int16(-60))&127:(Int64(UInt16(77))|1)), (UInt16(54)&127..=UInt16(192)&127:(-31)|1), (UInt16(213)&127..=UInt16(129)&127:(-2)|1), (UInt16(145)&127..=UInt16(221)&127:102|1), (UInt16(UInt8(63))&127..=UInt16(UInt8(200))&127:((-26)|1)), (UInt16(UInt16(133))&127..=UInt16(204)&127:((-9)|1)), (UInt16(198)&127..UInt16(26)&127:77|1), (UInt16(UInt8(148))&127..UInt16(Int16(63))&127:(Int64(UInt8(66))|1))], (UInt8(Int8(Int8(46))), (UInt16(UInt8(155))&127..=UInt16(UInt8(100))&127:(Int64(Int32(33))|1))));
        var loopTimeVar3955 : Range<UInt64> = (UInt64(120)&127..UInt64(246)&127:(Int64(UInt8(245))|1));
        for (i in loopTimeVar3955 where false) {
            var3904;
            (var2375 ?? ())
        };
        let var4005 : UInt16 = UInt16(2);
        var var4049 : Range<UInt32> = (UInt32(225)&127..=UInt32(232)&127:(-13)|1);
        match (match ((var3969 ?? (UInt32(33)&127..UInt32(116)&127:((-77)|1)))) {
                case caseVar3983 : (Array<Unit>, Array<Unit>, Array<Range<UInt16>>, Array<Range<UInt16>>, Unit) => 
                    [(UInt16(80)&127..=UInt16(31)&127:11|1), (UInt16(52)&127..UInt16(206)&127:109|1), (UInt16(10)&127..=UInt16(96)&127:(-66)|1), (UInt16(120)&127..UInt16(25)&127:73|1), (UInt16(208)&127..UInt16(34)&127:109|1), (UInt16(50)&127..=UInt16(0)&127:29|1), (UInt16(223)&127..UInt16(191)&127:(-93)|1), (UInt16(245)&127..UInt16(199)&127:125|1), (UInt16(181)&127..=UInt16(57)&127:(-30)|1), (UInt16(92)&127..=UInt16(217)&127:(-8)|1)]
                
                case caseVar3988 : Option<Range<Int16>> => 
                    if (false) { [(UInt16(140)&127..UInt16(132)&127:109|1), (UInt16(218)&127..UInt16(18)&127:2|1), (UInt16(43)&127..UInt16(34)&127:(-118)|1), (UInt16(151)&127..=var2637&127:(var871|1)), var1257, var1257, (var2637&127..var4005&127:(var871|1)), var1257, (UInt16(142)&127..=UInt16(103)&127:(-72)|1), (var4005&127..var4005&127:(var4014|1))] } else { var1867 } 
                
                case caseVar4023 : UInt8 => 
                    var3516 %= ((UInt32(166)) | 1);
                    [(UInt16(59)&127..UInt16(93)&127:(-32)|1), (UInt16(212)&127..UInt16(101)&127:(-101)|1), (UInt16(64)&127..UInt16(157)&127:91|1), (UInt16(193)&127..=UInt16(91)&127:(-48)|1), (UInt16(145)&127..UInt16(155)&127:117|1), (UInt16(227)&127..=UInt16(96)&127:49|1), (UInt16(152)&127..=UInt16(49)&127:(-125)|1), (UInt16(72)&127..=UInt16(212)&127:1|1), (UInt16(58)&127..=UInt16(237)&127:(-3)|1), (UInt16(86)&127..=UInt16(96)&127:80|1)]
                
                case caseVar4031 => 
                    if (var3870) { var1867 } else { [(UInt16(11)&127..UInt16(136)&127:(-38)|1), (UInt16(106)&127..UInt16(31)&127:(-64)|1), (UInt16(97)&127..=UInt16(162)&127:109|1), (UInt16(240)&127..UInt16(188)&127:(-37)|1), (UInt16(245)&127..=UInt16(32)&127:99|1), (UInt16(234)&127..=UInt16(47)&127:(-19)|1), (UInt16(158)&127..=UInt16(92)&127:(-79)|1), (UInt16(46)&127..UInt16(180)&127:(-69)|1), (UInt16(96)&127..=UInt16(201)&127:112|1), (UInt16(216)&127..UInt16(141)&127:(-80)|1)] } 
                
                case _ => 
                    var2331;
                    var3180;
                    if (var3870) { var1867 } else { var1867 } 
                
            }) {
            case _ => 
                var4049
            
            case caseVar4053 : Int16 => 
                ();
                if (true) { Option<Array<Unit>>.None } else { Option<Array<Unit>>.None } ;
                (UInt32(228)&127..=UInt32(29)&127:(-88)|1)
            
            case caseVar4063 : Range<UInt8> => 
                var3180;
                var4067;
                if (var3870) { var4049 } else { var4049 } 
            
            case caseVar4075 : Interface240 => 
                var4049
            
            case _ => 
                ();
                false;
                (var3516&127..=UInt32(140)&127:((-84)|1))
            
        }
    }
;
    var var4169 : UInt8 = UInt8(Int8(-78));
    var loopTimeVar4185 : Int64 = 0;
    do {
        loopTimeVar4185++;
        let var4111 : Float32 = Float32(-21.0);
        func func118(optionalParam119 ! : Array<Option<UInt8>> = Array<Option<UInt8>>(10){ i => (([Option<UInt8>.Some(UInt8(18)), Option<UInt8>.Some(UInt8(191)), Option<UInt8>.None, Option<UInt8>.None, Option<UInt8>.Some(UInt8(46)), Option<UInt8>.Some(UInt8(177)), Option<UInt8>.Some(UInt8(189)), Option<UInt8>.Some(UInt8(194)), Option<UInt8>.Some(UInt8(50)), Option<UInt8>.Some(UInt8(31))] as Option<Unit>) as UInt8) }, namedParam196 ! : Option<UInt8>, namedParam197 ! : UInt8, optionalParam198 ! : UInt16 = UInt16(UInt8(UInt8(UInt8(UInt8(139)))))) : Float32 { // block id: 204
            func206(namedParam209 : (UInt32(180)&127..=UInt32(127)&127:(-105)|1));
            var var4099 : Int32 = Int32(Int8(-66));
            var var4129 : Range<Int32> = (Int32(-107)&127..Int32(62)&127:(-29)|1);
            func216(namedParam217 : (var2444 as Option<Unit>), namedParam218 : match (Option<(Range<Int16>, Range<Int32>, Int16, Option<Unit>)>.None) {
                case caseVar4092 => 
                    var1103 ||= var504;
                    var4099++;
                    (Int32(-66)&127..=Int32(-73)&127:114|1)
                
                case caseVar4105 => 
                    ();
                    var1793 **= Float32(Int32(var4111) & 3);
                    (Int32(43)&127..var1426&127:(87|1))
                
                case _ => 
                    (Int32(-64)&127..Int32(-81)&127:(-70)|1)
                
                case caseVar4123 => 
                    var4099;
                    if (true) { var4129 } else { (Int32(-116)&127..var327&127:((-38)|1)) } 
                
                case _ => 
                    ();
                    var2026
                
            });
            let var4149 : Float32 = Float32(-68.0);
            var4111 % Float32((Int32(Float32(match (var4144) {
                case _ => 
                    var4149
                
            }))) | 1)
        }
;
        func118(optionalParam119 : [var2118, Option<UInt8>.Some(var1715), Option<UInt8>.Some(var4157), var2118, Option<UInt8>.None, Option<UInt8>.Some(UInt8(212)), Option<UInt8>.None, var2118, Option<UInt8>.None, var2118], namedParam196 : var2118, namedParam197 : var4169);
        var var4179 : UInt32 = UInt32(UInt8(UInt8(163)));
        (Option<UInt32>.Some(var4179) ?? var3516)
    } while ((false) && loopTimeVar4185 < 100 ) ;
    var var4207 : Interface238 = Class233(namedParam2015 : (UInt64(Int16(Int8(-70))), (), 'e'), namedParam2016 : (((Int32(-87)&127..Int32(-99)&127:(-55)|1) as (Range<Int16>, Range<Int32>, Int16, Option<Unit>)), (UInt8(UInt8(62))&127..=UInt8(250)&127:(Int64(Int16(44))|1)), Float64(Float64(Float32(91.0)))));
    if (true) { // block id: 4188
        match (Option<Range<UInt32>>.None) {
            case caseVar4193 => 
                if (false) { [[false, true, false, false, false, true, true, true, false, false], [true, false, false, true, true, true, true, true, false, false], [true, true, false, false, true, true, false, false, false, false], [false, false, true, false, false, false, false, false, true, true], [true, true, false, true, true, false, true, true, false, false], [true, true, false, true, true, false, false, false, true, false], [true, false, false, false, true, false, false, false, false, false], [true, true, true, false, true, true, true, false, true, false], [true, false, false, true, true, false, true, true, false, true], [true, true, false, true, false, false, false, true, true, true]] } else { [[false, false, true, false, false, false, false, false, false, false], [false, true, false, true, true, false, false, true, false, false], [true, false, true, true, true, true, false, true, true, true], [false, false, false, false, true, true, true, true, true, false], [false, false, true, false, true, false, false, true, true, false], [false, false, true, false, true, false, true, false, false, true], [false, false, false, false, false, true, true, false, false, true], [true, true, false, false, false, false, true, false, true, false], [false, true, true, false, false, false, false, false, false, false], [false, true, true, false, false, false, true, false, false, true]] } ;
                var445
            
            case _ => 
                if (true) { var3432 } else { var3432 } ;
                var4207;
                ()
            
        }
    };
    var2507
}





func func106(param107 : Array<Array<Int32>>) : Array<Array<Int32>> { // block id: 108
    let var4230 : (Range<Int64>) -> Int16 = func111;
    (((Option<Range<Int64>>.None ?? var1184)|>var4230)&127..=(try { // block id: 4245
        if (var504) { Option<Int16>.Some(Int16(-35)) } else { Option<Int16>.None } 
    } finally { // block id: 4251
        var4253
    } ?? (var4253 ?? Int16(-8)))&127:(match (try { // block id: 4260
            var3180;
            ();
            ((-115)&127..=(-45)&127:((-110)|1))
        } catch (_) { // block id: 4267
            if (false) { ((-15)&127..=49&127:0|1) } else { (65&127..=70&127:20|1) } 
        } finally { // block id: 4272
            ((-103)&127..=91&127:2|1)
        }) {
        case _ => 
            var1371;
            (-109)
        
    }|1));
    var var4327 : Unit = ();
    var var4356 : Int32 = Int32(Int8(-128));
    var var4360 : Int32 = Int32(1);
    let var4382 : Int32 = Int32(59);
    let var4400 : ?Range<UInt32> = Option<Range<UInt32>>.Some((UInt32(32)&127..=UInt32(52)&127:(10|1)));
    let var4532 : (UInt8, Range<UInt16>) = (UInt8(UInt8(Int8(77))), (UInt16(Int16(16))&127..=UInt16(UInt8(UInt8(74)))&127:((-124)|1)));
    var var4594 : Int32 = Int32(UInt8(UInt8(122)));
    let var4631 : Int32 = Int32(-93);
    var var4659 : Interface239 = Class233(namedParam3111 : (Int64(UInt32(52))&127..(-90)&127:(Int64(Int16(-79))|1)), namedParam3112 : ());
    var var4726 : Option<Int32> = (Option<Range<UInt32>>.None as Int32);
    [if ((var4282 ?? false)) { (if (var504) { [Int32(72), Int32(-22), Int32(4), Int32(-46), Int32(-84), Int32(-97), Int32(-90), Int32(45), Int32(-36), Int32(-27)] } else { var285 } ) } else { (Option<Array<Int32>>.Some([Int32(-97), Int32(-95), Int32(-102), Int32(2), Int32(-15), Int32(17), Int32(-15), Int32(71), Int32(55), Int32(7)]) ?? [Int32(-69), Int32(-33), Int32(42), Int32(-83), Int32(22), Int32(105), Int32(24), Int32(46), Int32(-72), Int32(22)]) } , try { // block id: 4298
        if (true) { var285 } else { [Int32(-98), var327, Int32(43), Int32(-121), var1426, Int32(-96), Int32(114), var1426, var2458, Int32(-106)] } 
    } finally { // block id: 4313
        var285
    }, if (match (Class233()) {
        case caseVar4320 => 
            var1103;
            true
        
        case _ => 
            var4327;
            var4330
        
    }) { (if (false) { [Int32(-100), var1426, Int32(18), Int32(-100), var4340, Int32(94), Int32(-116), Int32(99), var1426, var2458] } else { [Int32(-98), var1426, Int32(98), var327, var327, var4356, var4360, var4363, var4356, Int32(105)] } ) } else { (Option<Array<Int32>>.None ?? var285) } , [var4360 % ((Int32(-29)) | 1), (var3432 ?? Int32(61)), var2458, var4340, (Option<Int32>.None ?? var4382), (var3432 ?? Int32(-64)), try { // block id: 4388
        var871 %= ((59) | 1);
        if (true) { Option<Range<UInt32>>.Some((var3516&127..var2138&127:(var871|1))) } else { var4400 } ;
        Int32(122)
    } finally { // block id: 4407
        ();
        var4356
    }, var1426 / ((Int32(124)) | 1), Int32(-18), Int32(-87)], ((Class233('M', optionalParam2686 : var2118) as Array<Int32>) ?? if (var4330) { [Int32(-56), Int32(-2), Int32(77), Int32(27), Int32(-2), Int32(-63), Int32(-92), Int32(22), Int32(111), Int32(80)] } else { [Int32(-90), Int32(20), Int32(-86), var4382, Int32(75), Int32(-30), var3640, Int32(50), var2458, var4360] } ), if (match (var351) {
        case _ => 
            var4327;
            var1103
        
        case _ => 
            false
        
    }) { [Int32(52), Int32(-58), Int32(118), Int32(57), Int32(-1), Int32(-104), Int32(-10), Int32(89), Int32(-78), Int32(-76)] } else { try { // block id: 4447
        if (false) { var2470 } else { ###"!('o\\6oJ\\R"### } ;
        ();
        var285
    } finally { // block id: 4454
        [Int32(0), var4363, var4360, var2458, Int32(36), Int32(107), var1426, Int32(70), Int32(10), Int32(-69)]
    } } , try { // block id: 4467
        [Int32(54), var327, Int32(-72), Int32(87), var4356, Int32(59), var327, Int32(64), Int32(93), var4340]
    } finally { // block id: 4479
        [(), (), var1371, (), var3180, (), (), var4327, (), ()];
        if (var4330) { [Int32(-52), Int32(-100), Int32(-116), var4360, Int32(15), Int32(117), Int32(-39), var1426, Int32(-92), var1426] } else { [Int32(64), Int32(-57), Int32(-8), Int32(-63), Int32(57), Int32(21), Int32(-124), Int32(-15), Int32(-33), Int32(50)] } 
    }, [if (true) { // block id: 4508
        var1426 - Int32(-103)
    } else if (var1103) { // block id: 4513
        ();
        if (var504) { Option<Interface242>.None } else { Option<Interface242>.None } ;
        var4360
    } else { // block id: 4520
        var4523 -= UInt8(244);
        Int32(-3) ^ var327
    }, match (var4532) {
        case caseVar4546 => 
            var871 **= (44 & 3);
            ();
            var2458
        
        case _ => 
            Int32(-38)
        
    }, try { // block id: 4557
        var var4559 : ?Unit = Option<Unit>.None;
        var4559;
        Class233();
        Int32(119) * Int32(5)
    } finally { // block id: 4565
        var1103 ||= false;
        var4356 | Int32(120)
    }, var4360, Int32(48), try { // block id: 4575
        UInt8(112);
        ();
        Int32(-6) >> ((Int32(-42)) & 7)
    } catch (_) { // block id: 4581
        Option<((Range<Int8>, Unit, Range<UInt8>, Range<Int32>, Int64), Array<Int32>, String, Unit, Bool)>.Some((var351, [var4382, Int32(72), var3640, var1426, var327, Int32(23), var4340, var4594, Int32(-74), Int32(-79)], "eiDL8<?3kR", (), var1103));
        Int32(92)
    } finally { // block id: 4604
        ();
        var871++;
        Int32(21)
    }, var4360, if (var504) { // block id: 4612
        var3779 %= ((Int8(84)) | 1);
        Int32(107)
    } else { // block id: 4617
        var4340
    }, Int32(var1715), Int32(-109)], [var4356 / ((Int32(-30)) | 1), Int32(-10), var1426, (Option<Int32>.Some(var4631) ?? Int32(-93)), Int32(125), match (var4637) {
        case caseVar4641 : (Float64, Range<UInt32>, Int32, Array<Range<UInt16>>, (UInt8, Range<UInt16>)) => 
            var4340
        
        case _ : UInt8 => 
            Int32(-78) * var4594
        
        case _ => 
            var4594
        
        case caseVar4656 => 
            var4659;
            var var4671 : Interface236 = Class233();
            if (true) { var4671 } else { Class233() } ;
            Int32(-15)
        
        case _ => 
            var4678;
            var4363 ^ var2458
        
    }, match (Option<Range<Int16>>.Some((var2507&127..=Int16(26)&127:(21|1)))) {
        case caseVar4694 => 
            var4340
        
        case caseVar4699 : Int64 => 
            var1426
        
        case _ : (Range<Int8>, Unit, Range<UInt8>, Range<Int32>, Int64) => 
            var2331;
            var4523 ^= var4157;
            var4382
        
        case _ => 
            var1426 & Int32(-38)
        
    }, Int32(-14) % ((Int32(3)) | 1), Int32(UInt8(146)), (var4726 ?? Int32(13))], if (match (Option<Range<UInt32>>.Some((var3516&127..UInt32(83)&127:(var871|1)))) {
        case _ => 
            let var4741 : Bool = (Class233() is Int64);
            var4741
        
        case caseVar4746 : Unit => 
            ();
            var504
        
        case caseVar4752 => 
            ();
            false && true
        
        case _ => 
            UInt64(151) >= UInt64(253);
            (var504, var2183, (Int32(24)&127..Int32(-79)&127:((-22)|1)), UInt8(37));
            Float32(8.0) < var1793
        
        case _ => 
            !var1103
        
    }) { [Int32(69), var1426, var327, var2458, Int32(96), Int32(-12), var4340, Int32(87), Int32(-123), Int32(56)] } else { [Int32(-11), Int32(-16), Int32(-66), Int32(-32), Int32(36), Int32(15), Int32(-80), Int32(-62), Int32(-19), Int32(-32)] } ]
}

main(): Int64 {
    try {
        let var33 : ?UInt8 = ((UInt64(151)&127..UInt64(123)&127:116|1) as UInt8);
        let var92 : Float64 = (-77.0);
        func func6(param7 : Float32, namedParam8 ! : Int32, optionalParam9 ! : Int8 = Int8(Int8(-1)), optionalParam12 ! : Int32 = Int32(5)) : Unit { // block id: 14
            var var43 : UInt8 = UInt8(Int8(28));
            ([var33, Option<UInt8>.None, Option<UInt8>.None, var33, Option<UInt8>.Some(UInt8(187)), Option<UInt8>.Some(var43), Option<UInt8>.None, var33, var33, Option<UInt8>.None][6] ?? UInt8(85)) / ((UInt8(13)) | 1);
            ((try { // block id: 64
                let var67 : Bool = (Float32(Float32(-53.0)) is Array<Option<UInt8>>);
                if (var67) { var33 } else { Option<UInt8>.None } ;
                var74
            } finally { // block id: 77
                Option<Option<Unit>>.Some(Option<Unit>.None)
            } ?? (Float32(-89.0) as Unit)) ?? (var92 * (-32.0)|>{ lambdaParameter88 : Float64 =>  }))
        }
;
        func6([Float32(68.0), Float32(79.0), Float32(23.0), Float32(-109.0), Float32(-8.0), Float32(42.0), Float32(-18.0), Float32(53.0), Float32(119.0), Float32(72.0)][6], namedParam8 : [Int32(87), Int32(99), Int32(-73), Int32(-91), Int32(106), Int32(82), Int32(-119), Int32(-3), Int32(68), Int32(101)][0]);
        let var4792 : (Array<Array<Int32>>) -> Array<Array<Int32>> = func106;
        (var4795|>var4792)[8];
        match (var4801) {
            case caseVar4805 : (Range<Int8>, Range<UInt8>, Array<Float32>, (Range<Int16>, Range<Int32>, Int16, Option<Unit>), Array<Int32>, UInt64, Bool, Range<Int8>) => 
                ();
                var871 / ((var871) | 1)
            
            case _ => 
                38
            
        } - (var871 & var871)
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var327*var327), 64)
        crccheck.updateBuffer(UInt64(var437*var437), 64)
        crccheck.updateBuffer(UInt64(var871*var871), 64)
        crccheck.updateBuffer(UInt64(var1426*var1426), 64)
        crccheck.updateBuffer(UInt64(var1715*var1715), 64)
        crccheck.updateBuffer(UInt64(var2138*var2138), 64)
        crccheck.updateBuffer(UInt64(var2145*var2145), 64)
        crccheck.updateBuffer(UInt64(var2226*var2226), 64)
        crccheck.updateBuffer(UInt64(var2458*var2458), 64)
        crccheck.updateBuffer(UInt64(var2507*var2507), 64)
        crccheck.updateBuffer(UInt64(var2637*var2637), 64)
        crccheck.updateBuffer(UInt64(var2806*var2806), 64)
        crccheck.updateBuffer(UInt64(var3516*var3516), 64)
        crccheck.updateBuffer(UInt64(var3640*var3640), 64)
        crccheck.updateBuffer(UInt64(var3779*var3779), 64)
        crccheck.updateBuffer(UInt64(var3786*var3786), 64)
        crccheck.updateBuffer(UInt64(var4157*var4157), 64)
        crccheck.updateBuffer(UInt64(var4340*var4340), 64)
        crccheck.updateBuffer(UInt64(var4363*var4363), 64)
        crccheck.updateBuffer(UInt64(var4523*var4523), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Class233 {

}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_unexpected_declaration_in_scope
// ASSERT: scan parse_trailing_closure_only_follow_name
// ASSERT: scan parse_expected_left_brace
// ASSERT: scan parse_expected_case
// ASSERT: scan parse_expected_expr_or_decl_in
// ASSERT: scan parse_expected_catch_or_finally_in_try
// ASSERT: scan parse_expected_character


