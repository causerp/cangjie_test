/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output


public let var21 : Enum18 = Enum18.defaultValue
public var var32 : Bool = (UInt8(Int8(Int8(Int8(0)))) is Int32)
public var var65 : ?Bool = Option<Bool>.None
public var var94 : Int32 = Int32(71)
public var var106 : Bool = (Int64(UInt64(107)) is Int8)
public let var154 : Class117 = Class117()
public let var176 : ((Int64, UInt16, Int32, String, Int32), Option<Class117>, String, Bool, Bool) = (((-13), UInt16(Int8(97)), Int32(98), ###"KkLQ,]f)b5"###, Int32(UInt32(150))), (Int32(UInt8(152)) as Class117), """
dW>_+
f%Cc)
""", (Int32(UInt8(Int8(79))) is Bool), ((((-127), UInt16(7), Int32(56), ###"g^nNca{[`@T"###, Int32(-45)), (Int8(17) as Class117), """
!LFSa{
~k36m
""", (() is Int8), true) is Unit))
public let var210 : Int64 = Int64(UInt8(217))
public let var217 : (Int64, UInt16, Int32, String, Int32) = (Int64(UInt32(UInt8(41))), UInt16(136), Int32(-65), ###"rc=90CF:rM"###, Int32(-22))
public var var229 : String = """
\\b6p$
[ v2C
"""
public var var234 : ((Int64, UInt16, Int32, String, Int32), Option<Class117>, String, Bool, Bool) = ((Int64(Int16(UInt8(181))), UInt16(10), Int32(Int16(-12)), "hI~_i!xB+b", Int32(Int8(UInt8(78)))), Option<Class117>.None, """
(F`%6
n)a{.h
""", (Int16(-17) is UInt16), true)
public let var294 : ((Int64, UInt16, Int32, String, Int32), Option<Class117>, String, Bool, Bool) = ((Int64(Int64(UInt16(14))), UInt16(166), Int32(Int16(Int8(66))), """
TzU4`
,OP]@
""", Int32(Int32(26))), Option<Class117>.None, "^R-PsJ>.'m", true, (Class117() is Class117))
public var var332 : UInt64 = UInt64(UInt16(217))
public var var354 : Int8 = Int8(100)
public var var362 : Unit = ()
public let var376 : ?(Option<Class117>, UInt64) = ((-1.0) as (Option<Class117>, UInt64))
public let var410 : Unit = ()
public var var437 : ?Bool = Option<Bool>.None
public let var468 : Float64 = Float64(Float32(Float32(Float32(7.0))))
public var var502 : (Option<Class117>, UInt64) = ((93 as Class117), UInt64(160))
public var var516 : (Option<Class117>, UInt64) = (Option<Class117>.None, UInt64(38))
public let var648 : UInt8 = UInt8(UInt8(Int8(84)))
public let var750 : ?Unit = Option<Unit>.None
public let var755 : ?Class117 = Option<Class117>.None
public var var804 : Array<Option<Unit>> = [Option<Unit>.None, (Int8(92) as Unit), Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, ([true, false, true, (Class665() is Option<Option<Unit>>), (((-77)&127..=(-82)&127:(34|1)) is Range<UInt64>), true, false, (Option<(Float32, Int64, Range<UInt8>, Array<Bool>, Int64, Float32, Range<Int8>, UInt32)>.None is (Option<Class117>, UInt64)), true, ('5' is Range<Int64>)] as Unit), ((Float32(62.0), Int64(Int8(-91)), (UInt8(240)&127..UInt8(50)&127:(109|1)), [true, false, false, true, true, false, false, false, false, false], 8, Float32(Float32(-126.0)), (Int8(40)&127..Int8(17)&127:((-46)|1)), UInt32(142)) as Unit), Option<Unit>.None, (('K' as Class117) as Unit)]
public let var860 : Float32 = Float32(15.0)
public var var863 : (Float32, Int64, Range<UInt8>, Array<Bool>, Int64, Float32, Range<Int8>, UInt32) = (Float32(-72.0), Int64(Int8(UInt8(251))), (UInt8(155)&127..UInt8(198)&127:(-74)|1), [false, false, false, ('5' is Class665), ((Int32(-96)&127..Int32(8)&127:(124|1)) is Array<Option<Unit>>), true, true, ((Int16(62)&127..=Int16(20)&127:((-109)|1)) is UInt32), true, false], 4, Float32(Float32(Float32(Float32(35.0)))), (Int8(-23)&127..Int8(-66)&127:(-111)|1), UInt32(7))
public let var910 : Bool = true
public var var924 : Bool = ((UInt8(244)&127..UInt8(212)&127:(-51)|1) is (Int64, UInt16, Int32, String, Int32))
public let var937 : Range<Int8> = (Int8(108)&127..=Int8(-60)&127:108|1)
public let var940 : UInt32 = UInt32(UInt16(91))
let var954 : Class665 = Class665()
public var var980 : UInt16 = UInt16(UInt8(49))
public let var987 : Int16 = Int16(-78)
public var var997 : ??Unit = Option<Option<Unit>>.None
public var var1022 : Array<Float32> = [Float32(Float32(37.0)), Float32(-63.0), Float32(Float32(Float32(Float32(-21.0)))), Float32(51.0), Float32(90.0), Float32(56.0), Float32(-94.0), Float32(12.0), Float32(Float32(-60.0)), Float32(-89.0)]
public var var1048 : (Range<Int64>, UInt16, (Int64, UInt16, Int32, String, Int32), Range<Int16>, Rune, UInt16) = (((-68)&127..Int64(Int8(-109))&127:(Int64(UInt64(Int8(-81)))|1)), UInt16(103), (76, UInt16(148), Int32(UInt32(Int8(-18))), "jst'cx\"P${var229}!.", Int32(Int32(UInt8(242)))), (Int16(Int16(Int8(2)))&127..Int16(-53)&127:(Int64(UInt64(UInt16(174)))|1)), '3', UInt16(UInt8(159)))
public let var1113 : ???Unit = ((Int32(-101)&127..Int32(Int32(-75))&127:(120|1)) as Option<Option<Unit>>)
public let var1133 : (Range<UInt8>, Class117) = ((UInt8(193)&127..=UInt8(127)&127:105|1), Class665())
public var var1155 : Int8 = Int8(38)
public let var1165 : Unit = ()
public var var1171 : Int64 = Int64(Int64(UInt64(Int16(119))))
public let var1177 : Range<UInt16> = (UInt16(18)&127..=UInt16(75)&127:34|1)
public var var1221 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
public var var1234 : Unit = ()
public var var1283 : Range<UInt64> = (UInt64(164)&127..=UInt64(178)&127:(-92)|1)
public let var1305 : Array<Option<Float64>> = [Option<Float64>.None, (Aggregate1011() as Float64), ((Int16(14)&127..=Int16(48)&127:(Int64(Int8(-85))|1)) as Float64), Option<Float64>.None, (Aggregate1011() as Float64), Option<Float64>.None, ((((UInt8(5)&127..=UInt8(106)&127:58|1) as (Option<Class117>, UInt64)) as (Float32, Int64, Range<UInt8>, Array<Bool>, Int64, Float32, Range<Int8>, UInt32)) as Float64), Option<Float64>.None, (Class665() as Float64), (Class665() as Float64)]
let var1389 : ?UInt64 = ((Float32(Float32(Float32(15.0))), (Int8(-112)&127..=Int8(-77)&127:(-101)|1), (Int8(UInt8(133))&127..Int8(Int8(37))&127:(Int64(UInt64(133))|1)), UInt16(73), (), (UInt64(68)&127..UInt64(169)&127:(-79)|1), (UInt16(253)&127..UInt16(85)&127:9|1), (Float32(49.0), (-89), (UInt8(243)&127..=UInt8(252)&127:1|1), [true, false, false, true, true, false, false, true, true, false], (-122), Float32(Float32(64.0)), (Int8(-19)&127..=Int8(89)&127:(44|1)), UInt32(109))) as UInt64)
public let var1475 : (Array<Unit>, (Int64, UInt16, Int32, String, Int32)) = ([(), (), (), (), (), (), (), (), (), ()], (108, UInt16(Int8(Int8(44))), Int32(Int16(19)), """
C${var229}M(g0
Rs\"${var229}i+
""", Int32(Int32(41))))
var var1516 : ???Float64 = Option<Option<Option<Float64>>>.None
public var var1531 : ??Float64 = Option<Option<Float64>>.None
public var var1558 : ??Unit = Option<Option<Unit>>.None
public let var1678 : Interface121 = Class665()
public let var1800 : Unit = ()
public let var1805 : Range<UInt32> = (UInt32(UInt16(UInt16(UInt16(29))))&127..=UInt32(191)&127:(Int64(Int16(Int8(7)))|1))
public let var1863 : ?Bool = Option<Bool>.None
let var1926 : Range<Int16> = (Int16(14)&127..Int16(42)&127:72|1)
public var var1962 : Int64 = 52
public let var1967 : Array<Float64> = Array<Float64>(10){ i => 91.0 }
public let var2139 : ((Float32, Range<Int8>, Range<Int8>, UInt16, Unit, Range<UInt64>, Range<UInt16>, (Float32, Int64, Range<UInt8>, Array<Bool>, Int64, Float32, Range<Int8>, UInt32)), (Float32, Range<Int8>, Range<Int8>, UInt16, Unit, Range<UInt64>, Range<UInt16>, (Float32, Int64, Range<UInt8>, Array<Bool>, Int64, Float32, Range<Int8>, UInt32)), Unit, Option<Unit>, (Range<Int64>, UInt16, (Int64, UInt16, Int32, String, Int32), Range<Int16>, Rune, UInt16), (Range<Int64>, UInt16, (Int64, UInt16, Int32, String, Int32), Range<Int16>, Rune, UInt16), (Float32, Int64, Range<UInt8>, Array<Bool>, Int64, Float32, Range<Int8>, UInt32)) = ((Float32(Float32(Float32(-83.0))), (Int8(17)&127..=Int8(-82)&127:16|1), (Int8(-12)&127..Int8(59)&127:(-75)|1), UInt16(UInt8(36)), (), (UInt64(38)&127..UInt64(246)&127:(-34)|1), (UInt16(118)&127..=UInt16(Int8(10))&127:(Int64(UInt8(168))|1)), (Float32(-38.0), Int64(Int16(73)), (UInt8(168)&127..=UInt8(71)&127:88|1), [false, true, true, false, false, true, false, true, true, true], 14, Float32(6.0), (Int8(70)&127..Int8(-39)&127:(-47)|1), UInt32(84))), (Float32(Float32(-86.0)), (Int8(47)&127..=Int8(Int8(-103))&127:((-105)|1)), (Int8(UInt8(98))&127..=Int8(-115)&127:(45|1)), UInt16(UInt16(229)), (), (UInt64(242)&127..=UInt64(51)&127:28|1), (UInt16(203)&127..=UInt16(Int16(19))&127:(Int64(UInt16(7))|1)), (Float32(Float32(90.0)), Int64(UInt16(54)), (UInt8(231)&127..UInt8(196)&127:1|1), [true, false, true, false, true, false, true, true, true, true], Int64(UInt8(251)), Float32(4.0), (Int8(-86)&127..Int8(-13)&127:(-16)|1), UInt32(33))), (), Option<Unit>.None, ((Int64(UInt64(113))&127..Int64(Int8(-102))&127:(Int64(UInt16(243))|1)), UInt16(67), ((-46), UInt16(108), Int32(UInt8(122)), """
8Aoh`
Fve${var229}n#
""", Int32(Int16(50))), (Int16(UInt8(214))&127..Int16(-46)&127:(Int64(Int32(76))|1)), 'o', UInt16(Int16(-82))), ((120&127..=48&127:(Int64(UInt64(210))|1)), UInt16(Int16(Int8(80))), ((-112), UInt16(UInt8(59)), Int32(Int8(114)), ":v${var229}B${var229}Mj14${var229}r(1", Int32(-64)), (Int16(Int8(-111))&127..Int16(-84)&127:(Int64(Int16(12))|1)), 'S', UInt16(165)), (Float32(-65.0), (-111), (UInt8(26)&127..=UInt8(126)&127:(53|1)), [true, (Option<Option<Unit>>.None is UInt64), (true is Option<(Option<Class117>, UInt64)>), (() is Option<Class117>), false, ([Option<Float64>.None, Option<Float64>.None, Option<Float64>.None, Option<Float64>.None, Option<Float64>.None, Option<Float64>.None, Option<Float64>.None, Option<Float64>.None, Option<Float64>.None, Option<Float64>.None] is Array<Bool>), false, true, ((Float32(46.0), (-43), (UInt8(240)&127..UInt8(154)&127:28|1), [true, true, true, true, true, true, false, true, true, false], (-103), Float32(54.0), (Int8(-40)&127..=Int8(24)&127:((-18)|1)), UInt32(141)) is (Option<Class117>, UInt64)), true], 26, Float32(53.0), (Int8(Int8(80))&127..Int8(5)&127:(78|1)), UInt32(UInt16(195))))
public let var2333 : Range<UInt8> = (UInt8(0)&127..=UInt8(137)&127:(Int64(Int32(UInt8(2)))|1))
let var2381 : Float64 = 8.0
public let var2494 : ?(Float32, Int64, Range<UInt8>, Array<Bool>, Int64, Float32, Range<Int8>, UInt32) = Option<(Float32, Int64, Range<UInt8>, Array<Bool>, Int64, Float32, Range<Int8>, UInt32)>.None
public var var2502 : Int16 = Int16(-101)
public let var2669 : ?Rune = ((Int64(UInt64(105))&127..=Int64(UInt8(UInt8(9)))&127:(65|1)) as Rune)
public var var2696 : ?Unit = Option<Unit>.None
public var var2704 : Unit = ()
var var2725 : Float64 = Float64((-10.0))
public var var2751 : (Float32, Range<Int8>, Range<Int8>, UInt16, Unit, Range<UInt64>, Range<UInt16>, (Float32, Int64, Range<UInt8>, Array<Bool>, Int64, Float32, Range<Int8>, UInt32)) = (Float32(-58.0), (Int8(-103)&127..=Int8(34)&127:(Int64(UInt64(234))|1)), (Int8(57)&127..=Int8(-15)&127:(-27)|1), UInt16(189), (), (UInt64(27)&127..UInt64(UInt16(Int8(-1)))&127:(Int64(UInt32(UInt16(221)))|1)), (UInt16(173)&127..=UInt16(140)&127:(-120)|1), (Float32(Float32(65.0)), Int64(UInt64(UInt8(217))), (UInt8(Int8(22))&127..UInt8(UInt8(61))&127:(Int64(UInt64(140))|1)), [(Int8(-8) is UInt64), false, (Class665() is Option<(Option<Class117>, UInt64)>), (() is Class665), (((-87), UInt16(101), Int32(-68), ###"+i_aB^EttE"###, Int32(2)) is Range<UInt16>), (([107.0, 119.0, 89.0, (-42.0), (-25.0), 54.0, 62.0, (-28.0), (-119.0), (-110.0)], [UInt8(57), UInt8(198), UInt8(236), UInt8(88), UInt8(99), UInt8(111), UInt8(141), UInt8(55), UInt8(186), UInt8(59)], [71.0, 34.0, 101.0, (-93.0), 102.0, 71.0, (-117.0), (-108.0), 69.0, 13.0], Aggregate1011()) is (Range<UInt8>, Class117)), false, ((UInt32(130)&127..=UInt32(64)&127:(102|1)) is Interface120), ((UInt8(91)&127..=UInt8(65)&127:((-9)|1)) is Range<Int16>), (Option<Option<Int32>>.None is Range<UInt8>)], (-26), Float32(Float32(115.0)), (Int8(-121)&127..=Int8(-27)&127:(-57)|1), UInt32(122)))
public var var2844 : Rune = 'G'
public var var2928 : ?Float64 = Option<Float64>.None
public var var2975 : Int8 = Int8(UInt8(UInt8(14)))
public var var3076 : ?Float64 = Option<Float64>.None
public var var3095 : (Array<Float64>, (Float32, Range<Int8>, Range<Int8>, UInt16, Unit, Range<UInt64>, Range<UInt16>, (Float32, Int64, Range<UInt8>, Array<Bool>, Int64, Float32, Range<Int8>, UInt32)), Array<Array<Float64>>, Option<Interface121>) = ([(-117.0), (-31.0), 33.0, (-26.0), (-7.0), 15.0, (-40.0), (-91.0), (-96.0), (-45.0)], (Float32(38.0), (Int8(110)&127..=Int8(114)&127:((-17)|1)), (Int8(UInt8(8))&127..Int8(-78)&127:(1|1)), UInt16(180), (), (UInt64(170)&127..=UInt64(102)&127:36|1), (UInt16(167)&127..UInt16(219)&127:(Int64(Int8(-127))|1)), (Float32(Float32(-62.0)), Int64(123), (UInt8(140)&127..=UInt8(140)&127:(22|1)), [true, true, false, false, false, true, true, true, true, false], (-109), Float32(-90.0), (Int8(-2)&127..Int8(-95)&127:78|1), UInt32(UInt8(138)))), [[(-87.0), 76.0, 76.0, 51.0, 11.0, 44.0, 69.0, 11.0, (-123.0), 11.0], [25.0, (-8.0), (-34.0), (-94.0), (-113.0), (-48.0), (-109.0), 9.0, (-60.0), 84.0], [Float64((-125.0)), (-105.0), Float64((-42.0)), (-15.0), Float64((-58.0)), (-76.0), Float64((-40.0)), (-63.0), 73.0, Float64((-88.0))], [(-80.0), 123.0, (-122.0), (-38.0), 121.0, 45.0, 25.0, (-56.0), (-24.0), (-42.0)], [(-64.0), (-126.0), (-96.0), 56.0, 77.0, 126.0, (-24.0), (-13.0), 59.0, (-44.0)], [Float64(Float32(9.0)), Float64(34.0), Float64(Float32(111.0)), Float64(109.0), 33.0, Float64(Float32(-84.0)), 118.0, Float64((-57.0)), Float64(Float32(56.0)), Float64(Float32(106.0))], [(-37.0), 38.0, (-83.0), 112.0, 79.0, 104.0, 32.0, (-125.0), 82.0, 119.0], [114.0, (-34.0), (-80.0), 7.0, (-102.0), 67.0, (-69.0), (-9.0), (-120.0), 20.0], [15.0, Float64((-26.0)), Float64(98.0), (-1.0), Float64(Float32(-67.0)), 89.0, (-116.0), Float64(53.0), Float64((-101.0)), Float64(Float32(-76.0))], [66.0, Float64((-42.0)), Float64(Float32(50.0)), Float64((-102.0)), Float64((-93.0)), 110.0, 46.0, 60.0, Float64(Float32(122.0)), (-26.0)]], ((Int32(62)&127..=Int32(-104)&127:125|1) as Interface121))
public var var3233 : ???Unit = Option<Option<Option<Unit>>>.None
public var var3321 : Option<Option<Option<Int32>>> = (((UInt32(160) as Class117), UInt64(UInt32(10))) as Option<Option<Int32>>)
public let var3337 : Option<Int32> = ((Float32(Float32(-72.0)), Int64(UInt8(24)), (UInt8(Int8(-18))&127..=UInt8(UInt8(18))&127:(110|1)), [false, (Float32(53.0) is Array<Option<Float64>>), (Option<Class117>.None is Enum18), ("$)xU#1NVd[" is Option<Option<Float64>>), (Option<Interface121>.None is () -> Option<Float64>), (Option<Bool>.None is Range<Int32>), ([Option<Float64>.None, Option<Float64>.None, Option<Float64>.None, Option<Float64>.None, Option<Float64>.None, Option<Float64>.None, Option<Float64>.None, Option<Float64>.None, Option<Float64>.None, Option<Float64>.None] is ((Int64, UInt16, Int32, String, Int32), Option<Class117>, String, Bool, Bool)), (() is (Option<Option<Option<Float64>>>, Array<Option<Float64>>) -> Option<Option<Float64>>), false, false], Int64(UInt8(242)), Float32(-98.0), (Int8(-43)&127..Int8(UInt8(220))&127:(Int64(UInt16(147))|1)), UInt32(UInt8(215))) as Int32)
public var var3402 : (Float32, Range<Int8>, Range<Int8>, UInt16, Unit, Range<UInt64>, Range<UInt16>, (Float32, Int64, Range<UInt8>, Array<Bool>, Int64, Float32, Range<Int8>, UInt32)) = (Float32(Float32(Float32(-46.0))), (Int8(-34)&127..=Int8(13)&127:(-32)|1), (Int8(-19)&127..=Int8(UInt8(UInt8(127)))&127:((-37)|1)), UInt16(Int16(Int16(31))), (), (UInt64(54)&127..UInt64(UInt64(112))&127:((-54)|1)), (UInt16(6)&127..=UInt16(Int8(88))&127:(65|1)), (Float32(106.0), Int64(UInt64(205)), (UInt8(103)&127..=UInt8(236)&127:71|1), [true, false, false, true, true, false, true, true, true, true], Int64(UInt8(212)), Float32(-110.0), (Int8(18)&127..=Int8(Int8(-31))&127:(Int64(UInt32(184))|1)), UInt32(Int16(Int8(22)))))
public var var3640 : Array<Array<Float64>> = Array<Array<Float64>>(10){ i => [95.0, (-62.0), 87.0, 20.0, (-2.0), 80.0, (-49.0), 33.0, 42.0, (-128.0)] }
let var3779 : ?String = (Option<(Float32, Int64, Range<UInt8>, Array<Bool>, Int64, Float32, Range<Int8>, UInt32)>.None as String)
public var var3818 : Unit = ()
public let var3835 : ?Rune = (((UInt8(211)&127..UInt8(30)&127:20|1), Class117()) as Rune)
public let var3888 : Option<Int8> = Option<Int8>.None
public var var3960 : Interface120 = Class665()
public let var4184 : Array<Bool> = [true, true, false, false, false, true, true, false, true, false]
public var var4312 : Float32 = Float32(Float32(Float32(Float32(Float32(-55.0)))))
public let var4319 : Int64 = 51
public var var4334 : Int64 = Int64(UInt16(218))
public var var4424 : Int8 = Int8(Int8(-23))
let var4456 : ?(Option<Class117>, UInt64) = (UInt8(Int8(UInt8(238))) as (Option<Class117>, UInt64))
let var4569 : Int64 = (-122)
public let var4588 : ?UInt64 = ((UInt16(88)&127..=UInt16(212)&127:(-26)|1) as UInt64)
let var4657 : ?(Array<Unit>, (Int64, UInt16, Int32, String, Int32)) = Option<(Array<Unit>, (Int64, UInt16, Int32, String, Int32))>.None
let var4673 : Int64 = Int64(Int16(Int8(UInt8(Int8(67)))))
public var var4742 : Int8 = Int8(-7)
let var4804 : Float64 = (-108.0)
var var4835 : Bool = false
public var var5078 : UInt8 = UInt8(22)
public let var5087 : Bool = false
public let var5226 : Int8 = Int8(106)
public let var5307 : (Int64, UInt16, Int32, String, Int32) = (88, UInt16(174), Int32(Int8(UInt8(Int8(-14)))), "KejW${var229}}P(a{AA", Int32(3))
public var var5326 : Int64 = Int64(Int16(-79))
public var var5371 : Bool = false
public var var5379 : Unit = ()
public var var5386 : ?Option<Int32> = (UInt32(Int8(-24)) as Option<Int32>)
public let var5427 : Option<Int8> = Option<Int8>.None
public enum Enum18 {
    defaultValue
}

public interface Interface120 {

}

public interface Interface121 <: Interface120 {

}

public open class Class117 <: Interface120 & Interface121 & Resource {
    public init() { // block id: 119

    }
;
    public static let var124 : Bool = false;
    public let var157 : Unit = ();
    public static let var730 : Range<Int8> = (Int8(-48)&127..Int8(55)&127:((-104)|1));
    public static let var3447 : Unit = ();
    public static let var3578 : Option<Option<Option<Unit>>> = Option<Option<Option<Unit>>>.None;
    public static let var3591 : (Range<UInt8>, Class117) = ((UInt8(225)&127..=UInt8(41)&127:(-115)|1), Class117());
    public func func3825(namedParam3826 ! : (Array<Option<Unit>>) -> Option<Unit>) : Bool { // block id: 3829
        var loopTimeVar3873 : Int64 = 0;
        while ((match (if (true) { var3835 } else { Option<Rune>.Some('a') } ) {
            case caseVar3844 : Int8 => 
                Int16(-126) != Int16(111)
            
            case caseVar3851 => 
                var332 <<= ((var332) & 7);
                false
            
            case _ => 
                var124
            
        }) && loopTimeVar3873 < 100 ) {
            loopTimeVar3873++;
            [UInt8(46), UInt8(95), UInt8(96), var648, UInt8(151), var648, UInt8(60), UInt8(147), var648, UInt8(228)]
        };
        var var3922 : ?Int8 = Option<Int8>.None;
        (try { // block id: 3881
            Option<Int8>.None
        } catch (_) { // block id: 3883
            var1962 &= var210;
            var3888
        } finally { // block id: 3890
            if (true) { var3888 } else { var3888 } 
        } ?? if (false) { // block id: 3897
            Int8(120) ^ var1155
        } else if (var106) { // block id: 3902
            ();
            Option<Int8>.None;
            var2975 * Int8(-26)
        } else { // block id: 3908
            if (var924) { (UInt16(94)&127..UInt16(135)&127:36|1) } else { var1177 } ;
            var354
        }) != (if (false) { var3922 } else { Option<Int8>.None }  ?? var2975)
    }
;
    func func4363(namedParam4364 ! : (Option<Option<Unit>>) -> Bool, namedParam4367 ! : Option<Option<Option<Float64>>>, optionalParam4368 ! : String = ###" ,e9Z.jQoX"###, namedParam4370 ! : Int16) : UInt32 { // block id: 4371
        var3233;
        match (var1048) {
            case (caseVar4377,caseVar4378 : Aggregate1011,caseVar4379,caseVar4380,_ : Option<Option<Option<Unit>>>,_) => 
                [Option<Unit>.Some(()), Option<Unit>.None, var750, var750, var750, var2696, var2696, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None]
            
            case _ => 
                ();
                var980 >>= ((UInt16(141)) & 7);
                var804
            
        };
        try { // block id: 4402
            var2696.getOrThrow();
            var940 / ((UInt32(139)) | 1)
        } catch (_) { // block id: 4408
            try { // block id: 4410
                UInt32(118) - var940
            } finally { // block id: 4414
                if (var124) { var1863 } else { var1863 } ;
                var410;
                var940
            }
        } finally { // block id: 4421
            match (var4424) {
                case 100 => 
                    UInt32(127)
                
                case _ => 
                    '8';
                    var940 * UInt32(56)
                
            }
        }
    }
;
    var var5062 : ??Rune = Option<Option<Rune>>.None;
    public open func func5036(param5037 : Range<Int8>, namedParam5038 ! : (Class117) -> Option<Option<Int32>>, namedParam5041 ! : Int64, namedParam5042 ! : Option<Int64>) : (Int64, UInt16, Int32, String, Int32) { // block id: 5043
        let var5065 : ?Rune = (Float32(-118.0) as Rune);
        if (true) { (match (var1863) {
            case _ => 
                var var5059 : ???Float64 = Option<Option<Option<Float64>>>.None;
                if (false) { Option<Option<Option<Float64>>>.None } else { var5059 } ;
                var5062
            
        } ?? var5065) } else { Option<Rune>.None } ;
        if (match (Option<Option<Option<Unit>>>.None) {
            case caseVar5074 : (Array<Float64>, (Float32, Range<Int8>, Range<Int8>, UInt16, Unit, Range<UInt64>, Range<UInt16>, (Float32, Int64, Range<UInt8>, Array<Bool>, Int64, Float32, Range<Int8>, UInt32)), Array<Array<Float64>>, Option<Interface121>) => 
                var5078 >>= ((UInt8(0)) & 7);
                ();
                var124
            
            case _ : (Array<Unit>, (Int64, UInt16, Int32, String, Int32)) => 
                var5087
            
            case caseVar5091 : Option<Rune> => 
                false
            
            case caseVar5096 : Rune => 
                var354 ^= Int8(-119);
                true
            
            case _ => 
                ();
                (-13) > 69
            
        }) { try { // block id: 5109
            var3818;
            var2502++;
            if (false) { var21 } else { var21 } 
        } catch (e: Exception) { // block id: 5117
            ();
            Enum18.defaultValue
        } } else { (if (true) { Option<Enum18>.None } else { Option<Enum18>.None }  ?? if (false) { var21 } else { Enum18.defaultValue } ) } ;
        let var5188 : (Int64, UInt16, Int32, String, Int32) = ((-35), UInt16(UInt16(Int16(59))), Int32(Int32(Int32(-65))), "1C\\h<r%`q+", Int32(Int32(UInt16(118))));
        if (if (var106) { // block id: 5137
            Int8(-93) + var4742
        } else if (false) { // block id: 5142
            var3818;
            var4424
        } else { // block id: 5145
            var var5147 : Array<UInt8> = [UInt8(220), UInt8(UInt8(Int8(-77))), UInt8(106), UInt8(Int8(UInt8(UInt8(78)))), UInt8(3), UInt8(231), UInt8(UInt8(113)), UInt8(UInt8(Int8(104))), UInt8(91), UInt8(7)];
            var5147;
            var1234;
            Int8(-27)
        } != try { // block id: 5170
            var502;
            var2844;
            Int8(71)
        } catch (e: Exception) { // block id: 5174
            ();
            Int8(-72)
        } finally { // block id: 5177
            var2751;
            var1155
        }) { // block id: 5180
            (Option<(Int64, UInt16, Int32, String, Int32)>.Some(var5188) ?? var217)
        } else { // block id: 5202
            var loopTimeVar5206 : Range<UInt64> = (UInt64(90)&127..=UInt64(119)&127:(Int64(UInt32(48))|1));
            for (i in loopTimeVar5206 where false) {

            };
            let var5229 : Int8 = Int8(UInt8(Int8(UInt8(UInt8(108)))));
            let var5236 : Int64 = Int64(Int64(Int8(117)));
            let var5286 : ((Int64, UInt16, Int32, String, Int32), Option<Class117>, String, Bool, Bool) = ((66, UInt16(UInt16(Int8(-110))), Int32(-19), """
F~35Y
hr6~d
""", Int32(UInt8(172))), Option<Class117>.Some(Class665()), "BM&*STYHk'", (Float64(34.0) is ((UInt8, Float64, UInt32, Class117) -> Option<Float64>, Option<Option<Unit>>) -> Unit), true);
            match (var980) {
                case 232 | 182 | 142 => 
                    ((Float32(-85.0), (Int8(-85)&127..=Int8(-44)&127:(58|1)), (var5226&127..var5229&127:(var5236|1)), UInt16(114), var1234, var1283, var1177, (var4312, var4334, (var5078&127..=UInt8(175)&127:(var4319|1)), [false, false, false, true, true, false, true, true, false, true], (-86), Float32(-96.0), (Int8(76)&127..Int8(-15)&127:(var5236|1)), var940)), var3402, (), var2696, var1048, var1048, (var860, 98, (var5078&127..=var648&127:((-90)|1)), var4184, (-49), var860, var730, var940));
                    var980 >>= ((var980) & 7);
                    var217
                
                case 67 => 
                    if (true) { var5286 } else { var5286 } ;
                    var1234;
                    var5307
                
                case caseVar5319 : Range<Int8> => 
                    var5307
                
                case _ => 
                    let var5332 : String = "%&g54Ccz0z";
                    (var5326, var980, var94, var5332, Int32(-12))
                
            }
        }
    }
;
    public static func func699(param700 : Int16, param701 : Option<Float64>, namedParam702 ! : UInt16) : (Range<UInt8>, Class117) { // block id: 5496
        var var5536 : (Range<UInt8>, Class117) = ((UInt8(27)&127..=UInt8(17)&127:(-108)|1), Class117());
        match (((Option<Option<Rune>>.Some(var3835) as Interface120) ?? match (var2696) {
                case _ => 
                    var4312 - Float32(-90.0);
                    var3447;
                    Class665()
                
            })) {
            case caseVar5517 => 
                [var2928, var3076, Option<Float64>.Some((-98.0)), var3076, Option<Float64>.Some((-90.0)), var2928, Option<Float64>.None, Option<Float64>.Some(109.0), var3076, var3076];
                if (true) { var5536 } else { var1133 } 
            
            case _ : Option<Bool> => 
                ();
                Option<Int8>.Some(Int8(-7));
                if (true) { ((UInt8(84)&127..UInt8(181)&127:(-46)|1), var154) } else { var5536 } 
            
            case _ => 
                if (true) { var5536 } else { ((UInt8(15)&127..=UInt8(203)&127:(-59)|1), var154) } 
            
            case _ => 
                var3818;
                var2502 *= Int16(-127);
                if (var4835) { (var2333, var154) } else { var1133 } 
            
        }
    }

    public func isClosed(): Bool { return true }
    public func close(): Unit {}
}



public func func289(param290 : Option<Unit>) : Bool { // block id: 291
    var294[3]
}





public interface Interface668 {

}

public open class Class665 <: Class117 & Interface121 & Interface668 {
    public init() { // block id: 667

    }
;
    public static let var671 : (Range<UInt8>, Class117) = ((UInt8(123)&127..UInt8(247)&127:(-18)|1), Class117());
    public var var957 : Bool = true;
    static var var3540 : Unit = ();
    public static var var3550 : (Float32, Int64, Range<UInt8>, Array<Bool>, Int64, Float32, Range<Int8>, UInt32) = (Float32(24.0), (-43), (UInt8(19)&127..UInt8(142)&127:(17|1)), [false, true, true, true, true, false, false, false, true, true], (-4), Float32(6.0), (Int8(51)&127..Int8(101)&127:(29|1)), UInt32(160));
    redef public static func func699(param700 : Int16, param701 : Option<Float64>, namedParam702 ! : UInt16) : (Range<UInt8>, Class117) { // block id: 703
        match ([44.0, 14.0, 20.0, 50.0, 55.0, (-60.0), 13.0, (-22.0), 114.0, 86.0]) {
            case _ => 
                (Int8(61)&127..=var354&127:(var210|1));
                (Float32(-7.0), (-112), (UInt8(239)&127..UInt8(229)&127:78|1), [false, false, var124, false, false, var124, var106, var32, true, true], (-94), Float32(-42.0), var730, UInt32(246))
            
        };
        var var3391 : (Int64) -> Int32 = func737;
        (match ((var2751, var3402, var3447, var2696, var1048, ((var1962&127..=var1962&127:((-99)|1)), UInt16(161), ((-70), UInt16(225), Int32(43), var229, Int32(-30)), (Int16(30)&127..Int16(-75)&127:24|1), var2844, namedParam702), (Float32(114.0), 37, (UInt8(229)&127..=var648&127:(67|1)), [true, false, true, true, true, false, false, true, false, false], (-119), Float32(-17.0), (Int8(82)&127..=var2975&127:(var210|1)), var940))) {
            case ((_ : Option<Option<Unit>>,caseVar3483,caseVar3484,caseVar3485,caseVar3486,_,_ : Enum18,(caseVar3487,_,_,caseVar3488,_ : Int64,caseVar3489 : Range<Int64>,caseVar3490,caseVar3491)),(caseVar3492 : Class117,caseVar3493 : (Range<Int64>, UInt16, (Int64, UInt16, Int32, String, Int32), Range<Int16>, Rune, UInt16),caseVar3494 : Option<Option<Float64>>,caseVar3495,caseVar3496,_,caseVar3497,caseVar3498 : Range<Int64>),_ : Unit,_ : Int16,caseVar3499 : Enum18,_ : Int8,_ : Int16) => 
                Option<Int64>.Some(var1171)
            
            case (caseVar3505,_ : Rune,_,caseVar3506 : Option<Interface121>,caseVar3507 : Int16,(caseVar3508,caseVar3509,(_ : Option<Option<Option<Float64>>>,caseVar3510 : (Option<Class117>, UInt64),_,_,_ : (Array<Unit>, (Int64, UInt16, Int32, String, Int32))),caseVar3511,_ : Option<Option<Option<Unit>>>,_ : Range<UInt8>),(_,_ : Array<Bool>,_,_,caseVar3512,_ : Option<Interface121>,caseVar3513 : Option<Bool>,_)) => 
                var1221;
                Option<Int64>.Some((-104))
            
            case _ => 
                ();
                if (var106) { Option<Int64>.Some((-52)) } else { Option<Int64>.Some((-42)) } 
            
        } ?? try { // block id: 3528
            [(), var1165, var2704, (), (), var1234, (), var1165, var3447, var3540];
            ();
            var210
        } catch (e: Exception) { // block id: 3544
            11 ^ 31
        } finally { // block id: 3548
            var3550;
            var3447;
            76
        })|>var3391;
        try { // block id: 3569
            Enum18.defaultValue;
            var671
        } finally { // block id: 3572
            let var3587 : Int64 = 95;
            match (var3233) {
                case _ => 
                    var3578;
                    if (false) { ((UInt8(53)&127..=UInt8(66)&127:(var3587|1)), Class117()) } else { var3591 } 
                
            }
        }
    }

}

public func func630(param631 : Int32) : (Range<UInt8>, Class117) { // block id: 632
    var var641 : Float32 = Float32(23.0);
    try { // block id: 634
        Option<Unit>.None.getOrThrow();
        let var644 : Int64 = 125;
        let var655 : Array<Bool> = [false, false, true, false, false, false, true, true, true, true];
        let var660 : Range<Int8> = (Int8(-107)&127..Int8(88)&127:(-120)|1);
        (var641, var644, (var648&127..=UInt8(225)&127:(var210|1)), var655, var210, var641, var660, UInt32(237))[3];
        Class665.var671
    } finally { // block id: 675
        var94 /= ((Int32(-94)) | 1);
        let var682 : (Range<UInt8>, Class117) = ((UInt8(55)&127..UInt8(135)&127:((-51)|1)), Class117());
        if (true) { var682 } else { ((UInt8(31)&127..=UInt8(9)&127:117|1), Class665()) } 
    }
}



public struct Aggregate1011 {
    public init() { // block id: 1013

    }
;
    public static var var1016 : Unit = ();
    static var var2474 : Array<UInt8> = Array<UInt8>(10){ i => UInt8(142) };
    public static var var2613 : Bool = true;
    public init(optionalParam2461 ! : Int8 = Int8(UInt8(165)), namedParam2464 ! : Array<Float32>, namedParam2465 ! : Range<Int8>) { // block id: 2466
        let var2517 : (Array<Float64>, Array<UInt8>, Array<Float64>, Aggregate1011) = ([Float64(Float64((-83.0))), (-87.0), Float64(20.0), 11.0, (-121.0), Float64(Float32(6.0)), 64.0, (-109.0), Float64(Float64(Float32(124.0))), Float64(97.0)], [UInt8(154), UInt8(54), UInt8(192), UInt8(125), UInt8(131), UInt8(25), UInt8(71), UInt8(188), UInt8(113), UInt8(148)], [Float64(Float32(Float32(-29.0))), (-28.0), Float64(Float32(11.0)), Float64((-47.0)), Float64(Float64(Float32(-67.0))), 56.0, 56.0, (-50.0), 68.0, (-106.0)], Aggregate1011());
        try (resource = Class117()) { // block id: 2468
            var106 ||= var32;
            match (var2474) {
                case _ => 
                    var1221;
                    ()
                
            }
        } finally { // block id: 2490
            var1016;
            var var2507 : Float32 = Float32(-70.0);
            match (var2494) {
                case caseVar2498 => 
                    var2502 = Int16(-14);
                    var2507 *= Float32(69.0)
                
                case _ : Unit => 
                    ()
                
                case _ => 
                    var2517;
                    let var2558 : UInt16 = UInt16(Int16(29));
                    var2558;
                    var1800
                
            }
        };
        var loopTimeVar2566 : Int64 = 0;
        while ((false) && loopTimeVar2566 < 100 ) {
            loopTimeVar2566++;

        };
        var980 |= match (try { // block id: 2571
                var94 %= ((var94) | 1);
                [(), (), (), (), (), (), (), (), (), ()];
                if (var924) { Option<Bool>.Some(false) } else { var65 } 
            } finally { // block id: 2581
                -UInt32(12);
                var2502++;
                var437
            }) {
            case _ : UInt32 => 
                ();
                Enum18.defaultValue;
                UInt16(34)
            
            case _ : Range<UInt16> => 
                -var980
            
            case caseVar2600 : Option<UInt64> => 
                var1234;
                let var2604 : UInt16 = UInt16(Int8(-70));
                var2604
            
            case caseVar2609 : Class665 => 
                if (var2613) { (UInt8(240)&127..UInt8(246)&127:(9|1)) } else { (var648&127..var648&127:(16|1)) } ;
                UInt16(8)
            
            case _ => 
                ();
                ();
                UInt16(226)
            
        }
    }

}


public func func1256(namedParam1257 ! : UInt8, optionalParam1258 ! : Float64 = 105.0, optionalParam1260 ! : UInt32 = UInt32(61), optionalParam1262 ! : Class117 = Class117()) : Option<Float64> { // block id: 1264
    try { // block id: 1267
        var var1277 : Unit = ();
        [var1165, var362, (), var1165, (), (), (), var1277, (), ()]
    } finally { // block id: 1281
        var1283;
        [var410, (), var1234, (), var362, (), var1165, var410, var1234, var1234]
    }[3];
    try { // block id: 1300
        var var1302 : Unit = ();
        var1302;
        var1305
    } finally { // block id: 1329
        ();
        if (var32) { Class665() } else { Class117() } ;
        var1305
    }[5]
}

public func func7(param1123 : Array<Option<Unit>>) : Option<Float64> { // block id: 1124
    var var1139 : Int16 = Int16(6);
    var loopTimeVar1151 : Int64 = 0;
    let var1187 : Array<Bool> = [false, true, true, false, true, false, false, true, false, false];
    var var1192 : Range<Int8> = (Int8(10)&127..=Int8(-78)&127:(Int64(UInt8(25))|1));
    var loopTimeVar1207 : Int64 = 0;
    var loopTimeVar1212 : Range<UInt64> = (UInt64(63)&127..UInt64(205)&127:(Int64(UInt8(UInt8(182)))|1));
    var loopTimeVar1253 : Int64 = 0;
    [if (false) { // block id: 1130
        ();
        var1133;
        var1139 -= Int16(-88)
    } else if (false) { // block id: 1143
        ();
        var410;
        ()
    }, while ((false) && loopTimeVar1151 < 100 ) {
        loopTimeVar1151++;

    }, (var354 /= ((var1155) | 1)), (Float32(-22.0), (Int8(-58)&127..=Int8(-123)&127:125|1), (Int8(-79)&127..Int8(37)&127:36|1), UInt16(25), var1165, (var332&127..=var332&127:(var1171|1)), var1177, (Float32(23.0), 89, (var648&127..=UInt8(121)&127:(63|1)), var1187, 23, Float32(-60.0), var1192, var940))[4], if (true) { // block id: 1202

    }, do {
        loopTimeVar1207++;

    } while ((false) && loopTimeVar1207 < 100 ) , for (i in loopTimeVar1212 where var32) {
        break
    }, var1221[9], [(), var410, var410, var1165, var1165, (), (), var1234, (), ()][6], do {
        loopTimeVar1253++;
        if (var106) { (var332&127..UInt64(158)&127:(var1171|1)) } else { (var332&127..=UInt64(35)&127:((-57)|1)) } 
    } while ((var106) && loopTimeVar1253 < 100 ) ][7];
    let var1346 : UInt8 = UInt8(UInt8(UInt8(UInt8(28))));
    let var1358 : UInt8 = UInt8(UInt8(Int8(Int8(-128))));
    func1256(namedParam1257 : UInt8(var1155) / (([var648, var648, var1346, var1346, UInt8(205), var1346, var648, var1346, var1346, var1358][0]) | 1), optionalParam1258 : if (true) { // block id: 1367
        if (false) { var1133 } else { var1133 } ;
        var468 ** Float64(Int32(52.0) & 3)
    } else if (var106) { // block id: 1376
        38.0
    } else { // block id: 1378
        var468
    } ** Float64(Int32((Option<Float64>.Some(var468) ?? var468)) & 3))
}

public func func1104(param1105 : Option<Option<Unit>>) : Bool { // block id: 1106
    (var1113 ?? match (func7(var804)) {
        case _ => 
            Class117();
            var1389;
            if (true) { Option<Option<Unit>>.Some(Option<Unit>.Some(())) } else { param1105 } 
        
    });
    var1234;
    var var1432 : Bool = true;
    (if (var1432) { // block id: 1434
        var94 &= Int32(44);
        let var1440 : Bool = (Option<Float64>.Some((-83.0)) is Option<(Float32, Int64, Range<UInt8>, Array<Bool>, Int64, Float32, Range<Int8>, UInt32)>);
        let var1445 : (Array<Unit>, (Int64, UInt16, Int32, String, Int32)) = ([(), (), (), (), (), (), (), (), (), ()], (Int64(UInt64(243)), UInt16(Int16(Int16(58))), Int32(Int16(14)), """
fSU6t
FF,UN
""", Int32(57)));
        if (var1440) { var1445 } else { ([var1165, var410, (), var1234, (), (), (), var1234, var1234, var1165], var217) } 
    } else { // block id: 1471
        if (var924) { var1475 } else { var1475 } 
    }[1] is (Int32) -> (Range<UInt8>, Class117))
}



public func func1493(param1494 : Option<Unit>) : Option<Option<Unit>> { // block id: 1495
    let var1549 : ?Float64 = ([UInt8(75), UInt8(192), UInt8(109), UInt8(195), UInt8(113), UInt8(241), UInt8(219), UInt8(208), UInt8(235), UInt8(136)] as Float64);
    ((match (var234) {
        case (_,_,_ : Array<Bool>,_ : Option<Option<Option<Unit>>>,_) => 
            [(), (), (), (), (), (), (), (), (), ()];
            var1165;
            if (false) { var1516 } else { Option<Option<Option<Float64>>>.None } 
        
        case ((_,_,caseVar1521,_,_ : Interface121),caseVar1522,caseVar1523 : Range<Int32>,_ : ((Int64, UInt16, Int32, String, Int32), Option<Class117>, String, Bool, Bool),caseVar1524 : UInt16) => 
            var210 + var1171;
            Option<Option<Option<Float64>>>.Some(var1531)
        
        case _ => 
            Float32(-128.0);
            var1516
        
        case _ => 
            Option<Option<Option<Float64>>>.None
        
        case _ => 
            Option<Option<Option<Float64>>>.Some(Option<Option<Float64>>.None)
        
    } ?? (var1133 as Option<Float64>)) ?? var1549);
    func func1553(param1554 : Array<Float64>, namedParam1555 ! : Range<UInt64>) : Option<Option<Unit>> { // block id: 1556
        var1558
    }
;
    let var1563 : Array<Array<Float64>> = [[(-124.0), 65.0, (-40.0), 71.0, 47.0, 97.0, 16.0, 111.0, (-40.0), 91.0], [122.0, (-92.0), (-53.0), 57.0, 105.0, (-94.0), (-34.0), (-115.0), 98.0, 15.0], [106.0, (-46.0), (-36.0), (-16.0), 50.0, (-9.0), 90.0, 49.0, (-89.0), (-127.0)], [(-44.0), (-79.0), (-116.0), 43.0, (-117.0), (-84.0), 108.0, 125.0, 95.0, 104.0], [66.0, (-82.0), 32.0, (-106.0), (-58.0), 56.0, (-65.0), (-44.0), (-16.0), (-31.0)], [(-35.0), 117.0, 5.0, (-68.0), (-104.0), (-40.0), (-8.0), (-95.0), 12.0, (-22.0)], [50.0, (-81.0), (-65.0), (-31.0), 83.0, (-19.0), 90.0, 123.0, (-63.0), 51.0], [114.0, 45.0, 69.0, 29.0, (-72.0), 32.0, 62.0, (-89.0), 53.0, 34.0], [(-45.0), 85.0, 26.0, 15.0, (-75.0), 40.0, 114.0, (-42.0), (-36.0), 105.0], [119.0, (-65.0), 20.0, (-45.0), 31.0, 27.0, 110.0, (-18.0), (-39.0), (-100.0)]];
    func1553(var1563[2], namedParam1555 : (UInt64(217)&127..=UInt64(111)&127:64|1))
}

public func func948(param949 : Interface120) : UInt32 { // block id: 950
    var954.var957 &&= (Option<Unit>.None|>func289);
    var var971 : Range<Int16> = (Int16(98)&127..Int16(Int8(Int8(-2)))&127:(24|1));
    if ((((39&127..12&127:(-57)|1), UInt16(79), var217, var971, 'F', var980)[4] is UInt32)) { // block id: 984
        (var987&127..=Int16(-56)&127:((-42)|1));
        let var1000 : ??Unit = Option<Option<Unit>>.Some(Option<Unit>.None);
        if (var910) { // block id: 993
            if (false) { var997 } else { var1000 } ;
            var468 + 72.0
        } else { // block id: 1006
            UInt32(207);
            -var468
        };
        Aggregate1011.var1016
    } else if (var1022[7] > var860) { // block id: 1041
        if (var32) { // block id: 1044
            if (false) { var1048 } else { (((-124)&127..=(-128)&127:(91|1)), var980, var217, (var987&127..=var987&127:(var210|1)), 'p', UInt16(232)) } ;
            var410;
            var980 <<= ((var980) & 7)
        } else if (var910) { // block id: 1097
            ();
            ();
            ()
        }
    };
    let var1491 : (Option<Option<Unit>>) -> Bool = func1104;
    let var1604 : Bool = true;
    if ((Option<Unit>.Some(())|>(func1493~>var1491))) { // block id: 1570
        var var1575 : UInt16 = UInt16(UInt16(175));
        let var1586 : Range<UInt32> = (UInt32(38)&127..=UInt32(254)&127:(-37)|1);
        try { // block id: 1572
            var1575 += UInt16(7);
            if (false) { Option<Unit>.Some(var410) } else { Option<Unit>.Some(()) } ;
            var1586
        } finally { // block id: 1588
            var154;
            (UInt32(201)&127..UInt32(246)&127:(-42)|1)
        };
        var410;
        UInt32(30)
    } else if ((((var648&127..UInt8(71)&127:(var1171|1)) as Option<Unit>)|>{ lambdaParameter1596 : Option<Option<Unit>> => match (var229) {
        case _ => 
            var1165;
            var1604
        
    } })) { // block id: 1611
        match {
            case var924 => 
            ();
            var940
            case true => 
            UInt32(33)
            case _ => 
            var332 &= UInt64(16);
            Float32(113.0);
            var940 << ((var940) & 7)
        }
    } else { // block id: 1628
        var940
    }
}



public func func1710(param1711 : (UInt8, Float64, UInt32, Class117) -> Option<Float64>, param1717 : Option<Option<Unit>>) : Unit { // block id: 1718
    var1171++
}


public func func1748(param1749 : Interface120) : Range<UInt32> { // block id: 1750
    var loopTimeVar1803 : Int64 = 0;
    do {
        loopTimeVar1803++;
        try { // block id: 1763
            var var1766 : Int32 = Int32(92);
            var1766 *= var1766;
            var804
        } catch (_) { // block id: 1770
            [Option<Unit>.Some(()), Option<Unit>.None, var750, Option<Unit>.None, var750, var750, var750, var750, Option<Unit>.None, Option<Unit>.Some(var1165)]
        } finally { // block id: 1784
            [Option<Unit>.Some(()), var750, var750, var750, var750, Option<Unit>.Some(var362), Option<Unit>.Some(var410), Option<Unit>.None, Option<Unit>.None, Option<Unit>.None]
        };
        var1800
    } while (((Option<((Int64, UInt16, Int32, String, Int32), Option<Class117>, String, Bool, Bool)>.None ?? var294)[3]) && loopTimeVar1803 < 100 ) ;
    var1805
}



func func1744(param1745 : (Range<UInt8>, Class117)) : ((Float32, Range<Int8>, Range<Int8>, UInt16, Unit, Range<UInt64>, Range<UInt16>, (Float32, Int64, Range<UInt8>, Array<Bool>, Int64, Float32, Range<Int8>, UInt32)), (Float32, Range<Int8>, Range<Int8>, UInt16, Unit, Range<UInt64>, Range<UInt16>, (Float32, Int64, Range<UInt8>, Array<Bool>, Int64, Float32, Range<Int8>, UInt32)), Unit, Option<Unit>, (Range<Int64>, UInt16, (Int64, UInt16, Int32, String, Int32), Range<Int16>, Rune, UInt16), (Range<Int64>, UInt16, (Int64, UInt16, Int32, String, Int32), Range<Int16>, Rune, UInt16), (Float32, Int64, Range<UInt8>, Array<Bool>, Int64, Float32, Range<Int8>, UInt32)) { // block id: 1746
    Class665()|>{ lambdaParameter1817 : Interface120 => let var1829 : ?Interface120 = ([Float32(49.0), Float32(Float32(Float32(-13.0))), Float32(-118.0), Float32(-100.0), Float32(-27.0), Float32(Float32(Float32(122.0))), Float32(93.0), Float32(Float32(-52.0)), Float32(Float32(Float32(31.0))), Float32(48.0)] as Interface120); (if (true) { var1829 } else { Option<Interface120>.None }  ?? (Option<Interface120>.None ?? lambdaParameter1817))|>func1748 };
    if ((if (var106) { var1863 } else { Option<Bool>.Some(var106) }  ?? (var1558|>func1104))) { try { // block id: 1871
        let var1874 : (Float32, Range<Int8>, Range<Int8>, UInt16, Unit, Range<UInt64>, Range<UInt16>, (Float32, Int64, Range<UInt8>, Array<Bool>, Int64, Float32, Range<Int8>, UInt32)) = (Float32(Float32(Float32(78.0))), (Int8(-72)&127..=Int8(-92)&127:(-35)|1), (Int8(98)&127..=Int8(2)&127:(Int64(UInt16(Int16(-72)))|1)), UInt16(Int8(95)), (), (UInt64(182)&127..UInt64(31)&127:(-22)|1), (UInt16(151)&127..=UInt16(174)&127:99|1), (Float32(Float32(Float32(3.0))), (-54), (UInt8(76)&127..UInt8(139)&127:46|1), [false, false, false, false, true, false, false, false, true, true], 99, Float32(-15.0), (Int8(15)&127..=Int8(Int8(66))&127:(Int64(Int32(-53))|1)), UInt32(114)));
        var var1913 : Unit = ();
        var var1949 : Bool = ((UInt8(29)&127..=UInt8(251)&127:(Int64(UInt64(121))|1)) is Option<Unit>);
        (var1874, (var860, (Int8(-97)&127..=Int8(-72)&127:65|1), var937, var980, var1913, var1283, (UInt16(91)&127..=UInt16(125)&127:(-4)|1), var863), var410, Option<Unit>.Some(()), (((-110)&127..(-66)&127:(-42)|1), UInt16(184), var217, var1926, 'C', UInt16(193)), var1048, (Float32(14.0), var1171, (UInt8(182)&127..=var648&127:(41|1)), [var924, var924, var910, var924, var910, var32, var910, false, var32, var1949], var210, Float32(-123.0), (var354&127..=var1155&127:(var1962|1)), var940))
    } finally { // block id: 1965
        var1967;
        let var1991 : ((Float32, Range<Int8>, Range<Int8>, UInt16, Unit, Range<UInt64>, Range<UInt16>, (Float32, Int64, Range<UInt8>, Array<Bool>, Int64, Float32, Range<Int8>, UInt32)), (Float32, Range<Int8>, Range<Int8>, UInt16, Unit, Range<UInt64>, Range<UInt16>, (Float32, Int64, Range<UInt8>, Array<Bool>, Int64, Float32, Range<Int8>, UInt32)), Unit, Option<Unit>, (Range<Int64>, UInt16, (Int64, UInt16, Int32, String, Int32), Range<Int16>, Rune, UInt16), (Range<Int64>, UInt16, (Int64, UInt16, Int32, String, Int32), Range<Int16>, Rune, UInt16), (Float32, Int64, Range<UInt8>, Array<Bool>, Int64, Float32, Range<Int8>, UInt32)) = ((Float32(Float32(-113.0)), (Int8(59)&127..=Int8(4)&127:((-70)|1)), (Int8(49)&127..Int8(-71)&127:99|1), UInt16(UInt8(Int8(4))), (), (UInt64(Int8(-81))&127..=UInt64(Int16(-76))&127:(Int64(UInt8(90))|1)), (UInt16(160)&127..=UInt16(253)&127:82|1), (Float32(Float32(46.0)), Int64(UInt64(25)), (UInt8(237)&127..UInt8(125)&127:(97|1)), [true, false, true, false, true, true, true, false, true, false], 3, Float32(Float32(-32.0)), (Int8(-56)&127..=Int8(57)&127:(-121)|1), UInt32(Int32(91)))), (Float32(Float32(77.0)), (Int8(23)&127..=Int8(72)&127:(-53)|1), (Int8(-73)&127..Int8(60)&127:(-106)|1), UInt16(129), (), (UInt64(53)&127..UInt64(222)&127:(47|1)), (UInt16(Int8(-44))&127..=UInt16(Int16(-86))&127:(Int64((-90))|1)), (Float32(Float32(45.0)), Int64(UInt64(105)), (UInt8(218)&127..UInt8(45)&127:102|1), [true, true, false, true, false, false, true, true, true, false], (-37), Float32(31.0), (Int8(54)&127..Int8(-92)&127:(87|1)), UInt32(172))), (), Option<Unit>.None, ((94&127..=Int64(UInt32(131))&127:(Int64(Int32(-36))|1)), UInt16(74), ((-19), UInt16(UInt16(23)), Int32(UInt8(77)), ###"P*b7I1fDiC"###, Int32(-21)), (Int16(93)&127..Int16(-42)&127:116|1), 'D', UInt16(Int16(Int8(101)))), (((-105)&127..Int64(Int16(-107))&127:((-120)|1)), UInt16(150), (46, UInt16(155), Int32(36), "le,a{nCTqoS", Int32(UInt32(207))), (Int16(Int16(48))&127..Int16(-103)&127:(Int64(Int32(3))|1)), 'Z', UInt16(UInt8(7))), (Float32(Float32(63.0)), 4, (UInt8(Int8(13))&127..=UInt8(125)&127:(Int64(Int32(-59))|1)), [true, true, true, true, false, true, false, true, true, true], 28, Float32(Float32(56.0)), (Int8(-30)&127..=Int8(78)&127:(Int64(UInt16(238))|1)), UInt32(127)));
        if (true) { var1991 } else { var1991 } 
    } } else { var2139 } 
}

public func func1738(param1739 : Array<Option<Unit>>) : Option<Unit> { // block id: 1740
    let var2329 : ((Range<UInt8>, Class117)) -> ((Float32, Range<Int8>, Range<Int8>, UInt16, Unit, Range<UInt64>, Range<UInt16>, (Float32, Int64, Range<UInt8>, Array<Bool>, Int64, Float32, Range<Int8>, UInt32)), (Float32, Range<Int8>, Range<Int8>, UInt16, Unit, Range<UInt64>, Range<UInt16>, (Float32, Int64, Range<UInt8>, Array<Bool>, Int64, Float32, Range<Int8>, UInt32)), Unit, Option<Unit>, (Range<Int64>, UInt16, (Int64, UInt16, Int32, String, Int32), Range<Int16>, Rune, UInt16), (Range<Int64>, UInt16, (Int64, UInt16, Int32, String, Int32), Range<Int16>, Rune, UInt16), (Float32, Int64, Range<UInt8>, Array<Bool>, Int64, Float32, Range<Int8>, UInt32)) = func1744;
    ((var2333, var154)|>var2329)[3]
}

public func func1733(param1734 : Option<Option<Option<Float64>>>, param1735 : Array<Option<Float64>>) : Option<Option<Float64>> { // block id: 1736
    var var2343 : (Array<Option<Unit>>) -> Option<Unit> = func1738;
    var804|>var2343;
    let var2399 : (Array<Float64>, Array<UInt8>, Array<Float64>, Aggregate1011) = ([112.0, 96.0, Float64(Float32(-10.0)), Float64(Float32(-116.0)), (-88.0), Float64(100.0), (-96.0), 34.0, Float64(Float32(Float32(65.0))), 23.0], [UInt8(UInt8(222)), UInt8(UInt8(UInt8(118))), UInt8(UInt8(UInt8(139))), UInt8(224), UInt8(UInt8(UInt8(170))), UInt8(Int8(125)), UInt8(253), UInt8(Int8(-7)), UInt8(62), UInt8(136)], [Float64(Float32(Float32(-82.0))), Float64(6.0), 95.0, 96.0, Float64(Float64(79.0)), 40.0, (-37.0), Float64(Float32(Float32(-20.0))), Float64(Float32(Float32(84.0))), Float64(Float64((-46.0)))], Aggregate1011(namedParam2464 : [Float32(53.0), Float32(Float32(-5.0)), Float32(Float32(34.0)), Float32(Float32(-102.0)), Float32(-14.0), Float32(1.0), Float32(-107.0), Float32(Float32(-128.0)), Float32(-119.0), Float32(Float32(75.0))], namedParam2465 : (Int8(-43)&127..=Int8(-111)&127:(-111)|1)));
    try { // block id: 2349
        ([113.0, var468, (-62.0), 20.0, 4.0, var468, var468, (-10.0), 65.0, var468], [UInt8(248), UInt8(67), UInt8(211), UInt8(106), UInt8(168), UInt8(145), UInt8(190), UInt8(67), UInt8(229), UInt8(211)], var1967, Aggregate1011())
    } catch (_) { // block id: 2365
        var var2368 : ?Float64 = ((-89.0) as Float64);
        [var2368, Option<Float64>.Some(var468), Option<Float64>.None, var2368, var2368, var2368, Option<Float64>.Some(113.0), Option<Float64>.Some(var2381), var2368, var2368];
        [var2368, Option<Float64>.None, Option<Float64>.Some(var468), var2368, var2368, Option<Float64>.Some(1.0), var2368, Option<Float64>.None, var2368, var2368];
        var2399
    }[3];
    try { // block id: 2648
        let var2651 : Aggregate1011 = Aggregate1011();
        match (var2651) {
            case _ => 
                var1234;
                var2502 |= Int16(79);
                var1531
            
        }
    } finally { // block id: 2660
        Option<Option<Float64>>.None
    }
}



public func func1730() : Interface121 { // block id: 1731
    var var2870 : Int64 = Int64(Int32(UInt16(Int16(Int8(-52)))));
    let var3030 : Array<Option<Float64>> = Array<Option<Float64>>(10){ i => Option<Float64>.None };
    func1733(match ((var2669 ?? 'G')) {
        case caseVar2681 : (Range<UInt8>, Class117) => 
            if (true) { [var750, var750, var750, Option<Unit>.Some(()), Option<Unit>.None, var750, var750, Option<Unit>.None, var2696, var2696] } else { [var2696, var2696, Option<Unit>.Some(var2704), var2696, var750, var750, Option<Unit>.None, var2696, Option<Unit>.Some(var410), Option<Unit>.Some(())] } ;
            var1171 <<= ((69) & 7);
            Option<Option<Option<Float64>>>.Some(Option<Option<Float64>>.None)
        
        case '8' => 
            Option<Float64>.Some(var2725);
            var997;
            var1516
        
        case caseVar2732 : Array<Array<Float64>> => 
            var var2859 : Bool = (Float32(-16.0) is Option<Int32>);
            let var2879 : UInt32 = UInt32(144);
            if (var106) { var2139 } else { ((Float32(-83.0), (Int8(23)&127..=Int8(-16)&127:102|1), (Int8(31)&127..Int8(-42)&127:97|1), var980, var1165, (var332&127..var332&127:((-16)|1)), var1177, var863), var2751, (), Option<Unit>.None, (((-98)&127..=var1171&127:(var210|1)), UInt16(224), var217, (Int16(-23)&127..=Int16(86)&127:(-70)|1), var2844, UInt16(7)), var1048, (var860, var210, (UInt8(93)&127..UInt8(189)&127:(var210|1)), [false, var910, var2859, var924, var32, var924, var910, true, false, var910], var2870, var860, var937, var2879)) } ;
            if (var106) { var755 } else { var755 } ;
            var1516
        
        case 'q' | 'h' | '9' => 
            (var210&127..84&127:((-54)|1));
            var1516
        
        case _ => 
            var1516
        
    }, try { // block id: 2898
        var var2903 : ?Float64 = ((((Option<Bool>.None as (Float32, Int64, Range<UInt8>, Array<Bool>, Int64, Float32, Range<Int8>, UInt32)) as Class117), UInt64(248)) as Float64);
        [Option<Float64>.Some(var468), var2903, Option<Float64>.None, var2903, Option<Float64>.Some(var468), Option<Float64>.None, Option<Float64>.Some(var2381), Option<Float64>.Some(122.0), var2903, var2903]
    } catch (_) { // block id: 2921
        var860;
        let var2942 : ?Float64 = Option<Float64>.Some((-97.0));
        if (var910) { [Option<Float64>.None, var2928, Option<Float64>.Some(68.0), var2928, Option<Float64>.None, Option<Float64>.None, var2928, Option<Float64>.Some(var2381), var2928, Option<Float64>.None] } else { [var2942, Option<Float64>.None, var2928, var2928, Option<Float64>.Some((-127.0)), Option<Float64>.None, var2928, Option<Float64>.None, Option<Float64>.Some(28.0), Option<Float64>.Some((-2.0))] } 
    } finally { // block id: 2957
        var var2964 : Interface120 = Class117();
        if (var32) { Option<Interface120>.Some(Class117()) } else { Option<Interface120>.Some(var2964) } ;
        var var2985 : (Float32, Int64, Range<UInt8>, Array<Bool>, Int64, Float32, Range<Int8>, UInt32) = (Float32(-22.0), 92, (UInt8(UInt8(Int8(-71)))&127..UInt8(Int8(-52))&127:((-34)|1)), [(Option<Option<Unit>>.Some(Option<Unit>.Some(())) is Option<Class117>), false, false, true, true, (Class665() is (Array<Float64>, Array<UInt8>, Array<Float64>, Aggregate1011)), false, (Option<Option<Option<Unit>>>.Some(Option<Option<Unit>>.Some(Option<Unit>.Some(()))) is Option<UInt64>), ((Int16(-104)&127..Int16(-99)&127:(-45)|1) is Option<Option<Int32>>), (Aggregate1011() is Float32)], Int64(Int64(Int8(UInt8(111)))), Float32(-30.0), (Int8(-2)&127..Int8(79)&127:((-68)|1)), UInt32(184));
        if (true) { var2751 } else { (var860, var937, (Int8(-106)&127..var2975&127:(var210|1)), UInt16(66), (), var1283, (UInt16(9)&127..=UInt16(120)&127:33|1), var2985) } ;
        if (var106) { var3030 } else { [Option<Float64>.Some(122.0), Option<Float64>.Some(var468), Option<Float64>.Some(1.0), var2928, Option<Float64>.Some(var468), var2928, var2928, var3076, Option<Float64>.None, var3076] } 
    });
    if ((Option<Bool>.Some(false) ?? UInt8(103) > UInt8(129))) { (var3095[3] ?? (Option<Interface121>.None ?? var1678)) } else { match (var217) {
        case (caseVar3217,_,caseVar3218 : Range<UInt8>,caseVar3219 : UInt64,_ : (Option<Class117>, UInt64)) => 
            if (var32) { Class665() } else { var1678 } 
        
        case (_,_,caseVar3227 : UInt64,_ : Option<Option<Option<Float64>>>,caseVar3228 : (Array<Float64>, Array<UInt8>, Array<Float64>, Aggregate1011)) => 
            if (var106) { var3233 } else { Option<Option<Option<Unit>>>.None } ;
            if (true) { var1678 } else { var1678 } 
        
        case (_ : ((Int64, UInt16, Int32, String, Int32), Option<Class117>, String, Bool, Bool),caseVar3242,caseVar3243 : Int32,_,_) => 
            var362;
            (UInt8(152)&127..=var648&127:(var1171|1));
            if (var32) { var1678 } else { Class665() } 
        
        case _ => 
            var1678
        
    } } 
}



public func func1701(param1702 : Class117) : Option<Option<Int32>> { // block id: 1703
    func func1707() : UInt64 { // block id: 1708
        func1710({ lambdaParameter1723 : UInt8, lambdaParameter1724 : Float64, lambdaParameter1725 : UInt32, lambdaParameter1726 : Class117 => match (func1730()) {
            case _ => 
                var1863;
                var var3262 : Bool = (Float64(Float64(83.0)) is Array<Option<Unit>>);
                if (var3262) { var2928 } else { var3076 } 
            
        } }, (match (Option<Bool>.Some(true)) {
            case caseVar3279 => 
                var410;
                var94;
                Option<Option<Option<Unit>>>.None
            
            case _ => 
                var94 %= ((Int32(74)) | 1);
                if (var106) { var2494 } else { Option<(Float32, Int64, Range<UInt8>, Array<Bool>, Int64, Float32, Range<Int8>, UInt32)>.Some(var863) } ;
                Option<Option<Option<Unit>>>.None
            
        } ?? Option<Option<Unit>>.Some(Option<Unit>.None)));
        UInt64(56)
    }
;
    if ((func1707() != if (var32) { // block id: 3300
        if (true) { Option<Option<Option<Float64>>>.Some(var1531) } else { Option<Option<Option<Float64>>>.Some(var1531) } ;
        Int32(-5);
        UInt64(139)
    } else { // block id: 3309
        var332
    })) { (if ((Option<Class117>.Some(Class117()) is Range<UInt32>)) { (var3321 ?? Option<Option<Int32>>.None) } else { Option<Option<Int32>>.None } ) } else { (var1531 as Option<Int32>) } 
}

public func func737(param738 : Int64) : Int32 { // block id: 739
    match {
        case match ((Option<Option<Unit>>.Some(Option<Unit>.None) ?? var750)) {
        case _ => 
            var755;
            var var760 : UInt16 = UInt16(Int16(83));
            ((-55), var760, Int32(-77), "uk.7a{mM^]+", var94);
            false
        
    } => 
        let var775 : (Float32, Int64, Range<UInt8>, Array<Bool>, Int64, Float32, Range<Int8>, UInt32) = (Float32(-120.0), 12, (UInt8(116)&127..=UInt8(Int8(UInt8(207)))&127:(1|1)), [true, true, true, false, false, true, true, true, true, false], 24, Float32(Float32(118.0)), (Int8(-70)&127..=Int8(Int8(-115))&127:(Int64(UInt8(179))|1)), UInt32(UInt8(UInt8(Int8(24)))));
        (Option<(Float32, Int64, Range<UInt8>, Array<Bool>, Int64, Float32, Range<Int8>, UInt32)>.Some(var775) ?? var775)
        case func289(var804[7]) => 
        try { // block id: 857
            Option<Option<Unit>>.None;
            var860;
            var863
        } catch (e: Exception) { // block id: 897
            var863
        }
        case _ => 
        try { // block id: 901
            if (var106) { var863 } else { var863 } 
        } finally { // block id: 906
            Float32(-120.0);
            if (var910) { var863 } else { (Float32(-83.0), (-96), (var648&127..=UInt8(79)&127:(param738|1)), [true, false, var924, true, true, false, false, var910, true, var106], var210, var860, var937, var940) } 
        }
    };
    var var1631 : (Interface120) -> UInt32 = func948;
    var loopTimeVar1682 : Range<UInt64> = (UInt64(51)&127..UInt64(Int16(UInt8(Int8(-65))))&127:((-43)|1));
    for (i in loopTimeVar1682 where UInt32(var94) != (Class117()|>var1631)) {
        try (resource = Class117()) { // block id: 1636
            var980;
            if (false) { (UInt32(123)&127..=UInt32(247)&127:(-13)|1) } else { (UInt32(146)&127..=UInt32(53)&127:((-28)|1)) } ;
            ()
        } finally { // block id: 1646
            (Int8(-31)&127..=Int8(34)&127:118|1);
            (Float32(30.0), (Int8(90)&127..Int8(58)&127:((-67)|1)), (var1155&127..var354&127:(111|1)), var980, var410, var1283, (var980&127..=UInt16(207)&127:(122|1)), var863);
            var980 *= UInt16(0)
        };
        match (var32) {
            case _ => 
                Option<(Option<Class117>, UInt64)>.Some(var502);
                if (var106) { var1678 } else { var1678 } ;
                ()
            
        }
    };
    let var3333 : (Class117) -> Option<Option<Int32>> = func1701;
    (((Class665()|>var3333) ?? var3337) ?? var94)
}


public func func693(param694 : String) : (Range<UInt8>, Class117) { // block id: 695
    Class665.func699(try { // block id: 3596
        var987
    } catch (_) { // block id: 3598
        ();
        var987 + Int16(53)
    } finally { // block id: 3603
        var332;
        Int16(-52) ** (Int16(-69) & 3)
    }, match (Option<Option<Int32>>.Some(var3337)) {
        case caseVar3613 : Option<(Option<Class117>, UInt64)> => 
            var3076
        
        case _ : (Option<Class117>, UInt64) => 
            if (false) { Option<Rune>.Some(var2844) } else { Option<Rune>.None } ;
            var var3625 : Array<Bool> = [true, false, false, true, false, true, false, false, true, true];
            var3625;
            Option<Float64>.None
        
        case caseVar3630 : Option<Class117> => 
            if (var32) { var2928 } else { Option<Float64>.None } 
        
        case _ => 
            var410;
            var3640;
            var2928
        
    }, namedParam702 : match {
        case var32 => 
        UInt16(4)
        case true => 
        ();
        var980
        case _ => 
        UInt16(99)
    })
}


public func func3770(param3771 : Int32) : String { // block id: 3772
    (var3779 ?? try { // block id: 3783
        """
U[.wA
3:.jQ
"""
    } finally { // block id: 3785
        if (false) { """
BEmI5
J~BPx
""" } else { var229 } 
    })
}

public func func616(param617 : Option<UInt64>, param618 : String, param619 : Unit, optionalParam620 ! : Range<UInt32> = (UInt32(245)&127..=UInt32(Int8(55))&127:((-72)|1))) : Class117 { // block id: 626
    let var3768 : (String) -> (Range<UInt8>, Class117) = func693;
    (if (false) { // block id: 3793
        ();
        Int32(-21)
    } else if (var32) { // block id: 3797
        param618;
        Int32(-115) & var94
    } else { // block id: 3802
        var var3805 : Int32 = Int32(-68);
        var3805 &= Int32(-66);
        Int32(-43)
    }|>(func3770~>var3768))[1]
}



public func func495(param496 : Array<Float64>) : Bool { // block id: 497
    match (try { // block id: 500
            var502
        } catch (e: Exception) { // block id: 507
            var410;
            var376;
            (Option<Class117>.Some(var154), UInt64(184))
        } finally { // block id: 514
            var516
        }) {
        case _ : Int64 => 
            var362;
            ();
            var94
        
        case _ => 
            ();
            var var531 : Int64 = 78;
            var531 ^= 90;
            var94 << ((var94) & 7)
        
    };
    var var543 : UInt8 = UInt8(203);
    var var611 : Int64 = Int64(Int16(-38));
    match (try { // block id: 539
            var410;
            (var543&127..=var543&127:(var210|1))
        } catch (_) { // block id: 547
            var21;
            var362;
            (UInt8(187)&127..=UInt8(120)&127:(var210|1))
        } finally { // block id: 554
            let var561 : UInt16 = UInt16(205);
            if (var106) { var217 } else { (24, var561, var94, """
?Lm@8
&8+ky
""", Int32(-2)) } ;
            (UInt8(95)&127..=UInt8(101)&127:48|1)
        }) {
        case caseVar569 : Bool => 
            var32 ||= var106
        
        case caseVar576 => 
            if (var32) { var229 } else { "'1EwLu8,v;" } ;
            var354 |= var354
        
        case caseVar587 : Int16 => 
            var var590 : Array<Bool> = Array<Bool>(10){ i => (UInt64(220) is Option<Class117>) };
            var590;
            var362
        
        case _ => 
            var362;
            var468;
            var611--
        
    };
    let var3927 : (Array<Option<Unit>>) -> Option<Unit> = func1738;
    func616((var3321 as UInt64), "4b\\4q~|tkC", if (var32) { // block id: 3815
        ();
        var3818
    }, optionalParam620 : (UInt32(245)&127..var940&127:(var611|1))).func3825(namedParam3826 : var3927)
}

func func3930(param3931 : Option<Unit>) : Array<Float64> { // block id: 3932
    var var3945 : Int64 = 3;
    var var3970 : UInt64 = UInt64(UInt32(UInt32(126)));
    try { // block id: 3934
        var loopTimeVar3948 : Int64 = 0;
        while ((true) && loopTimeVar3948 < 100 ) {
            loopTimeVar3948++;
            if (var924) { (Int16(-104)&127..=Int16(-56)&127:89|1) } else { (Int16(-114)&127..=var2502&127:(var3945|1)) } 
        };
        let var3955 : ?Interface121 = Option<Interface121>.None;
        try { // block id: 3950
            Option<Interface121>.Some(Class665())
        } finally { // block id: 3953
            var3955
        }
    } catch (_) { // block id: 3957
        match (var3960) {
            case _ => 
                var2502 -= var2502;
                var3970 &= UInt64(198)
            
            case caseVar3977 => 
                var var3980 : Range<Int8> = (Int8(58)&127..Int8(-65)&127:(-36)|1);
                var3980;
                var1800
            
            case caseVar3985 => 
                ();
                ()
            
            case caseVar3991 => 
                var1863;
                var502;
                ()
            
            case _ => 
                ();
                ();
                var362
            
        };
        let var4007 : ?Interface121 = Option<Interface121>.None;
        try { // block id: 4002
            if (true) { Option<Interface121>.None } else { var4007 } 
        } catch (_) { // block id: 4009
            var var4011 : (Array<Float64>, Array<UInt8>, Array<Float64>, Aggregate1011) = ([120.0, Float64(Float32(Float32(94.0))), 19.0, Float64(Float32(59.0)), Float64(Float32(Float32(-16.0))), 63.0, Float64(Float32(Float32(-64.0))), Float64(Float64(11.0)), (-101.0), (-23.0)], [UInt8(221), UInt8(223), UInt8(247), UInt8(38), UInt8(5), UInt8(185), UInt8(194), UInt8(124), UInt8(75), UInt8(40)], [(-39.0), 118.0, (-53.0), 59.0, 108.0, (-112.0), (-21.0), (-103.0), (-106.0), (-29.0)], Aggregate1011(namedParam2464 : [Float32(-40.0), Float32(-48.0), Float32(-100.0), Float32(95.0), Float32(Float32(-11.0)), Float32(-105.0), Float32(38.0), Float32(-7.0), Float32(Float32(-119.0)), Float32(123.0)], namedParam2465 : (Int8(-91)&127..=Int8(Int8(-124))&127:((-55)|1))));
            var4011;
            if (var924) { var4007 } else { var4007 } 
        }
    } finally { // block id: 4058
        if (var924) { // block id: 4061
            Int16(-102)
        } else if (var106) { // block id: 4064
            var2975 ^= var2975;
            [false, true, false, true, true, false, false, false, false, false];
            Int16(-124) | Int16(-101)
        } else { // block id: 4072
            Int16(93)
        };
        var loopTimeVar4077 : Range<UInt64> = (UInt64(248)&127..UInt64(247)&127:(Int64(UInt16(Int8(UInt8(42))))|1));
        for (i in loopTimeVar4077 where true) {

        };
        (var1048 as Interface121)
    };
    (UInt8(77)&127..UInt8(202)&127:(-33)|1);
    [60.0, 32.0, (-28.0), (-102.0), (-4.0), (-54.0), (-64.0), 126.0, 124.0, (-96.0)]
}

public func func488(namedParam489 ! : Array<Bool>, namedParam490 ! : Option<Class117>) : Float64 { // block id: 491
    var var4090 : (Option<Unit>) -> Array<Float64> = func3930;
    var var4099 : UInt32 = UInt32(142);
    var loopTimeVar4103 : Int64 = 0;
    while (((if (var106) { var2696 } else { var2696 } |>(var4090~>func495))) && loopTimeVar4103 < 100 ) {
        loopTimeVar4103++;
        var4099++;
        ()
    };
    try { // block id: 4105
        let var4120 : Class665 = Class665();
        match (var437) {
            case _ => 
                var954
            
            case caseVar4114 : Range<Int8> => 
                var332 ^= UInt64(68);
                var4120
            
            case _ => 
                Option<Int8>.Some(Int8(-46));
                var2975 /= ((var2975) | 1);
                if (true) { Class665() } else { Class665() } 
            
        };
        var2381
    } finally { // block id: 4134
        (Option<Unit>.Some(()) ?? var1165);
        match (var3779) {
            case _ => 
                if (var32) { var65 } else { Option<Bool>.Some(true) } ;
                if (var924) { var937 } else { var937 } 
            
        };
        try { // block id: 4153
            var468
        } catch (e: Exception) { // block id: 4155
            var32 ||= var924;
            29.0
        }
    }
}

public func func406(param407 : (Option<Class117>, UInt64)) : UInt32 { // block id: 408
    var410;
    let var461 : ?Float64 = Option<Float64>.Some(87.0);
    func func427() : Option<Float64> { // block id: 428
        (try { // block id: 435
            var437;
            Option<Option<Unit>>.None
        } catch (e: Exception) { // block id: 440
            let var442 : Float64 = (-106.0);
            var442;
            Option<Option<Unit>>.Some(Option<Unit>.None)
        } ?? try { // block id: 447
            var362;
            ();
            Option<Unit>.Some(var410)
        } catch (e: Exception) { // block id: 452
            Option<Unit>.None
        } finally { // block id: 454
            var410;
            if (var106) { Option<Unit>.None } else { Option<Unit>.None } 
        });
        var461
    }
;
    let var4232 : Option<Option<Option<Unit>>> = Option<Option<Option<Unit>>>.Some(Option<Option<Unit>>.Some((Float32(-122.0) as Unit)));
    func func414(param415 : Option<Bool>, optionalParam416 ! : Option<(Option<Class117>, UInt64)> = ((42&127..=65&127:(-18)|1) as (Option<Class117>, UInt64))) : Class117 { // block id: 419
        let var479 : Float64 = Float64(Float64(Float32(-30.0)));
        (func427() ?? [var468, var468, var468, (-95.0), var468, (-110.0), var479, (-40.0), var479, (-60.0)][1]) - func488(namedParam489 : match (var3835) {
            case _ : Range<Int64> => 
                [true, false, false, true, true, true, true, true, true, true]
            
            case _ => 
                [false, false, true, true, true, true, true, true, false, false]
            
            case _ : Class117 => 
                if (false) { Option<Int32>.None } else { Option<Int32>.Some(Int32(-9)) } ;
                var1155 &= Int8(-68);
                if (var106) { var4184 } else { [false, true, true, false, false, false, true, true, false, false] } 
            
            case _ => 
                if (var32) { (var1221, var217) } else { var1475 } ;
                var362;
                if (true) { var4184 } else { [var910, false, false, true, var32, true, var924, var910, false, var106] } 
            
        }, namedParam490 : try { // block id: 4211
            Option<Class117>.None
        } catch (e: Exception) { // block id: 4213
            var var4216 : UInt8 = UInt8(Int8(-37));
            var4216--;
            (UInt8(238)&127..UInt8(247)&127:(-105)|1);
            var755
        } finally { // block id: 4221
            Option<Class117>.None
        });
        var var4247 : UInt8 = UInt8(UInt8(UInt8(UInt8(221))));
        try { // block id: 4224
            match (var2844) {
                case _ => 
                    if (var106) { var4232 } else { var4232 } ;
                    ();
                    var755
                
            };
            var1022
        } catch (e: Exception) { // block id: 4241
            var loopTimeVar4255 : Int64 = 0;
            while ((var910) && loopTimeVar4255 < 100 ) {
                loopTimeVar4255++;
                var4247 /= ((var648) | 1);
                Class665()
            };
            var1022
        };
        var154
    }
;
    func414(var65, optionalParam416 : match (var1221) {
        case _ : Range<UInt32> => 
            var var4305 : Range<Int16> = (Int16(-51)&127..=Int16(-4)&127:(-44)|1);
            (var2751, (var860, (Int8(125)&127..Int8(72)&127:(-112)|1), (Int8(-82)&127..=Int8(39)&127:38|1), var980, var1165, (UInt64(247)&127..UInt64(198)&127:(var210|1)), (UInt16(4)&127..=UInt16(96)&127:(var210|1)), (var860, 43, (UInt8(118)&127..=UInt8(85)&127:(-40)|1), [true, false, true, true, false, true, true, false, false, true], 69, var860, (var2975&127..var1155&127:(var1171|1)), var940)), (), Option<Unit>.Some(var3818), (((-75)&127..=57&127:57|1), UInt16(42), (var1171, var980, Int32(-93), var229, Int32(29)), var4305, var2844, UInt16(22)), var1048, (var4312, var4319, var2333, [var32, true, true, false, true, true, var106, true, false, var106], var4334, Float32(97.0), (var354&127..=Int8(65)&127:(var210|1)), var940));
            var924 &&= true;
            Option<(Option<Class117>, UInt64)>.Some(param407)
        
        case _ : (Range<Int64>, UInt16, (Int64, UInt16, Int32, String, Int32), Range<Int16>, Rune, UInt16) => 
            var1165;
            Option<Option<Float64>>.None;
            Option<(Option<Class117>, UInt64)>.None
        
        case _ => 
            ();
            var var4359 : Int32 = Int32(74);
            var4359++;
            Option<(Option<Class117>, UInt64)>.None
        
    }).func4363(namedParam4364 : func1104, namedParam4367 : (var2696 as Option<Option<Float64>>), namedParam4370 : Int16(-59) % ((Int16(99)) | 1))
}



public func func400(namedParam401 ! : Enum18, optionalParam402 ! : Class117 = Class117()) : Option<UInt64> { // block id: 404
    ((Option<Option<(Option<Class117>, UInt64)>>.None ?? var4456) ?? if (var106) { // block id: 4463
        ();
        ();
        (var755, var332)
    } else { // block id: 4469
        var var4471 : Range<Int8> = (Int8(UInt8(Int8(120)))&127..Int8(52)&127:((-11)|1));
        var4471;
        if (false) { var1305 } else { [var3076, Option<Float64>.None, Option<Float64>.None, var3076, var2928, Option<Float64>.None, var2928, Option<Float64>.None, var3076, Option<Float64>.Some(124.0)] } ;
        var516
    })|>func406;
    try (resource = Class117()) { // block id: 4495
        var410
    } finally { // block id: 4497
        var1800;
        var var4508 : Range<UInt16> = (UInt16(152)&127..=UInt16(195)&127:(-76)|1);
        var loopTimeVar4511 : Range<UInt64> = (UInt64(UInt32(29))&127..UInt64(238)&127:((-101)|1));
        for (i in loopTimeVar4511 where var910) {
            var980 <<= ((var980) & 7);
            if (false) { var4508 } else { (UInt16(240)&127..UInt16(56)&127:(-124)|1) } 
        }
    };
    let var4543 : Float64 = 76.0;
    if (if (try { // block id: 4520
        if (var910) { var217 } else { var217 } ;
        var3818;
        false
    } catch (_) { // block id: 4527
        true
    } finally { // block id: 4529
        false
    }) { // block id: 4531
        UInt64(9) <= UInt64(113)
    } else { // block id: 4535
        var502;
        ();
        false
    }) { (if ((88.0 > var4543)) { Option<UInt64>.None } else { match (var937) {
        case _ => 
            var2725 %= Float64((Int32(49.0)) | 1);
            var1389
        
        case caseVar4557 : UInt16 => 
            if (true) { (Int8(21)&127..=Int8(-47)&127:(var4334|1)) } else { (var1155&127..=Int8(-51)&127:(var4569|1)) } ;
            var1389
        
        case _ : Array<Unit> => 
            ();
            Option<UInt64>.None
        
        case _ => 
            ();
            var1389
        
    } } ) } else { try { // block id: 4582
        var354 *= var354;
        [false, false, true, true, false, true, true, true, true, true];
        var4588
    } finally { // block id: 4591
        if (var106) { var3888 } else { var3888 } ;
        if (false) { var4588 } else { var4588 } 
    } } 
}

public func func367(param368 : Interface121) : (Option<Class117>, UInt64) { // block id: 369
    func func393(param394 : (Int64, UInt16, Int32, String, Int32)) : (Option<Class117>, UInt64) { // block id: 395
        var362;
        try (resource = Class117()) { // block id: 398
            func400(namedParam401 : Enum18.defaultValue, optionalParam402 : Class665());
            (Option<Interface121>.Some(param368) as Option<Option<Unit>>);
            try (resource = Class117()) { // block id: 4606

            } catch (_) { // block id: 4607
                var332++;
                var3095;
                ()
            }
        } catch (e: Exception) { // block id: 4612
            var2704
        } finally { // block id: 4614
            match (var1558) {
                case caseVar4619 => 
                    if (var924) { Enum18.defaultValue } else { Enum18.defaultValue } 
                
                case _ => 
                    Enum18.defaultValue
                
            };
            ();
            (var750 ?? ())
        };
        var516
    }
;
    (var376 ?? if ([true, false, false, false, false, false, true, false, true, false][8]) { func393((var1962, UInt16(218), Int32(84), "RF<?h>+upj", var94)) } else { (var376 ?? var516) } )
}



public func func314(param315 : Option<Bool>) : Bool { // block id: 316
    var var322 : Int16 = Int16(-84);
    (((Int16(-113) * var322) as Unit) ?? match ((Option<UInt64>.Some(var332) ?? var332)) {
        case _ : Interface120 => 
            ()
        
        case _ : Rune => 
            ()
        
        case _ => 
            var322 = Int16(61)
        
        case 248 => 
            var354;
            ()
        
        case _ => 
            ();
            ();
            var362
        
    });
    (Class665()|>func367)[0];
    var var4690 : ?Bool = (Option<Int32>.None as Bool);
    (match ((var4657 ?? ([var3818, (), (), (), (), (), (), (), (), var3818], (var4673, UInt16(170), var94, var229, Int32(116))))) {
        case (caseVar4685 : Array<Unit>,(_,caseVar4686 : Option<Rune>,_ : Bool,_ : Option<Option<Option<Int32>>>,caseVar4687)) => 
            var4690
        
        case (caseVar4695,caseVar4696 : Option<Option<Unit>>) => 
            ();
            var94 /= ((Int32(-31)) | 1);
            var4690
        
        case _ => 
            var4690
        
    } ?? match {
        case true => 
        var910
        case UInt32(210) != UInt32(138) => 
        ();
        (-63) < var1962
        case _ => 
        true
    })
}

public func func4723(param4724 : Option<Unit>) : Option<Bool> { // block id: 4725
    var var4759 : UInt32 = UInt32(96);
    if (((var2381 - var2381) <= match ((Float32(53.0), var4569, var2333, var4184, 24, var860, (var354&127..var4742&127:((-87)|1)), var940)) {
        case (_ : (Array<Unit>, (Int64, UInt16, Int32, String, Int32)),caseVar4748,_ : Array<Float64>,_,_ : Option<Rune>,_ : Option<Option<Int32>>,_,caseVar4749 : Range<Int64>) => 
            (-45.0)
        
        case caseVar4754 => 
            Int16(5);
            var4759 ^= var4759;
            (-108.0) - var2381
        
        case _ => 
            Int32(-51);
            if (var106) { var65 } else { var437 } ;
            var2381 / Float64((Int32(120.0)) | 1)
        
    })) { var437 } else { try { // block id: 4777
        if (var910) { var65 } else { var65 } 
    } catch (e: Exception) { // block id: 4782
        var65
    } } ;
    var var4849 : Float32 = Float32(-112.0);
    var4312 = if (match (Option<Bool>.Some(var924)) {
        case _ : Array<UInt8> => 
            if (false) { [(-57.0), 73.0, (-38.0), 69.0, var468, (-95.0), (-67.0), var4804, (-108.0), (-90.0)] } else { [(-103.0), 100.0, (-28.0), (-23.0), (-95.0), (-38.0), 123.0, (-48.0), 76.0, 113.0] } ;
            true
        
        case _ : UInt16 => 
            var106
        
        case _ => 
            ();
            var410;
            var106
        
    }) { // block id: 4819
        ();
        Float32(116.0)
    } else if (try { // block id: 4823
        true
    } catch (_) { // block id: 4825
        var3818;
        if (var924) { var954 } else { Class665() } ;
        false
    } finally { // block id: 4832
        if (var4835) { var154 } else { var154 } ;
        var4835 || true
    }) { // block id: 4842
        var437;
        var1234;
        var860
    } else { // block id: 4846
        var1863;
        var4849
    };
    let var4880 : ?(Option<Class117>, UInt64) = Option<(Option<Class117>, UInt64)>.Some((Option<Class117>.Some(Class665()), UInt64(246)));
    try { // block id: 4852
        try { // block id: 4854
            var4319 & 1
        } finally { // block id: 4858
            var863;
            var410;
            98 | 18
        };
        try { // block id: 4865
            Option<Bool>.Some(false)
        } catch (_) { // block id: 4868
            if (false) { var65 } else { var65 } 
        } finally { // block id: 4873
            ();
            var65
        }
    } finally { // block id: 4876
        if (var32) { var4880 } else { Option<(Option<Class117>, UInt64)>.None } ;
        ();
        match (Option<String>.None) {
            case caseVar4892 => 
                -3.0;
                var362;
                Option<Bool>.None
            
            case caseVar4900 : Interface668 => 
                if (true) { var176 } else { var294 } ;
                if (true) { var65 } else { Option<Bool>.None } 
            
            case _ => 
                Option<Bool>.Some(var924)
            
        }
    }
}


public func func284(param285 : String) : Unit { // block id: 286
    let var4721 : (Option<Bool>) -> Bool = func314;
    var var4916 : ?Unit = Option<Unit>.Some(());
    var loopTimeVar4938 : Int64 = 0;
    while (((var4916|>(func4723~>var4721))) && loopTimeVar4938 < 100 ) {
        loopTimeVar4938++;
        try (resource = Class117()) { // block id: 4921
            var980++;
            var3818
        } finally { // block id: 4925
            ();
            var1133;
            var1800
        };
        var loopTimeVar4932 : Range<UInt64> = (UInt64(69)&127..=UInt64(147)&127:(70|1));
        for (i in loopTimeVar4932 where var924) {

        }
    };
    var var4946 : ?Bool = ((((Int16(40) as Bool) as Option<Int32>) as Option<Option<Int32>>) as Bool);
    var loopTimeVar4957 : Int64 = 0;
    do {
        loopTimeVar4957++;

    } while (((var4946 ?? var648 > var648)) && loopTimeVar4957 < 100 ) 
}

public func func254() : Class117 { // block id: 255
    var var262 : ?Unit = (((Int64(UInt64(100)), UInt16(152), Int32(Int32(103)), """
!Q_sv
qY9t,
""", Int32(-108)), Option<Class117>.None, "%qtCsBQ-z9", ((53, UInt16(186), Int32(-75), ###";qKqtqgU.A"###, Int32(97)) is Int64), true) as Unit);
    let var4959 : (String) -> Unit = func284;
    (var262 ?? ((Option<String>.Some(var229) ?? "6-rUrmNeyt")|>var4959));
    match (try { // block id: 4967
            ();
            UInt32(75);
            ([(), (), (), (), (), (), (), (), (), ()], (var210, var980, Int32(49), """
q*vUJ
9?fNW
""", var94))
        } finally { // block id: 4978
            var var4980 : Range<Int32> = (Int32(-73)&127..=Int32(-30)&127:(Int64(Int8(-59))|1));
            var4980;
            ([var410, var1234, (), (), (), var1165, (), (), var362, ()], (113, var980, Int32(47), "3VYaQ\\O:#G", Int32(-98)))
        }) {
        case _ => 
            ()
        
    };
    try { // block id: 5008
        [UInt8(250), var648, UInt8(47), UInt8(71), UInt8(95), UInt8(242), var648, var648, var648, var648];
        var1133;
        Class665()
    } finally { // block id: 5022
        var106 &&= true;
        [[(-62.0), (-33.0), 9.0, (-62.0), 19.0, (-97.0), 98.0, 72.0, 120.0, (-100.0)], [(-51.0), 70.0, (-41.0), 55.0, (-116.0), 110.0, (-75.0), (-115.0), 1.0, 37.0], [34.0, (-74.0), 87.0, 116.0, 83.0, (-21.0), 75.0, (-15.0), (-23.0), 111.0], [10.0, 34.0, (-108.0), (-123.0), (-14.0), 87.0, 19.0, 58.0, 75.0, (-106.0)], [13.0, 80.0, (-94.0), (-54.0), 96.0, 70.0, 65.0, (-124.0), 80.0, (-39.0)], [59.0, 86.0, (-77.0), 108.0, 72.0, (-117.0), (-6.0), (-112.0), (-99.0), 122.0], [(-111.0), (-123.0), (-46.0), 68.0, (-88.0), (-79.0), (-77.0), (-75.0), 113.0, 109.0], [77.0, (-4.0), (-30.0), 75.0, (-29.0), (-24.0), 82.0, (-62.0), 96.0, 38.0], [7.0, (-126.0), 30.0, (-4.0), (-104.0), (-67.0), 107.0, (-104.0), 75.0, (-100.0)], [(-80.0), (-45.0), 95.0, 30.0, 53.0, (-108.0), 51.0, (-124.0), 114.0, (-107.0)]];
        var154
    }
}

func func149(param150 : UInt32) : Class117 { // block id: 151
    var154.var157;
    var var170 : UInt64 = UInt64(UInt64(84));
    (try { // block id: 167
        var170 >>= ((UInt64(235)) & 7);
        ();
        var176
    } finally { // block id: 208
        var210;
        if (var106) { (var217, Option<Class117>.Some(var154), var229, var106, true) } else { var234 } 
    }[1] ?? func254())
}

func func144(optionalParam145 ! : Float32 = Float32(-38.0)) : Class117 { // block id: 147
    let var5029 : (UInt32) -> Class117 = func149;
    var940|>var5029
}




func func112(param113 : Int32) : Unit { // block id: 114
    func func140(namedParam141 ! : Rune) : Class117 { // block id: 142
        func144()
    }
;
    func func135() : (Int64, UInt16, Int32, String, Int32) { // block id: 136
        UInt64(11);
        func140(namedParam141 : (var2669 ?? 'g')).func5036((Int8(4)&127..=var2975&127:(61|1)), namedParam5038 : func1701, namedParam5041 : if (true) { // block id: 5342
            var332 >>= ((var332) & 7);
            108 << ((var5326) & 7)
        } else if (var4835) { // block id: 5350
            var2704;
            (-39) * var210
        } else { // block id: 5355
            (-52)
        }, namedParam5042 : (Class665() as Int64))
    }
;
    var loopTimeVar5363 : Int64 = 0;
    do {
        loopTimeVar5363++;
        func func128(param129 : Unit, param130 : Unit) : UInt16 { // block id: 131
            func135()[1]
        }
;
        func128((), var2704)
    } while ((Class117.var124) && loopTimeVar5363 < 100 ) ;
    let var5434 : ??(Option<Class117>, UInt64) = (Option<Option<Option<Float64>>>.None as Option<(Option<Class117>, UInt64)>);
    var loopTimeVar5465 : Int64 = 0;
    while (((if (var4835) { // block id: 5368
        if (var5371) { var2844 } else { var2844 } ;
        var176
    } else if (false) { // block id: 5377
        var5379;
        if (false) { Option<Option<Int32>>.Some(Option<Int32>.None) } else { var5386 } ;
        var234
    } else { // block id: 5391
        var var5394 : UInt64 = UInt64(55);
        var5394 -= UInt64(149);
        var294
    } is Option<Option<(Option<Class117>, UInt64)>>)) && loopTimeVar5465 < 100 ) {
        loopTimeVar5465++;
        let var5438 : ?((Int64, UInt16, Int32, String, Int32), Option<Class117>, String, Bool, Bool) = Option<((Int64, UInt16, Int32, String, Int32), Option<Class117>, String, Bool, Bool)>.Some((((-120), UInt16(52), Int32(-40), "Dx|!6Tm:7E", Int32(UInt32(47))), ('A' as Class117), """
re7X|
nWPWa
""", ([(-50.0), 96.0, 88.0, (-45.0), 20.0, 10.0, (-108.0), (-56.0), (-38.0), 46.0] is ((Option<Class117>, UInt64)) -> UInt32), true));
        match ((var4312, var937, var937, var980, var1165, (UInt64(183)&127..UInt64(73)&127:(var4334|1)), var1177, (var860, (-96), (UInt8(216)&127..UInt8(187)&127:(-3)|1), var4184, var4334, var860, var937, UInt32(5)))) {
            case _ => 
                if (false) { Option<Int8>.Some(Int8(-89)) } else { var5427 } ;
                if (false) { Option<Option<(Option<Class117>, UInt64)>>.Some(var4456) } else { var5434 } ;
                var5438
            
        }
    }
}

public func func12(param13 : Int16) : Int8 { // block id: 14
    var loopTimeVar44 : Int64 = 0;
    while (((match (var21) {
        case caseVar25 => 
            param13
        
        case _ => 
            var32 ||= var32;
            Int16(92) / ((Int16(-5)) | 1)
        
    } is Int32)) && loopTimeVar44 < 100 ) {
        loopTimeVar44++;

    };
    var loopTimeVar5472 : Int64 = 0;
    do {
        loopTimeVar5472++;
        Int32(13)|>func112;
        (Option<Unit>.None ?? ())
    } while (((match (var32) {
        case true | false | false => 
            var var58 : Float32 = Float32(Float32(-18.0));
            var58 += var58;
            if (true) { var65 } else { var65 } 
        
        case true | false => 
            var65
        
        case caseVar74 => 
            var var78 : UInt64 = UInt64(70);
            var78 - var78;
            if (true) { var21 } else { var21 } ;
            if (caseVar74) { var65 } else { var65 } 
        
        case _ : Rune => 
            var94++;
            if (true) { Option<Bool>.None } else { var65 } 
        
        case _ => 
            UInt32(44);
            var94;
            Option<Bool>.None
        
    } ?? var106)) && loopTimeVar5472 < 100 ) ;
    var5226
}

public func func7(param8 : Unit) : Int64 { // block id: 9
    var var5475 : (Int16) -> Int8 = func12;
    Int64((Int16(-108)|>var5475))
}

main(): Int64 {
    try {
        var loopTimeVar5484 : Range<UInt64> = (UInt64(91)&127..=UInt64(Int16(Int8(Int8(-13))))&127:(Int64(UInt8(Int8(4)))|1));
        for (i in loopTimeVar5484 where true) {
            Int16(-71);
            ()
        }|>func7
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var94*var94), 64)
        crccheck.updateBuffer(UInt64(var210*var210), 64)
        crccheck.updateBuffer(UInt64(var332*var332), 64)
        crccheck.updateBuffer(UInt64(var354*var354), 64)
        crccheck.updateBuffer(UInt64(var987*var987), 64)
        crccheck.updateBuffer(UInt64(var1155*var1155), 64)
        crccheck.updateBuffer(UInt64(var1171*var1171), 64)
        crccheck.updateBuffer(UInt64(var2502*var2502), 64)
        crccheck.updateBuffer(UInt64(var2975*var2975), 64)
        crccheck.updateBuffer(UInt64(var4319*var4319), 64)
        crccheck.updateBuffer(UInt64(var5326*var5326), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Aggregate1011 {

}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_unexpected_declaration_in_scope
// ASSERT: scan parse_expected_expr_or_decl_in
// ASSERT: scan parse_expected_character
// ASSERT: scan parse_unmatched_right_delimiter
// ASSERT: scan parse_expected_left_brace
// ASSERT: scan parse_expected_case


