/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output


var var61 : UInt32 = UInt32(Int8(UInt8(249)))
public var var131 : (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64) = ((Aggregate13() is Float32), Int8(UInt8(UInt8(231))), 45.0, """
hW^*L
mLZHR
""", UInt8(132), UInt32(Int32(UInt8(225))), (), UInt8(UInt8(UInt8(129))), Int64(Int8(Int8(-95))))
public let var168 : Int64 = (-20)
var var182 : UInt64 = UInt64(UInt16(145))
var var350 : Array<Rune> = ['d', 'm', 'o', 'q', 'U', 'D', 'O', 'z', 'l', 'V']
public let var373 : Aggregate13 = Aggregate13()
var var404 : Float32 = Float32(-110.0)
var var427 : Bool = ((UInt8(242)&127..UInt8(Int8(UInt8(202)))&127:(42|1)) is Range<Int64>)
var var438 : String = """
0la+G
4SJij
"""
public var var470 : Int32 = Int32(UInt32(UInt16(152)))
public let var496 : Int32 = Int32(21)
var var508 : Range<UInt16> = (UInt16(167)&127..UInt16(57)&127:(-42)|1)
var var622 : Range<Int32> = (Int32(9)&127..Int32(-89)&127:13|1)
public var var668 : Interface31 = Class28()
let var675 : Unit = ()
public let var754 : UInt16 = UInt16(Int8(24))
var var828 : ?(Range<Int8>, UInt64, Range<UInt8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Option<Class28>, String, Range<Int8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Rune) = Option<(Range<Int8>, UInt64, Range<UInt8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Option<Class28>, String, Range<Int8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Rune)>.None
public let var831 : (Range<Int8>, UInt64, Range<UInt8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Option<Class28>, String, Range<Int8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Rune) = ((Int8(UInt8(Int8(11)))&127..Int8(-95)&127:((-11)|1)), UInt64(Int32(UInt32(175))), (UInt8(Int8(120))&127..=UInt8(102)&127:((-89)|1)), (true, Int8(UInt8(178)), (-8.0), "k${var438}wV${var438}#W${var438}w${var438}K${var438}xL)", UInt8(214), UInt32(Int32(-40)), (), UInt8(144), (-12)), ((Int16(Int16(37))&127..=Int16(UInt8(8))&127:(112|1)) as Class28), ###"7[3[\".L${var438}|${var438}J]"###, (Int8(94)&127..=Int8(Int8(7))&127:((-28)|1)), (((UInt8(147), (Int32(97)&127..Int32(-99)&127:118|1), Int32(-10), 126) is () -> Array<Rune>), Int8(Int8(-100)), (-3.0), ###"+${var438}^s\"_${var438}')uh${var438}e"###, UInt8(130), UInt32(UInt8(UInt8(237))), (), UInt8(Int8(UInt8(15))), Int64((-103))), 'U')
let var900 : Int64 = Int64(UInt8(UInt8(UInt8(Int8(48)))))
var var921 : UInt8 = UInt8(73)
public var var940 : Rune = 'l'
let var993 : (Float32, UInt16, Range<Int64>, Int32) = (Float32(Float32(Float32(-60.0))), UInt16(UInt8(216)), (78&127..=Int64(Int32(125))&127:(Int64(Int32(103))|1)), Int32(Int32(-111)))
let var1013 : (Array<Bool>, Range<UInt32>, (Range<Int16>, String, UInt16, Range<UInt32>), Array<Bool>, UInt32, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64)) = ([true, false, true, true, true, false, false, false, false, false], (UInt32(117)&127..UInt32(54)&127:(Int64(Int32(Int8(-60)))|1)), ((Int16(-33)&127..=Int16(53)&127:(-14)|1), ###"!r7SJy8I|a{${var438}"###, UInt16(224), (UInt32(8)&127..=UInt32(202)&127:20|1)), [false, (UInt64(Int8(105)) is Float64), ("eZ${var438}Bdn~SxP${var438}.${var438}" is Range<Int8>), ((((Int8(98)&127..=Int8(117)&127:55|1), UInt64(253), (UInt8(168)&127..=UInt8(161)&127:(-32)|1), (false, Int8(-101), (-57.0), """
XLD:7
^|pd${var438}F
""", UInt8(82), UInt32(24), (), UInt8(249), (-117)), Option<Class28>.None, "@^B_q${var438}Fen0${var438}#", (Int8(82)&127..Int8(53)&127:(-71)|1), (false, Int8(-23), (-13.0), """
KCOlU
\"${var438}94Ys
""", UInt8(242), UInt32(239), (), UInt8(136), 10), 'L') as Int32) is Unit), ((Int8(-19)&127..Int8(22)&127:(-26)|1) is Float32), (((Int8(32)&127..Int8(-84)&127:((-51)|1)), UInt64(249), (UInt8(235)&127..=UInt8(86)&127:3|1), (true, Int8(22), 5.0, "Q5e${var438}y=Bt${var438}@E\"", UInt8(88), UInt32(50), (), UInt8(39), (-93)), Option<Class28>.None, """
k${var438}DUH0
!l*:~${var438}
""", (Int8(35)&127..=Int8(-9)&127:(-65)|1), (true, Int8(-67), (-108.0), ###"[${var438}~${var438}W${var438}a{kSd${var438}y${var438}/+"###, UInt8(214), UInt32(80), (), UInt8(141), 76), 'A') is Int16), true, (([UInt8(251), UInt8(224), UInt8(131), UInt8(235), UInt8(60), UInt8(110), UInt8(39), UInt8(40), UInt8(120), UInt8(59)], (UInt32(38)&127..UInt32(196)&127:(-94)|1), UInt64(43), (), UInt8(33), (Int32(21)&127..=Int32(24)&127:(-94)|1)) is Range<Int32>), false, false], UInt32(Int16(Int16(Int8(-110)))), ((UInt8(165) is Range<Int64>), Int8(Int8(UInt8(74))), (-62.0), "dw]ZP)(@eT", UInt8(185), UInt32(UInt8(Int8(114))), (), UInt8(244), Int64(UInt32(166))))
public let var1135 : (Range<Int16>, (Range<Int16>, String, UInt16, Range<UInt32>), (UInt16, Range<Int32>, Range<UInt32>, UInt64, Float64), (Array<UInt8>, Range<UInt32>, UInt64, Unit, UInt8, Range<Int32>), UInt8, Array<Rune>, Range<Int8>) = ((Int16(-11)&127..=Int16(-107)&127:(48|1)), ((Int16(97)&127..Int16(3)&127:(-124)|1), "P:\"7a{F(B${var438}|K", UInt16(UInt8(Int8(-30))), (UInt32(99)&127..UInt32(112)&127:(-111)|1)), (UInt16(189), (Int32(-19)&127..=Int32(-45)&127:(112|1)), (UInt32(53)&127..UInt32(UInt16(37))&127:(84|1)), UInt64(91), Float64(Float32(43.0))), ([UInt8(39), UInt8(41), UInt8(72), UInt8(20), UInt8(74), UInt8(89), UInt8(38), UInt8(187), UInt8(138), UInt8(241)], (UInt32(Int8(95))&127..UInt32(Int32(-97))&127:((-16)|1)), UInt64(220), (), UInt8(UInt8(Int8(60))), (Int32(-55)&127..Int32(-90)&127:(-15)|1)), UInt8(245), ['6', 'D', 'k', 'a', 'w', '3', 'm', 'O', 'S', 'X'], (Int8(-13)&127..Int8(-122)&127:((-14)|1)))
public var var1186 : Range<Int8> = (Int8(85)&127..=Int8(-17)&127:103|1)
public var var1191 : Enum550 = Enum550.defaultValue
var var1205 : Int64 = 126
var var1288 : Float64 = 96.0
public var var1303 : Bool = false
public var var1323 : (Range<Int16>, String, UInt16, Range<UInt32>) = ((Int16(-65)&127..=Int16(6)&127:(-99)|1), "tw${var438}}5?A2${var438}RO-", UInt16(112), (UInt32(1)&127..UInt32(195)&127:39|1))
var var1525 : ?Int32 = ((((Int16(-105)&127..=Int16(59)&127:73|1), ((Int16(25)&127..Int16(69)&127:35|1), ###"\\|${var438}v${var438}kp${var438}0AW${var438}jH"###, UInt16(176), (UInt32(121)&127..UInt32(69)&127:((-41)|1))), (UInt16(83), (Int32(28)&127..=Int32(-10)&127:(35|1)), (UInt32(157)&127..=UInt32(143)&127:((-103)|1)), UInt64(150), (-108.0)), ([UInt8(219), UInt8(202), UInt8(45), UInt8(99), UInt8(184), UInt8(203), UInt8(2), UInt8(18), UInt8(26), UInt8(134)], (UInt32(157)&127..UInt32(87)&127:6|1), UInt64(150), (), UInt8(79), (Int32(-108)&127..Int32(-40)&127:(-109)|1)), UInt8(187), ['8', 'c', 'v', 'u', 's', 'S', 'X', 'W', '0', 'f'], (Int8(89)&127..Int8(75)&127:((-100)|1))), 'V') as Int32)
let var1704 : Int16 = Int16(-26)
public var var1730 : Unit = ()
public var var1734 : Class28 = Class28()
public var var1817 : Array<Aggregate13> = Array<Aggregate13>(10){ i => Aggregate13() }
public let var1931 : Bool = ([UInt8(200), UInt8(Int8(-65)), UInt8(81), UInt8(129), UInt8(Int8(-72)), UInt8(UInt8(UInt8(152))), UInt8(UInt8(8)), UInt8(Int8(10)), UInt8(254), UInt8(47)] is Float32)
public var var1951 : Rune = '3'
public var var2088 : Enum1988 = Enum1988.defaultValue
public var var2104 : UInt8 = UInt8(247)
public var var2167 : Range<Int16> = (Int16(UInt8(231))&127..Int16(-26)&127:(Int64(UInt8(144))|1))
let var2208 : Range<Int8> = (Int8(34)&127..Int8(Int8(-122))&127:((-66)|1))
public let var2253 : Array<UInt32> = [UInt32(237), UInt32(79), UInt32(222), UInt32(71), UInt32(39), UInt32(12), UInt32(226), UInt32(36), UInt32(84), UInt32(29)]
public var var2314 : (UInt16, Range<Int32>, Range<UInt32>, UInt64, Float64) = (UInt16(UInt8(8)), (Int32(UInt8(57))&127..=Int32(UInt32(UInt32(151)))&127:(36|1)), (UInt32(203)&127..UInt32(243)&127:(37|1)), UInt64(251), 79.0)
var var2384 : Int8 = Int8(Int8(UInt8(78)))
public let var2398 : (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64) = ((UInt32(UInt8(4)) is (UInt32) -> (Array<Bool>, Range<UInt32>, (Range<Int16>, String, UInt16, Range<UInt32>), Array<Bool>, UInt32, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64))), Int8(-127), Float64(Float32(-48.0)), ###"$? c7cRUe,"###, UInt8(106), UInt32(112), (), UInt8(Int8(Int8(Int8(-99)))), Int64(UInt32(Int8(-66))))
public var var2429 : Interface32 = Class28()
public let var2517 : UInt8 = UInt8(112)
var var2522 : UInt8 = UInt8(UInt8(252))
var var2528 : Bool = ([UInt8(UInt8(Int8(-23))), UInt8(198), UInt8(33), UInt8(151), UInt8(Int8(-26)), UInt8(Int8(-42)), UInt8(164), UInt8(175), UInt8(31), UInt8(197)] is Array<Interface32>)
public var var2549 : Array<Bool> = [true, ((Int16(78)&127..=Int16(51)&127:88|1) is ((Range<UInt8>) -> Unit, Float64) -> (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64)), (true is Option<Class28>), true, false, ([true, false, false, true, false, false, false, true, true, true] is Array<UInt32>), ((Enum550.defaultValue, Int32(-99)) is ((Range<UInt8>) -> Unit, Float64) -> (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64)), ([(52&127..(-38)&127:87|1), ((-119)&127..(-37)&127:(-93)|1), (73&127..=102&127:(-71)|1), ((-36)&127..=(-51)&127:87|1), ((-88)&127..=121&127:(-27)|1), (28&127..=(-83)&127:(-86)|1), (28&127..=(-8)&127:((-52)|1)), ((-120)&127..=58&127:75|1), (104&127..79&127:(47|1)), ((-102)&127..=(-73)&127:(66|1))] is ((Range<Int16>, (Range<Int16>, String, UInt16, Range<UInt32>), (UInt16, Range<Int32>, Range<UInt32>, UInt64, Float64), (Array<UInt8>, Range<UInt32>, UInt64, Unit, UInt8, Range<Int32>), UInt8, Array<Rune>, Range<Int8>), Rune)), true, false]
public let var2694 : Enum2691 = Enum2691.defaultValue
public let var2825 : Range<UInt8> = (UInt8(135)&127..UInt8(Int8(Int8(-15)))&127:((-85)|1))
public var var2949 : ?Class28 = Option<Class28>.None
public var var2981 : ?Unit = Option<Unit>.None
public let var3005 : ?Unit = Option<Unit>.None
public var var3077 : (Array<UInt8>, Range<UInt32>, UInt64, Unit, UInt8, Range<Int32>) = ([UInt8(58), UInt8(170), UInt8(103), UInt8(151), UInt8(153), UInt8(19), UInt8(43), UInt8(98), UInt8(242), UInt8(193)], (UInt32(108)&127..UInt32(58)&127:(-121)|1), UInt64(UInt16(UInt16(205))), (), UInt8(116), (Int32(-97)&127..=Int32(13)&127:114|1))
var var3110 : UInt16 = UInt16(147)
var var3166 : ?Unit = Option<Unit>.None
public var var3404 : ?Int64 = Option<Int64>.None
var var3443 : Array<Option<Unit>> = Array<Option<Unit>>(10){ i => ([true, false, false, false, false, false, true, false, false, true] as Unit) }
var var3527 : ((Range<Int16>, (Range<Int16>, String, UInt16, Range<UInt32>), (UInt16, Range<Int32>, Range<UInt32>, UInt64, Float64), (Array<UInt8>, Range<UInt32>, UInt64, Unit, UInt8, Range<Int32>), UInt8, Array<Rune>, Range<Int8>), Rune) = (((Int16(-117)&127..=Int16(-118)&127:(-91)|1), ((Int16(-82)&127..=Int16(8)&127:((-38)|1)), ###"lu${var438}Ma{QbH=v,"###, UInt16(52), (UInt32(153)&127..UInt32(238)&127:(26|1))), (UInt16(UInt8(174)), (Int32(10)&127..Int32(-47)&127:((-98)|1)), (UInt32(144)&127..=UInt32(32)&127:(-13)|1), UInt64(92), (-92.0)), ([UInt8(130), UInt8(13), UInt8(252), UInt8(247), UInt8(12), UInt8(81), UInt8(94), UInt8(20), UInt8(221), UInt8(112)], (UInt32(36)&127..UInt32(197)&127:((-113)|1)), UInt64(Int8(-58)), (), UInt8(95), (Int32(-1)&127..=Int32(44)&127:118|1)), UInt8(178), ['1', 'H', 'r', 'x', '6', 'w', 'e', '1', 'J', 'k'], (Int8(1)&127..=Int8(-69)&127:98|1)), 'H')
public let var3595 : ((Range<Int16>, (Range<Int16>, String, UInt16, Range<UInt32>), (UInt16, Range<Int32>, Range<UInt32>, UInt64, Float64), (Array<UInt8>, Range<UInt32>, UInt64, Unit, UInt8, Range<Int32>), UInt8, Array<Rune>, Range<Int8>), Rune) = (((Int16(120)&127..Int16(74)&127:40|1), ((Int16(65)&127..=Int16(-69)&127:9|1), """
P${var438}XC${var438} ${var438}X
n2W)U
""", UInt16(17), (UInt32(186)&127..UInt32(113)&127:((-87)|1))), (UInt16(UInt16(47)), (Int32(7)&127..=Int32(65)&127:61|1), (UInt32(95)&127..=UInt32(61)&127:117|1), UInt64(UInt64(55)), 39.0), ([UInt8(80), UInt8(5), UInt8(63), UInt8(45), UInt8(147), UInt8(196), UInt8(61), UInt8(150), UInt8(16), UInt8(208)], (UInt32(215)&127..UInt32(20)&127:63|1), UInt64(Int8(-4)), (), UInt8(165), (Int32(-89)&127..=Int32(-109)&127:(-65)|1)), UInt8(UInt8(184)), ['j', 'a', 'W', 'k', 'F', 'g', '4', 'S', '4', 'X'], (Int8(Int8(-4))&127..Int8(70)&127:(4|1))), 'K')
public let var3700 : Int16 = Int16(-17)
public var var3782 : UInt8 = UInt8(UInt8(UInt8(15)))
public let var4131 : Bool = false
public var var4157 : (UInt8, Range<Int32>, Int32, Int64) = (UInt8(UInt8(242)), (Int32(-60)&127..=Int32(-85)&127:(-28)|1), Int32(19), (-56))
let var4167 : Range<Int64> = (92&127..=Int64(Int64(Int32(37)))&127:(Int64(Int8(UInt8(153)))|1))
var var4193 : Int64 = Int64((-36))
let var4208 : UInt32 = UInt32(141)
public let var4230 : Range<UInt32> = (UInt32(Int16(-74))&127..=UInt32(UInt8(Int8(Int8(115))))&127:(30|1))
let var4287 : Int64 = (-97)
var var4309 : Int32 = Int32(-30)
public var var4336 : Int64 = 47
var var4358 : Array<Interface32> = Array<Interface32>(10){ i => Class28() }
public let var4371 : Array<Interface32> = [Class28(), Class28(), Class28(), Class28(), Class28(), Class28(), Class28(), Class28(), Class28(), Class28()]
public let var4421 : Range<Int32> = (Int32(-67)&127..Int32(-34)&127:(-47)|1)
public var var4637 : UInt16 = UInt16(35)
var var4702 : Rune = 'K'
let var4790 : Unit = ()
let var4905 : Option<(Range<Int16>, String, UInt16, Range<UInt32>)> = (Int32(-22) as (Range<Int16>, String, UInt16, Range<UInt32>))
var var4949 : Int8 = Int8(-6)
public let var5156 : Aggregate13 = Aggregate13()
public let var5263 : Range<Int64> = (95&127..=Int64(Int8(-3))&127:(7|1))
var var5284 : Int64 = 7
var var5288 : Int64 = 64
var var5348 : Rune = 'm'
public var var5360 : Int16 = Int16(UInt16(UInt16(56)))
public var var5374 : Bool = false
var var5416 : ?(UInt8, Range<Int32>, Int32, Int64) = Option<(UInt8, Range<Int32>, Int32, Int64)>.None
public let var5449 : ??Int32 = Option<Option<Int32>>.None
var var5521 : Unit = ()
public struct Aggregate13 {
    public init() { // block id: 15

    }
;
    static var var18 : Int16 = Int16(-99);
    public static var var2819 : Option<(Range<Int8>, UInt64, Range<UInt8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Option<Class28>, String, Range<Int8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Rune)> = Option<(Range<Int8>, UInt64, Range<UInt8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Option<Class28>, String, Range<Int8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Rune)>.None;
    static func func2856(param2857 : (Range<UInt8>) -> Unit, param2860 : (Range<Int8>) -> (Range<Int16>, (Range<Int16>, String, UInt16, Range<UInt32>), (UInt16, Range<Int32>, Range<UInt32>, UInt64, Float64), (Array<UInt8>, Range<UInt32>, UInt64, Unit, UInt8, Range<Int32>), UInt8, Array<Rune>, Range<Int8>), namedParam2863 ! : Class28) : Unit { // block id: 2864

    }
;
    public init(param2808 : Enum1988, param2809 : Range<Int32>) { // block id: 2810
        var var2835 : Int8 = Int8(-49);
        match {
            case ((var2819 ?? ((Int8(-47)&127..=Int8(-58)&127:62|1), var182, var2825, (false, var2835, (-27.0), "V64Ip9Z3pI", UInt8(55), UInt32(48), (), UInt8(76), var168), Option<Class28>.None, "q}$a%$=\"uV", (Int8(61)&127..Int8(36)&127:(-70)|1), var2398, var1951)) is Option<Int32>) => 
            var1323
            case _ => 
            var1323
        };
        let var2866 : (Range<UInt8>) -> Unit = func1760;
        let var2869 : (Range<Int8>) -> (Range<Int16>, (Range<Int16>, String, UInt16, Range<UInt32>), (UInt16, Range<Int32>, Range<UInt32>, UInt64, Float64), (Array<UInt8>, Range<UInt32>, UInt64, Unit, UInt8, Range<Int32>), UInt8, Array<Rune>, Range<Int8>) = func1131;
        Aggregate13.func2856(var2866, var2869, namedParam2863 : var1734);
        match (Enum1988.defaultValue) {
            case enumValue2031(_ : Array<UInt8>, _ : UInt64, _ : Int16, caseVar2876) => 
                if (true) { var1525 } else { Option<Int32>.Some(Int32(50)) } ;
                var1730
            
            case _ => 
                ()
            
            case defaultValue => 
                ()
            
            case _ => 
                ();
                var404 -= Float32(40.0)
            
        }
    }
;
    private static var var2965 : Bool = false;
    public static let var3022 : ?Unit = Option<Unit>.None;
    public static let var3026 : Unit = ();
    public static var var3057 : ?Int16 = Option<Int16>.None;
    public init(param2939 : (Enum550, Int32)) { // block id: 2940
        let var3034 : ??Unit = Option<Option<Unit>>.Some(((() as Rune) as Unit));
        var var3046 : Bool = (Option<Int16>.None is (Range<UInt32>, Class28) -> Array<Interface32>);
        ((match (var2949) {
            case caseVar2953 => 
                var1730;
                var404
            
            case _ => 
                Float32(-32.0)
            
        } as Array<Option<Unit>>) ?? [((UInt64(164)&127..=UInt64(43)&127:40|1) as Unit), if (var2965) { Option<Unit>.Some(var675) } else { Option<Unit>.None } , if (true) { Option<Unit>.None } else { Option<Unit>.Some(var675) } , try { // block id: 2976
            var182 <<= ((var182) & 7);
            var2981
        } catch (e: Exception) { // block id: 2983
            Option<Unit>.Some(())
        } finally { // block id: 2986
            Option<Unit>.Some(var675)
        }, (Option<Option<Unit>>.Some(var2981) ?? var2981), match (var1704) {
            case _ : Range<Int64> => 
                var675;
                var1951;
                var3005
            
            case _ => 
                let var3011 : Float32 = Float32(Float32(Float32(110.0)));
                (var3011, UInt16(140), (91&127..(-62)&127:35|1), Int32(-60));
                var2981
            
        }, (Option<Option<Unit>>.Some(var3022) ?? Option<Unit>.Some(var3026)), (var3034 ?? var2981), try { // block id: 3041
            var2167;
            var3026;
            if (var3046) { Option<Unit>.None } else { var3022 } 
        } catch (e: Exception) { // block id: 3051
            (var18&127..Int16(-99)&127:(var1205|1));
            var3057;
            var3005
        } finally { // block id: 3060
            ();
            if (var2965) { var3022 } else { var3005 } 
        }, ((Int16(31)&127..=Int16(126)&127:(-23)|1) as Unit)]);
        if (var2965) { // block id: 3070
            if (true) { var2088 } else { Enum1988.enumValue2091(func1131, var3077, var131, Option<Int16>.Some(Int16(61))) } ;
            try (resource = Class28()) { // block id: 3091

            } catch (_) { // block id: 3092
                ();
                var2528 ||= true;
                ()
            };
            var2104++
        } else if (try { // block id: 3101
            (UInt8(236)&127..=UInt8(146)&127:(var900|1));
            true
        } catch (e: Exception) { // block id: 3107
            var3110 -= UInt16(209);
            ();
            var404 < Float32(-43.0)
        }) { // block id: 3117
            let var3121 : Array<Option<Unit>> = [Option<Unit>.Some(()), Option<Unit>.Some(()), Option<Unit>.None, ([UInt8(206), UInt8(118), UInt8(107), UInt8(70), UInt8(217), UInt8(202), UInt8(193), UInt8(51), UInt8(74), UInt8(81)] as Unit), (Class28(namedParam592 : Aggregate13()) as Unit), Option<Unit>.Some(()), Option<Unit>.Some(()), (([UInt8(241), UInt8(31), UInt8(46), UInt8(181), UInt8(30), UInt8(33), UInt8(133), UInt8(222), UInt8(226), UInt8(23)], (UInt32(55)&127..=UInt32(19)&127:(-64)|1), UInt64(UInt64(186)), (), UInt8(UInt8(241)), (Int32(-113)&127..=Int32(-77)&127:(-96)|1)) as Unit), Option<Unit>.Some(()), Option<Unit>.Some(())];
            if (false) { var3121 } else { [var2981, var2981, Option<Unit>.None, var3166, var3005, Option<Unit>.Some(var3026), var3166, var3005, Option<Unit>.Some(()), Option<Unit>.Some(var675)] } ;
            var loopTimeVar3181 : Int64 = 0;
            do {
                loopTimeVar3181++;

            } while ((var1931) && loopTimeVar3181 < 100 ) ;
            if (var1303) { // block id: 3184
                Int8(-81) - var2384;
                ()
            } else if (true) { // block id: 3190
                (var2549, (UInt32(11)&127..var61&127:((-73)|1)), var1323, var2549, var61, var2398);
                ()
            }
        };
        var3026
    }
;
    public init(optionalParam1850 ! : () -> Array<Rune> = func415, namedParam1853 ! : (UInt8, Range<Int32>, Int32, Int64), namedParam1854 ! : Interface32, namedParam1855 ! : Range<UInt32>) { // block id: 1856
        let var3864 : String = "R.QOa{6C$Oe";
        func1858(namedParam1859 : match {
            case var1303 => 
            var921 /= ((UInt8(9)) | 1);
            if (var2528) { """
9&'/Z
,O-v=
""" } else { var3864 } 
            case _ => 
            85.0;
            var438
        }, namedParam1866 : ((Option<Int64>.Some((-59)) as (Float32, UInt16, Range<Int64>, Int32)) ?? (Option<(Float32, UInt16, Range<Int64>, Int32)>.None ?? var993)));
        var var3888 : ?Array<Interface32> = (Option<Class28>.None as Array<Interface32>);
        let var3930 : Array<Interface32> = Array<Interface32>(10){ i => Class28(namedParam1902 : ['8', 'X', 'C', 'M', 'P', '0', 'J', 'p', '8', 'G'], namedParam1903 : ((-92)&127..=(-51)&127:44|1), namedParam1904 : (UInt16(102), (Int32(-115)&127..Int32(-60)&127:((-120)|1)), (UInt32(143)&127..=UInt32(230)&127:(13|1)), UInt64(UInt16(84)), (-123.0))) };
        try { // block id: 3881
            var var3902 : ?Int16 = Option<Int16>.Some(Int16(Int8(-90)));
            (var3888 ?? [namedParam1854, namedParam1854, Class28(), Class28(namedParam592 : Aggregate13(Enum1988.enumValue2091(func1131, var3077, var2398, var3902), (Int32(-71)&127..=Int32(-96)&127:(-59)|1)), optionalParam593 : var1323), Class28(), Class28(namedParam1331 : (UInt16(119), var622, (var61&127..var61&127:(var168|1)), UInt64(189), 118.0), namedParam1334 : (UInt8(214)&127..UInt8(17)&127:(var900|1))), namedParam1854, Class28(), Class28(namedParam592 : var373), namedParam1854])
        } finally { // block id: 3928
            var3930
        };
        var3026
    }
;
    public init(namedParam1516 ! : Rune, optionalParam1517 ! : Interface32 = Class28(namedParam592 : Aggregate13())) { // block id: 1520
        try { // block id: 1522
            match (var1525) {
                case _ => 
                    Enum550.defaultValue
                
                case _ => 
                    Enum550.defaultValue
                
                case _ : Range<UInt16> => 
                    ();
                    var675;
                    Enum550.defaultValue
                
                case _ => 
                    var1191
                
            }
        } finally { // block id: 1591
            Int32(84)|>func1593;
            var var5134 : UInt32 = UInt32(212);
            if (true) { // block id: 5129
                ();
                var61 >>= ((var5134) & 7)
            };
            var var5142 : ?Enum550 = Option<Enum550>.Some(Enum550.enumValue3210(Option<(Range<Int8>, UInt64, Range<UInt8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Option<Class28>, String, Range<Int8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Rune)>.None, 'Y', func816, Option<(Range<Int8>, UInt64, Range<UInt8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Option<Class28>, String, Range<Int8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Rune)>.None));
            (var5142 ?? var1191)
        }
    }

}

public interface Interface32 {
    func func2432(namedParam2433 ! : Option<Int16>, namedParam2434 ! : (Bool) -> Int64, namedParam2437 ! : Range<Int8>, namedParam2438 ! : Option<Rune>) : Rune { // block id: 2439
        var loopTimeVar2455 : Int64 = 0;
        while ((var1303) && loopTimeVar2455 < 100 ) {
            loopTimeVar2455++;
            var loopTimeVar2447 : Int64 = 0;
            do {
                loopTimeVar2447++;

            } while ((var1303) && loopTimeVar2447 < 100 ) ;
            var loopTimeVar2453 : Int64 = 0;
            while ((var1303) && loopTimeVar2453 < 100 ) {
                loopTimeVar2453++;
                var1191
            }
        };
        let var2618 : Enum550 = Enum550.defaultValue;
        match (func2458(optionalParam2463 : if (var2528) { // block id: 2545
                if (var2528) { var2549 } else { [false, false, var2528, var2528, false, true, true, false, false, true] } ;
                var2104 *= var2522;
                10.0 / Float64((Int32(50.0)) | 1)
            } else { // block id: 2604
                14.0
            })) {
            case (caseVar2608,caseVar2609,_ : Option<Int16>,_,_ : Range<UInt16>,caseVar2610 : (UInt8, Range<Int32>, Int32, Int64),caseVar2611,_,caseVar2612 : Array<Aggregate13>) => 
                if (false) { var1191 } else { var2618 } ;
                var1323;
                if (true) { var2618 } else { Enum550.defaultValue } 
            
            case _ => 
                ();
                Enum550.defaultValue
            
        };
        var1951
    }

}

public interface Interface31 <: Interface32 {
    func func671(param672 : Range<Int32>) : Bool { // block id: 673
        var675;
        var var682 : Array<Bool> = Array<Bool>(10){ i => true };
        try { // block id: 680
            var682
        } catch (_) { // block id: 700
            var var702 : Enum550 = Enum550.defaultValue;
            var702;
            var675;
            [false, true, false, false, false, false, false, false, true, false]
        } finally { // block id: 706
            "QeQ&:mLFm+";
            var470;
            if (false) { [var427, false, var427, var427, false, var427, false, var427, false, false] } else { [true, true, true, false, false, true, true, false, false, true] } 
        }[4]
    }
;
    func func1737(param1738 : Int64, param1739 : (Float32, UInt16, Range<Int64>, Int32)) : (UInt8, Range<Int32>, Int32, Int64) { // block id: 1740
        let var1765 : Range<UInt8> = (UInt8(Int8(62))&127..=UInt8(UInt8(66))&127:((-87)|1));
        if (if (var1303) { // block id: 1745
            var1730;
            Int32(33)
        } else { // block id: 1748
            var470 <<= ((var470) & 7);
            ();
            -var470
        } < (Int32(-92) << ((var470) & 7))) { // block id: 1758
            var1765|>func1760;
            func1760(var1765);
            ()
        };
        let var4549 : ((Range<Int16>, (Range<Int16>, String, UInt16, Range<UInt32>), (UInt16, Range<Int32>, Range<UInt32>, UInt64, Float64), (Array<UInt8>, Range<UInt32>, UInt64, Unit, UInt8, Range<Int32>), UInt8, Array<Rune>, Range<Int8>), Rune) = (((Int16(44)&127..=Int16(112)&127:50|1), ((Int16(91)&127..Int16(0)&127:(-4)|1), """
^+ZV+
O-JbQ
""", UInt16(Int16(-118)), (UInt32(49)&127..=UInt32(210)&127:((-53)|1))), (UInt16(UInt16(143)), (Int32(19)&127..=Int32(121)&127:54|1), (UInt32(147)&127..=UInt32(78)&127:39|1), UInt64(36), (-17.0)), ([UInt8(102), UInt8(250), UInt8(215), UInt8(243), UInt8(163), UInt8(142), UInt8(25), UInt8(89), UInt8(32), UInt8(153)], (UInt32(24)&127..UInt32(179)&127:((-51)|1)), UInt64(Int8(22)), (), UInt8(UInt8(149)), (Int32(90)&127..Int32(9)&127:87|1)), UInt8(188), ['U', 'u', 'A', 'D', '4', '2', '4', '8', '6', 'm'], (Int8(Int8(93))&127..=Int8(UInt8(171))&127:(Int64(Int8(79))|1))), 'O');
        ((var2825 as ((Range<Int16>, (Range<Int16>, String, UInt16, Range<UInt32>), (UInt16, Range<Int32>, Range<UInt32>, UInt64, Float64), (Array<UInt8>, Range<UInt32>, UInt64, Unit, UInt8, Range<Int32>), UInt8, Array<Rune>, Range<Int8>), Rune)) ?? var4549)|>func1776;
        var4157
    }
;
    static func func1600(param1601 : Float64, param1602 : (Array<Bool>, Range<UInt32>, (Range<Int16>, String, UInt16, Range<UInt32>), Array<Bool>, UInt32, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64)), param1603 : ((Range<Int16>, (Range<Int16>, String, UInt16, Range<UInt32>), (UInt16, Range<Int32>, Range<UInt32>, UInt64, Float64), (Array<UInt8>, Range<UInt32>, UInt64, Unit, UInt8, Range<Int32>), UInt8, Array<Rune>, Range<Int8>), Rune)) : Bool 

}

public open class Class28 <: Interface31 & Interface32 & Resource {
    public init() { // block id: 30

    }
;
    public static let var35 : (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64) = (true, Int8(22), 68.0, "F^,RK@nm-j", UInt8(94), UInt32(165), (), UInt8(22), (-91));
    public static var var632 : Array<UInt8> = Array<UInt8>(10){ i => UInt8(123) };
    static var var650 : Unit = ();
    private static var var727 : Int16 = Int16(-54);
    protected var var732 : Bool = true;
    static var var736 : String = ###"T_CtXAj3<;"###;
    protected var var988 : Float32 = Float32(111.0);
    public init(namedParam592 ! : Aggregate13, optionalParam593 ! : (Range<Int16>, String, UInt16, Range<UInt32>) = ((Int16(5)&127..Int16(-47)&127:(-1)|1), ###"91)-IcFSN|"###, UInt16(31), (UInt32(163)&127..UInt32(142)&127:(62|1)))) { // block id: 602
        let var609 : Range<Int16> = (Int16(-100)&127..Int16(45)&127:40|1);
        var var658 : UInt8 = UInt8(UInt8(240));
        (var609, ((Int16(-106)&127..=Int16(42)&127:95|1), var438, UInt16(202), (UInt32(36)&127..=var61&127:(31|1))), (UInt16(99), var622, (var61&127..=UInt32(249)&127:(95|1)), var182, 14.0), (var632, (UInt32(158)&127..var61&127:(var168|1)), var182, var650, UInt8(26), (Int32(-114)&127..=var470&127:((-6)|1))), var658, ['z', 'u', 'a', 'h', 's', '7', 'p', 'K', 't', 'H'], (Int8(-12)&127..Int8(-45)&127:(-86)|1))[3][3];
        let var1220 : (Enum550, Int32) = (Enum550.defaultValue, Int32(UInt32(226)));
        func func740(param741 : Array<Bool>, optionalParam742 ! : UInt8 = UInt8(UInt8(53))) : Int16 { // block id: 745
            var var791 : Float64 = Float64(Float32(Float32(112.0)));
            if (match (Int32(-23)) {
                case _ => 
                    var754 > var754
                
                case -100 => 
                    var var764 : Array<Interface32> = Array<Interface32>(10){ i => Class28() };
                    if (var427) { var764 } else { var764 } ;
                    Int32(40);
                    var470 <= var496
                
                case _ => 
                    var791 /= Float64((Int32(var791)) | 1);
                    var427
                
                case _ => 
                    var427
                
            }) { // block id: 800
                var loopTimeVar805 : Range<UInt64> = (UInt64(UInt16(UInt16(UInt8(153))))&127..=UInt64(89)&127:(Int64(Int16(Int16(21)))|1));
                for (i in loopTimeVar805 where var427) {
                    (UInt16(203)&127..UInt16(107)&127:51|1)
                };
                var427|>func816;
                (Option<Int32>.None ?? var470)
            } else if ([true, true, false, true, true, true, true, true, false, false][6]) { // block id: 981
                let var984 : Class28 = Class28();
                var984.var988;
                var993[3]
            } else { // block id: 1009
                var1013[4];
                var var1183 : (Range<Int8>) -> (Range<Int16>, (Range<Int16>, String, UInt16, Range<UInt32>), (UInt16, Range<Int32>, Range<UInt32>, UInt64, Float64), (Array<UInt8>, Range<UInt32>, UInt64, Unit, UInt8, Range<Int32>), UInt8, Array<Rune>, Range<Int8>) = func1131;
                var1186|>var1183;
                (var1191, Int32(2))[1]
            };
            (try { // block id: 1201
                var993;
                var1205 <<= ((123) & 7);
                let var1209 : ?Int16 = (UInt8(Int8(36)) as Int16);
                var1209
            } finally { // block id: 1213
                Int8(114) ** (Int8(25) & 3);
                if (true) { var1220 } else { (var1191, var470) } ;
                Option<Int16>.None
            } ?? Int16(18))
        }
;
        var var1267 : Range<Int32> = (Int32(-123)&127..=Int32(49)&127:(-33)|1);
        let var1312 : (UInt8, Range<Int32>, Int32, Int64) = (UInt8(UInt8(179)), (Int32(-80)&127..=Int32(-19)&127:105|1), Int32(-57), (-109));
        if (var668.func671(var622)) { // block id: 725
            var727
        } else if (Class28().var732) { // block id: 734
            var736;
            var650;
            var var1231 : Array<Bool> = [false, true, true, true, true, false, true, false, true, false];
            func740(var1231)
        } else { // block id: 1233
            let var1247 : (UInt8, Range<Int32>, Int32, Int64) = (UInt8(UInt8(Int8(-9))), (Int32(103)&127..=Int32(-115)&127:(-21)|1), Int32(61), Int64(Int32(UInt32(38))));
            if (true) { // block id: 1236
                var168;
                Int16(3);
                if (true) { (UInt8(108), (Int32(2)&127..=Int32(124)&127:(-14)|1), var496, var1205) } else { var1247 } 
            } else if (true) { // block id: 1258
                ();
                -(-115);
                if (false) { (var921, var1267, var496, var1205) } else { var1247 } 
            } else { // block id: 1272
                ();
                var650;
                (var921, (Int32(3)&127..Int32(72)&127:((-26)|1)), var470, (-67))
            };
            var loopTimeVar1293 : Int64 = 0;
            do {
                loopTimeVar1293++;
                var1288 * 14.0;
                ()
            } while ((true) && loopTimeVar1293 < 100 ) ;
            match ((UInt32(232)&127..UInt32(147)&127:12|1)) {
                case _ => 
                    [var427, true, false, var1303, false, true, false, false, true, var1303];
                    var1312;
                    var727
                
            }
        };
        ()
    }
;
    public static var var1343 : Range<Int16> = (Int16(109)&127..=Int16(29)&127:(-78)|1);
    static let var1364 : UInt8 = UInt8(231);
    static let var1415 : UInt64 = UInt64(56);
    public init(namedParam1331 ! : (UInt16, Range<Int32>, Range<UInt32>, UInt64, Float64), optionalParam1332 ! : Int64 = 6, namedParam1334 ! : Range<UInt8>) { // block id: 1335
        let var1349 : Range<Int32> = (Int32(61)&127..Int32(92)&127:(Int64(UInt64(UInt16(55)))|1));
        let var1357 : Range<UInt32> = (UInt32(43)&127..UInt32(86)&127:(-1)|1);
        var var1376 : Range<UInt32> = (UInt32(115)&127..=UInt32(229)&127:(-85)|1);
        (if (var427) { (var1343, var1323, (var754, var1349, var1357, var182, var1288), ([var1364, var1364, var921, UInt8(112), UInt8(41), UInt8(77), UInt8(235), UInt8(46), UInt8(61), UInt8(18)], var1376, UInt64(173), var675, UInt8(104), var1349), var1364, [var940, var940, 'p', 'y', 'W', 'C', var940, var940, 'z', var940], var1186) } else { ((Int16(-98)&127..=Int16(-21)&127:116|1), ((var727&127..Int16(-105)&127:((-1)|1)), var438, var754, var1357), (var754, (Int32(-34)&127..Int32(-13)&127:(-78)|1), (UInt32(197)&127..UInt32(51)&127:113|1), var182, var1288), (var632, (UInt32(76)&127..=UInt32(147)&127:(-90)|1), var1415, var650, var1364, var1349), UInt8(116), var350, var1186) } , match (Option<Int32>.Some(Int32(19))) {
            case _ : Array<Rune> => 
                var1364;
                var940
            
            case _ : Range<Int8> => 
                'a'
            
            case _ => 
                var350;
                namedParam1331;
                if (false) { var940 } else { 'B' } 
            
        })[0]
    }
;
    public static let var1487 : Bool = true;
    static let var1662 : (Array<Bool>, Range<UInt32>, (Range<Int16>, String, UInt16, Range<UInt32>), Array<Bool>, UInt32, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64)) = ([true, true, false, false, true, false, false, true, true, true], (UInt32(152)&127..=UInt32(221)&127:(-87)|1), ((Int16(29)&127..Int16(-60)&127:(116|1)), """
r'+8y
e${var736}@XOO
""", UInt16(244), (UInt32(163)&127..UInt32(99)&127:((-114)|1))), [true, false, false, false, false, false, true, true, false, false], UInt32(6), (false, Int8(53), (-56.0), ###"h4/${var736}hV/=$8 "###, UInt8(12), UInt32(215), (), UInt8(163), (-104)));
    static var var1789 : Float32 = Float32(105.0);
    public static var var3694 : Bool = true;
    private static let var3733 : (Range<Int16>, String, UInt16, Range<UInt32>) = ((Int16(124)&127..Int16(-94)&127:(15|1)), ###":${var736}^atW0${var736}IE(("###, UInt16(98), (UInt32(176)&127..UInt32(4)&127:((-52)|1)));
    static var var3747 : UInt16 = UInt16(51);
    public init(namedParam1902 ! : Array<Rune>, namedParam1903 ! : Range<Int64>, namedParam1904 ! : (UInt16, Range<Int32>, Range<UInt32>, UInt64, Float64)) { // block id: 1905
        let var3688 : (Range<Int16>) -> ((Range<Int16>, (Range<Int16>, String, UInt16, Range<UInt32>), (UInt16, Range<Int32>, Range<UInt32>, UInt64, Float64), (Array<UInt8>, Range<UInt32>, UInt64, Unit, UInt8, Range<Int32>), UInt8, Array<Rune>, Range<Int8>), Rune) = func1907;
        try { // block id: 3691
            if (var3694) { (Int16(-92)&127..=Int16(33)&127:67|1) } else { (Int16(-58)&127..var3700&127:(var168|1)) } 
        } finally { // block id: 3703
            (var3700&127..=Int16(-14)&127:(var900|1))
        }|>var3688;
        var508;
        let var3753 : UInt32 = UInt32(89);
        match {
            case (Option<Bool>.Some(true) ?? false) => 
            var2384;
            var675;
            (-4)
            case _ => 
            if (var1303) { var1135 } else { ((Int16(-34)&127..=Int16(-115)&127:(20|1)), var3733, (var3747, var622, (UInt32(48)&127..var3753&127:((-4)|1)), var182, var1288), var3077, UInt8(176), var350, var1186) } ;
            (-57)
        } / ((try { // block id: 3764
            (UInt32(154)&127..=UInt32(138)&127:49|1);
            var168
        } finally { // block id: 3767
            34
        }) | 1)
    }
;
    let var3852 : UInt8 = UInt8(97);
    private static var var4920 : Int64 = (-115);
    static var var4968 : Int8 = Int8(63);
    public static func func1600(param1601 : Float64, param1602 : (Array<Bool>, Range<UInt32>, (Range<Int16>, String, UInt16, Range<UInt32>), Array<Bool>, UInt32, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64)), param1603 : ((Range<Int16>, (Range<Int16>, String, UInt16, Range<UInt32>), (UInt16, Range<Int32>, Range<UInt32>, UInt64, Float64), (Array<UInt8>, Range<UInt32>, UInt64, Unit, UInt8, Range<Int32>), UInt8, Array<Rune>, Range<Int8>), Rune)) : Bool { // block id: 1604
        var var4896 : (Range<Int32>) -> Option<Int32> = func1606;
        let var4909 : Range<Int32> = (Int32(-10)&127..=Int32(59)&127:111|1);
        match (Option<((Range<Int16>, (Range<Int16>, String, UInt16, Range<UInt32>), (UInt16, Range<Int32>, Range<UInt32>, UInt64, Float64), (Array<UInt8>, Range<UInt32>, UInt64, Unit, UInt8, Range<Int32>), UInt8, Array<Rune>, Range<Int8>), Rune)>.None) {
            case _ : ((Range<Int16>, (Range<Int16>, String, UInt16, Range<UInt32>), (UInt16, Range<Int32>, Range<UInt32>, UInt64, Float64), (Array<UInt8>, Range<UInt32>, UInt64, Unit, UInt8, Range<Int32>), UInt8, Array<Rune>, Range<Int8>), Rune) => 
                ();
                var4905;
                var4909
            
            case caseVar4913 => 
                var2088;
                (var4309&127..=var470&127:(var4920|1))
            
            case _ => 
                var1730;
                if (var427) { (Int32(69)&127..=Int32(-15)&127:(-73)|1) } else { (Int32(108)&127..=Int32(108)&127:47|1) } 
            
        }|>var4896;
        let var4933 : ?Array<Interface32> = ([UInt8(53), UInt8(190), UInt8(79), UInt8(113), UInt8(193), UInt8(161), UInt8(144), UInt8(219), UInt8(250), UInt8(66)] as Array<Interface32>);
        (match {
            case (var4933 is (Range<UInt64>, Array<UInt8>, Option<(Range<Int8>, UInt64, Range<UInt8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Option<Class28>, String, Range<Int8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Rune)>, Interface32) -> Enum1988) => 
            Int8(-82)
            case false => 
            'e';
            (Int16(77)&127..Int16(-121)&127:(var4287|1));
            var2384
            case _ => 
            var650;
            var4949
        }&127..Int8(Int8(110)) | try { // block id: 4955
            var1303 ||= false;
            Int8(65)
        } catch (_) { // block id: 4960
            var2384
        }&127:(match (try { // block id: 4964
                var2384 %= ((var4968) | 1);
                if (false) { Option<Unit>.Some(var650) } else { Option<Unit>.Some(()) } 
            } catch (_) { // block id: 4976
                var650;
                param1601 ** Float64(Int32(var1288) & 3);
                if (false) { var3005 } else { var3005 } 
            }) {
            case caseVar4987 => 
                var4790;
                var1205
            
            case caseVar4993 : Array<Bool> => 
                (-70)
            
            case caseVar4998 => 
                ();
                39 * 70
            
            case _ => 
                ();
                ['n', 'i', 'B', 'z', 'p', 'N', '9', 'a', '9', 'v'];
                var900
            
        }|1));
        match (var131) {
            case _ => 
                false
            
        }
    }
;
    public func func2432(namedParam2433 ! : Option<Int16>, namedParam2434 ! : (Bool) -> Int64, namedParam2437 ! : Range<Int8>, namedParam2438 ! : Option<Rune>) : Rune { // block id: 2439
        var loopTimeVar2455 : Int64 = 0;
        while ((var1303) && loopTimeVar2455 < 100 ) {
            loopTimeVar2455++;
            var loopTimeVar2447 : Int64 = 0;
            do {
                loopTimeVar2447++;

            } while ((var1303) && loopTimeVar2447 < 100 ) ;
            var loopTimeVar2453 : Int64 = 0;
            while ((var1303) && loopTimeVar2453 < 100 ) {
                loopTimeVar2453++;
                var1191
            }
        };
        let var2618 : Enum550 = Enum550.defaultValue;
        match (func2458(optionalParam2463 : if (var2528) { // block id: 2545
                if (var2528) { var2549 } else { [false, false, var2528, var2528, false, true, true, false, false, true] } ;
                var2104 *= var2522;
                10.0 / Float64((Int32(50.0)) | 1)
            } else { // block id: 2604
                14.0
            })) {
            case (caseVar2608,caseVar2609,_ : Option<Int16>,_,_ : Range<UInt16>,caseVar2610 : (UInt8, Range<Int32>, Int32, Int64),caseVar2611,_,caseVar2612 : Array<Aggregate13>) => 
                if (false) { var1191 } else { var2618 } ;
                var1323;
                if (true) { var2618 } else { Enum550.defaultValue } 
            
            case _ => 
                ();
                Enum550.defaultValue
            
        };
        var1951
    }

    public func isClosed(): Bool { return true }
    public func close(): Unit {}
}


public func func415() : Array<Rune> { // block id: 269
    var var333 : (UInt16, Range<Int32>, Range<UInt32>, UInt64, Float64) = (UInt16(Int8(Int8(107))), (Int32(116)&127..=Int32(UInt32(152))&127:((-117)|1)), (UInt32(224)&127..=UInt32(198)&127:119|1), UInt64(228), Float64(Float32(Float32(Float32(4.0)))));
    try { // block id: 271
        match {
            case false => 
            ();
            var var278 : Int32 = Int32(Int32(-81));
            var278--;
            let var282 : (UInt16, Range<Int32>, Range<UInt32>, UInt64, Float64) = (UInt16(UInt16(206)), (Int32(123)&127..=Int32(Int16(UInt8(20)))&127:(Int64(UInt32(70))|1)), (UInt32(235)&127..=UInt32(83)&127:1|1), UInt64(Int32(Int16(-13))), Float64(Float32(Float32(104.0))));
            var282
            case false => 
            (UInt16(120), (Int32(-51)&127..Int32(79)&127:((-21)|1)), (UInt32(60)&127..var61&127:((-121)|1)), var182, 97.0)
            case _ => 
            var var316 : Range<UInt64> = (UInt64((-3))&127..UInt64(86)&127:(Int64(UInt16(Int16(40)))|1));
            var316;
            (UInt16(229), (Int32(-22)&127..Int32(-65)&127:(-98)|1), (UInt32(68)&127..=UInt32(29)&127:34|1), UInt64(26), (-57.0))
        }
    } finally { // block id: 330
        var182;
        var333
    };
    var350
}

func func447(param448 : Range<UInt16>) : Range<Int32> { // block id: 449
    (Int8(-69)&127..Int8(94)&127:(-52)|1);
    var var475 : Int32 = Int32(UInt16(247));
    match (Option<Class28>.None) {
        case caseVar455 : Rune => 
            (Int32(-114)&127..=Int32(-76)&127:50|1)
        
        case _ => 
            if (true) { (UInt16(47)&127..UInt16(129)&127:51|1) } else { (UInt16(241)&127..=UInt16(229)&127:(var168|1)) } ;
            (var470&127..var475&127:(var168|1))
        
        case caseVar481 : Range<UInt32> => 
            let var486 : Range<Int32> = (Int32(-15)&127..Int32(60)&127:(-23)|1);
            if (true) { var486 } else { (Int32(-48)&127..var470&127:(var168|1)) } 
        
        case _ => 
            (var496&127..=Int32(-18)&127:(var168|1))
        
    }
}

public enum Enum550 {
    defaultValue |
    enumValue3210(Option<(Range<Int8>, UInt64, Range<UInt8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Option<Class28>, String, Range<Int8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Rune)>, Rune, (Bool) -> Int64, Option<(Range<Int8>, UInt64, Range<UInt8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Option<Class28>, String, Range<Int8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Rune)>)
}

func func816(param817 : Bool) : Int64 { // block id: 818
    match ((var828 ?? var831)[4]) {
        case caseVar897 => 
            var900
        
        case caseVar908 : Float64 => 
            if (var427) { ((Int8(-75)&127..Int8(126)&127:((-22)|1)), var182, (UInt8(105)&127..var921&127:(57|1)), (false, Int8(-69), caseVar908, var438, var921, var61, (), var921, (-114)), Option<Class28>.Some(Class28()), var438, (Int8(106)&127..=Int8(65)&127:(-84)|1), var131, var940) } else { var831 } ;
            57 % (((-68)) | 1)
        
        case _ : Float32 => 
            var900 + 40
        
        case _ => 
            var675;
            var182 += UInt64(180);
            var168 << ((var900) & 7)
        
        case _ => 
            var168 % ((var168) | 1);
            -var900
        
    }
}


func func1131(param1132 : Range<Int8>) : (Range<Int16>, (Range<Int16>, String, UInt16, Range<UInt32>), (UInt16, Range<Int32>, Range<UInt32>, UInt64, Float64), (Array<UInt8>, Range<UInt32>, UInt64, Unit, UInt8, Range<Int32>), UInt8, Array<Rune>, Range<Int8>) { // block id: 1133
    var1135
}



func func1760(param1761 : Range<UInt8>) : Unit { // block id: 1762

}


public enum Enum1988 {
    defaultValue |
    enumValue2031(Range<Int64>, Interface31, (Bool) -> Int64, Range<UInt16>) |
    enumValue2091((Range<Int8>) -> (Range<Int16>, (Range<Int16>, String, UInt16, Range<UInt32>), (UInt16, Range<Int32>, Range<UInt32>, UInt64, Float64), (Array<UInt8>, Range<UInt32>, UInt64, Unit, UInt8, Range<Int32>), UInt8, Array<Rune>, Range<Int8>), (Array<UInt8>, Range<UInt32>, UInt64, Unit, UInt8, Range<Int32>), (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Option<Int16>)
}

public func func1999(param2000 : Aggregate13) : Enum1988 { // block id: 2001
    var var2013 : ?Unit = Option<Unit>.None;
    var var2039 : Range<Int64> = ((-17)&127..=(-62)&127:111|1);
    var loopTimeVar2055 : Int64 = 0;
    ([Option<Unit>.Some(()), var2013, Option<Unit>.None, var2013, var2013, var2013, var2013, var2013, Option<Unit>.None, var2013][9] ?? do {
        loopTimeVar2055++;
        let var2043 : (Bool) -> Int64 = { lambdaParameter2046 : Bool => Int64(UInt16(Int8(Int8(-105)))) };
        if (false) { Enum1988.enumValue2031(var2039, var668, var2043, var508) } else { Enum1988.defaultValue } 
    } while ((!false) && loopTimeVar2055 < 100 ) );
    Option<Unit>.None;
    let var2065 : ?Int16 = Option<Int16>.Some(Int16(UInt16(201)));
    let var2124 : Int8 = Int8(-7);
    match (if (var427) { (if (var427) { Option<Int16>.Some(Int16(80)) } else { var2065 } ) } else { (var470 as Int16) } ) {
        case caseVar2073 : UInt16 => 
            Enum1988.defaultValue
        
        case _ => 
            var921 <<= ((var921) & 7);
            var470 <<= ((var496) & 7);
            if (true) { var2088 } else { Enum1988.enumValue2091(func1131, ([var921, var921, var2104, var921, var921, var921, var921, UInt8(107), UInt8(190), UInt8(180)], (var61&127..var61&127:((-1)|1)), var182, var1730, var921, var622), (var1931, var2124, (-1.0), "6<)SxOa{t\\L", var2104, UInt32(16), (), var921, 84), Option<Int16>.Some(Int16(-121))) } 
        
        case _ => 
            var1730;
            var1288;
            var2088
        
    }
}

public func func2148(param2149 : Range<Int64>) : (Array<Bool>, Range<UInt32>, (Range<Int16>, String, UInt16, Range<UInt32>), Array<Bool>, UInt32, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64)) { // block id: 2150
    var1013
}

public func func2153(param2154 : UInt32) : (Array<Bool>, Range<UInt32>, (Range<Int16>, String, UInt16, Range<UInt32>), Array<Bool>, UInt32, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64)) { // block id: 2155
    var1013
}

public func func2158(param2159 : Range<Int64>) : UInt32 { // block id: 2160
    var var2182 : Range<UInt32> = (UInt32(158)&127..UInt32(14)&127:38|1);
    var var2185 : (UInt16, Range<Int32>, Range<UInt32>, UInt64, Float64) = (UInt16(233), (Int32(122)&127..=Int32(UInt16(80))&127:(Int64(UInt64(195))|1)), (UInt32(13)&127..UInt32(132)&127:(-126)|1), UInt64(UInt32(211)), (-117.0));
    if (((var2167, ((var1704&127..Int16(111)&127:(113|1)), var438, UInt16(71), var2182), var2185, ([UInt8(240), UInt8(251), UInt8(16), UInt8(250), UInt8(202), UInt8(122), UInt8(210), UInt8(51), UInt8(182), UInt8(106)], (UInt32(226)&127..=UInt32(65)&127:8|1), UInt64(137), var1730, var2104, (Int32(35)&127..Int32(84)&127:20|1)), var2104, var350, var2208) is (Bool) -> Int64)) { match (Option<Rune>.None) {
        case _ : Array<UInt32> => 
            if (true) { Class28() } else { Class28() } ;
            [UInt32(182), UInt32(65), UInt32(212), UInt32(199), UInt32(179), UInt32(181), UInt32(93), UInt32(38), UInt32(49), UInt32(115)]
        
        case caseVar2226 : Range<Int32> => 
            (89&127..=10&127:50|1);
            if (var427) { [UInt32(97), UInt32(91), UInt32(174), UInt32(148), UInt32(16), var61, UInt32(13), UInt32(225), UInt32(25), UInt32(24)] } else { [UInt32(231), UInt32(238), UInt32(204), UInt32(146), UInt32(224), UInt32(58), UInt32(35), UInt32(155), UInt32(9), UInt32(166)] } 
        
        case _ => 
            var1205 <<= ((var168) & 7);
            ();
            if (true) { var2253 } else { var2253 } 
        
        case caseVar2258 => 
            [UInt32(206), UInt32(142), UInt32(12), UInt32(92), UInt32(251), UInt32(67), UInt32(216), UInt32(252), UInt32(246), UInt32(221)]
        
        case _ => 
            var131;
            [var61, UInt32(73), var61, var61, var61, var61, UInt32(207), var61, var61, UInt32(241)]
        
    } } else { [UInt32(83), UInt32(213), UInt32(155), UInt32(27), var61, UInt32(168), UInt32(114), UInt32(61), UInt32(76), var61] } [0]
}

func func2143(param2144 : Float64) : Enum550 { // block id: 2145
    var var2288 : (Range<Int64>) -> UInt32 = { lambdaParameter2291 : Range<Int64> => UInt32(22) };
    match (([(65&127..(-126)&127:(-122)|1), (108&127..28&127:(-47)|1), ((-70)&127..=94&127:3|1), (90&127..82&127:60|1), ((-124)&127..(-80)&127:(-72)|1), ((-90)&127..37&127:35|1), (47&127..=96&127:(-34)|1), ((-127)&127..=11&127:(-1)|1), ((-68)&127..41&127:83|1), ((-55)&127..31&127:64|1)][1]|>(var2288~>func2153))) {
        case (caseVar2300 : Option<Int16>,caseVar2301,(caseVar2302 : Float32,_ : Array<UInt8>,caseVar2303,_ : Option<Int32>),caseVar2304 : Unit,_ : Int32,(_ : Array<Aggregate13>,caseVar2305,_,caseVar2306,caseVar2307 : Interface32,caseVar2308 : Array<Aggregate13>,caseVar2309 : (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64),_,_ : Range<Int8>)) => 
            var1730;
            var1013;
            var2314
        
        case caseVar2333 => 
            var1730;
            (UInt16(97), (Int32(119)&127..Int32(97)&127:(38|1)), (UInt32(243)&127..UInt32(49)&127:(-17)|1), var182, 75.0)
        
        case _ => 
            var2314
        
    };
    var828;
    Enum550.defaultValue
}

func func2458(optionalParam2459 ! : (Range<UInt8>) -> Unit = func1760, optionalParam2463 ! : Float64 = 94.0) : (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64) { // block id: 2465
    ();
    var var2478 : (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64) = ((UInt64(18) is Option<Int16>), Int8(-111), Float64(3.0), "<..A&|e=Nu", UInt8(149), UInt32(240), (), UInt8(130), (-116));
    match (Class28.var736) {
        case ###".cvENUh|i("### | "4Qi>|$6i54" | """
\"*}a{L
K)k9/
""" => 
            ();
            Option<Unit>.Some(var675);
            var2478
        
        case "_+tw%;kz^&" | "tm(~LP&@d[" => 
            var675;
            var754;
            (false, var2384, optionalParam2463, var438, UInt8(62), var61, var1730, UInt8(232), 119)
        
        case _ => 
            Int32(122) % ((Int32(-47)) | 1);
            (var427, Int8(115), (-55.0), "+Ko\"U<#V[Q", var2517, UInt32(83), (), var2522, 19)
        
    }
}

public enum Enum2691 {
    defaultValue
}





func func1912(param1913 : Range<Int32>) : Bool { // block id: 1914
    let var1972 : Rune = 'k';
    func func1991(param1992 : Range<UInt64>, namedParam1993 ! : Array<UInt8>, namedParam1994 ! : Option<(Range<Int8>, UInt64, Range<UInt8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Option<Class28>, String, Range<Int8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Rune)>, namedParam1995 ! : Interface32) : Enum1988 { // block id: 1996
        var1730;
        let var2351 : (Float64) -> Enum550 = func2143;
        match (((-58.0)|>var2351)) {
            case caseVar2356 : UInt64 => 
                's';
                var373
            
            case _ : UInt16 => 
                var373
            
            case defaultValue => 
                var675;
                Aggregate13()
            
            case _ => 
                var var2373 : Int16 = Int16(43);
                var2373 %= ((Int16(50)) | 1);
                ();
                var373
            
        }|>func1999
    }
;
    var var2631 : ?Int16 = (((Int16(-92)&127..Int16(Int8(-111))&127:(Int64((-7))|1)), ((Int16(82)&127..=Int16(-6)&127:23|1), "gJbsI_x?/M", UInt16(Int16(73)), (UInt32(159)&127..UInt32(22)&127:(-66)|1)), (UInt16(243), (Int32(125)&127..=Int32(-110)&127:(33|1)), (UInt32(250)&127..UInt32(119)&127:((-67)|1)), UInt64(Int16(11)), Float64(Float32(71.0))), ([UInt8(78), UInt8(238), UInt8(8), UInt8(210), UInt8(216), UInt8(252), UInt8(19), UInt8(138), UInt8(132), UInt8(85)], (UInt32(39)&127..=UInt32(53)&127:65|1), UInt64(220), (), UInt8(50), (Int32(-56)&127..Int32(-66)&127:94|1)), UInt8(226), ['P', 'I', 'm', 'n', 'Q', 'K', 'e', '7', 'P', 'm'], (Int8(-43)&127..=Int8(-119)&127:(Int64(UInt16(140))|1))) as Int16);
    var var2685 : (Bool) -> Int64 = func816;
    let var2749 : Rune = 'y';
    [(if (var1303) { Option<Rune>.None } else { Option<Rune>.None }  ?? if (true) { // block id: 1927
        var1303 &&= var1931;
        var1951
    } else { // block id: 1953
        UInt16(39);
        if (var427) { var1951 } else { var1951 } 
    }), if (false) { [var940, 'r', var940, var1951, 'r', 'D', var1951, var940, var1972, var940] } else { [var1951, 'Y', 'v', var940, var1972, 'z', 'i', 'i', 'X', 'm'] } [3], match (func1991((UInt64(160)&127..=UInt64(225)&127:83|1), namedParam1993 : [UInt8(181), UInt8(58), UInt8(204), UInt8(252), UInt8(190), UInt8(251), UInt8(184), UInt8(132), UInt8(136), UInt8(57)], namedParam1994 : Option<(Range<Int8>, UInt64, Range<UInt8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Option<Class28>, String, Range<Int8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Rune)>.Some(((var2384&127..var2384&127:(var168|1)), UInt64(234), (UInt8(46)&127..=UInt8(154)&127:33|1), var131, Option<Class28>.Some(var1734), """
En;Mn
 c!$F
""", (Int8(41)&127..=Int8(-111)&127:117|1), var2398, var1951)), namedParam1995 : Class28(namedParam592 : Aggregate13()))) {
        case _ => 
            var675;
            var2104 ^ UInt8(6);
            'F'
        
    }, var2429.func2432(namedParam2433 : var2631, namedParam2434 : var2685, namedParam2437 : (Int8(59)&127..Int8(-38)&127:54|1), namedParam2438 : Option<Rune>.None), if (match (var2694) {
        case _ => 
            var182 < UInt64(132)
        
    }) { (if (true) { '2' } else { var1951 } ) } else { 'B' } , try { // block id: 2707
        var675;
        (var2517&127..UInt8(173)&127:(var168|1));
        if (var427) { var1951 } else { '8' } 
    } catch (_) { // block id: 2717
        var470 += Int32(-54);
        Float32(-98.0);
        if (var2528) { var940 } else { var940 } 
    }, match (Enum2691.defaultValue) {
        case _ => 
            var1951
        
    }, if (match (var2631) {
        case _ : Range<Int16> => 
            false
        
        case _ => 
            true
        
        case _ => 
            var182 &= var182;
            [var2749, var1972, 'N', 'e', '1', '3', 'o', var2749, var940, 'f'];
            Int32(-14) >= Int32(-38)
        
    }) { // block id: 2763
        'j'
    } else { // block id: 2765
        var2749
    }, 'I', try { // block id: 2769
        if (true) { (UInt16(11)&127..=var754&127:((-79)|1)) } else { (UInt16(213)&127..UInt16(195)&127:((-35)|1)) } ;
        ();
        var2749
    } catch (_) { // block id: 2782
        (Int8(-69)&127..=Int8(39)&127:(88|1));
        var1730;
        'J'
    }];
    let var2805 : Aggregate13 = Aggregate13(Enum1988.enumValue2091(func1131, ([UInt8(214), UInt8(125), UInt8(249), UInt8(225), UInt8(235), UInt8(127), UInt8(182), UInt8(119), UInt8(101), UInt8(202)], (UInt32(187)&127..UInt32(65)&127:(-122)|1), UInt64(UInt32(136)), (), UInt8(194), (Int32(-74)&127..=Int32(-125)&127:42|1)), ((UInt8(118) is (Aggregate13) -> Enum1988), Int8(52), Float64((-3.0)), """
oH\\67
C^q)r
""", UInt8(Int8(25)), UInt32(UInt8(175)), (), UInt8(UInt8(252)), (-90)), ((86.0 as Class28) as Int16)), (Int32(UInt32(UInt16(181)))&127..=Int32(UInt16(55))&127:((-8)|1)));
    let var3224 : Bool = ((((Int16(120)&127..Int16(-52)&127:16|1), "XnA%f$` X6", UInt16(UInt16(70)), (UInt32(41)&127..UInt32(130)&127:122|1)) as Option<Unit>) is Array<Aggregate13>);
    var var3254 : UInt64 = UInt64(Int8(Int8(-91)));
    var var3294 : Unit = ();
    var loopTimeVar3296 : Range<UInt64> = (UInt64(195)&127..=UInt64(95)&127:(Int64(Int32(66))|1));
    for (i in loopTimeVar3296 where try { // block id: 2791
        ();
        (-73) * (-45);
        var2528
    } catch (_) { // block id: 2797
        let var2936 : Aggregate13 = Aggregate13((Enum550.defaultValue, Int32(32)));
        var var3239 : Unit = ();
        [Aggregate13(), var373, Aggregate13(), Aggregate13(), var2805, var2805, var373, var2936, var2936, Aggregate13((Enum550.enumValue3210(Option<(Range<Int8>, UInt64, Range<UInt8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Option<Class28>, String, Range<Int8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Rune)>.Some((var2208, var182, (UInt8(67)&127..=UInt8(237)&127:100|1), (var3224, Int8(126), 92.0, var438, UInt8(48), var61, var3239, UInt8(153), var900), var2949, ###"VdTA-SjHl3"###, var2208, var131, 'c')), var940, func816, Option<(Range<Int8>, UInt64, Range<UInt8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Option<Class28>, String, Range<Int8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Rune)>.Some((var1186, var3254, (var2522&127..var2522&127:(var168|1)), (false, Int8(68), (-112.0), var438, var2522, var61, (), UInt8(14), (-124)), Option<Class28>.None, ###"%Oss^4,*O*"###, (Int8(67)&127..=Int8(67)&127:53|1), (var2528, Int8(-112), (-69.0), "i#&I`Ras4L", var921, UInt32(251), (), UInt8(228), 31), 'J'))), var496))];
        (UInt64(39)&127..=var182&127:(var168|1));
        true
    }) {
        var3294
    };
    var var3323 : (Array<UInt8>, Range<UInt32>, UInt64, Unit, UInt8, Range<Int32>) = ([UInt8(150), UInt8(UInt8(132)), UInt8(66), UInt8(12), UInt8(Int8(Int8(-99))), UInt8(Int8(UInt8(61))), UInt8(UInt8(UInt8(125))), UInt8(UInt8(UInt8(211))), UInt8(148), UInt8(28)], (UInt32(Int16(Int16(86)))&127..=UInt32(Int16(UInt16(190)))&127:(Int64(UInt16(85))|1)), UInt64(0), (), UInt8(242), (Int32(-33)&127..=Int32(98)&127:(-13)|1));
    var var3366 : Int16 = Int16(56);
    match (try { // block id: 3305
            var var3309 : Range<UInt32> = (UInt32(192)&127..UInt32(UInt8(33))&127:(Int64(UInt64(UInt32(252)))|1));
            ([UInt8(232), UInt8(40), UInt8(220), UInt8(54), UInt8(39), UInt8(234), UInt8(155), UInt8(185), UInt8(215), UInt8(67)], var3309, var3254, var675, UInt8(33), (Int32(-99)&127..Int32(-60)&127:60|1));
            UInt8(169);
            var3323
        } catch (_) { // block id: 3358
            Class28(namedParam592 : var2805);
            var3323
        } finally { // block id: 3362
            Int16(-22) - var3366;
            var3323
        }) {
        case (_,caseVar3371,caseVar3372,_ : String,_ : Aggregate13,caseVar3373 : Array<Rune>) => 
            ();
            var168
        
        case (_,caseVar3379,_ : Option<Int32>,_,_,caseVar3380) => 
            var3294;
            var61 = var61;
            94
        
        case _ => 
            ();
            (-110) << (((-55)) & 7)
        
    } >= (try { // block id: 3399
        [UInt8(116), UInt8(171), UInt8(43), UInt8(38), UInt8(42), UInt8(247), UInt8(146), UInt8(9), UInt8(248), UInt8(51)];
        Option<Option<Unit>>.Some(var3166);
        var3404
    } catch (_) { // block id: 3406
        Option<Int64>.None
    } ?? if (false) { // block id: 3410
        var2384;
        var3294;
        90 << ((var168) & 7)
    } else { // block id: 3416
        ();
        var2384--;
        (-125)
    })
}

public func func1907(param1908 : Range<Int16>) : ((Range<Int16>, (Range<Int16>, String, UInt16, Range<UInt32>), (UInt16, Range<Int32>, Range<UInt32>, UInt64, Float64), (Array<UInt8>, Range<UInt32>, UInt64, Unit, UInt8, Range<Int32>), UInt8, Array<Rune>, Range<Int8>), Rune) { // block id: 1909
    let var3422 : (Range<Int32>) -> Bool = func1912;
    if (((var496&127..=Int32(121)&127:((-90)|1))|>var3422)) { // block id: 3428
        var1186;
        let var3431 : ?Int16 = Option<Int16>.Some(Int16(Int8(51)));
        var3431;
        var675
    } else if (try { // block id: 3437
        var var3439 : Bool = false;
        var3439
    } catch (_) { // block id: 3441
        var3443;
        var182 %= ((var182) | 1);
        var2528
    }) { // block id: 3475
        var182 >>= ((UInt64(206)) & 7);
        var675;
        var loopTimeVar3486 : Int64 = 0;
        while ((var427) && loopTimeVar3486 < 100 ) {
            loopTimeVar3486++;
            var2949;
            var1730
        }
    };
    var var3508 : UInt16 = UInt16(UInt16(130));
    let var3590 : ?Array<Option<Unit>> = Option<Array<Option<Unit>>>.None;
    try { // block id: 3488
        match (Class28(namedParam1331 : (var3110, var622, (var61&127..var61&127:(102|1)), var182, (-128.0)), optionalParam1332 : (-38), namedParam1334 : var2825)) {
            case caseVar3504 : Range<Int32> => 
                var3508++
            
            case caseVar3513 : (UInt16, Range<Int32>, Range<UInt32>, UInt64, Float64) => 
                var470 -= Int32(-50)
            
            case _ => 
                var182 %= ((UInt64(95)) | 1);
                ()
            
        };
        if (true) { var3527 } else { var3527 } 
    } catch (_) { // block id: 3578
        match (var2429) {
            case caseVar3583 : Interface31 => 
                if (false) { Enum2691.defaultValue } else { Enum2691.defaultValue } ;
                var3590;
                if (false) { var3595 } else { var3527 } 
            
            case caseVar3655 : UInt64 => 
                var675;
                ();
                if (var2528) { (var1135, var940) } else { (var1135, var940) } 
            
            case _ => 
                var3595
            
            case _ => 
                var3527
            
        }
    } finally { // block id: 3674
        if (true) { // block id: 3677
            if (true) { var3527 } else { var3527 } 
        } else { // block id: 3682
            if (false) { var3527 } else { var3527 } 
        }
    }
}


func func1893(optionalParam1894 ! : Array<UInt8> = [UInt8(120), UInt8(155), UInt8(186), UInt8(199), UInt8(141), UInt8(39), UInt8(183), UInt8(71), UInt8(180), UInt8(69)]) : Class28 { // block id: 1896
    (UInt8(167)&127..UInt8(131)&127:(-58)|1)|>func1760;
    let var3771 : Range<Int64> = ((-96)&127..(-54)&127:3|1);
    var var3799 : UInt32 = UInt32(97);
    var var3814 : UInt64 = UInt64(Int32(Int32(-93)));
    Class28(namedParam1902 : ['X', 'R', '6', 'T', 'X', 'J', 'r', 'F', 'S', 'n'], namedParam1903 : var3771, namedParam1904 : if ((Option<(Range<Int8>, UInt64, Range<UInt8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Option<Class28>, String, Range<Int8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Rune)>.Some(((Int8(-76)&127..Int8(103)&127:68|1), var182, (UInt8(6)&127..var3782&127:(var1205|1)), var131, Option<Class28>.Some(Class28()), "yGL/bT^*R+", var1186, (true, Int8(-57), var1288, var438, UInt8(245), var3799, var675, UInt8(248), var900), var940)) is Range<UInt32>)) { // block id: 3805
        var1135;
        let var3810 : Range<Int32> = (Int32(-106)&127..Int32(-45)&127:7|1);
        (var754, var3810, (UInt32(27)&127..=UInt32(45)&127:(-30)|1), var3814, var1288)
    } else { // block id: 3819
        ();
        (var3110, (Int32(116)&127..=Int32(-56)&127:(-65)|1), (UInt32(186)&127..=UInt32(91)&127:(-55)|1), UInt64(249), var1288)
    })
}

public func func1858(namedParam1859 ! : String, optionalParam1860 ! : Option<(Range<Int8>, UInt64, Range<UInt8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Option<Class28>, String, Range<Int8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Rune)> = Option<(Range<Int8>, UInt64, Range<UInt8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Option<Class28>, String, Range<Int8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Rune)>.None, optionalParam1862 ! : (Enum550, Int32) = (Enum550.defaultValue, Int32(-104)), namedParam1866 ! : (Float32, UInt16, Range<Int64>, Int32)) : UInt8 { // block id: 1867
    match (try { // block id: 1870
            var470 *= var470;
            Option<Int32>.Some(var496)
        } catch (e: Exception) { // block id: 1876
            var var1879 : Int16 = Int16(UInt16(Int16(Int16(UInt16(210)))));
            var1879++;
            var1525
        } finally { // block id: 1886
            var1525
        }) {
        case _ => 
            ()
        
    };
    func1893(optionalParam1894 : try { // block id: 3828
        let var3832 : Array<UInt8> = [UInt8(228), UInt8(122), UInt8(46), UInt8(217), UInt8(169), UInt8(36), UInt8(229), UInt8(21), UInt8(166), UInt8(53)];
        if (true) { var3832 } else { var3832 } 
    } catch (e: Exception) { // block id: 3835
        var182 /= ((var182) | 1);
        ();
        [UInt8(66), var2104, UInt8(220), var2517, UInt8(93), var3782, var3782, UInt8(173), UInt8(243), var2104]
    }).var3852
}



public func func1782(param1783 : (Array<UInt8>, Range<UInt32>, UInt64, Unit, UInt8, Range<Int32>)) : (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64) { // block id: 1784
    Float32((Class28.var1789));
    let var1832 : Range<UInt8> = (UInt8(Int8(-49))&127..UInt8(29)&127:(57|1));
    var var4154 : () -> Array<Rune> = func415;
    let var4214 : Aggregate13 = Aggregate13((Enum550.enumValue3210((['w', 'U', 'J', 'h', 'y', 't', 'Z', 'f', 'C', '8'] as (Range<Int8>, UInt64, Range<UInt8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Option<Class28>, String, Range<Int8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Rune)), 'K', func816, ('Q' as (Range<Int8>, UInt64, Range<UInt8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Option<Class28>, String, Range<Int8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Rune))), Int32(-93)));
    match ([try { // block id: 1794
            var1303 && var1303;
            if (var1303) { var373 } else { var373 } 
        } finally { // block id: 1802
            if (false) { var373 } else { var373 } 
        }, if (var427) { var373 } else { var373 } , if (var1303) { Aggregate13() } else { Aggregate13() } , var1817[1], match (var1832) {
            case _ => 
                if (false) { var1013 } else { var1013 } ;
                if (true) { Aggregate13() } else { Aggregate13() } 
            
        }, Aggregate13(optionalParam1850 : func415, namedParam1853 : (var921, (Int32(-81)&127..=Int32(85)&127:(-115)|1), Int32(59), 101), namedParam1854 : Class28(), namedParam1855 : (UInt32(111)&127..=UInt32(237)&127:44|1)), try { // block id: 4125
            var3110 %= ((var754) | 1);
            let var4135 : (UInt8, Range<Int32>, Int32, Int64) = (UInt8(UInt8(176)), (Int32(-65)&127..Int32(-114)&127:24|1), Int32(-69), Int64(UInt8(Int8(Int8(107)))));
            if (var4131) { Aggregate13(namedParam1853 : var4135, namedParam1854 : var2429, namedParam1855 : (UInt32(173)&127..UInt32(36)&127:(-58)|1)) } else { Aggregate13() } 
        } finally { // block id: 4148
            if (false) { Aggregate13() } else { Aggregate13(optionalParam1850 : var4154, namedParam1853 : var4157, namedParam1854 : Class28(namedParam1902 : var350, namedParam1903 : var4167, namedParam1904 : var2314), namedParam1855 : (UInt32(167)&127..=UInt32(74)&127:(var168|1))) } 
        }, try { // block id: 4182
            var1951;
            Aggregate13(namedParam1853 : (UInt8(106), (Int32(-110)&127..var496&127:(37|1)), Int32(-87), var4193), namedParam1854 : var2429, namedParam1855 : (UInt32(246)&127..UInt32(136)&127:89|1))
        } catch (e: Exception) { // block id: 4198
            var1730;
            var675;
            Aggregate13(optionalParam1850 : func415, namedParam1853 : var4157, namedParam1854 : Class28(namedParam592 : Aggregate13()), namedParam1855 : (var4208&127..UInt32(22)&127:(var4193|1)))
        } finally { // block id: 4212
            var4214
        }, Aggregate13(), Aggregate13(namedParam1853 : var4157, namedParam1854 : var2429, namedParam1855 : var4230)]) {
        case caseVar4241 => 
            var var4249 : UInt64 = UInt64(Int16(UInt16(UInt16(Int8(112)))));
            if (var1303) { Option<(Range<Int8>, UInt64, Range<UInt8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Option<Class28>, String, Range<Int8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Rune)>.Some((var1186, var4249, (UInt8(222)&127..UInt8(143)&127:121|1), var2398, Option<Class28>.Some(var1734), var438, var1186, (true, Int8(73), var1288, var438, UInt8(239), var61, (), var2517, var168), var940)) } else { Option<(Range<Int8>, UInt64, Range<UInt8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Option<Class28>, String, Range<Int8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Rune)>.Some((var1186, var182, (UInt8(219)&127..=UInt8(29)&127:(-114)|1), (true, Int8(21), (-20.0), """
pQ\"qL
?F7YR
""", UInt8(126), UInt32(206), (), UInt8(120), var4287), Option<Class28>.None, ###"T5ae]L3Rj>"###, var2208, (false, Int8(-73), (-48.0), var438, var2522, var61, (), var2522, var1205), 'h')) } 
        
        case caseVar4305 => 
            var4309 &= var496;
            var675;
            if (var1931) { var828 } else { var828 } 
        
        case _ => 
            var1730;
            var1186;
            Option<(Range<Int8>, UInt64, Range<UInt8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Option<Class28>, String, Range<Int8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Rune)>.Some(((Int8(-59)&127..=Int8(-105)&127:41|1), var182, var2825, (var1303, var2384, (-42.0), var438, var2517, UInt32(120), var675, var921, var4336), Option<Class28>.Some(Class28()), "D+(6<RNOHX", var1186, (false, Int8(-49), var1288, var438, UInt8(38), UInt32(129), (), var921, var1205), 'm'))
        
    };
    match (match (if (var4131) { var4358 } else { var4371 } ) {
            case caseVar4385 : (Range<Int8>, UInt64, Range<UInt8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Option<Class28>, String, Range<Int8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Rune) => 
                (var4309&127..Int32(-79)&127:(var4193|1))
            
            case _ : Range<UInt16> => 
                (Int32(-4)&127..Int32(-107)&127:(-99)|1)
            
            case caseVar4397 => 
                let var4400 : Range<Int32> = (Int32(-113)&127..Int32(-64)&127:(-127)|1);
                var4400
            
            case caseVar4404 => 
                (var2528, var2384, (-92.0), "FrSHVPJ0d\"", UInt8(17), var61, var675, var2104, var1205);
                (Int32(-98)&127..=Int32(-24)&127:(-80)|1)
            
            case _ => 
                var1730;
                var4421
            
        }) {
        case caseVar4425 => 
            var182 = var182;
            var131
        
        case _ : Enum550 => 
            var1303 &&= true;
            var var4445 : Unit = ();
            (true, Int8(55), var1288, """
_$3\\/
zvg0)
""", var921, var4208, var4445, UInt8(245), var4336)
        
        case _ => 
            (-105.0) + 93.0;
            var675;
            (true, var2384, var1288, "+C;xwg[a{y\\", UInt8(55), var61, var1730, UInt8(91), (-87))
        
    }
}

public func func1776(param1777 : ((Range<Int16>, (Range<Int16>, String, UInt16, Range<UInt32>), (UInt16, Range<Int32>, Range<UInt32>, UInt64, Float64), (Array<UInt8>, Range<UInt32>, UInt64, Unit, UInt8, Range<Int32>), UInt8, Array<Rune>, Range<Int8>), Rune)) : (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64) { // block id: 1778
    try { // block id: 1780
        var3077|>func1782
    } catch (e: Exception) { // block id: 4467
        (var668 as Array<Option<Unit>>);
        if (false) { // block id: 4472
            var var4477 : Unit = ();
            if (var4131) { Option<Unit>.Some(var4477) } else { Option<Unit>.Some(()) } ;
            var921++;
            (true, var2384, (-59.0), """
O;q[9
'YMjh
""", var3782, var61, var4477, UInt8(136), 5)
        } else if (true) { // block id: 4494
            (false, Int8(-19), var1288, var438, var2522, var61, var675, var2522, 48)
        } else { // block id: 4505
            var182 ** (UInt64(237) & 3);
            var131
        }
    } finally { // block id: 4510
        var4230;
        ();
        let var4532 : Float64 = (-69.0);
        try { // block id: 4514
            var675;
            var4157;
            (true, Int8(-57), var1288, """
4\\'nU
>LkxV
""", UInt8(6), var61, var1730, var2517, 30)
        } catch (e: Exception) { // block id: 4527
            (true, var2384, var4532, "L0<.1UH^\\_", var3782, var4208, (), var921, 65)
        }
    }
}


public func func1656(param1657 : UInt16) : (UInt8, Range<Int32>, Int32, Int64) { // block id: 1658
    Class28.var1662;
    match ((((var1704&127..Int16(-19)&127:(var900|1)), "G|Hm@v<Yde", UInt16(218), (UInt32(132)&127..=UInt32(77)&127:((-115)|1))) as Int32)) {
        case caseVar1716 : Array<Aggregate13> => 
            var675
        
        case caseVar1721 => 
            ()
        
        case _ => 
            var470++;
            ();
            var1730
        
    };
    var1734.func1737(18, if (false) { (Float32(-35.0), var754, (61&127..(-101)&127:(var900|1)), var470) } else { (var404, UInt16(104), var4167, var470) } )
}


public func func1628(param1629 : Option<(Range<Int8>, UInt64, Range<UInt8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Option<Class28>, String, Range<Int8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Rune)>) : Array<Rune> { // block id: 1630
    let var1641 : ?(UInt8, Range<Int32>, Int32, Int64) = Option<(UInt8, Range<Int32>, Int32, Int64)>.Some((UInt8(12), (Int32(104)&127..Int32(-94)&127:69|1), Int32(85), 116));
    var var4619 : (UInt16) -> (UInt8, Range<Int32>, Int32, Int64) = func1656;
    let var4623 : Option<Bool> = Option<Bool>.Some(((Int16(-100)&127..Int16(-34)&127:(Int64(UInt16(129))|1)) is Range<UInt16>));
    (try { // block id: 1633
        ();
        var1205 <<= (((-3)) & 7);
        Option<(UInt8, Range<Int32>, Int32, Int64)>.None
    } catch (e: Exception) { // block id: 1639
        var1641
    } finally { // block id: 1648
        var var1651 : Int8 = Int8(-113);
        var1651 *= var1651;
        var1641
    } ?? (match (var4623) {
        case _ => 
            if (true) { (var4637&127..UInt16(136)&127:(var168|1)) } else { (UInt16(205)&127..var3110&127:(48|1)) } ;
            ();
            UInt16(190)
        
    }|>var4619));
    let var4655 : Option<(Range<Int16>, String, UInt16, Range<UInt32>)> = Option<(Range<Int16>, String, UInt16, Range<UInt32>)>.None;
    let var4679 : Array<Rune> = ['1', 'X', 'o', '3', 'Y', 'n', 'f', '1', 'V', 'E'];
    match (match ((var4655 ?? var1323)) {
            case _ => 
                var1303 ||= false;
                (var1135, var940);
                ((Int16(-88)&127..Int16(-100)&127:(var4193|1)), var438, var754, var4230)
            
        }) {
        case _ => 
            if (var2528) { var4679 } else { [var1951, var1951, var940, var1951, 'F', var1951, 'z', var940, 'Z', var4702] } 
        
    }
}

public func func1620(param1621 : (Bool) -> Int64) : Array<Rune> { // block id: 1624
    ();
    ();
    ((Int32(-68)&127..Int32(-48)&127:123|1) as (Range<Int8>, UInt64, Range<UInt8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Option<Class28>, String, Range<Int8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Rune))|>func1628
}

public func func4708(param817 : Bool) : Int64 { // block id: 818
    match ((var828 ?? var831)[4]) {
        case caseVar897 => 
            var900
        
        case caseVar908 : Float64 => 
            if (var427) { ((Int8(-75)&127..Int8(126)&127:((-22)|1)), var182, (UInt8(105)&127..var921&127:(57|1)), (false, Int8(-69), caseVar908, var438, var921, var61, (), var921, (-114)), Option<Class28>.Some(Class28()), var438, (Int8(106)&127..=Int8(65)&127:(-84)|1), var131, var940) } else { var831 } ;
            57 % (((-68)) | 1)
        
        case _ : Float32 => 
            var900 + 40
        
        case _ => 
            var675;
            var182 += UInt64(180);
            var168 << ((var900) & 7)
        
        case _ => 
            var168 % ((var168) | 1);
            -var900
        
    }
}



public func func1606(param1607 : Range<Int32>) : Option<Int32> { // block id: 1608
    func func1610(param1611 : UInt8, namedParam1612 ! : (Range<Int8>) -> (Range<Int16>, (Range<Int16>, String, UInt16, Range<UInt32>), (UInt16, Range<Int32>, Range<UInt32>, UInt64, Float64), (Array<UInt8>, Range<UInt32>, UInt64, Unit, UInt8, Range<Int32>), UInt8, Array<Rune>, Range<Int8>)) : Option<Int32> { // block id: 1615
        ((if (false) { (func4708|>func1620) } else { var350 } ) as Int32)
    }
;
    let var4719 : ?((Range<Int16>, (Range<Int16>, String, UInt16, Range<UInt32>), (UInt16, Range<Int32>, Range<UInt32>, UInt64, Float64), (Array<UInt8>, Range<UInt32>, UInt64, Unit, UInt8, Range<Int32>), UInt8, Array<Rune>, Range<Int8>), Rune) = Option<((Range<Int16>, (Range<Int16>, String, UInt16, Range<UInt32>), (UInt16, Range<Int32>, Range<UInt32>, UInt64, Float64), (Array<UInt8>, Range<UInt32>, UInt64, Unit, UInt8, Range<Int32>), UInt8, Array<Rune>, Range<Int8>), Rune)>.Some((((Int16(-16)&127..Int16(72)&127:78|1), ((Int16(-113)&127..=Int16(78)&127:(117|1)), "Rf]4_iBu K", UInt16(233), (UInt32(196)&127..=UInt32(119)&127:(28|1))), (UInt16(156), (Int32(66)&127..=Int32(34)&127:(-86)|1), (UInt32(95)&127..=UInt32(172)&127:71|1), UInt64(11), 48.0), ([UInt8(206), UInt8(147), UInt8(15), UInt8(224), UInt8(80), UInt8(27), UInt8(35), UInt8(1), UInt8(184), UInt8(129)], (UInt32(63)&127..UInt32(250)&127:(32|1)), UInt64(82), (), UInt8(67), (Int32(-56)&127..Int32(-35)&127:(-25)|1)), UInt8(UInt8(238)), ['7', 'f', 'Z', 's', 'O', '2', 'r', 'k', 'f', '6'], (Int8(-75)&127..=Int8(121)&127:(-72)|1)), 'q'));
    func1610(((var4719 as UInt8) ?? UInt8(183)), namedParam1612 : func1131);
    match (var182 << ((match ([UInt32(117), UInt32(69), UInt32(99), UInt32(34), UInt32(175), UInt32(68), UInt32(70), UInt32(86), UInt32(176), UInt32(27)]) {
            case caseVar4765 => 
                var1186;
                var182 + var182
            
            case caseVar4773 => 
                ();
                var182
            
            case _ => 
                UInt64(15)
            
            case _ : (UInt8, Range<Int32>, Int32, Int64) => 
                var3700;
                UInt64(120)
            
            case _ => 
                ();
                var4790;
                var182 - UInt64(81)
            
        }) & 7)) {
        case 252 | 18 => 
            var var4799 : Option<(Range<Int8>, UInt64, Range<UInt8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Option<Class28>, String, Range<Int8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Rune)> = ((UInt8(29)&127..UInt8(242)&127:52|1) as (Range<Int8>, UInt64, Range<UInt8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Option<Class28>, String, Range<Int8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Rune));
            var4799
        
        case _ : Array<UInt32> => 
            Option<(Range<Int8>, UInt64, Range<UInt8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Option<Class28>, String, Range<Int8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Rune)>.None
        
        case _ => 
            let var4809 : Option<(Range<Int8>, UInt64, Range<UInt8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Option<Class28>, String, Range<Int8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Rune)> = Option<(Range<Int8>, UInt64, Range<UInt8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Option<Class28>, String, Range<Int8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Rune)>.None;
            var4809
        
    };
    var var4844 : ??Int32 = Option<Option<Int32>>.Some(((UInt16(69)&127..UInt16(150)&127:120|1) as Int32));
    (match (try { // block id: 4818
            Option<(Range<Int8>, UInt64, Range<UInt8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Option<Class28>, String, Range<Int8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Rune)>.Some(var831);
            (UInt8(90), (Int32(-55)&127..Int32(71)&127:(87|1)), Int32(-45), var1205)
        } finally { // block id: 4829
            var2528 = var1931;
            (var2522, param1607, var496, (-124))
        }) {
        case _ : Option<Int64> => 
            if (var427) { var4844 } else { var4844 } 
        
        case _ : (UInt16, Range<Int32>, Range<UInt32>, UInt64, Float64) => 
            var4790;
            if (false) { Option<Option<Int32>>.None } else { Option<Option<Int32>>.Some(Option<Int32>.Some(Int32(-46))) } 
        
        case _ : Option<(Float32, UInt16, Range<Int64>, Int32)> => 
            UInt8(64);
            Option<Option<Int32>>.None
        
        case _ => 
            var404 *= var404;
            var4844
        
        case _ => 
            Option<Array<Option<Unit>>>.None;
            if (var1303) { var4844 } else { var4844 } 
        
    } ?? ((if (var1303) { [var2981, var3005, var3005, Option<Unit>.None, var2981, Option<Unit>.Some(var1730), Option<Unit>.None, Option<Unit>.None, Option<Unit>.Some(var1730), var3166] } else { var3443 } ) as Int32))
}

public func func1593(param1594 : Int32) : Range<UInt32> { // block id: 1595
    let var5016 : (Array<Bool>, Range<UInt32>, (Range<Int16>, String, UInt16, Range<UInt32>), Array<Bool>, UInt32, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64)) = ([true, true, true, true, true, true, false, false, false, true], (UInt32(105)&127..=UInt32(136)&127:(-108)|1), ((Int16(-90)&127..=Int16(110)&127:(-89)|1), "LB48DI(5t4", UInt16(UInt8(62)), (UInt32(40)&127..UInt32(Int8(43))&127:((-7)|1))), [true, false, true, false, false, true, false, true, false, false], UInt32(UInt8(82)), ((Class28(namedParam1902 : ['f', 'Y', '0', 'u', 'p', '4', 'y', 'I', 'z', 'Z'], namedParam1903 : ((-97)&127..=55&127:((-98)|1)), namedParam1904 : (UInt16(130), (Int32(-101)&127..Int32(-123)&127:((-119)|1)), (UInt32(135)&127..UInt32(8)&127:(-75)|1), UInt64(94), (-80.0))) is Option<Option<Unit>>), Int8(Int8(Int8(-49))), (-77.0), "$^zo>a1(0k", UInt8(Int8(-29)), UInt32(UInt16(Int8(-11))), (), UInt8(2), Int64(Int16(-90))));
    let var5084 : UInt16 = UInt16(116);
    var var5119 : Range<UInt32> = (UInt32(109)&127..=UInt32(Int16(97))&127:((-51)|1));
    if ((Class28.func1600(106.0, var5016, (((Int16(-25)&127..var1704&127:(var168|1)), ((Int16(-18)&127..Int16(-127)&127:(-54)|1), """
1)vtD
aL:+2
""", var5084, (UInt32(192)&127..UInt32(159)&127:70|1)), (UInt16(120), var4421, (UInt32(137)&127..=UInt32(71)&127:(-15)|1), var182, (-18.0)), ([UInt8(159), var2104, var921, UInt8(49), var2104, var921, var3782, var3782, UInt8(124), UInt8(202)], (UInt32(3)&127..=UInt32(26)&127:(-67)|1), var182, (), UInt8(184), var4421), UInt8(61), ['x', 'D', 'w', 'T', 'W', 'Y', 'z', 'F', 'Z', '1'], (Int8(22)&127..=var4949&127:(51|1))), '8')))) { var4230 } else { var5119 } 
}



func func415(param416 : UInt8) : (UInt8, Range<Int32>, Int32, Int64) { // block id: 417
    var var501 : (Range<UInt16>) -> Range<Int32> = { lambdaParameter504 : Range<UInt16> => (Int32(-49)&127..Int32(-35)&127:112|1) };
    var var513 : Unit = ();
    var var516 : Range<Int32> = (Int32(UInt8(UInt8(142)))&127..=Int32(Int8(106))&127:(Int64(Int64(UInt32(Int16(76))))|1));
    var var564 : Int8 = Int8(-92);
    ([UInt8(254), UInt8(236), UInt8(92), UInt8(207), UInt8(193), UInt8(4), UInt8(63), UInt8(101), UInt8(237), UInt8(57)][3], if ((var427, Int8(3), (-119.0), var438, UInt8(156), UInt32(119), (), UInt8(184), 99)[0]) { (var508|>var501) } else { try { // block id: 511
        var513;
        var516
    } finally { // block id: 527
        (Int32(85)&127..Int32(89)&127:(-8)|1)
    } } , -if (true) { // block id: 532
        var513;
        var182 ^= UInt64(15);
        var470
    } else if (false) { // block id: 539
        var496
    } else { // block id: 541
        var427 &&= false;
        var513;
        var496 ^ Int32(97)
    }, match ((Enum550.defaultValue, Int32(84))[0]) {
        case _ => 
            var513;
            var564--;
            -var168
        
        case _ => 
            var var573 : UInt8 = UInt8(246);
            var573 |= var573;
            var168
        
        case _ => 
            let var581 : ?Class28 = (UInt8(69) as Class28);
            var581;
            (-40)
        
        case defaultValue => 
            var var1445 : (UInt16, Range<Int32>, Range<UInt32>, UInt64, Float64) = (UInt16(UInt16(UInt8(UInt8(217)))), (Int32(0)&127..=Int32(30)&127:(-104)|1), (UInt32(167)&127..=UInt32(Int16(Int8(-76)))&127:(Int64(UInt16(68))|1)), UInt64(UInt16(51)), Float64(Float64(Float32(124.0))));
            if (var427) { Class28(namedParam592 : var373, optionalParam593 : var1323) } else { Class28(namedParam1331 : var1445, namedParam1334 : (UInt8(109)&127..UInt8(146)&127:(-7)|1)) } ;
            ();
            var1205 ^ (-47)
        
        case _ => 
            (-68) ^ var900
        
    });
    func func1492(namedParam1493 ! : Rune, optionalParam1494 ! : Int32 = Int32(Int16(-102))) : Unit { // block id: 1497

    }
;
    func func1504() : UInt32 { // block id: 1505
        var var5206 : Unit = ();
        match (if (false) { [var373, Aggregate13(), Aggregate13(namedParam1516 : '7'), var373, Aggregate13(namedParam1516 : var4702), var373, var5156, Aggregate13((Enum550.defaultValue, var4309)), var5156, var373] } else { var1817 } [6]) {
            case _ : Range<UInt16> => 
                let var5171 : (Float32, UInt16, Range<Int64>, Int32) = (Float32(Float32(Float32(7.0))), UInt16(UInt8(Int8(-105))), (Int64(Int8(UInt8(124)))&127..=Int64(Int32(10))&127:(Int64(Int16(-88))|1)), Int32(119));
                Option<(Float32, UInt16, Range<Int64>, Int32)>.Some(var5171);
                var4336 >>= ((var4193) & 7);
                UInt32(105) >> ((UInt32(217)) & 7)
            
            case _ : (Array<UInt8>, Range<UInt32>, UInt64, Unit, UInt8, Range<Int32>) => 
                -var61
            
            case _ : Option<(Range<Int16>, String, UInt16, Range<UInt32>)> => 
                var2384 ^= Int8(45);
                var5206;
                UInt32(234)
            
            case caseVar5211 => 
                -UInt32(14)
            
            case _ => 
                var4208
            
        }
    }
;
    func func1480() : Option<(UInt8, Range<Int32>, Int32, Int64)> { // block id: 1481
        if (!(Class28.var1487)) { // block id: 1489
            ();
            func1492(namedParam1493 : 'P', optionalParam1494 : var496);
            UInt32(250)
        } else if (false) { // block id: 1502
            func1504()
        } else { // block id: 5218
            UInt32(127)
        };
        var var5299 : Int16 = Int16(Int16(Int8(-88)));
        match (if (false) { (if (var1303) { [((-45)&127..=(-116)&127:(-101)|1), ((-110)&127..96&127:(-87)|1), (58&127..(-114)&127:(-73)|1), ((-24)&127..(-26)&127:94|1), (30&127..=(-26)&127:(-124)|1), ((-57)&127..(-119)&127:(-31)|1), (81&127..=62&127:(-122)|1), (33&127..(-112)&127:100|1), (35&127..83&127:(-60)|1), (98&127..(-118)&127:98|1)] } else { [(82&127..87&127:114|1), ((-72)&127..=(-26)&127:55|1), ((-90)&127..(-99)&127:(-93)|1), var4167, (39&127..28&127:(-26)|1), var4167, ((-63)&127..=115&127:72|1), ((-34)&127..var168&127:(36|1)), var4167, ((-32)&127..var4193&127:(105|1))] } ) } else { match ([(109&127..66&127:(-14)|1), ((-96)&127..55&127:(-53)|1), (14&127..(-124)&127:71|1), (115&127..=(-75)&127:(-70)|1), ((-36)&127..(-4)&127:(-69)|1), (114&127..=48&127:100|1), ((-61)&127..71&127:40|1), ((-4)&127..=(-69)&127:57|1), (90&127..=8&127:7|1), (26&127..(-95)&127:(-27)|1)]) {
                case caseVar5247 => 
                    var1303 &&= false;
                    [(var4193&127..var4287&127:((-39)|1)), (var168&127..=66&127:(var1205|1)), var4167, var5263, (33&127..=123&127:(81|1)), (var900&127..=var4336&127:(var4193|1)), ((-1)&127..30&127:79|1), ((-46)&127..=var4336&127:(var168|1)), (var5284&127..var900&127:(var5288|1)), (74&127..(-10)&127:(112|1))]
                
                case _ : UInt32 => 
                    var5299 &= Int16(-77);
                    let var5305 : Array<Range<Int64>> = [((-112)&127..(-14)&127:121|1), ((-38)&127..=(-69)&127:45|1), ((-92)&127..=(-118)&127:5|1), ((-109)&127..=32&127:30|1), (115&127..(-58)&127:(Int64(UInt64(Int16(-32)))|1)), (69&127..(-127)&127:(14|1)), (109&127..=107&127:(-61)|1), ((-77)&127..2&127:124|1), (Int64(Int32(94))&127..=58&127:(30|1)), (Int64((-63))&127..=(-3)&127:(Int64(Int32(UInt32(90)))|1))];
                    var5305
                
                case _ => 
                    [var4702, 'u', var940, 'q', var1951, 'r', var4702, var4702, 'g', var5348];
                    var3110 |= UInt16(71);
                    [((-51)&127..(-109)&127:77|1), ((-46)&127..=68&127:(-83)|1), ((-109)&127..(-62)&127:(-67)|1), ((-91)&127..(-4)&127:(-84)|1), ((-59)&127..=57&127:114|1), (40&127..(-65)&127:26|1), (62&127..=(-46)&127:95|1), ((-69)&127..(-55)&127:(-37)|1), ((-109)&127..66&127:109|1), (0&127..(-94)&127:63|1)]
                
            } } ) {
            case caseVar5356 => 
                var5360 %= ((Int16(-13)) | 1);
                var var5366 : ?(UInt8, Range<Int32>, Int32, Int64) = Option<(UInt8, Range<Int32>, Int32, Int64)>.None;
                var5366
            
            case caseVar5370 : Array<UInt8> => 
                var var5377 : ?(UInt8, Range<Int32>, Int32, Int64) = Option<(UInt8, Range<Int32>, Int32, Int64)>.Some((UInt8(Int8(-44)), (Int32(106)&127..Int32(-26)&127:(-39)|1), Int32(82), 114));
                if (var5374) { var5377 } else { Option<(UInt8, Range<Int32>, Int32, Int64)>.None } 
            
            case _ : Array<UInt32> => 
                var168;
                Option<(UInt8, Range<Int32>, Int32, Int64)>.Some((var2517, var622, var4309, 64))
            
            case _ => 
                Option<(UInt8, Range<Int32>, Int32, Int64)>.Some(var4157)
            
        }
    }
;
    let var5434 : Int64 = (-84);
    (func1480() ?? (match (var4309) {
        case _ => 
            var5374 &&= var2528;
            ();
            if (true) { var5416 } else { Option<(UInt8, Range<Int32>, Int32, Int64)>.None } 
        
    } ?? (Option<(UInt8, Range<Int32>, Int32, Int64)>.Some((UInt8(98), (Int32(112)&127..=Int32(107)&127:101|1), Int32(-24), 43)) ?? (UInt8(45), (Int32(-31)&127..Int32(-7)&127:(var168|1)), var4309, var5434))))
}

public func func411(param412 : Rune) : (UInt8, Range<Int32>, Int32, Int64) { // block id: 413
    var var5437 : (UInt8) -> (UInt8, Range<Int32>, Int32, Int64) = func415;
    match (match ((var4208&127..=var61&127:(109|1))) {
            case _ : UInt8 => 
                var5449;
                if (false) { (var2517, (var4309&127..var496&127:(var1205|1)), var470, (-32)) } else { var4157 } 
            
            case caseVar5464 : Array<UInt8> => 
                var4157
            
            case _ : Option<Option<Unit>> => 
                var var5471 : ?(UInt8, Range<Int32>, Int32, Int64) = (Class28(namedParam1902 : ['J', 'g', 'b', 'r', 'i', '1', 's', 'H', 'L', 'k'], namedParam1903 : ((-108)&127..=(-128)&127:(-9)|1), namedParam1904 : (UInt16(UInt16(97)), (Int32(-127)&127..Int32(-104)&127:(101|1)), (UInt32(167)&127..=UInt32(152)&127:(60|1)), UInt64((-25)), Float64(68.0))) as (UInt8, Range<Int32>, Int32, Int64));
                var5471;
                var4790;
                if (false) { var4157 } else { (UInt8(28), var4421, var470, (-114)) } 
            
            case _ => 
                var4157
            
        }) {
        case caseVar5505 => 
            ();
            UInt8(26)
        
        case (caseVar5511,_ : Interface32,caseVar5512 : (Range<Int8>, UInt64, Range<UInt8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Option<Class28>, String, Range<Int8>, (Bool, Int8, Float64, String, UInt8, UInt32, Unit, UInt8, Int64), Rune),_) => 
            ();
            var921
        
        case caseVar5518 : Array<Aggregate13> => 
            var5521;
            UInt8(226)
        
        case _ => 
            var5521;
            var2104
        
    }|>var5437
}

main(): Int64 {
    try {
        let var52 : Float64 = Float64(Float32(Float32(Float32(Float32(-53.0)))));
        let var106 : Unit = ();
        let var154 : Int8 = Int8(118);
        let var158 : String = ###"yq]\\+\\]r-?"###;
        let var173 : Class28 = Class28();
        let var212 : Array<Interface32> = Array<Interface32>(10){ i => Class28() };
        func func207(param208 : Range<UInt32>, param209 : Class28) : Array<Interface32> { // block id: 210
            var212
        }
;
        let var230 : Int32 = Int32(UInt32(UInt16(UInt8(207))));
        let var252 : Class28 = Class28();
        func func6(param7 : Int16, param8 : Int64) : Unit { // block id: 9
            let var92 : UInt32 = UInt32(69);
            let var110 : Bool = ('j' is Bool);
            let var238 : Range<UInt32> = (UInt32(Int8(UInt8(UInt8(186))))&127..=UInt32(170)&127:(Int64(Int16(UInt16(213)))|1));
            func func258(optionalParam259 ! : Option<Class28> = Option<Class28>.Some(Class28()), namedParam262 ! : UInt16, optionalParam263 ! : Range<UInt32> = (UInt32(147)&127..=UInt32(0)&127:120|1), namedParam265 ! : Range<UInt8>) : Array<Rune> { // block id: 266
                func415()
            }
;
            let var357 : (Range<Int16>, String, UInt16, Range<UInt32>) = ((Int16(74)&127..=Int16(-44)&127:9|1), "3s:0`^!!^N", UInt16(92), (UInt32(151)&127..=UInt32(126)&127:126|1));
            func func82() : Rune { // block id: 83
                var var128 : Bool = false;
                let var161 : UInt8 = UInt8(UInt8(24));
                try { // block id: 85
                    try (resource = Class28()) { // block id: 87

                    } catch (_) { // block id: 88
                        var61 **= (var92 & 3);
                        UInt32(125) << ((var61) & 7);
                        var var99 : Bool = (UInt32(3) is UInt64);
                        var99 ||= true
                    };
                    var var119 : Bool = (Float64(Float64(Float32(Float32(-64.0)))) is UInt64);
                    try { // block id: 104
                        var106;
                        if (var110) { Class28() } else { Class28() } 
                    } catch (e: Exception) { // block id: 116
                        var119 ||= true;
                        if (var128) { var131 } else { (var119, var154, var52, var158, var161, var92, (), UInt8(78), var168) } ;
                        if (var119) { var173 } else { var173 } 
                    }
                } catch (_) { // block id: 176
                    try { // block id: 178
                        var106;
                        -var182
                    } finally { // block id: 185
                        var106;
                        Int16(-96);
                        UInt64(168)
                    };
                    (Option<Class28>.None ?? var173)
                };
                func207((UInt16(226), (var230&127..=var230&127:(124|1)), var238, UInt64(2), (-44.0))[2], var252)[4];
                func258(optionalParam259 : (var92 as Class28), namedParam262 : var357[2], namedParam265 : (UInt8(43)&127..var161&127:(39|1)))[2]
            }
;
            var loopTimeVar370 : Int64 = 0;
            do {
                loopTimeVar370++;
                func func22() : Rune { // block id: 23
                    match (Class28.var35[4]) {
                        case 50 => 
                            var52 - var52;
                            var61 += UInt32(229);
                            var52
                        
                        case 129 => 
                            param8;
                            Class28();
                            (-43.0)
                        
                        case _ : UInt32 => 
                            (-68.0)
                        
                        case _ => 
                            ();
                            var52
                        
                    };
                    func82()
                }
;
                func22()
            } while ((((Aggregate13.var18) is Int32)) && loopTimeVar370 < 100 ) 
        }
;
        func6(match (var373) {
            case _ => 
                ();
                Int16(-79)
            
        }, match (var106) {
            case _ => 
                85 / (((-6)) | 1)
            
            case () | () | () | () => 
                var182++;
                var168
            
            case caseVar395 => 
                var168 + var168
            
            case _ => 
                var404 = var404;
                var168
            
        });
        var var5529 : (Rune) -> (UInt8, Range<Int32>, Int32, Int64) = func411;
        ('Q'|>var5529)[3]
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var61*var61), 64)
        crccheck.updateBuffer(UInt64(var154*var154), 64)
        crccheck.updateBuffer(UInt64(var168*var168), 64)
        crccheck.updateBuffer(UInt64(var182*var182), 64)
        crccheck.updateBuffer(UInt64(var230*var230), 64)
        crccheck.updateBuffer(UInt64(var470*var470), 64)
        crccheck.updateBuffer(UInt64(var496*var496), 64)
        crccheck.updateBuffer(UInt64(var754*var754), 64)
        crccheck.updateBuffer(UInt64(var900*var900), 64)
        crccheck.updateBuffer(UInt64(var921*var921), 64)
        crccheck.updateBuffer(UInt64(var1205*var1205), 64)
        crccheck.updateBuffer(UInt64(var1704*var1704), 64)
        crccheck.updateBuffer(UInt64(var2104*var2104), 64)
        crccheck.updateBuffer(UInt64(var2384*var2384), 64)
        crccheck.updateBuffer(UInt64(var2517*var2517), 64)
        crccheck.updateBuffer(UInt64(var2522*var2522), 64)
        crccheck.updateBuffer(UInt64(var3110*var3110), 64)
        crccheck.updateBuffer(UInt64(var3700*var3700), 64)
        crccheck.updateBuffer(UInt64(var3782*var3782), 64)
        crccheck.updateBuffer(UInt64(var4193*var4193), 64)
        crccheck.updateBuffer(UInt64(var4208*var4208), 64)
        crccheck.updateBuffer(UInt64(var4287*var4287), 64)
        crccheck.updateBuffer(UInt64(var4309*var4309), 64)
        crccheck.updateBuffer(UInt64(var4336*var4336), 64)
        crccheck.updateBuffer(UInt64(var4637*var4637), 64)
        crccheck.updateBuffer(UInt64(var4949*var4949), 64)
        crccheck.updateBuffer(UInt64(var5284*var5284), 64)
        crccheck.updateBuffer(UInt64(var5288*var5288), 64)
        crccheck.updateBuffer(UInt64(var5360*var5360), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_expected_double_arrow_in_case
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_unexpected_declaration_in_scope
// ASSERT: scan parse_missing_body
// ASSERT: scan parse_redundant_modifier
// ASSERT: scan parse_expected_expr_or_decl_in
// ASSERT: scan parse_expected_left_brace
// ASSERT: scan parse_expected_case


