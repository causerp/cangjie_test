/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output


public var var33 : Int64 = Int64(Int8(-64))
public let var88 : ?Bool = (UInt32(143) as Bool)
var var109 : Enum65 = Enum65.defaultValue
public var var120 : Bool = true
public var var127 : Unit = ()
public var var158 : Aggregate154<Rune> = Aggregate154<Rune>()
public var var176 : (UInt8, Option<Option<Bool>>, Rune, Rune, UInt8) = (UInt8(254), (Int16(82) as Option<Bool>), 't', 'Z', UInt8(Int8(69)))
public let var189 : String = """
?3rcu
7~IGy
"""
public let var211 : UInt8 = UInt8(24)
var var218 : Rune = 'R'
var var221 : Rune = 'n'
let var271 : Class266 = Class266()
public var var330 : (Unit, UInt32, Array<UInt32>, Array<Bool>) = ((), UInt32(Int8(Int8(Int8(-36)))), [UInt32(232), UInt32(151), UInt32(136), UInt32(113), UInt32(78), UInt32(108), UInt32(185), UInt32(23), UInt32(51), UInt32(186)], [(UInt16(UInt16(188)) is (Unit, UInt32, Array<UInt32>, Array<Bool>)), (Enum65.defaultValue is (UInt32, Float32, Rune, String, Unit, Unit, Rune)), (Float32(Float32(14.0)) is UInt16), true, (Class266() is Rune), (Aggregate154<Rune>() is Range<Int8>), false, true, ('U' is Float64), (Int32(69) is Range<Int16>)])
public let var364 : Range<UInt8> = (UInt8(102)&127..=UInt8(209)&127:(Int64(Int8(UInt8(UInt8(43))))|1))
let var418 : ?(UInt32, Float32, Rune, String, Unit, Unit, Rune) = Option<(UInt32, Float32, Rune, String, Unit, Unit, Rune)>.None
var var442 : Interface269 = Class266()
public var var521 : UInt32 = UInt32(90)
let var706 : ((Unit, UInt32, Array<UInt32>, Array<Bool>), UInt16) = (((), UInt32(241), [UInt32(8), UInt32(218), UInt32(250), UInt32(238), UInt32(Int8(22)), UInt32(105), UInt32(UInt32(21)), UInt32(UInt32(203)), UInt32(253), UInt32(Int8(96))], [(Option<Enum65>.None is Range<Int16>), ((UInt64(11)&127..=UInt64(219)&127:((-78)|1)) is (Rune) -> Enum65), false, (Int16(121) is Option<Int64>), false, true, true, true, ([UInt32(42), UInt32(81), UInt32(77), UInt32(225), UInt32(175), UInt32(181), UInt32(22), UInt32(45), UInt32(63), UInt32(222)] is (UInt32) -> Unit), (Option<Option<Bool>>.None is Int16)]), UInt16(UInt16(119)))
public let var760 : Bool = true
let var852 : Rune = '6'
public var var921 : Int8 = Int8(Int8(-119))
public var var925 : Int8 = Int8(Int8(24))
public let var1310 : ?Int64 = Option<Int64>.None
let var1324 : ?(UInt32, Float32, Rune, String, Unit, Unit, Rune) = ((UInt32(105)&127..=UInt32(189)&127:((-85)|1)) as (UInt32, Float32, Rune, String, Unit, Unit, Rune))
let var1367 : Array<Option<(UInt32, Float32, Rune, String, Unit, Unit, Rune)>> = [Option<(UInt32, Float32, Rune, String, Unit, Unit, Rune)>.None, Option<(UInt32, Float32, Rune, String, Unit, Unit, Rune)>.None, Option<(UInt32, Float32, Rune, String, Unit, Unit, Rune)>.None, Option<(UInt32, Float32, Rune, String, Unit, Unit, Rune)>.None, (UInt16(Int8(39)) as (UInt32, Float32, Rune, String, Unit, Unit, Rune)), Option<(UInt32, Float32, Rune, String, Unit, Unit, Rune)>.None, Option<(UInt32, Float32, Rune, String, Unit, Unit, Rune)>.None, Option<(UInt32, Float32, Rune, String, Unit, Unit, Rune)>.None, ((125&127..121&127:(-116)|1) as (UInt32, Float32, Rune, String, Unit, Unit, Rune)), Option<(UInt32, Float32, Rune, String, Unit, Unit, Rune)>.None]
public let var1402 : Int32 = Int32(UInt16(138))
var var1706 : UInt8 = UInt8(224)
public let var2070 : (UInt32, (Unit, UInt32, Array<UInt32>, Array<Bool>), Range<Int64>, Int8, Option<UInt8>, (Unit, UInt32, String, Range<UInt16>, Array<UInt32>), Bool) = (UInt32(UInt8(UInt8(210))), ((), UInt32(UInt16(38)), [UInt32(118), UInt32(16), UInt32(241), UInt32(171), UInt32(44), UInt32(243), UInt32(183), UInt32(2), UInt32(104), UInt32(95)], [false, true, ((Int16(88)&127..Int16(-62)&127:(89|1)) is Range<UInt8>), false, false, false, true, false, true, ((-80) is (Float64, Range<UInt8>) -> Option<Enum65>)]), (122&127..96&127:(-45)|1), Int8(Int8(-12)), ((UInt32(78), ((), UInt32(28), [UInt32(197), UInt32(5), UInt32(184), UInt32(212), UInt32(145), UInt32(86), UInt32(238), UInt32(133), UInt32(128), UInt32(126)], [true, false, false, false, true, false, false, true, true, false]), (8&127..(-100)&127:(-98)|1), Int8(-91), Option<UInt8>.None, ((), UInt32(63), "Q[;Bc${var189}FJ5|i", (UInt16(120)&127..UInt16(96)&127:(-1)|1), [UInt32(232), UInt32(118), UInt32(209), UInt32(50), UInt32(18), UInt32(85), UInt32(145), UInt32(41), UInt32(230), UInt32(78)]), false) as UInt8), ((), UInt32(74), ###"o\\HoFE3z${var189}!${var189}#${var189}"###, (UInt16(133)&127..UInt16(170)&127:(Int64(UInt64(67))|1)), [UInt32(Int8(63)), UInt32(14), UInt32(Int16(-2)), UInt32(UInt8(231)), UInt32(UInt16(44)), UInt32(UInt8(19)), UInt32(175), UInt32(UInt8(7)), UInt32(Int16(80)), UInt32(UInt32(135))]), ((Int64(Int32(-111))&127..=Int64(UInt8(144))&127:(Int64(Int32(107))|1)) is (Int32, Range<Int16>, Option<Bool>, Range<Int64>, Array<Range<UInt8>>, Rune)))
var var2549 : Array<Range<UInt8>> = [(UInt8(102)&127..UInt8(20)&127:(-5)|1), (UInt8(55)&127..=UInt8(44)&127:(-49)|1), (UInt8(234)&127..=UInt8(72)&127:85|1), (UInt8(219)&127..UInt8(90)&127:31|1), (UInt8(218)&127..=UInt8(227)&127:(-128)|1), (UInt8(1)&127..UInt8(70)&127:26|1), (UInt8(115)&127..=UInt8(226)&127:(-119)|1), (UInt8(208)&127..UInt8(103)&127:59|1), (UInt8(16)&127..UInt8(9)&127:55|1), (UInt8(252)&127..=UInt8(168)&127:(-115)|1)]
var var2553 : Range<Int16> = (Int16(-100)&127..Int16(52)&127:(5|1))
public var var2657 : UInt16 = UInt16(UInt16(Int16(Int8(120))))
public let var2740 : ?Bool = (() as Bool)
let var2824 : Array<Bool> = Array<Bool>(10){ i => false }
public var var2903 : (Unit, UInt32, String, Range<UInt16>, Array<UInt32>) = ((), UInt32(54), """
FT*'h
--NT)
""", (UInt16(186)&127..UInt16(42)&127:33|1), [UInt32(250), UInt32(211), UInt32(UInt32(193)), UInt32(Int32(UInt8(124))), UInt32(0), UInt32(28), UInt32(UInt16(122)), UInt32(Int32(-34)), UInt32(Int16(-65)), UInt32(5)])
public let var2931 : UInt64 = UInt64(7)
public var var2954 : ?UInt32 = Option<UInt32>.None
public let var3073 : ??UInt32 = ([Option<UInt32>.None, (([(UInt8(228)&127..=UInt8(86)&127:45|1), (UInt8(92)&127..=UInt8(8)&127:70|1), (UInt8(23)&127..=UInt8(237)&127:49|1), (UInt8(152)&127..=UInt8(242)&127:(96|1)), (UInt8(87)&127..UInt8(202)&127:(13|1)), (UInt8(171)&127..UInt8(41)&127:(-97)|1), (UInt8(124)&127..UInt8(213)&127:19|1), (UInt8(47)&127..=UInt8(171)&127:(-15)|1), (UInt8(232)&127..=UInt8(172)&127:(-14)|1), (UInt8(217)&127..UInt8(84)&127:0|1)], UInt32(58), [false, true, false, false, false, false, false, false, true, false], (UInt32(167)&127..=UInt32(18)&127:((-40)|1)), ((-65)&127..=(-11)&127:(-19)|1), Int16(3), (UInt32(4), Float32(-123.0), 'D', "L4W]${var189}X\"fVSD${var189}", (), (), 'E')) as UInt32), (UInt32(244) as UInt32), ([Option<UInt32>.None, Option<UInt32>.None, Option<UInt32>.None, Option<UInt32>.None, Option<UInt32>.None, Option<UInt32>.None, Option<UInt32>.None, Option<UInt32>.None, Option<UInt32>.None, Option<UInt32>.None] as UInt32), ((UInt32(198), Float32(-8.0), 'G', ###"_KZ${var189}|aB>D${var189}g*"###, (), (), 'A') as UInt32), (([false, false, false, true, false, false, false, false, false, false] is (Int8, Array<Bool>, Bool)) as UInt32), Option<UInt32>.None, ((Float32(121.0) as Class266) as UInt32), Option<UInt32>.None, Option<UInt32>.None] as Option<UInt32>)
let var3162 : ?UInt32 = (((), UInt32(54), [UInt32(13), UInt32(163), UInt32(151), UInt32(178), UInt32(206), UInt32(238), UInt32(79), UInt32(204), UInt32(151), UInt32(17)], [true, false, false, false, true, true, true, true, true, true]) as UInt32)
let var3232 : Bool = false
let var3246 : ?Range<UInt8> = (Option<Bool>.None as Range<UInt8>)
var var3268 : UInt8 = UInt8(14)
let var3297 : Int16 = Int16(-18)
let var3300 : (UInt32, Float32, Rune, String, Unit, Unit, Rune) = (UInt32(Int8(34)), Float32(-32.0), 'd', """
_${var189}[:mH
UP${var189}iH)
""", (), (), 'b')
let var3393 : Float64 = 58.0
var var3412 : Array<Array<Bool>> = [[false, false, true, false, false, true, false, true, false, true], [false, false, false, false, true, true, true, true, true, false], [false, false, false, true, false, false, true, false, true, true], [false, true, false, true, true, true, false, false, true, false], [true, true, false, true, false, false, false, false, false, true], [true, false, false, false, false, true, false, false, true, false], [false, true, true, true, false, true, true, false, false, false], [false, true, true, true, true, true, true, false, false, true], [false, true, true, true, false, false, false, true, false, false], [false, false, false, true, true, true, true, true, false, false]]
public let var3581 : (Bool, UInt32) = (((Int16(-124)&127..=Int16(Int16(-82))&127:(Int64(UInt32(232))|1)) is Rune), UInt32(UInt8(203)))
var var3601 : Array<Bool> = Array<Bool>(10){ i => false }
var var3689 : ????Bool = Option<Option<Option<Option<Bool>>>>.None
public var var3697 : ?Bool = (Option<Option<Option<Option<Bool>>>>.None as Bool)
public let var3703 : ?Bool = (Class266() as Bool)
var var3714 : Int32 = Int32(Int32(Int32(-67)))
public var var3757 : Bool = ((UInt32(150)&127..=UInt32(117)&127:(-102)|1) is (Bool, UInt32))
var var3928 : UInt8 = UInt8(223)
public var var4019 : Int16 = Int16(Int8(Int8(-22)))
let var4026 : Float32 = Float32(-15.0)
public let var4088 : ?Bool = (Enum65.defaultValue as Bool)
var var4194 : ?Enum65 = Option<Enum65>.None
public let var4246 : UInt32 = UInt32(UInt32(238))
var var4251 : UInt32 = UInt32(195)
var var4306 : Range<Int64> = (111&127..=(-12)&127:(Int64(UInt8(UInt8(97)))|1))
public let var4358 : Option<Range<Int64>> = (Option<Enum65>.None as Range<Int64>)
public var var4370 : UInt64 = UInt64(243)
let var4384 : ?UInt8 = Option<UInt8>.None
var var4414 : Float32 = Float32(Float32(33.0))
let var4713 : ?(UInt32, Float32, Rune, String, Unit, Unit, Rune) = (Option<Range<Int64>>.None as (UInt32, Float32, Rune, String, Unit, Unit, Rune))
let var4721 : (UInt32, Float32, Rune, String, Unit, Unit, Rune) = (UInt32(75), Float32(118.0), 'z', "qt&NN<ToUE", (), (), 'c')
public let var4941 : Range<UInt64> = (UInt64(105)&127..UInt64(186)&127:19|1)
let var4963 : Bool = false
public let var5027 : Option<Int16> = Option<Int16>.None
public var var5064 : Bool = false
public let var5067 : Bool = ((Int32(Int8(Int8(-60))), (Int16(108)&127..Int16(9)&127:(Int64(UInt64(51))|1)), Option<Bool>.None, ((-124)&127..=(-57)&127:(-72)|1), [(UInt8(124)&127..UInt8(47)&127:79|1), (UInt8(175)&127..UInt8(0)&127:71|1), (UInt8(48)&127..=UInt8(27)&127:(-25)|1), (UInt8(186)&127..UInt8(63)&127:(-22)|1), (UInt8(168)&127..UInt8(185)&127:(-81)|1), (UInt8(11)&127..UInt8(127)&127:6|1), (UInt8(52)&127..=UInt8(13)&127:28|1), (UInt8(67)&127..=UInt8(243)&127:17|1), (UInt8(238)&127..=UInt8(31)&127:(-111)|1), (UInt8(220)&127..UInt8(93)&127:(-118)|1)], 'y') is (Option<UInt32>) -> String)
var var5211 : ??(UInt32, Float32, Rune, String, Unit, Unit, Rune) = ([Option<Bool>.None, Option<Bool>.None, ((UInt8(18)&127..=UInt8(166)&127:(26|1)) as Bool), (((), UInt32(237), "HOq?+P?~a${var189} ", (UInt16(76)&127..UInt16(76)&127:(-26)|1), [UInt32(244), UInt32(97), UInt32(83), UInt32(116), UInt32(250), UInt32(108), UInt32(121), UInt32(192), UInt32(72), UInt32(85)]) as Bool), Option<Bool>.None, ((UInt8(97)&127..UInt8(97)&127:(106|1)) as Bool), Option<Bool>.None, ((Int8(121)&127..Int8(102)&127:((-103)|1)) as Bool), Option<Bool>.None, Option<Bool>.None] as Option<(UInt32, Float32, Rune, String, Unit, Unit, Rune)>)
public let var5382 : ?Bool = (Option<Int64>.None as Bool)
var var5431 : Range<UInt32> = (UInt32(Int16(UInt16(Int8(37))))&127..UInt32(UInt32(Int8(-113)))&127:(126|1))
var var5459 : Range<UInt32> = (UInt32(225)&127..UInt32(193)&127:20|1)
public let var5523 : (Bool, UInt32) = ((((), UInt32(UInt32(182)), ###":k${var189}SAcD<tSj"###, (UInt16(81)&127..UInt16(5)&127:(-116)|1), [UInt32(130), UInt32(23), UInt32(132), UInt32(19), UInt32(39), UInt32(168), UInt32(157), UInt32(111), UInt32(91), UInt32(66)]) is Option<Option<UInt32>>), UInt32(66))
var var5538 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
let var5616 : (Array<Range<UInt8>>, Unit, Range<UInt64>, Range<Int16>, UInt32) = ([(UInt8(135)&127..UInt8(60)&127:87|1), (UInt8(51)&127..UInt8(221)&127:120|1), (UInt8(106)&127..=UInt8(123)&127:(-8)|1), (UInt8(48)&127..UInt8(135)&127:108|1), (UInt8(142)&127..UInt8(151)&127:(-33)|1), (UInt8(14)&127..UInt8(174)&127:23|1), (UInt8(167)&127..=UInt8(37)&127:(-127)|1), (UInt8(54)&127..UInt8(56)&127:73|1), (UInt8(76)&127..UInt8(90)&127:(-58)|1), (UInt8(41)&127..=UInt8(227)&127:14|1)], (), (UInt64(75)&127..=UInt64(188)&127:(-117)|1), (Int16(-46)&127..Int16(-103)&127:93|1), UInt32(13))
let var5803 : ?String = (UInt16(22) as String)
public enum Enum65 {
    defaultValue |
    enumValue172((UInt8, Option<Option<Bool>>, Rune, Rune, UInt8), Aggregate154<Rune>)
}


public struct Aggregate154<T0> {
    public init() { // block id: 156

    }
;
    var var161 : String = """
&+4Q#
gu%0R
""";
    public static var var473 : (Bool, UInt32) = (true, UInt32(205));
    static func func2048(param2049 : Option<(UInt32, Float32, Rune, String, Unit, Unit, Rune)>, param2050 : Array<UInt32>, namedParam2051 ! : (String, Interface269, (Bool, UInt32)) -> (UInt32, Float32, Rune, String, Unit, Unit, Rune)) : String { // block id: 2056
        let var4007 : Float32 = Float32(Float32(Float32(Float32(Float32(-78.0)))));
        let var4030 : Array<Option<Bool>> = Array<Option<Bool>>(10){ i => ((Int16(-102)&127..Int16(UInt16(57))&127:(Int64(UInt64(82))|1)) as Bool) };
        func func2059() : Bool { // block id: 2060
            ();
            var271.func2168(namedParam2169 : var1402, namedParam2170 : Option<UInt8>.None)|>func2063<Range<UInt8>>;
            try { // block id: 4001
                ();
                ();
                Float32(23.0)
            } catch (e: Exception) { // block id: 4005
                var4007
            } <= Float32(if (false) { // block id: 4016
                var4019 **= (var4019 & 3);
                -var4026
            } else { // block id: 4028
                var4030;
                var var4073 : Float32 = Float32(19.0);
                var4073
            })
        }
;
        if (func2059()) { // block id: 4075
            if (var760) { // block id: 4078
                var127;
                if (var3232) { Option<Class266>.None } else { Option<Class266>.None } ;
                (var1402, var2553, var4088, (46&127..(-95)&127:(-44)|1), var2549, '8')
            } else { // block id: 4094
                (Int32(-60), (Int16(53)&127..var3297&127:(var33|1)), Option<Bool>.Some(false), (118&127..(-82)&127:55|1), [(UInt8(71)&127..var1706&127:(var33|1)), var364, (UInt8(48)&127..UInt8(215)&127:122|1), var364, (UInt8(246)&127..UInt8(32)&127:(var33|1)), (UInt8(43)&127..UInt8(75)&127:(-42)|1), var364, var364, (UInt8(116)&127..=UInt8(50)&127:(-23)|1), (UInt8(110)&127..=UInt8(246)&127:(-79)|1)], var852)
            };
            (Option<Unit>.Some(var127) ?? var127);
            var loopTimeVar4130 : Int64 = 0;
            do {
                loopTimeVar4130++;

            } while ((var3232) && loopTimeVar4130 < 100 ) 
        };
        var var4174 : String = "jNj!<]G?5q";
        var loopTimeVar4197 : Int64 = 0;
        do {
            loopTimeVar4197++;
            let var4144 : UInt8 = UInt8(228);
            match (([(UInt8(9)&127..UInt8(101)&127:(var33|1)), (UInt8(170)&127..=var4144&127:((-8)|1)), (UInt8(90)&127..UInt8(161)&127:6|1), (UInt8(135)&127..=var3268&127:(var33|1)), (var4144&127..=UInt8(59)&127:(86|1)), (UInt8(24)&127..UInt8(166)&127:(-57)|1), (var211&127..=var1706&127:(var33|1)), (UInt8(93)&127..UInt8(82)&127:(-69)|1), var364, var364], var521, [true, true, false, true, true, true, true, true, true, true], (UInt32(115)&127..=UInt32(176)&127:(-118)|1), ((-39)&127..=13&127:80|1), Int16(89), (var521, Float32(-84.0), var852, var4174, (), (), 'K'))) {
                case _ : ((Unit, UInt32, Array<UInt32>, Array<Bool>), UInt16) => 
                    ();
                    var442;
                    if (var760) { Option<Enum65>.None } else { Option<Enum65>.None } 
                
                case _ => 
                    if (var3232) { Option<Enum65>.None } else { var4194 } 
                
            }
        } while ((true) && loopTimeVar4197 < 100 ) ;
        let var4213 : ?String = (Int16(Int16(Int8(Int8(32)))) as String);
        (try { // block id: 4204
            var var4206 : Unit = ();
            var4206;
            if (var3757) { Option<String>.Some("n8b-M6.FwN") } else { var4213 } 
        } catch (e: Exception) { // block id: 4219
            ();
            if (var120) { var4213 } else { var4213 } 
        } finally { // block id: 4225
            var4213
        } ?? "@-qB\"O}Y${var4174}Zx")
    }

}

func func7(namedParam149 ! : Option<Option<Bool>>, namedParam150 ! : Int32) : Unit { // block id: 151
    ((var158.var161) as Bool);
    ()
}

public interface Interface269 {
    func func274(param275 : UInt32) : Unit 

}

public open class Class266 <: Interface269 & Resource {
    public init() { // block id: 268

    }
;
    public func func274(param275 : UInt32) : Unit { // block id: 276

    }
;
    static let var511 : UInt64 = UInt64(200);
    private static var var3793 : Float64 = (-11.0);
    public init(optionalParam3725 ! : ((Array<Range<UInt8>>, Unit, Range<UInt64>, Range<Int16>, UInt32)) -> Option<Option<Bool>> = func2063<Range<UInt8>>, optionalParam3729 ! : Range<UInt64> = (UInt64(Int64(Int64(Int32(121))))&127..UInt64(UInt64(113))&127:(Int64(UInt8(Int8(Int8(-89))))|1)), namedParam3741 ! : Array<Bool>) { // block id: 3742
        var loopTimeVar3811 : Int64 = 0;
        while (((match (var521) {
            case 194 | 203 | 148 => 
                var3232
            
            case _ => 
                true || var3757
            
            case 155 | 86 | 252 | 96 => 
                (var127, UInt32(207), "\".yE2>k#9$", (UInt16(236)&127..=UInt16(191)&127:(-113)|1), [UInt32(252), UInt32(174), var521, var521, UInt32(243), var521, UInt32(116), UInt32(79), UInt32(230), UInt32(6)]);
                var3232
            
            case _ => 
                ();
                [UInt32(114), UInt32(241), UInt32(220), UInt32(27), UInt32(46), UInt32(242), UInt32(237), UInt32(48), UInt32(37), UInt32(254)];
                true
            
        } is (Int32, Int8) -> Bool)) && loopTimeVar3811 < 100 ) {
            loopTimeVar3811++;
            var3297 - var3297;
            var var3808 : Range<Int8> = (Int8(2)&127..=Int8(57)&127:(-82)|1);
            try { // block id: 3790
                var3793 -= var3393;
                var var3799 : Range<Int8> = (Int8(100)&127..=Int8(14)&127:(-125)|1);
                if (false) { var3799 } else { var3799 } 
            } finally { // block id: 3802
                if (true) { var1367 } else { var1367 } ;
                var3808
            }
        };
        ()
    }
;
    protected let var3947 : ??Bool = Option<Option<Bool>>.None;
    let var3962 : Float32 = Float32(120.0);
    public open func func2168(namedParam2169 ! : Int32, namedParam2170 ! : Option<UInt8>) : (Array<Range<UInt8>>, Unit, Range<UInt64>, Range<Int16>, UInt32) { // block id: 2171
        var var3924 : (Option<UInt8>) -> UInt32 = func2175;
        func274((Option<UInt8>.Some(var3928)|>var3924) ** (UInt32(Int8(-70)) & 3));
        match (var189) {
            case caseVar3936 => 
                ();
                let var3953 : Aggregate154<Rune> = Aggregate154<Rune>();
                if (false) { Option<Enum65>.None } else { Option<Enum65>.Some(Enum65.enumValue172((var1706, var3947, var221, var218, UInt8(198)), var3953)) } 
            
            case ###"O MpB&[ka?"### => 
                let var3969 : Rune = 'v';
                Option<(UInt32, Float32, Rune, String, Unit, Unit, Rune)>.Some((UInt32(108), var3962, var218, var189, (), var127, var3969));
                var127;
                Option<Enum65>.None
            
            case _ => 
                if (true) { Option<Enum65>.Some(Enum65.enumValue172(var176, Aggregate154<Rune>())) } else { Option<Enum65>.None } 
            
        };
        let var3983 : (Array<Range<UInt8>>, Unit, Range<UInt64>, Range<Int16>, UInt32) = ([(UInt8(126)&127..UInt8(249)&127:(-30)|1), (UInt8(10)&127..=UInt8(162)&127:(-7)|1), (UInt8(32)&127..=UInt8(116)&127:(-60)|1), (UInt8(155)&127..=UInt8(154)&127:(-58)|1), (UInt8(16)&127..=UInt8(64)&127:(-109)|1), (UInt8(72)&127..UInt8(56)&127:13|1), (UInt8(171)&127..=UInt8(27)&127:115|1), (UInt8(242)&127..UInt8(36)&127:(-52)|1), (UInt8(85)&127..=UInt8(41)&127:(-73)|1), (UInt8(244)&127..=UInt8(79)&127:(-23)|1)], (), (UInt64(121)&127..UInt64(69)&127:(-49)|1), (Int16(UInt8(247))&127..Int16(-80)&127:(Int64(Int64(UInt64(92)))|1)), UInt32(UInt8(154)));
        var3983
    }
;
    public var var5762 : Unit = ()
    public func isClosed(): Bool { return false }
    public func close(): Unit {}
}

func func144(param145 : UInt32) : Unit { // block id: 146
    let var239 : Int32 = Int32(-2);
    func7(namedParam149 : match (Enum65.defaultValue) {
        case _ : UInt32 => 
            Enum65.enumValue172(var176, var158);
            if (true) { var189 } else { var189 } ;
            let var194 : UInt8 = UInt8(UInt8(6));
            let var198 : ??Bool = Option<Option<Bool>>.None;
            (var194, var198, 'W', '1', var194)
        
        case caseVar205 => 
            let var214 : ??Bool = (Enum65.defaultValue as Option<Bool>);
            if (var120) { (var211, var214, var218, var221, var211) } else { (UInt8(76), Option<Option<Bool>>.Some(Option<Bool>.None), var218, 'G', UInt8(207)) } 
        
        case _ => 
            ();
            ();
            var176
        
    }[1], namedParam150 : var239 | match (var211) {
        case caseVar245 : Float32 => 
            Int32(73) ** (var239 & 3)
        
        case 192 | 152 | 230 => 
            var239
        
        case 108 | 25 | 158 => 
            ();
            var239
        
        case _ => 
            ();
            Int32(62) + var239
        
    });
    var271.func274(UInt32(var211))
}


public func func284(param285 : String, namedParam286 ! : Interface269, namedParam287 ! : (Bool, UInt32)) : (UInt32, Float32, Rune, String, Unit, Unit, Rune) { // block id: 288
    var127;
    var var306 : Int8 = Int8(Int8(UInt8(181)));
    let var314 : Array<UInt32> = [UInt32(107), UInt32(221), UInt32(241), UInt32(24), UInt32(225), UInt32(12), UInt32(225), UInt32(211), UInt32(5), UInt32(6)];
    let var319 : Array<UInt32> = [UInt32(89), UInt32(159), UInt32(138), UInt32(18), UInt32(243), UInt32(156), UInt32(67), UInt32(218), UInt32(132), UInt32(28)];
    try { // block id: 301
        (UInt64(119)&127..=UInt64(236)&127:32|1);
        (Int8(-85)&127..=var306&127:(var33|1));
        if (false) { var314 } else { [UInt32(68), UInt32(247), UInt32(151), UInt32(241), UInt32(227), UInt32(80), UInt32(22), UInt32(206), UInt32(84), UInt32(2)] } 
    } catch (_) { // block id: 317
        var319
    } finally { // block id: 321
        [UInt32(94), UInt32(232), UInt32(146), UInt32(103), UInt32(136), UInt32(146), UInt32(84), UInt32(179), UInt32(197), UInt32(111)]
    }[8];
    var var401 : (UInt32, Float32, Rune, String, Unit, Unit, Rune) = (UInt32(211), Float32(-53.0), 'w', "J?#t#`hf)|", (), (), 'W');
    match {
        case var330[3][7] => 
        var var395 : Rune = 'P';
        try { // block id: 362
            var364;
            if (false) { (UInt8(24), Option<Option<Bool>>.None, var221, var221, UInt8(46)) } else { (var211, Option<Option<Bool>>.Some(Option<Bool>.None), 'x', 'S', UInt8(194)) } 
        } catch (e: Exception) { // block id: 387
            ();
            if (true) { (UInt8(236), Option<Option<Bool>>.None, var395, 'K', UInt8(12)) } else { var176 } 
        };
        var401
        case _ => 
        Option<Bool>.None;
        (var418 ?? var401)
    }
}





func func496(optionalParam497 ! : Float64 = Float64(46.0), namedParam500 ! : Range<UInt8>) : Option<Enum65> { // block id: 501
    var var515 : UInt16 = UInt16(54);
    (((Class266.var511) as Unit) ?? (var515 %= ((var515) | 1)));
    let var532 : ?Int64 = (Option<Option<Bool>>.None as Int64);
    ((var521&127..var521 / ((var521) | 1)&127:((var532 ?? 78)|1)) as Enum65)
}

func func68(param69 : Rune) : Enum65 { // block id: 70
    var var83 : ??Bool = Option<Option<Bool>>.Some((() as Bool));
    var var103 : Bool = true;
    var var133 : Bool = true;
    let var136 : (Bool, UInt32) = (true, UInt32(85));
    if (((var83 ?? var88) ?? try { // block id: 92
        Option<Bool>.Some(false);
        false
    } finally { // block id: 96
        (-35) >= var33
    })) { // block id: 100
        if (var103) { // block id: 105

        } else if (true) { // block id: 107
            var109;
            let var112 : Unit = ();
            var112
        };
        try { // block id: 115
            ()
        } catch (_) { // block id: 117
            var120 &&= var120;
            ()
        } finally { // block id: 124
            ();
            var127
        }
    } else if (if (var133) { var136 } else { var136 } [0]) { // block id: 142
        UInt32(225)|>func144
    };
    func284(match ((UInt32(24)&127..UInt32(88)&127:(-27)|1)) {
        case caseVar425 : Range<UInt32> => 
            var127;
            """
S+WzN
.dU=?
"""
        
        case _ => 
            var364;
            var189
        
    }, namedParam286 : match (Option<Bool>.None) {
        case caseVar437 => 
            if (var120) { var442 } else { Class266() } 
        
        case _ : Rune => 
            var442
        
        case caseVar451 : UInt16 => 
            ();
            let var455 : Range<UInt32> = (UInt32(150)&127..=UInt32(Int8(-14))&127:(Int64(UInt8(62))|1));
            var455;
            var442
        
        case _ => 
            ();
            if (false) { var442 } else { var442 } 
        
    }, namedParam287 : Aggregate154<Rune>.var473)[4];
    let var486 : UInt32 = UInt32(212);
    var var553 : Range<UInt32> = (UInt32(Int16(52))&127..=UInt32(UInt8(245))&127:((-78)|1));
    (((var486&127..var486&127:((-31)|1)) as Enum65) ?? (func496(optionalParam497 : 104.0, namedParam500 : (UInt8(190)&127..=UInt8(184)&127:69|1)) ?? match (var418) {
        case caseVar542 : UInt64 => 
            var var545 : Float32 = Float32(117.0);
            var545;
            var109
        
        case _ => 
            if (var120) { var553 } else { (UInt32(25)&127..=var486&127:(82|1)) } ;
            if (true) { Enum65.enumValue172(var176, Aggregate154<Rune>()) } else { var109 } 
        
    }))
}


public func func1260(optionalParam1261 ! : (Option<Option<Bool>>, Int32) -> Unit = func7) : Range<UInt8> { // block id: 1266
    var var1277 : ?UInt32 = (Aggregate154<Rune>() as UInt32);
    let var1288 : ?UInt32 = Option<UInt32>.Some(UInt32(104));
    func144(([var1277, var1277, var1277, var1277, Option<UInt32>.Some(UInt32(165)), Option<UInt32>.Some(UInt32(162)), var1288, Option<UInt32>.None, Option<UInt32>.None, Option<UInt32>.Some(UInt32(95))][7] ?? match (Enum65.defaultValue) {
        case enumValue172(_, _ : Array<Option<UInt32>>) => 
            var127;
            var330;
            var521
        
        case defaultValue => 
            if (false) { var1310 } else { Option<Int64>.None } ;
            var var1314 : UInt32 = UInt32(70);
            var1314
        
        case _ => 
            (Int8(-104)&127..=Int8(-41)&127:(-48)|1);
            var521
        
        case _ => 
            var1324;
            var var1332 : UInt64 = UInt64(UInt64(134));
            var1332 -= UInt64(78);
            var521
        
    }));
    let var1342 : ?Int64 = ((UInt32(Int8(UInt8(94))), Float32(Float32(Float32(-126.0))), 'I', """
z/fOm
%*=dH
""", (), (), 'E') as Int64);
    match {
        case ((if (var760) { var1342 } else { var1310 } ) is UInt16) => 
        [(), (), (), (), (), (), (), (), (), ()][9];
        "!J5L6LtZX;"
        case _ => 
        var1367[3];
        """
qES9c
\"(]/ 
"""
    };
    [(UInt8(228)&127..UInt8(115)&127:(-43)|1), (UInt8(126)&127..UInt8(144)&127:64|1), (UInt8(218)&127..=UInt8(127)&127:53|1), (UInt8(82)&127..=UInt8(134)&127:83|1), (UInt8(114)&127..UInt8(103)&127:46|1), (UInt8(43)&127..UInt8(254)&127:(-16)|1), (UInt8(151)&127..=UInt8(179)&127:112|1), (UInt8(3)&127..UInt8(2)&127:8|1), (UInt8(118)&127..UInt8(189)&127:(-41)|1), (UInt8(103)&127..=UInt8(222)&127:13|1)][2]
}



public func func2063<T0>(param2064 : (Array<Range<UInt8>>, Unit, Range<UInt64>, Range<Int16>, UInt32)) : Option<Option<Bool>> { // block id: 2065
    (var2070[4] as Option<Bool>)
}



public func func2270(param2271 : UInt8) : Unit { // block id: 2272
    var var2281 : Float32 = Float32(-68.0);
    if (match ([true, true, false, false, true, false, true, true, true, false]) {
        case _ : Array<UInt32> => 
            var2281 **= Float32(Int32(var2281) & 3);
            UInt8(23);
            false
        
        case _ => 
            var120
        
    }) { // block id: 2289

    }
}

public func func2309(param2310 : Range<Int16>) : Array<Bool> { // block id: 2311
    var var2313 : Array<Bool> = [false, true, true, true, true, true, true, true, true, true];
    var2313
}

func func2291(param2292 : UInt32) : UInt8 { // block id: 2293
    var loopTimeVar2307 : Int64 = 0;
    while ((var120) && loopTimeVar2307 < 100 ) {
        loopTimeVar2307++;
        let var2299 : (UInt8) -> Unit = { lambdaParameter2302 : UInt8 => () };
        var1706|>var2299
    };
    var var2317 : Range<Int16> = (Int16(59)&127..Int16(5)&127:96|1);
    var2317|>func2309;
    let var2324 : ?Bool = ((UInt32(22)&127..UInt32(17)&127:2|1) as Bool);
    var var2346 : ????Bool = (Option<Int64>.Some(Int64(Int64(UInt64(212)))) as Option<Option<Option<Bool>>>);
    var var2483 : UInt64 = UInt64(Int32(21));
    match (match (if (var760) { var2324 } else { var2324 } ) {
            case _ : Array<UInt32> => 
                var120 ||= var760;
                let var2337 : ?Bool = (Option<Bool>.None as Bool);
                if (var760) { var2337 } else { Option<Bool>.Some(var760) } 
            
            case _ : Rune => 
                var2346;
                var127;
                Option<Bool>.None
            
            case caseVar2356 : String => 
                Option<Bool>.None
            
            case caseVar2361 => 
                if (var120) { Option<Bool>.None } else { Option<Bool>.Some(true) } 
            
            case _ => 
                let var2373 : ?Enum65 = Option<Enum65>.Some(Enum65.enumValue172((UInt8(81), Option<Option<Bool>>.Some(Option<Bool>.None), '7', 'W', UInt8(50)), Aggregate154<Rune>()));
                if (true) { var2373 } else { Option<Enum65>.None } ;
                Option<Option<Option<Bool>>>.None;
                Option<Bool>.Some(true)
            
        }) {
        case caseVar2390 : Float32 => 
            UInt8(79) | var1706
        
        case caseVar2397 => 
            var var2403 : ((Unit, UInt32, Array<UInt32>, Array<Bool>), UInt16) = (((), UInt32(193), [UInt32(Int32(-74)), UInt32(UInt16(186)), UInt32(Int8(126)), UInt32(UInt32(141)), UInt32(45), UInt32(Int32(-84)), UInt32(UInt8(147)), UInt32(UInt32(37)), UInt32(49), UInt32(UInt32(170))], [((UInt16(221)&127..UInt16(45)&127:((-35)|1)) is Range<UInt64>), true, true, false, (Enum65.defaultValue is (String, Option<UInt32>, Range<Int64>) -> UInt8), ([Option<UInt32>.None, Option<UInt32>.Some(UInt32(246)), Option<UInt32>.Some(UInt32(53)), Option<UInt32>.Some(UInt32(38)), Option<UInt32>.None, Option<UInt32>.Some(UInt32(70)), Option<UInt32>.None, Option<UInt32>.Some(UInt32(24)), Option<UInt32>.Some(UInt32(236)), Option<UInt32>.None] is Float32), (Option<Option<Option<Option<Bool>>>>.Some(Option<Option<Option<Bool>>>.None) is (Int8, Array<Bool>, Bool)), ((UInt32(51)&127..UInt32(62)&127:((-101)|1)) is (String, Option<UInt32>, Range<Int64>) -> UInt8), true, (Aggregate154<Rune>() is (String, Interface269, (Bool, UInt32)) -> (UInt32, Float32, Rune, String, Unit, Unit, Rune))]), UInt16(196));
            if (var760) { var706 } else { var2403 } ;
            ();
            UInt8(122) ** (UInt8(74) & 3)
        
        case _ : Array<Option<(UInt32, Float32, Rune, String, Unit, Unit, Rune)>> => 
            ();
            UInt8(232)
        
        case _ => 
            var2483 -= var2483;
            var925 % ((var921) | 1);
            UInt8(122)
        
        case _ => 
            var1706 - UInt8(229)
        
    }
}




public func func2260(optionalParam2261 ! : Option<Int64> = Option<Int64>.Some(89), namedParam2264 ! : Class266, optionalParam2265 ! : Range<UInt32> = (UInt32(145)&127..UInt32(89)&127:46|1)) : Array<Range<UInt8>> { // block id: 2267
    var var2497 : (UInt32) -> UInt8 = func2291;
    UInt32(UInt16(209)) >> (((Option<UInt32>.None ?? var521)) & 7)|>(var2497~>func2270);
    let var2530 : Float64 = (-4.0);
    let var2582 : Range<UInt64> = (UInt64(127)&127..UInt64(15)&127:(-14)|1);
    let var2679 : Option<Enum65> = Option<Enum65>.Some(Enum65.defaultValue);
    var var2724 : Int16 = Int16(35);
    var var2727 : Int16 = Int16(Int16(8));
    if (if (try { // block id: 2508
        var760 && var760
    } finally { // block id: 2512
        [true, true, false, false, true, false, false, false, true, true];
        var var2515 : Unit = ();
        var2515;
        var760
    }) { // block id: 2518
        true
    } else if ((Option<Bool>.Some(var760) ?? false)) { // block id: 2528
        var2530;
        var1706 <= UInt8(56)
    } else { // block id: 2535
        var211 != var1706
    }) { (if ((Option<Bool>.Some(true) ?? var760)) { var2549 } else { match (var2553) {
        case caseVar2560 : Range<Int16> => 
            Int8(52) + var925;
            var var2567 : Float32 = Float32(Float32(Float32(18.0)));
            var2567 *= var2567;
            [(UInt8(202)&127..=UInt8(225)&127:90|1), (UInt8(142)&127..UInt8(2)&127:104|1), (UInt8(95)&127..=UInt8(230)&127:1|1), (UInt8(220)&127..UInt8(136)&127:(-58)|1), (UInt8(46)&127..UInt8(61)&127:(-53)|1), (UInt8(144)&127..=UInt8(5)&127:(-65)|1), (UInt8(165)&127..=UInt8(58)&127:0|1), (UInt8(186)&127..=UInt8(130)&127:37|1), (UInt8(100)&127..=UInt8(11)&127:125|1), (UInt8(32)&127..UInt8(213)&127:5|1)]
        
        case caseVar2575 => 
            [(UInt8(66)&127..UInt8(169)&127:30|1), (UInt8(150)&127..=UInt8(233)&127:80|1), (UInt8(244)&127..UInt8(205)&127:112|1), (UInt8(30)&127..UInt8(46)&127:(-116)|1), (UInt8(75)&127..UInt8(213)&127:90|1), (UInt8(57)&127..UInt8(98)&127:6|1), (UInt8(212)&127..=UInt8(146)&127:29|1), (UInt8(40)&127..=UInt8(136)&127:41|1), (UInt8(146)&127..UInt8(170)&127:23|1), (UInt8(254)&127..=UInt8(117)&127:(-120)|1)]
        
        case _ : Range<Int16> => 
            var2582;
            ();
            [(var211&127..=UInt8(162)&127:(var33|1)), (UInt8(253)&127..=UInt8(131)&127:(var33|1)), (var211&127..=var1706&127:(var33|1)), (var211&127..=var1706&127:(57|1)), (UInt8(93)&127..var211&127:(var33|1)), var364, var364, (var1706&127..var1706&127:(52|1)), (UInt8(236)&127..=UInt8(231)&127:125|1), (UInt8(246)&127..=UInt8(246)&127:(-34)|1)]
        
        case caseVar2616 : Array<Option<UInt32>> => 
            var127;
            [(UInt8(226)&127..UInt8(113)&127:26|1), (UInt8(7)&127..UInt8(178)&127:(-43)|1), (UInt8(79)&127..=UInt8(45)&127:(-85)|1), (UInt8(243)&127..=UInt8(20)&127:89|1), (UInt8(12)&127..UInt8(44)&127:123|1), (UInt8(85)&127..UInt8(45)&127:(-19)|1), (UInt8(65)&127..=UInt8(219)&127:19|1), (UInt8(234)&127..UInt8(68)&127:113|1), (UInt8(131)&127..=UInt8(226)&127:(-67)|1), (UInt8(201)&127..UInt8(246)&127:11|1)]
        
        case _ => 
            ();
            ();
            if (false) { [(UInt8(165)&127..=UInt8(226)&127:(-17)|1), (UInt8(123)&127..=UInt8(151)&127:75|1), (UInt8(176)&127..=UInt8(187)&127:78|1), (UInt8(132)&127..=UInt8(165)&127:(-68)|1), (UInt8(151)&127..=UInt8(251)&127:(-7)|1), (UInt8(136)&127..UInt8(224)&127:(-26)|1), (UInt8(122)&127..UInt8(218)&127:74|1), (UInt8(161)&127..=UInt8(113)&127:(-60)|1), (UInt8(109)&127..=UInt8(184)&127:46|1), (UInt8(203)&127..=UInt8(10)&127:(-51)|1)] } else { [(var211&127..UInt8(96)&127:((-61)|1)), var364, (var211&127..UInt8(113)&127:(10|1)), var364, (UInt8(104)&127..UInt8(44)&127:((-88)|1)), var364, var364, var364, var364, (UInt8(59)&127..=UInt8(158)&127:(-20)|1)] } 
        
    } } ) } else { [match (Option<Unit>.Some(())) {
        case caseVar2653 => 
            var2657 += var2657;
            if (false) { (var1706&127..=UInt8(111)&127:(8|1)) } else { (UInt8(250)&127..UInt8(60)&127:(var33|1)) } 
        
        case _ => 
            if (false) { var2679 } else { var2679 } ;
            (var211&127..var1706&127:(16|1))
        
        case _ => 
            var925 &= var921;
            var33 -= (-64);
            (UInt8(146)&127..UInt8(50)&127:(var33|1))
        
    }, if (true) { (UInt8(42)&127..=UInt8(134)&127:70|1) } else { (UInt8(81)&127..=UInt8(193)&127:(92|1)) } , (Option<Range<UInt8>>.Some((UInt8(233)&127..UInt8(23)&127:(-6)|1)) ?? (UInt8(220)&127..UInt8(221)&127:(var33|1))), try { // block id: 2718
        var364
    } finally { // block id: 2720
        var925;
        var2724 <<= ((var2727) & 7);
        (UInt8(38)&127..=UInt8(201)&127:116|1)
    }, var364, (UInt8(15)&127..=UInt8(39)&127:(-5)|1), (var211&127..=var1706&127:((-5)|1)), try { // block id: 2738
        var2740;
        var364
    } finally { // block id: 2744
        optionalParam2265;
        Option<Enum65>.None;
        var var2750 : UInt8 = UInt8(Int8(UInt8(18)));
        (UInt8(242)&127..var2750&127:(var33|1))
    }, if (var760) { var364 } else { (UInt8(15)&127..UInt8(185)&127:63|1) } , if (true) { (UInt8(152)&127..UInt8(229)&127:(-4)|1) } else { (UInt8(33)&127..UInt8(38)&127:65|1) } ] } 
}





public func func2256(param2257 : ((Unit, UInt32, Array<UInt32>, Array<Bool>), UInt16)) : Array<Option<UInt32>> { // block id: 2258
    var var2776 : Option<Class266> = Option<Class266>.Some(Class266());
    func2260(namedParam2264 : if ((!true)) { (Option<Class266>.Some(var271) ?? Class266()) } else { (var2776 ?? var271) } );
    let var2785 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    match ((try { // block id: 2783
            var2785
        } catch (_) { // block id: 2797
            var852;
            var127;
            [(), (), (), var127, (), (), (), var127, var127, var127]
        } finally { // block id: 2811
            [(), (), (), (), (), (), (), (), (), ()]
        } is ((Unit, UInt32, Array<UInt32>, Array<Bool>), UInt16))) {
        case true | false | false => 
            if (true) { var109 } else { var109 } 
        
        case _ => 
            UInt32(201);
            var2824;
            if (var760) { var109 } else { Enum65.defaultValue } 
        
    };
    var var2943 : Float32 = Float32(-6.0);
    let var2981 : Range<UInt16> = (UInt16(UInt16(Int8(10)))&127..UInt16(56)&127:((-12)|1));
    let var2999 : ??UInt32 = Option<Option<UInt32>>.Some(Option<UInt32>.None);
    var var3048 : Bool = true;
    var var3052 : Range<Int8> = (Int8(UInt8(238))&127..Int8(UInt8(166))&127:((-107)|1));
    var var3179 : ?UInt32 = Option<UInt32>.Some(UInt32(UInt8(UInt8(Int8(40)))));
    let var3217 : Bool = true;
    let var3235 : ?UInt32 = Option<UInt32>.None;
    let var3311 : (Array<Range<UInt8>>, UInt32, Array<Bool>, Range<UInt32>, Range<Int64>, Int16, (UInt32, Float32, Rune, String, Unit, Unit, Rune)) = ([(UInt8(UInt8(8))&127..=UInt8(176)&127:(86|1)), (UInt8(39)&127..=UInt8(127)&127:(-33)|1), (UInt8(130)&127..=UInt8(250)&127:(-48)|1), (UInt8(UInt8(215))&127..=UInt8(167)&127:(80|1)), (UInt8(2)&127..UInt8(65)&127:((-114)|1)), (UInt8(127)&127..=UInt8(250)&127:(-12)|1), (UInt8(UInt8(135))&127..UInt8(Int8(86))&127:(50|1)), (UInt8(219)&127..UInt8(208)&127:(-63)|1), (UInt8(111)&127..=UInt8(233)&127:108|1), (UInt8(26)&127..=UInt8(UInt8(48))&127:(Int64(Int8(49))|1))], UInt32(Int8(-99)), [((UInt16(148) as Class266) is UInt8), true, ((Option<Enum65>.None as (UInt32, Float32, Rune, String, Unit, Unit, Rune)) is Array<Option<UInt32>>), false, (Int32(-56) is (Float64, Aggregate154<Rune>, Bool, Range<UInt32>) -> Rune), false, false, false, true, true], (UInt32(102)&127..=UInt32(37)&127:74|1), ((-36)&127..=56&127:(-49)|1), Int16(-14), (UInt32(87), Float32(Float32(22.0)), 'C', "c.uZ\\[Fh69", (), (), '8'));
    var var3396 : ?UInt32 = Option<UInt32>.Some(UInt32(237));
    [match (var2903) {
        case (_ : Int8,_ : Array<Option<Bool>>,_,_ : Option<Class266>,caseVar2928) => 
            var2931;
            var var2934 : ?UInt32 = Option<UInt32>.Some(UInt32(229));
            var2934
        
        case caseVar2939 => 
            var2943 *= Float32(33.0);
            if (var760) { var442 } else { Class266() } ;
            if (true) { Option<UInt32>.None } else { var2954 } 
        
        case caseVar2958 => 
            var2954
        
        case _ : Option<Option<Option<Bool>>> => 
            var var2966 : Float64 = 75.0;
            var2966 %= Float64((Int32((-33.0))) | 1);
            var120 ||= true;
            if (true) { Option<UInt32>.Some(var521) } else { Option<UInt32>.None } 
        
        case _ => 
            UInt16(117);
            var2981;
            if (var120) { Option<UInt32>.Some(UInt32(169)) } else { Option<UInt32>.None } 
        
    }, (var2999 ?? ((var330, UInt16(68)) as UInt32)), try { // block id: 3007
        let var3009 : ?Bool = (((), UInt32(UInt8(Int8(112))), """
ZG3gH
h~YN&
""", (UInt16(227)&127..UInt16(UInt8(150))&127:((-71)|1)), [UInt32(UInt32(94)), UInt32(Int16(114)), UInt32(89), UInt32(Int16(112)), UInt32(Int8(-66)), UInt32(UInt16(61)), UInt32(215), UInt32(231), UInt32(UInt8(39)), UInt32(UInt32(43))]) as Bool);
        var3009;
        var127;
        if (false) { var2954 } else { var2954 } 
    } catch (_) { // block id: 3045
        var3048 ||= var120;
        var3052;
        Option<UInt32>.Some(UInt32(17))
    }, (try { // block id: 3063
        var120 &&= var760;
        ();
        if (var760) { Option<Option<UInt32>>.Some(Option<UInt32>.None) } else { var3073 } 
    } catch (e: Exception) { // block id: 3144
        var2943 = var2943;
        if (false) { Option<Option<UInt32>>.Some(var2954) } else { Option<Option<UInt32>>.None } 
    } finally { // block id: 3153
        var2999
    } ?? (Option<Option<UInt32>>.None ?? var3162)), Option<UInt32>.Some(UInt32(UInt8(43))), match ((var3179 ?? UInt32(168))) {
        case caseVar3188 : Option<Enum65> => 
            (UInt64(98)&127..=UInt64(69)&127:(-54)|1);
            ();
            if (var3048) { var2954 } else { var2954 } 
        
        case _ : Option<Option<Option<Option<Bool>>>> => 
            var2954
        
        case 166 | 176 => 
            var3162
        
        case caseVar3206 => 
            var var3210 : Int32 = Int32(Int8(UInt8(221)));
            var3210 /= ((Int32(76)) | 1);
            if (var3217) { var3162 } else { Option<UInt32>.Some(var521) } 
        
        case _ => 
            var1706 &= var1706;
            var120 ||= false;
            if (var3232) { var3235 } else { var3162 } 
        
    }, if ((var2981 is (UInt8) -> Unit)) { try { // block id: 3242
        if (false) { var3246 } else { var3246 } ;
        var127;
        var3162
    } catch (e: Exception) { // block id: 3252
        Option<UInt32>.Some(var521);
        Option<UInt32>.Some(var521)
    } } else { var3235 } , if (try { // block id: 3260
        if (true) { ([var364, (var3268&127..var211&127:((-118)|1)), (UInt8(142)&127..UInt8(205)&127:(-100)|1), (UInt8(121)&127..=UInt8(170)&127:(var33|1)), (UInt8(4)&127..=UInt8(228)&127:(-6)|1), (UInt8(62)&127..UInt8(26)&127:(var33|1)), (var1706&127..var3268&127:(126|1)), (UInt8(196)&127..=UInt8(35)&127:(-73)|1), (UInt8(19)&127..UInt8(244)&127:6|1), (UInt8(178)&127..=UInt8(234)&127:0|1)], UInt32(202), [true, false, false, true, false, true, false, false, false, false], (UInt32(118)&127..var521&127:((-57)|1)), (98&127..60&127:(-59)|1), var3297, var3300) } else { var3311 } ;
        false
    } catch (_) { // block id: 3376
        var3048
    } finally { // block id: 3378
        ();
        var211 != var211
    }) { var2954 } else { (Option<Option<UInt32>>.None ?? var3235) } , Option<UInt32>.None, try { // block id: 3389
        88.0 * var3393;
        var3396
    } finally { // block id: 3399
        if (var760) { var2740 } else { var2740 } ;
        var127;
        if (false) { Option<UInt32>.None } else { var3162 } 
    }]
}

public func func2252(param2253 : Array<Option<Bool>>) : UInt32 { // block id: 2254
    let var3418 : ((Unit, UInt32, Array<UInt32>, Array<Bool>), UInt16) = (((), UInt32(Int8(-91)), [UInt32(252), UInt32(202), UInt32(UInt32(204)), UInt32(Int32(15)), UInt32(27), UInt32(141), UInt32(148), UInt32(UInt8(42)), UInt32(24), UInt32(UInt16(162))], [(([(UInt8(213)&127..UInt8(64)&127:((-123)|1)), (UInt8(235)&127..UInt8(249)&127:(33|1)), (UInt8(135)&127..=UInt8(138)&127:69|1), (UInt8(154)&127..=UInt8(138)&127:(121|1)), (UInt8(44)&127..UInt8(29)&127:((-28)|1)), (UInt8(17)&127..UInt8(175)&127:51|1), (UInt8(67)&127..UInt8(228)&127:((-12)|1)), (UInt8(204)&127..=UInt8(217)&127:(-2)|1), (UInt8(35)&127..=UInt8(146)&127:((-98)|1)), (UInt8(208)&127..UInt8(101)&127:((-60)|1))], (), (UInt64(32)&127..UInt64(238)&127:((-12)|1)), (Int16(107)&127..Int16(-28)&127:((-20)|1)), UInt32(183)) is Int64), ([false, true, true, true, true, true, false, true, false, false] is Range<Int8>), true, ([Option<UInt32>.Some(UInt32(97)), Option<UInt32>.Some(UInt32(128)), Option<UInt32>.None, Option<UInt32>.Some(UInt32(170)), Option<UInt32>.None, Option<UInt32>.None, Option<UInt32>.Some(UInt32(88)), Option<UInt32>.None, Option<UInt32>.Some(UInt32(80)), Option<UInt32>.None] is (Rune) -> Enum65), true, false, (Class266() is Float32), true, (Option<Bool>.None is (Rune) -> Enum65), false]), UInt16(62));
    let var3543 : Unit = ();
    var var3547 : Array<UInt32> = [UInt32(Int16(UInt8(Int8(-35)))), UInt32(UInt16(65)), UInt32(Int8(Int8(UInt8(77)))), UInt32(234), UInt32(UInt8(167)), UInt32(60), UInt32(UInt32(Int16(Int16(14)))), UInt32(Int32(124)), UInt32(UInt16(Int8(Int8(-96)))), UInt32(86)];
    match (var3412) {
        case _ => 
            var3418
        
        case _ : UInt64 => 
            if (true) { var1324 } else { var418 } ;
            let var3527 : UInt16 = UInt16(191);
            (((), var521, [UInt32(215), UInt32(101), UInt32(124), UInt32(229), UInt32(16), UInt32(190), UInt32(172), UInt32(63), UInt32(43), UInt32(224)], var2824), var3527)
        
        case _ : Option<Option<UInt32>> => 
            (var330, UInt16(11))
        
        case _ => 
            ();
            var127;
            ((var3543, var521, var3547, var2824), UInt16(68))
        
        case _ => 
            if (true) { var3581 } else { (true, var521) } ;
            (((), var521, var3547, var3601), var2657)
        
    }|>func2256;
    UInt32(61)
}

func func2225(param2226 : UInt8, optionalParam2227 ! : Option<Enum65> = (([Option<UInt32>.Some(UInt32(154)), Option<UInt32>.None, Option<UInt32>.Some(UInt32(49)), Option<UInt32>.None, (Class266() as UInt32), Option<UInt32>.None, (UInt16(197) as UInt32), Option<UInt32>.None, (Int16(118) as UInt32), Option<UInt32>.None] as Int64) as Enum65)) : UInt32 { // block id: 2246
    var var2249 : (UInt32) -> Unit = func144;
    (match ([Option<UInt32>.Some(var521), Option<UInt32>.Some(UInt32(63)), Option<UInt32>.None, var3162, var2954, var2954, Option<UInt32>.Some(UInt32(121)), var2954, var2954, var3162]) {
        case caseVar3685 : Array<Unit> => 
            ();
            var3689;
            [var88, var88, Option<Bool>.None, Option<Bool>.None, var3697, Option<Bool>.Some(false), var3703, Option<Bool>.None, Option<Bool>.Some(true), Option<Bool>.None]
        
        case _ => 
            var3714++;
            let var3719 : Array<Option<Bool>> = [Option<Bool>.Some((Class266(optionalParam3725 : func2063<Range<UInt8>>, namedParam3741 : [false, true, true, true, true, false, true, true, false, false]) is (UInt32, Float32, Rune, String, Unit, Unit, Rune))), Option<Bool>.None, ((-85) as Bool), Option<Bool>.None, ([Option<UInt32>.None, Option<UInt32>.None, Option<UInt32>.Some(UInt32(113)), (Option<Option<UInt32>>.Some(Option<UInt32>.None) as UInt32), Option<UInt32>.Some(UInt32(217)), (Option<Enum65>.Some(Enum65.defaultValue) as UInt32), Option<UInt32>.Some(UInt32(9)), Option<UInt32>.None, (Option<Option<Option<Bool>>>.None as UInt32), (Option<Bool>.None as UInt32)] as Bool), Option<Bool>.Some((((-76)&127..=13&127:10|1) is (String, Option<UInt32>, Range<Int64>) -> UInt8)), ([([(), (), (), (), (), (), (), (), (), ()] as (UInt32, Float32, Rune, String, Unit, Unit, Rune)), ((UInt16(174)&127..UInt16(74)&127:(-87)|1) as (UInt32, Float32, Rune, String, Unit, Unit, Rune)), Option<(UInt32, Float32, Rune, String, Unit, Unit, Rune)>.Some((UInt32(131), Float32(-103.0), 'K', "5XS%y=?r_i", (), (), 'f')), ([false, true, true, false, true, true, false, true, false, true] as (UInt32, Float32, Rune, String, Unit, Unit, Rune)), (Option<Option<UInt32>>.None as (UInt32, Float32, Rune, String, Unit, Unit, Rune)), Option<(UInt32, Float32, Rune, String, Unit, Unit, Rune)>.Some((UInt32(236), Float32(-112.0), '8', """
F,%A+
$h3=D
""", (), (), 'H')), Option<(UInt32, Float32, Rune, String, Unit, Unit, Rune)>.Some((UInt32(127), Float32(61.0), '9', "vykgK2a{JcK", (), (), '6')), (Int32(8) as (UInt32, Float32, Rune, String, Unit, Unit, Rune)), ((Int32(104)&127..=Int32(95)&127:(107|1)) as (UInt32, Float32, Rune, String, Unit, Unit, Rune)), (Aggregate154<Rune>() as (UInt32, Float32, Rune, String, Unit, Unit, Rune))] as Bool), Option<Bool>.None, (Option<Int64>.None as Bool), Option<Bool>.None];
            var3719
        
    }|>func2252)|>var2249;
    UInt32(143)
}

public func func2175(param2176 : Option<UInt8>) : UInt32 { // block id: 2177
    var127;
    var var2204 : ??Bool = Option<Option<Bool>>.None;
    func7(namedParam149 : ((Option<Option<Option<Option<Bool>>>>.None ?? Option<Option<Option<Bool>>>.None) ?? try { // block id: 2193
        var364;
        if (false) { Option<Option<Bool>>.Some(Option<Bool>.Some(true)) } else { Option<Option<Bool>>.Some(var88) } 
    } finally { // block id: 2202
        var2204
    }), namedParam150 : (var1402 ** (var1402 & 3)) % ((if (var760) { // block id: 2212
        ((-13)&127..3&127:(-96)|1);
        Int32(113)
    } else if (var760) { // block id: 2216
        var var2220 : Int32 = Int32(75);
        var1402 + var2220
    } else { // block id: 2222
        Int32(-110)
    }) | 1));
    func2225(UInt8(21))
}


func func2042(param2043 : Option<UInt32>) : String { // block id: 2044
    Aggregate154<Rune>.func2048(try { // block id: 4229
        ();
        if (var3232) { var1324 } else { Option<(UInt32, Float32, Rune, String, Unit, Unit, Rune)>.Some(var3300) } 
    } catch (_) { // block id: 4236
        var2931 ^ var2931;
        var1706++;
        Option<(UInt32, Float32, Rune, String, Unit, Unit, Rune)>.None
    }, [var521, var4246, var521, var4251, UInt32(254), UInt32(167), UInt32(130), UInt32(115), var4246, var4251], namedParam2051 : func284)
}




func func1709(param1710 : Option<Enum65>) : UInt8 { // block id: 1711
    let var1904 : Range<UInt32> = (UInt32(Int32(UInt8(UInt8(87))))&127..UInt32(19)&127:(118|1));
    let var1917 : Array<Option<UInt32>> = [Option<UInt32>.None, (((), UInt32(9), """
bYZWM
5VI;Z
""", (UInt16(174)&127..UInt16(233)&127:60|1), [UInt32(84), UInt32(32), UInt32(78), UInt32(16), UInt32(95), UInt32(222), UInt32(96), UInt32(252), UInt32(102), UInt32(60)]) as UInt32), Option<UInt32>.Some(UInt32(Int8(-9))), Option<UInt32>.None, Option<UInt32>.Some(UInt32(179)), (UInt16(Int8(Int8(40))) as UInt32), Option<UInt32>.Some(UInt32(124)), ((Option<UInt32>.None as Bool) as UInt32), ([(() as Bool), (((), UInt32(83), ###"NGZa{dRsXa{o"###, (UInt16(110)&127..=UInt16(115)&127:(122|1)), [UInt32(47), UInt32(160), UInt32(6), UInt32(144), UInt32(90), UInt32(102), UInt32(151), UInt32(108), UInt32(176), UInt32(141)]) as Bool), (Option<Unit>.Some(()) as Bool), Option<Bool>.Some(true), Option<Bool>.None, Option<Bool>.None, ((UInt64(248)&127..UInt64(5)&127:(-6)|1) as Bool), Option<Bool>.None, Option<Bool>.Some(true), Option<Bool>.Some(false)] as UInt32), Option<UInt32>.None];
    let var2001 : Float32 = Float32(117.0);
    func func1842(param1843 : String, namedParam1844 ! : Option<UInt32>, optionalParam1845 ! : Range<Int64> = ((-65)&127..24&127:((-18)|1))) : UInt8 { // block id: 1850
        var loopTimeVar1871 : Int64 = 0;
        while ((if ((Option<Bool>.None ?? false)) { // block id: 1856
            var760
        } else if (var120 && true) { // block id: 1861
            var127;
            var211;
            Float32(76.0) > Float32(30.0)
        } else { // block id: 1867
            false
        }) && loopTimeVar1871 < 100 ) {
            loopTimeVar1871++;

        };
        if (if (match (var418) {
            case _ => 
                var120 || true
            
            case caseVar1884 : (Unit, UInt32, String, Range<UInt16>, Array<UInt32>) => 
                ();
                false
            
            case caseVar1890 : Array<Option<(UInt32, Float32, Rune, String, Unit, Unit, Rune)>> => 
                (UInt8(69)&127..=var211&127:(var33|1));
                var33 != var33
            
            case caseVar1901 => 
                var1904;
                var127;
                true
            
            case _ => 
                var1917;
                var760
            
        }) { // block id: 1982
            Int32(-56) == var1402
        } else if (try { // block id: 1987
            if (var760) { (var1706&127..=UInt8(73)&127:(var33|1)) } else { (UInt8(38)&127..=UInt8(14)&127:125|1) } ;
            false || var120
        } finally { // block id: 1998
            var2001 + var2001;
            true
        }) { // block id: 2005
            -Int16(77);
            ();
            UInt32(141) >= var521
        } else { // block id: 2012
            true
        }) { // block id: 2014
            (Option<UInt8>.Some(UInt8(168)) ?? var211)
        } else { // block id: 2023
            UInt8(94)
        }
    }
;
    let var4261 : (Option<UInt32>) -> String = func2042;
    var loopTimeVar4377 : Int64 = 0;
    do {
        loopTimeVar4377++;
        let var4285 : ?Array<Bool> = ((20&127..(-97)&127:(-91)|1) as Array<Bool>);
        func func1716(optionalParam1717 ! : (Array<Range<UInt8>>, UInt32, Array<Bool>, Range<UInt32>, Range<Int64>, Int16, (UInt32, Float32, Rune, String, Unit, Unit, Rune)) = ([(UInt8(19)&127..UInt8(127)&127:89|1), (UInt8(244)&127..UInt8(144)&127:25|1), (UInt8(145)&127..=UInt8(219)&127:(-32)|1), (UInt8(32)&127..UInt8(195)&127:24|1), (UInt8(116)&127..=UInt8(3)&127:(-110)|1), (UInt8(95)&127..UInt8(74)&127:24|1), (UInt8(25)&127..=UInt8(15)&127:65|1), (UInt8(116)&127..=UInt8(169)&127:(-84)|1), (UInt8(155)&127..UInt8(214)&127:(-108)|1), (UInt8(9)&127..UInt8(236)&127:22|1)], UInt32(231), [([true, true, true, true, false, false, true, false, true, true] is (UInt32, Float32, Rune, String, Unit, Unit, Rune)), true, ([(UInt8(131)&127..=UInt8(205)&127:((-1)|1)), (UInt8(180)&127..=UInt8(11)&127:23|1), (UInt8(80)&127..=UInt8(199)&127:(-104)|1), (UInt8(140)&127..=UInt8(139)&127:(20|1)), (UInt8(187)&127..UInt8(208)&127:((-11)|1)), (UInt8(68)&127..UInt8(106)&127:((-22)|1)), (UInt8(29)&127..UInt8(148)&127:89|1), (UInt8(59)&127..UInt8(166)&127:((-2)|1)), (UInt8(82)&127..UInt8(162)&127:(-49)|1), (UInt8(43)&127..=UInt8(254)&127:88|1)] is Option<Unit>), (Int64(UInt16(143)) is Range<Int32>), true, ([false, true, true, true, true, false, false, false, true, true] is (UInt32) -> Unit), true, true, (([Option<(UInt32, Float32, Rune, String, Unit, Unit, Rune)>.None, Option<(UInt32, Float32, Rune, String, Unit, Unit, Rune)>.Some((UInt32(45), Float32(-40.0), '5', """
+rqb:
u6W\"+
""", (), (), '7')), Option<(UInt32, Float32, Rune, String, Unit, Unit, Rune)>.None, Option<(UInt32, Float32, Rune, String, Unit, Unit, Rune)>.Some((UInt32(97), Float32(39.0), 'l', ")t7[p~K?Dr", (), (), '2')), Option<(UInt32, Float32, Rune, String, Unit, Unit, Rune)>.Some((UInt32(86), Float32(105.0), 'L', "]dRrd,fjq?", (), (), 'C')), Option<(UInt32, Float32, Rune, String, Unit, Unit, Rune)>.None, Option<(UInt32, Float32, Rune, String, Unit, Unit, Rune)>.None, Option<(UInt32, Float32, Rune, String, Unit, Unit, Rune)>.None, Option<(UInt32, Float32, Rune, String, Unit, Unit, Rune)>.None, Option<(UInt32, Float32, Rune, String, Unit, Unit, Rune)>.None] as Enum65) is UInt32), true], (UInt32(211)&127..=UInt32(186)&127:(Int64(UInt16(Int8(-73)))|1)), (67&127..=(-29)&127:40|1), Int16(Int16(Int16(Int16(49)))), (UInt32(174), Float32(-58.0), 'm', "'>\"#s_-HS@", (), (), 't')), namedParam1837 ! : Option<Option<Bool>>, optionalParam1838 ! : Int32 = Int32(118)) : UInt8 { // block id: 1840
            func func2026(optionalParam2027 ! : Range<UInt16> = (UInt16(140)&127..=UInt16(UInt16(UInt16(Int16(-114))))&127:(Int64(UInt32(217))|1)), namedParam2036 ! : ((Option<Option<Bool>>, Int32) -> Unit) -> Range<UInt8>, namedParam2039 ! : Array<Bool>) : String { // block id: 2040
                try { // block id: 4264
                    var925 -= var921;
                    var120 &&= var120;
                    Option<UInt32>.Some(var4246)
                } finally { // block id: 4273
                    if (var760) { Option<UInt32>.None } else { Option<UInt32>.None } 
                }|>var4261
            }
;
            var var4319 : Int8 = Int8(UInt8(62));
            func1842(func2026(namedParam2036 : func1260, namedParam2039 : (var4285 ?? var3601)), namedParam1844 : Option<UInt32>.Some((Option<UInt32>.None ?? UInt32(202))), optionalParam1845 : if ((var418 is Range<UInt16>)) { match (var852) {
                case '0' | 'T' | 'Y' | 'E' => 
                    var4306
                
                case caseVar4315 : Option<Bool> => 
                    var4319--;
                    var271;
                    (93&127..=10&127:6|1)
                
                case caseVar4326 : Int16 => 
                    var4019 *= var3297;
                    [(UInt8(56)&127..=UInt8(234)&127:73|1), (UInt8(250)&127..=UInt8(101)&127:(-107)|1), (UInt8(207)&127..UInt8(12)&127:(-120)|1), (UInt8(98)&127..=UInt8(10)&127:(-20)|1), (UInt8(43)&127..=UInt8(113)&127:1|1), (UInt8(139)&127..=UInt8(36)&127:75|1), (UInt8(144)&127..UInt8(8)&127:24|1), (UInt8(144)&127..=UInt8(67)&127:77|1), (UInt8(243)&127..UInt8(184)&127:(-102)|1), (UInt8(247)&127..UInt8(177)&127:75|1)];
                    ((-8)&127..=(-53)&127:(-29)|1)
                
                case _ : Interface269 => 
                    var127;
                    if (var3232) { ((-64)&127..=48&127:82|1) } else { var4306 } 
                
                case _ => 
                    if (var120) { var1310 } else { Option<Int64>.Some((-7)) } ;
                    (var33&127..var33&127:((-117)|1))
                
            } } else { (var4358 ?? (75&127..(-93)&127:(-76)|1)) } )
        }
;
        func1716(namedParam1837 : Option<Option<Bool>>.None, optionalParam1838 : var1402);
        if (false) { // block id: 4366
            var127;
            var4370 *= UInt64(103);
            var4370 &= var4370
        }
    } while ((var120) && loopTimeVar4377 < 100 ) ;
    var3268 <<= (((Option<UInt8>.None ?? (var4384 ?? var3928))) & 7);
    var3268
}



public func func1701(param1702 : Array<Array<Bool>>) : (Array<Range<UInt8>>, Unit, Range<UInt64>, Range<Int16>, UInt32) { // block id: 1703
    let var4389 : (Option<Enum65>) -> UInt8 = func1709;
    var1706 <<= (((var4194|>var4389)) & 7);
    var var4471 : Range<UInt32> = (UInt32(Int16(UInt8(97)))&127..UInt32(Int8(UInt8(93)))&127:(Int64(Int16(UInt8(43)))|1));
    var var4485 : UInt32 = UInt32(41);
    let var4572 : (UInt32, Float32, Rune, String, Unit, Unit, Rune) = (UInt32(Int8(Int8(Int8(1)))), Float32(17.0), '4', """
OSE&\"
=4Ea.
""", (), (), 'S');
    let var4602 : Unit = ();
    let var4641 : Option<Enum65> = (Class266(optionalParam3725 : func2063<Range<UInt8>>, optionalParam3729 : (UInt64(117)&127..UInt64(154)&127:65|1), namedParam3741 : [(Option<Unit>.None is Option<Option<Bool>>), false, true, false, false, (UInt32(162) is ((Array<Range<UInt8>>, Unit, Range<UInt64>, Range<Int16>, UInt32)) -> Option<Option<Bool>>), true, true, false, (Option<Option<Option<Bool>>>.None is Float32)]) as Enum65);
    let var4663 : ??(UInt32, Float32, Rune, String, Unit, Unit, Rune) = (() as Option<(UInt32, Float32, Rune, String, Unit, Unit, Rune)>);
    [try { // block id: 4394
        (var2549, (), (var2931&127..UInt64(239)&127:(var33|1)), (var4019&127..=Int16(47)&127:(58|1)), var521);
        var127;
        var var4411 : UInt32 = UInt32(113);
        Option<(UInt32, Float32, Rune, String, Unit, Unit, Rune)>.Some((var4411, var4414, 'N', """
^tA A
`\\DG:
""", var127, var127, 'P'))
    } catch (e: Exception) { // block id: 4422
        var418
    } finally { // block id: 4424
        Option<UInt32>.Some(var4246);
        var33 &= (-47);
        var418
    }, try { // block id: 4432
        var4370;
        if (false) { var1324 } else { var1324 } 
    } catch (_) { // block id: 4438
        var127;
        [(), var127, (), (), var127, (), var127, var127, (), ()];
        var418
    } finally { // block id: 4452
        Option<(UInt32, Float32, Rune, String, Unit, Unit, Rune)>.None
    }, Option<(UInt32, Float32, Rune, String, Unit, Unit, Rune)>.None, match (UInt32(var4246)) {
        case _ => 
            var3268 >>= ((UInt8(243)) & 7);
            var418
        
    }, match (try { // block id: 4466
            false;
            if (var760) { var4471 } else { (UInt32(62)&127..var4485&127:((-108)|1)) } ;
            var3581
        } finally { // block id: 4489
            if (var760) { (var3232, UInt32(43)) } else { (var760, var4485) } 
        }) {
        case caseVar4500 : String => 
            var127;
            (var521, var330, ((-92)&127..=var33&127:(var33|1)), var925, Option<UInt8>.Some(UInt8(133)), var2903, var760);
            var1324
        
        case _ => 
            if (var3757) { Option<(UInt32, Float32, Rune, String, Unit, Unit, Rune)>.None } else { Option<(UInt32, Float32, Rune, String, Unit, Unit, Rune)>.Some((UInt32(50), var4414, var221, var189, (), var127, 'r')) } 
        
        case _ : ((Unit, UInt32, Array<UInt32>, Array<Bool>), UInt16) => 
            ();
            var418
        
        case (_ : Option<String>,caseVar4538) => 
            Int32(88);
            var3703;
            let var4546 : ?(UInt32, Float32, Rune, String, Unit, Unit, Rune) = Option<(UInt32, Float32, Rune, String, Unit, Unit, Rune)>.Some((UInt32(Int16(87)), Float32(-114.0), 'Q', """
:reAH
J6Rbf
""", (), (), 'o'));
            if (false) { Option<(UInt32, Float32, Rune, String, Unit, Unit, Rune)>.None } else { var4546 } 
        
        case _ => 
            if (var3757) { Option<(UInt32, Float32, Rune, String, Unit, Unit, Rune)>.Some((var4246, Float32(84.0), 'Q', var189, var127, (), 'H')) } else { Option<(UInt32, Float32, Rune, String, Unit, Unit, Rune)>.Some(var4572) } 
        
    }, if (match ((var2549, var4246, var2824, (UInt32(219)&127..=UInt32(93)&127:65|1), (var33&127..var33&127:(var33|1)), Int16(105), (var4251, Float32(5.0), var852, "^f^]~S$d0P", var4602, var4602, var218))) {
        case _ : Option<Option<Bool>> => 
            true
        
        case caseVar4612 : Option<Bool> => 
            var3714 < var1402
        
        case _ => 
            ();
            var4602;
            false
        
    }) { Option<(UInt32, Float32, Rune, String, Unit, Unit, Rune)>.None } else { (Option<Option<(UInt32, Float32, Rune, String, Unit, Unit, Rune)>>.None ?? var418) } , (try { // block id: 4632
        Option<Enum65>.Some(var109)
    } finally { // block id: 4635
        var127;
        ();
        if (true) { var4641 } else { var4641 } 
    } as (UInt32, Float32, Rune, String, Unit, Unit, Rune)), (var4663 ?? (Option<UInt32>.None as (UInt32, Float32, Rune, String, Unit, Unit, Rune))), match (var176) {
        case caseVar4672 => 
            var2931;
            Enum65.enumValue172(caseVar4672, Aggregate154<Rune>());
            if (false) { var418 } else { Option<(UInt32, Float32, Rune, String, Unit, Unit, Rune)>.None } 
        
        case _ => 
            var4602;
            let var4690 : ?Unit = (Option<Option<Bool>>.Some((((((), UInt32(77), [UInt32(117), UInt32(41), UInt32(76), UInt32(55), UInt32(18), UInt32(249), UInt32(221), UInt32(230), UInt32(208), UInt32(155)], [false, true, false, true, true, false, false, false, true, false]), UInt16(188)) as UInt8) as Bool)) as Unit);
            if (true) { Option<Unit>.Some(()) } else { var4690 } ;
            var4713
        
    }, Option<(UInt32, Float32, Rune, String, Unit, Unit, Rune)>.Some(try { // block id: 4718
        (UInt8(181)&127..=UInt8(191)&127:(-2)|1);
        var4721
    } catch (e: Exception) { // block id: 4730
        Int16(-47);
        var127;
        if (var760) { (var4485, Float32(99.0), var221, "91;CO.VOfR", var4602, var127, 'm') } else { (UInt32(173), var4414, 'O', var189, (), var4602, 't') } 
    })];
    var var4759 : ?(Array<Range<UInt8>>, Unit, Range<UInt64>, Range<Int16>, UInt32) = Option<(Array<Range<UInt8>>, Unit, Range<UInt64>, Range<Int16>, UInt32)>.Some(([(UInt8(218)&127..UInt8(204)&127:34|1), (UInt8(25)&127..=UInt8(55)&127:(105|1)), (UInt8(28)&127..UInt8(215)&127:((-122)|1)), (UInt8(200)&127..=UInt8(224)&127:8|1), (UInt8(118)&127..UInt8(140)&127:(4|1)), (UInt8(43)&127..=UInt8(149)&127:(-7)|1), (UInt8(159)&127..=UInt8(253)&127:(68|1)), (UInt8(53)&127..=UInt8(158)&127:(63|1)), (UInt8(241)&127..=UInt8(252)&127:6|1), (UInt8(190)&127..UInt8(15)&127:(32|1))], (), (UInt64(43)&127..UInt64(245)&127:28|1), (Int16(12)&127..Int16(Int8(23))&127:(Int64(UInt16(204))|1)), UInt32(UInt32(105))));
    var var4816 : (Array<Range<UInt8>>, Unit, Range<UInt64>, Range<Int16>, UInt32) = ([(UInt8(118)&127..=UInt8(185)&127:124|1), (UInt8(Int8(65))&127..UInt8(43)&127:(Int64(Int8(11))|1)), (UInt8(103)&127..=UInt8(195)&127:91|1), (UInt8(193)&127..UInt8(UInt8(175))&127:(Int64(UInt8(235))|1)), (UInt8(192)&127..UInt8(11)&127:12|1), (UInt8(176)&127..UInt8(110)&127:(-101)|1), (UInt8(227)&127..=UInt8(189)&127:((-110)|1)), (UInt8(158)&127..UInt8(Int8(-12))&127:(17|1)), (UInt8(192)&127..UInt8(196)&127:108|1), (UInt8(Int8(-7))&127..=UInt8(163)&127:(Int64(UInt32(85))|1))], (), (UInt64(134)&127..UInt64(178)&127:87|1), (Int16(93)&127..Int16(33)&127:(-10)|1), UInt32(Int16(UInt8(56))));
    if (true) { (var4759 ?? try { // block id: 4802
        (var2549, (), (UInt64(66)&127..UInt64(70)&127:(-34)|1), (var3297&127..=var4019&127:(var33|1)), var4251)
    } catch (e: Exception) { // block id: 4812
        if (false) { var4816 } else { ([(UInt8(209)&127..=UInt8(248)&127:(-93)|1), (UInt8(158)&127..=UInt8(209)&127:(-8)|1), (UInt8(171)&127..=UInt8(245)&127:(-128)|1), (UInt8(102)&127..UInt8(44)&127:29|1), (UInt8(233)&127..=UInt8(52)&127:(-91)|1), (UInt8(106)&127..UInt8(131)&127:60|1), (UInt8(120)&127..UInt8(235)&127:(-61)|1), (UInt8(3)&127..UInt8(163)&127:(-77)|1), (UInt8(42)&127..UInt8(149)&127:(-119)|1), (UInt8(167)&127..=UInt8(2)&127:(-72)|1)], var4602, (var4370&127..=UInt64(9)&127:((-76)|1)), var2553, var4485) } 
    } finally { // block id: 4866
        if (true) { var3073 } else { Option<Option<UInt32>>.None } ;
        var4602;
        var var4884 : (Array<Range<UInt8>>, Unit, Range<UInt64>, Range<Int16>, UInt32) = ([(UInt8(93)&127..UInt8(239)&127:(-95)|1), (UInt8(99)&127..UInt8(74)&127:52|1), (UInt8(7)&127..UInt8(43)&127:14|1), (UInt8(24)&127..UInt8(74)&127:73|1), (UInt8(230)&127..UInt8(53)&127:(-117)|1), (UInt8(75)&127..UInt8(108)&127:105|1), (UInt8(123)&127..=UInt8(45)&127:(-109)|1), (UInt8(170)&127..UInt8(67)&127:121|1), (UInt8(101)&127..UInt8(145)&127:49|1), (UInt8(72)&127..UInt8(143)&127:113|1)], (), (UInt64(248)&127..=UInt64(146)&127:(-107)|1), (Int16(UInt8(UInt8(229)))&127..=Int16(UInt16(Int16(51)))&127:(69|1)), UInt32(167));
        if (var3757) { ([(UInt8(194)&127..=UInt8(129)&127:(-4)|1), (UInt8(110)&127..=UInt8(209)&127:(-105)|1), (UInt8(25)&127..UInt8(67)&127:39|1), (UInt8(0)&127..UInt8(4)&127:29|1), (UInt8(123)&127..UInt8(170)&127:9|1), (UInt8(154)&127..=UInt8(72)&127:(-38)|1), (UInt8(120)&127..UInt8(22)&127:(-50)|1), (UInt8(142)&127..=UInt8(143)&127:(-1)|1), (UInt8(252)&127..=UInt8(135)&127:(-110)|1), (UInt8(242)&127..UInt8(118)&127:109|1)], var4602, (UInt64(32)&127..=UInt64(104)&127:24|1), (Int16(-103)&127..var3297&127:((-98)|1)), UInt32(73)) } else { var4884 } 
    }) } else { if (UInt16(129) < var2657) { // block id: 4902
        var4602;
        if (true) { var4816 } else { ([(UInt8(69)&127..UInt8(48)&127:(-75)|1), var364, (UInt8(114)&127..UInt8(81)&127:24|1), var364, (UInt8(35)&127..UInt8(30)&127:84|1), var364, (UInt8(9)&127..UInt8(167)&127:(-116)|1), (UInt8(211)&127..=var211&127:(var33|1)), (UInt8(190)&127..=UInt8(7)&127:66|1), var364], (), (var4370&127..var2931&127:(var33|1)), (var4019&127..Int16(-24)&127:((-61)|1)), UInt32(101)) } 
    } else { // block id: 4932
        if (false) { Option<Range<UInt8>>.None } else { var3246 } ;
        (var2549, var4602, var4941, var2553, var521)
    } } 
}




func func1629(param1630 : Array<Bool>, optionalParam1631 ! : (Option<Option<Bool>>, Int32) -> Unit = { lambdaParameter1634 : Option<Option<Bool>>, lambdaParameter1635 : Int32 => () }) : Range<UInt32> { // block id: 1641
    let var5017 : ?(UInt32, Float32, Rune, String, Unit, Unit, Rune) = Option<(UInt32, Float32, Rune, String, Unit, Unit, Rune)>.None;
    let var5090 : ?Int16 = ((6&127..=(-97)&127:(Int64(UInt16(Int16(42)))|1)) as Int16);
    func func1644(param1645 : Option<Int64>, param1646 : String, param1647 : Option<(UInt32, Float32, Rune, String, Unit, Unit, Rune)>, optionalParam1648 ! : (Int32, Range<Int16>, Option<Bool>, Range<Int64>, Array<Range<UInt8>>, Rune) = (Int32(UInt8(142)), (Int16(-22)&127..=Int16(30)&127:(-34)|1), Option<Bool>.None, (Int64(Int16(15))&127..Int64(UInt16(Int8(-78)))&127:(111|1)), [(UInt8(112)&127..=UInt8(182)&127:126|1), (UInt8(63)&127..UInt8(233)&127:12|1), (UInt8(227)&127..=UInt8(14)&127:(-114)|1), (UInt8(49)&127..UInt8(Int8(99))&127:(Int64(UInt8(10))|1)), (UInt8(116)&127..UInt8(27)&127:106|1), (UInt8(70)&127..UInt8(UInt8(121))&127:(118|1)), (UInt8(236)&127..=UInt8(127)&127:(-91)|1), (UInt8(84)&127..UInt8(153)&127:90|1), (UInt8(Int8(77))&127..UInt8(49)&127:(Int64(Int16(-122))|1)), (UInt8(UInt8(211))&127..UInt8(UInt8(36))&127:(15|1))], 'X')) : UInt32 { // block id: 1692
        var var4976 : Bool = ([((UInt16(158)&127..UInt16(89)&127:(-114)|1) is Option<UInt32>), false, (Class266() is Option<Bool>), (Option<Bool>.None is (Unit, UInt32, String, Range<UInt16>, Array<UInt32>)), true, true, (Int16(15) is Range<UInt8>), (Aggregate154<Rune>() is (String, Option<UInt32>, Range<Int64>) -> UInt8), false, false] is (Rune) -> Enum65);
        ([[false, false, false, true, true, true, false, true, false, true], var2824, [false, false, false, true, false, false, true, false, false, false], var2824, var3601, [false, false, var3757, false, true, var760, false, false, false, var4963], [false, true, false, true, false, false, true, true, false, false], [true, false, true, false, true, false, true, true, false, false], [var4963, true, var4963, var120, true, false, false, var4976, true, var120], [false, true, var4976, true, var3757, true, var3232, false, var760, true]]|>func1701)[4]|>{ lambdaParameter1696 : UInt32 =>  };
        let var5024 : Unit = ();
        (match (if (false) { var5017 } else { var5017 } ) {
            case _ => 
                var5024;
                var5027
            
            case caseVar5031 => 
                var5027
            
            case _ => 
                if (var120) { Class266() } else { var442 } ;
                var5027
            
            case caseVar5044 => 
                Option<Int16>.Some(var4019)
            
            case _ => 
                if (var3232) { var5027 } else { Option<Int16>.Some(var4019) } 
            
        } ?? if (false) { // block id: 5058
            var127;
            var4019
        } else { // block id: 5061
            var5064 &&= var5067;
            var5024;
            var4019
        } ** ((var5090 ?? Int16(-7)) & 3));
        let var5117 : ?Range<UInt8> = (UInt16(239) as Range<UInt8>);
        match (if ((var3703 ?? var3757)) { // block id: 5104
                var4019
            } else if ((var271 is Option<Bool>)) { // block id: 5108
                UInt32(171) - var4251;
                var3297 - var3297
            } else { // block id: 5115
                var5117;
                var127;
                var4019 * var3297
            }) {
            case _ => 
                var1402;
                var4306;
                -UInt32(19)
            
        }
    }
;
    var var5141 : UInt8 = UInt8(UInt8(229));
    let var5150 : ((Unit, UInt32, Array<UInt32>, Array<Bool>), UInt16) = (((), UInt32(Int32(-87)), [UInt32(209), UInt32(58), UInt32(54), UInt32(78), UInt32(146), UInt32(52), UInt32(7), UInt32(245), UInt32(59), UInt32(174)], [false, ((UInt8(99)&127..=UInt8(242)&127:49|1) is Bool), (7.0 is Option<Option<Option<Option<Bool>>>>), (Class266(optionalParam3725 : func2063<Range<UInt8>>, optionalParam3729 : (UInt64(36)&127..=UInt64(184)&127:99|1), namedParam3741 : [true, false, false, false, true, false, false, true, true, true]) is Option<Int16>), true, (Option<Bool>.Some(true) is (Int32, Int8) -> Bool), true, false, false, false]), UInt16(182));
    let var5280 : ??Int64 = (([(UInt8(140)&127..=UInt8(169)&127:80|1), (UInt8(248)&127..UInt8(103)&127:17|1), (UInt8(165)&127..UInt8(34)&127:64|1), (UInt8(18)&127..UInt8(130)&127:34|1), (UInt8(214)&127..UInt8(94)&127:117|1), (UInt8(76)&127..UInt8(247)&127:(-92)|1), (UInt8(45)&127..=UInt8(98)&127:116|1), (UInt8(90)&127..UInt8(5)&127:(-13)|1), (UInt8(213)&127..UInt8(148)&127:116|1), (UInt8(108)&127..UInt8(32)&127:(-30)|1)], UInt32(69), [true, false, true, false, false, true, false, true, true, false], (UInt32(106)&127..UInt32(178)&127:((-110)|1)), (50&127..=Int64((-6))&127:((-11)|1)), Int16(-18), (UInt32(188), Float32(Float32(83.0)), 'K', "&lrgDa55uT", (), (), 'X')) as Option<Int64>);
    let var5307 : Int64 = Int64(Int16(-25));
    (func1644(if (var760) { var1310 } else { var1310 } , match (Int32(14)) {
        case -26 => 
            var5141--;
            Class266();
            """
?oQAZ
WoHp<
"""
        
        case -20 => 
            var5150;
            var189
        
        case -31 | -24 | 44 => 
            """
8\"Q2b
qZ+p=
"""
        
        case -112 | -90 | -21 => 
            var925 ^= Int8(-39);
            var189
        
        case _ => 
            var925 <<= ((Int8(79)) & 7);
            (UInt16(248)&127..=UInt16(57)&127:(-105)|1);
            if (false) { ###"O#0v(Hh/CG"### } else { """
wi,ko
ru`MT
""" } 
        
    }, (var5211 ?? var4713))&127..=UInt32(try { // block id: 5245
        if (false) { var1324 } else { Option<(UInt32, Float32, Rune, String, Unit, Unit, Rune)>.Some((var4246, Float32(-119.0), 'g', var189, (), var127, '1')) } ;
        var3714
    } finally { // block id: 5259
        Int32(5);
        if (true) { var2903 } else { (var127, UInt32(115), """
T\"V^w
]GVDg
""", (UInt16(135)&127..=UInt16(54)&127:87|1), [UInt32(170), UInt32(216), UInt32(250), UInt32(102), UInt32(46), UInt32(108), UInt32(182), UInt32(167), UInt32(85), UInt32(0)]) } ;
        Int32(-41) & var3714
    })&127:(((var5280 ?? Option<Int64>.Some(var5307)) ?? var5307 >> ((98) & 7))|1))
}

public func func1440(param1441 : (UInt32, Float32, Rune, String, Unit, Unit, Rune), param1442 : (Rune) -> Enum65, param1445 : (Bool, UInt32), param1446 : (Option<Option<Bool>>, Int32) -> Unit) : (Bool, UInt32) { // block id: 1450
    let var1557 : Float32 = Float32(Float32(Float32(-84.0)));
    let var1601 : (UInt32) -> Unit = { lambdaParameter1604 : UInt32 => () };
    func func1452(param1453 : Range<Int64>, namedParam1454 ! : Enum65) : Range<UInt32> { // block id: 1455
        var var1465 : (Int32, Range<Int16>, Option<Bool>, Range<Int64>, Array<Range<UInt8>>, Rune) = (Int32(-94), (Int16(UInt8(UInt8(162)))&127..Int16(48)&127:(Int64(Int16(UInt8(163)))|1)), Option<Bool>.Some(true), (84&127..=(-75)&127:(Int64(UInt8(Int8(-98)))|1)), [(UInt8(UInt8(209))&127..=UInt8(220)&127:(Int64(Int8(51))|1)), (UInt8(174)&127..=UInt8(248)&127:91|1), (UInt8(241)&127..=UInt8(236)&127:(-114)|1), (UInt8(Int8(59))&127..=UInt8(111)&127:(27|1)), (UInt8(UInt8(78))&127..=UInt8(UInt8(6))&127:(Int64(5)|1)), (UInt8(UInt8(40))&127..UInt8(27)&127:(75|1)), (UInt8(197)&127..UInt8(207)&127:(-81)|1), (UInt8(117)&127..UInt8(UInt8(68))&127:(Int64(Int8(-92))|1)), (UInt8(UInt8(56))&127..=UInt8(Int8(76))&127:(Int64((-44))|1)), (UInt8(228)&127..UInt8(138)&127:119|1)], 'e');
        var var1529 : ?Bool = Option<Bool>.None;
        var loopTimeVar1534 : Int64 = 0;
        do {
            loopTimeVar1534++;

        } while (((var1465[2] ?? (var1529 ?? true))) && loopTimeVar1534 < 100 ) ;
        let var1597 : ??Bool = Option<Option<Bool>>.None;
        var var5402 : Range<Int32> = (Int32(61)&127..Int32(-55)&127:(Int64(Int32(UInt8(UInt8(231))))|1));
        try { // block id: 1536
            let var1548 : (Unit, UInt32, String, Range<UInt16>, Array<UInt32>) = ((), UInt32(103), "$<E?u8,_K0", (UInt16(147)&127..=UInt16(200)&127:2|1), [UInt32(211), UInt32(155), UInt32(190), UInt32(77), UInt32(154), UInt32(69), UInt32(10), UInt32(155), UInt32(128), UInt32(214)]);
            if (true) { // block id: 1539
                var127;
                var127;
                Float32(-112.0)
            } else { // block id: 1543
                ();
                if (var760) { var1548 } else { var1548 } ;
                var1557
            };
            let var1573 : Bool = true;
            ([(UInt8(153)&127..UInt8(48)&127:(-81)|1), (UInt8(34)&127..=UInt8(240)&127:(-39)|1), (UInt8(93)&127..UInt8(164)&127:(-59)|1), (UInt8(3)&127..UInt8(198)&127:(-80)|1), (UInt8(121)&127..UInt8(51)&127:(-86)|1), (UInt8(114)&127..UInt8(176)&127:38|1), (UInt8(218)&127..=UInt8(147)&127:(-116)|1), (UInt8(169)&127..=UInt8(134)&127:123|1), (UInt8(197)&127..=UInt8(38)&127:(-19)|1), (UInt8(237)&127..UInt8(82)&127:(-56)|1)], UInt32(44), [var760, var120, true, true, var760, var1573, false, true, false, var760], (var521&127..var521&127:(33|1)), (74&127..14&127:(-95)|1), Int16(117), param1441)[3]
        } catch (_) { // block id: 1587
            let var5321 : UInt32 = UInt32(UInt8(63));
            func func1589(namedParam1590 ! : Int64, optionalParam1591 ! : Int16 = Int16(77), namedParam1593 ! : Option<(UInt32, Float32, Rune, String, Unit, Unit, Rune)>) : Range<UInt32> { // block id: 1594
                (var1597 as Bool);
                var var1616 : Bool = false;
                try { // block id: 1608
                    var127;
                    [var120, true, false, false, var1616, var1616, var120, false, false, var760];
                    var521
                } catch (e: Exception) { // block id: 1624
                    ();
                    var211;
                    UInt32(113)
                }|>var1601;
                func1629([true, try { // block id: 5316
                    (UInt64(168)&127..UInt64(246)&127:96|1);
                    Option<UInt8>.None;
                    var5321 != var5321
                } finally { // block id: 5325
                    var4370++;
                    ();
                    var760
                }, (Option<Bool>.None ?? false), (Option<Bool>.Some(false) ?? true), match {
                    case false => 
                    var3757 ||= true;
                    optionalParam1591 > optionalParam1591
                    case false => 
                    if (false) { (UInt8(120)&127..=UInt8(180)&127:(-83)|1) } else { var364 } ;
                    UInt64(201) == var2931
                    case _ => 
                    var5067
                }, try { // block id: 5358
                    true
                } catch (e: Exception) { // block id: 5360
                    var3268 <<= ((var3268) & 7);
                    var5064
                } finally { // block id: 5365
                    let var5367 : ?Array<Bool> = (((((), UInt32(223), [UInt32(34), UInt32(71), UInt32(146), UInt32(26), UInt32(5), UInt32(232), UInt32(69), UInt32(122), UInt32(6), UInt32(117)], [true, false, true, true, true, false, true, false, true, true]), UInt16(UInt8(42))) as Option<Option<Option<Bool>>>) as Array<Bool>);
                    var5367;
                    false
                }, var5067, (var5382 ?? true), if (false) { // block id: 5388
                    ();
                    true
                } else { // block id: 5391
                    var120
                }, var1616], optionalParam1631 : param1446)
            }
;
            func1589(namedParam1590 : var33, optionalParam1591 : var3297, namedParam1593 : var4713);
            var loopTimeVar5420 : Int64 = 0;
            while ((true) && loopTimeVar5420 < 100 ) {
                loopTimeVar5420++;
                var5402;
                if (true) { Class266(optionalParam3729 : (var4370&127..=UInt64(81)&127:(var33|1)), namedParam3741 : [true, false, true, true, false, true, false, true, true, false]) } else { Class266() } 
            };
            match (Option<UInt8>.None) {
                case _ => 
                    var2657 -= var2657;
                    Option<Bool>.None;
                    var5431
                
                case caseVar5443 => 
                    ();
                    (UInt32(126)&127..UInt32(237)&127:124|1)
                
                case _ => 
                    ((-34)&127..65&127:(-58)|1);
                    var127;
                    if (var120) { (var5321&127..UInt32(224)&127:(var33|1)) } else { var5459 } 
                
                case caseVar5463 : (UInt32, Float32, Rune, String, Unit, Unit, Rune) => 
                    ();
                    var127;
                    (UInt32(82)&127..UInt32(208)&127:(-126)|1)
                
                case _ => 
                    var33 += (-59);
                    (var4251&127..var5321&127:(var33|1))
                
            }
        }
    }
;
    func1452(try { // block id: 5478
        var2740;
        if (true) { ((-23)&127..(-27)&127:((-37)|1)) } else { ((-113)&127..=var33&127:(var33|1)) } 
    } finally { // block id: 5490
        var921;
        if (var3232) { Option<Option<UInt32>>.None } else { var3073 } ;
        if (false) { (33&127..(-91)&127:32|1) } else { (var33&127..(-72)&127:(var33|1)) } 
    }, namedParam1454 : Enum65.enumValue172(if (false) { var176 } else { var176 } , Aggregate154<Rune>()));
    (try { // block id: 5511
        var127;
        false
    } catch (_) { // block id: 5514
        Float32(-104.0);
        Int16(72) != Int16(-106)
    }, UInt32(59))
}

public func func1419(param1420 : Array<Option<UInt32>>) : UInt16 { // block id: 1421
    var var5598 : Bool = ((Option<(UInt32, Float32, Rune, String, Unit, Unit, Rune)>.Some((UInt32(184), Float32(-116.0), 'o', ###"F2|6lT<6K6"###, (), (), 'F')) as Bool) is Option<Bool>);
    if (match ([false, false, true, true, false, true, true, false, true, false]) {
        case caseVar1427 : UInt32 => 
            true
        
        case _ : Range<Int8> => 
            var1367;
            var120
        
        case _ => 
            var120
        
    }) { // block id: 1438
        func1440(var3300, func68, var5523, func7);
        try { // block id: 5536
            var5538;
            var var5551 : ?String = (("""
}}rC)
8zZvI
""" as Bool) as String);
            var5551;
            var2657
        } finally { // block id: 5556
            ();
            var127;
            UInt16(21)
        }
    } else { // block id: 5560
        var loopTimeVar5564 : Range<UInt64> = (UInt64(UInt32(119))&127..=UInt64(Int32(Int16(41)))&127:((-118)|1));
        for (i in loopTimeVar5564 where true) {

        };
        var loopTimeVar5579 : Int64 = 0;
        do {
            loopTimeVar5579++;
            var5064 ||= true
        } while ((true) && loopTimeVar5579 < 100 ) ;
        match (UInt8(63)) {
            case 132 => 
                ();
                Option<Bool>.None;
                UInt16(145)
            
            case 181 | 94 | 243 | 250 => 
                UInt16(149)
            
            case caseVar5594 => 
                var5598 ||= false;
                var127;
                var2657
            
            case _ => 
                var5616;
                (UInt64(184)&127..UInt64(199)&127:117|1);
                var2657
            
        }
    }
}


public func func1220() : Class266 { // block id: 1221
    var var1223 : Option<Enum65> = (###"H'0v\\dzLY/"### as Enum65);
    var1223;
    var var1231 : Array<Array<Bool>> = [[false, false, false, true, true, true, true, true, false, false], [true, true, false, false, false, false, false, true, true, false], [false, true, true, false, false, true, true, true, true, true], [false, false, false, true, true, false, false, false, true, true], [false, true, true, false, true, false, true, false, false, true], [true, false, false, true, false, false, false, false, true, true], [true, true, true, false, false, true, true, false, false, true], [false, true, true, true, false, true, true, false, true, true], [true, false, true, true, false, true, true, false, true, true], [false, true, false, false, true, false, false, false, false, true]];
    let var1240 : ?Bool = ((Int16(96)&127..=Int16(-122)&127:(1|1)) as Bool);
    var loopTimeVar1256 : Int64 = 0;
    do {
        loopTimeVar1256++;
        [var88, var88, var1240, Option<Bool>.None, Option<Bool>.Some(var120), Option<Bool>.Some(var120), var1240, var88, var1240, var88]
    } while ((var1231[2][4]) && loopTimeVar1256 < 100 ) ;
    let var5626 : (Array<Option<UInt32>>) -> UInt16 = func1419;
    let var5634 : ?Array<Option<UInt32>> = (Int32(UInt32(Int32(92))) as Array<Option<UInt32>>);
    let var5641 : Array<Option<Bool>> = Array<Option<Bool>>(10){ i => (Option<Range<UInt8>>.None as Bool) };
    let var5715 : ?UInt32 = Option<UInt32>.None;
    try { // block id: 1258
        func1260(optionalParam1261 : func7);
        try { // block id: 1390
            var127;
            var var1395 : Int32 = Int32(6);
            Int32(75) ^ var1395
        } finally { // block id: 1397
            var33 | (-36);
            var1402
        };
        func func1406<T0>(param1407 : (Option<Option<Bool>>, Int32) -> Unit, namedParam1411 ! : Array<Array<Bool>>, optionalParam1412 ! : Range<UInt16> = (UInt16(210)&127..UInt16(204)&127:21|1), optionalParam1414 ! : Option<Enum65> = (UInt16(174) as Enum65)) : Class266 where T0 <: Option<Option<Bool>> { // block id: 1417
            var5634.getOrThrow()|>var5626;
            match (var5641) {
                case _ => 
                    var5064 &&= false
                
            };
            var var5725 : ((Array<Range<UInt8>>, Unit, Range<UInt64>, Range<Int16>, UInt32)) -> Option<Option<Bool>> = func2063<Range<UInt8>>;
            match (var5715) {
                case _ => 
                    Option<Bool>.None;
                    if (var760) { Class266(optionalParam3725 : var5725, optionalParam3729 : var4941, namedParam3741 : var2824) } else { Class266() } 
                
                case _ => 
                    var127;
                    Class266(optionalParam3725 : func2063<Range<UInt8>>, namedParam3741 : var3601)
                
            }
        }
;
        func1406<Option<Option<Bool>>>(func7, namedParam1411 : var3412, optionalParam1414 : var4194)
    } finally { // block id: 5739
        var4251--;
        match (Option<Range<UInt8>>.Some((UInt8(158)&127..UInt8(129)&127:95|1))) {
            case caseVar5747 : Enum65 => 
                var33;
                var3757 ||= var5064;
                var var5754 : Unit = ();
                var5754
            
            case _ => 
                var127
            
        };
        Class266(namedParam3741 : [false, true, false, false, true, false, true, false, true, false])
    }
}

public func func7(param8 : Unit) : Unit { // block id: 9
    var var17 : UInt32 = UInt32(189);
    match (UInt64(try { // block id: 13
            UInt8(8);
            var17 -= UInt32(221);
            Int8(-12)
        } catch (_) { // block id: 21
            var var24 : Int8 = Int8(86);
            -var24
        } finally { // block id: 26
            Int8(-77)
        })) {
        case _ : String => 
            param8;
            var33
        
        case 29 => 
            var var42 : Float64 = 105.0;
            57.0 + var42;
            var var46 : Int16 = Int16(72);
            var46++;
            var33
        
        case _ => 
            ();
            var33
        
    };
    let var571 : (Rune) -> Enum65 = func68;
    let var901 : Range<UInt32> = (UInt32(UInt16(183))&127..UInt32(231)&127:(Int64(UInt32(210))|1));
    let var1013 : ?Unit = Option<Unit>.None;
    let var1130 : Bool = true;
    func func55(optionalParam56 ! : Int32 = Int32(UInt8(UInt8(Int8(-31)))), optionalParam61 ! : Int8 = Int8(53)) : Bool { // block id: 63
        let var666 : ((Unit, UInt32, Array<UInt32>, Array<Bool>), UInt16) = (((), UInt32(236), [UInt32(177), UInt32(153), UInt32(205), UInt32(31), UInt32(159), UInt32(38), UInt32(54), UInt32(218), UInt32(94), UInt32(133)], [true, true, ((((), UInt32(114), [UInt32(138), UInt32(67), UInt32(254), UInt32(99), UInt32(20), UInt32(92), UInt32(160), UInt32(32), UInt32(33), UInt32(42)], [false, true, true, true, false, false, true, true, true, false]), UInt16(28)) is UInt32), true, true, true, (Class266() is (String, Interface269, (Bool, UInt32)) -> (UInt32, Float32, Rune, String, Unit, Unit, Rune)), (Int32(48) is Array<UInt32>), ((Int8(-107)&127..Int8(17)&127:(-20)|1) is (Rune) -> Enum65), ("?CiLbZeHXO" is (Option<Option<Bool>>, Int32) -> Unit)]), UInt16(23));
        let var798 : UInt16 = UInt16(102);
        let var861 : (UInt32, Float32, Rune, String, Unit, Unit, Rune) = (UInt32(31), Float32(Float32(Float32(122.0))), 'E', ">&0zhl$D3-", (), (), 'd');
        func func574(param575 : Float64, namedParam576 ! : Aggregate154<Rune>, namedParam577 ! : Bool, namedParam578 ! : Range<UInt32>) : Rune { // block id: 579
            var loopTimeVar605 : Int64 = 0;
            while ((([Option<Bool>.Some(true), Option<Bool>.Some(var120), Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, var88, var88, Option<Bool>.None, Option<Bool>.Some(true), Option<Bool>.Some(false)][5] ?? (var88 ?? true))) && loopTimeVar605 < 100 ) {
                loopTimeVar605++;

            };
            try { // block id: 610
                ###"<Xa{\"'p?8`)"###;
                let var613 : ((Unit, UInt32, Array<UInt32>, Array<Bool>), UInt16) = (((), UInt32(Int8(17)), [UInt32(Int8(54)), UInt32(Int16(-112)), UInt32(UInt16(71)), UInt32(86), UInt32(124), UInt32(Int8(1)), UInt32(188), UInt32(21), UInt32(UInt16(226)), UInt32(Int8(75))], [(Float32(51.0) is Option<Enum65>), false, (UInt64(177) is Float64), true, false, ('y' is Int8), ((true, UInt32(116)) is (Rune) -> Enum65), true, ((UInt8(99)&127..=UInt8(137)&127:((-54)|1)) is Array<Bool>), true]), UInt16(UInt16(UInt16(42))));
                var613
            } catch (e: Exception) { // block id: 660
                var127;
                param8;
                if (namedParam577) { var666 } else { var706 } 
            } finally { // block id: 757
                let var764 : (Unit, UInt32, Array<UInt32>, Array<Bool>) = ((), UInt32(249), [UInt32(93), UInt32(161), UInt32(72), UInt32(180), UInt32(175), UInt32(144), UInt32(119), UInt32(72), UInt32(116), UInt32(231)], [false, false, true, false, false, false, (Float32(-103.0) is Float32), false, (UInt64(70) is (String, Interface269, (Bool, UInt32)) -> (UInt32, Float32, Rune, String, Unit, Unit, Rune)), (((), UInt32(100), [UInt32(252), UInt32(8), UInt32(95), UInt32(93), UInt32(63), UInt32(47), UInt32(10), UInt32(170), UInt32(173), UInt32(125)], [false, true, false, false, true, true, true, true, false, false]) is Option<Enum65>)]);
                if (var760) { (var764, var798) } else { (((), UInt32(247), [UInt32(232), UInt32(160), UInt32(144), UInt32(117), UInt32(15), UInt32(87), UInt32(144), UInt32(27), UInt32(135), UInt32(186)], [true, false, true, true, false, false, true, true, false, true]), var798) } 
            }[0][0];
            let var814 : (Unit, UInt32, String, Range<UInt16>, Array<UInt32>) = ((), UInt32(90), ###"CSS&2GrG]W"###, (UInt16(3)&127..=UInt16(Int8(UInt8(99)))&127:(Int64(Int8(UInt8(98)))|1)), [UInt32(174), UInt32(UInt16(140)), UInt32(254), UInt32(Int32(UInt8(151))), UInt32(11), UInt32(Int8(45)), UInt32(3), UInt32(114), UInt32(UInt8(104)), UInt32(Int32(83))]);
            match ((var814[3] as Unit)) {
                case caseVar847 => 
                    let var855 : Rune = '7';
                    if (true) { var852 } else { var855 } 
                
                case _ => 
                    var861;
                    '5'
                
                case caseVar875 => 
                    Option<Unit>.None;
                    var127;
                    var221
                
                case caseVar882 => 
                    Float32(44.0);
                    if (var760) { 'H' } else { '3' } 
                
                case _ => 
                    var33;
                    'l'
                
            }
        }
;
        var var894 : Float64 = Float64(Float64(Float32(126.0)));
        match ((func574(var894, namedParam576 : var158, namedParam577 : false, namedParam578 : var901)|>var571)) {
            case _ => 
                ();
                var364;
                var33 >>= ((var33) & 7)
            
            case _ => 
                var127;
                var921 &= var925;
                ()
            
        };
        var var936 : UInt16 = UInt16(Int8(108));
        var521 <<= ((match {
            case try { // block id: 933
            var936 <<= ((var936) & 7);
            if (true) { Enum65.defaultValue } else { Enum65.enumValue172((UInt8(241), Option<Option<Bool>>.Some(var88), 'R', 'b', var211), var158) } ;
            var120
        } catch (_) { // block id: 953
            var var958 : Enum65 = Enum65.defaultValue;
            if (false) { Enum65.defaultValue } else { var958 } ;
            true
        } finally { // block id: 961
            var760
        } => 
            var521
            case true => 
            var521;
            var var970 : Int16 = Int16(Int16(-90));
            var970 >>= ((var970) & 7);
            var521
            case _ => 
            (-77.0);
            var var979 : UInt32 = UInt32(Int16(-11));
            var979 ^ var521
        }) & 7);
        let var987 : Range<UInt16> = (UInt16(32)&127..=UInt16(Int8(UInt8(248)))&127:(Int64(UInt16(UInt8(UInt8(250))))|1));
        var var1110 : UInt64 = UInt64(UInt32(UInt16(UInt16(UInt16(126)))));
        if (match (match (var987) {
                case _ => 
                    Option<Unit>.None
                
                case _ => 
                    var127;
                    Option<Unit>.None
                
                case caseVar1008 => 
                    if (var760) { var1013 } else { Option<Unit>.None } 
                
                case _ => 
                    if (false) { var1013 } else { var1013 } 
                
            }) {
            case _ => 
                [var521, UInt32(199), UInt32(78), UInt32(167), UInt32(168), var521, UInt32(176), UInt32(116), UInt32(176), UInt32(79)];
                var120
            
            case caseVar1039 : Int64 => 
                var var1042 : Array<Option<Bool>> = Array<Option<Bool>>(10){ i => (Class266() as Bool) };
                var1042;
                var760
            
            case caseVar1100 => 
                UInt8(60) <= var211
            
            case _ => 
                ();
                var1110 >= var1110
            
        }) { // block id: 1117
            try { // block id: 1119
                var760
            } catch (e: Exception) { // block id: 1121
                true
            }
        } else { // block id: 1123
            (var921, [false, true, true, true, false, false, true, false, true, false], var1130)[2]
        }
    }
;
    let var1141 : Int32 = Int32(UInt8(201));
    let var1148 : Range<Int64> = ((-106)&127..(-23)&127:70|1);
    let var1170 : UInt32 = UInt32(UInt32(16));
    var var1190 : (Unit, UInt32, String, Range<UInt16>, Array<UInt32>) = ((), UInt32(UInt8(Int8(UInt8(47)))), ###"7SUhJZpXMT"###, (UInt16(102)&127..UInt16(41)&127:(Int64(UInt64(UInt8(25)))|1)), [UInt32(233), UInt32(169), UInt32(97), UInt32(150), UInt32(219), UInt32(96), UInt32(214), UInt32(185), UInt32(80), UInt32(7)]);
    var var1207 : UInt64 = UInt64(142);
    var loopTimeVar1217 : Int64 = 0;
    do {
        loopTimeVar1217++;
        if (false) { // block id: 1164
            if (var1130) { (param8, var1170, "p47Q4EH&ys", (UInt16(51)&127..UInt16(170)&127:(24|1)), [UInt32(81), UInt32(228), var1170, UInt32(122), UInt32(145), var17, var17, UInt32(233), UInt32(93), UInt32(87)]) } else { var1190 } ;
            var1207 **= (UInt64(243) & 3)
        };
        var loopTimeVar1215 : Int64 = 0;
        do {
            loopTimeVar1215++;
            ()
        } while ((var760) && loopTimeVar1215 < 100 ) 
    } while ((func55(optionalParam56 : match (var88) {
        case _ : UInt32 => 
            Int8(-8);
            Enum65.defaultValue;
            var1141
        
        case _ => 
            var1148;
            Int32(117)
        
        case _ => 
            UInt64(46) % ((UInt64(30)) | 1);
            Int32(62)
        
        case _ => 
            Int32(-69)
        
    })) && loopTimeVar1217 < 100 ) ;
    func1220().var5762
}

main(): Int64 {
    try {
        func7(try (resource = Class266()) { // block id: 5765
            let var5767 : Unit = ();
            var5767;
            ()
        } catch (e: Exception) { // block id: 5770
            if (true) { Option<String>.Some(var189) } else { Option<String>.Some(var189) } ;
            var4019--;
            var127
        } finally { // block id: 5780
            ();
            ()
        });
        if (if (var760) { // block id: 5786
            var4370--;
            var5064
        } else { // block id: 5790
            ();
            var3757 ||= var3757;
            false
        }) { // block id: 5796
            if (var5064) { var4088 } else { Option<Bool>.Some(false) } ;
            var5803;
            var33 & var33
        } else { // block id: 5809
            (-17) + (-112)
        }
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Enum65 {

}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_expected_where_brace
// ASSERT: scan parse_expected_left_brace
// ASSERT: scan parse_expected_character
// ASSERT: scan parse_unexpected_declaration_in_scope
// ASSERT: scan parse_expected_expr_or_decl_in
// ASSERT: scan parse_expected_while_in_do_while


