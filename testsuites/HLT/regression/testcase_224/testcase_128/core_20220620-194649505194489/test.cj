/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output


public let var48 : ?Unit = Option<Unit>.None
public let var55 : Array<Option<Unit>> = Array<Option<Unit>>(10){ i => Option<Unit>.None }
public var var87 : Unit = ()
public var var115 : UInt16 = UInt16(Int16(-48))
public var var123 : Array<Array<Int16>> = [[Int16(97), Int16(-120), Int16(89), Int16(-30), Int16(-87), Int16(101), Int16(-64), Int16(-48), Int16(-9), Int16(-96)], [Int16(-8), Int16(-84), Int16(112), Int16(-84), Int16(-127), Int16(26), Int16(-80), Int16(19), Int16(89), Int16(20)], [Int16(55), Int16(-19), Int16(-77), Int16(80), Int16(87), Int16(73), Int16(-109), Int16(97), Int16(100), Int16(46)], [Int16(-126), Int16(113), Int16(24), Int16(-7), Int16(85), Int16(-26), Int16(-93), Int16(-85), Int16(82), Int16(-70)], [Int16(-111), Int16(-39), Int16(114), Int16(-21), Int16(30), Int16(-70), Int16(60), Int16(4), Int16(-43), Int16(-127)], [Int16(-12), Int16(-27), Int16(119), Int16(14), Int16(70), Int16(95), Int16(50), Int16(95), Int16(-41), Int16(-27)], [Int16(118), Int16(10), Int16(-57), Int16(-38), Int16(-39), Int16(-4), Int16(-57), Int16(56), Int16(69), Int16(-92)], [Int16(120), Int16(-60), Int16(72), Int16(85), Int16(2), Int16(-56), Int16(-87), Int16(-125), Int16(-52), Int16(-109)], [Int16(62), Int16(33), Int16(38), Int16(46), Int16(-118), Int16(61), Int16(-96), Int16(6), Int16(95), Int16(70)], [Int16(125), Int16(31), Int16(-115), Int16(46), Int16(-66), Int16(7), Int16(-65), Int16(95), Int16(-59), Int16(-71)]]
public var var143 : Int64 = Int64(Int8(19))
public var var183 : Bool = true
public let var229 : Range<UInt16> = (UInt16(106)&127..UInt16(153)&127:(-123)|1)
public var var260 : UInt32 = UInt32(Int32(UInt8(UInt8(UInt8(110)))))
public var var284 : Array<Option<Bool>> = [Option<Bool>.None, (Class206() as Bool), ((UInt64(228)&127..=UInt64(161)&127:(-28)|1) as Bool), (Float64(Float32(46.0)) as Bool), Option<Bool>.None, (() as Bool), (((-112), """
Eg|qu
w}T3(
""") as Bool), Option<Bool>.None, ((Int32(-118)&127..Int32(-108)&127:(Int64((-27))|1)) as Bool), Option<Bool>.None]
public let var315 : Float64 = (-34.0)
public var var565 : ??Unit = Option<Option<Unit>>.None
public let var660 : Int16 = Int16(Int16(12))
public var var667 : Int16 = Int16(UInt8(UInt8(64)))
public var var686 : Int32 = Int32(Int32(UInt8(Int8(Int8(-115)))))
public var var755 : (Range<UInt32>, (Array<UInt16>, Option<String>, Range<UInt8>)) = ((UInt32(96)&127..UInt32(185)&127:(-124)|1), ([UInt16(44), UInt16(10), UInt16(186), UInt16(163), UInt16(115), UInt16(241), UInt16(119), UInt16(41), UInt16(219), UInt16(101)], ((UInt8(6), Float32(83.0), (Int32(-68)&127..=Int32(122)&127:(67|1)), UInt16(136), [UInt16(155), UInt16(45), UInt16(14), UInt16(100), UInt16(231), UInt16(84), UInt16(89), UInt16(151), UInt16(23), UInt16(205)], Int32(-94), (UInt16(205)&127..UInt16(169)&127:((-109)|1))) as String), (UInt8(134)&127..UInt8(178)&127:(Int64(UInt8(210))|1))))
public var var832 : Float32 = Float32(Float32(Float32(Float32(-102.0))))
public var var840 : Array<UInt16> = [UInt16(100), UInt16(209), UInt16(243), UInt16(45), UInt16(191), UInt16(173), UInt16(159), UInt16(181), UInt16(27), UInt16(212)]
public var var866 : Bool = ([Int16(113), Int16(26), Int16(-86), Int16(-78), Int16(UInt8(63)), Int16(Int16(47)), Int16(UInt16(Int8(-116))), Int16(-12), Int16(87), Int16(-125)] is Array<Option<Unit>>)
public let var888 : Bool = false
public let var892 : Range<Int32> = (Int32(14)&127..Int32(-23)&127:(3|1))
public let var920 : ?Bool = Option<Bool>.None
public let var1013 : UInt64 = UInt64(218)
public var var1059 : ?String = (false as String)
public let var1077 : Option<Int16> = Option<Int16>.None
public let var1087 : Range<Int16> = (Int16(-119)&127..=Int16(-53)&127:(63|1))
public var var1097 : UInt8 = UInt8(239)
public let var1120 : Option<Int32> = ([("""
FUqxB
a{A(As
""" as Bool), Option<Bool>.None, Option<Bool>.None, (90 as Bool), Option<Bool>.None, ([Int16(-99), Int16(19), Int16(-72), Int16(116), Int16(-9), Int16(-12), Int16(-60), Int16(114), Int16(-46), Int16(-49)] as Bool), Option<Bool>.None, ((UInt8(90)&127..=UInt8(22)&127:117|1) as Bool), (() as Bool), Option<Bool>.None] as Int32)
public let var1179 : (Array<Option<Unit>>, (Int64, String)) = ([((([Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None], (6, ###" ~\\<r+}m0E"###)) as Bool) as Unit), ((118&127..(-84)&127:(5|1)) as Unit), (Int16(Int8(49)) as Unit), Option<Unit>.None, Option<Unit>.None, ((Int16(97)&127..Int16(-35)&127:(45|1)) as Unit), Option<Unit>.None, (Class206() as Unit), ((UInt32(163)&127..=UInt32(227)&127:(103|1)) as Unit), (Int64(Int8(-27)) as Unit)], (37, "a{WJY\\RY^OG"))
public var var1242 : ?(Array<Option<Unit>>, (Int64, String)) = Option<(Array<Option<Unit>>, (Int64, String))>.None
public var var1353 : Int16 = Int16(108)
public let var1462 : String = ###"<s3c$XlpEO"###
public let var1469 : Aggregate1465 = Aggregate1465()
public var var1518 : Int8 = Int8(-26)
public var var1533 : ((UInt8, Float32, Range<Int32>, UInt16, Array<UInt16>, Int32, Range<UInt16>), (Range<Int32>, Range<Int16>, UInt16, Array<Int16>, Float32), (UInt8, Float32, Range<Int32>, UInt16, Array<UInt16>, Int32, Range<UInt16>)) = ((UInt8(4), Float32(Float32(-72.0)), (Int32(-118)&127..=Int32(112)&127:92|1), UInt16(Int16(-116)), [UInt16(Int8(117)), UInt16(181), UInt16(37), UInt16(152), UInt16(Int8(122)), UInt16(UInt16(55)), UInt16(Int8(68)), UInt16(Int8(37)), UInt16(20), UInt16(Int16(72))], Int32(-4), (UInt16(207)&127..=UInt16(136)&127:(-68)|1)), ((Int32(68)&127..=Int32(91)&127:(-40)|1), (Int16(15)&127..Int16(-28)&127:6|1), UInt16(184), [Int16(UInt8(102)), Int16(96), Int16(UInt16(82)), Int16(Int16(-56)), Int16(62), Int16(-80), Int16(UInt16(174)), Int16(-107), Int16(89), Int16(39)], Float32(Float32(Float32(-12.0)))), (UInt8(UInt8(Int8(16))), Float32(Float32(Float32(-62.0))), (Int32(Int32(93))&127..Int32(-16)&127:((-8)|1)), UInt16(Int16(-120)), [UInt16(Int16(-3)), UInt16(UInt16(212)), UInt16(233), UInt16(UInt8(152)), UInt16(211), UInt16(35), UInt16(Int16(-109)), UInt16(112), UInt16(UInt16(237)), UInt16(11)], Int32(38), (UInt16(UInt8(4))&127..UInt16(Int16(125))&127:(Int64(Int8(1))|1))))
public let var1663 : (UInt8, Float32, Range<Int32>, UInt16, Array<UInt16>, Int32, Range<UInt16>) = (UInt8(76), Float32(Float32(98.0)), (Int32(11)&127..=Int32(-85)&127:((-75)|1)), UInt16(Int8(Int8(-37))), [UInt16(137), UInt16(94), UInt16(94), UInt16(232), UInt16(74), UInt16(70), UInt16(207), UInt16(216), UInt16(4), UInt16(104)], Int32(-87), (UInt16(52)&127..UInt16(211)&127:(-50)|1))
public var var1781 : Bool = true
public let var2015 : Bool = (((UInt8(UInt8(93))&127..=UInt8(173)&127:(107|1)) as Unit) is UInt64)
public var var2110 : UInt32 = UInt32(UInt32(Int16(Int8(Int8(-119)))))
public var var2137 : ?Unit = Option<Unit>.None
public var var2186 : ?Float64 = (((Int32(UInt8(188))&127..Int32(-44)&127:((-120)|1)), (Int16(-50)&127..Int16(59)&127:52|1), UInt16(181), [Int16(UInt16(212)), Int16(UInt16(253)), Int16(UInt8(7)), Int16(UInt8(10)), Int16(UInt8(188)), Int16(55), Int16(UInt16(34)), Int16(27), Int16(39), Int16(-74)], Float32(Float32(119.0))) as Float64)
public let var2239 : Array<Int16> = [Int16(-50), Int16(-92), Int16(15), Int16(-30), Int16(-98), Int16(-46), Int16(71), Int16(-3), Int16(105), Int16(117)]
public var var2304 : Unit = ()
let var2392 : Interface210 = Class206()
public var var2506 : ?UInt16 = ((Int64(UInt32(101))&127..Int64(Int32(UInt8(117)))&127:(Int64(Int32(Int8(-97)))|1)) as UInt16)
public let var2625 : UInt16 = UInt16(UInt16(UInt8(31)))
public let var2659 : UInt16 = UInt16(Int8(-72))
public var var2711 : Int64 = Int64(UInt16(Int16(Int8(54))))
public let var2786 : Range<Int64> = (104&127..=117&127:(-81)|1)
public let var2861 : ?Bool = Option<Bool>.None
public let var2864 : ?Bool = Option<Bool>.None
public let var2943 : Float32 = Float32(99.0)
public var var3171 : Array<Int16> = Array<Int16>(10){ i => Int16(UInt8(188)) }
public var var3209 : Array<Class206> = Array<Class206>(10){ i => Class206() }
public let var3229 : ?Unit = (() as Unit)
public var var3294 : Int64 = Int64(UInt32(250))
public let var3331 : ?(Array<Option<Unit>>, (Int64, String)) = Option<(Array<Option<Unit>>, (Int64, String))>.None
public let var3353 : Unit = ()
public let var3499 : (Int64, String) = (28, ###"tb\\O'B`7TR"###)
public let var3610 : ?Int32 = Option<Int32>.None
let var3615 : Range<UInt32> = (UInt32(78)&127..=UInt32(119)&127:(Int64(UInt8(131))|1))
let var3896 : UInt64 = UInt64(UInt32(UInt32(226)))
public var var3929 : Range<Int32> = (Int32(UInt32(79))&127..Int32(-65)&127:(29|1))
public var var3953 : UInt8 = UInt8(UInt8(83))
public var var3959 : Int8 = Int8(UInt8(Int8(Int8(Int8(75)))))

public func func17(param18 : Float64) : Bool { // block id: 19
    ([[Int16(-52), Int16(28), Int16(65), Int16(55), Int16(8), Int16(-126), Int16(20), Int16(105), Int16(-44), Int16(20)], [Int16(58), Int16(29), Int16(110), Int16(-15), Int16(125), Int16(-120), Int16(-29), Int16(-127), Int16(12), Int16(-93)], [Int16(67), Int16(124), Int16(-13), Int16(-104), Int16(103), Int16(-75), Int16(43), Int16(-80), Int16(-124), Int16(108)], [Int16(42), Int16(6), Int16(39), Int16(-51), Int16(86), Int16(26), Int16(-114), Int16(86), Int16(9), Int16(82)], [Int16(-16), Int16(-48), Int16(65), Int16(-18), Int16(100), Int16(105), Int16(-21), Int16(-61), Int16(93), Int16(79)], [Int16(97), Int16(76), Int16(93), Int16(-41), Int16(71), Int16(-54), Int16(0), Int16(-66), Int16(-3), Int16(94)], [Int16(-22), Int16(76), Int16(55), Int16(-71), Int16(-81), Int16(51), Int16(73), Int16(105), Int16(10), Int16(-95)], [Int16(-10), Int16(-8), Int16(-19), Int16(75), Int16(0), Int16(73), Int16(87), Int16(-12), Int16(119), Int16(118)], [Int16(53), Int16(110), Int16(-98), Int16(50), Int16(-41), Int16(-86), Int16(50), Int16(18), Int16(26), Int16(18)], [Int16(73), Int16(1), Int16(-101), Int16(96), Int16(11), Int16(-105), Int16(87), Int16(-115), Int16(93), Int16(-38)]][3][7] is Array<Array<Int16>>)
}



public interface Interface210 {
    func func3481(param3482 : Range<Int16>, param3483 : Option<String>) : Float64 { // block id: 3484
        try { // block id: 3486
            (Option<Float64>.Some(107.0) ?? 83.0)
        } finally { // block id: 3491
            (Option<(Int64, String)>.Some(var3499) ?? ((-121), " zq*}2N[~G"));
            if (var1781) { // block id: 3508
                var686++;
                var87;
                var315 * var315
            } else if (var2015) { // block id: 3516
                var3353;
                var3353;
                50.0
            } else { // block id: 3520
                ();
                var315 ** Float64(Int32(var315) & 3)
            }
        }
    }

}

public interface Interface209 <: Interface210 {
    static func func1107(param1108 : Range<UInt16>, namedParam1109 ! : (UInt64) -> Option<Unit>) : Int32 

}

public open class Class206 <: Interface209 & Resource {
    public init() { // block id: 208

    }
;
    public var var215 : String = "NO`-]x1Zk$";
    public var var615 : Bool = true;
    public init(param2726 : Option<Option<Float64>>) { // block id: 2727
        var loopTimeVar2738 : Int64 = 0;
        while (((if (true) { // block id: 2732
            var667++;
            var87
        } is Option<Int16>)) && loopTimeVar2738 < 100 ) {
            loopTimeVar2738++;

        };
        var loopTimeVar2760 : Int64 = 0;
        do {
            loopTimeVar2760++;
            var1518
        } while (((if (var866) { var920 } else { Option<Bool>.None }  ?? try { // block id: 2746
            false
        } catch (_) { // block id: 2748
            !true
        } finally { // block id: 2751
            Class206();
            var1077;
            var2625 == var115
        })) && loopTimeVar2760 < 100 ) 
    }
;
    static var var3101 : ?Array<Int16> = Option<Array<Int16>>.None;
    public init(param1306 : (Float64) -> Array<Option<Unit>>) { // block id: 1309
        let var3012 : UInt32 = UInt32(3);
        match ((func1317() ?? 52.0)) {
            case 82.0 => 
                var686;
                if (var866) { Option<String>.Some("""
6#`@A
Tv/n'
""") } else { var1059 } 
            
            case _ : Option<Bool> => 
                var686 = Int32(-91);
                if (var1781) { Option<String>.Some("`-K;VFg+Zw") } else { var1059 } 
            
            case caseVar2991 : Option<Option<Unit>> => 
                112;
                var87;
                var1059
            
            case 93.0 | -69.0 | -47.0 | 14.0 => 
                var2711 ^= var2711;
                ();
                if (false) { var1059 } else { var1059 } 
            
            case _ => 
                var260 = var3012;
                ();
                if (var183) { var1059 } else { Option<String>.None } 
            
        };
        var loopTimeVar3057 : Int64 = 0;
        do {
            loopTimeVar3057++;

        } while ((((((UInt8(66), Float32(-110.0), (Int32(35)&127..Int32(-103)&127:50|1), UInt16(144), [UInt16(131), UInt16(241), UInt16(6), UInt16(215), UInt16(146), UInt16(247), var2659, var2659, UInt16(151), UInt16(120)], var686, var229), ((Int32(84)&127..Int32(-81)&127:(var2711|1)), (Int16(104)&127..=Int16(54)&127:56|1), var115, [Int16(70), Int16(36), Int16(64), Int16(102), Int16(-90), Int16(78), Int16(-36), Int16(106), Int16(48), Int16(-73)], var2943), var1663) as Bool) ?? (Option<Bool>.Some(true) ?? true))) && loopTimeVar3057 < 100 ) ;
        try { // block id: 3059
            var565
        } finally { // block id: 3061
            var87;
            if (true) { // block id: 3065
                var1462
            } else { // block id: 3067
                if (var183) { var1663 } else { (var1097, Float32(-41.0), var892, var2625, [UInt16(3), var115, UInt16(27), var2625, UInt16(0), UInt16(142), var2625, UInt16(105), UInt16(122), var2659], Int32(24), (var2625&127..=var2625&127:((-79)|1))) } ;
                ###"@4^E OP%#b"###
            };
            try { // block id: 3094
                Option<Option<Unit>>.Some(Option<Unit>.Some(var87))
            } finally { // block id: 3098
                Class206();
                var3101;
                if (false) { Option<Option<Unit>>.Some(var48) } else { Option<Option<Unit>>.Some(Option<Unit>.None) } 
            }
        }
    }
;
    public init(namedParam3254 ! : Option<Int32>) { // block id: 3255
        var866 &&= (try { // block id: 3260
            ();
            (Int32(37)&127..Int32(-119)&127:6|1);
            var686 >> ((var686) & 7)
        } catch (e: Exception) { // block id: 3266
            if (false) { [UInt32(226), UInt32(205), UInt32(115), UInt32(137), UInt32(157), UInt32(45), UInt32(90), var260, var2110, UInt32(58)] } else { [UInt32(232), UInt32(240), UInt32(91), UInt32(101), UInt32(182), UInt32(34), UInt32(199), UInt32(11), UInt32(21), UInt32(70)] } ;
            Int32(-123)
        } finally { // block id: 3282
            ();
            var686
        } is Range<Int16>);
        var var3356 : Bool = true;
        var var3364 : Bool = (([false, false, false, true, true, true, false, true, true, false] as Bool) is (Range<UInt32>, (Array<UInt16>, Option<String>, Range<UInt8>)));
        var loopTimeVar3370 : Range<UInt64> = (UInt64(126)&127..UInt64(17)&127:((-18)|1));
        ((try { // block id: 3288
            Option<(Array<Option<Unit>>, (Int64, String))>.Some((var55, (var3294, var1462)))
        } catch (e: Exception) { // block id: 3298
            var2304;
            var2711;
            Option<(Array<Option<Unit>>, (Int64, String))>.None
        } finally { // block id: 3302
            (var892, var1087, UInt16(250), var3171, var2943);
            if (var183) { Option<(Array<Option<Unit>>, (Int64, String))>.Some(([var48, var2137, Option<Unit>.Some(()), var2137, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.Some(()), Option<Unit>.Some(var2304), var48], ((-54), "Q0^R2B`fbk"))) } else { var3331 } 
        } as Unit) ?? for (i in loopTimeVar3370 where match ('N') {
            case caseVar3338 : Int8 => 
                ();
                !var183
            
            case _ => 
                var3331;
                var866
            
            case caseVar3350 => 
                var3353;
                var3356
            
            case _ => 
                var3294++;
                var3364 || var866
            
        }) {

        });
        let var3439 : Rune = '0';
        try { // block id: 3376
            (Option<(Array<Option<Unit>>, (Int64, String))>.None ?? var1179)
        } catch (_) { // block id: 3384
            var3356 ||= false;
            match (var87) {
                case _ : (Range<Int32>, Range<Int16>, UInt16, Array<Int16>, Float32) => 
                    Option<String>.None;
                    var87;
                    if (var866) { var1179 } else { ([Option<Unit>.Some(()), Option<Unit>.Some(()), Option<Unit>.Some(var87), var48, var48, var2137, Option<Unit>.Some(var2304), var48, var2137, Option<Unit>.Some(var87)], (var143, var1462)) } 
                
                case () => 
                    var1179
                
                case _ : Range<UInt32> => 
                    if (var3356) { var1179 } else { (var55, ((-19), var1462)) } 
                
                case _ => 
                    if (var3364) { 'n' } else { var3439 } ;
                    var1533;
                    var1179
                
            }
        }
    }
;
    public static func func1107(param1108 : Range<UInt16>, namedParam1109 ! : (UInt64) -> Option<Unit>) : Int32 { // block id: 1112
        func3590|>func1114;
        (((Int8(-122) as Option<Int32>) ?? try { // block id: 3606
            var3353;
            var2304;
            var3610
        } catch (_) { // block id: 3612
            var3353;
            var3615;
            var3610
        }) ?? Int32(-103) - Int32(74))
    }

    public func isClosed(): Bool { return false }
    public func close(): Unit {}
}

public func func7(param8 : Unit) : String { // block id: 9
    var var38 : Float64 = Float64(Float32(110.0));
    let var91 : Bool = ((UInt8(211)&127..=UInt8(122)&127:42|1) is String);
    var var138 : Range<Int64> = ((-118)&127..=(-111)&127:117|1);
    var var148 : UInt32 = UInt32(166);
    (if ((var38|>func17)) { (Option<Option<Unit>>.Some(var48) ?? Option<Unit>.Some(())) } else { var55[1] }  ?? match (match (UInt64(131)) {
            case _ => 
                ();
                var87;
                if (var91) { var48 } else { var48 } 
            
            case _ => 
                if (var91) { var48 } else { Option<Unit>.None } 
            
            case _ => 
                Float32(67.0) + Float32(-49.0);
                var87;
                var48
            
        }) {
        case _ : Array<Int16> => 
            var115 = UInt16(43);
            if (var91) { [[Int16(24), Int16(14), Int16(-7), Int16(-86), Int16(97), Int16(-30), Int16(22), Int16(62), Int16(59), Int16(100)], [Int16(78), Int16(38), Int16(-65), Int16(95), Int16(-75), Int16(86), Int16(-30), Int16(-9), Int16(-106), Int16(12)], [Int16(-49), Int16(42), Int16(-78), Int16(-22), Int16(-74), Int16(-64), Int16(-26), Int16(-66), Int16(-47), Int16(72)], [Int16(-70), Int16(-57), Int16(-66), Int16(30), Int16(111), Int16(-101), Int16(-110), Int16(103), Int16(-56), Int16(-81)], [Int16(-41), Int16(-12), Int16(113), Int16(-23), Int16(-12), Int16(98), Int16(21), Int16(103), Int16(-48), Int16(-95)], [Int16(51), Int16(-123), Int16(-14), Int16(-41), Int16(106), Int16(14), Int16(-14), Int16(77), Int16(110), Int16(-93)], [Int16(115), Int16(-64), Int16(118), Int16(-51), Int16(-67), Int16(-103), Int16(118), Int16(32), Int16(79), Int16(123)], [Int16(82), Int16(38), Int16(88), Int16(1), Int16(-106), Int16(102), Int16(-69), Int16(30), Int16(82), Int16(-88)], [Int16(-113), Int16(-81), Int16(-110), Int16(2), Int16(-52), Int16(125), Int16(78), Int16(-104), Int16(5), Int16(76)], [Int16(108), Int16(-101), Int16(-36), Int16(-98), Int16(120), Int16(29), Int16(33), Int16(-16), Int16(118), Int16(89)]] } else { var123 } ;
            ()
        
        case caseVar128 : Option<Unit> => 
            var87
        
        case caseVar133 : Int32 => 
            if (true) { var138 } else { (100&127..var143&127:(var143|1)) } ;
            var148;
            var87
        
        case _ => 
            var87;
            (-118) != 24;
            var87
        
    });
    let var160 : ??Unit = ((Int32(UInt8(Int8(76)))&127..=Int32(Int16(-32))&127:(54|1)) as Option<Unit>);
    match (var160) {
        case caseVar171 => 
            var var174 : Unit = ();
            var174;
            ()
        
        case caseVar179 => 
            var183 ||= var183
        
        case _ => 
            param8
        
    };
    let var197 : Int16 = Int16(UInt16(Int16(77)));
    var var212 : Class206 = Class206();
    (((var197&127..Int16(-102)&127:(45|1)) as String) ?? (Option<String>.None ?? var212.var215))
}

public func func235(param236 : Range<UInt32>) : (Int64, String) { // block id: 237
    let var239 : (Int64, String) = (119, "Sl`%'o.#kI");
    var239
}

public func func218(param219 : Range<Int16>) : String { // block id: 220
    match (Option<Unit>.None) {
        case _ => 
            var115;
            if (false) { var229 } else { var229 } 
        
    };
    let var244 : (Range<UInt32>) -> (Int64, String) = func235;
    (try { // block id: 247
        var87;
        var87;
        (UInt32(98)&127..UInt32(237)&127:(-45)|1)
    } catch (_) { // block id: 251
        var var254 : Int8 = Int8(UInt8(10));
        var254 ^= var254;
        (var260&127..UInt32(105)&127:((-100)|1))
    }|>var244)[1]
}



public func func604(param605 : Range<Int32>) : Range<Int32> { // block id: 606
    var var612 : Class206 = Class206();
    let var641 : Float32 = Float32(Float32(95.0));
    var var651 : Range<Int16> = (Int16(95)&127..Int16(-4)&127:(Int64(Int16(44))|1));
    var var742 : Float32 = Float32(6.0);
    if (var612.var615) { // block id: 617
        var var627 : Int16 = Int16(UInt16(Int8(-70)));
        ((Int32(-45)&127..Int32(-127)&127:30|1), (Int16(76)&127..Int16(98)&127:(var143|1)), var115, [var627, Int16(-5), Int16(-116), Int16(-108), var627, Int16(105), var627, var627, Int16(-66), var627], var641)
    } else if ([true, true, false, true, false, true, true, false, true, false][6]) { // block id: 647
        (param605, var651, UInt16(53), [var660, var660, Int16(123), Int16(-95), var667, Int16(100), var667, var660, Int16(103), var667], var641)
    } else { // block id: 677
        var183 ||= var183;
        var var719 : Array<Int16> = Array<Int16>(10){ i => Int16(2) };
        if (var183) { ((var686&127..=var686&127:(40|1)), (Int16(-5)&127..Int16(-27)&127:77|1), UInt16(13), [var660, var667, var667, var667, Int16(-11), Int16(19), var660, var660, Int16(88), var667], Float32(-115.0)) } else { ((var686&127..=Int32(-52)&127:(81|1)), (Int16(41)&127..Int16(102)&127:(var143|1)), var115, var719, var742) } 
    }[0]
}

public func func574(param575 : UInt64) : Range<Int32> { // block id: 576
    Option<Unit>.None;
    var loopTimeVar598 : Range<UInt64> = (UInt64(179)&127..=UInt64(244)&127:(4|1));
    for (i in loopTimeVar598 where (var284[2] ?? [false, var183, var183, var183, true, var183, var183, var183, false, true][3])) {

    };
    let var829 : UInt8 = UInt8(46);
    if (((-79.0) >= 81.0)) { try { // block id: 857
        (Int32(124)&127..Int32(122)&127:71|1)
    } finally { // block id: 859
        [false, var183, false, false, var866, var183, false, var866, var183, var888];
        (Int32(23)&127..=Int32(-108)&127:14|1)
    } } else { var892 } |>{ lambdaParameter747 : Range<Int32> => var var807 : (UInt8, Float32, Range<Int32>, UInt16, Array<UInt16>, Int32, Range<UInt16>) = (UInt8(UInt8(251)), Float32(46.0), (Int32(113)&127..Int32(Int16(Int8(97)))&127:(92|1)), UInt16(109), [UInt16(160), UInt16(131), UInt16(131), UInt16(198), UInt16(35), UInt16(194), UInt16(93), UInt16(101), UInt16(30), UInt16(73)], Int32(-121), (UInt16(236)&127..=UInt16(UInt8(UInt8(30)))&127:((-71)|1))); match (var755[1][1]) {
        case caseVar794 : Float64 => 
            (Int32(3)&127..Int32(-104)&127:((-14)|1))
        
        case caseVar802 => 
            if (var183) { var807 } else { (var829, var832, (Int32(-126)&127..Int32(-50)&127:(-111)|1), var115, var840, Int32(-36), (UInt16(50)&127..UInt16(4)&127:74|1)) } ;
            var87;
            (Int32(32)&127..Int32(9)&127:(-5)|1)
        
        case _ => 
            (Int32(-113)&127..=var686&127:(39|1))
        
    } }
}

public func func534(param535 : UInt64) : Option<Unit> { // block id: 536
    var var559 : Unit = ();
    try { // block id: 538
        if (var183) { Option<Unit>.None } else { var48 } 
    } catch (_) { // block id: 543
        if (var183) { // block id: 546

        } else if (true) { // block id: 548
            var87;
            ()
        };
        try { // block id: 552
            if (false) { Option<Unit>.Some(()) } else { Option<Unit>.Some(var559) } 
        } catch (e: Exception) { // block id: 561
            if (false) { var565 } else { Option<Option<Unit>>.None } ;
            ();
            var48
        } finally { // block id: 570
            var48
        }
    } finally { // block id: 572
        var var898 : (UInt64) -> Range<Int32> = { lambdaParameter901 : UInt64 => (Int32(-88)&127..Int32(125)&127:(-72)|1) };
        UInt64(154)|>var898;
        let var910 : String = "W'}/d$\\&<|";
        var loopTimeVar912 : Range<UInt64> = (UInt64(67)&127..=UInt64(228)&127:(Int64(UInt8(38))|1));
        for (i in loopTimeVar912 where true) {
            var87;
            var910
        };
        (var920 as Unit)
    };
    var var953 : Int8 = Int8(Int8(-10));
    try (resource = Class206()) { // block id: 923
        var115 &= UInt16(154);
        var loopTimeVar938 : Range<UInt64> = (UInt64(129)&127..=UInt64(80)&127:(Int64(UInt16(8))|1));
        for (i in loopTimeVar938 where var888) {
            (var840, Option<String>.None, (UInt8(24)&127..=UInt8(124)&127:(110|1)));
            (-78.0)
        }
    } catch (_) { // block id: 944
        if (var183) { // block id: 947
            ();
            var87
        };
        (Int8(-82)&127..var953&127:(var143|1));
        var87
    } finally { // block id: 958

    };
    var var967 : (Range<Int32>, Range<Int16>, UInt16, Array<Int16>, Float32) = ((Int32(-11)&127..Int32(-17)&127:119|1), (Int16(-29)&127..Int16(Int8(-109))&127:(Int64(Int32(Int16(-50)))|1)), UInt16(UInt16(UInt16(58))), [Int16(-126), Int16(17), Int16(53), Int16(71), Int16(-69), Int16(67), Int16(82), Int16(-5), Int16(-125), Int16(23)], Float32(-45.0));
    try { // block id: 961
        var var963 : UInt8 = UInt8(Int8(72));
        var963;
        var967;
        var55
    } catch (_) { // block id: 983
        var920;
        var115 /= ((UInt16(126)) | 1);
        [Option<Unit>.Some(()), Option<Unit>.Some(()), var48, var48, Option<Unit>.Some(()), Option<Unit>.Some(var559), Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, var48]
    }[4]
}




public func func1167(param1168 : Float64) : Array<Option<Unit>> { // block id: 1169
    if (var866) { match {
        case var888 => 
        ();
        var1179
        case _ => 
        var866 ||= var183;
        if (false) { var1179 } else { var1179 } 
    } } else { (var1242 ?? var1179) } [0]
}



public struct Aggregate1465 {
    public init() { // block id: 1467

    }
;
    private let var1483 : Array<UInt32> = [UInt32(233), UInt32(99), UInt32(185), UInt32(56), UInt32(247), UInt32(45), UInt32(139), UInt32(224), UInt32(29), UInt32(112)];
    public func func1472(param1473 : Array<Array<Int16>>, namedParam1474 ! : (Array<Option<Unit>>, (Int64, String))) : Bool { // block id: 1475
        if ((Int32(-36) >= var686)) { var1483 } else { try { // block id: 1486
            var87;
            if (false) { var1483 } else { var1483 } 
        } catch (e: Exception) { // block id: 1492
            [UInt32(114), UInt32(65), UInt32(200), UInt32(227), UInt32(13), UInt32(187), UInt32(141), UInt32(183), UInt32(14), UInt32(230)]
        } finally { // block id: 1494
            var48;
            ();
            if (var183) { var1483 } else { var1483 } 
        } } [5];
        match (if (match {
                case false => 
                var var1509 : UInt16 = UInt16(140);
                var1509--;
                var866
                case _ => 
                (var115, var840, var183, var1518);
                ();
                UInt64(142) <= UInt64(81)
            }) { var565 } else { Option<Option<Unit>>.None } ) {
            case caseVar1528 => 
                var var1635 : Int64 = 121;
                let var1643 : Array<Int16> = [Int16(58), Int16(38), Int16(-58), Int16(UInt8(UInt8(8))), Int16(59), Int16(Int8(83)), Int16(-87), Int16(100), Int16(UInt8(Int8(Int8(92)))), Int16(72)];
                if (var866) { var1533 } else { ((UInt8(238), var832, (Int32(-100)&127..=Int32(28)&127:(-46)|1), var115, var840, Int32(-90), (UInt16(199)&127..UInt16(101)&127:33|1)), ((Int32(94)&127..=Int32(-40)&127:(var1635|1)), (Int16(-27)&127..Int16(89)&127:(53|1)), UInt16(227), var1643, var832), var1663) } ;
                var115 ^= var115;
                var183 && true
            
            case caseVar1686 => 
                var866
            
            case _ => 
                var87;
                var888
            
        }
    }

}


public func func1396(param1397 : Array<Option<Unit>>) : UInt16 { // block id: 1398
    ();
    if (false) { // block id: 1402
        let var1406 : (Unit, UInt32, Float64) = ((), UInt32(Int16(44)), Float64(Float32(83.0)));
        var1406[0];
        let var1418 : (UInt8, Float32, Range<Int32>, UInt16, Array<UInt16>, Int32, Range<UInt16>) = (UInt8(146), Float32(Float32(Float32(Float32(113.0)))), (Int32(UInt16(67))&127..Int32(-91)&127:(Int64(Int16(Int8(20)))|1)), UInt16(65), [UInt16(0), UInt16(195), UInt16(65), UInt16(81), UInt16(247), UInt16(127), UInt16(53), UInt16(169), UInt16(250), UInt16(32)], Int32(Int32(-46)), (UInt16(61)&127..UInt16(187)&127:(-83)|1));
        var var1444 : UInt16 = UInt16(UInt8(3));
        (var1418, ((var686&127..var686&127:(97|1)), (Int16(-35)&127..=Int16(91)&127:(-45)|1), var1444, [var667, Int16(-44), var1353, Int16(79), var1353, var1353, var660, var667, var660, var1353], Float32(-21.0)), var1418)[1];
        var1462
    } else if (var1469.func1472([[Int16(65), Int16(86), Int16(-95), Int16(-29), Int16(64), Int16(-60), Int16(-106), Int16(-116), Int16(110), Int16(-14)], [Int16(-75), Int16(66), Int16(-32), Int16(67), Int16(-43), Int16(-21), Int16(33), Int16(-52), Int16(-84), Int16(38)], [Int16(35), Int16(119), Int16(117), Int16(100), Int16(-31), Int16(-17), Int16(-23), Int16(-41), Int16(-52), Int16(-96)], [Int16(38), Int16(66), Int16(55), Int16(-102), Int16(-79), Int16(84), Int16(56), Int16(113), Int16(50), Int16(-67)], [Int16(-125), Int16(-33), Int16(121), Int16(-108), Int16(-10), Int16(19), Int16(-82), Int16(9), Int16(-81), Int16(-21)], [Int16(-126), Int16(45), Int16(79), Int16(-28), Int16(-121), Int16(15), Int16(45), Int16(-66), Int16(120), Int16(79)], [Int16(-127), Int16(86), Int16(85), Int16(-16), Int16(122), Int16(49), Int16(55), Int16(-27), Int16(54), Int16(-110)], [Int16(-76), Int16(-123), Int16(31), Int16(74), Int16(-55), Int16(79), Int16(-63), Int16(-44), Int16(38), Int16(-124)], [Int16(-67), Int16(62), Int16(19), Int16(-108), Int16(-109), Int16(41), Int16(-88), Int16(-123), Int16(73), Int16(75)], [Int16(-59), Int16(18), Int16(-27), Int16(-93), Int16(-12), Int16(9), Int16(-97), Int16(-117), Int16(-12), Int16(24)]], namedParam1474 : var1179)) { // block id: 1695
        try (resource = Class206()) { // block id: 1697
            var87;
            var667 = Int16(-63)
        } finally { // block id: 1702

        };
        var1462
    } else { // block id: 1704
        (116&127..38&127:(-90)|1);
        (var1663, (Int8(-106)&127..Int8(80)&127:77|1), (var1097, var832, (Int32(9)&127..=Int32(27)&127:((-69)|1)), var115, [UInt16(126), UInt16(219), UInt16(66), UInt16(125), UInt16(138), UInt16(81), UInt16(160), UInt16(140), UInt16(50), UInt16(203)], Int32(-40), var229), var87, var1663)[3];
        func218(var1087)
    };
    match (((Option<Option<String>>.None ?? var1059) as Option<Unit>)) {
        case _ => 
            var115 ** (var115 & 3)
        
    }
}


public func func2007(param2008 : Range<UInt64>) : Unit { // block id: 2009
    var loopTimeVar2045 : Range<UInt64> = (UInt64(Int16(117))&127..=UInt64(UInt64(UInt64(UInt64(76))))&127:(115|1));
    for (i in loopTimeVar2045 where try { // block id: 2012
        var2015 || false
    } catch (_) { // block id: 2024
        var87;
        var183
    } finally { // block id: 2027
        let var2029 : Bool = (((Int32(UInt8(151))&127..=Int32(UInt32(37))&127:(Int64(UInt16(84))|1)), (Int16(-79)&127..=Int16(-95)&127:122|1), UInt16(81), [Int16(-49), Int16(-57), Int16(-110), Int16(-93), Int16(84), Int16(75), Int16(-9), Int16(57), Int16(-27), Int16(-71)], Float32(Float32(125.0))) is (UInt64) -> Range<Int32>);
        var2029
    }) {

    }
}

public func func2221(param1747 : Array<Option<Bool>>) : Unit { // block id: 1748
    var260 &= var260;
    let var1754 : Bool = true;
    var loopTimeVar1758 : Int64 = 0;
    do {
        loopTimeVar1758++;

    } while ((var1754) && loopTimeVar1758 < 100 ) ;
    let var1943 : Interface209 = Class206();
    var var2063 : Bool = true;
    var loopTimeVar2091 : Range<UInt64> = (UInt64(74)&127..UInt64(235)&127:(Int64(UInt16(167))|1));
    for (i in loopTimeVar2091 where (match (var1533) {
        case _ => 
            [Option<Bool>.Some(var888), var920, Option<Bool>.None, var920, var920, Option<Bool>.Some(false), Option<Bool>.Some(var1754), Option<Bool>.Some(false), Option<Bool>.Some(var1781), Option<Bool>.Some(var866)]
        
        case ((_ : Range<Int64>,_,caseVar1787,caseVar1788,_ : (Array<UInt16>, Option<String>, Range<UInt8>),caseVar1789,_),caseVar1790,(caseVar1791,_,caseVar1792,caseVar1793 : Range<UInt16>,_,_,caseVar1794 : Option<Array<Int16>>)) => 
            if (var888) { [Option<Bool>.None, var920, var920, Option<Bool>.Some(true), var920, var920, var920, var920, var920, var920] } else { param1747 } 
        
        case (_,_ : Array<Bool>,(caseVar1813 : (Array<UInt16>, Option<String>, Range<UInt8>),caseVar1814 : Array<Option<Unit>>,_,_,_ : (Range<Int32>, Range<Int16>, UInt16, Array<Int16>, Float32),_,_ : Interface210)) => 
            var284
        
        case ((caseVar1819,_,caseVar1820 : Option<Option<String>>,caseVar1821,caseVar1822 : Interface209,caseVar1823 : Rune,caseVar1824),(caseVar1825 : UInt16,caseVar1826 : Float32,caseVar1827 : Option<Option<String>>,_,caseVar1828 : Array<Array<Int16>>),(_ : (UInt8, Float32, Range<Int32>, UInt16, Array<UInt16>, Int32, Range<UInt16>),_,_ : Range<UInt8>,caseVar1829 : Bool,caseVar1830 : (Range<Int32>, Range<Int16>, UInt16, Array<Int16>, Float32),_,caseVar1831 : UInt8)) => 
            """
Q[5m=
B>IrH
""";
            param1747
        
        case _ => 
            let var1838 : Array<Option<Bool>> = [Option<Bool>.Some(true), ((UInt64(49)&127..=UInt64(119)&127:(-30)|1) as Bool), (Int16(Int16(UInt16(83))) as Bool), (Aggregate1465() as Bool), Option<Bool>.Some(true), (Class206() as Bool), Option<Bool>.None, Option<Bool>.None, Option<Bool>.Some(((Class206() as Option<String>) is Array<Option<Bool>>)), Option<Bool>.Some(([UInt32(248), UInt32(203), UInt32(135), UInt32(20), UInt32(187), UInt32(50), UInt32(15), UInt32(217), UInt32(92), UInt32(79)] is (Range<UInt32>) -> (Int64, String)))];
            var1838
        
    } is UInt32)) {
        let var1936 : Range<UInt32> = (UInt32(106)&127..=UInt32(145)&127:106|1);
        let var1949 : Range<UInt64> = (UInt64(75)&127..UInt64(143)&127:(-22)|1);
        let var1964 : Int64 = 95;
        func func1875(param1876 : Unit, namedParam1877 ! : Array<Bool>) : Unit { // block id: 1878
            var var1881 : (UInt16, Array<UInt16>, Bool, Int8) = (UInt16(UInt8(UInt8(Int8(-101)))), [UInt16(226), UInt16(27), UInt16(UInt16(5)), UInt16(Int16(34)), UInt16(200), UInt16(UInt16(UInt8(85))), UInt16(Int8(UInt8(64))), UInt16(UInt16(UInt8(135))), UInt16(159), UInt16(UInt16(165))], ((Int32(-13)&127..=Int32(57)&127:(68|1)) is UInt8), Int8(52));
            var var1926 : Unit = ();
            match (var1881) {
                case caseVar1915 : Array<Option<Unit>> => 
                    var1518 -= Int8(22)
                
                case _ => 
                    var1097 /= ((var1097) | 1);
                    var1926
                
            };
            var var1973 : ?Unit = Option<Unit>.None;
            (match (match (var1936) {
                    case caseVar1940 => 
                        var1943;
                        if (false) { (UInt64(244)&127..UInt64(26)&127:(-80)|1) } else { var1949 } 
                    
                    case caseVar1953 => 
                        var1949
                    
                    case _ => 
                        ();
                        (UInt64(224)&127..UInt64(40)&127:(var1964|1))
                    
                    case _ => 
                        (UInt64(115)&127..UInt64(95)&127:(-24)|1)
                    
                }) {
                case _ : Range<Int8> => 
                    var1973
                
                case caseVar1977 : Int64 => 
                    var1973
                
                case _ => 
                    var1097--;
                    (var1097, var832, (Int32(-97)&127..=Int32(-61)&127:5|1), UInt16(97), [var115, var115, var115, var115, var115, UInt16(108), UInt16(103), var115, var115, UInt16(169)], Int32(-110), (UInt16(137)&127..UInt16(150)&127:(var1964|1)));
                    var1973
                
            } ?? ((UInt64(222)&127..=UInt64(14)&127:3|1)|>func2007))
        }
;
        var var2068 : Bool = ([UInt32(167), UInt32(Int16(UInt8(35))), UInt32(Int16(-67)), UInt32(160), UInt32(191), UInt32(Int16(104)), UInt32(UInt16(Int8(58))), UInt32(Int8(60)), UInt32(UInt32(103)), UInt32(221)] is Int64);
        func1875((), namedParam1877 : [true, true, true, var183, var2063, var866, false, var2068, true, var2068])
    }
}

public func func1742(param1743 : Array<Option<Unit>>) : UInt16 { // block id: 1744
    func2221(var284);
    var832;
    func1167(try { // block id: 2103
        var87;
        ();
        57.0
    } finally { // block id: 2107
        var2110 %= ((UInt32(115)) | 1);
        (-23.0)
    })|>func1396
}

public func func2119(param2120 : Array<Option<Unit>>) : Array<Option<Unit>> { // block id: 2121
    try { // block id: 2123
        [var48, Option<Unit>.Some(var87), Option<Unit>.Some(var87), var48, var48, var48, Option<Unit>.None, Option<Unit>.None, var48, var2137]
    } catch (_) { // block id: 2139
        param2120
    } finally { // block id: 2141
        var87;
        91.0|>func1167
    }
}


func func2485(optionalParam2486 ! : String = "qPVkz8ayC5", optionalParam2488 ! : Float32 = Float32(-99.0), namedParam2490 ! : (UInt64) -> Range<Int32>, optionalParam2493 ! : (Int64, String) = (Int64(UInt8(Int8(UInt8(100)))), "Vo[q5.2`'a")) : Array<Int16> { // block id: 2500
    (Int8(-71)&127..Int8(21)&127:123|1);
    if ((match (var2506) {
        case caseVar2519 => 
            var87;
            Int16(1)
        
        case _ => 
            [Int16(-97), Int16(93), Int16(47), Int16(-29), Int16(-103), Int16(23), Int16(-71), Int16(-40), Int16(36), Int16(115)];
            var660
        
        case _ => 
            Int16(-82)
        
    } > try { // block id: 2532
        var315;
        (Int32(76)&127..=Int32(-73)&127:(-19)|1);
        Int16(-87)
    } catch (e: Exception) { // block id: 2536
        var2304;
        var87;
        Int16(-109)
    } finally { // block id: 2540
        var var2548 : Range<Int64> = (3&127..120&127:(Int64(Int8(UInt8(234)))|1));
        if (var888) { (var143&127..81&127:((-65)|1)) } else { var2548 } ;
        var686 += var686;
        Int16(-107)
    })) { (if (false) { try { // block id: 2562
        ();
        Option<Option<Unit>>.Some(Option<Unit>.None);
        var1469
    } finally { // block id: 2567
        var1469
    } } else { try { // block id: 2570
        var1469
    } catch (_) { // block id: 2572
        var1353 /= ((Int16(38)) | 1);
        var1469
    } finally { // block id: 2577
        if (false) { var1469 } else { var1469 } 
    } } ) } else { Aggregate1465() } ;
    if (true) { [Int16(-44), Int16(-92), Int16(-61), Int16(-114), Int16(-108), Int16(-83), Int16(-23), Int16(97), Int16(98), Int16(105)] } else { var2239 } 
}

func func2375(param2376 : (Int64, String), optionalParam2377 ! : (Range<Int16>) -> String = func218, namedParam2381 ! : (Unit, UInt32, Float64), namedParam2382 ! : (Int64, String)) : Array<UInt16> { // block id: 2383
    var loopTimeVar2479 : Int64 = 0;
    while ((func17(var315 * (-9.0))) && loopTimeVar2479 < 100 ) {
        loopTimeVar2479++;
        match (var2392) {
            case caseVar2396 : Option<(Array<Option<Unit>>, (Int64, String))> => 
                ();
                (UInt8(3)&127..UInt8(64)&127:(-70)|1);
                var2137
            
            case caseVar2403 : Array<UInt32> => 
                var87;
                (Int32(-118)&127..=Int32(77)&127:115|1);
                Option<Unit>.None
            
            case caseVar2410 => 
                if (false) { Option<Unit>.None } else { Option<Unit>.Some(()) } 
            
            case _ => 
                if (true) { var48 } else { var2137 } 
            
        };
        let var2441 : Int16 = Int16(Int8(-80));
        match (Option<Float64>.Some(var315)) {
            case caseVar2428 : Option<Array<Int16>> => 
                Option<Array<Int16>>.Some([Int16(103), var1353, var1353, Int16(-17), var660, Int16(-75), Int16(-124), Int16(-76), var2441, var1353]);
                UInt64(1) | var1013
            
            case caseVar2450 : ((UInt8, Float32, Range<Int32>, UInt16, Array<UInt16>, Int32, Range<UInt16>), (Range<Int32>, Range<Int16>, UInt16, Array<Int16>, Float32), (UInt8, Float32, Range<Int32>, UInt16, Array<UInt16>, Int32, Range<UInt16>)) => 
                ();
                var1097 &= var1097;
                UInt64(65)
            
            case caseVar2459 : Range<Int64> => 
                ();
                UInt64(194)
            
            case _ => 
                var1077;
                UInt64(186) * UInt64(65)
            
            case _ => 
                ();
                if (var866) { var1120 } else { var1120 } ;
                var1013
            
        }
    };
    var1353 = var667;
    match (func2485(namedParam2490 : func574, optionalParam2493 : if (true) { (75, "W;@rRK8D%6") } else { namedParam2382 } )) {
        case caseVar2596 : (UInt16, Array<UInt16>, Bool, Int8) => 
            Option<UInt16>.None;
            [UInt16(121), UInt16(197), UInt16(131), UInt16(253), UInt16(4), var115, var115, var115, var115, var115]
        
        case _ : (Int64, String) => 
            var840
        
        case caseVar2616 => 
            var2304;
            var87;
            [var115, UInt16(111), var115, var2625, var2625, UInt16(33), var115, UInt16(68), UInt16(29), UInt16(179)]
        
        case caseVar2637 : Array<Option<Bool>> => 
            ();
            [var183, true, var2015, true, true, var866, var888, var888, var1781, true];
            [UInt16(89), UInt16(44), var2625, UInt16(215), UInt16(161), var115, var2659, var115, var2625, var2659]
        
        case _ => 
            var840
        
    }
}

public func func2365(param2366 : Int64) : Int64 { // block id: 2367
    var var2677 : (Unit, UInt32, Float64) = ((), UInt32(Int32(UInt32(Int16(-60)))), (-23.0));
    var loopTimeVar2689 : Int64 = 0;
    while (((Float64(var832)|>func17)) && loopTimeVar2689 < 100 ) {
        loopTimeVar2689++;
        let var2669 : (Int64, String) = (Int64(Int16(UInt8(66))), "=I]b*bcf/Y");
        func2375(var2669, optionalParam2377 : func218, namedParam2381 : var2677, namedParam2382 : (115, var1462))
    };
    74
}

public func func2221(namedParam2222 ! : Option<(Array<Option<Unit>>, (Int64, String))>) : Option<Float64> { // block id: 2223
    var var2225 : Interface210 = Class206();
    var2225;
    var87;
    var var2266 : Int16 = Int16(Int16(UInt8(188)));
    let var2326 : ??Float64 = (([((-30.0) as Unit), ((-43) as Unit), (Option<Array<Int16>>.None as Unit), Option<Unit>.None, Option<Unit>.Some(()), ((UInt16(124)&127..UInt16(102)&127:((-20)|1)) as Unit), Option<Unit>.None, (Option<Option<Float64>>.Some(Option<Float64>.Some((-104.0))) as Unit), Option<Unit>.Some(()), Option<Unit>.None], ((-77), ###"wKqW*J_OlQ"###)) as Option<Float64>);
    let var2692 : (Int64) -> Int64 = func2365;
    func func2357(param2358 : (Array<Option<Unit>>) -> UInt16) : Option<Float64> { // block id: 2361
        var var2723 : Interface209 = Class206(Option<Option<Float64>>.None);
        match (((var143|>var2692)&127..if (false) { // block id: 2697
                if (false) { var123 } else { [[Int16(101), Int16(-127), Int16(-26), Int16(40), Int16(115), Int16(23), Int16(87), Int16(-98), Int16(-15), Int16(-46)], [Int16(22), Int16(29), Int16(-27), Int16(-60), Int16(102), Int16(-45), Int16(23), Int16(119), Int16(-84), Int16(114)], [Int16(-44), Int16(83), Int16(-110), Int16(4), Int16(55), Int16(68), Int16(24), Int16(104), Int16(104), Int16(16)], [Int16(5), Int16(54), Int16(-37), Int16(72), Int16(76), Int16(117), Int16(104), Int16(-48), Int16(107), Int16(121)], [Int16(49), Int16(110), Int16(-105), Int16(-116), Int16(125), Int16(112), Int16(-68), Int16(-73), Int16(-92), Int16(45)], [Int16(61), Int16(-107), Int16(111), Int16(86), Int16(29), Int16(123), Int16(30), Int16(-5), Int16(-77), Int16(122)], [Int16(-31), Int16(42), Int16(-60), Int16(-93), Int16(100), Int16(-24), Int16(1), Int16(28), Int16(-89), Int16(33)], [Int16(98), Int16(-41), Int16(57), Int16(-60), Int16(-96), Int16(38), Int16(-96), Int16(62), Int16(-77), Int16(-1)], [Int16(93), Int16(-106), Int16(85), Int16(-18), Int16(-53), Int16(94), Int16(68), Int16(104), Int16(-97), Int16(15)], [Int16(-115), Int16(118), Int16(-98), Int16(-75), Int16(-117), Int16(-85), Int16(-9), Int16(77), Int16(105), Int16(-13)]] } ;
                19
            } else if (true) { // block id: 2704
                var143 - var143
            } else { // block id: 2708
                var1179;
                var2711
            }&127:(match (Option<UInt16>.None) {
                case _ : Array<UInt32> => 
                    ();
                    var2723;
                    (-9)
                
                case _ : Option<Int32> => 
                    var87;
                    var183 ||= var888;
                    59
                
                case _ => 
                    UInt16(162);
                    var143 + (-74)
                
            }|1))) {
            case _ => 
                Option<Float64>.None
            
        }
    }
;
    var var2781 : (Array<Option<Unit>>) -> UInt16 = func1742;
    let var2792 : ?Unit = Option<Unit>.None;
    var var2867 : ?Bool = Option<Bool>.Some((([Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.Some(()), Option<Unit>.Some(()), Option<Unit>.None, Option<Unit>.Some(())], ((-39), ###"40'c_w7rsG"###)) is Unit));
    let var2934 : ?Float64 = Option<Float64>.None;
    if ((try { // block id: 2232
        let var2245 : Int16 = Int16(UInt8(UInt8(Int8(46))));
        if (var888) { var123 } else { [[Int16(-95), Int16(21), Int16(101), Int16(14), Int16(-90), Int16(99), Int16(-34), Int16(-60), Int16(109), Int16(-90)], var2239, [var660, var667, var2245, Int16(-78), Int16(62), var2245, Int16(75), Int16(29), Int16(26), Int16(-7)], var2239, [Int16(-62), Int16(-73), Int16(-27), Int16(-32), Int16(59), Int16(9), Int16(55), Int16(-127), Int16(-84), Int16(-59)], var2239, [Int16(10), var1353, Int16(36), Int16(117), var2266, Int16(24), Int16(-14), Int16(-11), var660, Int16(125)], var2239, [Int16(24), Int16(-127), Int16(-90), Int16(85), Int16(-75), Int16(-34), Int16(-41), Int16(4), Int16(53), Int16(-5)], [Int16(112), Int16(39), Int16(14), Int16(-44), Int16(62), Int16(-79), Int16(104), Int16(-14), Int16(-96), Int16(109)]] } ;
        ();
        var315 + var315
    } catch (_) { // block id: 2282
        87.0
    } finally { // block id: 2284
        ();
        (var2110&127..=var260&127:((-112)|1));
        12.0 * (-73.0)
    }|>func17)) { (match (var55) {
        case _ => 
            var2304;
            Option<Option<Float64>>.Some(Option<Float64>.None)
        
        case caseVar2310 : Option<(Array<Option<Unit>>, (Int64, String))> => 
            ();
            if (var888) { Option<Option<Float64>>.Some(var2186) } else { Option<Option<Float64>>.Some(Option<Float64>.Some((-108.0))) } 
        
        case _ => 
            var87;
            if (var183) { var2326 } else { var2326 } 
        
    } ?? func2357(var2781)) } else { match (match (var2786) {
            case _ => 
                var2792;
                let var2799 : ?UInt16 = Option<UInt16>.Some(UInt16(97));
                if (false) { Option<UInt16>.Some(var2659) } else { var2799 } ;
                var var2805 : (Int64, Float64, Int8, Range<Int16>, Int16, Range<Int64>, UInt8, Int32) = (36, Float64(Float64(Float32(81.0))), Int8(UInt8(74)), (Int16(-96)&127..=Int16(-103)&127:(Int64(Int64(UInt8(218)))|1)), Int16(-98), (Int64(UInt8(168))&127..40&127:((-15)|1)), UInt8(UInt8(Int8(Int8(47)))), Int32(97));
                if (var888) { var2805 } else { var2805 } 
            
            case _ => 
                Option<Int32>.None;
                (68, var315, Int8(56), (var2266&127..=var660&127:(var143|1)), var667, (var143&127..(-40)&127:(62|1)), UInt8(143), Int32(65))
            
        }) {
        case (_,_ : UInt64,_,_ : Range<Int32>,caseVar2851 : Option<Float64>,caseVar2852,_ : (Range<UInt32>, (Array<UInt16>, Option<String>, Range<UInt8>)),_ : Array<Array<Int16>>) => 
            (Int32(104)&127..=var686&127:(var2711|1));
            [Option<Bool>.None, var2861, var2864, var2867, Option<Bool>.Some(var1781), var2861, var2864, var2861, Option<Bool>.Some(var183), Option<Bool>.None];
            caseVar2851
        
        case caseVar2899 : UInt16 => 
            let var2904 : ?Float64 = ("1b%zPQ~KfF" as Float64);
            if (var888) { var2904 } else { Option<Float64>.None } 
        
        case (_,_,caseVar2910,caseVar2911,_ : Rune,_ : Option<Float64>,caseVar2912,caseVar2913 : Bool) => 
            Option<Float64>.None
        
        case (_,_,_ : Option<Bool>,_,_,caseVar2918,caseVar2919 : Int16,_) => 
            var1087;
            if (var866) { var2186 } else { Option<Float64>.None } 
        
        case _ => 
            var686++;
            if (var183) { var2186 } else { var2934 } 
        
    } } 
}

func func1317(optionalParam1318 ! : Option<String> = Option<String>.None, optionalParam1320 ! : (Array<UInt16>, Option<String>, Range<UInt8>) = ([UInt16(205), UInt16(20), UInt16(100), UInt16(9), UInt16(0), UInt16(58), UInt16(29), UInt16(235), UInt16(140), UInt16(100)], (UInt32(Int16(4)) as String), (UInt8(UInt8(181))&127..UInt8(Int8(-71))&127:(Int64(UInt8(UInt8(168)))|1))), optionalParam1334 ! : Option<Option<Unit>> = Option<Option<Unit>>.None) : Option<Float64> { // block id: 1336
    (match (match (((Int32(-50)&127..Int32(-72)&127:26|1), (Int16(-37)&127..=Int16(-15)&127:(-78)|1), UInt16(114), [Int16(92), var660, Int16(-37), var1353, Int16(-120), var660, var660, var660, Int16(-112), Int16(11)], var832)) {
            case _ => 
                var87;
                if (var866) { (UInt32(163)&127..UInt32(111)&127:111|1) } else { (UInt32(104)&127..=var260&127:((-72)|1)) } 
            
        }) {
        case caseVar1374 => 
            var115 *= UInt16(108);
            ();
            Option<UInt16>.Some(var115)
        
        case _ : String => 
            let var1390 : ?UInt16 = Option<UInt16>.None;
            if (var183) { Option<UInt16>.Some(var115) } else { var1390 } 
        
        case _ => 
            Option<UInt16>.None
        
    } ?? ([Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, var2137, Option<Unit>.None, var48, var48, var48, var2137, var48]|>(func2119~>func1742)));
    if (match {
        case UInt32(242) == UInt32(233) => 
        ();
        UInt8(189) == var1097
        case func17((-108.0)) => 
        var183
        case _ => 
        Class206();
        !false
    }) { try { // block id: 2177
        var1518++;
        var48;
        if (false) { Option<Float64>.Some(123.0) } else { var2186 } 
    } catch (e: Exception) { // block id: 2215
        var866 ||= var2015;
        var2186
    } } else { func2221(namedParam2222 : match ((var892, var1087, UInt16(69), [Int16(33), Int16(-117), Int16(-87), Int16(-103), Int16(-33), Int16(-124), Int16(109), Int16(80), Int16(35), Int16(-83)], var2943)) {
        case (caseVar2947,_,_ : Range<UInt64>,_,caseVar2948) => 
            ();
            Option<(Array<Option<Unit>>, (Int64, String))>.None
        
        case _ : Int16 => 
            Option<(Array<Option<Unit>>, (Int64, String))>.Some(var1179)
        
        case caseVar2959 => 
            let var2962 : ?(Array<Option<Unit>>, (Int64, String)) = Option<(Array<Option<Unit>>, (Int64, String))>.None;
            var2962
        
        case _ => 
            [false, false, false, true, true, true, true, true, false, true];
            Option<(Array<Option<Unit>>, (Int64, String))>.None
        
    }) } 
}


public func func1251(param1252 : (UInt64) -> Range<Int32>, param1255 : Option<Option<Unit>>, param1256 : Interface209, optionalParam1257 ! : Option<Array<Int16>> = (Class206() as Array<Int16>)) : Class206 { // block id: 1260
    let var3234 : ??Float64 = ((Int32(-116)&127..Int32(-17)&127:111|1) as Option<Float64>);
    match (match (true) {
            case _ : Array<UInt16> => 
                ();
                var1097;
                var920
            
            case true | true => 
                ([UInt16(111), UInt16(182), UInt16(9), UInt16(193), UInt16(167), UInt16(14), UInt16(133), UInt16(247), UInt16(128), UInt16(188)], var1059, (UInt8(189)&127..UInt8(229)&127:(50|1)));
                var var1283 : Range<Int64> = (Int64(UInt32(15))&127..=Int64(UInt8(Int8(Int8(-41))))&127:(55|1));
                var1283;
                var920
            
            case _ => 
                var var1297 : Array<Class206> = Array<Class206>(10){ i => Class206() };
                var1297;
                if (false) { var920 } else { Option<Bool>.None } 
            
            case _ => 
                if (var888) { var2864 } else { Option<Bool>.None } 
            
        }) {
        case _ : Array<UInt32> => 
            if (var2015) { var123 } else { [[Int16(8), Int16(67), Int16(-46), Int16(-86), Int16(-47), Int16(112), Int16(37), Int16(0), Int16(12), Int16(80)], [Int16(104), Int16(-5), Int16(43), var660, var1353, Int16(45), Int16(83), var1353, Int16(-127), var1353], var2239, [var660, var660, Int16(-6), Int16(98), var660, Int16(66), var667, Int16(114), var660, Int16(-117)], var2239, [var667, Int16(79), Int16(71), Int16(42), var667, var1353, Int16(25), Int16(-55), Int16(47), var660], var3171, [Int16(-43), Int16(38), Int16(-12), Int16(100), Int16(-49), Int16(66), Int16(-18), Int16(42), Int16(77), Int16(-100)], [Int16(24), Int16(23), Int16(9), Int16(-1), Int16(72), Int16(-35), Int16(90), Int16(88), Int16(61), Int16(27)], [Int16(-63), Int16(-12), Int16(1), Int16(-111), Int16(-5), var1353, Int16(-35), var660, var1353, var667]] } ;
            var866 ||= true;
            var3209
        
        case caseVar3223 : Class206 => 
            if (false) { Option<Unit>.None } else { var3229 } ;
            Class206(var3234);
            if (true) { var3209 } else { var3209 } 
        
        case _ => 
            var2304;
            var2304;
            let var3251 : Class206 = Class206(namedParam3254 : Option<Int32>.Some(Int32(-19)));
            [Class206(), Class206(), Class206(), var3251, var3251, Class206(namedParam3254 : Option<Int32>.Some(Int32(118))), var3251, var3251, Class206(), Class206(func1167)]
        
        case _ => 
            if (var866) { var1533 } else { var1533 } ;
            let var3464 : ?Float64 = (Int32(Int8(Int8(21))) as Float64);
            if (false) { Option<Option<Float64>>.Some(var3464) } else { Option<Option<Float64>>.None } ;
            if (true) { var3209 } else { var3209 } 
        
    }[4]
}


public func func1114(param1115 : (UInt64) -> Range<Int32>) : Array<Option<Unit>> { // block id: 1118
    var1120;
    var var1140 : Int8 = Int8(UInt8(UInt8(20)));
    let var1154 : UInt16 = UInt16(Int16(UInt16(97)));
    var1140 -= (UInt16(41), [var115, var115, var115, var115, var1154, UInt16(91), var115, UInt16(136), var115, UInt16(115)], false, Int8(89))[3];
    var var1247 : (Float64) -> Array<Option<Unit>> = func1167;
    var var3478 : Interface209 = Class206();
    let var3527 : ?String = (((UInt8(Int8(-63)), Float32(Float32(125.0)), (Int32(-54)&127..=Int32(21)&127:((-45)|1)), UInt16(Int16(83)), [UInt16(52), UInt16(170), UInt16(53), UInt16(225), UInt16(143), UInt16(162), UInt16(253), UInt16(191), UInt16(39), UInt16(27)], Int32(120), (UInt16(72)&127..UInt16(196)&127:(-104)|1)), (Int8(UInt8(85))&127..=Int8(55)&127:(Int64(UInt16(85))|1)), (UInt8(UInt8(117)), Float32(73.0), (Int32(80)&127..=Int32(-34)&127:(65|1)), UInt16(216), [UInt16(123), UInt16(34), UInt16(180), UInt16(44), UInt16(4), UInt16(201), UInt16(99), UInt16(123), UInt16(26), UInt16(124)], Int32(-15), (UInt16(19)&127..=UInt16(219)&127:(27|1))), (), (UInt8(201), Float32(Float32(81.0)), (Int32(1)&127..=Int32(-52)&127:104|1), UInt16(136), [UInt16(46), UInt16(23), UInt16(131), UInt16(170), UInt16(141), UInt16(203), UInt16(139), UInt16(175), UInt16(122), UInt16(128)], Int32(Int32(-69)), (UInt16(95)&127..UInt16(217)&127:((-4)|1)))) as String);
    func1251(param1115, var565, var3478).func3481(var1087, var3527)|>var1247
}

public func func3590(param575 : UInt64) : Range<Int32> { // block id: 576
    Option<Unit>.None;
    var loopTimeVar598 : Range<UInt64> = (UInt64(179)&127..=UInt64(244)&127:(4|1));
    for (i in loopTimeVar598 where (var284[2] ?? [false, var183, var183, var183, true, var183, var183, var183, false, true][3])) {

    };
    let var829 : UInt8 = UInt8(46);
    if (((-79.0) >= 81.0)) { try { // block id: 857
        (Int32(124)&127..Int32(122)&127:71|1)
    } finally { // block id: 859
        [false, var183, false, false, var866, var183, false, var866, var183, var888];
        (Int32(23)&127..=Int32(-108)&127:14|1)
    } } else { var892 } |>{ lambdaParameter747 : Range<Int32> => var var807 : (UInt8, Float32, Range<Int32>, UInt16, Array<UInt16>, Int32, Range<UInt16>) = (UInt8(UInt8(251)), Float32(46.0), (Int32(113)&127..Int32(Int16(Int8(97)))&127:(92|1)), UInt16(109), [UInt16(160), UInt16(131), UInt16(131), UInt16(198), UInt16(35), UInt16(194), UInt16(93), UInt16(101), UInt16(30), UInt16(73)], Int32(-121), (UInt16(236)&127..=UInt16(UInt8(UInt8(30)))&127:((-71)|1))); match (var755[1][1]) {
        case caseVar794 : Float64 => 
            (Int32(3)&127..Int32(-104)&127:((-14)|1))
        
        case caseVar802 => 
            if (var183) { var807 } else { (var829, var832, (Int32(-126)&127..Int32(-50)&127:(-111)|1), var115, var840, Int32(-36), (UInt16(50)&127..UInt16(4)&127:74|1)) } ;
            var87;
            (Int32(32)&127..Int32(9)&127:(-5)|1)
        
        case _ => 
            (Int32(-113)&127..=var686&127:(39|1))
        
    } }
}





public func func272(param273 : Unit) : Range<Int16> { // block id: 274
    var var312 : (Float64) -> Bool = func17;
    let var337 : Int32 = Int32(-30);
    let var1032 : ?Array<Int16> = ([[Int16(-35), Int16(54), Int16(91), Int16(27), Int16(-90), Int16(53), Int16(-53), Int16(78), Int16(-54), Int16(-107)], [Int16(-29), Int16(-107), Int16(8), Int16(107), Int16(-58), Int16(102), Int16(-103), Int16(-35), Int16(-90), Int16(44)], [Int16(29), Int16(42), Int16(-102), Int16(73), Int16(96), Int16(-19), Int16(17), Int16(77), Int16(-104), Int16(-17)], [Int16(116), Int16(-95), Int16(59), Int16(68), Int16(-92), Int16(-121), Int16(109), Int16(111), Int16(24), Int16(38)], [Int16(-116), Int16(4), Int16(-69), Int16(-99), Int16(-54), Int16(41), Int16(-90), Int16(124), Int16(82), Int16(-6)], [Int16(-25), Int16(90), Int16(95), Int16(-54), Int16(125), Int16(102), Int16(12), Int16(56), Int16(88), Int16(-8)], [Int16(-50), Int16(-13), Int16(24), Int16(41), Int16(-24), Int16(-26), Int16(30), Int16(119), Int16(-75), Int16(63)], [Int16(-91), Int16(-94), Int16(53), Int16(92), Int16(-102), Int16(16), Int16(90), Int16(115), Int16(83), Int16(-96)], [Int16(54), Int16(76), Int16(-78), Int16(110), Int16(-28), Int16(74), Int16(101), Int16(125), Int16(-38), Int16(-87)], [Int16(-49), Int16(57), Int16(45), Int16(-77), Int16(-87), Int16(99), Int16(76), Int16(-97), Int16(68), Int16(-100)]] as Array<Int16>);
    let var3636 : (UInt64) -> Option<Unit> = func534;
    func func524(param525 : Array<Array<Int16>>, optionalParam526 ! : Range<UInt8> = (UInt8(115)&127..=UInt8(100)&127:(-102)|1), optionalParam528 ! : Array<Int16> = [Int16(-22), Int16(61), Int16(-32), Int16(-79), Int16(8), Int16(107), Int16(119), Int16(28), Int16(39), Int16(29)], namedParam530 ! : Range<Int32>) : Int32 { // block id: 531
        ((match (var920) {
            case caseVar1009 : Bool => 
                ();
                var1013
            
            case _ => 
                UInt64(131)
            
        }|>func534) ?? param273);
        let var1043 : (Array<UInt16>, Option<String>, Range<UInt8>) = ([UInt16(177), UInt16(228), UInt16(71), UInt16(184), UInt16(224), UInt16(193), UInt16(181), UInt16(56), UInt16(172), UInt16(253)], Option<String>.None, (UInt8(175)&127..UInt8(76)&127:(-69)|1));
        let var1094 : Range<Int64> = ((-76)&127..(-12)&127:7|1);
        (try { // block id: 1025
            var183 ||= var183;
            if (var866) { var1032 } else { var1032 } 
        } finally { // block id: 1036
            ();
            var1032
        } ?? [Int16(80), match (var1043) {
            case _ => 
                var755;
                Int16(-68)
            
        }, [Int16(-43), Int16(59), Int16(40), Int16(117), Int16(-82), Int16(-110), Int16(-101), Int16(66), Int16(17), Int16(52)][2], try { // block id: 1056
            ();
            var1059;
            Int16(-106) ** (Int16(-62) & 3)
        } catch (e: Exception) { // block id: 1065
            Int16(-94)
        }, Int16(3), -Int16(-20), Int16(-80), (var1077 ?? Int16(-13)), (73, (-62.0), Int8(-123), var1087, var667, var1094, var1097, Int32(-27))[4], (var1077 ?? var660)]);
        Class206.func1107((Option<Range<UInt16>>.None ?? (UInt16(147)&127..var2659&127:((-12)|1))), namedParam1109 : var3636)
    }
;
    let var3699 : Int16 = Int16(71);
    let var3731 : Unit = ();
    func func345(param346 : String, optionalParam347 ! : Interface210 = Class206(), optionalParam349 ! : UInt64 = UInt64(Int8(48)), optionalParam352 ! : Array<Array<Int16>> = [[Int16(Int8(Int8(46))), Int16(77), Int16(-89), Int16(UInt16(UInt16(92))), Int16(UInt16(203)), Int16(0), Int16(UInt16(UInt8(38))), Int16(UInt8(UInt8(156))), Int16(-33), Int16(Int8(UInt8(227)))], [Int16(UInt8(238)), Int16(-59), Int16(Int16(Int16(-15))), Int16(87), Int16(-25), Int16(Int16(-55)), Int16(100), Int16(-105), Int16(-50), Int16(-36)], [Int16(41), Int16(69), Int16(9), Int16(-39), Int16(-76), Int16(-61), Int16(-104), Int16(37), Int16(100), Int16(119)], [Int16(Int8(UInt8(74))), Int16(UInt8(242)), Int16(-80), Int16(Int16(10)), Int16(UInt16(Int16(-44))), Int16(UInt8(UInt8(96))), Int16(82), Int16(58), Int16(UInt16(Int16(2))), Int16(Int16(Int8(-127)))], [Int16(Int8(74)), Int16(45), Int16(UInt16(30)), Int16(73), Int16(56), Int16(UInt8(221)), Int16(23), Int16(-111), Int16(UInt16(208)), Int16(-94)], [Int16(-32), Int16(UInt16(121)), Int16(UInt8(60)), Int16(-73), Int16(-35), Int16(Int8(18)), Int16(Int16(Int16(78))), Int16(Int8(-92)), Int16(Int8(UInt8(44))), Int16(UInt8(23))], [Int16(UInt8(Int8(49))), Int16(Int8(Int8(-44))), Int16(Int16(-20)), Int16(UInt8(Int8(-105))), Int16(-94), Int16(UInt16(UInt8(59))), Int16(UInt16(UInt8(186))), Int16(Int16(8)), Int16(Int8(-37)), Int16(75)], [Int16(-53), Int16(Int16(UInt8(97))), Int16(107), Int16(-123), Int16(Int8(-78)), Int16(-19), Int16(114), Int16(Int16(-105)), Int16(UInt16(0)), Int16(Int16(Int16(61)))], [Int16(-60), Int16(107), Int16(47), Int16(Int8(Int8(-124))), Int16(89), Int16(9), Int16(Int8(Int8(-120))), Int16(Int8(Int8(-27))), Int16(UInt8(209)), Int16(67)], [Int16(-24), Int16(-9), Int16(26), Int16(55), Int16(-55), Int16(74), Int16(44), Int16(4), Int16(75), Int16(-104)]]) : Range<Int16> { // block id: 511
        var var520 : Option<Int32> = Option<Int32>.None;
        var loopTimeVar3704 : Range<UInt64> = (UInt64(Int16(Int16(UInt8(253))))&127..UInt64(UInt8(Int8(UInt8(145))))&127:(91|1));
        for (i in loopTimeVar3704 where (var520 ?? Int32(22)) < func524([[Int16(-49), Int16(-90), Int16(-73), Int16(55), Int16(110), Int16(-61), Int16(-71), Int16(-1), Int16(-64), Int16(5)], [Int16(-41), var660, Int16(90), Int16(16), var1353, var660, Int16(-55), var1353, var1353, Int16(-74)], [Int16(-38), Int16(124), Int16(2), Int16(-51), Int16(-93), Int16(36), Int16(27), Int16(108), Int16(-36), Int16(115)], [Int16(-90), Int16(26), Int16(44), Int16(-95), Int16(81), Int16(-48), var660, var1353, var660, Int16(67)], var2239, [var667, var660, Int16(-48), var1353, var660, Int16(122), Int16(-121), Int16(23), var660, Int16(-32)], var2239, var3171, var2239, [Int16(-115), var1353, var660, Int16(113), Int16(-45), Int16(74), Int16(-103), var660, var660, Int16(-19)]], optionalParam528 : [Int16(119), var660, Int16(-6), Int16(-112), Int16(86), Int16(98), Int16(73), Int16(65), var3699, Int16(116)], namedParam530 : var892)) {

        };
        (try { // block id: 3717
            -var3699
        } finally { // block id: 3720
            Int16(9)
        }&127..=(var1077 ?? (Option<Int16>.Some(Int16(102)) ?? Int16(102)))&127:(try { // block id: 3729
            var3731;
            var143
        } catch (e: Exception) { // block id: 3734
            50
        }|1))
    }
;
    let var3768 : (Array<UInt16>, Option<String>, Range<UInt8>) = ([UInt16(UInt16(Int8(114))), UInt16(66), UInt16(Int16(83)), UInt16(60), UInt16(101), UInt16(195), UInt16(Int16(UInt8(14))), UInt16(Int8(UInt8(172))), UInt16(71), UInt16(179)], ((44, 121.0, Int8(UInt8(187)), (Int16(16)&127..=Int16(23)&127:(-94)|1), Int16(UInt16(241)), ((-1)&127..=(-89)&127:(122|1)), UInt8(10), Int32(UInt8(227))) as String), (UInt8(145)&127..=UInt8(19)&127:((-65)|1)));
    let var3810 : UInt64 = UInt64(Int64(Int16(Int8(Int8(-114)))));
    let var3881 : Option<(Int64, String)> = (UInt64(UInt32(Int8(UInt8(150)))) as (Int64, String));
    var loopTimeVar3891 : Int64 = 0;
    do {
        loopTimeVar3891++;
        func func319() : Range<Int16> { // block id: 320
            var var329 : Range<Int32> = (Int32(-67)&127..Int32(-78)&127:(69|1));
            (UInt8(73), Float32(-116.0), var329, UInt16(221), [UInt16(122), UInt16(238), UInt16(112), UInt16(176), UInt16(10), UInt16(17), UInt16(88), UInt16(200), UInt16(114), UInt16(148)], var337, var229)[4][5];
            if (match (func345(var1462, optionalParam349 : UInt64(17), optionalParam352 : [[Int16(124), Int16(100), Int16(29), Int16(-56), Int16(83), Int16(86), Int16(74), Int16(-55), Int16(-26), Int16(61)], [Int16(124), Int16(-89), Int16(-48), Int16(-80), Int16(125), Int16(-67), Int16(-111), Int16(1), Int16(27), Int16(112)], [Int16(46), Int16(-66), Int16(-59), Int16(-108), Int16(-41), Int16(-44), Int16(116), Int16(124), Int16(22), Int16(-119)], [Int16(-5), Int16(64), Int16(-85), Int16(45), Int16(61), Int16(20), Int16(5), Int16(-113), Int16(23), Int16(-70)], [Int16(-76), Int16(6), Int16(-99), Int16(99), Int16(87), Int16(-35), Int16(-57), Int16(-86), Int16(62), Int16(85)], [Int16(-79), Int16(-37), Int16(-88), Int16(-115), Int16(-53), Int16(120), Int16(126), Int16(119), Int16(-57), Int16(17)], [Int16(46), Int16(-16), Int16(-76), Int16(68), Int16(-5), Int16(48), Int16(32), Int16(15), Int16(62), Int16(-49)], [Int16(102), Int16(-59), Int16(-65), Int16(65), Int16(36), Int16(39), Int16(-62), Int16(-97), Int16(-20), Int16(-22)], [Int16(97), Int16(35), Int16(-41), Int16(-41), Int16(90), Int16(-117), Int16(80), Int16(-87), Int16(122), Int16(-31)], [Int16(90), Int16(95), Int16(-93), Int16(-31), Int16(-90), Int16(8), Int16(10), Int16(-94), Int16(112), Int16(-22)]])) {
                case caseVar3741 : Range<Int8> => 
                    if (true) { (Int8(106)&127..=Int8(99)&127:98|1) } else { (var1518&127..=Int8(44)&127:((-118)|1)) } ;
                    [var1781, true, true, var1781, true, true, false, var2015, true, true];
                    UInt32(32) >= UInt32(7)
                
                case _ : Option<Unit> => 
                    var3768;
                    var3810 + UInt64(16);
                    var888
                
                case caseVar3820 => 
                    Option<Unit>.None;
                    ();
                    false
                
                case _ => 
                    (-49);
                    var var3830 : UInt64 = UInt64(Int8(UInt8(UInt8(155))));
                    var3830 -= UInt64(41);
                    !var2015
                
            }) { // block id: 3838
                var loopTimeVar3843 : Int64 = 0;
                do {
                    loopTimeVar3843++;

                } while ((false) && loopTimeVar3843 < 100 ) ;
                var1518
            } else { // block id: 3845
                -var1518
            };
            if ((Int16(Int16(69)) <= (Int16(-71) | Int16(61)))) { try { // block id: 3856
                ();
                if (false) { (Int16(78)&127..Int16(-13)&127:(-63)|1) } else { var1087 } 
            } finally { // block id: 3862
                var2711;
                var87;
                (Int16(72)&127..Int16(-97)&127:(-50)|1)
            } } else { (("""
ehMF@
GQ[d)
""" as Range<Int16>) ?? var1087) } 
        }
;
        func319();
        var loopTimeVar3889 : Int64 = 0;
        do {
            loopTimeVar3889++;
            ();
            if (var2015) { var3881 } else { Option<(Int64, String)>.None } 
        } while ((var2015) && loopTimeVar3889 < 100 ) 
    } while (((var284[8] ?? (var315|>var312))) && loopTimeVar3891 < 100 ) ;
    (var660&127..match (var3896) {
        case _ => 
            78;
            Option<(Array<Option<Unit>>, (Int64, String))>.Some(var1179);
            var1353 / ((var1353) | 1)
        
    }&127:(84|1))
}

main(): Int64 {
    try {
        let var270 : (Range<Int16>) -> String = func218;
        var var3910 : (Unit) -> Range<Int16> = func272;
        try (resource = Class206()) { // block id: 3913
            Class206(namedParam3254 : var1120);
            ();
            ()
        } catch (_) { // block id: 3918

        }|>(var3910~>var270);
        if (try { // block id: 3921
            var755;
            if (var888) { (var1097, var2943, var3929, var2625, var840, Int32(-28), (UInt16(83)&127..UInt16(120)&127:(var2711|1))) } else { var1663 } ;
            UInt32(245) <= UInt32(252)
        } finally { // block id: 3946
            var3499;
            var920;
            false
        }) { // block id: 3950
            var3953 >>= ((var1097) & 7);
            var3959 = var3959;
            (-40)
        } else { // block id: 3967
            var143
        }
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var115*var115), 64)
        crccheck.updateBuffer(UInt64(var143*var143), 64)
        crccheck.updateBuffer(UInt64(var660*var660), 64)
        crccheck.updateBuffer(UInt64(var686*var686), 64)
        crccheck.updateBuffer(UInt64(var2659*var2659), 64)
        crccheck.updateBuffer(UInt64(var3959*var3959), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Aggregate1465 {

}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_expected_expr_or_decl_in
// ASSERT: scan parse_expected_character
// ASSERT: scan parse_expected_catch_or_finally_in_try
// ASSERT: scan parse_unexpected_declaration_in_scope
// ASSERT: scan parse_trailing_closure_only_follow_name
// ASSERT: scan parse_expected_left_brace
// ASSERT: scan parse_expected_case


