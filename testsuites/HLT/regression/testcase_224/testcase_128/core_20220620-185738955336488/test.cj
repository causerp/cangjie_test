/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output

public let var125 : UInt32 = UInt32(UInt32(Int16(-64)))
public var var173 : (Range<UInt8>, Range<UInt32>, String, Bool, Range<UInt32>, Range<Int8>, Unit) = ((UInt8(93)&127..UInt8(40)&127:(-18)|1), (UInt32(220)&127..=UInt32(116)&127:(-3)|1), ###"a|kJDp&mR^"###, false, (UInt32(177)&127..UInt32(156)&127:79|1), (Int8(Int8(-27))&127..=Int8(122)&127:(34|1)), ())
public var var206 : Int8 = Int8(UInt8(Int8(-98)))
public var var239 : Unit = ()
public let var242 : Unit = ()
public var var300 : UInt64 = UInt64(79)
public let var394 : Int16 = Int16(UInt16(28))
let var505 : Unit = ()
public let var782 : (Range<Int8>, Int64, Aggregate324, String, Range<Int64>) = ((Int8(42)&127..Int8(36)&127:49|1), Int64(UInt32(98)), Aggregate324(), "(S/G[RMbaR", (67&127..=Int64(Int64(Int32(-127)))&127:(0|1)))
public var var884 : Aggregate324 = Aggregate324()
public let var904 : Bool = (Float64(Float64(Float32(97.0))) is UInt64)
let var910 : Array<Array<Unit>> = Array<Array<Unit>>(10){ i => [(), (), (), (), (), (), (), (), (), ()] }
public var var976 : Int64 = (-116)
public var var1003 : Range<UInt8> = (UInt8(214)&127..UInt8(107)&127:(-57)|1)
public var var1083 : String = "u\"`A6A\\!u;"
public let var1429 : (Int8, Int16, Range<Int16>, Float64, Int8) = (Int8(Int8(-82)), Int16(UInt16(123)), (Int16(71)&127..=Int16(-84)&127:(-49)|1), Float64(Float32(Float32(-76.0))), Int8(8))
var var1724 : Range<Int16> = (Int16(-40)&127..Int16(120)&127:(-23)|1)
public let var1744 : Range<UInt64> = (UInt64(252)&127..UInt64(178)&127:97|1)
var var2189 : (Int64, UInt8, Range<UInt16>) = ((-27), UInt8(Int8(38)), (UInt16(Int16(UInt16(190)))&127..=UInt16(Int8(-107))&127:(Int64(UInt16(220))|1)))
let var2262 : ?Rune = Option<Rune>.None
let var2265 : ?Rune = (Option<Unit>.None as Rune)
public let var2296 : Range<Int64> = (60&127..=43&127:124|1)
var var2325 : Option<Range<Int64>> = (((Int8(6)&127..Int8(-97)&127:(Int64(UInt32(230))|1)), (UInt32(46)&127..=UInt32(Int8(-18))&127:(48|1)), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], Float64(58.0), (Int8(75), Int16(15), (Int16(-128)&127..Int16(88)&127:(123|1)), Float64(53.0), Int8(Int8(-64)))) as Range<Int64>)
var var2435 : UInt32 = UInt32(Int32(-46))
public var var2477 : Int32 = Int32(-51)
var var2551 : Interface68 = Class64<Option<Bool>, Option<UInt32>>()
let var2706 : ??((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), (Int8, Int16, Range<Int16>, Float64, Int8), Int16, String, Option<Unit>, Range<Int16>) = Option<Option<((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), (Int8, Int16, Range<Int16>, Float64, Int8), Int16, String, Option<Unit>, Range<Int16>)>>.None
public let var2720 : ?((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), (Int8, Int16, Range<Int16>, Float64, Int8), Int16, String, Option<Unit>, Range<Int16>) = (Option<Array<Unit>>.None as ((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), (Int8, Int16, Range<Int16>, Float64, Int8), Int16, String, Option<Unit>, Range<Int16>))
public var var2815 : String = """
0!l${var1083}#u
W${var1083}N${var1083}R${var1083}h1
"""
public let var2890 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
public var var2929 : UInt8 = UInt8(88)
public let var2935 : Unit = ()
public var var2952 : UInt64 = UInt64(UInt32(Int8(UInt8(Int8(-45)))))
var var2993 : Array<Array<Unit>> = [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]]
var var3063 : Unit = ()
public var var3467 : Bool = false
public let var3501 : ?(Int8, Int16, Range<Int16>, Float64, Int8) = ((Int8(-122)&127..Int8(-17)&127:(-105)|1) as (Int8, Int16, Range<Int16>, Float64, Int8))
var var3526 : ?Bool = (Int16(37) as Bool)
public let var3548 : (Interface69, Range<UInt16>, UInt32, Range<UInt64>) = (Class64<Option<Bool>, Option<UInt32>>(), (UInt16(130)&127..UInt16(102)&127:(Int64(UInt64(94))|1)), UInt32(228), (UInt64(184)&127..=UInt64(176)&127:(Int64(UInt64(UInt8(90)))|1)))
public var var3617 : Rune = 'W'
public let var3974 : ?((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), (Int8, Int16, Range<Int16>, Float64, Int8), Int16, String, Option<Unit>, Range<Int16>) = ((Int8(Int8(96)), Int16(-121), (Int16(Int16(-14))&127..Int16(Int16(122))&127:((-12)|1)), 79.0, Int8(UInt8(154))) as ((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), (Int8, Int16, Range<Int16>, Float64, Int8), Int16, String, Option<Unit>, Range<Int16>))
public var var4011 : Float64 = Float64(12.0)
public var var4031 : Interface67 = Class64<Option<Bool>, Option<UInt32>>()
public var var4044 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
public var var4100 : Int16 = Int16(23)
var var4519 : ?Interface67 = Option<Interface67>.None
var var4569 : ?Float32 = (() as Float32)
let var4676 : Array<Array<Unit>> = [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]]
public var var4752 : UInt16 = UInt16(Int16(UInt16(46)))
public let var4787 : UInt8 = UInt8(UInt8(112))
public var var4802 : Range<Int8> = (Int8(48)&127..Int8(-38)&127:(-76)|1)
public let var4852 : Range<UInt16> = (UInt16(92)&127..UInt16(59)&127:38|1)
public var var4877 : UInt64 = UInt64(41)
var var5073 : Bool = ((Int8(-63)&127..Int8(33)&127:((-55)|1)) is () -> String)
let var5094 : ?Array<Unit> = (((((UInt8(147)&127..=UInt8(209)&127:107|1), ((UInt32(180)&127..=UInt32(103)&127:((-44)|1)), (-104), ((Int8(-42)&127..=Int8(-106)&127:(12|1)), (UInt32(126)&127..UInt32(169)&127:(105|1)), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], 7.0, (Int8(-27), Int16(-100), (Int16(-16)&127..Int16(-45)&127:((-67)|1)), (-109.0), Int8(-95))), (UInt8(22)&127..UInt8(27)&127:103|1)), [(), (), (), (), (), (), (), (), (), ()], UInt8(12)), (Int8(-117), Int16(88), (Int16(-41)&127..=Int16(60)&127:(-121)|1), 73.0, Int8(-51)), Int16(69), """
@`9?\"
%\"iyh
""", Option<Unit>.None, (Int16(2)&127..=Int16(0)&127:45|1)) is Class64<Option<Bool>, Option<UInt32>>) as Array<Unit>)

public interface Interface68 {

}

public interface Interface67 <: Interface68 {

}

public interface Interface69 <: Interface68 & Interface67 {

}

public open class Class64<T0, T1> <: Interface67 & Interface69 {
    public init() { // block id: 66

    }
;
    public var var74 : Rune = 'f';
    public static let var196 : Rune = 'Q';
    static var var201 : Interface68 = Class64<Option<Bool>, Option<UInt32>>();
    public static let var304 : (Int8, Int16, Range<Int16>, Float64, Int8) = (Int8(-32), Int16(-54), (Int16(-1)&127..Int16(13)&127:(-86)|1), (-75.0), Int8(30));
    public static var var4808 : Range<Int64> = ((-6)&127..(-21)&127:(84|1));
    public init(param161 : UInt16, param162 : Bool) { // block id: 163
        ((var173[4] as Unit) ?? match (UInt8(188) << ((UInt8(224)) & 7)) {
            case caseVar193 : (Range<UInt8>, Range<UInt32>, String, Bool, Range<UInt32>, Range<Int8>, Unit) => 
                var196;
                if (param162) { var201 } else { Class64<Option<Bool>, Option<UInt32>>() } ;
                var206 *= Int8(-72)
            
            case _ => 
                UInt64(24);
                var201;
                ()
            
        });
        let var281 : Int16 = Int16(UInt16(Int8(-105)));
        if ((var125|>func220)) { match {
            case false => 
            let var286 : Range<Int16> = (Int16(-60)&127..Int16(UInt16(129))&127:(Int64(Int32(UInt8(5)))|1));
            (var206, var281, var286, 120.0, var206)
            case _ => 
            var239;
            var300 = UInt64(74);
            var304
        } } else { func312(var206, namedParam316 : (var2929&127..=var4787&127:(var976|1))) } [3];
        var4100 **= (match (try { // block id: 4796
                ();
                if (true) { (var4802, var976, var884, var1083, var4808) } else { ((Int8(67)&127..Int8(-80)&127:64|1), var976, var884, var1083, var4808) } 
            } catch (e: Exception) { // block id: 4819
                var242;
                (var4802, (-22), Aggregate324(var1429), ###",sr]nEGt^7"###, (55&127..(-98)&127:20|1))
            }) {
            case (_,caseVar4830,caseVar4831,_ : ((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), ((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), (Int8, Int16, Range<Int16>, Float64, Int8), Int16, String, Option<Unit>, Range<Int16>), Range<Int64>),_) => 
                Int16(-78)
            
            case (_ : Option<Option<((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), (Int8, Int16, Range<Int16>, Float64, Int8), Int16, String, Option<Unit>, Range<Int16>)>>,caseVar4836 : Aggregate324,_,caseVar4837 : Range<Int8>,caseVar4838 : ((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), ((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), (Int8, Int16, Range<Int16>, Float64, Int8), Int16, String, Option<Unit>, Range<Int16>), Range<Int64>)) => 
                ();
                Option<Unit>.Some(());
                Int16(-49)
            
            case _ => 
                var2935;
                var2935;
                var394
            
        } & 3)
    }

}

public struct Aggregate89<T0> {
    init() { // block id: 91

    }
;
    static var var105 : ?Rune = Option<Rune>.None;
    private static let var108 : Rune = 'h';
    private static let var118 : Interface69 = Class64<Option<Bool>, Option<UInt32>>();
    public static let var132 : UInt64 = UInt64(145);
    private static var var5041 : Option<Unit> = Option<Unit>.None;
    public static func func94(namedParam95 ! : UInt16, optionalParam96 ! : Interface67 = Class64<Option<Bool>, Option<UInt32>>(), namedParam98 ! : Unit) : Int64 { // block id: 99
        var var139 : Interface69 = Class64<Option<Bool>, Option<UInt32>>();
        match ((var105 ?? var108)) {
            case caseVar112 => 
                var var135 : Int64 = 6;
                if (true) { (var118, (namedParam95&127..=UInt16(37)&127:((-87)|1)), var125, (UInt64(15)&127..var132&127:(var135|1))) } else { (var139, (UInt16(130)&127..namedParam95&127:(var135|1)), var125, (var132&127..=UInt64(192)&127:(98|1))) } 
            
            case 'F' => 
                ();
                let var156 : Bool = true;
                if (var156) { (Class64<Option<Bool>, Option<UInt32>>(var4752, false), var4852, UInt32(209), (UInt64(127)&127..=UInt64(94)&127:106|1)) } else { var3548 } 
            
            case 'U' | 'l' | '4' | 'w' => 
                (var118, (UInt16(123)&127..=UInt16(164)&127:(var976|1)), UInt32(243), var1744);
                (Class64<Option<Bool>, Option<UInt32>>(), (UInt16(124)&127..UInt16(21)&127:((-109)|1)), UInt32(249), (var4877&127..UInt64(181)&127:(39|1)))
            
            case _ => 
                var239;
                ();
                var3548
            
        }[0];
        var var5049 : Float32 = Float32(Float32(Float32(Float32(13.0))));
        let var5058 : Option<Unit> = ([(), (), (), (), (), (), (), (), (), ()] as Unit);
        if ((([(), (), (), (), (), (), (), (), (), ()] as Bool) ?? var3467)) { // block id: 4892
            var var4899 : Array<Option<Rune>> = [Option<Rune>.None, Option<Rune>.None, (Class704() as Rune), Option<Rune>.Some('j'), Option<Rune>.None, Option<Rune>.Some('4'), (true as Rune), Option<Rune>.None, Option<Rune>.None, (Option<UInt32>.None as Rune)];
            try { // block id: 4894
                var173;
                if (true) { var4899 } else { var4899 } 
            } catch (_) { // block id: 4917
                ();
                Option<Bool>.None;
                var4899
            };
            try { // block id: 4922
                var2477 += var2477;
                Float32(45.0)
            } catch (_) { // block id: 4927
                let var4930 : (Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8) = ((UInt8(103)&127..UInt8(UInt8(26))&127:(Int64(UInt16(51))|1)), ((UInt32(UInt16(48))&127..UInt32(82)&127:((-123)|1)), Int64(UInt32(112)), ((Int8(47)&127..=Int8(-90)&127:((-2)|1)), (UInt32(121)&127..=UInt32(39)&127:((-65)|1)), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], Float64(Float32(-83.0)), (Int8(-77), Int16(9), (Int16(6)&127..=Int16(49)&127:(-101)|1), 14.0, Int8(-117))), (UInt8(136)&127..UInt8(158)&127:(-22)|1)), [(), (), (), (), (), (), (), (), (), ()], UInt8(Int8(Int8(-36))));
                (var4930, (Int8(-6), var394, (Int16(49)&127..var4100&127:((-117)|1)), var4011, Int8(87)), var4100, """
VkA51
,he'6
""", var5041, (var4100&127..=var394&127:(var976|1)));
                namedParam98;
                var5049
            } finally { // block id: 5054
                Float32(90.0)
            };
            (var5058 ?? ())
        } else if (var5073) { // block id: 5079
            ()
        };
        (((Option<Option<Array<Unit>>>.Some(var5094) ?? var5094) as Int64) ?? 44)
    }

}


public func func220(param221 : UInt32) : Bool { // block id: 222
    var var230 : Unit = ();
    let var245 : Unit = ();
    let var248 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    var var260 : Unit = ();
    [[var230, var230, (), (), var230, (), (), var239, var242, var245], var248, [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], var248, var248, [var230, var239, var260, (), var230, (), (), var239, var230, ()], [(), (), (), (), (), (), (), (), (), ()]][8][9];
    true
}

public struct Aggregate324 {
    public init() { // block id: 326

    }
;
    private static let var624 : Int64 = 50;
    public static func func329(optionalParam330 ! : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()], optionalParam332 ! : Range<Int32> = (Int32(Int8(Int8(UInt8(20))))&127..Int32(-102)&127:(Int64(UInt32(Int8(41)))|1)), optionalParam342 ! : Range<UInt16> = (UInt16(67)&127..UInt16(38)&127:(Int64(Int16(91))|1))) : (Int8, Int16, Range<Int16>, Float64, Int8) { // block id: 348
        optionalParam330[6];
        let var596 : (UInt16) -> Option<Unit> = { lambdaParameter599 : UInt16 => Option<Unit>.None };
        let var613 : Int16 = Int16(59);
        let var617 : Int8 = Int8(-60);
        let var688 : Range<Int16> = (Int16(Int8(108))&127..=Int16(UInt8(210))&127:(Int64(UInt32(15))|1));
        var var697 : Float64 = Float64(Float64(Float64(Float32(-24.0))));
        var var708 : Class704 = Class704();
        var var731 : (Int8, Int16, Range<Int16>, Float64, Int8) = (Int8(69), Int16(-115), (Int16(-97)&127..=Int16(39)&127:10|1), Float64(Float64(Float32(-105.0))), Int8(Int8(Int8(UInt8(24)))));
        if (((UInt16(22)|>var596) is (UInt32) -> Bool)) { // block id: 603
            let var673 : (Int8, Int16, Range<Int16>, Float64, Int8) = (Int8(UInt8(202)), Int16(95), (Int16(16)&127..Int16(-80)&127:7|1), Float64(Float32(Float32(Float32(18.0)))), Int8(119));
            match (Option<Unit>.Some(var242)) {
                case _ : Range<UInt8> => 
                    var394 % ((var613) | 1);
                    (var617, var394, (var394&127..=Int16(-114)&127:(var624|1)), 87.0, var617)
                
                case _ => 
                    var var631 : (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)) = ((Int8(-53)&127..=Int8(Int8(Int8(-18)))&127:((-115)|1)), (UInt32(UInt8(Int8(-101)))&127..=UInt32(246)&127:(104|1)), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], (-18.0), (Int8(21), Int16(Int8(65)), (Int16(UInt8(198))&127..Int16(Int8(116))&127:(Int64((-90))|1)), Float64(Float32(-81.0)), Int8(15)));
                    var631;
                    if (true) { (var617, Int16(-24), (var394&127..Int16(-49)&127:(69|1)), 61.0, Int8(32)) } else { var673 } ;
                    (Int8(-57), var613, var688, var697, Int8(-114))
                
            };
            var708.var711
        } else { // block id: 718
            [(UInt16(46)&127..=UInt16(16)&127:34|1), (UInt16(251)&127..=UInt16(158)&127:(-74)|1), (UInt16(232)&127..UInt16(131)&127:80|1), (UInt16(53)&127..UInt16(18)&127:41|1), (UInt16(150)&127..UInt16(240)&127:9|1), (UInt16(140)&127..UInt16(169)&127:97|1), (UInt16(133)&127..UInt16(132)&127:(-92)|1), (UInt16(196)&127..=UInt16(252)&127:(-2)|1), (UInt16(51)&127..=UInt16(165)&127:(-42)|1), (UInt16(54)&127..UInt16(184)&127:(-5)|1)][5];
            (UInt32(104)&127..UInt32(116)&127:64|1);
            (Option<(Int8, Int16, Range<Int16>, Float64, Int8)>.Some(var731) ?? (Int8(-117), Int16(-73), (Int16(-124)&127..Int16(65)&127:(var624|1)), (-65.0), var206))
        }
    }
;
    private static let var901 : Array<Range<UInt16>> = [(UInt16(143)&127..UInt16(19)&127:(-125)|1), (UInt16(38)&127..=UInt16(166)&127:(-47)|1), (UInt16(74)&127..UInt16(15)&127:117|1), (UInt16(230)&127..UInt16(129)&127:(-124)|1), (UInt16(74)&127..=UInt16(108)&127:17|1), (UInt16(23)&127..=UInt16(45)&127:78|1), (UInt16(98)&127..=UInt16(52)&127:(-5)|1), (UInt16(82)&127..UInt16(239)&127:(-24)|1), (UInt16(32)&127..=UInt16(88)&127:53|1), (UInt16(130)&127..=UInt16(207)&127:(-16)|1)];
    public mut func func887(optionalParam888 ! : Array<Array<Unit>> = [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], optionalParam890 ! : UInt8 = UInt8(UInt8(88)), optionalParam893 ! : (UInt16) -> Option<Unit> = func355, namedParam897 ! : Range<Int64>) : Bool { // block id: 898
        ();
        var901;
        var904
    }
;
    static let var2209 : Bool = false;
    public init(param4544 : (Int8, Int16, Range<Int16>, Float64, Int8)) { // block id: 4545
        var var4555 : Option<Unit> = Option<Unit>.None;
        if (true) { // block id: 4548
            (var4555 ?? ())
        }
    }

}


func func355(param356 : UInt16) : Option<Unit> { // block id: 357
    let var366 : Range<UInt8> = (UInt8(96)&127..UInt8(218)&127:(-117)|1);
    let var370 : Range<UInt32> = (UInt32(114)&127..UInt32(204)&127:(Int64(Int32(Int16(Int16(59))))|1));
    let var381 : Range<Int8> = (Int8(53)&127..Int8(99)&127:(Int64(Int64(Int16(-76)))|1));
    let var398 : Range<Int16> = (Int16(20)&127..=Int16(-89)&127:118|1);
    var var401 : Float64 = (-62.0);
    (var366, (var370, 4, (var381, var370, [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], (-17.0), (Int8(12), var394, var398, var401, Int8(-88))), (UInt8(94)&127..=UInt8(221)&127:36|1)), [var239, (), var239, (), var242, (), (), (), (), var242], UInt8(94))[1][2][2];
    let var428 : ?((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), (Int8, Int16, Range<Int16>, Float64, Int8), Int16, String, Option<Unit>, Range<Int16>) = Option<((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), (Int8, Int16, Range<Int16>, Float64, Int8), Int16, String, Option<Unit>, Range<Int16>)>.Some((((UInt8(13)&127..=UInt8(160)&127:15|1), ((UInt32(134)&127..=UInt32(35)&127:((-57)|1)), 6, ((Int8(85)&127..=Int8(9)&127:(-22)|1), (UInt32(205)&127..UInt32(228)&127:126|1), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], (-74.0), (Int8(41), Int16(104), (Int16(2)&127..=Int16(-68)&127:121|1), 48.0, Int8(-103))), (UInt8(181)&127..UInt8(208)&127:(119|1))), [(), (), (), (), (), (), (), (), (), ()], UInt8(UInt8(82))), (Int8(UInt8(144)), Int16(8), (Int16(59)&127..=Int16(-68)&127:((-50)|1)), 105.0, Int8(54)), Int16(-112), "g73Kz`DVXx", (((UInt32(107)&127..UInt32(241)&127:(-112)|1), (-35), ((Int8(99)&127..Int8(62)&127:(-68)|1), (UInt32(200)&127..UInt32(187)&127:(99|1)), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], 41.0, (Int8(-57), Int16(-103), (Int16(13)&127..=Int16(-121)&127:(-76)|1), 52.0, Int8(-7))), (UInt8(149)&127..UInt8(125)&127:(47|1))) as Unit), (Int16(51)&127..Int16(-14)&127:107|1)));
    let var511 : ((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), (Int8, Int16, Range<Int16>, Float64, Int8), Int16, String, Option<Unit>, Range<Int16>) = (((UInt8(140)&127..=UInt8(4)&127:107|1), ((UInt32(82)&127..UInt32(176)&127:(74|1)), 51, ((Int8(25)&127..Int8(41)&127:58|1), (UInt32(103)&127..=UInt32(230)&127:122|1), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], 22.0, (Int8(22), Int16(-125), (Int16(49)&127..=Int16(67)&127:((-97)|1)), 109.0, Int8(111))), (UInt8(36)&127..UInt8(104)&127:(41|1))), [(), (), (), (), (), (), (), (), (), ()], UInt8(134)), (Int8(Int8(Int8(-39))), Int16(19), (Int16(17)&127..Int16(54)&127:7|1), Float64(Float32(Float32(104.0))), Int8(UInt8(69))), Int16(UInt8(Int8(78))), ###"/B).|IdG$E"###, Option<Unit>.None, (Int16(Int16(80))&127..Int16(54)&127:((-17)|1)));
    (var428 ?? try { // block id: 503
        var505;
        var var508 : String = "(~l5Df2v4h";
        var508;
        var511
    } catch (_) { // block id: 592
        var511
    })[4]
}

public open class Class704 <: Resource {
    public init() { // block id: 706

    }
;
    let var711 : (Int8, Int16, Range<Int16>, Float64, Int8) = (Int8(-77), Int16(18), (Int16(66)&127..Int16(-58)&127:74|1), (-115.0), Int8(32));
    let var764 : Unit = ()
    public func isClosed(): Bool { return true }
    public func close(): Unit {}
}





func func1291<T0>(param1292 : Interface68) : ((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), (Int8, Int16, Range<Int16>, Float64, Int8), Int16, String, Option<Unit>, Range<Int16>) { // block id: 1293
    let var1310 : ?Rune = Option<Rune>.None;
    func func1299(param1300 : Float64) : ((Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), (Int8, Int16, Range<Int16>, Float64, Int8), Rune, ((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), ((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), (Int8, Int16, Range<Int16>, Float64, Int8), Int16, String, Option<Unit>, Range<Int16>), Range<Int64>), UInt32) { // block id: 1301
        var var1314 : Int64 = Int64(UInt8(UInt8(1)));
        let var1331 : (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>) = ((UInt32(23)&127..=UInt32(179)&127:14|1), 58, ((Int8(Int8(42))&127..=Int8(12)&127:(79|1)), (UInt32(127)&127..UInt32(175)&127:16|1), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], Float64(Float64(Float32(64.0))), (Int8(66), Int16(UInt16(215)), (Int16(-109)&127..Int16(-55)&127:15|1), (-1.0), Int8(-86))), (UInt8(67)&127..UInt8(210)&127:(Int64(2)|1)));
        let var1441 : Rune = 'h';
        var var1444 : ((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), ((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), (Int8, Int16, Range<Int16>, Float64, Int8), Int16, String, Option<Unit>, Range<Int16>), Range<Int64>) = (((UInt8(116)&127..UInt8(66)&127:((-85)|1)), ((UInt32(202)&127..UInt32(111)&127:15|1), Int64(UInt8(59)), ((Int8(101)&127..Int8(25)&127:(-71)|1), (UInt32(206)&127..=UInt32(88)&127:((-23)|1)), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], 12.0, (Int8(1), Int16(-54), (Int16(-35)&127..Int16(10)&127:(-32)|1), 6.0, Int8(114))), (UInt8(3)&127..UInt8(139)&127:33|1)), [(), (), (), (), (), (), (), (), (), ()], UInt8(90)), (((UInt8(174)&127..UInt8(139)&127:39|1), ((UInt32(128)&127..=UInt32(187)&127:((-36)|1)), (-54), ((Int8(-69)&127..=Int8(-45)&127:36|1), (UInt32(91)&127..UInt32(42)&127:19|1), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], (-69.0), (Int8(-115), Int16(-13), (Int16(117)&127..=Int16(2)&127:(-49)|1), (-33.0), Int8(9))), (UInt8(16)&127..=UInt8(208)&127:((-45)|1))), [(), (), (), (), (), (), (), (), (), ()], UInt8(Int8(-86))), (Int8(0), Int16(-28), (Int16(116)&127..Int16(-80)&127:(68|1)), 117.0, Int8(UInt8(130))), Int16(Int16(Int16(-57))), "`d5EZz!%@L", Option<Unit>.Some(()), (Int16(Int8(110))&127..=Int16(-104)&127:(Int64(Int8(-94))|1))), (117&127..13&127:(-25)|1));
        let var1614 : ?((Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), (Int8, Int16, Range<Int16>, Float64, Int8), Rune, ((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), ((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), (Int8, Int16, Range<Int16>, Float64, Int8), Int16, String, Option<Unit>, Range<Int16>), Range<Int64>), UInt32) = ((Int16(UInt8(10)) as Unit) as ((Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), (Int8, Int16, Range<Int16>, Float64, Int8), Rune, ((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), ((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), (Int8, Int16, Range<Int16>, Float64, Int8), Int16, String, Option<Unit>, Range<Int16>), Range<Int64>), UInt32));
        var var1640 : (Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8) = ((UInt8(179)&127..=UInt8(111)&127:5|1), ((UInt32(147)&127..=UInt32(66)&127:(Int64(Int32(-126))|1)), Int64(Int16(-88)), ((Int8(20)&127..=Int8(-54)&127:(-60)|1), (UInt32(45)&127..UInt32(88)&127:119|1), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], (-29.0), (Int8(-123), Int16(-55), (Int16(-9)&127..=Int16(1)&127:(64|1)), (-121.0), Int8(126))), (UInt8(242)&127..=UInt8(161)&127:(-26)|1)), [(), (), (), (), (), (), (), (), (), ()], UInt8(75));
        var var1940 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
        (try { // block id: 1308
            var1310;
            var1314 <<= ((22) & 7);
            let var1322 : ?((Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), (Int8, Int16, Range<Int16>, Float64, Int8), Rune, ((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), ((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), (Int8, Int16, Range<Int16>, Float64, Int8), Int16, String, Option<Unit>, Range<Int16>), Range<Int64>), UInt32) = Option<((Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), (Int8, Int16, Range<Int16>, Float64, Int8), Rune, ((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), ((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), (Int8, Int16, Range<Int16>, Float64, Int8), Int16, String, Option<Unit>, Range<Int16>), Range<Int64>), UInt32)>.None;
            if (var904) { var1322 } else { var1322 } 
        } catch (_) { // block id: 1325
            if (var904) { Option<((Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), (Int8, Int16, Range<Int16>, Float64, Int8), Rune, ((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), ((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), (Int8, Int16, Range<Int16>, Float64, Int8), Int16, String, Option<Unit>, Range<Int16>), Range<Int64>), UInt32)>.Some((var1331, var1429, var1441, var1444, UInt32(227))) } else { var1614 } 
        } finally { // block id: 1619
            var1614
        } ?? match (var1003) {
            case _ => 
                (var1331, (Int8(-20), Int16(-124), (Int16(111)&127..Int16(73)&127:(56|1)), param1300, Int8(81)), 'R', (var1640, (var1640, (Int8(-63), Int16(66), var1724, 68.0, var206), Int16(-11), var1083, Option<Unit>.None, (var394&127..Int16(-20)&127:((-29)|1))), (116&127..=59&127:(-82)|1)), var125)
            
            case caseVar1739 => 
                if (var904) { var1744 } else { var1744 } ;
                ();
                var var1749 : ((Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), (Int8, Int16, Range<Int16>, Float64, Int8), Rune, ((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), ((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), (Int8, Int16, Range<Int16>, Float64, Int8), Int16, String, Option<Unit>, Range<Int16>), Range<Int64>), UInt32) = (((UInt32(247)&127..=UInt32(143)&127:62|1), (-62), ((Int8(50)&127..Int8(42)&127:(-14)|1), (UInt32(165)&127..UInt32(151)&127:((-65)|1)), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], Float64(Float32(-41.0)), (Int8(49), Int16(1), (Int16(120)&127..=Int16(44)&127:117|1), (-97.0), Int8(13))), (UInt8(238)&127..UInt8(135)&127:123|1)), (Int8(-11), Int16(Int8(Int8(-37))), (Int16(94)&127..=Int16(-86)&127:(-8)|1), Float64(Float64((-27.0))), Int8(10)), 'z', (((UInt8(163)&127..UInt8(250)&127:((-33)|1)), ((UInt32(121)&127..=UInt32(170)&127:(26|1)), 67, ((Int8(-43)&127..=Int8(100)&127:(-84)|1), (UInt32(25)&127..UInt32(103)&127:43|1), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], (-24.0), (Int8(6), Int16(-36), (Int16(5)&127..=Int16(11)&127:4|1), (-67.0), Int8(74))), (UInt8(164)&127..UInt8(15)&127:44|1)), [(), (), (), (), (), (), (), (), (), ()], UInt8(Int8(-93))), (((UInt8(31)&127..UInt8(136)&127:(-40)|1), ((UInt32(98)&127..UInt32(55)&127:((-40)|1)), 67, ((Int8(27)&127..=Int8(-19)&127:(86|1)), (UInt32(128)&127..UInt32(226)&127:(88|1)), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], 74.0, (Int8(101), Int16(-49), (Int16(80)&127..Int16(-12)&127:((-114)|1)), (-114.0), Int8(-21))), (UInt8(18)&127..UInt8(206)&127:(59|1))), [(), (), (), (), (), (), (), (), (), ()], UInt8(19)), (Int8(-122), Int16(76), (Int16(97)&127..=Int16(-91)&127:((-127)|1)), 54.0, Int8(78)), Int16(UInt16(159)), ###"uDYuJKY_k>"###, Option<Unit>.None, (Int16(-106)&127..=Int16(-36)&127:(85|1))), ((-38)&127..=Int64(UInt8(89))&127:(Int64(Int32(47))|1))), UInt32(139));
                var1749
            
            case _ => 
                var1940;
                let var1953 : ((Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), (Int8, Int16, Range<Int16>, Float64, Int8), Rune, ((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), ((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), (Int8, Int16, Range<Int16>, Float64, Int8), Int16, String, Option<Unit>, Range<Int16>), Range<Int64>), UInt32) = (((UInt32(147)&127..=UInt32(107)&127:18|1), Int64(Int32(-18)), ((Int8(-95)&127..=Int8(-60)&127:(123|1)), (UInt32(121)&127..UInt32(102)&127:(-59)|1), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], Float64(Float32(65.0)), (Int8(-120), Int16(95), (Int16(92)&127..=Int16(-20)&127:(81|1)), 30.0, Int8(56))), (UInt8(UInt8(14))&127..UInt8(Int8(-68))&127:(20|1))), (Int8(-90), Int16(UInt16(249)), (Int16(104)&127..=Int16(-39)&127:52|1), Float64(Float64(85.0)), Int8(30)), 'K', (((UInt8(241)&127..UInt8(74)&127:((-84)|1)), ((UInt32(215)&127..UInt32(158)&127:(110|1)), 62, ((Int8(-121)&127..=Int8(-40)&127:((-109)|1)), (UInt32(92)&127..UInt32(58)&127:((-64)|1)), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], 118.0, (Int8(106), Int16(47), (Int16(56)&127..Int16(57)&127:93|1), 44.0, Int8(114))), (UInt8(216)&127..UInt8(198)&127:(-8)|1)), [(), (), (), (), (), (), (), (), (), ()], UInt8(201)), (((UInt8(167)&127..UInt8(248)&127:((-82)|1)), ((UInt32(68)&127..UInt32(15)&127:53|1), (-29), ((Int8(-99)&127..=Int8(62)&127:(125|1)), (UInt32(70)&127..UInt32(155)&127:(-27)|1), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], (-100.0), (Int8(41), Int16(-1), (Int16(-105)&127..=Int16(-2)&127:69|1), (-20.0), Int8(-84))), (UInt8(87)&127..UInt8(233)&127:((-117)|1))), [(), (), (), (), (), (), (), (), (), ()], UInt8(233)), (Int8(-100), Int16(-92), (Int16(-92)&127..Int16(38)&127:(43|1)), 67.0, Int8(23)), Int16(66), "A\"!NE=b+y5", (Int32(-120) as Unit), (Int16(55)&127..Int16(-103)&127:(-73)|1)), (5&127..(-26)&127:(-21)|1)), UInt32(231));
                var1953
            
        })
    }
;
    func1299((-106.0))[3][1]
}



public func func2248(param2249 : Interface67) : Unit { // block id: 2250
    var var2284 : Range<Int8> = (Int8(-49)&127..=Int8(-48)&127:(Int64(Int8(UInt8(UInt8(113))))|1));
    if ((try { // block id: 2254
        (var976, UInt8(140), (UInt16(205)&127..=UInt16(160)&127:19|1));
        if (true) { var2262 } else { var2265 } ;
        if (var904) { ((Int8(97)&127..=Int8(-113)&127:(116|1)), (-91), Aggregate324(), var1083, (var976&127..87&127:((-63)|1))) } else { (var2284, var976, var884, "ay^f`98NV8", var2296) } 
    } catch (_) { // block id: 2298
        ();
        (106, UInt8(64), (UInt16(164)&127..UInt16(239)&127:56|1));
        ((Int8(-11)&127..=Int8(-3)&127:93|1), var976, var884, var1083, (var976&127..=25&127:(36|1)))
    } is Class704)) { (try { // block id: 2319
        if (var904) { Class64<Option<Bool>, Option<UInt32>>() } else { Class64<Option<Bool>, Option<UInt32>>() } ;
        var2325
    } finally { // block id: 2352
        var239;
        ();
        if (false) { Option<Range<Int64>>.Some((76&127..=(-58)&127:(-18)|1)) } else { var2325 } 
    } ?? try { // block id: 2361
        'Q';
        if (var904) { var2296 } else { (var976&127..114&127:(var976|1)) } 
    } catch (_) { // block id: 2370
        var505;
        var505;
        var2296
    } finally { // block id: 2374
        var239;
        if (var904) { ((-47)&127..33&127:(-70)|1) } else { ((-39)&127..=(-7)&127:(86|1)) } 
    }) } else { var2296 } ;
    let var2406 : ??((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), (Int8, Int16, Range<Int16>, Float64, Int8), Int16, String, Option<Unit>, Range<Int16>) = (Aggregate324() as Option<((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), (Int8, Int16, Range<Int16>, Float64, Int8), Int16, String, Option<Unit>, Range<Int16>)>);
    let var2428 : Bool = false;
    if (var2428) { [var125, UInt32(207), UInt32(184), var2435, var2435, UInt32(203), var125, var125, var2435, UInt32(10)] } else { [UInt32(55), UInt32(231), UInt32(231), UInt32(115), UInt32(200), UInt32(41), UInt32(10), UInt32(232), UInt32(134), UInt32(129)] } [7]|>{ lambdaParameter2387 : UInt32 => let var2391 : (UInt32) -> Bool = { lambdaParameter2394 : UInt32 => false }; ((var125 as UInt32) ?? match (var2406) {
        case caseVar2411 => 
            ();
            UInt32(59) / ((UInt32(144)) | 1)
        
        case _ => 
            var2406;
            ();
            lambdaParameter2387 - UInt32(1)
        
    })|>var2391 };
    ()
}

public func func2726(param2727 : Int64) : Unit { // block id: 2728

}


func func2693(param2694 : Unit) : Array<Unit> { // block id: 2695
    (match (UInt32(25) / ((UInt32(225)) | 1)) {
        case 176 => 
            var505;
            var2706
        
        case _ => 
            var2706
        
        case _ => 
            var242;
            ();
            if (var904) { Option<Option<((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), (Int8, Int16, Range<Int16>, Float64, Int8), Int16, String, Option<Unit>, Range<Int16>)>>.Some(var2720) } else { Option<Option<((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), (Int8, Int16, Range<Int16>, Float64, Int8), Int16, String, Option<Unit>, Range<Int16>)>>.None } 
        
    } ?? var2720);
    var var2730 : (Int64) -> Unit = { lambdaParameter2733 : Int64 =>  };
    let var2744 : Float32 = Float32(Float32(Float32(Float32(65.0))));
    match ((Option<Float32>.Some(Float32(-13.0)) ?? var2744)) {
        case 125.0 | 28.0 => 
            var1083;
            var var2754 : (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)) = ((Int8(Int8(-7))&127..=Int8(UInt8(Int8(123)))&127:(Int64(Int16(UInt8(156)))|1)), (UInt32(214)&127..=UInt32(119)&127:(-79)|1), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], (-111.0), (Int8(Int8(21)), Int16(Int16(13)), (Int16(-63)&127..=Int16(40)&127:(-120)|1), (-72.0), Int8(-67)));
            var2754;
            (-109) >> (((-2)) & 7)
        
        case -29.0 | -52.0 | -122.0 => 
            var173;
            var239;
            var976
        
        case _ => 
            ();
            var2706;
            var976
        
        case caseVar2793 => 
            ();
            var var2797 : Unit = ();
            var2797;
            (-106) % ((var976) | 1)
        
        case _ => 
            var976
        
    }|>var2730;
    match (match {
            case [true, false, true, false, true, true, true, true, true, true][5] => 
            if (true) { """
#%Vc>
6P]0l
""" } else { var2815 } 
            case [var904, false, true, true, var904, true, true, true, true, var904][0] => 
            ###"'P\\!Awr6a{W"###
            case _ => 
            ();
            if (var904) { var2815 } else { """
0QYIx
Eumgp
""" } 
        }) {
        case _ => 
            var239;
            let var2844 : Array<Option<Rune>> = Array<Option<Rune>>(10){ i => Option<Rune>.Some('5') };
            var var2880 : Rune = 'H';
            if (true) { var2844 } else { [var2262, Option<Rune>.Some('t'), Option<Rune>.None, var2262, Option<Rune>.Some(var2880), var2265, Option<Rune>.Some(var2880), Option<Rune>.Some(var2880), var2262, Option<Rune>.None] } ;
            var2890
        
    }
}



public func func3457(param3458 : Array<Unit>) : Array<Unit> { // block id: 3459
    var loopTimeVar3517 : Int64 = 0;
    do {
        loopTimeVar3517++;

    } while ((match ((var1003, (UInt32(241)&127..UInt32(130)&127:(-90)|1), ###",Sy[QIqD'p"###, var3467, (UInt32(213)&127..=UInt32(71)&127:50|1), (Int8(-12)&127..Int8(32)&127:((-82)|1)), ())) {
        case _ => 
            let var3479 : ?((Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), (Int8, Int16, Range<Int16>, Float64, Int8), Rune, ((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), ((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), (Int8, Int16, Range<Int16>, Float64, Int8), Int16, String, Option<Unit>, Range<Int16>), Range<Int64>), UInt32) = ([(), (), (), (), (), (), (), (), (), ()] as ((Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), (Int8, Int16, Range<Int16>, Float64, Int8), Rune, ((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), ((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), (Int8, Int16, Range<Int16>, Float64, Int8), Int16, String, Option<Unit>, Range<Int16>), Range<Int64>), UInt32));
            var3479;
            if (var904) { var884 } else { Aggregate324() } ;
            true
        
        case (_ : Int32,_,_,_,_,_ : Option<Rune>,_ : Array<Array<Unit>>) => 
            var3501;
            var3467
        
        case _ => 
            if (var904) { (var206&127..Int8(9)&127:(var976|1)) } else { (Int8(106)&127..=Int8(-74)&127:88|1) } ;
            true
        
    }) && loopTimeVar3517 < 100 ) ;
    let var3536 : (UInt32) -> Bool = func220;
    var var3565 : Unit = ();
    var var3586 : (UInt32) -> Bool = func220;
    if ((var3526 ?? true)) { // block id: 3530
        ();
        ();
        var2435
    } else if ((UInt32(134)|>var3536)) { // block id: 3539
        ();
        Option<Bool>.Some(true);
        var125 * UInt32(73)
    } else { // block id: 3546
        var3548;
        [var3565, var239, (), (), var3063, var505, (), (), (), ()];
        UInt32(138)
    } + if (true) { // block id: 3579
        87.0;
        UInt32(200);
        -var125
    } else if ((UInt32(117)|>var3586)) { // block id: 3589
        var var3592 : Float64 = 29.0;
        var3592 /= Float64((Int32(var3592)) | 1);
        var173;
        UInt32(3) << ((UInt32(68)) & 7)
    } else { // block id: 3599
        Class64<Option<Bool>, Option<UInt32>>();
        var2435
    };
    var var3624 : UInt16 = UInt16(UInt8(182));
    let var3636 : Interface67 = Class64<Option<Bool>, Option<UInt32>>();
    match (if (if (var3467) { // block id: 3606
            ();
            !var904
        } else if (var904) { // block id: 3611
            if (var904) { Option<Rune>.None } else { Option<Rune>.Some(var3617) } ;
            ();
            false
        } else { // block id: 3621
            var3624 &= UInt16(116);
            var3467
        }) { (Option<Interface67>.Some(var3636) ?? Class64<Option<Bool>, Option<UInt32>>()) } else { try { // block id: 3640
            var2435 &= var125;
            var var3648 : Float32 = Float32(-39.0);
            if (var3467) { Option<Float32>.Some(var3648) } else { Option<Float32>.Some(var3648) } ;
            if (var904) { var3636 } else { Class64<Option<Bool>, Option<UInt32>>() } 
        } finally { // block id: 3656
            Class64<Option<Bool>, Option<UInt32>>()
        } } ) {
        case caseVar3660 : Option<Interface67> => 
            var2890
        
        case _ => 
            var3063;
            var2189;
            if (false) { var2890 } else { [var3063, var239, (), var505, (), var242, var3565, var3063, (), ()] } 
        
        case _ : (Interface69, Range<UInt16>, UInt32, Range<UInt64>) => 
            [(), (), (), (), (), (), (), (), (), ()]
        
        case _ => 
            Option<Rune>.Some(var3617);
            let var3701 : Unit = ();
            [(), (), var239, var242, (), (), (), var239, var3565, var3701]
        
    }
}


func func3704(param3705 : Unit) : Array<Unit> { // block id: 3706
    let var3818 : (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)) = ((Int8(Int8(-67))&127..Int8(Int8(-85))&127:(Int64(Int16(Int16(117)))|1)), (UInt32(212)&127..UInt32(58)&127:50|1), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], 117.0, (Int8(3), Int16(UInt16(253)), (Int16(-60)&127..=Int16(-16)&127:105|1), (-112.0), Int8(UInt8(133))));
    let var3930 : Float64 = 75.0;
    func func3710() : Bool { // block id: 3711
        let var3721 : Float32 = Float32(Float32(Float32(96.0)));
        var loopTimeVar3940 : Int64 = 0;
        do {
            loopTimeVar3940++;
            var loopTimeVar3932 : Range<UInt64> = (UInt64(205)&127..UInt64(136)&127:(Int64(UInt8(Int8(59)))|1));
            for (i in loopTimeVar3932 where false) {
                var3930
            }
        } while (((try { // block id: 3919
            var3063;
            var125
        } finally { // block id: 3922
            -var125
        }|>{ lambdaParameter3716 : UInt32 => let var3732 : UInt64 = UInt64(Int64(Int8(UInt8(Int8(27))))); if (var3721 != match {
            case var904 => 
            var206 **= (Int8(-89) & 3);
            var3732;
            Float32(-61.0)
            case false => 
            Float32(2.0)
            case _ => 
            var2815;
            var3721
        }) { // block id: 3745
            var904
        } else if (match ((Int16(38)&127..var394&127:((-89)|1))) {
            case _ => 
                let var3755 : ?Array<Unit> = Option<Array<Unit>>.None;
                var3755;
                var904
            
        }) { // block id: 3758
            let var3779 : Float64 = (-86.0);
            if (var3467) { // block id: 3761
                var239;
                var2952 += UInt64(136)
            } else if (true) { // block id: 3767
                var2551;
                if (var3467) { (Int8(-64), var394, (var394&127..=Int16(-107)&127:((-107)|1)), var3779, Int8(26)) } else { var1429 } ;
                var505
            };
            true
        } else { // block id: 3785
            var loopTimeVar3791 : Int64 = 0;
            while ((var904) && loopTimeVar3791 < 100 ) {
                loopTimeVar3791++;
                Option<Range<Int64>>.None
            };
            [(), (), (), (), (), (), var239, var2935, var242, ()];
            if (false) { // block id: 3805
                true
            } else if (true) { // block id: 3808
                (var1003, ((var2435&127..=UInt32(121)&127:(var976|1)), var976, var3818, (UInt8(228)&127..UInt8(16)&127:(-63)|1)), [(), (), (), (), (), (), (), (), (), ()], UInt8(128));
                param3705;
                var976 >= (-5)
            } else { // block id: 3916
                var3467
            }
        } })) && loopTimeVar3940 < 100 ) ;
        var242;
        true && var904
    }
;
    var loopTimeVar3959 : Int64 = 0;
    while ((if (func3710()) { // block id: 3945
        ();
        var904 || true
    } else { // block id: 3950
        if (false) { var2551 } else { var2551 } ;
        false
    }) && loopTimeVar3959 < 100 ) {
        loopTimeVar3959++;
        continue
    };
    let var3998 : (Int64) -> Unit = func2726;
    let var4005 : Option<Unit> = Option<Unit>.Some(());
    var loopTimeVar4028 : Int64 = 0;
    var loopTimeVar4040 : Int64 = 0;
    if (((Option<Bool>.Some(var904) ?? var3467) && if (false) { // block id: 3972
        var3974;
        var904
    } else if (false) { // block id: 3991
        true
    } else { // block id: 3993
        var3467
    })) { [(var976|>var3998), func2726(var976), (var4005 ?? ()), (var4011 *= 108.0), while ((var904) && loopTimeVar4028 < 100 ) {
        loopTimeVar4028++;
        if (false) { (Int8(7), Int16(5), var1724, var4011, Int8(52)) } else { var1429 } 
    }, func2248(var4031), (), (), do {
        loopTimeVar4040++;
        ()
    } while ((false) && loopTimeVar4040 < 100 ) , func2248(Class64<Option<Bool>, Option<UInt32>>())] } else { var4044 } 
}

public func func878(param879 : Array<Option<Rune>>) : Unit { // block id: 880
    var var1006 : Array<Unit> = Array<Unit>(10){ i => () };
    var var1031 : Option<Unit> = Option<Unit>.None;
    let var1034 : Range<Int16> = (Int16(UInt8(165))&127..=Int16(123)&127:((-69)|1));
    var var1042 : UInt32 = UInt32(Int16(UInt16(144)));
    if (var884.func887(optionalParam888 : var910, namedParam897 : ((-17)&127..=(-113)&127:64|1))) { // block id: 963
        var242
    } else if (try { // block id: 966
        var var972 : UInt8 = UInt8(63);
        let var982 : (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)) = ((Int8(18)&127..Int8(-95)&127:(-102)|1), (UInt32(125)&127..=UInt32(152)&127:(-119)|1), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], Float64(Float32(-122.0)), (Int8(UInt8(176)), Int16(46), (Int16(-33)&127..Int16(UInt16(147))&127:(Int64(UInt16(43))|1)), Float64(Float32(3.0)), Int8(-59)));
        Option<((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), (Int8, Int16, Range<Int16>, Float64, Int8), Int16, String, Option<Unit>, Range<Int16>)>.Some((((var972&127..UInt8(59)&127:(var976|1)), ((UInt32(209)&127..UInt32(50)&127:(-109)|1), var976, var982, var1003), var1006, var972), (var206, Int16(41), (Int16(-77)&127..=var394&127:(12|1)), 31.0, var206), Int16(-91), "eN.azFDL}g", var1031, var1034));
        var1042 **= (UInt32(110) & 3);
        true
    } catch (e: Exception) { // block id: 1048
        (UInt8(191)&127..UInt8(212)&127:(-75)|1);
        var239;
        UInt32(31) <= UInt32(68)
    } finally { // block id: 1054
        true
    }) { // block id: 1056

    };
    let var1124 : ?Array<Unit> = (UInt16(Int8(-18)) as Array<Unit>);
    let var1150 : ??((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), (Int8, Int16, Range<Int16>, Float64, Int8), Int16, String, Option<Unit>, Range<Int16>) = ((Int32(8)&127..=Int32(UInt16(81))&127:((-75)|1)) as Option<((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), (Int8, Int16, Range<Int16>, Float64, Int8), Int16, String, Option<Unit>, Range<Int16>)>);
    let var1158 : ?((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), (Int8, Int16, Range<Int16>, Float64, Int8), Int16, String, Option<Unit>, Range<Int16>) = Option<((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), (Int8, Int16, Range<Int16>, Float64, Int8), Int16, String, Option<Unit>, Range<Int16>)>.Some((((UInt8(212)&127..UInt8(102)&127:119|1), ((UInt32(2)&127..UInt32(104)&127:(117|1)), 26, ((Int8(125)&127..=Int8(-71)&127:((-84)|1)), (UInt32(19)&127..=UInt32(133)&127:((-103)|1)), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], (-128.0), (Int8(65), Int16(-60), (Int16(74)&127..=Int16(44)&127:(-89)|1), 71.0, Int8(-44))), (UInt8(73)&127..UInt8(24)&127:(75|1))), [(), (), (), (), (), (), (), (), (), ()], UInt8(19)), (Int8(UInt8(220)), Int16(-1), (Int16(-17)&127..=Int16(112)&127:((-75)|1)), (-17.0), Int8(UInt8(223))), Int16(-24), "[D*dze'OlF", (() as Unit), (Int16(71)&127..=Int16(-127)&127:(Int64(UInt8(194))|1))));
    func func1067() : Option<((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), (Int8, Int16, Range<Int16>, Float64, Int8), Int16, String, Option<Unit>, Range<Int16>)> { // block id: 1068
        var242;
        var var1135 : Unit = ();
        let var1138 : Unit = ();
        if (((UInt64(4)&127..UInt64(231)&127:25|1) is UInt32)) { match ((-7)) {
            case caseVar1078 => 
                if (true) { var1083 } else { """
mW!\\c
`;,2^
""" } ;
                [(), var505, (), var242, var239, var505, (), var239, (), var242]
            
            case caseVar1099 : Int32 => 
                78 << ((var976) & 7);
                [var242, (), (), (), var242, var505, (), var239, var239, ()]
            
            case _ => 
                [(), (), (), (), (), (), (), (), (), ()]
            
        } } else { (var1124 ?? [var505, (), var239, var239, var242, var1135, var1138, var505, (), var242]) } [2];
        (var1150 ?? var1158)
    }
;
    let var1246 : UInt16 = UInt16(52);
    let var1272 : Array<Range<UInt16>> = [(UInt16(116)&127..=UInt16(127)&127:118|1), (UInt16(66)&127..UInt16(150)&127:(-88)|1), (UInt16(175)&127..UInt16(115)&127:79|1), (UInt16(135)&127..=UInt16(188)&127:3|1), (UInt16(19)&127..=UInt16(249)&127:6|1), (UInt16(175)&127..=UInt16(119)&127:103|1), (UInt16(35)&127..=UInt16(100)&127:82|1), (UInt16(249)&127..=UInt16(181)&127:(-1)|1), (UInt16(236)&127..=UInt16(102)&127:14|1), (UInt16(37)&127..=UInt16(88)&127:(-94)|1)];
    let var2182 : Float32 = Float32(Float32(Float32(122.0)));
    func func1060(param1061 : Array<Unit>, optionalParam1062 ! : Range<UInt64> = (UInt64(55)&127..UInt64(17)&127:(-73)|1)) : Range<UInt16> { // block id: 1064
        var var1252 : Range<UInt16> = (UInt16(225)&127..=UInt16(189)&127:(Int64(Int32(Int8(Int8(-63))))|1));
        match (func1067()) {
            case _ => 
                let var1226 : Array<Unit> = Array<Unit>(10){ i => () };
                var1226;
                if (true) { [(UInt16(79)&127..UInt16(144)&127:1|1), (UInt16(183)&127..UInt16(137)&127:(-125)|1), (UInt16(2)&127..=UInt16(47)&127:(-16)|1), (UInt16(41)&127..=UInt16(68)&127:23|1), (UInt16(137)&127..UInt16(186)&127:71|1), (UInt16(248)&127..=UInt16(164)&127:61|1), (UInt16(98)&127..=UInt16(120)&127:113|1), (UInt16(36)&127..=UInt16(48)&127:(-68)|1), (UInt16(117)&127..=UInt16(221)&127:(-89)|1), (UInt16(145)&127..=UInt16(167)&127:(-22)|1)] } else { [(UInt16(157)&127..=UInt16(118)&127:(-19)|1), (UInt16(199)&127..var1246&127:(44|1)), (UInt16(157)&127..UInt16(215)&127:(-110)|1), (UInt16(197)&127..=UInt16(249)&127:(-122)|1), var1252, (UInt16(178)&127..=UInt16(225)&127:22|1), var1252, (UInt16(59)&127..UInt16(164)&127:113|1), (UInt16(244)&127..=UInt16(101)&127:(-58)|1), var1252] } 
            
            case caseVar1267 => 
                let var1275 : Array<Range<UInt16>> = [(UInt16(189)&127..=UInt16(47)&127:(-83)|1), (UInt16(196)&127..UInt16(208)&127:22|1), (UInt16(237)&127..=UInt16(38)&127:(-125)|1), (UInt16(3)&127..UInt16(221)&127:51|1), (UInt16(59)&127..=UInt16(171)&127:(-63)|1), (UInt16(89)&127..UInt16(145)&127:3|1), (UInt16(87)&127..UInt16(54)&127:(-43)|1), (UInt16(200)&127..=UInt16(9)&127:(-38)|1), (UInt16(106)&127..UInt16(205)&127:(-79)|1), (UInt16(65)&127..UInt16(134)&127:59|1)];
                if (var904) { var1272 } else { var1275 } 
            
            case caseVar1279 => 
                var239;
                var125 >> ((UInt32(206)) & 7);
                var1272
            
            case _ => 
                ();
                var1272
            
        };
        Class64<Option<Bool>, Option<UInt32>>()|>{ lambdaParameter2145 : Interface68 => var var2165 : Range<Int8> = (Int8(-102)&127..=Int8(-25)&127:126|1); func1291<Float64>(try { // block id: 2149
            var206 <<= ((var206) & 7);
            if (false) { Class64<Option<Bool>, Option<UInt32>>() } else { Class64<Option<Bool>, Option<UInt32>>() } 
        } catch (_) { // block id: 2157
            if (var904) { (Int8(108)&127..Int8(82)&127:((-31)|1)) } else { var2165 } ;
            Class64<Option<Bool>, Option<UInt32>>()
        }) };
        if (try { // block id: 2173
            var239;
            false
        } catch (_) { // block id: 2176
            false
        }) { // block id: 2178
            Float32(-97.0) % Float32((Int32(var2182)) | 1);
            if (var904) { var2189 } else { (65, UInt8(139), (UInt16(206)&127..UInt16(133)&127:(-11)|1)) } 
        } else if (Aggregate324.var2209) { // block id: 2211
            var2189;
            ((-115), UInt8(162), var1252)
        } else { // block id: 2217
            var1246;
            var2189
        }[2]
    }
;
    try (resource = Class704()) { // block id: 1058
        func1060([(), (), var505, var505, (), var505, var239, (), (), ()]);
        (Option<Unit>.Some(var239) ?? ())
    } catch (_) { // block id: 2236
        let var2238 : Range<Int32> = (Int32(Int16(32))&127..Int32(Int8(Int8(70)))&127:(Int64(UInt8(215))|1));
        var2238;
        let var2448 : (Interface67) -> Unit = { lambdaParameter2451 : Interface67 =>  };
        Class64<Option<Bool>, Option<UInt32>>()|>var2448
    } finally { // block id: 2454

    };
    let var2506 : (UInt32) -> Bool = { lambdaParameter2509 : UInt32 => false };
    let var2522 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    let var2541 : Interface69 = Class64<Option<Bool>, Option<UInt32>>();
    let var2606 : Unit = ();
    func func2518<T0>() : Array<Array<Unit>> { // block id: 2519
        func func2525() : Array<Unit> { // block id: 2526
            var var2560 : Bool = false;
            var var2645 : Unit = ();
            match (if (false) { // block id: 2531
                    var242
                } else if (true) { // block id: 2534
                    var505;
                    var505
                }) {
                case _ : (Range<UInt8>, Range<UInt32>, String, Bool, Range<UInt32>, Range<Int8>, Unit) => 
                    var2541;
                    var239;
                    [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]]
                
                case () | () | () => 
                    if (false) { var2551 } else { Class64<Option<Bool>, Option<UInt32>>() } ;
                    [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]]
                
                case _ => 
                    var2560 ||= false;
                    if (var904) { [[(), (), (), (), (), (), (), (), (), ()], [(), var242, (), var242, var239, (), var239, var505, (), var239], [var242, var242, var239, (), (), var505, (), (), (), var242], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [var239, var242, var505, (), var239, var505, (), var242, (), var505], [(), var239, var2606, var2606, (), (), var242, (), var239, ()], [(), (), (), (), (), (), (), (), (), ()], [(), var239, (), (), var2606, (), var239, (), var2606, var239], [(), (), (), (), (), (), (), (), (), ()]] } else { [[(), (), var2606, (), var239, (), (), (), (), ()], [(), var505, (), var2645, var242, (), var2606, var239, (), var2606], [(), (), (), (), (), (), (), (), (), ()], var2522, [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [var505, (), (), (), var2645, (), var242, var2606, (), var242], var2522, [var505, (), var2606, var2606, var239, (), (), (), (), ()], [(), (), var2645, var2606, (), var2606, (), (), (), var239]] } 
                
            }[3]
        }
;
        var var3088 : ((Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), (Int8, Int16, Range<Int16>, Float64, Int8), Rune, ((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), ((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), (Int8, Int16, Range<Int16>, Float64, Int8), Int16, String, Option<Unit>, Range<Int16>), Range<Int64>), UInt32) = (((UInt32(UInt32(69))&127..UInt32(Int8(37))&127:(Int64(109)|1)), (-111), ((Int8(-30)&127..=Int8(46)&127:126|1), (UInt32(203)&127..=UInt32(161)&127:((-93)|1)), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], Float64(44.0), (Int8(5), Int16(-4), (Int16(75)&127..Int16(123)&127:22|1), (-112.0), Int8(36))), (UInt8(134)&127..=UInt8(Int8(5))&127:(Int64(UInt32(105))|1))), (Int8(UInt8(UInt8(246))), Int16(-100), (Int16(-99)&127..=Int16(75)&127:3|1), 69.0, Int8(UInt8(110))), '6', (((UInt8(162)&127..=UInt8(98)&127:83|1), ((UInt32(134)&127..UInt32(53)&127:(103|1)), 31, ((Int8(33)&127..Int8(86)&127:(-75)|1), (UInt32(228)&127..UInt32(111)&127:(-66)|1), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], 60.0, (Int8(81), Int16(-60), (Int16(54)&127..=Int16(-101)&127:(-53)|1), 27.0, Int8(-82))), (UInt8(37)&127..=UInt8(43)&127:(-11)|1)), [(), (), (), (), (), (), (), (), (), ()], UInt8(22)), (((UInt8(35)&127..UInt8(153)&127:(119|1)), ((UInt32(44)&127..UInt32(100)&127:((-114)|1)), 13, ((Int8(115)&127..Int8(23)&127:((-18)|1)), (UInt32(4)&127..=UInt32(117)&127:(20|1)), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], (-44.0), (Int8(96), Int16(-101), (Int16(-63)&127..Int16(-110)&127:(54|1)), (-44.0), Int8(-39))), (UInt8(141)&127..=UInt8(208)&127:(-15)|1)), [(), (), (), (), (), (), (), (), (), ()], UInt8(121)), (Int8(70), Int16(1), (Int16(-40)&127..Int16(96)&127:(9|1)), 9.0, Int8(-103)), Int16(81), """
\\z]-v
0=pw;
""", (Class704() as Unit), (Int16(-58)&127..Int16(-22)&127:(13|1))), (53&127..72&127:52|1)), UInt32(Int8(103)));
        var var4057 : (Unit) -> Array<Unit> = func3704;
        let var4064 : Range<UInt16> = (UInt16(Int8(UInt8(83)))&127..=UInt16(173)&127:(3|1));
        [var2522, func2525(), (match ([(), (), (), (), (), (), (), (), (), ()]) {
            case _ : Int8 => 
                var2929++;
                Option<Array<Unit>>.Some([var239, var2935, var2606, (), var242, (), var239, (), var242, var2935]);
                ()
            
            case _ => 
                ();
                ();
                var2952 <<= ((var2952) & 7)
            
        }|>{ lambdaParameter2894 : Unit => let var2917 : (Unit) -> Array<Unit> = func2693; if ((Float32(-102.0) > match (UInt16(109)) {
            case 35 => 
                Float32(-29.0)
            
            case _ => 
                var976 <<= ((74) & 7);
                let var2911 : Range<UInt64> = (UInt64(28)&127..=UInt64(106)&127:(-81)|1);
                var2911;
                var2182
            
        })) { var2890 } else { ((var2435 ^= var2435)|>var2917) }  }), try { // block id: 2960
            var2935;
            var2935;
            [var239, var239, var239, var2606, var505, (), (), var2935, var2935, ()]
        } catch (e: Exception) { // block id: 2974
            var2541;
            [(), (), (), (), (), (), (), (), (), ()]
        } finally { // block id: 2977
            var394;
            [var239, (), (), (), (), var505, (), (), (), ()]
        }, var2993[2], func2525(), match ((UInt64(54)&127..=UInt64(141)&127:62|1)) {
            case _ : Option<UInt32> => 
                Int8(87);
                var var3012 : Unit = ();
                var var3019 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
                if (var904) { [(), var242, (), (), (), var3012, var239, (), var505, ()] } else { var3019 } 
            
            case _ => 
                var2522
            
            case _ : UInt64 => 
                "/`$OHRG)_,";
                if (true) { var2522 } else { var2522 } 
            
            case caseVar3035 => 
                var2935;
                [(), (), (), (), (), (), (), (), (), ()]
            
            case _ => 
                (var394&127..Int16(55)&127:((-40)|1));
                if (var904) { [(), (), (), (), (), (), (), (), (), ()] } else { [(), (), (), (), (), (), (), (), (), ()] } 
            
        }, try { // block id: 3050
            ();
            -89.0;
            [var505, (), var239, var505, (), (), var239, var3063, var239, var239]
        } catch (e: Exception) { // block id: 3067
            ();
            let var3070 : Array<Unit> = Array<Unit>(10){ i => () };
            var3070
        } finally { // block id: 3082
            (var2435&127..var2435&127:(var976|1));
            var3088;
            [var242, var505, (), (), (), var242, var3063, (), (), ()]
        }, try { // block id: 3350
            let var3358 : (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)) = ((Int8(6)&127..Int8(8)&127:(-65)|1), (UInt32(94)&127..=UInt32(221)&127:(-104)|1), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], Float64(Float32(-50.0)), (Int8(-59), Int16(UInt16(UInt16(199))), (Int16(-15)&127..=Int16(54)&127:3|1), (-31.0), Int8(Int8(-3))));
            ((UInt32(136)&127..=UInt32(126)&127:((-58)|1)), 85, var3358, (UInt8(166)&127..UInt8(146)&127:(-89)|1));
            var var3437 : UInt64 = UInt64(86);
            var3437 -= var3437;
            var2890
        } catch (e: Exception) { // block id: 3441
            [(), (), (), (), (), (), (), (), (), ()]
        } finally { // block id: 3443
            [(), var2935, (), var242, var2606, var239, (), var239, (), ()]
        }, (match ((56, UInt8(175), var4064)) {
            case (_ : Range<Int8>,_,caseVar4073 : (Int8, Int16, Range<Int16>, Float64, Int8)) => 
                ();
                'H';
                var var4079 : Int32 = Int32(UInt32(UInt8(UInt8(194))));
                var4079 |= var4079
            
            case _ => 
                if (var3467) { var1003 } else { (UInt8(29)&127..UInt8(241)&127:37|1) } ;
                var3467 &&= var3467;
                var239
            
        }|>(var4057~>func3457))]
    }
;
    let var4143 : ((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), (Int8, Int16, Range<Int16>, Float64, Int8), Int16, String, Option<Unit>, Range<Int16>) = (((UInt8(132)&127..UInt8(Int8(-61))&127:(Int64(UInt16(28))|1)), ((UInt32(50)&127..UInt32(211)&127:26|1), Int64(UInt8(246)), ((Int8(20)&127..=Int8(-31)&127:101|1), (UInt32(64)&127..=UInt32(138)&127:32|1), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], (-15.0), (Int8(39), Int16(-19), (Int16(36)&127..=Int16(38)&127:((-48)|1)), 26.0, Int8(-27))), (UInt8(43)&127..=UInt8(253)&127:(111|1))), [(), (), (), (), (), (), (), (), (), ()], UInt8(UInt8(120))), (Int8(-100), Int16(Int16(-112)), (Int16(UInt16(137))&127..Int16(27)&127:(Int64(Int8(78))|1)), (-87.0), Int8(Int8(Int8(-17)))), Int16(6), ###"1P15(}ZBpk"###, ((Int32(-110)&127..=Int32(-61)&127:(-104)|1) as Unit), (Int16(-8)&127..=Int16(7)&127:91|1));
    var loopTimeVar4298 : Int64 = 0;
    do {
        loopTimeVar4298++;
        func func2462() : Option<Array<Unit>> { // block id: 2463
            [UInt32(154), UInt32(180), UInt32(85), UInt32(122), UInt32(166), UInt32(177), UInt32(97), UInt32(154), UInt32(46), UInt32(99)];
            var var2499 : Float64 = (-119.0);
            try { // block id: 2466
                Option<Unit>.Some(()).getOrThrow();
                UInt16(222)
            } catch (_) { // block id: 2471
                if (false) { // block id: 2474
                    var2477 >>= ((Int32(17)) & 7);
                    if (false) { var2265 } else { Option<Rune>.None } ;
                    var1246 | var1246
                } else if (true) { // block id: 2488
                    var2477 /= ((var2477) | 1);
                    var1083;
                    UInt16(172) & var1246
                } else { // block id: 2496
                    var242;
                    var2499;
                    UInt16(205)
                }
            };
            func func2514() : String { // block id: 2515
                var var4118 : Bool = (Int64(UInt32(Int8(UInt8(153)))) is Option<((Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), (Int8, Int16, Range<Int16>, Float64, Int8), Rune, ((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), ((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), (Int8, Int16, Range<Int16>, Float64, Int8), Int16, String, Option<Unit>, Range<Int16>), Range<Int64>), UInt32)>);
                match (func2518<Option<Bool>>()) {
                    case _ => 
                        var4100 -= var394;
                        var1083
                    
                    case _ : Option<((Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), (Int8, Int16, Range<Int16>, Float64, Int8), Rune, ((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), ((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), (Int8, Int16, Range<Int16>, Float64, Int8), Int16, String, Option<Unit>, Range<Int16>), Range<Int64>), UInt32)> => 
                        var2435 *= var125;
                        ();
                        ###"v[pHB)N9S\\"###
                    
                    case caseVar4114 : Range<Int32> => 
                        if (var4118) { "$m|1#or8QY" } else { var1083 } 
                    
                    case _ => 
                        ();
                        var1083
                    
                    case _ => 
                        UInt16(85);
                        var2815
                    
                }
            }
;
            ((if ((var125|>var2506)) { func2514() } else { match (var2296) {
                case caseVar4139 => 
                    Option<((Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8), (Int8, Int16, Range<Int16>, Float64, Int8), Int16, String, Option<Unit>, Range<Int16>)>.Some(var4143);
                    var2435 -= UInt32(204);
                    var1083
                
                case _ => 
                    var1083
                
            } } ) as Array<Unit>)
        }
;
        func2462();
        var loopTimeVar4288 : Range<UInt64> = (UInt64(UInt8(120))&127..UInt64(UInt32(Int16(26)))&127:(Int64(Int16(-79))|1));
        for (i in loopTimeVar4288 where true) {
            var239;
            var3063
        }
    } while (([true, false, true, true, false, true, true, false, false, true][0]) && loopTimeVar4298 < 100 ) 
}



public func func2726() : Option<Rune> { // block id: 776
    let var4468 : ?Bool = Option<Bool>.None;
    try (resource = Class704()) { // block id: 778
        var782[2];
        let var4304 : Array<Option<Rune>> = [(((Int8(-86)&127..Int8(-37)&127:((-23)|1)), (UInt32(100)&127..=UInt32(62)&127:((-112)|1)), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], Float64(Float32(98.0)), (Int8(87), Int16(71), (Int16(-14)&127..Int16(-112)&127:(19|1)), 116.0, Int8(109))) as Rune), Option<Rune>.Some('E'), Option<Rune>.Some('N'), Option<Rune>.None, (Option<Range<Int64>>.None as Rune), Option<Rune>.None, (UInt64(UInt32(105)) as Rune), Option<Rune>.None, Option<Rune>.None, Option<Rune>.None];
        func func797(optionalParam798 ! : (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)) = ((Int8(9)&127..Int8(32)&127:101|1), (UInt32(167)&127..UInt32(245)&127:(-77)|1), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], 11.0, (Int8(28), Int16(UInt16(Int16(-15))), (Int16(-80)&127..=Int16(77)&127:(-122)|1), (-81.0), Int8(-36)))) : Unit { // block id: 872
            [(), (), (), (), (), (), (), (), (), ()][5];
            if ((var2890 is (Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8))) { var4304 } else { (if (var3467) { [var2262, Option<Rune>.Some('W'), Option<Rune>.Some('o'), Option<Rune>.Some(var3617), var2265, Option<Rune>.None, Option<Rune>.None, var2262, Option<Rune>.None, var2262] } else { var4304 } ) } |>func878
        }
;
        func797();
        ()
    } finally { // block id: 4440
        var var4447 : ?Interface67 = ((Int64(UInt16(UInt8(196))), UInt8(21), (UInt16(UInt8(247))&127..UInt16(UInt8(236))&127:(53|1))) as Interface67);
        (var4447 ?? var4031);
        var loopTimeVar4465 : Int64 = 0;
        while ((false) && loopTimeVar4465 < 100 ) {
            loopTimeVar4465++;

        };
        match (var4468) {
            case _ => 
                var2435 /= ((var2435) | 1);
                (UInt32(172)&127..UInt32(99)&127:24|1);
                var3063
            
        }
    };
    let var4479 : Option<Unit> = (Option<Range<Int64>>.Some((Int64(UInt64(111))&127..Int64(UInt8(138))&127:(Int64(UInt32(203))|1))) as Unit);
    match (var4479) {
        case caseVar4491 => 
            var3063
        
        case caseVar4496 => 
            ();
            ();
            ()
        
        case _ : UInt32 => 
            var2935;
            var239
        
        case _ => 
            ()
        
    };
    match (if (var3467 && var3467) { // block id: 4514
            ();
            if (true) { var4519 } else { Option<Interface67>.None } ;
            var var4524 : Range<Int8> = (Int8(38)&127..=Int8(23)&127:(-64)|1);
            (var4524, var976, Aggregate324(), var1083, (74&127..var976&127:(var976|1)))
        } else { // block id: 4533
            var242;
            let var4539 : Range<Int8> = (Int8(101)&127..=Int8(-33)&127:21|1);
            if (true) { (var4539, var976, Aggregate324(var1429), "m\\VGe|6QOA", var2296) } else { var782 } 
        }) {
        case (caseVar4564 : Interface68,_,_ : Class704,caseVar4565,caseVar4566 : Int64) => 
            var4569;
            if (true) { Option<Rune>.Some('J') } else { Option<Rune>.None } 
        
        case (caseVar4579 : Interface69,_,_ : Range<UInt8>,_,caseVar4580) => 
            Option<Rune>.Some('X')
        
        case _ => 
            var2296;
            var206;
            Option<Rune>.None
        
    }
}

public func func320(param321 : Interface67) : (Int8, Int16, Range<Int16>, Float64, Int8) { // block id: 322
    let var4616 : (Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8) = ((UInt8(91)&127..=UInt8(217)&127:(-27)|1), ((UInt32(197)&127..=UInt32(111)&127:(-8)|1), Int64(Int8(-1)), ((Int8(125)&127..=Int8(37)&127:(-60)|1), (UInt32(0)&127..UInt32(196)&127:(116|1)), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], Float64((-6.0)), (Int8(113), Int16(100), (Int16(73)&127..Int16(-78)&127:((-117)|1)), (-106.0), Int8(-32))), (UInt8(219)&127..=UInt8(178)&127:(-31)|1)), [(), (), (), (), (), (), (), (), (), ()], UInt8(134));
    func func753<T0, T1, T2>(namedParam754 ! : UInt16, namedParam755 ! : Range<Int64>) : Array<Unit> { // block id: 756
        let var761 : Class704 = Class704();
        try (resource = Class704()) { // block id: 758
            var761.var764
        } finally { // block id: 766
            func func768(namedParam769 ! : Option<(Int8, Int16, Range<Int16>, Float64, Int8)>, namedParam770 ! : (Range<UInt8>, (Range<UInt32>, Int64, (Range<Int8>, Range<UInt32>, Array<Array<Unit>>, Float64, (Int8, Int16, Range<Int16>, Float64, Int8)), Range<UInt8>), Array<Unit>, UInt8)) : Unit { // block id: 771
                match (match (func2726()) {
                        case caseVar4591 : Array<UInt32> => 
                            ();
                            var4011;
                            var2952 % ((var2952) | 1)
                        
                        case _ : Interface69 => 
                            var206 *= Int8(77);
                            UInt64(243)
                        
                        case _ => 
                            -UInt64(117)
                        
                    }) {
                    case _ => 
                        "1[cb<t*DZq";
                        var3467
                    
                };
                ()
            }
;
            func768(namedParam769 : var3501, namedParam770 : var4616);
            var4100 |= var4100
        };
        try { // block id: 4658
            if (true) { var2890 } else { [(), (), (), (), var242, (), (), (), (), var2935] } 
        } catch (e: Exception) { // block id: 4673
            match (var4676) {
                case _ : (Interface69, Range<UInt16>, UInt32, Range<UInt64>) => 
                    if (true) { [var3063, (), var505, var2935, var242, (), var242, var242, (), ()] } else { [(), (), (), (), (), (), (), (), (), ()] } 
                
                case _ => 
                    var206 += Int8(125);
                    [(), (), (), (), (), (), (), (), (), ()]
                
            }
        }
    }
;
    let var4772 : Range<UInt16> = (UInt16(Int16(29))&127..UInt16(197)&127:(40|1));
    Aggregate324.func329(optionalParam330 : func753<Range<Int16>, Range<Int64>, Array<Unit>>(namedParam754 : var4752, namedParam755 : (var976&127..var976&127:(96|1))), optionalParam342 : match (var173) {
        case (caseVar4764,caseVar4765 : Unit,_,_,caseVar4766,_,_) => 
            var976 ^= 11;
            var4772
        
        case _ => 
            (UInt16(84)&127..UInt16(210)&127:(-94)|1)
        
    })
}

public func func312(param313 : Int8, optionalParam314 ! : Interface69 = Class64<Option<Bool>, Option<UInt32>>(), namedParam316 ! : Range<UInt8>) : (Int8, Int16, Range<Int16>, Float64, Int8) { // block id: 317
    var239;
    var4031|>func320
}



main(): Int64 {
    try {
        let var23 : Array<Option<Rune>> = [Option<Rune>.Some('P'), Option<Rune>.Some('E'), ((Int8(-73)&127..Int8(60)&127:111|1) as Rune), Option<Rune>.Some('X'), Option<Rune>.Some('H'), ((23&127..101&127:45|1) as Rune), Option<Rune>.Some('1'), ([Option<Rune>.Some('P'), (UInt8(138) as Rune), Option<Rune>.None, (UInt64(191) as Rune), (Int16(119) as Rune), Option<Rune>.None, (UInt32(103) as Rune), (Int8(96) as Rune), Option<Rune>.None, Option<Rune>.Some('K')] as Rune), (104.0 as Rune), Option<Rune>.Some('1')];
        let var71 : Class64<Option<Bool>, Option<UInt32>> = Class64<Option<Bool>, Option<UInt32>>();
        (var23[8] ?? var71.var74);
        var loopTimeVar81 : Range<UInt64> = (UInt64(222)&127..=UInt64(Int32(115))&127:(Int64(Int8(88))|1));
        for (i in loopTimeVar81 where (var71 is Int16)) {
            ()
        };
        Aggregate89<UInt16>.func94(namedParam95 : UInt16(223), optionalParam96 : Class64<Option<Bool>, Option<UInt32>>(var4752, false), namedParam98 : ())
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_unexpected_declaration_in_scope
// ASSERT: scan parse_expected_left_brace
// ASSERT: scan parse_expected_case


