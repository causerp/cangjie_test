/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output


var var55 : Bool = (Class6() is UInt8)
public var var61 : UInt64 = UInt64(66)
var var124 : Int8 = Int8(UInt8(Int8(72)))
var var140 : Float32 = Float32(Float32(Float32(Float32(Float32(-101.0)))))
var var221 : UInt8 = UInt8(156)
let var236 : Unit = ()
public let var393 : Range<UInt64> = (UInt64(31)&127..UInt64(75)&127:(-11)|1)
let var423 : ?(Unit, Range<Int8>) = ([(UInt64(Int8(62)) as (Unit, Range<Int8>)), ((Int16(70)&127..=Int16(-118)&127:(-94)|1) as (Unit, Range<Int8>)), Option<(Unit, Range<Int8>)>.None, Option<(Unit, Range<Int8>)>.None, Option<(Unit, Range<Int8>)>.None, ('h' as (Unit, Range<Int8>)), Option<(Unit, Range<Int8>)>.None, ((Int8(-68)&127..=Int8(-52)&127:(-27)|1) as (Unit, Range<Int8>)), (Option<(Unit, Range<Int8>)>.None as (Unit, Range<Int8>)), (Class6() as (Unit, Range<Int8>))] as (Unit, Range<Int8>))
public let var550 : Array<Bool> = [true, false, false, true, false, false, false, false, true, true]
public let var689 : Array<Option<Bool>> = Array<Option<Bool>>(10){ i => ((Int32(17)&127..=Int32(-29)&127:((-114)|1)) as Bool) }
let var825 : ?Bool = ([(() is Int64), (((UInt8(2)&127..UInt8(15)&127:(20|1)), UInt32(172), Float32(-8.0), (Int8(-71)&127..Int8(-68)&127:(40|1)), ()) is String), true, ((Int8(61)&127..=Int8(-127)&127:((-79)|1)) is Interface10), false, (Class6() is Option<(Unit, Range<Int8>)>), (Float32(Float32(-90.0)) is UInt32), (Class6() is Float32), (Int32(Int8(-28)) is Option<Option<Bool>>), false] as Bool)
var var867 : Int8 = Int8(UInt8(23))
var var910 : Array<Array<Bool>> = [[true, false, true, true, false, false, false, false, false, true], [false, true, true, false, true, true, true, false, true, false], [true, false, false, false, true, false, false, true, true, true], [false, true, true, false, true, false, true, false, true, true], [true, false, true, true, false, true, false, false, false, true], [false, true, true, true, true, false, true, false, true, false], [false, false, false, true, false, true, false, false, false, true], [true, true, true, false, false, true, true, false, true, true], [true, false, false, true, false, false, false, false, false, false], [true, false, true, false, false, false, true, true, true, false]]
var var1046 : Range<UInt8> = (UInt8(79)&127..=UInt8(194)&127:((-41)|1))
public var var1066 : Unit = ()
public var var1107 : ((Unit, Range<Int8>), Int32, Range<UInt64>, Range<UInt32>, Int64) = (((), (Int8(-32)&127..=Int8(-89)&127:(Int64((-114))|1))), Int32(UInt32(UInt8(Int8(90)))), (UInt64(117)&127..UInt64(Int16(-98))&127:(Int64(UInt8(229))|1)), (UInt32(146)&127..UInt32(UInt32(Int16(-91)))&127:(44|1)), Int64(60))
let var1150 : (Unit, Range<Int8>) = ((), (Int8(30)&127..Int8(Int8(UInt8(115)))&127:(Int64(Int32(-102))|1)))
var var1185 : ?(Int64, Int32, Bool, Float64, Range<UInt64>, Int64, Array<Float32>) = (Int8(-5) as (Int64, Int32, Bool, Float64, Range<UInt64>, Int64, Array<Float32>))
let var1189 : (Int64, Int32, Bool, Float64, Range<UInt64>, Int64, Array<Float32>) = (Int64(Int32(Int16(-51))), Int32(Int16(77)), true, (-72.0), (UInt64(212)&127..UInt64(188)&127:(124|1)), Int64(UInt8(UInt8(145))), [Float32(7.0), Float32(93.0), Float32(120.0), Float32(-61.0), Float32(50.0), Float32(114.0), Float32(-81.0), Float32(116.0), Float32(-44.0), Float32(56.0)])
public let var1219 : Unit = ()
public var var1266 : Unit = ()
let var1283 : Aggregate1279 = Aggregate1279()
public let var1331 : (UInt64, Option<Bool>, (Unit, Range<Int8>), Array<Array<Bool>>) = (UInt64(UInt8(UInt8(152))), Option<Bool>.None, ((), (Int8(Int8(-62))&127..=Int8(111)&127:(Int64(Int32(-7))|1))), [[false, false, true, false, false, true, false, true, true, true], [false, false, true, false, true, false, true, true, false, false], [true, true, false, true, false, false, false, true, false, true], [false, false, false, true, false, false, true, false, true, true], [false, false, true, false, false, false, true, true, true, true], [false, true, true, false, true, false, true, true, false, true], [true, false, true, true, true, true, true, false, true, true], [true, false, false, true, false, false, false, true, false, true], [false, true, false, true, true, false, false, false, false, true], [true, true, true, true, false, false, false, true, false, false]])
var var1361 : UInt16 = UInt16(243)
let var1368 : ??Bool = Option<Option<Bool>>.None
public var var1382 : ??Bool = Option<Option<Bool>>.None
var var1388 : Int32 = Int32(-97)
public let var1392 : Int64 = (-50)
var var1480 : Int64 = (-39)
public let var1544 : (UInt64, Option<Bool>, (Unit, Range<Int8>), Array<Array<Bool>>) = (UInt64(UInt8(60)), Option<Bool>.None, ((), (Int8(48)&127..Int8(-64)&127:(-40)|1)), [[true, false, true, true, false, false, false, false, true, false], [false, false, true, false, false, true, true, true, false, true], [true, false, true, true, true, false, false, true, false, true], [false, true, false, false, false, false, true, true, true, true], [false, false, false, false, true, true, false, false, false, true], [true, false, true, false, false, false, true, true, false, true], [false, true, false, false, true, false, true, false, true, false], [false, false, true, true, false, true, false, false, true, true], [true, false, true, true, false, true, true, false, true, true], [true, false, true, true, false, false, true, true, true, true]])
public let var1557 : Array<Option<(Unit, Range<Int8>)>> = [(Option<Unit>.None as (Unit, Range<Int8>)), (UInt64(126) as (Unit, Range<Int8>)), (Aggregate1279() as (Unit, Range<Int8>)), ([Option<(Unit, Range<Int8>)>.None, Option<(Unit, Range<Int8>)>.None, (Int32(-48) as (Unit, Range<Int8>)), ((-91.0) as (Unit, Range<Int8>)), (Option<Class6>.None as (Unit, Range<Int8>)), Option<(Unit, Range<Int8>)>.None, Option<(Unit, Range<Int8>)>.None, (Option<Option<Unit>>.None as (Unit, Range<Int8>)), Option<(Unit, Range<Int8>)>.None, ((UInt64(206)&127..UInt64(14)&127:(41|1)) as (Unit, Range<Int8>))] as (Unit, Range<Int8>)), Option<(Unit, Range<Int8>)>.None, ((((UInt8(227)&127..=UInt8(180)&127:82|1), UInt32(98), Float32(-77.0), (Int8(-89)&127..Int8(9)&127:(59|1)), ()) as (Unit, Range<Int8>)) as (Unit, Range<Int8>)), ([(), (), (), (), (), (), (), (), (), ()] as (Unit, Range<Int8>)), Option<(Unit, Range<Int8>)>.None, Option<(Unit, Range<Int8>)>.None, Option<(Unit, Range<Int8>)>.None]
public var var1657 : Bool = ((("96;*D`$.J|", (((), (Int8(-109)&127..Int8(-64)&127:((-74)|1))), Int32(-57), (UInt64(243)&127..UInt64(174)&127:(-8)|1), (UInt32(216)&127..UInt32(5)&127:(-51)|1), 28), (Int16(-34)&127..Int16(-31)&127:((-81)|1)), UInt8(Int8(95))) as ((UInt64, Option<Bool>, (Unit, Range<Int8>), Array<Array<Bool>>), UInt64)) is Interface12)
let var1690 : Bool = true
public let var1751 : ?Class6 = (((UInt32(27)&127..UInt32(175)&127:(Int64(UInt16(203))|1)) as (Int64, Int32, Bool, Float64, Range<UInt64>, Int64, Array<Float32>)) as Class6)
public let var1843 : Range<Int8> = (Int8(93)&127..=Int8(-29)&127:(19|1))
public let var1869 : String = """
`[MXV
@1(:.
"""
public let var1899 : ?Bool = Option<Bool>.None
let var2129 : Bool = true
var var2207 : Int64 = Int64(Int32(Int8(-75)))
let var2227 : (Range<UInt8>, UInt32, Float32, Range<Int8>, Unit) = ((UInt8(225)&127..UInt8(UInt8(170))&127:((-72)|1)), UInt32(49), Float32(-8.0), (Int8(-107)&127..=Int8(30)&127:14|1), ())
public let var2301 : Bool = false
public let var2404 : Class6 = Class6()
public var var2426 : Int32 = Int32(UInt8(UInt8(222)))
public var var2512 : UInt16 = UInt16(UInt8(144))
public let var2647 : Interface12 = Class6()
let var2660 : UInt64 = UInt64(193)
public let var2938 : Int16 = Int16(-39)
var var2947 : ?Unit = ([true, (Option<Option<Bool>>.None is UInt16), false, ((UInt64(200), Option<Bool>.None, ((), (Int8(31)&127..Int8(-74)&127:113|1)), [[false, false, false, false, false, true, false, false, true, false], [false, true, false, false, false, false, true, false, false, false], [true, true, false, true, true, true, true, false, true, false], [false, true, true, true, false, false, true, true, true, true], [true, true, true, false, true, false, false, false, true, true], [true, true, true, true, false, true, false, false, false, false], [true, false, true, false, false, true, true, false, false, true], [false, false, false, true, false, true, false, false, false, false], [true, false, true, false, true, false, false, true, false, false], [true, true, true, false, false, true, false, false, false, true]]) is (Option<Unit>) -> Option<(Int64, Int32, Bool, Float64, Range<UInt64>, Int64, Array<Float32>)>), (Class6() is UInt8), false, (Class6() is Option<Bool>), true, false, ((UInt8(3)&127..=UInt8(218)&127:(49|1)) is (Range<UInt8>, UInt32, Float32, Range<Int8>, Unit))] as Unit)
var var3053 : UInt32 = UInt32(34)
var var3130 : ??Bool = (Class6() as Option<Bool>)
let var3140 : Bool = (UInt32(UInt8(UInt8(245))) is Array<Unit>)
let var3245 : Array<Option<Bool>> = Array<Option<Bool>>(10){ i => Option<Bool>.None }
var var3322 : Int16 = Int16(47)
public let var3421 : ?Array<Float32> = (Class6() as Array<Float32>)
let var3436 : Option<Array<String>> = (Option<Bool>.None as Array<String>)
let var3510 : Float64 = Float64(Float64((-15.0)))
var var3599 : Array<Float32> = [Float32(-104.0), Float32(-122.0), Float32(-116.0), Float32(Float32(Float32(Float32(81.0)))), Float32(Float32(Float32(Float32(-45.0)))), Float32(-81.0), Float32(-96.0), Float32(-15.0), Float32(Float32(-104.0)), Float32(Float32(Float32(Float32(125.0))))]
public interface Interface12 {

}

public interface Interface11<T0, T1> <: Interface12 {

}

public interface Interface10 <: Interface11<Option<Unit>, Option<Option<Bool>>> & Interface12 {

}

public interface Interface9<T0> <: Interface10 where T0 <: Array<Option<(Unit, Range<Int8>)>> {

}

public open class Class6 <: Interface9<Array<Option<(Unit, Range<Int8>)>>> & Interface12 & Resource {
    public init() { // block id: 8

    }
;
    static let var15 : Int16 = Int16(94);
    public static let var557 : (Unit, Range<Int8>) = ((), (Int8(-62)&127..=Int8(-110)&127:((-62)|1)));
    private static var var1788 : Float64 = (-43.0);
    public init(param1776 : Range<UInt32>, param1777 : Range<UInt16>) { // block id: 1778
        let var1826 : (Unit, Range<Int8>) = ((), (Int8(-59)&127..Int8(UInt8(Int8(10)))&127:(Int64(Int8(-7))|1)));
        if ((var1150 is Aggregate1279)) { try { // block id: 1785
            var1788 /= Float64((Int32(var1788)) | 1);
            (UInt32(158)&127..=UInt32(176)&127:102|1);
            let var1796 : String = "SaaA2KH37e";
            if (true) { [var1796, ###"_>s&6)iE${var1796})${var1796}W"###, var1796, var1796, "$${var1796}aM<Oa{9I$}", "jY'Zy1sZ${var1796}m_", """
S7OeO
0${var1796}HrNJ
""", var1796, var1796, var1796] } else { ["Ns${var1796}8e${var1796}9;H1jE", var1796, var1796, var1796, """
Y\"z}s
Lq${var1796}=(P${var1796}
""", "5>NZ9~|]A${var1796}=", "JH1uStbN${var1796}R$", var1796, var1796, "H-lvJ${var1796}nVk${var1796}Vd"] } 
        } catch (e: Exception) { // block id: 1818
            if (true) { var1557 } else { [var423, Option<(Unit, Range<Int8>)>.Some(var1826), Option<(Unit, Range<Int8>)>.None, Option<(Unit, Range<Int8>)>.Some(var557), Option<(Unit, Range<Int8>)>.Some(((), var1843)), Option<(Unit, Range<Int8>)>.Some(((), var1843)), Option<(Unit, Range<Int8>)>.None, Option<(Unit, Range<Int8>)>.Some(var557), Option<(Unit, Range<Int8>)>.None, Option<(Unit, Range<Int8>)>.None] } ;
            ["""
=n7bA
<[5&[
""", """
cx`Ar
rDV\"m
""", "CKQSs#y4QY", ###"tlaa*[*e6S"###, """
[yUnL
OqVW3
""", ###"jU.DZTN-r+"###, "&a{FS|?DCzl", ###"nM7s**'vUm"###, ###"~&2#_~e?j@"###, """
X$Nq1
D||Ar
"""]
        } finally { // block id: 1858
            ["4hsZ[nz>Ed", "'#Sd'nR=.'", """
&;\\GZ
':Lyf
""", "[c;B_-b?/f", "5,4#_wC2]I", "rD~![P.l1c", """
rKJ_Q
\"lk$S
""", "cB=G!hVzhY", """
a*VAS
C5T~z
""", "\".$Dn3']?a"]
        } } else { (Option<Array<String>>.None ?? ["""
qW=kj
w_4.J
""", var1869, var1869, """
Bs=,k
RmB!.
""", "2(%z+&F_-l", """
`MQ&,
O?Dsg
""", var1869, "UD)gh(/6_>", "6epF2B|8ev", """
2Kn(|
jY00R
"""]) } [9]
    }
;
    public init(namedParam3147 ! : Option<Range<UInt16>>) { // block id: 3148
        var loopTimeVar3153 : Int64 = 0;
        while ((false) && loopTimeVar3153 < 100 ) {
            loopTimeVar3153++;

        };
        var var3337 : Range<UInt16> = (UInt16(30)&127..UInt16(184)&127:(-108)|1);
        try (resource = Class6()) { // block id: 3155
            ()
        } catch (_) { // block id: 3157
            let var3173 : ?((UInt64, Option<Bool>, (Unit, Range<Int8>), Array<Array<Bool>>), UInt64) = (([((((), (Int8(-82)&127..Int8(82)&127:(-4)|1)), Int32(-64), (UInt64(15)&127..UInt64(46)&127:69|1), (UInt32(46)&127..UInt32(161)&127:22|1), 6) as Bool), Option<Bool>.None, (Class6() as Bool), (Option<Range<UInt16>>.None as Bool), (UInt8(155) as Bool), ((UInt64(9), Option<Bool>.None, ((), (Int8(-66)&127..=Int8(77)&127:18|1)), [[false, false, false, true, false, false, true, true, true, false], [false, true, false, true, true, true, false, false, true, false], [false, false, false, true, false, true, true, true, true, false], [true, false, false, false, false, false, false, false, true, false], [true, false, false, true, true, true, true, true, true, true], [false, true, true, false, false, true, false, true, true, true], [false, true, true, false, false, true, true, true, false, true], [true, true, false, false, false, true, true, false, false, false], [true, false, false, false, true, true, false, false, true, false], [false, true, false, false, true, false, false, false, true, false]]) as Bool), ((UInt64(160), Option<Bool>.Some(false), ((), (Int8(-13)&127..Int8(36)&127:(72|1))), [[false, true, false, false, false, false, false, false, false, false], [false, false, false, true, false, false, false, true, false, false], [true, false, false, false, false, false, false, true, true, false], [false, false, true, false, false, true, false, false, true, true], [true, true, true, true, false, true, false, false, true, false], [true, true, true, true, true, false, true, false, true, true], [false, true, false, false, true, true, true, false, false, true], [true, false, false, false, false, false, false, false, true, false], [true, true, false, true, false, false, true, true, false, true], [false, false, false, false, true, false, false, false, true, true]]) as Bool), (UInt16(150) as Bool), Option<Bool>.Some(true), (Option<(Int64, Int32, Bool, Float64, Range<UInt64>, Int64, Array<Float32>)>.Some(((-23), Int32(-54), true, 69.0, (UInt64(164)&127..=UInt64(5)&127:(-30)|1), (-125), [Float32(-32.0), Float32(-102.0), Float32(-81.0), Float32(-26.0), Float32(47.0), Float32(26.0), Float32(-55.0), Float32(16.0), Float32(-107.0), Float32(-19.0)])) as Bool)] as (Int64, Int32, Bool, Float64, Range<UInt64>, Int64, Array<Float32>)) as ((UInt64, Option<Bool>, (Unit, Range<Int8>), Array<Array<Bool>>), UInt64));
            match (((-126)&127..var1392&127:(var2207|1))) {
                case caseVar3165 : Unit => 
                    var236
                
                case caseVar3170 => 
                    var3173;
                    var var3240 : Option<Array<Option<Bool>>> = ('q' as Array<Option<Bool>>);
                    if (false) { var3240 } else { Option<Array<Option<Bool>>>.Some(var3245) } ;
                    var3322 &= var2938
                
                case _ => 
                    var2647;
                    var1657 ||= var1690;
                    ()
                
                case _ => 
                    Option<Range<UInt16>>.Some(var3337);
                    ();
                    var1266
                
            };
            var loopTimeVar3345 : Range<UInt64> = (UInt64(Int8(Int8(117)))&127..=UInt64(Int8(61))&127:(Int64(UInt16(Int16(UInt8(248))))|1));
            for (i in loopTimeVar3345 where true) {
                ()
            };
            (Option<Unit>.Some(()) ?? ())
        } finally { // block id: 3364

        };
        let var3377 : Bool = true;
        var var3387 : Range<UInt32> = (UInt32(Int32(-5))&127..=UInt32(188)&127:(25|1));
        let var3411 : Unit = ();
        if ((if (false) { // block id: 3369
            ();
            [true, false, false, true, false, true, true, false, false, false];
            var1107
        } else { // block id: 3373
            ();
            if (var3377) { var1107 } else { ((var1219, (Int8(35)&127..=Int8(-35)&127:23|1)), Int32(-94), (UInt64(188)&127..=UInt64(243)&127:(-6)|1), var3387, (-70)) } 
        } is UInt8)) { if ((var2947 is Option<Option<Bool>>)) { // block id: 3397
            (var1066, (Int8(118)&127..Int8(-66)&127:75|1))
        } else { // block id: 3401
            ((), var1843)
        } } else { try { // block id: 3406
            var61;
            ();
            (var3411, var1843)
        } finally { // block id: 3414
            Float32(118.0) ** Float32(Int32(var140) & 3);
            if (false) { var3421 } else { Option<Array<Float32>>.None } ;
            if (false) { var1150 } else { var557 } 
        } } 
    }
;
    public init(param1504 : Option<(Int64, Int32, Bool, Float64, Range<UInt64>, Int64, Array<Float32>)>, optionalParam1505 ! : ((UInt64, Option<Bool>, (Unit, Range<Int8>), Array<Array<Bool>>), UInt64) = ((UInt64(UInt32(Int32(-39))), Option<Bool>.None, ((), (Int8(23)&127..Int8(110)&127:(103|1))), [[false, true, false, true, false, false, false, true, false, true], [true, true, false, false, true, false, false, true, false, false], [false, true, true, true, true, true, true, true, false, false], [false, false, true, false, false, false, true, true, false, true], [false, true, false, true, true, false, false, true, true, true], [true, true, false, false, false, false, true, false, false, false], [false, false, true, false, false, true, true, true, false, false], [false, false, false, true, true, true, false, false, false, false], [false, false, false, false, false, true, true, true, true, false], [true, false, false, true, true, false, true, false, false, true]]), UInt64(UInt16(183))), optionalParam1521 ! : UInt8 = UInt8(67), namedParam1523 ! : Range<UInt8>) { // block id: 1524
        var var3523 : (Unit) -> (Unit, Range<Int8>) = func3520;
        ((var3523|>func1527) ?? ())
    }

    public func isClosed(): Bool { return true }
    public func close(): Unit {}
}






public func func541(param542 : Unit) : (Unit, Range<Int8>) { // block id: 543
    let var624 : Range<UInt32> = (UInt32(Int32(-33))&127..UInt32(UInt32(67))&127:(Int64(UInt64(UInt32(31)))|1));
    if (if (var55) { var550 } else { [false, true, false, false, true, false, false, false, true, true] } [0]) { (Class6.var557) } else { (Option<(Unit, Range<Int8>)>.None ?? if (var55) { // block id: 568
        Class6();
        ();
        ((), (Int8(98)&127..Int8(76)&127:5|1))
    } else if (false) { // block id: 575
        ();
        var var580 : (Unit, Range<Int8>) = ((), (Int8(42)&127..=Int8(45)&127:(-86)|1));
        if (var55) { var580 } else { var580 } 
    } else { // block id: 585
        var236;
        let var593 : Range<Int8> = (Int8(1)&127..Int8(121)&127:(115|1));
        var var599 : Int32 = Int32(51);
        var var603 : Range<UInt32> = (UInt32(UInt8(UInt8(UInt8(212))))&127..UInt32(Int32(-97))&127:(Int64(UInt32(110))|1));
        let var634 : Int64 = Int64(Int32(120));
        if (true) { ((param542, var593), var599, (UInt64(65)&127..=UInt64(150)&127:(-122)|1), var603, (-80)) } else { (((), var593), Int32(-33), (var61&127..UInt64(100)&127:(58|1)), var624, var634) } ;
        let var638 : (Unit, Range<Int8>) = ((), (Int8(-56)&127..Int8(123)&127:105|1));
        var638
    }) } 
}




public struct Aggregate1279 {
    public init() { // block id: 1281

    }
;
    let var1286 : (Int16, (Range<UInt8>, UInt32, Float32, Range<Int8>, Unit), Range<UInt16>, Array<Unit>, Option<Option<Bool>>, Int64, Range<Int16>, Range<Int16>, Bool) = (Int16(-67), ((UInt8(225)&127..=UInt8(135)&127:(125|1)), UInt32(51), Float32(-17.0), (Int8(81)&127..=Int8(-79)&127:(-94)|1), ()), (UInt16(131)&127..UInt16(99)&127:(-121)|1), [(), (), (), (), (), (), (), (), (), ()], Option<Option<Bool>>.None, 77, (Int16(-81)&127..=Int16(-38)&127:(0|1)), (Int16(37)&127..=Int16(35)&127:(-121)|1), false)
}

public func func2438(namedParam1209 ! : Class6) : Option<Option<Bool>> { // block id: 1210
    let var1238 : ?Bool = (() as Bool);
    let var1270 : Unit = ();
    if (var55) { try { // block id: 1216
        ();
        var1219;
        if (var55) { [(), (), (), (), (), (), (), (), (), ()] } else { [(), var1219, var1219, (), var1219, (), (), var236, (), var1219] } 
    } finally { // block id: 1235
        [var1238, var1238, Option<Bool>.Some(var55), var1238, Option<Bool>.Some(var55), var1238, var1238, Option<Bool>.Some(true), var1238, var1238];
        var var1255 : Int32 = Int32(55);
        var1255--;
        let var1258 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
        var1258
    } } else { [(), (), (), (), var1266, (), var1270, (), var1266, var1066] } [7];
    var1283.var1286[4]
}


func func1086(param1087 : Array<Option<Bool>>) : Option<Option<Bool>> { // block id: 1088
    let var1104 : String = """
Swm/]
AMR\"3
""";
    let var1141 : Int64 = 10;
    var var1167 : UInt32 = UInt32(68);
    if (try { // block id: 1091
        var1066;
        false
    } catch (_) { // block id: 1094
        var1066;
        var124 /= ((Int8(41)) | 1);
        true
    }) { (var1104, var1107, (Int16(-41)&127..Int16(44)&127:61|1), var221)[1] } else { if (34 == var1141) { // block id: 1143
        var1066;
        var55 &&= var55;
        var var1161 : Int32 = Int32(UInt32(30));
        (var1150, var1161, var393, (var1167&127..UInt32(97)&127:((-3)|1)), var1141)
    } else { // block id: 1172
        var825;
        var1141;
        var1107
    } } ;
    let var1396 : ?Bool = ((Int8(UInt8(UInt8(165)))&127..Int8(58)&127:(Int64((-23))|1)) as Bool);
    if ((var1185 ?? var1189)[2]) { func2438(namedParam1209 : (Option<Class6>.None ?? Class6())) } else { match ((var1331, var61)[0]) {
        case _ => 
            Int16(7);
            ();
            var var1354 : ??Bool = Option<Option<Bool>>.None;
            var1354
        
        case _ => 
            var1361 **= (var1361 & 3);
            var var1365 : Unit = ();
            var1365;
            var1368
        
        case _ : Array<Option<(Unit, Range<Int8>)>> => 
            Option<Option<Bool>>.None
        
        case caseVar1376 => 
            if (false) { var1368 } else { var1382 } 
        
        case _ => 
            var1388 **= (Int32(-56) & 3);
            var1392;
            Option<Option<Bool>>.Some(var1396)
        
    } } 
}

func func808(param809 : Option<Unit>) : Option<Bool> { // block id: 810
    let var817 : ??Bool = (Option<Option<Bool>>.None as Option<Bool>);
    var var863 : Unit = ();
    let var893 : Bool = false;
    (var817 ?? (var61, var825, (var863, (var867&127..var867&127:(0|1))), [[true, true, true, false, false, true, true, false, false, false], [false, false, true, false, true, true, false, true, true, false], [true, false, true, false, false, true, true, false, false, true], [false, true, false, true, true, true, false, false, true, true], var550, [false, false, false, true, true, true, false, true, false, true], var550, [true, var893, false, true, false, false, false, var893, var55, false], [true, false, false, false, false, false, true, false, false, false], var550])[1]);
    let var937 : ?Bool = Option<Bool>.Some(true);
    let var954 : Array<Option<Bool>> = [Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, (Int64(UInt16(104)) as Bool), (Int32(Int32(UInt16(42))) as Bool), ([(Class6() as Bool), ((UInt64(7), Option<Bool>.None, ((), (Int8(78)&127..Int8(-6)&127:((-63)|1))), [[false, true, false, true, false, true, true, true, false, true], [false, true, false, true, false, false, true, true, false, true], [false, true, true, false, false, true, false, true, true, false], [false, false, false, true, true, true, true, true, false, false], [true, true, false, true, false, true, true, true, true, true], [false, false, true, true, false, true, true, true, false, false], [false, true, false, false, false, false, true, true, false, true], [true, true, true, false, true, false, true, false, false, false], [false, true, false, false, true, false, true, false, true, false], [true, false, true, false, true, false, false, true, false, false]]) as Bool), (Int16(-26) as Bool), Option<Bool>.None, Option<Bool>.None, (UInt32(119) as Bool), Option<Bool>.Some(true), (UInt16(232) as Bool), Option<Bool>.Some(false), ((UInt8(166)&127..UInt8(106)&127:4|1) as Bool)] as Bool), ([(Option<(Unit, Range<Int8>)>.None as (Unit, Range<Int8>)), Option<(Unit, Range<Int8>)>.None, ("""
F%(_a{
C+0|T
""" as (Unit, Range<Int8>)), Option<(Unit, Range<Int8>)>.Some(((), (Int8(-33)&127..=Int8(113)&127:(-93)|1))), (Int16(-2) as (Unit, Range<Int8>)), Option<(Unit, Range<Int8>)>.None, Option<(Unit, Range<Int8>)>.Some(((), (Int8(-90)&127..=Int8(13)&127:(109|1)))), Option<(Unit, Range<Int8>)>.None, (Option<Option<Bool>>.None as (Unit, Range<Int8>)), Option<(Unit, Range<Int8>)>.None] as Bool), ((((), (Int8(108)&127..=Int8(38)&127:22|1)) as Bool) as Bool)];
    func func919(param920 : Range<UInt8>, optionalParam921 ! : (Unit, Range<Int8>) = ((), (Int8(-22)&127..=Int8(106)&127:32|1)), namedParam925 ! : Option<Option<Bool>>, namedParam926 ! : Int8) : Option<Bool> { // block id: 927
        false;
        (namedParam925 ?? if (var893) { [var937, Option<Bool>.None, var937, Option<Bool>.Some(true), var937, Option<Bool>.Some(var893), var937, Option<Bool>.Some(var55), Option<Bool>.Some(var893), var937] } else { var954 } [1])
    }
;
    let var1040 : Range<Int32> = (Int32(-120)&127..Int32(-15)&127:14|1);
    var var1406 : (Array<Option<Bool>>) -> Option<Option<Bool>> = func1086;
    if (try { // block id: 908
        var910;
        true
    } catch (e: Exception) { // block id: 913
        ();
        (-108.0) != (-114.0)
    }) { func919(match ((var61, var825, ((), (Int8(14)&127..=Int8(27)&127:(-40)|1)), [[false, true, false, true, false, true, true, true, true, false], [false, false, true, false, true, false, false, true, true, false], [false, false, true, false, true, false, false, true, false, false], [true, false, true, true, true, false, false, true, true, true], [false, true, true, true, true, true, false, false, true, true], [true, false, true, true, true, true, true, false, true, false], [false, false, false, false, true, true, true, false, false, false], [true, true, false, true, false, false, false, true, true, true], [true, false, true, false, true, true, true, true, false, false], [false, false, false, true, true, true, false, true, false, false]])) {
        case _ : Option<(Unit, Range<Int8>)> => 
            var1040;
            var55 ||= false;
            var1046
        
        case (caseVar1053,caseVar1054,_ : UInt16,_) => 
            var1046
        
        case _ => 
            var var1061 : Int64 = 68;
            var1061++;
            var1046
        
    }, optionalParam921 : func541(var1066), namedParam925 : try { // block id: 1069
        var221 = UInt8(73);
        if (false) { Option<Option<Bool>>.None } else { Option<Option<Bool>>.Some(var937) } 
    } catch (e: Exception) { // block id: 1078
        Option<Option<Bool>>.None;
        ();
        Option<Option<Bool>>.None
    }, namedParam926 : Int8(UInt8(220))) } else { (([var937, Option<Bool>.Some(true), var937, var937, Option<Bool>.Some(var55), Option<Bool>.Some(false), Option<Bool>.None, var937, Option<Bool>.Some(var893), var937]|>var1406) ?? try { // block id: 1424
        let var1426 : (Range<UInt8>, UInt32, Float32, Range<Int8>, Unit) = ((UInt8(72)&127..=UInt8(75)&127:(-32)|1), UInt32(209), Float32(Float32(Float32(-120.0))), (Int8(-61)&127..Int8(-22)&127:(-113)|1), ());
        var1426;
        Option<Bool>.None
    } finally { // block id: 1436
        var var1440 : ?Bool = Option<Bool>.None;
        if (var55) { var1440 } else { var937 } 
    }) } 
}



func func1618(namedParam1619 ! : Interface12, optionalParam1620 ! : Option<(Int64, Int32, Bool, Float64, Range<UInt64>, Int64, Array<Float32>)> = (((UInt8(120)&127..=UInt8(182)&127:87|1) as ((UInt64, Option<Bool>, (Unit, Range<Int8>), Array<Array<Bool>>), UInt64)) as (Int64, Int32, Bool, Float64, Range<UInt64>, Int64, Array<Float32>)), namedParam1624 ! : Int64, namedParam1625 ! : (Int64, Int32, Bool, Float64, Range<UInt64>, Int64, Array<Float32>)) : ((UInt64, Option<Bool>, (Unit, Range<Int8>), Array<Array<Bool>>), UInt64) { // block id: 1626
    let var1643 : Range<Int8> = (Int8(Int8(83))&127..=Int8(-54)&127:(59|1));
    (if (var55) { ("""
g-kS\"
gaDUA
""", var1331, 'j')[1] } else { (UInt64(72), var825, (var1066, var1643), [[false, true, false, true, true, true, true, true, true, true], [false, false, false, false, false, true, true, true, true, false], [false, var55, false, var1657, false, true, var55, var1657, false, true], [false, true, false, false, true, false, false, false, false, false], var550, [true, var1690, true, true, var1657, var1657, var55, false, var1657, true], [true, true, true, true, true, true, false, true, true, true], var550, [false, false, false, true, true, false, false, true, true, false], var550]) } , var61)
}



public func func1959(param1960 : Option<(Unit, Range<Int8>)>) : Unit { // block id: 1961

}

public func func1533(param1534 : (Range<UInt8>, UInt32, Float32, Range<Int8>, Unit)) : Unit { // block id: 1535
    let var1773 : Class6 = Class6((UInt32(54)&127..UInt32(89)&127:15|1), (UInt16(75)&127..UInt16(58)&127:(-34)|1));
    match ((match (var1544) {
            case _ => 
                ();
                var1557;
                var var1609 : (Unit, Range<Int8>) = ((), (Int8(-40)&127..=Int8(-124)&127:107|1));
                var var1614 : Array<Array<Bool>> = [[true, false, true, false, false, false, true, false, true, false], [false, true, true, false, false, false, true, false, false, false], [true, false, false, false, true, true, false, false, false, false], [true, false, false, false, false, true, false, true, true, true], [false, true, false, true, false, false, false, false, true, true], [true, false, true, false, true, true, true, true, true, false], [false, true, false, false, false, false, false, true, false, false], [true, true, true, false, true, true, true, false, true, true], [false, true, true, false, true, true, false, true, false, false], [false, true, true, true, false, true, false, false, true, false]];
                Option<((UInt64, Option<Bool>, (Unit, Range<Int8>), Array<Array<Bool>>), UInt64)>.Some(((UInt64(114), Option<Bool>.Some(var55), var1609, var1614), var61))
            
        } ?? func1618(namedParam1619 : Class6(), namedParam1624 : 21, namedParam1625 : (41, var1388, true, (-38.0), var393, (-115), [var140, var140, var140, Float32(-54.0), Float32(-46.0), var140, Float32(79.0), var140, var140, var140])))) {
        case _ => 
            let var1732 : ?Class6 = (Option<Option<Bool>>.None as Class6);
            if (var1690) { Option<Class6>.None } else { var1732 } 
        
        case caseVar1737 : Range<UInt16> => 
            let var1744 : Class6 = Class6();
            if (var1690) { Option<Class6>.None } else { Option<Class6>.Some(var1744) } 
        
        case (caseVar1748,_ : UInt32) => 
            var1751
        
        case ((_,caseVar1761 : Option<Array<Unit>>,(_,_ : (Int16, (Range<UInt8>, UInt32, Float32, Range<Int8>, Unit), Range<UInt16>, Array<Unit>, Option<Option<Bool>>, Int64, Range<Int16>, Range<Int16>, Bool)),_ : Rune),caseVar1762 : Array<Float32>) => 
            if (false) { [(), (), (), (), (), (), (), (), (), ()] } else { [(), (), (), (), (), (), (), (), (), ()] } ;
            if (false) { var1751 } else { Option<Class6>.Some(var1773) } 
        
        case _ => 
            if (var55) { var1751 } else { var1751 } 
        
    };
    var var1911 : UInt32 = UInt32(UInt16(178));
    let var1947 : Unit = ();
    if ((try { // block id: 1895
        var1219;
        ();
        var1899
    } catch (_) { // block id: 1901
        var221 /= ((var221) | 1);
        Option<(Int64, Int32, Bool, Float64, Range<UInt64>, Int64, Array<Float32>)>.Some(var1189);
        Option<Bool>.None
    } ?? UInt32(153) < var1911)) { // block id: 1914
        var1283;
        ();
        (var1361, ())[1]
    } else if (match (try { // block id: 1925
            var var1930 : Unit = ();
            [var236, (), var1930, (), (), (), (), var1066, (), ()]
        } catch (_) { // block id: 1939
            ();
            [(), (), (), (), (), (), (), (), (), ()]
        }) {
        case _ : Unit => 
            ();
            var1947;
            var221 <= var221
        
        case _ => 
            false && false
        
    }) { // block id: 1957
        var423|>func1959;
        var var1966 : (Option<(Unit, Range<Int8>)>) -> Unit = { lambdaParameter1969 : Option<(Unit, Range<Int8>)> => () };
        Option<(Unit, Range<Int8>)>.Some(var1150)|>var1966;
        var1911 *= var1911
    };
    var221 %= ((var221) | 1)
}

func func2438<T0, T1>(namedParam2439 ! : Range<Int64>) : Option<((UInt64, Option<Bool>, (Unit, Range<Int8>), Array<Array<Bool>>), UInt64)> { // block id: 2440
    var var2472 : Float64 = Float64(Float32(81.0));
    func func2480(param2481 : Option<Option<Unit>>, param2482 : (Option<(Unit, Range<Int8>)>) -> Unit) : Aggregate1279 { // block id: 2485
        ();
        if (try { // block id: 2489
            false && true
        } finally { // block id: 2493
            false
        }) { (if ((var140 == Float32(69.0))) { var1283 } else { try { // block id: 2501
            UInt64(176);
            if (var2301) { var1283 } else { var1283 } 
        } catch (e: Exception) { // block id: 2507
            (UInt8(87)&127..UInt8(17)&127:(-104)|1);
            UInt16(126) % ((var2512) | 1);
            Aggregate1279()
        } finally { // block id: 2516
            if (false) { Aggregate1279() } else { var1283 } 
        } } ) } else { var1283 } 
    }
;
    if ((var140 is ((Range<UInt8>, UInt32, Float32, Range<Int8>, Unit)) -> Unit)) { // block id: 2444
        func1533(var2227);
        let var2451 : Option<Array<String>> = ((UInt64(Int8(UInt8(69)))&127..UInt64(Int64(UInt64(218)))&127:(Int64(Int32(113))|1)) as Array<String>);
        var loopTimeVar2463 : Int64 = 0;
        while ((false) && loopTimeVar2463 < 100 ) {
            loopTimeVar2463++;
            var2451
        }
    } else if (true) { // block id: 2465
        try (resource = Class6()) { // block id: 2467
            var1066;
            ()
        } catch (_) { // block id: 2470
            var2472;
            ()
        } finally { // block id: 2476
            var2207;
            var1066
        };
        func2480(Option<Option<Unit>>.Some(Option<Unit>.Some(var1219)), func1959);
        func1959(var423)
    };
    var var2531 : (Unit) -> (Unit, Range<Int8>) = { lambdaParameter2534 : Unit => ((), (Int8(-99)&127..=Int8(15)&127:60|1)) };
    (((var221 -= var221)|>var2531) as ((UInt64, Option<Bool>, (Unit, Range<Int8>), Array<Array<Bool>>), UInt64))
}

func func2097<T0, T1>(param2098 : Option<Unit>) : Option<(Int64, Int32, Bool, Float64, Range<UInt64>, Int64, Array<Float32>)> where T0 <: Array<Array<Bool>>, T1 <: Option<Class6> { // block id: 2099
    let var2220 : Int64 = Int64(UInt64(33));
    let var2243 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    let var2280 : ?Bool = (((UInt8(228)&127..=UInt8(125)&127:((-47)|1)), UInt32(6), Float32(0.0), (Int8(-13)&127..=Int8(-39)&127:((-87)|1)), ()) as Bool);
    try { // block id: 2101
        try { // block id: 2103
            var124;
            ();
            (UInt64(116), Option<Bool>.None, (var1266, (Int8(-76)&127..=Int8(-58)&127:(-77)|1)), [[false, false, false, true, false, false, true, true, false, false], [true, true, true, true, true, true, true, true, false, true], [true, true, false, true, true, false, true, true, false, false], [false, false, true, true, false, true, true, false, true, false], [true, true, false, true, true, true, false, true, true, false], [true, false, true, true, false, false, false, true, true, false], [true, true, true, true, false, true, false, false, true, false], [false, false, false, true, true, false, true, true, true, false], [true, true, true, false, false, false, false, false, true, false], [false, false, true, false, true, false, true, true, true, false]])
        } finally { // block id: 2113
            var1899;
            var var2135 : Array<Bool> = [false, true, true, false, true, true, false, false, true, true];
            (UInt64(174), Option<Bool>.None, var1150, [[false, false, var55, false, false, var55, false, var2129, var1690, true], [false, false, false, false, false, false, false, true, true, true], var2135, [true, var55, true, var1657, var2129, var2129, false, var1657, false, var55], [var2129, false, var2129, var1690, var2129, true, var1657, false, false, true], var550, [false, false, true, false, false, false, true, false, false, true], var2135, [true, false, false, false, true, false, false, false, false, true], [false, false, true, true, true, false, false, false, true, false]])
        };
        Option<Bool>.Some(var55).getOrThrow();
        var61 ^ UInt64(152)
    } catch (_) { // block id: 2170
        let var2270 : Int16 = Int16(121);
        match ((Int32(-56)&127..=Int32(-55)&127:(-5)|1)) {
            case _ => 
                Class6();
                var221 **= (var221 & 3);
                let var2212 : Range<Int16> = (Int16(103)&127..=Int16(106)&127:(-73)|1);
                let var2216 : Int16 = Int16(41);
                if (var2129) { (Int16(-79), (var1046, UInt32(63), var140, (Int8(16)&127..=Int8(48)&127:(-65)|1), var1066), (UInt16(95)&127..=UInt16(170)&127:(var1480|1)), [(), var236, var1266, (), var236, var1266, var236, var1066, var1266, ()], var1368, var2207, var2212, (var2216&127..=var2216&127:(var2220|1)), var2129) } else { (Int16(-91), var2227, (var1361&127..var1361&127:(76|1)), var2243, var1382, 17, (var2216&127..=var2216&127:(var1480|1)), (var2216&127..=Int16(62)&127:(var2220|1)), var1657) } 
            
            case _ => 
                (var2270, var2227, (var1361&127..=UInt16(138)&127:(var1480|1)), var2243, Option<Option<Bool>>.Some(var2280), 124, (Int16(-4)&127..=var2270&127:(var1392|1)), (Int16(-82)&127..Int16(-38)&127:(-12)|1), var2301)
            
        };
        var var2320 : UInt32 = UInt32(177);
        var var2348 : Array<Float32> = [Float32(-113.0), Float32(116.0), Float32(21.0), Float32(29.0), Float32(-11.0), Float32(-33.0), Float32(98.0), Float32(-58.0), Float32(-122.0), Float32(55.0)];
        match (var1388) {
            case -27 | -1 | 36 => 
                var1388;
                ();
                UInt64(119)
            
            case 103 => 
                var61
            
            case _ : Array<Option<Bool>> => 
                var2320 %= ((var2320) | 1);
                var1657 ||= false;
                UInt64(142)
            
            case -97 | -59 => 
                Class6();
                [true, var55, false, var1690, true, false, true, var1690, true, true];
                UInt64(206) & UInt64(232)
            
            case _ => 
                var2348;
                UInt64(154)
            
        }
    } finally { // block id: 2351
        let var2355 : (Int64, Range<Int64>, Array<String>, Array<Unit>, UInt64, Array<String>, Array<String>, Int8, Int64) = (67, ((-95)&127..=100&127:(Int64(Int32(106))|1)), ["uXVm~e=KSB", "~@XhX>f4%6", "5oeZ)\\0AT=", ###"xd|WmUiS[W"###, ###"U?4Xx'kAX-"###, "d@Ls@^=RBF", ###"zW*(Tw,3S7"###, ###"uwa{Qo%Ev m"###, """
w:BWG
7\"hIl
""", """
.;3-_
r,mwY
"""], [(), (), (), (), (), (), (), (), (), ()], UInt64(252), ["HQE:!}>#X$", "}=u^Wc-D'x", """
xEW=O
f_qTI
""", "vh,aYBm955", "+}O$GBwoq ", "CoS<\"^Xe2F", "I,2Y uX1&_", "qD@FG7\\2W?", """
Bm;Bu
MG%nP
""", ###"cu6X=v!).x"###], ["""
ll+N+
&zW-!
""", ";sa7}]P~K%", "'3-)Pq^G&R", ";lzpU0<m<8", """
)6`eD
%pe_l
""", """
Z'*W+
F`\"8r
""", """
,mwBZ
3s*ax
""", "uCh~QghOkk", """
IHPn5
y/s/'
""", """
Xr;*d
VVAk0
"""], Int8(Int8(-56)), Int64(UInt8(Int8(29))));
        var2355[4]
    };
    let var2418 : Unit = ();
    match (var1046) {
        case caseVar2388 : Option<Option<Bool>> => 
            let var2391 : Range<UInt16> = (UInt16(Int8(80))&127..UInt16(70)&127:(27|1));
            var2391;
            var var2398 : Unit = ();
            var2398;
            if (var1657) { Option<Class6>.Some(var2404) } else { var1751 } 
        
        case _ => 
            var423;
            Option<Array<String>>.Some(["wy#k6xz\"t!", """
y6lg~
#iH<Q
""", ###"Jkwp;IjyQ%"###, "Jj1o9T)rmm", """
&bo<0
7 }%|
""", ###"}ff]mhUx!\\"###, "XY[rxd)P(z", "xj&QD>&=Yf", "b%mtR?cSdQ", ###"<ktO&)[/a*"###]);
            Option<Class6>.None
        
        case _ => 
            var2418;
            var1266;
            var1751
        
        case _ => 
            var2426 %= ((var1388) | 1);
            if (true) { Option<Class6>.Some(var2404) } else { var1751 } 
        
    };
    var var2543 : Range<Int64> = (96&127..=(-44)&127:(-52)|1);
    (func2438<Option<Array<Unit>>, Array<Array<Bool>>>(namedParam2439 : var2543) as (Int64, Int32, Bool, Float64, Range<UInt64>, Int64, Array<Float32>))
}




public func func2554(param2555 : (Int16, (Range<UInt8>, UInt32, Float32, Range<Int8>, Unit), Range<UInt16>, Array<Unit>, Option<Option<Bool>>, Int64, Range<Int16>, Range<Int16>, Bool)) : Array<Float32> { // block id: 2556
    let var2562 : (Option<(Unit, Range<Int8>)>) -> Unit = { lambdaParameter2565 : Option<(Unit, Range<Int8>)> =>  };
    let var2592 : Array<Option<Bool>> = [Option<Bool>.Some(true), ((73&127..105&127:(-45)|1) as Bool), Option<Bool>.None, Option<Bool>.None, Option<Bool>.Some((Int8(UInt8(77)) is String)), Option<Bool>.None, Option<Bool>.None, Option<Bool>.Some(("u,ej'%O)*u" is Option<Option<Bool>>)), ([")sh61>&Z~H", "jg&o9=qB9G", "R0aoRHQ}?a{", "Yaf\"SQEb&U", "M)fS<M17dB", """
p@Qr6
k8#Cs
""", "(7LfuADEdd", """
aq,)7
d)|mD
""", "\\@0$IJb(8E", "qW81YkL,u&"] as Bool), Option<Bool>.Some((Class6((UInt32(165)&127..UInt32(178)&127:125|1), (UInt16(209)&127..=UInt16(114)&127:(23|1))) is (Option<Option<Unit>>, (Option<(Unit, Range<Int8>)>) -> Unit) -> Aggregate1279))];
    let var2638 : Range<UInt32> = (UInt32(156)&127..=UInt32(2)&127:(-12)|1);
    let var2696 : ?Range<UInt16> = ((UInt16(245), ()) as Range<UInt16>);
    let var2732 : Array<Float32> = [Float32(68.0), Float32(-45.0), Float32(Float32(108.0)), Float32(99.0), Float32(Float32(Float32(Float32(-26.0)))), Float32(Float32(Float32(Float32(-19.0)))), Float32(Float32(Float32(115.0))), Float32(Float32(41.0)), Float32(Float32(-31.0)), Float32(Float32(16.0))];
    func func2558() : Array<Float32> { // block id: 2559
        let var2580 : ?Bool = Option<Bool>.None;
        var var2586 : Bool = true;
        match ((Option<Array<Option<Bool>>>.Some([Option<Bool>.None, Option<Bool>.Some(var1690), Option<Bool>.None, var2580, Option<Bool>.None, Option<Bool>.None, Option<Bool>.Some(var2586), var2580, var2580, var2580]) ?? var2592)) {
            case _ => 
                if (var2129) { var910 } else { [[false, false, false, true, true, true, false, false, false, true], [true, false, true, true, true, false, false, false, false, true], [false, true, true, false, false, false, false, false, true, false], [false, true, true, false, false, true, true, true, false, false], [true, true, true, false, false, true, true, false, true, false], [true, false, true, true, true, true, true, true, false, true], [false, false, true, false, false, false, true, true, true, true], [false, true, false, true, false, true, false, true, false, false], [true, false, false, true, true, true, false, true, true, false], [false, false, true, false, true, true, false, false, false, true]] } ;
                var423
            
        }|>var2562;
        match (var2638) {
            case caseVar2642 => 
                if (false) { var2647 } else { Class6() } 
            
            case _ => 
                var1219;
                var var2666 : Array<Float32> = [Float32(-65.0), Float32(4.0), Float32(Float32(107.0)), Float32(Float32(-22.0)), Float32(-70.0), Float32(-127.0), Float32(-76.0), Float32(Float32(Float32(Float32(84.0)))), Float32(-18.0), Float32(-88.0)];
                (11, Int32(-7), false, 44.0, (var2660&127..var61&127:(85|1)), (-69), var2666);
                Class6()
            
        };
        let var2715 : ?Array<Float32> = Option<Array<Float32>>.None;
        (((var2696 ?? (UInt16(231)&127..UInt16(85)&127:(var2207|1))) as Array<Float32>) ?? (match (var2404) {
            case _ => 
                ();
                ();
                if (true) { var2715 } else { var2715 } 
            
        } ?? if (var1690) { [var140, Float32(86.0), Float32(18.0), Float32(-63.0), var140, var140, Float32(-114.0), Float32(27.0), var140, Float32(-4.0)] } else { var2732 } ))
    }
;
    func2558()
}



func func2093(param2094 : Float64) : Interface10 { // block id: 2095
    let var2764 : ?Range<UInt16> = ((Option<((UInt64, Option<Bool>, (Unit, Range<Int8>), Array<Array<Bool>>), UInt64)>.Some(((UInt64(17), Option<Bool>.Some(false), ((), (Int8(-10)&127..=Int8(-37)&127:37|1)), [[false, true, false, false, true, false, false, false, true, false], [false, true, true, false, false, false, false, true, false, false], [true, false, true, false, false, false, false, false, true, false], [true, true, false, false, false, true, true, false, true, true], [true, false, true, false, true, true, true, true, false, false], [true, false, true, false, true, true, true, true, true, false], [false, false, false, false, false, true, true, true, true, false], [true, false, true, true, false, true, true, false, true, false], [true, true, false, true, false, false, false, false, false, false], [false, true, false, true, true, false, false, false, true, true]]), UInt64(185))) as Option<Unit>) as Range<UInt16>);
    let var2856 : Int64 = 77;
    func func2548(param2549 : Range<Int16>, param2550 : Range<UInt8>, param2551 : Option<Unit>) : Option<Unit> { // block id: 2552
        let var2853 : ?Bool = Option<Bool>.None;
        ((var2764 as (Int16, (Range<UInt8>, UInt32, Float32, Range<Int8>, Unit), Range<UInt16>, Array<Unit>, Option<Option<Bool>>, Int64, Range<Int16>, Range<Int16>, Bool)) ?? try { // block id: 2839
            ();
            var var2849 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
            (Int16(-88), var2227, (UInt16(67)&127..=var1361&127:((-10)|1)), var2849, Option<Option<Bool>>.Some(var2853), var2856, param2549, (Int16(-29)&127..Int16(-7)&127:114|1), true)
        } finally { // block id: 2861
            var var2872 : Range<UInt32> = (UInt32(111)&127..UInt32(222)&127:(-69)|1);
            if (var2301) { Class6((UInt32(171)&127..UInt32(95)&127:42|1), (UInt16(128)&127..=UInt16(234)&127:(21|1))) } else { Class6(var2872, (UInt16(176)&127..=UInt16(224)&127:(-19)|1)) } ;
            var1388 / ((var2426) | 1);
            let var2881 : (Int16, (Range<UInt8>, UInt32, Float32, Range<Int8>, Unit), Range<UInt16>, Array<Unit>, Option<Option<Bool>>, Int64, Range<Int16>, Range<Int16>, Bool) = (Int16(Int8(15)), ((UInt8(UInt8(47))&127..=UInt8(Int8(-103))&127:(Int64(UInt16(124))|1)), UInt32(Int16(Int16(112))), Float32(Float32(19.0)), (Int8(-22)&127..=Int8(-104)&127:109|1), ()), (UInt16(15)&127..=UInt16(192)&127:(-2)|1), [(), (), (), (), (), (), (), (), (), ()], Option<Option<Bool>>.None, 26, (Int16(UInt8(UInt8(234)))&127..Int16(112)&127:(Int64(UInt8(219))|1)), (Int16(52)&127..=Int16(UInt8(148))&127:(Int64(Int64(UInt32(63)))|1)), true);
            if (false) { var2881 } else { var2881 } 
        })|>func2554;
        let var2931 : ??Unit = Option<Option<Unit>>.Some(Option<Unit>.Some(()));
        (Option<Option<Unit>>.Some(((Int16(-7)&127..Int16(-43)&127:(-115)|1) as Unit)) ?? if (var1690) { (Option<(Int64, Int32, Bool, Float64, Range<UInt64>, Int64, Array<Float32>)>.Some(var1189) as Unit) } else { (var2931 ?? Option<Unit>.None) } )
    }
;
    func2097<Array<Array<Bool>>, Option<Class6>>(if (var55) { func2548((var2938&127..var2938&127:(var2856|1)), (var221&127..var221&127:(var2207|1)), var2947) } else { Option<Unit>.Some(var1266) } );
    let var2996 : ?Bool = Option<Bool>.Some(false);
    (match (Option<((UInt64, Option<Bool>, (Unit, Range<Int8>), Array<Array<Bool>>), UInt64)>.None) {
        case _ : (Int64, Range<Int64>, Array<String>, Array<Unit>, UInt64, Array<String>, Array<String>, Int8, Int64) => 
            var2947
        
        case _ => 
            UInt16(123);
            var2947
        
        case _ => 
            (UInt16(10)&127..UInt16(8)&127:82|1);
            [Option<Bool>.None, Option<Bool>.Some(true), var2996, Option<Bool>.Some(var1690), var2996, var2996, Option<Bool>.Some(true), Option<Bool>.None, var2996, Option<Bool>.Some(true)];
            Option<Unit>.None
        
    } ?? (match (UInt16(50)) {
        case 117 | 156 | 67 => 
            param2094;
            var2947
        
        case 11 | 59 => 
            var1066;
            var2947
        
        case _ => 
            if (false) { Option<Unit>.None } else { var2947 } 
        
    } ?? if (var2129) { // block id: 3031

    }));
    let var3124 : Interface10 = Class6();
    var var3443 : Bool = false;
    if (match (try { // block id: 3035
            var1480++;
            (var1150, Int32(-37), (UInt64(204)&127..var2660&127:(113|1)), (UInt32(220)&127..=UInt32(131)&127:(-66)|1), var1480);
            (Int32(39)&127..=Int32(-59)&127:87|1)
        } catch (_) { // block id: 3048
            Class6((UInt32(38)&127..=var3053&127:(var2856|1)), (UInt16(89)&127..UInt16(116)&127:(-38)|1));
            (Int32(121)&127..=Int32(45)&127:(-122)|1)
        } finally { // block id: 3058
            if (var2301) { (var2426&127..var2426&127:((-117)|1)) } else { (Int32(-49)&127..Int32(92)&127:11|1) } 
        }) {
        case _ : ((UInt64, Option<Bool>, (Unit, Range<Int8>), Array<Array<Bool>>), UInt64) => 
            let var3070 : Range<Int16> = (Int16(Int16(123))&127..Int16(UInt16(169))&127:((-26)|1));
            var3070;
            true
        
        case _ => 
            var var3082 : UInt8 = UInt8(13);
            var3082;
            var var3086 : Float64 = Float64((-63.0));
            var3086 -= (-113.0);
            var1657
        
        case _ => 
            true
        
    }) { match ([Option<(Unit, Range<Int8>)>.Some(((), (var124&127..Int8(-12)&127:((-30)|1)))), var423, var423, var423, var423, Option<(Unit, Range<Int8>)>.None, Option<(Unit, Range<Int8>)>.Some(var1150), Option<(Unit, Range<Int8>)>.None, Option<(Unit, Range<Int8>)>.Some(var1150), Option<(Unit, Range<Int8>)>.None]) {
        case caseVar3116 : Interface12 => 
            var236;
            if (true) { var1869 } else { var1869 } ;
            var3124
        
        case _ : (Int64, Range<Int64>, Array<String>, Array<Unit>, UInt64, Array<String>, Array<String>, Int8, Int64) => 
            var3130;
            var3124
        
        case caseVar3136 => 
            if (var3140) { Class6(namedParam3147 : Option<Range<UInt16>>.None) } else { Class6() } 
        
        case _ => 
            var3124
        
    } } else { match (var3436) {
        case _ => 
            if (var3443) { [var1869, "_>Z]@EmQkr", var1869, var1869, var1869, "b`LLn;w)vu", var1869, var1869, var1869, """
.06a{4
o/_wa
"""] } else { [var1869, "UyK4F\\Oty$", var1869, var1869, ###">c$j:W81a{1"###, var1869, var1869, ###"h'uzwdOym["###, var1869, var1869] } ;
            Option<Array<Option<Bool>>>.Some(var3245);
            Class6((UInt32(201)&127..var3053&127:(var2207|1)), (UInt16(206)&127..=UInt16(24)&127:(var1392|1)))
        
    } } 
}

func func1527(param1528 : (Unit) -> (Unit, Range<Int8>)) : Option<Unit> { // block id: 1531
    let var2011 : UInt32 = UInt32(UInt32(146));
    var var2038 : Range<UInt16> = (UInt16(177)&127..=UInt16(240)&127:(-96)|1);
    var var2068 : (Range<UInt8>, UInt32, Float32, Range<Int8>, Unit) = ((UInt8(197)&127..UInt8(Int8(Int8(119)))&127:((-4)|1)), UInt32(34), Float32(Float32(-49.0)), (Int8(65)&127..Int8(-94)&127:(-86)|1), ());
    match (try { // block id: 1986
            Int16(72);
            var1361--;
            (var1388&127..=var1388&127:((-79)|1))
        } finally { // block id: 1994
            (var1388&127..Int32(-97)&127:(126|1))
        }) {
        case _ : ((UInt64, Option<Bool>, (Unit, Range<Int8>), Array<Array<Bool>>), UInt64) => 
            var1899;
            if (var55) { ((var221&127..=UInt8(83)&127:(var1480|1)), var2011, var140, (Int8(-36)&127..Int8(-68)&127:(-85)|1), var1066) } else { ((var221&127..=var221&127:(92|1)), var2011, Float32(56.0), (Int8(-100)&127..=Int8(-123)&127:(68|1)), var236) } 
        
        case _ : Option<Class6> => 
            Class6((var2011&127..UInt32(208)&127:(var1392|1)), var2038);
            var1066;
            var var2042 : (Range<UInt8>, UInt32, Float32, Range<Int8>, Unit) = ((UInt8(69)&127..=UInt8(40)&127:(-3)|1), UInt32(64), Float32(-118.0), (Int8(5)&127..Int8(Int8(UInt8(121)))&127:((-72)|1)), ());
            var2042
        
        case caseVar2056 => 
            ((UInt8(186)&127..UInt8(223)&127:92|1), UInt32(236), Float32(13.0), (Int8(-55)&127..=Int8(27)&127:76|1), ())
        
        case _ : (String, (UInt64, Option<Bool>, (Unit, Range<Int8>), Array<Array<Bool>>), Rune) => 
            var2068
        
        case _ => 
            (var1046, UInt32(24), Float32(4.0), (Int8(77)&127..Int8(58)&127:66|1), ())
        
    }|>{ lambdaParameter1982 : (Range<UInt8>, UInt32, Float32, Range<Int8>, Unit) =>  };
    let var3479 : (Float64) -> Interface10 = func2093;
    func func2090() : Option<Unit> { // block id: 2091
        if (try { // block id: 3483
            var var3485 : Array<Unit> = Array<Unit>(10){ i => () };
            var3485;
            if (var2301) { Option<(Int16, (Range<UInt8>, UInt32, Float32, Range<Int8>, Unit), Range<UInt16>, Array<Unit>, Option<Option<Bool>>, Int64, Range<Int16>, Range<Int16>, Bool)>.None } else { Option<(Int16, (Range<UInt8>, UInt32, Float32, Range<Int8>, Unit), Range<UInt16>, Array<Unit>, Option<Option<Bool>>, Int64, Range<Int16>, Range<Int16>, Bool)>.None } ;
            var3140
        } finally { // block id: 3502
            UInt16(80);
            true
        }) { // block id: 3505
            (-109.0)
        } else if (var2301) { // block id: 3508
            var3510
        } else { // block id: 3514
            87.0 % Float64((Int32(47.0)) | 1)
        }|>var3479;
        var2947
    }
;
    func2090()
}

func func3520(param542 : Unit) : (Unit, Range<Int8>) { // block id: 543
    let var624 : Range<UInt32> = (UInt32(Int32(-33))&127..UInt32(UInt32(67))&127:(Int64(UInt64(UInt32(31)))|1));
    if (if (var55) { var550 } else { [false, true, false, false, true, false, false, false, true, true] } [0]) { (Class6.var557) } else { (Option<(Unit, Range<Int8>)>.None ?? if (var55) { // block id: 568
        Class6();
        ();
        ((), (Int8(98)&127..Int8(76)&127:5|1))
    } else if (false) { // block id: 575
        ();
        var var580 : (Unit, Range<Int8>) = ((), (Int8(42)&127..=Int8(45)&127:(-86)|1));
        if (var55) { var580 } else { var580 } 
    } else { // block id: 585
        var236;
        let var593 : Range<Int8> = (Int8(1)&127..Int8(121)&127:(115|1));
        var var599 : Int32 = Int32(51);
        var var603 : Range<UInt32> = (UInt32(UInt8(UInt8(UInt8(212))))&127..UInt32(Int32(-97))&127:(Int64(UInt32(110))|1));
        let var634 : Int64 = Int64(Int32(120));
        if (true) { ((param542, var593), var599, (UInt64(65)&127..=UInt64(150)&127:(-122)|1), var603, (-80)) } else { (((), var593), Int32(-33), (var61&127..UInt64(100)&127:(58|1)), var624, var634) } ;
        let var638 : (Unit, Range<Int8>) = ((), (Int8(-56)&127..Int8(123)&127:105|1));
        var638
    }) } 
}

public func func176<T0>(param177 : Range<UInt8>) : Bool { // block id: 178
    let var201 : (Range<UInt8>, UInt32, Float32, Range<Int8>, Unit) = ((UInt8(187)&127..=UInt8(219)&127:108|1), UInt32(Int16(69)), Float32(Float32(-81.0)), (Int8(50)&127..=Int8(-61)&127:126|1), ());
    let var231 : Int64 = Int64(UInt32(UInt16(91)));
    let var239 : (Range<UInt8>, UInt32, Float32, Range<Int8>, Unit) = ((UInt8(110)&127..=UInt8(154)&127:(Int64(Int16(UInt8(60)))|1)), UInt32(190), Float32(Float32(Float32(Float32(-11.0)))), (Int8(80)&127..Int8(38)&127:(Int64(UInt8(176))|1)), ());
    match {
        case false => 
        var55 ||= false;
        [Float32(-44.0), Float32(103.0), var140, Float32(67.0), Float32(1.0), var140, Float32(-93.0), Float32(-13.0), Float32(122.0), var140];
        if (var55) { var201 } else { var201 } 
        case var55 => 
        var201
        case _ => 
        ();
        if (var55) { ((var221&127..=var221&127:((-94)|1)), UInt32(62), var140, (Int8(-37)&127..var124&127:(var231|1)), var236) } else { var239 } 
    }[4];
    let var305 : Range<UInt32> = (UInt32(247)&127..=UInt32(115)&127:96|1);
    let var326 : UInt32 = UInt32(Int32(UInt16(Int16(UInt16(142)))));
    let var468 : Array<Option<(Unit, Range<Int8>)>> = [((Int8(110)&127..=Int8(41)&127:48|1) as (Unit, Range<Int8>)), (Class6() as (Unit, Range<Int8>)), ((UInt32(20)&127..UInt32(102)&127:((-49)|1)) as (Unit, Range<Int8>)), Option<(Unit, Range<Int8>)>.Some(((), (Int8(-123)&127..=Int8(-118)&127:(107|1)))), (UInt16(UInt8(UInt8(6))) as (Unit, Range<Int8>)), Option<(Unit, Range<Int8>)>.Some(((), (Int8(100)&127..Int8(-37)&127:(45|1)))), ((119&127..(-16)&127:31|1) as (Unit, Range<Int8>)), (UInt64(53) as (Unit, Range<Int8>)), ((Int32(-41)&127..Int32(-44)&127:(Int64(UInt16(133))|1)) as (Unit, Range<Int8>)), ((Int8(38)&127..=Int8(1)&127:(-18)|1) as (Unit, Range<Int8>))];
    let var643 : (Unit) -> (Unit, Range<Int8>) = { lambdaParameter646 : Unit => ((), (Int8(25)&127..Int8(-96)&127:(-71)|1)) };
    let var658 : Unit = ();
    let var1444 : (Option<Unit>) -> Option<Bool> = { lambdaParameter1447 : Option<Unit> => (Aggregate1279() as Bool) };
    let var1471 : Float64 = 96.0;
    func func803<T0, T1>(param804 : String) : UInt64 where T0 <: Bool, T1 <: Interface10 & Interface11<Option<Unit>, Option<Option<Bool>>> { // block id: 805
        match ((try { // block id: 1452
                Option<Unit>.Some(var1266)
            } finally { // block id: 1455
                var1266;
                var61 >>= ((var61) & 7);
                var var1464 : ?Unit = (true as Unit);
                if (var55) { Option<Unit>.None } else { var1464 } 
            }|>var1444)) {
            case _ => 
                var1471;
                var1471 % Float64((Int32(var1471)) | 1)
            
            case _ => 
                var1480 /= ((89) | 1);
                var1471
            
        };
        ((UInt8(189) as Array<Unit>) ?? [(), (), (), (), (), (), (), (), (), ()]);
        UInt64(var61)
    }
;
    let var1501 : Interface11<Option<Unit>, Option<Option<Bool>>> = Class6((Option<((UInt64, Option<Bool>, (Unit, Range<Int8>), Array<Array<Bool>>), UInt64)>.None as (Int64, Int32, Bool, Float64, Range<UInt64>, Int64, Array<Float32>)), optionalParam1521 : UInt8(198), namedParam1523 : (UInt8(UInt8(UInt8(94)))&127..=UInt8(230)&127:((-108)|1)));
    var loopTimeVar3539 : Int64 = 0;
    do {
        loopTimeVar3539++;
        let var385 : UInt16 = UInt16(241);
        let var717 : ?Bool = Option<Bool>.Some((Class6() is Int16));
        func func263(param264 : (Unit, Range<Int8>), optionalParam265 ! : Range<Int32> = (Int32(Int32(4))&127..Int32(UInt16(55))&127:((-44)|1)), optionalParam272 ! : (Unit, Range<Int8>) = ((), (Int8(37)&127..=Int8(116)&127:94|1)), optionalParam276 ! : Interface11<Option<Unit>, Option<Option<Bool>>> = Class6()) : Unit { // block id: 278
            var var296 : Int32 = Int32(UInt16(152));
            let var370 : ((Unit, Range<Int8>), Int32, Range<UInt64>, Range<UInt32>, Int64) = (((), (Int8(13)&127..Int8(-60)&127:(Int64(Int8(123))|1))), Int32(90), (UInt64(132)&127..=UInt64(52)&127:34|1), (UInt32(76)&127..UInt32(184)&127:40|1), (-101));
            if (((Option<Option<Bool>>.None ?? Option<Bool>.None) ?? try { // block id: 293
                var296 <<= ((var296) & 7);
                true
            } catch (_) { // block id: 301
                var236;
                true
            })) { var305 } else { match {
                case var55 => 
                let var318 : Range<UInt64> = (UInt64(129)&127..UInt64(253)&127:(43|1));
                let var335 : ((Unit, Range<Int8>), Int32, Range<UInt64>, Range<UInt32>, Int64) = (((), (Int8(Int8(78))&127..=Int8(Int8(-87))&127:(Int64(Int16(-52))|1))), Int32(UInt32(21)), (UInt64(UInt64(UInt32(243)))&127..UInt64(Int64((-95)))&127:(100|1)), (UInt32(UInt32(UInt32(23)))&127..=UInt32(UInt32(UInt16(178)))&127:(72|1)), 24);
                if (var55) { (param264, Int32(55), var318, (UInt32(221)&127..=var326&127:(17|1)), 82) } else { var335 } 
                case var55 => 
                ();
                ();
                var370
                case _ => 
                var385;
                (((), (Int8(-18)&127..=Int8(114)&127:(-90)|1)), Int32(50), var393, (var326&127..=UInt32(48)&127:((-30)|1)), var231)
            }[3] } ;
            var var417 : Int8 = Int8(UInt8(168));
            func func532(param533 : String, optionalParam534 ! : Option<Option<Bool>> = (Class6() as Option<Bool>), namedParam537 ! : Range<Int8>) : Bool { // block id: 538
                (if (var55) { // block id: 653
                    let var655 : Range<Int64> = ((-84)&127..=124&127:90|1);
                    var655;
                    var658
                }|>var643)[0];
                let var679 : ?Bool = Option<Bool>.None;
                var var742 : Bool = ((Class6() as Unit) is Range<Int32>);
                (try { // block id: 669
                    if (true) { [Option<Bool>.Some(true), Option<Bool>.Some(false), Option<Bool>.None, var679, Option<Bool>.Some(true), var679, Option<Bool>.None, var679, Option<Bool>.None, var679] } else { var689 } 
                } finally { // block id: 707
                    optionalParam272;
                    ();
                    [Option<Bool>.None, Option<Bool>.Some(true), Option<Bool>.Some(var55), var717, Option<Bool>.None, var679, var717, var717, var679, var679]
                }[4] ?? [var550, [false, false, false, false, false, true, true, false, true, true], [false, true, false, false, false, false, true, true, true, false], [var55, true, var55, false, true, var742, var742, false, var55, var55], [false, true, true, true, true, true, true, false, false, false], var550, var550, var550, [var55, true, true, false, var742, true, false, var55, false, false], [true, false, true, true, true, true, true, false, false, true]][7][2])
            }
;
            (match (Option<Bool>.None) {
                case caseVar412 : Option<Bool> => 
                    caseVar412;
                    var417 &= var124;
                    [var423, var423, Option<(Unit, Range<Int8>)>.Some(param264), Option<(Unit, Range<Int8>)>.Some(param264), Option<(Unit, Range<Int8>)>.None, var423, Option<(Unit, Range<Int8>)>.Some(param264), Option<(Unit, Range<Int8>)>.Some(((), (Int8(110)&127..Int8(-121)&127:(-74)|1))), Option<(Unit, Range<Int8>)>.None, var423]
                
                case caseVar460 : Array<Option<(Unit, Range<Int8>)>> => 
                    ();
                    caseVar460
                
                case _ => 
                    Int16(122);
                    var468
                
            }[4] ?? if (match {
                case var55 => 
                var55
                case var55 => 
                false
                case _ => 
                var221 <<= ((UInt8(6)) & 7);
                var370;
                var55
            }) { // block id: 524
                ((), (Int8(-73)&127..Int8(24)&127:(var231|1)))
            } else if (func532(###"jNe-G*VnA4"###, namedParam537 : (var124&127..=var417&127:(var231|1)))) { // block id: 773
                [Option<Bool>.Some(true), Option<Bool>.Some(false), var717, Option<Bool>.None, var717, Option<Bool>.None, var717, Option<Bool>.None, var717, var717];
                if (false) { optionalParam272 } else { ((), (Int8(30)&127..=Int8(73)&127:103|1)) } 
            } else { // block id: 793
                Int8(52) ^ Int8(-76);
                (var236, (Int8(-23)&127..Int8(71)&127:(-88)|1))
            });
            var61 <<= ((func803<Bool, Interface10>(###"N`#6d (:`^"###)) & 7)
        }
;
        func263(var1150, optionalParam265 : (var1388&127..=var1388&127:((-67)|1)), optionalParam276 : var1501);
        var867 += var867
    } while ((true) && loopTimeVar3539 < 100 ) ;
    var2301
}

func func166(param167 : String, optionalParam168 ! : Rune = 'x', namedParam170 ! : Range<UInt16>) : Unit { // block id: 171
    var var3544 : UInt8 = UInt8(33);
    let var3562 : ?Range<UInt16> = Option<Range<UInt16>>.None;
    match {
        case ((var3544&127..=UInt8(115)&127:(43|1))|>func176<Array<Float32>>) => 
        var1266;
        var124 <<= ((Int8(33)) & 7);
        var1150
        case _ => 
        if (false) { Option<Option<Unit>>.Some(Option<Unit>.Some(var1266)) } else { Option<Option<Unit>>.None } ;
        var3562;
        (var1219, (var124&127..Int8(-10)&127:((-125)|1)))
    }[0];
    var1066
}

func func39(param40 : Unit) : Interface11<Option<Unit>, Option<Option<Bool>>> { // block id: 41
    let var85 : Int64 = (-15);
    var var99 : Float64 = Float64(Float64(Float32(Float32(-71.0))));
    let var133 : Float32 = Float32(29.0);
    match (if (var55) { // block id: 58
            var61 %= ((var61) | 1);
            let var65 : Int64 = Int64(Int64(Int32(-66)));
            var65
        } else if (var55) { // block id: 70
            var var72 : Range<UInt32> = (UInt32(160)&127..=UInt32(186)&127:53|1);
            var72;
            let var76 : Int64 = Int64(UInt16(138));
            var76 ** ((-78) & 3)
        } else { // block id: 80
            (Int16(-49)&127..Int16(-49)&127:(-120)|1);
            param40;
            var85 * var85
        }) {
        case _ => 
            param40;
            var55;
            [Float32(35.0), Float32(6.0), Float32(-5.0), Float32(-123.0), Float32(69.0), Float32(79.0), Float32(-89.0), Float32(-128.0), Float32(-36.0), Float32(68.0)]
        
        case caseVar96 : Array<Float32> => 
            var99;
            [Float32(83.0), Float32(43.0), Float32(71.0), Float32(11.0), Float32(-69.0), Float32(-3.0), Float32(52.0), Float32(85.0), Float32(121.0), Float32(105.0)]
        
        case 126 | 106 => 
            var var110 : UInt16 = UInt16(124);
            var110++;
            var var115 : Array<Float32> = [Float32(109.0), Float32(35.0), Float32(-22.0), Float32(46.0), Float32(107.0), Float32(23.0), Float32(1.0), Float32(-90.0), Float32(72.0), Float32(-22.0)];
            if (false) { var115 } else { [Float32(-124.0), Float32(-24.0), Float32(2.0), Float32(-100.0), Float32(58.0), Float32(-128.0), Float32(-47.0), Float32(-95.0), Float32(59.0), Float32(0.0)] } 
        
        case caseVar120 => 
            var124 <<= ((var124) & 7);
            [Float32(-100.0), Float32(-98.0), var133, Float32(-3.0), Float32(21.0), var133, Float32(-66.0), var140, var133, var133]
        
        case _ => 
            param40;
            [Float32(-96.0), Float32(78.0), var140, var140, Float32(6.0), Float32(31.0), var133, Float32(1.0), Float32(-102.0), Float32(-121.0)]
        
    }[2];
    let var3592 : Bool = ("""
%BcR,
w(600
""" is (Range<UInt8>) -> Bool);
    let var3648 : Unit = ();
    try { // block id: 164
        func166(var1869, namedParam170 : (UInt16(52)&127..=UInt16(228)&127:17|1));
        var loopTimeVar3578 : Int64 = 0;
        while ((false) && loopTimeVar3578 < 100 ) {
            loopTimeVar3578++;

        };
        let var3622 : ((UInt64, Option<Bool>, (Unit, Range<Int8>), Array<Array<Bool>>), UInt64) = ((UInt64(139), ([(), (), (), (), (), (), (), (), (), ()] as Bool), ((), (Int8(-33)&127..=Int8(124)&127:12|1)), [[false, false, false, true, true, true, false, false, true, true], [true, true, true, false, false, false, true, false, true, false], [false, true, false, true, true, true, false, false, false, true], [true, true, true, false, true, true, true, true, false, false], [true, false, false, false, true, true, true, true, true, false], [false, true, true, false, false, true, true, true, false, false], [false, false, true, true, false, false, true, true, false, true], [false, true, true, true, false, true, true, false, false, true], [true, true, false, false, false, false, false, false, true, false], [false, false, true, false, true, false, false, false, true, true]]), UInt64(252));
        try { // block id: 3580
            ();
            (101&127..=var1480&127:(9|1));
            Class6(Option<(Int64, Int32, Bool, Float64, Range<UInt64>, Int64, Array<Float32>)>.Some((var1480, var2426, var3592, var3510, (UInt64(26)&127..UInt64(157)&127:(-51)|1), (-101), var3599)), optionalParam1505 : var3622, optionalParam1521 : var221, namedParam1523 : var1046)
        } finally { // block id: 3635
            ();
            Class6(namedParam3147 : Option<Range<UInt16>>.Some((UInt16(187)&127..=UInt16(152)&127:(-5)|1)))
        }
    } catch (e: Exception) { // block id: 3640
        var1066;
        try (resource = Class6()) { // block id: 3643

        } finally { // block id: 3644
            ();
            Aggregate1279();
            var3648
        };
        Class6(Option<(Int64, Int32, Bool, Float64, Range<UInt64>, Int64, Array<Float32>)>.Some(var1189), namedParam1523 : (UInt8(172)&127..=var221&127:(var85|1)))
    }
}

main(): Int64 {
    try {
        Class6.var15;
        let var29 : ?Unit = Option<Unit>.Some(());
        ((Option<Option<Unit>>.Some(var29) ?? var29) ?? (Option<Unit>.Some(()) ?? ()));
        match ((var1266|>func39)) {
            case caseVar3661 => 
                ();
                ();
                -53
            
            case _ => 
                ();
                var55 &&= true;
                var2207
            
        }
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var61*var61), 64)
        crccheck.updateBuffer(UInt64(var124*var124), 64)
        crccheck.updateBuffer(UInt64(var221*var221), 64)
        crccheck.updateBuffer(UInt64(var867*var867), 64)
        crccheck.updateBuffer(UInt64(var1361*var1361), 64)
        crccheck.updateBuffer(UInt64(var1388*var1388), 64)
        crccheck.updateBuffer(UInt64(var1392*var1392), 64)
        crccheck.updateBuffer(UInt64(var1480*var1480), 64)
        crccheck.updateBuffer(UInt64(var2207*var2207), 64)
        crccheck.updateBuffer(UInt64(var2426*var2426), 64)
        crccheck.updateBuffer(UInt64(var2512*var2512), 64)
        crccheck.updateBuffer(UInt64(var2660*var2660), 64)
        crccheck.updateBuffer(UInt64(var2938*var2938), 64)
        crccheck.updateBuffer(UInt64(var3053*var3053), 64)
        crccheck.updateBuffer(UInt64(var3322*var3322), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Aggregate1279 {

}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_unexpected_declaration_in_scope
// ASSERT: scan parse_trailing_closure_only_follow_name
// ASSERT: scan parse_expected_left_brace
// ASSERT: scan parse_expected_case


