/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output


public var var53 : Int16 = Int16(UInt16(36))
public let var57 : UInt8 = UInt8(104)
public var var71 : Array<Bool> = Array<Bool>(10){ i => false }
public var var105 : Bool = true
public let var136 : (UInt64, Range<UInt64>, Int8, Option<Bool>, Range<UInt32>, Int16) = (UInt64(234), (UInt64(166)&127..UInt64(93)&127:(-37)|1), Int8(-98), Option<Bool>.None, (UInt32(214)&127..=UInt32(220)&127:(-68)|1), Int16(-65))
public let var148 : (Interface34, Range<UInt8>, Rune, Rune, Range<Int16>) = (Class23(), (UInt8(171)&127..=UInt8(89)&127:((-83)|1)), 'l', 'n', (Int16(-63)&127..Int16(122)&127:(83|1)))
public let var185 : Unit = ()
public var var207 : UInt32 = UInt32(147)
public var var224 : Range<Int8> = (Int8(-108)&127..Int8(-9)&127:86|1)
public let var249 : String = """
Fq|P.
l'a{}=
"""
public var var312 : Int32 = Int32(Int32(54))
public let var317 : Int64 = (-40)
let var345 : Enum342 = Enum342.defaultValue
public var var356 : ?Bool = Option<Bool>.None
public var var417 : Rune = '9'
public let var430 : Interface27 = Class23()
public let var443 : (Int32, Array<Int8>) = (Int32(Int16(UInt16(UInt16(6)))), [Int8(-120), Int8(-5), Int8(-43), Int8(122), Int8(-32), Int8(-50), Int8(-73), Int8(8), Int8(-103), Int8(-62)])
public var var487 : ?(Array<Int32>, Range<UInt32>, Int32, Range<Int16>, (Range<UInt32>, Int64, Int16, (UInt64, Range<UInt64>, Int8, Option<Bool>, Range<UInt32>, Int16)), Range<Int32>) = Option<(Array<Int32>, Range<UInt32>, Int32, Range<Int16>, (Range<UInt32>, Int64, Int16, (UInt64, Range<UInt64>, Int8, Option<Bool>, Range<UInt32>, Int16)), Range<Int32>)>.None
public var var490 : (Array<Int32>, Range<UInt32>, Int32, Range<Int16>, (Range<UInt32>, Int64, Int16, (UInt64, Range<UInt64>, Int8, Option<Bool>, Range<UInt32>, Int16)), Range<Int32>) = ([Int32(-87), Int32(UInt32(UInt8(75))), Int32(-123), Int32(-78), Int32(Int8(107)), Int32(Int8(-126)), Int32(61), Int32(110), Int32(Int32(UInt8(211))), Int32(Int8(UInt8(99)))], (UInt32(Int32(104))&127..UInt32(UInt16(36))&127:((-71)|1)), Int32(Int32(UInt8(Int8(-54)))), (Int16(-76)&127..Int16(50)&127:1|1), ((UInt32(69)&127..UInt32(220)&127:52|1), Int64(UInt32(206)), Int16(55), (UInt64(111), (UInt64(205)&127..=UInt64(156)&127:((-97)|1)), Int8(123), Option<Bool>.None, (UInt32(25)&127..UInt32(237)&127:(114|1)), Int16(Int16(104)))), (Int32(-101)&127..=Int32(UInt8(UInt8(134)))&127:(Int64(UInt64(108))|1)))
public let var616 : (Float64, Range<Int16>, Option<((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)>, Int8) = (Float64(Float32(Float32(66.0))), (Int16(8)&127..Int16(UInt16(145))&127:(Int64(Int16(-124))|1)), (Float32(Float32(Float32(65.0))) as ((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)), Int8(Int8(Int8(-59))))
public let var646 : Int8 = Int8(UInt8(UInt8(38)))
public let var659 : Range<UInt8> = (UInt8(225)&127..=UInt8(241)&127:91|1)
public let var696 : UInt32 = UInt32(Int8(-41))
public var var700 : UInt32 = UInt32(Int8(124))
public var var708 : UInt16 = UInt16(6)
public let var742 : Interface34 = Class23()
public let var799 : Float32 = Float32(83.0)
public var var830 : UInt8 = UInt8(59)
public var var928 : Range<Int32> = (Int32(UInt8(92))&127..=Int32(100)&127:(Int64(UInt64(Int32(-88)))|1))
public var var951 : Int64 = Int64(UInt32(UInt32(UInt8(Int8(54)))))
public let var977 : Range<Int16> = (Int16(15)&127..Int16(-64)&127:(42|1))
public var var983 : (Range<UInt32>, Int64, Int16, (UInt64, Range<UInt64>, Int8, Option<Bool>, Range<UInt32>, Int16)) = ((UInt32(204)&127..UInt32(23)&127:(-83)|1), (-39), Int16(49), (UInt64(UInt16(85)), (UInt64(229)&127..=UInt64(230)&127:(-2)|1), Int8(Int8(39)), Option<Bool>.None, (UInt32(Int8(-52))&127..=UInt32(UInt32(180))&127:(103|1)), Int16(Int8(Int8(-100)))))
public let var1009 : ((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit) = (((), (Int32(-23)&127..Int32(-6)&127:(13|1)), Int8(UInt8(14)), Float32(Float32(-110.0)), (UInt8(242)&127..=UInt8(129)&127:12|1)), (UInt8(UInt8(0))&127..=UInt8(UInt8(UInt8(238)))&127:(44|1)), ())
public let var1047 : UInt32 = UInt32(71)
public let var1073 : ?((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit) = (((UInt8(73)&127..UInt8(240)&127:49|1) as (Array<Int32>, Range<UInt32>, Int32, Range<Int16>, (Range<UInt32>, Int64, Int16, (UInt64, Range<UInt64>, Int8, Option<Bool>, Range<UInt32>, Int16)), Range<Int32>)) as ((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit))
public let var1241 : Array<Int8> = [Int8(-103), Int8(72), Int8(91), Int8(43), Int8(71), Int8(-64), Int8(93), Int8(100), Int8(72), Int8(112)]
public let var1254 : (Option<Bool>, UInt64, Int16, Array<Bool>) = (([false, false, true, true, true, false, false, true, true, false] as Bool), UInt64(Int16(Int16(-43))), Int16(UInt8(92)), [false, false, false, ((Option<(Array<Int32>, Range<UInt32>, Int32, Range<Int16>, (Range<UInt32>, Int64, Int16, (UInt64, Range<UInt64>, Int8, Option<Bool>, Range<UInt32>, Int16)), Range<Int32>)>.None as Range<Int8>) is UInt8), ((Int32(-22), [Int8(10), Int8(101), Int8(-48), Int8(4), Int8(30), Int8(93), Int8(56), Int8(89), Int8(-79), Int8(-67)]) is Interface26), ((Class23() as Bool) is (Interface32) -> Range<Int8>), (Class23() is Int16), (((), (Int32(109)&127..=Int32(114)&127:120|1), Int8(20), Float32(46.0), (UInt8(60)&127..=UInt8(194)&127:((-93)|1))) is (UInt64, Range<UInt64>, Int8, Option<Bool>, Range<UInt32>, Int16)), (Class23() is Interface30), false])
public var var1295 : ?((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit) = Option<((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)>.None
public let var1313 : Float64 = Float64(Float32(101.0))
public var var1334 : Unit = ()
public let var1364 : ?Range<Int8> = Option<Range<Int8>>.None
public let var1414 : Range<UInt32> = (UInt32(112)&127..=UInt32(234)&127:(-20)|1)
public var var1421 : Range<UInt16> = (UInt16(193)&127..UInt16(192)&127:((-102)|1))
public var var1437 : UInt64 = UInt64(UInt16(194))
public var var1466 : Range<Int64> = (Int64((-116))&127..=Int64(UInt32(Int16(126)))&127:(Int64(UInt8(217))|1))
public var var1489 : Unit = ()
public var var1503 : Int8 = Int8(Int8(Int8(UInt8(40))))
public let var1520 : (Range<Int64>, Range<UInt16>, UInt64, Unit, UInt8) = ((51&127..=(-37)&127:(Int64(Int16(UInt8(210)))|1)), (UInt16(15)&127..=UInt16(UInt8(UInt8(253)))&127:(Int64(Int32(111))|1)), UInt64(239), (), UInt8(37))
public var var1552 : ?String = (Class23() as String)
public let var1592 : (Interface34, Range<UInt8>, Rune, Rune, Range<Int16>) = (Class23(), (UInt8(17)&127..=UInt8(66)&127:78|1), 'e', 'U', (Int16(20)&127..Int16(UInt16(UInt16(83)))&127:(Int64(Int64(UInt8(86)))|1)))
public let var1617 : Range<UInt8> = (UInt8(103)&127..UInt8(UInt8(102))&127:(95|1))
public let var1655 : ?Rune = (Class23() as Rune)
public let var1678 : Array<Int8> = [Int8(-120), Int8(Int8(Int8(Int8(-22)))), Int8(Int8(UInt8(144))), Int8(46), Int8(-5), Int8(82), Int8(42), Int8(Int8(-46)), Int8(-108), Int8(-72)]
public var var1741 : UInt8 = UInt8(UInt8(Int8(UInt8(9))))
public let var1748 : Int8 = Int8(Int8(121))
public let var1761 : Array<Option<((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)>> = Array<Option<((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)>>(10){ i => Option<((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)>.None }
var var1866 : Interface34 = Class23()
public let var1870 : Array<Int8> = [Int8(-12), Int8(-125), Int8(29), Int8(-49), Int8(-77), Int8(-50), Int8(85), Int8(71), Int8(-76), Int8(54)]
public var var1940 : Int32 = Int32(-97)
public let var1953 : ?Float64 = Option<Float64>.None
public let var1976 : ?Bool = ((Int16(-101)&127..=Int16(114)&127:(-119)|1) as Bool)
public var var1988 : Unit = ()
var var2001 : (UInt64, Range<UInt64>, Int8, Option<Bool>, Range<UInt32>, Int16) = (UInt64(Int32(-112)), (UInt64(Int8(-86))&127..UInt64(170)&127:((-34)|1)), Int8(UInt8(15)), Option<Bool>.None, (UInt32(89)&127..UInt32(132)&127:(-47)|1), Int16(UInt16(79)))
public let var2026 : Range<UInt64> = (UInt64(214)&127..UInt64(159)&127:(-124)|1)
public var var2066 : Int8 = Int8(Int8(65))
public var var2132 : ?((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit) = ((Int16(-80)&127..=Int16(-31)&127:(Int64(UInt16(69))|1)) as ((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit))
public let var2289 : Class23 = Class23()
public var var2344 : Array<Interface32> = [Class23(), Class23(), Class23(), Class23(), Class23(), Class23(), Class23(), Class23(), Class23(), Class23()]
public let var2458 : Int8 = Int8(3)
public let var2576 : ?Bool = Option<Bool>.None
public let var2638 : Int64 = (-59)
public var var2659 : Bool = false
public var var2713 : Option<Option<Bool>> = Option<Option<Bool>>.None
public var var2733 : UInt8 = UInt8(Int8(-88))
public var var2780 : Option<Interface32> = Option<Interface32>.None
public let var2805 : Option<Int64> = Option<Int64>.None
public let var3011 : ??Bool = ([Int8(-14), Int8(62), Int8(-38), Int8(3), Int8(80), Int8(-8), Int8(-85), Int8(-52), Int8(73), Int8(70)] as Option<Bool>)
public var var3021 : UInt64 = UInt64(144)
public let var3064 : Bool = ((((-43)&127..(-30)&127:(-128)|1), (UInt16(97)&127..UInt16(Int16(-23))&127:(Int64(Int16(-70))|1)), UInt64(UInt32(Int8(20))), (), UInt8(88)) is (Float64) -> (UInt64, Range<UInt64>, Int8, Option<Bool>, Range<UInt32>, Int16))
public let var3094 : Array<Int32> = Array<Int32>(10){ i => Int32(-32) }
public var var3140 : Interface32 = Class23()
public let var3167 : (Unit, Range<Int32>, Int8, Float32, Range<UInt8>) = ((), (Int32(UInt8(240))&127..=Int32(UInt8(Int8(-103)))&127:(60|1)), Int8(-35), Float32(Float32(Float32(Float32(86.0)))), (UInt8(43)&127..UInt8(57)&127:99|1))
public let var3194 : Int64 = Int64(UInt32(99))
let var3239 : Interface31 = Class23()
public var var3272 : Unit = ()
public var var3312 : ?Bool = Option<Bool>.None
public let var3477 : Bool = ((((Class23(), (UInt8(88)&127..=UInt8(38)&127:(96|1)), 'X', 'N', (Int16(29)&127..Int16(86)&127:(-2)|1)) as Bool) as Int64) is (UInt8) -> Option<Bool>)
public var var3563 : ?Range<UInt8> = ("q${var249}`fcqtb'?6" as Range<UInt8>)
public var var3568 : UInt8 = UInt8(Int8(Int8(Int8(Int8(101)))))
public var var3667 : Float32 = Float32(Float32(77.0))
public let var3679 : UInt16 = UInt16(242)
var var3686 : ??Float64 = ((Int32(-93)&127..=Int32(-12)&127:(Int64(Int32(UInt32(112)))|1)) as Option<Float64>)
public var var3731 : ?Range<UInt8> = Option<Range<UInt8>>.None
public let var3734 : Range<UInt8> = (UInt8(225)&127..UInt8(UInt8(UInt8(48)))&127:((-73)|1))
public var var3743 : ?Range<UInt8> = Option<Range<UInt8>>.None
let var3761 : ??Float64 = ([Int8(105), Int8(99), Int8(-124), Int8(-116), Int8(-105), Int8(46), Int8(66), Int8(81), Int8(5), Int8(41)] as Option<Float64>)
public let var3768 : Option<Range<UInt8>> = (Option<Option<Float64>>.None as Range<UInt8>)
public let var3787 : Unit = ()
public let var3831 : Array<Range<UInt8>> = [(UInt8(140)&127..=UInt8(112)&127:(-64)|1), (UInt8(49)&127..=UInt8(62)&127:(-64)|1), (UInt8(7)&127..=UInt8(153)&127:(-36)|1), (UInt8(27)&127..=UInt8(181)&127:(-41)|1), (UInt8(1)&127..UInt8(154)&127:72|1), (UInt8(29)&127..=UInt8(208)&127:(-17)|1), (UInt8(22)&127..UInt8(18)&127:11|1), (UInt8(217)&127..UInt8(104)&127:56|1), (UInt8(1)&127..=UInt8(26)&127:83|1), (UInt8(8)&127..UInt8(23)&127:118|1)]
public let var3856 : (Array<Int32>, Range<UInt32>, Int32, Range<Int16>, (Range<UInt32>, Int64, Int16, (UInt64, Range<UInt64>, Int8, Option<Bool>, Range<UInt32>, Int16)), Range<Int32>) = ([Int32(108), Int32(-53), Int32(-65), Int32(42), Int32(-68), Int32(UInt16(222)), Int32(Int32(Int32(41))), Int32(UInt16(164)), Int32(105), Int32(-74)], (UInt32(148)&127..=UInt32(UInt16(45))&127:(70|1)), Int32(UInt8(132)), (Int16(32)&127..Int16(-65)&127:(-84)|1), ((UInt32(51)&127..=UInt32(251)&127:(Int64(UInt64(202))|1)), Int64(Int8(UInt8(94))), Int16(UInt8(169)), (UInt64(Int16(-33)), (UInt64(78)&127..UInt64(82)&127:(95|1)), Int8(Int8(-54)), Option<Bool>.None, (UInt32(114)&127..=UInt32(65)&127:((-32)|1)), Int16(Int16(-22)))), (Int32(UInt8(175))&127..=Int32(72)&127:((-125)|1)))
public var var3951 : Int64 = Int64(UInt64(185))
public let var3971 : Range<Int32> = (Int32(UInt32(162))&127..=Int32(49)&127:(Int64(Int8(Int8(Int8(-87))))|1))
public let var4020 : UInt32 = UInt32(UInt32(Int8(Int8(42))))
public let var4082 : Bool = (Class23() is ((Array<Int32>, Range<UInt32>, Int32, Range<Int16>, (Range<UInt32>, Int64, Int16, (UInt64, Range<UInt64>, Int8, Option<Bool>, Range<UInt32>, Int16)), Range<Int32>)) -> Bool)
public var var4113 : Range<UInt8> = (UInt8(UInt8(22))&127..=UInt8(93)&127:((-20)|1))
public var var4172 : Interface29 = Class23()
public var var4272 : Int32 = Int32(Int32(-88))
public let var4324 : Interface26 = Class23()
public var var4417 : Int8 = Int8(87)
public let var4508 : Option<Bool> = Option<Bool>.None
public let var4518 : Interface33 = Class23()
let var4523 : Option<Interface33> = (Option<Interface34>.None as Interface33)
public var var4545 : Range<UInt32> = (UInt32(UInt32(UInt16(66)))&127..=UInt32(UInt16(Int8(Int8(1))))&127:((-63)|1))
public var var4575 : Rune = 'F'
public let var4730 : Range<UInt8> = (UInt8(63)&127..=UInt8(156)&127:((-104)|1))
public var var4754 : UInt8 = UInt8(147)
public let var4784 : Int16 = Int16(59)
public let var4805 : Bool = true
var var4895 : Rune = 'k'
public var var5015 : Int16 = Int16(Int16(26))
public let var5065 : Interface28 = Class23()
public let var5099 : Range<UInt64> = (UInt64(9)&127..UInt64(45)&127:(-105)|1)
public let var5160 : ?Class23 = Option<Class23>.None
public let var5173 : Option<Option<Int8>> = Option<Option<Int8>>.None
public let var5241 : (Range<UInt32>, Range<Int8>, Range<UInt16>, Range<UInt8>, Bool, Int32, Range<UInt16>) = ((UInt32(UInt16(UInt16(216)))&127..=UInt32(Int32(UInt32(240)))&127:(Int64(UInt8(134))|1)), (Int8(UInt8(85))&127..=Int8(UInt8(UInt8(36)))&127:((-62)|1)), (UInt16(19)&127..=UInt16(110)&127:(-7)|1), (UInt8(87)&127..UInt8(45)&127:(-99)|1), (Option<Bool>.None is Option<String>), Int32(UInt32(74)), (UInt16(156)&127..UInt16(Int16(-43))&127:(Int64(Int32(Int8(-51)))|1)))
public var var5312 : Array<Float32> = [Float32(97.0), Float32(Float32(-57.0)), Float32(Float32(Float32(113.0))), Float32(-37.0), Float32(53.0), Float32(-4.0), Float32(-91.0), Float32(-80.0), Float32(Float32(Float32(-105.0))), Float32(Float32(Float32(88.0)))]
public var var5372 : Array<Float32> = [Float32(108.0), Float32(42.0), Float32(Float32(Float32(Float32(69.0)))), Float32(123.0), Float32(Float32(17.0)), Float32(Float32(Float32(35.0))), Float32(Float32(Float32(-79.0))), Float32(103.0), Float32(Float32(-52.0)), Float32(Float32(-76.0))]
public let var5458 : ??Option<Interface32> = Option<Option<Option<Interface32>>>.None
public var var5463 : ?Option<Interface32> = (Option<Array<Int8>>.None as Option<Interface32>)
public let var5507 : Array<Interface30> = Array<Interface30>(10){ i => Class23() }
public var var5667 : Class23 = Class23()
public let var5695 : ?Unit = (Option<UInt8>.None as Unit)

public interface Interface33 {

}

public interface Interface32 <: Interface33 {

}

public interface Interface31 <: Interface32 {

}

public interface Interface30 <: Interface31 {

}

public interface Interface29 <: Interface30 & Interface31 {
    func func433(param434 : Unit, param435 : Range<Int64>) : Unit { // block id: 436
        var312 |= var443[0] % (([Int32(-105), Int32(37), Int32(125), Int32(20), Int32(39), Int32(81), Int32(27), Int32(-64), Int32(-46), Int32(-80)][8]) | 1)
    }

}

public interface Interface34 <: Interface31 {

}

public interface Interface28 <: Interface29 & Interface34 {

}

public interface Interface27 <: Interface28 {

}

public interface Interface26 <: Interface27 {

}

public open class Class23 <: Interface26 & Interface27 & Resource {
    public init() { // block id: 25

    }
;
    public static let var576 : Bool = true;
    public static var var1161 : Range<UInt32> = (UInt32(190)&127..UInt32(155)&127:10|1);
    private init(namedParam2700 ! : (Enum342, (Unit, Range<Int32>, Int8, Float32, Range<UInt8>)) -> Array<Int8>, namedParam2704 ! : UInt64, namedParam2705 ! : Range<UInt64>) { // block id: 2706
        (var2713 ?? Option<Bool>.Some((var1976 ?? true)));
        var443;
        var var2740 : Float32 = Float32(Float32(-89.0));
        let var2753 : Int64 = Int64(Int64(UInt32(UInt16(150))));
        match {
            case try { // block id: 2723
            var799 - var799
        } catch (e: Exception) { // block id: 2727
            Float32(118.0)
        } finally { // block id: 2729
            ();
            var2733 ^= UInt8(44);
            Float32(-85.0)
        } >= Float32(var2740) => 
            var var2750 : Option<Int64> = Option<Int64>.None;
            (var2750 ?? var2753);
            try { // block id: 2759
                ();
                var2576;
                UInt8(240)
            } catch (_) { // block id: 2763
                (var708&127..=var708&127:(var317|1));
                var951 &= var2638;
                UInt8(174)
            } finally { // block id: 2772
                ();
                ();
                UInt8(161) >> ((UInt8(150)) & 7)
            }
            case _ => 
            var2780;
            match (var430) {
                case _ : Rune => 
                    Option<Int64>.None
                
                case caseVar2790 => 
                    Option<Int64>.Some((-39))
                
                case caseVar2796 : Option<Interface32> => 
                    var1334;
                    var1334;
                    if (var105) { Option<Int64>.Some(54) } else { var2805 } 
                
                case _ => 
                    var2805
                
            };
            (Option<UInt8>.Some(var57) ?? UInt8(197))
        }
    }
;
    public init(param2834 : Range<UInt16>, param2835 : Option<((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)>, optionalParam2836 ! : (Float64, Range<Int16>, Option<((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)>, Int8) = (Float64(Float32(-114.0)), (Int16(-73)&127..Int16(57)&127:(Int64(Int32(Int8(66)))|1)), Option<((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)>.Some((((), (Int32(-101)&127..=Int32(107)&127:(23|1)), Int8(58), Float32(57.0), (UInt8(248)&127..UInt8(109)&127:(-93)|1)), (UInt8(213)&127..UInt8(15)&127:(-106)|1), ())), Int8(UInt8(Int8(-98))))) { // block id: 2862
        try { // block id: 2864
            try { // block id: 2866
                [(UInt8(161)&127..=UInt8(177)&127:71|1), (UInt8(34)&127..UInt8(7)&127:(-127)|1), (UInt8(77)&127..=UInt8(104)&127:(-66)|1), (UInt8(164)&127..UInt8(220)&127:(-9)|1), (UInt8(242)&127..=UInt8(151)&127:29|1), (UInt8(204)&127..UInt8(44)&127:70|1), (UInt8(137)&127..UInt8(137)&127:29|1), (UInt8(215)&127..UInt8(195)&127:62|1), (UInt8(245)&127..UInt8(42)&127:(-8)|1), (UInt8(143)&127..UInt8(157)&127:(-54)|1)]
            } finally { // block id: 2868
                let var2872 : Int8 = Int8(-69);
                var1503 += var2872;
                var105 ||= false;
                [(UInt8(167)&127..=UInt8(36)&127:(-114)|1), (UInt8(208)&127..UInt8(250)&127:(-2)|1), (UInt8(2)&127..UInt8(135)&127:(-41)|1), (UInt8(203)&127..=UInt8(118)&127:108|1), (UInt8(28)&127..UInt8(224)&127:(-24)|1), (UInt8(81)&127..UInt8(249)&127:62|1), (UInt8(0)&127..UInt8(247)&127:(-75)|1), (UInt8(90)&127..=UInt8(247)&127:52|1), (UInt8(39)&127..UInt8(197)&127:98|1), (UInt8(218)&127..=UInt8(81)&127:(-84)|1)]
            }
        } finally { // block id: 2878
            ();
            var1295;
            [(UInt8(50)&127..=UInt8(203)&127:14|1), (UInt8(157)&127..UInt8(216)&127:13|1), (UInt8(214)&127..UInt8(43)&127:49|1), (UInt8(170)&127..=UInt8(68)&127:(-61)|1), (UInt8(224)&127..UInt8(164)&127:(-45)|1), (UInt8(237)&127..UInt8(7)&127:(-78)|1), (UInt8(74)&127..UInt8(121)&127:(-51)|1), (UInt8(94)&127..UInt8(66)&127:59|1), (UInt8(110)&127..=UInt8(239)&127:103|1), (UInt8(142)&127..=UInt8(116)&127:(-50)|1)]
        };
        var var2889 : ??Bool = ((UInt32(32)&127..=UInt32(75)&127:64|1) as Option<Bool>);
        Option<Option<Bool>>.Some((var2889 ?? (Option<Range<Int8>>.Some((Int8(-70)&127..=Int8(-26)&127:(-101)|1)) as Bool)));
        ((((50&127..40&127:(-90)|1) as ((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)) as Option<Bool>) ?? match (var2733 ** (UInt8(113) & 3)) {
            case caseVar2909 : (Float64, Range<Int16>, Option<((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)>, Int8) => 
                ();
                Option<Bool>.Some(false)
            
            case _ : (UInt64, Range<UInt64>, Int8, Option<Bool>, Range<UInt32>, Int16) => 
                if (false) { (Class23(), (var1741&127..=var1741&127:((-32)|1)), var417, 'm', var977) } else { var148 } ;
                if (var2659) { var356 } else { Option<Bool>.None } 
            
            case _ => 
                if (true) { Option<Bool>.None } else { var356 } 
            
        })
    }
;
    public init(param2992 : Option<((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)>, namedParam2993 ! : Option<Range<Int8>>, optionalParam2994 ! : Range<Int16> = (Int16(Int16(-52))&127..Int16(Int16(Int8(UInt8(185))))&127:(16|1))) { // block id: 3003
        match (match (if (var576) { Option<Option<Bool>>.Some(Option<Bool>.None) } else { var3011 } ) {
                case caseVar3016 => 
                    var1489;
                    var3021 &= var3021;
                    let var3038 : Array<Float32> = Array<Float32>(10){ i => Float32(-43.0) };
                    if (var105) { [var799, Float32(-58.0), var799, Float32(5.0), Float32(-79.0), Float32(-46.0), var799, var799, Float32(-8.0), var799] } else { var3038 } 
                
                case _ => 
                    var var3060 : Int64 = (-22);
                    var951 ^= var3060;
                    if (var3064) { [var799, Float32(-123.0), Float32(-68.0), var799, var799, var799, var799, var799, var799, Float32(44.0)] } else { [Float32(-31.0), Float32(-54.0), Float32(112.0), Float32(-64.0), Float32(-93.0), Float32(79.0), Float32(4.0), Float32(-126.0), Float32(6.0), Float32(-101.0)] } 
                
            }) {
            case _ => 
                var3094;
                var2576
            
        };
        var1334
    }
;
    static var var3150 : Interface32 = Class23();
    public static let var3244 : Interface31 = Class23();
    public init(param2666 : Bool, optionalParam2667 ! : (Range<Int64>, Range<UInt16>, UInt64, Unit, UInt8) = ((Int64(Int32(Int16(45)))&127..Int64(Int16(-107))&127:(36|1)), (UInt16(170)&127..UInt16(UInt8(Int8(-3)))&127:(Int64(UInt16(52))|1)), UInt64(Int8(Int8(-32))), (), UInt8(Int8(UInt8(227)))), namedParam2690 ! : Int16) { // block id: 2691
        let var2954 : Interface26 = Class23();
        try { // block id: 2693
            let var2696 : Interface32 = Class23();
            let var2819 : (Enum342, (Unit, Range<Int32>, Int8, Float32, Range<UInt8>)) -> Array<Int8> = func1670;
            [var2696, Class23(namedParam2700 : var2819, namedParam2704 : UInt64(85), namedParam2705 : (var1437&127..UInt64(4)&127:((-75)|1))), var2696, Class23(), var2696, Class23(), var2696, var2696, Class23((UInt16(218)&127..UInt16(169)&127:((-42)|1)), var2132), Class23(namedParam2700 : func1670, namedParam2704 : UInt64(133), namedParam2705 : (UInt64(53)&127..=UInt64(15)&127:(-15)|1))]
        } catch (e: Exception) { // block id: 2948
            try (resource = Class23()) { // block id: 2950

            } catch (_) { // block id: 2951
                Option<((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)>.None;
                var2954;
                ()
            } finally { // block id: 2957
                ();
                var951 += 93;
                var2733 *= UInt8(11)
            };
            var var2977 : Interface32 = Class23(namedParam2700 : func1670, namedParam2704 : UInt64(Int16(Int16(UInt16(173)))), namedParam2705 : (UInt64(UInt16(117))&127..=UInt64(Int8(-68))&127:((-43)|1)));
            var var3135 : (Enum342, (Unit, Range<Int32>, Int8, Float32, Range<UInt8>)) -> Array<Int8> = func1670;
            var var3153 : Interface32 = Class23(namedParam2700 : func1670, namedParam2704 : UInt64(97), namedParam2705 : (UInt64(4)&127..=UInt64(228)&127:(-68)|1));
            var var3199 : ?Range<Int8> = Option<Range<Int8>>.None;
            if (true) { [Class23(namedParam2700 : func1670, namedParam2704 : UInt64(34), namedParam2705 : (UInt64(167)&127..UInt64(120)&127:(var951|1))), Class23(), var2977, Class23(var1295, namedParam2993 : var1364), var2977, var2977, var2977, var2977, var2977, var2977] } else { [Class23((UInt16(212)&127..var708&127:((-32)|1)), Option<((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)>.None), Class23(namedParam2700 : var3135, namedParam2704 : var1437, namedParam2705 : (UInt64(92)&127..UInt64(144)&127:84|1)), var3140, Class23(var1073, namedParam2993 : var1364, optionalParam2994 : (var53&127..=var53&127:((-60)|1))), var3150, var3153, var3140, Class23((UInt16(79)&127..var708&127:(81|1)), Option<((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)>.Some((var3167, var1617, ()))), Class23(), Class23(Option<((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)>.Some((var3167, (var830&127..=var2733&127:(var3194|1)), ())), namedParam2993 : var3199)] } 
        };
        try { // block id: 3202
            var loopTimeVar3208 : Int64 = 0;
            do {
                loopTimeVar3208++;
                ()
            } while ((var3064) && loopTimeVar3208 < 100 ) ;
            var487;
            if (param2666) { // block id: 3212
                var185;
                ()
            } else if (var2659) { // block id: 3216
                var207 ^= UInt32(187);
                var2026;
                var1988
            }
        } finally { // block id: 3222
            ()
        };
        if ((!(Option<Bool>.None ?? var3064))) { match (Int64(var2066)) {
            case 22 | 5 | -90 => 
                if (var3064) { Class23() } else { var3239 } 
            
            case _ => 
                var3244
            
        } } else { var3239 } 
    }
;
    public static let var4625 : (Unit, Range<Int32>, Int8, Float32, Range<UInt8>) = ((), (Int32(-61)&127..Int32(-83)&127:(-87)|1), Int8(-15), Float32(3.0), (UInt8(234)&127..=UInt8(152)&127:121|1));
    private static var var4649 : Interface32 = Class23();
    static var var4684 : Int64 = 114;
    private static var var4814 : Int8 = Int8(-5);
    private static let var4918 : Interface32 = Class23();
    public init(optionalParam1124 ! : Option<((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)> = Option<((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)>.Some((((), (Int32(3)&127..=Int32(78)&127:(-60)|1), Int8(-24), Float32(-1.0), (UInt8(156)&127..UInt8(225)&127:(-38)|1)), (UInt8(181)&127..=UInt8(Int8(-44))&127:(Int64((-42))|1)), ())), namedParam1140 ! : (Rune, (Interface34, Range<UInt8>, Rune, Rune, Range<Int16>), Unit, Range<UInt8>) -> Bool) { // block id: 1146
        try { // block id: 1148
            var var1154 : UInt64 = UInt64(UInt16(124));
            if (var576) { // block id: 1151
                var1154++;
                ();
                ([Int32(89), Int32(126), Int32(5), Int32(43), Int32(31), Int32(-64), Int32(-50), Int32(34), Int32(74), Int32(112)], var1161, Int32(118), (var53&127..=var53&127:(var317|1)), var983, (var312&127..=var312&127:(var951|1)))
            } else { // block id: 1173
                Float32(-15.0);
                var443;
                let var1191 : Range<Int16> = (Int16(-46)&127..=Int16(UInt16(201))&127:(Int64(UInt64(72))|1));
                ([var312, Int32(65), var312, var312, Int32(49), var312, var312, Int32(116), Int32(86), Int32(-30)], var1161, var312, var1191, var983, (var312&127..=var312&127:(var317|1)))
            }
        } finally { // block id: 1203
            var490
        };
        var var1207 : (Rune) -> Unit = func738;
        let var4590 : (Enum342) -> Rune = func1210;
        (if (true) { Enum342.defaultValue } else { Enum342.defaultValue } |>var4590)|>var1207;
        let var4653 : Option<UInt8> = ('C' as UInt8);
        let var4788 : (Enum342, (Unit, Range<Int32>, Int8, Float32, Range<UInt8>)) -> Array<Int8> = func1670;
        var var4829 : ?((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit) = Option<((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)>.None;
        var var4853 : Int16 = Int16(Int16(71));
        let var4942 : ?Interface32 = (Option<Rune>.None as Interface32);
        [try { // block id: 4598
            var136;
            var3150
        } finally { // block id: 4601
            var708 >>= ((UInt16(43)) & 7);
            if (false) { var983 } else { ((UInt32(97)&127..=UInt32(253)&127:(-121)|1), (-57), var53, (var3021, (UInt64(168)&127..=UInt64(142)&127:(-96)|1), var2066, var1976, (UInt32(59)&127..=UInt32(122)&127:101|1), Int16(50))) } ;
            if (var3477) { Class23(Option<((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)>.Some((var4625, (UInt8(15)&127..=UInt8(37)&127:(-55)|1), ())), namedParam2993 : Option<Range<Int8>>.Some(var224), optionalParam2994 : var977) } else { var3150 } 
        }, var3150, try { // block id: 4640
            var185;
            if (var3064) { Class23() } else { var3140 } 
        } catch (e: Exception) { // block id: 4646
            ();
            var4649
        }, match (var4653) {
            case caseVar4658 : (Int32, Array<Int8>) => 
                var1655;
                Option<Option<Bool>>.Some(var356);
                Class23()
            
            case caseVar4666 => 
                if (false) { var4649 } else { Class23(namedParam2700 : func1670, namedParam2704 : var1437, namedParam2705 : (UInt64(210)&127..=UInt64(105)&127:(-23)|1)) } 
            
            case _ => 
                ();
                var1489;
                Class23()
            
        }, if ((var3194 < var4684)) { var3150 } else { (if (true) { Class23((UInt16(192)&127..=UInt16(13)&127:((-61)|1)), Option<((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)>.None) } else { Class23(var1421, Option<((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)>.Some(var1009)) } ) } , (([Int32(-22), Int32(-108), Int32(86), Int32(42), Int32(7), Int32(-5), Int32(101), Int32(-9), Int32(83), Int32(-98)] as Interface32) ?? match (UInt16(51)) {
            case 97 => 
                var185;
                var3272;
                var4649
            
            case caseVar4716 : Range<UInt16> => 
                var4545;
                var3150
            
            case caseVar4722 : Option<Range<UInt8>> => 
                if (false) { var3831 } else { [var659, var4730, (UInt8(174)&127..=UInt8(52)&127:38|1), var659, (var57&127..UInt8(60)&127:(84|1)), (var1741&127..UInt8(17)&127:(var4684|1)), var3734, (UInt8(248)&127..=var830&127:(var2638|1)), var3734, (UInt8(134)&127..=var4754&127:((-88)|1))] } ;
                (var1988, (Int32(40)&127..=Int32(-7)&127:(-93)|1), Int8(-79), var799, var659);
                Class23()
            
            case 239 | 162 | 206 | 208 => 
                ();
                var2780;
                var3140
            
            case _ => 
                Class23(var2659, optionalParam2667 : ((var317&127..=var317&127:((-53)|1)), (UInt16(187)&127..UInt16(61)&127:(-89)|1), UInt64(240), var1334, var1741), namedParam2690 : var4784);
                Class23(namedParam2700 : var4788, namedParam2704 : var1437, namedParam2705 : (UInt64(119)&127..UInt64(244)&127:(var3951|1)))
            
        }), if (if (false) { // block id: 4798
            if (true) { Option<Range<UInt8>>.None } else { Option<Range<UInt8>>.None } ;
            !var4805
        } else { // block id: 4807
            Float32(97.0) ** Float32(Int32(Float32(8.0)) & 3);
            var1503 <<= ((var4814) & 7);
            var2659
        }) { match (var207) {
            case caseVar4821 : (Option<Bool>, UInt64, Int16, Array<Bool>) => 
                var1988;
                if (true) { Class23(var1421, var4829) } else { Class23(false, optionalParam2667 : var1520, namedParam2690 : var53) } 
            
            case _ => 
                var3150
            
        } } else { try { // block id: 4839
            if (false) { Option<UInt8>.None } else { Option<UInt8>.Some(UInt8(25)) } ;
            if (var576) { Class23() } else { Class23(var1295, namedParam2993 : var1364, optionalParam2994 : (var4853&127..var4784&127:(var3194|1))) } 
        } catch (_) { // block id: 4858
            var3140
        } finally { // block id: 4860
            Int16(11);
            Class23((var3679&127..=UInt16(219)&127:(var4684|1)), Option<((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)>.None, optionalParam2836 : (53.0, var977, Option<((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)>.Some((var3167, var4730, ())), var4417))
        } } , Class23(), if (match (var4829) {
            case caseVar4883 : Array<Int8> => 
                var2659
            
            case caseVar4888 : Option<Range<Int8>> => 
                var1953;
                if (true) { 'C' } else { var4895 } ;
                false
            
            case _ : Option<((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)> => 
                var1503++;
                true
            
            case _ => 
                true
            
            case _ => 
                false
            
        }) { match (Class23()) {
            case caseVar4915 : Int16 => 
                var4918
            
            case _ => 
                if (var3064) { Class23(var3477, namedParam2690 : var4853) } else { Class23() } ;
                var1295;
                var4918
            
        } } else { (if (var576) { var4918 } else { Class23() } ) } , (if (false) { var4942 } else { var4942 }  ?? (var2780 ?? Class23(var1295, namedParam2993 : var1364)))]
    }
;
    var var5700 : Unit = ();
    public func func433(param434 : Unit, param435 : Range<Int64>) : Unit { // block id: 436
        var312 |= var443[0] % (([Int32(-105), Int32(37), Int32(125), Int32(20), Int32(39), Int32(81), Int32(27), Int32(-64), Int32(-46), Int32(-80)][8]) | 1)
    }

    public func isClosed(): Bool { return false }
    public func close(): Unit {}
}

public func func129(namedParam130 ! : Interface34, namedParam131 ! : Range<Int16>) : Option<Bool> { // block id: 132
    var136[3]
}


public func func216(param217 : Interface32) : Range<Int8> { // block id: 218
    try { // block id: 220
        UInt32(var207);
        var224
    } finally { // block id: 226
        let var233 : ?Range<Int8> = (Class23() as Range<Int8>);
        (var233 ?? var224)
    }
}


public enum Enum342 {
    defaultValue
}
public func func363(optionalParam364 ! : Rune = '2', namedParam366 ! : (Interface34, Range<UInt8>, Rune, Rune, Range<Int16>), namedParam367 ! : Unit, namedParam368 ! : Range<UInt8>) : Bool { // block id: 369
    let var375 : Range<UInt16> = (UInt16(UInt8(UInt8(90)))&127..=UInt16(236)&127:(Int64(Int64(UInt64(UInt32(178))))|1));
    try { // block id: 371
        let var389 : UInt16 = UInt16(169);
        try { // block id: 373
            var375
        } catch (_) { // block id: 385
            (UInt16(185)&127..=var389&127:((-83)|1))
        };
        ((), (Int32(26)&127..Int32(29)&127:8|1), Int8(74), Float32(-112.0), (UInt8(195)&127..UInt8(146)&127:(-2)|1))[0];
        [var105, var105, false, var105, var105, var105, false, false, true, false][5]
    } finally { // block id: 414
        true
    }
}


public func func474(param475 : Interface32) : (UInt64, Range<UInt64>, Int8, Option<Bool>, Range<UInt32>, Int16) { // block id: 476
    (var487 ?? var490)[4][3]
}




public func func669(param670 : (Array<Int32>, Range<UInt32>, Int32, Range<Int16>, (Range<UInt32>, Int64, Int16, (UInt64, Range<UInt64>, Int8, Option<Bool>, Range<UInt32>, Int16)), Range<Int32>)) : Bool { // block id: 671
    ();
    var136;
    false
}


public func func738(param739 : Rune) : Unit { // block id: 740
    var742;
    var var748 : Array<Int32> = [Int32(-35), Int32(97), Int32(-64), Int32(Int32(106)), Int32(-82), Int32(106), Int32(Int8(UInt8(60))), Int32(Int16(UInt16(219))), Int32(Int32(Int16(126))), Int32(8)];
    if (match (var748) {
        case _ => 
            var105
        
        case _ => 
            var var776 : (Unit, Range<Int32>, Int8, Float32, Range<UInt8>) = ((), (Int32(-3)&127..Int32(-60)&127:(66|1)), Int8(UInt8(20)), Float32(Float32(-80.0)), (UInt8(115)&127..=UInt8(187)&127:(65|1)));
            if (true) { var776 } else { (var185, (Int32(-6)&127..=Int32(96)&127:(var317|1)), Int8(-73), var799, (UInt8(106)&127..UInt8(254)&127:(-56)|1)) } ;
            var105
        
    } && match (Class23()) {
        case caseVar807 : Range<Int64> => 
            var105
        
        case _ : (Int32, Array<Int8>) => 
            !var105
        
        case caseVar817 : Range<Int64> => 
            ();
            let var821 : Unit = ();
            var821;
            var105
        
        case caseVar826 : (UInt64, Range<UInt64>, Int8, Option<Bool>, Range<UInt32>, Int16) => 
            var830 /= ((var57) | 1);
            true
        
        case _ => 
            if (var105) { (Int32(21), [Int8(25), var646, var646, var646, var646, Int8(-92), var646, var646, Int8(11), Int8(54)]) } else { var443 } ;
            Int32(-42) == Int32(-46)
        
    }) { // block id: 855
        if (true) { (var53&127..Int16(56)&127:(var317|1)) } else { (Int16(-16)&127..=Int16(-35)&127:4|1) } ;
        if (true) { // block id: 865

        }
    };
    var loopTimeVar1092 : Int64 = 0;
    do {
        loopTimeVar1092++;
        try (resource = Class23()) { // block id: 1060
            if (var105) { param739 } else { var417 } ;
            var185
        } catch (_) { // block id: 1066
            ();
            var830++
        } finally { // block id: 1070
            var799;
            var1073;
            var var1078 : Unit = ();
            var1078
        };
        ((), (var312&127..=Int32(-83)&127:(var317|1)), var646, Float32(-27.0), var659)[0]
    } while (((if (var105) { // block id: 871
        var var891 : (Range<UInt32>, Int64, Int16, (UInt64, Range<UInt64>, Int8, Option<Bool>, Range<UInt32>, Int16)) = ((UInt32(140)&127..UInt32(133)&127:(19|1)), Int64(UInt16(16)), Int16(Int8(Int8(Int8(-11)))), (UInt64(155), (UInt64(109)&127..=UInt64(Int8(103))&127:((-68)|1)), Int8(Int8(98)), ([Int32(-80), Int32(-28), Int32(-125), Int32(67), Int32(19), Int32(93), Int32(24), Int32(99), Int32(-15), Int32(-107)] as Bool), (UInt32(254)&127..UInt32(8)&127:45|1), Int16(UInt8(174))));
        ([var312, Int32(43), Int32(-117), var312, Int32(-89), var312, Int32(44), var312, var312, var312], (UInt32(89)&127..UInt32(112)&127:(-74)|1), Int32(-126), (Int16(94)&127..=Int16(-59)&127:(45|1)), var891, var928)
    } else if (true) { // block id: 937
        var708 += var708;
        if (var105) { (var53&127..=Int16(98)&127:(var317|1)) } else { (var53&127..var53&127:(var951|1)) } ;
        if (var105) { ([Int32(-127), Int32(124), var312, var312, Int32(116), var312, Int32(-110), Int32(123), var312, Int32(23)], (var207&127..=UInt32(91)&127:(var951|1)), Int32(-117), var977, var983, var928) } else { var490 } 
    } else { // block id: 1006
        var185;
        var1009;
        if (true) { ([Int32(-128), Int32(-31), Int32(40), var312, var312, Int32(-80), Int32(-122), var312, Int32(0), var312], (var700&127..var1047&127:(var951|1)), var312, (Int16(-7)&127..Int16(-64)&127:3|1), var983, (var312&127..=var312&127:((-99)|1))) } else { var490 } 
    }|>func669)) && loopTimeVar1092 < 100 ) 
}


public func func1402(param1403 : Float32) : Unit { // block id: 1404

}


public func func1541(param1542 : (Interface34, Range<UInt8>, Rune, Rune, Range<Int16>)) : Int8 { // block id: 1543
    try { // block id: 1545
        var1552.getOrThrow();
        Int8(-48)
    } catch (e: Exception) { // block id: 1556
        if (false) { (Class23(), (UInt8(231)&127..UInt8(10)&127:(-14)|1), var417, 'F', (Int16(-94)&127..=Int16(38)&127:13|1)) } else { (Class23(), (UInt8(220)&127..UInt8(192)&127:(var317|1)), 'H', var417, (Int16(39)&127..var53&127:(var317|1))) } ;
        try { // block id: 1578
            var312 ^= var312;
            [Int32(89), Int32(66), Int32(-106), Int32(12), Int32(-74), Int32(-20), Int32(112), Int32(-99), Int32(11), Int32(-49)];
            Int8(-80) / ((Int8(-9)) | 1)
        } finally { // block id: 1586
            var646 ^ Int8(8)
        }
    }
}

public func func1406(param1407 : Rune) : Float32 { // block id: 1408
    func738(if ((var1414, (var646&127..var646&127:((-54)|1)), var1421, (UInt8(146)&127..=UInt8(216)&127:(-49)|1), var105, Int32(-15), (var708&127..UInt16(86)&127:(46|1)))[4]) { match ((var1437&127..=UInt64(21)&127:(var951|1))) {
        case caseVar1444 => 
            'O'
        
        case caseVar1449 => 
            [true, true, false, false, true, false, true, false, true, false];
            'C'
        
        case _ => 
            var312 %= ((Int32(91)) | 1);
            var951++;
            if (true) { 'F' } else { 'E' } 
        
    } } else { match (var1466) {
        case _ => 
            var53 /= ((var53) | 1);
            if (var105) { 'F' } else { param1407 } 
        
        case _ : String => 
            var1489;
            ();
            'L'
        
        case caseVar1495 : Option<Range<Int8>> => 
            if (false) { caseVar1495 } else { var1364 } ;
            var1503 >>= ((var646) & 7);
            param1407
        
        case _ => 
            ();
            (UInt16(40)&127..UInt16(219)&127:34|1);
            'h'
        
    } } );
    let var1609 : Array<Float32> = [Float32(-96.0), Float32(73.0), Float32(74.0), Float32(-4.0), Float32(-21.0), Float32(-128.0), Float32(-3.0), Float32(-41.0), Float32(14.0), Float32(-43.0)];
    var var1629 : Range<UInt8> = (UInt8(42)&127..UInt8(52)&127:70|1);
    var var1636 : Range<UInt8> = (UInt8(68)&127..=UInt8(107)&127:(-115)|1);
    (var1520[3], var928, (var1592|>func1541), var1609[9], [var659, var1617, (UInt8(8)&127..=UInt8(52)&127:(74|1)), var1617, var1629, (var830&127..=UInt8(114)&127:((-67)|1)), var1636, (var830&127..var57&127:(4|1)), (UInt8(244)&127..UInt8(243)&127:(-65)|1), (UInt8(19)&127..UInt8(223)&127:(-91)|1)][8])[3]
}



public func func1670(optionalParam1671 ! : Enum342 = Enum342.defaultValue, namedParam1673 ! : (Unit, Range<Int32>, Int8, Float32, Range<UInt8>)) : Array<Int8> { // block id: 1674
    try { // block id: 1676
        var1678
    } finally { // block id: 1696
        Option<String>.Some(var249);
        [Int8(-101), Int8(-90), Int8(-55), Int8(84), Int8(63), Int8(-3), Int8(-110), Int8(-128), Int8(-119), Int8(-96)]
    }
}

public func func1301(param1302 : Interface33) : Array<Int8> { // block id: 1303
    var var1344 : Float64 = (-116.0);
    var var1378 : Interface30 = Class23();
    var var1389 : Int64 = Int64(Int16(UInt16(234)));
    ((Option<Float64>.Some(var1313) ?? 70.0), (Int16(-9)&127..=var53&127:(var317|1)), match (Int16(70)) {
        case -121 => 
            var71;
            (UInt8(225)&127..UInt8(72)&127:110|1);
            var1073
        
        case caseVar1331 : (Interface34, Range<UInt8>, Rune, Rune, Range<Int16>) => 
            var1334;
            'N';
            Option<((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)>.None
        
        case caseVar1340 => 
            var1344 /= Float64((Int32(var1344)) | 1);
            UInt32(112);
            if (var105) { var1073 } else { var1073 } 
        
        case _ => 
            var951 &= (-23);
            Float32(88.0);
            if (false) { Option<((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)>.None } else { Option<((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)>.None } 
        
    }, match (var1364) {
        case _ : Range<Int16> => 
            var646
        
        case caseVar1372 => 
            if (var105) { Class23() } else { var1378 } ;
            var646
        
        case caseVar1383 => 
            (Int32(103)&127..=var312&127:(var1389|1));
            var646 | Int8(85)
        
        case _ => 
            var646
        
    })[2];
    var var1647 : (Rune) -> Float32 = func1406;
    (var1655 ?? 'M')|>(var1647~>func1402);
    let var1701 : (Unit, Range<Int32>, Int8, Float32, Range<UInt8>) = ((), (Int32(-65)&127..Int32(-46)&127:(Int64(UInt64(151))|1)), Int8(93), Float32(Float32(-101.0)), (UInt8(33)&127..=UInt8(223)&127:3|1));
    try { // block id: 1660
        (Option<Array<Int8>>.None ?? [Int8(92), Int8(14), Int8(8), Int8(-114), Int8(-66), Int8(100), Int8(107), Int8(66), Int8(-22), Int8(-59)])
    } catch (_) { // block id: 1668
        func1670(namedParam1673 : var1701)
    }
}

public func func1833() : (Range<UInt32>, Int64, Int16, (UInt64, Range<UInt64>, Int8, Option<Bool>, Range<UInt32>, Int16)) { // block id: 1834
    let var1843 : ?Array<Int8> = (((-15.0), (Int16(27)&127..=Int16(-64)&127:(-121)|1), Option<((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)>.Some((((), (Int32(-48)&127..Int32(110)&127:(-65)|1), Int8(-118), Float32(8.0), (UInt8(210)&127..=UInt8(218)&127:40|1)), (UInt8(63)&127..=UInt8(216)&127:(98|1)), ())), Int8(103)) as Array<Int8>);
    match (match (false) {
            case false | true | false | false => 
                ();
                var1843
            
            case false | false | true => 
                var1866;
                Option<Array<Int8>>.Some(var1870)
            
            case _ => 
                var1843
            
            case _ => 
                Option<Array<Int8>>.None;
                if (false) { Option<Array<Int8>>.Some([Int8(54), Int8(-47), Int8(24), Int8(-15), Int8(46), Int8(-50), Int8(91), Int8(-75), Int8(80), Int8(-126)]) } else { Option<Array<Int8>>.None } 
            
        }) {
        case caseVar1886 : Interface27 => 
            let var1891 : Array<Int32> = [Int32(-25), Int32(68), Int32(-62), Int32(-32), Int32(-116), Int32(114), Int32(23), Int32(99), Int32(111), Int32(-110)];
            if (var105) { var1891 } else { [Int32(-96), Int32(-46), Int32(1), Int32(-5), Int32(-126), Int32(-25), Int32(90), Int32(-85), Int32(121), Int32(-86)] } 
        
        case caseVar1896 => 
            var1334;
            var var1903 : Array<Int32> = [Int32(-99), Int32(29), Int32(UInt16(83)), Int32(Int32(82)), Int32(32), Int32(Int8(Int8(-7))), Int32(Int16(Int8(UInt8(149)))), Int32(UInt8(UInt8(Int8(-68)))), Int32(UInt32(142)), Int32(Int8(89))];
            if (false) { [Int32(41), Int32(57), Int32(-26), Int32(-34), Int32(-5), Int32(5), Int32(104), Int32(123), Int32(-105), Int32(-18)] } else { var1903 } 
        
        case caseVar1929 => 
            Int8(59) | var646;
            var1241;
            [var312, Int32(112), var312, var1940, Int32(26), var1940, var1940, var1940, Int32(-103), var1940]
        
        case _ => 
            var1313;
            var1953;
            [Int32(52), Int32(-75), Int32(89), Int32(10), Int32(59), Int32(-122), Int32(-2), Int32(27), Int32(63), Int32(-31)]
        
        case _ => 
            var951 /= ((var317) | 1);
            Int16(48);
            [Int32(-104), Int32(-94), Int32(19), Int32(-89), Int32(-78), Int32(-6), Int32(100), Int32(-79), Int32(110), Int32(-74)]
        
    };
    match (try { // block id: 1965
            ();
            ((UInt32(56)&127..UInt32(167)&127:(-32)|1), 18, var53, (UInt64(26), (UInt64(41)&127..=UInt64(202)&127:107|1), Int8(-18), var1976, (UInt32(183)&127..UInt32(37)&127:(-89)|1), Int16(-23)));
            (UInt16(8)&127..=UInt16(135)&127:(-41)|1)
        } finally { // block id: 1982
            (UInt16(110)&127..UInt16(98)&127:(-90)|1)
        }) {
        case _ : Interface32 => 
            var1988;
            if (var105) { Class23() } else { Class23() } ;
            if (var105) { (var1414, (-115), var53, var2001) } else { ((var696&127..=var696&127:(var317|1)), var951, var53, (var1437, var2026, var1748, Option<Bool>.None, var1414, Int16(51))) } 
        
        case _ : UInt16 => 
            var1437 %= ((UInt64(202)) | 1);
            var983
        
        case caseVar2041 => 
            ();
            var983
        
        case caseVar2047 => 
            [var799, var799, Float32(-118.0), Float32(9.0), Float32(-53.0), Float32(9.0), var799, var799, var799, Float32(83.0)];
            var983
        
        case _ => 
            var1988;
            (var2066&127..var1748&127:(var951|1));
            var983
        
    }
}

public func func2296(param2297 : Option<Interface32>, optionalParam2298 ! : (UInt64, Range<UInt64>, Int8, Option<Bool>, Range<UInt32>, Int16) = (UInt64(165), (UInt64(28)&127..=UInt64(65)&127:(93|1)), Int8(81), Option<Bool>.None, (UInt32(85)&127..UInt32(Int8(-92))&127:((-113)|1)), Int16(Int8(Int8(Int8(-68))))), optionalParam2316 ! : (Option<Bool>, UInt64, Int16, Array<Bool>) = ((((96.0, (Int16(-38)&127..Int16(-22)&127:21|1), Option<((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)>.Some((((), (Int32(102)&127..Int32(-53)&127:3|1), Int8(126), Float32(49.0), (UInt8(33)&127..UInt8(76)&127:((-84)|1))), (UInt8(153)&127..=UInt8(69)&127:(-82)|1), ())), Int8(70)) as String) as Bool), UInt64(188), Int16(-16), [true, false, true, true, false, false, true, false, true, true])) : Interface32 { // block id: 2340
    var2344[1]
}

public func func2539(param2540 : UInt8) : Option<Bool> { // block id: 2541
    var1988;
    Option<Bool>.None
}








public func func2554(param2555 : Range<Int32>) : UInt8 { // block id: 2556
    Float32(Float32(if (var105) { // block id: 2561
        var799
    } else if (var105) { // block id: 2564
        ();
        ();
        var799 + var799
    } else { // block id: 2570
        if (var105) { Option<Bool>.Some(var105) } else { var2576 } ;
        var799
    }));
    if ((if (var105) { // block id: 2584
        var185;
        var490
    } else { // block id: 2587
        var2026;
        var951 **= (var317 & 3);
        var490
    }|>func669)) { // block id: 2593
        var loopTimeVar2600 : Int64 = 0;
        while ((var105) && loopTimeVar2600 < 100 ) {
            loopTimeVar2600++;
            var1617;
            ()
        };
        (Option<Unit>.None ?? ())
    } else if (false) { // block id: 2609
        let var2630 : Range<Int16> = (Int16(67)&127..Int16(113)&127:111|1);
        var var2662 : Interface29 = Class23();
        match (Int32(-35)) {
            case -56 | 94 => 
                var1489
            
            case _ : Unit => 
                let var2625 : Array<Int32> = [Int32(116), Int32(-63), Int32(98), Int32(113), Int32(31), Int32(53), Int32(35), Int32(29), Int32(-37), Int32(74)];
                if (true) { var487 } else { Option<(Array<Int32>, Range<UInt32>, Int32, Range<Int16>, (Range<UInt32>, Int64, Int16, (UInt64, Range<UInt64>, Int8, Option<Bool>, Range<UInt32>, Int16)), Range<Int32>)>.Some((var2625, (UInt32(13)&127..=UInt32(171)&127:99|1), var1940, var2630, ((var696&127..var700&127:((-55)|1)), var2638, var53, (var1437, var2026, Int8(-8), Option<Bool>.Some(var105), (UInt32(97)&127..=UInt32(113)&127:23|1), Int16(107))), (Int32(24)&127..=Int32(104)&127:(-85)|1))) } ;
                var1334
            
            case 0 | -71 | 51 => 
                var1503 += var1748;
                if (var2659) { var2662 } else { Class23(var105, optionalParam2667 : (var1466, (var708&127..=UInt16(236)&127:((-23)|1)), UInt64(36), var185, var57), namedParam2690 : Int16(-93)) } ;
                var1437 /= ((var3021) | 1)
            
            case 79 | -113 => 
                var185
            
            case _ => 
                [Int8(101), Int8(-117), Int8(4), Int8(-103), Int8(-3), Int8(124), Int8(59), Int8(13), Int8(-62), Int8(-10)];
                ()
            
        };
        (var224 as (Array<Int32>, Range<UInt32>, Int32, Range<Int16>, (Range<UInt32>, Int64, Int16, (UInt64, Range<UInt64>, Int8, Option<Bool>, Range<UInt32>, Int16)), Range<Int32>));
        var3272
    };
    try { // block id: 3275
        var830
    } catch (e: Exception) { // block id: 3277
        (Option<Option<Interface32>>.None ?? Option<Interface32>.Some(var3140));
        UInt8(214)
    } finally { // block id: 3287
        ();
        UInt8(Int8(101))
    }
}







public func func2441(param2442 : Array<Range<UInt8>>, param2443 : Float64) : Unit { // block id: 2444
    let var2545 : (UInt8) -> Option<Bool> = { lambdaParameter2548 : UInt8 => (Int16(-84) as Bool) };
    let var3345 : Bool = ([(UInt8(116)&127..UInt8(25)&127:47|1), (UInt8(UInt8(241))&127..=UInt8(150)&127:(99|1)), (UInt8(165)&127..UInt8(41)&127:(7|1)), (UInt8(15)&127..UInt8(58)&127:(-118)|1), (UInt8(UInt8(163))&127..=UInt8(84)&127:((-49)|1)), (UInt8(231)&127..UInt8(194)&127:32|1), (UInt8(192)&127..UInt8(56)&127:(-46)|1), (UInt8(42)&127..=UInt8(60)&127:(-32)|1), (UInt8(105)&127..UInt8(UInt8(82))&127:(Int64(UInt64(176))|1)), (UInt8(UInt8(184))&127..=UInt8(82)&127:((-126)|1))] is Option<Option<Interface32>>);
    let var3391 : Interface29 = Class23(true, optionalParam2667 : (((-117)&127..82&127:86|1), (UInt16(Int8(-44))&127..=UInt16(156)&127:(Int64(Int32(110))|1)), UInt64(UInt64(202)), (), UInt8(UInt8(225))), namedParam2690 : Int16(-86));
    func func2509(optionalParam2510 ! : (Rune, (Interface34, Range<UInt8>, Rune, Rune, Range<Int16>), Unit, Range<UInt8>) -> Bool = func363, namedParam2517 ! : UInt32, optionalParam2518 ! : Array<Int8> = [Int8(3), Int8(Int8(Int8(UInt8(91)))), Int8(Int8(94)), Int8(27), Int8(UInt8(Int8(UInt8(84)))), Int8(-39), Int8(32), Int8(74), Int8(-29), Int8(22)]) : Option<Float64> { // block id: 2537
        ((Int32(121)&127..Int32(56)&127:57|1)|>func2554) * (UInt8(108) / ((UInt8(1)) | 1))|>var2545;
        let var3306 : ?Unit = Option<Unit>.None;
        if ((try { // block id: 3303
            var1678;
            var3306;
            Option<Bool>.Some(false)
        } catch (_) { // block id: 3310
            var3312
        } ?? var2659)) { // block id: 3315

        } else if (var2659) { // block id: 3317
            [var2132, Option<((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)>.None, Option<((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)>.None, var2132, var2132, var2132, var2132, var2132, var2132, var2132];
            var loopTimeVar3334 : Int64 = 0;
            while ((var3064) && loopTimeVar3334 < 100 ) {
                loopTimeVar3334++;
                var1334
            };
            var loopTimeVar3340 : Int64 = 0;
            while ((false) && loopTimeVar3340 < 100 ) {
                loopTimeVar3340++;
                var1489
            }
        };
        if (try { // block id: 3343
            var3345
        } finally { // block id: 3378
            Float32(-81.0) ** Float32(Int32(var799) & 3);
            ();
            var2659
        }) { ((var3391 as Option<Float64>) ?? match (var2289) {
            case _ => 
                ();
                if (var105) { (Int32(68)&127..=Int32(-126)&127:((-38)|1)) } else { (Int32(-54)&127..=Int32(-59)&127:(-42)|1) } ;
                var1953
            
        }) } else { ("R.!DM=g_jZ" as Float64) } 
    }
;
    let var3443 : UInt32 = UInt32(30);
    var loopTimeVar3472 : Int64 = 0;
    do {
        loopTimeVar3472++;
        func func2506() : Option<Float64> { // block id: 2507
            func2509(namedParam2517 : match ((var1334, (var1940&127..=var1940&127:((-73)|1)), Int8(81), Float32(30.0), (UInt8(87)&127..=UInt8(116)&127:(-1)|1))) {
                case (caseVar3435 : Option<((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)>,caseVar3436 : Option<Rune>,_ : Interface26,_,caseVar3437) => 
                    var1421;
                    var1047 - var3443
                
                case _ : Option<Option<Bool>> => 
                    var700
                
                case caseVar3451 => 
                    var1047 * UInt32(207)
                
                case (_,_ : Option<Float64>,caseVar3458 : (UInt64, Range<UInt64>, Int8, Option<Bool>, Range<UInt32>, Int16),_ : Range<UInt8>,_ : UInt16) => 
                    var1503 |= var1748;
                    var3443
                
                case _ => 
                    ();
                    var3272;
                    UInt32(245) % ((UInt32(64)) | 1)
                
            })
        }
;
        func2506()
    } while (((match (Class23()) {
        case caseVar2451 : Int16 => 
            Option<Array<Int8>>.Some([var1503, var2066, var2458, Int8(95), var2066, Int8(-32), Int8(-7), Int8(117), var1503, var1503]);
            var1334;
            Option<((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)>.Some((((), (Int32(-122)&127..Int32(104)&127:((-9)|1)), var1503, var799, (UInt8(5)&127..var57&127:(var317|1))), var1617, var185))
        
        case _ => 
            var1988;
            Enum342.defaultValue;
            Option<((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)>.Some(((var1334, (Int32(-18)&127..Int32(-115)&127:(var951|1)), var2066, var799, (UInt8(74)&127..=UInt8(41)&127:((-81)|1))), var659, ()))
        
    } is Option<((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)>)) && loopTimeVar3472 < 100 ) ;
    var var3811 : ?Range<UInt8> = Option<Range<UInt8>>.None;
    let var3815 : UInt8 = UInt8(59);
    [match (if (var3477) { var1520 } else { (var1466, var1421, var3021, var1988, var830) } ) {
        case _ : Interface32 => 
            ();
            var185;
            (UInt8(161)&127..UInt8(190)&127:110|1)
        
        case (caseVar3505 : Range<Int16>,caseVar3506,caseVar3507,_,caseVar3508 : Option<Bool>) => 
            Option<Array<Int8>>.Some(var1870);
            (UInt8(61)&127..=UInt8(219)&127:(-62)|1)
        
        case _ => 
            (UInt8(237)&127..UInt8(45)&127:(-101)|1)
        
        case caseVar3519 : Range<Int64> => 
            ();
            (UInt8(154)&127..UInt8(199)&127:(var3194|1))
        
        case _ => 
            if (true) { var659 } else { (var1741&127..=UInt8(209)&127:((-55)|1)) } 
        
    }, try { // block id: 3536
        var708++;
        if (true) { (UInt8(177)&127..UInt8(151)&127:125|1) } else { (UInt8(39)&127..UInt8(202)&127:57|1) } 
    } catch (_) { // block id: 3543
        (UInt8(124)&127..UInt8(172)&127:28|1)
    } finally { // block id: 3545
        var1953;
        (var830&127..=var830&127:((-58)|1))
    }, (UInt8(53)&127..=UInt8(173)&127:18|1), (UInt8(44)&127..UInt8(177)&127:30|1), if ((Int32(51) < var312)) { (var3563 ?? (var3568&127..=var57&127:(var3194|1))) } else { match (Class23()) {
        case _ => 
            var1489;
            var1617
        
    } } , if (if (var3477) { // block id: 3585
        var2026;
        var951 <= (-97)
    } else { // block id: 3590
        var185;
        true && false
    }) { (Option<Range<UInt8>>.Some((var830&127..var1741&127:(var3194|1))) ?? (UInt8(127)&127..UInt8(227)&127:36|1)) } else { try { // block id: 3603
        var312 *= var312;
        if (false) { var659 } else { (UInt8(250)&127..UInt8(193)&127:(var3194|1)) } 
    } catch (e: Exception) { // block id: 3614
        if (false) { (UInt8(21)&127..UInt8(117)&127:75|1) } else { (var830&127..var3568&127:((-91)|1)) } 
    } } , match (match (var1940) {
            case caseVar3627 : Option<Range<Int8>> => 
                var2733 >>= ((UInt8(87)) & 7);
                (Int16(-62)&127..=var53&127:(40|1))
            
            case _ : Array<Float32> => 
                (Int16(-76)&127..Int16(-81)&127:32|1)
            
            case _ => 
                var443;
                var1334;
                var977
            
            case _ => 
                UInt16(104);
                var105 &&= true;
                var977
            
        }) {
        case caseVar3655 : Option<Range<Int8>> => 
            if (false) { (UInt8(54)&127..UInt8(199)&127:115|1) } else { var659 } 
        
        case _ => 
            Int32(34);
            var3667 += var799;
            (var2733&127..UInt8(217)&127:((-5)|1))
        
        case _ => 
            ();
            var3679;
            var1617
        
    }, (UInt8(171)&127..=UInt8(79)&127:63|1), if (match (var3686) {
        case caseVar3696 : Interface26 => 
            false
        
        case _ : Array<Int32> => 
            if (var2659) { var616 } else { (param2443, (Int16(-39)&127..Int16(41)&127:(var951|1)), Option<((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)>.Some(var1009), var1503) } ;
            ();
            var1437 <= var3021
        
        case _ => 
            var3064
        
        case _ => 
            true
        
    }) { (var3731 ?? var3734) } else { (var3743 ?? var659) } , (match (Option<Option<Float64>>.Some(var1953)) {
        case _ : (Range<UInt32>, Int64, Int16, (UInt64, Range<UInt64>, Int8, Option<Bool>, Range<UInt32>, Int16)) => 
            ();
            if (var3345) { var3761 } else { var3761 } ;
            if (false) { var3768 } else { Option<Range<UInt8>>.Some((UInt8(208)&127..=UInt8(254)&127:(var951|1))) } 
        
        case caseVar3778 => 
            Option<Range<UInt8>>.Some((UInt8(36)&127..UInt8(45)&127:45|1))
        
        case caseVar3784 => 
            var3787;
            var1976;
            Option<Range<UInt8>>.None
        
        case _ => 
            var487;
            (-47) % ((var3194) | 1);
            if (var3477) { var3768 } else { Option<Range<UInt8>>.None } 
        
        case _ => 
            Option<Range<UInt8>>.None
        
    } ?? (var3811 ?? (var3815&127..=var3568&127:((-113)|1))))];
    if (false) { // block id: 3821
        var loopTimeVar3825 : Range<UInt64> = (UInt64(186)&127..=UInt64(132)&127:(55|1));
        for (i in loopTimeVar3825 where var3477) {

        }
    }
}



public func func2384(param2385 : Int16) : (Array<Int32>, Range<UInt32>, Int32, Range<Int16>, (Range<UInt32>, Int64, Int16, (UInt64, Range<UInt64>, Int8, Option<Bool>, Range<UInt32>, Int16)), Range<Int32>) { // block id: 2386
    try (resource = Class23()) { // block id: 2388
        let var2392 : Interface28 = Class23();
        if (var105) { var2392 } else { Class23() } ;
        match (var1976) {
            case caseVar2399 : Array<Interface30> => 
                ();
                var312 += var1940;
                var var2407 : Float32 = Float32(-4.0);
                var2407 **= Float32(Int32(Float32(42.0)) & 3)
            
            case caseVar2412 : (Array<Int32>, Range<UInt32>, Int32, Range<Int16>, (Range<UInt32>, Int64, Int16, (UInt64, Range<UInt64>, Int8, Option<Bool>, Range<UInt32>, Int16)), Range<Int32>) => 
                (var312, [Int8(19), Int8(-68), Int8(-59), var646, var1748, Int8(23), var1748, var1748, Int8(-78), Int8(-4)]);
                (var57&127..UInt8(167)&127:(114|1));
                var708 >>= ((UInt16(198)) & 7)
            
            case _ => 
                var2026;
                ()
            
        }
    } finally { // block id: 2438
        var1421;
        func2441(var3831, var1313)
    };
    var1334;
    let var3930 : ?Unit = (Int8(UInt8(197)) as Unit);
    var var3993 : Range<UInt32> = (UInt32(74)&127..UInt32(81)&127:(-58)|1);
    try { // block id: 3836
        ();
        [var105, var105, true, true, var105, false, true, var105, var3064, true];
        (Option<(Array<Int32>, Range<UInt32>, Int32, Range<Int16>, (Range<UInt32>, Int64, Int16, (UInt64, Range<UInt64>, Int8, Option<Bool>, Range<UInt32>, Int16)), Range<Int32>)>.Some(var3856) ?? ([Int32(69), Int32(73), Int32(-122), Int32(-120), Int32(78), Int32(-8), Int32(-83), Int32(46), Int32(-13), Int32(60)], (UInt32(230)&127..=UInt32(171)&127:(-12)|1), Int32(-18), (Int16(-67)&127..=Int16(32)&127:(-10)|1), var983, (Int32(-17)&127..Int32(52)&127:(99|1))))
    } finally { // block id: 3923
        (var3930 ?? var3272);
        try { // block id: 3936
            (var1466, var1421, UInt64(82), (), UInt8(104));
            if (var3477) { (var3094, (UInt32(220)&127..UInt32(71)&127:(var3951|1)), Int32(121), (param2385&127..Int16(94)&127:((-104)|1)), (var1414, 23, var53, (UInt64(214), (UInt64(66)&127..UInt64(108)&127:48|1), Int8(-84), Option<Bool>.None, (UInt32(17)&127..UInt32(224)&127:(-58)|1), Int16(-87))), var3971) } else { ([var312, Int32(76), var312, var1940, Int32(52), Int32(-34), var1940, Int32(73), var1940, var1940], var3993, Int32(-104), (Int16(-70)&127..=Int16(-12)&127:(-9)|1), (var3993, var951, var53, var136), var928) } 
        } finally { // block id: 4003
            var3272;
            ([var1940, var1940, var312, var312, Int32(-72), Int32(-113), Int32(-110), var1940, var312, var1940], (UInt32(108)&127..=var4020&127:(110|1)), var312, (Int16(111)&127..Int16(79)&127:14|1), var983, (Int32(-51)&127..Int32(75)&127:65|1))
        }
    }
}

public func func2384<T0>() : (Array<Int32>, Range<UInt32>, Int32, Range<Int16>, (Range<UInt32>, Int64, Int16, (UInt64, Range<UInt64>, Int8, Option<Bool>, Range<UInt32>, Int16)), Range<Int32>) { // block id: 2170
    var loopTimeVar2202 : Int64 = 0;
    while ((try { // block id: 2173
        false
    } catch (e: Exception) { // block id: 2175
        var53 >= Int16(30)
    }) && loopTimeVar2202 < 100 ) {
        loopTimeVar2202++;
        if (true) { // block id: 2182
            (Class23(), (UInt8(237)&127..UInt8(35)&127:26|1), 'M', var417, (var53&127..=Int16(-47)&127:(var951|1)))
        } else { // block id: 2192
            (var742, (UInt8(187)&127..=UInt8(159)&127:114|1), 'z', var417, (Int16(56)&127..=Int16(72)&127:23|1))
        };
        var830--
    };
    let var2211 : Array<Int32> = [Int32(-119), Int32(-4), Int32(-95), Int32(-126), Int32(53), Int32(36), Int32(-74), Int32(-106), Int32(-103), Int32(91)];
    match (UInt8(220)) {
        case caseVar2207 : Bool => 
            var1334;
            var2211
        
        case _ : Bool => 
            var2211
        
        case _ : Int32 => 
            var var2222 : Bool = (Option<Bool>.None is (Unit, Range<Int64>) -> Unit);
            var2222 &&= false;
            var1988;
            [var312, Int32(28), var312, Int32(-47), var1940, var312, Int32(-20), Int32(22), Int32(75), Int32(-9)]
        
        case 174 | 9 | 143 => 
            var185;
            [var1940, var312, Int32(-87), Int32(-22), var1940, Int32(16), Int32(-66), var1940, Int32(11), Int32(24)]
        
        case _ => 
            var1489;
            [var1940, Int32(71), Int32(126), Int32(-75), var1940, Int32(-69), var312, var312, var1940, Int32(-80)]
        
    };
    let var2380 : ((Interface34, Range<UInt8>, Rune, Rune, Range<Int16>)) -> Int8 = func1541;
    let var4031 : (Int16) -> (Array<Int32>, Range<UInt32>, Int32, Range<Int16>, (Range<UInt32>, Int64, Int16, (UInt64, Range<UInt64>, Int8, Option<Bool>, Range<UInt32>, Int16)), Range<Int32>) = func2384;
    try { // block id: 2268
        match ((Int32(46)&127..Int32(-78)&127:((-49)|1))) {
            case caseVar2276 : Rune => 
                Class23()
            
            case _ => 
                var var2283 : UInt8 = UInt8(97);
                (var2283&127..var57&127:(4|1));
                var1489;
                var2289
            
        };
        Option<(Array<Int32>, Range<UInt32>, Int32, Range<Int16>, (Range<UInt32>, Int64, Int16, (UInt64, Range<UInt64>, Int8, Option<Bool>, Range<UInt32>, Int16)), Range<Int32>)>.Some(var490).getOrThrow()
    } finally { // block id: 2294
        func2296(Option<Interface32>.None, optionalParam2316 : var1254);
        func func2360(param2361 : Array<Float32>, optionalParam2362 ! : ((Interface34, Range<UInt8>, Rune, Rune, Range<Int16>)) -> Int8 = func1541, namedParam2366 ! : Array<Int32>) : Unit { // block id: 2367

        }
;
        func2360([Float32(-39.0), var799, Float32(-39.0), Float32(69.0), Float32(19.0), Float32(90.0), var799, Float32(80.0), Float32(-65.0), Float32(-90.0)], optionalParam2362 : var2380, namedParam2366 : var2211);
        Int16(-76)|>var4031
    }
}




public func func1829() : (Interface34, Range<UInt8>, Rune, Rune, Range<Int16>) { // block id: 1830
    match (func1833()) {
        case _ => 
            var1988
        
    };
    let var2097 : Int8 = Int8(Int8(UInt8(93)));
    let var2123 : ?((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit) = (Class23() as ((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit));
    let var2145 : Int32 = Int32(Int32(-91));
    var var4041 : ?Interface34 = ((UInt32(169)&127..UInt32(76)&127:73|1) as Interface34);
    if ((func2384<Option<Range<UInt8>>>()|>{ lambdaParameter2079 : (Array<Int32>, Range<UInt32>, Int32, Range<Int16>, (Range<UInt32>, Int64, Int16, (UInt64, Range<UInt64>, Int8, Option<Bool>, Range<UInt32>, Int16)), Range<Int32>) => ((if (if (true) { // block id: 2085
        var105
    } else { // block id: 2087
        if (false) { (Int32(9), var1241) } else { (var1940, [var2097, Int8(73), Int8(54), Int8(2), var1503, var646, Int8(-76), Int8(103), var646, Int8(-56)]) } ;
        var105 || true
    }) { (Int16(-90)&127..=Int16(-6)&127:109|1) } else { match ((Int16(11)&127..=Int16(-93)&127:118|1)) {
        case _ => 
            if (var105) { [Option<((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)>.None, var2123, var2123, Option<((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)>.None, var2123, Option<((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)>.Some(var1009), var2132, Option<((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)>.Some((((), (var2145&127..Int32(-12)&127:(var317|1)), Int8(-16), var799, (UInt8(143)&127..UInt8(249)&127:(-45)|1)), (var1741&127..var830&127:((-93)|1)), ())), var2132, var2123] } else { var1761 } ;
            (var1466, var1421, UInt64(166), (), UInt8(207));
            var977
        
    } } ) is Option<(Array<Int32>, Range<UInt32>, Int32, Range<Int16>, (Range<UInt32>, Int64, Int16, (UInt64, Range<UInt64>, Int8, Option<Bool>, Range<UInt32>, Int16)), Range<Int32>)>) })) { ((var4041 ?? var742), (Option<Range<UInt8>>.Some(var3734) ?? (UInt8(35)&127..UInt8(134)&127:64|1)), (Option<Rune>.None ?? 'U'), var417, if (var2659) { (Int16(-43)&127..var53&127:((-33)|1)) } else { var977 } ) } else { (if (var2659) { var1866 } else { var742 } , (Option<Range<UInt8>>.Some((var57&127..var3568&127:((-43)|1))) ?? var659), match {
        case var4082 => 
        var1489;
        let var4089 : Bool = (Int8(13) is Range<UInt8>);
        if (var4089) { var417 } else { 'q' } 
        case _ => 
        var708 += UInt16(115);
        var417
    }, 'z', (Int16(53)&127..=Int16(-52)&127:(115|1))) } 
}



public func func1753() : UInt32 { // block id: 1754
    ();
    if (match (var1761[4]) {
        case caseVar1797 : Int64 => 
            caseVar1797 >= var951
        
        case _ : Option<Bool> => 
            var105
        
        case _ => 
            var105
        
        case _ : Enum342 => 
            var1437 <<= ((var1437) & 7);
            var799 <= Float32(49.0)
        
        case _ => 
            false
        
    }) { // block id: 1822

    } else if (func363(optionalParam364 : if (var105) { 'n' } else { var417 } , namedParam366 : func1829(), namedParam367 : (), namedParam368 : (Option<Range<UInt8>>.Some((UInt8(173)&127..=UInt8(177)&127:(-81)|1)) ?? var4113))) { // block id: 4119
        let var4127 : ?Unit = Option<Unit>.None;
        try (resource = Class23()) { // block id: 4121
            if (var4082) { Option<Unit>.Some(var185) } else { var4127 } ;
            var1334
        } finally { // block id: 4130
            let var4133 : Bool = ([Int32(-89), Int32(-31), Int32(-113), Int32(100), Int32(77), Int32(116), Int32(14), Int32(116), Int32(17), Int32(-18)] is Option<Bool>);
            if (var4133) { var487 } else { Option<(Array<Int32>, Range<UInt32>, Int32, Range<Int16>, (Range<UInt32>, Int64, Int16, (UInt64, Range<UInt64>, Int8, Option<Bool>, Range<UInt32>, Int16)), Range<Int32>)>.None } ;
            var1334;
            var3568 **= (var2733 & 3)
        }
    };
    let var4153 : Option<UInt32> = ((UInt32(UInt8(UInt8(55)))&127..UInt32(UInt32(UInt32(94)))&127:(Int64(Int32(Int32(-29)))|1)) as UInt32);
    try { // block id: 4143
        var var4145 : Unit = ();
        var4145;
        var4153.getOrThrow()
    } catch (e: Exception) { // block id: 4165
        if (var4082) { // block id: 4168
            var490
        } else { // block id: 4170
            var4172;
            var490
        };
        var700
    }
}



public func func1714(param1715 : (Unit, Range<Int32>, Int8, Float32, Range<UInt8>)) : Array<Int8> { // block id: 1716
    let var1735 : Int16 = Int16(121);
    var var4380 : Int32 = Int32(Int32(38));
    [match ([Float32(-24.0), Float32(-88.0), Float32(-75.0), Float32(28.0), Float32(-47.0), Float32(-67.0), Float32(-96.0), Float32(-119.0), Float32(56.0), Float32(100.0)]) {
        case _ : Option<Array<Int8>> => 
            Int8(38)
        
        case caseVar1726 : (Int32, Array<Int8>) => 
            Int8(-111) ** (var646 & 3)
        
        case _ => 
            (var1735&127..=var53&127:(var317|1));
            var1741 |= UInt8(210);
            var1748
        
    }, match (func1753()) {
        case _ : Array<Int32> => 
            if (false) { var3971 } else { (Int32(83)&127..Int32(-60)&127:(-112)|1) } ;
            var646 ^ Int8(95)
        
        case _ : Interface26 => 
            UInt64(5) ^ UInt64(230);
            (UInt8(170)&127..UInt8(124)&127:(-77)|1);
            var2066 - var1503
        
        case _ => 
            if (false) { var3731 } else { var3731 } ;
            Int8(55) + var1503
        
    }, Int8(45), Int8(-10), var1748, ((Option<Option<Int8>>.Some(Option<Int8>.Some(Int8(-28))) ?? Option<Int8>.Some(Int8(-58))) ?? Int8(-9)), var1748, ((var430 as Int8) ?? match {
        case var105 => 
        UInt16(70) ^ UInt16(99);
        ();
        var646
        case _ => 
        var3272;
        var2289;
        var1748
    }), match (match (var443) {
            case _ => 
                ([Int32(47), Int32(101), Int32(7), Int32(-43), Int32(-58), Int32(-14), Int32(49), Int32(58), Int32(33), Int32(5)], (UInt32(10)&127..UInt32(54)&127:(-98)|1), Int32(-76), var977, var983, (Int32(-44)&127..var1940&127:((-18)|1)))
            
            case _ => 
                let var4260 : Range<Int8> = (Int8(-54)&127..=Int8(23)&127:52|1);
                Option<Range<Int8>>.Some(var4260);
                if (true) { var490 } else { ([Int32(-42), Int32(-114), var1940, var1940, var4272, Int32(-26), var1940, var4272, Int32(-24), Int32(-44)], (UInt32(187)&127..=UInt32(181)&127:(-106)|1), Int32(-31), var977, var983, (var312&127..var4272&127:(95|1))) } 
            
        }) {
        case (_ : Unit,_ : Option<Range<UInt8>>,caseVar4290 : Int16,_,(caseVar4291,_,caseVar4292,(_,_ : Enum342,_,_ : Option<Int64>,_,caseVar4293 : Option<Unit>)),_ : Option<Float64>) => 
            Int8(-112)
        
        case (caseVar4298 : Range<UInt16>,caseVar4299,caseVar4300,caseVar4301,(_,_ : (Unit, Range<Int32>, Int8, Float32, Range<UInt8>),_ : Enum342,caseVar4302 : Option<Option<Bool>>),_) => 
            var1489;
            Int8(-65)
        
        case _ : Option<Bool> => 
            (var4272&127..=Int32(-84)&127:(var3951|1));
            var2458
        
        case _ => 
            var1988;
            Int8(125)
        
        case _ => 
            if (true) { var4324 } else { Class23() } ;
            Option<(Array<Int32>, Range<UInt32>, Int32, Range<Int16>, (Range<UInt32>, Int64, Int16, (UInt64, Range<UInt64>, Int8, Option<Bool>, Range<UInt32>, Int16)), Range<Int32>)>.None;
            var1748 << ((Int8(-56)) & 7)
        
    }, Int8(match ([var3140, Class23(var105, namedParam2690 : var53), var3140, var3140, Class23(var1295, namedParam2993 : Option<Range<Int8>>.Some((Int8(106)&127..=var1503&127:(var951|1)))), Class23(), Class23(var1295, namedParam2993 : var1364, optionalParam2994 : (Int16(-25)&127..=Int16(2)&127:16|1)), var3140, var3140, var3140]) {
        case _ : Int8 => 
            var1748
        
        case caseVar4361 => 
            var3568++;
            ();
            var646
        
        case caseVar4369 => 
            var1748 / ((var1748) | 1)
        
        case _ => 
            Option<(Array<Int32>, Range<UInt32>, Int32, Range<Int16>, (Range<UInt32>, Int64, Int16, (UInt64, Range<UInt64>, Int8, Option<Bool>, Range<UInt32>, Int16)), Range<Int32>)>.Some(([var4380, Int32(50), var4272, var312, Int32(14), Int32(-124), Int32(40), Int32(-1), var1940, var4272], var1414, Int32(8), (var53&127..Int16(-58)&127:((-19)|1)), ((UInt32(126)&127..=UInt32(118)&127:120|1), (-78), Int16(-82), (UInt64(69), (var3021&127..=UInt64(106)&127:(var3951|1)), var646, Option<Bool>.Some(var105), var1414, var53)), var928));
            var1503 >> ((var4417) & 7)
        
    })]
}

public func func4420(param4421 : Interface33) : (Unit, Range<Int32>, Int8, Float32, Range<UInt8>) { // block id: 4422
    let var4464 : (Unit, Range<Int32>, Int8, Float32, Range<UInt8>) = ((), (Int32(Int32(Int16(-31)))&127..Int32(16)&127:(Int64(UInt64(8))|1)), Int8(40), Float32(50.0), (UInt8(140)&127..=UInt8(Int8(95))&127:(46|1)));
    try { // block id: 4424
        match ((UInt32(182)&127..=UInt32(85)&127:49|1)) {
            case _ : Option<Option<Bool>> => 
                (UInt64(54)&127..=UInt64(100)&127:(var2638|1));
                var var4438 : Unit = ();
                if (true) { (var4438, (var1940&127..var1940&127:(var3194|1)), var4417, var799, (UInt8(123)&127..UInt8(116)&127:64|1)) } else { var3167 } 
            
            case _ => 
                var3167
            
            case _ : Option<Range<UInt8>> => 
                if (false) { (var185, (Int32(-46)&127..=Int32(-4)&127:75|1), var4417, var3667, var659) } else { var4464 } 
            
            case _ => 
                ();
                var3167
            
        }
    } catch (e: Exception) { // block id: 4485
        ();
        UInt32(59) ** (var207 & 3);
        let var4491 : (Unit, Range<Int32>, Int8, Float32, Range<UInt8>) = ((), (Int32(103)&127..Int32(-82)&127:(-37)|1), Int8(117), Float32(Float32(Float32(37.0))), (UInt8(23)&127..=UInt8(184)&127:(-16)|1));
        var4491
    }
}



func func1246(param1247 : Int16) : Array<Int8> { // block id: 1248
    var loopTimeVar1299 : Int64 = 0;
    do {
        loopTimeVar1299++;

    } while (((var1254[0] ?? (var1295 is Int64))) && loopTimeVar1299 < 100 ) ;
    if ((var4508 ?? var105)) { (Option<Interface33>.Some(var4518) ?? var4518) } else { (var4523 ?? var4518) } |>(func4420~>func1714)
}

public func func1210(param1211 : Enum342) : Rune { // block id: 1212
    let var4528 : (Int16) -> Array<Int8> = func1246;
    try { // block id: 1214
        try { // block id: 1216
            [Int8(-84), Int8(-27), Int8(-5), Int8(-49), Int8(-42), Int8(75), Int8(111), Int8(99), Int8(6), Int8(9)]
        } finally { // block id: 1218
            Class23();
            let var1223 : ?((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit) = Option<((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)>.Some((((), (Int32(49)&127..Int32(-120)&127:(31|1)), Int8(7), Float32(-30.0), (UInt8(143)&127..=UInt8(133)&127:111|1)), (UInt8(64)&127..UInt8(37)&127:(-8)|1), ()));
            if (var105) { var1223 } else { var1223 } ;
            if (true) { var1241 } else { var1241 } 
        }
    } catch (e: Exception) { // block id: 1244
        Int16(88)|>var4528
    } finally { // block id: 4531
        if (var3477) { var1241 } else { var1870 } 
    };
    var3787;
    match (try { // block id: 4539
            (UInt32(118)&127..=UInt32(250)&127:61|1)
        } catch (_) { // block id: 4541
            if (var2659) { var4545 } else { (UInt32(206)&127..=UInt32(52)&127:4|1) } 
        } finally { // block id: 4556
            var700 += var696;
            var3667 /= Float32((Int32(Float32(105.0))) | 1);
            (UInt32(201)&127..=UInt32(105)&127:56|1)
        }) {
        case caseVar4566 : Interface34 => 
            var4272 >>= ((var1940) & 7);
            Option<Option<Interface32>>.None;
            if (true) { var4575 } else { 'L' } 
        
        case _ : Option<Interface32> => 
            ();
            if (false) { var417 } else { var417 } 
        
        case _ => 
            'w'
        
    }
}




public func func664(param665 : ((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)) : Class23 { // block id: 666
    let var4969 : UInt16 = UInt16(Int16(-59));
    func func680(namedParam681 ! : Option<Bool>) : Bool { // block id: 682
        let var1119 : Interface30 = Class23();
        if ((Option<Bool>.Some(false) ?? ((var696&127..var700&127:((-117)|1)), (Int8(26)&127..=Int8(-103)&127:5|1), (UInt16(1)&127..=var708&127:(var317|1)), (UInt8(109)&127..=UInt8(174)&127:93|1), var105, var312, (UInt16(176)&127..=UInt16(45)&127:(-9)|1))[4])) { // block id: 716
            func func718(param719 : Float32, optionalParam720 ! : (Float64, Range<Int16>, Option<((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)>, Int8) = (107.0, (Int16(-78)&127..=Int16(32)&127:(-54)|1), ((((), (Int32(-126)&127..=Int32(4)&127:(-16)|1), Int8(-110), Float32(54.0), (UInt8(49)&127..=UInt8(251)&127:115|1)), (UInt8(246)&127..=UInt8(99)&127:23|1), ()) as ((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)), Int8(25)), namedParam735 ! : Rune) : (Interface34, Range<UInt8>, Rune, Rune, Range<Int16>) { // block id: 736
                namedParam735|>{ lambdaParameter1095 : Rune =>  };
                var var1099 : (Interface34, Range<UInt8>, Rune, Rune, Range<Int16>) = (Class23(), (UInt8(218)&127..=UInt8(75)&127:(-123)|1), 'k', 'C', (Int16(5)&127..=Int16(UInt16(189))&127:(Int64(Int8(UInt8(89)))|1)));
                var1099
            }
;
            func718(Float32(84.0), optionalParam720 : var616, namedParam735 : var417);
            var var4952 : (Rune, (Interface34, Range<UInt8>, Rune, Rune, Range<Int16>), Unit, Range<UInt8>) -> Bool = func363;
            [var1119, Class23(), Class23(namedParam1140 : var4952), Class23(true, namedParam2690 : var53), Class23(), Class23(optionalParam1124 : var2132, namedParam1140 : var4952), var1119, var1119, Class23(var3477, optionalParam2667 : ((50&127..=(-88)&127:(-12)|1), (var4969&127..var4969&127:((-11)|1)), UInt64(247), (), UInt8(229)), namedParam2690 : Int16(123)), Class23()][7];
            var var5027 : Int64 = Int64(Int8(Int8(-113)));
            if (var4805) { // block id: 4982
                var700--;
                [(var1741&127..=var1741&127:(var3951|1)), (UInt8(70)&127..=UInt8(29)&127:121|1), (UInt8(240)&127..=UInt8(124)&127:61|1), var3734, (UInt8(75)&127..UInt8(41)&127:(35|1)), var1617, var1617, var659, var3734, (UInt8(191)&127..=UInt8(251)&127:(-32)|1)];
                var2659
            } else if (true) { // block id: 5004
                var1655;
                Option<Float64>.None;
                var4805
            } else { // block id: 5008
                if (var105) { ((UInt32(225)&127..=UInt32(209)&127:(-29)|1), 19, var5015, (var1437, (UInt64(234)&127..=UInt64(11)&127:0|1), Int8(2), Option<Bool>.None, (UInt32(213)&127..=var700&127:(var5027|1)), Int16(-109))) } else { var983 } ;
                true && var3064
            }
        } else { // block id: 5036
            try { // block id: 5038
                ();
                var3021 += var1437
            } catch (e: Exception) { // block id: 5043

            };
            var4082
        }
    }
;
    var loopTimeVar5134 : Int64 = 0;
    while (((if (var4805) { ([var4272, var4272, var312, Int32(16), var4272, Int32(-45), var1940, var312, var4272, var1940], (UInt32(38)&127..=UInt32(233)&127:(-92)|1), Int32(45), (var53&127..var4784&127:(47|1)), ((var4020&127..=UInt32(4)&127:((-97)|1)), var3194, Int16(-112), (UInt64(144), var5099, Int8(111), Option<Bool>.None, (var696&127..=UInt32(29)&127:(var317|1)), Int16(87))), (Int32(-117)&127..=Int32(-80)&127:((-116)|1))) } else { (var3094, var4545, var4272, var977, ((UInt32(16)&127..UInt32(122)&127:114|1), 48, var5015, (var1437, (var3021&127..UInt64(138)&127:((-5)|1)), var2066, Option<Bool>.None, (UInt32(189)&127..UInt32(48)&127:60|1), var53)), var928) } |>{ lambdaParameter677 : (Array<Int32>, Range<UInt32>, Int32, Range<Int16>, (Range<UInt32>, Int64, Int16, (UInt64, Range<UInt64>, Int8, Option<Bool>, Range<UInt32>, Int16)), Range<Int32>) => func680(namedParam681 : (match (Option<((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)>.None) {
        case _ => 
            var983
        
        case _ : Array<Int8> => 
            ();
            var983
        
        case _ => 
            var3667 *= var799;
            if (false) { var5065 } else { var5065 } ;
            var983
        
    } as Bool)) })) && loopTimeVar5134 < 100 ) {
        loopTimeVar5134++;

    };
    try { // block id: 5136
        var loopTimeVar5141 : Range<UInt64> = (UInt64(Int64(Int64(Int8(68))))&127..=UInt64(Int64(UInt32(UInt32(181))))&127:(Int64(UInt8(139))|1));
        for (i in loopTimeVar5141 where true) {
            continue
        };
        var443;
        var5160.getOrThrow()
    } finally { // block id: 5162
        (Option<Class23>.None ?? Class23())
    }
}

func func329() : Class23 { // block id: 330
    let var463 : Range<Int64> = ((-2)&127..=(-37)&127:(Int64(UInt8(44))|1));
    let var586 : Interface32 = Class23();
    func func332(namedParam333 ! : Float64) : (UInt64, Range<UInt64>, Int8, Option<Bool>, Range<UInt32>, Int16) { // block id: 334
        var loopTimeVar427 : Int64 = 0;
        do {
            loopTimeVar427++;

        } while (((match (var345) {
            case defaultValue => 
                Option<Bool>.None
            
            case defaultValue => 
                ();
                var356
            
            case _ => 
                var105;
                var356
            
        } ?? func363(optionalParam364 : var417, namedParam366 : var148, namedParam367 : var185, namedParam368 : (UInt8(157)&127..UInt8(184)&127:(var317|1))))) && loopTimeVar427 < 100 ) ;
        var loopTimeVar459 : Int64 = 0;
        var430.func433(do {
            loopTimeVar459++;

        } while ((true) && loopTimeVar459 < 100 ) , if (var105) { var463 } else { (var317&127..=var317&127:(var317|1)) } );
        let var552 : (Interface32) -> (UInt64, Range<UInt64>, Int8, Option<Bool>, Range<UInt32>, Int16) = { lambdaParameter555 : Interface32 => (UInt64(30), (UInt64(210)&127..=UInt64(28)&127:(-90)|1), Int8(-6), Option<Bool>.None, (UInt32(Int16(-33))&127..=UInt32(UInt16(94))&127:(Int64(UInt64(125))|1)), Int16(UInt8(UInt8(52)))) };
        if ((Class23.var576)) { Class23() } else { (Option<Interface32>.Some(var586) ?? var586) } |>var552
    }
;
    var var598 : Float64 = 78.0;
    func332(namedParam333 : try { // block id: 590
        ();
        (-88.0)
    } catch (_) { // block id: 593
        var185;
        Option<Interface32>.Some(var586);
        var598
    } finally { // block id: 600
        var185;
        ();
        (-47.0) / Float64((Int32(108.0)) | 1)
    });
    var var651 : Float32 = Float32(Float32(91.0));
    (var616[2] ?? (Option<((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)>.None ?? ((var185, (Int32(-47)&127..=Int32(-102)&127:(-94)|1), var646, var651, (var57&127..=UInt8(215)&127:((-121)|1))), var659, var185)))[2];
    try { // block id: 5168
        ();
        if (true) { var5173 } else { Option<Option<Int8>>.None } ;
        let var5183 : Int32 = Int32(36);
        if (false) { (((), (var5183&127..=Int32(-83)&127:(var3194|1)), var2066, Float32(-119.0), var1617), var4113, ()) } else { var1009 } 
    } finally { // block id: 5193
        let var5195 : ?Unit = (Class23() as Unit);
        var5195;
        Option<Option<Int8>>.None;
        var1009
    }|>func664
}

public func func300(param301 : Rune) : Class23 { // block id: 302
    try { // block id: 304
        Int8(-5)
    } finally { // block id: 306
        var loopTimeVar323 : Int64 = 0;
        while ((var105) && loopTimeVar323 < 100 ) {
            loopTimeVar323++;
            (var312&127..=Int32(104)&127:(var317|1));
            Int8(26) / ((Int8(-74)) | 1)
        };
        [Int8(-112), Int8(24), Int8(-102), Int8(-58), Int8(89), Int8(-38), Int8(-38), Int8(-79), Int8(84), Int8(114)][8]
    };
    func329()
}

public func func116(param117 : Interface29, optionalParam118 ! : Interface28 = Class23(), optionalParam120 ! : Int8 = Int8(UInt8(Int8(50))), optionalParam124 ! : Float64 = (-13.0)) : Unit { // block id: 126
    var var167 : Int16 = Int16(-65);
    var var177 : Int32 = Int32(Int8(-94));
    var var193 : Range<Int64> = (Int64(Int8(-60))&127..=(-86)&127:(Int64((-93))|1));
    match (func129(namedParam130 : var148[0], namedParam131 : if (false) { (Int16(102)&127..Int16(-36)&127:110|1) } else { (var167&127..=var53&127:((-32)|1)) } )) {
        case caseVar173 => 
            var177 ^= Int32(-24)
        
        case _ : Interface29 => 
            var185;
            var185;
            var185
        
        case _ : Int8 => 
            var193;
            var185
        
        case caseVar203 => 
            var207 >>= ((var207) & 7)
        
        case _ => 
            var185
        
    };
    var var262 : Interface33 = Class23();
    if (((Class23()|>func216) is UInt32)) { // block id: 239
        let var245 : Bool = (Class23() is Interface34);
        var loopTimeVar252 : Range<UInt64> = (UInt64(Int32(-114))&127..UInt64(96)&127:(Int64(Int16(Int8(-7)))|1));
        for (i in loopTimeVar252 where var105) {
            if (var245) { var249 } else { var249 } 
        };
        match (var262) {
            case caseVar266 => 
                Int32(-54)
            
            case _ => 
                Int32(-11) >> ((Int32(-30)) & 7)
            
            case _ => 
                Int32(6)
            
        }
    } else { // block id: 278
        ();
        let var284 : String = "7>PTOmv\"?y";
        var loopTimeVar291 : Range<UInt64> = (UInt64(142)&127..UInt64(248)&127:(101|1));
        for (i in loopTimeVar291 where true) {
            var284;
            var var288 : UInt16 = UInt16(125);
            var288 ^= var288
        };
        Int32(UInt32(157))
    };
    func300((var1655 ?? var4895)).func433(if (var4082) { // block id: 5206
        let var5208 : Option<UInt32> = Option<UInt32>.None;
        var5208;
        var1489;
        ()
    }, ((-37)&127..var951&127:(var3951|1)))
}



public func func111(optionalParam112 ! : Array<Bool> = [false, true, true, true, true, true, false, false, true, false]) : Bool { // block id: 114
    func116(match (if (var105) { (var708&127..var3679&127:(var951|1)) } else { var1421 } ) {
        case _ => 
            Class23(false, namedParam2690 : Int16(-96))
        
        case _ : Option<Bool> => 
            var4172
        
        case _ => 
            var207--;
            if (true) { var5241 } else { (var4545, var224, var1421, (UInt8(236)&127..UInt8(81)&127:(-122)|1), false, var312, var1421) } ;
            var4172
        
    }, optionalParam118 : match ((Option<(Range<Int64>, Range<UInt16>, UInt64, Unit, UInt8)>.None ?? var1520)) {
        case _ : Interface30 => 
            if (var4082) { var1761 } else { var1761 } ;
            var3272;
            var5065
        
        case _ => 
            var136;
            var5065
        
    }, optionalParam120 : var1503);
    var var5347 : Array<Float32> = Array<Float32>(10){ i => Float32(Float32(Float32(103.0))) };
    (match (match (var3312) {
            case caseVar5309 => 
                var5312
            
            case _ : Option<Int8> => 
                var2026;
                [Float32(93.0), Float32(10.0), Float32(-24.0), Float32(-93.0), Float32(13.0), Float32(1.0), Float32(-63.0), Float32(-19.0), Float32(93.0), Float32(-67.0)]
            
            case _ => 
                var5312
            
            case caseVar5342 : Float64 => 
                var3272;
                var3787;
                var5347
            
            case _ => 
                var5372
            
        }) {
        case caseVar5396 : Option<Float64> => 
            var5173
        
        case _ => 
            Option<Option<Int8>>.Some(Option<Int8>.Some(Int8(54)))
        
        case caseVar5407 : Enum342 => 
            var207 ^= var4020;
            Option<Option<Int8>>.None
        
        case caseVar5415 : UInt64 => 
            var5173
        
        case _ => 
            if (var4805) { Option<Option<Int8>>.None } else { var5173 } 
        
    } ?? Option<Int8>.Some(match (Class23()) {
        case caseVar5429 => 
            var4172;
            -var2066
        
        case caseVar5436 : String => 
            var3272;
            var2001;
            let var5441 : Int8 = Int8(Int8(UInt8(Int8(37))));
            var5441
        
        case _ => 
            var var5449 : Int8 = Int8(-93);
            var5449
        
    }));
    ((var5458 ?? if (true) { var5463 } else { Option<Option<Interface32>>.None } ) is Option<Interface32>)
}



public func func36(param37 : UInt8, param38 : Class23, namedParam39 ! : Option<Bool>) : Class23 { // block id: 40
    var var5544 : Int64 = (-77);
    if ((try { // block id: 44
        Class23();
        if (true) { Option<Bool>.Some(true) } else { namedParam39 } 
    } finally { // block id: 51
        var53;
        var57;
        namedParam39
    } ?? var71[3])) { // block id: 90
        match (Option<Bool>.Some(true)) {
            case caseVar96 => 
                let var99 : Unit = ();
                var99
            
            case _ => 
                var105 ||= true;
                ();
                ()
            
        }
    } else if (func111()) { // block id: 5467
        match ([Class23(), Class23(), Class23(), Class23(var1421, Option<((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)>.None, optionalParam2836 : (var1313, var977, Option<((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)>.Some(var1009), Int8(-44))), var3140, Class23(var1421, Option<((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)>.Some(var1009)), Class23(), Class23(var1421, var2132), var3140, Class23(var1421, Option<((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)>.None, optionalParam2836 : (41.0, (var5015&127..var5015&127:(73|1)), Option<((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)>.None, var2458))]) {
            case _ : Option<Range<UInt8>> => 
                var5507;
                var185;
                if (true) { (Int16(0)&127..=Int16(-58)&127:(-37)|1) } else { (Int16(-26)&127..Int16(90)&127:46|1) } 
            
            case caseVar5526 => 
                var var5532 : Int64 = 26;
                (Int16(58)&127..=var53&127:(var5532|1))
            
            case caseVar5536 => 
                if (var4082) { (var5015&127..=Int16(-125)&127:(var5544|1)) } else { var977 } 
            
            case _ => 
                (var5015&127..=var53&127:((-92)|1))
            
        };
        (Option<Unit>.None ?? ());
        ()
    };
    var var5611 : Option<(UInt64, Range<UInt64>, Int8, Option<Bool>, Range<UInt32>, Int16)> = Option<(UInt64, Range<UInt64>, Int8, Option<Bool>, Range<UInt32>, Int16)>.None;
    (match ([Int8(57), Int8(-62), Int8(121), Int8(44), Int8(-97), Int8(-91), Int8(49), Int8(-121), Int8(38), Int8(125)]) {
        case caseVar5580 : Rune => 
            ();
            let var5586 : Option<(UInt64, Range<UInt64>, Int8, Option<Bool>, Range<UInt32>, Int16)> = Option<(UInt64, Range<UInt64>, Int8, Option<Bool>, Range<UInt32>, Int16)>.Some((UInt64(249), (UInt64(146)&127..UInt64(87)&127:(Int64(UInt16(150))|1)), Int8(Int8(-37)), Option<Bool>.Some((Option<(Array<Int32>, Range<UInt32>, Int32, Range<Int16>, (Range<UInt32>, Int64, Int16, (UInt64, Range<UInt64>, Int8, Option<Bool>, Range<UInt32>, Int16)), Range<Int32>)>.None is Option<Unit>)), (UInt32(131)&127..UInt32(Int32(-112))&127:(93|1)), Int16(UInt16(26))));
            if (false) { var5586 } else { Option<(UInt64, Range<UInt64>, Int8, Option<Bool>, Range<UInt32>, Int16)>.None } 
        
        case _ => 
            var5611
        
    } ?? match {
        case (var2576 ?? false) => 
        Option<(Array<Int32>, Range<UInt32>, Int32, Range<Int16>, (Range<UInt32>, Int64, Int16, (UInt64, Range<UInt64>, Int8, Option<Bool>, Range<UInt32>, Int16)), Range<Int32>)>.None;
        (UInt64(204), (UInt64(108)&127..UInt64(250)&127:40|1), Int8(31), namedParam39, var1414, Int16(-14))
        case _ => 
        ();
        ();
        if (var3477) { var136 } else { var136 } 
    });
    try { // block id: 5634
        if (var4805) { var2289 } else { Class23() } 
    } finally { // block id: 5639
        var loopTimeVar5643 : Range<UInt64> = (UInt64(188)&127..UInt64(UInt16(9))&127:(120|1));
        for (i in loopTimeVar5643 where var3477) {

        };
        var1940--;
        try { // block id: 5652
            var3787;
            if (var3477) { var2289 } else { param38 } 
        } catch (e: Exception) { // block id: 5658
            var1489;
            Class23()
        }
    }
}

public func func18(param19 : Float32, namedParam20 ! : Int16) : Bool { // block id: 21
    var var5678 : ?((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit) = Option<((Unit, Range<Int32>, Int8, Float32, Range<UInt8>), Range<UInt8>, Unit)>.None;
    func36(var3568, try { // block id: 5663
        Class23()
    } finally { // block id: 5665
        var5667
    }, namedParam39 : match (Option<Option<Float64>>.None) {
        case _ => 
            if (var3064) { var2132 } else { var5678 } ;
            ();
            var1976
        
        case _ => 
            var249;
            var1976
        
        case _ => 
            var1976
        
        case _ => 
            ();
            var5695;
            Option<Bool>.None
        
    }).var5700;
    try { // block id: 5704
        var2458 ** (Int8(-93) & 3)
    } finally { // block id: 5708
        var830 &= UInt8(130);
        Int8(30)
    } < Int8(-39)
}

main(): Int64 {
    try {
        if ((Option<Bool>.None ?? true)) { // block id: 15
            (-58)
        } else if (func18(Float32(-86.0), namedParam20 : var5015)) { // block id: 5716
            let var5718 : Interface30 = Class23();
            var5718;
            var3951 << (((-10)) & 7)
        } else { // block id: 5723
            ();
            (-119)
        }
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var57*var57), 64)
        crccheck.updateBuffer(UInt64(var312*var312), 64)
        crccheck.updateBuffer(UInt64(var700*var700), 64)
        crccheck.updateBuffer(UInt64(var2458*var2458), 64)
        crccheck.updateBuffer(UInt64(var3194*var3194), 64)
        crccheck.updateBuffer(UInt64(var3568*var3568), 64)
        crccheck.updateBuffer(UInt64(var3679*var3679), 64)
        crccheck.updateBuffer(UInt64(var4272*var4272), 64)
        crccheck.updateBuffer(UInt64(var4417*var4417), 64)
        crccheck.updateBuffer(UInt64(var4754*var4754), 64)
        crccheck.updateBuffer(UInt64(var4784*var4784), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Enum342 {

}

extend Class23 {

}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_expected_left_brace
// ASSERT: scan parse_expected_case
// ASSERT: scan parse_expected_character
// ASSERT: scan parse_expected_expr_or_decl_in
// ASSERT: scan parse_expected_catch_or_finally_in_try
// ASSERT: scan parse_trailing_closure_only_follow_name


