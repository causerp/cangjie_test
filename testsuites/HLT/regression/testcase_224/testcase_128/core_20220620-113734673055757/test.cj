/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output


public var var41 : Range<Int64> = ((-121)&127..=(-127)&127:102|1)
let var44 : Int64 = 10
public let var47 : String = ",B[Sm$.B,n"
let var209 : Array<Rune> = ['K', '0', 'J', 'T', 'E', 'k', 'b', 'G', 'l', '8']
let var341 : (UInt32, Range<Int64>, Int64, String, Array<Bool>) = (UInt32(88), (93&127..=(-124)&127:(-78)|1), Int64(UInt64(UInt16(Int8(72)))), """
_P*#O
MQa>${var47}5${var47}
""", [false, true, (UInt16(Int16(112)) is UInt8), false, true, ((UInt32(7)&127..UInt32(187)&127:0|1) is Int64), ((-5) is Array<Bool>), true, (UInt8(Int8(86)) is String), ((UInt32(48)&127..UInt32(189)&127:(25|1)) is Int64)])
var var425 : Int32 = Int32(Int32(-36))
let var457 : Range<Int16> = (Int16(-41)&127..Int16(59)&127:(-17)|1)
public let var463 : Unit = ()
public var var476 : UInt16 = UInt16(235)
var var510 : UInt8 = UInt8(131)
var var517 : Interface445 = Class438()
public var var607 : ?Int8 = (Float32(1.0) as Int8)
public var var614 : Array<(Float32, Int32)> = Array<(Float32, Int32)>(10){ i => (Float32(Float32(Float32(57.0))), Int32(-9)) }
public var var775 : (Float32, Int32) = (Float32(Float32(51.0)), Int32(-46))
var var800 : Array<Option<Int8>> = Array<Option<Int8>>(10){ i => ('K' as Int8) }
public let var898 : Int8 = Int8(102)
var var907 : Bool = false
let var911 : Range<Int32> = (Int32(52)&127..=Int32(-43)&127:(-4)|1)
public let var929 : Rune = 'u'
var var1090 : UInt32 = UInt32(219)
let var1209 : Float32 = Float32(-91.0)
public var var1273 : Float64 = 71.0
public var var1459 : Float32 = Float32(-40.0)
public let var1502 : ?Array<(Float32, Int32)> = (Class438() as Array<(Float32, Int32)>)
public let var1535 : Int32 = Int32(9)
public var var1673 : (Unit, UInt64, Int32) = ((), UInt64(220), Int32(Int8(112)))
public let var1722 : Array<Bool> = [true, true, false, true, true, true, false, true, false, true]
let var1756 : (UInt32, Range<Int8>, Range<UInt16>, Option<Bool>, Int64, Range<Int32>) = (UInt32(Int32(-78)), (Int8(110)&127..Int8(100)&127:(Int64(UInt8(UInt8(189)))|1)), (UInt16(UInt16(UInt8(15)))&127..=UInt16(113)&127:(46|1)), (((UInt32(230)&127..=UInt32(176)&127:(-21)|1) is Bool) as Bool), Int64(UInt16(Int16(-31))), (Int32(52)&127..=Int32(-91)&127:91|1))
let var1832 : Range<UInt16> = (UInt16(176)&127..UInt16(216)&127:((-57)|1))
var var1861 : Int32 = Int32(4)
var var1918 : Aggregate1914 = Aggregate1914()
var var1940 : Int16 = Int16(110)
let var2219 : Bool = false
public let var2223 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
var var2245 : Float32 = Float32(-89.0)
let var2270 : (Range<UInt32>, Unit, Float64, Option<Unit>, (UInt32, Range<Int64>, Int64, String, Array<Bool>)) = ((UInt32(148)&127..UInt32(165)&127:(-104)|1), (), Float64(Float32(-28.0)), ((Int32(109)&127..=Int32(-81)&127:(-76)|1) as Unit), (UInt32(233), (63&127..(-127)&127:(Int64(Int8(-30))|1)), 78, ###"<SpWiAzo7_"###, [true, false, true, false, false, true, true, true, false, false]))
public var var2397 : UInt64 = UInt64(38)
public var var2496 : Int64 = (-59)
public let var2550 : String = "C*s${var47}sJ:+[,${var47}>"
var var2581 : ?Bool = ([(UInt64(UInt64(167)) as Int8), Option<Int8>.None, (UInt16(UInt8(9)) as Int8), Option<Int8>.None, Option<Int8>.None, Option<Int8>.None, Option<Int8>.None, ((UInt32(236), true, (UInt32(11)&127..UInt32(250)&127:((-126)|1)), Float32(67.0), true) as Int8), Option<Int8>.None, Option<Int8>.None] as Bool)
public let var2678 : Int32 = Int32(UInt32(Int32(97)))
let var2695 : (Float32, Int32) = (Float32(Float32(-84.0)), Int32(UInt8(122)))
let var2709 : Unit = ()
var var2754 : Interface444 = Class438()
var var2890 : (Float32, Int32) = (Float32(43.0), Int32(59))
let var2899 : (Float32, Int32) = (Float32(-59.0), Int32(Int32(-68)))
let var3255 : Option<Float64> = (((), UInt64(212), Int32(104)) as Float64)
var var3399 : Range<UInt32> = (UInt32(36)&127..UInt32(Int8(7))&127:(Int64(UInt64(192))|1))
let var3526 : Option<Interface442> = (Option<Unit>.None as Interface442)
var var3547 : ((Range<Int32>, (Unit, Int16, Range<UInt32>, Range<Int32>, Range<Int32>, Range<UInt64>), Array<UInt8>, Range<UInt64>), (Range<Int16>, String), Array<Rune>, Range<UInt32>, Bool, (Unit, Int16, Range<UInt32>, Range<Int32>, Range<Int32>, Range<UInt64>), (Range<Int16>, String)) = (((Int32(43)&127..Int32(82)&127:113|1), ((), Int16(UInt8(48)), (UInt32(225)&127..=UInt32(207)&127:((-14)|1)), (Int32(56)&127..=Int32(-37)&127:(-82)|1), (Int32(46)&127..Int32(-18)&127:(-11)|1), (UInt64(147)&127..UInt64(100)&127:((-28)|1))), [UInt8(131), UInt8(2), UInt8(179), UInt8(66), UInt8(168), UInt8(17), UInt8(44), UInt8(75), UInt8(63), UInt8(191)], (UInt64(74)&127..UInt64(119)&127:114|1)), ((Int16(UInt16(16))&127..Int16(UInt16(253))&127:(Int64(UInt32(69))|1)), "d~0${var47}4+g\\k6t"), ['X', 'w', '5', 'J', 'V', '8', '7', 'M', 'M', 'L'], (UInt32(150)&127..=UInt32(188)&127:(-58)|1), true, ((), Int16(UInt8(UInt8(1))), (UInt32(49)&127..UInt32(230)&127:4|1), (Int32(Int16(-1))&127..Int32(UInt8(109))&127:(51|1)), (Int32(-117)&127..=Int32(Int32(70))&127:((-28)|1)), (UInt64(82)&127..UInt64(241)&127:75|1)), ((Int16(114)&127..Int16(58)&127:21|1), """
/1/)9${var2550}
9B\\o_${var47}
"""))
var var3627 : ?Unit = Option<Unit>.None
public let var3744 : Bool = false
public var var3816 : ?Interface441 = ([([UInt8(58), UInt8(2), UInt8(241), UInt8(242), UInt8(34), UInt8(208), UInt8(113), UInt8(93), UInt8(121), UInt8(5)] as Bool), (((UInt32(249), true, (UInt32(27)&127..UInt32(243)&127:(13|1)), Float32(-72.0), true) as Interface442) as Bool), (((Int32(-70)&127..=Int32(95)&127:((-91)|1)), ((), Int16(96), (UInt32(237)&127..=UInt32(107)&127:(-58)|1), (Int32(-66)&127..Int32(30)&127:8|1), (Int32(-88)&127..=Int32(91)&127:10|1), (UInt64(205)&127..UInt64(187)&127:((-115)|1))), [UInt8(27), UInt8(188), UInt8(97), UInt8(92), UInt8(0), UInt8(132), UInt8(203), UInt8(52), UInt8(132), UInt8(120)], (UInt64(140)&127..=UInt64(143)&127:(-76)|1)) as Bool), Option<Bool>.None, (((Int8(11)&127..Int8(62)&127:((-41)|1)) as Unit) as Bool), Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None] as Interface441)
public var var3894 : ?Range<Int16> = ([(Float32(34.0), Int32(102)), (Float32(Float32(-63.0)), Int32(Int32(18))), (Float32(-52.0), Int32(12)), (Float32(80.0), Int32(UInt8(157))), (Float32(Float32(35.0)), Int32(7)), (Float32(-54.0), Int32(UInt32(92))), (Float32(79.0), Int32(UInt32(158))), (Float32(-120.0), Int32(Int16(15))), (Float32(-46.0), Int32(Int16(-76))), (Float32(Float32(58.0)), Int32(Int8(117)))] as Range<Int16>)
var var3945 : Option<Range<UInt8>> = (((Int16(-56)&127..Int16(63)&127:(23|1)), "?4y${var2550}y|o=${var2550}tP]") as Range<UInt8>)
public let var4033 : Float32 = Float32(Float32(71.0))
var var4096 : ?Array<Rune> = ('v' as Array<Rune>)
public let var4110 : Int64 = (-95)
public var var4281 : Float64 = Float64(Float32(Float32(10.0)))
var var4291 : UInt32 = UInt32(UInt16(UInt16(Int8(-23))))
public let var4558 : Array<Float32> = [Float32(-18.0), Float32(75.0), Float32(20.0), Float32(-22.0), Float32(-33.0), Float32(123.0), Float32(74.0), Float32(2.0), Float32(103.0), Float32(76.0)]
public var var4571 : ??Bool = (Class438() as Option<Bool>)
public let var4688 : Int64 = 105
let var4721 : Interface441 = Class438()
public let var4751 : Range<Int32> = (Int32(30)&127..Int32(-86)&127:90|1)
var var4865 : Unit = ()
var var4984 : Interface442 = Class438()
public var var5033 : ?Int8 = Option<Int8>.None
var var5138 : Class438 = Class438()
var var5191 : Int8 = Int8(39)
public var var5405 : Bool = (UInt32(45) is Option<Range<UInt32>>)
var var5475 : Bool = true
public var var5505 : ?UInt64 = Option<UInt64>.None
let var5510 : Float32 = Float32(-1.0)
let var5515 : ?Float32 = Option<Float32>.None
public var var5582 : Rune = '9'
public var var5589 : Int64 = 46
public let var5719 : Array<UInt8> = [UInt8(UInt8(144)), UInt8(Int8(-50)), UInt8(UInt8(147)), UInt8(UInt8(Int8(-104))), UInt8(103), UInt8(Int8(Int8(-34))), UInt8(106), UInt8(UInt8(75)), UInt8(184), UInt8(UInt8(125))]
var var5770 : Range<UInt64> = (UInt64(201)&127..UInt64(197)&127:(Int64(Int16(-67))|1))
public let var5782 : ?Unit = Option<Unit>.None
public var var5787 : (Unit, UInt64, Int32) = ((), UInt64(48), Int32(UInt32(43)))
var var5801 : Int8 = Int8(-84)
var var5840 : Int64 = (-35)

public interface Interface445 {
    func func788(namedParam789 ! : Bool, namedParam790 ! : Int64, namedParam791 ! : Int8, namedParam792 ! : Array<Float32>) : (Unit, UInt64, Int32) { // block id: 793
        let var861 : Int8 = Int8(Int8(59));
        let var874 : (Unit, UInt64, Int32) = ((), UInt64(93), Int32(-20));
        var var883 : UInt8 = UInt8(15);
        match (if (namedParam789) { var800 } else { [Option<Int8>.Some(namedParam791), Option<Int8>.None, Option<Int8>.None, Option<Int8>.None, var607, var607, var607, Option<Int8>.Some(var861), var607, var607] } [5]) {
            case caseVar869 => 
                var463;
                var209;
                var874
            
            case _ => 
                var883++;
                if (false) { (var463, UInt64(246), Int32(-27)) } else { (var463, UInt64(16), var425) } 
            
        }
    }

}

public interface Interface444 <: Interface445 {

}

public interface Interface443 <: Interface444 {

}

public interface Interface442 <: Interface443 {

}

public interface Interface441 <: Interface442 {
    func func5142(param5143 : ((Array<(Float32, Int32)>) -> Bool) -> Unit, param5146 : Option<Range<Int16>>) : Unit { // block id: 5147
        let var5157 : Option<(UInt32, Range<Int8>, Range<UInt16>, Option<Bool>, Int64, Range<Int32>)> = ((Int16(-109)&127..Int16(-122)&127:103|1) as (UInt32, Range<Int8>, Range<UInt16>, Option<Bool>, Int64, Range<Int32>));
        if (var3744) { // block id: 5150
            (var5157 ?? (var1090, (Int8(-122)&127..=Int8(-71)&127:(var4688|1)), (UInt16(251)&127..=var476&127:(var2496|1)), var2581, (-119), (Int32(-75)&127..Int32(-32)&127:(-111)|1)));
            var2496 += var2496;
            (var3627 ?? var463)
        } else if (true) { // block id: 5180
            var2496--;
            var4865;
            try (resource = Class438()) { // block id: 5185
                var2709
            } catch (_) { // block id: 5187
                var4865;
                var5191 -= var898;
                ()
            } finally { // block id: 5195
                var4865;
                ()
            }
        };
        try (resource = Class438()) { // block id: 5199
            Float32(Float32(-31.0));
            var loopTimeVar5212 : Range<UInt64> = (UInt64(Int16(-114))&127..=UInt64(UInt32(217))&127:(67|1));
            for (i in loopTimeVar5212 where var2219) {
                if (true) { (UInt64(33)&127..=UInt64(225)&127:(-122)|1) } else { (var2397&127..UInt64(246)&127:(var44|1)) } 
            };
            match (var614) {
                case _ => 
                    ();
                    ()
                
            }
        } catch (_) { // block id: 5225

        }
    }
;
    static func func1246(namedParam1247 ! : Interface441) : Bool 

}

public open class Class438 <: Interface441 & Resource {
    public init() { // block id: 440

    }
;
    public let var450 : (Float32, Int32) = (Float32(-119.0), Int32(31));
    public static var var1343 : Range<UInt64> = (UInt64(20)&127..UInt64(11)&127:(-42)|1);
    public static func func1246(namedParam1247 ! : Interface441) : Bool { // block id: 1248
        'c';
        var var1264 : Int8 = Int8(Int8(Int8(UInt8(85))));
        if (var907) { // block id: 1253
            Int16(-41);
            [false, false, true, true, true, true, true, false, false, true];
            var1209
        } else { // block id: 1257
            Float32(-23.0)
        } / Float32((Int32(try { // block id: 1260
            var463;
            var1264--;
            var1209
        } finally { // block id: 1270
            var1273 = var1273;
            Float32(-114.0)
        })) | 1);
        try { // block id: 1278
            [(), (), var463, (), (), (), var463, (), var463, var463][7];
            var1090 <<= ((var1090) & 7);
            try { // block id: 1297
                ();
                var907 && false
            } catch (_) { // block id: 1302
                var907
            }
        } finally { // block id: 1304
            var var1318 : UInt32 = UInt32(11);
            match (var607) {
                case _ : Array<Bool> => 
                    var463;
                    var1264;
                    var510 ** (var510 & 3)
                
                case _ => 
                    var1318;
                    UInt8(159)
                
            };
            let var1354 : UInt64 = UInt64(176);
            match (namedParam1247) {
                case caseVar1325 => 
                    true
                
                case caseVar1330 : Array<Rune> => 
                    var463;
                    let var1337 : UInt64 = UInt64(Int16(55));
                    if (var907) { (var1337&127..UInt64(0)&127:(var44|1)) } else { var1343 } ;
                    var1273 >= 43.0
                
                case _ => 
                    var var1357 : Int32 = Int32(UInt8(UInt8(UInt8(UInt8(176)))));
                    (var463, var1354, var1357);
                    false
                
                case caseVar1366 : Array<Bool> => 
                    var463;
                    var907
                
                case _ => 
                    false
                
            }
        }
    }
;
    public static var var1440 : Unit = ();
    static var var1712 : UInt16 = UInt16(87);
    static var var1751 : Bool = false;
    static var var3273 : Int16 = Int16(80);
    public init(param3221 : (Range<Int16>) -> Bool, optionalParam3224 ! : Array<Float32> = Array<Float32>(10){ i => Float32(Float32(109.0)) }, namedParam3242 ! : (Array<Option<Int8>>) -> Bool, namedParam3245 ! : Interface445) { // block id: 3246
        var loopTimeVar3316 : Range<UInt64> = (UInt64(39)&127..=UInt64(31)&127:(Int64(Int64(UInt16(UInt8(173))))|1));
        for (i in loopTimeVar3316 where match ((var3255 ?? (-14.0))) {
            case caseVar3264 : Unit => 
                var1273 **= Float64(Int32(124.0) & 3);
                (UInt64(84)&127..=UInt64(227)&127:63|1);
                Int16(2) == var3273
            
            case caseVar3277 => 
                var510 *= var510;
                var1090 <<= ((UInt32(93)) & 7);
                false
            
            case 104.0 => 
                var1440;
                var1751
            
            case -114.0 | -2.0 | -125.0 => 
                var1440;
                var1440;
                var1751
            
            case _ => 
                ();
                var47;
                89.0 != var1273
            
        }) {
            var loopTimeVar3309 : Range<UInt64> = (UInt64(5)&127..UInt64(52)&127:(Int64(UInt64(Int8(77)))|1));
            for (i in loopTimeVar3309 where false) {
                var2223
            }
        };
        var1918;
        var loopTimeVar3373 : Int64 = 0;
        while ((if (var3273 == var3273) { // block id: 3331
            UInt8(167) == var510
        } else if (try { // block id: 3336
            var1712 &= UInt16(21);
            ();
            var2678 <= Int32(-93)
        } finally { // block id: 3344
            UInt8(31) == var510
        }) { // block id: 3348
            var907
        } else { // block id: 3350
            true
        }) && loopTimeVar3373 < 100 ) {
            loopTimeVar3373++;
            try { // block id: 3354
                (Int8(4)&127..=Int8(119)&127:(var2496|1))
            } catch (_) { // block id: 3359
                (var898&127..=Int8(69)&127:((-114)|1))
            };
            (Option<Float64>.Some(115.0) ?? var1273)
        }
    }
;
    public static let var4167 : Float32 = Float32(-79.0);
    static var var4175 : Int8 = Int8(-63);
    public init(namedParam3061 ! : ((Range<Int32>, (Unit, Int16, Range<UInt32>, Range<Int32>, Range<Int32>, Range<UInt64>), Array<UInt8>, Range<UInt64>), (Range<Int16>, String), Array<Rune>, Range<UInt32>, Bool, (Unit, Int16, Range<UInt32>, Range<Int32>, Range<Int32>, Range<UInt64>), (Range<Int16>, String)), optionalParam3062 ! : () -> Range<Int16> = func1706) { // block id: 3065
        var loopTimeVar4184 : Int64 = 0;
        do {
            loopTimeVar4184++;

        } while (((Option<Range<Int64>>.None|>func3069) > match (Option<Range<Int64>>.None) {
            case caseVar4157 => 
                Float32(17.0)
            
            case _ : String => 
                ();
                Option<Float64>.None;
                -var4167
            
            case caseVar4171 => 
                var4175--;
                var1440;
                var4167
            
            case _ => 
                Float32(68.0)
            
        }) && loopTimeVar4184 < 100 ) 
    }

    public func isClosed(): Bool { return true }
    public func close(): Unit {}
}

func func331(param332 : Int16) : Range<Int32> { // block id: 333
    var var375 : Float32 = Float32(-106.0);
    var var396 : Range<UInt32> = (UInt32(145)&127..UInt32(143)&127:(-80)|1);
    try { // block id: 335
        match (UInt64(4)) {
            case _ => 
                var341
            
        };
        [var375, var375, Float32(-37.0), var375, var375, Float32(-33.0), Float32(-52.0), Float32(-57.0), Float32(-52.0), Float32(8.0)][9]
    } finally { // block id: 387
        let var392 : Unit = ();
        (var392, Int16(-114), var396, (Int32(-58)&127..=Int32(-3)&127:108|1), (Int32(-121)&127..=Int32(113)&127:((-54)|1)), (UInt64(244)&127..UInt64(98)&127:67|1))[1];
        var var407 : Bool = ((UInt16(4)&127..=UInt16(36)&127:83|1) is (Unit, Int16, Range<UInt32>, Range<Int32>, Range<Int32>, Range<UInt64>));
        if (var407) { // block id: 410
            UInt64(218);
            Float32(18.0)
        } else { // block id: 413
            let var415 : UInt64 = UInt64(Int8(Int8(UInt8(234))));
            var415;
            var375 * Float32(-49.0)
        }
    };
    let var484 : Interface442 = Class438();
    let var678 : UInt32 = UInt32(214);
    func func431(param432 : (Float32, Int32), param433 : String) : (Float32, Int32) { // block id: 434
        var var490 : Float32 = Float32(Float32(Float32(Float32(Float32(21.0)))));
        try { // block id: 436
            let var447 : Class438 = Class438();
            var447.var450
        } finally { // block id: 454
            match (var457) {
                case _ : Array<Bool> => 
                    var463;
                    ();
                    (Float32(71.0), var425)
                
                case caseVar471 => 
                    UInt64(242);
                    var476 &= var476;
                    param432
                
                case _ => 
                    var484;
                    if (false) { (var490, Int32(78)) } else { param432 } 
                
                case _ => 
                    var463;
                    param432
                
            }
        };
        var var548 : Interface445 = Class438();
        match ('R') {
            case caseVar506 => 
                var510 |= var510;
                var510 >>= ((var510) & 7);
                var517
            
            case 'T' => 
                var517
            
            case '6' | 'i' => 
                Class438()
            
            case 'B' | 'h' | '8' => 
                ();
                if (false) { var517 } else { Class438() } 
            
            case _ => 
                var548
            
        };
        var var555 : Array<(Float32, Int32)> = Array<(Float32, Int32)>(10){ i => (Float32(Float32(-29.0)), Int32(Int16(Int16(-47)))) };
        let var686 : (Float32, Int32) = (Float32(Float32(104.0)), Int32(-63));
        var var704 : (Float32, Int32) = (Float32(Float32(27.0)), Int32(-85));
        let var730 : (Float32, Int32) = (Float32(Float32(Float32(102.0))), Int32(-84));
        if (false) { var555 } else { match (var607) {
            case _ : Float32 => 
                var614
            
            case _ => 
                Class438();
                var614
            
            case caseVar674 : Range<Int8> => 
                (var678&127..=var678&127:(var44|1));
                var var711 : Float32 = Float32(Float32(56.0));
                if (false) { [var686, (Float32(-13.0), Int32(-34)), param432, param432, (var490, var425), (Float32(-85.0), var425), param432, var704, (var711, Int32(88)), (Float32(-101.0), var425)] } else { [(Float32(119.0), var425), var704, (var490, Int32(-12)), param432, param432, var686, var730, var704, var686, var730] } 
            
            case _ => 
                ();
                37 << (((-123)) & 7);
                var614
            
            case _ => 
                ();
                [var686, (Float32(75.0), var425), var730, var686, var686, (Float32(110.0), var425), (Float32(-47.0), var425), (var490, Int32(-73)), (Float32(-39.0), Int32(96)), (var490, Int32(9))]
            
        } } [8]
    }
;
    var425 = func431(var775, var47)[1];
    var var935 : Class438 = Class438();
    match (var517.func788(namedParam789 : true, namedParam790 : (-91), namedParam791 : var898, namedParam792 : [Float32(-9.0), Float32(-91.0), Float32(-121.0), Float32(96.0), Float32(40.0), Float32(-120.0), Float32(49.0), Float32(-26.0), Float32(-38.0), Float32(114.0)])[1]) {
        case 7 => 
            if (var907) { (Int32(-37)&127..Int32(9)&127:25|1) } else { var911 } 
        
        case caseVar915 : Option<Int8> => 
            var463;
            var911
        
        case 29 | 120 => 
            var463;
            var911
        
        case caseVar926 : Range<UInt32> => 
            var929;
            if (var907) { Class438() } else { var935 } ;
            if (var907) { (Int32(3)&127..Int32(121)&127:60|1) } else { var911 } 
        
        case _ => 
            ();
            ();
            (var425&127..=Int32(116)&127:(16|1))
        
    }
}



public func func1235(param1236 : Range<Int16>) : Bool { // block id: 1237
    false
}


public func func1240(param1241 : Array<(Float32, Int32)>) : Bool { // block id: 1242
    let var1379 : ?Interface441 = (['Q', 'i', 'w', '6', 's', '2', '6', 'w', 'c', 'k'] as Interface441);
    Class438.func1246(namedParam1247 : (var1379 ?? Class438()))
}


public func func1394(param1395 : Range<Int16>) : Array<(Float32, Int32)> { // block id: 1396
    var loopTimeVar1443 : Int64 = 0;
    do {
        loopTimeVar1443++;
        match (Option<Int8>.Some(var898)) {
            case _ => 
                'H';
                var var1432 : Int16 = Int16(104);
                var1432--;
                var425 **= (Int32(60) & 3)
            
        };
        Class438.var1440
    } while ((func1235(match (Option<Int8>.None) {
        case caseVar1403 : Range<Int8> => 
            (Int16(66)&127..=Int16(14)&127:(-34)|1)
        
        case caseVar1408 => 
            var463;
            (Int16(27)&127..=Int16(15)&127:(60|1))
        
        case _ => 
            var476;
            ();
            if (false) { (Int16(-7)&127..Int16(-72)&127:(-9)|1) } else { (Int16(-91)&127..Int16(36)&127:53|1) } 
        
    })) && loopTimeVar1443 < 100 ) ;
    let var1453 : Float32 = Float32(-53.0);
    let var1479 : (Float32, Int32) = (Float32(-108.0), Int32(-38));
    (Option<Array<(Float32, Int32)>>.Some([(var1453, var425), var775, (var1459, var425), (var1459, Int32(-107)), var775, (Float32(99.0), Int32(73)), var775, var775, (Float32(-116.0), var425), var775]) ?? (Option<Array<(Float32, Int32)>>.Some([var1479, (var1459, Int32(57)), var1479, (var1453, var425), var1479, var775, (var1459, var425), var1479, var1479, (Float32(26.0), var425)]) ?? match (var1502) {
        case _ => 
            ();
            var614
        
        case _ => 
            var614
        
        case caseVar1516 : Range<UInt16> => 
            var476 %= ((var476) | 1);
            [(var1209, var425), (var1453, Int32(-84)), var1479, (var1459, Int32(-51)), (Float32(-58.0), var1535), (Float32(22.0), Int32(-91)), var1479, (var1209, var425), var775, (Float32(-14.0), Int32(99))]
        
        case _ => 
            var463;
            ();
            var var1553 : Array<(Float32, Int32)> = [(Float32(72.0), Int32(16)), (Float32(-35.0), Int32(Int32(-43))), (Float32(10.0), Int32(-89)), (Float32(94.0), Int32(UInt32(UInt32(61)))), (Float32(Float32(Float32(-60.0))), Int32(-29)), (Float32(Float32(Float32(-110.0))), Int32(25)), (Float32(55.0), Int32(43)), (Float32(39.0), Int32(-80)), (Float32(14.0), Int32(107)), (Float32(Float32(13.0)), Int32(-32))];
            var1553
        
    }))
}



func func1706() : Range<Int16> { // block id: 1707
    Class438.var1712 |= var476;
    ((var1722 as Range<Int16>) ?? var457)
}

public func func1595(namedParam1596 ! : Option<Array<(Float32, Int32)>>, optionalParam1597 ! : Array<Option<Int8>> = [((UInt16(Int8(74))&127..=UInt16(Int8(-36))&127:(Int64(UInt64(31))|1)) as Int8), Option<Int8>.Some(Int8(UInt8(Int8(-84)))), Option<Int8>.Some(Int8(22)), Option<Int8>.None, ((Int32(-102)&127..Int32(-21)&127:79|1) as Int8), Option<Int8>.Some(Int8(UInt8(Int8(19)))), Option<Int8>.Some(Int8(UInt8(229))), ((Float32(Float32(-115.0)) as Array<(Float32, Int32)>) as Int8), Option<Int8>.Some(Int8(96)), ([(Float32(-26.0), Int32(-22)), (Float32(-96.0), Int32(48)), (Float32(66.0), Int32(-94)), (Float32(83.0), Int32(25)), (Float32(81.0), Int32(-72)), (Float32(4.0), Int32(-84)), (Float32(-84.0), Int32(2)), (Float32(-53.0), Int32(46)), (Float32(-111.0), Int32(10)), (Float32(24.0), Int32(66))] as Int8)], namedParam1661 ! : Int64, optionalParam1662 ! : Range<UInt32> = (UInt32(UInt32(Int32(Int8(81))))&127..=UInt32(Int8(-42))&127:((-65)|1))) : Range<Int16> { // block id: 1671
    var1673;
    let var1685 : ?Range<Int16> = ([(), (), (), (), (), (), (), (), (), ()] as Range<Int16>);
    func func1697(optionalParam1698 ! : (Range<Int16>) -> Bool = func1235, namedParam1702 ! : Option<Range<Int16>>) : Range<Int16> { // block id: 1703
        var463;
        func1706()
    }
;
    (var1685 ?? if (var907) { (var457, "uF&rBvoNFj")[0] } else { func1697(optionalParam1698 : func1235, namedParam1702 : var1685) } )
}

public struct Aggregate1914 {
    public init() { // block id: 1916

    }
;
    var var1921 : Bool = false
}



func func2518(param2519 : Array<(Float32, Int32)>) : Array<Option<Int8>> { // block id: 2520
    var var2633 : Range<UInt64> = (UInt64(62)&127..=UInt64(82)&127:(-84)|1);
    match (var41) {
        case caseVar2525 => 
            ();
            var var2537 : Unit = ();
            if (true) { var2270 } else { ((var1090&127..=UInt32(95)&127:(var44|1)), var2537, var1273, Option<Unit>.Some(var2537), (var1090, (10&127..var2496&127:(var2496|1)), 67, var2550, [false, false, var2219, false, false, var2219, var907, false, false, false])) } ;
            [var607, var607, var607, Option<Int8>.None, var607, Option<Int8>.Some(Int8(110)), Option<Int8>.None, Option<Int8>.Some(Int8(79)), Option<Int8>.None, var607]
        
        case caseVar2578 => 
            var2581;
            ();
            var800
        
        case caseVar2611 => 
            ();
            let var2618 : Range<UInt32> = (UInt32(Int8(-125))&127..UInt32(Int32(UInt16(Int8(106))))&127:(Int64(UInt32(UInt32(Int32(-5))))|1));
            (var463, Int16(-3), var2618, var911, var911, var2633);
            if (var907) { var800 } else { var800 } 
        
        case _ => 
            var var2645 : Interface443 = Class438();
            if (var2219) { Class438() } else { var2645 } ;
            [var607, var607, Option<Int8>.None, Option<Int8>.None, Option<Int8>.None, var607, Option<Int8>.Some(Int8(117)), Option<Int8>.None, var607, var607]
        
    }
}



public func func2783(param2784 : Array<Option<Int8>>) : Bool { // block id: 2785
    var var2802 : ??Bool = ([Float32(74.0), Float32(-43.0), Float32(16.0), Float32(31.0), Float32(-67.0), Float32(98.0), Float32(118.0), Float32(-64.0), Float32(67.0), Float32(-24.0)] as Option<Bool>);
    ((try { // block id: 2793
        ();
        ();
        Option<Option<Bool>>.Some(Option<Bool>.None)
    } catch (e: Exception) { // block id: 2798
        ();
        Int32(-36);
        var2802
    } ?? Option<Bool>.None) ?? false)
}



func func3126(param3127 : (Range<Int16>) -> Bool) : Unit { // block id: 3130

}



public func func3132(param3133 : (Array<(Float32, Int32)>) -> Array<Option<Int8>>) : Unit { // block id: 3136
    var var3143 : Range<Int16> = (Int16(-40)&127..Int16(Int16(78))&127:((-30)|1));
    match (match (if (var907) { // block id: 3141
                var3143;
                var510
            } else { // block id: 3150
                var476 |= UInt16(29);
                Aggregate1914();
                UInt8(192)
            }) {
            case _ => 
                var425--;
                if (var2219) { (Float32(71.0), Int32(4)) } else { (var2245, var425) } 
            
        }) {
        case (_ : Float32,caseVar3170 : (UInt32, Range<Int8>, Range<UInt16>, Option<Bool>, Int64, Range<Int32>)) => 
            var1090++;
            var2270;
            var var3178 : ?Range<Int64> = ([Option<Bool>.Some(true), Option<Bool>.Some(true), ((UInt32(105), (36&127..(-45)&127:((-93)|1)), (-40), "2[8N//p*a\\", [true, false, false, false, false, true, true, false, false, true]) as Bool), ((UInt64(81)&127..=UInt64(50)&127:123|1) as Bool), Option<Bool>.Some((Int8(-91) is Option<Option<Bool>>)), Option<Bool>.Some((Option<Option<Bool>>.Some(Option<Bool>.None) is Range<Int16>)), Option<Bool>.Some(false), ([UInt8(199), UInt8(230), UInt8(90), UInt8(185), UInt8(131), UInt8(41), UInt8(175), UInt8(147), UInt8(234), UInt8(15)] as Bool), (Class438(func1235, optionalParam3224 : [Float32(-9.0), Float32(-25.0), Float32(-4.0), Float32(40.0), Float32(-17.0), Float32(29.0), Float32(-13.0), Float32(27.0), Float32(-120.0), Float32(34.0)], namedParam3242 : func2783, namedParam3245 : Class438()) as Bool), (Int16(-50) as Bool)] as Range<Int64>);
            if (var907) { var3178 } else { var3178 } 
        
        case _ => 
            var1918;
            Option<Range<Int64>>.Some((25&127..(-62)&127:121|1))
        
    };
    var var3425 : (Range<Int16>, String) = ((Int16(118)&127..Int16(UInt16(Int16(-95)))&127:(Int64(UInt32(UInt16(15)))|1)), "Q^_0TDLY\\d");
    let var3440 : (Unit, Int16, Range<UInt32>, Range<Int32>, Range<Int32>, Range<UInt64>) = ((), Int16(-116), (UInt32(UInt32(99))&127..=UInt32(Int32(-120))&127:(Int64(UInt64(132))|1)), (Int32(-99)&127..Int32(86)&127:((-3)|1)), (Int32(4)&127..Int32(-48)&127:63|1), (UInt64(219)&127..=UInt64(118)&127:(-85)|1));
    var loopTimeVar3476 : Int64 = 0;
    do {
        loopTimeVar3476++;
        var463;
        var3255
    } while (((((((var1861&127..=var425&127:(var44|1)), ((), Int16(77), var3399, (var2678&127..=Int32(39)&127:(16|1)), var911, (UInt64(160)&127..UInt64(168)&127:(-79)|1)), [var510, var510, UInt8(9), var510, var510, var510, UInt8(20), var510, UInt8(167), var510], (UInt64(160)&127..UInt64(103)&127:(-64)|1)), var3425, ['i', 'i', 'a', 'g', 's', 'F', '3', '1', 'X', 'C'], (UInt32(203)&127..=UInt32(209)&127:106|1), true, var3440, ((Int16(-84)&127..=Int16(-100)&127:((-74)|1)), "JAGOX|`|\"^")) as Bool) ?? try { // block id: 3464
        true
    } catch (_) { // block id: 3466
        var2219
    } finally { // block id: 3468
        UInt64(176) < UInt64(85)
    })) && loopTimeVar3476 < 100 ) ;
    var loopTimeVar3481 : Int64 = 0;
    while ((false) && loopTimeVar3481 < 100 ) {
        loopTimeVar3481++;

    }
}

public func func1706(param2519 : Array<(Float32, Int32)>) : Array<Option<Int8>> { // block id: 2520
    var var2633 : Range<UInt64> = (UInt64(62)&127..=UInt64(82)&127:(-84)|1);
    match (var41) {
        case caseVar2525 => 
            ();
            var var2537 : Unit = ();
            if (true) { var2270 } else { ((var1090&127..=UInt32(95)&127:(var44|1)), var2537, var1273, Option<Unit>.Some(var2537), (var1090, (10&127..var2496&127:(var2496|1)), 67, var2550, [false, false, var2219, false, false, var2219, var907, false, false, false])) } ;
            [var607, var607, var607, Option<Int8>.None, var607, Option<Int8>.Some(Int8(110)), Option<Int8>.None, Option<Int8>.Some(Int8(79)), Option<Int8>.None, var607]
        
        case caseVar2578 => 
            var2581;
            ();
            var800
        
        case caseVar2611 => 
            ();
            let var2618 : Range<UInt32> = (UInt32(Int8(-125))&127..UInt32(Int32(UInt16(Int8(106))))&127:(Int64(UInt32(UInt32(Int32(-5))))|1));
            (var463, Int16(-3), var2618, var911, var911, var2633);
            if (var907) { var800 } else { var800 } 
        
        case _ => 
            var var2645 : Interface443 = Class438();
            if (var2219) { Class438() } else { var2645 } ;
            [var607, var607, Option<Int8>.None, Option<Int8>.None, Option<Int8>.None, var607, Option<Int8>.Some(Int8(117)), Option<Int8>.None, var607, var607]
        
    }
}



public func func3487(param3488 : (Range<Int16>) -> Bool) : (Array<(Float32, Int32)>) -> Array<Option<Int8>> { // block id: 3491
    match (-(Option<UInt64>.None ?? var2397)) {
        case 195 | 246 => 
            var463
        
        case caseVar3507 => 
            var2397 %= ((var2397) | 1)
        
        case _ => 
            var463;
            Aggregate1914();
            var463
        
    };
    var var3537 : Int8 = Int8(UInt8(UInt8(215)));
    let var3632 : Bool = true;
    (Option<Unit>.None ?? match ((var3526 ?? Class438())) {
        case caseVar3532 => 
            ();
            var3537 = var898
        
        case caseVar3544 : Option<Array<(Float32, Int32)>> => 
            var3547;
            ();
            var476 |= var476
        
        case caseVar3616 => 
            var3537++
        
        case _ => 
            if (var2219) { Option<Unit>.Some(()) } else { var3627 } ;
            var907 &&= var3632;
            ()
        
    });
    func1706
}

func func3637<T0>(param1236 : Range<Int16>) : Bool where T0 <: UInt16 { // block id: 1237
    false
}

public func func3120(param3121 : (Array<(Float32, Int32)>) -> Bool) : Unit { // block id: 3124
    let var3483 : ((Array<(Float32, Int32)>) -> Array<Option<Int8>>) -> Unit = func3132;
    var var3640 : (Range<Int16>) -> Bool = func3637<UInt16>;
    var3640|>(func3487~>var3483);
    if (match {
        case ((var1940&127..=var1940&127:(117|1)) is Bool) => 
        true
        case (Option<Bool>.None ?? false) => 
        let var3662 : Int32 = Int32(Int16(-62));
        (var2709, Int16(36), var3399, (Int32(26)&127..var3662&127:((-52)|1)), var911, (UInt64(49)&127..UInt64(48)&127:(var44|1)));
        Int32(48) == Int32(47)
        case _ => 
        false
    }) { // block id: 3676
        """
I0<n}
T_5G3
""";
        try { // block id: 3679
            var510 & UInt8(141);
            var510
        } finally { // block id: 3684
            var463;
            UInt8(167)
        };
        var loopTimeVar3699 : Int64 = 0;
        do {
            loopTimeVar3699++;
            if (var907) { var3255 } else { var3255 } ;
            if (var2219) { Class438() } else { Class438() } 
        } while ((false) && loopTimeVar3699 < 100 ) 
    } else if (try { // block id: 3702
        Int16(-44) >> ((Int16(-37)) & 7)
    } catch (e: Exception) { // block id: 3706
        Int16(-100)
    } finally { // block id: 3708
        let var3710 : (UInt32, Range<Int8>, Range<UInt16>, Option<Bool>, Int64, Range<Int32>) = (UInt32(249), (Int8(Int8(49))&127..Int8(UInt8(UInt8(197)))&127:((-99)|1)), (UInt16(252)&127..=UInt16(UInt8(115))&127:((-113)|1)), Option<Bool>.Some(false), 118, (Int32(113)&127..Int32(107)&127:(Int64(UInt16(Int16(-104)))|1)));
        var3710;
        ();
        Int16(-91)
    } > if (var907) { // block id: 3738
        var1090 &= UInt32(124);
        var1940
    } else if (var3744) { // block id: 3746
        var var3748 : Unit = ();
        var3748;
        Int16(27)
    } else { // block id: 3751
        ();
        (var1090&127..UInt32(43)&127:((-71)|1));
        Int16(-21)
    }) { // block id: 3758
        ();
        var1940 %= ((Int16(14)) | 1)
    };
    var463
}

public func func3765(param1241 : Array<(Float32, Int32)>) : Bool { // block id: 1242
    let var1379 : ?Interface441 = (['Q', 'i', 'w', '6', 's', '2', '6', 'w', 'c', 'k'] as Interface441);
    Class438.func1246(namedParam1247 : (var1379 ?? Class438()))
}

public func func3081(param3082 : Option<Range<Int16>>) : Int32 { // block id: 3083
    UInt64(171);
    let var3792 : (Range<Int16>, String) = ((Int16(UInt16(76))&127..Int16(Int16(10))&127:(71|1)), ".5}2sEnH8F");
    func func3091(param3092 : UInt8, optionalParam3093 ! : Array<UInt8> = Array<UInt8>(10){ i => UInt8(Int8(UInt8(UInt8(197)))) }, namedParam3114 ! : Option<Interface441>, optionalParam3115 ! : Option<Range<Int16>> = (Class438() as Range<Int16>)) : Option<(Range<Int16>, String)> { // block id: 3118
        var var3768 : (Array<(Float32, Int32)>) -> Bool = func3765;
        var3768|>func3120;
        try { // block id: 3771
            Int64(param3092);
            let var3776 : (Range<Int16>, String) = ((Int16(UInt16(Int16(115)))&127..Int16(UInt16(UInt8(144)))&127:(Int64(Int32(Int16(89)))|1)), "}Y=UW<La{[b");
            Option<(Range<Int16>, String)>.Some(var3776)
        } finally { // block id: 3789
            Option<(Range<Int16>, String)>.Some(var3792)
        }
    }
;
    (func3091(if (var907) { // block id: 3803
        var2709;
        var3627;
        UInt8(50) | var510
    } else { // block id: 3809
        ();
        var1459 /= Float32((Int32(var1209)) | 1);
        var510
    }, namedParam3114 : var3816) ?? if ((Option<Bool>.None ?? true)) { // block id: 3866
        if (false) { var3792 } else { (var457, "o&u?;DKmjx") } 
    } else { // block id: 3873
        let var3879 : String = ###"[%husT&$)r"###;
        if (false) { (var457, var3879) } else { var3792 } 
    });
    Int32(-110)
}







public func func3069(param3070 : Option<Range<Int64>>) : Float32 { // block id: 3071
    let var3884 : (Option<Range<Int16>>) -> Int32 = func3081;
    func func3073(param3074 : Option<Bool>, param3075 : UInt32, optionalParam3076 ! : Interface442 = Class438(), namedParam3078 ! : UInt32) : Unit { // block id: 3079
        ((Option<Option<Range<Int16>>>.None ?? var3894) as Range<Int16>)|>var3884;
        var var3969 : (Range<Int16>, String) = ((Int16(Int16(UInt8(39)))&127..=Int16(UInt16(133))&127:(Int64(UInt32(123))|1)), """
VWaS=
='o+r
""");
        try (resource = Class438()) { // block id: 3938
            (var3945 ?? (UInt8(69)&127..=var510&127:(var2496|1)));
            Option<Unit>.Some(var2709).getOrThrow();
            var loopTimeVar3981 : Int64 = 0;
            while ((false) && loopTimeVar3981 < 100 ) {
                loopTimeVar3981++;
                Option<(Range<Int16>, String)>.Some(var3969)
            }
        } catch (e: Exception) { // block id: 3982
            var loopTimeVar3987 : Int64 = 0;
            do {
                loopTimeVar3987++;

            } while ((var2219) && loopTimeVar3987 < 100 ) ;
            ()
        }
    }
;
    var var4075 : Bool = true;
    func3073(match (match (var911) {
            case caseVar3994 => 
                (UInt32(242)&127..UInt32(8)&127:(var44|1));
                var var4002 : Bool = ((false, 'D', (['S', '3', '8', 'p', 'l', 'p', 'G', 'A', 'p', 'g'] is Array<Unit>)) is String);
                var4002 &&= false;
                var2245
            
            case _ => 
                ();
                if (var2219) { Option<Float64>.Some(var1273) } else { Option<Float64>.Some(var1273) } ;
                var1209 ** Float32(Int32(Float32(78.0)) & 3)
            
            case _ => 
                ();
                var2397 >> ((UInt64(237)) & 7);
                var1459 * var4033
            
        }) {
        case -94.0 => 
            if (true) { var3255 } else { var3255 } ;
            Int16(69) == var1940;
            if (var907) { var2581 } else { var2581 } 
        
        case _ => 
            UInt32(65);
            var3627;
            var2581
        
    }, ((Option<Range<Int64>>.None as UInt32) ?? if (true) { // block id: 4064
        ();
        var1090 + var1090
    } else { // block id: 4069
        UInt32(80)
    }), optionalParam3076 : if ((Option<Bool>.None ?? var4075)) { Class438() } else { (var3526 ?? Class438()) } , namedParam3078 : UInt32(Int16(-33)));
    (if ((var2581 ?? var3744)) { (if (false) { Option<Array<Rune>>.None } else { var4096 } ) } else { match (((UInt32(175)&127..=UInt32(195)&127:7|1), (), var1273, Option<Unit>.Some(var463), (UInt32(101), var41, var4110, var2550, var1722))) {
        case (caseVar4116 : Option<Array<Rune>>,caseVar4117,caseVar4118,caseVar4119,(_,_ : Class438,_,caseVar4120,_ : Aggregate1914)) => 
            var4096;
            var4096
        
        case _ : Range<UInt16> => 
            ();
            var2270;
            var4096
        
        case _ => 
            Option<Array<Rune>>.None
        
    } }  ?? ['i', 'B', 'i', 'e', '3', 'K', 'M', 'F', 'N', '3']);
    var var4140 : ?Float32 = Option<Float32>.Some(Float32(Float32(Float32(Float32(-51.0)))));
    (var4140 ?? var1459 / Float32((Int32((Float32(112.0) - var1209))) | 1))
}



func func3000(param3001 : Range<Int8>) : Int32 { // block id: 3002
    let var3029 : UInt64 = UInt64(Int64(Int8(Int8(54))));
    let var3057 : Option<Interface445> = Option<Interface445>.Some(Class438(namedParam3061 : (((Int32(-12)&127..Int32(-36)&127:(123|1)), ((), Int16(-100), (UInt32(173)&127..=UInt32(243)&127:(6|1)), (Int32(-56)&127..Int32(122)&127:(-123)|1), (Int32(113)&127..=Int32(56)&127:((-116)|1)), (UInt64(37)&127..UInt64(81)&127:(85|1))), [UInt8(235), UInt8(160), UInt8(167), UInt8(23), UInt8(175), UInt8(134), UInt8(93), UInt8(15), UInt8(7), UInt8(40)], (UInt64(24)&127..UInt64(72)&127:((-123)|1))), ((Int16(77)&127..=Int16(-101)&127:(-73)|1), ###"~fjM\":N|7<"###), ['I', '1', 'l', 'q', 'q', 'n', 'x', '2', 'm', '7'], (UInt32(49)&127..=UInt32(139)&127:(-105)|1), ([Float32(-127.0), Float32(-84.0), Float32(126.0), Float32(23.0), Float32(13.0), Float32(42.0), Float32(52.0), Float32(-29.0), Float32(-2.0), Float32(38.0)] is Option<Interface445>), ((), Int16(13), (UInt32(118)&127..=UInt32(252)&127:((-100)|1)), (Int32(43)&127..=Int32(12)&127:46|1), (Int32(9)&127..Int32(-8)&127:(36|1)), (UInt64(171)&127..=UInt64(110)&127:(65|1))), ((Int16(-41)&127..Int16(95)&127:60|1), "<Ncz8C~fa{4")), optionalParam3062 : func1706));
    try { // block id: 3004
        var var3038 : Bool = true;
        try { // block id: 3006
            var1673
        } finally { // block id: 3008
            if (var907) { (var463, var1940, (var1090&127..=UInt32(20)&127:(var44|1)), var911, (Int32(64)&127..Int32(-80)&127:(-41)|1), (UInt64(13)&127..UInt64(151)&127:(-15)|1)) } else { (var463, var1940, (UInt32(161)&127..UInt32(12)&127:(-42)|1), (Int32(76)&127..Int32(112)&127:(-14)|1), (Int32(-80)&127..Int32(95)&127:(-128)|1), (var3029&127..=var3029&127:(var44|1))) } ;
            (var3038, 'O', true);
            ((), UInt64(78), Int32(-61))
        };
        29.0
    } catch (e: Exception) { // block id: 3047
        Float64(var1273)
    } finally { // block id: 3050
        (var3057 ?? var517);
        try { // block id: 4271
            ();
            var1273
        } catch (e: Exception) { // block id: 4274
            0.0 + var1273
        } finally { // block id: 4278
            var4281 * (-82.0)
        }
    };
    var loopTimeVar4300 : Range<UInt64> = (UInt64(UInt32(UInt8(UInt8(232))))&127..UInt64(Int32(UInt16(Int8(-113))))&127:(106|1));
    for (i in loopTimeVar4300 where (var1090 > var4291) || true) {
        var463;
        var463
    };
    let var4325 : ?Option<Int32> = ((true, 'd', true) as Option<Int32>);
    var var4335 : Option<Int32> = Option<Int32>.Some(Int32(Int16(86)));
    (if ((Int16(-122) is Range<UInt16>)) { (var4325 ?? Option<Int32>.None) } else { (Option<Option<Int32>>.Some(var4335) ?? var4335) }  ?? ((var607 as Int32) ?? try { // block id: 4344
        Int32(-110)
    } catch (_) { // block id: 4346
        Int32(-114)
    }))
}

func func2994(param2995 : (UInt32, Range<Int64>, Int64, String, Array<Bool>)) : Unit { // block id: 2996
    var425 <<= ((((Int8(86)&127..=var898&127:((-110)|1))|>func3000)) & 7);
    try (resource = Class438()) { // block id: 4354

    } finally { // block id: 4355
        let var4365 : Bool = true;
        var loopTimeVar4374 : Int64 = 0;
        while ((true) && loopTimeVar4374 < 100 ) {
            loopTimeVar4374++;
            [var2219, false, false, var3744, var4365, var4365, true, false, var4365, true];
            ()
        };
        if (false) { // block id: 4377

        }
    }
}


func func2772(param2773 : UInt32) : Option<Range<Int16>> { // block id: 2774
    let var2835 : UInt16 = UInt16(UInt8(132));
    let var2852 : ?Unit = Option<Unit>.None;
    var loopTimeVar2986 : Int64 = 0;
    while (((match ((UInt64(239)&127..=UInt64(142)&127:(-1)|1)) {
        case _ => 
            var var2906 : Float32 = Float32(Float32(54.0));
            [(Float32(116.0), var2678), (Float32(-45.0), var425), (Float32(-87.0), var2678), var2890, var775, (var1459, var1861), var2899, (var2906, Int32(38)), var2890, (var1459, var2678)]
        
        case _ : UInt64 => 
            var var2919 : Int64 = Int64(Int64(Int32(90)));
            var2919 &= var2919;
            [var775, var775, (Float32(40.0), var425), (Float32(92.0), Int32(-100)), (var2245, Int32(108)), (Float32(-91.0), var1535), var2695, var2899, (var2245, var425), (var1459, Int32(113))]
        
        case _ => 
            var1673;
            let var2962 : (Float32, Int32) = (Float32(Float32(15.0)), Int32(UInt32(118)));
            [(Float32(-103.0), var1861), var2899, (Float32(-123.0), Int32(20)), var2890, var2899, var2962, var2962, var2899, var2899, (var1209, Int32(-54))]
        
        case _ : Aggregate1914 => 
            UInt16(68) ^ UInt16(88);
            var614
        
        case _ => 
            var614
        
    }|>{ lambdaParameter2779 : Array<(Float32, Int32)> => (if (var907) { [Option<Int8>.None, Option<Int8>.Some(Int8(83)), Option<Int8>.Some(var898), Option<Int8>.Some(Int8(97)), var607, Option<Int8>.None, var607, var607, Option<Int8>.None, Option<Int8>.Some(Int8(-29))] } else { var800 } |>{ lambdaParameter2809 : Array<Option<Int8>> => var907 }) || (match ((UInt16(64)&127..var2835&127:(var44|1))) {
        case caseVar2841 : Interface443 => 
            var1273 % Float64((Int32((-108.0))) | 1)
        
        case _ => 
            if (var907) { var2852 } else { Option<Unit>.Some(var2709) } ;
            var2709;
            var1273
        
        case caseVar2860 : Int64 => 
            var463;
            ();
            (-44.0)
        
        case _ : Int32 => 
            var1273
        
        case _ => 
            ();
            (-8.0)
        
    } > (-81.0)) })) && loopTimeVar2986 < 100 ) {
        loopTimeVar2986++;

    };
    let var4379 : ((UInt32, Range<Int64>, Int64, String, Array<Bool>)) -> Unit = func2994;
    let var4424 : Bool = true;
    func func2988(optionalParam2989 ! : Range<UInt64> = (UInt64(181)&127..UInt64(168)&127:107|1), namedParam2991 ! : Option<Bool>) : Option<Range<Int16>> { // block id: 2992
        let var4389 : Bool = (Float32(97.0) is Option<Option<Bool>>);
        if (match (Aggregate1914()) {
            case _ : Range<UInt16> => 
                var4389 && true
            
            case caseVar4395 : Range<Int64> => 
                var2219
            
            case caseVar4400 => 
                ();
                true
            
            case _ => 
                var3744
            
        }) { // block id: 4407
            ();
            if (false) { var341 } else { var341 } 
        } else { // block id: 4413
            (UInt32(219), (var44&127..=77&127:((-29)|1)), (-39), var2550, [var4424, var4424, false, false, var4389, var4389, var3744, true, var2219, true])
        }|>var4379;
        let var4436 : ?Range<Int16> = Option<Range<Int16>>.Some((Int16(62)&127..=Int16(115)&127:(-112)|1));
        var4436
    }
;
    let var4446 : Option<Option<Option<Bool>>> = Option<Option<Option<Bool>>>.Some(Option<Option<Bool>>.None);
    func2988(namedParam2991 : ((var4446 ?? Option<Option<Bool>>.None) ?? try { // block id: 4451
        let var4453 : (Range<Int32>, (Unit, Int16, Range<UInt32>, Range<Int32>, Range<Int32>, Range<UInt64>), Array<UInt8>, Range<UInt64>) = ((Int32(Int8(Int8(77)))&127..=Int32(-66)&127:(Int64(UInt64(91))|1)), ((), Int16(33), (UInt32(11)&127..UInt32(226)&127:(Int64(Int16(74))|1)), (Int32(-122)&127..=Int32(Int16(85))&127:(Int64(UInt32(179))|1)), (Int32(-21)&127..Int32(73)&127:27|1), (UInt64(107)&127..=UInt64(64)&127:(-89)|1)), [UInt8(111), UInt8(236), UInt8(UInt8(UInt8(31))), UInt8(Int8(60)), UInt8(71), UInt8(217), UInt8(123), UInt8(180), UInt8(147), UInt8(29)], (UInt64(UInt64(161))&127..=UInt64(UInt64(252))&127:((-15)|1)));
        var4453;
        var2581
    } finally { // block id: 4499
        Option<Option<Range<Int16>>>.None;
        ();
        if (false) { var2581 } else { var2581 } 
    }))
}


func func2291(param2292 : Option<Array<(Float32, Int32)>>) : Range<UInt64> { // block id: 2293
    var var2361 : Rune = '8';
    match ((match (var2270) {
            case (_,caseVar2300,caseVar2301 : Interface443,_ : (Unit, Int16, Range<UInt32>, Range<Int32>, Range<Int32>, Range<UInt64>),(caseVar2302,caseVar2303 : Range<UInt16>,caseVar2304,_ : Option<Interface441>,caseVar2305)) => 
                Int16(-29) * Int16(-41)
            
            case _ => 
                (71&127..(-83)&127:42|1);
                var1940 - Int16(10)
            
        }&127..match (Option<Int8>.Some(Int8(40))) {
            case _ => 
                var463;
                ();
                Int16(-58)
            
        }&127:(var44 + (-11)|1))) {
        case caseVar2329 : Aggregate1914 => 
            if (true) { Option<Unit>.Some(var463) } else { Option<Unit>.None } ;
            UInt8(23) ^ var510
        
        case _ => 
            ();
            -UInt8(10)
        
        case caseVar2347 : (UInt32, Range<Int8>, Range<UInt16>, Option<Bool>, Int64, Range<Int32>) => 
            var463;
            if (true) { var209 } else { [var929, var929, '4', 'R', var929, 'u', var2361, 'O', var929, var2361] } ;
            var510
        
        case _ => 
            var510 + var510
        
    };
    var var2412 : Int8 = Int8(-99);
    let var2427 : (Bool, Rune, Bool) = (((Class438() as Range<Int16>) is (Option<Int8>, Range<UInt32>, Array<UInt8>) -> Rune), '1', false);
    let var2509 : ?Range<Int16> = Option<Range<Int16>>.Some((Int16(34)&127..Int16(53)&127:(-35)|1));
    func func2458(optionalParam2459 ! : Array<UInt8> = [UInt8(182), UInt8(244), UInt8(83), UInt8(148), UInt8(239), UInt8(195), UInt8(195), UInt8(35), UInt8(80), UInt8(229)], optionalParam2461 ! : Array<Unit> = Array<Unit>(10){ i => () }) : Array<Option<Int8>> { // block id: 2473
        var463;
        var var2478 : ?Bool = ((Float32(Float32(-28.0)), Int32(-74)) as Bool);
        let var2490 : Int16 = Int16(124);
        var var2499 : Int64 = 98;
        var loopTimeVar2516 : Int64 = 0;
        do {
            loopTimeVar2516++;

        } while (((var2478 ?? try { // block id: 2485
            ();
            Int16(-28) == var2490
        } catch (e: Exception) { // block id: 2492
            var517;
            var2496 %= ((var2499) | 1);
            Int8(23) != var898
        } finally { // block id: 2504
            var463;
            if (false) { var2509 } else { Option<Range<Int16>>.None } ;
            var2219
        })) && loopTimeVar2516 < 100 ) ;
        var var2660 : (Array<(Float32, Int32)>) -> Array<Option<Int8>> = func2518;
        if ((Option<Interface441>.None is UInt8)) { (if (var2219) { var614 } else { [var775, var775, (Float32(37.0), var425), var775, (var1209, var2678), (Float32(-75.0), Int32(-15)), (Float32(124.0), var1535), (Float32(-84.0), Int32(-114)), (Float32(105.0), var425), var2695] } ) } else { (Option<Array<(Float32, Int32)>>.Some(var614) ?? var614) } |>var2660
    }
;
    let var4507 : (UInt32) -> Option<Range<Int16>> = func2772;
    if ((match ([var929, var2361, var2361, var929, var2361, 'H', var929, 't', 'C', var929]) {
        case caseVar2388 : Interface444 => 
            -Int8(-110)
        
        case _ : Range<Int64> => 
            var2397 *= UInt64(248);
            UInt64(217) < UInt64(104);
            var898 | Int8(-59)
        
        case caseVar2408 => 
            var2412++;
            var44;
            Int8(-58)
        
        case _ => 
            var2412 *= Int8(117);
            var463;
            var2412 ** (Int8(126) & 3)
        
    } >= match (var2427) {
        case (caseVar2436 : Bool,_,_) => 
            var463;
            Int8(-71) << ((var2412) & 7)
        
        case (_,_,_ : (UInt32, Range<Int8>, Range<UInt16>, Option<Bool>, Int64, Range<Int32>)) => 
            var898
        
        case _ => 
            var463;
            var2412 + var2412
        
    })) { func1595(namedParam1596 : if (var2219) { var1502 } else { param2292 } , optionalParam1597 : func2458(optionalParam2461 : [(), (), var2709, (), var463, var2709, var463, var2709, (), ()]), namedParam1661 : match (Option<Int8>.Some(Int8(118))) {
        case caseVar2723 : UInt32 => 
            var463;
            var44 + 35
        
        case caseVar2731 : (Unit, UInt64, Int32) => 
            var2496 * 65
        
        case _ => 
            var1459 %= Float32((Int32(var1209)) | 1);
            var463;
            var2496
        
        case _ : UInt64 => 
            var510 |= var510;
            if (var2219) { Class438() } else { var2754 } ;
            57
        
        case _ => 
            var2496 *= (-24);
            (-119)
        
    }, optionalParam1662 : (Option<Range<UInt32>>.None ?? (UInt32(11)&127..UInt32(143)&127:(-82)|1))) } else { ((UInt32(186)|>var4507) ?? (Int16(111)&127..Int16(88)&127:(-9)|1)) } ;
    var var4518 : Float32 = Float32(Float32(Float32(112.0)));
    (var2397&127..=try { // block id: 4514
        var1459 %= Float32((Int32(var4518)) | 1);
        var2397
    } finally { // block id: 4523
        var2397
    }&127:((Option<Int64>.Some(var4110) ?? Int64(var2397))|1))
}

func func2152(namedParam2153 ! : Range<UInt32>, optionalParam2154 ! : Array<(Float32, Int32)> = [(Float32(116.0), Int32(-116)), (Float32(Float32(Float32(-54.0))), Int32(Int32(-121))), (Float32(-112.0), Int32(99)), (Float32(Float32(Float32(-124.0))), Int32(Int8(-27))), (Float32(-88.0), Int32(60)), (Float32(Float32(Float32(-101.0))), Int32(-99)), (Float32(3.0), Int32(-88)), (Float32(Float32(Float32(-81.0))), Int32(UInt32(116))), (Float32(Float32(-105.0)), Int32(54)), (Float32(Float32(Float32(32.0))), Int32(UInt32(7)))], namedParam2201 ! : Bool, namedParam2202 ! : Float32) : Array<Bool> { // block id: 2203
    var loopTimeVar2215 : Int64 = 0;
    do {
        loopTimeVar2215++;
        (Option<Unit>.None ?? ())
    } while ((namedParam2201) && loopTimeVar2215 < 100 ) ;
    var var4543 : Interface442 = Class438();
    (if (var2219) { match (var2223) {
        case _ => 
            var var2258 : (Float32, Int32) = (Float32(Float32(Float32(Float32(-42.0)))), Int32(Int16(124)));
            [var775, var775, (Float32(35.0), Int32(-83)), (var2245, var425), var775, (Float32(105.0), Int32(111)), var775, (var1459, Int32(83)), var775, var2258];
            Option<Unit>.None
        
    } } else { var2270[3] }  ?? match (func2291(Option<Array<(Float32, Int32)>>.None)) {
        case _ => 
            if (true) { var3526 } else { Option<Interface442>.Some(var4543) } ;
            var2709
        
        case _ => 
            namedParam2201 && false;
            let var4555 : (Range<Int16>) -> Bool = func1235;
            if (true) { Class438(var4555, optionalParam3224 : var4558, namedParam3242 : func2783, namedParam3245 : Class438()) } else { var2754 } ;
            var2245 -= var1459
        
    });
    let var4584 : Unit = ();
    var var4611 : Unit = ();
    if (match (if (false) { var4571 } else { Option<Option<Bool>>.Some(Option<Bool>.None) } ) {
        case _ => 
            if (true) { var1918 } else { var1918 } ;
            var4584;
            var3744 || var3744
        
        case caseVar4591 : Interface441 => 
            var1940 /= ((var1940) | 1);
            Option<Array<(Float32, Int32)>>.None;
            var907
        
        case caseVar4600 : (Range<UInt32>, Unit, Float64, Option<Unit>, (UInt32, Range<Int64>, Int64, String, Array<Bool>)) => 
            false
        
        case caseVar4605 : Interface445 => 
            var425 |= var1861;
            var4611;
            var44 > var44
        
        case _ => 
            var4291 /= ((var1090) | 1);
            var2219
        
    }) { var1722 } else { var1722 } 
}

func func2082(namedParam2083 ! : Interface441, optionalParam2084 ! : String = "5FFW#NQR0a") : Range<Int64> { // block id: 2086
    let var2096 : ((Range<Int32>, (Unit, Int16, Range<UInt32>, Range<Int32>, Range<Int32>, Range<UInt64>), Array<UInt8>, Range<UInt64>), (Range<Int16>, String), Array<Rune>, Range<UInt32>, Bool, (Unit, Int16, Range<UInt32>, Range<Int32>, Range<Int32>, Range<UInt64>), (Range<Int16>, String)) = (((Int32(-113)&127..Int32(-84)&127:(-68)|1), ((), Int16(Int16(48)), (UInt32(172)&127..=UInt32(223)&127:(-47)|1), (Int32(36)&127..=Int32(-61)&127:9|1), (Int32(87)&127..Int32(55)&127:(66|1)), (UInt64(9)&127..=UInt64(18)&127:44|1)), [UInt8(200), UInt8(216), UInt8(89), UInt8(131), UInt8(61), UInt8(145), UInt8(195), UInt8(146), UInt8(33), UInt8(84)], (UInt64(131)&127..UInt64(7)&127:((-96)|1))), ((Int16(92)&127..Int16(29)&127:111|1), """
?;*SY
ja{%Yy
"""), ['w', 'f', 'y', '5', 'e', 'M', 'o', '6', 'W', '2'], (UInt32(132)&127..UInt32(139)&127:72|1), ("""
T?[Aa{
5Y+!=
""" is (UInt32, Range<Int64>, Int64, String, Array<Bool>)), ((), Int16(UInt8(UInt8(31))), (UInt32(94)&127..=UInt32(144)&127:(-59)|1), (Int32(88)&127..Int32(-98)&127:(-68)|1), (Int32(123)&127..Int32(UInt32(178))&127:((-43)|1)), (UInt64(122)&127..=UInt64(231)&127:(-54)|1)), ((Int16(124)&127..=Int16(-73)&127:(-118)|1), ###")bC^`$jV,]"###));
    let var4680 : ?Array<Rune> = Option<Array<Rune>>.Some(['M', 'Q', 'y', 'l', 'j', 'q', '7', 'o', 'n', 'c']);
    ((var2096[3] as Range<Int64>) ?? match (func2152(namedParam2153 : (UInt32(39)&127..=UInt32(57)&127:44|1), optionalParam2154 : [(var4033, Int32(-37)), (var1209, Int32(-5)), (var2245, var425), (Float32(-34.0), Int32(67)), var2695, (Float32(20.0), var425), (var1209, Int32(-75)), (var2245, Int32(-100)), (var1209, Int32(-41)), var2899], namedParam2201 : false, namedParam2202 : Float32(67.0))) {
        case _ => 
            Int8(-52);
            ();
            var41
        
        case _ : Option<Interface441> => 
            Option<Interface441>.Some(Class438());
            (UInt8(63)&127..UInt8(155)&127:(var4110|1));
            (var2496&127..=(-26)&127:(114|1))
        
        case _ => 
            Option<Unit>.Some(());
            if (true) { var4680 } else { var4096 } ;
            var var4693 : Range<Int64> = (Int64(UInt32(224))&127..Int64(Int64(UInt64(170)))&127:(Int64(UInt16(Int8(UInt8(31))))|1));
            if (var907) { (var4688&127..(-54)&127:(var44|1)) } else { var4693 } 
        
    })
}

public func func2078(param2079 : (UInt32, Range<Int8>, Range<UInt16>, Option<Bool>, Int64, Range<Int32>)) : (UInt32, Range<Int64>, Int64, String, Array<Bool>) { // block id: 2080
    var var4707 : Bool = ((UInt32(23), (94&127..(-29)&127:(-87)|1), 125, "'(T~l^b|2z", [false, false, false, false, true, false, false, false, true, true]) is Option<Range<Int16>>);
    var var4717 : ?Interface441 = ((-70) as Interface441);
    func2082(namedParam2083 : (if (var4707) { var3816 } else { var4717 }  ?? var4721));
    let var4737 : Bool = (Class438() is (UInt32) -> Option<Range<Int16>>);
    try { // block id: 4724
        var341
    } catch (_) { // block id: 4726
        (UInt32(34), var41, var4688, """
`Bd$!
X0h3.
""", [true, var3744, var2219, var4737, false, true, var907, var4707, true, var2219])
    }
}


public func func1230(param1231 : Int8) : Option<Bool> { // block id: 1232
    let var1798 : ?Bool = (((Int32(Int32(-34))&127..=Int32(123)&127:((-123)|1)) as Array<(Float32, Int32)>) as Bool);
    if ((func1595(namedParam1596 : Option<Array<(Float32, Int32)>>.None, optionalParam1597 : [var607, var607, var607, Option<Int8>.None, Option<Int8>.Some(Int8(115)), Option<Int8>.Some(param1231), Option<Int8>.None, Option<Int8>.None, var607, Option<Int8>.Some(Int8(-91))], namedParam1661 : (-20), optionalParam1662 : (var1090&127..UInt32(18)&127:(var44|1)))|>(func1394~>func1240))) { (if ((Class438.var1751)) { var1756[3] } else { (var476 as Bool) } ) } else { if (false) { // block id: 1785
        var517;
        (var1090, (Int8(-9)&127..Int8(-99)&127:(59|1)), (UInt16(245)&127..UInt16(173)&127:(74|1)), var1798, 7, (Int32(72)&127..=Int32(11)&127:(var44|1)))
    } else if (false) { // block id: 1812
        var1756
    } else { // block id: 1814
        let var1816 : Range<UInt64> = (UInt64(Int32(-72))&127..UInt64(UInt64(UInt16(166)))&127:((-21)|1));
        var1816;
        if (false) { var1722 } else { var1722 } ;
        (UInt32(176), (Int8(12)&127..Int8(-26)&127:(-35)|1), var1832, Option<Bool>.None, var44, (Int32(-32)&127..var425&127:(122|1)))
    }[3] } ;
    let var1849 : (Bool, Rune, Bool) = (true, 'G', (113 is Array<Float32>));
    try (resource = Class438()) { // block id: 1845
        var1849[1];
        [(), (), (), (), (), (), (), (), (), ()][7]
    } finally { // block id: 1859
        var1861;
        var var1864 : Interface442 = Class438();
        var1864;
        var463
    };
    let var1928 : Interface442 = Class438();
    let var2051 : (Unit, Int16, Range<UInt32>, Range<Int32>, Range<Int32>, Range<UInt64>) = ((), Int16(UInt16(Int16(115))), (UInt32(38)&127..UInt32(2)&127:68|1), (Int32(-97)&127..=Int32(-65)&127:(Int64(UInt8(225))|1)), (Int32(-115)&127..Int32(125)&127:(39|1)), (UInt64(238)&127..=UInt64(Int32(37))&127:(Int64(Int32(106))|1)));
    func func1871(namedParam1872 ! : Array<Rune>, optionalParam1873 ! : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()], namedParam1875 ! : UInt8, optionalParam1876 ! : UInt16 = UInt16(194)) : Option<Bool> { // block id: 1878
        let var1884 : (UInt32, Bool, Range<UInt32>, Float32, Bool) = (UInt32(UInt16(1)), true, (UInt32(106)&127..UInt32(232)&127:62|1), Float32(104.0), true);
        var var1960 : Array<UInt8> = Array<UInt8>(10){ i => UInt8(Int8(UInt8(UInt8(52)))) };
        var var2022 : (Range<Int32>, (Unit, Int16, Range<UInt32>, Range<Int32>, Range<Int32>, Range<UInt64>), Array<UInt8>, Range<UInt64>) = ((Int32(-23)&127..Int32(-112)&127:(-8)|1), ((), Int16(-51), (UInt32(84)&127..=UInt32(163)&127:91|1), (Int32(UInt32(139))&127..=Int32(45)&127:(Int64(Int8(77))|1)), (Int32(-20)&127..=Int32(62)&127:(-66)|1), (UInt64(UInt32(178))&127..=UInt64(39)&127:((-30)|1))), [UInt8(84), UInt8(168), UInt8(242), UInt8(236), UInt8(191), UInt8(220), UInt8(36), UInt8(36), UInt8(49), UInt8(218)], (UInt64(56)&127..UInt64(53)&127:(Int64(UInt64(UInt32(183)))|1)));
        if ((var1884 is () -> Range<Int16>)) { // block id: 1892
            var var1894 : (Range<Int32>, (Unit, Int16, Range<UInt32>, Range<Int32>, Range<Int32>, Range<UInt64>), Array<UInt8>, Range<UInt64>) = ((Int32(34)&127..Int32(47)&127:(-103)|1), ((), Int16(80), (UInt32(60)&127..UInt32(31)&127:100|1), (Int32(47)&127..Int32(59)&127:(-97)|1), (Int32(-94)&127..Int32(Int32(57))&127:(115|1)), (UInt64(68)&127..UInt64(240)&127:(29|1))), [UInt8(9), UInt8(56), UInt8(238), UInt8(225), UInt8(193), UInt8(244), UInt8(183), UInt8(103), UInt8(195), UInt8(211)], (UInt64(70)&127..UInt64(180)&127:(-36)|1));
            var1894
        } else if (var1918.var1921) { // block id: 1923
            if (var907) { Class438() } else { var1928 } ;
            let var1945 : UInt32 = UInt32(167);
            var var1953 : Int64 = 3;
            var var1998 : Range<UInt64> = (UInt64(179)&127..UInt64(213)&127:((-17)|1));
            if (var907) { ((Int32(4)&127..Int32(22)&127:((-99)|1)), (var463, var1940, (var1090&127..=var1945&127:(1|1)), (Int32(-40)&127..=Int32(48)&127:(-119)|1), (Int32(94)&127..=Int32(-36)&127:(var1953|1)), (UInt64(130)&127..UInt64(52)&127:(3|1))), var1960, (UInt64(233)&127..UInt64(238)&127:(var44|1))) } else { ((var1861&127..=var1861&127:(125|1)), ((), var1940, (UInt32(232)&127..=UInt32(193)&127:(var44|1)), (Int32(-53)&127..Int32(4)&127:57|1), (Int32(32)&127..Int32(69)&127:10|1), var1998), [namedParam1875, namedParam1875, namedParam1875, var510, UInt8(105), namedParam1875, var510, UInt8(240), UInt8(32), namedParam1875], (UInt64(170)&127..UInt64(8)&127:47|1)) } 
        } else { // block id: 2015
            var425 %= ((var1861) | 1);
            if (var907) { var2022 } else { ((Int32(81)&127..=Int32(-68)&127:(-3)|1), var2051, var1960, (UInt64(193)&127..=UInt64(149)&127:(-94)|1)) } 
        }[1];
        var var4756 : Range<Int8> = (Int8(Int8(74))&127..=Int8(UInt8(UInt8(Int8(47))))&127:(45|1));
        let var4772 : ?UInt32 = ((UInt32(166)&127..UInt32(134)&127:(-84)|1) as UInt32);
        var var4790 : (UInt32, Range<Int8>, Range<UInt16>, Option<Bool>, Int64, Range<Int32>) = (UInt32(Int16(UInt8(UInt8(123)))), (Int8(UInt8(79))&127..Int8(Int8(85))&127:((-114)|1)), (UInt16(218)&127..=UInt16(65)&127:(-123)|1), Option<Bool>.Some((((), UInt64(237), Int32(-51)) is (Option<Range<Int64>>) -> Float32)), Int64(Int64(Int8(8))), (Int32(-67)&127..=Int32(98)&127:93|1));
        ((try { // block id: 4748
            ();
            var4751;
            (UInt32(186), var4756, var1832, Option<Bool>.Some(var3744), var2496, var4751)
        } finally { // block id: 4770
            var4772;
            let var4777 : Bool = false;
            if (var4777) { (UInt32(199), var4756, var1832, var2581, (-54), (var2678&127..var2678&127:(85|1))) } else { var4790 } 
        }|>func2078) as Bool)
    }
;
    var var4845 : Option<Option<Bool>> = Option<Option<Bool>>.Some((Option<Option<Bool>>.None as Bool));
    let var4877 : ?Bool = Option<Bool>.Some((Int8(-93) is (Array<(Float32, Int32)>) -> Bool));
    let var4899 : ?Bool = (Option<Float64>.Some(Float64(Float64(Float32(-57.0)))) as Bool);
    [func1871(namedParam1872 : [var929, var929, '2', 'b', var929, var929, '2', var929, var929, var929], namedParam1875 : UInt8(44)), Option<Bool>.Some(var3744), if (true) { var2581 } else { Option<Bool>.None } , (Aggregate1914() as Bool), match (var907) {
        case _ => 
            ();
            var2581
        
    }, (var4845 ?? Option<Bool>.None), try { // block id: 4851
        if (true) { var2223 } else { [(), (), (), var463, var2709, (), var463, (), var4865, ()] } ;
        var2581
    } finally { // block id: 4869
        Option<UInt64>.Some(UInt64(64));
        ();
        Option<Bool>.None
    }, (var4845 ?? var4877), try { // block id: 4882
        ();
        var3526;
        var1798
    } catch (e: Exception) { // block id: 4886
        var463;
        var463;
        var var4891 : Bool = (Option<Range<UInt8>>.None is UInt16);
        if (var4891) { Option<Bool>.None } else { Option<Bool>.None } 
    } finally { // block id: 4896
        var4877
    }, var4899][0]
}

func func1221(namedParam1222 ! : Interface443) : Bool { // block id: 1223
    let var4907 : (Int8) -> Option<Bool> = func1230;
    ((Int8(UInt8(132))|>var4907) ?? var3744)
}

public func func1183(param1184 : UInt32, optionalParam1185 ! : Int16 = Int16(Int16(Int16(Int16(UInt16(71))))), optionalParam1191 ! : UInt16 = UInt16(Int16(-44))) : Option<Int8> { // block id: 1194
    let var1206 : Int64 = (-105);
    var var4915 : (Array<Option<Int8>>) -> Bool = func2783;
    match {
        case (var1090, var907, (UInt32(104)&127..=var1090&127:(var1206|1)), var1209, var907)[4] => 
        ();
        var907
        case _ => 
        ();
        var463;
        true
    } || func1221(namedParam1222 : Class438(func1235, namedParam3242 : var4915, namedParam3245 : Class438()));
    (((var41 as Bool) as Bool) as Int8)
}



public func func1170(param1171 : Bool) : Interface442 { // block id: 1172
    let var4972 : Int8 = Int8(-96);
    func func1174(optionalParam1175 ! : Bool = true, namedParam1177 ! : Range<Int16>, namedParam1178 ! : Int8) : Interface442 { // block id: 1179
        var loopTimeVar4936 : Int64 = 0;
        do {
            loopTimeVar4936++;

        } while ((match (func1183(UInt32(244), optionalParam1185 : Int16(-61))) {
            case _ => 
                namedParam1178 >= namedParam1178
            
            case _ => 
                ();
                true
            
        }) && loopTimeVar4936 < 100 ) ;
        let var4955 : Range<Int8> = (Int8(118)&127..=Int8(UInt8(205))&127:(Int64(UInt16(77))|1));
        var var4963 : Range<Int8> = (Int8(-43)&127..=Int8(126)&127:(-26)|1);
        let var4980 : Interface442 = Class438();
        ((match ((Int8(68)&127..=Int8(-86)&127:(-3)|1)) {
            case caseVar4943 : Option<Option<Int32>> => 
                var1861 /= ((var2678) | 1);
                (Int8(-15)&127..Int8(91)&127:55|1)
            
            case _ : Range<Int32> => 
                if (var3744) { var4955 } else { var4963 } 
            
            case _ => 
                if (var3744) { (Int8(-116)&127..var4972&127:(var2496|1)) } else { (Int8(76)&127..=Int8(54)&127:49|1) } ;
                (Int8(96)&127..Int8(90)&127:(-83)|1)
            
        } as Interface442) ?? try { // block id: 4978
            var4980
        } catch (_) { // block id: 4982
            var4984
        } finally { // block id: 4986
            Class438()
        })
    }
;
    func1174(namedParam1177 : if ((Option<Bool>.None ?? param1171)) { try { // block id: 4993
        ();
        (-115);
        (var1940&127..=Int16(73)&127:((-38)|1))
    } catch (e: Exception) { // block id: 5000
        if (var2219) { var457 } else { var457 } 
    } } else { (var1940&127..=Int16(8)&127:(var2496|1)) } , namedParam1178 : ((Option<Option<Int8>>.None ?? Option<Int8>.Some(var898)) ?? try { // block id: 5023
        var907 ||= param1171;
        if (false) { [Option<Int8>.Some(var4972), var5033, Option<Int8>.Some(var4972), Option<Int8>.None, Option<Int8>.Some(Int8(124)), var607, Option<Int8>.None, var607, var5033, var607] } else { [Option<Int8>.None, var5033, var607, Option<Int8>.None, Option<Int8>.None, Option<Int8>.Some(Int8(39)), Option<Int8>.None, var607, var5033, Option<Int8>.None] } ;
        var898
    } catch (_) { // block id: 5058
        let var5062 : Int8 = Int8(Int8(Int8(-125)));
        Int8(-72) >> ((var5062) & 7)
    } finally { // block id: 5066
        var614;
        ();
        -var4972
    }))
}

public func func1029(optionalParam1030 ! : Int64 = 89, namedParam1032 ! : Range<UInt64>) : Class438 { // block id: 1033
    var var1038 : Array<Float32> = [Float32(-116.0), Float32(-83.0), Float32(-32.0), Float32(-6.0), Float32(-11.0), Float32(90.0), Float32(-115.0), Float32(122.0), Float32(116.0), Float32(88.0)];
    let var1058 : Range<Int16> = (Int16(22)&127..Int16(UInt16(UInt8(143)))&127:(122|1));
    let var1083 : UInt8 = UInt8(Int8(7));
    var var1137 : Interface443 = Class438();
    match (match (match (var1038) {
                case _ : Array<Rune> => 
                    var var1049 : Int8 = Int8(UInt8(Int8(Int8(60))));
                    if (var907) { Option<Int8>.Some(var898) } else { Option<Int8>.Some(var1049) } 
                
                case _ : Range<UInt64> => 
                    var1058;
                    ();
                    if (true) { Option<Int8>.None } else { Option<Int8>.Some(var898) } 
                
                case _ : Range<Int16> => 
                    [var510, UInt8(122), UInt8(85), var510, var510, var510, var510, var1083, UInt8(161), UInt8(239)];
                    var1090 += var1090;
                    if (true) { var607 } else { Option<Int8>.None } 
                
                case _ : Float32 => 
                    var510 |= UInt8(164);
                    ();
                    if (var907) { Option<Int8>.None } else { Option<Int8>.Some(Int8(-44)) } 
                
                case _ => 
                    Option<Int8>.Some(var898)
                
            }) {
            case caseVar1115 : Float64 => 
                var463;
                var463;
                let var1121 : Bool = false;
                if (var1121) { var607 } else { var607 } 
            
            case _ => 
                var476;
                Option<Int8>.None
            
        }) {
        case _ => 
            var929
        
        case _ : Array<Rune> => 
            var1137;
            's'
        
        case _ => 
            var47;
            var463;
            if (var907) { 'f' } else { 'C' } 
        
        case _ : Range<Int64> => 
            if (var907) { Class438() } else { var517 } ;
            if (true) { 'X' } else { '2' } 
        
        case _ => 
            'C'
        
    };
    var var5109 : ?Unit = Option<Unit>.None;
    (match ((var2219|>func1170)) {
        case caseVar5075 => 
            Option<Option<Bool>>.None;
            if (true) { var4096 } else { Option<Array<Rune>>.Some(['D', 'w', var929, var929, 'R', 'A', var929, var929, 'M', 'J']) } ;
            let var5094 : ?Unit = Option<Unit>.Some(());
            var5094
        
        case _ : Int8 => 
            ((-77)&127..=(-108)&127:(var4688|1));
            ();
            if (false) { Option<Unit>.None } else { var5109 } 
        
        case _ => 
            if (var2219) { var5109 } else { Option<Unit>.None } 
        
        case caseVar5120 => 
            Aggregate1914();
            Option<Unit>.Some(var463)
        
        case _ => 
            var5109
        
    } ?? (var907 ||= try { // block id: 5131
        (-15);
        var463;
        var3744
    } catch (e: Exception) { // block id: 5135
        false
    }));
    var5138
}


func func1024(param1025 : (Float32, Int32)) : Array<Float32> { // block id: 1026
    var var5227 : ((Array<(Float32, Int32)>) -> Bool) -> Unit = func3120;
    func1029(namedParam1032 : (UInt64(142)&127..=UInt64(169)&127:59|1)).func5142(var5227, match ((Int16(-40)&127..Int16(-126)&127:(-8)|1)) {
        case _ => 
            UInt8(219) ^ var510;
            Class438();
            if (false) { Option<Range<Int16>>.None } else { var3894 } 
        
    });
    Option<Interface442>.None;
    let var5324 : Interface443 = Class438(func1235, namedParam3242 : func2783, namedParam3245 : Class438(namedParam3061 : (((Int32(-113)&127..=Int32(-94)&127:49|1), ((), Int16(-92), (UInt32(210)&127..UInt32(230)&127:(-46)|1), (Int32(96)&127..Int32(-99)&127:(11|1)), (Int32(0)&127..Int32(28)&127:85|1), (UInt64(169)&127..=UInt64(219)&127:(28|1))), [UInt8(104), UInt8(123), UInt8(68), UInt8(88), UInt8(38), UInt8(249), UInt8(61), UInt8(98), UInt8(171), UInt8(183)], (UInt64(67)&127..=UInt64(146)&127:((-26)|1))), ((Int16(72)&127..=Int16(48)&127:(39|1)), ###"+JO29ebjpI"###), ['f', '6', '6', 'y', 'k', 'X', 'I', '8', 'u', 'h'], (UInt32(157)&127..=UInt32(203)&127:((-61)|1)), (Option<Option<Option<Bool>>>.Some(Option<Option<Bool>>.Some(Option<Bool>.None)) is Option<Interface445>), ((), Int16(70), (UInt32(210)&127..UInt32(63)&127:(24|1)), (Int32(-128)&127..=Int32(-36)&127:(21|1)), (Int32(75)&127..Int32(-7)&127:((-34)|1)), (UInt64(162)&127..=UInt64(35)&127:((-104)|1))), ((Int16(119)&127..=Int16(110)&127:((-62)|1)), "(20`Cf=f\"t"))));
    var var5420 : Unit = ();
    let var5485 : Float32 = Float32(Float32(Float32(105.0)));
    [match (var1722) {
        case caseVar5247 : Option<(Range<Int16>, String)> => 
            var1459 ** Float32(Int32(Float32(42.0)) & 3)
        
        case _ => 
            ();
            var1209
        
        case _ : Option<Array<(Float32, Int32)>> => 
            Float32(66.0)
        
        case _ => 
            Option<Interface441>.Some(Class438());
            if (true) { (2&127..(-99)&127:(-33)|1) } else { (56&127..=(-32)&127:((-43)|1)) } ;
            Float32(-110.0)
        
    }, (Option<Float32>.None ?? if (var3744) { // block id: 5277
        Float32(113.0) * Float32(17.0)
    } else if (true) { // block id: 5282
        var2709;
        Float32(119.0)
    } else { // block id: 5285
        [Option<Int8>.None, Option<Int8>.Some(Int8(104)), var607, var607, Option<Int8>.None, Option<Int8>.None, Option<Int8>.None, Option<Int8>.Some(Int8(-100)), Option<Int8>.None, var5033];
        Float32(-81.0)
    }), var1209, if (var2219) { // block id: 5304
        var var5308 : ?Range<Int64> = ((UInt32(UInt8(196)), true, (UInt32(51)&127..UInt32(UInt16(108))&127:(Int64(UInt32(230))|1)), Float32(125.0), true) as Range<Int64>);
        if (true) { var5308 } else { Option<Range<Int64>>.None } ;
        var5324;
        var1459
    } else if (var3744) { // block id: 5402
        if (var5405) { (var2709, Int16(-43), var3399, (Int32(-108)&127..=Int32(-115)&127:(-47)|1), var911, (UInt64(112)&127..=var2397&127:(var4688|1))) } else { (var5420, var1940, (UInt32(59)&127..=UInt32(162)&127:(-29)|1), (Int32(55)&127..=Int32(-80)&127:(-118)|1), (var2678&127..=var1861&127:(var4688|1)), (var2397&127..=var2397&127:(57|1))) } ;
        if (var3744) { Option<Int8>.Some(var898) } else { Option<Int8>.None } ;
        Float32(76.0)
    } else { // block id: 5439
        var1459 / Float32((Int32(Float32(-120.0))) | 1)
    } * if (true) { // block id: 5445
        var463;
        var5191 = var898;
        Float32(-41.0)
    } else if (true) { // block id: 5452
        let var5454 : Option<Int32> = ((UInt64(80)&127..=UInt64(110)&127:(-27)|1) as Int32);
        var5454;
        Float32(-116.0)
    } else { // block id: 5458
        var2245 += Float32(-98.0);
        var907 ||= var5405;
        var1209
    }, if (if (var3744) { // block id: 5469
        var var5471 : Unit = ();
        var5471;
        false
    } else if (var5475) { // block id: 5477
        ();
        false
    } else { // block id: 5480
        false
    }) { // block id: 5482
        var5485 % Float32((Int32(var1209)) | 1)
    } else { // block id: 5490
        var2245 / Float32((Int32(Float32(-83.0))) | 1)
    }, try { // block id: 5495
        if (var907) { var929 } else { '9' } ;
        if (var5475) { Option<UInt64>.Some(var2397) } else { var5505 } ;
        var2245
    } finally { // block id: 5508
        var5510
    }, (var5515 ?? var5510) ** Float32(Int32((var5510 % Float32((Int32(Float32(-22.0))) | 1))) & 3), var2245, if ((Option<(UInt32, Range<Int8>, Range<UInt16>, Option<Bool>, Int64, Range<Int32>)>.None is Float32)) { // block id: 5525
        (var1090&127..UInt32(144)&127:(var2496|1));
        var463;
        let var5532 : Float32 = Float32(-39.0);
        var5532
    } else { // block id: 5534
        var41;
        if (false) { var2754 } else { Class438() } ;
        var1209
    }, var4033]
}

func func15(optionalParam16 ! : Rune = 'd', optionalParam18 ! : Bool = true, optionalParam20 ! : UInt64 = UInt64(UInt16(4)), namedParam23 ! : Rune) : Unit { // block id: 24
    if ((UInt32(196), var41, var44, var47, [false, false, true, true, false, false, true, false, false, true])[4][8]) { // block id: 52

    } else if ([true, false, true, false, true, false, false, false, true, true][9]) { // block id: 56
        if (optionalParam18) { // block id: 59
            (UInt64(134)&127..UInt64(130)&127:13|1);
            ();
            ()
        }
    };
    var var86 : Range<Int8> = (Int8(-63)&127..=Int8(96)&127:(Int64(UInt64(146))|1));
    func func108(optionalParam109 ! : Range<Int64> = ((-74)&127..=42&127:(Int64(Int32(Int16(Int8(-72))))|1)), optionalParam117 ! : Range<UInt32> = (UInt32(UInt8(UInt8(138)))&127..=UInt32(UInt32(UInt8(136)))&127:(5|1)), namedParam126 ! : Int64) : Array<Rune> { // block id: 127
        let var140 : UInt8 = UInt8(126);
        var var145 : Int8 = Int8(25);
        try { // block id: 129
            [UInt8(96), UInt8(119), UInt8(153), UInt8(109), UInt8(189), UInt8(19), UInt8(191), UInt8(206), UInt8(104), UInt8(169)][5]
        } finally { // block id: 134
            ();
            try { // block id: 137
                optionalParam117;
                var140
            } catch (_) { // block id: 142
                var145 & var145;
                var140
            }
        };
        let var160 : (UInt32, Range<Int64>, Int64, String, Array<Bool>) = (UInt32(83), ((-29)&127..Int64(UInt16(UInt8(203)))&127:((-73)|1)), Int64(UInt32(62)), ###"N@^)J|6Hcs"###, [false, true, (UInt64(12) is Range<Int16>), ((UInt32(201)&127..UInt32(178)&127:((-33)|1)) is Unit), true, true, ((UInt64(89)&127..UInt64(26)&127:((-118)|1)) is UInt32), ((UInt16(211)&127..UInt16(181)&127:115|1) is Array<Bool>), false, (UInt32(Int16(-42)) is Rune)]);
        var var201 : ?Int8 = Option<Int8>.Some(Int8(Int8(14)));
        try { // block id: 150
            var var153 : Int32 = Int32(UInt32(156));
            var153 &= Int32(51);
            ['F', 'H', '4', 'f', 'r', 'r', 'j', '6', 'H', 'j']
        } finally { // block id: 158
            var160;
            (var201 ?? var145);
            if (true) { var209 } else { ['j', 'g', 'E', '7', 'W', 'p', 'P', 'D', 'K', 'h'] } 
        }
    }
;
    let var224 : ?Int8 = Option<Int8>.Some(Int8(UInt8(Int8(UInt8(254)))));
    let var234 : Unit = ();
    var var318 : UInt32 = UInt32(239);
    func func955(param956 : Interface445) : Range<Int32> { // block id: 957
        (Int32(114)&127..Int32(-111)&127:94|1)
    }
;
    try { // block id: 64
        var var67 : Array<Bool> = [true, false, true, true, false, false, true, false, true, false];
        var var74 : Int8 = Int8(UInt8(UInt8(Int8(UInt8(136)))));
        match (var67) {
            case _ => 
                Int8(71) % ((var74) | 1);
                let var81 : Unit = ();
                var81;
                if (false) { var86 } else { (Int8(-73)&127..var74&127:(var44|1)) } 
            
        };
        let var251 : Bool = true;
        func func97(param98 : Range<UInt32>, namedParam99 ! : Unit, optionalParam100 ! : Int64 = (-33), optionalParam102 ! : UInt16 = UInt16(88)) : Rune { // block id: 104
            func108(optionalParam109 : match (var224) {
                case _ => 
                    var234;
                    if (true) { var41 } else { var41 } 
                
                case _ => 
                    UInt16(130);
                    var41
                
                case caseVar247 => 
                    if (var251) { (76&127..64&127:(108|1)) } else { (var44&127..85&127:(var44|1)) } 
                
                case _ => 
                    optionalParam102;
                    optionalParam100 ** (var44 & 3);
                    if (true) { var41 } else { (optionalParam100&127..=var44&127:(108|1)) } 
                
            }, namedParam126 : Int64(optionalParam100))[9]
        }
;
        var var279 : UInt32 = UInt32(131);
        var var285 : UInt16 = UInt16(UInt16(Int16(UInt8(175))));
        func97((var279&127..UInt32(58)&127:(var44|1)), namedParam99 : var234, optionalParam102 : var285)
    } catch (e: Exception) { // block id: 290
        match ([namedParam23, namedParam23, optionalParam16, 'f', 's', namedParam23, 'G', optionalParam16, '9', 'Z']) {
            case _ : Range<Int32> => 
                UInt64(187)
            
            case caseVar309 => 
                var234;
                UInt64(174)
            
            case _ => 
                var234;
                var318--;
                optionalParam20 ** (UInt64(244) & 3)
            
        };
        func func324(param325 : Option<Int8>, param326 : Range<UInt32>, optionalParam327 ! : Array<UInt8> = [UInt8(204), UInt8(113), UInt8(201), UInt8(99), UInt8(47), UInt8(39), UInt8(64), UInt8(218), UInt8(15), UInt8(58)]) : Rune { // block id: 329
            let var1015 : Int16 = Int16(35);
            var1015|>{ lambdaParameter952 : Int16 => func955(match (match ((var476&127..=UInt16(111)&127:(var44|1))) {
                    case caseVar967 : Array<Rune> => 
                        UInt16(92);
                        var907 &&= optionalParam18;
                        var341
                    
                    case _ => 
                        if (var907) { var47 } else { "ByW=o iC%." } ;
                        var341
                    
                    case _ => 
                        Int32(-18) % ((var425) | 1);
                        UInt8(189) / ((UInt8(175)) | 1);
                        var341
                    
                }) {
                case caseVar993 => 
                    if (optionalParam18) { Class438() } else { Class438() } 
                
                case (caseVar1001 : UInt64,caseVar1002 : Int32,caseVar1003 : Int32,caseVar1004 : Option<Int8>,_) => 
                    if (optionalParam18) { var775 } else { var775 } ;
                    var517
                
                case _ => 
                    Class438()
                
            }) };
            namedParam23
        }
;
        var var1019 : ?Int8 = Option<Int8>.None;
        func324(var1019, (UInt32(6)&127..=UInt32(22)&127:70|1))
    } finally { // block id: 1022
        (var2245, var2678)|>func1024;
        var463;
        if (false) { '3' } else { var929 } 
    };
    match (Option<Unit>.Some(())) {
        case _ => 
            var510--;
            var1940--;
            var2496 |= var4688
        
        case caseVar5566 => 
            var4865
        
        case caseVar5571 : Interface445 => 
            var2709;
            var463;
            var1861 <<= ((Int32(-31)) & 7)
        
        case _ => 
            var5582 = var5582;
            (var318, (var5589&127..=var4110&127:(var4688|1)), 85, """
Mt= 8
I]>~l
""", [true, false, true, true, false, true, false, false, false, false]);
            ()
        
    }
}


public func func11(param12 : Int64) : Bool { // block id: 13
    var var5604 : Rune = 'B';
    let var5635 : ?Rune = (Option<Option<Range<Int16>>>.None as Rune);
    func15(optionalParam16 : if ((var2581 ?? false)) { (if (var5405) { var5604 } else { var5582 } ) } else { if (false) { // block id: 5609
        var5582
    } else if (true) { // block id: 5612
        var476;
        UInt8(89);
        var5604
    } else { // block id: 5616
        if (false) { 'H' } else { 'W' } 
    } } , optionalParam18 : false, optionalParam20 : (UInt64(65) / ((UInt64(181)) | 1)) ^ (var5505 ?? UInt64(109)), namedParam23 : (var5635 ?? try { // block id: 5639
        (var2678&127..=Int32(-52)&127:((-109)|1));
        ();
        var929
    } catch (_) { // block id: 5646
        var var5648 : Unit = ();
        var5648;
        var var5651 : Option<Float64> = ((Option<Interface442>.Some(Class438()) as Range<Int16>) as Float64);
        var5651;
        if (false) { var5604 } else { var5604 } 
    }));
    let var5675 : Float32 = Float32(-102.0);
    var var5687 : (Unit, Int16, Range<UInt32>, Range<Int32>, Range<Int32>, Range<UInt64>) = ((), Int16(6), (UInt32(252)&127..=UInt32(Int8(UInt8(39)))&127:((-28)|1)), (Int32(Int32(-29))&127..Int32(Int8(-113))&127:(Int64(UInt64(173))|1)), (Int32(UInt16(UInt16(124)))&127..Int32(UInt16(UInt16(98)))&127:(87|1)), (UInt64(236)&127..=UInt64(Int16(UInt8(44)))&127:(94|1)));
    try (resource = Class438()) { // block id: 5661
        var463
    } catch (e: Exception) { // block id: 5663
        if (true) { Class438(func1235, optionalParam3224 : [Float32(-96.0), Float32(112.0), var1459, Float32(-40.0), Float32(106.0), var5675, var5675, var5510, var5675, Float32(93.0)], namedParam3242 : func2783, namedParam3245 : Class438(namedParam3061 : ((var911, var5687, var5719, (UInt64(40)&127..UInt64(43)&127:37|1)), ((var1940&127..=Int16(100)&127:(param12|1)), "j+1_IOv&+1"), ['s', 'n', 'd', 'T', var5582, 'q', 'i', 'p', var929, var5604], (UInt32(77)&127..=UInt32(171)&127:55|1), true, ((), Int16(100), (var1090&127..var1090&127:((-117)|1)), (Int32(35)&127..Int32(105)&127:90|1), var911, var5770), (var457, var2550)))) } else { var2754 } ;
        (var5782 ?? ());
        match (var5787) {
            case caseVar5795 => 
                var775;
                ();
                var5801--
            
            case _ => 
                var2397 &= var2397
            
            case _ : Bool => 
                var5801 %= ((var5191) | 1)
            
            case _ => 
                var4291 &= UInt32(93);
                var5405 &&= var5405
            
            case _ => 
                var2709;
                var5604 = 'G'
            
        }
    } finally { // block id: 5830

    };
    ((Option<UInt32>.None as Range<UInt32>) is (Range<UInt32>, Array<(Float32, Int32)>, Bool, Float32) -> Array<Bool>)
}

public func func6(param7 : UInt16) : UInt64 { // block id: 8
    var var5835 : (Int64) -> Bool = func11;
    var loopTimeVar5844 : Int64 = 0;
    while (((var2496 ^ var5840|>var5835)) && loopTimeVar5844 < 100 ) {
        loopTimeVar5844++;

    };
    UInt64(157)
}

main(): Int64 {
    try {
        UInt16(var1940)|>func6;
        16
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var44*var44), 64)
        crccheck.updateBuffer(UInt64(var425*var425), 64)
        crccheck.updateBuffer(UInt64(var476*var476), 64)
        crccheck.updateBuffer(UInt64(var510*var510), 64)
        crccheck.updateBuffer(UInt64(var898*var898), 64)
        crccheck.updateBuffer(UInt64(var1090*var1090), 64)
        crccheck.updateBuffer(UInt64(var1535*var1535), 64)
        crccheck.updateBuffer(UInt64(var1861*var1861), 64)
        crccheck.updateBuffer(UInt64(var1940*var1940), 64)
        crccheck.updateBuffer(UInt64(var2397*var2397), 64)
        crccheck.updateBuffer(UInt64(var2496*var2496), 64)
        crccheck.updateBuffer(UInt64(var2678*var2678), 64)
        crccheck.updateBuffer(UInt64(var4110*var4110), 64)
        crccheck.updateBuffer(UInt64(var4291*var4291), 64)
        crccheck.updateBuffer(UInt64(var4688*var4688), 64)
        crccheck.updateBuffer(UInt64(var5191*var5191), 64)
        crccheck.updateBuffer(UInt64(var5589*var5589), 64)
        crccheck.updateBuffer(UInt64(var5801*var5801), 64)
        crccheck.updateBuffer(UInt64(var5840*var5840), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Aggregate1914 {

}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_expected_catch_or_finally_in_try
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_unexpected_declaration_in_scope
// ASSERT: scan parse_expected_expr_or_decl_in
// ASSERT: scan parse_expected_left_brace
// ASSERT: scan parse_expected_double_arrow_in_case
// ASSERT: scan parse_expected_case
// ASSERT: scan parse_expected_character


