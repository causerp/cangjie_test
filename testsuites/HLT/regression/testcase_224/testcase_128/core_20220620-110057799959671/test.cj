/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output


public var var73 : Unit = ()
public var var83 : UInt32 = UInt32(98)
public var var144 : Array<(Int32, Float32)> = [(Int32(93), Float32(Float32(Float32(63.0)))), (Int32(-58), Float32(-32.0)), (Int32(Int32(UInt16(21))), Float32(97.0)), (Int32(-108), Float32(68.0)), (Int32(109), Float32(Float32(Float32(-70.0)))), (Int32(UInt16(62)), Float32(Float32(108.0))), (Int32(Int8(Int8(-64))), Float32(115.0)), (Int32(59), Float32(43.0)), (Int32(UInt32(UInt16(19))), Float32(Float32(Float32(-32.0)))), (Int32(UInt32(Int8(-21))), Float32(Float32(Float32(29.0))))]
public var var205 : Enum202 = Enum202.defaultValue
public let var238 : UInt8 = UInt8(UInt8(UInt8(Int8(35))))
var var292 : Array<Range<UInt64>> = [(UInt64(150)&127..UInt64(92)&127:53|1), (UInt64(117)&127..=UInt64(172)&127:(-69)|1), (UInt64(138)&127..=UInt64(27)&127:16|1), (UInt64(16)&127..=UInt64(130)&127:75|1), (UInt64(30)&127..UInt64(253)&127:120|1), (UInt64(213)&127..=UInt64(60)&127:(-89)|1), (UInt64(92)&127..=UInt64(103)&127:(-107)|1), (UInt64(165)&127..=UInt64(104)&127:76|1), (UInt64(116)&127..=UInt64(151)&127:(-17)|1), (UInt64(253)&127..=UInt64(154)&127:(-68)|1)]
var var353 : Bool = false
public let var358 : Int64 = 108
public let var367 : (UInt32, Range<UInt32>, Option<Bool>, Int16) = (UInt32(175), (UInt32(33)&127..UInt32(134)&127:(-83)|1), Option<Bool>.None, Int16(-126))
var var391 : Int32 = Int32(UInt8(241))
public var var417 : Float32 = Float32(116.0)
public var var428 : UInt16 = UInt16(Int8(Int8(Int8(UInt8(144)))))
public var var462 : Array<Bool> = [true, false, true, true, true, true, false, true, true, true]
public var var598 : UInt64 = UInt64(148)
public var var634 : Float64 = 107.0
public var var720 : (Float32, Unit) = (Float32(Float32(-99.0)), ())
public let var745 : Bool = false
var var764 : Aggregate105 = Aggregate105()
public var var807 : Int8 = Int8(89)
public var var887 : Range<UInt8> = (UInt8(62)&127..UInt8(Int8(UInt8(23)))&127:(Int64(14)|1))
var var926 : Class38 = Class38()
let var939 : (Range<Int8>, Int8, Int64, Range<UInt8>) = ((Int8(13)&127..=Int8(-18)&127:(119|1)), Int8(-50), 73, (UInt8(18)&127..=UInt8(24)&127:((-113)|1)))
let var1029 : (Int32, Float32) = (Int32(111), Float32(-74.0))
let var1184 : Range<Int32> = (Int32(Int32(UInt8(Int8(118))))&127..=Int32(-64)&127:((-81)|1))
public var var1207 : Array<Int16> = [Int16(14), Int16(-17), Int16(-101), Int16(82), Int16(Int16(UInt16(140))), Int16(UInt8(124)), Int16(-71), Int16(-34), Int16(Int16(Int16(-46))), Int16(Int16(-24))]
let var1468 : ?Bool = (Option<Array<Bool>>.None as Bool)
var var1483 : Class38 = Class38()
var var1496 : (Range<Int16>, (Float32, UInt32), Range<Int64>, Range<UInt16>, UInt64, Range<UInt64>) = ((Int16(25)&127..Int16(1)&127:(125|1)), (Float32(-102.0), UInt32(Int8(Int8(-111)))), (60&127..=(-85)&127:(Int64(Int16(114))|1)), (UInt16(25)&127..=UInt16(107)&127:(Int64(Int8(45))|1)), UInt64(Int32(107)), (UInt64(126)&127..=UInt64(11)&127:(41|1)))
public var var1546 : Int16 = Int16(80)
let var1557 : Int16 = Int16(11)
public var var1589 : (Float32, UInt32) = (Float32(73.0), UInt32(UInt8(191)))
public let var1629 : (Range<UInt64>, Unit) = ((UInt64(30)&127..UInt64(121)&127:4|1), ())
let var1705 : (Int32, Float32) = (Int32(UInt16(20)), Float32(116.0))
public var var1725 : ?Int64 = Option<Int64>.None
public let var1898 : Int8 = Int8(72)
public var var2003 : Range<Int16> = (Int16(-76)&127..=Int16(35)&127:(Int64(Int16(118))|1))
var var2062 : Range<Int64> = (Int64(Int64(Int32(-56)))&127..=25&127:((-122)|1))
var var2070 : ??(Range<UInt64>, Unit) = (Class38() as Option<(Range<UInt64>, Unit)>)
public var var2294 : Float32 = Float32(Float32(Float32(Float32(Float32(-102.0)))))
public let var2510 : Int16 = Int16(UInt8(UInt8(76)))
public let var2796 : Class38 = Class38()
public let var2808 : UInt8 = UInt8(UInt8(UInt8(UInt8(4))))
var var2927 : Option<Option<Option<Option<Bool>>>> = (() as Option<Option<Option<Bool>>>)
public var var2949 : UInt8 = UInt8(Int8(41))
let var2979 : ?UInt64 = (Option<(Range<Int8>, Int8, Int64, Range<UInt8>)>.None as UInt64)
public var var3001 : Int64 = Int64(UInt64(121))
public var var3013 : Unit = ()
public let var3220 : Rune = 'p'
var var3255 : Option<UInt8> = Option<UInt8>.None
public let var3296 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
var var3314 : Unit = ()
public var var3343 : ?Int32 = ((Int32(Int32(-85))&127..Int32(UInt16(Int8(-57)))&127:(Int64(Int16(-70))|1)) as Int32)
var var3358 : Option<Int64> = Option<Int64>.None

public interface Interface42 {

}

public interface Interface41 <: Interface42 {
    func func1379(param1380 : Option<Bool>) : Int16 

}

public open class Class38 <: Interface41 & Interface42 & Resource {
    public init() { // block id: 40

    }
;
    public static let var45 : (Int32, Float32) = (Int32(-120), Float32(113.0));
    static var var262 : Int64 = (-79);
    let var285 : Unit = ();
    static var var335 : Bool = false;
    private static let var386 : Float64 = (-120.0);
    public static let var476 : Range<UInt64> = (UInt64(74)&127..UInt64(87)&127:32|1);
    private static let var492 : Int64 = (-88);
    static var var498 : Int64 = 80;
    private static let var501 : Range<UInt64> = (UInt64(3)&127..=UInt64(58)&127:((-114)|1));
    public static var var521 : Aggregate105 = Aggregate105();
    public init(param315 : Float32, namedParam316 ! : Range<UInt8>, namedParam317 ! : UInt32, optionalParam318 ! : String = ###"Bv7Xz\\4ko9"###) { // block id: 320
        var var375 : (Range<Int32>) -> Option<Bool> = func328;
        var var466 : (Range<UInt8>) -> Bool = func397;
        var var479 : Range<UInt64> = (UInt64(225)&127..=UInt64(192)&127:(-49)|1);
        var var484 : UInt64 = UInt64(225);
        let var554 : Array<Aggregate105> = [Aggregate105(), Aggregate105(), Aggregate105(), Aggregate105(), Aggregate105(), Aggregate105(), Aggregate105(), Aggregate105(), Aggregate105(), Aggregate105()];
        if ((((Int32(-9)&127..=Int32(-22)&127:(7|1))|>var375) ?? match {
            case var353 => 
            var386 < var386
            case _ => 
            var391;
            var353
        })) { (if (((var238&127..=var238&127:(40|1))|>var466)) { match ([(UInt64(14)&127..UInt64(127)&127:88|1), var476, var479, (UInt64(139)&127..=var484&127:(var262|1)), var476, (UInt64(107)&127..=var484&127:(var492|1)), (UInt64(156)&127..=UInt64(232)&127:(var498|1)), var501, (UInt64(140)&127..=UInt64(47)&127:71|1), (var484&127..UInt64(143)&127:(var498|1))]) {
            case _ => 
                var335 &&= false;
                if (false) { Aggregate105() } else { var521 } 
            
            case _ : Float32 => 
                var386 < var386;
                Int32(43) * var391;
                Aggregate105()
            
            case _ : Option<Bool> => 
                Aggregate105()
            
            case caseVar539 : Interface42 => 
                if (false) { Aggregate105() } else { var521 } 
            
            case _ => 
                if (false) { var521 } else { Aggregate105() } 
            
        } } else { var554[4] } ) } else { Aggregate105() } ;
        ((UInt8(185)&127..UInt8(208)&127:(-45)|1) as Option<Bool>)
    }
;
    public let var929 : Bool = false;
    static var var1384 : UInt8 = UInt8(180);
    public var var1405 : Array<Unit> = Array<Unit>(10){ i => () };
    private static var var1460 : Int16 = Int16(-24);
    public func func1379(param1380 : Option<Bool>) : Int16 { // block id: 1381
        var1384 &= try { // block id: 1387
            UInt8(81) | var1384
        } catch (_) { // block id: 1391
            var1384
        } finally { // block id: 1393
            let var1395 : Unit = ();
            var1395;
            var1384
        };
        try { // block id: 1399
            try { // block id: 1401
                Int16(122)
            } catch (e: Exception) { // block id: 1403
                var1405;
                Int16(-69)
            }
        } finally { // block id: 1418
            if (var335) { // block id: 1421
                if (false) { [(UInt64(50)&127..=UInt64(199)&127:124|1), (UInt64(187)&127..UInt64(163)&127:97|1), (UInt64(14)&127..UInt64(209)&127:98|1), (UInt64(164)&127..=UInt64(131)&127:(-48)|1), (UInt64(53)&127..UInt64(65)&127:(-46)|1), (UInt64(62)&127..UInt64(187)&127:(-6)|1), (UInt64(201)&127..UInt64(218)&127:82|1), (UInt64(55)&127..=UInt64(67)&127:104|1), (UInt64(9)&127..UInt64(198)&127:(-52)|1), (UInt64(120)&127..=UInt64(162)&127:(-30)|1)] } else { [var476, (UInt64(248)&127..var598&127:(85|1)), (var598&127..var598&127:(13|1)), (UInt64(225)&127..=var598&127:((-125)|1)), var501, var501, (UInt64(151)&127..=var598&127:(var498|1)), (UInt64(70)&127..=UInt64(204)&127:(-85)|1), (UInt64(123)&127..=UInt64(231)&127:((-56)|1)), (var598&127..UInt64(139)&127:((-125)|1))] } ;
                var417 ** Float32(Int32(Float32(-108.0)) & 3);
                Int16(-71) * var1460
            } else { // block id: 1462
                var285;
                var1460 & var1460
            }
        }
    }
;
    public var var1486 : UInt64 = UInt64(149);
    let var2184 : Bool = true;
    static var var2418 : UInt32 = UInt32(130);
    public init(param2385 : Bool, param2386 : (Range<Int16>, Float64) -> Option<Option<Bool>>, param2390 : Option<Option<Bool>>) { // block id: 2391
        let var2435 : ?Int32 = ([(), (), (), (), (), (), (), (), (), ()] as Int32);
        var var2534 : Int16 = Int16(Int16(UInt8(72)));
        try { // block id: 2394
            Int32(-43) ** (Int32(69) & 3)
        } catch (e: Exception) { // block id: 2398
            let var2401 : Bool = false;
            if (var2401) { ((Int16(-23)&127..Int16(74)&127:103|1), var1589, ((-60)&127..57&127:125|1), (UInt16(12)&127..=UInt16(32)&127:(-6)|1), var598, (UInt64(217)&127..=UInt64(89)&127:(var358|1))) } else { ((Int16(-10)&127..Int16(107)&127:(-41)|1), (var2294, var2418), (121&127..(-69)&127:(-86)|1), (UInt16(249)&127..=UInt16(82)&127:(-115)|1), UInt64(115), (UInt64(73)&127..UInt64(74)&127:12|1)) } ;
            Int32(-78)
        } finally { // block id: 2425
            var73;
            var73;
            Int32(-110)
        } ^ (var2435 ?? match ([[var1546, Int16(-97), Int16(119), Int16(-103), var1460, Int16(0), Int16(-106), Int16(-57), Int16(-116), var1557], [Int16(-109), Int16(123), Int16(-2), Int16(76), Int16(-23), Int16(68), Int16(30), Int16(-83), Int16(112), Int16(72)], [var1546, Int16(28), var1460, var1557, Int16(-6), Int16(55), Int16(69), Int16(-93), Int16(-42), var1557], [Int16(-97), var1557, var1460, var1460, var1460, Int16(75), Int16(-23), Int16(39), Int16(-52), var1557], [Int16(83), Int16(85), Int16(116), Int16(117), Int16(99), Int16(-105), Int16(63), Int16(-18), Int16(-15), Int16(69)], [var1546, var1557, Int16(-121), Int16(-119), Int16(-21), var1460, var1546, var1460, Int16(-42), Int16(93)], var1207, [Int16(-98), Int16(105), var1546, var1546, var1557, var1557, Int16(41), var1546, var1546, var1460], [var2510, Int16(108), var1460, Int16(-118), Int16(22), var2510, var2510, Int16(34), Int16(5), var1546], [Int16(69), Int16(-50), Int16(-78), var2510, var1546, var1460, Int16(100), Int16(-96), Int16(68), var2534]]) {
            case caseVar2540 : Array<Aggregate105> => 
                ();
                Int32(-89)
            
            case caseVar2546 : Enum202 => 
                var73;
                if (param2385) { var501 } else { (UInt64(71)&127..UInt64(174)&127:((-112)|1)) } ;
                var391 >> ((var391) & 7)
            
            case _ => 
                (Int8(-59)&127..Int8(0)&127:116|1);
                if (true) { Class38() } else { Class38() } ;
                Int32(-46)
            
        });
        Class38()
    }
;
    public init(namedParam227 ! : Range<UInt32>, optionalParam228 ! : Range<Int8> = (Int8(-9)&127..Int8(-120)&127:(Int64(UInt16(232))|1)), namedParam234 ! : Bool, namedParam235 ! : Rune) { // block id: 236
        var238;
        let var3133 : Int64 = (-50);
        let var3143 : ?Int32 = Option<Int32>.None;
        UInt32(func245((Option<Range<Int8>>.None ?? (Int8(20)&127..Int8(30)&127:(-28)|1)), var807, try { // block id: 3123
            var386;
            var3013;
            (Int16(-73)&127..=var1546&127:(var3001|1))
        } catch (e: Exception) { // block id: 3130
            Option<Int64>.Some(var3133);
            (var1557&127..=var1460&127:(126|1))
        } finally { // block id: 3139
            if (var353) { var3143 } else { Option<Int32>.Some(var391) } ;
            (var1546&127..var2510&127:(var3133|1))
        }));
        let var3153 : ?Unit = ((("""
gg1cF
=)34N
""" as Int32) as (Range<UInt64>, Unit)) as Unit);
        (var3153 ?? try (resource = Class38()) { // block id: 3159
            var2808;
            var73
        } catch (_) { // block id: 3162
            ();
            ();
            ()
        })
    }

    public func isClosed(): Bool { return false }
    public func close(): Unit {}
}

public struct Aggregate105 {
    public init() { // block id: 107

    }
;
    let var112 : (Int32, Float32) = (Int32(111), Float32(-73.0));
    let var767 : Unit = ()
}

public enum Enum202 {
    defaultValue |
    enumValue717((Float32, Unit)) |
    enumValue1652((Range<Int16>, (Float32, UInt32), Range<Int64>, Range<UInt16>, UInt64, Range<UInt64>))
}



public func func328(param329 : Range<Int32>) : Option<Bool> { // block id: 330
    Class38.var335 &&= false;
    try { // block id: 339
        (Option<Option<Bool>>.None ?? Option<Bool>.Some(false))
    } finally { // block id: 348
        if (false) { // block id: 351

        } else if (var353) { // block id: 355
            var358 / ((var358) | 1);
            var73;
            ()
        };
        ();
        var367[2]
    }
}

func func397(param398 : Range<UInt8>) : Bool { // block id: 399
    let var401 : Range<UInt64> = (UInt64(Int64(UInt64((-7))))&127..=UInt64(79)&127:((-83)|1));
    var401;
    var loopTimeVar421 : Int64 = 0;
    match (do {
            loopTimeVar421++;
            var417 / Float32((Int32(Float32(-49.0))) | 1)
        } while ((var353) && loopTimeVar421 < 100 ) ) {
        case () => 
            Class38();
            var428 &= UInt16(135);
            [var353, var353, var353, var353, true, var353, true, true, var353, var353]
        
        case _ => 
            if (false) { [true, false, var353, true, var353, var353, false, var353, var353, true] } else { var462 } 
        
    }[5]
}

public func func772(param773 : (Range<Int32>) -> Option<Bool>) : Int64 { // block id: 776
    var var787 : Range<UInt32> = (UInt32(35)&127..=UInt32(6)&127:86|1);
    var var790 : ?Bool = Option<Bool>.None;
    match (if (var462[9]) { (if (true) { (var83, var787, var790, Int16(113)) } else { var367 } ) } else { var367 } ) {
        case (caseVar797 : (Float32, Unit),_ : (Int32, Float32),caseVar798 : Interface42,_) => 
            var358
        
        case caseVar803 : Int32 => 
            var807 -= Int8(-38);
            (Int16(53)&127..=Int16(42)&127:(var358|1));
            (-110) % ((69) | 1)
        
        case (_ : Array<Range<UInt64>>,caseVar819,caseVar820,caseVar821) => 
            ();
            ();
            var358 - 30
        
        case _ => 
            let var834 : Range<UInt16> = (UInt16(19)&127..UInt16(82)&127:(Int64(UInt16(Int8(Int8(-53))))|1));
            if (var745) { var834 } else { (var428&127..var428&127:(var358|1)) } ;
            var358 * var358
        
        case _ => 
            var358
        
    }
}

public func func855(param329 : Range<Int32>) : Option<Bool> { // block id: 330
    Class38.var335 &&= false;
    try { // block id: 339
        (Option<Option<Bool>>.None ?? Option<Bool>.Some(false))
    } finally { // block id: 348
        if (false) { // block id: 351

        } else if (var353) { // block id: 355
            var358 / ((var358) | 1);
            var73;
            ()
        };
        ();
        var367[2]
    }
}


public func func1057(param1058 : (Range<UInt64>, Unit)) : Unit { // block id: 1059

}


public func func1734() : Class38 { // block id: 1282
    if ((var417, UInt32(149))[1] == var367[0]) { // block id: 1294

    };
    var var1313 : ((Int32, Float32), UInt64) = ((Int32(-126), Float32(Float32(86.0))), UInt64(166));
    if ((var887|>{ lambdaParameter1299 : Range<UInt8> => try { // block id: 1302
        Class38.var335
    } catch (_) { // block id: 1306
        var745
    } })) { // block id: 1309
        var1313[0]
    } else if (if (match (var205) {
        case enumValue717(_) => 
            var353
        
        case enumValue717((caseVar1330,caseVar1331 : Int64)) => 
            63.0 ** Float64(Int32((-46.0)) & 3);
            var598;
            !var353
        
        case _ => 
            UInt64(14) > UInt64(44)
        
    }) { // block id: 1344
        var353
    } else { // block id: 1346
        var73;
        var353
    }) { // block id: 1349
        if (var353) { Class38() } else { Class38() } ;
        match (var144) {
            case caseVar1358 => 
                ();
                var var1364 : UInt32 = UInt32(82);
                var83 |= var1364
            
            case _ => 
                (UInt8(4)&127..=UInt8(163)&127:10|1);
                var391 = var391
            
        };
        (Int32(-30), var417)
    } else { // block id: 1375
        var1029
    };
    var926
}

func func1156(param1157 : Array<(Int32, Float32)>) : Int16 { // block id: 1158
    let var1163 : Array<Bool> = [false, false, false, false, false, false, false, true, true, true];
    var loopTimeVar1198 : Int64 = 0;
    while ((var1163[4]) && loopTimeVar1198 < 100 ) {
        loopTimeVar1198++;
        let var1169 : ?Int64 = (Option<Array<Bool>>.None as Int64);
        match (var1169) {
            case caseVar1174 => 
                (Int32(-101)&127..Int32(-69)&127:(-121)|1)
            
            case caseVar1179 => 
                if (var353) { var1184 } else { var1184 } 
            
            case _ => 
                var73;
                (Int32(55)&127..Int32(110)&127:119|1)
            
        }
    };
    [(UInt64(52)&127..UInt64(12)&127:(-22)|1), (UInt64(180)&127..UInt64(21)&127:(-4)|1), (UInt64(45)&127..UInt64(242)&127:40|1), (UInt64(184)&127..UInt64(38)&127:62|1), (UInt64(243)&127..UInt64(231)&127:45|1), (UInt64(60)&127..UInt64(44)&127:(-22)|1), (UInt64(137)&127..UInt64(174)&127:(-54)|1), (UInt64(86)&127..UInt64(64)&127:40|1), (UInt64(58)&127..UInt64(41)&127:(-8)|1), (UInt64(194)&127..=UInt64(0)&127:(-60)|1)];
    let var1229 : Int16 = Int16(UInt16(UInt8(UInt8(UInt8(199)))));
    let var1253 : Int16 = Int16(Int8(UInt8(UInt8(139))));
    let var1261 : Int16 = Int16(9);
    [var1207, [Int16(66), Int16(-30), Int16(45), Int16(-27), Int16(110), Int16(-51), Int16(-38), Int16(49), Int16(30), Int16(-74)], var1207, [var1229, Int16(15), Int16(-29), Int16(25), Int16(11), Int16(39), Int16(115), Int16(36), Int16(108), var1229], var1207, var1207, [Int16(92), var1229, Int16(64), var1229, var1229, var1253, Int16(-109), var1253, var1261, var1253], [Int16(12), Int16(-128), Int16(-107), var1253, Int16(-121), var1261, Int16(42), Int16(65), Int16(-105), var1253], [Int16(79), Int16(-120), Int16(27), Int16(-53), Int16(106), Int16(9), Int16(-83), Int16(114), Int16(120), Int16(92)], var1207][0][3] | (func1734().func1379(var1468))
}


func func1621(namedParam1622 ! : Range<Int16>, optionalParam1623 ! : Float64 = (-96.0)) : Option<Option<Bool>> { // block id: 1625
    ();
    var1629[1];
    let var1642 : ?Int16 = ([false, true, ([Int16(-74), Int16(-8), Int16(101), Int16(-104), Int16(68), Int16(-122), Int16(-64), Int16(-57), Int16(-56), Int16(-100)] is Rune), false, (Enum202.enumValue1652(((Int16(-122)&127..Int16(-125)&127:((-80)|1)), (Float32(-87.0), UInt32(23)), (104&127..(-19)&127:(-76)|1), (UInt16(130)&127..UInt16(171)&127:(-41)|1), UInt64(204), (UInt64(224)&127..=UInt64(184)&127:51|1))) is Array<Aggregate105>), ((UInt8(69)&127..UInt8(194)&127:((-93)|1)) is Int64), true, false, (((UInt64(156)&127..UInt64(158)&127:(37|1)), ()) is Option<Int64>), ((Int16(-34)&127..Int16(-74)&127:((-17)|1)) is Bool)] as Int16);
    let var1713 : Float32 = Float32(Float32(-14.0));
    (((var1642 ?? Int16(116)) >= ([var1029, (Int32(-59), var417), (Int32(-79), Float32(-105.0)), (Int32(115), Float32(-39.0)), var1029, var1029, (var391, Float32(67.0)), var1705, (var391, var1713), var1029]|>func1156)) as Option<Bool>)
}




public func func1902(param1903 : () -> Class38) : (Range<UInt64>, Unit) { // block id: 1905
    var var1911 : ?Unit = Option<Unit>.Some(());
    let var1928 : ((Range<UInt16>, Range<Int32>, UInt64, (Range<Int16>, (Float32, UInt32), Range<Int64>, Range<UInt16>, UInt64, Range<UInt64>), Array<Unit>, ((Int32, Float32), UInt64)), (Float32, UInt64, Bool), Float32, Array<Unit>, Bool, Range<Int32>, Array<Array<Int16>>) = (((UInt16(Int16(-29))&127..UInt16(135)&127:(Int64(Int16(-68))|1)), (Int32(126)&127..=Int32(-41)&127:(115|1)), UInt64(59), ((Int16(-87)&127..=Int16(-101)&127:59|1), (Float32(-57.0), UInt32(104)), (122&127..=(-12)&127:(55|1)), (UInt16(66)&127..=UInt16(63)&127:0|1), UInt64(43), (UInt64(50)&127..UInt64(196)&127:(0|1))), [(), (), (), (), (), (), (), (), (), ()], ((Int32(23), Float32(-15.0)), UInt64(UInt8(63)))), (Float32(15.0), UInt64(Int32(-27)), ((UInt16(251)&127..UInt16(35)&127:((-1)|1)) is UInt64)), Float32(-50.0), [(), (), (), (), (), (), (), (), (), ()], true, (Int32(112)&127..Int32(93)&127:48|1), [[Int16(-83), Int16(107), Int16(-65), Int16(-87), Int16(89), Int16(-60), Int16(94), Int16(-24), Int16(-19), Int16(41)], [Int16(26), Int16(12), Int16(-33), Int16(-53), Int16(-101), Int16(-80), Int16(19), Int16(59), Int16(33), Int16(-89)], [Int16(-41), Int16(22), Int16(76), Int16(-23), Int16(6), Int16(11), Int16(-44), Int16(69), Int16(-34), Int16(62)], [Int16(-5), Int16(-81), Int16(-45), Int16(-27), Int16(-22), Int16(109), Int16(124), Int16(-92), Int16(-123), Int16(103)], [Int16(15), Int16(124), Int16(33), Int16(-96), Int16(-109), Int16(90), Int16(68), Int16(-105), Int16(104), Int16(-1)], [Int16(117), Int16(-72), Int16(126), Int16(-15), Int16(-69), Int16(-103), Int16(78), Int16(31), Int16(88), Int16(37)], [Int16(122), Int16(109), Int16(-14), Int16(82), Int16(-77), Int16(-116), Int16(46), Int16(115), Int16(-87), Int16(-119)], [Int16(-23), Int16(-102), Int16(-119), Int16(-79), Int16(-63), Int16(22), Int16(16), Int16(88), Int16(118), Int16(38)], [Int16(14), Int16(47), Int16(2), Int16(-69), Int16(-29), Int16(-36), Int16(-80), Int16(112), Int16(-96), Int16(-18)], [Int16(71), Int16(-17), Int16(-128), Int16(115), Int16(37), Int16(92), Int16(102), Int16(-76), Int16(48), Int16(2)]]);
    var var2000 : Range<Int16> = (Int16(-10)&127..=Int16(-113)&127:(-50)|1);
    if (match (var1911) {
        case _ => 
            var73;
            if (var353) { (var428&127..=UInt16(109)&127:(var358|1)) } else { (UInt16(86)&127..UInt16(170)&127:(var358|1)) } ;
            var1928
        
    }[4]) { // block id: 1989

    } else if ((match (Class38()) {
        case _ : Range<UInt8> => 
            if (var745) { var2000 } else { var2003 } ;
            var1546 >>= ((var1546) & 7);
            (UInt8(226)&127..=UInt8(138)&127:(-109)|1)
        
        case _ => 
            if (true) { var887 } else { var887 } 
        
        case caseVar2022 => 
            (Int16(-92)&127..=Int16(-105)&127:52|1);
            if (false) { (UInt8(28)&127..=UInt8(232)&127:((-123)|1)) } else { var887 } 
        
        case _ => 
            ();
            (UInt8(64)&127..=UInt8(118)&127:1|1)
        
    }|>func397)) { // block id: 2036
        ()
    };
    var var2050 : ((Int32, Float32), UInt64) = ((Int32(UInt16(213)), Float32(124.0)), UInt64(UInt16(84)));
    ((match (var2050) {
        case _ : Range<Int16> => 
            var2062;
            var2070
        
        case caseVar2075 => 
            var73;
            ((-66)&127..var358&127:(var358|1));
            var2070
        
        case _ => 
            [false, false, true, true, false, false, false, false, true, false];
            var2070
        
    } ?? (UInt64(119) as (Range<UInt64>, Unit))) ?? if ((Option<Int16>.Some(var1557) is Int8)) { // block id: 2093
        ((UInt64(89)&127..=UInt64(97)&127:105|1), var73)
    } else { // block id: 2097
        var var2100 : Range<UInt64> = (UInt64(235)&127..UInt64(121)&127:(Int64(Int32(69))|1));
        (var2100, ())
    })
}

public func func2110() : Class38 { // block id: 1282
    if ((var417, UInt32(149))[1] == var367[0]) { // block id: 1294

    };
    var var1313 : ((Int32, Float32), UInt64) = ((Int32(-126), Float32(Float32(86.0))), UInt64(166));
    if ((var887|>{ lambdaParameter1299 : Range<UInt8> => try { // block id: 1302
        Class38.var335
    } catch (_) { // block id: 1306
        var745
    } })) { // block id: 1309
        var1313[0]
    } else if (if (match (var205) {
        case enumValue717(_) => 
            var353
        
        case enumValue717((caseVar1330,caseVar1331 : Int64)) => 
            63.0 ** Float64(Int32((-46.0)) & 3);
            var598;
            !var353
        
        case _ => 
            UInt64(14) > UInt64(44)
        
    }) { // block id: 1344
        var353
    } else { // block id: 1346
        var73;
        var353
    }) { // block id: 1349
        if (var353) { Class38() } else { Class38() } ;
        match (var144) {
            case caseVar1358 => 
                ();
                var var1364 : UInt32 = UInt32(82);
                var83 |= var1364
            
            case _ => 
                (UInt8(4)&127..=UInt8(163)&127:10|1);
                var391 = var391
            
        };
        (Int32(-30), var417)
    } else { // block id: 1375
        var1029
    };
    var926
}

func func1739<T0, T1, T2>() : (Range<UInt64>, Unit) { // block id: 1740
    var var1848 : (Range<UInt16>, Range<Int32>, UInt64, (Range<Int16>, (Float32, UInt32), Range<Int64>, Range<UInt16>, UInt64, Range<UInt64>), Array<Unit>, ((Int32, Float32), UInt64)) = ((UInt16(UInt16(1))&127..UInt16(Int16(Int16(-74)))&127:(0|1)), (Int32(-40)&127..Int32(-32)&127:36|1), UInt64(Int32(-31)), ((Int16(-18)&127..Int16(118)&127:91|1), (Float32(28.0), UInt32(UInt8(189))), ((-30)&127..=67&127:(Int64(Int32(94))|1)), (UInt16(24)&127..=UInt16(67)&127:103|1), UInt64(Int32(Int16(-44))), (UInt64(UInt64(117))&127..UInt64(7)&127:((-95)|1))), [(), (), (), (), (), (), (), (), (), ()], ((Int32(-69), Float32(-101.0)), UInt64(195)));
    let var2108 : (() -> Class38) -> (Range<UInt64>, Unit) = func1902;
    if (match {
        case func397((UInt8(2)&127..=UInt8(215)&127:(var358|1))) => 
        UInt16(48) & var428;
        var745
        case func397(var887) => 
        ();
        var417 == Float32(58.0)
        case _ => 
        [var353, var353, var745, false, var745, false, var353, var745, true, var353];
        UInt32(158) >= UInt32(96)
    }) { // block id: 1775
        func1057(var1629);
        var73;
        let var1787 : ?Unit = Option<Unit>.None;
        let var1814 : Range<Int64> = (109&127..(-21)&127:123|1);
        match (var1725) {
            case caseVar1783 : Option<Int16> => 
                var73;
                var1787;
                var1629
            
            case caseVar1792 => 
                var926;
                UInt64(95);
                var1629
            
            case _ : Unit => 
                if (false) { ((UInt64(88)&127..UInt64(147)&127:58|1), ()) } else { var1629 } 
            
            case caseVar1808 : Array<Range<UInt64>> => 
                ((Int16(-115)&127..=Int16(87)&127:6|1), var1589, var1814, (UInt16(173)&127..=UInt16(189)&127:82|1), var598, (UInt64(239)&127..UInt64(245)&127:(-1)|1));
                ((Int32(-75), Float32(-12.0)), UInt64(195));
                var1629
            
            case _ => 
                ();
                var1629
            
        }
    } else if (if (var926.var929) { // block id: 1833
        var73;
        UInt8(167) <= var238
    } else { // block id: 1838
        if (var745) { var1483 } else { var1483 } ;
        var353
    }) { // block id: 1844
        var1848[1];
        try { // block id: 1888
            var391 -= var391
        } finally { // block id: 1892
            Option<Int64>.Some((-86));
            Int8(98) >> ((var1898) & 7);
            var73
        };
        let var2112 : () -> Class38 = {  => Class38() };
        var2112|>var2108
    } else { // block id: 2117
        var73;
        try { // block id: 2120
            Class38()
        } finally { // block id: 2122
            var73;
            var1483
        };
        (Option<(Range<UInt64>, Unit)>.None ?? var1629)
    }
}


func func1734(param1735 : Option<Bool>) : (Int32, Float32) { // block id: 1736
    func1057(func1739<Option<Option<Int64>>, Rune, Range<UInt64>>());
    try { // block id: 2129
        func1057(((var598&127..=var598&127:(var358|1)), ()));
        match (var1184) {
            case _ : Range<UInt16> => 
                ();
                ();
                (Int32(-21), Float32(-29.0))
            
            case caseVar2149 : String => 
                (Int32(-93), Float32(98.0))
            
            case _ : ((Int32, Float32), UInt64) => 
                (Int32(35), Float32(89.0))
            
            case _ => 
                (Int32(-45), Float32(82.0))
            
        }
    } catch (_) { // block id: 2165
        var loopTimeVar2170 : Int64 = 0;
        do {
            loopTimeVar2170++;

        } while ((false) && loopTimeVar2170 < 100 ) ;
        Int8(-64);
        if (false) { (Int32(4), var417) } else { (var391, Float32(45.0)) } 
    };
    if ((func1734().var2184)) { ((Option<Int32>.Some(Int32(-76)) ?? Int32(-16)), var417) } else { match ((UInt64(193)&127..UInt64(72)&127:82|1)) {
        case caseVar2200 => 
            ();
            var1029
        
        case caseVar2206 => 
            var2062;
            (var1546&127..=Int16(-61)&127:(var358|1));
            (var391, Float32(33.0))
        
        case _ => 
            let var2223 : Float32 = Float32(22.0);
            if (var353) { (var391, var2223) } else { var1705 } 
        
    } } 
}

public func func1477(param1478 : Range<UInt32>) : Array<(Int32, Float32)> { // block id: 1479
    let var1534 : Range<Int64> = (51&127..=122&127:36|1);
    var var1562 : (Range<Int16>, (Float32, UInt32), Range<Int64>, Range<UInt16>, UInt64, Range<UInt64>) = ((Int16(UInt8(UInt8(104)))&127..Int16(30)&127:(101|1)), (Float32(Float32(Float32(-25.0))), UInt32(192)), (14&127..(-76)&127:(-118)|1), (UInt16(Int8(116))&127..=UInt16(UInt8(22))&127:(Int64(UInt64(239))|1)), UInt64(Int8(72)), (UInt64(151)&127..UInt64(60)&127:(-86)|1));
    var1483.var1486 >>= ((if (true) { // block id: 1492
        var var1526 : (Float32, UInt32) = (Float32(Float32(Float32(Float32(57.0)))), UInt32(24));
        if (var745) { var1496 } else { ((Int16(68)&127..=Int16(-88)&127:19|1), var1526, var1534, (UInt16(98)&127..=UInt16(61)&127:8|1), UInt64(139), (var598&127..=var598&127:(var358|1))) } 
    } else if (var745) { // block id: 1543
        [var1546, var1546, Int16(17), Int16(38), Int16(-20), Int16(-70), Int16(59), var1546, Int16(-124), var1557];
        if (var745) { var1562 } else { ((Int16(-46)&127..=Int16(43)&127:44|1), var1589, var1534, (UInt16(200)&127..=UInt16(180)&127:(-52)|1), UInt64(222), (UInt64(231)&127..=UInt64(15)&127:(-104)|1)) } 
    } else { // block id: 1598
        let var1612 : Range<UInt16> = (UInt16(110)&127..=UInt16(184)&127:((-70)|1));
        ((Int16(-114)&127..=Int16(121)&127:(var358|1)), (Float32(80.0), UInt32(125)), (100&127..=(-35)&127:(var358|1)), var1612, var598, (UInt64(35)&127..=UInt64(17)&127:16|1))
    }[4]) & 7);
    func1621(namedParam1622 : match ((Option<Option<Int64>>.Some(var1725) ?? Option<Int64>.Some((-26)))) {
        case _ => 
            (Int16(-20)&127..=Int16(25)&127:46|1)
        
    });
    var var2227 : (Option<Bool>) -> (Int32, Float32) = { lambdaParameter2230 : Option<Bool> => (Int32(-89), Float32(5.0)) };
    let var2248 : Range<UInt16> = (UInt16(114)&127..UInt16(44)&127:(-104)|1);
    let var2252 : Range<UInt64> = (UInt64(154)&127..UInt64(151)&127:(-119)|1);
    match ((try { // block id: 2236
            ();
            ((Int16(-32)&127..=Int16(110)&127:(-14)|1), (var417, var83), (var358&127..=var358&127:(var358|1)), var2248, var598, var2252);
            Option<Bool>.None
        } catch (e: Exception) { // block id: 2255
            Option<Bool>.Some(true)
        } finally { // block id: 2258
            ();
            var1468
        }|>var2227)) {
        case caseVar2263 => 
            if (var745) { var144 } else { var144 } 
        
        case _ => 
            Int16(120) >> ((Int16(-54)) & 7);
            var var2279 : Int32 = Int32(15);
            [var1029, (var2279, Float32(46.0)), var1029, (var2279, Float32(41.0)), var1029, (Int32(45), var417), var1029, (Int32(-10), var2294), (Int32(-66), Float32(101.0)), var1705]
        
        case (_,_) => 
            if (var353) { var144 } else { [var1029, var1029, var1705, (var391, var417), var1029, (Int32(115), Float32(-80.0)), var1705, var1705, var1029, var1029] } 
        
        case _ => 
            var73;
            ();
            var144
        
    }
}



func func2347(param2348 : (Range<UInt64>, Unit)) : Int64 { // block id: 2349
    var var2379 : ?Unit = Option<Unit>.Some(());
    let var2570 : (Range<Int16>, Float64) -> Option<Option<Bool>> = func1621;
    match (match (Option<Int16>.Some(var1557)) {
            case caseVar2356 : Array<Range<UInt64>> => 
                var73;
                var391++;
                [Int16(-107), Int16(95), Int16(15), Int16(119), Int16(-125), Int16(17), Int16(100), Int16(30), Int16(-93), Int16(-14)]
            
            case _ : Range<Int32> => 
                var926;
                var73;
                var1207
            
            case _ => 
                ();
                [Int16(-18), Int16(-25), Int16(100), Int16(-113), Int16(95), Int16(37), Int16(-72), Int16(29), Int16(-13), Int16(-13)]
            
        }) {
        case caseVar2374 => 
            if (var745) { var2379 } else { var2379 } ;
            Class38(var353, var2570, Option<Option<Bool>>.None)
        
        case _ => 
            (-88) ^ 10;
            var1557 <= Int16(-83);
            var1483
        
    };
    let var2643 : Bool = true;
    let var2679 : Range<Int8> = (Int8(-10)&127..Int8(UInt8(198))&127:(Int64(Int8(Int8(35)))|1));
    (try { // block id: 2588
        var391 *= Int32(123);
        var var2594 : Bool = ((Int8(126)&127..Int8(4)&127:((-103)|1)) is Option<Option<Int64>>);
        var var2607 : ?(Range<Int8>, Int8, Int64, Range<UInt8>) = Option<(Range<Int8>, Int8, Int64, Range<UInt8>)>.Some(((Int8(Int8(-81))&127..=Int8(-73)&127:((-118)|1)), Int8(86), Int64(UInt32(Int32(6))), (UInt8(Int8(2))&127..=UInt8(174)&127:(Int64(UInt16(170))|1))));
        if (var2594) { Option<(Range<Int8>, Int8, Int64, Range<UInt8>)>.Some(((Int8(84)&127..Int8(-95)&127:(-97)|1), var1898, 47, var887)) } else { var2607 } 
    } catch (_) { // block id: 2625
        Option<(Range<Int8>, Int8, Int64, Range<UInt8>)>.Some(var939)
    } finally { // block id: 2628
        Option<(Range<Int8>, Int8, Int64, Range<UInt8>)>.Some(((var1898&127..=Int8(-58)&127:(var358|1)), Int8(-24), var358, (UInt8(170)&127..=UInt8(240)&127:57|1)))
    } ?? if (if (var353) { // block id: 2641
        var2643
    } else if (true) { // block id: 2646
        (-108) >= 110
    } else { // block id: 2650
        var745
    }) { if (true) { // block id: 2654
        var1725;
        var73;
        if (false) { ((Int8(-10)&127..Int8(105)&127:(-119)|1), var807, var358, (UInt8(146)&127..=UInt8(200)&127:56|1)) } else { var939 } 
    } else if (true) { // block id: 2666
        var var2690 : Range<UInt8> = (UInt8(137)&127..=UInt8(205)&127:(28|1));
        if (var2643) { ((Int8(86)&127..Int8(30)&127:(var358|1)), Int8(-34), var358, (UInt8(70)&127..UInt8(154)&127:23|1)) } else { (var2679, var1898, (-23), var2690) } 
    } else { // block id: 2695
        var73;
        var var2699 : Bool = ([Int16(Int8(121)), Int16(104), Int16(UInt16(UInt16(60))), Int16(UInt16(Int8(-71))), Int16(Int16(Int8(58))), Int16(16), Int16(Int8(UInt8(128))), Int16(-51), Int16(-41), Int16(Int8(Int8(99)))] is Int32);
        if (var2699) { var939 } else { (var2679, var1898, var358, var887) } 
    } } else { var939 } );
    let var2745 : UInt16 = UInt16(250);
    Int64(if ((var2070 is UInt32)) { // block id: 2734
        var83 ^= UInt32(248);
        ();
        var598
    } else { // block id: 2740
        var73;
        var428 &= var2745;
        var598
    })
}





func func984(param985 : UInt32) : Range<UInt64> { // block id: 986
    ();
    let var1132 : Bool = true;
    let var2751 : ?(Range<UInt64>, Unit) = Option<(Range<UInt64>, Unit)>.None;
    func func1150(namedParam1151 ! : (Float32, Unit), namedParam1152 ! : Int8) : Range<Int16> { // block id: 1153
        var var2331 : (Range<UInt32>) -> Array<(Int32, Float32)> = func1477;
        ((((param985&127..=UInt32(68)&127:((-27)|1))|>var2331)|>{ lambdaParameter1473 : Array<(Int32, Float32)> => Int16(21) })&127..=try { // block id: 2338
            var73;
            Int16(0)
        } catch (_) { // block id: 2341
            var1557
        } finally { // block id: 2343
            ();
            var1546
        }&127:(((var2751 ?? var1629)|>func2347)|1))
    }
;
    let var2768 : Option<(Int32, Float32)> = Option<(Int32, Float32)>.None;
    let var2773 : Float32 = Float32(-126.0);
    let var2787 : ???Bool = Option<Option<Option<Bool>>>.Some(Option<Option<Bool>>.None);
    func func991(namedParam992 ! : (Range<Int8>, Int8, Int64, Range<UInt8>), namedParam993 ! : Option<Int64>) : Class38 { // block id: 994
        let var1005 : String = ")1 l/A$k^d";
        let var1013 : ?Array<Bool> = (((UInt64(2)&127..=UInt64(35)&127:(86|1)), ()) as Array<Bool>);
        let var1061 : ((Range<UInt64>, Unit)) -> Unit = { lambdaParameter1064 : (Range<UInt64>, Unit) => () };
        let var1068 : (Range<UInt64>, Unit) = ((UInt64(149)&127..UInt64(65)&127:109|1), ());
        let var1122 : ?Unit = ((-36) as Unit);
        let var1135 : (Float32, UInt64, Bool) = (Float32(Float32(-48.0)), UInt64(227), true);
        func func996(param997 : Range<Int16>, param998 : (Int32, Float32), param999 : Option<Option<Bool>>) : Unit { // block id: 1000
            ();
            let var1046 : Bool = (UInt64(UInt32(UInt32(115))) is Option<Option<Bool>>);
            if ((var1005 is Range<Int32>)) { (var1013 ?? try { // block id: 1023
                (23&127..(-82)&127:(59|1));
                var1029;
                [false, false, false, false, false, true, false, true, true, false]
            } catch (e: Exception) { // block id: 1034
                [var745, true, var353, true, true, false, false, false, var745, var1046]
            }) } else { [true, true, true, false, false, false, true, false, true, true] } ;
            var loopTimeVar1083 : Range<UInt64> = (UInt64(18)&127..UInt64(65)&127:(60|1));
            var loopTimeVar1096 : Int64 = 0;
            let var1104 : Unit = ();
            var loopTimeVar1109 : Range<UInt64> = (UInt64(Int32(Int16(UInt8(1))))&127..=UInt64(Int8(55))&127:(Int64(Int8(Int8(27)))|1));
            var loopTimeVar1142 : Range<UInt64> = (UInt64(219)&127..UInt64(UInt8(34))&127:(103|1));
            [(), (var1068|>var1061), [(), (), (), (), (), (), (), (), (), ()][2], for (i in loopTimeVar1083 where var1046) {
                (Int8(30)&127..=Int8(51)&127:(var358|1));
                param999
            }, do {
                loopTimeVar1096++;
                ();
                var634 %= Float64((Int32((-37.0))) | 1)
            } while ((false) && loopTimeVar1096 < 100 ) , (Option<Unit>.None ?? var1104), for (i in loopTimeVar1109 where var1046) {

            }, (var1122 ?? ()), (), for (i in loopTimeVar1142 where var745) {
                if (var1132) { var1135 } else { var1135 } 
            }][2]
        }
;
        let var2792 : ??Bool = Option<Option<Bool>>.None;
        func996(func1150(namedParam1151 : var720, namedParam1152 : -var807), if (true) { (Int32(-58), var417) } else { (var2768 ?? (var391, var2773)) } , ((Option<Option<Option<Option<Bool>>>>.Some(var2787) ?? var2787) ?? var2792));
        ();
        var2796
    }
;
    let var2821 : ?(Range<Int8>, Int8, Int64, Range<UInt8>) = ((UInt16(79) as (Int32, Float32)) as (Range<Int8>, Int8, Int64, Range<UInt8>));
    var var2845 : (Range<Int16>, (Float32, UInt32), Range<Int64>, Range<UInt16>, UInt64, Range<UInt64>) = ((Int16(-61)&127..=Int16(9)&127:(-51)|1), (Float32(34.0), UInt32(UInt32(Int16(-16)))), ((-2)&127..59&127:(-65)|1), (UInt16(Int8(20))&127..=UInt16(71)&127:(Int64(UInt16(Int16(50)))|1)), UInt64(Int16(Int8(13))), (UInt64(UInt32(148))&127..=UInt64(179)&127:(Int64(UInt32(34))|1)));
    var loopTimeVar2875 : Int64 = 0;
    do {
        loopTimeVar2875++;
        if (false) { // block id: 2819
            var2821;
            ()
        } else if (true) { // block id: 2827
            var353 &&= var1132
        };
        if (true) { // block id: 2833
            if (var745) { var1496 } else { var1496 } 
        } else if (true) { // block id: 2839
            var73;
            if (var353) { var1496 } else { var2845 } 
        } else { // block id: 2870
            var2003;
            ();
            var1496
        }
    } while ((func991(namedParam992 : ((Int8(-2)&127..Int8(-121)&127:((-47)|1)), var1898, var358, (var238&127..=var2808&127:(var358|1))), namedParam993 : Option<Int64>.None).var929) && loopTimeVar2875 < 100 ) ;
    let var2885 : ?UInt64 = (((Int16(UInt16(75))&127..Int16(-75)&127:(Int64(UInt64(104))|1)), (Float32(-81.0), UInt32(Int8(-10))), ((-17)&127..=(-126)&127:(-16)|1), (UInt16(20)&127..UInt16(139)&127:87|1), UInt64(224), (UInt64(168)&127..UInt64(232)&127:(-1)|1)) as UInt64);
    let var2915 : ?UInt64 = Option<UInt64>.None;
    ((try { // block id: 2883
        var2885
    } catch (e: Exception) { // block id: 2902
        var var2905 : Int64 = (-111);
        var2905 /= ((10) | 1);
        var var2912 : Bool = false;
        Option<Option<Option<Bool>>>.Some(Option<Option<Bool>>.Some(Option<Bool>.Some(var2912)));
        var2915
    } ?? (var2885 ?? UInt64(52)))&127..=match ((var1705, var598)) {
        case _ => 
            var2927;
            var598
        
    }&127:(62|1))
}

public func func920(param921 : (Int32, Float32)) : Range<UInt64> { // block id: 922
    if ((var926.var929)) { func855((Int32(-27)&127..=Int32(122)&127:(-28)|1)) } else { try { // block id: 934
        var var936 : Int16 = Int16(12);
        var936;
        var939;
        let var952 : ?Bool = ((Int32(71)&127..=Int32(1)&127:78|1) as Bool);
        var952
    } catch (_) { // block id: 955
        ();
        var73;
        Option<Bool>.Some(true)
    } finally { // block id: 960
        ();
        ();
        if (var353) { Option<Bool>.Some(false) } else { Option<Bool>.None } 
    } } ;
    let var972 : (Float32, UInt64, Bool) = (Float32(-92.0), UInt64(Int8(Int8(67))), true);
    let var2933 : (UInt32) -> Range<UInt64> = func984;
    if (var972[2]) { var292[5] } else { (if (var353) { // block id: 2937
        -var83
    } else { // block id: 2940
        UInt32(82)
    }|>var2933) } 
}

public func func915(param916 : Option<Int64>) : Range<UInt64> { // block id: 917
    var205;
    let var2943 : ((Int32, Float32)) -> Range<UInt64> = func920;
    let var2956 : ??Bool = Option<Option<Bool>>.Some(Option<Bool>.None);
    try { // block id: 2946
        var2949 *= UInt8(42);
        var1705
    } catch (e: Exception) { // block id: 2954
        var2956;
        (Int32(34), var2294)
    }|>var2943
}

public func func277(namedParam278 ! : Int64) : Range<UInt64> { // block id: 279
    var var282 : Class38 = Class38();
    var282.var285;
    var var298 : Aggregate105 = Aggregate105();
    var var589 : Range<UInt64> = (UInt64(44)&127..=UInt64(136)&127:90|1);
    let var645 : (Int32, Float32) = (Int32(Int16(22)), Float32(Float32(-33.0)));
    let var662 : Enum202 = Enum202.defaultValue;
    var var695 : Int64 = Int64(UInt16(242));
    var var713 : Int16 = Int16(-53);
    let var861 : (Range<Int8>, Int8, Int64, Range<UInt8>) = ((Int8(-35)&127..Int8(-121)&127:(-100)|1), Int8(UInt8(112)), (-32), (UInt8(35)&127..UInt8(30)&127:(-90)|1));
    let var2963 : (Option<Int64>) -> Range<UInt64> = func915;
    func func753(optionalParam754 ! : UInt32 = UInt32(UInt8(UInt8(Int8(-68)))), namedParam759 ! : Array<Range<UInt64>>, namedParam760 ! : String) : Range<UInt64> { // block id: 761
        var764.var767;
        let var853 : ((Range<Int32>) -> Option<Bool>) -> Int64 = func772;
        var loopTimeVar909 : Range<UInt64> = (UInt64(139)&127..=UInt64(242)&127:(17|1));
        for (i in loopTimeVar909 where (func855|>var853) == var861[2]) {
            try { // block id: 871
                if (var353) { (UInt64(19)&127..=UInt64(40)&127:21|1) } else { (UInt64(226)&127..=UInt64(128)&127:(var358|1)) } ;
                Int32(-11);
                var var882 : Range<Int8> = (Int8(59)&127..=Int8(65)&127:6|1);
                (var882, var807, 43, var887)
            } finally { // block id: 895
                [Aggregate105(), Aggregate105(), var764, Aggregate105(), var764, var764, var764, Aggregate105(), var764, Aggregate105()];
                ();
                var861
            }
        };
        (try { // block id: 2967
            98;
            ();
            Option<UInt64>.None
        } catch (_) { // block id: 2971
            ();
            let var2974 : ?UInt64 = Option<UInt64>.None;
            var2974
        } finally { // block id: 2976
            var662;
            var2979
        } as Int64)|>var2963
    }
;
    var var2984 : String = """
wd>nf
E*~P.
""";
    [var292[6], (UInt64(220)&127..=UInt64(205)&127:43|1), match (var298) {
        case caseVar302 : UInt64 => 
            (UInt64(206)&127..caseVar302&127:(6|1))
        
        case _ => 
            var var577 : String = """
Nh>v0
7@-Q'
""";
            if (true) { Class38() } else { Class38(var417, namedParam316 : (UInt8(81)&127..=var238&127:((-37)|1)), namedParam317 : var83, optionalParam318 : var577) } ;
            let var582 : Range<UInt64> = (UInt64(35)&127..=UInt64(185)&127:75|1);
            if (true) { var582 } else { (UInt64(111)&127..=UInt64(119)&127:(-100)|1) } 
        
    }, (var589, ())[0], if (var353) { var589 } else { (var598&127..=UInt64(115)&127:(var358|1)) } , if (var353) { (UInt64(160)&127..=var598&127:(namedParam278|1)) } else { var589 } , match ((Int32(116)&127..var391&127:(namedParam278|1))) {
        case caseVar616 : Float64 => 
            (var598&127..=UInt64(101)&127:((-112)|1))
        
        case _ => 
            var83 |= UInt32(9);
            (UInt64(24)&127..=UInt64(72)&127:83|1)
        
        case _ => 
            var634 ** Float64(Int32((-7.0)) & 3);
            var73;
            (var598&127..=UInt64(187)&127:((-120)|1))
        
        case _ => 
            var645;
            if (var353) { Option<Option<Bool>>.None } else { Option<Option<Bool>>.None } ;
            (UInt64(171)&127..=UInt64(208)&127:50|1)
        
    }, match (var73) {
        case () => 
            var662;
            var73;
            (var598&127..UInt64(36)&127:(80|1))
        
        case () | () | () | () => 
            var73;
            if (false) { (UInt64(222)&127..var598&127:(namedParam278|1)) } else { var589 } 
        
        case _ => 
            (UInt64(239)&127..=UInt64(129)&127:126|1)
        
        case () | () | () => 
            if (false) { var645 } else { (var391, var417) } ;
            var695 |= (-23);
            if (var353) { (var598&127..=var598&127:(70|1)) } else { var589 } 
        
        case _ => 
            (UInt64(185)&127..=UInt64(116)&127:(-57)|1)
        
    }, try { // block id: 710
        var713 | Int16(-65);
        Enum202.enumValue717(var720);
        if (false) { (var598&127..var598&127:(var358|1)) } else { var589 } 
    } catch (_) { // block id: 732
        Int8(61);
        [(UInt64(25)&127..UInt64(207)&127:16|1), (UInt64(77)&127..=UInt64(161)&127:(-98)|1), (UInt64(234)&127..=UInt64(232)&127:(-85)|1), (UInt64(64)&127..UInt64(31)&127:50|1), (UInt64(55)&127..UInt64(161)&127:59|1), (UInt64(98)&127..UInt64(71)&127:(-117)|1), (UInt64(222)&127..UInt64(156)&127:22|1), (UInt64(101)&127..=UInt64(228)&127:48|1), (UInt64(60)&127..=UInt64(234)&127:(-62)|1), (UInt64(207)&127..=UInt64(27)&127:6|1)];
        if (false) { (UInt64(119)&127..UInt64(81)&127:(88|1)) } else { (UInt64(225)&127..UInt64(32)&127:25|1) } 
    } finally { // block id: 742
        if (var745) { (var598&127..UInt64(80)&127:((-121)|1)) } else { var589 } 
    }, func753(namedParam759 : var292, namedParam760 : var2984)][1]
}


func func245(param246 : Range<Int8>, param247 : Int8, param248 : Range<Int16>) : Int32 { // block id: 249
    func func274() : Int64 { // block id: 275
        func277(namedParam278 : (-1));
        (-95)
    }
;
    var loopTimeVar2993 : Int64 = 0;
    do {
        loopTimeVar2993++;
        func func254(param255 : Range<UInt8>, namedParam256 ! : Int16) : Range<Int64> { // block id: 257
            let var270 : ?Int64 = (Aggregate105() as Int64);
            Class38.var262 += (var270 ?? func274());
            var2062
        }
;
        func254((UInt8(175)&127..UInt8(100)&127:(-47)|1), namedParam256 : var1557)
    } while ((false) && loopTimeVar2993 < 100 ) ;
    var var3030 : ?Unit = (Option<Array<Bool>>.Some([true, (Option<Int16>.None is UInt32), ((51&127..=31&127:(-103)|1) is (Float32, UInt64, Bool)), (false is (Int64) -> Range<UInt64>), (UInt32(184) is (Range<Int8>, Int8, Int64, Range<UInt8>)), false, false, false, false, (Option<Array<Bool>>.None is Int32)]) as Unit);
    var loopTimeVar3069 : Int64 = 0;
    do {
        loopTimeVar3069++;
        (var3030 ?? var3013);
        var loopTimeVar3057 : Range<UInt64> = (UInt64(UInt16(Int8(Int8(65))))&127..UInt64(Int8(65))&127:(Int64(Int32(UInt32(34)))|1));
        for (i in loopTimeVar3057 where var353) {
            (Float32(43.0), var598, true)
        }
    } while ((if (if (true) { // block id: 2998
        var3001++;
        UInt8(240) <= UInt8(121)
    } else { // block id: 3007
        var73;
        var353
    }) { // block id: 3010
        ();
        var3013;
        true
    } else { // block id: 3016
        var353 ||= true;
        var353 || var353
    }) && loopTimeVar3069 < 100 ) ;
    var var3104 : Int32 = Int32(UInt8(5));
    match (try { // block id: 3072
            [(UInt64(246)&127..=UInt64(105)&127:95|1), (UInt64(217)&127..=UInt64(158)&127:(-110)|1), (UInt64(218)&127..UInt64(86)&127:49|1), (UInt64(148)&127..=UInt64(174)&127:(-122)|1), (UInt64(90)&127..=UInt64(233)&127:75|1), (UInt64(178)&127..=UInt64(136)&127:93|1), (UInt64(86)&127..UInt64(72)&127:(-45)|1), (UInt64(62)&127..UInt64(56)&127:(-57)|1), (UInt64(129)&127..=UInt64(232)&127:(-94)|1), (UInt64(168)&127..=UInt64(123)&127:106|1)];
            if (var353) { var3030 } else { Option<Unit>.None } 
        } finally { // block id: 3078
            var428 % ((UInt16(45)) | 1);
            var391 %= ((Int32(24)) | 1);
            Option<Unit>.None
        }) {
        case _ => 
            (Int32(112)&127..=Int32(-72)&127:35|1);
            [var1705, (var391, var2294), (var391, var2294), var1029, (var391, Float32(-21.0)), var1705, (var3104, var2294), var1029, var1029, (Int32(-119), var2294)];
            var391
        
    }
}


public func func197(param198 : Rune) : Bool { // block id: 199
    var var212 : Float64 = (-48.0);
    var var224 : Interface41 = Class38(namedParam227 : (UInt32(Int16(UInt8(189)))&127..UInt32(UInt8(76))&127:(62|1)), namedParam234 : ((Int32(77)&127..=Int32(UInt32(172))&127:(Int64(UInt64(198))|1)) is (Option<Int64>) -> Range<UInt64>), namedParam235 : 'n');
    (match (var205) {
        case defaultValue => 
            var212 /= Float64((Int32(61.0)) | 1);
            if (false) { Class38() } else { Class38() } 
        
        case defaultValue => 
            var73;
            var224
        
        case enumValue717(caseVar3183) => 
            var224
        
        case defaultValue => 
            if (true) { var224 } else { Class38(namedParam227 : (UInt32(66)&127..UInt32(175)&127:12|1), namedParam234 : var353, namedParam235 : param198) } 
        
        case _ => 
            if (var745) { (var428&127..UInt16(43)&127:(var358|1)) } else { (var428&127..UInt16(227)&127:((-53)|1)) } ;
            Class38(namedParam227 : (UInt32(157)&127..=UInt32(226)&127:116|1), optionalParam228 : (var1898&127..=var807&127:(98|1)), namedParam234 : true, namedParam235 : param198)
        
    } is Array<Array<Int16>>)
}

public func func28(namedParam29 ! : UInt8, namedParam30 ! : Float64, optionalParam31 ! : UInt8 = UInt8(244), namedParam33 ! : UInt64) : Unit { // block id: 34
    Class38.var45[0];
    var var55 : (Float32, Unit) = (Float32(104.0), ());
    let var62 : String = ###"#>iBm IoZ#"###;
    var var93 : UInt64 = UInt64(85);
    var var129 : UInt8 = UInt8(55);
    try { // block id: 51
        var55[1];
        match (var62) {
            case _ => 
                var var69 : Int16 = Int16(-62);
                var69 = Int16(20);
                var73;
                ()
            
            case caseVar78 : UInt32 => 
                var73;
                var83++
            
            case """
<a{&E3
+ ^O*
""" | """
_uk6B
$]5v<
""" | """
/q_Xe
Z)[9[
""" => 
                var var90 : UInt64 = UInt64(154);
                var90 = var93;
                ();
                ()
            
            case """
?9<2^
Pf(dL
""" | "B,:R$r$;b*" => 
                var73
            
            case _ => 
                ()
            
        };
        let var109 : Aggregate105 = Aggregate105();
        var109.var112
    } catch (e: Exception) { // block id: 116
        var73;
        if (true) { // block id: 120
            ();
            if (false) { """
K]f#P
7^Fn!
""" } else { var62 } 
        } else { // block id: 126
            var129 |= optionalParam31;
            var62
        };
        var144[8]
    };
    let var3217 : (Rune) -> Bool = func197;
    var loopTimeVar3227 : Int64 = 0;
    do {
        loopTimeVar3227++;
        (var1029, UInt64(120))
    } while (((var3220|>var3217)) && loopTimeVar3227 < 100 ) 
}


public func func17(param18 : UInt8, param19 : UInt32, optionalParam20 ! : Int8 = Int8(UInt8(UInt8(Int8(Int8(40)))))) : Unit { // block id: 26
    func28(namedParam29 : param18, namedParam30 : try { // block id: 3231
        var417 = var2294;
        (-26.0) ** Float64(Int32(85.0) & 3)
    } catch (_) { // block id: 3238
        var3013;
        ();
        var634
    } finally { // block id: 3242
        var634 - (-59.0)
    } + ((-89.0) - var634), optionalParam31 : (var3255 ?? UInt8(26)), namedParam33 : match {
        case true => 
        Int16(-57) & Int16(87);
        var var3266 : Int8 = Int8(61);
        var3266 /= ((var1898) | 1);
        UInt64(18)
        case _ => 
        ();
        var598
    })
}

public func func12(param13 : Rune) : Option<Int64> { // block id: 14
    ();
    func17(match {
        case try { // block id: 3275
        true
    } catch (_) { // block id: 3277
        ();
        UInt16(243) > var428
    } => 
        ();
        var238
        case (-61.0) == var634 => 
        [false, true, false, true, false, false, false, false, true, false];
        UInt8(124) % ((var2949) | 1)
        case _ => 
        Option<Int64>.None;
        var3296;
        UInt8(85) ^ UInt8(96)
    }, match (((UInt32(61)&127..UInt32(69)&127:(-58)|1) as UInt64)) {
        case _ => 
            var83 + UInt32(150)
        
        case _ : Range<Int8> => 
            var3314;
            [(), (), (), (), (), (), (), (), (), ()];
            UInt32(2) << ((var83) & 7)
        
        case _ : Option<Option<Option<Option<Bool>>>> => 
            var83--;
            UInt32(138)
        
        case _ => 
            var83
        
    }, optionalParam20 : Int8(if (var745) { // block id: 3332
        ();
        var2949 ** (UInt8(90) & 3)
    } else { // block id: 3337
        var238
    }));
    try { // block id: 3340
        match (var3343) {
            case _ => 
                if (true) { var3358 } else { var3358 } 
            
        }
    } finally { // block id: 3361
        (var887 as Int64)
    }
}

main(): Int64 {
    try {
        (('Q'|>func12) ?? if (var745) { // block id: 3368
            var634 = (-77.0);
            (-18)
        } else if (var745) { // block id: 3374
            var1546 <<= ((Int16(90)) & 7);
            Option<Bool>.Some(false);
            var3001 + 9
        } else { // block id: 3383
            var358
        })
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_unexpected_declaration_in_scope
// ASSERT: scan parse_expected_left_brace
// ASSERT: scan parse_expected_case


