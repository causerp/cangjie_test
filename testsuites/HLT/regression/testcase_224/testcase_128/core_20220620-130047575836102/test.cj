/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output


public var var22 : Bool = (UInt32(Int32(-64)) is Float32)
public var var29 : UInt64 = UInt64(193)
public let var52 : ?Bool = Option<Bool>.None
public var var87 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
public var var95 : Class91 = Class91()
public var var115 : Rune = 'e'
public let var120 : String = """
Z<d^$
XgRI1
"""
public let var131 : UInt16 = UInt16(243)
public let var162 : Unit = ()
let var173 : Int32 = Int32(UInt8(Int8(-27)))
public var var191 : Interface137<Option<Unit>> = Class134()
public var var232 : ?Int64 = Option<Int64>.None
public var var235 : Interface141 = Class134()
public var var265 : Int32 = Int32(113)
public var var304 : Interface140 = Class134()
public let var320 : ?Unit = Option<Unit>.None
public let var360 : Unit = ()
public let var366 : (Unit, Range<UInt32>, UInt8, Rune, Rune) = ((), (UInt32(185)&127..UInt32(60)&127:(-3)|1), UInt8(UInt8(UInt8(Int8(60)))), 'Q', 'b')
public let var417 : Array<Option<Unit>> = [(([[true, false, false, false, false, false, false, false, false, false], [false, false, true, false, false, false, true, true, false, false], [true, true, true, true, false, true, true, false, true, false], [false, false, true, false, false, false, false, true, true, false], [true, true, true, true, true, false, true, true, false, false], [false, true, true, true, false, false, true, true, true, true], [false, true, false, true, false, true, false, true, true, false], [true, false, true, false, true, false, true, false, false, false], [false, false, true, false, true, true, false, false, true, true], [false, false, true, true, false, false, false, true, true, false]] as Unit) as Unit), Option<Unit>.None, ("""
]$Yzw
DBOE.
""" as Unit), Option<Unit>.None, (((), (UInt32(137)&127..=UInt32(44)&127:((-84)|1)), UInt8(28), 'f', 'g') as Unit), Option<Unit>.None, ((Int8(-62)&127..=Int8(UInt8(102))&127:((-106)|1)) as Unit), ([([(), (), (), (), (), (), (), (), (), ()] is Interface140), false, ((UInt64(10)&127..=UInt64(114)&127:(-112)|1) is (String) -> Bool), (UInt8(6) is Int8), ('K' is Rune), ((UInt64(4)&127..UInt64(31)&127:(81|1)) is Interface141), ([Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None] is Rune), ("q\"0D9sVJH@" is Range<UInt64>), ((UInt32(113)&127..UInt32(118)&127:67|1) is Range<Int32>), ((UInt8(166)&127..=UInt8(144)&127:94|1) is (String) -> Bool)] as Unit), Option<Unit>.None, Option<Unit>.None]
public let var500 : Unit = ()
public var var503 : Array<Bool> = [false, true, true, true, false, false, true, false, false, true]
public let var524 : Int16 = Int16(-72)
public let var537 : Bool = (UInt32(UInt32(Int16(123))) is Range<Int8>)
public let var570 : Bool = (Option<Unit>.None is Array<Bool>)
public var var575 : Int64 = Int64(UInt64((-18)))
public var var599 : Int32 = Int32(UInt16(UInt8(Int8(-65))))
public let var639 : Interface138 = Class134()
public let var791 : Class134 = Class134()
public let var830 : ?(String, (Unit, Range<UInt32>, UInt8, Rune, Rune), Float64, Float64, Range<UInt16>, Float64, Int32) = ((UInt16(29), [false, false, true, false, false, false, true, true, true, true], (UInt8(26)&127..=UInt8(UInt8(111))&127:(Int64(UInt32(116))|1)), ((UInt64(28)&127..UInt64(151)&127:(-56)|1) is Array<Option<Unit>>), (UInt8(102)&127..=UInt8(Int8(54))&127:(37|1))) as (String, (Unit, Range<UInt32>, UInt8, Rune, Rune), Float64, Float64, Range<UInt16>, Float64, Int32))
public let var863 : Float64 = Float64(118.0)
public var var958 : Float64 = Float64(Float64(Float64(Float64(49.0))))
public let var975 : (Unit, Range<UInt32>, UInt8, Rune, Rune) = ((), (UInt32(109)&127..=UInt32(204)&127:23|1), UInt8(Int8(Int8(44))), 'i', 'p')
public var var1037 : UInt8 = UInt8(UInt8(87))
public let var1061 : (UInt8, Int32, (Range<UInt16>, Range<Int16>, Range<UInt16>, Int64, Int16), Option<Int16>) = (UInt8(214), Int32(UInt16(UInt8(175))), ((UInt16(154)&127..UInt16(227)&127:(Int64(Int32(74))|1)), (Int16(45)&127..=Int16(81)&127:((-78)|1)), (UInt16(23)&127..=UInt16(131)&127:(-120)|1), (-118), Int16(UInt8(Int8(78)))), Option<Int16>.None)
public var var1128 : Range<UInt16> = (UInt16(212)&127..=UInt16(66)&127:(-11)|1)
public var var1133 : ?Int16 = (("BMC`iwj${var120}(;${var120}<", ((), (UInt32(160)&127..=UInt32(49)&127:62|1), UInt8(45), 'G', 'L'), Float64((-93.0)), Float64(Float32(Float32(-111.0))), (UInt16(157)&127..=UInt16(226)&127:(Int64(Int8(-47))|1)), Float64(Float64(Float32(-13.0))), Int32(UInt8(Int8(54)))) as Int16)
public let var1161 : Array<Array<Bool>> = [[false, true, false, false, true, true, false, false, true, true], [false, true, true, true, true, false, true, false, true, true], [true, true, false, true, false, true, false, false, true, true], [false, true, false, false, false, false, false, false, true, true], [true, true, false, false, true, false, false, true, true, false], [true, true, true, false, true, true, true, false, false, false], [false, true, false, true, true, true, true, false, false, true], [false, false, false, true, true, false, false, false, false, true], [true, false, false, true, true, true, false, true, false, false], [true, false, false, false, true, true, false, true, true, true]]
public var var1172 : Int16 = Int16(UInt8(233))
public let var1179 : (Unit, Range<UInt32>, UInt8, Rune, Rune) = ((), (UInt32(Int16(Int16(-111)))&127..=UInt32(Int16(Int8(105)))&127:((-121)|1)), UInt8(Int8(UInt8(UInt8(105)))), 'k', '1')
public var var1216 : UInt16 = UInt16(180)
let var1243 : Array<UInt16> = [UInt16(11), UInt16(168), UInt16(186), UInt16(133), UInt16(228), UInt16(175), UInt16(179), UInt16(137), UInt16(253), UInt16(98)]
public let var1278 : Float32 = Float32(-92.0)
public let var1309 : Unit = ()
public let var1385 : Class134 = Class134()
public let var1509 : Array<Bool> = [true, false, true, false, false, true, false, true, false, false]
public let var1542 : Bool = false
public let var1554 : (Range<UInt32>, Range<UInt32>, Int64, (UInt16, Array<Bool>, Range<UInt8>, Bool, Range<UInt8>), Bool, Array<Unit>) = ((UInt32(105)&127..UInt32(154)&127:29|1), (UInt32(128)&127..UInt32(241)&127:(-44)|1), (-128), (UInt16(Int16(62)), [true, false, true, true, true, true, true, false, false, false], (UInt8(72)&127..UInt8(218)&127:((-83)|1)), (UInt8(19) is Array<UInt16>), (UInt8(242)&127..UInt8(Int8(82))&127:((-87)|1))), true, [(), (), (), (), (), (), (), (), (), ()])
public let var1590 : Float64 = (-18.0)
public let var1604 : Int16 = Int16(Int16(90))
public let var1614 : (Int16, UInt64, Int16, Unit, UInt16, Range<Int64>, Int8, Float64) = (Int16(-122), UInt64(136), Int16(Int8(UInt8(71))), (), UInt16(UInt8(106)), (Int64(UInt8(Int8(-24)))&127..=Int64(Int32(71))&127:(13|1)), Int8(87), 85.0)
public var var1673 : Range<Int64> = ((-93)&127..=40&127:(Int64(Int64(Int32(-15)))|1))
public let var1745 : Int8 = Int8(76)
var var1768 : ?Range<UInt64> = ((Int32(106)&127..Int32(UInt16(UInt8(201)))&127:(Int64(Int64(UInt8(33)))|1)) as Range<UInt64>)
public let var1825 : Float32 = Float32(58.0)
public var var1876 : Rune = 'F'
public let var1908 : UInt8 = UInt8(147)
var var1949 : UInt16 = UInt16(39)
let var1960 : UInt8 = UInt8(27)
public let var2004 : UInt32 = UInt32(Int16(Int16(Int16(102))))
public let var2016 : Int8 = Int8(44)
var var2031 : UInt8 = UInt8(60)
public var var2118 : UInt64 = UInt64(99)
public var var2149 : String = ###"7k?;|brVl4"###
public var var2160 : UInt8 = UInt8(Int8(Int8(-91)))
public let var2178 : (UInt16, Array<Bool>, Range<UInt8>, Bool, Range<UInt8>) = (UInt16(248), [(() is (UInt16, Array<Bool>, Range<UInt8>, Bool, Range<UInt8>)), (UInt16(89) is Option<Int64>), ([true, true, false, true, true, false, true, false, false, true] is Interface137<Option<Unit>>), false, (((UInt32(66)&127..=UInt32(107)&127:(14|1)) as Array<Array<Bool>>) is Array<Int16>), true, true, true, (UInt32(Int16(52)) is Option<Int64>), false], (UInt8(58)&127..UInt8(147)&127:11|1), false, (UInt8(4)&127..=UInt8(199)&127:(-52)|1))
public var var2385 : UInt32 = UInt32(179)
public let var2390 : Int16 = Int16(Int8(44))
public var var2427 : UInt32 = UInt32(0)
public let var2579 : Range<UInt32> = (UInt32(41)&127..=UInt32(14)&127:(-74)|1)
public var var2584 : Int8 = Int8(49)
public let var2621 : Option<UInt8> = Option<UInt8>.None
public var var2637 : Range<Int8> = (Int8(UInt8(UInt8(119)))&127..Int8(UInt8(250))&127:((-27)|1))
public var var2730 : (String, (Unit, Range<UInt32>, UInt8, Rune, Rune), Float64, Float64, Range<UInt16>, Float64, Int32) = ("_oW@K$XX$h", ((), (UInt32(213)&127..UInt32(UInt8(193))&127:((-67)|1)), UInt8(Int8(Int8(70))), 'a', 'E'), (-59.0), Float64(Float32(-127.0)), (UInt16(155)&127..=UInt16(157)&127:(-31)|1), (-86.0), Int32(97))
public let var2765 : Range<UInt8> = (UInt8(45)&127..=UInt8(72)&127:24|1)
public let var2889 : Array<Int16> = [Int16(Int16(Int16(78))), Int16(13), Int16(UInt8(33)), Int16(UInt8(27)), Int16(Int8(UInt8(Int8(12)))), Int16(UInt8(59)), Int16(UInt8(224)), Int16(Int8(Int8(-40))), Int16(-79), Int16(-6)]
var var3004 : Option<UInt32> = (false as UInt32)
public var var3020 : Enum675 = Enum675.defaultValue
public var var3027 : UInt32 = UInt32(16)
public let var3031 : ?Array<Bool> = Option<Array<Bool>>.None
public let var3058 : ?Rune = Option<Rune>.None
public var var3089 : Int32 = Int32(-49)
public var var3092 : (Range<UInt16>, Range<Int16>, Range<UInt16>, Int64, Int16) = ((UInt16(UInt16(85))&127..UInt16(Int8(-59))&127:(Int64(UInt32(Int8(-73)))|1)), (Int16(77)&127..Int16(104)&127:(-63)|1), (UInt16(88)&127..=UInt16(146)&127:123|1), (-24), Int16(Int16(-72)))
public var var3136 : Bool = false
public var var3227 : UInt8 = UInt8(110)
public var var3323 : Int64 = 75
public let var3410 : Range<Int8> = (Int8(-79)&127..=Int8(-34)&127:((-37)|1))
public let var3491 : Interface138 = Class134()
public var var3522 : Array<Array<Bool>> = Array<Array<Bool>>(10){ i => [false, true, ((UInt32(149)&127..=UInt32(161)&127:(-98)|1) is Range<Int16>), true, (Option<Range<UInt64>>.None is Option<Int64>), false, true, true, (([UInt16(10), UInt16(222), UInt16(113), UInt16(199), UInt16(140), UInt16(106), UInt16(80), UInt16(206), UInt16(127), UInt16(228)] as Unit) is Option<(UInt8, Int32, (Range<UInt16>, Range<Int16>, Range<UInt16>, Int64, Int16), Option<Int16>)>), true] }
var var3822 : Range<UInt32> = (UInt32(186)&127..=UInt32(94)&127:(-97)|1)
let var3986 : ?Range<Int8> = (() as Range<Int8>)
public let var4091 : Bool = true
public let var4098 : Range<Int16> = (Int16(UInt16(137))&127..=Int16(UInt8(UInt8(Int8(96))))&127:(Int64(UInt32(96))|1))
var var4117 : Range<UInt16> = (UInt16(41)&127..UInt16(150)&127:62|1)
public var var4241 : Bool = (Class134() is Interface138)
public var var4266 : Bool = false
var var4300 : ?(Range<UInt16>, Range<Int16>, Range<UInt16>, Int64, Int16) = Option<(Range<UInt16>, Range<Int16>, Range<UInt16>, Int64, Int16)>.None
public var var4361 : Unit = ()
public let var4364 : ?Int8 = Option<Int8>.None
var var4401 : Array<Float32> = [Float32(-17.0), Float32(-77.0), Float32(-38.0), Float32(125.0), Float32(83.0), Float32(7.0), Float32(-80.0), Float32(-85.0), Float32(75.0), Float32(-97.0)]
public var var4510 : Int16 = Int16(-46)
var var4590 : ??Bool = (UInt8(106) as Option<Bool>)
public let var4594 : Option<(Bool, Bool, Float32)> = Option<(Bool, Bool, Float32)>.None
public let var4603 : (UInt16, Array<Bool>, Range<UInt8>, Bool, Range<UInt8>) = (UInt16(204), [(Option<Unit>.None is Option<Int64>), false, (UInt8(12) is Array<Class134>), (Option<(Bool, Bool, Float32)>.None is Option<(Bool, Bool, Float32)>), (UInt64(230) is Enum675), false, true, true, false, ([UInt16(240), UInt16(122), UInt16(160), UInt16(224), UInt16(128), UInt16(194), UInt16(11), UInt16(226), UInt16(153), UInt16(223)] is () -> Option<Class134>)], (UInt8(Int8(36))&127..=UInt8(196)&127:(113|1)), false, (UInt8(240)&127..=UInt8(Int8(UInt8(16)))&127:(50|1)))
public var var4672 : Float32 = Float32(-3.0)
public let var4694 : Interface141 = Class134()
public var var4727 : ?Range<Int16> = (Class134() as Range<Int16>)
var var4737 : Int64 = (-40)
public var var4799 : ?Float32 = (Class134() as Float32)
public let var4832 : (Range<UInt16>, Range<Int16>, Range<UInt16>, Int64, Int16) = ((UInt16(90)&127..UInt16(189)&127:(-12)|1), (Int16(-5)&127..=Int16(-128)&127:119|1), (UInt16(170)&127..UInt16(52)&127:(-19)|1), Int64(UInt16(62)), Int16(63))
public var var4894 : Bool = (21 is (((Bool, Bool, Float32)) -> Int16) -> Rune)
public let var4930 : Range<Int64> = (Int64(Int16(UInt16(72)))&127..=80&127:(Int64(Int64(Int32(-127)))|1))
let var5024 : Bool = (Option<Array<Bool>>.None is Option<Int64>)
let var5058 : Bool = (UInt16(228) is Array<UInt16>)
public let var5088 : Option<UInt16> = Option<UInt16>.None
public var var5100 : ??(Range<UInt16>, Range<Int16>, Range<UInt16>, Int64, Int16) = (((UInt64(92)&127..UInt64(239)&127:(-39)|1) as Range<Int8>) as Option<(Range<UInt16>, Range<Int16>, Range<UInt16>, Int64, Int16)>)
public var var5116 : UInt16 = UInt16(51)


public open class Class91 <: Resource {
    public init() { // block id: 93

    }
;
    var var98 : Unit = ();
    public static let var112 : Rune = 'R';
    public let var794 : UInt16 = UInt16(181);
    public var var1088 : Int16 = Int16(40);
    public var var1431 : Bool = true;
    public static let var3234 : ?Unit = Option<Unit>.None;
    public static var var3277 : Int8 = Int8(-43)
    public func isClosed(): Bool { return false }
    public func close(): Unit {}
}

public func func67(namedParam68 ! : Rune, optionalParam69 ! : Rune = 'T', optionalParam71 ! : Float64 = Float64(Float32(-79.0)), namedParam74 ! : Bool) : Bool { // block id: 75
    var87[4];
    var95.var98;
    let var105 : Array<Array<Bool>> = [[true, true, true, true, false, true, true, false, false, true], [true, true, true, false, true, false, true, true, false, true], [false, true, false, false, false, true, false, false, true, false], [false, false, true, true, false, false, true, false, false, true], [true, false, true, true, true, false, false, true, false, true], [true, false, true, true, false, false, true, true, false, false], [true, false, true, true, true, true, false, true, true, true], [true, false, true, false, true, false, false, true, true, false], [false, false, true, true, true, true, false, true, true, true], [false, false, true, false, true, true, false, true, false, true]];
    var105[0][1]
}

public func func63(param64 : String) : Bool { // block id: 65
    func67(namedParam68 : Class91.var112, optionalParam69 : var115, namedParam74 : true)
}

public interface Interface137<T0> {
    func func215(param216 : Array<Array<Bool>>, namedParam217 ! : Range<UInt8>) : Bool { // block id: 218
        var var257 : Int16 = Int16(12);
        var var260 : Int16 = Int16(116);
        match ((try { // block id: 222
                let var226 : Interface141 = Class134();
                if (var22) { var226 } else { Class134() } 
            } catch (_) { // block id: 229
                var162;
                var232;
                var235
            } as Bool)) {
            case caseVar239 : Option<Bool> => 
                var var243 : Int32 = Int32(4);
                var243 **= (var243 & 3)
            
            case _ => 
                var120;
                var162
            
            case caseVar253 => 
                var257 <<= ((var260) & 7);
                var162;
                var265 -= var265
            
            case caseVar270 : String => 
                ()
            
            case _ => 
                var var276 : Unit = ();
                var276;
                ();
                var22 &&= var22
            
        };
        var var323 : Unit = ();
        try { // block id: 283
            let var310 : Float32 = Float32(Float32(-128.0));
            let var316 : Interface140 = Class134();
            match (Class134()) {
                case caseVar288 : Interface140 => 
                    caseVar288
                
                case _ => 
                    let var296 : Float32 = Float32(-22.0);
                    var296 ** Float32(Int32(var296) & 3);
                    Class134()
                
                case _ => 
                    var304
                
                case _ => 
                    var310 / Float32((Int32(var310)) | 1);
                    ();
                    var316
                
            };
            (var320 ?? var323);
            let var328 : (Array<Unit>, Range<Int16>, Int16, Interface138, Array<Bool>) = ([(), (), (), (), (), (), (), (), (), ()], (Int16(64)&127..Int16(UInt16(UInt16(250)))&127:((-127)|1)), Int16(Int8(Int8(UInt8(48)))), Class134(), [false, false, false, true, true, false, false, true, false, true]);
            var328[3]
        } catch (e: Exception) { // block id: 354
            if (true) { // block id: 357
                var162;
                var360;
                var323
            };
            var366[0];
            let var380 : (Range<Int8>, Array<Unit>, Range<Int8>, (Unit, Range<UInt32>, UInt8, Rune, Rune), Interface138, Range<Int8>, Int16, UInt8) = ((Int8(35)&127..=Int8(-52)&127:46|1), [(), (), (), (), (), (), (), (), (), ()], (Int8(85)&127..Int8(50)&127:85|1), ((), (UInt32(46)&127..=UInt32(UInt16(213))&127:(13|1)), UInt8(203), 'x', 'H'), Class134(), (Int8(-19)&127..=Int8(78)&127:80|1), Int16(UInt16(Int8(Int8(-103)))), UInt8(153));
            var380[4]
        } finally { // block id: 413
            var417[1];
            if (false) { Class134() } else { Class134() } 
        };
        var var4996 : ?Bool = ((Option<Unit>.Some(()) as Option<(String, (Unit, Range<UInt32>, UInt8, Rune, Rune), Float64, Float64, Range<UInt16>, Float64, Int32)>) as Bool);
        if ((var366|>func488)[3]) { // block id: 4883
            match (var2178) {
                case caseVar4888 : (Unit, Range<UInt32>, UInt8, Rune, Rune) => 
                    var3227 %= ((UInt8(169)) | 1);
                    var4894
                
                case (_ : UInt32,caseVar4899,caseVar4900,_,_) => 
                    UInt32(8);
                    var var4919 : Int16 = Int16(Int8(Int8(Int8(UInt8(100)))));
                    if (var1542) { (var260, UInt64(20), var524, (), UInt16(141), ((-15)&127..=117&127:(var575|1)), var2584, (-18.0)) } else { (var4919, var29, var4510, var500, var131, var4930, var2584, 112.0) } ;
                    var4091
                
                case caseVar4944 : Range<UInt8> => 
                    var3136
                
                case _ => 
                    let var4953 : (Range<Int8>, Array<Unit>, Range<Int8>, (Unit, Range<UInt32>, UInt8, Rune, Rune), Interface138, Range<Int8>, Int16, UInt8) = ((Int8(93)&127..Int8(57)&127:(29|1)), [(), (), (), (), (), (), (), (), (), ()], (Int8(-51)&127..Int8(-60)&127:(-54)|1), ((), (UInt32(131)&127..UInt32(238)&127:97|1), UInt8(104), 's', 'h'), Class134(namedParam2254 : (UInt32(66)&127..=UInt32(164)&127:(Int64(UInt16(186))|1)), optionalParam2255 : Int16(100)), (Int8(-69)&127..Int8(77)&127:(-17)|1), Int16(UInt8(139)), UInt8(219));
                    if (false) { var4953 } else { (var3410, [(), (), (), (), (), (), (), (), (), ()], (var2016&127..var2584&127:(var3323|1)), var975, Class134(namedParam2254 : (UInt32(94)&127..=var2004&127:((-39)|1)), optionalParam2255 : Int16(67)), var3410, Int16(-36), var1908) } ;
                    var4996;
                    var3136
                
                case _ => 
                    var3227 %= ((var2160) | 1);
                    var22
                
            }
        } else { // block id: 5008
            UInt8(123) <= var2160
        }
    }

}

public interface Interface140 {

}

public interface Interface141 <: Interface140 {

}

public interface Interface139 <: Interface140 & Interface141 {

}

public interface Interface138 <: Interface139 {

}

public open class Class134 <: Class91 & Interface137<Option<Unit>> & Interface138 {
    public init() { // block id: 136

    }
;
    public static var var144 : Unit = ();
    public static let var874 : (String, (Unit, Range<UInt32>, UInt8, Rune, Rune), Float64, Float64, Range<UInt16>, Float64, Int32) = (" #g&50Ehj@", ((), (UInt32(247)&127..UInt32(253)&127:(-124)|1), UInt8(224), 'q', 'B'), (-91.0), (-126.0), (UInt16(35)&127..UInt16(21)&127:21|1), 88.0, Int32(-58));
    public static let var1287 : Bool = true;
    private static var var2281 : Unit = ();
    public static var var2298 : Int64 = (-90);
    public static let var2301 : Range<UInt8> = (UInt8(150)&127..UInt8(88)&127:(-105)|1);
    public init(param2406 : (Bool, Bool, Float32), optionalParam2407 ! : Option<Range<Int8>> = Option<Range<Int8>>.None) { // block id: 2409
        UInt64(UInt64(Int16(UInt8(251))));
        var var3176 : (Array<Unit>) -> UInt16 = func2416;
        var var3208 : ?Array<Array<Bool>> = (Option<UInt32>.Some(UInt32(UInt8(Int8(-47)))) as Array<Array<Bool>>);
        match ((try { // block id: 3179
                ();
                [(), (), (), (), (), (), (), (), (), ()]
            } finally { // block id: 3182
                var3136 ||= true;
                [(), (), (), (), (), (), (), (), (), ()]
            }|>var3176)) {
            case 217 | 164 | 200 | 203 => 
                ();
                ()
            
            case 0 => 
                var500
            
            case caseVar3198 => 
                ();
                ();
                ()
            
            case caseVar3205 : Option<(UInt8, Int32, (Range<UInt16>, Range<Int16>, Range<UInt16>, Int64, Int16), Option<Int16>)> => 
                var3208;
                var265 = Int32(-17)
            
            case _ => 
                var144;
                ()
            
        };
        match ((UInt8(152) >> ((var2160) & 7)&127..=var3227&127:(var575|1))) {
            case _ => 
                var500;
                var3234;
                var var3238 : Int32 = Int32(Int8(-89));
                var3238 /= ((Int32(-63)) | 1)
            
        }
    }
;
    public init(namedParam2254 ! : Range<UInt32>, optionalParam2255 ! : Int16 = Int16(Int8(-36))) { // block id: 2258
        if (if (var1287) { // block id: 2264
            false
        } else if (true) { // block id: 2267
            var1542
        } else { // block id: 2269
            UInt32(231);
            true
        }) { // block id: 2272
            var524 << ((var1172) & 7);
            [(), var1309, (), var2281, (), (), (), var144, var162, var500];
            ()
        } else if (try { // block id: 2291
            if (var570) { (UInt8(4)&127..UInt8(53)&127:(var2298|1)) } else { var2301 } ;
            (Int32(63)&127..Int32(85)&127:((-46)|1));
            var22
        } catch (e: Exception) { // block id: 2308
            var22
        }) { // block id: 2310
            109 * (-127);
            ()
        }|>func17;
        Int64(try { // block id: 3271
            Int8(-119)
        } catch (_) { // block id: 3273
            var2016 ^ var3277
        })|>func2316
    }

}


public func func17(param18 : Unit) : Unit { // block id: 19
    if (var22) { // block id: 26
        var29 << ((UInt64(226)) & 7);
        param18;
        var var35 : Int32 = Int32(UInt32(Int8(18)));
        var35 += var35
    } else if ((try { // block id: 46
        if (false) { Option<Bool>.Some(var22) } else { var52 } 
    } catch (_) { // block id: 54
        param18;
        ();
        if (false) { Option<Bool>.Some(var22) } else { var52 } 
    } ?? (var120|>func63))) { // block id: 122
        param18
    };
    var var154 : ?Int64 = (Class134() as Int64);
    var var184 : Int32 = Int32(3);
    try { // block id: 125
        var var128 : UInt16 = UInt16(231);
        var128 -= var131;
        Class134.var144
    } finally { // block id: 146
        var loopTimeVar151 : Int64 = 0;
        do {
            loopTimeVar151++;

        } while ((var22) && loopTimeVar151 < 100 ) ;
        var var169 : UInt32 = UInt32(UInt8(131));
        match (var154) {
            case caseVar159 : Range<Int16> => 
                var162
            
            case _ => 
                var169++;
                var173;
                var162
            
            case caseVar180 => 
                var184 &= Int32(-99)
            
            case _ => 
                [true, false, true, true, true, true, true, true, false, true];
                var191;
                ()
            
        };
        (Option<Unit>.Some(var162) ?? var162)
    }
}

public enum Enum675 {
    defaultValue |
    enumValue1225(Range<UInt8>, UInt16) |
    enumValue2512(Array<Class134>, UInt8)
}

public func func661(param662 : Int32, optionalParam663 ! : Range<Int8> = (Int8(UInt8(66))&127..=Int8(Int8(Int8(Int8(65))))&127:((-104)|1)), namedParam672 ! : Option<Bool>) : (String, (Unit, Range<UInt32>, UInt8, Rune, Rune), Float64, Float64, Range<UInt16>, Float64, Int32) { // block id: 673
    var var703 : (Enum675, Int32) = (Enum675.defaultValue, Int32(-16));
    var var726 : Bool = (Int8(-18) is (Rune, Rune, Float64, Bool) -> Bool);
    var var745 : Range<UInt32> = (UInt32(156)&127..UInt32(Int32(Int16(-82)))&127:(Int64(Int8(78))|1));
    var var771 : Int64 = 59;
    match (match ((Int32(7)&127..=Int32(125)&127:47|1)) {
            case _ : Array<Unit> => 
                (Enum675.defaultValue, var173)
            
            case caseVar689 => 
                ();
                (Enum675.defaultValue, var173)
            
            case caseVar697 : Option<Int64> => 
                ();
                if (var22) { var703 } else { (Enum675.defaultValue, Int32(-109)) } 
            
            case _ : (String, (Unit, Range<UInt32>, UInt8, Rune, Rune), Float64, Float64, Range<UInt16>, Float64, Int32) => 
                Option<Bool>.Some(var537);
                if (var537) { var503 } else { [var22, true, true, var570, var570, false, var726, true, true, false] } ;
                var703
            
            case _ => 
                ();
                ();
                var703
            
        }[0]) {
        case defaultValue => 
            if (true) { var745 } else { (UInt32(232)&127..UInt32(26)&127:89|1) } ;
            ();
            var22 &&= false
        
        case defaultValue => 
            UInt32(248);
            UInt32(182) + UInt32(51);
            var162
        
        case _ => 
            var771 -= 40;
            ()
        
        case _ => 
            var265 **= (var173 & 3);
            var162
        
    };
    let var786 : Array<UInt16> = [UInt16(109), UInt16(193), UInt16(12), UInt16(248), UInt16(226), UInt16(250), UInt16(0), UInt16(83), UInt16(216), UInt16(103)];
    let var801 : (String, (Unit, Range<UInt32>, UInt8, Rune, Rune), Float64, Float64, Range<UInt16>, Float64, Int32) = ("""
sU*G1
#?5e;
""", ((), (UInt32(UInt16(139))&127..=UInt32(34)&127:((-71)|1)), UInt8(139), 'Q', '8'), 125.0, Float64(Float64(Float64(83.0))), (UInt16(211)&127..UInt16(199)&127:(-40)|1), Float64(Float32(Float32(-101.0))), Int32(124));
    var var900 : UInt32 = UInt32(220);
    let var912 : Range<UInt16> = (UInt16(234)&127..UInt16(27)&127:95|1);
    let var921 : ?Int64 = (Option<Unit>.Some(()) as Int64);
    let var932 : UInt8 = UInt8(208);
    if ((var786[0] == (var791.var794))) { (if ((var524 != Int16(50))) { var801 } else { (var830 ?? (var120, (var162, (UInt32(113)&127..UInt32(133)&127:(-54)|1), UInt8(53), 'B', '3'), (-50.0), (-85.0), (var131&127..UInt16(23)&127:(79|1)), var863, var173)) } ) } else { (if ((true || var537)) { (Class134.var874) } else { match (optionalParam663) {
        case caseVar892 => 
            var var907 : Rune = '5';
            ("""
AMQl2
Xp>&a{
""", ((), (var900&127..=UInt32(63)&127:(var575|1)), UInt8(76), var115, var907), var863, var863, var912, var863, var265)
        
        case caseVar918 => 
            var921;
            var162;
            (var120, ((), (UInt32(122)&127..UInt32(14)&127:(-49)|1), var932, var115, var115), 9.0, (-93.0), (UInt16(114)&127..=UInt16(251)&127:112|1), 63.0, var265)
        
        case caseVar943 => 
            let var948 : (Unit, Range<UInt32>, UInt8, Rune, Rune) = ((), (UInt32(123)&127..UInt32(47)&127:36|1), UInt8(UInt8(174)), 'G', 'T');
            (var120, var948, 91.0, var958, (UInt16(112)&127..=UInt16(211)&127:65|1), var958, Int32(20))
        
        case _ : Option<Bool> => 
            if (false) { ("a{CK'@)]z#'", var975, var958, (-88.0), (UInt16(205)&127..UInt16(145)&127:(-77)|1), var958, var173) } else { var801 } 
        
        case _ => 
            let var997 : Range<UInt32> = (UInt32(Int32(62))&127..=UInt32(UInt32(UInt16(205)))&127:(Int64(Int64(Int16(26)))|1));
            ("""
?KC|%
!N;Iq
""", (var162, var997, var932, var115, 'm'), var863, (-117.0), var912, var863, var173)
        
    } } ) } 
}


public func func1019(param1020 : (Enum675, Int32)) : Range<Int16> { // block id: 1021
    var loopTimeVar1050 : Int64 = 0;
    while ((match (Option<Bool>.Some(false)) {
        case _ : Class134 => 
            var162;
            true
        
        case _ : Float32 => 
            (-76);
            var1037++;
            Int8(-107) < Int8(-107)
        
        case _ => 
            ();
            var162;
            var570
        
    }) && loopTimeVar1050 < 100 ) {
        loopTimeVar1050++;

    };
    '3';
    let var1105 : Float32 = Float32(-64.0);
    ((var1061[3] ?? var524)&127..=var791.var1088&127:(if (true) { // block id: 1092
        (var162, (UInt32(178)&127..=UInt32(252)&127:89|1), UInt8(249), var115, var115);
        87 ** (var575 & 3)
    } else if (var22) { // block id: 1103
        var1105;
        (-91)
    } else { // block id: 1108
        let var1120 : Range<Int16> = (Int16(-68)&127..Int16(UInt16(UInt16(213)))&127:((-73)|1));
        if (true) { (UInt8(59), var265, ((UInt16(179)&127..=UInt16(184)&127:((-7)|1)), var1120, var1128, var575, Int16(39)), var1133) } else { var1061 } ;
        var1161;
        54
    }|1))
}


public func func1268(param1269 : Interface137<Option<Unit>>) : Class134 { // block id: 1270
    var var1317 : Bool = ([(((85&127..=34&127:((-107)|1)) as (String, (Unit, Range<UInt32>, UInt8, Rune, Rune), Float64, Float64, Range<UInt16>, Float64, Int32)) as Unit), (("02C0`z:#G$", ((), (UInt32(202)&127..=UInt32(171)&127:(-72)|1), UInt8(162), 'i', 'a'), 120.0, (-127.0), (UInt16(110)&127..UInt16(7)&127:(-38)|1), 25.0, Int32(-104)) as Unit), (Class134() as Unit), Option<Unit>.None, Option<Unit>.Some(()), (false as Unit), Option<Unit>.None, Option<Unit>.None, ([false, true, false, false, true, false, false, true, true, false] as Unit), (Int8(-76) as Unit)] is Array<Bool>);
    if ((((var22, false, var1278) as Bool) ?? Int32(35) > var265)) { (if ((Class134.var1287)) { (Option<Class134>.Some(Class134()) ?? Class134()) } else { match (var1037) {
        case _ => 
            [var162, var360, (), (), var360, var500, var1309, var360, (), var500];
            var162;
            if (var1317) { var791 } else { Class134() } 
        
    } } ) } else { Class134() } 
}

public func func1261(param1262 : (Bool, Bool, Float32)) : Int16 { // block id: 1263
    var var1367 : (Interface137<Option<Unit>>) -> Class134 = { lambdaParameter1370 : Interface137<Option<Unit>> => Class134() };
    match (if (var537) { (var191|>var1367) } else { [Class134(), var791, Class134(), var791, Class134(), Class134(), Class134(), var1385, Class134(), Class134()][8] } ) {
        case _ => 
            Int16(34)
        
    }
}

public func func1394(param1395 : Interface141) : Int16 { // block id: 1396
    var var1403 : Float32 = Float32(100.0);
    var var1439 : Range<Int64> = (117&127..Int64(Int16(UInt16(66)))&127:(59|1));
    if (try { // block id: 1400
        var1403 = var1278;
        true
    } catch (_) { // block id: 1407
        true
    } finally { // block id: 1409
        var var1412 : Int8 = Int8(74);
        let var1415 : Int8 = Int8(15);
        var1412 -= var1415;
        ();
        var1037 < UInt8(233)
    }) { // block id: 1421
        var1172++;
        var22 &&= var570;
        Int16(-86)
    } else if (var1385.var1431) { // block id: 1433
        var360;
        var1133;
        Int16(-28)
    } else { // block id: 1437
        var1439;
        var var1447 : Int16 = Int16(-85);
        var1447
    } ^ [Int16(105), Int16(56), Int16(18), Int16(3), Int16(82), Int16(-5), Int16(-50), Int16(-78), Int16(119), Int16(-96)][0]
}





public func func1736(param1737 : (Range<Int8>, Array<Unit>, Range<Int8>, (Unit, Range<UInt32>, UInt8, Rune, Rune), Interface138, Range<Int8>, Int16, UInt8)) : Range<Int16> { // block id: 1738
    Int8((try { // block id: 1742
        var1309;
        var1745
    } catch (_) { // block id: 1747
        var1309;
        var1745 * Int8(18)
    } & var1745));
    let var1781 : Range<UInt64> = (UInt64(3)&127..=UInt64(8)&127:(-49)|1);
    var var1794 : UInt64 = UInt64(UInt16(Int8(Int8(UInt8(82)))));
    var var1820 : Float32 = Float32(Float32(Float32(44.0)));
    var var1831 : UInt16 = UInt16(232);
    match ((try { // block id: 1760
            var var1763 : UInt64 = UInt64(74);
            var1763 *= UInt64(203);
            var1309;
            var1768
        } catch (_) { // block id: 1778
            Option<Range<UInt64>>.Some(var1781)
        } ?? try { // block id: 1784
            (UInt64(86)&127..=UInt64(251)&127:(-96)|1)
        } catch (e: Exception) { // block id: 1786
            var1781;
            var var1789 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
            var1789;
            (UInt64(96)&127..=var1794&127:(31|1))
        })) {
        case _ => 
            var1309;
            var1309
        
        case caseVar1808 : Int32 => 
            if (var1542) { var95 } else { Class91() } ;
            if (var1542) { Class134() } else { Class134() } ;
            var1820 %= Float32((Int32(var1825)) | 1)
        
        case _ => 
            var1831 += var1831
        
    };
    try { // block id: 1835
        var var1844 : Unit = ();
        if (var1542) { // block id: 1838
            let var1840 : Array<Array<Bool>> = [[true, true, false, true, true, true, false, false, true, true], [false, false, true, true, false, true, false, true, true, true], [true, false, false, false, true, true, true, false, false, true], [false, true, true, true, true, true, true, false, false, false], [false, true, false, false, true, true, true, true, true, false], [false, true, true, true, false, false, false, false, true, false], [true, true, false, false, true, false, true, false, false, false], [true, false, true, true, true, false, false, false, true, false], [true, false, false, false, true, false, false, true, true, true], [true, true, false, false, true, false, true, false, true, true]];
            var1840;
            Class134();
            var1844
        };
        (Int16(-118)&127..=Int16(-14)&127:112|1)
    } catch (_) { // block id: 1847
        var var1849 : Range<Int16> = (Int16(-18)&127..=Int16(-6)&127:(-104)|1);
        var1849
    } finally { // block id: 1851
        var var1854 : UInt8 = UInt8(102);
        UInt8(var1854);
        var var1866 : Range<Int16> = (Int16(109)&127..Int16(85)&127:13|1);
        let var1872 : Range<UInt32> = (UInt32(101)&127..=UInt32(117)&127:(-44)|1);
        try { // block id: 1857
            if (var1542) { (UInt64(14)&127..UInt64(96)&127:((-51)|1)) } else { var1781 } ;
            var1866
        } finally { // block id: 1868
            (var1309, var1872, var1854, var1876, 'R');
            (Int16(-85)&127..Int16(-92)&127:120|1)
        }
    }
}








public func func2435(param2436 : (UInt16, Array<Bool>, Range<UInt8>, Bool, Range<UInt8>)) : Option<UInt32> { // block id: 2437
    let var2587 : ?Bool = (UInt32(Int32(125)) as Bool);
    let var2783 : Option<Class134> = (((UInt32(Int8(93))&127..=UInt32(UInt8(9))&127:((-66)|1)), (UInt32(248)&127..UInt32(22)&127:101|1), Int64(UInt64(4)), (UInt16(UInt8(84)), [true, false, false, false, false, false, false, true, true, true], (UInt8(198)&127..UInt8(70)&127:(26|1)), (Option<(String, (Unit, Range<UInt32>, UInt8, Rune, Rune), Float64, Float64, Range<UInt16>, Float64, Int32)>.Some(("Ds08a{}e<kf", ((), (UInt32(163)&127..UInt32(104)&127:48|1), UInt8(119), 'S', '6'), 37.0, (-121.0), (UInt16(121)&127..=UInt16(93)&127:((-2)|1)), 86.0, Int32(58))) is (UInt16, Array<Bool>, Range<UInt8>, Bool, Range<UInt8>)), (UInt8(54)&127..UInt8(103)&127:(-44)|1)), ((-124.0) is Option<Unit>), [(), (), (), (), (), (), (), (), (), ()]) as Class134);
    func func2569() : Option<Class134> { // block id: 2570
        if ((match (var2579) {
            case _ => 
                var2584;
                var2587
            
        } ?? var570)) { try { // block id: 2593
            var var2596 : Bool = (((UInt16(0)&127..=UInt16(2)&127:(25|1)), (Int16(-113)&127..Int16(0)&127:((-17)|1)), (UInt16(UInt16(44))&127..=UInt16(UInt16(173))&127:(Int64(UInt32(70))|1)), Int64(Int16(UInt8(149))), Int16(-16)) is Option<Int16>);
            if (var2596) { Option<UInt8>.Some(var1037) } else { var2621 } 
        } catch (_) { // block id: 2623
            var975;
            var1172 = Int16(-76);
            Option<UInt8>.Some(UInt8(203))
        } } else { try { // block id: 2631
            Option<Bool>.None;
            if (var570) { (Int8(-120)&127..=Int8(120)&127:61|1) } else { var2637 } ;
            var2621
        } catch (_) { // block id: 2646
            ();
            Option<UInt8>.None
        } } ;
        let var2658 : Array<Bool> = Array<Bool>(10){ i => true };
        try { // block id: 2650
            [[false, false, true, false, false, true, true, false, false, true], [true, true, false, false, true, true, true, true, false, false], var503, [false, false, false, true, true, false, true, true, false, false], var503, var2658, [true, false, false, true, true, false, false, true, false, true], var503, var503, [false, true, true, true, true, true, true, true, false, false]];
            if (true) { var2730 } else { (###".$3pq]0ta6"###, ((), var2579, var1037, var115, var115), var958, 20.0, (UInt16(40)&127..=UInt16(176)&127:(-108)|1), var958, Int32(-8)) } ;
            var2765
        } finally { // block id: 2767
            var loopTimeVar2772 : Int64 = 0;
            do {
                loopTimeVar2772++;

            } while ((true) && loopTimeVar2772 < 100 ) ;
            var loopTimeVar2777 : Int64 = 0;
            while ((true) && loopTimeVar2777 < 100 ) {
                loopTimeVar2777++;

            };
            (var1037&127..=var1037&127:(89|1))
        };
        var2783
    }
;
    let var2861 : (Range<UInt32>, Range<UInt32>, Int64, (UInt16, Array<Bool>, Range<UInt8>, Bool, Range<UInt8>), Bool, Array<Unit>) = ((UInt32(153)&127..=UInt32(71)&127:(-80)|1), (UInt32(107)&127..=UInt32(48)&127:16|1), (-58), (UInt16(UInt8(200)), [false, true, true, false, false, false, true, true, false, true], (UInt8(UInt8(122))&127..=UInt8(80)&127:(Int64(Int16(116))|1)), (Class134() is Option<Bool>), (UInt8(81)&127..UInt8(125)&127:29|1)), (((UInt16(59), [false, true, true, false, true, true, true, true, false, true], (UInt8(239)&127..UInt8(233)&127:25|1), false, (UInt8(125)&127..=UInt8(118)&127:(-61)|1)) as Option<Class134>) is Interface141), [(), (), (), (), (), (), (), (), (), ()]);
    var loopTimeVar2914 : Int64 = 0;
    do {
        loopTimeVar2914++;
        func func2452<T0, T1, T2>(optionalParam2453 ! : (Range<UInt32>, Range<UInt32>, Int64, (UInt16, Array<Bool>, Range<UInt8>, Bool, Range<UInt8>), Bool, Array<Unit>) = ((UInt32(225)&127..UInt32(Int8(Int8(-66)))&127:((-107)|1)), (UInt32(UInt16(UInt16(183)))&127..=UInt32(125)&127:(Int64(UInt64(7))|1)), (-22), (UInt16(107), [false, true, false, false, true, true, false, false, true, true], (UInt8(210)&127..=UInt8(204)&127:(-31)|1), ((UInt32(139)&127..=UInt32(242)&127:66|1) is (Range<UInt16>, Range<Int16>, Range<UInt16>, Int64, Int16)), (UInt8(Int8(-18))&127..=UInt8(UInt8(134))&127:(Int64(73)|1))), true, [(), (), (), (), (), (), (), (), (), ()]), optionalParam2484 ! : Option<Int64> = (([((UInt16(110), [true, false, true, true, true, false, false, true, true, false], (UInt8(185)&127..=UInt8(15)&127:(-110)|1), true, (UInt8(11)&127..=UInt8(35)&127:((-70)|1))) is Option<Unit>), false, true, (Enum675.enumValue2512([Class134(), Class134(), Class134(), Class134(), Class134(), Class134(), Class134(), Class134(), Class134(), Class134()], UInt8(144)) is (Int32, Range<Int8>, Option<Bool>) -> (String, (Unit, Range<UInt32>, UInt8, Rune, Rune), Float64, Float64, Range<UInt16>, Float64, Int32)), (Option<Bool>.Some(true) is Int8), true, false, false, (("]:}o$\"`IN(", ((), (UInt32(212)&127..UInt32(168)&127:116|1), UInt8(14), 'w', 'G'), (-82.0), 52.0, (UInt16(136)&127..=UInt16(92)&127:73|1), 102.0, Int32(-15)) is Range<UInt32>), ((UInt8(110)&127..UInt8(197)&127:39|1) is (Int32, Range<Int8>, Option<Bool>) -> (String, (Unit, Range<UInt32>, UInt8, Rune, Rune), Float64, Float64, Range<UInt16>, Float64, Int32))] as Bool) as Int64), namedParam2551 ! : Array<Int16>, namedParam2552 ! : Range<Int32>) : UInt8 { // block id: 2553
            var var2555 : Option<UInt32> = Option<UInt32>.None;
            var2555;
            ((if (true) { Option<Option<Class134>>.None } else { Option<Option<Class134>>.Some(Option<Class134>.None) }  ?? func2569()) ?? if (false) { Class134() } else { match (var115) {
                case 'K' | 'f' | '0' | 'h' => 
                    if (false) { Class134() } else { Class134() } 
                
                case 'm' => 
                    var791
                
                case _ => 
                    Option<Unit>.Some(());
                    if (var537) { Class134() } else { var1385 } 
                
            } } );
            var1037
        }
;
        func2452<Option<Unit>, Unit, Bool>(optionalParam2453 : var2861, namedParam2551 : var2889, namedParam2552 : (Int32(-34)&127..Int32(88)&127:(-105)|1))
    } while ((if (UInt8(127) == var1037) { // block id: 2443
        var537
    } else { // block id: 2445
        var22 &&= true;
        true
    }) && loopTimeVar2914 < 100 ) ;
    var var2921 : ?Int8 = (UInt64(UInt32(UInt8(188))) as Int8);
    (var2921 ?? (match (###"3m:\"`!k3H="###) {
        case "2sIp@XB6eq" => 
            Option<Int8>.Some(var2584)
        
        case caseVar2936 : Array<Option<Unit>> => 
            Option<Class134>.Some(var791);
            var2921
        
        case caseVar2943 => 
            var162;
            if (var537) { Option<Class134>.None } else { Option<Class134>.None } ;
            Option<Int8>.Some(Int8(110))
        
        case _ => 
            var var2959 : (UInt8, Int32, (Range<UInt16>, Range<Int16>, Range<UInt16>, Int64, Int16), Option<Int16>) = (UInt8(Int8(Int8(-111))), Int32(-105), ((UInt16(UInt16(181))&127..UInt16(UInt16(244))&127:(54|1)), (Int16(-92)&127..=Int16(59)&127:(-19)|1), (UInt16(68)&127..UInt16(172)&127:(-13)|1), Int64(UInt16(Int8(9))), Int16(64)), (Int8(UInt8(UInt8(25))) as Int16));
            if (true) { var1061 } else { var2959 } ;
            ();
            Option<Int8>.Some(var2584)
        
        case _ => 
            Option<Int8>.Some(var2584)
        
    } ?? if (true) { // block id: 2991
        var2427;
        ();
        -var2584
    } else if (var537) { // block id: 2997
        Int8(34) & Int8(21)
    } else { // block id: 3001
        Int8(-31)
    }));
    var3004
}


public func func2420(param2421 : ((Bool, Bool, Float32)) -> Int16) : Rune { // block id: 2424
    var2427 <<= ((((var2178|>func2435) ?? if (var1542) { // block id: 3011
        UInt32(42) >> ((var2385) & 7)
    } else if (var570) { // block id: 3016
        if (var1542) { var3020 } else { var3020 } ;
        Float32(-40.0);
        UInt32(112) ** (var3027 & 3)
    } else { // block id: 3029
        var3031;
        UInt32(88)
    })) & 7);
    try { // block id: 3035
        var var3047 : ?Unit = (Int64(UInt16(1)) as Unit);
        match (UInt8(63)) {
            case _ => 
                var500;
                UInt32(106);
                if (var570) { Option<Unit>.Some(var360) } else { var3047 } 
            
        };
        ();
        var3058.getOrThrow()
    } finally { // block id: 3060
        var1309;
        var958;
        'B'
    }
}

public func func3065(param1262 : (Bool, Bool, Float32)) : Int16 { // block id: 1263
    var var1367 : (Interface137<Option<Unit>>) -> Class134 = { lambdaParameter1370 : Interface137<Option<Unit>> => Class134() };
    match (if (var537) { (var191|>var1367) } else { [Class134(), var791, Class134(), var791, Class134(), Class134(), Class134(), var1385, Class134(), Class134()][8] } ) {
        case _ => 
            Int16(34)
        
    }
}


public func func2416(param2417 : Array<Unit>) : UInt16 { // block id: 2418
    func3065|>func2420;
    match (match ((Option<(UInt8, Int32, (Range<UInt16>, Range<Int16>, Range<UInt16>, Int64, Int16), Option<Int16>)>.Some((UInt8(49), Int32(117), ((UInt16(46)&127..UInt16(242)&127:0|1), (Int16(76)&127..Int16(119)&127:115|1), (UInt16(9)&127..UInt16(63)&127:(-53)|1), var575, Int16(49)), var1133)) ?? (UInt8(192), var3089, var3092, Option<Int16>.None))) {
            case caseVar3110 : Option<Option<Bool>> => 
                let var3113 : Unit = ();
                var3113;
                if (true) { Option<Bool>.None } else { Option<Bool>.None } 
            
            case (_ : Class134,caseVar3121,caseVar3122,_ : Option<Int16>) => 
                var575 **= (var575 & 3);
                let var3131 : Bool = ([Float32(-113.0), Float32(93.0), Float32(61.0), Float32(91.0), Float32(-60.0), Float32(-115.0), Float32(44.0), Float32(-103.0), Float32(-120.0), Float32(38.0)] is Option<Array<Array<Bool>>>);
                if (true) { Option<Bool>.Some(var3131) } else { Option<Bool>.Some(var3136) } 
            
            case (caseVar3140,caseVar3141 : Int16,_,caseVar3142) => 
                var87;
                var52
            
            case _ => 
                Option<Rune>.Some('L');
                let var3153 : ?Bool = (Int64(UInt16(Int8(UInt8(213)))) as Bool);
                if (var537) { var3153 } else { var3153 } 
            
        }) {
        case caseVar3162 : Enum675 => 
            var500;
            var1309;
            var1216
        
        case caseVar3169 => 
            UInt16(186)
        
        case _ => 
            var131
        
    }
}

func func2316(param2317 : Int64) : Rune { // block id: 2318
    let var3243 : (Bool, Bool, Float32) = (true, (Option<Rune>.Some('Z') is Option<(String, (Unit, Range<UInt32>, UInt8, Rune, Rune), Float64, Float64, Range<UInt16>, Float64, Int32)>), Float32(Float32(39.0)));
    let var3252 : ?Range<Int8> = Option<Range<Int8>>.None;
    match ((if (var1542) { // block id: 2323
            ();
            var var2326 : ?Unit = (((), (UInt32(208)&127..=UInt32(Int16(-64))&127:(Int64(Int32(41))|1)), UInt8(224), 'T', 'M') as Unit);
            var2326;
            var2160 << ((UInt8(69)) & 7)
        } else { // block id: 2342
            var1309;
            var360;
            var2160 << ((UInt8(76)) & 7)
        }&127..(Option<UInt8>.None ?? var2160)&127:(if (false) { // block id: 2357
            if (var570) { var1128 } else { (UInt16(135)&127..=UInt16(62)&127:8|1) } ;
            (-59) ** ((-123) & 3)
        } else { // block id: 2365
            var2118 %= ((var29) | 1);
            (-40)
        }|1))) {
        case caseVar2372 => 
            var1172 = Int16(-110);
            ();
            Class134()
        
        case caseVar2381 => 
            var2385 /= ((var2385) | 1);
            [var2390, var2390, Int16(-32), Int16(56), Int16(-29), Int16(117), Int16(-106), Int16(-55), Int16(-121), var1604];
            if (false) { Class134(var3243, optionalParam2407 : var3252) } else { Class134() } 
        
        case _ => 
            var2427 /= ((UInt32(77)) | 1);
            var1278 * var1825;
            var304
        
    };
    var52;
    (var3058 ?? var1876)
}


func func2167<T0, T1>(param2168 : Interface138) : Range<Int8> { // block id: 2169
    let var3366 : (Range<Int8>, Array<Unit>, Range<Int8>, (Unit, Range<UInt32>, UInt8, Rune, Rune), Interface138, Range<Int8>, Int16, UInt8) = ((Int8(-10)&127..Int8(UInt8(84))&127:(Int64(Int16(85))|1)), [(), (), (), (), (), (), (), (), (), ()], (Int8(-67)&127..=Int8(76)&127:(-91)|1), ((), (UInt32(54)&127..UInt32(UInt8(98))&127:(Int64(UInt64(166))|1)), UInt8(195), 'A', '6'), Class134(), (Int8(64)&127..=Int8(-126)&127:(-55)|1), Int16(79), UInt8(UInt8(210)));
    (match (match (var2178) {
            case (caseVar2217,_,_ : Interface141,_,_ : Range<Int8>) => 
                var var2222 : (Range<Int8>, Array<Unit>, Range<Int8>, (Unit, Range<UInt32>, UInt8, Rune, Rune), Interface138, Range<Int8>, Int16, UInt8) = ((Int8(-51)&127..=Int8(Int8(78))&127:((-111)|1)), [(), (), (), (), (), (), (), (), (), ()], (Int8(Int8(55))&127..=Int8(96)&127:((-27)|1)), ((), (UInt32(85)&127..=UInt32(133)&127:29|1), UInt8(Int8(45)), 'p', 'R'), Class134(namedParam2254 : (UInt32(117)&127..=UInt32(231)&127:(-107)|1), optionalParam2255 : Int16(Int16(-124))), (Int8(UInt8(UInt8(10)))&127..=Int8(124)&127:((-69)|1)), Int16(-77), UInt8(34));
                if (true) { var2222 } else { ((Int8(-103)&127..Int8(0)&127:115|1), var87, (Int8(-26)&127..Int8(-23)&127:107|1), (var500, (var3027&127..UInt32(208)&127:((-71)|1)), UInt8(50), 'd', var1876), param2168, (Int8(55)&127..=Int8(-59)&127:1|1), var1604, var2031) } 
            
            case (_,caseVar3309,caseVar3310 : (Unit, Range<UInt32>, UInt8, Rune, Rune),caseVar3311,caseVar3312 : Array<Bool>) => 
                if (var1542) { ((Int8(-44)&127..=Int8(124)&127:27|1), [(), (), (), (), (), (), (), (), (), ()], (Int8(57)&127..Int8(73)&127:(var3323|1)), ((), (var3027&127..var3027&127:(var3323|1)), UInt8(0), var1876, 'C'), param2168, (Int8(24)&127..=Int8(-47)&127:121|1), Int16(58), UInt8(238)) } else { ((Int8(-3)&127..Int8(-114)&127:21|1), [(), (), (), (), (), (), (), (), (), ()], (Int8(-5)&127..Int8(125)&127:122|1), caseVar3310, Class134(namedParam2254 : (UInt32(128)&127..=var2004&127:(var3323|1))), (Int8(38)&127..Int8(-14)&127:105|1), Int16(111), UInt8(58)) } 
            
            case (_,caseVar3353 : Class91,caseVar3354,caseVar3355,_ : Array<Bool>) => 
                (var360, (UInt32(104)&127..=UInt32(229)&127:37|1), UInt8(93), 'q', 'a');
                if (false) { var3366 } else { var3366 } 
            
            case (caseVar3395 : Interface139,_ : Rune,_ : UInt64,caseVar3396,_) => 
                ();
                var1309;
                var var3405 : Int64 = Int64(Int32(28));
                ((Int8(112)&127..Int8(38)&127:(var3405|1)), var87, var3410, (var1309, (var3027&127..UInt32(46)&127:(10|1)), UInt8(2), 'H', var1876), Class134(), (Int8(125)&127..Int8(-42)&127:7|1), var1604, var1960)
            
            case _ => 
                var1309;
                ();
                var3366
            
        }) {
        case (_,_ : Option<Unit>,caseVar3435,(_,caseVar3436,_ : (String, (Unit, Range<UInt32>, UInt8, Rune, Rune), Float64, Float64, Range<UInt16>, Float64, Int32),_ : (String, (Unit, Range<UInt32>, UInt8, Rune, Rune), Float64, Float64, Range<UInt16>, Float64, Int32),_),caseVar3437,caseVar3438 : (Array<Unit>, Range<Int16>, Int16, Interface138, Array<Bool>),_ : Interface140,caseVar3439 : UInt8) => 
            let var3442 : ?Range<Int8> = ((UInt32(172)&127..UInt32(52)&127:(-29)|1) as Range<Int8>);
            var3442
        
        case caseVar3447 => 
            ();
            Option<Range<Int8>>.None
        
        case (caseVar3453 : Array<Float32>,caseVar3454,_ : (String, (Unit, Range<UInt32>, UInt8, Rune, Rune), Float64, Float64, Range<UInt16>, Float64, Int32),caseVar3455,caseVar3456,_ : Array<Float32>,caseVar3457 : Option<Array<Bool>>,caseVar3458) => 
            Option<Range<Int8>>.None
        
        case _ => 
            ();
            ();
            Option<Range<Int8>>.None
        
        case _ => 
            var87;
            Option<Range<Int8>>.Some((Int8(-106)&127..Int8(114)&127:(112|1)))
        
    } ?? if ((Option<Bool>.None ?? var1542)) { match ([Int16(115), Int16(108), Int16(57), Int16(-78), Int16(60), Int16(69), Int16(-7), Int16(46), Int16(-49), Int16(-114)]) {
        case _ => 
            (Int8(-95)&127..Int8(-4)&127:51|1)
        
    } } else { (Int8(1)&127..Int8(100)&127:118|1) } )
}


func func1545(namedParam2154 ! : Option<Unit>) : Range<Int8> { // block id: 2155
    let var3507 : Int8 = Int8(Int8(114));
    var var3516 : ?Int64 = Option<Int64>.Some((-67));
    if ((Int16(var2160) >= Int16(UInt16(159)))) { (var3491|>func2167<Float64, Option<Option<(Range<UInt16>, Range<Int16>, Range<UInt16>, Int64, Int16)>>>) } else { (if (var1542) { // block id: 3496
        var500;
        var87;
        var1745
    } else { // block id: 3500
        var2118 *= var2118;
        [(), (), (), (), (), (), (), (), (), ()];
        var2016
    }&127..=var3507&127:((var3516 ?? (-59))|1)) } 
}

func func1895(param1896 : String) : (Range<Int8>, Array<Unit>, Range<Int8>, (Unit, Range<UInt32>, UInt8, Rune, Rune), Interface138, Range<Int8>, Int16, UInt8) { // block id: 1897
    try { // block id: 1899
        let var1926 : Bool = true;
        let var1968 : UInt32 = UInt32(UInt32(18));
        match (((), (UInt32(0)&127..=UInt32(137)&127:((-9)|1)), var1908, var1876, var1876)) {
            case (caseVar1914 : (UInt16, Array<Bool>, Range<UInt8>, Bool, Range<UInt8>),caseVar1915,caseVar1916,caseVar1917 : Float64,_ : (Range<Int8>, Array<Unit>, Range<Int8>, (Unit, Range<UInt32>, UInt8, Rune, Rune), Interface138, Range<Int8>, Int16, UInt8)) => 
                if (false) { Option<Array<Bool>>.Some([var1542, true, var1926, var1926, true, false, var1926, var1926, var1926, true]) } else { Option<Array<Bool>>.None } ;
                var var1938 : UInt16 = UInt16(31);
                var1938 ^= var1938;
                Int16(-9)
            
            case caseVar1944 => 
                ();
                var1949 <<= ((var1949) & 7);
                var1604
            
            case (_,_ : Array<Bool>,caseVar1955 : Array<Float32>,caseVar1956 : (Int16, UInt64, Int16, Unit, UInt16, Range<Int64>, Int8, Float64),_) => 
                var1960 + UInt8(102);
                var1604
            
            case _ => 
                ();
                var1968;
                Int16(-119)
            
        };
        [var1604, var1604, var1604, Int16(33), Int16(86), Int16(85), Int16(-99), var1604, Int16(-69), Int16(57)];
        UInt16(97)
    } finally { // block id: 1984
        (Option<Unit>.None ?? ());
        var var1999 : UInt16 = UInt16(210);
        match (var1590) {
            case -52.0 | 72.0 => 
                Option<Range<UInt64>>.None;
                var1999
            
            case _ => 
                var2004;
                var var2011 : Int8 = Int8(Int8(Int8(-104)));
                var2011 >>= ((var2016) & 7);
                UInt16(140) ** (UInt16(32) & 3)
            
        }
    };
    let var2045 : Int64 = Int64(Int32(83));
    var loopTimeVar2077 : Int64 = 0;
    var loopTimeVar2084 : Range<UInt64> = (UInt64(Int32(80))&127..=UInt64(246)&127:((-100)|1));
    var loopTimeVar2104 : Int64 = 0;
    var loopTimeVar2115 : Int64 = 0;
    var var2139 : UInt16 = UInt16(UInt8(UInt8(Int8(Int8(102)))));
    var var3826 : UInt8 = UInt8(27);
    var var3855 : ?Rune = Option<Rune>.None;
    (match (var1590 ** Float64(Int32(77.0) & 3)) {
        case _ => 
            var2031 += var2031;
            (Int8(88)&127..Int8(53)&127:74|1)
        
        case 69.0 | 71.0 => 
            ();
            if (false) { (Int8(-5)&127..=Int8(-12)&127:(var2045|1)) } else { (var1745&127..Int8(105)&127:(var2045|1)) } 
        
        case _ => 
            ();
            let var2058 : Range<Int8> = (Int8(97)&127..Int8(-48)&127:(-120)|1);
            if (var1542) { var2058 } else { (Int8(-35)&127..var1745&127:(var2045|1)) } 
        
    }, [while ((var1542) && loopTimeVar2077 < 100 ) {
        loopTimeVar2077++;
        var var2070 : Int32 = Int32(UInt8(UInt8(UInt8(245))));
        var2070 = Int32(-82)
    }, (Option<Unit>.None ?? var360), for (i in loopTimeVar2084 where var1542) {

    }, while ((true) && loopTimeVar2104 < 100 ) {
        loopTimeVar2104++;
        if (true) { (true, true, Float32(-32.0)) } else { (var1542, var1542, Float32(0.0)) } 
    }, var360, var500, var360, do {
        loopTimeVar2115++;
        var2031 <<= ((var2031) & 7)
    } while ((var1542) && loopTimeVar2115 < 100 ) , match (var2118) {
        case 75 | 98 | 37 => 
            var var2125 : UInt64 = UInt64(11);
            var2125 >>= ((UInt64(88)) & 7);
            ()
        
        case caseVar2131 : Range<UInt64> => 
            var87;
            ()
        
        case _ => 
            var2139 %= ((UInt16(3)) | 1);
            ()
        
    }, (var2149 = """
8hfBo
wTGuL
""")], func1545(namedParam2154 : (var3522 as Unit)), (try (resource = Class91()) { // block id: 3804

    } catch (_) { // block id: 3805
        var1309;
        ((UInt16(104)&127..=UInt16(21)&127:89|1), (Int16(66)&127..=Int16(32)&127:122|1), (var1949&127..UInt16(146)&127:(31|1)), var2045, Int16(66));
        ()
    }, (UInt32(154)&127..UInt32(41)&127:119|1), match {
        case var1542 => 
        var3822;
        var3826 %= ((var1960) | 1);
        var1908 >> ((var2160) & 7)
        case var1542 => 
        (Int16(64)&127..var1604&127:((-67)|1));
        var500;
        UInt8(193)
        case _ => 
        UInt8(142)
    }, try { // block id: 3843
        if (false) { var1876 } else { var1876 } 
    } finally { // block id: 3848
        if (var1542) { '1' } else { '5' } 
    }, (var3855 ?? var1876)), match (try { // block id: 3860
            if (var1542) { [Int16(-63), Int16(36), Int16(-120), Int16(-53), Int16(87), Int16(-74), Int16(-50), Int16(-119), Int16(43), Int16(22)] } else { [Int16(-40), var1604, Int16(-83), Int16(43), var1604, Int16(-116), var2390, Int16(2), var1604, Int16(10)] } ;
            if (true) { Class134() } else { Class134() } 
        } catch (e: Exception) { // block id: 3879
            let var3884 : UInt32 = UInt32(Int32(75));
            Class134(namedParam2254 : (var2004&127..var3884&127:(29|1)))
        }) {
        case _ => 
            Class134()
        
    }, ((Option<Bool>.Some(true) as Range<Int8>) ?? (Int8(-74)&127..var2016&127:(var2045|1))), var1604 << ((if (false) { // block id: 3903
        [var1825, var1825, var1825, Float32(-87.0), Float32(-64.0), var1825, Float32(51.0), Float32(-20.0), var1825, Float32(16.0)];
        let var3916 : Option<Bool> = (Class134(namedParam2254 : (UInt32(136)&127..=UInt32(82)&127:(Int64(Int16(-102))|1))) as Bool);
        var3916;
        -Int16(94)
    } else { // block id: 3926
        [true, false, false, true, false, true, false, true, true, false];
        var2390
    }) & 7), UInt8(163))
}

public func func1731(param1732 : Rune) : Range<UInt16> { // block id: 1733
    var var1881 : ((Range<Int8>, Array<Unit>, Range<Int8>, (Unit, Range<UInt32>, UInt8, Rune, Rune), Interface138, Range<Int8>, Int16, UInt8)) -> Range<Int16> = { lambdaParameter1884 : (Range<Int8>, Array<Unit>, Range<Int8>, (Unit, Range<UInt32>, UInt8, Rune, Rune), Interface138, Range<Int8>, Int16, UInt8) => (Int16(-89)&127..=Int16(UInt16(Int8(-74)))&127:(Int64(Int16(UInt8(72)))|1)) };
    match (((var2149|>func1895)|>var1881)) {
        case caseVar3934 => 
            var1309;
            var2016;
            var1949
        
        case _ => 
            var1949 * var1949
        
        case _ => 
            var1949
        
        case _ : Option<Range<UInt64>> => 
            if (false) { (Int16(3)&127..Int16(-54)&127:(-125)|1) } else { (Int16(-119)&127..=Int16(99)&127:(-89)|1) } ;
            ();
            let var3959 : UInt16 = UInt16(8);
            var3959 >> ((UInt16(217)) & 7)
        
        case _ => 
            var2118;
            UInt16(164) * var1949
        
    };
    var var3970 : Float32 = Float32(Float32(-65.0));
    match (var3970) {
        case -70.0 => 
            if (false) { Option<Rune>.None } else { Option<Rune>.None } ;
            (UInt16(143)&127..=UInt16(130)&127:69|1)
        
        case -33.0 => 
            ();
            var3986;
            let var3990 : Range<UInt16> = (UInt16(Int8(Int8(Int8(76))))&127..=UInt16(UInt8(205))&127:(Int64((-7))|1));
            var3990
        
        case _ => 
            var2118 /= ((UInt64(129)) | 1);
            Option<Int64>.Some((-78));
            if (var1542) { (var1949&127..var1949&127:((-122)|1)) } else { (UInt16(7)&127..var1949&127:(var3323|1)) } 
        
        case _ : Array<Unit> => 
            Option<Array<Bool>>.Some([false, false, false, false, true, true, false, true, true, true]);
            var500;
            let var4025 : Range<UInt16> = (UInt16(172)&127..=UInt16(102)&127:(Int64(UInt16(UInt8(UInt8(188))))|1));
            var4025
        
        case _ => 
            (UInt32(237)&127..UInt32(166)&127:104|1);
            if (false) { (UInt16(232)&127..=UInt16(202)&127:(-31)|1) } else { (UInt16(181)&127..=var1949&127:(64|1)) } 
        
    }
}


public func func1694(optionalParam1695 ! : Range<UInt64> = (UInt64(7)&127..=UInt64(12)&127:(-111)|1), optionalParam1697 ! : Option<Array<Array<Bool>>> = (((UInt32(38)&127..UInt32(2)&127:104|1), (UInt32(145)&127..=UInt32(116)&127:(Int64(UInt64(67))|1)), 3, (UInt16(215), [true, true, false, false, true, true, true, false, true, true], (UInt8(70)&127..UInt8(95)&127:(-34)|1), (UInt64(30) is Range<Int16>), (UInt8(174)&127..=UInt8(92)&127:((-65)|1))), true, [(), (), (), (), (), (), (), (), (), ()]) as Array<Array<Bool>>), namedParam1719 ! : (Int32, Range<Int8>, Option<Bool>) -> (String, (Unit, Range<UInt32>, UInt8, Rune, Rune), Float64, Float64, Range<UInt16>, Float64, Int32)) : Range<UInt16> { // block id: 1724
    let var1726 : Range<UInt8> = (UInt8(173)&127..=UInt8(86)&127:12|1);
    var1726;
    try { // block id: 1729
        var1876|>func1731
    } catch (e: Exception) { // block id: 4045
        var var4053 : Range<UInt16> = (UInt16(UInt16(118))&127..UInt16(UInt8(Int8(80)))&127:(Int64(UInt16(212))|1));
        (Option<Range<UInt16>>.Some(var4053) ?? (UInt16(166)&127..=UInt16(89)&127:(-37)|1))
    }
}


func func1689(param1690 : Range<UInt8>) : Array<Bool> { // block id: 1691
    var var4064 : (Int32, Range<Int8>, Option<Bool>) -> (String, (Unit, Range<UInt32>, UInt8, Rune, Rune), Float64, Float64, Range<UInt16>, Float64, Int32) = func661;
    var var4111 : Float64 = 57.0;
    (func1694(namedParam1719 : var4064), if (match (var366) {
        case _ => 
            var2118 >>= ((UInt64(139)) & 7);
            var1542
        
    }) { (Int16(58)&127..=Int16(-46)&127:((-122)|1)) } else { try { // block id: 4080
        if (false) { [false, false, false, true, false, false, false, true, true, false] } else { [false, var1542, false, false, var1542, var4091, false, false, var4091, var4091] } ;
        var4098
    } finally { // block id: 4108
        var4111 /= Float64((Int32(122.0)) | 1);
        Int32(49);
        var4098
    } } , var4117, var3323, var2390);
    var var4155 : Option<Range<UInt16>> = ([Int16(-72), Int16(Int16(9)), Int16(-109), Int16(UInt8(72)), Int16(Int16(95)), Int16(UInt8(82)), Int16(Int16(Int16(118))), Int16(UInt8(34)), Int16(-115), Int16(-64)] as Range<UInt16>);
    (match ((Option<UInt16>.None ?? var1949)) {
        case _ => 
            ();
            var1949--;
            if (var1542) { var3031 } else { var3031 } 
        
        case caseVar4142 => 
            var500;
            if (var1542) { var3031 } else { Option<Array<Bool>>.None } 
        
        case _ : String => 
            Option<Array<Array<Bool>>>.Some([[true, false, true, false, true, false, true, false, false, false], [false, true, true, false, false, true, true, false, false, false], [false, true, true, false, false, true, false, false, false, false], [false, false, true, true, true, true, false, false, false, false], [true, true, true, false, false, false, false, false, false, false], [true, true, false, true, false, true, true, true, false, true], [false, true, true, false, false, true, false, false, true, false], [true, true, true, true, false, true, true, true, true, true], [true, true, false, false, false, false, true, false, false, false], [false, false, true, false, true, true, true, true, false, true]]);
            var4155;
            Option<Array<Bool>>.None
        
        case _ => 
            Option<Range<UInt64>>.None;
            if (false) { (var1745&127..Int8(-33)&127:((-100)|1)) } else { (Int8(-109)&127..Int8(58)&127:105|1) } ;
            var3031
        
    } ?? [false, false, true, true, false, true, true, true, false, false])
}

public func func1684(optionalParam1685 ! : Array<Array<Bool>> = [[true, false, false, false, false, false, true, true, true, true], [false, true, true, false, false, false, false, true, true, false], [false, true, false, true, false, false, true, true, false, false], [true, false, true, false, true, false, true, true, false, true], [true, false, false, true, false, true, false, false, true, true], [true, true, true, true, true, true, false, true, true, false], [false, false, true, true, false, false, true, true, true, true], [false, false, false, true, false, true, true, false, false, false], [true, true, true, true, false, true, false, false, true, false], [false, true, false, true, false, false, false, false, false, false]]) : Array<Bool> { // block id: 1687
    (UInt8(183)&127..=UInt8(144)&127:30|1)|>func1689
}

public func func1545(param1546 : Range<UInt32>) : Array<Bool> { // block id: 1547
    var var1594 : Int16 = Int16(Int8(Int8(Int8(-91))));
    let var1652 : Int8 = Int8(Int8(-101));
    if (var1554[4]) { try { // block id: 1588
        var1590;
        var var1600 : UInt64 = UInt64((-25));
        (var1594, var1600, var1604, var360, UInt16(227), (61&127..=38&127:31|1), Int8(-81), 53.0)
    } finally { // block id: 1612
        var1614
    } } else { try { // block id: 1634
        var var1638 : UInt64 = UInt64(UInt16(240));
        let var1646 : Int64 = Int64(UInt16(112));
        (var1604, var1638, Int16(16), var500, UInt16(60), (var1646&127..=84&127:(var1646|1)), var1652, var1590)
    } catch (_) { // block id: 1656
        [true, true, false, false, false, false, true, false, true, true];
        ();
        let var1663 : Int16 = Int16(Int8(Int8(Int8(-66))));
        var var1670 : UInt16 = UInt16(187);
        (var1604, UInt64(7), var1663, (), var1670, var1673, var1652, var1590)
    } } [3];
    func1684()
}




public func func1493(optionalParam1494 ! : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]) : (Range<UInt16>, Range<Int16>, Range<UInt16>, Int64, Int16) { // block id: 1496
    let var1520 : Bool = (Class134() is UInt64);
    var var4201 : Array<Bool> = [true, false, false, true, true, true, false, false, true, false];
    var var4212 : Bool = true;
    var var4218 : Bool = true;
    let var4254 : Bool = ([true, true, false, true, true, true, false, true, false, false] is (String) -> (Range<Int8>, Array<Unit>, Range<Int8>, (Unit, Range<UInt32>, UInt8, Rune, Rune), Interface138, Range<Int8>, Int16, UInt8));
    (((UInt16(130)&127..=UInt16(211)&127:63|1) as Array<Array<Bool>>) ?? [try { // block id: 1506
        var1309;
        var1509
    } catch (_) { // block id: 1511
        var500;
        ();
        if (false) { [true, true, true, true, true, false, true, false, true, false] } else { var1509 } 
    }, if (var1520) { [true, true, true, true, false, false, true, false, true, false] } else { var1509 } , (Option<Array<Bool>>.None ?? [false, var1520, var1520, var1520, false, var1520, var1520, false, true, var1542]), ((var3027&127..=var2004&127:(var3323|1))|>func1545), try { // block id: 4196
        var1509
    } catch (_) { // block id: 4198
        UInt8(80);
        var4201
    } finally { // block id: 4203
        var1309;
        [false, true, true, false, var1520, var4212, true, false, var4091, var4218]
    }, [true, false, true, true, false, false, true, false, true, false], [false, true, false, true, true, true, false, true, true, false], (Option<Array<Bool>>.None ?? [true, true, true, false, true, true, false, false, true, false]), try { // block id: 4230
        var4201
    } finally { // block id: 4232
        [true, false, true, true, true, false, true, false, true, true]
    }, match (UInt8(249)) {
        case _ : Rune => 
            if (var4241) { var4201 } else { [true, true, false, true, false, true, true, true, true, false] } 
        
        case _ => 
            var360;
            if (false) { [false, false, false, true, true, false, true, true, true, true] } else { [var4254, false, true, var4091, true, var1542, var1542, var4091, var1520, var4266] } 
        
    }]);
    var var4291 : ??(Range<UInt16>, Range<Int16>, Range<UInt16>, Int64, Int16) = (((UInt16(134)&127..UInt16(171)&127:(-67)|1) as UInt16) as Option<(Range<UInt16>, Range<Int16>, Range<UInt16>, Int64, Int16)>);
    var var4303 : ?(Range<UInt16>, Range<Int16>, Range<UInt16>, Int64, Int16) = Option<(Range<UInt16>, Range<Int16>, Range<UInt16>, Int64, Int16)>.Some(((UInt16(135)&127..=UInt16(119)&127:(Int64(Int16(37))|1)), (Int16(-72)&127..Int16(115)&127:(Int64(58)|1)), (UInt16(123)&127..=UInt16(66)&127:(-2)|1), Int64(Int32(-23)), Int16(-96)));
    let var4326 : Range<UInt16> = (UInt16(41)&127..UInt16(107)&127:43|1);
    ((match ((false, var4241, Float32(77.0))) {
        case caseVar4285 : Interface141 => 
            if (true) { Option<Option<(Range<UInt16>, Range<Int16>, Range<UInt16>, Int64, Int16)>>.None } else { var4291 } 
        
        case _ => 
            ();
            Option<Option<(Range<UInt16>, Range<Int16>, Range<UInt16>, Int64, Int16)>>.Some(var4300)
        
    } ?? var4303) ?? (if (false) { Option<(Range<UInt16>, Range<Int16>, Range<UInt16>, Int64, Int16)>.Some((var4326, (Int16(109)&127..Int16(-85)&127:(-82)|1), (UInt16(210)&127..=UInt16(157)&127:(var3323|1)), 96, Int16(11))) } else { var4300 }  ?? if (var4266) { var3092 } else { var3092 } ))
}

public func func1487(param1488 : (String) -> Bool) : Option<Option<Bool>> { // block id: 1491
    func1493(optionalParam1494 : match (var417) {
        case _ => 
            var87
        
        case _ => 
            var191;
            var1614;
            [var1309, (), var360, (), (), (), (), var1309, (), var4361]
        
    });
    var4364;
    Option<Option<Bool>>.Some(if ((Class134() is (UInt16, Array<Bool>, Range<UInt8>, Bool, Range<UInt8>))) { Option<Bool>.None } else { match ((var3410, [(), (), (), (), (), (), (), (), (), ()], var3410, var1179, var3491, var3410, Int16(-107), UInt8(131))) {
        case _ => 
            if (var3136) { Option<Bool>.None } else { var52 } 
        
    } } )
}

public func func4388(param64 : String) : Bool { // block id: 65
    func67(namedParam68 : Class91.var112, optionalParam69 : var115, namedParam74 : true)
}

public func func1460(param1461 : Array<UInt16>) : Array<Float32> { // block id: 1462
    var loopTimeVar1479 : Int64 = 0;
    do {
        loopTimeVar1479++;

    } while ((if (func63(var120)) { // block id: 1467
        let var1471 : Int16 = Int16(16);
        var524 != var1471
    } else { // block id: 1473
        var22 && var537
    }) && loopTimeVar1479 < 100 ) ;
    match (((func4388|>func1487) ?? (Option<Option<Bool>>.Some(Option<Bool>.None) ?? Option<Bool>.None))) {
        case _ : Array<UInt16> => 
            if (true) { var4401 } else { [Float32(-119.0), Float32(-42.0), Float32(-106.0), Float32(21.0), Float32(-23.0), Float32(99.0), Float32(-118.0), Float32(-121.0), Float32(-104.0), Float32(67.0)] } 
        
        case _ : Array<Array<Bool>> => 
            [Float32(33.0), Float32(2.0), Float32(113.0), Float32(21.0), Float32(-8.0), Float32(88.0), Float32(55.0), Float32(62.0), Float32(88.0), Float32(-68.0)]
        
        case caseVar4410 => 
            if (true) { var4401 } else { [Float32(119.0), Float32(-125.0), Float32(-59.0), Float32(96.0), Float32(-18.0), Float32(-10.0), Float32(-90.0), Float32(92.0), Float32(31.0), Float32(55.0)] } 
        
        case caseVar4418 => 
            Option<Class134>.Some(var791);
            UInt16(125);
            [Float32(-42.0), Float32(-36.0), Float32(-113.0), Float32(-66.0), Float32(38.0), Float32(79.0), Float32(-20.0), Float32(-48.0), Float32(-7.0), Float32(42.0)]
        
        case _ => 
            if (false) { [Float32(90.0), Float32(59.0), Float32(104.0), Float32(93.0), Float32(-121.0), Float32(59.0), Float32(96.0), Float32(44.0), Float32(28.0), Float32(-42.0)] } else { var4401 } 
        
    }
}


public func func1454(param1455 : (Bool, Bool, Float32)) : Interface141 { // block id: 1456
    ((Option<Array<UInt16>>.Some([UInt16(145), var131, UInt16(129), UInt16(81), UInt16(87), UInt16(10), UInt16(152), UInt16(1), var131, UInt16(150)]) ?? [UInt16(93), UInt16(170), UInt16(195), UInt16(219), UInt16(179), UInt16(152), UInt16(227), UInt16(81), UInt16(230), UInt16(23)])|>func1460)[4];
    try { // block id: 4451
        Int8(12);
        var loopTimeVar4464 : Int64 = 0;
        do {
            loopTimeVar4464++;
            if (var570) { (var1542, var4091, var1825) } else { param1455 } 
        } while ((var1542) && loopTimeVar4464 < 100 ) ;
        match (Float32(-40.0)) {
            case _ => 
                Class134()
            
        }
    } finally { // block id: 4470
        var loopTimeVar4475 : Int64 = 0;
        while ((var4091) && loopTimeVar4475 < 100 ) {
            loopTimeVar4475++;

        };
        var var4478 : ?Bool = Option<Bool>.Some(false);
        match (var4478) {
            case caseVar4483 => 
                if (false) { [UInt16(37), UInt16(10), UInt16(128), UInt16(242), UInt16(169), UInt16(103), UInt16(44), UInt16(218), UInt16(129), UInt16(24)] } else { [UInt16(94), UInt16(97), UInt16(61), UInt16(109), UInt16(177), UInt16(112), UInt16(22), UInt16(80), UInt16(230), UInt16(95)] } ;
                var500
            
            case caseVar4492 => 
                var2579;
                var3089 -= Int32(47)
            
            case caseVar4500 => 
                ()
            
            case caseVar4505 => 
                ();
                var4510 ^= var2390
            
            case _ => 
                var500;
                ()
            
        };
        var235
    }
}

public func func654(param655 : Unit) : (Range<UInt16>, Range<Int16>, Range<UInt16>, Int64, Int16) { // block id: 656
    let var1222 : (Enum675, Int32) = (Enum675.enumValue1225((UInt8(65)&127..UInt8(Int8(-105))&127:(Int64(UInt64(144))|1)), UInt16(98)), Int32(14));
    (func661(var265, namedParam672 : Option<Bool>.None)[4], (match (UInt8(244)) {
        case _ => 
            var1172 ^= Int16(22);
            ("""
z'Z;[
+~-fd
""", var1179, 110.0, var863, var1128, var863, var599);
            (Enum675.defaultValue, Int32(118))
        
        case 248 => 
            (Enum675.defaultValue, var599)
        
        case 247 | 242 | 26 => 
            ();
            var1216 *= UInt16(249);
            if (var570) { var1222 } else { var1222 } 
        
        case 49 => 
            if (false) { var1243 } else { [UInt16(159), UInt16(179), UInt16(134), UInt16(46), UInt16(216), UInt16(235), UInt16(82), UInt16(91), UInt16(65), UInt16(236)] } ;
            var var1249 : Range<UInt8> = (UInt8(34)&127..=UInt8(64)&127:(-107)|1);
            (Enum675.enumValue1225(var1249, UInt16(90)), var173)
        
        case _ => 
            (Enum675.defaultValue, var599)
        
    }|>func1019), (UInt16(145)&127..UInt16(111)&127:18|1), var575, ((false, true, var1278)|>(func1454~>func1394)))
}



func func648(param649 : Option<Bool>) : (Bool, Bool, Float32) { // block id: 650
    var var4524 : (Unit) -> (Range<UInt16>, Range<Int16>, Range<UInt16>, Int64, Int16) = func654;
    var var4557 : (Bool, Bool, Float32) = ((Float32(Float32(63.0)) is (Array<Array<Bool>>) -> Array<Bool>), true, Float32(Float32(Float32(Float32(80.0)))));
    (match (var52) {
        case _ : Float64 => 
            var4361
        
        case _ : Array<Float32> => 
            var2427 *= UInt32(215)
        
        case _ : (Unit, Range<UInt32>, UInt8, Rune, Rune) => 
            UInt16(177);
            ()
        
        case _ => 
            Option<Int8>.Some(var2584);
            var var4553 : Float32 = Float32(Float32(60.0));
            if (true) { (false, var3136, var4553) } else { var4557 } ;
            var575 ^= var575
        
    }|>var4524)[2];
    var loopTimeVar4580 : Int64 = 0;
    do {
        loopTimeVar4580++;
        continue;
        ((var3020, Int32(46)) as (UInt8, Int32, (Range<UInt16>, Range<Int16>, Range<UInt16>, Int64, Int16), Option<Int16>))
    } while ((false) && loopTimeVar4580 < 100 ) ;
    (try { // block id: 4587
        var162;
        var4590;
        var4594
    } catch (_) { // block id: 4596
        var4594
    } ?? ((var1133 is (Unit, Range<UInt32>, UInt8, Rune, Rune)), (var4603 is Interface137<Option<Unit>>), (Option<Float32>.None ?? Float32(122.0))))
}

public func func642() : Float32 { // block id: 643
    var loopTimeVar4658 : Range<UInt64> = (UInt64(195)&127..UInt64(0)&127:((-63)|1));
    for (i in loopTimeVar4658 where (var52|>func648)[0]) {
        (Option<Bool>.None ?? var537)
    };
    var loopTimeVar4666 : Range<UInt64> = (UInt64(10)&127..UInt64(208)&127:((-69)|1));
    for (i in loopTimeVar4666 where var537) {

    };
    var4672
}

public func func606(optionalParam607 ! : Array<Bool> = Array<Bool>(10){ i => false }, optionalParam632 ! : Interface141 = Class134(), namedParam634 ! : Range<Int16>, optionalParam635 ! : Range<Int64> = (120&127..(-36)&127:(-53)|1)) : Float32 { // block id: 637
    var639;
    func642()
}


public func func514(param515 : (Unit) -> Unit, namedParam518 ! : Float32) : Float32 { // block id: 519
    func17(match (match (var524) {
            case _ => 
                var232
            
            case caseVar532 => 
                var162;
                if (var537) { Option<Int64>.None } else { var232 } 
            
            case -54 => 
                var52;
                if (false) { var232 } else { var232 } 
            
            case _ => 
                if (false) { Option<Bool>.Some(true) } else { Option<Bool>.Some(true) } ;
                let var562 : ?Int64 = Option<Int64>.Some(Int64(UInt64(159)));
                var562
            
            case _ => 
                if (var570) { Option<Int64>.Some(var575) } else { var232 } 
            
        }) {
        case _ : (UInt16, Array<Bool>, Range<UInt8>, Bool, Range<UInt8>) => 
            var162;
            var var586 : Int16 = Int16(Int16(-96));
            var586 &= Int16(27)
        
        case _ : Float64 => 
            ()
        
        case _ => 
            var162
        
    });
    Int32(var599);
    Float32(func606(optionalParam632 : match ((UInt32(42)&127..UInt32(22)&127:43|1)) {
        case _ => 
            if (true) { Class134(namedParam2254 : var2579) } else { Class134(namedParam2254 : var2579, optionalParam2255 : var1172) } 
        
        case caseVar4688 : (Bool, Bool, Float32) => 
            if (true) { Class134() } else { var4694 } 
        
        case caseVar4698 => 
            Class134(namedParam2254 : (UInt32(202)&127..var2385&127:(32|1)), optionalParam2255 : var524)
        
        case caseVar4708 : Option<Int8> => 
            Class134();
            var4672;
            Class134(namedParam2254 : var2579)
        
        case _ => 
            var417;
            var265 += Int32(11);
            Class134()
        
    }, namedParam634 : (var4727 ?? (var524&127..var1172&127:(var575|1))), optionalParam635 : (var575&127..=var4737&127:((-73)|1))))
}





public func func510(param511 : Unit) : (UInt16, Array<Bool>, Range<UInt8>, Bool, Range<UInt8>) { // block id: 512
    func514(func17, namedParam518 : try { // block id: 4742
        param511;
        param511;
        var1278
    } catch (e: Exception) { // block id: 4746
        var1278
    });
    let var4782 : Int64 = 102;
    (-(Option<UInt16>.None ?? var1216), [(var52 ?? false), true || var3136, var863 < var863, true, (Option<Bool>.None ?? true), if (var3136) { // block id: 4777
        (UInt8(222)&127..=UInt8(251)&127:(var4782|1));
        -Float32(-2.0);
        var537
    } else { // block id: 4787
        ();
        var162;
        var22
    }, var570, 102 == (-28), if (var3136) { // block id: 4797
        var4799;
        if (var3136) { ###"S&]Nj54%K "### } else { ">m'8)\"pR8r" } ;
        Int8(28) != Int8(61)
    } else { // block id: 4809
        ();
        var570
    }, true], match (var2427) {
        case _ => 
            ();
            if (true) { var791 } else { Class134() } ;
            (UInt8(17)&127..var1037&127:((-68)|1))
        
        case _ => 
            if (var22) { var4832 } else { var4832 } ;
            (UInt8(29)&127..=UInt8(65)&127:(-2)|1)
        
    }, ((Option<Option<(String, (Unit, Range<UInt32>, UInt8, Rune, Rune), Float64, Float64, Range<UInt16>, Float64, Int32)>>.None ?? var830) is Interface141), (match ('B') {
        case 'A' => 
            Option<Range<UInt8>>.Some((UInt8(6)&127..UInt8(69)&127:(-46)|1))
        
        case _ => 
            Option<Range<UInt8>>.None
        
    } ?? var2765))
}

func func488(param489 : (Unit, Range<UInt32>, UInt8, Rune, Rune)) : (UInt16, Array<Bool>, Range<UInt8>, Bool, Range<UInt8>) { // block id: 490
    match (match (var191) {
            case _ => 
                var22
            
        }) {
        case _ => 
            var500;
            var503;
            if (false) { var235 } else { var235 } 
        
    };
    let var4874 : ?Array<Bool> = Option<Array<Bool>>.Some([false, false, false, true, true, false, false, true, true, true]);
    var loopTimeVar4879 : Int64 = 0;
    do {
        loopTimeVar4879++;
        if (true) { var4874 } else { var4874 } 
    } while ((!var3136) && loopTimeVar4879 < 100 ) |>func510
}



public func func208(param209 : Int64) : Unit { // block id: 210
    var var5064 : Bool = ([(), (), (), (), (), (), (), (), (), ()] is Option<Int64>);
    let var5072 : Array<Bool> = [false, false, false, false, true, true, true, false, false, false];
    var loopTimeVar5080 : Int64 = 0;
    do {
        loopTimeVar5080++;

    } while ((var191.func215([[true, true, true, true, false, true, true, false, false, true], var1509, [var4266, var4241, true, true, true, var3136, false, var5024, true, false], var1509, [false, true, true, false, true, true, false, true, false, true], [false, true, var5024, false, var4266, true, false, true, false, var4091], [false, false, true, true, false, true, false, false, true, false], [var4241, false, var4241, true, true, var3136, true, false, var4266, var1542], [var5024, false, var5058, var4091, var22, var5064, false, var3136, var5024, var22], var5072], namedParam217 : (UInt8(107)&127..=UInt8(176)&127:(var3323|1)))) && loopTimeVar5080 < 100 ) ;
    try { // block id: 5082
        (-123);
        var2621
    } catch (_) { // block id: 5085
        (var5088 as UInt8)
    } finally { // block id: 5090
        if (var4266) { // block id: 5093
            Option<Bool>.Some(false);
            var2178
        } else if (false) { // block id: 5098
            var5100;
            var2178
        } else { // block id: 5105
            if (true) { (var131, [false, false, false, true, false, true, true, false, false, true], (UInt8(154)&127..=UInt8(133)&127:(-18)|1), true, var2765) } else { (var5116, var1509, (UInt8(89)&127..UInt8(133)&127:(-115)|1), true, (UInt8(2)&127..=UInt8(196)&127:(-69)|1)) } 
        };
        var2621
    };
    let var5130 : ?Bool = (('K' as Int8) as Bool);
    var loopTimeVar5184 : Int64 = 0;
    while (((var5130 ?? var4241)) && loopTimeVar5184 < 100 ) {
        loopTimeVar5184++;
        (Option<(Unit, Range<UInt32>, UInt8, Rune, Rune)>.Some((var4361, (UInt32(219)&127..UInt32(170)&127:(-63)|1), UInt8(12), var1876, 'f')) ?? var1179);
        var var5166 : UInt64 = UInt64(UInt8(11));
        match (Option<Bool>.Some(var1542)) {
            case caseVar5154 => 
                ();
                var2385++;
                ()
            
            case caseVar5162 => 
                var5166 ^= UInt64(166);
                ();
                var4672 *= Float32(33.0)
            
            case caseVar5176 => 
                ();
                var1309
            
            case _ => 
                ()
            
        }
    }
}

public func func13(param14 : Int64) : Option<Int64> { // block id: 15
    func17(((-64)|>func208))|>{ lambdaParameter204 : Unit =>  };
    Option<Int64>.Some((-71))
}

main(): Int64 {
    try {
        let var5190 : (Int64) -> Option<Int64> = func13;
        ((var3323|>var5190) ?? 38)
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var1216*var1216), 64)
        crccheck.updateBuffer(UInt64(var2427*var2427), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Enum675 {

}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_unexpected_declaration_in_scope
// ASSERT: scan parse_expected_expr_or_decl_in
// ASSERT: scan parse_expected_character
// ASSERT: scan parse_expected_catch_or_finally_in_try
// ASSERT: scan parse_expected_left_brace
// ASSERT: scan parse_expected_case


