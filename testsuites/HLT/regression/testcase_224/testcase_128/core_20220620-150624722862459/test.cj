/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output


let var93 : Int64 = Int64(UInt32(UInt16(213)))
let var102 : Int8 = Int8(Int8(UInt8(UInt8(UInt8(32)))))
let var109 : UInt8 = UInt8(UInt8(250))
public let var161 : Array<Option<Unit>> = Array<Option<Unit>>(10){ i => Option<Unit>.None }
public var var186 : Int64 = 36
public var var222 : Unit = ()
public let var225 : Int32 = Int32(17)
let var279 : Range<UInt16> = (UInt16(139)&127..UInt16(34)&127:24|1)
public var var318 : Bool = (Int32(UInt32(238)) is String)
var var398 : ??Unit = Option<Option<Unit>>.None
public var var440 : Range<UInt32> = (UInt32(Int16(Int8(0)))&127..UInt32(Int16(UInt8(232)))&127:(Int64(UInt32(Int16(Int8(-106))))|1))
let var456 : Int16 = Int16(UInt16(UInt16(89)))
let var468 : (Range<UInt32>, Rune, UInt64, Unit, Int16, Range<Int32>, Rune) = ((UInt32(222)&127..UInt32(UInt8(105))&127:((-29)|1)), 'o', UInt64(UInt16(Int8(3))), (), Int16(Int8(-74)), (Int32(UInt16(97))&127..Int32(-40)&127:(63|1)), 'm')
let var593 : UInt64 = UInt64(206)
public let var640 : (UInt32, Range<Int8>, Range<UInt64>) = (UInt32(114), (Int8(27)&127..=Int8(UInt8(Int8(39)))&127:(44|1)), (UInt64(UInt32(UInt16(79)))&127..UInt64(166)&127:(Int64(UInt8(193))|1)))
public let var740 : ?Unit = Option<Unit>.None
var var746 : (Range<Int16>, Range<UInt32>, Int8, UInt8, Range<Int32>) = ((Int16(UInt8(UInt8(156)))&127..=Int16(29)&127:((-120)|1)), (UInt32(19)&127..UInt32(51)&127:(-32)|1), Int8(-92), UInt8(UInt8(29)), (Int32(-26)&127..Int32(-39)&127:(Int64(Int16(88))|1)))
let var769 : Range<UInt64> = (UInt64(Int64(UInt64(UInt16(238))))&127..UInt64(54)&127:((-21)|1))
public var var796 : Unit = ()
let var814 : ?Range<Int64> = (((-45)&127..112&127:45|1) as Range<Int64>)
let var826 : Unit = ()
var var966 : ((Range<Int16>, Range<UInt32>, Int8, UInt8, Range<Int32>), Unit, Option<Range<UInt8>>, (UInt32, Range<Int8>, Range<UInt64>)) = (((Int16(-64)&127..Int16(-42)&127:43|1), (UInt32(53)&127..UInt32(135)&127:((-33)|1)), Int8(32), UInt8(246), (Int32(47)&127..=Int32(-47)&127:52|1)), (), ((((Int32(120)&127..Int32(23)&127:(-122)|1), "K~Ftl nQOz", Option<Range<UInt32>>.None) as Range<Int64>) as Range<UInt8>), (UInt32(Int32(UInt16(122))), (Int8(-30)&127..Int8(-23)&127:(Int64(Int16(-83))|1)), (UInt64(0)&127..UInt64(121)&127:12|1)))
let var1032 : ?Bool = ((Int8(UInt8(242)) is Range<UInt64>) as Bool)
public let var1049 : Enum264 = Enum264.defaultValue
var var1063 : Class201 = Class201()
var var1188 : UInt8 = UInt8(165)
let var1457 : Enum936<Range<Int64>, Option<Unit>> = Enum936<Range<Int64>, Option<Unit>>.defaultValue
public var var1495 : Int32 = Int32(UInt8(183))
public var var1550 : Float64 = (-15.0)
public let var1578 : ?Array<Int8> = Option<Array<Int8>>.None
let var1656 : Int64 = Int64(Int16(3))
let var1707 : UInt16 = UInt16(22)
public let var1844 : Range<UInt8> = (UInt8(46)&127..UInt8(64)&127:(Int64((-83))|1))
var var1864 : Interface205 = Class201()
var var1911 : Range<Int32> = (Int32(108)&127..=Int32(-29)&127:(-125)|1)
let var1995 : String = "3(vS+**;l%"
let var2053 : Range<Int8> = (Int8(UInt8(UInt8(Int8(123))))&127..=Int8(-109)&127:(Int64(Int16(-82))|1))
public var var2076 : Int16 = Int16(104)
let var2140 : ?String = Option<String>.None
var var2263 : ?Bool = Option<Bool>.None
public var var2427 : UInt32 = UInt32(29)
var var2452 : Bool = true
public var var2469 : UInt64 = UInt64(172)
public var var2500 : Aggregate658 = Aggregate658()
public let var2514 : ?UInt16 = ((UInt32(200)&127..=UInt32(Int16(-128))&127:(75|1)) as UInt16)
var var2608 : ((Array<Range<UInt8>>, (Range<UInt16>, Unit, Int32)), Int8) = (([(UInt8(54)&127..UInt8(232)&127:(-97)|1), (UInt8(209)&127..UInt8(163)&127:15|1), (UInt8(51)&127..=UInt8(49)&127:(33|1)), (UInt8(28)&127..UInt8(102)&127:((-10)|1)), (UInt8(174)&127..UInt8(90)&127:(-79)|1), (UInt8(58)&127..=UInt8(216)&127:10|1), (UInt8(199)&127..=UInt8(76)&127:(48|1)), (UInt8(224)&127..=UInt8(45)&127:((-121)|1)), (UInt8(202)&127..UInt8(14)&127:(88|1)), (UInt8(85)&127..UInt8(180)&127:112|1)], ((UInt16(236)&127..UInt16(242)&127:(48|1)), (), Int32(Int8(-102)))), Int8(-82))
public var var2765 : Int8 = Int8(Int8(UInt8(Int8(-5))))
let var2849 : Bool = false
public let var2904 : (Array<Range<UInt8>>, (Range<UInt16>, Unit, Int32)) = ([(UInt8(135)&127..UInt8(82)&127:60|1), (UInt8(61)&127..UInt8(225)&127:107|1), (UInt8(153)&127..UInt8(224)&127:121|1), (UInt8(153)&127..=UInt8(126)&127:(-27)|1), (UInt8(Int8(-47))&127..UInt8(Int8(33))&127:((-3)|1)), (UInt8(245)&127..UInt8(241)&127:(-63)|1), (UInt8(108)&127..=UInt8(210)&127:71|1), (UInt8(Int8(98))&127..=UInt8(UInt8(165))&127:(Int64(UInt64(73))|1)), (UInt8(175)&127..=UInt8(28)&127:91|1), (UInt8(209)&127..UInt8(20)&127:76|1)], ((UInt16(Int8(-85))&127..=UInt16(Int8(94))&127:((-28)|1)), (), Int32(Int16(Int8(-104)))))
public let var3009 : (Range<Int32>, String, Option<Range<UInt32>>) = ((Int32(41)&127..=Int32(-105)&127:(-91)|1), ###"R:0#/QJ^g${var1995}*"###, Option<Range<UInt32>>.None)
let var3024 : Unit = ()
var var3033 : Unit = ()
var var3053 : UInt16 = UInt16(98)
public let var3095 : ?Range<UInt8> = (Option<Option<Range<UInt32>>>.None as Range<UInt8>)
let var3169 : Rune = 'q'
let var3237 : Rune = 'h'
var var3254 : ?Bool = (((Int32(78) is (Range<Int16>, Range<UInt32>, Int8, UInt8, Range<Int32>)) as Range<UInt8>) as Bool)
public let var3394 : Range<Int64> = ((-9)&127..46&127:(67|1))
public let var3407 : ?(Range<UInt16>, Unit, Int32) = Option<(Range<UInt16>, Unit, Int32)>.None
public var var3532 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
let var3576 : Rune = '7'
let var3664 : Unit = ()
let var3685 : UInt64 = UInt64(UInt32(22))
public var var3835 : (Unit, Int8, Range<Int8>, Rune, Range<UInt8>, Int32) = ((), Int8(UInt8(Int8(UInt8(212)))), (Int8(89)&127..=Int8(-120)&127:116|1), 'n', (UInt8(UInt8(Int8(-114)))&127..UInt8(161)&127:((-87)|1)), Int32(-73))
var var3976 : Array<Int8> = Array<Int8>(10){ i => Int8(Int8(-88)) }
public var var4009 : ?Range<UInt8> = ((Option<Int32>.None as Unit) as Range<UInt8>)
let var4014 : Range<UInt8> = (UInt8(214)&127..=UInt8(236)&127:(38|1))
var var4072 : Int8 = Int8(UInt8(109))
var var4112 : Int32 = Int32(86)
let var4126 : ?Int32 = Option<Int32>.None
let var4188 : ?Array<Int32> = Option<Array<Int32>>.None
public var var4304 : Unit = ()
public var var4343 : Bool = false
public var var4346 : Array<Unit> = Array<Unit>(10){ i => () }


public interface Interface205 {
    func func1450(param1451 : Aggregate658, namedParam1452 ! : UInt16, namedParam1453 ! : Array<Option<Unit>>, namedParam1454 ! : Range<Int64>) : Unit { // block id: 1455
        var1457;
        var loopTimeVar1474 : Int64 = 0;
        var var1481 : UInt32 = UInt32(79);
        let var1504 : ((Array<Range<UInt8>>, (Range<UInt16>, Unit, Int32)), Int8) = (([(UInt8(185)&127..UInt8(7)&127:(-60)|1), (UInt8(115)&127..UInt8(206)&127:63|1), (UInt8(48)&127..UInt8(116)&127:(-75)|1), (UInt8(236)&127..=UInt8(7)&127:96|1), (UInt8(174)&127..UInt8(106)&127:(-24)|1), (UInt8(95)&127..=UInt8(96)&127:2|1), (UInt8(47)&127..UInt8(238)&127:40|1), (UInt8(6)&127..UInt8(16)&127:(-28)|1), (UInt8(9)&127..UInt8(128)&127:(-34)|1), (UInt8(37)&127..=UInt8(209)&127:56|1)], ((UInt16(228)&127..UInt16(189)&127:(42|1)), (), Int32(Int32(117)))), Int8(-21));
        if ((while ((var318) && loopTimeVar1474 < 100 ) {
            loopTimeVar1474++;
            ();
            var var1467 : Int32 = Int32(Int16(UInt8(Int8(49))));
            var1467 ^= Int32(-78)
        } is Rune)) { // block id: 1475
            if (true) { (UInt32(105)&127..UInt32(181)&127:65|1) } else { (var1481&127..var1481&127:(82|1)) } ;
            if (false) { // block id: 1487
                var222;
                ()
            } else if (true) { // block id: 1491
                ();
                var1495 <<= ((Int32(-33)) & 7)
            }
        } else if (((false as Bool) ?? match (var1504) {
            case caseVar1519 : Enum264 => 
                ();
                false
            
            case ((caseVar1525 : Option<Bool>,(caseVar1526 : (UInt32, Range<Int8>, Range<UInt64>),_,_)),caseVar1527 : Int16) => 
                if (var318) { var1504 } else { var1504 } ;
                var318
            
            case caseVar1536 : Int64 => 
                false
            
            case _ : Option<Option<Unit>> => 
                ([(UInt8(23)&127..=UInt8(137)&127:(-118)|1), (UInt8(15)&127..UInt8(83)&127:27|1), (UInt8(6)&127..=UInt8(53)&127:(-101)|1), (UInt8(192)&127..UInt8(184)&127:(-41)|1), (UInt8(135)&127..UInt8(147)&127:(-107)|1), (UInt8(246)&127..=UInt8(75)&127:4|1), (UInt8(200)&127..=UInt8(18)&127:(-12)|1), (UInt8(44)&127..UInt8(102)&127:7|1), (UInt8(206)&127..UInt8(100)&127:(-81)|1), (UInt8(15)&127..UInt8(128)&127:12|1)], (var279, var796, var225));
                var1550 *= var1550;
                true
            
            case _ => 
                var318 ||= true;
                true
            
        })) { // block id: 1560
            var loopTimeVar1565 : Int64 = 0;
            while ((var318) && loopTimeVar1565 < 100 ) {
                loopTimeVar1565++;

            }
        };
        let var1581 : Array<Int8> = [Int8(34), Int8(103), Int8(0), Int8(UInt8(241)), Int8(-119), Int8(-105), Int8(Int8(Int8(-73))), Int8(UInt8(Int8(UInt8(99)))), Int8(Int8(UInt8(156))), Int8(-81)];
        func1762((var1578 ?? var1581))[5]
    }

}

public interface Interface204 <: Interface205 {
    func func3898(param3899 : Array<Int8>) : Bool { // block id: 3900
        Option<(Range<UInt16>, Unit, Int32)>.Some((if (var2849) { (var1707&127..=var3053&127:(var93|1)) } else { (UInt16(251)&127..=UInt16(70)&127:(-64)|1) } , (var740 ?? ()), Int32(-33)));
        let var3921 : ?String = (UInt8(154) as String);
        match ([44.0, 57.0, 71.0, (-86.0), (-95.0), 81.0, 96.0, (-91.0), (-78.0), 80.0]) {
            case caseVar3918 => 
                var3921;
                var3053--;
                let var3927 : Bool = (([(), (), (), (), (), (), (), (), (), ()] as Range<Int64>) is (Array<Option<Unit>>, Range<UInt8>) -> Unit);
                var3927
            
            case _ => 
                var826;
                ();
                var2452 || false
            
            case caseVar3951 : ((Range<Int16>, Range<UInt32>, Int8, UInt8, Range<Int32>), Unit, Option<Range<UInt8>>, (UInt32, Range<Int8>, Range<UInt64>)) => 
                var var3954 : Option<Unit> = (((UInt16(251)&127..UInt16(190)&127:(-113)|1), (), Int32(UInt16(81))) as Unit);
                var3954;
                var222;
                var593 == UInt64(199)
            
            case caseVar3967 : Option<Int32> => 
                var796;
                !false
            
            case _ => 
                true
            
        }
    }

}

public open class Class201 <: Interface204 & Interface205 & Resource {
    public init() { // block id: 203

    }
;
    public let var1066 : UInt32 = UInt32(100);
    public var var1216 : UInt32 = UInt32(168);
    static var var1604 : UInt16 = UInt16(174);
    public init(namedParam1385 ! : Range<UInt16>, optionalParam1386 ! : (Array<Range<UInt8>>, (Range<UInt16>, Unit, Int32)) = ([(UInt8(89)&127..UInt8(118)&127:(-104)|1), (UInt8(239)&127..UInt8(132)&127:11|1), (UInt8(UInt8(103))&127..=UInt8(UInt8(84))&127:(18|1)), (UInt8(Int8(-71))&127..=UInt8(Int8(5))&127:(73|1)), (UInt8(45)&127..UInt8(87)&127:9|1), (UInt8(Int8(56))&127..UInt8(Int8(122))&127:(119|1)), (UInt8(UInt8(62))&127..UInt8(183)&127:(Int64((-24))|1)), (UInt8(66)&127..UInt8(Int8(13))&127:((-46)|1)), (UInt8(233)&127..UInt8(228)&127:96|1), (UInt8(UInt8(73))&127..UInt8(Int8(-36))&127:(125|1))], ((UInt16(193)&127..=UInt16(181)&127:43|1), (), Int32(Int32(UInt8(39))))), optionalParam1434 ! : String = "|\\Ahi(R+^W") { // block id: 1436
        try { // block id: 1438
            ((var225&127..=var225&127:(var186|1)) as Bool)
        } catch (e: Exception) { // block id: 1444
            var var1447 : Interface204 = Class201();
            var1447.func1450(Aggregate658(), namedParam1452 : var1604, namedParam1453 : [Option<Unit>.None, var740, var740, var740, var740, var740, var740, Option<Unit>.None, Option<Unit>.Some(var222), var740], namedParam1454 : (27&127..100&127:(-77)|1));
            Option<Bool>.Some(true)
        } finally { // block id: 1621
            try { // block id: 1623
                if (false) { var1032 } else { Option<Bool>.Some(false) } 
            } finally { // block id: 1629
                ();
                if (var318) { Option<Bool>.None } else { Option<Bool>.Some(var318) } 
            }
        };
        (Option<Array<Int32>>.None ?? match ([(UInt16(154)&127..var1604&127:(var93|1)), namedParam1385, (UInt16(70)&127..=UInt16(40)&127:(-42)|1), (var1604&127..UInt16(99)&127:(var1656|1)), (UInt16(200)&127..=UInt16(60)&127:73|1), (UInt16(187)&127..=UInt16(143)&127:(30|1)), var279, (UInt16(193)&127..=var1604&127:((-19)|1)), var279, namedParam1385][1]) {
            case _ => 
                [Int32(56), Int32(105), Int32(53), Int32(-60), Int32(109), Int32(-79), Int32(-93), Int32(-101), Int32(-25), Int32(96)]
            
        });
        var var1687 : (Range<UInt8>) -> Unit = { lambdaParameter1690 : Range<UInt8> => () };
        var loopTimeVar1694 : Range<UInt64> = (UInt64(UInt16(115))&127..UInt64(UInt8(UInt8(UInt8(218))))&127:(Int64(Int64(UInt8(240)))|1));
        for (i in loopTimeVar1694 where (var1687|>func1677)) {

        }
    }
;
    public static func func208(param209 : Array<Option<Unit>>, namedParam210 ! : Range<UInt8>, optionalParam211 ! : Interface204 = Class201(), namedParam213 ! : Option<Range<UInt32>>) : Bool { // block id: 214
        try { // block id: 218
            ((UInt16(241)&127..=UInt16(249)&127:(-109)|1), var222, var225)
        } finally { // block id: 227
            ((UInt16(121)&127..UInt16(87)&127:(-3)|1), var222, Int32(34))
        }[1];
        let var3886 : Range<UInt16> = (UInt16(76)&127..UInt16(186)&127:108|1);
        func func236(param237 : Range<Int32>) : Class201 { // block id: 238
            var102;
            try { // block id: 3879
                if (true) { var3576 } else { var3576 } ;
                var var3889 : Unit = ();
                (var3886, var3889, var225);
                (-6.0)
            } finally { // block id: 3893
                [(), (), (), (), (), (), (), (), (), ()];
                89.0
            }|>func241
        }
;
        (func236((Int32(119)&127..=Int32(120)&127:12|1)).func3898(var3976)) && var2452
    }
;
    public func func1450(param1451 : Aggregate658, namedParam1452 ! : UInt16, namedParam1453 ! : Array<Option<Unit>>, namedParam1454 ! : Range<Int64>) : Unit { // block id: 1455
        var1457;
        var loopTimeVar1474 : Int64 = 0;
        var var1481 : UInt32 = UInt32(79);
        let var1504 : ((Array<Range<UInt8>>, (Range<UInt16>, Unit, Int32)), Int8) = (([(UInt8(185)&127..UInt8(7)&127:(-60)|1), (UInt8(115)&127..UInt8(206)&127:63|1), (UInt8(48)&127..UInt8(116)&127:(-75)|1), (UInt8(236)&127..=UInt8(7)&127:96|1), (UInt8(174)&127..UInt8(106)&127:(-24)|1), (UInt8(95)&127..=UInt8(96)&127:2|1), (UInt8(47)&127..UInt8(238)&127:40|1), (UInt8(6)&127..UInt8(16)&127:(-28)|1), (UInt8(9)&127..UInt8(128)&127:(-34)|1), (UInt8(37)&127..=UInt8(209)&127:56|1)], ((UInt16(228)&127..UInt16(189)&127:(42|1)), (), Int32(Int32(117)))), Int8(-21));
        if ((while ((var318) && loopTimeVar1474 < 100 ) {
            loopTimeVar1474++;
            ();
            var var1467 : Int32 = Int32(Int16(UInt8(Int8(49))));
            var1467 ^= Int32(-78)
        } is Rune)) { // block id: 1475
            if (true) { (UInt32(105)&127..UInt32(181)&127:65|1) } else { (var1481&127..var1481&127:(82|1)) } ;
            if (false) { // block id: 1487
                var222;
                ()
            } else if (true) { // block id: 1491
                ();
                var1495 <<= ((Int32(-33)) & 7)
            }
        } else if (((false as Bool) ?? match (var1504) {
            case caseVar1519 : Enum264 => 
                ();
                false
            
            case ((caseVar1525 : Option<Bool>,(caseVar1526 : (UInt32, Range<Int8>, Range<UInt64>),_,_)),caseVar1527 : Int16) => 
                if (var318) { var1504 } else { var1504 } ;
                var318
            
            case caseVar1536 : Int64 => 
                false
            
            case _ : Option<Option<Unit>> => 
                ([(UInt8(23)&127..=UInt8(137)&127:(-118)|1), (UInt8(15)&127..UInt8(83)&127:27|1), (UInt8(6)&127..=UInt8(53)&127:(-101)|1), (UInt8(192)&127..UInt8(184)&127:(-41)|1), (UInt8(135)&127..UInt8(147)&127:(-107)|1), (UInt8(246)&127..=UInt8(75)&127:4|1), (UInt8(200)&127..=UInt8(18)&127:(-12)|1), (UInt8(44)&127..UInt8(102)&127:7|1), (UInt8(206)&127..UInt8(100)&127:(-81)|1), (UInt8(15)&127..UInt8(128)&127:12|1)], (var279, var796, var225));
                var1550 *= var1550;
                true
            
            case _ => 
                var318 ||= true;
                true
            
        })) { // block id: 1560
            var loopTimeVar1565 : Int64 = 0;
            while ((var318) && loopTimeVar1565 < 100 ) {
                loopTimeVar1565++;

            }
        };
        let var1581 : Array<Int8> = [Int8(34), Int8(103), Int8(0), Int8(UInt8(241)), Int8(-119), Int8(-105), Int8(Int8(Int8(-73))), Int8(UInt8(Int8(UInt8(99)))), Int8(Int8(UInt8(156))), Int8(-81)];
        func1762((var1578 ?? var1581))[5]
    }

    public func isClosed(): Bool { return false }
    public func close(): Unit {}
}

public enum Enum264 {
    defaultValue |
    enumValue267(Range<Int32>, Int16, Range<UInt16>, Bool)
}
public func func251(param252 : UInt64) : Option<Unit> { // block id: 253
    var var258 : UInt32 = UInt32(UInt8(Int8(113)));
    let var273 : Range<Int32> = (Int32(-121)&127..=Int32(-32)&127:48|1);
    let var276 : Int16 = Int16(-43);
    let var282 : Bool = true;
    var var291 : ?Unit = ((Int8(UInt8(Int8(-20)))&127..=Int8(UInt8(UInt8(153)))&127:(Int64(UInt16(UInt16(16)))|1)) as Unit);
    if (((var258++) is Range<Int8>)) { (match (Enum264.enumValue267(var273, var276, var279, var282)) {
        case _ => 
            (UInt8(243)&127..UInt8(173)&127:((-32)|1))
        
    } as Unit) } else { var291 } 
}




public struct Aggregate658 {
    public init() { // block id: 660

    }
;
    public static let var663 : Rune = 'b'
}



func func802(param803 : Int64) : Range<UInt8> { // block id: 804
    let var831 : Array<Range<UInt8>> = Array<Range<UInt8>>(10){ i => (UInt8(64)&127..=UInt8(88)&127:(-65)|1) };
    var var864 : Range<UInt8> = (UInt8(204)&127..UInt8(56)&127:((-29)|1));
    match ((var814 ?? (var93&127..var93&127:((-96)|1)))) {
        case _ => 
            "a{X8zz0o99\"";
            var826;
            if (var318) { var831 } else { [var864, (var109&127..UInt8(55)&127:(var186|1)), var864, (UInt8(165)&127..UInt8(40)&127:15|1), (UInt8(93)&127..UInt8(20)&127:(-62)|1), var864, (UInt8(93)&127..UInt8(84)&127:109|1), (UInt8(248)&127..=UInt8(56)&127:95|1), var864, (UInt8(37)&127..UInt8(184)&127:(-23)|1)] } 
        
        case _ => 
            var864;
            (UInt32(226), (Int8(109)&127..Int8(111)&127:(-99)|1), (var593&127..UInt64(3)&127:(48|1)));
            [(UInt8(100)&127..UInt8(23)&127:84|1), (UInt8(53)&127..=UInt8(54)&127:(-50)|1), (UInt8(254)&127..=UInt8(53)&127:0|1), (UInt8(183)&127..=UInt8(234)&127:(-30)|1), (UInt8(85)&127..UInt8(76)&127:51|1), (UInt8(151)&127..UInt8(12)&127:(-30)|1), (UInt8(92)&127..=UInt8(37)&127:(-35)|1), (UInt8(247)&127..UInt8(206)&127:90|1), (UInt8(91)&127..=UInt8(143)&127:119|1), (UInt8(14)&127..UInt8(36)&127:(-98)|1)]
        
    }[3]
}

public enum Enum936<T0, T1> where T0 <: Range<Int64>, T1 <: Option<Unit> {
    defaultValue
}
func func894(param895 : UInt32) : Range<UInt8> { // block id: 896
    var var904 : Int32 = Int32(UInt32(16));
    let var960 : UInt8 = UInt8(Int8(-25));
    try { // block id: 898
        var loopTimeVar912 : Range<UInt64> = (UInt64(UInt64(Int32(100)))&127..UInt64(247)&127:(76|1));
        for (i in loopTimeVar912 where false) {
            var904--;
            var var909 : UInt32 = UInt32(157);
            var909 &= param895
        };
        UInt8(158) << ((UInt8(53)) & 7);
        11|>func802
    } catch (e: Exception) { // block id: 925
        var loopTimeVar934 : Int64 = 0;
        do {
            loopTimeVar934++;
            ();
            var318 &&= var318
        } while ((var318) && loopTimeVar934 < 100 ) ;
        let var939 : Enum936<Range<Int64>, Option<Unit>> = Enum936<Range<Int64>, Option<Unit>>.defaultValue;
        match (var939) {
            case _ => 
                var222
            
            case _ => 
                ();
                var796
            
        };
        try { // block id: 950
            var826;
            (var109&127..=UInt8(50)&127:(37|1))
        } catch (e: Exception) { // block id: 956
            (UInt8(79)&127..var960&127:(var93|1))
        } finally { // block id: 964
            var966;
            (UInt8(219)&127..=UInt8(89)&127:(var93|1))
        }
    } finally { // block id: 998
        ((Int8(17)&127..=Int8(6)&127:12|1), Int32(-84), 'D', (UInt8(89)&127..=UInt8(140)&127:(117|1)), var225)[3]
    }
}

public func func1024(param1025 : Int64) : UInt32 { // block id: 1026
    ();
    let var1042 : UInt32 = UInt32(UInt16(208));
    (match (var1032) {
        case _ : Array<Option<Unit>> => 
            ();
            var1042
        
        case _ : Range<Int16> => 
            var1049;
            var222;
            var1042
        
        case caseVar1055 => 
            UInt32(50)
        
        case _ => 
            UInt32(133)
        
    } / (((var1063.var1066)) | 1)) % ((UInt32(try { // block id: 1070
        var222;
        (Int32(-46)&127..=Int32(-41)&127:(-54)|1);
        UInt8(19) - var109
    } catch (e: Exception) { // block id: 1076
        ();
        var318 &&= true;
        var109 >> ((var109) & 7)
    } finally { // block id: 1084
        ();
        var222;
        UInt8(200) & var109
    })) | 1)
}

public func func1193(param1194 : Range<UInt8>) : Unit { // block id: 1195

}

public func func1762(param1569 : Array<Int8>) : Array<Unit> { // block id: 1570
    [(), (), (), (), (), (), (), (), (), ()]
}



func func1677(param1678 : (Range<UInt8>) -> Unit) : Bool { // block id: 1681
    var318
}

public func func1684(param1194 : Range<UInt8>) : Unit { // block id: 1195

}

func func1857(param1858 : Range<Int64>) : UInt64 { // block id: 1859
    var var1867 : (Int32, Interface205, Range<Int8>, (Range<UInt16>, Unit, Int32), Range<UInt64>, (Range<UInt16>, Unit, Int32)) = (Int32(-25), Class201(), (Int8(112)&127..Int8(74)&127:92|1), ((UInt16(142)&127..UInt16(123)&127:(-55)|1), (), Int32(-72)), (UInt64(181)&127..UInt64(104)&127:26|1), ((UInt16(124)&127..=UInt16(62)&127:77|1), (), Int32(Int32(87))));
    func1684(try { // block id: 1862
        var1864;
        var1867;
        (UInt8(7)&127..=UInt8(31)&127:(-121)|1)
    } finally { // block id: 1883
        if (false) { (UInt8(97)&127..var109&127:(var186|1)) } else { (UInt8(112)&127..=UInt8(161)&127:87|1) } 
    });
    var826;
    match (var1867) {
        case caseVar1896 => 
            ();
            UInt64(185) | var593
        
        case _ => 
            if (true) { (var1495&127..=Int32(-65)&127:(73|1)) } else { var1911 } ;
            ();
            UInt64(150)
        
    }
}

func func1853(param1854 : Enum936<Range<Int64>, Option<Unit>>) : UInt64 { // block id: 1855
    try { // block id: 1954
        var var1957 : Int16 = Int16(-6);
        let var1960 : Int16 = Int16(Int16(0));
        var1957 = var1960;
        (91&127..(-35)&127:(-63)|1)
    } catch (e: Exception) { // block id: 1964
        ((-19)&127..89&127:(-55)|1);
        var var1968 : Int16 = Int16(30);
        var1968 %= ((var456) | 1);
        (var186&127..=(-63)&127:((-71)|1))
    }|>{ lambdaParameter1917 : Range<Int64> => match (if (var318) { var1864 } else { var1864 } ) {
        case caseVar1932 : Class201 => 
            var1550;
            (var1495&127..=var225&127:(var186|1));
            if (false) { (106&127..=(-51)&127:(-16)|1) } else { lambdaParameter1917 } 
        
        case _ => 
            (UInt8(198)&127..UInt8(139)&127:(-124)|1);
            if (var318) { (var1656&127..=98&127:(10|1)) } else { (44&127..=(-77)&127:88|1) } 
        
    }|>{ lambdaParameter1922 : Range<Int64> => UInt64(82) } }
}

public func func1840(param1841 : Range<Int32>) : Range<Int8> { // block id: 1842
    var1844;
    var var2017 : (Range<Int8>, Int32, Rune, Range<UInt8>, Int32) = ((Int8(UInt8(74))&127..Int8(74)&127:(Int64(Int8(-119))|1)), Int32(-65), 'T', (UInt8(50)&127..UInt8(172)&127:((-9)|1)), Int32(UInt8(UInt8(120))));
    match (((var1457|>func1853)&127..match ('1') {
            case caseVar1981 : Array<Option<Unit>> => 
                var826;
                var var1986 : Int16 = Int16(Int8(44));
                var1986 -= Int16(54);
                UInt64(197)
            
            case '6' => 
                var1995;
                var var2000 : UInt8 = UInt8(101);
                var1188 /= ((var2000) | 1);
                UInt64(89)
            
            case _ => 
                UInt64(146)
            
            case _ => 
                var826;
                var593
            
            case _ => 
                UInt64(147)
            
        }&127:(match (var2017) {
            case _ => 
                ();
                Option<Option<Bool>>.None;
                107
            
        }|1))) {
        case caseVar2041 => 
            (Int8(-63)&127..=var102&127:(var1656|1))
        
        case caseVar2049 => 
            var161;
            var2053
        
        case _ : (Range<UInt16>, Unit, Int32) => 
            (var1911, """
D/j\\.
L~Zl%
""", Option<Range<UInt32>>.None);
            (Int8(32)&127..=Int8(7)&127:(-27)|1)
        
        case _ => 
            ();
            var2076++;
            if (true) { (Int8(31)&127..var102&127:((-70)|1)) } else { (Int8(119)&127..Int8(15)&127:76|1) } 
        
        case _ => 
            var222;
            (Int8(-88)&127..=Int8(38)&127:(-82)|1)
        
    }
}



public func func2090(param2091 : String) : Range<Int8> { // block id: 2092
    var var2102 : UInt64 = UInt64(120);
    var loopTimeVar2121 : Int64 = 0;
    do {
        loopTimeVar2121++;
        var loopTimeVar2115 : Range<UInt64> = (UInt64(70)&127..=UInt64(4)&127:(22|1));
        for (i in loopTimeVar2115 where var318) {

        }
    } while ((match {
        case true || false => 
        var814;
        var2102--;
        var318
        case _ => 
        var1188 += UInt8(195);
        var222;
        var318
    }) && loopTimeVar2121 < 100 ) ;
    func func2123(param2124 : Range<UInt16>, param2125 : Array<Range<UInt8>>) : Int32 { // block id: 2126
        let var2129 : UInt16 = UInt16(UInt8(Int8(-36)));
        Int32(var2129)
    }
;
    func2123(match ((var2140 ?? """
6}8pO
nA7]|
""")) {
        case "fn?_.VV_EE" => 
            (UInt16(45)&127..UInt16(198)&127:(-48)|1)
        
        case """
bc\\7^
%<XJ(
""" => 
            [Int32(-85), Int32(-118), var225, var225, Int32(68), Int32(16), var1495, var1495, Int32(-96), Int32(96)];
            var1550 ** Float64(Int32(var1550) & 3);
            if (var318) { (UInt16(25)&127..=UInt16(127)&127:(var93|1)) } else { (var1707&127..var1707&127:(27|1)) } 
        
        case _ => 
            var1911;
            (UInt16(234)&127..=var1707&127:(var93|1))
        
    }, (try { // block id: 2187
        var796;
        Option<Array<Range<UInt8>>>.None
    } finally { // block id: 2190
        var796;
        let var2193 : ?Array<Range<UInt8>> = ((UInt16(85) as Range<Int64>) as Array<Range<UInt8>>);
        var2193
    } ?? [(UInt8(155)&127..=UInt8(192)&127:24|1), (UInt8(218)&127..UInt8(42)&127:3|1), (UInt8(17)&127..=UInt8(16)&127:38|1), (UInt8(116)&127..UInt8(228)&127:33|1), (UInt8(228)&127..=UInt8(224)&127:105|1), (UInt8(248)&127..UInt8(165)&127:(-28)|1), (UInt8(112)&127..UInt8(252)&127:(-59)|1), (UInt8(177)&127..UInt8(166)&127:48|1), (UInt8(207)&127..UInt8(240)&127:39|1), (UInt8(134)&127..UInt8(69)&127:74|1)]));
    (Int8(-31)&127..=Int8(-1)&127:(-87)|1)
}

public func func2202(param2203 : Range<Int32>) : String { // block id: 2204
    try { // block id: 2206
        let var2209 : ?String = (Float32(8.0) as String);
        (var2209 ?? var1995)
    } catch (_) { // block id: 2213
        var var2216 : Float32 = Float32(Float32(Float32(Float32(Float32(-124.0)))));
        var2216 *= var2216;
        "iEe|OX~[}@"
    }
}


func func1806<T0>(optionalParam1807 ! : (UInt32, Range<Int8>, Range<UInt64>) = (UInt32(UInt16(196)), (Int8(86)&127..Int8(47)&127:122|1), (UInt64(30)&127..UInt64(186)&127:88|1)), optionalParam1813 ! : (Range<UInt16>, Unit, Int32) = ((UInt16(187)&127..UInt16(59)&127:((-34)|1)), (), Int32(Int32(UInt16(146)))), optionalParam1823 ! : (UInt64) -> Option<Unit> = func251, optionalParam1827 ! : (UInt32, Range<Int8>, Range<UInt64>) = (UInt32(71), (Int8(Int8(UInt8(201)))&127..Int8(-51)&127:(Int64(UInt64(73))|1)), (UInt64(200)&127..UInt64(195)&127:(-22)|1))) : Range<Int8> { // block id: 1838
    var var2200 : (String) -> Range<Int8> = func2090;
    var var2225 : (Range<Int32>) -> String = func2202;
    let var2235 : Option<Range<Int32>> = Option<Range<Int32>>.Some((Int32(-40)&127..=Int32(Int16(70))&127:(94|1)));
    (if (var318) { var2235 } else { Option<Range<Int32>>.None }  ?? var1911)|>(var2225~>var2200)
}


func func1762(param1763 : Option<Array<Int32>>) : Range<Int8> { // block id: 1764
    let var2302 : ?Unit = Option<Unit>.Some(());
    var var2311 : ?Unit = ((((UInt32(42)&127..=UInt32(185)&127:(-9)|1), 'M', UInt64(UInt16(210)), (), Int16(15), (Int32(48)&127..Int32(-40)&127:((-103)|1)), 'e') as Range<UInt32>) as Unit);
    try { // block id: 1766
        var var1770 : Array<Float64> = Array<Float64>(10){ i => Float64(Float32(-2.0)) };
        var1770[8];
        if (var318) { // block id: 1797
            Option<Option<Bool>>.None;
            ()
        } else if (var318) { // block id: 1801
            var826;
            [(UInt8(248)&127..=UInt8(174)&127:(-17)|1), (UInt8(246)&127..UInt8(24)&127:(-82)|1), (UInt8(166)&127..=UInt8(58)&127:66|1), (UInt8(147)&127..UInt8(205)&127:(-2)|1), (UInt8(170)&127..=UInt8(9)&127:76|1), (UInt8(68)&127..=UInt8(250)&127:121|1), (UInt8(42)&127..UInt8(227)&127:(-61)|1), (UInt8(209)&127..=UInt8(12)&127:71|1), (UInt8(173)&127..UInt8(159)&127:(-98)|1), (UInt8(235)&127..=UInt8(87)&127:100|1)];
            var222
        };
        var var2249 : (UInt64) -> Option<Unit> = func251;
        func1806<Range<Int8>>(optionalParam1807 : (UInt32(221), var2053, var769), optionalParam1823 : var2249)
    } finally { // block id: 2251
        match (true) {
            case _ => 
                var1707 << ((var1707) & 7);
                ();
                ()
            
        };
        var var2279 : String = """
^uj'x
nDAIu
""";
        let var2288 : Bool = ((Class201() as String) is Array<Int8>);
        match (var2263) {
            case caseVar2267 => 
                var826
            
            case _ : Rune => 
                var826
            
            case _ => 
                var2279 = " /l|3@M=RN"
            
            case _ => 
                UInt16(35);
                if (var2288) { [Option<Unit>.None, var740, Option<Unit>.Some(var826), var740, Option<Unit>.Some(()), var740, var2302, var740, Option<Unit>.Some(var222), Option<Unit>.None] } else { [var2311, var740, var2311, var740, Option<Unit>.Some(var826), Option<Unit>.None, var2311, Option<Unit>.Some(var222), Option<Unit>.Some(()), var740] } ;
                var222
            
            case _ => 
                ()
            
        };
        (Option<Range<Int8>>.None ?? (var102&127..=var102&127:(var93|1)))
    }
}





public func func1092(param1093 : (UInt64) -> Option<Unit>) : Int64 { // block id: 1096
    let var1201 : (Range<UInt8>) -> Unit = { lambdaParameter1204 : Range<UInt8> =>  };
    func func1335(namedParam1336 ! : Option<Bool>, optionalParam1337 ! : Range<UInt64> = (UInt64(UInt8(55))&127..UInt64(UInt32(39))&127:(Int64(Int64(UInt16(Int8(-64))))|1)), optionalParam1347 ! : Option<Range<UInt8>> = (((-74)&127..22&127:(-29)|1) as Range<UInt8>)) : Class201 { // block id: 1350
        Class201()
    }
;
    let var1741 : (Range<UInt16>, Unit, Int32) = ((UInt16(Int8(9))&127..UInt16(151)&127:(Int64(UInt16(202))|1)), (), Int32(Int16(UInt16(236))));
    let var2437 : Range<Int8> = (Int8(UInt8(Int8(-6)))&127..Int8(30)&127:(Int64(UInt8(142))|1));
    func func1158(param1159 : Option<Option<Unit>>, param1160 : Range<Int16>) : String { // block id: 1161
        func func1288(param1289 : Interface205, param1290 : Range<Int8>) : Class201 { // block id: 1291
            try { // block id: 1296
                var var1298 : (Unit, Int8, Range<Int8>, Rune, Range<UInt8>, Int32) = ((), Int8(8), (Int8(Int8(UInt8(250)))&127..=Int8(UInt8(Int8(-22)))&127:(Int64(Int16(-86))|1)), 'x', (UInt8(Int8(-3))&127..UInt8(UInt8(UInt8(159)))&127:((-62)|1)), Int32(UInt8(Int8(UInt8(152)))));
                var1298;
                var318 ||= var318;
                if (true) { [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]] } else { [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]] } 
            } catch (_) { // block id: 1330
                [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]]
            }[3][5];
            let var1354 : ((Array<Range<UInt8>>, (Range<UInt16>, Unit, Int32)), Int8) = (([(UInt8(142)&127..=UInt8(168)&127:(-123)|1), (UInt8(227)&127..UInt8(228)&127:42|1), (UInt8(84)&127..UInt8(214)&127:89|1), (UInt8(85)&127..UInt8(144)&127:(-58)|1), (UInt8(163)&127..UInt8(212)&127:80|1), (UInt8(100)&127..=UInt8(121)&127:(-25)|1), (UInt8(108)&127..=UInt8(105)&127:(-40)|1), (UInt8(222)&127..UInt8(167)&127:110|1), (UInt8(116)&127..=UInt8(95)&127:41|1), (UInt8(49)&127..UInt8(238)&127:103|1)], ((UInt16(19)&127..UInt16(100)&127:((-59)|1)), (), Int32(UInt8(248)))), Int8(Int8(115)));
            func1335(namedParam1336 : match (var1354) {
                case _ => 
                    if (var318) { Option<Bool>.Some(var318) } else { Option<Bool>.None } 
                
            }, optionalParam1337 : (UInt64(9)&127..=UInt64(250)&127:(-23)|1))
        }
;
        let var1719 : UInt8 = UInt8(UInt8(Int8(UInt8(UInt8(163)))));
        var loopTimeVar2578 : Int64 = 0;
        do {
            loopTimeVar2578++;
            let var1732 : UInt8 = UInt8(125);
            let var2504 : Bool = false;
            func func1180(param1181 : Array<Option<Unit>>, param1182 : Range<UInt8>) : Unit { // block id: 1183
                try (resource = Class201()) { // block id: 1185
                    (var1188&127..=var1188&127:(var93|1));
                    (UInt8(138)&127..=UInt8(45)&127:(-48)|1)|>func1193
                } finally { // block id: 1198
                    let var1208 : UInt8 = UInt8(47);
                    (var1208&127..UInt8(190)&127:(var186|1))|>var1201
                };
                var1063.var1216--;
                func func1220(optionalParam1221 ! : UInt64 = UInt64(UInt32(UInt32(Int32(-39)))), optionalParam1226 ! : (Range<UInt8>) -> Unit = func1193, namedParam1230 ! : Aggregate658, optionalParam1231 ! : Option<Option<Unit>> = ([Option<Unit>.Some(()), Option<Unit>.Some(()), Option<Unit>.None, Option<Unit>.Some(()), (() as Unit), Option<Unit>.Some(()), ((((Int16(56)&127..Int16(53)&127:((-101)|1)), (UInt32(195)&127..UInt32(231)&127:(6|1)), Int8(-62), UInt8(8), (Int32(-111)&127..Int32(120)&127:((-74)|1))), (), Option<Range<UInt8>>.None, (UInt32(21), (Int8(-60)&127..=Int8(-9)&127:(-91)|1), (UInt64(238)&127..=UInt64(139)&127:(29|1)))) as Unit), Option<Unit>.None, ((UInt32(149), (Int8(-92)&127..Int8(71)&127:19|1), (UInt64(201)&127..UInt64(89)&127:108|1)) as Unit), ((([(UInt8(7)&127..=UInt8(190)&127:(-34)|1), (UInt8(163)&127..UInt8(203)&127:68|1), (UInt8(74)&127..=UInt8(14)&127:0|1), (UInt8(226)&127..=UInt8(230)&127:108|1), (UInt8(189)&127..=UInt8(162)&127:(-43)|1), (UInt8(105)&127..UInt8(33)&127:12|1), (UInt8(24)&127..=UInt8(217)&127:(-43)|1), (UInt8(56)&127..=UInt8(44)&127:110|1), (UInt8(18)&127..=UInt8(122)&127:25|1), (UInt8(207)&127..=UInt8(249)&127:125|1)], ((UInt16(237)&127..=UInt16(79)&127:(-81)|1), (), Int32(-122))), Int8(65)) as Unit)] as Option<Unit>)) : Class201 { // block id: 1286
                    let var2354 : ?Array<Int32> = ("uCo7BP!P^S" as Array<Int32>);
                    var var2360 : UInt64 = UInt64(Int64(55));
                    func1288(func1288(try { // block id: 1378
                        (var1188&127..=var1188&127:(var93|1));
                        Class201(namedParam1385 : (var1707&127..=UInt16(230)&127:(var1656|1)), optionalParam1386 : ([(UInt8(51)&127..UInt8(57)&127:(-109)|1), param1182, (UInt8(36)&127..UInt8(172)&127:105|1), (var1188&127..var1719&127:(87|1)), (var109&127..var1188&127:(117|1)), (var1732&127..var1188&127:((-71)|1)), param1182, param1182, (UInt8(102)&127..=UInt8(35)&127:(-33)|1), param1182], var1741))
                    } finally { // block id: 1753
                        var1707 << ((UInt16(71)) & 7);
                        var796;
                        Class201(namedParam1385 : var279, optionalParam1434 : "o|8WIY9]!G")
                    }, (var2354|>func1762)), match ((var2360 &= optionalParam1221)) {
                        case caseVar2367 => 
                            if (var318) { Option<Option<Bool>>.None } else { Option<Option<Bool>>.None } ;
                            var var2376 : (Int32, Interface205, Range<Int8>, (Range<UInt16>, Unit, Int32), Range<UInt64>, (Range<UInt16>, Unit, Int32)) = (Int32(-128), Class201(namedParam1385 : (UInt16(Int16(-13))&127..UInt16(99)&127:(64|1))), (Int8(74)&127..=Int8(84)&127:29|1), ((UInt16(197)&127..UInt16(155)&127:94|1), (), Int32(47)), (UInt64(UInt16(33))&127..=UInt64(UInt64(30))&127:((-76)|1)), ((UInt16(236)&127..UInt16(177)&127:75|1), (), Int32(Int8(UInt8(40)))));
                            if (var318) { var2376 } else { var2376 } ;
                            if (var318) { (var102&127..Int8(109)&127:((-74)|1)) } else { (var102&127..Int8(34)&127:((-88)|1)) } 
                        
                        case caseVar2415 => 
                            if (true) { var2053 } else { var2053 } 
                        
                        case caseVar2423 => 
                            var2427 &= var2427;
                            (Int8(40)&127..Int8(39)&127:(-99)|1)
                        
                        case _ => 
                            ();
                            var2354;
                            var2437
                        
                        case _ => 
                            var186 <<= ((var1656) & 7);
                            if (var2452) { (var102&127..=Int8(-7)&127:(var1656|1)) } else { (Int8(42)&127..=Int8(5)&127:39|1) } 
                        
                    })
                }
;
                var var2531 : ?Unit = ("""
'a+F 
rBwn|
""" as Unit);
                var var2546 : Int64 = 50;
                func1220(optionalParam1221 : try { // block id: 2460
                    ();
                    ();
                    var593 / ((var593) | 1)
                } catch (e: Exception) { // block id: 2466
                    var2469--;
                    var593
                } finally { // block id: 2472
                    ();
                    if (false) { ((var2427&127..=UInt32(151)&127:(81|1)), 'l', var593, (), Int16(-9), (Int32(47)&127..=var225&127:((-108)|1)), 'F') } else { var468 } ;
                    var2469
                }, optionalParam1226 : var1201, namedParam1230 : (Option<Aggregate658>.None ?? var2500), optionalParam1231 : (var2504 as Option<Unit>)).func1450(Aggregate658(), namedParam1452 : (var2514 ?? UInt16(218)), namedParam1453 : [Option<Unit>.None, var740, Option<Unit>.Some(var826), Option<Unit>.None, var740, var740, var2531, var2531, Option<Unit>.Some(()), var2531], namedParam1454 : match (var1707) {
                    case _ => 
                        (96&127..var186&127:(var2546|1))
                    
                })
            }
;
            func1180([Option<Unit>.Some(()), var740, Option<Unit>.Some(()), var740, var740, var740, var740, Option<Unit>.Some(()), var740, Option<Unit>.Some(var796)], (var1719&127..var1732&127:((-87)|1)));
            var loopTimeVar2570 : Range<UInt64> = (UInt64(148)&127..=UInt64(146)&127:(Int64(Int16(Int8(57)))|1));
            for (i in loopTimeVar2570 where true) {

            }
        } while ((([var102, var102, var102, Int8(-76), Int8(-68), Int8(-58), var102, var102, Int8(-28), Int8(34)][1] is (UInt32, Range<Int8>, Range<UInt64>))) && loopTimeVar2578 < 100 ) ;
        let var2585 : Bool = false;
        let var2707 : Range<UInt16> = (UInt16(42)&127..=UInt16(72)&127:((-94)|1));
        var var2715 : Range<UInt16> = (UInt16(Int16(UInt8(UInt8(197))))&127..=UInt16(Int8(Int8(UInt8(23))))&127:(Int64(Int8(-106))|1));
        match {
            case try { // block id: 2581
            false && var2585
        } finally { // block id: 2587
            var2452
        } => 
            if (true) { // block id: 2592
                var1995
            } else if (false) { // block id: 2595
                if (var318) { """
3s9%5
I3O$p
""" } else { var1995 } 
            } else { // block id: 2600
                let var2602 : String = "'5SnPCHpGK";
                var2602
            }
            case try { // block id: 2606
            var2608;
            Int16(59)
        } finally { // block id: 2647
            Option<Range<Int8>>.Some((Int8(-6)&127..Int8(-102)&127:11|1));
            ();
            Int16(-1)
        } >= (Int16(-123) ** (Int16(-29) & 3)) => 
            match ((var1707&127..=var1707&127:(var1656|1))) {
                case _ : Range<UInt64> => 
                    var1188 -= UInt8(213);
                    ###"&*shgq,/T,"###
                
                case caseVar2670 : (UInt32, Range<Int8>, Range<UInt64>) => 
                    ();
                    "j+U aKK!Nf"
                
                case _ => 
                    UInt16(145);
                    var1995
                
                case _ => 
                    var1995
                
            }
            case _ => 
            let var2759 : String = "ue}c94b3yK";
            try { // block id: 2684
                var796;
                ();
                """
v^=.5
Hx0By
"""
            } catch (e: Exception) { // block id: 2688
                ();
                let var2691 : Range<Int64> = (97&127..=100&127:88|1);
                var2691;
                "p^YI<4B32["
            } finally { // block id: 2694
                if (var318) { [(var1707&127..=var1707&127:(var1656|1)), var279, (UInt16(63)&127..=UInt16(171)&127:(-57)|1), var279, (UInt16(2)&127..=UInt16(4)&127:50|1), var2707, var2707, (UInt16(124)&127..UInt16(88)&127:63|1), var2715, (var1707&127..=UInt16(156)&127:(118|1))] } else { [var2707, (UInt16(135)&127..=UInt16(113)&127:(var186|1)), var2715, (UInt16(210)&127..UInt16(62)&127:(-118)|1), (var1707&127..var1707&127:(117|1)), (UInt16(244)&127..=UInt16(231)&127:53|1), (var1707&127..UInt16(102)&127:(var1656|1)), (UInt16(66)&127..=UInt16(108)&127:(-32)|1), (UInt16(181)&127..UInt16(30)&127:((-118)|1)), (UInt16(142)&127..=UInt16(81)&127:(-57)|1)] } ;
                Option<Aggregate658>.None;
                if (var2585) { """
i<.Zp
Ta{b[g
""" } else { var2759 } 
            }
        }
    }
;
    let var2800 : ?(Range<UInt32>, Rune, UInt64, Unit, Int16, Range<Int32>, Rune) = Option<(Range<UInt32>, Rune, UInt64, Unit, Int16, Range<Int32>, Rune)>.Some(((UInt32(88)&127..=UInt32(148)&127:0|1), 'l', UInt64(42), (), Int16(58), (Int32(UInt16(112))&127..Int32(-98)&127:(Int64(UInt64(237))|1)), 'w'));
    let var2832 : (Unit, Int8, Range<Int8>, Rune, Range<UInt8>, Int32) = ((), Int8(Int8(55)), (Int8(18)&127..Int8(80)&127:(-85)|1), 'R', (UInt8(Int8(UInt8(58)))&127..=UInt8(Int8(-72))&127:(78|1)), Int32(-82));
    let var2861 : Array<Range<UInt8>> = [(UInt8(190)&127..=UInt8(141)&127:47|1), (UInt8(55)&127..=UInt8(13)&127:(-106)|1), (UInt8(164)&127..UInt8(24)&127:89|1), (UInt8(24)&127..UInt8(243)&127:44|1), (UInt8(134)&127..UInt8(220)&127:(-96)|1), (UInt8(153)&127..UInt8(198)&127:(-97)|1), (UInt8(180)&127..=UInt8(82)&127:7|1), (UInt8(182)&127..=UInt8(222)&127:18|1), (UInt8(179)&127..UInt8(55)&127:103|1), (UInt8(82)&127..=UInt8(132)&127:95|1)];
    func func1098() : Unit { // block id: 1099
        var var1109 : ((Array<Range<UInt8>>, (Range<UInt16>, Unit, Int32)), Int8) = (([(UInt8(162)&127..=UInt8(123)&127:(-50)|1), (UInt8(160)&127..UInt8(118)&127:(-64)|1), (UInt8(34)&127..UInt8(161)&127:(-25)|1), (UInt8(65)&127..UInt8(239)&127:10|1), (UInt8(189)&127..UInt8(122)&127:(-73)|1), (UInt8(112)&127..=UInt8(82)&127:18|1), (UInt8(88)&127..=UInt8(161)&127:(-70)|1), (UInt8(189)&127..UInt8(46)&127:117|1), (UInt8(92)&127..UInt8(111)&127:101|1), (UInt8(35)&127..=UInt8(82)&127:16|1)], ((UInt16(45)&127..UInt16(202)&127:(23|1)), (), Int32(5))), Int8(Int8(UInt8(100))));
        var var1125 : (Array<Range<UInt8>>, (Range<UInt16>, Unit, Int32)) = ([(UInt8(185)&127..UInt8(34)&127:108|1), (UInt8(137)&127..UInt8(157)&127:(-52)|1), (UInt8(16)&127..=UInt8(108)&127:39|1), (UInt8(Int8(41))&127..=UInt8(220)&127:(118|1)), (UInt8(40)&127..UInt8(230)&127:36|1), (UInt8(Int8(-107))&127..UInt8(UInt8(112))&127:(Int64(Int8(-75))|1)), (UInt8(50)&127..=UInt8(124)&127:(-50)|1), (UInt8(198)&127..=UInt8(23)&127:37|1), (UInt8(142)&127..=UInt8(90)&127:(-39)|1), (UInt8(199)&127..UInt8(88)&127:(-3)|1)], ((UInt16(234)&127..UInt16(126)&127:((-1)|1)), (), Int32(UInt8(95))));
        if ((Int16(-50) <= Int16(100))) { var1109[0] } else { var1125 } [0];
        func1158(try { // block id: 2762
            var2765 -= var102;
            ();
            if (var318) { var398 } else { var398 } 
        } catch (e: Exception) { // block id: 2776
            Option<Unit>.Some(var796);
            if (var318) { Option<Option<Unit>>.Some(var740) } else { Option<Option<Unit>>.None } 
        }, ((var1995 as Range<Int16>) ?? (Int16(-54)&127..=Int16(21)&127:41|1)));
        var loopTimeVar2876 : Int64 = 0;
        do {
            loopTimeVar2876++;

        } while ((match ((var2800 ?? var468)) {
            case (_,caseVar2818 : Option<Range<UInt32>>,caseVar2819 : Option<Array<Range<UInt8>>>,_,_ : UInt8,caseVar2820 : Range<Int32>,_) => 
                var318
            
            case _ => 
                var2765 <<= ((Int8(47)) & 7);
                if (var2452) { var2832 } else { var2832 } ;
                var2849
            
            case _ : Array<Option<Unit>> => 
                var2427 < var2427
            
            case _ => 
                (var2861, ((UInt16(113)&127..=UInt16(90)&127:(25|1)), var826, Int32(-98)));
                ();
                Int8(-73) > Int8(32)
            
        }) && loopTimeVar2876 < 100 ) 
    }
;
    func1098();
    var2861;
    var1656 & var186
}

public func func2884<T0>(param252 : UInt64) : Option<Unit> where T0 <: Option<Option<Unit>> { // block id: 253
    var var258 : UInt32 = UInt32(UInt8(Int8(113)));
    let var273 : Range<Int32> = (Int32(-121)&127..=Int32(-32)&127:48|1);
    let var276 : Int16 = Int16(-43);
    let var282 : Bool = true;
    var var291 : ?Unit = ((Int8(UInt8(Int8(-20)))&127..=Int8(UInt8(UInt8(153)))&127:(Int64(UInt16(UInt16(16)))|1)) as Unit);
    if (((var258++) is Range<Int8>)) { (match (Enum264.enumValue267(var273, var276, var279, var282)) {
        case _ => 
            (UInt8(243)&127..UInt8(173)&127:((-32)|1))
        
    } as Unit) } else { var291 } 
}

func func666(param667 : Range<UInt8>) : Range<UInt8> { // block id: 668
    let var684 : (Range<Int16>, Range<UInt32>, Int8, UInt8, Range<Int32>) = ((Int16(-18)&127..Int16(18)&127:(Int64(Int64(UInt8(149)))|1)), (UInt32(169)&127..UInt32(101)&127:(80|1)), Int8(Int8(UInt8(2))), UInt8(UInt8(96)), (Int32(47)&127..Int32(95)&127:(Int64(UInt8(UInt8(128)))|1)));
    let var709 : ?Range<UInt8> = (((UInt16(Int8(64))&127..=UInt16(173)&127:(16|1)), (), Int32(UInt8(Int8(-15)))) as Range<UInt8>);
    var var782 : Int16 = Int16(UInt8(173));
    var var789 : UInt8 = UInt8(172);
    var var1012 : (UInt32) -> Range<UInt8> = { lambdaParameter1015 : UInt32 => (UInt8(195)&127..UInt8(UInt8(234))&127:(Int64(Int8(Int8(98)))|1)) };
    let var2882 : ((UInt64) -> Option<Unit>) -> Int64 = func1092;
    (if (var318) { // block id: 678
        var318 ||= false;
        let var724 : Range<Int8> = (Int8(-33)&127..=Int8(38)&127:99|1);
        (var684, var222, var709, (UInt32(132), var724, (UInt64(86)&127..=var593&127:((-74)|1))))
    } else { // block id: 730
        var var733 : UInt64 = UInt64(Int8(UInt8(117)));
        var733 ^= UInt64(230);
        Option<Option<Unit>>.Some(var740);
        if (false) { (var746, (), var709, (UInt32(128), (Int8(23)&127..Int8(44)&127:(-65)|1), var769)) } else { (((Int16(56)&127..var782&127:(var93|1)), var440, Int8(39), var789, (Int32(35)&127..Int32(96)&127:(var186|1))), var796, Option<Range<UInt8>>.None, var640) } 
    }[2] ?? ((func2884<Option<Option<Unit>>>|>var2882)|>(func1024~>var1012)))
}


public func func619(param620 : Range<UInt64>) : Bool { // block id: 621
    ((-22)&127..(-35)&127:(-50)|1);
    (((UInt16(130)&127..=UInt16(230)&127:((-127)|1)), var222, var225)[1], Int8(var102), var640[1], Aggregate658.var663, ((var1188&127..var109&127:(var93|1))|>func666), (Option<Int32>.None ?? Int32(-57)))[4];
    (try { // block id: 2902
        var2904
    } catch (_) { // block id: 2939
        let var2941 : Array<Int32> = Array<Int32>(10){ i => Int32(Int16(Int16(-40))) };
        var2941;
        var2904
    } is Option<Aggregate658>)
}


func func614(param615 : Int64) : (Range<Int32>, String, Option<Range<UInt32>>) { // block id: 616
    var var2964 : (Range<UInt64>) -> Bool = func619;
    var var2981 : ??Range<UInt32> = Option<Option<Range<UInt32>>>.None;
    let var2984 : ?Range<UInt32> = (Class201() as Range<UInt32>);
    if ((var769|>var2964)) { ((Int32(6)&127..=var1495&127:((-24)|1)), (var2140 ?? "e~yNOV<]B+"), (var2981 ?? var2984)) } else { (if (var318) { try { // block id: 2990
        var186--;
        var222;
        ((Int32(-22)&127..=Int32(-62)&127:(112|1)), """
YGW >
6[lEK
""", Option<Range<UInt32>>.Some((UInt32(153)&127..var2427&127:(61|1))))
    } finally { // block id: 3005
        var814;
        var826;
        var3009
    } } else { match {
        case false => 
        var222;
        var3009
        case _ => 
        [(), (), var3024, (), var796, var796, var222, var826, var222, var3033];
        let var3043 : Range<Int32> = (Int32(-110)&127..Int32(-54)&127:(10|1));
        if (true) { ((Int32(71)&127..=Int32(-92)&127:(-3)|1), "8a{ZULt%V\"^", Option<Range<UInt32>>.None) } else { (var3043, var1995, Option<Range<UInt32>>.None) } 
    } } ) } 
}

func func608(param609 : Int8) : (Range<UInt32>, Rune, UInt64, Unit, Int16, Range<Int32>, Rune) { // block id: 610
    ((func614(var186) as Unit) ?? (var3053 %= ((UInt16(Int8(-116))) | 1)));
    var var3069 : Int32 = Int32(Int8(UInt8(14)));
    let var3120 : (Range<UInt32>, Rune, UInt64, Unit, Int16, Range<Int32>, Rune) = ((UInt32(24)&127..UInt32(UInt32(65))&127:(49|1)), 'X', UInt64(UInt64(UInt16(Int16(-110)))), (), Int16(UInt16(207)), (Int32(-64)&127..Int32(-15)&127:(-7)|1), '8');
    let var3138 : (Range<UInt32>, Rune, UInt64, Unit, Int16, Range<Int32>, Rune) = ((UInt32(85)&127..=UInt32(250)&127:99|1), 'S', UInt64(66), (), Int16(UInt8(86)), (Int32(34)&127..Int32(Int8(UInt8(107)))&127:(60|1)), 'j');
    let var3181 : (Range<UInt16>, Unit, Int32) = ((UInt16(167)&127..UInt16(23)&127:118|1), (), Int32(-116));
    var var3221 : Range<UInt32> = (UInt32(139)&127..UInt32(158)&127:((-86)|1));
    let var3233 : Int32 = Int32(52);
    if (try { // block id: 3059
        false
    } catch (_) { // block id: 3061
        ();
        var2427 > UInt32(172)
    } finally { // block id: 3066
        var var3074 : Int32 = Int32(UInt8(17));
        var3069 <<= ((var3074) & 7);
        var740;
        var2427 >= UInt32(112)
    }) { match (Option<Aggregate658>.Some(var2500)) {
        case _ => 
            var2904;
            var826;
            var468
        
        case caseVar3092 => 
            var3095;
            var var3104 : Rune = 's';
            if (true) { var468 } else { (var440, var3104, var593, (), var456, (Int32(70)&127..=Int32(-45)&127:(-38)|1), 'P') } 
        
        case caseVar3113 : Option<Array<Range<UInt8>>> => 
            var826;
            var440;
            if (var2452) { var3120 } else { var3138 } 
        
        case _ => 
            ((var2427&127..=UInt32(173)&127:(var93|1)), 'H', UInt64(202), (), var2076, (Int32(-78)&127..=Int32(-29)&127:((-42)|1)), var3169)
        
    } } else { (if (if (var2452) { // block id: 3174
        if (false) { (([(UInt8(33)&127..UInt8(137)&127:23|1), (UInt8(120)&127..UInt8(93)&127:38|1), (UInt8(12)&127..=UInt8(69)&127:(-18)|1), (UInt8(12)&127..=UInt8(14)&127:(-11)|1), (UInt8(54)&127..UInt8(231)&127:(-106)|1), (UInt8(206)&127..=UInt8(125)&127:8|1), (UInt8(82)&127..=UInt8(100)&127:(-20)|1), (UInt8(217)&127..UInt8(68)&127:46|1), (UInt8(121)&127..=UInt8(229)&127:50|1), (UInt8(119)&127..=UInt8(246)&127:124|1)], var3181), Int8(-92)) } else { (var2904, param609) } ;
        var222;
        UInt32(45) <= var2427
    } else if (var2849) { // block id: 3195
        UInt64(187);
        false
    } else { // block id: 3198
        false
    }) { (Option<(Range<UInt32>, Rune, UInt64, Unit, Int16, Range<Int32>, Rune)>.None ?? ((var2427&127..var2427&127:(var93|1)), 'X', UInt64(235), (), var456, var1911, var3169)) } else { match {
        case true => 
        if (var2452) { var3138 } else { (var3221, 'F', UInt64(202), var222, var456, (var225&127..var3233&127:(6|1)), var3237) } 
        case _ => 
        ((UInt32(223)&127..UInt32(59)&127:87|1), 'i', UInt64(52), var796, Int16(108), (Int32(-109)&127..Int32(57)&127:79|1), var3169)
    } } ) } 
}

public func func412(param413 : Enum264) : Unit { // block id: 414
    var222;
    var var503 : (Range<Int32>, String, Option<Range<UInt32>>) = ((Int32(UInt8(42))&127..=Int32(Int32(-111))&127:((-1)|1)), ")b*oy'b\"E~", (Option<Unit>.None as Range<UInt32>));
    match (UInt32(210)) {
        case caseVar422 : Range<Int8> => 
            var var430 : Int16 = Int16(Int8(-91));
            ((UInt32(171)&127..UInt32(69)&127:(-99)|1), 'h', UInt64(88), var222, var430, (Int32(15)&127..Int32(-12)&127:(-76)|1), 'j')
        
        case 58 | 2 | 141 | 167 => 
            var var462 : Rune = 'q';
            (var440, 'Z', UInt64(180), (), var456, (Int32(-47)&127..Int32(-57)&127:37|1), var462)
        
        case 173 => 
            var468
        
        case 127 | 22 | 116 => 
            var var493 : UInt32 = UInt32(UInt8(UInt8(68)));
            var493 -= UInt32(134);
            var468
        
        case _ => 
            var222;
            var503;
            let var517 : Rune = 'Y';
            (var440, var517, UInt64(73), (), Int16(106), (Int32(32)&127..=var225&127:(var93|1)), 't')
        
    }[3];
    func func530(param531 : Option<Option<Bool>>, param532 : Range<UInt8>) : (Range<UInt32>, Rune, UInt64, Unit, Int16, Range<Int32>, Rune) { // block id: 533
        var var543 : (Int32, Interface205, Range<Int8>, (Range<UInt16>, Unit, Int32), Range<UInt64>, (Range<UInt16>, Unit, Int32)) = (Int32(-54), Class201(), (Int8(Int8(115))&127..Int8(7)&127:((-16)|1)), ((UInt16(Int8(-9))&127..=UInt16(206)&127:((-40)|1)), (), Int32(Int16(UInt16(85)))), (UInt64(125)&127..=UInt64(Int16(-123))&127:(Int64(UInt64(Int16(-73)))|1)), ((UInt16(107)&127..UInt16(UInt8(7))&127:(Int64(UInt8(5))|1)), (), Int32(120)));
        var var596 : UInt64 = UInt64(154);
        if (var318) { try { // block id: 539
            var222;
            ();
            var543
        } catch (_) { // block id: 578
            var var585 : Range<Int8> = (Int8(-46)&127..=Int8(-59)&127:(-127)|1);
            if (true) { (Int32(-71), Class201(), var585, (var279, var222, Int32(34)), (var593&127..=var596&127:(var186|1)), ((UInt16(161)&127..=UInt16(5)&127:(-82)|1), (), Int32(-74))) } else { var543 } 
        } } else { var543 } [1];
        var222;
        var var3249 : (Int8) -> (Range<UInt32>, Rune, UInt64, Unit, Int16, Range<Int32>, Rune) = func608;
        var102|>var3249
    }
;
    func530(Option<Option<Bool>>.Some(var3254), (UInt8(163)&127..=UInt8(222)&127:48|1))[3]
}

func func309(param310 : Range<Int64>) : Option<Unit> { // block id: 311
    var loopTimeVar329 : Int64 = 0;
    do {
        loopTimeVar329++;
        continue
    } while ((try { // block id: 314
        var222;
        var222;
        var318
    } finally { // block id: 322
        var186 != var93
    }) && loopTimeVar329 < 100 ) ;
    var var342 : ??Bool = Option<Option<Bool>>.Some(Option<Bool>.Some(false));
    var var380 : UInt32 = UInt32(Int16(UInt8(231)));
    func func388() : Option<Unit> { // block id: 389
        let var401 : ?Unit = (([Int32(51), Int32(104), Int32(-124), Int32(-94), Int32(-108), Int32(14), Int32(-4), Int32(122), Int32(-115), Int32(-55)] as Bool) as Unit);
        let var3262 : (Enum264) -> Unit = func412;
        var loopTimeVar3266 : Int64 = 0;
        while ((match ((var398 ?? var401)) {
            case _ => 
                Int32(-4) < var225
            
        }) && loopTimeVar3266 < 100 ) {
            loopTimeVar3266++;
            var1049|>var3262
        };
        var var3270 : ?Array<Int32> = (Option<(Range<UInt32>, Rune, UInt64, Unit, Int16, Range<Int32>, Rune)>.Some(((UInt32(200)&127..=UInt32(129)&127:55|1), 'Y', UInt64(7), (), Int16(91), (Int32(78)&127..=Int32(79)&127:((-51)|1)), 'M')) as Array<Int32>);
        var var3289 : Array<Int8> = [Int8(-108), Int8(42), Int8(121), Int8(-26), Int8(-15), Int8(0), Int8(-27), Int8(123), Int8(86), Int8(4)];
        (match (var3270) {
            case _ => 
                Option<Array<Int8>>.Some(var3289)
            
            case _ : Option<Range<Int64>> => 
                let var3306 : Int8 = Int8(UInt8(13));
                if (var2452) { Option<Array<Int8>>.None } else { Option<Array<Int8>>.Some([var2765, Int8(33), Int8(40), Int8(9), var102, var102, var3306, Int8(62), Int8(-125), var3306]) } 
            
            case _ : Float64 => 
                Aggregate658();
                var1578
            
            case _ => 
                var225;
                var186;
                var1578
            
        } ?? if (((var593&127..=UInt64(50)&127:(var186|1)) is Enum936<Range<Int64>, Option<Unit>>)) { [Int8(54), Int8(-47), Int8(-3), Int8(9), Int8(-116), Int8(97), Int8(89), Int8(-127), Int8(71), Int8(51)] } else { match (Int16(-36)) {
            case _ => 
                Option<Array<Int32>>.Some([Int32(54), Int32(-71), Int32(-63), Int32(-14), Int32(1), Int32(-51), Int32(76), Int32(-14), Int32(-104), Int32(-113)]);
                var3024;
                var3289
            
            case _ => 
                var3053;
                var826;
                [Int8(46), Int8(26), Int8(-23), Int8(-55), Int8(70), Int8(74), Int8(112), Int8(14), Int8(-17), Int8(-115)]
            
        } } );
        Option<Unit>.None
    }
;
    if (((var342 ?? Option<Bool>.None) ?? match (var225) {
        case caseVar351 : Range<Int64> => 
            var222;
            false
        
        case caseVar357 => 
            var109 < UInt8(123)
        
        case _ => 
            Int8(92) <= var102
        
        case 10 | 102 => 
            var var373 : UInt32 = UInt32(79);
            var373 > UInt32(63)
        
        case _ => 
            (var380&127..var380&127:((-96)|1));
            false
        
    })) { func388() } else { match (UInt32(var1495)) {
        case caseVar3349 => 
            var2469 = var2469;
            var3033;
            var740
        
        case 184 => 
            var814;
            Option<Unit>.Some(())
        
        case 114 | 232 | 36 | 35 => 
            var796;
            if (var2849) { var1844 } else { (UInt8(148)&127..=UInt8(252)&127:(var93|1)) } ;
            if (false) { var740 } else { Option<Unit>.None } 
        
        case caseVar3379 => 
            Option<Unit>.Some(())
        
        case _ => 
            var222;
            ();
            Option<Unit>.None
        
    } } 
}

public func func3389(param3390 : UInt64) : Range<Int64> { // block id: 3391
    ();
    var3394
}


public func func247(param248 : UInt16) : Option<Unit> { // block id: 249
    let var3435 : (Int32, Interface205, Range<Int8>, (Range<UInt16>, Unit, Int32), Range<UInt64>, (Range<UInt16>, Unit, Int32)) = (Int32(UInt8(29)), Class201(), (Int8(UInt8(Int8(73)))&127..Int8(Int8(-106))&127:((-46)|1)), ((UInt16(153)&127..=UInt16(182)&127:(-14)|1), (), Int32(-95)), (UInt64(254)&127..=UInt64(1)&127:(-26)|1), ((UInt16(UInt8(165))&127..UInt16(Int8(79))&127:(Int64(UInt8(160))|1)), (), Int32(102)));
    match (try { // block id: 3429
            var2427 -= var2427;
            ();
            var3435
        } catch (_) { // block id: 3462
            ();
            var186 >>= ((var1656) & 7);
            var3435
        }) {
        case (caseVar3470,_ : Option<Range<Int64>>,_,caseVar3471,caseVar3472 : Unit,_ : Option<Range<Int64>>) => 
            caseVar3472;
            Enum264.enumValue267((Int32(1)&127..Int32(-12)&127:(-6)|1), var2076, (UInt16(40)&127..=UInt16(157)&127:(-75)|1), false);
            UInt64(210)
        
        case (caseVar3483,caseVar3484,_,caseVar3485,caseVar3486,caseVar3487 : Option<Bool>) => 
            ();
            var593 << ((UInt64(250)) & 7)
        
        case _ => 
            var2469
        
    }|>{ lambdaParameter305 : UInt64 => match ((var3407 ?? ((UInt16(114)&127..var1707&127:((-79)|1)), var3033, Int32(103)))) {
        case caseVar3418 : Array<Array<Unit>> => 
            var2469
        
        case _ => 
            var1495 -= Int32(-31);
            var593
        
    }|>(func3389~>func309) }
}



public func func241(param242 : Float64) : Class201 { // block id: 243
    let var3497 : (UInt16) -> Option<Unit> = func247;
    var var3585 : ??Range<UInt32> = Option<Option<Range<UInt32>>>.None;
    if (false) { (match (var3407) {
        case _ : (Range<Int8>, Int32, Rune, Range<UInt8>, Int32) => 
            UInt16(75) - UInt16(207)
        
        case _ : (Range<Int32>, String, Option<Range<UInt32>>) => 
            var var3512 : Int16 = Int16(UInt8(UInt8(165)));
            var3512 /= ((Int16(-115)) | 1);
            UInt16(68) + var3053
        
        case caseVar3522 => 
            Enum936<Range<Int64>, Option<Unit>>.defaultValue;
            var3053
        
        case _ : Range<Int64> => 
            if (var2452) { var3532 } else { [(), (), (), (), (), (), (), (), (), ()] } ;
            UInt16(5)
        
        case _ => 
            var3024;
            var1707
        
    }|>var3497) } else { match (if (false) { // block id: 3543
            let var3546 : Bool = false;
            if (var3546) { [Option<Unit>.None, Option<Unit>.None, var740, Option<Unit>.None, var740, Option<Unit>.None, var740, var740, Option<Unit>.None, Option<Unit>.None] } else { [var740, Option<Unit>.None, Option<Unit>.None, var740, var740, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, var740, Option<Unit>.Some(var222)] } ;
            var var3573 : Bool = true;
            if (var3573) { var3576 } else { var3237 } 
        } else { // block id: 3579
            if (var318) { Option<Option<Range<UInt32>>>.Some(Option<Range<UInt32>>.None) } else { var3585 } ;
            ();
            'C'
        }) {
        case caseVar3591 => 
            if (var2849) { Option<Unit>.Some(()) } else { var740 } 
        
        case 'k' => 
            var740
        
        case _ : Range<UInt64> => 
            Option<Option<Unit>>.Some(Option<Unit>.Some(()));
            ();
            var740
        
        case 'd' | 'V' | 'j' => 
            let var3618 : ?Range<Int64> = ((((Int16(-53)&127..Int16(-33)&127:((-85)|1)), (UInt32(117)&127..=UInt32(47)&127:(-63)|1), Int8(UInt8(229)), UInt8(Int8(77)), (Int32(48)&127..Int32(-107)&127:(106|1))), (), (((UInt16(18)&127..UInt16(89)&127:(58|1)), (), Int32(-43)) as Range<UInt8>), (UInt32(219), (Int8(126)&127..Int8(-84)&127:((-104)|1)), (UInt64(60)&127..=UInt64(29)&127:((-112)|1)))) as Range<Int64>);
            if (var2452) { Option<Range<Int64>>.Some(var3394) } else { var3618 } ;
            Option<Unit>.Some(())
        
        case _ => 
            if (true) { Option<Unit>.Some(var3024) } else { Option<Unit>.Some(var3664) } 
        
    } } ;
    let var3695 : (Range<Int8>, Int32, Rune, Range<UInt8>, Int32) = ((Int8(-58)&127..Int8(-37)&127:41|1), Int32(-42), 'Y', (UInt8(77)&127..UInt8(250)&127:(-35)|1), Int32(65));
    var var3795 : (Range<UInt16>, Unit, Int32) = ((UInt16(65)&127..=UInt16(UInt16(34))&127:(10|1)), (), Int32(-105));
    ((match (var1864) {
        case _ => 
            var3407;
            var3394;
            if (false) { (UInt64(224)&127..UInt64(212)&127:108|1) } else { (UInt64(87)&127..=var3685&127:(var93|1)) } 
        
        case caseVar3691 : Option<Bool> => 
            var3024;
            var3695;
            (var3685&127..=var3685&127:((-53)|1))
        
        case caseVar3708 : Array<Float64> => 
            Option<Array<Range<UInt8>>>.Some([(UInt8(3)&127..=UInt8(237)&127:86|1), (UInt8(211)&127..=UInt8(242)&127:(-20)|1), (UInt8(246)&127..UInt8(58)&127:(-127)|1), (UInt8(153)&127..UInt8(251)&127:0|1), (UInt8(67)&127..UInt8(31)&127:105|1), (UInt8(244)&127..UInt8(5)&127:32|1), (UInt8(201)&127..=UInt8(170)&127:122|1), (UInt8(195)&127..UInt8(105)&127:92|1), (UInt8(54)&127..UInt8(180)&127:(-73)|1), (UInt8(84)&127..=UInt8(43)&127:54|1)]);
            var2427 |= UInt32(41);
            var var3717 : UInt64 = UInt64(38);
            (var3717&127..=var2469&127:(106|1))
        
        case _ => 
            let var3726 : Bool = (UInt16(78) is Range<UInt32>);
            if (var3726) { (UInt64(51)&127..UInt64(143)&127:(-32)|1) } else { (var593&127..=UInt64(2)&127:((-114)|1)) } 
        
        case _ => 
            (UInt64(95)&127..var593&127:(var93|1))
        
    } as Unit) ?? match (if (var318) { // block id: 3743
            var3664;
            (-26.0) - param242
        } else { // block id: 3748
            var3664;
            [Int32(-81), Int32(-116), Int32(89), Int32(-4), Int32(8), Int32(-4), Int32(-76), var225, Int32(-2), var1495];
            var1550
        }) {
        case 35.0 | -103.0 | 5.0 | 28.0 => 
            ();
            var1049;
            var3033
        
        case _ : Option<Range<Int32>> => 
            var3033;
            ();
            var2469 ^= var2469
        
        case caseVar3778 => 
            if (true) { var740 } else { Option<Unit>.None } ;
            var796
        
        case 9.0 | -17.0 | -13.0 => 
            var2469 &= var2469;
            var3024
        
        case _ => 
            var3795;
            var3033
        
    });
    ((((Int16(55)&127..=Int16(80)&127:41|1) as Option<Range<UInt32>>) as Class201) ?? if (try { // block id: 3815
        true
    } catch (_) { // block id: 3817
        var796;
        var1550 = (-12.0);
        48 < var186
    }) { match ([Int8(-18), Int8(-33), Int8(-77), Int8(-6), Int8(38), Int8(20), Int8(-93), Int8(-80), Int8(-45), Int8(-46)]) {
        case caseVar3829 => 
            var593 << ((UInt64(73)) & 7);
            var3835;
            if (true) { Class201() } else { var1063 } 
        
        case caseVar3857 : Option<Aggregate658> => 
            if (true) { Class201() } else { Class201() } 
        
        case _ => 
            var1188 -= var1188;
            (var2427, (var102&127..=var2765&127:(99|1)), var769);
            var1063
        
    } } else { Class201() } )
}

func func143<T0, T1>(optionalParam144 ! : Bool = (Float32(Float32(Float32(-59.0))) is Range<Int16>), namedParam149 ! : Range<Int32>, namedParam150 ! : Range<UInt32>, namedParam151 ! : Range<Int16>) : Bool where T0 <: Option<Bool>, T1 <: Option<Range<UInt8>> { // block id: 152
    let var189 : Int64 = Int64(UInt8(Int8(87)));
    var var196 : UInt8 = UInt8(11);
    (var161[5] ?? try (resource = Class201()) { // block id: 183
        var186 ^= var189
    } catch (e: Exception) { // block id: 193
        var196 &= var196;
        ()
    });
    Class201.func208([var740, Option<Unit>.Some(()), var740, Option<Unit>.Some(()), var740, var740, Option<Unit>.None, Option<Unit>.Some(var796), var740, Option<Unit>.None], namedParam210 : (var4009 ?? var4014), optionalParam211 : match (((-9)&127..(-32)&127:(79|1))) {
        case _ => 
            let var4030 : Interface204 = Class201();
            if (false) { Class201() } else { var4030 } 
        
    }, namedParam213 : if (var2849) { Option<Range<UInt32>>.None } else { Option<Range<UInt32>>.Some((var2427&127..=var2427&127:(78|1))) } )
}

func func16(param17 : UInt32) : Array<Unit> { // block id: 18
    let var39 : Array<Int32> = Array<Int32>(10){ i => Int32(-50) };
    let var67 : Range<Int32> = (Int32(58)&127..Int32(5)&127:(-40)|1);
    let var73 : ?Range<UInt32> = Option<Range<UInt32>>.Some((UInt32(38)&127..UInt32(165)&127:(Int64(UInt16(Int8(1)))|1)));
    let var117 : (Range<Int16>, Range<UInt32>, Int8, UInt8, Range<Int32>) = ((Int16(-126)&127..Int16(UInt16(152))&127:(Int64(Int32(Int32(18)))|1)), (UInt32(UInt8(UInt8(238)))&127..UInt32(Int16(86))&127:(Int64(Int32(Int32(45)))|1)), Int8(-27), UInt8(UInt8(UInt8(122))), (Int32(34)&127..=Int32(1)&127:91|1));
    func func36<T0>() : Range<UInt32> where T0 <: Enum936<Range<Int64>, Option<Unit>> { // block id: 37
        var39;
        let var70 : String = "dEv;L7Po</";
        var var89 : Int16 = Int16(124);
        ((var67, var70, var73)[2] ?? if (false) { ((var89&127..var89&127:(var93|1)), (UInt32(4)&127..param17&127:((-28)|1)), var102, var109, (Int32(72)&127..Int32(-68)&127:(70|1))) } else { var117 } [1])
    }
;
    let var4064 : Range<Int16> = (Int16(40)&127..=Int16(22)&127:46|1);
    func func23(optionalParam24 ! : UInt8 = UInt8(Int8(UInt8(36))), namedParam28 ! : Range<Int64>, namedParam29 ! : Float32, optionalParam30 ! : Float64 = Float64(Float32(Float32(3.0)))) : Int32 { // block id: 34
        func36<Enum936<Range<Int64>, Option<Unit>>>();
        var loopTimeVar4077 : Range<UInt64> = (UInt64(170)&127..=UInt64(203)&127:(Int64(Int8(112))|1));
        for (i in loopTimeVar4077 where func143<Option<Bool>, Option<Range<UInt8>>>(optionalParam144 : (var1032 ?? var2452), namedParam149 : if (var2849) { (Int32(-22)&127..=var225&127:(var186|1)) } else { var67 } , namedParam150 : (var2427&127..UInt32(164)&127:((-95)|1)), namedParam151 : match (var1995) {
            case "BgQAyC2Kg\"" | "k^w4!A?KU^" | """
+A_>:
3k2/i
""" | "B;isD.a{;*M" => 
                Option<Aggregate658>.None;
                var222;
                if (var2452) { var4064 } else { (Int16(100)&127..=Int16(-41)&127:20|1) } 
            
            case _ => 
                Option<Bool>.None;
                var4072--;
                (Int16(92)&127..Int16(-85)&127:105|1)
            
        })) {

        };
        var var4094 : Float32 = Float32(35.0);
        let var4103 : Int32 = Int32(UInt8(23));
        try { // block id: 4084
            match (Option<Range<Int64>>.None) {
                case caseVar4089 => 
                    var796;
                    var4094 /= Float32((Int32(var4094)) | 1);
                    Int32(61) & Int32(8)
                
                case _ => 
                    var4103
                
            }
        } catch (e: Exception) { // block id: 4106
            var3394;
            ();
            Int32(-24) >> ((var4112) & 7)
        } finally { // block id: 4114
            Int32(-107) % ((Int32(-91)) | 1)
        }
    }
;
    let var4245 : Int64 = 28;
    var var4251 : UInt16 = UInt16(UInt16(UInt8(UInt8(Int8(-13)))));
    [func23(namedParam28 : (106&127..=(-36)&127:106|1), namedParam29 : Float32(29.0), optionalParam30 : 110.0), var1495 + Int32(-13), (var4126 ?? var1495), var1495, match ((-3.0)) {
        case _ => 
            ();
            var225
        
        case 37.0 | 81.0 => 
            [Int32(-87), var4112, Int32(106), Int32(-84), var225, var1495, var1495, var4112, Int32(-84), var4112];
            [92.0, 4.0, (-69.0), (-22.0), 20.0, (-27.0), (-4.0), 75.0, (-7.0), (-124.0)];
            var4112
        
        case 84.0 | 47.0 => 
            if (var318) { var2904 } else { var2904 } ;
            var2076 ^= var2076;
            Int32(117)
        
        case -73.0 | -117.0 => 
            (UInt32(101)&127..UInt32(84)&127:100|1);
            var1495
        
        case _ => 
            var1495
        
    }, Int32(var2076), match (Enum264.defaultValue) {
        case defaultValue => 
            var2076--;
            var1188 *= var1188;
            var4112
        
        case _ => 
            var4188;
            Int32(66) ** (Int32(-54) & 3)
        
    }, match {
        case var318 => 
        18;
        Int32(-93);
        Int32(-123)
        case true => 
        Int32(-90)
        case _ => 
        Int32(35) / ((Int32(44)) | 1)
    }, match (var161) {
        case caseVar4210 => 
            var1495 += var4112;
            Enum936<Range<Int64>, Option<Unit>>.defaultValue;
            var1495 % ((var225) | 1)
        
        case _ => 
            var826;
            [(UInt16(206)&127..var3053&127:(var1656|1)), (UInt16(243)&127..var3053&127:(var93|1)), var279, (UInt16(96)&127..var3053&127:((-105)|1)), (var3053&127..UInt16(188)&127:((-62)|1)), (UInt16(33)&127..UInt16(195)&127:(-51)|1), (UInt16(71)&127..var1707&127:(var4245|1)), (UInt16(185)&127..=UInt16(85)&127:27|1), (UInt16(21)&127..var4251&127:(var93|1)), var279];
            var4112
        
    }, match {
        case false => 
        Int32(64)
        case false => 
        var2469 -= UInt64(200);
        ();
        Int32(80) + Int32(42)
        case _ => 
        let var4275 : Unit = ();
        var4275;
        -var4112
    }][6];
    match (((-92) as (Range<UInt32>, Rune, UInt64, Unit, Int16, Range<Int32>, Rune))) {
        case _ : (Range<Int32>, String, Option<Range<UInt32>>) => 
            Option<Unit>.None;
            Option<Option<Bool>>.Some(var3254);
            [(), (), (), (), (), (), (), (), (), ()]
        
        case _ => 
            var3532
        
        case caseVar4296 => 
            [var796, (), (), var222, var4304, var3024, (), var3664, (), var796]
        
        case _ => 
            [(), (), (), var4304, (), var222, (), (), var3033, ()]
        
        case _ => 
            var var4338 : Int64 = 60;
            ((Int8(73)&127..=Int8(18)&127:(var1656|1)), Int32(97), var3169, (UInt8(39)&127..var109&127:(var4338|1)), var225);
            if (var4343) { var4346 } else { var4346 } 
        
    }
}

main(): Int64 {
    try {
        let var4360 : (UInt32) -> Array<Unit> = func16;
        (UInt32(242)|>var4360)[3];
        var1656
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var93*var93), 64)
        crccheck.updateBuffer(UInt64(var102*var102), 64)
        crccheck.updateBuffer(UInt64(var109*var109), 64)
        crccheck.updateBuffer(UInt64(var186*var186), 64)
        crccheck.updateBuffer(UInt64(var225*var225), 64)
        crccheck.updateBuffer(UInt64(var456*var456), 64)
        crccheck.updateBuffer(UInt64(var593*var593), 64)
        crccheck.updateBuffer(UInt64(var1188*var1188), 64)
        crccheck.updateBuffer(UInt64(var1495*var1495), 64)
        crccheck.updateBuffer(UInt64(var1656*var1656), 64)
        crccheck.updateBuffer(UInt64(var1707*var1707), 64)
        crccheck.updateBuffer(UInt64(var2076*var2076), 64)
        crccheck.updateBuffer(UInt64(var2427*var2427), 64)
        crccheck.updateBuffer(UInt64(var2469*var2469), 64)
        crccheck.updateBuffer(UInt64(var2765*var2765), 64)
        crccheck.updateBuffer(UInt64(var3053*var3053), 64)
        crccheck.updateBuffer(UInt64(var3685*var3685), 64)
        crccheck.updateBuffer(UInt64(var4072*var4072), 64)
        crccheck.updateBuffer(UInt64(var4112*var4112), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Aggregate658 {

}

extend Enum264 {

}

extend<T0, T1> Enum936<T0, T1> {

}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_unexpected_declaration_in_scope
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_expected_left_brace
// ASSERT: scan parse_expected_case


