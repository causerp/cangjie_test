/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output


public var var12 : UInt8 = UInt8(UInt8(41))
public var var23 : UInt64 = UInt64(UInt16(28))
let var56 : Int8 = Int8(-125)
public let var65 : Int64 = (-42)
public let var188 : (Range<Int32>, Int16, Range<Int16>, Rune) = ((Int32(UInt32(UInt32(215)))&127..Int32(-113)&127:(Int64(UInt64(11))|1)), Int16(-112), (Int16(Int8(UInt8(137)))&127..=Int16(33)&127:(Int64(Int32(36))|1)), 'Q')
public let var217 : UInt32 = UInt32(Int8(6))
public var var235 : Array<UInt32> = [UInt32(134), UInt32(155), UInt32(225), UInt32(201), UInt32(199), UInt32(69), UInt32(194), UInt32(174), UInt32(78), UInt32(177)]
let var280 : UInt32 = UInt32(Int16(-54))
var var331 : Bool = true
public var var344 : Unit = ()
public var var350 : UInt32 = UInt32(205)
public var var374 : Unit = ()
public let var473 : Unit = ()
public let var482 : Range<UInt32> = (UInt32(228)&127..UInt32(139)&127:(Int64(Int8(UInt8(Int8(111))))|1))
var var492 : Int8 = Int8(Int8(25))
public var var511 : Interface142 = Class139<Option<Int32>>()
var var550 : Option<Option<Option<Bool>>> = Option<Option<Option<Bool>>>.None
public let var692 : Array<Bool> = [false, true, true, false, false, false, true, true, false, true]
let var722 : Option<(Range<Int32>, Int16, Range<Int16>, Rune)> = (Int8(Int8(21)) as (Range<Int32>, Int16, Range<Int16>, Rune))
let var758 : Enum755 = Enum755.defaultValue
public let var880 : Int32 = Int32(98)
let var891 : (Int64, Option<Int64>, Array<String>) = (Int64(UInt64(86)), (Option<Unit>.None as Int64), ["o<\":Dvc@XL", "*9Tc\\I,XKC", "H_ rJPKy9F", "Q-p6Vb qa!", "GZX8MVmCq ", """
otfa{a
\"@oCQ
""", """
SW7n.
=:3(l
""", """
s%^dq
2Ml&'
""", "-u*/hn@4N<", "g2V;%ZM=(j"])
public let var915 : Unit = ()
public var var986 : Rune = 'e'
public var var990 : Range<Int32> = (Int32(92)&127..Int32(89)&127:13|1)
public let var995 : Range<UInt8> = (UInt8(227)&127..UInt8(156)&127:62|1)
let var1102 : Option<UInt32> = Option<UInt32>.None
public let var1162 : UInt16 = UInt16(8)
let var1170 : Array<Option<UInt32>> = [(Option<Int32>.None as UInt32), ([true, true, true, true, false, false, true, false, true, false] as UInt32), ([UInt32(235), UInt32(191), UInt32(Int16(-2)), UInt32(170), UInt32(216), UInt32(UInt8(166)), UInt32(201), UInt32(253), UInt32(UInt16(17)), UInt32(UInt16(55))] as UInt32), ((UInt64(75) as Option<UInt32>) as UInt32), (Class139<Option<Int32>>() as UInt32), (Option<Option<Bool>>.None as UInt32), Option<UInt32>.None, Option<UInt32>.None, ((Int32(UInt32(22)) as Range<Int32>) as UInt32), Option<UInt32>.None]
var var1283 : Option<Bool> = Option<Bool>.None
public let var1302 : ?(Int16, UInt16, UInt64) = (Float32(Float32(32.0)) as (Int16, UInt16, UInt64))
public let var1308 : Int16 = Int16(118)
var var1334 : ?Range<Int64> = ((UInt32(91)&127..UInt32(UInt32(221))&127:(Int64(UInt8(Int8(101)))|1)) as Range<Int64>)
var var1695 : ?Range<Int32> = Option<Range<Int32>>.None
let var1725 : Array<Bool> = [true, true, true, false, true, true, false, true, true, false]
public var var1735 : UInt32 = UInt32(99)
public let var1767 : (Rune, Range<UInt64>, Range<Int32>, (Range<Int32>, Int16, Range<Int16>, Rune), Range<Int32>, Range<UInt8>, Array<Bool>, Array<UInt32>) = ('6', (UInt64(33)&127..UInt64(201)&127:(-87)|1), (Int32(117)&127..=Int32(78)&127:(Int64(Int16(-44))|1)), ((Int32(-99)&127..=Int32(-35)&127:121|1), Int16(UInt16(62)), (Int16(UInt16(155))&127..=Int16(7)&127:(Int64(UInt16(246))|1)), '2'), (Int32(105)&127..Int32(-42)&127:122|1), (UInt8(Int8(-41))&127..UInt8(154)&127:(Int64(UInt64(71))|1)), [true, false, false, (Class139<Option<Int32>>() is (Int64, Option<Int64>, Array<String>)), (Option<Bool>.None is Float64), (Class139<Option<Int32>>() is (Int16, UInt16, UInt64)), ((UInt64(241) as Bool) is Int64), false, true, (Int8(Int8(72)) is (Interface143, Range<UInt64>) -> Bool)], [UInt32(34), UInt32(222), UInt32(210), UInt32(186), UInt32(26), UInt32(50), UInt32(95), UInt32(66), UInt32(10), UInt32(173)])
var var1848 : Option<Unit> = Option<Unit>.None
var var2004 : ((Int32, UInt32, Range<UInt8>, Range<UInt8>, (Rune, Range<UInt64>, Range<Int32>, (Range<Int32>, Int16, Range<Int16>, Rune), Range<Int32>, Range<UInt8>, Array<Bool>, Array<UInt32>)), Range<Int16>, Option<Option<Option<UInt32>>>, Range<Int16>, Array<Bool>, Range<UInt16>) = ((Int32(-27), UInt32(7), (UInt8(180)&127..=UInt8(Int8(118))&127:(Int64(6)|1)), (UInt8(157)&127..UInt8(80)&127:(-3)|1), ('S', (UInt64(3)&127..=UInt64(199)&127:102|1), (Int32(-126)&127..=Int32(13)&127:((-122)|1)), ((Int32(28)&127..Int32(-20)&127:(23|1)), Int16(84), (Int16(-84)&127..=Int16(-41)&127:(-73)|1), 'J'), (Int32(31)&127..=Int32(121)&127:((-82)|1)), (UInt8(170)&127..UInt8(71)&127:((-88)|1)), [true, true, false, false, false, true, false, false, false, true], [UInt32(99), UInt32(87), UInt32(247), UInt32(158), UInt32(116), UInt32(98), UInt32(191), UInt32(43), UInt32(15), UInt32(225)])), (Int16(30)&127..Int16(101)&127:63|1), (UInt16(Int8(UInt8(226))) as Option<Option<UInt32>>), (Int16(-64)&127..Int16(22)&127:(-116)|1), [false, true, false, true, (Enum755.defaultValue is Float32), (Class139<Option<Int32>>() is Int64), (Int16(-116) is Int16), (Aggregate731() is Option<(Range<Int32>, Int16, Range<Int16>, Rune)>), (([false, false, false, true, false, false, false, true, false, false] as Range<Int64>) is (Range<Int32>, Int16, Range<Int16>, Rune)), ((Int8(-4)&127..=Int8(-44)&127:((-5)|1)) is Range<Int32>)], (UInt16(172)&127..UInt16(118)&127:121|1))
public var var2076 : Int32 = Int32(Int8(-104))
let var2092 : Rune = 'b'
public let var2102 : Range<Int32> = (Int32(118)&127..Int32(-31)&127:((-100)|1))
public let var2125 : Array<UInt32> = Array<UInt32>(10){ i => UInt32(244) }
public var var2229 : UInt32 = UInt32(185)
public let var2296 : Option<UInt32> = ((Int32(-20), UInt32(UInt16(UInt8(120))), (UInt8(93)&127..=UInt8(Int8(100))&127:(Int64(Int32(-27))|1)), (UInt8(169)&127..UInt8(126)&127:45|1), ('h', (UInt64(204)&127..UInt64(209)&127:(-13)|1), (Int32(-5)&127..Int32(103)&127:(25|1)), ((Int32(-85)&127..Int32(-46)&127:(-112)|1), Int16(27), (Int16(-60)&127..Int16(-86)&127:(-77)|1), 'n'), (Int32(21)&127..=Int32(-87)&127:(-16)|1), (UInt8(71)&127..=UInt8(20)&127:(-79)|1), [false, true, false, true, false, false, true, false, false, false], [UInt32(40), UInt32(116), UInt32(189), UInt32(64), UInt32(64), UInt32(132), UInt32(142), UInt32(131), UInt32(235), UInt32(92)])) as UInt32)
public let var2342 : Bool = (Int32(Int32(86)) is Float64)
public let var2399 : Array<(Int16, UInt16, UInt64)> = [(Int16(UInt16(171)), UInt16(56), UInt64(184)), (Int16(-101), UInt16(209), UInt64(Int8(Int8(16)))), (Int16(UInt16(Int16(-65))), UInt16(137), UInt64(UInt8(Int8(-105)))), (Int16(-12), UInt16(206), UInt64(133)), (Int16(28), UInt16(26), UInt64(UInt8(138))), (Int16(Int8(95)), UInt16(191), UInt64(UInt64(UInt64(128)))), (Int16(UInt8(165)), UInt16(Int8(UInt8(220))), UInt64(223)), (Int16(46), UInt16(UInt16(195)), UInt64(43)), (Int16(67), UInt16(Int8(-27)), UInt64(Int16(28))), (Int16(Int16(20)), UInt16(Int8(-119)), UInt64(243))]
public let var2471 : Array<String> = [###"?^!iB^.U*A"###, ###"*@72*+P+Y?"###, """
eo\\$9
O(B<P
""", """
px|BX
;,z'n
""", "a{MMD1U5XE$", """
wo~~f
/,1pJ
""", ":-+NW~deDB", "k&6&,/+9[D", ###"#J}yyxl~ 1"###, """
14+>!
\"Nr*-
"""]
public let var2497 : Bool = false
public let var2517 : Bool = (Aggregate731() is UInt16)
public var var2577 : UInt16 = UInt16(UInt16(56))
public var var2612 : (Int16, UInt16, UInt64) = (Int16(63), UInt16(UInt16(Int16(UInt16(40)))), UInt64(Int64(Int32(-20))))
var var2690 : (Range<Int32>, Rune, Array<String>, (Int16, UInt16, UInt64), Range<UInt16>, Array<Bool>) = ((Int32(UInt16(Int16(0)))&127..=Int32(UInt32(21))&127:(Int64(UInt64(Int8(-99)))|1)), 'I', ["""
|X`MP
x^HaM
""", """
<~[j<
pqEzV
""", """
h2eA-
H|Z[W
""", "$:}.:/+>F(", """
GR5lY
^tuxQ
""", ###"]iu2=}HW.'"###, "G ]qa{PldYf", "%}M%)O;k~s", """
w@UJ|
K*K1G
""", "h?F7WA`JB_"], (Int16(Int8(UInt8(212))), UInt16(214), UInt64(179)), (UInt16(146)&127..UInt16(105)&127:(-59)|1), [false, false, true, false, false, false, true, false, false, true])
var var2725 : Range<UInt16> = (UInt16(240)&127..=UInt16(56)&127:108|1)
public let var2756 : String = """
eha{J4
UWaUV
"""
public var var2760 : Option<Int32> = ((Int32(-123), UInt32(9), (UInt8(110)&127..=UInt8(115)&127:79|1), (UInt8(79)&127..UInt8(136)&127:92|1), ('Q', (UInt64(146)&127..UInt64(171)&127:(-42)|1), (Int32(86)&127..Int32(80)&127:(8|1)), ((Int32(-36)&127..=Int32(-33)&127:115|1), Int16(25), (Int16(1)&127..Int16(62)&127:(61|1)), 'l'), (Int32(100)&127..=Int32(-43)&127:(60|1)), (UInt8(52)&127..=UInt8(237)&127:((-33)|1)), [false, false, true, false, true, false, false, false, true, false], [UInt32(65), UInt32(245), UInt32(54), UInt32(238), UInt32(117), UInt32(57), UInt32(228), UInt32(240), UInt32(219), UInt32(207)])) as Int32)
var var2813 : (Int32, UInt32, Range<UInt8>, Range<UInt8>, (Rune, Range<UInt64>, Range<Int32>, (Range<Int32>, Int16, Range<Int16>, Rune), Range<Int32>, Range<UInt8>, Array<Bool>, Array<UInt32>)) = (Int32(-122), UInt32(UInt16(UInt16(4))), (UInt8(166)&127..UInt8(248)&127:14|1), (UInt8(Int8(Int8(-73)))&127..UInt8(Int8(UInt8(33)))&127:((-34)|1)), ('m', (UInt64(UInt8(74))&127..=UInt64(116)&127:(Int64(UInt8(64))|1)), (Int32(-78)&127..Int32(118)&127:(Int64(Int32(-80))|1)), ((Int32(23)&127..=Int32(87)&127:(106|1)), Int16(UInt8(208)), (Int16(-56)&127..Int16(-91)&127:(95|1)), 'n'), (Int32(-14)&127..=Int32(-60)&127:(-54)|1), (UInt8(145)&127..=UInt8(Int8(-44))&127:(Int64(Int16(-9))|1)), [true, false, true, false, false, true, true, false, true, false], [UInt32(113), UInt32(38), UInt32(182), UInt32(129), UInt32(138), UInt32(210), UInt32(203), UInt32(104), UInt32(44), UInt32(174)]))
let var2930 : (Range<Int16>, (Range<Int32>, Int16, Range<Int16>, Rune), Bool, Range<Int64>, Unit, String, Range<Int8>) = ((Int16(Int16(UInt8(166)))&127..Int16(Int16(UInt16(116)))&127:(10|1)), ((Int32(UInt16(244))&127..=Int32(-77)&127:(Int64(UInt32(218))|1)), Int16(Int16(UInt8(109))), (Int16(Int8(-77))&127..Int16(-29)&127:(Int64(Int16(4))|1)), 'v'), false, ((-10)&127..75&127:61|1), (), "FMV}n?Oi(w", (Int8(-102)&127..=Int8(64)&127:(-114)|1))
public var var3080 : Unit = ()
public var var3143 : (Int16, UInt16, UInt64) = (Int16(Int8(UInt8(UInt8(203)))), UInt16(Int16(-7)), UInt64(148))

public interface Interface143 {

}

public interface Interface142 <: Interface143 {

}

public open class Class139<T0> <: Interface142 & Interface143 {
    public init() { // block id: 141

    }
;
    static var var146 : UInt64 = UInt64(41);
    public init(namedParam388 ! : Range<UInt16>, namedParam389 ! : Unit, optionalParam390 ! : Range<UInt64> = (UInt64(Int8(UInt8(Int8(-37))))&127..UInt64(29)&127:((-9)|1))) { // block id: 398
        var var412 : (Rune, Option<Interface142>, Range<UInt16>, String, Array<String>, Int32) = ('Q', ((UInt8(23)&127..=UInt8(Int8(-90))&127:(54|1)) as Interface142), (UInt16(227)&127..UInt16(156)&127:(-79)|1), ###"%| Xq- CW1"###, ["LKEkamW-za{", ###"HA*c]UH8&o"###, """
Zxa_K
6Aidh
""", """
tHSko
jqT`e
""", """
$mrAh
B?~b*
""", "}hD$<'J$Wf", ###">*r|v^eUcR"###, ###"W;|$xt^y6("###, ###"QwACy]\\k*]"###, "_-<h%2AUo6"], Int32(-83));
        var var459 : Int16 = Int16(Int8(Int8(27)));
        match ((if (var331) { Option<Option<Interface142>>.None } else { Option<Option<Interface142>>.None }  ?? var412[1])) {
            case _ : Range<UInt16> => 
                var331 &&= false;
                var374;
                if (var331) { (UInt64(123)&127..=var146&127:(var65|1)) } else { (UInt64(58)&127..=UInt64(64)&127:(var65|1)) } 
            
            case _ => 
                Int16(-111) >> ((var459) & 7);
                optionalParam390
            
            case caseVar466 => 
                (Int32(-36)&127..Int32(-86)&127:((-124)|1));
                var473;
                if (false) { optionalParam390 } else { (UInt64(117)&127..=UInt64(111)&127:59|1) } 
            
            case _ => 
                var482;
                var492 |= Int8(-37);
                optionalParam390
            
        }
    }

}


func func16() : UInt32 { // block id: 180
    ();
    match (var188[0]) {
        case _ : UInt64 => 
            ();
            if (false) { [UInt32(121), UInt32(216), UInt32(212), UInt32(160), UInt32(48), UInt32(61), UInt32(21), UInt32(208), UInt32(77), UInt32(197)] } else { [UInt32(174), var217, UInt32(14), UInt32(66), var217, UInt32(195), var217, var217, var217, var217] } 
        
        case _ : Rune => 
            if (true) { [UInt32(219), UInt32(173), UInt32(81), UInt32(208), UInt32(189), UInt32(86), UInt32(79), UInt32(82), UInt32(225), UInt32(67)] } else { var235 } 
        
        case _ => 
            [var217, var217, var217, UInt32(244), UInt32(92), var217, UInt32(163), var217, UInt32(18), UInt32(139)]
        
        case caseVar253 => 
            [UInt32(234), UInt32(15), UInt32(171), UInt32(172), UInt32(171), UInt32(74), UInt32(95), UInt32(174), UInt32(67), UInt32(136)]
        
        case _ => 
            var var259 : Interface142 = Class139<Option<Int32>>();
            var259;
            var var263 : Int16 = Int16(UInt16(Int8(Int8(-65))));
            var263 |= Int16(-10);
            [UInt32(252), var217, UInt32(1), UInt32(102), UInt32(243), UInt32(136), UInt32(106), var217, UInt32(186), var280]
        
    }[3]
}

public func func174(param175 : Array<String>) : Option<Interface142> { // block id: 176
    match (func16()) {
        case _ => 
            ();
            ();
            let var291 : Interface142 = Class139<Option<Int32>>();
            Option<Interface142>.Some(var291)
        
        case _ => 
            let var296 : Range<Int64> = (87&127..Int64(UInt8(Int8(123)))&127:(64|1));
            var296;
            var var305 : Bool = ((Int32(Int32(UInt16(248)))&127..=Int32(UInt16(69))&127:(Int64((-92))|1)) is (Range<Int32>, Int16, Range<Int16>, Rune));
            var305 &&= var305;
            var var317 : ?Interface142 = (["""
%yGec
g4Xd3
""", ###"5i12j\\a{\"S3"###, """
6wNCy
@z#O'
""", """
 K~Vz
r(kW[
""", "a{hW-&i`Jk&", "UCt)'p)gjX", ")*n6yjIO@)", "/gKU&MVwFg", "m&3sSx8kx:", "R-@2S;3e~]"] as Interface142);
            var317
        
    }
}

func func325(param326 : () -> UInt32) : Interface142 { // block id: 328
    var331 &&= false;
    var var338 : Unit = ();
    if (try { // block id: 336
        var338;
        !var331
    } finally { // block id: 342
        var344;
        var331
    }) { // block id: 347
        var350 = var217;
        (Option<Unit>.None ?? var338)
    } else if ((var280 is Rune)) { // block id: 358
        let var361 : Option<Unit> = (Int64(UInt32(21)) as Unit);
        (var361 ?? ());
        if (false) { // block id: 368
            var12 %= ((UInt8(135)) | 1);
            var338;
            var374
        };
        var12 |= UInt8(134)
    };
    Class139<Option<Int32>>()
}


func func499() : UInt32 { // block id: 180
    ();
    match (var188[0]) {
        case _ : UInt64 => 
            ();
            if (false) { [UInt32(121), UInt32(216), UInt32(212), UInt32(160), UInt32(48), UInt32(61), UInt32(21), UInt32(208), UInt32(77), UInt32(197)] } else { [UInt32(174), var217, UInt32(14), UInt32(66), var217, UInt32(195), var217, var217, var217, var217] } 
        
        case _ : Rune => 
            if (true) { [UInt32(219), UInt32(173), UInt32(81), UInt32(208), UInt32(189), UInt32(86), UInt32(79), UInt32(82), UInt32(225), UInt32(67)] } else { var235 } 
        
        case _ => 
            [var217, var217, var217, UInt32(244), UInt32(92), var217, UInt32(163), var217, UInt32(18), UInt32(139)]
        
        case caseVar253 => 
            [UInt32(234), UInt32(15), UInt32(171), UInt32(172), UInt32(171), UInt32(74), UInt32(95), UInt32(174), UInt32(67), UInt32(136)]
        
        case _ => 
            var var259 : Interface142 = Class139<Option<Int32>>();
            var259;
            var var263 : Int16 = Int16(UInt16(Int8(Int8(-65))));
            var263 |= Int16(-10);
            [UInt32(252), var217, UInt32(1), UInt32(102), UInt32(243), UInt32(136), UInt32(106), var217, UInt32(186), var280]
        
    }[3]
}





public struct Aggregate731 {
    public init() { // block id: 733

    }
;
    public static func func736(param737 : Range<UInt8>, param738 : Range<Int8>, param739 : String, param740 : Int32) : Unit { // block id: 741
        var var2570 : (UInt16) -> UInt16 = func743;
        UInt16(UInt16(var1308))|>var2570;
        var2577--
    }

}

public enum Enum755 {
    defaultValue
}
public func func748(param749 : Int32, namedParam750 ! : UInt32, optionalParam751 ! : Rune = 'V') : Range<Int8> { // block id: 753
    var var792 : Int8 = Int8(Int8(Int8(-51)));
    let var798 : Range<Int8> = (Int8(68)&127..Int8(21)&127:(-13)|1);
    match (var758) {
        case defaultValue => 
            var var764 : Range<Int8> = (Int8(UInt8(66))&127..Int8(UInt8(UInt8(UInt8(89))))&127:((-51)|1));
            var764;
            (Int8(66)&127..Int8(101)&127:(-107)|1)
        
        case _ : Array<Bool> => 
            var344;
            (Int8(30)&127..=Int8(115)&127:(var65|1))
        
        case defaultValue => 
            (-49.0);
            (Int8(115)&127..=Int8(37)&127:95|1)
        
        case _ => 
            var344;
            var792 = var792;
            var798
        
    };
    (Int8(-68)&127..Int8(4)&127:(-85)|1)
}

public open class Class803 <: Resource {
    public init() { // block id: 805

    }
;
    var var810 : Int32 = Int32(79);
    let var830 : UInt32 = UInt32(112)
    public func isClosed(): Bool { return false }
    public func close(): Unit {}
}






func func918(param919 : (Range<Int32>, Int16, Range<Int16>, Rune)) : Int64 { // block id: 920
    var var929 : Float64 = Float64(Float32(Float32(72.0)));
    Int64(match ((UInt32(136) as Option<Bool>)) {
        case _ => 
            var929 **= Float64(Int32(var929) & 3);
            Int32(-104)
        
    })
}

func func910(param911 : Option<Range<Int32>>) : Int64 { // block id: 912
    var23;
    var915;
    let var940 : Bool = false;
    var var943 : (Rune, Range<UInt64>, Range<Int32>, (Range<Int32>, Int16, Range<Int16>, Rune), Range<Int32>, Range<UInt8>, Array<Bool>, Array<UInt32>) = ('S', (UInt64(18)&127..=UInt64(15)&127:109|1), (Int32(-15)&127..=Int32(-36)&127:23|1), ((Int32(-35)&127..Int32(-55)&127:(-35)|1), Int16(Int16(Int8(-71))), (Int16(-15)&127..Int16(-33)&127:(-55)|1), 'L'), (Int32(-11)&127..=Int32(53)&127:((-57)|1)), (UInt8(Int8(106))&127..UInt8(Int8(UInt8(9)))&127:(Int64(Int8(-61))|1)), [false, false, true, false, true, true, true, true, true, true], [UInt32(UInt32(181)), UInt32(4), UInt32(Int16(Int16(73))), UInt32(185), UInt32(UInt8(79)), UInt32(Int32(82)), UInt32(26), UInt32(96), UInt32(239), UInt32(89)]);
    var var998 : Array<Bool> = [((69&127..(-102)&127:(-62)|1) is Range<Int8>), (() is Bool), true, false, true, (Option<Unit>.Some(()) is Array<String>), true, ((Int64(UInt32(136))&127..Int64((-53))&127:(Int64(Int32(122))|1)) is Rune), true, (UInt16(248) is Option<Int32>)];
    if (var940) { var943 } else { (var986, (UInt64(91)&127..UInt64(90)&127:86|1), var990, var188, (Int32(-50)&127..=Int32(-25)&127:124|1), var995, var998, [UInt32(247), UInt32(238), UInt32(44), var217, var350, var217, UInt32(19), var350, UInt32(246), var350]) } [3]|>func918
}

public func func864(param865 : Unit) : Range<Int32> { // block id: 866
    var var871 : Int8 = Int8(26);
    let var1036 : ?Range<Int32> = (UInt8(210) as Range<Int32>);
    (Int32(var871) * (Option<Int32>.None ?? var880)&127..Int32(-77)&127:((var891[1] ?? (var1036|>func910))|1))
}


public func func1265(optionalParam1266 ! : Range<UInt16> = (UInt16(40)&127..=UInt16(94)&127:(81|1)), namedParam1271 ! : Option<Unit>, optionalParam1272 ! : (Int16, UInt16, UInt64) = (Int16(29), UInt16(Int16(UInt16(UInt16(26)))), UInt64(Int32(-108)))) : Option<Bool> { // block id: 1281
    var1283
}


public func func1313(param1314 : Range<Int64>) : Bool { // block id: 1315
    false
}


func func1090(param1091 : Range<UInt64>) : Range<Int32> { // block id: 1092
    Class139<Option<Int32>>();
    var var1117 : Class803 = Class803();
    let var1290 : Option<Unit> = Option<Unit>.None;
    let var1318 : (Range<Int64>) -> Bool = { lambdaParameter1321 : Range<Int64> => ((Int32(-42)&127..Int32(-17)&127:(51|1)) is (Int64, Option<Int64>, Array<String>)) };
    func func1254(namedParam1255 ! : Interface143, optionalParam1256 ! : Range<UInt64> = (UInt64(200)&127..=UInt64(169)&127:30|1)) : Bool { // block id: 1258
        (func1265(namedParam1271 : try { // block id: 1286
            var915;
            ();
            var1290
        } finally { // block id: 1292
            ();
            ();
            var1290
        }, optionalParam1272 : (var1302 ?? (var1308, UInt16(70), var23))) ?? ((var1334 ?? (var65&127..70&127:(58|1)))|>var1318))
    }
;
    let var1348 : Interface143 = Class139<Option<Int32>>(namedParam388 : (UInt16(116)&127..UInt16(71)&127:(Int64(UInt8(UInt8(31)))|1)), namedParam389 : (), optionalParam390 : (UInt64(9)&127..=UInt64(30)&127:(-7)|1));
    let var1626 : Int16 = Int16(UInt8(196));
    let var1668 : UInt8 = UInt8(Int8(UInt8(211)));
    var loopTimeVar1686 : Int64 = 0;
    do {
        loopTimeVar1686++;
        if (true) { var1117 } else { Class803() } ;
        let var1385 : Bool = (Int16(-96) is Int32);
        let var1441 : (Rune, Range<UInt64>, Range<Int32>, (Range<Int32>, Int16, Range<Int16>, Rune), Range<Int32>, Range<UInt8>, Array<Bool>, Array<UInt32>) = ('t', (UInt64(70)&127..UInt64(179)&127:((-21)|1)), (Int32(-33)&127..=Int32(-126)&127:((-122)|1)), ((Int32(38)&127..=Int32(UInt16(96))&127:(Int64(UInt16(141))|1)), Int16(-67), (Int16(93)&127..=Int16(34)&127:(-86)|1), 'Q'), (Int32(116)&127..Int32(UInt8(Int8(107)))&127:((-86)|1)), (UInt8(96)&127..UInt8(181)&127:(-55)|1), [([###"6f@MAkVe!T"###, "&PhbCW^G*5", "`/eJ0mFK'.", "vER,<z=qo+", ###"9@xemqsf] "###, "8:ba{Pkh/ZK", ###"!6\"F%-wuT;"###, """
\\Oh\"\"
a{pRbH
""", "PDU%5\" /QZ", "40%CSz+f(S"] is Option<(Range<Int32>, Int16, Range<Int16>, Rune)>), (Int64(Int16(-45)) is (Int32, UInt32, Rune) -> Range<Int8>), false, ((UInt16(150)&127..UInt16(48)&127:(26|1)) is Range<Int16>), ([UInt32(81), UInt32(221), UInt32(112), UInt32(225), UInt32(158), UInt32(114), UInt32(239), UInt32(58), UInt32(226), UInt32(128)] is Option<Range<Int32>>), false, false, (Int32(UInt8(125)) is Unit), true, (Option<Unit>.None is Unit)], [UInt32(UInt8(Int8(23))), UInt32(245), UInt32(UInt8(38)), UInt32(234), UInt32(Int8(-109)), UInt32(31), UInt32(Int16(UInt8(227))), UInt32(Int16(-5)), UInt32(111), UInt32(6)]);
        let var1527 : (Int32, UInt32, Range<UInt8>, Range<UInt8>, (Rune, Range<UInt64>, Range<Int32>, (Range<Int32>, Int16, Range<Int16>, Rune), Range<Int32>, Range<UInt8>, Array<Bool>, Array<UInt32>)) = (Int32(31), UInt32(190), (UInt8(61)&127..UInt8(UInt8(73))&127:(Int64(UInt64(227))|1)), (UInt8(Int8(Int8(91)))&127..=UInt8(UInt8(103))&127:(Int64(UInt64(Int16(-121)))|1)), ('Y', (UInt64(46)&127..=UInt64(57)&127:13|1), (Int32(65)&127..=Int32(UInt32(116))&127:(Int64(UInt64(62))|1)), ((Int32(-18)&127..=Int32(-34)&127:40|1), Int16(UInt8(236)), (Int16(103)&127..Int16(-116)&127:(-122)|1), '8'), (Int32(-126)&127..Int32(UInt32(143))&127:(Int64(UInt32(22))|1)), (UInt8(153)&127..UInt8(UInt8(153))&127:(Int64(UInt8(176))|1)), [((UInt16(161)&127..=UInt16(66)&127:(-109)|1) is Aggregate731), (Option<Int64>.Some((-85)) is (Range<Int64>) -> Bool), true, false, ((41, Option<Int64>.Some((-126)), [###"Kh0D#v$%fC"###, ###"\\$Z~<,36-t"###, ###"mNNNwYXD|\""###, "h+<o} 5XOm", """
==T$`
j#3Z/
""", "];rJBjfC3=", """
_;*C`
=#`a_
""", """
-vdvM
BNkfr
""", "naiC%mS.'t", """
&Yy`:
c @e@
"""]) is Range<Int8>), (Option<Range<Int32>>.None is (Range<Int64>, UInt64) -> Bool), ('O' is UInt8), true, false, (Option<Int32>.Some(Int32(78)) is Array<Option<UInt32>>)], [UInt32(216), UInt32(221), UInt32(151), UInt32(78), UInt32(48), UInt32(51), UInt32(169), UInt32(146), UInt32(50), UInt32(91)]));
        let var1647 : Array<Bool> = [true, true, false, true, false, true, true, false, false, false];
        func func1121() : (Rune, Range<UInt64>, Range<Int32>, (Range<Int32>, Int16, Range<Int16>, Rune), Range<Int32>, Range<UInt8>, Array<Bool>, Array<UInt32>) { // block id: 1122
            var990;
            var var1126 : Int32 = Int32(UInt16(27));
            var1126 *= match (false) {
                case _ => 
                    var var1136 : Bool = (() is ((Range<Int32>, Int16, Range<Int16>, Rune)) -> Int64);
                    var1136 &&= false;
                    var880
                
                case _ => 
                    (98&127..=var65&127:(var65|1));
                    var var1148 : Range<Int8> = (Int8(72)&127..=Int8(-4)&127:(-50)|1);
                    var1148;
                    Int32(-28) >> ((var880) & 7)
                
            };
            func func1228(param1229 : Class803, optionalParam1230 ! : (Int64, Option<Int64>, Array<String>) = (103, Option<Int64>.Some(118), ["v'AnnBOg;a", """
\"3 N)
~nbt/
""", "XZ^95>a{`X:", ",aJON9-HXO", ###"zA(U\"In=6)"###, "\"-h177,!:*", "eLhve*toVx", "w;vZ3)Hja{V", "@gAsIZeHa{r", """
;FK@H
_,Xh=
"""]), optionalParam1246 ! : Option<(Range<Int32>, Int16, Range<Int16>, Rune)> = ([false, false, true, false, false, false, true, false, true, false] as (Range<Int32>, Int16, Range<Int16>, Rune)), optionalParam1249 ! : Int8 = Int8(-64)) : (Rune, Range<UInt64>, Range<Int32>, (Range<Int32>, Int16, Range<Int16>, Rune), Range<Int32>, Range<UInt8>, Array<Bool>, Array<UInt32>) { // block id: 1251
                let var1366 : Array<Bool> = Array<Bool>(10){ i => true };
                let var1408 : Array<UInt32> = Array<UInt32>(10){ i => UInt32(54) };
                let var1524 : Bool = true;
                if (func1254(namedParam1255 : var1348)) { match (Option<Bool>.None) {
                    case _ : (Int32, UInt32, Range<UInt8>, Range<UInt8>, (Rune, Range<UInt64>, Range<Int32>, (Range<Int32>, Int16, Range<Int16>, Rune), Range<Int32>, Range<UInt8>, Array<Bool>, Array<UInt32>)) => 
                        var1366;
                        if (var1385) { (var880, var217, (UInt8(161)&127..=var12&127:(69|1)), var995, ('I', (UInt64(225)&127..=UInt64(73)&127:8|1), (Int32(27)&127..var880&127:((-6)|1)), var188, var990, var995, var1366, var1408)) } else { (var880, var217, (UInt8(96)&127..=UInt8(21)&127:97|1), (UInt8(182)&127..=UInt8(39)&127:5|1), var1441) } 
                    
                    case _ => 
                        if (var1524) { var1527 } else { var1527 } 
                    
                }[4] } else { var1441 } 
            }
;
            let var1616 : UInt64 = UInt64(143);
            var var1652 : Rune = '2';
            var var1678 : Int16 = Int16(UInt8(UInt8(UInt8(37))));
            try { // block id: 1154
                var482;
                var loopTimeVar1226 : Int64 = 0;
                while ((true) && loopTimeVar1226 < 100 ) {
                    loopTimeVar1226++;
                    Class139<Option<Int32>>(namedParam388 : (var1162&127..=var1162&127:(95|1)), namedParam389 : ());
                    if (false) { var1170 } else { [Option<UInt32>.Some(var217), var1102, Option<UInt32>.None, Option<UInt32>.Some(UInt32(45)), Option<UInt32>.Some(UInt32(63)), Option<UInt32>.Some(var217), var1102, Option<UInt32>.Some(UInt32(12)), Option<UInt32>.Some(var217), Option<UInt32>.Some(var350)] } 
                };
                func1228(Class803())
            } catch (e: Exception) { // block id: 1601
                var loopTimeVar1606 : Int64 = 0;
                while ((false) && loopTimeVar1606 < 100 ) {
                    loopTimeVar1606++;

                };
                var var1609 : Bool = false;
                var var1635 : Range<Int32> = (Int32(Int8(55))&127..=Int32(UInt16(191))&127:((-106)|1));
                if (var1609) { ('f', (var23&127..=var1616&127:(var65|1)), var990, ((var1126&127..var880&127:(106|1)), var1626, (var1308&127..Int16(-38)&127:(43|1)), 'I'), var1635, (UInt8(197)&127..var12&127:(var65|1)), var1647, [UInt32(173), UInt32(91), UInt32(59), UInt32(127), UInt32(105), UInt32(155), UInt32(188), UInt32(41), UInt32(157), UInt32(159)]) } else { (var1652, (UInt64(117)&127..=UInt64(79)&127:(-52)|1), (Int32(84)&127..=Int32(83)&127:((-75)|1)), (var990, var1626, (Int16(-70)&127..=Int16(109)&127:125|1), var1652), (Int32(36)&127..Int32(-112)&127:52|1), (var12&127..var1668&127:((-117)|1)), [false, true, false, true, true, true, true, false, true, true], [UInt32(137), UInt32(63), UInt32(17), UInt32(145), UInt32(233), UInt32(127), UInt32(237), UInt32(106), UInt32(56), UInt32(140)]) } 
            } finally { // block id: 1675
                var1678 += var1308;
                var1441
            }
        }
;
        func1121()
    } while ((([Option<UInt32>.None, Option<UInt32>.None, var1102, var1102, var1102, Option<UInt32>.Some(UInt32(114)), Option<UInt32>.None, var1102, Option<UInt32>.None, Option<UInt32>.None][6] is UInt8)) && loopTimeVar1686 < 100 ) ;
    var var1718 : Int64 = Int64(UInt16(UInt16(Int16(-31))));
    (try { // block id: 1689
        var880
    } finally { // block id: 1691
        if (false) { var1695 } else { Option<Range<Int32>>.Some(var990) } ;
        var23 ^= UInt64(13);
        Int32(-11)
    }&127..match (('x', param1091, (Int32(24)&127..Int32(13)&127:(-107)|1), ((Int32(60)&127..Int32(-30)&127:103|1), var1308, (Int16(10)&127..Int16(72)&127:41|1), 'l'), (Int32(-55)&127..=Int32(-14)&127:(var1718|1)), var995, var1725, [UInt32(67), UInt32(184), var350, UInt32(142), var217, var350, var1735, var350, UInt32(195), UInt32(85)])[4]) {
        case _ : Range<Int16> => 
            var473;
            ();
            Int32(30)
        
        case caseVar1749 : Int64 => 
            -var880
        
        case caseVar1755 => 
            Int32(71)
        
        case _ => 
            ();
            var880
        
        case _ => 
            ();
            var1767;
            -Int32(76)
        
    }&127:(if ((var1283 ?? true)) { // block id: 1819
        var65
    } else { // block id: 1821
        var var1823 : Unit = ();
        var1823;
        Option<Int64>.None;
        var1718
    }|1))
}





func func1830(param1831 : Unit) : Range<UInt64> { // block id: 1832
    let var1876 : Array<Option<Unit>> = [((Int32(UInt16(129)), UInt32(67), (UInt8(25)&127..=UInt8(187)&127:(-122)|1), (UInt8(29)&127..=UInt8(226)&127:75|1), ('9', (UInt64(246)&127..UInt64(96)&127:103|1), (Int32(-68)&127..Int32(82)&127:(7|1)), ((Int32(28)&127..Int32(-59)&127:(-4)|1), Int16(58), (Int16(90)&127..=Int16(42)&127:4|1), '5'), (Int32(13)&127..=Int32(-105)&127:(0|1)), (UInt8(145)&127..UInt8(207)&127:(-12)|1), [false, true, true, false, false, false, false, false, true, true], [UInt32(235), UInt32(30), UInt32(238), UInt32(96), UInt32(73), UInt32(82), UInt32(184), UInt32(196), UInt32(235), UInt32(170)])) as Unit), Option<Unit>.None, Option<Unit>.Some(()), (((Int32(-4)&127..Int32(114)&127:(-16)|1), Int16(-48), (Int16(-81)&127..Int16(52)&127:66|1), 'I') as Unit), ((["""
a{9zLI
'5 3+
""", ###"%=:_.3%M1c"###, "]e4EWF4|Zj", "W)i&@P,F\\:", "[t#ye-q7^(", """
f}1V\\
SnYRP
""", """
(1<a{T
<=q1k
""", """
We&a{o
%=Nlg
""", "WGYk\"-t@qs", "ZZ;2>rcmV'"] as Range<Int32>) as Unit), Option<Unit>.None, ([Option<Unit>.Some(()), ((Int8(84)&127..Int8(-8)&127:(-24)|1) as Unit), Option<Unit>.None, (('2', (UInt64(64)&127..=UInt64(236)&127:(59|1)), (Int32(-97)&127..Int32(62)&127:(-81)|1), ((Int32(-23)&127..=Int32(96)&127:((-68)|1)), Int16(-53), (Int16(19)&127..=Int16(-80)&127:82|1), 'O'), (Int32(-120)&127..Int32(55)&127:(46|1)), (UInt8(68)&127..=UInt8(250)&127:(109|1)), [true, false, true, false, true, true, true, false, false, true], [UInt32(245), UInt32(26), UInt32(49), UInt32(147), UInt32(165), UInt32(159), UInt32(81), UInt32(150), UInt32(191), UInt32(12)]) as Unit), ("""
C'p)O
x<<a{+
""" as Unit), (UInt8(141) as Unit), Option<Unit>.Some(()), Option<Unit>.Some(()), Option<Unit>.None, ("We%5B& (00" as Unit)] as Unit), ((Int16(79), UInt16(UInt8(131)), UInt64(Int32(-116))) as Unit), Option<Unit>.Some(()), Option<Unit>.None];
    try { // block id: 1836
        if (true) { 'N' } else { 'X' } ;
        let var1843 : Bool = false;
        if (var1843) { [Option<Unit>.None, var1848, Option<Unit>.None, Option<Unit>.Some(var344), Option<Unit>.Some(()), Option<Unit>.Some(var374), var1848, var1848, var1848, Option<Unit>.Some(var344)] } else { [var1848, var1848, Option<Unit>.None, var1848, Option<Unit>.None, var1848, var1848, Option<Unit>.None, Option<Unit>.Some(var915), Option<Unit>.None] } 
    } finally { // block id: 1874
        var1876
    }[2];
    let var2095 : Range<UInt64> = (UInt64(Int32(-27))&127..UInt64(118)&127:((-106)|1));
    (((Option<Option<Option<Option<Option<UInt32>>>>>.Some(Option<Option<Option<Option<UInt32>>>>.None) ?? Option<Option<Option<Option<UInt32>>>>.Some(Option<Option<Option<UInt32>>>.None)) ?? var2004[2]) ?? (if (true) { // block id: 2073
        var2076 |= var2076;
        var23 += UInt64(96);
        let var2088 : Range<UInt8> = (UInt8(205)&127..UInt8(197)&127:14|1);
        (var2076, var350, (UInt8(87)&127..=UInt8(188)&127:44|1), var2088, (var2092, var2095, var2102, ((var2076&127..=Int32(-28)&127:((-111)|1)), Int16(123), (var1308&127..=var1308&127:(var65|1)), 'H'), (Int32(-108)&127..=Int32(70)&127:(var65|1)), (UInt8(107)&127..UInt8(163)&127:79|1), var1725, var2125))
    } else { // block id: 2147
        (var2076, UInt32(63), (UInt8(218)&127..=UInt8(41)&127:118|1), (UInt8(120)&127..UInt8(206)&127:77|1), var1767)
    } as Option<UInt32>));
    var var2190 : Unit = ();
    var var2200 : Int8 = Int8(-42);
    let var2212 : ?UInt64 = Option<UInt64>.None;
    (UInt64(match (UInt8(125)) {
        case 207 => 
            ('D', var2095, var990, var188, (Int32(123)&127..=Int32(-3)&127:(var65|1)), (var12&127..var12&127:(var65|1)), [false, false, true, true, false, false, false, false, false, false], [UInt32(74), UInt32(52), UInt32(145), UInt32(241), UInt32(236), UInt32(0), UInt32(44), UInt32(144), UInt32(137), UInt32(138)]);
            UInt32(100)
        
        case _ => 
            var350
        
        case _ => 
            var344;
            var350
        
    })&127..match {
        case true => 
        var2190;
        UInt64(240)
        case false => 
        var473;
        UInt64(176)
        case _ => 
        var2200 **= (var2200 & 3);
        var23 & UInt64(171)
    } >> (((var2212 ?? var23)) & 7)&127:(Int64(match (Option<Bool>.None) {
        case _ => 
            var473;
            if (false) { (UInt8(169)&127..var12&127:(var65|1)) } else { (UInt8(137)&127..UInt8(86)&127:42|1) } ;
            var2229
        
    })|1))
}


public func func835(param836 : Range<UInt16>, optionalParam837 ! : (Int16, UInt16, UInt64) = (Int16(-38), UInt16(99), UInt64(235)), optionalParam842 ! : (Int32, UInt32, Rune) -> Range<Int8> = func748, optionalParam848 ! : Array<Bool> = [true, false, true, true, true, false, false, true, true, true]) : (Int16, UInt16, UInt64) { // block id: 850
    var var860 : Class803 = Class803();
    let var1828 : (Range<UInt64>) -> Range<Int32> = func1090;
    let var2232 : (Unit) -> Range<UInt64> = func1830;
    let var2256 : ?Int64 = ((-123) as Int64);
    var var2278 : Int64 = (-109);
    (((if (false) { var860 } else { Class803() } ) as Range<Int32>) ?? ((var2278 >>= ((113) & 7))|>{ lambdaParameter1041 : Unit => var var1072 : Bool = ((Int16(31), UInt16(248), UInt64(Int32(-126))) is (Unit) -> Range<Int32>); var loopTimeVar2240 : Int64 = 0; let var2247 : ??Bool = Option<Option<Bool>>.None; if (match (Option<Bool>.Some(true)) {
        case caseVar1050 : Rune => 
            let var1054 : Float32 = Float32(Float32(Float32(Float32(120.0))));
            var1054 * Float32(30.0);
            var1054;
            [false, false, true, true, true, false, true, false, false, false]
        
        case caseVar1064 : Enum755 => 
            [true, true, true, false, false, true, false, false, true, true]
        
        case _ => 
            [false, var1072, var1072, true, false, var1072, var1072, false, false, var1072]
        
    }[9]) { (do {
        loopTimeVar2240++;
        ();
        var986
    } while ((true) && loopTimeVar2240 < 100 ) |>(var2232~>var1828)) } else { (if (try { // block id: 2243
        var1072
    } finally { // block id: 2245
        var2247;
        var1072
    }) { (Int32(123)&127..=Int32(79)&127:(-9)|1) } else { try { // block id: 2252
        if (false) { var2256 } else { var2256 } ;
        Int32(-11);
        if (var1072) { var2102 } else { (Int32(-53)&127..Int32(-53)&127:63|1) } 
    } catch (_) { // block id: 2265
        (var65&127..71&127:(var65|1));
        Int16(48) / ((var1308) | 1);
        (Int32(-42)&127..=Int32(24)&127:2|1)
    } finally { // block id: 2274
        (Int32(25)&127..=Int32(72)&127:(-98)|1)
    } } ) }  }));
    var var2289 : ?UInt8 = Option<UInt8>.None;
    if (((var2289 ?? var12) > if (true) { // block id: 2294
        var2296;
        var12
    } else { // block id: 2337
        var12
    })) { match (if (var2342) { (var12&127..=var12&127:(89|1)) } else { var995 } ) {
        case _ => 
            var var2355 : ??Option<UInt32> = (UInt64(224) as Option<Option<UInt32>>);
            var2355;
            var1302;
            optionalParam837
        
        case caseVar2362 : Option<Bool> => 
            var1170;
            ();
            if (var2342) { (Int16(60), UInt16(170), UInt64(237)) } else { (var1308, UInt16(127), UInt64(204)) } 
        
        case caseVar2378 => 
            var1308;
            if (false) { optionalParam837 } else { optionalParam837 } 
        
        case _ => 
            var var2389 : Int16 = Int16(-127);
            var2389 ^= Int16(40);
            (var1308, var1162, var23)
        
    } } else { var2399[6] } 
}

public func func743(param744 : UInt16) : UInt16 { // block id: 745
    Option<Bool>.None;
    let var807 : Class803 = Class803();
    func748((var807.var810) + Int32(Int8(-83)), namedParam750 : ((Option<Option<UInt32>>.None ?? Option<UInt32>.Some(var217)) ?? var807.var830));
    let var2477 : UInt64 = UInt64(UInt64(Int8(77)));
    let var2482 : Range<UInt16> = (UInt16(216)&127..UInt16(Int16(-84))&127:(Int64(Int16(-24))|1));
    var var2544 : Bool = (Int32(-94) is Option<Option<UInt32>>);
    var var2550 : Bool = ((Option<Option<Bool>>.Some(Option<Bool>.None) as UInt64) is (Range<UInt64>) -> Range<Int32>);
    func835((UInt16(65)&127..UInt16(95)&127:(var65|1)), optionalParam837 : ((Int32(-112)&127..=Int32(-116)&127:(-120)|1), var2092, var2471, (Int16(-64), param744, var2477), var2482, [true, true, var2342, true, true, var2342, var2497, true, false, true])[3], optionalParam848 : [[false, false, false, false, true, false, true, false, false, true], [true, false, false, false, false, false, false, true, false, false], var1725, [false, false, var2497, false, true, true, var2517, false, var2342, true], var1725, [var2342, false, var2517, true, true, var2342, true, var2517, true, var2342], [false, true, false, false, true, false, true, true, true, false], [true, false, false, false, false, false, false, true, false, false], [var2497, false, true, false, var2517, var2544, var2517, var2342, var2550, true], [false, true, var2497, false, false, true, var2517, var2550, true, true]][6])[1]
}

func func727(param728 : UInt16) : (Range<Int32>, Int16, Range<Int16>, Rune) { // block id: 729
    let var2626 : (Int16, UInt16, UInt64) = (Int16(24), UInt16(Int16(-72)), UInt64(UInt8(Int8(Int8(-62)))));
    let var2663 : Int16 = Int16(Int8(Int8(-101)));
    var var2751 : Int8 = Int8(43);
    Aggregate731.func736(match (109) {
        case -111 | -90 => 
            var915;
            if (var2342) { var986 } else { 'G' } ;
            if (true) { var995 } else { (UInt8(2)&127..UInt8(152)&127:(var65|1)) } 
        
        case 53 | 55 | 37 | -2 => 
            var var2604 : (Int16, UInt16, UInt64) = (Int16(111), UInt16(211), UInt64(UInt32(49)));
            let var2638 : (Int16, UInt16, UInt64) = (Int16(-26), UInt16(UInt8(UInt8(UInt8(81)))), UInt64(UInt8(UInt8(156))));
            if (true) { [var2604, var2604, var2612, var2604, var2604, var2604, var2626, var2626, var2612, var2638] } else { [var2626, (var1308, var2577, var23), (Int16(48), UInt16(63), UInt64(216)), var2604, var2626, var2604, (var2663, UInt16(180), UInt64(216)), (Int16(56), var1162, UInt64(6)), (var2663, UInt16(160), UInt64(150)), var2612] } ;
            var995
        
        case 59 => 
            Option<Int64>.Some((-7));
            Class803();
            (UInt8(235)&127..UInt8(145)&127:(-3)|1)
        
        case -40 => 
            var2690;
            if (var2517) { Class139<Option<Int32>>(namedParam388 : var2725, namedParam389 : var473) } else { Class139<Option<Int32>>(namedParam388 : (UInt16(11)&127..UInt16(54)&127:110|1), namedParam389 : var374, optionalParam390 : (UInt64(133)&127..UInt64(118)&127:1|1)) } ;
            if (true) { (var12&127..UInt8(226)&127:(var65|1)) } else { var995 } 
        
        case _ => 
            var2092;
            UInt8(97) / ((var12) | 1);
            var995
        
    }, if (var2497) { (Int8(84)&127..=Int8(53)&127:(-122)|1) } else { (var2751&127..=Int8(117)&127:(var65|1)) } , var2756, (var2760 ?? var880));
    var188
}

public func func713(param714 : Bool) : (Range<Int32>, Int16, Range<Int16>, Rune) { // block id: 715
    var var2795 : (UInt16) -> (Range<Int32>, Int16, Range<Int16>, Rune) = func727;
    (var722 ?? (UInt16(63)|>var2795))
}


public func func120(param121 : Range<UInt16>) : UInt64 { // block id: 122
    let var321 : (Array<String>) -> Option<Interface142> = func174;
    let var381 : (() -> UInt32) -> Interface142 = { lambdaParameter384 : () -> UInt32 => Class139<Option<Int32>>(namedParam388 : (UInt16(164)&127..=UInt16(2)&127:58|1), namedParam389 : ()) };
    let var517 : Range<UInt64> = (UInt64(UInt32(Int16(UInt8(252))))&127..=UInt64(Int32(UInt8(146)))&127:(Int64(Int32(-68))|1));
    let var590 : Unit = ();
    func func555(param556 : Range<Int64>, optionalParam557 ! : UInt64 = UInt64(2)) : Bool { // block id: 559
        var var580 : UInt16 = UInt16(1);
        var var597 : Option<Option<Interface142>> = Option<Option<Interface142>>.Some((Class139<Option<Int32>>() as Interface142));
        match (try { // block id: 562
                Option<Option<Option<Bool>>>.None
            } finally { // block id: 564
                ();
                Option<Option<Option<Bool>>>.None
            }) {
            case caseVar569 : String => 
                var350 != var350
            
            case caseVar576 : Int32 => 
                var580 ^= var580;
                if (false) { Option<Option<Interface142>>.Some(Option<Interface142>.Some(Class139<Option<Int32>>(namedParam388 : (UInt16(59)&127..UInt16(248)&127:33|1), namedParam389 : var590, optionalParam390 : (UInt64(195)&127..=optionalParam557&127:((-10)|1))))) } else { var597 } ;
                true
            
            case _ => 
                var331
            
        }
    }
;
    let var607 : Range<Int8> = (Int8(68)&127..=Int8(-67)&127:(126|1));
    func func125(param126 : UInt64, namedParam127 ! : UInt32, optionalParam128 ! : Bool = false, namedParam130 ! : String) : Bool { // block id: 131
        var var135 : Range<Int32> = (Int32(-55)&127..=Int32(121)&127:(-86)|1);
        var loopTimeVar148 : Range<UInt64> = (UInt64(221)&127..=UInt64(150)&127:((-82)|1));
        for (i in loopTimeVar148 where (var135 is UInt16)) {
            Class139<Option<Int32>>.var146
        };
        var var501 : () -> UInt32 = {  => UInt32(242) };
        if (try { // block id: 155
            var var158 : UInt32 = UInt32(80);
            var158 **= (var158 & 3);
            optionalParam128
        } catch (_) { // block id: 162
            Int32(-121);
            true
        } finally { // block id: 165
            ();
            optionalParam128
        }) { ((["aQY>p>,|L*", " ;-08HuD^V", "t-Il%cHto#", "sqfK}K=`]C", """
@0WP7
~8h-S
""", "r-y!QlX^~A", """
`:bB;
;CZ76
""", "On'ZhL/\"@Q", ###"X`'B9E%aJw"###, "7[f.p-jyYO"]|>var321) ?? (var501|>var381)) } else { try { // block id: 507
            if (var331) { var511 } else { Class139<Option<Int32>>(namedParam388 : (UInt16(66)&127..=UInt16(60)&127:(-100)|1), namedParam389 : var374, optionalParam390 : var517) } 
        } catch (e: Exception) { // block id: 528
            var492;
            if (false) { var511 } else { Class139<Option<Int32>>() } 
        } } ;
        (((var550 ?? Option<Option<Bool>>.None) ?? Option<Bool>.None) ?? func555(match (var607) {
            case _ : Array<UInt32> => 
                ((-73)&127..=(-55)&127:30|1)
            
            case caseVar618 : Interface142 => 
                var350++;
                (UInt64(113)&127..=UInt64(191)&127:(-22)|1);
                if (var331) { (103&127..0&127:(var65|1)) } else { (var65&127..=var65&127:(var65|1)) } 
            
            case _ : UInt8 => 
                var473;
                if (var331) { (43&127..=40&127:(-14)|1) } else { ((-105)&127..10&127:(-81)|1) } 
            
            case _ => 
                var var645 : Range<Int64> = (Int64(UInt64(66))&127..=Int64(Int8(-21))&127:(Int64(Int64(UInt64(178)))|1));
                var645
            
            case _ => 
                var492 ^= Int8(-99);
                var350 -= var280;
                (1&127..=44&127:(108|1))
            
        }, optionalParam557 : UInt64(142)))
    }
;
    func func668(param669 : Class139<Option<Int32>>, optionalParam670 ! : Rune = '5') : UInt64 { // block id: 672
        var var687 : UInt16 = UInt16(155);
        UInt16(150) * if ((Option<Bool>.Some(false) ?? false)) { // block id: 680
            if (true) { Option<Unit>.Some(var344) } else { Option<Unit>.None } ;
            var687
        } else if (var692[2]) { // block id: 695
            if (true) { '7' } else { 'M' } ;
            var687 / ((UInt16(28)) | 1)
        } else { // block id: 703
            ();
            (var12&127..=UInt8(235)&127:(var65|1));
            var687
        };
        try { // block id: 711
            func713(true);
            if (var2497) { // block id: 2801
                UInt64(157)
            } else { // block id: 2803
                (-36.0);
                var344;
                var23
            }
        } catch (e: Exception) { // block id: 2807
            try (resource = Class803()) { // block id: 2809

            } catch (e: Exception) { // block id: 2810

            };
            match (var2813) {
                case _ => 
                    ();
                    ()
                
            };
            UInt64(96)
        }
    }
;
    let var2879 : ?Bool = (UInt32(66) as Bool);
    let var2900 : ?String = Option<String>.Some("'b13\"_>-& ");
    var loopTimeVar2925 : Int64 = 0;
    while ((func125(func668(Class139<Option<Int32>>()), namedParam127 : var2229 ^ UInt32(245), optionalParam128 : try { // block id: 2873
        var492++;
        if (var2342) { var2879 } else { Option<Bool>.Some(false) } ;
        var2497
    } finally { // block id: 2885
        var915;
        var2517
    }, namedParam130 : (Option<String>.None ?? "fHfRa{x,-DN"))) && loopTimeVar2925 < 100 ) {
        loopTimeVar2925++;
        (var2900, (var56&127..=Int8(-96)&127:(var65|1)), ('s', (var23&127..UInt64(247)&127:(77|1)), (Int32(30)&127..Int32(97)&127:(114|1)), var188, (Int32(-127)&127..=Int32(-79)&127:62|1), var995, var692, [UInt32(224), UInt32(229), UInt32(79), UInt32(12), UInt32(93), UInt32(242), UInt32(169), UInt32(100), UInt32(150), UInt32(99)]))[0];
        Option<(Int16, UInt16, UInt64)>.None
    };
    var loopTimeVar2981 : Int64 = 0;
    while ((var2930[2]) && loopTimeVar2981 < 100 ) {
        loopTimeVar2981++;
        var var2970 : Range<Int64> = (Int64(UInt8(Int8(-19)))&127..79&127:((-83)|1));
        (var2342, (UInt8(186)&127..UInt8(128)&127:52|1), var2970, Option<Unit>.Some(var915))[3]
    };
    match (try { // block id: 2985
            var473;
            if (false) { var2879 } else { var2879 } 
        } finally { // block id: 2991
            if (var2342) { var2879 } else { Option<Bool>.Some(false) } 
        }) {
        case _ => 
            Option<Bool>.None;
            var var3005 : ??Bool = (UInt64(227) as Option<Bool>);
            if (true) { var550 } else { Option<Option<Option<Bool>>>.Some(var3005) } ;
            var23
        
    } / ((match {
        case [true, true, false, false, true, true, false, false, false, true][5] => 
        var590;
        var23
        case _ => 
        if (var331) { var235 } else { [var2229, UInt32(210), UInt32(158), UInt32(180), UInt32(94), UInt32(56), var2229, var280, var280, var2229] } ;
        UInt64(248) & var23
    }) | 1)
}

func func20() : Unit { // block id: 21
    var23;
    let var30 : Bool = false;
    let var61 : String = "bl 4prxGDQ";
    let var89 : Option<Unit> = (("Q(<^\\/${var61}wZI$" as Unit) as Unit);
    func func70(param71 : Int8, namedParam72 ! : Bool, optionalParam73 ! : UInt16 = UInt16(UInt8(Int8(-50))), optionalParam77 ! : Rune = 'H') : String { // block id: 79
        var var105 : Array<String> = Array<String>(10){ i => ")N:M:s(p0>" };
        try { // block id: 81
            Int8(116);
            (var89 ?? ());
            var105[4]
        } finally { // block id: 118
            (UInt16(40)&127..=UInt16(254)&127:(-120)|1)|>func120;
            var2471[0]
        }
    }
;
    var loopTimeVar3041 : Range<UInt64> = (UInt64(UInt16(193))&127..UInt64(Int16(39))&127:((-128)|1));
    for (i in loopTimeVar3041 where match (if (var30) { // block id: 32
            ();
            if (var30) { 'M' } else { 'L' } ;
            var var41 : Int8 = Int8(-9);
            Int8(15) - var41
        } else { // block id: 43
            var23 >>= ((var23) & 7);
            let var48 : Int8 = Int8(-9);
            var48
        }) {
        case -122 | -83 => 
            Int8(-35) > var56
        
        case _ => 
            var61;
            var65 > var65
        
    }) {
        func70(var56, namedParam72 : false)
    }
}

public func func16(param17 : Float32) : UInt8 { // block id: 18
    func20();
    [UInt8(77), UInt8(202), UInt8(147), UInt8(154), UInt8(48), UInt8(28), UInt8(146), UInt8(75), UInt8(130), UInt8(244)][0]
}

public func func7() : Unit { // block id: 8
    true;
    let var3057 : Float32 = Float32(30.0);
    var12 |= func16(try { // block id: 3053
        Float32(-47.0) - var3057
    } catch (_) { // block id: 3059
        var374;
        var var3064 : Interface143 = Class139<Option<Int32>>(namedParam388 : (UInt16(169)&127..UInt16(UInt16(UInt8(71)))&127:(Int64(UInt32(20))|1)), namedParam389 : (), optionalParam390 : (UInt64(71)&127..=UInt64(53)&127:(-31)|1));
        if (var331) { var3064 } else { Class139<Option<Int32>>(namedParam388 : (UInt16(67)&127..=UInt16(180)&127:(-12)|1), namedParam389 : var915) } ;
        var3057
    });
    var3080
}

main(): Int64 {
    try {
        func7();
        match {
            case match (Option<String>.None) {
            case caseVar3087 : Range<Int64> => 
                var2497
            
            case _ : String => 
                var2125;
                var2517
            
            case caseVar3097 => 
                ["""
|QRIW
ua{C^K
""", "y/a{t<#A2ZF", "eJa-m+.\"T\"", """
6*\"W:
+8u+}
""", """
@2=OR
_a+[Y
""", ")b>;U\"Z-oR", "qyL}^ml Xc", """
km,-%
wLZ%q
""", """
[sRL>
G3w\\N
""", "wF(Z`W?sa{k"];
                Class139<Option<Int32>>();
                var331
            
            case caseVar3119 : Option<(Int16, UInt16, UInt64)> => 
                false
            
            case _ => 
                false
            
        } => 
            ",xe(\\a{ rgj"
            case _ => 
            var2756
        };
        let var3169 : ?Interface142 = Option<Interface142>.Some(Class139<Option<Int32>>());
        match (match (Option<Range<Int64>>.None) {
                case caseVar3134 => 
                    var12 <<= ((var12) & 7);
                    if (var2517) { var2612 } else { var3143 } ;
                    var1308 + Int16(107)
                
                case _ : Range<Int16> => 
                    Int16(118) * var1308
                
                case caseVar3163 : (Int64, Option<Int64>, Array<String>) => 
                    var1308
                
                case _ => 
                    var3169;
                    var2076 **= (var880 & 3);
                    Int16(42) / ((var1308) | 1)
                
            }) {
            case 71 | -119 => 
                var65 & (-73)
            
            case _ => 
                (-96)
            
        }
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var56*var56), 64)
        crccheck.updateBuffer(UInt64(var280*var280), 64)
        crccheck.updateBuffer(UInt64(var492*var492), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend<T0> Class139<T0> where T0 <: Option<Int32> {

}

extend Enum755 {

}

extend Class803 {

}

extend Aggregate731 {

}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_unexpected_declaration_in_scope
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_expected_character
// ASSERT: scan parse_expected_expr_or_decl_in
// ASSERT: scan parse_expected_left_brace
// ASSERT: scan parse_expected_case


