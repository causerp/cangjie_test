/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output


public let var7 : Float32 = Float32(-31.0)
public var var14 : Unit = ()
public var var23 : Class17 = Class17()
public var var38 : ?String = Option<String>.None
public var var44 : UInt8 = UInt8(24)
public var var72 : Float64 = 68.0
public var var132 : (String, Option<Range<UInt64>>, String, UInt64) = ("""
~XcWU
?Pb#i
""", (UInt64(203) as Range<UInt64>), "jR)~F48vcL", UInt64(Int8(Int8(UInt8(53)))))
public let var152 : Bool = (Float64(Float64(Float64(Float32(11.0)))) is Float32)
public var var160 : Int64 = Int64(Int64(UInt16(21)))
public let var183 : ?UInt64 = (UInt32(UInt32(UInt8(Int8(-46)))) as UInt64)
public let var229 : Float64 = (-66.0)
public var var235 : Float64 = Float64(Float32(8.0))
var var321 : Interface21 = Class17()
public let var327 : UInt16 = UInt16(93)
public let var339 : Bool = ((UInt16(245)&127..=UInt16(195)&127:(-88)|1) is Range<UInt64>)
var var344 : Range<Int8> = (Int8(Int8(-53))&127..=Int8(-75)&127:(48|1))
public var var397 : (Class17, UInt32, (UInt16, Int32, UInt16, Unit, Range<Int64>, Int32)) = (Class17(), UInt32(Int16(Int8(UInt8(181)))), (UInt16(162), Int32(123), UInt16(Int8(Int8(-122))), (), ((-5)&127..=(-110)&127:(Int64(Int32(63))|1)), Int32(Int16(Int8(-71)))))
public var var422 : UInt16 = UInt16(Int8(UInt8(UInt8(226))))
public let var428 : UInt16 = UInt16(Int8(Int8(Int8(Int8(73)))))
public var var437 : ?Range<UInt64> = (Class17() as Range<UInt64>)
public var var448 : Int8 = Int8(UInt8(UInt8(230)))
public var var459 : Range<UInt64> = (UInt64(36)&127..=UInt64(180)&127:(-116)|1)
public let var464 : Int32 = Int32(UInt8(103))
public let var524 : UInt64 = UInt64(Int32(41))
public var var601 : ?Unit = Option<Unit>.None
public var var692 : (UInt16, Int32, UInt16, Unit, Range<Int64>, Int32) = (UInt16(UInt8(225)), Int32(97), UInt16(154), (), (83&127..=13&127:(-17)|1), Int32(-2))
let var712 : Int16 = Int16(Int16(UInt16(UInt16(249))))
public var var723 : String = ###"ruR@pSIp4j"###
public let var741 : ?Range<Int8> = Option<Range<Int8>>.None
public var var754 : (Int64, Range<UInt8>, Float32, Option<Unit>, Unit, Array<Float64>, UInt64) = ((-116), (UInt8(81)&127..UInt8(Int8(Int8(85)))&127:(Int64(UInt32(106))|1)), Float32(Float32(64.0)), (UInt64(UInt16(58)) as Unit), (), [119.0, 87.0, (-96.0), 100.0, 92.0, 36.0, 81.0, (-93.0), 113.0, 9.0], UInt64(216))
public var var776 : Interface21 = Class17()
public let var795 : Range<Int64> = ((-115)&127..=Int64(Int64(Int8(-36)))&127:(113|1))
public var var947 : (Bool, Range<Int32>, Range<UInt32>, Range<Int64>, (Int16, Range<Int16>, Range<UInt64>, Range<UInt64>, Int8), Range<UInt16>) = ((((Int8(-77)&127..Int8(-32)&127:((-36)|1)), """
_/2Y4
c(tnI
""", ###"PY$(9MSB2)"###, (UInt64(37)&127..UInt64(143)&127:(105|1)), Option<Range<UInt64>>.None, Int64(UInt16(69)), Int32(-51)) is Array<Float64>), (Int32(-112)&127..=Int32(UInt32(UInt16(0)))&127:(Int64(Int16(Int8(72)))|1)), (UInt32(41)&127..UInt32(251)&127:50|1), ((-118)&127..(-75)&127:(-46)|1), (Int16(UInt8(UInt8(80))), (Int16(Int16(71))&127..Int16(UInt8(176))&127:((-14)|1)), (UInt64(84)&127..UInt64(126)&127:44|1), (UInt64(146)&127..=UInt64(242)&127:(Int64(UInt32(81))|1)), Int8(UInt8(UInt8(95)))), (UInt16(213)&127..UInt16(84)&127:(76|1)))
public let var1018 : ((Int16, Range<Int16>, Range<UInt64>, Range<UInt64>, Int8), Int64, (UInt8, Range<Int64>), Range<UInt32>) = ((Int16(UInt8(13)), (Int16(-47)&127..=Int16(-110)&127:24|1), (UInt64(88)&127..=UInt64(161)&127:75|1), (UInt64(124)&127..=UInt64(66)&127:(-80)|1), Int8(-99)), 5, (UInt8(Int8(UInt8(233))), (Int64(Int16(31))&127..Int64(UInt16(99))&127:(34|1))), (UInt32(28)&127..UInt32(20)&127:(-86)|1))
public let var1047 : Bool = true
public var var1133 : UInt32 = UInt32(245)
public let var1164 : Enum1159 = Enum1159.defaultValue
public var var1173 : (Bool, Range<Int32>, Range<UInt32>, Range<Int64>, (Int16, Range<Int16>, Range<UInt64>, Range<UInt64>, Int8), Range<UInt16>) = (true, (Int32(Int8(-28))&127..Int32(UInt8(Int8(73)))&127:(48|1)), (UInt32(32)&127..=UInt32(213)&127:55|1), (Int64(Int64(Int16(-82)))&127..=Int64(Int32(17))&127:(Int64(UInt16(108))|1)), (Int16(115), (Int16(-42)&127..Int16(Int8(103))&127:((-103)|1)), (UInt64(109)&127..=UInt64(105)&127:114|1), (UInt64(Int16(12))&127..UInt64(29)&127:((-67)|1)), Int8(UInt8(97))), (UInt16(50)&127..UInt16(180)&127:(-41)|1))
public var var1266 : Unit = ()
public let var1271 : (Int16, Range<Int16>, Range<UInt64>, Range<UInt64>, Int8) = (Int16(Int8(Int8(Int8(40)))), (Int16(Int16(UInt8(207)))&127..=Int16(UInt8(168))&127:(Int64(Int16(UInt16(63)))|1)), (UInt64(217)&127..=UInt64(Int8(-70))&127:(Int64(UInt32(Int16(115)))|1)), (UInt64(UInt64(132))&127..UInt64(201)&127:(Int64(UInt8(UInt8(187)))|1)), Int8(Int8(94)))
let var1327 : Range<Int32> = (Int32(84)&127..Int32(99)&127:116|1)
let var1340 : Range<Int16> = (Int16(-106)&127..=Int16(1)&127:22|1)
public var var1347 : Int64 = Int64(Int8(0))
public var var1391 : Unit = ()
public let var1440 : Class17 = Class17()
public let var1459 : (UInt8, Range<Int64>) = (UInt8(UInt8(0)), (Int64(Int16(92))&127..3&127:(Int64(Int8(88))|1)))
public var var1511 : Unit = ()
public let var1525 : Array<Float64> = [(-7.0), (-1.0), (-119.0), Float64(Float32(84.0)), (-1.0), Float64(Float32(Float32(55.0))), 119.0, 119.0, Float64(Float32(-114.0)), Float64((-97.0))]
public let var1563 : UInt32 = UInt32(UInt8(UInt8(61)))
public let var1570 : (Range<Int8>, String, String, Range<UInt64>, Option<Range<UInt64>>, Int64, Int32) = ((Int8(-100)&127..=Int8(UInt8(150))&127:(108|1)), ###"k'v7_${var723}`bVYw"###, """
vp.v/
k${var723}1+w\\
""", (UInt64(53)&127..=UInt64(216)&127:((-98)|1)), ([((UInt16(147), Int32(67), UInt16(102), (), ((-57)&127..(-75)&127:((-86)|1)), Int32(-92)) as UInt64), Option<UInt64>.None, (Option<Bool>.None as UInt64), Option<UInt64>.None, ("Io${var723}V0JXKost${var723}" as UInt64), (Option<Option<UInt64>>.None as UInt64), ((UInt8(18), (3&127..82&127:((-123)|1))) as UInt64), ((Int16(-42), (Int16(110)&127..Int16(-117)&127:(87|1)), (UInt64(198)&127..=UInt64(40)&127:((-123)|1)), (UInt64(218)&127..=UInt64(107)&127:28|1), Int8(92)) as UInt64), (Int16(9) as UInt64), ((Int16(90), (Int16(-26)&127..=Int16(-12)&127:(-58)|1), (UInt64(19)&127..=UInt64(156)&127:((-90)|1)), (UInt64(246)&127..UInt64(110)&127:(0|1)), Int8(87)) as UInt64)] as Range<UInt64>), Int64(Int16(UInt16(UInt8(67)))), Int32(Int32(UInt8(199))))
public var var1684 : ?Range<Int64> = Option<Range<Int64>>.None
public var var1724 : Float64 = 81.0
public var var1800 : Int8 = Int8(52)
public var var1809 : Int64 = Int64(UInt32(33))
public var var1820 : Interface20<Option<Option<UInt64>>, Option<String>> = Class17()
public let var2081 : Range<UInt16> = (UInt16(115)&127..=UInt16(163)&127:(-15)|1)
public var var2105 : Bool = ((Int16(23), (Int16(51)&127..Int16(-108)&127:(-117)|1), (UInt64(171)&127..=UInt64(92)&127:((-38)|1)), (UInt64(24)&127..UInt64(253)&127:(-79)|1), Int8(1)) is Range<UInt8>)
var var2166 : Unit = ()
public let var2205 : Bool = (Option<Array<Class17>>.None is (Option<Option<UInt64>>) -> Bool)
public var var2254 : UInt64 = UInt64(UInt32(156))
public let var2266 : Option<Option<Unit>> = (Int8(Int8(2)) as Option<Unit>)
public var var2276 : Option<Option<Unit>> = Option<Option<Unit>>.None
public let var2280 : Unit = ()
public let var2352 : Float64 = 74.0
public var var2382 : Int16 = Int16(32)
public let var2413 : Float64 = 116.0
var var2447 : Option<Range<UInt64>> = Option<Range<UInt64>>.None
var var2559 : ??UInt64 = Option<Option<UInt64>>.None
public interface Interface21 {
    func func26(namedParam27 ! : String, namedParam28 ! : UInt8, namedParam29 ! : UInt64) : UInt8 { // block id: 30
        namedParam28
    }
;
    static func func93(param94 : Range<UInt16>, namedParam95 ! : Range<Int8>, namedParam96 ! : Range<UInt8>, namedParam97 ! : Int64) : Int16 { // block id: 98
        try (resource = Class17()) { // block id: 100
            (Option<Unit>.Some(var14) ?? var14)
        } finally { // block id: 109
            func111();
            var loopTimeVar2499 : Int64 = 0;
            while ((true) && loopTimeVar2499 < 100 ) {
                loopTimeVar2499++;

            }
        };
        try { // block id: 2501
            let var2508 : Option<Option<UInt64>> = (Option<Range<UInt64>>.Some((UInt64(UInt32(66))&127..=UInt64(UInt8(153))&127:((-113)|1))) as Option<UInt64>);
            (var2508 ?? Option<UInt64>.None)
        } catch (_) { // block id: 2518
            var var2528 : Bool = true;
            try { // block id: 2520
                UInt64(142);
                Option<String>.Some(var723);
                var1018
            } finally { // block id: 2525
                var2528 &&= true;
                ();
                var var2533 : ((Int16, Range<Int16>, Range<UInt64>, Range<UInt64>, Int8), Int64, (UInt8, Range<Int64>), Range<UInt32>) = ((Int16(Int8(UInt8(40))), (Int16(-41)&127..=Int16(-81)&127:123|1), (UInt64(152)&127..=UInt64(85)&127:120|1), (UInt64(93)&127..=UInt64(240)&127:(108|1)), Int8(UInt8(Int8(-29)))), (-42), (UInt8(179), (Int64(UInt8(88))&127..=(-33)&127:(8|1))), (UInt32(59)&127..=UInt32(70)&127:50|1));
                var2533
            };
            (var2559 ?? Option<UInt64>.None)
        };
        (Option<Int16>.Some(var2382 - var712) ?? Int16(-41))
    }

}

public interface Interface20<T0, T1> <: Interface21 {

}

public open class Class17 <: Interface20<Option<Option<UInt64>>, Option<String>> & Resource {
    public init() { // block id: 19

    }
;
    public let var280 : Float64 = (-42.0);
    public let var729 : Unit = ();
    public var var1443 : UInt64 = UInt64(11);
    public static var var2171 : Unit = ();
    public static var var2610 : Int64 = 44;
    private static var var2636 : Option<Int64> = Option<Int64>.None;
    public static func func83(param84 : Range<UInt8>, param85 : Option<String>, optionalParam86 ! : Option<UInt64> = Option<UInt64>.None, optionalParam88 ! : Int64 = Int64(UInt32(31))) : Int64 { // block id: 91
        func93(if ((!true)) { try { // block id: 2576
            var2081
        } catch (e: Exception) { // block id: 2578
            var2280;
            var1511;
            (var428&127..UInt16(24)&127:(var160|1))
        } finally { // block id: 2585
            (var428&127..=var422&127:(var1347|1))
        } } else { var2081 } , namedParam95 : try { // block id: 2592
            var2171;
            var344
        } finally { // block id: 2595
            var1511;
            (Int8(-67)&127..=Int8(-42)&127:(47|1))
        }, namedParam96 : param84, namedParam97 : Int64(var2382));
        if (false) { // block id: 2606
            try { // block id: 2608
                var2610
            } finally { // block id: 2612
                ();
                var2254 >>= ((UInt64(8)) & 7);
                (-6) % (((-46)) | 1)
            }
        } else if (false) { // block id: 2621
            try (resource = Class17()) { // block id: 2623

            } finally { // block id: 2624
                var2280;
                Option<Option<UInt64>>.Some(Option<UInt64>.Some(UInt64(30)));
                ()
            };
            (var2636 ?? 116)
        } else { // block id: 2639
            70 ** ((-75) & 3)
        }
    }

    public func isClosed(): Bool { return true }
    public func close(): Unit {}
}



public func func1689(namedParam11 ! : Float64) : UInt8 { // block id: 12
    var14;
    var23.func26(namedParam27 : (var38 ?? "1KW~p=:~m}"), namedParam28 : try { // block id: 42
        var44
    } finally { // block id: 46
        UInt16(226);
        var44
    }, namedParam29 : (Option<UInt64>.None ?? UInt64(59)))
}





public func func389(param390 : (UInt16, Int32, UInt16, Unit, Range<Int64>, Int32)) : Option<Range<UInt64>> { // block id: 391
    ((var397[0] as Unit) ?? (var422 <<= ((var428) & 7)));
    let var455 : String = "P9Kw.S^6)a{";
    var var483 : UInt64 = UInt64(UInt8(150));
    if (false) { var437 } else { try { // block id: 443
        (Int8(-68)&127..=Int8(83)&127:30|1);
        ((var448&127..var448&127:(30|1)), var455, "cag(CQkkAQ", var459, Option<Range<UInt64>>.None, 109, var464)
    } finally { // block id: 467
        var160 %= (((-37)) | 1);
        Int32(-86) / ((var464) | 1);
        (var344, """
_a{`0G
Ec`wQ
""", """
$)l+a{
 b+F\"
""", (UInt64(160)&127..UInt64(39)&127:(-105)|1), Option<Range<UInt64>>.Some((UInt64(115)&127..=var483&127:(var160|1))), var160, Int32(-33))
    }[4] } 
}

func func379(param380 : Option<UInt64>) : Option<UInt64> { // block id: 381
    let var503 : ??UInt64 = Option<Option<UInt64>>.Some(Option<UInt64>.None);
    var var518 : ?UInt64 = Option<UInt64>.Some(UInt64(159));
    (match (((var422, Int32(26), UInt16(6), (), (87&127..=50&127:(-16)|1), var464)|>func389)) {
        case caseVar500 : Range<UInt64> => 
            var503
        
        case _ => 
            if (var152) { Option<Option<UInt64>>.None } else { var503 } 
        
    } ?? [Option<UInt64>.Some(UInt64(14)), var518, param380, Option<UInt64>.Some(var524), var183, var183, Option<UInt64>.Some(UInt64(214)), Option<UInt64>.Some(UInt64(10)), Option<UInt64>.Some(UInt64(169)), var518][8])
}

public func func374() : Option<UInt64> { // block id: 375
    var var542 : Array<Option<UInt64>> = [(Int32(-52) as UInt64), Option<UInt64>.Some(UInt64(UInt64(UInt32(15)))), Option<UInt64>.None, (((UInt32(71)&127..=UInt32(206)&127:(103|1)) as Range<Int8>) as UInt64), (32 as UInt64), Option<UInt64>.None, (Int32(UInt32(UInt16(37))) as UInt64), (((-81)&127..(-72)&127:(-25)|1) as UInt64), Option<UInt64>.Some(UInt64(113)), (Int8(-107) as UInt64)];
    (match ((Option<UInt64>.None|>func379)) {
        case _ => 
            var542;
            UInt16(244)
        
    } as UInt64)
}

public struct Aggregate572 {
    public init() { // block id: 574

    }
;
    public static func func577(param578 : Int8) : Unit { // block id: 579
        var44++;
        ((((-36)&127..=var160&127:(var160|1)), Float32(-42.0), ((-60), (UInt8(180)&127..UInt8(52)&127:(116|1)), Float32(-106.0), var601, (), [(-2.0), 78.0, (-126.0), (-4.0), 49.0, 95.0, 82.0, (-82.0), (-28.0), 64.0], var524), [102.0, (-113.0), 62.0, 38.0, (-84.0), 69.0, 80.0, 18.0, (-110.0), (-64.0)], (Int8(16)&127..=Int8(-78)&127:41|1))[2][3] ?? ((var692 as Unit)|>{ lambdaParameter733 : Option<Unit> =>  }));
        match (Option<Range<UInt64>>.Some(match (var741) {
                case _ : Float64 => 
                    var14;
                    (UInt64(64)&127..=UInt64(89)&127:40|1)
                
                case _ => 
                    var459
                
            })) {
            case _ => 
                var754;
                var692;
                ()
            
        }
    }
;
    public let var1107 : UInt16 = UInt16(39);
    public static var var1718 : Int16 = Int16(-87);
    public static var var1941 : (UInt8, Range<Int64>) = (UInt8(237), ((-97)&127..=19&127:((-2)|1)))
}

public func func611(param612 : Option<Unit>) : Unit { // block id: 613
    let var617 : Array<Option<UInt64>> = Array<Option<UInt64>>(10){ i => Option<UInt64>.None };
    var var709 : Int16 = Int16(64);
    (var617[0] ?? (Option<UInt64>.None ?? var524) ^ match (UInt8(173)) {
        case _ => 
            if (var339) { Class17() } else { Class17() } ;
            var437;
            UInt64(18) ** (UInt64(175) & 3)
        
        case 248 | 29 | 202 => 
            var160 = var160;
            let var689 : UInt32 = UInt32(90);
            (Class17(), var689, var692);
            var524 % ((var524) | 1)
        
        case _ : Float32 => 
            var709 <<= ((var712) & 7);
            var14;
            UInt64(193)
        
        case _ => 
            Option<String>.Some(var723);
            UInt64(201)
        
    });
    var23.var729
}

public func func370(param371 : Class17) : Interface21 { // block id: 372
    func374();
    Aggregate572.func577(Int8(-90));
    var776
}

func func783(param784 : Bool) : Range<Int64> { // block id: 785
    let var790 : UInt8 = UInt8(UInt8(UInt8(156)));
    (var790, var795)[1]
}

func func331() : Unit { // block id: 332
    match (Option<Unit>.None) {
        case _ => 
            if (var339) { (Int8(96)&127..=Int8(-83)&127:83|1) } else { var344 } 
        
    };
    let var779 : (Class17) -> Interface21 = func370;
    let var804 : (Bool) -> Range<Int64> = func783;
    try { // block id: 351
        ((-81)&127..(-119)&127:(-109)|1)
    } finally { // block id: 353
        let var357 : (UInt16, Int32, UInt16, Unit, Range<Int64>, Int32) = (UInt16(120), Int32(UInt32(110)), UInt16(204), (), ((-10)&127..109&127:(-28)|1), Int32(UInt32(Int16(10))));
        var357[3];
        Class17()|>var779;
        var152|>var804
    };
    var14
}

func func814(namedParam815 ! : Range<Int16>, namedParam816 ! : ((UInt16, Int32, UInt16, Unit, Range<Int64>, Int32)) -> Option<Range<UInt64>>, optionalParam819 ! : Range<Int32> = (Int32(-60)&127..=Int32(106)&127:22|1)) : Option<UInt64> { // block id: 821
    if (((Option<UInt64>.Some(UInt64(8))|>func379) is Bool)) { Option<UInt64>.None } else { match (true && var152) {
        case _ => 
            var183
        
    } } 
}

public func func304(param305 : Int64) : Option<UInt64> { // block id: 306
    var loopTimeVar812 : Int64 = 0;
    while ((try { // block id: 309
        true || true
    } catch (e: Exception) { // block id: 313
        ();
        ();
        var152
    } finally { // block id: 317
        if (true) { var321 } else { var321 } ;
        UInt16(57) != var327
    }) && loopTimeVar812 < 100 ) {
        loopTimeVar812++;
        func331();
        var23|>func370
    };
    var var838 : ((UInt16, Int32, UInt16, Unit, Range<Int64>, Int32)) -> Option<Range<UInt64>> = { lambdaParameter841 : (UInt16, Int32, UInt16, Unit, Range<Int64>, Int32) => Option<Range<UInt64>>.Some((UInt64(17)&127..UInt64(141)&127:(-101)|1)) };
    func814(namedParam815 : (Int16(-102)&127..Int16(91)&127:75|1), namedParam816 : var838)
}

func func1005(namedParam1006 ! : Int32, namedParam1007 ! : Option<String>, namedParam1008 ! : UInt16, optionalParam1009 ! : Option<UInt64> = Option<UInt64>.Some(UInt64(Int32(UInt16(227))))) : Bool { // block id: 1014
    var1018[1];
    match (UInt64(match {
            case false => 
            var var1051 : (Class17, UInt32, (UInt16, Int32, UInt16, Unit, Range<Int64>, Int32)) = (Class17(), UInt32(68), (UInt16(8), Int32(Int16(Int8(4))), UInt16(139), (), ((-24)&127..(-40)&127:(-97)|1), Int32(117)));
            if (var1047) { var397 } else { var1051 } ;
            var14;
            Int8(-58)
            case _ => 
            Int8(43)
        })) {
        case 158 => 
            var14;
            true
        
        case _ => 
            var160 ^= var160;
            68 != 31
        
        case _ : Range<Int8> => 
            var14;
            if (var339) { Class17() } else { Class17() } ;
            var339
        
        case _ => 
            [26.0, (-22.0), (-78.0), 48.0, 38.0, 102.0, 0.0, 22.0, (-84.0), (-121.0)];
            24.0 <= 67.0
        
    }
}

public enum Enum1159 {
    defaultValue
}
public func func1152(param1153 : (Option<Unit>) -> Unit) : (Int16, Range<Int16>, Range<UInt64>, Range<UInt64>, Int8) { // block id: 1156
    var var1248 : Range<UInt16> = (UInt16(Int8(42))&127..=UInt16(UInt16(Int8(Int8(-84))))&127:(Int64(UInt8(UInt8(Int8(120))))|1));
    var var1312 : Int32 = Int32(UInt16(23));
    match (match (if (false) { var1164 } else { Enum1159.defaultValue } ) {
            case defaultValue => 
                Option<String>.None;
                (UInt64(96)&127..UInt64(195)&127:21|1);
                var1173
            
            case defaultValue => 
                var422 ^= var327;
                var14;
                var947
            
            case _ => 
                var var1227 : (Int16, Range<Int16>, Range<UInt64>, Range<UInt64>, Int8) = (Int16(92), (Int16(126)&127..=Int16(19)&127:95|1), (UInt64(UInt32(151))&127..UInt64(Int8(-28))&127:(Int64(Int8(UInt8(251)))|1)), (UInt64(Int64(Int32(0)))&127..UInt64(171)&127:((-90)|1)), Int8(UInt8(69)));
                (true, (Int32(-29)&127..=Int32(101)&127:((-60)|1)), (UInt32(224)&127..UInt32(244)&127:(-8)|1), (68&127..=(-14)&127:(-26)|1), var1227, var1248)
            
        }) {
        case (_ : Int8,caseVar1262,caseVar1263,_ : Int16,_ : Option<Range<Int8>>,_) => 
            var1266;
            if (var1047) { var1271 } else { var1271 } 
        
        case (_ : Aggregate572,_,caseVar1305,_,caseVar1306 : Rune,caseVar1307 : Int32) => 
            var1266;
            var1312 -= Int32(-74);
            var1271
        
        case (caseVar1319,caseVar1320 : Bool,caseVar1321,_ : Bool,(caseVar1322,_,_,_ : Int64,_ : UInt16),_) => 
            if (true) { var1327 } else { (Int32(61)&127..Int32(-17)&127:42|1) } ;
            var var1332 : Float32 = Float32(34.0);
            var1332 **= Float32(Int32(Float32(0.0)) & 3);
            if (caseVar1319) { (Int16(-25), var1340, (UInt64(205)&127..=UInt64(252)&127:(-16)|1), (UInt64(180)&127..UInt64(14)&127:(var1347|1)), var448) } else { var1271 } 
        
        case _ : Option<Unit> => 
            var524;
            var235 += var72;
            (var712, (Int16(-80)&127..Int16(60)&127:10|1), (UInt64(66)&127..=UInt64(78)&127:(-54)|1), (UInt64(78)&127..=var524&127:(118|1)), Int8(-36))
        
        case _ => 
            (var712, var1340, (var524&127..=var524&127:(var1347|1)), (UInt64(230)&127..var524&127:(101|1)), var448)
        
    }
}

public func func1383(param612 : Option<Unit>) : Unit { // block id: 613
    let var617 : Array<Option<UInt64>> = [Option<UInt64>.None, (Int8(-63) as UInt64), Option<UInt64>.Some(UInt64(UInt16(UInt16(159)))), (("Zc_2>YUZe=", Option<Range<UInt64>>.Some((UInt64(158)&127..=UInt64(74)&127:91|1)), ")&9/KTzAH9", UInt64(UInt32(198))) as UInt64), Option<UInt64>.Some(UInt64(200)), (Class17() as UInt64), ([Float64((-115.0)), (-16.0), (-17.0), (-64.0), 69.0, (-43.0), (-83.0), Float64(Float32(60.0)), 12.0, (-109.0)] as UInt64), (Option<UInt64>.Some(UInt64(209)) as UInt64), (Option<Option<UInt64>>.Some(Option<UInt64>.None) as UInt64), Option<UInt64>.Some(UInt64(Int16(Int8(-17))))];
    var var709 : Int16 = Int16(64);
    (var617[0] ?? (Option<UInt64>.None ?? var524) ^ match (UInt8(173)) {
        case _ => 
            if (var339) { Class17() } else { Class17() } ;
            var437;
            UInt64(18) ** (UInt64(175) & 3)
        
        case 248 | 29 | 202 => 
            var160 = var160;
            let var689 : UInt32 = UInt32(90);
            (Class17(), var689, var692);
            var524 % ((var524) | 1)
        
        case _ : Float32 => 
            var709 <<= ((var712) & 7);
            var14;
            UInt64(193)
        
        case _ => 
            Option<String>.Some(var723);
            UInt64(201)
        
    });
    var23.var729
}

public func func1386(param1387 : () -> Option<UInt64>) : Unit { // block id: 1389
    var1391;
    var var1403 : UInt64 = UInt64(195);
    match (var741) {
        case _ : UInt32 => 
            (-59) * (-105);
            var1403 /= ((var1403) | 1)
        
        case caseVar1408 => 
            var14
        
        case _ : Array<Float64> => 
            var var1416 : Int16 = Int16(Int16(-110));
            var1416 *= var712;
            var1391
        
        case _ => 
            ();
            var1391
        
    }
}


public func func1432(param1433 : (() -> Option<UInt64>) -> Unit) : UInt32 { // block id: 1436
    var1440.var1443 **= (UInt64(146) & 3);
    let var1456 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    var var1496 : ?Bool = (UInt64(164) as Bool);
    if (((45.0, 62.0, (Int8(19)&127..Int8(-92)&127:(-13)|1), Int16(18), var1456, var1459)[4] is (Float64, Float64, Range<Int8>, Int16, Array<Unit>, (UInt8, Range<Int64>)))) { // block id: 1470
        try { // block id: 1472
            ();
            UInt32(82)
        } catch (_) { // block id: 1475
            var160 = (-25);
            UInt32(21)
        } finally { // block id: 1480
            var1347 **= (var160 & 3);
            var1133 + var1133
        }
    } else if ((if (false) { Option<Bool>.None } else { var1496 }  ?? match (var1164) {
        case defaultValue => 
            var1047
        
        case caseVar1507 => 
            var1459;
            var1511;
            var1047
        
        case _ => 
            var1496;
            var14;
            var448 < Int8(-73)
        
    })) { // block id: 1521
        try { // block id: 1523
            var1525;
            var1133
        } finally { // block id: 1543
            UInt32(76)
        }
    } else { // block id: 1545
        var loopTimeVar1550 : Int64 = 0;
        while ((true) && loopTimeVar1550 < 100 ) {
            loopTimeVar1550++;

        };
        var1018;
        try { // block id: 1553
            UInt32(18)
        } catch (e: Exception) { // block id: 1555
            var var1558 : UInt64 = UInt64(192);
            var1558 &= UInt64(79);
            var1563 + UInt32(102)
        } finally { // block id: 1568
            var1570;
            UInt32(214)
        }
    }
}

public func func1648(param1387 : () -> Option<UInt64>) : Unit { // block id: 1389
    var1391;
    var var1403 : UInt64 = UInt64(195);
    match (var741) {
        case _ : UInt32 => 
            (-59) * (-105);
            var1403 /= ((var1403) | 1)
        
        case caseVar1408 => 
            var14
        
        case _ : Array<Float64> => 
            var var1416 : Int16 = Int16(Int16(-110));
            var1416 *= var712;
            var1391
        
        case _ => 
            ();
            var1391
        
    }
}

public func func1669(param1670 : (UInt8, Range<Int64>)) : Range<Int8> { // block id: 1671
    (Int8(12)&127..=Int8(79)&127:(-40)|1)
}


public func func1689() : Option<UInt64> { // block id: 375
    var var542 : Array<Option<UInt64>> = [(Int32(-52) as UInt64), Option<UInt64>.Some(UInt64(UInt64(UInt32(15)))), Option<UInt64>.None, (((UInt32(71)&127..=UInt32(206)&127:(103|1)) as Range<Int8>) as UInt64), (32 as UInt64), Option<UInt64>.None, (Int32(UInt32(UInt16(37))) as UInt64), (((-81)&127..(-72)&127:(-25)|1) as UInt64), Option<UInt64>.Some(UInt64(113)), (Int8(-107) as UInt64)];
    (match ((Option<UInt64>.None|>func379)) {
        case _ => 
            var542;
            UInt16(244)
        
    } as UInt64)
}

public func func1690(param1691 : Option<Unit>) : () -> Option<UInt64> { // block id: 1692
    (106&127..=(-46)&127:(-105)|1);
    let var1695 : () -> Option<UInt64> = {  => (Class17() as UInt64) };
    var1695
}

public func func1702(param1703 : Interface20<Option<Option<UInt64>>, Option<String>>) : () -> Option<UInt64> { // block id: 1704
    var loopTimeVar1727 : Int64 = 0;
    do {
        loopTimeVar1727++;
        var72 *= var1724
    } while ((try { // block id: 1708
        param1703;
        var712
    } finally { // block id: 1711
        var1391;
        var1271;
        Int16(69)
    } > (Aggregate572.var1718)) && loopTimeVar1727 < 100 ) ;
    func1689
}

public func func1730(param1731 : Option<Unit>) : Interface20<Option<Option<UInt64>>, Option<String>> { // block id: 1732
    let var1760 : Range<UInt32> = (UInt32(130)&127..=UInt32(73)&127:40|1);
    let var1792 : Range<UInt16> = (UInt16(26)&127..=UInt16(125)&127:(-43)|1);
    (([var448, Int8(-99), Int8(-77), var448, Int8(-107), Int8(121), var448, var448, Int8(-83), var448][6]&127..=try { // block id: 1750
        Int8(-88)
    } catch (e: Exception) { // block id: 1752
        (Int32(95)&127..Int32(-96)&127:(-48)|1);
        if (var339) { (var339, var1327, var1760, (var160&127..=var1347&127:(38|1)), (var712, (Int16(28)&127..=Int16(119)&127:((-80)|1)), (UInt64(95)&127..=UInt64(191)&127:(-3)|1), (UInt64(22)&127..=UInt64(167)&127:(-23)|1), Int8(126)), (UInt16(197)&127..var422&127:(119|1))) } else { (false, (Int32(56)&127..=var464&127:(93|1)), (UInt32(195)&127..=var1133&127:(var160|1)), (32&127..=(-39)&127:(-5)|1), var1271, var1792) } ;
        Int8(-45) - Int8(3)
    } finally { // block id: 1797
        var1391;
        var1800
    }&127:([var1347, 6, (-60), var1809, (-23), (-127), (-33), var1347, 88, var1809][3]|1)) as Range<Int64>);
    var1820
}

public func func1000(param1001 : Range<UInt8>) : (Int16, Range<Int16>, Range<UInt64>, Range<UInt64>, Int8) { // block id: 1002
    let var1104 : Aggregate572 = Aggregate572();
    var loopTimeVar1150 : Int64 = 0;
    do {
        loopTimeVar1150++;
        let var1115 : (Int16, Range<Int16>, Range<UInt64>, Range<UInt64>, Int8) = (Int16(Int16(UInt16(Int8(6)))), (Int16(-77)&127..Int16(-82)&127:74|1), (UInt64(174)&127..=UInt64(249)&127:76|1), (UInt64(192)&127..UInt64(218)&127:44|1), Int8(65));
        let var1127 : (UInt8, Range<Int64>) = (UInt8(176), (17&127..(-127)&127:(-59)|1));
        var loopTimeVar1145 : Int64 = 0;
        while ((true) && loopTimeVar1145 < 100 ) {
            loopTimeVar1145++;
            (var1115, var160, var1127, (var1133&127..=UInt32(227)&127:((-98)|1)));
            if (true) { (var327&127..UInt16(208)&127:(5|1)) } else { (UInt16(252)&127..UInt16(104)&127:16|1) } 
        };
        var23.var729
    } while ((func1005(namedParam1006 : var464, namedParam1007 : if (true) { var38 } else { Option<String>.None } , namedParam1008 : var1104.var1107)) && loopTimeVar1150 < 100 ) ;
    let var1652 : (() -> Option<UInt64>) -> Unit = { lambdaParameter1655 : () -> Option<UInt64> =>  };
    let var1823 : (Option<Unit>) -> Interface20<Option<Option<UInt64>>, Option<String>> = func1730;
    ((var1823~>func1702)~>{ lambdaParameter1427 : () -> Option<UInt64> => func func1666() : Range<Int8> { // block id: 1667
        (var44 + var44, (var1684 ?? ((-106)&127..=(-2)&127:(-6)|1)))|>func1669
    }
; var loopTimeVar1688 : Int64 = 0; do {
        loopTimeVar1688++;
        func func1661() : Option<Range<Int8>> { // block id: 1662
            Class17();
            Option<Range<Int8>>.Some(func1666())
        }
;
        func1661()
    } while (((var1652|>func1432) < UInt32(var327)) && loopTimeVar1688 < 100 )  })|>func1152
}

public func func884(param885 : Range<UInt32>) : Int8 { // block id: 886
    var14;
    try (resource = Class17()) { // block id: 889
        [(), (), (), (), (), (), (), (), (), ()][7];
        var loopTimeVar897 : Range<UInt64> = (UInt64(130)&127..=UInt64(UInt64(Int16(Int8(-93))))&127:((-99)|1));
        for (i in loopTimeVar897 where false) {

        }
    } catch (_) { // block id: 905
        func331()
    };
    if (match (((Int8(90)&127..Int8(109)&127:(-97)|1), var723, var723, (var524&127..=var524&127:(var160|1)), var437, var160, var464)) {
        case (caseVar924 : Range<Int64>,caseVar925 : Option<UInt64>,_ : Bool,caseVar926 : String,_,caseVar927,_) => 
            false && true
        
        case caseVar934 : Option<Option<UInt64>> => 
            UInt64(102) < var524
        
        case _ => 
            var14;
            ();
            true
        
    }) { var947[4] } else { ((UInt8(248)&127..UInt8(160)&127:(-62)|1)|>func1000) } [4]
}



func func865(namedParam866 ! : Option<Option<UInt64>>) : Bool { // block id: 867
    let var1839 : Range<UInt32> = (UInt32(219)&127..UInt32(Int8(-76))&127:(Int64(Int8(UInt8(19)))|1));
    let var1876 : Array<Class17> = Array<Class17>(10){ i => Class17() };
    func func870(optionalParam871 ! : Range<Int8> = (Int8(UInt8(Int8(UInt8(172))))&127..Int8(UInt8(21))&127:((-103)|1)), namedParam880 ! : Range<UInt64>) : Class17 { // block id: 881
        var var1832 : Int32 = Int32(UInt16(UInt16(Int8(UInt8(89)))));
        Int64(func884(try { // block id: 1829
            var1832--;
            var1839
        } finally { // block id: 1847
            var132;
            var1839
        }));
        var var1860 : ?Array<Class17> = Option<Array<Class17>>.Some([Class17(), Class17(), Class17(), Class17(), Class17(), Class17(), Class17(), Class17(), Class17(), Class17()]);
        (if (false) { var1860 } else { Option<Array<Class17>>.Some(var1876) }  ?? var1876)[6]
    }
;
    func870(optionalParam871 : [(Int8(77)&127..Int8(-127)&127:(-92)|1), (Int8(85)&127..Int8(-123)&127:69|1), (Int8(96)&127..Int8(109)&127:(-84)|1), (Int8(-13)&127..Int8(-99)&127:(-2)|1), (Int8(-41)&127..Int8(-84)&127:61|1), (Int8(-93)&127..=Int8(-82)&127:78|1), (Int8(-96)&127..=Int8(94)&127:40|1), (Int8(41)&127..Int8(-42)&127:(-127)|1), (Int8(54)&127..=Int8(102)&127:(-36)|1), (Int8(106)&127..Int8(85)&127:110|1)][0], namedParam880 : if (var152) { (UInt64(250)&127..=UInt64(146)&127:(-68)|1) } else { var459 } ).var729;
    if (match (try { // block id: 1902
            if (var339) { Option<Range<UInt64>>.None } else { Option<Range<UInt64>>.None } 
        } catch (_) { // block id: 1907
            var437
        }) {
        case caseVar1911 : Array<Int64> => 
            false
        
        case caseVar1916 => 
            Int16(41) <= Int16(123)
        
        case caseVar1923 => 
            false
        
        case _ => 
            true
        
    }) { (Option<(UInt8, Range<Int64>)>.Some((UInt8(170), (36&127..=(-78)&127:1|1))) ?? Aggregate572.var1941) } else { (match (var1340) {
        case caseVar1953 => 
            -Int16(34);
            if (false) { (Int8(100)&127..Int8(-86)&127:(53|1)) } else { (var1800&127..Int8(7)&127:(var1809|1)) } ;
            UInt8(187)
        
        case _ => 
            var1800 **= (var1800 & 3);
            var var1974 : Array<Option<UInt64>> = [(###"%xjfX68c~K"### as UInt64), (8 as UInt64), ((Int32(113)&127..=Int32(-80)&127:(-102)|1) as UInt64), Option<UInt64>.None, ((((UInt32(61)&127..=UInt32(195)&127:99|1) is Range<UInt32>), (Int32(-52)&127..Int32(22)&127:(24|1)), (UInt32(218)&127..UInt32(227)&127:110|1), ((-99)&127..=83&127:93|1), (Int16(3), (Int16(14)&127..=Int16(-55)&127:66|1), (UInt64(32)&127..=UInt64(182)&127:((-4)|1)), (UInt64(242)&127..=UInt64(186)&127:(-118)|1), Int8(120)), (UInt16(58)&127..UInt16(125)&127:(10|1))) as UInt64), (Option<Range<Int8>>.None as UInt64), Option<UInt64>.None, (Option<UInt64>.None as UInt64), (Float64(Float32(Float32(52.0))) as UInt64), Option<UInt64>.None];
            var1974;
            UInt8(155) % ((var44) | 1)
        
    }, if (var1047) { ((-116)&127..115&127:10|1) } else { var795 } ) } ;
    let var2131 : Array<Bool> = [true, false, false, false, false, false, true, false, false, true];
    match (try { // block id: 2027
            [Class17(), Class17(), var1440, Class17(), var1440, var23, var23, var1440, Class17(), Class17()];
            var1340;
            var1173
        } catch (_) { // block id: 2041
            if (true) { var947 } else { var1173 } 
        } finally { // block id: 2046
            var1391;
            let var2051 : ?Array<Class17> = ((Class17(), UInt32(Int32(120)), (UInt16(UInt16(183)), Int32(84), UInt16(138), (), ((-65)&127..=(-83)&127:82|1), Int32(Int16(98)))) as Array<Class17>);
            if (true) { var2051 } else { Option<Array<Class17>>.None } ;
            let var2076 : Int64 = (-31);
            if (var152) { (var1047, (Int32(7)&127..=Int32(18)&127:(-69)|1), (UInt32(154)&127..UInt32(97)&127:(-76)|1), ((-53)&127..=var2076&127:((-19)|1)), var1271, var2081) } else { (var152, (Int32(-99)&127..Int32(18)&127:36|1), (var1563&127..=UInt32(86)&127:(var2076|1)), ((-65)&127..44&127:73|1), var1271, var2081) } 
        }) {
        case (_ : Range<Int16>,_,caseVar2095 : Option<Array<Class17>>,caseVar2096,(_,_ : Int32,_,caseVar2097,_ : Array<Int8>),caseVar2098) => 
            Class17();
            Option<Range<Int8>>.Some((Int8(-108)&127..Int8(-109)&127:(-95)|1));
            [var2105, var152, false, var339, var152, var1047, var339, var339, false, true]
        
        case caseVar2127 : (UInt16, Int32, UInt16, Unit, Range<Int64>, Int32) => 
            ();
            var2131
        
        case _ => 
            ();
            [false, false, true, false, true, true, true, false, true, true]
        
        case _ => 
            [true, false, true, false, false, false, true, true, true, false]
        
    }[7]
}

public func func846(param847 : Range<Int16>) : Option<UInt64> { // block id: 848
    let var2143 : ??UInt64 = (Enum1159.defaultValue as Option<UInt64>);
    (Option<Option<UInt64>>.Some(try { // block id: 852
        Option<Unit>.Some(());
        var183
    } catch (_) { // block id: 856
        var601;
        Option<UInt64>.Some(var524)
    } finally { // block id: 860
        ();
        var183
    }) ?? if (func865(namedParam866 : var2143)) { (Int16(11) as UInt64) } else { (if (false) { Option<UInt64>.Some(var524) } else { Option<UInt64>.None } ) } )
}




public func func2156(param2157 : Int64) : Range<Int16> { // block id: 2158
    var var2186 : UInt16 = UInt16(161);
    var loopTimeVar2199 : Int64 = 0;
    if (false) { [(var601 ?? ()), var2166, Class17.var2171, try (resource = Class17()) { // block id: 2174
        (Int32(19)&127..Int32(98)&127:(-36)|1);
        ()
    } finally { // block id: 2177

    }, var23.var729, if (true) { // block id: 2183
        var2186 /= ((var422) | 1);
        var1391
    } else if (var2105) { // block id: 2191
        ()
    }, do {
        loopTimeVar2199++;
        (UInt16(209)&127..=UInt16(131)&127:74|1);
        var23
    } while ((var339) && loopTimeVar2199 < 100 ) , try (resource = Class17()) { // block id: 2201
        var1018;
        if (var2205) { Option<UInt64>.Some(UInt64(37)) } else { var183 } ;
        ()
    } catch (e: Exception) { // block id: 2212

    } finally { // block id: 2213
        ();
        var2105 &&= false
    }, Class17.var2171, Class17.var2171] } else { [(), (), (), (), (), (), (), (), (), ()] } ;
    var var2292 : Range<UInt64> = (UInt64(173)&127..=UInt64(Int8(UInt8(149)))&127:(Int64(UInt32(160))|1));
    ((try { // block id: 2236
        [Option<UInt64>.Some(UInt64(134)), var183, Option<UInt64>.Some(var524), Option<UInt64>.Some(UInt64(17)), var183, Option<UInt64>.None, Option<UInt64>.Some(var524), Option<UInt64>.None, Option<UInt64>.Some(UInt64(244)), Option<UInt64>.Some(var2254)];
        Int32(-124);
        var var2261 : Option<Option<Unit>> = Option<Option<Unit>>.None;
        if (var2205) { var2261 } else { var2261 } 
    } finally { // block id: 2264
        var2266
    } ?? (var2276 ?? Option<Unit>.Some(var2280))) ?? try (resource = Class17()) { // block id: 2283
        Int32(-115);
        ()
    } finally { // block id: 2286
        if (false) { Option<Range<UInt64>>.None } else { Option<Range<UInt64>>.Some(var2292) } ;
        ()
    });
    (Int16(12)&127..Int16(55)&127:48|1)
}


public func func111() : Range<UInt64> { // block id: 112
    (Option<Range<Int8>>.None ?? (Int8(-108)&127..Int8(100)&127:(-25)|1));
    var var122 : Bool = false;
    let var2337 : Float64 = (-63.0);
    let var2462 : ?Array<Class17> = Option<Array<Class17>>.Some([Class17(), Class17(), Class17(), Class17(), Class17(), Class17(), Class17(), Class17(), Class17(), Class17()]);
    func func144<T0, T1>() : Range<UInt64> where T0 <: Range<Int16>, T1 <: Class17 & Interface20<Option<Option<UInt64>>, Option<String>> { // block id: 145
        let var224 : Float64 = Float64(Float32(Float32(54.0)));
        let var2304 : Int64 = Int64(Int8(123));
        func func283(optionalParam284 ! : Range<Int64> = ((-62)&127..=(-22)&127:11|1), optionalParam286 ! : Int8 = Int8(UInt8(140)), optionalParam289 ! : Range<Int64> = (Int64(UInt32(132))&127..Int64(UInt16(222))&127:(Int64(Int8(UInt8(34)))|1)), optionalParam298 ! : Option<Range<Int8>> = (UInt32(UInt32(100)) as Range<Int8>)) : UInt16 { // block id: 302
            var var2154 : (Range<Int16>) -> Option<UInt64> = func846;
            var2304|>(func2156~>var2154);
            UInt16(63)
        }
;
        let var2360 : Float64 = (-50.0);
        let var2365 : Float64 = (-66.0);
        try { // block id: 147
            try { // block id: 149
                if (var152) { (var160&127..=var160&127:(var160|1)) } else { (14&127..=4&127:28|1) } 
            } catch (_) { // block id: 167
                ();
                (22&127..=8&127:93|1)
            } finally { // block id: 170
                let var172 : Range<Int64> = (Int64(Int32(Int16(84)))&127..(-56)&127:(Int64(Int16(UInt16(200)))|1));
                var172
            };
            match (var183) {
                case caseVar191 => 
                    var7 / Float32((Int32(Float32(-89.0))) | 1);
                    var7;
                    [var72, 60.0, 83.0, var72, 80.0, var72, var72, 3.0, var72, var72]
                
                case _ => 
                    var var212 : String = """
QJ[G0
HxP[d
""";
                    var212;
                    let var217 : Array<Float64> = [0.0, (-108.0), 117.0, 59.0, 69.0, (-94.0), 21.0, 41.0, (-14.0), 30.0];
                    if (var152) { var217 } else { [(-57.0), var72, (-75.0), var224, var229, (-62.0), (-99.0), 87.0, var235, var235] } 
                
                case caseVar241 : Range<UInt8> => 
                    var var244 : Array<Float64> = [Float64((-32.0)), 59.0, (-63.0), (-45.0), 67.0, Float64(Float32(49.0)), 76.0, 47.0, (-3.0), Float64(Float64(Float32(Float32(-74.0))))];
                    var244
                
                case _ => 
                    var14;
                    var14;
                    [16.0, var229, (-41.0), (-45.0), var229, var235, var235, var72, var235, var72]
                
            }
        } catch (e: Exception) { // block id: 276
            var23.var280;
            func283(optionalParam286 : Int8(15), optionalParam289 : var795);
            try { // block id: 2311
                if (var152) { (Int32(-53)&127..=Int32(-38)&127:(var1809|1)) } else { (Int32(78)&127..Int32(40)&127:((-44)|1)) } ;
                Enum1159.defaultValue;
                if (var152) { [67.0, 124.0, 68.0, 59.0, 55.0, (-52.0), (-92.0), 9.0, 8.0, 78.0] } else { [var224, var72, var229, var1724, (-32.0), (-17.0), var224, 47.0, (-10.0), var2337] } 
            } finally { // block id: 2339
                ();
                'y';
                [(-114.0), 57.0, 75.0, (-30.0), (-47.0), (-29.0), 117.0, (-91.0), (-22.0), (-112.0)]
            }
        } finally { // block id: 2343
            match (var741) {
                case caseVar2348 => 
                    [var2352, 44.0, var2337, (-12.0), (-51.0), var72, var2360, var2360, (-16.0), var2365]
                
                case caseVar2369 : Option<Range<Int64>> => 
                    ();
                    Option<String>.None;
                    [(-43.0), 11.0, 10.0, 24.0, 80.0, (-77.0), 59.0, (-7.0), 76.0, 96.0]
                
                case _ : (String, Option<Range<UInt64>>, String, UInt64) => 
                    var1133 /= ((var1133) | 1);
                    var2382 <<= ((Int16(104)) & 7);
                    [36.0, 22.0, 45.0, 121.0, (-78.0), (-115.0), 49.0, 47.0, (-92.0), (-62.0)]
                
                case _ : String => 
                    var2280;
                    (var1800&127..Int8(43)&127:(27|1));
                    [var2360, var2352, var2337, (-68.0), var224, (-46.0), var1724, 23.0, (-60.0), 34.0]
                
                case _ => 
                    var437;
                    [(-56.0), var1724, 8.0, var2413, var2413, var2413, 70.0, var2360, (-118.0), 13.0]
                
            }
        };
        (try { // block id: 2427
            let var2435 : Unit = ();
            if (var2205) { (UInt16(137), var464, UInt16(7), var2435, ((-97)&127..(-43)&127:(var160|1)), Int32(117)) } else { var692 } ;
            if (false) { Option<Range<UInt64>>.None } else { var2447 } 
        } finally { // block id: 2449
            Option<Range<UInt64>>.None
        } ?? try { // block id: 2452
            if (false) { (UInt64(100)&127..=UInt64(176)&127:(var2304|1)) } else { var459 } 
        } catch (e: Exception) { // block id: 2460
            var2462;
            var422 /= ((var422) | 1);
            var459
        })
    }
;
    if (var122) { (var132[1] ?? func144<Range<Int16>, Class17>()) } else { (Option<Range<UInt64>>.None ?? if (true) { (var524&127..var2254&127:(4|1)) } else { (UInt64(70)&127..UInt64(34)&127:52|1) } ) } 
}




main(): Int64 {
    try {
        var7;
        func1689(namedParam11 : [115.0, 60.0, 35.0, (-26.0), var72, var72, var72, (-55.0), var72, (-42.0)][7]);
        let var2644 : Range<UInt8> = (UInt8(133)&127..UInt8(6)&127:((-51)|1));
        let var2650 : ?String = (((Float64(Float32(-73.0)), Float64(Float32(-88.0)), (Int8(32)&127..=Int8(-124)&127:24|1), Int16(67), [(), (), (), (), (), (), (), (), (), ()], (UInt8(239), (34&127..=39&127:(-81)|1))) as Range<UInt64>) as String);
        Class17.func83(var2644, var2650, optionalParam86 : var183, optionalParam88 : (-70))
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var44*var44), 64)
        crccheck.updateBuffer(UInt64(var160*var160), 64)
        crccheck.updateBuffer(UInt64(var327*var327), 64)
        crccheck.updateBuffer(UInt64(var428*var428), 64)
        crccheck.updateBuffer(UInt64(var464*var464), 64)
        crccheck.updateBuffer(UInt64(var524*var524), 64)
        crccheck.updateBuffer(UInt64(var712*var712), 64)
        crccheck.updateBuffer(UInt64(var1563*var1563), 64)
        crccheck.updateBuffer(UInt64(var1809*var1809), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Aggregate572 {

}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_expected_catch_or_finally_in_try
// ASSERT: scan parse_unexpected_declaration_in_scope
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_expected_left_brace
// ASSERT: scan parse_expected_case


