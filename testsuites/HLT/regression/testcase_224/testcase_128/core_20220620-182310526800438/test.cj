/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output


public let var7 : Unit = ()
public let var21 : Bool = true
let var32 : (Int8, Rune, Unit, Int16) = (Int8(63), 'T', (), Int16(108))
public let var60 : Int8 = Int8(62)
public let var73 : Int64 = Int64(Int32(-48))
public var var84 : UInt64 = UInt64(UInt16(100))
public var var193 : UInt64 = UInt64(134)
public var var250 : UInt16 = UInt16(211)
public var var307 : Option<Unit> = Option<Unit>.None
public let var312 : Range<UInt64> = (UInt64(UInt16(158))&127..=UInt64(Int16(-45))&127:(Int64(UInt32(Int32(Int8(-127))))|1))
var var388 : Range<Int16> = (Int16(Int8(UInt8(148)))&127..=Int16(Int16(-21))&127:(Int64(UInt8(Int8(UInt8(5))))|1))
let var438 : (Int8, Int64, Float64, UInt64, Unit, Int32) = (Int8(18), 115, 102.0, UInt64(Int32(43)), (), Int32(-47))
public var var531 : (Int8, Rune, Unit, Int16) = (Int8(-15), 'p', (), Int16(UInt8(Int8(UInt8(132)))))
public var var585 : Int32 = Int32(Int32(Int16(84)))
public var var592 : Option<Bool> = ((Int8(-53)&127..Int8(59)&127:(-107)|1) as Bool)
let var702 : ?UInt8 = ((Int64(UInt8(Int8(80)))&127..Int64(Int32(UInt16(37)))&127:(68|1)) as UInt8)
public var var802 : ?Unit = Option<Unit>.None
public let var850 : Int8 = Int8(UInt8(Int8(Int8(UInt8(112)))))
public var var885 : Bool = (Int32(69) is (Unit, UInt64))
public let var890 : (UInt64, UInt32, Option<Unit>, Bool) = (UInt64(UInt8(Int8(Int8(7)))), UInt32(120), (###"qmFi<%Q}pU"### as Unit), false)
public let var914 : UInt32 = UInt32(Int8(23))
let var971 : (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>) = (",17U>vg|ly", [(), (), (), (), (), (), (), (), (), ()], (-71), (Int8(120), 9, (-96.0), UInt64(137), (), Int32(87)), (UInt8(30)&127..=UInt8(193)&127:117|1))
public var var1006 : (Int8, Rune, Unit, Int16) = (Int8(64), 'R', (), Int16(UInt16(Int8(Int8(-11)))))
let var1023 : (Range<Int32>, Float32, UInt32, Int8, Bool, (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>), Range<Int32>) = ((Int32(-74)&127..=Int32(-29)&127:54|1), Float32(-57.0), UInt32(UInt8(UInt8(29))), Int8(UInt8(231)), false, ("`rQ+>va{&bA", [(), (), (), (), (), (), (), (), (), ()], Int64(Int32(18)), (Int8(UInt8(31)), Int64(UInt64(170)), (-68.0), UInt64(Int16(5)), (), Int32(Int8(-44))), (UInt8(UInt8(39))&127..UInt8(7)&127:(Int64(Int32(74))|1))), (Int32(52)&127..Int32(-28)&127:(-105)|1))
public var var1116 : Int16 = Int16(-124)
public var var1211 : Int64 = Int64(UInt8(Int8(88)))
public let var1216 : Float32 = Float32(Float32(Float32(22.0)))
public var var1240 : UInt8 = UInt8(27)
public let var1352 : Aggregate172 = Aggregate172()
public let var1408 : Array<Int32> = Array<Int32>(10){ i => Int32(56) }
public var var1481 : Range<Int64> = (58&127..Int64(Int32(123))&127:(Int64(UInt32(Int16(Int8(110))))|1))
public var var2083 : Range<Int8> = (Int8(12)&127..=Int8(-3)&127:(-27)|1)
public let var2580 : Float64 = Float64(Float64(Float64(Float32(0.0))))
public var var2668 : Array<Float64> = [Float64(Float64(Float32(Float32(-50.0)))), Float64(Float64(42.0)), (-87.0), 23.0, 87.0, Float64((-79.0)), Float64(Float64(Float64((-109.0)))), 54.0, (-7.0), (-122.0)]
public let var2833 : Float64 = 120.0
public var var2865 : Float64 = 16.0
public var var2945 : ?Array<UInt64> = ([Float64(Float32(Float32(-77.0))), Float64(Float32(-93.0)), Float64(Float32(Float32(63.0))), Float64(Float32(-95.0)), (-112.0), Float64(Float32(-52.0)), (-5.0), Float64(76.0), (-71.0), Float64(Float64(Float32(91.0)))] as Array<UInt64>)
public var var3000 : Range<UInt16> = (UInt16(1)&127..=UInt16(61)&127:126|1)
let var3093 : String = ###"(M`iGSmugF"###
var var3172 : Class376 = Class376()
public let var3202 : Rune = 'R'
public var var3228 : UInt8 = UInt8(Int8(74))
public var var3430 : (Int64, Option<Array<UInt64>>) = (Int64(Int64(UInt8(Int8(-76)))), (74.0 as Array<UInt64>))
public let var3457 : Unit = ()
public let var3489 : ?Int32 = Option<Int32>.None
public var var3604 : Class376 = Class376()
public var var4059 : Int8 = Int8(18)
public var var4237 : Option<Array<Unit>> = (Option<UInt8>.None as Array<Unit>)
let var4400 : Unit = ()
public var var4486 : Unit = ()
public var var4505 : Bool = true
public let var4535 : Bool = ((Option<(Int8, Rune, Unit, Int16)>.None as (UInt64, UInt32, Option<Unit>, Bool)) is Option<Int32>)
public var var4579 : Bool = true
public var var4750 : ?(UInt64, UInt32, Option<Unit>, Bool) = ((UInt8(223)&127..UInt8(UInt8(91))&127:(Int64(Int8(-91))|1)) as (UInt64, UInt32, Option<Unit>, Bool))
var var4862 : UInt32 = UInt32(194)
public var var4886 : Range<UInt8> = (UInt8(87)&127..=UInt8(152)&127:(-42)|1)
public let var4889 : ?Range<UInt8> = (((UInt16(UInt16(8))&127..UInt16(106)&127:((-2)|1)) as Array<Array<Float64>>) as Range<UInt8>)
let var4947 : Float64 = 4.0
var var4951 : Float64 = Float64(Float32(93.0))
let var4970 : Option<Bool> = ((UInt32(Int8(Int8(13))) as (UInt64, UInt32, Option<Unit>, Bool)) as Bool)
public var var4978 : Unit = ()
public var var5006 : ?Float64 = (Option<((Range<Int32>, UInt32, (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>), Unit, Bool), Range<UInt64>, (Int8, Rune, Unit, Int16), (Int8, Int64, Float64, UInt64, Unit, Int32), (Range<Int32>, UInt32, (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>), Unit, Bool), Range<Int8>, Range<UInt16>)>.None as Float64)

public func func14(param15 : Int16) : Unit { // block id: 16
    let var41 : Rune = 's';
    let var51 : Int8 = Int8(-53);
    let var80 : Unit = ();
    if (var21) { try { // block id: 24
        UInt64(33) ** (UInt64(87) & 3);
        (-95);
        if (var21) { var32 } else { (Int8(-107), var41, (), Int16(-22)) } 
    } catch (_) { // block id: 45
        if (false) { var32 } else { (var51, var41, var7, Int16(110)) } 
    } finally { // block id: 56
        Int8(81) ^ var60;
        ();
        if (true) { var32 } else { (Int8(90), 'z', (), param15) } 
    } } else { match (var73) {
        case _ : UInt32 => 
            var80;
            var84--;
            if (var21) { var32 } else { (Int8(3), '6', (), param15) } 
        
        case caseVar97 : (Int8, Rune, Unit, Int16) => 
            (Int8(-109), var41, (), Int16(-98))
        
        case caseVar106 => 
            var7;
            var32;
            (var51, var41, (), Int16(19))
        
        case 37 | -94 | 126 => 
            if (true) { var32 } else { var32 } 
        
        case _ => 
            var80;
            """
6da{/b
>Dr]\"
""";
            if (var21) { var32 } else { (Int8(-59), var41, var7, param15) } 
        
    } } [2];
    let var143 : ?UInt8 = Option<UInt8>.None;
    var var146 : UInt8 = UInt8(UInt8(Int8(UInt8(190))));
    var loopTimeVar153 : Int64 = 0;
    do {
        loopTimeVar153++;

    } while ((((var143 ?? var146) is Float32)) && loopTimeVar153 < 100 ) 
}


public struct Aggregate172 {
    public init() { // block id: 174

    }
;
    public static func func177(param178 : Int32, optionalParam179 ! : Bool = (###"f1\"|jp3\"_b"### is Aggregate172)) : (UInt64, UInt32, Option<Unit>, Bool) { // block id: 182
        (try { // block id: 185
            let var187 : UInt64 = UInt64(Int8(Int8(11)));
            var187
        } finally { // block id: 191
            var193
        }, UInt32(234), match (var7) {
            case _ : UInt8 => 
                Option<Unit>.Some(())
            
            case caseVar205 => 
                Option<Unit>.None
            
            case _ => 
                Int32(-27);
                UInt16(115);
                Option<Unit>.Some(var7)
            
        }, optionalParam179)
    }
;
    private static let var723 : Range<UInt8> = (UInt8(131)&127..=UInt8(119)&127:(81|1));
    static var var1082 : UInt8 = UInt8(147);
    public static func func683(param688 : (UInt64, UInt32, Option<Unit>, Bool)) : Bool { // block id: 689
        var var693 : (Unit, UInt64) = ((), UInt64(123));
        var693[0];
        var var741 : Int8 = Int8(56);
        match {
            case match (var702) {
            case _ => 
                true && true
            
            case caseVar720 => 
                var723;
                !var21
            
            case caseVar732 : Range<Int16> => 
                true
            
            case _ => 
                ();
                var7;
                var741 < var741
            
        } => 
            let var757 : Int16 = Int16(28);
            if (var21) { // block id: 747
                var var751 : Rune = 'b';
                var var754 : Unit = ();
                (Int8(-46), var751, var754, var757);
                var21
            } else { // block id: 760
                UInt16(239) != UInt16(12)
            }
            case (if (var885) { // block id: 998
            var702;
            UInt8(78)
        } else { // block id: 1001
            if (true) { var531 } else { var1006 } ;
            UInt8(26)
        }|>func765) => 
            var250 = var250;
            var1023[4]
            case _ => 
            [(Int8(-49)&127..Int8(119)&127:29|1), (Int8(-39)&127..Int8(-85)&127:99|1), (Int8(-14)&127..Int8(-56)&127:22|1), (Int8(-63)&127..=Int8(-27)&127:(-88)|1), (Int8(75)&127..Int8(-22)&127:39|1), (Int8(125)&127..Int8(86)&127:(-78)|1), (Int8(-101)&127..=Int8(121)&127:(-9)|1), (Int8(-120)&127..Int8(-3)&127:(-19)|1), (Int8(41)&127..Int8(-34)&127:(-95)|1), (Int8(-71)&127..Int8(-127)&127:55|1)];
            var193 >>= ((UInt64(225)) & 7);
            let var1074 : (UInt8) -> Bool = { lambdaParameter1077 : UInt8 => (###"e&z;_?uzSR"### is (Int32, Bool) -> (UInt64, UInt32, Option<Unit>, Bool)) };
            var1082|>var1074
        }
    }
;
    public let var1355 : UInt32 = UInt32(28);
    public static func func683() : Bool { // block id: 684
        let var1096 : (UInt64, UInt32, Option<Unit>, Bool) = (UInt64(UInt32(100)), UInt32(Int8(Int8(91))), ((Int8(UInt8(34)) is (UInt8) -> Bool) as Unit), false);
        !func683(try { // block id: 1085
            let var1089 : ?(UInt64, UInt32, Option<Unit>, Bool) = ((UInt8(175)&127..=UInt8(23)&127:67|1) as (UInt64, UInt32, Option<Unit>, Bool));
            if (var885) { var1089 } else { var1089 } ;
            if (true) { var1096 } else { (UInt64(232), var914, var802, var21) } 
        } catch (e: Exception) { // block id: 1113
            var1116 <<= ((Int16(-41)) & 7);
            if (var885) { (var850&127..Int8(111)&127:((-53)|1)) } else { (var850&127..=Int8(60)&127:((-40)|1)) } ;
            var1096
        } finally { // block id: 1130
            var7;
            var1096
        });
        var var1136 : Class376 = Class376();
        (var1136.func1139([(), (), (), (), (), (), (), (), (), ()], Float32(-123.0))) >= (((110&127..(-108)&127:(-119)|1)|>func1254)|>func1186)
    }
;
    public static var var2114 : Array<Array<Float64>> = [[5.0, 16.0, 74.0, 20.0, 112.0, (-30.0), 41.0, (-72.0), (-70.0), (-106.0)], [68.0, 10.0, 60.0, 76.0, (-82.0), 52.0, 115.0, (-77.0), 125.0, 113.0], [(-111.0), (-113.0), (-25.0), (-98.0), 122.0, 38.0, (-48.0), (-122.0), (-88.0), (-23.0)], [(-80.0), (-57.0), 14.0, (-118.0), 61.0, (-84.0), (-38.0), (-85.0), (-125.0), 76.0], [(-29.0), 113.0, (-51.0), (-4.0), (-52.0), 82.0, 53.0, 106.0, 120.0, 24.0], [(-5.0), 29.0, (-82.0), (-69.0), (-94.0), 6.0, 9.0, (-48.0), 3.0, 114.0], [(-62.0), 71.0, (-13.0), (-127.0), (-2.0), (-47.0), (-21.0), (-116.0), 23.0, (-105.0)], [123.0, 103.0, 76.0, 48.0, 73.0, 36.0, (-39.0), 70.0, 46.0, 48.0], [(-64.0), (-41.0), 106.0, 68.0, 98.0, 100.0, (-110.0), (-88.0), 62.0, (-47.0)], [(-72.0), 41.0, 2.0, 101.0, (-40.0), (-77.0), (-126.0), 46.0, 57.0, 63.0]];
    private static let var2385 : (Range<Int8>, Array<Float64>, Int16) = ((Int8(-73)&127..=Int8(-4)&127:119|1), [(-69.0), (-60.0), 11.0, (-74.0), (-123.0), (-120.0), 9.0, 88.0, 93.0, (-61.0)], Int16(63));
    public static func func1843(param1844 : Class376) : (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>) { // block id: 1845
        var var1990 : Option<(Range<Int32>, UInt32, (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>), Unit, Bool)> = Option<(Range<Int32>, UInt32, (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>), Unit, Bool)>.Some(((Int32(Int16(-117))&127..=Int32(-119)&127:(98|1)), UInt32(Int16(UInt16(85))), ("7k\\#?`7l/Q", [(), (), (), (), (), (), (), (), (), ()], 3, (Int8(-111), (-19), 35.0, UInt64(134), (), Int32(35)), (UInt8(229)&127..UInt8(238)&127:((-99)|1))), (), (UInt16(UInt16(35)) is Option<Int32>)));
        let var2042 : Option<Range<Int64>> = Option<Range<Int64>>.Some((Int64(Int32(-125))&127..2&127:((-41)|1)));
        let var2076 : Unit = ();
        var var2086 : Array<Float64> = [104.0, 48.0, 106.0, (-81.0), (-16.0), 13.0, (-25.0), 63.0, 65.0, 102.0];
        match (func1848(namedParam1928 : func1254(((-73)&127..=(-83)&127:(-70)|1)), namedParam1929 : match (var1023) {
                case (_,_,_,_,caseVar1982 : UInt64,(caseVar1983 : (Int64, Option<Array<UInt64>>),caseVar1984,caseVar1985 : Int64,_ : UInt64,_ : Int32),_) => 
                    var7;
                    var7;
                    var1990
                
                case _ => 
                    if (var885) { Option<(Range<Int32>, UInt32, (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>), Unit, Bool)>.None } else { Option<(Range<Int32>, UInt32, (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>), Unit, Bool)>.None } 
                
            }, optionalParam1930 : (var2042 ?? (103&127..=(-116)&127:101|1)))) {
            case _ => 
                if (true) { ([var7, (), var7, var7, (), var7, (), (), (), ()], var890, [(), var7, (), var7, (), (), (), var2076, var2076, ()], Float32(-126.0), (var2083, var2086, var1116)) } else { ([var7, (), (), (), (), (), var2076, var2076, (), var2076], (UInt64(69), var914, Option<Unit>.Some(var2076), true), [(), (), (), (), (), (), (), (), (), ()], Float32(125.0), ((Int8(-117)&127..Int8(-71)&127:(-31)|1), [(-126.0), 87.0, (-113.0), (-97.0), (-72.0), (-60.0), (-10.0), 49.0, (-38.0), 31.0], var1116)) } ;
                var2114;
                var var2188 : Int8 = Int8(-37);
                var2188 <<= ((Int8(32)) & 7)
            
        };
        let var2195 : ((Range<Int32>, UInt32, (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>), Unit, Bool), Range<UInt64>, (Int8, Rune, Unit, Int16), (Int8, Int64, Float64, UInt64, Unit, Int32), (Range<Int32>, UInt32, (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>), Unit, Bool), Range<Int8>, Range<UInt16>) = (((Int32(54)&127..=Int32(UInt16(108))&127:(Int64((-60))|1)), UInt32(UInt16(82)), (###"fQVNY'\\Rg9"###, [(), (), (), (), (), (), (), (), (), ()], 72, (Int8(108), (-117), 48.0, UInt64(26), (), Int32(47)), (UInt8(49)&127..UInt8(244)&127:(-51)|1)), (), ([Int32(-103), Int32(20), Int32(45), Int32(-80), Int32(-118), Int32(119), Int32(-65), Int32(-36), Int32(61), Int32(45)] is Array<Array<Float64>>)), (UInt64(240)&127..UInt64(UInt16(UInt16(221)))&127:(81|1)), (Int8(126), 'E', (), Int16(Int8(37))), (Int8(89), Int64(Int64((-17))), Float64(Float64(47.0)), UInt64(77), (), Int32(37)), ((Int32(63)&127..=Int32(-122)&127:10|1), UInt32(Int32(UInt8(0))), (###")?*aLCMfqq"###, [(), (), (), (), (), (), (), (), (), ()], Int64(UInt32(53)), (Int8(-6), 99, 36.0, UInt64(105), (), Int32(-3)), (UInt8(71)&127..=UInt8(108)&127:(-39)|1)), (), ([82, (-93), 107, (-92), (-44), (-85), 110, 97, 79, 55] is (Range<Int32>, Float32, UInt32, Int8, Bool, (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>), Range<Int32>))), (Int8(32)&127..Int8(94)&127:49|1), (UInt16(UInt8(Int8(-17)))&127..=UInt16(96)&127:(Int64(UInt8(24))|1)));
        let var2322 : (Array<Unit>, (UInt64, UInt32, Option<Unit>, Bool), Array<Unit>, Float32, (Range<Int8>, Array<Float64>, Int16)) = ([(), (), (), (), (), (), (), (), (), ()], (UInt64(38), UInt32(UInt8(207)), Option<Unit>.Some(()), ([96, (-87), 100, 26, (-38), 102, (-113), (-28), 35, 58] is Option<Unit>)), [(), (), (), (), (), (), (), (), (), ()], Float32(-22.0), ((Int8(-34)&127..=Int8(-64)&127:(-45)|1), [Float64(110.0), 10.0, (-77.0), Float64(Float32(15.0)), 121.0, Float64(75.0), 10.0, Float64(Float32(-32.0)), (-28.0), 8.0], Int16(-64)));
        match (if ((var2195 is String)) { // block id: 2293
                var885 ||= false;
                ();
                ("?\\7]i.aauA", [(), (), (), (), (), (), (), (), (), ()], var1211, (Int8(-88), 47, 103.0, var193, (), Int32(126)), var723)
            } else { // block id: 2310
                var2076;
                ();
                var971
            }) {
            case caseVar2316 => 
                var1116 ** (var1116 & 3);
                var2322
            
            case (caseVar2355 : (Int8, Int64, Float64, UInt64, Unit, Int32),_,_,(caseVar2356 : Option<Array<UInt64>>,caseVar2357,caseVar2358 : Option<(UInt64, UInt32, Option<Unit>, Bool)>,caseVar2359,_ : Array<Array<Float64>>,caseVar2360 : (Unit, UInt64)),_ : Array<Int64>) => 
                -UInt64(180);
                ();
                var var2371 : Array<Unit> = Array<Unit>(10){ i => () };
                if (false) { ([(), (), (), (), (), (), (), (), (), ()], var890, var2371, var1216, var2385) } else { ([(), (), (), (), (), (), (), (), (), ()], var890, [(), (), (), (), (), (), (), (), (), ()], Float32(90.0), var2385) } 
            
            case _ => 
                var7;
                var1240 |= var1240;
                let var2417 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
                if (var21) { var2322 } else { (var2417, var890, [(), (), (), (), (), (), var7, var2076, (), var2076], var1216, ((Int8(38)&127..Int8(-59)&127:75|1), var2086, var1116)) } 
            
        };
        if (try { // block id: 2438
            var885
        } catch (_) { // block id: 2440
            if (false) { var890 } else { var890 } ;
            !var885
        }) { (param1844.var2450) } else { (var1211 ** (72 & 3)|>(func3081~>func2605)) } 
    }
;
    public var var4515 : Bool = false;
    func func354(optionalParam355 ! : UInt8 = UInt8(Int8(UInt8(244))), optionalParam359 ! : Range<UInt64> = (UInt64(32)&127..UInt64(230)&127:93|1), optionalParam361 ! : UInt16 = UInt16(Int16(UInt16(Int8(UInt8(34)))))) : Array<Unit> { // block id: 367
        var var369 : Int8 = Int8(UInt8(UInt8(225)));
        var369;
        let var4603 : Bool = ((((Option<UInt8>.Some(UInt8(182)) is Int16) as Bool) as Array<Float64>) is Option<String>);
        var loopTimeVar4611 : Range<UInt64> = (UInt64(1)&127..UInt64(170)&127:(57|1));
        [(), func380().func4289(), (var802 ?? if (var4515) { // block id: 4517

        } else if (var4505) { // block id: 4519
            ()
        }), (), var4400, (var2865 += Float64(var1216)), (var1211 |= try { // block id: 4530
            (-76)
        } finally { // block id: 4532
            if (var4535) { (var1116&127..=Int16(-68)&127:(var1211|1)) } else { var388 } ;
            var7;
            18
        }), (var1211 |= if (true) { // block id: 4550
            var4400;
            var1211 / (((-67)) | 1)
        } else { // block id: 4555
            (-64)
        }), var3457, for (i in loopTimeVar4611 where match ([UInt64(254), UInt64(195), UInt64(69), UInt64(122), UInt64(252), UInt64(2), UInt64(42), UInt64(82), UInt64(29), UInt64(126)]) {
            case _ : Option<Range<Int64>> => 
                var var4565 : (Int64, Option<Array<UInt64>>) = ((-100), Option<Array<UInt64>>.Some([UInt64(117), UInt64(10), UInt64(55), UInt64(229), UInt64(193), UInt64(118), UInt64(19), UInt64(59), UInt64(47), UInt64(178)]));
                var4565;
                Float32(-124.0) != var1216
            
            case caseVar4575 : Option<Range<UInt8>> => 
                if (var4579) { Option<Option<Bool>>.Some(Option<Bool>.None) } else { Option<Option<Bool>>.Some(Option<Bool>.Some(true)) } ;
                var4486;
                var885
            
            case caseVar4590 : (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>) => 
                var250 >>= ((UInt16(251)) & 7);
                var3457;
                var var4597 : Bool = false;
                var4597
            
            case _ => 
                var850;
                var4603
            
        }) {

        }]
    }
;
    public static var var4625 : Bool = false;
    public static var var4628 : Range<UInt64> = (UInt64(240)&127..=UInt64(227)&127:(-75)|1);
    var var4634 : UInt16 = UInt16(37);
    func func345(namedParam346 ! : Range<Int32>, namedParam347 ! : Option<Int32>, namedParam348 ! : Option<Int32>) : Unit { // block id: 349
        ();
        func354(optionalParam355 : (var702 ?? var1240), optionalParam359 : try { // block id: 4620
            var3430;
            var702;
            if (var4625) { var4628 } else { var4628 } 
        } finally { // block id: 4631
            var4628
        }, optionalParam361 : var4634)[4]
    }
;
    public init(param338 : UInt32, param339 : Range<Int64>, param340 : Int32, namedParam341 ! : (Int8, Rune, Unit, Int16)) { // block id: 342
        Int8(-33);
        func345(namedParam346 : (Int32(91)&127..=Int32(-48)&127:(-40)|1), namedParam347 : match (var585 ^ Int32(-12)) {
            case -111 | 111 => 
                var3489
            
            case 108 | -29 | 66 | 13 => 
                if (var885) { Option<Int32>.None } else { var3489 } 
            
            case _ => 
                var4059;
                ();
                if (var4535) { Option<Int32>.None } else { var3489 } 
            
        }, namedParam348 : var3489)
    }

}


public func func166(optionalParam167 ! : UInt32 = UInt32(89), namedParam169 ! : UInt32) : (UInt64, UInt32, Option<Unit>, Bool) { // block id: 170
    let var221 : ?Int32 = Option<Int32>.None;
    var var224 : Int32 = Int32(UInt32(Int16(UInt16(UInt16(203)))));
    Aggregate172.func177((var221 ?? var224), optionalParam179 : try { // block id: 231
        var21;
        if (true) { Option<Unit>.Some(var7) } else { Option<Unit>.Some(()) } ;
        false
    } catch (_) { // block id: 240
        ();
        false
    } finally { // block id: 243
        var var246 : Int64 = Int64(UInt32(13));
        var246++;
        var250;
        false
    })
}


public open class Class376 <: Resource {
    public init() { // block id: 378

    }
;
    var var640 : UInt8 = UInt8(52);
    func func1139(param1140 : Array<Unit>, param1141 : Float32, optionalParam1142 ! : (UInt32, UInt32) -> (UInt64, UInt32, Option<Unit>, Bool) = { lambdaParameter1145 : UInt32, lambdaParameter1146 : UInt32 => (UInt64(168), UInt32(109), ((UInt64(196)&127..UInt64(238)&127:(-74)|1) as Unit), ((UInt64(77)&127..=UInt64(160)&127:(18|1)) is Range<UInt64>)) }) : Int16 { // block id: 1161
        var loopTimeVar1172 : Int64 = 0;
        var var1175 : Rune = 'S';
        (Option<Unit>.Some(while ((var885) && loopTimeVar1172 < 100 ) {
            loopTimeVar1172++;
            if (var21) { (UInt16(209)&127..UInt16(117)&127:89|1) } else { (UInt16(155)&127..UInt16(138)&127:(-39)|1) } 
        }) ?? match (var1175) {
            case _ => 
                (Int16(109)&127..=Int16(92)&127:124|1);
                ();
                var7
            
        });
        Int16(-45)
    }
;
    var var2450 : (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>) = ("BAzmwD0D<O", [(), (), (), (), (), (), (), (), (), ()], (-35), (Int8(-34), (-17), (-70.0), UInt64(252), (), Int32(17)), (UInt8(103)&127..=UInt8(213)&127:((-39)|1)));
    public static let var3390 : Bool = true;
    public static func func1601(param1602 : Range<UInt32>, optionalParam1603 ! : (Range<Int32>, Float32, UInt32, Int8, Bool, (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>), Range<Int32>) = ((Int32(-76)&127..Int32(Int8(-70))&127:(45|1)), Float32(103.0), UInt32(253), Int8(55), true, (###" YxCvyx'\"q"###, [(), (), (), (), (), (), (), (), (), ()], 83, (Int8(-96), Int64(Int32(-75)), Float64(33.0), UInt64(74), (), Int32(Int16(-87))), (UInt8(75)&127..UInt8(17)&127:17|1)), (Int32(Int16(Int8(-47)))&127..Int32(24)&127:(17|1)))) : Bool { // block id: 1635
        let var3351 : ((Range<Int32>, Float32, UInt32, Int8, Bool, (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>), Range<Int32>)) -> Option<Float32> = func1639;
        var var3380 : Option<Bool> = ((Int8(108), 'l', (), Int16(Int8(Int8(100)))) as Bool);
        (match ((var1023|>var3351)) {
            case _ => 
                ();
                Option<Bool>.Some(true)
            
            case _ => 
                var7;
                var2945;
                Option<Bool>.Some(true)
            
        } ?? ((Option<Option<Bool>>.None ?? Option<Bool>.None) ?? (var3380 ?? var3390)))
    }
;
    public open func func1570(namedParam1571 ! : Array<UInt64>) : Float32 { // block id: 1572
        var loopTimeVar3399 : Int64 = 0;
        do {
            loopTimeVar3399++;

        } while (((try { // block id: 1576
            Option<Bool>.Some(false)
        } catch (_) { // block id: 1579
            (var1211, Option<Array<UInt64>>.None);
            Option<Bool>.Some(var21)
        } finally { // block id: 1585
            var250 <<= ((var250) & 7);
            (Int8(69), 14, 116.0, UInt64(11), var7, Int32(96));
            if (true) { Option<Bool>.None } else { var592 } 
        } ?? func1601((UInt32(154)&127..UInt32(1)&127:((-15)|1)), optionalParam1603 : var1023))) && loopTimeVar3399 < 100 ) ;
        var1216
    }
;
    private static var var4345 : Range<Int32> = (Int32(-58)&127..=Int32(-26)&127:(12|1));
    static let var4480 : Range<UInt64> = (UInt64(47)&127..UInt64(148)&127:(-83)|1);
    open func func4289() : Unit { // block id: 4290
        match ([(), (), (), (), (), (), (), (), (), ()]) {
            case _ => 
                [(), (), (), (), (), (), (), (), (), ()];
                var1352;
                var585
            
            case _ : Int16 => 
                var1116++;
                Int32(-119) * Int32(4)
            
            case _ => 
                var585 - var585
            
        } & (try { // block id: 4315
            var3489
        } catch (e: Exception) { // block id: 4317
            ();
            var3489
        } finally { // block id: 4320
            Option<Int32>.Some(var585)
        } ?? try { // block id: 4324
            var7;
            var585 ** (Int32(-36) & 3)
        } catch (e: Exception) { // block id: 4329
            var250 = var250;
            Int32(-120)
        });
        var var4459 : (Range<Int32>, UInt32, (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>), Unit, Bool) = ((Int32(35)&127..=Int32(-58)&127:(-111)|1), UInt32(Int32(-61)), ("~sD^y##bjM", [(), (), (), (), (), (), (), (), (), ()], 78, (Int8(UInt8(211)), 17, (-95.0), UInt64(73), (), Int32(103)), (UInt8(131)&127..=UInt8(131)&127:43|1)), (), false);
        var var4491 : Int8 = Int8(-100);
        var loopTimeVar4510 : Int64 = 0;
        do {
            loopTimeVar4510++;
            var var4354 : Array<Unit> = Array<Unit>(10){ i => () };
            var var4384 : ?((Range<Int32>, UInt32, (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>), Unit, Bool), Range<UInt64>, (Int8, Rune, Unit, Int16), (Int8, Int64, Float64, UInt64, Unit, Int32), (Range<Int32>, UInt32, (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>), Unit, Bool), Range<Int8>, Range<UInt16>) = ((UInt64(UInt32(130)) as UInt8) as ((Range<Int32>, UInt32, (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>), Unit, Bool), Range<UInt64>, (Int8, Rune, Unit, Int16), (Int8, Int64, Float64, UInt64, Unit, Int32), (Range<Int32>, UInt32, (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>), Unit, Bool), Range<Int8>, Range<UInt16>));
            match (Option<Range<Int64>>.None) {
                case _ => 
                    Option<(Range<Int32>, UInt32, (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>), Unit, Bool)>.Some((var4345, var914, ("6DyMyJ5cc?", var4354, var1211, (Int8(-127), var1211, 4.0, var193, var7, var585), (UInt8(29)&127..UInt8(212)&127:((-65)|1))), (), var885));
                    ();
                    if (true) { var4384 } else { var4384 } 
                
                case _ : Option<Float32> => 
                    var var4410 : (Range<Int32>, UInt32, (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>), Unit, Bool) = ((Int32(-2)&127..Int32(-49)&127:(Int64(UInt8(37))|1)), UInt32(238), (###"S3Nub$#6N<"###, [(), (), (), (), (), (), (), (), (), ()], (-27), (Int8(UInt8(252)), 44, Float64((-8.0)), UInt64(Int8(-9)), (), Int32(UInt32(156))), (UInt8(UInt8(180))&127..UInt8(UInt8(24))&127:(Int64(Int8(-83))|1))), (), (Option<Range<Int64>>.Some(((-79)&127..=37&127:((-64)|1))) is Array<Int64>));
                    Option<((Range<Int32>, UInt32, (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>), Unit, Bool), Range<UInt64>, (Int8, Rune, Unit, Int16), (Int8, Int64, Float64, UInt64, Unit, Int32), (Range<Int32>, UInt32, (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>), Unit, Bool), Range<Int8>, Range<UInt16>)>.Some((((Int32(65)&127..Int32(59)&127:47|1), var914, var971, var4400, true), (UInt64(175)&127..=var193&127:(var1211|1)), var531, var438, var4410, (Int8(-58)&127..=Int8(-87)&127:105|1), var3000))
                
                case _ : (Unit, UInt64) => 
                    Option<((Range<Int32>, UInt32, (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>), Unit, Bool), Range<UInt64>, (Int8, Rune, Unit, Int16), (Int8, Int64, Float64, UInt64, Unit, Int32), (Range<Int32>, UInt32, (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>), Unit, Bool), Range<Int8>, Range<UInt16>)>.None
                
                case _ : Int64 => 
                    Option<((Range<Int32>, UInt32, (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>), Unit, Bool), Range<UInt64>, (Int8, Rune, Unit, Int16), (Int8, Int64, Float64, UInt64, Unit, Int32), (Range<Int32>, UInt32, (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>), Unit, Bool), Range<Int8>, Range<UInt16>)>.Some((var4459, var4480, (Int8(69), 'S', var4486, Int16(79)), (var4491, 86, (-30.0), var193, (), var585), var4459, (Int8(-66)&127..=Int8(-64)&127:18|1), (UInt16(128)&127..=UInt16(74)&127:103|1)))
                
                case _ => 
                    if (var4505) { Option<((Range<Int32>, UInt32, (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>), Unit, Bool), Range<UInt64>, (Int8, Rune, Unit, Int16), (Int8, Int64, Float64, UInt64, Unit, Int32), (Range<Int32>, UInt32, (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>), Unit, Bool), Range<Int8>, Range<UInt16>)>.None } else { var4384 } 
                
            }
        } while ((false) && loopTimeVar4510 < 100 ) 
    }

    public func isClosed(): Bool { return false }
    public func close(): Unit {}
}







public func func795<T0, T1, T2>(param796 : Range<Int64>) : Unit { // block id: 797
    let var808 : (Range<Int8>, Array<Float64>, Int16) = ((Int8(42)&127..=Int8(11)&127:124|1), [16.0, 51.0, Float64(45.0), Float64(Float32(Float32(117.0))), 20.0, (-17.0), Float64(Float32(-55.0)), (-39.0), Float64(Float64(21.0)), Float64(Float32(113.0))], Int16(75));
    var var858 : Int64 = 47;
    try { // block id: 799
        (var802 ?? var7);
        var808[0]
    } catch (e: Exception) { // block id: 831
        (Option<Float32>.Some(Float32(-76.0)) ?? Float32(0.0));
        var var844 : Range<Int8> = (Int8(-98)&127..=Int8(-52)&127:(-27)|1);
        [var844, var844, var844, (var850&127..=var850&127:(var858|1)), (var850&127..var850&127:(var858|1)), (Int8(-76)&127..=Int8(90)&127:(-126)|1), (Int8(33)&127..=var850&127:(var858|1)), var844, var844, var844][8]
    };
    let var921 : Float32 = Float32(-86.0);
    match ((try { // block id: 880
            var7;
            var21;
            var var901 : ?(UInt64, UInt32, Option<Unit>, Bool) = (UInt16(237) as (UInt64, UInt32, Option<Unit>, Bool));
            if (var885) { Option<(UInt64, UInt32, Option<Unit>, Bool)>.Some(var890) } else { var901 } 
        } catch (_) { // block id: 904
            Option<(UInt64, UInt32, Option<Unit>, Bool)>.Some(var890)
        } ?? ([(), (), (), (), (), (), (), (), (), ()], (UInt64(70), var914, var802, true), [(), (), (), (), (), (), (), (), (), ()], var921, var808)[1])) {
        case (caseVar927,_ : UInt64,caseVar928 : Option<(Int8, Rune, Unit, Int16)>,_ : Option<Int32>) => 
            ();
            var var934 : UInt8 = UInt8(77);
            (UInt8(78)&127..=var934&127:((-128)|1))
        
        case (_ : Range<UInt64>,caseVar939,_,_) => 
            (Int8(72)&127..=var850&127:(118|1));
            var var946 : String = """
^_u>*
_n'7~
""";
            var946;
            let var949 : Range<UInt8> = (UInt8(194)&127..=UInt8(72)&127:90|1);
            var949
        
        case _ => 
            var193 |= var193;
            (UInt8(168)&127..UInt8(139)&127:((-26)|1))
        
    };
    var loopTimeVar964 : Int64 = 0;
    do {
        loopTimeVar964++;

    } while ((true) && loopTimeVar964 < 100 ) 
}

public func func765(param766 : UInt8) : Bool { // block id: 767
    var var774 : Unit = ();
    let var787 : (Unit, UInt64) = ((), UInt64(UInt16(Int16(Int16(-51)))));
    try (resource = Class376()) { // block id: 769
        [var774, (), var7, (), var774, var7, var7, (), (), ()][7];
        var787;
        ((-117)&127..24&127:48|1)|>func795<Option<UInt8>, Option<UInt8>, Rune>
    } finally { // block id: 967
        var971[3];
        (Option<Unit>.None ?? ());
        var loopTimeVar992 : Int64 = 0;
        while ((true) && loopTimeVar992 < 100 ) {
            loopTimeVar992++;

        }
    };
    ((Int16(-23)&127..=Int16(-51)&127:105|1) is Option<(UInt64, UInt32, Option<Unit>, Bool)>)
}

public func func1186(param1187 : Range<Int32>) : Int16 { // block id: 1188
    let var1198 : Rune = 'V';
    if (([Int32(-6), Int32(61), Int32(20), Int32(97), Int32(-95), Int32(-26), Int32(-82), Int32(39), Int32(-55), Int32(-82)][5] is Unit)) { try { // block id: 1196
        var1198
    } catch (e: Exception) { // block id: 1200
        var802;
        '8'
    } } else { if (try { // block id: 1205
        ((var585&127..=var585&127:(var1211|1)), var1216, UInt32(215), Int8(81), true, var971, (Int32(88)&127..Int32(-39)&127:(-81)|1));
        var193 %= ((var193) | 1);
        var21
    } catch (_) { // block id: 1229
        false && var21
    }) { // block id: 1233
        if (false) { Option<UInt8>.Some(UInt8(139)) } else { Option<UInt8>.Some(var1240) } ;
        var1198
    } else if (true) { // block id: 1244
        'C'
    } else { // block id: 1246
        ();
        var7;
        var1198
    } } ;
    ();
    var1116
}

func func1254(param1255 : Range<Int64>) : Range<Int32> { // block id: 1256
    let var1287 : Int8 = Int8(9);
    let var1329 : Range<UInt64> = (UInt64(UInt32(201))&127..=UInt64(UInt16(5))&127:(Int64(UInt16(112))|1));
    var loopTimeVar1349 : Int64 = 0;
    do {
        loopTimeVar1349++;
        var var1307 : ?UInt8 = (Option<Bool>.None as UInt8);
        var var1319 : UInt8 = UInt8(32);
        let var1340 : Array<Float64> = [111.0, (-83.0), 122.0, (-3.0), 89.0, 80.0, (-42.0), 90.0, 35.0, 90.0];
        match (()) {
            case _ : Range<Int32> => 
                var1307;
                var1240 << ((var1240) & 7)
            
            case _ => 
                var1240 ** (var1319 & 3)
            
            case () | () | () => 
                var1319
            
            case () | () | () => 
                var1329;
                if (true) { var1340 } else { [109.0, (-91.0), (-112.0), 101.0, 28.0, 88.0, 101.0, (-99.0), 86.0, 89.0] } ;
                var1240
            
            case _ => 
                var1319
            
        };
        var7
    } while ((match {
        case match (var1116) {
        case -116 => 
            false
        
        case -14 | -90 | -107 => 
            Int16(-90) ^ Int16(-125);
            false || true
        
        case _ => 
            true
        
    } => 
        if (true) { ((-127)&127..(-4)&127:125|1) } else { (var1211&127..(-106)&127:(var1211|1)) } ;
        var var1290 : Rune = 'b';
        (var1287, var1290, var7, var1116);
        false && var885
        case _ => 
        var7;
        var21
    }) && loopTimeVar1349 < 100 ) ;
    var1352.var1355;
    var var1394 : (UInt64, UInt32, Option<Unit>, Bool) = (UInt64(Int16(UInt16(209))), UInt32(Int8(UInt8(Int8(-90)))), Option<Unit>.None, false);
    (match (if (var885) { var802 } else { var802 } ) {
        case caseVar1365 => 
            [var7, (), var7, var7, var7, var7, (), var7, var7, ()];
            var1240 <<= ((UInt8(54)) & 7);
            Int32(106) | Int32(18)
        
        case _ => 
            if (var21) { (var193, UInt32(230), var802, true) } else { var1394 } ;
            var585
        
    }&127..=var1408[4]&127:(if (var21) { [(-117), 114, 86, (-109), 116, 35, 124, 76, (-49), 126] } else { [(-8), 99, (-56), 121, 65, 30, 48, 17, 121, (-20)] } [6]|1))
}



public func func1848(optionalParam1849 ! : Option<(Int8, Rune, Unit, Int16)> = (((((Int32(44)&127..Int32(-95)&127:(-49)|1), UInt32(170), (###"$a{Bt\". G.5"###, [(), (), (), (), (), (), (), (), (), ()], 94, (Int8(43), (-28), 93.0, UInt64(174), (), Int32(58)), (UInt8(188)&127..=UInt8(104)&127:77|1)), (), false), (UInt64(219)&127..=UInt64(76)&127:(-123)|1), (Int8(124), 'M', (), Int16(105)), (Int8(26), 115, (-12.0), UInt64(77), (), Int32(-88)), ((Int32(108)&127..Int32(-5)&127:((-28)|1)), UInt32(108), (###"/0mA;ZP$<_"###, [(), (), (), (), (), (), (), (), (), ()], (-10), (Int8(-108), (-19), (-119.0), UInt64(121), (), Int32(110)), (UInt8(39)&127..UInt8(54)&127:(5|1))), (), true), (Int8(-127)&127..=Int8(119)&127:36|1), (UInt16(8)&127..UInt16(129)&127:0|1)) as Float32) as (Int8, Rune, Unit, Int16)), namedParam1928 ! : Range<Int32>, namedParam1929 ! : Option<(Range<Int32>, UInt32, (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>), Unit, Bool)>, optionalParam1930 ! : Range<Int64> = ((-4)&127..Int64(UInt8(Int8(UInt8(197))))&127:((-24)|1))) : Array<Int32> { // block id: 1938
    var var1950 : Array<Float64> = [106.0, Float64(86.0), Float64(Float32(-49.0)), Float64(Float64((-107.0))), Float64(Float32(-66.0)), (-28.0), 83.0, (-81.0), 34.0, (-17.0)];
    var var1972 : Array<Array<Float64>> = [[(-71.0), 1.0, (-35.0), (-90.0), (-52.0), 125.0, (-54.0), 75.0, 109.0, (-106.0)], [(-89.0), (-38.0), (-106.0), (-34.0), 17.0, 110.0, 33.0, 33.0, (-4.0), (-114.0)], [(-70.0), (-105.0), (-9.0), 108.0, 71.0, (-51.0), (-79.0), (-9.0), 21.0, (-35.0)], [65.0, 67.0, 68.0, (-8.0), 28.0, (-57.0), (-13.0), (-97.0), 20.0, 118.0], [33.0, 59.0, (-119.0), (-36.0), (-81.0), (-73.0), 51.0, (-123.0), (-42.0), (-58.0)], [27.0, (-4.0), 63.0, 73.0, (-38.0), 22.0, (-44.0), (-16.0), (-30.0), 63.0], [(-113.0), 105.0, (-68.0), (-38.0), 121.0, 37.0, 12.0, 23.0, (-62.0), 120.0], [(-47.0), (-55.0), 15.0, (-8.0), (-23.0), (-55.0), (-32.0), 125.0, (-47.0), (-41.0)], [88.0, 53.0, (-5.0), (-17.0), (-74.0), 10.0, 3.0, (-126.0), (-120.0), 100.0], [92.0, 76.0, (-118.0), 111.0, 39.0, (-91.0), 25.0, (-73.0), (-119.0), (-86.0)]];
    try { // block id: 1940
        if (true) { var702 } else { Option<UInt8>.Some(UInt8(30)) } ;
        (-81.0);
        if (var21) { var1950 } else { [77.0, (-109.0), (-92.0), 93.0, 119.0, 24.0, (-70.0), 121.0, 50.0, (-118.0)] } 
    } finally { // block id: 1968
        var1972[4]
    };
    [Int32(-90), Int32(-80), Int32(7), Int32(-21), Int32(-64), Int32(106), Int32(41), Int32(-19), Int32(3), Int32(108)]
}


public func func2477(param2478 : Int64) : (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>) { // block id: 2479
    var7;
    ();
    var var2506 : String = ###"V DATNl}#)"###;
    var var2523 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    var var2527 : (Int8, Int64, Float64, UInt64, Unit, Int32) = (Int8(-63), 71, Float64(121.0), UInt64(Int32(-112)), (), Int32(87));
    let var2563 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    match (if (true) { // block id: 2485
            var var2487 : ?Array<UInt64> = ((Int64(UInt16(Int8(50))), Option<Array<UInt64>>.Some([UInt64(249), UInt64(153), UInt64(5), UInt64(80), UInt64(203), UInt64(151), UInt64(187), UInt64(134), UInt64(246), UInt64(149)])) as Array<UInt64>);
            var2487;
            if (true) { """
C>H4X
FeYE,
""" } else { """
'@WaJ
n!j#b
""" } 
        } else { // block id: 2499
            var1211 |= var1211;
            if (false) { var2506 } else { """
qm^Bq
W~]`t
""" } 
        }) {
        case _ => 
            var971
        
        case caseVar2515 : (Range<Int32>, Float32, UInt32, Int8, Bool, (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>), Range<Int32>) => 
            var1211 = param2478;
            ("""
 ]\\j+
}L6Qw
""", var2523, 97, var2527, (UInt8(193)&127..=UInt8(219)&127:52|1))
        
        case caseVar2540 => 
            var1116 ^= Int16(-64);
            var var2551 : Range<UInt8> = (UInt8(187)&127..=UInt8(103)&127:(-82)|1);
            (var2506, [(), (), (), (), (), (), (), (), (), ()], (-75), var438, var2551)
        
        case ">X4:tNa{a(v" | "er;YR8`z6o" | "j.sVXb}Ys=" | ###"#FG`3j[6``"### => 
            var1240 += UInt8(208);
            var1116;
            (var2506, var2563, 57, (var850, (-55), var2580, UInt64(221), var7, Int32(-23)), (UInt8(34)&127..UInt8(150)&127:(var1211|1)))
        
        case _ => 
            var592;
            (###"_S^n?A*p5m"###, [(), (), (), (), (), (), (), (), (), ()], (-95), var2527, (UInt8(16)&127..=var1240&127:((-52)|1)))
        
    }
}



func func2609(param2610 : (Int64) -> (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>)) : Array<Array<Float64>> { // block id: 2613
    var var2658 : Float64 = 94.0;
    let var2701 : Rune = 'd';
    var var2704 : Rune = 'j';
    var var2789 : Float64 = (-49.0);
    var var2841 : Float64 = Float64((-55.0));
    (Option<Array<Array<Float64>>>.None ?? [match (var592) {
        case caseVar2625 => 
            var var2629 : UInt32 = UInt32(49);
            var2629 *= UInt32(8);
            ();
            [16.0, (-37.0), var2580, 106.0, (-25.0), var2580, (-81.0), var2580, 37.0, 84.0]
        
        case _ => 
            [[105.0, 72.0, 113.0, (-4.0), (-13.0), 83.0, 37.0, (-8.0), (-49.0), 11.0], [(-44.0), (-56.0), (-102.0), (-51.0), 84.0, 69.0, (-9.0), (-105.0), 30.0, 122.0], [109.0, 69.0, (-38.0), 16.0, (-50.0), 33.0, (-25.0), 116.0, (-128.0), (-102.0)], [(-15.0), 108.0, (-120.0), 126.0, 96.0, (-23.0), 47.0, 33.0, (-91.0), 15.0], [114.0, (-20.0), (-95.0), (-19.0), 35.0, 53.0, 117.0, (-62.0), 57.0, 21.0], [97.0, 68.0, 65.0, 25.0, (-111.0), (-126.0), (-113.0), 31.0, 116.0, (-7.0)], [36.0, 60.0, (-87.0), (-5.0), (-100.0), 41.0, 89.0, 100.0, (-94.0), 31.0], [(-30.0), (-106.0), 68.0, (-103.0), (-49.0), (-50.0), (-96.0), 98.0, (-1.0), (-118.0)], [18.0, 80.0, 102.0, (-112.0), (-17.0), 100.0, (-76.0), (-115.0), (-41.0), (-84.0)], [64.0, (-96.0), (-53.0), 41.0, 56.0, 123.0, 50.0, (-78.0), 123.0, 26.0]];
            if (var885) { [(-110.0), 35.0, (-36.0), 10.0, 109.0, (-12.0), 76.0, 12.0, 116.0, (-2.0)] } else { [var2580, var2580, 54.0, (-127.0), 72.0, var2658, 45.0, (-49.0), (-82.0), 1.0] } 
        
        case _ : Int16 => 
            var2668
        
        case caseVar2691 : Range<Int8> => 
            [UInt64(218), UInt64(187), UInt64(82), UInt64(7), UInt64(223), UInt64(193), UInt64(99), UInt64(89), UInt64(42), UInt64(84)];
            var7;
            var2668
        
        case _ => 
            if (true) { var2701 } else { var2704 } ;
            if (false) { var2668 } else { var2668 } 
        
    }, try { // block id: 2711
        var1240 -= var1240;
        [var7, var7, var7, (), (), (), var7, var7, var7, var7];
        let var2731 : Float64 = Float64(Float32(-4.0));
        if (var885) { [18.0, 87.0, 69.0, 74.0, 65.0, 54.0, 20.0, (-19.0), (-45.0), 64.0] } else { [var2731, var2658, 36.0, var2731, 74.0, var2658, (-20.0), (-96.0), 13.0, 4.0] } 
    } finally { // block id: 2743
        var585 %= ((Int32(-90)) | 1);
        if (false) { [(-6.0), (-38.0), (-62.0), (-3.0), 102.0, 100.0, (-111.0), 78.0, 52.0, 17.0] } else { [var2658, var2658, (-89.0), var2658, var2580, var2580, (-95.0), 65.0, var2658, (-57.0)] } 
    }, try { // block id: 2762
        (-74.0) * var2658;
        var7;
        let var2771 : Float64 = (-59.0);
        [(-59.0), var2580, var2771, (-93.0), 16.0, var2580, 115.0, 93.0, var2580, (-6.0)]
    } finally { // block id: 2780
        if (var21) { var2668 } else { [(-63.0), 88.0, 14.0, (-8.0), 123.0, 35.0, (-72.0), 95.0, 113.0, 91.0] } 
    }, try { // block id: 2786
        let var2794 : Float64 = 78.0;
        [var2789, 39.0, var2789, var2794, (-50.0), (-86.0), 124.0, 67.0, var2794, var2580]
    } finally { // block id: 2802
        [var2580, var2789, var2658, (-118.0), 126.0, var2789, 96.0, (-113.0), (-126.0), var2580]
    }, try { // block id: 2815
        ();
        var2668
    } catch (_) { // block id: 2818
        [(-70.0), (-116.0), (-94.0), 93.0, 74.0, 17.0, (-107.0), (-119.0), (-13.0), (-10.0)]
    } finally { // block id: 2820
        var7;
        [(-74.0), 91.0, (-103.0), 6.0, (-74.0), 48.0, 117.0, 123.0, (-125.0), (-37.0)]
    }, [var2789, var2789, var2580, var2658, (-100.0), var2580, (-109.0), var2658, var2833, var2789], if (var885) { [71.0, 91.0, (-124.0), 122.0, (-104.0), (-22.0), (-122.0), 93.0, (-50.0), (-4.0)] } else { [var2841, var2833, (-69.0), var2833, 69.0, var2841, 120.0, 91.0, var2841, (-112.0)] } , (Option<Array<Float64>>.Some(var2668) ?? [48.0, (-22.0), (-118.0), (-109.0), 44.0, 73.0, 36.0, 62.0, (-60.0), (-127.0)]), try { // block id: 2862
        var2865 /= Float64((Int32(var2658)) | 1);
        ();
        if (var21) { var2668 } else { [99.0, (-90.0), 28.0, 63.0, (-2.0), 118.0, (-43.0), (-7.0), (-56.0), (-52.0)] } 
    } catch (_) { // block id: 2873
        var var2876 : Float64 = (-82.0);
        [var2876, var2789, 111.0, var2876, var2876, var2658, var2865, var2876, var2789, (-87.0)]
    }, try { // block id: 2888
        [5.0, var2833, var2658, var2580, var2865, (-34.0), var2865, var2833, var2865, var2841]
    } finally { // block id: 2900
        var885 &&= var21;
        ();
        var2668
    }])
}

func func2907(param2478 : Int64) : (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>) { // block id: 2479
    var7;
    ();
    var var2506 : String = ###"V DATNl}#)"###;
    var var2523 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    var var2527 : (Int8, Int64, Float64, UInt64, Unit, Int32) = (Int8(-63), 71, Float64(121.0), UInt64(Int32(-112)), (), Int32(87));
    let var2563 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    match (match {
            case true => 
            var var2487 : ?Array<UInt64> = ((Int64(UInt16(Int8(50))), Option<Array<UInt64>>.Some([UInt64(249), UInt64(153), UInt64(5), UInt64(80), UInt64(203), UInt64(151), UInt64(187), UInt64(134), UInt64(246), UInt64(149)])) as Array<UInt64>);
            var2487;
            if (true) { """
C>H4X
FeYE,
""" } else { """
'@WaJ
n!j#b
""" } 
            case _ => 
            var1211 |= var1211;
            if (false) { var2506 } else { """
qm^Bq
W~]`t
""" } 
        }) {
        case _ => 
            var971
        
        case caseVar2515 : (Range<Int32>, Float32, UInt32, Int8, Bool, (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>), Range<Int32>) => 
            var1211 = param2478;
            ("""
 ]\\j+
}L6Qw
""", var2523, 97, var2527, (UInt8(193)&127..=UInt8(219)&127:52|1))
        
        case caseVar2540 => 
            var1116 ^= Int16(-64);
            var var2551 : Range<UInt8> = (UInt8(187)&127..=UInt8(103)&127:(-82)|1);
            (var2506, [(), (), (), (), (), (), (), (), (), ()], (-75), var438, var2551)
        
        case ">X4:tNa{a(v" | "er;YR8`z6o" | "j.sVXb}Ys=" | ###"#FG`3j[6``"### => 
            var1240 += UInt8(208);
            var1116;
            (var2506, var2563, 57, (var850, (-55), var2580, UInt64(221), var7, Int32(-23)), (UInt8(34)&127..UInt8(150)&127:(var1211|1)))
        
        case _ => 
            var592;
            (###"_S^n?A*p5m"###, [(), (), (), (), (), (), (), (), (), ()], (-95), var2527, (UInt8(16)&127..=var1240&127:((-52)|1)))
        
    }
}

func func2605(param2606 : (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>)) : (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>) { // block id: 2607
    var var2910 : (Int64) -> (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>) = func2907;
    var2910|>func2609;
    let var2937 : String = "r%r6*ca{\"A@";
    let var3033 : Int16 = Int16(-93);
    (if ((false is Array<Range<Int8>>)) { match (var585) {
        case caseVar2920 => 
            var250++;
            if (true) { ###"R$lkSa{>yNX"### } else { "V`<^FwUyqg" } 
        
        case -64 | -80 => 
            [[78.0, (-20.0), 70.0, (-68.0), (-69.0), 26.0, (-72.0), (-59.0), 11.0, (-57.0)], [(-118.0), (-34.0), 38.0, (-19.0), 90.0, 50.0, (-12.0), (-3.0), 114.0, (-20.0)], [72.0, (-122.0), 66.0, (-4.0), (-66.0), 68.0, 75.0, 48.0, (-11.0), (-7.0)], [(-45.0), 65.0, 2.0, 85.0, (-80.0), 65.0, 34.0, (-31.0), (-127.0), (-112.0)], [(-6.0), (-117.0), (-108.0), (-124.0), (-11.0), (-20.0), (-126.0), 88.0, (-18.0), (-27.0)], [20.0, 122.0, (-102.0), (-91.0), 123.0, (-71.0), 110.0, (-9.0), (-86.0), 109.0], [95.0, (-27.0), 120.0, 89.0, 70.0, 100.0, 52.0, (-11.0), (-121.0), (-13.0)], [(-41.0), (-113.0), (-10.0), 0.0, (-102.0), (-30.0), (-65.0), (-28.0), (-23.0), (-59.0)], [(-8.0), 75.0, (-121.0), (-8.0), (-43.0), 8.0, (-19.0), 115.0, 65.0, (-15.0)], [4.0, 24.0, 69.0, 29.0, (-42.0), (-92.0), 74.0, (-99.0), (-53.0), 36.0]];
            ###"VUiK#$MI/-"###
        
        case _ => 
            var2937
        
        case -44 | -110 | -52 | 104 => 
            (var1211, var2945);
            var850;
            if (var21) { """
LVJnY
x&w8c
""" } else { var2937 } 
        
        case _ => 
            var7;
            if (var885) { """
M*fa{N
TMQq~
""" } else { var2937 } 
        
    } } else { "m:${var2937}.${var2937}[,2${var2937}$:Dl${var2937}" } , [(), (), (), (), (), (), (), (), (), ()], if (match (UInt16(145)) {
        case 1 | 69 => 
            var914 < UInt32(218)
        
        case 144 => 
            true
        
        case caseVar2997 : Option<Float32> => 
            var3000;
            2;
            var885
        
        case _ => 
            var885
        
        case _ => 
            var7;
            if (true) { Option<Array<UInt64>>.None } else { var2945 } ;
            var2833 >= 68.0
        
    }) { // block id: 3018
        (-102) >> (((-6)) & 7)
    } else if (if (var21) { // block id: 3024
        false
    } else if (var21) { // block id: 3027
        var7;
        ();
        Int16(-68) > var3033
    } else { // block id: 3035
        (Int32(-51)&127..=Int32(-74)&127:74|1);
        var885
    }) { // block id: 3038
        var7;
        var var3042 : UInt32 = UInt32(Int32(Int16(Int16(Int16(107)))));
        var3042 **= (var3042 & 3);
        (-126)
    } else { // block id: 3050
        Int8(117);
        var438;
        var1211
    }, var438, (UInt8(UInt8(233))&127..if (var21) { // block id: 3060
        var1240 | var1240
    } else if (true) { // block id: 3065
        UInt8(213)
    } else { // block id: 3067
        113.0;
        var885 &&= var885;
        var1240 | var1240
    }&127:(try { // block id: 3076
        var1211
    } catch (e: Exception) { // block id: 3078
        (-66)
    }|1)))
}



public func func3081(param3082 : Int64) : (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>) { // block id: 3083
    var var3128 : Int32 = Int32(-27);
    let var3161 : Range<UInt8> = (UInt8(168)&127..UInt8(218)&127:(Int64(UInt64(11))|1));
    ((((UInt16(146)&127..UInt16(113)&127:76|1) as String) ?? var3093), try { // block id: 3096
        ();
        [(), (), (), (), (), (), var7, var7, var7, var7]
    } catch (e: Exception) { // block id: 3109
        ();
        var var3112 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
        var3112
    }, var1211, try { // block id: 3116
        [(), (), (), (), (), (), (), (), (), ()];
        if (var885) { var438 } else { (Int8(77), var1211, (-100.0), var193, (), var3128) } 
    } catch (e: Exception) { // block id: 3130
        var193 |= UInt64(242);
        ();
        (Int8(-119), param3082, (-10.0), UInt64(90), var7, Int32(49))
    } finally { // block id: 3142
        (var850, (-101), var2865, UInt64(13), var7, var3128)
    }, if (var885) { (UInt8(99)&127..=UInt8(48)&127:(-123)|1) } else { (Option<Range<UInt8>>.Some((UInt8(123)&127..=UInt8(123)&127:(-39)|1)) ?? var3161) } )
}

public func func1833(param1834 : Range<Int32>, param1835 : ((Range<Int32>, UInt32, (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>), Unit, Bool), Range<UInt64>, (Int8, Rune, Unit, Int16), (Int8, Int64, Float64, UInt64, Unit, Int32), (Range<Int32>, UInt32, (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>), Unit, Bool), Range<Int8>, Range<UInt16>), optionalParam1836 ! : Int32 = Int32(UInt32(42))) : (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>) { // block id: 1839
    Aggregate172.func1843(var3172)
}


func func1639(param1640 : (Range<Int32>, Float32, UInt32, Int8, Bool, (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>), Range<Int32>)) : Option<Float32> { // block id: 1641
    let var1699 : (Range<Int32>, UInt32, (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>), Unit, Bool) = ((Int32(114)&127..Int32(-80)&127:68|1), UInt32(155), ("""
sei[`
]/T=l
""", [(), (), (), (), (), (), (), (), (), ()], 84, (Int8(UInt8(152)), (-11), Float64(Float32(88.0)), UInt64(249), (), Int32(-9)), (UInt8(UInt8(193))&127..=UInt8(194)&127:(Int64(UInt64(89))|1))), (), ((UInt32(142)&127..UInt32(171)&127:37|1) is Option<Unit>));
    let var3251 : Unit = ();
    func func1643() : Option<Float32> { // block id: 1644
        let var3175 : Range<Int32> = (Int32(UInt8(UInt8(Int8(44))))&127..Int32(-80)&127:(Int64(UInt16(Int16(Int16(-94))))|1));
        func func1646(namedParam1647 ! : Int32, namedParam1648 ! : Option<Unit>, namedParam1649 ! : Float64) : (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>) { // block id: 1650
            let var1738 : ((Range<Int32>, UInt32, (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>), Unit, Bool), Range<UInt64>, (Int8, Rune, Unit, Int16), (Int8, Int64, Float64, UInt64, Unit, Int32), (Range<Int32>, UInt32, (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>), Unit, Bool), Range<Int8>, Range<UInt16>) = (((Int32(59)&127..=Int32(Int32(103))&127:(Int64(Int32(28))|1)), UInt32(Int8(UInt8(159))), ("5j 4AkqVL'", [(), (), (), (), (), (), (), (), (), ()], Int64(66), (Int8(79), (-74), 48.0, UInt64(166), (), Int32(79)), (UInt8(60)&127..=UInt8(188)&127:((-54)|1))), (), true), (UInt64(UInt16(Int16(-47)))&127..UInt64(42)&127:(Int64(UInt64(UInt64(168)))|1)), (Int8(-56), 'P', (), Int16(Int8(-58))), (Int8(-68), 52, Float64(Float64(Float32(76.0))), UInt64(UInt16(UInt16(89))), (), Int32(Int16(-24))), ((Int32(Int8(-125))&127..Int32(Int32(4))&127:(Int64(Int8(-86))|1)), UInt32(26), (###"`AeF3se-V%"###, [(), (), (), (), (), (), (), (), (), ()], Int64(UInt64(41)), (Int8(115), (-40), 12.0, UInt64(247), (), Int32(-24)), (UInt8(61)&127..=UInt8(191)&127:46|1)), (), ((Int8(-94), 'E', (), Int16(40)) is Array<Range<Int8>>)), (Int8(-118)&127..Int8(-87)&127:(-9)|1), (UInt16(UInt16(69))&127..UInt16(UInt16(232))&127:(4|1)));
            (try { // block id: 1659
                let var1662 : (Range<Int32>, UInt32, (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>), Unit, Bool) = ((Int32(-66)&127..=Int32(63)&127:(Int64(UInt64(66))|1)), UInt32(13), ("""
BL\"TB
v>Oi<
""", [(), (), (), (), (), (), (), (), (), ()], 32, (Int8(70), Int64(UInt16(134)), (-71.0), UInt64(31), (), Int32(24)), (UInt8(117)&127..=UInt8(186)&127:22|1)), (), false);
                Option<(Range<Int32>, UInt32, (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>), Unit, Bool)>.Some(var1662)
            } catch (_) { // block id: 1695
                var1352;
                Option<(Range<Int32>, UInt32, (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>), Unit, Bool)>.Some(var1699)
            } ?? var1738[4])[3];
            func1833(var3175, (([(Int8(-28)&127..=Int8(58)&127:(-20)|1), (Int8(-94)&127..=Int8(-64)&127:114|1), (Int8(123)&127..Int8(100)&127:78|1), (Int8(-7)&127..Int8(-14)&127:67|1), (Int8(6)&127..=Int8(87)&127:(-50)|1), (Int8(-114)&127..=Int8(77)&127:107|1), (Int8(72)&127..Int8(55)&127:(-120)|1), (Int8(91)&127..=Int8(-4)&127:39|1), (Int8(-18)&127..=Int8(-121)&127:(-17)|1), (Int8(-11)&127..=Int8(-106)&127:69|1)] as ((Range<Int32>, UInt32, (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>), Unit, Bool), Range<UInt64>, (Int8, Rune, Unit, Int16), (Int8, Int64, Float64, UInt64, Unit, Int32), (Range<Int32>, UInt32, (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>), Unit, Bool), Range<Int8>, Range<UInt16>)) ?? (var1699, (var193&127..=UInt64(194)&127:((-76)|1)), (var850, var3202, var7, Int16(77)), (Int8(-82), 114, (-84.0), UInt64(168), (), namedParam1647), var1699, var2083, (UInt16(110)&127..UInt16(157)&127:(-36)|1))))
        }
;
        let var3219 : Float64 = Float64(Float64(Float64(95.0)));
        func1646(namedParam1647 : var585, namedParam1648 : var802, namedParam1649 : var3219);
        var var3263 : Range<UInt8> = (UInt8(215)&127..=UInt8(UInt8(188))&127:(Int64(Int32(Int16(Int16(-99))))|1));
        var var3282 : UInt32 = UInt32(Int32(-84));
        var var3297 : ?UInt8 = (((((Int32(91)&127..=Int32(-126)&127:63|1), Float32(-29.0), UInt32(241), Int8(-50), true, ("#N:\"Ej^B5d", [(), (), (), (), (), (), (), (), (), ()], 74, (Int8(30), (-26), (-119.0), UInt64(226), (), Int32(-57)), (UInt8(45)&127..=UInt8(38)&127:((-89)|1))), (Int32(28)&127..=Int32(-1)&127:(3|1))) as Array<Float64>) as Array<Array<Float64>>) as UInt8);
        match (match (Option<UInt8>.Some(var3228)) {
                case _ => 
                    ();
                    [67, 5, (-90), 109, 24, 109, (-86), 97, (-17), 69]
                
            }) {
            case caseVar3237 : UInt8 => 
                ("5MgSx w$<c", [var7, var7, var7, (), (), var7, var7, var7, var3251, var7], var1211, (Int8(66), var1211, (-100.0), var193, (), var585), var3263);
                var3251
            
            case caseVar3275 : Option<Int32> => 
                var1240 ^= var1240;
                var3282 ^= var914
            
            case caseVar3288 : Rune => 
                var3282++
            
            case _ => 
                [104.0, (-26.0), (-2.0), (-114.0), (-67.0), 119.0, (-71.0), 59.0, 107.0, (-26.0)];
                var3297;
                var3251
            
            case _ => 
                (var3175, var914, var971, (), var885);
                var193 %= ((var193) | 1)
            
        };
        ('L' as Float32)
    }
;
    func1643()
}



func func1498(optionalParam1499 ! : (UInt32, UInt32) -> (UInt64, UInt32, Option<Unit>, Bool) = { lambdaParameter1502 : UInt32, lambdaParameter1503 : UInt32 => (UInt64(38), UInt32(73), Option<Unit>.Some(()), (([(), (), (), (), (), (), (), (), (), ()], (UInt64(238), UInt32(134), Option<Unit>.None, false), [(), (), (), (), (), (), (), (), (), ()], Float32(6.0), ((Int8(28)&127..Int8(92)&127:((-53)|1)), [(-92.0), 30.0, 44.0, 91.0, 3.0, 74.0, (-94.0), (-39.0), 50.0, 59.0], Int16(-116))) is (Int8, Rune, Unit, Int16))) }, optionalParam1560 ! : Range<Int16> = (Int16(-116)&127..=Int16(-100)&127:(-94)|1), namedParam1562 ! : Float32) : (Int64, Option<Array<UInt64>>) { // block id: 1563
    let var1567 : Class376 = Class376();
    var var3402 : Array<UInt64> = [UInt64(Int8(Int8(95))), UInt64(Int8(UInt8(UInt8(207)))), UInt64(252), UInt64(21), UInt64(140), UInt64(231), UInt64(250), UInt64(45), UInt64(Int16(-21)), UInt64(Int16(73))];
    let var3462 : ?UInt8 = Option<UInt8>.None;
    match (var1567.func1570(namedParam1571 : var3402)) {
        case 102.0 | 97.0 | 102.0 => 
            ();
            if (var885) { Aggregate172() } else { Aggregate172() } ;
            var3430
        
        case caseVar3440 : Bool => 
            if (false) { var3430 } else { var3430 } 
        
        case caseVar3448 => 
            var var3451 : ?(Int8, Rune, Unit, Int16) = Option<(Int8, Rune, Unit, Int16)>.None;
            var3451;
            var3430
        
        case _ => 
            var3457;
            if (false) { var3462 } else { Option<UInt8>.Some(var3228) } ;
            var3430
        
    }
}


public func func1477() : Float32 { // block id: 1478
    func795<Option<UInt8>, Option<UInt8>, Rune>(var1481);
    let var3494 : ?Range<Int16> = Option<Range<Int16>>.None;
    let var3507 : ?Float32 = Option<Float32>.Some(Float32(-98.0));
    func func1494(param1495 : Range<UInt64>) : (Int64, Option<Array<UInt64>>) { // block id: 1496
        func1498(optionalParam1560 : (match (var702) {
            case caseVar3476 => 
                if (var21) { Option<Range<Int16>>.Some((Int16(48)&127..Int16(-15)&127:((-74)|1))) } else { Option<Range<Int16>>.None } 
            
            case _ => 
                var3489;
                if (false) { var3494 } else { Option<Range<Int16>>.None } 
            
        } ?? match (Int8(109)) {
            case _ => 
                (Int16(23)&127..var1116&127:(var1211|1))
            
        }), namedParam1562 : (var3507 ?? try { // block id: 3511
            var193 = UInt64(152);
            var1216
        } finally { // block id: 3516
            Float32(10.0)
        }))
    }
;
    let var3533 : Option<String> = Option<String>.Some(###"v>*\"jRa{pY;"###);
    match (func1494((UInt64(45)&127..UInt64(135)&127:(var1211|1)))[1]) {
        case caseVar3525 : Option<String> => 
            ();
            var585;
            ()
        
        case _ => 
            var3533;
            ()
        
    };
    -try { // block id: 3539
        Float32(109.0)
    } catch (_) { // block id: 3541
        [Int32(118), Int32(-55), var585, Int32(-75), Int32(-125), var585, var585, var585, var585, Int32(28)];
        if (false) { 'Z' } else { 'b' } ;
        var1216
    }
}

func func1472(param1473 : Range<UInt8>) : Float32 { // block id: 1474
    func1477() / Float32((Int32(try { // block id: 3559
        var1216;
        var1216
    } finally { // block id: 3562
        var3093;
        Float32(46.0) + Float32(-7.0)
    })) | 1)
}

func func1456(param1457 : (Range<Int32>, Float32, UInt32, Int8, Bool, (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>), Range<Int32>)) : UInt64 { // block id: 1458
    let var3568 : (Range<UInt8>) -> Float32 = func1472;
    func func1467(namedParam1468 ! : (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>), namedParam1469 ! : Class376) : Option<Array<UInt64>> { // block id: 1470
        var var3596 : Range<UInt8> = (UInt8(75)&127..=UInt8(201)&127:125|1);
        match ((Option<Array<UInt64>>.Some([UInt64(192), UInt64(33), UInt64(215), UInt64(205), UInt64(174), UInt64(140), UInt64(151), UInt64(37), UInt64(45), UInt64(202)]) ?? [UInt64(120), UInt64(10), UInt64(205), UInt64(249), UInt64(66), UInt64(145), UInt64(69), UInt64(214), UInt64(102), UInt64(201)])) {
            case _ => 
                var3228 -= UInt8(225);
                (var3228&127..UInt8(52)&127:(var1211|1))
            
            case _ => 
                (UInt8(194)&127..=UInt8(168)&127:(-117)|1)
            
            case _ : Option<Option<Bool>> => 
                var885 &&= true;
                var3596
            
            case _ => 
                var3596
            
        }|>var3568;
        Option<Array<UInt64>>.None
    }
;
    (func1467(namedParam1468 : var971, namedParam1469 : var3604) ?? [UInt64(178), UInt64(110), UInt64(63), UInt64(190), UInt64(45), UInt64(71), UInt64(148), UInt64(139), UInt64(17), UInt64(112)])[7]
}


public func func1438(param1439 : Array<Float64>) : Array<Float64> { // block id: 1440
    var var1443 : Class376 = Class376();
    let var3678 : Array<Int64> = [83, 115, 54, 92, 82, (-117), 99, 15, (-103), (-73)];
    var1443.func1446(if (var21) { [(-76), 48, (-31), 42, (-105), (-59), (-1), (-123), (-28), 68] } else { var3678 } , namedParam1453 : Int8(-97) + Int8(-73));
    ();
    let var3754 : Float64 = 114.0;
    var var3778 : ?Array<Float64> = Option<Array<Float64>>.None;
    let var3784 : ?Float64 = ((((), UInt64(Int16(31))) as Int32) as Float64);
    [Float64(match (var3093) {
        case _ => 
            Option<(Int8, Rune, Unit, Int16)>.None;
            -var1216
        
    }), (try { // block id: 3699
        ();
        Option<Float32>.None;
        var var3706 : ?Float64 = (Class376() as Float64);
        if (false) { Option<Float64>.None } else { var3706 } 
    } finally { // block id: 3709
        Option<Float64>.Some(var2580)
    } ?? try { // block id: 3713
        Option<Array<Float64>>.None;
        (-120.0)
    } catch (_) { // block id: 3716
        63.0 ** Float64(Int32(37.0) & 3)
    }), (([(-99), 30, 120, 10, 63, 28, (-73), 1, 71, (-43)] as Float64) ?? (Option<Float64>.None ?? (-116.0))), if (match ((var2083, [113.0, 11.0, 46.0, (-102.0), 84.0, (-11.0), 102.0, 29.0, (-41.0), (-99.0)], var1116)) {
        case _ => 
            var7;
            var1116;
            true
        
    }) { // block id: 3737
        var2833
    } else { // block id: 3739
        ();
        if (false) { (Int16(41)&127..=var1116&127:(var1211|1)) } else { (var1116&127..Int16(78)&127:(43|1)) } ;
        16.0 * var3754
    }, Float64(Float32(-53.0)) / Float64((Int32(match ([Int32(46), Int32(21), Int32(50), Int32(-13), Int32(126), Int32(121), Int32(87), Int32(-57), Int32(67), Int32(-23)]) {
        case _ => 
            var250 /= ((UInt16(124)) | 1);
            let var3767 : Float64 = (-28.0);
            var3767
        
    })) | 1), (-61.0), var2833, (-127.0), match {
        case var885 => 
        if (true) { var3778 } else { Option<Array<Float64>>.None } ;
        32.0
        case _ => 
        var3784;
        var7;
        var3754
    }, var2580]
}

public func func676(param677 : Bool) : Unit { // block id: 678
    var var3795 : (Array<Float64>) -> Array<Float64> = func1438;
    var loopTimeVar3816 : Int64 = 0;
    while ((Aggregate172.func683()) && loopTimeVar3816 < 100 ) {
        loopTimeVar3816++;
        var2668|>var3795;
        try { // block id: 3799
            ()
        } finally { // block id: 3801
            var var3804 : Int8 = Int8(UInt8(Int8(UInt8(75))));
            var3804 /= ((Int8(114)) | 1);
            (UInt8(217)&127..=UInt8(27)&127:(var1211|1));
            ()
        }
    }
}

public func func647(param648 : Float64) : Float64 { // block id: 649
    let var653 : Array<Float64> = Array<Float64>(10){ i => 60.0 };
    var653[7];
    false|>func676;
    var var3821 : ?Float64 = (((UInt64(UInt8(21)), UInt32(12), Option<Unit>.Some(()), (((Int32(91)&127..=Int32(-60)&127:79|1), Float32(79.0), UInt32(17), Int8(-59), true, ("\"=\\Xn+!\"Oz", [(), (), (), (), (), (), (), (), (), ()], (-61), (Int8(112), 100, 43.0, UInt64(209), (), Int32(59)), (UInt8(9)&127..=UInt8(152)&127:((-97)|1))), (Int32(-8)&127..Int32(60)&127:((-88)|1))) is Array<Int64>)) as (Range<Int32>, UInt32, (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>), Unit, Bool)) as Float64);
    (var3821 ?? match (var3093) {
        case caseVar3860 : Option<Float32> => 
            (-127.0)
        
        case "##Qk1.A!m*" => 
            ();
            if (false) { (UInt32(164)&127..=UInt32(151)&127:(-55)|1) } else { (UInt32(226)&127..=UInt32(21)&127:101|1) } ;
            (-47.0)
        
        case _ : Bool => 
            Int32(-5);
            var2833 % Float64((Int32(var2865)) | 1)
        
        case _ => 
            [var2833, var2865, 2.0, param648, (-100.0), var2580, 42.0, 108.0, (-99.0), var2865];
            var var3893 : ?((Range<Int32>, UInt32, (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>), Unit, Bool), Range<UInt64>, (Int8, Rune, Unit, Int16), (Int8, Int64, Float64, UInt64, Unit, Int32), (Range<Int32>, UInt32, (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>), Unit, Bool), Range<Int8>, Range<UInt16>) = Option<((Range<Int32>, UInt32, (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>), Unit, Bool), Range<UInt64>, (Int8, Rune, Unit, Int16), (Int8, Int64, Float64, UInt64, Unit, Int32), (Range<Int32>, UInt32, (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>), Unit, Bool), Range<Int8>, Range<UInt16>)>.Some((((Int32(77)&127..Int32(-11)&127:(-18)|1), UInt32(Int8(-110)), ("uMyJkE~g`?", [(), (), (), (), (), (), (), (), (), ()], (-4), (Int8(-24), (-125), 48.0, UInt64(63), (), Int32(-3)), (UInt8(252)&127..=UInt8(221)&127:(-45)|1)), (), (Option<Option<Bool>>.Some(Option<Bool>.None) is Array<Int64>)), (UInt64(93)&127..=UInt64(160)&127:(-88)|1), (Int8(9), 'x', (), Int16(UInt16(115))), (Int8(-28), 103, Float64(Float32(-89.0)), UInt64(Int16(120)), (), Int32(-8)), ((Int32(-75)&127..=Int32(-16)&127:((-37)|1)), UInt32(Int8(-40)), ("3K\\X,+$RG^", [(), (), (), (), (), (), (), (), (), ()], 93, (Int8(3), 105, (-117.0), UInt64(193), (), Int32(20)), (UInt8(149)&127..UInt8(207)&127:(40|1))), (), true), (Int8(UInt8(147))&127..=Int8(Int8(-117))&127:(51|1)), (UInt16(108)&127..UInt16(205)&127:26|1)));
            var3893;
            70.0
        
    })
}


public func func380() : Class376 { // block id: 381
    var loopTimeVar427 : Int64 = 0;
    while ((try { // block id: 384
        false
    } catch (_) { // block id: 386
        var388;
        var21
    } finally { // block id: 400
        -UInt8(172);
        ();
        var21
    }) && loopTimeVar427 < 100 ) {
        loopTimeVar427++;
        var loopTimeVar411 : Range<UInt64> = (UInt64(Int8(-98))&127..=UInt64(113)&127:(Int64(UInt32(Int32(-85)))|1));
        for (i in loopTimeVar411 where var21) {
            ();
            Float32(-41.0)
        };
        var loopTimeVar425 : Int64 = 0;
        do {
            loopTimeVar425++;
            var7;
            var388
        } while ((var21) && loopTimeVar425 < 100 ) 
    };
    var var432 : ?Unit = (false as Unit);
    let var456 : Class376 = Class376();
    let var3994 : (Array<Unit>, (UInt64, UInt32, Option<Unit>, Bool), Array<Unit>, Float32, (Range<Int8>, Array<Float64>, Int16)) = ([(), (), (), (), (), (), (), (), (), ()], (UInt64(Int16(-59)), UInt32(Int16(Int16(-125))), Option<Unit>.None, false), [(), (), (), (), (), (), (), (), (), ()], Float32(Float32(55.0)), ((Int8(-52)&127..Int8(120)&127:(-73)|1), [(-1.0), 113.0, 43.0, 41.0, 35.0, (-79.0), 123.0, (-46.0), (-33.0), 75.0], Int16(-41)));
    let var4106 : Option<Option<Bool>> = ((((Int32(42)&127..=Int32(62)&127:(-71)|1), UInt32(244), (###"@5YGsztVwi"###, [(), (), (), (), (), (), (), (), (), ()], 55, (Int8(40), (-10), (-72.0), UInt64(50), (), Int32(51)), (UInt8(246)&127..UInt8(159)&127:(-48)|1)), (), (((Int32(-2)&127..Int32(12)&127:(-100)|1), Float32(25.0), UInt32(209), Int8(74), true, ("Kz5p22a{DD5", [(), (), (), (), (), (), (), (), (), ()], (-22), (Int8(109), 37, 91.0, UInt64(188), (), Int32(87)), (UInt8(211)&127..=UInt8(130)&127:(-59)|1)), (Int32(90)&127..Int32(76)&127:(-92)|1)) is Range<UInt64>)), (UInt64(24)&127..UInt64(216)&127:115|1), (Int8(-76), 'R', (), Int16(Int16(47))), (Int8(-23), Int64(UInt8(141)), 85.0, UInt64(43), (), Int32(Int32(-84))), ((Int32(-73)&127..=Int32(-76)&127:(54|1)), UInt32(124), ("&>k26w#T~`", [(), (), (), (), (), (), (), (), (), ()], (-26), (Int8(99), 53, (-28.0), UInt64(207), (), Int32(-77)), (UInt8(239)&127..=UInt8(7)&127:(-10)|1)), (), ([(-120.0), (-3.0), (-36.0), (-12.0), 104.0, (-42.0), (-113.0), 6.0, 94.0, (-54.0)] is (Range<Int8>, Array<Float64>, Int16))), (Int8(73)&127..Int8(1)&127:86|1), (UInt16(97)&127..UInt16(UInt16(115))&127:(Int64(UInt64(9))|1))) as Option<Bool>);
    let var4241 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    try { // block id: 429
        var432.getOrThrow();
        var438[4];
        match (Int32(39)) {
            case _ => 
                var7;
                if (true) { var456 } else { Class376() } 
            
        }
    } finally { // block id: 459
        [var7, (), (), (), (), var7, var7, var7, (), var7][1];
        let var4099 : UInt8 = UInt8(110);
        func func474(param475 : Float64, namedParam476 ! : Range<Int64>) : Class376 { // block id: 477
            ();
            func func481(namedParam482 ! : (Int8, Rune, Unit, Int16)) : Array<Unit> { // block id: 483
                try { // block id: 485
                    var var488 : Int16 = Int16(124);
                    var488++;
                    var7;
                    [(), (), (), (), (), (), (), (), (), ()]
                } finally { // block id: 492
                    ();
                    var var507 : UInt8 = UInt8(94);
                    try { // block id: 495
                        -param475;
                        [(), (), (), (), (), (), (), (), (), ()]
                    } catch (e: Exception) { // block id: 499
                        var var501 : Int8 = Int8(UInt8(UInt8(139)));
                        var501;
                        var507 /= ((var507) | 1);
                        [var7, (), (), var7, (), var7, (), var7, var7, var7]
                    } finally { // block id: 521
                        var7;
                        [(), (), (), (), (), (), (), (), (), ()]
                    }
                }
            }
;
            func481(namedParam482 : (Option<(Int8, Rune, Unit, Int16)>.None ?? var531))[5];
            func func544(optionalParam545 ! : Range<UInt16> = (UInt16(92)&127..UInt16(22)&127:28|1), namedParam547 ! : UInt32) : Class376 { // block id: 548
                var456
            }
;
            let var551 : Range<UInt16> = (UInt16(132)&127..=UInt16(157)&127:(-37)|1);
            try { // block id: 542
                func544(optionalParam545 : var551, namedParam547 : UInt32(161))
            } finally { // block id: 554
                var loopTimeVar559 : Range<UInt64> = (UInt64(154)&127..=UInt64(34)&127:(124|1));
                for (i in loopTimeVar559 where true) {
                    ()
                };
                let var643 : Int16 = Int16(-37);
                func func569(param570 : Float64, param571 : Option<Int32>, param572 : Aggregate172, namedParam573 ! : Range<Int16>) : Bool { // block id: 574
                    var loopTimeVar607 : Int64 = 0;
                    while (((try { // block id: 582
                        var585++;
                        if (false) { var592 } else { var592 } 
                    } finally { // block id: 596
                        (Int16(-127)&127..=Int16(-54)&127:(-35)|1);
                        if (var21) { var592 } else { var592 } 
                    } ?? UInt16(47) <= UInt16(29))) && loopTimeVar607 < 100 ) {
                        loopTimeVar607++;

                    };
                    var var613 : UInt32 = UInt32(UInt16(Int16(43)));
                    let var3975 : (Float64) -> Float64 = func647;
                    var loopTimeVar3980 : Int64 = 0;
                    while ((func544(optionalParam545 : var551, namedParam547 : var613).func618(var643)) && loopTimeVar3980 < 100 ) {
                        loopTimeVar3980++;
                        var2580|>var3975;
                        (56&127..=81&127:64|1)
                    };
                    var885
                }
;
                let var4045 : Range<UInt64> = (UInt64(58)&127..=UInt64(Int32(UInt32(Int32(95))))&127:(Int64(UInt16(153))|1));
                func func565() : Class376 { // block id: 566
                    if (func569(match {
                        case var21 => 
                        var2580 % Float64((Int32(var2580)) | 1)
                        case _ => 
                        """
4`?nS
(~T r
""";
                        ();
                        (-9.0)
                    }, (var3994 as Int32), if (false) { Aggregate172() } else { Aggregate172() } , namedParam573 : (Int16(-66)&127..Int16(-72)&127:(-3)|1))) { try { // block id: 4038
                        (var193&127..=var193&127:(var1211|1))
                    } catch (_) { // block id: 4043
                        var4045
                    } } else { (try { // block id: 4056
                        var4059 += Int8(-36);
                        var193
                    } catch (e: Exception) { // block id: 4063
                        var193
                    } finally { // block id: 4065
                        ();
                        var193
                    }&127..UInt64(103)&127:(match (Option<Int32>.Some(var585)) {
                        case caseVar4074 => 
                            [[(-101.0), 88.0, 108.0, 25.0, (-8.0), 107.0, 97.0, (-92.0), 36.0, 87.0], [10.0, 7.0, 86.0, 70.0, 113.0, (-24.0), (-79.0), 8.0, 47.0, (-26.0)], [71.0, 67.0, 82.0, (-123.0), (-18.0), 33.0, (-39.0), (-9.0), (-44.0), 31.0], [(-114.0), (-13.0), (-126.0), 62.0, (-115.0), 94.0, 96.0, 122.0, 97.0, 77.0], [114.0, 118.0, (-48.0), 83.0, (-73.0), (-13.0), (-96.0), 41.0, (-65.0), 64.0], [(-94.0), (-102.0), 64.0, (-29.0), 125.0, (-30.0), 75.0, (-106.0), (-128.0), (-112.0)], [96.0, 53.0, (-99.0), (-45.0), 117.0, 124.0, (-120.0), 115.0, (-25.0), 38.0], [(-50.0), 120.0, (-20.0), (-110.0), 84.0, (-118.0), 71.0, 84.0, 14.0, (-68.0)], [51.0, 71.0, (-122.0), 97.0, 58.0, 92.0, 113.0, (-11.0), (-109.0), (-12.0)], [(-100.0), 32.0, (-86.0), (-69.0), (-31.0), 33.0, (-41.0), 67.0, 32.0, (-30.0)]];
                            ();
                            var1211 << ((var1211) & 7)
                        
                        case caseVar4083 => 
                            3
                        
                        case _ => 
                            var4059 *= var850;
                            var1211
                        
                        case _ => 
                            if (false) { Option<UInt8>.Some(var4099) } else { Option<UInt8>.None } ;
                            5
                        
                    }|1)) } ;
                    try (resource = Class376()) { // block id: 4104
                        var4106;
                        var loopTimeVar4228 : Int64 = 0;
                        while ((var21) && loopTimeVar4228 < 100 ) {
                            loopTimeVar4228++;
                            (UInt16(148)&127..=var250&127:(var1211|1));
                            ()
                        }
                    } catch (e: Exception) { // block id: 4229
                        ();
                        (var4237 ?? var4241);
                        var7
                    };
                    match (try { // block id: 4246
                            var438
                        } finally { // block id: 4248
                            var1240 & UInt8(195);
                            if (false) { var438 } else { var438 } 
                        }) {
                        case _ => 
                            var193--;
                            var3604
                        
                        case (_,caseVar4264,_ : Array<Int32>,_ : Array<Array<Float64>>,caseVar4265 : Bool,caseVar4266 : (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>)) => 
                            ();
                            var7;
                            var3604
                        
                        case (caseVar4273 : (Int8, Rune, Unit, Int16),caseVar4274 : Array<Int32>,_,caseVar4275,caseVar4276 : UInt8,caseVar4277) => 
                            var456
                        
                        case _ => 
                            var456
                        
                    }
                }
;
                func565()
            }
        }
;
        func474(78.0, namedParam476 : ((-67)&127..var1211&127:((-13)|1)))
    }
}

func func267(namedParam268 ! : Bool) : Option<Unit> { // block id: 269
    ();
    var var280 : ?Unit = (false as Unit);
    let var335 : Aggregate172 = Aggregate172(UInt32(128), ((-35)&127..=(-87)&127:35|1), Int32(42), namedParam341 : (Int8(UInt8(170)), 'F', (), Int16(Int16(-92))));
    try { // block id: 272
        var loopTimeVar284 : Range<UInt64> = (UInt64(118)&127..=UInt64(UInt32(UInt8(UInt8(211))))&127:(Int64(UInt16(UInt8(Int8(-87))))|1));
        for (i in loopTimeVar284 where false) {
            (var193, UInt32(47), var280, false)
        };
        try { // block id: 305
            var307
        } finally { // block id: 309
            ();
            var312;
            var307
        }
    } catch (e: Exception) { // block id: 323
        Aggregate172();
        var loopTimeVar332 : Int64 = 0;
        while ((namedParam268) && loopTimeVar332 < 100 ) {
            loopTimeVar332++;
            UInt32(245) - UInt32(120)
        };
        (var335 as Unit)
    } finally { // block id: 4672
        if (var885) { var307 } else { Option<Unit>.None } 
    }
}

public func func155(param156 : Int64) : Unit { // block id: 157
    let var254 : UInt32 = UInt32(163);
    (func166(optionalParam167 : var254, namedParam169 : UInt32(96))[2] ?? (Int16(1)|>func14));
    var var4690 : Float32 = Float32(-91.0);
    (func267(namedParam268 : try { // block id: 4678
        var7;
        Aggregate172();
        var1211 <= var73
    } finally { // block id: 4684
        var1116 ^= Int16(-61);
        var4690 /= Float32((Int32(Float32(-64.0))) | 1);
        var193 == var84
    }) ?? if (!true) { // block id: 4699
        ();
        var1352;
        ()
    })
}

func func4704(param4705 : Int16) : Int64 { // block id: 4706
    var var4724 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    var var4799 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    if (try { // block id: 4709
        var1116 == param4705
    } finally { // block id: 4713
        var4579 && true
    }) { // block id: 4717

    } else if (var885) { // block id: 4719
        var2083;
        var var4734 : (Range<Int8>, Array<Float64>, Int16) = ((Int8(Int8(UInt8(92)))&127..Int8(86)&127:(Int64(UInt16(149))|1)), [(-104.0), 87.0, (-40.0), (-126.0), 105.0, 3.0, (-38.0), 22.0, 80.0, 65.0], Int16(5));
        let var4761 : ?UInt8 = (Int32(Int32(UInt32(UInt32(143)))) as UInt8);
        match ((var4724, (UInt64(50), UInt32(226), var802, var21), var4724, var1216, var4734)) {
            case caseVar4747 => 
                var4750;
                if (var21) { var4761 } else { Option<UInt8>.Some(var1240) } ;
                var4579 ||= var4505
            
            case (_ : Int64,(_ : Array<Range<Int8>>,caseVar4774,_,_ : (Unit, UInt64)),_,_ : Option<Int32>,(caseVar4775,caseVar4776 : Range<UInt32>,caseVar4777)) => 
                var4486
            
            case (_,(_ : Range<UInt8>,caseVar4782,_,caseVar4783),_ : Unit,_ : (Int64, Option<Array<UInt64>>),caseVar4784) => 
                var4486
            
            case (_ : Array<UInt64>,(caseVar4789,caseVar4790 : (Range<Int32>, UInt32, (String, Array<Unit>, Int64, (Int8, Int64, Float64, UInt64, Unit, Int32), Range<UInt8>), Unit, Bool),caseVar4791,caseVar4792 : Range<Int16>),caseVar4793,caseVar4794,(caseVar4795 : UInt8,_,_)) => 
                (var4799, var890, [(), (), var4486, (), (), (), (), var7, var7, var4486], Float32(65.0), ((var850&127..Int8(-98)&127:((-112)|1)), [var2580, (-37.0), var2865, (-124.0), var2580, var2833, (-92.0), 38.0, 124.0, 70.0], var1116));
                ()
            
            case _ => 
                ();
                var1116 += var1116
            
        }
    };
    var1211
}



public func func10(param11 : UInt8) : Unit { // block id: 12
    let var4840 : (Int16) -> Int64 = func4704;
    let var4846 : Int16 = Int16(UInt16(UInt16(UInt8(UInt8(179)))));
    Int16((Int16(21) << ((var4846) & 7)))|>(var4840~>func155);
    if ((if (false) { // block id: 4856
        ();
        (-2.0)
    } else { // block id: 4859
        var4862 ^= UInt32(134);
        -54.0
    } is (UInt8) -> Bool)) { // block id: 4867
        try (resource = Class376()) { // block id: 4869
            var4059 >>= ((var4059) & 7)
        } catch (e: Exception) { // block id: 4873
            (var4059, '4', (), Int16(38));
            ();
            var4486
        } finally { // block id: 4881
            if (var885) { Option<Range<UInt8>>.Some(var4886) } else { var4889 } ;
            ();
            ()
        };
        var var4902 : (Int8, Int64, Float64, UInt64, Unit, Int32) = (Int8(UInt8(215)), Int64(UInt64(UInt16(21))), Float64(Float64((-36.0))), UInt64(UInt32(217)), (), Int32(-124));
        try { // block id: 4900
            var4902;
            [[35.0, 49.0, (-97.0), 7.0, 63.0, (-12.0), 37.0, (-92.0), (-124.0), (-68.0)], [(-119.0), (-52.0), (-79.0), 40.0, 93.0, 48.0, 18.0, (-118.0), 67.0, (-13.0)], [42.0, 61.0, (-95.0), 102.0, (-25.0), (-75.0), 56.0, 7.0, (-7.0), 69.0], [(-18.0), 85.0, 26.0, (-60.0), 91.0, 35.0, (-76.0), 89.0, (-106.0), (-96.0)], [12.0, (-76.0), 70.0, 44.0, (-84.0), (-18.0), 100.0, 117.0, 14.0, (-108.0)], [(-14.0), 118.0, 75.0, 65.0, (-46.0), 116.0, 20.0, (-114.0), 23.0, (-56.0)], [37.0, (-2.0), 72.0, (-28.0), 24.0, 88.0, 61.0, (-66.0), 7.0, (-67.0)], [103.0, 94.0, (-114.0), (-56.0), (-16.0), 73.0, 124.0, (-63.0), (-53.0), 10.0], [(-34.0), 54.0, (-108.0), 46.0, (-51.0), (-39.0), (-37.0), 122.0, (-35.0), 123.0], [54.0, (-81.0), 124.0, 126.0, 20.0, (-67.0), (-54.0), (-111.0), 118.0, 64.0]]
        } finally { // block id: 4917
            var var4924 : Float64 = Float64(Float32(53.0));
            [[122.0, (-94.0), (-31.0), (-57.0), 86.0, (-88.0), 22.0, (-109.0), 23.0, 28.0], [24.0, 24.0, var4924, var2580, var2865, var4924, 114.0, (-68.0), 23.0, 24.0], var2668, [(-51.0), 3.0, (-122.0), 19.0, 96.0, (-6.0), 46.0, (-119.0), (-120.0), 54.0], [48.0, 79.0, (-32.0), 71.0, (-17.0), (-24.0), 101.0, 21.0, (-121.0), 22.0], var2668, [38.0, var2833, (-78.0), (-72.0), var4924, 119.0, 30.0, var4947, 96.0, var4951], var2668, var2668, var2668]
        };
        var4505 ||= false
    } else if ((try { // block id: 4966
        var7;
        ();
        var4970
    } catch (_) { // block id: 4976
        var4978;
        if (var885) { var4970 } else { Option<Bool>.None } 
    } ?? try { // block id: 4985
        [(), (), (), var3457, (), (), var4486, (), (), ()];
        (-75.0) != var2833
    } catch (_) { // block id: 5000
        true
    })) { // block id: 5002
        if (var21) { var5006 } else { var5006 } ;
        var var5016 : ?Unit = Option<Unit>.Some(());
        (var5016 ?? ())
    }
}


main(): Int64 {
    try {
        var7;
        var var5021 : (UInt8) -> Unit = func10;
        (Option<UInt8>.Some(var1240) ?? var3228)|>var5021;
        match ((Option<Option<Unit>>.None ?? Option<Unit>.None)) {
            case caseVar5037 : UInt8 => 
                (Int8(-97)&127..Int8(-12)&127:90|1);
                ();
                var1211
            
            case _ => 
                var3457;
                ();
                var73
            
            case _ => 
                let var5055 : Option<String> = Option<String>.Some("a{ZUu*o@%86");
                if (true) { Option<String>.Some(###"s`*a(CxDAD"###) } else { var5055 } ;
                var250 |= UInt16(58);
                var1211 >> ((var1211) & 7)
            
        }
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var60*var60), 64)
        crccheck.updateBuffer(UInt64(var73*var73), 64)
        crccheck.updateBuffer(UInt64(var84*var84), 64)
        crccheck.updateBuffer(UInt64(var4862*var4862), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Class376 {
    func func1446(param1447 : Array<Int64>, optionalParam1448 ! : (Unit, UInt64) = ((), UInt64(Int32(-25))), namedParam1453 ! : Int8) : UInt64 { // block id: 1454
        let var3616 : Range<Int32> = (Int32(104)&127..Int32(Int32(Int16(Int16(-113))))&127:((-36)|1));
        var var3644 : Unit = ();
        let var3661 : Range<UInt8> = (UInt8(254)&127..=UInt8(Int8(Int8(-89)))&127:(Int64(Int16(Int16(111)))|1));
        func1456(if ((Option<Bool>.None ?? true)) { // block id: 3612
            ();
            (var3616, var1216, var914, Int8(-88), var3390, var2450, (Int32(18)&127..=Int32(35)&127:(-82)|1))
        } else { // block id: 3630
            ((Int32(-99)&127..Int32(71)&127:(-71)|1), Float32(0.0), var914, Int8(-61), true, (###"I$;!;N^;KC"###, [(), var7, var3457, var3644, var7, var3457, var3457, (), (), ()], (-75), (Int8(-71), var1211, (-110.0), var193, var3457, var585), var3661), (var585&127..=Int32(-73)&127:((-16)|1)))
        })
    }
;
    func func618(param619 : Int16) : Bool { // block id: 620
        var var630 : ?UInt8 = Option<UInt8>.None;
        ((if (var21) { var630 } else { Option<UInt8>.None }  ?? (Option<UInt8>.None ?? var640)) is Int16)
    }

}

extend Aggregate172 {

}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_expected_character
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_unexpected_declaration_in_scope
// ASSERT: scan parse_expected_expr_or_decl_in


