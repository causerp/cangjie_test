/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output


let var20 : Int8 = Int8(Int8(UInt8(Int8(96))))
public var var38 : Unit = ()
let var56 : Bool = ((UInt8(86)&127..UInt8(191)&127:68|1) is Range<Int64>)
public var var94 : Range<Int32> = (Int32(-60)&127..=Int32(UInt32(UInt8(171)))&127:(100|1))
public var var152 : Int16 = Int16(102)
var var347 : Int32 = Int32(Int16(16))
public var var386 : Int8 = Int8(91)
var var527 : Array<UInt16> = Array<UInt16>(10){ i => UInt16(Int16(UInt16(Int16(-103)))) }
public var var615 : Range<Int64> = ((-66)&127..(-37)&127:15|1)
let var650 : Range<UInt64> = (UInt64(130)&127..=UInt64(Int16(Int8(UInt8(240))))&127:(52|1))
public var var677 : String = ###"yCi>o`&X!Y"###
public var var708 : Bool = false
let var750 : String = ###"YV${var677}1<by],#M${var677}"###
var var758 : (Int8, Range<Int8>, Range<Int32>, Enum111) = (Int8(-61), (Int8(-122)&127..=Int8(87)&127:41|1), (Int32(-93)&127..=Int32(-30)&127:(-61)|1), Enum111.defaultValue)
let var789 : Range<UInt32> = (UInt32(UInt32(0))&127..=UInt32(UInt16(Int16(Int8(-79))))&127:(Int64(Int32(23))|1))
public var var877 : Aggregate818 = Aggregate818()
let var920 : UInt32 = UInt32(24)
let var924 : Int64 = (-116)
public let var938 : Array<Range<UInt32>> = [(UInt32(43)&127..=UInt32(148)&127:(-72)|1), (UInt32(236)&127..UInt32(24)&127:122|1), (UInt32(82)&127..UInt32(249)&127:109|1), (UInt32(189)&127..UInt32(68)&127:(-103)|1), (UInt32(79)&127..UInt32(202)&127:60|1), (UInt32(132)&127..=UInt32(99)&127:(-87)|1), (UInt32(203)&127..UInt32(59)&127:54|1), (UInt32(244)&127..=UInt32(80)&127:85|1), (UInt32(213)&127..UInt32(226)&127:(-55)|1), (UInt32(143)&127..UInt32(225)&127:92|1)]
let var1038 : Float64 = (-12.0)
public var var1111 : (Unit, (Unit, UInt8, Range<Int64>, Unit, UInt8, Int32, Array<Unit>), (Range<Int16>, Rune, Range<Int8>, Bool, (Float32, Range<UInt16>, Int16, Int64, Unit, UInt32))) = ((), ((), UInt8(Int8(-17)), ((-91)&127..(-128)&127:((-62)|1)), (), UInt8(Int8(Int8(-6))), Int32(UInt32(UInt8(161))), [(), (), (), (), (), (), (), (), (), ()]), ((Int16(Int16(106))&127..=Int16(-99)&127:(Int64(UInt8(106))|1)), 'J', (Int8(75)&127..Int8(-99)&127:51|1), (((), UInt8(147), ((-96)&127..(-43)&127:((-7)|1)), (), UInt8(244), Int32(-23), [(), (), (), (), (), (), (), (), (), ()]) is UInt16), (Float32(59.0), (UInt16(47)&127..UInt16(202)&127:7|1), Int16(-78), 115, (), UInt32(Int8(27)))))
let var1174 : Enum111 = Enum111.defaultValue
var var1194 : Int64 = 103
var var1248 : Range<UInt8> = (UInt8(141)&127..=UInt8(195)&127:20|1)
var var1599 : ?Int64 = Option<Int64>.None
public let var1603 : Interface320 = Class315()
public var var1677 : UInt16 = UInt16(188)
public var var1778 : UInt8 = UInt8(UInt8(185))
var var1813 : UInt64 = UInt64(59)
var var1827 : Class315 = Class315()
public let var1949 : Option<Array<Int16>> = Option<Array<Int16>>.None
var var1963 : Option<Interface318> = (((Int16(Int8(69)) as Array<Int16>) as Interface318) as Interface318)
public let var2112 : ?Int32 = Option<Int32>.None
public var var2179 : Array<Option<Unit>> = Array<Option<Unit>>(10){ i => (Int32(-62) as Unit) }
public var var2221 : Int16 = Int16(Int8(Int8(96)))
var var2269 : Int16 = Int16(63)
public let var2280 : Int16 = Int16(UInt16(UInt16(246)))
public let var2394 : Range<Int8> = (Int8(-66)&127..=Int8(Int8(81))&127:((-85)|1))
public var var2430 : Unit = ()
let var2577 : Rune = 'M'
let var2636 : Bool = true
public let var2854 : Interface318 = Class315()
var var2892 : Bool = ((Int8(UInt8(124)), (Int8(-33)&127..=Int8(Int8(-120))&127:(Int64(Int8(78))|1)), (Int32(36)&127..=Int32(100)&127:56|1), Enum111.defaultValue) is Int16)
public let var2937 : (Float32, Range<UInt16>, Int16, Int64, Unit, UInt32) = (Float32(-84.0), (UInt16(198)&127..=UInt16(150)&127:1|1), Int16(7), Int64(Int32(-122)), (), UInt32(170))
var var3068 : Option<String> = ([(-47), 36, 16, (-57), 32, 13, 112, 89, (-18), 17] as String)
var var3161 : Int16 = Int16(UInt16(Int16(Int16(-117))))
var var3169 : Int16 = Int16(UInt8(Int8(113)))
public let var3292 : Int8 = Int8(-45)
public var var3346 : UInt8 = UInt8(230)
public var var3366 : Range<Int16> = (Int16(41)&127..Int16(27)&127:(-19)|1)
public var var3374 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
public let var3431 : Array<Array<Int16>> = Array<Array<Int16>>(10){ i => [Int16(14), Int16(-109), Int16(8), Int16(15), Int16(125), Int16(82), Int16(112), Int16(-20), Int16(-77), Int16(-88)] }
let var3617 : ?Array<Unit> = Option<Array<Unit>>.None
var var3684 : Int64 = 32
public var var3693 : ?UInt16 = Option<UInt16>.None
var var3739 : ?(Range<Int8>, Array<Bool>, Array<Bool>, Int64, Rune, Range<Int32>, Int32) = Option<(Range<Int8>, Array<Bool>, Array<Bool>, Int64, Rune, Range<Int32>, Int32)>.None
public let var3879 : Bool = false
var var3901 : Array<Bool> = [(Class315() is (String, Enum111)), false, (((Int8(-114)&127..Int8(-24)&127:(-21)|1), [true, false, true, true, false, true, true, false, false, false], [true, false, false, false, false, true, false, true, true, false], 93, 'P', (Int32(53)&127..=Int32(-63)&127:(120|1)), Int32(-32)) is () -> Int64), (((Int8(9)&127..=Int8(-21)&127:5|1), Int8(-19), Int8(UInt8(199)), UInt8(4), [(), (), (), (), (), (), (), (), (), ()], """
cW'RW
RXn${var677}%R
""") is Option<UInt16>), false, ("LN${var750}T${var677}6${var750}?${var677}&'${var750}+rP" is Option<(Unit, (Unit, UInt8, Range<Int64>, Unit, UInt8, Int32, Array<Unit>), (Range<Int16>, Rune, Range<Int8>, Bool, (Float32, Range<UInt16>, Int16, Int64, Unit, UInt32)))>), false, ([Int64(UInt64(18)), (-23), Int64(Int16(46)), (-91), (-118), (-98), Int64(Int32(13)), (-57), (-83), 20] is Array<Option<Unit>>), false, ((UInt8(122)&127..=UInt8(188)&127:(-114)|1) is (Interface318, String, UInt32) -> Unit)]
public let var3997 : Int64 = Int64(Int8(Int8(-115)))
var var4166 : Float32 = Float32(47.0)
public var var4462 : UInt32 = UInt32(28)
var var4494 : Int64 = Int64(Int8(UInt8(163)))
let var4519 : ?Bool = Option<Bool>.None
public let var4558 : ?(Int8, Range<Int8>, Range<Int32>, Enum111) = Option<(Int8, Range<Int8>, Range<Int32>, Enum111)>.None
let var4563 : (Int8, Range<Int8>, Range<Int32>, Enum111) = (Int8(UInt8(254)), (Int8(-112)&127..Int8(-99)&127:118|1), (Int32(-76)&127..=Int32(60)&127:54|1), Enum111.defaultValue)
var var4600 : Float64 = (-84.0)
public var var4607 : (Range<Int8>, Array<Bool>, Array<Bool>, Int64, Rune, Range<Int32>, Int32) = ((Int8(-34)&127..=Int8(114)&127:(0|1)), [false, (Class315() is (Float32, Range<UInt16>, Int16, Int64, Unit, UInt32)), ((0&127..=0&127:(-21)|1) is Float32), true, true, (((), UInt8(204), ((-115)&127..=(-94)&127:126|1), (), UInt8(203), Int32(-105), [(), (), (), (), (), (), (), (), (), ()]) is (Float64) -> Option<Int64>), true, true, false, true], [((Option<Enum111>.None as Unit) is Int8), ((UInt8(75)&127..UInt8(149)&127:17|1) is Int16), true, ([(UInt32(135)&127..=UInt32(161)&127:103|1), (UInt32(40)&127..UInt32(200)&127:(-128)|1), (UInt32(114)&127..UInt32(16)&127:72|1), (UInt32(15)&127..UInt32(47)&127:3|1), (UInt32(2)&127..UInt32(186)&127:(-33)|1), (UInt32(30)&127..=UInt32(166)&127:38|1), (UInt32(161)&127..UInt32(95)&127:(-111)|1), (UInt32(118)&127..UInt32(135)&127:(-60)|1), (UInt32(4)&127..=UInt32(144)&127:(-25)|1), (UInt32(6)&127..UInt32(44)&127:111|1)] is Bool), ([false, false, true, false, true, false, true, false, true, true] is Option<Array<Int16>>), (((Int8(-20), (Int8(19)&127..Int8(46)&127:((-64)|1)), (Int32(-11)&127..Int32(-127)&127:48|1), Enum111.defaultValue), '7') is (Option<Int64>, String, Interface320) -> Int32), ("""
vBX${var677}PY
|62${var750}MW
""" is (Array<Range<UInt32>>) -> Option<UInt64>), (((), UInt8(239), ((-8)&127..=(-17)&127:(-41)|1), (), UInt8(6), Int32(-126), [(), (), (), (), (), (), (), (), (), ()]) is Option<UInt8>), ((Class315() as (Unit, (Unit, UInt8, Range<Int64>, Unit, UInt8, Int32, Array<Unit>), (Range<Int16>, Rune, Range<Int8>, Bool, (Float32, Range<UInt16>, Int16, Int64, Unit, UInt32)))) is Unit), false], Int64(UInt32(UInt32(33))), 'Z', (Int32(111)&127..Int32(42)&127:(-44)|1), Int32(-92))
var var4704 : String = "<za${var750}vD5t${var750}Q#="
public var var5242 : Option<Option<Int64>> = (Option<(Range<Int8>, Array<Bool>, Array<Bool>, Int64, Rune, Range<Int32>, Int32)>.None as Option<Int64>)
var var5251 : ?Int64 = Option<Int64>.None
public var var5282 : (Range<Int32>, UInt16, Int64) = ((Int32(113)&127..Int32(UInt32(UInt8(172)))&127:((-93)|1)), UInt16(218), (-8))
public enum Enum111 {
    defaultValue |
    enumValue3554(Interface320, Array<Array<Int16>>, () -> Int64)
}
public func func114(param115 : UInt8) : Enum111 { // block id: 116
    let var118 : Enum111 = Enum111.defaultValue;
    var118
}

public interface Interface321 {

}

public interface Interface320 <: Interface321 {

}

public interface Interface319 <: Interface320 & Interface321 {
    func func326(param327 : Int32, namedParam328 ! : (Range<Int32>, UInt16, Int64)) : Unit { // block id: 329
        let var332 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
        var332[0]
    }

}

public interface Interface318 <: Interface319 {

}

public open class Class315 <: Interface318 & Resource {
    public init() { // block id: 317

    }
;
    var var699 : Bool = false;
    public var var1624 : UInt16 = UInt16(241);
    public let var1830 : Int16 = Int16(-102);
    public init(param3278 : Range<Int8>) { // block id: 3279
        var var3354 : ?Bool = ([[Int16(-124), Int16(-81), Int16(16), Int16(-41), Int16(-93), Int16(-16), Int16(8), Int16(-25), Int16(76), Int16(-61)], [Int16(-56), Int16(-66), Int16(-21), Int16(21), Int16(-50), Int16(-97), Int16(-33), Int16(66), Int16(-47), Int16(-114)], [Int16(-1), Int16(123), Int16(44), Int16(0), Int16(-14), Int16(-11), Int16(-47), Int16(120), Int16(-95), Int16(37)], [Int16(-45), Int16(75), Int16(-57), Int16(-116), Int16(-52), Int16(-45), Int16(-47), Int16(28), Int16(-5), Int16(-42)], [Int16(18), Int16(-68), Int16(-90), Int16(-46), Int16(35), Int16(-54), Int16(114), Int16(48), Int16(-87), Int16(96)], [Int16(29), Int16(-27), Int16(43), Int16(71), Int16(113), Int16(-99), Int16(41), Int16(52), Int16(86), Int16(18)], [Int16(-75), Int16(-4), Int16(33), Int16(57), Int16(11), Int16(99), Int16(12), Int16(-63), Int16(41), Int16(92)], [Int16(7), Int16(115), Int16(59), Int16(-75), Int16(-13), Int16(-72), Int16(102), Int16(122), Int16(-24), Int16(-47)], [Int16(108), Int16(93), Int16(46), Int16(118), Int16(116), Int16(62), Int16(33), Int16(-61), Int16(-100), Int16(-70)], [Int16(15), Int16(-17), Int16(104), Int16(59), Int16(-22), Int16(-105), Int16(-71), Int16(52), Int16(14), Int16(-35)]] as Bool);
        ((Int8(78)&127..=Int8(-92)&127:(-67)|1), try { // block id: 3283
            ();
            var3068;
            Int8(123)
        } catch (_) { // block id: 3287
            var1194 <<= (((-18)) & 7);
            var3292
        } finally { // block id: 3294
            var708 &&= var2892;
            Int8(-59) + Int8(82)
        }, (Int8(70) / ((var20) | 1)) + match {
            case true => 
            var2892 &&= var2892;
            [var789, var789, (UInt32(34)&127..=UInt32(32)&127:114|1), (UInt32(187)&127..UInt32(87)&127:(-61)|1), (UInt32(119)&127..UInt32(25)&127:36|1), (UInt32(30)&127..UInt32(8)&127:(-47)|1), (var920&127..UInt32(97)&127:((-32)|1)), var789, (var920&127..var920&127:(22|1)), (UInt32(164)&127..=UInt32(194)&127:(var1194|1))];
            Int8(83)
            case _ => 
            var2430;
            var20 - var20
        }, if ((Option<Int16>.None is (Array<Range<UInt32>>) -> Option<UInt64>)) { // block id: 3340
            var2430;
            var94;
            var1778 * var3346
        } else if ((var3354 ?? true)) { // block id: 3358
            var2430;
            var38;
            var1778
        } else { // block id: 3362
            if (var56) { var3366 } else { (Int16(-30)&127..=Int16(-15)&127:((-18)|1)) } ;
            UInt8(43)
        }, var3374, if (([(UInt32(93)&127..=UInt32(126)&127:13|1), (UInt32(154)&127..=UInt32(62)&127:(-95)|1), var789, (UInt32(59)&127..=UInt32(148)&127:10|1), (UInt32(50)&127..=UInt32(68)&127:(-69)|1), (UInt32(153)&127..UInt32(110)&127:74|1), var789, (UInt32(142)&127..UInt32(146)&127:(var1194|1)), (UInt32(16)&127..=UInt32(180)&127:(-113)|1), var789] is (Range<Int32>) -> Option<Option<Unit>>)) { if (var708) { // block id: 3394
            var3346;
            var750
        } else { // block id: 3397
            var1194 = var924;
            if (true) { ###"*rFG`/d&>m"### } else { var750 } 
        } } else { ###"twU6W_}#<V"### } )
    }

    public func isClosed(): Bool { return true }
    public func close(): Unit {}
}



func func311(param312 : UInt64) : Unit { // block id: 313
    let var323 : Class315 = Class315();
    let var391 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    let var433 : (Range<Int32>, UInt16, Int64) = ((Int32(-2)&127..Int32(24)&127:42|1), UInt16(UInt16(UInt8(Int8(-39)))), 64);
    func func352(optionalParam353 ! : Interface319 = Class315(), namedParam355 ! : Rune, optionalParam356 ! : (Unit, UInt8, Range<Int64>, Unit, UInt8, Int32, Array<Unit>) = ((), UInt8(19), (Int64(Int64((-67)))&127..(-113)&127:(88|1)), (), UInt8(68), Int32(-79), [(), (), (), (), (), (), (), (), (), ()])) : (Range<Int32>, UInt16, Int64) { // block id: 380
        var var395 : Unit = ();
        try { // block id: 383
            var386 **= (var386 & 3);
            Enum111.defaultValue;
            var391
        } finally { // block id: 393
            var395;
            var395;
            [(), (), (), (), (), (), (), (), (), ()]
        }[8];
        var var406 : ((Int8, Range<Int8>, Range<Int32>, Enum111), Rune) = ((Int8(UInt8(Int8(52))), (Int8(-30)&127..Int8(-102)&127:(-110)|1), (Int32(-104)&127..Int32(-11)&127:((-6)|1)), Enum111.defaultValue), 'b');
        let var448 : UInt16 = UInt16(UInt8(158));
        let var452 : Int64 = (-92);
        match (var406[0][3]) {
            case caseVar423 => 
                var var427 : UInt16 = UInt16(Int16(Int8(4)));
                var427 >>= ((UInt16(209)) & 7);
                var433
            
            case _ : Rune => 
                optionalParam353;
                (var94, var448, var452)
            
            case caseVar456 => 
                var395;
                let var472 : Int64 = Int64(Int16(UInt8(188)));
                if (var56) { ((Int32(-15)&127..Int32(-85)&127:(-47)|1), var448, 14) } else { ((var347&127..=Int32(56)&127:(var452|1)), UInt16(234), var472) } 
            
            case _ => 
                UInt8(68);
                var395;
                if (false) { ((Int32(14)&127..Int32(110)&127:108|1), var448, 116) } else { (var94, UInt16(12), (-57)) } 
            
        }
    }
;
    var var493 : (Unit, UInt8, Range<Int64>, Unit, UInt8, Int32, Array<Unit>) = ((), UInt8(Int8(44)), ((-118)&127..(-127)&127:(Int64(Int8(UInt8(9)))|1)), (), UInt8(114), Int32(10), [(), (), (), (), (), (), (), (), (), ()]);
    var323.func326(var347 - Int32(-95), namedParam328 : func352(optionalParam353 : Class315(), namedParam355 : '7', optionalParam356 : var493));
    var var514 : ?UInt16 = ((Int16(Int8(-67))&127..=Int16(UInt16(Int8(-18)))&127:(Int64(UInt8(146))|1)) as UInt16);
    (var514 ?? var527[1]);
    try (resource = Class315()) { // block id: 556
        try (resource = Class315()) { // block id: 558
            ();
            var38;
            var38
        } catch (_) { // block id: 562
            param312;
            (Int8(-113)&127..Int8(110)&127:22|1);
            var152--
        };
        var var574 : Unit = ();
        (Option<Unit>.Some(var574) ?? ())
    } finally { // block id: 577
        var loopTimeVar582 : Int64 = 0;
        do {
            loopTimeVar582++;

        } while ((true) && loopTimeVar582 < 100 ) ;
        var loopTimeVar586 : Range<UInt64> = (UInt64(232)&127..=UInt64(Int16(-54))&127:(20|1));
        for (i in loopTimeVar586 where true) {

        }
    }
}


public struct Aggregate818 {
    public init() { // block id: 820

    }
;
    public static let var823 : Int64 = 84;
    static let var840 : Unit = ();
    public init(namedParam3781 ! : Array<Range<UInt32>>, optionalParam3782 ! : (Range<Int8>, Int8, Int8, UInt8, Array<Unit>, String) = ((Int8(-1)&127..Int8(-54)&127:7|1), Int8(UInt8(92)), Int8(UInt8(UInt8(8))), UInt8(8), [(), (), (), (), (), (), (), (), (), ()], "0;wNEbHtg(")) { // block id: 3803
        var loopTimeVar3839 : Int64 = 0;
        do {
            loopTimeVar3839++;
            try { // block id: 3824
                let var3826 : Unit = ();
                var3826;
                ()
            } finally { // block id: 3829
                ();
                if (false) { Option<Array<Int16>>.None } else { var1949 } ;
                var2892 ||= true
            }
        } while (((try { // block id: 3807
            var38;
            16.0 - (-82.0)
        } catch (_) { // block id: 3812
            var1677 -= var1677;
            var1038
        } finally { // block id: 3817
            var708 &&= var56;
            (-100.0)
        } is Interface320)) && loopTimeVar3839 < 100 ) 
    }

}

public func func105() : Int64 { // block id: 685
    var var723 : UInt32 = UInt32(23);
    var var735 : Float32 = Float32(Float32(110.0));
    var var768 : (Range<Int32>, UInt16, Int64) = ((Int32(-46)&127..=Int32(5)&127:(-122)|1), UInt16(Int16(-66)), 42);
    var var779 : Int64 = 94;
    if ((Class315.func690(Option<Unit>.Some(()), namedParam692 : (UInt8(131)&127..UInt8(34)&127:(-61)|1)))) { try { // block id: 705
        var708 ||= false;
        if (false) { """
$+[(M
+k\"mV
""" } else { """
~\"Bf3
+9(s4
""" } 
    } finally { // block id: 715
        if (var708) { var677 } else { var677 } 
    } } else { match ((var723 as UInt16)) {
        case caseVar727 : Range<UInt64> => 
            if (false) { [UInt16(159), UInt16(110), UInt16(181), UInt16(94), UInt16(21), UInt16(49), UInt16(203), UInt16(141), UInt16(76), UInt16(225)] } else { var527 } ;
            var735 /= Float32((Int32(Float32(-64.0))) | 1);
            if (true) { var677 } else { """
7l_hO
U|A[7
""" } 
        
        case _ : Enum111 => 
            if (var56) { "?(S},zXjDl" } else { var750 } 
        
        case _ => 
            if (var56) { var758 } else { var758 } ;
            if (var708) { var768 } else { ((var347&127..var347&127:(var779|1)), UInt16(240), (-125)) } ;
            "Z<ia{:[G9J\\"
        
        case caseVar786 => 
            var789;
            var38;
            if (var708) { var750 } else { var750 } 
        
        case _ => 
            ();
            var750
        
    } } ;
    let var814 : ?Int64 = (Enum111.defaultValue as Int64);
    (var814 ?? Aggregate818.var823)
}

func func105(param106 : Float64) : Int64 { // block id: 107
    let var136 : Float32 = Float32(118.0);
    var var141 : UInt16 = UInt16(Int8(97));
    let var247 : Int64 = Int64(Int16(5));
    match ((UInt8(30)|>func114)) {
        case _ : Float32 => 
            var var129 : Range<UInt32> = (UInt32(138)&127..UInt32(205)&127:(-71)|1);
            if (true) { (UInt32(144)&127..UInt32(159)&127:83|1) } else { var129 } ;
            var38;
            let var145 : Int64 = Int64(Int16(Int16(UInt8(UInt8(168)))));
            let var157 : UInt32 = UInt32(194);
            let var162 : Range<UInt16> = (UInt16(125)&127..UInt16(144)&127:(-71)|1);
            if (var56) { (var136, (UInt16(180)&127..=var141&127:(var145|1)), var152, (-128), (), var157) } else { (var136, var162, var152, (-128), (), UInt32(42)) } 
        
        case defaultValue => 
            ();
            let var177 : Range<UInt16> = (UInt16(UInt8(223))&127..UInt16(212)&127:(Int64(Int64(Int16(Int8(-118))))|1));
            if (true) { (var136, var177, Int16(-19), (-19), (), UInt32(236)) } else { (Float32(13.0), (UInt16(227)&127..UInt16(166)&127:(-35)|1), Int16(4), 76, (), UInt32(63)) } 
        
        case defaultValue => 
            ();
            Int8(-27);
            let var203 : (Float32, Range<UInt16>, Int16, Int64, Unit, UInt32) = (Float32(Float32(116.0)), (UInt16(Int8(109))&127..=UInt16(Int16(UInt16(159)))&127:((-67)|1)), Int16(UInt8(Int8(-119))), 88, (), UInt32(149));
            var203
        
        case _ => 
            var var225 : (Float32, Range<UInt16>, Int16, Int64, Unit, UInt32) = (Float32(-94.0), (UInt16(Int8(Int8(-10)))&127..=UInt16(43)&127:((-98)|1)), Int16(-24), Int64(Int8(UInt8(191))), (), UInt32(UInt32(220)));
            if (true) { var225 } else { (var136, (UInt16(253)&127..var141&127:(var247|1)), Int16(-18), 38, (), UInt32(11)) } ;
            let var255 : (Float32, Range<UInt16>, Int16, Int64, Unit, UInt32) = (Float32(-97.0), (UInt16(200)&127..UInt16(136)&127:(-61)|1), Int16(32), Int64(Int64(UInt32(206))), (), UInt32(UInt8(Int8(98))));
            var255
        
    }[2];
    var var273 : (Unit, UInt8, Range<Int64>, Unit, UInt8, Int32, Array<Unit>) = ((), UInt8(Int8(UInt8(Int8(-78)))), (72&127..=124&127:(-44)|1), (), UInt8(56), Int32(Int32(Int8(-81))), [(), (), (), (), (), (), (), (), (), ()]);
    var var290 : UInt64 = UInt64(UInt64(227));
    var var297 : UInt8 = UInt8(171);
    let var306 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    let var599 : Unit = ();
    var var624 : (UInt64) -> Unit = func311;
    try (resource = Class315()) { // block id: 269
        var273[3];
        -var290;
        let var300 : Range<Int64> = ((-18)&127..(-103)&127:(-57)|1);
        (var38, var297, var300, (), var297, Int32(-28), var306)[3]
    } catch (_) { // block id: 309
        var290|>func311;
        [(), (), var599, (), (), (), var38, (), var38, ()][5]
    } finally { // block id: 609
        ((), var297, var615, var599, var297, Int32(-37), [(), (), (), (), (), (), (), (), (), ()])[3];
        UInt64(69)|>var624;
        match (var152) {
            case 91 => 
                ()
            
            case caseVar635 => 
                var141 &= var141;
                var599
            
            case caseVar643 => 
                (UInt8(172)&127..=var297&127:(var247|1));
                var650;
                var386++
            
            case -101 | -119 => 
                var var666 : ?Unit = Option<Unit>.Some(());
                if (false) { var666 } else { Option<Unit>.Some(var38) } ;
                var290 >>= ((UInt64(246)) & 7)
            
            case _ => 
                var677;
                var347 ^ var347;
                ()
            
        }
    };
    func105()
}


public func func880<T0, T1, T2>(param881 : (Float64) -> Int64, optionalParam884 ! : Bool = (Class315() is (Float32, Range<UInt16>, Int16, Int64, Unit, UInt32)), namedParam887 ! : Enum111) : Bool { // block id: 888
    let var895 : Float32 = Float32(Float32(-109.0));
    match (var895) {
        case _ : Float32 => 
            ([(UInt32(67)&127..UInt32(200)&127:(13|1)), (UInt32(81)&127..=UInt32(110)&127:64|1), (UInt32(79)&127..UInt32(55)&127:(58|1)), (UInt32(159)&127..=UInt32(53)&127:14|1), (UInt32(49)&127..UInt32(251)&127:(-121)|1), (UInt32(104)&127..=UInt32(104)&127:103|1), var789, var789, var789, (var920&127..var920&127:(var924|1))], [(), var38, var38, (), (), (), (), var38, var38, var38], var938, [(), (), (), (), (), (), (), (), (), ()], (var152&127..=Int16(-47)&127:((-71)|1)), var938)
        
        case 29.0 => 
            if (true) { Option<UInt16>.Some(UInt16(7)) } else { Option<UInt16>.None } ;
            let var955 : (Array<Range<UInt32>>, Array<Unit>, Array<Range<UInt32>>, Array<Unit>, Range<Int16>, Array<Range<UInt32>>) = ([(UInt32(4)&127..UInt32(182)&127:(-14)|1), (UInt32(90)&127..UInt32(38)&127:3|1), (UInt32(108)&127..=UInt32(8)&127:30|1), (UInt32(214)&127..UInt32(222)&127:(-125)|1), (UInt32(50)&127..=UInt32(91)&127:(-124)|1), (UInt32(229)&127..=UInt32(127)&127:(-82)|1), (UInt32(224)&127..UInt32(169)&127:(-55)|1), (UInt32(9)&127..UInt32(202)&127:(-39)|1), (UInt32(81)&127..=UInt32(59)&127:(-50)|1), (UInt32(183)&127..UInt32(48)&127:(-110)|1)], [(), (), (), (), (), (), (), (), (), ()], [(UInt32(121)&127..=UInt32(175)&127:(Int64(UInt16(186))|1)), (UInt32(UInt8(224))&127..=UInt32(UInt8(231))&127:(126|1)), (UInt32(106)&127..UInt32(30)&127:124|1), (UInt32(UInt16(29))&127..=UInt32(UInt32(80))&127:(Int64(5)|1)), (UInt32(223)&127..UInt32(238)&127:((-63)|1)), (UInt32(98)&127..=UInt32(144)&127:79|1), (UInt32(227)&127..UInt32(55)&127:7|1), (UInt32(164)&127..=UInt32(Int32(-45))&127:(19|1)), (UInt32(53)&127..=UInt32(137)&127:62|1), (UInt32(UInt16(200))&127..UInt32(227)&127:(83|1))], [(), (), (), (), (), (), (), (), (), ()], (Int16(54)&127..=Int16(-30)&127:86|1), [(UInt32(114)&127..UInt32(218)&127:67|1), (UInt32(Int32(-45))&127..UInt32(251)&127:(Int64(Int16(98))|1)), (UInt32(112)&127..UInt32(26)&127:95|1), (UInt32(229)&127..=UInt32(136)&127:(-105)|1), (UInt32(52)&127..=UInt32(143)&127:122|1), (UInt32(142)&127..=UInt32(182)&127:106|1), (UInt32(145)&127..=UInt32(Int8(38))&127:(98|1)), (UInt32(168)&127..UInt32(227)&127:(-105)|1), (UInt32(47)&127..UInt32(Int32(23))&127:(Int64(49)|1)), (UInt32(71)&127..UInt32(89)&127:(-23)|1)]);
            var955
        
        case _ => 
            Int16(24);
            var1038 % Float64((Int32(var1038)) | 1);
            var var1042 : (Array<Range<UInt32>>, Array<Unit>, Array<Range<UInt32>>, Array<Unit>, Range<Int16>, Array<Range<UInt32>>) = ([(UInt32(196)&127..UInt32(30)&127:69|1), (UInt32(3)&127..UInt32(126)&127:(-93)|1), (UInt32(240)&127..=UInt32(17)&127:(-74)|1), (UInt32(26)&127..=UInt32(182)&127:4|1), (UInt32(210)&127..=UInt32(90)&127:114|1), (UInt32(196)&127..=UInt32(144)&127:(-89)|1), (UInt32(100)&127..=UInt32(211)&127:44|1), (UInt32(128)&127..UInt32(77)&127:89|1), (UInt32(41)&127..=UInt32(33)&127:107|1), (UInt32(53)&127..=UInt32(167)&127:105|1)], [(), (), (), (), (), (), (), (), (), ()], [(UInt32(201)&127..UInt32(26)&127:(-45)|1), (UInt32(UInt8(122))&127..UInt32(UInt16(161))&127:(Int64((-104))|1)), (UInt32(4)&127..UInt32(40)&127:(Int64(UInt64(85))|1)), (UInt32(UInt8(100))&127..=UInt32(245)&127:(115|1)), (UInt32(226)&127..=UInt32(153)&127:(-94)|1), (UInt32(86)&127..=UInt32(189)&127:90|1), (UInt32(UInt16(186))&127..UInt32(UInt16(1))&127:((-96)|1)), (UInt32(50)&127..=UInt32(116)&127:105|1), (UInt32(103)&127..UInt32(240)&127:(70|1)), (UInt32(44)&127..UInt32(33)&127:102|1)], [(), (), (), (), (), (), (), (), (), ()], (Int16(Int8(UInt8(88)))&127..=Int16(-59)&127:(110|1)), [(UInt32(192)&127..=UInt32(153)&127:(-69)|1), (UInt32(198)&127..=UInt32(13)&127:16|1), (UInt32(27)&127..UInt32(45)&127:(-64)|1), (UInt32(64)&127..=UInt32(40)&127:(-98)|1), (UInt32(11)&127..=UInt32(208)&127:(-22)|1), (UInt32(23)&127..UInt32(30)&127:63|1), (UInt32(194)&127..=UInt32(110)&127:124|1), (UInt32(40)&127..=UInt32(115)&127:69|1), (UInt32(146)&127..=UInt32(0)&127:(-52)|1), (UInt32(85)&127..=UInt32(112)&127:61|1)]);
            var1042
        
    }[2][8];
    ();
    (Option<(Unit, (Unit, UInt8, Range<Int64>, Unit, UInt8, Int32, Array<Unit>), (Range<Int16>, Rune, Range<Int8>, Bool, (Float32, Range<UInt16>, Int16, Int64, Unit, UInt32)))>.None ?? var1111)[2][3]
}







func func2376(namedParam2377 ! : Range<UInt16>) : ((Int8, Range<Int8>, Range<Int32>, Enum111), Rune) { // block id: 2378
    ();
    (UInt8(100)&127..=UInt8(121)&127:85|1);
    let var2563 : (Float64) -> Int64 = { lambdaParameter2566 : Float64 => Int64((-94)) };
    (try { // block id: 2383
        var var2386 : Bool = false;
        let var2390 : Int8 = Int8(Int8(-54));
        if (var2386) { (var2390, var2394, var94, Enum111.defaultValue) } else { (var20, var2394, var94, Enum111.defaultValue) } 
    } finally { // block id: 2407
        if (true) { [var38, (), (), (), (), (), (), (), (), var38] } else { [var38, var38, var38, var38, (), var38, (), var2430, (), ()] } ;
        let var2435 : Array<Array<Int16>> = [[Int16(-93), Int16(-92), Int16(Int8(UInt8(238))), Int16(-118), Int16(-79), Int16(100), Int16(61), Int16(125), Int16(Int8(Int8(33))), Int16(-85)], [Int16(57), Int16(-93), Int16(63), Int16(-118), Int16(-102), Int16(20), Int16(40), Int16(-95), Int16(36), Int16(-40)], [Int16(35), Int16(99), Int16(-38), Int16(-123), Int16(UInt16(UInt16(77))), Int16(Int16(-114)), Int16(Int8(11)), Int16(-113), Int16(112), Int16(Int8(-29))], [Int16(-116), Int16(0), Int16(-114), Int16(32), Int16(-100), Int16(-119), Int16(-78), Int16(-30), Int16(60), Int16(-101)], [Int16(112), Int16(-96), Int16(-104), Int16(7), Int16(-102), Int16(23), Int16(-21), Int16(-55), Int16(-115), Int16(-32)], [Int16(62), Int16(-2), Int16(117), Int16(Int16(Int8(-26))), Int16(120), Int16(60), Int16(114), Int16(UInt8(UInt8(248))), Int16(UInt8(154)), Int16(-73)], [Int16(Int16(UInt16(236))), Int16(-119), Int16(Int16(Int16(0))), Int16(Int8(Int8(-10))), Int16(Int8(-29)), Int16(46), Int16(Int8(UInt8(213))), Int16(-56), Int16(UInt16(211)), Int16(13)], [Int16(-25), Int16(-27), Int16(85), Int16(-81), Int16(-69), Int16(11), Int16(-114), Int16(114), Int16(-81), Int16(32)], [Int16(UInt16(Int8(-114))), Int16(-58), Int16(-29), Int16(-124), Int16(49), Int16(Int8(89)), Int16(10), Int16(UInt16(Int16(58))), Int16(-33), Int16(44)], [Int16(105), Int16(Int16(Int8(68))), Int16(UInt8(128)), Int16(UInt16(UInt8(84))), Int16(24), Int16(Int8(Int8(-114))), Int16(-56), Int16(UInt8(Int8(-47))), Int16(-77), Int16(UInt16(UInt8(69)))]];
        var2435;
        var var2550 : Range<Int8> = (Int8(65)&127..Int8(Int8(Int8(-42)))&127:(Int64((-109))|1));
        (var386, var2550, var94, Enum111.defaultValue)
    }, if (func880<UInt64, Rune, Int8>(var2563, namedParam887 : var1174)) { // block id: 2571
        '9'
    } else { // block id: 2573
        ();
        var38;
        var2577
    })
}

public func func2602() : Rune { // block id: 2603
    ();
    var2577
}

func func2616(param2617 : (UInt64) -> Unit) : Bool { // block id: 2620
    false
}

public func func2623(param312 : UInt64) : Unit { // block id: 313
    let var323 : Class315 = Class315();
    let var391 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    let var433 : (Range<Int32>, UInt16, Int64) = ((Int32(-2)&127..Int32(24)&127:42|1), UInt16(UInt16(UInt8(Int8(-39)))), 64);
    func func352(optionalParam353 ! : Interface319 = Class315(), namedParam355 ! : Rune, optionalParam356 ! : (Unit, UInt8, Range<Int64>, Unit, UInt8, Int32, Array<Unit>) = ((), UInt8(19), (Int64(Int64((-67)))&127..(-113)&127:(88|1)), (), UInt8(68), Int32(-79), [(), (), (), (), (), (), (), (), (), ()])) : (Range<Int32>, UInt16, Int64) { // block id: 380
        var var395 : Unit = ();
        try { // block id: 383
            var386 **= (var386 & 3);
            Enum111.defaultValue;
            var391
        } finally { // block id: 393
            var395;
            var395;
            [(), (), (), (), (), (), (), (), (), ()]
        }[8];
        var var406 : ((Int8, Range<Int8>, Range<Int32>, Enum111), Rune) = ((Int8(UInt8(Int8(52))), (Int8(-30)&127..Int8(-102)&127:(-110)|1), (Int32(-104)&127..Int32(-11)&127:((-6)|1)), Enum111.defaultValue), 'b');
        let var448 : UInt16 = UInt16(UInt8(158));
        let var452 : Int64 = (-92);
        match (var406[0][3]) {
            case caseVar423 => 
                var var427 : UInt16 = UInt16(Int16(Int8(4)));
                var427 >>= ((UInt16(209)) & 7);
                var433
            
            case _ : Rune => 
                optionalParam353;
                (var94, var448, var452)
            
            case caseVar456 => 
                var395;
                let var472 : Int64 = Int64(Int16(UInt8(188)));
                if (var56) { ((Int32(-15)&127..Int32(-85)&127:(-47)|1), var448, 14) } else { ((var347&127..=Int32(56)&127:(var452|1)), UInt16(234), var472) } 
            
            case _ => 
                UInt8(68);
                var395;
                if (false) { ((Int32(14)&127..Int32(110)&127:108|1), var448, 116) } else { (var94, UInt16(12), (-57)) } 
            
        }
    }
;
    var var493 : (Unit, UInt8, Range<Int64>, Unit, UInt8, Int32, Array<Unit>) = ((), UInt8(Int8(44)), ((-118)&127..(-127)&127:(Int64(Int8(UInt8(9)))|1)), (), UInt8(114), Int32(10), [(), (), (), (), (), (), (), (), (), ()]);
    var323.func326(var347 - Int32(-95), namedParam328 : func352(optionalParam353 : Class315(), namedParam355 : '7', optionalParam356 : var493));
    var var514 : ?UInt16 = ((Int16(Int8(-67))&127..=Int16(UInt16(Int8(-18)))&127:(Int64(UInt8(146))|1)) as UInt16);
    (var514 ?? var527[1]);
    try (resource = Class315()) { // block id: 556
        try (resource = Class315()) { // block id: 558
            ();
            var38;
            var38
        } catch (_) { // block id: 562
            param312;
            (Int8(-113)&127..Int8(110)&127:22|1);
            var152--
        };
        var var574 : Unit = ();
        (Option<Unit>.Some(var574) ?? ())
    } finally { // block id: 577
        var loopTimeVar582 : Int64 = 0;
        do {
            loopTimeVar582++;

        } while ((true) && loopTimeVar582 < 100 ) ;
        var loopTimeVar586 : Range<UInt64> = (UInt64(232)&127..=UInt64(Int16(-54))&127:(20|1));
        for (i in loopTimeVar586 where true) {

        }
    }
}


public func func2834(param312 : UInt64) : Unit { // block id: 313
    let var323 : Class315 = Class315();
    let var391 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    let var433 : (Range<Int32>, UInt16, Int64) = ((Int32(-2)&127..Int32(24)&127:42|1), UInt16(UInt16(UInt8(Int8(-39)))), 64);
    func func352(optionalParam353 ! : Interface319 = Class315(), namedParam355 ! : Rune, optionalParam356 ! : (Unit, UInt8, Range<Int64>, Unit, UInt8, Int32, Array<Unit>) = ((), UInt8(19), (Int64(Int64((-67)))&127..(-113)&127:(88|1)), (), UInt8(68), Int32(-79), [(), (), (), (), (), (), (), (), (), ()])) : (Range<Int32>, UInt16, Int64) { // block id: 380
        var var395 : Unit = ();
        try { // block id: 383
            var386 **= (var386 & 3);
            Enum111.defaultValue;
            var391
        } finally { // block id: 393
            var395;
            var395;
            [(), (), (), (), (), (), (), (), (), ()]
        }[8];
        var var406 : ((Int8, Range<Int8>, Range<Int32>, Enum111), Rune) = ((Int8(UInt8(Int8(52))), (Int8(-30)&127..Int8(-102)&127:(-110)|1), (Int32(-104)&127..Int32(-11)&127:((-6)|1)), Enum111.defaultValue), 'b');
        let var448 : UInt16 = UInt16(UInt8(158));
        let var452 : Int64 = (-92);
        match (var406[0][3]) {
            case caseVar423 => 
                var var427 : UInt16 = UInt16(Int16(Int8(4)));
                var427 >>= ((UInt16(209)) & 7);
                var433
            
            case _ : Rune => 
                optionalParam353;
                (var94, var448, var452)
            
            case caseVar456 => 
                var395;
                let var472 : Int64 = Int64(Int16(UInt8(188)));
                if (var56) { ((Int32(-15)&127..Int32(-85)&127:(-47)|1), var448, 14) } else { ((var347&127..=Int32(56)&127:(var452|1)), UInt16(234), var472) } 
            
            case _ => 
                UInt8(68);
                var395;
                if (false) { ((Int32(14)&127..Int32(110)&127:108|1), var448, 116) } else { (var94, UInt16(12), (-57)) } 
            
        }
    }
;
    var var493 : (Unit, UInt8, Range<Int64>, Unit, UInt8, Int32, Array<Unit>) = ((), UInt8(Int8(44)), ((-118)&127..(-127)&127:(Int64(Int8(UInt8(9)))|1)), (), UInt8(114), Int32(10), [(), (), (), (), (), (), (), (), (), ()]);
    var323.func326(var347 - Int32(-95), namedParam328 : func352(optionalParam353 : Class315(), namedParam355 : '7', optionalParam356 : var493));
    var var514 : ?UInt16 = ((Int16(Int8(-67))&127..=Int16(UInt16(Int8(-18)))&127:(Int64(UInt8(146))|1)) as UInt16);
    (var514 ?? var527[1]);
    try (resource = Class315()) { // block id: 556
        try (resource = Class315()) { // block id: 558
            ();
            var38;
            var38
        } catch (_) { // block id: 562
            param312;
            (Int8(-113)&127..Int8(110)&127:22|1);
            var152--
        };
        var var574 : Unit = ();
        (Option<Unit>.Some(var574) ?? ())
    } finally { // block id: 577
        var loopTimeVar582 : Int64 = 0;
        do {
            loopTimeVar582++;

        } while ((true) && loopTimeVar582 < 100 ) ;
        var loopTimeVar586 : Range<UInt64> = (UInt64(232)&127..=UInt64(Int16(-54))&127:(20|1));
        for (i in loopTimeVar586 where true) {

        }
    }
}

func func2817(param2818 : Range<Int64>) : Range<Int64> { // block id: 2819
    func311(try { // block id: 2822
        ();
        var1813 ** (UInt64(242) & 3)
    } finally { // block id: 2827
        UInt64(121) / ((UInt64(124)) | 1)
    });
    var loopTimeVar2866 : Int64 = 0;
    while (((func2834|>func2616)) && loopTimeVar2866 < 100 ) {
        loopTimeVar2866++;
        match (((Int32(100)&127..Int32(-82)&127:122|1), UInt16(250), (-124))) {
            case (caseVar2845,_,caseVar2846) => 
                ();
                var2430;
                var2430
            
            case _ => 
                var2854;
                Option<Interface318>.Some(Class315());
                ()
            
        };
        var loopTimeVar2864 : Int64 = 0;
        do {
            loopTimeVar2864++;
            Float32(113.0)
        } while ((var708) && loopTimeVar2864 < 100 ) 
    };
    var615
}

public func func2756(param2757 : Array<Range<UInt32>>) : Option<UInt64> { // block id: 2758
    func func2761(param2762 : Range<Int64>, param2763 : Interface320, namedParam2764 ! : (Unit, (Unit, UInt8, Range<Int64>, Unit, UInt8, Int32, Array<Unit>), (Range<Int16>, Rune, Range<Int8>, Bool, (Float32, Range<UInt16>, Int16, Int64, Unit, UInt32))), optionalParam2765 ! : Array<Int64> = Array<Int64>(10){ i => (-7) }) : Range<UInt32> { // block id: 2781
        match (try { // block id: 2784
                ();
                [var2280, var2269, var2269, var2221, var2269, Int16(-122), Int16(-36), var2221, var152, Int16(-14)];
                Class315()
            } finally { // block id: 2798
                var2430;
                ();
                if (var56) { Class315() } else { Class315() } 
            }) {
            case _ => 
                var38;
                var789
            
            case _ => 
                (var920&127..=UInt32(15)&127:(var1194|1))
            
        }
    }
;
    let var2869 : (Range<Int64>) -> Range<Int64> = func2817;
    var var2916 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    let var2956 : Option<UInt64> = ((UInt8(UInt8(112))&127..=UInt8(47)&127:(Int64(Int16(3))|1)) as UInt64);
    match (func2761(((122&127..=20&127:((-57)|1))|>var2869), match (var1194) {
            case 65 | 74 | -106 | 67 => 
                if (true) { Class315() } else { Class315() } 
            
            case _ => 
                let var2887 : Interface320 = Class315();
                var2887
            
        }, namedParam2764 : if (var2892) { var1111 } else { ((), (var38, UInt8(169), var615, (), UInt8(76), Int32(64), var2916), ((Int16(23)&127..var2269&127:(var924|1)), var2577, (Int8(45)&127..=Int8(108)&127:(-22)|1), var56, var2937)) } )) {
        case _ : (Array<Range<UInt32>>, Array<Unit>, Array<Range<UInt32>>, Array<Unit>, Range<Int16>, Array<Range<UInt32>>) => 
            var708 ||= var56;
            if (var2892) { Option<UInt64>.None } else { var2956 } 
        
        case _ => 
            if (true) { Option<UInt64>.None } else { Option<UInt64>.Some(var1813) } 
        
    }
}

public func func2703(optionalParam2704 ! : Interface321 = Class315(), optionalParam2706 ! : Float64 = 8.0) : Option<UInt64> { // block id: 2708
    match (Option<Enum111>.None) {
        case caseVar2713 : ((Int8, Range<Int8>, Range<Int32>, Enum111), Rune) => 
            var38
        
        case None => 
            ()
        
        case Some(caseVar2722) => 
            var20;
            var var2726 : ?Array<UInt16> = Option<Array<UInt16>>.Some([UInt16(81), UInt16(211), UInt16(189), UInt16(Int16(Int8(14))), UInt16(223), UInt16(Int8(UInt8(15))), UInt16(250), UInt16(Int16(105)), UInt16(Int8(-99)), UInt16(Int16(Int16(54)))]);
            var2726;
            var38
        
        case _ => 
            var1813 *= var1813;
            var347++
        
    };
    let var2972 : (Array<Range<UInt32>>) -> Option<UInt64> = func2756;
    [(UInt32(237)&127..UInt32(207)&127:(-6)|1), (UInt32(123)&127..UInt32(36)&127:(-61)|1), (UInt32(124)&127..UInt32(37)&127:(-89)|1), (UInt32(89)&127..UInt32(54)&127:(-81)|1), (UInt32(39)&127..UInt32(154)&127:83|1), (UInt32(160)&127..UInt32(224)&127:(-91)|1), (UInt32(18)&127..=UInt32(125)&127:(-125)|1), (UInt32(133)&127..UInt32(138)&127:(-95)|1), (UInt32(118)&127..UInt32(44)&127:11|1), (UInt32(161)&127..=UInt32(10)&127:61|1)]|>var2972
}

public func func2596(param2597 : Interface318, param2598 : String, namedParam2599 ! : UInt32) : Unit { // block id: 2600
    func2602();
    let var2609 : (Float64) -> Int64 = { lambdaParameter2612 : Float64 => (-112) };
    var loopTimeVar2657 : Range<UInt64> = (UInt64(Int32(74))&127..UInt64(2)&127:(83|1));
    for (i in loopTimeVar2657 where func880<UInt64, Rune, Int8>(var2609, optionalParam884 : (func2623|>func2616), namedParam887 : (Option<Enum111>.None ?? var1174))) {
        var var2641 : (Range<Int32>, UInt16, Int64) = ((Int32(6)&127..Int32(-101)&127:84|1), UInt16(11), (-70));
        var loopTimeVar2646 : Range<UInt64> = (UInt64(11)&127..=UInt64(UInt16(UInt16(UInt8(252))))&127:(Int64(Int8(73))|1));
        for (i in loopTimeVar2646 where var2636) {
            var877;
            var2641
        };
        break
    };
    let var2687 : (Float32, Range<UInt16>, Int16, Int64, Unit, UInt32) = (Float32(-62.0), (UInt16(152)&127..UInt16(37)&127:40|1), Int16(-90), (-121), (), UInt32(UInt8(UInt8(132))));
    var var2976 : Interface321 = Class315();
    var var2997 : Unit = ();
    match (if (try { // block id: 2666
            true
        } catch (e: Exception) { // block id: 2668
            let var2674 : ?Unit = Option<Unit>.Some(());
            [Option<Unit>.None, Option<Unit>.Some(()), var2674, Option<Unit>.Some(var2430), var2674, Option<Unit>.None, Option<Unit>.Some(var38), var2674, var2674, var2674];
            var2687;
            false
        } finally { // block id: 2698
            var1778 != var1778
        }) { func2703(optionalParam2704 : var2976, optionalParam2706 : 125.0) } else { Option<UInt64>.Some(var1813) } ) {
        case _ : Enum111 => 
            var2430
        
        case caseVar2987 : (Range<Int8>, Int8, Int8, UInt8, Array<Unit>, String) => 
            var386 -= var386
        
        case caseVar2994 : Range<UInt16> => 
            var2997
        
        case caseVar3001 : Array<Int16> => 
            var2892 ||= false;
            ()
        
        case _ => 
            var2430
        
    }
}




public func func2581(namedParam2582 ! : () -> Int64, optionalParam2584 ! : Option<UInt16> = ((Int64(UInt8(UInt8(79)))&127..=Int64((-70))&127:(117|1)) as UInt16)) : Int16 { // block id: 2593
    var38;
    var var3044 : UInt32 = UInt32(53);
    var var3091 : Array<Int16> = Array<Int16>(10){ i => Int16(UInt8(UInt8(UInt8(50)))) };
    let var3147 : Int16 = Int16(UInt8(Int8(Int8(-21))));
    let var3187 : Option<UInt64> = Option<UInt64>.None;
    func2596((Option<Interface318>.None ?? match ((var2430, UInt8(232), (82&127..52&127:73|1), (), var1778, var347, [var2430, (), (), var38, (), (), var2430, (), (), ()])) {
        case (_,caseVar3033 : String,_ : Range<UInt8>,_ : Array<Option<Unit>>,caseVar3034,_ : Range<UInt32>,_) => 
            ();
            var2854
        
        case _ : Int32 => 
            ();
            var3044 |= UInt32(159);
            var var3049 : Bool = true;
            if (var3049) { var2854 } else { var2854 } 
        
        case _ => 
            var1677;
            Class315();
            Class315()
        
    }), (if (var2892) { Option<String>.Some("""
,Zo}J
twp`e
""") } else { var3068 }  ?? if (var2892) { // block id: 3073
        ###"pc<qnoE^<L"###
    } else { // block id: 3075
        if (var56) { "*[*(`I6v;/" } else { ###"UBZGBmrCvA"### } 
    }), namedParam2599 : match (var1677) {
        case 122 => 
            UInt32(171)
        
        case 231 => 
            [var3091, [Int16(3), Int16(-21), Int16(12), Int16(-90), Int16(49), Int16(-67), Int16(-23), Int16(22), Int16(-57), Int16(-19)], [Int16(-70), Int16(112), Int16(12), Int16(-115), Int16(30), Int16(-76), Int16(-64), Int16(37), Int16(108), Int16(75)], var3091, [Int16(-24), Int16(24), var2280, var2269, Int16(70), var2221, Int16(65), Int16(-85), var152, var152], var3091, [Int16(-56), Int16(102), var2269, var152, Int16(49), Int16(96), Int16(-1), var152, Int16(-79), var2221], [Int16(100), Int16(-111), Int16(60), Int16(-64), Int16(103), Int16(94), Int16(-81), Int16(-79), Int16(68), Int16(119)], [var2221, Int16(106), var2269, var3147, Int16(-34), Int16(-122), var2269, Int16(-67), Int16(-110), var2221], [Int16(123), var3161, Int16(-96), Int16(-60), var3169, Int16(80), var3147, var2269, var3147, var3169]];
            var var3180 : Float64 = 124.0;
            var3180 += 113.0;
            UInt32(93)
        
        case _ => 
            var3187;
            UInt32(214)
        
    });
    let var3196 : Option<Int16> = (UInt8(201) as Int16);
    (var3196 ?? ((Option<Option<Int16>>.Some(var3196) ?? var3196) ?? var2221))
}

public func func1996(param1997 : () -> Int64) : Int16 { // block id: 1999
    let var2008 : Array<Array<Int16>> = Array<Array<Int16>>(10){ i => [Int16(-15), Int16(71), Int16(-44), Int16(43), Int16(46), Int16(-122), Int16(72), Int16(-104), Int16(-40), Int16(70)] };
    func func2130(namedParam2131 ! : Interface320, optionalParam2132 ! : ((Float64) -> Int64, Bool, Enum111) -> Bool = func880<UInt64, Rune, Int8>) : Int32 { // block id: 2138
        var loopTimeVar2142 : Range<UInt64> = (UInt64(UInt8(81))&127..=UInt64(Int16(UInt8(74)))&127:(Int64((-73))|1));
        for (i in loopTimeVar2142 where true) {

        };
        Int32(44)
    }
;
    ((match (var2008) {
        case _ => 
            Option<Option<Unit>>.Some(Option<Unit>.None);
            var38;
            var2112
        
        case _ => 
            ();
            if (var708) { (UInt64(18)&127..var1813&127:((-58)|1)) } else { var650 } ;
            var2112
        
        case _ => 
            var2112
        
    } ?? func2130(namedParam2131 : var1603)) as Array<Int16>);
    let var2161 : ?Array<UInt16> = Option<Array<UInt16>>.None;
    var var2228 : UInt32 = UInt32(Int8(32));
    match {
        case match ((var2161 ?? [UInt16(165), UInt16(170), UInt16(144), UInt16(67), UInt16(226), UInt16(205), UInt16(80), UInt16(186), UInt16(114), UInt16(236)])) {
        case caseVar2166 : Int8 => 
            false
        
        case _ : UInt32 => 
            var38;
            var1038 <= var1038
        
        case _ => 
            var2179;
            var708
        
    } => 
        if (var56) { // block id: 2218
            var2221 += Int16(16);
            var2228 *= UInt32(88);
            var38
        } else if (true) { // block id: 2234
            var38;
            ();
            ()
        };
        let var2252 : Array<Int16> = [Int16(-89), Int16(35), Int16(-55), Int16(-120), Int16(85), Int16(-94), Int16(103), Int16(90), Int16(44), Int16(-62)];
        [[Int16(-102), Int16(-126), Int16(-51), Int16(38), Int16(-21), Int16(10), Int16(-1), Int16(60), Int16(-125), Int16(-110)], [Int16(89), var152, Int16(11), var152, var152, Int16(88), var2221, Int16(102), Int16(115), Int16(47)], var2252, [Int16(-124), Int16(-128), Int16(85), Int16(-68), Int16(-56), Int16(85), Int16(93), Int16(101), Int16(46), Int16(-82)], var2252, [var2221, Int16(126), Int16(-95), Int16(100), var152, var2221, Int16(-108), Int16(-16), var2221, Int16(115)], [var2269, var2221, Int16(97), Int16(73), Int16(-122), Int16(-121), var2269, var2269, Int16(43), var2280], [Int16(-53), Int16(-51), Int16(-121), Int16(49), Int16(97), Int16(-44), Int16(-87), Int16(88), Int16(55), Int16(-66)], [Int16(90), Int16(16), Int16(105), Int16(52), Int16(-78), Int16(-119), Int16(26), Int16(-115), Int16(-118), Int16(-71)], [Int16(46), Int16(-108), Int16(119), Int16(-112), Int16(13), Int16(-111), Int16(48), Int16(-113), Int16(-79), Int16(-5)]];
        func func2288(optionalParam2289 ! : Interface318 = Class315(), namedParam2291 ! : UInt8, namedParam2292 ! : (Int8, Range<Int8>, Range<Int32>, Enum111)) : Int16 { // block id: 2293
            try (resource = Class315()) { // block id: 2295
                var var2298 : ?Unit = (([(UInt32(151)&127..UInt32(169)&127:(-84)|1), (UInt32(4)&127..=UInt32(230)&127:24|1), (UInt32(39)&127..UInt32(89)&127:((-35)|1)), (UInt32(183)&127..UInt32(168)&127:(23|1)), (UInt32(213)&127..=UInt32(63)&127:(100|1)), (UInt32(130)&127..UInt32(183)&127:(4|1)), (UInt32(253)&127..UInt32(112)&127:(-58)|1), (UInt32(56)&127..UInt32(216)&127:(72|1)), (UInt32(174)&127..UInt32(13)&127:(6|1)), (UInt32(173)&127..UInt32(124)&127:(19|1))], [(), (), (), (), (), (), (), (), (), ()], [(UInt32(178)&127..=UInt32(1)&127:(-12)|1), (UInt32(196)&127..=UInt32(150)&127:(21|1)), (UInt32(149)&127..=UInt32(8)&127:(-97)|1), (UInt32(251)&127..UInt32(250)&127:((-106)|1)), (UInt32(202)&127..UInt32(50)&127:19|1), (UInt32(146)&127..UInt32(41)&127:(-28)|1), (UInt32(113)&127..UInt32(209)&127:((-107)|1)), (UInt32(5)&127..UInt32(228)&127:(-124)|1), (UInt32(254)&127..=UInt32(7)&127:(67|1)), (UInt32(178)&127..=UInt32(101)&127:((-35)|1))], [(), (), (), (), (), (), (), (), (), ()], (Int16(-112)&127..=Int16(67)&127:(-38)|1), [(UInt32(18)&127..=UInt32(18)&127:(-110)|1), (UInt32(22)&127..UInt32(45)&127:(-94)|1), (UInt32(173)&127..=UInt32(164)&127:57|1), (UInt32(164)&127..=UInt32(168)&127:27|1), (UInt32(110)&127..UInt32(86)&127:117|1), (UInt32(35)&127..=UInt32(195)&127:29|1), (UInt32(217)&127..=UInt32(197)&127:94|1), (UInt32(232)&127..UInt32(60)&127:11|1), (UInt32(228)&127..=UInt32(136)&127:(-110)|1), (UInt32(166)&127..=UInt32(64)&127:(-78)|1)]) as Unit);
                var2298.getOrThrow();
                ()
            } finally { // block id: 2374

            };
            func2376(namedParam2377 : (UInt16(1)&127..=UInt16(166)&127:2|1));
            func2581(namedParam2582 : func105)
        }
;
        let var3214 : Int8 = Int8(Int8(Int8(-112)));
        func2288(optionalParam2289 : var2854, namedParam2291 : var1778, namedParam2292 : (var3214, var2394, var94, var1174))
        case var2636 => 
        var var3224 : (Range<Int8>, Int8, Int8, UInt8, Array<Unit>, String) = ((Int8(Int8(Int8(-23)))&127..Int8(-124)&127:(Int64(UInt32(Int8(-74)))|1)), Int8(-105), Int8(-125), UInt8(53), [(), (), (), (), (), (), (), (), (), ()], """
t+5-n
_)Ima{
""");
        var3224;
        var loopTimeVar3253 : Int64 = 0;
        do {
            loopTimeVar3253++;

        } while ((true) && loopTimeVar3253 < 100 ) ;
        Int16(var1778)
        case _ => 
        var2280
    }
}

public func func3261() : Int64 { // block id: 685
    var var723 : UInt32 = UInt32(23);
    var var735 : Float32 = Float32(Float32(110.0));
    var var768 : (Range<Int32>, UInt16, Int64) = ((Int32(-46)&127..=Int32(5)&127:(-122)|1), UInt16(Int16(-66)), 42);
    var var779 : Int64 = 94;
    if ((Class315.func690(Option<Unit>.Some(()), namedParam692 : (UInt8(131)&127..UInt8(34)&127:(-61)|1)))) { try { // block id: 705
        var708 ||= false;
        if (false) { """
$+[(M
+k\"mV
""" } else { """
~\"Bf3
+9(s4
""" } 
    } finally { // block id: 715
        if (var708) { var677 } else { var677 } 
    } } else { match ((var723 as UInt16)) {
        case caseVar727 : Range<UInt64> => 
            if (false) { [UInt16(159), UInt16(110), UInt16(181), UInt16(94), UInt16(21), UInt16(49), UInt16(203), UInt16(141), UInt16(76), UInt16(225)] } else { var527 } ;
            var735 /= Float32((Int32(Float32(-64.0))) | 1);
            if (true) { var677 } else { """
7l_hO
U|A[7
""" } 
        
        case _ : Enum111 => 
            if (var56) { "?(S},zXjDl" } else { var750 } 
        
        case _ => 
            if (var56) { var758 } else { var758 } ;
            if (var708) { var768 } else { ((var347&127..var347&127:(var779|1)), UInt16(240), (-125)) } ;
            "Z<ia{:[G9J\\"
        
        case caseVar786 => 
            var789;
            var38;
            if (var708) { var750 } else { var750 } 
        
        case _ => 
            ();
            var750
        
    } } ;
    let var814 : ?Int64 = (Enum111.defaultValue as Int64);
    (var814 ?? Aggregate818.var823)
}

func func1953(param1954 : UInt16) : Int16 { // block id: 1955
    var var3259 : (() -> Int64) -> Int16 = func1996;
    try { // block id: 1957
        var152
    } finally { // block id: 1959
        try { // block id: 1961
            var1963;
            var var1971 : UInt32 = UInt32(174);
            var1971 |= UInt32(154);
            var708 ||= var56
        } finally { // block id: 1977

        };
        let var1981 : Interface321 = Class315();
        try (resource = Class315()) { // block id: 1979
            var1981;
            var1813 *= var1813
        } finally { // block id: 1987
            ();
            var347 **= (Int32(-115) & 3);
            let var1993 : Unit = ();
            var1993
        };
        func3261|>var3259
    }
}




func func1897(param1898 : Range<Int8>) : Array<Unit> { // block id: 1899
    let var1905 : Array<Int64> = Array<Int64>(10){ i => (-77) };
    if ((var1905 is Aggregate818)) { try { // block id: 1924
        [var152, var152, Int16(-112), var152, Int16(-5), var152, Int16(19), var152, var152, Int16(41)]
    } finally { // block id: 1936
        [Int16(-33), Int16(-97), Int16(-59), Int16(67), Int16(-70), Int16(16), Int16(56), Int16(9), Int16(-72), Int16(-123)]
    } } else { [[Int16(-22), Int16(-24), Int16(5), Int16(118), Int16(113), Int16(95), Int16(-119), Int16(18), Int16(4), Int16(3)], [Int16(-111), Int16(10), Int16(39), Int16(123), Int16(120), Int16(-12), Int16(-11), Int16(-52), Int16(-107), Int16(-5)], [Int16(-107), Int16(-69), Int16(-40), Int16(92), Int16(-68), Int16(-75), Int16(69), Int16(86), Int16(-81), Int16(19)], [Int16(120), Int16(9), Int16(11), Int16(6), Int16(47), Int16(-123), Int16(-51), Int16(-81), Int16(-115), Int16(-1)], [Int16(-27), Int16(63), Int16(-13), Int16(63), Int16(-105), Int16(84), Int16(-3), Int16(-70), Int16(23), Int16(-38)], [Int16(125), Int16(2), Int16(64), Int16(13), Int16(44), Int16(72), Int16(-80), Int16(100), Int16(48), Int16(-96)], [Int16(111), Int16(-14), Int16(-7), Int16(-18), Int16(50), Int16(-127), Int16(119), Int16(-44), Int16(75), Int16(-38)], [Int16(50), Int16(-100), Int16(-88), Int16(35), Int16(24), Int16(65), Int16(-73), Int16(-125), Int16(-100), Int16(-122)], [Int16(-2), Int16(-61), Int16(-73), Int16(-30), Int16(88), Int16(-24), Int16(67), Int16(77), Int16(16), Int16(-35)], [Int16(37), Int16(76), Int16(-127), Int16(21), Int16(95), Int16(65), Int16(-25), Int16(46), Int16(66), Int16(-86)]][2] } [6];
    var var3408 : Interface319 = Class315();
    (var1949 ?? [(UInt16(48)|>func1953), Int16(Int16(-36)), match (var1778) {
        case caseVar3271 => 
            Aggregate818();
            if (var2892) { Class315((Int8(89)&127..=Int8(-40)&127:2|1)) } else { var3408 } ;
            var2221
        
        case 180 | 141 | 62 => 
            var1194--;
            var38;
            var2221
        
        case _ => 
            var3161
        
    }, (Option<Int16>.Some(var2269) ?? Int16(-22)), var152, Int16(UInt8(191)), try { // block id: 3429
        var3431;
        var2269
    } finally { // block id: 3495
        var var3499 : (Unit, UInt8, Range<Int64>, Unit, UInt8, Int32, Array<Unit>) = ((), UInt8(104), ((-104)&127..(-86)&127:(-115)|1), (), UInt8(164), Int32(UInt16(UInt16(UInt8(84)))), [(), (), (), (), (), (), (), (), (), ()]);
        if (true) { var3499 } else { (var38, UInt8(79), (124&127..(-58)&127:(-86)|1), var2430, UInt8(145), Int32(33), [(), (), (), (), (), (), (), (), (), ()]) } ;
        Int16(-92)
    }, match (Class315()) {
        case _ => 
            var3161
        
    }, Int16(7), Int16(-64)]);
    let var3548 : ??Array<Unit> = ((("""
4+|[-
|#f:u
""", Enum111.enumValue3554(Class315((Int8(-49)&127..Int8(99)&127:(-22)|1)), [[Int16(120), Int16(-70), Int16(34), Int16(-12), Int16(90), Int16(122), Int16(-72), Int16(-118), Int16(107), Int16(19)], [Int16(-22), Int16(110), Int16(-96), Int16(119), Int16(-60), Int16(78), Int16(24), Int16(-29), Int16(85), Int16(-61)], [Int16(94), Int16(-10), Int16(97), Int16(75), Int16(8), Int16(1), Int16(111), Int16(123), Int16(-41), Int16(-117)], [Int16(-69), Int16(88), Int16(78), Int16(60), Int16(76), Int16(110), Int16(-119), Int16(-37), Int16(-56), Int16(-35)], [Int16(113), Int16(85), Int16(11), Int16(82), Int16(-15), Int16(-119), Int16(43), Int16(-51), Int16(-48), Int16(82)], [Int16(89), Int16(56), Int16(28), Int16(-97), Int16(32), Int16(79), Int16(-41), Int16(89), Int16(-31), Int16(93)], [Int16(11), Int16(46), Int16(-43), Int16(41), Int16(-19), Int16(54), Int16(-27), Int16(-15), Int16(-109), Int16(38)], [Int16(-16), Int16(-72), Int16(-92), Int16(13), Int16(-57), Int16(90), Int16(111), Int16(-57), Int16(6), Int16(-102)], [Int16(38), Int16(11), Int16(-5), Int16(8), Int16(46), Int16(58), Int16(-3), Int16(-43), Int16(72), Int16(25)], [Int16(14), Int16(-6), Int16(71), Int16(39), Int16(31), Int16(-14), Int16(56), Int16(-86), Int16(-116), Int16(59)]], func105)) as UInt64) as Option<Array<Unit>>);
    ((var3548 ?? if (var2892) { Option<Array<Unit>>.None } else { var3617 } ) ?? if (true) { (if (var2892) { [(), (), (), (), (), (), (), (), (), ()] } else { var3374 } ) } else { var3374 } )
}

public func func1864(param1865 : (Unit, UInt8, Range<Int64>, Unit, UInt8, Int32, Array<Unit>)) : Int64 { // block id: 1866
    (match (var1603) {
        case _ => 
            var1194 **= (74 & 3);
            var38;
            let var1880 : ?Unit = Option<Unit>.Some(());
            [var1880, Option<Unit>.None, var1880, Option<Unit>.None, var1880, Option<Unit>.Some(var38), Option<Unit>.None, var1880, Option<Unit>.Some(var38), Option<Unit>.None]
        
    }[4] ?? ((var3292&127..=Int8(-36)&127:(22|1))|>func1897)[2]);
    var var3644 : Array<Int16> = [Int16(-59), Int16(59), Int16(Int16(51)), Int16(15), Int16(Int8(UInt8(UInt8(50)))), Int16(68), Int16(Int8(105)), Int16(-5), Int16(UInt8(46)), Int16(14)];
    match {
        case var1194 <= var924 => 
        var924 | var1194
        case var2892 => 
        var3644;
        31
        case _ => 
        var2577;
        (-22)
    } / (((try { // block id: 3668
        var1813 **= (UInt64(201) & 3);
        Option<Bool>.None;
        if (var2636) { Option<Int64>.None } else { var1599 } 
    } finally { // block id: 3677
        if (false) { (var1677&127..=var1677&127:(var3684|1)) } else { (var1677&127..var1677&127:(122|1)) } ;
        if (false) { var3693 } else { Option<UInt16>.None } ;
        var1599
    } ?? try { // block id: 3698
        ();
        var386 <<= ((Int8(-78)) & 7);
        var var3705 : Int64 = (-73);
        var3705 >> (((-74)) & 7)
    } finally { // block id: 3708
        ();
        var3684 + var1194
    })) | 1)
}



public func func3716(param3717 : Float64) : (Unit, UInt8, Range<Int64>, Unit, UInt8, Int32, Array<Unit>) { // block id: 3718
    var var3748 : (Range<Int8>, Array<Bool>, Array<Bool>, Int64, Rune, Range<Int32>, Int32) = ((Int8(38)&127..Int8(-2)&127:(4|1)), [false, false, true, true, true, false, false, true, true, false], [true, (Class315() is (Option<Int64>, String, Interface320) -> Int32), (([Option<Unit>.Some(()), Option<Unit>.None, Option<Unit>.Some(()), Option<Unit>.Some(()), Option<Unit>.Some(()), Option<Unit>.None, Option<Unit>.None, Option<Unit>.Some(()), Option<Unit>.Some(()), Option<Unit>.None] as Option<Array<Unit>>) is UInt64), (Aggregate818(namedParam3781 : [(UInt32(209)&127..=UInt32(242)&127:23|1), (UInt32(143)&127..UInt32(208)&127:53|1), (UInt32(114)&127..=UInt32(162)&127:49|1), (UInt32(178)&127..UInt32(123)&127:31|1), (UInt32(92)&127..UInt32(237)&127:(-121)|1), (UInt32(33)&127..UInt32(62)&127:17|1), (UInt32(27)&127..=UInt32(253)&127:68|1), (UInt32(62)&127..UInt32(185)&127:(-71)|1), (UInt32(59)&127..=UInt32(45)&127:65|1), (UInt32(138)&127..UInt32(249)&127:(-86)|1)]) is Array<Int64>), false, false, ((Int8(-83)&127..=Int8(-65)&127:121|1) is Int64), true, ((Option<Interface318>.None is Option<UInt64>) is Array<Array<Int16>>), true], 83, 'd', (Int32(-88)&127..Int32(UInt32(64))&127:(70|1)), Int32(UInt8(Int8(UInt8(188)))));
    var var3978 : Int64 = Int64(Int16(27));
    var var4017 : (Range<Int8>, Int8, Int8, UInt8, Array<Unit>, String) = ((Int8(-126)&127..=Int8(UInt8(Int8(119)))&127:(13|1)), Int8(Int8(-102)), Int8(UInt8(240)), UInt8(UInt8(UInt8(Int8(-71)))), [(), (), (), (), (), (), (), (), (), ()], """
k~S[Z
~<a{H`
""");
    let var4046 : Unit = ();
    match ((match ([[Int16(-112), Int16(-33), Int16(-106), Int16(-2), Int16(-40), Int16(-59), Int16(53), Int16(-84), Int16(63), Int16(-16)], [Int16(-108), Int16(31), Int16(-122), Int16(-53), Int16(17), Int16(-81), Int16(-82), Int16(101), Int16(29), Int16(-13)], [Int16(30), Int16(-38), Int16(-21), Int16(21), Int16(96), Int16(96), Int16(100), Int16(-122), Int16(64), Int16(60)], [Int16(5), Int16(-85), Int16(33), Int16(101), Int16(106), Int16(-47), Int16(104), Int16(27), Int16(39), Int16(-126)], [Int16(48), Int16(9), Int16(-51), Int16(-89), Int16(12), Int16(46), Int16(41), Int16(11), Int16(-89), Int16(36)], [Int16(-92), Int16(105), Int16(-40), Int16(-96), Int16(-43), Int16(125), Int16(-115), Int16(-38), Int16(-126), Int16(48)], [Int16(-35), Int16(99), Int16(-109), Int16(115), Int16(92), Int16(-113), Int16(-36), Int16(53), Int16(56), Int16(-90)], [Int16(-29), Int16(1), Int16(9), Int16(-115), Int16(31), Int16(-25), Int16(-57), Int16(62), Int16(85), Int16(-98)], [Int16(-119), Int16(-128), Int16(112), Int16(68), Int16(29), Int16(41), Int16(-118), Int16(-82), Int16(124), Int16(15)], [Int16(75), Int16(-53), Int16(19), Int16(-117), Int16(15), Int16(111), Int16(-23), Int16(-89), Int16(40), Int16(-118)]]) {
            case _ : Int8 => 
                ();
                var1194 <<= ((var3684) & 7);
                Option<(Range<Int8>, Array<Bool>, Array<Bool>, Int64, Rune, Range<Int32>, Int32)>.None
            
            case _ => 
                Int32(-57);
                var3739
            
        } ?? try { // block id: 3742
            var527;
            UInt16(250);
            if (false) { var3748 } else { (var2394, [var708, var708, var708, false, var2636, true, true, true, var708, var2892], [var708, var708, false, var3879, var2636, true, var2892, true, var56, false], (-57), 'A', (Int32(39)&127..=Int32(-123)&127:(-90)|1), var347) } 
        } catch (e: Exception) { // block id: 3891
            var3374;
            Option<UInt16>.Some(var1677);
            if (false) { (var2394, [true, true, false, true, true, true, false, true, false, true], var3901, (-10), 'j', (Int32(69)&127..=Int32(96)&127:(var924|1)), var347) } else { ((Int8(-84)&127..=Int8(-58)&127:76|1), var3901, var3901, var3684, 'o', (Int32(36)&127..Int32(109)&127:7|1), var347) } 
        } finally { // block id: 3964
            var1111;
            if (true) { ((Int8(99)&127..=Int8(-114)&127:0|1), [false, true, true, true, false, true, true, false, true, false], var3901, var3684, var2577, (Int32(-14)&127..Int32(79)&127:(var3978|1)), var347) } else { var3748 } 
        })) {
        case (caseVar3985,_,_,caseVar3986,caseVar3987,_ : (Range<Int16>, Rune, Range<Int8>, Bool, (Float32, Range<UInt16>, Int16, Int64, Unit, UInt32)),caseVar3988) => 
            if (var56) { ((var386&127..=var3292&127:(var3997|1)), Int8(-111), Int8(-87), UInt8(50), [var2430, var2430, (), (), var38, var38, var38, var2430, var38, ()], """
w=o2:
M?]v+
""") } else { var4017 } ;
            var4046
        
        case (_ : UInt64,_,caseVar4050 : Int8,_,caseVar4051 : Array<Array<Int16>>,_,caseVar4052 : Range<Int64>) => 
            var3068;
            var1778 + var3346;
            var38
        
        case caseVar4061 : Range<Int64> => 
            ()
        
        case (_,caseVar4066,_,_,caseVar4067,caseVar4068,caseVar4069 : Option<Int32>) => 
            ();
            let var4073 : Interface321 = Class315((Int8(Int8(4))&127..Int8(UInt8(Int8(-13)))&127:(9|1)));
            var4073;
            ()
        
        case _ => 
            var var4087 : Float32 = Float32(12.0);
            var4087 *= var4087
        
    };
    match (Int16(65)) {
        case caseVar4094 => 
            if (false) { var2577 } else { var2577 } 
        
        case 100 => 
            ();
            if (var56) { var1827 } else { var1827 } ;
            's'
        
        case caseVar4111 => 
            'v'
        
        case caseVar4116 => 
            if (var708) { var2577 } else { 'Z' } 
        
        case _ => 
            if (true) { var2577 } else { var2577 } 
        
    };
    var var4199 : Option<UInt8> = (("M5ghn&YDSI", Enum111.defaultValue) as UInt8);
    var var4223 : Bool = ((Int8(-93)&127..Int8(-91)&127:((-45)|1)) is Array<Bool>);
    var var4230 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    (try (resource = Class315()) { // block id: 4130
        if (true) { ((Int32(-35)&127..Int32(-94)&127:16|1), var1677, 61) } else { ((Int32(71)&127..Int32(97)&127:(-126)|1), var1677, var3997) } ;
        var4046;
        var var4144 : UInt32 = UInt32(228);
        var4144 = var4144
    } finally { // block id: 4147
        Int32(61);
        var4046
    }, var1778, match (try { // block id: 4153
            var2430;
            Option<UInt16>.None
        } catch (_) { // block id: 4156
            var20;
            ();
            var3693
        }) {
        case caseVar4162 : Interface321 => 
            var4166 = Float32(-99.0);
            if (var56) { var615 } else { var615 } 
        
        case _ : (Unit, UInt8, Range<Int64>, Unit, UInt8, Int32, Array<Unit>) => 
            if (false) { var2577 } else { var2577 } ;
            var38;
            ((-27)&127..=11&127:(-43)|1)
        
        case _ => 
            Option<Array<UInt16>>.None;
            if (true) { ((-43)&127..119&127:(-40)|1) } else { (var1194&127..(-123)&127:(17|1)) } 
        
    }, (), (var4199 ?? if (false) { // block id: 4206
        UInt8(55)
    } else { // block id: 4208
        var789;
        -UInt8(141)
    }), Int32(88) * Int32(UInt32(68)), if (try { // block id: 4218
        var56
    } finally { // block id: 4220
        !var4223
    }) { var4230 } else { [(), (), (), (), (), (), (), (), (), ()] } )
}

public func func1800(param1801 : Float64) : Option<Int64> { // block id: 1802
    let var1845 : Int64 = 62;
    var var1856 : ?(Unit, (Unit, UInt8, Range<Int64>, Unit, UInt8, Int32, Array<Unit>), (Range<Int16>, Rune, Range<Int8>, Bool, (Float32, Range<UInt16>, Int16, Int64, Unit, UInt32))) = ((UInt64(207)&127..=UInt64(143)&127:(-91)|1) as (Unit, (Unit, UInt8, Range<Int64>, Unit, UInt8, Int32, Array<Unit>), (Range<Int16>, Rune, Range<Int8>, Bool, (Float32, Range<UInt16>, Int16, Int64, Unit, UInt32))));
    (match (var527) {
        case caseVar1808 : ((Int8, Range<Int8>, Range<Int32>, Enum111), Rune) => 
            var38;
            var38;
            var1813
        
        case caseVar1817 => 
            var1248;
            UInt64(222)
        
        case _ => 
            UInt64(191)
        
    }&127..UInt64((var1827.var1830))&127:(match (Option<(Unit, (Unit, UInt8, Range<Int64>, Unit, UInt8, Int32, Array<Unit>), (Range<Int16>, Rune, Range<Int8>, Bool, (Float32, Range<UInt16>, Int16, Int64, Unit, UInt32)))>.None) {
        case caseVar1837 : Rune => 
            UInt16(229);
            [79, var924, var1194, var1845, var924, var1194, 126, var924, var1194, var924]
        
        case _ => 
            var1856;
            var38;
            [(-90), (-79), 85, 77, (-118), 0, (-63), (-127), 1, (-114)]
        
    }[5]|1));
    let var3714 : ((Unit, UInt8, Range<Int64>, Unit, UInt8, Int32, Array<Unit>)) -> Int64 = func1864;
    let var4234 : (Float64) -> (Unit, UInt8, Range<Int64>, Unit, UInt8, Int32, Array<Unit>) = func3716;
    func880<UInt64, Rune, Int8>((var4234~>var3714), namedParam887 : var1174);
    (UInt64(100) as Int64)
}

func func1718<T0>(param1719 : Array<Bool>) : Option<Int64> where T0 <: Range<UInt64> { // block id: 1720
    let var1737 : ??Unit = ([(UInt32(71)&127..=UInt32(197)&127:15|1), (UInt32(222)&127..UInt32(96)&127:37|1), (UInt32(99)&127..UInt32(179)&127:(-101)|1), (UInt32(196)&127..UInt32(250)&127:(-110)|1), (UInt32(36)&127..=UInt32(122)&127:97|1), (UInt32(128)&127..=UInt32(205)&127:26|1), (UInt32(126)&127..=UInt32(55)&127:(-26)|1), (UInt32(25)&127..=UInt32(19)&127:(-29)|1), (UInt32(245)&127..=UInt32(246)&127:110|1), (UInt32(227)&127..UInt32(208)&127:75|1)] as Option<Unit>);
    try { // block id: 1722
        try (resource = Class315()) { // block id: 1724
            var152;
            var38
        } finally { // block id: 1727
            var708 &&= var708;
            var1111;
            var38
        };
        Option<Int64>.None
    } finally { // block id: 1734
        let var1768 : Int32 = Int32(Int8(Int8(-62)));
        match (var1737) {
            case _ : Array<Bool> => 
                (Int16(64)&127..=Int16(19)&127:(-86)|1);
                ();
                var var1748 : (Unit, UInt8, Range<Int64>, Unit, UInt8, Int32, Array<Unit>) = ((), UInt8(155), (110&127..14&127:((-64)|1)), (), UInt8(UInt8(233)), Int32(-112), [(), (), (), (), (), (), (), (), (), ()]);
                if (false) { var1748 } else { ((), UInt8(73), ((-105)&127..31&127:(-62)|1), var38, UInt8(237), var1768, [(), (), (), (), (), (), (), (), (), ()]) } 
            
            case _ => 
                var var1786 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
                ((), var1778, var615, var38, var1778, var1768, var1786)
            
        };
        var38;
        var var4240 : (Float64) -> Option<Int64> = func1800;
        var1038|>var4240
    }
}


public func func1564(param1565 : String) : (Int8, Range<Int8>, Range<Int32>, Enum111) { // block id: 1566
    let var1577 : UInt64 = UInt64(UInt8(UInt8(67)));
    let var4254 : Bool = true;
    let var4262 : Int64 = 95;
    let var4292 : Bool = false;
    func func1637(namedParam1638 ! : (Unit, UInt8, Range<Int64>, Unit, UInt8, Int32, Array<Unit>), namedParam1639 ! : (UInt64) -> Unit) : Option<Int64> { // block id: 1642
        var var1681 : UInt8 = UInt8(Int8(-75));
        try (resource = Class315()) { // block id: 1644
            [(), (), (), (), (), (), (), (), (), ()][7];
            try (resource = Class315()) { // block id: 1649
                var789;
                var347 += var347;
                var1194 = var924
            } catch (e: Exception) { // block id: 1657
                var var1661 : (Range<Int32>, UInt16, Int64) = ((Int32(UInt8(Int8(-128)))&127..=Int32(115)&127:(Int64(Int32(-103))|1)), UInt16(UInt16(89)), Int64(Int8(74)));
                if (false) { var1661 } else { var1661 } ;
                Option<UInt16>.Some(var1677);
                var1681++
            };
            func311(UInt64(178))
        } catch (_) { // block id: 1686
            match (var152) {
                case _ : UInt32 => 
                    if (var708) { (var1681&127..=UInt8(134)&127:(var1194|1)) } else { (var1681&127..=UInt8(237)&127:(var924|1)) } ;
                    var1681 /= ((var1681) | 1)
                
                case -91 | -60 => 
                    ();
                    var38
                
                case _ => 
                    var38;
                    var var1714 : Unit = ();
                    var1714
                
            }
        };
        ();
        var var4244 : (Array<Bool>) -> Option<Int64> = func1718<Range<UInt64>>;
        match (Option<Int16>.None) {
            case _ => 
                var1813++;
                let var4257 : Array<Int64> = [17, 110, (-47), (-26), (-111), 97, 11, 68, 63, 79];
                if (var4254) { var4257 } else { [var3684, var4262, 40, (-68), (-19), var1194, 8, (-45), (-97), (-100)] } ;
                if (true) { [var56, var56, var56, true, var708, false, var708, var4254, var4254, var56] } else { [true, var2892, var2636, true, true, var4292, var2892, var4254, true, true] } 
            
        }|>var4244
    }
;
    let var4322 : Range<Int64> = (Int64(Int8(0))&127..77&127:(Int64(Int8(22))|1));
    let var4384 : (UInt64) -> Unit = func311;
    func func1582(param1583 : (Int8, Range<Int8>, Range<Int32>, Enum111), optionalParam1584 ! : Int64 = Int64(Int8(-83))) : UInt64 { // block id: 1587
        func func1592(param1593 : Option<Int64>, param1594 : String, namedParam1595 ! : Interface320) : Int32 { // block id: 1596
            var347
        }
;
        let var1621 : Class315 = Class315();
        ((Int32(66)&127..func1592(var1599, "HQiPVXG,na{", namedParam1595 : var1603)&127:([var924, 3, (-114), (-68), (-76), var924, (-19), (-111), 24, var924][6]|1)), var1621.var1624, try { // block id: 1627
            ();
            optionalParam1584
        } finally { // block id: 1630
            var38;
            Option<Option<Unit>>.Some(Option<Unit>.Some(var38));
            (-95)
        });
        var loopTimeVar4360 : Int64 = 0;
        func1637(namedParam1638 : ((var3169 -= var2280), UInt8(Int8(84)), match (var3739) {
            case _ : Aggregate818 => 
                var615
            
            case _ => 
                (var924&127..=(-83)&127:((-37)|1))
            
            case caseVar4319 => 
                var4322
            
            case caseVar4331 : Option<UInt8> => 
                ();
                Option<Option<Int16>>.Some(Option<Int16>.Some(var3169));
                var4322
            
            case _ => 
                var var4348 : Int64 = Int64(UInt8(243));
                if (true) { (optionalParam1584&127..=var3684&127:(115|1)) } else { (var4348&127..var4348&127:(68|1)) } 
            
        }, do {
            loopTimeVar4360++;
            var347 ^= Int32(110)
        } while ((var3879) && loopTimeVar4360 < 100 ) , try { // block id: 4362
            var2269 /= ((var2269) | 1);
            var1778 ^ var3346
        } finally { // block id: 4369
            ();
            UInt8(228) | UInt8(74)
        }, try { // block id: 4375
            var1677 |= var1677;
            Int32(-6)
        } finally { // block id: 4380
            var347
        }, var3374), namedParam1639 : var4384);
        UInt64(42)
    }
;
    let var4395 : () -> Int64 = func105;
    (Option<UInt64>.None ?? var1577) << ((func1582((var20, (Int8(-76)&127..=Int8(-34)&127:(-128)|1), var94, Enum111.enumValue3554(var1603, var3431, var4395)), optionalParam1584 : 58)) & 7)|>func311;
    var1248;
    var var4425 : Option<UInt8> = Option<UInt8>.Some(UInt8(UInt8(86)));
    let var4484 : Range<UInt16> = (UInt16(UInt8(90))&127..=UInt16(Int16(10))&127:(Int64((-86))|1));
    if (match ((var3366, var2577, (var386&127..=var20&127:(88|1)), true, (Float32(-108.0), (UInt16(13)&127..UInt16(54)&127:(31|1)), Int16(94), var3684, var2430, UInt32(161)))) {
        case caseVar4421 : Interface318 => 
            var1603;
            var4425;
            var3879
        
        case (_ : Range<Int8>,_,caseVar4432,caseVar4433 : UInt8,(caseVar4434 : Interface320,caseVar4435 : Option<Array<UInt16>>,_,_ : Float32,caseVar4436 : Range<Int16>,_)) => 
            ();
            var56
        
        case caseVar4442 : (Range<Int8>, Int8, Int8, UInt8, Array<Unit>, String) => 
            ([(UInt32(230)&127..=UInt32(213)&127:68|1), (UInt32(25)&127..UInt32(197)&127:(-34)|1), (UInt32(134)&127..UInt32(235)&127:30|1), (UInt32(116)&127..UInt32(159)&127:((-37)|1)), (UInt32(109)&127..UInt32(94)&127:(-38)|1), (UInt32(75)&127..UInt32(131)&127:(-58)|1), (var920&127..UInt32(79)&127:(var924|1)), var789, (var4462&127..UInt32(61)&127:(var1194|1)), (UInt32(34)&127..=UInt32(222)&127:(var4262|1))], var3374, [(UInt32(250)&127..UInt32(114)&127:81|1), (UInt32(196)&127..UInt32(0)&127:(-44)|1), (UInt32(195)&127..UInt32(241)&127:32|1), (UInt32(233)&127..=UInt32(138)&127:(-81)|1), (UInt32(158)&127..=UInt32(120)&127:4|1), (UInt32(107)&127..=UInt32(236)&127:73|1), (UInt32(83)&127..UInt32(224)&127:(-60)|1), (UInt32(97)&127..UInt32(130)&127:36|1), (UInt32(157)&127..=UInt32(123)&127:29|1), (UInt32(121)&127..=UInt32(147)&127:(-74)|1)], var3374, (var3161&127..=var152&127:(var4262|1)), var938);
            if (var2892) { var2937 } else { (Float32(118.0), var4484, Int16(98), var4494, var2430, var4462) } ;
            true
        
        case _ => 
            var1599;
            Float32(-47.0) == Float32(0.0)
        
        case _ => 
            Option<(Unit, (Unit, UInt8, Range<Int64>, Unit, UInt8, Int32, Array<Unit>), (Range<Int16>, Rune, Range<Int8>, Bool, (Float32, Range<UInt16>, Int16, Int64, Unit, UInt32)))>.None;
            var2636
        
    }) { (match (var4519) {
        case caseVar4523 => 
            (UInt32(193)&127..=UInt32(66)&127:25|1);
            let var4529 : ?(Int8, Range<Int8>, Range<Int32>, Enum111) = ((Int32(-75)&127..=Int32(-91)&127:3|1) as (Int8, Range<Int8>, Range<Int32>, Enum111));
            if (false) { var4529 } else { Option<(Int8, Range<Int8>, Range<Int32>, Enum111)>.None } 
        
        case caseVar4535 => 
            ();
            var var4542 : ?(Int8, Range<Int8>, Range<Int32>, Enum111) = (((Class315() is (Range<Int8>, Int8, Int8, UInt8, Array<Unit>, String)) as Int64) as (Int8, Range<Int8>, Range<Int32>, Enum111));
            if (true) { Option<(Int8, Range<Int8>, Range<Int32>, Enum111)>.None } else { var4542 } 
        
        case _ => 
            var4494 ^= (-43);
            var1599;
            if (true) { Option<(Int8, Range<Int8>, Range<Int32>, Enum111)>.Some(var758) } else { var4558 } 
        
    } ?? (Option<(Int8, Range<Int8>, Range<Int32>, Enum111)>.None ?? var4563)) } else { try { // block id: 4571
        (var386, (Int8(-46)&127..=Int8(123)&127:16|1), var94, var1174)
    } finally { // block id: 4577
        var4558;
        [Int16(-23), Int16(95), Int16(2), Int16(-68), Int16(74), Int16(46), Int16(32), Int16(122), Int16(82), Int16(-24)];
        (Int8(-48), (Int8(56)&127..=Int8(-9)&127:(-100)|1), (var347&127..=var347&127:(var1194|1)), Enum111.enumValue3554(Class315(), [[Int16(-125), Int16(-95), Int16(-39), Int16(-17), Int16(-18), Int16(62), Int16(-114), Int16(78), Int16(33), Int16(-21)], [Int16(25), Int16(-66), Int16(-20), Int16(-75), Int16(119), Int16(30), Int16(88), Int16(-1), Int16(94), Int16(-76)], [Int16(-86), Int16(96), Int16(-12), Int16(-17), Int16(98), Int16(4), Int16(83), Int16(-117), Int16(45), Int16(65)], [Int16(-123), Int16(84), Int16(-45), Int16(-6), Int16(-93), Int16(-111), Int16(-51), Int16(-41), Int16(-18), Int16(-51)], [Int16(112), Int16(-5), Int16(59), Int16(99), Int16(114), Int16(-75), Int16(90), Int16(43), Int16(114), Int16(26)], [Int16(4), Int16(47), Int16(57), Int16(14), Int16(-30), Int16(-114), Int16(22), Int16(80), Int16(72), Int16(-114)], [Int16(-45), Int16(124), Int16(-52), Int16(-17), Int16(27), Int16(-59), Int16(-2), Int16(81), Int16(37), Int16(30)], [Int16(-85), Int16(3), Int16(8), Int16(65), Int16(-69), Int16(66), Int16(27), Int16(-75), Int16(-118), Int16(80)], [Int16(49), Int16(-17), Int16(44), Int16(-93), Int16(6), Int16(34), Int16(-71), Int16(88), Int16(-99), Int16(17)], [Int16(-23), Int16(86), Int16(96), Int16(99), Int16(-120), Int16(92), Int16(-12), Int16(36), Int16(107), Int16(9)]], var4395))
    } } 
}

public func func1560(param1561 : Range<Int16>) : Interface318 { // block id: 1562
    var var4592 : (String) -> (Int8, Range<Int8>, Range<Int32>, Enum111) = func1564;
    var677|>var4592;
    var loopTimeVar4719 : Int64 = 0;
    do {
        loopTimeVar4719++;
        match (UInt32(253)) {
            case 154 | 211 => 
                if (var3879) { var3068 } else { Option<String>.None } 
            
            case 164 => 
                Option<String>.Some(var4704)
            
            case 130 | 2 | 87 => 
                var2394;
                var3068
            
            case _ => 
                Option<String>.Some("th0q-`zJpb")
            
        };
        var4462 ^= UInt32(5)
    } while ((try { // block id: 4597
        var4600 += 70.0;
        var2430;
        true
    } catch (_) { // block id: 4605
        var4607;
        ();
        var708
    }) && loopTimeVar4719 < 100 ) ;
    match (if ((var4519 ?? var3879)) { (Option<Option<Array<Unit>>>.Some(Option<Array<Unit>>.None) ?? Option<Array<Unit>>.None) } else { (Option<UInt8>.None as Array<Unit>) } ) {
        case _ => 
            var38;
            var2854
        
        case _ : Range<UInt16> => 
            var527;
            if (var2892) { var2854 } else { var2854 } 
        
        case _ => 
            Class315()
        
    }
}



public func func1183(param1184 : Array<Unit>) : Option<Int64> { // block id: 1185
    let var1312 : Range<Int16> = (Int16(85)&127..Int16(20)&127:(Int64(Int8(UInt8(Int8(113))))|1));
    let var1340 : Rune = 'n';
    let var1346 : (Range<Int16>, Rune, Range<Int8>, Bool, (Float32, Range<UInt16>, Int16, Int64, Unit, UInt32)) = ((Int16(UInt16(47))&127..Int16(-103)&127:(Int64(UInt8(UInt8(30)))|1)), 'M', (Int8(-1)&127..=Int8(UInt8(78))&127:((-81)|1)), (Class315() is (Unit, UInt8, Range<Int64>, Unit, UInt8, Int32, Array<Unit>)), (Float32(Float32(Float32(21.0))), (UInt16(27)&127..UInt16(158)&127:(-115)|1), Int16(-27), Int64(UInt32(232)), (), UInt32(UInt8(Int8(-63)))));
    func func1204(namedParam1205 ! : Range<Int32>) : Option<Option<Unit>> { // block id: 1206
        var var1214 : (Range<Int32>, UInt16, Int64) = ((Int32(32)&127..=Int32(13)&127:118|1), UInt16(114), Int64(UInt16(Int16(UInt16(12)))));
        var var1273 : ((Int8, Range<Int8>, Range<Int32>, Enum111), Rune) = ((Int8(Int8(UInt8(119))), (Int8(89)&127..Int8(49)&127:(Int64(UInt8(59))|1)), (Int32(-8)&127..Int32(-92)&127:((-43)|1)), Enum111.defaultValue), 'f');
        let var1296 : ??Unit = Option<Option<Unit>>.None;
        match (if (true) { // block id: 1212
                var1214;
                var56;
                var var1229 : (String, Enum111) = ("6y=(9Z&A&w", Enum111.defaultValue);
                if (true) { ("""
*CH:`
[v5(r
""", var1174) } else { var1229 } 
            } else { // block id: 1233
                if (var56) { (var750, var1174) } else { ("c@T@,KrYGE", Enum111.defaultValue) } 
            }[1]) {
            case defaultValue => 
                var38;
                var1248;
                let var1251 : ??Unit = ((UInt8(Int8(-8))&127..=UInt8(UInt8(199))&127:(Int64(Int32(-82))|1)) as Option<Unit>);
                var1251
            
            case caseVar1262 => 
                var38;
                ();
                Option<Option<Unit>>.None
            
            case caseVar1269 => 
                UInt8(63);
                var1273;
                if (var56) { Option<Option<Unit>>.Some(Option<Unit>.Some(var38)) } else { var1296 } 
            
            case defaultValue => 
                Int8(-12);
                if (var708) { var1296 } else { var1296 } 
            
            case _ => 
                var var1324 : (Float32, Range<UInt16>, Int16, Int64, Unit, UInt32) = (Float32(98.0), (UInt16(242)&127..UInt16(163)&127:(-10)|1), Int16(UInt8(51)), Int64(Int32(UInt8(94))), (), UInt32(UInt32(UInt16(18))));
                if (var708) { (var1312, 'X', (Int8(50)&127..Int8(88)&127:(-9)|1), var56, var1324) } else { (var1312, var1340, (Int8(-15)&127..Int8(-111)&127:(-39)|1), var56, var1324) } ;
                var1346;
                var1296
            
        }
    }
;
    let var1394 : (Range<Int8>, Array<Bool>, Array<Bool>, Int64, Rune, Range<Int32>, Int32) = ((Int8(-7)&127..=Int8(39)&127:1|1), [true, (("""
(Zt!h
R+#td
""", Enum111.defaultValue) is Option<(Unit, (Unit, UInt8, Range<Int64>, Unit, UInt8, Int32, Array<Unit>), (Range<Int16>, Rune, Range<Int8>, Bool, (Float32, Range<UInt16>, Int16, Int64, Unit, UInt32)))>), (Float64((-50.0)) is Interface319), true, (UInt64(Int32(-121)) is (Range<Int32>) -> Option<Option<Unit>>), (((Int32(43)&127..=Int32(51)&127:(-128)|1), UInt16(221), 59) is (Range<Int8>, Int8, Int8, UInt8, Array<Unit>, String)), false, (((Int8(-33), (Int8(-66)&127..=Int8(67)&127:124|1), (Int32(116)&127..=Int32(43)&127:(-117)|1), Enum111.defaultValue), 'N') is (Float32, Range<UInt16>, Int16, Int64, Unit, UInt32)), false, (((Int32(58)&127..=Int32(104)&127:(-34)|1), UInt16(124), 34) is Range<UInt16>)], [false, ((UInt32(92)&127..=UInt32(128)&127:(-41)|1) is Range<UInt32>), true, (Enum111.defaultValue is Interface319), false, false, true, (((Int8(55)&127..Int8(66)&127:(30|1)), Int8(124), Int8(-108), UInt8(12), [(), (), (), (), (), (), (), (), (), ()], """
Z9'\"p
aVH0[
""") is Interface321), ((Float32(35.0), (UInt16(60)&127..UInt16(234)&127:(32|1)), Int16(104), 106, (), UInt32(41)) is Interface318), ((((), ((), UInt8(69), (17&127..=15&127:119|1), (), UInt8(38), Int32(-10), [(), (), (), (), (), (), (), (), (), ()]), ((Int16(26)&127..=Int16(122)&127:(124|1)), 'c', (Int8(87)&127..=Int8(98)&127:(2|1)), true, (Float32(-100.0), (UInt16(252)&127..=UInt16(197)&127:(-48)|1), Int16(-39), (-83), (), UInt32(155)))) as Int64) is Option<UInt16>)], Int64(UInt64(160)), 'h', (Int32(49)&127..Int32(-1)&127:((-121)|1)), Int32(-62));
    let var4821 : (Range<Int8>, Array<Bool>, Array<Bool>, Int64, Rune, Range<Int32>, Int32) = ((Int8(UInt8(113))&127..=Int8(28)&127:(65|1)), [true, true, false, false, true, true, true, false, true, true], [(((-30) as Enum111) is Interface321), (Option<Int64>.None is Bool), true, true, true, false, (((Int8(52), (Int8(44)&127..=Int8(112)&127:(-112)|1), (Int32(120)&127..Int32(112)&127:((-19)|1)), Enum111.defaultValue) as (Int8, Range<Int8>, Range<Int32>, Enum111)) is Int32), true, false, true], (-91), 'U', (Int32(81)&127..Int32(75)&127:125|1), Int32(-4));
    let var4902 : Unit = ();
    let var4954 : Int16 = Int16(Int8(38));
    let var5098 : Range<UInt16> = (UInt16(UInt16(91))&127..UInt16(28)&127:(Int64(Int8(-52))|1));
    func func1378(namedParam1379 ! : Interface318, namedParam1380 ! : Option<UInt16>, optionalParam1381 ! : Enum111 = Enum111.defaultValue) : Option<Unit> { // block id: 1383
        var38;
        let var4773 : Range<Int32> = (Int32(-52)&127..Int32(-126)&127:(Int64(UInt16(242))|1));
        let var4948 : Array<Int16> = [Int16(-67), Int16(-8), Int16(-57), Int16(51), Int16(29), Int16(-5), Int16(48), Int16(-98), Int16(77), Int16(-72)];
        let var5007 : Int16 = Int16(UInt16(104));
        func func1386(param1387 : (Float32, Range<UInt16>, Int16, Int64, Unit, UInt32)) : Range<Int32> { // block id: 1388
            func func1547(param1548 : UInt64, param1549 : Class315) : Interface318 { // block id: 1550
                (Option<Interface318>.Some(Class315()) ?? ((Int16(-95)&127..Int16(113)&127:116|1)|>func1560))
            }
;
            let var4759 : UInt64 = UInt64(205);
            var loopTimeVar4861 : Int64 = 0;
            do {
                loopTimeVar4861++;
                (Option<Unit>.Some(var38) ?? ());
                let var4793 : () -> Int64 = func105;
                func func1508(param1509 : (Range<Int8>, Array<Bool>, Array<Bool>, Int64, Rune, Range<Int32>, Int32), optionalParam1510 ! : (Unit, (Unit, UInt8, Range<Int64>, Unit, UInt8, Int32, Array<Unit>), (Range<Int16>, Rune, Range<Int8>, Bool, (Float32, Range<UInt16>, Int16, Int64, Unit, UInt32))) = ((), ((), UInt8(250), (Int64(Int8(105))&127..81&127:((-93)|1)), (), UInt8(193), Int32(Int32(-14)), [(), (), (), (), (), (), (), (), (), ()]), ((Int16(-74)&127..=Int16(-17)&127:48|1), 'O', (Int8(-34)&127..=Int8(49)&127:(-109)|1), false, (Float32(36.0), (UInt16(170)&127..UInt16(31)&127:(100|1)), Int16(Int8(42)), Int64(UInt64(58)), (), UInt32(92)))), optionalParam1543 ! : Range<Int16> = (Int16(-124)&127..Int16(62)&127:10|1)) : UInt64 { // block id: 1545
                    let var4762 : Class315 = Class315();
                    func1547(if (var708) { // block id: 4751
                        ();
                        UInt64(116) | UInt64(238)
                    } else { // block id: 4756
                        var2430;
                        var4759
                    }, var4762);
                    var loopTimeVar4813 : Range<UInt64> = (UInt64(231)&127..UInt64(Int32(31))&127:(17|1));
                    for (i in loopTimeVar4813 where match (var650) {
                        case caseVar4770 : Array<Int64> => 
                            var4773;
                            var3617;
                            var56
                        
                        case caseVar4783 => 
                            var3879
                        
                        case _ : Array<Int16> => 
                            Enum111.enumValue3554(var1603, [[Int16(-22), Int16(-120), Int16(124), Int16(74), Int16(114), Int16(60), Int16(-43), Int16(-70), Int16(82), Int16(45)], [Int16(60), Int16(2), Int16(45), Int16(-17), Int16(-53), Int16(70), Int16(52), Int16(57), Int16(-9), Int16(43)], [Int16(65), Int16(73), Int16(7), Int16(-82), Int16(-106), Int16(63), Int16(101), Int16(39), Int16(-110), Int16(75)], [Int16(-96), Int16(-9), Int16(37), Int16(3), Int16(41), Int16(12), Int16(74), Int16(-71), Int16(-127), Int16(-36)], [Int16(-101), Int16(-66), Int16(-99), Int16(-67), Int16(101), Int16(88), Int16(108), Int16(-63), Int16(43), Int16(97)], [Int16(-57), Int16(-7), Int16(25), Int16(9), Int16(123), Int16(-79), Int16(101), Int16(121), Int16(102), Int16(13)], [Int16(-119), Int16(-7), Int16(-125), Int16(-51), Int16(-99), Int16(2), Int16(117), Int16(120), Int16(16), Int16(45)], [Int16(107), Int16(-32), Int16(-84), Int16(-78), Int16(-92), Int16(-27), Int16(-101), Int16(-37), Int16(-83), Int16(-103)], [Int16(53), Int16(86), Int16(-30), Int16(-9), Int16(19), Int16(-47), Int16(100), Int16(71), Int16(-73), Int16(105)], [Int16(19), Int16(58), Int16(-3), Int16(-26), Int16(-84), Int16(-111), Int16(31), Int16(0), Int16(93), Int16(85)]], var4793);
                            if (true) { Option<UInt64>.None } else { Option<UInt64>.None } ;
                            var56
                        
                        case _ => 
                            var677;
                            var708 &&= true;
                            !false
                        
                    } && (var4519 ?? var708)) {
                        UInt32(76)
                    };
                    var4759
                }
;
                func1508(var4821, optionalParam1543 : (var2280&127..=Int16(-123)&127:(119|1)))
            } while ((var1394[2][7]) && loopTimeVar4861 < 100 ) ;
            let var4885 : Unit = ();
            match (if (false) { (Option<String>.Some(var677) ?? "C;TrxB%SS.") } else { match (93.0) {
                    case _ => 
                        var4600 > 10.0;
                        var750
                    
                } } ) {
                case ###"oT;m3'4$td"### | """
)Jk}K
}hXY$
""" => 
                    ();
                    var var4882 : ?Unit = Option<Unit>.None;
                    var4882;
                    var4885
                
                case _ => 
                    if (var2892) { (var750, Enum111.enumValue3554(var1603, [[Int16(80), Int16(4), Int16(94), Int16(-98), Int16(-74), Int16(-70), Int16(5), Int16(-61), Int16(-34), Int16(-84)], [Int16(-74), Int16(-35), Int16(85), Int16(24), Int16(6), Int16(-103), Int16(46), Int16(-47), Int16(-28), Int16(-90)], [Int16(88), Int16(-68), Int16(-53), Int16(-24), Int16(83), Int16(31), Int16(-29), Int16(-126), Int16(116), Int16(45)], [Int16(33), Int16(-5), Int16(-123), Int16(-98), Int16(110), Int16(113), Int16(99), Int16(92), Int16(-17), Int16(15)], [Int16(103), Int16(51), Int16(27), Int16(66), Int16(-125), Int16(-14), Int16(110), Int16(-53), Int16(62), Int16(-12)], [Int16(15), Int16(-100), Int16(107), Int16(-126), Int16(-21), Int16(80), Int16(-14), Int16(-18), Int16(-11), Int16(61)], [Int16(11), Int16(22), Int16(-38), Int16(-16), Int16(-60), Int16(52), Int16(-69), Int16(61), Int16(-101), Int16(-83)], [Int16(76), Int16(-26), Int16(49), Int16(-67), Int16(-58), Int16(110), Int16(-2), Int16(94), Int16(-76), Int16(-60)], [Int16(58), Int16(115), Int16(114), Int16(5), Int16(-72), Int16(11), Int16(-101), Int16(-121), Int16(-118), Int16(-7)], [Int16(110), Int16(-45), Int16(16), Int16(-9), Int16(-109), Int16(-91), Int16(-11), Int16(-94), Int16(65), Int16(-127)]], func105)) } else { (var750, optionalParam1381) } ;
                    var4902;
                    var4902
                
                case _ => 
                    ();
                    var38
                
            };
            (Int32(-1)&127..try { // block id: 4912
                var var4914 : Unit = ();
                var4914;
                var650;
                -var347
            } finally { // block id: 4919
                ((var3292&127..=var386&127:(var3684|1)), var3292, var386, var3346, [(), (), (), (), (), (), (), (), (), ()], """
\"W!8Q
Udyg}
""");
                ();
                var347 - Int32(105)
            }&127:(match (Class315((Int8(-125)&127..Int8(-113)&127:(-46)|1))) {
                case _ : Range<Int8> => 
                    125 & (-42);
                    if (true) { var3431 } else { [var4948, var4948, [Int16(16), Int16(-94), Int16(68), Int16(-41), Int16(-66), Int16(9), Int16(-29), Int16(-18), Int16(-67), Int16(6)], [var4954, var152, var2280, var3169, Int16(90), Int16(-2), Int16(-37), Int16(-72), var2280, var2269], [var3161, Int16(1), Int16(-23), var2269, var3161, var3161, Int16(-115), Int16(75), var2280, Int16(122)], [Int16(-99), Int16(108), Int16(98), var3161, Int16(90), Int16(-89), Int16(-121), Int16(115), var2269, var3161], [Int16(9), Int16(-27), Int16(-116), Int16(-32), Int16(-45), Int16(-34), Int16(25), Int16(50), Int16(-102), Int16(69)], [var2280, Int16(56), var3169, Int16(-22), Int16(-27), var2280, Int16(-17), Int16(20), var4954, Int16(10)], var4948, [var2280, var2280, var3169, Int16(-38), var5007, Int16(20), Int16(-23), var2280, var3161, var3169]] } ;
                    -12
                
                case _ => 
                    var38;
                    var4494
                
                case _ => 
                    ();
                    var1194 ^ (-108)
                
                case _ => 
                    ((var20, (Int8(-114)&127..=Int8(-18)&127:40|1), (Int32(-69)&127..=Int32(15)&127:67|1), var1174), 'N');
                    var var5039 : Int64 = (-23);
                    var5039
                
            }|1))
        }
;
        func1386(match (if (true) { // block id: 5044
                ();
                UInt8(231)
            } else { // block id: 5047
                var1677 &= var1677;
                ((-76)&127..=92&127:(-26)|1);
                -var1778
            }) {
            case 41 => 
                if (true) { (var4166, (UInt16(193)&127..=UInt16(157)&127:113|1), var3169, var3997, (), var920) } else { var2937 } 
            
            case 105 | 211 => 
                Int16(39);
                Float32(-24.0);
                var2937
            
            case 184 | 66 | 190 | 61 => 
                var2394;
                if (var2636) { (Float32(51.0), (UInt16(78)&127..=var1677&127:(var924|1)), var4954, var1194, (), UInt32(182)) } else { var2937 } 
            
            case _ => 
                if (true) { var2937 } else { (var4166, var5098, var5007, (-103), var2430, var920) } 
            
        });
        try { // block id: 5110
            try (resource = Class315()) { // block id: 5112
                Option<(Range<Int8>, Array<Bool>, Array<Bool>, Int64, Rune, Range<Int32>, Int32)>.Some(((var386&127..=var3292&127:(40|1)), [true, true, false, false, false, true, false, true, false, false], [var708, true, var3879, true, var708, var3879, var3879, var2892, false, false], 54, var1340, (var347&127..=Int32(-57)&127:(var1194|1)), Int32(22)));
                let var5140 : Int32 = Int32(Int32(UInt8(UInt8(Int8(-89)))));
                (var5140&127..Int32(0)&127:(var4494|1));
                var1677 ^= var1677
            } catch (_) { // block id: 5151

            };
            Option<Unit>.None
        } finally { // block id: 5153
            ([[Int16(-80), Int16(53), Int16(67), Int16(6), Int16(-106), Int16(27), Int16(-10), Int16(111), Int16(111), Int16(-107)], [Int16(41), var2269, Int16(-50), var5007, Int16(-82), var3161, var2280, Int16(-53), var3161, var2269], [var4954, var3169, var152, var4954, Int16(-56), var5007, Int16(-5), var5007, Int16(105), var152], [Int16(-26), Int16(-39), Int16(104), Int16(-118), Int16(124), Int16(-48), Int16(-55), Int16(-8), Int16(66), Int16(72)], [var152, var2280, var152, Int16(66), var2221, var4954, Int16(77), var2221, Int16(-105), var152], var4948, [Int16(89), Int16(-110), Int16(71), Int16(58), Int16(-7), Int16(-37), Int16(31), Int16(-119), Int16(6), Int16(60)], [Int16(-110), Int16(53), Int16(-48), Int16(39), Int16(38), Int16(-36), Int16(-49), Int16(43), Int16(-8), Int16(115)], [Int16(-110), Int16(-93), Int16(-128), Int16(5), Int16(61), Int16(10), Int16(48), Int16(61), Int16(-29), Int16(-34)], [Int16(30), Int16(52), Int16(-94), Int16(85), Int16(-105), Int16(90), Int16(-71), Int16(66), Int16(55), Int16(116)]] as Unit)
        }
    }
;
    var var5202 : () -> Int64 = func105;
    if (try { // block id: 1188
        true
    } finally { // block id: 1190
        ();
        var1194 >>= (((-51)) & 7);
        true
    }) { (func1204(namedParam1205 : var94) ?? func1378(namedParam1379 : Class315(), namedParam1380 : var3693, optionalParam1381 : Enum111.enumValue3554(Class315(), [[Int16(77), Int16(-16), Int16(98), Int16(1), Int16(-11), Int16(3), Int16(-67), Int16(-38), Int16(98), Int16(50)], [Int16(-76), Int16(-96), Int16(27), Int16(-77), Int16(100), Int16(-117), Int16(-29), Int16(-76), Int16(52), Int16(-83)], [Int16(68), Int16(45), Int16(-128), Int16(-114), Int16(90), Int16(0), Int16(116), Int16(104), Int16(22), Int16(-8)], [Int16(-35), Int16(-51), Int16(-102), Int16(-113), Int16(-126), Int16(98), Int16(78), Int16(28), Int16(-71), Int16(-103)], [Int16(22), Int16(-123), Int16(113), Int16(55), Int16(-22), Int16(106), Int16(-33), Int16(-19), Int16(32), Int16(-30)], [Int16(-82), Int16(-47), Int16(26), Int16(53), Int16(-114), Int16(-95), Int16(-118), Int16(115), Int16(-30), Int16(76)], [Int16(-116), Int16(106), Int16(70), Int16(-109), Int16(-123), Int16(-124), Int16(-12), Int16(34), Int16(87), Int16(-78)], [Int16(-26), Int16(77), Int16(93), Int16(43), Int16(20), Int16(-43), Int16(43), Int16(-69), Int16(109), Int16(51)], [Int16(-9), Int16(114), Int16(-125), Int16(-127), Int16(64), Int16(-74), Int16(71), Int16(-85), Int16(68), Int16(84)], [Int16(86), Int16(-22), Int16(-91), Int16(-94), Int16(66), Int16(-98), Int16(-16), Int16(-36), Int16(-82), Int16(-22)]], var5202))) } else { Option<Unit>.Some(if (var3879) { // block id: 5207
        var5098;
        ()
    } else if (false) { // block id: 5211

    }) } ;
    let var5221 : ?(String, Enum111) = Option<(String, Enum111)>.Some(("y%^|r*:>xF", Enum111.defaultValue));
    if (false) { ((var5221 ?? (var4704, Enum111.enumValue3554(Class315((Int8(-124)&127..=Int8(-106)&127:(95|1))), [[Int16(-106), Int16(-43), Int16(-71), Int16(-22), Int16(105), Int16(24), Int16(83), Int16(79), Int16(60), Int16(45)], [Int16(-53), Int16(-83), Int16(-43), Int16(-24), Int16(8), Int16(75), Int16(105), Int16(54), Int16(-95), Int16(13)], [Int16(21), Int16(10), Int16(-53), Int16(55), Int16(-30), Int16(5), Int16(32), Int16(-72), Int16(31), Int16(73)], [Int16(-33), Int16(-41), Int16(38), Int16(-12), Int16(-106), Int16(-21), Int16(53), Int16(-23), Int16(-79), Int16(-49)], [Int16(-2), Int16(26), Int16(60), Int16(76), Int16(-72), Int16(103), Int16(-81), Int16(89), Int16(16), Int16(-93)], [Int16(-58), Int16(-40), Int16(-75), Int16(79), Int16(86), Int16(-78), Int16(47), Int16(88), Int16(89), Int16(60)], [Int16(-5), Int16(-83), Int16(-21), Int16(-119), Int16(101), Int16(-21), Int16(96), Int16(-58), Int16(80), Int16(-43)], [Int16(87), Int16(-121), Int16(64), Int16(-82), Int16(-15), Int16(-47), Int16(97), Int16(-4), Int16(32), Int16(-38)], [Int16(84), Int16(-127), Int16(-11), Int16(-21), Int16(-36), Int16(-75), Int16(76), Int16(-36), Int16(15), Int16(41)], [Int16(2), Int16(-35), Int16(108), Int16(-17), Int16(110), Int16(4), Int16(-97), Int16(-3), Int16(-89), Int16(-42)]], func105))) as Int64) } else { (var5242 ?? match ((Int16(13)&127..Int16(-42)&127:(-60)|1)) {
        case _ => 
            var5251
        
        case _ => 
            var4494--;
            if (var2892) { Option<Int64>.None } else { var1599 } 
        
    }) } 
}

func func844(param845 : (Int8, Range<Int8>, Range<Int32>, Enum111)) : Option<Int64> { // block id: 846
    var loopTimeVar1176 : Range<UInt64> = (UInt64(UInt8(23))&127..=UInt64(187)&127:((-50)|1));
    for (i in loopTimeVar1176 where if (var708) { [var708, true, false, true, var708, false, var708, var708, var708, true] } else { [var708, false, false, false, var56, false, var708, true, true, var708] } [7]) {
        var877;
        func880<UInt64, Rune, Int8>(func105, optionalParam884 : var708, namedParam887 : var1174)
    };
    let var5262 : (Array<Unit>) -> Option<Int64> = func1183;
    [(), (), (), (), (), (), (), (), (), ()]|>var5262
}

main(): Int64 {
    try {
        let var27 : Int64 = Int64(UInt8(Int8(UInt8(Int8(22)))));
        ((var20&127..=Int8(98)&127:(var27|1)), Int8(-97), var20, UInt8(72), [var38, var38, var38, var38, (), (), (), (), var38, var38], """
6h~0R
IdlN^
""")[4][1];
        var var69 : UInt16 = UInt16(209);
        var var90 : UInt8 = UInt8(1);
        match {
            case var56 => 
            let var63 : Int32 = Int32(UInt8(115));
            ((var63&127..var63&127:(var27|1)), var69, (-2))
            case true => 
            ();
            Float32(-45.0);
            let var77 : (Range<Int32>, UInt16, Int64) = ((Int32(UInt32(151))&127..Int32(UInt8(227))&127:((-128)|1)), UInt16(119), 24);
            var77
            case _ => 
            -var90;
            (var94, var69, var27)
        }[1];
        var var826 : (Float64) -> Int64 = func105;
        func func829(optionalParam830 ! : Int16 = Int16(UInt8(132)), namedParam833 ! : (Float64) -> Int64) : Float64 { // block id: 836
            Aggregate818.var840;
            match (((var3292, (Int8(-8)&127..=Int8(-3)&127:(var3997|1)), (Int32(-12)&127..var347&127:(var924|1)), var1174)|>func844)) {
                case caseVar5279 => 
                    var5282;
                    ();
                    var4600
                
                case _ => 
                    var2179;
                    98.0
                
            }
        }
;
        func829(namedParam833 : func105)|>var826
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var20*var20), 64)
        crccheck.updateBuffer(UInt64(var27*var27), 64)
        crccheck.updateBuffer(UInt64(var69*var69), 64)
        crccheck.updateBuffer(UInt64(var90*var90), 64)
        crccheck.updateBuffer(UInt64(var152*var152), 64)
        crccheck.updateBuffer(UInt64(var347*var347), 64)
        crccheck.updateBuffer(UInt64(var386*var386), 64)
        crccheck.updateBuffer(UInt64(var920*var920), 64)
        crccheck.updateBuffer(UInt64(var924*var924), 64)
        crccheck.updateBuffer(UInt64(var1194*var1194), 64)
        crccheck.updateBuffer(UInt64(var1677*var1677), 64)
        crccheck.updateBuffer(UInt64(var1778*var1778), 64)
        crccheck.updateBuffer(UInt64(var1813*var1813), 64)
        crccheck.updateBuffer(UInt64(var2221*var2221), 64)
        crccheck.updateBuffer(UInt64(var2269*var2269), 64)
        crccheck.updateBuffer(UInt64(var2280*var2280), 64)
        crccheck.updateBuffer(UInt64(var3161*var3161), 64)
        crccheck.updateBuffer(UInt64(var3169*var3169), 64)
        crccheck.updateBuffer(UInt64(var3292*var3292), 64)
        crccheck.updateBuffer(UInt64(var3346*var3346), 64)
        crccheck.updateBuffer(UInt64(var3684*var3684), 64)
        crccheck.updateBuffer(UInt64(var3997*var3997), 64)
        crccheck.updateBuffer(UInt64(var4462*var4462), 64)
        crccheck.updateBuffer(UInt64(var4494*var4494), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Enum111 {

}

extend Class315 {
    static func func690(param691 : Option<Unit>, namedParam692 ! : Range<UInt8>) : Bool { // block id: 693
        let var696 : Class315 = Class315();
        var696.var699
    }

}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_unexpected_declaration_in_scope
// ASSERT: scan parse_expected_left_brace
// ASSERT: scan parse_expected_expr_or_decl_in
// ASSERT: scan parse_expected_character


