/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output


var var152 : Interface50 = Class44()
let var167 : Range<Int64> = ((-12)&127..97&127:(-56)|1)
let var200 : Class44 = Class44()
var var234 : Class44 = Class44()
public let var262 : Range<UInt16> = (UInt16(200)&127..UInt16(UInt16(127))&127:(Int64(Int64(Int8(UInt8(85))))|1))
let var305 : UInt16 = UInt16(Int8(Int8(Int8(Int8(88)))))
public let var357 : (Rune, Range<UInt16>, Option<Range<UInt16>>, Array<Range<Int64>>) = ('x', (UInt16(249)&127..=UInt16(Int8(Int8(-44)))&127:(Int64(UInt32(Int32(91)))|1)), (Class44() as Range<UInt16>), [(114&127..=74&127:((-95)|1)), (110&127..(-90)&127:59|1), (Int64(UInt32(119))&127..=Int64(Int32(-94))&127:(56|1)), (Int64(Int8(72))&127..=(-120)&127:((-116)|1)), ((-31)&127..=(-34)&127:(Int64(UInt32(123))|1)), (14&127..84&127:68|1), (Int64(UInt16(216))&127..=35&127:(Int64(Int8(-6))|1)), ((-12)&127..(-27)&127:(-17)|1), (34&127..(-127)&127:7|1), ((-21)&127..=(-20)&127:64|1)])
var var404 : Int8 = Int8(-112)
public let var412 : ?Bool = Option<Bool>.None
public let var415 : Bool = (((), UInt8(UInt8(Int8(-57)))) is Interface49)
let var427 : Interface48 = Class44()
public var var437 : Range<UInt32> = (UInt32(Int8(UInt8(68)))&127..=UInt32(204)&127:(Int64(UInt16(62))|1))
var var448 : Range<UInt32> = (UInt32(UInt16(Int8(-10)))&127..=UInt32(Int32(-89))&127:((-76)|1))
public var var522 : Array<Option<(Unit, UInt8)>> = Array<Option<(Unit, UInt8)>>(10){ i => ('7' as (Unit, UInt8)) }
public var var581 : UInt8 = UInt8(Int8(UInt8(UInt8(27))))
let var740 : Unit = ()
var var797 : Unit = ()
var var909 : Interface49 = Class44()
var var989 : (Range<Int64>, Range<Int8>, Range<UInt8>, Int8, Range<Int16>) = (((-105)&127..Int64(UInt8(9))&127:(Int64(UInt32(Int8(80)))|1)), (Int8(UInt8(29))&127..Int8(Int8(46))&127:(93|1)), (UInt8(Int8(-108))&127..UInt8(Int8(Int8(-19)))&127:(54|1)), Int8(-61), (Int16(-106)&127..Int16(UInt16(61))&127:((-121)|1)))
public let var1020 : Int64 = Int64(UInt32(Int8(-113)))
let var1231 : Range<Int8> = (Int8(12)&127..Int8(82)&127:(-79)|1)
public let var1317 : Range<Int32> = (Int32(Int16(-91))&127..=Int32(88)&127:((-32)|1))
var var1354 : (Int32, (Unit, UInt8), Bool) = (Int32(UInt8(153)), ((), UInt8(12)), (Class44() is Int64))
let var1427 : Range<Int64> = ((-45)&127..15&127:(Int64(Int16(114))|1))
public var var1454 : Float64 = 8.0
let var1525 : Int32 = Int32(Int32(84))
public var var1634 : Int8 = Int8(Int8(28))
var var1663 : Range<Int16> = (Int16(47)&127..=Int16(-46)&127:(-5)|1)
public let var1722 : ?Int16 = ([(('4' as (Unit, UInt8)) as (Unit, UInt8)), Option<(Unit, UInt8)>.None, Option<(Unit, UInt8)>.None, Option<(Unit, UInt8)>.None, ((((-1)&127..=(-40)&127:((-42)|1)), (Int8(-61)&127..Int8(-44)&127:(-70)|1), (UInt8(177)&127..UInt8(85)&127:(-24)|1), Int8(-126), (Int16(-10)&127..Int16(-109)&127:(34|1))) as (Unit, UInt8)), ("MG]^+K6 \"`" as (Unit, UInt8)), ([(UInt32(108)&127..UInt32(48)&127:29|1), (UInt32(177)&127..UInt32(136)&127:((-118)|1)), (UInt32(91)&127..UInt32(39)&127:(-88)|1), (UInt32(119)&127..UInt32(253)&127:(-15)|1), (UInt32(94)&127..UInt32(232)&127:((-1)|1)), (UInt32(57)&127..=UInt32(103)&127:((-44)|1)), (UInt32(161)&127..=UInt32(204)&127:(-107)|1), (UInt32(115)&127..UInt32(249)&127:(29|1)), (UInt32(103)&127..=UInt32(200)&127:70|1), (UInt32(94)&127..=UInt32(180)&127:(27|1))] as (Unit, UInt8)), (UInt8(226) as (Unit, UInt8)), ([true, true, true, false, true, false, false, true, false, true] as (Unit, UInt8)), Option<(Unit, UInt8)>.None] as Int16)
var var1821 : Int32 = Int32(UInt16(163))
public let var1884 : Unit = ()
public let var2059 : ?Unit = Option<Unit>.None
var var2065 : Array<Option<Int16>> = Array<Option<Int16>>(10){ i => Option<Int16>.None }
let var2128 : (Range<Int8>, Range<UInt32>, Int8, Range<Int32>, Range<UInt32>, Int16) = ((Int8(71)&127..=Int8(-41)&127:(-110)|1), (UInt32(UInt32(UInt16(229)))&127..UInt32(23)&127:(Int64(Int32(UInt32(201)))|1)), Int8(42), (Int32(115)&127..Int32(66)&127:26|1), (UInt32(UInt16(63))&127..=UInt32(UInt16(Int8(-52)))&127:(87|1)), Int16(Int8(-15)))
public let var2224 : Array<Range<Int64>> = Array<Range<Int64>>(10){ i => (Int64(UInt8(126))&127..=(-26)&127:(100|1)) }
public let var2337 : Bool = (((71&127..(-76)&127:43|1), (Int8(UInt8(240))&127..Int8(-113)&127:(69|1)), (UInt8(204)&127..UInt8(103)&127:((-105)|1)), Int8(-71), (Int16(25)&127..=Int16(UInt8(156))&127:((-71)|1))) is Class44)
var var2431 : Float32 = Float32(Float32(Float32(104.0)))
let var2489 : ?Int16 = Option<Int16>.None
public let var2496 : Int16 = Int16(-71)
public var var2513 : Range<Int32> = (Int32(-41)&127..Int32(-123)&127:((-28)|1))
var var2573 : ((Int64, String, Float32, Unit, UInt16), Range<UInt32>, (Range<Int32>, Range<Int16>, Unit, Array<Bool>, UInt64, Range<UInt32>)) = ((107, """
.HYNU
Mt!jW
""", Float32(98.0), (), UInt16(45)), (UInt32(Int32(Int32(83)))&127..UInt32(UInt32(159))&127:(104|1)), ((Int32(-97)&127..Int32(2)&127:(-105)|1), (Int16(104)&127..Int16(69)&127:6|1), (), [true, false, false, false, true, false, false, true, true, true], UInt64(Int16(UInt16(252))), (UInt32(69)&127..UInt32(UInt8(147))&127:(Int64(Int32(-33))|1))))
var var2615 : (Int64, String, Float32, Unit, UInt16) = (113, "dFx6*J@D=c", Float32(-90.0), (), UInt16(UInt8(Int8(15))))
var var2694 : Float32 = Float32(-106.0)
let var2698 : UInt16 = UInt16(Int16(-116))
public let var2776 : UInt16 = UInt16(UInt16(166))
public var var2890 : ?Int32 = Option<Int32>.None
var var2912 : (UInt16, Bool) = (UInt16(43), (Class44() is (Range<UInt32>, Range<UInt64>) -> Interface48))
let var3061 : (Range<Int32>, Rune, Range<Int16>, Range<UInt8>, Bool) = ((Int32(Int16(UInt16(165)))&127..Int32(-106)&127:((-124)|1)), 'i', (Int16(Int8(47))&127..Int16(-97)&127:(Int64(Int8(Int8(-79)))|1)), (UInt8(180)&127..UInt8(159)&127:7|1), (((), (Int8(-80)&127..=Int8(2)&127:(117|1)), UInt32(152), Int32(-48), (Int8(78)&127..Int8(12)&127:(-46)|1), (Int32(-68)&127..=Int32(97)&127:(57|1))) is Range<UInt32>))
var var3094 : Bool = false
let var3144 : Range<UInt8> = (UInt8(28)&127..=UInt8(Int8(42))&127:(26|1))
var var3274 : ??Unit = (Int32(-48) as Option<Unit>)
public let var3312 : ?Int16 = ((UInt16(Int8(UInt8(143))), false) as Int16)
public var var3362 : Int16 = Int16(34)
var var3432 : Range<Int64> = ((-38)&127..=59&127:(Int64(UInt16(121))|1))
let var3549 : Rune = 'y'
let var3641 : UInt64 = UInt64(20)
public let var3678 : ?(Unit, UInt8) = ((1, """
vd}'N
;W%pA
""", Float32(29.0), (), UInt16(174)) as (Unit, UInt8))
var var3707 : Int16 = Int16(UInt8(UInt8(195)))
public var var3731 : UInt64 = UInt64(UInt32(1))
var var3750 : Range<UInt64> = (UInt64(248)&127..UInt64(Int64(UInt16(Int16(46))))&127:((-105)|1))
var var3761 : ?Unit = ([(UInt32(89)&127..UInt32(240)&127:(-42)|1), (UInt32(132)&127..=UInt32(8)&127:(-30)|1), (UInt32(139)&127..UInt32(30)&127:(-103)|1), (UInt32(239)&127..=UInt32(174)&127:(-118)|1), (UInt32(71)&127..=UInt32(195)&127:13|1), (UInt32(32)&127..UInt32(49)&127:(-15)|1), (UInt32(96)&127..=UInt32(47)&127:115|1), (UInt32(65)&127..UInt32(147)&127:88|1), (UInt32(141)&127..UInt32(129)&127:75|1), (UInt32(5)&127..=UInt32(184)&127:(-45)|1)] as Unit)
let var3819 : ?Int16 = (([(), (), (), (), (), (), (), (), (), ()] as Class44) as Int16)
public var var3902 : UInt8 = UInt8(210)
var var4039 : Int8 = Int8(62)
public let var4071 : ?Range<UInt16> = (Int8(-19) as Range<UInt16>)
public var var4195 : Unit = ()
let var4208 : Array<Range<UInt32>> = [(UInt32(52)&127..=UInt32(42)&127:79|1), (UInt32(245)&127..UInt32(UInt8(Int8(65)))&127:(Int64(UInt16(Int8(-47)))|1)), (UInt32(60)&127..=UInt32(99)&127:16|1), (UInt32(170)&127..UInt32(82)&127:(-100)|1), (UInt32(172)&127..=UInt32(225)&127:55|1), (UInt32(107)&127..=UInt32(153)&127:(-71)|1), (UInt32(UInt32(51))&127..UInt32(176)&127:(69|1)), (UInt32(Int32(33))&127..=UInt32(205)&127:(Int64(UInt16(UInt16(76)))|1)), (UInt32(250)&127..UInt32(165)&127:(-69)|1), (UInt32(Int16(86))&127..UInt32(UInt32(134))&127:((-56)|1))]
public let var4261 : UInt32 = UInt32(13)
public let var4292 : Bool = false
let var4316 : Float32 = Float32(Float32(Float32(Float32(Float32(51.0)))))
let var4603 : ?Range<Int32> = Option<Range<Int32>>.None
public let var4624 : UInt8 = UInt8(149)
var var4764 : (Unit, UInt8) = ((), UInt8(88))
public let var4773 : Bool = false
var var4837 : ?Range<Int8> = Option<Range<Int8>>.None
public let var4856 : Float64 = (-72.0)
public var var4934 : Int64 = 60
public var var4992 : (Range<Int32>, Range<Int16>, Unit, Array<Bool>, UInt64, Range<UInt32>) = ((Int32(UInt8(Int8(7)))&127..Int32(119)&127:(39|1)), (Int16(-3)&127..=Int16(-79)&127:(Int64(Int32(Int16(-114)))|1)), (), [false, true, true, true, false, false, true, false, false, false], UInt64(UInt64(UInt32(Int16(48)))), (UInt32(104)&127..=UInt32(153)&127:(-43)|1))
var var5109 : Range<UInt32> = (UInt32(68)&127..=UInt32(161)&127:(18|1))
let var5146 : Unit = ()
public let var5302 : Bool = false
public var var5353 : Int16 = Int16(UInt16(Int8(Int8(-115))))
public var var5520 : String = "}Y8'D_>a{a{-"
var var6011 : Int64 = (-7)
var var6453 : Option<Array<Range<Int64>>> = Option<Array<Range<Int64>>>.None
var var6460 : ??((Int64, String, Float32, Unit, UInt16), Range<UInt32>, (Range<Int32>, Range<Int16>, Unit, Array<Bool>, UInt64, Range<UInt32>)) = Option<Option<((Int64, String, Float32, Unit, UInt16), Range<UInt32>, (Range<Int32>, Range<Int16>, Unit, Array<Bool>, UInt64, Range<UInt32>))>>.None
let var6528 : Interface47 = Class44()
var var6685 : Bool = (((), (Int8(-93)&127..Int8(UInt8(53))&127:((-89)|1)), UInt32(UInt8(Int8(-64))), Int32(Int8(-8)), (Int8(72)&127..=Int8(-76)&127:75|1), (Int32(Int32(-50))&127..Int32(Int32(-41))&127:((-127)|1))) is Option<Array<Range<Int64>>>)
let var6723 : ?Rune = Option<Rune>.None
public var var6747 : Array<Bool> = [true, false, false, false, true, false, true, false, false, true]
let var6910 : ?Interface49 = (Option<Option<UInt16>>.None as Interface49)
public var var7079 : Bool = false
public let var7124 : ?Bool = (UInt8(42) as Bool)
public var var7202 : Bool = (UInt8(Int8(UInt8(65))) is Option<Option<Range<Int8>>>)
let var7209 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
let var7213 : Bool = true
public let var7258 : ?Bool = Option<Bool>.None
let var7268 : ?Bool = (Option<Option<Option<Range<Int8>>>>.None as Bool)
public interface Interface47 {
    static func func330(param331 : Range<UInt32>, namedParam332 ! : Range<UInt64>) : Interface48 { // block id: 333
        let var350 : Int8 = Int8(114);
        try { // block id: 336
            var var339 : Int8 = Int8(16);
            var339 * Int8(-17)
        } catch (e: Exception) { // block id: 342
            (105&127..71&127:(-42)|1);
            ();
            let var346 : Int8 = Int8(-73);
            var346
        } finally { // block id: 348
            var350
        } ^ if (((UInt32(28)&127..UInt32(138)&127:30|1) is Int64)) { // block id: 355
            var357;
            ();
            var404
        } else if ((var412 ?? var415)) { // block id: 422
            Int8(-33)
        } else { // block id: 424
            var404
        };
        var427
    }
;
    func func250() : UInt64 { // block id: 251
        var var272 : ?Range<UInt16> = Option<Range<UInt16>>.None;
        let var278 : Int64 = (-71);
        (('q', var262, var272, [var167, (var278&127..=(-36)&127:(var278|1)), var167, var167, ((-10)&127..var278&127:((-12)|1)), var167, (104&127..38&127:(-2)|1), (115&127..=12&127:(-64)|1), (68&127..(-68)&127:126|1), (1&127..34&127:(var278|1))])[2] ?? var262);
        let var6662 : (Range<UInt32>) -> UInt16 = func312;
        UInt16(123) < ((var6723 ?? 't')|>(func6664~>var6662));
        var var6756 : ??Range<UInt16> = ((Int8(98)&127..Int8(31)&127:(-3)|1) as Option<Range<UInt16>>);
        UInt64(match {
            case var4292 => 
            var6011--;
            var6011 ^= var1020;
            var305
            case var5302 => 
            UInt16(17)
            case _ => 
            Option<Option<Unit>>.Some(Option<Unit>.None);
            var2698
        }) >> ((if (match (var6747) {
            case _ : (Unit, UInt8) => 
                var6685 &&= true;
                var6756;
                var2694 >= Float32(-58.0)
            
            case _ => 
                var1821 |= Int32(-7);
                var4195;
                var5302
            
            case caseVar6772 => 
                var278 <= (-2)
            
            case _ => 
                var5146;
                if (var6685) { (var740, UInt8(251)) } else { var4764 } ;
                UInt32(221) < UInt32(103)
            
        }) { // block id: 6789
            var3641
        } else if ((Option<Bool>.Some(var6685) is Int16)) { // block id: 6794
            [(), (), var5146, var4195, (), (), var4195, var1884, (), ()];
            var272;
            var3641
        } else { // block id: 6808
            var5146;
            var3641 | UInt64(75)
        }) & 7)
    }
;
    static func func213(param214 : Float64, namedParam215 ! : Int64) : Bool { // block id: 216
        var var7058 : (Unit) -> Int32 = func229;
        var var7114 : (Int64) -> Unit = func7060;
        Int64(Int16(17))|>(var7114~>var7058);
        (Option<Bool>.Some(true) ?? if ((var7124 ?? var7079)) { // block id: 7128
            (((-42)&127..=(-110)&127:(-69)|1), (var1634&127..Int8(60)&127:((-59)|1)), var3144, var404, (Int16(-47)&127..Int16(-126)&127:(-21)|1));
            false
        } else { // block id: 7139
            var5302
        })
    }

}

public interface Interface50 <: Interface47 {
    func func155(param156 : Float64, param157 : Range<Int16>, namedParam158 ! : Range<Int16>, namedParam159 ! : Int64) : Unit { // block id: 160
        let var170 : Range<Int64> = (103&127..=(-111)&127:(-12)|1);
        var var191 : (Unit, UInt8) = ((), UInt8(Int8(Int8(-19))));
        if (([var167, var170, (48&127..=namedParam159&127:(namedParam159|1)), var167, var167, var170, (64&127..=82&127:123|1), ((-85)&127..(-119)&127:(-100)|1), var170, var170][6] is Float64)) { // block id: 184
            let var186 : Unit = ();
            var186;
            var191[0];
            var200.var203
        } else { // block id: 205
            let var207 : UInt64 = UInt64(UInt32(131));
            var207
        };
        var loopTimeVar7156 : Range<UInt64> = (UInt64(Int16(-5))&127..UInt64(117)&127:((-7)|1));
        for (i in loopTimeVar7156 where if (func213((-82.0), namedParam215 : 93)) { // block id: 7143
            var4773
        } else if ((-13) < 28) { // block id: 7148
            UInt32(33) >= var4261
        } else { // block id: 7152
            var740;
            true
        }) {

        }
    }

}

public interface Interface49 <: Interface47 & Interface50 {
    static func func330(param331 : Range<UInt32>, namedParam332 ! : Range<UInt64>) : Interface48 { // block id: 333
        let var350 : Int8 = Int8(114);
        try { // block id: 336
            var var339 : Int8 = Int8(16);
            var339 * Int8(-17)
        } catch (e: Exception) { // block id: 342
            (105&127..71&127:(-42)|1);
            ();
            let var346 : Int8 = Int8(-73);
            var346
        } finally { // block id: 348
            var350
        } ^ if (((UInt32(28)&127..UInt32(138)&127:30|1) is Int64)) { // block id: 355
            var357;
            ();
            var404
        } else if ((var412 ?? var415)) { // block id: 422
            Int8(-33)
        } else { // block id: 424
            var404
        };
        var427
    }
;
    func func250() : UInt64 { // block id: 251
        var var272 : ?Range<UInt16> = Option<Range<UInt16>>.None;
        let var278 : Int64 = (-71);
        (('q', var262, var272, [var167, (var278&127..=(-36)&127:(var278|1)), var167, var167, ((-10)&127..var278&127:((-12)|1)), var167, (104&127..38&127:(-2)|1), (115&127..=12&127:(-64)|1), (68&127..(-68)&127:126|1), (1&127..34&127:(var278|1))])[2] ?? var262);
        let var6662 : (Range<UInt32>) -> UInt16 = func312;
        UInt16(123) < ((var6723 ?? 't')|>(func6664~>var6662));
        var var6756 : ??Range<UInt16> = ((Int8(98)&127..Int8(31)&127:(-3)|1) as Option<Range<UInt16>>);
        UInt64(if (var4292) { // block id: 6730
            var6011--;
            var6011 ^= var1020;
            var305
        } else if (var5302) { // block id: 6738
            UInt16(17)
        } else { // block id: 6740
            Option<Option<Unit>>.Some(Option<Unit>.None);
            var2698
        }) >> ((if (match (var6747) {
            case _ : (Unit, UInt8) => 
                var6685 &&= true;
                var6756;
                var2694 >= Float32(-58.0)
            
            case _ => 
                var1821 |= Int32(-7);
                var4195;
                var5302
            
            case caseVar6772 => 
                var278 <= (-2)
            
            case _ => 
                var5146;
                if (var6685) { (var740, UInt8(251)) } else { var4764 } ;
                UInt32(221) < UInt32(103)
            
        }) { // block id: 6789
            var3641
        } else if ((Option<Bool>.Some(var6685) is Int16)) { // block id: 6794
            [(), (), var5146, var4195, (), (), var4195, var1884, (), ()];
            var272;
            var3641
        } else { // block id: 6808
            var5146;
            var3641 | UInt64(75)
        }) & 7)
    }
;
    static func func213(param214 : Float64, namedParam215 ! : Int64) : Bool { // block id: 216
        var var7058 : (Unit) -> Int32 = func229;
        var var7114 : (Int64) -> Unit = func7060;
        Int64(Int16(17))|>(var7114~>var7058);
        (Option<Bool>.Some(true) ?? match {
            case (var7124 ?? var7079) => 
            (((-42)&127..=(-110)&127:(-69)|1), (var1634&127..Int8(60)&127:((-59)|1)), var3144, var404, (Int16(-47)&127..Int16(-126)&127:(-21)|1));
            false
            case _ => 
            var5302
        })
    }

}

public interface Interface48 <: Interface47 & Interface49 {
    func func491(namedParam492 ! : Interface47, namedParam493 ! : Array<Range<Int64>>) : UInt16 { // block id: 494
        var var6463 : (Interface47) -> Option<Unit> = func501;
        let var6484 : (Int64) -> Int32 = func218;
        ((match (var152) {
            case _ : String => 
                var var6472 : Bool = (Option<Range<Int8>>.None is Enum1870);
                var6472 &&= var3094;
                let var6495 : Int64 = Int64(Int64(UInt32(UInt8(UInt8(106)))));
                if (false) { Class44(optionalParam3040 : (UInt16(141)&127..UInt16(246)&127:(48|1)), namedParam3049 : var6484) } else { Class44(namedParam2007 : UInt64(107), namedParam2008 : ((Int32(72)&127..=Int32(61)&127:13|1), 'Z', (var3707&127..Int16(-102)&127:(var6495|1)), (UInt8(14)&127..=var3902&127:(var6011|1)), false), namedParam2009 : [(99&127..=(-75)&127:(-41)|1), ((-124)&127..11&127:75|1), ((-41)&127..var6011&127:(var6495|1)), ((-89)&127..79&127:(var4934|1)), var167, (63&127..=(-59)&127:2|1), (15&127..(-80)&127:95|1), var1427, var167, ((-115)&127..=53&127:103|1)], namedParam2010 : Aggregate1154()) } 
            
            case _ => 
                var6528
            
            case caseVar6532 => 
                Class44()
            
            case caseVar6537 => 
                (var5353&127..var5353&127:(var4934|1));
                namedParam492
            
            case _ => 
                (Int8(121)&127..Int8(13)&127:(-123)|1);
                var4195;
                let var6553 : (Int64) -> Int32 = func218;
                if (true) { namedParam492 } else { Class44(namedParam3049 : var6553) } 
            
        }|>var6463) ?? ());
        Class44();
        var var6563 : Array<Bool> = [false, false, (Option<Range<Int8>>.Some((Int8(18)&127..Int8(55)&127:((-19)|1))) is (UInt64, Range<Int8>) -> Bool), (Option<Option<Unit>>.None is ((Range<Int64>, Range<Int8>, Range<UInt8>, Int8, Range<Int16>), Option<Unit>) -> Array<Unit>), true, (((Int8(-121)&127..=Int8(-44)&127:52|1), (UInt32(30)&127..=UInt32(147)&127:((-123)|1)), Int8(UInt8(48)), (Int32(-104)&127..=Int32(-90)&127:((-95)|1)), (UInt32(25)&127..UInt32(238)&127:(68|1)), Int16(69)) is (Int32, (UInt32) -> Bool, (Class44) -> Bool, UInt32) -> Interface50), ((((-95)&127..(-66)&127:((-124)|1)) as Range<Int32>) is ((Int64, String, Float32, Unit, UInt16), Range<UInt32>, (Range<Int32>, Range<Int16>, Unit, Array<Bool>, UInt64, Range<UInt32>))), (Float64((-73.0)) is UInt64), (Aggregate1154() is (Array<Bool>) -> Option<Unit>), true];
        var var6612 : Option<UInt16> = Option<UInt16>.None;
        try { // block id: 6558
            var4856 / Float64((Int32(79.0)) | 1);
            var6563;
            (Option<UInt16>.None ?? UInt16(45))
        } finally { // block id: 6609
            (var6612 ?? UInt16(54))
        }
    }
;
    static func func330(param331 : Range<UInt32>, namedParam332 ! : Range<UInt64>) : Interface48 { // block id: 333
        let var350 : Int8 = Int8(114);
        try { // block id: 336
            var var339 : Int8 = Int8(16);
            var339 * Int8(-17)
        } catch (e: Exception) { // block id: 342
            (105&127..71&127:(-42)|1);
            ();
            let var346 : Int8 = Int8(-73);
            var346
        } finally { // block id: 348
            var350
        } ^ if (((UInt32(28)&127..UInt32(138)&127:30|1) is Int64)) { // block id: 355
            var357;
            ();
            var404
        } else if ((var412 ?? var415)) { // block id: 422
            Int8(-33)
        } else { // block id: 424
            var404
        };
        var427
    }
;
    func func250() : UInt64 { // block id: 251
        var var272 : ?Range<UInt16> = Option<Range<UInt16>>.None;
        let var278 : Int64 = (-71);
        (('q', var262, var272, [var167, (var278&127..=(-36)&127:(var278|1)), var167, var167, ((-10)&127..var278&127:((-12)|1)), var167, (104&127..38&127:(-2)|1), (115&127..=12&127:(-64)|1), (68&127..(-68)&127:126|1), (1&127..34&127:(var278|1))])[2] ?? var262);
        let var6662 : (Range<UInt32>) -> UInt16 = func312;
        UInt16(123) < ((var6723 ?? 't')|>(func6664~>var6662));
        var var6756 : ??Range<UInt16> = ((Int8(98)&127..Int8(31)&127:(-3)|1) as Option<Range<UInt16>>);
        UInt64(match {
            case var4292 => 
            var6011--;
            var6011 ^= var1020;
            var305
            case var5302 => 
            UInt16(17)
            case _ => 
            Option<Option<Unit>>.Some(Option<Unit>.None);
            var2698
        }) >> ((match {
            case match (var6747) {
            case _ : (Unit, UInt8) => 
                var6685 &&= true;
                var6756;
                var2694 >= Float32(-58.0)
            
            case _ => 
                var1821 |= Int32(-7);
                var4195;
                var5302
            
            case caseVar6772 => 
                var278 <= (-2)
            
            case _ => 
                var5146;
                if (var6685) { (var740, UInt8(251)) } else { var4764 } ;
                UInt32(221) < UInt32(103)
            
        } => 
            var3641
            case (Option<Bool>.Some(var6685) is Int16) => 
            [(), (), var5146, var4195, (), (), var4195, var1884, (), ()];
            var272;
            var3641
            case _ => 
            var5146;
            var3641 | UInt64(75)
        }) & 7)
    }
;
    static func func213(param214 : Float64, namedParam215 ! : Int64) : Bool { // block id: 216
        var var7058 : (Unit) -> Int32 = func229;
        var var7114 : (Int64) -> Unit = func7060;
        Int64(Int16(17))|>(var7114~>var7058);
        (Option<Bool>.Some(true) ?? if ((var7124 ?? var7079)) { // block id: 7128
            (((-42)&127..=(-110)&127:(-69)|1), (var1634&127..Int8(60)&127:((-59)|1)), var3144, var404, (Int16(-47)&127..Int16(-126)&127:(-21)|1));
            false
        } else { // block id: 7139
            var5302
        })
    }

}

public open class Class44 <: Interface47 & Interface48 & Resource {
    public init() { // block id: 46

    }
;
    static let var53 : Unit = ();
    let var203 : UInt64 = UInt64(104);
    public static var var484 : Range<UInt64> = (UInt64(36)&127..=UInt64(250)&127:74|1);
    static var var1328 : Int16 = Int16(28);
    static var var1338 : UInt16 = UInt16(246);
    static var var1345 : Int32 = Int32(-16);
    public static var var1348 : (Unit, UInt8) = ((), UInt8(154));
    public static func func1307(param1308 : Range<Int64>) : Bool { // block id: 1309
        var var1324 : Rune = 'k';
        if ((var1317, var1324, (var1328&127..var1328&127:(74|1)), (UInt8(245)&127..UInt8(71)&127:(-48)|1), var415)[4]) { // block id: 1335
            var1338 *= var305;
            if (var415) { (var1345, var1348, true) } else { var1354 } 
        } else { // block id: 1363
            var1354
        }[2]
    }
;
    static var var2018 : UInt16 = UInt16(114);
    static var var2035 : ?Range<UInt16> = Option<Range<UInt16>>.None;
    public static var var2176 : Bool = false;
    static var var2183 : Int8 = Int8(123);
    public init(namedParam2007 ! : UInt64, namedParam2008 ! : (Range<Int32>, Rune, Range<Int16>, Range<UInt8>, Bool), namedParam2009 ! : Array<Range<Int64>>, namedParam2010 ! : Aggregate1154) { // block id: 2011
        var var2125 : Interface47 = Class44();
        match (match (try { // block id: 2015
                    var2018 <<= ((var1338) & 7);
                    [false, false, false, var415, var415, var415, var415, true, var415, var415]
                } finally { // block id: 2032
                    UInt32(38);
                    var2035;
                    [true, true, true, true, true, true, false, true, true, false]
                }) {
                case caseVar2040 => 
                    var var2045 : ?Unit = ((21&127..=123&127:36|1) as Unit);
                    if (var415) { var2045 } else { var2045 } 
                
                case _ : Enum1870 => 
                    var989;
                    var1328 %= ((var1328) | 1);
                    if (var415) { var2059 } else { Option<Unit>.None } 
                
                case _ => 
                    var2065;
                    var1884;
                    if (false) { Option<Unit>.Some(var740) } else { Option<Unit>.Some(var1884) } 
                
            }) {
            case _ : Aggregate1154 => 
                var2125;
                var2128
            
            case _ : UInt32 => 
                ();
                ((var404&127..=var1634&127:(28|1)), var448, Int8(119), (Int32(48)&127..=var1821&127:(var1020|1)), var437, Int16(-65))
            
            case caseVar2169 : Int32 => 
                var581 >>= ((var581) & 7);
                var2176 ||= true;
                ((Int8(116)&127..Int8(104)&127:(-26)|1), var448, var2183, (Int32(56)&127..Int32(-121)&127:58|1), var448, var1328)
            
            case _ => 
                var2128
            
        };
        try { // block id: 2194
            Float32(97.0);
            (var1328&127..=Int16(13)&127:(var1020|1))
        } catch (_) { // block id: 2200
            (var1328&127..var1328&127:((-7)|1))
        }|>func1930;
        var1345 /= ((Int32(57)) | 1)
    }
;
    static let var3161 : UInt32 = UInt32(180);
    public static var var3178 : UInt16 = UInt16(179);
    public init(optionalParam3040 ! : Range<UInt16> = (UInt16(155)&127..UInt16(Int16(-6))&127:(Int64(UInt64(Int16(Int16(61))))|1)), namedParam3049 ! : (Int64) -> Int32) { // block id: 3052
        var loopTimeVar3127 : Int64 = 0;
        do {
            loopTimeVar3127++;

        } while ((match (-Int32(-51)) {
            case _ => 
                var3061;
                var3094 &&= false;
                false
            
            case -124 | -66 | -81 => 
                var var3102 : Enum1870 = Enum1870.enumValue1873(Float32(Float32(27.0)), (Int32(78), ((), UInt8(UInt8(185))), false), func301);
                var3102;
                false
            
            case caseVar3117 : Interface49 => 
                var1884;
                var2337
            
            case _ => 
                var3094;
                var2337
            
        }) && loopTimeVar3127 < 100 ) ;
        (try { // block id: 3130
            ();
            var1821
        } catch (_) { // block id: 3133
            var var3140 : Rune = 'J';
            ((Int32(44)&127..=Int32(-121)&127:(var1020|1)), var3140, (Int16(23)&127..Int16(0)&127:5|1), var3144, false);
            Int32(106) | var1525
        }, if (try { // block id: 3156
            Class44();
            Class44();
            var3161 >= var3161
        } catch (e: Exception) { // block id: 3164
            ();
            var2337
        }) { (var740, UInt8(1)) } else { (if (var2337) { ((), var581) } else { var1348 } ) } , (var3178 is Enum1870))
    }
;
    private static var var5247 : Range<UInt32> = (UInt32(169)&127..=UInt32(49)&127:((-57)|1));
    public static var var5270 : Bool = true;
    private static var var5373 : Bool = true;
    func func1272() : Unit { // block id: 1273
        let var1276 : Aggregate1154 = Aggregate1154();
        let var5266 : Bool = false;
        let var5276 : Bool = (50.0 is (Option<(Unit, UInt8)>, (Class44) -> Bool, Option<Range<Int8>>, UInt64) -> (Range<Int8>, Range<UInt32>, Int8, Range<Int32>, Range<UInt32>, Int16));
        let var5317 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
        let var5330 : (Option<(Unit, UInt8)>, Float64, Array<Range<Int64>>) -> Unit = func614;
        var1276.func1279(try { // block id: 5234
            [var5109, (UInt32(205)&127..=UInt32(137)&127:(var4934|1)), (UInt32(181)&127..=UInt32(5)&127:17|1), var437, var448, var448, var5109, var5247, (UInt32(144)&127..UInt32(128)&127:(-7)|1), (UInt32(7)&127..UInt32(127)&127:113|1)]
        } catch (e: Exception) { // block id: 5254
            if (false) { (var2513, var1663, (), [var2337, var4292, var3094, var5266, var2337, var5270, var2176, true, var2176, var5276], UInt64(232), (UInt32(0)&127..var4261&127:(var4934|1))) } else { ((Int32(-82)&127..=Int32(8)&127:(var1020|1)), (var3362&127..var1328&127:(var4934|1)), (), [false, false, true, false, true, true, var5302, var5270, var5302, false], UInt64(133), (var4261&127..var4261&127:(var1020|1))) } ;
            if (true) { var4208 } else { [(UInt32(179)&127..=UInt32(164)&127:68|1), (UInt32(128)&127..=UInt32(198)&127:52|1), (UInt32(47)&127..=UInt32(196)&127:63|1), (UInt32(169)&127..UInt32(187)&127:(-25)|1), (UInt32(81)&127..UInt32(84)&127:53|1), (UInt32(163)&127..UInt32(84)&127:48|1), (UInt32(226)&127..UInt32(68)&127:(-21)|1), (UInt32(66)&127..=UInt32(175)&127:15|1), (UInt32(121)&127..=UInt32(116)&127:2|1), (UInt32(196)&127..=UInt32(43)&127:87|1)] } 
        }, var5317, var5330, match (var3362) {
            case caseVar5336 : Range<UInt64> => 
                var4934 /= ((var4934) | 1);
                var1722
            
            case 73 | 71 | 1 | 77 => 
                if (var2176) { var1722 } else { var2489 } 
            
            case _ => 
                var5353 = var5353;
                var740;
                Option<Int16>.Some(Int16(-53))
            
        });
        match (try { // block id: 5364
                var4934 <<= ((var1020) & 7);
                Option<Range<UInt16>>.Some(var262)
            } catch (_) { // block id: 5370
                let var5381 : Bool = (Option<Int32>.Some(Int32(63)) is UInt8);
                let var5391 : Array<Bool> = [(((59, "Te@jdkx_+w", Float32(-63.0), (), UInt16(219)), (UInt32(92)&127..=UInt32(52)&127:(-128)|1), ((Int32(13)&127..=Int32(32)&127:69|1), (Int16(5)&127..Int16(109)&127:(-21)|1), (), [false, true, false, false, true, true, false, true, false, false], UInt64(15), (UInt32(64)&127..=UInt32(175)&127:(-113)|1))) is Option<(Unit, UInt8)>), true, true, ((((-48)&127..(-55)&127:(-113)|1), (Int8(-24)&127..Int8(64)&127:((-37)|1)), (UInt8(55)&127..=UInt8(163)&127:(-39)|1), Int8(-46), (Int16(-77)&127..=Int16(-111)&127:64|1)) is (UInt64, Range<Int8>) -> Bool), ((UInt8(Int8(-75))&127..=UInt8(UInt8(22))&127:(116|1)) is (Range<UInt32>) -> Int64), true, true, true, (([false, true, false, true, true, false, false, true, false, false] as Rune) is Array<Option<(Unit, UInt8)>>), true];
                if (var5373) { [true, var2176, true, true, var5381, var5302, true, var2176, var3094, var5302] } else { var5391 } ;
                Option<Range<UInt16>>.Some((var2776&127..UInt16(48)&127:((-89)|1)))
            } finally { // block id: 5450
                Option<Range<UInt16>>.None
            }) {
            case caseVar5454 => 
                ();
                ()
            
            case caseVar5460 : Option<Int16> => 
                ();
                var740
            
            case _ => 
                var797;
                ()
            
        };
        var581 &= var581
    }
;
    public let var6876 : Bool = false;
    open func func237(param238 : Rune, namedParam239 ! : Range<UInt32>, namedParam240 ! : Interface49, namedParam241 ! : UInt16) : Bool { // block id: 242
        var loopTimeVar6824 : Int64 = 0;
        ((func250() as Unit) ?? do {
            loopTimeVar6824++;
            var1634 *= Int8(36);
            if (var5302) { var2035 } else { var2035 } 
        } while ((true) && loopTimeVar6824 < 100 ) );
        match (var427) {
            case _ => 
                var797;
                [true, true, true, false, false, true, false, true, true, true]
            
        };
        let var6843 : ??Range<Int8> = (((UInt32(UInt16(116))&127..UInt32(145)&127:(72|1)) as Option<((Int64, String, Float32, Unit, UInt16), Range<UInt32>, (Range<Int32>, Range<Int16>, Unit, Array<Bool>, UInt64, Range<UInt32>))>) as Option<Range<Int8>>);
        match (match (((-84)&127..(-83)&127:(-28)|1)) {
                case _ : (Range<Int32>, Range<Int16>, Unit, Array<Bool>, UInt64, Range<UInt32>) => 
                    var3731 |= var3731;
                    if (true) { var6843 } else { Option<Option<Range<Int8>>>.Some(Option<Range<Int8>>.None) } 
                
                case caseVar6855 => 
                    if (var5270) { Option<(Unit, UInt8)>.Some(((), UInt8(5))) } else { Option<(Unit, UInt8)>.None } ;
                    var740;
                    Option<Option<Range<Int8>>>.None
                
                case _ => 
                    var6843
                
            }) {
            case _ : Option<Option<UInt16>> => 
                Int32(-27) * var1525;
                var6876
            
            case _ => 
                var5520;
                var4856;
                var3902 > var581
            
        }
    }
;
    public static func func330(param331 : Range<UInt32>, namedParam332 ! : Range<UInt64>) : Interface48 { // block id: 333
        let var350 : Int8 = Int8(114);
        try { // block id: 336
            var var339 : Int8 = Int8(16);
            var339 * Int8(-17)
        } catch (e: Exception) { // block id: 342
            (105&127..71&127:(-42)|1);
            ();
            let var346 : Int8 = Int8(-73);
            var346
        } finally { // block id: 348
            var350
        } ^ if (((UInt32(28)&127..UInt32(138)&127:30|1) is Int64)) { // block id: 355
            var357;
            ();
            var404
        } else if ((var412 ?? var415)) { // block id: 422
            Int8(-33)
        } else { // block id: 424
            var404
        };
        var427
    }
;
    public func func250() : UInt64 { // block id: 251
        var var272 : ?Range<UInt16> = Option<Range<UInt16>>.None;
        let var278 : Int64 = (-71);
        (('q', var262, var272, [var167, (var278&127..=(-36)&127:(var278|1)), var167, var167, ((-10)&127..var278&127:((-12)|1)), var167, (104&127..38&127:(-2)|1), (115&127..=12&127:(-64)|1), (68&127..(-68)&127:126|1), (1&127..34&127:(var278|1))])[2] ?? var262);
        let var6662 : (Range<UInt32>) -> UInt16 = func312;
        UInt16(123) < ((var6723 ?? 't')|>(func6664~>var6662));
        var var6756 : ??Range<UInt16> = ((Int8(98)&127..Int8(31)&127:(-3)|1) as Option<Range<UInt16>>);
        UInt64(if (var4292) { // block id: 6730
            var6011--;
            var6011 ^= var1020;
            var305
        } else if (var5302) { // block id: 6738
            UInt16(17)
        } else { // block id: 6740
            Option<Option<Unit>>.Some(Option<Unit>.None);
            var2698
        }) >> ((if (match (var6747) {
            case _ : (Unit, UInt8) => 
                var6685 &&= true;
                var6756;
                var2694 >= Float32(-58.0)
            
            case _ => 
                var1821 |= Int32(-7);
                var4195;
                var5302
            
            case caseVar6772 => 
                var278 <= (-2)
            
            case _ => 
                var5146;
                if (var6685) { (var740, UInt8(251)) } else { var4764 } ;
                UInt32(221) < UInt32(103)
            
        }) { // block id: 6789
            var3641
        } else if ((Option<Bool>.Some(var6685) is Int16)) { // block id: 6794
            [(), (), var5146, var4195, (), (), var4195, var1884, (), ()];
            var272;
            var3641
        } else { // block id: 6808
            var5146;
            var3641 | UInt64(75)
        }) & 7)
    }
;
    public static func func213(param214 : Float64, namedParam215 ! : Int64) : Bool { // block id: 216
        var var7058 : (Unit) -> Int32 = func229;
        var var7114 : (Int64) -> Unit = func7060;
        Int64(Int16(17))|>(var7114~>var7058);
        (Option<Bool>.Some(true) ?? if ((var7124 ?? var7079)) { // block id: 7128
            (((-42)&127..=(-110)&127:(-69)|1), (var1634&127..Int8(60)&127:((-59)|1)), var3144, var404, (Int16(-47)&127..Int16(-126)&127:(-21)|1));
            false
        } else { // block id: 7139
            var5302
        })
    }

    public func isClosed(): Bool { return true }
    public func close(): Unit {}
}

public func func218(param219 : Int64) : Int32 { // block id: 220
    Class44.var53;
    var var225 : Int32 = Int32(UInt8(190));
    var225
}



func func301(param302 : Rune) : UInt16 { // block id: 303
    var305
}




func func614(namedParam615 ! : Option<(Unit, UInt8)>, namedParam616 ! : Float64, optionalParam617 ! : Array<Range<Int64>> = [(119&127..27&127:(-45)|1), ((-62)&127..83&127:(-97)|1), ((-80)&127..=117&127:(-72)|1), ((-90)&127..=112&127:(-110)|1), ((-35)&127..=(-90)&127:(-111)|1), (45&127..=(-11)&127:54|1), (13&127..=57&127:(-45)|1), (81&127..26&127:(-46)|1), ((-17)&127..43&127:122|1), (50&127..74&127:(-117)|1)]) : Unit { // block id: 619
    var var634 : Bool = true;
    var loopTimeVar637 : Range<UInt64> = (UInt64(139)&127..=UInt64(Int16(58))&127:((-94)|1));
    for (i in loopTimeVar637 where if (if (var415) { // block id: 624
        var415
    } else { // block id: 626
        UInt8(203);
        var415
    }) { // block id: 629
        ();
        var415
    } else { // block id: 632
        var634
    }) {

    }
}


func func816(param817 : (Int64) -> Int32) : Unit { // block id: 820

}

public func func822(param219 : Int64) : Int32 { // block id: 220
    Class44.var53;
    var var225 : Int32 = Int32(UInt8(190));
    var225
}


public struct Aggregate1154 {
    public init() { // block id: 1156

    }
;
    private static var var1199 : UInt64 = UInt64(107);
    static let var1223 : ?Unit = Option<Unit>.None;
    private static let var1265 : Aggregate1154 = Aggregate1154();
    var var1268 : Unit = ();
    public static func func1171(optionalParam1172 ! : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()], optionalParam1184 ! : Interface47 = Class44()) : Class44 { // block id: 1186
        var var1259 : ?Int16 = Option<Int16>.Some(Int16(UInt8(241)));
        if ((var412 ?? match {
            case var415 => 
            if (false) { (UInt64(165)&127..=UInt64(44)&127:47|1) } else { (UInt64(108)&127..=var1199&127:(var1020|1)) } ;
            false
            case true => 
            var740;
            var740;
            false
            case _ => 
            var404 >= var404
        })) { Option<Int16>.Some(Int16(var404)) } else { match (try { // block id: 1217
                (UInt8(6)&127..=UInt8(64)&127:(var1020|1));
                var1223
            } finally { // block id: 1225
                var1223
            }) {
            case _ => 
                Option<Range<Int8>>.Some(var1231);
                let var1235 : ?(Unit, UInt8) = Option<(Unit, UInt8)>.Some(((), UInt8(236)));
                [var1235, var1235, Option<(Unit, UInt8)>.Some(((), var581)), Option<(Unit, UInt8)>.None, var1235, Option<(Unit, UInt8)>.Some(((), var581)), Option<(Unit, UInt8)>.None, Option<(Unit, UInt8)>.Some((var740, UInt8(82))), Option<(Unit, UInt8)>.None, var1235];
                var1259
            
        } } ;
        var1265.var1268;
        Class44()
    }
;
    static func func1504(optionalParam1505 ! : Interface50 = Class44(), optionalParam1507 ! : Class44 = Class44()) : Unit { // block id: 1509

    }
;
    private var var5159 : ??Range<UInt16> = Option<Option<Range<UInt16>>>.None;
    func func1279(param1280 : Array<Range<UInt32>>, param1281 : Array<Unit>, param1282 : (Option<(Unit, UInt8)>, Float64, Array<Range<Int64>>) -> Unit, param1287 : Option<Int16>) : Unit { // block id: 1288
        var var1291 : Bool = true;
        let var1371 : (Int64, String, Float32, Unit, UInt16) = (Int64(UInt16(Int16(71))), """
y\"g=O
a8.~\\
""", Float32(91.0), (), UInt16(179));
        var var1445 : Range<Int64> = (66&127..=(-67)&127:98|1);
        if (var1291) { // block id: 1293
            var var1300 : Int32 = Int32(-67);
            match (var412) {
                case _ => 
                    var1300 *= Int32(23);
                    (-64.0)
                
            }
        } else if (Class44.func1307(var167)) { // block id: 1367
            var1371[3];
            let var1383 : ?Range<UInt16> = (UInt16(Int16(Int8(UInt8(3)))) as Range<UInt16>);
            match (var1383) {
                case caseVar1391 => 
                    var var1394 : Range<Int16> = (Int16(Int16(-118))&127..Int16(Int8(74))&127:(126|1));
                    var1394;
                    var581--;
                    var1291 ||= var1291
                
                case caseVar1408 => 
                    var797;
                    Int8(101) <= Int8(70);
                    ()
                
                case _ => 
                    var1268
                
                case _ => 
                    [(13&127..=var1020&127:(var1020|1)), var1427, ((-55)&127..=32&127:(62|1)), (73&127..=(-83)&127:(-36)|1), (5&127..=48&127:(-30)|1), (34&127..=77&127:(-59)|1), (23&127..var1020&127:((-63)|1)), var1445, (37&127..=1&127:((-116)|1)), var1445];
                    var var1457 : Float64 = (-99.0);
                    var1454 *= var1457;
                    ()
                
            };
            Float64((-15.0))
        } else { // block id: 1462
            -(-53.0)
        };
        func1171(optionalParam1172 : (try { // block id: 5095
            var3731++;
            [(UInt32(72)&127..=UInt32(118)&127:(-2)|1), (UInt32(21)&127..=UInt32(156)&127:48|1), (UInt32(129)&127..=UInt32(192)&127:(-83)|1), (UInt32(242)&127..UInt32(116)&127:32|1), (UInt32(180)&127..=UInt32(50)&127:37|1), (UInt32(179)&127..=UInt32(176)&127:(-42)|1), (UInt32(53)&127..UInt32(233)&127:105|1), (UInt32(5)&127..=UInt32(31)&127:34|1), (UInt32(95)&127..UInt32(197)&127:(-52)|1), (UInt32(205)&127..UInt32(75)&127:16|1)]
        } catch (e: Exception) { // block id: 5099
            [(UInt32(197)&127..=UInt32(133)&127:(30|1)), var448, (UInt32(119)&127..UInt32(141)&127:(-107)|1), (UInt32(32)&127..=UInt32(109)&127:8|1), var5109, (UInt32(126)&127..UInt32(148)&127:(-22)|1), (UInt32(34)&127..=var4261&127:(40|1)), (var4261&127..=var4261&127:((-76)|1)), var5109, var5109]
        }|>func1467));
        var var5164 : Int32 = Int32(13);
        var loopTimeVar5225 : Range<UInt64> = (UInt64(UInt8(219))&127..=UInt64(UInt32(UInt32(117)))&127:((-42)|1));
        for (i in loopTimeVar5225 where if (match (((Int32(9)&127..Int32(52)&127:(var1020|1)), 'd', (Int16(60)&127..Int16(-74)&127:7|1), (var4624&127..=var4624&127:(122|1)), var4292)) {
            case caseVar5142 => 
                ();
                var5146;
                Int16(33) != Int16(91)
            
            case caseVar5153 => 
                if (var2337) { Option<Option<Range<UInt16>>>.None } else { var5159 } ;
                (var1821&127..var5164&127:(var1020|1));
                var3094
            
            case (caseVar5170 : Option<Unit>,_,_ : UInt64,_ : Option<Option<Option<Unit>>>,caseVar5171) => 
                var404 > var1634
            
            case (_ : (Range<Int8>, Range<UInt32>, Int8, Range<Int32>, Range<UInt32>, Int16),caseVar5178 : (Range<Int32>, Range<Int16>, Unit, Array<Bool>, UInt64, Range<UInt32>),_ : Array<Unit>,caseVar5179,_) => 
                var2224;
                var1268;
                var3094
            
            case _ => 
                var2912;
                var4039 >= Int8(7)
            
        }) { // block id: 5190
            false
        } else if (try { // block id: 5193
            ###"O#=NGhG!xy"###;
            var740;
            true
        } finally { // block id: 5197
            var2694;
            false
        }) { // block id: 5200
            true
        } else { // block id: 5202
            var4773 || var415
        }) {
            var2890;
            try (resource = Class44()) { // block id: 5209
                var1371;
                var1268
            } catch (_) { // block id: 5212
                false;
                var4764;
                var3362 |= Int16(87)
            } finally { // block id: 5218
                let var5220 : Unit = ();
                var5220;
                var3902 /= ((UInt8(226)) | 1)
            }
        }
    }
;
    private static var var5580 : Bool = true;
    public static func func1165(param1166 : Interface48, namedParam1167 ! : Option<Range<Int8>>) : Bool { // block id: 1168
        func1171().func1272();
        if (match (try { // block id: 5474
                var152;
                [true, false, false, true, true, true, false, false, false, true];
                Int32(56)
            } finally { // block id: 5478
                var4934 *= (-32);
                [(), (), (), (), (), (), (), (), (), ()];
                var1821 / ((Int32(95)) | 1)
            }) {
            case _ : Int8 => 
                if (var4773) { var909 } else { Class44() } ;
                var415
            
            case _ : Option<((Int64, String, Float32, Unit, UInt16), Range<UInt32>, (Range<Int32>, Range<Int16>, Unit, Array<Bool>, UInt64, Range<UInt32>))> => 
                var3094
            
            case 10 => 
                var4195;
                ();
                false
            
            case _ : Rune => 
                var404;
                ();
                var4773
            
            case _ => 
                var740;
                ();
                false
            
        }) { // block id: 5515
            try { // block id: 5517
                var797;
                var5520
            } finally { // block id: 5522
                var1884;
                ###"(a{K,|}>hso"###
            }
        } else { // block id: 5525
            let var5550 : ?Int16 = (Class44() as Int16);
            var loopTimeVar5566 : Int64 = 0;
            do {
                loopTimeVar5566++;
                if (var4773) { [Option<Int16>.Some(var3707), var3819, Option<Int16>.None, var2489, Option<Int16>.Some(var3707), var3819, Option<Int16>.Some(var5353), Option<Int16>.None, var2489, Option<Int16>.Some(var3707)] } else { [var3312, Option<Int16>.None, var5550, var5550, Option<Int16>.Some(var5353), Option<Int16>.Some(Int16(30)), Option<Int16>.Some(var2496), Option<Int16>.Some(Int16(-61)), var2489, var3312] } ;
                var797
            } while ((var2337) && loopTimeVar5566 < 100 ) ;
            if (var4292) { // block id: 5569
                [var3094, true, true, true, false, var4773, var3094, false, var5580, false];
                if (false) { "QGK7?SDd[P" } else { var5520 } 
            } else if (var5580) { // block id: 5588
                if (var4292) { "=:RX;w}~x/" } else { "_vhH@1#@l<" } 
            } else { // block id: 5593
                if (var4292) { "PNP@Xpo:]=" } else { """
KRq03
iS1$+
""" } 
            }
        };
        var4773
    }
;
    static let var5612 : UInt32 = UInt32(118);
    public static func func1159() : UInt16 { // block id: 1160
        var loopTimeVar5605 : Int64 = 0;
        do {
            loopTimeVar5605++;
            var3731
        } while ((Aggregate1154.func1165(var427, namedParam1167 : Option<Range<Int8>>.Some((Int8(69)&127..=Int8(29)&127:(-14)|1)))) && loopTimeVar5605 < 100 ) ;
        if (match (match ((var4261&127..var5612&127:((-20)|1))) {
                case _ => 
                    Option<Option<Range<Int8>>>.None;
                    if (false) { var1231 } else { var1231 } ;
                    Class44()
                
            }) {
            case _ => 
                var797;
                var5146;
                UInt32(186) >= UInt32(114)
            
            case caseVar5633 : Option<Rune> => 
                let var5636 : Enum1870 = Enum1870.defaultValue;
                var5636;
                Class44();
                false
            
            case _ => 
                ();
                var1231;
                true
            
        }) { // block id: 5645
            (var2615, var437, var4992);
            var3731 <<= ((var1199) & 7)
        } else if (true) { // block id: 5654
            (var2059 ?? var740);
            ();
            var4195
        };
        (Option<UInt16>.None ?? var305)
    }

}

func func1498(param1499 : UInt32) : Bool { // block id: 1500
    Aggregate1154.func1504();
    var loopTimeVar1544 : Int64 = 0;
    do {
        loopTimeVar1544++;
        var loopTimeVar1542 : Int64 = 0;
        while ((true) && loopTimeVar1542 < 100 ) {
            loopTimeVar1542++;
            if (false) { (var1231, var437, var404, (Int32(77)&127..var1525&127:(var1020|1)), (UInt32(170)&127..=UInt32(141)&127:(0|1)), Int16(-75)) } else { ((Int8(74)&127..=Int8(-121)&127:(-72)|1), (UInt32(143)&127..=UInt32(66)&127:(-80)|1), Int8(-10), (Int32(124)&127..=Int32(-88)&127:68|1), var448, Int16(27)) } 
        }
    } while ((var415) && loopTimeVar1544 < 100 ) ;
    false
}

func func1558(param1559 : Class44) : Bool { // block id: 1560
    try { // block id: 1563
        Int8(-57);
        ();
        var var1570 : Range<Int16> = (Int16(33)&127..Int16(57)&127:(-107)|1);
        ((Int32(43)&127..Int32(-52)&127:117|1), '2', var1570, (UInt8(232)&127..=UInt8(50)&127:((-118)|1)), var415)
    } finally { // block id: 1577
        Option<Int16>.None;
        let var1580 : (Range<Int32>, Rune, Range<Int16>, Range<UInt8>, Bool) = ((Int32(-108)&127..Int32(101)&127:119|1), 'R', (Int16(99)&127..=Int16(-49)&127:114|1), (UInt8(Int8(Int8(-48)))&127..=UInt8(Int8(113))&127:((-44)|1)), (Aggregate1154() is Option<Range<UInt16>>));
        var1580
    }[4]
}


public enum Enum1870 {
    defaultValue |
    enumValue1873(Float32, (Int32, (Unit, UInt8), Bool), (Rune) -> UInt16) |
    enumValue2393(Option<Range<Int8>>, (Rune) -> UInt16, Array<Option<Int16>>)
}
public func func1930(param1931 : Range<Int16>) : Unit { // block id: 1932
    var var1935 : (Int64) -> Int32 = func218;
    func816(var1935);
    let var1941 : Array<Bool> = [false, false, true, true, false, true, true, true, true, true];
    var loopTimeVar1984 : Int64 = 0;
    do {
        loopTimeVar1984++;
        var loopTimeVar1981 : Int64 = 0;
        do {
            loopTimeVar1981++;
            var var1966 : Range<Int64> = ((-87)&127..=(-89)&127:(-76)|1);
            [((-112)&127..1&127:55|1), var167, (119&127..(-16)&127:(-3)|1), var1966, ((-97)&127..(-24)&127:(-47)|1), (var1020&127..=95&127:(41|1)), ((-23)&127..82&127:(-95)|1), (80&127..(-66)&127:(-35)|1), var1427, var1427];
            var1020 < (-112)
        } while ((true) && loopTimeVar1981 < 100 ) ;
        ()
    } while ((try { // block id: 1939
        var1941;
        ();
        var415
    } finally { // block id: 1945
        ();
        var var1951 : Int16 = Int16(-68);
        if (var415) { Option<Int16>.Some(var1951) } else { Option<Int16>.None } ;
        (-39) > var1020
    }) && loopTimeVar1984 < 100 ) 
}

func func2324(param2325 : Array<Bool>) : Option<Unit> { // block id: 2326
    Option<Unit>.None
}

public func func2317(param2318 : (Int64) -> Int32) : Unit { // block id: 2321
    var var2332 : Array<Bool> = [false, true, false, false, false, true, true, false, true, false];
    var loopTimeVar2359 : Range<UInt64> = (UInt64(199)&127..=UInt64(UInt64(203))&127:(Int64(UInt16(Int16(UInt8(147))))|1));
    ((if (true) { var2332 } else { [false, true, true, true, true, true, false, false, true, true] } |>func2324) ?? for (i in loopTimeVar2359 where var2337) {
        var797;
        var1722
    })
}

func func2375(param219 : Int64) : Int32 { // block id: 220
    Class44.var53;
    var var225 : Int32 = Int32(UInt8(190));
    var225
}


public func func2303(optionalParam2304 ! : Option<Bool> = Option<Bool>.Some(true), namedParam2307 ! : Interface48, optionalParam2308 ! : Interface47 = Class44(), namedParam2310 ! : Int16) : ((Int64, String, Float32, Unit, UInt16), Range<UInt32>, (Range<Int32>, Range<Int16>, Unit, Array<Bool>, UInt64, Range<UInt32>)) { // block id: 2311
    var var2369 : ((Int64) -> Int32) -> Unit = { lambdaParameter2372 : (Int64) -> Int32 => () };
    var var2378 : (Int64) -> Int32 = func2375;
    try (resource = Class44()) { // block id: 2313

    } catch (_) { // block id: 2314

    } finally { // block id: 2315
        var2378|>var2369;
        let var2384 : UInt32 = UInt32(249);
        (var740, (Int8(123)&127..=Int8(108)&127:(-50)|1), var2384, var1525, (Int8(-108)&127..Int8(9)&127:14|1), var1317);
        if (true) { // block id: 2391
            let var2401 : (Rune) -> UInt16 = func301;
            Enum1870.enumValue2393(Option<Range<Int8>>.None, var2401, var2065);
            var797
        } else if (true) { // block id: 2406
            ();
            ()
        }
    };
    var var2425 : Unit = ();
    var var2477 : UInt64 = UInt64(186);
    var var2532 : (UInt16, Bool) = (UInt16(UInt16(33)), ([((-125)&127..=(-40)&127:((-106)|1)), (11&127..=70&127:(46|1)), ((-109)&127..=(-47)&127:47|1), (120&127..47&127:(-66)|1), (105&127..=(-56)&127:(-8)|1), ((-88)&127..(-42)&127:(61|1)), ((-105)&127..=2&127:(-12)|1), (49&127..=(-46)&127:(-28)|1), (1&127..=93&127:(42|1)), (47&127..75&127:81|1)] is (Class44) -> Bool));
    try (resource = Class44()) { // block id: 2410
        var loopTimeVar2415 : Int64 = 0;
        do {
            loopTimeVar2415++;

        } while ((var415) && loopTimeVar2415 < 100 ) ;
        var loopTimeVar2420 : Int64 = 0;
        while ((false) && loopTimeVar2420 < 100 ) {
            loopTimeVar2420++;

        };
        var loopTimeVar2438 : Int64 = 0;
        while ((false) && loopTimeVar2438 < 100 ) {
            loopTimeVar2438++;
            var2425;
            (var1020, """
\"U=0e
./Ca{+
""", var2431, (), var305)
        }
    } catch (e: Exception) { // block id: 2439
        let var2481 : String = " TK@V%XC:A";
        try { // block id: 2441
            var305 - UInt16(49);
            var var2453 : ?Int16 = ((UInt16(214), (((Int32(-20)&127..=Int32(-86)&127:((-128)|1)), 'S', (Int16(-60)&127..Int16(-77)&127:(-92)|1), (UInt8(137)&127..UInt8(85)&127:(-10)|1), false) is Array<Bool>)) as Int16);
            if (var415) { [var1722, Option<Int16>.Some(namedParam2310), var1722, var2453, var2453, var2453, var1722, Option<Int16>.None, var2453, var1722] } else { var2065 } 
        } finally { // block id: 2474
            var2477 ^= UInt64(36);
            var2481;
            [Option<Int16>.Some(namedParam2310), Option<Int16>.None, var1722, var2489, Option<Int16>.Some(namedParam2310), var1722, Option<Int16>.Some(var2496), var1722, var1722, Option<Int16>.Some(namedParam2310)]
        };
        Class44();
        var loopTimeVar2518 : Range<UInt64> = (UInt64(UInt16(Int8(-49)))&127..UInt64(UInt16(Int16(-119)))&127:(Int64(UInt8(UInt8(232)))|1));
        for (i in loopTimeVar2518 where var415) {
            if (var415) { (Int32(117)&127..=var1821&127:(var1020|1)) } else { var2513 } 
        }
    } finally { // block id: 2529
        match (var2532) {
            case _ => 
                var740;
                var1884
            
        }
    };
    var var2607 : Int64 = Int64(Int16(UInt16(23)));
    var var2651 : UInt32 = UInt32(170);
    var var2792 : UInt32 = UInt32(5);
    var var2796 : (Range<Int32>, Range<Int16>, Unit, Array<Bool>, UInt64, Range<UInt32>) = ((Int32(-64)&127..=Int32(-24)&127:(Int64(UInt8(UInt8(174)))|1)), (Int16(Int16(-87))&127..=Int16(42)&127:(Int64(UInt32(119))|1)), (), [false, true, false, false, false, true, true, ((Int8(24)&127..Int8(-119)&127:((-108)|1)) is Range<Int64>), false, ((-13.0) is Int32)], UInt64(252), (UInt32(233)&127..UInt32(99)&127:111|1));
    (try { // block id: 2570
        Option<((Int64, String, Float32, Unit, UInt16), Range<UInt32>, (Range<Int32>, Range<Int16>, Unit, Array<Bool>, UInt64, Range<UInt32>))>.Some(var2573)
    } finally { // block id: 2602
        Option<((Int64, String, Float32, Unit, UInt16), Range<UInt32>, (Range<Int32>, Range<Int16>, Unit, Array<Bool>, UInt64, Range<UInt32>))>.Some(var2573);
        var2607 <<= ((var1020) & 7);
        var var2626 : UInt32 = UInt32(UInt8(73));
        Option<((Int64, String, Float32, Unit, UInt16), Range<UInt32>, (Range<Int32>, Range<Int16>, Unit, Array<Bool>, UInt64, Range<UInt32>))>.Some((var2615, (var2626&127..var2626&127:(var2607|1)), ((Int32(-96)&127..Int32(-21)&127:22|1), (Int16(-21)&127..Int16(53)&127:(-27)|1), var740, [false, true, true, true, true, false, true, true, false, false], UInt64(182), (UInt32(240)&127..UInt32(224)&127:(var1020|1)))))
    } ?? match (try { // block id: 2643
            if (true) { var2059 } else { var2059 } 
        } finally { // block id: 2648
            var2651 += UInt32(119);
            Option<Unit>.None
        }) {
        case caseVar2657 : Int8 => 
            var2477 = UInt64(162);
            if (true) { (var2615, (UInt32(10)&127..UInt32(117)&127:122|1), (var1317, var1663, var740, [true, true, true, false, true, true, true, false, true, true], var2477, var448)) } else { var2573 } 
        
        case _ => 
            if (var415) { (var1821&127..var1525&127:(var1020|1)) } else { var2513 } ;
            let var2691 : String = "\"?m0|/^<ou";
            let var2706 : (Range<Int32>, Range<Int16>, Unit, Array<Bool>, UInt64, Range<UInt32>) = ((Int32(-96)&127..Int32(69)&127:106|1), (Int16(87)&127..=Int16(15)&127:(-61)|1), (), [(Class44() is (Range<Int64>, Range<Int8>, Range<UInt8>, Int8, Range<Int16>)), ([(UInt32(94)&127..UInt32(147)&127:80|1), (UInt32(212)&127..UInt32(121)&127:42|1), (UInt32(77)&127..UInt32(121)&127:(-7)|1), (UInt32(122)&127..UInt32(182)&127:(-101)|1), (UInt32(88)&127..=UInt32(250)&127:(-104)|1), (UInt32(162)&127..=UInt32(238)&127:(-87)|1), (UInt32(41)&127..UInt32(139)&127:91|1), (UInt32(47)&127..=UInt32(79)&127:39|1), (UInt32(31)&127..=UInt32(34)&127:68|1), (UInt32(113)&127..UInt32(72)&127:102|1)] is (Rune, Range<UInt16>, Option<Range<UInt16>>, Array<Range<Int64>>)), ((Option<Bool>.None as Range<Int8>) is Rune), (UInt32(Int32(-15)) is Int8), (Float64((-61.0)) is Array<Bool>), (((37, "C.${var2691} ${var2691}K!\\9w\\.", Float32(32.0), (), UInt16(45)), (UInt32(208)&127..=UInt32(6)&127:101|1), ((Int32(88)&127..Int32(69)&127:88|1), (Int16(18)&127..Int16(-59)&127:((-17)|1)), (), [true, false, false, false, true, true, true, false, false, true], UInt64(205), (UInt32(247)&127..=UInt32(238)&127:(-67)|1))) is Float32), (((103&127..=64&127:10|1) as (Unit, UInt8)) is (Range<Int32>, Range<Int16>, Unit, Array<Bool>, UInt64, Range<UInt32>)), (Int32(24) is Option<Option<Unit>>), ([(), (), (), (), (), (), (), (), (), ()] is UInt8), false], UInt64(140), (UInt32(140)&127..UInt32(58)&127:(Int64(Int32(Int8(-62)))|1)));
            if (true) { (((-123), var2691, var2694, var797, var2698), (var2651&127..var2651&127:(126|1)), var2706) } else { ((var2607, var2691, Float32(119.0), (), var2776), var448, var2706) } 
        
        case caseVar2783 : Bool => 
            if (false) { (var2615, (UInt32(97)&127..var2792&127:(var2607|1)), var2796) } else { var2573 } 
        
        case _ => 
            Class44();
            var2796;
            var2573
        
    })
}


public func func2289(optionalParam2290 ! : String = "m<#prWX1.<") : Unit { // block id: 2292
    var1663;
    let var2862 : Int16 = Int16(-20);
    func func2296(namedParam2297 ! : Int32, namedParam2298 ! : String) : (Int64, String, Float32, Unit, UInt16) { // block id: 2299
        let var2849 : UInt64 = UInt64(118);
        let var2858 : ?Range<Int8> = Option<Range<Int8>>.None;
        func2303(optionalParam2304 : var412, namedParam2307 : if (false) { var427 } else { Class44() } , optionalParam2308 : Class44(), namedParam2310 : match (var1427) {
            case _ => 
                var740;
                var2849 / ((UInt64(1)) | 1);
                Int16(113)
            
            case caseVar2855 => 
                var2858;
                ();
                var2862
            
            case caseVar2866 => 
                var2862
            
            case caseVar2871 => 
                ();
                Option<Range<UInt16>>.Some((UInt16(221)&127..UInt16(241)&127:116|1));
                var2862
            
            case _ => 
                var1821 ^= Int32(56);
                Int16(-106)
            
        })[0]
    }
;
    func2296(namedParam2297 : (var2890 ?? Int32(66)), namedParam2298 : "H_KOpog@@h")[3]
}

func func2279(param2280 : (Range<Int32>, Rune, Range<Int16>, Range<UInt8>, Bool)) : Int16 { // block id: 2281
    let var2925 : ?((Int64, String, Float32, Unit, UInt16), Range<UInt32>, (Range<Int32>, Range<Int16>, Unit, Array<Bool>, UInt64, Range<UInt32>)) = Option<((Int64, String, Float32, Unit, UInt16), Range<UInt32>, (Range<Int32>, Range<Int16>, Unit, Array<Bool>, UInt64, Range<UInt32>))>.Some(((Int64(Int8(-5)), ###"C7k'#.7ekV"###, Float32(Float32(-18.0)), (), UInt16(UInt16(85))), (UInt32(Int16(61))&127..=UInt32(Int8(47))&127:(Int64(40)|1)), ((Int32(-101)&127..=Int32(-19)&127:((-121)|1)), (Int16(88)&127..Int16(37)&127:(-86)|1), (), [true, true, true, false, false, false, false, true, false, false], UInt64(Int32(46)), (UInt32(142)&127..=UInt32(195)&127:(-121)|1))));
    let var3189 : Int16 = Int16(17);
    let var3206 : (Unit, Range<Int8>, UInt32, Int32, Range<Int8>, Range<Int32>) = ((), (Int8(-108)&127..=Int8(UInt8(UInt8(74)))&127:(93|1)), UInt32(49), Int32(UInt16(76)), (Int8(14)&127..Int8(-111)&127:60|1), (Int32(UInt16(168))&127..Int32(-123)&127:(Int64(Int8(-20))|1)));
    func func2283(param2284 : Option<Option<Unit>>, optionalParam2285 ! : UInt32 = UInt32(224)) : Int16 { // block id: 2287
        func2289();
        let var2904 : (UInt16, Bool) = (UInt16(UInt8(Int8(UInt8(5)))), false);
        var loopTimeVar3024 : Int64 = 0;
        do {
            loopTimeVar3024++;
            var loopTimeVar2981 : Int64 = 0;
            while ((var415) && loopTimeVar2981 < 100 ) {
                loopTimeVar2981++;
                ()
            };
            match (((Int32(99)&127..=Int32(-125)&127:(-119)|1), (Int16(95)&127..Int16(-92)&127:63|1), (), [false, false, false, false, false, true, false, true, false, true], UInt64(154), var448)) {
                case (_,_ : Option<Unit>,caseVar2992,_,_ : Int64,_ : (Range<Int8>, Range<UInt32>, Int8, Range<Int32>, Range<UInt32>, Int16)) => 
                    var415;
                    (-54.0) * (-106.0)
                
                case caseVar3000 => 
                    (-79.0)
                
                case _ => 
                    if (var415) { var1354 } else { (var1525, ((), var581), false) } ;
                    var1454 ** Float64(Int32(var1454) & 3)
                
                case _ => 
                    (-97.0) * var1454
                
            }
        } while ((try { // block id: 2898
            false
        } catch (e: Exception) { // block id: 2900
            if (false) { var2904 } else { var2912 } ;
            var2694 >= var2431
        } finally { // block id: 2920
            var2694 += Float32(90.0);
            var2925;
            true || var2337
        } && match (Option<Range<Int8>>.None) {
            case _ => 
                Option<(Unit, UInt8)>.None;
                ();
                var415
            
        }) && loopTimeVar3024 < 100 ) ;
        let var3181 : (Int64) -> Int32 = func218;
        (try { // block id: 3027
            [true, false, false, false, true, true, false, false, true, false];
            if (var415) { var1354 } else { var1354 } ;
            var2489
        } finally { // block id: 3034
            var var3036 : Unit = ();
            var3036;
            Class44(namedParam3049 : var3181);
            Option<Int16>.Some(var2496)
        } ?? try { // block id: 3186
            var3189 + Int16(96)
        } finally { // block id: 3192
            let var3197 : Int8 = Int8(-74);
            (var1231, var437, var3197, (Int32(18)&127..Int32(52)&127:(var1020|1)), var448, Int16(21));
            var3206;
            var2496 - Int16(30)
        })
    }
;
    var var3257 : UInt64 = UInt64(UInt16(Int8(Int8(Int8(80)))));
    var var3280 : ?Range<Int8> = (false as Range<Int8>);
    func2283(try { // block id: 3229
        var797;
        let var3238 : Range<UInt8> = (UInt8(194)&127..UInt8(120)&127:(-73)|1);
        if (var415) { (var581&127..var581&127:(114|1)) } else { var3238 } ;
        var var3243 : ??Unit = ((UInt64(20)&127..UInt64(Int32(-98))&127:(108|1)) as Option<Unit>);
        if (true) { var3243 } else { var3243 } 
    } catch (_) { // block id: 3251
        var3094 ||= true;
        var3257 <<= ((UInt64(132)) & 7);
        var var3266 : Bool = (Float32(Float32(Float32(Float32(71.0)))) is (Array<Bool>) -> Option<Unit>);
        if (var3266) { Option<Option<Unit>>.None } else { var3274 } 
    } finally { // block id: 3277
        var1722;
        var3280;
        Option<Option<Unit>>.None
    })
}

func func2271(param2272 : (Rune, Range<UInt16>, Option<Range<UInt16>>, Array<Range<Int64>>)) : Bool { // block id: 2273
    var var3285 : ((Range<Int32>, Rune, Range<Int16>, Range<UInt8>, Bool)) -> Int16 = func2279;
    let var3357 : UInt32 = UInt32(10);
    (Int16(UInt16(219)) ** (((var1317, 'Y', (Int16(-93)&127..var2496&127:((-65)|1)), var3144, var415)|>var3285) & 3)) == (match ([Option<Int16>.Some(var2496), Option<Int16>.Some(var2496), Option<Int16>.Some(Int16(68)), var2489, var2489, Option<Int16>.None, Option<Int16>.Some(var2496), var2489, var3312, Option<Int16>.Some(Int16(2))]) {
        case caseVar3323 : Option<Bool> => 
            var3312
        
        case _ => 
            Option<Int16>.None
        
    } ?? match (Class44()) {
        case caseVar3333 : Int8 => 
            var797;
            Int16(-111)
        
        case _ => 
            Option<Bool>.Some(false);
            Int16(-58)
        
        case caseVar3345 => 
            Int16(-53)
        
        case _ : Option<Option<Unit>> => 
            ((-28)&127..(-55)&127:(-30)|1);
            Int16(55)
        
        case _ => 
            var3357 % ((UInt32(164)) | 1);
            var3362 /= ((var3362) | 1);
            var3362 << ((Int16(-9)) & 7)
        
    })
}

public func func3371(param3372 : Class44) : (Rune, Range<UInt16>, Option<Range<UInt16>>, Array<Range<Int64>>) { // block id: 3373
    var var3378 : Float64 = (-10.0);
    match (match (var3378 / Float64((Int32(var1454)) | 1)) {
            case 48.0 => 
                if (var415) { ((-26)&127..=54&127:(-63)|1) } else { (18&127..(-33)&127:(123|1)) } 
            
            case _ : (Range<Int32>, Range<Int16>, Unit, Array<Bool>, UInt64, Range<UInt32>) => 
                var1634 /= ((var1634) | 1);
                if (var3094) { var1427 } else { ((-28)&127..=(-100)&127:(-50)|1) } 
            
            case -30.0 | -67.0 | 4.0 | -37.0 => 
                Option<Bool>.Some(true);
                if (false) { var1317 } else { (Int32(114)&127..Int32(40)&127:(-65)|1) } ;
                if (false) { (87&127..(-116)&127:(20|1)) } else { (var1020&127..=var1020&127:(99|1)) } 
            
            case caseVar3422 : Enum1870 => 
                var797;
                var797;
                (94&127..48&127:(-107)|1)
            
            case _ => 
                var740;
                var797;
                var3432
            
        }) {
        case caseVar3440 => 
            if (true) { Class44() } else { var234 } ;
            var var3452 : ?Range<UInt16> = Option<Range<UInt16>>.None;
            if (var415) { ('h', (UInt16(79)&127..=UInt16(66)&127:121|1), var3452, [(72&127..=(-56)&127:(-108)|1), (104&127..=9&127:76|1), ((-14)&127..=(-27)&127:(-92)|1), (122&127..(-109)&127:(-26)|1), (110&127..74&127:0|1), ((-48)&127..=14&127:(-104)|1), (26&127..=(-31)&127:(-89)|1), ((-59)&127..68&127:(-1)|1), (95&127..=111&127:32|1), ((-88)&127..25&127:(-71)|1)]) } else { var357 } 
        
        case caseVar3458 => 
            let var3464 : (Rune) -> UInt16 = func301;
            Enum1870.enumValue1873(var2694, var1354, var3464);
            Aggregate1154();
            var357
        
        case _ => 
            (UInt64(95)&127..UInt64(128)&127:(-90)|1);
            var357
        
        case caseVar3475 : Option<(Unit, UInt8)> => 
            [(UInt32(143)&127..=UInt32(131)&127:92|1), (UInt32(30)&127..=UInt32(41)&127:(-63)|1), (UInt32(66)&127..=UInt32(55)&127:(-96)|1), (UInt32(246)&127..=UInt32(77)&127:(-74)|1), (UInt32(84)&127..=UInt32(104)&127:27|1), (UInt32(79)&127..UInt32(210)&127:45|1), (UInt32(15)&127..UInt32(120)&127:72|1), (UInt32(217)&127..UInt32(71)&127:(-96)|1), (UInt32(213)&127..=UInt32(135)&127:(-88)|1), (UInt32(230)&127..UInt32(4)&127:67|1)];
            "bkiHS+`ctZ";
            var var3486 : ?Range<UInt16> = (((('X', (UInt16(4)&127..UInt16(133)&127:(105|1)), Option<Range<UInt16>>.Some((UInt16(145)&127..=UInt16(50)&127:(51|1))), [((-58)&127..56&127:111|1), (122&127..(-73)&127:79|1), (6&127..=109&127:((-123)|1)), (9&127..37&127:((-66)|1)), (18&127..=(-49)&127:(27|1)), (57&127..=37&127:107|1), (61&127..=(-15)&127:((-2)|1)), ((-7)&127..=(-54)&127:(113|1)), (96&127..(-115)&127:(88|1)), ((-128)&127..(-66)&127:(-95)|1)]) as Unit) as Range<Int8>) as Range<UInt16>);
            ('B', (UInt16(43)&127..=var2698&127:((-54)|1)), var3486, var2224)
        
        case _ => 
            [(), (), (), (), var740, var740, var740, (), var797, var740];
            var2431 -= Float32(-3.0);
            (var3549, (UInt16(192)&127..UInt16(13)&127:0|1), Option<Range<UInt16>>.Some((UInt16(179)&127..var305&127:(var1020|1))), var2224)
        
    }
}




public func func1986(param1987 : (Int64) -> Int32) : Range<Int16> { // block id: 1990
    var var3369 : ((Rune, Range<UInt16>, Option<Range<UInt16>>, Array<Range<Int64>>)) -> Bool = func2271;
    let var3559 : (Class44) -> (Rune, Range<UInt16>, Option<Range<UInt16>>, Array<Range<Int64>>) = func3371;
    var var3598 : Int16 = Int16(UInt16(183));
    var var3669 : ?Bool = Option<Bool>.None;
    var var3725 : UInt16 = UInt16(249);
    [var415, func1558(try { // block id: 1995
        var740;
        Class44()
    } catch (_) { // block id: 1998
        Float32(-67.0);
        var581 ^= var581;
        Class44()
    } finally { // block id: 2004
        let var2209 : UInt64 = UInt64(216);
        Class44(namedParam2007 : var2209, namedParam2008 : ((Int32(-98)&127..Int32(-117)&127:(83|1)), 'O', (Int16(116)&127..Int16(-82)&127:61|1), (var581&127..=UInt8(42)&127:(var1020|1)), var415), namedParam2009 : var2224, namedParam2010 : Aggregate1154());
        Class44()
    }), ((Option<Class44>.Some(Class44()) ?? Class44())|>(var3559~>var3369)), match {
        case true => 
        55
        case false => 
        ();
        (-20) >> ((106) & 7)
        case _ => 
        var1354;
        86 ** (var1020 & 3)
    } < match {
        case var3094 => 
        var1020 ^ var1020
        case _ => 
        ();
        var1020
    }, (var1722 ?? var3598) > (Int16(27) ** (var3362 & 3)), var2337, match (match (var2128) {
            case _ => 
                var var3614 : UInt64 = UInt64(164);
                UInt64(48) * var3614
            
            case _ => 
                var3094 &&= false;
                UInt64(148) * UInt64(47)
            
            case (_ : (Range<Int64>, Range<Int8>, Range<UInt8>, Int8, Range<Int16>),caseVar3627 : Range<Int16>,caseVar3628 : Array<Option<(Unit, UInt8)>>,_ : UInt8,caseVar3629,_ : Array<Bool>) => 
                UInt64(170)
            
            case (_,_,caseVar3634,caseVar3635,caseVar3636,caseVar3637 : (Unit, Range<Int8>, UInt32, Int32, Range<Int8>, Range<Int32>)) => 
                var3641 % ((UInt64(197)) | 1)
            
            case _ => 
                UInt32(210);
                var3641 ^ var3641
            
        }) {
        case _ => 
            var2337 && false
        
        case _ => 
            ();
            true
        
    }, (if (var415) { Option<Bool>.None } else { var3669 }  ?? if (var3094) { // block id: 3673
        false
    } else if (var415) { // block id: 3676
        var3678;
        (-118) != 106
    } else { // block id: 3689
        ();
        var415
    }), ((var3641 as Bool) ?? match (Enum1870.defaultValue) {
        case _ => 
            if (true) { var909 } else { var909 } ;
            ();
            var3707 > var3707
        
        case _ => 
            ();
            var1884;
            false
        
    }), if (true) { // block id: 3720
        var1525;
        UInt16(197) << ((var3725) & 7)
    } else { // block id: 3727
        var305
    } < match (var3731) {
        case caseVar3736 => 
            ();
            var2776
        
        case _ => 
            var797;
            var2698 * UInt16(27)
        
    }];
    (try { // block id: 3748
        var3750;
        if (var3094) { var3761 } else { Option<Unit>.None } 
    } catch (e: Exception) { // block id: 3765
        Option<Unit>.None
    } ?? (var3761 ?? if (var3094) { // block id: 3771
        Option<Class44>.None;
        ()
    }));
    let var3782 : ??Range<Int8> = (Option<Bool>.Some(([(), (), (), (), (), (), (), (), (), ()] is ((Int64, String, Float32, Unit, UInt16), Range<UInt32>, (Range<Int32>, Range<Int16>, Unit, Array<Bool>, UInt64, Range<UInt32>)))) as Option<Range<Int8>>);
    if (((var3782 ?? Option<Range<Int8>>.None) is Range<UInt8>)) { var1663 } else { var1663 } 
}

public func func3791(param219 : Int64) : Int32 { // block id: 220
    Class44.var53;
    var var225 : Int32 = Int32(UInt8(190));
    var225
}

public func func1921(namedParam1922 ! : Range<Int16>, optionalParam1923 ! : Option<Int16> = Option<Int16>.Some(Int16(UInt8(192)))) : Range<UInt32> { // block id: 1927
    func3791|>(func1986~>func1930);
    var var3804 : Unit = ();
    let var3834 : ?Int16 = Option<Int16>.None;
    try { // block id: 3795
        let var3799 : UInt32 = UInt32(204);
        (UInt32(123)&127..=var3799&127:(var1020|1))
    } finally { // block id: 3802
        var3804;
        var var3843 : Bool = ((-23) is (Rune, Range<UInt16>, Option<Range<UInt16>>, Array<Range<Int64>>));
        var loopTimeVar3848 : Int64 = 0;
        while ((true) && loopTimeVar3848 < 100 ) {
            loopTimeVar3848++;
            Enum1870.enumValue2393(Option<Range<Int8>>.None, func301, [Option<Int16>.None, Option<Int16>.Some(var3707), Option<Int16>.Some(var2496), var3819, var3834, Option<Int16>.None, Option<Int16>.None, Option<Int16>.None, Option<Int16>.None, var2489]);
            var3843 ||= var415
        };
        (UInt32(32)&127..UInt32(142)&127:(-65)|1)
    }
}

func func1810(param1811 : Array<Bool>) : Option<Unit> { // block id: 1812
    func func1914(param1915 : (Int64, String, Float32, Unit, UInt16), namedParam1916 ! : Enum1870, namedParam1917 ! : (Range<Int32>, Rune, Range<Int16>, Range<UInt8>, Bool), namedParam1918 ! : Bool) : Range<UInt32> { // block id: 1919
        var var3876 : UInt32 = UInt32(182);
        func1921(namedParam1922 : if (match {
            case var415 => 
            var2337
            case var2337 => 
            (UInt32(244)&127..UInt32(51)&127:(64|1));
            var1634 *= Int8(78);
            true
            case _ => 
            ();
            var3707 /= ((var3362) | 1);
            true
        }) { match (((), (Int8(-85)&127..=Int8(19)&127:3|1), var3876, var1821, var1231, (var1525&127..Int32(5)&127:(var1020|1)))) {
            case caseVar3886 : Option<Option<Unit>> => 
                if (true) { (Int16(-84)&127..=Int16(13)&127:(-11)|1) } else { (Int16(-28)&127..=Int16(-85)&127:(-85)|1) } 
            
            case _ => 
                var var3907 : (Unit, UInt8) = ((), UInt8(198));
                if (false) { var522 } else { [Option<(Unit, UInt8)>.Some(((), var3902)), var3678, Option<(Unit, UInt8)>.Some(var3907), var3678, var3678, Option<(Unit, UInt8)>.None, var3678, Option<(Unit, UInt8)>.Some(var3907), var3678, Option<(Unit, UInt8)>.None] } ;
                var797;
                var1663
            
        } } else { var1663 } )
    }
;
    let var4080 : UInt32 = UInt32(Int32(UInt8(Int8(-61))));
    var loopTimeVar4114 : Int64 = 0;
    do {
        loopTimeVar4114++;
        let var1825 : Int32 = Int32(Int8(-56));
        var1821 &= var1825;
        let var1859 : Int16 = Int16(UInt8(UInt8(Int8(-111))));
        func func1829(optionalParam1830 ! : Option<(Unit, UInt8)> = Option<(Unit, UInt8)>.Some(((), UInt8(207))), optionalParam1835 ! : (Class44) -> Bool = { lambdaParameter1838 : Class44 => (Class44() is (Unit, Range<Int8>, UInt32, Int32, Range<Int8>, Range<Int32>)) }, namedParam1844 ! : Option<Range<Int8>>, namedParam1845 ! : UInt64) : (Range<Int8>, Range<UInt32>, Int8, Range<Int32>, Range<UInt32>, Int16) { // block id: 1846
            var var1889 : (Rune) -> UInt16 = { lambdaParameter1892 : Rune => UInt16(209) };
            var loopTimeVar1907 : Int64 = 0;
            let var3924 : Enum1870 = Enum1870.enumValue1873(Float32(Float32(-44.0)), (Int32(Int16(Int8(25))), ((), UInt8(140)), true), func301);
            (((var1825&127..=Int32(38)&127:(var1020|1)), 'R', (var1859&127..=var1859&127:(78|1)), (UInt8(157)&127..=UInt8(1)&127:39|1), var415)[0], match (Enum1870.enumValue1873(Float32(-101.0), (var1525, (var1884, var581), var415), var1889)) {
                case _ => 
                    Option<Range<Int8>>.Some((Int8(125)&127..Int8(-18)&127:35|1));
                    (var1859&127..=Int16(-114)&127:(var1020|1))
                
            }, while ((var415) && loopTimeVar1907 < 100 ) {
                loopTimeVar1907++;

            }, if (false) { param1811 } else { [false, true, false, false, false, true, false, true, true, false] } , namedParam1845, func1914(var2615, namedParam1916 : var3924, namedParam1917 : var3061, namedParam1918 : true))[2];
            var var3941 : ?Bool = Option<Bool>.Some((((-17)&127..81&127:15|1) is (Array<Bool>) -> Option<Unit>));
            var3941;
            var var3981 : ?((Int64, String, Float32, Unit, UInt16), Range<UInt32>, (Range<Int32>, Range<Int16>, Unit, Array<Bool>, UInt64, Range<UInt32>)) = Option<((Int64, String, Float32, Unit, UInt16), Range<UInt32>, (Range<Int32>, Range<Int16>, Unit, Array<Bool>, UInt64, Range<UInt32>))>.Some(((Int64(Int16(-45)), "+E.cI<D#z8", Float32(-95.0), (), UInt16(250)), (UInt32(164)&127..UInt32(142)&127:(-57)|1), ((Int32(40)&127..=Int32(-37)&127:(121|1)), (Int16(-107)&127..Int16(-52)&127:(35|1)), (), [false, false, false, false, true, true, false, true, false, false], UInt64(138), (UInt32(74)&127..=UInt32(114)&127:88|1))));
            match (if (var415) { try { // block id: 3949
                    var581 >>= ((UInt8(119)) & 7);
                    var2059
                } catch (_) { // block id: 3954
                    var1525;
                    Float32(-88.0);
                    if (var415) { Option<Unit>.Some(()) } else { var2059 } 
                } } else { try { // block id: 3963
                    if (var2337) { var2059 } else { Option<Unit>.Some(var1884) } 
                } finally { // block id: 3969
                    var3094 &&= var415;
                    var2059
                } } ) {
                case caseVar3976 => 
                    if (false) { var3981 } else { Option<((Int64, String, Float32, Unit, UInt16), Range<UInt32>, (Range<Int32>, Range<Int16>, Unit, Array<Bool>, UInt64, Range<UInt32>))>.None } ;
                    (var1231, (UInt32(200)&127..=UInt32(59)&127:(-42)|1), var404, (Int32(28)&127..=Int32(18)&127:(-123)|1), (UInt32(233)&127..=UInt32(50)&127:(-22)|1), Int16(-77))
                
                case _ => 
                    ();
                    "3G$(QVNQ~0";
                    var var4034 : UInt32 = UInt32(190);
                    if (true) { (var1231, (var4034&127..=var4034&127:(104|1)), var4039, (var1525&127..=var1825&127:((-77)|1)), var448, Int16(-23)) } else { (var1231, (var4034&127..=UInt32(41)&127:(var1020|1)), Int8(-33), (Int32(-71)&127..Int32(8)&127:(-24)|1), (UInt32(242)&127..UInt32(239)&127:(-59)|1), Int16(-62)) } 
                
                case caseVar4059 => 
                    var2128
                
                case _ => 
                    if (var2337) { ('z', (UInt16(250)&127..UInt16(240)&127:(-68)|1), var4071, var2224) } else { var357 } ;
                    var var4089 : Range<Int32> = (Int32(UInt32(UInt8(Int8(17))))&127..Int32(Int8(UInt8(UInt8(54))))&127:(Int64(UInt64(Int16(-1)))|1));
                    ((Int8(26)&127..Int8(-71)&127:(-23)|1), (var4080&127..=UInt32(130)&127:(var1020|1)), Int8(87), var4089, (UInt32(219)&127..UInt32(64)&127:(5|1)), var1859)
                
                case _ => 
                    ();
                    var2128
                
            }
        }
;
        func1829(namedParam1844 : Option<Range<Int8>>.None, namedParam1845 : UInt64(127))
    } while (([true, false, true, false, false, true, true, false, true, true][0]) && loopTimeVar4114 < 100 ) ;
    var var4178 : Rune = '9';
    match (try { // block id: 4117
            var740;
            ();
            (var3549, (UInt16(218)&127..UInt16(204)&127:(-34)|1), Option<Range<UInt16>>.None, var2224)
        } catch (e: Exception) { // block id: 4125
            var var4158 : Int64 = Int64(UInt32(UInt32(146)));
            if (true) { ('H', (UInt16(211)&127..UInt16(59)&127:(-67)|1), var4071, [(var1020&127..(-85)&127:(var1020|1)), (120&127..(-87)&127:50|1), (var1020&127..=var1020&127:(var1020|1)), var1427, ((-59)&127..var1020&127:(var1020|1)), (16&127..(-117)&127:(var1020|1)), (82&127..=30&127:(var1020|1)), var3432, (var4158&127..=var1020&127:(41|1)), var167]) } else { (var3549, (UInt16(169)&127..UInt16(96)&127:(-38)|1), var4071, [((-39)&127..93&127:89|1), ((-122)&127..97&127:86|1), ((-24)&127..8&127:119|1), (41&127..(-67)&127:57|1), ((-60)&127..=113&127:56|1), ((-3)&127..(-98)&127:52|1), ((-53)&127..=126&127:(-39)|1), (77&127..(-44)&127:20|1), ((-12)&127..(-47)&127:(-93)|1), ((-126)&127..=(-80)&127:13|1)]) } 
        }) {
        case _ => 
            Float32(-78.0) - Float32(22.0);
            ();
            var4178 = var4178
        
    };
    var var4205 : Bool = false;
    var var4253 : UInt32 = UInt32(Int8(UInt8(67)));
    if (var415) { (if (try { // block id: 4185
        var4039 ^ Int8(-50);
        false
    } finally { // block id: 4190
        var1821 += var1525;
        var4195;
        true
    }) { match (Class44()) {
        case _ : Range<Int16> => 
            if (var4205) { var4208 } else { [(UInt32(23)&127..UInt32(78)&127:(-94)|1), var437, var448, (UInt32(101)&127..UInt32(56)&127:(-44)|1), var448, (UInt32(179)&127..=UInt32(120)&127:(-93)|1), (UInt32(0)&127..=UInt32(156)&127:32|1), (UInt32(152)&127..=UInt32(60)&127:(-86)|1), (var4253&127..UInt32(52)&127:(var1020|1)), (var4261&127..=UInt32(24)&127:(var1020|1))] } ;
            Option<Unit>.Some(var1884)
        
        case _ => 
            Option<Unit>.Some(var797)
        
    } } else { var2059 } ) } else { try { // block id: 4273
        if (true) { [(67&127..13&127:(-67)|1), (30&127..(-48)&127:(-7)|1), (90&127..=22&127:4|1), (50&127..=30&127:(-63)|1), ((-123)&127..13&127:(-88)|1), ((-51)&127..106&127:62|1), ((-95)&127..(-48)&127:(-79)|1), (114&127..=56&127:(-15)|1), ((-114)&127..(-12)&127:84|1), ((-65)&127..=102&127:95|1)] } else { var2224 } ;
        var3731;
        Option<Unit>.Some(())
    } finally { // block id: 4281
        let var4285 : ?Unit = Option<Unit>.Some(());
        if (true) { var4285 } else { Option<Unit>.None } 
    } } 
}

public func func229(param1784 : (Range<Int64>, Range<Int8>, Range<UInt8>, Int8, Range<Int16>), param1785 : Option<Unit>) : Array<Unit> { // block id: 1786
    (try { // block id: 1793
        let var1795 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
        var1795;
        Option<Option<Unit>>.Some(param1785)
    } catch (e: Exception) { // block id: 1799
        Option<Range<Int8>>.Some((var404&127..Int8(-66)&127:((-76)|1)));
        var797;
        let var1807 : ??Unit = Option<Option<Unit>>.None;
        var1807
    } ?? ([var4292, true, var4292, true, false, var415, var2337, var2337, var2337, var415]|>func1810));
    var var4313 : Float32 = Float32(65.0);
    var var4339 : Enum1870 = Enum1870.enumValue2393(Option<Range<Int8>>.Some((Int8(76)&127..Int8(78)&127:48|1)), func301, [Option<Int16>.Some(Int16(UInt8(71))), Option<Int16>.Some(Int16(UInt8(223))), Option<Int16>.None, Option<Int16>.None, Option<Int16>.Some(Int16(5)), (UInt16(49) as Int16), Option<Int16>.Some(Int16(-111)), (Int8(68) as Int16), ([false, false, true, true, false, false, false, true, false, true] as Int16), (Float32(-18.0) as Int16)]);
    var loopTimeVar4366 : Int64 = 0;
    var var4369 : Int64 = Int64(UInt64(Int8(-53)));
    var var4396 : UInt8 = UInt8(182);
    var loopTimeVar4420 : Range<UInt64> = (UInt64(108)&127..=UInt64(30)&127:(31|1));
    var loopTimeVar4435 : Range<UInt64> = (UInt64(14)&127..=UInt64(Int32(-106))&127:(Int64(UInt64(54))|1));
    var loopTimeVar4448 : Int64 = 0;
    var loopTimeVar4455 : Int64 = 0;
    let var4459 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    var loopTimeVar4491 : Int64 = 0;
    [var4195, try (resource = Class44()) { // block id: 4306

    } catch (_) { // block id: 4307
        var740
    }, (), while ((var4313 >= var4316) && loopTimeVar4366 < 100 ) {
        loopTimeVar4366++;
        87.0 == 20.0;
        let var4335 : (Rune) -> UInt16 = func301;
        if (var2337) { Enum1870.enumValue2393(Option<Range<Int8>>.Some((var1634&127..=var1634&127:(var1020|1))), var4335, var2065) } else { var4339 } 
    }, (var4369 &= match (var2912) {
        case (_,_ : Rune) => 
            81 ^ (-33)
        
        case (_ : Array<Bool>,_ : Option<Bool>) => 
            var797;
            'S';
            (-92)
        
        case _ => 
            if (false) { var3678 } else { Option<(Unit, UInt8)>.Some(((), var4396)) } ;
            (UInt8(242)&127..=var581&127:(var4369|1));
            (-49)
        
    }), for (i in loopTimeVar4420 where try { // block id: 4405
        var1231;
        true
    } catch (_) { // block id: 4408
        (UInt32(185)&127..=UInt32(183)&127:(30|1));
        Int32(12) != Int32(-83)
    } finally { // block id: 4416
        var2912;
        var3094
    }) {

    }, for (i in loopTimeVar4435 where try { // block id: 4427
        ();
        var2337
    } finally { // block id: 4430
        ();
        var4195;
        false
    }) {

    }, while ((true) && loopTimeVar4448 < 100 ) {
        loopTimeVar4448++;
        ()
    }, while ((var4261 <= var4261) && loopTimeVar4455 < 100 ) {
        loopTimeVar4455++;

    }, while ((match (var4459) {
        case _ => 
            var797;
            Int16(104);
            true
        
        case _ => 
            ();
            var2065;
            !var415
        
        case _ => 
            var2694 < var2431
        
    }) && loopTimeVar4491 < 100 ) {
        loopTimeVar4491++;

    }]
}

func func1551(param1552 : ((Int64) -> Int32) -> Unit) : Interface50 { // block id: 1555
    let var1616 : Array<Range<UInt32>> = [(UInt32(6)&127..=UInt32(191)&127:3|1), (UInt32(237)&127..UInt32(246)&127:(-116)|1), (UInt32(170)&127..=UInt32(63)&127:105|1), (UInt32(29)&127..=UInt32(20)&127:(-115)|1), (UInt32(137)&127..=UInt32(114)&127:63|1), (UInt32(166)&127..=UInt32(221)&127:(-30)|1), (UInt32(5)&127..=UInt32(239)&127:54|1), (UInt32(77)&127..UInt32(112)&127:(-40)|1), (UInt32(220)&127..=UInt32(139)&127:22|1), (UInt32(30)&127..UInt32(84)&127:27|1)];
    let var1702 : Interface50 = Class44();
    func func1705(param1706 : Int32, namedParam1707 ! : (UInt32) -> Bool, namedParam1710 ! : (Class44) -> Bool, namedParam1713 ! : UInt32) : Interface50 { // block id: 1714
        if ((var415 && false)) { match (var1722) {
            case _ => 
                UInt64(169);
                [(), (), (), (), (), (), (), (), (), ()]
            
        } } else { func229(var989, var2059) } [0];
        var1702
    }
;
    var var4507 : (UInt32) -> Bool = func1498;
    let var4513 : UInt32 = UInt32(119);
    if ((try { // block id: 1694
        Class44()
    } catch (e: Exception) { // block id: 1696
        if (false) { var200 } else { Class44() } 
    }|>{ lambdaParameter1597 : Class44 => let var1690 : Bool = true; match (((), (Int8(-45)&127..=Int8(44)&127:0|1), UInt32(119), Int32(8), (Int8(-59)&127..Int8(-56)&127:(-11)|1), var1317)[4]) {
        case _ : (Unit, Range<Int8>, UInt32, Int32, Range<Int8>, Range<Int32>) => 
            var740;
            var1616;
            var415
        
        case _ : UInt8 => 
            var var1624 : UInt16 = UInt16(135);
            var1624 = var305;
            var415
        
        case _ : String => 
            var404 += var1634;
            let var1640 : (Range<Int64>, Range<Int8>, Range<UInt8>, Int8, Range<Int16>) = ((18&127..(-31)&127:(-51)|1), (Int8(-80)&127..=Int8(52)&127:(Int64(UInt32(45))|1)), (UInt8(108)&127..=UInt8(73)&127:29|1), Int8(66), (Int16(115)&127..Int16(-17)&127:(-121)|1));
            if (var415) { var1640 } else { (((-19)&127..=var1020&127:(var1020|1)), var1231, (UInt8(219)&127..var581&127:(16|1)), var404, var1663) } ;
            true
        
        case _ : (Unit, UInt8) => 
            var1525;
            var1634;
            Int32(-122) == Int32(19)
        
        case _ => 
            var415
        
    } && [false, var415, true, true, var415, var415, false, false, true, var1690][8] })) { var1702 } else { func1705(try { // block id: 4497
        var740;
        Int32(-86)
    } catch (_) { // block id: 4500
        var1821 % ((var1525) | 1)
    } finally { // block id: 4504
        var1525
    }, namedParam1707 : var4507, namedParam1710 : func1558, namedParam1713 : var4261 - var4513) } 
}

public func func4518(param817 : (Int64) -> Int32) : Unit { // block id: 820

}


func func1547(param1548 : Range<Int32>) : Bool { // block id: 1549
    let var4516 : (((Int64) -> Int32) -> Unit) -> Interface50 = func1551;
    func4518|>var4516;
    match (var2573) {
        case _ => 
            var3094
        
    } || ((Option<Option<Option<Unit>>>.Some(var3274) ?? var3274) is (Int32, String) -> (Int64, String, Float32, Unit, UInt16))
}



public func func4539(param4540 : UInt32) : Range<Int32> { // block id: 4541
    let var4575 : Unit = ();
    let var4583 : UInt16 = UInt16(Int8(-91));
    (Option<Option<Range<UInt16>>>.Some(try { // block id: 4549
        if (var415) { Option<Range<UInt16>>.None } else { Option<Range<UInt16>>.Some(var262) } 
    } catch (_) { // block id: 4555
        if (var3094) { Option<Range<UInt16>>.None } else { var4071 } 
    }) ?? Option<Range<UInt16>>.Some(try { // block id: 4562
        var3678;
        var262
    } catch (_) { // block id: 4565
        if (var2337) { (UInt16(172)&127..UInt16(8)&127:(100|1)) } else { (UInt16(70)&127..=UInt16(157)&127:(-47)|1) } 
    } finally { // block id: 4573
        var4575;
        var797;
        if (true) { (UInt16(43)&127..var4583&127:(var1020|1)) } else { (var2698&127..var4583&127:((-26)|1)) } 
    }));
    var var4652 : ?(Unit, UInt8) = Option<(Unit, UInt8)>.None;
    var var4656 : (Unit, UInt8) = ((), UInt8(194));
    var var4696 : (Range<Int32>, Range<Int16>, Unit, Array<Bool>, UInt64, Range<UInt32>) = ((Int32(57)&127..=Int32(87)&127:16|1), (Int16(70)&127..Int16(-8)&127:((-114)|1)), (), [false, false, false, false, true, true, false, false, false, true], UInt64(Int64(UInt8(Int8(-126)))), (UInt32(203)&127..=UInt32(111)&127:83|1));
    var var4711 : Int64 = Int64(Int32(Int8(Int8(Int8(-125)))));
    ((match (UInt32(4)) {
        case 30 => 
            var4603
        
        case 193 | 221 => 
            "=\"$Y*lE.*B";
            ();
            if (var3094) { var4603 } else { Option<Range<Int32>>.None } 
        
        case caseVar4616 : Option<Range<Int32>> => 
            ();
            (Int32(75), ((), var4624), true);
            if (var2337) { Option<Range<Int32>>.None } else { Option<Range<Int32>>.None } 
        
        case caseVar4633 : Interface48 => 
            if (var4292) { Option<Range<Int32>>.Some((Int32(-23)&127..Int32(9)&127:37|1)) } else { var4603 } 
        
        case _ => 
            if (true) { Option<Range<Int32>>.Some((Int32(115)&127..Int32(74)&127:(-119)|1)) } else { Option<Range<Int32>>.Some((Int32(7)&127..=Int32(59)&127:(-17)|1)) } 
        
    } as Range<Int32>) ?? (match ([var4652, Option<(Unit, UInt8)>.Some(var4656), var3678, var4652, var4652, Option<(Unit, UInt8)>.None, var3678, var4652, var4652, Option<(Unit, UInt8)>.None]) {
        case caseVar4670 => 
            (var4195, UInt8(160));
            var1525
        
        case _ => 
            var1821 / ((var1525) | 1)
        
    }&127..=(Option<Int32>.None ?? var1525)&127:(try { // block id: 4685
        ();
        var1020 / (((-66)) | 1)
    } finally { // block id: 4690
        var4195;
        (var2615, var448, var4696);
        var4711
    }|1)))
}


public func func1493(param1494 : Option<Range<UInt16>>) : Unit { // block id: 1495
    if ((UInt32(11)|>(func4539~>func1547))) { // block id: 4719
        let var4726 : ?Rune = Option<Rune>.Some('J');
        (var4726 ?? 'j');
        ()
    } else if (!match (Class44()) {
        case _ : Option<Range<Int8>> => 
            var415
        
        case caseVar4740 : Option<(Unit, UInt8)> => 
            (var2513, 'H', var1663, (var3902&127..UInt8(213)&127:(51|1)), false);
            !false
        
        case _ => 
            var305 > UInt16(185)
        
    }) { // block id: 4758
        if (var2337) { (var1525, var4764, var3094) } else { (var1821, var4764, var4773) } ;
        ();
        var loopTimeVar4781 : Int64 = 0;
        while ((true) && loopTimeVar4781 < 100 ) {
            loopTimeVar4781++;
            var1884
        }
    };
    var loopTimeVar4813 : Int64 = 0;
    do {
        loopTimeVar4813++;
        (Option<Unit>.Some(var4195) ?? var740)
    } while ((if (match {
        case var3094 => 
        var4773 && var415
        case _ => 
        var1884;
        ();
        true
    }) { // block id: 4794
        var427;
        (-35);
        var1454 >= (-13.0)
    } else if (true) { // block id: 4801
        true
    } else { // block id: 4803
        UInt8(101) >= var4624
    }) && loopTimeVar4813 < 100 ) ;
    let var4815 : Unit = ();
    var4815
}

public func func4818(param4819 : (Int64) -> Int32) : Option<Range<UInt16>> { // block id: 4822
    var var4825 : UInt32 = UInt32(45);
    var4825 **= (try { // block id: 4828
        UInt32(38)
    } finally { // block id: 4830
        UInt32(148)
    } & 3);
    var var4874 : UInt16 = UInt16(Int8(Int8(52)));
    (try { // block id: 4834
        ();
        var4837;
        if (var4292) { Option<Unit>.Some(()) } else { Option<Unit>.Some(var4195) } 
    } finally { // block id: 4845
        if (var3094) { Option<Unit>.None } else { Option<Unit>.Some(()) } 
    } ?? try (resource = Class44()) { // block id: 4852
        var1454 -= var4856;
        var1821 += Int32(70)
    } catch (e: Exception) { // block id: 4861
        (var2513, '6', (Int16(9)&127..Int16(-56)&127:(-112)|1), (UInt8(246)&127..UInt8(29)&127:(-99)|1), false);
        var1884
    } finally { // block id: 4869
        var3362--;
        var4874 <<= ((UInt16(50)) & 7)
    });
    Option<Range<UInt16>>.Some((UInt16(55)&127..UInt16(243)&127:(-69)|1))
}

func func4884(param219 : Int64) : Int32 { // block id: 220
    Class44.var53;
    var var225 : Int32 = Int32(UInt8(190));
    var225
}

func func1467(param1468 : Array<Range<UInt32>>) : Array<Unit> { // block id: 1469
    var loopTimeVar1476 : Int64 = 0;
    var loopTimeVar1486 : Range<UInt64> = (UInt64(200)&127..=UInt64(61)&127:((-40)|1));
    let var4882 : ((Int64) -> Int32) -> Option<Range<UInt16>> = func4818;
    var var4887 : (Int64) -> Int32 = func4884;
    var loopTimeVar4931 : Int64 = 0;
    var var4959 : (Rune) -> UInt16 = func301;
    var var4966 : Int8 = Int8(UInt8(UInt8(183)));
    let var5035 : ?((Int64, String, Float32, Unit, UInt16), Range<UInt32>, (Range<Int32>, Range<Int16>, Unit, Array<Bool>, UInt64, Range<UInt32>)) = ([(UInt32(100)&127..UInt32(220)&127:79|1), (UInt32(160)&127..UInt32(18)&127:100|1), (UInt32(214)&127..=UInt32(52)&127:(Int64(Int8(-38))|1)), (UInt32(247)&127..UInt32(0)&127:31|1), (UInt32(31)&127..=UInt32(65)&127:103|1), (UInt32(191)&127..=UInt32(208)&127:((-111)|1)), (UInt32(UInt8(92))&127..UInt32(103)&127:((-86)|1)), (UInt32(Int8(42))&127..UInt32(UInt8(212))&127:(Int64(Int8(-73))|1)), (UInt32(127)&127..UInt32(62)&127:107|1), (UInt32(UInt8(240))&127..=UInt32(173)&127:(Int64(UInt64(17))|1))] as ((Int64, String, Float32, Unit, UInt16), Range<UInt32>, (Range<Int32>, Range<Int16>, Unit, Array<Bool>, UInt64, Range<UInt32>)));
    let var5075 : ?Unit = (Option<Option<Option<Unit>>>.None as Unit);
    var loopTimeVar5083 : Range<UInt64> = (UInt64(Int16(-19))&127..UInt64(UInt64(209))&127:(Int64(Int8(UInt8(UInt8(62))))|1));
    [while ((false) && loopTimeVar1476 < 100 ) {
        loopTimeVar1476++;
        Class44()
    }, for (i in loopTimeVar1486 where if (true) { // block id: 1480
        true
    } else { // block id: 1482
        var415
    }) {
        var797
    }, (var4887|>(var4882~>func1493)), do {
        loopTimeVar4931++;
        var4261 & var4261;
        117 >> ((124) & 7)
    } while ((match {
        case false => 
        Class44();
        Int8(-97) >= Int8(-61)
        case var4773 => 
        let var4903 : Int8 = Int8(UInt8(UInt8(197)));
        ((var404&127..=var4903&127:((-42)|1)), (var4261&127..=var4261&127:((-5)|1)), Int8(-46), var2513, (UInt32(23)&127..=UInt32(117)&127:(-64)|1), var3362);
        var2337
        case _ => 
        if (false) { Option<Unit>.None } else { var2059 } ;
        var3094
    }) && loopTimeVar4931 < 100 ) , (var4934 ^= (-66)), try (resource = Class44()) { // block id: 4938
        var4316;
        var3707 = Int16(-69);
        var797
    } catch (_) { // block id: 4944
        var797;
        var1821++;
        var4195
    }, (var3094 &&= match (Enum1870.enumValue1873(Float32(59.0), (var1525, var4764, true), var4959)) {
        case _ => 
            (UInt8(75)&127..UInt8(187)&127:(-16)|1);
            var4966 << ((var1634) & 7);
            Int32(48) == var1821
        
    }), match (Option<Option<Option<Unit>>>.None) {
        case _ : Range<UInt64> => 
            var1884
        
        case caseVar4982 => 
            ()
        
        case _ : Class44 => 
            (var2615, var437, var4992);
            var797;
            ()
        
        case _ => 
            if (true) { (UInt8(206)&127..UInt8(109)&127:(-78)|1) } else { (var4624&127..UInt8(184)&127:((-89)|1)) } ;
            ()
        
        case _ => 
            var1884
        
    }, if ((var3061 is Range<UInt8>)) { // block id: 5032
        var740;
        var5035;
        var4195
    } else if (var2337) { // block id: 5072

    }, (var5075 ?? for (i in loopTimeVar5083 where false) {
        var4195;
        var3061
    })]
}





public func func978() : Range<UInt16> { // block id: 979
    let var1027 : Range<Int8> = (Int8(UInt8(229))&127..=Int8(103)&127:((-71)|1));
    var var1034 : Range<UInt8> = (UInt8(144)&127..=UInt8(26)&127:32|1);
    let var1057 : Array<Bool> = [(Class44() is Array<Range<Int64>>), (Int16(-125) is Range<Int64>), ((((Int32(122)&127..Int32(-69)&127:(19|1)) as (Unit, UInt8)) as Range<UInt16>) is (Range<UInt32>) -> Int64), (UInt32(Int16(91)) is (Range<Int8>, Range<UInt32>, Int8, Range<Int32>, Range<UInt32>, Int16)), (Option<(Unit, UInt8)>.None is Float32), ('V' is (Range<UInt32>) -> Int64), ((51&127..=(-59)&127:(Int64(UInt32(211))|1)) is Option<Unit>), (Class44() is Array<Range<Int64>>), true, (Int8(Int8(UInt8(183))) is UInt8)];
    let var1093 : Int8 = Int8(Int8(Int8(UInt8(100))));
    var var1117 : (Unit, UInt8) = ((), UInt8(Int8(95)));
    (if (false) { // block id: 985
        if (true) { var989 } else { ((var1020&127..=86&127:(var1020|1)), var1027, var1034, Int8(-3), (Int16(-32)&127..Int16(-122)&127:93|1)) } 
    } else { // block id: 1038
        ();
        var var1043 : Int32 = Int32(16);
        Int32(10) / ((var1043) | 1);
        let var1051 : Range<Int16> = (Int16(-127)&127..Int16(-64)&127:(-39)|1);
        (((-50)&127..(-36)&127:(-4)|1), (Int8(59)&127..=Int8(-119)&127:(-54)|1), (UInt8(61)&127..=UInt8(118)&127:119|1), Int8(-20), var1051)
    }[3]&127..=if (var1057[0]) { // block id: 1091
        var1093
    } else if (((UInt16(195)&127..UInt16(2)&127:37|1) is (Range<UInt32>, Range<UInt64>) -> Interface48)) { // block id: 1100
        Int8(-85) | var404
    } else { // block id: 1104
        var1093
    }&127:((var1020 * var1020) / ((match (var909) {
        case caseVar1114 : Range<Int32> => 
            var1117;
            var1020
        
        case _ => 
            55
        
        case _ => 
            ();
            var1020 - var1020
        
    }) | 1)|1));
    let var5724 : Range<Int64> = ((-78)&127..(-127)&127:(-47)|1);
    let var5805 : ?Array<Bool> = Option<Array<Bool>>.Some([false, false, false, false, true, false, true, true, false, false]);
    let var5809 : Array<Bool> = [false, true, true, true, false, false, true, true, false, false];
    func func1151() : Option<Bool> { // block id: 1152
        Aggregate1154.func1159();
        let var5766 : Float64 = Float64(44.0);
        match ((try { // block id: 5670
                var1884;
                if (false) { Option<(Unit, UInt8)>.Some((var797, UInt8(18))) } else { var3678 } 
            } catch (e: Exception) { // block id: 5679
                [true, false, true, true, true, true, false, true, false, true];
                var var5683 : Bool = true;
                if (var5683) { Option<(Unit, UInt8)>.None } else { Option<(Unit, UInt8)>.None } 
            } ?? if (var3094) { // block id: 5689
                var var5745 : Int64 = (-40);
                if (var5302) { (var3549, (UInt16(40)&127..UInt16(76)&127:((-1)|1)), Option<Range<UInt16>>.None, [(49&127..(-118)&127:(-97)|1), (97&127..var1020&127:(var4934|1)), (var1020&127..var4934&127:(var4934|1)), ((-63)&127..=(-92)&127:(var1020|1)), ((-100)&127..=var4934&127:(68|1)), var1427, (111&127..var1020&127:(var4934|1)), (31&127..=54&127:(-127)|1), var5724, ((-63)&127..=(-113)&127:54|1)]) } else { ('a', (UInt16(127)&127..=UInt16(144)&127:(-125)|1), var4071, [(22&127..=(-86)&127:(-98)|1), ((-124)&127..=103&127:(-18)|1), ((-114)&127..=var4934&127:(var4934|1)), ((-23)&127..123&127:(100|1)), ((-69)&127..15&127:(-115)|1), (var5745&127..27&127:(var1020|1)), var167, ((-5)&127..(-8)&127:(var4934|1)), var3432, (var1020&127..(-5)&127:(var4934|1))]) } ;
                var2573;
                var4764
            } else { // block id: 5761
                ();
                var1454 %= Float64((Int32(var5766)) | 1);
                (var1884, UInt8(162))
            })) {
            case _ => 
                (var305, true)
            
        };
        var var5837 : Bool = (() is ((Int64, String, Float32, Unit, UInt16), Range<UInt32>, (Range<Int32>, Range<Int16>, Unit, Array<Bool>, UInt64, Range<UInt32>)));
        if ((try { // block id: 5780
            (84, var5520, Float32(102.0), (), UInt16(150));
            if (false) { var3144 } else { var3144 } ;
            ((-43)&127..var1020&127:(21|1))
        } catch (e: Exception) { // block id: 5795
            ();
            ((-47)&127..60&127:30|1)
        } is (Range<Int32>) -> Bool)) { match ((var5805 ?? var5809)) {
            case caseVar5813 => 
                if (var5302) { var4603 } else { Option<Range<Int32>>.None } ;
                if (true) { var412 } else { Option<Bool>.Some(var5302) } 
            
            case _ => 
                var412
            
        } } else { Option<Bool>.Some(try { // block id: 5829
            false && true
        } catch (e: Exception) { // block id: 5833
            var2615;
            var4603;
            var5837
        } finally { // block id: 5840
            var3094 &&= true;
            var3094 || false
        }) } 
    }
;
    let var5948 : ?Option<UInt16> = ((UInt16(UInt8(UInt8(95))), false) as Option<UInt16>);
    let var5967 : Array<Bool> = [true, ('H' is Float32), (Option<Option<Range<Int8>>>.Some(Option<Range<Int8>>.Some((Int8(-128)&127..Int8(-25)&127:(8|1)))) is Array<Bool>), false, false, true, false, false, (###"?pnl32a{/\\?"### is (Range<Int8>, Range<UInt32>, Int8, Range<Int32>, Range<UInt32>, Int16)), ((UInt8(20)&127..UInt8(131)&127:51|1) is Option<Int32>)];
    let var6193 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    let var6210 : (Range<Int32>, Rune, Range<Int16>, Range<UInt8>, Bool) = ((Int32(UInt8(UInt8(101)))&127..Int32(-77)&127:((-108)|1)), 'A', (Int16(-110)&127..=Int16(-82)&127:(-125)|1), (UInt8(135)&127..UInt8(59)&127:66|1), false);
    func func1134(param1135 : UInt64, optionalParam1136 ! : Unit = (), optionalParam1138 ! : Range<UInt16> = (UInt16(Int16(-12))&127..=UInt16(Int8(Int8(UInt8(222))))&127:((-117)|1))) : Rune { // block id: 1147
        let var5880 : (Unit, Range<Int8>, UInt32, Int32, Range<Int8>, Range<Int32>) = ((), (Int8(UInt8(UInt8(31)))&127..=Int8(Int8(73))&127:(Int64(Int16(UInt16(161)))|1)), UInt32(78), Int32(UInt8(214)), (Int8(-38)&127..Int8(55)&127:(8|1)), (Int32(-1)&127..Int32(-127)&127:(Int64(UInt16(146))|1)));
        try { // block id: 1149
            func1151()
        } catch (_) { // block id: 5847
            var loopTimeVar5853 : Range<UInt64> = (UInt64(Int64(UInt8(153)))&127..UInt64(89)&127:(Int64(UInt64(Int32(Int32(98))))|1));
            for (i in loopTimeVar5853 where true) {
                optionalParam1136;
                (Int16(68)&127..Int16(-102)&127:100|1)
            };
            var var5865 : ??Range<UInt16> = ((UInt32(20)&127..UInt32(240)&127:(-32)|1) as Option<Range<UInt16>>);
            match (var5865) {
                case _ => 
                    if (var4292) { ((), var1231, UInt32(230), Int32(16), (Int8(-91)&127..Int8(23)&127:(-46)|1), (Int32(-101)&127..Int32(-73)&127:(-64)|1)) } else { var5880 } ;
                    var909
                
            };
            (var2496 as Bool)
        } finally { // block id: 5907
            match (true) {
                case false | false => 
                    Option<Bool>.None
                
                case _ : Range<UInt32> => 
                    var4934 **= ((-38) & 3);
                    Option<Bool>.Some(var415)
                
                case _ => 
                    ();
                    Option<Bool>.None
                
                case caseVar5929 => 
                    if (var415) { var412 } else { var412 } 
                
                case _ => 
                    var200;
                    Option<Range<Int32>>.None;
                    var412
                
            }
        };
        let var5956 : Option<UInt16> = Option<UInt16>.None;
        var var5959 : ??Range<UInt16> = Option<Option<Range<UInt16>>>.Some((Int64(110) as Range<UInt16>));
        try { // block id: 5941
            (var5948 ?? var5956);
            var5959
        } catch (e: Exception) { // block id: 5964
            var var6001 : ?Bool = (Int8(-102) as Bool);
            var var6018 : ??Range<UInt16> = Option<Option<Range<UInt16>>>.None;
            match (var5967) {
                case caseVar5990 => 
                    ();
                    Class44();
                    Option<Option<Range<UInt16>>>.Some(var4071)
                
                case _ : Int16 => 
                    ();
                    var6001;
                    Option<Option<Range<UInt16>>>.None
                
                case _ : Range<Int8> => 
                    var1884;
                    (var6011, var5520, var2431, var797, var2776);
                    var6018
                
                case _ => 
                    if (true) { var6018 } else { Option<Option<Range<UInt16>>>.None } 
                
                case _ => 
                    Option<Option<Range<UInt16>>>.None
                
            }
        };
        let var6038 : ??((Int64, String, Float32, Unit, UInt16), Range<UInt32>, (Range<Int32>, Range<Int16>, Unit, Array<Bool>, UInt64, Range<UInt32>)) = ([(), (), (), (), (), (), (), (), (), ()] as Option<((Int64, String, Float32, Unit, UInt16), Range<UInt32>, (Range<Int32>, Range<Int16>, Unit, Array<Bool>, UInt64, Range<UInt32>))>);
        var var6116 : ?Class44 = Option<Class44>.None;
        var var6138 : Enum1870 = Enum1870.defaultValue;
        if (((var6038 ?? Option<((Int64, String, Float32, Unit, UInt16), Range<UInt32>, (Range<Int32>, Range<Int16>, Unit, Array<Bool>, UInt64, Range<UInt32>))>.Some(var2573)) is (Range<Int16>, Option<Int16>) -> Range<UInt32>)) { // block id: 6053
            var var6059 : UInt16 = UInt16(25);
            var loopTimeVar6062 : Range<UInt64> = (UInt64(42)&127..=UInt64(207)&127:(Int64(Int8(-39))|1));
            for (i in loopTimeVar6062 where var2337) {
                var6059 += var305
            };
            let var6095 : ?Class44 = (Option<Unit>.Some(()) as Class44);
            if (var4773) { // block id: 6070
                (var1884, (var1093&127..=Int8(-87)&127:(68|1)), UInt32(131), var1821, (var1634&127..var1093&127:(48|1)), var1317);
                'K'
            } else if (var3094) { // block id: 6086
                ();
                var1027;
                if (false) { 'D' } else { var3549 } 
            } else { // block id: 6093
                var6095;
                var3549
            }
        } else if (match {
            case ([(UInt32(100)&127..=UInt32(88)&127:30|1), (UInt32(209)&127..=UInt32(176)&127:122|1), (UInt32(26)&127..UInt32(27)&127:96|1), (UInt32(32)&127..UInt32(177)&127:90|1), (UInt32(71)&127..UInt32(236)&127:(-77)|1), (UInt32(213)&127..=UInt32(184)&127:(-105)|1), (UInt32(200)&127..UInt32(154)&127:(-28)|1), (UInt32(133)&127..=UInt32(142)&127:1|1), (UInt32(76)&127..UInt32(110)&127:(-110)|1), (UInt32(136)&127..UInt32(111)&127:(-65)|1)] is Aggregate1154) => 
            var var6105 : ???Unit = Option<Option<Option<Unit>>>.Some(Option<Option<Unit>>.None);
            var6105;
            true
            case true => 
            true
            case _ => 
            if (true) { var6116 } else { var6116 } ;
            Int32(104) == Int32(55)
        }) { // block id: 6122
            if (var4292) { // block id: 6125
                var var6135 : (Rune) -> UInt16 = func301;
                if (false) { Enum1870.enumValue1873(Float32(-83.0), (var1525, var4764, true), var6135) } else { var6138 } ;
                let var6141 : (Rune, Range<UInt16>, Option<Range<UInt16>>, Array<Range<Int64>>) = ('d', (UInt16(UInt8(248))&127..=UInt16(Int16(Int8(-104)))&127:(Int64(Int32(75))|1)), Option<Range<UInt16>>.None, [((-115)&127..=93&127:(-69)|1), (69&127..58&127:125|1), ((-128)&127..112&127:(-56)|1), (35&127..(-40)&127:(-3)|1), (35&127..=77&127:(-87)|1), (103&127..(-87)&127:(-72)|1), ((-35)&127..=(-121)&127:(-83)|1), ((-49)&127..41&127:114|1), (125&127..(-41)&127:(-24)|1), (4&127..(-73)&127:(-114)|1)]);
                var6141
            } else if (true) { // block id: 6155
                var4261;
                var6011 %= ((var1020) | 1);
                if (var2337) { var357 } else { var357 } 
            } else { // block id: 6164
                var var6167 : UInt32 = UInt32(Int8(-29));
                var6167 >>= ((var4261) & 7);
                ();
                var357
            };
            Int32(-45);
            match (var5520) {
                case "\\(yx2$V_;r" => 
                    'z'
                
                case "6.u]l&f6\\T" => 
                    var3902 |= UInt8(79);
                    ();
                    'L'
                
                case ###"lA;K9>RTRW"### | "ReGxVk$a{~#" => 
                    var4195;
                    var6193;
                    var3549
                
                case _ => 
                    ();
                    ();
                    if (true) { var3549 } else { var3549 } 
                
            }
        } else { // block id: 6204
            var4934 **= (var1020 & 3);
            match (var6210) {
                case _ => 
                    if (false) { Option<Option<Range<Int8>>>.Some(Option<Range<Int8>>.Some(var1231)) } else { Option<Option<Range<Int8>>>.None } 
                
            };
            if (var5302) { // block id: 6232
                'F'
            } else { // block id: 6234
                var4195;
                if (var2337) { 'P' } else { 'l' } 
            }
        }
    }
;
    func1134(UInt64(195) & try { // block id: 6243
        UInt64(70) % ((var3641) | 1)
    } finally { // block id: 6247
        let var6249 : Unit = ();
        var6249;
        var797;
        UInt64(99)
    }, optionalParam1136 : ());
    var262
}


func func879(param880 : UInt32, optionalParam881 ! : UInt32 = UInt32(127), optionalParam883 ! : Option<Unit> = (Float32(Float32(10.0)) as Unit)) : Bool { // block id: 887
    var740;
    let var919 : Array<Option<Int16>> = [Option<Int16>.Some(Int16(78)), (Float32(Float32(-67.0)) as Int16), Option<Int16>.Some(Int16(UInt16(UInt16(146)))), ([(UInt32(34)&127..=UInt32(56)&127:(55|1)), (UInt32(183)&127..UInt32(193)&127:((-7)|1)), (UInt32(191)&127..UInt32(27)&127:(-9)|1), (UInt32(129)&127..UInt32(92)&127:(-40)|1), (UInt32(45)&127..=UInt32(214)&127:((-56)|1)), (UInt32(117)&127..UInt32(54)&127:(80|1)), (UInt32(173)&127..=UInt32(231)&127:((-23)|1)), (UInt32(77)&127..UInt32(79)&127:((-6)|1)), (UInt32(39)&127..=UInt32(199)&127:((-72)|1)), (UInt32(188)&127..=UInt32(139)&127:(-33)|1)] as Int16), Option<Int16>.Some(Int16(Int16(Int16(-125)))), (UInt64(3) as Int16), Option<Int16>.None, Option<Int16>.Some(Int16(15)), ('t' as Int16), Option<Int16>.None];
    let var6261 : ?Bool = (Option<Class44>.Some(Class44()) as Bool);
    try { // block id: 890
        var var897 : ?Int16 = ((Int32(Int16(UInt16(6)))&127..Int32(-123)&127:((-71)|1)) as Int16);
        var var906 : Int16 = Int16(118);
        (var897 ?? var906);
        var909;
        [false, true, true, true, true, false, true, false, true, true][6]
    } catch (e: Exception) { // block id: 915
        var919[9];
        func978();
        (var6261 ?? false)
    }
}


func func725(optionalParam726 ! : Range<UInt16> = (UInt16(112)&127..UInt16(221)&127:(-98)|1)) : Float64 { // block id: 728
    let var778 : Int32 = Int32(42);
    let var807 : ?Range<Int8> = Option<Range<Int8>>.Some((Int8(-15)&127..Int8(20)&127:(124|1)));
    func func731(namedParam732 ! : UInt32, namedParam733 ! : Range<Int8>, namedParam734 ! : Range<Int16>, namedParam735 ! : Range<UInt32>) : Bool { // block id: 736
        var var747 : UInt64 = UInt64(40);
        try (resource = Class44()) { // block id: 738
            var740;
            var loopTimeVar754 : Range<UInt64> = (UInt64((-92))&127..UInt64(135)&127:(Int64(Int32(109))|1));
            for (i in loopTimeVar754 where var415) {
                var747 *= var747;
                if (var415) { (UInt16(28)&127..UInt16(57)&127:101|1) } else { (UInt16(181)&127..=UInt16(61)&127:29|1) } 
            }
        } finally { // block id: 761

        };
        [(), (), (), (), (), (), (), (), (), ()][8];
        func func767(optionalParam768 ! : UInt64 = UInt64(UInt32(174)), namedParam771 ! : Range<Int8>) : Bool { // block id: 772
            let var785 : Bool = false;
            var var788 : (UInt16, Bool) = (UInt16(Int8(UInt8(56))), false);
            try { // block id: 776
                var778;
                if (true) { (var305, var785) } else { var788 } 
            } finally { // block id: 794
                Class44();
                var797;
                var788
            }[1]
        }
;
        var var847 : Unit = ();
        var var861 : Float64 = (-76.0);
        if (func767(namedParam771 : (var807 ?? namedParam733))) { // block id: 814
            func822|>func816;
            [(UInt32(65)&127..=UInt32(243)&127:(-121)|1), (UInt32(252)&127..=UInt32(201)&127:39|1), (UInt32(152)&127..=UInt32(7)&127:(-82)|1), (UInt32(113)&127..UInt32(161)&127:10|1), (UInt32(80)&127..UInt32(66)&127:49|1), (UInt32(199)&127..=UInt32(71)&127:83|1), (UInt32(116)&127..UInt32(230)&127:79|1), (UInt32(213)&127..UInt32(63)&127:(-105)|1), (UInt32(144)&127..=UInt32(240)&127:42|1), (UInt32(218)&127..UInt32(227)&127:66|1)][0];
            match {
                case false => 
                var415
                case false => 
                Int32(71) >= Int32(-15)
                case _ => 
                !var415;
                false
            }
        } else if (match (try (resource = Class44()) { // block id: 844
                Int32(119);
                var847;
                ()
            } catch (_) { // block id: 850
                (namedParam732&127..=namedParam732&127:(33|1));
                var740
            } finally { // block id: 856

            }) {
            case _ => 
                var861 += 71.0;
                ();
                false
            
        }) { // block id: 866
            if (true) { var200 } else { var234 } ;
            func767(namedParam771 : (Int8(-46)&127..Int8(86)&127:(-77)|1))
        } else { // block id: 873
            var847;
            Class44.var53;
            var var6268 : UInt32 = UInt32(Int32(68));
            func879(var4261, optionalParam881 : var6268)
        }
    }
;
    var var6288 : Range<Int16> = (Int16(Int16(-49))&127..Int16(87)&127:(Int64(Int32(-15))|1));
    var var6301 : ?Range<UInt32> = Option<Range<UInt32>>.Some((UInt32(UInt32(246))&127..UInt32(UInt32(Int16(7)))&127:(Int64(UInt8(Int8(-83)))|1)));
    let var6313 : Range<UInt32> = (UInt32(3)&127..=UInt32(UInt32(4))&127:(21|1));
    var var6341 : ?Bool = (Aggregate1154() as Bool);
    var var6385 : Float64 = (-49.0);
    var var6391 : Float64 = Float64(Float32(Float32(Float32(-104.0))));
    if (func731(namedParam732 : UInt32(UInt16(45)), namedParam733 : (Int8(-22)&127..Int8(22)&127:(-100)|1), namedParam734 : try { // block id: 6275
        var1884;
        var5109;
        (Int16(115)&127..Int16(74)&127:(var1020|1))
    } finally { // block id: 6282
        var1663;
        if (false) { var1663 } else { var6288 } 
    }, namedParam735 : (var6301 ?? var6313))) { // block id: 6319
        (Option<Class44>.Some(var234) ?? var200);
        UInt16(Int8(-37));
        try { // block id: 6327
            var var6329 : Interface47 = Class44();
            var6329;
            var797;
            var1454 % Float64((Int32(var4856)) | 1)
        } catch (e: Exception) { // block id: 6335
            if (var2337) { Option<Bool>.Some(var3094) } else { var6341 } ;
            ();
            -(-106.0)
        }
    } else if (try { // block id: 6348
        var4624 & var4624;
        var var6353 : ?Array<Bool> = (UInt32(194) as Array<Bool>);
        var6353;
        var2337
    } finally { // block id: 6357
        !var5302
    }) { // block id: 6360
        if (true) { [((-71)&127..=(-33)&127:(-68)|1), (87&127..35&127:11|1), ((-120)&127..=33&127:(-28)|1), ((-34)&127..=(-102)&127:88|1), (72&127..96&127:(-110)|1), (119&127..(-46)&127:8|1), ((-118)&127..19&127:99|1), ((-27)&127..(-31)&127:92|1), (110&127..(-90)&127:(-114)|1), (107&127..=95&127:46|1)] } else { var2224 } ;
        var loopTimeVar6372 : Int64 = 0;
        do {
            loopTimeVar6372++;
            var6011 |= 108
        } while ((var4773) && loopTimeVar6372 < 100 ) ;
        if (true) { // block id: 6375
            var4856
        } else { // block id: 6377
            (-16) ** (var4934 & 3);
            Option<Int16>.None;
            120.0 - var6385
        }
    } else { // block id: 6387
        var1454 - var6391
    }
}



public func func506() : Unit { // block id: 507
    var loopTimeVar512 : Int64 = 0;
    while ((false) && loopTimeVar512 < 100 ) {
        loopTimeVar512++;

    };
    let var606 : Unit = ();
    (var522[3] ?? match ('c') {
        case 'K' => 
            (Int8(75)&127..=Int8(-58)&127:(-7)|1);
            var var574 : Int16 = Int16(-98);
            var574++;
            let var587 : (Unit, UInt8) = ((), UInt8(103));
            if (var415) { ((), var581) } else { var587 } 
        
        case caseVar593 : Float32 => 
            ();
            ((), var581)
        
        case _ => 
            ();
            if (false) { (var606, var581) } else { (var606, var581) } 
        
    })[0];
    let var672 : Range<Int64> = ((-127)&127..(-67)&127:87|1);
    var var678 : (Unit, UInt8) = ((), UInt8(UInt8(38)));
    let var6442 : Range<Int64> = ((-18)&127..117&127:(-117)|1);
    let var6449 : Range<Int64> = (21&127..=(-14)&127:112|1);
    let var6456 : Array<Range<Int64>> = [(94&127..3&127:(-83)|1), ((-67)&127..96&127:(-103)|1), (113&127..(-55)&127:24|1), (104&127..=87&127:(-67)|1), (23&127..(-113)&127:(-1)|1), (104&127..=(-17)&127:(-63)|1), ((-10)&127..(-112)&127:107|1), ((-18)&127..4&127:116|1), (48&127..(-31)&127:(-12)|1), (80&127..(-74)&127:90|1)];
    func614(namedParam615 : try { // block id: 644
        var581--;
        let var653 : Int64 = (-91);
        [var167, (33&127..=106&127:(var653|1)), (22&127..=(-71)&127:(-50)|1), ((-8)&127..48&127:(47|1)), (var653&127..var653&127:((-83)|1)), var167, var167, var167, ((-25)&127..=var653&127:(22|1)), var672];
        if (false) { Option<(Unit, UInt8)>.Some(var678) } else { Option<(Unit, UInt8)>.Some((var606, var581)) } 
    } catch (_) { // block id: 687
        var var689 : Int32 = Int32(UInt8(120));
        var689;
        var var699 : ?(Unit, UInt8) = ((-73.0) as (Unit, UInt8));
        if (var415) { Option<(Unit, UInt8)>.Some(((), var581)) } else { var699 } ;
        Option<(Unit, UInt8)>.None
    } finally { // block id: 703
        let var705 : ?(Unit, UInt8) = (((Int8(2)&127..=Int8(Int8(-57))&127:(Int64(18)|1)), (UInt32(232)&127..=UInt32(250)&127:(-43)|1), Int8(-48), (Int32(24)&127..Int32(Int16(26))&127:(Int64(Int32(79))|1)), (UInt32(245)&127..=UInt32(35)&127:38|1), Int16(116)) as (Unit, UInt8));
        var705
    }, namedParam616 : func725(optionalParam726 : try { // block id: 6397
        (UInt16(168)&127..UInt16(222)&127:((-11)|1))
    } catch (e: Exception) { // block id: 6402
        ();
        var var6405 : Range<UInt16> = (UInt16(163)&127..UInt16(8)&127:52|1);
        var6405
    } finally { // block id: 6407
        var797;
        (var2776&127..=var305&127:(var6011|1))
    }), optionalParam617 : ((Option<Option<Array<Range<Int64>>>>.Some(Option<Array<Range<Int64>>>.Some([var167, (var4934&127..=(-128)&127:(66|1)), ((-2)&127..=(-24)&127:27|1), (var6011&127..(-55)&127:(82|1)), (var1020&127..99&127:(var6011|1)), ((-99)&127..=79&127:(-23)|1), var6442, ((-95)&127..=(-123)&127:(var1020|1)), var6449, var672])) ?? var6453) ?? var6456))
}

func func501(param502 : Interface47) : Option<Unit> { // block id: 503
    (func506() as Unit);
    (var6460 as Unit)
}

func func312(param313 : Range<UInt32>) : UInt16 { // block id: 314
    let var6656 : (Int64) -> Int32 = func218;
    Class44.func318(match ((UInt32(200)&127..UInt32(152)&127:(-24)|1)) {
        case _ : Option<Bool> => 
            21 & 16
        
        case caseVar6642 => 
            var3094 ||= true;
            (-10);
            var4934 ^ (-30)
        
        case _ => 
            [true, false, false, true, true, true, true, false, true, true];
            var6011
        
    }, var6656, optionalParam325 : var1821 ** (Int32(-91) & 3))
}

public func func6664(param6665 : Rune) : Range<UInt32> { // block id: 6666
    if (if (var4934 < 105) { // block id: 6672
        var404 << ((var4039) & 7);
        let var6678 : Int16 = Int16(UInt8(98));
        var6678 == Int16(-112)
    } else { // block id: 6682
        if (var6685) { Option<Int32>.None } else { Option<Int32>.Some(Int32(89)) } ;
        false
    }) { var437 } else { try { // block id: 6712
        var5146;
        if (var4773) { (UInt32(246)&127..UInt32(56)&127:(-60)|1) } else { var437 } 
    } finally { // block id: 6718
        (UInt32(153)&127..=UInt32(248)&127:(-34)|1)
    } } 
}


func func229(param230 : Unit) : Int32 { // block id: 231
    var var6891 : ?Range<UInt32> = Option<Range<UInt32>>.None;
    var234.func237(if (var2337) { 'F' } else { var3549 } , namedParam239 : (var6891 ?? (var4261&127..UInt32(240)&127:((-18)|1))), namedParam240 : Class44(), namedParam241 : (Option<UInt16>.Some(UInt16(90)) ?? UInt16(90)));
    let var6918 : Enum1870 = Enum1870.enumValue2393(Option<Range<Int8>>.None, func301, [((Int32(111)&127..Int32(-19)&127:55|1) as Int16), Option<Int16>.None, ((Option<Option<Option<Unit>>>.Some(Option<Option<Unit>>.None) as Array<Range<Int64>>) as Int16), (Option<Option<UInt16>>.Some(Option<UInt16>.None) as Int16), Option<Int16>.None, Option<Int16>.Some(Int16(-37)), (Int64(Int32(113)) as Int16), ("|f,^@Ig_,w" as Int16), Option<Int16>.Some(Int16(Int16(16))), (UInt64(114) as Int16)]);
    try { // block id: 6903
        var6910.getOrThrow();
        (Option<Range<UInt16>>.Some(var262) as (Unit, UInt8));
        match (var6918) {
            case enumValue2393(_, caseVar6948, caseVar6949 : Option<Option<Array<Range<Int64>>>>) => 
                var437;
                UInt64(87) > var3731;
                var6723
            
            case _ => 
                if (var415) { ((Int8(35)&127..=Int8(-53)&127:34|1), (UInt32(159)&127..UInt32(202)&127:(var4934|1)), Int8(91), (Int32(38)&127..Int32(-59)&127:34|1), (var4261&127..=var4261&127:((-75)|1)), var2496) } else { var2128 } ;
                if (var415) { Option<Class44>.None } else { Option<Class44>.None } ;
                var var6984 : Rune = 'Y';
                if (var5302) { Option<Rune>.Some(var3549) } else { Option<Rune>.Some(var6984) } 
            
        }
    } finally { // block id: 6986
        try { // block id: 6988
            var4195;
            [true, true, true, false, true, false, true, true, true, true];
            var6723
        } catch (e: Exception) { // block id: 6992
            ();
            param230;
            if (true) { Option<Rune>.None } else { var6723 } 
        }
    };
    match (try { // block id: 7001
            if (var4292) { Option<Interface49>.None } else { Option<Interface49>.Some(Class44()) } ;
            if (true) { var6910 } else { var6910 } 
        } catch (_) { // block id: 7011
            Option<Interface49>.Some(var909)
        }) {
        case caseVar7016 : Range<Int32> => 
            Int32(-47)
        
        case _ => 
            Int32(4)
        
        case caseVar7025 => 
            var4934 |= 31;
            var var7032 : UInt32 = UInt32(UInt8(Int8(Int8(Int8(106)))));
            var7032 **= (UInt32(245) & 3);
            Int32(16) ** (Int32(73) & 3)
        
        case _ => 
            var3731--;
            Int32(113) << ((var1821) & 7)
        
        case _ => 
            ();
            var1821++;
            -Int32(56)
        
    }
}


public func func7060(param7061 : Int64) : Unit { // block id: 7062
    if (try { // block id: 7065
        true
    } catch (e: Exception) { // block id: 7067
        false
    }) { // block id: 7069
        var5146;
        var loopTimeVar7075 : Int64 = 0;
        while ((var5302) && loopTimeVar7075 < 100 ) {
            loopTimeVar7075++;

        }
    };
    let var7094 : ?Float64 = (Option<Unit>.Some(()) as Float64);
    var loopTimeVar7100 : Range<UInt64> = (UInt64(UInt8(UInt8(UInt8(6))))&127..UInt64(UInt64(Int16(UInt8(120))))&127:(Int64(Int8(-78))|1));
    for (i in loopTimeVar7100 where if (var7079) { // block id: 7081
        ();
        var797;
        false
    } else { // block id: 7085
        false
    }) {
        (var7094 ?? 106.0);
        ()
    };
    ()
}


public func func145(param146 : Int32) : Range<UInt32> { // block id: 147
    try (resource = Class44()) { // block id: 149
        var152.func155(14.0, (Int16(33)&127..=Int16(93)&127:109|1), namedParam158 : (var2496&127..Int16(-64)&127:(var6011|1)), namedParam159 : var4934);
        Option<Unit>.None.getOrThrow()
    } catch (e: Exception) { // block id: 7171

    } finally { // block id: 7172
        var4195;
        var4934 += (-112)
    };
    var loopTimeVar7182 : Int64 = 0;
    while (((86 is (Range<Int16>, Option<Int16>) -> Range<UInt32>)) && loopTimeVar7182 < 100 ) {
        loopTimeVar7182++;

    };
    var var7224 : UInt16 = UInt16(111);
    if (try { // block id: 7185
        var2337
    } finally { // block id: 7187
        !var7079
    }) { ((Option<Option<Range<UInt32>>>.None ?? Option<Range<UInt32>>.None) ?? var437) } else { (if (if (var7202) { // block id: 7207
        var7209;
        var7213 && true
    } else if (false) { // block id: 7217
        true && var7213
    } else { // block id: 7221
        var7224 <<= ((UInt16(33)) & 7);
        true
    }) { (UInt32(203)&127..=UInt32(74)&127:(-36)|1) } else { (var4261&127..var4261&127:(43|1)) } ) } 
}


func func136(param137 : Int16) : Array<Unit> { // block id: 138
    func func140(param141 : Range<UInt32>) : Int64 { // block id: 142
        (-50)
    }
;
    func140((var1525|>func145));
    (if ((var412 ?? var6685)) { (Option<Option<UInt16>>.None as Option<Option<Range<Int8>>>) } else { (var6528 as Option<Option<Range<Int8>>>) }  ?? ((Option<Bool>.Some(var7213) as Option<Option<Range<Int8>>>) ?? (UInt64(223) as Option<Range<Int8>>)));
    var var7286 : UInt32 = UInt32(UInt8(196));
    let var7296 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    match (if ((var7258 ?? var2337)) { // block id: 7261
            ();
            ((), UInt8(44))
        } else if ((var7268 ?? var3094)) { // block id: 7272
            var1884;
            (var4195, var4624)
        } else { // block id: 7277
            var234;
            var4764
        }) {
        case (_ : Option<Class44>,caseVar7282 : Option<Option<Range<UInt32>>>) => 
            var7286 |= UInt32(254);
            var2694 *= Float32(55.0);
            if (false) { var7296 } else { [(), (), (), (), (), (), (), (), (), ()] } 
        
        case (caseVar7301 : Int64,caseVar7302) => 
            var7209
        
        case _ => 
            [(), (), (), (), (), (), (), (), (), ()]
        
    }
}


public func func7(namedParam8 ! : Float64, optionalParam9 ! : String = """
z(Ra3
`H-(5
""", optionalParam11 ! : UInt32 = UInt32(192), optionalParam13 ! : UInt8 = UInt8(114)) : Unit { // block id: 15
    let var70 : Interface47 = Class44();
    var var78 : UInt32 = UInt32(Int16(42));
    try (resource = Class44()) { // block id: 17

    } catch (e: Exception) { // block id: 18
        var var21 : Rune = '7';
        let var27 : Unit = ();
        match (var21) {
            case 'Y' | '1' | 't' | 'a' => 
                var27;
                UInt8(168) / ((UInt8(219)) | 1)
            
            case 'G' => 
                false;
                UInt8(162)
            
            case _ => 
                ();
                optionalParam13 ** (optionalParam13 & 3)
            
        };
        Class44.var53
    } finally { // block id: 55
        [(), (), (), (), (), (), (), (), (), ()][8];
        let var93 : Unit = ();
        var var105 : Int32 = Int32(UInt8(178));
        var var109 : Int32 = Int32(Int32(-109));
        match (var70) {
            case _ => 
                false;
                var78++
            
            case caseVar83 : Rune => 
                ();
                var var90 : Int64 = (-96);
                (optionalParam13&127..=UInt8(65)&127:(var90|1));
                var93
            
            case _ => 
                (UInt32(144)&127..=UInt32(91)&127:(-108)|1);
                ()
            
            case _ => 
                var105 &= var109;
                ();
                var93
            
            case _ => 
                var93
            
        };
        var var119 : Bool = true;
        var loopTimeVar125 : Range<UInt64> = (UInt64(UInt32(120))&127..=UInt64(Int16(UInt16(UInt8(156))))&127:((-5)|1));
        for (i in loopTimeVar125 where var119) {
            var105 += var105
        }
    };
    var var7315 : Option<Int16> = (Int32(80) as Int16);
    ((var7315 ?? Int16(29))|>func136)[7]
}

main(): Int64 {
    try {
        var var7334 : Unit = ();
        func7(namedParam8 : Float64(var4856), optionalParam9 : if (true) { // block id: 7324
            if (var2337) { var5520 } else { var5520 } 
        } else if (false) { // block id: 7330
            var5520
        } else { // block id: 7332
            var7334;
            Option<Option<Unit>>.Some(var2059);
            ###"Uu$TAt9g-6"###
        }, optionalParam13 : UInt8(var1634));
        try { // block id: 7342
            var7334;
            var7258;
            (-75) >> ((var1020) & 7)
        } finally { // block id: 7348
            var1884;
            var4934
        }
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Enum1870 {

}

extend Aggregate1154 {

}

extend Class44 {
    static func func318(param319 : Int64, param320 : (Int64) -> Int32, optionalParam323 ! : Bool = false, optionalParam325 ! : Int32 = Int32(76)) : UInt16 { // block id: 327
        var var463 : UInt64 = UInt64(UInt8(222));
        func330(((Int8(-44)&127..Int8(-75)&127:(param319|1)), var437, Int8(-46), (Int32(-96)&127..Int32(-4)&127:33|1), var448, Int16(-94))[4], namedParam332 : try { // block id: 459
            ((-96)&127..(-18)&127:73|1);
            (var463&127..=var463&127:(param319|1))
        } finally { // block id: 468
            var var470 : String = ###" GR]L\\bfV,"###;
            var470;
            if (optionalParam323) { Option<Range<UInt16>>.Some((UInt16(161)&127..UInt16(250)&127:108|1)) } else { Option<Range<UInt16>>.Some((UInt16(2)&127..=UInt16(44)&127:((-122)|1))) } ;
            if (var415) { var484 } else { (UInt64(228)&127..=UInt64(135)&127:(28|1)) } 
        }).func491(namedParam492 : try { // block id: 6616
            if (true) { var6528 } else { var6528 } 
        } catch (_) { // block id: 6621
            var4195;
            Class44(optionalParam3040 : (var3178&127..=var2018&127:(68|1)), namedParam3049 : param320)
        }, namedParam493 : (var6453 ?? var2224))
    }

}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_unexpected_declaration_in_scope
// ASSERT: scan parse_expected_expr_or_decl_in
// ASSERT: scan parse_expected_character
// ASSERT: scan parse_trailing_closure_only_follow_name
// ASSERT: scan parse_expected_left_brace
// ASSERT: scan parse_expected_case
// ASSERT: scan parse_expected_catch_or_finally_in_try


