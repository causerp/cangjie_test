/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output


public var var22 : Bool = false
public let var55 : Int32 = Int32(114)
public var var112 : UInt8 = UInt8(156)
public var var125 : Array<UInt8> = [UInt8(165), UInt8(77), UInt8(29), UInt8(247), UInt8(165), UInt8(78), UInt8(106), UInt8(23), UInt8(92), UInt8(8)]
public let var147 : Float32 = Float32(75.0)
public var var153 : Unit = ()
public var var164 : Int64 = (-27)
public var var237 : Int16 = Int16(-6)
public let var252 : Range<Int8> = (Int8(45)&127..=Int8(92)&127:113|1)
public let var327 : Int64 = Int64(Int32(Int16(Int16(Int8(-61)))))
public var var360 : UInt64 = UInt64(Int8(-107))
public let var369 : UInt32 = UInt32(UInt16(UInt8(241)))
public var var378 : Int8 = Int8(-4)
public let var393 : Option<Enum8> = ((UInt32(119)&127..UInt32(Int32(71))&127:(59|1)) as Enum8)
public var var454 : ?Bool = ('Z' as Bool)
public var var554 : ?Unit = (([(), (), (), (), (), (), (), (), (), ()], UInt64(212), Int32(-122), ((Int32(-32)&127..=Int32(83)&127:24|1) is (Float64, Array<UInt8>, Range<Int8>) -> (Range<Int16>, Range<Int64>, Int32, Float32, Unit)), (Int32(-90)&127..Int32(-40)&127:5|1), (Int32(-109)&127..Int32(UInt16(119))&127:(Int64(Int16(87))|1)), (UInt32(59), """
/x[Zo
b7H=3
""", Int32(UInt8(19)), Int16(UInt8(190)), (), Int8(UInt8(250)), true), (Int16(116)&127..=Int16(Int8(-57))&127:((-88)|1))) as Unit)
public var var597 : Range<UInt64> = (UInt64(149)&127..UInt64(196)&127:(Int64(UInt16(169))|1))
public let var650 : UInt16 = UInt16(UInt16(83))
public var var677 : Unit = ()
public var var685 : (UInt16, Bool, Bool, UInt32, Bool, Int16, Range<UInt32>) = (UInt16(209), ([false, false, false, (UInt64(63) is UInt64), ((125&127..22&127:(-109)|1) is (Range<UInt16>) -> Bool), false, true, true, false, (Float32(77.0) is UInt32)] is Rune), true, UInt32(UInt32(Int16(-73))), false, Int16(Int16(Int16(-116))), (UInt32(62)&127..=UInt32(22)&127:(-125)|1))
public var var756 : Option<Range<UInt16>> = ((Int8(-66)&127..Int8(24)&127:59|1) as Range<UInt16>)
public var var850 : (Bool, Range<Int8>, (UInt16, Bool, Bool, UInt32, Bool, Int16, Range<UInt32>), Range<UInt32>) = (([(UInt16(244)&127..UInt16(89)&127:(-83)|1), (UInt16(13)&127..UInt16(227)&127:56|1), (UInt16(141)&127..UInt16(52)&127:(-112)|1), (UInt16(26)&127..=UInt16(196)&127:33|1), (UInt16(166)&127..UInt16(4)&127:95|1), (UInt16(119)&127..=UInt16(51)&127:(-43)|1), (UInt16(118)&127..=UInt16(141)&127:(-69)|1), (UInt16(36)&127..=UInt16(105)&127:(-51)|1), (UInt16(100)&127..=UInt16(3)&127:67|1), (UInt16(67)&127..=UInt16(14)&127:64|1)] is Rune), (Int8(-109)&127..Int8(103)&127:(Int64(Int16(UInt8(13)))|1)), (UInt16(Int8(UInt8(41))), ([5, (-19), (-110), (-104), 55, (-97), (-23), 113, (-71), 19] is Range<Int32>), false, UInt32(77), true, Int16(-87), (UInt32(47)&127..=UInt32(220)&127:18|1)), (UInt32(79)&127..UInt32(UInt32(199))&127:(91|1)))
public var var881 : UInt32 = UInt32(Int32(Int32(122)))
public var var892 : Range<UInt16> = (UInt16(226)&127..=UInt16(83)&127:(Int64(Int8(-78))|1))
public var var918 : UInt16 = UInt16(UInt16(56))
public let var951 : UInt16 = UInt16(UInt8(23))
public let var983 : Class348 = Class348()
public var var1103 : Unit = ()
public var var1211 : (Range<Int16>, Range<Int64>, Int32, Float32, Unit) = ((Int16(Int16(Int8(0)))&127..Int16(UInt16(Int8(-124)))&127:(Int64(Int8(61))|1)), ((-54)&127..=(-94)&127:114|1), Int32(-17), Float32(Float32(-41.0)), ())
public let var1286 : (Range<Int64>, Option<Class348>, Array<Int64>) = (((-107)&127..11&127:(-117)|1), ((UInt64(145)&127..=UInt64(130)&127:(-11)|1) as Class348), [68, (-40), Int64(Int16(-8)), Int64(Int32(UInt16(68))), Int64(Int16(Int16(-21))), 10, (-7), 26, Int64(UInt64(83)), 1])
public let var1434 : ((UInt32, String, Int32, Int16, Unit, Int8, Bool), UInt8, Range<UInt16>, Float64, (Int16, Unit, Range<Int32>, (Range<Int16>, Float32, Range<UInt64>), Range<Int32>)) = ((UInt32(UInt16(Int16(-60))), "yg!L-/}|(W", Int32(109), Int16(UInt8(UInt8(173))), (), Int8(UInt8(23)), ((UInt64(55)&127..=UInt64(62)&127:(40|1)) is UInt64)), UInt8(Int8(100)), (UInt16(8)&127..=UInt16(202)&127:30|1), Float64(Float32(120.0)), (Int16(UInt8(155)), (), (Int32(-6)&127..=Int32(-81)&127:(-70)|1), ((Int16(-127)&127..=Int16(107)&127:(73|1)), Float32(-13.0), (UInt64(252)&127..=UInt64(162)&127:(-28)|1)), (Int32(Int32(-57))&127..=Int32(48)&127:(Int64(Int32(48))|1))))
public var var1550 : String = "Wy 5G=a1U-"
public var var1567 : Array<Bool> = [true, ((UInt16(Int8(-106)), (Option<Int64>.None is Int32), false, UInt32(195), true, Int16(8), (UInt32(116)&127..UInt32(196)&127:(55|1))) is (UInt32, String, Int32, Int16, Unit, Int8, Bool)), ((Int8(Int8(-101))&127..=Int8(-61)&127:(Int64(UInt64(222))|1)) is Option<Array<Class348>>), ([(-51), (-69), 52, 93, 34, 48, 92, 48, (-56), 25] is (Int16, Unit, Range<Int32>, (Range<Int16>, Float32, Range<UInt64>), Range<Int32>)), false, false, ((Float32(62.0) as Int8) is Float64), true, (UInt64((-122)) is UInt32), ((1&127..=116&127:78|1) is Option<Enum8>)]
public var var1729 : Range<Int32> = (Int32(81)&127..=Int32(-7)&127:(-55)|1)
public var var1903 : Option<Int8> = (([UInt8(47), UInt8(34), UInt8(187), UInt8(68), UInt8(150), UInt8(175), UInt8(202), UInt8(108), UInt8(9), UInt8(96)] as Int64) as Int8)
public var var1921 : Int32 = Int32(UInt16(61))
public let var1974 : Int8 = Int8(Int8(48))
public var var2022 : Array<Unit> = Array<Unit>(10){ i => () }
public var var2110 : Int8 = Int8(Int8(Int8(UInt8(Int8(75)))))
public let var2117 : Option<Bool> = ([(UInt16(UInt16(0))&127..UInt16(UInt8(196))&127:(Int64(Int8(31))|1)), (UInt16(19)&127..UInt16(15)&127:(Int64(UInt16(234))|1)), (UInt16(15)&127..UInt16(245)&127:(-77)|1), (UInt16(253)&127..UInt16(61)&127:(Int64(Int32(90))|1)), (UInt16(57)&127..=UInt16(Int16(-106))&127:(Int64(Int32(66))|1)), (UInt16(96)&127..=UInt16(17)&127:(-62)|1), (UInt16(39)&127..UInt16(188)&127:42|1), (UInt16(230)&127..=UInt16(81)&127:(-86)|1), (UInt16(5)&127..=UInt16(Int16(18))&127:((-17)|1)), (UInt16(15)&127..=UInt16(UInt8(11))&127:((-62)|1))] as Bool)
public var var2168 : Unit = ()
public var var2220 : UInt32 = UInt32(198)
public let var2248 : Int8 = Int8(UInt8(145))
public var var2299 : Unit = ()
public var var2416 : ?Array<Bool> = Option<Array<Bool>>.None
public var var2421 : ?Array<Enum8> = ((((Int16(-121)&127..Int16(-79)&127:((-37)|1)), (96&127..33&127:(-19)|1), Int32(Int32(-64)), Float32(108.0), ()) is Option<Int8>) as Array<Enum8>)
public let var2503 : (Array<Unit>, UInt64, Int32, Bool, Range<Int32>, Range<Int32>, (UInt32, String, Int32, Int16, Unit, Int8, Bool), Range<Int16>) = ([(), (), (), (), (), (), (), (), (), ()], UInt64(125), Int32(89), true, (Int32(UInt32(170))&127..Int32(UInt32(Int16(-66)))&127:(115|1)), (Int32(UInt16(Int8(25)))&127..Int32(UInt16(202))&127:(13|1)), (UInt32(73), """
u0${var1550}G${var1550}Em
8${var1550}?]H8
""", Int32(-22), Int16(Int16(47)), (), Int8(120), true), (Int16(19)&127..=Int16(-105)&127:2|1))
public let var2558 : Unit = ()
public let var2561 : Int8 = Int8(Int8(Int8(Int8(118))))
let var2711 : Range<UInt16> = (UInt16(2)&127..=UInt16(Int8(UInt8(219)))&127:(96|1))
public let var2721 : Array<Range<Int16>> = [(Int16(Int8(Int8(67)))&127..Int16(UInt16(Int8(101)))&127:((-112)|1)), (Int16(-48)&127..=Int16(55)&127:112|1), (Int16(64)&127..=Int16(-4)&127:(Int64(UInt64(UInt64(134)))|1)), (Int16(UInt16(26))&127..=Int16(UInt16(62))&127:(Int64(Int64(UInt64(181)))|1)), (Int16(8)&127..Int16(-37)&127:125|1), (Int16(-108)&127..Int16(-101)&127:48|1), (Int16(94)&127..=Int16(95)&127:(-39)|1), (Int16(-25)&127..=Int16(-89)&127:(-94)|1), (Int16(-5)&127..=Int16(-51)&127:(Int64(UInt16(UInt8(24)))|1)), (Int16(Int16(30))&127..=Int16(-86)&127:(Int64(Int64(UInt16(186)))|1))]
public var var2784 : Enum8 = Enum8.defaultValue
public let var2809 : Array<Class348> = [Class348(), Class348(), Class348(), Class348(), Class348(), Class348(), Class348(), Class348(), Class348(), Class348()]
public var var2833 : Unit = ()
public var var2857 : Float64 = Float64(Float32(Float32(-83.0)))
public var var2876 : Unit = ()
public var var2903 : ?Bool = Option<Bool>.None
public var var2917 : Rune = 'A'
public var var2948 : Range<Int16> = (Int16(40)&127..=Int16(-125)&127:3|1)
public var var2991 : UInt8 = UInt8(UInt8(56))
public var var3033 : Range<Int32> = (Int32(86)&127..Int32(-103)&127:(-106)|1)
public let var3056 : (Int16, Unit, Range<Int32>, (Range<Int16>, Float32, Range<UInt64>), Range<Int32>) = (Int16(Int8(108)), (), (Int32(111)&127..Int32(-22)&127:(86|1)), ((Int16(Int8(13))&127..=Int16(99)&127:(Int64(Int32(10))|1)), Float32(Float32(61.0)), (UInt64(23)&127..=UInt64(234)&127:(-37)|1)), (Int32(Int16(-41))&127..Int32(31)&127:(Int64(UInt64(244))|1)))
public var var3086 : ?UInt8 = Option<UInt8>.None
public let var3116 : (Int16, Unit, Range<Int32>, (Range<Int16>, Float32, Range<UInt64>), Range<Int32>) = (Int16(-98), (), (Int32(UInt16(UInt8(203)))&127..=Int32(UInt8(UInt8(138)))&127:((-51)|1)), ((Int16(118)&127..=Int16(-98)&127:(-46)|1), Float32(52.0), (UInt64(Int32(-37))&127..=UInt64(52)&127:(16|1))), (Int32(-76)&127..Int32(-100)&127:(Int64(Int8(113))|1)))
public var var3145 : Option<Rune> = (((-103)&127..=Int64(Int32(Int8(-34)))&127:((-17)|1)) as Rune)
public var var3230 : ?Int64 = Option<Int64>.None
public var var3359 : Int8 = Int8(UInt8(60))
public var var3421 : Option<Range<UInt16>> = ([(Int16(34)&127..Int16(85)&127:62|1), (Int16(-95)&127..Int16(Int16(-107))&127:(Int64(UInt64(18))|1)), (Int16(Int16(41))&127..Int16(-94)&127:(Int64(Int8(43))|1)), (Int16(37)&127..Int16(39)&127:11|1), (Int16(-23)&127..Int16(12)&127:(-83)|1), (Int16(-8)&127..Int16(-73)&127:(Int64(Int8(-30))|1)), (Int16(UInt16(162))&127..=Int16(-98)&127:(42|1)), (Int16(-99)&127..Int16(80)&127:(-77)|1), (Int16(-118)&127..Int16(-55)&127:(Int64(Int8(123))|1)), (Int16(-77)&127..Int16(UInt8(226))&127:(109|1))] as Range<UInt16>)
public let var3558 : Array<Enum8> = [Enum8.defaultValue, Enum8.defaultValue, Enum8.defaultValue, Enum8.defaultValue, Enum8.defaultValue, Enum8.defaultValue, Enum8.defaultValue, Enum8.defaultValue, Enum8.defaultValue, Enum8.defaultValue]
public let var3592 : UInt32 = UInt32(213)
public var var3608 : Unit = ()
public var var3628 : Array<Int64> = Array<Int64>(10){ i => 80 }
public var var3706 : Int64 = Int64(Int32(Int16(-14)))
public let var3721 : ?Class348 = Option<Class348>.None
public let var3727 : Unit = ()
public var var3765 : Enum68 = Enum68.defaultValue
public var var3788 : Range<UInt32> = (UInt32(183)&127..=UInt32(133)&127:77|1)
public var var3800 : Unit = ()
public var var3810 : Unit = ()
public var var3825 : Bool = true
public let var3833 : Int8 = Int8(116)
public let var3874 : Class348 = Class348()
public var var3882 : Class348 = Class348()
public var var4008 : Range<Int64> = (90&127..(-11)&127:(-115)|1)
public let var4058 : Range<UInt16> = (UInt16(39)&127..=UInt16(25)&127:((-126)|1))
public var var4117 : Bool = ((UInt16(Int16(46)), ([60, (-122), (-48), (-3), (-39), 11, (-2), (-45), (-11), (-30)] is Array<Unit>), ('S' is (Option<Array<Bool>>) -> Unit), UInt32(UInt8(124)), ([(Int16(91)&127..=Int16(-49)&127:(55|1)), (Int16(81)&127..Int16(76)&127:((-31)|1)), (Int16(0)&127..Int16(21)&127:53|1), (Int16(-24)&127..Int16(95)&127:((-60)|1)), (Int16(-121)&127..=Int16(124)&127:((-122)|1)), (Int16(-44)&127..=Int16(-31)&127:(107|1)), (Int16(-70)&127..=Int16(-8)&127:(-95)|1), (Int16(-17)&127..Int16(111)&127:(109|1)), (Int16(-47)&127..Int16(-122)&127:(-30)|1), (Int16(-107)&127..=Int16(-51)&127:(-116)|1)] is (Range<Int16>, Range<Int64>, Int32, Float32, Unit)), Int16(-92), (UInt32(Int32(-35))&127..UInt32(UInt8(64))&127:((-107)|1))) is (Int64) -> UInt64)
public let var4208 : UInt8 = UInt8(Int8(UInt8(Int8(100))))
public var var4220 : Unit = ()
public let var4277 : (Range<Int16>, Float32, Range<UInt64>) = ((Int16(-73)&127..Int16(-124)&127:82|1), Float32(Float32(-120.0)), (UInt64(221)&127..UInt64(52)&127:3|1))
public var var4300 : Bool = false
public var var4330 : Float32 = Float32(Float32(Float32(Float32(Float32(87.0)))))
public var var4411 : UInt32 = UInt32(202)
public let var4430 : Option<(Array<Unit>, Array<Int64>, Array<UInt8>, Option<Unit>)> = ((UInt32(107) as Option<(UInt32, String, Int32, Int16, Unit, Int8, Bool)>) as (Array<Unit>, Array<Int64>, Array<UInt8>, Option<Unit>))
public var var4435 : (Array<Unit>, Array<Int64>, Array<UInt8>, Option<Unit>) = ([(), (), (), (), (), (), (), (), (), ()], [Int64(20), Int64(UInt16(147)), Int64(UInt64(190)), 37, Int64(UInt32(UInt32(208))), (-99), 28, Int64(Int16(Int8(-85))), Int64(UInt64(140)), Int64(UInt32(145))], [UInt8(10), UInt8(103), UInt8(141), UInt8(137), UInt8(155), UInt8(245), UInt8(142), UInt8(24), UInt8(41), UInt8(130)], Option<Unit>.None)
public var var4477 : UInt64 = UInt64(Int16(Int8(Int8(UInt8(76)))))
public var var4499 : ?UInt8 = ((UInt16(UInt16(Int8(30)))&127..=UInt16(UInt8(0))&127:(5|1)) as UInt8)
public let var4542 : String = "T\\^z$h&0vF"
public let var4587 : Int64 = Int64(Int64(Int32(UInt8(173))))
public var var4609 : Int32 = Int32(UInt8(UInt8(Int8(-88))))
public let var4630 : Unit = ()
public let var4644 : ?UInt32 = (Float64(Float64(Float64(100.0))) as UInt32)
public var var4746 : UInt8 = UInt8(22)
public var var4851 : ?Array<Bool> = ((((-64)&127..116&127:4|1), Option<Class348>.None, [9, 125, (-55), (-110), (-89), (-118), 59, 81, (-91), 65]) as Array<Bool>)
let var4927 : UInt16 = UInt16(175)
public var var4949 : UInt8 = UInt8(UInt8(Int8(52)))
public var var4989 : (UInt32, String, Int32, Int16, Unit, Int8, Bool) = (UInt32(Int16(Int16(110))), "#${var4542}Omq${var4542}R M.${var4542}s${var4542}/", Int32(32), Int16(Int16(97)), (), Int8(90), true)
let var5133 : ?UInt64 = Option<UInt64>.None
public var var5153 : Bool = false
public var var5202 : Bool = (Float32(-118.0) is (Option<Bool>, Int32) -> (UInt16, Bool, Bool, UInt32, Bool, Int16, Range<UInt32>))
public let var5323 : ?UInt32 = ('e' as UInt32)
public var var5329 : ?Unit = Option<Unit>.None
public var var5361 : ?Array<Int64> = Option<Array<Int64>>.None
var var5370 : ?Array<UInt8> = (Option<Range<Int8>>.None as Array<UInt8>)
public let var5419 : Option<Range<Int8>> = (([(), (), (), (), (), (), (), (), (), ()], [Int64(UInt16(239)), (-68), Int64(87), (-117), Int64(UInt32(29)), 4, (-104), Int64(UInt64(181)), (-97), Int64(Int32(-30))], [UInt8(116), UInt8(175), UInt8(14), UInt8(12), UInt8(77), UInt8(106), UInt8(124), UInt8(141), UInt8(164), UInt8(78)], Option<Unit>.None) as Range<Int8>)
public let var5473 : Int64 = Int64(UInt64(134))
var var5505 : UInt64 = UInt64(191)
let var5532 : ?(UInt32, String, Int32, Int16, Unit, Int8, Bool) = Option<(UInt32, String, Int32, Int16, Unit, Int8, Bool)>.None
public var var5545 : Option<Option<Int64>> = (Class348() as Option<Int64>)
public let var5569 : Int64 = Int64(Int8(92))
public var var5661 : Int64 = Int64(UInt32(251))
public var var5683 : ?Array<Range<UInt16>> = Option<Array<Range<UInt16>>>.None
public var var5835 : Bool = ('7' is ((Array<Unit>, Array<Int64>, Array<UInt8>, Option<Unit>)) -> (UInt32, String, Int32, Int16, Unit, Int8, Bool))
public let var5852 : Int64 = (-37)
var var5867 : ?String = Option<String>.None
public var var5905 : Float32 = Float32(Float32(-45.0))
public var var5933 : Int64 = (-39)
public let var5970 : Enum8 = Enum8.defaultValue
public var var5992 : UInt8 = UInt8(194)
public enum Enum8 {
    defaultValue |
    enumValue2452(Option<Unit>) |
    enumValue2476((Range<Int16>, Float32, Range<UInt64>), Bool) |
    enumValue2490(Option<Array<Bool>>) |
    enumValue2580((Range<UInt16>) -> Bool, ((UInt32, String, Int32, Int16, Unit, Int8, Bool), UInt8, Range<UInt16>, Float64, (Int16, Unit, Range<Int32>, (Range<Int16>, Float32, Range<UInt64>), Range<Int32>)), (Bool, Range<Int8>, (UInt16, Bool, Bool, UInt32, Bool, Int16, Range<UInt32>), Range<UInt32>), Option<Unit>) |
    enumValue2645(Int8, Option<Bool>) |
    enumValue3543(Bool, Option<UInt8>)
}

public enum Enum68 {
    defaultValue |
    enumValue1519(Range<UInt64>, Option<Unit>)
}




public open class Class348 <: Resource {
    public init() { // block id: 350

    }
;
    public let var986 : (Range<Int16>, Float32, Range<UInt64>) = ((Int16(5)&127..=Int16(-15)&127:(15|1)), Float32(98.0), (UInt64(136)&127..=UInt64(152)&127:(94|1)));
    static var var1751 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    public static let var1799 : Array<Range<UInt16>> = [(UInt16(64)&127..UInt16(80)&127:110|1), (UInt16(82)&127..UInt16(172)&127:(-70)|1), (UInt16(188)&127..UInt16(235)&127:((-86)|1)), (UInt16(47)&127..UInt16(8)&127:((-39)|1)), (UInt16(67)&127..=UInt16(170)&127:(80|1)), (UInt16(98)&127..UInt16(219)&127:((-1)|1)), (UInt16(5)&127..=UInt16(151)&127:90|1), (UInt16(31)&127..=UInt16(217)&127:(-34)|1), (UInt16(46)&127..=UInt16(83)&127:(-17)|1), (UInt16(228)&127..=UInt16(51)&127:(-47)|1)];
    public init(param3734 : UInt64) { // block id: 3735
        let var3745 : ?Array<Range<UInt16>> = Option<Array<Range<UInt16>>>.Some([(UInt16(109)&127..UInt16(164)&127:(-119)|1), (UInt16(57)&127..=UInt16(184)&127:(-70)|1), (UInt16(31)&127..=UInt16(210)&127:43|1), (UInt16(190)&127..UInt16(75)&127:(-15)|1), (UInt16(249)&127..=UInt16(85)&127:(-86)|1), (UInt16(94)&127..=UInt16(198)&127:(-37)|1), (UInt16(80)&127..UInt16(5)&127:61|1), (UInt16(158)&127..UInt16(31)&127:(-38)|1), (UInt16(140)&127..UInt16(195)&127:66|1), (UInt16(67)&127..UInt16(47)&127:112|1)]);
        let var3770 : Unit = ();
        var loopTimeVar3777 : Int64 = 0;
        while ((var22) && loopTimeVar3777 < 100 ) {
            loopTimeVar3777++;
            (var3745 ?? [var892, var892, var2711, var2711, var892, var892, (UInt16(28)&127..UInt16(8)&127:(-59)|1), (UInt16(18)&127..UInt16(147)&127:(-49)|1), (UInt16(199)&127..=UInt16(46)&127:25|1), var2711]);
            if (false) { // block id: 3761
                if (true) { var3765 } else { Enum68.defaultValue } ;
                [UInt8(143), UInt8(118), UInt8(134), UInt8(242), UInt8(235), UInt8(254), UInt8(62), UInt8(237), UInt8(218), UInt8(155)];
                var3770
            } else if (var22) { // block id: 3773
                var1103;
                var677
            }
        };
        var loopTimeVar3792 : Int64 = 0;
        do {
            loopTimeVar3792++;

        } while ((((var951, true, var22, UInt32(77), true, Int16(40), var3788) is Array<Class348>)) && loopTimeVar3792 < 100 ) ;
        try (resource = Class348()) { // block id: 3794
            var1103;
            try (resource = Class348()) { // block id: 3797
                Int32(82);
                var3800
            } finally { // block id: 3802
                var3727;
                var153
            }
        } finally { // block id: 3805

        }
    }
;
    public init(param4235 : () -> Array<Enum8>) { // block id: 4237
        var3800;
        match (match ((Int8(-56) as Int8)) {
                case caseVar4245 => 
                    if (var22) { ((-42)&127..=var3706&127:((-99)|1)) } else { ((-125)&127..=107&127:(-20)|1) } ;
                    var1921 **= (Int32(-36) & 3);
                    if (var22) { var3558 } else { var3558 } 
                
                case _ => 
                    var147;
                    [var2784, var2784, var2784, var2784, var2784, var2784, var2784, Enum8.enumValue2645(var2561, Option<Bool>.None), Enum8.enumValue2476(var4277, false), var2784]
                
            }) {
            case caseVar4287 : Range<UInt8> => 
                var3116;
                0
            
            case _ => 
                var164
            
            case _ : Array<Class348> => 
                var4300 ||= var22;
                var327
            
            case _ => 
                var164
            
        }
    }
;
    public var var4354 : ?(UInt32, String, Int32, Int16, Unit, Int8, Bool) = Option<(UInt32, String, Int32, Int16, Unit, Int8, Bool)>.None;
    private static var var4373 : Bool = true;
    open func func4325(param4326 : ((UInt32, String, Int32, Int16, Unit, Int8, Bool), UInt8, Range<UInt16>, Float64, (Int16, Unit, Range<Int32>, (Range<Int16>, Float32, Range<UInt64>), Range<Int32>))) : (UInt32, String, Int32, Int16, Unit, Int8, Bool) { // block id: 4327
        var4330 /= Float32((Int32(Float32(var4330) * (Float32(46.0) - Float32(61.0)))) | 1);
        ((Option<Option<(UInt32, String, Int32, Int16, Unit, Int8, Bool)>>.None ?? var4354) ?? ((Option<Option<(UInt32, String, Int32, Int16, Unit, Int8, Bool)>>.Some(Option<(UInt32, String, Int32, Int16, Unit, Int8, Bool)>.None) ?? Option<(UInt32, String, Int32, Int16, Unit, Int8, Bool)>.None) ?? try { // block id: 4370
            var var4384 : (UInt32, String, Int32, Int16, Unit, Int8, Bool) = (UInt32(235), ">7RjAy)#oN", Int32(-87), Int16(UInt16(240)), (), Int8(UInt8(Int8(UInt8(33)))), true);
            if (var4373) { (var3592, "X#P8Q}Nb&G", Int32(-116), var237, (), var3833, false) } else { var4384 } 
        } finally { // block id: 4397
            (var2220, """
SYTO.
&-rw_
""", var55, Int16(94), var2168, var3359, true)
        }))
    }
;
    public static func func1661(namedParam1662 ! : (Array<Unit>, Array<Int64>, Array<UInt8>, Option<Unit>)) : (UInt32, String, Int32, Int16, Unit, Int8, Bool) { // block id: 1663
        if (if (var22) { // block id: 1668
            var var1670 : (UInt64, Range<UInt64>, Range<UInt64>, Int64, Array<Bool>, (Bool, Range<Int8>, (UInt16, Bool, Bool, UInt32, Bool, Int16, Range<UInt32>), Range<UInt32>)) = (UInt64(249), (UInt64(128)&127..=UInt64(90)&127:74|1), (UInt64(33)&127..UInt64(84)&127:105|1), Int64(Int16(-111)), [false, true, true, true, false, true, false, true, true, false], (((UInt16(150)&127..UInt16(85)&127:(89|1)) is Range<Int8>), (Int8(-31)&127..Int8(118)&127:(Int64(Int32(-58))|1)), (UInt16(Int16(-78)), ((Int8(-58)&127..Int8(-6)&127:((-94)|1)) is (Bool, Range<Int8>, (UInt16, Bool, Bool, UInt32, Bool, Int16, Range<UInt32>), Range<UInt32>)), true, UInt32(Int32(39)), (UInt64(18) is Array<Unit>), Int16(82), (UInt32(251)&127..UInt32(44)&127:86|1)), (UInt32(171)&127..UInt32(89)&127:47|1)));
            var1670;
            var22
        } else { // block id: 1706
            var var1741 : Int16 = Int16(Int8(Int8(Int8(UInt8(201)))));
            let var1769 : (UInt32, String, Int32, Int16, Unit, Int8, Bool) = (UInt32(UInt8(169)), "TvnQ~>a4=M", Int32(Int16(Int8(-3))), Int16(Int8(UInt8(UInt8(101)))), (), Int8(UInt8(UInt8(171))), false);
            if (false) { ([(), var677, var153, var153, var1103, (), (), var677, var677, var153], UInt64(153), var55, var22, (var55&127..=var55&127:(var327|1)), var1729, (UInt32(48), var1550, Int32(101), Int16(44), (), var378, true), (var1741&127..=var1741&127:(18|1))) } else { (var1751, UInt64(232), var55, var22, var1729, var1729, var1769, (Int16(126)&127..var1741&127:(76|1))) } ;
            Option<Range<UInt16>>.None;
            let var1792 : Bool = false;
            var1792
        }) { (if (var22) { [(UInt16(79)&127..UInt16(178)&127:69|1), (UInt16(36)&127..=UInt16(232)&127:108|1), (UInt16(189)&127..=UInt16(242)&127:(-21)|1), (UInt16(13)&127..UInt16(231)&127:(-54)|1), (UInt16(240)&127..UInt16(150)&127:(-37)|1), (UInt16(67)&127..UInt16(140)&127:(-59)|1), (UInt16(12)&127..UInt16(16)&127:(-6)|1), (UInt16(203)&127..=UInt16(73)&127:(-88)|1), (UInt16(156)&127..UInt16(114)&127:(-76)|1), (UInt16(155)&127..UInt16(189)&127:19|1)] } else { [(UInt16(222)&127..UInt16(237)&127:(-18)|1), (UInt16(115)&127..UInt16(69)&127:120|1), (UInt16(17)&127..=UInt16(216)&127:33|1), (UInt16(84)&127..UInt16(30)&127:80|1), (UInt16(43)&127..=UInt16(197)&127:33|1), (UInt16(179)&127..UInt16(153)&127:101|1), (UInt16(226)&127..=UInt16(108)&127:(-29)|1), (UInt16(24)&127..UInt16(26)&127:(-21)|1), (UInt16(157)&127..UInt16(41)&127:(-2)|1), (UInt16(105)&127..UInt16(226)&127:110|1)] } ) } else { var1799 } [5];
        func1826(optionalParam1827 : ([(), (), (), (), (), (), (), (), (), ()], [81, 22, 48, (-24), 91, (-21), 30, (-7), (-67), (-44)], [UInt8(143), UInt8(45), UInt8(45), UInt8(179), UInt8(12), UInt8(57), UInt8(131), UInt8(204), UInt8(163), UInt8(180)], var554)).func4325(if (var3825) { ((var4411, var1550, var55, Int16(-51), var153, Int8(120), var22), var4208, var4058, 55.0, var3116) } else { var1434 } )
    }
;
    public init(param1426 : (UInt16, Bool, Bool, UInt32, Bool, Int16, Range<UInt32>), param1427 : Range<Int64>) { // block id: 1428
        var1434[4][1];
        var var4696 : ((Bool, Range<Int8>, (UInt16, Bool, Bool, UInt32, Bool, Int16, Range<UInt32>), Range<UInt32>)) -> Option<Array<Class348>> = func1480;
        var var4728 : UInt32 = UInt32(UInt32(Int16(Int16(UInt8(32)))));
        var var4791 : UInt8 = UInt8(5);
        match ((if (false) { (false, var252, (UInt16(219), var3825, false, UInt32(201), var22, Int16(49), var3788), var3788) } else { (var4300, (Int8(-4)&127..=var378&127:((-54)|1)), (UInt16(160), true, false, var2220, false, Int16(-78), (var369&127..=var4728&127:((-66)|1))), var3788) } |>var4696)) {
            case _ : (UInt64, Range<UInt64>, Range<UInt64>, Int64, Array<Bool>, (Bool, Range<Int8>, (UInt16, Bool, Bool, UInt32, Bool, Int16, Range<UInt32>), Range<UInt32>)) => 
                if (var3825) { (67&127..74&127:48|1) } else { var4008 } ;
                var2876;
                var4746 <<= ((var112) & 7)
            
            case _ => 
                var360 -= UInt64(71);
                if (false) { Option<(Array<Unit>, Array<Int64>, Array<UInt8>, Option<Unit>)>.Some(([var2876, (), (), (), (), (), var153, var4220, var3608, ()], [34, var327, (-48), (-33), var164, 96, (-109), var4587, 103, var3706], [UInt8(35), var4208, UInt8(248), var4746, var2991, var112, UInt8(206), UInt8(4), var4791, var4208], var554)) } else { Option<(Array<Unit>, Array<Int64>, Array<UInt8>, Option<Unit>)>.None } ;
                var4630
            
            case caseVar4799 : Option<Array<Enum8>> => 
                ()
            
            case _ => 
                var3810;
                var3810
            
        }
    }
;
    private static var var5030 : Unit = ();
    static var var5097 : (UInt64, Range<UInt64>, Range<UInt64>, Int64, Array<Bool>, (Bool, Range<Int8>, (UInt16, Bool, Bool, UInt32, Bool, Int16, Range<UInt32>), Range<UInt32>)) = (UInt64(206), (UInt64(131)&127..UInt64(50)&127:(-50)|1), (UInt64(188)&127..=UInt64(155)&127:(93|1)), 119, [false, false, true, false, false, false, true, true, true, false], (false, (Int8(120)&127..=Int8(-23)&127:(-46)|1), (UInt16(196), false, false, UInt32(217), true, Int16(-105), (UInt32(50)&127..UInt32(120)&127:46|1)), (UInt32(88)&127..=UInt32(58)&127:(-43)|1)));
    public func func4842(namedParam4843 ! : Option<Enum8>) : UInt64 { // block id: 4844
        var var4901 : (Range<Int16>, Float32, Range<UInt64>) = ((Int16(-49)&127..=Int16(-10)&127:10|1), Float32(Float32(Float32(40.0))), (UInt64(3)&127..=UInt64(UInt8(UInt8(14)))&127:(Int64(UInt32(104))|1)));
        try { // block id: 4846
            ();
            if (false) { var4851 } else { Option<Array<Bool>>.None } ;
            if (true) { // block id: 4860
                if (true) { ((var881, "}\"}HC4> =.", Int32(109), var237, (), Int8(-115), false), UInt8(224), var2711, (-40.0), (Int16(-119), (), (Int32(40)&127..=Int32(43)&127:9|1), ((Int16(67)&127..Int16(-43)&127:54|1), var147, var597), (Int32(18)&127..=Int32(-100)&127:70|1))) } else { ((UInt32(242), var1550, Int32(-12), Int16(-97), (), Int8(-89), true), UInt8(231), var2711, var2857, (Int16(118), (), var3033, var4901, (Int32(-87)&127..=Int32(15)&127:63|1))) } 
            } else if (false) { // block id: 4916
                var1434
            } else { // block id: 4918
                (false, (Int8(116)&127..var2248&127:((-22)|1)), (var4927, var4117, var3825, UInt32(96), var22, var237, (UInt32(235)&127..UInt32(208)&127:105|1)), var3788);
                if (var22) { var1434 } else { ((UInt32(136), var1550, Int32(6), Int16(-47), var3727, var2110, true), var4949, var4058, (-82.0), (var237, var3810, (Int32(-59)&127..Int32(45)&127:(-3)|1), ((Int16(-82)&127..Int16(-5)&127:25|1), var147, (var360&127..UInt64(75)&127:((-107)|1))), var3033)) } 
            }
        } catch (_) { // block id: 4967
            try { // block id: 4969
                var2876;
                var1103;
                Option<String>.None
            } finally { // block id: 4973
                Option<String>.None
            };
            let var4977 : Bool = (Option<Range<Int8>>.Some((Int8(35)&127..=Int8(UInt8(226))&127:(Int64(Int16(-57))|1))) is (Int64) -> UInt64);
            if (var4977) { // block id: 4986
                (var4989, var4949, (UInt16(163)&127..UInt16(97)&127:83|1), (-9.0), var3116)
            } else { // block id: 5005
                var2833;
                (var4989, var4208, var4058, var2857, var3056)
            }
        };
        var2721;
        (match (([(), (), var3800, var3727, var2876, var3800, var5030, var677, (), ()], var360, Int32(-15), false, (Int32(8)&127..Int32(-5)&127:76|1), (Int32(125)&127..Int32(-39)&127:66|1), (var2220, ###"#E\\(Rh#$%'"###, Int32(93), var237, (), Int8(-19), true), var2948)) {
            case (_,caseVar5051 : Range<UInt32>,_ : UInt32,caseVar5052,caseVar5053 : Option<Array<Range<UInt16>>>,_,(_,_,caseVar5054 : UInt64,caseVar5055,_,caseVar5056,caseVar5057),caseVar5058 : Option<Array<UInt8>>) => 
                if (var4117) { (UInt64(99), (UInt64(28)&127..=var360&127:(60|1)), var597, var4587, [true, var22, true, var3825, false, var4117, true, true, true, false], (false, (var2110&127..var2110&127:(5|1)), (var918, caseVar5052, true, UInt32(114), caseVar5057, caseVar5055, (UInt32(46)&127..=UInt32(126)&127:(-38)|1)), caseVar5051)) } else { var5097 } ;
                Option<UInt64>.Some(UInt64(27))
            
            case (_,caseVar5123,caseVar5124,_,_ : Enum68,_ : Float64,caseVar5125,_) => 
                Option<UInt64>.None
            
            case _ => 
                if (true) { var5133 } else { var5133 } 
            
        } ?? UInt64(11)) ^ (-UInt64(var4746))
    }

    public func isClosed(): Bool { return true }
    public func close(): Unit {}
}

public func func443(param444 : Range<UInt16>) : Bool { // block id: 445
    var378 < match (if (true) { Option<Bool>.Some(true) } else { var454 } ) {
        case caseVar459 : Range<UInt32> => 
            Int8(-41)
        
        case _ => 
            ();
            (UInt64(109)&127..UInt64(149)&127:(-123)|1);
            Int8(45)
        
    }
}



func func714(param715 : (Range<Int16>, Range<Int64>, Int32, Float32, Unit)) : Range<UInt16> { // block id: 716
    var var730 : Int64 = 124;
    let var742 : Range<UInt16> = (UInt16(239)&127..=UInt16(UInt16(188))&127:(2|1));
    if ((Int64(UInt32(170)) != (var327 + var327))) { try { // block id: 725
        (UInt16(212)&127..=UInt16(245)&127:(var730|1))
    } catch (_) { // block id: 732
        var153;
        (var650&127..=var650&127:(var164|1))
    } finally { // block id: 738
        ();
        ();
        var742
    } } else { (if (false) { var756 } else { Option<Range<UInt16>>.None }  ?? var742) } 
}


func func617(param618 : Int64) : Float32 { // block id: 619
    let var665 : UInt16 = UInt16(146);
    let var763 : (Range<Int16>, Range<Int64>, Int32, Float32, Unit) = ((Int16(Int16(-74))&127..=Int16(88)&127:(Int64(UInt64(Int16(-97)))|1)), (77&127..(-54)&127:(-60)|1), Int32(49), Float32(3.0), ());
    var var785 : Array<Bool> = [true, ([Int64(37), 125, Int64(Int16(-79)), (-80), 46, Int64(UInt32(228)), Int64(Int8(103)), Int64(Int8(24)), 74, (-112)] is Range<UInt32>), false, false, (###"K%ehsf3$~&"### is Float64), ('Y' is Range<Int64>), (UInt64(Int8(Int8(104))) is Option<Range<UInt16>>), ((Float64(Float32(28.0)) as Range<Int8>) is Array<Unit>), true, ([Int64(UInt64(197)), (-120), Int64(UInt32(213)), 31, (-71), Int64(UInt16(13)), Int64(Int32(-83)), (-119), 67, Int64(UInt16(102))] is (Float64, Array<UInt8>, Range<Int8>) -> (Range<Int16>, Range<Int64>, Int32, Float32, Unit))];
    let var841 : (Range<UInt16>) -> Bool = func443;
    let var908 : UInt16 = UInt16(Int16(-24));
    var var932 : Int64 = Int64(UInt16(206));
    if (((var763|>func714)|>{ lambdaParameter624 : Range<UInt16> => var var680 : Array<Range<UInt16>> = [(UInt16(239)&127..=UInt16(22)&127:33|1), (UInt16(137)&127..=UInt16(177)&127:(-102)|1), (UInt16(205)&127..=UInt16(70)&127:(-71)|1), (UInt16(7)&127..UInt16(235)&127:85|1), (UInt16(44)&127..=UInt16(145)&127:(-100)|1), (UInt16(78)&127..UInt16(158)&127:(-19)|1), (UInt16(128)&127..UInt16(45)&127:16|1), (UInt16(100)&127..UInt16(157)&127:35|1), (UInt16(198)&127..UInt16(219)&127:39|1), (UInt16(237)&127..=UInt16(84)&127:123|1)]; try { // block id: 627
        var554.getOrThrow();
        (Option<Range<Int8>>.None ?? (Int8(7)&127..Int8(15)&127:56|1));
        var22
    } finally { // block id: 638
        if (false) { // block id: 641
            ();
            ()
        };
        try { // block id: 645
            var153;
            [(var650&127..=UInt16(213)&127:(var164|1)), (UInt16(251)&127..=UInt16(85)&127:53|1), (UInt16(50)&127..=UInt16(135)&127:(-33)|1), (UInt16(41)&127..=UInt16(40)&127:(var164|1)), lambdaParameter624, (var650&127..var665&127:(10|1)), (var665&127..var665&127:((-36)|1)), (UInt16(227)&127..=UInt16(160)&127:(-35)|1), (UInt16(161)&127..=UInt16(55)&127:32|1), lambdaParameter624]
        } finally { // block id: 675
            var677;
            var680
        };
        var685[4]
    } })) { (Option<Array<Bool>>.None ?? (Option<Array<Bool>>.None ?? var785)) } else { [var22, ((var665&127..=var650&127:((-121)|1))|>var841), var850[0], try { // block id: 878
        var881 >>= ((var369) & 7);
        true
    } finally { // block id: 887
        if (var22) { [var892, var892, (UInt16(194)&127..var650&127:(95|1)), var892, (UInt16(113)&127..=UInt16(178)&127:(-101)|1), (var650&127..var908&127:((-112)|1)), (UInt16(67)&127..=UInt16(52)&127:(-113)|1), var892, (UInt16(82)&127..=UInt16(22)&127:(-61)|1), (UInt16(143)&127..var918&127:(var327|1))] } else { [var892, (var650&127..=var918&127:(param618|1)), (var918&127..var665&127:(var932|1)), (UInt16(21)&127..UInt16(240)&127:(-102)|1), var892, (UInt16(14)&127..=UInt16(70)&127:(-125)|1), (var908&127..UInt16(149)&127:((-1)|1)), (UInt16(63)&127..UInt16(165)&127:102|1), (UInt16(114)&127..UInt16(165)&127:32|1), var892] } ;
        var22 && var22
    }, func443((var951&127..UInt16(118)&127:(var164|1))), ([(-61), 60, (-85), 54, 32, (-111), 121, (-10), (-74), (-104)] is UInt16), false, var785[6], var785[6], [var22, false, true, true, false, true, false, var22, true, false][5]] } ;
    Float32(var983.var986[1])
}




public func func1540(param1541 : (UInt32, String, Int32, Int16, Unit, Int8, Bool)) : Int64 { // block id: 1542
    28
}




public func func2373() : Array<Enum8> { // block id: 2374
    let var2396 : Enum8 = Enum8.defaultValue;
    let var2572 : Array<Enum8> = [Enum8.enumValue2452(Option<Unit>.None), Enum8.defaultValue, Enum8.enumValue2452(Option<Unit>.None), Enum8.enumValue2580({ lambdaParameter2589 : Range<UInt16> => true }, ((UInt32(90), "Qy*B*^-YHE", Int32(108), Int16(-115), (), Int8(12), true), UInt8(Int8(15)), (UInt16(13)&127..UInt16(64)&127:((-89)|1)), (-19.0), (Int16(43), (), (Int32(-85)&127..Int32(-78)&127:((-62)|1)), ((Int16(-30)&127..Int16(28)&127:74|1), Float32(-103.0), (UInt64(17)&127..=UInt64(116)&127:(13|1))), (Int32(-17)&127..=Int32(61)&127:(-17)|1))), ((Int8(32) is (Float64, Array<UInt8>, Range<Int8>) -> (Range<Int16>, Range<Int64>, Int32, Float32, Unit)), (Int8(5)&127..=Int8(126)&127:(-54)|1), (UInt16(7), true, false, UInt32(235), true, Int16(86), (UInt32(18)&127..UInt32(192)&127:24|1)), (UInt32(39)&127..=UInt32(229)&127:(43|1))), Option<Unit>.Some(())), Enum8.enumValue2452((UInt8(69) as Unit)), Enum8.enumValue2645(Int8(Int8(-4)), ((Int16(-57), (), (Int32(-109)&127..=Int32(85)&127:(51|1)), ((Int16(21)&127..Int16(18)&127:90|1), Float32(-30.0), (UInt64(99)&127..UInt64(37)&127:(90|1))), (Int32(31)&127..=Int32(-43)&127:(-29)|1)) as Bool)), Enum8.enumValue2452(Option<Unit>.Some(())), Enum8.enumValue2452(Option<Unit>.None), Enum8.enumValue2476(((Int16(107)&127..Int16(-87)&127:114|1), Float32(Float32(-103.0)), (UInt64(64)&127..UInt64(44)&127:(-66)|1)), true), Enum8.enumValue2645(Int8(-66), Option<Bool>.None)];
    (if (((var918&127..var951&127:(var164|1))|>func443)) { match ("""
-A8/R
w#s5w
""") {
        case "hZEX9Z;&<5" | "nDzCr.hal\"" | """
a1$ya
r=Px2
""" => 
            ();
            Option<Array<Enum8>>.Some([var2396, Enum8.defaultValue, Enum8.defaultValue, var2396, var2396, var2396, var2396, Enum8.defaultValue, var2396, var2396])
        
        case caseVar2409 => 
            Option<Array<Enum8>>.None
        
        case _ => 
            var756;
            var2416;
            if (var22) { var2421 } else { var2421 } 
        
    } } else { (if (var22) { Option<Array<Enum8>>.None } else { Option<Array<Enum8>>.None } ) }  ?? match (if (var22) { var2421 } else { var2421 } ) {
        case Some(caseVar2446 : Class348) => 
            var378--;
            [Enum8.enumValue2452(var554), Enum8.defaultValue, var2396, var2396, var2396, Enum8.defaultValue, var2396, var2396, var2396, var2396]
        
        case None => 
            var112 *= UInt8(78);
            [var2396, var2396, Enum8.defaultValue, var2396, Enum8.enumValue2476(((Int16(-112)&127..Int16(-48)&127:(-83)|1), Float32(3.0), (UInt64(181)&127..=UInt64(166)&127:(var327|1))), true), var2396, var2396, Enum8.enumValue2490(var2416), Enum8.enumValue2490(var2416), Enum8.defaultValue]
        
        case _ => 
            ();
            let var2554 : Int32 = Int32(-53);
            if (var22) { var2503 } else { ([var2299, (), (), var2168, (), var2299, (), (), (), ()], var360, Int32(-123), var22, var1729, (Int32(59)&127..Int32(118)&127:97|1), (var2220, var1550, var2554, var237, var2558, var2561, var22), (var237&127..=Int16(-38)&127:(var327|1))) } ;
            var2572
        
        case _ => 
            var164 **= ((-81) & 3);
            (UInt32(82), "|}~A(>vg$U", var55, Int16(-78), (), Int8(-96), false);
            var2572
        
    })
}

public func func2368(namedParam2369 ! : Int32, namedParam2370 ! : Enum68) : Array<Enum8> { // block id: 2371
    func2373()
}

public func func2774(param2775 : ((UInt32, String, Int32, Int16, Unit, Int8, Bool)) -> Int64) : Unit { // block id: 2778
    try (resource = Class348()) { // block id: 2780
        Option<Enum8>.Some(var2784).getOrThrow();
        var loopTimeVar2791 : Int64 = 0;
        while ((var22) && loopTimeVar2791 < 100 ) {
            loopTimeVar2791++;
            ()
        };
        if (var22) { // block id: 2794
            var1103;
            var153;
            var918 <<= ((var951) & 7)
        }
    } finally { // block id: 2800
        match (Option<Bool>.Some(var22)) {
            case _ => 
                ();
                var2809;
                var1921 /= ((var55) | 1)
            
            case caseVar2826 : Bool => 
                var112 >>= ((var112) & 7);
                UInt32(56);
                var2833
            
            case caseVar2837 : Range<Int8> => 
                var2833
            
            case _ => 
                var881 += UInt32(32)
            
        };
        var var2851 : ?Array<Class348> = Option<Array<Class348>>.None;
        var loopTimeVar2863 : Int64 = 0;
        do {
            loopTimeVar2863++;
            if (false) { var2851 } else { Option<Array<Class348>>.Some(var2809) } ;
            var2857 + 119.0
        } while ((false) && loopTimeVar2863 < 100 ) 
    }
}

public func func2867(param1541 : (UInt32, String, Int32, Int16, Unit, Int8, Bool)) : Int64 { // block id: 1542
    28
}



public func func2765() : Range<Int16> { // block id: 2766
    if (true) { // block id: 2769
        var918 <<= ((var918) & 7);
        var var2865 : (((UInt32, String, Int32, Int16, Unit, Int8, Bool)) -> Int64) -> Unit = func2774;
        let var2870 : ((UInt32, String, Int32, Int16, Unit, Int8, Bool)) -> Int64 = func2867;
        var2870|>var2865
    } else if ((try { // block id: 2874
        var2876;
        [(Int16(32)&127..=Int16(-108)&127:65|1), (Int16(88)&127..=Int16(-73)&127:(-53)|1), (Int16(62)&127..Int16(-27)&127:(-52)|1), (Int16(2)&127..=Int16(13)&127:(-75)|1), (Int16(-44)&127..=Int16(85)&127:42|1), (Int16(-13)&127..=Int16(-10)&127:118|1), (Int16(51)&127..Int16(-114)&127:(-91)|1), (Int16(36)&127..Int16(116)&127:(-90)|1), (Int16(-103)&127..=Int16(-14)&127:(-66)|1), (Int16(-88)&127..=Int16(69)&127:(-75)|1)];
        if (false) { Option<Bool>.None } else { var2117 } 
    } finally { // block id: 2883
        var2833;
        var2117
    } is (UInt32, String, Int32, Int16, Unit, Int8, Bool))) { // block id: 2886
        match (Enum8.defaultValue) {
            case _ => 
                var360++
            
        }
    };
    let var2913 : Option<Rune> = Option<Rune>.Some('d');
    var loopTimeVar2923 : Int64 = 0;
    while (((Option<Bool>.Some(false) ?? (var2903 ?? var22))) && loopTimeVar2923 < 100 ) {
        loopTimeVar2923++;
        (var2913 ?? var2917);
        (var554 ?? ())
    };
    var var2967 : Unit = ();
    match (try { // block id: 2926
            if (true) { Option<Bool>.Some(var22) } else { var2117 } ;
            Option<Bool>.Some(false)
        } catch (e: Exception) { // block id: 2934
            Option<Range<Int8>>.Some((Int8(114)&127..var2561&127:((-112)|1)));
            Option<Bool>.None
        }) {
        case caseVar2943 : Option<Int8> => 
            (Int8(-111)&127..Int8(-104)&127:55|1);
            var2168;
            var2948
        
        case caseVar2952 => 
            var881 &= var881;
            var2917;
            let var2961 : Int16 = Int16(68);
            (Int16(64)&127..var2961&127:(49|1))
        
        case _ => 
            var2967;
            var2948
        
    }
}

func func2701(param2702 : Range<Int64>) : (Range<Int16>, Range<Int64>, Int32, Float32, Unit) { // block id: 2703
    var var2708 : (Range<UInt16>) -> Bool = func443;
    let var3000 : ?Class348 = (UInt16(UInt8(8)) as Class348);
    var loopTimeVar3036 : Int64 = 0;
    (if ((var2711|>var2708)) { var2721[6] } else { func2765() } , try { // block id: 2971
        ((-48)&127..=(-53)&127:71|1)
    } catch (e: Exception) { // block id: 2973
        (111&127..13&127:95|1)
    }, try { // block id: 2976
        var677;
        var1921
    } finally { // block id: 2979
        Int32(116) % ((Int32(77)) | 1)
    }, if ((var2903 ?? true)) { // block id: 2987
        var112 **= (var2991 & 3);
        let var2995 : Float32 = Float32(Float32(104.0));
        var2995
    } else { // block id: 2998
        var3000;
        Float32(85.0)
    }, do {
        loopTimeVar3036++;
        ();
        if (false) { (var55&127..var1921&127:(var327|1)) } else { var3033 } 
    } while ((try { // block id: 3007
        [var22, var22, var22, true, var22, true, var22, var22, var22, var22];
        true
    } catch (_) { // block id: 3020
        Int16(-43) < var237
    }) && loopTimeVar3036 < 100 ) )
}

public func func2337(param2338 : (Int16, Unit, Range<Int32>, (Range<Int16>, Float32, Range<UInt64>), Range<Int32>)) : UInt8 { // block id: 2339
    let var2697 : Enum68 = Enum68.defaultValue;
    if (try { // block id: 2342
        var918 <<= ((UInt16(20)) & 7);
        if (var22) { Option<Bool>.None } else { var2117 } ;
        true
    } finally { // block id: 2351
        var2168;
        var237 != Int16(88)
    }) { match (if (false) { Option<Range<UInt16>>.Some(var892) } else { var756 } ) {
        case _ => 
            Enum8.defaultValue
        
    } } else { func2368(namedParam2369 : var55, namedParam2370 : var2697)[0] } ;
    ((-47)&127..=35&127:(-11)|1)|>func2701;
    UInt8(try { // block id: 3041
        var918 ^= var951;
        UInt8(201) & UInt8(213)
    } catch (e: Exception) { // block id: 3048
        UInt8(37)
    } finally { // block id: 3050
        var2991
    })
}


public func func2332(param2333 : Option<Int64>) : Array<UInt8> { // block id: 2334
    var var3053 : ((Int16, Unit, Range<Int32>, (Range<Int16>, Float32, Range<UInt64>), Range<Int32>)) -> UInt8 = func2337;
    var var3173 : Unit = ();
    [(var3056|>var3053), UInt8(25), UInt8(111), var2991, (var3086 ?? UInt8(10) * var112), (([UInt8(150), UInt8(85), UInt8(174), UInt8(41), UInt8(89), UInt8(239), UInt8(23), UInt8(152), UInt8(140), UInt8(166)] as UInt8) ?? var2991 & var112), UInt8(13), match (try { // block id: 3104
            var3056
        } catch (_) { // block id: 3106
            var918++;
            var918 ^= UInt16(111);
            if (true) { var3056 } else { var3116 } 
        } finally { // block id: 3141
            if (false) { var3145 } else { Option<Rune>.Some(var2917) } ;
            var3116
        }) {
        case (caseVar3158,caseVar3159,caseVar3160,(_,caseVar3161 : Range<Int32>,_ : Range<Int32>),caseVar3162) => 
            ();
            UInt8(82)
        
        case (_ : (UInt64, Range<UInt64>, Range<UInt64>, Int64, Array<Bool>, (Bool, Range<Int8>, (UInt16, Bool, Bool, UInt32, Bool, Int16, Range<UInt32>), Range<UInt32>)),caseVar3168 : Float32,_,(_,caseVar3169 : Option<Bool>,caseVar3170 : Int64),_) => 
            var3173;
            UInt8(215) % ((var112) | 1)
        
        case (_,caseVar3180,_,caseVar3181,caseVar3182 : Range<UInt8>) => 
            UInt8(181)
        
        case _ : Array<Bool> => 
            UInt8(221)
        
        case _ => 
            Option<Array<UInt8>>.None;
            var2991 ** (UInt8(139) & 3)
        
    }, ((var237 as UInt8) ?? try { // block id: 3199
        var var3202 : Float32 = Float32(Float32(100.0));
        var3202 -= var147;
        var112
    } catch (_) { // block id: 3207
        var2857 = var2857;
        var918 /= ((var918) | 1);
        var2991 | UInt8(205)
    }), (if (var22) { var3086 } else { Option<UInt8>.Some(var112) }  ?? UInt8(Int8(10)))]
}


public func func2322(param2323 : Option<Enum8>) : Int8 { // block id: 2324
    let var3238 : ?Int64 = (((UInt32(6), "k\"\"(83FK7j", Int32(Int32(39)), Int16(UInt16(45)), (), Int8(-32), false), UInt8(UInt8(UInt8(162))), (UInt16(94)&127..UInt16(123)&127:68|1), 110.0, (Int16(Int16(35)), (), (Int32(98)&127..=Int32(-30)&127:(-118)|1), ((Int16(-14)&127..=Int16(-81)&127:((-120)|1)), Float32(-37.0), (UInt64(31)&127..=UInt64(223)&127:((-6)|1))), (Int32(-82)&127..=Int32(48)&127:(-78)|1))) as Int64);
    (Option<Array<UInt8>>.None ?? (try { // block id: 3227
        ();
        var3230
    } finally { // block id: 3232
        (UInt8(56)&127..=UInt8(127)&127:((-125)|1));
        var3238
    }|>func2332));
    match {
        case var22 => 
        (Option<Int16>.Some(var237) ?? Int16(-47));
        match ((UInt64(46)&127..=UInt64(170)&127:(-89)|1)) {
            case _ : Array<Enum8> => 
                Int8(124) - Int8(-37)
            
            case caseVar3293 => 
                var2721;
                var var3297 : (UInt32, String, Int32, Int16, Unit, Int8, Bool) = (UInt32(UInt32(Int8(UInt8(65)))), "ddA%Yuhg_r", Int32(89), Int16(Int8(UInt8(1))), (), Int8(9), ((UInt8(15)&127..UInt8(117)&127:117|1) is () -> Range<Int16>));
                var3297;
                Int8(-36) - var2561
            
            case caseVar3317 => 
                var983;
                var1974 ** (var2110 & 3)
            
            case _ => 
                [(UInt16(115)&127..=UInt16(220)&127:92|1), (UInt16(211)&127..UInt16(200)&127:42|1), (UInt16(5)&127..=UInt16(168)&127:(-94)|1), (UInt16(214)&127..UInt16(246)&127:(-53)|1), (UInt16(19)&127..UInt16(117)&127:61|1), (UInt16(32)&127..UInt16(109)&127:(-84)|1), (UInt16(96)&127..=UInt16(196)&127:(-71)|1), (UInt16(166)&127..UInt16(143)&127:(-65)|1), (UInt16(18)&127..=UInt16(117)&127:22|1), (UInt16(174)&127..=UInt16(40)&127:119|1)];
                var2561
            
        }
        case var22 => 
        ();
        Int8(var1974)
        case _ => 
        Int8(120) - var378
    }
}

public func func2337(param2001 : Option<Bool>, param2002 : Int32) : (UInt16, Bool, Bool, UInt32, Bool, Int16, Range<UInt32>) { // block id: 2003
    let var2066 : Unit = ();
    if (var22) { match (###"\"}uw11l*k@"###) {
        case """
kb!Cy
m;rq:
""" | """
HXIV;
e0|;C
""" => 
            var var2013 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
            var2013
        
        case _ => 
            var164 > 54;
            var2022
        
        case caseVar2036 : Class348 => 
            if (var22) { Option<Array<Bool>>.None } else { Option<Array<Bool>>.None } ;
            [(), (), (), (), (), (), (), (), (), ()]
        
        case ###"AXq$\"0$UIb"### => 
            [var677, var1103, var153, var153, (), var677, var677, (), var677, var153]
        
        case _ => 
            ();
            var918 %= ((var951) | 1);
            [(), (), (), (), (), (), (), (), (), ()]
        
    } } else { [var2066, var677, (), (), var677, var2066, (), var1103, (), var2066] } [6];
    ([(UInt16(197)&127..=UInt16(198)&127:10|1), (UInt16(136)&127..=UInt16(219)&127:109|1), (UInt16(124)&127..UInt16(187)&127:(-9)|1), (UInt16(21)&127..UInt16(181)&127:(-31)|1), (UInt16(39)&127..UInt16(227)&127:7|1), (UInt16(1)&127..UInt16(191)&127:9|1), (UInt16(65)&127..=UInt16(87)&127:84|1), (UInt16(214)&127..=UInt16(136)&127:(-125)|1), (UInt16(109)&127..UInt16(50)&127:(-87)|1), (UInt16(74)&127..=UInt16(226)&127:(-27)|1)] as Int64);
    var var2084 : Bool = false;
    var var3345 : ?Array<Class348> = (Option<UInt8>.Some(UInt8(38)) as Array<Class348>);
    (UInt16(if (var2084) { // block id: 2086
        var112
    } else { // block id: 2088
        var1103;
        var360 &= var360;
        UInt8(88) | var112
    }), (match (Class348()) {
        case _ => 
            Option<Class348>.None;
            var378 * var2110;
            var2117
        
        case _ : Range<Int32> => 
            var2117
        
        case _ : Range<Int32> => 
            ([var2066, var2168, (), (), (), (), (), (), (), var677], UInt64(189), param2002, true, (var55&127..Int32(-91)&127:(var164|1)), (Int32(53)&127..=Int32(106)&127:(-52)|1), (UInt32(212), "P!L^lA9ja{o", Int32(-4), var237, var2066, var2110, false), (var237&127..var237&127:(20|1)));
            var2117
        
        case _ : Range<UInt64> => 
            var2117
        
        case _ => 
            ();
            ();
            if (var2084) { var2117 } else { var2117 } 
        
    } ?? match (Int32(103)) {
        case -111 => 
            var2117;
            var881 != var2220
        
        case caseVar2224 => 
            var2220 >>= ((UInt32(166)) & 7);
            var237;
            var2084
        
        case -47 | -17 => 
            false
        
        case _ => 
            var2084
        
    }), try { // block id: 2239
        var237;
        var22
    } catch (_) { // block id: 2242
        var1921 /= ((Int32(5)) | 1);
        var2248 < Int8(76)
    }, try { // block id: 2253
        [var327, 17, var164, 2, var327, var327, var164, (-104), var327, (-1)];
        var2220
    } finally { // block id: 2266
        var881 **= (var369 & 3);
        var var2273 : String = ":Fad'dhn)q";
        (UInt32(104), var2273, param2002, var237, (), var1974, var2084);
        UInt32(81) >> ((var369) & 7)
    }, if (match (UInt8(232)) {
        case 25 => 
            var918 -= UInt16(193);
            [(UInt16(246)&127..=UInt16(43)&127:46|1), (UInt16(139)&127..=UInt16(195)&127:91|1), (UInt16(88)&127..UInt16(48)&127:(-4)|1), (UInt16(215)&127..=UInt16(176)&127:19|1), (UInt16(136)&127..=UInt16(184)&127:118|1), (UInt16(101)&127..UInt16(107)&127:(-58)|1), (UInt16(23)&127..UInt16(98)&127:57|1), (UInt16(18)&127..UInt16(205)&127:(-6)|1), (UInt16(59)&127..=UInt16(110)&127:(-75)|1), (UInt16(192)&127..UInt16(143)&127:6|1)];
            false
        
        case 64 | 143 | 121 | 150 => 
            [false, false, true, false, true, true, true, true, false, false];
            var2299;
            var2084 && false
        
        case _ => 
            true
        
    }) { // block id: 2307
        !var22
    } else if (var22) { // block id: 2311
        UInt32(213) == var369
    } else { // block id: 2315
        var2110 -= Int8(55);
        false
    }, Int16((var393|>func2322)), if (if (var2084) { // block id: 3341
        if (var22) { var3345 } else { var3345 } ;
        Option<UInt8>.None;
        var2857 < var2857
    } else { // block id: 3354
        if (var22) { Option<Int8>.Some(var3359) } else { Option<Int8>.None } ;
        var2558;
        Int32(-78) != Int32(48)
    }) { (if (true) { (UInt32(177)&127..UInt32(57)&127:68|1) } else { (var881&127..=UInt32(134)&127:(3|1)) } ) } else { (UInt32(78)&127..UInt32(183)&127:((-120)|1)) } )
}


public func func1896(param1897 : Int64) : UInt64 { // block id: 1898
    if (if (match (var1903) {
        case _ : Option<Range<UInt16>> => 
            var var1911 : Rune = '9';
            var1911;
            ();
            true
        
        case caseVar1917 : (Array<Unit>, Array<Int64>, Array<UInt8>, Option<Unit>) => 
            var1921 >>= ((Int32(-69)) & 7);
            UInt32(31) != UInt32(56)
        
        case _ => 
            false
        
        case _ => 
            let var1935 : Unit = ();
            var1935;
            var378 != var378
        
    }) { // block id: 1940
        Float32(35.0) < Float32(45.0)
    } else if (var147 == Float32(53.0)) { // block id: 1947
        var360 += var360;
        var1103;
        true
    } else { // block id: 1953
        ();
        UInt32(213) < var369
    }) { try { // block id: 1959
        var1103;
        (UInt16(62), false, var22, UInt32(185), true, Int16(-122), (UInt32(198)&127..=UInt32(77)&127:60|1))
    } finally { // block id: 1969
        ();
        var378 *= var1974;
        (UInt16(238), var22, false, UInt32(203), var22, Int16(71), (var369&127..=UInt32(56)&127:(0|1)))
    } } else { (if (try { // block id: 1990
        false && false
    } catch (e: Exception) { // block id: 1994
        ();
        ();
        false
    }) { var685 } else { func2337(Option<Bool>.None, Int32(121)) } ) } ;
    try (resource = Class348()) { // block id: 3381

    } finally { // block id: 3382
        var loopTimeVar3387 : Range<UInt64> = (UInt64(UInt32(UInt16(UInt16(197))))&127..=UInt64(214)&127:((-1)|1));
        for (i in loopTimeVar3387 where false) {
            ()
        }
    };
    let var3469 : Bool = (Option<Array<Enum8>>.Some([Enum8.enumValue2645(Int8(-9), Option<Bool>.None), Enum8.enumValue2580(func443, ((UInt32(174), """
G/NoP
w&8 2
""", Int32(-81), Int16(-121), (), Int8(85), true), UInt8(74), (UInt16(48)&127..UInt16(103)&127:(71|1)), (-88.0), (Int16(42), (), (Int32(16)&127..=Int32(-14)&127:((-28)|1)), ((Int16(-87)&127..=Int16(-113)&127:(50|1)), Float32(-11.0), (UInt64(217)&127..=UInt64(161)&127:(-13)|1)), (Int32(-55)&127..Int32(99)&127:31|1))), (false, (Int8(65)&127..Int8(-50)&127:(-92)|1), (UInt16(236), true, true, UInt32(168), true, Int16(125), (UInt32(83)&127..UInt32(168)&127:((-113)|1))), (UInt32(97)&127..=UInt32(150)&127:((-102)|1))), Option<Unit>.Some(())), Enum8.defaultValue, Enum8.defaultValue, Enum8.enumValue2645(Int8(-79), Option<Bool>.None), Enum8.enumValue2645(Int8(104), Option<Bool>.None), Enum8.enumValue2476(((Int16(-42)&127..=Int16(-81)&127:81|1), Float32(-23.0), (UInt64(227)&127..UInt64(109)&127:44|1)), true), Enum8.enumValue3543(true, Option<UInt8>.None), Enum8.enumValue2476(((Int16(24)&127..Int16(-53)&127:45|1), Float32(43.0), (UInt64(205)&127..=UInt64(5)&127:(-33)|1)), true), Enum8.defaultValue]) is Option<Rune>);
    (try { // block id: 3401
        [54, (-55), var327, var164, param1897, param1897, var327, (-4), (-10), 83];
        ();
        var var3415 : Option<UInt64> = (Option<Bool>.Some(true) as UInt64);
        var3415
    } catch (_) { // block id: 3419
        var3421;
        if (var22) { Option<UInt64>.None } else { Option<UInt64>.None } 
    } ?? try { // block id: 3466
        if (var3469) { var2421 } else { Option<Array<Enum8>>.Some(var3558) } ;
        UInt64(191)
    } finally { // block id: 3571
        var554;
        UInt64(43) >> ((var360) & 7)
    } ** (var360 & 3))
}


public func func1890(param1891 : Option<Array<Bool>>) : Unit { // block id: 1892
    var var3578 : (Int64) -> UInt64 = func1896;
    var loopTimeVar3656 : Int64 = 0;
    do {
        loopTimeVar3656++;
        var loopTimeVar3620 : Int64 = 0;
        while ((var22) && loopTimeVar3620 < 100 ) {
            loopTimeVar3620++;
            ()
        };
        try (resource = Class348()) { // block id: 3622
            var153;
            var153;
            var2558
        } catch (e: Exception) { // block id: 3626
            var3628;
            var1921 >>= ((var55) & 7)
        }
    } while ((match ((var327|>var3578)) {
        case _ : Option<Array<UInt8>> => 
            false || true
        
        case _ : (Range<Int64>, Option<Class348>, Array<Int64>) => 
            var3592 < UInt32(176)
        
        case 57 | 209 => 
            if (false) { "z1OO(1\\L!b" } else { ###"X#Va{jXNI'F"### } ;
            var360 <= UInt64(225)
        
        case _ => 
            var3608;
            var22 &&= false;
            true
        
    }) && loopTimeVar3656 < 100 ) ;
    var var3672 : Class348 = Class348();
    let var3837 : Int64 = Int64(UInt16(Int8(17)));
    [Class348(), Class348(), if ((var252 is Array<Int64>)) { try { // block id: 3664
        var1921--;
        Class348()
    } finally { // block id: 3668
        if (var22) { var3672 } else { Class348() } 
    } } else { Class348() } , Class348(), if (var22) { var3672 } else { match (var3086) {
        case caseVar3684 : Float32 => 
            Class348()
        
        case _ => 
            var3672
        
        case caseVar3693 => 
            var2876;
            var983
        
        case caseVar3699 => 
            ();
            (UInt64(244)&127..=var360&127:(var3706|1));
            Class348()
        
        case _ => 
            var2299;
            Class348()
        
    } } , ((Option<Int16>.Some(Int16(112)) as Class348) ?? (var3721 ?? Class348())), try { // block id: 3725
        var3727;
        ();
        Class348()
    } catch (e: Exception) { // block id: 3731
        Class348(UInt64(124))
    } finally { // block id: 3807
        var685;
        var3810;
        if (var22) { Class348(var360) } else { Class348() } 
    }, if (if (var22) { // block id: 3820
        var22
    } else if (true) { // block id: 3823
        var3825
    } else { // block id: 3827
        var3086;
        (var22, (var3833&127..Int8(50)&127:(var3837|1)), var685, (UInt32(27)&127..UInt32(182)&127:((-51)|1)));
        var3825
    }) { (Option<Class348>.Some(var3672) ?? var3672) } else { (Option<Class348>.Some(var3672) ?? Class348()) } , try { // block id: 3856
        if (true) { Class348() } else { var983 } 
    } finally { // block id: 3861
        var var3863 : Option<Range<Int8>> = (Option<Rune>.Some('8') as Range<Int8>);
        var3863;
        var3706 |= var3706;
        if (var3825) { var3672 } else { var3874 } 
    }, try { // block id: 3877
        if (true) { var3874 } else { var3882 } 
    } catch (e: Exception) { // block id: 3884
        false;
        Class348(UInt64(136))
    } finally { // block id: 3888
        [UInt8(151), UInt8(150), UInt8(72), UInt8(40), UInt8(160), UInt8(155), UInt8(159), UInt8(157), UInt8(234), UInt8(233)];
        if (true) { Class348(UInt64(96)) } else { var983 } 
    }];
    var loopTimeVar3931 : Int64 = 0;
    while ((var22) && loopTimeVar3931 < 100 ) {
        loopTimeVar3931++;
        var loopTimeVar3907 : Range<UInt64> = (UInt64(150)&127..=UInt64(Int32(36))&127:(Int64(Int8(UInt8(UInt8(232))))|1));
        for (i in loopTimeVar3907 where var3825) {
            if (var3825) { Option<Int64>.None } else { Option<Int64>.Some(var164) } ;
            ()
        };
        match (Option<Class348>.Some(var3882)) {
            case _ : Option<Int64> => 
                Option<Class348>.Some(var983);
                var2110 *= var3359
            
            case _ => 
                var3810
            
        }
    }
}

public func func1826(optionalParam1827 ! : (Array<Unit>, Array<Int64>, Array<UInt8>, Option<Unit>) = ([(), (), (), (), (), (), (), (), (), ()], [98, 9, 96, (-53), 52, 126, (-1), (-66), (-11), 84], [UInt8(73), UInt8(171), UInt8(24), UInt8(229), UInt8(21), UInt8(73), UInt8(76), UInt8(162), UInt8(123), UInt8(149)], ([Class348(), Class348(), Class348(), Class348(), Class348(), Class348(), Class348(), Class348(), Class348(), Class348()] as Unit)), optionalParam1854 ! : Int32 = Int32(36)) : Class348 { // block id: 1856
    func func1868(param1869 : Enum68, optionalParam1870 ! : Range<UInt16> = (UInt16(Int8(Int8(-110)))&127..=UInt16(45)&127:(40|1)), optionalParam1877 ! : ((UInt32, String, Int32, Int16, Unit, Int8, Bool)) -> Int64 = { lambdaParameter1880 : (UInt32, String, Int32, Int16, Unit, Int8, Bool) => (-48) }) : Enum8 { // block id: 1885
        (Int32(-25)&127..=Int32(-77)&127:54|1);
        try { // block id: 1888
            Option<Array<Bool>>.None|>func1890;
            Enum8.enumValue2490(var2416)
        } finally { // block id: 3936
            var var3956 : Class348 = Class348(UInt64(70));
            match (Int8(-81)) {
                case -115 => 
                    UInt16(32)
                
                case -34 => 
                    ();
                    [var983, var983, var983, Class348(var360), Class348(), var3882, var3956, Class348(var360), var3956, Class348()];
                    UInt16(22)
                
                case 125 | 113 | -93 | 84 => 
                    var951
                
                case _ => 
                    var650 - UInt16(53)
                
            };
            (var393 ?? var2784)
        }
    }
;
    let var4064 : Float64 = (-64.0);
    func func1859(namedParam1860 ! : Bool, namedParam1861 ! : UInt8, namedParam1862 ! : Option<Enum8>, namedParam1863 ! : Range<UInt64>) : Option<Array<Bool>> { // block id: 1864
        let var4032 : Unit = ();
        match (func1868(Enum68.defaultValue, optionalParam1870 : (UInt16(175)&127..UInt16(9)&127:118|1))) {
            case caseVar3980 => 
                if (var3825) { var3628 } else { [9, var3706, (-85), 117, (-117), 120, (-107), var327, var3706, 113] } ;
                var2022
            
            case enumValue2580(caseVar3999 : Array<Bool>, (caseVar4000,_,_ : (Range<Int16>, Range<Int64>, Int32, Float32, Unit),caseVar4001 : Option<Class348>,caseVar4002), caseVar4003 : UInt32, _) => 
                ((Int16(69)&127..Int16(-97)&127:(-110)|1), var4008, Int32(-6), Float32(-106.0), var2299);
                var var4016 : ?Array<UInt8> = (Option<Rune>.None as Array<UInt8>);
                if (false) { var4016 } else { Option<Array<UInt8>>.Some(var125) } ;
                let var4028 : Unit = ();
                if (false) { [var2299, var2876, var2558, var4028, (), var4032, var4028, var2558, var3810, var2299] } else { var2022 } 
            
            case _ => 
                var360;
                UInt64(12);
                [(), (), (), (), (), (), (), (), (), ()]
            
        }[5];
        match (match (var2903) {
                case caseVar4050 : Option<Array<Range<UInt16>>> => 
                    var1434;
                    if (namedParam1860) { Option<Range<UInt16>>.None } else { Option<Range<UInt16>>.Some(var4058) } ;
                    var4064
                
                case _ => 
                    var2857
                
                case _ : Option<Array<Class348>> => 
                    ();
                    (Int8(-83)&127..=var1974&127:(var164|1));
                    64.0
                
                case caseVar4081 => 
                    var360 &= UInt64(158);
                    var881;
                    80.0
                
                case _ => 
                    ();
                    Option<Range<UInt16>>.None;
                    var2857 + (-106.0)
                
            }) {
            case _ => 
                Option<Rune>.Some(var2917)
            
        };
        Option<Array<Bool>>.Some((Option<Array<Bool>>.None ?? try { // block id: 4103
            if (namedParam1860) { var1567 } else { [namedParam1860, var3825, false, var22, namedParam1860, true, var22, var3825, var4117, var3825] } 
        } finally { // block id: 4166
            var1921 >>= ((Int32(51)) & 7);
            var3800;
            if (true) { [var3825, var22, var4117, namedParam1860, namedParam1860, namedParam1860, namedParam1860, var4117, false, false] } else { var1567 } 
        }))
    }
;
    match (func1859(namedParam1860 : if (var4117) { // block id: 4187
            true
        } else { // block id: 4189
            if (true) { var454 } else { Option<Bool>.None } ;
            var22
        }, namedParam1861 : if (false) { // block id: 4197
            var112
        } else { // block id: 4199
            if (true) { var3788 } else { (UInt32(62)&127..=UInt32(63)&127:62|1) } ;
            var2917 = 'P';
            var4208
        }, namedParam1862 : var393, namedParam1863 : var597)) {
        case _ => 
            Option<Array<Class348>>.None;
            var4220;
            if (var4117) { Class348() } else { var983 } 
        
        case caseVar4228 : Range<UInt16> => 
            Option<Array<Bool>>.None;
            let var4232 : Class348 = Class348(func2373);
            var4232
        
        case _ => 
            var2558;
            ();
            var3874
        
        case _ => 
            ();
            Class348(func2373)
        
    }
}







public func func1561(param1562 : Option<Array<Bool>>) : String { // block id: 1563
    let var1625 : (UInt32, String, Int32, Int16, Unit, Int8, Bool) = (UInt32(Int8(Int8(-91))), "]98PK./Tl#", Int32(-15), Int16(13), (), Int8(21), false);
    match (var1567[9]) {
        case true => 
            var677;
            let var1612 : (UInt32, String, Int32, Int16, Unit, Int8, Bool) = (UInt32(187), """
WIY'A
7!%tn
""", Int32(Int32(UInt32(UInt16(57)))), Int16(49), (), Int8(109), false);
            if (false) { var1612 } else { var1625 } ;
            var1103
        
        case true | true | false => 
            var881 = var369
        
        case caseVar1645 => 
            if (caseVar1645) { var892 } else { (UInt16(91)&127..UInt16(212)&127:(-37)|1) } ;
            ()
        
        case _ => 
            (Int16(-84)&127..=Int16(-27)&127:53|1);
            var881 /= ((var369) | 1)
        
    };
    Class348.func1661(namedParam1662 : (var4430 ?? var4435));
    try { // block id: 4471
        try (resource = Class348()) { // block id: 4473
            var2876;
            var4477 = UInt64(112);
            var3608
        } catch (e: Exception) { // block id: 4485
            ()
        } finally { // block id: 4487
            ();
            var2110++
        };
        try { // block id: 4492
            ();
            (Int8(-45)&127..var1974&127:(0|1));
            var4499
        } catch (e: Exception) { // block id: 4508
            if (var4300) { Option<UInt8>.None } else { Option<UInt8>.Some(UInt8(57)) } 
        };
        match (var2809) {
            case _ => 
                var22 &&= var4300;
                var4220;
                var1550
            
        }
    } finally { // block id: 4523
        var var4529 : ?(UInt32, String, Int32, Int16, Unit, Int8, Bool) = Option<(UInt32, String, Int32, Int16, Unit, Int8, Bool)>.None;
        if (true) { Option<(UInt32, String, Int32, Int16, Unit, Int8, Bool)>.Some(var1625) } else { var4529 } ;
        let var4537 : ?String = ((Option<Option<(UInt32, String, Int32, Int16, Unit, Int8, Bool)>>.None as Array<UInt8>) as String);
        (var4537 ?? var4542)
    }
}



public func func1484(param1485 : Range<Int8>) : Unit { // block id: 1486
    var loopTimeVar1558 : Int64 = 0;
    do {
        loopTimeVar1558++;
        let var1507 : (UInt32, String, Int32, Int16, Unit, Int8, Bool) = (UInt32(36), "ff82pqhFWw", Int32(-31), Int16(11), (), Int8(Int8(Int8(-88))), (Enum68.enumValue1519((UInt64(157)&127..UInt64(50)&127:((-46)|1)), Option<Unit>.None) is UInt32));
        match (var393) {
            case Some(_ : Option<Range<Int8>>) => 
                var1507
            
            case _ => 
                Class348();
                (var378&127..=var378&127:((-33)|1));
                var1507
            
            case _ => 
                var1507
            
        };
        let var1545 : ((UInt32, String, Int32, Int16, Unit, Int8, Bool)) -> Int64 = func1540;
        (var881, var1550, Int32(-25), Int16(88), (), Int8(97), true)|>var1545
    } while (((Int8(7) - Int8(-67)) == (Option<Int8>.Some(Int8(-50)) ?? Int8(104))) && loopTimeVar1558 < 100 ) ;
    match ((try { // block id: 4546
            let var4548 : ?Array<Bool> = ((false is UInt32) as Array<Bool>);
            var4548
        } catch (_) { // block id: 4552
            Option<Array<Bool>>.Some([var4300, var22, var4300, true, var3825, true, var4300, false, var4117, true])
        } finally { // block id: 4565
            (UInt32(248), ###"|mjl3~9N%+"###, var1921, Int16(-54), var2833, Int8(-121), var4300);
            if (var4300) { var2416 } else { Option<Array<Bool>>.Some([true, false, false, true, true, false, true, false, true, true]) } 
        }|>func1561)) {
        case "dkk<x3>*S>" => 
            ((Int16(-121)&127..var237&127:(var4587|1)), ((-76)&127..(-76)&127:120|1), var1921, var147, ());
            ()
        
        case _ : (Int16, Unit, Range<Int32>, (Range<Int16>, Float32, Range<UInt64>), Range<Int32>) => 
            var4300 &&= true;
            var918 <<= ((UInt16(142)) & 7);
            var1921 ^= var4609
        
        case _ => 
            if (var4117) { var1434 } else { var1434 } ;
            ();
            var2168
        
        case _ => 
            var164 |= 97;
            var4630
        
        case _ => 
            ()
        
    };
    var881 *= (var4644 ?? UInt32(110)) << (((Option<UInt32>.Some(UInt32(115)) ?? var881)) & 7)
}

func func1480(param1481 : (Bool, Range<Int8>, (UInt16, Bool, Bool, UInt32, Bool, Int16, Range<UInt32>), Range<UInt32>)) : Option<Array<Class348>> { // block id: 1482
    try { // block id: 4661
        var4220;
        var4430;
        (Int8(50)&127..=Int8(-100)&127:(10|1))
    } catch (e: Exception) { // block id: 4668
        (Int32(-47)&127..=Int32(121)&127:125|1);
        var252
    }|>func1484;
    match (match (try { // block id: 4674
                Class348(UInt64(102))
            } catch (_) { // block id: 4677
                var3608;
                if (var4300) { Class348(UInt64(72)) } else { var3874 } 
            }) {
            case _ => 
                var3230;
                var1550 = var1550;
                Option<Unit>.Some(())
            
        }) {
        case _ => 
            Option<Array<Class348>>.None
        
    }
}

public func func1340(namedParam1341 ! : Float32, namedParam1342 ! : UInt64, optionalParam1343 ! : (UInt64, Range<UInt64>, Range<UInt64>, Int64, Array<Bool>, (Bool, Range<Int8>, (UInt16, Bool, Bool, UInt32, Bool, Int16, Range<UInt32>), Range<UInt32>)) = (UInt64(UInt8(249)), (UInt64(219)&127..UInt64(47)&127:0|1), (UInt64(111)&127..UInt64(UInt16(UInt8(225)))&127:(Int64(UInt8(Int8(-95)))|1)), 78, [true, false, true, true, false, false, true, false, true, false], (true, (Int8(-39)&127..=Int8(87)&127:(-65)|1), (UInt16(Int16(1)), false, (([(), (), (), (), (), (), (), (), (), ()], [0, (-92), 60, 119, (-71), (-14), 20, (-3), (-41), (-118)], [UInt8(100), UInt8(15), UInt8(154), UInt8(181), UInt8(67), UInt8(173), UInt8(125), UInt8(7), UInt8(24), UInt8(175)], Option<Unit>.None) is UInt64), UInt32(63), false, Int16(Int8(49)), (UInt32(57)&127..UInt32(98)&127:(-116)|1)), (UInt32(252)&127..UInt32(Int8(43))&127:((-34)|1)))), namedParam1411 ! : (Range<Int16>, Float32, Range<UInt64>)) : Array<Class348> { // block id: 1412
    var var1420 : Array<Class348> = [Class348(), Class348(), Class348((UInt16(95), ((Int32(-109)&127..=Int32(51)&127:3|1) is (Int64) -> UInt64), false, UInt32(UInt32(136)), false, Int16(-19), (UInt32(25)&127..=UInt32(250)&127:(121|1))), ((-31)&127..=118&127:56|1)), Class348(), Class348(UInt64(158)), Class348(), Class348(UInt64(195)), Class348(func2373), Class348(UInt64(Int32(29))), Class348(func2373)];
    (Option<Array<Class348>>.Some(var1420) ?? var1420)
}


public func func340(param341 : Int16) : Bool { // block id: 342
    [(), (), (), (), (), (), (), (), (), ()][8];
    let var401 : ?Bool = Option<Bool>.Some(((UInt8(111)&127..=UInt8(40)&127:(-112)|1) is Array<UInt8>));
    let var538 : Range<Int64> = ((-98)&127..=92&127:(-51)|1);
    let var1010 : (UInt64, Range<UInt64>, Range<UInt64>, Int64, Array<Bool>, (Bool, Range<Int8>, (UInt16, Bool, Bool, UInt32, Bool, Int16, Range<UInt32>), Range<UInt32>)) = (UInt64(UInt32(1)), (UInt64(52)&127..UInt64(216)&127:((-57)|1)), (UInt64(251)&127..=UInt64(UInt8(61))&127:((-60)|1)), Int64(UInt16(198)), [(() is UInt64), (((-52)&127..=20&127:43|1) is Option<Unit>), true, (UInt8(Int8(91)) is UInt8), false, true, false, (Int8(65) is (Int64) -> Float32), false, ([UInt8(76), UInt8(36), UInt8(168), UInt8(137), UInt8(40), UInt8(16), UInt8(86), UInt8(98), UInt8(254), UInt8(77)] is (UInt16, Bool, Bool, UInt32, Bool, Int16, Range<UInt32>))], (((Int32(40)&127..Int32(-5)&127:(73|1)) is Int32), (Int8(UInt8(238))&127..=Int8(-27)&127:((-35)|1)), (UInt16(UInt8(214)), false, false, UInt32(107), ((UInt16(139)&127..UInt16(102)&127:(-16)|1) is (Bool, Range<Int8>, (UInt16, Bool, Bool, UInt32, Bool, Int16, Range<UInt32>), Range<UInt32>)), Int16(UInt16(200)), (UInt32(68)&127..=UInt32(212)&127:((-16)|1))), (UInt32(131)&127..=UInt32(76)&127:(-83)|1)));
    let var1145 : Enum8 = Enum8.defaultValue;
    func func544(namedParam545 ! : Range<Int64>) : Float64 { // block id: 546
        (try { // block id: 549
            if (false) { Option<Unit>.None } else { var554 } 
        } catch (e: Exception) { // block id: 595
            var597;
            ();
            Option<Unit>.Some(var153)
        } finally { // block id: 606
            Option<Unit>.Some(())
        } ?? try (resource = Class348()) { // block id: 610

        } finally { // block id: 611
            ();
            var153;
            var153
        });
        var var999 : (Int64) -> Float32 = { lambdaParameter1002 : Int64 => Float32(Float32(Float32(-7.0))) };
        let var1154 : Bool = ((Int16(-1)&127..=Int16(104)&127:99|1) is Range<UInt8>);
        match ((var1010[3]|>var999)) {
            case _ : Range<Int16> => 
                var378 &= var378;
                (var378&127..var378&127:(34|1));
                ()
            
            case 63.0 | 107.0 | -12.0 => 
                if (var22) { ([(), var153, var153, var677, var677, var1103, (), var1103, var1103, ()], [var164, var327, (-100), var327, var327, 6, (-107), 100, (-2), var327], [UInt8(30), UInt8(64), UInt8(101), UInt8(40), UInt8(163), UInt8(5), UInt8(158), UInt8(104), UInt8(241), UInt8(23)], Option<Unit>.None) } else { ([(), (), (), (), (), (), (), (), (), ()], [(-72), 84, (-83), 94, (-90), var164, 90, var327, (-30), var164], [UInt8(54), UInt8(190), UInt8(138), UInt8(67), UInt8(177), UInt8(228), UInt8(182), UInt8(194), UInt8(221), UInt8(48)], var554) } ;
                var22 ||= var22
            
            case caseVar1142 => 
                var1145;
                [var22, true, false, var22, var22, var1154, var22, var22, false, var22];
                ()
            
            case _ => 
                (UInt32(3)&127..UInt32(31)&127:93|1);
                (false, (var378&127..Int8(-46)&127:(var164|1)), (UInt16(140), false, var1154, UInt32(133), var22, Int16(-5), (UInt32(68)&127..=UInt32(210)&127:(86|1))), (UInt32(220)&127..UInt32(249)&127:18|1));
                var881 += UInt32(124)
            
        };
        74.0
    }
;
    let var1254 : (UInt32, String, Int32, Int16, Unit, Int8, Bool) = (UInt32(Int32(Int32(Int8(-39)))), """
TC)|g
fZM<Q
""", Int32(Int8(7)), Int16(UInt16(17)), (), Int8(90), false);
    func func352() : Class348 { // block id: 353
        let var477 : Range<Int32> = (Int32(UInt32(110))&127..Int32(Int8(126))&127:(Int64(UInt16(35))|1));
        func func436(param437 : Float64, namedParam438 ! : Array<UInt8>, namedParam439 ! : Range<Int8>) : (Range<Int16>, Range<Int64>, Int32, Float32, Unit) { // block id: 440
            if (([(UInt16(79)&127..=UInt16(225)&127:(-24)|1), (UInt16(230)&127..=UInt16(166)&127:57|1), (UInt16(50)&127..UInt16(201)&127:85|1), (UInt16(86)&127..UInt16(41)&127:81|1), (UInt16(233)&127..UInt16(157)&127:71|1), (UInt16(69)&127..=UInt16(66)&127:(-21)|1), (UInt16(38)&127..UInt16(158)&127:114|1), (UInt16(33)&127..UInt16(146)&127:(-12)|1), (UInt16(41)&127..UInt16(22)&127:(-122)|1), (UInt16(197)&127..=UInt16(13)&127:(-81)|1)][0]|>func443)) { // block id: 472
                param341 ^ Int16(-105);
                var477;
                let var486 : (Range<Int16>, Range<Int64>, Int32, Float32, Unit) = ((Int16(UInt16(UInt16(26)))&127..=Int16(85)&127:((-43)|1)), (36&127..(-103)&127:44|1), Int32(25), Float32(Float32(59.0)), ());
                var486
            } else { // block id: 499
                var var507 : (Range<Int16>, Range<Int64>, Int32, Float32, Unit) = ((Int16(100)&127..Int16(4)&127:5|1), ((-112)&127..=(-50)&127:62|1), Int32(78), Float32(Float32(-33.0)), ());
                var var517 : Range<Int16> = (Int16(Int8(83))&127..Int16(0)&127:((-50)|1));
                try { // block id: 501
                    Option<UInt8>.Some(UInt8(20));
                    if (false) { var507 } else { (var517, (111&127..=(-77)&127:((-68)|1)), Int32(-24), Float32(115.0), ()) } 
                } catch (e: Exception) { // block id: 530
                    var360 &= var360;
                    ();
                    (var517, var538, Int32(-101), var147, var153)
                }
            }
        }
;
        var var1269 : Bool = false;
        var loopTimeVar1272 : Int64 = 0;
        do {
            loopTimeVar1272++;
            let var1232 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
            func func417(param418 : Int64, optionalParam419 ! : (UInt32, String, Int32, Int16, Unit, Int8, Bool) = (UInt32(Int32(-57)), """
yk}VI
dpOa{*
""", Int32(47), Int16(26), (), Int8(UInt8(198)), ((-51) is (Array<Unit>, Array<Int64>, Array<UInt8>, Option<Unit>))), namedParam431 ! : (UInt32, String, Int32, Int16, Unit, Int8, Bool)) : Unit { // block id: 432
                func436(func544(namedParam545 : (121&127..=(-43)&127:120|1)), namedParam438 : [UInt8(118), UInt8(160), UInt8(12), UInt8(217), UInt8(175), UInt8(49), UInt8(73), UInt8(36), UInt8(226), UInt8(35)], namedParam439 : (Int8(29)&127..Int8(-112)&127:60|1))[0];
                try { // block id: 1193
                    var881 |= UInt32(172);
                    ();
                    [(), (), (), var1103, (), var677, (), (), (), ()]
                } catch (_) { // block id: 1209
                    var1211;
                    var538;
                    if (var22) { [(), (), (), (), (), (), (), (), (), ()] } else { var1232 } 
                }[7];
                try { // block id: 1237
                    var1232
                } finally { // block id: 1239
                    [(), (), (), var1103, var677, var1103, var1103, var677, var1103, var153]
                }[0]
            }
;
            func417(var327, namedParam431 : var1254);
            var1269
        } while (((match (([(), (), (), (), (), (), (), (), (), ()], var360, Int32(-5), var22, (Int32(-60)&127..Int32(-14)&127:50|1), (Int32(47)&127..=Int32(49)&127:77|1), (var369, ";**.K!q)tm", var55, param341, (), var378, var22), (Int16(99)&127..=Int16(-18)&127:105|1))) {
            case (_,caseVar384 : Range<UInt16>,caseVar385,caseVar386 : Int32,_,_ : String,(caseVar387,caseVar388,_,_,_ : Range<UInt64>,caseVar389,_),caseVar390 : Range<Int64>) => 
                var393;
                var401
            
            case _ => 
                var22 = false;
                var401
            
        } ?? [false, false, false, false, true, true, false, true, false, false][6])) && loopTimeVar1272 < 100 ) ;
        (match {
            case var1269 => 
            if (false) { var1286 } else { (var538, Option<Class348>.Some(var983), [(-39), 116, var327, var327, var327, var327, (-17), (-3), var327, var327]) } 
            case _ => 
            var var1326 : Range<Int64> = (Int64(Int8(56))&127..=(-32)&127:(Int64((-81))|1));
            (var1326, Option<Class348>.Some(Class348()), [(-16), 0, 54, (-97), 88, (-96), (-79), 28, 107, 20])
        }[1] ?? func1340(namedParam1341 : Float32(-79.0), namedParam1342 : UInt64(83), namedParam1411 : (var2948, Float32(1.0), var597))[6])
    }
;
    (func352().func4842(namedParam4843 : var393)&127..=UInt64(82)&127:((try { // block id: 5145
        Option<Bool>.Some(true);
        var237 -= Int16(-5);
        if (var5153) { Option<Int64>.None } else { Option<Int64>.Some(var327) } 
    } finally { // block id: 5158
        Int8(12);
        var112 >>= ((UInt8(24)) & 7);
        var3230
    } ?? (-78))|1));
    var var5167 : ?Array<UInt8> = (([(), (), (), (), (), (), (), (), (), ()] as Bool) as Array<UInt8>);
    (var5167 is () -> Range<Int16>)
}


public func func292(param293 : Enum8) : (Array<Unit>, Array<Int64>, Array<UInt8>, Option<Unit>) { // block id: 294
    let var314 : Int64 = Int64(Int64(Int32(UInt8(Int8(29)))));
    ((Option<Int64>.Some(var164) ?? [66, 96, 84, (-65), 59, 26, 99, (-99), (-104), 49][8])&127..try { // block id: 307
        if (false) { [UInt8(134), UInt8(58), UInt8(90), UInt8(166), UInt8(67), UInt8(87), UInt8(92), UInt8(187), UInt8(139), UInt8(137)] } else { [UInt8(64), UInt8(60), UInt8(209), UInt8(185), UInt8(223), UInt8(19), UInt8(137), UInt8(246), UInt8(35), UInt8(149)] } ;
        (var314&127..(-42)&127:(55|1));
        var314
    } catch (e: Exception) { // block id: 323
        Enum68.defaultValue;
        ();
        var327
    } finally { // block id: 333
        var var335 : Unit = ();
        var335;
        (-58)
    }&127:(match {
        case (var237|>func340) => 
        var237 / ((Int16(-46)) | 1);
        (-12.0) / Float64((Int32(var2857)) | 1);
        16 ^ 116
        case _ => 
        88
    }|1));
    var378 += Int8(-103);
    var var5217 : Int32 = Int32(-98);
    var var5231 : UInt64 = UInt64(4);
    var var5251 : Option<Rune> = (UInt64(18) as Rune);
    var loopTimeVar5255 : Range<UInt64> = (UInt64(UInt16(127))&127..=UInt64(207)&127:((-99)|1));
    var var5273 : Bool = (Option<Bool>.Some((###"6\\4Qx2R0jy"### is Array<Range<UInt16>>)) is () -> Array<Enum8>);
    var loopTimeVar5301 : Range<UInt64> = (UInt64(209)&127..=UInt64(113)&127:(Int64((-87))|1));
    var var5338 : (Range<Int16>, Float32, Range<UInt64>) = ((Int16(Int8(95))&127..Int16(-54)&127:((-72)|1)), Float32(-86.0), (UInt64(40)&127..UInt64(158)&127:(-106)|1));
    var loopTimeVar5351 : Int64 = 0;
    var loopTimeVar5398 : Int64 = 0;
    ([match (var5202) {
        case _ => 
            var4609 += Int32(25)
        
        case caseVar5213 => 
            var5217 %= ((Int32(24)) | 1)
        
        case caseVar5222 : Range<Int64> => 
            var2991 %= ((var4208) | 1)
        
        case _ => 
            var5231 <<= ((var5231) & 7);
            ()
        
    }, if (false) { // block id: 5237
        var2857 **= Float64(Int32(var2857) & 3);
        var3765;
        var677
    } else if (var3825) { // block id: 5244

    }, for (i in loopTimeVar5255 where var22) {
        if (false) { var5251 } else { Option<Rune>.None } 
    }, try (resource = Class348()) { // block id: 5262
        var2299;
        (var3825, (var378&127..=Int8(-109)&127:(var3706|1)), (UInt16(45), var5273, var4117, var3592, var4300, Int16(-96), (var3592&127..var369&127:((-58)|1))), var3788);
        var4220
    } finally { // block id: 5288
        Int16(115);
        ()
    }, for (i in loopTimeVar5301 where false) {
        ((Int16(11)&127..Int16(39)&127:(-113)|1), ((-23)&127..(-119)&127:11|1), var5217, var147, ());
        var677
    }, if (true) { // block id: 5309
        UInt16(195) | UInt16(176);
        Option<Bool>.Some(true);
        var918 &= var918
    }, (), if (false) { // block id: 5321
        var5323;
        var677
    }, (var5329 ?? ()), do {
        loopTimeVar5351++;
        if (false) { var5338 } else { var4277 } ;
        var164--
    } while ((var4300) && loopTimeVar5351 < 100 ) ], (try { // block id: 5358
        var3086;
        var5361
    } finally { // block id: 5363
        Option<Array<Int64>>.None
    } ?? (Option<Array<Int64>>.None ?? var3628)), (var5370 ?? try { // block id: 5374
        Option<Array<Int64>>.Some([var3706, (-35), 50, 51, (-81), (-23), var164, (-60), 17, (-34)]);
        var237 *= var237;
        [UInt8(230), UInt8(100), UInt8(13), UInt8(72), UInt8(24), UInt8(46), UInt8(124), UInt8(205), UInt8(173), UInt8(108)]
    } finally { // block id: 5391
        [UInt8(108), UInt8(73), UInt8(116), UInt8(32), UInt8(10), UInt8(40), UInt8(67), UInt8(202), UInt8(56), UInt8(178)]
    }), (while ((false) && loopTimeVar5398 < 100 ) {
        loopTimeVar5398++;

    } as Unit))
}



public func func281(param282 : Range<Int16>) : Array<Int64> { // block id: 283
    let var5445 : ?(UInt32, String, Int32, Int16, Unit, Int8, Bool) = Option<(UInt32, String, Int32, Int16, Unit, Int8, Bool)>.None;
    ((var2784|>func292)[3] ?? match (match (var2168) {
            case () => 
                ();
                var2833;
                var3116
            
            case () | () | () | () => 
                if (var4117) { Option<Range<Int8>>.Some(var252) } else { var5419 } ;
                var3056
            
            case _ => 
                var5445;
                if (var5153) { var3056 } else { var3116 } 
            
        }) {
        case (_ : Option<Int8>,_,caseVar5453 : Range<UInt16>,caseVar5454,caseVar5455 : UInt64) => 
            var2857 /= Float64((Int32(var2857)) | 1)
        
        case _ : Option<Array<Enum8>> => 
            if (var22) { var4277 } else { (param282, var4330, (UInt64(60)&127..=UInt64(141)&127:(var5473|1))) } ;
            var153
        
        case caseVar5479 : Array<Bool> => 
            ();
            Option<Unit>.None;
            var22 ||= false
        
        case _ => 
            var237++
        
    });
    let var5514 : ?Array<Range<UInt16>> = (103.0 as Array<Range<UInt16>>);
    var var5521 : UInt32 = UInt32(Int16(UInt8(Int8(23))));
    let var5574 : Int64 = Int64(UInt32(UInt32(219)));
    let var5585 : UInt8 = UInt8(40);
    var var5588 : UInt8 = UInt8(Int8(UInt8(128)));
    var var5601 : ?Unit = (("""
P@n6H
)\\Ms2
""" as UInt64) as Unit);
    [(Option<Int64>.None ?? var3706 >> ((var3706) & 7)), if ((Option<Bool>.None ?? var5153)) { // block id: 5500
        (UInt64(7), (var5505&127..UInt64(113)&127:(26|1)), var597, 58, var1567, var850);
        var5514;
        (-88)
    } else { // block id: 5518
        var5521 >>= ((var369) & 7);
        if (false) { Option<(UInt32, String, Int32, Int16, Unit, Int8, Bool)>.Some(var4989) } else { var5532 } ;
        var164 + 16
    }, var5473, ((var5545 ?? var3230) ?? (Option<Int64>.Some((-11)) ?? 76)), try { // block id: 5558
        120
    } finally { // block id: 5560
        if (false) { (var2022, [var5473, var327, var5569, var4587, var5574, var5569, var327, var5473, var5473, (-103)], [var5585, var5588, UInt8(139), UInt8(101), UInt8(50), UInt8(43), var5585, UInt8(56), UInt8(124), var5585], var5601) } else { var4435 } ;
        (Int8(68)&127..=var2561&127:(93|1));
        86
    }, (-16), (Option<Int64>.Some((-60)) ?? try { // block id: 5616
        var4330;
        ();
        var3706
    } finally { // block id: 5620
        var3706
    }), if (var4300) { // block id: 5625
        (-76)
    } else if (true) { // block id: 5628
        var237 <<= ((Int16(-34)) & 7);
        var327
    } else { // block id: 5633
        UInt32(231);
        var4220;
        -var164
    } ** (var164 & 3), match (var951) {
        case _ => 
            var164 * 91
        
    } - (76 ^ 99), match (var1211) {
        case (caseVar5654 : Option<Option<(UInt32, String, Int32, Int16, Unit, Int8, Bool)>>,caseVar5655 : Class348,_,_,caseVar5656) => 
            Option<String>.Some("""
%uP^#
Z^uF$
""");
            var5661
        
        case _ => 
            ();
            var var5670 : Int64 = (-46);
            var5670 % (((-96)) | 1)
        
        case _ => 
            var5419;
            (-98)
        
    }]
}

public func func175(param176 : UInt16, param177 : Option<Bool>, optionalParam178 ! : Bool = false, namedParam180 ! : Range<Int64>) : Option<Bool> { // block id: 181
    let var207 : UInt64 = UInt64(UInt32(UInt32(UInt32(UInt16(18)))));
    let var257 : UInt64 = UInt64(202);
    func func186(param187 : Option<UInt8>, param188 : Enum8, param189 : Int8) : (UInt32, String, Int32, Int16, Unit, Int8, Bool) { // block id: 190
        var var194 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
        var194[1];
        (UInt32(231)&127..UInt32(197)&127:(-112)|1);
        var var221 : (UInt32, String, Int32, Int16, Unit, Int8, Bool) = (UInt32(237), "5s<SJ`my_v", Int32(47), Int16(UInt8(Int8(23))), (), Int8(-43), (UInt8(Int8(UInt8(215))) is (UInt32, String, Int32, Int16, Unit, Int8, Bool)));
        var var5678 : (Range<Int16>) -> Array<Int64> = func281;
        if (if (var22) { // block id: 203
            (var194, var207, var55, optionalParam178, (Int32(7)&127..Int32(54)&127:62|1), (Int32(-128)&127..Int32(76)&127:(var164|1)), var221, (var237&127..var237&127:(var164|1)))
        } else { // block id: 241
            let var245 : Range<UInt64> = (UInt64(131)&127..=UInt64(138)&127:106|1);
            if (optionalParam178) { var245 } else { (UInt64(206)&127..=UInt64(13)&127:(var164|1)) } ;
            var252;
            var var266 : Range<Int32> = (Int32(UInt32(237))&127..Int32(UInt8(Int8(UInt8(100))))&127:(Int64(Int32(18))|1));
            ([(), (), (), (), (), (), (), (), (), ()], var257, Int32(58), false, (Int32(-14)&127..=var55&127:((-112)|1)), var266, var221, (Int16(29)&127..Int16(88)&127:22|1))
        }[3]) { // block id: 279
            (Int16(10)&127..Int16(118)&127:(-31)|1)|>var5678;
            match (var5683) {
                case caseVar5687 : Option<Bool> => 
                    ();
                    ();
                    ()
                
                case _ => 
                    ()
                
                case _ : Int32 => 
                    ()
                
                case _ : Array<Unit> => 
                    ()
                
                case _ => 
                    var3727
                
            };
            (UInt32(178), "'+}HIn[k!N", Int32(-88), var237, var3727, var2561, true)
        } else { // block id: 5715
            var loopTimeVar5719 : Range<UInt64> = (UInt64(202)&127..UInt64(44)&127:(97|1));
            for (i in loopTimeVar5719 where true) {

            };
            ();
            try { // block id: 5726
                ();
                Option<Array<Bool>>.Some([false, false, true, false, false, true, true, false, true, false]);
                if (false) { var221 } else { var4989 } 
            } catch (e: Exception) { // block id: 5734
                ();
                if (optionalParam178) { var221 } else { (UInt32(139), "Fbw#?V.cQ|", Int32(73), var237, var2558, param189, var5153) } 
            } finally { // block id: 5747
                if (optionalParam178) { (var2948, (18&127..=(-15)&127:115|1), Int32(37), var147, var3727) } else { var1211 } ;
                if (var5202) { var4989 } else { (UInt32(180), "%}G?#pe=PC", var55, var237, var1103, var1974, var3825) } ;
                if (var5153) { (UInt32(84), "ea{HJw^mKsR", var55, Int16(-94), var153, Int8(57), optionalParam178) } else { (UInt32(237), ">6+k:D-~Pg", var55, Int16(-55), var2876, var378, true) } 
            }
        }
    }
;
    match (func186(var3086, var2784, var3359)[3]) {
        case 11 | -24 => 
            let var5795 : Int16 = Int16(UInt8(UInt8(112)));
            (var5795&127..=var5795&127:(114|1));
            ();
            if (false) { var3765 } else { Enum68.enumValue1519((UInt64(16)&127..=UInt64(0)&127:((-114)|1)), var5329) } 
        
        case _ : Range<Int8> => 
            ();
            var2220 <= UInt32(8);
            var3765
        
        case caseVar5821 : Option<Array<Enum8>> => 
            Class348(UInt64(21));
            Enum68.enumValue1519(var597, var554);
            Enum68.defaultValue
        
        case _ => 
            var677;
            var4300 &&= var5835;
            Enum68.defaultValue
        
    };
    if ((try { // block id: 5842
        (var4008, Option<Class348>.None, [(-101), 54, var5473, var5661, var5852, 120, var327, var5569, var5852, var5852]);
        var454
    } finally { // block id: 5860
        ();
        Option<Bool>.Some(false)
    } ?? true)) { (var5867 as Bool) } else { ((if (true) { [(-67), (-39), 93, (-125), 91, (-86), 68, 67, (-20), 61] } else { [(-18), (-127), 116, (-108), 44, (-95), (-92), (-24), (-79), (-91)] } ) as Bool) } 
}

public func func138(param139 : Range<Int64>) : String { // block id: 140
    var loopTimeVar167 : Int64 = 0;
    while ((try { // block id: 143
        ();
        var147 == var147
    } catch (e: Exception) { // block id: 150
        ();
        var153;
        true
    } finally { // block id: 156
        !var22
    }) && loopTimeVar167 < 100 ) {
        loopTimeVar167++;
        (UInt8(154)&127..=UInt8(56)&127:(var164|1))
    };
    var loopTimeVar5890 : Int64 = 0;
    while (((func175(var650, Option<Bool>.None, optionalParam178 : var5835, namedParam180 : param139) ?? match (var5133) {
        case _ => 
            var2558;
            var4117
        
    })) && loopTimeVar5890 < 100 ) {
        loopTimeVar5890++;
        (Option<Range<UInt16>>.Some(var2711) ?? (UInt16(129)&127..=UInt16(209)&127:18|1))
    };
    """
MKza{Q
>V|@'
"""
}

public func func133(param134 : Float32) : String { // block id: 135
    ();
    var4008|>func138
}

public func func129(param130 : Float32) : String { // block id: 131
    if ((var5361 is Option<UInt32>)) { // block id: 5898
        var4330
    } else { // block id: 5900
        var2833;
        Float32(-125.0) + var5905
    }|>func133
}

public func func107(param108 : Range<UInt64>) : Array<Int64> { // block id: 109
    var112 += (Option<UInt8>.None ?? var112) / ((var125[5]) | 1);
    Float32(Float32(103.0))|>func129;
    try { // block id: 5912
        var loopTimeVar5920 : Range<UInt64> = (UInt64(75)&127..=UInt64(UInt64(Int16(-113)))&127:((-89)|1));
        for (i in loopTimeVar5920 where var4117) {
            var2558;
            var2857 %= Float64((Int32(var2857)) | 1)
        };
        if (true) { [59, 55, var5933, var4587, var5569, var327, 124, 15, var5933, var5852] } else { var3628 } 
    } finally { // block id: 5943
        if (var5835) { [(-31), 12, (-119), (-22), (-30), 111, 57, 17, (-91), 34] } else { [(-75), (-5), var327, (-7), var3706, var4587, var164, (-62), 96, (-30)] } 
    }
}

public func func64(param65 : UInt8) : Int64 { // block id: 66
    var var73 : Unit = ();
    let var76 : Enum68 = Enum68.defaultValue;
    match (try { // block id: 71
            var73;
            var76
        } finally { // block id: 78
            ();
            var76
        }) {
        case defaultValue => 
            ();
            ();
            (-62)
        
        case _ => 
            true;
            UInt8(69) + param65;
            var var94 : Int64 = 24;
            var94
        
    };
    (match (UInt64(133)) {
        case 144 | 18 | 76 => 
            var597
        
        case 237 | 98 => 
            Option<Enum8>.Some(var5970);
            let var5973 : ??(UInt32, String, Int32, Int16, Unit, Int8, Bool) = Option<Option<(UInt32, String, Int32, Int16, Unit, Int8, Bool)>>.None;
            var5973;
            var597
        
        case _ => 
            var3230;
            var597
        
    }|>func107)[4]
}

main(): Int64 {
    try {
        var var27 : Int64 = Int64(Int32(72));
        match ((Option<Enum8>.None ?? Enum8.defaultValue)) {
            case defaultValue => 
                var22 &&= var22;
                var27--;
                var var31 : Unit = ();
                var31
            
            case defaultValue => 
                "!39aWm1 a{}";
                var var39 : Float32 = Float32(-91.0);
                var39 /= Float32((Int32(var39)) | 1);
                var var43 : Unit = ();
                var43
            
            case caseVar47 => 
                if (var22) { caseVar47 } else { caseVar47 } ;
                -var55;
                var27 %= ((var27) | 1)
            
            case _ => 
                ()
            
        };
        var var5982 : (UInt8) -> Int64 = func64;
        if (var4300) { // block id: 5986
            ();
            UInt8(242)
        } else { // block id: 5989
            var5992 / ((UInt8(152)) | 1)
        }|>var5982
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var27*var27), 64)
        crccheck.updateBuffer(UInt64(var55*var55), 64)
        crccheck.updateBuffer(UInt64(var327*var327), 64)
        crccheck.updateBuffer(UInt64(var650*var650), 64)
        crccheck.updateBuffer(UInt64(var951*var951), 64)
        crccheck.updateBuffer(UInt64(var1974*var1974), 64)
        crccheck.updateBuffer(UInt64(var2248*var2248), 64)
        crccheck.updateBuffer(UInt64(var4208*var4208), 64)
        crccheck.updateBuffer(UInt64(var4411*var4411), 64)
        crccheck.updateBuffer(UInt64(var4746*var4746), 64)
        crccheck.updateBuffer(UInt64(var5473*var5473), 64)
        crccheck.updateBuffer(UInt64(var5505*var5505), 64)
        crccheck.updateBuffer(UInt64(var5569*var5569), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Enum68 {

}

extend Enum8 {

}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_unexpected_declaration_in_scope
// ASSERT: scan parse_expected_expr_or_decl_in
// ASSERT: scan parse_expected_character
// ASSERT: scan parse_expected_left_brace
// ASSERT: scan parse_expected_case
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_expected_catch_or_finally_in_try


