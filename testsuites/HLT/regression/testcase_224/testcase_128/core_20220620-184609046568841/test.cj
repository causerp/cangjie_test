/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output


public var var27 : Bool = (109 is UInt32)
public var var32 : Unit = ()
public var var44 : Float32 = Float32(63.0)
public let var57 : Float32 = Float32(Float32(Float32(Float32(Float32(57.0)))))
public var var99 : Float64 = 105.0
public var var110 : String = "xW*ahHqn+G"
public let var155 : Enum134 = Enum134.defaultValue
public let var183 : Int16 = Int16(-65)
public let var193 : Int32 = Int32(UInt32(193))
public let var203 : UInt32 = UInt32(Int32(88))
public var var211 : UInt16 = UInt16(UInt16(112))
public let var249 : Unit = ()
public var var255 : (String, Float64, UInt8, Unit, Int32) = ("""
(rku6
tDCMs
""", 48.0, UInt8(233), (), Int32(22))
public var var270 : Range<Int64> = ((-18)&127..=(-4)&127:41|1)
public let var331 : Bool = (((UInt8(41)&127..=UInt8(215)&127:(-76)|1) as Unit) is Array<Enum134>)
public var var380 : Unit = ()
public var var408 : Range<UInt16> = (UInt16(UInt8(Int8(85)))&127..=UInt16(UInt8(UInt8(220)))&127:(Int64(35)|1))
public var var423 : Int64 = (-113)
public let var501 : Range<Int16> = (Int16(-11)&127..=Int16(UInt8(UInt8(UInt8(200))))&127:(Int64(UInt64(22))|1))
public var var522 : UInt64 = UInt64(UInt64(Int32(Int8(Int8(-70)))))
public var var561 : Array<Int16> = [Int16(15), Int16(62), Int16(48), Int16(32), Int16(-78), Int16(-9), Int16(-86), Int16(-29), Int16(-51), Int16(-21)]
public var var614 : Bool = (UInt8(243) is Int8)
public let var631 : ?Option<Unit> = Option<Option<Unit>>.None
public let var634 : Option<Unit> = Option<Unit>.None
public var var641 : (UInt64, Int64, Float32, UInt16, UInt32) = (UInt64(Int32(24)), Int64(Int64(Int8(85))), Float32(Float32(-67.0)), UInt16(19), UInt32(UInt16(167)))
public var var654 : Rune = '1'
public var var688 : ??UInt8 = (UInt16(188) as Option<UInt8>)
public let var692 : ?UInt8 = Option<UInt8>.None
public var var732 : Int8 = Int8(-120)
public let var871 : Unit = ()
public var var881 : UInt32 = UInt32(Int8(65))
public var var903 : Int64 = 95
public let var980 : Unit = ()
public var var998 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
public var var1051 : Aggregate1047 = Aggregate1047()
public var var1168 : Array<Bool> = [false, true, false, false, true, true, true, true, true, true]
public var var1218 : UInt8 = UInt8(108)
public var var1222 : Rune = 'c'
public var var1225 : ?Array<Range<Int8>> = (Class1058() as Array<Range<Int8>>)
public let var1262 : Array<Enum134> = [Enum134.defaultValue, Enum134.defaultValue, Enum134.defaultValue, Enum134.defaultValue, Enum134.defaultValue, Enum134.defaultValue, Enum134.defaultValue, Enum134.defaultValue, Enum134.defaultValue, Enum134.defaultValue]
let var1346 : UInt64 = UInt64(105)
public var var1401 : (String, Int64, Unit, Range<Int8>, Range<Int8>, Range<Int64>, Array<Unit>, Range<Int64>) = (###"bRne}U[1kz"###, Int64(UInt8(Int8(-128))), (), (Int8(-102)&127..Int8(-75)&127:(-97)|1), (Int8(-65)&127..=Int8(-29)&127:14|1), (47&127..=(-39)&127:2|1), [(), (), (), (), (), (), (), (), (), ()], (38&127..=(-103)&127:71|1))
public let var1456 : (UInt64, Unit, Array<Bool>, UInt64, Unit, Range<UInt16>, Array<Int16>) = (UInt64(113), (), [true, false, ((UInt64(25), 26, Float32(-67.0), UInt16(92), UInt32(196)) is Int64), ((-79.0) is Array<Bool>), ((###"P${var110}F4${var110}KcG<o_z"###, 10.0, UInt8(206), (), Int32(43)) is Range<UInt32>), true, true, ((Int16(-74) as Option<Option<Unit>>) is ((Bool) -> Bool) -> Option<Option<Unit>>), true, true], UInt64((-113)), (), (UInt16(89)&127..=UInt16(77)&127:(110|1)), [Int16(-31), Int16(98), Int16(-109), Int16(-27), Int16(101), Int16(-106), Int16(-109), Int16(-104), Int16(96), Int16(-83)])
public var var1571 : UInt32 = UInt32(38)
public let var1635 : Array<Int64> = [Int64(Int8(37)), 95, Int64(Int16(UInt16(UInt8(105)))), (-58), Int64(Int16(10)), 107, Int64(UInt8(UInt8(32))), Int64(Int32(40)), (-24), (-32)]
public var var1677 : Int32 = Int32(Int16(Int16(55)))
let var1702 : ((String, Int64, Unit, Range<Int8>, Range<Int8>, Range<Int64>, Array<Unit>, Range<Int64>), Range<UInt8>, Bool, Class1058, Array<Unit>, UInt8, Range<UInt64>, UInt64) = ((###"%}k[m${var110}ZqF${var110}k$"###, Int64(Int8(-9)), (), (Int8(-52)&127..=Int8(-121)&127:3|1), (Int8(102)&127..Int8(UInt8(64))&127:((-76)|1)), (103&127..Int64(UInt16(121))&127:((-29)|1)), [(), (), (), (), (), (), (), (), (), ()], (Int64(Int16(0))&127..=Int64(UInt64(50))&127:((-99)|1))), (UInt8(56)&127..=UInt8(75)&127:(Int64(UInt16(UInt8(158)))|1)), (Int8(121) is (Range<Int8>) -> Bool), Class1058(), [(), (), (), (), (), (), (), (), (), ()], UInt8(241), (UInt64(89)&127..=UInt64(194)&127:(-1)|1), UInt64(78))
public let var1794 : Range<Int32> = (Int32(-77)&127..=Int32(-128)&127:123|1)
public let var1798 : UInt64 = UInt64(10)
public let var1829 : Int8 = Int8(115)
public let var1898 : Option<Range<Int8>> = Option<Range<Int8>>.None
public var var1930 : Bool = false
var var1938 : Int64 = Int64(UInt64(139))
public var var2014 : Int64 = Int64(Int64(UInt32(29)))
public var var2065 : ((UInt16, Array<Int64>, ((String, Int64, Unit, Range<Int8>, Range<Int8>, Range<Int64>, Array<Unit>, Range<Int64>), Range<UInt8>, Bool, Class1058, Array<Unit>, UInt8, Range<UInt64>, UInt64), Range<UInt64>), (String, Float64, UInt8, Unit, Int32), Range<UInt16>, Array<Bool>) = ((UInt16(UInt16(UInt16(245))), [93, (-108), 126, (-122), 80, 68, (-81), 54, 125, 120], (("""
j4a{Mk
@:0RV
""", 118, (), (Int8(109)&127..Int8(-63)&127:(121|1)), (Int8(-28)&127..=Int8(116)&127:(93|1)), ((-47)&127..(-21)&127:(-71)|1), [(), (), (), (), (), (), (), (), (), ()], ((-8)&127..=(-89)&127:((-15)|1))), (UInt8(18)&127..=UInt8(30)&127:(37|1)), ([Enum134.defaultValue, Enum134.defaultValue, Enum134.defaultValue, Enum134.defaultValue, Enum134.defaultValue, Enum134.defaultValue, Enum134.defaultValue, Enum134.defaultValue, Enum134.defaultValue, Enum134.defaultValue] is Interface1061), Class1058(), [(), (), (), (), (), (), (), (), (), ()], UInt8(113), (UInt64(94)&127..=UInt64(33)&127:((-62)|1)), UInt64(253)), (UInt64(Int32(71))&127..=UInt64(Int8(118))&127:((-31)|1))), ("Ty ~${var110}%${var110}c*e:${var110}n${var110}", (-51.0), UInt8(Int8(UInt8(231))), (), Int32(Int16(Int16(103)))), (UInt16(37)&127..UInt16(Int8(Int8(-121)))&127:(Int64(UInt32(UInt16(34)))|1)), [true, (((-106.0), (Int8(75)&127..=Int8(-93)&127:56|1), (UInt16(12)&127..=UInt16(45)&127:(6|1)), (UInt64(23), (), [false, true, false, true, true, true, true, true, true, true], UInt64(39), (), (UInt16(209)&127..=UInt16(13)&127:((-17)|1)), [Int16(55), Int16(-66), Int16(119), Int16(-35), Int16(61), Int16(-56), Int16(-66), Int16(64), Int16(32), Int16(-50)])) is (Float64, Range<Int8>, Range<UInt16>, (UInt64, Unit, Array<Bool>, UInt64, Unit, Range<UInt16>, Array<Int16>))), ((Int8(-61)&127..=Int8(-120)&127:((-75)|1)) is Int32), (UInt64(19) is Unit), false, (Class1058() is Array<Bool>), (("Z(${var110},${var110}6${var110}O&?4${var110}}D", 9, (), (Int8(-84)&127..Int8(-68)&127:(65|1)), (Int8(-100)&127..Int8(-54)&127:36|1), (75&127..50&127:((-11)|1)), [(), (), (), (), (), (), (), (), (), ()], (44&127..3&127:(11|1))) is (String) -> Option<Option<Option<Unit>>>), ((Option<Array<Range<Int8>>>.None as Float64) is (Range<Int64>) -> Array<Range<Int8>>), false, (Class1058() is (Array<Int16>, (UInt64, Int64, Float32, UInt16, UInt32), Rune, Option<Unit>, Int8, Range<UInt64>, Range<UInt16>))])
public var var2212 : ?Array<Range<Int8>> = (Class1058() as Array<Range<Int8>>)
public var var2320 : Range<Int8> = (Int8(-28)&127..=Int8(40)&127:41|1)
public let var2327 : Unit = ()
public var var2342 : Class1058 = Class1058()
public var var2366 : Bool = false
public let var2462 : Int8 = Int8(54)
public var var2481 : (Float64, Range<Int8>, Range<UInt16>, (UInt64, Unit, Array<Bool>, UInt64, Unit, Range<UInt16>, Array<Int16>)) = (Float64(Float32(Float32(Float32(126.0)))), (Int8(15)&127..Int8(6)&127:((-29)|1)), (UInt16(77)&127..UInt16(127)&127:106|1), (UInt64(187), (), [false, false, true, true, false, true, false, false, false, false], UInt64((-97)), (), (UInt16(229)&127..UInt16(19)&127:(-3)|1), [Int16(-112), Int16(-30), Int16(16), Int16(-113), Int16(-29), Int16(-118), Int16(-33), Int16(110), Int16(-125), Int16(-112)]))
public let var2645 : Int16 = Int16(Int16(115))
var var2679 : Int64 = Int64(UInt8(249))
public enum Enum134 {
    defaultValue |
    enumValue140(Bool) |
    enumValue1211(UInt8, () -> Unit, Rune, Option<Array<Range<Int8>>>)
}
public func func37(param38 : Bool) : Bool { // block id: 39
    try { // block id: 41
        match (var44) {
            case -58.0 | 79.0 => 
                var44
            
            case 7.0 | -55.0 | 110.0 | -127.0 => 
                ();
                var44 + var57
            
            case 96.0 => 
                ();
                var44 ** Float32(Int32(Float32(74.0)) & 3)
            
            case _ => 
                -Float32(-87.0)
            
        }
    } finally { // block id: 74
        var var78 : (UInt64, Int64, Float32, UInt16, UInt32) = (UInt64(115), 36, Float32(-12.0), UInt16(UInt8(97)), UInt32(205));
        var78[2]
    };
    func func88<T0, T1, T2>(param89 : UInt32, param90 : Int32, namedParam91 ! : UInt16, optionalParam92 ! : UInt8 = UInt8(127)) : Bool { // block id: 94
        var loopTimeVar130 : Int64 = 0;
        do {
            loopTimeVar130++;
            var loopTimeVar112 : Range<UInt64> = (UInt64(UInt16(UInt16(6)))&127..UInt64(UInt8(3))&127:(Int64(Int16(105))|1));
            for (i in loopTimeVar112 where true) {
                param89 - UInt32(16);
                var110
            }
        } while ((((var99 * var99) is Bool)) && loopTimeVar130 < 100 ) ;
        false
    }
;
    var var148 : Enum134 = Enum134.enumValue140(false);
    let var216 : Range<UInt64> = (UInt64(55)&127..=UInt64(2)&127:((-113)|1));
    func88<Option<Option<Unit>>, Float32, Option<Float64>>(UInt32(13), match ([Enum134.enumValue140(true), Enum134.enumValue140(false), Enum134.enumValue140(false), var148, Enum134.enumValue140(true), var148, var155, Enum134.enumValue140(var27), var155, var148][1]) {
        case caseVar164 => 
            ();
            Int32(-89)
        
        case caseVar170 : UInt16 => 
            let var173 : Range<Int8> = (Int8(-65)&127..Int8(124)&127:(-38)|1);
            var173;
            Int32(96)
        
        case _ => 
            let var187 : Int64 = Int64(Int32(Int8(UInt8(231))));
            if (param38) { (Int16(117)&127..Int16(27)&127:16|1) } else { (var183&127..=Int16(-15)&127:(var187|1)) } ;
            var193
        
    }, namedParam91 : if (match {
        case var27 => 
        (UInt32(195)&127..var203&127:(93|1));
        false
        case _ => 
        var211 **= (var211 & 3);
        var216;
        var99 >= var99
    }) { // block id: 225
        UInt16(153)
    } else { // block id: 227
        (UInt8(204)&127..=UInt8(154)&127:(-125)|1);
        var211
    })
}


public func func294() : Unit { // block id: 295

}

public func func489() : Unit { // block id: 236
    try { // block id: 240
        var44 += Float32(57.0);
        ("""
MQM$4
6<$OS
""", 16.0, UInt8(108), var249, Int32(-4))
    } catch (e: Exception) { // block id: 252
        var249;
        var255
    }[4];
    var loopTimeVar288 : Int64 = 0;
    ((var270 as Unit) ?? while ((try { // block id: 274
        var var277 : Int32 = Int32(94);
        var277 -= var277;
        var32;
        false
    } finally { // block id: 282
        Enum134.defaultValue;
        var27
    }) && loopTimeVar288 < 100 ) {
        loopTimeVar288++;
        ()
    });
    try (resource = Class1058()) { // block id: 290
        var32
    } finally { // block id: 292
        func294();
        var32
    }
}


public func func231(param232 : Range<Int8>) : Bool { // block id: 233
    func489();
    var var327 : Int32 = Int32(-33);
    try { // block id: 298
        [(), (), (), (), (), (), (), (), (), ()][1];
        var loopTimeVar308 : Range<UInt64> = (UInt64(36)&127..=UInt64(Int16(55))&127:(71|1));
        for (i in loopTimeVar308 where var27) {
            var32;
            var249
        };
        Option<Bool>.None.getOrThrow()
    } catch (e: Exception) { // block id: 320
        if (var27) { // block id: 323
            var27;
            var327 |= Int32(10);
            var331
        } else if (false) { // block id: 336
            Option<Bool>.None;
            var211 &= UInt16(54);
            UInt32(169) == var203
        } else { // block id: 344
            var203 != UInt32(111)
        }
    }
}

public func func376(param377 : Range<Int16>) : Unit { // block id: 378
    var380
}




public func func671(param672 : (Range<Int16>) -> Unit) : Range<Int32> { // block id: 675
    let var706 : UInt8 = UInt8(30);
    var var739 : Int8 = Int8(UInt8(213));
    match (((var688 ?? var692) ?? if (true) { // block id: 696
            UInt8(254)
        } else if (var331) { // block id: 699
            UInt8(135) + UInt8(177)
        } else { // block id: 703
            ();
            var706
        })) {
        case 72 | 189 => 
            var var717 : Range<Int8> = (Int8(119)&127..=Int8(-67)&127:48|1);
            if (false) { [(Int8(-18)&127..=Int8(-94)&127:(-59)|1), (Int8(44)&127..=Int8(-88)&127:(-60)|1), (Int8(29)&127..Int8(-121)&127:(-16)|1), (Int8(-13)&127..=Int8(25)&127:(-58)|1), (Int8(-33)&127..=Int8(-23)&127:(-59)|1), (Int8(14)&127..Int8(68)&127:117|1), (Int8(79)&127..=Int8(15)&127:(-37)|1), (Int8(-40)&127..Int8(54)&127:(-79)|1), (Int8(-23)&127..Int8(-25)&127:(-73)|1), (Int8(114)&127..=Int8(50)&127:(-18)|1)] } else { [(Int8(-82)&127..=Int8(104)&127:(-101)|1), var717, var717, (Int8(52)&127..=Int8(-85)&127:((-3)|1)), (Int8(-105)&127..Int8(-68)&127:(97|1)), (Int8(25)&127..=Int8(-38)&127:(-108)|1), var717, (var732&127..=Int8(-78)&127:(15|1)), (Int8(-82)&127..=Int8(-78)&127:73|1), (var739&127..Int8(-96)&127:(125|1))] } ;
            UInt16(121);
            if (var27) { (Int32(30)&127..Int32(-93)&127:((-86)|1)) } else { (Int32(122)&127..=var193&127:((-98)|1)) } 
        
        case caseVar757 => 
            if (var331) { (Int32(-60)&127..=Int32(2)&127:(var423|1)) } else { (var193&127..=var193&127:(var423|1)) } 
        
        case _ => 
            ();
            let var773 : Range<Int32> = (Int32(UInt16(Int16(UInt8(242))))&127..Int32(-71)&127:(Int64(Int16(UInt8(24)))|1));
            var773
        
    }
}

public func func798(param377 : Range<Int16>) : Unit { // block id: 378
    var380
}


public func func496(param497 : Float32) : Range<Int32> { // block id: 498
    match (var501) {
        case caseVar512 => 
            UInt16(12);
            [Int16(125), Int16(24), Int16(-86), Int16(-4), Int16(85), Int16(21), Int16(-23), Int16(-107), Int16(37), Int16(-54)]
        
        case caseVar518 : Int32 => 
            var522 *= UInt64(53);
            if (false) { [Int16(-6), var183, Int16(-63), Int16(-39), var183, var183, var183, var183, var183, Int16(-10)] } else { [Int16(119), var183, Int16(84), Int16(7), Int16(73), var183, Int16(49), var183, var183, var183] } 
        
        case caseVar555 : UInt64 => 
            if (var27) { [Int16(66), Int16(44), Int16(-118), Int16(-80), Int16(-53), Int16(-118), Int16(-51), Int16(-48), Int16(24), Int16(62)] } else { var561 } 
        
        case _ => 
            ();
            if (false) { [Int16(114), Int16(-49), var183, Int16(7), Int16(19), var183, var183, Int16(88), Int16(92), Int16(-20)] } else { [var183, var183, Int16(-31), var183, var183, var183, var183, var183, Int16(119), var183] } 
        
        case _ => 
            ();
            (UInt32(109)&127..UInt32(41)&127:(-69)|1);
            [var183, var183, Int16(82), var183, Int16(76), var183, var183, Int16(-64), Int16(-44), Int16(66)]
        
    };
    (if ([false, false, var614, false, true, var331, var614, true, true, var614][4]) { (var631 ?? var634) } else { ([Int16(-25), Int16(-108), Int16(-107), Int16(94), Int16(-75), Int16(-90), Int16(53), Int16(86), Int16(119), Int16(-35)], var641, var654, Option<Unit>.Some(()), Int8(-98), (UInt64(185)&127..UInt64(67)&127:(-92)|1), (UInt16(253)&127..=var211&127:((-66)|1)))[3] }  ?? func489());
    let var825 : Range<Int32> = (Int32(-99)&127..=Int32(121)&127:(-25)|1);
    try { // block id: 667
        Int16(var183);
        let var784 : ((Range<Int16>) -> Unit) -> Range<Int32> = { lambdaParameter787 : (Range<Int16>) -> Unit => (Int32(Int16(UInt8(74)))&127..Int32(Int32(UInt8(228)))&127:(Int64(UInt8(174))|1)) };
        func798|>var784
    } catch (_) { // block id: 801
        try { // block id: 803
            var380;
            var99 += var99;
            if (var331) { Option<Option<Unit>>.None } else { Option<Option<Unit>>.Some(var634) } 
        } catch (_) { // block id: 813
            var423 ^= (-30);
            var631
        } finally { // block id: 818
            if (false) { Option<Option<Unit>>.Some(Option<Unit>.None) } else { var631 } 
        };
        var825
    } finally { // block id: 827
        (Option<Range<Int32>>.Some((Int32(-70)&127..Int32(96)&127:78|1)) ?? (Int32(52)&127..var193&127:(var423|1)));
        try { // block id: 840
            if (true) { (Int32(70)&127..=Int32(47)&127:119|1) } else { (Int32(-86)&127..Int32(-73)&127:75|1) } 
        } finally { // block id: 845
            UInt16(41) | UInt16(26);
            if (true) { var825 } else { (Int32(24)&127..Int32(116)&127:(24|1)) } 
        }
    }
}

public func func489(param490 : Range<Int8>) : Unit { // block id: 491
    ();
    if (((var44|>func496) is () -> Unit)) { // block id: 858

    }
}


public struct Aggregate1047 {
    public init() { // block id: 1049

    }
;
    public func func1054(param1055 : Int16) : Int64 { // block id: 1056
        func1068([(), (), (), (), (), (), (), (), (), ()], if (false) { (Int8(51)&127..=Int8(-38)&127:(-107)|1) } else { (Int8(102)&127..=Int8(9)&127:36|1) } , var692).func1846()
    }

}

public interface Interface1066 {

}

public interface Interface1065 <: Interface1066 {

}

public interface Interface1064<T0, T1> <: Interface1065 & Interface1066 {

}

public interface Interface1063 <: Interface1064<Array<Unit>, String> {

}

public interface Interface1062 <: Interface1063 {
    func func1846() : Int64 { // block id: 1847
        Int64(var641[3]) | if (var27) { // block id: 1855
            (-106)
        } else { // block id: 1857
            var903 / (((-8)) | 1)
        }
    }

}

public interface Interface1061 <: Interface1062 {

}

public open class Class1058 <: Interface1061 & Interface1066 & Resource {
    public init() { // block id: 1060

    }
;
    public init(param1818 : (Array<Int16>, (UInt64, Int64, Float32, UInt16, UInt32), Rune, Option<Unit>, Int8, Range<UInt64>, Range<UInt16>)) { // block id: 1819
        var99 - var99
    }

    public func isClosed(): Bool { return false }
    public func close(): Unit {}
}



public func func1245(param1246 : String) : Option<Option<Option<Unit>>> { // block id: 1247
    let var1249 : Option<Option<Option<Unit>>> = (Option<Float64>.None as Option<Option<Unit>>);
    var1249
}




public func func1080(namedParam1081 ! : () -> Unit, optionalParam1083 ! : Array<Unit> = Array<Unit>(10){ i => () }) : Float64 { // block id: 1095
    let var1183 : Bool = (Int8(-41) is Bool);
    func func1099(namedParam1100 ! : (Bool) -> Bool) : Option<Option<Unit>> { // block id: 1103
        var loopTimeVar1127 : Int64 = 0;
        while (([true, false, true, false, true, true, false, true, false, false][4]) && loopTimeVar1127 < 100 ) {
            loopTimeVar1127++;
            if (var27) { // block id: 1112
                UInt32(50)
            } else { // block id: 1114
                if (var614) { (UInt16(8)&127..=UInt16(140)&127:(-29)|1) } else { var408 } ;
                var881
            };
            var loopTimeVar1125 : Int64 = 0;
            while ((false) && loopTimeVar1125 < 100 ) {
                loopTimeVar1125++;
                47
            }
        };
        var var1135 : Option<Range<Int32>> = ((Int8(14)&127..Int8(76)&127:11|1) as Range<Int32>);
        match (try { // block id: 1130
                Int8(-35) ^ var732;
                var1135;
                let var1141 : Interface1065 = Class1058();
                if (false) { var1141 } else { var1141 } 
            } finally { // block id: 1144
                var32;
                if (false) { [Int16(-17), var183, Int16(-65), Int16(55), var183, Int16(-17), Int16(30), Int16(-15), Int16(109), Int16(43)] } else { [Int16(-14), Int16(6), Int16(-33), Int16(-71), Int16(88), Int16(121), Int16(72), Int16(65), Int16(-21), Int16(-25)] } ;
                Class1058()
            }) {
            case _ => 
                var614 &&= true;
                var1168
            
            case caseVar1172 : Interface1062 => 
                (Int32(48)&127..=Int32(-14)&127:(62|1));
                [true, false, true, false, false, false, false, true, true, true]
            
            case _ => 
                if (var1183) { [var155, Enum134.defaultValue, var155, Enum134.defaultValue, var155, var155, var155, Enum134.defaultValue, Enum134.enumValue140(true), var155] } else { [Enum134.defaultValue, Enum134.enumValue140(var1183), Enum134.defaultValue, Enum134.defaultValue, Enum134.defaultValue, var155, var155, var155, Enum134.enumValue140(var614), Enum134.enumValue1211(var1218, func489, var1222, var1225)] } ;
                [false, true, false, true, var614, var331, false, var614, false, var27]
            
        };
        let var1253 : (String) -> Option<Option<Option<Unit>>> = func1245;
        ((match (Class1058()) {
            case _ : Array<Enum134> => 
                ();
                var1262;
                if (var27) { var110 } else { var110 } 
            
            case caseVar1280 : Unit => 
                if (var614) { var110 } else { var110 } 
            
            case caseVar1288 => 
                var903 **= (var423 & 3);
                if (false) { """
Gh7.y
!]xr~
""" } else { """
q7[4A
8W!)a{
""" } 
            
            case _ => 
                ();
                ();
                "MQ#DCuW4]2"
            
        }|>var1253) ?? ((var522 ^ UInt64(1)) as Option<Unit>))
    }
;
    var var1323 : ?Float64 = (Option<Float64>.Some(18.0) as Float64);
    let var1441 : Option<(UInt64, Unit, Array<Bool>, UInt64, Unit, Range<UInt16>, Array<Int16>)> = Option<(UInt64, Unit, Array<Bool>, UInt64, Unit, Range<UInt16>, Array<Int16>)>.Some((UInt64(53), (), [false, true, true, false, true, false, false, true, false, true], UInt64(142), (), (UInt16(16)&127..=UInt16(Int16(-104))&127:(43|1)), [Int16(90), Int16(-18), Int16(-53), Int16(-9), Int16(-65), Int16(121), Int16(-73), Int16(55), Int16(-103), Int16(33)]));
    let var1530 : (Array<Int16>, (UInt64, Int64, Float32, UInt16, UInt32), Rune, Option<Unit>, Int8, Range<UInt64>, Range<UInt16>) = ([Int16(-29), Int16(-83), Int16(6), Int16(85), Int16(120), Int16(42), Int16(-61), Int16(-58), Int16(-49), Int16(-120)], (UInt64(UInt32(35)), Int64(UInt32(206)), Float32(Float32(Float32(-84.0))), UInt16(Int8(UInt8(93))), UInt32(19)), 'J', Option<Unit>.Some(()), Int8(Int8(88)), (UInt64(179)&127..=UInt64(142)&127:(Int64(UInt16(135))|1)), (UInt16(UInt8(UInt8(163)))&127..UInt16(98)&127:((-91)|1)));
    func func1388(param1389 : Array<Range<Int8>>, param1390 : Interface1062, namedParam1391 ! : Range<UInt32>, optionalParam1392 ! : String = "M(g#67fzdM") : Float64 { // block id: 1394
        func489(if (false) { var1401 } else { var1401 } [3]);
        let var1501 : (UInt64, Unit, Array<Bool>, UInt64, Unit, Range<UInt16>, Array<Int16>) = (UInt64(233), (), [false, true, false, false, false, false, false, true, false, false], UInt64(UInt8(Int8(Int8(-7)))), (), (UInt16(232)&127..=UInt16(177)&127:43|1), [Int16(20), Int16(-97), Int16(11), Int16(-114), Int16(-38), Int16(-85), Int16(44), Int16(83), Int16(99), Int16(34)]);
        func func1422(optionalParam1423 ! : Unit = (), namedParam1425 ! : UInt32, namedParam1426 ! : Int8) : Interface1061 { // block id: 1427
            let var1517 : Bool = ((UInt64(UInt64(UInt32(94)))&127..=UInt64(56)&127:(Int64(Int8(-88))|1)) is Array<Bool>);
            if ((Option<Bool>.Some(var614) ?? false)) { (var1441 ?? var1456) } else { if (true) { // block id: 1496
                var1456
            } else if (var614) { // block id: 1499
                var1501
            } else { // block id: 1513
                'Z';
                if (var1517) { var1456 } else { var1456 } 
            } } [4];
            var1530;
            let var1580 : Interface1061 = Class1058();
            var var1592 : Interface1061 = Class1058();
            if (try { // block id: 1563
                if (true) { [(-51), 71, 58, (-104), (-94), (-20), 102, 12, (-44), (-96)] } else { [(-46), 1, (-100), (-104), (-112), (-100), (-74), (-123), (-22), 106] } ;
                ();
                var1571 >= var881
            } finally { // block id: 1574
                var871;
                var193 < Int32(97)
            }) { var1580 } else { (if (try { // block id: 1584
                var1183
            } catch (_) { // block id: 1586
                false
            }) { (if (false) { Class1058() } else { var1592 } ) } else { try { // block id: 1603
                [var614, var1183, true, false, var614, false, true, var27, false, false];
                UInt8(55);
                if (var1517) { var1592 } else { Class1058() } 
            } finally { // block id: 1620
                (-121.0);
                Class1058()
            } } ) } 
        }
;
        (match (func1422(namedParam1425 : var881, namedParam1426 : var732)) {
            case _ => 
                if (false) { Option<Unit>.None } else { Option<Unit>.None } 
            
        } ?? (var614 ||= match (var1635) {
            case _ => 
                var1218 & var1218;
                Float32(98.0);
                var614
            
            case _ : Option<(UInt64, Unit, Array<Bool>, UInt64, Unit, Range<UInt16>, Array<Int16>)> => 
                var423 /= ((25) | 1);
                var27
            
            case _ => 
                var903 >>= ((var423) & 7);
                var1677 -= Int32(104);
                false
            
        }));
        93.0
    }
;
    try { // block id: 1097
        func1099(namedParam1100 : func37);
        [3, 119, var423, 51, var903, (-8), var423, (-88), var423, (-3)][2];
        (var1323 ?? (-52.0))
    } catch (_) { // block id: 1328
        let var1365 : (Range<Int16>) -> Unit = func376;
        func func1330() : Float64 { // block id: 1331
            try (resource = Class1058()) { // block id: 1333
                match ((Int8(-112)&127..Int8(-61)&127:(-39)|1)) {
                    case _ => 
                        ()
                    
                    case _ => 
                        ();
                        var522 <<= ((var1346) & 7)
                    
                }
            } finally { // block id: 1348

            };
            if (try { // block id: 1351
                var27
            } catch (_) { // block id: 1353
                Aggregate1047();
                UInt16(145) == var211
            } finally { // block id: 1358
                Int32(32) == var193
            }) { // block id: 1362
                var501|>var1365;
                (Option<Float64>.None ?? var99)
            } else if (try { // block id: 1376
                var1183
            } finally { // block id: 1378
                var183 <= var183
            }) { // block id: 1382
                (Option<Float64>.None ?? var99)
            } else { // block id: 1386
                var var1687 : Range<UInt32> = (UInt32(Int16(-107))&127..UInt32(178)&127:(115|1));
                func1388([(Int8(16)&127..=Int8(-47)&127:51|1), (Int8(123)&127..Int8(-69)&127:60|1), (Int8(-86)&127..Int8(34)&127:(-76)|1), (Int8(-106)&127..=Int8(-72)&127:(-57)|1), (Int8(-55)&127..Int8(60)&127:88|1), (Int8(28)&127..Int8(77)&127:3|1), (Int8(-88)&127..Int8(-122)&127:(-120)|1), (Int8(50)&127..Int8(42)&127:(-32)|1), (Int8(69)&127..=Int8(75)&127:50|1), (Int8(123)&127..=Int8(-58)&127:(-67)|1)], Class1058(), namedParam1391 : var1687)
            }
        }
;
        func1330()
    }
}

public func func1068(param1069 : Array<Unit>, param1070 : Range<Int8>, param1071 : Option<UInt8>) : Class1058 { // block id: 1072
    var var1694 : () -> Unit = func489;
    (Option<Float64>.None ?? func1080(namedParam1081 : var1694));
    try { // block id: 1697
        var32;
        var1702[3]
    } finally { // block id: 1761
        match (("y N'>u\"+P5", 123, (), (var732&127..Int8(-52)&127:((-5)|1)), (Int8(29)&127..Int8(9)&127:50|1), ((-117)&127..12&127:(-5)|1), param1069, var270)) {
            case caseVar1777 : Interface1063 => 
                ();
                caseVar1777
            
            case _ => 
                let var1786 : Interface1063 = Class1058();
                if (true) { var1786 } else { var1786 } 
            
        };
        var249;
        (var1794, (var1798, var980, [false, false, true, var27, var27, var614, var27, true, var27, true], var522, (), var408, [Int16(-119), Int16(-9), Int16(95), Int16(112), Int16(34), Int16(43), Int16(9), Int16(96), Int16(-12), Int16(10)]), Class1058(([Int16(68), Int16(-94), Int16(-105), Int16(-51), Int16(-29), Int16(-26), Int16(-58), Int16(-110), Int16(55), Int16(-14)], var641, 'H', var634, var1829, (UInt64(46)&127..=var1346&127:((-30)|1)), (UInt16(142)&127..=UInt16(170)&127:(-35)|1))), [false, true, false, true, true, false, true, false, false, true], (Int8(-93)&127..=Int8(52)&127:124|1))[2]
    }
}

public func func1043(param1044 : Range<Int8>) : Range<Int8> { // block id: 1045
    var1051.func1054((var732, (var1346, (-119), var57, UInt16(249), UInt32(17)), var1218, var654, var183, var408, [true, false, false, false, true, true, false, true, false, true])[4]);
    param1044
}


public func func483(param484 : Range<Int64>) : Array<Range<Int8>> { // block id: 485
    let var860 : (Range<Int8>) -> Unit = { lambdaParameter863 : Range<Int8> => () };
    try (resource = Class1058()) { // block id: 487
        (var732&127..=Int8(-48)&127:((-32)|1))|>var860;
        var871
    } catch (e: Exception) { // block id: 873

    } finally { // block id: 874
        (Option<Option<UInt8>>.Some(var692) ?? Option<UInt8>.None);
        var881++
    };
    let var1954 : Option<Option<Option<Unit>>> = Option<Option<Option<Unit>>>.None;
    try { // block id: 885
        try (resource = Class1058()) { // block id: 887
            ([Int16(-124), Int16(-18), Int16(-54), Int16(8), Int16(-81), Int16(109), Int16(97), var183, Int16(61), Int16(65)], (var522, var903, Float32(-49.0), var211, UInt32(73)), var654, var634, Int8(88), (var522&127..=UInt64(218)&127:(25|1)), var408);
            let var919 : Bool = (([Int16(-55), Int16(-36), Int16(-16), Int16(Int8(70)), Int16(Int8(-61)), Int16(-39), Int16(-86), Int16(-28), Int16(UInt16(125)), Int16(85)], (UInt64(Int8(123)), 63, Float32(Float32(125.0)), UInt16(205), UInt32(UInt32(170))), 'J', (6 as Unit), Int8(11), (UInt64(133)&127..=UInt64(83)&127:113|1), (UInt16(UInt16(5))&127..UInt16(UInt16(161))&127:((-38)|1))) is Option<Option<UInt8>>);
            var27 ||= var919
        } finally { // block id: 956
            ()
        };
        let var1879 : (Range<Int8>) -> Range<Int8> = func1043;
        func func959(namedParam960 ! : Range<UInt8>, optionalParam961 ! : Bool = true, optionalParam963 ! : (String, Float64, UInt8, Unit, Int32) = ("kk^Y4%8kpH", (-24.0), UInt8(UInt8(UInt8(166))), (), Int32(-78)), namedParam972 ! : Array<Enum134>) : Array<Range<Int8>> { // block id: 973
            try { // block id: 977
                [var980, var249, (), var980, var32, (), var249, (), (), var32]
            } finally { // block id: 991
                if (true) { var692 } else { Option<UInt8>.Some(UInt8(125)) } ;
                var998
            }[5];
            var var1882 : Range<Int8> = (Int8(-77)&127..=Int8(72)&127:(Int64(UInt16(253))|1));
            var var1905 : Int64 = 39;
            (try { // block id: 1017
                var110;
                let var1026 : Range<Int8> = (Int8(35)&127..=Int8(40)&127:51|1);
                Option<Array<Range<Int8>>>.Some([(Int8(120)&127..var732&127:((-43)|1)), var1026, (Int8(26)&127..=Int8(-83)&127:(-62)|1), var1026, (Int8(-86)&127..var732&127:((-17)|1)), (Int8(73)&127..Int8(6)&127:74|1), (Int8(14)&127..Int8(101)&127:(-41)|1), var1026, var1026, var1026])
            } catch (e: Exception) { // block id: 1039
                Option<Array<Range<Int8>>>.None
            } ?? [(var1882|>var1879), (Int8(80)&127..=var732&127:(var903|1)), (var1898 ?? (Int8(-83)&127..=Int8(-54)&127:58|1)), (Int8(-113)&127..=Int8(102)&127:(var1905|1)), (var1898 ?? (Int8(-24)&127..=Int8(108)&127:11|1)), (var99, var1882, (UInt16(194)&127..var211&127:(73|1)), (UInt64(17), (), var1168, var522, var380, (UInt16(163)&127..=UInt16(6)&127:119|1), var561))[1], if (var1930) { (Int8(28)&127..Int8(56)&127:(-26)|1) } else { var1882 } , (var1829&127..var732&127:(var1938|1)), var1898.getOrThrow(), (Int8(-65)&127..Int8(-74)&127:100|1)])
        }
;
        func959(namedParam960 : (UInt8(196)&127..UInt8(239)&127:74|1), optionalParam961 : true, optionalParam963 : var255, namedParam972 : var1262)
    } finally { // block id: 1948
        var380;
        if (true) { // block id: 1952
            var1954;
            var903 ^ 99;
            ()
        } else if (var1930) { // block id: 1961
            var1677 -= var193
        };
        let var1971 : Range<Int8> = (Int8(UInt8(10))&127..Int8(106)&127:(Int64(UInt32(204))|1));
        [(Int8(107)&127..Int8(-124)&127:(3|1)), var1971, var1971, var1971, (var732&127..=Int8(40)&127:(var903|1)), (Int8(59)&127..=Int8(50)&127:((-86)|1)), var1971, (Int8(-127)&127..Int8(-91)&127:(var1938|1)), (Int8(40)&127..var732&127:(var1938|1)), var1971]
    }
}

public func func464(param465 : Int32) : Range<Int8> { // block id: 466
    try { // block id: 470
        (Int16(63)&127..Int16(-42)&127:(-5)|1)
    } catch (e: Exception) { // block id: 472
        var44 %= Float32((Int32(Float32(82.0))) | 1);
        (Int16(-58)&127..=Int16(-89)&127:(var423|1))
    }|>func376;
    (match (Option<Unit>.Some(var249)) {
        case _ => 
            var var2006 : Interface1063 = Class1058();
            var2006;
            if (true) { var270 } else { ((-54)&127..var2014&127:(82|1)) } 
        
        case _ : UInt16 => 
            ();
            if (false) { var270 } else { var270 } 
        
        case caseVar2029 : (Float64, Range<Int8>, Range<UInt16>, (UInt64, Unit, Array<Bool>, UInt64, Unit, Range<UInt16>, Array<Int16>)) => 
            (var423&127..=(-54)&127:(var423|1))
        
        case _ : (Int8, (UInt64, Int64, Float32, UInt16, UInt32), UInt8, Rune, Int16, Range<UInt16>, Array<Bool>) => 
            var44;
            (80&127..113&127:17|1)
        
        case _ => 
            (20&127..var2014&127:(var903|1))
        
    }|>func483)[8]
}

public func func456(param457 : () -> Unit) : Range<UInt16> { // block id: 459
    var loopTimeVar2051 : Int64 = 0;
    while ((((Int32(-78)|>func464)|>func231)) && loopTimeVar2051 < 100 ) {
        loopTimeVar2051++;

    };
    var var2338 : Range<UInt8> = (UInt8(4)&127..=UInt8(238)&127:3|1);
    try { // block id: 2057
        (var1798&127..UInt64(190)&127:(125|1));
        if (var1930) { var2065 } else { var2065 } 
    } catch (e: Exception) { // block id: 2206
        var871;
        if (var1930) { var1225 } else { var2212 } ;
        var2065
    } finally { // block id: 2216
        UInt32(191);
        let var2222 : (UInt16, Array<Int64>, ((String, Int64, Unit, Range<Int8>, Range<Int8>, Range<Int64>, Array<Unit>, Range<Int64>), Range<UInt8>, Bool, Class1058, Array<Unit>, UInt8, Range<UInt64>, UInt64), Range<UInt64>) = (UInt16(217), [(-101), 25, 72, 20, 19, 78, (-8), 4, 109, 119], (("""
erzie
u&/.F
""", (-61), (), (Int8(46)&127..Int8(79)&127:(90|1)), (Int8(-9)&127..Int8(84)&127:(81|1)), (71&127..=(-20)&127:(42|1)), [(), (), (), (), (), (), (), (), (), ()], (75&127..93&127:(88|1))), (UInt8(8)&127..=UInt8(61)&127:66|1), ((Int8(24)&127..=Int8(-92)&127:((-70)|1)) is Option<Array<Range<Int8>>>), Class1058(([Int16(-19), Int16(-67), Int16(-100), Int16(-69), Int16(-113), Int16(-16), Int16(-106), Int16(14), Int16(39), Int16(45)], (UInt64(166), (-42), Float32(52.0), UInt16(80), UInt32(20)), '7', Option<Unit>.Some(()), Int8(46), (UInt64(15)&127..UInt64(96)&127:(21|1)), (UInt16(141)&127..=UInt16(225)&127:(-101)|1))), [(), (), (), (), (), (), (), (), (), ()], UInt8(UInt8(242)), (UInt64(227)&127..UInt64(196)&127:98|1), UInt64(52)), (UInt64(140)&127..=UInt64(8)&127:43|1));
        if (true) { (var2222, (var110, var99, UInt8(207), (), Int32(-54)), (UInt16(236)&127..UInt16(111)&127:(-48)|1), [var27, true, var614, true, var331, var1930, false, false, true, true]) } else { ((var211, var1635, ((var110, 59, (), (Int8(16)&127..=Int8(-48)&127:(var903|1)), var2320, ((-123)&127..=(-26)&127:(-7)|1), [(), var980, var2327, (), (), (), (), (), var871, var980], var270), var2338, var27, var2342, var998, var1218, (UInt64(168)&127..=UInt64(185)&127:82|1), UInt64(42)), (UInt64(140)&127..UInt64(26)&127:(-56)|1)), (var110, (-91.0), UInt8(29), (), var193), (UInt16(135)&127..=UInt16(61)&127:29|1), [false, false, var1930, var27, true, false, var27, true, var2366, false]) } 
    }[0][2];
    match ((var980 as Option<Unit>)) {
        case caseVar2376 : (String, Float64, UInt8, Unit, Int32) => 
            ();
            var var2380 : Option<Float64> = Option<Float64>.None;
            var2380;
            (UInt16(207)&127..=var211&127:((-5)|1))
        
        case caseVar2388 => 
            if (var27) { (UInt16(2)&127..UInt16(51)&127:45|1) } else { (UInt16(55)&127..UInt16(231)&127:(83|1)) } 
        
        case caseVar2399 => 
            var1677++;
            if (var331) { (var211&127..UInt16(20)&127:(var903|1)) } else { (UInt16(246)&127..var211&127:((-88)|1)) } 
        
        case caseVar2415 : Array<Bool> => 
            var408
        
        case _ => 
            (UInt16(12)&127..UInt16(159)&127:(26|1))
        
    }
}

public func func2427() : Unit { // block id: 295

}

public func func451(param452 : () -> Unit) : Int16 { // block id: 454
    let var2425 : (() -> Unit) -> Range<UInt16> = func456;
    func2427|>var2425;
    var var2507 : (Float64, Range<Int8>, Range<UInt16>, (UInt64, Unit, Array<Bool>, UInt64, Unit, Range<UInt16>, Array<Int16>)) = (Float64(Float32(Float32(38.0))), (Int8(27)&127..Int8(-4)&127:56|1), (UInt16(239)&127..UInt16(UInt16(251))&127:((-90)|1)), (UInt64(UInt64(UInt64(246))), (), [(Option<Range<Int32>>.None is (String) -> Option<Option<Option<Unit>>>), false, false, (Option<Option<UInt8>>.Some(Option<UInt8>.None) is Interface1061), (Enum134.enumValue140(true) is ((String, Int64, Unit, Range<Int8>, Range<Int8>, Range<Int64>, Array<Unit>, Range<Int64>), Range<UInt8>, Bool, Class1058, Array<Unit>, UInt8, Range<UInt64>, UInt64)), (Option<UInt8>.Some(UInt8(17)) is Aggregate1047), (Option<Array<Range<Int8>>>.None is (Float64, Range<Int8>, Range<UInt16>, (UInt64, Unit, Array<Bool>, UInt64, Unit, Range<UInt16>, Array<Int16>))), ([Int16(33), Int16(47), Int16(-100), Int16(-53), Int16(125), Int16(-36), Int16(-115), Int16(-92), Int16(29), Int16(-78)] is (Int32) -> Range<Int8>), true, (Class1058() is Int16)], UInt64(UInt64(106)), (), (UInt16(37)&127..=UInt16(111)&127:(Int64(69)|1)), [Int16(-81), Int16(89), Int16(-104), Int16(-96), Int16(-66), Int16(-21), Int16(-103), Int16(71), Int16(32), Int16(-55)]));
    match (if (try { // block id: 2432
            var27
        } finally { // block id: 2434
            var1222;
            (-118) <= var2014
        }) { var2212 } else { try { // block id: 2441
            Option<Array<Range<Int8>>>.Some([(Int8(46)&127..Int8(117)&127:((-113)|1)), var2320, (Int8(115)&127..=Int8(-33)&127:(var903|1)), var2320, (var1829&127..=var732&127:(var903|1)), (Int8(64)&127..=Int8(68)&127:(-116)|1), (Int8(86)&127..=var2462&127:(var423|1)), (Int8(-48)&127..=Int8(14)&127:(var2014|1)), (Int8(-23)&127..=Int8(-101)&127:(-34)|1), var2320])
        } catch (_) { // block id: 2471
            if (true) { var2212 } else { var2212 } 
        } } ) {
        case caseVar2478 : Option<Array<Range<Int8>>> => 
            var2481
        
        case caseVar2503 : Option<Bool> => 
            var2327;
            var2507
        
        case _ => 
            var2507
        
    };
    try { // block id: 2568
        var1930 ||= false;
        var211;
        Int16(0)
    } finally { // block id: 2574
        ();
        if (var27) { (var110, (-52.0), var1218, var32, var1677) } else { var255 } ;
        Int16(108)
    } << ((match ((Int8(-72)&127..=Int8(120)&127:76|1)) {
        case caseVar2590 : Class1058 => 
            var var2595 : UInt32 = UInt32(22);
            var203 * var2595;
            var183
        
        case _ => 
            Int16(-21)
        
    }) & 7)
}

public func func2602() : Unit { // block id: 295

}


public func func355(param356 : Bool) : Range<Int8> { // block id: 357
    var loopTimeVar374 : Int64 = 0;
    do {
        loopTimeVar374++;
        var loopTimeVar372 : Int64 = 0;
        while ((var27) && loopTimeVar372 < 100 ) {
            loopTimeVar372++;
            var249;
            var var367 : UInt64 = UInt64(UInt32(69));
            var367 *= var367
        }
    } while ((true) && loopTimeVar374 < 100 ) ;
    var var383 : (Range<Int16>) -> Unit = { lambdaParameter386 : Range<Int16> =>  };
    var var432 : Range<Int8> = (Int8(29)&127..=Int8(-61)&127:(18|1));
    ([var183, Int16(108), var183, var183, var183, Int16(48), var183, var183, var183, Int16(104)][6]&127..var183 * var183&127:(match (var408) {
        case _ : Int64 => 
            var423 + 62
        
        case caseVar428 => 
            ();
            var432;
            var423
        
        case _ => 
            48;
            (var423&127..var423&127:((-111)|1));
            26 - 74
        
    }|1))|>var383;
    var var2656 : Option<Int16> = (((UInt16(105)&127..=UInt16(45)&127:55|1) as Option<Option<Unit>>) as Int16);
    match ([(func2602|>func451), match (var1401) {
            case caseVar2608 : Option<Bool> => 
                var211;
                var44;
                var183 / ((var183) | 1)
            
            case (caseVar2617,caseVar2618,caseVar2619,_,_,caseVar2620,caseVar2621,caseVar2622) => 
                ();
                var183 | var183
            
            case _ => 
                var249;
                Int16(47)
            
        }, if (param356) { // block id: 2634
            var183
        } else { // block id: 2636
            var var2638 : Array<Range<Int8>> = [(Int8(122)&127..=Int8(-107)&127:98|1), (Int8(-106)&127..=Int8(59)&127:12|1), (Int8(118)&127..Int8(4)&127:(-14)|1), (Int8(-43)&127..Int8(43)&127:43|1), (Int8(102)&127..=Int8(76)&127:(-107)|1), (Int8(-34)&127..Int8(-72)&127:92|1), (Int8(-71)&127..=Int8(119)&127:(-91)|1), (Int8(-60)&127..Int8(-46)&127:46|1), (Int8(53)&127..=Int8(-106)&127:(-112)|1), (Int8(-108)&127..=Int8(42)&127:(-110)|1)];
            var2638;
            Int16(-7)
        }, Int16(-9), var183 >> ((var2645) & 7), Int16(Int16(-93)), (var2656 ?? var183), Int16(36), var183, Int16(3)]) {
        case _ : Option<Unit> => 
            if (var1930) { (Int8(-101)&127..=Int8(-28)&127:(-30)|1) } else { (Int8(-78)&127..Int8(-91)&127:(-82)|1) } 
        
        case _ : Range<Int8> => 
            if (var1930) { (UInt64(190), var2679, Float32(126.0), UInt16(138), UInt32(163)) } else { var641 } ;
            var522++;
            if (false) { (Int8(-105)&127..=Int8(94)&127:123|1) } else { (Int8(-47)&127..=Int8(-48)&127:119|1) } 
        
        case caseVar2694 => 
            Option<Option<Unit>>.Some(var634);
            var2320
        
        case _ => 
            var631;
            var522 *= UInt64(115);
            var432
        
    }
}


main(): Int64 {
    try {
        let var22 : UInt64 = UInt64(UInt8(132));
        var loopTimeVar35 : Int64 = 0;
        do {
            loopTimeVar35++;
            var32
        } while ((try { // block id: 9
            var var11 : Bool = ('G' is UInt16);
            var11
        } catch (e: Exception) { // block id: 14
            ();
            UInt64(118) == UInt64(164)
        } finally { // block id: 19
            var22 / ((var22) | 1);
            var27
        }) && loopTimeVar35 < 100 ) ;
        var var349 : (Range<Int8>) -> Bool = { lambdaParameter352 : Range<Int8> => true };
        true|>(func355~>var349);
        Int64((-12)) - (Option<Int64>.None ?? 37)
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var22*var22), 64)
        crccheck.updateBuffer(UInt64(var423*var423), 64)
        crccheck.updateBuffer(UInt64(var1571*var1571), 64)
        crccheck.updateBuffer(UInt64(var1798*var1798), 64)
        crccheck.updateBuffer(UInt64(var1829*var1829), 64)
        crccheck.updateBuffer(UInt64(var1938*var1938), 64)
        crccheck.updateBuffer(UInt64(var2462*var2462), 64)
        crccheck.updateBuffer(UInt64(var2679*var2679), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Enum134 {

}

extend Aggregate1047 {

}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_unexpected_declaration_in_scope
// ASSERT: scan parse_expected_left_brace
// ASSERT: scan parse_expected_case
// ASSERT: scan parse_expected_character
// ASSERT: scan parse_expected_expr_or_decl_in
// ASSERT: scan parse_expected_catch_or_finally_in_try


