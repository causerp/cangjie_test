/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output


public var var15 : Option<Enum7> = (UInt32(10) as Enum7)
var var23 : UInt32 = UInt32(UInt8(Int8(-52)))
var var48 : Rune = 'S'
public let var78 : (Float64, Unit, Int16, UInt16, Bool) = (Float64(Float32(125.0)), (), Int16(60), UInt16(70), false)
let var109 : (Int64, Float32) = ((-80), Float32(Float32(Float32(108.0))))
public let var118 : Class66 = Class66()
var var144 : Int32 = Int32(94)
public let var149 : Float64 = Float64(Float32(Float32(-89.0)))
public var var160 : Enum7 = Enum7.defaultValue
var var248 : Int64 = (-29)
public var var287 : UInt16 = UInt16(Int8(79))
let var408 : Bool = (Class66() is Range<Int16>)
var var412 : Option<Option<Enum347>> = Option<Option<Enum347>>.None
public let var447 : Unit = ()
public let var455 : Int64 = Int64(UInt64(245))
var var467 : String = """
mz8/m
$Rds3
"""
public var var524 : Bool = (Option<Unit>.None is Enum347)
public var var676 : UInt32 = UInt32(UInt16(209))
var var694 : (UInt32, Range<UInt32>, Range<Int16>, Int16, Array<Unit>) = (UInt32(Int16(Int8(Int8(-108)))), (UInt32(144)&127..=UInt32(242)&127:11|1), (Int16(UInt16(Int8(-127)))&127..Int16(UInt16(203))&127:(52|1)), Int16(-27), [(), (), (), (), (), (), (), (), (), ()])
public var var901 : ?Bool = ([true, true, true, true, true, false, true, true, false, false] as Bool)
public var var905 : Bool = ([Option<Bool>.None, ((40, Float32(16.0)) as Bool), (([(), (), (), (), (), (), (), (), (), ()], (false, (UInt64(138)&127..=UInt64(185)&127:10|1), ((-1)&127..=(-1)&127:33|1), ((-52), Float32(121.0))), UInt16(182), (Int32(-90)&127..Int32(-33)&127:(29|1)), (-32.0), (Int8(-119)&127..=Int8(20)&127:(-110)|1), (UInt16(126)&127..UInt16(122)&127:5|1)) as Bool), ((UInt64(237)&127..UInt64(61)&127:((-65)|1)) as Bool), ((UInt32(113), (UInt32(82)&127..UInt32(170)&127:25|1), (Int16(5)&127..Int16(68)&127:(-25)|1), Int16(-118), [(), (), (), (), (), (), (), (), (), ()]) as Bool), Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, ((UInt8(148)&127..=UInt8(102)&127:(12|1)) as Bool), Option<Bool>.None] is Option<Unit>)
var var995 : Range<UInt8> = (UInt8(202)&127..=UInt8(UInt8(98))&127:(115|1))
let var1015 : (Int64, Float32) = (Int64(Int64(UInt32(246))), Float32(Float32(Float32(Float32(79.0)))))
public var var1102 : UInt64 = UInt64(75)
public let var1142 : Int32 = Int32(-66)
public var var1288 : Int8 = Int8(25)
public var var1334 : Int16 = Int16(126)
var var1479 : Option<Option<Unit>> = Option<Option<Unit>>.None
let var1553 : Enum7 = Enum7.defaultValue
var var1616 : Bool = true
public let var1624 : Range<Int8> = (Int8(112)&127..Int8(-28)&127:(Int64(UInt8(Int8(71)))|1))
var var1769 : Float64 = (-30.0)
public var var1855 : Int64 = Int64(Int32(Int16(-43)))
var var1956 : ?Bool = (Class472<Option<Array<Unit>>, Array<Int64>>() as Bool)
let var2085 : Range<UInt64> = (UInt64(19)&127..UInt64(70)&127:((-5)|1))
public let var2196 : ?UInt8 = (Option<Array<Int64>>.None as UInt8)
let var2319 : Array<Int64> = [(-122), 99, 47, (-111), 49, (-53), 113, 95, 24, (-50)]
public var var2361 : Interface478 = Class472<Option<Array<Unit>>, Array<Int64>>()
let var2390 : UInt64 = UInt64(124)
let var2406 : ??Array<Unit> = Option<Option<Array<Unit>>>.None
var var2414 : Option<Option<Option<Array<Unit>>>> = (Class472<Option<Array<Unit>>, Array<Int64>>() as Option<Option<Array<Unit>>>)
public let var2539 : (Range<Int64>, UInt8, UInt8, (Unit, Range<Int8>, Unit)) = ((Int64(Int16(57))&127..124&127:(Int64(Int8(-118))|1)), UInt8(UInt8(168)), UInt8(Int8(45)), ((), (Int8(Int8(3))&127..Int8(UInt8(112))&127:(Int64(Int8(84))|1)), ()))
public var var2590 : Bool = true
public var var2685 : (Int16, UInt32, Range<UInt16>, Array<Range<UInt64>>, Rune) = (Int16(-70), UInt32(Int8(UInt8(174))), (UInt16(136)&127..=UInt16(189)&127:(-9)|1), [(UInt64(63)&127..UInt64(194)&127:120|1), (UInt64(187)&127..=UInt64(206)&127:(-123)|1), (UInt64(16)&127..UInt64(111)&127:(-32)|1), (UInt64(201)&127..UInt64(237)&127:82|1), (UInt64(107)&127..UInt64(153)&127:(-116)|1), (UInt64(237)&127..UInt64(199)&127:(-115)|1), (UInt64(153)&127..UInt64(163)&127:(-98)|1), (UInt64(25)&127..=UInt64(189)&127:64|1), (UInt64(125)&127..=UInt64(52)&127:78|1), (UInt64(220)&127..UInt64(198)&127:(-24)|1)], 'W')
public var var2711 : Int16 = Int16(Int16(96))
public var var2728 : ?Unit = Option<Unit>.None
var var2757 : Range<Int64> = ((-128)&127..=(-60)&127:(-11)|1)
var var2854 : Unit = ()
let var2871 : Float64 = Float64(Float64((-4.0)))
let var2955 : Enum347 = Enum347.defaultValue
let var2990 : Unit = ()
var var3052 : Range<UInt32> = (UInt32(154)&127..UInt32(85)&127:21|1)
let var3067 : Option<UInt32> = Option<UInt32>.None
public let var3120 : Float32 = Float32(Float32(-58.0))
let var3143 : (Array<Unit>, (Bool, Range<UInt64>, Range<Int64>, (Int64, Float32)), UInt16, Range<Int32>, Float64, Range<Int8>, Range<UInt16>) = ([(), (), (), (), (), (), (), (), (), ()], (false, (UInt64(Int32(-16))&127..UInt64(UInt64(146))&127:(109|1)), (97&127..=(-39)&127:34|1), (Int64(Int16(-82)), Float32(Float32(-80.0)))), UInt16(48), (Int32(UInt32(225))&127..Int32(Int16(UInt8(144)))&127:(95|1)), Float64(Float32(14.0)), (Int8(-11)&127..=Int8(75)&127:(-62)|1), (UInt16(131)&127..UInt16(67)&127:71|1))
public let var3263 : Range<Int16> = (Int16(83)&127..Int16(-40)&127:(Int64(Int8(-103))|1))
public var var3301 : UInt8 = UInt8(UInt8(UInt8(UInt8(UInt8(19)))))
var var3310 : ?Float32 = (([(), (), (), (), (), (), (), (), (), ()], ((Float32(-27.0) is (Unit, Array<Range<UInt64>>, Float32)), (UInt64(167)&127..UInt64(234)&127:100|1), (89&127..=120&127:(-51)|1), ((-46), Float32(46.0))), UInt16(250), (Int32(81)&127..Int32(103)&127:((-122)|1)), 36.0, (Int8(UInt8(70))&127..Int8(-29)&127:(Int64(6)|1)), (UInt16(183)&127..=UInt16(163)&127:(-94)|1)) as Float32)
public let var3359 : Array<Range<UInt64>> = Array<Range<UInt64>>(10){ i => (UInt64(176)&127..UInt64(104)&127:87|1) }
public var var3411 : Float32 = Float32(-47.0)
public enum Enum7 {
    defaultValue |
    enumValue2049(UInt8)
}


public open class Class66 {
    public init() { // block id: 68

    }
;
    public static let var71 : Float32 = Float32(-40.0);
    var var94 : UInt8 = UInt8(153);
    static let var127 : Int8 = Int8(-48);
    open func func121(param122 : Option<Unit>) : Int8 { // block id: 123
        Class66.var127
    }
;
    public static let var219 : (Int64, Float32) = (15, Float32(5.0));
    static var var304 : UInt32 = UInt32(19)
}



public enum Enum347 {
    defaultValue |
    enumValue3041(Int8, Interface475<Int64>, Unit, (UInt32, Range<UInt32>, Range<Int16>, Int16, Array<Unit>))
}


public func func359(param360 : Rune) : Option<Enum347> { // block id: 361
    let var367 : Unit = ();
    try { // block id: 365
        var367;
        let var370 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
        var370
    } catch (_) { // block id: 372
        [false, false, false, false, true, true, false, true, true, false];
        (-29.0);
        [var367, (), (), var367, (), (), var367, var367, (), var367]
    }[6];
    var var418 : ?Enum347 = (Enum347.defaultValue as Enum347);
    if ((true, (UInt64(89)&127..UInt64(187)&127:(var248|1)), ((-115)&127..=(-8)&127:(-105)|1), var109)[0]) { (" bh^jpWo(6" as Enum347) } else { (if (var408) { var412 } else { var412 }  ?? if (false) { var418 } else { var418 } ) } 
}

public interface Interface479 {

}

public interface Interface478 <: Interface479 {

}

public interface Interface477 <: Interface478 {

}

public interface Interface476 <: Interface477 {

}

public interface Interface475<T0> <: Interface476 & Interface477 where T0 <: Int64 {

}

public open class Class472<T0, T1> <: Interface475<Int64> & Interface478 & Resource where T0 <: Option<Array<Unit>>, T1 <: Array<Int64> {
    public init() { // block id: 474

    }
;
    static var var482 : Unit = ();
    public init(param1405 : Array<Int64>, param1406 : Int32) { // block id: 1407
        var var1409 : Unit = ();
        var1409
    }

    public func isClosed(): Bool { return false }
    public func close(): Unit {}
}











func func2200<T0, T1>(param2201 : Range<UInt8>) : Int64 { // block id: 2202
    var455
}


func func436(namedParam633 ! : Interface478, namedParam634 ! : UInt32, namedParam635 ! : Range<Int16>) : Interface477 { // block id: 636
    var var654 : Class472<Option<Array<Unit>>, Array<Int64>> = Class472<Option<Array<Unit>>, Array<Int64>>();
    let var791 : (Int16, UInt32, Range<UInt16>, Array<Range<UInt64>>, Rune) = (Int16(Int8(-34)), UInt32(106), (UInt16(UInt16(210))&127..=UInt16(Int8(UInt8(59)))&127:(Int64(UInt8(UInt8(251)))|1)), [(UInt64(63)&127..=UInt64(203)&127:22|1), (UInt64(245)&127..=UInt64(189)&127:118|1), (UInt64(120)&127..=UInt64(46)&127:(-46)|1), (UInt64(154)&127..=UInt64(182)&127:(-90)|1), (UInt64(89)&127..UInt64(127)&127:16|1), (UInt64(54)&127..UInt64(135)&127:(-128)|1), (UInt64(166)&127..UInt64(130)&127:56|1), (UInt64(17)&127..UInt64(90)&127:21|1), (UInt64(76)&127..UInt64(216)&127:(-38)|1), (UInt64(89)&127..=UInt64(173)&127:(-58)|1)], 'U');
    let var970 : (Interface479, Range<Int32>, Range<Int64>, Int32) = (Class472<Option<Array<Unit>>, Array<Int64>>(), (Int32(Int16(Int8(-114)))&127..=Int32(Int16(-93))&127:(Int64(UInt32(Int8(-9)))|1)), ((-53)&127..=(-9)&127:(-53)|1), Int32(-63));
    func func772(param773 : Range<Int8>, namedParam774 ! : (Rune, (Int64, Float32), Float32, Enum7, Int32, Unit, UInt32, Float64)) : Bool { // block id: 775
        let var839 : Int64 = Int64(UInt8(UInt8(76)));
        let var858 : Float32 = Float32(Float32(Float32(94.0)));
        let var965 : ?Unit = Option<Unit>.None;
        let var988 : UInt64 = UInt64(Int64(UInt8(202)));
        try { // block id: 777
            func func779<T0>(param780 : Range<UInt64>, optionalParam781 ! : Interface477 = Class472<Option<Array<Unit>>, Array<Int64>>(), namedParam783 ! : Range<UInt8>) : Bool where T0 <: Option<Array<Int64>> { // block id: 784
                var var822 : UInt32 = UInt32(Int16(UInt8(UInt8(116))));
                match (var791[3][0]) {
                    case _ : Interface479 => 
                        var447
                    
                    case _ => 
                        ()
                    
                    case _ => 
                        var822 <<= ((UInt32(222)) & 7)
                    
                    case _ => 
                        Class472<Option<Array<Unit>>, Array<Int64>>();
                        var447;
                        ()
                    
                };
                Enum7.defaultValue;
                var var882 : UInt8 = UInt8(109);
                if (match ([var839, var455, (-126), var839, 54, (-35), var455, var839, var455, 22]) {
                    case _ : Option<Bool> => 
                        var447;
                        var858 + Float32(-51.0)
                    
                    case _ => 
                        Float32(41.0) ** Float32(Int32(var858) & 3)
                    
                    case caseVar871 : (Float64, Unit, Int16, UInt16, Bool) => 
                        ();
                        -Float32(-103.0)
                    
                    case caseVar878 : String => 
                        var882 <<= ((var882) & 7);
                        Float32(26.0)
                    
                    case _ => 
                        var858 / Float32((Int32(Float32(-44.0))) | 1)
                    
                } >= var858) { // block id: 892
                    ();
                    try (resource = Class472<Option<Array<Unit>>, Array<Int64>>()) { // block id: 895
                        ();
                        ()
                    } finally { // block id: 898

                    };
                    (var901 ?? var905)
                } else { // block id: 962
                    var965.getOrThrow();
                    var970[0];
                    false
                }
            }
;
            func779<Option<Array<Int64>>>((var988&127..UInt64(25)&127:(var839|1)), namedParam783 : var995)
        } finally { // block id: 1001
            let var1005 : Range<UInt64> = (UInt64(162)&127..=UInt64(188)&127:11|1);
            let var1008 : Range<Int64> = ((-128)&127..Int64(Int16(-69))&127:((-31)|1));
            (true, var1005, var1008, var1015);
            (Class472<Option<Array<Unit>>, Array<Int64>>() is Unit)
        }
    }
;
    let var1162 : Option<Range<Int8>> = ([(), (), (), (), (), (), (), (), (), ()] as Range<Int8>);
    let var1202 : Float32 = Float32(Float32(Float32(-71.0)));
    let var1437 : Interface477 = Class472<Option<Array<Unit>>, Array<Int64>>([62, (-98), (-125), (-30), (-20), 34, (-76), 99, 25, (-126)], Int32(-25));
    let var1528 : Range<UInt32> = (UInt32(47)&127..UInt32(32)&127:(-51)|1);
    let var1545 : Array<Range<Int8>> = [(Int8(4)&127..Int8(1)&127:26|1), (Int8(-86)&127..=Int8(30)&127:(-128)|1), (Int8(75)&127..Int8(41)&127:(-3)|1), (Int8(-46)&127..Int8(-106)&127:(-87)|1), (Int8(-46)&127..=Int8(97)&127:(-8)|1), (Int8(121)&127..Int8(-86)&127:(-93)|1), (Int8(85)&127..Int8(-106)&127:37|1), (Int8(-2)&127..Int8(-101)&127:37|1), (Int8(119)&127..=Int8(-37)&127:10|1), (Int8(-78)&127..Int8(13)&127:(-96)|1)];
    func func1027(optionalParam1028 ! : Range<UInt16> = (UInt16(30)&127..UInt16(146)&127:((-103)|1))) : Range<Int8> { // block id: 1033
        let var1063 : (Rune, (Int64, Float32), Float32, Enum7, Int32, Unit, UInt32, Float64) = ('j', (Int64(UInt16(141)), Float32(Float32(29.0))), Float32(6.0), Enum7.defaultValue, Int32(61), (), UInt32(UInt16(Int8(92))), Float64(Float64((-47.0))));
        let var1124 : Unit = ();
        let var1129 : Enum7 = Enum7.defaultValue;
        let var1176 : Range<Int8> = (Int8(67)&127..Int8(12)&127:91|1);
        let var1259 : ?Unit = (Float32(Float32(-9.0)) as Unit);
        func func1145() : Unit { // block id: 1146
            var var1214 : Range<UInt32> = (UInt32(48)&127..=UInt32(70)&127:((-64)|1));
            var var1224 : Rune = 'g';
            var var1230 : Int32 = Int32(51);
            try { // block id: 1148
                match ([(-76), 58, (-63), (-27), 16, 1, (-125), (-69), (-12), 73]) {
                    case _ => 
                        var447;
                        Option<Array<Unit>>.Some([(), (), (), (), (), (), (), (), (), ()])
                    
                };
                (var1162 ?? var1176)
            } finally { // block id: 1178
                [false, true, true, true, true, false, true, true, false, true];
                try { // block id: 1181
                    var1124;
                    var var1184 : (Bool, Range<UInt64>, Range<Int64>, (Int64, Float32)) = (true, (UInt64(20)&127..=UInt64(235)&127:42|1), (Int64(UInt8(Int8(-102)))&127..=(-20)&127:(100|1)), (51, Float32(-106.0)));
                    var1184;
                    ('G', ((-5), var1202), var1202, Enum7.defaultValue, Int32(55), (), namedParam634, var149)
                } catch (e: Exception) { // block id: 1212
                    var1214;
                    if (true) { var1063 } else { (var1224, var1015, var1202, Enum7.defaultValue, var1230, (), UInt32(254), (-114.0)) } 
                } finally { // block id: 1235
                    var var1238 : Int16 = Int16(UInt8(224));
                    var1238 += var1238;
                    var1124;
                    (var1224, ((-20), Float32(-109.0)), var1202, var160, Int32(99), (), namedParam634, 110.0)
                };
                (Int8(20)&127..=Int8(-64)&127:(-128)|1)
            };
            try (resource = Class472<Option<Array<Unit>>, Array<Int64>>()) { // block id: 1256
                (var1259 as Range<Int8>);
                try { // block id: 1264
                    ();
                    var1124
                } finally { // block id: 1267
                    var var1270 : UInt8 = UInt8(19);
                    var1270 &= UInt8(40);
                    ()
                };
                var287 %= ((var287) | 1)
            } finally { // block id: 1277
                var loopTimeVar1283 : Int64 = 0;
                do {
                    loopTimeVar1283++;
                    ()
                } while ((false) && loopTimeVar1283 < 100 ) 
            };
            var loopTimeVar1306 : Range<UInt64> = (UInt64(UInt8(56))&127..=UInt64(UInt64(16))&127:(Int64(UInt16(235))|1));
            for (i in loopTimeVar1306 where func772((var1288&127..=var1288&127:(6|1)), namedParam774 : (Option<(Rune, (Int64, Float32), Float32, Enum7, Int32, Unit, UInt32, Float64)>.None ?? (var1224, (var455, Float32(105.0)), Float32(-58.0), var1129, Int32(-112), (), UInt32(137), 67.0)))) {

            }
        }
;
        let var1323 : UInt8 = UInt8(52);
        func func1036(param1037 : Interface477, namedParam1038 ! : Option<Unit>) : (Rune, (Int64, Float32), Float32, Enum7, Int32, Unit, UInt32, Float64) { // block id: 1039
            var var1045 : (Unit, Array<Range<UInt64>>, Float32) = ((), [(UInt64(169)&127..UInt64(12)&127:(-98)|1), (UInt64(102)&127..UInt64(230)&127:(-59)|1), (UInt64(181)&127..UInt64(143)&127:(-51)|1), (UInt64(123)&127..UInt64(178)&127:54|1), (UInt64(154)&127..UInt64(81)&127:26|1), (UInt64(209)&127..=UInt64(118)&127:(-15)|1), (UInt64(19)&127..UInt64(191)&127:61|1), (UInt64(122)&127..=UInt64(118)&127:65|1), (UInt64(86)&127..UInt64(1)&127:3|1), (UInt64(164)&127..=UInt64(149)&127:(-73)|1)], Float32(-114.0));
            try { // block id: 1043
                var1045
            } catch (_) { // block id: 1050
                ();
                var1045
            }[0];
            var var1087 : Float32 = Float32(Float32(Float32(Float32(Float32(-10.0)))));
            var var1114 : Float64 = 97.0;
            let var1139 : ?Int32 = Option<Int32>.None;
            let var1361 : Unit = ();
            ((Option<(Rune, (Int64, Float32), Float32, Enum7, Int32, Unit, UInt32, Float64)>.Some(var1063) ?? ('m', (var455, Float32(-66.0)), var1087, var160, Int32(-30), (), namedParam634, 73.0))[0], var1015, match (var1102) {
                case caseVar1106 : UInt16 => 
                    Float32(-42.0) - Float32(63.0)
                
                case _ => 
                    var1114;
                    ();
                    -Float32(-118.0)
                
            }, try { // block id: 1120
                Enum7.defaultValue
            } catch (e: Exception) { // block id: 1122
                var1124;
                if (var524) { var1129 } else { var160 } 
            }, -(var1139 ?? var1142), func1145(), UInt32((Option<UInt8>.Some(UInt8(148)) ?? var1323)), match {
                case try { // block id: 1327
                (namedParam634, (UInt32(187)&127..=UInt32(46)&127:59|1), (Int16(-119)&127..var1334&127:((-13)|1)), Int16(6), [(), (), (), (), (), (), (), (), (), ()]);
                true
            } finally { // block id: 1340
                Option<Int32>.Some(var1142);
                Int16(-117) >= var1334
            } => 
                Int8(-16) >> ((Int8(54)) & 7);
                (-102.0) % Float64((Int32((-88.0))) | 1)
                case match (var467) {
                case caseVar1357 : Array<Bool> => 
                    Option<Array<Unit>>.None;
                    var1361;
                    var1334 >= var1334
                
                case "\"65Fb,`wnp" | "^BEFILv.?+" | """
(%iY;
?szHc
""" | """
(.M2l
Ws'v_
""" => 
                    ();
                    true && false
                
                case _ => 
                    var905
                
            } => 
                Option<UInt8>.Some(UInt8(72));
                (-121.0) / Float64((Int32((-110.0))) | 1)
                case _ => 
                (UInt16(125)&127..UInt16(32)&127:(-90)|1);
                var149
            })
        }
;
        let var1402 : Interface477 = Class472<Option<Array<Unit>>, Array<Int64>>([Int64(UInt64(Int32(-81))), (-49), 64, Int64(Int8(-120)), (-81), Int64(UInt64(122)), (-34), Int64(Int32(Int16(12))), Int64(Int32(-34)), Int64(UInt16(UInt16(30)))], Int32(4));
        var var1455 : Array<Int64> = Array<Int64>(10){ i => (-31) };
        var var1501 : UInt8 = UInt8(177);
        match (func1036(match ('9') {
                case _ => 
                    Class472<Option<Array<Unit>>, Array<Int64>>()
                
                case caseVar1393 => 
                    (var455, Float32(-3.0));
                    ();
                    if (var524) { var1402 } else { var1402 } 
                
                case 'B' | 'F' => 
                    var1437
                
                case caseVar1443 : Range<Int64> => 
                    ();
                    var1124;
                    if (true) { Class472<Option<Array<Unit>>, Array<Int64>>() } else { Class472<Option<Array<Unit>>, Array<Int64>>() } 
                
                case _ => 
                    Class472<Option<Array<Unit>>, Array<Int64>>(var1455, Int32(-76))
                
            }, namedParam1038 : (var1479 ?? var1259))) {
            case (_ : (Array<Unit>, (Bool, Range<UInt64>, Range<Int64>, (Int64, Float32)), UInt16, Range<Int32>, Float64, Range<Int8>, Range<UInt16>),(_,caseVar1484),_,defaultValue,caseVar1485,caseVar1486,_ : Interface476,caseVar1487 : UInt8) => 
                var905 &&= true;
                var1124;
                (UInt32(179)&127..UInt32(94)&127:(-121)|1)
            
            case caseVar1496 => 
                123.0;
                var1501 &= UInt8(74);
                var var1505 : Range<UInt32> = (UInt32(45)&127..UInt32(205)&127:(Int64(UInt8(UInt8(253)))|1));
                var1505
            
            case (caseVar1514 : (Int64, Float32),(caseVar1515 : (Int16, UInt32, Range<UInt16>, Array<Range<UInt64>>, Rune),caseVar1516),_,caseVar1517,_ : Option<Bool>,_ : Option<Array<Unit>>,_ : Range<Int16>,_) => 
                var1501 %= ((UInt8(133)) | 1);
                var287 **= (var287 & 3);
                if (false) { var1528 } else { (UInt32(146)&127..=UInt32(246)&127:(73|1)) } 
            
            case _ => 
                ();
                ();
                (UInt32(145)&127..var676&127:((-85)|1))
            
        };
        var1545[8]
    }
;
    let var1559 : Float64 = Float64(Float32(Float32(Float32(79.0))));
    let var1865 : String = "0(}Px7=w<;";
    let var1907 : ?Bool = (Class472<Option<Array<Unit>>, Array<Int64>>() as Bool);
    let var1914 : ?Array<Unit> = ([(Int8(-79)&127..=Int8(-125)&127:(-22)|1), (Int8(62)&127..=Int8(43)&127:(-114)|1), (Int8(-95)&127..=Int8(-115)&127:61|1), (Int8(-31)&127..=Int8(-21)&127:79|1), (Int8(-19)&127..=Int8(39)&127:20|1), (Int8(-13)&127..=Int8(87)&127:77|1), (Int8(67)&127..Int8(-126)&127:82|1), (Int8(-55)&127..=Int8(-66)&127:(-71)|1), (Int8(-126)&127..=Int8(-100)&127:20|1), (Int8(21)&127..Int8(73)&127:70|1)] as Array<Unit>);
    let var2022 : (Rune, (Int64, Float32), Float32, Enum7, Int32, Unit, UInt32, Float64) = ('t', (Int64(Int32(-41)), Float32(-108.0)), Float32(119.0), Enum7.defaultValue, Int32(UInt32(Int8(Int8(-59)))), (), UInt32(247), 114.0);
    let var2096 : Range<UInt64> = (UInt64(200)&127..UInt64(215)&127:(-77)|1);
    func func1936() : (Unit, Array<Range<UInt64>>, Float32) { // block id: 1937
        let var1965 : ?Int32 = Option<Int32>.None;
        var loopTimeVar1977 : Range<UInt64> = (UInt64(Int8(Int8(-26)))&127..UInt64(UInt32(Int8(89)))&127:(Int64(Int32(Int16(Int8(33))))|1));
        for (i in loopTimeVar1977 where (try { // block id: 1941
            var447;
            if (true) { var1528 } else { (namedParam634&127..UInt32(57)&127:(var1855|1)) } ;
            if (var524) { var1907 } else { var901 } 
        } finally { // block id: 1954
            var1956
        } ?? (Option<Bool>.None ?? true))) {
            (var1965 as UInt8);
            try { // block id: 1968
                Int8(37) * var1288;
                Class472<Option<Array<Unit>>, Array<Int64>>()
            } catch (e: Exception) { // block id: 1973
                Class472<Option<Array<Unit>>, Array<Int64>>([93, (-115), (-102), 82, (-8), 21, 94, 118, (-68), 6], Int32(91))
            }
        };
        var var2039 : (Rune, (Int64, Float32), Float32, Enum7, Int32, Unit, UInt32, Float64) = ('6', ((-98), Float32(Float32(Float32(-23.0)))), Float32(-79.0), Enum7.enumValue2049(UInt8(UInt8(11))), Int32(Int32(-110)), (), UInt32(242), Float64(Float64(Float64(Float32(52.0)))));
        let var2127 : Range<UInt64> = (UInt64(55)&127..UInt64(92)&127:(-64)|1);
        match (Option<(Rune, (Int64, Float32), Float32, Enum7, Int32, Unit, UInt32, Float64)>.Some(match (Option<Array<Unit>>.None) {
                case caseVar1995 => 
                    var447;
                    var1907;
                    let var2000 : (Rune, (Int64, Float32), Float32, Enum7, Int32, Unit, UInt32, Float64) = ('l', (Int64((-45)), Float32(-21.0)), Float32(-43.0), Enum7.defaultValue, Int32(76), (), UInt32(UInt8(UInt8(61))), Float64(61.0));
                    var2000
                
                case _ : (Float64, Unit, Int16, UInt16, Bool) => 
                    if (true) { var2022 } else { var2039 } 
                
                case caseVar2063 : (Unit, Array<Range<UInt64>>, Float32) => 
                    var2039
                
                case _ => 
                    ();
                    var1102 += UInt64(183);
                    var2022
                
            })) {
            case Some(caseVar2075) => 
                (var447, [(UInt64(196)&127..UInt64(1)&127:(73|1)), var2085, (var1102&127..var1102&127:(var455|1)), (UInt64(231)&127..UInt64(1)&127:(-65)|1), var2096, var2085, (UInt64(39)&127..=UInt64(95)&127:45|1), (var1102&127..UInt64(183)&127:((-5)|1)), (UInt64(66)&127..UInt64(31)&127:14|1), var2085], Float32(-52.0))
            
            case _ => 
                ((), [var2096, (UInt64(100)&127..UInt64(120)&127:41|1), var2096, var2085, (UInt64(201)&127..UInt64(20)&127:(-55)|1), var2096, (UInt64(73)&127..UInt64(73)&127:(var1855|1)), (var1102&127..var1102&127:(var455|1)), var2127, (UInt64(126)&127..=var1102&127:((-28)|1))], var1202)
            
        }
    }
;
    let var2144 : Bool = true;
    let var2160 : ?Unit = Option<Unit>.Some(());
    func func1922(namedParam1923 ! : Range<Int8>, optionalParam1924 ! : UInt64 = UInt64(32), optionalParam1926 ! : Option<UInt8> = Option<UInt8>.None, optionalParam1928 ! : Int64 = Int64(Int8(UInt8(UInt8(UInt8(187)))))) : Interface477 { // block id: 1934
        func1936();
        var loopTimeVar2150 : Int64 = 0;
        (while ((try { // block id: 2137
            var447;
            var905
        } finally { // block id: 2140
            true || var2144
        }) && loopTimeVar2150 < 100 ) {
            loopTimeVar2150++;
            var1288++
        } as Option<Unit>);
        (((if (true) { var2160 } else { Option<Unit>.None } ) as Interface477) ?? if (match (Option<UInt8>.None) {
            case _ : Range<Int8> => 
                Int32(22) == Int32(87)
            
            case _ => 
                if (var2144) { Option<Unit>.Some(var447) } else { Option<Unit>.None } ;
                var447;
                false
            
        }) { Class472<Option<Array<Unit>>, Array<Int64>>() } else { var1437 } )
    }
;
    let var2191 : Bool = (() is (Int64, Float32));
    let var2207 : UInt8 = UInt8(63);
    let var2270 : Int64 = Int64(Int8(99));
    let var2277 : Int64 = Int64(Int8(49));
    func func687() : Interface477 { // block id: 688
        var loopTimeVar727 : Range<UInt64> = (UInt64(UInt8(109))&127..UInt64(238)&127:(Int64(UInt64(49))|1));
        for (i in loopTimeVar727 where (try { // block id: 692
            var694;
            let var711 : Interface479 = Class472<Option<Array<Unit>>, Array<Int64>>();
            var711;
            let var716 : ?Bool = Option<Bool>.Some((Class472<Option<Array<Unit>>, Array<Int64>>() is Option<Float32>));
            if (var524) { var716 } else { Option<Bool>.None } 
        } catch (e: Exception) { // block id: 721
            Option<Bool>.Some(true)
        } ?? ('Q' is Interface475<Int64>))) {

        };
        var var747 : Int64 = 62;
        let var752 : Array<Unit> = Array<Unit>(10){ i => () };
        if (((if (true) { var78 } else { var78 } ) is Interface476)) { // block id: 740
            if (false) { // block id: 743
                ();
                var747 ^= (-11)
            };
            var752[6];
            var loopTimeVar770 : Int64 = 0;
            while ((var524) && loopTimeVar770 < 100 ) {
                loopTimeVar770++;
                var447
            }
        } else if (func772(func1027(), namedParam774 : ('s', var1015, Float32(-8.0), var1553, Int32(-83), (), var676, var1559))) { // block id: 1564
            [(), (), (), (), (), (), (), (), (), ()][3];
            var676 -= var676
        };
        let var1672 : Interface479 = Class472<Option<Array<Unit>>, Array<Int64>>([(-28), (-66), 38, 99, 0, 11, (-58), 72, (-32), (-51)], Int32(Int8(89)));
        let var1701 : (Rune, (Int64, Float32), Float32, Enum7, Int32, Unit, UInt32, Float64) = ('B', (Int64(Int32(UInt16(134))), Float32(49.0)), Float32(73.0), Enum7.defaultValue, Int32(-60), (), UInt32(Int8(UInt8(97))), Float64(Float32(Float32(Float32(40.0)))));
        let var1826 : Array<Int64> = Array<Int64>(10){ i => 73 };
        let var1890 : UInt32 = UInt32(17);
        let var1900 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
        func func1584(param1585 : Option<Array<Unit>>) : Option<Bool> { // block id: 1586
            let var1604 : (Range<Int64>, UInt8, UInt8, (Unit, Range<Int8>, Unit)) = ((55&127..=41&127:(-24)|1), UInt8(243), UInt8(49), ((), (Int8(24)&127..Int8(-27)&127:18|1), ()));
            if (if (var524) { // block id: 1592
                var905 &&= var905;
                false || false
            } else { // block id: 1599
                var524
            }) { var1604[3] } else { if (var1616) { // block id: 1618
                var1334;
                var1015;
                (var447, var1624, var447)
            } else if (false) { // block id: 1633
                var467;
                let var1636 : (Unit, Range<Int8>, Unit) = ((), (Int8(-120)&127..=Int8(UInt8(216))&127:(17|1)), ());
                var1636
            } else { // block id: 1645
                ();
                false && var1616;
                let var1651 : (Unit, Range<Int8>, Unit) = ((), (Int8(85)&127..=Int8(-106)&127:68|1), ());
                var1651
            } } [2];
            let var1722 : Rune = 'V';
            let var1789 : Array<Bool> = [false, ((Class472<Option<Array<Unit>>, Array<Int64>>(), (Int32(-11)&127..Int32(-12)&127:((-83)|1)), ((-110)&127..=(-93)&127:65|1), Int32(7)) is (Unit, Range<Int8>, Unit)), false, (Float32(-67.0) is Int8), false, (((), (Int8(-97)&127..Int8(-58)&127:(118|1)), ()) is Range<Int16>), (((), [(UInt64(108)&127..UInt64(89)&127:(-52)|1), (UInt64(113)&127..=UInt64(172)&127:124|1), (UInt64(112)&127..=UInt64(214)&127:22|1), (UInt64(194)&127..UInt64(75)&127:80|1), (UInt64(154)&127..UInt64(159)&127:(-67)|1), (UInt64(254)&127..UInt64(134)&127:(-116)|1), (UInt64(33)&127..UInt64(195)&127:(-128)|1), (UInt64(51)&127..=UInt64(5)&127:44|1), (UInt64(234)&127..UInt64(198)&127:(-15)|1), (UInt64(213)&127..=UInt64(146)&127:31|1)], Float32(15.0)) is Array<Bool>), true, (Int8(Int8(UInt8(99))) is Array<Range<UInt64>>), false];
            func func1659(optionalParam1660 ! : Range<Int16> = (Int16(77)&127..Int16(UInt8(88))&127:(116|1))) : Array<Int64> { // block id: 1666
                if (!true) { // block id: 1670
                    var1672;
                    var var1684 : Int64 = (-42);
                    if (true) { // block id: 1679
                        (Int16(12)&127..Int16(-116)&127:(var1684|1));
                        ();
                        var447
                    };
                    var loopTimeVar1692 : Int64 = 0;
                    while ((false) && loopTimeVar1692 < 100 ) {
                        loopTimeVar1692++;

                    }
                } else if (func772(if (true) { var1624 } else { var1624 } , namedParam774 : if (var905) { var1701 } else { (var1722, var1015, var1202, var160, var1142, var447, namedParam634, (-20.0)) } )) { // block id: 1731
                    (Option<Option<Array<Unit>>>.Some(param1585) ?? param1585);
                    var loopTimeVar1745 : Int64 = 0;
                    while ((false) && loopTimeVar1745 < 100 ) {
                        loopTimeVar1745++;
                        Option<Int32>.None
                    }
                };
                (((Int32(1) & var1142) as Array<Int64>) ?? try { // block id: 1756
                    if (false) { var1701 } else { ('F', var1015, Float32(97.0), var160, Int32(-126), var447, namedParam634, var1769) } ;
                    var1769 %= Float64((Int32((-54.0))) | 1);
                    [(-67), var455, var455, var455, var455, (-36), 0, (-57), var455, var455]
                } catch (e: Exception) { // block id: 1785
                    if (true) { var1789 } else { var1789 } ;
                    var1826
                } finally { // block id: 1843
                    var var1848 : Int64 = 102;
                    [var455, 11, var1848, var455, var1848, var455, (-124), var1855, var1855, (-47)]
                })
            }
;
            var var1874 : Int16 = Int16(Int16(-18));
            match (func1659()) {
                case _ => 
                    var1865;
                    var447;
                    var901
                
                case _ => 
                    var1874--;
                    if (var905) { var901 } else { Option<Bool>.Some(var905) } 
                
                case caseVar1884 => 
                    var447;
                    var676 <<= ((var1890) & 7);
                    var901
                
                case caseVar1895 => 
                    if (var905) { var1900 } else { [(), (), (), (), (), (), (), (), (), ()] } ;
                    if (false) { var901 } else { var1907 } 
                
                case _ => 
                    var901
                
            }
        }
;
        var var2225 : (Bool, Range<UInt64>, Range<Int64>, (Int64, Float32)) = (([(), (), (), (), (), (), (), (), (), ()] is Range<Int8>), (UInt64(UInt8(Int8(31)))&127..=UInt64(Int32(-117))&127:(Int64(Int32(-104))|1)), (61&127..Int64(UInt8(UInt8(2)))&127:(Int64(81)|1)), ((-110), Float32(Float32(-121.0))));
        var var2258 : Int32 = Int32(-90);
        if ((func1584(var1914) ?? (Option<Bool>.Some(true) ?? false))) { func1922(namedParam1923 : (Int8(37)&127..Int8(4)&127:((-98)|1)), optionalParam1924 : UInt64(211), optionalParam1926 : if (var2191) { Option<UInt8>.None } else { var2196 } , optionalParam1928 : ((var2207&127..=var2207&127:(33|1))|>func2200<Option<Unit>, UInt16>)) } else { (if (match {
            case var2191 => 
            var1769 * (-53.0);
            var287--;
            var2144
            case _ => 
            ([(), (), (), (), (), (), (), (), (), ()], var2225, UInt16(18), (Int32(18)&127..=Int32(-83)&127:0|1), 88.0, var1624, (UInt16(199)&127..=var287&127:(var747|1)));
            var2258 < Int32(-118)
        }) { [Class472<Option<Array<Unit>>, Array<Int64>>([(-117), var1855, var1855, var2270, var1855, var1855, 93, var2277, (-109), var1855], Int32(-14)), var1437, Class472<Option<Array<Unit>>, Array<Int64>>(), Class472<Option<Array<Unit>>, Array<Int64>>(var1826, var2258), var1437, Class472<Option<Array<Unit>>, Array<Int64>>([57, 72, (-11), 92, 43, 18, (-75), 16, (-24), (-89)], var2258), Class472<Option<Array<Unit>>, Array<Int64>>(var1826, var2258), Class472<Option<Array<Unit>>, Array<Int64>>(), Class472<Option<Array<Unit>>, Array<Int64>>(var1826, Int32(69)), var1437][1] } else { Class472<Option<Array<Unit>>, Array<Int64>>([44, 11, (-25), 44, 64, (-103), (-91), (-9), (-19), (-33)], Int32(-21)) } ) } 
    }
;
    func func683(namedParam684 ! : Unit) : Interface477 { // block id: 685
        func687()
    }
;
    try { // block id: 638
        var var669 : UInt32 = UInt32(Int16(Int16(Int16(Int16(7)))));
        match (UInt64(238)) {
            case _ : Int32 => 
                var var646 : Int64 = (-97);
                var646++
            
            case _ => 
                Option<Array<Unit>>.Some([(), (), (), (), (), (), (), (), (), ()]);
                var654;
                var447
            
            case 200 | 245 | 14 | 71 => 
                var447;
                (Int16(125)&127..=Int16(-83)&127:(-122)|1);
                ()
            
            case 49 | 123 | 234 => 
                Int8(28);
                var669 ^= var676
            
            case _ => 
                var447
            
        };
        func683(namedParam684 : ())
    } catch (e: Exception) { // block id: 2305
        if (true) { Class472<Option<Array<Unit>>, Array<Int64>>() } else { var1437 } 
    } finally { // block id: 2310
        (Option<Interface477>.Some(Class472<Option<Array<Unit>>, Array<Int64>>(var2319, Int32(107))) ?? Class472<Option<Array<Unit>>, Array<Int64>>(var2319, var1142))
    }
}


public func func628(param629 : UInt16) : Option<Array<Unit>> { // block id: 630
    let var2367 : Int64 = (-114);
    func436(namedParam633 : try { // block id: 2326
        ();
        let var2331 : Interface478 = Class472<Option<Array<Unit>>, Array<Int64>>();
        if (false) { var2331 } else { var2331 } 
    } finally { // block id: 2334
        [(Int8(12)&127..Int8(5)&127:(-55)|1), (Int8(50)&127..=Int8(-116)&127:(-116)|1), (var1288&127..var1288&127:(var1855|1)), var1624, (Int8(-125)&127..Int8(7)&127:65|1), var1624, (var1288&127..Int8(82)&127:(123|1)), (var1288&127..Int8(9)&127:(113|1)), (Int8(4)&127..=Int8(-19)&127:(-105)|1), (var1288&127..=var1288&127:(var1855|1))];
        if (true) { var2361 } else { Class472<Option<Array<Unit>>, Array<Int64>>([var1855, var2367, (-15), var1855, var1855, var2367, (-112), 119, 48, (-76)], Int32(93)) } 
    }, namedParam634 : try { // block id: 2379
        UInt64(43);
        ();
        UInt32(144)
    } catch (_) { // block id: 2383
        var676
    }, namedParam635 : (Int16(27)&127..Int16(-23)&127:(-21)|1));
    let var2423 : ?Interface477 = (((-72), Float32(88.0)) as Interface477);
    (if (match (var2390) {
        case _ => 
            var var2395 : ??Array<Unit> = Option<Option<Array<Unit>>>.None;
            var2395;
            't';
            Int32(-37) > Int32(81)
        
    }) { (if (var905) { Option<Option<Array<Unit>>>.Some(Option<Array<Unit>>.None) } else { var2406 } ) } else { (var2414 ?? var2406) }  ?? ((if (true) { Option<Interface477>.None } else { var2423 } ) as Array<Unit>))
}


public func func539(param540 : Range<Int32>) : Range<Int8> { // block id: 541
    let var563 : (UInt32, Range<UInt32>, Range<Int16>, Int16, Array<Unit>) = (UInt32(25), (UInt32(Int16(UInt16(104)))&127..UInt32(252)&127:(11|1)), (Int16(-59)&127..Int16(-92)&127:(Int64(Int8(41))|1)), Int16(-95), [(), (), (), (), (), (), (), (), (), ()]);
    var var582 : Interface478 = Class472<Option<Array<Unit>>, Array<Int64>>();
    let var590 : Int16 = Int16(Int8(Int8(-39)));
    let var2460 : Range<Int16> = (Int16(111)&127..=Int16(UInt8(Int8(-121)))&127:(Int64(UInt8(UInt8(Int8(98))))|1));
    if (([111, var455, var455, (-31), 29, (-12), (-60), var455, (-3), 89][7] is (Int64, Float32))) { // block id: 558

    } else if (var563[3] > match (var582) {
        case caseVar586 => 
            ();
            var590
        
        case _ => 
            var455;
            Int16(-64) << ((Int16(11)) & 7)
        
    }) { // block id: 600
        let var2429 : (UInt16) -> Option<Array<Unit>> = func628;
        func func602(namedParam603 ! : Interface478, optionalParam604 ! : Range<Int8> = (Int8(54)&127..=Int8(-8)&127:(-37)|1), optionalParam606 ! : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()], namedParam618 ! : Range<UInt32>) : Float64 { // block id: 619
            let var2433 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
            ((var287|>var2429) ?? var2433)[2];
            (Option<Range<Int16>>.None ?? if (false) { try { // block id: 2445
                var var2456 : Int64 = (-42);
                if (var905) { (Int16(20)&127..=Int16(-34)&127:(var1855|1)) } else { (Int16(-40)&127..=var590&127:(var2456|1)) } 
            } catch (e: Exception) { // block id: 2458
                var2460
            } finally { // block id: 2470
                if (var1616) { (Int16(68)&127..var1334&127:(var455|1)) } else { (Int16(69)&127..=Int16(-90)&127:(-64)|1) } 
            } } else { (Int16(87)&127..=Int16(19)&127:85|1) } );
            let var2481 : ?Interface477 = ([(), (), (), (), (), (), (), (), (), ()] as Interface477);
            match (var2481) {
                case caseVar2486 : Array<Unit> => 
                    var149 / Float64((Int32(var1769)) | 1)
                
                case _ => 
                    34.0
                
                case caseVar2497 => 
                    var1769 / Float64((Int32(var1769)) | 1)
                
                case _ : Array<Unit> => 
                    var1769 -= var1769;
                    var149
                
                case _ => 
                    42.0 * (-78.0)
                
            }
        }
;
        func602(namedParam603 : Class472<Option<Array<Unit>>, Array<Int64>>(), namedParam618 : (UInt32(165)&127..UInt32(160)&127:(-57)|1));
        if (false) { // block id: 2518
            var447
        } else if (false) { // block id: 2521
            ();
            var1855 /= ((var455) | 1)
        }
    };
    var var2532 : Int64 = (-109);
    var var2566 : ?Unit = (((Int64((-28))&127..Int64(UInt64(143))&127:((-30)|1)), UInt8(220), UInt8(Int8(124)), ((), (Int8(13)&127..Int8(-116)&127:(124|1)), ())) as Unit);
    try { // block id: 2527
        (var1288&127..var1288&127:(var2532|1))
    } catch (_) { // block id: 2534
        if (var1616) { // block id: 2537
            var2539;
            ()
        };
        (Int8(-112)&127..Int8(25)&127:37|1)
    } finally { // block id: 2563
        var var2586 : Unit = ();
        (var2566 ?? var2586);
        if (var2590) { (Int8(-29)&127..Int8(97)&127:((-29)|1)) } else { (Int8(85)&127..=Int8(50)&127:(var2532|1)) } 
    }
}

public func func490(param491 : UInt16) : Bool { // block id: 492
    var var505 : Int16 = Int16(-123);
    var var509 : Bool = true;
    (match ((var149, (), var505, param491, var509)) {
        case _ => 
            Option<Unit>.Some(());
            var447;
            let var518 : ?Bool = Option<Bool>.Some(((-75.0) is UInt8));
            [var518, Option<Bool>.Some(var524), Option<Bool>.None, Option<Bool>.None, Option<Bool>.Some(false), Option<Bool>.None, Option<Bool>.None, var518, var518, Option<Bool>.None]
        
    }[3] ?? (((var1142&127..Int32(2)&127:(var455|1))|>func539) is UInt16))
}


public func func485(param486 : Rune) : Range<Int8> { // block id: 487
    let var2627 : Range<UInt32> = (UInt32(109)&127..UInt32(180)&127:110|1);
    if (((Option<UInt16>.Some(UInt16(144)) ?? UInt16(59))|>func490)) { try { // block id: 2615
        var1624
    } finally { // block id: 2617
        ();
        if (var2590) { var1624 } else { (Int8(99)&127..=Int8(-53)&127:(-93)|1) } 
    } } else { (if (false) { match (var2627) {
        case _ => 
            var905 ||= false;
            (Int8(23)&127..Int8(45)&127:(-28)|1)
        
    } } else { (Int8(3)&127..=Int8(-95)&127:73|1) } ) } 
}


public func func436(param437 : Range<Int16>) : (Array<Unit>, (Bool, Range<UInt64>, Range<Int64>, (Int64, Float32)), UInt16, Range<Int32>, Float64, Range<Int8>, Range<UInt16>) { // block id: 438
    UInt8(21);
    func func442() : Option<Unit> { // block id: 443
        var var460 : Float64 = 107.0;
        var var2637 : (Rune) -> Range<Int8> = func485;
        try (resource = Class472<Option<Array<Unit>>, Array<Int64>>()) { // block id: 445
            var447;
            Int32(-36) & Int32(-43);
            try (resource = Class472<Option<Array<Unit>>, Array<Int64>>()) { // block id: 453
                var455;
                var460 -= (-58.0)
            } finally { // block id: 463
                var447;
                var467 = ###"?,BmFQ}Ea{#"###
            }
        } finally { // block id: 470
            Class472<Option<Array<Unit>>, Array<Int64>>.var482;
            'i'|>var2637;
            var var2653 : UInt16 = UInt16(7);
            try (resource = Class472<Option<Array<Unit>>, Array<Int64>>()) { // block id: 2641
                var1334;
                var447
            } finally { // block id: 2644
                var var2647 : Float32 = Float32(-103.0);
                var2647 -= var2647;
                ();
                var2653 *= var2653
            }
        };
        var var2671 : ?Unit = Option<Unit>.None;
        ((Option<Option<Option<Unit>>>.None ?? (var447 as Option<Unit>)) ?? (if (var524) { var1479 } else { var1479 }  ?? var2671))
    }
;
    (func442() ?? try { // block id: 2674

    } finally { // block id: 2675

    });
    let var2735 : UInt8 = UInt8(159);
    let var2760 : (Int64, Float32) = ((-12), Float32(-86.0));
    let var2766 : Range<Int32> = (Int32(-8)&127..=Int32(84)&127:(-29)|1);
    var var2771 : Int8 = Int8(95);
    let var2778 : (Array<Unit>, (Bool, Range<UInt64>, Range<Int64>, (Int64, Float32)), UInt16, Range<Int32>, Float64, Range<Int8>, Range<UInt16>) = ([(), (), (), (), (), (), (), (), (), ()], (false, (UInt64(152)&127..UInt64(99)&127:61|1), ((-71)&127..=(-47)&127:68|1), ((-23), Float32(112.0))), UInt16(UInt16(Int8(39))), (Int32(30)&127..Int32(-1)&127:0|1), (-11.0), (Int8(-26)&127..Int8(Int8(UInt8(114)))&127:(Int64(Int16(-126))|1)), (UInt16(UInt16(Int16(-89)))&127..UInt16(Int8(-50))&127:(Int64((-122))|1)));
    var var2810 : UInt16 = UInt16(UInt16(UInt8(117)));
    try { // block id: 2677
        let var2720 : Array<Range<UInt64>> = [(UInt64(63)&127..=UInt64(141)&127:(-67)|1), (UInt64(202)&127..UInt64(157)&127:4|1), (UInt64(155)&127..UInt64(139)&127:(-2)|1), (UInt64(234)&127..=UInt64(139)&127:(-93)|1), (UInt64(80)&127..=UInt64(128)&127:85|1), (UInt64(215)&127..UInt64(146)&127:43|1), (UInt64(245)&127..UInt64(69)&127:49|1), (UInt64(56)&127..UInt64(157)&127:59|1), (UInt64(32)&127..UInt64(137)&127:28|1), (UInt64(244)&127..=UInt64(254)&127:98|1)];
        let var2723 : Rune = 'W';
        try { // block id: 2679
            var447;
            var1288 **= (var1288 & 3);
            var2685
        } finally { // block id: 2704
            var var2707 : Bool = true;
            if (var2707) { (var2711, UInt32(38), (var287&127..=var287&127:((-96)|1)), var2720, var2723) } else { var2685 } 
        };
        var2728.getOrThrow();
        try { // block id: 2731
            var447;
            var2735 ** (UInt8(10) & 3);
            ([(), var447, var447, (), (), var447, (), var447, (), var447], (var2590, (var2390&127..var2390&127:(var455|1)), var2757, var2760), UInt16(105), var2766, var149, (var2771&127..Int8(-37)&127:((-17)|1)), (UInt16(202)&127..UInt16(40)&127:81|1))
        } catch (e: Exception) { // block id: 2776
            var2778
        }
    } finally { // block id: 2808
        var2810;
        let var2877 : Range<UInt16> = (UInt16(195)&127..=UInt16(128)&127:29|1);
        var var2885 : ?Int32 = Option<Int32>.None;
        let var2889 : Int32 = Int32(87);
        match ('T') {
            case 'T' => 
                ();
                var var2825 : Array<Int64> = Array<Int64>(10){ i => Int64(Int32(17)) };
                if (true) { var2361 } else { Class472<Option<Array<Unit>>, Array<Int64>>(var2825, var1142) } ;
                ([(), (), var2854, (), var2854, var447, var2854, var447, var447, ()], (false, (UInt64(173)&127..UInt64(165)&127:121|1), var2757, var2760), var287, var2766, var2871, var1624, var2877)
            
            case 'k' => 
                if (var2590) { var2885 } else { Option<Int32>.Some(var2889) } ;
                if (var1616) { Option<(Rune, (Int64, Float32), Float32, Enum7, Int32, Unit, UInt32, Float64)>.Some(('E', var2760, Float32(101.0), Enum7.defaultValue, Int32(-6), (), var676, (-14.0))) } else { Option<(Rune, (Int64, Float32), Float32, Enum7, Int32, Unit, UInt32, Float64)>.Some(('W', var2760, Float32(-116.0), var160, Int32(35), var2854, var676, 103.0)) } ;
                var2778
            
            case caseVar2916 : Range<Int32> => 
                var2778
            
            case _ => 
                if (true) { var2778 } else { var2778 } 
            
        }
    }
}


public func func355(param356 : Enum347) : Option<Enum347> { // block id: 357
    let var2979 : Range<Int16> = (Int16(-10)&127..Int16(-6)&127:(-28)|1);
    var118.func430(var2979)|>{ lambdaParameter424 : Rune => Option<Enum347>.None }
}

public func func296(param297 : (Float64, Unit, Int16, UInt16, Bool)) : Option<UInt32> { // block id: 298
    var23 /= ((Class66.var304) | 1);
    var var318 : Array<Bool> = [true, true, ((126&127..25&127:(-32)|1) is Option<Unit>), false, false, ("*\"[HGcB7iz" is String), (UInt8(233) is Int64), (Int32(Int16(UInt16(96))) is Float64), (Int8(37) is Option<Enum7>), true];
    var loopTimeVar345 : Int64 = 0;
    while ((var318[5]) && loopTimeVar345 < 100 ) {
        loopTimeVar345++;
        let var341 : ?Unit = Option<Unit>.None;
        (var341 ?? ())
    };
    var var2982 : (Enum347) -> Option<Enum347> = func355;
    let var2993 : Array<Range<UInt64>> = [(UInt64(24)&127..UInt64(Int8(UInt8(114)))&127:(110|1)), (UInt64(UInt32(145))&127..UInt64(Int16(-36))&127:(100|1)), (UInt64(Int16(UInt8(68)))&127..=UInt64(23)&127:(78|1)), (UInt64(UInt64(UInt32(96)))&127..=UInt64(Int32(UInt8(52)))&127:((-34)|1)), (UInt64(28)&127..UInt64(UInt8(173))&127:(Int64(Int8(Int8(42)))|1)), (UInt64(73)&127..UInt64(161)&127:123|1), (UInt64(222)&127..=UInt64(176)&127:34|1), (UInt64(213)&127..=UInt64(76)&127:11|1), (UInt64(215)&127..UInt64(206)&127:(-17)|1), (UInt64(131)&127..UInt64(32)&127:113|1)];
    let var3060 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    match (((var2955|>var2982) ?? try { // block id: 2986
            var2685;
            (var2990, var2993, Float32(-53.0));
            var2955
        } finally { // block id: 3035
            ();
            if (true) { Enum347.defaultValue } else { Enum347.enumValue3041(Int8(-37), Class472<Option<Array<Unit>>, Array<Int64>>(), var447, (var676, var3052, (Int16(104)&127..=Int16(79)&127:(var455|1)), Int16(-73), var3060)) } 
        })) {
        case enumValue3041(caseVar3064, _, _, _ : Option<Int32>) => 
            var3067
        
        case enumValue3041(caseVar3071, caseVar3072 : Option<Int32>, _ : Option<Interface477>, _) => 
            Option<Option<Enum347>>.None;
            if (false) { var3067 } else { Option<UInt32>.None } 
        
        case _ => 
            var412;
            var1102 &= UInt64(199);
            Option<UInt32>.Some(var23)
        
    }
}

func func211(param212 : UInt8) : UInt32 { // block id: 213
    let var226 : Bool = (((106, Float32(Float32(-116.0))) as Unit) is Option<Enum7>);
    let var251 : Float32 = Float32(-40.0);
    var var279 : String = """
1u?8S
7S,KH
""";
    try { // block id: 215
        Class66.var219
    } catch (e: Exception) { // block id: 223
        var loopTimeVar237 : Int64 = 0;
        while ((var226) && loopTimeVar237 < 100 ) {
            loopTimeVar237++;
            Enum7.defaultValue;
            Int8(95)
        };
        var var266 : Float64 = Float64(51.0);
        if (false) { // block id: 240
            var23 <<= ((var23) & 7);
            if (var226) { (var248, var251) } else { var109 } 
        } else if (false) { // block id: 255
            ();
            if (var226) { ((-102), var251) } else { var109 } 
        } else { // block id: 263
            var266 *= var149;
            if (true) { ((-9), Float32(-39.0)) } else { var109 } 
        }
    } finally { // block id: 276
        var var282 : String = """
uvogT
sby6<
""";
        var279 = var282;
        var109
    };
    var287++;
    let var3088 : ((Float64, Unit, Int16, UInt16, Bool)) -> Option<UInt32> = func296;
    ((var78|>var3088) ?? var23)
}




public func func35(namedParam36 ! : Unit, optionalParam37 ! : String = """
LSym0
j#r?\"
""") : Option<Unit> { // block id: 39
    let var55 : Float32 = Float32(Float32(Float32(Float32(Float32(-76.0)))));
    let var101 : Int64 = Int64(Int16(35));
    func func41(optionalParam42 ! : Int8 = Int8(75), namedParam44 ! : Enum7) : Float32 { // block id: 45
        match (var48) {
            case _ : Bool => 
                Int8(84);
                var55
            
            case _ => 
                "(;@z|mWMo1";
                Float32(53.0)
            
        };
        Class66.var71;
        var var91 : Class66 = Class66();
        try { // block id: 74
            var78[1];
            var55
        } catch (_) { // block id: 88
            var91.var94;
            namedParam36;
            (var101, var55)[1]
        } finally { // block id: 106
            var109[1]
        }
    }
;
    func41(optionalParam42 : var118.func121(Option<Unit>.None), namedParam44 : try { // block id: 133
        if (false) { ('r', (var101, Float32(101.0)), Float32(97.0), Enum7.defaultValue, var144, namedParam36, UInt32(157), var149) } else { ('w', ((-88), Float32(-20.0)), Float32(-94.0), var160, Int32(70), namedParam36, UInt32(247), 102.0) } 
    } finally { // block id: 166
        ();
        var var169 : (Rune, (Int64, Float32), Float32, Enum7, Int32, Unit, UInt32, Float64) = ('3', (Int64(UInt8(129)), Float32(-54.0)), Float32(21.0), Enum7.defaultValue, Int32(Int32(-122)), (), UInt32(Int32(Int16(-63))), Float64(Float64(Float64(Float32(-42.0)))));
        var169
    }[3]);
    let var3093 : (UInt8) -> UInt32 = func211;
    let var3127 : ?(Rune, (Int64, Float32), Float32, Enum7, Int32, Unit, UInt32, Float64) = (((-34.0) as Option<Unit>) as (Rune, (Int64, Float32), Float32, Enum7, Int32, Unit, UInt32, Float64));
    let var3189 : Option<Range<Int8>> = ((UInt32(129), (UInt32(191)&127..=UInt32(UInt32(2))&127:(0|1)), (Int16(81)&127..Int16(-92)&127:(Int64(UInt16(109))|1)), Int16(6), [(), (), (), (), (), (), (), (), (), ()]) as Range<Int8>);
    let var3216 : Range<UInt32> = (UInt32(197)&127..=UInt32(100)&127:7|1);
    func func190(param191 : Unit, param192 : Float32, optionalParam193 ! : UInt64 = UInt64(94), optionalParam195 ! : Int32 = Int32(UInt8(191))) : Option<Unit> { // block id: 198
        try { // block id: 200
            param191;
            (Option<Float32>.None ?? Float32(-101.0))
        } catch (e: Exception) { // block id: 209
            UInt8(46)|>var3093;
            if (false) { // block id: 3098
                Float32(-61.0) ** Float32(Int32(var55) & 3)
            } else { // block id: 3102
                (var447, (Int8(96)&127..Int8(-42)&127:89|1), ());
                namedParam36;
                Float32(-43.0)
            }
        };
        let var3232 : ??Range<UInt32> = (Class66() as Option<Range<UInt32>>);
        if (try { // block id: 3111
            ();
            false
        } finally { // block id: 3114
            false
        }) { match (((-29), var3120)) {
            case _ => 
                var3127;
                var var3135 : Int64 = (-68);
                (UInt32(228)&127..=UInt32(77)&127:(var3135|1))
            
            case caseVar3139 => 
                var2990;
                var3143;
                var3052
            
            case caseVar3185 => 
                param191;
                var3189;
                var3216
            
            case _ => 
                var3052
            
        } } else { ((var3232 ?? Option<Range<UInt32>>.Some(var3216)) ?? var3216) } ;
        try { // block id: 3239
            var loopTimeVar3243 : Range<UInt64> = (UInt64(195)&127..UInt64(149)&127:(Int64(UInt16(31))|1));
            for (i in loopTimeVar3243 where var2590) {

            };
            (Option<Option<Unit>>.Some(Option<Unit>.Some(())) ?? var2728)
        } catch (e: Exception) { // block id: 3258
            if (true) { (Int16(93)&127..Int16(-76)&127:(-57)|1) } else { var3263 } ;
            if (var408) { // block id: 3271
                ();
                var287 >>= ((UInt16(64)) & 7);
                var905 = var524
            } else if (false) { // block id: 3280
                Option<Option<Option<Array<Unit>>>>.None;
                var1288 ^= var1288
            };
            try { // block id: 3286
                ();
                Option<Unit>.Some(var447)
            } finally { // block id: 3290
                param191;
                var2728
            }
        } finally { // block id: 3293
            (Option<Option<Unit>>.Some(var2728) ?? Option<Unit>.Some(var447))
        }
    }
;
    let var3347 : Bool = true;
    func190((var3301 >>= ((UInt8(183)) & 7)), (var3310 ?? if (var3347) { // block id: 3349
        Option<Enum7>.None;
        (var2711, var23, (UInt16(181)&127..var287&127:(var248|1)), var3359, 'u');
        Float32(65.0)
    } else { // block id: 3409
        var3411
    }), optionalParam195 : Int32(match (Option<UInt8>.Some(var3301)) {
        case _ => 
            var144;
            var144
        
    }))
}

main(): Int64 {
    try {
        match ((var15 ?? Enum7.defaultValue)) {
            case _ => 
                var23 += var23;
                Int8(76)
            
        };
        let var3428 : Bool = true;
        var loopTimeVar3433 : Int64 = 0;
        (func35(namedParam36 : ()) ?? do {
            loopTimeVar3433++;
            ();
            if (var3428) { Option<Int32>.None } else { Option<Int32>.None } 
        } while ((false) && loopTimeVar3433 < 100 ) );
        try { // block id: 3435
            6
        } finally { // block id: 3437
            var var3439 : (Unit, Range<Int8>, Unit) = ((), (Int8(-29)&127..=Int8(45)&127:35|1), ());
            var3439;
            (-67)
        }
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var23*var23), 64)
        crccheck.updateBuffer(UInt64(var144*var144), 64)
        crccheck.updateBuffer(UInt64(var248*var248), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Class66 {
    func func430(param431 : Range<Int16>) : Rune { // block id: 432
        var var2926 : (Range<Int16>) -> (Array<Unit>, (Bool, Range<UInt64>, Range<Int64>, (Int64, Float32)), UInt16, Range<Int32>, Float64, Range<Int8>, Range<UInt16>) = func436;
        (param431|>var2926)[4];
        try { // block id: 2931
            var loopTimeVar2940 : Int64 = 0;
            while ((false) && loopTimeVar2940 < 100 ) {
                loopTimeVar2940++;
                ();
                var94 ^= UInt8(230)
            };
            (Option<Option<UInt32>>.None ?? Option<UInt32>.None);
            try { // block id: 2949
                Enum347.defaultValue
            } finally { // block id: 2951
                var447;
                ();
                var2955
            }
        } catch (e: Exception) { // block id: 2957
            if (var905) { Enum347.defaultValue } else { Enum347.defaultValue } 
        } finally { // block id: 2962
            var var2970 : ?Enum347 = Option<Enum347>.None;
            try { // block id: 2964
                Enum347.defaultValue
            } catch (_) { // block id: 2966
                if (true) { var2970 } else { var2970 } ;
                var94 <<= ((UInt8(38)) & 7);
                var2955
            }
        };
        var48
    }

}

extend<T0, T1> Class472<T0, T1> {

}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_unexpected_declaration_in_scope
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_expected_character
// ASSERT: scan parse_expected_expr_or_decl_in


