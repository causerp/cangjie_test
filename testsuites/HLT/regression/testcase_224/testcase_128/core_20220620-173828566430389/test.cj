/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output


let var25 : (Bool, Unit, Int16) = ((Int8(7) is UInt8), (), Int16(-102))
public let var40 : Rune = 'E'
var var43 : Int64 = Int64(Int8(63))
let var50 : (Int64, UInt8, Float32, Int64, Option<Bool>, Float64, UInt8) = (57, UInt8(UInt8(192)), Float32(118.0), (-33), (() as Bool), Float64(Float32(-74.0)), UInt8(186))
var var125 : UInt32 = UInt32(102)
let var134 : Bool = (Int16(Int8(1)) is Int16)
public var var140 : Bool = true
let var144 : Int16 = Int16(-115)
var var267 : Bool = true
public let var270 : ?Float64 = Option<Float64>.None
public let var289 : ?Bool = ((UInt32(Int32(55)), (false, (), Int16(UInt8(119))), (Float32(-77.0) as Bool), UInt64(86), '2', (-13)) as Bool)
public let var305 : Float64 = Float64((-54.0))
var var336 : Array<Bool> = [true, false, true, false, false, true, true, true, true, false]
public var var546 : Array<Option<Bool>> = [(Enum274.defaultValue as Bool), ((61&127..(-28)&127:(-52)|1) as Bool), (Class6() as Bool), Option<Bool>.None, ((Class6() as Unit) as Bool), Option<Bool>.None, (UInt8(Int8(UInt8(50))) as Bool), (Int64(Int8(-53)) as Bool), Option<Bool>.None, Option<Bool>.None]
let var716 : Float32 = Float32(Float32(85.0))
public let var796 : Unit = ()
var var851 : Int16 = Int16(76)
var var856 : Array<Unit> = Array<Unit>(10){ i => () }
var var949 : Class6 = Class6()
public var var1194 : Int32 = Int32(-56)
var var1215 : ?Bool = Option<Bool>.None
let var1387 : Int32 = Int32(52)
let var1408 : Range<Int64> = (100&127..(-36)&127:(-81)|1)
public let var1572 : Range<Int16> = (Int16(61)&127..=Int16(22)&127:35|1)
var var1763 : ?Unit = ("b3z:hl+ko:" as Unit)
let var1783 : Array<Float64> = Array<Float64>(10){ i => 30.0 }
public var var1827 : (Int64, UInt8, Float32, Int64, Option<Bool>, Float64, UInt8) = ((-86), UInt8(Int8(Int8(11))), Float32(Float32(Float32(116.0))), Int64(UInt16(151)), ((UInt16(UInt8(72)), (Int16(27)&127..Int16(-61)&127:(23|1)), (UInt64(37)&127..UInt64(51)&127:((-77)|1)), (Int8(73)&127..=Int8(-97)&127:(42|1)), UInt32(39), (Int16(-20)&127..=Int16(11)&127:67|1), ((UInt8(231)&127..=UInt8(115)&127:(-100)|1), 80.0, false), UInt8(Int8(80))) as Bool), Float64(Float32(95.0)), UInt8(UInt8(Int8(Int8(8)))))
let var1939 : ?Int64 = ("<IdLb^@R#v" as Int64)
let var2110 : UInt16 = UInt16(Int16(Int16(UInt8(UInt8(94)))))
public let var2126 : ?Array<Unit> = (((Int32(Int32(77))&127..Int32(Int16(53))&127:((-95)|1)), Int16(Int16(UInt8(195))), (UInt32(186)&127..=UInt32(178)&127:(-7)|1), Int8(-4), (Option<Array<Bool>>.None as Class6)) as Array<Unit>)
let var2221 : Range<Int8> = (Int8(93)&127..=Int8(Int8(UInt8(UInt8(140))))&127:(Int64(UInt8(Int8(93)))|1))
var var2439 : Int64 = Int64(Int8(-107))
public var var2449 : Range<Int16> = (Int16(-38)&127..Int16(Int16(45))&127:(Int64(Int16(UInt16(Int16(-44))))|1))
var var2464 : Range<UInt8> = (UInt8(Int8(-91))&127..=UInt8(UInt8(182))&127:(73|1))
var var2493 : Range<UInt32> = (UInt32(170)&127..=UInt32(106)&127:(-119)|1)
let var2506 : ?Bool = Option<Bool>.None
var var2512 : ?Bool = Option<Bool>.None
public var var2523 : Int8 = Int8(111)
public var var2594 : Unit = ()
let var2642 : Range<Int32> = (Int32(Int32(43))&127..=Int32(UInt16(1))&127:(Int64(UInt64(Int16(UInt8(110))))|1))
var var2762 : (Range<Int16>, Bool, (UInt32, (Bool, Unit, Int16), Option<Bool>, UInt64, Rune, Int64), Range<Int64>) = ((Int16(-103)&127..Int16(-23)&127:(-99)|1), false, (UInt32(65), (true, (), Int16(44)), (Class2096() as Bool), UInt64(79), 't', Int64(Int32(Int32(19)))), ((-78)&127..=117&127:56|1))
let var2879 : Float64 = (-2.0)
var var3073 : (String, Range<Int32>, UInt8, (Bool, Unit, Int16), (Int64, UInt8, Float32, Int64, Option<Bool>, Float64, UInt8), Range<Int16>, Int64, Range<Int32>, UInt32) = ("""
rY,m,
%YT}t
""", (Int32(36)&127..Int32(116)&127:(-68)|1), UInt8(UInt8(Int8(90))), (([Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None] is (Unit) -> (Int64, UInt8, Float32, Int64, Option<Bool>, Float64, UInt8)), (), Int16(UInt8(5))), (Int64(UInt16(Int16(38))), UInt8(Int8(Int8(-36))), Float32(-63.0), (-97), Option<Bool>.None, Float64(Float64(Float32(-110.0))), UInt8(151)), (Int16(102)&127..Int16(95)&127:96|1), (-17), (Int32(Int32(Int8(-79)))&127..=Int32(Int8(49))&127:(Int64(UInt64(123))|1)), UInt32(Int8(UInt8(225))))
let var3141 : Array<Option<Bool>> = [([(Option<Float64>.None as Bool), Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, (Option<Unit>.None as Bool), Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None] as Bool), Option<Bool>.None, (((UInt8(161)&127..UInt8(170)&127:((-67)|1)) as Class6) as Bool), Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, (((Int32(-54)&127..=Int32(-91)&127:((-56)|1)), ((Int16(-37)&127..=Int16(-114)&127:((-32)|1)), false, (UInt32(75), (true, (), Int16(-56)), Option<Bool>.None, UInt64(35), 'I', 116), ((-62)&127..(-89)&127:(34|1)))) as Bool)]
var var3199 : ?Bool = (((Int16(-74) as Float64) as Class6) as Bool)
public var var3215 : UInt16 = UInt16(Int16(Int16(Int8(UInt8(100)))))
public let var3295 : (Range<Int32>, (Range<Int16>, Bool, (UInt32, (Bool, Unit, Int16), Option<Bool>, UInt64, Rune, Int64), Range<Int64>)) = ((Int32(19)&127..Int32(-43)&127:3|1), ((Int16(-66)&127..Int16(-37)&127:(-34)|1), (Int16(-11) is Option<Bool>), (UInt32(88), (false, (), Int16(10)), (Float32(67.0) as Bool), UInt64(252), '3', Int64((-110))), (Int64((-59))&127..Int64(UInt32(144))&127:((-124)|1))))
var var3362 : Range<UInt16> = (UInt16(37)&127..UInt16(240)&127:91|1)
var var3434 : UInt8 = UInt8(145)
var var3457 : (UInt32, (Bool, Unit, Int16), Option<Bool>, UInt64, Rune, Int64) = (UInt32(Int32(-62)), ((((###"X=Y&h8,$35"###, (Int32(-85)&127..Int32(79)&127:(100|1)), UInt8(230), (false, (), Int16(-60)), ((-116), UInt8(19), Float32(-16.0), (-90), Option<Bool>.None, 51.0, UInt8(232)), (Int16(51)&127..Int16(55)&127:((-28)|1)), (-88), (Int32(-48)&127..Int32(-6)&127:91|1), UInt32(44)) as Int32) is (Int64, UInt8, Float32, Int64, Option<Bool>, Float64, UInt8)), (), Int16(41)), Option<Bool>.None, UInt64(Int8(UInt8(UInt8(186)))), 'H', (-9))
var var3570 : Range<UInt64> = (UInt64(180)&127..UInt64(195)&127:103|1)
let var3645 : Range<UInt64> = (UInt64(219)&127..=UInt64(60)&127:(-59)|1)
var var3751 : Class2096 = Class2096()
public let var3970 : Int16 = Int16(UInt8(194))
public var var3996 : (UInt16, Range<Int16>, Range<UInt64>, Range<Int8>, UInt32, Range<Int16>, (Range<UInt8>, Float64, Bool), UInt8) = (UInt16(Int16(UInt16(UInt8(147)))), (Int16(UInt16(100))&127..Int16(47)&127:(19|1)), (UInt64(162)&127..UInt64(177)&127:126|1), (Int8(116)&127..=Int8(69)&127:(-76)|1), UInt32(Int16(-5)), (Int16(Int16(-2))&127..Int16(110)&127:(Int64(UInt32(14))|1)), ((UInt8(48)&127..UInt8(UInt8(85))&127:(85|1)), Float64((-119.0)), ((Int8(11)&127..Int8(108)&127:9|1) is (Bool, Unit, Int16))), UInt8(128))
var var4064 : ?Range<UInt64> = (Option<Int32>.None as Range<UInt64>)
public let var4162 : Array<Option<Bool>> = Array<Option<Bool>>(10){ i => Option<Bool>.None }
public let var4241 : Range<UInt32> = (UInt32(UInt8(91))&127..=UInt32(189)&127:(39|1))
public var var4383 : (Int64, UInt8, Float32, Int64, Option<Bool>, Float64, UInt8) = (Int64(UInt16(224)), UInt8(Int8(4)), Float32(-100.0), (-53), Option<Bool>.None, Float64(Float32(37.0)), UInt8(82))
let var4778 : UInt64 = UInt64(202)
public var var4813 : UInt32 = UInt32(UInt32(UInt16(UInt8(29))))
public var var4832 : ?Int32 = (Option<Float64>.None as Int32)
var var4910 : ?Enum274 = (() as Enum274)
public var var4965 : UInt64 = UInt64(169)
let var5085 : Enum1029 = Enum1029.defaultValue
var var5233 : ?Range<UInt64> = Option<Range<UInt64>>.None
var var5270 : Bool = false
var var5344 : UInt16 = UInt16(Int8(-88))
public let var5871 : ?Int8 = Option<Int8>.None
public let var6001 : ?Int16 = (((Int32(UInt16(114))&127..=Int32(35)&127:((-73)|1)), Int16(123), (UInt32(2)&127..UInt32(94)&127:(-6)|1), Int8(Int8(Int8(-63))), Option<Class6>.None) as Int16)
public let var6033 : Option<Array<Option<Bool>>> = Option<Array<Option<Bool>>>.None
var var6061 : Array<Option<Bool>> = [Option<Bool>.None, ((UInt32(122)&127..UInt32(130)&127:121|1) as Bool), (Option<Int8>.None as Bool), (Option<Int32>.None as Bool), Option<Bool>.None, (([(), (), (), (), (), (), (), (), (), ()] as Int32) as Bool), Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, (Option<Option<UInt32>>.None as Bool)]
var var6265 : Bool = (UInt32(184) is (String, Range<Int32>, UInt8, (Bool, Unit, Int16), (Int64, UInt8, Float32, Int64, Option<Bool>, Float64, UInt8), Range<Int16>, Int64, Range<Int32>, UInt32))
public var var6306 : ?Int64 = Option<Int64>.None
public let var6312 : ?Int64 = (Option<Range<UInt64>>.None as Int64)
public var var6566 : Int64 = (-40)
public open class Class6 <: Resource {
    public init() { // block id: 8

    }
;
    static var var527 : (UInt32, (Bool, Unit, Int16), Option<Bool>, UInt64, Rune, Int64) = (UInt32(65), (true, (), Int16(-65)), Option<Bool>.None, UInt64(153), '9', (-93));
    public static var var694 : Unit = ();
    let var952 : Bool = false;
    public static var var4253 : ((UInt16, Range<Int16>, Range<UInt64>, Range<Int8>, UInt32, Range<Int16>, (Range<UInt8>, Float64, Bool), UInt8), Range<UInt8>, Bool, Range<UInt64>) = ((UInt16(187), (Int16(-83)&127..=Int16(107)&127:54|1), (UInt64(59)&127..=UInt64(28)&127:((-84)|1)), (Int8(51)&127..=Int8(112)&127:(-113)|1), UInt32(254), (Int16(-2)&127..=Int16(-11)&127:83|1), ((UInt8(144)&127..=UInt8(142)&127:(112|1)), (-102.0), true), UInt8(86)), (UInt8(140)&127..=UInt8(147)&127:(28|1)), false, (UInt64(12)&127..=UInt64(123)&127:(21|1)));
    public static var var4300 : Int8 = Int8(-74);
    static var var4574 : UInt64 = UInt64(185);
    public static let var4688 : Enum274 = Enum274.enumValue597;
    var var4860 : ((UInt16, Range<Int16>, Range<UInt64>, Range<Int8>, UInt32, Range<Int16>, (Range<UInt8>, Float64, Bool), UInt8), Range<UInt8>, Bool, Range<UInt64>) = ((UInt16(69), (Int16(-125)&127..=Int16(-64)&127:(106|1)), (UInt64(103)&127..=UInt64(114)&127:(-128)|1), (Int8(18)&127..Int8(-113)&127:(37|1)), UInt32(64), (Int16(29)&127..Int16(26)&127:103|1), ((UInt8(152)&127..UInt8(127)&127:((-4)|1)), (-105.0), true), UInt8(21)), (UInt8(141)&127..UInt8(126)&127:((-31)|1)), false, (UInt64(124)&127..UInt64(60)&127:(115|1)));
    public var var6576 : Int64 = (-60)
    public func isClosed(): Bool { return false }
    public func close(): Unit {}
}


public func func13(param14 : Float64) : Unit { // block id: 15
    var var64 : Bool = true;
    (if (var25[0]) { (UInt32(37), var25, Option<Bool>.None, UInt64(27), var40, var43)[2] } else { var50[4] }  ?? var64);
    let var85 : Unit = ();
    var var100 : Int8 = Int8(Int8(UInt8(Int8(Int8(74)))));
    var var112 : UInt8 = UInt8(Int8(Int8(UInt8(UInt8(11)))));
    match (match (Option<Bool>.None) {
            case caseVar71 => 
                'P'
            
            case _ : Rune => 
                ();
                if (true) { var40 } else { '3' } 
            
            case _ => 
                var85;
                ();
                if (var64) { 'V' } else { 'l' } 
            
        }) {
        case 'Q' => 
            var64 &&= var64;
            var100 -= var100
        
        case 'b' => 
            var112 |= UInt8(186);
            ()
        
        case 'D' => 
            var125 *= UInt32(86);
            var85
        
        case _ => 
            if (var134) { (var140, var85, var144) } else { var25 } ;
            var85;
            var85
        
        case _ => 
            var85
        
    };
    var loopTimeVar169 : Int64 = 0;
    do {
        loopTimeVar169++;

    } while ((try { // block id: 155
        param14 >= 25.0;
        UInt64(222)
    } catch (_) { // block id: 160
        var var163 : UInt64 = UInt64(109);
        var163 >> ((UInt64(219)) & 7)
    } < UInt64(95)) && loopTimeVar169 < 100 ) 
}




public enum Enum274 {
    defaultValue |
    enumValue597
}
func func213(param214 : Unit) : (Int64, UInt8, Float32, Int64, Option<Bool>, Float64, UInt8) { // block id: 215
    var var233 : Float32 = Float32(Float32(Float32(Float32(88.0))));
    let var250 : ?Int64 = Option<Int64>.None;
    let var277 : Enum274 = Enum274.defaultValue;
    ((-4), [UInt8(45), UInt8(83), UInt8(151), UInt8(117), UInt8(111), UInt8(155), UInt8(228), UInt8(233), UInt8(183), UInt8(126)][4], try { // block id: 231
        var233
    } catch (e: Exception) { // block id: 238
        UInt32(190) << ((UInt32(61)) & 7);
        true;
        Float32(-70.0)
    }, (var250 ?? var43 % ((var43) | 1)), Option<Bool>.Some([false, true, false, true, true, false, false, false, true, false][2]), (if (var267) { var270 } else { var270 }  ?? match (var277) {
        case _ : Range<Int8> => 
            ();
            let var309 : UInt8 = UInt8(Int8(-56));
            (var43, UInt8(103), Float32(-12.0), 10, var289, var305, var309);
            var305 / Float64((Int32((-55.0))) | 1)
        
        case defaultValue => 
            var43;
            var305
        
        case _ => 
            var305
        
    }), match (match ("wC=R[lO@K&") {
            case ###"l44YH`7Tol"### => 
                var var331 : Int64 = Int64(UInt32(75));
                var331 <<= ((var331) & 7);
                var336
            
            case _ => 
                param214;
                [true, false, false, true, false, true, false, false, false, false]
            
        }) {
        case _ => 
            param214;
            let var346 : UInt8 = UInt8(Int8(-80));
            var346
        
    })
}



public enum Enum1029 {
    defaultValue |
    enumValue3840(Option<Array<Bool>>, Range<UInt8>, Option<(Range<Int32>, (Range<Int16>, Bool, (UInt32, (Bool, Unit, Int16), Option<Bool>, UInt64, Rune, Int64), Range<Int64>))>) |
    enumValue4117(Int8, Option<Range<UInt64>>, Option<Int64>)
}


public func func1280(param1281 : Int64) : Option<Class6> { // block id: 1282
    var var1286 : (UInt16, Range<Int16>, Range<UInt64>, Range<Int8>, UInt32, Range<Int16>, (Range<UInt8>, Float64, Bool), UInt8) = (UInt16(14), (Int16(94)&127..=Int16(-22)&127:((-54)|1)), (UInt64(84)&127..=UInt64(124)&127:(-57)|1), (Int8(-75)&127..Int8(96)&127:(-16)|1), UInt32(223), (Int16(-36)&127..Int16(-21)&127:(-3)|1), ((UInt8(189)&127..=UInt8(147)&127:(-91)|1), (-22.0), ((UInt16(82), (Int16(93)&127..=Int16(93)&127:(-50)|1), (UInt64(40)&127..=UInt64(27)&127:(91|1)), (Int8(-39)&127..Int8(-98)&127:125|1), UInt32(115), (Int16(-120)&127..=Int16(-79)&127:((-98)|1)), ((UInt8(61)&127..=UInt8(69)&127:121|1), (-30.0), false), UInt8(227)) is Int32)), UInt8(UInt8(192)));
    var1286[3];
    var796;
    var var1334 : Range<Int32> = (Int32(-127)&127..=Int32(-49)&127:(Int64(UInt32(25))|1));
    var var1347 : ?Class6 = ((Int32(116)&127..=Int32(UInt16(152))&127:(Int64(Int32(-88))|1)) as Class6);
    ((Int16(18) as (Range<Int32>, Int16, Range<UInt32>, Int8, Option<Class6>)) ?? (var1334, var144, (var125&127..UInt32(229)&127:(49|1)), Int8(41), var1347))[4]
}



public func func1697(param1698 : Range<Int32>) : UInt64 { // block id: 1699
    var856;
    var var1702 : UInt64 = UInt64(130);
    var1702
}

public func func1748(param1749 : Int64) : Range<UInt64> { // block id: 1750
    let var1753 : (Float64) -> Unit = { lambdaParameter1756 : Float64 => () };
    match (var1763) {
        case caseVar1768 => 
            Option<Bool>.None;
            var var1773 : Int8 = Int8(-54);
            var1773 **= (Int8(2) & 3);
            [(-40.0), 97.0, (-58.0), (-74.0), 51.0, 21.0, 101.0, (-94.0), 28.0, (-36.0)]
        
        case _ : UInt64 => 
            [true, false, true, true, true, false, false, false, true, true];
            (-115);
            var1783
        
        case _ => 
            if (var267) { [0.0, var305, var305, 54.0, var305, var305, var305, var305, (-96.0), var305] } else { var1783 } 
        
    }[4]|>var1753;
    var var1916 : Int8 = Int8(31);
    var var1919 : Int8 = Int8(-14);
    match (try { // block id: 1821
            ();
            var1194 += Int32(-89);
            var1827
        } finally { // block id: 1868
            var var1872 : (UInt16, Range<Int16>, Range<UInt64>, Range<Int8>, UInt32, Range<Int16>, (Range<UInt8>, Float64, Bool), UInt8) = (UInt16(Int8(UInt8(191))), (Int16(-41)&127..Int16(52)&127:(-79)|1), (UInt64(101)&127..=UInt64(UInt64(UInt32(51)))&127:(Int64(Int16(-85))|1)), (Int8(44)&127..=Int8(Int8(62))&127:(Int64(Int16(UInt16(86)))|1)), UInt32(77), (Int16(-124)&127..=Int16(36)&127:(-90)|1), ((UInt8(173)&127..=UInt8(249)&127:(Int64(Int32(-70))|1)), 8.0, true), UInt8(Int8(Int8(-105))));
            let var1907 : UInt16 = UInt16(241);
            let var1926 : Range<UInt8> = (UInt8(155)&127..UInt8(62)&127:(-97)|1);
            if (var140) { var1872 } else { (var1907, (Int16(-128)&127..Int16(-90)&127:((-7)|1)), (UInt64(161)&127..UInt64(243)&127:(-72)|1), (var1916&127..var1919&127:(param1749|1)), UInt32(177), (Int16(-102)&127..=Int16(-50)&127:(-52)|1), (var1926, 29.0, var140), UInt8(73)) } ;
            var796;
            var50
        }[2]) {
        case _ : (Int64, UInt8, Float32, Int64, Option<Bool>, Float64, UInt8) => 
            [var1939, var1939, var1939, Option<Int64>.Some(var43), var1939, var1939, var1939, Option<Int64>.None, Option<Int64>.Some(param1749), var1939];
            ();
            (UInt64(56)&127..UInt64(240)&127:(param1749|1))
        
        case 85.0 | 38.0 | -106.0 | -122.0 => 
            (UInt64(125)&127..UInt64(74)&127:(-17)|1)
        
        case -65.0 => 
            var267 &&= false;
            (UInt64(92)&127..=UInt64(206)&127:63|1)
        
        case caseVar1971 : Range<UInt32> => 
            ();
            var var1975 : Range<UInt64> = (UInt64(Int16(-33))&127..=UInt64(UInt8(Int8(122)))&127:((-86)|1));
            var1975
        
        case _ => 
            var125 **= (var125 & 3);
            Option<Class6>.Some(Class6());
            let var1991 : Range<UInt64> = (UInt64(Int8(Int8(69)))&127..=UInt64(115)&127:(15|1));
            var1991
        
    }
}

public open class Class2096 <: Class6 {
    public init() { // block id: 2098

    }
;
    public init(namedParam3400 ! : Option<Int32>, namedParam3401 ! : Range<Int64>, namedParam3402 ! : Range<Int8>, namedParam3403 ! : (Int64, UInt8, Float32, Int64, Option<Bool>, Float64, UInt8)) { // block id: 3404
        match (match ("""
MI9t8
n;ul3
""") {
                case _ => 
                    var var3413 : UInt64 = UInt64(145);
                    var3413++;
                    ();
                    Int32(-6)
                
                case ###" /2?gG*kK}"### => 
                    Option<Int8>.Some(var2523);
                    (Int16(70)&127..Int16(75)&127:(-74)|1);
                    var1194
                
                case _ => 
                    var694;
                    ();
                    var1194
                
            }) {
            case _ => 
                (18, var3434, var716, (-31), var289, (-75.0), var3434)
            
        }
    }
;
    public init(namedParam4515 ! : Option<(UInt32, (Bool, Unit, Int16), Option<Bool>, UInt64, Rune, Int64)>) { // block id: 4516
        try { // block id: 4518
            if (var140) { ((-127)&127..=110&127:(104|1)) } else { ((-105)&127..=73&127:47|1) } 
        } catch (_) { // block id: 4526
            ();
            try { // block id: 4529
                var4253;
                ();
                (var2439&127..83&127:(var43|1))
            } finally { // block id: 4536
                ((-26)&127..=(-104)&127:22|1)
            }
        } finally { // block id: 4538
            if (false) { (Int32(68)&127..=Int32(30)&127:(-44)|1) } else { (Int32(-1)&127..var1387&127:(var43|1)) } ;
            if (var267) { // block id: 4548
                if (true) { [UInt8(202), var3434, var3434, UInt8(0), UInt8(173), UInt8(139), UInt8(12), var3434, UInt8(213), UInt8(146)] } else { [UInt8(205), UInt8(64), UInt8(62), UInt8(53), UInt8(204), UInt8(76), UInt8(153), UInt8(51), UInt8(222), UInt8(113)] } ;
                var694;
                var var4603 : (Range<UInt8>, Float64, Bool) = ((UInt8(43)&127..UInt8(76)&127:(-64)|1), Float64(Float64(Float64(Float32(-80.0)))), true);
                if (true) { (UInt16(47), (Int16(-103)&127..Int16(-23)&127:(34|1)), (var4574&127..UInt64(219)&127:((-49)|1)), (var2523&127..var4300&127:((-42)|1)), var125, (Int16(-110)&127..Int16(-45)&127:(-45)|1), (var2464, 111.0, var140), var3434) } else { (UInt16(8), (Int16(-25)&127..=Int16(-122)&127:((-106)|1)), (UInt64(191)&127..=UInt64(105)&127:(var2439|1)), var2221, var125, var2449, var4603, UInt8(73)) } 
            } else if (true) { // block id: 4613
                var2594;
                var1194 ^= Int32(-75);
                var3996
            } else { // block id: 4619
                var3996
            };
            match (Option<Class6>.None) {
                case caseVar4625 : (Range<Int32>, (Range<Int16>, Bool, (UInt32, (Bool, Unit, Int16), Option<Bool>, UInt64, Rune, Int64), Range<Int64>)) => 
                    (var4574&127..=UInt64(143)&127:((-117)|1));
                    if (true) { var1408 } else { (26&127..21&127:20|1) } 
                
                case _ => 
                    if (var134) { var1408 } else { ((-29)&127..(-52)&127:(-102)|1) } 
                
                case caseVar4644 : Int16 => 
                    (90&127..=(-85)&127:(-3)|1)
                
                case _ => 
                    var267 ||= var140;
                    let var4656 : UInt32 = UInt32(Int32(UInt8(110)));
                    var125 <<= ((var4656) & 7);
                    (var2439&127..=(-107)&127:((-104)|1))
                
                case _ => 
                    var694;
                    var2594;
                    ((-59)&127..var2439&127:(var43|1))
                
            }
        };
        var var4676 : Bool = false;
        try (resource = Class6()) { // block id: 4673
            var4676 ||= false;
            (Option<Unit>.None ?? var694)
        } catch (_) { // block id: 4682

        } finally { // block id: 4683
            let var4695 : ?UInt64 = ((Class2096(), (([true, true, false, true, true, true, true, false, true, true] is (Int64) -> Option<Class6>), (), Int16(Int16(35))), (), [false, true, true, true, false, true, true, false, false, true], [(Int16(-2)&127..=Int16(107)&127:((-107)|1)), (Int16(-55)&127..=Int16(-96)&127:124|1), (Int16(101)&127..Int16(-44)&127:((-53)|1)), (Int16(14)&127..Int16(-53)&127:(-11)|1), (Int16(59)&127..Int16(-117)&127:((-16)|1)), (Int16(-10)&127..=Int16(-89)&127:((-56)|1)), (Int16(55)&127..=Int16(114)&127:(-46)|1), (Int16(-39)&127..Int16(108)&127:(93|1)), (Int16(81)&127..=Int16(76)&127:((-21)|1)), (Int16(27)&127..Int16(-50)&127:120|1)]) as UInt64);
            var loopTimeVar4737 : Int64 = 0;
            do {
                loopTimeVar4737++;
                var4688;
                if (false) { Option<UInt64>.Some(var4574) } else { var4695 } 
            } while ((false) && loopTimeVar4737 < 100 ) ;
            var loopTimeVar4756 : Range<UInt64> = (UInt64(UInt16(UInt16(Int8(48))))&127..UInt64(Int16(87))&127:(Int64(UInt8(UInt8(Int8(92))))|1));
            for (i in loopTimeVar4756 where true) {
                (Int16(-102)&127..Int16(-81)&127:109|1);
                if (false) { [true, true, true, true, false, false, true, true, true, true] } else { [true, true, false, true, true, true, false, true, true, false] } 
            }
        }
    }

}


func func2335(param2336 : Range<UInt64>) : ((UInt16, Range<Int16>, Range<UInt64>, Range<Int8>, UInt32, Range<Int16>, (Range<UInt8>, Float64, Bool), UInt8), Range<UInt8>, Bool, Range<UInt64>) { // block id: 2337
    let var2389 : String = "Tc[*^C?ycU";
    var var2474 : UInt8 = UInt8(188);
    var var2481 : Bool = ((UInt8(20)&127..UInt8(228)&127:54|1) is Array<Option<Int64>>);
    match (var1763) {
        case _ => 
            let var2345 : (UInt16, Range<Int16>, Range<UInt64>, Range<Int8>, UInt32, Range<Int16>, (Range<UInt8>, Float64, Bool), UInt8) = (UInt16(UInt8(235)), (Int16(-111)&127..=Int16(-91)&127:(-124)|1), (UInt64(43)&127..=UInt64(108)&127:96|1), (Int8(UInt8(232))&127..Int8(UInt8(Int8(-18)))&127:(Int64(UInt64(39))|1)), UInt32(165), (Int16(Int8(UInt8(184)))&127..Int16(Int16(UInt8(43)))&127:((-62)|1)), ((UInt8(209)&127..=UInt8(209)&127:55|1), 111.0, false), UInt8(UInt8(UInt8(52))));
            (var2345, (UInt8(165)&127..UInt8(67)&127:(var43|1)), true, (UInt64(49)&127..=UInt64(227)&127:((-50)|1)))
        
        case caseVar2386 => 
            var2389;
            var796;
            let var2393 : ((UInt16, Range<Int16>, Range<UInt64>, Range<Int8>, UInt32, Range<Int16>, (Range<UInt8>, Float64, Bool), UInt8), Range<UInt8>, Bool, Range<UInt64>) = ((UInt16(Int16(Int16(3))), (Int16(UInt8(157))&127..=Int16(Int16(-22))&127:(Int64(Int32(-37))|1)), (UInt64(136)&127..=UInt64(16)&127:125|1), (Int8(86)&127..=Int8(-56)&127:(-32)|1), UInt32(UInt32(UInt32(192))), (Int16(49)&127..=Int16(Int8(40))&127:(Int64(UInt32(253))|1)), ((UInt8(204)&127..UInt8(114)&127:((-64)|1)), Float64((-44.0)), ((UInt64(140)&127..=UInt64(127)&127:((-33)|1)) is Array<Option<Bool>>)), UInt8(45)), (UInt8(91)&127..UInt8(216)&127:(-10)|1), false, (UInt64(0)&127..UInt64(59)&127:60|1));
            var2393
        
        case _ => 
            ();
            var43 <<= ((var2439) & 7);
            var var2445 : UInt16 = UInt16(UInt16(19));
            ((var2445, var2449, param2336, var2221, var125, var2449, (var2464, var305, var267), var2474), (var2474&127..UInt8(126)&127:(var43|1)), var2481, (UInt64(182)&127..UInt64(241)&127:73|1))
        
    }
}

public func func825() : Class2096 { // block id: 2101
    let var2321 : Unit = ();
    (try { // block id: 2108
        var2110;
        var var2117 : ?Array<Unit> = Option<Array<Unit>>.None;
        var2117
    } catch (_) { // block id: 2119
        var var2122 : Rune = 'I';
        var2122 = var2122;
        var2126
    } finally { // block id: 2142
        var2126
    } ?? if (if (var140) { // block id: 2147
        Option<Unit>.None;
        var2110 / ((var2110) | 1);
        true
    } else if (var267) { // block id: 2154
        var267
    } else { // block id: 2156
        ();
        true && var134
    }) { match (Float32(-122.0)) {
        case -126.0 => 
            var1194++;
            var796;
            [(), (), (), (), (), (), (), (), (), ()]
        
        case 43.0 => 
            ();
            var796;
            [(), (), (), (), (), (), (), (), (), ()]
        
        case _ => 
            "i5c)FvM1/H";
            (UInt8(171)&127..=UInt8(33)&127:(-125)|1);
            [var796, var796, var796, (), var796, (), (), (), var796, var796]
        
    } } else { match (var949) {
        case caseVar2195 : Array<Bool> => 
            var40;
            var796;
            [(), (), var796, var796, var796, var796, var796, (), var796, ()]
        
        case caseVar2212 => 
            var796;
            [(), (), (), (), (), (), (), (), (), ()]
        
        case _ => 
            if (var140) { var2221 } else { (Int8(-27)&127..Int8(-13)&127:(52|1)) } ;
            var var2250 : Array<Option<Int64>> = [Option<Int64>.Some(Int64(Int8(-90))), ([((Int32(-26)&127..Int32(72)&127:(-108)|1) as Bool), ((Int8(62)&127..=Int8(-90)&127:(-77)|1) as Bool), Option<Bool>.None, Option<Bool>.None, (UInt16(208) as Bool), ((-33) as Bool), (((-38), UInt8(34), Float32(-48.0), 66, Option<Bool>.Some(false), 91.0, UInt8(143)) as Bool), Option<Bool>.Some(false), ((UInt16(150), (Int16(106)&127..Int16(-59)&127:(-40)|1), (UInt64(82)&127..=UInt64(23)&127:(-34)|1), (Int8(39)&127..Int8(24)&127:33|1), UInt32(42), (Int16(113)&127..Int16(121)&127:(44|1)), ((UInt8(120)&127..UInt8(247)&127:((-120)|1)), 118.0, false), UInt8(242)) as Bool), Option<Bool>.None] as Int64), ([(-82.0), 92.0, (-12.0), 73.0, 29.0, 119.0, 3.0, (-40.0), 80.0, (-126.0)] as Int64), Option<Int64>.Some(Int64(Int8(-84))), ('g' as Int64), (Class2096() as Int64), (UInt8(18) as Int64), Option<Int64>.Some((-109)), Option<Int64>.Some(Int64(Int8(UInt8(219)))), ((UInt32(190)&127..UInt32(167)&127:36|1) as Int64)];
            if (var134) { [Option<Int64>.None, Option<Int64>.None, var1939, Option<Int64>.None, Option<Int64>.None, var1939, Option<Int64>.None, Option<Int64>.Some(66), var1939, var1939] } else { var2250 } ;
            let var2325 : Unit = ();
            [var796, var2321, var796, var2325, var2325, var2321, var2325, var796, (), var2321]
        
    } } );
    let var2486 : (Range<UInt64>) -> ((UInt16, Range<Int16>, Range<UInt64>, Range<Int8>, UInt32, Range<Int16>, (Range<UInt8>, Float64, Bool), UInt8), Range<UInt8>, Bool, Range<UInt64>) = func2335;
    let var2547 : Bool = false;
    match (((UInt64(44)&127..=UInt64(101)&127:(-80)|1)|>var2486)) {
        case _ => 
            var2493;
            ();
            let var2497 : Class2096 = Class2096();
            var2497
        
        case (caseVar2501 : Range<Int8>,caseVar2502 : Option<(Range<Int32>, Int16, Range<UInt32>, Int8, Option<Class6>)>,_,_ : Option<Int64>) => 
            [var2506, Option<Bool>.Some(var134), Option<Bool>.None, var2512, var1215, Option<Bool>.Some(var140), var2512, var1215, var2506, var2506];
            var2523 << ((Int8(119)) & 7);
            let var2529 : Class2096 = Class2096();
            if (var140) { var2529 } else { Class2096() } 
        
        case _ : UInt16 => 
            var var2536 : Class2096 = Class2096();
            var2536
        
        case (caseVar2540 : ((UInt16, Range<Int16>, Range<UInt64>, Range<Int8>, UInt32, Range<Int16>, (Range<UInt8>, Float64, Bool), UInt8), Range<UInt8>, Bool, Range<UInt64>),caseVar2541 : Option<Array<Bool>>,_,caseVar2542 : (Range<UInt8>, Float64, Bool)) => 
            ();
            if (var2547) { [(Int16(-48)&127..Int16(-44)&127:(-89)|1), (Int16(-107)&127..Int16(-8)&127:23|1), (Int16(-113)&127..=Int16(-51)&127:37|1), (Int16(-113)&127..=Int16(80)&127:68|1), (Int16(38)&127..Int16(53)&127:(-102)|1), (Int16(-126)&127..Int16(-40)&127:83|1), (Int16(25)&127..Int16(39)&127:(-52)|1), (Int16(24)&127..=Int16(2)&127:(-2)|1), (Int16(89)&127..=Int16(87)&127:92|1), (Int16(-76)&127..Int16(-17)&127:92|1)] } else { [(Int16(45)&127..Int16(46)&127:(var2439|1)), (Int16(-91)&127..var144&127:(28|1)), (Int16(46)&127..=Int16(48)&127:71|1), var1572, (Int16(-115)&127..Int16(108)&127:((-109)|1)), (var144&127..=var144&127:((-122)|1)), var1572, (Int16(9)&127..=Int16(-7)&127:(var2439|1)), var1572, (Int16(59)&127..Int16(-114)&127:(-109)|1)] } ;
            if (var267) { Class2096() } else { Class2096() } 
        
        case _ => 
            Class2096()
        
    }
}


public func func2673(optionalParam2674 ! : Range<Int64> = ((-10)&127..=Int64(Int16(51))&127:(Int64(Int64(UInt8(80)))|1)), namedParam2682 ! : (String, Range<Int32>, UInt8, (Bool, Unit, Int16), (Int64, UInt8, Float32, Int64, Option<Bool>, Float64, UInt8), Range<Int16>, Int64, Range<Int32>, UInt32)) : Int8 { // block id: 2683
    var2523
}

public func func2656(param2657 : Array<Option<Bool>>) : Int8 { // block id: 2658
    match ((UInt64(96)&127..=UInt64(187)&127:(-22)|1)) {
        case _ => 
            var2594;
            if (var140) { (UInt64(37)&127..UInt64(38)&127:(-86)|1) } else { (UInt64(213)&127..=UInt64(59)&127:(85|1)) } ;
            ()
        
    };
    var var2694 : ?Int8 = ((Int64(UInt32(34))&127..(-20)&127:(Int64(UInt64(80))|1)) as Int8);
    let var2711 : (String, Range<Int32>, UInt8, (Bool, Unit, Int16), (Int64, UInt8, Float32, Int64, Option<Bool>, Float64, UInt8), Range<Int16>, Int64, Range<Int32>, UInt32) = ("""
M.q0z
XCV<8
""", (Int32(Int16(Int8(24)))&127..Int32(UInt32(167))&127:(Int64(UInt64(148))|1)), UInt8(68), (false, (), Int16(UInt16(Int16(-89)))), ((-22), UInt8(100), Float32(58.0), 34, Option<Bool>.Some(false), Float64(Float64(61.0)), UInt8(80)), (Int16(12)&127..=Int16(-49)&127:(-12)|1), Int64(UInt16(Int16(5))), (Int32(UInt32(99))&127..Int32(UInt16(189))&127:((-21)|1)), UInt32(UInt32(88)));
    let var2798 : UInt8 = UInt8(45);
    func2673(optionalParam2674 : (88&127..=(-59) ^ var43&127:(if (var134) { // block id: 2692
        var2694;
        (-111)
    } else { // block id: 2703
        52
    }|1)), namedParam2682 : try { // block id: 2706
        Option<Class6>.Some(Class2096());
        [false, false, true, true, true, false, true, false, true, true];
        var2711
    } catch (e: Exception) { // block id: 2752
        var var2755 : Bool = false;
        if (var2755) { Option<Unit>.None } else { var1763 } ;
        if (var2755) { var2762 } else { var2762 } ;
        var var2783 : String = "S\\N([6o&ic";
        let var2793 : Int64 = (-25);
        (var2783, var2642, UInt8(96), var25, ((-81), UInt8(101), Float32(-86.0), var2793, var289, var305, var2798), (Int16(12)&127..Int16(9)&127:(-93)|1), var2793, var2642, var125)
    })
}


public func func2805(param2806 : Int16) : Int8 { // block id: 2807
    var var2835 : UInt64 = UInt64(66);
    if (var140) { // block id: 2815
        let var2823 : Range<UInt16> = (UInt16(UInt16(UInt8(37)))&127..UInt16(Int16(UInt16(Int16(58))))&127:((-111)|1));
        if (true) { (var2110&127..UInt16(221)&127:(var43|1)) } else { var2823 } ;
        var2835 ^= UInt64(190);
        var305
    } else { // block id: 2839
        (-124.0) / Float64((Int32((-78.0))) | 1)
    }|>{ lambdaParameter2811 : Float64 =>  };
    let var2971 : Bool = (UInt16(Int8(UInt8(UInt8(71)))) is Int16);
    try { // block id: 3133
        var716 - Float32(-31.0);
        """
BY<%.
2>'xc
""";
        if (true) { var3141 } else { var546 } 
    } finally { // block id: 3197
        var3199;
        var2594;
        var546
    }|>{ lambdaParameter2846 : Array<Option<Bool>> => func func2850(param2851 : (Range<Int32>) -> UInt64) : Array<Option<Bool>> { // block id: 2854
        var1194 /= ((Int32(39)) | 1);
        let var2987 : ?(Range<Int32>, Int16, Range<UInt32>, Int8, Option<Class6>) = Option<(Range<Int32>, Int16, Range<UInt32>, Int8, Option<Class6>)>.None;
        var var3011 : Bool = (((Int32(92)&127..=Int32(UInt8(123))&127:(Int64(27)|1)), ((Int16(-88)&127..Int16(34)&127:(13|1)), (UInt8(100) is Option<Int32>), (UInt32(30), (true, (), Int16(-41)), Option<Bool>.Some(true), UInt64(84), '0', (-83)), (2&127..(-89)&127:(-48)|1))) is UInt16);
        let var3046 : ?Bool = Option<Bool>.None;
        try { // block id: 2859
            let var2871 : UInt16 = UInt16(Int16(110));
            if (true) { // block id: 2862
                var1194--;
                var267 ||= false;
                var2110 % ((var2871) | 1)
            } else { // block id: 2874
                [var305, 41.0, var2879, (-75.0), 54.0, 88.0, 112.0, var305, var2879, var305];
                var2871
            };
            (Option<Range<UInt64>>.None ?? (UInt64(61)&127..UInt64(109)&127:(-84)|1));
            var var2920 : ?Bool = ([([true, true, false, true, true, false, false, false, true, true] as Int64), ((UInt8(150)&127..=UInt8(83)&127:((-45)|1)) as Int64), ((100&127..(-116)&127:((-110)|1)) as Int64), Option<Int64>.Some(96), Option<Int64>.Some(Int64(UInt32(101))), Option<Int64>.Some(Int64(Int32(-75))), Option<Int64>.None, ((UInt32(202), (true, (), Int16(-24)), Option<Bool>.Some(true), UInt64(35), 'u', 124) as Int64), (Float32(1.0) as Int64), ((UInt32(175)&127..UInt32(163)&127:(16|1)) as Int64)] as Bool);
            var var2965 : ?Bool = Option<Bool>.Some((Int8(73) is Range<UInt16>));
            match ((Int16(110)&127..=Int16(114)&127:63|1)) {
                case caseVar2900 => 
                    [Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, var1215, var2512, var2506, var2506, Option<Bool>.None, var1215, Option<Bool>.Some(true)]
                
                case _ : Option<Range<UInt64>> => 
                    (UInt8(56)&127..=UInt8(203)&127:(-2)|1);
                    [var2920, Option<Bool>.None, var2965, Option<Bool>.Some(var2971), var2512, var2920, Option<Bool>.None, var2965, Option<Bool>.Some(true), var2965]
                
                case _ => 
                    var2987;
                    if (var267) { (var2523&127..=Int8(32)&127:(var2439|1)) } else { var2221 } ;
                    if (var134) { [var2920, Option<Bool>.None, Option<Bool>.Some(var2971), var2512, Option<Bool>.None, Option<Bool>.None, var2512, var2512, var2920, Option<Bool>.Some(var3011)] } else { [var2506, var2512, Option<Bool>.Some(false), Option<Bool>.None, var3046, Option<Bool>.None, var2920, var3046, Option<Bool>.Some(true), var2512] } 
                
            }
        } finally { // block id: 3054
            try (resource = Class6()) { // block id: 3056

            } finally { // block id: 3057
                UInt32(154);
                ();
                var851--
            };
            let var3064 : (Float64) -> Unit = { lambdaParameter3067 : Float64 => () };
            var305|>var3064;
            match (var3073) {
                case _ => 
                    var546
                
            }
        }
    }
; func2656(func2850({ lambdaParameter3128 : Range<Int32> => func1697(lambdaParameter3128) })) }
}

func func3232(param3233 : Int64) : (Range<Int32>, (Range<Int16>, Bool, (UInt32, (Bool, Unit, Int16), Option<Bool>, UInt64, Rune, Int64), Range<Int64>)) { // block id: 3234
    let var3239 : Array<Float64> = Array<Float64>(10){ i => (-105.0) };
    (try { // block id: 3237
        var3239;
        var851
    } finally { // block id: 3258
        var1194;
        if (var267) { var1939 } else { Option<Int64>.None } ;
        Int16(-36)
    }&127..=Int16(-14)&127:(var43|1));
    let var3349 : Int64 = Int64(Int16(-35));
    match (var796) {
        case () => 
            ();
            let var3283 : UInt64 = UInt64(110);
            (var2642, (var1572, false, (UInt32(172), var25, Option<Bool>.None, var3283, var40, (-87)), (54&127..(-78)&127:(-36)|1)))
        
        case caseVar3290 => 
            if (true) { var3295 } else { ((Int32(94)&127..Int32(-87)&127:(-19)|1), var2762) } 
        
        case () => 
            var1763;
            if (false) { var3295 } else { var3295 } 
        
        case () | () | () | () => 
            var2594;
            var1387 ** (Int32(78) & 3);
            ((Int32(-123)&127..Int32(-31)&127:0|1), var2762)
        
        case _ => 
            UInt32(211);
            ((Int32(76)&127..=var1387&127:(var3349|1)), var2762)
        
    }
}



func func3354(param3355 : ((UInt16, Range<Int16>, Range<UInt64>, Range<Int8>, UInt32, Range<Int16>, (Range<UInt8>, Float64, Bool), UInt8), Range<UInt8>, Bool, Range<UInt64>)) : (Range<Int32>, (Range<Int16>, Bool, (UInt32, (Bool, Unit, Int16), Option<Bool>, UInt64, Rune, Int64), Range<Int64>)) { // block id: 3356
    var949;
    let var3375 : UInt64 = UInt64(UInt64(36));
    if (((var3362 as Bool) ?? !var140)) { // block id: 3366
        if (var134) { Class6() } else { Class2096() } ;
        if (false) { // block id: 3373
            var3375;
            ()
        };
        (Option<(Range<Int32>, (Range<Int16>, Bool, (UInt32, (Bool, Unit, Int16), Option<Bool>, UInt64, Rune, Int64), Range<Int64>))>.None ?? var3295)
    } else { // block id: 3386
        (Option<Option<Unit>>.None ?? Option<Unit>.Some(()));
        var var3442 : ?Int32 = Option<Int32>.None;
        if (false) { // block id: 3397
            Class2096(namedParam3400 : var3442, namedParam3401 : (var43&127..(-31)&127:(var43|1)), namedParam3402 : var2221, namedParam3403 : var1827);
            ();
            (var2642, ((Int16(122)&127..=Int16(85)&127:71|1), var134, var3457, ((-71)&127..=var43&127:(var2439|1))))
        } else if (false) { // block id: 3504
            ();
            Class2096();
            (var2642, ((var144&127..=Int16(-85)&127:((-117)|1)), false, (UInt32(27), var25, Option<Bool>.Some(var267), var3375, 'V', (-70)), var1408))
        } else { // block id: 3524
            var3295;
            var796;
            let var3539 : UInt64 = UInt64(UInt8(UInt8(95)));
            if (false) { ((Int32(115)&127..=Int32(104)&127:(-40)|1), (var2449, true, (var125, var25, var289, var3539, 'D', var2439), ((-40)&127..=var43&127:(3|1)))) } else { var3295 } 
        }
    }
}



public func func3551(param3552 : Int64) : ((UInt16, Range<Int16>, Range<UInt64>, Range<Int8>, UInt32, Range<Int16>, (Range<UInt8>, Float64, Bool), UInt8), Range<UInt8>, Bool, Range<UInt64>) { // block id: 3553
    let var3577 : Range<UInt8> = (UInt8(71)&127..=UInt8(185)&127:(-83)|1);
    var var3583 : (UInt16, Range<Int16>, Range<UInt64>, Range<Int8>, UInt32, Range<Int16>, (Range<UInt8>, Float64, Bool), UInt8) = (UInt16(221), (Int16(-63)&127..Int16(-74)&127:84|1), (UInt64(Int16(-58))&127..UInt64(154)&127:(Int64(Int16(18))|1)), (Int8(UInt8(UInt8(127)))&127..=Int8(UInt8(UInt8(254)))&127:(Int64(UInt64(UInt32(124)))|1)), UInt32(Int32(61)), (Int16(-74)&127..Int16(-95)&127:92|1), ((UInt8(87)&127..=UInt8(54)&127:81|1), Float64(Float32(Float32(9.0))), false), UInt8(17));
    let var3619 : ?Range<UInt8> = ([(-41.0), (-107.0), Float64(Float64((-4.0))), Float64(Float32(-112.0)), 16.0, Float64(Float32(Float32(66.0))), Float64(Float32(Float32(102.0))), (-113.0), 5.0, (-105.0)] as Range<UInt8>);
    (Option<((UInt16, Range<Int16>, Range<UInt64>, Range<Int8>, UInt32, Range<Int16>, (Range<UInt8>, Float64, Bool), UInt8), Range<UInt8>, Bool, Range<UInt64>)>.None ?? (if (false) { (UInt16(91), (Int16(90)&127..=Int16(75)&127:(109|1)), var3570, (Int8(-19)&127..Int8(36)&127:(-20)|1), var125, var2449, (var3577, var2879, true), UInt8(70)) } else { var3583 } , (var3619 ?? (UInt8(118)&127..UInt8(246)&127:((-26)|1))), var267, var3645))
}


public func func3207(param3208 : Array<Option<Bool>>) : Int16 { // block id: 3209
    let var3716 : Int64 = (-35);
    let var3987 : Enum1029 = Enum1029.enumValue3840(((UInt8(171)&127..=UInt8(108)&127:(-118)|1) as Array<Bool>), (UInt8(176)&127..=UInt8(231)&127:70|1), ('e' as (Range<Int32>, (Range<Int16>, Bool, (UInt32, (Bool, Unit, Int16), Option<Bool>, UInt64, Rune, Int64), Range<Int64>))));
    func func3226(param3227 : Range<UInt16>, param3228 : UInt32, param3229 : Range<UInt8>) : UInt16 { // block id: 3230
        var var3648 : (Int64) -> ((UInt16, Range<Int16>, Range<UInt64>, Range<Int8>, UInt32, Range<Int16>, (Range<UInt8>, Float64, Bool), UInt8), Range<UInt8>, Bool, Range<UInt64>) = func3551;
        (match ([true, true, false, false, true, true, true, false, false, false]) {
            case caseVar3655 => 
                var2449;
                Option<Int64>.None
            
            case caseVar3661 => 
                var267 &&= true;
                var796;
                if (true) { var1939 } else { var1939 } 
            
            case caseVar3673 => 
                if (var134) { var1939 } else { Option<Int64>.Some((-125)) } 
            
            case _ => 
                if (false) { Option<Bool>.Some(var267) } else { var289 } ;
                Option<Int64>.Some(120)
            
        } ?? try { // block id: 3690
            var43
        } catch (e: Exception) { // block id: 3692
            var2642;
            var796;
            115 * var2439
        })|>(var3648~>func3354);
        let var3768 : ?Int32 = ((Int64(UInt32(43))&127..=115&127:(Int64(Int16(Int8(-108)))|1)) as Int32);
        var var3780 : Unit = ();
        let var3807 : ?Class6 = Option<Class6>.None;
        match (match ([(Int16(-5)&127..=var851&127:(var43|1)), (Int16(-73)&127..=Int16(-13)&127:117|1), (Int16(-37)&127..Int16(106)&127:44|1), (Int16(96)&127..Int16(78)&127:(var2439|1)), (Int16(87)&127..Int16(59)&127:(-58)|1), (Int16(-15)&127..=var851&127:(var3716|1)), (Int16(14)&127..Int16(-30)&127:(-83)|1), var2449, var2449, var1572]) {
                case _ : Range<UInt16> => 
                    Class2096(namedParam3400 : Option<Int32>.Some(Int32(-47)), namedParam3401 : var1408, namedParam3402 : (Int8(-5)&127..=Int8(1)&127:(var43|1)), namedParam3403 : ((-12), UInt8(177), Float32(-128.0), var2439, var289, 123.0, UInt8(246)))
                
                case _ : Unit => 
                    Class2096()
                
                case caseVar3747 => 
                    var2594;
                    var3751
                
                case _ => 
                    if (var140) { var3751 } else { var3751 } 
                
            }) {
            case _ => 
                var2493;
                let var3765 : Bool = false;
                if (var3765) { var3768 } else { Option<Int32>.Some(var1387) } ;
                var3780
            
            case _ => 
                var var3787 : UInt64 = UInt64(UInt64(UInt64(Int32(-10))));
                var3787 /= ((UInt64(243)) | 1)
            
            case caseVar3795 : Int32 => 
                var796
            
            case caseVar3800 => 
                if (false) { var1783 } else { [103.0, 71.0, 30.0, (-94.0), (-20.0), (-21.0), 82.0, 33.0, (-119.0), 50.0] } ;
                var3807;
                ()
            
            case _ => 
                let var3813 : ((UInt16, Range<Int16>, Range<UInt64>, Range<Int8>, UInt32, Range<Int16>, (Range<UInt8>, Float64, Bool), UInt8), Range<UInt8>, Bool, Range<UInt64>) = ((UInt16(147), (Int16(-117)&127..Int16(2)&127:(-50)|1), (UInt64(99)&127..=UInt64(143)&127:(Int64(1)|1)), (Int8(Int8(56))&127..Int8(39)&127:(Int64(UInt32(171))|1)), UInt32(132), (Int16(14)&127..=Int16(-93)&127:(-64)|1), ((UInt8(72)&127..=UInt8(187)&127:(6|1)), Float64(Float32(95.0)), (Enum1029.enumValue3840(Option<Array<Bool>>.Some([true, false, false, true, false, false, true, true, false, false]), (UInt8(59)&127..=UInt8(27)&127:111|1), Option<(Range<Int32>, (Range<Int16>, Bool, (UInt32, (Bool, Unit, Int16), Option<Bool>, UInt64, Rune, Int64), Range<Int64>))>.Some(((Int32(-40)&127..=Int32(-94)&127:(103|1)), ((Int16(116)&127..Int16(-33)&127:(-40)|1), false, (UInt32(208), (false, (), Int16(78)), Option<Bool>.Some(true), UInt64(213), 'T', (-121)), (25&127..(-95)&127:(89|1)))))) is Option<Class6>)), UInt8(Int8(-127))), (UInt8(UInt8(200))&127..=UInt8(246)&127:(100|1)), false, (UInt64(161)&127..=UInt64(50)&127:43|1));
                var3813;
                var796
            
        };
        var var3897 : UInt64 = UInt64((-18));
        var var3945 : Unit = ();
        var var3964 : Int64 = 62;
        if (var134) { // block id: 3894
            var3897 -= UInt64(117);
            var3215
        } else if (false) { // block id: 3903
            [false, var134, true, var134, false, var267, true, var267, false, var134];
            ();
            UInt16(70)
        } else { // block id: 3917
            if (false) { (var949, (var267, var2594, Int16(-80)), (), [false, true, false, true, true, false, false, false, true, false], [(Int16(-123)&127..=Int16(97)&127:61|1), (Int16(-115)&127..=Int16(2)&127:38|1), (Int16(38)&127..Int16(122)&127:(-25)|1), (Int16(-114)&127..Int16(84)&127:(-12)|1), (Int16(42)&127..Int16(23)&127:(-32)|1), (Int16(42)&127..Int16(94)&127:(-122)|1), (Int16(101)&127..=Int16(29)&127:(-94)|1), (Int16(47)&127..Int16(72)&127:88|1), (Int16(30)&127..Int16(-108)&127:92|1), (Int16(34)&127..Int16(-64)&127:65|1)]) } else { (Class2096(namedParam3400 : Option<Int32>.Some(var1387), namedParam3401 : var1408, namedParam3402 : var2221, namedParam3403 : ((-53), UInt8(200), Float32(-37.0), 18, var289, var305, var3434)), var25, var3945, [var267, var134, var267, var267, true, var140, false, true, false, true], [(Int16(54)&127..Int16(-124)&127:4|1), (Int16(-3)&127..=Int16(-22)&127:(var3964|1)), (Int16(-28)&127..Int16(-82)&127:(-14)|1), (Int16(-124)&127..var3970&127:(var3964|1)), var2449, var1572, (var851&127..=var851&127:(1|1)), (Int16(115)&127..Int16(119)&127:(-49)|1), (Int16(-7)&127..=Int16(36)&127:(-96)|1), var2449]) } ;
            var2110
        } >> ((if ((var3987 is Array<Option<Bool>>)) { // block id: 3994
            var3996;
            var1783;
            var2110 << ((var3215) & 7)
        } else { // block id: 4032
            Option<Class6>.None;
            UInt16(93) ^ UInt16(162)
        }) & 7)
    }
;
    let var4044 : ?UInt32 = Option<UInt32>.Some(UInt32(UInt32(85)));
    func func3222(param3223 : Range<UInt16>) : UInt16 { // block id: 3224
        func3226(param3223, (var4044 ?? (var4044 ?? var125)), (UInt8(var2523)&127..UInt8(253)&127:(if (var140) { // block id: 4057
            var125 |= var125;
            58
        } else { // block id: 4062
            var4064;
            ();
            (-113)
        }|1)))
    }
;
    var loopTimeVar4074 : Range<UInt64> = (UInt64(UInt64(UInt64((-91))))&127..UInt64(UInt64(UInt16(240)))&127:(Int64(Int8(UInt8(28)))|1));
    for (i in loopTimeVar4074 where (UInt16(157) ^ var3215) <= func3222((UInt16(223)&127..var3215&127:(67|1)))) {

    };
    Int16(107)
}

func func2634(param2635 : Option<Unit>) : Int16 { // block id: 2636
    var loopTimeVar2653 : Int64 = 0;
    do {
        loopTimeVar2653++;
        (var2642 as Bool)
    } while ((true) && loopTimeVar2653 < 100 ) ;
    var var4088 : (Array<Option<Bool>>) -> Int16 = func3207;
    let var4110 : Array<Option<Bool>> = Array<Option<Bool>>(10){ i => Option<Bool>.Some(false) };
    Int16((match (var25) {
        case (_ : Range<UInt64>,_ : UInt32,_) => 
            if (var140) { var2642 } else { (Int32(-39)&127..=Int32(-70)&127:(-67)|1) } ;
            if (false) { var3141 } else { var546 } 
        
        case (caseVar4105 : Array<Option<Bool>>,_ : Int32,caseVar4106) => 
            Option<Unit>.None;
            var4110
        
        case _ => 
            ();
            if (false) { var4110 } else { var4162 } 
        
        case _ => 
            (UInt16(181)&127..UInt16(47)&127:(-39)|1);
            var1194 *= var1387;
            var3141
        
    }|>(var4088~>func2805)))
}







public func func1719(param1720 : (UInt16, Range<Int16>, Range<UInt64>, Range<Int8>, UInt32, Range<Int16>, (Range<UInt8>, Float64, Bool), UInt8)) : Range<UInt32> { // block id: 1721
    let var4332 : ?(UInt32, (Bool, Unit, Int16), Option<Bool>, UInt64, Rune, Int64) = ("Wcw(Z2L!K," as (UInt32, (Bool, Unit, Int16), Option<Bool>, UInt64, Rune, Int64));
    func func2092(param2093 : String) : (Range<Int32>, Int16, Range<UInt32>, Int8, Option<Class6>) { // block id: 2094
        func825().func2584((var4332 ?? (UInt32(6), var25, Option<Bool>.None, UInt64(183), 'w', var43)), optionalParam2586 : try { // block id: 4343
            let var4345 : UInt64 = UInt64((-40));
            var4345
        } finally { // block id: 4348
            var var4350 : UInt64 = UInt64(37);
            var4350
        }, namedParam2591 : (Option<(Range<Int32>, (Range<Int16>, Bool, (UInt32, (Bool, Unit, Int16), Option<Bool>, UInt64, Rune, Int64), Range<Int64>))>.None ?? var3295))
    }
;
    let var4356 : String = "p=8yx=jQc.";
    let var4403 : (Class6, (Bool, Unit, Int16), Unit, Array<Bool>, Array<Range<Int16>>) = (Class2096(), (true, (), Int16(UInt8(164))), (), [false, true, true, true, (Option<Array<Unit>>.Some([(), (), (), (), (), (), (), (), (), ()]) is Array<Unit>), true, true, true, true, (((UInt16(87), (Int16(39)&127..Int16(120)&127:(-38)|1), (UInt64(54)&127..UInt64(60)&127:((-59)|1)), (Int8(-7)&127..=Int8(-126)&127:(-111)|1), UInt32(214), (Int16(126)&127..Int16(-124)&127:(-81)|1), ((UInt8(6)&127..=UInt8(101)&127:(-118)|1), (-99.0), false), UInt8(95)), (UInt8(207)&127..=UInt8(233)&127:((-9)|1)), false, (UInt64(244)&127..=UInt64(198)&127:80|1)) is UInt16)], [(Int16(-42)&127..=Int16(-18)&127:107|1), (Int16(63)&127..=Int16(-76)&127:(-77)|1), (Int16(97)&127..=Int16(39)&127:97|1), (Int16(72)&127..Int16(-8)&127:(-81)|1), (Int16(43)&127..Int16(-37)&127:(-101)|1), (Int16(83)&127..=Int16(-20)&127:111|1), (Int16(117)&127..=Int16(61)&127:101|1), (Int16(-83)&127..=Int16(116)&127:(-60)|1), (Int16(-92)&127..=Int16(108)&127:(-6)|1), (Int16(-98)&127..=Int16(75)&127:(-38)|1)]);
    let var4455 : Option<String> = (Option<(Range<Int32>, (Range<Int16>, Bool, (UInt32, (Bool, Unit, Int16), Option<Bool>, UInt64, Rune, Int64), Range<Int64>))>.None as String);
    let var4508 : UInt64 = UInt64(Int16(UInt16(80)));
    func func2006(namedParam2007 ! : UInt16) : Class6 { // block id: 2008
        let var4361 : ?(Range<Int32>, Int16, Range<UInt32>, Int8, Option<Class6>) = Option<(Range<Int32>, Int16, Range<UInt32>, Int8, Option<Class6>)>.None;
        let var4465 : ?UInt64 = ([(Int32(Int16(85)) as Int64), (([Option<Int64>.Some(70), Option<Int64>.None, Option<Int64>.None, Option<Int64>.Some((-5)), Option<Int64>.Some(48), Option<Int64>.Some(56), Option<Int64>.None, Option<Int64>.Some((-21)), Option<Int64>.None, Option<Int64>.None] as UInt32) as Int64), Option<Int64>.Some(Int64(Int32(-116))), ((Int8(-107)&127..=Int8(37)&127:(-79)|1) as Int64), Option<Int64>.None, Option<Int64>.None, ((Int32(-6)&127..Int32(21)&127:((-117)|1)) as Int64), Option<Int64>.None, Option<Int64>.Some(Int64(UInt64(240))), Option<Int64>.Some(109)] as UInt64);
        func func2012(namedParam2013 ! : Class6, namedParam2014 ! : Option<Class6>, namedParam2015 ! : UInt64) : (Class6, (Bool, Unit, Int16), Unit, Array<Bool>, Array<Range<Int16>>) { // block id: 2016
            try (resource = Class6()) { // block id: 2018
                var var2024 : UInt64 = UInt64(UInt8(141));
                let var2029 : Array<Option<Bool>> = [(UInt16(192) as Bool), Option<Bool>.Some((UInt64(Int8(-55)) is Range<UInt16>)), (Option<Array<Bool>>.None as Bool), Option<Bool>.Some(((Int8(112)&127..Int8(67)&127:121|1) is () -> (Int64, UInt8, Float32, Int64, Option<Bool>, Float64, UInt8))), (UInt8(210) as Bool), ((Option<Class6>.Some(Class6()) as Bool) as Bool), Option<Bool>.Some((Enum1029.defaultValue is Option<Float64>)), Option<Bool>.None, Option<Bool>.None, Option<Bool>.None];
                var loopTimeVar2055 : Int64 = 0;
                do {
                    loopTimeVar2055++;
                    var2024 >>= ((namedParam2015) & 7);
                    var2029
                } while ((var134) && loopTimeVar2055 < 100 ) ;
                (Option<Unit>.Some(var796) ?? ())
            } finally { // block id: 2060

            };
            try { // block id: 2062
                [Option<Bool>.Some(var140), var289, var289, Option<Bool>.None, Option<Bool>.None, var289, var289, Option<Bool>.Some(false), Option<Bool>.None, Option<Bool>.None];
                match (Enum1029.defaultValue) {
                    case defaultValue => 
                        var1215
                    
                    case defaultValue => 
                        ();
                        Option<Bool>.Some(false)
                    
                    case _ => 
                        Option<Bool>.None
                    
                };
                func2092(var4356)
            } catch (_) { // block id: 4358
                let var4364 : (Range<Int32>, Int16, Range<UInt32>, Int8, Option<Class6>) = ((Int32(-64)&127..Int32(-76)&127:(-97)|1), Int16(69), (UInt32(73)&127..=UInt32(220)&127:(-76)|1), Int8(Int8(UInt8(24))), Option<Class6>.Some(Class6()));
                (var4361 ?? var4364)
            };
            try { // block id: 4375
                var loopTimeVar4396 : Int64 = 0;
                do {
                    loopTimeVar4396++;
                    if (var140) { var1827 } else { var4383 } 
                } while ((var267) && loopTimeVar4396 < 100 ) ;
                var loopTimeVar4401 : Int64 = 0;
                do {
                    loopTimeVar4401++;

                } while ((var134) && loopTimeVar4401 < 100 ) ;
                var4403
            } finally { // block id: 4448
                (var4455 ?? var4356);
                (var4465 ?? var4508);
                (Class2096(namedParam4515 : Option<(UInt32, (Bool, Unit, Int16), Option<Bool>, UInt64, Rune, Int64)>.Some((UInt32(67), (false, (), var851), Option<Bool>.Some(false), var4778, 'm', var43))), var25, (), var336, [(Int16(83)&127..=Int16(-70)&127:(-103)|1), (Int16(121)&127..=Int16(77)&127:13|1), (Int16(-86)&127..Int16(-31)&127:(-26)|1), (Int16(86)&127..=Int16(-79)&127:38|1), (Int16(120)&127..Int16(115)&127:(-51)|1), (Int16(-24)&127..Int16(82)&127:120|1), (Int16(-28)&127..=Int16(-9)&127:(-21)|1), (Int16(17)&127..Int16(-13)&127:(-5)|1), (Int16(-3)&127..=Int16(-89)&127:113|1), (Int16(125)&127..Int16(110)&127:28|1)])
            }
        }
;
        let var4853 : ?Class6 = Option<Class6>.None;
        func2012(namedParam2013 : try { // block id: 4787
            var var4790 : ?(UInt32, (Bool, Unit, Int16), Option<Bool>, UInt64, Rune, Int64) = ((Int64(Int8(-18)), UInt8(44), Float32(12.0), 33, (((UInt32(62)&127..UInt32(115)&127:(94|1)) as Option<Unit>) as Bool), 10.0, UInt8(Int8(59))) as (UInt32, (Bool, Unit, Int16), Option<Bool>, UInt64, Rune, Int64));
            Class2096(namedParam4515 : var4790)
        } catch (e: Exception) { // block id: 4807
            Option<Bool>.Some(false);
            UInt32(211) & var4813;
            var949
        } finally { // block id: 4819
            Option<Float64>.Some(var2879);
            ();
            if (true) { var949 } else { var949 } 
        }, namedParam2014 : if (true) { Option<Class6>.Some(Class2096(namedParam3400 : var4832, namedParam3401 : ((-75)&127..=var43&127:(53|1)), namedParam3402 : (var2523&127..=var2523&127:(var43|1)), namedParam3403 : (23, UInt8(5), var716, 125, Option<Bool>.Some(false), var2879, UInt8(144)))) } else { var4853 } , namedParam2015 : UInt64(UInt16(195)))[0]
    }
;
    func func1723(namedParam1724 ! : Array<UInt8>, optionalParam1725 ! : (Int64, UInt8, Float32, Int64, Option<Bool>, Float64, UInt8) = (Int64(UInt8(Int8(UInt8(84)))), UInt8(UInt8(151)), Float32(Float32(Float32(Float32(22.0)))), 3, Option<Bool>.Some(true), (-63.0), UInt8(158)), optionalParam1742 ! : Class6 = Class6()) : Range<UInt64> { // block id: 1744
        if (true) { (Int64(var2110)|>{ lambdaParameter2000 : Int64 => func2006(namedParam2007 : var2110).var4860[3] }) } else { (var4508&127..=UInt64(131) & var4778&127:(var2439 - var43|1)) } 
    }
;
    var var4937 : Range<Int8> = (Int8(Int8(-58))&127..Int8(UInt8(UInt8(99)))&127:(47|1));
    func1723(namedParam1724 : match ((var4910 ?? Enum274.enumValue597)) {
        case defaultValue => 
            var4241;
            var2594;
            if (true) { [UInt8(236), UInt8(217), UInt8(141), UInt8(84), UInt8(245), UInt8(137), UInt8(57), UInt8(166), UInt8(196), UInt8(12)] } else { [UInt8(202), UInt8(126), UInt8(184), UInt8(46), UInt8(188), UInt8(150), UInt8(48), UInt8(44), UInt8(242), UInt8(47)] } 
        
        case _ => 
            [UInt8(45), UInt8(18), UInt8(111), UInt8(205), UInt8(61), UInt8(61), UInt8(60), UInt8(62), UInt8(134), UInt8(103)]
        
    }, optionalParam1742 : try { // block id: 4927
        if (var267) { Class6() } else { var949 } 
    } catch (e: Exception) { // block id: 4932
        Class2096(namedParam3400 : var4832, namedParam3401 : (45&127..(-45)&127:(-48)|1), namedParam3402 : var4937, namedParam3403 : (var2439, var3434, var716, (-96), Option<Bool>.None, 112.0, var3434))
    });
    let var4960 : Unit = ();
    var var4969 : Int64 = 8;
    let var5100 : UInt16 = UInt16(Int16(29));
    (match ((var125, (true, var4960, var851), var289, var4965, var40, var4969)) {
        case (caseVar4973 : UInt8,caseVar4974 : Option<Int64>,_,_,caseVar4975,_) => 
            let var4980 : ?UInt64 = (((Int16(-81)&127..Int16(-15)&127:16|1), false, (UInt32(148), (false, (), Int16(82)), ((UInt8(199)&127..UInt8(71)&127:((-123)|1)) as Bool), UInt64(12), 'e', 65), (86&127..=(-10)&127:41|1)) as UInt64);
            if (true) { var4980 } else { Option<UInt64>.Some(var4965) } ;
            -UInt32(192)
        
        case (_,_ : Array<Option<Bool>>,_,_,_ : (Class6, (Bool, Unit, Int16), Unit, Array<Bool>, Array<Range<Int16>>),_) => 
            var4960;
            UInt32(168)
        
        case caseVar5011 : Range<UInt16> => 
            var4813 & UInt32(154)
        
        case _ => 
            var796;
            UInt32(120)
        
        case _ => 
            UInt32(26)
        
    }&127..((Option<Option<UInt32>>.None ?? Option<UInt32>.Some(var125)) ?? match (Option<Int32>.None) {
        case caseVar5041 : Option<Bool> => 
            ();
            UInt32(226) + var4813
        
        case caseVar5049 : Int32 => 
            var4813 |= var4813;
            -var125
        
        case _ => 
            var var5061 : Int16 = Int16(65);
            Int16(-125) & var5061;
            [(Int16(-79)&127..var5061&127:((-20)|1)), var2449, var1572, (Int16(-38)&127..=var144&127:(124|1)), (Int16(-8)&127..Int16(111)&127:42|1), var1572, var2449, (Int16(-5)&127..=Int16(-48)&127:21|1), (Int16(-126)&127..Int16(-18)&127:87|1), var1572];
            UInt32(131)
        
    })&127:(Int64(try { // block id: 5083
        var5085;
        UInt16(202)
    } catch (e: Exception) { // block id: 5088
        var3434 <<= ((UInt8(32)) & 7);
        Option<String>.Some(var4356);
        var3215
    } finally { // block id: 5095
        var4965 /= ((UInt64(222)) | 1);
        var5100
    })|1))
}

func func1600(optionalParam1601 ! : Int64 = (-9), optionalParam1603 ! : (Bool, Unit, Int16) = (true, (), Int16(Int16(-57)))) : Class6 { // block id: 1609
    var var1620 : Array<Bool> = [(() is (Int64, UInt8, Float32, Int64, Option<Bool>, Float64, UInt8)), true, (((-43.0) as Int32) is Option<Bool>), false, ((UInt8(33)&127..UInt8(249)&127:(-23)|1) is (Bool, Unit, Int16)), false, false, true, ((Int64(UInt8(47)), UInt8(Int8(-53)), Float32(-18.0), Int64(UInt16(69)), Option<Bool>.Some(false), Float64(Float32(-116.0)), UInt8(50)) is Int64), true];
    let var5112 : (Range<UInt8>, Float64, Bool) = ((UInt8(147)&127..=UInt8(22)&127:5|1), Float64(Float64(Float64(Float32(-15.0)))), false);
    func func1712(param1713 : Option<Class6>, namedParam1714 ! : Option<(Range<Int32>, Int16, Range<UInt32>, Int8, Option<Class6>)>) : Range<Int32> { // block id: 1715
        try (resource = Class6()) { // block id: 1717
            (var2110, var2449, (UInt64(0)&127..UInt64(70)&127:(-5)|1), var2221, UInt32(41), (Int16(-30)&127..Int16(-20)&127:(-21)|1), var5112, UInt8(242))|>func1719;
            var796;
            var loopTimeVar5128 : Range<UInt64> = (UInt64(Int8(-85))&127..UInt64(61)&127:(42|1));
            for (i in loopTimeVar5128 where true) {
                ();
                Option<(Range<Int32>, (Range<Int16>, Bool, (UInt32, (Bool, Unit, Int16), Option<Bool>, UInt64, Rune, Int64), Range<Int64>))>.Some(var3295)
            }
        } catch (e: Exception) { // block id: 5134
            var var5137 : Float32 = Float32(Float32(Float32(-13.0)));
            var5137 -= Float32(40.0)
        } finally { // block id: 5142
            try (resource = Class6()) { // block id: 5144

            } catch (_) { // block id: 5145
                var var5147 : Unit = ();
                var5147;
                var2594
            } finally { // block id: 5150

            };
            var796;
            var2594
        };
        var796;
        var var5160 : ?Range<UInt8> = (Option<String>.None as Range<UInt8>);
        let var5191 : Unit = ();
        (Int32(114)&127..Int32(try { // block id: 5158
            var5160;
            var4383;
            Int32(-100)
        } catch (e: Exception) { // block id: 5165
            var var5168 : Float64 = 23.0;
            var5168 = 64.0;
            Int32(-10)
        } finally { // block id: 5172
            var1387
        })&127:(if ((var4064 is (Range<Int64>, (String, Range<Int32>, UInt8, (Bool, Unit, Int16), (Int64, UInt8, Float32, Int64, Option<Bool>, Float64, UInt8), Range<Int16>, Int64, Range<Int32>, UInt32)) -> Int8)) { // block id: 5177
            (-123)
        } else if ((Option<Bool>.Some(var267) ?? var140)) { // block id: 5183
            Option<Array<Unit>>.Some([(), (), var2594, var2594, var5191, (), var5191, var2594, (), var2594]);
            var851 /= ((var144) | 1);
            optionalParam1601
        } else { // block id: 5202
            var5191;
            Option<Int64>.None;
            (-13) & (-110)
        }|1))
    }
;
    let var5210 : ?UInt32 = (UInt64(Int8(-13)) as UInt32);
    let var5240 : ?Class6 = Option<Class6>.Some(Class2096(namedParam3400 : Option<Int32>.None, namedParam3401 : ((-72)&127..42&127:(-10)|1), namedParam3402 : (Int8(-73)&127..=Int8(-36)&127:20|1), namedParam3403 : (40, UInt8(78), Float32(Float32(-104.0)), Int64(Int16(-58)), ((Int8(-44)&127..Int8(-26)&127:(28|1)) as Bool), Float64(Float32(39.0)), UInt8(UInt8(39)))));
    let var5280 : ?Class6 = (Option<Range<UInt8>>.Some((UInt8(Int8(-95))&127..UInt8(Int8(-96))&127:(Int64(UInt8(177))|1))) as Class6);
    func func1655(optionalParam1656 ! : (Int64, UInt8, Float32, Int64, Option<Bool>, Float64, UInt8) = (Int64(UInt8(Int8(Int8(-23)))), UInt8(251), Float32(74.0), Int64(Int16(Int16(20))), ((Int8(-11)&127..=Int8(-35)&127:115|1) as Bool), Float64(Float32(66.0)), UInt8(Int8(64))), optionalParam1673 ! : Int8 = Int8(121), optionalParam1675 ! : Option<Float64> = (((-93), UInt8(Int8(9)), Float32(60.0), Int64(Int32(UInt16(99))), (((UInt8(229)&127..UInt8(76)&127:((-27)|1)), (-18.0), false) as Bool), (-87.0), UInt8(156)) as Float64)) : Class6 { // block id: 1695
        var var1705 : (Range<Int32>) -> UInt64 = { lambdaParameter1708 : Range<Int32> => UInt64(11) };
        var var5292 : ?(Range<Int32>, Int16, Range<UInt32>, Int8, Option<Class6>) = Option<(Range<Int32>, Int16, Range<UInt32>, Int8, Option<Class6>)>.Some(((Int32(UInt8(254))&127..=Int32(UInt16(206))&127:(Int64(UInt8(1))|1)), Int16(Int8(UInt8(160))), (UInt32(150)&127..UInt32(68)&127:(-50)|1), Int8(31), Option<Class6>.Some(Class2096(namedParam3400 : Option<Int32>.None, namedParam3401 : ((-82)&127..(-5)&127:(106|1)), namedParam3402 : (Int8(52)&127..=Int8(34)&127:(5|1)), namedParam3403 : ((-5), UInt8(76), Float32(-65.0), 29, Option<Bool>.None, (-13.0), UInt8(39))))));
        func1712(match (var5210) {
            case _ : Array<Float64> => 
                Option<Class6>.Some(Class2096(namedParam3400 : Option<Int32>.Some(var1194), namedParam3401 : var1408, namedParam3402 : (Int8(0)&127..Int8(-97)&127:(-16)|1), namedParam3403 : var50))
            
            case _ => 
                var796;
                Option<Class6>.None
            
            case _ => 
                var5233;
                if (var134) { Option<Class6>.Some(var949) } else { var5240 } 
            
            case caseVar5264 => 
                ();
                var796;
                if (var5270) { var5240 } else { var5240 } 
            
            case _ => 
                var2594;
                if (var5270) { var5280 } else { Option<Class6>.None } 
            
        }, namedParam1714 : var5292)|>var1705;
        Class2096()
    }
;
    if ((Option<Array<Bool>>.Some(var336) ?? var1620)[1]) { (if ((var1215 ?? var140)) { func1655(optionalParam1656 : (106, var3434, Float32(-68.0), var43, Option<Bool>.Some(var267), var2879, UInt8(212)), optionalParam1673 : var2523, optionalParam1675 : var270) } else { match (Option<Range<UInt64>>.None) {
        case _ => 
            var5344 += UInt16(133);
            if (var5270) { (UInt16(114)&127..=UInt16(7)&127:((-99)|1)) } else { var3362 } ;
            Class2096(namedParam3400 : Option<Int32>.Some(var1194), namedParam3401 : (95&127..(-121)&127:15|1), namedParam3402 : var2221, namedParam3403 : (59, UInt8(175), var716, optionalParam1601, Option<Bool>.None, 93.0, UInt8(159)))
        
    } } ) } else { try { // block id: 5369
        var949
    } finally { // block id: 5371
        if (var134) { (UInt8(175)&127..=UInt8(38)&127:(94|1)) } else { var2464 } ;
        var var5381 : Float64 = Float64(Float32(60.0));
        var5381 *= 27.0;
        var949
    } } 
}

public func func1361(namedParam1362 ! : UInt8) : Option<Class6> { // block id: 1363
    var var1427 : (Range<Int32>, Int16, Range<UInt32>, Int8, Option<Class6>) = ((Int32(-108)&127..=Int32(110)&127:96|1), Int16(99), (UInt32(43)&127..UInt32(108)&127:70|1), Int8(112), (Int32(105) as Class6));
    let var1440 : ?Class6 = (((Int16(54)&127..=Int16(-119)&127:(-82)|1), false, (UInt32(164), (false, (), Int16(53)), Option<Bool>.Some(false), UInt64(13), 'x', 122), ((-26)&127..26&127:104|1)) as Class6);
    var var1462 : Range<Int32> = (Int32(-86)&127..=Int32(96)&127:(-64)|1);
    let var1523 : Range<Int32> = (Int32(Int8(Int8(Int8(85))))&127..=Int32(48)&127:(Int64(Int8(Int8(-113)))|1));
    let var1535 : Range<UInt32> = (UInt32(101)&127..=UInt32(8)&127:98|1);
    let var1561 : Int8 = Int8(-66);
    let var5392 : ?Unit = (((Class6(), (false, (), Int16(-29)), (), [true, true, false, false, true, false, false, false, true, false], [(Int16(-122)&127..=Int16(-82)&127:(-88)|1), (Int16(-22)&127..Int16(-1)&127:(-4)|1), (Int16(18)&127..Int16(103)&127:(-82)|1), (Int16(-36)&127..Int16(-20)&127:118|1), (Int16(39)&127..Int16(40)&127:43|1), (Int16(74)&127..Int16(-96)&127:120|1), (Int16(47)&127..=Int16(61)&127:(-101)|1), (Int16(-102)&127..=Int16(-70)&127:126|1), (Int16(38)&127..=Int16(111)&127:53|1), (Int16(2)&127..Int16(-59)&127:103|1)]) as Unit) as Unit);
    try { // block id: 1365
        Option<Unit>.None.getOrThrow();
        var loopTimeVar1377 : Int64 = 0;
        do {
            loopTimeVar1377++;
            var796
        } while ((false) && loopTimeVar1377 < 100 ) ;
        var var1379 : ?Class6 = Option<Class6>.None;
        var1379
    } catch (e: Exception) { // block id: 1381
        ();
        let var1422 : ?(Range<Int32>, Int16, Range<UInt32>, Int8, Option<Class6>) = (Option<Int64>.None as (Range<Int32>, Int16, Range<UInt32>, Int8, Option<Class6>));
        match (((var1387&127..Int32(124)&127:(58|1)), ((Int16(1)&127..Int16(-36)&127:(40|1)), false, (var125, (var267, var796, var851), var289, UInt64(143), var40, var43), var1408))) {
            case (_,caseVar1412 : (Range<Int32>, (Range<Int16>, Bool, (UInt32, (Bool, Unit, Int16), Option<Bool>, UInt64, Rune, Int64), Range<Int64>))) => 
                var851++;
                var125
            
            case _ => 
                if (true) { var1422 } else { Option<(Range<Int32>, Int16, Range<UInt32>, Int8, Option<Class6>)>.Some(var1427) } ;
                var1215;
                var125 ** (var125 & 3)
            
        };
        var1440
    } finally { // block id: 1457
        var var1495 : Unit = ();
        match (("""
IGoNG
GQ1.J
""", var1462, UInt8(95), (var267, (), var851), (var43, namedParam1362, Float32(-6.0), var43, Option<Bool>.None, 21.0, UInt8(10)), (var144&127..Int16(20)&127:(var43|1)), 110, (Int32(100)&127..Int32(-31)&127:33|1), UInt32(55))) {
            case (_ : Enum274,_ : Option<Class6>,caseVar1486 : Bool,(caseVar1487 : Bool,caseVar1488,caseVar1489),caseVar1490 : Array<Option<Bool>>,caseVar1491 : Int16,_,_,caseVar1492) => 
                var1495
            
            case _ => 
                (var125&127..var125&127:((-112)|1));
                var43 /= (((-59)) | 1)
            
        };
        let var1542 : (Range<Int32>, Int16, Range<UInt32>, Int8, Option<Class6>) = ((Int32(15)&127..=Int32(86)&127:0|1), Int16(99), (UInt32(Int32(57))&127..UInt32(UInt16(Int16(-101)))&127:((-65)|1)), Int8(45), (((-21)&127..77&127:(-82)|1) as Class6));
        let var5410 : Bool = (([(Option<UInt32>.None as Bool), Option<Bool>.None, (Option<(Range<Int32>, (Range<Int16>, Bool, (UInt32, (Bool, Unit, Int16), Option<Bool>, UInt64, Rune, Int64), Range<Int64>))>.Some(((Int32(38)&127..Int32(-25)&127:(44|1)), ((Int16(-37)&127..Int16(-39)&127:56|1), false, (UInt32(24), (false, (), Int16(-36)), Option<Bool>.None, UInt64(11), 'q', 80), (115&127..=24&127:(-86)|1)))) as Bool), (Option<Int32>.Some(Int32(31)) as Bool), Option<Bool>.Some(false), (((UInt8(21)&127..=UInt8(63)&127:25|1), (-45.0), true) as Bool), (((Int32(10)&127..=Int32(-84)&127:((-39)|1)), ((Int16(54)&127..Int16(20)&127:(-67)|1), true, (UInt32(125), (false, (), Int16(-23)), Option<Bool>.Some(true), UInt64(201), 'h', 57), ((-3)&127..=73&127:(42|1)))) as Bool), Option<Bool>.None, (Float32(-37.0) as Bool), (((Int16(-116)&127..Int16(40)&127:((-22)|1)), true, (UInt32(246), (false, (), Int16(52)), Option<Bool>.Some(false), UInt64(148), 't', (-55)), ((-37)&127..=(-104)&127:((-105)|1))) as Bool)] as ((UInt16, Range<Int16>, Range<UInt64>, Range<Int8>, UInt32, Range<Int16>, (Range<UInt8>, Float64, Bool), UInt8), Range<UInt8>, Bool, Range<UInt64>)) is Option<(Range<Int32>, (Range<Int16>, Bool, (UInt32, (Bool, Unit, Int16), Option<Bool>, UInt64, Rune, Int64), Range<Int64>))>);
        func func1507(param1508 : Option<Float64>) : Option<Unit> { // block id: 1509
            if (var267) { // block id: 1514
                var var1518 : ?Unit = Option<Unit>.None;
                if (false) { var1518 } else { var1518 } ;
                (var1523, Int16(-67), var1535, Int8(49), Option<Class6>.None)
            } else { // block id: 1539
                UInt64(94);
                var1542
            }[1] & Int16((Int8(-1) | var1561));
            let var1595 : Array<Range<Int16>> = [(Int16(-53)&127..=Int16(123)&127:(-65)|1), (Int16(0)&127..=Int16(115)&127:126|1), (Int16(70)&127..=Int16(-125)&127:(-96)|1), (Int16(-42)&127..Int16(16)&127:(-16)|1), (Int16(-86)&127..Int16(-80)&127:(-26)|1), (Int16(62)&127..Int16(-46)&127:27|1), (Int16(37)&127..=Int16(-28)&127:40|1), (Int16(2)&127..=Int16(-20)&127:50|1), (Int16(13)&127..=Int16(123)&127:65|1), (Int16(-7)&127..Int16(77)&127:36|1)];
            if ((Option<Bool>.Some(var140) ?? true)) { [var1572, (Int16(-9)&127..=var144&127:(var43|1)), var1572, var1572, (Int16(-14)&127..Int16(-13)&127:83|1), (Int16(49)&127..=Int16(-110)&127:18|1), var1572, (Int16(-78)&127..Int16(-2)&127:2|1), (Int16(24)&127..Int16(63)&127:(-69)|1), var1572] } else { try { // block id: 1587
                [(Int16(67)&127..=Int16(112)&127:86|1), (Int16(-46)&127..=Int16(37)&127:29|1), (Int16(46)&127..=Int16(-71)&127:(-90)|1), (Int16(-41)&127..Int16(27)&127:107|1), (Int16(-35)&127..Int16(89)&127:40|1), (Int16(-119)&127..Int16(-43)&127:110|1), (Int16(-9)&127..Int16(22)&127:(-105)|1), (Int16(104)&127..Int16(-62)&127:(-54)|1), (Int16(126)&127..Int16(12)&127:105|1), (Int16(124)&127..=Int16(24)&127:(-121)|1)]
            } finally { // block id: 1589
                var796;
                var140 &&= false;
                var1595
            } } [1];
            let var5517 : ?((UInt16, Range<Int16>, Range<UInt64>, Range<Int8>, UInt32, Range<Int16>, (Range<UInt8>, Float64, Bool), UInt8), Range<UInt8>, Bool, Range<UInt64>) = Option<((UInt16, Range<Int16>, Range<UInt64>, Range<Int8>, UInt32, Range<Int16>, (Range<UInt8>, Float64, Bool), UInt8), Range<UInt8>, Bool, Range<UInt64>)>.Some(((UInt16(Int16(-123)), (Int16(-128)&127..=Int16(-7)&127:76|1), (UInt64(239)&127..=UInt64(134)&127:24|1), (Int8(26)&127..Int8(-74)&127:((-74)|1)), UInt32(Int32(-33)), (Int16(-66)&127..=Int16(120)&127:((-1)|1)), ((UInt8(192)&127..=UInt8(15)&127:(51|1)), (-14.0), true), UInt8(75)), (UInt8(54)&127..=UInt8(193)&127:(-65)|1), false, (UInt64(106)&127..=UInt64(20)&127:(-124)|1)));
            match (func1600(optionalParam1601 : var2439)) {
                case caseVar5389 => 
                    var5392
                
                case _ => 
                    var4778;
                    if (var5410) { Option<(UInt32, (Bool, Unit, Int16), Option<Bool>, UInt64, Rune, Int64)>.Some((UInt32(28), (true, var2594, var851), var289, UInt64(238), 'K', var43)) } else { Option<(UInt32, (Bool, Unit, Int16), Option<Bool>, UInt64, Rune, Int64)>.None } ;
                    Option<Unit>.Some(())
                
                case _ => 
                    var851 >>= ((var3970) & 7);
                    var5517;
                    if (var5410) { Option<Unit>.None } else { Option<Unit>.None } 
                
            }
        }
;
        func1507(Option<Float64>.Some((-6.0)));
        let var5553 : ?Class6 = Option<Class6>.None;
        var5553
    }
}



func func943(param944 : Float64) : Bool { // block id: 945
    var var957 : ?Unit = Option<Unit>.None;
    let var1032 : Enum1029 = Enum1029.defaultValue;
    let var1049 : Unit = ();
    let var1098 : (String, Range<Int32>, UInt8, (Bool, Unit, Int16), (Int64, UInt8, Float32, Int64, Option<Bool>, Float64, UInt8), Range<Int16>, Int64, Range<Int32>, UInt32) = ("""
bn(c5
FPM<:
""", (Int32(UInt8(UInt8(148)))&127..Int32(Int32(61))&127:(16|1)), UInt8(UInt8(30)), (true, (), Int16(Int8(Int8(40)))), (98, UInt8(UInt8(Int8(72))), Float32(-122.0), 99, ((-100.0) as Bool), Float64(Float32(Float32(-33.0))), UInt8(UInt8(135))), (Int16(-74)&127..Int16(27)&127:(Int64(UInt64(Int16(36)))|1)), (-16), (Int32(-104)&127..=Int32(-26)&127:75|1), UInt32(Int16(118)));
    let var1276 : Rune = 'g';
    func func1092() : Class6 { // block id: 1093
        var loopTimeVar1259 : Range<UInt64> = (UInt64(Int64(UInt16(Int16(-96))))&127..UInt64(UInt16(UInt16(194)))&127:(Int64(65)|1));
        for (i in loopTimeVar1259 where match (var1098) {
            case (caseVar1142,_,_,caseVar1143,(caseVar1144 : Array<Option<Bool>>,caseVar1145 : Option<Class6>,caseVar1146 : Range<UInt32>,_ : Range<UInt64>,_,caseVar1147,_ : (UInt32, (Bool, Unit, Int16), Option<Bool>, UInt64, Rune, Int64)),_ : Range<Int64>,caseVar1148,caseVar1149 : Option<Bool>,caseVar1150) => 
                ();
                var851 >>= ((Int16(-7)) & 7);
                if (var140) { var336 } else { var336 } 
            
            case (caseVar1162 : Int8,_ : Option<Bool>,_,(_,caseVar1163 : UInt32,caseVar1164 : (Bool, Unit, Int16)),(caseVar1165,_,_ : UInt32,caseVar1166 : Enum1029,_ : Array<Option<Bool>>,caseVar1167,_ : Array<Bool>),_,_ : Int16,caseVar1168,caseVar1169 : Array<Bool>) => 
                caseVar1169
            
            case caseVar1174 => 
                let var1181 : Range<Int32> = (Int32(-21)&127..=Int32(68)&127:(-1)|1);
                if (true) { ("""
fMq-b
;%1yC
""", var1181, UInt8(187), (false, var1049, Int16(-6)), var50, (Int16(84)&127..=Int16(115)&127:(-88)|1), var43, (Int32(-4)&127..=var1194&127:(var43|1)), var125) } else { var1098 } ;
                [var267, false, false, true, var134, true, var134, false, var267, true]
            
            case _ => 
                [var1215, Option<Bool>.Some(true), var1215, var1215, Option<Bool>.None, var1215, Option<Bool>.None, Option<Bool>.Some(var134), Option<Bool>.None, var1215];
                if (var134) { var336 } else { [var134, var134, var134, false, var140, false, var134, var267, true, true] } 
            
            case _ => 
                ((UInt8(104)&127..UInt8(116)&127:44|1), 34.0, var140);
                var796;
                var336
            
        }[3]) {
            (Option<Int32>.None ?? Int32(17))
        };
        match (Option<Bool>.None) {
            case _ => 
                var1049;
                var1276
            
        };
        (((-40) | 81|>{ lambdaParameter1358 : Int64 => func1361(namedParam1362 : match (if (false) { // block id: 5558
                Float32(121.0)
            } else { // block id: 5560
                var1049;
                if (var140) { var1827 } else { var50 } ;
                var716 % Float32((Int32(Float32(16.0))) | 1)
            }) {
            case caseVar5571 : (Range<Int32>, Int16, Range<UInt32>, Int8, Option<Class6>) => 
                (Int8(1)&127..Int8(-12)&127:84|1);
                var4813 << ((UInt32(203)) & 7);
                UInt8(121)
            
            case -118.0 => 
                UInt8(22)
            
            case _ => 
                Option<Array<Unit>>.Some([(), (), (), (), (), (), (), (), (), ()]);
                var var5587 : UInt8 = UInt8(26);
                var5587
            
        }) }) ?? match (Int8(11)) {
            case 16 => 
                var var5601 : ?(UInt32, (Bool, Unit, Int16), Option<Bool>, UInt64, Rune, Int64) = Option<(UInt32, (Bool, Unit, Int16), Option<Bool>, UInt64, Rune, Int64)>.None;
                if (var267) { Class2096(namedParam4515 : var5601) } else { Class2096() } 
            
            case caseVar5606 => 
                if (false) { var949 } else { var949 } 
            
            case _ => 
                var4813 **= (var125 & 3);
                ();
                var949
            
            case 25 | -36 => 
                Class6()
            
            case _ => 
                if (var134) { Class2096(namedParam3400 : Option<Int32>.None, namedParam3401 : (var43&127..var43&127:((-36)|1)), namedParam3402 : (Int8(-31)&127..Int8(44)&127:(-41)|1), namedParam3403 : (var43, var3434, Float32(-49.0), var43, Option<Bool>.None, param944, var3434)) } else { Class6() } 
            
        })
    }
;
    var loopTimeVar5778 : Int64 = 0;
    do {
        loopTimeVar5778++;
        (var957 ?? var796);
        let var1080 : UInt64 = UInt64(UInt8(UInt8(180)));
        let var5678 : ?(Bool, Unit, Int16) = ([(), (), (), (), (), (), (), (), (), ()] as (Bool, Unit, Int16));
        func func961(namedParam962 ! : Range<Int64>, optionalParam963 ! : Option<Int64> = Option<Int64>.Some(29), optionalParam966 ! : (Int64, UInt8, Float32, Int64, Option<Bool>, Float64, UInt8) = (Int64(Int8(Int8(-53))), UInt8(185), Float32(Float32(Float32(-26.0))), Int64(Int16(UInt16(0))), Option<Bool>.Some(((Int32(-106)&127..Int32(73)&127:(-93)|1) is (Bool, Unit, Int16))), Float64(Float64(53.0)), UInt8(UInt8(UInt8(133)))), optionalParam987 ! : (String, Range<Int32>, UInt8, (Bool, Unit, Int16), (Int64, UInt8, Float32, Int64, Option<Bool>, Float64, UInt8), Range<Int16>, Int64, Range<Int32>, UInt32) = (".dtdg:C6Sa{", (Int32(UInt16(UInt8(222)))&127..=Int32(-61)&127:(Int64(UInt64(UInt16(115)))|1)), UInt8(96), (([false, false, true, false, false, true, true, false, true, true] is Option<Class6>), (), Int16(100)), ((-95), UInt8(Int8(18)), Float32(75.0), Int64(Int16(21)), Option<Bool>.None, (-15.0), UInt8(UInt8(19))), (Int16(Int8(-107))&127..=Int16(UInt8(26))&127:(116|1)), Int64(UInt8(UInt8(Int8(11)))), (Int32(-91)&127..=Int32(31)&127:45|1), UInt32(227))) : (Bool, Unit, Int16) { // block id: 1027
            var var1039 : UInt8 = UInt8(Int8(84));
            var var1059 : Unit = ();
            match (var1032) {
                case _ : UInt64 => 
                    var1039++;
                    var125 >>= ((var125) & 7);
                    if (var134) { [var1049, var796, var796, var796, (), (), (), (), var1059, var1059] } else { [(), (), (), var796, (), var1059, (), (), (), var1059] } 
                
                case _ => 
                    ();
                    if (false) { (var1080&127..UInt64(78)&127:((-27)|1)) } else { (var1080&127..var1080&127:(47|1)) } ;
                    [(), (), (), (), (), (), (), (), (), ()]
                
            };
            func1092();
            let var5717 : ??UInt32 = (UInt32(147) as Option<UInt32>);
            (match (Int8(111)) {
                case 32 | 37 | -115 | 89 => 
                    var var5655 : ?(Bool, Unit, Int16) = Option<(Bool, Unit, Int16)>.Some((((-54) is Option<Array<Bool>>), (), Int16(Int8(Int8(-99)))));
                    var5655
                
                case 126 => 
                    let var5668 : ?(Bool, Unit, Int16) = Option<(Bool, Unit, Int16)>.None;
                    var5668
                
                case _ : String => 
                    var1039--;
                    if (var267) { var5678 } else { Option<(Bool, Unit, Int16)>.Some((false, (), Int16(-54))) } 
                
                case _ => 
                    Option<(UInt32, (Bool, Unit, Int16), Option<Bool>, UInt64, Rune, Int64)>.None;
                    var5678
                
            } ?? match (match (Int8(-12)) {
                    case _ => 
                        var5344 |= UInt16(58);
                        if (var140) { Option<Option<UInt32>>.None } else { Option<Option<UInt32>>.None } 
                    
                    case _ => 
                        ();
                        var5717
                    
                }) {
                case caseVar5722 => 
                    Int16(-5) & Int16(-79);
                    var5233;
                    (var5270, var2594, Int16(52))
                
                case _ => 
                    let var5736 : Bool = (Option<(Range<Int32>, (Range<Int16>, Bool, (UInt32, (Bool, Unit, Int16), Option<Bool>, UInt64, Rune, Int64), Range<Int64>))>.None is ((UInt16, Range<Int16>, Range<UInt64>, Range<Int8>, UInt32, Range<Int16>, (Range<UInt8>, Float64, Bool), UInt8)) -> Range<UInt32>);
                    if (var5736) { (false, (), var3970) } else { (true, (), var3970) } 
                
            })
        }
;
        let var5751 : String = ###"sOm)0.4x~9"###;
        func961(namedParam962 : (124&127..=(-109)&127:(-95)|1), optionalParam963 : Option<Int64>.None, optionalParam987 : (var5751, (Int32(-58)&127..Int32(10)&127:(var2439|1)), UInt8(201), (false, var796, Int16(-31)), (78, var3434, Float32(-3.0), 42, var289, var2879, var3434), (var3970&127..=Int16(-75)&127:(var43|1)), var43, var2642, UInt32(126)))
    } while ((var949.var952) && loopTimeVar5778 < 100 ) ;
    var var5807 : ?(UInt32, (Bool, Unit, Int16), Option<Bool>, UInt64, Rune, Int64) = Option<(UInt32, (Bool, Unit, Int16), Option<Bool>, UInt64, Rune, Int64)>.Some((UInt32(Int8(109)), (((true, (), Int16(11)) is Bool), (), Int16(UInt16(151))), ((UInt32(141), (true, (), Int16(-6)), Option<Bool>.None, UInt64(177), '7', (-47)) as Bool), UInt64(140), 'w', Int64(Int8(Int8(72)))));
    (try { // block id: 5785
        var2523 **= (var2523 & 3);
        if (var134) { Option<Bool>.None } else { Option<Bool>.None } 
    } catch (e: Exception) { // block id: 5793
        let var5795 : Option<Option<Unit>> = Option<Option<Unit>>.Some(Option<Unit>.None);
        var5795;
        var796;
        Option<Bool>.Some(false)
    } finally { // block id: 5801
        Option<Bool>.None
    } ?? var140 && match (var5807) {
        case caseVar5839 : (String, Range<Int32>, UInt8, (Bool, Unit, Int16), (Int64, UInt8, Float32, Int64, Option<Bool>, Float64, UInt8), Range<Int16>, Int64, Range<Int32>, UInt32) => 
            var var5843 : Int8 = Int8(UInt8(Int8(-101)));
            var5843 ^= Int8(-68);
            UInt32(72) <= UInt32(170)
        
        case _ => 
            ();
            var var5855 : ?Bool = Option<Bool>.Some(true);
            var5855;
            var5270
        
    })
}

func func919(param920 : UInt8) : Bool { // block id: 921
    var var925 : Enum274 = Enum274.enumValue597;
    let var938 : String = ###"Hhh i9pLny"###;
    let var5860 : (Float64) -> Bool = func943;
    (match (var925) {
        case caseVar929 => 
            var267 ||= var140;
            Option<Bool>.None
        
        case _ => 
            var938;
            ();
            var289
        
    } ?? (try { // block id: 5863
        var2879 * (-120.0)
    } finally { // block id: 5867
        if (var5270) { var5871 } else { Option<Int8>.Some(var2523) } ;
        110.0
    }|>var5860))
}

public func func913(optionalParam914 ! : Range<UInt32> = (UInt32(212)&127..UInt32(158)&127:89|1)) : (Range<Int32>, (Range<Int16>, Bool, (UInt32, (Bool, Unit, Int16), Option<Bool>, UInt64, Rune, Int64), Range<Int64>)) { // block id: 916
    var var5888 : Int8 = Int8(UInt8(235));
    var var5914 : UInt8 = UInt8(UInt8(Int8(40)));
    if ((match (Class2096()) {
        case caseVar5881 => 
            var125++;
            var2523 |= var5888;
            UInt8(53)
        
        case caseVar5894 => 
            UInt8(127)
        
        case caseVar5899 : Option<Range<UInt64>> => 
            UInt8(194) | UInt8(235)
        
        case _ : Option<UInt64> => 
            UInt8(133) / ((UInt8(93)) | 1)
        
        case _ => 
            -var5914
        
    }|>func919)) { var3295 } else { (Option<(Range<Int32>, (Range<Int16>, Bool, (UInt32, (Bool, Unit, Int16), Option<Bool>, UInt64, Rune, Int64), Range<Int64>))>.None ?? ((Int32(26)&127..=Int32(122)&127:(-9)|1), var2762)) } 
}

public func func825(param826 : Array<Option<Int64>>) : (UInt32, (Bool, Unit, Int16), Option<Bool>, UInt64, Rune, Int64) { // block id: 827
    let var835 : Range<UInt8> = (UInt8(209)&127..UInt8(66)&127:(-51)|1);
    let var840 : (Range<UInt8>, Float64, Bool) = ((UInt8(19)&127..UInt8(239)&127:12|1), 20.0, (Float32(-15.0) is (Unit) -> (Int64, UInt8, Float32, Int64, Option<Bool>, Float64, UInt8)));
    var var871 : Range<Int16> = (Int16(-51)&127..Int16(122)&127:((-50)|1));
    var var893 : Range<Int64> = (67&127..33&127:(-85)|1);
    var var905 : ?Unit = Option<Unit>.None;
    if (if (true) { (var835, var305, false) } else { var840 } [2]) { // block id: 847
        var796;
        var851++;
        var856[0]
    } else if ((var871 is Option<Class6>)) { // block id: 876
        try { // block id: 878
            var796;
            let var881 : ?Class6 = (((UInt64(Int8(55))&127..=UInt64(48)&127:((-90)|1)) is String) as Class6);
            var881;
            57.0
        } finally { // block id: 890
            var796;
            var893;
            var305 - (-25.0)
        };
        var loopTimeVar902 : Int64 = 0;
        do {
            loopTimeVar902++;

        } while ((var267) && loopTimeVar902 < 100 ) ;
        (var905 ?? var796)
    };
    func913(optionalParam914 : (UInt32(106)&127..UInt32(88)&127:(-30)|1))[1][2]
}




func func821(param822 : Array<Bool>) : Array<Option<Bool>> { // block id: 823
    let var5928 : (Array<Option<Int64>>) -> (UInt32, (Bool, Unit, Int16), Option<Bool>, UInt64, Rune, Int64) = func825;
    var var5970 : Float64 = 82.0;
    var var5984 : ??Int64 = (UInt8(Int8(Int8(UInt8(9)))) as Option<Int64>);
    [(Option<Option<Int64>>.Some(var1939) ?? Option<Int64>.None), Option<Int64>.Some(94), (Class2096() as Int64), match (var1939) {
        case _ => 
            if (var5270) { var4832 } else { var4832 } ;
            var796;
            var1939
        
        case _ => 
            if (var134) { var1939 } else { var1939 } 
        
    }, try { // block id: 5961
        var796;
        if (var134) { Option<Int64>.None } else { Option<Int64>.None } 
    } finally { // block id: 5967
        var5970 **= Float64(Int32((-76.0)) & 3);
        var2594;
        Option<Int64>.None
    }, Option<Int64>.Some(var43), (Option<Option<Int64>>.None ?? var1939), Option<Int64>.Some(var2439), (var5984 ?? var1939), var1939]|>var5928;
    ((if (false) { var6001 } else { Option<Int16>.Some(Int16(-78)) }  ?? var144) as Range<UInt8>);
    (if (var267) { match (var5871) {
        case _ => 
            var125 ^ UInt32(244);
            var6033
        
    } } else { try { // block id: 6036
        Option<Bool>.None;
        var140 &&= var140;
        var6033
    } finally { // block id: 6042
        let var6049 : ?Bool = ((Int32(-109)&127..=Int32(-62)&127:67|1) as Bool);
        var var6054 : UInt8 = UInt8(229);
        (13, UInt8(251), Float32(-92.0), (-67), var6049, 103.0, var6054);
        var2523 ^= Int8(34);
        Option<Array<Option<Bool>>>.None
    } }  ?? var6061)
}

public func func572(param573 : UInt32) : (UInt32, (Bool, Unit, Int16), Option<Bool>, UInt64, Rune, Int64) { // block id: 574
    let var589 : Range<Int32> = (Int32(-2)&127..Int32(UInt8(41))&127:(98|1));
    let var626 : Array<Option<Bool>> = Array<Option<Bool>>(10){ i => Option<Bool>.None };
    let var664 : Range<Int16> = (Int16(34)&127..Int16(-83)&127:3|1);
    let var677 : Bool = true;
    func func807(param808 : (Bool, Unit, Int16)) : Rune { // block id: 809
        'V'
    }
;
    func func689() : Array<Option<Bool>> { // block id: 690
        Class6.var694;
        var var741 : UInt16 = UInt16(UInt8(UInt8(UInt8(116))));
        var var787 : Bool = (() is Int32);
        let var793 : ?Bool = Option<Bool>.None;
        if (if (false) { // block id: 699
            true
        } else if (if (true) { // block id: 703
            !var267
        } else if (var134) { // block id: 707
            var140
        } else { // block id: 709
            var var713 : UInt8 = UInt8(150);
            (var43, var713, var716, var43, var289, 34.0, UInt8(210));
            [var289, Option<Bool>.None, var289, var289, Option<Bool>.None, Option<Bool>.Some(var134), Option<Bool>.Some(false), Option<Bool>.None, Option<Bool>.None, var289];
            true
        }) { // block id: 737
            Float32(109.0);
            var741++;
            let var747 : Bool = ((UInt32(50), (((###"a{9#x}Xq=yJ"###, (Int32(-48)&127..=Int32(98)&127:(69|1)), UInt8(165), (true, (), Int16(17)), (118, UInt8(117), Float32(117.0), 86, Option<Bool>.None, (-101.0), UInt8(95)), (Int16(3)&127..Int16(67)&127:(-112)|1), (-88), (Int32(-74)&127..Int32(-116)&127:96|1), UInt32(24)) is Int32), (), Int16(UInt16(236))), Option<Bool>.None, UInt64(72), '1', 114) is (Float64) -> Unit);
            var747
        } else { // block id: 784
            if (var787) { Option<Bool>.Some(var134) } else { var793 } ;
            var796;
            false
        }) { match (Option<Bool>.Some(var787)) {
            case _ => 
                var796;
                var40
            
        } } else { func807(try { // block id: 812
            var25
        } catch (e: Exception) { // block id: 814
            ();
            (false, (), Int16(77))
        }) } ;
        let var6080 : (Array<Bool>) -> Array<Option<Bool>> = func821;
        let var6085 : (Class6, (Bool, Unit, Int16), Unit, Array<Bool>, Array<Range<Int16>>) = (Class2096(), (true, (), Int16(50)), (), [false, false, false, ((UInt32(25) as Unit) is (Option<Unit>) -> Int16), ((((Int32(60)&127..Int32(-28)&127:(55|1)), Int16(-66), (UInt32(28)&127..UInt32(171)&127:(30|1)), Int8(103), Option<Class6>.Some(Class2096(namedParam4515 : Option<(UInt32, (Bool, Unit, Int16), Option<Bool>, UInt64, Rune, Int64)>.Some((UInt32(61), (true, (), Int16(56)), Option<Bool>.None, UInt64(131), 'v', (-19)))))) as Bool) is Array<Float64>), false, (Option<Unit>.None is Array<Range<Int16>>), (((-20) as UInt64) is UInt64), ([Option<Int64>.None, Option<Int64>.Some(92), Option<Int64>.Some((-28)), Option<Int64>.None, Option<Int64>.Some(103), Option<Int64>.None, Option<Int64>.None, Option<Int64>.None, Option<Int64>.None, Option<Int64>.None] is (UInt16) -> Class6), (((UInt16(5)&127..UInt16(150)&127:((-90)|1)) as (Bool, Unit, Int16)) is (Bool, Unit, Int16))], [(Int16(27)&127..=Int16(-39)&127:58|1), (Int16(-118)&127..=Int16(37)&127:(-102)|1), (Int16(-55)&127..=Int16(75)&127:21|1), (Int16(-34)&127..=Int16(-74)&127:23|1), (Int16(-81)&127..Int16(-104)&127:(-52)|1), (Int16(-83)&127..=Int16(-92)&127:(-33)|1), (Int16(-96)&127..Int16(-37)&127:81|1), (Int16(-103)&127..=Int16(-62)&127:56|1), (Int16(14)&127..=Int16(-29)&127:(-123)|1), (Int16(39)&127..=Int16(-126)&127:(-104)|1)]);
        var var6172 : Bool = false;
        [(var6085 is Float32), var787, (var289 ?? var787), (Option<Bool>.None ?? false), try { // block id: 6162
            true
        } catch (e: Exception) { // block id: 6164
            true
        } finally { // block id: 6166
            var2594;
            var677
        }, (Option<Bool>.None ?? var6172), try { // block id: 6175
            var1572;
            var856;
            false
        } finally { // block id: 6179
            false
        }, var787 && false, true, false]|>var6080
    }
;
    func func578(param579 : (UInt32, (Bool, Unit, Int16), Option<Bool>, UInt64, Rune, Int64), optionalParam580 ! : Float64 = Float64(Float32(37.0))) : Option<Bool> { // block id: 583
        if ((var589 is Range<UInt64>)) { match (Enum274.enumValue597) {
            case _ => 
                let var611 : Bool = ((false, (), Int16(-57)) is Float32);
                if (true) { [Option<Bool>.Some(var140), var289, Option<Bool>.Some(true), Option<Bool>.Some(var611), Option<Bool>.Some(true), Option<Bool>.None, var289, Option<Bool>.Some(var267), Option<Bool>.None, var289] } else { var626 } 
            
            case defaultValue => 
                (Int8(-117)&127..Int8(-72)&127:1|1);
                if (var267) { (Int16(56)&127..=Int16(-22)&127:(57|1)) } else { var664 } ;
                if (var267) { var626 } else { [var289, var289, var289, Option<Bool>.Some(false), Option<Bool>.Some(var677), var289, var289, Option<Bool>.Some(var267), Option<Bool>.None, var289] } 
            
            case _ => 
                var626
            
        } } else { func689() } [9]
    }
;
    var var6293 : Int64 = 19;
    try { // block id: 576
        func578(var3457);
        try { // block id: 6189

        } finally { // block id: 6190
            ()
        };
        match ((var3434&127..var3434&127:(121|1))) {
            case caseVar6199 : Option<Option<Int64>> => 
                (param573, var25, Option<Bool>.Some(var134), var4965, 'Z', (-10))
            
            case _ : (Range<Int16>, Bool, (UInt32, (Bool, Unit, Int16), Option<Bool>, UInt64, Rune, Int64), Range<Int64>) => 
                ();
                Option<Int16>.Some(var851);
                var3457
            
            case caseVar6218 : Option<Bool> => 
                if (true) { var3457 } else { (UInt32(87), (var677, (), var144), var289, var4778, '3', (-103)) } 
            
            case _ => 
                (var125, (true, (), var144), var289, UInt64(92), var40, var2439)
            
        }
    } catch (_) { // block id: 6245
        var43;
        if (false) { var626 } else { [Option<Bool>.Some(true), var289, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.Some(var134), Option<Bool>.None, var289, var289, Option<Bool>.None] } ;
        var var6272 : ??UInt32 = Option<Option<UInt32>>.Some(Option<UInt32>.None);
        if (var6265) { // block id: 6268
            var var6277 : ?UInt32 = Option<UInt32>.Some(UInt32(153));
            if (true) { var6272 } else { Option<Option<UInt32>>.Some(var6277) } ;
            Option<Int32>.None;
            var3457
        } else { // block id: 6282
            (var4813, (var267, (), var144), Option<Bool>.None, UInt64(80), '8', var6293)
        }
    }
}

public func func475(param476 : Bool, namedParam477 ! : UInt64, optionalParam478 ! : Option<Bool> = ([Option<Int64>.Some((-14)), Option<Int64>.None, ((Int8(40)&127..Int8(36)&127:(73|1)) as Int64), Option<Int64>.Some((-98)), Option<Int64>.Some((-126)), Option<Int64>.Some(15), (UInt8(100) as Int64), (Int16(112) as Int64), Option<Int64>.None, Option<Int64>.Some(124)] as Bool), namedParam502 ! : Rune) : Option<Class6> { // block id: 503
    var var520 : Enum274 = Enum274.defaultValue;
    if ((-40) >= Int64(UInt8(205))) { // block id: 509
        let var512 : Class6 = Class6();
        match (var512) {
            case _ => 
                if (true) { Enum274.defaultValue } else { var520 } ;
                var125--
            
        };
        Class6.var527
    } else if ((var546[3] ?? false)) { // block id: 570
        UInt32(191)|>func572
    } else { // block id: 6297
        try { // block id: 6299
            [var1939, Option<Int64>.Some(var2439), var1939, var6306, var6306, var1939, Option<Int64>.None, var6312, Option<Int64>.Some(var2439), Option<Int64>.None];
            var796;
            var var6328 : Int64 = Int64(UInt16(UInt16(Int16(-99))));
            if (var140) { (var125, var25, optionalParam478, var4778, var40, var6328) } else { (UInt32(5), var25, var289, UInt64(31), 'q', 32) } 
        } finally { // block id: 6340
            Option<Array<Unit>>.Some([(), (), (), (), (), (), (), (), (), ()]);
            var var6345 : Int64 = 87;
            var6345 %= ((var6345) | 1);
            if (var134) { (UInt32(5), var25, Option<Bool>.Some(true), UInt64(168), 'v', 61) } else { (UInt32(253), (var267, (), Int16(110)), Option<Bool>.Some(var267), namedParam477, 'Q', var43) } 
        }
    };
    ();
    var var6376 : ?Class6 = (Enum274.defaultValue as Class6);
    let var6419 : ((UInt16, Range<Int16>, Range<UInt64>, Range<Int8>, UInt32, Range<Int16>, (Range<UInt8>, Float64, Bool), UInt8), Range<UInt8>, Bool, Range<UInt64>) = ((UInt16(4), (Int16(-114)&127..Int16(-62)&127:(-23)|1), (UInt64(110)&127..=UInt64(222)&127:(-118)|1), (Int8(65)&127..=Int8(-98)&127:(Int64(UInt16(50))|1)), UInt32(220), (Int16(58)&127..Int16(-74)&127:100|1), ((UInt8(87)&127..=UInt8(118)&127:74|1), (-50.0), (false is Float64)), UInt8(60)), (UInt8(Int8(UInt8(101)))&127..UInt8(Int8(-74))&127:(Int64(UInt16(108))|1)), ((Class2096(namedParam4515 : Option<(UInt32, (Bool, Unit, Int16), Option<Bool>, UInt64, Rune, Int64)>.None), (false, (), Int16(-78)), (), [false, true, false, false, true, true, false, false, false, true], [(Int16(-53)&127..=Int16(-98)&127:(-49)|1), (Int16(82)&127..Int16(-92)&127:25|1), (Int16(-76)&127..=Int16(-115)&127:((-97)|1)), (Int16(-70)&127..Int16(47)&127:(-44)|1), (Int16(32)&127..=Int16(-46)&127:(-32)|1), (Int16(-124)&127..=Int16(-107)&127:(123|1)), (Int16(120)&127..Int16(58)&127:((-15)|1)), (Int16(58)&127..Int16(-96)&127:(7|1)), (Int16(-22)&127..Int16(-7)&127:72|1), (Int16(-16)&127..=Int16(114)&127:98|1)]) is UInt64), (UInt64(166)&127..=UInt64(219)&127:(-22)|1));
    let var6490 : ?((UInt16, Range<Int16>, Range<UInt64>, Range<Int8>, UInt32, Range<Int16>, (Range<UInt8>, Float64, Bool), UInt8), Range<UInt8>, Bool, Range<UInt64>) = (Option<Int64>.None as ((UInt16, Range<Int16>, Range<UInt64>, Range<Int8>, UInt32, Range<Int16>, (Range<UInt8>, Float64, Bool), UInt8), Range<UInt8>, Bool, Range<UInt64>));
    var var6529 : Int64 = Int64(UInt32(209));
    match (match (try { // block id: 6373
                var2594;
                var6376
            } catch (e: Exception) { // block id: 6379
                var796;
                Enum274.defaultValue;
                Option<Class6>.Some(Class2096())
            } finally { // block id: 6384
                var6376
            }) {
            case _ => 
                if (var140) { Option<((UInt16, Range<Int16>, Range<UInt64>, Range<Int8>, UInt32, Range<Int16>, (Range<UInt8>, Float64, Bool), UInt8), Range<UInt8>, Bool, Range<UInt64>)>.Some(((UInt16(70), (var3970&127..Int16(-72)&127:(72|1)), (var4778&127..UInt64(184)&127:((-52)|1)), var2221, UInt32(244), (Int16(29)&127..Int16(120)&127:61|1), ((UInt8(217)&127..=UInt8(229)&127:(-75)|1), (-92.0), true), UInt8(69)), (var3434&127..=var3434&127:((-122)|1)), var140, var3570)) } else { Option<((UInt16, Range<Int16>, Range<UInt64>, Range<Int8>, UInt32, Range<Int16>, (Range<UInt8>, Float64, Bool), UInt8), Range<UInt8>, Bool, Range<UInt64>)>.Some(var6419) } 
            
            case caseVar6482 => 
                var144 ^ var3970;
                if (false) { var6490 } else { var6490 } 
            
            case _ => 
                ();
                Option<Array<Option<Bool>>>.Some(var6061);
                if (true) { var6490 } else { var6490 } 
            
            case _ => 
                ();
                ();
                Option<((UInt16, Range<Int16>, Range<UInt64>, Range<Int8>, UInt32, Range<Int16>, (Range<UInt8>, Float64, Bool), UInt8), Range<UInt8>, Bool, Range<UInt64>)>.None
            
        }) {
        case _ : Class2096 => 
            if (false) { var6376 } else { var6376 } 
        
        case caseVar6518 : Range<Int32> => 
            var2523;
            Option<Class6>.Some(Class2096(namedParam3400 : Option<Int32>.Some(var1387), namedParam3401 : (62&127..(-1)&127:(-75)|1), namedParam3402 : (Int8(118)&127..=Int8(-4)&127:19|1), namedParam3403 : (var6529, UInt8(205), var716, 36, Option<Bool>.None, var2879, UInt8(85))))
        
        case _ => 
            var6376
        
    }
}

public func func10() : Class6 { // block id: 11
    let var171 : (Float64) -> Unit = { lambdaParameter174 : Float64 => () };
    111.0|>var171;
    let var209 : Unit = ();
    func func179() : (Int64, UInt8, Float32, Int64, Option<Bool>, Float64, UInt8) { // block id: 180
        let var203 : UInt64 = UInt64((-122));
        let var424 : ?Int64 = Option<Int64>.None;
        let var441 : String = ###"|w>2o5(o-%"###;
        var var451 : UInt8 = UInt8(UInt8(Int8(-108)));
        try { // block id: 182
            var var189 : ?Unit = Option<Unit>.None;
            var189.getOrThrow();
            let var199 : ?Bool = Option<Bool>.Some(false);
            try { // block id: 192
                ()
            } finally { // block id: 194
                (var125, var25, var199, var203, 'J', var43);
                var209;
                ()
            };
            ()|>func213
        } catch (e: Exception) { // block id: 351
            var loopTimeVar372 : Range<UInt64> = (UInt64(Int16(35))&127..=UInt64(68)&127:(116|1));
            for (i in loopTimeVar372 where true) {
                var125 <= UInt32(228);
                var var363 : ?Unit = ((27&127..=Int64(Int32(-25))&127:(Int64(UInt8(Int8(89)))|1)) as Unit);
                if (var267) { Option<Unit>.Some(()) } else { var363 } 
            };
            let var381 : Int8 = Int8(93);
            match ((var381&127..=var381&127:(var43|1))) {
                case caseVar387 : Float64 => 
                    var var390 : Range<Int32> = (Int32(Int8(UInt8(140)))&127..Int32(-123)&127:(81|1));
                    var390;
                    var209;
                    var50
                
                case caseVar401 : (Bool, Unit, Int16) => 
                    var50
                
                case _ => 
                    let var414 : UInt8 = UInt8(UInt8(Int8(-108)));
                    (68, UInt8(167), Float32(-106.0), (-88), var289, 29.0, var414)
                
            }
        } finally { // block id: 418
            [Option<Int64>.None, var424, Option<Int64>.None, Option<Int64>.Some(var43), Option<Int64>.None, Option<Int64>.Some(var43), var424, var424, var424, var424][4];
            let var446 : Int32 = Int32(Int32(93));
            let var458 : Range<Int16> = (Int16(-59)&127..=Int16(-94)&127:50|1);
            (var441, (Int32(-77)&127..=var446&127:(var43|1)), var451, var25, var50, var458, (-93), (Int32(79)&127..=Int32(-113)&127:(var43|1)), UInt32(70))[4]
        }
    }
;
    func179();
    let var6555 : Int64 = Int64(UInt64(41));
    var var6562 : Float32 = Float32(Float32(95.0));
    let var6570 : Bool = true;
    if (var140) { (func475(var140, namedParam477 : UInt64(221), namedParam502 : var40) ?? if (var140) { var949 } else { Class2096(namedParam3400 : Option<Int32>.Some(var1387), namedParam3401 : ((-122)&127..(-116)&127:(-94)|1), namedParam3402 : (Int8(-16)&127..=var2523&127:(var6555|1)), namedParam3403 : (3, UInt8(239), var6562, var6566, Option<Bool>.Some(var6570), var2879, UInt8(50))) } ) } else { var949 } 
}

main(): Int64 {
    try {
        func10().var6576
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var43*var43), 64)
        crccheck.updateBuffer(UInt64(var125*var125), 64)
        crccheck.updateBuffer(UInt64(var144*var144), 64)
        crccheck.updateBuffer(UInt64(var851*var851), 64)
        crccheck.updateBuffer(UInt64(var1194*var1194), 64)
        crccheck.updateBuffer(UInt64(var1387*var1387), 64)
        crccheck.updateBuffer(UInt64(var2110*var2110), 64)
        crccheck.updateBuffer(UInt64(var2439*var2439), 64)
        crccheck.updateBuffer(UInt64(var2523*var2523), 64)
        crccheck.updateBuffer(UInt64(var3215*var3215), 64)
        crccheck.updateBuffer(UInt64(var3434*var3434), 64)
        crccheck.updateBuffer(UInt64(var3970*var3970), 64)
        crccheck.updateBuffer(UInt64(var4778*var4778), 64)
        crccheck.updateBuffer(UInt64(var4813*var4813), 64)
        crccheck.updateBuffer(UInt64(var4965*var4965), 64)
        crccheck.updateBuffer(UInt64(var5344*var5344), 64)
        crccheck.updateBuffer(UInt64(var6566*var6566), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Enum274 {

}

extend Class6 {
    public func func2584(param2585 : (UInt32, (Bool, Unit, Int16), Option<Bool>, UInt64, Rune, Int64), optionalParam2586 ! : UInt64 = UInt64(UInt16(UInt8(Int8(32)))), namedParam2591 ! : (Range<Int32>, (Range<Int16>, Bool, (UInt32, (Bool, Unit, Int16), Option<Bool>, UInt64, Rune, Int64), Range<Int64>))) : (Range<Int32>, Int16, Range<UInt32>, Int8, Option<Class6>) { // block id: 2592
        var2594;
        try { // block id: 2597
            func13(var305);
            let var2604 : ?Bool = Option<Bool>.Some(false);
            [Option<Bool>.None, Option<Bool>.None, var2604, var2512, var2512, var2604, Option<Bool>.None, var2506, var2506, Option<Bool>.None];
            var2523
        } finally { // block id: 2615
            (Option<Int8>.Some(Int8(-16)) ?? Int8(-9))
        };
        var var4312 : Int8 = Int8(UInt8(206));
        let var4324 : ?Class6 = Option<Class6>.None;
        (try { // block id: 2626
            (Int32(12)&127..Int32(-1)&127:(-109)|1)
        } catch (_) { // block id: 2628
            (Int32(-65)&127..Int32(-28)&127:(52|1))
        }, (Option<Unit>.None|>func2634), if (match (Option<Bool>.Some(false)) {
            case _ : (Class6, (Bool, Unit, Int16), Unit, Array<Bool>, Array<Range<Int16>>) => 
                'T';
                var952
            
            case caseVar4216 : Range<Int32> => 
                false
            
            case caseVar4221 : Array<UInt8> => 
                (true, var2594, Int16(-55));
                let var4230 : Int32 = Int32(Int32(0));
                var1387 >= var4230
            
            case _ => 
                var546;
                true
            
        }) { (UInt32(180)&127..=UInt32(162)&127:7|1) } else { (if (var134) { var4241 } else { (UInt32(174)&127..=UInt32(60)&127:86|1) } ) } , match (if (false) { Option<((UInt16, Range<Int16>, Range<UInt64>, Range<Int8>, UInt32, Range<Int16>, (Range<UInt8>, Float64, Bool), UInt8), Range<UInt8>, Bool, Range<UInt64>)>.Some(var4253) } else { Option<((UInt16, Range<Int16>, Range<UInt64>, Range<Int8>, UInt32, Range<Int16>, (Range<UInt8>, Float64, Bool), UInt8), Range<UInt8>, Bool, Range<UInt64>)>.Some(var4253) } ) {
            case _ : UInt8 => 
                ();
                -UInt64(192);
                var2523
            
            case _ => 
                var var4295 : ?UInt32 = Option<UInt32>.Some(UInt32(UInt16(33)));
                var4295;
                var4300
            
            case _ : Array<Option<Bool>> => 
                var4064;
                Int8(-13)
            
            case _ : Option<UInt32> => 
                var694;
                var4312
            
            case _ => 
                var2439 += 73;
                Int8(95) % ((Int8(54)) | 1)
            
        }, var4324)
    }

}

extend Enum1029 {

}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_unexpected_declaration_in_scope
// ASSERT: scan parse_expected_catch_or_finally_in_try
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_unmatched_right_delimiter
// ASSERT: scan parse_expected_left_brace
// ASSERT: scan parse_expected_case


