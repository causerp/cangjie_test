/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output


public let var33 : UInt8 = UInt8(88)
public var var70 : Unit = ()
var var109 : Int32 = Int32(88)
public var var139 : Int32 = Int32(UInt16(198))
let var177 : Int8 = Int8(UInt8(241))
public var var205 : UInt8 = UInt8(111)
var var226 : Array<Bool> = [false, false, true, false, false, false, false, false, false, false]
public let var402 : (UInt32, Int32, Bool, Range<Int64>, Option<Option<Option<Range<Int32>>>>) = (UInt32(Int16(UInt8(Int8(117)))), Int32(Int16(-24)), true, (120&127..58&127:((-7)|1)), Option<Option<Option<Range<Int32>>>>.None)
public var var430 : String = """
_X>\"Y
l}N/-
"""
let var434 : ?Option<Range<Int32>> = (Float64(Float32(Float32(Float32(-118.0)))) as Option<Range<Int32>>)
public let var532 : Int64 = Int64(Int8(UInt8(UInt8(67))))
public let var549 : ?Array<Int8> = Option<Array<Int8>>.None
public let var561 : (Array<Int8>, Option<Array<Int8>>, (Array<Int8>, Range<UInt8>, Range<Int32>, Range<Int16>, Int8, Array<Bool>, Range<UInt64>)) = ([Int8(Int8(Int8(69))), Int8(UInt8(UInt8(19))), Int8(-68), Int8(3), Int8(-68), Int8(Int8(-118)), Int8(-23), Int8(UInt8(UInt8(5))), Int8(10), Int8(UInt8(17))], (true as Array<Int8>), ([Int8(-21), Int8(Int8(73)), Int8(UInt8(190)), Int8(UInt8(160)), Int8(-62), Int8(UInt8(132)), Int8(UInt8(132)), Int8(Int8(57)), Int8(UInt8(180)), Int8(-73)], (UInt8(120)&127..UInt8(229)&127:(-61)|1), (Int32(Int16(22))&127..=Int32(-15)&127:(Int64(27)|1)), (Int16(-84)&127..Int16(-22)&127:((-22)|1)), Int8(UInt8(159)), [true, false, false, (([Int8(-14), Int8(-57), Int8(-98), Int8(51), Int8(121), Int8(-66), Int8(-52), Int8(-71), Int8(-3), Int8(115)], Option<Array<Int8>>.None, ([Int8(57), Int8(-118), Int8(-11), Int8(-69), Int8(-46), Int8(-1), Int8(-81), Int8(-117), Int8(12), Int8(12)], (UInt8(20)&127..=UInt8(47)&127:31|1), (Int32(34)&127..=Int32(-58)&127:(-81)|1), (Int16(58)&127..Int16(53)&127:(28|1)), Int8(26), [true, false, false, true, true, true, true, true, true, false], (UInt64(29)&127..=UInt64(98)&127:(79|1)))) is Interface12), ([Int8(63), Int8(78), Int8(-122), Int8(-17), Int8(-23), Int8(75), Int8(24), Int8(65), Int8(18), Int8(-111)] is (Int16) -> Unit), false, (() is (Int16) -> Unit), (([Int8(71), Int8(21), Int8(-90), Int8(-53), Int8(-91), Int8(42), Int8(11), Int8(53), Int8(-119), Int8(-40)], (UInt8(178)&127..=UInt8(68)&127:(-16)|1), (Int32(-42)&127..=Int32(105)&127:((-46)|1)), (Int16(-8)&127..=Int16(-117)&127:(39|1)), Int8(-102), [true, true, false, true, false, true, false, true, false, false], (UInt64(29)&127..=UInt64(62)&127:(40|1))) is Unit), true, false], (UInt64(UInt8(39))&127..=UInt64(213)&127:(Int64(Int16(19))|1))))
let var695 : Range<Int16> = (Int16(78)&127..Int16(-20)&127:(-16)|1)
public var var829 : Range<UInt8> = (UInt8(197)&127..UInt8(Int8(-80))&127:(80|1))
public var var1091 : UInt32 = UInt32(226)
public let var1152 : Interface1024<Option<Option<Range<Int8>>>> = Class1020()
let var1379 : Bool = (Int16(UInt16(253)) is UInt32)
let var1435 : Int8 = Int8(0)
var var1481 : Option<Option<UInt32>> = Option<Option<UInt32>>.None
public let var1678 : Range<Int32> = (Int32(-45)&127..=Int32(-81)&127:(-61)|1)
var var1745 : (Bool, Array<Bool>, Range<Int32>, Unit, Int32) = (false, [false, (() is Int64), ((UInt64(214) as Range<Int32>) is (Int16) -> Unit), true, true, true, false, false, false, ((false, [true, false, false, false, true, false, false, false, false, false], (Int32(-68)&127..=Int32(-20)&127:(114|1)), (), Int32(77)) is Interface1023)], (Int32(-25)&127..Int32(-21)&127:126|1), (), Int32(115))
var var1799 : Rune = 'A'
var var1839 : Array<Int8> = [Int8(-98), Int8(-125), Int8(-40), Int8(-9), Int8(-30), Int8(-91), Int8(-43), Int8(-35), Int8(108), Int8(122)]
public var var1937 : UInt16 = UInt16(Int8(4))
var var2162 : UInt64 = UInt64(Int64(Int16(Int16(UInt8(164)))))
let var2176 : (UInt32, Range<Int32>, Array<Range<Int64>>, Rune, Option<Range<Int8>>, Array<Bool>, Range<UInt16>, Int8) = (UInt32(240), (Int32(-8)&127..=Int32(-20)&127:(-4)|1), [((-53)&127..=53&127:(-89)|1), ((-6)&127..=(-41)&127:28|1), ((-45)&127..=17&127:(-78)|1), ((-55)&127..=97&127:(-12)|1), (115&127..=(-3)&127:78|1), (55&127..(-11)&127:(-30)|1), ((-71)&127..(-76)&127:83|1), (13&127..=27&127:(-63)|1), (83&127..(-98)&127:(-10)|1), ((-2)&127..=(-112)&127:82|1)], 'v', (Int8(UInt8(Int8(32))) as Range<Int8>), [false, false, true, false, false, false, false, false, true, false], (UInt16(66)&127..=UInt16(129)&127:(Int64(Int32(6))|1)), Int8(Int8(54)))
public var var2240 : ?Interface12 = (() as Interface12)
public let var2319 : Interface1024<Option<Option<Range<Int8>>>> = Class1020()
public let var2373 : Array<Int32> = Array<Int32>(10){ i => Int32(-14) }
public var var2400 : UInt16 = UInt16(UInt8(Int8(UInt8(71))))
public let var2407 : Unit = ()
public interface Interface12 {
    static func func36(param37 : UInt64, namedParam38 ! : Int32) : Int64 { // block id: 39
        let var1095 : Range<UInt16> = (UInt16(UInt8(4))&127..=UInt16(Int8(-120))&127:(Int64(UInt8(UInt8(UInt8(30))))|1));
        match ((func47('z', Class9(), var177, var532) ?? (var1095|>func1087<Option<Int32>>))) {
            case caseVar1107 => 
                if (false) { (var33&127..=UInt8(229)&127:(120|1)) } else { var829 } ;
                Int16(38)
            
            case _ => 
                var109 += var109;
                var70;
                -Int16(-27)
            
        };
        var var1160 : Interface1024<Option<Option<Range<Int8>>>> = Class1020();
        let var2277 : Array<Range<Int64>> = Array<Range<Int64>>(10){ i => (8&127..=(-126)&127:(-98)|1) };
        let var2357 : Range<UInt64> = (UInt64(191)&127..=UInt64(40)&127:(-76)|1);
        match (try { // block id: 1129
                var var1131 : ?UInt32 = Option<UInt32>.None;
                var1131;
                var var1135 : Int64 = 90;
                var1135 -= var1135;
                let var1140 : Bool = ((UInt32(Int8(Int8(-101)))&127..UInt32(UInt16(21))&127:(Int64(UInt32(96))|1)) is Option<Range<Int8>>);
                if (var1140) { [var1152, Class1020(), var1152, Class1020(), var1152, Class1020(), var1160, Class1020(), var1160, Class1020()] } else { [var1152, var1160, var1160, Class1020(), Class1020(namedParam1192 : Option<Array<Int8>>.None), Class1020(optionalParam1172 : var402, namedParam1192 : var549, optionalParam1193 : UInt64(219)), Class1020(), Class1020(optionalParam1189 : var1091, namedParam1192 : Option<Array<Int8>>.None, optionalParam1193 : UInt64(250)), var1160, Class1020()] } 
            } catch (e: Exception) { // block id: 1602
                [var1152, Class1020(optionalParam1611 : var2277, namedParam1655 : Int8(116)), Class1020(namedParam1192 : Option<Array<Int8>>.Some(var1839), optionalParam1193 : UInt64(105)), var1152, var1160, var1152, Class1020(namedParam1192 : var549, optionalParam1193 : var2162), var2319, var2319, var1152]
            }[3]) {
            case _ : Option<Option<UInt32>> => 
                Option<Unit>.None;
                ();
                5
            
            case caseVar2332 => 
                (-41)
            
            case _ : Int8 => 
                var1937 >>= ((UInt16(128)) & 7);
                var532 << ((var532) & 7)
            
            case _ : Option<Range<UInt8>> => 
                Option<Int32>.Some(Int32(27));
                (-69)
            
            case _ => 
                Option<Range<UInt8>>.Some((UInt8(32)&127..=UInt8(36)&127:(-108)|1));
                if (true) { var2357 } else { (UInt64(118)&127..=var2162&127:(var532|1)) } ;
                var532 % ((var532) | 1)
            
        }
    }

}

public interface Interface13 {

}

public open class Class9 <: Interface12 & Interface13 {
    public init() { // block id: 11

    }
;
    public static let var16 : Bool = false;
    public init(optionalParam955 ! : UInt32 = UInt32(Int32(-19)), namedParam958 ! : () -> Option<Option<Range<Int32>>>) { // block id: 960
        [((-92)&127..(-114)&127:54|1), ((-11)&127..(-67)&127:(-110)|1), ((-54)&127..=42&127:(-86)|1), ((-109)&127..=(-11)&127:113|1), (97&127..71&127:102|1), (75&127..=91&127:(-67)|1), (102&127..115&127:100|1), ((-83)&127..(-41)&127:66|1), ((-44)&127..=(-69)&127:(-66)|1), (21&127..48&127:(-69)|1)][9]
    }
;
    private static let var2367 : UInt64 = UInt64(79);
    public init(namedParam27 ! : Int8, namedParam28 ! : UInt16, optionalParam29 ! : String = ",-t53m9>}n") { // block id: 31
        var33;
        func36(var2367, namedParam38 : var2373[8] | try { // block id: 2393
            Int32(7)
        } finally { // block id: 2395
            [(), (), (), (), (), (), (), (), (), ()];
            var139
        })
    }

}


public struct Aggregate89 {
    public init() { // block id: 91

    }
;
    public static var var94 : Float64 = 45.0
}


public func func149(param150 : Range<Int8>) : Bool { // block id: 151
    true
}




public func func144(param145 : Int16) : Range<Int32> { // block id: 146
    var var156 : ?UInt32 = ((-120.0) as UInt32);
    var var170 : Range<Int8> = (Int8(-4)&127..Int8(-89)&127:77|1);
    let var194 : Float32 = Float32(Float32(Float32(Float32(-122.0))));
    var loopTimeVar215 : Range<UInt64> = (UInt64(168)&127..=UInt64(146)&127:(Int64(UInt16(189))|1));
    for (i in loopTimeVar215 where (match (var156) {
        case caseVar161 : Option<UInt32> => 
            (Int8(-83)&127..Int8(-88)&127:(-22)|1)
        
        case caseVar166 : Bool => 
            ();
            var170
        
        case _ => 
            Int16(-25);
            var var182 : Int64 = 51;
            (var177&127..var177&127:(var182|1))
        
    }|>func149)) {
        match (var177) {
            case 46 | -18 | 96 | -34 => 
                var70;
                Float32(-11.0) / Float32((Int32(var194)) | 1);
                ()
            
            case 106 | 86 | 108 | 114 => 
                var205 <<= ((var33) & 7)
            
            case _ => 
                var var212 : Int64 = (-73);
                var212++
            
        };
        [false, false, true, true, false, true, false, true, false, true]
    };
    let var243 : ?Int32 = Option<Int32>.Some(Int32(UInt32(194)));
    var loopTimeVar249 : Int64 = 0;
    do {
        loopTimeVar249++;
        let var232 : Float64 = Float64(Float64(Float64((-14.0))));
        var232;
        (var243 ?? Int32(-31))
    } while ((if (false) { var226 } else { [false, false, true, false, true, true, false, true, false, false] } [3]) && loopTimeVar249 < 100 ) ;
    let var266 : (Array<Int8>, Range<UInt8>, Range<Int32>, Range<Int16>, Int8, Array<Bool>, Range<UInt64>) = ([Int8(0), Int8(57), Int8(-35), Int8(80), Int8(-108), Int8(112), Int8(102), Int8(7), Int8(61), Int8(-127)], (UInt8(96)&127..UInt8(Int8(Int8(-93)))&127:(Int64(Int64(UInt32(101)))|1)), (Int32(Int32(Int16(116)))&127..Int32(-28)&127:(Int64(Int16(Int8(85)))|1)), (Int16(-85)&127..=Int16(56)&127:123|1), Int8(Int8(Int8(Int8(-35)))), [true, false, true, false, false, true, false, false, false, false], (UInt64(28)&127..=UInt64(196)&127:(-48)|1));
    ((((-66.0) as Option<Range<Int32>>) ?? Option<Range<Int32>>.None) ?? var266[2])
}




public func func1087() : Option<Option<Range<Int32>>> { // block id: 387
    func func394(namedParam395 ! : String) : Option<Option<Option<Range<Int32>>>> { // block id: 396
        var var420 : ?Range<Int8> = (Aggregate89() as Range<Int8>);
        try { // block id: 398
            var402[4]
        } finally { // block id: 417
            (var420 as Option<Option<Range<Int32>>>)
        }
    }
;
    (func394(namedParam395 : (Option<String>.Some(var430) ?? var430)) ?? var434)
}

public func func377(param378 : Array<Bool>, namedParam379 ! : Option<Range<Int32>>) : Range<Int8> { // block id: 380
    -53.0;
    let var512 : Int64 = (-65);
    match (match (func1087()) {
            case caseVar442 => 
                Class9()
            
            case _ => 
                let var461 : Array<Int8> = Array<Int8>(10){ i => Int8(Int8(-126)) };
                if (false) { [var177, Int8(-84), var177, Int8(-84), var177, Int8(26), var177, var177, Int8(73), var177] } else { var461 } ;
                if (true) { Class9() } else { Class9() } 
            
        }) {
        case _ : Range<Int8> => 
            (Int8(95)&127..=Int8(-61)&127:19|1)
        
        case _ => 
            let var496 : Bool = ([false, true, true, true, false, true, false, false, true, true] is Rune);
            let var500 : Range<UInt64> = (UInt64(Int8(30))&127..=UInt64(UInt16(208))&127:(69|1));
            if (var496) { var500 } else { var500 } ;
            (Int8(77)&127..=Int8(94)&127:(var512|1))
        
    }
}


public func func691(param692 : Rune) : Array<Int8> { // block id: 693
    var695;
    var70;
    [Int8(-77), Int8(-9), Int8(-42), Int8(-89), Int8(-48), Int8(46), Int8(-36), Int8(82), Int8(121), Int8(-73)]
}


public interface Interface1024<T0> where T0 <: Option<Option<Range<Int8>>> {
    static func func1740(namedParam1741 ! : Range<UInt16>) : Range<Int8> { // block id: 1742
        var1745[3];
        let var2237 : (Option<Interface12>) -> Option<Range<Int8>> = func1793;
        var var2246 : (Range<UInt64>, Bool, Int8, Range<Int8>, Float32) = ((UInt64(77)&127..=UInt64(108)&127:121|1), true, Int8(UInt8(40)), (Int8(-88)&127..=Int8(4)&127:62|1), Float32(104.0));
        ((Option<Option<Range<Int8>>>.None ?? (var2240|>var2237)) ?? var2246[3])
    }

}

public interface Interface1023 <: Interface12 & Interface1024<Option<Option<Range<Int8>>>> {

}

public open class Class1020 <: Interface12 & Interface1023 & Resource {
    public init() { // block id: 1022

    }
;
    public static var var1027 : Bool = false;
    private static let var1233 : ?Interface12 = Option<Interface12>.None;
    public static let var1262 : Float32 = Float32(-75.0);
    private static func func1205(optionalParam1206 ! : Range<UInt16> = (UInt16(252)&127..UInt16(5)&127:(-80)|1), namedParam1208 ! : Option<UInt32>, optionalParam1209 ! : (UInt32, Int32, Bool, Range<Int64>, Option<Option<Option<Range<Int32>>>>) = (UInt32(31), Int32(107), true, (122&127..=(-108)&127:115|1), Option<Option<Option<Range<Int32>>>>.Some(Option<Option<Range<Int32>>>.None)), optionalParam1217 ! : Range<Int64> = (25&127..=88&127:23|1)) : Unit { // block id: 1219
        try { // block id: 1221
            var loopTimeVar1226 : Int64 = 0;
            while ((true) && loopTimeVar1226 < 100 ) {
                loopTimeVar1226++;

            };
            var1233.getOrThrow()
        } finally { // block id: 1235
            (Option<Unit>.None ?? ());
            if (true) { Class9() } else { Class9() } 
        };
        let var1251 : Array<Range<Int64>> = [(95&127..61&127:(-90)|1), (8&127..(-76)&127:125|1), ((-89)&127..=(-65)&127:(-82)|1), ((-94)&127..83&127:29|1), (23&127..(-47)&127:63|1), ((-126)&127..=(-5)&127:40|1), (99&127..=123&127:81|1), ((-41)&127..=99&127:(-120)|1), (48&127..=84&127:30|1), ((-112)&127..=(-19)&127:52|1)];
        var var1314 : Interface12 = Class9(namedParam958 : {  => Option<Option<Range<Int32>>>.None });
        let var1330 : (Range<UInt64>, UInt16, Option<Bool>, Array<Bool>, Array<Bool>, (Array<Int8>, Range<UInt8>, Range<Int32>, Range<Int16>, Int8, Array<Bool>, Range<UInt64>), UInt32) = ((UInt64(222)&127..UInt64(195)&127:78|1), UInt16(UInt8(Int8(Int8(40)))), Option<Bool>.Some((###"e+]Q^]fN&d"### is (Rune) -> Array<Int8>)), [false, false, false, true, true, false, true, false, false, true], [true, false, false, false, false, false, false, true, false, false], ([Int8(Int8(19)), Int8(56), Int8(122), Int8(-64), Int8(117), Int8(UInt8(36)), Int8(-4), Int8(-128), Int8(Int8(43)), Int8(-83)], (UInt8(52)&127..=UInt8(179)&127:0|1), (Int32(Int32(126))&127..=Int32(UInt32(117))&127:(Int64(Int32(-33))|1)), (Int16(-10)&127..=Int16(37)&127:(-37)|1), Int8(UInt8(Int8(-9))), [true, false, true, true, true, false, false, false, true, false], (UInt64(228)&127..=UInt64(Int32(65))&127:(Int64(Int8(-2))|1))), UInt32(59));
        let var1415 : ??Option<Range<Int32>> = (Option<Option<Option<Range<Int32>>>>.Some(Option<Option<Range<Int32>>>.Some(Option<Range<Int32>>.None)) as Option<Option<Range<Int32>>>);
        if (match (var1251) {
            case caseVar1255 => 
                var205 /= ((var33) | 1);
                var1262 + var1262;
                var1027
            
            case _ => 
                ();
                var var1271 : Bool = ((Int16(-1) as UInt32) is Option<Unit>);
                var1271
            
            case _ => 
                !true
            
        }) { // block id: 1279
            match (var561) {
                case (_ : Int8,_ : UInt8,(_ : Float32,_ : Int16,_,caseVar1284,caseVar1285,caseVar1286 : UInt8,caseVar1287 : Range<UInt64>)) => 
                    ();
                    var70;
                    var1262 * var1262
                
                case (caseVar1296 : Unit,_,(_,_ : UInt8,caseVar1297 : Float64,_ : Range<Int32>,_,_,caseVar1298)) => 
                    var1262
                
                case (caseVar1303 : Aggregate89,_,_) => 
                    var1262 % Float32((Int32(Float32(63.0))) | 1)
                
                case _ => 
                    Class1020();
                    -Float32(38.0)
                
            };
            var1314;
            var loopTimeVar1325 : Int64 = 0;
            while ((var1027) && loopTimeVar1325 < 100 ) {
                loopTimeVar1325++;
                var70
            }
        } else if (if (try { // block id: 1328
            var1330;
            var1379 || var1027
        } catch (e: Exception) { // block id: 1384
            var177;
            !var1379
        }) { // block id: 1388
            Class1020();
            false
        } else { // block id: 1391
            true
        }) { // block id: 1393
            var loopTimeVar1400 : Int64 = 0;
            do {
                loopTimeVar1400++;
                (Int32(3)&127..Int32(98)&127:(-47)|1);
                ()
            } while ((var1379) && loopTimeVar1400 < 100 ) ;
            try (resource = Class1020()) { // block id: 1402
                var1091--
            } catch (e: Exception) { // block id: 1405
                UInt32(101);
                var109 *= Int32(29)
            } finally { // block id: 1410
                var139 /= ((var139) | 1);
                var1415;
                var70
            }
        }
    }
;
    static var var1514 : Interface1024<Option<Option<Range<Int8>>>> = Class1020();
    static var var1540 : Int16 = Int16(4);
    public init(optionalParam1172 ! : (UInt32, Int32, Bool, Range<Int64>, Option<Option<Option<Range<Int32>>>>) = (UInt32(Int16(UInt16(120))), Int32(UInt8(Int8(UInt8(161)))), true, (95&127..=Int64((-112))&127:(Int64(UInt8(135))|1)), Option<Option<Option<Range<Int32>>>>.None), optionalParam1189 ! : UInt32 = UInt32(UInt8(197)), namedParam1192 ! : Option<Array<Int8>>, optionalParam1193 ! : UInt64 = UInt64(213)) { // block id: 1195
        Option<Range<UInt8>>.None;
        var var1198 : Range<UInt64> = (UInt64(UInt16(56))&127..=UInt64(46)&127:((-16)|1));
        var1198;
        var var1440 : Int8 = Int8(Int8(-89));
        let var1472 : ?UInt32 = Option<UInt32>.Some(UInt32(98));
        let var1505 : Interface1024<Option<Option<Range<Int8>>>> = Class1020();
        func1205(namedParam1208 : if (if (true) { // block id: 1424
            let var1432 : Int8 = Int8(43);
            if (false) { [var177, Int8(82), var177, var1432, var1435, Int8(94), var177, var1440, Int8(25), Int8(-17)] } else { [Int8(-20), Int8(-23), Int8(75), Int8(-16), Int8(0), Int8(-81), Int8(-64), Int8(94), Int8(-98), Int8(34)] } ;
            true
        } else { // block id: 1447
            if (var1027) { var1233 } else { var1233 } ;
            if (true) { Option<Interface12>.None } else { Option<Interface12>.None } ;
            var1027
        }) { try { // block id: 1458
            var70;
            let var1461 : ?UInt32 = (((Int8(105)&127..=Int8(UInt8(163))&127:(Int64((-31))|1)) as Range<Int32>) as UInt32);
            var1461
        } finally { // block id: 1470
            var1472
        } } else { (var1481 ?? var1472) } , optionalParam1217 : (try { // block id: 1486
            ();
            -var1262;
            var532
        } catch (_) { // block id: 1491
            (-49)
        }&127..match (Aggregate89()) {
            case caseVar1497 => 
                if (var1027) { [var1152, Class1020(), var1505, var1505, Class1020(), Class1020(), Class1020(), Class1020(), var1514, var1514] } else { [var1152, var1505, var1505, Class1020(), Class1020(), var1152, Class1020(), Class1020(), var1505, Class1020()] } ;
                var532 | var532
            
            case caseVar1533 : Range<Int8> => 
                var33 ** (UInt8(110) & 3);
                var1540 <<= ((Int16(106)) & 7);
                var532 + var532
            
            case caseVar1548 : Option<Bool> => 
                if (true) { 'b' } else { 'y' } ;
                44 / (((-98)) | 1)
            
            case _ => 
                true && true;
                (-9)
            
        }&127:(match (var1233) {
            case caseVar1567 : Float32 => 
                var70;
                var70;
                var532
            
            case _ : Int64 => 
                var532 + var532
            
            case _ : Aggregate89 => 
                ();
                (-4)
            
            case _ => 
                (UInt32(201)&127..=UInt32(180)&127:(-10)|1);
                8 & var532
            
        }|1)))
    }
;
    static let var1698 : Range<Int64> = (94&127..=76&127:92|1);
    public static let var1722 : Bool = false;
    public init(optionalParam1607 ! : Bool = false, optionalParam1609 ! : Rune = 'J', optionalParam1611 ! : Array<Range<Int64>> = [((-102)&127..=Int64(UInt32(126))&127:(45|1)), ((-45)&127..108&127:((-69)|1)), (53&127..(-87)&127:(19|1)), ((-88)&127..=15&127:22|1), (Int64(Int32(-1))&127..Int64(UInt16(Int16(111)))&127:(Int64(UInt16(111))|1)), ((-98)&127..=69&127:(-77)|1), ((-9)&127..(-9)&127:(-125)|1), (50&127..=Int64(Int32(-51))&127:(Int64(UInt64(UInt8(79)))|1)), (Int64(Int32(UInt16(196)))&127..Int64(UInt64(UInt16(223)))&127:(Int64(Int16(UInt8(249)))|1)), ((-113)&127..68&127:(-66)|1)], namedParam1655 ! : Int8) { // block id: 1656
        var var1674 : Bool = true;
        var loopTimeVar1707 : Range<UInt64> = (UInt64((-111))&127..=UInt64(UInt8(Int8(Int8(-63))))&127:(Int64(UInt8(155))|1));
        var loopTimeVar1726 : Int64 = 0;
        var loopTimeVar1731 : Int64 = 0;
        var loopTimeVar1737 : Int64 = 0;
        [(var1027, [false, false, true, true, true, var1379, true, true, var1674, true], var1678, (), Int32(-95))[3], var70, var70, (var205 &= var33), func1205(optionalParam1206 : (UInt16(130)&127..=UInt16(246)&127:(-123)|1), namedParam1208 : Option<UInt32>.None, optionalParam1209 : (var1091, var139, false, ((-15)&127..(-43)&127:119|1), Option<Option<Option<Range<Int32>>>>.None), optionalParam1217 : var1698), for (i in loopTimeVar1707 where var1379) {
            Option<Unit>.None;
            var109 -= Int32(9)
        }, (Option<Unit>.None ?? var70), do {
            loopTimeVar1726++;

        } while ((var1722) && loopTimeVar1726 < 100 ) , do {
            loopTimeVar1731++;

        } while ((var1027) && loopTimeVar1731 < 100 ) , while ((var1674) && loopTimeVar1737 < 100 ) {
            loopTimeVar1737++;
            Aggregate89()
        }][9];
        var var2271 : UInt16 = UInt16(UInt8(Int8(-30)));
        func1740(namedParam1741 : (Option<Range<UInt16>>.Some((var1937&127..=UInt16(191)&127:(var532|1))) ?? if (var1722) { (UInt16(191)&127..=UInt16(36)&127:7|1) } else { (var1937&127..var2271&127:((-63)|1)) } ))
    }
;
    public static func func36(param37 : UInt64, namedParam38 ! : Int32) : Int64 { // block id: 39
        let var1095 : Range<UInt16> = (UInt16(UInt8(4))&127..=UInt16(Int8(-120))&127:(Int64(UInt8(UInt8(UInt8(30))))|1));
        match ((func47('z', Class9(), var177, var532) ?? (var1095|>func1087<Option<Int32>>))) {
            case caseVar1107 => 
                if (false) { (var33&127..=UInt8(229)&127:(120|1)) } else { var829 } ;
                Int16(38)
            
            case _ => 
                var109 += var109;
                var70;
                -Int16(-27)
            
        };
        var var1160 : Interface1024<Option<Option<Range<Int8>>>> = Class1020();
        let var2277 : Array<Range<Int64>> = [(8&127..=(-126)&127:(-98)|1), ((-56)&127..(-70)&127:(Int64(UInt64(195))|1)), (12&127..(-93)&127:118|1), ((-79)&127..Int64(Int8(UInt8(34)))&127:(Int64(49)|1)), (Int64(UInt64(49))&127..=Int64(Int16(UInt8(24)))&127:(Int64(UInt64(UInt32(145)))|1)), ((-126)&127..=(-80)&127:20|1), (65&127..=(-75)&127:91|1), (82&127..=5&127:(-113)|1), ((-64)&127..=(-119)&127:(-23)|1), ((-107)&127..18&127:(-25)|1)];
        let var2357 : Range<UInt64> = (UInt64(191)&127..=UInt64(40)&127:(-76)|1);
        match (try { // block id: 1129
                var var1131 : ?UInt32 = Option<UInt32>.None;
                var1131;
                var var1135 : Int64 = 90;
                var1135 -= var1135;
                let var1140 : Bool = ((UInt32(Int8(Int8(-101)))&127..UInt32(UInt16(21))&127:(Int64(UInt32(96))|1)) is Option<Range<Int8>>);
                if (var1140) { [var1152, Class1020(), var1152, Class1020(), var1152, Class1020(), var1160, Class1020(), var1160, Class1020()] } else { [var1152, var1160, var1160, Class1020(), Class1020(namedParam1192 : Option<Array<Int8>>.None), Class1020(optionalParam1172 : var402, namedParam1192 : var549, optionalParam1193 : UInt64(219)), Class1020(), Class1020(optionalParam1189 : var1091, namedParam1192 : Option<Array<Int8>>.None, optionalParam1193 : UInt64(250)), var1160, Class1020()] } 
            } catch (e: Exception) { // block id: 1602
                [var1152, Class1020(optionalParam1611 : var2277, namedParam1655 : Int8(116)), Class1020(namedParam1192 : Option<Array<Int8>>.Some(var1839), optionalParam1193 : UInt64(105)), var1152, var1160, var1152, Class1020(namedParam1192 : var549, optionalParam1193 : var2162), var2319, var2319, var1152]
            }[3]) {
            case _ : Option<Option<UInt32>> => 
                Option<Unit>.None;
                ();
                5
            
            case caseVar2332 => 
                (-41)
            
            case _ : Int8 => 
                var1937 >>= ((UInt16(128)) & 7);
                var532 << ((var532) & 7)
            
            case _ : Option<Range<UInt8>> => 
                Option<Int32>.Some(Int32(27));
                (-69)
            
            case _ => 
                Option<Range<UInt8>>.Some((UInt8(32)&127..=UInt8(36)&127:(-108)|1));
                if (true) { var2357 } else { (UInt64(118)&127..=var2162&127:(var532|1)) } ;
                var532 % ((var532) | 1)
            
        }
    }

    public func isClosed(): Bool { return false }
    public func close(): Unit {}
}

public func func727(param728 : Interface12) : Bool { // block id: 729
    var var751 : Bool = (((UInt64(UInt64(122))&127..UInt64(UInt8(126))&127:(Int64(Int16(-44))|1)), UInt16(UInt8(138)), Option<Bool>.Some(((Int8(71)&127..Int8(115)&127:(104|1)) is (Range<UInt64>, UInt16, Option<Bool>, Array<Bool>, Array<Bool>, (Array<Int8>, Range<UInt8>, Range<Int32>, Range<Int16>, Int8, Array<Bool>, Range<UInt64>), UInt32))), [true, false, true, true, true, false, true, true, true, false], [true, true, false, false, false, false, false, true, true, false], ([Int8(71), Int8(-122), Int8(97), Int8(0), Int8(-39), Int8(81), Int8(-80), Int8(46), Int8(-115), Int8(-126)], (UInt8(245)&127..=UInt8(167)&127:(-1)|1), (Int32(-122)&127..Int32(25)&127:106|1), (Int16(-114)&127..=Int16(14)&127:((-20)|1)), Int8(51), [false, false, false, false, false, true, true, false, true, false], (UInt64(231)&127..UInt64(159)&127:91|1)), UInt32(Int32(Int32(-48)))) is Array<Bool>);
    var var848 : Range<UInt64> = (UInt64(215)&127..UInt64(233)&127:53|1);
    var var893 : Int16 = Int16(UInt16(49));
    (if (false) { // block id: 739
        var var743 : UInt16 = UInt16(UInt8(UInt8(234)));
        var var808 : Bool = true;
        var var842 : Int16 = Int16(34);
        ((UInt64(161)&127..=UInt64(2)&127:(-20)|1), var743, Option<Bool>.None, [false, var751, var751, var751, var751, false, var751, var751, false, false], [var751, true, false, var808, var751, var751, true, false, var751, true], ([Int8(17), var177, var177, var177, var177, var177, Int8(-120), Int8(-92), Int8(-33), Int8(-119)], var829, (Int32(-72)&127..=var139&127:(var532|1)), (Int16(-14)&127..var842&127:((-38)|1)), var177, var226, var848), UInt32(238))
    } else if (true) { // block id: 852
        var70;
        var70;
        let var858 : UInt64 = UInt64(UInt8(73));
        let var868 : Bool = ((UInt8(144)&127..UInt8(202)&127:(Int64(UInt32(240))|1)) is Int32);
        var var882 : Bool = false;
        ((var858&127..UInt64(132)&127:((-39)|1)), UInt16(207), Option<Bool>.Some(false), [var868, var751, var751, var868, var868, false, true, var882, var751, false], [false, true, true, true, false, true, false, false, true, true], ([Int8(43), Int8(-38), Int8(31), Int8(-50), Int8(-91), Int8(-50), Int8(42), Int8(-57), Int8(-8), Int8(-107)], (UInt8(179)&127..UInt8(45)&127:89|1), (Int32(72)&127..=Int32(50)&127:(-97)|1), (var893&127..Int16(-57)&127:(var532|1)), Int8(117), [false, true, true, false, true, false, false, false, false, true], (UInt64(32)&127..=var858&127:((-14)|1))), UInt32(51))
    } else { // block id: 905
        ();
        var109 >> ((Int32(-112)) & 7);
        var var911 : (Range<UInt64>, UInt16, Option<Bool>, Array<Bool>, Array<Bool>, (Array<Int8>, Range<UInt8>, Range<Int32>, Range<Int16>, Int8, Array<Bool>, Range<UInt64>), UInt32) = ((UInt64(128)&127..UInt64(234)&127:(-112)|1), UInt16(245), Option<Bool>.None, [true, ([Int8(33), Int8(-71), Int8(107), Int8(-25), Int8(-33), Int8(14), Int8(-63), Int8(-49), Int8(-121), Int8(124)] is Option<Range<Int32>>), false, ((Int32(37)&127..=Int32(62)&127:((-52)|1)) is Int32), ([false, false, false, true, false, true, false, true, false, true] is Range<UInt64>), true, false, (Option<Range<UInt8>>.Some((UInt8(209)&127..UInt8(154)&127:((-67)|1))) is Int8), true, false], [((UInt64(115)&127..=UInt64(166)&127:33|1) is (Int64, UInt8, UInt64) -> Range<Int8>), false, true, ((UInt32(177), Int32(-92), false, (34&127..(-121)&127:(-86)|1), Option<Option<Option<Range<Int32>>>>.None) is Interface13), ("""
SJd,<
<W'Ao
""" is Range<UInt16>), (Class9(optionalParam955 : UInt32(155), namedParam958 : func1087) is (UInt32, Int32, Bool, Range<Int64>, Option<Option<Option<Range<Int32>>>>)), (Option<UInt32>.Some(UInt32(228)) is () -> Array<Int8>), true, (UInt32(Int32(-71)) is Rune), (Float64(Float32(20.0)) is Option<Range<Int8>>)], ([Int8(11), Int8(Int8(-96)), Int8(114), Int8(Int8(-30)), Int8(110), Int8(Int8(57)), Int8(UInt8(195)), Int8(Int8(-18)), Int8(UInt8(201)), Int8(Int8(-89))], (UInt8(UInt8(236))&127..UInt8(127)&127:(62|1)), (Int32(UInt32(217))&127..Int32(53)&127:(Int64(Int8(31))|1)), (Int16(68)&127..=Int16(-93)&127:40|1), Int8(Int8(Int8(37))), [true, true, false, false, true, true, true, false, true, true], (UInt64(96)&127..=UInt64(184)&127:(Int64((-27))|1))), UInt32(52));
        var911
    }[2] ?? Class1020.var1027)
}

func func47(param48 : Rune, param49 : Interface12, param50 : Int8, param51 : Int64) : Option<UInt32> { // block id: 52
    let var114 : Bool = true;
    func func64() : Array<Int8> { // block id: 65
        let var129 : UInt32 = UInt32(UInt32(Int32(-98)));
        let var294 : (Int16) -> Range<Int32> = { lambdaParameter297 : Int16 => (Int32(49)&127..=Int32(-87)&127:(-128)|1) };
        func func80(optionalParam81 ! : Int16 = Int16(UInt8(47))) : Unit { // block id: 84
            Option<UInt32>.None;
            try { // block id: 87
                Aggregate89.var94;
                [true, true, false, false, true, true, true, true, false, true][6]
            } catch (_) { // block id: 100
                match {
                    case true => 
                    -param50;
                    Int32(-37) % ((var109) | 1);
                    false
                    case _ => 
                    var114
                }
            } finally { // block id: 116
                let var123 : ?Range<UInt8> = Option<Range<UInt8>>.None;
                (var123 ?? (UInt8(82)&127..UInt8(134)&127:6|1));
                ((var129&127..=UInt32(243)&127:(param51|1)) is Int8)
            };
            try (resource = Class1020()) { // block id: 136
                var139++
            } catch (e: Exception) { // block id: 142
                Int16(-22)|>var294;
                var loopTimeVar306 : Int64 = 0;
                do {
                    loopTimeVar306++;
                    ()
                } while ((var114) && loopTimeVar306 < 100 ) 
            }
        }
;
        var loopTimeVar540 : Int64 = 0;
        do {
            loopTimeVar540++;
            var70;
            func func73(namedParam74 ! : Int64, optionalParam75 ! : UInt8 = UInt8(6), namedParam77 ! : UInt64) : Range<Int8> { // block id: 78
                func80();
                if ((param50 is UInt32)) { // block id: 311
                    var129;
                    Int8(-65)
                } else if ([false, true, false, false, true, false, true, true, true, false][4]) { // block id: 318
                    ();
                    param50 % ((var177) | 1)
                } else { // block id: 323
                    [var114, var114, var114, true, false, var114, var114, var114, var114, var114];
                    Int8(-4) % ((Int8(-108)) | 1)
                } * Int8(try { // block id: 340
                    UInt32(107) % ((var129) | 1);
                    UInt8(71)
                } finally { // block id: 345
                    UInt8(71) + UInt8(100)
                });
                (try { // block id: 355
                    var var358 : Bool = false;
                    var358 &&= true;
                    namedParam77;
                    var var363 : ?Range<Int8> = ((UInt32(Int16(UInt8(0)))&127..UInt32(Int8(-97))&127:((-34)|1)) as Range<Int8>);
                    var363
                } finally { // block id: 372
                    var70;
                    ();
                    Option<Range<Int8>>.None
                } ?? func377([false, true, true, false, false, var114, true, true, var114, var114], namedParam379 : (Option<Option<Range<Int32>>>.None ?? Option<Range<Int32>>.Some((var109&127..Int32(-77)&127:(var532|1))))))
            }
;
            func73(namedParam74 : 31, namedParam77 : UInt64(203))
        } while ((true) && loopTimeVar540 < 100 ) ;
        var var700 : (Rune) -> Array<Int8> = { lambdaParameter703 : Rune => [Int8(Int8(Int8(-25))), Int8(Int8(57)), Int8(-2), Int8(UInt8(213)), Int8(Int8(Int8(-117))), Int8(120), Int8(121), Int8(-84), Int8(-58), Int8(-118)] };
        (try { // block id: 547
            var549
        } catch (e: Exception) { // block id: 551
            Int32(-119);
            if (var114) { var549 } else { Option<Array<Int8>>.None } 
        } ?? (var561[1] ?? ('M'|>var700)))
    }
;
    func64()[5];
    var var1049 : UInt32 = UInt32(Int32(-8));
    Option<UInt32>.Some(if ((param49|>func727)) { // block id: 1031
        var var1033 : ?Int32 = (Class1020() as Int32);
        var1033;
        ();
        let var1039 : UInt32 = UInt32(UInt8(167));
        var1039 >> ((UInt32(119)) & 7)
    } else if (true) { // block id: 1044
        var70;
        var226;
        var1049 >> ((var1049) & 7)
    } else { // block id: 1053
        let var1061 : Range<Int64> = ((-96)&127..28&127:((-47)|1));
        var var1069 : (UInt32, Int32, Bool, Range<Int64>, Option<Option<Option<Range<Int32>>>>) = (UInt32(62), Int32(-16), (UInt32(Int16(Int16(-47))) is Option<UInt32>), (67&127..=22&127:(-110)|1), Option<Option<Option<Range<Int32>>>>.None);
        if (true) { (UInt32(112), Int32(-9), var114, var1061, Option<Option<Option<Range<Int32>>>>.Some(var434)) } else { var1069 } ;
        var1049 | var1049
    })
}

public func func1087<T0>(param1088 : Range<UInt16>) : UInt32 { // block id: 1089
    var1091
}





public func func1920(param1921 : Option<UInt32>, param1922 : UInt64, param1923 : Option<Array<Int8>>) : Float64 { // block id: 1924
    var var1947 : (Array<Int8>, Range<UInt8>, Range<Int32>, Range<Int16>, Int8, Array<Bool>, Range<UInt64>) = ([Int8(43), Int8(UInt8(Int8(7))), Int8(UInt8(UInt8(214))), Int8(118), Int8(-109), Int8(91), Int8(102), Int8(UInt8(UInt8(123))), Int8(71), Int8(UInt8(200))], (UInt8(187)&127..=UInt8(238)&127:103|1), (Int32(122)&127..Int32(51)&127:(-116)|1), (Int16(-73)&127..Int16(19)&127:76|1), Int8(Int8(UInt8(85))), [true, false, true, true, false, true, true, false, true, true], (UInt64(210)&127..UInt64(UInt64(35))&127:(Int64(Int64(UInt32(30)))|1)));
    var var2014 : ??Option<Range<Int32>> = (UInt32(UInt8(UInt8(119))) as Option<Option<Range<Int32>>>);
    match (try { // block id: 1927
            Option<Option<Range<Int8>>>.None;
            ((-38)&127..(-19)&127:((-33)|1));
            ###"+tXyr6N[W&"###
        } catch (_) { // block id: 1934
            var1937 >>= ((var1937) & 7);
            var430;
            var430
        }) {
        case "Gu~AP[;EMJ" => 
            var1947;
            Option<Int32>.Some(Int32(65));
            ()
        
        case caseVar1986 : Interface1023 => 
            var70;
            ();
            var1091 += var1091
        
        case _ : Option<Range<Int32>> => 
            let var1998 : Range<Int8> = (Int8(37)&127..=Int8(110)&127:(-9)|1);
            Option<Range<Int8>>.Some(var1998);
            var70;
            var70
        
        case _ : Range<Int16> => 
            (UInt32(173), Int32(-14), true, (var532&127..=(-7)&127:((-120)|1)), var2014);
            let var2020 : ?Range<Int8> = (Class1020(optionalParam1172 : (UInt32(83), Int32(-110), (Option<Array<Int8>>.Some([Int8(126), Int8(-94), Int8(82), Int8(126), Int8(48), Int8(-119), Int8(81), Int8(27), Int8(-77), Int8(0)]) is Option<Range<Int8>>), (49&127..89&127:75|1), Option<Option<Option<Range<Int32>>>>.None), optionalParam1189 : UInt32(229), namedParam1192 : (UInt16(110) as Array<Int8>)) as Range<Int8>);
            var2020;
            var70
        
        case _ => 
            var70;
            var var2040 : Bool = true;
            var2040 &&= var2040
        
    };
    var var2116 : Unit = ();
    let var2155 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    match ((Option<Unit>.None ?? ())) {
        case () => 
            let var2052 : Array<Range<Int64>> = [((-121)&127..43&127:86|1), ((-59)&127..=64&127:110|1), ((-83)&127..(-61)&127:57|1), (Int64(Int8(UInt8(166)))&127..14&127:(Int64(UInt16(237))|1)), ((-58)&127..103&127:(-83)|1), (Int64(Int32(-26))&127..=70&127:(Int64(UInt64(97))|1)), (Int64(Int16(UInt16(146)))&127..=56&127:((-83)|1)), (1&127..43&127:(124|1)), (Int64(Int8(30))&127..(-40)&127:((-48)|1)), (43&127..(-97)&127:93|1)];
            var2052;
            [(), var70, (), var70, (), (), (), var70, (), ()]
        
        case () => 
            let var2103 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
            var2103
        
        case () | () | () => 
            let var2123 : Unit = ();
            if (var1379) { [(), (), (), (), (), (), (), (), (), ()] } else { [(), var70, (), var2116, var2116, var2116, var2116, var2116, var2123, var70] } 
        
        case caseVar2128 : Array<Range<Int64>> => 
            [(), (), var70, var2116, (), (), (), var2116, var2116, var2116];
            [var70, (), (), (), (), (), var70, var70, var70, ()]
        
        case _ => 
            var2155
        
    }[7];
    (-12.0)
}

public func func1793(param1794 : Option<Interface12>) : Option<Range<Int8>> { // block id: 1795
    var1799|>func691;
    var var1866 : (Int32, Range<Int32>, Range<UInt8>, Range<UInt32>, Array<Int8>, UInt64, Bool, Array<Int8>, Range<UInt8>) = (Int32(-3), (Int32(53)&127..=Int32(Int16(-92))&127:((-47)|1)), (UInt8(UInt8(UInt8(98)))&127..UInt8(172)&127:((-90)|1)), (UInt32(Int16(-18))&127..UInt32(171)&127:(Int64(UInt16(144))|1)), [Int8(68), Int8(2), Int8(-75), Int8(-80), Int8(98), Int8(-54), Int8(-54), Int8(111), Int8(114), Int8(-26)], UInt64(246), false, [Int8(48), Int8(-45), Int8(-36), Int8(-55), Int8(44), Int8(37), Int8(UInt8(UInt8(164))), Int8(Int8(UInt8(151))), Int8(-38), Int8(Int8(-102))], (UInt8(200)&127..UInt8(UInt8(60))&127:(Int64(UInt16(Int8(-37)))|1)));
    if (if (false) { [var1379, true, var1379, var1379, var1379, true, true, false, var1379, true] } else { [true, false, false, true, true, false, false, true, false, true] } [2]) { try { // block id: 1819
        var var1821 : Array<Int8> = [Int8(116), Int8(50), Int8(104), Int8(-35), Int8(-46), Int8(79), Int8(80), Int8(13), Int8(66), Int8(-19)];
        var1821
    } finally { // block id: 1823
        (UInt16(77)&127..=UInt16(79)&127:70|1);
        if (var1379) { [Int8(63), var1435, Int8(-100), var177, Int8(-127), var177, var177, Int8(5), var177, var177] } else { var1839 } 
    } } else { if (false) { // block id: 1845
        (var139, (Int32(114)&127..=Int32(-57)&127:(-22)|1), (UInt8(135)&127..UInt8(156)&127:(-27)|1), (UInt32(105)&127..=UInt32(43)&127:((-11)|1)), [Int8(-95), Int8(-22), Int8(111), Int8(9), Int8(-95), Int8(16), Int8(56), Int8(92), Int8(37), Int8(35)], UInt64(251), false, [Int8(-42), Int8(80), Int8(-89), Int8(-3), Int8(-85), Int8(-100), Int8(80), Int8(28), Int8(-67), Int8(19)], (UInt8(175)&127..=UInt8(253)&127:126|1))
    } else if (var1379) { // block id: 1860
        var70;
        var70;
        if (var1379) { var1866 } else { var1866 } 
    } else { // block id: 1913
        var1866
    }[4] } ;
    let var2198 : Array<Range<Int64>> = [(95&127..62&127:(Int64(Int16(UInt16(69)))|1)), ((-126)&127..=(-10)&127:116|1), (Int64(Int16(UInt16(158)))&127..Int64(UInt8(72))&127:((-55)|1)), (40&127..28&127:43|1), (103&127..=40&127:63|1), ((-32)&127..=76&127:(-43)|1), (74&127..(-48)&127:58|1), (63&127..73&127:(-35)|1), ((-95)&127..Int64(UInt64(178))&127:(77|1)), ((-84)&127..=(-16)&127:(-86)|1)];
    var var2232 : Range<UInt16> = (UInt16(233)&127..=UInt16(214)&127:74|1);
    match (func1920(Option<UInt32>.Some(var1091), var2162, var549)) {
        case _ => 
            var70;
            var70;
            let var2227 : ?Range<Int8> = Option<Range<Int8>>.Some((Int8(87)&127..=Int8(72)&127:(-66)|1));
            if (true) { var2176 } else { (UInt32(31), (Int32(104)&127..=Int32(118)&127:103|1), var2198, 'F', var2227, [false, false, false, false, true, true, false, false, false, true], var2232, var1435) } 
        
    }[4]
}


main(): Int64 {
    try {
        var var21 : Bool = (() is Class9);
        var loopTimeVar2410 : Int64 = 0;
        while ((Class9.var16) && loopTimeVar2410 < 100 ) {
            loopTimeVar2410++;
            if (var21) { Class9() } else { Class9(namedParam27 : Int8(-35), namedParam28 : var2400, optionalParam29 : ###"~Yka{\"E;mXY"###) } ;
            var2407
        };
        if (var21) { // block id: 2413
            (-63)
        } else { // block id: 2415
            let var2418 : Int64 = 110;
            var2418 < (-56);
            8
        }
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Class1020 {

}

extend Class9 {

}

extend Aggregate89 {

}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_trailing_closure_only_follow_name
// ASSERT: scan parse_expected_expr_or_decl_in
// ASSERT: scan parse_expected_catch_or_finally_in_try
// ASSERT: scan parse_unexpected_declaration_in_scope
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_redundant_modifier
// ASSERT: scan parse_expected_character
// ASSERT: scan parse_expected_while_in_do_while


