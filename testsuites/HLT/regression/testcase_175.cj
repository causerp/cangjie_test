/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args

public var var_1665979230477_28 : Int32 = Int32(48)
public let var_1665979230477_38 : Bool = (Float64(Float64((-18.0))) is UInt32)
public let var_1665979230477_46 : Unit = ()
public var var_1665979230477_50 : UInt16 = UInt16(UInt8(95))
public var var_1665979230477_97 : Int16 = Int16(UInt16(Int8(-66)))
public let var_1665979230477_144 : UInt8 = UInt8(Int8(Int8(Int8(-115))))
let var_1665979230477_155 : UInt64 = UInt64(198)
public var var_1665979230477_174 : Range<UInt8> = ((UInt8(UInt8(Int8(Int8(51))))&127)..=(UInt8(161)&127):((Int64(UInt32(UInt8(UInt8(191))))|1)))
public var var_1665979230477_192 : Interface_1665979230477_129 = Class_1665979230477_115()
public let var_1665979230477_211 : Int64 = 122
public var var_1665979230477_219 : Range<Int32> = ((Int32(-22)&127)..(Int32(18)&127):((Int64(UInt64(84))|1)))
var var_1665979230477_236 : UInt32 = UInt32(UInt32(239))
public var var_1665979230477_277 : ?Int64 = (Class_1665979230477_115() as Int64)
let var_1665979230477_283 : (Int16, Bool, Int64, Range<UInt64>, Unit, UInt8, Array<Int64>) = (Int16(-127), true, Int64(96), ((UInt64(226)&127)..=(UInt64(64)&127):((-33)|1)), (), UInt8(66), [Int64(Int8(UInt8(Int8(UInt8(237))))), Int64(UInt64(48)), Int64(UInt8(237)), Int64(UInt64(UInt32(UInt32(115)))), Int64(Int64(Int16(UInt16(Int16(10))))), Int64(Int32(UInt16(Int16(UInt16(155))))), Int64(Int16(UInt8(14))), 123, Int64(UInt8(3)), Int64(Int16(-26))])
func func_1665979230477_112<T0>() : Unit { // block id: 113

}

public interface Interface_1665979230477_130<T0> {

}

public interface Interface_1665979230477_129 <: Interface_1665979230477_130<Unit> {

}

public interface Interface_1665979230477_128 <: Interface_1665979230477_129 & Interface_1665979230477_130<Unit> {

}

public interface Interface_1665979230477_127<T0> <: Interface_1665979230477_128 {

}

public interface Interface_1665979230477_131 {

}

public interface Interface_1665979230477_126 <: Interface_1665979230477_127<Range<Int8>> & Interface_1665979230477_131 {

}

public interface Interface_1665979230477_125 <: Interface_1665979230477_126 {

}

public interface Interface_1665979230477_124 <: Interface_1665979230477_125 {

}

public interface Interface_1665979230477_123 <: Interface_1665979230477_124 {

}

public interface Interface_1665979230477_122 <: Interface_1665979230477_123 {

}

public interface Interface_1665979230477_121 <: Interface_1665979230477_122 & Interface_1665979230477_124 {

}

public interface Interface_1665979230477_120 <: Interface_1665979230477_121 {

}

public interface Interface_1665979230477_119 <: Interface_1665979230477_120 & Interface_1665979230477_130<Unit> {

}

public interface Interface_1665979230477_118 <: Interface_1665979230477_119 {

}

public open class Class_1665979230477_115 <: Interface_1665979230477_118 & Interface_1665979230477_131 {
    public init() { // block id: 117

    }
;
    static var var_1665979230477_134 : Int16 = Int16(-78)
}

public func func_1665979230477_92<T0, T1>(param_1665979230477_93 : Int8) : Int16 { // block id: 94
    var var_1665979230477_164 : Range<UInt64> = ((UInt64(158)&127)..(UInt64(180)&127):(20|1));
    var_1665979230477_97 % ((try { // block id: 102
        try { // block id: 104
            ();
            ();
            var_1665979230477_50
        } catch (e: Exception) { // block id: 108
            ();
            var_1665979230477_50
        };
        func_1665979230477_112<Array<Int64>>();
        Class_1665979230477_115.var_1665979230477_134
    } finally { // block id: 136
        let var_1665979230477_159 : Int64 = 95;
        try { // block id: 138
            var var_1665979230477_141 : UInt8 = UInt8(98);
            var_1665979230477_141 = var_1665979230477_144;
            ();
            ((UInt64(243)&127)..(UInt64(176)&127):((-2)|1))
        } catch (e: Exception) { // block id: 151
            var_1665979230477_46;
            ((var_1665979230477_155&127)..(UInt64(129)&127):((var_1665979230477_159|1)))
        } finally { // block id: 161
            var_1665979230477_46;
            var_1665979230477_164
        };
        try { // block id: 167
            var_1665979230477_97 ^ var_1665979230477_97;
            if (true) { var_1665979230477_174 } else { var_1665979230477_174 } ;
            var_1665979230477_97
        } finally { // block id: 187
            Int16(121)
        }
    }) | 1)
}



main(): Int64 {
    try {
        let var_1665979230477_23 : Float64 = 88.0;
        var loopTimeVar_1665979230477_56 : Array<UInt64> = [UInt64(Int8(Int8(-43))), UInt64(Int32(91)), UInt64(159), UInt64(222), UInt64(232), UInt64(UInt16(UInt8(Int8(UInt8(UInt8(101)))))), UInt64(Int8(UInt8(7))), UInt64(65), UInt64(251), UInt64(43)];
        for (i in loopTimeVar_1665979230477_56 where true) {
            ();
            if (false || true) { // block id: 15
                var var_1665979230477_18 : Bool = true;
                var_1665979230477_18 ||= false;
                var_1665979230477_23 != (-99.0)
            } else if (match (var_1665979230477_28) {
                case _ => 
                    continue;
                    let var_1665979230477_35 : Int32 = Int32(-20);
                    -var_1665979230477_35;
                    var_1665979230477_38
                
            }) { // block id: 43
                UInt32(48);
                var_1665979230477_46;
                var_1665979230477_50 <= UInt16(170)
            } else { // block id: 54
                var_1665979230477_38
            }
        };
        let var_1665979230477_207 : Int8 = Int8(-84);
        let var_1665979230477_247 : Interface_1665979230477_124 = Class_1665979230477_115();
        if (true) { // block id: 90
            Int8(-59)|>func_1665979230477_92<Interface_1665979230477_119, Interface_1665979230477_131>;
            var_1665979230477_192;
            96
        } else if (((var_1665979230477_28, Option<Bool>.None, ((var_1665979230477_207&127)..(Int8(76)&127):((var_1665979230477_211|1))), ((var_1665979230477_211&127)..(var_1665979230477_211&127):(((-107)|1))), Int16(-87), var_1665979230477_219)[1] ?? try { // block id: 228
            false
        } catch (e: Exception) { // block id: 230
            ();
            false
        } finally { // block id: 233
            var_1665979230477_236 /= ((var_1665979230477_236) | 1);
            var_1665979230477_207 >= var_1665979230477_207
        })) { // block id: 243
            if (true) { var_1665979230477_247 } else { Class_1665979230477_115() } ;
            [var_1665979230477_211, var_1665979230477_211, (-117), var_1665979230477_211, var_1665979230477_211, 83, 15, var_1665979230477_211, 33, (-114)][8]
        } else { // block id: 264
            try { // block id: 266
                24
            } finally { // block id: 268
                var_1665979230477_46;
                14
            }
        } | (var_1665979230477_277 ?? var_1665979230477_283[2])
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var_1665979230477_28*var_1665979230477_28), 64)
        crccheck.updateBuffer(UInt64(var_1665979230477_97*var_1665979230477_97), 64)
        crccheck.updateBuffer(UInt64(var_1665979230477_207*var_1665979230477_207), 64)
        crccheck.updateBuffer(UInt64(var_1665979230477_211*var_1665979230477_211), 64)
        crccheck.updateBuffer(UInt64(var_1665979230477_236*var_1665979230477_236), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Class_1665979230477_115 {

}

