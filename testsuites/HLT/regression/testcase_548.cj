/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args

public let var_1700995439018_46 : Bool = (match (Class_1700995439018_6()) {
    case _: UInt64 => true
    case _ => false
})
var var_1700995439018_58 : Int32 = Int32(Int32(-103))
public var var_1700995439018_92 : UInt8 = UInt8(13)
let var_1700995439018_95 : Int8 = Int8(110)
public let var_1700995439018_153 : Array<UInt32> = [UInt32(Int32(-73)), UInt32(5), UInt32(UInt32(33)), UInt32(UInt32(UInt8(207))), UInt32(Int8(Int8(101))), UInt32(77), UInt32(UInt32(105)), UInt32(239), UInt32(62), UInt32(UInt16(UInt16(UInt8(216))))]
public const var_1700995439018_262 : UInt8 = 225
const var_1700995439018_268 : Int16 = -11
public const var_1700995439018_276 : Float32 = -124.0
const var_1700995439018_280 : Int8 = 18
public const var_1700995439018_284 : Bool = false
public let var_1700995439018_299 : Option<(Range<UInt8>, Bool, Array<UInt64>, UInt64, Int64)> = (match (Struct_1700995439018_67()) {
    case newVar: (Range<UInt8>, Bool, Array<UInt64>, UInt64, Int64) => Option<(Range<UInt8>, Bool, Array<UInt64>, UInt64, Int64)>.Some(newVar)
    case _ => Option<(Range<UInt8>, Bool, Array<UInt64>, UInt64, Int64)>.None
})
public let var_1700995439018_305 : Unit = ()
public var var_1700995439018_319 : Range<UInt8> = ((UInt8(UInt8(Int8(Int8(18))))&127)..=(UInt8(UInt8(137))&127):(Int64(-41)|1))
var var_1700995439018_327 : Range<UInt8> = ((UInt8(UInt8(249))&127)..=(UInt8(UInt8(254))&127):(Int64(-8)|1))
public var var_1700995439018_358 : UInt = UInt64(132)
public let var_1700995439018_362 : Int64 = Int64(67)
public var var_1700995439018_406 : (Range<Int32>, Range<Int16>) = (((Int32(Int32(-120))&127)..=(Int32(Int32(33))&127):(Int64(-118)|1)), ((Int16(Int16(-87))&127)..(Int16(Int16(40))&127):(Int64(55)|1)))
let var_1700995439018_432 : Interface_1700995439018_9<UInt8> = Class_1700995439018_6()
public let var_1700995439018_453 : Class_1700995439018_6 = Class_1700995439018_125()
let var_1700995439018_561 : Option<Range<Int16>> = (match ((match ([UInt64(UInt16(47)), UInt64(Int8(-38)), UInt64(Int8(31)), UInt64(30), UInt64(4), UInt64(28), UInt64(UInt16(75)), UInt64(213), UInt64(216), UInt64(Int64(35))]) {
    case newVar: Option<(Range<UInt8>, Bool, Array<UInt64>, UInt64, Int64)> => Option<Option<(Range<UInt8>, Bool, Array<UInt64>, UInt64, Int64)>>.Some(newVar)
    case _ => Option<Option<(Range<UInt8>, Bool, Array<UInt64>, UInt64, Int64)>>.None
})) {
    case newVar: Range<Int16> => Option<Range<Int16>>.Some(newVar)
    case _ => Option<Range<Int16>>.None
})
public var var_1700995439018_685 : Float32 = Float32(Float32(0.0))
public var var_1700995439018_705 : Struct_1700995439018_67 = Struct_1700995439018_67()
public var var_1700995439018_726 : Int8 = Int8(UInt8(Int8(Int8(-15))))
public var var_1700995439018_749 : Rune = r'Z'
public var var_1700995439018_783 : UInt32 = UInt32(0)
public let var_1700995439018_809 : UInt32 = UInt32(Int32(-62))
let var_1700995439018_833 : Option<Unit> = Option<Unit>.None
public var var_1700995439018_862 : Range<UInt32> = ((UInt32(UInt32(74))&127)..=(UInt32(UInt32(123))&127):(Int64(109)|1))
public let var_1700995439018_924 : Class_1700995439018_125 = Class_1700995439018_471<Range<UInt8>, UInt16>()
public var var_1700995439018_952 : Interface_1700995439018_13 = Class_1700995439018_125()
let var_1700995439018_981 : (Option<(Range<UInt8>, Bool, Array<UInt64>, UInt64, Int64)>, (Range<Int32>, Range<Int16>), Array<UInt32>, Range<Int16>, UInt8, Option<Array<UInt64>>, Array<Option<(Bool, Int64, Class_1700995439018_6, Bool, UInt64, Interface_1700995439018_12, Interface_1700995439018_11, Int16)>>, UInt32, Float64) = (Option<(Range<UInt8>, Bool, Array<UInt64>, UInt64, Int64)>.None, (((Int32(Int32(115))&127)..=(Int32(Int32(UInt16(103)))&127):(Int64(UInt64(117))|1)), ((Int16(Int16(-28))&127)..=(Int16(Int16(-36))&127):(Int64(77)|1))), [UInt32(231), UInt32(9), UInt32(142), UInt32(193), UInt32(60), UInt32(181), UInt32(109), UInt32(205), UInt32(40), UInt32(1)], ((Int16(Int16(-97))&127)..=(Int16(Int16(54))&127):(Int64(88)|1)), UInt8(31), Option<Array<UInt64>>.None, [Option<(Bool, Int64, Class_1700995439018_6, Bool, UInt64, Interface_1700995439018_12, Interface_1700995439018_11, Int16)>.None, (match (Class_1700995439018_471<Range<UInt8>, UInt16>()) {
    case newVar: (Bool, Int64, Class_1700995439018_6, Bool, UInt64, Interface_1700995439018_12, Interface_1700995439018_11, Int16) => Option<(Bool, Int64, Class_1700995439018_6, Bool, UInt64, Interface_1700995439018_12, Interface_1700995439018_11, Int16)>.Some(newVar)
    case _ => Option<(Bool, Int64, Class_1700995439018_6, Bool, UInt64, Interface_1700995439018_12, Interface_1700995439018_11, Int16)>.None
}), Option<(Bool, Int64, Class_1700995439018_6, Bool, UInt64, Interface_1700995439018_12, Interface_1700995439018_11, Int16)>.None, Option<(Bool, Int64, Class_1700995439018_6, Bool, UInt64, Interface_1700995439018_12, Interface_1700995439018_11, Int16)>.None, (match (((Int8(Int8(58))&127)..=(Int8(Int8(-108))&127):(Int64(-91)|1))) {
    case newVar: (Bool, Int64, Class_1700995439018_6, Bool, UInt64, Interface_1700995439018_12, Interface_1700995439018_11, Int16) => Option<(Bool, Int64, Class_1700995439018_6, Bool, UInt64, Interface_1700995439018_12, Interface_1700995439018_11, Int16)>.Some(newVar)
    case _ => Option<(Bool, Int64, Class_1700995439018_6, Bool, UInt64, Interface_1700995439018_12, Interface_1700995439018_11, Int16)>.None
}), (match (Float32(3.0)) {
    case newVar: (Bool, Int64, Class_1700995439018_6, Bool, UInt64, Interface_1700995439018_12, Interface_1700995439018_11, Int16) => Option<(Bool, Int64, Class_1700995439018_6, Bool, UInt64, Interface_1700995439018_12, Interface_1700995439018_11, Int16)>.Some(newVar)
    case _ => Option<(Bool, Int64, Class_1700995439018_6, Bool, UInt64, Interface_1700995439018_12, Interface_1700995439018_11, Int16)>.None
}), Option<(Bool, Int64, Class_1700995439018_6, Bool, UInt64, Interface_1700995439018_12, Interface_1700995439018_11, Int16)>.None, Option<(Bool, Int64, Class_1700995439018_6, Bool, UInt64, Interface_1700995439018_12, Interface_1700995439018_11, Int16)>.None, (match (Class_1700995439018_125()) {
    case newVar: (Bool, Int64, Class_1700995439018_6, Bool, UInt64, Interface_1700995439018_12, Interface_1700995439018_11, Int16) => Option<(Bool, Int64, Class_1700995439018_6, Bool, UInt64, Interface_1700995439018_12, Interface_1700995439018_11, Int16)>.Some(newVar)
    case _ => Option<(Bool, Int64, Class_1700995439018_6, Bool, UInt64, Interface_1700995439018_12, Interface_1700995439018_11, Int16)>.None
}), (match ((((Int32(Int32(94))&127)..(Int32(Int32(10))&127):(Int64(-92)|1)), ((Int16(Int16(-112))&127)..=(Int16(Int16(35))&127):(Int64(-86)|1)))) {
    case newVar: (Bool, Int64, Class_1700995439018_6, Bool, UInt64, Interface_1700995439018_12, Interface_1700995439018_11, Int16) => Option<(Bool, Int64, Class_1700995439018_6, Bool, UInt64, Interface_1700995439018_12, Interface_1700995439018_11, Int16)>.Some(newVar)
    case _ => Option<(Bool, Int64, Class_1700995439018_6, Bool, UInt64, Interface_1700995439018_12, Interface_1700995439018_11, Int16)>.None
})], UInt32(Int32(UInt16(UInt8(159)))), Float64(Float32(Float32(-124.0))))
public var var_1700995439018_1027 : Option<Bool> = (match ((((UInt8(UInt8(195))&127)..=(UInt8(UInt8(246))&127):(Int64(-118)|1)), (match ([UInt32(44), UInt32(182), UInt32(102), UInt32(8), UInt32(234), UInt32(120), UInt32(83), UInt32(114), UInt32(244), UInt32(121)]) {
    case _: Interface_1700995439018_13 => true
    case _ => false
}), [UInt64(UInt16(189)), UInt64(UInt8(113)), UInt64(Int16(-98)), UInt64(Int32(73)), UInt64(UInt8(58)), UInt64(UInt8(116)), UInt64(164), UInt64(233), UInt64(UInt64(8)), UInt64(235)], UInt64(97), Int64(UInt32(UInt32(131))))) {
    case newVar: Bool => Option<Bool>.Some(newVar)
    case _ => Option<Bool>.None
})
public let var_1700995439018_1076 : (Int8, VArray<Bool, $1>, Interface_1700995439018_13, Range<UInt32>, Array<Class_1700995439018_125>) = (Int8(UInt8(73)), VArray<Bool, $1>({ i => true}), Class_1700995439018_471<Range<UInt8>, UInt16>(), ((UInt32(UInt32(Int32(-39)))&127)..(UInt32(UInt32(Int8(Int8(-34))))&127):(Int64(UInt16(Int16(-107)))|1)), [Class_1700995439018_125(), Class_1700995439018_471<Range<UInt8>, UInt16>(), Class_1700995439018_471<Range<UInt8>, UInt16>(), Class_1700995439018_125(), Class_1700995439018_471<Range<UInt8>, UInt16>(), Class_1700995439018_125(), Class_1700995439018_471<Range<UInt8>, UInt16>(), Class_1700995439018_125(), Class_1700995439018_125(), Class_1700995439018_125()])
public var var_1700995439018_1112 : ?Array<UInt64> = (match ((r'k', UInt8(UInt8(123)), Int8(UInt8(UInt8(225))), UInt8(169))) {
    case newVar: Array<UInt64> => Option<Array<UInt64>>.Some(newVar)
    case _ => Option<Array<UInt64>>.None
})
public var var_1700995439018_1169 : Array<UInt64> = [UInt64(130), UInt64(230), UInt64(137), UInt64(29), UInt64(Int8(Int8(Int8(106)))), UInt64(UInt64(104)), UInt64(75), UInt64(144), UInt64(Int32(Int8(-93))), UInt64(229)]
public let var_1700995439018_1229 : Interface_1700995439018_11 = Class_1700995439018_6()
public var var_1700995439018_1244 : Class_1700995439018_6 = Class_1700995439018_471<Range<UInt8>, UInt16>()
public var var_1700995439018_1266 : Interface_1700995439018_10<Int32> = Class_1700995439018_6()
public let var_1700995439018_1279 : Option<Unit> = Option<Unit>.None
let var_1700995439018_1302 : VArray<Bool, $5> = [true, true, true, false, true]
public var var_1700995439018_1315 : Option<(Bool, Int64, Class_1700995439018_6, Bool, UInt64, Interface_1700995439018_12, Interface_1700995439018_11, Int16)> = (match ([UInt32(194), UInt32(67), UInt32(74), UInt32(129), UInt32(UInt16(118)), UInt32(Int16(107)), UInt32(108), UInt32(UInt8(UInt8(127))), UInt32(UInt8(65)), UInt32(39)]) {
    case newVar: (Bool, Int64, Class_1700995439018_6, Bool, UInt64, Interface_1700995439018_12, Interface_1700995439018_11, Int16) => Option<(Bool, Int64, Class_1700995439018_6, Bool, UInt64, Interface_1700995439018_12, Interface_1700995439018_11, Int16)>.Some(newVar)
    case _ => Option<(Bool, Int64, Class_1700995439018_6, Bool, UInt64, Interface_1700995439018_12, Interface_1700995439018_11, Int16)>.None
})
public var var_1700995439018_1340 : Bool = (match (Option<UInt64>.None) {
    case _: Range<Int8> => true
    case _ => false
})
public interface Interface_1700995439018_11 {

}

public interface Interface_1700995439018_12 {
    func func_1700995439018_19() : Rune { // block id: 20
        func_1700995439018_22(var_1700995439018_46)
    }

}

public interface Interface_1700995439018_10<T0> <: Interface_1700995439018_11 & Interface_1700995439018_12 {
    func func_1700995439018_19() : Rune { // block id: 20
        func_1700995439018_22(var_1700995439018_46)
    }

}

public interface Interface_1700995439018_13 <: Interface_1700995439018_11 & Interface_1700995439018_12 {
    func func_1700995439018_19() : Rune { // block id: 20
        func_1700995439018_22(var_1700995439018_46)
    }

}

public interface Interface_1700995439018_9<T0> <: Interface_1700995439018_10<Int32> & Interface_1700995439018_13 {
    func func_1700995439018_19() : Rune { // block id: 20
        func_1700995439018_22(var_1700995439018_46)
    }

}

public open class Class_1700995439018_6 <: Interface_1700995439018_9<UInt8> & Interface_1700995439018_10<Int32> & Resource {
    public init() { // block id: 8

    }
;
    public static const var_1700995439018_36 : Unit = ();
    public open override func func_1700995439018_19() : Rune { // block id: 20
        func_1700995439018_22(var_1700995439018_46)
    }

    static init() {
    }
    public func isClosed(): Bool { return true }
    public func close(): Unit {}
}

public struct Struct_1700995439018_67 {
    public init() { // block id: 69

    }
;
    public static const var_1700995439018_109 : Int8 = 53;
    public static prop var_1700995439018_738 : ?(Range<Int32>, Range<Int16>) { // block id: 739
        get() { // block id: 741
            (match (()) {
                case newVar: (Range<Int32>, Range<Int16>) => Option<(Range<Int32>, Range<Int16>)>.Some(newVar)
                case _ => Option<(Range<Int32>, Range<Int16>)>.None
            });
            UInt64(16);
            Option<(Range<Int32>, Range<Int16>)>.None
        }

    };
    public func func_1700995439018_708() : (Bool, Int64, Class_1700995439018_6, Bool, UInt64, Interface_1700995439018_12, Interface_1700995439018_11, Int16) { // block id: 709
        try (resource = Class_1700995439018_6()) { // block id: 711
            match (var_1700995439018_284) {
                case true | false => 
                    ();
                    var_1700995439018_305
                
                case false => 
                    ();
                    ();
                    var_1700995439018_726 = var_1700995439018_726 | (Int8(-71))
                
                case _ => 
                    if (var_1700995439018_46) { var_1700995439018_738 } else { var_1700995439018_738 } ;
                    var_1700995439018_749 = var_1700995439018_749;
                    var_1700995439018_305
                
            };
            var loopTimeVar_1700995439018_757 : Int64 = 0;
            while ((var_1700995439018_46) && loopTimeVar_1700995439018_757 < 100 ) {
                loopTimeVar_1700995439018_757++;

            };
            var var_1700995439018_764 : Option<Unit> = (match (UInt64(UInt16(Int16(-74)))) {
                case newVar: Unit => Option<Unit>.Some(newVar)
                case _ => Option<Unit>.None
            });
            var_1700995439018_764.getOrThrow()
        } finally { // block id: 769
            var var_1700995439018_773 : VArray<Unit, $3> = [(), (), ()];
            var_1700995439018_773[2];
            try { // block id: 780
                var_1700995439018_783 = var_1700995439018_783 % ((UInt32(36)) | 1);
                Class_1700995439018_6()
            } catch (e: Exception) { // block id: 787
                if (var_1700995439018_284) { VArray<Unit, $3>({ i => ()}) } else { VArray<Unit, $3>(repeat: var_1700995439018_305) } ;
                var_1700995439018_305;
                Class_1700995439018_125(UInt32(58), var_1700995439018_783, UInt32(14), UInt32(176), UInt32(12), var_1700995439018_783, var_1700995439018_783, var_1700995439018_809, var_1700995439018_809, var_1700995439018_809)
            } finally { // block id: 814
                const var_1700995439018_816 : Int32 = 51;
                var_1700995439018_816;
                Class_1700995439018_125();
                Class_1700995439018_471<Range<UInt8>, UInt16>()
            };
            (match (Option<Unit>.Some(var_1700995439018_305)) {
                case Some(num) => num
                case None => var_1700995439018_305
            })
        };
        var loopTimeVar_1700995439018_841 : Int = 0;
        let var_1700995439018_847 : Range<Int8> = ((Int8(Int8(UInt8(Int8(-19))))&127)..(Int8(Int8(-87))&127):(Int64(UInt16(10))|1));
        match ((match (if (false) { var_1700995439018_833 } else { Option<Unit>.None } ) {
            case Some(num) => num
            case None => do {
            loopTimeVar_1700995439018_841++;
            ()
        } while ((true) && loopTimeVar_1700995439018_841 < 100 ) 
        })) {
            case () | () | () | () => 
                var_1700995439018_305;
                var_1700995439018_847
            
            case _ => 
                let var_1700995439018_859 : Interface_1700995439018_11 = Class_1700995439018_6();
                var_1700995439018_859;
                var_1700995439018_862;
                ((Int8(Int8(88))&127)..(Int8(Int8(118))&127):(Int64(96)|1))
            
            case _ => 
                var var_1700995439018_870 : UInt16 = UInt16(114);
                var_1700995439018_870 = var_1700995439018_870 - 1;
                Option<Range<Int16>>.None;
                ((Int8(Int8(5))&127)..(Int8(Int8(64))&127):(Int64(-91)|1))
            
        };
        var var_1700995439018_889 : Option<(Bool, Int64, Class_1700995439018_6, Bool, UInt64, Interface_1700995439018_12, Interface_1700995439018_11, Int16)> = Option<(Bool, Int64, Class_1700995439018_6, Bool, UInt64, Interface_1700995439018_12, Interface_1700995439018_11, Int16)>.Some(((match (((UInt8(UInt8(41))&127)..=(UInt8(UInt8(213))&127):(Int64(89)|1))) {
            case _: Interface_1700995439018_13 => true
            case _ => false
        }), Int64(Int64(Int32(37))), Class_1700995439018_125([UInt32(225), UInt32(133), UInt32(190), UInt32(42), UInt32(188), UInt32(191), UInt32(195), UInt32(15), UInt32(161), UInt32(63)]), false, UInt64(UInt32(UInt32(178))), Class_1700995439018_125(), Class_1700995439018_471<Range<UInt8>, UInt16>(), Int16(-120)));
        let var_1700995439018_928 : (Bool, Int64, Class_1700995439018_6, Bool, UInt64, Interface_1700995439018_12, Interface_1700995439018_11, Int16) = ((match (Option<UInt64>.None) {
            case _: Int32 => true
            case _ => false
        }), Int64(-115), Class_1700995439018_471<Range<UInt8>, UInt16>(), false, UInt64(UInt64(107)), Class_1700995439018_125(), Class_1700995439018_125(), Int16(34));
        (match ((match (Option<Array<Option<(Bool, Int64, Class_1700995439018_6, Bool, UInt64, Interface_1700995439018_12, Interface_1700995439018_11, Int16)>>>.None) {
            case Some(num) => num
            case None => [var_1700995439018_889, var_1700995439018_889, Option<(Bool, Int64, Class_1700995439018_6, Bool, UInt64, Interface_1700995439018_12, Interface_1700995439018_11, Int16)>.None, var_1700995439018_889, var_1700995439018_889, Option<(Bool, Int64, Class_1700995439018_6, Bool, UInt64, Interface_1700995439018_12, Interface_1700995439018_11, Int16)>.None, Option<(Bool, Int64, Class_1700995439018_6, Bool, UInt64, Interface_1700995439018_12, Interface_1700995439018_11, Int16)>.None, var_1700995439018_889, var_1700995439018_889, Option<(Bool, Int64, Class_1700995439018_6, Bool, UInt64, Interface_1700995439018_12, Interface_1700995439018_11, Int16)>.None]
        })[1]) {
            case Some(num) => num
            case None => try { // block id: 920
            if (false) { var_1700995439018_924 } else { var_1700995439018_924 } ;
            var_1700995439018_928
        } catch (_) { // block id: 940
            var_1700995439018_305;
            var_1700995439018_928
        } finally { // block id: 943
            var_1700995439018_783 = var_1700995439018_783 - 1;
            var_1700995439018_928
        }
        })
    }

}


public open class Class_1700995439018_125 <: Class_1700995439018_6 {
    public Class_1700995439018_125() { // block id: 127

    }
;
    public init(param_1700995439018_381 : Array<UInt32>) { // block id: 382
        if (if (var_1700995439018_284) { // block id: 386
            true
        } else if (var_1700995439018_46) { // block id: 389
            ();
            false || true
        } else { // block id: 394
            var_1700995439018_276;
            false
        }) { (match (Option<(Range<Int32>, Range<Int16>)>.Some(var_1700995439018_406)) {
            case Some(num) => num
            case None => var_1700995439018_406
        })[0] } else { var_1700995439018_406[0] } 
    }
;
    public let var_1700995439018_458 : ?Interface_1700995439018_9<UInt8> = Option<Interface_1700995439018_9<UInt8>>.None;
    public open override func func_1700995439018_19() : Rune { // block id: 20
        func_1700995439018_22(var_1700995439018_46)
    }

}

public func func_1700995439018_149(param_1700995439018_150 : Bool) : Array<UInt32> { // block id: 151
    var_1700995439018_153
}


public const func func_1700995439018_252<T0, T1>(optionalParam_1700995439018_253 ! : UInt8 = 35, optionalParam_1700995439018_255 ! : Float32 = -66.0, optionalParam_1700995439018_257 ! : Int16 = 6, namedParam_1700995439018_259 ! : Float64) : UInt8 { // block id: 260
    var_1700995439018_262
}

const func func_1700995439018_219() : Int64 { // block id: 220
    ();
    const var_1700995439018_229 : Unit = ();
    const func func_1700995439018_223(namedParam_1700995439018_224 ! : Unit) : Unit { // block id: 225
        ();
        ();
        var_1700995439018_229
        return
    }
;
    func_1700995439018_223(namedParam_1700995439018_224 : var_1700995439018_229);
    const func func_1700995439018_233() : Int64 { // block id: 234
        ();
        const var_1700995439018_238 : UInt8 = 124;
        const var_1700995439018_265 : Float64 = 97.0;
        const func func_1700995439018_247() : UInt8 { // block id: 248
            var_1700995439018_229;
            var_1700995439018_229;
            func_1700995439018_252<UInt8, Rune>(namedParam_1700995439018_259 : var_1700995439018_265)
        }
;
        const func func_1700995439018_241(namedParam_1700995439018_242 ! : Int16, namedParam_1700995439018_243 ! : Unit) : UInt8 { // block id: 244
            ();
            func_1700995439018_247()
        }
;
        var_1700995439018_238 >> ((func_1700995439018_241(namedParam_1700995439018_242 : var_1700995439018_268, namedParam_1700995439018_243 : var_1700995439018_229)) & 7);
        const var_1700995439018_272 : Int = 79;
        var_1700995439018_272
    }
;
    func_1700995439018_233()
}

const func func_1700995439018_212(param_1700995439018_213 : Int8, param_1700995439018_214 : Int8, optionalParam_1700995439018_215 ! : Rune = r'L') : Float32 { // block id: 217
    func_1700995439018_219();
    var_1700995439018_276 + var_1700995439018_276
}




func func_1700995439018_184<T0, T1>(param_1700995439018_185 : Interface_1700995439018_11) : (Range<UInt8>, Bool, Array<UInt64>, UInt64, Int64) { // block id: 186
    const func func_1700995439018_194<T0, T1>(param_1700995439018_195 : Float64, param_1700995439018_196 : Unit, optionalParam_1700995439018_197 ! : Float32 = -113.0, optionalParam_1700995439018_199 ! : UInt64 = 66) : Bool { // block id: 201
        const func func_1700995439018_203(optionalParam_1700995439018_204 ! : UInt64 = 157, namedParam_1700995439018_206 ! : Float32, optionalParam_1700995439018_207 ! : Int32 = 95) : UInt64 { // block id: 209
            19
        }
;
        func_1700995439018_203(namedParam_1700995439018_206 : func_1700995439018_212(var_1700995439018_280, -96));
        var_1700995439018_284
    }
;
    var var_1700995439018_296 : ?Option<(Range<UInt8>, Bool, Array<UInt64>, UInt64, Int64)> = Option<Option<(Range<UInt8>, Bool, Array<UInt64>, UInt64, Int64)>>.None;
    const var_1700995439018_316 : Bool = true;
    var var_1700995439018_335 : Interface_1700995439018_10<Int32> = Class_1700995439018_125();
    var var_1700995439018_347 : ?Array<UInt64> = (match (()) {
        case newVar: Array<UInt64> => Option<Array<UInt64>>.Some(newVar)
        case _ => Option<Array<UInt64>>.None
    });
    (match (if (func_1700995439018_194<Int8, Float32>(Float64(-114.0), (), optionalParam_1700995439018_197 : Float32(-115.0), optionalParam_1700995439018_199 : UInt64(206))) { (match (var_1700995439018_296) {
        case Some(num) => num
        case None => var_1700995439018_299
    }) } else { try { // block id: 303
        var_1700995439018_305;
        var_1700995439018_299
    } finally { // block id: 308
        if (var_1700995439018_46) { var_1700995439018_299 } else { var_1700995439018_299 } 
    } } ) {
        case Some(num) => num
        case None => (if (var_1700995439018_316) { var_1700995439018_319 } else { var_1700995439018_327 } , try { // block id: 330
        var_1700995439018_305;
        var_1700995439018_284
    } finally { // block id: 333
        var_1700995439018_335;
        var_1700995439018_305;
        var_1700995439018_46 && true
    }, (match (var_1700995439018_347) {
        case Some(num) => num
        case None => [UInt64(79), UInt64(198), UInt64(95), UInt64(27), UInt64(27), UInt64(1), UInt64(26), UInt64(77), UInt64(53), UInt64(47)]
    }), (match (Option<UInt64>.Some(var_1700995439018_358)) {
        case Some(num) => num
        case None => var_1700995439018_358
    }), var_1700995439018_362)
    })
}


public open class Class_1700995439018_471<T0, T1> <: Class_1700995439018_125 {
    public Class_1700995439018_471() { // block id: 473

    }
;
    public static mut prop var_1700995439018_476 : Unit { // block id: 477
        get() { // block id: 479
            ();
            ();
            ();
            var_1700995439018_1370
        }

        set(Value) { // block id: 485
            ();
            var_1700995439018_1370 = Value
        }

    };
    static var var_1700995439018_1370 : Unit = ();
    public open override func func_1700995439018_19() : Rune { // block id: 20
        func_1700995439018_22(var_1700995439018_46)
    }

}







public func func_1700995439018_30(param_1700995439018_31 : Unit) : (Bool, Int64, Class_1700995439018_6, Bool, UInt64, Interface_1700995439018_12, Interface_1700995439018_11, Int16) { // block id: 32
    Class_1700995439018_6.var_1700995439018_36;
    const var_1700995439018_51 : Unit = ();
    var loopTimeVar_1700995439018_65 : Int = 0;
    do {
        loopTimeVar_1700995439018_65++;
        continue
    } while (((match (if (true) { // block id: 42
        ();
        true
    } else if (var_1700995439018_46) { // block id: 49
        var_1700995439018_51;
        ();
        var_1700995439018_46
    } else { // block id: 55
        var_1700995439018_58 > Int32(-13)
    }) {
        case _: Interface_1700995439018_9<UInt8> => true
        case _ => false
    })) && loopTimeVar_1700995439018_65 < 100 ) ;
    const var_1700995439018_89 : Rune = r'y';
    let var_1700995439018_101 : Struct_1700995439018_67 = Struct_1700995439018_67();
    let var_1700995439018_365 : (Interface_1700995439018_11) -> (Range<UInt8>, Bool, Array<UInt64>, UInt64, Int64) = func_1700995439018_184<Range<UInt16>, Int64>;
    let var_1700995439018_417 : Class_1700995439018_125 = Class_1700995439018_125([UInt32(131), UInt32(65), UInt32(234), UInt32(153), UInt32(85), UInt32(211), UInt32(10), UInt32(148), UInt32(242), UInt32(57)]);
    func func_1700995439018_129(optionalParam_1700995439018_130 ! : Class_1700995439018_6 = Class_1700995439018_6(), optionalParam_1700995439018_133 ! : Class_1700995439018_125 = Class_1700995439018_125(), namedParam_1700995439018_135 ! : Interface_1700995439018_9<UInt8>) : Class_1700995439018_125 { // block id: 136
        ({ lambdaParameter_1700995439018_177 : Bool => func_1700995439018_149((var_1700995439018_365(Class_1700995439018_125()))[1]) }(false))[1];
        try { // block id: 374
            Option<Option<(Range<UInt8>, Bool, Array<UInt64>, UInt64, Int64)>>.Some(Option<(Range<UInt8>, Bool, Array<UInt64>, UInt64, Int64)>.None);
            ();
            [Class_1700995439018_125([UInt32(214), UInt32(74), UInt32(116), UInt32(138), UInt32(94), UInt32(139), UInt32(172), UInt32(16), UInt32(243), UInt32(227)]), var_1700995439018_417, Class_1700995439018_125(var_1700995439018_153), var_1700995439018_417, Class_1700995439018_125(), Class_1700995439018_125(var_1700995439018_153), var_1700995439018_417, var_1700995439018_417, var_1700995439018_417, var_1700995439018_417]
        } catch (e: Exception) { // block id: 430
            var_1700995439018_432;
            [Class_1700995439018_125(), Class_1700995439018_125(var_1700995439018_153), Class_1700995439018_125(var_1700995439018_153), Class_1700995439018_125(var_1700995439018_153), var_1700995439018_417, var_1700995439018_417, Class_1700995439018_125([UInt32(26), UInt32(54), UInt32(72), UInt32(44), UInt32(112), UInt32(101), UInt32(224), UInt32(107), UInt32(248), UInt32(105)]), Class_1700995439018_125([UInt32(69), UInt32(20), UInt32(112), UInt32(89), UInt32(128), UInt32(174), UInt32(67), UInt32(187), UInt32(105), UInt32(237)]), var_1700995439018_417, Class_1700995439018_125([UInt32(202), UInt32(107), UInt32(0), UInt32(137), UInt32(156), UInt32(41), UInt32(81), UInt32(65), UInt32(118), UInt32(127)])]
        }[4]
    }
;
    let var_1700995439018_540 : Float64 = Float64(Float64(Float32(-30.0)));
    let var_1700995439018_648 : Interface_1700995439018_11 = Class_1700995439018_125();
    func func_1700995439018_71(optionalParam_1700995439018_72 ! : Int16 = Int16(UInt16(Int8(-71)))) : Struct_1700995439018_67 { // block id: 76
        func func_1700995439018_78(optionalParam_1700995439018_79 ! : Rune = r'r', namedParam_1700995439018_81 ! : Float64) : Unit { // block id: 82
            ((var_1700995439018_89, var_1700995439018_92, var_1700995439018_95, UInt8(26))[2] ^ (Struct_1700995439018_67.var_1700995439018_109)) % ((try { // block id: 112
                var_1700995439018_95
            } catch (e: Exception) { // block id: 114
                r'W';
                var_1700995439018_95
            } finally { // block id: 117
                var_1700995439018_95
            }) | 1);
            (match (func_1700995439018_129(optionalParam_1700995439018_130 : var_1700995439018_453, optionalParam_1700995439018_133 : Class_1700995439018_125(), namedParam_1700995439018_135 : Class_1700995439018_125()).var_1700995439018_458) {
                case Some(num) => num
                case None => try { // block id: 461
                var_1700995439018_432
            } catch (_) { // block id: 463
                var_1700995439018_432
            } finally { // block id: 465
                var_1700995439018_358 = var_1700995439018_358 << ((var_1700995439018_358) & 7);
                Class_1700995439018_6()
            }
            });
            Class_1700995439018_471<Range<UInt8>, UInt16>.var_1700995439018_476
            return
        }
;
        let var_1700995439018_506 : Int8 = Int8(UInt8(UInt8(UInt8(121))));
        var var_1700995439018_533 : String = """
nmSBr
KMRoy
""";
        func_1700995439018_78(optionalParam_1700995439018_79 : if ((match (Option<Bool>.Some(var_1700995439018_46)) {
            case Some(num) => num
            case None => false
        })) { if (var_1700995439018_46) { // block id: 498
            r'4'
        } else if (true) { // block id: 501
            r'i'
        } else { // block id: 503
            var_1700995439018_506 | Int8(15);
            if (var_1700995439018_46) { r'd' } else { r'k' } 
        } } else { if (var_1700995439018_46) { // block id: 518
            -var_1700995439018_276;
            ();
            if (false) { var_1700995439018_89 } else { r'P' } 
        } else { // block id: 526
            if (var_1700995439018_284) { var_1700995439018_89 } else { r'V' } 
        } } , namedParam_1700995439018_81 : match (var_1700995439018_533) {
            case ###"o%JV=a{ms.O"### => 
                ();
                var_1700995439018_540
            
            case caseVar_1700995439018_546 => 
                var_1700995439018_540
            
            case _ => 
                var_1700995439018_540
            
        });
        var var_1700995439018_603 : Float64 = Float64(112.0);
        let var_1700995439018_613 : UInt16 = UInt16(32);
        var var_1700995439018_638 : ?(Range<Int32>, Range<Int16>) = Option<(Range<Int32>, Range<Int16>)>.None;
        var var_1700995439018_670 : Array<UInt64> = [UInt64(174), UInt64(108), UInt64(205), UInt64(22), UInt64(117), UInt64(81), UInt64(27), UInt64(232), UInt64(58), UInt64(223)];
        let var_1700995439018_679 : UInt32 = UInt32(189);
        let var_1700995439018_702 : Range<Int8> = ((Int8(Int8(87))&127)..=(Int8(Int8(-50))&127):(Int64(47)|1));
        if (match ((match (var_1700995439018_561) {
            case Some(num) => num
            case None => ((Int16(Int16(61))&127)..(Int16(Int16(-96))&127):(Int64(52)|1))
        })) {
            case _ : UInt8 => 
                var_1700995439018_284
            
            case caseVar_1700995439018_587 : Interface_1700995439018_13 => 
                var_1700995439018_46
            
            case caseVar_1700995439018_592 => 
                ();
                UInt8(215) == var_1700995439018_92
            
            case _ : Int64 => 
                var_1700995439018_603 = Float64(59.0);
                !true
            
            case _ => 
                var_1700995439018_613 <= var_1700995439018_613;
                false
            
        }) { (if (match (((Int8(Int8(10))&127)..(Int8(Int8(74))&127):(Int64(3)|1))) {
            case caseVar_1700995439018_622 : Range<Int8> => 
                !true
            
            case _ => 
                ();
                var_1700995439018_284
            
        }) { if (false) { // block id: 633
            var_1700995439018_101
        } else if (true) { // block id: 636
            var_1700995439018_638;
            var_1700995439018_305;
            Struct_1700995439018_67()
        } else { // block id: 642
            var_1700995439018_101
        } } else { Struct_1700995439018_67() } ) } else { if (match (var_1700995439018_648) {
            case caseVar_1700995439018_652 : Range<Int64> => 
                if (false) { var_1700995439018_319 } else { ((UInt8(UInt8(116))&127)..(UInt8(UInt8(157))&127):(Int64(1)|1)) } ;
                ();
                Int8(56) > Int8(31)
            
            case _ : Range<Int32> => 
                var_1700995439018_51;
                if (false) { [UInt64(4), UInt64(45), UInt64(29), UInt64(193), UInt64(104), UInt64(233), UInt64(139), UInt64(86), UInt64(241), UInt64(108)] } else { var_1700995439018_670 } ;
                var_1700995439018_46 || var_1700995439018_284
            
            case _ : Range<UInt64> => 
                var_1700995439018_679;
                Class_1700995439018_471<Range<UInt8>, UInt16>();
                Float32(87.0) >= var_1700995439018_685
            
            case _ => 
                var_1700995439018_358 = var_1700995439018_358 ^ (UInt64(250));
                true
            
        }) { // block id: 695
            if (true) { Struct_1700995439018_67() } else { Struct_1700995439018_67() } 
        } else { // block id: 700
            var_1700995439018_702;
            var_1700995439018_705
        } } 
    }
;
    var chainCall66 = func_1700995439018_71();chainCall66.func_1700995439018_708()
}


public func func_1700995439018_22(param_1700995439018_23 : Bool) : Rune { // block id: 24
    Class_1700995439018_6();
    var var_1700995439018_1066 : ?UInt64 = Option<UInt64>.Some(UInt64(210));
    if ((func_1700995439018_30(()))[3]) { // block id: 950
        var_1700995439018_952;
        if (false) { [UInt64(69), var_1700995439018_358, var_1700995439018_358, UInt64(157), var_1700995439018_358, UInt64(95), var_1700995439018_358, UInt64(115), var_1700995439018_358, UInt64(192)] } else { [var_1700995439018_358, var_1700995439018_358, UInt64(210), var_1700995439018_358, var_1700995439018_358, UInt64(200), UInt64(15), var_1700995439018_358, UInt64(89), UInt64(64)] } ;
        var_1700995439018_981[4]
    } else { // block id: 1025
        var_1700995439018_1027;
        if (true) { // block id: 1060
            UInt8(232) ^ UInt8(189)
        } else { // block id: 1064
            var_1700995439018_1066;
            UInt8(196)
        }
    };
    let var_1700995439018_1128 : UInt8 = UInt8(98);
    let var_1700995439018_1163 : Bool = (match (Option<Interface_1700995439018_9<UInt8>>.Some(Class_1700995439018_125([UInt32(161), UInt32(165), UInt32(223), UInt32(133), UInt32(195), UInt32(76), UInt32(250), UInt32(50), UInt32(84), UInt32(183)]))) {
        case _: Option<Range<Int16>> => true
        case _ => false
    });
    let var_1700995439018_1214 : Int16 = Int16(24);
    var var_1700995439018_1224 : UInt64 = UInt64(Int8(17));
    if (var_1700995439018_1076[1][0]) { (match ((match (var_1700995439018_1112) {
        case newVar: Rune => Option<Rune>.Some(newVar)
        case _ => Option<Rune>.None
    })) {
        case Some(num) => num
        case None => (var_1700995439018_749, var_1700995439018_92, var_1700995439018_726, var_1700995439018_1128)[0]
    }) } else { (if (if (var_1700995439018_46) { // block id: 1134
        ();
        false
    } else if (var_1700995439018_284) { // block id: 1138
        ();
        var_1700995439018_726 = var_1700995439018_726 - 1;
        UInt32(166) >= UInt32(169)
    } else { // block id: 1145
        var var_1700995439018_1148 : Int16 = Int16(-69);
        var_1700995439018_1148 == Int16(31)
    }) { try { // block id: 1152
        var_1700995439018_46;
        ();
        if (false) { r't' } else { var_1700995439018_749 } 
    } catch (e: Exception) { // block id: 1159
        (var_1700995439018_319, var_1700995439018_1163, var_1700995439018_1169, var_1700995439018_358, var_1700995439018_362);
        if (true) { var_1700995439018_749 } else { r'a' } 
    } } else { try { // block id: 1194
        ((Int64(Int64(28))&127)..(Int64(Int64(47))&127):(Int64(57)|1));
        ();
        var_1700995439018_749
    } catch (e: Exception) { // block id: 1198
        var_1700995439018_783 = var_1700995439018_783 + 1;
        var var_1700995439018_1210 : Interface_1700995439018_12 = Class_1700995439018_6();
        var var_1700995439018_1233 : Option<(Bool, Int64, Class_1700995439018_6, Bool, UInt64, Interface_1700995439018_12, Interface_1700995439018_11, Int16)> = Option<(Bool, Int64, Class_1700995439018_6, Bool, UInt64, Interface_1700995439018_12, Interface_1700995439018_11, Int16)>.None;
        [Option<(Bool, Int64, Class_1700995439018_6, Bool, UInt64, Interface_1700995439018_12, Interface_1700995439018_11, Int16)>.Some((var_1700995439018_1163, var_1700995439018_362, var_1700995439018_453, var_1700995439018_46, var_1700995439018_358, var_1700995439018_1210, Class_1700995439018_125(), var_1700995439018_1214)), Option<(Bool, Int64, Class_1700995439018_6, Bool, UInt64, Interface_1700995439018_12, Interface_1700995439018_11, Int16)>.Some((var_1700995439018_46, Int64(39), Class_1700995439018_125(var_1700995439018_153), var_1700995439018_46, var_1700995439018_1224, var_1700995439018_1210, var_1700995439018_1229, var_1700995439018_1214)), var_1700995439018_1233, var_1700995439018_1233, Option<(Bool, Int64, Class_1700995439018_6, Bool, UInt64, Interface_1700995439018_12, Interface_1700995439018_11, Int16)>.None, var_1700995439018_1233, var_1700995439018_1233, Option<(Bool, Int64, Class_1700995439018_6, Bool, UInt64, Interface_1700995439018_12, Interface_1700995439018_11, Int16)>.Some((true, Int64(-105), var_1700995439018_1244, false, UInt64(161), var_1700995439018_1210, var_1700995439018_1229, Int16(33))), var_1700995439018_1233, var_1700995439018_1233];
        r'F'
    } } ) } 
}



main(): Int64 {
    try {
        func func_1700995439018_15() : Class_1700995439018_6 { // block id: 16
            Class_1700995439018_6()
        }
;
        var chainCall5 = func_1700995439018_15();chainCall5.func_1700995439018_19();
        var loopTimeVar_1700995439018_1353 : Int = 0;
        (match (if (if (false) { // block id: 1264
            var_1700995439018_1266;
            ();
            true
        } else if (true) { // block id: 1271
            ();
            ();
            var_1700995439018_284
        } else { // block id: 1275
            var_1700995439018_284
        }) { // block id: 1277
            var_1700995439018_1279
        } else if (VArray<Bool, $5>(repeat: var_1700995439018_46)[1]) { // block id: 1290
            ();
            var_1700995439018_92 = var_1700995439018_92 ^ (var_1700995439018_262);
            var_1700995439018_1279
        } else { // block id: 1296
            var_1700995439018_305;
            var_1700995439018_1279
        }) {
            case Some(num) => num
            case None => do {
            loopTimeVar_1700995439018_1353++;

        } while ((match (var_1700995439018_1302) {
            case _ => 
                var_1700995439018_46 && var_1700995439018_284
            
            case caseVar_1700995439018_1312 => 
                var_1700995439018_1315;
                !true
            
            case _ => 
                var_1700995439018_1340 = var_1700995439018_1340 && (var_1700995439018_1340);
                ();
                true
            
            case _ => 
                !false
            
        }) && loopTimeVar_1700995439018_1353 < 100 ) 
        });
        Int64(if ((match (Option<Bool>.None) {
            case Some(num) => num
            case None => var_1700995439018_284
        })) { // block id: 1363
            var_1700995439018_262
        } else { // block id: 1365
            -UInt8(120)
        })
        // CRC Check All Variables
        var crcCheck = CrcCheck(5000, 32)
        crcCheck.updateBuffer(UInt64(var_1700995439018_58*var_1700995439018_58), 64)
        crcCheck.updateBuffer(UInt64(var_1700995439018_95*var_1700995439018_95), 64)
        crcCheck.updateBuffer(UInt64(var_1700995439018_262*var_1700995439018_262), 64)
        crcCheck.updateBuffer(UInt64(var_1700995439018_268*var_1700995439018_268), 64)
        crcCheck.updateBuffer(UInt64(var_1700995439018_280*var_1700995439018_280), 64)
        crcCheck.updateBuffer(UInt64(var_1700995439018_358*var_1700995439018_358), 64)
        crcCheck.updateBuffer(UInt64(var_1700995439018_783*var_1700995439018_783), 64)
        crcCheck.updateBuffer(UInt64(var_1700995439018_809*var_1700995439018_809), 64)
        crcCheck.crcCheck()
        crcCheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[(i + buffer_index) % buffer.size] = byteArray[i + byte_index]
            i++
        }
        buffer_index = (buffer_index + i) % buffer.size
    }

    func updateBuffer(input: Bool, byte_n: Int64): Unit {
        if (input == true) {
            updateBuffer(1, byte_n)
        } else {
            updateBuffer(0, byte_n)
        }
    }

    func updateBuffer(input: Rune, byte_n: Int64): Unit {
        updateBuffer(UInt64(UInt32(input)), byte_n)
    }

    func updateBuffer(input: String, byte_n: Int64): Unit {
        for (c in input) {
            updateBuffer(c, byte_n)
        }
    }

    func updateBuffer(input: Unit, byte_n: Int64): Unit {
        updateBuffer(input.toString(), byte_n)
    }

    func updateBuffer(input: Any, byte_n: Int64) : Unit {
        if (input is Hashable) {
            match(input as Hashable) {
                case Some(v) => updateBuffer(UInt64(v.hashCode()), byte_n)
                case _=> updateBuffer(1, byte_n)
            }
            
        } else if (input is ToString) {
            match(input as ToString) {
                case Some(v) => updateBuffer(v.toString(), byte_n)
                case _=> updateBuffer(1, byte_n)
            }
        } else {
            updateBuffer(1, byte_n)
        }
    }     
    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Class_1700995439018_125 {

}

extend Class_1700995439018_6 {

}

