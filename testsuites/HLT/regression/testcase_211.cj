/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args 

public let var_1668601034140_14 : Int8 = Int8(UInt8(UInt8(Int8(Int8(78)))))
public var var_1668601034140_57 : Class_1668601034140_53<UInt64, Range<UInt16>> = Class_1668601034140_53<UInt64, Range<UInt16>>()
let var_1668601034140_131 : Range<Int64> = ((59&127)..=((-84)&127):((108|1)))
public let var_1668601034140_143 : Bool = false
public var var_1668601034140_183 : Range<UInt16> = ((UInt16(UInt8(209))&127)..(UInt16(UInt8(0))&127):((Int64(Int8(UInt8(195)))|1)))
public let var_1668601034140_211 : Option<Float64> = Option<Float64>.None
public let var_1668601034140_243 : Int16 = Int16(UInt16(Int16(-107)))
public var var_1668601034140_325 : Unit = ()
public var var_1668601034140_353 : UInt8 = UInt8(63)
public var var_1668601034140_483 : (Array<Unit>, Int16, Range<UInt8>, UInt8, Bool, Int64, Bool) = ([(), (), (), (), (), (), (), (), (), ()], Int16(UInt8(UInt8(87))), ((UInt8(122)&127)..=(UInt8(UInt8(141))&127):((24|1))), UInt8(105), false, Int64(71), false)
var var_1668601034140_558 : (Array<UInt64>, Float64, Range<Int16>, UInt64, Range<Int32>, Rune) = ([UInt64(168), UInt64(1), UInt64(94), UInt64(181), UInt64(37), UInt64(4), UInt64(209), UInt64(75), UInt64(157), UInt64(43)], Float64(32.0), ((Int16(72)&127)..(Int16(70)&127):((-62)|1)), UInt64(249), ((Int32(-31)&127)..(Int32(104)&127):(((-66)|1))), r's')
let var_1668601034140_573 : Float64 = 124.0
public let var_1668601034140_581 : Option<(Array<UInt64>, Float64, Range<Int16>, UInt64, Range<Int32>, Rune)> = Option<(Array<UInt64>, Float64, Range<Int16>, UInt64, Range<Int32>, Rune)>.None
public var var_1668601034140_603 : UInt32 = UInt32(Int8(UInt8(UInt8(UInt8(23)))))
public var var_1668601034140_611 : ?(Array<Unit>, Int16, Range<UInt8>, UInt8, Bool, Int64, Bool) = (UInt32(Int16(UInt16(234))) as (Array<Unit>, Int16, Range<UInt8>, UInt8, Bool, Int64, Bool))
let var_1668601034140_620 : Range<UInt64> = ((UInt64(47)&127)..=(UInt64(Int32(-41))&127):((100|1)))
public open class Class_1668601034140_53<T0, T1> {
    public init() { // block id: 55

    }
;
    prop var_1668601034140_60 : Rune { // block id: 61
        get() { // block id: 63
            (-75.0);
            r'x'
        }

    };
    public prop var_1668601034140_197 : Int64 { // block id: 198
        get() { // block id: 200
            Int64(UInt64(UInt8(UInt8(110))))
        }

    };
    public static prop var_1668601034140_699 : Float64 { // block id: 700
        get() { // block id: 702
            15.0
        }

    }
}


public struct Struct_1668601034140_216 {
    public init() { // block id: 218

    }
;
    static mut prop var_1668601034140_221 : Int32 { // block id: 222
        get() { // block id: 224
            Int32(-92);
            var_1668601034140_749
        }

        set(Value) { // block id: 228
            ();
            var_1668601034140_749 = Value
        }

    };
    static var var_1668601034140_749 : Int32 = Int32(-46)
}

public func func_1668601034140_176(param_1668601034140_177 : Range<Int64>, param_1668601034140_178 : UInt64, namedParam_1668601034140_179 ! : Unit, namedParam_1668601034140_180 ! : String) : Int16 { // block id: 181
    var_1668601034140_183;
    let var_1668601034140_237 : UInt16 = UInt16(UInt16(UInt16(Int8(38))));
    try { // block id: 193
        var_1668601034140_57.var_1668601034140_197;
        var_1668601034140_211.getOrThrow();
        Int16(51)
    } catch (e: Exception) { // block id: 214
        Struct_1668601034140_216.var_1668601034140_221;
        let var_1668601034140_234 : Unit = ();
        if (var_1668601034140_143) { // block id: 232
            var_1668601034140_234;
            var_1668601034140_237;
            var_1668601034140_243
        } else { // block id: 247
            UInt16(243) | UInt16(161);
            var_1668601034140_243
        }
    }
}



func func_1668601034140_528(param_1668601034140_529 : Option<Float64>) : (Array<UInt64>, Float64, Range<Int16>, UInt64, Range<Int32>, Rune) { // block id: 530
    (match (var_1668601034140_183) {
        case _ : Array<Int32> => 
            var_1668601034140_325;
            let var_1668601034140_539 : Int64 = (-54);
            var_1668601034140_539
        
        case _ => 
            var_1668601034140_325;
            ();
            let var_1668601034140_547 : Int64 = Int64(UInt16(211));
            var_1668601034140_547
        
        case _ => 
            var_1668601034140_325;
            ();
            30
        
    }&127)..=((-126)&127):(((-8)|1));
    var_1668601034140_558
}


func func_1668601034140_461<T0>(namedParam_1668601034140_462 ! : Range<Int32>, optionalParam_1668601034140_463 ! : Option<(Array<Unit>, Int16, Range<UInt8>, UInt8, Bool, Int64, Bool)> = Option<(Array<Unit>, Int16, Range<UInt8>, UInt8, Bool, Int64, Bool)>.Some(([(), (), (), (), (), (), (), (), (), ()], Int16(UInt16(Int16(-72))), ((UInt8(244)&127)..(UInt8(33)&127):(52|1)), UInt8(61), false, (-91), false)), optionalParam_1668601034140_475 ! : Bool = true) : Float64 { // block id: 477
    var_1668601034140_57.var_1668601034140_60;
    var_1668601034140_483[2];
    if ([var_1668601034140_143, true, true, var_1668601034140_143, var_1668601034140_143, var_1668601034140_143, false, false, var_1668601034140_143, false][6]) { (Option<Float64>.Some(var_1668601034140_573)|>func_1668601034140_528) } else { (var_1668601034140_581 ?? var_1668601034140_558) } [1]
}

func func_1668601034140_176(param_1668601034140_173 : Int16) : Array<Unit> { // block id: 174
    let var_1668601034140_261 : ?Range<Int64> = (Struct_1668601034140_216() as Range<Int64>);
    let var_1668601034140_270 : Int64 = (-59);
    let var_1668601034140_298 : Array<Int32> = [Int32(-34), Int32(-11), Int32(-112), Int32(33), Int32(-68), Int32(-109), Int32(-17), Int32(117), Int32(-48), Int32(-71)];
    func func_1668601034140_287<T0>(optionalParam_1668601034140_288 ! : Bool = (Option<Range<Int64>>.None is Range<Int32>), optionalParam_1668601034140_291 ! : UInt32 = UInt32(UInt32(237))) : Bool { // block id: 294
        var_1668601034140_298[5];
        try { // block id: 304
            let var_1668601034140_306 : (Array<Unit>, Int16, Range<UInt8>, UInt8, Bool, Int64, Bool) = ([(), (), (), (), (), (), (), (), (), ()], Int16(-128), ((UInt8(67)&127)..=(UInt8(157)&127):((-117)|1)), UInt8(71), (() is UInt8), (-41), false);
            var_1668601034140_306;
            let var_1668601034140_319 : Struct_1668601034140_216 = Struct_1668601034140_216();
            if (false) { var_1668601034140_319 } else { Struct_1668601034140_216() } ;
            var_1668601034140_306
        } finally { // block id: 323
            var_1668601034140_325;
            let var_1668601034140_330 : UInt16 = UInt16(Int8(UInt8(Int8(UInt8(103)))));
            UInt16(56) << ((var_1668601034140_330) & 7);
            let var_1668601034140_338 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
            (var_1668601034140_338, Int16(-100), ((UInt8(100)&127)..=(UInt8(124)&127):((-84)|1)), var_1668601034140_353, var_1668601034140_143, (-72), var_1668601034140_143)
        }[4]
    }
;
    var loopTimeVar_1668601034140_362 : Int64 = 0;
    func_1668601034140_176((if (var_1668601034140_143) { Option<Range<Int64>>.None } else { var_1668601034140_261 }  ?? if (var_1668601034140_143) { var_1668601034140_131 } else { ((var_1668601034140_270&127)..(var_1668601034140_270&127):((47|1))) } ), try { // block id: 275
        false;
        UInt64(242)
    } finally { // block id: 278
        var var_1668601034140_280 : Unit = ();
        var_1668601034140_280;
        UInt64(134) | UInt64(137)
    }, namedParam_1668601034140_179 : do {
        loopTimeVar_1668601034140_362++;

    } while ((func_1668601034140_287<Array<Unit>>(optionalParam_1668601034140_288 : true)) && loopTimeVar_1668601034140_362 < 100 ) , namedParam_1668601034140_180 : "|k)o'}h~`$");
    let var_1668601034140_387 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    var var_1668601034140_434 : String = ###"^~,Xd[\\3g<"###;
    var var_1668601034140_448 : (Array<Unit>, Int16, Range<UInt8>, UInt8, Bool, Int64, Bool) = ([(), (), (), (), (), (), (), (), (), ()], Int16(-115), ((UInt8(147)&127)..(UInt8(250)&127):((-22)|1)), UInt8(52), (((r'D' is Rune) as (Array<Unit>, Int16, Range<UInt8>, UInt8, Bool, Int64, Bool)) is (Range<Int64>, UInt64, Unit, String) -> Int16), 104, false);
    var var_1668601034140_586 : Range<Int32> = ((Int32(109)&127)..=(Int32(-116)&127):(((-52)|1)));
    try { // block id: 365
        let var_1668601034140_383 : Bool = false;
        try { // block id: 367
            var var_1668601034140_370 : Int8 = Int8(UInt8(12));
            var_1668601034140_370 <<= ((var_1668601034140_370) & 7);
            var_1668601034140_325;
            "@;y1?~<p%:"
        } catch (_) { // block id: 376
            var var_1668601034140_378 : String = "3!ksHhcx@~";
            var_1668601034140_378
        } finally { // block id: 380
            let var_1668601034140_409 : (Array<Unit>, Int16, Range<UInt8>, UInt8, Bool, Int64, Bool) = ([(), (), (), (), (), (), (), (), (), ()], Int16(94), ((UInt8(192)&127)..=(UInt8(96)&127):((-26)|1)), UInt8(47), (105 is String), Int64(UInt64(UInt32(165))), (((Int8(3)&127)..=(Int8(93)&127):(32|1)) is Range<UInt64>));
            if (var_1668601034140_383) { (var_1668601034140_387, var_1668601034140_243, ((UInt8(174)&127)..=(UInt8(29)&127):((29|1))), UInt8(196), var_1668601034140_143, var_1668601034140_270, false) } else { var_1668601034140_409 } ;
            var_1668601034140_434 = "!_&,.-W]`h";
            if (var_1668601034140_383) { ###"dnY9)GQoWc"### } else { var_1668601034140_434 } 
        };
        Option<(Array<Unit>, Int16, Range<UInt8>, UInt8, Bool, Int64, Bool)>.Some(var_1668601034140_448).getOrThrow();
        func_1668601034140_461<Option<Array<Array<Unit>>>>(namedParam_1668601034140_462 : var_1668601034140_586, optionalParam_1668601034140_475 : var_1668601034140_383)
    } finally { // block id: 592
        let var_1668601034140_640 : (Range<UInt64>, Array<Unit>, Range<Int32>, Array<Unit>) = (((UInt64(94)&127)..=(UInt64(247)&127):((-97)|1)), [(), (), (), (), (), (), (), (), (), ()], ((Int32(-92)&127)..(Int32(45)&127):(70|1)), [(), (), (), (), (), (), (), (), (), ()]);
        func func_1668601034140_594(param_1668601034140_595 : UInt8) : Unit { // block id: 596
            let var_1668601034140_682 : Range<Int32> = ((Int32(-20)&127)..(Int32(14)&127):(86|1));
            if (func_1668601034140_287<Array<Unit>>(optionalParam_1668601034140_288 : var_1668601034140_143, optionalParam_1668601034140_291 : var_1668601034140_603)) { // block id: 609
                var_1668601034140_611;
                if (false) { (var_1668601034140_620, var_1668601034140_387, ((Int32(-80)&127)..=(Int32(23)&127):((-96)|1)), [(), var_1668601034140_325, var_1668601034140_325, var_1668601034140_325, var_1668601034140_325, (), (), (), (), ()]) } else { var_1668601034140_640 } 
            } else { // block id: 666
                ((Int8(-107)&127)..=(Int8(37)&127):((-115)|1));
                (var_1668601034140_620, [var_1668601034140_325, (), (), var_1668601034140_325, var_1668601034140_325, var_1668601034140_325, (), (), var_1668601034140_325, var_1668601034140_325], var_1668601034140_682, [(), (), (), (), (), (), (), (), (), ()])
            }[3];
            var loopTimeVar_1668601034140_691 : Int64 = 0;
            while (((((UInt16(172)&127)..=(UInt16(55)&127):((-36)|1)) is Float64)) && loopTimeVar_1668601034140_691 < 100 ) {
                loopTimeVar_1668601034140_691++;

            }
        }
;
        func_1668601034140_594(UInt8(160));
        var var_1668601034140_694 : UInt64 = UInt64(214);
        var_1668601034140_694;
        Class_1668601034140_53<UInt64, Range<UInt16>>.var_1668601034140_699
    };
    var_1668601034140_483[0]
}


public func func_1668601034140_47(param_1668601034140_48 : Range<UInt16>, optionalParam_1668601034140_49 ! : String = """
~_L31
8|2V6
""") : Array<Unit> { // block id: 51
    var_1668601034140_57.var_1668601034140_60;
    var var_1668601034140_74 : Int64 = (-100);
    var var_1668601034140_82 : UInt8 = UInt8(97);
    var var_1668601034140_106 : Int16 = Int16(76);
    let var_1668601034140_114 : Unit = ();
    var var_1668601034140_117 : Range<Int16> = ((Int16(60)&127)..(Int16(-120)&127):((-58)|1));
    match (if ((UInt64(194) != UInt64(148))) { ((Int16(72)&127)..=(Int16(-82)&127):((-84)|1)) } else { match (var_1668601034140_74) {
        case -74 => 
            ((80&127)..(8&127):((-54)|1));
            ((var_1668601034140_82&127)..=(var_1668601034140_82&127):((var_1668601034140_74|1)));
            ((Int16(115)&127)..=(Int16(-103)&127):((43|1)))
        
        case 35 | -97 => 
            ((Int16(104)&127)..=(Int16(-92)&127):(97|1))
        
        case -77 => 
            var var_1668601034140_99 : Int32 = Int32(-124);
            var_1668601034140_99 <<= ((Int32(30)) & 7);
            ((Int8(-57)&127)..(Int8(44)&127):(67|1));
            ((Int16(-6)&127)..=(var_1668601034140_106&127):((var_1668601034140_74|1)))
        
        case caseVar_1668601034140_111 => 
            var_1668601034140_114;
            var_1668601034140_117
        
        case _ => 
            Int32(100);
            ((var_1668601034140_106&127)..(Int16(-50)&127):((var_1668601034140_74|1)))
        
    } } ) {
        case _ : Range<UInt64> => 
            ();
            var_1668601034140_131
        
        case _ => 
            var_1668601034140_131
        
    };
    var var_1668601034140_149 : UInt64 = UInt64(Int16(-12));
    var var_1668601034140_162 : UInt32 = UInt32(UInt8(Int8(Int8(-127))));
    if ((if (var_1668601034140_143) { // block id: 145
        var_1668601034140_114;
        var_1668601034140_149 %= ((UInt64(206)) | 1);
        var_1668601034140_14 * Int8(18)
    } else if (var_1668601034140_143) { // block id: 157
        var_1668601034140_14
    } else { // block id: 159
        var_1668601034140_162 += var_1668601034140_162;
        Int8(-29) | var_1668601034140_14
    } is Range<Int64>)) { func_1668601034140_176(if (true) { // block id: 709
        Option<Range<Int64>>.Some(var_1668601034140_131);
        ();
        var_1668601034140_243 | Int16(63)
    } else { // block id: 716
        var_1668601034140_325;
        ((Int16(-16)&127)..=(Int16(71)&127):((var_1668601034140_74|1)));
        Int16(124) >> ((Int16(-10)) & 7)
    }) } else { (Option<Array<Array<Unit>>>.None ?? [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]])[8] } 
}

main(): Int64 {
    try {
        let var_1668601034140_11 : Rune = r'f';
        let var_1668601034140_22 : UInt32 = UInt32(Int32(UInt8(20)));
        if ((Float32(126.0) is Rune)) { // block id: 8
            ();
            var_1668601034140_11;
            var_1668601034140_14
        } else if ((var_1668601034140_22 is UInt64)) { // block id: 26
            var_1668601034140_14 << ((Int8(-91)) & 7)
        } else { // block id: 30
            ();
            Int8(105) ^ Int8(-110)
        };
        let var_1668601034140_737 : UInt16 = UInt16(UInt8(199));
        let var_1668601034140_742 : Int64 = Int64(Int32(UInt8(Int8(109))));
        func_1668601034140_47(((var_1668601034140_737&127)..(var_1668601034140_737&127):((var_1668601034140_742|1))))[6];
        (-15)
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var_1668601034140_14*var_1668601034140_14), 64)
        crccheck.updateBuffer(UInt64(var_1668601034140_22*var_1668601034140_22), 64)
        crccheck.updateBuffer(UInt64(var_1668601034140_243*var_1668601034140_243), 64)
        crccheck.updateBuffer(UInt64(var_1668601034140_353*var_1668601034140_353), 64)
        crccheck.updateBuffer(UInt64(var_1668601034140_603*var_1668601034140_603), 64)
        crccheck.updateBuffer(UInt64(var_1668601034140_737*var_1668601034140_737), 64)
        crccheck.updateBuffer(UInt64(var_1668601034140_742*var_1668601034140_742), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
