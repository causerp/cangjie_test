/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// (CJNATIVE) EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// (CJNATIVE) RUN-EXEC: %run %run_opt %output %run_args
// (not CJNATIVE) ERRCHECK: %compiler %overflow_wrapping %f %cmp_opt 

public const var_1691442830355_18 : Int16 = 110
public const var_1691442830355_58 : UInt32 = 106
public const var_1691442830355_73 : UInt16 = 140
const var_1691442830355_113 : Float32 = -34.0
var var_1691442830355_142 : Struct_1691442830355_138 = Struct_1691442830355_138()
var var_1691442830355_241 : Rune = r'j'
var var_1691442830355_386 : UInt64 = UInt64(UInt64(81))
var var_1691442830355_407 : Class_1691442830355_403<Int16> = Class_1691442830355_403<Int16>()
var var_1691442830355_433 : UInt32 = UInt32(191)
var var_1691442830355_613 : (UInt64, UInt32, Unit, (UInt8, UInt8, UInt64, Unit, (Unit, Int8, Float32, Rune, Float32, Rune, Int16, Rune, Int8), Int8), Range<UInt8>, Range<Int32>, Float32) = (UInt64(254), UInt32(6), (), (UInt8(49), UInt8(Int8(15)), UInt64(212), (), ((), Int8(UInt8(149)), Float32(Float32(117.0)), r'E', Float32(124.0), r't', Int16(-42), r'b', Int8(-65)), Int8(UInt8(UInt8(4)))), ((UInt8(UInt8(20))&127)..=(UInt8(UInt8(UInt8(UInt8(14))))&127):(Int64(19)|1)), ((Int32(Int32(UInt16(UInt8(110))))&127)..=(Int32(Int32(UInt8(UInt8(239))))&127):(Int64(-48)|1)), Float32(31.0))
var var_1691442830355_702 : Range<UInt64> = ((UInt64(UInt64(31))&127)..(UInt64(UInt64(194))&127):(Int64(Int32(115))|1))
public var var_1691442830355_777 : Int = Int64(-124)
let var_1691442830355_783 : Array<UInt64> = [UInt64(91), UInt64(51), UInt64(173), UInt64(UInt32(44)), UInt64(63), UInt64(252), UInt64(UInt16(121)), UInt64(Int32(71)), UInt64(5), UInt64(219)]
public open class Class_1691442830355_7 {
    init() { // block id: 9

    }
;
    static const var_1691442830355_12 : Bool = true;
    public static let var_1691442830355_172 : Class_1691442830355_168<Float64, Int8, String> = Class_1691442830355_168<Float64, Int8, String>();
    private let var_1691442830355_175 : Unit = ();
    public static var var_1691442830355_184 : Class_1691442830355_180<UInt8> = Class_1691442830355_180<UInt8>();
    static let var_1691442830355_194 : Int32 = Int32(-29);
    mut prop var_1691442830355_212 : Unit { // block id: 213
        get() { // block id: 215
            ();
            ();
            ()
        }

        set(Value) { // block id: 221
            ();
            ()
        }

    };
    static func func_1691442830355_160<T0, T1>(optionalParam_1691442830355_161 ! : Unit = (), optionalParam_1691442830355_163 ! : Int8 = Int8(Int8(-8))) : Float32 { // block id: 166
        var_1691442830355_172.var_1691442830355_175;
        var_1691442830355_184.func_1691442830355_187()[4]
    }
;
    public init(namedParam_1691442830355_399 ! : Option<Int8>, namedParam_1691442830355_400 ! : String) { // block id: 401
        var_1691442830355_407.var_1691442830355_212;
        let var_1691442830355_418 : Option<Rune> = (Float64(Float64(-19.0)) as Rune);
        let var_1691442830355_471 : Unit = ();
        let var_1691442830355_491 : Bool = false;
        try { // block id: 411
            var_1691442830355_418.getOrThrow()
        } catch (e: Exception) { // block id: 422
            var loopTimeVar_1691442830355_436 : Array<UInt64> = [UInt64(8), UInt64(218), UInt64(Int16(Int8(105))), UInt64(138), UInt64(Int16(-53)), UInt64(1), UInt64(Int16(Int8(Int8(93)))), UInt64(179), UInt64(UInt8(105)), UInt64(UInt64(23))];
            for (i in loopTimeVar_1691442830355_436 where true) {
                var var_1691442830355_428 : Int8 = Int8(-127);
                var_1691442830355_428 % ((Int8(3)) | 1);
                var_1691442830355_433 <<= ((UInt32(163)) & 7)
            };
            const var_1691442830355_480 : Rune = r's';
            var var_1691442830355_486 : Int8 = Int8(-90);
            (UInt8(234), UInt8(6), UInt64(90), var_1691442830355_471, (var_1691442830355_471, Int8(115), var_1691442830355_113, r'W', Float32(20.0), var_1691442830355_480, var_1691442830355_18, var_1691442830355_241, Int8(15)), var_1691442830355_486)[2];
            if (var_1691442830355_491) { // block id: 493
                let var_1691442830355_495 : Range<Int64> = ((Int64(Int64(UInt32(223)))&127)..(Int64(Int64(-120))&127):(Int64(-6)|1));
                var_1691442830355_495;
                r'c'
            } else { // block id: 502
                var_1691442830355_241;
                ();
                if (var_1691442830355_491) { var_1691442830355_241 } else { r'0' } 
            }
        }
    }
;
    public var var_1691442830355_771 : Int16 = Int16(125);
    func func_1691442830355_736<T0>(param_1691442830355_737 : UInt32, optionalParam_1691442830355_738 ! : Range<UInt32> = ((UInt32(UInt32(169))&127)..=(UInt32(UInt32(239))&127):(Int64(-88)|1))) : Int64 { // block id: 740
        let var_1691442830355_749 : Option<Unit> = Option<Unit>.None;
        try { // block id: 742
            (var_1691442830355_749 ?? var_1691442830355_212);
            var loopTimeVar_1691442830355_761 : Int64 = 0;
            do {
                loopTimeVar_1691442830355_761++;
                var_1691442830355_113;
                if (var_1691442830355_12) { var_1691442830355_749 } else { var_1691442830355_749 } 
            } while ((false) && loopTimeVar_1691442830355_761 < 100 ) ;
            match (Enum_1691442830355_763<Array<UInt64>, Class_1691442830355_403<Int16>, Array<UInt64>>.defaultValue) {
                case defaultValue => 
                    var_1691442830355_771++
                
                case _ => 
                    var_1691442830355_777 <<= ((Int64(-20)) & 7);
                    ()
                
            }
        } catch (_) { // block id: 781
            var_1691442830355_783;
            ();
            let var_1691442830355_802 : VArray<Unit, $2> = [(), ()];
            var_1691442830355_802[0]
        };
        let var_1691442830355_820 : Array<VArray<Int64, $1>> = [[Int64(-101)], [Int64(-68)], [Int64(-59)], [Int64(58)], [Int64(103)], [Int64(-120)], [Int64(32)], [Int64(-64)], [Int64(-14)], [Int64(112)]];
        (var_1691442830355_142.var_1691442830355_813 ?? var_1691442830355_820[4][0])
    }
;
    public let var_1691442830355_854 : (UInt8, UInt8, UInt64, Unit, (Unit, Int8, Float32, Rune, Float32, Rune, Int16, Rune, Int8), Int8) = (UInt8(40), UInt8(149), UInt64(172), (), ((), Int8(79), Float32(-97.0), r'Y', Float32(-80.0), r'D', Int16(-46), r'I', Int8(-45)), Int8(-99));
    public prop var_1691442830355_895 : Rune { // block id: 896
        get() { // block id: 898
            ((), r'R', ((Int64(Int64(UInt32(117)))&127)..(Int64(Int64(-79))&127):(Int64(Int16(-109))|1)), ((Int32(-93) as Int8) as Int8), UInt32(208), ((Int32(Int32(80))&127)..=(Int32(Int32(-76))&127):(Int64(-126)|1)), Int64(UInt8(67)), UInt16(253));
            r'0'
        }

    }
}

public const func func_1691442830355_120() : UInt32 { // block id: 121
    var_1691442830355_58
}

public const func func_1691442830355_25(param_1691442830355_26 : UInt8) : Unit { // block id: 27
    ();
    const func func_1691442830355_30(param_1691442830355_31 : UInt32, param_1691442830355_32 : Bool, namedParam_1691442830355_33 ! : UInt32, optionalParam_1691442830355_34 ! : UInt32 = 187) : Unit { // block id: 36

    }
;
    const func func_1691442830355_50<T0, T1, T2>(param_1691442830355_51 : UInt16, optionalParam_1691442830355_52 ! : Rune = r'U', optionalParam_1691442830355_54 ! : Float64 = -71.0) : UInt32 { // block id: 56
        var_1691442830355_58
    }
;
    const func func_1691442830355_79(optionalParam_1691442830355_80 ! : UInt16 = 113) : UInt16 { // block id: 82
        83
    }
;
    const func func_1691442830355_61(optionalParam_1691442830355_62 ! : Int16 = 30, optionalParam_1691442830355_64 ! : Float64 = -111.0, namedParam_1691442830355_66 ! : UInt8) : UInt16 { // block id: 67
        func_1691442830355_30(var_1691442830355_58, true, namedParam_1691442830355_33 : func_1691442830355_50<UInt8, Int64, UInt32>(var_1691442830355_73));
        var_1691442830355_73 << (((func_1691442830355_79(optionalParam_1691442830355_80 : var_1691442830355_73) % ((var_1691442830355_73) | 1))) & 7)
    }
;
    const func func_1691442830355_38(optionalParam_1691442830355_39 ! : Rune = r'y', optionalParam_1691442830355_41 ! : Float32 = 11.0, namedParam_1691442830355_43 ! : String) : UInt32 { // block id: 44
        const var_1691442830355_46 : Unit = ();
        var_1691442830355_46;
        -103.0;
        const func func_1691442830355_87(param_1691442830355_88 : UInt16) : Int16 { // block id: 89
            ();
            var_1691442830355_73;
            -5
        }
;
        const func func_1691442830355_96(namedParam_1691442830355_97 ! : UInt16, optionalParam_1691442830355_98 ! : UInt64 = 189, optionalParam_1691442830355_100 ! : Rune = r'E', namedParam_1691442830355_102 ! : Float64) : UInt8 { // block id: 103
            26
        }
;
        const var_1691442830355_107 : UInt64 = 94;
        const var_1691442830355_110 : Float64 = 92.0;
        func_1691442830355_50<UInt8, Int64, UInt32>(func_1691442830355_61(optionalParam_1691442830355_62 : func_1691442830355_87(var_1691442830355_73), optionalParam_1691442830355_64 : 85.0, namedParam_1691442830355_66 : func_1691442830355_96(namedParam_1691442830355_97 : var_1691442830355_73, optionalParam_1691442830355_98 : var_1691442830355_107, namedParam_1691442830355_102 : var_1691442830355_110)))
    }
;
    const var_1691442830355_116 : String = ###"HvOe7%j'd`"###;
    func_1691442830355_30(func_1691442830355_38(optionalParam_1691442830355_41 : var_1691442830355_113, namedParam_1691442830355_43 : var_1691442830355_116), false, namedParam_1691442830355_33 : func_1691442830355_120())
}

public struct Struct_1691442830355_138 {
    init() { // block id: 140

    }
;
    let var_1691442830355_145 : Unit = ();
    public var var_1691442830355_813 : ?Int64 = Option<Int64>.None
}

public open class Class_1691442830355_168<T0, T1, T2> <: Class_1691442830355_7 {
    init() { // block id: 170

    }
;
    mut prop var_1691442830355_225 : Int8 { // block id: 226
        get() { // block id: 228
            ();
            Int8(UInt8(UInt8(144)));
            var_1691442830355_934
        }

        set(Value) { // block id: 235
            ();
            var_1691442830355_934 = Value
        }

    };
    public static var var_1691442830355_931 : VArray<Int8, $1> = [Int8(123)];
    public open func func_1691442830355_187() : (Unit, Int8, Float32, Rune, Float32, Rune, Int16, Rune, Int8) { // block id: 827
        var loopTimeVar_1691442830355_845 : Int64 = 0;
        var var_1691442830355_891 : Rune = r'q';
        (try { // block id: 830
            var_1691442830355_702;
            Option<(Unit, Int8, Float32, Rune, Float32, Rune, Int16, Rune, Int8)>.None
        } finally { // block id: 833
            var_1691442830355_212;
            if (var_1691442830355_12) { Option<(Unit, Int8, Float32, Rune, Float32, Rune, Int16, Rune, Int8)>.None } else { Option<(Unit, Int8, Float32, Rune, Float32, Rune, Int16, Rune, Int8)>.None } 
        } ?? (do {
            loopTimeVar_1691442830355_845++;
            var_1691442830355_386
        } while ((true) && loopTimeVar_1691442830355_845 < 100 ) , [Int8(-125), Int8(32), Int8(50), Int8(-20), Int8(35), Int8(-2), Int8(-57), Int8(-68), Int8(97), Int8(23)][1], (var_1691442830355_854, r'C', Int32(87), Float32(99.0), ((UInt8(UInt8(197))&127)..=(UInt8(UInt8(213))&127):(var_1691442830355_777|1)), var_1691442830355_113, r'0', r'j')[3], [r'H', r'o', r'Z', r'X', r'S', r'V', r'2', r'8', r'M', r'L'][9], var_1691442830355_113, [var_1691442830355_241, var_1691442830355_891, r'b', var_1691442830355_895, r'3', var_1691442830355_895, var_1691442830355_241, r'u', var_1691442830355_241, var_1691442830355_241][3], Int16(-102), [r's', r's', r'c', r'2', r'4', r'x', r'o', r'J', r'T', r'q'][9], var_1691442830355_931[0]))
    }
;
    var var_1691442830355_934 : Int8 = Int8(-109)
    static init() {
    }
}

public open class Class_1691442830355_180<T0> <: Class_1691442830355_168<Float64, Int8, String> {
    init() { // block id: 182

    }
;
    static mut prop var_1691442830355_250 : (Unit, Int8, Float32, Rune, Float32, Rune, Int16, Rune, Int8) { // block id: 251
        get() { // block id: 253
            ((), Int8(-49), Float32(Float32(Float32(60.0))), r'T', Float32(-80.0), r'q', Int16(-109), r'4', Int8(UInt8(228)))
        }

        set(Value) { // block id: 269

        }

    };
    prop var_1691442830355_295 : Int16 { // block id: 296
        get() { // block id: 298
            Int16(-29)
        }

    };
    public override func func_1691442830355_187() : (Unit, Int8, Float32, Rune, Float32, Rune, Int16, Rune, Int8) { // block id: 188
        try { // block id: 190
            try { // block id: 192
                var_1691442830355_194
            } catch (e: Exception) { // block id: 196
                var_1691442830355_12;
                Int32(0)
            } finally { // block id: 199
                Int32(105)
            };
            const var_1691442830355_205 : UInt8 = 233;
            (var_1691442830355_205, var_1691442830355_205, UInt64(117), (), (var_1691442830355_212, var_1691442830355_225, Float32(72.0), r'x', Float32(-97.0), var_1691442830355_241, var_1691442830355_18, var_1691442830355_241, Int8(108)), Int8(45))[4]
        } catch (e: Exception) { // block id: 248
            var_1691442830355_250
        } finally { // block id: 270
            (Option<(Unit, Int8, Float32, Rune, Float32, Rune, Int16, Rune, Int8)>.Some(((), Int8(-95), var_1691442830355_113, r'v', var_1691442830355_113, r'S', Int16(-110), r'V', var_1691442830355_225)) ?? ((), Int8(57), var_1691442830355_113, var_1691442830355_241, var_1691442830355_113, r'D', var_1691442830355_295, var_1691442830355_241, Int8(-38)))
        }
    }
;
    public init(namedParam_1691442830355_605 ! : Int8, namedParam_1691442830355_606 ! : UInt8) { // block id: 607
        var var_1691442830355_671 : Int64 = Int64(48);
        var var_1691442830355_720 : Unit = ();
        try { // block id: 609
            var_1691442830355_613[2];
            const var_1691442830355_679 : Unit = ();
            var var_1691442830355_686 : UInt16 = UInt16(151);
            match (()) {
                case _ => 
                    var var_1691442830355_662 : UInt8 = UInt8(UInt8(UInt8(UInt8(UInt8(9)))));
                    var_1691442830355_662 |= UInt8(194);
                    var_1691442830355_671++;
                    ()
                
                case caseVar_1691442830355_676 => 
                    var_1691442830355_679
                
                case _ => 
                    var_1691442830355_686 = UInt16(11);
                    ()
                
                case _ => 
                    ()
                
            };
            ()
        } catch (_) { // block id: 694
            var_1691442830355_386;
            var loopTimeVar_1691442830355_712 : Int64 = 0;
            do {
                loopTimeVar_1691442830355_712++;
                if (false) { var_1691442830355_702 } else { ((UInt64(UInt64(11))&127)..=(UInt64(UInt64(113))&127):(Int64(48)|1)) } ;
                Option<Int8>.Some(Int8(90))
            } while ((true) && loopTimeVar_1691442830355_712 < 100 ) 
        } finally { // block id: 713
            const var_1691442830355_716 : Bool = true;
            var loopTimeVar_1691442830355_722 : Range<UInt64> = ((UInt64(UInt64(UInt32(UInt32(24))))&127)..=(UInt64(UInt64(Int64(111)))&127):(Int64(11)|1));
            for (i in loopTimeVar_1691442830355_722 where var_1691442830355_716) {
                var_1691442830355_720
            }
        }
    }

}


func func_1691442830355_153(param_1691442830355_154 : Int8) : Float64 { // block id: 155
    Float64((Class_1691442830355_7.func_1691442830355_160<Option<(Unit, Int8, Float32, Rune, Float32, Rune, Int16, Rune, Int8)>, UInt32>(optionalParam_1691442830355_161 : ())))
}


public open class Class_1691442830355_403<T0> <: Class_1691442830355_168<Float64, Int8, String> {
    init() { // block id: 405

    }

}





public enum Enum_1691442830355_763<T0, T1, T2> {
    defaultValue
}

main(): Int64 {
    try {
        if (Class_1691442830355_7.var_1691442830355_12) { // block id: 14
            Int16(-125)
        } else { // block id: 16
            var_1691442830355_18
        };
        const var_1691442830355_390 : UInt = 249;
        const var_1691442830355_530 : Int64 = 85;
        func func_1691442830355_22() : Class_1691442830355_7 { // block id: 23
            const var_1691442830355_129 : UInt8 = 156;
            var_1691442830355_129 % (((-UInt8(238))) | 1)|>{ lambdaParameter_1691442830355_125 : UInt8 =>  };
            let var_1691442830355_359 : Bool = (Class_1691442830355_180<UInt8>() is (Unit, Int8) -> Float32);
            let var_1691442830355_363 : ?(Unit, Int8, Float32, Rune, Float32, Rune, Int16, Rune, Int8) = (###"U;?QFGG&7O"### as (Unit, Int8, Float32, Rune, Float32, Rune, Int16, Rune, Int8));
            let var_1691442830355_521 : Range<Int64> = ((Int64(Int64(57))&127)..(Int64(Int64(44))&127):(Int64(-29)|1));
            let var_1691442830355_602 : Class_1691442830355_7 = Class_1691442830355_180<UInt8>(namedParam_1691442830355_605 : Int8(Int8(UInt8(74))), namedParam_1691442830355_606 : UInt8(Int8(119)));
            try { // block id: 134
                UInt16(Int8(96));
                var_1691442830355_142.var_1691442830355_145;
                let var_1691442830355_394 : Float64 = Float64(Float64(-44.0));
                func func_1691442830355_148<T0>(param_1691442830355_149 : Struct_1691442830355_138) : Class_1691442830355_7 { // block id: 150
                    var var_1691442830355_305 : (Int8) -> Float64 = func_1691442830355_153;
                    var var_1691442830355_314 : Int8 = Int8(-4);
                    var var_1691442830355_320 : ?(Unit, Int8, Float32, Rune, Float32, Rune, Int16, Rune, Int8) = Option<(Unit, Int8, Float32, Rune, Float32, Rune, Int16, Rune, Int8)>.None;
                    let var_1691442830355_336 : Float64 = Float64(-104.0);
                    var var_1691442830355_368 : (Unit, Int8, Float32, Rune, Float32, Rune, Int16, Rune, Int8) = ((), Int8(-45), Float32(0.0), r'P', Float32(10.0), r'V', Int16(90), r'Q', Int8(UInt8(Int8(-56))));
                    ((Option<Int8>.Some(var_1691442830355_314) ?? var_1691442830355_314)|>var_1691442830355_305) * match (match (var_1691442830355_320) {
                        case _ : UInt16 => 
                            var var_1691442830355_327 : Int16 = Int16(-14);
                            var_1691442830355_327--;
                            Option<(Unit, Int8, Float32, Rune, Float32, Rune, Int16, Rune, Int8)>.None
                        
                        case caseVar_1691442830355_332 : Class_1691442830355_7 => 
                            ();
                            var_1691442830355_336;
                            Option<(Unit, Int8, Float32, Rune, Float32, Rune, Int16, Rune, Int8)>.None
                        
                        case caseVar_1691442830355_341 : (UInt8, UInt8, UInt64, Unit, (Unit, Int8, Float32, Rune, Float32, Rune, Int16, Rune, Int8), Int8) => 
                            var_1691442830355_314 + var_1691442830355_314;
                            var_1691442830355_320
                        
                        case caseVar_1691442830355_349 => 
                            Int32(125);
                            Option<(Unit, Int8, Float32, Rune, Float32, Rune, Int16, Rune, Int8)>.None
                        
                        case _ => 
                            Option<Int8>.Some(var_1691442830355_314);
                            if (var_1691442830355_359) { var_1691442830355_363 } else { Option<(Unit, Int8, Float32, Rune, Float32, Rune, Int16, Rune, Int8)>.Some(var_1691442830355_368) } 
                        
                    }) {
                        case _ => 
                            ();
                            var_1691442830355_386 %= ((var_1691442830355_390) | 1);
                            -var_1691442830355_394
                        
                    };
                    let var_1691442830355_544 : ?Bool = (((UInt32(UInt32(176))&127)..(UInt32(UInt32(181))&127):(Int64(-38)|1)) as Bool);
                    Class_1691442830355_7(namedParam_1691442830355_399 : (Option<(Unit, Rune, Range<Int64>, Option<Int8>, UInt32, Range<Int32>, Int64, UInt16)>.None ?? ((), r'E', var_1691442830355_521, Option<Int8>.None, UInt32(65), ((Int32(Int32(-45))&127)..(Int32(Int32(-84))&127):(Int64(-118)|1)), var_1691442830355_530, UInt16(44)))[3], namedParam_1691442830355_400 : if (var_1691442830355_359) { // block id: 536
                        """
T$-V:
9Oj=E
"""
                    } else if (var_1691442830355_544.getOrThrow()) { // block id: 547
                        ();
                        var_1691442830355_394;
                        let var_1691442830355_554 : String = """
&6'dW
AaNY\\
""";
                        if (false) { "jPIl\"?]!I_" } else { var_1691442830355_554 } 
                    } else { // block id: 556
                        -Int64(-7);
                        UInt64(34);
                        let var_1691442830355_561 : String = "Xp&i0m^r(6";
                        var_1691442830355_561
                    })
                }
;
                func_1691442830355_148<Range<UInt32>>(Struct_1691442830355_138())
            } catch (_) { // block id: 564
                ();
                let var_1691442830355_576 : Int64 = Int64(UInt32(98));
                match (r'x') {
                    case _ => 
                        Int8(-77) & Int8(-1);
                        ();
                        var_1691442830355_576 < var_1691442830355_576
                    
                };
                var var_1691442830355_585 : Float64 = Float64(Float32(Float32(Float32(53.0))));
                try { // block id: 581
                    var_1691442830355_359;
                    var_1691442830355_585 *= Float64(86.0);
                    var var_1691442830355_592 : Class_1691442830355_7 = Class_1691442830355_168<Float64, Int8, String>();
                    var_1691442830355_592
                } finally { // block id: 594
                    var_1691442830355_386 - UInt64(91);
                    if (var_1691442830355_359) { Class_1691442830355_403<Int16>() } else { var_1691442830355_602 } 
                }
            }
        }
;
        func_1691442830355_22().func_1691442830355_736<Range<UInt8>>(var_1691442830355_433)
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var_1691442830355_18*var_1691442830355_18), 64)
        crccheck.updateBuffer(UInt64(var_1691442830355_58*var_1691442830355_58), 64)
        crccheck.updateBuffer(UInt64(var_1691442830355_73*var_1691442830355_73), 64)
        crccheck.updateBuffer(UInt64(var_1691442830355_386*var_1691442830355_386), 64)
        crccheck.updateBuffer(UInt64(var_1691442830355_390*var_1691442830355_390), 64)
        crccheck.updateBuffer(UInt64(var_1691442830355_433*var_1691442830355_433), 64)
        crccheck.updateBuffer(UInt64(var_1691442830355_530*var_1691442830355_530), 64)
        crccheck.updateBuffer(UInt64(var_1691442830355_777*var_1691442830355_777), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Int32 {
        var i = 0
        var res = ""
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
        if ( res == "05721127622311031503710614350074163701030172734364" ){
            return 0
        }
        return 1
    }
}
extend<T0, T1, T2> Class_1691442830355_168<T0, T1, T2> {

}
// ASSERT: scan-1 sema_varray_cjvm_in_ref_type

