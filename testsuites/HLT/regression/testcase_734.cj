/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args

@Deprecated
public const var_1736195588902_26: Float32 = -25.0
public var var_1736195588902_47: Struct_1736195588902_43 = Struct_1736195588902_43()
internal var var_1736195588902_71: VArray<Float64, $5> = [Float64(-81.0), Float64(-66.0), Float64(-94.0), Float64(67.0),
    Float64(-127.0)]
public const var_1736195588902_135: String = """
Kl\"-#
Ou@I}
"""
public var var_1736195588902_150: Bool = false
@Deprecated
public var var_1736195588902_159: UInt32 = UInt32(UInt32(136))
@Deprecated
public let var_1736195588902_172: Range<UInt32> = ((UInt32(UInt32(63)) & 127)..(UInt32(UInt32(171)) & 127) : (Int64(-88) |
    1))
@Deprecated
public let var_1736195588902_192: Rune = r'p'
public var var_1736195588902_209: Int16 = Int16(-83)
@Deprecated
public var var_1736195588902_213: Unit = ()
@Deprecated
internal let var_1736195588902_222: Bool = true
internal const var_1736195588902_260: UInt32 = 62
public const var_1736195588902_281: UInt8 = 52
public const var_1736195588902_284: UInt8 = 193
@Deprecated
public const var_1736195588902_314: Unit = ()
internal const var_1736195588902_327: Int8 = 98
const var_1736195588902_434: Rune = r'2'
@Deprecated
const var_1736195588902_437: UInt = 100
public const var_1736195588902_443: String = """
-7@gD
+|k?,
"""
internal const var_1736195588902_447: Unit = ()
public const var_1736195588902_451: Float64 = 37.0
@Deprecated
public const var_1736195588902_456: Bool = true
public const var_1736195588902_501: Int8 = 67
@Deprecated
public const var_1736195588902_552: Bool = true
@Deprecated
public const var_1736195588902_555: Int32 = -78
public let var_1736195588902_582: (UInt32, Range<UInt8>, Class_1736195588902_10, Bool, Bool, Int32) = (UInt32(89), ((UInt8(UInt8(54)) &
        127)..=(UInt8(UInt8(3)) & 127) : (Int64(-80) | 1)), Class_1736195588902_10(), false, false, Int32(Int32(44)))
public var var_1736195588902_701: Float32 = Float32(115.0)
@Deprecated
public let var_1736195588902_752: Int = Int64(UInt8(UInt8(0)))

@Deprecated
public open class Class_1736195588902_10 <: Resource {
    public init() { // block id: 12

    }

    public static var var_1736195588902_15: Unit
    public init(optionalParam_1736195588902_602!: () -> UInt32 = {=> UInt32(171)},
        optionalParam_1736195588902_608!: () -> Int8 = func_1736195588902_322,
        namedParam_1736195588902_611!: (Int32, UInt32, Int32, UInt64) -> Rune,
        optionalParam_1736195588902_617!: Range<Int64> = ((Int64(Int64(UInt32(223))) & 127)..=(Int64(Int64(-9)) & 127) : (Int64(-57) |
            1))) { // block id: 623
        const var_1736195588902_642: Int32 = 33;
        var loopTimeVar_1736195588902_669: Int64 = 0;
        do {
            loopTimeVar_1736195588902_669++;
            var var_1736195588902_652: (Array<UInt64>, VArray<Float64, $5>, Int8, Int16) = ([UInt64(238), UInt64(174),
                    UInt64(121), UInt64(251), UInt64(231), UInt64(49), UInt64(226), UInt64(121), UInt64(100), UInt64(0)],
                VArray<Float64, $5>(repeat: Float64(Float32(Float32(-5.0)))), Int8(8), Int16(11));
            var_1736195588902_652[0]
        } while ((match (if (false) { // block id: 628
            Int32(80)
        } else if (var_1736195588902_456) { // block id: 631
            Int32(108) % ((Int32(-119)) | 1)
        } else { // block id: 635
            if (var_1736195588902_456) {
                Struct_1736195588902_43()
            } else {
                var_1736195588902_47
            };
            Int64(-58);
            var_1736195588902_642
        }) {
            case _ => false
        }) && loopTimeVar_1736195588902_669 < 100)
    }

    static init() {
        var_1736195588902_15 = ()
    }
    public func isClosed(): Bool {
        return true
    }
    public func close(): Unit {}
}

@Frozen
func func_1736195588902_6(param_1736195588902_7: Rune): Rune { // block id: 8
    Class_1736195588902_10.var_1736195588902_15;
    const var_1736195588902_29: Int = 49;
    try { // block id: 18
        var loopTimeVar_1736195588902_23: Int64 = 0;
        while ((true) && loopTimeVar_1736195588902_23 < 100) {
            loopTimeVar_1736195588902_23++;
        };
        Float32(var_1736195588902_26);
        var_1736195588902_29
    } catch (e: Exception) { // block id: 31
        Int64(-38)
    };
    let var_1736195588902_34: Rune = r'r';
    var_1736195588902_34
}

public struct Struct_1736195588902_43 {
    @Frozen
    public init() { // block id: 45

    }

    @Frozen
    public prop var_1736195588902_50: UInt16 { // block id: 51
        get() { // block id: 53
            ();
            ();
            UInt16(195)
        }
    }
}

public enum Enum_1736195588902_79 {
    defaultValue
    | enumValue_1736195588902_82(String)
}

@Frozen
func func_1736195588902_37(param_1736195588902_38: (Rune) -> Rune): Rune { // block id: 41
    var_1736195588902_47.var_1736195588902_50;
    var var_1736195588902_85: String = """
3d.H}
4%kO~
""";
    if ((var_1736195588902_71[1] is Int8)) { // block id: 74
        const var_1736195588902_76: Unit = ();
        var_1736195588902_76;
        const var_1736195588902_92: Int = 60;
        var var_1736195588902_96: Unit = ();
        var var_1736195588902_108: Bool = true;
        var var_1736195588902_113: UInt16 = UInt16(132);
        match (Enum_1736195588902_79.enumValue_1736195588902_82(var_1736195588902_85)) {
            case _: String =>
                var_1736195588902_92 <= var_1736195588902_92;
                var_1736195588902_96;
                if (true) {
                    ###"QUvDT/q~x."###
                } else {
                    var_1736195588902_85
                }

            case enumValue_1736195588902_82(caseVar_1736195588902_104: Range<Int64>) =>
                var_1736195588902_108 ||= var_1736195588902_108
                var_1736195588902_113 ^ UInt16(129);
                "j$aEpNBB|5"

            case defaultValue =>
                if (var_1736195588902_108) {
                    "9mO/_2bpj*"
                } else {
                    ";r3><J#e>b"
                }

            case _ =>
                var var_1736195588902_129: Int8 = Int8(Int8(57));
                var_1736195588902_129 |= var_1736195588902_129
                var_1736195588902_96;
                var_1736195588902_135
        };
        var var_1736195588902_142: UInt32 = UInt32(63);
        try (resource = Class_1736195588902_10()) { // block id: 138
            [UInt64(233), UInt64(195), UInt64(113), UInt64(151), UInt64(114), UInt64(108), UInt64(200), UInt64(17),
                UInt64(86), UInt64(82)];
            var_1736195588902_142 >>= ((var_1736195588902_142) & 7)
        } finally { // block id: 145

        }
    };
    let var_1736195588902_154: UInt32 = UInt32(UInt16(UInt16(193)));
    var var_1736195588902_169: UInt16 = UInt16(109);
    var var_1736195588902_176: Int32 = Int32(Int8(18));
    if (((if (var_1736195588902_150) {
        ((UInt32(var_1736195588902_154) & 127)..=(UInt32(var_1736195588902_159) & 127) : (Int64(70) | 1))
    } else {
        ((UInt32(UInt32(237)) & 127)..=(UInt32(UInt32(46)) & 127) : (Int64(-115) | 1))
    }) is UInt16)) { // block id: 164
        if (var_1736195588902_150) { // block id: 167
            var_1736195588902_169;
            var_1736195588902_172;
            var_1736195588902_176 %= ((Int32(102)) | 1)
        };
        let var_1736195588902_182: Int16 = Int16(Int16(38));
        ((Int16(var_1736195588902_182) & 127)..(Int16(var_1736195588902_182) & 127) : (Int64(-84) | 1));
        [r'a', var_1736195588902_192, var_1736195588902_192, r'b', var_1736195588902_192, r'P', var_1736195588902_192,
            r'T', var_1736195588902_192, var_1736195588902_192][3]
    } else { // block id: 203
        ();
        try (resource = Class_1736195588902_10()) { // block id: 206
            var_1736195588902_209 %= ((Int16(97)) | 1)
            var_1736195588902_213
        } finally { // block id: 215
            var_1736195588902_150 &&= var_1736195588902_150
            var_1736195588902_150 ||= var_1736195588902_222
        };
        r'z'
    }
}

@Frozen
const func func_1736195588902_303(param_1736195588902_304: UInt64,
    optionalParam_1736195588902_305!: String = ###"}Vh?aTa{a{,-"###, optionalParam_1736195588902_307!: Unit = (),
    optionalParam_1736195588902_309!: Int16 = 23): Unit { // block id: 311
    var_1736195588902_135;
    var_1736195588902_314
}

@Frozen
public const func func_1736195588902_322(): Int8 { // block id: 323
    101 | var_1736195588902_327
}

@Frozen
public const func func_1736195588902_318(namedParam_1736195588902_319!: Unit): String { // block id: 320
    func_1736195588902_322();
    var_1736195588902_135
}

internal const func func_1736195588902_333(optionalParam_1736195588902_334!: Int8 = -77,
    namedParam_1736195588902_336!: UInt32, optionalParam_1736195588902_337!: UInt64 = 65,
    optionalParam_1736195588902_339!: Rune = r'H'): UInt32 { // block id: 341
    var_1736195588902_260
}

@Frozen
internal const func func_1736195588902_364(param_1736195588902_365: Float32, param_1736195588902_366: Float64,
    param_1736195588902_367: Float64): Unit { // block id: 368
    const func func_1736195588902_382(optionalParam_1736195588902_383!: String = """
ih&}M
m[jm(
""",
        optionalParam_1736195588902_385!: UInt16 = 101, optionalParam_1736195588902_387!: Bool = true): UInt32 { // block id: 389
        28
    };

    const var_1736195588902_393: UInt32 = 134;
    const var_1736195588902_400: UInt16 = 248;
    const var_1736195588902_418: Int16 = -90;
    const func func_1736195588902_415(): UInt64 { // block id: 416
        var_1736195588902_418;
        242
    };

    const var_1736195588902_423: Unit = ();
    const func func_1736195588902_370(namedParam_1736195588902_371!: Bool,
        optionalParam_1736195588902_372!: String = "#(/wm`)kCx", namedParam_1736195588902_374!: Int8,
        optionalParam_1736195588902_375!: Unit = ()): UInt64 { // block id: 377
        16 + (func_1736195588902_382(optionalParam_1736195588902_387: true) | var_1736195588902_393);
        const func func_1736195588902_412(): UInt64 { // block id: 413
            func_1736195588902_415()
        };

        const func func_1736195588902_404(param_1736195588902_405: Int32, namedParam_1736195588902_406!: UInt64,
            optionalParam_1736195588902_407!: Bool = true): Rune { // block id: 409
            func_1736195588902_412() - 246;
            var_1736195588902_423;
            const var_1736195588902_426: Rune = r'X';
            var_1736195588902_426
        };

        const var_1736195588902_429: Int32 = 32;
        if ((27 < (var_1736195588902_400 >> ((164) & 7)))) {
            func_1736195588902_404(var_1736195588902_429, namedParam_1736195588902_406: 102,
                optionalParam_1736195588902_407: true)
        } else {
            var_1736195588902_434
        };
        var_1736195588902_437
    };

    const var_1736195588902_440: Bool = false;
    func_1736195588902_370(namedParam_1736195588902_371: var_1736195588902_440,
        optionalParam_1736195588902_372: var_1736195588902_443, namedParam_1736195588902_374: 27);
    var_1736195588902_447
}

@Frozen
public const func func_1736195588902_355(namedParam_1736195588902_356!: Int32,
    optionalParam_1736195588902_357!: UInt32 = 125, namedParam_1736195588902_359!: Int32,
    optionalParam_1736195588902_360!: UInt64 = 88): Rune { // block id: 362
    func_1736195588902_364(-60.0, var_1736195588902_451, var_1736195588902_451);
    if (var_1736195588902_456) {
        (if ((-80 >= -84)) {
            (if (true) {
                var_1736195588902_434
            } else {
                var_1736195588902_434
            })
        } else {
            r'P'
        })
    } else {
        (if (var_1736195588902_456) {
            var_1736195588902_434
        } else {
            r's'
        })
    }
}

internal const func func_1736195588902_300(): UInt32 { // block id: 301
    func_1736195588902_303(186,
        optionalParam_1736195588902_305: func_1736195588902_318(namedParam_1736195588902_319: ()),
        optionalParam_1736195588902_309: 34);
    const func func_1736195588902_348(optionalParam_1736195588902_349!: Float64 = -121.0,
        namedParam_1736195588902_351!: Float32, namedParam_1736195588902_352!: Float64): Rune { // block id: 353
        const var_1736195588902_472: Int32 = -91;
        func_1736195588902_355(namedParam_1736195588902_356: var_1736195588902_472, namedParam_1736195588902_359: 19,
            optionalParam_1736195588902_360: 237)
    };

    func_1736195588902_333(optionalParam_1736195588902_334: -113,
        namedParam_1736195588902_336: func_1736195588902_333(optionalParam_1736195588902_334: func_1736195588902_322(),
            namedParam_1736195588902_336: var_1736195588902_260,
            optionalParam_1736195588902_339: func_1736195588902_348(optionalParam_1736195588902_349: -118.0,
                namedParam_1736195588902_351: 3.0, namedParam_1736195588902_352: var_1736195588902_451)))
}

internal const func func_1736195588902_272(param_1736195588902_273: String,
    optionalParam_1736195588902_274!: UInt64 = 11, namedParam_1736195588902_276!: Int32,
    namedParam_1736195588902_277!: Int8): Bool { // block id: 278
    var_1736195588902_281 | var_1736195588902_284;
    const func func_1736195588902_293(param_1736195588902_294: UInt32, param_1736195588902_295: Float32): UInt32 { // block id: 296
        ();
        func_1736195588902_300() / ((91) | 1);
        var_1736195588902_260 & 232
    };

    (206 + (var_1736195588902_260 ^ var_1736195588902_260)) == func_1736195588902_293(var_1736195588902_260, 84.0)
}

@Frozen
@Deprecated
public const func func_1736195588902_226(param_1736195588902_227: Float32): Rune { // block id: 228
    ();
    const var_1736195588902_237: Int64 = -2;
    const var_1736195588902_247: Unit = ();
    const func func_1736195588902_254(optionalParam_1736195588902_255!: Float32 = 21.0): UInt32 { // block id: 257
        var_1736195588902_260 * (73 << ((130) & 7))
    };

    const func func_1736195588902_241(optionalParam_1736195588902_242!: UInt8 = 250,
        namedParam_1736195588902_244!: Int32): Unit { // block id: 245
        var_1736195588902_247;
        var_1736195588902_247;
        const func func_1736195588902_251(): Unit { // block id: 252
            const func func_1736195588902_266(param_1736195588902_267: Bool, param_1736195588902_268: Float64): Float32 { // block id: 269
                -49.0
            };

            func_1736195588902_254(
                optionalParam_1736195588902_255: func_1736195588902_266(
                    func_1736195588902_272(var_1736195588902_135, namedParam_1736195588902_276: 13,
                        namedParam_1736195588902_277: 79), 60.0));
            21 | var_1736195588902_281;
            ()
        };

        func_1736195588902_251()
    };

    const func func_1736195588902_231(optionalParam_1736195588902_232!: UInt8 = 129,
        namedParam_1736195588902_234!: Float32): Unit { // block id: 235
        var_1736195588902_237;
        14;
        func_1736195588902_241(namedParam_1736195588902_244: -17)
    };

    func_1736195588902_231(namedParam_1736195588902_234: 21.0);
    if ((-34 < (102 >> ((var_1736195588902_501) & 7)))) {
        r'U'
    } else {
        r'L'
    }
}

@Frozen
public const func func_1736195588902_506(param_1736195588902_507: (Rune) -> Rune): Float32 { // block id: 510
    ();
    125.0
}

func func_1736195588902_516(param_1736195588902_7: Rune): Rune { // block id: 8
    Class_1736195588902_10.var_1736195588902_15;
    const var_1736195588902_29: Int = 49;
    try { // block id: 18
        var loopTimeVar_1736195588902_23: Int64 = 0;
        while ((true) && loopTimeVar_1736195588902_23 < 100) {
            loopTimeVar_1736195588902_23++;
        };
        Float32(var_1736195588902_26);
        var_1736195588902_29
    } catch (e: Exception) { // block id: 31
        Int64(-38)
    };
    let var_1736195588902_34: Rune = r'r';
    var_1736195588902_34
}

func func_1736195588902_518(param_1736195588902_519: Rune): (Rune) -> Rune { // block id: 520
    var var_1736195588902_522: (Rune) -> Rune = func_1736195588902_516;
    var_1736195588902_522
}

main(): Int64 {
    try {
        let var_1736195588902_514: ((Rune) -> Rune) -> Float32 = func_1736195588902_506;
        try { // block id: 526
            ();
            var_1736195588902_192
        } finally { // block id: 529
            ();
            r'J'
        } |> (func_1736195588902_518 ~> (var_1736195588902_514 ~> func_1736195588902_226));
        var var_1736195588902_538: Range<UInt8> = ((UInt8(UInt8(Int8(UInt8(UInt8(79))))) & 127)..(UInt8(UInt8(UInt8(UInt8(UInt8(209))))) &
            127) : (Int64(54) | 1));
        var var_1736195588902_564: UInt64 = UInt64(243);
        var var_1736195588902_672: (Int32, UInt32, Int32, UInt64) -> Rune = func_1736195588902_355;
        if ((var_1736195588902_159, var_1736195588902_538, Class_1736195588902_10(), false, var_1736195588902_552,
            var_1736195588902_555)[3]) { // block id: 558
            if (false) { // block id: 561
                var_1736195588902_564++;
                ()
            };
            var var_1736195588902_573: Option<Array<UInt64>> = Option<Array<UInt64>>.None;
            (var_1736195588902_573 ?? [UInt64(119), UInt64(108), UInt64(139), UInt64(6), UInt64(97), UInt64(106),
                UInt64(117), UInt64(26), UInt64(104), UInt64(83)])
        } else if (try { // block id: 578
            var_1736195588902_314;
            ();
            var_1736195588902_582
        } catch (_) { // block id: 591
            (var_1736195588902_159, ((UInt8(UInt8(23)) & 127)..=(UInt8(UInt8(110)) & 127) : (Int64(-114) | 1)),
                Class_1736195588902_10(), true, var_1736195588902_456, Int32(73))
        } finally { // block id: 599
            Class_1736195588902_10(optionalParam_1736195588902_608: func_1736195588902_322,
                namedParam_1736195588902_611: var_1736195588902_672);
            const var_1736195588902_676: UInt32 = 170;
            (var_1736195588902_676, ((UInt8(UInt8(124)) & 127)..=(UInt8(UInt8(129)) & 127) : (Int64(-19) | 1)),
                Class_1736195588902_10(), var_1736195588902_150, true, var_1736195588902_555)
        }[4]) { // block id: 684
            var loopTimeVar_1736195588902_688: Range<UInt64> = ((UInt64(UInt64(Int64(UInt16(Int8(50))))) & 127)..(UInt64(UInt64(85)) &
                127) : (Int64(-40) | 1));
            for (i in loopTimeVar_1736195588902_688 where var_1736195588902_456) {
            }
            var var_1736195588902_747: Array<UInt64> = [UInt64(130), UInt64(128), UInt64(151), UInt64(19), UInt64(40),
                UInt64(135), UInt64(100), UInt64(203), UInt64(80), UInt64(57)];
            if (var_1736195588902_552) { // block id: 698
                var_1736195588902_701 = var_1736195588902_26
                var_1736195588902_209 | var_1736195588902_209;
                [UInt64(215), var_1736195588902_564, var_1736195588902_564, var_1736195588902_564, UInt64(126),
                    var_1736195588902_564, UInt64(44), UInt64(222), UInt64(105), var_1736195588902_564]
            } else if (var_1736195588902_222) { // block id: 719
                Float64(-95.0);
                var var_1736195588902_722: Array<UInt64> = [UInt64(Int16(-19)), UInt64(UInt16(UInt16(36))),
                    UInt64(UInt8(Int8(87))), UInt64(16), UInt64(Int8(67)), UInt64(UInt16(172)), UInt64(179), UInt64(242),
                    UInt64(159), UInt64(UInt64(UInt32(37)))];
                var_1736195588902_722
            } else { // block id: 743
                ();
                var_1736195588902_314;
                var_1736195588902_747
            }
        } else { // block id: 749
            [UInt64(160), UInt64(173), UInt64(144), UInt64(64), UInt64(176), UInt64(1), UInt64(64), UInt64(20),
                UInt64(70), UInt64(250)]
        };
        var_1736195588902_752
        // CRC Check All Variables
        var crcCheck = CrcCheck(5000, 32)
        crcCheck.updateBuffer(UInt64(var_1736195588902_209 * var_1736195588902_209), 64)
        crcCheck.updateBuffer(UInt64(var_1736195588902_260 * var_1736195588902_260), 64)
        crcCheck.updateBuffer(UInt64(var_1736195588902_555 * var_1736195588902_555), 64)
        crcCheck.updateBuffer(UInt64(var_1736195588902_564 * var_1736195588902_564), 64)
        crcCheck.crcCheck()
        crcCheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) {
        println("Exception: NoneValueException")
    }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        buffer = Array<Int64>(buffer_n, {i => 0})
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, {i => 0})
        var byte_c = 1
        var byte_index = 0
        while (value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[(i + buffer_index) % buffer.size] = byteArray[i + byte_index]
            i++
        }
        buffer_index = (buffer_index + i) % buffer.size
    }

    func updateBuffer(input: Bool, byte_n: Int64): Unit {
        if (input == true) {
            updateBuffer(1, byte_n)
        } else {
            updateBuffer(0, byte_n)
        }
    }

    func updateBuffer(input: Rune, byte_n: Int64): Unit {
        updateBuffer(UInt64(UInt32(input)), byte_n)
    }

    func updateBuffer(input: String, byte_n: Int64): Unit {
        for (c in input) {
            updateBuffer(c, byte_n)
        }
    }

    func updateBuffer(input: Unit, byte_n: Int64): Unit {
        updateBuffer(input.toString(), byte_n)
    }

    func updateBuffer(input: Any, byte_n: Int64): Unit {
        if (input is Hashable) {
            match (input as Hashable) {
                case Some(v) => updateBuffer(UInt64(v.hashCode()), byte_n)
                case _ => updateBuffer(1, byte_n)
            }
        } else if (input is ToString) {
            match (input as ToString) {
                case Some(v) => updateBuffer(v.toString(), byte_n)
                case _ => updateBuffer(1, byte_n)
            }
        } else {
            updateBuffer(1, byte_n)
        }
    }
    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, {i => 0})
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2 ** 2 * crc_output[i] + 2 ** 1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}

extend Struct_1736195588902_43 {}

extend Enum_1736195588902_79 {}
