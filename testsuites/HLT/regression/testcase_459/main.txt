type A<T> = interfaceA<T>

interface interfaceA<T>{
  func a (a:T){a}
}

class B<T>{}

interface I<T>{
  operator func +(a:A<T>){0}
}

extend B<T> <: A<T>{
  public func a (a:T){a}
}

extend B<T> <: I<T>{
  public operator func +(a:A<T>){0}
}

main(): Int64  {
  if(B<Float64>().a(1.005) == 1.005 &&S B<Float64>()+B<Float64>() == 0){
    return 0
  }else{
    return 1
  }
}


