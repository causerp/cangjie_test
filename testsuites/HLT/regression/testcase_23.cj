/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC-1: %compiler %cmp_opt %f -o %output

public let var22 : Int8 = Int8(Int8(8))
public var var247 : Int64 = Int64(UInt16(99))
public var var252 : Unit = ()
public let var255 : Array<Option<Int64>> = [((UInt32(47)&127..UInt32(125)&127:(-100)|1) as Int64), (() as Int64), (UInt16(UInt16(Int16(-24))) as Int64), (98.0 as Int64), Option<Int64>.None, Option<Int64>.None, (")<Il\\AD +W" as Int64), (Class58() as Int64), Option<Int64>.None, Option<Int64>.None]
public let var283 : Range<Int32> = (Int32(-48)&127..Int32(65)&127:50|1)
public var var306 : UInt64 = UInt64(Int8(Int8(UInt8(110))))
public let var330 : Int64 = Int64(UInt32(159))
public let var342 : Range<Int8> = (Int8(-26)&127..Int8(72)&127:(-43)|1)
public var var346 : String = ###"/8a{$\"k/,GD"###
public var var366 : ?Interface61 = Option<Interface61>.None
public var var372 : (Unit, Range<Int64>, Range<UInt64>, Interface61, Float32, (Range<UInt32>, UInt16, String, Range<Int8>, Int64, String, Range<UInt16>), UInt64) = ((), (114&127..8&127:(-5)|1), (UInt64(43)&127..=UInt64(67)&127:70|1), Class58(), Float32(Float32(87.0)), ((UInt32(UInt8(5))&127..=UInt32(187)&127:(55|1)), UInt16(UInt16(UInt8(25))), ###"p@|]3${var346}2p ${var346}a{r"###, (Int8(UInt8(5))&127..Int8(Int8(-77))&127:(Int64(UInt16(164))|1)), (-118), "dv;'${var346}=P_Rc+", (UInt16(206)&127..=UInt16(246)&127:(-99)|1)), UInt64(Int16(-60)))
public var var410 : UInt16 = UInt16(Int16(UInt16(UInt8(UInt8(35)))))
public var var425 : Int32 = Int32(-1)
public var var429 : UInt8 = UInt8(UInt8(2))
public let var434 : (Int32, Range<UInt32>, Int8, Range<Int16>, Bool, Range<UInt8>, (Range<Int32>, UInt16, Bool, Array<Array<Unit>>, Array<Unit>), Int8, Bool) = (Int32(55), (UInt32(60)&127..=UInt32(UInt8(93))&127:(4|1)), Int8(Int8(63)), (Int16(-95)&127..Int16(44)&127:(-107)|1), false, (UInt8(80)&127..=UInt8(63)&127:(-6)|1), ((Int32(-92)&127..Int32(-99)&127:(-11)|1), UInt16(Int16(76)), true, [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], [(), (), (), (), (), (), (), (), (), ()]), Int8(Int8(-2)), true)
public var var653 : Float64 = Float64(Float64(54.0))
public let var727 : ?Int64 = (Class58() as Int64)
public let var746 : ?Unit = (Class58() as Unit)
public let var801 : (Range<Int8>, UInt8, (Range<Int32>, UInt16, Bool, Array<Array<Unit>>, Array<Unit>), Option<Range<UInt8>>) = ((Int8(44)&127..Int8(UInt8(Int8(73)))&127:(68|1)), UInt8(173), ((Int32(UInt16(10))&127..Int32(UInt8(149))&127:(Int64((-18))|1)), UInt16(111), (Class58() is Range<UInt16>), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], [(), (), (), (), (), (), (), (), (), ()]), Option<Range<UInt8>>.None)
public var var927 : (Range<Int64>, Unit) = ((Int64(Int8(-4))&127..Int64(UInt16(Int8(-33)))&127:(Int64(Int8(UInt8(169)))|1)), ())
public let var951 : Bool = true
public var var958 : Interface66 = Class58()
public let var1090 : Interface62 = Class58()
public var var1106 : ??Int64 = Option<Option<Int64>>.None
public var var1132 : ?Bool = Option<Bool>.None
public let var1135 : ?Array<Option<Int64>> = ((UInt8(166)&127..=UInt8(UInt8(Int8(-128)))&127:(83|1)) as Array<Option<Int64>>)
public var var1219 : (UInt8, UInt64, UInt64, Bool, Array<Option<Int64>>, Range<UInt16>) = (UInt8(UInt8(UInt8(UInt8(167)))), UInt64((-82)), UInt64(UInt8(223)), ((Class58() as Range<UInt8>) is Array<Option<Int64>>), [Option<Int64>.None, (Int16(UInt8(182)) as Int64), (UInt32(60) as Int64), ((-72) as Int64), Option<Int64>.None, ((Int32(31), (UInt32(214)&127..=UInt32(173)&127:((-62)|1)), Int8(14), (Int16(-82)&127..Int16(-76)&127:(-110)|1), false, (UInt8(150)&127..UInt8(203)&127:((-122)|1)), ((Int32(124)&127..Int32(-74)&127:(-38)|1), UInt16(216), true, [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], [(), (), (), (), (), (), (), (), (), ()]), Int8(119), true) as Int64), Option<Int64>.None, (UInt8(21) as Int64), (((Int8(89)&127..Int8(110)&127:(64|1)), UInt8(104), ((Int32(-37)&127..Int32(-115)&127:(-60)|1), UInt16(228), true, [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], [(), (), (), (), (), (), (), (), (), ()]), Option<Range<UInt8>>.None) as Int64), Option<Int64>.None], (UInt16(235)&127..=UInt16(8)&127:(32|1)))
public var var1424 : UInt32 = UInt32(31)
public let var1444 : Int32 = Int32(UInt32(UInt8(Int8(UInt8(157)))))
public var var1454 : (Unit, Unit, (Int32, Range<UInt32>, Int8, Range<Int16>, Bool, Range<UInt8>, (Range<Int32>, UInt16, Bool, Array<Array<Unit>>, Array<Unit>), Int8, Bool), Unit, Range<UInt8>, Range<Int64>, (Range<UInt32>, UInt16, String, Range<Int8>, Int64, String, Range<UInt16>)) = ((), (), (Int32(UInt16(103)), (UInt32(126)&127..UInt32(130)&127:(Int64(UInt16(49))|1)), Int8(-85), (Int16(-15)&127..=Int16(Int16(113))&127:((-126)|1)), ((((), (), (Int32(-42), (UInt32(136)&127..UInt32(52)&127:((-122)|1)), Int8(126), (Int16(-5)&127..=Int16(84)&127:((-106)|1)), false, (UInt8(188)&127..UInt8(223)&127:77|1), ((Int32(13)&127..=Int32(-94)&127:((-11)|1)), UInt16(195), true, [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], [(), (), (), (), (), (), (), (), (), ()]), Int8(122), true), (), (UInt8(76)&127..=UInt8(84)&127:((-46)|1)), ((-99)&127..29&127:(5|1)), ((UInt32(78)&127..UInt32(156)&127:(13|1)), UInt16(86), ###"H${var346}y44${var346}'uZUDm${var346}"###, (Int8(-117)&127..=Int8(-14)&127:103|1), (-91), "Y!KtN${var346}W4${var346}BzZ${var346}", (UInt16(248)&127..=UInt16(224)&127:89|1))) as Range<UInt8>) is Range<Int32>), (UInt8(166)&127..UInt8(234)&127:79|1), ((Int32(-36)&127..=Int32(32)&127:(-108)|1), UInt16(213), true, [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], [(), (), (), (), (), (), (), (), (), ()]), Int8(UInt8(225)), true), (), (UInt8(UInt8(UInt8(164)))&127..=UInt8(189)&127:((-76)|1)), (45&127..=Int64(UInt16(Int16(100)))&127:((-1)|1)), ((UInt32(92)&127..UInt32(UInt32(30))&127:(126|1)), UInt16(102), ###"kNZ${var346}G_eA(Ug"###, (Int8(123)&127..=Int8(-29)&127:25|1), Int64((-79)), ###"@WM${var346} a${var346}]6qW("###, (UInt16(146)&127..UInt16(70)&127:(-103)|1)))
public let var1745 : Int64 = Int64(UInt8(43))
public let var1776 : Unit = ()
public let var1819 : Unit = ()
public var var1827 : Int16 = Int16(64)
public var var1894 : Int32 = Int32(-100)
public let var1902 : Interface63 = Class58()
public var var1906 : Array<Range<Int32>> = [(Int32(109)&127..Int32(-86)&127:11|1), (Int32(-89)&127..Int32(-67)&127:(-54)|1), (Int32(65)&127..Int32(-98)&127:(-25)|1), (Int32(UInt8(132))&127..=Int32(Int32(-101))&127:((-61)|1)), (Int32(-8)&127..=Int32(-43)&127:126|1), (Int32(90)&127..=Int32(-110)&127:((-37)|1)), (Int32(-120)&127..Int32(89)&127:(-77)|1), (Int32(20)&127..Int32(30)&127:84|1), (Int32(Int32(81))&127..Int32(Int32(Int16(112)))&127:(Int64(UInt8(Int8(-84)))|1)), (Int32(25)&127..=Int32(60)&127:((-43)|1))]
public let var2317 : Range<Int64> = (38&127..(-49)&127:35|1)
var var2736 : Float32 = Float32(Float32(Float32(1.0)))
public var var2751 : Range<UInt16> = (UInt16(94)&127..UInt16(153)&127:(Int64(Int32(UInt16(24)))|1))
public var var2760 : ?Interface61 = (Class58() as Interface61)
public var var2769 : Array<Option<Int64>> = [(((Option<Interface61>.None as Range<UInt32>) as Bool) as Int64), ((Int32(Int8(126))&127..Int32(Int32(88))&127:(Int64(UInt32(173))|1)) as Int64), ((UInt8(61), UInt64(228), UInt64(97), false, [Option<Int64>.None, Option<Int64>.None, Option<Int64>.None, Option<Int64>.None, Option<Int64>.None, Option<Int64>.None, Option<Int64>.None, Option<Int64>.None, Option<Int64>.None, Option<Int64>.None], (UInt16(142)&127..=UInt16(72)&127:((-69)|1))) as Int64), ([(Int32(62)&127..Int32(-47)&127:((-79)|1)), (Int32(3)&127..Int32(-24)&127:11|1), (Int32(-97)&127..Int32(61)&127:((-118)|1)), (Int32(78)&127..Int32(92)&127:(-58)|1), (Int32(35)&127..Int32(110)&127:((-94)|1)), (Int32(-15)&127..=Int32(-57)&127:((-113)|1)), (Int32(59)&127..Int32(75)&127:(72|1)), (Int32(-71)&127..=Int32(106)&127:(-94)|1), (Int32(-9)&127..=Int32(96)&127:27|1), (Int32(117)&127..=Int32(-68)&127:((-8)|1))] as Int64), Option<Int64>.None, (([(Int32(-9)&127..=Int32(12)&127:126|1), (Int32(-50)&127..=Int32(-10)&127:24|1), (Int32(17)&127..=Int32(123)&127:67|1), (Int32(86)&127..Int32(-102)&127:(-93)|1), (Int32(-114)&127..=Int32(-1)&127:113|1), (Int32(97)&127..=Int32(-88)&127:86|1), (Int32(122)&127..Int32(-30)&127:(-41)|1), (Int32(113)&127..Int32(-128)&127:85|1), (Int32(-79)&127..=Int32(-6)&127:(-82)|1), (Int32(-77)&127..Int32(119)&127:114|1)] as Option<Option<Unit>>) as Int64), (((UInt32(93)&127..=UInt32(178)&127:(-47)|1), UInt16(UInt8(60)), "F5mw j.+}e", (Int8(-58)&127..Int8(14)&127:(65|1)), Int64(Int16(40)), ###"\"9OD%!)07M"###, (UInt16(180)&127..=UInt16(203)&127:(-126)|1)) as Int64), ((UInt32(Int8(85))&127..=UInt32(121)&127:((-25)|1)) as Int64), ([Int16(18), Int16(Int8(106)), Int16(-58), Int16(Int16(14)), Int16(-40), Int16(UInt8(15)), Int16(8), Int16(Int8(69)), Int16(-96), Int16(92)] as Int64), (([true, true, false, true, true, true, true, true, false, true] as Interface61) as Int64)]
public var var2896 : (Range<UInt32>, UInt16, String, Range<Int8>, Int64, String, Range<UInt16>) = ((UInt32(145)&127..UInt32(Int32(UInt32(115)))&127:(Int64(UInt16(UInt8(206)))|1)), UInt16(198), """
xJs\\y
LA(*f
""", (Int8(UInt8(UInt8(4)))&127..=Int8(28)&127:(Int64(Int16(13))|1)), (-14), ";[}$ \"laa?", (UInt16(UInt8(UInt8(144)))&127..=UInt16(UInt16(193))&127:(Int64(UInt32(Int32(88)))|1)))
let var3072 : ?UInt16 = ((Int32(-49)&127..=Int32(-5)&127:(-4)|1) as UInt16)
public let var3099 : ??Range<UInt8> = Option<Option<Range<UInt8>>>.None
public var var3104 : (String, Range<Int32>, Rune, Option<Float64>) = ("R@0\"Sa&d&a{", (Int32(81)&127..=Int32(UInt16(126))&127:(91|1)), 'n', ((Option<Interface61>.None as Float64) as Float64))
public var var3147 : Float64 = Float64(Float32(Float32(39.0)))
public var var3172 : Int8 = Int8(UInt8(66))
public let var3201 : Array<Option<Unit>> = [((Int32(16), (UInt32(193)&127..=UInt32(191)&127:((-126)|1)), Int8(Int8(92)), (Int16(10)&127..Int16(5)&127:(56|1)), ((UInt16(106)&127..=UInt16(59)&127:((-25)|1)) is Option<Bool>), (UInt8(77)&127..=UInt8(239)&127:((-57)|1)), ((Int32(-76)&127..=Int32(-20)&127:116|1), UInt16(222), false, [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], [(), (), (), (), (), (), (), (), (), ()]), Int8(98), true) as Unit), (((Int8(-7)&127..Int8(-13)&127:73|1), UInt8(Int8(-82)), ((Int32(-87)&127..=Int32(46)&127:((-96)|1)), UInt16(78), false, [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], [(), (), (), (), (), (), (), (), (), ()]), Option<Range<UInt8>>.None) as Unit), ((((), (26&127..76&127:((-20)|1)), (UInt64(248)&127..=UInt64(54)&127:(-71)|1), Class58(), Float32(100.0), ((UInt32(15)&127..=UInt32(238)&127:13|1), UInt16(162), "a{+R@\"Ow#Lv", (Int8(72)&127..=Int8(5)&127:(-47)|1), (-5), "Rd*x#G[Fn;", (UInt16(102)&127..UInt16(81)&127:((-80)|1))), UInt64(131)) as Option<Range<UInt8>>) as Unit), Option<Unit>.None, ((-119) as Unit), Option<Unit>.None, ([Option<Int64>.None, Option<Int64>.None, (Option<Array<Option<Int64>>>.None as Int64), Option<Int64>.None, Option<Int64>.None, Option<Int64>.None, (((), (), (Int32(-12), (UInt32(176)&127..UInt32(213)&127:((-63)|1)), Int8(-20), (Int16(62)&127..Int16(22)&127:73|1), false, (UInt8(243)&127..UInt8(65)&127:(101|1)), ((Int32(25)&127..=Int32(8)&127:(-22)|1), UInt16(16), false, [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], [(), (), (), (), (), (), (), (), (), ()]), Int8(-112), false), (), (UInt8(249)&127..=UInt8(45)&127:((-18)|1)), ((-30)&127..(-112)&127:(-7)|1), ((UInt32(125)&127..UInt32(4)&127:(88|1)), UInt16(176), "_\"h`ZsxSF ", (Int8(-44)&127..Int8(7)&127:(53|1)), 74, "os TtR9=W)", (UInt16(224)&127..=UInt16(151)&127:((-6)|1)))) as Int64), (Class58() as Int64), Option<Int64>.None, (Class58() as Int64)] as Unit), Option<Unit>.None, Option<Unit>.None, Option<Unit>.None]
public let var3542 : (Interface63, Float64, Array<Range<Int32>>) = (Class58(), 47.0, [(Int32(80)&127..Int32(95)&127:56|1), (Int32(UInt32(175))&127..=Int32(61)&127:(62|1)), (Int32(-100)&127..=Int32(55)&127:((-86)|1)), (Int32(7)&127..=Int32(4)&127:64|1), (Int32(-98)&127..=Int32(-38)&127:(Int64(UInt64(50))|1)), (Int32(56)&127..=Int32(33)&127:(Int64(UInt8(190))|1)), (Int32(Int8(97))&127..Int32(30)&127:((-104)|1)), (Int32(UInt8(39))&127..Int32(UInt8(253))&127:((-73)|1)), (Int32(-53)&127..Int32(-77)&127:(Int64(Int8(87))|1)), (Int32(45)&127..Int32(-7)&127:52|1)])
public let var3619 : Option<Option<Unit>> = Option<Option<Unit>>.None
public var var3649 : Bool = false
var var3663 : (Range<Int64>, Unit) = (((-1)&127..Int64(Int32(Int16(30)))&127:(Int64(UInt32(UInt32(104)))|1)), ())
public let var3805 : ?(Range<Int32>, UInt16, Bool, Array<Array<Unit>>, Array<Unit>) = Option<(Range<Int32>, UInt16, Bool, Array<Array<Unit>>, Array<Unit>)>.None
public let var3898 : Bool = (Int16(UInt8(UInt8(169))) is UInt16)
public let var3907 : Interface61 = Class58()
public let var4082 : ?Float64 = Option<Float64>.None
public let var4095 : Option<Range<UInt64>> = ([(), (), (), (), (), (), (), (), (), ()] as Range<UInt64>)
public var var4109 : Range<UInt64> = (UInt64(UInt16(UInt8(Int8(119))))&127..=UInt64(174)&127:(101|1))
public var var4134 : ?Bool = (Option<Int32>.None as Bool)
public let var4149 : ?Bool = Option<Bool>.None
public var var4211 : Int8 = Int8(38)
public let var4242 : Array<Option<Int64>> = Array<Option<Int64>>(10){ i => ((Int32(Int32(-68)), false, Int8(-7), Float32(92.0)) as Int64) }
public var var4375 : Unit = ()
public let var4395 : Range<UInt8> = (UInt8(162)&127..UInt8(75)&127:67|1)
public let var4454 : Range<UInt8> = (UInt8(74)&127..UInt8(4)&127:34|1)
public let var4465 : Bool = ((Int16(Int8(UInt8(227)))&127..=Int16(-41)&127:((-16)|1)) is (Interface62, Array<Array<Unit>>) -> Unit)
public let var4548 : (String, Range<Int32>, Rune, Option<Float64>) = (###"F_b${var346}U${var346}^${var346}tH${var346}X=P"###, (Int32(32)&127..Int32(120)&127:((-5)|1)), 'l', ((UInt8(110), UInt64(UInt16(72)), UInt64(236), true, [Option<Int64>.None, Option<Int64>.None, Option<Int64>.None, Option<Int64>.None, Option<Int64>.None, Option<Int64>.None, Option<Int64>.None, Option<Int64>.None, Option<Int64>.None, Option<Int64>.None], (UInt16(76)&127..UInt16(132)&127:(99|1))) as Float64))
public let var4585 : Rune = 'M'
public var var4602 : ?Interface61 = Option<Interface61>.None
public let var4611 : Option<(String, Range<Int32>, Rune, Option<Float64>)> = ((Class58() as Unit) as (String, Range<Int32>, Rune, Option<Float64>))
public var var4645 : Bool = false
public let var4648 : Bool = true
public var var4663 : Unit = ()
public var var4677 : ??Bool = Option<Option<Bool>>.None
public let var4691 : Rune = '9'
public var var4700 : Interface65 = Class58()
public var var4797 : (Range<Int32>, UInt16, Bool, Array<Array<Unit>>, Array<Unit>) = ((Int32(104)&127..Int32(9)&127:((-9)|1)), UInt16(131), false, [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], [(), (), (), (), (), (), (), (), (), ()])
public let var4895 : ?Option<Option<Unit>> = Option<Option<Option<Unit>>>.None
public let var4911 : Int64 = Int64(Int64(UInt64((-43))))
public var var4927 : UInt64 = UInt64(111)
public let var5080 : Int32 = Int32(Int8(Int8(27)))
public let var5155 : ?Range<UInt32> = Option<Range<UInt32>>.None
public var var5166 : Array<Range<Int32>> = Array<Range<Int32>>(10){ i => (Int32(-34)&127..=Int32(Int8(-115))&127:(32|1)) }
public let var5292 : ?Unit = (((UInt8(204), UInt64(UInt16(103)), UInt64(124), true, [Option<Int64>.None, Option<Int64>.None, Option<Int64>.None, Option<Int64>.None, Option<Int64>.None, Option<Int64>.None, Option<Int64>.None, Option<Int64>.None, Option<Int64>.None, Option<Int64>.None], (UInt16(31)&127..=UInt16(202)&127:(-60)|1)) as Option<Range<UInt8>>) as Unit)
public var var5320 : Range<UInt32> = (UInt32(UInt16(73))&127..=UInt32(87)&127:((-123)|1))
public var var5340 : (Range<UInt32>, UInt16, String, Range<Int8>, Int64, String, Range<UInt16>) = ((UInt32(40)&127..=UInt32(0)&127:23|1), UInt16(124), ###"v#gh${var346}3crqH${var346}<${var346}"###, (Int8(43)&127..=Int8(-8)&127:117|1), (-70), ".vJ25${var346}R$8pf", (UInt16(138)&127..=UInt16(56)&127:50|1))
public var var5353 : Class58 = Class58()
public var var5375 : ?Range<UInt8> = Option<Range<UInt8>>.None
public var var5443 : String = ###"phUWR_ve/a"###
public let var5534 : ??Int64 = Option<Option<Int64>>.None
public var var5562 : Interface63 = Class58()
public let var5581 : Int8 = Int8(Int8(54))
public let var5586 : Bool = ((Option<Option<Unit>>.None as (Range<Int32>, UInt16, Bool, Array<Array<Unit>>, Array<Unit>)) is (Int64) -> Interface61)
public let var5610 : Range<UInt32> = (UInt32(166)&127..UInt32(2)&127:70|1)
public var var5628 : (Int32, Range<UInt32>, Int8, Range<Int16>, Bool, Range<UInt8>, (Range<Int32>, UInt16, Bool, Array<Array<Unit>>, Array<Unit>), Int8, Bool) = (Int32(Int8(UInt8(Int8(52)))), (UInt32(UInt32(33))&127..UInt32(Int8(UInt8(2)))&127:(Int64(UInt64(53))|1)), Int8(-74), (Int16(-41)&127..Int16(-124)&127:(-57)|1), true, (UInt8(236)&127..=UInt8(UInt8(UInt8(138)))&127:(Int64(Int8(UInt8(221)))|1)), ((Int32(Int32(118))&127..=Int32(-10)&127:(Int64(UInt32(139))|1)), UInt16(Int8(Int8(76))), false, [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], [(), (), (), (), (), (), (), (), (), ()]), Int8(-114), false)
let var5677 : ?Interface66 = (Option<String>.None as Interface66)
public let var5708 : Bool = true
public var var5798 : Unit = ()
let var5869 : Range<Int16> = (Int16(-119)&127..=Int16(-84)&127:(-125)|1)
public var var5956 : Unit = ()
public var var5990 : Unit = ()
public var var5996 : Unit = ()
let var6007 : Array<Unit> = Array<Unit>(10){ i => () }
public var var6103 : Unit = ()
public var var6154 : Int64 = (-84)
public let var6165 : Int64 = Int64(UInt8(Int8(77)))
let var6244 : Bool = false
var var6258 : Int8 = Int8(Int8(121))
public var var6328 : ?Bool = (true as Bool)
public var var6427 : UInt16 = UInt16(Int16(Int16(71)))
var var6468 : Bool = (Class58() is (Option<Range<UInt8>>) -> Interface61)
let var6474 : ?Int64 = (([(((), (), (Int32(109), (UInt32(169)&127..UInt32(28)&127:(-98)|1), Int8(43), (Int16(121)&127..=Int16(112)&127:(-111)|1), true, (UInt8(160)&127..UInt8(216)&127:(88|1)), ((Int32(19)&127..Int32(103)&127:(-30)|1), UInt16(105), true, [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], [(), (), (), (), (), (), (), (), (), ()]), Int8(-44), false), (), (UInt8(131)&127..UInt8(93)&127:(-20)|1), ((-81)&127..(-96)&127:(84|1)), ((UInt32(53)&127..=UInt32(232)&127:95|1), UInt16(201), "F${var346}Z${var346}/:-s${var346}0#Uc", (Int8(105)&127..Int8(-37)&127:(47|1)), 92, """
i]gRP
)${var346}?AWa
""", (UInt16(233)&127..=UInt16(122)&127:((-49)|1)))) is Range<Int8>), ((UInt16(106)&127..UInt16(244)&127:(-59)|1) is Option<Option<(Range<Int32>, UInt16, Bool, Array<Array<Unit>>, Array<Unit>)>>), false, false, true, (Int16(114) is (Range<Int64>, Unit)), (Class58() is () -> Option<Bool>), (UInt64(21) is Array<Bool>), ((UInt8(171)&127..UInt8(151)&127:93|1) is (UInt8, UInt64, UInt64, Bool, Array<Option<Int64>>, Range<UInt16>)), (Option<Option<Unit>>.None is Option<Interface61>)] as Bool) as Int64)


public interface Interface62 {

}

public interface Interface64<T0, T1> <: Interface62 where T0 <: Int32, T1 <: Option<Range<UInt64>> {

}

public interface Interface63 <: Interface62 & Interface64<Int32, Option<Range<UInt64>>> {

}

public interface Interface61 <: Interface62 & Interface63 {

}

public interface Interface66 <: Interface64<Int32, Option<Range<UInt64>>> & Interface62 {

}

public interface Interface65 <: Interface66 {

}

public open class Class58 <: Interface61 & Interface65 & Resource {
    public init() { // block id: 60

    }
;
    public static let var69 : Int16 = Int16(-69);
    static var var3703 : Int64 = (-56);
    public init(optionalParam3678 ! : Unit = (), namedParam3680 ! : String) { // block id: 3681
        var252;
        try (resource = Class58()) { // block id: 3684
            try (resource = Class58()) { // block id: 3686
                ()
            } finally { // block id: 3688
                [var746, var746, var746, var746, var746, Option<Unit>.None, Option<Unit>.Some(var252), Option<Unit>.None, var746, Option<Unit>.None];
                var3703 /= ((17) | 1)
            }
        } finally { // block id: 3706
            try (resource = Class58()) { // block id: 3708
                ()
            } finally { // block id: 3710

            };
            (Option<Unit>.None ?? ())
        }
    }
;
    static var var4681 : Bool = true;
    public static var var4696 : UInt32 = UInt32(228);
    public init(param4660 : (Int32, Range<UInt32>, Int8, Range<Int16>, Bool, Range<UInt8>, (Range<Int32>, UInt16, Bool, Array<Array<Unit>>, Array<Unit>), Int8, Bool)) { // block id: 4661
        var4663;
        var loopTimeVar4704 : Int64 = 0;
        while ((if (true) { // block id: 4668
            var4645
        } else { // block id: 4670
            var4465
        }) && loopTimeVar4704 < 100 ) {
            loopTimeVar4704++;
            try { // block id: 4674
                Option<String>.None;
                var4677;
                if (var4681) { Class58(namedParam3680 : ###"sbrl4; b=E"###) } else { Class58() } 
            } finally { // block id: 4686
                ("3zQRV6|%fS", (Int32(-108)&127..Int32(-72)&127:(-99)|1), var4691, Option<Float64>.None);
                var4696 <<= ((var1424) & 7);
                var4700
            };
            var1902
        }
    }
;
    public init(param132 : Option<Int64>) { // block id: 133
        ();
        match (match (func138((UInt64(226)&127..UInt64(254)&127:(9|1)))) {
                case caseVar5436 => 
                    if (true) { Class58() } else { Class58(namedParam3680 : var5443) } ;
                    var4375;
                    if (true) { Option<Int64>.None } else { Option<Int64>.Some(var4911) } 
                
                case _ : Array<Bool> => 
                    if (false) { Option<Int64>.None } else { Option<Int64>.Some(var330) } 
                
                case _ => 
                    var727
                
            }) {
            case _ => 
                ()
            
        };
        if ((UInt16(151) < var410) || var3898) { // block id: 5471
            var366;
            var loopTimeVar5480 : Range<UInt64> = (UInt64(Int8(-123))&127..UInt64(UInt8(UInt8(52)))&127:((-30)|1));
            for (i in loopTimeVar5480 where true) {
                var var5477 : Array<Int16> = [Int16(-93), Int16(-89), Int16(-127), Int16(-22), Int16(103), Int16(83), Int16(83), Int16(-58), Int16(49), Int16(-120)];
                var5477;
                var4548
            };
            var4211 -= Int8(-10)
        }
    }

    public func isClosed(): Bool { return false }
    public func close(): Unit {}
}

func func94(param95 : Option<Int64>, optionalParam96 ! : Interface61 = Class58(), optionalParam98 ! : Class58 = Class58(), optionalParam100 ! : Bool = false) : Unit { // block id: 102

}

public func func158(param159 : Int64) : Option<Int64> { // block id: 160
    var var165 : (Range<Int32>, UInt16, Bool, Array<Array<Unit>>, Array<Unit>) = ((Int32(Int8(44))&127..=Int32(UInt16(229))&127:(105|1)), UInt16(Int16(94)), ([[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]] is Array<Range<Int32>>), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], [(), (), (), (), (), (), (), (), (), ()]);
    var165[4][8];
    var var278 : Bool = ((Int16(-121)&127..Int16(65)&127:64|1) is Interface65);
    var var288 : ?Int64 = (Int16(16) as Int64);
    var var314 : Int8 = Int8(-44);
    try { // block id: 244
        var247 |= param159;
        var252;
        var255
    } catch (e: Exception) { // block id: 275
        if (var278) { (Int32(5)&127..=Int32(-25)&127:94|1) } else { var283 } ;
        [Option<Int64>.None, var288, Option<Int64>.Some(var247), Option<Int64>.Some((-67)), Option<Int64>.None, Option<Int64>.Some(var247), var288, var288, var288, Option<Int64>.Some((-73))]
    } finally { // block id: 303
        var306 = UInt64(88);
        var314--;
        [Option<Int64>.Some(var247), Option<Int64>.None, var288, var288, var288, Option<Int64>.None, var288, var288, Option<Int64>.Some(param159), Option<Int64>.Some(var330)]
    }[3]
}






public func func152(param153 : Interface62, param154 : Array<Array<Unit>>) : Unit { // block id: 155
    let var350 : UInt16 = UInt16(UInt8(196));
    let var363 : Bool = false;
    var var544 : Range<UInt32> = (UInt32(UInt8(Int8(UInt8(235))))&127..=UInt32(109)&127:(Int64(UInt64(214))|1));
    func94((((UInt32(69)&127..=UInt32(2)&127:(-118)|1), UInt16(231), "X?ga`xwx'i", var342, (-102), var346, (var350&127..var350&127:(var247|1)))[4]|>func158), optionalParam96 : (if (var363) { var366 } else { Option<Interface61>.None }  ?? var372[3]), optionalParam98 : match ((Int16(-88)&127..=Int16(-99)&127:97|1)) {
        case _ => 
            var252;
            var410 -= UInt16(17);
            var var418 : Class58 = Class58();
            var418
        
    }, optionalParam100 : try { // block id: 423
        var425;
        var429 *= UInt8(88);
        var434
    } catch (_) { // block id: 537
        let var558 : (Range<Int32>, UInt16, Bool, Array<Array<Unit>>, Array<Unit>) = ((Int32(89)&127..Int32(-89)&127:0|1), UInt16(86), (Int16(Int16(Int16(-103))) is Interface61), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], [(), (), (), (), (), (), (), (), (), ()]);
        if (true) { var434 } else { (Int32(-65), var544, Int8(-58), (Int16(31)&127..=Int16(-14)&127:118|1), var363, (UInt8(53)&127..UInt8(107)&127:(-31)|1), var558, Int8(50), true) } 
    }[4]);
    let var668 : Rune = 'Z';
    var653 /= Float64((Int32((("Gw}9<(WR!m", (Int32(43)&127..=Int32(115)&127:(-8)|1), var668, Option<Float64>.Some(95.0))[3] ?? Float64((-107.0))))) | 1);
    let var720 : Int64 = 89;
    let var753 : ?Float64 = (Int16(10) as Float64);
    let var790 : ?Range<UInt8> = Option<Range<UInt8>>.Some((UInt8(95)&127..UInt8(UInt8(Int8(-24)))&127:((-4)|1)));
    var loopTimeVar940 : Range<UInt64> = (UInt64(UInt32(Int8(67)))&127..UInt64(4)&127:(Int64(Int64(25))|1));
    for (i in loopTimeVar940 where (try { // block id: 682
        (UInt64(182)&127..UInt64(150)&127:75|1);
        Option<Bool>.None
    } catch (_) { // block id: 685
        Option<Bool>.Some(var363)
    } ?? (Option<Bool>.None ?? true))) {
        func func693(param694 : Float64, optionalParam695 ! : UInt8 = UInt8(44), optionalParam697 ! : Option<Interface61> = Option<Interface61>.None) : Range<UInt8> { // block id: 699
            let var701 : Int16 = Int16(12);
            var701;
            var loopTimeVar770 : Range<UInt64> = (UInt64(Int8(74))&127..UInt64(Int8(-72))&127:(Int64(UInt16(229))|1));
            for (i in loopTimeVar770 where match {
                case true => 
                true
                case var425 >= Int32(-110) => 
                if (true) { var255 } else { [Option<Int64>.None, Option<Int64>.None, Option<Int64>.Some(var720), Option<Int64>.Some(83), Option<Int64>.Some(119), var727, Option<Int64>.None, Option<Int64>.None, var727, Option<Int64>.None] } ;
                var363
                case _ => 
                !var363;
                var363
            }) {
                if (var363) { param153 } else { param153 } ;
                match (var746) {
                    case _ : Option<Bool> => 
                        var753;
                        ()
                    
                    case _ : Int8 => 
                        ()
                    
                    case caseVar763 : Interface61 => 
                        var283;
                        var252
                    
                    case _ => 
                        var252
                    
                }
            };
            ((Option<Option<Range<UInt8>>>.Some(var790) ?? var801[3]) ?? try { // block id: 896
                var var900 : Range<UInt8> = (UInt8(240)&127..UInt8(36)&127:(-127)|1);
                if (true) { var900 } else { var900 } 
            } catch (_) { // block id: 903
                ();
                if (false) { (UInt8(125)&127..=var429&127:(6|1)) } else { (var429&127..=optionalParam695&127:(var330|1)) } 
            } finally { // block id: 915
                var252;
                ();
                (optionalParam695&127..UInt8(20)&127:((-3)|1))
            })
        }
;
        func693(53.0, optionalParam695 : var429);
        var927[0]
    }
}




public func func1861(param1862 : Int8) : Array<Unit> { // block id: 1863
    try { // block id: 1867
        ();
        ();
        (Class58(), (-111.0), [(Int32(12)&127..=Int32(78)&127:((-42)|1)), (Int32(57)&127..var425&127:((-103)|1)), var283, (Int32(75)&127..=Int32(-70)&127:(-10)|1), (var425&127..Int32(90)&127:(27|1)), var283, (Int32(8)&127..Int32(45)&127:67|1), (Int32(24)&127..=Int32(-44)&127:71|1), (Int32(71)&127..var1894&127:(20|1)), var283])
    } finally { // block id: 1898
        ();
        (var1902, (-105.0), var1906)
    }[0];
    var var2037 : Float32 = Float32(-120.0);
    let var2040 : (Int32, Bool, Int8, Float32) = (Int32(Int16(4)), ((Int16(UInt16(140))&127..Int16(Int8(76))&127:(Int64(Int16(29))|1)) is Range<Int16>), Int8(Int8(UInt8(156))), Float32(-53.0));
    if (try { // block id: 1942
        let var1944 : Array<Bool> = [(((UInt32(145)&127..=UInt32(69)&127:(-126)|1), UInt16(46), "y^:TDs<#mu", (Int8(79)&127..=Int8(-61)&127:(-34)|1), (-16), """
FF]K6
~kp/&
""", (UInt16(100)&127..=UInt16(236)&127:((-111)|1))) is Option<Bool>), true, false, true, ((77&127..=97&127:(-6)|1) is Class58), false, (((), (74&127..=(-27)&127:(105|1)), (UInt64(149)&127..=UInt64(135)&127:18|1), Class58(), Float32(-98.0), ((UInt32(173)&127..UInt32(243)&127:124|1), UInt16(125), "}Eux[,y\\8^", (Int8(-100)&127..Int8(91)&127:((-96)|1)), (-27), ###"'L T a{ms./"###, (UInt16(208)&127..UInt16(215)&127:(-72)|1)), UInt64(209)) is Range<UInt16>), true, false, (("`qHRo8.G5Q", (Int32(-27)&127..Int32(36)&127:((-35)|1)), 'Q', ([Option<Int64>.None, Option<Int64>.None, Option<Int64>.None, Option<Int64>.None, Option<Int64>.None, Option<Int64>.None, Option<Int64>.None, Option<Int64>.Some((-105)), Option<Int64>.Some(124), Option<Int64>.None] as Float64)) is Interface61)];
        var1944
    } finally { // block id: 2010
        [var951, var951, true, false, true, true, var951, false, var951, false]
    }[3]) { // block id: 2023
        let var2025 : Range<UInt16> = (UInt16(186)&127..=UInt16(1)&127:((-15)|1));
        var2025;
        if (true) { (var1894, true, var22, var2037) } else { var2040 } 
    } else { // block id: 2056
        match ((UInt32(200)&127..UInt32(7)&127:(var330|1))) {
            case caseVar2064 => 
                (Class58(), 24.0, var1906);
                ();
                ()
            
            case caseVar2074 : (Range<Int64>, Unit) => 
                var1819
            
            case caseVar2079 : Option<Unit> => 
                var1776
            
            case caseVar2084 : Range<UInt64> => 
                Int8(-45);
                var1819
            
            case _ => 
                var252
            
        };
        var410 %= ((var410) | 1);
        var2040
    };
    let var2096 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    var2096
}






func func2334(param2335 : Option<Unit>) : Unit { // block id: 2336
    (((Option<Option<Option<Unit>>>.Some(Option<Option<Unit>>.Some(param2335)) ?? Option<Option<Unit>>.Some(Option<Unit>.Some(()))) ?? [Option<Unit>.None, param2335, Option<Unit>.None, var746, Option<Unit>.Some(var1776), Option<Unit>.None, var746, var746, param2335, var746][2]) ?? try (resource = Class58()) { // block id: 2370
        (-121);
        ()
    } finally { // block id: 2373
        var425 *= Int32(32);
        var1819
    });
    ()
}

public func func2483(optionalParam2484 ! : (Int32, Range<UInt32>, Int8, Range<Int16>, Bool, Range<UInt8>, (Range<Int32>, UInt16, Bool, Array<Array<Unit>>, Array<Unit>), Int8, Bool) = (Int32(Int8(25)), (UInt32(83)&127..UInt32(UInt8(70))&127:(14|1)), Int8(-50), (Int16(77)&127..Int16(UInt8(67))&127:((-37)|1)), (((Int8(63)&127..Int8(-20)&127:(-87)|1), UInt8(UInt8(57)), ((Int32(-57)&127..=Int32(-126)&127:(51|1)), UInt16(27), true, [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], [(), (), (), (), (), (), (), (), (), ()]), ([Option<Int64>.Some((-104)), Option<Int64>.Some(90), Option<Int64>.Some((-66)), Option<Int64>.Some(107), Option<Int64>.Some(37), Option<Int64>.Some((-116)), Option<Int64>.Some((-47)), Option<Int64>.Some(93), Option<Int64>.None, Option<Int64>.Some(83)] as Range<UInt8>)) is (Int32, Bool, Int8, Float32)), (UInt8(39)&127..UInt8(167)&127:(-2)|1), ((Int32(UInt16(124))&127..=Int32(-69)&127:(73|1)), UInt16(Int8(105)), false, [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], [(), (), (), (), (), (), (), (), (), ()]), Int8(UInt8(Int8(UInt8(137)))), false), optionalParam2621 ! : UInt32 = UInt32(UInt16(9)), namedParam2624 ! : Array<Option<Int64>>, optionalParam2625 ! : Interface66 = Class58()) : Int16 { // block id: 2627
    var var2637 : Array<Int16> = [Int16(124), Int16(UInt16(Int16(UInt16(84)))), Int16(Int16(-85)), Int16(UInt16(UInt8(139))), Int16(UInt8(UInt8(92))), Int16(UInt16(UInt16(221))), Int16(38), Int16(-52), Int16(17), Int16(51)];
    try { // block id: 2632
        var425 += Int32(52);
        var2637
    } finally { // block id: 2659
        ();
        [var1827, var1827, var1827, var1827, var1827, Int16(-93), Int16(102), Int16(118), Int16(-64), var1827]
    }[5] * Int16(25)
}


public func func3626(param3627 : (Range<Int64>, Unit), param3628 : Class58) : Option<Unit> { // block id: 3629
    if (var951) { (([false, false, false, true, false, false, false, true, false, true] as Unit) as Unit) } else { (try { // block id: 3637
        var1454;
        var3619
    } catch (e: Exception) { // block id: 3640
        ();
        var1424 &= UInt32(65);
        Option<Option<Unit>>.None
    } finally { // block id: 3646
        var3649 &&= true;
        ();
        if (var3649) { var3619 } else { var3619 } 
    } ?? if (false) { var746 } else { Option<Unit>.Some(var1819) } ) } 
}




public func func3738(optionalParam3739 ! : Option<Float64> = Option<Float64>.None, optionalParam3741 ! : (Int64) -> Option<Int64> = func158, optionalParam3745 ! : Array<Option<Int64>> = Array<Option<Int64>>(10){ i => Option<Int64>.None }, optionalParam3784 ! : Array<Range<Int32>> = [(Int32(42)&127..=Int32(-51)&127:89|1), (Int32(-27)&127..Int32(64)&127:(-122)|1), (Int32(-56)&127..Int32(110)&127:(-105)|1), (Int32(-126)&127..Int32(0)&127:(-74)|1), (Int32(17)&127..Int32(88)&127:5|1), (Int32(-6)&127..Int32(0)&127:11|1), (Int32(7)&127..=Int32(44)&127:115|1), (Int32(-107)&127..=Int32(119)&127:(-52)|1), (Int32(-82)&127..=Int32(96)&127:(-106)|1), (Int32(35)&127..=Int32(49)&127:(-7)|1)]) : Option<Float64> { // block id: 3786
    var var3801 : Option<Option<(Range<Int32>, UInt16, Bool, Array<Array<Unit>>, Array<Unit>)>> = (Class58() as Option<(Range<Int32>, UInt16, Bool, Array<Array<Unit>>, Array<Unit>)>);
    var var3808 : (Range<Int32>, UInt16, Bool, Array<Array<Unit>>, Array<Unit>) = ((Int32(-66)&127..Int32(-88)&127:(-9)|1), UInt16(78), true, [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], [(), (), (), (), (), (), (), (), (), ()]);
    ((if (var951) { Option<Option<(Range<Int32>, UInt16, Bool, Array<Array<Unit>>, Array<Unit>)>>.None } else { var3801 }  ?? var3805) ?? var3808);
    var var3826 : Unit = ();
    var3826;
    (Option<Int32>.Some(Int32(var429)) as Float64)
}


func func1391() : Option<Bool> { // block id: 3723
    var var3874 : Unit = ();
    try { // block id: 3725
        try { // block id: 3727
            var1132
        } catch (e: Exception) { // block id: 3729
            Option<Bool>.None
        } finally { // block id: 3731
            UInt32(78) >> ((UInt32(104)) & 7);
            var1132
        }
    } catch (e: Exception) { // block id: 3736
        var var3835 : (Int64) -> Option<Int64> = func158;
        func3738(optionalParam3739 : Option<Float64>.Some(99.0), optionalParam3741 : var3835, optionalParam3745 : [Option<Int64>.None, var727, Option<Int64>.None, var727, var727, Option<Int64>.None, Option<Int64>.Some(81), var727, var727, var727]);
        var var3879 : String = """
rgC(t
CI6}o
""";
        match (var255) {
            case caseVar3853 : Array<Array<Unit>> => 
                var1135;
                if (var951) { Option<Bool>.None } else { Option<Bool>.Some(true) } ;
                ()
            
            case caseVar3864 => 
                var1776;
                ()
            
            case _ => 
                if (var3649) { Class58(optionalParam3678 : var3874, namedParam3680 : ###"s+=/g1n0<-"###) } else { Class58(namedParam3680 : var3879) } ;
                var1906;
                ()
            
        };
        let var3889 : ??Bool = ((Int8(120)&127..=Int8(Int8(-32))&127:(5|1)) as Option<Bool>);
        (var3889 ?? Option<Bool>.Some(var3898))
    }
}


public func func3152(param3153 : Rune) : Float64 { // block id: 3154
    var var3588 : ?Unit = Option<Unit>.None;
    if (true) { match (var22) {
        case -111 | 69 => 
            Option<Unit>.Some(())
        
        case caseVar3168 : Option<UInt16> => 
            var3172 >>= ((Int8(49)) & 7);
            Option<Unit>.None
        
        case -62 => 
            let var3184 : Range<UInt64> = (UInt64(150)&127..UInt64(153)&127:104|1);
            var var3188 : Float32 = Float32(Float32(-103.0));
            (var1776, var2317, var3184, Class58(), var3188, var2896, UInt64(4));
            var252;
            Option<Unit>.None
        
        case 125 | -110 => 
            if (var951) { var3201 } else { [Option<Unit>.Some(()), Option<Unit>.Some(var252), var746, Option<Unit>.None, Option<Unit>.None, var746, var746, var746, Option<Unit>.Some(()), var746] } ;
            if (var951) { Option<Unit>.Some(var252) } else { var746 } 
        
        case _ => 
            if (var951) { Option<Unit>.Some(var252) } else { var746 } 
        
    } } else { match ((UInt8(42)&127..UInt8(166)&127:64|1)) {
        case caseVar3530 : Interface61 => 
            var247 *= 6;
            var746
        
        case _ => 
            var1424 %= ((var1424) | 1);
            var3542;
            if (var951) { var3588 } else { var746 } 
        
    } } |>func2334;
    let var3675 : Class58 = Class58(optionalParam3678 : (), namedParam3680 : "=AcyF83a{7Z");
    func func3600(param3601 : UInt64, namedParam3602 ! : (UInt8, UInt64, UInt64, Bool, Array<Option<Int64>>, Range<UInt16>), namedParam3603 ! : Float64, namedParam3604 ! : Option<UInt16>) : Option<Bool> { // block id: 3605
        var var3615 : Bool = false;
        (try { // block id: 3610
            var3099;
            var3172;
            if (var3615) { Option<Option<Unit>>.None } else { var3619 } 
        } catch (e: Exception) { // block id: 3621
            UInt8(105);
            Option<Option<Unit>>.Some(Option<Unit>.None)
        } ?? func3626(var3663, var3675))|>func2334;
        var1776;
        func1391()
    }
;
    let var3912 : (UInt8, UInt64, UInt64, Bool, Array<Option<Int64>>, Range<UInt16>) = (UInt8(UInt8(160)), UInt64(192), UInt64(UInt64(UInt64(UInt8(174)))), (Class58() is Option<Bool>), [(UInt16(46) as Int64), (Float32(-31.0) as Int64), Option<Int64>.None, ((Class58(), (-85.0), [(Int32(-97)&127..Int32(-109)&127:(-119)|1), (Int32(-40)&127..Int32(50)&127:(-114)|1), (Int32(-12)&127..Int32(0)&127:(-38)|1), (Int32(-86)&127..=Int32(-80)&127:(-34)|1), (Int32(-107)&127..=Int32(-43)&127:(-57)|1), (Int32(-44)&127..=Int32(-112)&127:54|1), (Int32(119)&127..Int32(-120)&127:94|1), (Int32(16)&127..Int32(37)&127:(-35)|1), (Int32(-66)&127..=Int32(86)&127:46|1), (Int32(119)&127..=Int32(-4)&127:70|1)]) as Int64), (32 as Int64), Option<Int64>.None, Option<Int64>.None, (((), (), (Int32(-75), (UInt32(21)&127..=UInt32(116)&127:((-90)|1)), Int8(5), (Int16(97)&127..Int16(-110)&127:(117|1)), false, (UInt8(27)&127..=UInt8(21)&127:(5|1)), ((Int32(20)&127..Int32(-18)&127:(110|1)), UInt16(233), true, [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], [(), (), (), (), (), (), (), (), (), ()]), Int8(-119), false), (), (UInt8(83)&127..=UInt8(150)&127:(42|1)), (98&127..=41&127:(-12)|1), ((UInt32(175)&127..UInt32(251)&127:(-91)|1), UInt16(218), "y>zi+CtVDL", (Int8(-57)&127..=Int8(-79)&127:54|1), 105, "m:\"L+(Cb!&", (UInt16(11)&127..UInt16(132)&127:(-64)|1))) as Int64), Option<Int64>.Some(125), (((Int8(-112)&127..Int8(25)&127:(90|1)), UInt8(128), ((Int32(-29)&127..Int32(-63)&127:90|1), UInt16(209), true, [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], [(), (), (), (), (), (), (), (), (), ()]), Option<Range<UInt8>>.Some((UInt8(80)&127..UInt8(250)&127:((-82)|1)))) as Int64)], (UInt16(11)&127..UInt16(200)&127:1|1));
    func func3593(optionalParam3594 ! : Class58 = Class58(), namedParam3596 ! : Range<UInt64>) : Bool { // block id: 3597
        (func3600(UInt64(240), namedParam3602 : try { // block id: 3905
            var3907;
            if (false) { var3912 } else { var1219 } 
        } catch (_) { // block id: 4065
            ();
            var653 %= Float64((Int32(var653)) | 1);
            var1219
        }, namedParam3603 : (-69.0) - 2.0, namedParam3604 : try { // block id: 4075
            var1776;
            var3072
        } catch (e: Exception) { // block id: 4078
            if (var3649) { var4082 } else { Option<Float64>.None } ;
            ();
            Option<UInt16>.Some(var410)
        }) ?? true)
    }
;
    if (func3593(namedParam3596 : (var4095 ?? var4109))) { (var3104 as Bool) } else { match (Class58(optionalParam3678 : (), namedParam3680 : var346)) {
        case _ => 
            var1827++;
            var3649 ||= var951;
            if (true) { var4134 } else { Option<Bool>.Some(false) } 
        
        case caseVar4141 : Range<UInt32> => 
            var1132
        
        case caseVar4146 : (Range<Int32>, UInt16, Bool, Array<Array<Unit>>, Array<Unit>) => 
            var4149
        
        case _ => 
            var1819;
            var1132
        
    } } ;
    var var4194 : UInt16 = UInt16(179);
    if (if (true) { // block id: 4159
        var252;
        var1776;
        false
    } else { // block id: 4163
        7.0;
        ();
        false
    }) { // block id: 4167
        ();
        var1827 -= var1827;
        (-57.0)
    } else { // block id: 4173
        var3649 &&= var951;
        var3147 /= Float64((Int32(var3147)) | 1);
        100.0
    } * Float64(if (true) { // block id: 4184
        let var4188 : ?Option<Option<Unit>> = (Int16(105) as Option<Option<Unit>>);
        if (false) { var4188 } else { var4188 } ;
        var4194 &= UInt16(56);
        var2736
    } else { // block id: 4198
        Float32(-110.0)
    })
}


public func func3135(param3136 : Range<UInt16>) : Range<UInt8> { // block id: 3137
    (Option<String>.None ?? var346);
    let var4201 : (Rune) -> Float64 = func3152;
    var var4217 : Rune = 'F';
    var3147 /= Float64((Int32((match (var3619) {
        case caseVar4207 : Array<Option<Unit>> => 
            var4211 /= ((Int8(28)) | 1);
            if (var951) { var4217 } else { var4217 } 
        
        case _ => 
            var1827--;
            if (var3898) { 'T' } else { var4217 } 
        
        case caseVar4231 : (Range<Int32>, UInt16, Bool, Array<Array<Unit>>, Array<Unit>) => 
            if (false) { var4217 } else { 'B' } 
        
        case _ => 
            var var4292 : ?Int64 = Option<Int64>.None;
            if (true) { var4242 } else { [var727, var4292, var727, Option<Int64>.Some(var1745), Option<Int64>.Some(var330), Option<Int64>.None, Option<Int64>.None, var4292, var727, var4292] } ;
            var1106;
            var4217
        
    }|>var4201))) | 1);
    var var4316 : Range<UInt8> = (UInt8(194)&127..UInt8(191)&127:(-18)|1);
    if ((Option<Bool>.None ?? (var1132 is Int16))) { var4316 } else { (UInt8(var4211)&127..if (var951) { // block id: 4323
        Option<Unit>.None;
        if (var951) { var3099 } else { var3099 } ;
        UInt8(229) % ((var429) | 1)
    } else if (var3649) { // block id: 4333
        UInt8(178)
    } else { // block id: 4335
        var429
    }&127:(var247|1)) } 
}

func func3128(optionalParam3129 ! : Option<Int64> = (UInt8(162) as Int64), namedParam3132 ! : (Range<UInt32>, UInt16, String, Range<Int8>, Int64, String, Range<UInt16>)) : Int8 { // block id: 3133
    var var4339 : (Range<UInt16>) -> Range<UInt8> = func3135;
    if (false) { var2751 } else { (var410&127..=var410&127:(var247|1)) } |>var4339;
    var429;
    var22
}

public func func3122(namedParam3123 ! : Range<Int16>, namedParam3124 ! : Range<Int8>) : Option<Range<UInt8>> { // block id: 3125
    var var4355 : Int64 = Int64(UInt32(18));
    match (func3128(optionalParam3129 : if (var3898) { Option<Int64>.None } else { Option<Int64>.Some(var4355) } , namedParam3132 : if (true) { // block id: 4360
            ((UInt32(97)&127..=UInt32(45)&127:(-18)|1), UInt16(189), var346, (Int8(27)&127..=Int8(7)&127:39|1), (-21), var346, (UInt16(125)&127..=UInt16(39)&127:94|1))
        } else { // block id: 4369
            ();
            var2896
        })) {
        case _ => 
            var4375;
            var1894++
        
    };
    try { // block id: 4380
        let var4383 : Range<UInt8> = (UInt8(193)&127..=UInt8(94)&127:118|1);
        (var4383 as Option<(Range<Int32>, UInt16, Bool, Array<Array<Unit>>, Array<Unit>)>);
        (UInt8(55)&127..=UInt8(109)&127:68|1)
    } catch (e: Exception) { // block id: 4386
        var425++;
        try { // block id: 4390
            var1776;
            if (var3649) { var4395 } else { (UInt8(7)&127..var429&127:((-94)|1)) } 
        } finally { // block id: 4401
            if (var3649) { (UInt8(0)&127..=UInt8(28)&127:61|1) } else { (UInt8(119)&127..=UInt8(51)&127:26|1) } 
        }
    } finally { // block id: 4406
        if (var3898) { // block id: 4409
            ();
            var1424 ^= var1424
        } else if (var3898) { // block id: 4415
            ();
            if (var3898) { (var1444, true, Int8(11), var2736) } else { (Int32(92), false, var3172, Float32(-57.0)) } ;
            var410 *= UInt16(155)
        };
        try { // block id: 4433
            ();
            ();
            if (false) { var342 } else { namedParam3124 } 
        } finally { // block id: 4440
            false;
            var1776;
            (Int8(108)&127..Int8(6)&127:23|1)
        };
        var var4481 : UInt8 = UInt8(UInt8(188));
        match (var283) {
            case caseVar4448 => 
                if (false) { (UInt8(110)&127..UInt8(98)&127:91|1) } else { var4454 } 
            
            case _ => 
                [false, true, var3898, false, var4465, false, var3898, var4465, var951, true];
                (UInt8(85)&127..=var4481&127:((-26)|1))
            
            case _ => 
                var4454
            
            case caseVar4491 => 
                ();
                (UInt8(55)&127..=UInt8(172)&127:(-107)|1)
            
            case _ => 
                ();
                var4395
            
        }
    };
    Option<Range<UInt8>>.None
}



func func3044(optionalParam3045 ! : Option<Array<Option<Int64>>> = Option<Array<Option<Int64>>>.Some([((Int8(-34)&127..Int8(54)&127:24|1) as Int64), Option<Int64>.None, Option<Int64>.Some((-35)), Option<Int64>.None, Option<Int64>.None, (UInt16(238) as Int64), Option<Int64>.None, (Option<Option<Unit>>.None as Int64), Option<Int64>.None, Option<Int64>.None]), optionalParam3062 ! : Option<Option<Int64>> = ((Int32(-88)&127..Int32(107)&127:57|1) as Option<Int64>)) : Bool { // block id: 3065
    var var4535 : ?Float64 = ((Option<Float64>.Some((-79.0)) as Option<Unit>) as Float64);
    if (if (var951) { // block id: 3069
        (Int32(-16)&127..Int32(13)&127:91|1);
        var3072;
        Int32(-42) != Int32(35)
    } else if (false) { // block id: 3079
        var1776;
        let var3083 : UInt16 = UInt16(222);
        var3083 > var410
    } else { // block id: 3086
        var1776;
        var var3090 : Int8 = Int8(UInt8(Int8(31)));
        var3090++;
        false
    }) { try { // block id: 3096
        ();
        var3099;
        if (var951) { var3104 } else { var3104 } 
    } finally { // block id: 3117
        var1819;
        var3104
    } } else { match (func3122(namedParam3123 : (var1827&127..Int16(-77)&127:(var247|1)), namedParam3124 : var342)) {
        case caseVar4507 => 
            var3104
        
        case _ : Array<Range<Int32>> => 
            if (true) { ("!I=c^;hB4(", var283, 'x', Option<Float64>.None) } else { var3104 } 
        
        case _ : Option<Range<UInt32>> => 
            var252;
            var var4532 : Rune = 'E';
            ("ZCvxa/pFP_", (Int32(-128)&127..Int32(122)&127:(var247|1)), var4532, var4535)
        
        case _ => 
            var4211 >> ((var3172) & 7);
            if (var4465) { var4548 } else { (var346, (Int32(-19)&127..=var1444&127:(var330|1)), var4585, Option<Float64>.None) } 
        
    } } ;
    let var4630 : Interface65 = Class58();
    let var4787 : Range<Int16> = (Int16(120)&127..Int16(-63)&127:(Int64(UInt64(Int8(24)))|1));
    let var4809 : Bool = ([(Class58((Int32(-57), (UInt32(214)&127..=UInt32(178)&127:123|1), Int8(-121), (Int16(-122)&127..Int16(100)&127:81|1), false, (UInt8(194)&127..=UInt8(123)&127:(-102)|1), ((Int32(-95)&127..=Int32(-95)&127:(-18)|1), UInt16(202), false, [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], [(), (), (), (), (), (), (), (), (), ()]), Int8(88), false)) as Int64), (Class58(optionalParam3678 : (), namedParam3680 : ###"fd,tU8qj-?"###) as Int64), (Option<UInt16>.None as Int64), (Class58() as Int64), Option<Int64>.None, Option<Int64>.None, Option<Int64>.None, ([false, false, true, false, false, true, false, true, false, true] as Int64), (Option<Option<Option<Unit>>>.Some(Option<Option<Unit>>.Some(Option<Unit>.Some(()))) as Int64), Option<Int64>.None] is (Interface62, Array<Array<Unit>>) -> Unit);
    try { // block id: 4589
        match (Option<(Range<Int32>, UInt16, Bool, Array<Array<Unit>>, Array<Unit>)>.None) {
            case caseVar4594 => 
                -Int32(-105)
            
            case _ => 
                var1819;
                var4602;
                Int32(-21)
            
        };
        (var4611 ?? ("""
Ix6]a
?wqCk
""", (Int32(-37)&127..var425&127:(var1745|1)), var4585, var4082));
        let var4719 : Interface66 = Class58(namedParam3680 : """
8n^K>
=Xg)=
""");
        match ([true, true, false, true, false, false, false, false, true, true]) {
            case caseVar4627 : (Range<Int8>, UInt8, (Range<Int32>, UInt16, Bool, Array<Array<Unit>>, Array<Unit>), Option<Range<UInt8>>) => 
                var4630;
                if (var951) { Class58() } else { var958 } 
            
            case caseVar4638 => 
                [var4465, false, var4465, var4645, var4648, var4645, var3649, var3898, false, var3898];
                var1819;
                if (var4648) { Class58(var434) } else { Class58() } 
            
            case _ : (Range<Int8>, UInt8, (Range<Int32>, UInt16, Bool, Array<Array<Unit>>, Array<Unit>), Option<Range<UInt8>>) => 
                Class58(var434)
            
            case _ : Range<Int16> => 
                if (var4645) { var958 } else { var4719 } 
            
            case _ => 
                var306 <<= ((UInt64(250)) & 7);
                var958
            
        }
    } catch (e: Exception) { // block id: 4728
        let var4736 : ?(Range<Int32>, UInt16, Bool, Array<Array<Unit>>, Array<Unit>) = Option<(Range<Int32>, UInt16, Bool, Array<Array<Unit>>, Array<Unit>)>.None;
        if (true) { // block id: 4731
            var801;
            var var4745 : Array<Unit> = Array<Unit>(10){ i => () };
            if (var951) { var4736 } else { Option<(Range<Int32>, UInt16, Bool, Array<Array<Unit>>, Array<Unit>)>.Some(((Int32(-94)&127..=Int32(38)&127:27|1), var410, var4645, [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], var4745)) } ;
            var252
        } else if (var4648) { // block id: 4759
            var410 |= var410;
            var4211 >>= ((Int8(-30)) & 7);
            ()
        };
        try (resource = Class58()) { // block id: 4768
            var1827 **= (var1827 & 3);
            ();
            var4663
        } catch (e: Exception) { // block id: 4774

        };
        (Option<Interface66>.Some(Class58((Int32(-119), (UInt32(5)&127..UInt32(95)&127:(-13)|1), var3172, var4787, true, var4454, var4797, Int8(-102), var4809))) ?? var958)
    } finally { // block id: 4889
        if (var3649) { var2769 } else { var4242 } ;
        var4895;
        if (var951) { Class58(optionalParam3678 : var1776, namedParam3680 : var346) } else { var958 } 
    };
    true
}

public func func2432(optionalParam2433 ! : Option<Int32> = ([true, true, (((Int8(-4)&127..Int8(-26)&127:(68|1)), UInt8(75), ((Int32(-110)&127..=Int32(-38)&127:(-54)|1), UInt16(92), false, [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], [(), (), (), (), (), (), (), (), (), ()]), Option<Range<UInt8>>.None) is Array<Array<Unit>>), ((Int32(-41), true, Int8(87), Float32(-46.0)) is Interface61), true, true, false, true, false, (UInt32(40) is Option<Float64>)] as Int32), optionalParam2465 ! : Option<Range<UInt8>> = Option<Range<UInt8>>.Some((UInt8(91)&127..UInt8(Int8(UInt8(18)))&127:(Int64(UInt16(UInt16(28)))|1))), optionalParam2475 ! : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]) : Option<Bool> { // block id: 2477
    let var2699 : Range<Int32> = (Int32(-115)&127..=Int32(-92)&127:(126|1));
    if ((Int16(Int8(-63)) < func2483(namedParam2624 : [var727, Option<Int64>.None, Option<Int64>.Some(var330), Option<Int64>.Some(79), var727, Option<Int64>.Some(var247), var727, var727, var727, Option<Int64>.None]))) { (if (((-102) is (Range<Int8>, UInt8, (Range<Int32>, UInt16, Bool, Array<Array<Unit>>, Array<Unit>), Option<Range<UInt8>>))) { try { // block id: 2692
        (var1902, (-74.0), [(Int32(-74)&127..=Int32(-78)&127:3|1), var2699, (var1894&127..Int32(-90)&127:(var1745|1)), (var425&127..Int32(-27)&127:((-77)|1)), (Int32(-70)&127..Int32(101)&127:62|1), var2699, (Int32(-51)&127..Int32(71)&127:(-49)|1), (Int32(-95)&127..var425&127:(var330|1)), (var1894&127..Int32(120)&127:(var330|1)), (Int32(-25)&127..Int32(-15)&127:(-78)|1)]);
        (var252, (61&127..(-14)&127:((-114)|1)), (UInt64(2)&127..var306&127:((-26)|1)), Class58(), var2736, ((UInt32(36)&127..=UInt32(108)&127:30|1), UInt16(232), var346, (var22&127..var22&127:(var1745|1)), 8, "x/zb#_L7q[", var2751), UInt64(76));
        var2760
    } finally { // block id: 2763
        optionalParam2475;
        var2760
    } } else { try { // block id: 2767
        var2769;
        var2760
    } catch (_) { // block id: 2878
        if (true) { ((var1424&127..=UInt32(119)&127:(84|1)), UInt16(40), "P(CxxX^OH;", (Int8(19)&127..=Int8(-14)&127:(var330|1)), var330, ###"ZnZ'a{%[s^f"###, (UInt16(50)&127..UInt16(33)&127:(-61)|1)) } else { var2896 } ;
        ();
        var2760
    } finally { // block id: 2928
        let var2933 : (Range<Int32>, UInt16, Bool, Array<Array<Unit>>, Array<Unit>) = ((Int32(13)&127..=Int32(Int8(-71))&127:(113|1)), UInt16(UInt8(2)), ([(), (), (), (), (), (), (), (), (), ()] is Unit), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], [(), (), (), (), (), (), (), (), (), ()]);
        ((Int8(-55)&127..=Int8(-119)&127:(-95)|1), UInt8(128), var2933, optionalParam2465);
        let var3021 : Interface61 = Class58();
        if (false) { Option<Interface61>.Some(var3021) } else { Option<Interface61>.Some(var3021) } 
    } } ) } else { try { // block id: 3026
        Option<Interface61>.Some(Class58())
    } finally { // block id: 3029
        ();
        ();
        if (false) { var2760 } else { Option<Interface61>.None } 
    } } ;
    var746|>{ lambdaParameter3039 : Option<Unit> =>  };
    if (func3044()) { ((Option<Range<UInt32>>.None ?? (var1424&127..=var1424&127:(var4911|1))) as Bool) } else { (if (try { // block id: 4918
        var951
    } catch (e: Exception) { // block id: 4920
        UInt8(246) == UInt8(22)
    } finally { // block id: 4924
        var4927 ^= var306;
        var951
    }) { (var746 as Bool) } else { try { // block id: 4934
        if (true) { Option<Bool>.Some(var4648) } else { var4134 } 
    } finally { // block id: 4940
        var1776;
        var1132
    } } ) } 
}

public func func2380(param2381 : Option<Interface61>) : Unit { // block id: 2382
    try { // block id: 2384
        Int16(69) ** (var1827 & 3);
        var loopTimeVar2392 : Int64 = 0;
        while ((true) && loopTimeVar2392 < 100 ) {
            loopTimeVar2392++;

        }
    } catch (_) { // block id: 2393
        try (resource = Class58()) { // block id: 2395

        } finally { // block id: 2396
            var var2402 : Float32 = Float32(Float32(Float32(55.0)));
            (Int32(-86), var951, Int8(84), var2402);
            var1776
        };
        var loopTimeVar2417 : Int64 = 0;
        do {
            loopTimeVar2417++;
            var429 ^= var429;
            var1424 -= var1424
        } while ((var951) && loopTimeVar2417 < 100 ) ;
        var loopTimeVar2426 : Int64 = 0;
        do {
            loopTimeVar2426++;
            Option<Unit>.None;
            var247 >>= ((47) & 7)
        } while ((true) && loopTimeVar2426 < 100 ) 
    } finally { // block id: 2427

    };
    var653;
    var loopTimeVar4973 : Int64 = 0;
    while (((func2432(optionalParam2465 : Option<Range<UInt8>>.Some((var429&127..var429&127:(var1745|1)))) ?? try { // block id: 4949
        ();
        UInt8(142);
        var4648
    } finally { // block id: 4953
        Class58();
        (Int32(35), (UInt32(229)&127..=UInt32(124)&127:23|1), Int8(73), (var1827&127..Int16(-116)&127:(var330|1)), var4648, (UInt8(209)&127..=UInt8(35)&127:96|1), var4797, var3172, false);
        false
    })) && loopTimeVar4973 < 100 ) {
        loopTimeVar4973++;
        var4611;
        var2736
    }
}

public func func4977(param4978 : Option<Unit>) : Option<Interface61> { // block id: 4979
    var var4981 : ??Range<UInt8> = Option<Option<Range<UInt8>>>.None;
    var4981;
    var var5004 : ?Unit = Option<Unit>.Some(());
    match (Float32(if (var4645) { // block id: 4987
            var4211 <<= ((var22) & 7);
            Option<Bool>.None;
            Float32(-87.0)
        } else { // block id: 4993
            Float32(57.0)
        })) {
        case _ => 
            var252;
            var1424
        
        case 88.0 | 28.0 => 
            var5004;
            var1424 ** (var1424 & 3)
        
        case _ => 
            var4927--;
            var410 %= ((var410) | 1);
            var1424 % ((var1424) | 1)
        
    };
    Option<Interface61>.None
}


func func2156(param2157 : Range<UInt8>, param2158 : Option<Float64>, namedParam2159 ! : Unit) : Interface61 { // block id: 2160
    let var4975 : (Option<Interface61>) -> Unit = func2380;
    let var5022 : (Option<Unit>) -> Option<Interface61> = func4977;
    var loopTimeVar5140 : Range<UInt64> = (UInt64(87)&127..UInt64(UInt32(Int32(Int32(-75))))&127:(Int64(Int8(-86))|1));
    for (i in loopTimeVar5140 where false) {
        func func2165(param2166 : (Range<Int64>, Unit), optionalParam2167 ! : (Range<UInt32>, UInt16, String, Range<Int8>, Int64, String, Range<UInt16>) = ((UInt32(174)&127..UInt32(202)&127:(-22)|1), UInt16(246), """
B*%~\\
cEY 2
""", (Int8(UInt8(161))&127..Int8(-90)&127:(Int64(Int8(32))|1)), Int64(UInt64(199)), """
\"5vQt
q#a{[N
""", (UInt16(203)&127..=UInt16(UInt16(25))&127:(Int64(Int8(Int8(-16)))|1))), namedParam2188 ! : UInt8, optionalParam2189 ! : (String, Range<Int32>, Rune, Option<Float64>) = ("jujvdU;EUQ", (Int32(-41)&127..Int32(Int32(Int32(103)))&127:((-6)|1)), 'D', ((Int32(-24), (((UInt32(47)&127..=UInt32(17)&127:((-4)|1)), UInt16(213), "G-WSYL.^`l", (Int8(94)&127..Int8(89)&127:(33|1)), (-82), """
 4 cJ
oWL&l
""", (UInt16(124)&127..=UInt16(18)&127:(43|1))) is () -> Range<UInt32>), Int8(Int8(61)), Float32(Float32(69.0))) as Float64))) : Int32 { // block id: 2224
            try { // block id: 2226
                ((-18)&127..41&127:49|1)
            } finally { // block id: 2228
                (var330&127..=23&127:(var247|1))
            };
            var var2259 : ?Int32 = (Class58() as Int32);
            var var2291 : Bool = false;
            (try { // block id: 2239
                [false, var951, var951, var951, false, false, false, var951, false, var951];
                Option<Int32>.Some(Int32(114))
            } catch (_) { // block id: 2253
                if (var951) { (Int32(-63)&127..Int32(-34)&127:41|1) } else { (Int32(-87)&127..Int32(-117)&127:82|1) } ;
                var2259
            } ?? if (if (var951) { // block id: 2265
                true
            } else { // block id: 2267
                ();
                param2157;
                false
            }) { // block id: 2271
                var1776;
                var1894 - var1894
            } else if (if (true) { // block id: 2278
                !var951
            } else if (false) { // block id: 2282
                var951
            } else { // block id: 2284
                (var22&127..Int8(-104)&127:((-77)|1));
                if (var2291) { Option<Int32>.None } else { var2259 } ;
                var951
            }) { // block id: 2296
                var var2299 : Int8 = Int8(UInt8(211));
                var2299 **= (Int8(-28) & 3);
                Int32(102) | Int32(-64)
            } else { // block id: 2306
                var1444
            });
            let var2323 : ?UInt16 = Option<UInt16>.None;
            let var5034 : ??Unit = (([false, true, true, true, true, true, true, true, false, false] as (Range<Int32>, UInt16, Bool, Array<Array<Unit>>, Array<Unit>)) as Option<Unit>);
            func func2328(namedParam2329 ! : Option<Unit>, optionalParam2330 ! : Unit = ()) : UInt16 { // block id: 2332
                if ((!var3649)) { Option<Unit>.None } else { (var5034 ?? Option<Unit>.Some(namedParam2159)) } |>(var5022~>var4975);
                let var5063 : Int64 = Int64(UInt16(UInt16(104)));
                match (if (if (var3649) { // block id: 5044
                        ();
                        Int8(-20) != var3172
                    } else { // block id: 5049
                        (var2317, ());
                        false
                    }) { // block id: 5054
                        if (var4465) { (((-4)&127..75&127:110|1), ()) } else { ((var5063&127..=var247&127:(var247|1)), var252) } 
                    } else if ((Option<Bool>.None ?? var4648)) { // block id: 5073
                        (var2317, ())
                    } else { // block id: 5077
                        var5080 ** (var1894 & 3);
                        var927
                    }) {
                    case _ : Interface63 => 
                        var410
                    
                    case caseVar5092 => 
                        ();
                        var410 / ((UInt16(116)) | 1)
                    
                    case _ => 
                        var247 ^= 32;
                        var410 - var410
                    
                }
            }
;
            Int32((try { // block id: 2315
                var2317;
                Option<UInt16>.Some(UInt16(214))
            } catch (_) { // block id: 2321
                var2323
            } finally { // block id: 2325
                var2323
            } ?? func2328(namedParam2329 : var746, optionalParam2330 : var1819)))
        }
;
        var var5116 : Range<UInt32> = (UInt32(19)&127..=UInt32(66)&127:(Int64(UInt32(UInt16(Int8(14))))|1));
        func2165(((var330&127..=var247&127:((-10)|1)), var1819), optionalParam2167 : (var5116, var410, "PQ}.D'.+J>", var342, (-80), var346, (UInt16(196)&127..=UInt16(30)&127:(-108)|1)), namedParam2188 : UInt8(205), optionalParam2189 : ("\\.AXd(o;pm", (Int32(-95)&127..=var1444&127:(var4911|1)), '6', Option<Float64>.Some(62.0)))
    };
    Option<Option<Int64>>.None;
    match (try { // block id: 5152
            var252;
            var5155
        } finally { // block id: 5157
            var4648;
            Option<Range<UInt32>>.Some((UInt32(198)&127..=UInt32(20)&127:(-104)|1))
        }) {
        case caseVar5163 : Array<Unit> => 
            var5166;
            var var5226 : ?Int64 = ((Int32(57), true, Int8(UInt8(Int8(-32))), Float32(119.0)) as Int64);
            if (false) { [var727, Option<Int64>.None, var727, var727, var727, Option<Int64>.Some(var247), Option<Int64>.None, Option<Int64>.None, var727, var5226] } else { var255 } ;
            if (var3649) { Class58() } else { var3907 } 
        
        case _ => 
            var1776;
            var3907
        
    }
}

public func func1391(param1392 : Option<Range<UInt8>>) : Interface61 { // block id: 1393
    let var1431 : Range<UInt8> = (UInt8(125)&127..=UInt8(163)&127:110|1);
    let var1703 : Interface61 = Class58();
    func func1409(param1410 : (Range<Int32>, UInt16, Bool, Array<Array<Unit>>, Array<Unit>), param1411 : Int32, param1412 : (Interface62, Array<Array<Unit>>) -> Unit) : Bool { // block id: 1416
        var var1712 : Int16 = Int16(14);
        if ((var425, (UInt32(119)&127..=var1424&127:(var330|1)), var22, (Int16(-123)&127..=Int16(64)&127:(-34)|1), true, var1431, param1410, Int8(121), true)[4]) { // block id: 1437
            if (var951) { // block id: 1440
                var425 += var1444;
                var252
            };
            var1454[2];
            try { // block id: 1699
                if (false) { var1703 } else { var1703 } ;
                var951 || true
            } catch (e: Exception) { // block id: 1709
                var1712 **= (Int16(72) & 3);
                var1712 > Int16(-79)
            } finally { // block id: 1718
                Class58();
                var951
            }
        } else { // block id: 1721
            var252;
            (((51&127..=80&127:(-4)|1), var252) is Int8)
        }
    }
;
    let var1737 : Array<Array<Unit>> = [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]];
    let var1785 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    let var1842 : Unit = ();
    let var2112 : (Int8) -> Array<Unit> = func1861;
    let var2138 : Range<UInt32> = (UInt32(UInt16(222))&127..=UInt32(60)&127:(Int64(UInt64(UInt64(233)))|1));
    try { // block id: 1395
        Option<Interface61>.None.getOrThrow()
    } finally { // block id: 1402
        let var1752 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
        let var1856 : Float32 = Float32(Float32(-61.0));
        func func1404() : Range<UInt32> { // block id: 1405
            var252;
            if (func1409(if (false) { ((Int32(115)&127..=Int32(82)&127:(var330|1)), UInt16(18), var951, var1737, [(), (), (), (), (), (), (), (), (), ()]) } else { ((Int32(35)&127..=var1444&127:(var1745|1)), UInt16(205), true, [var1752, var1752, [(), (), (), (), (), (), (), (), (), ()], [(), (), var252, (), var252, (), var252, var252, (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), var252, var252, (), (), var1776, (), (), (), var1776], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], var1785], [(), (), (), (), var252, var252, var252, var252, var1776, ()]) } , Int32(Int32(-20)), func152)) { try { // block id: 1802
                if (true) { Option<Interface61>.Some(var1703) } else { var366 } ;
                var410 - var410;
                [(), (), (), var252, (), (), var1819, var1776, (), var1776]
            } catch (_) { // block id: 1824
                var1827 |= var1827;
                var1785
            } finally { // block id: 1831
                if (false) { var1785 } else { [(), var1776, var1819, (), var1819, var1842, var252, var1776, var1819, var1819] } 
            } } else { (if ((var425, var951, Int8(23), var1856)[1]) { (Int8(77)|>func1861) } else { (var22|>var2112) } ) } ;
            if ((var1454 is Option<Float64>)) { if (false) { [(UInt32(225)&127..UInt32(114)&127:(-29)|1), (UInt32(54)&127..UInt32(16)&127:(-93)|1), (UInt32(189)&127..=UInt32(239)&127:100|1), (UInt32(218)&127..=UInt32(227)&127:97|1), (UInt32(162)&127..UInt32(226)&127:25|1), (UInt32(126)&127..=UInt32(140)&127:16|1), (UInt32(207)&127..=UInt32(211)&127:25|1), (UInt32(210)&127..=UInt32(83)&127:(-26)|1), (UInt32(234)&127..=UInt32(168)&127:(-128)|1), (UInt32(95)&127..=UInt32(230)&127:(-45)|1)] } else { [(UInt32(180)&127..UInt32(98)&127:(-37)|1), (UInt32(6)&127..=UInt32(240)&127:(-95)|1), (UInt32(30)&127..UInt32(86)&127:91|1), (UInt32(209)&127..=UInt32(63)&127:11|1), (UInt32(75)&127..=UInt32(30)&127:(-125)|1), (UInt32(24)&127..=UInt32(130)&127:(-11)|1), (UInt32(19)&127..=UInt32(235)&127:81|1), (UInt32(186)&127..UInt32(171)&127:97|1), (UInt32(87)&127..=UInt32(194)&127:(-30)|1), (UInt32(35)&127..=UInt32(62)&127:(-67)|1)] } [1] } else { (Option<Range<UInt32>>.None ?? [(UInt32(88)&127..UInt32(240)&127:15|1), (UInt32(62)&127..=UInt32(207)&127:(-89)|1), (UInt32(65)&127..=UInt32(60)&127:(-10)|1), (UInt32(202)&127..UInt32(80)&127:(-101)|1), var2138, (UInt32(91)&127..UInt32(136)&127:(-16)|1), (UInt32(64)&127..UInt32(126)&127:5|1), (UInt32(238)&127..=UInt32(226)&127:(-10)|1), (UInt32(203)&127..UInt32(68)&127:(-118)|1), (UInt32(107)&127..UInt32(173)&127:((-109)|1))][7]) } 
        }
;
        func1404();
        func2156((UInt8(159)&127..=UInt8(163)&127:61|1), Option<Float64>.Some(var3147), namedParam2159 : ())
    }
}

public func func1375(param1376 : Int64) : Interface61 { // block id: 1377
    let var1386 : Interface65 = Class58();
    if (try { // block id: 1380
        param1376 != 88
    } finally { // block id: 1384
        var1386;
        ();
        var951
    }) { (Option<Range<UInt8>>.Some(var4395)|>func1391) } else { try { // block id: 5252
        ();
        var var5256 : Bool = true;
        if (var5256) { Option<(String, Range<Int32>, Rune, Option<Float64>)>.Some((var346, (var425&127..=var5080&127:(var247|1)), 'n', var4082)) } else { var4611 } ;
        Class58()
    } finally { // block id: 5269
        var434;
        if (false) { var3907 } else { var3907 } 
    } } 
}

public func func1114(param1115 : Interface64<Int32, Option<Range<UInt64>>>) : Interface61 { // block id: 1116
    match ((match (var429) {
            case _ => 
                if (true) { Option<Bool>.None } else { var1132 } ;
                var1135
            
            case 201 => 
                ();
                let var1151 : ?Array<Option<Int64>> = Option<Array<Option<Int64>>>.Some([Option<Int64>.None, (((), ((-41)&127..3&127:(-21)|1), (UInt64(47)&127..=UInt64(171)&127:69|1), Class58(), Float32(-70.0), ((UInt32(137)&127..=UInt32(5)&127:36|1), UInt16(113), "4!`[IgHhQY", (Int8(-9)&127..=Int8(-54)&127:((-38)|1)), (-6), """
C@n-R
ny1dB
""", (UInt16(101)&127..UInt16(125)&127:((-23)|1))), UInt64(1)) as Int64), Option<Int64>.Some(Int64(Int8(-40))), Option<Int64>.Some(Int64(UInt16(18))), Option<Int64>.Some(36), (Class58() as Int64), ((UInt32(20)&127..UInt32(80)&127:(-42)|1) as Int64), (UInt32(Int32(50)) as Int64), Option<Int64>.None, Option<Int64>.None]);
                if (var951) { var1135 } else { var1151 } 
            
            case 79 | 244 | 124 => 
                if (false) { var958 } else { var958 } ;
                var425 *= var425;
                if (false) { Option<Array<Option<Int64>>>.None } else { Option<Array<Option<Int64>>>.None } 
            
            case 47 | 127 | 109 | 167 => 
                var1135
            
            case _ => 
                ();
                Option<Array<Option<Int64>>>.None
            
        } ?? var1219[4])) {
        case _ : Option<Unit> => 
            if (false) { "> A,IH.DM[" } else { "U7o2GaU|<R" } ;
            var410;
            ()
        
        case _ => 
            var252
        
    };
    try { // block id: 1370
        var653 += 3.0;
        var4911|>func1375
    } finally { // block id: 5277
        var3907
    }
}

public func func149() : Array<Range<Int32>> { // block id: 150
    let var967 : (Range<Int32>, UInt16, Bool, Array<Array<Unit>>, Array<Unit>) = ((Int32(100)&127..Int32(48)&127:30|1), UInt16(Int16(-115)), true, [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], [(), (), (), (), (), (), (), (), (), ()]);
    func152(if (var951) { try { // block id: 954
        Class58()
    } finally { // block id: 956
        var958;
        let var976 : ?Range<UInt8> = ((Int32(Int32(Int16(-102))), (UInt32(147)&127..UInt32(175)&127:(-116)|1), Int8(-66), (Int16(54)&127..=Int16(-41)&127:(Int64(UInt8(181))|1)), ((((-29)&127..=(-66)&127:(-123)|1), ()) is Option<Unit>), (UInt8(77)&127..=UInt8(47)&127:(-47)|1), ((Int32(-81)&127..=Int32(-115)&127:(-124)|1), UInt16(11), true, [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], [(), (), (), (), (), (), (), (), (), ()]), Int8(UInt8(Int8(84))), (Class58() is Range<Int64>)) as Range<UInt8>);
        if (var951) { var801 } else { (var342, UInt8(158), var967, var976) } ;
        if (false) { Class58() } else { var1090 } 
    } } else { (if (true) { Class58() } else { var1090 } ) } , [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]]);
    var var5280 : (Interface64<Int32, Option<Range<UInt64>>>) -> Interface61 = func1114;
    func94((if (false) { var1106 } else { var1106 }  ?? if (false) { var727 } else { var727 } ), optionalParam96 : (match ((var1827&127..=var1827&127:(111|1))) {
        case _ => 
            if (var4648) { var5292 } else { var5292 } ;
            ((), var4375, (Int32(-105), var5320, var3172, (Int16(77)&127..=var1827&127:((-85)|1)), true, (UInt8(17)&127..UInt8(127)&127:(-4)|1), var4797, Int8(-58), var4648), var4375, (UInt8(138)&127..=UInt8(182)&127:82|1), (45&127..=12&127:69|1), var5340);
            var var5350 : Interface64<Int32, Option<Range<UInt64>>> = Class58();
            var5350
        
    }|>var5280), optionalParam98 : var5353);
    if (try { // block id: 5357
        if (var4465) { (Class58(namedParam3680 : var346), var3147, [(Int32(79)&127..=Int32(61)&127:38|1), (Int32(-18)&127..Int32(-11)&127:39|1), (Int32(-124)&127..Int32(15)&127:(-126)|1), (Int32(-6)&127..=Int32(123)&127:(-16)|1), (Int32(27)&127..Int32(124)&127:(-80)|1), (Int32(95)&127..Int32(-82)&127:(-24)|1), (Int32(120)&127..Int32(109)&127:(-66)|1), (Int32(-114)&127..Int32(27)&127:(-7)|1), (Int32(101)&127..=Int32(-84)&127:66|1), (Int32(-23)&127..=Int32(40)&127:27|1)]) } else { var3542 } ;
        true
    } catch (e: Exception) { // block id: 5367
        var4465 && false
    }) { match (try { // block id: 5373
            var5375;
            var252;
            Option<Option<Range<UInt8>>>.None
        } finally { // block id: 5379
            var3099
        }) {
        case _ : Range<UInt8> => 
            var252;
            [(Int32(-102)&127..=Int32(-85)&127:95|1), (Int32(39)&127..Int32(106)&127:60|1), (Int32(80)&127..Int32(-35)&127:(-13)|1), (Int32(123)&127..Int32(-110)&127:(-18)|1), (Int32(29)&127..Int32(-81)&127:70|1), (Int32(-93)&127..=Int32(126)&127:(-104)|1), (Int32(-90)&127..=Int32(6)&127:(-2)|1), (Int32(62)&127..Int32(-27)&127:(-117)|1), (Int32(26)&127..=Int32(98)&127:(-48)|1), (Int32(-43)&127..Int32(84)&127:(-4)|1)]
        
        case _ => 
            if (var4465) { var5166 } else { [(Int32(-98)&127..Int32(75)&127:33|1), (Int32(77)&127..Int32(61)&127:(-64)|1), (Int32(-115)&127..=Int32(3)&127:(-122)|1), (Int32(-40)&127..=Int32(-58)&127:58|1), (Int32(-21)&127..Int32(58)&127:58|1), (Int32(-68)&127..Int32(89)&127:8|1), (Int32(67)&127..=Int32(79)&127:(-95)|1), (Int32(58)&127..Int32(39)&127:(-78)|1), (Int32(-110)&127..Int32(-2)&127:(-80)|1), (Int32(111)&127..Int32(41)&127:75|1)] } 
        
        case _ => 
            var1827 >>= ((var1827) & 7);
            var425 <<= ((var1444) & 7);
            if (var4648) { var5166 } else { [(Int32(8)&127..Int32(-20)&127:32|1), (Int32(-25)&127..Int32(110)&127:123|1), var283, (var5080&127..=Int32(-49)&127:(75|1)), var283, (Int32(-5)&127..Int32(23)&127:(-82)|1), (Int32(12)&127..=var5080&127:(var330|1)), var283, (Int32(-49)&127..=Int32(-10)&127:(-91)|1), (Int32(51)&127..=Int32(120)&127:(-20)|1)] } 
        
        case _ => 
            if (true) { var1906 } else { var1906 } 
        
    } } else { var1906 } 
}

public func func138(param139 : Range<UInt64>, optionalParam140 ! : Interface63 = Class58(), optionalParam142 ! : UInt32 = UInt32(Int16(-72))) : Range<Int32> { // block id: 145
    func149()[0]
}




public func func125<T0, T1>(param126 : Range<Int32>, param127 : Int8, param128 : Int64, optionalParam129 ! : Interface66 = Class58((((59&127..=(-121)&127:34|1), ()) as Int64))) : Array<Unit> { // block id: 5495
    try { // block id: 5497
        (Option<Option<Unit>>.Some(Option<Unit>.None) ?? var746)
    } finally { // block id: 5502
        var746
    };
    var var5597 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    let var5622 : Int64 = 93;
    if (if (try { // block id: 5507
        var4375;
        var3619;
        Int8(117) > var4211
    } catch (e: Exception) { // block id: 5513
        ();
        Option<(String, Range<Int32>, Rune, Option<Float64>)>.None;
        var4648
    }) { // block id: 5517
        var5292;
        var var5520 : Bool = ((Int32(-77), true, Int8(119), Float32(12.0)) is UInt32);
        var5520
    } else if (try { // block id: 5528
        if (var3649) { Option<Option<Int64>>.Some(Option<Int64>.None) } else { var5534 } ;
        var4663;
        var4645
    } finally { // block id: 5538
        var1776;
        true
    }) { // block id: 5541
        let var5547 : Range<Int16> = (Int16(48)&127..Int16(UInt16(16))&127:((-13)|1));
        (var425, var5320, var3172, var5547, var4648, var4395, var4797, var4211, var4648);
        if (var951) { (var5562, var653, var5166) } else { var3542 } ;
        true
    } else { // block id: 5568
        var var5572 : Int8 = Int8(46);
        Int8(-104) != var5572
    }) { (if ((Class58() is (Rune) -> Float64)) { (Int32(91), (UInt32(244)&127..=UInt32(33)&127:(-125)|1), var5581, (Int16(107)&127..=Int16(51)&127:(-31)|1), var5586, (UInt8(248)&127..=UInt8(31)&127:70|1), ((Int32(-71)&127..=Int32(-80)&127:(-106)|1), UInt16(126), var5586, [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], var5597), Int8(46), true) } else { (Option<(Int32, Range<UInt32>, Int8, Range<Int16>, Bool, Range<UInt8>, (Range<Int32>, UInt16, Bool, Array<Array<Unit>>, Array<Unit>), Int8, Bool)>.Some((Int32(-98), var5610, var4211, (var1827&127..=Int16(26)&127:(var247|1)), var3649, (UInt8(64)&127..=var429&127:(var5622|1)), var4797, Int8(83), var5586)) ?? var5628) } ) } else { match ((Option<Option<Interface66>>.Some(Option<Interface66>.None) ?? var5677)) {
        case _ : Range<Int32> => 
            ();
            var252;
            var434
        
        case caseVar5688 => 
            var var5694 : Bool = true;
            if (var5586) { [var5694, var3898, true, true, var5586, var5586, true, false, var3649, true] } else { [var5694, var5708, true, var4645, var5708, var951, var3898, var5694, true, var951] } ;
            Option<Interface66>.None;
            var434
        
        case _ : Option<String> => 
            ();
            if (var4465) { var4895 } else { Option<Option<Option<Unit>>>.Some(var3619) } ;
            if (var4648) { (var1894, (UInt32(2)&127..var1424&127:(22|1)), Int8(104), (Int16(-52)&127..Int16(91)&127:(-108)|1), var5586, (var429&127..UInt8(185)&127:(var247|1)), var4797, Int8(11), true) } else { var5628 } 
        
        case _ => 
            var4927 **= (var306 & 3);
            var653 /= Float64((Int32(17.0)) | 1);
            var5628
        
    } } ;
    var loopTimeVar5800 : Range<UInt64> = (UInt64(109)&127..=UInt64(6)&127:(Int64(Int32(-99))|1));
    var loopTimeVar5822 : Int64 = 0;
    var loopTimeVar5826 : Range<UInt64> = (UInt64(Int16(-81))&127..UInt64(44)&127:(Int64(Int64(Int8(19)))|1));
    var loopTimeVar5837 : Range<UInt64> = (UInt64(UInt32(UInt32(16)))&127..UInt64(183)&127:(30|1));
    var loopTimeVar5848 : Int64 = 0;
    var loopTimeVar5857 : Int64 = 0;
    var loopTimeVar5972 : Range<UInt64> = (UInt64(228)&127..=UInt64(UInt8(Int8(52)))&127:(Int64(Int16(1))|1));
    if (if (((-33.0) is Option<Int64>)) { // block id: 5761
        false
    } else { // block id: 5763
        if (true) { var2317 } else { (53&127..var247&127:(var4911|1)) } ;
        true && false
    }) { ((Class58() as Array<Unit>) ?? try { // block id: 5782
        Class58(namedParam3680 : var346);
        ();
        [(), (), (), (), (), (), (), (), (), ()]
    } finally { // block id: 5787
        var429 = UInt8(254);
        [(), (), (), (), (), (), (), (), (), ()]
    }) } else { [for (i in loopTimeVar5800 where true) {
        var1776;
        var5798
    }, if (false) { // block id: 5808
        Option<Option<Int64>>.Some(var727);
        var252;
        var252
    }, while ((var951) && loopTimeVar5822 < 100 ) {
        loopTimeVar5822++;
        var4663;
        if (true) { var2751 } else { var2751 } 
    }, for (i in loopTimeVar5826 where false) {

    }, for (i in loopTimeVar5837 where var4648) {

    }, do {
        loopTimeVar5848++;

    } while ((var5586) && loopTimeVar5848 < 100 ) , do {
        loopTimeVar5857++;
        var429 ^= UInt8(169);
        var4375
    } while ((true) && loopTimeVar5857 < 100 ) , (var4927 &= var4927), try (resource = Class58()) { // block id: 5862
        var252;
        var5798;
        ()
    } finally { // block id: 5866
        Int8(8);
        var5869;
        var4663
    }, for (i in loopTimeVar5972 where false) {
        var1902;
        let var5891 : Array<Array<Unit>> = [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]];
        (var252, var5798, (Int32(46), (UInt32(215)&127..UInt32(115)&127:(-34)|1), var4211, var5869, false, var4454, ((Int32(-71)&127..Int32(70)&127:26|1), UInt16(19), false, var5891, [(), var5956, var5798, (), (), var1819, var252, var252, (), ()]), Int8(-88), false), var4375, var4395, var2317, var5340)
    }] } 
}

public func func118(param119 : UInt64) : Array<Unit> { // block id: 120
    [func125<Range<UInt64>, Option<String>>((Int32(-31)&127..Int32(-11)&127:67|1), var5581, 84), if (true) { [(), var4663, (), var5990, var5798, var1819, var1819, var5996, var4375, ()] } else { [(), (), (), (), (), (), (), (), (), ()] } , try { // block id: 6002
        var727;
        if (var4465) { var6007 } else { [(), var5798, var5798, (), (), (), var5956, (), (), var252] } 
    } finally { // block id: 6030
        [(), var4663, var5990, var252, (), var1776, (), (), (), var5996]
    }, [(), var1819, (), (), (), var1819, (), var252, (), var5996], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], match (var727) {
        case _ => 
            var410++;
            [(), (), (), var5956, var1776, (), (), var252, (), ()]
        
    }, var6007, try { // block id: 6074
        var5990;
        [(), (), (), (), (), (), (), (), (), ()]
    } catch (e: Exception) { // block id: 6077
        [(), var4375, var5798, var1776, (), var5798, var5990, (), var5996, ()]
    } finally { // block id: 6089
        [(), (), (), (), (), (), (), (), (), ()];
        var3619;
        [var252, var4375, var5990, var5990, var5996, var4663, (), (), (), var6103]
    }, (Option<Array<Unit>>.None ?? [(), (), (), (), (), (), (), (), (), ()])][3]
}

public func func104(param105 : UInt64) : Option<Int64> { // block id: 106
    let var6110 : (UInt64) -> Array<Unit> = func118;
    (var306|>var6110)[1];
    Option<Int64>.Some((match ((var1444, var3898, var4211, Float32(-10.0))) {
        case caseVar6124 => 
            ((), var2317, (UInt64(241)&127..=UInt64(29)&127:110|1), var3907, Float32(-57.0), var2896, UInt64(186));
            Option<Int64>.None
        
        case caseVar6137 : Interface62 => 
            (-122) | 112;
            Int16(116);
            if (var951) { var727 } else { Option<Int64>.None } 
        
        case _ => 
            Option<Int64>.None
        
    } ?? match {
        case false => 
        var6154
        case false => 
        -var1745
        case _ => 
        Option<(Int32, Range<UInt32>, Int8, Range<Int16>, Bool, Range<UInt8>, (Range<Int32>, UInt16, Bool, Array<Array<Unit>>, Array<Unit>), Int8, Bool)>.Some(var434);
        var6165 % ((var6165) | 1)
    }))
}

public func func44(param45 : Unit) : Unit { // block id: 46
    try (resource = Class58()) { // block id: 48
        (Option<Unit>.None ?? ())
    } finally { // block id: 56
        Class58.var69;
        let var73 : Bool = true;
        var var78 : Int16 = Int16(UInt8(Int8(UInt8(19))));
        var loopTimeVar86 : Int64 = 0;
        do {
            loopTimeVar86++;
            var78 ^= Int16(-98);
            param45
        } while ((var73) && loopTimeVar86 < 100 ) ;
        var loopTimeVar92 : Int64 = 0;
        do {
            loopTimeVar92++;
            Class58()
        } while ((false) && loopTimeVar92 < 100 ) 
    };
    func94((match ([(UInt32(235)&127..=UInt32(227)&127:(-6)|1), (UInt32(95)&127..=UInt32(150)&127:121|1), (UInt32(204)&127..=UInt32(43)&127:(-21)|1), (UInt32(17)&127..UInt32(130)&127:(-80)|1), (UInt32(161)&127..=UInt32(26)&127:(-60)|1), (UInt32(23)&127..UInt32(95)&127:67|1), (UInt32(49)&127..UInt32(165)&127:(-103)|1), (UInt32(7)&127..UInt32(180)&127:(-127)|1), (UInt32(114)&127..UInt32(220)&127:58|1), (UInt32(2)&127..=UInt32(21)&127:76|1)]) {
        case _ => 
            if (true) { var5353 } else { var5353 } ;
            var3172 <<= ((var22) & 7);
            var4927
        
    }|>func104))
}

public func func40(param41 : Int16) : Option<Int64> { // block id: 42
    var var6184 : (Unit) -> Unit = func44;
    var loopTimeVar6205 : Int64 = 0;
    do {
        loopTimeVar6205++;
        var6103;
        var5996
    } while ((([Option<Int64>.None, var727, Option<Int64>.None, var727, var727, Option<Int64>.Some(var6165), Option<Int64>.Some(var330), var727, Option<Int64>.None, var727] is (Range<UInt16>) -> Range<UInt8>)) && loopTimeVar6205 < 100 ) |>var6184;
    if (true) { // block id: 6208
        match (var4700) {
            case _ : Option<Option<(Range<Int32>, UInt16, Bool, Array<Array<Unit>>, Array<Unit>)>> => 
                ();
                var4663
            
            case _ => 
                var1776
            
            case _ => 
                var4663
            
        };
        var loopTimeVar6228 : Int64 = 0;
        while ((var5708) && loopTimeVar6228 < 100 ) {
            loopTimeVar6228++;
            (Int16(34)&127..Int16(110)&127:(-40)|1)
        }
    };
    let var6287 : ?Bool = ((((), (), (Int32(-57), (UInt32(226)&127..=UInt32(190)&127:(125|1)), Int8(75), (Int16(-17)&127..=Int16(-26)&127:(-110)|1), true, (UInt8(31)&127..UInt8(127)&127:((-115)|1)), ((Int32(-59)&127..=Int32(59)&127:14|1), UInt16(221), false, [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], [(), (), (), (), (), (), (), (), (), ()]), Int8(16), true), (), (UInt8(87)&127..=UInt8(7)&127:(-55)|1), ((-32)&127..=96&127:100|1), ((UInt32(252)&127..UInt32(103)&127:(-117)|1), UInt16(87), ";/'&c,bbRc", (Int8(92)&127..=Int8(-32)&127:(-100)|1), (-56), """
%Fz^=
Ve1LO
""", (UInt16(9)&127..=UInt16(100)&127:(-103)|1))) as UInt16) as Bool);
    var var6358 : (Int32, Bool, Int8, Float32) = (Int32(Int8(UInt8(120))), (((), ((-127)&127..24&127:120|1), (UInt64(17)&127..=UInt64(169)&127:((-23)|1)), Class58(namedParam3680 : """
G%;%1
\"s$4i
"""), Float32(-49.0), ((UInt32(99)&127..UInt32(228)&127:(1|1)), UInt16(211), """
I]%xH
:xaj_
""", (Int8(58)&127..=Int8(22)&127:43|1), 104, ":BW&X%a7W5", (UInt16(21)&127..=UInt16(164)&127:((-125)|1))), UInt64(17)) is (UInt64) -> Array<Unit>), Int8(Int8(Int8(Int8(-55)))), Float32(Float32(Float32(Float32(119.0)))));
    var var6405 : ?Int64 = ((((Int8(40) as Option<Interface66>) is Option<Bool>) as Bool) as Int64);
    if ((match ((Int8(-30)&127..Int8(20)&127:(-77)|1)) {
        case _ => 
            ();
            Option<Bool>.None
        
        case caseVar6240 => 
            Option<Bool>.Some(var6244)
        
        case _ : Range<Int64> => 
            if (false) { (var5990, var5956, (var1894, (UInt32(42)&127..UInt32(207)&127:(-70)|1), var6258, (Int16(77)&127..=Int16(-2)&127:102|1), var3649, (UInt8(154)&127..var429&127:(var6154|1)), var4797, var6258, var6244), (), (var429&127..var429&127:(70|1)), var2317, var2896) } else { var1454 } ;
            var429 <<= ((UInt8(254)) & 7);
            var4134
        
        case _ => 
            if (true) { var6287 } else { var1132 } 
        
    } ?? (var6328 ?? var3898))) { match ([(), (), (), (), (), (), (), (), (), ()]) {
        case caseVar6336 => 
            var2736 /= Float32((Int32(var2736)) | 1);
            Option<Int64>.None
        
        case caseVar6344 : Unit => 
            var410 &= var410;
            if (var4465) { Option<Int64>.Some(var330) } else { var727 } 
        
        case _ => 
            var6358;
            let var6401 : ?Int64 = ([(Int32(64)&127..Int32(104)&127:60|1), (Int32(44)&127..=Int32(-50)&127:(-78)|1), (Int32(-86)&127..=Int32(37)&127:(-47)|1), (Int32(79)&127..=Int32(-29)&127:(-46)|1), (Int32(60)&127..=Int32(5)&127:(-71)|1), (Int32(29)&127..=Int32(-35)&127:(-42)|1), (Int32(31)&127..Int32(11)&127:16|1), (Int32(-95)&127..Int32(-124)&127:(-24)|1), (Int32(-31)&127..Int32(-63)&127:(-4)|1), (Int32(-128)&127..=Int32(-39)&127:(-73)|1)] as Int64);
            if (true) { var6401 } else { var6405 } 
        
        case _ => 
            (var5320, UInt16(218), var346, (Int8(45)&127..=Int8(13)&127:(var247|1)), var330, var346, var2751);
            var6427--;
            Option<Int64>.Some((-60))
        
        case _ => 
            Option<Bool>.Some(false);
            var6405
        
    } } else { match (try { // block id: 6440
            var4602
        } finally { // block id: 6442
            Option<Interface61>.Some(Class58(optionalParam3678 : var5798, namedParam3680 : "\\E}wr@3Ev4"))
        }) {
        case _ : Option<Option<Interface66>> => 
            var4700;
            if (var6244) { var727 } else { Option<Int64>.None } 
        
        case _ => 
            var429++;
            var727
        
        case _ : Array<Option<Unit>> => 
            var5990;
            var4927;
            if (var6468) { Option<Int64>.Some((-11)) } else { var6474 } 
        
        case _ => 
            var727
        
    } } 
}

func func27(optionalParam28 ! : Float64 = 24.0, optionalParam30 ! : UInt16 = UInt16(186), namedParam32 ! : Rune) : Int64 { // block id: 33
    ((var1827|>func40) ?? try { // block id: 6552
        var1745
    } finally { // block id: 6554
        var247
    } / ((var4911) | 1))
}

main(): Int64 {
    try {
        let var9 : Int32 = Int32(UInt32(27));
        match (var9) {
            case _ => 
                "|<eo'mYMn ";
                Int8(125)
            
            case _ => 
                Int8(86)
            
        } * (var22 ** (Int8(91) & 3));
        func27(namedParam32 : var4691)
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var9*var9), 64)
        crccheck.updateBuffer(UInt64(var22*var22), 64)
        crccheck.updateBuffer(UInt64(var306*var306), 64)
        crccheck.updateBuffer(UInt64(var425*var425), 64)
        crccheck.updateBuffer(UInt64(var3172*var3172), 64)
        crccheck.updateBuffer(UInt64(var5080*var5080), 64)
        crccheck.updateBuffer(UInt64(var6258*var6258), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
