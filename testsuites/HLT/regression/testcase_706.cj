/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args

public let var_1727382926652_43: Int = Int64(102)
var var_1727382926652_49: (Class_1727382926652_8, UInt64, Class_1727382926652_8, Interface_1727382926652_13, Unit, 
    Float32) = (Class_1727382926652_8(), UInt64(245), Class_1727382926652_8(), Class_1727382926652_8(), (), Float32(Float32(95.0)))
public let var_1727382926652_70: Unit = ()
public let var_1727382926652_99: (String, (Class_1727382926652_8, UInt64, Class_1727382926652_8, 
    Interface_1727382926652_13, Unit, Float32), Float64, UInt8, Interface_1727382926652_15) = ("""
G&ZAp
|8#1f
""", (Class_1727382926652_8(),
        UInt64(Int16(Int8(-39))), Class_1727382926652_8(), Class_1727382926652_8(), (), Float32(-64.0)), Float64(Float32(Float32(71.0))),
    UInt8(Int8(-92)), Class_1727382926652_8())
public var var_1727382926652_123: Struct_1727382926652_119<Interface_1727382926652_14<Int64, String>, Int16> = Struct_1727382926652_119<Interface_1727382926652_14<Int64,
        String>, Int16>()
internal var var_1727382926652_130: Unit = ()
public const var_1727382926652_176: String = "7:7[9=q)v_"
const var_1727382926652_192: Float64 = -4.0
public const var_1727382926652_304: Rune = r'A'
internal let var_1727382926652_372: Unit = ()
public let var_1727382926652_425: Float32 = Float32(Float32(Float32(Float32(Float32(5.0)))))
internal var var_1727382926652_452: Option<Unit> = Option<Unit>.None
internal var var_1727382926652_469: UInt = UInt64(UInt8(127))
public var var_1727382926652_474: Byte = UInt8(28)
public let var_1727382926652_491: Int32 = Int32(Int32(Int16(UInt16(UInt8(146)))))
public const var_1727382926652_542: UInt16 = 15

public interface Interface_1727382926652_15 {}

public interface Interface_1727382926652_14<T0, T1> <: Interface_1727382926652_15 {}

public interface Interface_1727382926652_13 <: Interface_1727382926652_14<Int64, String> {}

public sealed interface Interface_1727382926652_12<T0, T1> <: Interface_1727382926652_13 {}

public sealed interface Interface_1727382926652_11<T0, T1, T2> <: Interface_1727382926652_12<Int64, UInt32> {}

public open class Class_1727382926652_8 <: Interface_1727382926652_11<UInt32, UInt16, Float64> & Resource {
    public init() { // block id: 10

    }

    public static let var_1727382926652_18: Int32 = Int32(-124);
    public static const var_1727382926652_484: Unit = ()
    public func isClosed(): Bool {
        return false
    }
    public func close(): Unit {}
}

public struct Struct_1727382926652_119<T0, T1> {
    public init() { // block id: 121

    }

    public let var_1727382926652_126: Unit = ()
}

public func func_1727382926652_133(optionalParam_1727382926652_134!: Bool = false,
    optionalParam_1727382926652_136!: Unit = (),
    namedParam_1727382926652_138!: Interface_1727382926652_14<Int64, String>,
    namedParam_1727382926652_139!: Interface_1727382926652_12<Int64, UInt32>): Unit { // block id: 140

}

public const func func_1727382926652_157<T0, T1, T2>(param_1727382926652_158: T1, param_1727382926652_159: Int8,
    optionalParam_1727382926652_160!: Rune = r'N'): Unit { // block id: 162
    const var_1727382926652_164: Unit = ();
    var_1727382926652_164;
    ()
}

internal const func func_1727382926652_295(param_1727382926652_296: Rune, param_1727382926652_297: Rune,
    namedParam_1727382926652_298!: UInt32, optionalParam_1727382926652_299!: Unit = ()): Unit { // block id: 301

}

const func func_1727382926652_153(param_1727382926652_154: Float32): Bool { // block id: 155
    const var_1727382926652_182: Int16 = 18;
    const var_1727382926652_185: Bool = false;
    const var_1727382926652_245: UInt32 = 147;
    const func func_1727382926652_230(param_1727382926652_231: Float64, namedParam_1727382926652_232!: Bool,
        namedParam_1727382926652_233!: Bool, namedParam_1727382926652_234!: UInt32): UInt32 { // block id: 235
        ();
        const var_1727382926652_241: Rune = r'e';
        func_1727382926652_157<Rune, String, Float64>(var_1727382926652_176, -94,
            optionalParam_1727382926652_160: var_1727382926652_241);
        var_1727382926652_245 + 178
    };

    const var_1727382926652_255: UInt16 = 150;
    const var_1727382926652_258: Rune = r'4';
    const func func_1727382926652_225<T0>(param_1727382926652_226: Int16, param_1727382926652_227: Float32): Rune { // block id: 228
        const var_1727382926652_250: Bool = true;
        func_1727382926652_230(var_1727382926652_192, namedParam_1727382926652_232: var_1727382926652_250,
            namedParam_1727382926652_233: false, namedParam_1727382926652_234: 217);
        var_1727382926652_255;
        var_1727382926652_258
    };

    const var_1727382926652_269: Int8 = -110;
    const func func_1727382926652_262(param_1727382926652_263: UInt8, param_1727382926652_264: Rune): Float32 { // block id: 265
        func_1727382926652_157<Rune, String, Float64>(var_1727382926652_176, var_1727382926652_269,
            optionalParam_1727382926652_160: var_1727382926652_258);
        ();
        31.0
    };

    const var_1727382926652_275: UInt8 = 246;
    const func func_1727382926652_292(): Float64 { // block id: 293
        func_1727382926652_295(var_1727382926652_258, var_1727382926652_304,
            namedParam_1727382926652_298: var_1727382926652_245, optionalParam_1727382926652_299: ());
        -112.0
    };

    const var_1727382926652_311: Int32 = -52;
    const func func_1727382926652_179(): String { // block id: 180
        var_1727382926652_182;
        var_1727382926652_185;
        const func func_1727382926652_199(param_1727382926652_200: Int32, param_1727382926652_201: Int32): String { // block id: 202
            16;
            const func func_1727382926652_217<T0, T1>(param_1727382926652_218: T0,
                optionalParam_1727382926652_219!: UInt8 = 97): String { // block id: 221
                var_1727382926652_176;
                "jNLc\"n|y6d"
            };

            const func func_1727382926652_205(param_1727382926652_206: Int64): String { // block id: 207
                const var_1727382926652_213: Unit = ();
                const func func_1727382926652_209<T0, T1>(): Unit { // block id: 210
                    ();
                    var_1727382926652_213;
                    ()
                };

                func_1727382926652_209<Bool, Int8>();
                const func func_1727382926652_285(): UInt8 { // block id: 286
                    237 | 53
                };

                const func func_1727382926652_279(param_1727382926652_280: Rune, param_1727382926652_281: Float64): UInt8 { // block id: 282
                    ();
                    func_1727382926652_285()
                };

                func_1727382926652_217<Rune, Float64>(
                    func_1727382926652_225<Bool>(var_1727382926652_182,
                        func_1727382926652_262(var_1727382926652_275, var_1727382926652_258)),
                    optionalParam_1727382926652_219: func_1727382926652_279(r'm', func_1727382926652_292()))
            };

            func_1727382926652_205(32)
        };

        if ((var_1727382926652_185 && (var_1727382926652_192 != 36.0))) {
            (if (false) {
                "IpKJjUoCp}"
            } else {
                func_1727382926652_199(var_1727382926652_311, var_1727382926652_311)
            })
        } else {
            var_1727382926652_176
        }
    };

    const func func_1727382926652_168(optionalParam_1727382926652_169!: Unit = (), namedParam_1727382926652_171!: UInt16): String { // block id: 172
        if (true) {
            var_1727382926652_176
        } else {
            func_1727382926652_179()
        }
    };

    func_1727382926652_157<Rune, String, Float64>(
        func_1727382926652_168(optionalParam_1727382926652_169: (), namedParam_1727382926652_171: var_1727382926652_255),
        var_1727382926652_269);
    !(var_1727382926652_269 != (var_1727382926652_269 >> ((var_1727382926652_269) & 7)))
}

public func func_1727382926652_148(param_1727382926652_149: Int32): Float32 { // block id: 150
    var var_1727382926652_325: (Float32) -> Bool = func_1727382926652_153;
    let var_1727382926652_358: Class_1727382926652_8 = Class_1727382926652_8();
    let var_1727382926652_361: UInt = UInt64(9);
    var loopTimeVar_1727382926652_381: Range<UInt64> = ((UInt64(UInt64(195)) & 127)..(UInt64(UInt64(53)) & 127) : (Int64(-47) |
        1));
    for (i in loopTimeVar_1727382926652_381 where ([Float32(46.0), Float32(88.0), Float32(-73.0), Float32(-123.0),
        Float32(118.0), Float32(-86.0), Float32(25.0), Float32(64.0), Float32(-48.0), Float32(-59.0)][6] |>
        var_1727382926652_325)) {
        try { // block id: 342
            let var_1727382926652_344: Range<Int8> = ((Int8(Int8(UInt8(137))) & 127)..=(Int8(Int8(Int8(Int8(Int8(-34))))) &
                127) : (Int64(UInt16(UInt16(1))) | 1));
            var_1727382926652_344
        } finally { // block id: 355
            let var_1727382926652_365: Interface_1727382926652_13 = Class_1727382926652_8();
            var var_1727382926652_369: Float32 = Float32(13.0);
            (var_1727382926652_358, var_1727382926652_361, Class_1727382926652_8(), var_1727382926652_365, (),
                var_1727382926652_369);
            var_1727382926652_372;
            var var_1727382926652_376: Int8 = Int8(Int8(-69));
            ((Int8(var_1727382926652_376) & 127)..(Int8(Int8(42)) & 127) : (var_1727382926652_43 | 1))
        }
    };
    var var_1727382926652_388: Bool = (UInt32(Int32(-11)) is UInt8);
    var var_1727382926652_410: Option<Option<Bool>> = (() as Option<Bool>);
    var var_1727382926652_416: Bool = false;
    let var_1727382926652_456: Int8 = Int8(UInt8(Int8(-64)));
    if (var_1727382926652_388) { // block id: 392
        match (Option<Unit>.None) {
            case _ => Float32(-87.0)
        }
    } else if (((var_1727382926652_410 ?? Option<Bool>.Some(false)) ?? var_1727382926652_416)) { // block id: 418
        let var_1727382926652_477: Byte = UInt8(155);
        match (Int64(66)) {
            case _ => var_1727382926652_425

            case caseVar_1727382926652_433: String =>
                ();
                -Float32(48.0)

            case _: Option<Bool> =>
                ();
                Int32(-45);
                Float32(17.0)

            case caseVar_1727382926652_446: Float32 =>
                var_1727382926652_372;
                (Class_1727382926652_8(), var_1727382926652_452, UInt8(168), var_1727382926652_456, UInt64(252), Int64(-77));
                -Float32(-96.0)

            case _ =>
                var_1727382926652_469++;
                var_1727382926652_474 ^= var_1727382926652_477
                var_1727382926652_425
        }
    } else { // block id: 480
        Class_1727382926652_8.var_1727382926652_484;
        Float32(64.0)
    }
}

main(): Int64 {
    try {
        var var_1727382926652_35: UInt8 = UInt8(UInt8(224));
        let var_1727382926652_39: Int8 = Int8(-62);
        try (resource = Class_1727382926652_8()) { // block id: 6
            Class_1727382926652_8.var_1727382926652_18;
            Option<Unit>.None.getOrThrow()
        } finally { // block id: 26
            let var_1727382926652_32: Option<Unit> = Option<Unit>.None;
            (Class_1727382926652_8(), var_1727382926652_32, var_1727382926652_35, var_1727382926652_39, UInt64(120),
                var_1727382926652_43)[4];
            var_1727382926652_49[4];
            const var_1727382926652_77: Float32 = 20.0;
            match (r'g') {
                case caseVar_1727382926652_63: Float64 => ()

                case r'f' | r'E' | r'b' => var_1727382926652_70

                case _ =>
                    var_1727382926652_77 + var_1727382926652_77;
                    var var_1727382926652_82: UInt = UInt64(UInt8(111));
                    var_1727382926652_82 <<= ((var_1727382926652_82) & 7)
            }
        };
        const var_1727382926652_142: Bool = false;
        try (resource = Class_1727382926652_8()) { // block id: 87
            (Option<Int8>.Some(Int8(-41)) ?? Int8(118));
            var_1727382926652_99[1];
            var_1727382926652_123.var_1727382926652_126
        } catch (_) { // block id: 128
            var_1727382926652_130;
            func_1727382926652_133(optionalParam_1727382926652_134: var_1727382926652_142,
                namedParam_1727382926652_138: Class_1727382926652_8(),
                namedParam_1727382926652_139: Class_1727382926652_8())
        } finally { // block id: 146
            let var_1727382926652_488: (Int32) -> Float32 = func_1727382926652_148;
            var_1727382926652_491 |> var_1727382926652_488;
            var var_1727382926652_501: Option<Int8> = (((Int32(Int32(-26)) & 127)..=(Int32(Int32(20)) & 127) : (Int64(-37) |
                1)) as Int8);
            var loopTimeVar_1727382926652_506: Int = 0;
            do {
                loopTimeVar_1727382926652_506++;
                var_1727382926652_501;
                Class_1727382926652_8()
            } while ((false) && loopTimeVar_1727382926652_506 < 100);
            ()
        };
        let var_1727382926652_536: Interface_1727382926652_13 = Class_1727382926652_8();
        try { // block id: 509
            (Option<Int64>.None ?? Int64(-73))
        } finally { // block id: 517
            [var_1727382926652_70, (), var_1727382926652_70, (), (), var_1727382926652_70, var_1727382926652_130, (), (),
                var_1727382926652_130][6];
            var loopTimeVar_1727382926652_539: Int = 0;
            while ((true) && loopTimeVar_1727382926652_539 < 100) {
                loopTimeVar_1727382926652_539++;
                var_1727382926652_536
            };
            Int64(var_1727382926652_542)
        }
        // CRC Check All Variables
        var crcCheck = CrcCheck(5000, 32)
        crcCheck.updateBuffer(UInt64(var_1727382926652_35 * var_1727382926652_35), 64)
        crcCheck.updateBuffer(UInt64(var_1727382926652_39 * var_1727382926652_39), 64)
        crcCheck.crcCheck()
        crcCheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) {
        println("Exception: NoneValueException")
    }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        buffer = Array<Int64>(buffer_n, {i => 0})
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, {i => 0})
        var byte_c = 1
        var byte_index = 0
        while (value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[(i + buffer_index) % buffer.size] = byteArray[i + byte_index]
            i++
        }
        buffer_index = (buffer_index + i) % buffer.size
    }

    func updateBuffer(input: Bool, byte_n: Int64): Unit {
        if (input == true) {
            updateBuffer(1, byte_n)
        } else {
            updateBuffer(0, byte_n)
        }
    }

    func updateBuffer(input: Rune, byte_n: Int64): Unit {
        updateBuffer(UInt64(UInt32(input)), byte_n)
    }

    func updateBuffer(input: String, byte_n: Int64): Unit {
        for (c in input) {
            updateBuffer(c, byte_n)
        }
    }

    func updateBuffer(input: Unit, byte_n: Int64): Unit {
        updateBuffer(input.toString(), byte_n)
    }

    func updateBuffer(input: Any, byte_n: Int64): Unit {
        if (input is Hashable) {
            match (input as Hashable) {
                case Some(v) => updateBuffer(UInt64(v.hashCode()), byte_n)
                case _ => updateBuffer(1, byte_n)
            }
        } else if (input is ToString) {
            match (input as ToString) {
                case Some(v) => updateBuffer(v.toString(), byte_n)
                case _ => updateBuffer(1, byte_n)
            }
        } else {
            updateBuffer(1, byte_n)
        }
    }
    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, {i => 0})
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2 ** 2 * crc_output[i] + 2 ** 1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}

extend<T0, T1> Struct_1727382926652_119<T0, T1> {}
