/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args

// All global variable need to be defined before use!
public var var_1673799276090_23 : Bool = (UInt16(182) is Int8)
var var_1673799276090_43 : Unit = ()
public var var_1673799276090_68 : UInt32 = UInt32(253)
public var var_1673799276090_86 : Int32 = Int32(Int8(-11))
public let var_1673799276090_99 : (Unit, String, Float64, UInt16) = ((), "^N=edJ'.n2", Float64(Float64(Float64(Float32(-55.0)))), UInt16(9))
public var var_1673799276090_139 : UInt16 = UInt16(Int16(-117))
var var_1673799276090_143 : UInt16 = UInt16(UInt8(38))
public var var_1673799276090_148 : Unit = ()
let var_1673799276090_165 : Int8 = Int8(100)
public let var_1673799276090_236 : Int32 = Int32(54)
public var var_1673799276090_242 : Int8 = Int8(-115)
public var var_1673799276090_259 : ?Unit = (((UInt16(87)&127)..(UInt16(UInt16(UInt16(134)))&127):(((-114)|1))) as Unit)
public let var_1673799276090_271 : Array<(Unit, String, Float64, UInt16)> = [((), "2!}9TI$0;p", Float64(Float32(Float32(61.0))), UInt16(UInt16(65))), ((), ###")7yNa{Rme_E"###, Float64(Float32(Float32(-69.0))), UInt16(99)), ((), """
T<nLp
I*,?B
""", Float64((-36.0)), UInt16(UInt8(107))), ((), """
@|F+F
a{ZVD-
""", Float64(76.0), UInt16(146)), ((), "<'#otBgj!y", Float64(Float64((-44.0))), UInt16(Int16(86))), ((), """
m3wI4
5Y;ke
""", (-11.0), UInt16(242)), ((), "c6a{o'v>w3f", Float64(Float64(21.0)), UInt16(98)), ((), "Y/aE7#c 2|", Float64(Float32(Float32(-15.0))), UInt16(Int16(51))), ((), """
\\`0K'
x*=Vt
""", Float64(Float32(-41.0)), UInt16(Int16(19))), ((), ###"3f[hex$,Wt"###, Float64((-114.0)), UInt16(UInt8(160)))]


public func func_1673799276090_12<T0, T1>(param_1673799276090_13 : Int32) : Unit { // block id: 14
    let var_1673799276090_29 : Option<Bool> = Option<Bool>.Some(true);
    var var_1673799276090_36 : UInt32 = UInt32(UInt16(53));
    var var_1673799276090_60 : UInt8 = UInt8(Int8(UInt8(Int8(Int8(-123)))));
    var loopTimeVar_1673799276090_80 : Int64 = 0;
    do {
        loopTimeVar_1673799276090_80++;
        let var_1673799276090_52 : UInt16 = UInt16(Int16(UInt8(Int8(UInt8(16)))));
        match (var_1673799276090_36) {
            case 254 | 100 | 120 | 94 => 
                var_1673799276090_43;
                var_1673799276090_36 >> ((var_1673799276090_36) & 7)
            
            case 151 | 77 => 
                var_1673799276090_52;
                var_1673799276090_60 >>= ((var_1673799276090_60) & 7);
                var_1673799276090_68
            
            case 89 | 194 => 
                break;
                UInt32(52)
            
            case _ => 
                Int8(-87);
                var_1673799276090_68
            
        }
    } while (((if (var_1673799276090_23) { Option<Bool>.Some(false) } else { var_1673799276090_29 }  ?? var_1673799276090_23)) && loopTimeVar_1673799276090_80 < 100 ) ;
    try { // block id: 82
        Int32(-77) >> ((var_1673799276090_86) & 7);
        var loopTimeVar_1673799276090_93 : Int64 = 0;
        do {
            loopTimeVar_1673799276090_93++;

        } while ((false) && loopTimeVar_1673799276090_93 < 100 ) ;
        ()
    } catch (_) { // block id: 95
        var_1673799276090_99[0];
        var loopTimeVar_1673799276090_114 : Int64 = 0;
        while ((false) && loopTimeVar_1673799276090_114 < 100 ) {
            loopTimeVar_1673799276090_114++;
            ()
        }
    };
    let var_1673799276090_171 : Int64 = Int64(UInt8(208));
    var loopTimeVar_1673799276090_176 : Int64 = 0;
    while (((Option<UInt32>.None ?? var_1673799276090_36) == match (Option<UInt32>.Some(UInt32(7))) {
        case caseVar_1673799276090_129 : Rune => 
            UInt32(183) >> ((UInt32(142)) & 7)
        
        case _ => 
            var_1673799276090_139 >>= ((var_1673799276090_143) & 7);
            let var_1673799276090_151 : String = ###"g^EE\"a{eBtH"###;
            (var_1673799276090_148, var_1673799276090_151, (-18.0), UInt16(245));
            var_1673799276090_68
        
        case _ => 
            UInt32(137)
        
    }) && loopTimeVar_1673799276090_176 < 100 ) {
        loopTimeVar_1673799276090_176++;
        (UInt32(80), var_1673799276090_165, (), "&=EpUhkD)C", UInt64(229), var_1673799276090_171)[2]
    }
}


public func func_1673799276090_8<T0>(param_1673799276090_9 : String) : Unit { // block id: 10
    var var_1673799276090_178 : (Int32) -> Unit = func_1673799276090_12<Range<Int64>, UInt16>;
    var var_1673799276090_200 : Array<Bool> = [(((UInt32(186)&127)..=(UInt32(59)&127):((-14)|1)) is UInt16), (((Int8(Int8(58))&127)..(Int8(Int8(44))&127):(((-90)|1))) is UInt64), true, ('h' is Range<UInt64>), (UInt32(UInt32(Int16(117))) is Range<UInt16>), ('h' is Range<Int8>), (UInt64(Int32(-92)) is Int64), ('H' is Range<UInt32>), true, true];
    var var_1673799276090_231 : UInt8 = UInt8(93);
    if (UInt32(88) <= var_1673799276090_68) { // block id: 184
        ();
        ();
        Int32(-19)
    } else if (var_1673799276090_200[4]) { // block id: 228
        var_1673799276090_231 |= UInt8(201);
        var_1673799276090_236 >> ((var_1673799276090_236) & 7)
    } else { // block id: 239
        var_1673799276090_242 += Int8(-8);
        ((), """
!r&$c
.yUnR
""", (-118.0), UInt16(41));
        Int32(-99) | var_1673799276090_236
    }|>var_1673799276090_178;
    (var_1673799276090_259 ?? var_1673799276090_271[8][0])
}

public func func_1673799276090_352<T0, T1>(param_1673799276090_353 : (String) -> Unit, param_1673799276090_356 : Int8, namedParam_1673799276090_357 ! : Int64, namedParam_1673799276090_358 ! : Range<UInt32>) : UInt32 { // block id: 359
    var_1673799276090_68
}

main(): Int64 {
    try {
        ["r-.Y`V~fj?", "k^Xs2u<?Y8", "W!|q_`uSI|", ###"5*e/c+e)a{M"###, """
hI\"Lm
b?.57
""", "'[=bDy)|~-", """
 BCRu
9O5?E
""", "$J9D2^L.18", ###"<5A.BivquZ"###, ###"2H:<J\"kWwF"###][8]|>func_1673799276090_8<Array<Bool>>;
        let var_1673799276090_364 : Int64 = 32;
        Int64(func_1673799276090_352<Int8, UInt16>(func_1673799276090_8<Array<Bool>>, Int8(-60), namedParam_1673799276090_357 : var_1673799276090_364, namedParam_1673799276090_358 : ((UInt32(56)&127)..(UInt32(97)&127):(48|1))))
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var_1673799276090_68*var_1673799276090_68), 64)
        crccheck.updateBuffer(UInt64(var_1673799276090_143*var_1673799276090_143), 64)
        crccheck.updateBuffer(UInt64(var_1673799276090_165*var_1673799276090_165), 64)
        crccheck.updateBuffer(UInt64(var_1673799276090_242*var_1673799276090_242), 64)
        crccheck.updateBuffer(UInt64(var_1673799276090_364*var_1673799276090_364), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
