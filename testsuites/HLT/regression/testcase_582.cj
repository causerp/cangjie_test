/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args 

public const var_1710060587481_36 : Unit = ()
public var var_1710060587481_43 : UInt16 = UInt16(252)
public var var_1710060587481_48 : Float32 = Float32(Float32(Float32(117.0)))
public var var_1710060587481_113 : UInt32 = UInt32(Int8(101))
public let var_1710060587481_125 : Option<Unit> = (UInt32(225) as Unit)
public var var_1710060587481_150 : Int16 = Int16(-33)
public let var_1710060587481_192 : Bool = (((Int32(Int32(Int8(Int8(-19))))&127)..=(Int32(Int32(-16))&127):(Int64(48)|1)) is (UInt16, Option<UInt32>, UInt8, Bool, Unit))
public var var_1710060587481_202 : Array<UInt64> = [UInt64(Int16(-40)), UInt64(233), UInt64(199), UInt64(71), UInt64(213), UInt64(185), UInt64(Int8(Int8(UInt8(240)))), UInt64(UInt64(UInt32(UInt16(135)))), UInt64(252), UInt64(Int8(Int8(26)))]
var var_1710060587481_225 : UInt32 = UInt32(Int8(Int8(58)))
public var var_1710060587481_239 : VArray<Unit, $6> = [(), (), (), (), (), ()]
public var var_1710060587481_252 : Option<UInt32> = Option<UInt32>.None
public var var_1710060587481_293 : Int32 = Int32(-85)
let var_1710060587481_301 : Range<Int64> = ((Int64(Int64(UInt32(68)))&127)..=(Int64(Int64(UInt16(Int8(UInt8(159)))))&127):(Int64(UInt8(220))|1))
public var var_1710060587481_336 : Enum_1710060587481_324 = Enum_1710060587481_324.enumValue_1710060587481_338(UInt64(45), Int8(64), ((UInt8(UInt8(131))&127)..=(UInt8(UInt8(239))&127):(Int64(104)|1)))
const var_1710060587481_358 : Unit = ()
var var_1710060587481_397 : Unit = ()
public var var_1710060587481_464 : Bool = (Int16(Int16(-73)) is UInt16)
var var_1710060587481_490 : Range<UInt8> = ((UInt8(UInt8(185))&127)..=(UInt8(UInt8(92))&127):(Int64(16)|1))
let var_1710060587481_531 : Range<UInt16> = ((UInt16(UInt16(97))&127)..(UInt16(UInt16(136))&127):(Int64(-14)|1))
public var var_1710060587481_538 : Struct_1710060587481_405 = Struct_1710060587481_405()
let var_1710060587481_563 : Int16 = Int16(Int16(UInt16(114)))
public var var_1710060587481_590 : Range<Int32> = ((Int32(Int32(UInt8(184)))&127)..(Int32(Int32(Int8(102)))&127):(Int64(93)|1))
var var_1710060587481_610 : (Int16, Int16, Unit, Struct_1710060587481_56) = (Int16(Int8(UInt8(Int8(73)))), Int16(7), (), Struct_1710060587481_56())
let var_1710060587481_674 : Struct_1710060587481_56 = Struct_1710060587481_56()
public var var_1710060587481_810 : Int16 = Int16(Int16(UInt8(UInt8(UInt8(139)))))
public var var_1710060587481_863 : Int8 = Int8(75)
public var var_1710060587481_902 : Unit = ()
public var var_1710060587481_921 : Range<Int16> = ((Int16(Int16(118))&127)..(Int16(Int16(-108))&127):(Int64(87)|1))
public var var_1710060587481_1072 : UInt8 = UInt8(239)
const var_1710060587481_1075 : Int64 = 108
public let var_1710060587481_1250 : Rune = r'e'
let var_1710060587481_1269 : ?(Range<UInt8>, Option<Option<Int32>>, Range<Int8>) = (VArray<Int64, $8>({ i => Int64(26)}) as (Range<UInt8>, Option<Option<Int32>>, Range<Int8>))
let var_1710060587481_1367 : Range<Int64> = ((Int64(Int64(UInt64(226)))&127)..=(Int64(Int64(Int16(73)))&127):(Int64(UInt8(UInt8(127)))|1))
public let var_1710060587481_1385 : (Range<UInt8>, Enum_1710060587481_324, Range<Int16>, Bool, Rune, Int8, Rune) = (((UInt8(UInt8(174))&127)..(UInt8(UInt8(UInt8(UInt8(69))))&127):(Int64(UInt32(30))|1)), Enum_1710060587481_324.enumValue_1710060587481_1395(((Int16(Int16(126))&127)..(Int16(Int16(-17))&127):(Int64(64)|1))), ((Int16(Int16(Int8(3)))&127)..(Int16(Int16(Int8(94)))&127):(Int64(UInt32(37))|1)), true, r'L', Int8(46), r'U')
public let var_1710060587481_1419 : (Range<UInt8>, Option<Option<Int32>>, Range<Int8>) = (((UInt8(UInt8(86))&127)..(UInt8(UInt8(188))&127):(Int64(50)|1)), Option<Option<Int32>>.None, ((Int8(Int8(-42))&127)..=(Int8(Int8(-128))&127):(Int64(UInt8(251))|1)))
public var var_1710060587481_1429 : Int = Int64(26)
var var_1710060587481_1444 : (VArray<Unit, $6>, (Range<UInt8>, Option<Option<Int32>>, Range<Int8>), Int64) = (VArray<Unit, $6>(repeat: ()), (((UInt8(UInt8(26))&127)..(UInt8(UInt8(125))&127):(Int64(-9)|1)), (VArray<Int64, $8>({ i => Int64(-93)}) as Option<Int32>), ((Int8(Int8(Int8(31)))&127)..(Int8(Int8(Int8(-128)))&127):(Int64(UInt32(123))|1))), Int64(-85))
public enum Enum_1710060587481_14 {
    defaultValue |
    enumValue_1710060587481_173
}

public struct Struct_1710060587481_56 {
    public init() { // block id: 58

    }
;
    public static const var_1710060587481_63 : Bool = false;
    private static var var_1710060587481_785 : ?Int32 = Option<Int32>.None;
    public init(param_1710060587481_762 : Range<Int64>) { // block id: 763
        const var_1710060587481_770 : Int = -25;
        var var_1710060587481_852 : Byte = UInt8(108);
        if (VArray<Int64, $8>(repeat: var_1710060587481_770)[3] == (var_1710060587481_770 | Int64(-13))) { // block id: 783
            var_1710060587481_785
        } else { // block id: 787
            var var_1710060587481_790 : Enum_1710060587481_324 = Enum_1710060587481_324.enumValue_1710060587481_338(UInt64(18), Int8(Int8(UInt8(41))), ((UInt8(UInt8(112))&127)..(UInt8(UInt8(229))&127):(Int64(-115)|1)));
            var var_1710060587481_823 : Float64 = Float64(Float64(Float32(38.0)));
            match (var_1710060587481_790) {
                case caseVar_1710060587481_799 : Range<UInt8> => 
                    UInt64(92);
                    ()
                
                case defaultValue => 
                    Int16(-114);
                    ();
                    var_1710060587481_810 |= var_1710060587481_810
                
                case caseVar_1710060587481_819 : Option<Int32> => 
                    var_1710060587481_823 /= Float64((Int32(var_1710060587481_823)) | 1);
                    var_1710060587481_397
                
                case defaultValue => 
                    Float32(-73.0);
                    var_1710060587481_358
                
                case _ => 
                    if (var_1710060587481_464) { ((Int16(Int16(31))&127)..(Int16(Int16(55))&127):(Int64(-125)|1)) } else { ((Int16(var_1710060587481_563)&127)..(Int16(Int16(48))&127):(Int64(56)|1)) } ;
                    var_1710060587481_358
                
            };
            ();
            try { // block id: 847
                var_1710060587481_785
            } catch (e: Exception) { // block id: 849
                ();
                var_1710060587481_852;
                Option<Int32>.Some(var_1710060587481_293)
            } finally { // block id: 856
                var_1710060587481_358;
                ();
                Option<Int32>.Some(Int32(22))
            }
        };
        let var_1710060587481_867 : Option<(Range<UInt8>, Enum_1710060587481_324, Range<Int16>, Bool, Rune, Int8, Rune)> = (Int64(Int64(UInt32(160))) as (Range<UInt8>, Enum_1710060587481_324, Range<Int16>, Bool, Rune, Int8, Rune));
        var_1710060587481_863 &= match (var_1710060587481_867) {
            case _ : Array<Unit> => 
                var_1710060587481_397;
                var_1710060587481_36;
                var_1710060587481_863
            
            case Some(_) => 
                var_1710060587481_852;
                Int8(-99)
            
            case _ => 
                Int8(-45)
            
        }
    }
;
    public let var_1710060587481_938 : Class_1710060587481_932 = Class_1710060587481_932();
    public var var_1710060587481_1066 : UInt64 = UInt64(207);
    func func_1710060587481_929() : Unit { // block id: 930
        var_1710060587481_938.func_1710060587481_941(Float64(Float64(61.0)), Enum_1710060587481_324.enumValue_1710060587481_338(var_1710060587481_1066, var_1710060587481_863, ((UInt8(UInt8(119))&127)..=(UInt8(var_1710060587481_1072)&127):(var_1710060587481_1075|1))), if (false) { var_1710060587481_336 } else { Enum_1710060587481_324.enumValue_1710060587481_338(var_1710060587481_1066, var_1710060587481_863, ((UInt8(var_1710060587481_1072)&127)..=(UInt8(var_1710060587481_1072)&127):(var_1710060587481_1075|1))) } , try { // block id: 1088
            var_1710060587481_397;
            var_1710060587481_397;
            var_1710060587481_1075
        } catch (e: Exception) { // block id: 1092
            var_1710060587481_1075
        } finally { // block id: 1094
            var_1710060587481_464 ||= false;
            ();
            var_1710060587481_1075 >> ((Int64(54)) & 7)
        });
        let var_1710060587481_1124 : Range<Int8> = ((Int8(Int8(31))&127)..=(Int8(Int8(-73))&127):(Int64(4)|1));
        var var_1710060587481_1148 : Range<Int8> = ((Int8(Int8(25))&127)..=(Int8(Int8(Int8(66)))&127):(Int64(-86)|1));
        ((Option<(Range<UInt8>, Option<Option<Int32>>, Range<Int8>)>.None ?? (((UInt8(var_1710060587481_1072)&127)..=(UInt8(UInt8(148))&127):(var_1710060587481_1075|1)), Option<Option<Int32>>.Some(Option<Int32>.Some(Int32(77))), var_1710060587481_1124))[1] ?? if (if (true) { // block id: 1130
            var var_1710060587481_1132 : VArray<Int64, $8> = [Int64(-44), Int64(-17), Int64(-28), Int64(-85), Int64(-112), Int64(-125), Int64(17), Int64(13)];
            var_1710060587481_1132;
            var_1710060587481_113;
            var_1710060587481_63
        } else if (false) { // block id: 1137
            ();
            var_1710060587481_464
        } else { // block id: 1140
            ();
            (var_1710060587481_490, Option<Option<Int32>>.Some(Option<Int32>.Some(Int32(52))), var_1710060587481_1148);
            var_1710060587481_63
        }) { // block id: 1155
            Int8(-116);
            let var_1710060587481_1158 : Float64 = Float64(-66.0);
            var_1710060587481_1158;
            if (false) { var_1710060587481_785 } else { Option<Int32>.Some(var_1710060587481_293) } 
        } else if (try { // block id: 1166
            Int16(98) == var_1710060587481_810
        } catch (_) { // block id: 1170
            ();
            !false
        }) { // block id: 1174
            if (true) { Option<Int32>.None } else { Option<Int32>.None } 
        } else { // block id: 1179
            Option<Int32>.None
        });
        try (resource = Class_1710060587481_932()) { // block id: 1182

        } finally { // block id: 1183
            try (resource = Class_1710060587481_932()) { // block id: 1185
                Int8(-101);
                ()
            } catch (_) { // block id: 1188
                ();
                var_1710060587481_902
            }
        }
    }

}


public const func func_1710060587481_130(optionalParam_1710060587481_131 ! : UInt8 = 76, namedParam_1710060587481_133 ! : Unit) : Bool { // block id: 134
    const var_1710060587481_136 : Bool = false;
    var_1710060587481_136
}

public func func_1710060587481_18(param_1710060587481_19 : String) : Bool { // block id: 20
    var var_1710060587481_30 : Bool = false;
    ((UInt32(22) as Unit) ?? (var_1710060587481_30 &&= if (true) { // block id: 34
        var_1710060587481_36;
        ();
        var_1710060587481_30
    } else { // block id: 40
        var_1710060587481_43 += UInt16(238);
        var_1710060587481_48 *= Float32(100.0);
        false
    }));
    let var_1710060587481_60 : Struct_1710060587481_56 = Struct_1710060587481_56();
    var var_1710060587481_94 : (UInt16, Option<UInt32>, UInt8, Bool, Unit) = (UInt16(Int16(Int16(-80))), Option<UInt32>.Some(UInt32(231)), UInt8(47), false, ());
    const var_1710060587481_117 : UInt8 = 120;
    if (Struct_1710060587481_56.var_1710060587481_63) { // block id: 65
        var var_1710060587481_72 : Option<UInt32> = (Int8(Int8(Int8(Int8(-67)))) as UInt32);
        (var_1710060587481_72 ?? UInt32(71));
        var_1710060587481_30
    } else if (try { // block id: 83
        var var_1710060587481_86 : Int16 = Int16(UInt8(UInt8(Int8(UInt8(210)))));
        var_1710060587481_86 *= var_1710060587481_86;
        var_1710060587481_94
    } finally { // block id: 104
        var_1710060587481_30;
        var_1710060587481_30 &&= false;
        (UInt16(46), Option<UInt32>.Some(var_1710060587481_113), var_1710060587481_117, false, ())
    }[3]) { // block id: 122
        (var_1710060587481_125 ?? ());
        func_1710060587481_130(namedParam_1710060587481_133 : ())
    } else { // block id: 139
        if (false) { // block id: 142
            Int64(96);
            var_1710060587481_36;
            var_1710060587481_36
        } else if (false) { // block id: 147

        };
        Int16(var_1710060587481_150);
        try { // block id: 153
            UInt32(249);
            true
        } catch (_) { // block id: 156
            true
        }
    }
}


public func func_1710060587481_7(namedParam_1710060587481_8 ! : Int32, optionalParam_1710060587481_9 ! : UInt64 = UInt64(Int16(-69))) : Unit { // block id: 12
    let var_1710060587481_175 : Enum_1710060587481_14 = Enum_1710060587481_14.enumValue_1710060587481_173;
    match (if (("""
p6=#v
$k<$'
"""|>func_1710060587481_18)) { [Enum_1710060587481_14.enumValue_1710060587481_173, var_1710060587481_175, Enum_1710060587481_14.enumValue_1710060587481_173, var_1710060587481_175, var_1710060587481_175, var_1710060587481_175, var_1710060587481_175, Enum_1710060587481_14.enumValue_1710060587481_173, Enum_1710060587481_14.enumValue_1710060587481_173, Enum_1710060587481_14.enumValue_1710060587481_173][1] } else { var_1710060587481_175 } ) {
        case _ => 
            if (var_1710060587481_192) { [UInt64(173), UInt64(178), UInt64(111), UInt64(106), UInt64(98), UInt64(118), UInt64(35), UInt64(131), UInt64(49), UInt64(195)] } else { var_1710060587481_202 } ;
            var_1710060587481_225 + var_1710060587481_225
        
    };
    (Option<VArray<Unit, $6>>.Some(var_1710060587481_239) ?? var_1710060587481_239)[0];
    let var_1710060587481_257 : Unit = ();
    let var_1710060587481_261 : Range<UInt8> = ((UInt8(UInt8(181))&127)..(UInt8(UInt8(80))&127):(Int64(-36)|1));
    const var_1710060587481_264 : Int32 = -107;
    var loopTimeVar_1710060587481_274 : Int = 0;
    while (((var_1710060587481_202, (UInt16(117), var_1710060587481_252, UInt8(165), false, var_1710060587481_257), var_1710060587481_252, var_1710060587481_261, var_1710060587481_264)[1][3]) && loopTimeVar_1710060587481_274 < 100 ) {
        loopTimeVar_1710060587481_274++;
        (Option<Unit>.Some(var_1710060587481_257) ?? ())
    }
}

public enum Enum_1710060587481_324 {
    defaultValue |
    enumValue_1710060587481_338(UInt64, Int8, Range<UInt8>) |
    enumValue_1710060587481_1395(Range<Int16>)
}
public struct Struct_1710060587481_405 {
    public init() { // block id: 407

    }
;
    private static prop var_1710060587481_691 : Option<Array<Struct_1710060587481_56>> { // block id: 692
        get() { // block id: 694
            [UInt64(35), UInt64(233), UInt64(199), UInt64(23), UInt64(141), UInt64(194), UInt64(89), UInt64(247), UInt64(211), UInt64(84)];
            Option<Array<Struct_1710060587481_56>>.None;
            (((Int8(Int8(UInt8(42)))&127)..=(Int8(Int8(-70))&127):(Int64(-123)|1)) as Array<Struct_1710060587481_56>)
        }

    };
    func func_1710060587481_570(namedParam_1710060587481_571 ! : Struct_1710060587481_56, namedParam_1710060587481_572 ! : (UInt8, Unit) -> Bool) : Array<Struct_1710060587481_56> { // block id: 576
        var loopTimeVar_1710060587481_629 : Array<UInt64> = [UInt64(160), UInt64(Int32(Int16(-86))), UInt64(241), UInt64(UInt32(45)), UInt64(UInt32(UInt16(UInt8(68)))), UInt64(Int16(UInt8(UInt8(219)))), UInt64(46), UInt64(104), UInt64(UInt64(254)), UInt64(Int64(UInt16(166)))];
        for (i in loopTimeVar_1710060587481_629 where match ((Option<Int32>.None ?? Int32(-127))) {
            case -108 => 
                var_1710060587481_590;
                var_1710060587481_36;
                UInt8(38) <= UInt8(112)
            
            case _ => 
                !var_1710060587481_464
            
        }) {
            var_1710060587481_610[2];
            let var_1710060587481_625 : Unit = ();
            var loopTimeVar_1710060587481_628 : Int64 = 0;
            while ((true) && loopTimeVar_1710060587481_628 < 100 ) {
                loopTimeVar_1710060587481_628++;
                var_1710060587481_358;
                var_1710060587481_625
            }
        };
        let var_1710060587481_706 : Array<Struct_1710060587481_56> = [Struct_1710060587481_56(), Struct_1710060587481_56(), Struct_1710060587481_56(), Struct_1710060587481_56(), Struct_1710060587481_56(), Struct_1710060587481_56(), Struct_1710060587481_56(), Struct_1710060587481_56(), Struct_1710060587481_56(), Struct_1710060587481_56()];
        let var_1710060587481_725 : ?Struct_1710060587481_56 = Option<Struct_1710060587481_56>.None;
        var var_1710060587481_893 : Unit = ();
        ((try { // block id: 664
            Option<Option<Array<Struct_1710060587481_56>>>.None
        } finally { // block id: 666
            !var_1710060587481_464;
            var_1710060587481_490;
            Option<Option<Array<Struct_1710060587481_56>>>.Some(Option<Array<Struct_1710060587481_56>>.Some([var_1710060587481_674, Struct_1710060587481_56(), var_1710060587481_674, var_1710060587481_674, Struct_1710060587481_56(), Struct_1710060587481_56(), Struct_1710060587481_56(), var_1710060587481_674, Struct_1710060587481_56(), var_1710060587481_674]))
        } ?? try { // block id: 686
            Option<Array<Struct_1710060587481_56>>.None
        } catch (_) { // block id: 688
            var_1710060587481_397;
            var_1710060587481_691
        }) ?? [var_1710060587481_706[1], (var_1710060587481_725 ?? Struct_1710060587481_56()), match (var_1710060587481_725) {
            case _ => 
                if (false) { var_1710060587481_674 } else { Struct_1710060587481_56() } ;
                ();
                if (var_1710060587481_464) { var_1710060587481_674 } else { Struct_1710060587481_56() } 
            
        }, var_1710060587481_674, if (var_1710060587481_464) { Struct_1710060587481_56() } else { Struct_1710060587481_56() } , if (var_1710060587481_464) { // block id: 749
            var_1710060587481_358;
            var_1710060587481_674
        } else { // block id: 752
            var_1710060587481_674
        }, try { // block id: 755
            var_1710060587481_674
        } finally { // block id: 757
            var_1710060587481_590;
            var_1710060587481_36;
            Struct_1710060587481_56(var_1710060587481_301)
        }, (var_1710060587481_810, var_1710060587481_563, var_1710060587481_893, Struct_1710060587481_56())[3], (var_1710060587481_563, Int16(94), var_1710060587481_902, var_1710060587481_674)[3], if (false) { var_1710060587481_674 } else { Struct_1710060587481_56() } ])
    }

}






func func_1710060587481_318() : Struct_1710060587481_56 { // block id: 401
    let var_1710060587481_521 : Option<(Range<UInt8>, Enum_1710060587481_324, Range<Int16>, Bool, Rune, Int8, Rune)> = (Int64(-116) as (Range<UInt8>, Enum_1710060587481_324, Range<Int16>, Bool, Rune, Int8, Rune));
    func func_1710060587481_409(param_1710060587481_410 : Int8, param_1710060587481_411 : (UInt8, Unit) -> Bool, namedParam_1710060587481_415 ! : Range<Int16>) : Struct_1710060587481_405 { // block id: 416
        let var_1710060587481_423 : (Unit, Range<Int16>, UInt16, VArray<Bool, $5>, Int8) = ((), ((Int16(Int16(UInt16(219)))&127)..=(Int16(Int16(-62))&127):(Int64(-54)|1)), UInt16(Int8(Int8(28))), VArray<Bool, $5>(repeat: true), Int8(Int8(-101)));
        var loopTimeVar_1710060587481_470 : Int64 = 0;
        while ((var_1710060587481_423[3][4]) && loopTimeVar_1710060587481_470 < 100 ) {
            loopTimeVar_1710060587481_470++;
            [(), (), (), (), (), (), (), (), (), ()][5];
            var_1710060587481_464 &&= var_1710060587481_464
        };
        var var_1710060587481_480 : Option<(Range<UInt8>, Enum_1710060587481_324, Range<Int16>, Bool, Rune, Int8, Rune)> = Option<(Range<UInt8>, Enum_1710060587481_324, Range<Int16>, Bool, Rune, Int8, Rune)>.None;
        var var_1710060587481_486 : UInt64 = UInt64(27);
        const var_1710060587481_494 : Int16 = -23;
        let var_1710060587481_500 : Rune = r'x';
        let var_1710060587481_511 : Option<(Range<UInt8>, Enum_1710060587481_324, Range<Int16>, Bool, Rune, Int8, Rune)> = ("D#deJE]YoO" as (Range<UInt8>, Enum_1710060587481_324, Range<Int16>, Bool, Rune, Int8, Rune));
        if ((var_1710060587481_480 ?? (((UInt8(UInt8(254))&127)..=(UInt8(UInt8(240))&127):(Int64(21)|1)), Enum_1710060587481_324.enumValue_1710060587481_338(var_1710060587481_486, Int8(49), var_1710060587481_490), ((Int16(var_1710060587481_494)&127)..(Int16(var_1710060587481_494)&127):(Int64(57)|1)), var_1710060587481_464, var_1710060587481_500, Int8(-100), r'j'))[3]) { match ([Option<(Range<UInt8>, Enum_1710060587481_324, Range<Int16>, Bool, Rune, Int8, Rune)>.None, var_1710060587481_511, var_1710060587481_511, var_1710060587481_480, var_1710060587481_480, var_1710060587481_480, var_1710060587481_511, var_1710060587481_511, var_1710060587481_521, var_1710060587481_511][4]) {
            case Some((_,_ : String,_ : VArray<Bool, $5>,caseVar_1710060587481_528,_ : Int16,_,_ : Unit)) => 
                var_1710060587481_531;
                Int32(-71);
                if (true) { Struct_1710060587481_405() } else { var_1710060587481_538 } 
            
            case None => 
                var_1710060587481_538
            
            case _ => 
                var_1710060587481_358;
                Struct_1710060587481_405()
            
        } } else { try { // block id: 550
            var_1710060587481_358;
            Struct_1710060587481_405()
        } finally { // block id: 553
            Struct_1710060587481_405()
        } } 
    }
;
    let var_1710060587481_556 : Int8 = Int8(-3);
    let var_1710060587481_559 : (UInt8, Unit) -> Bool = func_1710060587481_130;
    func_1710060587481_409(var_1710060587481_556, var_1710060587481_559, namedParam_1710060587481_415 : ((Int16(var_1710060587481_563)&127)..(Int16(var_1710060587481_563)&127):(Int64(71)|1))).func_1710060587481_570(namedParam_1710060587481_571 : var_1710060587481_674, namedParam_1710060587481_572 : var_1710060587481_559)[9]
}

public func func_1710060587481_318(namedParam_1710060587481_319 ! : Struct_1710060587481_56, namedParam_1710060587481_320 ! : Range<Int16>) : Struct_1710060587481_56 { // block id: 321
    var_1710060587481_36;
    const var_1710060587481_368 : Int32 = 94;
    match (try { // block id: 327
        ((Int16(Int16(-44))&127)..(Int16(Int16(24))&127):(Int64(106)|1));
        const var_1710060587481_333 : Int16 = -75;
        var_1710060587481_333;
        var_1710060587481_336
    } catch (e: Exception) { // block id: 345
        var_1710060587481_36;
        ();
        var_1710060587481_336
    }) {
        case defaultValue => 
            ()
        
        case enumValue_1710060587481_338(_ : UInt16, caseVar_1710060587481_355 : Int64, _ : UInt8) => 
            var_1710060587481_358
        
        case enumValue_1710060587481_338(_ : Bool, caseVar_1710060587481_362, caseVar_1710060587481_363 : String) => 
            var_1710060587481_293 << ((var_1710060587481_368) & 7);
            ((Int16(Int16(-13))&127)..=(Int16(Int16(-120))&127):(Int64(-88)|1));
            var_1710060587481_293 ^= Int32(-52)
        
        case caseVar_1710060587481_379 => 
            var var_1710060587481_383 : Int = Int64(UInt64(UInt16(UInt8(108))));
            var_1710060587481_383 = Int64(23);
            var_1710060587481_293 %= ((var_1710060587481_368) | 1);
            var_1710060587481_36
        
        case _ => 
            var_1710060587481_397
        
    };
    func_1710060587481_318()
}

sealed public interface Interface_1710060587481_935<T0, T1> {
    func func_1710060587481_941(param_1710060587481_942 : Float64, param_1710060587481_943 : Enum_1710060587481_324, param_1710060587481_944 : Enum_1710060587481_324, param_1710060587481_945 : Int64) : VArray<Int64, $8> 

}

sealed public interface Interface_1710060587481_936 {

}

public open class Class_1710060587481_932 <: Interface_1710060587481_935<Int16, Range<UInt16>> & Interface_1710060587481_936 & Resource {
    public init() { // block id: 934

    }
;
    static prop var_1710060587481_1000 : Option<Float32> { // block id: 1001
        get() { // block id: 1003
            UInt64(UInt8(Int8(UInt8(149))));
            (() as Float32)
        }

    };
    public open func func_1710060587481_941(param_1710060587481_942 : Float64, param_1710060587481_943 : Enum_1710060587481_324, param_1710060587481_944 : Enum_1710060587481_324, param_1710060587481_945 : Int64) : VArray<Int64, $8> { // block id: 946
        var var_1710060587481_954 : Option<Int16> = (((), ((Int16(Int16(-10))&127)..=(Int16(Int16(-9))&127):(Int64(60)|1)), UInt16(19), VArray<Bool, $5>({ i => true}), Int8(Int8(UInt8(237)))) as Int16);
        match ((var_1710060587481_954 ?? Int16(Int8(10)))) {
            case _ => 
                ()
            
        };
        match (((UInt16(UInt16(66))&127)..=(UInt16(UInt16(87))&127):(Int64(-5)|1))) {
            case _ : Range<Int16> => 
                Float32(-5.0) / Float32((Int32(Float32(13.0))) | 1)
            
            case _ => 
                ();
                var_1710060587481_464 &&= var_1710060587481_464;
                Float32(-71.0)
            
        };
        var var_1710060587481_1015 : Unit = ();
        var var_1710060587481_1020 : Int = Int64(UInt8(252));
        var var_1710060587481_1059 : VArray<Int64, $8> = [Int64(50), Int64(-4), Int64(-37), Int64(-77), Int64(14), Int64(18), Int64(107), Int64(117)];
        match (Float32((var_1710060587481_1000 ?? Float32(112.0)))) {
            case _ : Float32 => 
                var_1710060587481_1015;
                VArray<Int64, $8>(repeat: Int64(-95))
            
            case -107.0 => 
                const var_1710060587481_1033 : Rune = r'U';
                var_1710060587481_1033;
                var_1710060587481_902;
                var var_1710060587481_1037 : VArray<Int64, $8> = [Int64(UInt32(254)), Int64(-79), Int64(-109), Int64(20), Int64(-83), Int64(-66), Int64(Int32(Int32(UInt32(236)))), Int64(Int64(Int32(105)))];
                var_1710060587481_1037
            
            case _ => 
                if (var_1710060587481_464) { var_1710060587481_1059 } else { var_1710060587481_1059 } 
            
        }
    }

    static init() {
    }
    public func isClosed(): Bool { return false }
    public func close(): Unit {}
}





func func_1710060587481_314() : Range<Int16> { // block id: 315
    func_1710060587481_318(namedParam_1710060587481_319 : var_1710060587481_674, namedParam_1710060587481_320 : try { // block id: 915
        ();
        if (false) { ((Int16(Int16(-72))&127)..(Int16(Int16(34))&127):(Int64(-123)|1)) } else { var_1710060587481_921 } 
    } finally { // block id: 923
        var_1710060587481_43 ^= UInt16(53);
        ((Int16(Int16(-44))&127)..=(Int16(Int16(-8))&127):(Int64(6)|1))
    }).func_1710060587481_929();
    ((Int16(Int16(-80))&127)..(Int16(try { // block id: 1194
        true;
        Int16(126)
    } finally { // block id: 1197
        ();
        ();
        var_1710060587481_563
    })&127):((Int64(-44), var_1710060587481_590, var_1710060587481_336)[0]|1))
}

public func func_1710060587481_297(param_1710060587481_298 : Unit) : UInt64 { // block id: 299
    var_1710060587481_301;
    if ((func_1710060587481_314() is Unit)) { // block id: 1208
        r'B'
    } else { // block id: 1210
        if (true) { // block id: 1213
            var_1710060587481_563
        } else { // block id: 1215
            var_1710060587481_810
        };
        var loopTimeVar_1710060587481_1220 : Array<UInt64> = [UInt64(11), UInt64(UInt8(UInt8(UInt8(155)))), UInt64(200), UInt64(UInt16(Int16(Int16(-85)))), UInt64(Int32(-9)), UInt64(Int16(UInt8(UInt8(232)))), UInt64(UInt8(UInt8(UInt8(190)))), UInt64(176), UInt64(Int32(UInt8(UInt8(194)))), UInt64(Int8(-123))];
        for (i in loopTimeVar_1710060587481_1220 where var_1710060587481_464) {

        };
        var_1710060587481_1250
    };
    if (false) { // block id: 1254
        Int32(-119) | Int32(57);
        var loopTimeVar_1710060587481_1263 : Int = 0;
        while ((var_1710060587481_464) && loopTimeVar_1710060587481_1263 < 100 ) {
            loopTimeVar_1710060587481_1263++;
            var_1710060587481_36
        };
        UInt64(Int32(53))
    } else if (((var_1710060587481_1269 as (Range<UInt8>, Enum_1710060587481_324, Range<Int16>, Bool, Rune, Int8, Rune)) is Struct_1710060587481_405)) { // block id: 1286
        UInt64(87) >> ((UInt64(100)) & 7)
    } else { // block id: 1290
        try { // block id: 1292
            (((UInt8(UInt8(185))&127)..(UInt8(UInt8(57))&127):(Int64(40)|1)), Option<Option<Int32>>.None, ((Int8(Int8(-35))&127)..=(Int8(Int8(-9))&127):(Int64(-72)|1)));
            var_1710060587481_43 ^= UInt16(80);
            ((UInt64(UInt64(209))&127)..(UInt64(UInt64(243))&127):(Int64(27)|1))
        } catch (e: Exception) { // block id: 1301
            var_1710060587481_863 -= Int8(43);
            if (false) { ((UInt16(UInt16(252))&127)..=(UInt16(UInt16(215))&127):(Int64(-63)|1)) } else { ((UInt16(UInt16(117))&127)..(UInt16(UInt16(150))&127):(Int64(-23)|1)) } ;
            ((UInt64(UInt64(104))&127)..(UInt64(UInt64(128))&127):(Int64(-109)|1))
        };
        UInt64(UInt64(211))
    }
}



main(): Int64 {
    try {
        func_1710060587481_7(namedParam_1710060587481_8 : try { // block id: 276
            var var_1710060587481_279 : UInt16 = UInt16(241);
            const var_1710060587481_282 : UInt16 = 249;
            var_1710060587481_279 &= var_1710060587481_282;
            var var_1710060587481_286 : Bool = true;
            var_1710060587481_286 &&= true;
            Int32(-21)
        } finally { // block id: 290
            var_1710060587481_293 + Int32(113)
        }, optionalParam_1710060587481_9 : (()|>func_1710060587481_297));
        var var_1710060587481_1341 : Option<Float32> = Option<Float32>.None;
        let var_1710060587481_1359 : ?Option<Float32> = Option<Option<Float32>>.Some(Option<Float32>.Some(Float32(41.0)));
        (if (var_1710060587481_192) { if (false) { // block id: 1323
            let var_1710060587481_1327 : Option<Option<Int32>> = (VArray<Bool, $5>(repeat: (Option<Struct_1710060587481_56>.Some(Struct_1710060587481_56(((Int64(Int64(-64))&127)..=(Int64(Int64(63))&127):(Int64(-120)|1)))) is Array<UInt64>)) as Option<Int32>);
            (((UInt8(UInt8(190))&127)..=(UInt8(UInt8(100))&127):(Int64(-41)|1)), var_1710060587481_1327, ((Int8(Int8(-65))&127)..=(Int8(Int8(93))&127):(Int64(17)|1)));
            var_1710060587481_902;
            var_1710060587481_1341
        } else if (false) { // block id: 1344
            var_1710060587481_1341
        } else { // block id: 1346
            Option<Unit>.None;
            ();
            if (false) { Option<Float32>.None } else { var_1710060587481_1341 } 
        } } else { (var_1710060587481_1359 ?? var_1710060587481_1341) }  ?? match (Struct_1710060587481_56(var_1710060587481_1367)) {
            case _ => 
                var_1710060587481_902;
                Float32(27.0)
            
            case _ => 
                var_1710060587481_1385;
                var_1710060587481_239;
                -Float32(-51.0)
            
        });
        try { // block id: 1415
            (var_1710060587481_239, var_1710060587481_1419, var_1710060587481_1429)
        } finally { // block id: 1431
            Enum_1710060587481_324.enumValue_1710060587481_1395(((Int16(Int16(-109))&127)..=(Int16(var_1710060587481_810)&127):(Int64(-74)|1)));
            (UInt16(24), var_1710060587481_252, UInt8(250), false, var_1710060587481_902);
            var_1710060587481_1444
        }[2]
        // CRC Check All Variables
        var crcCheck = CrcCheck(5000, 32)
        crcCheck.crcCheck()
        crcCheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[(i + buffer_index) % buffer.size] = byteArray[i + byte_index]
            i++
        }
        buffer_index = (buffer_index + i) % buffer.size
    }

    func updateBuffer(input: Bool, byte_n: Int64): Unit {
        if (input == true) {
            updateBuffer(1, byte_n)
        } else {
            updateBuffer(0, byte_n)
        }
    }

    func updateBuffer(input: Rune, byte_n: Int64): Unit {
        updateBuffer(UInt64(UInt32(input)), byte_n)
    }

    func updateBuffer(input: String, byte_n: Int64): Unit {
        for (c in input) {
            updateBuffer(c, byte_n)
        }
    }

    func updateBuffer(input: Unit, byte_n: Int64): Unit {
        updateBuffer(input.toString(), byte_n)
    }

    func updateBuffer(input: Any, byte_n: Int64) : Unit {
        if (input is Hashable) {
            match(input as Hashable) {
                case Some(v) => updateBuffer(UInt64(v.hashCode()), byte_n)
                case _=> updateBuffer(1, byte_n)
            }
            
        } else if (input is ToString) {
            match(input as ToString) {
                case Some(v) => updateBuffer(v.toString(), byte_n)
                case _=> updateBuffer(1, byte_n)
            }
        } else {
            updateBuffer(1, byte_n)
        }
    }     
    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}

