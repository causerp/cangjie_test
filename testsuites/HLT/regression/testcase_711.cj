/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args

public const var_1730821291270_33: Bool = true
const var_1730821291270_49: Int16 = -20
public const var_1730821291270_52: Unit = ()
public const var_1730821291270_56: UInt32 = 196
@Deprecated
internal var var_1730821291270_63: UInt32 = UInt32(133)
var var_1730821291270_74: UInt64 = UInt64(215)
public var var_1730821291270_105: UInt16 = UInt16(159)
@Deprecated
public var var_1730821291270_183: Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
public var var_1730821291270_209: Class_1730821291270_202 = Class_1730821291270_202()
let var_1730821291270_219: Range<Int8> = ((Int8(Int8(Int8(UInt8(Int8(45))))) & 127)..(Int8(Int8(UInt8(24))) & 127) : (Int64(Int16(-13)) |
    1))
@Deprecated
let var_1730821291270_290: Array<UInt64> = [UInt64(80), UInt64(161), UInt64(89), UInt64(109), UInt64(204), UInt64(112),
    UInt64(253), UInt64(76), UInt64(174), UInt64(130)]
internal var var_1730821291270_305: Enum_1730821291270_302 = Enum_1730821291270_302.enumValue_1730821291270_307
@Deprecated
public let var_1730821291270_351: Rune = r'Y'
public let var_1730821291270_374: Struct_1730821291270_125 = Struct_1730821291270_125()
@Deprecated
public let var_1730821291270_386: Range<Int16> = ((Int16(Int16(-128)) & 127)..=(Int16(Int16(UInt16(Int8(UInt8(80))))) &
    127) : (Int64(UInt32(UInt8(UInt8(249)))) | 1))
public var var_1730821291270_502: Enum_1730821291270_302 = Enum_1730821291270_302.enumValue_1730821291270_307
@Deprecated
public const var_1730821291270_550: Bool = false
@Deprecated
public const var_1730821291270_559: Unit = ()
public const var_1730821291270_601: Int = -117

public interface Interface_1730821291270_17 {}

public interface Interface_1730821291270_16 <: Interface_1730821291270_17 {
    @Frozen
    func func_1730821291270_212(param_1730821291270_213: Bool, namedParam_1730821291270_214!: Range<Int16>,
        namedParam_1730821291270_215!: Range<UInt64>): Unit { // block id: 216
        match (var_1730821291270_219) {
            case _ =>
                var var_1730821291270_234: Bool = true;
                var_1730821291270_234 ||= var_1730821291270_234
                ();
                var var_1730821291270_240: Int32 = Int32(Int8(Int8(-61)));
                var_1730821291270_240 -= Int32(-58)
        };
        var var_1730821291270_251: (Rune, UInt16, Range<UInt32>, Array<Bool>) = (r'S', UInt16(Int8(-60)), ((UInt32(UInt32(112)) &
                127)..(UInt32(UInt32(14)) & 127) : (Int64(47) | 1)), [(((Int32(Int32(-75)) & 127)..(Int32(Int32(25)) &
                127) : (Int64(-112) | 1)) is Array<UInt64>), true, false,
                (((UInt16(UInt16(15)) & 127)..(UInt16(UInt16(69)) & 127) : (Int64(94) | 1)) is UInt64),
                (UInt8(165) is Float32), false,
                (((UInt16(UInt16(239)) & 127)..(UInt16(UInt16(13)) & 127) : (Int64(-44) | 1)) is Int64), false,
                ([(), (), (), (), (), (), (), (), (), ()] is Unit), false]);
        var var_1730821291270_320: UInt = UInt64(Int8(Int8(104)));
        try { // block id: 246
            var_1730821291270_52;
            var_1730821291270_251[3];
            var loopTimeVar_1730821291270_293: Range<UInt64> = ((UInt64(UInt64(230)) & 127)..(UInt64(UInt64(129)) & 127) : (Int64(UInt16(UInt16(189))) |
                1));
            for (i in loopTimeVar_1730821291270_293 where true) {
                if (var_1730821291270_33) {
                    var_1730821291270_290
                } else {
                    var_1730821291270_290
                }
            }
        } catch (_) { // block id: 300
            match (var_1730821291270_305) {
                case _ =>
                    var var_1730821291270_313: Int8 = Int8(UInt8(22));
                    var_1730821291270_313 |= var_1730821291270_313
                    ((UInt64(UInt64(136)) & 127)..=(UInt64(var_1730821291270_320) & 127) : (Int64(119) | 1))
            };
            ()
        }
    }
}

public interface Interface_1730821291270_15 <: Interface_1730821291270_16 & Interface_1730821291270_17 {
    func func_1730821291270_212(param_1730821291270_213: Bool, namedParam_1730821291270_214!: Range<Int16>,
        namedParam_1730821291270_215!: Range<UInt64>): Unit { // block id: 216
        match (var_1730821291270_219) {
            case _ =>
                var var_1730821291270_234: Bool = true;
                var_1730821291270_234 ||= var_1730821291270_234
                ();
                var var_1730821291270_240: Int32 = Int32(Int8(Int8(-61)));
                var_1730821291270_240 -= Int32(-58)
        };
        var var_1730821291270_251: (Rune, UInt16, Range<UInt32>, Array<Bool>) = (r'S', UInt16(Int8(-60)), ((UInt32(UInt32(112)) &
                127)..(UInt32(UInt32(14)) & 127) : (Int64(47) | 1)), [(((Int32(Int32(-75)) & 127)..(Int32(Int32(25)) &
                127) : (Int64(-112) | 1)) is Array<UInt64>), true, false,
                (((UInt16(UInt16(15)) & 127)..(UInt16(UInt16(69)) & 127) : (Int64(94) | 1)) is UInt64),
                (UInt8(165) is Float32), false,
                (((UInt16(UInt16(239)) & 127)..(UInt16(UInt16(13)) & 127) : (Int64(-44) | 1)) is Int64), false,
                ([(), (), (), (), (), (), (), (), (), ()] is Unit), false]);
        var var_1730821291270_320: UInt = UInt64(Int8(Int8(104)));
        try { // block id: 246
            var_1730821291270_52;
            var_1730821291270_251[3];
            var loopTimeVar_1730821291270_293: Range<UInt64> = ((UInt64(UInt64(230)) & 127)..(UInt64(UInt64(129)) & 127) : (Int64(UInt16(UInt16(189))) |
                1));
            for (i in loopTimeVar_1730821291270_293 where true) {
                if (var_1730821291270_33) {
                    var_1730821291270_290
                } else {
                    var_1730821291270_290
                }
            }
        } catch (_) { // block id: 300
            match (var_1730821291270_305) {
                case _ =>
                    var var_1730821291270_313: Int8 = Int8(UInt8(22));
                    var_1730821291270_313 |= var_1730821291270_313
                    ((UInt64(UInt64(136)) & 127)..=(UInt64(var_1730821291270_320) & 127) : (Int64(119) | 1))
            };
            ()
        }
    }
}

public sealed interface Interface_1730821291270_14 <: Interface_1730821291270_15 & Interface_1730821291270_16 {
    func func_1730821291270_212(param_1730821291270_213: Bool, namedParam_1730821291270_214!: Range<Int16>,
        namedParam_1730821291270_215!: Range<UInt64>): Unit { // block id: 216
        match (var_1730821291270_219) {
            case _ =>
                var var_1730821291270_234: Bool = true;
                var_1730821291270_234 ||= var_1730821291270_234
                ();
                var var_1730821291270_240: Int32 = Int32(Int8(Int8(-61)));
                var_1730821291270_240 -= Int32(-58)
        };
        var var_1730821291270_251: (Rune, UInt16, Range<UInt32>, Array<Bool>) = (r'S', UInt16(Int8(-60)), ((UInt32(UInt32(112)) &
                127)..(UInt32(UInt32(14)) & 127) : (Int64(47) | 1)), [(((Int32(Int32(-75)) & 127)..(Int32(Int32(25)) &
                127) : (Int64(-112) | 1)) is Array<UInt64>), true, false,
                (((UInt16(UInt16(15)) & 127)..(UInt16(UInt16(69)) & 127) : (Int64(94) | 1)) is UInt64),
                (UInt8(165) is Float32), false,
                (((UInt16(UInt16(239)) & 127)..(UInt16(UInt16(13)) & 127) : (Int64(-44) | 1)) is Int64), false,
                ([(), (), (), (), (), (), (), (), (), ()] is Unit), false]);
        var var_1730821291270_320: UInt = UInt64(Int8(Int8(104)));
        try { // block id: 246
            var_1730821291270_52;
            var_1730821291270_251[3];
            var loopTimeVar_1730821291270_293: Range<UInt64> = ((UInt64(UInt64(230)) & 127)..(UInt64(UInt64(129)) & 127) : (Int64(UInt16(UInt16(189))) |
                1));
            for (i in loopTimeVar_1730821291270_293 where true) {
                if (var_1730821291270_33) {
                    var_1730821291270_290
                } else {
                    var_1730821291270_290
                }
            }
        } catch (_) { // block id: 300
            match (var_1730821291270_305) {
                case _ =>
                    var var_1730821291270_313: Int8 = Int8(UInt8(22));
                    var_1730821291270_313 |= var_1730821291270_313
                    ((UInt64(UInt64(136)) & 127)..=(UInt64(var_1730821291270_320) & 127) : (Int64(119) | 1))
            };
            ()
        }
    }
}

public sealed interface Interface_1730821291270_13 <: Interface_1730821291270_14 & Interface_1730821291270_15 {
    func func_1730821291270_212(param_1730821291270_213: Bool, namedParam_1730821291270_214!: Range<Int16>,
        namedParam_1730821291270_215!: Range<UInt64>): Unit { // block id: 216
        match (var_1730821291270_219) {
            case _ =>
                var var_1730821291270_234: Bool = true;
                var_1730821291270_234 ||= var_1730821291270_234
                ();
                var var_1730821291270_240: Int32 = Int32(Int8(Int8(-61)));
                var_1730821291270_240 -= Int32(-58)
        };
        var var_1730821291270_251: (Rune, UInt16, Range<UInt32>, Array<Bool>) = (r'S', UInt16(Int8(-60)), ((UInt32(UInt32(112)) &
                127)..(UInt32(UInt32(14)) & 127) : (Int64(47) | 1)), [(((Int32(Int32(-75)) & 127)..(Int32(Int32(25)) &
                127) : (Int64(-112) | 1)) is Array<UInt64>), true, false,
                (((UInt16(UInt16(15)) & 127)..(UInt16(UInt16(69)) & 127) : (Int64(94) | 1)) is UInt64),
                (UInt8(165) is Float32), false,
                (((UInt16(UInt16(239)) & 127)..(UInt16(UInt16(13)) & 127) : (Int64(-44) | 1)) is Int64), false,
                ([(), (), (), (), (), (), (), (), (), ()] is Unit), false]);
        var var_1730821291270_320: UInt = UInt64(Int8(Int8(104)));
        try { // block id: 246
            var_1730821291270_52;
            var_1730821291270_251[3];
            var loopTimeVar_1730821291270_293: Range<UInt64> = ((UInt64(UInt64(230)) & 127)..(UInt64(UInt64(129)) & 127) : (Int64(UInt16(UInt16(189))) |
                1));
            for (i in loopTimeVar_1730821291270_293 where true) {
                if (var_1730821291270_33) {
                    var_1730821291270_290
                } else {
                    var_1730821291270_290
                }
            }
        } catch (_) { // block id: 300
            match (var_1730821291270_305) {
                case _ =>
                    var var_1730821291270_313: Int8 = Int8(UInt8(22));
                    var_1730821291270_313 |= var_1730821291270_313
                    ((UInt64(UInt64(136)) & 127)..=(UInt64(var_1730821291270_320) & 127) : (Int64(119) | 1))
            };
            ()
        }
    }
}

public open class Class_1730821291270_10 <: Interface_1730821291270_13 & Interface_1730821291270_15 & Resource {
    @Frozen
    public init() { // block id: 12

    }

    @Frozen
    mut prop var_1730821291270_463: UInt64 { // block id: 464
        get() { // block id: 466
            UInt64(0)
        }
        set(Value) { // block id: 470
            Int8(30);
            ();
            ()
        }
    }
    public open override func func_1730821291270_212(param_1730821291270_213: Bool,
        namedParam_1730821291270_214!: Range<Int16>, namedParam_1730821291270_215!: Range<UInt64>): Unit { // block id: 216
        match (var_1730821291270_219) {
            case _ =>
                var var_1730821291270_234: Bool = true;
                var_1730821291270_234 ||= var_1730821291270_234
                ();
                var var_1730821291270_240: Int32 = Int32(Int8(Int8(-61)));
                var_1730821291270_240 -= Int32(-58)
        };
        var var_1730821291270_251: (Rune, UInt16, Range<UInt32>, Array<Bool>) = (r'S', UInt16(Int8(-60)), ((UInt32(UInt32(112)) &
                127)..(UInt32(UInt32(14)) & 127) : (Int64(47) | 1)), [(((Int32(Int32(-75)) & 127)..(Int32(Int32(25)) &
                127) : (Int64(-112) | 1)) is Array<UInt64>), true, false,
                (((UInt16(UInt16(15)) & 127)..(UInt16(UInt16(69)) & 127) : (Int64(94) | 1)) is UInt64),
                (UInt8(165) is Float32), false,
                (((UInt16(UInt16(239)) & 127)..(UInt16(UInt16(13)) & 127) : (Int64(-44) | 1)) is Int64), false,
                ([(), (), (), (), (), (), (), (), (), ()] is Unit), false]);
        var var_1730821291270_320: UInt = UInt64(Int8(Int8(104)));
        try { // block id: 246
            var_1730821291270_52;
            var_1730821291270_251[3];
            var loopTimeVar_1730821291270_293: Range<UInt64> = ((UInt64(UInt64(230)) & 127)..(UInt64(UInt64(129)) & 127) : (Int64(UInt16(UInt16(189))) |
                1));
            for (i in loopTimeVar_1730821291270_293 where true) {
                if (var_1730821291270_33) {
                    var_1730821291270_290
                } else {
                    var_1730821291270_290
                }
            }
        } catch (_) { // block id: 300
            match (var_1730821291270_305) {
                case _ =>
                    var var_1730821291270_313: Int8 = Int8(UInt8(22));
                    var_1730821291270_313 |= var_1730821291270_313
                    ((UInt64(UInt64(136)) & 127)..=(UInt64(var_1730821291270_320) & 127) : (Int64(119) | 1))
            };
            ()
        }
    }

    static init() {
    }
    public func isClosed(): Bool {
        return false
    }
    public func close(): Unit {}
}

public struct Struct_1730821291270_125 {
    public init() { // block id: 127

    }

    public mut func func_1730821291270_139(param_1730821291270_140: Unit, param_1730821291270_141: UInt32,
        optionalParam_1730821291270_142!: (Bool, Float32, Class_1730821291270_10, Range<Int64>, Range<UInt64>, (UInt32, 
            Int16, Bool, Unit, Unit, Int32, Float32), Range<Int16>) = (false, Float32(61.0), Class_1730821291270_10(), ((Int64(Int64(-102)) &
                127)..(Int64(Int64(UInt8(161))) & 127) : (Int64(Int16(UInt16(91))) | 1)), ((UInt64(UInt64(UInt16(UInt16(7)))) &
                127)..=(UInt64(UInt64(UInt16(Int16(40)))) & 127) : (Int64(UInt16(26)) | 1)), (UInt32(Int16(Int8(22))),
                Int16(-90), (((UInt16(UInt16(150)) & 127)..=(UInt16(UInt16(202)) & 127) : (Int64(69) | 1)) is Int64), (),
                (), Int32(-45), Float32(Float32(-120.0))), ((Int16(Int16(-116)) & 127)..(Int16(Int16(85)) & 127) : (Int64(79) |
                1)))): Unit { // block id: 179

    }

    @Frozen
    public mut prop var_1730821291270_430: (Bool, Float32, Class_1730821291270_10, Range<Int64>, Range<UInt64>, (UInt32, 
        Int16, Bool, Unit, Unit, Int32, Float32), Range<Int16>) { // block id: 431
        get() { // block id: 433
            (false, Float32(-72.0), Class_1730821291270_202(), ((Int64(Int64(UInt8(135))) & 127)..(Int64(Int64(Int32(-65))) &
                    127) : (Int64(Int32(-124)) | 1)), ((UInt64(UInt64(148)) & 127)..(UInt64(UInt64(227)) & 127) : (Int64(3) |
                    1)), (UInt32(93), Int16(UInt16(153)), true, (), (), Int32(-110), Float32(29.0)), ((Int16(Int16(64)) &
                    127)..=(Int16(Int16(-32)) & 127) : (Int64(50) | 1)));
            var_1730821291270_604
        }
        set(Value) { // block id: 458
            var_1730821291270_604 = Value
        }
    }
    var var_1730821291270_604: (Bool, Float32, Class_1730821291270_10, Range<Int64>, Range<UInt64>, (UInt32, Int16, 
        Bool, Unit, Unit, Int32, Float32), Range<Int16>) = (false, Float32(76.0), Class_1730821291270_10(), ((Int64(Int64(-102)) &
            127)..(Int64(Int64(76)) & 127) : (Int64(118) | 1)), ((UInt64(UInt64(30)) & 127)..(UInt64(UInt64(62)) & 127) : (Int64(-112) |
            1)), (UInt32(224), Int16(81), false, (), (), Int32(-118), Float32(-57.0)), ((Int16(Int16(-56)) & 127)..=(Int16(Int16(-32)) &
            127) : (Int64(9) | 1)))
}

public interface Interface_1730821291270_207 {}

public sealed interface Interface_1730821291270_206 <: Interface_1730821291270_17 & Interface_1730821291270_207 {}

public interface Interface_1730821291270_205 <: Interface_1730821291270_206 {}

@Deprecated
public open class Class_1730821291270_202 <: Class_1730821291270_10 & Interface_1730821291270_14 & Interface_1730821291270_205 {
    public init() { // block id: 204

    }

    static const var_1730821291270_532: Unit = ();
    public open override func func_1730821291270_212(param_1730821291270_213: Bool,
        namedParam_1730821291270_214!: Range<Int16>, namedParam_1730821291270_215!: Range<UInt64>): Unit { // block id: 216
        match (var_1730821291270_219) {
            case _ =>
                var var_1730821291270_234: Bool = true;
                var_1730821291270_234 ||= var_1730821291270_234
                ();
                var var_1730821291270_240: Int32 = Int32(Int8(Int8(-61)));
                var_1730821291270_240 -= Int32(-58)
        };
        var var_1730821291270_251: (Rune, UInt16, Range<UInt32>, Array<Bool>) = (r'S', UInt16(Int8(-60)), ((UInt32(UInt32(112)) &
                127)..(UInt32(UInt32(14)) & 127) : (Int64(47) | 1)), [(((Int32(Int32(-75)) & 127)..(Int32(Int32(25)) &
                127) : (Int64(-112) | 1)) is Array<UInt64>), true, false,
                (((UInt16(UInt16(15)) & 127)..(UInt16(UInt16(69)) & 127) : (Int64(94) | 1)) is UInt64),
                (UInt8(165) is Float32), false,
                (((UInt16(UInt16(239)) & 127)..(UInt16(UInt16(13)) & 127) : (Int64(-44) | 1)) is Int64), false,
                ([(), (), (), (), (), (), (), (), (), ()] is Unit), false]);
        var var_1730821291270_320: UInt = UInt64(Int8(Int8(104)));
        try { // block id: 246
            var_1730821291270_52;
            var_1730821291270_251[3];
            var loopTimeVar_1730821291270_293: Range<UInt64> = ((UInt64(UInt64(230)) & 127)..(UInt64(UInt64(129)) & 127) : (Int64(UInt16(UInt16(189))) |
                1));
            for (i in loopTimeVar_1730821291270_293 where true) {
                if (var_1730821291270_33) {
                    var_1730821291270_290
                } else {
                    var_1730821291270_290
                }
            }
        } catch (_) { // block id: 300
            match (var_1730821291270_305) {
                case _ =>
                    var var_1730821291270_313: Int8 = Int8(UInt8(22));
                    var_1730821291270_313 |= var_1730821291270_313
                    ((UInt64(UInt64(136)) & 127)..=(UInt64(var_1730821291270_320) & 127) : (Int64(119) | 1))
            };
            ()
        }
    }

    static init() {
    }
}

public enum Enum_1730821291270_302 {
    defaultValue
    | enumValue_1730821291270_307
}

public func func_1730821291270_198(param_1730821291270_199: Range<Int16>): Struct_1730821291270_125 { // block id: 200
    let var_1730821291270_357: Bool = (Class_1730821291270_202() is Range<UInt32>);
    var_1730821291270_209.func_1730821291270_212(if (true) { // block id: 328
        ();
        var_1730821291270_52;
        true && var_1730821291270_33
    } else if (var_1730821291270_33) { // block id: 335
        false;
        var_1730821291270_52;
        true
    } else { // block id: 339
        true
    },
        namedParam_1730821291270_214: (((Int16(var_1730821291270_49) & 127)..=(Int16(var_1730821291270_49) & 127) : (Int64(33) |
                1)), Int64(7), (var_1730821291270_351, var_1730821291270_105, ((UInt32(UInt32(77)) & 127)..=(UInt32(UInt32(217)) &
                    127) : (Int64(-37) | 1)), [var_1730821291270_357, true, true, var_1730821291270_357, false, false,
                    var_1730821291270_33, var_1730821291270_33, var_1730821291270_357, var_1730821291270_357]), r'B',
            UInt16(151))[0],
        namedParam_1730821291270_215: ((UInt64(UInt64(75)) & 127)..(UInt64(UInt64(232)) & 127) : (Int64(118) | 1)));
    var_1730821291270_374
}

@Frozen
internal func func_1730821291270_480(param_1730821291270_481: Bool): Unit { // block id: 482
    var loopTimeVar_1730821291270_496: Int = 0;
    do {
        loopTimeVar_1730821291270_496++;
        var loopTimeVar_1730821291270_489: Range<UInt64> = ((UInt64(UInt64(202)) & 127)..=(UInt64(UInt64(UInt16(11))) &
            127) : (Int64(-77) | 1));
        for (i in loopTimeVar_1730821291270_489 where true) {
        }
    } while ((true) && loopTimeVar_1730821291270_496 < 100);
    ();
    match (var_1730821291270_502) {
        case _ =>
            var var_1730821291270_508: Range<UInt32> = ((UInt32(UInt32(27)) & 127)..=(UInt32(UInt32(183)) & 127) : (Int64(42) |
                1));
            var_1730821291270_508;
            var_1730821291270_52;
            VArray<Unit, $2>({i => ()})
    }[0]
}

@Frozen
public const func func_1730821291270_594(param_1730821291270_595: Float64): Int32 { // block id: 596
    var_1730821291270_49;
    32
}

main(): Int64 {
    try {
        const var_1730821291270_39: UInt32 = 31;
        func func_1730821291270_19(optionalParam_1730821291270_20!: Rune = r'3',
            optionalParam_1730821291270_22!: String = """
DLO^P
Uz`xi
""",
            optionalParam_1730821291270_24!: UInt8 = UInt8(42), namedParam_1730821291270_26!: Float32): Class_1730821291270_10 { // block id: 27
            (if (var_1730821291270_33) { // block id: 35
                    ();
                    var_1730821291270_39 + UInt32(14)
                } else if (var_1730821291270_33) { // block id: 43
                    var var_1730821291270_46: Int16 = Int16(-74);
                    var_1730821291270_46 -= var_1730821291270_49
                    var_1730821291270_52;
                    var_1730821291270_56 | var_1730821291270_56
                } else { // block id: 59
                    var_1730821291270_52;
                    var_1730821291270_63 &= UInt32(4)
                    var_1730821291270_56 + UInt32(100)
                }, if (true) { // block id: 71
                    var_1730821291270_74 ^= UInt64(74)
                    Int16(73) / ((var_1730821291270_49) | 1)
                } else { // block id: 80
                    ();
                    ();
                    Int16(-24)
                }, [true, true, true, false, true, true, true, true, false, true][1], try (resource = Class_1730821291270_10()) { // block id: 98
                    ()
                } catch (e: Exception) { // block id: 100
                    var_1730821291270_52;
                    r'm';
                    var_1730821291270_105 <<= ((var_1730821291270_105) & 7)
                }, if (true) { // block id: 110
                    var_1730821291270_49 == var_1730821291270_49;
                    [UInt64(238), UInt64(136), UInt64(202), UInt64(136), UInt64(5), UInt64(148), UInt64(52), UInt64(89),
                        UInt64(41), UInt64(114)];
                    ()
                }, Int32(9) - Int32(-96), Float32(Float32(5.0)))[4];
            func func_1730821291270_129(param_1730821291270_130: Range<UInt64>,
                optionalParam_1730821291270_131!: Float64 = Float64(-22.0)): Struct_1730821291270_125 { // block id: 133
                var var_1730821291270_136: Struct_1730821291270_125 = Struct_1730821291270_125();
                var_1730821291270_136.func_1730821291270_139(var_1730821291270_183[2], var_1730821291270_56);
                let var_1730821291270_377: (Range<Int16>) -> Struct_1730821291270_125 = func_1730821291270_198;
                (Option<Range<Int16>>.Some(var_1730821291270_386) ?? match (((UInt32(UInt32(150)) & 127)..(UInt32(var_1730821291270_63) &
                    127) : (Int64(-101) | 1))) {
                    case _: UInt32 =>
                        var_1730821291270_63 << ((UInt32(27)) & 7);
                        var var_1730821291270_409: (UInt32, Int16, Bool, Unit, Unit, Int32, Float32) = (UInt32(Int32(70)),
                            Int16(123), (Int32(Int32(Int16(-33))) is Array<Unit>), (), (), Int32(89), Float32(109.0));
                        var_1730821291270_409;
                        var_1730821291270_386

                    case _ =>
                        var_1730821291270_183;
                        var_1730821291270_386
                }) |> var_1730821291270_377
            };

            func_1730821291270_129(((UInt64(UInt64(98)) & 127)..(UInt64(UInt64(154)) & 127) : (Int64(97) | 1)))
                .var_1730821291270_430[2]
        };

        func_1730821291270_19(optionalParam_1730821291270_22: "|Cz0r|uPa{%", namedParam_1730821291270_26: Float32(44.0))
            .var_1730821291270_463 += UInt64(83) & var_1730821291270_74
        var var_1730821291270_566: Int = Int64(UInt8(82));
        try { // block id: 478
            let var_1730821291270_516: (Bool) -> Unit = {lambdaParameter_1730821291270_519: Bool =>};
            true |> var_1730821291270_516;
            let var_1730821291270_526: Int = Int64(-37);
            ((Int16(Int16(-78)) & 127)..(Int16(Int16(-69)) & 127) : (var_1730821291270_526 | 1))
        } catch (e: Exception) { // block id: 528
            Class_1730821291270_202.var_1730821291270_532;
            if (var_1730821291270_33) { // block id: 536

            } else if (var_1730821291270_33) { // block id: 538
                ();
                var_1730821291270_52;
                var_1730821291270_52
            };
            const var_1730821291270_581: Int16 = 4;
            match (Option<Range<Int16>>.Some(var_1730821291270_386)) {
                case _ =>
                    if (var_1730821291270_550) {
                        ((Int16(Int16(-46)) & 127)..=(Int16(Int16(95)) & 127) : (Int64(25) | 1))
                    } else {
                        ((Int16(Int16(54)) & 127)..=(Int16(Int16(-110)) & 127) : (Int64(-84) | 1))
                    }

                case caseVar_1730821291270_556 =>
                    var_1730821291270_559;
                    var_1730821291270_559;
                    ((Int16(Int16(-71)) & 127)..=(Int16(var_1730821291270_49) & 127) : (var_1730821291270_566 | 1))

                case _: Class_1730821291270_10 =>
                    var_1730821291270_209;
                    var_1730821291270_386

                case _: Float32 =>
                    ();
                    ();
                    ((Int16(var_1730821291270_581) & 127)..=(Int16(var_1730821291270_581) & 127) : (var_1730821291270_566 |
                        1))

                case _ =>
                    var_1730821291270_559;
                    var_1730821291270_559;
                    var_1730821291270_386
            }
        };
        Int64(func_1730821291270_594(Float64(71.0))) | var_1730821291270_601
        // CRC Check All Variables
        var crcCheck = CrcCheck(5000, 32)
        crcCheck.updateBuffer(UInt64(var_1730821291270_39 * var_1730821291270_39), 64)
        crcCheck.updateBuffer(UInt64(var_1730821291270_49 * var_1730821291270_49), 64)
        crcCheck.updateBuffer(UInt64(var_1730821291270_63 * var_1730821291270_63), 64)
        crcCheck.updateBuffer(UInt64(var_1730821291270_74 * var_1730821291270_74), 64)
        crcCheck.updateBuffer(UInt64(var_1730821291270_105 * var_1730821291270_105), 64)
        crcCheck.updateBuffer(UInt64(var_1730821291270_566 * var_1730821291270_566), 64)
        crcCheck.crcCheck()
        crcCheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) {
        println("Exception: NoneValueException")
    }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        buffer = Array<Int64>(buffer_n, {i => 0})
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, {i => 0})
        var byte_c = 1
        var byte_index = 0
        while (value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[(i + buffer_index) % buffer.size] = byteArray[i + byte_index]
            i++
        }
        buffer_index = (buffer_index + i) % buffer.size
    }

    func updateBuffer(input: Bool, byte_n: Int64): Unit {
        if (input == true) {
            updateBuffer(1, byte_n)
        } else {
            updateBuffer(0, byte_n)
        }
    }

    func updateBuffer(input: Rune, byte_n: Int64): Unit {
        updateBuffer(UInt64(UInt32(input)), byte_n)
    }

    func updateBuffer(input: String, byte_n: Int64): Unit {
        for (c in input) {
            updateBuffer(c, byte_n)
        }
    }

    func updateBuffer(input: Unit, byte_n: Int64): Unit {
        updateBuffer(input.toString(), byte_n)
    }

    func updateBuffer(input: Any, byte_n: Int64): Unit {
        if (input is Hashable) {
            match (input as Hashable) {
                case Some(v) => updateBuffer(UInt64(v.hashCode()), byte_n)
                case _ => updateBuffer(1, byte_n)
            }
        } else if (input is ToString) {
            match (input as ToString) {
                case Some(v) => updateBuffer(v.toString(), byte_n)
                case _ => updateBuffer(1, byte_n)
            }
        } else {
            updateBuffer(1, byte_n)
        }
    }
    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, {i => 0})
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2 ** 2 * crc_output[i] + 2 ** 1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}

extend Enum_1730821291270_302 {}
