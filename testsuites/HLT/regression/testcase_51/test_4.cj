/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %overflow_wrapping %f -o %output


// All global variable need to be defined before use!
let var31: Float64 = 7.0
var var39: Bool = true
let var92: Unit = ()
public var var130: ?Unit = Option<Unit>.None
public let var171: UInt32 = UInt32(165)
public var var189: ?Bool = Option<Bool>.None
public var var217: Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
let var323: Class6 = Class61()
public var var371: Int64 = Int64(UInt8(210))
public var var377: Bool = true
public var var385: Int32 = Int32(75)
public var var413: Range<UInt8> = ((UInt8(Int8(Int8(UInt8(136)))) & 127)..=(UInt8(Int8(UInt8(Int8(93)))) & 127) : (99 | 1))
var var517: Option<Range<UInt16>> = Option<Range<UInt16>>.None
let var560: UInt16 = UInt16(110)
var var631: Interface64 = Class61()
let var821: Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)> = ((((Class6(), (UInt8(95) & 127..UInt8(208) & 127 : 24|
            1)) as Bool), (Int16(Int16(96)), UInt8(252), (Int8(64) & 127..Int8(-56) & 127 : (11 | 1))), (Int16(26), UInt8(158),
        (Int8(-52) & 127..=Int8(60) & 127 : ((-55) | 1))), (((Int16(-101), UInt8(151), (Int8(-101) & 127..Int8(-98) & 127 : (-13)|
                1)), (Class61(), (UInt8(183) & 127..=UInt8(102) & 127 : (-32) | 1)), (Int16(-17) & 127..=Int16(-39) & 127 : (-61)|
            1), ("v=Z`o*F1).", (Int32(-113) & 127..=Int32(-61) & 127 : ((-100) | 1)), Float32(-44.0), (UInt16(51), UInt16(224),
                Float32(71.0), UInt16(196), (-7.0), (-94.0), (UInt16(183) & 127..UInt16(108) & 127 : (-38) | 1), Int16(-51)),
            """
UPPy:
gjkW@
""", UInt64(165)), (), [true, false, true, false, true, true, false, false, true, false]) is Interface64)) as (Range<UInt64>,
    UInt16,Option<Unit>,Float32,UInt8))
public let var890: Range<UInt64> = ((UInt64(79) & 127)..=(UInt64(UInt8(77)) & 127) : (Int64((-89)) | 1))
let var902: UInt8 = UInt8(Int8(-92))
public var var914: Array<Bool> = [true, true, true, true, false, false, true, false, false, true]
public var var932: UInt32 = UInt32(220)
public var var957: Float32 = Float32(102.0)
public var var964: Bool = (true is Class61)
public let var993: Enum990 = Enum990.defaultValue
let var1069: Array<Float64> = [36.0, (-36.0), (-115.0), Float64(Float64(Float32(-31.0))),
Float64(Float64(Float32(Float32(1.0)))), 114.0, (-6.0), 60.0, 33.0, (-8.0)]
public var var1122: String = """
gUaEW
W9z^g
"""
let var1154: String = """
?${var1122}@6c1
>>p${var1122}n^${var1122}
"""
let var1167: (Range<Int8>,UInt8,Int8,String,Option<UInt16>,Int8,Int16,Range<Int64>) = ((Int8(UInt8(207)) & 127..Int8(UInt8(UInt8(111)))&
        127 : (8 | 1)), UInt8(Int8(Int8(115))), Int8(UInt8(Int8(UInt8(89)))), """
L${var1122}[?f<
Zy5n9
""", Option<UInt16>.
    None, Int8(-107), Int16(UInt16(Int16(78))), (24 & 127..=112 & 127 : 90 | 1))
public let var1516: UInt64 = UInt64(213)
public var var1522: Array<Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>> = 
    Array<Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>>(10) {i => (((Int8(12) & 127..Int8(-36) & 127 : (123|
            1)), UInt8(Int8(-120)), Int8(UInt8(163)), ###"xV${var1154}ea{Q${var1154}VK${var1122}d\"2"###, (Int16(-80) as UInt16),
        Int8(30), Int16(22), (48 & 127..76 & 127 : (-57) | 1)) as (Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8))}
public var var1728: (UInt16,UInt16,Float32,UInt16,Float64,Float64,Range<UInt16>,Int16) = (UInt16(168), UInt16(Int8(-83)),
    Float32(Float32(Float32(-22.0))), UInt16(78), (-56.0), (-123.0), (UInt16(106) & 127..UInt16(87) & 127 : (Int64(Int16(Int16(-85)))|
        1)), Int16(-3))
public var var1757: UInt16 = UInt16(252)
public let var1975: Option<(Int16,UInt8,Range<Int8>)> = (Int32(UInt8(UInt8(UInt8(98)))) as (Int16,UInt8,Range<Int8>))
var var2001: Int16 = Int16(Int16(UInt16(88)))
public var var2079: (Range<UInt8>,(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)) = ((UInt8(51) & 127..UInt8(208) &
        127 : 91 | 1), ((UInt64(52) & 127..UInt64(UInt8(70)) & 127 : (Int64(UInt64(182)) | 1)), UInt16(54), (Aggregate339(
            ) as Unit), Float32(Float32(Float32(46.0))), UInt8(160)))
let var2335: Unit = ()
var var2433: Int64 = Int64(Int8(30))
var var2504: ?Unit = Option<Unit>.None
let var2577: (String,Range<Int32>,Float32,(UInt16,UInt16,Float32,UInt16,Float64,Float64,Range<UInt16>,Int16),String,
    UInt64) = (###"^N${var1122}Tu${var1154}ESm${var1122}6]Z"###, (Int32(10) & 127..Int32(88) & 127 : 57 | 1), Float32(-112.0),
    (UInt16(UInt8(Int8(39))), UInt16(UInt8(UInt8(10))), Float32(-124.0), UInt16(UInt8(UInt8(139))), Float64(Float64(Float32(-61.0))),
        16.0, (UInt16(162) & 127..=UInt16(99) & 127 : (Int64(Int32(-23)) | 1)), Int16(-14)), "_4b?O1f,8a", UInt64(UInt32(174)))
var var2637: (Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8) = ((UInt64(212) & 127..=UInt64(240) & 127 : (75 | 1)),
    UInt16(68), Option<Unit>.None, Float32(Float32(-79.0)), UInt8(155))
var var2652: (Int16,UInt8,Range<Int8>) = (Int16(Int16(UInt8(199))), UInt8(Int8(-101)), (Int8(Int8(112)) & 127..=Int8(UInt8(41))&
        127 : (Int64(Int16(Int16(-71))) | 1)))
public var var2871: Array<UInt16> = [UInt16(134), UInt16(UInt8(122)), UInt16(Int8(UInt8(Int8(70)))),
UInt16(Int8(Int8(71))), UInt16(UInt8(188)), UInt16(228), UInt16(192), UInt16(102), UInt16(Int16(UInt16(20))),
UInt16(190)]
public let var2897: UInt64 = UInt64(Int8(79))
var var2981: Int16 = Int16(9)
var var3134: Int8 = Int8(-7)
public var var3258: Int32 = Int32(-48)
public let var3492: Bool = true
public let var3559: Int8 = Int8(Int8(87))
var var3588: Int16 = Int16(UInt16(UInt16(Int8(-53))))
public var var3604: Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)> = ((Option<Bool>.None as Float32) as (Range<UInt64>,
    UInt16,Option<Unit>,Float32,UInt8))
public let var3667: (UInt64,UInt16,Array<Bool>,Array<Float64>,Array<Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,
    UInt8)>>,Range<UInt32>,Range<Int32>) = (UInt64(138), UInt16(Int16(64)), [true, true, true, false, false, false,
    false, true, false, true], [Float64(Float32(Float32(123.0))), (-44.0), (-39.0), (-52.0), (-86.0), (-59.0),
    Float64(Float64(Float32(94.0))), 13.0, Float64(Float32(Float32(27.0))), Float64(Float32(110.0))], [(Option<Option<Bool>>.
        None as (Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)),
    (((UInt64(191) & 127..=UInt64(69) & 127 : (-107) | 1), UInt16(14), Option<Unit>.None, Float32(-17.0), UInt8(7)) as (Range<UInt64>,
            UInt16,Option<Unit>,Float32,UInt8)),
    ([UInt16(224), UInt16(220), UInt16(27), UInt16(26), UInt16(164), UInt16(91), UInt16(52), UInt16(65), UInt16(55),
        UInt16(142)] as (Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)),
    (UInt32(Int8(-39)) as (Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)),
    (((UInt16(29), UInt16(159), Float32(106.0), UInt16(190), 104.0, 19.0, (UInt16(202) & 127..=UInt16(75) & 127 : 119 | 1),
            Int16(-33)) as Range<UInt16>) as (Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)),
    Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.None,
    Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.None,
    ((UInt16(129) & 127..UInt16(243) & 127 : ((-104) | 1)) as (Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)),
    (Int64(Int8(50)) as (Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)),
    Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.None], (UInt32(24) & 127..=UInt32(97) & 127 : 33 | 1), (Int32(-100)&
        127..=Int32(-101) & 127 : 51 | 1))
let var3771: Int8 = Int8(UInt8(71))
let var3792: (Option<Bool>,(Int16,UInt8,Range<Int8>),(Int16,UInt8,Range<Int8>),Bool) = (Option<Bool>.None, (Int16(30),
        UInt8(Int8(Int8(124))), (Int8(UInt8(168)) & 127..Int8(UInt8(177)) & 127 : (89 | 1))), (Int16(109), UInt8(UInt8(234)),
        (Int8(47) & 127..=Int8(113) & 127 : 125 | 1)), true)
public let var3855: Int16 = Int16(Int16(-37))
let var3883: Range<Int8> = (Int8(-91) & 127..Int8(80) & 127 : (-96) | 1)
public let var3958: Range<Int16> = (Int16(Int16(-94)) & 127..=Int16(UInt16(138)) & 127 : (Int64(UInt16(182)) | 1))
public var var3999: UInt8 = UInt8(175)
public let var4017: Aggregate339 = Aggregate339()
public open class Class6 <: Resource {
    public init() { // block id: 8
    }

    static let var122: UInt64 = UInt64(82)
    public let var606: Range<UInt64> = (UInt64(238) & 127..=UInt64(174) & 127 : (7 | 1))
    public let var645: Int64 = 110
    static func func805(param806: Float64): Int64 { // block id: 807
        var371
    }

    public let var1203: Bool = true
    let var1705: Unit = ()
    private static let var3016: Option<(UInt16,UInt16,Float32,UInt16,Float64,Float64,Range<UInt16>,Int16)> = Option<(UInt16,
            UInt16,Float32,UInt16,Float64,Float64,Range<UInt16>,Int16)>.None
    private static let var3127: Bool = false
    static func func702(namedParam703!: (Int16,UInt8,Range<Int8>)): Bool { // block id: 704
        let var716: ((UInt16,UInt16,Float32,UInt16,Float64,Float64,Range<UInt16>,Int16)) -> Bool = {lambdaParameter719: (UInt16,
            UInt16,Float32,UInt16,Float64,Float64,Range<UInt16>,Int16) => (Float32(48.0) is (String,Range<Int32>,Float32,
                (UInt16,UInt16,Float32,UInt16,Float64,Float64,Range<UInt16>,Int16),String,UInt64))}
        (match ((Int16(-80), var902, (Int8(-128) & 127..=Int8(3) & 127 : (-112) | 1))) {
            case (_, _: Bool, _: Option<Unit>) =>
                ()
                var3016

            case caseVar3020 => if (true) {
                    var3016
                } else {
                    var3016
                }

            case _ =>
                var39 ||= false
                var2079
                let var3041: Range<UInt16> = (UInt16(UInt16(130)) & 127..=UInt16(Int8(UInt8(UInt8(160)))) & 127 : ((-23)|
                    1))
                Option<(UInt16,UInt16,Float32,UInt16,Float64,Float64,Range<UInt16>,Int16)>.Some(
                    (UInt16(72), UInt16(70), Float32(-112.0), UInt16(35), var31, (-26.0), var3041, var2001))
        } as Range<UInt16>) |> (func723 ~> var716)
        [
            ((UInt8(225) & 127..UInt8(210) & 127 : (var2433 | 1)) is (UInt16,UInt16,Float32,UInt16,Float64,Float64,Range<UInt16>,
                Int16)),
            false,
            if (true) { // block id: 3061
                ()
                false
            } else if (true) { // block id: 3065
                var371 >>= (((-67)) & 7)
                var2001 /= ((var2001) | 1)
                false
            } else { // block id: 3073
                var964
            },
            match ((UInt16(174) & 127..UInt16(209) & 127 : 74 | 1)) {
                case _ =>
                    var92
                    (Int16(-68) & 127..=Int16(55) & 127 : (-116) | 1)
                    true && true

                case _ => true
            },
            match (Option<Float32>.None) {
                case caseVar3092: Range<Int8> =>
                    [UInt16(180), UInt16(249), UInt16(154), UInt16(198), UInt16(159), UInt16(247), UInt16(159),
                    UInt16(204), UInt16(164), UInt16(215)]
                    let var3097: Int8 = Int8(UInt8(125))
                    var3097 < var3097

                case _ =>
                    var2981 ^= var2981
                    var932 != var171
            },
            try { // block id: 3110
                var var3113: UInt8 = UInt8(Int8(72))
                var var3117: UInt8 = UInt8(UInt8(44))
                var3113 >>= ((var3117) & 7)
                false
            } finally { // block id: 3121
                var var3123: Range<Int64> = (19 & 127..(-127) & 127 : (-83) | 1)
                var3123
                ()
                var3127
            },
            (Option<Bool>.None ?? true),
            (var3134 is Range<Int64>),
            match (var1975) {
                case _ => true
            },
            (Option<Bool>.Some(true) ?? var39)
        ][8]
    }

    static var var3186: UInt64 = UInt64(9)
    public var var3396: Int16 = Int16(0)
    let var3543: Option<Bool> = Option<Bool>.None
    public static let var4123: Option<Option<Bool>> = Option<Option<Bool>>.None
    public static var var4160: Bool = false
    protected open func func581(): (Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8) { // block id: 649
        let var663: Option<(Int16,UInt8,Range<Int8>)> = Option<(Int16,UInt8,Range<Int8>)>.Some(
            (Int16(-62), UInt8(12), (Int8(36) & 127..Int8(-3) & 127 : (-53) | 1)))
        let var670: (Int16,UInt8,Range<Int8>) = (Int16(126), UInt8(159), (Int8(-20) & 127..Int8(-105) & 127 : (-42) | 1))
        func func653(): Option<Bool> { // block id: 654
            (var663 ?? var670)[0]
            let var4094: Int8 = Int8(UInt8(Int8(24)))
            ((var3134 & 127..var4094 & 127 : (89 | 1)) |> func679)[0]
        }

        let var4135: Unit = ()
        (match (func653()) {
            case caseVar4102: Enum990 => var821

            case caseVar4107: Bool => if (true) {
                    Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.Some(var2637)
                } else {
                    var821
                }

            case _ =>
                Option<Float32>.None
                var2335
                Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.Some(var2637)
        } ?? if (match (var4123) {
            case caseVar4127: (Option<Bool>,(Int16,UInt8,Range<Int8>),(Int16,UInt8,Range<Int8>),Bool) => var377

            case caseVar4132 =>
                var4135
                var2001 *= var3396
                var3492

            case _ =>
                var92
                true

            case _ =>
                var3999 |= var3999
                true

            case _ =>
                if (var39) {
                    Aggregate339()
                } else {
                    var4017
                }
                var4160
        }) {
            (Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.Some(var2637) ?? var2637)
        } else {
            ((UInt64(148) & 127..=UInt64(70) & 127 : 15 | 1), UInt16(28), Option<Unit>.None, Float32(-101.0), var3999)
        })
    }

    public func isClosed(): Bool {
        return false
    }
    public func close(): Unit {}
}

public interface Interface64 {
    func func581(): (Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)
}

public open class Class61 <: Class6 & Interface64 {
    public init() { // block id: 63
    }

    static var var85: Bool = false
    static var var89: Rune = '8'
    static var var127: UInt16 = UInt16(88)
    static let var578: Class61 = Class61()
    static let var591: Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)> = Option<(Range<UInt64>,UInt16,Option<Unit>,
            Float32,UInt8)>.None
    public override open func func581(): (Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8) { // block id: 582
        try { // block id: 584
            var591.getOrThrow()
        } finally { // block id: 593
            (var130 ?? var92)
            var loopTimeVar601: Int64 = 0
            while ((false) && loopTimeVar601 < 100) {
                loopTimeVar601++
            }
            let var616: (Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8) = ((UInt64(173) & 127..UInt64(7) & 127 : (-65)|
                    1), UInt16(85), Option<Unit>.Some(()), Float32(Float32(Float32(Float32(27.0)))), UInt8(UInt8(Int8(Int8(77)))))
            (Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.Some(
                (var606, var127, var130, Float32(-34.0), UInt8(185))) ?? var616)
        }
    }

    var var2530: (Range<UInt8>,(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)) = ((UInt8(239) & 127..=UInt8(4) & 127 : (100|
            1)), ((UInt64(32) & 127..=UInt64(246) & 127 : (76 | 1)), UInt16(99), Option<Unit>.None, Float32(109.0), UInt8(215)))
    public static let var3158: Bool = true
    private static let var3162: Option<Float32> = Option<Float32>.None
    init(param696: Int64, param697: Range<UInt64>, namedParam698!: Range<Int64>) { // block id: 699
        var loopTimeVar3149: Int64 = 0
        while ((func702(namedParam703: var2652)) && loopTimeVar3149 < 100) {
            loopTimeVar3149++
        }
        var var3174: UInt8 = UInt8(Int8(UInt8(59)))
        var var3199: (UInt64,UInt16,Array<Bool>,Array<Float64>,Array<Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,
            UInt8)>>,Range<UInt32>,Range<Int32>) = (UInt64(233), UInt16(Int16(66)), [false, false, true, false, false,
            true, false, true, true, true], [Float64(60.0), (-55.0), 72.0, Float64(9.0), Float64(Float32(-2.0)), 34.0,
            (-110.0), Float64(Float32(72.0)), (-97.0), Float64(Float32(Float32(-68.0)))], [Option<(Range<UInt64>,UInt16,
                        Option<Unit>,Float32,UInt8)>.None,
            (Int16(UInt16(201)) as (Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)),
            Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.None,
            (UInt64(61) as (Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)),
            Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.None,
            Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.None,
            Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.None,
            (Option<(Int16,UInt8,Range<Int8>)>.None as (Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)),
            ((UInt16(87), UInt16(235), Float32(-4.0), UInt16(9), 93.0, 4.0, (UInt16(16) & 127..=UInt16(217) & 127 : (22 |
                        1)), Int16(16)) as (Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)),
            Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.None], (UInt32(243) & 127..UInt32(188) & 127 : (Int64(UInt8(150))|
                1)), (Int32(-15) & 127..=Int32(118) & 127 : 97 | 1))
        (Option<Option<Float32>>.Some(if (var3158) {
                Option<Float32>.None
            } else {
                var3162
            }) ?? (Option<Option<Float32>>.None ?? match (var631) {
            case _ =>
                ()
                var3174 %= ((UInt8(108)) | 1)
                var3162

            case caseVar3182 =>
                var3186++
                Option<Float32>.Some(var957)

            case caseVar3192: (Class6,Range<UInt8>) => Option<Float32>.Some(Float32(54.0))

            case _ =>
                var3199
                var385 -= var3258
                if (var377) {
                    var3162
                } else {
                    Option<Float32>.None
                }
        }))
    }

    static var var3346: Range<Int64> = ((-123) & 127..(-51) & 127 : ((-11) | 1))
    let var3378: (String,Range<Int32>,Float32,(UInt16,UInt16,Float32,UInt16,Float64,Float64,Range<UInt16>,Int16),String,
        UInt64) = ("K+#$+TAp3N", (Int32(88) & 127..Int32(65) & 127 : (-37) | 1), Float32(-91.0), (UInt16(233), UInt16(91),
            Float32(50.0), UInt16(72), (-24.0), (-60.0), (UInt16(129) & 127..UInt16(175) & 127 : 114 | 1), Int16(31)),
        """
aF326
[89w+
""", UInt64(130))
    private let var3454: Int16 = Int16(125)
    private var var3540: Option<Option<Bool>> = Option<Option<Bool>>.None
    public open func func3273(namedParam3274!: (Range<Int8>,UInt8,Int8,String,Option<UInt16>,Int8,Int16,Range<Int64>), 
        namedParam3275!: Bool): (String,Range<Int32>,Float32,(UInt16,UInt16,Float32,UInt16,Float64,Float64,Range<UInt16>,
        Int16),String,UInt64) { // block id: 3276
        var var3283: Range<Int16> = (Int16(5) & 127..Int16(UInt8(207)) & 127 : (98 | 1))
        let var3308: Int16 = Int16(122)
        let var3315: Int16 = Int16(85)
        let var3330: Range<Int8> = (Int8(UInt8(Int8(56))) & 127..Int8(112) & 127 : (Int64(Int16(UInt8(209))) | 1))
        var var3360: Option<Float32> = Option<Float32>.Some(Float32(Float32(30.0)))
        [
            if (var1203) {
                var3283
            } else {
                (Int16(-89) & 127..=Int16(26) & 127 : (-118) | 1)
            },
            match (var517) {
                case _ =>
                    ()
                    (var2001 & 127..Int16(96) & 127 : (106 | 1))

                case _ =>
                    var2335
                    (Int16(-74) & 127..Int16(116) & 127 : 22 | 1)
            },
            (Option<Range<Int16>>.None ?? (var3308 & 127..var2001 & 127 : ((-22) | 1))),
            (Int16(93) & 127..var3315 & 127 : (53 | 1)),
            var3283,
            var3283,
            if (var964) {
                (Int16(-76) & 127..var2001 & 127 : (82 | 1))
            } else {
                var3283
            },
            match ((var3330, UInt8(173), var3134, """
 7e5n
z-|T<
""", Option<UInt16>.None, Int8(22), Int16(117), var3346)) {
                case (_: (Class6,Range<UInt8>), _, caseVar3353: Option<Unit>, caseVar3354, caseVar3355: (Int16,UInt8,
                            Range<Int8>), _: Option<Option<Float32>>, caseVar3356: Option<Option<UInt16>>, caseVar3357: Option<Option<UInt16>>) =>
                    var3360
                    var3283

                case (_, _: Option<Float32>, _: Range<UInt64>, _, _, _, _, caseVar3367) =>
                    var957 /= Float32((Int32(Float32(64.0))) | 1)
                    Option<Bool>.None
                    var3283

                case _ =>
                    ()
                    var3378
                    var var3400: Int64 = Int64(Int64(UInt16(96)))
                    (var3396 & 127..var2981 & 127 : (var3400 | 1))
            },
            var3283,
            try { // block id: 3406
                (Int16(-32) & 127..Int16(96) & 127 : 14 | 1)
            } finally { // block id: 3408
                var3283
            }
        ][8]
        let var3417: ?Unit = (() as Unit)
        var var3436: Option<(UInt16,UInt16,Float32,UInt16,Float64,Float64,Range<UInt16>,Int16)> = (Int8(UInt8(Int8(79))) as (UInt16,
            UInt16,Float32,UInt16,Float64,Float64,Range<UInt16>,Int16))
        var var3464: Bool = (Option<Unit>.Some(()) is Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>)
        ([var2504, var3417, var130, Option<Unit>.Some(var2335), var2504, var2504, Option<Unit>.None, var130,
        Option<Unit>.None, Option<Unit>.None][4] ?? try (resource = Class6()) { // block id: 3431
        } catch (_) { // block id: 3432
            if (false) {
                var3436
            } else {
                Option<(UInt16,UInt16,Float32,UInt16,Float64,Float64,Range<UInt16>,Int16)>.Some(
                    (UInt16(74), var560, Float32(123.0), var127, var31, var31, (var127 & 127..var127 & 127 : (69 | 1)),
                        var3454))
            }
            ()
            var964 ||= false
        } finally { // block id: 3460
            var85 = var3464
        })
        var var3505: (String,Range<Int32>,Float32,(UInt16,UInt16,Float32,UInt16,Float64,Float64,Range<UInt16>,Int16),
            String,UInt64) = ("""
\\=Ox|
#oGA+
""", (Int32(25) & 127..=Int32(35) & 127 : 70 | 1), Float32(Float32(Float32(Float32(-106.0)))),
            (UInt16(Int8(12)), UInt16(Int16(-25)), Float32(Float32(-5.0)), UInt16(60), Float64(Float32(Float32(-23.0))),
                Float64((-105.0)), (UInt16(21) & 127..=UInt16(228) & 127 : 56 | 1), Int16(Int16(6))), ###"?1R[X=RhR'"###,
            UInt64(Int8(UInt8(155))))
        let var3550: Range<Int32> = (Int32(0) & 127..Int32(29) & 127 : 42 | 1)
        if ((if (var1203) { // block id: 3472
            (-116.0) * var31
        } else { // block id: 3476
            var3283
            (Int16(-56) & 127..=var2981 & 127 : (var2433 | 1))
            var31
        } > if (true) { // block id: 3485
            if (var3158) {
                Enum1207.defaultValue
            } else {
                Enum1207.defaultValue
            }
            (-112.0)
        } else if (var3492) { // block id: 3494
            var31
        } else { // block id: 3496
            var1705
            (var323, var413)
            37.0 ** Float64(Int32(var31) & 3)
        })) {
            var3505
        } else {
            match ((var3540 ?? var3543)) {
                case _ => ("Se>`jG92<e", var3550, var957, var1728, var1122, var3186)
            }
        }
    }
}

public func func141(param142: Float64): (Class6,Range<UInt8>) { // block id: 143
    var var151: UInt16 = UInt16(Int16(Int16(125)))
    var var160: Bool = true
    let var205: Rune = 'J'
    let var234: UInt8 = UInt8(243)
    if (try { // block id: 148
        var151 ^ var151
        [var39, true, var160, true, false, true, var160, var160, var39, false]
    } catch (e: Exception) { // block id: 169
        var171
        UInt64(4)
        [false, false, var160, var39, var39, var39, var39, var160, var39, var39]
    }[5]) { // block id: 186
        var var196: Int8 = Int8(80)
        match (var189) {
            case caseVar193 => var196

            case caseVar200: Range<UInt64> =>
                if (var160) {
                    var205
                } else {
                    'W'
                }
                ()
                var196

            case _ =>
                var92
                Int8(-82)
        }
        var217[0]
        var var224: Int64 = Int64(UInt8(126))
        try { // block id: 221
            (var224 & 127..=33 & 127 : ((-60) | 1))
            (Class61(), (UInt8(65) & 127..var234 & 127 : (17 | 1)))
        } finally { // block id: 237
            (Class6(), (UInt8(242) & 127..UInt8(134) & 127 : (var224 | 1)))
        }
    } else { // block id: 244
        UInt8(UInt8(164))
        (Class6(), (UInt8(253) & 127..UInt8(199) & 127 : (-82) | 1))
    }
}

func func728(namedParam255!: (Float64) -> (Class6,Range<UInt8>)): Float64 { // block id: 258
    122.0
}

public func func261(param262: Range<UInt16>): (Class6,Range<UInt8>) { // block id: 263
    try { // block id: 265
        let var268: (Float64) -> (Class6,Range<UInt8>) = {lambdaParameter271: Float64 => (Class6(), (UInt8(175) & 127..UInt8(93)&
                    127 : (-31) | 1))}
        115.0 |> var268
    } catch (_) { // block id: 277
        var var280: (Class6,Range<UInt8>) = (Class61(), (UInt8(216) & 127..=UInt8(82) & 127 : 3 | 1))
        var var288: Int16 = Int16(11)
        match (var280) {
            case _ => var288 |= var288
        }
        var92
        try { // block id: 293
            ()
            (Class61(), (UInt8(51) & 127..=UInt8(94) & 127 : 60 | 1))
        } catch (e: Exception) { // block id: 298
            if (var39) {
                '8'
            } else {
                'U'
            }
            var280
        } finally { // block id: 304
            var var310: UInt8 = UInt8(223)
            (Class61(), (UInt8(166) & 127..=var310 & 127 : ((-113) | 1)))
        }
    } finally { // block id: 313
        try { // block id: 315
            Class61()
        } catch (e: Exception) { // block id: 317
            ()
            [false, false, true, true, false, false, true, false, true, false]
            Class61()
        }
        var var329: Int64 = Int64(UInt32(UInt16(Int16(-123))))
        (var323, (UInt8(252) & 127..UInt8(205) & 127 : (var329 | 1)))
    }
}

public struct Aggregate339 {
    public init() { // block id: 341
    }

    private static let var435: (UInt16,UInt16,Float32,UInt16,Float64,Float64,Range<UInt16>,Int16) = (UInt16(87), UInt16(51),
        Float32(-24.0), UInt16(6), (-64.0), 42.0, (UInt16(133) & 127..UInt16(66) & 127 : (-120) | 1), Int16(17))
    mut func func346(namedParam347!: (Float64) -> (Class6,Range<UInt8>)): Float64 { // block id: 350
        var loopTimeVar424: Range<UInt64> = (UInt64(167) & 127..=UInt64(51) & 127 : (Int64(UInt16(Int16(Int16(-21)))) | 1))
        for (i in loopTimeVar424 where try { // block id: 353
            let var356: Int64 = 91
            var356 >> ((var356) & 7)
            ()
            var39
        } catch (_) { // block id: 361
            var189
            var130
            true
        }) {
            try { // block id: 367
                var92
                var371 /= ((var371) | 1)
                var377 ||= var39
            } catch (e: Exception) { // block id: 380
                var92
                ()
                var385--
            } finally { // block id: 387
                ()
                var var391: UInt64 = UInt64(187)
                var391 %= ((UInt64(35)) | 1)
            }
            match (Option<Unit>.Some(var92)) {
                case caseVar399 => (var323, (UInt8(62) & 127..=UInt8(241) & 127 : 49 | 1))

                case _ =>
                    (25 & 127..=(-83) & 127 : ((-16) | 1))
                    (var323, var413)
            }
        }
        var435[4]
    }

    static let var461: Float64 = (-115.0)
    public static var var2353: UInt8 = UInt8(201)
}

public func func335(param336: Float64): Range<UInt16> { // block id: 337
    var var343: Aggregate339 = Aggregate339()
    var343.func346(namedParam347: func141)
    [
        Float64(32.0),
        var31 + 124.0,
        [(-3.0), (-122.0), 115.0, (-40.0), 49.0, 36.0, (-122.0), 8.0, 32.0, 123.0][1],
        Aggregate339.var461,
        try { // block id: 464
            Int32(-124)
            Int16(8)
            (-43.0)
        } catch (_) { // block id: 468
            ()
            55.0
        } finally { // block id: 471
            let var479: Range<Int16> = (Int16(-22) & 127..=Int16(Int8(21)) & 127 : (22 | 1))
            if (false) {
                (Int16(126) & 127..=Int16(115) & 127 : ((-20) | 1))
            } else {
                var479
            }
            -var31
        },
        param336,
        Float64(param336),
        if (false) { // block id: 492
            (-74.0)
            -(-54.0)
        } else if (var39) { // block id: 497
            52.0
        } else { // block id: 499
            103.0 + (-119.0)
        },
        Aggregate339.var461,
        (-1.0)
    ][5]
    var var537: (Class6,Range<UInt8>) = (Class6(), (UInt8(152) & 127..UInt8(40) & 127 : (Int64(UInt64(22)) | 1)))
    (match (if (false) {
        var517
    } else {
        Option<Range<UInt16>>.None
    }) {
        case caseVar522: UInt32 =>
            ()
            Option<Range<UInt16>>.Some((UInt16(222) & 127..UInt16(44) & 127 : 101 | 1))

        case caseVar529: Range<Int16> =>
            if (var39) {
                (var323, var413)
            } else {
                var537
            }
            var385 &= Int32(-58)
            var517

        case _ => Option<Range<UInt16>>.None
    } ?? (try { // block id: 554
        if (var377) {
            Option<Bool>.None
        } else {
            Option<Bool>.None
        }
        var560
    } finally { // block id: 562
        var560
    } & 127..(Option<UInt16>.Some(UInt16(237)) ?? var560) & 127 : (-var371 | 1)))
}

func func137(param138: (Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)): (Class6,Range<UInt8>) { // block id: 139
    let var251: (Float64) -> (Class6,Range<UInt8>) = func141
    func728(namedParam255: (func335 ~> func261)) |> var251
}

main(): Int64 {
    try {
        let var634: Range<Int32> = (Int32(-21) & 127..Int32(22) & 127 : 49 | 1)
        func func10(param11: Int16): Class6 { // block id: 12
            func func14(): Class6 { // block id: 15
                let var20: Int8 = Int8(-121)
                var loopTimeVar44: Range<UInt64> = (UInt64(15) & 127..=UInt64(Int32(88)) & 127 : ((-70) | 1))
                for (i in loopTimeVar44 where match {
                    case (var20 is Bool) => true
                    case false => false
                    case _ =>
                        (-18.0) ** Float64(Int32(var31) & 3)
                        var31 == var31
                }) {
                    var loopTimeVar43: Int64 = 0
                    while ((var39) && loopTimeVar43 < 100) {
                        loopTimeVar43++
                    }
                }
                Class61.func67(optionalParam68: var631, namedParam70: var634, namedParam71: var413)[0]
            }

            func14()
        }

        let var639: Int16 = Int16(UInt16(Int8(UInt8(158))))
        func10(var639).var645

        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var171 * var171), 64)
        crccheck.updateBuffer(UInt64(var371 * var371), 64)
        crccheck.updateBuffer(UInt64(var385 * var385), 64)
        crccheck.updateBuffer(UInt64(var560 * var560), 64)
        crccheck.updateBuffer(UInt64(var639 * var639), 64)
        crccheck.updateBuffer(UInt64(var902 * var902), 64)
        crccheck.updateBuffer(UInt64(var932 * var932), 64)
        crccheck.updateBuffer(UInt64(var1516 * var1516), 64)
        crccheck.updateBuffer(UInt64(var1757 * var1757), 64)
        crccheck.updateBuffer(UInt64(var2001 * var2001), 64)
        crccheck.updateBuffer(UInt64(var2433 * var2433), 64)
        crccheck.updateBuffer(UInt64(var2897 * var2897), 64)
        crccheck.updateBuffer(UInt64(var2981 * var2981), 64)
        crccheck.updateBuffer(UInt64(var3134 * var3134), 64)
        crccheck.updateBuffer(UInt64(var3258 * var3258), 64)
        crccheck.updateBuffer(UInt64(var3559 * var3559), 64)
        crccheck.updateBuffer(UInt64(var3588 * var3588), 64)
        crccheck.updateBuffer(UInt64(var3771 * var3771), 64)
        crccheck.updateBuffer(UInt64(var3855 * var3855), 64)
        crccheck.updateBuffer(UInt64(var3999 * var3999), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) {
        println("Exception: NoneValueException")
    }
    return 0
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        buffer = Array<Int64>(buffer_n, {i => 0})
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0,
                0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, {i => 0})
        var byte_c = 1
        var byte_index = 0
        while (value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, {i => 0})
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2 ** 2 * crc_output[i] + 2 ** 1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Class61 {
    static public func func67(optionalParam68!: Interface64 = Class61(), namedParam70!: Range<Int32>, 
        namedParam71!: Range<UInt8>): (Class6,Range<UInt8>) { // block id: 72
        var loopTimeVar103: Range<UInt64> = (UInt64(UInt8(UInt8(213))) & 127..UInt64(129) & 127 : (Int64(Int32(UInt16(67)))|
            1))
        for (i in loopTimeVar103 where (Option<Bool>.Some(var39) ?? try { // block id: 82
            if (var85) {
                'S'
            } else {
                var89
            }
            var92
            var85 || false
        } finally { // block id: 97
            var39
        })) {
            if (true) { // block id: 102
            }
        }
        (((var122 & 127..=UInt64(186) & 127 : ((-80) | 1)), var127, var130, Float32(106.0), UInt8(219))[2] ?? ())
        var578.func581() |> func137
    }
}

public func func706(param707: Option<Range<UInt16>>): Bool { // block id: 708
    false
}

public func func711(param712: (UInt16,UInt16,Float32,UInt16,Float64,Float64,Range<UInt16>,Int16)): Bool { // block id: 713
    var377
}

public func func728(param729: Range<UInt64>): Int64 { // block id: 730
    var92
    let var738: (Int16,UInt8,Range<Int8>) = (Int16(-20), UInt8(UInt8(Int8(UInt8(126)))), (Int8(Int8(40)) & 127..=Int8(59)&
            127 : (Int64(Int32(UInt16(184))) | 1)))
    let var753: (Class6,Range<UInt8>) = (Class61(), (UInt8(UInt8(219)) & 127..UInt8(Int8(UInt8(175))) & 127 : ((-105) | 1)))
    var var765: (String,Range<Int32>,Float32,(UInt16,UInt16,Float32,UInt16,Float64,Float64,Range<UInt16>,Int16),String,
        UInt64) = ("r:}mTFC5Rr", (Int32(-17) & 127..=Int32(-109) & 127 : 103 | 1), Float32(-76.0), (UInt16(207), UInt16(UInt16(UInt16(154))),
            Float32(43.0), UInt16(Int8(UInt8(47))), Float64(Float64(Float32(66.0))), Float64(Float32(Float32(38.0))), (UInt16(91)&
                127..=UInt16(117) & 127 : (-90) | 1), Int16(UInt16(Int8(-60)))), ###"G<+`|X/*[L"###, UInt64(236))
    var loopTimeVar800: Int64 = 0
    while ((((var738, var753, (Int16(-118) & 127..=Int16(-23) & 127 : (-11) | 1), var765, (), [true, true, true, true,
            false, false, false, true, false, false])[1] is Range<UInt16>)) && loopTimeVar800 < 100) {
        loopTimeVar800++
        (Option<Unit>.Some(var92) ?? var92)
    }
    (Class6.func805(var31)) >> ((36) & 7)
}

public func func977(param978: (Range<UInt64>) -> Int64): Unit { // block id: 981
}

public func func985(param729: Range<UInt64>): Int64 { // block id: 730
    var92
    let var738: (Int16,UInt8,Range<Int8>) = (Int16(-20), UInt8(UInt8(Int8(UInt8(126)))), (Int8(Int8(40)) & 127..=Int8(59)&
            127 : (Int64(Int32(UInt16(184))) | 1)))
    let var753: (Class6,Range<UInt8>) = (Class61(), (UInt8(UInt8(219)) & 127..UInt8(Int8(UInt8(175))) & 127 : ((-105) | 1)))
    var var765: (String,Range<Int32>,Float32,(UInt16,UInt16,Float32,UInt16,Float64,Float64,Range<UInt16>,Int16),String,
        UInt64) = ("r:}mTFC5Rr", (Int32(-17) & 127..=Int32(-109) & 127 : 103 | 1), Float32(-76.0), (UInt16(207), UInt16(UInt16(UInt16(154))),
            Float32(43.0), UInt16(Int8(UInt8(47))), Float64(Float64(Float32(66.0))), Float64(Float32(Float32(38.0))), (UInt16(91)&
                127..=UInt16(117) & 127 : (-90) | 1), Int16(UInt16(Int8(-60)))), ###"G<+`|X/*[L"###, UInt64(236))
    var loopTimeVar800: Int64 = 0
    while ((((var738, var753, (Int16(-118) & 127..=Int16(-23) & 127 : (-11) | 1), var765, (), [true, true, true, true,
            false, false, false, true, false, false])[1] is Range<UInt16>)) && loopTimeVar800 < 100) {
        loopTimeVar800++
        (Option<Unit>.Some(var92) ?? var92)
    }
    (Class6.func805(var31)) >> ((36) & 7)
}

public enum Enum990 {
    defaultValue
}
public func func1052(param1053: Option<UInt16>): Float64 { // block id: 1054
    try { // block id: 1057
        if (false) {
            [false, true, false, false, true, true, true, false, false, false]
        } else {
            var914
        }
        var var1064: Int8 = Int8(-115)
        var1064++
        if (var39) {
            var1069
        } else {
            var1069
        }
    } finally { // block id: 1087
        var92
        var var1091: Int16 = Int16(Int8(Int8(UInt8(245))))
        var1091++
        var1069
    }[9]
}

public func func1049(): Float64 { // block id: 1050
    var var1125: Option<UInt16> = Option<UInt16>.None
    let var1129: Int16 = Int16(81)
    var var1132: Range<Int64> = (8 & 127..=1 & 127 : (-95) | 1)
    let var1158: UInt16 = UInt16(Int8(-120))
    if (var39) { // block id: 1103
        let var1105: Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)> = ([(), (), (), (), (), (), (), (), (),
        ()] as (Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8))
        var1105
        let var1112: Int8 = Int8(UInt8(UInt8(UInt8(Int8(-24)))))
        ((Int8(-14) & 127..=var1112 & 127 : (34 | 1)), var902, var1112, var1122, var1125, var1112, var1129, var1132)
    } else if (false) { // block id: 1135
        var var1142: Int8 = Int8(-72)
        if (var377) {
            ((Int8(70) & 127..Int8(-105) & 127 : (-119) | 1), var902, var1142, "np<;^ gAWa{", Option<UInt16>.None,
                var1142, var1129, (23 & 127..1 & 127 : 99 | 1))
        } else {
            ((Int8(4) & 127..Int8(113) & 127 : (-83) | 1), var902, Int8(58), var1154, Option<UInt16>.Some(var1158),
                var1142, Int16(28), ((-10) & 127..(-2) & 127 : 59 | 1))
        }
    } else { // block id: 1164
        ()
        var1167
    }[4] |> func1052
}

public func func973(param974: Range<Int32>): Float64 { // block id: 975
    let var983: ((Range<UInt64>) -> Int64) -> Unit = func977
    func985 |> var983
    var var1037: Unit = ()
    match (var993) {
        case caseVar997 =>
            var932 -= var171
            let var1004: Int16 = Int16(Int16(Int16(93)))
            (var1004, var902, (Int8(-112) & 127..Int8(0) & 127 : ((-112) | 1)))
            [(), (), (), (), (), (), (), (), (), ()]

        case caseVar1016: Aggregate339 => [(), (), (), (), (), (), (), (), (), ()]

        case caseVar1021: Aggregate339 => [(), (), (), (), (), (), (), (), (), ()]

        case defaultValue =>
            (Int16(-81), UInt8(190), (Int8(65) & 127..=Int8(-73) & 127 : (-47) | 1))
            [var92, (), (), (), var1037, (), var92, (), var1037, var92]

        case _ => [(), (), (), (), (), (), (), (), (), ()]
    }[1]
    func1049()
}

public enum Enum1207 {
    defaultValue
}
public func func969(param970: UInt32): Array<Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>> { // block id: 971
    let var1192: (Range<Int32>) -> Float64 = {lambdaParameter1195: Range<Int32> => 8.0}
    (Int32(18) & 127..=Int32(79) & 127 : (-63) | 1) |> var1192
    var loopTimeVar1240: Int64 = 0
    do {
        loopTimeVar1240++
        match (Enum1207.defaultValue) {
            case caseVar1212 => ((-2) & 127..115 & 127 : (var371 | 1))

            case caseVar1220 =>
                var631
                ((-10) & 127..31 & 127 : 13 | 1)

            case caseVar1226: Enum990 => (var371 & 127..=var371 & 127 : (78 | 1))

            case _ =>
                Int32(23)
                var932 <<= ((var171) & 7)
                (27 & 127..=66 & 127 : (-86) | 1)
        }
    } while ((var323.var1203) && loopTimeVar1240 < 100)
    try { // block id: 1244
        let var1246: (UInt64,UInt16,Array<Bool>,Array<Float64>,Array<Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,
            UInt8)>>,Range<UInt32>,Range<Int32>) = (UInt64(Int8(UInt8(Int8(-117)))), UInt16(UInt8(10)), [
                ((Float32(-34.0) as (Int16,UInt8,Range<Int8>)) is ((Float64) -> (Class6,Range<UInt8>)) -> Float64),
                false,
                ("""
kAvjP
)Hx.-
""" is Unit),
                (Option<UInt16>.Some(UInt16(229)) is ((Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)) -> (Class6,
                    Range<UInt8>)),
                false,
                ((UInt32(243) as Range<UInt16>) is Option<Unit>),
                (Class61() is Array<Bool>),
                false,
                ([Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.None,
                Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.Some(
                        ((UInt64(16) & 127..UInt64(0) & 127 : (-123) | 1), UInt16(160), Option<Unit>.Some(()), Float32(51.0),
                            UInt8(217))),
                Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.Some(
                        ((UInt64(143) & 127..UInt64(177) & 127 : 6 | 1), UInt16(123), Option<Unit>.None, Float32(-11.0),
                            UInt8(74))), Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.None,
                Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.None,
                Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.Some(
                        ((UInt64(2) & 127..=UInt64(184) & 127 : (-1) | 1), UInt16(64), Option<Unit>.None, Float32(-37.0),
                            UInt8(150))),
                Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.Some(
                        ((UInt64(251) & 127..=UInt64(134) & 127 : 21 | 1), UInt16(202), Option<Unit>.None, Float32(-85.0),
                            UInt8(30))),
                Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.Some(
                        ((UInt64(132) & 127..UInt64(164) & 127 : (94 | 1)), UInt16(196), Option<Unit>.Some(()), Float32(-71.0),
                            UInt8(138))), Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.None,
                Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.None] is ((Range<UInt64>) -> Int64) -> Unit),
                (() is UInt8)
            ], [Float64(Float32(Float32(35.0))), (-10.0), 66.0, (-58.0), (-109.0), (-110.0),
            Float64(Float32(Float32(-30.0))), Float64(Float32(16.0)), (-14.0), Float64(Float32(Float32(-77.0)))], [
                (UInt16(UInt16(15)) as (Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)),
                ((UInt64(63), UInt16(198), [false, false, true, false, false, false, false, true, true, false], [(-63.0),
                    102.0, 41.0, (-15.0), (-99.0), 39.0, 36.0, (-90.0), (-83.0), 32.0], [Option<(Range<UInt64>,UInt16,
                                Option<Unit>,Float32,UInt8)>.Some(
                            ((UInt64(10) & 127..UInt64(109) & 127 : (-13) | 1), UInt16(249), Option<Unit>.Some(()),
                                Float32(43.0), UInt8(58))),
                    Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.None,
                    Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.Some(
                            ((UInt64(248) & 127..UInt64(144) & 127 : (29 | 1)), UInt16(131), Option<Unit>.None, Float32(12.0),
                                UInt8(15))), Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.None,
                    Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.None,
                    Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.Some(
                            ((UInt64(229) & 127..UInt64(182) & 127 : (107 | 1)), UInt16(170), Option<Unit>.None, Float32(-37.0),
                                UInt8(164))), Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.None,
                    Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.Some(
                            ((UInt64(213) & 127..UInt64(238) & 127 : (55 | 1)), UInt16(149), Option<Unit>.Some(()),
                                Float32(126.0), UInt8(11))),
                    Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.Some(
                            ((UInt64(58) & 127..UInt64(53) & 127 : 21 | 1), UInt16(161), Option<Unit>.None, Float32(-127.0),
                                UInt8(100))),
                    Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.Some(
                            ((UInt64(23) & 127..UInt64(204) & 127 : (-105) | 1), UInt16(1), Option<Unit>.None, Float32(-100.0),
                                UInt8(30)))], (UInt32(210) & 127..=UInt32(99) & 127 : 34 | 1), (Int32(121) & 127..Int32(-90)&
                        127 : (63 | 1))) as (Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)),
                Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.Some(
                    ((UInt64(218) & 127..=UInt64(95) & 127 : ((-101) | 1)), UInt16(252), Option<Unit>.Some(()), Float32(-72.0),
                        UInt8(203))),
                ((###"q|D[u`vFQ%"###, (Int32(58) & 127..=Int32(-34) & 127 : (81 | 1)), Float32(48.0), (UInt16(113),
                        UInt16(146), Float32(13.0), UInt16(213), (-78.0), (-39.0), (UInt16(188) & 127..=UInt16(152) & 127 : ((-2)|
                            1)), Int16(102)), """
FeT5 
>?r^Q
""", UInt64(12)) as (Range<UInt64>,UInt16,Option<Unit>,
                    Float32,UInt8)),
                ([Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.None,
                Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.Some(
                        ((UInt64(176) & 127..UInt64(102) & 127 : (9 | 1)), UInt16(189), Option<Unit>.None, Float32(-85.0),
                            UInt8(205))), Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.None,
                Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.None,
                Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.None,
                Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.None,
                Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.None,
                Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.None,
                Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.None,
                Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.Some(
                        ((UInt64(130) & 127..=UInt64(251) & 127 : 35 | 1), UInt16(53), Option<Unit>.Some(()), Float32(0.0),
                            UInt8(59)))] as (Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)),
                (UInt64(242) as (Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)),
                Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.None,
                ((Int16(51) & 127..Int16(-113) & 127 : (-111) | 1) as (Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)),
                (Int32(Int8(98)) as (Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)),
                Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.Some(
                    ((UInt64(187) & 127..UInt64(55) & 127 : ((-81) | 1)), UInt16(182), Option<Unit>.None, Float32(77.0),
                        UInt8(226)))
            ], (UInt32(Int8(77)) & 127..UInt32(UInt8(Int8(54))) & 127 : (Int64(UInt16(94)) | 1)), (Int32(-45) & 127..Int32(9)&
                127 : (-119) | 1))
        var1246
    } catch (_) { // block id: 1509
        var377 &&= false
        ()
        var var1574: Range<UInt32> = (UInt32(Int32(-50)) & 127..=UInt32(148) & 127 : (Int64(UInt16(223)) | 1))
        (var1516, UInt16(218), var914, var1069, var1522, var1574, (var385 & 127..=var385 & 127 : (122 | 1)))
    }[4]
}

public func func1710(param1711: Range<Int16>): Bool { // block id: 1712
    let var1777: Unit = ()
    var loopTimeVar1787: Range<UInt64> = (UInt64(57) & 127..=UInt64(234) & 127 : (65 | 1))
    for (i in loopTimeVar1787 where (var217[7] is (Option<Range<UInt16>>) -> Bool)) {
        ((UInt8(119) & 127..=UInt8(147) & 127 : 100 | 1), ("""
L B3?
xm_\\K
""", (Int32(96) & 127..=Int32(44) & 127 : 73|
                    1), Float32(25.0), var1728, "QV.N/r)a{s^", var1516), ())[2]
        var var1785: UInt8 = UInt8(207)
        match (var39) {
            case false => var1757 ^= UInt16(35)

            case false | true | true | true => ()

            case caseVar1766 =>
                var92
                false && true
                var92

            case false | true | true => var1777

            case _ =>
                var1516
                Enum1207.defaultValue
                var1785--
        }
    }
    var var1796: (Range<Int32>) -> Float64 = func973
    var var1799: Range<Int32> = (Int32(18) & 127..Int32(67) & 127 : 45 | 1)
    var var1837: Aggregate339 = Aggregate339()
    if (match ((var1799 |> var1796)) {
        case -47.0 =>
            UInt32(152) * UInt32(241)
            (-24.0)
            var39

        case _ =>
            ()
            [false, true, false, false, false, false, true, true, false, true]
            var957 != Float32(-32.0)
    }) { // block id: 1816
        var var1820: UInt16 = UInt16(UInt16(199))
        Option<Range<UInt16>>.Some((var1820 & 127..UInt16(47) & 127 : (var371 | 1)))
        var964
    } else if (var377) { // block id: 1827
        (Option<Unit>.Some(var1777) ?? ())
        [true, true, true, false, false, false, false, true, false, false][5]
    } else { // block id: 1835
        var1837
        match (var1122) {
            case _ => var964
        }
    }
}

public func func1847(param1848: (UInt16,UInt16,Float32,UInt16,Float64,Float64,Range<UInt16>,Int16)): Range<Int16> { // block id: 1849
    let var1870: (String,Range<Int32>,Float32,(UInt16,UInt16,Float32,UInt16,Float64,Float64,Range<UInt16>,Int16),String,
        UInt64) = ("""
-~/qK
li:e^
""", (Int32(-101) & 127..Int32(13) & 127 : 113 | 1), Float32(-110.0), (UInt16(UInt16(85)),
            UInt16(120), Float32(-124.0), UInt16(Int8(UInt8(162))), 23.0, Float64(Float64(Float32(-41.0))), (UInt16(172)&
                127..=UInt16(117) & 127 : (-46) | 1), Int16(109)), """
^@Sxa
zAcn>
""", UInt64(Int32(-7)))
    var var1908: Range<Int16> = (Int16(UInt16(182)) & 127..=Int16(UInt16(Int16(UInt8(92)))) & 127 : (Int64(UInt64(UInt16(Int8(114))))|
        1))
    try { // block id: 1851
        let var1860: Int8 = Int8(Int8(5))
        var var1904: Class6 = Class6()
        if (var39) {
            ((Int16(4), UInt8(14), (var1860 & 127..=Int8(56) & 127 : ((-1) | 1))), (var323, (UInt8(21) & 127..=UInt8(26)&
                        127 : 49 | 1)), (Int16(45) & 127..=Int16(123) & 127 : (-36) | 1), var1870, (), [false, true,
                true, false, false, true, false, false, false, true])
        } else {
            ((Int16(88), UInt8(72), (Int8(73) & 127..Int8(85) & 127 : (126 | 1))), (var1904, var413), var1908, var1870,
                var92, [true, false, true, true, false, false, false, false, true, true])
        }
        "\"E>2eBdGP?"
    } finally { // block id: 1924
        var loopTimeVar1930: Int64 = 0
        do {
            loopTimeVar1930++
            ()
        } while ((false) && loopTimeVar1930 < 100)
        "ND%]nJ^1-K"
    }
    let var2018: Int8 = Int8(Int8(UInt8(UInt8(104))))
    ((match (var517) {
        case _: Aggregate339 =>
            ()
            var932
            var323

        case caseVar1948: Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)> =>
            var92
            ()
            Class6()

        case caseVar1955: Range<Int8> => if (var39) {
                Class6()
            } else {
                Class61()
            }

        case _ =>
            var var1967: Enum1207 = Enum1207.defaultValue
            if (var964) {
                Enum1207.defaultValue
            } else {
                var1967
            }
            var31
            Class6()
    } as Range<Int16>) ?? if (false) {
        match (var1975) {
            case _ =>
                Option<Bool>.Some(true)
                var var1989: Range<Int16> = (Int16(-104) & 127..Int16(-64) & 127 : 113 | 1)
                if (false) {
                    var1989
                } else {
                    (Int16(-24) & 127..=Int16(36) & 127 : 117 | 1)
                }

            case _ => (Int16(-118) & 127..Int16(-74) & 127 : (-6) | 1)

            case _ =>
                Int64(var2001) ** UInt64(Int64(103) & 3)
                var1908

            case caseVar2009: Range<UInt32> =>
                (var189, (var2001, var902, (var2018 & 127..var2018 & 127 : (var371 | 1))), (Int16(-6), var902, (Int8(-22)&
                            127..=Int8(59) & 127 : (94 | 1))), var39)
                if (var964) {
                    (Int16(50) & 127..=Int16(-121) & 127 : ((-125) | 1))
                } else {
                    (Int16(0) & 127..=Int16(9) & 127 : 24 | 1)
                }

            case _ =>
                Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.Some(
                    (var890, UInt16(54), var130, Float32(-33.0), var902))
                var1908
        }
    } else {
        var1908
    })
}

public func func1697(param1698: (Range<UInt16>) -> (Class6,Range<UInt8>)): Int64 { // block id: 1701
    var323.var1705
    var var1845: (Range<Int16>) -> Bool = func1710
    var var2052: ((UInt16,UInt16,Float32,UInt16,Float64,Float64,Range<UInt16>,Int16)) -> Range<Int16> = func1847
    let var2102: (Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8) = ((UInt64(12) & 127..=UInt64(33) & 127 : (-107) | 1),
        UInt16(146), ([
            Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.None,
            Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.Some(
                ((UInt64(31) & 127..=UInt64(4) & 127 : 83 | 1), UInt16(54), Option<Unit>.None, Float32(100.0), UInt8(192))),
            (Option<Bool>.None as (Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)),
            Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.Some(
                ((UInt64(35) & 127..=UInt64(215) & 127 : ((-14) | 1)), UInt16(202), Option<Unit>.None, Float32(59.0),
                    UInt8(156))),
            Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.None,
            Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.Some(
                ((UInt64(103) & 127..=UInt64(34) & 127 : ((-121) | 1)), UInt16(92), Option<Unit>.Some(()), Float32(-15.0),
                    UInt8(130))),
            (((Int16(-126), UInt8(102), (Int8(19) & 127..=Int8(89) & 127 : 112 | 1)), (Class61(), (UInt8(142) & 127..UInt8(161)&
                        127 : (-83) | 1)), (Int16(29) & 127..Int16(77) & 127 : (5 | 1)), ("""
re15d
Jr96c
""", (Int32(18)&
                        127..=Int32(-19) & 127 : 79 | 1), Float32(-106.0), (UInt16(84), UInt16(8), Float32(-19.0), UInt16(219),
                        62.0, 50.0, (UInt16(238) & 127..UInt16(171) & 127 : ((-49) | 1)), Int16(5)), "q.&yaim9E#", UInt64(24)),
                (), [false, true, true, false, false, true, true, false, false, true]) as (Range<UInt64>,UInt16,Option<Unit>,
                Float32,UInt8)),
            Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.None,
            ((UInt64(246), UInt16(168), [true, false, true, true, false, false, true, true, false, false], [(-63.0),
                (-36.0), 45.0, (-110.0), (-57.0), (-112.0), 30.0, (-83.0), (-65.0), 107.0], [Option<(Range<UInt64>,
                            UInt16,Option<Unit>,Float32,UInt8)>.None,
                Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.Some(
                        ((UInt64(109) & 127..=UInt64(162) & 127 : (49 | 1)), UInt16(145), Option<Unit>.Some(()), Float32(-44.0),
                            UInt8(8))), Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.None,
                Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.Some(
                        ((UInt64(30) & 127..=UInt64(13) & 127 : 115 | 1), UInt16(246), Option<Unit>.Some(()), Float32(-26.0),
                            UInt8(3))), Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.None,
                Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.None,
                Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.Some(
                        ((UInt64(130) & 127..UInt64(121) & 127 : 2 | 1), UInt16(35), Option<Unit>.None, Float32(-115.0),
                            UInt8(221))),
                Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.Some(
                        ((UInt64(228) & 127..=UInt64(104) & 127 : ((-86) | 1)), UInt16(207), Option<Unit>.None, Float32(-1.0),
                            UInt8(156))), Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.None,
                Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.Some(
                        ((UInt64(110) & 127..UInt64(82) & 127 : (112 | 1)), UInt16(247), Option<Unit>.Some(()), Float32(52.0),
                            UInt8(170)))], (UInt32(235) & 127..UInt32(123) & 127 : 96 | 1), (Int32(-66) & 127..=Int32(28)&
                    127 : ((-43) | 1))) as (Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)),
            Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.Some(
                ((UInt64(107) & 127..UInt64(40) & 127 : (-121) | 1), UInt16(176), Option<Unit>.Some(()), Float32(106.0),
                    UInt8(96)))
        ] as Unit), Float32(52.0), UInt8(UInt8(Int8(36))))
    let var2278: Bool = ((-114) is Range<Int64>)
    var var2301: Range<UInt16> = (UInt16(5) & 127..UInt16(77) & 127 : ((-118) | 1))
    if ((match ([false, false, true, true, true, var39, true, true, false, true]) {
        case caseVar2068 =>
            ()
            var92
            var1728

        case _ =>
            if (var964) {
                var2079
            } else {
                ((UInt8(147) & 127..=UInt8(138) & 127 : (111 | 1)), var2102)
            }
            (var1757, UInt16(183), Float32(111.0), var1757, (-118.0), (-40.0), (UInt16(109) & 127..UInt16(190) & 127 : (27|
                    1)), var2001)

        case _ => if (var2278) {
                (var1757, UInt16(201), Float32(-48.0), var1757, (-20.0), (-108.0), (var1757 & 127..UInt16(20) & 127 : (var371|
                        1)), var2001)
            } else {
                (var1757, var1757, Float32(-80.0), UInt16(200), (-108.0), var31, var2301, var2001)
            }

        case _ => if (false) {
                var1728
            } else {
                var1728
            }
    } |> (var2052 ~> var1845))) { // block id: 2313
        (Option<Unit>.None ?? var92)
        var var2331: UInt8 = UInt8(171)
        try (resource = Class6()) { // block id: 2322
            var2001 %= ((var2001) | 1)
            var92
        } catch (_) { // block id: 2327
        } finally { // block id: 2328
            var2331 %= ((UInt8(12)) | 1)
            var2335
            ()
        }
        try (resource = Class6()) { // block id: 2339
            ()
            ()
        } finally { // block id: 2342
            UInt32(186)
            (UInt8(118) & 127..UInt8(125) & 127 : (var371 | 1))
            ()
        }
    } else if ((Aggregate339.var2353) != try { // block id: 2356
        UInt8(203)
    } finally { // block id: 2358
        var1757 %= ((UInt16(220)) | 1)
        ()
        UInt8(81)
    }) { // block id: 2364
    }
    try { // block id: 2366
        69
    } catch (e: Exception) { // block id: 2368
        (-39)
    } finally { // block id: 2370
        let var2376: Option<UInt16> = Option<UInt16>.None
        if (var377) {
            Option<UInt16>.Some(var560)
        } else {
            var2376
        }
        try { // block id: 2379
            var var2382: Rune = 'e'
            var2382 = var2382
        } catch (_) { // block id: 2385
            if (true) {
                var821
            } else {
                var821
            }
            ()
        }
        let var2403: UInt16 = UInt16(UInt16(38))
        match (Option<Range<UInt16>>.Some((UInt16(47) & 127..UInt16(145) & 127 : (var371 | 1)))) {
            case _: Range<UInt16> =>
                var1757 -= var2403
                ()
                (-122) ^ (-3)

            case _: (Int16,UInt8,Range<Int8>) =>
                var2001 |= Int16(119)
                101 >> (((-11)) & 7)

            case _: Range<UInt16> =>
                ()
                Option<Range<UInt16>>.Some((UInt16(62) & 127..UInt16(86) & 127 : (-107) | 1))
                (-16) / ((var371) | 1)

            case caseVar2430 => var2433

            case _ =>
                var92
                var2433 / (((-53)) | 1)
        }
    }
}

public func func2443(param262: Range<UInt16>): (Class6,Range<UInt8>) { // block id: 263
    try { // block id: 265
        let var268: (Float64) -> (Class6,Range<UInt8>) = {lambdaParameter271: Float64 => (Class6(), (UInt8(175) & 127..UInt8(93)&
                    127 : (-31) | 1))}
        115.0 |> var268
    } catch (_) { // block id: 277
        var var280: (Class6,Range<UInt8>) = (Class61(), (UInt8(216) & 127..=UInt8(82) & 127 : 3 | 1))
        var var288: Int16 = Int16(11)
        match (var280) {
            case _ => var288 |= var288
        }
        var92
        try { // block id: 293
            ()
            (Class61(), (UInt8(51) & 127..=UInt8(94) & 127 : 60 | 1))
        } catch (e: Exception) { // block id: 298
            if (var39) {
                '8'
            } else {
                'U'
            }
            var280
        } finally { // block id: 304
            var var310: UInt8 = UInt8(223)
            (Class61(), (UInt8(166) & 127..=var310 & 127 : ((-113) | 1)))
        }
    } finally { // block id: 313
        try { // block id: 315
            Class61()
        } catch (e: Exception) { // block id: 317
            ()
            [false, false, true, true, false, false, true, false, true, false]
            Class61()
        }
        var var329: Int64 = Int64(UInt32(UInt16(Int16(-123))))
        (var323, (UInt8(252) & 127..UInt8(205) & 127 : (var329 | 1)))
    }
}

public func func2445(param2446: Range<UInt64>): (Range<UInt16>) -> (Class6,Range<UInt8>) { // block id: 2447
    func2443
}

public func func1641(): Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)> { // block id: 1642
    var var1675: (Range<UInt64>) -> Int64 = {lambdaParameter1678: Range<UInt64> => Int64(UInt32(91))}
    var loopTimeVar1684: Int64 = 0
    while ((match {
            case var964 => true
            case (Option<Bool>.Some(true) ?? true) =>
                var371--
                ()
                true && false
            case _ =>
                var var1666: Float64 = Float64(Float32(Float32(-45.0)))
                var1666 /= Float64((Int32(50.0)) | 1)
                var964
        }) && loopTimeVar1684 < 100) {
        loopTimeVar1684++
        func977(var1675)
        Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.None
    }
    let var2450: (Range<UInt64>) -> (Range<UInt16>) -> (Class6,Range<UInt8>) = func2445
    let var2464: Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)> = Option<(Range<UInt64>,UInt16,Option<Unit>,
            Float32,UInt8)>.None
    let var2527: Class61 = Class61()
    func func1689(param1690: ((UInt16,UInt16,Float32,UInt16,Float64,Float64,Range<UInt16>,Int16)) -> Bool, 
        namedParam1693!: Option<Range<UInt16>>): (Range<UInt8>,(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)) { // block id: 1694
        func977((var2450 ~> func1697))
        (UInt32(try { // block id: 2455
                UInt16(162)
            } finally { // block id: 2457
                var2335
                if (var39) {
                    [Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.None, var2464,
                    Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.Some(
                            ((UInt64(232) & 127..var1516 & 127 : (50 | 1)), var1757, Option<Unit>.Some(()), var957, UInt8(49))),
                    var2464, var821, Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.None, var821,
                    Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.Some(
                            ((UInt64(111) & 127..UInt64(22) & 127 : 33 | 1), UInt16(224), var130, Float32(-74.0), var902)),
                    var821, var821]
                } else {
                    [var2464, Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.None, var2464,
                    Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.None, var2464, var821, var2464, var2464,
                    Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.Some(
                            ((UInt64(203) & 127..=UInt64(157) & 127 : 51 | 1), UInt16(249), var2504, Float32(-67.0),
                                UInt8(30))), var2464]
                }
                Int64(var1757) ** UInt64(var560 & 3)
            }) & 127..if (var377) { // block id: 2514
            var932
        } else if ((Option<Bool>.None ?? false)) { // block id: 2519
            Float32(72.0)
            var932
        } else { // block id: 2522
            UInt32(94)
        } & 127 : (var2433 | 1))
        var2527.var2530
    }

    let var2546: ((UInt16,UInt16,Float32,UInt16,Float64,Float64,Range<UInt16>,Int16)) -> Bool = func711
    Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.Some(func1689(var2546, namedParam1693: var517)[1])
}

public func func907(param908: Array<Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>>): Option<(Range<UInt64>,
    UInt16,Option<Unit>,Float32,UInt8)> { // block id: 909
    let var925: Int8 = Int8(-29)
    var var1587: (UInt32) -> Array<Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>> = {lambdaParameter1590: UInt32 =>[Option<(Range<UInt64>,
                    UInt16,Option<Unit>,Float32,UInt8)>.None,
        Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.Some(
                ((UInt64(158) & 127..=UInt64(176) & 127 : 79 | 1), UInt16(214), Option<Unit>.Some(()), Float32(-39.0),
                    UInt8(179))),
        Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.Some(
                ((UInt64(222) & 127..=UInt64(66) & 127 : (77 | 1)), UInt16(141), Option<Unit>.None, Float32(-101.0),
                    UInt8(31))), (Float64(Float32(-60.0)) as (Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)),
        Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.Some(
                ((UInt64(106) & 127..UInt64(86) & 127 : 80 | 1), UInt16(176), Option<Unit>.None, Float32(70.0), UInt8(197))),
        ((-74) as (Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)),
        (Int32(-14) as (Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)),
        Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.Some(
                ((UInt64(99) & 127..UInt64(211) & 127 : (33 | 1)), UInt16(197), Option<Unit>.None, Float32(-101.0), UInt8(116))),
        Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.None,
        Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.None]}
    if (if (var914[7]) { // block id: 917
        var39 &&= var377
        ()
        Int8(-35) != var925
    } else if (if (true) { // block id: 929
        var932 <<= ((var171) & 7)
        true
    } else { // block id: 936
        var var939: Int8 = Int8(-31)
        var939 = Int8(-52)
        var var944: Float64 = Float64(Float32(Float32(Float32(Float32(46.0)))))
        var944 += var944
        var39 || var377
    }) { // block id: 954
        -var957
        true
    } else { // block id: 960
        var377 && var964
    }) {
        (UInt32(145) |> var1587)[4]
    } else {
        func1641()
    }
}

public func func812(param813: Option<UInt16>): Range<UInt64> { // block id: 814
    [
        if (var377) {
            var821
        } else {
            var821
        },
        if (true) {
            Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.None
        } else {
            Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.Some(
                (var890, var560, Option<Unit>.Some(var92), Float32(-28.0), var902))
        },
        Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.None,
        (var1522 |> func907),
        var821,
        var1522[9],
        match (true) {
            case caseVar2560 =>
                var var2564: (Int16,UInt8,Range<Int8>) = (Int16(-1), UInt8(211), (Int8(120) & 127..Int8(-21) & 127 : 119|
                        1))
                (var2564, (var323, (UInt8(193) & 127..UInt8(204) & 127 : (var371 | 1))), (Int16(103) & 127..=Int16(105) &
                        127 : (-1) | 1), var2577, (), [true, true, false, true, false, false, false, true, true, false])
                var var2613: (Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8) = ((UInt64(Int64(UInt64(111))) & 127..UInt64(51)&
                        127 : ((-41) | 1)), UInt16(UInt16(UInt16(231))), (Class61() as Unit), Float32(-44.0), UInt8(UInt8(UInt8(UInt8(56)))))
                if (true) {
                    var821
                } else {
                    Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.Some(var2613)
                }

            case _ => if (var964) {
                    Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.Some(var2637)
                } else {
                    Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>.None
                }
        },
        (Option<(Int16,UInt8,Range<Int8>)>.Some(var2652) as (Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)),
        ((var2001 & 127..Int16(-95) & 127 : (var2433 | 1)) as (Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)),
        var821
    ][9]
    let var2683: Option<Float32> = Option<Float32>.Some(Float32(-62.0))
    var loopTimeVar2687: Range<UInt64> = (UInt64((-50)) & 127..UInt64(Int32(-36)) & 127 : (Int64(Int8(-93)) | 1))
    for (i in loopTimeVar2687 where false) {
        (var2683 ?? var957)
    }
    let var2731: Int64 = Int64(UInt32(UInt8(UInt8(UInt8(76)))))
    let var2762: Range<Int8> = (Int8(67) & 127..=Int8(79) & 127 : 3 | 1)
    (if (var377 && var377) { // block id: 2700
        var var2703: UInt8 = UInt8(Int8(62))
        var2703 %= ((var2703) | 1)
        var var2709: UInt64 = UInt64(172)
        var2709 -= var2709
        var2709
    } else if (match {
        case var39 =>
            Option<Unit>.None
            ()
            var39
        case false =>
            ()
            Float32(-88.0)
            true
        case _ =>
            let var2746: Range<UInt16> = (UInt16(166) & 127..=UInt16(39) & 127 : (-85) | 1)
            (var1154, (Int32(124) & 127..var385 & 127 : (var2731 | 1)), Float32(35.0), (var560, UInt16(143), var957,
                    UInt16(130), (-103.0), var31, var2746, var2001), "jS[ntd<bd/", UInt64(183))
            var964
    }) { // block id: 2752
        ()
        var1516
    } else { // block id: 2755
        if (var964) {
            (var2001, var902, var2762)
        } else {
            var2652
        }
        if (false) {
            [(), (), (), (), (), (), (), (), (), ()]
        } else {
            var217
        }
        var1516
    } & 127..UInt64(Int64(try { // block id: 2772
        var2335
        var2079
        var1516 * UInt64(41)
    } catch (e: Exception) { // block id: 2778
        """
H`S\\5
;#@Hs
"""
        var1516
    }) ** (match (((var902 & 127..UInt8(67) & 127 : ((-63) | 1)), (###"Zwd-s3,~OW"###, (Int32(-16) & 127..=Int32(118) &
                127 : 82 | 1), Float32(48.0), (var560, var560, Float32(-106.0), var1757, var31, var31, (UInt16(112) & 127..=UInt16(75)&
                    127 : ((-110) | 1)), Int16(-34)), """
\\XQu7
`t]\"9
""", UInt64(152)), var2335)) {
        case _: Option<Float32> => var1516 | var1516

        case _: (UInt64,UInt16,Array<Bool>,Array<Float64>,Array<Option<(Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8)>>,
                Range<UInt32>,Range<Int32>) => UInt64(154) & UInt64(167)

        case _: Rune =>
            var932 &= var932
            ()
            UInt64(Int64(103) ** UInt64(var1516 & 3))

        case _ =>
            var92
            if (var964) {
                var993
            } else {
                var993
            }
            UInt64(87)
    } & 3) & 127) : (var2433 | 1))
}

public func func723(param724: Option<Range<UInt16>>): (UInt16,UInt16,Float32,UInt16,Float64,Float64,Range<UInt16>,Int16) {// block id: 725
    var92
    let var2838: (Option<UInt16>) -> Range<UInt64> = func812
    var var2846: Option<Option<UInt16>> = (Option<UInt16>.None as Option<UInt16>)
    func728(((var2846 ?? Option<UInt16>.None) |> var2838))
    var var2905: UInt16 = UInt16(47)
    var var2924: Array<Float64> = [25.0, 124.0, Float64(Float64(103.0)), (-96.0), 2.0, Float64(22.0), 57.0, 89.0,
    Float64(Float64((-120.0))), 88.0]
    var var2956: Range<Int8> = (Int8(125) & 127..=Int8(-85) & 127 : (18 | 1))
    let var2997: Range<UInt16> = (UInt16(UInt8(253)) & 127..UInt16(95) & 127 : ((-1) | 1))
    if (false) {
        ((Option<UInt16>.Some(UInt16(77)) ?? var1757), var1757 & UInt16(11), (Option<Float32>.Some(var957) ?? var957),
            var2871[1], match ((var1516 & 127..=var2897 & 127 : (var371 | 1))) {
                case _ =>
                    var2905++
                    if (true) {
                        (var323, (UInt8(201) & 127..=var902 & 127 : (var371 | 1)))
                    } else {
                        (var323, (UInt8(187) & 127..var902 & 127 : ((-48) | 1)))
                    }
                    (-112.0)
            }, var2924[6], (UInt16(136) & 127..=UInt16(83) & 127 : (-6) | 1), var2001)
    } else {
        (((var189, (Int16(108), UInt8(199), var2956), var2652, true) as (UInt16,UInt16,Float32,UInt16,Float64,Float64,
            Range<UInt16>,Int16)) ?? try { // block id: 2964
            var1728
        } catch (e: Exception) { // block id: 2966
            if (var39) {
                (UInt16(136), UInt16(25), var957, var2905, var31, var31, (UInt16(218) & 127..=UInt16(123) & 127 : (var2433|
                        1)), var2981)
            } else {
                var1728
            }
        } finally { // block id: 2984
            ()
            if (var39) {
                var1728
            } else {
                (var1757, var1757, Float32(76.0), var1757, var31, 14.0, var2997, var2981)
            }
        })
    }
}

public func func683(param684: Int32, optionalParam685!: Aggregate339 = Aggregate339()): Unit { // block id: 688
    let var693: Class61 = Class61(4, (UInt64(186) & 127..UInt64(151) & 127 : (-108) | 1),
        namedParam698: ((-5) & 127..Int64((-90)) & 127 : (Int64(UInt64(22)) | 1)))
    let var3568: Option<UInt16> = Option<UInt16>.Some(UInt16(117))
    var693.func3273(
        namedParam3274: ((var3559 & 127..=var3559 & 127 : (52 | 1)), UInt8(121), var3559, var1154, var3568, Int8(78),
            Int16(-32), (98 & 127..(-10) & 127 : ((-109) | 1))), namedParam3275: var377)[3]
    try (resource = Class6()) { // block id: 3580
        if (false) {
            Option<(Int16,UInt8,Range<Int8>)>.Some(var2652)
        } else {
            Option<(Int16,UInt8,Range<Int8>)>.Some((var3588, var902, (Int8(-32) & 127..Int8(62) & 127 : (16 | 1))))
        }
        var var3609: (Range<UInt64>,UInt16,Option<Unit>,Float32,UInt8) = ((UInt64(247) & 127..UInt64(173) & 127 : (-125)|
                1), UInt16(Int16(95)), ((###"#.kE>F@n9["###, (Int32(-69) & 127..=Int32(23) & 127 : ((-50) | 1)), Float32(Float32(122.0)),
                (UInt16(144), UInt16(191), Float32(75.0), UInt16(155), 55.0, 75.0, (UInt16(138) & 127..UInt16(235) & 127 : (-121)|
                        1), Int16(-7)), "h~`L*R[)Ey", UInt64(UInt16(230))) as Unit), Float32(-36.0), UInt8(233))
        (var3604 ?? var3609)
        var2504.getOrThrow()
    } finally { // block id: 3639
        var loopTimeVar3646: Int64 = 0
        while ((var39) && loopTimeVar3646 < 100) {
            loopTimeVar3646++
            var92
            Option<Float32>.None
        }
        var var3745: Range<Int32> = (Int32(-32) & 127..Int32(76) & 127 : ((-56) | 1))
        try { // block id: 3648
            let var3654: Int32 = Int32(-37)
            (###"Vy(un6^I'."###, (Int32(-51) & 127..var3654 & 127 : ((-85) | 1)), Float32(59.0), var1728, var1154,
                var2897)
        } catch (_) { // block id: 3661
            if (var39) {
                var2652
            } else {
                var2652
            }
            var3667
            if (var3492) {
                ("""
`LtSI
C^x-v
""", var3745, Float32(-59.0), var1728, var1154, var2897)
            } else {
                var2577
            }
        }
        if (true) { // block id: 3757
            if (true) {
                var1167
            } else {
                ((var3134 & 127..var3134 & 127 : (1 | 1)), UInt8(189), Int8(-122), "BqA^\\T|9sY", var3568, var3771,
                    var2001, (2 & 127..27 & 127 : 2 | 1))
            }
            ((-12) & 127..84 & 127 : ((-51) | 1))
            var377 = var377
        } else if (var39) { // block id: 3784
            var2335
            ()
            var92
        }
    }
    var var3820: Range<Int32> = (Int32(Int8(UInt8(UInt8(21)))) & 127..Int32(-79) & 127 : (40 | 1))
    let var3895: ((Int16,UInt8,Range<Int8>),(Class6,Range<UInt8>),Range<Int16>,(String,Range<Int32>,Float32,(UInt16,
        UInt16,Float32,UInt16,Float64,Float64,Range<UInt16>,Int16),String,UInt64),Unit,Array<Bool>) = ((Int16(-99), UInt8(Int8(-31)),
            (Int8(UInt8(241)) & 127..Int8(-58) & 127 : (65 | 1))), (Class6(), (UInt8(194) & 127..=UInt8(120) & 127 : (Int64((-5))|
                1))), (Int16(Int8(Int8(-10))) & 127..Int16(Int8(66)) & 127 : ((-5) | 1)), ("RnLF42,*U@", (Int32(60) & 127..=Int32(UInt16(91))&
                127 : ((-78) | 1)), Float32(-22.0), (UInt16(74), UInt16(103), Float32(-98.0), UInt16(UInt16(193)), (-102.0),
                Float64((-45.0)), (UInt16(249) & 127..=UInt16(14) & 127 : (-67) | 1), Int16(UInt8(192))),
            ###"2JTs%Zoy ="###, UInt64(248)), (), [false, true, true, true, true, false, false, false, true, true])
    let var3947: (Class6,Range<UInt8>) = (Class6(), (UInt8(UInt8(18)) & 127..=UInt8(Int8(27)) & 127 : (Int64(Int16(42)) |
            1)))
    var loopTimeVar3991: Int64 = 0
    while ((match (match (var3792) {
            case _: Option<Unit> =>
                if (false) {
                    ("""
@90ly
AtAc'
""", var3820, Float32(7.0), var1728, "%x([*[(nIp", var1516)
                } else {
                    (var1154, (Int32(26) & 127..=Int32(40) & 127 : (-115) | 1), Float32(3.0), var1728, ###"ayyOo8=7J}"###,
                        UInt64(224))
                }
                (param684 & 127..Int32(-46) & 127 : (17 | 1))

            case (_: Class61, (caseVar3845, _: Option<Range<UInt16>>, _), _: Array<Unit>, _) => (Int32(95) & 127..=Int32(-122)&
                    127 : (-59) | 1)

            case caseVar3850: Interface64 =>
                var2001 -= var3855
                let var3859: Option<Float32> = (((93 & 127..=91 & 127 : (-113) | 1) as Float32) as Float32)
                var3859
                if (var377) {
                    var3820
                } else {
                    (var385 & 127..=var385 & 127 : ((-76) | 1))
                }

            case _ => var3820
        }) {
            case _ =>
                ()
                var3492

            case caseVar3880 =>
                var3883
                var2981 == Int16(45)

            case caseVar3890 =>
                if (var377) {
                    var3895
                } else {
                    (var2652, var3947, var3958, ("""
S/nGQ
8}K~h
""", (Int32(14) & 127..Int32(56) & 127 : (var2433 | 1)),
                            var957, var1728, var1122, var1516), var2335, var914)
                }
                false

            case _ =>
                //var3588 **= Int64(Int16(112) & 3)
                true
        }) && loopTimeVar3991 < 100) {
        loopTimeVar3991++
        [
            ###"*\\$ha8a{rrF"###,
            """
Qz`z@
,RnkT
""",
            """
*%d%T
o*J$*
""",
            """
U|qs3
\\a{3^=
""",
            "\\1B>jG43WV",
            ###"CR3p/,}&|w"###,
            ###"lkT5]z[;j%"###,
            ###"'xk/0*pfYB"###,
            """
?fU!q
K*\"p5
""",
            "\\g8E}(U0\"("
        ][2]
    }
}

public func func679(param680: Range<Int8>): (Option<Bool>,(Int16,UInt8,Range<Int8>),(Int16,UInt8,Range<Int8>),Bool) { // block id: 681
    let var4003: Int32 = Int32(-31)
    func683(
        try { // block id: 3993
            true
            Int32(98)
        } finally { // block id: 3996
            var3999 |= var902
            var4003
        },
        optionalParam685: match (var3559) {
            case -81 | -128 | 0 | 11 =>
                //var3999 **= Int64(UInt8(59) & 3)
                if (var39) {
                    Aggregate339()
                } else {
                    var4017
                }

            case _ =>
                var3134 ^= Int8(107)
                var4017

            case _ =>
                var902
                ()
                if (false) {
                    Aggregate339()
                } else {
                    Aggregate339()
                }
        }
    )
    let var4082: Option<(UInt16,UInt16,Float32,UInt16,Float64,Float64,Range<UInt16>,Int16)> = (Option<Range<Int16>>.None as (UInt16,
        UInt16,Float32,UInt16,Float64,Float64,Range<UInt16>,Int16))
    if (var39) {
        (if (try { // block id: 4038
            ()
            (-44) != 109
        } finally { // block id: 4043
            if (false) {
                param680
            } else {
                var3883
            }
            var2981 /= ((var2981) | 1)
            var39
        }) {
            if (var377) { // block id: 4054
                var2335
                (Option<Bool>.Some(true), var2652, var2652, false)
            } else { // block id: 4062
                var var4069: UInt8 = UInt8(UInt8(210))
                (var189, var2652, (Int16(-29), var4069, (Int8(82) & 127..Int8(102) & 127 : (-95) | 1)), var3492)
            }
        } else {
            (if (var39) {
                var3792
            } else {
                var3792
            })
        })
    } else {
        match (if (var377) {
            var4082
        } else {
            var4082
        }) {
            case _ =>
                ()
                var3792
        }
    }
}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_unexpected_declaration_in_scope
// ASSERT: scan parse_expected_left_brace
// ASSERT: scan parse_expected_case
// ASSERT: scan parse_expected_character
// ASSERT: scan parse_expected_expr_or_decl_in
// ASSERT: scan parse_expected_catch_or_finally_in_try
// ASSERT: scan parse_expected_while_in_do_while
// ASSERT: scan parse_unmatched_right_delimiter

/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 