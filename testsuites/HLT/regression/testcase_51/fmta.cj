/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %overflow_wrapping %f -o %output


var var8: Unit = ()
public let var17: UInt16 = UInt16(170)
var var28: UInt8 = UInt8(78)
public let var57: Int32 = Int32(-56)
public let var86: String = "\\roJea{y?H2"
public let var118: Bool = false
var var236: Bool = true
var var242: Enum92 = Enum92.defaultValue
public let var261: ?(Enum92,Unit,Int8,Int8,String) = (Int16(120) as (Enum92,Unit,Int8,Int8,String))
var var273: Int16 = Int16(UInt8(155))
public var var304: Option<String> = ((false, Int8(Int8(58)), Int32(-52), ()) as String)
public var var337: Bool = (Int8(-39) is (String) -> Enum92)
public var var512: Bool = false
let var616: Array<Range<Int32>> = [(Int32(-106) & 127..Int32(79) & 127 : (Int64(UInt16(113)) | 1)),
(Int32(UInt16(UInt16(7))) & 127..Int32(UInt32(Int32(-103))) & 127 : ((-33) | 1)),
(Int32(-50) & 127..=Int32(UInt32(UInt16(187))) & 127 : (Int64(UInt8(225)) | 1)),
(Int32(15) & 127..=Int32(16) & 127 : 23 | 1), (Int32(-42) & 127..=Int32(15) & 127 : (-97) | 1),
(Int32(5) & 127..=Int32(40) & 127 : 23 | 1), (Int32(Int16(UInt8(122))) & 127..=Int32(27) & 127 : ((-67) | 1)),
(Int32(UInt8(238)) & 127..Int32(99) & 127 : (Int64(UInt64(233)) | 1)), (Int32(-2) & 127..=Int32(62) & 127 : (-84) | 1),
(Int32(-11) & 127..Int32(UInt8(101)) & 127 : (84 | 1))]
public var var671: Int64 = (-105)
public let var679: (Bool,Int8,Int32,Unit) = (false, Int8(Int8(UInt8(205))), Int32(6), ())
var var695: ?Range<Int32> = (Int16(Int16(UInt16(UInt8(16)))) as Range<Int32>)
public var var726: (Range<UInt8>,(Bool,Int8,Int32,Unit),Range<Int32>) = ((UInt8(6) & 127..UInt8(184) & 127 : ((-70) | 1)),
    (false, Int8(Int8(-113)), Int32(Int16(-8)), ()), (Int32(-8) & 127..=Int32(-85) & 127 : ((-37) | 1)))
let var769: Range<Int32> = (Int32(-63) & 127..Int32(-28) & 127 : (-13) | 1)
let var866: ?UInt16 = Option<UInt16>.None
public let var888: UInt16 = UInt16(UInt16(109))
public let var897: Int8 = Int8(-13)
public var var928: UInt32 = UInt32(Int8(UInt8(72)))
let var996: ?Bool = Option<Bool>.None
public let var1000: (Option<Bool>,Range<UInt64>) = (((Enum92.defaultValue, (), Int8(-123), Int8(76), "y${var86}Lz2T7L}w[") as Bool),
    (UInt64(109) & 127..=UInt64(61) & 127 : 124 | 1))
let var1014: Range<UInt64> = (UInt64(25) & 127..UInt64(215) & 127 : 25 | 1)
var var1070: UInt16 = UInt16(139)
public var var1114: (Range<Int16>,UInt16,UInt64,Option<(Option<Bool>,Range<UInt64>)>) = ((Int16(-11) & 127..=Int16(Int8(Int8(-50)))&
        127 : (Int64(Int64(UInt32(139))) | 1)), UInt16(UInt8(138)), UInt64(UInt32(253)), Option<(Option<Bool>,Range<UInt64>)>.
    None)
var var1140: Range<UInt8> = (UInt8(Int8(Int8(-12))) & 127..UInt8(159) & 127 : (Int64(Int16(Int8(Int8(-77)))) | 1))
let var1151: Array<Option<Bool>> = [Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None,
((false, Int8(Int8(-128)), Int32(UInt32(5)), ()) as Bool), Option<Bool>.None,
((Enum92.defaultValue, (), Int8(UInt8(17)), Int8(UInt8(177)), ###"Q:#PEe${var86}b${var86})rd"###) as Bool),
Option<Bool>.None, Option<Bool>.None, Option<Bool>.None]
public var var1246: Float32 = Float32(Float32(79.0))
var var1454: ?Bool = Option<Bool>.None
public var var1526: Int32 = Int32(Int8(Int8(Int8(Int8(-37)))))
public var var1543: UInt8 = UInt8(188)
var var1570: Array<UInt8> = [UInt8(Int8(Int8(32))), UInt8(242), UInt8(Int8(-29)), UInt8(Int8(Int8(99))),
UInt8(UInt8(9)), UInt8(146), UInt8(19), UInt8(Int8(106)), UInt8(Int8(UInt8(UInt8(15)))), UInt8(209)]
public let var1766: Array<(Unit,String)> = Array<(Unit,String)>(10) {
    i => ((), """
ra)8y
z${var86}J(${var86};.
""")
}
public var var1894: Int8 = Int8(-127)
public var var1918: ?Array<Option<Bool>> = (Class402() as Array<Option<Bool>>)
let var1959: (Unit,String) = ((), """
R:9&O
p${var86}q&S$
""")
let var1978: Int64 = Int64(UInt8(UInt8(Int8(-4))))
var var1996: Array<Int64> = [64, Int64(UInt16(213)), Int64(UInt64(Int16(-42))), 31, 92, 16, Int64(UInt16(12)), (-126),
Int64(UInt64(71)), Int64(Int16(UInt16(112)))]
public var var2027: UInt64 = UInt64(5)
var var2130: ?Bool = Option<Bool>.None
public enum Enum92 {
    defaultValue |
    enumValue1416(Int8, UInt32, Range<UInt8>)
}

func func210(namedParam211!: Unit, optionalParam212!: Option<Bool> = Option<Bool>.Some(true), 
    optionalParam215!: (Enum92,Unit,Int8,Int8,String) = (Enum92.defaultValue, (), Int8(UInt8(236)), Int8(UInt8(UInt8(2))),
        ###"v,4K)P^?Bu"###), namedParam225!: String): Enum92 { // block id: 226
    let var231: Int16 = Int16(39)
    try { // block id: 228
        var231 ^ Int16(-73)
        var loopTimeVar240: Int64 = 0
        do {
            loopTimeVar240++
        } while ((var236) && loopTimeVar240 < 100)
        var242
    } finally { // block id: 244
        let var248: (Bool,Int8,Int32,Unit) = (false, Int8(71), Int32(-83), ())
        var248[3]
        (var261 ?? optionalParam215)
        match (9) {
            case 6 | 81 | 100 =>
                ()
                let var277: Int16 = Int16(Int8(-115))
                var273 &= var277
                Enum92.defaultValue
            case _ => Enum92.defaultValue
        }
    }
}

func func95(param96: String): Enum92 { // block id: 97
    var var101: (Unit,String) = ((), """
q~Y(&
g+e/=
""")
    var101[0]
    var var114: ?Bool = (Float32(-54.0) as Bool)
    var var134: UInt32 = UInt32(130)
    var loopTimeVar147: Int64 = 0
    do {
        loopTimeVar147++
        match (var134) {
            case 8 => ()

            case _ =>
                var8
                var28 -= var28
        }
    } while (((var114 ?? var118) && try { // block id: 121
        false
    } finally { // block id: 123
        var8
        var var127: Int64 = (-41)
        var127 /= (((-1)) | 1)
        true
    }) && loopTimeVar147 < 100)
    var var158: Int64 = Int64(UInt16(UInt8(29)))
    var var169: (Enum92,Unit,Int8,Int8,String) = (Enum92.defaultValue, (), Int8(22), Int8(Int8(Int8(-53))),
        """
6cfX}
D!yp.
""")
    let var188: Bool = false
    let var293: Option<Enum92> = (UInt64(161) as Enum92)
    if ((if (var118) { // block id: 152
        var8
        Int32(122)
    } else { // block id: 155
        var158 | (-111)
        var57 & Int32(-120)
    } is String)) {
        var169[0]
    } else {
        (if (match (Option<Bool>.None) {
            case caseVar184 =>
                !var188
                false

            case caseVar193 =>
                var158 += var158
                ()
                var188

            case caseVar202 => var118

            case _ =>
                var8
                var188
        }) {
            func210(namedParam211: (), optionalParam215: var169, namedParam225: param96)
        } else {
            (var293 ?? var242)
        })
    }
}

func func21(param22: Float32): Int64 { // block id: 23
    var var73: Int16 = Int16(UInt16(Int16(UInt16(180))))
    try { // block id: 25
        match (var28) {
            case 189 | 76 | 10 | 153 =>
                var var35: Float64 = 57.0
                var35 - 88.0
                let var39: UInt8 = UInt8(201)
                var39
                Int16(78)

            case _ => Int16(-68)
        }
        if (true) { // block id: 47
            var var50: UInt64 = UInt64(47)
            var50 /= ((UInt64(205)) | 1)
            UInt64(57)
        } else if (false) { // block id: 55
            var57
            Int32(-109)
            UInt64(90)
        } else { // block id: 61
            UInt64(51)
        }
    } finally { // block id: 63
        if (false) { // block id: 66
            ()
            UInt32(104) ^ UInt32(76)
            var73 /= ((var73) | 1)
        }
        var var81: Bool = (UInt32(UInt16(55)) is Int32)
        if (var81) {
            var86
        } else {
            ###"kwB#a+rXWD"###
        }
        UInt64(var57)
    }
    var var318: Int8 = Int8(49)
    match (((var304 ?? var86) |> func95)) {
        case defaultValue => var318 >>= ((Int8(-61)) & 7)

        case _: Int8 =>
            var318 - var318
            -var73
            ()

        case _ =>
            Option<Bool>.Some(false)
            var8
    }
    if (var337) { // block id: 340
        let var352: Int8 = Int8(40)
        if (true) { // block id: 343
            ()
            var28 <<= ((UInt8(215)) & 7)
            87
        } else if (var337) { // block id: 350
            var352
            (-7)
        } else { // block id: 355
            var var359: (Unit,String) = ((), """
oY3DS
a0MIf
""")
            if (var118) {
                var359
            } else {
                var359
            }
            var8
            89
        }
    } else { // block id: 366
        let var381: Int64 = (-43)
        [126, 22, var381, var381, var381, var381, var381, var381, 0, var381][7]
    }
}

public interface Interface405<T0, T1> {}

public interface Interface406 <: Interface405<Option<Array<Option<Bool>>>, Array<Range<Int32>>> {}

public open class Class402 <: Interface405<Option<Array<Option<Bool>>>, Array<Range<Int32>>> & Interface406 {
    public init() { // block id: 404
    }
}

public func func789(namedParam790!: UInt8, namedParam791!: (Range<UInt8>,(Bool,Int8,Int32,Unit),Range<Int32>), 
    optionalParam792!: (String) -> Enum92 = {lambdaParameter795: String => Enum92.defaultValue}): UInt16 { // block id: 800
    let var814: ??UInt16 = (([(Int32(-68) & 127..=Int32(124) & 127 : (-126) | 1),
        (Int32(94) & 127..Int32(53) & 127 : (80 | 1)), (Int32(-78) & 127..Int32(70) & 127 : ((-15) | 1)),
        (Int32(58) & 127..Int32(56) & 127 : (-107) | 1), (Int32(-85) & 127..Int32(-44) & 127 : 94 | 1),
        (Int32(-111) & 127..Int32(-32) & 127 : 66 | 1), (Int32(-104) & 127..Int32(80) & 127 : (-126) | 1),
        (Int32(-54) & 127..Int32(34) & 127 : 49 | 1), (Int32(115) & 127..=Int32(-21) & 127 : (85 | 1)),
        (Int32(-79) & 127..Int32(15) & 127 : ((-96) | 1))], (), UInt16(188), ((UInt8(54) & 127..UInt8(188) & 127 : 67 | 1),
            (false, Int8(-41), Int32(-54), ()), (Int32(32) & 127..=Int32(-99) & 127 : (-13) | 1)), ((UInt8(65) & 127..=UInt8(240)&
                127 : ((-109) | 1)), (false, Int8(-112), Int32(1), ()), (Int32(-113) & 127..=Int32(-19) & 127 : ((-60) |
                1)))) as Option<UInt16>)
    ((if (var512) {
        var814
    } else {
        var814
    } ?? var866) ?? if (if (var236) { // block id: 871
        let var874: UInt64 = UInt64(Int16(-115))
        var874 <= UInt64(248)
    } else if (false) { // block id: 879
        true
    } else { // block id: 881
        true
    }) { // block id: 883
        var57
        UInt16(38)
    } else { // block id: 886
        var888
    })
}

func func558(param559: UInt32): Option<Bool> { // block id: 560
    func func577(namedParam578!: Option<(Range<UInt8>,(Bool,Int8,Int32,Unit),Range<Int32>)>, namedParam579!: Int64, 
        optionalParam580!: (Range<UInt8>,(Bool,Int8,Int32,Unit),Range<Int32>) = ((UInt8(174) & 127..UInt8(216) & 127 : (-95)|
                1), (true, Int8(UInt8(96)), Int32(Int8(118)), ()), (Int32(79) & 127..=Int32(-38) & 127 : 79 | 1))): Range<Int32> {// block id: 591
        UInt16(try { // block id: 594
                var8
                (Int8(86) & 127..Int8(-25) & 127 : 119 | 1)
                var28
            } finally { // block id: 598
                UInt8(214)
            })
        try { // block id: 603
            (UInt64(110) & 127..UInt64(192) & 127 : (106 | 1))
            (Int32(0) & 127..Int32(115) & 127 : 8 | 1)
            [(Int32(-101) & 127..=Int32(79) & 127 : (-102) | 1), (Int32(-52) & 127..Int32(-125) & 127 : 0 | 1),
            (Int32(-24) & 127..Int32(-101) & 127 : 12 | 1), (Int32(-69) & 127..Int32(4) & 127 : 18 | 1),
            (Int32(23) & 127..=Int32(19) & 127 : 11 | 1), (Int32(111) & 127..Int32(-78) & 127 : 82 | 1),
            (Int32(-89) & 127..=Int32(95) & 127 : 55 | 1), (Int32(-98) & 127..Int32(42) & 127 : (-58) | 1),
            (Int32(100) & 127..Int32(-58) & 127 : 100 | 1), (Int32(-38) & 127..Int32(54) & 127 : 19 | 1)]
        } catch (_) { // block id: 610
            if (var512) {
                var261
            } else {
                var261
            }
            var616
        } finally { // block id: 659
            if (false) {
                'P'
            } else {
                'b'
            }
            if (var236) {
                var616
            } else {
                var616
            }
        }[3]
    }

    let var912: Float32 = Float32(-80.0)
    func func571(param572: Option<String>): (Range<UInt8>,(Bool,Int8,Int32,Unit),Range<Int32>) { // block id: 573
        try { // block id: 575
            func577(namedParam578: Option<(Range<UInt8>,(Bool,Int8,Int32,Unit),Range<Int32>)>.None,
                namedParam579: var671,
                optionalParam580: ((UInt8(77) & 127..var28 & 127 : ((-30) | 1)), var679, (Int32(-95) & 127..Int32(-20) &
                        127 : (-5) | 1)))
        } catch (_) { // block id: 688
            (var695 ?? (Int32(-79) & 127..Int32(-107) & 127 : (-47) | 1))
        } finally { // block id: 702
            var var705: ?(Range<UInt8>,(Bool,Int8,Int32,Unit),Range<Int32>) = 
                Option<(Range<UInt8>,(Bool,Int8,Int32,Unit),Range<Int32>)>.Some(
                ((UInt8(75) & 127..=UInt8(166) & 127 : 68 | 1), ((((-116) & 127..109 & 127 : ((-28) | 1)) is Float64),
                        Int8(-112), Int32(-54), ()), (Int32(Int8(-40)) & 127..=Int32(Int16(-65)) & 127 : (14 | 1))))
            func577(namedParam578: var705, namedParam579: (-16), optionalParam580: var726)
            var var744: Range<Int32> = (Int32(UInt16(163)) & 127..Int32(-14) & 127 : (Int64(Int16(92)) | 1))
            var744
        }
        ()
        var loopTimeVar787: Int64 = 0
        let var901: Unit = ()
        var var916: Range<UInt8> = (UInt8(19) & 127..UInt8(UInt8(237)) & 127 : (Int64(UInt64(232)) | 1))
        (if (false) {
                [(Int32(-84) & 127..Int32(-31) & 127 : (var671 | 1)), (Int32(22) & 127..=var57 & 127 : (91 | 1)),
                (Int32(122) & 127..Int32(95) & 127 : (-19) | 1), (Int32(-24) & 127..Int32(-18) & 127 : (-54) | 1),
                var769, (Int32(-114) & 127..=Int32(98) & 127 : (119 | 1)), var769, var769, var769,
                (var57 & 127..Int32(62) & 127 : (74 | 1))]
            } else {
                var616
            }, while ((var118) && loopTimeVar787 < 100) {
                loopTimeVar787++
            }, func789(namedParam790: var28,
                namedParam791: ((UInt8(15) & 127..=UInt8(72) & 127 : 17 | 1), (var118, var897, var57, var901), (Int32(118)&
                        127..=Int32(-101) & 127 : 87 | 1)), optionalParam792: func95), var726, if (var118) { // block id: 908
                Float64(-27.0) ** Float64(Int32(var912) & 3)
                (var916, var679, var769)
            } else { // block id: 925
                var928 >>= ((var928) & 7)
                if (false) {
                    ((UInt8(166) & 127..=var28 & 127 : (var671 | 1)), var679, (Int32(35) & 127..=Int32(114) & 127 : (var671|
                            1)))
                } else {
                    ((var28 & 127..UInt8(142) & 127 : (50 | 1)), (var512, var897, var57, ()), (Int32(80) & 127..Int32(-38)&
                            127 : 95 | 1))
                }
            })[3]
    }

    (([13, 6, 55, (-119), (-92), (-24), (-11), (-15), 10, (-57)] as (Range<UInt8>,(Bool,Int8,Int32,Unit),Range<Int32>)) ??
        func571(Option<String>.None))[2]
    var var972: Option<Option<(Option<Bool>,Range<UInt64>)>> = (Int16(-39) as Option<(Option<Bool>,Range<UInt64>)>)
    let var976: ?(Option<Bool>,Range<UInt64>) = ((UInt8(Int8(Int8(126))) & 127..=UInt8(14) & 127 : (Int64(Int16(91)) | 1)) as (Option<Bool>,
        Range<UInt64>))
    ((var972 ?? var976) ?? try { // block id: 986
        if (true) {
            var304
        } else {
            var304
        }
        (22 & 127..112 & 127 : (-6) | 1)
        if (var512) {
            (var996, (UInt64(74) & 127..UInt64(116) & 127 : (-35) | 1))
        } else {
            var1000
        }
    } catch (e: Exception) { // block id: 1010
        (var996, var1014)
    } finally { // block id: 1016
        ()
        var8
        var1000
    })[0]
}

public func func1033(param1034: Range<UInt8>): Option<Array<Option<Bool>>> { // block id: 1035
    let var1064: Unit = ()
    var loopTimeVar1075: Int64 = 0
    do {
        loopTimeVar1075++
        var1070 %= ((UInt16(17)) | 1)
        [110, (-24), (-30), (-14), (-1), (-22), (-117), 46, 13, 118]
    } while (((Option<Bool>.None ?? match (var86) {
        case ###"l45@PpxMVj"### =>
            var8
            false

        case "A.lpnKvYAf" | """
nlNje
GJLlw
""" =>
            var616
            var512 || false

        case caseVar1055 =>
            ()
            var897
            var236

        case _ =>
            var8
            var1064
            var118
    })) && loopTimeVar1075 < 100)
    let var1133: UInt64 = UInt64(37)
    (if (true) { // block id: 1081
        var var1085: (Range<Int16>,UInt16,UInt64,Option<(Option<Bool>,Range<UInt64>)>) = ((Int16(125) & 127..Int16(-115)&
                127 : (Int64(Int16(UInt8(93))) | 1)), UInt16(Int8(1)), UInt64(244), (Int16(UInt16(203)) as (Option<Bool>,
                Range<UInt64>)))
        if (var236) {
            var1085
        } else {
            var1085
        }
    } else if (true) { // block id: 1101
        ()
        let var1104: (Range<Int16>,UInt16,UInt64,Option<(Option<Bool>,Range<UInt64>)>) = ((Int16(11) & 127..Int16(95) &
                127 : (-40) | 1), UInt16(63), UInt64(195), Option<(Option<Bool>,Range<UInt64>)>.None)
        var1104
    } else { // block id: 1110
        if (false) {
            var1114
        } else {
            ((Int16(90) & 127..Int16(87) & 127 : (-73) | 1), var888, var1133, Option<(Option<Bool>,Range<UInt64>)>.Some(
                    var1000))
        }
    }[3] as Array<Option<Bool>>)
}

public func func1190(param1191: Int16): Int8 { // block id: 1192
    var var1202: (Bool,Int8,Int32,Unit) = (true, Int8(Int8(-75)), Int32(Int32(Int32(-72))), ())
    match (try { // block id: 1195
        ((UInt8(43) & 127..var28 & 127 : ((-116) | 1)), var1202, var769)
    } catch (e: Exception) { // block id: 1212
        33
        ((UInt8(23) & 127..UInt8(140) & 127 : 106 | 1), var679, (Int32(13) & 127..Int32(-54) & 127 : (-22) | 1))
    } finally { // block id: 1218
        ((UInt8(132) & 127..UInt8(247) & 127 : (-114) | 1), (var512, Int8(-104), var57, var8), (Int32(-80) & 127..=Int32(2)&
                127 : 82 | 1))
    }) {
        case _: Int64 => var236 ||= true

        case caseVar1235: UInt16 =>
            var337
            var888 & UInt16(5)
            var8

        case _ =>
            var1246 += Float32(59.0)
            var8
    }
    var var1258: ((Range<Int8>,(Range<UInt16>,Range<UInt64>,Array<Range<Int32>>,Float64,Int8),Rune,Unit),Bool,Range<Int8>,
        Range<Int16>) = (((Int8(96) & 127..=Int8(-58) & 127 : (Int64((-25)) | 1)), ((UInt16(163) & 127..=UInt16(78) & 127 : (116|
                    1)), (UInt64(178) & 127..=UInt64(96) & 127 : (-30) | 1), [(Int32(40) & 127..=Int32(60) & 127 : (-87)|
                        1), (Int32(-33) & 127..=Int32(37) & 127 : ((-71) | 1)),
                (Int32(-96) & 127..Int32(-40) & 127 : (124 | 1)), (Int32(-17) & 127..Int32(-1) & 127 : 116 | 1),
                (Int32(-100) & 127..=Int32(91) & 127 : (-7) | 1), (Int32(76) & 127..Int32(-109) & 127 : (85 | 1)),
                (Int32(68) & 127..=Int32(-66) & 127 : (31 | 1)), (Int32(6) & 127..Int32(-126) & 127 : (76 | 1)),
                (Int32(-109) & 127..=Int32(86) & 127 : (80 | 1)), (Int32(-65) & 127..Int32(-77) & 127 : 45 | 1)], (-32.0),
                Int8(Int8(-16))), 'Z', ()), true, (Int8(-63) & 127..Int8(-121) & 127 : (-121) | 1), (Int16(19) & 127..Int16(48)&
            127 : (-79) | 1))
    var1258[0][1][4]
}

func func543(param544: (Unit, Option<Bool>, (Enum92,Unit,Int8,Int8,String), String) -> Enum92): Range<Int8> { // block id: 550
    func func553(namedParam554!: Int32, namedParam555!: Int8): Int8 { // block id: 556
        UInt32((Option<Int8>.Some(namedParam555) ?? Int8(-72))) |> {lambdaParameter1023: UInt32 => ((var1140 |> func1033)??
                var1151)[2]}
        -((Option<Int16>.None ?? var273) |> func1190)
    }

    (func553(namedParam554: Int32(53), namedParam555: func553(namedParam554: var57, namedParam555: var897)) & 127..=try {// block id: 1325
        var897
    } catch (_) { // block id: 1327
        Int8(126)
    } & 127 : (match ((Option<Range<Int64>>.None ?? ((-89) & 127..=16 & 127 : (-100) | 1))) {
        case _ => var671 * 33

        case _ =>
            ()
            ()
            var671
    } | 1))
}

public func func1401(namedParam211: Unit, optionalParam212: Option<Bool>, 
    optionalParam215: (Enum92,Unit,Int8,Int8,String), namedParam225: String): Enum92 { // block id: 226
    let var231: Int16 = Int16(39)
    try { // block id: 228
        var231 ^ Int16(-73)
        var loopTimeVar240: Int64 = 0
        do {
            loopTimeVar240++
        } while ((var236) && loopTimeVar240 < 100)
        var242
    } finally { // block id: 244
        let var248: (Bool,Int8,Int32,Unit) = (false, Int8(71), Int32(-83), ())
        var248[3]
        (var261 ?? optionalParam215)
        match (9) {
            case 6 | 81 | 100 =>
                ()
                let var277: Int16 = Int16(Int8(-115))
                var273 &= var277
                Enum92.defaultValue
            case _ => Enum92.defaultValue
        }
    }
}

func func398(param399: Range<UInt16>): Bool { // block id: 400
    let var469: Int8 = Int8(73)
    let var483: Int64 = 123
    let var1407: (Unit, Option<Bool>, (Enum92,Unit,Int8,Int8,String), String) -> Enum92 = {lambdaParameter1410: Unit, 
        lambdaParameter1411: Option<Bool>, lambdaParameter1412: (Enum92,Unit,Int8,Int8,String), lambdaParameter1413: String =>Enum92.
        enumValue1416(Int8(-111), UInt32(67), (UInt8(47) & 127..UInt8(107) & 127 : (14 | 1)))}
    let var1534: ?Int8 = Option<Int8>.None
    func func502(param503: Range<UInt32>): Int8 { // block id: 504
        var loopTimeVar532: Range<UInt64> = (UInt64(Int32(Int8(Int8(49)))) & 127..=UInt64(Int8(97)) & 127 : (Int64(Int16(-25))|
            1))
        for (i in loopTimeVar532 where (match {
            case var337 =>
                var512 &&= true
                var8
                UInt16(168) << ((var17) & 7)
            case _ => var17
        } is Rune)) {
            var var528: Option<Range<Int64>> = ('O' as Range<Int64>)
            (var528 ?? (107 & 127..15 & 127 : 2 | 1))
        }
        let var1359: Array<Range<Int8>> = [(Int8(77) & 127..=Int8(28) & 127 : (-95) | 1),
        (Int8(-96) & 127..=Int8(51) & 127 : 108 | 1), (Int8(-86) & 127..=Int8(103) & 127 : 90 | 1),
        (Int8(UInt8(UInt8(200))) & 127..Int8(-3) & 127 : ((-22) | 1)),
        (Int8(UInt8(UInt8(239))) & 127..Int8(Int8(25)) & 127 : (Int64(UInt8(47)) | 1)),
        (Int8(99) & 127..Int8(56) & 127 : 21 | 1), (Int8(Int8(110)) & 127..=Int8(-68) & 127 : (Int64(4) | 1)),
        (Int8(UInt8(UInt8(254))) & 127..=Int8(Int8(123)) & 127 : (Int64(UInt64(Int32(-19))) | 1)),
        (Int8(26) & 127..=Int8(Int8(67)) & 127 : ((-7) | 1)), (Int8(-55) & 127..=Int8(-66) & 127 : (-123) | 1)]
        var1407 |> {
            lambdaParameter1350: (Unit, Option<Bool>, (Enum92,Unit,Int8,Int8,String), String) -> Enum92 => try { // block id: 1355
                [(Int8(101) & 127..Int8(-46) & 127 : (-53) | 1), (Int8(-14) & 127..Int8(60) & 127 : (-116) | 1),
                (Int8(94) & 127..Int8(109) & 127 : 95 | 1), (Int8(43) & 127..=Int8(66) & 127 : (-84) | 1),
                (Int8(-96) & 127..=Int8(-116) & 127 : 78 | 1), (Int8(31) & 127..=Int8(100) & 127 : 44 | 1),
                (Int8(41) & 127..=Int8(41) & 127 : 3 | 1), (Int8(48) & 127..=Int8(16) & 127 : 53 | 1),
                (Int8(-7) & 127..Int8(0) & 127 : (-82) | 1), (Int8(6) & 127..=Int8(81) & 127 : (-40) | 1)]
            } catch (_) { // block id: 1357
                var1359
            }[4]
        }
        let var1459: ?Bool = (Float64(Float64(Float32(6.0))) as Bool)
        let var1497: Range<Int32> = (Int32(42) & 127..=Int32(-13) & 127 : 28 | 1)
        let var1505: UInt8 = UInt8(86)
        (match (if (true) {
            [var996, var996, var996, Option<Bool>.None, var996, Option<Bool>.Some(var512), Option<Bool>.Some(var118),
            Option<Bool>.None, var996, var996]
        } else {
            [Option<Bool>.None, Option<Bool>.Some(var118), var996, Option<Bool>.Some(true), Option<Bool>.None,
            Option<Bool>.Some(var236), var1454, Option<Bool>.Some(false), var1459, Option<Bool>.Some(false)]
        }) {
            case caseVar1468 =>
                Option<Int8>.None
                Option<Int8>.Some(Int8(-76))

            case _: UInt8 =>
                ([(var57 & 127..var57 & 127 : ((-31) | 1)), (Int32(-22) & 127..Int32(10) & 127 : (31 | 1)), var769,
                    var769, (Int32(106) & 127..var57 & 127 : (var483 | 1)), (Int32(-39) & 127..Int32(108) & 127 : 85 | 1),
                    var769, var769, var769, var1497], var8, UInt16(140), ((var28 & 127..=var1505 & 127 : (var671 | 1)), (var236,
                            var469, var57, var8), var1497), var726)
                Option<Int8>.None
            case _ => Option<Int8>.None
            case caseVar1522 =>
                var1526 <<= ((var1526) & 7)
                var1534

            case _ =>
                var273 >>= ((var273) & 7)
                var1543 *= var1543
                Option<Int8>.None
        } ?? try { // block id: 1548
            if (true) {
                "wv2@w3^8\")"
            } else {
                ###"Xm=%UhW%K-"###
            }
            ()
            var469
        } finally { // block id: 1555
            [(Int8(-96) & 127..=Int8(-64) & 127 : 111 | 1), (Int8(-99) & 127..=Int8(49) & 127 : (-75) | 1),
            (Int8(73) & 127..=Int8(-81) & 127 : (-60) | 1), (Int8(59) & 127..Int8(24) & 127 : 103 | 1),
            (Int8(-74) & 127..=Int8(122) & 127 : 12 | 1), (Int8(-40) & 127..=Int8(2) & 127 : 60 | 1),
            (Int8(-33) & 127..=Int8(-83) & 127 : (-35) | 1), (Int8(108) & 127..Int8(-29) & 127 : (-57) | 1),
            (Int8(34) & 127..Int8(116) & 127 : 53 | 1), (Int8(-32) & 127..=Int8(100) & 127 : (-86) | 1)]
            Int8(-92) * var469
        })
    }

    func func420(param421: UInt64, 
        optionalParam422!: Range<UInt32> = (UInt32(UInt16(88)) & 127..UInt32(178) & 127 : (Int64(UInt32(Int16(-83))) | 1))): UInt16 {// block id: 430
        let var451: ?Bool = (Class402() as Bool)
        let var462: Interface406 = Class402()
        func func438(param439: Rune, param440: UInt8, param441: Array<Int64>): UInt8 { // block id: 442
            try { // block id: 444
                var loopTimeVar458: Int64 = 0
                while ((var236) && loopTimeVar458 < 100) {
                    loopTimeVar458++
                    if (false) {
                        var451
                    } else {
                        Option<Bool>.Some(true)
                    }
                    var242
                }
                var var465: Interface406 = Class402()
                if (true) {
                    var462
                } else {
                    var465
                }
                var469 << ((var469) & 7)
            } finally { // block id: 472
                var loopTimeVar487: Int64 = 0
                do {
                    loopTimeVar487++
                    if (var236) {
                        param399
                    } else {
                        (UInt16(129) & 127..UInt16(203) & 127 : (var483 | 1))
                    }
                    ()
                } while ((var337) && loopTimeVar487 < 100)
                try { // block id: 489
                    ((), "%5+#IDWr:U")
                    Class402()
                } finally { // block id: 494
                    var var498: Class402 = Class402()
                    if (false) {
                        var498
                    } else {
                        Class402()
                    }
                }
                func502((var928 & 127..UInt32(5) & 127 : ((-98) | 1)))
            }
            let var1619: Array<UInt8> = Array<UInt8>(10) {i => UInt8(193)}
            [var1570,
            [UInt8(251), UInt8(95), UInt8(143), UInt8(188), UInt8(143), UInt8(4), UInt8(6), UInt8(105), UInt8(136),
                UInt8(239)],
            [var1543, UInt8(195), UInt8(0), param440, UInt8(15), UInt8(183), var1543, UInt8(4), UInt8(36), UInt8(209)],
            var1570, var1570, var1570,
            [UInt8(102), UInt8(146), UInt8(6), UInt8(94), UInt8(123), var1543, UInt8(181), UInt8(36), UInt8(92),
                UInt8(176)], var1619,
            [UInt8(95), UInt8(41), UInt8(208), UInt8(54), UInt8(136), UInt8(160), UInt8(215), UInt8(95), UInt8(27),
                UInt8(52)],
            [UInt8(151), UInt8(233), UInt8(30), UInt8(177), UInt8(114), UInt8(29), UInt8(122), UInt8(253), UInt8(46),
                UInt8(75)]][6][5]
        }

        func func433(param434: Interface406): UInt16 { // block id: 435
            let var1663: Array<Int64> = Array<Int64>(10) {i => Int64(UInt32(76))}
            UInt8(func438(
                    if (false) {
                        'M'
                    } else {
                        't'
                    },
                    try { // block id: 1651
                        UInt8(180) << ((var1543) & 7)
                    } finally { // block id: 1655
                        var695
                        if (var337) {
                            optionalParam422
                        } else {
                            (UInt32(13) & 127..=UInt32(182) & 127 : 38 | 1)
                        }
                        var28
                    },
                    var1663
                ))
            ()
            let var1715: Option<Option<Range<Int32>>> = Option<Option<Range<Int32>>>.Some(
                Option<Range<Int32>>.Some((Int32(-92) & 127..Int32(76) & 127 : 97 | 1)))
            try { // block id: 1689
                var loopTimeVar1701: Range<UInt64> = (UInt64(UInt32(38)) & 127..UInt64(12) & 127 : (Int64(Int64(Int8(56)))|
                    1))
                for (i in loopTimeVar1701 where var236) {
                    Enum92.enumValue1416(Int8(50), UInt32(52), (UInt8(45) & 127..=UInt8(246) & 127 : (120 | 1)))
                    var8
                }
                (var1715 ?? var695)
                let var1722: Option<Int16> = Option<Int16>.Some(Int16(Int16(UInt16(61))))
                match (var1722) {
                    case caseVar1729: Range<Int32> =>
                        'z'
                        var1070 % ((var1070) | 1)

                    case _ => var1070
                }
            } finally { // block id: 1738
                if (false) { // block id: 1741
                    ()
                    var8
                    UInt16(250)
                } else { // block id: 1745
                    var17
                }
            }
        }

        func433(
            try { // block id: 1748
                var769
                if (var337) {
                    Class402()
                } else {
                    Class402()
                }
            } catch (_) { // block id: 1754
                var671 -= (-76)
                Class402()
            }
        ) - var888
    }

    var var1761: UInt64 = UInt64(221)
    Class402.func409(namedParam410: func95, optionalParam413: func420(var1761), namedParam416: var1766[3])
    let var1804: (Range<UInt64>,Option<Range<Int32>>,Range<UInt8>,Range<Int64>,(Array<Range<Int32>>,Unit,UInt16,(Range<UInt8>,
        (Bool,Int8,Int32,Unit),Range<Int32>),(Range<UInt8>,(Bool,Int8,Int32,Unit),Range<Int32>))) = ((UInt64(Int8(-78)) &
            127..=UInt64(UInt32(193)) & 127 : (Int64(Int64(UInt32(114))) | 1)), (((Class402() as Bool), (UInt64(237) &
                127..=UInt64(16) & 127 : (75 | 1))) as Range<Int32>), (UInt8(49) & 127..=UInt8(UInt8(Int8(18))) & 127 : (Int64(Int8(UInt8(170)))|
            1)), ((-100) & 127..=(-13) & 127 : 78 | 1), ([(Int32(-57) & 127..=Int32(-55) & 127 : (77 | 1)),
            (Int32(79) & 127..=Int32(-81) & 127 : ((-22) | 1)), (Int32(97) & 127..Int32(-6) & 127 : (87 | 1)),
            (Int32(114) & 127..Int32(-62) & 127 : ((-112) | 1)), (Int32(-49) & 127..Int32(27) & 127 : ((-51) | 1)),
            (Int32(-5) & 127..Int32(-67) & 127 : 45 | 1), (Int32(-65) & 127..Int32(-128) & 127 : 119 | 1),
            (Int32(-123) & 127..Int32(53) & 127 : ((-100) | 1)), (Int32(6) & 127..=Int32(92) & 127 : (25 | 1)),
            (Int32(100) & 127..=Int32(-91) & 127 : (-60) | 1)], (), UInt16(209), ((UInt8(239) & 127..UInt8(95) & 127 : 86|
                    1), (true, Int8(98), Int32(-70), ()), (Int32(120) & 127..=Int32(-43) & 127 : ((-47) | 1))), ((UInt8(110)&
                    127..UInt8(55) & 127 : 102 | 1), (true, Int8(-51), Int32(71), ()), (Int32(22) & 127..Int32(64) & 127 : (121|
                    1)))))
    var loopTimeVar1903: Range<UInt64> = (UInt64(24) & 127..UInt64(81) & 127 : (69 | 1))
    for (i in loopTimeVar1903 where match (var1804[1]) {
        case _ =>
            var1894 |= var469
            false

        case _ =>
            var1804
            false
    }) {}
    match (try { // block id: 1910
        if (var118) {
            Option<UInt16>.Some(var888)
        } else {
            Option<UInt16>.None
        }
    } finally { // block id: 1916
        var1918
        ()
        var866
    }) {
        case caseVar1925 =>
            UInt64(253)
            (Int32(-27) & 127..Int32(38) & 127 : 89 | 1)
            false

        case caseVar1932 => true

        case _ =>
            var var1939: (Unit,String) = ((), """
ZBvWD
[,)}=
""")
            [var1939, var1939, (var8, "h F5VTruRg"), (var8, "KG72qZe-cb"), var1939, ((), "+5Z@iQ@hAT"), ((), var86),
            var1939, var1959, var1939]
            var337 || true
    }
}

func func392(param393: Option<(Enum92,Unit,Int8,Int8,String)>): Int64 { // block id: 394
    let var1968: (Range<UInt16>) -> Bool = func398
    if (((UInt16(249) & 127..=UInt16(32) & 127 : 60 | 1) |> var1968)) { // block id: 1971
        (false, Int8(75), var1526, ())
        var1978
    } else if ((Option<UInt16>.Some(UInt16(129)) is (Range<Int16>,UInt16,UInt64,Option<(Option<Bool>,Range<UInt64>)>))) {// block id: 1986
        Option<Option<UInt16>>.None
        (Int16(58) & 127..=Int16(-72) & 127 : 8 | 1)
        var671 * var1978
    } else { // block id: 1992
        (-42)
    } - var1996[7]
}

public func func2019(param2020: Float32): Option<(Enum92,Unit,Int8,Int8,String)> { // block id: 2021
    let var2064: Array<Option<Bool>> = [Option<Bool>.None, Option<Bool>.Some(false),
    ((((), "2V=:ka]2nC") as Range<Int32>) as Bool), Option<Bool>.Some((() is Option<Range<Int64>>)),
    Option<Bool>.Some(((Int8(-36) as Enum92) is Option<String>)), (UInt64(103) as Bool),
    (((UInt16(152) as Option<UInt16>) as UInt16) as Bool),
    (Option<Array<Option<Bool>>>.Some(
            [Option<Bool>.Some(false), Option<Bool>.Some(true), Option<Bool>.None, Option<Bool>.None,
            Option<Bool>.Some(true), Option<Bool>.None, Option<Bool>.Some(true), Option<Bool>.Some(false),
            Option<Bool>.None, Option<Bool>.None]) as Bool),
    Option<Bool>.Some((() is (Range<UInt8>,(Bool,Int8,Int32,Unit),Range<Int32>))),
    (Enum92.enumValue1416(Int8(-117), UInt32(Int32(93)), (UInt8(236) & 127..UInt8(164) & 127 : 66 | 1)) as Bool)]
    var var2146: Int16 = Int16(Int16(UInt16(UInt8(172))))
    match (try { // block id: 2024
        var2027 %= ((var2027) | 1)
        var1894 &= var897
        if (var512) {
            var1014
        } else {
            var1014
        }
    } finally { // block id: 2037
        var8
        (UInt64(99) & 127..var2027 & 127 : (var671 | 1))
    }) {
        case caseVar2045 =>
            let var2050: Option<Range<Int64>> = Option<Range<Int64>>.None
            if (false) {
                var2050
            } else {
                Option<Range<Int64>>.Some((74 & 127..var1978 & 127 : (var671 | 1)))
            }
            var1894 &= Int8(76)
            if (var236) {
                var1151
            } else {
                var2064
            }

        case caseVar2116: Array<Array<UInt8>> =>
            var8
            ()
            if (true) {
                var1151
            } else {
                [Option<Bool>.Some(var337), var996, var1454, Option<Bool>.None, var2130, Option<Bool>.None, var1454,
                Option<Bool>.Some(var236), var2130, var2130]
            }

        case _ =>
            if (true) {
                """
P~(]M
tg[06
"""
            } else {
                var86
            }
            var2146 <<= ((Int16(50)) & 7)
            if (var236) {
                [Option<Bool>.Some(true), var1454, var2130, Option<Bool>.Some(var512), Option<Bool>.None, var2130,
                Option<Bool>.Some(true), var996, Option<Bool>.None, var2130]
            } else {
                var1151
            }
    }
    var var2171: Float64 = Float64(Float32(Float32(-58.0)))
    let var2182: Int64 = Int64(UInt8(244))
    var2171 **= Float64(Int32(match ([var671, var671, var671, 74, var2182, var2182, var1978, var1978, 39, (-79)]) {
                case _ => var2171 * var2171
            }) & 3)
    match (match (if (var236) { // block id: 2199
        var8
        false
    } else { // block id: 2202
        [3, (-5), 68, 50, (-63), (-7), 66, 71, 0, 101]
        ()
        false
    }) {
        case _ =>
            let var2212: ?Int8 = (Option<Option<UInt16>>.Some(((((), "UNMk}LO5).") as Range<Int64>) as UInt16)) as Int8)
            if (false) {
                Option<Int8>.None
            } else {
                var2212
            }
            ([(Int32(0) & 127..=Int32(3) & 127 : 101 | 1), (Int32(34) & 127..=Int32(-73) & 127 : 97 | 1),
                (Int32(109) & 127..=Int32(26) & 127 : 46 | 1), (Int32(-23) & 127..Int32(-88) & 127 : (-80) | 1),
                (Int32(71) & 127..Int32(56) & 127 : (-8) | 1), (Int32(35) & 127..Int32(-70) & 127 : 31 | 1),
                (Int32(86) & 127..Int32(-44) & 127 : 65 | 1), (Int32(124) & 127..=Int32(23) & 127 : 42 | 1),
                (Int32(-128) & 127..Int32(56) & 127 : 8 | 1), (Int32(95) & 127..=Int32(30) & 127 : (-32) | 1)], (),
                UInt16(7), ((UInt8(190) & 127..=UInt8(90) & 127 : (-121) | 1), (false, var1894, var57, var8), (Int32(89)&
                        127..=Int32(105) & 127 : (-64) | 1)), var726)
    }) {
        case _ =>
            var2027 /= ((UInt64(202)) | 1)
            if (true) {
                Option<(Enum92,Unit,Int8,Int8,String)>.None
            } else {
                Option<(Enum92,Unit,Int8,Int8,String)>.Some((var242, var8, Int8(-75), Int8(100), "ab]-,$*5aK"))
            }
    }
}

main(): Int64 {
    try {
        try { // block id: 6
            var8
            var8
            UInt16(50)
        } finally { // block id: 12
            ()
            true
            var17 & var17
        }
        var var2017: (Option<(Enum92,Unit,Int8,Int8,String)>) -> Int64 = func392
        let var2249: (Float32) -> Option<(Enum92,Unit,Int8,Int8,String)> = func2019
        var1246 / Float32((Int32(Float32(40.0))) | 1) |> (var2249 ~> var2017)

        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var17 * var17), 64)
        crccheck.updateBuffer(UInt64(var28 * var28), 64)
        crccheck.updateBuffer(UInt64(var57 * var57), 64)
        crccheck.updateBuffer(UInt64(var273 * var273), 64)
        crccheck.updateBuffer(UInt64(var671 * var671), 64)
        crccheck.updateBuffer(UInt64(var888 * var888), 64)
        crccheck.updateBuffer(UInt64(var897 * var897), 64)
        crccheck.updateBuffer(UInt64(var928 * var928), 64)
        crccheck.updateBuffer(UInt64(var1070 * var1070), 64)
        crccheck.updateBuffer(UInt64(var1526 * var1526), 64)
        crccheck.updateBuffer(UInt64(var1543 * var1543), 64)
        crccheck.updateBuffer(UInt64(var1894 * var1894), 64)
        crccheck.updateBuffer(UInt64(var1978 * var1978), 64)
        crccheck.updateBuffer(UInt64(var2027 * var2027), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) {
        println("Exception: NoneValueException")
    }
    return 0
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        buffer = Array<Int64>(buffer_n, {i => 0})
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0,
                0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, {i => 0})
        var byte_c = 1
        var byte_index = 0
        while (value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, {i => 0})
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2 ** 2 * crc_output[i] + 2 ** 1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Class402 {
    static public func func409(namedParam410!: (String) -> Enum92, optionalParam413!: UInt16 = UInt16(UInt8(101)), 
        namedParam416!: (Unit,String)): Unit { // block id: 417
    }
}

extend Enum92 {}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_expected_decl
// ASSERT: scan parse_expected_left_brace
// ASSERT: scan parse_expected_name
// ASSERT: scan parse_unmatched_right_delimiter
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_unexpected_declaration_in_scope
// ASSERT: scan parse_expected_expr_or_decl_in


