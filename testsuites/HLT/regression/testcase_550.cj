/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args

let var_1701381094782_18 : Bool = (Int64(-18) is Int16)
public let var_1701381094782_86 : UInt32 = UInt32(136)
public var var_1701381094782_205 : UInt32 = UInt32(170)
var var_1701381094782_222 : UInt8 = UInt8(248)
var var_1701381094782_228 : Int16 = Int16(Int8(UInt8(214)))
let var_1701381094782_235 : Class_1701381094782_31 = Class_1701381094782_31()
let var_1701381094782_363 : Unit = ()
let var_1701381094782_370 : ?UInt8 = (Int8(62) as UInt8)
public let var_1701381094782_459 : Rune = r'l'
public let var_1701381094782_510 : Int64 = Int64(-119)
let var_1701381094782_516 : Array<Class_1701381094782_31> = [Class_1701381094782_31(), Class_1701381094782_31(), Class_1701381094782_31(), Class_1701381094782_31(), Class_1701381094782_31(), Class_1701381094782_31(), Class_1701381094782_31(), Class_1701381094782_31(), Class_1701381094782_31(), Class_1701381094782_31()]
public var var_1701381094782_667 : UInt8 = UInt8(UInt8(32))
public const var_1701381094782_725 : UInt64 = 247
var var_1701381094782_734 : UInt64 = UInt64(12)
public var var_1701381094782_739 : ?UInt8 = (Int64(UInt32(UInt16(UInt16(20)))) as UInt8)
public let var_1701381094782_746 : (Class_1701381094782_31, UInt32, UInt16, Unit, Class_1701381094782_31, UInt64, Rune) = (Class_1701381094782_631(), UInt32(Int32(UInt16(88))), UInt16(165), (), Class_1701381094782_613(), UInt64(201), r'h')
var var_1701381094782_782 : Interface_1701381094782_617 = Class_1701381094782_631()
public var var_1701381094782_851 : Int8 = Int8(-46)
public var var_1701381094782_858 : UInt16 = UInt16(UInt8(5))
public var var_1701381094782_907 : ?UInt64 = Option<UInt64>.None
public var var_1701381094782_991 : (Interface_1701381094782_622, Unit, (Range<UInt16>, Range<UInt64>, Range<Int64>, UInt8, UInt8), Interface_1701381094782_622) = (Class_1701381094782_631(), (), (((UInt16(UInt16(251))&127)..=(UInt16(UInt16(251))&127):(Int64(64)|1)), ((UInt64(UInt64(57))&127)..(UInt64(UInt64(224))&127):(Int64(106)|1)), ((Int64(Int64(UInt32(244)))&127)..(Int64(Int64(Int64(68)))&127):(Int64(UInt16(146))|1)), UInt8(Int8(98)), UInt8(UInt8(Int8(36)))), Class_1701381094782_613())
let var_1701381094782_1024 : Option<Interface_1701381094782_618> = (((UInt16(UInt16(134))&127)..=(UInt16(UInt16(46))&127):(Int64(-109)|1)) as Interface_1701381094782_618)
public open class Class_1701381094782_31 {
    public init() { // block id: 33

    }
;
    static let var_1701381094782_36 : Float64 = Float64(-96.0);
    public let var_1701381094782_531 : Array<UInt64> = [UInt64(109), UInt64(114), UInt64(110), UInt64(197), UInt64(153), UInt64(217), UInt64(46), UInt64(245), UInt64(85), UInt64(133)];
    private var var_1701381094782_560 : Int32 = Int32(1);
    static let var_1701381094782_625 : Class_1701381094782_613 = Class_1701381094782_613();
    private static prop var_1701381094782_636 : Class_1701381094782_631 { // block id: 637
        get() { // block id: 639
            [UInt64(117), UInt64(159), UInt64(130), UInt64(197), UInt64(208), UInt64(15), UInt64(62), UInt64(25), UInt64(65), UInt64(33)];
            Class_1701381094782_631()
        }

    };
    static var var_1701381094782_689 : UInt = UInt64(239);
    public var var_1701381094782_699 : UInt16 = UInt16(85);
    func func_1701381094782_535(param_1701381094782_536 : Array<UInt64>, namedParam_1701381094782_537 ! : Option<UInt8>) : UInt16 { // block id: 538
        let var_1701381094782_541 : ?Float32 = (((Float64(Float64(-34.0)) is () -> Class_1701381094782_31) as UInt8) as Float32);
        match (var_1701381094782_541) {
            case caseVar_1701381094782_549 => 
                var_1701381094782_363;
                var_1701381094782_363
            
            case caseVar_1701381094782_555 => 
                var_1701381094782_363;
                var_1701381094782_560 <<= ((var_1701381094782_560) & 7)
            
            case _ => 
                var_1701381094782_363
            
        };
        func func_1701381094782_569<T0>(namedParam_1701381094782_570 ! : Unit, namedParam_1701381094782_571 ! : Int64) : Bool { // block id: 572
            false
        }
;
        var var_1701381094782_577 : Int64 = Int64(UInt8(85));
        let var_1701381094782_600 : ?String = (((UInt16(UInt16(26))&127)..=(UInt16(UInt16(62))&127):(Int64(-86)|1)) as String);
        if (func_1701381094782_569<Range<UInt8>>(namedParam_1701381094782_570 : var_1701381094782_363, namedParam_1701381094782_571 : var_1701381094782_577 % ((Int64(-41)) | 1))) { // block id: 581
            const var_1701381094782_587 : UInt = 136;
            if (false) { ((UInt64(UInt64(195))&127)..=(UInt64(var_1701381094782_587)&127):(var_1701381094782_510|1)) } else { ((UInt64(var_1701381094782_587)&127)..(UInt64(UInt64(202))&127):(Int64(63)|1)) } ;
            (var_1701381094782_600 ?? """
<!Ju$
YaAAO
""")
        } else if (false || false) { // block id: 607
            const var_1701381094782_609 : String = "&x2R-nxQ;D";
            var_1701381094782_609
        } else { // block id: 611
            Class_1701381094782_613.var_1701381094782_628;
            Class_1701381094782_631.var_1701381094782_628;
            match (var_1701381094782_370) {
                case _ => 
                    var_1701381094782_600;
                    var_1701381094782_577;
                    const var_1701381094782_653 : String = "'QF\\uClXiX";
                    if (var_1701381094782_18) { var_1701381094782_653 } else { """
WX}${var_1701381094782_653}gz
a{Bx${var_1701381094782_653}3${var_1701381094782_653}_${var_1701381094782_653}
""" } 
                
            }
        };
        let var_1701381094782_680 : VArray<UInt32, $6> = [UInt32(216), UInt32(40), UInt32(247), UInt32(97), UInt32(16), UInt32(18)];
        var var_1701381094782_719 : Int8 = Int8(UInt8(5));
        match (VArray<UInt32, $6>(repeat: var_1701381094782_205)) {
            case caseVar_1701381094782_705 : Interface_1701381094782_616 => 
                -var_1701381094782_699
            
            case caseVar_1701381094782_711 : (Range<UInt16>, Range<UInt64>, Range<Int64>, UInt8, UInt8) => 
                var_1701381094782_699
            
            case _ => 
                var_1701381094782_719--;
                UInt16(23)
            
        }
    }
;
    let var_1701381094782_1043 : Int = Int64(-28)
}




func func_1701381094782_445(optionalParam_1701381094782_446 ! : Option<UInt8> = ("""
qrOLe
\\Q+rK
""" as UInt8), namedParam_1701381094782_449 ! : Array<UInt64>) : Array<Class_1701381094782_31> { // block id: 450
    ((UInt32(UInt32(if (var_1701381094782_18) { // block id: 455
        if (var_1701381094782_18) { var_1701381094782_459 } else { var_1701381094782_459 } ;
        var_1701381094782_86 << ((var_1701381094782_86) & 7)
    } else if (false) { // block id: 466
        UInt32(251)
    } else { // block id: 468
        var_1701381094782_86
    }))&127)..=(UInt32(if (var_1701381094782_18) { // block id: 472
        UInt32(15)
    } else { // block id: 474
        UInt32(42) + UInt32(2)
    })&127):(try { // block id: 479
        var var_1701381094782_484 : UInt = UInt64(Int64(40));
        if (true) { [var_1701381094782_484, UInt64(147), UInt64(177), var_1701381094782_484, var_1701381094782_484, UInt64(15), UInt64(117), var_1701381094782_484, var_1701381094782_484, var_1701381094782_484] } else { [UInt64(36), var_1701381094782_484, UInt64(168), var_1701381094782_484, var_1701381094782_484, UInt64(131), UInt64(209), UInt64(152), var_1701381094782_484, var_1701381094782_484] } ;
        Int64(37) ^ var_1701381094782_510
    } finally { // block id: 512
        -Int64(-36)
    }|1));
    var_1701381094782_516
}

public func func_1701381094782_440() : Class_1701381094782_31 { // block id: 441
    func_1701381094782_445(namedParam_1701381094782_449 : var_1701381094782_235.var_1701381094782_531)[1]
}


sealed public interface Interface_1701381094782_621<T0> {

}

public interface Interface_1701381094782_623 <: Interface_1701381094782_621<Range<Int8>> {

}

public interface Interface_1701381094782_622 <: Interface_1701381094782_621<Range<Int8>> & Interface_1701381094782_623 {

}

sealed public interface Interface_1701381094782_620<T0, T1> <: Interface_1701381094782_621<Range<Int8>> & Interface_1701381094782_622 {

}

public interface Interface_1701381094782_619<T0, T1, T2> <: Interface_1701381094782_620<Range<UInt16>, Range<Int64>> & Interface_1701381094782_623 {

}

sealed public interface Interface_1701381094782_618 <: Interface_1701381094782_619<VArray<UInt32, $6>, Option<UInt8>, Array<UInt64>> {

}

public interface Interface_1701381094782_617 <: Interface_1701381094782_618 {

}

sealed public interface Interface_1701381094782_616 <: Interface_1701381094782_617 & Interface_1701381094782_623 {

}

public open class Class_1701381094782_613 <: Class_1701381094782_31 & Interface_1701381094782_616 {
    public init() { // block id: 615

    }
;
    public static const var_1701381094782_628 : Unit = ()
    static init() {
    }
}

sealed public interface Interface_1701381094782_634<T0> <: Interface_1701381094782_620<Range<UInt16>, Range<Int64>> {

}

public open class Class_1701381094782_631 <: Class_1701381094782_613 & Interface_1701381094782_634<Array<UInt64>> & Interface_1701381094782_618 {
    public init() { // block id: 633

    }

    static init() {
    }
}


public func func_1701381094782_132(param_1701381094782_133 : Rune) : (UInt8, UInt32, UInt32, Class_1701381094782_31, Int16, String) { // block id: 134
    let var_1701381094782_342 : Int8 = Int8(-6);
    func func_1701381094782_136(namedParam_1701381094782_137 ! : UInt8, optionalParam_1701381094782_138 ! : UInt16 = UInt16(163), namedParam_1701381094782_140 ! : (Class_1701381094782_31, UInt32, UInt16, Unit, Class_1701381094782_31, UInt64, Rune), namedParam_1701381094782_141 ! : Class_1701381094782_31) : Unit { // block id: 142
        var var_1701381094782_147 : Int32 = Int32(Int16(UInt16(45)));
        const func func_1701381094782_153(optionalParam_1701381094782_154 ! : Int16 = 105, namedParam_1701381094782_156 ! : Unit, optionalParam_1701381094782_157 ! : Float64 = -45.0) : Unit { // block id: 159
            37.0;
            ()
        }
;
        var var_1701381094782_165 : Float64 = Float64(Float64(60.0));
        var var_1701381094782_169 : Float32 = Float32(45.0);
        try { // block id: 144
            var_1701381094782_147 += Int32(59);
            func_1701381094782_153(optionalParam_1701381094782_154 : Int16(-111), namedParam_1701381094782_156 : (), optionalParam_1701381094782_157 : var_1701381094782_165);
            var_1701381094782_169
        } finally { // block id: 171
            [(), (), (), (), (), (), (), (), (), ()][1];
            (Option<Float32>.Some(var_1701381094782_169) ?? var_1701381094782_169)
        };
        var var_1701381094782_310 : String = ###"5qy/2)j uS"###;
        match ((if (false) { // block id: 197
            var_1701381094782_147 *= var_1701381094782_147;
            UInt8(231)
        } else { // block id: 202
            var_1701381094782_205 |= var_1701381094782_86;
            UInt8(26)
        }, VArray<UInt32, $6>({ i => UInt32(179)})[1], (var_1701381094782_222, UInt32(226), UInt32(161), Class_1701381094782_31(), var_1701381094782_228, "lzG-2/uY5i")[2], var_1701381094782_235, match (Option<Float32>.Some(Float32(-2.0))) {
            case _ : Int64 => 
                var_1701381094782_228
            
            case _ => 
                ();
                var_1701381094782_147 -= var_1701381094782_147;
                var_1701381094782_228
            
        }, try { // block id: 253
            "=g2EU~k'y$"
        } finally { // block id: 255
            ();
            ((Int32(Int32(78))&127)..=(Int32(var_1701381094782_147)&127):(Int64(-80)|1));
            var var_1701381094782_262 : String = ###"*N G-=AAV2"###;
            var_1701381094782_262
        })) {
            case (_ : Range<UInt16>,_,caseVar_1701381094782_266,_ : Range<Int16>,_ : Range<UInt16>,caseVar_1701381094782_267) => 
                if (var_1701381094782_18) { ((Int32(Int32(-113))&127)..=(Int32(Int32(120))&127):(Int64(42)|1)) } else { ((Int32(var_1701381094782_147)&127)..=(Int32(Int32(27))&127):(Int64(29)|1)) } ;
                UInt8(192);
                let var_1701381094782_283 : UInt16 = UInt16(Int8(UInt8(UInt8(Int8(-56)))));
                UInt16(70) != var_1701381094782_283
            
            case (caseVar_1701381094782_291 : (Class_1701381094782_31, UInt32, UInt16, Unit, Class_1701381094782_31, UInt64, Rune),caseVar_1701381094782_292 : UInt8,caseVar_1701381094782_293,caseVar_1701381094782_294 : UInt64,caseVar_1701381094782_295 : Option<Float32>,caseVar_1701381094782_296 : Range<UInt32>) => 
                var_1701381094782_18
            
            case caseVar_1701381094782_301 : VArray<UInt32, $6> => 
                Float64(41.0) < var_1701381094782_165
            
            case _ => 
                var_1701381094782_310;
                var var_1701381094782_313 : Unit = ();
                var_1701381094782_313;
                true
            
        };
        func func_1701381094782_326(param_1701381094782_327 : Range<Int32>, optionalParam_1701381094782_328 ! : Range<UInt64> = ((UInt64(UInt64(246))&127)..(UInt64(UInt64(242))&127):(Int64(Int32(Int16(Int8(-26))))|1)), namedParam_1701381094782_336 ! : Int8, optionalParam_1701381094782_337 ! : Range<Int64> = ((Int64(Int64(-35))&127)..(Int64(Int64(97))&127):(Int64(17)|1))) : UInt8 { // block id: 339
            UInt8(var_1701381094782_342)
        }
;
        var loopTimeVar_1701381094782_349 : Int = 0;
        do {
            loopTimeVar_1701381094782_349++;

        } while (((Option<UInt8>.None ?? UInt8(178)) < func_1701381094782_326(((Int32(Int32(83))&127)..=(Int32(Int32(52))&127):(Int64(-47)|1)), optionalParam_1701381094782_328 : ((UInt64(UInt64(43))&127)..(UInt64(UInt64(66))&127):(Int64(-112)|1)), namedParam_1701381094782_336 : var_1701381094782_342)) && loopTimeVar_1701381094782_349 < 100 ) 
    }
;
    const var_1701381094782_384 : UInt32 = 103;
    func func_1701381094782_374(namedParam_1701381094782_375 ! : Float32) : UInt8 { // block id: 376
        var var_1701381094782_396 : Float32 = Float32(Float32(Float32(Float32(29.0))));
        try { // block id: 381
            var_1701381094782_384 + UInt32(37);
            (((UInt16(UInt16(17))&127)..=(UInt16(UInt16(248))&127):(Int64(-82)|1)), ((UInt64(UInt64(196))&127)..=(UInt64(UInt64(69))&127):(Int64(-104)|1)), ((Int64(Int64(124))&127)..(Int64(Int64(-116))&127):(Int64(67)|1)), var_1701381094782_222, var_1701381094782_222)
        } finally { // block id: 393
            var_1701381094782_396 -= Float32(-45.0);
            var var_1701381094782_403 : (Range<UInt16>, Range<UInt64>, Range<Int64>, UInt8, UInt8) = (((UInt16(UInt16(Int16(Int16(2))))&127)..=(UInt16(UInt16(70))&127):(Int64(-33)|1)), ((UInt64(UInt64(107))&127)..(UInt64(UInt64(217))&127):(Int64(-122)|1)), ((Int64(Int64(9))&127)..=(Int64(Int64(Int8(Int8(69))))&127):(Int64(-68)|1)), UInt8(Int8(66)), UInt8(Int8(-106)));
            var_1701381094782_403
        }[3] << ((UInt8(try { // block id: 425
            Int8(124) >> ((Int8(-21)) & 7)
        } catch (e: Exception) { // block id: 429
            var_1701381094782_342
        } finally { // block id: 431
            ();
            UInt64(133) | UInt64(30);
            var_1701381094782_342
        })) & 7)
    }
;
    var var_1701381094782_762 : Float64 = Float64(-63.0);
    func_1701381094782_136(namedParam_1701381094782_137 : (try { // block id: 356
        let var_1701381094782_358 : ?UInt8 = Option<UInt8>.Some(UInt8(233));
        var_1701381094782_358
    } finally { // block id: 361
        var_1701381094782_363;
        var var_1701381094782_367 : UInt = UInt64(111);
        var_1701381094782_367--;
        var_1701381094782_370
    } ?? func_1701381094782_374(namedParam_1701381094782_375 : Float32(-51.0))), optionalParam_1701381094782_138 : func_1701381094782_440().func_1701381094782_535([var_1701381094782_725, var_1701381094782_725, UInt64(214), var_1701381094782_725, var_1701381094782_725, var_1701381094782_725, UInt64(188), var_1701381094782_734, UInt64(15), UInt64(22)], namedParam_1701381094782_537 : var_1701381094782_739), namedParam_1701381094782_140 : var_1701381094782_746, namedParam_1701381094782_141 : try { // block id: 760
        var_1701381094782_762;
        var var_1701381094782_765 : (Float64, Range<Int64>, Class_1701381094782_31, Range<Int32>) = (Float64(Float64(61.0)), ((Int64(Int64(UInt8(43)))&127)..=(Int64(Int64(UInt16(Int8(52))))&127):(Int64(Int64(UInt32(218)))|1)), Class_1701381094782_31(), ((Int32(Int32(-64))&127)..(Int32(Int32(15))&127):(Int64(50)|1)));
        var_1701381094782_765
    } finally { // block id: 780
        var_1701381094782_782;
        ((Int32(Int32(-1))&127)..=(Int32(Int32(-87))&127):(Int64(-121)|1));
        let var_1701381094782_791 : Int32 = Int32(Int32(Int16(UInt8(121))));
        (var_1701381094782_762, ((Int64(Int64(-4))&127)..=(Int64(Int64(90))&127):(Int64(111)|1)), Class_1701381094782_631(), ((Int32(var_1701381094782_791)&127)..(Int32(Int32(54))&127):(var_1701381094782_510|1)))
    }[2]);
    let var_1701381094782_816 : (UInt8, UInt32, UInt32, Class_1701381094782_31, Int16, String) = (UInt8(98), UInt32(185), UInt32(224), Class_1701381094782_631(), Int16(7), "0o(F;H}V,y");
    let var_1701381094782_827 : UInt32 = UInt32(197);
    let var_1701381094782_869 : UInt16 = UInt16(51);
    match (try { // block id: 803
        var_1701381094782_762 = Float64(30.0);
        ();
        var_1701381094782_746
    } catch (_) { // block id: 809
        var var_1701381094782_812 : Int32 = Int32(-65);
        var_1701381094782_812 &= var_1701381094782_812;
        var_1701381094782_816;
        (var_1701381094782_235, var_1701381094782_827, UInt16(24), (), Class_1701381094782_613(), UInt64(140), var_1701381094782_459)
    } finally { // block id: 834
        ();
        var_1701381094782_746
    }) {
        case _ : (Float64, Range<Int64>, Class_1701381094782_31, Range<Int32>) => 
            Class_1701381094782_631();
            ();
            let var_1701381094782_843 : VArray<UInt16, $1> = [UInt16(210)];
            var_1701381094782_843
        
        case caseVar_1701381094782_847 : Range<UInt32> => 
            var_1701381094782_851 /= ((var_1701381094782_851) | 1);
            let var_1701381094782_862 : VArray<UInt16, $1> = [UInt16(209)];
            if (true) { VArray<UInt16, $1>(repeat: var_1701381094782_858) } else { var_1701381094782_862 } 
        
        case _ => 
            VArray<UInt16, $1>(repeat: var_1701381094782_869)
        
    }[0];
    (((Int16(-47) + Int16(27)) as (UInt8, UInt32, UInt32, Class_1701381094782_31, Int16, String)) ?? var_1701381094782_816)
}






main(): Int64 {
    try {
        let var_1701381094782_10 : UInt = UInt64(171);
        var loopTimeVar_1701381094782_40 : Int = 0;
        do {
            loopTimeVar_1701381094782_40++;
            Class_1701381094782_31.var_1701381094782_36;
            ()
        } while ((try { // block id: 6
            UInt64(172) % ((var_1701381094782_10) | 1);
            let var_1701381094782_13 : Bool = false;
            var_1701381094782_13
        } catch (_) { // block id: 15
            ();
            var_1701381094782_18
        } finally { // block id: 21
            ();
            var var_1701381094782_25 : Int32 = Int32(-86);
            var_1701381094782_25 %= ((Int32(-83)) | 1);
            var_1701381094782_18
        }) && loopTimeVar_1701381094782_40 < 100 ) ;
        const var_1701381094782_113 : Unit = ();
        const var_1701381094782_925 : String = """
%(?/\"
#4WyM
""";
        func func_1701381094782_46(optionalParam_1701381094782_47 ! : UInt32 = UInt32(112), optionalParam_1701381094782_49 ! : Class_1701381094782_31 = Class_1701381094782_31(), namedParam_1701381094782_51 ! : UInt32) : Class_1701381094782_31 { // block id: 52
            let var_1701381094782_67 : (UInt8, UInt32, UInt32, Class_1701381094782_31, Int16, String) = (UInt8(Int8(21)), UInt32(148), UInt32(154), Class_1701381094782_31(), Int16(Int16(UInt16(87))), "sKvg.,_Stk");
            let var_1701381094782_98 : UInt8 = UInt8(132);
            let var_1701381094782_943 : Option<Bool> = (VArray<UInt16, $1>(repeat: UInt16(UInt16(UInt16(62)))) as Bool);
            let var_1701381094782_970 : Option<(Float64, Range<Int64>, Class_1701381094782_31, Range<Int32>)> = (Class_1701381094782_631() as (Float64, Range<Int64>, Class_1701381094782_31, Range<Int32>));
            let var_1701381094782_979 : Range<Int64> = ((Int64(Int64(-80))&127)..=(Int64(Int64(Int32(Int32(-59))))&127):(Int64(113)|1));
            try { // block id: 54
                let var_1701381094782_883 : (Rune) -> (UInt8, UInt32, UInt32, Class_1701381094782_31, Int16, String) = func_1701381094782_132;
                let var_1701381094782_930 : String = """
i(nr,
R>J0'
""";
                func func_1701381094782_56(param_1701381094782_57 : Int8, param_1701381094782_58 : Int64, param_1701381094782_59 : UInt64, param_1701381094782_60 : Unit) : String { // block id: 61
                    var var_1701381094782_93 : Rune = r'Z';
                    try { // block id: 63
                        var_1701381094782_67[4];
                        var var_1701381094782_83 : Class_1701381094782_31 = Class_1701381094782_31();
                        (var_1701381094782_83, var_1701381094782_86, UInt16(31), (), Class_1701381094782_31(), UInt64(17), var_1701381094782_93)[3];
                        match (var_1701381094782_98) {
                            case caseVar_1701381094782_102 : (Class_1701381094782_31, UInt32, UInt16, Unit, Class_1701381094782_31, UInt64, Rune) => 
                                ();
                                UInt64(210)
                            
                            case 150 => 
                                var_1701381094782_98 / ((UInt8(52)) | 1);
                                var_1701381094782_113;
                                var_1701381094782_10 & var_1701381094782_10
                            
                            case _ : Int16 => 
                                var var_1701381094782_123 : UInt = UInt64(41);
                                var_1701381094782_123++;
                                UInt64(7)
                            
                            case _ => 
                                var_1701381094782_10
                            
                        }
                    } catch (_) { // block id: 130
                        var_1701381094782_459|>var_1701381094782_883;
                        ();
                        var_1701381094782_10 * var_1701381094782_725
                    } finally { // block id: 890
                        ();
                        var var_1701381094782_898 : Option<Interface_1701381094782_618> = Option<Interface_1701381094782_618>.None;
                        (var_1701381094782_898 ?? Class_1701381094782_631());
                        (var_1701381094782_907 ?? UInt64(117))
                    };
                    if (Option<Bool>.Some(var_1701381094782_18).getOrThrow()) { // block id: 920
                        ();
                        ["3>F'H?n#z;", var_1701381094782_925, var_1701381094782_925, """
j'Z-[
098?.
""", var_1701381094782_930, var_1701381094782_925, var_1701381094782_925, """
of8*J
IGyVC
""", var_1701381094782_930, "q:a&R`Hh[J"]
                    } else if (var_1701381094782_943.getOrThrow()) { // block id: 949
                        var_1701381094782_113;
                        var_1701381094782_113;
                        [###">3k1\\X;$:O"###, ",LXVC>ARa{+", "za?0BZvW .", """
?lGb7
)wD-a{
""", ###")lDw9L-&1h"###, "I%g,.uV[U]", "wT/R^u] J>", "X*19m5g5Qs", "zF$)JylALA", "7;mt|yGvS "]
                    } else { // block id: 953
                        var_1701381094782_222 *= var_1701381094782_667;
                        [";/NF`Ssbs<", ###"tG_EQ<Mt0\""###, "r'l'0R,O@.t", "Eq21owi--L", ###"FMQ$E6P+3W"###, """
C=q+R
EK($M
""", """
a{2\"qs
JK__k
""", ###"(6i'qB#T,-"###, ###"mCM?:Ep~(x"###, "^]T_!3!}A]"]
                    }[7]
                }
;
                func_1701381094782_56(Int8(86), Int64(-108), UInt64(44), var_1701381094782_113)
            } finally { // block id: 963
                (var_1701381094782_970 ?? (Float64(98.0), var_1701381094782_979, var_1701381094782_235, ((Int32(Int32(-120))&127)..(Int32(Int32(-90))&127):(Int64(-89)|1))));
                var_1701381094782_991[1];
                if (var_1701381094782_18) { var_1701381094782_925 } else { ###"&mfiv=/=#*"### } 
            };
            var_1701381094782_235
        }
;
        func func_1701381094782_42<T0, T1>() : Int64 { // block id: 43
            func_1701381094782_46(namedParam_1701381094782_51 : if (true) { // block id: 1022
                var_1701381094782_1024;
                UInt32(47) | var_1701381094782_205
            } else if (false) { // block id: 1031
                var_1701381094782_228 >>= ((Int16(75)) & 7);
                UInt32(108) ^ UInt32(35)
            } else { // block id: 1038
                var_1701381094782_86 >> ((var_1701381094782_205) & 7)
            }).var_1701381094782_1043
        }
;
        func_1701381094782_42<Option<UInt8>, Class_1701381094782_631>()
        // CRC Check All Variables
        var crcCheck = CrcCheck(5000, 32)
        crcCheck.updateBuffer(UInt64(var_1701381094782_10*var_1701381094782_10), 64)
        crcCheck.updateBuffer(UInt64(var_1701381094782_86*var_1701381094782_86), 64)
        crcCheck.updateBuffer(UInt64(var_1701381094782_205*var_1701381094782_205), 64)
        crcCheck.updateBuffer(UInt64(var_1701381094782_222*var_1701381094782_222), 64)
        crcCheck.updateBuffer(UInt64(var_1701381094782_228*var_1701381094782_228), 64)
        crcCheck.updateBuffer(UInt64(var_1701381094782_510*var_1701381094782_510), 64)
        crcCheck.updateBuffer(UInt64(var_1701381094782_667*var_1701381094782_667), 64)
        crcCheck.updateBuffer(UInt64(var_1701381094782_725*var_1701381094782_725), 64)
        crcCheck.updateBuffer(UInt64(var_1701381094782_734*var_1701381094782_734), 64)
        crcCheck.updateBuffer(UInt64(var_1701381094782_851*var_1701381094782_851), 64)
        crcCheck.updateBuffer(UInt64(var_1701381094782_858*var_1701381094782_858), 64)
        crcCheck.crcCheck()
        crcCheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[(i + buffer_index) % buffer.size] = byteArray[i + byte_index]
            i++
        }
        buffer_index = (buffer_index + i) % buffer.size
    }

    func updateBuffer(input: Bool, byte_n: Int64): Unit {
        if (input == true) {
            updateBuffer(1, byte_n)
        } else {
            updateBuffer(0, byte_n)
        }
    }

    func updateBuffer(input: Rune, byte_n: Int64): Unit {
        updateBuffer(UInt64(UInt32(input)), byte_n)
    }

    func updateBuffer(input: String, byte_n: Int64): Unit {
        for (c in input) {
            updateBuffer(c, byte_n)
        }
    }

    func updateBuffer(input: Unit, byte_n: Int64): Unit {
        updateBuffer(input.toString(), byte_n)
    }

    func updateBuffer(input: Any, byte_n: Int64) : Unit {
        if (input is Hashable) {
            match(input as Hashable) {
                case Some(v) => updateBuffer(UInt64(v.hashCode()), byte_n)
                case _=> updateBuffer(1, byte_n)
            }
            
        } else if (input is ToString) {
            match(input as ToString) {
                case Some(v) => updateBuffer(v.toString(), byte_n)
                case _=> updateBuffer(1, byte_n)
            }
        } else {
            updateBuffer(1, byte_n)
        }
    }     
    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Class_1701381094782_631 {

}

extend Class_1701381094782_31 {

}

extend Class_1701381094782_613 {

}

