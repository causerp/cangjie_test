/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// (CJNATIVE) EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// (CJNATIVE) RUN-EXEC: %run %run_opt %output %run_args
// (not CJNATIVE) ERRCHECK: %compiler %overflow_wrapping %f %cmp_opt 

var var_1695062022499_98 : Int64 = Int64(39)
let var_1695062022499_160 : Rune = r'0'
var var_1695062022499_201 : Bool = (false is Range<Int32>)
var var_1695062022499_209 : Unit = ()
var var_1695062022499_243 : UInt8 = UInt8(23)
var var_1695062022499_335 : UInt32 = UInt32(236)
public let var_1695062022499_498 : Option<Enum_1695062022499_19> = ([Option<Rune>.None, (Option<Enum_1695062022499_19>.None as Rune), Option<Rune>.None, (UInt8(137) as Rune), (UInt32(104) as Rune), (Int64(UInt16(23)) as Rune), (Int64(UInt64(157)) as Rune), Option<Rune>.None, ((((Int32(Int32(121))&127)..=(Int32(Int32(-11))&127):(Int64(-45)|1)), Int8(87), (Int16(-120), Option<Enum_1695062022499_19>.None, Int16(65)), false, Float64(-64.0), false) as Rune), Option<Rune>.None] as Enum_1695062022499_19)
let var_1695062022499_537 : Bool = (UInt16(Int16(Int8(2))) is (Option<Rune>, String, Range<Int8>, Array<Option<Rune>>) -> Int16)
const var_1695062022499_552 : String = "-<;Q%TR1U:"
let var_1695062022499_558 : Int = Int64(57)
public var var_1695062022499_627 : VArray<Int8, $2> = [Int8(-76), Int8(32)]
var var_1695062022499_632 : (Range<Int64>, Class_1695062022499_339, Bool, ((Int16, Option<Enum_1695062022499_19>, Int16), Rune, Class_1695062022499_172, Int32, Int8, UInt64, String, VArray<Int8, $2>), Int16) = (((Int64(Int64(100))&127)..(Int64(Int64(5))&127):(Int64(-105)|1)), Class_1695062022499_339(), ((Float64(-55.0) as Rune) is Range<UInt32>), ((Int16(Int16(1)), ([UInt64(115), UInt64(119), UInt64(198), UInt64(245), UInt64(185), UInt64(185), UInt64(148), UInt64(123), UInt64(124), UInt64(89)] as Enum_1695062022499_19), Int16(-66)), r'q', Class_1695062022499_339(), Int32(-56), Int8(Int8(15)), UInt64(UInt16(235)), """
C@?d5
3Y${var_1695062022499_552}c!${var_1695062022499_552}4
""", VArray<Int8, $2>({ i => Int8(87)})), Int16(UInt8(134)))
public var var_1695062022499_707 : Array<Option<Rune>> = [(((Int64(Int64(76))&127)..(Int64(Int64(-10))&127):(Int64(46)|1)) as Rune), ((UInt32(UInt8(247)), ((UInt32(UInt32(252))&127)..=(UInt32(UInt32(207))&127):(Int64(108)|1)), UInt64(UInt16(219)), (), (r'r' is UInt16), Enum_1695062022499_19.enumValue_1695062022499_722([Option<Rune>.None, Option<Rune>.None, Option<Rune>.None, Option<Rune>.None, Option<Rune>.None, Option<Rune>.None, Option<Rune>.None, Option<Rune>.None, Option<Rune>.None, Option<Rune>.None], ((UInt32(UInt32(181))&127)..(UInt32(UInt32(218))&127):(Int64(-13)|1)), UInt8(179)), VArray<Int64, $9>({ i => Int64(-64)}), VArray<Int64, $9>({ i => Int64(107)}), [UInt64(31), UInt64(75), UInt64(148), UInt64(185), UInt64(2), UInt64(19), UInt64(212), UInt64(157), UInt64(114), UInt64(7)]) as Rune), (VArray<Int8, $2>(repeat: Int8(Int8(-76))) as Rune), Option<Rune>.None, Option<Rune>.None, (((UInt8(UInt8(90))&127)..=(UInt8(UInt8(Int8(58)))&127):(Int64(UInt16(145))|1)) as Rune), (Int64(6) as Rune), (Int32(-4) as Rune), (([UInt64(75), UInt64(3), UInt64(245), UInt64(127), UInt64(250), UInt64(180), UInt64(127), UInt64(194), UInt64(227), UInt64(138)] is Int32) as Rune), Option<Rune>.None]
public let var_1695062022499_970 : UInt64 = UInt64(216)
let var_1695062022499_1032 : VArray<Int64, $9> = [Int64(-98), Int64(-78), Int64(81), Int64(12), Int64(-23), Int64(-12), Int64(48), Int64(-3), Int64(-119)]
public var var_1695062022499_1041 : Int = Int64(Int16(UInt8(95)))
public enum Enum_1695062022499_19 {
    defaultValue |
    enumValue_1695062022499_47(Range<Int8>, UInt32) |
    enumValue_1695062022499_547(String, Range<Int8>, Range<Int64>) |
    enumValue_1695062022499_722(Array<Option<Rune>>, Range<UInt32>, UInt8)
}


public open class Class_1695062022499_172 {
    public init() { // block id: 174

    }
;
    static prop var_1695062022499_177 : Option<Rune> { // block id: 178
        get() { // block id: 180
            ();
            ((UInt8(UInt8(UInt8(237)))&127)..(UInt8(UInt8(UInt8(Int8(81))))&127):(Int64(UInt8(UInt8(123)))|1));
            Option<Rune>.None
        }

    };
    var var_1695062022499_346 : UInt8 = UInt8(177)
}

func func_1695062022499_197<T0, T1>(param_1695062022499_198 : Array<UInt64>) : Unit { // block id: 199
    var_1695062022499_201;
    const var_1695062022499_213 : Int8 = -9;
    let var_1695062022499_219 : Option<Enum_1695062022499_19> = (UInt64(46) as Enum_1695062022499_19);
    var var_1695062022499_223 : Int16 = Int16(UInt16(UInt8(Int8(Int8(-99)))));
    match ((try { // block id: 207
        var_1695062022499_209;
        var_1695062022499_213 | var_1695062022499_213;
        (Int16(112), var_1695062022499_219, var_1695062022499_223)
    } finally { // block id: 229
        (Int16(45), var_1695062022499_219, Int16(-53))
    } as Enum_1695062022499_19)) {
        case None => 
            ((Int16(var_1695062022499_223)&127)..=(Int16(var_1695062022499_223)&127):(Int64(115)|1));
            var_1695062022499_243--;
            ()
        
        case None => 
            const var_1695062022499_252 : Bool = true;
            var_1695062022499_201 &&= var_1695062022499_252
        
        case Some(caseVar_1695062022499_256 : Float64) => 
            ();
            var_1695062022499_209
        
        case _ => 
            ();
            var_1695062022499_209;
            ()
        
    }
}

public open class Class_1695062022499_339 <: Class_1695062022499_172 {
    public init() { // block id: 341

    }

}

func func_1695062022499_349(param_1695062022499_350 : Option<Rune>, param_1695062022499_351 : String, param_1695062022499_352 : Range<Int8>, param_1695062022499_353 : Array<Option<Rune>>) : Int16 { // block id: 354
    var var_1695062022499_361 : Array<VArray<Int8, $2>> = [VArray<Int8, $2>({ i => Int8(8)}), VArray<Int8, $2>(repeat: Int8(UInt8(Int8(106)))), VArray<Int8, $2>(repeat: Int8(Int8(Int8(40)))), VArray<Int8, $2>({ i => Int8(-48)}), VArray<Int8, $2>({ i => Int8(121)}), VArray<Int8, $2>(repeat: Int8(Int8(-128))), VArray<Int8, $2>(repeat: Int8(UInt8(Int8(-81)))), VArray<Int8, $2>(repeat: Int8(UInt8(132))), VArray<Int8, $2>(repeat: Int8(UInt8(242))), VArray<Int8, $2>(repeat: Int8(Int8(Int8(115))))];
    Int16(var_1695062022499_361[4][0])
}

func func_1695062022499_103(param_1695062022499_104 : Int32) : Option<Enum_1695062022499_19> { // block id: 105
    let var_1695062022499_129 : Int = Int64(12);
    let var_1695062022499_132 : Range<UInt32> = ((UInt32(UInt32(229))&127)..(UInt32(UInt32(36))&127):(Int64(13)|1));
    let var_1695062022499_150 : Option<Rune> = Option<Rune>.None;
    let var_1695062022499_281 : Enum_1695062022499_19 = Enum_1695062022499_19.enumValue_1695062022499_47(((Int8(Int8(108))&127)..=(Int8(Int8(UInt8(UInt8(10))))&127):(Int64(103)|1)), UInt32(Int32(-66)));
    func func_1695062022499_107() : Unit { // block id: 108
        const var_1695062022499_113 : Bool = false;
        var var_1695062022499_125 : UInt32 = UInt32(UInt32(124));
        if (match (if (var_1695062022499_113) { // block id: 115
            r'l'
        } else { // block id: 117
            const var_1695062022499_122 : UInt32 = 144;
            if (var_1695062022499_113) { ((UInt32(var_1695062022499_122)&127)..(UInt32(var_1695062022499_125)&127):(var_1695062022499_129|1)) } else { var_1695062022499_132 } ;
            r'l'
        }) {
            case _ => 
                var_1695062022499_113 && var_1695062022499_113
            
        }) { ([var_1695062022499_150, var_1695062022499_150, Option<Rune>.None, Option<Rune>.None, Option<Rune>.None, var_1695062022499_150, var_1695062022499_150, Option<Rune>.Some(var_1695062022499_160), Option<Rune>.Some(var_1695062022499_160), var_1695062022499_150][7] ?? if (true) { r'w' } else { var_1695062022499_160 } ) } else { (Class_1695062022499_172.var_1695062022499_177 ?? if (var_1695062022499_113) { var_1695062022499_160 } else { r'C' } ) } ;
        let var_1695062022499_314 : UInt64 = UInt64(166);
        let var_1695062022499_418 : Range<Int8> = ((Int8(Int8(83))&127)..(Int8(Int8(UInt8(177)))&127):(Int64(Int32(UInt32(64)))|1));
        let var_1695062022499_427 : Array<Option<Rune>> = [(r'9' as Rune), Option<Rune>.None, Option<Rune>.None, (((Int8(Int8(UInt8(185)))&127)..(Int8(Int8(-98))&127):(Int64(UInt8(64))|1)) as Rune), ((Int16(73), (Option<Enum_1695062022499_19>.Some(Enum_1695062022499_19.enumValue_1695062022499_47(((Int8(Int8(-122))&127)..(Int8(Int8(10))&127):(Int64(80)|1)), UInt32(41))) as Enum_1695062022499_19), Int16(UInt16(195))) as Rune), (Class_1695062022499_339() as Rune), Option<Rune>.None, (Option<Enum_1695062022499_19>.None as Rune), (false as Rune), (###"$m/lDjH)6S"### as Rune)];
        let var_1695062022499_479 : Array<UInt64> = [UInt64(128), UInt64(57), UInt64(94), UInt64(56), UInt64(211), UInt64(125), UInt64(103), UInt64(146), UInt64(245), UInt64(148)];
        try { // block id: 468
            let var_1695062022499_472 : Array<UInt64> = [UInt64(100), UInt64(83), UInt64(197), UInt64(174), UInt64(58), UInt64(239), UInt64(247), UInt64(253), UInt64(210), UInt64(72)];
            if (var_1695062022499_201) { var_1695062022499_472 } else { var_1695062022499_472 } 
        } finally { // block id: 475
            if (false) { var_1695062022499_479 } else { [UInt64(198), UInt64(51), UInt64(20), UInt64(207), UInt64(61), UInt64(0), UInt64(22), UInt64(158), UInt64(238), UInt64(170)] } 
        }|>{ lambdaParameter_1695062022499_268 : Array<UInt64> => var var_1695062022499_343 : Class_1695062022499_339 = Class_1695062022499_339(); var loopTimeVar_1695062022499_459 : Range<UInt64> = ((UInt64(UInt64(Int64(UInt64(Int8(38)))))&127)..=(UInt64(UInt64(95))&127):(Int64(-49)|1)); for (i in loopTimeVar_1695062022499_459 where if ((UInt32(202), ((UInt32(UInt32(100))&127)..(UInt32(UInt32(154))&127):(Int64(-65)|1)), UInt64(157), (), true, var_1695062022499_281, VArray<Int64, $9>(repeat: Int64(-88)), VArray<Int64, $9>(repeat: var_1695062022499_98), [UInt64(214), var_1695062022499_314, var_1695062022499_314, var_1695062022499_314, var_1695062022499_314, var_1695062022499_314, var_1695062022499_314, UInt64(167), var_1695062022499_314, var_1695062022499_314])[4]) { // block id: 325
            var_1695062022499_209;
            var_1695062022499_314 != var_1695062022499_314
        } else { // block id: 330
            ((Int16(Int16(76))&127)..(Int16(Int16(-86))&127):(Int64(59)|1));
            UInt32(215) >= var_1695062022499_335
        }) {
            var_1695062022499_343.var_1695062022499_346;
            func_1695062022499_349(Option<Rune>.None, """
\\sCL+
dReM;
""", var_1695062022499_418, var_1695062022499_427)
        } };
        ()
    }
;
    func_1695062022499_107();
    true;
    let var_1695062022499_491 : Int8 = Int8(-56);
    const var_1695062022499_495 : Int16 = 119;
    var var_1695062022499_534 : Float64 = Float64(-76.0);
    Option<Enum_1695062022499_19>.Some(if ((((Int32(Int32(116))&127)..=(Int32(Int32(-68))&127):(Int64(-26)|1)), var_1695062022499_491, (var_1695062022499_495, var_1695062022499_498, Int16(109)), true, var_1695062022499_534, var_1695062022499_537)[3]) { (if (var_1695062022499_537) { var_1695062022499_281 } else { Enum_1695062022499_19.enumValue_1695062022499_547(var_1695062022499_552, ((Int8(Int8(81))&127)..=(Int8(Int8(-54))&127):(Int64(53)|1)), ((Int64(var_1695062022499_129)&127)..(Int64(var_1695062022499_558)&127):(Int64(96)|1))) } ) } else { if (true) { // block id: 563
        var_1695062022499_209;
        ((UInt32(UInt32(44))&127)..(UInt32(UInt32(33))&127):(Int64(59)|1));
        Enum_1695062022499_19.enumValue_1695062022499_47(((Int8(Int8(-13))&127)..=(Int8(Int8(-96))&127):(Int64(-32)|1)), UInt32(232))
    } else { // block id: 572
        ((Int8(var_1695062022499_491)&127)..(Int8(var_1695062022499_491)&127):(var_1695062022499_129|1));
        if (true) { var_1695062022499_281 } else { var_1695062022499_281 } 
    } } )
}

const func func_1695062022499_583(param_1695062022499_584 : Float32) : Int32 { // block id: 585
    -57
}


public func func_1695062022499_594(param_1695062022499_595 : (Array<UInt64>) -> Unit) : ((Int16, Option<Enum_1695062022499_19>, Int16), Rune, Class_1695062022499_172, Int32, Int8, UInt64, String, VArray<Int8, $2>) { // block id: 598
    var var_1695062022499_600 : Range<UInt64> = ((UInt64(UInt64(236))&127)..=(UInt64(UInt64(27))&127):(Int64(104)|1));
    var_1695062022499_600;
    ();
    let var_1695062022499_610 : Float32 = Float32(-25.0);
    var var_1695062022499_703 : ?Array<Option<Rune>> = (((Int32(Int32(62))&127)..(Int32(Int32(9))&127):(Int64(40)|1)) as Array<Option<Rune>>);
    (try { // block id: 607
        Int8(37);
        var_1695062022499_610;
        var var_1695062022499_613 : VArray<Int8, $2> = [Int8(Int8(72)), Int8(Int8(Int8(UInt8(41))))];
        var_1695062022499_613
    } finally { // block id: 621
        ((Int16(Int16(59))&127)..(Int16(Int16(24))&127):(var_1695062022499_98|1));
        var_1695062022499_627
    }, var_1695062022499_632[3], if (var_1695062022499_537) { // block id: 672
        Float64(-88.0)
    } else if (var_1695062022499_537) { // block id: 675
        var var_1695062022499_677 : Range<Int8> = ((Int8(Int8(Int8(UInt8(UInt8(36)))))&127)..=(Int8(Int8(-5))&127):(Int64(92)|1));
        var_1695062022499_677;
        Float64(118.0)
    } else { // block id: 686
        if (true) { var_1695062022499_552 } else { """
&5SSb
?\"?WX
""" } ;
        ();
        const var_1695062022499_694 : Float64 = -6.0;
        var_1695062022499_694 - Float64(99.0)
    }, (var_1695062022499_703 ?? var_1695062022499_707))[1]
}

func func_1695062022499_798(param_1695062022499_198 : Array<UInt64>) : Unit { // block id: 199
    var_1695062022499_201;
    const var_1695062022499_213 : Int8 = -9;
    let var_1695062022499_219 : Option<Enum_1695062022499_19> = (UInt64(46) as Enum_1695062022499_19);
    var var_1695062022499_223 : Int16 = Int16(UInt16(UInt8(Int8(Int8(-99)))));
    match ((try { // block id: 207
        var_1695062022499_209;
        var_1695062022499_213 | var_1695062022499_213;
        (Int16(112), var_1695062022499_219, var_1695062022499_223)
    } finally { // block id: 229
        (Int16(45), var_1695062022499_219, Int16(-53))
    } as Enum_1695062022499_19)) {
        case None => 
            ((Int16(var_1695062022499_223)&127)..=(Int16(var_1695062022499_223)&127):(Int64(115)|1));
            var_1695062022499_243--;
            ()
        
        case None => 
            const var_1695062022499_252 : Bool = true;
            var_1695062022499_201 &&= var_1695062022499_252
        
        case Some(caseVar_1695062022499_256 : Float64) => 
            ();
            var_1695062022499_209
        
        case _ => 
            ();
            var_1695062022499_209;
            ()
        
    }
}

public struct Struct_1695062022499_805<T0> {
    public init() { // block id: 807

    }
;
    let var_1695062022499_812 : Float32 = Float32(103.0)
}

public enum Enum_1695062022499_827 {
    defaultValue |
    enumValue_1695062022499_890 |
    enumValue_1695062022499_909(Enum_1695062022499_19, (Float32) -> Int32)
}
public func func_1695062022499_22<T0, T1, T2>(param_1695062022499_23 : UInt64) : Enum_1695062022499_19 { // block id: 24
    let var_1695062022499_43 : Int16 = Int16(-39);
    const var_1695062022499_66 : Float64 = -15.0;
    let var_1695062022499_74 : Bool = true;
    const func func_1695062022499_92<T0>(namedParam_1695062022499_93 ! : Int64, optionalParam_1695062022499_94 ! : String = "8>$37UDa{]c") : Unit { // block id: 96

    }
;
    let var_1695062022499_801 : (Array<UInt64>) -> Unit = func_1695062022499_798;
    let var_1695062022499_809 : Struct_1695062022499_805<Option<Rune>> = Struct_1695062022499_805<Option<Rune>>();
    func func_1695062022499_31(namedParam_1695062022499_32 ! : Option<Enum_1695062022499_19>, optionalParam_1695062022499_33 ! : UInt64 = UInt64(UInt64(95))) : Option<Enum_1695062022499_19> { // block id: 36
        var loopTimeVar_1695062022499_101 : Int64 = 0;
        while ((match ((var_1695062022499_43, Option<Enum_1695062022499_19>.Some(Enum_1695062022499_19.enumValue_1695062022499_47(((Int8(Int8(-60))&127)..(Int8(Int8(122))&127):(Int64(126)|1)), UInt32(165))), var_1695062022499_43)[1]) {
            case None => 
                ();
                const var_1695062022499_62 : String = ###"/Jiyx'}nF`"###;
                if (false) { """
NsiEM
riV/K
""" } else { var_1695062022499_62 } ;
                var_1695062022499_66 > var_1695062022499_66
            
            case None => 
                ();
                var_1695062022499_74
            
            case None => 
                Int32(111);
                var_1695062022499_74
            
            case Some(enumValue_1695062022499_47(_, caseVar_1695062022499_83 : VArray<Int64, $9>)) => 
                true
            
            case _ => 
                var_1695062022499_74
            
        }) && loopTimeVar_1695062022499_101 < 100 ) {
            loopTimeVar_1695062022499_101++;
            func_1695062022499_92<Bool>(namedParam_1695062022499_93 : var_1695062022499_98)
        };
        (var_1695062022499_809.var_1695062022499_812|>{ lambdaParameter_1695062022499_589 : Float32 => (var_1695062022499_801|>func_1695062022499_594)[3] })|>func_1695062022499_103
    }
;
    var var_1695062022499_823 : UInt16 = UInt16(Int8(64));
    let var_1695062022499_833 : (UInt32, Range<UInt32>, UInt64, Unit, Bool, Enum_1695062022499_19, VArray<Int64, $9>, VArray<Int64, $9>, Array<UInt64>) = (UInt32(192), ((UInt32(UInt32(Int8(UInt8(25))))&127)..=(UInt32(UInt32(159))&127):(Int64(UInt64(UInt16(202)))|1)), UInt64(89), (), false, Enum_1695062022499_19.enumValue_1695062022499_547("""
\\`e#d
H0*Ew
""", ((Int8(Int8(UInt8(157)))&127)..=(Int8(Int8(84))&127):(Int64(-97)|1)), ((Int64(Int64(-124))&127)..=(Int64(Int64(86))&127):(Int64(19)|1))), VArray<Int64, $9>(repeat: Int64(-62)), VArray<Int64, $9>(repeat: Int64(Int8(UInt8(251)))), [UInt64(95), UInt64(238), UInt64(200), UInt64(102), UInt64(171), UInt64(158), UInt64(214), UInt64(65), UInt64(189), UInt64(78)]);
    var var_1695062022499_905 : Int32 = Int32(34);
    var var_1695062022499_918 : (Float32) -> Int32 = func_1695062022499_583;
    var var_1695062022499_928 : Enum_1695062022499_19 = Enum_1695062022499_19.enumValue_1695062022499_722([(((UInt16(UInt16(112))&127)..=(UInt16(UInt16(39))&127):(Int64(-6)|1)) as Rune), (VArray<Int64, $9>({ i => Int64(58)}) as Rune), Option<Rune>.None, Option<Rune>.Some(r'4'), (Class_1695062022499_339() as Rune), Option<Rune>.Some(r'w'), (Float64(Float32(-119.0)) as Rune), (Float64(-90.0) as Rune), ([UInt64(60), UInt64(2), UInt64(207), UInt64(74), UInt64(225), UInt64(150), UInt64(88), UInt64(209), UInt64(156), UInt64(40)] as Rune), ("""
,f;0Y
%S~4^
""" as Rune)], ((UInt32(UInt32(158))&127)..=(UInt32(UInt32(171))&127):(Int64(-30)|1)), UInt8(204));
    (func_1695062022499_31(namedParam_1695062022499_32 : try { // block id: 815
        var_1695062022499_498
    } catch (e: Exception) { // block id: 817
        var_1695062022499_498
    } finally { // block id: 819
        var_1695062022499_498
    }, optionalParam_1695062022499_33 : UInt64(var_1695062022499_823)) ?? match (if (var_1695062022499_201) { // block id: 831
        var_1695062022499_833;
        Enum_1695062022499_827.enumValue_1695062022499_890
    } else if (var_1695062022499_537) { // block id: 892
        const var_1695062022499_897 : Int8 = 124;
        if (true) { VArray<Int8, $2>(repeat: var_1695062022499_897) } else { VArray<Int8, $2>({ i => Int8(111)}) } ;
        var_1695062022499_905 >>= ((Int32(-75)) & 7);
        Enum_1695062022499_827.enumValue_1695062022499_909(Enum_1695062022499_19.enumValue_1695062022499_47(((Int8(Int8(4))&127)..(Int8(Int8(-114))&127):(Int64(-128)|1)), var_1695062022499_335), var_1695062022499_918)
    } else { // block id: 920
        var_1695062022499_209;
        Enum_1695062022499_827.enumValue_1695062022499_890
    }) {
        case enumValue_1695062022499_890 => 
            ();
            var_1695062022499_928
        
        case _ => 
            ();
            var_1695062022499_209;
            var_1695062022499_928
        
    })
}

main(): Int64 {
    try {
        UInt16(176);
        var var_1695062022499_978 : Bool = ((UInt32(Int16(91)), ((UInt32(UInt32(UInt32(154)))&127)..(UInt32(UInt32(UInt8(232)))&127):(Int64(Int8(82))|1)), UInt64(UInt64(14)), (), false, Enum_1695062022499_19.enumValue_1695062022499_47(((Int8(Int8(-106))&127)..(Int8(Int8(-116))&127):(Int64(6)|1)), UInt32(251)), VArray<Int64, $9>(repeat: Int64(UInt16(79))), VArray<Int64, $9>(repeat: Int64(Int16(32))), [UInt64(112), UInt64(213), UInt64(178), UInt64(165), UInt64(48), UInt64(180), UInt64(213), UInt64(151), UInt64(222), UInt64(164)]) is Option<Enum_1695062022499_19>);
        match ((var_1695062022499_970|>func_1695062022499_22<Struct_1695062022499_805<Option<Rune>>, Int32, Range<UInt64>>)) {
            case caseVar_1695062022499_974 : UInt8 => 
                var_1695062022499_978 ||= true;
                if (true) { var_1695062022499_1032 } else { var_1695062022499_1032 } 
            
            case _ => 
                VArray<Int64, $9>({ i => Int64(-30)})
            
        }[6]
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var_1695062022499_1041*var_1695062022499_1041), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
// ASSERT: scan-1 sema_varray_cjvm_in_ref_type

