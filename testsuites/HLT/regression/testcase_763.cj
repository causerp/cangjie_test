/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args

public let var_1753105276388_36: (Rune, UInt8, Int32, Enum_1753105276388_7) = (r'x', UInt8(174), Int32(21),
    Enum_1753105276388_7.enumValue_1753105276388_42(UInt64(97), r'Y', Float32(94.0), Int64(114)))
public let var_1753105276388_117: Array<Enum_1753105276388_95> = [Enum_1753105276388_95.enumValue_1753105276388_120(
    ((UInt64(UInt64(11)) & 127)..=(UInt64(UInt64(132)) & 127) : (Int64(64) | 1)),
    ((UInt16(UInt16(207)) & 127)..(UInt16(UInt16(123)) & 127) : (Int64(25) | 1)),
    ((Int16(Int16(-79)) & 127)..(Int16(Int16(33)) & 127) : (Int64(-89) | 1)),
    ((Int16(Int16(Int16(-118))) & 127)..(Int16(Int16(107)) & 127) : (Int64(UInt32(239)) | 1))),
    Enum_1753105276388_95.enumValue_1753105276388_135(Int32(Int16(13)), Class_1753105276388_53(),
    (r'1', UInt8(Int8(44)), Int32(-81), Enum_1753105276388_7.enumValue_1753105276388_148((), true,
            ((UInt8(UInt8(65)) & 127)..=(UInt8(UInt8(234)) & 127) : (Int64(-64) | 1)),
            [Enum_1753105276388_95.enumValue_1753105276388_161(Float64(-27.0), false,
                Enum_1753105276388_7.enumValue_1753105276388_168(UInt8(43))),
                Enum_1753105276388_95.enumValue_1753105276388_172(Int16(-90)),
                Enum_1753105276388_95.enumValue_1753105276388_176(UInt16(129), UInt32(22)),
                Enum_1753105276388_95.enumValue_1753105276388_182(UInt16(0), Int8(55)),
                Enum_1753105276388_95.enumValue_1753105276388_188((),
                ((UInt64(UInt64(46)) & 127)..=(UInt64(UInt64(142)) & 127) : (Int64(-95) | 1))),
                Enum_1753105276388_95.enumValue_1753105276388_194(
                ((UInt64(UInt64(105)) & 127)..=(UInt64(UInt64(140)) & 127) : (Int64(47) | 1))),
                Enum_1753105276388_95.enumValue_1753105276388_198(###"7v=m^?IlQP"###),
                Enum_1753105276388_95.enumValue_1753105276388_202(
                ((Int16(Int16(-68)) & 127)..(Int16(Int16(57)) & 127) : (Int64(63) | 1)), Int32(40)),
                Enum_1753105276388_95.enumValue_1753105276388_208(
                (r'9', UInt8(177), Int32(-88), Enum_1753105276388_7.enumValue_1753105276388_215(
                        ((UInt16(UInt16(96)) & 127)..(UInt16(UInt16(237)) & 127) : (Int64(95) | 1)), UInt8(5),
                        [UInt64(138), UInt64(189), UInt64(184), UInt64(199), UInt64(196), UInt64(126), UInt64(170),
                            UInt64(42), UInt64(3), UInt64(25)]))),
                Enum_1753105276388_95.enumValue_1753105276388_236(
                ((Int32(Int32(42)) & 127)..(Int32(Int32(91)) & 127) : (Int64(-26) | 1)))]))),
    Enum_1753105276388_95.enumValue_1753105276388_240(
    Enum_1753105276388_7.enumValue_1753105276388_244(
        ((UInt16(UInt16(80)) & 127)..(UInt16(UInt16(89)) & 127) : (Int64(-65) | 1)),
        [Enum_1753105276388_95.enumValue_1753105276388_251(Class_1753105276388_53()),
            Enum_1753105276388_95.enumValue_1753105276388_255(Int16(-9), Float64(53.0)),
            Enum_1753105276388_95.enumValue_1753105276388_261(
            ((Int64(Int64(-99)) & 127)..(Int64(Int64(61)) & 127) : (Int64(-53) | 1)),
            (r'r', UInt8(186), Int32(117), Enum_1753105276388_7.enumValue_1753105276388_274(UInt8(106))),
            [UInt64(127), UInt64(83), UInt64(205), UInt64(85), UInt64(11), UInt64(120), UInt64(205), UInt64(185),
                UInt64(208), UInt64(81)]), Enum_1753105276388_95.enumValue_1753105276388_289,
            Enum_1753105276388_95.enumValue_1753105276388_289, Enum_1753105276388_95.enumValue_1753105276388_289,
            Enum_1753105276388_95.enumValue_1753105276388_289, Enum_1753105276388_95.enumValue_1753105276388_289,
            Enum_1753105276388_95.enumValue_1753105276388_289, Enum_1753105276388_95.enumValue_1753105276388_289],
        Float64(96.0)), Enum_1753105276388_7.enumValue_1753105276388_298),
    Enum_1753105276388_95.enumValue_1753105276388_289, Enum_1753105276388_95.enumValue_1753105276388_289,
    Enum_1753105276388_95.enumValue_1753105276388_289, Enum_1753105276388_95.enumValue_1753105276388_289,
    Enum_1753105276388_95.enumValue_1753105276388_289, Enum_1753105276388_95.enumValue_1753105276388_289,
    Enum_1753105276388_95.enumValue_1753105276388_289]
public var var_1753105276388_332: UInt32 = UInt32(UInt16(244))
public var var_1753105276388_341: Enum_1753105276388_95 = Enum_1753105276388_95.enumValue_1753105276388_289
public var var_1753105276388_353: Enum_1753105276388_7 = Enum_1753105276388_7.enumValue_1753105276388_298
@Deprecated
public var var_1753105276388_402: Range<Int16> = ((Int16(Int16(-24)) & 127)..(Int16(Int16(-49)) & 127) : (Int64(115) | 1))
public let var_1753105276388_453: Class_1753105276388_448 = Class_1753105276388_448()
public let var_1753105276388_481: VArray<UInt64, $6> = [UInt64(231), UInt64(204), UInt64(34), UInt64(36), UInt64(248),
    UInt64(22)]
@Deprecated
public var var_1753105276388_498: UInt8 = UInt8(196)
internal let var_1753105276388_513: Interface_1753105276388_58 = Class_1753105276388_53()

public enum Enum_1753105276388_7 {
    defaultValue
    | enumValue_1753105276388_42(UInt64, Rune, Float32, Int64)
    | enumValue_1753105276388_148(Unit, Bool, Range<UInt8>, Array<Enum_1753105276388_95>)
    | enumValue_1753105276388_168(UInt8)
    | enumValue_1753105276388_215(Range<UInt16>, UInt8, Array<UInt64>)
    | enumValue_1753105276388_244(Range<UInt16>, Array<Enum_1753105276388_95>, Float64)
    | enumValue_1753105276388_274(UInt8)
    | enumValue_1753105276388_298
}

public interface Interface_1753105276388_63 {}

public sealed interface Interface_1753105276388_62 <: Interface_1753105276388_63 {}

public interface Interface_1753105276388_61<T0, T1> <: Interface_1753105276388_62 {}

public interface Interface_1753105276388_60 <: Interface_1753105276388_61<Unit, UInt32> {}

public interface Interface_1753105276388_59<T0> <: Interface_1753105276388_60 {}

public sealed interface Interface_1753105276388_58 <: Interface_1753105276388_59<Rune> {}

public sealed interface Interface_1753105276388_57 <: Interface_1753105276388_58 {}

public sealed interface Interface_1753105276388_56 <: Interface_1753105276388_57 {}

public open class Class_1753105276388_53 <: Interface_1753105276388_56 & Resource {
    @Frozen
    public init() { // block id: 55

    }

    public static var var_1753105276388_112: UInt16 = UInt16(120);
    public static let var_1753105276388_337: Bool = true;
    private static func func_1753105276388_86<T0, T1>(optionalParam_1753105276388_87!: UInt64 = UInt64(35),
        namedParam_1753105276388_89!: UInt8): Bool { // block id: 90
        try (resource = Class_1753105276388_53()) { // block id: 92

        } catch (e: Exception) { // block id: 93

        }
        var var_1753105276388_310: UInt64 = UInt64(UInt16(22));
        let var_1753105276388_322: Int32 = Int32(Int16(-25));
        match (try { // block id: 109
            var_1753105276388_112 = UInt16(49)
            ();
            var_1753105276388_117
        } finally { // block id: 306
            UInt64(226) % ((var_1753105276388_310) | 1);
            var_1753105276388_117
        }[4]) {
            case enumValue_1753105276388_240(caseVar_1753105276388_317, enumValue_1753105276388_274(caseVar_1753105276388_318)) =>
                var_1753105276388_322 | Int32(109);
                false

            case _ =>
                var_1753105276388_332 += var_1753105276388_332
                var_1753105276388_337
        }
    };

    public static let var_1753105276388_369: UInt64 = UInt64(45);
    public static const var_1753105276388_405: Int8 = 87;
    private static let var_1753105276388_411: Range<UInt32> = ((UInt32(UInt32(71)) & 127)..(UInt32(UInt32(152)) & 127) : (Int64(33) |
        1));

    @Frozen
    public mut prop var_1753105276388_456: Enum_1753105276388_7 { // block id: 457
        get() { // block id: 459
            Enum_1753105276388_7.enumValue_1753105276388_298;
            var_1753105276388_520
        }
        set(Value) { // block id: 463
            ();
            ();
            var_1753105276388_520 = Value
        }
    }
    public static func func_1753105276388_66<T0, T1>(namedParam_1753105276388_67!: Rune,
        namedParam_1753105276388_68!: (Rune, UInt8, Int32, Enum_1753105276388_7),
        optionalParam_1753105276388_69!: Bool = (((r'g', UInt8(UInt8(122)), Int32(Int16(-19)),
            Enum_1753105276388_7.enumValue_1753105276388_42(UInt64(37), r'u', Float32(82.0), Int64(84))) is Int32) is String)): Enum_1753105276388_7 { // block id: 83
        let var_1753105276388_356: Unit = ();
        var var_1753105276388_376: Int16 = Int16(113);
        var var_1753105276388_388: Struct_1753105276388_384 = Struct_1753105276388_384();
        var loopTimeVar_1753105276388_395: Int = 0;
        do {
            loopTimeVar_1753105276388_395++;
        } while ((func_1753105276388_86<Array<Enum_1753105276388_95>, Range<Int32>>(
            optionalParam_1753105276388_87: match (var_1753105276388_341) {
                case _: Enum_1753105276388_95 =>
                    let var_1753105276388_350: Int32 = Int32(42);
                    (r'S', UInt8(45), var_1753105276388_350, var_1753105276388_353);
                    var_1753105276388_356;
                    let var_1753105276388_360: UInt = UInt64(UInt16(167));
                    var_1753105276388_360 ^ var_1753105276388_360

                case enumValue_1753105276388_251(_: UInt16) =>
                    ((Int16(Int16(-59)) & 127)..(Int16(Int16(64)) & 127) : (Int64(65) | 1));
                    var_1753105276388_369

                case _ =>
                    var_1753105276388_376 &= Int16(61)
                    UInt32(71) | var_1753105276388_332;
                    UInt64(190)
            }, namedParam_1753105276388_89: var_1753105276388_388.var_1753105276388_391)) &&
            loopTimeVar_1753105276388_395 < 100);
        var var_1753105276388_432: Bool = (((Int64(Int64(UInt16(231))) & 127)..=(Int64(Int64(Int16(106))) & 127) : (Int64(UInt16(0)) |
            1)) is UInt8);
        match (var_1753105276388_341) {
            case defaultValue =>
                var_1753105276388_402;
                var_1753105276388_405

            case _: Array<UInt64> =>
                var_1753105276388_411;
                var var_1753105276388_415: UInt64 = UInt64(Int16(-39));
                var_1753105276388_415 &= var_1753105276388_369
                Int8(-118)

            case caseVar_1753105276388_422 =>
                var var_1753105276388_426: Int64 = Int64(Int16(19));
                var_1753105276388_426 %= ((Int64(1)) | 1)
                var_1753105276388_432 ||= var_1753105276388_432
                Int8(83)

            case _ => Int8(99)
        };
        var_1753105276388_453.var_1753105276388_456
    };

    var var_1753105276388_520: Enum_1753105276388_7 = Enum_1753105276388_7.enumValue_1753105276388_298
    public func isClosed(): Bool {
        return true
    }
    public func close(): Unit {}
}

@Deprecated
public enum Enum_1753105276388_95 {
    defaultValue
    | enumValue_1753105276388_120(Range<UInt64>, Range<UInt16>, Range<Int16>, Range<Int16>)
    | enumValue_1753105276388_135(Int32, Class_1753105276388_53, (Rune, UInt8, Int32, Enum_1753105276388_7))
    | enumValue_1753105276388_161(Float64, Bool, Enum_1753105276388_7)
    | enumValue_1753105276388_172(Int16)
    | enumValue_1753105276388_176(UInt16, UInt32)
    | enumValue_1753105276388_182(UInt16, Int8)
    | enumValue_1753105276388_188(Unit, Range<UInt64>)
    | enumValue_1753105276388_194(Range<UInt64>)
    | enumValue_1753105276388_198(String)
    | enumValue_1753105276388_202(Range<Int16>, Int32)
    | enumValue_1753105276388_208((Rune, UInt8, Int32, Enum_1753105276388_7))
    | enumValue_1753105276388_236(Range<Int32>)
    | enumValue_1753105276388_240(Enum_1753105276388_7, Enum_1753105276388_7)
    | enumValue_1753105276388_251(Class_1753105276388_53)
    | enumValue_1753105276388_255(Int16, Float64)
    | enumValue_1753105276388_261(Range<Int64>, (Rune, UInt8, Int32, Enum_1753105276388_7), Array<UInt64>)
    | enumValue_1753105276388_289
}

public struct Struct_1753105276388_384 {
    public init() { // block id: 386

    }

    var var_1753105276388_391: Byte = UInt8(143)
}

public sealed interface Interface_1753105276388_451<T0, T1> {}

public open class Class_1753105276388_448 <: Class_1753105276388_53 & Interface_1753105276388_451<Int8,
    Class_1753105276388_53> {
    @Frozen
    public init() { // block id: 450

    }

    static init() {
    }
}

public func func_1753105276388_10<T0, T1>(namedParam_1753105276388_11!: Int32,
    optionalParam_1753105276388_12!: UInt64 = UInt64(UInt32(UInt32(Int16(UInt8(132))))),
    namedParam_1753105276388_18!: Bool, optionalParam_1753105276388_19!: Float64 = Float64(-49.0)): Enum_1753105276388_7 { // block id: 21
    var var_1753105276388_30: Option<Enum_1753105276388_7> = (r'A' as Enum_1753105276388_7);
    if (false) {
        (var_1753105276388_30 ?? var_1753105276388_36[3])
    } else {
        (Class_1753105276388_53.func_1753105276388_66<Bool, Int16>(namedParam_1753105276388_67: r'V',
            namedParam_1753105276388_68: var_1753105276388_36))
    }
}

main(): Int64 {
    try {
        ();
        match (func_1753105276388_10<String, UInt8>(namedParam_1753105276388_11: match (Int8(9)) {
            case _ =>
                const var_1753105276388_476: Int32 = 32;
                Int32(-91) + var_1753105276388_476
        }, optionalParam_1753105276388_12: var_1753105276388_481[1], namedParam_1753105276388_18: false)) {
            case _ =>
                ();
                let var_1753105276388_490: Interface_1753105276388_61<Unit, UInt32> = Class_1753105276388_448();
                var_1753105276388_490;
                Int16(-37)
        };
        let var_1753105276388_508: Unit = ();
        const var_1753105276388_517: UInt16 = 23;
        if (((UInt8(46) < var_1753105276388_498) is (Rune, UInt8, Int32, Enum_1753105276388_7))) { // block id: 500
            (Option<Unit>.None ?? var_1753105276388_508);
            Int64(117)
        } else { // block id: 511
            var_1753105276388_513;
            Int64(var_1753105276388_517)
        }
        // CRC Check All Variables
        var crcCheck = CrcCheck(5000, 32)
        crcCheck.updateBuffer(UInt64(var_1753105276388_517 * var_1753105276388_517), 64)
        crcCheck.crcCheck()
        crcCheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) {
        println("Exception: NoneValueException")
    }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        buffer = Array<Int64>(buffer_n, {i => 0})
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, {i => 0})
        var byte_c = 1
        var byte_index = 0
        while (value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[(i + buffer_index) % buffer.size] = byteArray[i + byte_index]
            i++
        }
        buffer_index = (buffer_index + i) % buffer.size
    }

    func updateBuffer(input: Bool, byte_n: Int64): Unit {
        if (input == true) {
            updateBuffer(1, byte_n)
        } else {
            updateBuffer(0, byte_n)
        }
    }

    func updateBuffer(input: Rune, byte_n: Int64): Unit {
        updateBuffer(UInt64(UInt32(input)), byte_n)
    }

    func updateBuffer(input: String, byte_n: Int64): Unit {
        for (c in input) {
            updateBuffer(c, byte_n)
        }
    }

    func updateBuffer(input: Unit, byte_n: Int64): Unit {
        updateBuffer(input.toString(), byte_n)
    }

    func updateBuffer(input: Any, byte_n: Int64): Unit {
        if (input is Hashable) {
            match (input as Hashable) {
                case Some(v) => updateBuffer(UInt64(v.hashCode()), byte_n)
                case _ => updateBuffer(1, byte_n)
            }
        } else if (input is ToString) {
            match (input as ToString) {
                case Some(v) => updateBuffer(v.toString(), byte_n)
                case _ => updateBuffer(1, byte_n)
            }
        } else {
            updateBuffer(1, byte_n)
        }
    }
    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, {i => 0})
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2 ** 2 * crc_output[i] + 2 ** 1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}

extend Enum_1753105276388_7 {}
