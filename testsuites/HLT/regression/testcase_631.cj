/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args

public var var_1717426193417_7 : UInt8 = UInt8(Int8(Int8(19)))
public const var_1717426193417_29 : Float32 = -44.0
let var_1717426193417_39 : Unit = ()
var var_1717426193417_91 : Class_1717426193417_87 = Class_1717426193417_87()
public const var_1717426193417_119 : Int8 = -85
public var var_1717426193417_125 : Enum_1717426193417_19 = Enum_1717426193417_19.enumValue_1717426193417_127(r'd', r'Q', ())
var var_1717426193417_150 : Int8 = Int8(Int8(117))
public const var_1717426193417_158 : Bool = true
public var var_1717426193417_182 : Int16 = Int16(UInt16(UInt16(UInt8(UInt8(225)))))
public const var_1717426193417_273 : UInt = 62
public const var_1717426193417_278 : String = ###"qH((*_a8Ea"###
let var_1717426193417_295 : ((Float64, Enum_1717426193417_19, String, Int16, Enum_1717426193417_19, Float32, Bool), Int8) = ((Float64(Float64(Float64(111.0))), Enum_1717426193417_19.enumValue_1717426193417_302({  => () }, Int64(Int64(60)), Class_1717426193417_87()), "U03o;gbNWT", Int16(-92), Enum_1717426193417_19.enumValue_1717426193417_317(UInt16(Int8(68)), Float64(82.0)), Float32(-110.0), (Int8(-63) is Option<String>)), Int8(Int8(63)))
let var_1717426193417_388 : Int = Int64(Int8(-1))
const var_1717426193417_392 : UInt32 = 48
public let var_1717426193417_395 : ((Class_1717426193417_87, UInt64, UInt16), String, Float32, Class_1717426193417_87) = ((Class_1717426193417_87(), UInt64(72), UInt16(168)), "qK'%ADk${var_1717426193417_278}e$U${var_1717426193417_278}", Float32(Float32(Float32(-47.0))), Class_1717426193417_87())
public let var_1717426193417_428 : VArray<UInt8, $5> = [UInt8(190), UInt8(109), UInt8(115), UInt8(212), UInt8(53)]
public enum Enum_1717426193417_19 {
    defaultValue |
    enumValue_1717426193417_68(UInt64) |
    enumValue_1717426193417_127(Rune, Rune, Unit) |
    enumValue_1717426193417_302(() -> Unit, Int64, Class_1717426193417_87) |
    enumValue_1717426193417_317(UInt16, Float64) |
    enumValue_1717426193417_339(Unit, (UInt32, String, UInt64) -> Unit) |
    enumValue_1717426193417_351
}
public open class Class_1717426193417_87 {
    public init() { // block id: 89

    }
;
    public mut prop var_1717426193417_94 : UInt64 { // block id: 95
        get() { // block id: 97
            Int16(UInt16(Int8(-74)));
            UInt64(43);
            UInt64(Int16(UInt16(UInt16(222))));
            var_1717426193417_436
        }

        set(Value) { // block id: 108
            ();
            UInt64(198);
            ();
            var_1717426193417_436 = Value
        }

    };
    var var_1717426193417_436 : UInt64 = UInt64(2)
    static init() {
    }
}

public func func_1717426193417_22(param_1717426193417_23 : Int64) : Enum_1717426193417_19 { // block id: 24
    let var_1717426193417_47 : UInt16 = UInt16(UInt8(UInt8(251)));
    var var_1717426193417_63 : Int8 = Int8(29);
    try { // block id: 26
        var var_1717426193417_36 : UInt64 = UInt64(110);
        match (var_1717426193417_29) {
            case -19.0 | -18.0 | -12.0 => 
                ();
                var_1717426193417_36;
                var_1717426193417_39
            
            case 15.0 | 61.0 | 73.0 | -111.0 => 
                UInt16(73) % ((var_1717426193417_47) | 1);
                var_1717426193417_39;
                var var_1717426193417_54 : Int16 = Int16(Int8(-28));
                var_1717426193417_54 -= var_1717426193417_54
            
            case _ => 
                var_1717426193417_63 ^= Int8(2);
                ()
            
        };
        Enum_1717426193417_19.enumValue_1717426193417_68(var_1717426193417_36)
    } finally { // block id: 71
        try { // block id: 73
            var_1717426193417_39
        } catch (e: Exception) { // block id: 75

        };
        let var_1717426193417_113 : UInt64 = UInt64(Int16(Int16(Int8(-98))));
        func func_1717426193417_77(optionalParam_1717426193417_78 ! : Float64 = Float64(Float32(Float32(Float32(Float32(47.0)))))) : Enum_1717426193417_19 { // block id: 84
            var_1717426193417_91.var_1717426193417_94 %= ((var_1717426193417_113) | 1);
            var_1717426193417_119;
            match (try { // block id: 123
                var_1717426193417_125
            } finally { // block id: 134
                UInt16(44) > UInt16(88);
                if (false) { Enum_1717426193417_19.enumValue_1717426193417_68(var_1717426193417_113) } else { Enum_1717426193417_19.enumValue_1717426193417_68(UInt64(169)) } 
            }) {
                case caseVar_1717426193417_146 => 
                    let var_1717426193417_154 : Int8 = Int8(-36);
                    var_1717426193417_150 ^= var_1717426193417_154;
                    if (var_1717426193417_158) { Enum_1717426193417_19.enumValue_1717426193417_68(UInt64(22)) } else { var_1717426193417_125 } 
                
                case caseVar_1717426193417_165 => 
                    var_1717426193417_150 += var_1717426193417_119;
                    Enum_1717426193417_19.enumValue_1717426193417_68(var_1717426193417_113)
                
                case _ : Bool => 
                    ();
                    var_1717426193417_125
                
                case _ => 
                    var_1717426193417_182 >>= ((Int16(98)) & 7);
                    var_1717426193417_150 /= ((Int8(-89)) | 1);
                    var_1717426193417_125
                
            }
        }
;
        func_1717426193417_77(optionalParam_1717426193417_78 : Float64(34.0))
    }
}


func func_1717426193417_195(param_1717426193417_196 : String) : Enum_1717426193417_19 { // block id: 197
    ();
    const var_1717426193417_216 : UInt16 = 110;
    var var_1717426193417_236 : ?Rune = Option<Rune>.Some(r'0');
    let var_1717426193417_242 : (Int64) -> Enum_1717426193417_19 = func_1717426193417_22;
    let var_1717426193417_245 : Int = Int64(Int16(-76));
    (if (var_1717426193417_158) { // block id: 204
        UInt64(244);
        Float32(103.0);
        var_1717426193417_119
    } else { // block id: 208
        Int8(79) & Int8(-7)
    }, if (var_1717426193417_158) { // block id: 214
        var_1717426193417_216;
        ();
        const var_1717426193417_220 : String = ###"i`k[(X0>}6"###;
        var_1717426193417_220
    } else if (false) { // block id: 223
        ();
        "a{LkOZ0BR|z"
    } else { // block id: 226
        var_1717426193417_39;
        'O';
        ">xpp&a{r8]Z"
    }, (var_1717426193417_236 ?? r'c'), (var_1717426193417_245|>var_1717426193417_242))[3]
}

const func func_1717426193417_262(param_1717426193417_263 : UInt32, param_1717426193417_264 : String, optionalParam_1717426193417_265 ! : UInt64 = 39) : Unit { // block id: 267

}

const func func_1717426193417_254() : Unit { // block id: 255
    53.0 * (var_1717426193417_29 - var_1717426193417_29);
    const var_1717426193417_270 : String = """
zw`\\i
|2vFa
""";
    func_1717426193417_262(39, var_1717426193417_270, optionalParam_1717426193417_265 : var_1717426193417_273);
    func_1717426193417_262(209, var_1717426193417_278)
}


public struct Struct_1717426193417_330 {
    public init() { // block id: 332

    }
;
    public static var var_1717426193417_335 : (Float64, Enum_1717426193417_19, String, Int16, Enum_1717426193417_19, Float32, Bool) = (Float64(50.0), Enum_1717426193417_19.enumValue_1717426193417_339((), func_1717426193417_262), """
.h=VW
%XqV$
""", Int16(-48), Enum_1717426193417_19.enumValue_1717426193417_351, Float32(-3.0), true)
}

func func_1717426193417_250(param_1717426193417_251 : Int64) : String { // block id: 252
    func_1717426193417_254();
    func func_1717426193417_289(param_1717426193417_290 : Unit) : (Float64, Enum_1717426193417_19, String, Int16, Enum_1717426193417_19, Float32, Bool) { // block id: 291
        var_1717426193417_295[0];
        Struct_1717426193417_330.var_1717426193417_335
    }
;
    (Option<String>.None ?? func_1717426193417_289(var_1717426193417_39)[2]);
    var_1717426193417_278
}


public func func_1717426193417_13(param_1717426193417_14 : Int8, optionalParam_1717426193417_15 ! : String = "/qn%\\|0. D") : UInt8 { // block id: 17
    var var_1717426193417_370 : Int32 = Int32(-39);
    const var_1717426193417_376 : Float64 = -106.0;
    match ((Int64(-104)|>(func_1717426193417_250~>func_1717426193417_195))) {
        case caseVar_1717426193417_361 : Int8 => 
            var_1717426193417_39
        
        case _ => 
            ();
            var_1717426193417_370--
        
        case _ => 
            var_1717426193417_376;
            var_1717426193417_39
        
    };
    (Int8(-37), var_1717426193417_388, var_1717426193417_392, var_1717426193417_395, var_1717426193417_39)[3][0][1];
    (Option<UInt8>.None ?? var_1717426193417_428[2])
}

main(): Int64 {
    try {
        var_1717426193417_7 ^= func_1717426193417_13(Int8(4)) - (var_1717426193417_7 ^ var_1717426193417_7);
        var_1717426193417_388
        // CRC Check All Variables
        var crcCheck = CrcCheck(5000, 32)
        crcCheck.updateBuffer(UInt64(var_1717426193417_7*var_1717426193417_7), 64)
        crcCheck.updateBuffer(UInt64(var_1717426193417_119*var_1717426193417_119), 64)
        crcCheck.updateBuffer(UInt64(var_1717426193417_150*var_1717426193417_150), 64)
        crcCheck.updateBuffer(UInt64(var_1717426193417_182*var_1717426193417_182), 64)
        crcCheck.updateBuffer(UInt64(var_1717426193417_273*var_1717426193417_273), 64)
        crcCheck.updateBuffer(UInt64(var_1717426193417_388*var_1717426193417_388), 64)
        crcCheck.updateBuffer(UInt64(var_1717426193417_392*var_1717426193417_392), 64)
        crcCheck.crcCheck()
        crcCheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[(i + buffer_index) % buffer.size] = byteArray[i + byte_index]
            i++
        }
        buffer_index = (buffer_index + i) % buffer.size
    }

    func updateBuffer(input: Bool, byte_n: Int64): Unit {
        if (input == true) {
            updateBuffer(1, byte_n)
        } else {
            updateBuffer(0, byte_n)
        }
    }

    func updateBuffer(input: Rune, byte_n: Int64): Unit {
        updateBuffer(UInt64(UInt32(input)), byte_n)
    }

    func updateBuffer(input: String, byte_n: Int64): Unit {
        for (c in input) {
            updateBuffer(c, byte_n)
        }
    }

    func updateBuffer(input: Unit, byte_n: Int64): Unit {
        updateBuffer(input.toString(), byte_n)
    }

    func updateBuffer(input: Any, byte_n: Int64) : Unit {
        if (input is Hashable) {
            match(input as Hashable) {
                case Some(v) => updateBuffer(UInt64(v.hashCode()), byte_n)
                case _=> updateBuffer(1, byte_n)
            }
            
        } else if (input is ToString) {
            match(input as ToString) {
                case Some(v) => updateBuffer(v.toString(), byte_n)
                case _=> updateBuffer(1, byte_n)
            }
        } else {
            updateBuffer(1, byte_n)
        }
    }     
    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}

