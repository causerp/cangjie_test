/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC-PIPE-1: %compiler %cmp_opt %f 2>&1 | compare %f



// random seed:1632314505156

// All global variable need to be defined before use!
public let var29 : Unit = ()
public var var33 : Int64 = (-3)
public let var52 : Int64 = Int64(Int16(Float32(-89.0)))
public var var66 : Int16 = Int16(UInt8(UInt8(40)))
public var var142 : Bool = true
public let var147 : List<Bool> = [((UInt16(93)..UInt16(51):(Int64(20.0)|1)) is Range<Int8>), (UInt64(8) is Range<Int8>), true, (Int64((-45)) is Bool), false, (Int32(-128) is Bool), ((Int32(UInt64(115))..=Int32(Int8(25)):(61|1)) is Range<UInt8>), ((UInt16(12)..UInt16(10):(-7)|1) is Float32), false, true]
public var var183 : List<Bool> = [(Float32(79.0) is Range<Int32>), (Int8(69) is Range<Int16>), true, false, ((UInt16(112)..UInt16(79):(-114)|1) is Range<UInt16>), true, false, (Float64(Int32(Float32(97.0))) is UInt16), true, (Int8(UInt8(33.0)) is Int8)]
public var var210 : (UInt32*(Rune*Int16*Int8)*Range<Int16>*Unit*Unit*Unit*List<Bool>*(Rune*Int16*Int8)*Range<UInt32>) = (UInt32(Float32(-126.0)), ('w', Int16(-11), Int8(-99)), (Int16(UInt16(230))..=Int16(Int16(UInt16(214))):(Int64(Float64(Int16(-18)))|1)), (), (), (), [true, true, false, false, true, true, true, false, false, true], ('W', Int16(10), Int8(UInt8(225))), (UInt32(UInt64(166))..=UInt32(187):(12|1)))
public var var243 : (Rune*Int16*Int8) = ('i', Int16(Float32(-93.0)), Int8(-20))
 var var272 : Option<List<Bool>> = Option<List<Bool>>.None
public let var331 : List<Bool> = [false, true, false, true, true, false, true, false, true, false]
public let var344 : Bool = false
public var var358 : Range<Int16> = (Int16(41)..Int16(44):(-8)|1)
 var var399 : List<Unit> = [(), (), (), (), (), (), (), (), (), ()]
 let var409 : Aggregate405 = Aggregate405()
public var var435 : UInt8 = UInt8(59)
public let var441 : Int8 = Int8(Int8(-98))
public let var461 : Int32 = Int32(78)
public let var490 : Range<Int32> = (Int32(-74)..Int32(-123):38|1)
public var var499 : (Bool*List<Unit>*Float32) = (true, [(), (), (), (), (), (), (), (), (), ()], Float32(-38.0))
public var var520 : Rune = 'm'
 let var544 : Class313 = Class313(((UInt16(Int16(70)) is Rune), [(), (), (), (), (), (), (), (), (), ()], Float32(-93.0)))
public var var551 : Class313 = Class313()
public var var574 : Interface314<Result<UInt64>> = Class313((((UInt32(182)..=UInt32(77):(22|1)) is Interface315), [(), (), (), (), (), (), (), (), (), ()], Float32(-91.0)))
public let var691 : (Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune) = (Int16(Int16(UInt16(UInt16(88)))), UInt8(57), ((((-69)..(-72):126|1) is Result<Bool>), [(), (), (), (), (), (), (), (), (), ()], Float32(UInt8(178))), (Int32(-115)..=Int32(Int16(UInt32(144))):(114|1)), UInt8(UInt64(UInt32(49))), 'w')
 let var738 : List<Range<UInt32>> = [(UInt32(209)..UInt32(Int32(110)):(76|1)), (UInt32(187)..UInt32(149):(63|1)), (UInt32(186)..UInt32(186):16|1), (UInt32(193)..=UInt32(127):(-19)|1), (UInt32(Float64(UInt8(217)))..UInt32(11):(Int64(Int16(90))|1)), (UInt32(166)..UInt32(Float32(-45.0)):(Int64(Int8(3))|1)), (UInt32(Int64(UInt64(51)))..=UInt32(1):(111|1)), (UInt32(UInt16(33))..=UInt32(Int8(UInt8(106))):(Int64(UInt8(11))|1)), (UInt32(169)..UInt32(181):(-94)|1), (UInt32(187)..UInt32(225):4|1)]
public var var811 : Result<Bool> = Result<Bool>.Err(Exception())
 let var823 : UInt64 = UInt64(3)
public var var830 : Int16 = Int16(UInt16(UInt32(148)))
 var var844 : UInt64 = UInt64(Int16(48))
public var var893 : List<Unit> = [(), (), (), (), (), (), (), (), (), ()]
 let var900 : Range<UInt16> = (UInt16(UInt32(UInt32(102)))..=UInt16(Float32(49.0)):(Int64(UInt32(Float64(Int8(-3))))|1))
 let var998 : Float64 = Float64(21.0)
public var var1055 : UInt8 = UInt8(UInt64(2))
public let var1169 : Bool = (Int16(UInt8(UInt64(27))) is Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>)
public let var1193 : Option<Result<Bool>> = (true as Result<Bool>)
public let var1218 : Option<Unit> = Option<Unit>.Some(var29)
public var var1242 : Int64 = (-102)
public let var1288 : (Float64*Float32*Float32*Range<UInt16>*Rune) = (44.0, Float32(88.0), Float32((-57.0)), (UInt16(UInt16(UInt16(236)))..UInt16(80):(Int64(UInt8((-25)))|1)), 'F')
 var var1328 : Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)> = Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>.Some(var691)
public let var1343 : (Bool*List<Unit>*Float32) = (false, [(), (), (), (), (), (), (), (), (), ()], Float32(110.0))
public var var1378 : Result<List<Bool>> = Result<List<Bool>>.Err(Exception())
public let var1407 : List<Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>> = [(Result<List<Bool>>.Err(Exception()) as (Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)), ([Option<List<Bool>>.None, (Aggregate636() as List<Bool>), Option<List<Bool>>.Some(var183), (Result<List<Bool>>.Err(Exception()) as List<Bool>), ((true, [(), (), (), (), (), (), (), (), (), ()], Float32(-35.0)) as List<Bool>), Option<List<Bool>>.None, (((UInt32(215)..UInt32(124):(-120)|1), (UInt16(183)..UInt16(182):(114|1)), true, (Int8(-61)..Int8(25):76|1), [(), (), (), (), (), (), (), (), (), ()]) as List<Bool>), (Class313((false, [(), (), (), (), (), (), (), (), (), ()], Float32(-22.0))) as List<Bool>), Option<List<Bool>>.None, (Option<List<Bool>>.None as List<Bool>)] as (Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)), (((Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>.None is Range<Int16>), [(), (), (), (), (), (), (), (), (), ()], Float32(UInt64(67))) as (Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)), (Int8(Int64(Float32(-17.0))) as (Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)), (((-68.0), Int32(UInt64(198)), Float32(UInt8(185)), false, Int32(10), (), 'z') as (Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)), (((), UInt64(124), Float64(Float32(-42.0)), UInt8((-59.0)), Result<Bool>.Err(Exception()), (Int8(120)..=Int8(99):(-101)|1), ('R', Int16(-49), Int8(-128)), UInt16((-59)), (-103.0)) as (Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)), (false as (Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)), ((Float64((-110.0)), Float32(UInt32(227)), Float32(-85.0), (UInt16(112)..UInt16(140):((-63)|1)), 's') as (Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)), Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>.None, ((true, [(), (), (), (), (), (), (), (), (), ()], Float32(Int16(115))) as (Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune))]
public let var1627 : Range<UInt8> = (UInt8(4)..UInt8(130):(-32)|1)
public var var1689 : UInt16 = UInt16(UInt16(Float32(Float64(UInt64(146)))))
 var var1733 : ((Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)*Float32*(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)*Range<Int64>*List<Bool>*Range<Int64>) = ((Int16(86), UInt8(218), (([(UInt32(26)..UInt32(116):(29|1)), (UInt32(167)..=UInt32(184):((-87)|1)), (UInt32(4)..=UInt32(24):(-44)|1), (UInt32(26)..UInt32(104):(-16)|1), (UInt32(89)..=UInt32(228):(-115)|1), (UInt32(166)..UInt32(179):(9|1)), (UInt32(20)..=UInt32(177):(-17)|1), (UInt32(102)..=UInt32(215):(-124)|1), (UInt32(186)..UInt32(158):((-112)|1)), (UInt32(226)..UInt32(221):(-63)|1)] is (Interface315, Range<UInt16>) -> Bool), [(), (), (), (), (), (), (), (), (), ()], Float32(Int16(64))), (Int32(59)..Int32(21):(-32)|1), UInt8(Float32(-52.0)), 'f'), Float32(0.0), (Int16(10), UInt8(100), (false, [(), (), (), (), (), (), (), (), (), ()], Float32(15)), (Int32(28)..=Int32(90):(0|1)), UInt8(183), 'D'), (81..(-124):(-51)|1), [(() is List<UInt64>), ("B5S]b45WBX" is (Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)), (Result<Bool>.Ok(var142) is Unit), false, false, (Class313() is (UInt32) -> Range<Int16>), ((false, [(), (), (), (), (), (), (), (), (), ()], Float32(92.0)) is (Rune*Int16*Int8)), false, (Option<Result<Bool>>.Some(var811) is UInt8), true], (119..=(-3):((-43)|1)))
 let var1838 : UInt32 = UInt32(Float32(103.0))
public let var1845 : Range<UInt32> = (UInt32(UInt8(Int32(UInt16(241))))..=UInt32(Int16(UInt8(223))):(Int64(UInt16(161))|1))
public var var1885 : Unit = ()
 var var2134 : Bool = true
 var var2176 : Range<UInt64> = (UInt64(195)..=UInt64(170):(-54)|1)
public var var2443 : List<Option<Result<Bool>>> = [(Int16(-75) as Result<Bool>), Option<Result<Bool>>.None, Option<Result<Bool>>.Some(var811), Option<Result<Bool>>.Some(var811), (Aggregate636(((UInt32(92)..=UInt32(171):65|1), (UInt16(164)..UInt16(141):10|1), false, (Int8(24)..=Int8(-113):(-9)|1), [(), (), (), (), (), (), (), (), (), ()]), optionalParam1896 : UInt16(Int32(-75)), optionalParam1898 : ((Int16(-63), UInt8(228), (true, [(), (), (), (), (), (), (), (), (), ()], Float32(103.0)), (Int32(28)..Int32(102):10|1), UInt8(97), 'y'), Float32(112.0), (Int16(15), UInt8(136), (true, [(), (), (), (), (), (), (), (), (), ()], Float32(-68.0)), (Int32(61)..Int32(-93):(-5)|1), UInt8(4), 'W'), ((-109)..=(-117):17|1), [false, false, true, true, true, false, true, true, false, false], (0..(-113):(-63)|1)), namedParam2053 : (21..(-19):(6|1))) as Result<Bool>), Option<Result<Bool>>.None, Option<Result<Bool>>.None, Option<Result<Bool>>.Some(var811), Option<Result<Bool>>.None, Option<Result<Bool>>.None]
public var var2515 : (Range<UInt16>*Range<Int8>*UInt64*UInt64*Float64*UInt64*Unit*Int32) = ((UInt16(Int16(-15))..UInt16(96):((-67)|1)), (Int8(44)..=Int8(UInt32(UInt8(251))):(Int64(Float32(-53.0))|1)), UInt64(Float32(UInt16(135))), UInt64(236), (-7.0), UInt64(34), (), Int32(Int8(24)))
public let var2551 : UInt16 = UInt16(Float32(Int64(Float64(28.0))))
public let var2626 : UInt32 = UInt32(UInt64(Int8(UInt8(Int32(108)))))
public var var2700 : ((Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)*Float32*(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)*Range<Int64>*List<Bool>*Range<Int64>) = ((Int16(Float32(106.0)), UInt8(84), ((Class313() is Option<Unit>), [(), (), (), (), (), (), (), (), (), ()], Float32(UInt16(117))), (Int32(UInt16(231))..Int32(17):(Int64(Int16(-38))|1)), UInt8(71), 'h'), Float32(Int16(86)), (Int16(-65), UInt8(54), ((Float32(57.0) is (Int64, ((Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)*Float32*(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)*Range<Int64>*List<Bool>*Range<Int64>)) -> UInt64), [(), (), (), (), (), (), (), (), (), ()], Float32((-126.0))), (Int32(Float32(75.0))..=Int32(Int8(-42)):(Int64(Float32(85.0))|1)), UInt8(154), 'h'), (Int64(Int16(-104))..Int64(Int16(55)):((-48)|1)), [false, false, true, true, false, true, false, true, false, false], (Int64(Int32(UInt32(192)))..=Int64(Int32(Int32(48))):(54|1)))
public var var2896 : String = ",`j2d(Ua!k"
public var var3044 : List<Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>> = [(((-50.0), Int32(-13), Float32(UInt32(112)), (Float32(2.0) is Result<UInt64>), Int32(-73), (), 'G') as (Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)), Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>.Some(var691), ((Int16(Float32(58.0)), UInt8(130), (false, [(), (), (), (), (), (), (), (), (), ()], Float32(42.0)), (Int32(51)..Int32(90):(-82)|1), UInt8(146), 'r') as (Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)), ([(UInt32(58)..UInt32(130):(-85)|1), (UInt32(151)..UInt32(77):(-42)|1), (UInt32(188)..=UInt32(44):(-16)|1), (UInt32(113)..=UInt32(83):30|1), (UInt32(18)..UInt32(122):69|1), (UInt32(246)..UInt32(144):(-74)|1), (UInt32(226)..=UInt32(204):86|1), (UInt32(85)..UInt32(71):66|1), (UInt32(106)..UInt32(76):(-80)|1), (UInt32(231)..=UInt32(156):70|1)] as (Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)), (Float32(Float64(Int8(-17))) as (Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)), Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>.None, (((UInt32(173)..UInt32(144):74|1), (UInt16(161)..UInt16(52):67|1), (Aggregate636(namedParam2437 : (UInt32(30), ('v', Int16(5), Int8(-58)), (Int16(76)..=Int16(-46):((-3)|1)), (), (), (), [true, false, false, true, true, true, false, true, false, true], ('O', Int16(-128), Int8(-73)), (UInt32(199)..UInt32(151):(-64)|1))) is (Bool*List<Unit>*Float32)), (Int8(37)..=Int8(-48):((-24)|1)), [(), (), (), (), (), (), (), (), (), ()]) as (Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)), Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>.None, (Int64(UInt32(106)) as (Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)), Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>.None]
public let var3149 : Result<List<Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>>> = Result<List<Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>>>.Err(Exception())
public var var3271 : Unit = ()
public let var3474 : Unit = ()
public var var3488 : Option<Bool> = (Int64(UInt32(Int32(-36))) as Bool)
main(): Int64 {
    Float32(55.0);
    func9(namedParam18 : func319())
    // CRC Check All Variables
    var crccheck = CrcCheck(5000, 32)
    crccheck.updateBuffer(UInt64(var52), 64)
    crccheck.updateBuffer(UInt64(var435), 64)
    crccheck.updateBuffer(UInt64(var1689), 64)
    crccheck.crcCheck()
    crccheck.getCrcOutput()

    return 0;
}

class CrcCheck {
    public var buffer: Array<Int64>
    public var poly: Array<Int64>
    public var crc_output: Array<Int64>
    public var poly_n: Int64
    public var buffer_index: Int64
    public var crc_output_n: Int64

    public init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    public func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    public func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    public func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
public func func9(optionalParam10 ! : UInt16 = UInt16(Float32(Int32(Float64(Int32(62))))), optionalParam16 ! : Rune = 'l', namedParam18 ! : Bool) : Int64 { // block id: 19
    ();
    UInt32(UInt8(116));
    match (Int64(if (namedParam18) { // block id: 27
            var29;
            var29;
            var33
        } else if (namedParam18) { // block id: 36
            ();
            (-104)
        } else { // block id: 39
            ();
            var33
        })) {
        case caseVar44 => 
            UInt8(71);
            58
        
        case _ => 
            ();
            var52
        
    }
}

public func func319() : Bool { // block id: 58
    var loopTimeVar3439 : Int64 = 0;
    while ((('5', var66, Int8(74))[0] is UInt8) && loopTimeVar3439 < 100 ) {
        loopTimeVar3439++;
        ();
        func75(namedParam76 : ())
    };
    var var3471 : Result<List<Bool>> = Result<List<Bool>>.Err(Exception());
    Int64(if ((Result<Bool>.Err(Exception()) ?? var142)) { // block id: 3445
        (var1845, (UInt16(188)..=UInt16(205):(28|1)), false, (Int8(59)..=Int8(3):(39|1)), [var3271, var3271, var3271, var29, (), var1885, var3271, (), (), ()]);
        var2551
    } else { // block id: 3469
        var3471;
        var3474;
        var2551
    });
    (if ((var811 ?? true)) { // block id: 3482
        Option<Bool>.None
    } else { // block id: 3484
        ();
        var811;
        var3488
    } ?? try { // block id: 3494
        var1378;
        ();
        var1169
    } finally { // block id: 3498
        var2134
    })
}

public func func75(namedParam76 ! : Unit) : (Rune*Int16*Int8) { // block id: 77
    let var80 : Bool = true;
    if (var80) { // block id: 82
        try { // block id: 84
            ();
            ()
        } catch (_) { // block id: 87
            namedParam76
        };
        if (true) { '4' } else { 'A' } ;
        let var104 : List<Unit> = [(), (), (), (), (), (), (), (), (), ()];
        var104[4]
    };
    var var124 : Range<Int8> = (Int8(-95)..=Int8(106):36|1);
    if (match {
        case false => 
        var124;
        ();
        let var128 : List<Bool> = [false, true, false, true, true, false, true, false, false, false];
        var128
        case var80 => 
        [false, false, true, true, var80, true, false, var80, var142, true]
        case _ => 
        var147
    }[4]) { // block id: 176
        (Option<List<Bool>>.Some(var183) ?? [false, true, true, true, false, true, true, false, true, true]);
        var210[4];
        var243
    } else if (func252(func75)[0]) { // block id: 542
        var544;
        namedParam76;
        try { // block id: 561
            ();
            ('9', var66, Int8(105))
        } finally { // block id: 567
            var52;
            ();
            var243
        }
    } else { // block id: 571
        var574.func585(Int8(-70));
        match ((var66, var1055, var499, (var461..=var461:((-110)|1)), UInt8(235), 'Q')) {
            case _ => 
                ('x', var66, Int8(-39))
            
        }
    }
}


 func func252(param253 : (Unit) -> (Rune*Int16*Int8)) : (Bool*List<Unit>*Float32) { // block id: 256
    let var263 : Option<List<Bool>> = (UInt8(Int32(Int16(Float32(65.0)))) as List<Bool>);
    var loopTimeVar311 : Int64 = 0;
    do {
        loopTimeVar311++;
        UInt8(53);
        try { // block id: 304
            ();
            var29;
            var29
        } finally { // block id: 308
            var29
        }
    } while (match ([var263, Option<List<Bool>>.None, var263, var272, var263, var263, Option<List<Bool>>.None, var272, Option<List<Bool>>.Some(var183), Option<List<Bool>>.None][5]) {
        case _ => 
            var142
        
        case _ => 
            var29;
            ();
            var142
        
        case caseVar293 : UInt8 => 
            ();
            Int8(-62);
            true
        
        case _ => 
            true
        
    } && loopTimeVar311 < 100 ) ;
    func319(var409.var412).func419()
}

public open class Class313 <: Interface314<Result<UInt64>> & Interface315 {
    public init() { // block id: 317

    }
;
    public var var523 : Range<Int64> = (Int64(Int64(Float32((-83.0))))..=Int64(UInt32(Int16(115))):((-120)|1));
    public func func419() : (Bool*List<Unit>*Float32) { // block id: 420
        var var451 : Float64 = Float64(Int64(UInt64(138)));
        var loopTimeVar473 : Int64 = 0;
        while ((((), UInt64(10), (-17.0), var435, Result<Bool>.Ok(var344), (Int8(-125)..var441:((-28)|1)), ('G', Int16(19), Int8(69)), UInt16(125), var451)[4] ?? (119.0, var461, Float32(-95.0), var344, var461, (), 'k')[3]) && loopTimeVar473 < 100 ) {
            loopTimeVar473++;
            Int8(UInt64(20))
        };
        [(), (), (), (), (), (), (), (), (), ()][3];
        ((Int16(62), UInt8(3), (false, var399, Float32(47.0)), var490, var435, 'd'), Float32(0.0), (Int16(94), UInt8(150), var499, (var461..=Int32(-19):(1|1)), var435, var520), var523, var331, (var33..=var33:(18|1)))[2][2]
    }
;
    public init(param547 : (Bool*List<Unit>*Float32)) { // block id: 548
        var29;
        var551
    }
;
    private static mut prop var1530 : Interface314<Result<UInt64>> { // block id: 1531
        get() { // block id: 1533
            ();
            Int64(UInt16(UInt16(42)));
            Class313();
            var3501
        }

        set(Value) { // block id: 1541
            (Int32(116)..Int32(-26):(-2)|1);
            [Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>.Some(var691), Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>.None, Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>.None, Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>.Some(var691), Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>.None, Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>.Some(var691), ([false, true, false, true, true, false, false, false, true, true] as (Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)), ((Int16(66)..Int16(115):(9|1)) as (Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)), ([UInt64(81), UInt64(0), UInt64(47), UInt64(142), UInt64(150), UInt64(95), UInt64(112), UInt64(249), UInt64(57), UInt64(163)] as (Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)), ([(), (), (), (), (), (), (), (), (), ()] as (Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune))];
            ();
            var3501 = Value
        }

    };
    private static prop var1597 : Class313 { // block id: 1598
        get() { // block id: 1600
            ();
            Class313((true, [(), (), (), (), (), (), (), (), (), ()], Float32(32.0)))
        }

    };
    protected let var1608 : Range<UInt8> = (UInt8(249)..=UInt8(146):5|1);
    public static let var1706 : Int32 = Int32(21);
    public static var var1825 : Result<((Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)*Float32*(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)*Range<Int64>*List<Bool>*Range<Int64>)> = Result<((Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)*Float32*(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)*Range<Int64>*List<Bool>*Range<Int64>)>.Ok(var1733);
    private static mut prop var2148 : Float32 { // block id: 2149
        get() { // block id: 2151
            ();
            ();
            Float32(UInt64(137))
        }

        set(Value) { // block id: 2158
            Result<((Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)*Float32*(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)*Range<Int64>*List<Bool>*Range<Int64>)>.Ok(var1733);
            ()
        }

    };
    public init(param1367 : (UInt16, Rune, Bool) -> Int64) { // block id: 1372
        if (false) { // block id: 1375
            let var1399 : UInt16 = UInt16(Int16(Int8(94)));
            match (var1378) {
                case _ : Class313 => 
                    var29;
                    var29
                
                case _ => 
                    ();
                    var29
                
                case _ : UInt8 => 
                    ()
                
                case caseVar1396 : ((Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)*Float32*(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)*Range<Int64>*List<Bool>*Range<Int64>) => 
                    var1399;
                    ()
                
                case _ => 
                    var1407;
                    var29;
                    var var1526 : Unit = ();
                    var1526
                
            };
            func1206(namedParam1207 : var1530);
            var1597.var1608
        } else { // block id: 1610
            if (false) { () } else { var29 } ;
            if (false) { // block id: 1617
                var29
            };
            match (var490) {
                case _ => 
                    var1193;
                    ();
                    var1627
                
                case _ => 
                    ();
                    (UInt8(235)..=UInt8(42):(var1242|1))
                
                case _ => 
                    (var435..=var435:((-44)|1))
                
            }
        };
        let var1676 : Range<UInt16> = (UInt16(Int64(UInt16(87)))..UInt16(Float64(Float32(21.0))):((-101)|1));
        func func1645(param1646 : Interface315, optionalParam1647 ! : Range<UInt16> = (UInt16(38)..=UInt16(79):88|1)) : Bool { // block id: 1649
            Aggregate1651.var1656;
            (if (if (var142) { // block id: 1669
                true
            } else { // block id: 1671
                var29;
                var830;
                false
            }) { var1676 } else { (UInt16(146)..=var1689:(var33|1)) }  is Int8)
        }
;
        var var1718 : Unit = ();
        if (func1645(Class313())) { if (true) { // block id: 1699
            UInt32(164);
            ()
        } else if (try { // block id: 1703
            (var1706..var1706:(var33|1));
            Class313();
            true
        } finally { // block id: 1712
            ();
            false
        }) { // block id: 1715
            var29;
            var1718;
            ()
        } } else { if (var142) { // block id: 1723
            var29
        } } ;
        let var1892 : Aggregate636 = Aggregate636(((UInt32(UInt16(220))..=UInt32(Float32(111.0)):(Int64(UInt64(252))|1)), (UInt16(UInt16(88))..UInt16(UInt64(105)):(Int64(11)|1)), true, (Int8(104)..Int8(39):5|1), [(), (), (), (), (), (), (), (), (), ()]), optionalParam1896 : UInt16(43.0), namedParam2053 : (58..=Int64(UInt16(UInt64(232))):(66|1)));
        try { // block id: 1726
            (var1825 ?? var1733);
            if (false) { () } else { var1718 } ;
            try { // block id: 1833
                Int8(4);
                let var1858 : UInt32 = UInt32(201);
                [(var1838..=UInt32(135):(54|1)), (UInt32(55)..UInt32(131):(-98)|1), var1845, (var1858..=UInt32(107):(var1242|1)), (UInt32(253)..=UInt32(193):112|1), (var1858..UInt32(42):(var52|1)), (UInt32(7)..=UInt32(240):9|1), (var1858..UInt32(234):((-61)|1)), (var1858..UInt32(127):((-78)|1)), var1845];
                Class313((false, var893, Float32(30.0)))
            } finally { // block id: 1882
                var29;
                var1885;
                var574
            }
        } finally { // block id: 1888
            if (false) { var1892 } else { var1892 } ;
            Class313((var2134, [(), var29, (), (), var29, var1718, (), (), (), var29], var2148))
        }
    }
;
    public static var var3501 : Interface314<Result<UInt64>> = Class313((true, [(), (), (), (), (), (), (), (), (), ()], Float32(Int32(123))))
}

public interface Interface314<T0> {
    static func func622(param623 : UInt32) : Range<Int16> { // block id: 624
        (Int16(-86)..=Int16(-73):26|1)
    }
;
    static func func1076<T0, T1>() : Interface314<Result<UInt64>> where T0 <: Range<Int64>, T1 <: Option<UInt64> { // block id: 1077
        var var1082 : Range<UInt32> = (UInt32(118)..=UInt32(236):(-76)|1);
        var var1137 : Result<List<Bool>> = Result<List<Bool>>.Err(Exception());
        match (try { // block id: 1080
                var1082
            } finally { // block id: 1084
                ();
                var29;
                var1082
            }) {
            case caseVar1090 : (Range<UInt32>*Range<UInt16>*Bool*Range<Int8>*List<Unit>) => 
                Result<UInt64>.Ok(var823);
                Result<List<Bool>>.Err(Exception())
            
            case _ : List<Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>> => 
                Result<List<Bool>>.Err(Exception())
            
            case caseVar1101 : Bool => 
                ();
                let var1105 : Result<List<Bool>> = Result<List<Bool>>.Ok(var331);
                var1105
            
            case _ => 
                var29;
                var1137
            
        };
        var var1152 : Unit = ();
        let var1203 : Interface315 = Class313();
        func func1187<T0>(optionalParam1188 ! : Range<Int16> = (Int16(89)..Int16(107):48|1)) : Unit where T0 <: Range<UInt8> { // block id: 1190
            match (var1193) {
                case _ => 
                    (Int16(26)..=Int16(-55):26|1);
                    UInt16(193);
                    var29
                
            };
            var1203.func1206(namedParam1207 : Class313())
        }
;
        if (var142) { // block id: 1141
            var29
        } else if (false) { // block id: 1144
            try { // block id: 1146
                ();
                (false, [var1152, (), (), var29, var1152, var29, var29, (), var29, ()], Float32(90.0));
                (Int32(107)..Int32(63):(-49)|1)
            } catch (_) { // block id: 1165
                ();
                [var1169, false, true, true, false, true, false, var142, var142, var1169];
                var490
            };
            Int8(UInt16(45));
            func1187<Range<UInt8>>(optionalParam1188 : (Int16(-20)..=Int16(37):(-10)|1))
        };
        if (if ((var811 ?? var1169)) { // block id: 1285
            var1152;
            var1288;
            var142
        } else if (var142) { // block id: 1305
            (var998, Float32(33.0), Float32(-15.0), (UInt16(98)..UInt16(179):(-44)|1), 'l');
            false
        } else { // block id: 1313
            true
        }) { Class313(if (true) { // block id: 1318
            ();
            [(UInt32(17)..UInt32(99):5|1), (UInt32(9)..UInt32(131):(-26)|1), (UInt32(24)..UInt32(124):87|1), (UInt32(36)..UInt32(134):(-29)|1), (UInt32(217)..UInt32(213):(-23)|1), (UInt32(48)..=UInt32(86):(-47)|1), (UInt32(205)..UInt32(22):57|1), (UInt32(74)..UInt32(52):50|1), (UInt32(105)..=UInt32(16):(-25)|1), (UInt32(89)..UInt32(87):62|1)];
            (var142, [(), (), (), (), (), (), (), (), (), ()], Float32(-108.0))
        } else { // block id: 1325
            var var1361 : Rune = 'Q';
            [var1328, var1328, var1328, Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>.None, Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>.Some(var691), var1328, Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>.None, Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>.None, Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>.Some(var691), Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>.Some(var691)];
            var1343
        }) } else { Class313({ lambdaParameter2163 : UInt16, lambdaParameter2164 : Rune, lambdaParameter2165 : Bool => 97 }) } 
    }
;
    func func2169(namedParam2170 ! : Result<UInt64>, namedParam2171 ! : String, namedParam2172 ! : Bool, namedParam2173 ! : Int16) : Unit { // block id: 2174
        var2176;
        func func2180<T0, T1>(param2181 : Range<Int16>, optionalParam2182 ! : Range<Int16> = (Int16(74)..=Int16(-126):40|1)) : Bool where T0 <: UInt8, T1 <: UInt16 { // block id: 2184
            let var2191 : (Range<UInt32>*Range<UInt16>*Bool*Range<Int8>*List<Unit>) = ((UInt32(245)..UInt32(71):(Int64(UInt64((-25)))|1)), (UInt16(252)..=UInt16(12):114|1), true, (Int8(-128)..=Int8(83):(Int64(Float32(UInt32(205)))|1)), [(), (), (), (), (), (), (), (), (), ()]);
            let var2209 : ((Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)*Float32*(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)*Range<Int64>*List<Bool>*Range<Int64>) = ((Int16(105), UInt8(UInt32(Float32(-17.0))), (false, [(), (), (), (), (), (), (), (), (), ()], Float32(Int8(43))), (Int32(-63)..=Int32(-74):108|1), UInt8(39), 'P'), Float32(-92.0), (Int16(Float64(Int32(-75))), UInt8(72), (true, [(), (), (), (), (), (), (), (), (), ()], Float32(Int16(-35))), (Int32(-104)..=Int32(92):(-55)|1), UInt8(190), 't'), (Int64(UInt16(180))..=Int64(Int32(53)):(Int64(UInt8(UInt32(214)))|1)), [((UInt64(191)..UInt64(96):((-9)|1)) is Range<UInt16>), (UInt64(133) is (Interface314<Result<UInt64>>) -> Unit), (Int32(64) is List<Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>>), false, true, false, false, (((-96)..(-121):(-20)|1) is (Range<Int16>) -> Unit), true, ((UInt8(27)..UInt8(101):(94|1)) is (Float64*Int32*Float32*Bool*Int32*Unit*Rune))], (Int64(UInt64(UInt32(11)))..=Int64(Int16(5)):(Int64(UInt32(UInt64(186)))|1)));
            var var2292 : Float32 = Float32(-42.0);
            match (if (false) { // block id: 2188
                    var29;
                    var2191;
                    var2209
                } else { // block id: 2288
                    let var2296 : Range<Int64> = (18..Int64(60.0):(Int64(Float64(UInt8(151)))|1));
                    (var691, var2292, var691, var2296, [true, true, true, var1169, true, var1169, false, false, namedParam2172, false], var2296);
                    ();
                    var var2336 : Rune = 'T';
                    ((Int16(118), UInt8(231), var1343, (Int32(-63)..=Int32(88):((-33)|1)), var1055, 'B'), var2292, (Int16(105), var1055, var1343, var490, UInt8(100), var2336), (var1242..120:(89|1)), var331, var2296)
                }) {
                case _ => 
                    var1169;
                    ();
                    false
                
            }
        }
;
        var loopTimeVar2355 : Int64 = 0;
        while (func2180<UInt8, UInt16>(if (false) { (Int16(-72)..=Int16(-4):72|1) } else { (Int16(-50)..Int16(82):(-95)|1) } ) && loopTimeVar2355 < 100 ) {
            loopTimeVar2355++;

        };
        let var2358 : Rune = 'N';
        match (var2358) {
            case _ => 
                ();
                var var2364 : List<Option<Result<Bool>>> = [Option<Result<Bool>>.None, Option<Result<Bool>>.Some(var811), ((UInt64(66)..=UInt64(190):113|1) as Result<Bool>), ((Int16(-71), UInt8(Float32(-91.0)), (false, [(), (), (), (), (), (), (), (), (), ()], Float32(73.0)), (Int32(33)..Int32(98):(21|1)), UInt8((-23)), 'e') as Result<Bool>), Option<Result<Bool>>.Some(var811), ([(Int16(-77) as Result<Bool>), (17.0 as Result<Bool>), Option<Result<Bool>>.None, Option<Result<Bool>>.Some(var811), Option<Result<Bool>>.None, ([false, true, false, false, false, false, true, false, false, true] as Result<Bool>), Option<Result<Bool>>.Some(var811), ((UInt64(5)..=UInt64(222):107|1) as Result<Bool>), Option<Result<Bool>>.Some(var811), (Option<Float64>.Some(var998) as Result<Bool>)] as Result<Bool>), (Float32((-21.0)) as Result<Bool>), (Aggregate636(namedParam2437 : (UInt32(22), ('k', Int16(83), Int8(-114)), (Int16(48)..Int16(106):1|1), (), (), (), [false, false, false, false, true, false, true, true, false, true], ('1', Int16(-75), Int8(-86)), (UInt32(241)..=UInt32(95):(-24)|1)), optionalParam2438 : [true, false, true, false, true, true, true, false, true, false]) as Result<Bool>), ((-31.0) as Result<Bool>), Option<Result<Bool>>.Some(var811)];
                var2364;
                var29
            
        }
    }
;
    func func880(param881 : Int64, namedParam882 ! : ((Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)*Float32*(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)*Range<Int64>*List<Bool>*Range<Int64>)) : UInt64 { // block id: 883
        var var944 : UInt16 = UInt16(Int32(Int16(Int64(UInt32(238)))));
        var var955 : (Float64*Float32*Float32*Range<UInt16>*Rune) = ((-19.0), Float32(-62.0), Float32(-33.0), (UInt16(UInt8(34))..UInt16(39):((-53)|1)), 'E');
        let var983 : Int32 = Int32(UInt16(227));
        let var1009 : Option<Float64> = Option<Float64>.Some(var998);
        var var1035 : Interface315 = Class313(((((-55.0), Float32(-64.0), Float32(-39.0), (UInt16(142)..UInt16(233):(-17)|1), 'e') is Range<Int8>), [(), (), (), (), (), (), (), (), (), ()], Float32(-81.0)));
        var var1062 : Float32 = Float32(UInt64(207));
        let var1068 : Int32 = Int32(Int16(-60));
        (if (((UInt32(133)..UInt32(11):114|1), (UInt16(170)..UInt16(155):84|1), true, (Int8(-36)..Int8(-123):(-119)|1), var893)[2]) { try { // block id: 897
            ();
            var900
        } finally { // block id: 911
            let var913 : (UInt32*(Rune*Int16*Int8)*Range<Int16>*Unit*Unit*Unit*List<Bool>*(Rune*Int16*Int8)*Range<UInt32>) = (UInt32(107), ('o', Int16(UInt32(19)), Int8(-47)), (Int16(-91)..Int16(-122):(Int64(UInt64(120))|1)), (), (), (), [false, false, true, false, false, true, false, false, false, false], ('H', Int16(UInt64(221)), Int8(-56)), (UInt32(Int8(-103))..UInt32(234):(Int64(Float64(Int16(2)))|1)));
            var913;
            (var944..=var944:(3|1))
        } } else { var955[3] } , (Int8(81)..=Int8(-83):66|1), try { // block id: 969
            var29;
            var844
        } finally { // block id: 972
            (var830, UInt8(84), (true, [(), (), (), (), (), (), (), (), (), ()], Float32(-75.0)), (Int32(-55)..=var983:(32|1)), UInt8(179), 'a');
            namedParam882;
            UInt64(104)
        }, var823, (match (var811) {
            case caseVar1005 : Result<Bool> => 
                var691;
                var1009
            
            case caseVar1013 : Aggregate636 => 
                Option<Float64>.Some(var998)
            
            case _ => 
                var29;
                Option<Float64>.Some(var998)
            
        } ?? if (var142) { var998 } else { 30.0 } ), (Result<UInt64>.Ok(var823) ?? var1035.func1048(namedParam1049 : (Int16(-112), var1055, (var142, var893, var1062), (var983..=var1068:((-66)|1)), var1055, 'e'))), func1076<Range<Int64>, Option<UInt64>>().func2169(namedParam2170 : Result<UInt64>.Ok(var823), namedParam2171 : var2896, namedParam2172 : true, namedParam2173 : Int16(-115)), Int32(52));
        (Option<UInt64>.None ?? var844)
    }
;
    static func func816(param817 : Range<Int64>) : List<Option<Result<Bool>>> { // block id: 818
        var var840 : UInt8 = UInt8(18);
        var var856 : (Range<UInt16>*Range<Int8>*UInt64*UInt64*Float64*UInt64*Unit*Int32) = ((UInt16(31)..UInt16(61):106|1), (Int8(Int32(-124))..Int8(-50):(117|1)), UInt64(Int32(-107)), UInt64(UInt8(123)), 63.0, UInt64(110), (), Int32(UInt8(Float32(Int8(106)))));
        let var2910 : Int64 = Int64(Int16(107));
        let var2922 : Result<UInt64> = Result<UInt64>.Err(Exception());
        let var2937 : Unit = ();
        [var823, if (var142) { // block id: 827
            (var830..Int16(-92):(var33|1));
            UInt64(160)
        } else if (true) { // block id: 838
            var840;
            var840;
            var844
        } else { // block id: 847
            UInt16(225);
            let var850 : String = """
7Fhr`e/NGo
0>J/cKjK_@
""";
            var850;
            UInt64(122)
        }, var856[3], UInt64(254), var574.func880(var2910, namedParam882 : var2700), var844, (var2922 ?? var844), match {
            case var1169 => 
            '7';
            var823
            case true => 
            var490;
            var29;
            UInt64(68)
            case _ => 
            var2937;
            let var2940 : UInt64 = UInt64(72);
            var2940
        }, UInt64(var2626), var823][0];
        try { // block id: 2948
            (Result<List<Option<Result<Bool>>>>.Ok(var2443) ?? var2443)
        } finally { // block id: 2969
            try { // block id: 2971
                ();
                [Option<Result<Bool>>.Some(var811), var1193, Option<Result<Bool>>.Some(var811), var1193, var1193, Option<Result<Bool>>.Some(var811), var1193, var1193, var1193, var1193]
            } catch (e: Exception) { // block id: 2989
                Result<Bool>.Ok(var142);
                ();
                [Option<Result<Bool>>.None, var1193, var1193, Option<Result<Bool>>.Some(var811), Option<Result<Bool>>.None, var1193, var1193, Option<Result<Bool>>.Some(var811), Option<Result<Bool>>.None, Option<Result<Bool>>.None]
            } finally { // block id: 3004
                false;
                var2443
            }
        }
    }
;
    static func func727() : List<Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>> { // block id: 728
        (Int32(-125)..Int32(68):(-41)|1);
        func func731() : Result<Bool> { // block id: 732
            let var786 : Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)> = Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>.None;
            match (match (var738[7]) {
                    case _ => 
                        var786
                    
                    case _ : UInt32 => 
                        Int32(-94);
                        Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>.None
                    
                    case _ : Int64 => 
                        var786
                    
                    case _ => 
                        var29;
                        var786
                    
                }) {
                case _ => 
                    ()
                
            };
            UInt16(180);
            var var3021 : Option<Result<Bool>> = Option<Result<Bool>>.Some(var811);
            var var3029 : Option<Result<Bool>> = Option<Result<Bool>>.Some(var811);
            (func816((48..57:(var1242|1)))[7] ?? if (([var1193, var1193, Option<Result<Bool>>.Some(var811), Option<Result<Bool>>.None, var3021, var3021, Option<Result<Bool>>.None, var3029, var3021, var1193] is Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>)) { // block id: 3033
                (-110.0);
                Result<Bool>.Err(Exception())
            } else { // block id: 3036
                var811
            })
        }
;
        func731();
        var var3178 : Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)> = Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>.None;
        let var3222 : Float32 = Float32(119.0);
        let var3237 : UInt8 = UInt8(17);
        var var3246 : Rune = 'v';
        (try { // block id: 3146
            var691;
            var3149
        } catch (_) { // block id: 3151
            var29;
            var738;
            Result<List<Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>>>.Err(Exception())
        } finally { // block id: 3155
            Result<List<Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>>>.Ok(var3044)
        } ?? try { // block id: 3158
            [var1328, var1328, Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>.Some(var691), Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>.None, Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>.Some(var691), var1328, var1328, Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>.None, var1328, var1328]
        } catch (_) { // block id: 3171
            let var3187 : Bool = ((UInt64(229)..UInt64(129):74|1) is (UInt32) -> Range<Int16>);
            let var3195 : Int32 = Int32(Float32(85.0));
            [Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>.None, Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>.Some(var691), Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>.Some(var691), var3178, Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>.None, Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>.Some(var691), var3178, Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>.Some(var691), Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>.Some(var691), Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>.None]
        } finally { // block id: 3228
            var3044;
            var29;
            [Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>.Some(var691), Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>.Some(var691), Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>.Some(var691), Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>.Some(var691), Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>.Some(var691), var3178, Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>.None, Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>.Some(var691), var3178, var1328]
        })
    }
;
    func func679(param680 : Int16, namedParam681 ! : (Unit) -> (Rune*Int16*Int8)) : Bool { // block id: 684
        let var3263 : Float32 = Float32(-56.0);
        var var3274 : Range<UInt32> = (UInt32(68)..UInt32(135):(-51)|1);
        let var3286 : Rune = '8';
        let var3289 : Rune = '3';
        let var3306 : Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)> = (Result<List<Option<Result<Bool>>>>.Ok(var2443) as (Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune));
        (func727()[2] ?? match (match (var2700) {
                case (_,var3263 | var3263 | var3263,caseVar3267 : List<Bool>,_ : Aggregate1651,_,caseVar3268) => 
                    var3271;
                    var3274
                
                case _ : Interface315 => 
                    (UInt32(201)..UInt32(54):(-118)|1)
                
                case (caseVar3282 : Range<Int8>,var3263 | -17.0,(102,_ : (Range<UInt16>*Range<Int8>*UInt64*UInt64*Float64*UInt64*Unit*Int32),caseVar3284,_ : Interface315,_ : Rune,var3286 | var3289 | var3289 | 'b'),_ : Aggregate405,_,_ : Option<UInt64>) => 
                    var3271;
                    (UInt32(217)..=UInt32(131):59|1)
                
                case caseVar3297 : Range<Int16> => 
                    ();
                    var var3314 : Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)> = ('F' as (Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune));
                    Result<List<Option<(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)>>>.Ok(var3044);
                    (UInt32(20)..UInt32(175):(-39)|1)
                
                case _ => 
                    (UInt32(168)..=UInt32(201):(-25)|1)
                
            }) {
            case _ => 
                (UInt32(109)..=UInt32(133):(-2)|1);
                var var3332 : Int32 = Int32(UInt8(254));
                (var998, Int32(-12), var3263, false, var3332, (), var3289);
                let var3353 : Unit = ();
                (param680, UInt8(4), (var1169, [var29, (), var29, (), (), var29, (), (), var3271, var3353], Float32(-66.0)), var490, var1055, var3286)
            
        });
        ((Int32(var830) as Bool) ?? (Option<Bool>.Some(var142) ?? match (var3044) {
            case _ => 
                var29;
                var1169
            
            case _ => 
                ();
                ();
                false
            
            case caseVar3385 : Result<List<Option<Result<Bool>>>> => 
                var142
            
            case _ => 
                var3271;
                true
            
        }))
    }
;
    func func585(param586 : Int8) : Unit { // block id: 587
        var29;
        let var593 : (Range<UInt32>*Range<UInt16>*Bool*Range<Int8>*List<Unit>) = ((UInt32(UInt8(UInt32(90)))..UInt32(78):(Int64(73.0)|1)), (UInt16(22)..UInt16(220):(8|1)), false, (Int8(39)..=Int8(91):76|1), [(), (), (), (), (), (), (), (), (), ()]);
        if (var593[2]) { // block id: 620
            func622(UInt32(25))
        } else { // block id: 627
            try { // block id: 629
                (UInt64(0)..=UInt64(208):42|1);
                UInt16(169)
            } catch (_) { // block id: 632
                var29;
                UInt16(23)
            };
            Aggregate636.var641
        };
        let var660 : (List<Unit>*Result<Bool>*Unit) = ([(), (), (), (), (), (), (), (), (), ()], Result<Bool>.Err(Exception()), ());
        var loopTimeVar3418 : Int64 = 0;
        do {
            loopTimeVar3418++;
            if (var1169) { // block id: 3397
                ();
                var29;
                ()
            } else if (false) { // block id: 3402
                var823;
                ();
                ()
            };
            if (false) { // block id: 3408
                Class313(var1343);
                var3271
            } else if (true) { // block id: 3413
                ();
                ();
                ()
            }
        } while ((var660[1] ?? var574.func679(Int16(-8), namedParam681 : func75)) && loopTimeVar3418 < 100 ) 
    }
;
    func func419() : (Bool*List<Unit>*Float32) 

}

public interface Interface315 <: Interface314<Result<UInt64>> {
    func func1048(namedParam1049 ! : (Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)) : UInt64 { // block id: 1050
        UInt64(213)
    }
;
    func func1206(namedParam1207 ! : Interface314<Result<UInt64>>) : Unit { // block id: 1208
        try { // block id: 1210
            var1218.getOrThrow();
            var loopTimeVar1223 : Range<UInt64> = (UInt64(UInt16(133))..=UInt64(167):(Int64(Int32(Int64(UInt16(230))))|1));
            for (i in loopTimeVar1223) if (var1169) {

            };
            try { // block id: 1233
                var1055;
                var29
            } catch (_) { // block id: 1236
                var29;
                (UInt32(202)..UInt32(225):(var1242|1));
                var29
            } finally { // block id: 1245
                ###"m5(orOGFRX"###;
                var29
            }
        } finally { // block id: 1248
            match (var811) {
                case caseVar1253 : List<Bool> => 
                    ()
                
                case caseVar1258 : Result<UInt64> => 
                    var29;
                    var29
                
                case caseVar1264 : (UInt32*(Rune*Int16*Int8)*Range<Int16>*Unit*Unit*Unit*List<Bool>*(Rune*Int16*Int8)*Range<UInt32>) => 
                    [true, false, true, true, true, false, true, false, true, false];
                    var830;
                    ()
                
                case _ : List<UInt64> => 
                    var29;
                    ();
                    var29
                
                case _ => 
                    var29
                
            }
        }
    }

}

func func319(param320 : Float64) : Class313 { // block id: 321
    var var367 : Rune = 'n';
    if ((Result<List<Bool>>.Err(Exception()) ?? [var142, var142, false, true, var142, false, var142, true, var344, false])[3]) { // block id: 348
        if (var142) { // block id: 351
            ();
            var29;
            (Int16(-29)..=Int16(73):125|1)
        } else if (true) { // block id: 356
            var358
        } else { // block id: 360
            (Int16(106)..=Int16(-59):116|1)
        };
        let var371 : Int8 = Int8(-51);
        if (false) { // block id: 364
            (var367, Int16(-119), var371);
            ()
        } else if (true) { // block id: 375
            ()
        };
        if (true) { // block id: 379
            Int8(-114);
            ()
        } else if (var142) { // block id: 383

        }
    };
    var loopTimeVar402 : Int64 = 0;
    do {
        loopTimeVar402++;
        if (false) { () } else { var29 } ;
        match (Result<List<Bool>>.Ok(var331)) {
            case _ => 
                UInt32(220);
                '4';
                var399
            
        }
    } while (var142 && loopTimeVar402 < 100 ) ;
    Class313()
}


public struct Aggregate405 {
    public init() { // block id: 407

    }
;
    public var var412 : Float64 = Float64(UInt64(UInt16(Int16(Int8(-57)))))
}


public struct Aggregate636 {
    public init() { // block id: 638

    }
;
    public static var var641 : Range<Int16> = (Int16(Int16(UInt16(128)))..=Int16(Int32(-128)):(Int64((-76))|1));
    private static let var2102 : Aggregate636 = Aggregate636();
    public init(param1895 : (Range<UInt32>*Range<UInt16>*Bool*Range<Int8>*List<Unit>), optionalParam1896 ! : UInt16 = UInt16(24), optionalParam1898 ! : ((Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)*Float32*(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)*Range<Int64>*List<Bool>*Range<Int64>) = ((Int16(-18), UInt8(UInt64(204)), (([false, true, false, true, false, false, false, true, false, false] is List<UInt64>), [(), (), (), (), (), (), (), (), (), ()], Float32(UInt64(218))), (Int32(Int8(33))..=Int32(Int8(61)):(Int64((-10))|1)), UInt8(Int8(UInt32(165))), 'D'), Float32(73.0), (Int16(-84), UInt8(87), (false, [(), (), (), (), (), (), (), (), (), ()], Float32((-118.0))), (Int32(20)..=Int32(-124):(Int64(UInt64(133))|1)), UInt8(238), 'e'), (Int64(Float64(UInt64(26)))..=90:(23|1)), [(((-126.0), Int32(-85), Float32(28.0), true, Int32(13), (), 'O') is UInt16), true, false, ((Int16(-104), UInt8(165), (false, [(), (), (), (), (), (), (), (), (), ()], Float32(-124.0)), (Int32(52)..Int32(-120):(-99)|1), UInt8(207), 'c') is String), ([UInt64(237), UInt64(169), UInt64(155), UInt64(61), UInt64(187), UInt64(11), UInt64(110), UInt64(145), UInt64(71), UInt64(249)] is Result<Bool>), ((false, [(), (), (), (), (), (), (), (), (), ()], Float32(-21.0)) is () -> Bool), (Aggregate405() is Int16), true, (([(), (), (), (), (), (), (), (), (), ()], Result<Bool>.Ok(var142), ()) is ((Unit) -> (Rune*Int16*Int8)) -> (Bool*List<Unit>*Float32)), true], ((-22)..=(-85):(-56)|1)), namedParam2053 ! : Range<Int64>) { // block id: 2054
        var var2061 : UInt32 = UInt32(Int32(-102));
        var loopTimeVar2100 : Int64 = 0;
        do {
            loopTimeVar2100++;
            try { // block id: 2059
                var2061
            } finally { // block id: 2064
                let var2068 : Float32 = Float32(Int32(Int32(-64)));
                (var691, var2068, (Int16(-45), UInt8(198), (var1169, [var29, (), var29, var29, (), var29, (), var29, var29, var29], Float32(-56.0)), (Int32(-48)..Int32(19):(-90)|1), UInt8(123), 'r'), (var1242..(-64):(71|1)), [true, true, true, false, false, true, true, true, false, true], (58..(-97):40|1));
                var2061
            }
        } while (var1169 && loopTimeVar2100 < 100 ) ;
        var2102
    }
;
    public static prop var2584 : Bool { // block id: 2585
        get() { // block id: 2587
            ();
            (Option<Result<Bool>>.Some(var811) is UInt8)
        }

    };
    public static var var2602 : (Rune*Int16*Int8) = ('F', Int16(UInt8(Int16(UInt32(133)))), Int8(Float32(UInt8(UInt16(51)))));
    public static mut prop var2617 : UInt32 { // block id: 2618
        get() { // block id: 2620
            UInt32(179)
        }

        set(Value) { // block id: 2624

        }

    };
    public static let var2638 : Aggregate636 = Aggregate636();
    public static var var2810 : Float32 = Float32(UInt16(2));
    public static mut prop var2815 : (Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune) { // block id: 2816
        get() { // block id: 2818
            (Int16(-124), UInt8(UInt64(UInt64(154))), ((() is Range<UInt16>), [(), (), (), (), (), (), (), (), (), ()], Float32(UInt16(41))), (Int32(-8)..Int32(22):(Int64(66.0)|1)), UInt8(174), '1')
        }

        set(Value) { // block id: 2849

        }

    };
    public static let var2853 : Range<Int64> = ((-125)..81:(Int64(Int16(122))|1));
    public init(namedParam2437 ! : (UInt32*(Rune*Int16*Int8)*Range<Int16>*Unit*Unit*Unit*List<Bool>*(Rune*Int16*Int8)*Range<UInt32>), optionalParam2438 ! : List<Bool> = [true, true, false, false, true, false, false, true, true, true]) { // block id: 2440
        match (var2443) {
            case caseVar2500 : (Float64*Float32*Float32*Range<UInt16>*Rune) => 
                ();
                var var2504 : Unit = ();
                var2504
            
            case _ : Range<Int64> => 
                ();
                var29;
                ()
            
            case _ => 
                var2515;
                var29
            
        };
        var var2646 : Result<UInt64> = Result<UInt64>.Err(Exception());
        let var2800 : UInt8 = UInt8(54);
        if (if (match (true) {
            case false => 
                ((UInt32(119)..=UInt32(81):(-22)|1), (var2551..=var2551:(var33|1)), true, (var441..var441:((-68)|1)), [(), (), (), (), (), (), (), (), (), ()]);
                false
            
            case caseVar2568 => 
                [false, true, true, false, false, true, true, true, false, true];
                caseVar2568
            
            case caseVar2574 => 
                ();
                var29;
                caseVar2574
            
            case var1169 | var1169 | var2584 | var1169 => 
                var142
            
            case _ => 
                ();
                false
            
        }) { // block id: 2598
            var142
        } else if ((var2602 is Result<((Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)*Float32*(Int16*UInt8*(Bool*List<Unit>*Float32)*Range<Int32>*UInt8*Rune)*Range<Int64>*List<Bool>*Range<Int64>)>)) { // block id: 2613
            false;
            (var2617..var2626:(12|1));
            true
        } else { // block id: 2634
            Aggregate405();
            true
        }) { var2638 } else { match (if (true) { // block id: 2643
                (-116.0);
                var2646
            } else if (var1169) { // block id: 2649
                var2646
            } else { // block id: 2651
                var29;
                var1055;
                var2646
            }) {
            case caseVar2657 : Int8 => 
                ();
                var29;
                var2638
            
            case caseVar2664 => 
                Result<List<Bool>>.Ok(var331);
                ();
                var var2670 : (Range<UInt32>*Range<UInt16>*Bool*Range<Int8>*List<Unit>) = ((UInt32(11)..UInt32(UInt8(1)):(64|1)), (UInt16(12)..UInt16(Int32(11)):(Int64(43)|1)), ('t' is () -> Interface314<Result<UInt64>>), (Int8(122)..=Int8(31):(-73)|1), [(), (), (), (), (), (), (), (), (), ()]);
                Aggregate636(var2670, optionalParam1898 : var2700, namedParam2053 : ((-31)..(-83):74|1))
            
            case caseVar2779 => 
                ();
                Aggregate636(((UInt32(46)..=var2617:((-107)|1)), var900, var1169, (var441..Int8(4):((-83)|1)), [(), (), (), (), (), (), (), (), (), ()]), optionalParam1896 : var2551, optionalParam1898 : ((Int16(4), var2800, var1343, (Int32(-96)..Int32(24):(var1242|1)), UInt8(207), 'p'), var2810, var2815, ((-31)..=(-68):(-59)|1), var331, var2853), namedParam2053 : (var33..var1242:((-122)|1)))
            
            case _ : (UInt32*(Rune*Int16*Int8)*Range<Int16>*Unit*Unit*Unit*List<Bool>*(Rune*Int16*Int8)*Range<UInt32>) => 
                var1193;
                ();
                var2102
            
            case _ => 
                Aggregate636()
            
        } } 
    }

}







public struct Aggregate1651 {
    public init() { // block id: 1653

    }
;
    public static prop var1656 : Range<UInt16> { // block id: 1657
        get() { // block id: 1659
            (UInt16(UInt64(24))..UInt16(213):(17|1))
        }

    }
}








/*
return code: 139
*/
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_expected_expression
// ASSERT: scan parse_chained_none_associative
// ASSERT: scan parse_expected_left_brace
