/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args


let var_1690753596060_50 : Float64 = Float64(103.0)
let var_1690753596060_57 : Int16 = Int16(-96)
public let var_1690753596060_95 : UInt64 = UInt64(Int8(-122))
public var var_1690753596060_133 : UInt16 = UInt16(234)
public var var_1690753596060_161 : ?Unit = Option<Unit>.None
var var_1690753596060_185 : ?Class_1690753596060_24 = (match (Class_1690753596060_67()) {
    case newVar: Class_1690753596060_24 => Option<Class_1690753596060_24>.Some(newVar)
    case _ => Option<Class_1690753596060_24>.None
})
public var var_1690753596060_200 : UInt64 = UInt64(235)
var var_1690753596060_210 : Int64 = Int64(UInt8(Int8(Int8(UInt8(84)))))
const var_1690753596060_232 : Bool = true
public let var_1690753596060_260 : Struct_1690753596060_7<UInt32> = Struct_1690753596060_7<UInt32>()
var var_1690753596060_289 : UInt32 = UInt32(UInt32(UInt16(94)))
public var var_1690753596060_301 : Unit = ()
var var_1690753596060_322 : Range<UInt64> = ((UInt64(UInt64(0))&127)..(UInt64(UInt64(74))&127):(Int64(-19)|1))
public const var_1690753596060_352 : UInt8 = 160
public var var_1690753596060_357 : Bool = false
public let var_1690753596060_474 : ?Unit = Option<Unit>.None
public var var_1690753596060_566 : (Option<Option<Unit>>, Int32, Float64) = (Option<Option<Unit>>.None, Int32(UInt8(213)), Float64(Float32(-111.0)))
public let var_1690753596060_713 : Int32 = Int32(-1)
var var_1690753596060_717 : (Option<Option<Unit>>, Int32, Float64) = (Option<Option<Unit>>.None, Int32(Int32(UInt32(UInt16(203)))), Float64(-94.0))
public let var_1690753596060_732 : ?Float32 = (match (Option<Class_1690753596060_24>.None) {
    case newVar: Float32 => Option<Float32>.Some(newVar)
    case _ => Option<Float32>.None
})
const var_1690753596060_752 : Int8 = -87
var var_1690753596060_916 : Int = Int64(UInt64(Int64(UInt32(UInt32(103)))))
public const var_1690753596060_929 : Float32 = 8.0
public struct Struct_1690753596060_7<T0> {
    Struct_1690753596060_7() { // block id: 9

    }
;
    public var var_1690753596060_263 : (Option<Option<Unit>>, Int32, Float64) = (Option<Option<Unit>>.None, Int32(64), Float64(-122.0));
    var var_1690753596060_538 : Bool = false;
    private var var_1690753596060_838 : Array<Option<Float32>> = [Option<Float32>.None, Option<Float32>.None, Option<Float32>.None, Option<Float32>.None, Option<Float32>.None, Option<Float32>.None, Option<Float32>.None, Option<Float32>.None, Option<Float32>.None, Option<Float32>.None];
    var var_1690753596060_944 : Struct_1690753596060_940<UInt32> = Struct_1690753596060_940<UInt32>();
    func func_1690753596060_798(param_1690753596060_799 : Bool, optionalParam_1690753596060_800 ! : Bool = (match (Int8(-47)) {
        case _: (Rune) -> Option<Unit> => true
        case _ => false
    }), namedParam_1690753596060_803 ! : Int8, optionalParam_1690753596060_804 ! : Unit = ()) : UInt16 { // block id: 806
        var var_1690753596060_857 : Int8 = Int8(98);
        if ((match (match (UInt8(172)) {
            case caseVar_1690753596060_813 : UInt32 => 
                ((UInt16(var_1690753596060_133)&127)..(UInt16(UInt16(207))&127):(Int64(-2)|1));
                const var_1690753596060_820 : Int32 = 12;
                var_1690753596060_820
            
            case _ => 
                ((Int64(Int64(-35))&127)..(Int64(Int64(78))&127):(Int64(115)|1));
                var_1690753596060_133 = var_1690753596060_133 / ((UInt16(70)) | 1);
                var_1690753596060_713 ^ Int32(98)
            
        }) {
            case _: Range<Int16> => true
            case _ => false
        })) { // block id: 834
            var_1690753596060_838[1];
            match (((UInt64(UInt64(188))&127)..=(UInt64(UInt64(249))&127):(Int64(39)|1))) {
                case _ => 
                    var_1690753596060_857 = var_1690753596060_857 / ((var_1690753596060_857) | 1);
                    var_1690753596060_301
                
            };
            var var_1690753596060_863 : (Range<UInt64>, UInt16, Int8, Range<Int16>, (Range<Int8>, UInt16, Int8), Float32) = (((UInt64(UInt64(UInt32(172)))&127)..=(UInt64(UInt64(251))&127):(Int64(Int64(122))|1)), UInt16(Int16(-45)), Int8(5), ((Int16(Int16(Int16(-56)))&127)..=(Int16(Int16(Int8(UInt8(169))))&127):(Int64(9)|1)), (((Int8(Int8(50))&127)..=(Int8(Int8(Int8(101)))&127):(Int64(Int32(115))|1)), UInt16(Int8(4)), Int8(UInt8(42))), Float32(16.0));
            var_1690753596060_863[1]
        } else if (if (try { // block id: 896
            var_1690753596060_57 != Int16(101)
        } finally { // block id: 900
            var_1690753596060_232
        }) { // block id: 902
            UInt32(55);
            var_1690753596060_538
        } else if (if (false) { // block id: 907
            false
        } else if (var_1690753596060_232) { // block id: 910
            var_1690753596060_357
        } else { // block id: 912
            var_1690753596060_210 >= var_1690753596060_916
        }) { // block id: 922
            true
        } else { // block id: 924
            ();
            Float32(-27.0) != var_1690753596060_929
        }) { // block id: 931
            var_1690753596060_133
        } else { // block id: 933
            let var_1690753596060_935 : Option<Option<Unit>> = Option<Option<Unit>>.None;
            var_1690753596060_935;
            var_1690753596060_133 = var_1690753596060_133 + 1;
            Struct_1690753596060_940<UInt32>.var_1690753596060_947
        }
    }

}

public open class Class_1690753596060_24 {
    Class_1690753596060_24() { // block id: 26

    }
;
    public let var_1690753596060_87 : Bool = true;
    static const var_1690753596060_128 : Bool = false;
    public static const var_1690753596060_136 : UInt16 = 217;
    public static var var_1690753596060_147 : Unit = ();
    static var var_1690753596060_182 : ??Class_1690753596060_24 = Option<Option<Class_1690753596060_24>>.None;
    static func func_1690753596060_113<T0>(optionalParam_1690753596060_114 ! : String = """
8arM9
/S9`I
""", namedParam_1690753596060_116 ! : UInt16, optionalParam_1690753596060_117 ! : UInt16 = UInt16(Int8(UInt8(Int8(-1))))) : Option<Class_1690753596060_24> { // block id: 122
        if (false) { // block id: 125
            var loopTimeVar_1690753596060_139 : Int64 = 0;
            while ((var_1690753596060_128) && loopTimeVar_1690753596060_139 < 100 ) {
                loopTimeVar_1690753596060_139++;
                var_1690753596060_133 = var_1690753596060_133 >> ((var_1690753596060_136) & 7)
            };
            (match (Option<Unit>.None) {
                case Some(num) => num
                case None => var_1690753596060_147
            });
            let var_1690753596060_151 : ?Unit = (match (Int64(11)) {
                case newVar: Unit => Option<Unit>.Some(newVar)
                case _ => Option<Unit>.None
            });
            (match (var_1690753596060_151) {
                case Some(num) => num
                case None => ()
            })
        } else if (if (let caseVar_1690753596060_165 <- if (false) { Option<Unit>.Some(()) } else { var_1690753596060_161 } ) {
            Int32(-108);
            !var_1690753596060_128
        } else {
            false
        }) { // block id: 173

        };
        var var_1690753596060_196 : Int32 = Int32(-65);
        try { // block id: 175
            (match (var_1690753596060_182) {
                case Some(num) => num
                case None => var_1690753596060_185
            })
        } catch (e: Exception) { // block id: 188
            try { // block id: 190
                var_1690753596060_185
            } catch (_) { // block id: 192
                Int32(-81) * var_1690753596060_196;
                var_1690753596060_200 = var_1690753596060_95;
                var_1690753596060_185
            }
        }
    }
;
    public let var_1690753596060_624 : ?Unit = Option<Unit>.None;
    public static var var_1690753596060_759 : Bool = true;
    public static mut prop var_1690753596060_770 : Float32 { // block id: 771
        get() { // block id: 773
            ((UInt64(UInt64(Int32(-27)))&127)..=(UInt64(UInt64(Int32(28)))&127):(Int64(-39)|1));
            Float32(-47.0)
        }

        set(Value) { // block id: 783
            ()
        }

    };
    static func func_1690753596060_29() : Struct_1690753596060_7<UInt32> { // block id: 30
        let var_1690753596060_46 : ?Unit = Option<Unit>.None;
        var loopTimeVar_1690753596060_792 : Int64 = 0;
        (match ((match ((Option<Option<Unit>>.Some(var_1690753596060_46), Int32(-97), var_1690753596060_50)[0]) {
            case Some(num) => num
            case None => func_1690753596060_54<UInt64, Class_1690753596060_67>()
        })) {
            case Some(num) => num
            case None => do {
            loopTimeVar_1690753596060_792++;

        } while ((match (Struct_1690753596060_7<UInt32>()) {
            case caseVar_1690753596060_745 : Option<Option<Unit>> => 
                ((UInt16(UInt16(201))&127)..(UInt16(UInt16(148))&127):(Int64(-64)|1));
                var_1690753596060_713;
                Int8(33) < var_1690753596060_752
            
            case _ : UInt64 => 
                var_1690753596060_759 = var_1690753596060_759 || (true);
                false
            
            case _ : Option<Float32> => 
                var_1690753596060_759
            
            case _ => 
                var_1690753596060_770;
                var_1690753596060_357 = var_1690753596060_357 && (true);
                !var_1690753596060_232
            
        }) && loopTimeVar_1690753596060_792 < 100 ) 
        });
        var_1690753596060_260
    }

}




public open class Class_1690753596060_67 <: Class_1690753596060_24 {
    init() { // block id: 69

    }
;
    public let var_1690753596060_74 : (Int8, UInt64, Int8, Option<Class_1690753596060_24>, Bool, Int16) = (Int8(-56), UInt64(117), Int8(-67), Option<Class_1690753596060_24>.None, true, Int16(99))
}



func func_1690753596060_54(param_1690753596060_329 : Array<UInt64>, param_1690753596060_330 : Bool, param_1690753596060_331 : Float64) : Bool { // block id: 332
    const var_1690753596060_339 : Bool = true;
    var var_1690753596060_366 : UInt64 = UInt64(Int16(-91));
    match (UInt8(Int8(-39)) ^ if (var_1690753596060_339) { // block id: 341
        var_1690753596060_301;
        var var_1690753596060_345 : Bool = (match (UInt32(UInt8(UInt8(199)))) {
            case _: String => true
            case _ => false
        });
        var_1690753596060_345 = var_1690753596060_345 && (false);
        var_1690753596060_352
    } else { // block id: 354
        var_1690753596060_357 = var_1690753596060_357 && (true);
        var_1690753596060_352
    }) {
        case _ : Class_1690753596060_24 => 
            var_1690753596060_366 = var_1690753596060_366 % ((var_1690753596060_95) | 1);
            ();
            var_1690753596060_339
        
        case _ => 
            var_1690753596060_366 = var_1690753596060_366 - (UInt64(190));
            var_1690753596060_232
        
    }
}



public struct Struct_1690753596060_576<T0> {
    init() { // block id: 578

    }
;
    mut prop var_1690753596060_583 : Bool { // block id: 584
        get() { // block id: 586
            true;
            var_1690753596060_957
        }

        set(Value) { // block id: 590
            ();
            var_1690753596060_957 = Value
        }

    };
    mut prop var_1690753596060_957 : Bool { // block id: 958
        get() { // block id: 960
            (match (Class_1690753596060_67()) {
                case _: Option<Class_1690753596060_24> => true
                case _ => false
            })
        }

        set(Value) { // block id: 965
            ()
        }

    }
}

func func_1690753596060_306<T0>(param_1690753596060_307 : Int32) : Option<Option<Unit>> { // block id: 308
    let var_1690753596060_318 : Class_1690753596060_24 = Class_1690753596060_67();
    let var_1690753596060_456 : (Int8, UInt64, Int8, Option<Class_1690753596060_24>, Bool, Int16) = (Int8(Int8(-28)), UInt64(253), Int8(25), (match (UInt16(146)) {
        case newVar: Class_1690753596060_24 => Option<Class_1690753596060_24>.Some(newVar)
        case _ => Option<Class_1690753596060_24>.None
    }), false, Int16(-19));
    let var_1690753596060_521 : Float32 = Float32(-25.0);
    let var_1690753596060_531 : Float32 = Float32(104.0);
    let var_1690753596060_544 : (UInt16, Int32, Option<Class_1690753596060_24>, Int16, Int32, Int16) = (UInt16(156), Int32(UInt8(Int8(Int8(-98)))), Option<Class_1690753596060_24>.None, Int16(75), Int32(UInt32(UInt16(77))), Int16(Int16(UInt16(73))));
    let var_1690753596060_580 : Struct_1690753596060_576<Range<UInt64>> = Struct_1690753596060_576<Range<UInt64>>();
    func func_1690753596060_312() : Class_1690753596060_24 { // block id: 313
        var loopTimeVar_1690753596060_424 : Array<UInt64> = [UInt64(Int8(UInt8(UInt8(30)))), UInt64(Int16(39)), UInt64(Int8(-121)), UInt64(Int8(Int8(-59))), UInt64(Int64(UInt8(248))), UInt64(245), UInt64(Int8(-126)), UInt64(Int64(-96)), UInt64(UInt8(195)), UInt64(40)];
        let iter314 = loopTimeVar_1690753596060_424.iterator()
        while (true) {
            match (iter314.next()) {
                case None => break
                case Some(v) => match (v) {
                    case i where (if ((match (var_1690753596060_318) {
                        case _: UInt64 => true
                        case _ => false
                    })) { // block id: 320
                        var_1690753596060_322;
                        var_1690753596060_210 <= var_1690753596060_210
                    } else if (func_1690753596060_54([UInt64(10), UInt64(8), UInt64(40), UInt64(165), UInt64(55), UInt64(199), UInt64(202), UInt64(117), UInt64(41), UInt64(136)], var_1690753596060_357, var_1690753596060_50)) { // block id: 381
                        Float64(88.0);
                        ((UInt8(var_1690753596060_352)&127)..(UInt8(UInt8(177))&127):(var_1690753596060_210|1));
                        Int16(-75) > Int16(115)
                    } else { // block id: 390
                        var_1690753596060_357
                    }) => var_1690753596060_357 = var_1690753596060_357 || (var_1690753596060_357);let var_1690753596060_398 : (Option<Option<Unit>>, Int32, Float64) = ((match ([UInt64(UInt64(241)), UInt64(Int64(-71)), UInt64(28), UInt64(106), UInt64(Int16(-45)), UInt64(163), UInt64(UInt64(23)), UInt64(UInt32(188)), UInt64(UInt32(65)), UInt64(UInt16(119))]) {
    case newVar: Option<Unit> => Option<Option<Unit>>.Some(newVar)
    case _ => Option<Option<Unit>>.None
}), Int32(Int32(Int8(-85))), Float64(-120.0));var_1690753596060_398[0]
                    case _ => continue
                }
            }
        }
;
        (match (try { // block id: 454
            var_1690753596060_456;
            ();
            Option<Unit>.None
        } catch (e: Exception) { // block id: 468
            ();
            if (false) { Option<Unit>.None } else { var_1690753596060_474 } 
        } finally { // block id: 476
            Option<Class_1690753596060_24>.None;
            if (true) { Option<Unit>.None } else { Option<Unit>.Some(var_1690753596060_301) } 
        }) {
            case Some(num) => num
            case None => match ((match (Option<Option<Unit>>.None) {
            case Some(num) => num
            case None => Option<Unit>.None
        })) {
            case caseVar_1690753596060_493 => 
                var_1690753596060_301
            
            case caseVar_1690753596060_498 : Range<UInt64> => 
                var_1690753596060_357 = var_1690753596060_357 || (false);
                var_1690753596060_289 = var_1690753596060_289 << ((UInt32(67)) & 7)
            
            case caseVar_1690753596060_508 : UInt16 => 
                var_1690753596060_357 = var_1690753596060_357 || (true);
                var_1690753596060_456;
                var_1690753596060_301
            
            case _ : (Int8, UInt64, Int8, Option<Class_1690753596060_24>, Bool, Int16) => 
                ((UInt16(UInt16(90))&127)..(UInt16(UInt16(40))&127):(Int64(-30)|1));
                var_1690753596060_521 / Float32((Int32(var_1690753596060_521)) | 1);
                var_1690753596060_301
            
            case _ => 
                var_1690753596060_301;
                Float32(-25.0) - var_1690753596060_531;
                ()
            
        }
        });
        let var_1690753596060_607 : Rune = r'n';
        let var_1690753596060_616 : Range<UInt16> = ((UInt16(UInt16(163))&127)..=(UInt16(UInt16(UInt16(148)))&127):(Int64(-121)|1));
        if ((var_1690753596060_260.var_1690753596060_538)) { (match (var_1690753596060_544[2]) {
            case Some(num) => num
            case None => if (false) { // block id: 562
            var_1690753596060_318
        } else { // block id: 564
            var_1690753596060_566;
            Class_1690753596060_67()
        }
        }) } else { (if ((var_1690753596060_580.var_1690753596060_583)) { (Class_1690753596060_24(), var_1690753596060_521, ((Int8(Int8(-5))&127)..=(Int8(Int8(34))&127):(Int64(56)|1)), UInt8(170))[0] } else { if (false) { // block id: 602
            var_1690753596060_357 = var_1690753596060_357 || (true);
            var_1690753596060_607;
            var_1690753596060_318
        } else { // block id: 610
            if (false) { var_1690753596060_161 } else { Option<Unit>.None } ;
            var_1690753596060_616;
            Class_1690753596060_24()
        } } ) } 
    }
;
    match (func_1690753596060_312().var_1690753596060_624) {
        case _ : Range<UInt32> => 
            var var_1690753596060_630 : Option<Option<Unit>> = (match ((UInt16(Int8(-50)), Int32(Int32(Int8(-54))), (match ((match (((Int32(Int32(51))&127)..(Int32(Int32(20))&127):(Int64(80)|1))) {
                case newVar: Class_1690753596060_24 => Option<Class_1690753596060_24>.Some(newVar)
                case _ => Option<Class_1690753596060_24>.None
            })) {
                case newVar: Class_1690753596060_24 => Option<Class_1690753596060_24>.Some(newVar)
                case _ => Option<Class_1690753596060_24>.None
            }), Int16(Int8(-21)), Int32(UInt32(UInt16(77))), Int16(UInt8(6)))) {
                case newVar: Option<Unit> => Option<Option<Unit>>.Some(newVar)
                case _ => Option<Option<Unit>>.None
            });
            var_1690753596060_630;
            var_1690753596060_289 = var_1690753596060_289 >> ((UInt32(100)) & 7)
        
        case _ => 
            ();
            var var_1690753596060_656 : UInt = UInt64(UInt64(UInt32(79)));
            var_1690753596060_656 = var_1690753596060_656 / ((var_1690753596060_200) | 1);
            var_1690753596060_301
        
    };
    var loopTimeVar_1690753596060_669 : Range<UInt64> = ((UInt64(UInt64(172))&127)..(UInt64(UInt64(115))&127):(Int64(UInt64(UInt16(65)))|1));
    let iter662 = loopTimeVar_1690753596060_669.iterator()
    while (true) {
        match (iter662.next()) {
            case None => break
            case Some(v) => match (v) {
                case i where (match (var_1690753596060_57) {
                    case _ => 
                        true
                    
                }) => ();
                case _ => continue
            }
        }
    }
;
    var var_1690753596060_682 : (Range<UInt64>, UInt16, Int8, Range<Int16>, (Range<Int8>, UInt16, Int8), Float32) = (((UInt64(UInt64(247))&127)..(UInt64(UInt64(51))&127):(Int64(2)|1)), UInt16(224), Int8(-20), ((Int16(Int16(Int16(Int16(47))))&127)..(Int16(Int16(Int8(24)))&127):(Int64(UInt32(113))|1)), (((Int8(Int8(Int8(-117)))&127)..=(Int8(Int8(-3))&127):(Int64(UInt8(57))|1)), UInt16(198), Int8(-96)), Float32(Float32(Float32(76.0))));
    (match (var_1690753596060_682[4][0]) {
        case newVar: Option<Unit> => Option<Option<Unit>>.Some(newVar)
        case _ => Option<Option<Unit>>.None
    })
}


public func func_1690753596060_106(param_1690753596060_107 : Rune) : Option<Unit> { // block id: 108
    match (Class_1690753596060_24.func_1690753596060_113<Option<Unit>>(namedParam_1690753596060_116 : var_1690753596060_133, optionalParam_1690753596060_117 : UInt16(137))) {
        case _ => 
            var_1690753596060_210
        
        case _ => 
            Int64(-56) - var_1690753596060_210
        
        case _ => 
            var_1690753596060_210
        
    };
    var loopTimeVar_1690753596060_238 : Range<UInt64> = ((UInt64(UInt64(Int16(Int8(-4))))&127)..=(UInt64(UInt64(0))&127):(Int64(UInt8(UInt8(150)))|1));
    let iter225 = loopTimeVar_1690753596060_238.iterator()
    while (true) {
        match (iter225.next()) {
            case None => break
            case Some(v) => match (v) {
                case i where (try { // block id: 227
                    var_1690753596060_133 - UInt16(141);
                    var_1690753596060_232
                } finally { // block id: 234
                    ();
                    var_1690753596060_232
                }) => ();
                case _ => continue
            }
        }
    }
;
    func func_1690753596060_270(namedParam_1690753596060_271 ! : String, optionalParam_1690753596060_272 ! : Option<Option<Unit>> = (match ((match (((UInt8(UInt8(UInt8(194)))&127)..=(UInt8(UInt8(65))&127):(Int64(38)|1))) {
        case newVar: Unit => Option<Unit>.Some(newVar)
        case _ => Option<Unit>.None
    })) {
        case newVar: Option<Unit> => Option<Option<Unit>>.Some(newVar)
        case _ => Option<Option<Unit>>.None
    }), namedParam_1690753596060_280 ! : Float64, optionalParam_1690753596060_281 ! : Float32 = Float32(26.0)) : Option<Unit> { // block id: 283
        (match (try { // block id: 286
            var_1690753596060_289 = var_1690753596060_289 >> ((UInt32(203)) & 7);
            Float64(56.0) / Float64((Int32(var_1690753596060_50)) | 1)
        } finally { // block id: 297
            var_1690753596060_289 = var_1690753596060_289 - 1;
            var_1690753596060_301;
            var_1690753596060_50
        }) {
            case newVar: Unit => Option<Unit>.Some(newVar)
            case _ => Option<Unit>.None
        })
    }
;
    let var_1690753596060_710 : (Int32) -> Option<Option<Unit>> = func_1690753596060_306<Option<Unit>>;
    const var_1690753596060_736 : Float32 = 119.0;
    (match (var_1690753596060_260.var_1690753596060_263[0]) {
        case Some(num) => num
        case None => func_1690753596060_270(namedParam_1690753596060_271 : ###"+6B(4^mu*@"###, optionalParam_1690753596060_272 : (var_1690753596060_710(var_1690753596060_713)), namedParam_1690753596060_280 : var_1690753596060_717[2], optionalParam_1690753596060_281 : (match (var_1690753596060_732) {
        case Some(num) => num
        case None => var_1690753596060_736
    }))
    })
}

public func func_1690753596060_54<T0, T1>() : Option<Unit> { // block id: 55
    var_1690753596060_57;
    var var_1690753596060_71 : Class_1690753596060_67 = Class_1690753596060_67();
    var var_1690753596060_91 : Class_1690753596060_24 = Class_1690753596060_24();
    (match (var_1690753596060_71.var_1690753596060_74[3]) {
        case Some(num) => num
        case None => if (var_1690753596060_71.var_1690753596060_87) { // block id: 89
        var_1690753596060_91
    } else if (var_1690753596060_95 < UInt64(121)) { // block id: 99
        ();
        var_1690753596060_91
    } else { // block id: 102
        UInt16(141);
        var_1690753596060_91
    }
    });
    func_1690753596060_106(r's')
}

public struct Struct_1690753596060_940<T0> {
    init() { // block id: 942

    }
;
    public static const var_1690753596060_947 : UInt16 = 92
}

main(): Int64 {
    try {
        func func_1690753596060_11(param_1690753596060_12 : Int16, optionalParam_1690753596060_13 ! : Int64 = Int64(105), optionalParam_1690753596060_15 ! : Float32 = Float32(87.0), optionalParam_1690753596060_17 ! : Int8 = Int8(Int8(UInt8(UInt8(216))))) : Struct_1690753596060_7<UInt32> { // block id: 22
            Class_1690753596060_24.func_1690753596060_29()
        }
;
        var chainCall6 = func_1690753596060_11(var_1690753596060_57, optionalParam_1690753596060_13 : Int64(-125), optionalParam_1690753596060_17 : Int8(123));chainCall6.func_1690753596060_798(true, namedParam_1690753596060_803 : Int8(-59), optionalParam_1690753596060_804 : ());
        Int64((var_1690753596060_352 / ((var_1690753596060_352) | 1)))
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var_1690753596060_95*var_1690753596060_95), 64)
        crccheck.updateBuffer(UInt64(var_1690753596060_133*var_1690753596060_133), 64)
        crccheck.updateBuffer(UInt64(var_1690753596060_200*var_1690753596060_200), 64)
        crccheck.updateBuffer(UInt64(var_1690753596060_210*var_1690753596060_210), 64)
        crccheck.updateBuffer(UInt64(var_1690753596060_352*var_1690753596060_352), 64)
        crccheck.updateBuffer(UInt64(var_1690753596060_752*var_1690753596060_752), 64)
        crccheck.updateBuffer(UInt64(var_1690753596060_916*var_1690753596060_916), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Int32 {
        var i = 0
        var res = ""
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            res = res + hex_value.toString()
            i = i + 3
        }
        print("\n")
        if ( res == "072111032756356200000000000000000000003777777777777777777443227066102474462" ){
            return 0
        }
        return 1
    }
}
extend Class_1690753596060_67 {

}

