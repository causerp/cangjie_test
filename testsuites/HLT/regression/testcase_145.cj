/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args

public let var_1663070663240_13 : Unit = ()
var var_1663070663240_30 : Int8 = Int8(Int8(UInt8(76)))
let var_1663070663240_38 : Bool = (r'Z' is UInt32)
public var var_1663070663240_57 : Float64 = Float64(Float32(106.0))
public var var_1663070663240_66 : Int64 = Int64(UInt32(UInt8(Int8(75))))
var var_1663070663240_72 : UInt32 = UInt32(220)
public var var_1663070663240_156 : ((Int64, String, Int16, (UInt64, Float64, String, String, String, Int64, UInt32), Rune, UInt32), UInt16, (Float64, Class_1663070663240_101, Int8, (Int64, String, Int16, (UInt64, Float64, String, String, String, Int64, UInt32), Rune, UInt32)), Int64, Int8, Unit, Int16) = ((Int64(Int8(121)), "G&(_z1hi26", Int16(Int16(Int16(38))), (UInt64(223), 36.0, """
U7I|V
O&!5Q
""", """
e#4el
 vW/<
""", " 1F 0\"i>Vd", (-47), UInt32(UInt8(246))), r'C', UInt32(Int8(Int8(31)))), UInt16(242), ((-43.0), Class_1663070663240_101(), Int8(-49), ((-128), "H5_7U$W/Hb", Int16(Int8(-119)), (UInt64(162), (-107.0), """
3* qs
v@y=g
""", "9\\g\"MwKekS", ###"a{!].yz%PJd"###, (-88), UInt32(191)), r'Q', UInt32(251))), Int64(UInt16(UInt8(Int8(90)))), Int8(UInt8(81)), (), Int16(-70))
var var_1663070663240_207 : UInt8 = UInt8(104)
public let var_1663070663240_219 : Option<Int64> = Option<Int64>.None
public let var_1663070663240_245 : (Int64, String, Int16, (UInt64, Float64, String, String, String, Int64, UInt32), Rune, UInt32) = ((-26), "a{'^9[^>2Wk", Int16(UInt8(UInt8(Int8(116)))), (UInt64(15), (-115.0), "Uj34A\"|f^>", """
BikGZ
3'E/D
""", """
aAb)P
n1#p_
""", Int64(UInt32(100)), UInt32(163)), r'R', UInt32(95))
let var_1663070663240_300 : (Int64, String, Int16, (UInt64, Float64, String, String, String, Int64, UInt32), Rune, UInt32) = (86, """
se:cl
2wY~[
""", Int16(UInt8(Int8(123))), (UInt64(UInt8(UInt8(82))), Float64((-63.0)), " <46hv4fr}", ###"ArX[#ul\"3_"###, """
1zW[=
!+-SN
""", Int64(UInt32(UInt32(177))), UInt32(132)), r'Z', UInt32(Int8(Int8(40))))
public let var_1663070663240_365 : Enum_1663070663240_362 = Enum_1663070663240_362.defaultValue
var var_1663070663240_417 : (UInt32, ((Int64, String, Int16, (UInt64, Float64, String, String, String, Int64, UInt32), Rune, UInt32), UInt16, (Float64, Class_1663070663240_101, Int8, (Int64, String, Int16, (UInt64, Float64, String, String, String, Int64, UInt32), Rune, UInt32)), Int64, Int8, Unit, Int16), UInt8) = (UInt32(197), (((-108), "<p?#vUWJ\"h", Int16(-49), (UInt64(38), 108.0, """
1-3Nu
)JhK9
""", "6~s/}kF--T", "992hsXe qi", (-113), UInt32(51)), r'K', UInt32(14)), UInt16(Int16(-12)), (27.0, Class_1663070663240_101(), Int8(Int8(94)), (47, "XKXC]g5c}o", Int16(106), (UInt64(136), (-38.0), "(Q-QFK /-P", """
*OkyQ
?y#-=
""", ###"V%9XxXEJ*3"###, 36, UInt32(200)), r'C', UInt32(98))), Int64(UInt16(157)), Int8(UInt8(UInt8(142))), (), Int16(-81)), UInt8(UInt8(UInt8(Int8(-14)))))
public var var_1663070663240_503 : Range<UInt64> = ((UInt64(55)&127)..=(UInt64(86)&127):((-78)|1))
public var var_1663070663240_558 : Bool = (UInt32(206) is String)
let var_1663070663240_592 : Array<Option<Unit>> = [Option<Unit>.None, (((Int32(22)&127)..(Int32(72)&127):(72|1)) as Unit), (([((-48), "5a{`uju>m$f", Int16(44), (UInt64(121), 12.0, """
gKAb/
cka{y)
""", "r-T9<k 1>)", "0 j2vzKDi=", (-51), UInt32(85)), r'I', UInt32(53)), ((-46), ###"<3Lw]Fj=],"###, Int16(-74), (UInt64(221), 52.0, """
B2G:5
p -i=
""", """
x_cYA
IUmUy
""", """
vbl71
G_B]U
""", 123, UInt32(99)), r'G', UInt32(16)), (104, "7GKRcev$zk", Int16(90), (UInt64(84), (-101.0), """
I$#lB
m1,m,
""", "UG`I}Z#aYV", ###"6*qoD$K^;a{"###, (-49), UInt32(142)), r'l', UInt32(134)), ((-5), ###"X^z<ryC=VO"###, Int16(91), (UInt64(34), (-29.0), """
Kwk:&
u-Mqk
""", ###"JC@w>:KInH"###, """
 3-OA
lm0gY
""", 62, UInt32(23)), r'H', UInt32(154)), ((-10), "/unf 3]Q.)", Int16(52), (UInt64(205), (-51.0), ###"=kYzO2W*=x"###, """
s<j C
[;Ux?
""", """
6l1HR
#wKg5
""", (-90), UInt32(30)), r'a', UInt32(115)), (36, "oZjMc8rN6[", Int16(-15), (UInt64(89), 122.0, "_5&yjQp'E$", ###"0T/KDS#xQ1"###, "6]S `>3u:\"", 92, UInt32(155)), r'L', UInt32(5)), (102, "G`'cFa{L&0.", Int16(-126), (UInt64(2), (-68.0), """
+qO; 
a[}g(
""", ###"7=u074g]AE"###, """
wa?C>
(R.Qc
""", (-48), UInt32(65)), r'k', UInt32(8)), ((-39), """
:O=xs
9d_\"r
""", Int16(-128), (UInt64(141), 20.0, "W-@}MNZlmy", "DtQ%O}Qv7^", ###"_CkEgb2`H2"###, (-43), UInt32(106)), r'J', UInt32(30)), (78, "_f&'wk-&}Y", Int16(85), (UInt64(238), 17.0, "z/8x 7+/,n", ###"5W#~1r&:wt"###, """
D.qhr
.$&T 
""", 50, UInt32(201)), r't', UInt32(8)), ((-125), """
)C1K^
XM$C$
""", Int16(50), (UInt64(80), (-21.0), """
\"U;6d
/RKv:
""", ###"o)kSPT@2RG"###, "\\nn\"=iw@%j", (-120), UInt32(241)), r'E', UInt32(20))] as Unit) as Unit), (Int16(90) as Unit), ((Class_1663070663240_101() as Array<Float32>) as Unit), ([Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, (Option<Int64>.None as Unit), Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, (((UInt64(203)&127)..(UInt64(6)&127):(106|1)) as Unit), (() as Unit), (Option<Array<Float32>>.None as Unit)] as Unit), (Int16(122) as Unit), (Int8(UInt8(UInt8(245))) as Unit), (((Int32(UInt16(75))&127)..=(Int32(Int32(-83))&127):((110|1))) as Unit), Option<Unit>.None]
public var var_1663070663240_776 : Option<Option<Unit>> = ((72, ###"jpuJs4!8::"###, Int16(Int16(-44)), (UInt64(UInt16(21)), 45.0, ###" ]A>648a{q@"###, """
\"vjP,
y0K\\y
""", "pTTb1)0\"%b", Int64(UInt32(158)), UInt32(45)), r'R', UInt32(134)) as Option<Unit>)


public open class Class_1663070663240_101 {
    public init() { // block id: 103

    }
;
    public func func_1663070663240_237(param_1663070663240_238 : (Int64, String, Int16, (UInt64, Float64, String, String, String, Int64, UInt32), Rune, UInt32)) : Unit { // block id: 239
        var_1663070663240_13
    }
;
    public let var_1663070663240_483 : Bool = true;
    public let var_1663070663240_822 : Int64 = (-76)
}



public enum Enum_1663070663240_362 {
    defaultValue
}

func func_1663070663240_396(param_1663070663240_397 : Float32) : Range<UInt64> { // block id: 398
    var var_1663070663240_469 : Option<Bool> = Option<Bool>.None;
    let var_1663070663240_480 : Class_1663070663240_101 = Class_1663070663240_101();
    let var_1663070663240_496 : Int32 = Int32(UInt32(75));
    if ((match (Float32(64.0)) {
        case -7.0 => 
            if (false) { (var_1663070663240_72, var_1663070663240_156, var_1663070663240_207) } else { var_1663070663240_417 } ;
            var_1663070663240_13;
            var_1663070663240_469
        
        case _ => 
            var_1663070663240_207 <<= ((UInt8(34)) & 7);
            Option<Bool>.Some(false)
        
    } ?? var_1663070663240_480.var_1663070663240_483)) { ((UInt64(145)&127)..(UInt64(186)&127):((-54)|1)) } else { match (try { // block id: 488
            ();
            Int32(121)
        } finally { // block id: 491
            ();
            var_1663070663240_13;
            var_1663070663240_496 | var_1663070663240_496
        }) {
        case _ => 
            var_1663070663240_503
        
    } } 
}



public func func_1663070663240_515(namedParam_1663070663240_516 ! : Float64, namedParam_1663070663240_517 ! : Range<UInt8>) : Array<Float32> { // block id: 518
    var var_1663070663240_531 : Option<Int64> = (UInt8(UInt8(Int8(UInt8(105)))) as Int64);
    var var_1663070663240_582 : Array<Float32> = [Float32(-27.0), Float32(56.0), Float32(82.0), Float32(-116.0), Float32(125.0), Float32(-56.0), Float32(-89.0), Float32(-128.0), Float32(114.0), Float32(-114.0)];
    ((match (var_1663070663240_531) {
        case _ : Option<Int64> => 
            let var_1663070663240_543 : Option<Option<Array<Float32>>> = (((UInt8(138)&127)..(UInt8(UInt8(Int8(102)))&127):(((-112)|1))) as Option<Array<Float32>>);
            if (false) { var_1663070663240_543 } else { Option<Option<Array<Float32>>>.Some(Option<Array<Float32>>.None) } 
        
        case _ : String => 
            var_1663070663240_558 &&= var_1663070663240_558;
            var_1663070663240_245;
            Option<Option<Array<Float32>>>.None
        
        case _ => 
            Option<Option<Array<Float32>>>.Some(Option<Array<Float32>>.Some([Float32(75.0), Float32(124.0), Float32(-66.0), Float32(21.0), Float32(-32.0), Float32(-58.0), Float32(89.0), Float32(44.0), Float32(44.0), Float32(12.0)]))
        
    } ?? try { // block id: 570
        ###"'qqM%Rz.v]"###;
        Option<Array<Float32>>.None
    } finally { // block id: 573
        var_1663070663240_13;
        let var_1663070663240_579 : Option<Array<Float32>> = Option<Array<Float32>>.None;
        if (true) { Option<Array<Float32>>.None } else { var_1663070663240_579 } 
    }) ?? var_1663070663240_582)
}

func func_1663070663240_392(param_1663070663240_393 : Array<Option<Unit>>) : Array<Option<Unit>> { // block id: 394
    let var_1663070663240_506 : (Float32) -> Range<UInt64> = { lambdaParameter_1663070663240_509 : Float32 => ((UInt64(117)&127)..(UInt64(225)&127):(104|1)) };
    func_1663070663240_515(namedParam_1663070663240_516 : var_1663070663240_57, namedParam_1663070663240_517 : ((UInt8(245)&127)..(UInt8(168)&127):(35|1)))[5]|>var_1663070663240_506;
    func func_1663070663240_588(param_1663070663240_589 : Option<Option<Unit>>) : Array<Option<Unit>> { // block id: 590
        var_1663070663240_592
    }
;
    func_1663070663240_588(var_1663070663240_776)
}

main(): Int64 {
    try {
        (Option<Unit>.None ?? var_1663070663240_13);
        var var_1663070663240_25 : ?Unit = Option<Unit>.None;
        var var_1663070663240_44 : Option<Option<Unit>> = Option<Option<Unit>>.None;
        let var_1663070663240_116 : ?String = ((Int16(UInt8(234)) as String) as String);
        func func_1663070663240_105(param_1663070663240_106 : String, param_1663070663240_107 : Int64, namedParam_1663070663240_108 ! : UInt32) : Class_1663070663240_101 { // block id: 109
            var var_1663070663240_124 : (Int64, String, Int16, (UInt64, Float64, String, String, String, Int64, UInt32), Rune, UInt32) = (Int64(Int16(UInt16(Int16(71)))), """
%%*pK
Y%sG;
""", Int16(Int16(UInt16(206))), (UInt64(147), (-72.0), """
K`c|!
K#z$d
""", ###"m_by3|.)c="###, "Ahd9cp2F<]", Int64(Int32(UInt16(90))), UInt32(121)), r'O', UInt32(210));
            (var_1663070663240_116 ?? var_1663070663240_124[1]);
            (namedParam_1663070663240_108, var_1663070663240_156, var_1663070663240_207)[1][2][1]
        }
;
        let var_1663070663240_233 : Array<UInt32> = [UInt32(187), UInt32(35), UInt32(141), UInt32(127), UInt32(194), UInt32(93), UInt32(196), UInt32(198), UInt32(166), UInt32(229)];
        let var_1663070663240_381 : Option<Option<Unit>> = Option<Option<Unit>>.Some(("""
Hl|.Q
_4/a~
""" as Unit));
        let var_1663070663240_796 : (Array<Option<Unit>>) -> Array<Option<Unit>> = func_1663070663240_392;
        func func_1663070663240_47(param_1663070663240_48 : Option<Unit>) : Option<Unit> { // block id: 49
            let var_1663070663240_61 : String = "@UH&D+O:vP";
            try { // block id: 53
                (UInt64(139), var_1663070663240_57, var_1663070663240_61, var_1663070663240_61, "B^T1@jztFT", var_1663070663240_66, var_1663070663240_72)
            } catch (e: Exception) { // block id: 74
                Int8(116);
                ();
                let var_1663070663240_78 : (UInt64, Float64, String, String, String, Int64, UInt32) = (UInt64(Int16(-57)), Float64(Float64(Float32(21.0))), "86C0QsO8qG", ###"T<Lx3ogaJa"###, "g:JYx#bCE6", (-94), UInt32(20));
                var_1663070663240_78
            } finally { // block id: 90
                (UInt64(150), (-68.0), ###"!+mzHR=;#="###, var_1663070663240_61, var_1663070663240_61, (-4), UInt32(92))
            }[2];
            let var_1663070663240_272 : String = """
X*X(&
3uVZ${var_1663070663240_61}<
""";
            let var_1663070663240_286 : UInt64 = UInt64(196);
            var var_1663070663240_295 : Rune = r'K';
            let var_1663070663240_342 : Int16 = Int16(Int8(UInt8(122)));
            func_1663070663240_105(var_1663070663240_61, (var_1663070663240_219 ?? (-75)), namedParam_1663070663240_108 : var_1663070663240_233[4]).func_1663070663240_237([var_1663070663240_245, ((-85), var_1663070663240_61, Int16(72), (UInt64(175), (-96.0), var_1663070663240_272, ###"oe${var_1663070663240_272}f-h[)5JK"###, ###":a{A${var_1663070663240_272}qKm4${var_1663070663240_61}^_;"###, var_1663070663240_66, UInt32(216)), r'z', UInt32(152)), ((-11), var_1663070663240_272, Int16(-25), (var_1663070663240_286, var_1663070663240_57, "tFt}${var_1663070663240_61}Vy`l${var_1663070663240_272}ZE", "4mdwW${var_1663070663240_272}G${var_1663070663240_61}#ra{${var_1663070663240_61}%", var_1663070663240_272, 114, UInt32(215)), var_1663070663240_295, UInt32(127)), var_1663070663240_245, var_1663070663240_300, ((-65), "V${var_1663070663240_61}56%N\"(&S8", Int16(-19), (UInt64(211), var_1663070663240_57, """
\\V,s>
fWxE0${var_1663070663240_272}
""", """
'${var_1663070663240_272}\"${var_1663070663240_61}uP${var_1663070663240_272}X
|Na}J${var_1663070663240_272}
""", var_1663070663240_272, (-33), UInt32(12)), var_1663070663240_295, var_1663070663240_72), (93, """
La{${var_1663070663240_61}c}e
GJ@]\\
""", var_1663070663240_342, (UInt64(115), 15.0, var_1663070663240_61, "cUxCQb?t,`", var_1663070663240_272, var_1663070663240_66, var_1663070663240_72), r'5', var_1663070663240_72), var_1663070663240_245, var_1663070663240_245, var_1663070663240_245][7]);
            (match (var_1663070663240_365) {
                case defaultValue => 
                    Option<Option<Unit>>.Some(param_1663070663240_48)
                
                case defaultValue => 
                    Option<Option<Unit>>.None
                
                case caseVar_1663070663240_378 : (Int64, String, Int16, (UInt64, Float64, String, String, String, Int64, UInt32), Rune, UInt32) => 
                    var_1663070663240_381
                
                case _ => 
                    ();
                    var_1663070663240_381
                
            } ?? ([Option<Unit>.None, param_1663070663240_48, Option<Unit>.None, Option<Unit>.None, param_1663070663240_48, param_1663070663240_48, Option<Unit>.None, param_1663070663240_48, Option<Unit>.Some(()), Option<Unit>.Some(var_1663070663240_13)]|>var_1663070663240_796)[0])
        }
;
        (try { // block id: 21
            ();
            Option<Option<Unit>>.Some(var_1663070663240_25)
        } finally { // block id: 27
            var_1663070663240_30 <<= ((var_1663070663240_30) & 7);
            ();
            if (var_1663070663240_38) { Option<Option<Unit>>.Some(Option<Unit>.None) } else { var_1663070663240_44 } 
        } ?? func_1663070663240_47(Option<Unit>.Some(var_1663070663240_13)));
        let var_1663070663240_817 : String = "}2;K6 ZVhc";
        func_1663070663240_105(var_1663070663240_817, 39, namedParam_1663070663240_108 : var_1663070663240_72).var_1663070663240_822
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var_1663070663240_30*var_1663070663240_30), 64)
        crccheck.updateBuffer(UInt64(var_1663070663240_72*var_1663070663240_72), 64)
        crccheck.updateBuffer(UInt64(var_1663070663240_207*var_1663070663240_207), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Enum_1663070663240_362 {

}

