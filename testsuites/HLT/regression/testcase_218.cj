/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output 


public var var_1669128320169_35 : Array<Bool> = [(((Int32(-1)&127)..(Int32(-53)&127):((-116)|1)) is Range<Int8>), true, true, (((Int32(61)&127)..=(Int32(87)&127):((-27)|1)) is String), true, ([true, false, false, true, false, true, false, false, false, true] is Range<UInt8>), (((UInt64(33)&127)..(UInt64(215)&127):(114|1)) is Float64), (() is Int16), false, (UInt16(UInt16(UInt16(192))) is Range<UInt8>)]
public var var_1669128320169_59 : Int16 = Int16(Int8(-43))
public let var_1669128320169_67 : Bool = (Int32(72) is Range<Int16>)
public var var_1669128320169_86 : Int8 = Int8(101)
public let var_1669128320169_143 : Range<Int8> = ((Int8(-117)&127)..=(Int8(-112)&127):((-94)|1))
public let var_1669128320169_206 : UInt32 = UInt32(Int8(-58))
public let var_1669128320169_227 : Range<UInt64> = ((UInt64(Int64(UInt64(UInt16(211))))&127)..(UInt64(Int16(Int16(UInt16(234))))&127):(((-80)|1)))
public let var_1669128320169_247 : Int64 = (-36)
public var var_1669128320169_269 : Enum_1669128320169_7 = Enum_1669128320169_7.defaultValue
public var var_1669128320169_337 : Unit = ()
public let var_1669128320169_354 : Float64 = 33.0
public var var_1669128320169_358 : Rune = 'N'
public var var_1669128320169_372 : ?Enum_1669128320169_320 = (Int64(Int8(-9)) as Enum_1669128320169_320)
public let var_1669128320169_460 : Float32 = Float32(Float32(-4.0))
public enum Enum_1669128320169_7 {
    defaultValue
}
public open class Class_1669128320169_92<T0, T1> {
    init() { // block id: 94

    }
;
    public init(namedParam_1669128320169_99 ! : Array<Bool>, namedParam_1669128320169_100 ! : Int16, optionalParam_1669128320169_101 ! : Range<UInt64> = ((UInt64(94)&127)..(UInt64(UInt16(Int8(105)))&127):((Int64(Int16(UInt8(63)))|1)))) { // block id: 110
        var var_1669128320169_122 : UInt64 = UInt64(Int8(27));
        var var_1669128320169_128 : UInt64 = UInt64(175);
        var var_1669128320169_146 : Range<Int32> = ((Int32(Int8(-84))&127)..=(Int32(16)&127):((Int64(Int8(UInt8(155)))|1)));
        let var_1669128320169_155 : (Range<Int16>, UInt64, UInt32, Array<UInt64>, Range<UInt64>, Range<UInt64>, Int16, Range<Int8>, Range<Int32>) = (((Int16(-110)&127)..(Int16(30)&127):(36|1)), UInt64(99), UInt32(53), [UInt64(UInt8(Int8(78))), UInt64(Int16(Int16(-74))), UInt64(89), UInt64(UInt64(11)), UInt64(UInt8(UInt8(192))), UInt64(98), UInt64(UInt8(Int8(50))), UInt64(0), UInt64(33), UInt64(8)], ((UInt64(221)&127)..(UInt64(UInt32(50))&127):((Int64(UInt8(Int8(-60)))|1))), ((UInt64(45)&127)..(UInt64(146)&127):((-53)|1)), Int16(UInt8(103)), ((Int8(52)&127)..=(Int8(-104)&127):((-19)|1)), ((Int32(Int32(UInt8(106)))&127)..(Int32(UInt8(13))&127):((Int64(Int16(UInt8(3)))|1))));
        let var_1669128320169_210 : Array<UInt64> = [UInt64(Int32(41)), UInt64(217), UInt64(167), UInt64(196), UInt64(142), UInt64(76), UInt64(Int64(UInt64(106))), UInt64(0), UInt64(Int8(40)), UInt64(96)];
        try { // block id: 114
            ();
            Int8(49);
            if (var_1669128320169_67) { (((Int16(36)&127)..=(Int16(-76)&127):(113|1)), var_1669128320169_122, UInt32(207), [var_1669128320169_128, UInt64(111), var_1669128320169_128, UInt64(176), var_1669128320169_128, UInt64(98), var_1669128320169_128, UInt64(186), UInt64(94), UInt64(39)], ((UInt64(155)&127)..=(UInt64(50)&127):(124|1)), ((UInt64(170)&127)..=(UInt64(154)&127):(53|1)), var_1669128320169_59, var_1669128320169_143, var_1669128320169_146) } else { var_1669128320169_155 } 
        } catch (_) { // block id: 201
            (((Int16(57)&127)..(Int16(105)&127):((-75)|1)), UInt64(250), var_1669128320169_206, var_1669128320169_210, var_1669128320169_227, ((UInt64(114)&127)..(UInt64(50)&127):((51|1))), var_1669128320169_59, ((Int8(-79)&127)..=(var_1669128320169_86&127):((var_1669128320169_247|1))), var_1669128320169_146)
        }[4]
    }
;
    public mut prop var_1669128320169_256 : String { // block id: 257
        get() { // block id: 259
            ();
            """
:=tM<
} HDO
""";
            var_1669128320169_469
        }

        set(Value) { // block id: 264
            ();
            ();
            var_1669128320169_469 = Value
        }

    };
    public let var_1669128320169_316 : Bool = false;
    var var_1669128320169_469 : String = "QQ*6${var_1669128320169_256}%N^${var_1669128320169_256}A${var_1669128320169_256}|a"
}

public enum Enum_1669128320169_320 {
    defaultValue
}

func func_1669128320169_18<T0>(param_1669128320169_19 : Rune) : Bool { // block id: 20
    let var_1669128320169_74 : Range<Int64> = ((99&127)..=((-67)&127):((-125)|1));
    var var_1669128320169_96 : Class_1669128320169_92<Bool, Range<Int16>> = Class_1669128320169_92<Bool, Range<Int16>>(namedParam_1669128320169_99 : [true, true, false, false, true, true, true, true, false, false], namedParam_1669128320169_100 : Int16(Int16(-36)), optionalParam_1669128320169_101 : ((UInt64(186)&127)..=(UInt64(168)&127):(60|1)));
    var var_1669128320169_279 : UInt64 = UInt64(92);
    if (if (var_1669128320169_35[6]) { // block id: 56
        var_1669128320169_59 %= ((Int16(24)) | 1);
        var var_1669128320169_64 : Unit = ();
        var_1669128320169_64;
        var_1669128320169_67
    } else if ((true is Range<UInt64>)) { // block id: 72
        var_1669128320169_74;
        var var_1669128320169_78 : UInt64 = UInt64(Int32(16));
        var_1669128320169_78 *= var_1669128320169_78;
        true
    } else { // block id: 83
        var_1669128320169_86 = var_1669128320169_86;
        var_1669128320169_67
    }) { // block id: 90
        var_1669128320169_96.var_1669128320169_256
    } else if (match (var_1669128320169_269) {
        case defaultValue => 
            let var_1669128320169_275 : Unit = ();
            var_1669128320169_275;
            var_1669128320169_279 |= UInt64(215);
            var_1669128320169_67
        
        case _ => 
            var_1669128320169_67
        
    }) { // block id: 286
        var var_1669128320169_288 : Unit = ();
        var_1669128320169_288;
        if (true) { // block id: 292
            var_1669128320169_59 + Int16(84);
            if (true) { ((UInt64(138)&127)..=(UInt64(98)&127):((var_1669128320169_247|1))) } else { ((UInt64(144)&127)..(UInt64(1)&127):(14|1)) } ;
            if (true) { "ID9eL#r9L*" } else { """
X,Ob9
)fa{dY
""" } 
        } else { // block id: 307
            if (true) { "]^0Ws(MqWy" } else { """
q(89j
x!uAF
""" } 
        }
    } else { // block id: 312
        var_1669128320169_96.var_1669128320169_316;
        "_hd+w3qa{|w"
    };
    match ((Option<Enum_1669128320169_320>.Some(Enum_1669128320169_320.defaultValue) ?? try { // block id: 330
        ((UInt64(143)&127)..=(UInt64(129)&127):((-28)|1));
        ();
        Enum_1669128320169_320.defaultValue
    } finally { // block id: 334
        UInt16(177);
        var_1669128320169_337;
        if (false) { Enum_1669128320169_320.defaultValue } else { Enum_1669128320169_320.defaultValue } 
    })) {
        case _ => 
            var_1669128320169_227;
            let var_1669128320169_348 : Float64 = Float64(Float64(Float64(23.0)));
            var_1669128320169_348 > var_1669128320169_354
        
    }
}

public func func_1669128320169_10<T0, T1>(param_1669128320169_11 : Int32) : Enum_1669128320169_7 { // block id: 12
    ();
    let var_1669128320169_384 : Float32 = Float32(-25.0);
    if (true) { (if ((var_1669128320169_358|>func_1669128320169_18<Int64>)) { (if (true) { var_1669128320169_269 } else { var_1669128320169_269 } ) } else { Enum_1669128320169_7.defaultValue } ) } else { (if (func_1669128320169_18<Int64>('a')) { Enum_1669128320169_7.defaultValue } else { try { // block id: 370
        var_1669128320169_372;
        ();
        if (var_1669128320169_67) { var_1669128320169_269 } else { Enum_1669128320169_7.defaultValue } 
    } finally { // block id: 381
        var_1669128320169_337;
        var_1669128320169_384;
        var_1669128320169_269
    } } ) } 
}

main(): Int64 {
    try {
        var var_1669128320169_388 : (Int32) -> Enum_1669128320169_7 = { lambdaParameter_1669128320169_391 : Int32 => Enum_1669128320169_7.defaultValue };
        let var_1669128320169_400 : (Range<Int16>, UInt64, UInt32, Array<UInt64>, Range<UInt64>, Range<UInt64>, Int16, Range<Int8>, Range<Int32>) = (((Int16(80)&127)..(Int16(49)&127):((Int64(UInt32(UInt32(29)))|1))), UInt64(127), UInt32(UInt16(Int16(-85))), [UInt64(133), UInt64(UInt32(162)), UInt64(74), UInt64(UInt64(Int32(125))), UInt64(155), UInt64(Int64(UInt8(210))), UInt64(Int8(Int8(28))), UInt64(UInt8(125)), UInt64(UInt8(UInt8(247))), UInt64(UInt16(152))], ((UInt64(121)&127)..(UInt64(122)&127):((Int64(Int8(24))|1))), ((UInt64(86)&127)..(UInt64(98)&127):(((-98)|1))), Int16(41), ((Int8(58)&127)..=(Int8(105)&127):((-70)|1)), ((Int32(Int8(UInt8(213)))&127)..(Int32(-126)&127):((Int64(Int8(Int8(-92)))|1))));
        match ((Int32(6)|>var_1669128320169_388)) {
            case caseVar_1669128320169_397 => 
                var_1669128320169_400;
                UInt16(40);
                var_1669128320169_337
            
            case _ => 
                Float32(-70.0) - var_1669128320169_460;
                ()
            
        };
        [100, (-82), (-91), 17, 2, (-102), 88, (-58), 95, (-96)][3]
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var_1669128320169_206*var_1669128320169_206), 64)
        crccheck.updateBuffer(UInt64(var_1669128320169_247*var_1669128320169_247), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Enum_1669128320169_7 {

}
// ASSERT: scan sema_illegal_usage_of_member
// ASSERT: scan sema_unreachable_pattern


