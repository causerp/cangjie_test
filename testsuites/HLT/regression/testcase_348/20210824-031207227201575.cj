/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC-PIPE-1: %compiler %cmp_opt %f 2>&1 | compare %f



// random seed:1629774727795

// All global variable need to be defined before use!
public let var20 : Float64 = Float64(Int32(-77))
public var var39 : Int16 = Int16(UInt32(69))
public var var45 : Bool = false
public let var121 : Unit = ()
public var var141 : Option<Unit> = Option<Unit>.Some(var121)
public var var225 : Class24 = Class24()
public var var265 : Bool = ("cd/{xf1?!4" is UInt64)
public let var295 : Float32 = Float32(-58.0)
public let var301 : Option<Float64> = Option<Float64>.None
public let var346 : Bool = ("{\\k*D%e7b " is Range<UInt32>)
 let var373 : Range<Int8> = (Int8(2)..Int8(Float32(Int32((-70)))):(Int64(Int64(113.0))|1))
public let var384 : UInt8 = UInt8(Int32(76))
public var var413 : UInt64 = UInt64(Int8(Int16(-29)))
 let var420 : Option<Bool> = ((UInt64(122)..UInt64(154):42|1) as Bool)
public let var447 : Unit = ()
public let var450 : UInt32 = UInt32(Int8(Float32(-91.0)))
public var var521 : Interface482<String, List<Bool>, Float64> = Class481()
public var var578 : List<Float32> = [Float32(94.0), Float32(-23.0), Float32(87.0), Float32(99.0), Float32(-120.0)]
public var var618 : UInt16 = UInt16(72)
public let var652 : Int64 = Int64(22)
public let var688 : Unit = ()
public var var734 : List<(Bool*UInt64)> = [(true, UInt64(171)), (false, UInt64(159)), ((() is (Range<UInt32>*UInt16)), UInt64(Float32(UInt64(188)))), (((false, UInt64(182)) is Range<Int64>), UInt64(UInt16(Int16(1)))), ((76 is (List<Float32>*Unit*Bool*(Range<UInt32>*UInt16))), UInt64(37))]
public var var764 : Interface483 = Class481()
public let var811 : Int16 = Int16(-2)
public var var832 : Option<Int16> = Option<Int16>.None
public var var848 : List<Bool> = [false, false, false, ('7' is Option<Int16>), true]
public let var940 : List<Unit> = [(), (), (), (), ()]
public var var959 : (Float64*Int8) = ((-17.0), Int8(33))
public var var974 : Rune = '5'
public var var993 : Interface25<Range<Int32>, Range<Int64>, List<Bool>> = Class24()
public let var1029 : String = "@(&mBX209o"
public let var1092 : (Float64*Bool*Range<Int8>*UInt8) = (25.0, false, (Int8(Int8(Float32(53.0)))..Int8((-22.0)):((-115)|1)), UInt8(156))
 let var1110 : (List<Float32>*Unit*Bool*(Range<UInt32>*UInt16)) = ([Float32(Int32(43)), Float32(55.0), Float32(43.0), Float32(UInt64(163)), Float32(Int32(Float32(-21.0)))], (), true, ((UInt32(146)..=UInt32(55):(-85)|1), UInt16(216)))
public let var1147 : Range<Int32> = (Int32(Float32(UInt32(UInt64(14))))..Int32(Float64(UInt8(51))):(50|1))
public let var1237 : Option<Int16> = Option<Int16>.None
public let var1272 : (Bool*UInt64) = (false, UInt64(Int32(-110)))
main(): Int64 {
    func func9<T0, T1, T2>(param10 : UInt16, param11 : Int8, namedParam12 ! : Unit) : Bool { // block id: 13
        let var359 : (Float64*Int8) = (65.0, Int8(UInt32(232)));
        (Class24.func30(param11) ?? if (if (var346) { // block id: 349
            var225;
            ((-56)..=(-22):(-114)|1);
            false
        } else { // block id: 353
            true
        }) { var20 } else { var359[0] } );
        var var1035 : UInt16 = UInt16(205);
        match {
            case match {
                case (var20, false, var373, var384)[1] => 
                Enum316.defaultValue;
                namedParam12;
                var265
                case _ => 
                var45
            } => 
            try { // block id: 396
                ();
                namedParam12;
                var384
            } catch (_) { // block id: 400
                namedParam12;
                ();
                var384
            } finally { // block id: 404
                UInt8(61)
            };
            param10
            case if ((var265, var413)[0]) { (var420 ?? var45) } else { func425(var1035) }  => 
            var var1040 : Class481 = Class481();
            var1040.var1043;
            try { // block id: 1047
                (Int8(-95)..Int8(11):(-121)|1)
            } catch (_) { // block id: 1049
                (Int8(33)..Int8(-29):33|1)
            } finally { // block id: 1051
                Option<Float64>.Some(var20);
                var373
            };
            var1035
            case _ => 
            let var1060 : Range<UInt64> = (UInt64(150)..=UInt64(250):(-60)|1);
            if (true) { (UInt64(1)..UInt64(248):23|1) } else { var1060 } ;
            try { // block id: 1063
                var20;
                ();
                UInt16(2)
            } finally { // block id: 1067
                [Float32(-17.0), Float32(110.0), Float32(-79.0), Float32(62.0), Float32(22.0)];
                var1035
            }
        };
        var var1072 : (Float64*Bool*Range<Int8>*UInt8) = (Float64(UInt8(142)), true, (Int8(90)..=Int8(UInt8(92)):(38|1)), UInt8(25));
        match (var1072) {
            case _ => 
                Option<Unit>.None;
                var265
            
        }
    }
;
    match {
        case func9<UInt8, List<List<Float32>>, List<Option<Unit>>>(var618, Int8(50), namedParam12 : ()) => 
        var1092;
        Int16(-102)
        case false => 
        Int16(105)
        case _ => 
        var1110;
        var39
    };
    var var1133 : Aggregate1129<Range<UInt8>, Float32, Unit> = Aggregate1129<Range<UInt8>, Float32, Unit>();
    var1133.func1136();
    let var1354 : Option<Int16> = Option<Int16>.Some(var811);
    let var1379 : Unit = ();
    match (if (var346) { // block id: 1344
            [false, true, false, false, false]
        } else if (true) { // block id: 1347
            var688;
            var447;
            var848
        } else { // block id: 1351
            ();
            var1354;
            var var1359 : Bool = (Int8(Int64(UInt16(3))) is (List<Float32>*Unit*Bool*(Range<UInt32>*UInt16)));
            [var1359, var1359, true, false, var346]
        }) {
        case caseVar1370 => 
            [Option<Unit>.None, var141, var141, var141, Option<Unit>.None];
            var1379;
            var652
        
        case _ => 
            var652
        
    }
    // CRC Check All Variables
    var crccheck = CrcCheck(5000, 32)
    crccheck.updateBuffer(UInt64(var413), 64)
    crccheck.crcCheck()
    crccheck.getCrcOutput()

    return 0;
}

class CrcCheck {
    public var buffer: Array<Int64>
    public var poly: Array<Int64>
    public var crc_output: Array<Int64>
    public var poly_n: Int64
    public var buffer_index: Int64
    public var crc_output_n: Int64

    public init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64> (crc_output_n, 0)
        buffer = Array<Int64> (buffer_n, 0)
        poly_n = crc_n + 1
        poly = Array<Int64> (poly_n, 0)
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    public func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64> (byte_n, 0)
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    public func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64> (crc_output_n, 0)
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64> (crc_output_n, 0)
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    public func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
    }
}

public open class Class24 <: Interface25<Range<Int32>, Range<Int64>, List<Bool>> {
    public init() { // block id: 27

    }
;
    public static var var178 : List<Float32> = [Float32(117.0), Float32(125.0), Float32(-75.0), Float32(8.0), Float32(-58.0)];
    protected var var252 : (Int8*Range<Int64>*Unit) = (Int8(61), (22..=36:27|1), ());
    public static var var276 : Option<Bool> = (((UInt32((-92.0))..UInt32((-48)):((-2)|1)), UInt16(UInt64(UInt64(93)))) as Bool);
    public static func func30(param31 : Int8) : Option<Float64> { as// block id: 32
        let var60 : List<Option<Int16>> = [((UInt16(43)..UInt16(103):(-92)|1) as Int16), Option<Int16>.Some(var39), Option<Int16>.Some(var39), (100 as Int16), Option<Int16>.Some(var39)];
        var var80 : Option<Int16> = (Int64(UInt8(102)) as Int16);
        (if ((if (var45) { var45 } else { var45 } )) { var60[2] } else { if (var45) { // block id: 72
            ();
            Option<Int16>.None
        } else if (true) { // block id: 76
            Option<Int16>.None
        } else { // block id: 78
            var80
        } }  ?? if (if (false) { // block id: 87
            ();
            Class24();
            true
        } else if (false) { // block id: 92
            let var94 : Unit = ();
            var94;
            var94;
            false
        } else { // block id: 98
            true
        }) { try { // block id: 101
            Int16(71)
        } finally { // block id: 103
            let var105 : Int32 = Int32(-30);
            var105;
            Int16(-71)
        } } else { Int16(50) } );
        let var129 : Unit = ();
        let var149 : List<Option<Unit>> = [Option<Unit>.None, ((Int64(UInt32(87))..Int64(Int16(78)):(60|1)) as Unit), Option<Unit>.None, Option<Unit>.Some(var121), Option<Unit>.Some(var121)];
        try { // block id: 111
            func func113() : Option<Float64> { // block id: 114
                let var132 : Rune = 'm';
                if (var45) { // block id: 127
                    var129;
                    var132;
                    var var137 : Option<Unit> = (Class24() as Unit);
                    [Option<Unit>.Some(var121), var137, var141, var137, var137]
                } else { // block id: 145
                    var121;
                    ();
                    var149
                }[2].getOrThrow();
                func168("=D)K77f`Et").var252[2];
                if ((match (var149) {
                    case caseVar272 : Option<Int16> => 
                        (-15.0);
                        var276
                    
                    case caseVar290 => 
                        [Float32(-70.0), var295, var295, var295, var295];
                        var301;
                        Option<Bool>.None
                    
                    case _ => 
                        ();
                        var276
                    
                } ?? var45)) { // block id: 309
                    var loopTimeVar314 : Int64 = 0;
                    do {
                        loopTimeVar314++;

                    } while (var45 && loopTimeVar314 < 100 ) ;
                    match (Enum316.defaultValue) {
                        case defaultValue => 
                            Option<Float64>.Some(var20)
                        
                        case _ : UInt8 => 
                            var301
                        
                        case caseVar329 => 
                            var301
                        
                        case _ => 
                            Option<Bool>.Some(var265);
                            Option<Float64>.Some(var20)
                        
                    }
                } else { // block id: 337
                    (Int8(50) as Float64)
                }
            }
;
            func113()
        } catch (_) { // block id: 340
            Option<Float64>.None
        }
    }
;
    private static func func471() : Unit { // block id: 472
        func476(namedParam477 : match (var959) {
            case _ : String => 
                UInt8(106);
                ();
                'o'
            
            case (-35.0 | -38.0 | var20,95 | -90 | -103) => 
                var974
            
            case caseVar978 : Interface483 => 
                Option<List<Unit>>.Some(var940);
                var121;
                'B'
            
            case _ => 
                var974
            
        }, namedParam478 : var384)[3]
    }
;
    public static func func432(param433 : String, param434 : Option<Float64>, param435 : Class24, param436 : Unit) : (Float64*Bool*Range<Int8>*UInt8) { // block id: 437
        var var460 : UInt16 = UInt16(238);
        if (((UInt16(240)..UInt16(253):(-103)|1) is Option<Unit>)) { // block id: 441
            if (false) { // block id: 444
                var121;
                var447;
                var450
            } else if (true) { // block id: 455
                var420;
                UInt32(28)
            } else { // block id: 458
                var460;
                [var141, Option<Unit>.Some(var121), Option<Unit>.None, var141, Option<Unit>.Some(var121)];
                var450
            };
            func471()
        };
        var688;
        (var20, var993.func996(Class24()), if ((var993.func996(Class24()))) { (Int8(18)..=Int8(-36):63|1) } else { (Int8(97)..=Int8(123):(-77)|1) } , ((var295 as UInt8) ?? if (false) { // block id: 1018
            var447;
            var384
        } else if (false) { // block id: 1022
            UInt8(116)
        } else { // block id: 1024
            var121;
            var959;
            UInt8(249)
        }))
    }

}

public interface Interface25<T0, T1, T2> where T0 <: Range<Int32>, T1 <: Range<Int64>, T2 <: List<Bool> {
    func func996(param997 : Interface25<Range<Int32>, Range<Int64>, List<Bool>>) : Bool { // block id: 998
        false
    }
;
    static func func30(param31 : Int8) : Option<Float64> 

}



public func func168(param169 : String) : Class24 { // block id: 170
    if (true) { (Class24.var178) } else { [[Float32(11.0), Float32(117.0), Float32(97.0), Float32(-41.0), Float32(-72.0)], [Float32(-61.0), Float32(-46.0), Float32(8.0), Float32(109.0), Float32(32.0)], [Float32(77.0), Float32(-49.0), Float32(-1.0), Float32(77.0), Float32(43.0)], [Float32(23.0), Float32(110.0), Float32(-113.0), Float32(0.0), Float32(-126.0)], [Float32(-63.0), Float32(-39.0), Float32(-19.0), Float32(44.0), Float32(-21.0)]][4] } [2];
    let var195 : UInt16 = UInt16(175);
    try { // block id: 188
        let var190 : Float32 = Float32(-114.0);
        var190;
        ((UInt32(14)..UInt32(14):35|1), var195)
    } catch (_) { // block id: 197
        ();
        let var200 : (Range<UInt32>*UInt16) = ((UInt32(185)..UInt32(42):(Int64(Int16(19))|1)), UInt16(Float32(UInt8(156))));
        var200
    }[0];
    var var232 : (List<Float32>*Unit*Bool*(Range<UInt32>*UInt16)) = ([Float32(116.0), Float32(64.0), Float32(-81.0), Float32(99.0), Float32(-73.0)], (), true, ((UInt32(Int16(28))..=UInt32(Int16(27)):(126|1)), UInt16(115)));
    if (try { // block id: 213
        ();
        Option<Unit>.None;
        false
    } finally { // block id: 217
        ();
        [[Float32(126.0), Float32(-107.0), Float32(-104.0), Float32(48.0), Float32(70.0)], [Float32(22.0), Float32(-37.0), Float32(0.0), Float32(44.0), Float32(72.0)], [Float32(-112.0), Float32(32.0), Float32(109.0), Float32(-9.0), Float32(-54.0)], [Float32(-63.0), Float32(15.0), Float32(-82.0), Float32(-82.0), Float32(-41.0)], [Float32(93.0), Float32(116.0), Float32(74.0), Float32(66.0), Float32(23.0)]];
        var45
    }) { // block id: 221
        if (true) { var225 } else { Class24() } 
    } else { // block id: 228
        var232[1];
        if (var45) { var225 } else { Class24() } 
    }
}


public enum Enum316 {
    defaultValue
}
public func func425(param426 : UInt16) : Bool { // block id: 427
    (Class24.func432(var1029, var301, Class24(), ()) is Enum316)
}

public func func476(namedParam477 ! : Rune, namedParam478 ! : UInt8) : List<Unit> { // block id: 479
    Class481.func488<List<(Bool*UInt64)>>(optionalParam489 : Float32(1.0), namedParam496 : var764.func767());
    var var868 : Bool = ((Int8(-9), (108..=34:57|1), ()) is List<Option<Unit>>);
    var loopTimeVar877 : Int64 = 0;
    (if (var848[0]) { // block id: 857
        var450;
        var var860 : Option<Unit> = Option<Unit>.None;
        var860
    } else { // block id: 862
        Option<Unit>.Some(var688)
    } ?? while (if (var265) { var868 } else { var265 }  && loopTimeVar877 < 100 ) {
        loopTimeVar877++;

    });
    let var923 : List<Unit> = [(), (), (), (), ()];
    if (match {
        case match (namedParam478) {
            case caseVar884 => 
                false
            
            case 142 | 147 | 205 | 38 => 
                var265
            
            case caseVar893 : (Bool*UInt64) => 
                Class481();
                var121;
                false
            
            case caseVar900 : Interface483 => 
                true
            
            case _ => 
                var var906 : Unit = ();
                var906;
                var868
            
        } => 
        false
        case (var652 is Interface482<String, List<Bool>, Float64>) => 
        'J';
        var688;
        false
        case _ => 
        false
    }) { (if ((Option<Unit>.Some(var688) is Range<UInt16>)) { var923 } else { (if (true) { var923 } else { var923 } ) } ) } else { (if (var265) { // block id: 949
        Option<List<Unit>>.None
    } else { // block id: 951
        Option<List<Unit>>.None
    } ?? if (true) { [(), (), (), (), ()] } else { var923 } ) } 
}

public open class Class481 <: Interface482<String, List<Bool>, Float64> & Interface483 {
    public init() { // block id: 485

    }
;
    public static let var518 : Range<Int8> = (Int8(-79)..Int8(-19):(-29)|1);
    public static var var583 : (Range<UInt32>*UInt16) = ((UInt32(235)..UInt32(166):(-81)|1), UInt16(Float32(Float32(86.0))));
    public static var var599 : Bool = ([Float32(UInt8(36)), Float32(-128.0), Float32(73), Float32(UInt16(Int32(-75))), Float32(118.0)] is (Range<UInt32>*UInt16));
    public var var1043 : Int8 = Int8(UInt8(102))
}

public interface Interface482<T0, T1, T2> {

}

public interface Interface483 {
    func func767() : Int16 { // block id: 768
        let var799 : UInt64 = UInt64(UInt32(UInt64(157)));
        (match (UInt16(75)) {
            case _ => 
                45.0;
                true
            
        }, try { // block id: 779
            UInt64(138);
            [UInt64(139), UInt64(171), UInt64(40), UInt64(124), UInt64(170)]
        } catch (e: Exception) { // block id: 782
            ();
            [UInt64(62), UInt64(12), UInt64(210), UInt64(144), UInt64(0)]
        } finally { // block id: 790
            let var793 : UInt64 = UInt64(25);
            [var793, UInt64(254), var793, UInt64(150), var799]
        }[4]);
        ();
        (if (([UInt64(169), UInt64(113), UInt64(34), UInt64(249), UInt64(169)] is List<(Bool*UInt64)>)) { // block id: 816
            var121;
            Option<Int16>.None
        } else { // block id: 819
            ();
            Option<Int16>.None
        } ?? (if (var265) { Option<Int16>.Some(var811) } else { var832 }  ?? if (var265) { var811 } else { Int16(18) } ))
    }

}






public struct Aggregate1129<T0, T1, T2> {
    public init() { // block id: 1131

    }

}


extend Enum316 {

}

extend<T0, T1, T2> Aggregate1129<T0, T1, T2> where T0 <: Range<UInt8>, T1 <: Float32, T2 <: Unit {
    public func func1136() : Unit { // block id: 1137
        let var1158 : Option<Range<Int32>> = Option<Range<Int32>>.Some(var1147);
        let var1190 : Range<UInt8> = (UInt8(143)..UInt8(25):(-14)|1);
        if (true) { // block id: 1140
            (var1158 ?? (Int32(-110)..Int32(-25):(-44)|1));
            try { // block id: 1170

            } catch (e: Exception) { // block id: 1171
                var121;
                Option<List<Unit>>.Some(var940);
                ()
            } finally { // block id: 1181

            }
        } else if (match (if (false) { (UInt8(115)..var384:((-64)|1)) } else { var1190 } ) {
            case caseVar1194 : Range<UInt64> => 
                (UInt16(176)..UInt16(65):((-50)|1));
                false
            
            case _ : Option<Int16> => 
                Aggregate1129<Range<UInt8>, Float32, Unit>();
                true
            
            case _ => 
                Option<Int16>.None;
                let var1210 : List<Option<Unit>> = [((Int8(UInt32(201))..=Int8(UInt8(10)):(Int64((-54.0))|1)) as Unit), ("OSMW,d///+" as Unit), Option<Unit>.None, Option<Unit>.Some(var121), Option<Unit>.Some(var121)];
                var1210;
                var45
            
        }) { // block id: 1226
            var loopTimeVar1231 : Int64 = 0;
            while (true && loopTimeVar1231 < 100 ) {
                loopTimeVar1231++;

            }
        };
        let var1241 : Int32 = Int32(-108);
        match (try { // block id: 1234
                var688;
                var1237
            } catch (_) { // block id: 1239
                var1241;
                Option<Int16>.Some(var811)
            } finally { // block id: 1244
                ();
                Option<Int16>.Some(var811)
            }) {
            case caseVar1250 : List<(Bool*UInt64)> => 
                var447;
                var521
            
            case caseVar1256 => 
                Class481()
            
            case _ => 
                ();
                var521
            
            case _ : (List<Float32>*Unit*Bool*(Range<UInt32>*UInt16)) => 
                [(var346, UInt64(31)), var1272, (var346, var413), var1272, var1272];
                ();
                var521
            
            case _ => 
                var652;
                var521
            
        };
        match (match (Option<Int16>.None) {
                case _ : Range<Int64> => 
                    (var1241..=var1241:(var652|1))
                
                case _ => 
                    Option<Unit>.None;
                    Option<Int16>.None;
                    (Int32(116)..Int32(80):(var652|1))
                
                case caseVar1309 => 
                    ();
                    (Int32(-17)..=Int32(-25):125|1)
                
                case caseVar1315 => 
                    let var1318 : (Range<UInt32>*UInt16) = ((UInt32(34)..=UInt32(254):91|1), UInt16(112));
                    var1318;
                    (var1241..Int32(57):(var652|1))
                
                case _ => 
                    var1147
                
            }) {
            case _ => 
                var688
            
            case _ => 
                var447;
                var447
            
            case _ => 
                ()
            
        }
    }

}

extend Class481 {
    public static func func488<T0>(optionalParam489 ! : Float32 = Float32(Float32(UInt64(UInt32(0)))), optionalParam494 ! : Option<Bool> = Option<Bool>.None, namedParam496 ! : Int16) : (Bool*UInt64) { // block id: 497
        var121;
        let var538 : List<Unit> = [(), (), (), (), ()];
        let var554 : Unit = ();
        let var629 : (Float64*Int8) = (Float64(Float32(-88.0)), Int8(65));
        let var667 : Bool = true;
        func func502<T0>() : Bool { // block id: 503
            [if ((Class481() is Range<UInt32>)) { // block id: 508
                optionalParam489
            } else if (try { // block id: 511
                Class481();
                false
            } finally { // block id: 514
                true
            }) { // block id: 516
                var518;
                var521;
                Float32(57.0)
            } else { // block id: 524
                var121;
                ();
                Float32(99.0)
            }, match {
                case (UInt16(155) is Option<Float64>) => 
                Float32(-83.0)
                case _ => 
                Float32(-39.0)
            }, match (var538[4]) {
                case _ : Range<UInt32> => 
                    UInt32(165);
                    Float32(-2.0)
                
                case var554 | var121 => 
                    (Int32(-93)..=Int32(-102):(-112)|1);
                    var121;
                    Float32(6.0)
                
                case _ => 
                    var121;
                    (31..=(-106):(-36)|1);
                    Float32(55.0)
                
                case _ => 
                    ();
                    Float32(-67.0)
                
            }, var295, Float32(19.0)];
            var loopTimeVar684 : Int64 = 0;
            while (if (match ((var578, var554, true, var583)) {
                case caseVar591 => 
                    var265
                
                case _ => 
                    ();
                    var599
                
                case caseVar614 => 
                    Class481();
                    var618;
                    true
                
                case (caseVar623 : UInt16,_ : Range<Int8>,true,(caseVar624,caseVar623 | caseVar623)) => 
                    var629;
                    var265
                
                case _ => 
                    ();
                    Int16(78);
                    false
                
            }) { // block id: 640
                let var642 : Unit = ();
                var642;
                var121;
                true
            } else if (match (((var450..=UInt32(27):(var652|1)), UInt16(172))) {
                case caseVar658 => 
                    var554;
                    var599
                
                case _ => 
                    var121;
                    ();
                    var667
                
            }) { // block id: 669
                var554;
                ();
                var265
            } else { // block id: 673
                var var675 : (Float64*Bool*Range<Int8>*UInt8) = (105.0, true, (Int8(40)..=Int8(-45):77|1), UInt8(71));
                var675;
                var265
            } && loopTimeVar684 < 100 ) {
                loopTimeVar684++;

            };
            false
        }
;
        var var691 : String = "*n)>bACQ{{";
        var loopTimeVar724 : Int64 = 0;
        do {
            loopTimeVar724++;
            let var709 : Bool = true;
            var var719 : Int32 = Int32(-42);
            if (var709) { // block id: 711

            } else if (var599) { // block id: 713
                let var716 : Int32 = Int32(105);
                (var716..=var719:(var652|1));
                ()
            }
        } while (if (func502<String>()) { // block id: 686
            var688;
            var691;
            var599
        } else if ((optionalParam494 ?? var599)) { // block id: 697
            var121;
            var121;
            var var701 : Bool = true;
            var701
        } else { // block id: 703
            var121;
            true
        } && loopTimeVar724 < 100 ) ;
        try { // block id: 726
            (var599, UInt64(174))
        } catch (_) { // block id: 730
            var734[3]
        }
    }

}


/*
return code: 139
*/
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_expected_expression
// ASSERT: scan parse_expected_left_brace
// ASSERT: scan parse_expected_case
// ASSERT: scan parse_unmatched_right_delimiter
// ASSERT: scan parse_expected_expr_or_decl_in
// ASSERT: scan parse_illegal_or_pattern
// ASSERT: scan parse_chained_none_associative
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_character
// ASSERT: scan parse_trailing_closure_only_follow_name
