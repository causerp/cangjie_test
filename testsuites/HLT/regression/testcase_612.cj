/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args

public let var_1714143424912_14 : Class_1714143424912_7 = Class_1714143424912_7()
public let var_1714143424912_24 : Struct_1714143424912_20 = Struct_1714143424912_20()
public const var_1714143424912_58 : String = ###"C7!WC,1%fY"###
public let var_1714143424912_61 : Int = Int64(UInt8(Int8(-69)))
public const var_1714143424912_75 : Int = 26
public const var_1714143424912_94 : UInt16 = 159
public const var_1714143424912_101 : Unit = ()
public const var_1714143424912_153 : Unit = ()
const var_1714143424912_158 : UInt = 20
public const var_1714143424912_177 : Int8 = -54
const var_1714143424912_245 : UInt32 = 84
public const var_1714143424912_248 : Rune = r'2'
public const var_1714143424912_254 : Byte = 76
const var_1714143424912_265 : Int16 = -6
public const var_1714143424912_285 : Int16 = -119
const var_1714143424912_312 : UInt16 = 119
let var_1714143424912_337 : Int32 = Int32(-107)
public const var_1714143424912_341 : UInt32 = 183
public let var_1714143424912_352 : Enum_1714143424912_41 = Enum_1714143424912_41.enumValue_1714143424912_354
let var_1714143424912_365 : Interface_1714143424912_10 = Class_1714143424912_7()
public const var_1714143424912_368 : Bool = false
var var_1714143424912_385 : UInt32 = UInt32(159)
public var var_1714143424912_396 : Float64 = Float64(-68.0)
public var var_1714143424912_407 : Int32 = Int32(UInt16(UInt8(UInt8(221))))
public let var_1714143424912_432 : (Int16, String, String) = (Int16(UInt16(220)), "p${var_1714143424912_58}T>${var_1714143424912_58}sl$JY_A", """
Qb${var_1714143424912_58}<6${var_1714143424912_58}D
9${var_1714143424912_58}X9${var_1714143424912_58}YX
""")
public var var_1714143424912_509 : Bool = (Class_1714143424912_7() is Array<UInt64>)
public var var_1714143424912_523 : Class_1714143424912_519 = Class_1714143424912_519()
public var var_1714143424912_594 : (Option<Int64>, Class_1714143424912_7, (Bool, Float64), Int8, Int64, Bool) = (((Float64(Float64(-40.0)) is Bool) as Int64), Class_1714143424912_7(), (true, Float64(Float32(-95.0))), Int8(UInt8(26)), Int64(16), true)
public interface Interface_1714143424912_12 {
    func func_1714143424912_17(namedParam_1714143424912_419 ! : Bool, namedParam_1714143424912_420 ! : UInt64, namedParam_1714143424912_421 ! : (Int32) -> Int16, namedParam_1714143424912_424 ! : UInt32) : Bool { // block id: 425
        var loopTimeVar_1714143424912_440 : Int64 = 0;
        while ((var_1714143424912_368) && loopTimeVar_1714143424912_440 < 100 ) {
            loopTimeVar_1714143424912_440++;
            var_1714143424912_432[0]
        };
        var var_1714143424912_497 : Option<Bool> = Option<Bool>.None;
        if (var_1714143424912_368) { // block id: 443
            var loopTimeVar_1714143424912_448 : Int = 0;
            do {
                loopTimeVar_1714143424912_448++;

            } while ((true) && loopTimeVar_1714143424912_448 < 100 ) ;
            VArray<Unit, $8>({ i => ()})[6];
            try { // block id: 471
                var_1714143424912_368
            } finally { // block id: 473
                var_1714143424912_153;
                if (true) { Enum_1714143424912_41.enumValue_1714143424912_46(UInt32(90), var_1714143424912_58, Int64(4), var_1714143424912_101) } else { Enum_1714143424912_41.enumValue_1714143424912_46(UInt32(244), "Yn =F9D#a{h", var_1714143424912_61, ()) } ;
                Int8(36) != var_1714143424912_177
            }
        } else { // block id: 490
            (var_1714143424912_497 ?? var_1714143424912_368)
        }
    }
;
    func func_1714143424912_17() : UInt16 { // block id: 18
        var loopTimeVar_1714143424912_534 : Int64 = 0;
        var_1714143424912_24.func_1714143424912_27<Range<Int32>, Int64>(var_1714143424912_523.var_1714143424912_526, while ((var_1714143424912_368) && loopTimeVar_1714143424912_534 < 100 ) {
            loopTimeVar_1714143424912_534++;
            Int16(100);
            ()
        }, var_1714143424912_285);
        var var_1714143424912_559 : ?Unit = (Int8(UInt8(Int8(61))) as Unit);
        (Option<Range<UInt32>>.Some(((UInt32(UInt32(120))&127)..(UInt32(UInt32(21))&127):(Int64(126)|1))) ?? match (if (var_1714143424912_509) { // block id: 546
            ((UInt8(UInt8(24))&127)..=(UInt8(UInt8(214))&127):(Int64(-54)|1));
            let var_1714143424912_549 : ?Unit = Option<Unit>.Some(());
            var_1714143424912_549
        } else { // block id: 552
            (var_1714143424912_265, var_1714143424912_58, var_1714143424912_58);
            ();
            var_1714143424912_559
        }) {
            case _ => 
                ((UInt32(UInt32(56))&127)..(UInt32(UInt32(239))&127):(Int64(122)|1))
            
        });
        try { // block id: 569
            var_1714143424912_94
        } finally { // block id: 571
            UInt16(166)
        }
    }

}

sealed public interface Interface_1714143424912_11<T0> <: Interface_1714143424912_12 {
    func func_1714143424912_17(namedParam_1714143424912_419 ! : Bool, namedParam_1714143424912_420 ! : UInt64, namedParam_1714143424912_421 ! : (Int32) -> Int16, namedParam_1714143424912_424 ! : UInt32) : Bool { // block id: 425
        var loopTimeVar_1714143424912_440 : Int64 = 0;
        while ((var_1714143424912_368) && loopTimeVar_1714143424912_440 < 100 ) {
            loopTimeVar_1714143424912_440++;
            var_1714143424912_432[0]
        };
        var var_1714143424912_497 : Option<Bool> = Option<Bool>.None;
        if (var_1714143424912_368) { // block id: 443
            var loopTimeVar_1714143424912_448 : Int = 0;
            do {
                loopTimeVar_1714143424912_448++;

            } while ((true) && loopTimeVar_1714143424912_448 < 100 ) ;
            VArray<Unit, $8>({ i => ()})[6];
            try { // block id: 471
                var_1714143424912_368
            } finally { // block id: 473
                var_1714143424912_153;
                if (true) { Enum_1714143424912_41.enumValue_1714143424912_46(UInt32(90), var_1714143424912_58, Int64(4), var_1714143424912_101) } else { Enum_1714143424912_41.enumValue_1714143424912_46(UInt32(244), "Yn =F9D#a{h", var_1714143424912_61, ()) } ;
                Int8(36) != var_1714143424912_177
            }
        } else { // block id: 490
            (var_1714143424912_497 ?? var_1714143424912_368)
        }
    }
;
    func func_1714143424912_17() : UInt16 { // block id: 18
        var loopTimeVar_1714143424912_534 : Int64 = 0;
        var_1714143424912_24.func_1714143424912_27<Range<Int32>, Int64>(var_1714143424912_523.var_1714143424912_526, while ((var_1714143424912_368) && loopTimeVar_1714143424912_534 < 100 ) {
            loopTimeVar_1714143424912_534++;
            Int16(100);
            ()
        }, var_1714143424912_285);
        var var_1714143424912_559 : ?Unit = (Int8(UInt8(Int8(61))) as Unit);
        (Option<Range<UInt32>>.Some(((UInt32(UInt32(120))&127)..(UInt32(UInt32(21))&127):(Int64(126)|1))) ?? match (if (var_1714143424912_509) { // block id: 546
            ((UInt8(UInt8(24))&127)..=(UInt8(UInt8(214))&127):(Int64(-54)|1));
            let var_1714143424912_549 : ?Unit = Option<Unit>.Some(());
            var_1714143424912_549
        } else { // block id: 552
            (var_1714143424912_265, var_1714143424912_58, var_1714143424912_58);
            ();
            var_1714143424912_559
        }) {
            case _ => 
                ((UInt32(UInt32(56))&127)..(UInt32(UInt32(239))&127):(Int64(122)|1))
            
        });
        try { // block id: 569
            var_1714143424912_94
        } finally { // block id: 571
            UInt16(166)
        }
    }

}

public interface Interface_1714143424912_10 <: Interface_1714143424912_11<Float32> {
    func func_1714143424912_17(namedParam_1714143424912_419 ! : Bool, namedParam_1714143424912_420 ! : UInt64, namedParam_1714143424912_421 ! : (Int32) -> Int16, namedParam_1714143424912_424 ! : UInt32) : Bool { // block id: 425
        var loopTimeVar_1714143424912_440 : Int64 = 0;
        while ((var_1714143424912_368) && loopTimeVar_1714143424912_440 < 100 ) {
            loopTimeVar_1714143424912_440++;
            var_1714143424912_432[0]
        };
        var var_1714143424912_497 : Option<Bool> = Option<Bool>.None;
        if (var_1714143424912_368) { // block id: 443
            var loopTimeVar_1714143424912_448 : Int = 0;
            do {
                loopTimeVar_1714143424912_448++;

            } while ((true) && loopTimeVar_1714143424912_448 < 100 ) ;
            VArray<Unit, $8>({ i => ()})[6];
            try { // block id: 471
                var_1714143424912_368
            } finally { // block id: 473
                var_1714143424912_153;
                if (true) { Enum_1714143424912_41.enumValue_1714143424912_46(UInt32(90), var_1714143424912_58, Int64(4), var_1714143424912_101) } else { Enum_1714143424912_41.enumValue_1714143424912_46(UInt32(244), "Yn =F9D#a{h", var_1714143424912_61, ()) } ;
                Int8(36) != var_1714143424912_177
            }
        } else { // block id: 490
            (var_1714143424912_497 ?? var_1714143424912_368)
        }
    }
;
    func func_1714143424912_17() : UInt16 { // block id: 18
        var loopTimeVar_1714143424912_534 : Int64 = 0;
        var_1714143424912_24.func_1714143424912_27<Range<Int32>, Int64>(var_1714143424912_523.var_1714143424912_526, while ((var_1714143424912_368) && loopTimeVar_1714143424912_534 < 100 ) {
            loopTimeVar_1714143424912_534++;
            Int16(100);
            ()
        }, var_1714143424912_285);
        var var_1714143424912_559 : ?Unit = (Int8(UInt8(Int8(61))) as Unit);
        (Option<Range<UInt32>>.Some(((UInt32(UInt32(120))&127)..(UInt32(UInt32(21))&127):(Int64(126)|1))) ?? match (if (var_1714143424912_509) { // block id: 546
            ((UInt8(UInt8(24))&127)..=(UInt8(UInt8(214))&127):(Int64(-54)|1));
            let var_1714143424912_549 : ?Unit = Option<Unit>.Some(());
            var_1714143424912_549
        } else { // block id: 552
            (var_1714143424912_265, var_1714143424912_58, var_1714143424912_58);
            ();
            var_1714143424912_559
        }) {
            case _ => 
                ((UInt32(UInt32(56))&127)..(UInt32(UInt32(239))&127):(Int64(122)|1))
            
        });
        try { // block id: 569
            var_1714143424912_94
        } finally { // block id: 571
            UInt16(166)
        }
    }

}

public open class Class_1714143424912_7 <: Interface_1714143424912_10 {
    public init() { // block id: 9

    }
;
    public open override func func_1714143424912_17(namedParam_1714143424912_419 ! : Bool, namedParam_1714143424912_420 ! : UInt64, namedParam_1714143424912_421 ! : (Int32) -> Int16, namedParam_1714143424912_424 ! : UInt32) : Bool { // block id: 425
        var loopTimeVar_1714143424912_440 : Int64 = 0;
        while ((var_1714143424912_368) && loopTimeVar_1714143424912_440 < 100 ) {
            loopTimeVar_1714143424912_440++;
            var_1714143424912_432[0]
        };
        var var_1714143424912_497 : Option<Bool> = Option<Bool>.None;
        if (var_1714143424912_368) { // block id: 443
            var loopTimeVar_1714143424912_448 : Int = 0;
            do {
                loopTimeVar_1714143424912_448++;

            } while ((true) && loopTimeVar_1714143424912_448 < 100 ) ;
            VArray<Unit, $8>({ i => ()})[6];
            try { // block id: 471
                var_1714143424912_368
            } finally { // block id: 473
                var_1714143424912_153;
                if (true) { Enum_1714143424912_41.enumValue_1714143424912_46(UInt32(90), var_1714143424912_58, Int64(4), var_1714143424912_101) } else { Enum_1714143424912_41.enumValue_1714143424912_46(UInt32(244), "Yn =F9D#a{h", var_1714143424912_61, ()) } ;
                Int8(36) != var_1714143424912_177
            }
        } else { // block id: 490
            (var_1714143424912_497 ?? var_1714143424912_368)
        }
    }
;
    public open override func func_1714143424912_17() : UInt16 { // block id: 18
        var loopTimeVar_1714143424912_534 : Int64 = 0;
        var_1714143424912_24.func_1714143424912_27<Range<Int32>, Int64>(var_1714143424912_523.var_1714143424912_526, while ((var_1714143424912_368) && loopTimeVar_1714143424912_534 < 100 ) {
            loopTimeVar_1714143424912_534++;
            Int16(100);
            ()
        }, var_1714143424912_285);
        var var_1714143424912_559 : ?Unit = (Int8(UInt8(Int8(61))) as Unit);
        (Option<Range<UInt32>>.Some(((UInt32(UInt32(120))&127)..(UInt32(UInt32(21))&127):(Int64(126)|1))) ?? match (if (var_1714143424912_509) { // block id: 546
            ((UInt8(UInt8(24))&127)..=(UInt8(UInt8(214))&127):(Int64(-54)|1));
            let var_1714143424912_549 : ?Unit = Option<Unit>.Some(());
            var_1714143424912_549
        } else { // block id: 552
            (var_1714143424912_265, var_1714143424912_58, var_1714143424912_58);
            ();
            var_1714143424912_559
        }) {
            case _ => 
                ((UInt32(UInt32(56))&127)..(UInt32(UInt32(239))&127):(Int64(122)|1))
            
        });
        try { // block id: 569
            var_1714143424912_94
        } finally { // block id: 571
            UInt16(166)
        }
    }

}

public struct Struct_1714143424912_20 {
    public init() { // block id: 22

    }
;
    public let var_1714143424912_334 : Interface_1714143424912_12 = Class_1714143424912_7();
    public func func_1714143424912_27<T0, T1>(param_1714143424912_28 : Float32, param_1714143424912_29 : Unit, param_1714143424912_30 : Int16) : Unit { // block id: 31
        let var_1714143424912_36 : Int16 = Int16(UInt8(29));
        UInt32((var_1714143424912_36 << ((var_1714143424912_36) & 7))) << ((match (if (false) { Enum_1714143424912_41.enumValue_1714143424912_46(UInt32(177), ###"6\"35D8PCuo"###, Int64(-61), ()) } else { Enum_1714143424912_41.enumValue_1714143424912_46(UInt32(242), var_1714143424912_58, var_1714143424912_61, ()) } ) {
            case _ => 
                UInt32(166)
            
        }) & 7);
        func_1714143424912_71(Int32((var_1714143424912_334, var_1714143424912_337, var_1714143424912_94, var_1714143424912_341)[2]));
        var var_1714143424912_360 : UInt = UInt64(Int32(Int8(-127)));
        let var_1714143424912_503 : (Int32) -> Int16 = func_1714143424912_71;
        var loopTimeVar_1714143424912_517 : Int64 = 0;
        (if (match (var_1714143424912_352) {
            case defaultValue => 
                var_1714143424912_360--;
                var_1714143424912_365;
                var_1714143424912_368
            
            case defaultValue => 
                var_1714143424912_101;
                var_1714143424912_368
            
            case _ : Enum_1714143424912_41 => 
                var_1714143424912_248;
                var_1714143424912_368
            
            case _ => 
                var_1714143424912_385 *= var_1714143424912_341;
                var_1714143424912_368
            
        }) { // block id: 389
            Option<Unit>.None
        } else if ((var_1714143424912_368, var_1714143424912_396)[0]) { // block id: 399
            Option<Unit>.Some(var_1714143424912_153)
        } else { // block id: 402
            var_1714143424912_153;
            Int32(38) + var_1714143424912_407;
            Option<Unit>.Some(())
        } ?? while ((var_1714143424912_334.func_1714143424912_17(namedParam_1714143424912_419 : var_1714143424912_368, namedParam_1714143424912_420 : var_1714143424912_360, namedParam_1714143424912_421 : var_1714143424912_503, namedParam_1714143424912_424 : var_1714143424912_341)) && loopTimeVar_1714143424912_517 < 100 ) {
            loopTimeVar_1714143424912_517++;
            var_1714143424912_509 &&= false;
            var_1714143424912_36 * var_1714143424912_36
        })
    }

}

public enum Enum_1714143424912_41 {
    defaultValue |
    enumValue_1714143424912_46(UInt32, String, Int64, Unit) |
    enumValue_1714143424912_354
}
const func func_1714143424912_97() : UInt16 { // block id: 98
    var_1714143424912_94
}

public const func func_1714143424912_85(optionalParam_1714143424912_86 ! : Bool = true, optionalParam_1714143424912_88 ! : UInt16 = 8, namedParam_1714143424912_90 ! : Int8) : Unit { // block id: 91
    var_1714143424912_94 >> ((func_1714143424912_97()) & 7);
    var_1714143424912_101
}

public const func func_1714143424912_149() : UInt64 { // block id: 150
    var_1714143424912_101;
    var_1714143424912_153;
    106 | var_1714143424912_158
}

public const func func_1714143424912_172(param_1714143424912_173 : Int32) : Bool { // block id: 174
    func_1714143424912_85(namedParam_1714143424912_90 : var_1714143424912_177);
    true
}

public const func func_1714143424912_220(optionalParam_1714143424912_221 ! : String = """
,mS]N
JY/XQ
""", optionalParam_1714143424912_223 ! : String = "9)CL\"rKz/k", namedParam_1714143424912_225 ! : Unit, optionalParam_1714143424912_226 ! : Int16 = 24) : UInt32 { // block id: 228
    const var_1714143424912_230 : UInt32 = 204;
    var_1714143424912_230
}

public const func func_1714143424912_212(namedParam_1714143424912_213 ! : String, namedParam_1714143424912_214 ! : Int16, namedParam_1714143424912_215 ! : UInt32, optionalParam_1714143424912_216 ! : Rune = r'U') : Int32 { // block id: 218
    func_1714143424912_220(optionalParam_1714143424912_221 : var_1714143424912_58, namedParam_1714143424912_225 : ());
    const var_1714143424912_235 : Int32 = 83;
    var_1714143424912_235
}

public const func func_1714143424912_205(optionalParam_1714143424912_206 ! : Bool = false, namedParam_1714143424912_208 ! : UInt8) : UInt64 { // block id: 209
    const func func_1714143424912_238(namedParam_1714143424912_239 ! : Int8) : String { // block id: 240
        """
7LqF$
1mQ3}
"""
    }
;
    func_1714143424912_212(namedParam_1714143424912_213 : func_1714143424912_238(namedParam_1714143424912_239 : var_1714143424912_177), namedParam_1714143424912_214 : -81, namedParam_1714143424912_215 : var_1714143424912_245, optionalParam_1714143424912_216 : var_1714143424912_248) != 16;
    57
}

public const func func_1714143424912_258(param_1714143424912_259 : UInt32) : UInt8 { // block id: 260
    var_1714143424912_254
}

public const func func_1714143424912_189(param_1714143424912_190 : Float32, param_1714143424912_191 : Unit) : UInt8 { // block id: 192
    -121.0;
    const var_1714143424912_198 : UInt64 = 179;
    ((var_1714143424912_198 & 178) >> ((78) & 7)) >> (((187 << ((func_1714143424912_205(optionalParam_1714143424912_206 : false, namedParam_1714143424912_208 : var_1714143424912_254)) & 7))) & 7);
    func_1714143424912_258(func_1714143424912_220(namedParam_1714143424912_225 : var_1714143424912_101, optionalParam_1714143424912_226 : var_1714143424912_265)) - (var_1714143424912_254 & var_1714143424912_254)
}

public const func func_1714143424912_272(param_1714143424912_273 : UInt64, param_1714143424912_274 : Int8, param_1714143424912_275 : Int16) : Unit { // block id: 276
    67;
    8;
    var_1714143424912_153
}

public const func func_1714143424912_185(param_1714143424912_186 : UInt8) : Rune { // block id: 187
    func_1714143424912_189(-7.0, func_1714143424912_272(24, 80, 116));
    var_1714143424912_285 | -76;
    var_1714143424912_248
}

public const func func_1714143424912_118(optionalParam_1714143424912_119 ! : String = ###"/k@eDZJ9N>"###, optionalParam_1714143424912_121 ! : Rune = r'C', optionalParam_1714143424912_123 ! : Float64 = -126.0, optionalParam_1714143424912_125 ! : Rune = r'3') : UInt16 { // block id: 127
    ();
    const var_1714143424912_182 : Bool = true;
    const func func_1714143424912_144(optionalParam_1714143424912_145 ! : UInt32 = 195) : Int64 { // block id: 147
        func_1714143424912_149();
        const func func_1714143424912_162(optionalParam_1714143424912_163 ! : Rune = r'3', optionalParam_1714143424912_165 ! : UInt8 = 9, optionalParam_1714143424912_167 ! : Bool = true) : Bool { // block id: 169
            func_1714143424912_172(84) && var_1714143424912_182
        }
;
        func_1714143424912_85(optionalParam_1714143424912_86 : func_1714143424912_162(optionalParam_1714143424912_163 : func_1714143424912_185(165), optionalParam_1714143424912_167 : var_1714143424912_182), namedParam_1714143424912_90 : 94);
        var_1714143424912_75
    }
;
    const func func_1714143424912_134(optionalParam_1714143424912_135 ! : UInt64 = 201, optionalParam_1714143424912_137 ! : Float64 = -30.0, optionalParam_1714143424912_139 ! : Rune = r'L', namedParam_1714143424912_141 ! : UInt32) : Rune { // block id: 142
        func_1714143424912_144(optionalParam_1714143424912_145 : 208);
        r'c'
    }
;
    const func func_1714143424912_131() : UInt16 { // block id: 132
        func_1714143424912_134(optionalParam_1714143424912_135 : 21, optionalParam_1714143424912_137 : -57.0, optionalParam_1714143424912_139 : var_1714143424912_248, namedParam_1714143424912_141 : 214);
        174 + ((128 / ((74) | 1)) >> ((var_1714143424912_94) & 7))
    }
;
    func_1714143424912_131() + 74;
    var_1714143424912_94 - (17 * var_1714143424912_312)
}

public const func func_1714143424912_104(optionalParam_1714143424912_105 ! : Unit = (), optionalParam_1714143424912_107 ! : Float32 = 92.0) : Int8 { // block id: 109
    var_1714143424912_101;
    (func_1714143424912_97() & func_1714143424912_97()) % (((var_1714143424912_94 << ((func_1714143424912_118(optionalParam_1714143424912_123 : 66.0, optionalParam_1714143424912_125 : r'i')) & 7))) | 1);
    -97 / ((91) | 1)
}

public const func func_1714143424912_78(optionalParam_1714143424912_79 ! : Rune = r'T', optionalParam_1714143424912_81 ! : Int8 = -101) : Int16 { // block id: 83
    func_1714143424912_85(namedParam_1714143424912_90 : func_1714143424912_104(optionalParam_1714143424912_107 : 29.0));
    ((var_1714143424912_285 >> ((var_1714143424912_265) & 7)) ^ -81) / ((50) | 1)
}

public const func func_1714143424912_71(param_1714143424912_72 : Int32) : Int16 { // block id: 73
    var_1714143424912_75;
    func_1714143424912_78(optionalParam_1714143424912_79 : r'A', optionalParam_1714143424912_81 : 10)
}



public open class Class_1714143424912_519 <: Class_1714143424912_7 {
    public init() { // block id: 521

    }
;
    public var var_1714143424912_526 : Float32 = Float32(58.0);
    public open override func func_1714143424912_17(namedParam_1714143424912_419 ! : Bool, namedParam_1714143424912_420 ! : UInt64, namedParam_1714143424912_421 ! : (Int32) -> Int16, namedParam_1714143424912_424 ! : UInt32) : Bool { // block id: 425
        var loopTimeVar_1714143424912_440 : Int64 = 0;
        while ((var_1714143424912_368) && loopTimeVar_1714143424912_440 < 100 ) {
            loopTimeVar_1714143424912_440++;
            var_1714143424912_432[0]
        };
        var var_1714143424912_497 : Option<Bool> = Option<Bool>.None;
        if (var_1714143424912_368) { // block id: 443
            var loopTimeVar_1714143424912_448 : Int = 0;
            do {
                loopTimeVar_1714143424912_448++;

            } while ((true) && loopTimeVar_1714143424912_448 < 100 ) ;
            VArray<Unit, $8>({ i => ()})[6];
            try { // block id: 471
                var_1714143424912_368
            } finally { // block id: 473
                var_1714143424912_153;
                if (true) { Enum_1714143424912_41.enumValue_1714143424912_46(UInt32(90), var_1714143424912_58, Int64(4), var_1714143424912_101) } else { Enum_1714143424912_41.enumValue_1714143424912_46(UInt32(244), "Yn =F9D#a{h", var_1714143424912_61, ()) } ;
                Int8(36) != var_1714143424912_177
            }
        } else { // block id: 490
            (var_1714143424912_497 ?? var_1714143424912_368)
        }
    }
;
    public open override func func_1714143424912_17() : UInt16 { // block id: 18
        var loopTimeVar_1714143424912_534 : Int64 = 0;
        var_1714143424912_24.func_1714143424912_27<Range<Int32>, Int64>(var_1714143424912_523.var_1714143424912_526, while ((var_1714143424912_368) && loopTimeVar_1714143424912_534 < 100 ) {
            loopTimeVar_1714143424912_534++;
            Int16(100);
            ()
        }, var_1714143424912_285);
        var var_1714143424912_559 : ?Unit = (Int8(UInt8(Int8(61))) as Unit);
        (Option<Range<UInt32>>.Some(((UInt32(UInt32(120))&127)..(UInt32(UInt32(21))&127):(Int64(126)|1))) ?? match (if (var_1714143424912_509) { // block id: 546
            ((UInt8(UInt8(24))&127)..=(UInt8(UInt8(214))&127):(Int64(-54)|1));
            let var_1714143424912_549 : ?Unit = Option<Unit>.Some(());
            var_1714143424912_549
        } else { // block id: 552
            (var_1714143424912_265, var_1714143424912_58, var_1714143424912_58);
            ();
            var_1714143424912_559
        }) {
            case _ => 
                ((UInt32(UInt32(56))&127)..(UInt32(UInt32(239))&127):(Int64(122)|1))
            
        });
        try { // block id: 569
            var_1714143424912_94
        } finally { // block id: 571
            UInt16(166)
        }
    }

}



main(): Int64 {
    try {
        var_1714143424912_14.func_1714143424912_17();
        let var_1714143424912_582 : Option<Int64> = Option<Int64>.None;
        let var_1714143424912_588 : Array<Int64> = [Int64(-2), Int64(-87), Int64(91), Int64(83), Int64(9), Int64(109), Int64(104), Int64(-38), Int64(-112), Int64(100)];
        VArray<Int64, $3>(repeat: (var_1714143424912_582 ?? var_1714143424912_75))[1]
        // CRC Check All Variables
        var crcCheck = CrcCheck(5000, 32)
        crcCheck.updateBuffer(UInt64(var_1714143424912_61*var_1714143424912_61), 64)
        crcCheck.updateBuffer(UInt64(var_1714143424912_75*var_1714143424912_75), 64)
        crcCheck.updateBuffer(UInt64(var_1714143424912_312*var_1714143424912_312), 64)
        crcCheck.updateBuffer(UInt64(var_1714143424912_341*var_1714143424912_341), 64)
        crcCheck.updateBuffer(UInt64(var_1714143424912_407*var_1714143424912_407), 64)
        crcCheck.crcCheck()
        crcCheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[(i + buffer_index) % buffer.size] = byteArray[i + byte_index]
            i++
        }
        buffer_index = (buffer_index + i) % buffer.size
    }

    func updateBuffer(input: Bool, byte_n: Int64): Unit {
        if (input == true) {
            updateBuffer(1, byte_n)
        } else {
            updateBuffer(0, byte_n)
        }
    }

    func updateBuffer(input: Rune, byte_n: Int64): Unit {
        updateBuffer(UInt64(UInt32(input)), byte_n)
    }

    func updateBuffer(input: String, byte_n: Int64): Unit {
        for (c in input) {
            updateBuffer(c, byte_n)
        }
    }

    func updateBuffer(input: Unit, byte_n: Int64): Unit {
        updateBuffer(input.toString(), byte_n)
    }

    func updateBuffer(input: Any, byte_n: Int64) : Unit {
        if (input is Hashable) {
            match(input as Hashable) {
                case Some(v) => updateBuffer(UInt64(v.hashCode()), byte_n)
                case _=> updateBuffer(1, byte_n)
            }
            
        } else if (input is ToString) {
            match(input as ToString) {
                case Some(v) => updateBuffer(v.toString(), byte_n)
                case _=> updateBuffer(1, byte_n)
            }
        } else {
            updateBuffer(1, byte_n)
        }
    }     
    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}

extend Class_1714143424912_519 {

}

extend Class_1714143424912_7 {

}

