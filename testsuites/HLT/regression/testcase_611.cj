/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// (CJNATIVE) EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// (CJNATIVE) RUN-EXEC: %run %run_opt %output %run_args
// (not CJNATIVE) ERRCHECK: %compiler %overflow_wrapping %f %cmp_opt

public let var_1714071481570_33 : Int8 = Int8(73)
var var_1714071481570_53 : Class_1714071481570_5 = Class_1714071481570_5()
public let var_1714071481570_133 : Range<UInt8> = ((UInt8(UInt8(65))&127)..(UInt8(UInt8(UInt8(Int8(UInt8(188)))))&127):(Int64(UInt16(UInt16(UInt8(31))))|1))
var var_1714071481570_237 : Unit = ()
var var_1714071481570_250 : UInt = UInt64(156)
public var var_1714071481570_368 : Class_1714071481570_364 = Class_1714071481570_364()
var var_1714071481570_406 : Int8 = Int8(72)
public const var_1714071481570_483 : UInt = 202
public const var_1714071481570_489 : Unit = ()
public const var_1714071481570_542 : UInt = 19
public const var_1714071481570_589 : UInt64 = 196
public let var_1714071481570_629 : VArray<Float64, $2> = VArray<Float64, $2>(repeat: Float64(82.0))
let var_1714071481570_646 : Float64 = Float64(Float64(Float32(Float32(Float32(-124.0)))))
var var_1714071481570_658 : (Float64, Int8, Range<UInt8>) = (Float64(Float32(-28.0)), Int8(UInt8(UInt8(135))), ((UInt8(UInt8(69))&127)..(UInt8(UInt8(229))&127):(Int64(-11)|1)))
let var_1714071481570_683 : Interface_1714071481570_8 = Class_1714071481570_5()
public let var_1714071481570_687 : String = ###"J' iT|)ZUq"###
let var_1714071481570_711 : Int32 = Int32(UInt8(UInt8(UInt8(Int8(-81)))))
public var var_1714071481570_779 : VArray<Float64, $2> = [Float64(108.0), Float64(102.0)]
let var_1714071481570_833 : Range<UInt64> = ((UInt64(UInt64(7))&127)..(UInt64(UInt64(86))&127):(Int64(-18)|1))
var var_1714071481570_908 : Int = Int64(Int16(72))
public let var_1714071481570_951 : Array<Option<Int64>> = [Option<Int64>.None, (Float64(Float64(-118.0)) as Int64), Option<Int64>.None, ([(Option<Int64>.None as Int64), (VArray<Unit, $8>({ i => ()}) as Int64), ((Float64(40.0), Int8(-12), ((UInt8(UInt8(35))&127)..=(UInt8(UInt8(89))&127):(Int64(54)|1))) as Int64), Option<Int64>.None, (Option<UInt32>.None as Int64), ((UInt16(38), r'5', Int32(-24), ((Int32(Int32(41))&127)..=(Int32(Int32(122))&127):(Int64(-37)|1)), UInt64(175), ((UInt64(UInt64(98))&127)..=(UInt64(UInt64(81))&127):(Int64(-57)|1)), (), Int32(65), ((Int16(Int16(2))&127)..(Int16(Int16(70))&127):(Int64(-20)|1))) as Int64), Option<Int64>.None, (((Int16(Int16(81))&127)..=(Int16(Int16(-34))&127):(Int64(-65)|1)) as Int64), Option<Int64>.None, (Struct_1714071481570_271() as Int64)] as Int64), (Float32(-48.0) as Int64), ((((Int32(Int32(-40))&127)..(Int32(Int32(27))&127):(Int64(1)|1)) is Interface_1714071481570_8) as Int64), Option<Int64>.None, Option<Int64>.None, Option<Int64>.None, ([Option<Int64>.None, (Class_1714071481570_364() as Int64), Option<Int64>.None, Option<Int64>.None, Option<Int64>.None, Option<Int64>.None, Option<Int64>.None, (Class_1714071481570_364() as Int64), (Struct_1714071481570_271() as Int64), (((Int16(Int16(115))&127)..=(Int16(Int16(-46))&127):(Int64(108)|1)) as Int64)] as Int64)]
let var_1714071481570_1041 : Float64 = Float64(Float32(Float32(85.0)))
sealed public interface Interface_1714071481570_10 {
    func func_1714071481570_945() : Int64 { // block id: 946
        let var_1714071481570_1031 : ?Bool = (r'0' as Bool);
        var var_1714071481570_1038 : Float64 = Float64(-17.0);
        (var_1714071481570_951[0] ?? if ((var_1714071481570_1031 ?? false)) { // block id: 1035
            var_1714071481570_1038 /= Float64((Int32(var_1714071481570_1041)) | 1);
            Int64(116) + Int64(-21)
        } else { // block id: 1048
            var_1714071481570_237;
            ();
            var_1714071481570_908
        })
    }

}

sealed public interface Interface_1714071481570_9 <: Interface_1714071481570_10 {
    func func_1714071481570_670(namedParam_1714071481570_671 ! : UInt16, namedParam_1714071481570_672 ! : Array<VArray<Float64, $2>>, namedParam_1714071481570_673 ! : Float64, namedParam_1714071481570_674 ! : UInt16) : Range<UInt32> { // block id: 675
        const var_1714071481570_735 : UInt32 = 146;
        let var_1714071481570_747 : Bool = (UInt32(185) is (Class_1714071481570_5, Rune, Int8, Bool));
        const var_1714071481570_758 : Int = 17;
        if (match ((Int32(-10), var_1714071481570_237, var_1714071481570_683, Int32(-16), var_1714071481570_687)[4]) {
            case caseVar_1714071481570_692 : Range<Int32> => 
                UInt16(207) <= UInt16(56)
            
            case _ => 
                Int16(-120) != Int16(-58)
            
            case caseVar_1714071481570_705 : Array<VArray<Float64, $2>> => 
                var_1714071481570_250 = UInt64(100);
                var_1714071481570_711;
                let var_1714071481570_718 : Bool = false;
                var_1714071481570_718
            
            case _ => 
                ();
                let var_1714071481570_725 : Bool = ((Float64(Float64(5.0)), Int8(-50), ((UInt8(UInt8(200))&127)..=(UInt8(UInt8(194))&127):(Int64(-51)|1))) is (VArray<Float64, $2>, UInt32, (Float64, Int8, Range<UInt8>)) -> Interface_1714071481570_9);
                var_1714071481570_725
            
        }) { ((UInt32(UInt32(132))&127)..(UInt32(UInt32(39))&127):(Int64(-17)|1)) } else { ((UInt32(var_1714071481570_735)&127)..=(UInt32((Option<UInt32>.Some(var_1714071481570_735) ?? UInt32(230)))&127):(if (var_1714071481570_747) { // block id: 750
            -Int64(114)
        } else if (var_1714071481570_747) { // block id: 754
            Int64(108) ^ var_1714071481570_758
        } else { // block id: 760
            var_1714071481570_758
        }|1)) } 
    }
;
    func func_1714071481570_670() : Unit { // block id: 941

    }
;
    func func_1714071481570_945() : Int64 { // block id: 946
        let var_1714071481570_1031 : ?Bool = (r'0' as Bool);
        var var_1714071481570_1038 : Float64 = Float64(-17.0);
        (var_1714071481570_951[0] ?? if ((var_1714071481570_1031 ?? false)) { // block id: 1035
            var_1714071481570_1038 /= Float64((Int32(var_1714071481570_1041)) | 1);
            Int64(116) + Int64(-21)
        } else { // block id: 1048
            var_1714071481570_237;
            ();
            var_1714071481570_908
        })
    }

}

sealed public interface Interface_1714071481570_8 <: Interface_1714071481570_9 {
    func func_1714071481570_945() : Int64 { // block id: 946
        let var_1714071481570_1031 : ?Bool = (r'0' as Bool);
        var var_1714071481570_1038 : Float64 = Float64(-17.0);
        (var_1714071481570_951[0] ?? if ((var_1714071481570_1031 ?? false)) { // block id: 1035
            var_1714071481570_1038 /= Float64((Int32(var_1714071481570_1041)) | 1);
            Int64(116) + Int64(-21)
        } else { // block id: 1048
            var_1714071481570_237;
            ();
            var_1714071481570_908
        })
    }
;
    func func_1714071481570_670(namedParam_1714071481570_671 ! : UInt16, namedParam_1714071481570_672 ! : Array<VArray<Float64, $2>>, namedParam_1714071481570_673 ! : Float64, namedParam_1714071481570_674 ! : UInt16) : Range<UInt32> { // block id: 675
        const var_1714071481570_735 : UInt32 = 146;
        let var_1714071481570_747 : Bool = (UInt32(185) is (Class_1714071481570_5, Rune, Int8, Bool));
        const var_1714071481570_758 : Int = 17;
        if (match ((Int32(-10), var_1714071481570_237, var_1714071481570_683, Int32(-16), var_1714071481570_687)[4]) {
            case caseVar_1714071481570_692 : Range<Int32> => 
                UInt16(207) <= UInt16(56)
            
            case _ => 
                Int16(-120) != Int16(-58)
            
            case caseVar_1714071481570_705 : Array<VArray<Float64, $2>> => 
                var_1714071481570_250 = UInt64(100);
                var_1714071481570_711;
                let var_1714071481570_718 : Bool = false;
                var_1714071481570_718
            
            case _ => 
                ();
                let var_1714071481570_725 : Bool = ((Float64(Float64(5.0)), Int8(-50), ((UInt8(UInt8(200))&127)..=(UInt8(UInt8(194))&127):(Int64(-51)|1))) is (VArray<Float64, $2>, UInt32, (Float64, Int8, Range<UInt8>)) -> Interface_1714071481570_9);
                var_1714071481570_725
            
        }) { ((UInt32(UInt32(132))&127)..(UInt32(UInt32(39))&127):(Int64(-17)|1)) } else { ((UInt32(var_1714071481570_735)&127)..=(UInt32((Option<UInt32>.Some(var_1714071481570_735) ?? UInt32(230)))&127):(if (var_1714071481570_747) { // block id: 750
            -Int64(114)
        } else if (var_1714071481570_747) { // block id: 754
            Int64(108) ^ var_1714071481570_758
        } else { // block id: 760
            var_1714071481570_758
        }|1)) } 
    }
;
    func func_1714071481570_670() : Unit { // block id: 941

    }

}

public open class Class_1714071481570_5 <: Interface_1714071481570_8 & Resource {
    public init() { // block id: 7

    }
;
    prop var_1714071481570_223 : Unit { // block id: 224
        get() { // block id: 226
            Option<Bool>.None;
            ()
        }

    };
    public prop var_1714071481570_371 : (UInt16, Rune, Int32, Range<Int32>, UInt64, Range<UInt64>, Unit, Int32, Range<Int16>) { // block id: 372
        get() { // block id: 374
            (UInt16(Int16(Int16(19))), r'F', Int32(UInt16(119)), ((Int32(Int32(-23))&127)..(Int32(Int32(93))&127):(Int64(-43)|1)), UInt64(23), ((UInt64(UInt64(236))&127)..=(UInt64(UInt64(UInt16(188)))&127):(Int64(-61)|1)), (), Int32(-20), ((Int16(Int16(UInt8(213)))&127)..(Int16(Int16(-30))&127):(Int64(Int32(63))|1)))
        }

    };
    public init(namedParam_1714071481570_356 ! : Float64, namedParam_1714071481570_357 ! : Range<Int8>) { // block id: 358
        var_1714071481570_237;
        func_1714071481570_308<String>(var_1714071481570_368.var_1714071481570_371[4]);
        (Option<Unit>.Some((var_1714071481570_406 &= var_1714071481570_33)) ?? [(), var_1714071481570_237, var_1714071481570_237, var_1714071481570_237, var_1714071481570_237, (), (), (), var_1714071481570_237, ()][4])
    }
;
    public mut prop var_1714071481570_548 : Int8 { // block id: 549
        get() { // block id: 551
            ((UInt16(UInt16(183))&127)..=(UInt16(UInt16(Int16(UInt16(75))))&127):(Int64(75)|1));
            Int8(UInt8(145));
            var_1714071481570_1053
        }

        set(Value) { // block id: 562
            (UInt16(156), r'T', Int32(39), ((Int32(Int32(Int16(98)))&127)..=(Int32(Int32(Int8(-72)))&127):(Int64(Int32(102))|1)), UInt64(UInt16(UInt16(59))), ((UInt64(UInt64(206))&127)..(UInt64(UInt64(78))&127):(Int64(14)|1)), (), Int32(-40), ((Int16(Int16(-95))&127)..=(Int16(Int16(Int16(84)))&127):(Int64(UInt64(81))|1)));
            ();
            var_1714071481570_1053 = Value
        }

    };
    init(param_1714071481570_88 : UInt32, optionalParam_1714071481570_89 ! : String = """
G^Wk~
WJTA<
""", optionalParam_1714071481570_91 ! : Rune = r'n') { // block id: 93
        let var_1714071481570_102 : ?Int64 = Option<Int64>.Some(Int64(UInt16(170)));
        try { // block id: 95
            var_1714071481570_102.getOrThrow();
            var var_1714071481570_119 : Float64 = Float64(Float32(-95.0));
            VArray<Float64, $2>(repeat: var_1714071481570_119)[1]
        } finally { // block id: 124
            const var_1714071481570_129 : Float64 = 104.0;
            (var_1714071481570_129, Int8(-117), var_1714071481570_133)[0]
        };
        let var_1714071481570_775 : Float64 = Float64(-60.0);
        let var_1714071481570_788 : UInt16 = UInt16(19);
        let var_1714071481570_829 : ?Unit = (((UInt32(UInt32(215))&127)..=(UInt32(UInt32(112))&127):(Int64(-114)|1)) as Unit);
        var var_1714071481570_842 : Int = Int64(UInt16(99));
        match (func_1714071481570_148(namedParam_1714071481570_149 : var_1714071481570_629, optionalParam_1714071481570_150 : UInt32(61), namedParam_1714071481570_152 : var_1714071481570_658).func_1714071481570_670(namedParam_1714071481570_671 : UInt16(89), namedParam_1714071481570_672 : [VArray<Float64, $2>({ i => Float64(-29.0)}), VArray<Float64, $2>({ i => Float64(85.0)}), var_1714071481570_629, var_1714071481570_629, VArray<Float64, $2>(repeat: Float64(-15.0)), var_1714071481570_629, var_1714071481570_779, var_1714071481570_779, VArray<Float64, $2>({ i => Float64(32.0)}), var_1714071481570_629], namedParam_1714071481570_673 : Float64(-60.0), namedParam_1714071481570_674 : var_1714071481570_788)) {
            case caseVar_1714071481570_792 : Array<VArray<Float64, $2>> => 
                [UInt64(17), UInt64(241), UInt64(138), UInt64(91), UInt64(168), UInt64(83), UInt64(135), UInt64(252), UInt64(66), UInt64(213)];
                ((UInt64(UInt64(156))&127)..=(UInt64(UInt64(9))&127):(Int64(49)|1))
            
            case _ : UInt16 => 
                ();
                ((UInt64(var_1714071481570_542)&127)..=(UInt64(UInt64(34))&127):(Int64(33)|1))
            
            case caseVar_1714071481570_806 => 
                var_1714071481570_237;
                [(), (), (), (), (), var_1714071481570_489, var_1714071481570_237, (), (), ()];
                ((UInt64(UInt64(247))&127)..(UInt64(var_1714071481570_542)&127):(Int64(52)|1))
            
            case _ : Rune => 
                var_1714071481570_237;
                var_1714071481570_829;
                var_1714071481570_833
            
            case _ => 
                ((UInt64(UInt64(80))&127)..(UInt64(var_1714071481570_483)&127):(var_1714071481570_842|1))
            
        }
    }
;
    var var_1714071481570_1053 : Int8 = Int8(9);
    public open override func func_1714071481570_945() : Int64 { // block id: 946
        let var_1714071481570_1031 : ?Bool = (r'0' as Bool);
        var var_1714071481570_1038 : Float64 = Float64(-17.0);
        (var_1714071481570_951[0] ?? if ((var_1714071481570_1031 ?? false)) { // block id: 1035
            var_1714071481570_1038 /= Float64((Int32(var_1714071481570_1041)) | 1);
            Int64(116) + Int64(-21)
        } else { // block id: 1048
            var_1714071481570_237;
            ();
            var_1714071481570_908
        })
    }
;
    public open override func func_1714071481570_670(namedParam_1714071481570_671 ! : UInt16, namedParam_1714071481570_672 ! : Array<VArray<Float64, $2>>, namedParam_1714071481570_673 ! : Float64, namedParam_1714071481570_674 ! : UInt16) : Range<UInt32> { // block id: 675
        const var_1714071481570_735 : UInt32 = 146;
        let var_1714071481570_747 : Bool = (UInt32(185) is (Class_1714071481570_5, Rune, Int8, Bool));
        const var_1714071481570_758 : Int = 17;
        if (match ((Int32(-10), var_1714071481570_237, var_1714071481570_683, Int32(-16), var_1714071481570_687)[4]) {
            case caseVar_1714071481570_692 : Range<Int32> => 
                UInt16(207) <= UInt16(56)
            
            case _ => 
                Int16(-120) != Int16(-58)
            
            case caseVar_1714071481570_705 : Array<VArray<Float64, $2>> => 
                var_1714071481570_250 = UInt64(100);
                var_1714071481570_711;
                let var_1714071481570_718 : Bool = false;
                var_1714071481570_718
            
            case _ => 
                ();
                let var_1714071481570_725 : Bool = ((Float64(Float64(5.0)), Int8(-50), ((UInt8(UInt8(200))&127)..=(UInt8(UInt8(194))&127):(Int64(-51)|1))) is (VArray<Float64, $2>, UInt32, (Float64, Int8, Range<UInt8>)) -> Interface_1714071481570_9);
                var_1714071481570_725
            
        }) { ((UInt32(UInt32(132))&127)..(UInt32(UInt32(39))&127):(Int64(-17)|1)) } else { ((UInt32(var_1714071481570_735)&127)..=(UInt32((Option<UInt32>.Some(var_1714071481570_735) ?? UInt32(230)))&127):(if (var_1714071481570_747) { // block id: 750
            -Int64(114)
        } else if (var_1714071481570_747) { // block id: 754
            Int64(108) ^ var_1714071481570_758
        } else { // block id: 760
            var_1714071481570_758
        }|1)) } 
    }
;
    public open override func func_1714071481570_670() : Unit { // block id: 941

    }

    public func isClosed(): Bool { return true }
    public func close(): Unit {}
}



public struct Struct_1714071481570_271 {
    public init() { // block id: 273

    }
;
    public static let var_1714071481570_276 : Bool = false
}

public const func func_1714071481570_308<T0>(param_1714071481570_309 : UInt64) : Unit { // block id: 310
    const var_1714071481570_312 : Unit = ();
    var_1714071481570_312;
    46;
    ()
}

public open class Class_1714071481570_364 <: Class_1714071481570_5 {
    public init() { // block id: 366

    }
;
    static let var_1714071481570_507 : Bool = false;
    public open override func func_1714071481570_945() : Int64 { // block id: 946
        let var_1714071481570_1031 : ?Bool = (r'0' as Bool);
        var var_1714071481570_1038 : Float64 = Float64(-17.0);
        (var_1714071481570_951[0] ?? if ((var_1714071481570_1031 ?? false)) { // block id: 1035
            var_1714071481570_1038 /= Float64((Int32(var_1714071481570_1041)) | 1);
            Int64(116) + Int64(-21)
        } else { // block id: 1048
            var_1714071481570_237;
            ();
            var_1714071481570_908
        })
    }
;
    public open override func func_1714071481570_670(namedParam_1714071481570_671 ! : UInt16, namedParam_1714071481570_672 ! : Array<VArray<Float64, $2>>, namedParam_1714071481570_673 ! : Float64, namedParam_1714071481570_674 ! : UInt16) : Range<UInt32> { // block id: 675
        const var_1714071481570_735 : UInt32 = 146;
        let var_1714071481570_747 : Bool = (UInt32(185) is (Class_1714071481570_5, Rune, Int8, Bool));
        const var_1714071481570_758 : Int = 17;
        if (match ((Int32(-10), var_1714071481570_237, var_1714071481570_683, Int32(-16), var_1714071481570_687)[4]) {
            case caseVar_1714071481570_692 : Range<Int32> => 
                UInt16(207) <= UInt16(56)
            
            case _ => 
                Int16(-120) != Int16(-58)
            
            case caseVar_1714071481570_705 : Array<VArray<Float64, $2>> => 
                var_1714071481570_250 = UInt64(100);
                var_1714071481570_711;
                let var_1714071481570_718 : Bool = false;
                var_1714071481570_718
            
            case _ => 
                ();
                let var_1714071481570_725 : Bool = ((Float64(Float64(5.0)), Int8(-50), ((UInt8(UInt8(200))&127)..=(UInt8(UInt8(194))&127):(Int64(-51)|1))) is (VArray<Float64, $2>, UInt32, (Float64, Int8, Range<UInt8>)) -> Interface_1714071481570_9);
                var_1714071481570_725
            
        }) { ((UInt32(UInt32(132))&127)..(UInt32(UInt32(39))&127):(Int64(-17)|1)) } else { ((UInt32(var_1714071481570_735)&127)..=(UInt32((Option<UInt32>.Some(var_1714071481570_735) ?? UInt32(230)))&127):(if (var_1714071481570_747) { // block id: 750
            -Int64(114)
        } else if (var_1714071481570_747) { // block id: 754
            Int64(108) ^ var_1714071481570_758
        } else { // block id: 760
            var_1714071481570_758
        }|1)) } 
    }
;
    public open override func func_1714071481570_670() : Unit { // block id: 941

    }

}


public const func func_1714071481570_486() : Int32 { // block id: 487
    var_1714071481570_489;
    ();
    97 - -116
}

public func func_1714071481570_500(param_1714071481570_501 : Array<UInt64>) : Class_1714071481570_5 { // block id: 502
    var loopTimeVar_1714071481570_510 : Range<UInt64> = ((UInt64(UInt64(243))&127)..(UInt64(UInt64(UInt8(UInt8(48))))&127):(Int64(UInt32(UInt16(UInt8(110))))|1));
    for (i in loopTimeVar_1714071481570_510 where Class_1714071481570_364.var_1714071481570_507) {

    };
    Class_1714071481570_5()
}

public func func_1714071481570_327(param_1714071481570_328 : Range<UInt8>) : Class_1714071481570_5 { // block id: 329
    var var_1714071481570_458 : Bool = (Struct_1714071481570_271() is (Float64, Int8, Range<UInt8>));
    var var_1714071481570_464 : Int16 = Int16(Int8(UInt8(202)));
    const func func_1714071481570_471() : Unit { // block id: 472
        const func func_1714071481570_475(namedParam_1714071481570_476 ! : Int32, optionalParam_1714071481570_477 ! : Int16 = 117, optionalParam_1714071481570_479 ! : String = """
&+k.8
OkBju
""") : UInt64 { // block id: 481
            var_1714071481570_483
        }
;
        func_1714071481570_308<String>(func_1714071481570_475(namedParam_1714071481570_476 : func_1714071481570_486(), optionalParam_1714071481570_479 : """
O\"mP2
K/|)&
"""));
        func_1714071481570_308<String>(var_1714071481570_483);
        var_1714071481570_489
    }
;
    try { // block id: 331
        ();
        let var_1714071481570_336 : (Class_1714071481570_5, UInt64, UInt8, (Int32, Unit, Interface_1714071481570_8, Int32, String), Class_1714071481570_5, UInt64, VArray<Float64, $2>) = (Class_1714071481570_5(), UInt64(38), UInt8(Int8(Int8(UInt8(187)))), (Int32(Int8(-101)), (), Class_1714071481570_5(namedParam_1714071481570_356 : Float64(-48.0), namedParam_1714071481570_357 : ((Int8(Int8(103))&127)..(Int8(Int8(2))&127):(Int64(-89)|1))), Int32(2), ###"rtw,:WE*l#"###), Class_1714071481570_5(), UInt64(200), VArray<Float64, $2>({ i => Float64(111.0)}));
        var_1714071481570_336[4]
    } catch (_) { // block id: 436
        VArray<Unit, $8>({ i => ()})[1];
        var_1714071481570_53
    } finally { // block id: 450
        let var_1714071481570_453 : Bool = false;
        var loopTimeVar_1714071481570_469 : Int64 = 0;
        while ((var_1714071481570_453) && loopTimeVar_1714071481570_469 < 100 ) {
            loopTimeVar_1714071481570_469++;
            var_1714071481570_458 ||= true;
            var_1714071481570_464++
        };
        func_1714071481570_471();
        [UInt64(34), var_1714071481570_483, var_1714071481570_250, UInt64(51), var_1714071481570_483, var_1714071481570_483, UInt64(198), UInt64(156), UInt64(14), var_1714071481570_542]|>func_1714071481570_500
    }
}

public func func_1714071481570_304<T0, T1>(param_1714071481570_305 : Float64) : Interface_1714071481570_9 { // block id: 306
    func func_1714071481570_323(param_1714071481570_324 : Interface_1714071481570_10) : Class_1714071481570_5 { // block id: 325
        ((UInt8(UInt8(141))&127)..=(UInt8(UInt8(104))&127):(Int64(73)|1))|>func_1714071481570_327
    }
;
    UInt64(var_1714071481570_589)|>{ lambdaParameter_1714071481570_318 : UInt64 => func_1714071481570_323(Class_1714071481570_364()).var_1714071481570_548-- };
    var var_1714071481570_593 : Bool = true;
    var loopTimeVar_1714071481570_597 : Int64 = 0;
    do {
        loopTimeVar_1714071481570_597++;

    } while ((var_1714071481570_593) && loopTimeVar_1714071481570_597 < 100 ) ;
    Class_1714071481570_364()
}

public func func_1714071481570_148(namedParam_1714071481570_149 ! : VArray<Float64, $2>, optionalParam_1714071481570_150 ! : UInt32 = UInt32(208), namedParam_1714071481570_152 ! : (Float64, Int8, Range<UInt8>)) : Interface_1714071481570_9 { // block id: 153
    let var_1714071481570_189 : Bool = false;
    var var_1714071481570_213 : Interface_1714071481570_9 = Class_1714071481570_5();
    let var_1714071481570_245 : UInt64 = UInt64(21);
    var var_1714071481570_259 : UInt32 = UInt32(198);
    if (match (if (true) { // block id: 158
        var var_1714071481570_165 : Byte = UInt8(Int8(-104));
        (Float64(18.0), var_1714071481570_33, ((UInt8(UInt8(79))&127)..=(UInt8(var_1714071481570_165)&127):(Int64(45)|1)));
        var var_1714071481570_172 : Rune = r'l';
        (var_1714071481570_53, var_1714071481570_172, Int8(-111), false);
        const var_1714071481570_178 : Bool = true;
        if (var_1714071481570_178) { ((UInt8(UInt8(228))&127)..=(UInt8(var_1714071481570_165)&127):(Int64(-67)|1)) } else { ((UInt8(var_1714071481570_165)&127)..(UInt8(UInt8(247))&127):(Int64(67)|1)) } 
    } else if (var_1714071481570_189) { // block id: 191
        ((UInt8(UInt8(94))&127)..(UInt8(UInt8(40))&127):(Int64(32)|1))
    } else { // block id: 193
        var_1714071481570_133
    }) {
        case _ : Float32 => 
            var var_1714071481570_200 : Int32 = Int32(60);
            var_1714071481570_200 += var_1714071481570_200;
            true
        
        case caseVar_1714071481570_206 : Unit => 
            var_1714071481570_189
        
        case _ => 
            var_1714071481570_213;
            let var_1714071481570_216 : Unit = ();
            var_1714071481570_216;
            var_1714071481570_189
        
    }) { // block id: 219
        var_1714071481570_53.var_1714071481570_223;
        try (resource = Class_1714071481570_5()) { // block id: 230
            (var_1714071481570_53, r'h', Int8(-110), true);
            var_1714071481570_237
        } catch (_) { // block id: 239
            ()
        } finally { // block id: 241
            [UInt64(160), var_1714071481570_245, UInt64(139), var_1714071481570_245, var_1714071481570_250, var_1714071481570_245, UInt64(211), UInt64(201), var_1714071481570_250, var_1714071481570_245];
            var_1714071481570_259 /= ((UInt32(31)) | 1)
        }
    };
    let var_1714071481570_281 : Int32 = Int32(UInt8(UInt8(208)));
    let var_1714071481570_299 : Int64 = Int64(126);
    let var_1714071481570_600 : (Float64) -> Interface_1714071481570_9 = func_1714071481570_304<Range<Int64>, Int64>;
    func func_1714071481570_263(param_1714071481570_264 : VArray<Float64, $2>) : Interface_1714071481570_9 { // block id: 265
        UInt64(UInt16(100));
        const var_1714071481570_290 : UInt32 = 8;
        if (Struct_1714071481570_271.var_1714071481570_276) { // block id: 278
            ((Int32(var_1714071481570_281)&127)..(Int32(var_1714071481570_281)&127):(Int64(76)|1));
            UInt32(163) + var_1714071481570_290;
            const var_1714071481570_293 : Int64 = 20;
            var_1714071481570_293
        } else { // block id: 295
            var_1714071481570_237;
            ((UInt64(UInt64(22))&127)..=(UInt64(UInt64(226))&127):(Int64(112)|1));
            var_1714071481570_299
        } * Int64(var_1714071481570_290);
        const var_1714071481570_618 : Float64 = -120.0;
        match (try { // block id: 604
            true
        } finally { // block id: 606
            var_1714071481570_299 >= Int64(-83)
        }) {
            case false => 
                Float64(124.0)
            
            case _ : (Int32, Unit, Interface_1714071481570_8, Int32, String) => 
                var_1714071481570_618
            
            case _ => 
                ();
                var_1714071481570_618
            
        }|>var_1714071481570_600
    }
;
    let var_1714071481570_636 : VArray<Float64, $2> = [Float64(119.0), Float64(-125.0)];
    func_1714071481570_263([var_1714071481570_629, var_1714071481570_636, var_1714071481570_636, var_1714071481570_629, var_1714071481570_636, var_1714071481570_636, var_1714071481570_636, VArray<Float64, $2>({ i => Float64(53.0)}), var_1714071481570_636, var_1714071481570_629][4])
}


main(): Int64 {
    try {
        func func_1714071481570_12(param_1714071481570_13 : UInt64, param_1714071481570_14 : Int64, param_1714071481570_15 : Interface_1714071481570_10) : Class_1714071481570_5 { // block id: 16
            var var_1714071481570_25 : Float32 = Float32(Float32(60.0));
            let var_1714071481570_40 : (Class_1714071481570_5, Rune, Int8, Bool) = (Class_1714071481570_5(), r'w', Int8(UInt8(167)), (UInt32(UInt16(UInt16(148))) is Interface_1714071481570_8));
            var var_1714071481570_73 : (Int32, Unit, Interface_1714071481570_8, Int32, String) = (Int32(-17), (), Class_1714071481570_5(), Int32(10), "]u:AP[Z+^9");
            var var_1714071481570_858 : Bool = ([VArray<Float64, $2>(repeat: Float64(Float64(26.0))), VArray<Float64, $2>({ i => Float64(-113.0)}), VArray<Float64, $2>(repeat: Float64(Float64(-68.0))), VArray<Float64, $2>({ i => Float64(41.0)}), VArray<Float64, $2>({ i => Float64(-10.0)}), VArray<Float64, $2>(repeat: Float64(Float64(-52.0))), VArray<Float64, $2>(repeat: Float64(Float32(-24.0))), VArray<Float64, $2>(repeat: Float64(Float32(-85.0))), VArray<Float64, $2>(repeat: Float64(Float64(90.0))), VArray<Float64, $2>(repeat: Float64(73.0))] is (UInt16, Rune, Int32, Range<Int32>, UInt64, Range<UInt64>, Unit, Int32, Range<Int16>));
            if (try { // block id: 21
                UInt32(81);
                var_1714071481570_25 += var_1714071481570_25;
                (Class_1714071481570_5(), r'K', var_1714071481570_33, false)
            } catch (e: Exception) { // block id: 36
                UInt64(56);
                ();
                var_1714071481570_40
            } finally { // block id: 50
                let var_1714071481570_56 : Rune = r'3';
                (var_1714071481570_53, var_1714071481570_56, var_1714071481570_33, false)
            }[3]) { // block id: 61
                (Option<Bool>.Some(true) ?? true);
                var_1714071481570_73[4]
            } else { // block id: 81
                try { // block id: 83
                    Class_1714071481570_5()
                } finally { // block id: 85
                    const var_1714071481570_846 : UInt32 = 64;
                    Class_1714071481570_5(var_1714071481570_846)
                };
                try { // block id: 849
                    var_1714071481570_687
                } catch (_) { // block id: 851
                    var_1714071481570_237;
                    var_1714071481570_25 -= var_1714071481570_25;
                    if (var_1714071481570_858) { "FI,gsyEY\\+" } else { var_1714071481570_687 } 
                }
            };
            Class_1714071481570_364()
        }
;
        let var_1714071481570_914 : (Struct_1714071481570_271, Interface_1714071481570_9, Class_1714071481570_364, Interface_1714071481570_10, (Int32, Unit, Interface_1714071481570_8, Int32, String), UInt16) = (Struct_1714071481570_271(), Class_1714071481570_364(), Class_1714071481570_364(), Class_1714071481570_5(namedParam_1714071481570_356 : Float64(Float32(24.0)), namedParam_1714071481570_357 : ((Int8(Int8(Int8(123)))&127)..=(Int8(Int8(-113))&127):(Int64(69)|1))), (Int32(Int32(Int16(99))), (), Class_1714071481570_364(), Int32(-25), ###"@?\"& <X7Fx"###), UInt16(UInt8(Int8(-49))));
        func_1714071481570_12(UInt64(7), var_1714071481570_908, var_1714071481570_914[3]).func_1714071481570_670();
        var_1714071481570_53.func_1714071481570_945()
        // CRC Check All Variables
        var crcCheck = CrcCheck(5000, 32)
        crcCheck.updateBuffer(UInt64(var_1714071481570_33*var_1714071481570_33), 64)
        crcCheck.updateBuffer(UInt64(var_1714071481570_250*var_1714071481570_250), 64)
        crcCheck.updateBuffer(UInt64(var_1714071481570_406*var_1714071481570_406), 64)
        crcCheck.updateBuffer(UInt64(var_1714071481570_483*var_1714071481570_483), 64)
        crcCheck.updateBuffer(UInt64(var_1714071481570_542*var_1714071481570_542), 64)
        crcCheck.updateBuffer(UInt64(var_1714071481570_589*var_1714071481570_589), 64)
        crcCheck.updateBuffer(UInt64(var_1714071481570_711*var_1714071481570_711), 64)
        crcCheck.updateBuffer(UInt64(var_1714071481570_908*var_1714071481570_908), 64)
        crcCheck.crcCheck()
        crcCheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[(i + buffer_index) % buffer.size] = byteArray[i + byte_index]
            i++
        }
        buffer_index = (buffer_index + i) % buffer.size
    }

    func updateBuffer(input: Bool, byte_n: Int64): Unit {
        if (input == true) {
            updateBuffer(1, byte_n)
        } else {
            updateBuffer(0, byte_n)
        }
    }

    func updateBuffer(input: Rune, byte_n: Int64): Unit {
        updateBuffer(UInt64(UInt32(input)), byte_n)
    }

    func updateBuffer(input: String, byte_n: Int64): Unit {
        for (c in input) {
            updateBuffer(c, byte_n)
        }
    }

    func updateBuffer(input: Unit, byte_n: Int64): Unit {
        updateBuffer(input.toString(), byte_n)
    }

    func updateBuffer(input: Any, byte_n: Int64) : Unit {
        if (input is Hashable) {
            match(input as Hashable) {
                case Some(v) => updateBuffer(UInt64(v.hashCode()), byte_n)
                case _=> updateBuffer(1, byte_n)
            }
            
        } else if (input is ToString) {
            match(input as ToString) {
                case Some(v) => updateBuffer(v.toString(), byte_n)
                case _=> updateBuffer(1, byte_n)
            }
        } else {
            updateBuffer(1, byte_n)
        }
    }     
    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}

extend Struct_1714071481570_271 {

}
// ASSERT: scan-9 sema_varray_cjvm_in_ref_type
