/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// (CJNATIVE) EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// (CJNATIVE) RUN-EXEC: %run %run_opt %output %run_args
// (not CJNATIVE) ERRCHECK: %compiler %overflow_wrapping %f %cmp_opt

public let var_1711749266698_52 : Array<Bool> = [([false, true, true, true, false, false, false, false, false, true] is Unit), true, (Int32(Int8(Int8(96))) is Int64), true, false, false, (UInt32(Int16(57)) is Range<Int32>), false, true, false]
public const var_1711749266698_121 : Float32 = 47.0
public var var_1711749266698_128 : (Unit, Range<UInt8>) = ((), ((UInt8(UInt8(170))&127)..(UInt8(UInt8(153))&127):(Int64(100)|1)))
var var_1711749266698_144 : UInt16 = UInt16(200)
const var_1711749266698_149 : Int64 = 8
public const var_1711749266698_164 : Int = 101
public var var_1711749266698_182 : Range<UInt16> = ((UInt16(UInt16(60))&127)..=(UInt16(UInt16(97))&127):(Int64(Int16(100))|1))
var var_1711749266698_198 : UInt = UInt64(45)
const var_1711749266698_279 : Bool = false
let var_1711749266698_283 : Unit = ()
public let var_1711749266698_305 : VArray<UInt64, $8> = [UInt64(UInt8(Int8(UInt8(174)))), UInt64(UInt64(Int8(-103))), UInt64(Int32(Int32(-107))), UInt64(177), UInt64(Int32(-97)), UInt64(UInt64(224)), UInt64(41), UInt64(254)]
public let var_1711749266698_328 : ?UInt16 = (UInt32(UInt32(84)) as UInt16)
public const var_1711749266698_340 : UInt16 = 68
const var_1711749266698_369 : UInt8 = 12
public var var_1711749266698_392 : Bool = ("pvaQ|]45Ws" is Option<UInt16>)
var var_1711749266698_400 : Float64 = Float64(-112.0)
var var_1711749266698_412 : Int16 = Int16(49)
const var_1711749266698_415 : Bool = false
let var_1711749266698_444 : (Interface_1711749266698_355, Float64, Option<Unit>, Unit, Rune) = (Class_1711749266698_352(), Float64(78.0), Option<Unit>.None, (), r'4')
let var_1711749266698_528 : ?Unit = Option<Unit>.None
public let var_1711749266698_532 : Array<Option<Unit>> = [(Option<VArray<UInt64, $8>>.None as Unit), Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, (Float64(Float32(-53.0)) as Unit), Option<Unit>.None, (Int8(47) as Unit), ((Int8(-82) as Bool) as Unit), (Enum_1711749266698_81.enumValue_1711749266698_550(Float32(Float32(6.0)), "+QmeG\",q]j", ((UInt8(UInt8(83))&127)..(UInt8(UInt8(13))&127):(Int64(77)|1)), Option<Range<Int64>>.None) as Unit), Option<Unit>.None]
public var var_1711749266698_752 : ((Unit, Range<UInt8>), Float32, Array<Int64>, Bool) = (((), ((UInt8(UInt8(115))&127)..=(UInt8(UInt8(243))&127):(Int64(Int32(-99))|1))), Float32(88.0), [Int64(-65), Int64(-26), Int64(76), Int64(70), Int64(-67), Int64(5), Int64(-23), Int64(-40), Int64(-20), Int64(-4)], false)
let var_1711749266698_773 : ?Bool = Option<Bool>.None
public var var_1711749266698_860 : Array<Enum_1711749266698_81> = [Enum_1711749266698_81.enumValue_1711749266698_843, Enum_1711749266698_81.enumValue_1711749266698_843, Enum_1711749266698_81.enumValue_1711749266698_843, Enum_1711749266698_81.enumValue_1711749266698_843, Enum_1711749266698_81.enumValue_1711749266698_843, Enum_1711749266698_81.enumValue_1711749266698_843, Enum_1711749266698_81.enumValue_1711749266698_843, Enum_1711749266698_81.enumValue_1711749266698_843, Enum_1711749266698_81.enumValue_1711749266698_843, Enum_1711749266698_81.enumValue_1711749266698_843]
public const var_1711749266698_1035 : Unit = ()
let var_1711749266698_1043 : Range<UInt8> = ((UInt8(UInt8(238))&127)..=(UInt8(UInt8(49))&127):(Int64(-65)|1))
public let var_1711749266698_1077 : Array<Int64> = [Int64(Int8(12)), Int64(-82), Int64(UInt64(150)), Int64(33), Int64(UInt16(194)), Int64(-3), Int64(-71), Int64(108), Int64(33), Int64(Int16(-55))]
public let var_1711749266698_1100 : UInt = UInt64(48)
public enum Enum_1711749266698_81 {
    defaultValue |
    enumValue_1711749266698_86(Rune, UInt16, Range<UInt64>) |
    enumValue_1711749266698_550(Float32, String, Range<UInt8>, Option<Range<Int64>>) |
    enumValue_1711749266698_800(Array<Option<Unit>>) |
    enumValue_1711749266698_814((Unit, Range<UInt8>), Range<UInt16>, (VArray<UInt64, $8>, Range<UInt16>)) |
    enumValue_1711749266698_843
}



public interface Interface_1711749266698_355 {

}

public open class Class_1711749266698_352 <: Interface_1711749266698_355 {
    public init() { // block id: 354

    }
;
    static var var_1711749266698_358 : Range<UInt8>;
    public static const var_1711749266698_665 : Int32 = 85;
    public var var_1711749266698_1134 : (Float64, Enum_1711749266698_454, Array<Bool>, Range<UInt64>, (Array<Option<Unit>>, Int8, Option<VArray<UInt64, $8>>, Array<Option<Unit>>, Bool, Option<Unit>, (Int32, Range<Int64>, Option<Unit>, Range<Int8>, Array<Option<Unit>>, (Unit, Range<UInt8>)), (Int32, Option<VArray<UInt64, $8>>, Rune, UInt64, Array<Int64>), Option<Range<Int64>>), Array<Int64>, Option<(Int32, Option<VArray<UInt64, $8>>, Rune, UInt64, Array<Int64>)>, Float32) = (Float64(109.0), Enum_1711749266698_454.enumValue_1711749266698_459, [true, true, true, false, false, false, true, false, true, false], ((UInt64(UInt64(85))&127)..=(UInt64(UInt64(54))&127):(Int64(-44)|1)), ([Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None], Int8(-98), Option<VArray<UInt64, $8>>.None, [Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None], false, Option<Unit>.None, (Int32(-82), ((Int64(Int64(3))&127)..=(Int64(Int64(38))&127):(Int64(69)|1)), Option<Unit>.None, ((Int8(Int8(73))&127)..=(Int8(Int8(81))&127):(Int64(-27)|1)), [Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None], ((), ((UInt8(UInt8(92))&127)..(UInt8(UInt8(128))&127):(Int64(3)|1)))), (Int32(-54), Option<VArray<UInt64, $8>>.None, r'D', UInt64(57), [Int64(50), Int64(123), Int64(-44), Int64(-104), Int64(-112), Int64(106), Int64(-38), Int64(-8), Int64(46), Int64(-54)]), Option<Range<Int64>>.None), [Int64(2), Int64(-41), Int64(22), Int64(6), Int64(-77), Int64(-89), Int64(42), Int64(-44), Int64(-127), Int64(-17)], Option<(Int32, Option<VArray<UInt64, $8>>, Rune, UInt64, Array<Int64>)>.None, Float32(115.0));
    public open func func_1711749266698_576() : Unit { // block id: 1127
        var loopTimeVar_1711749266698_1230 : Array<UInt64> = [UInt64(UInt32(UInt16(Int8(-23)))), UInt64(Int16(UInt8(Int8(-33)))), UInt64(140), UInt64(183), UInt64(UInt32(76)), UInt64(Int32(-70)), UInt64(19), UInt64(UInt64(211)), UInt64(Int64(-89)), UInt64(224)];
        for (i in loopTimeVar_1711749266698_1230 where var_1711749266698_1134[4][4]) {
            var_1711749266698_283;
            (var_1711749266698_128, var_1711749266698_121, [var_1711749266698_164, Int64(29), Int64(68), var_1711749266698_164, var_1711749266698_149, Int64(22), Int64(96), var_1711749266698_149, var_1711749266698_164, Int64(12)], var_1711749266698_279)[3]
        }
    }

    static init() {
        var_1711749266698_358 = ((UInt8(UInt8(224))&127)..(UInt8(UInt8(191))&127):(Int64(70)|1))
    }
}



public enum Enum_1711749266698_454 {
    defaultValue |
    enumValue_1711749266698_459
}
public interface Interface_1711749266698_473 {

}

public open class Class_1711749266698_470<T0, T1> <: Class_1711749266698_352 & Interface_1711749266698_355 & Interface_1711749266698_473 {
    public init() { // block id: 472

    }
;
    public init(optionalParam_1711749266698_478 ! : Option<Range<Int64>> = Option<Range<Int64>>.Some(((Int64(Int64(-16))&127)..=(Int64(Int64(27))&127):(Int64(-35)|1))), namedParam_1711749266698_484 ! : Float64, optionalParam_1711749266698_485 ! : (VArray<UInt64, $8>, Range<UInt16>) = (VArray<UInt64, $8>(repeat: UInt64(Int32(-75))), ((UInt16(UInt16(23))&127)..(UInt16(UInt16(Int8(-57)))&127):(Int64(UInt8(UInt8(191)))|1))), optionalParam_1711749266698_510 ! : Int16 = Int16(UInt16(233))) { // block id: 513
        let var_1711749266698_521 : Int32 = Int32(83);
        let var_1711749266698_572 : Class_1711749266698_568 = Class_1711749266698_568();
        ((var_1711749266698_521, ((Int64(var_1711749266698_164)&127)..(Int64(var_1711749266698_149)&127):(var_1711749266698_149|1)), var_1711749266698_528, ((Int8(Int8(-92))&127)..=(Int8(Int8(76))&127):(Int64(-24)|1)), var_1711749266698_532, var_1711749266698_128)[4][2] ?? var_1711749266698_572.func_1711749266698_576());
        match (Option<Bool>.Some((var_1711749266698_773 ?? false))) {
            case _ : Range<UInt32> => 
                var_1711749266698_392 ||= true;
                var_1711749266698_283
            
            case _ => 
                var_1711749266698_144 -= UInt16(144)
            
        }
    }
;
    prop var_1711749266698_792 : (Range<Int64>, Array<Enum_1711749266698_81>, Interface_1711749266698_355, Float64, Int16) { // block id: 793
        get() { // block id: 795
            (((Int64(Int64(2))&127)..=(Int64(Int64(101))&127):(Int64(69)|1)), [Enum_1711749266698_81.enumValue_1711749266698_800([Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None]), Enum_1711749266698_81.enumValue_1711749266698_814(((), ((UInt8(UInt8(241))&127)..=(UInt8(UInt8(239))&127):(Int64(72)|1))), ((UInt16(UInt16(100))&127)..=(UInt16(UInt16(73))&127):(Int64(-86)|1)), (VArray<UInt64, $8>({ i => UInt64(170)}), ((UInt16(UInt16(64))&127)..(UInt16(UInt16(36))&127):(Int64(-19)|1)))), Enum_1711749266698_81.enumValue_1711749266698_843, Enum_1711749266698_81.enumValue_1711749266698_843, Enum_1711749266698_81.enumValue_1711749266698_843, Enum_1711749266698_81.enumValue_1711749266698_843, Enum_1711749266698_81.enumValue_1711749266698_843, Enum_1711749266698_81.enumValue_1711749266698_843, Enum_1711749266698_81.enumValue_1711749266698_843, Enum_1711749266698_81.enumValue_1711749266698_843], Class_1711749266698_352(), Float64(Float64(Float32(107.0))), Int16(-23))
        }

    }
}

public open class Class_1711749266698_568 <: Class_1711749266698_352 & Interface_1711749266698_473 & Interface_1711749266698_355 {
    public init() { // block id: 570

    }
;
    protected let var_1711749266698_668 : Option<VArray<UInt64, $8>> = Option<VArray<UInt64, $8>>.None;
    static var var_1711749266698_671 : Rune = r'U';
    public override func func_1711749266698_576() : Unit { // block id: 577
        var var_1711749266698_588 : Array<Option<(Int32, Option<VArray<UInt64, $8>>, Rune, UInt64, Array<Int64>)>> = [(Option<Range<Int64>>.None as (Int32, Option<VArray<UInt64, $8>>, Rune, UInt64, Array<Int64>)), Option<(Int32, Option<VArray<UInt64, $8>>, Rune, UInt64, Array<Int64>)>.None, ([UInt64(81), UInt64(54), UInt64(UInt16(169)), UInt64(34), UInt64(39), UInt64(UInt64(250)), UInt64(Int8(-114)), UInt64(UInt32(79)), UInt64(UInt64(226)), UInt64(208)] as (Int32, Option<VArray<UInt64, $8>>, Rune, UInt64, Array<Int64>)), ((((), ((UInt8(UInt8(10))&127)..=(UInt8(UInt8(51))&127):(Int64(82)|1))) as (Int32, Option<VArray<UInt64, $8>>, Rune, UInt64, Array<Int64>)) as (Int32, Option<VArray<UInt64, $8>>, Rune, UInt64, Array<Int64>)), Option<(Int32, Option<VArray<UInt64, $8>>, Rune, UInt64, Array<Int64>)>.Some((Int32(-101), Option<VArray<UInt64, $8>>.None, r'a', UInt64(237), [Int64(62), Int64(79), Int64(77), Int64(3), Int64(-45), Int64(-85), Int64(-67), Int64(88), Int64(-119), Int64(-92)])), (((UInt64(UInt64(Int8(-53)))&127)..(UInt64(UInt64(88))&127):(Int64(76)|1)) as (Int32, Option<VArray<UInt64, $8>>, Rune, UInt64, Array<Int64>)), ([Int64(Int16(-70)), Int64(67), Int64(UInt32(165)), Int64(-128), Int64(-54), Int64(57), Int64(Int64(-97)), Int64(UInt8(106)), Int64(-112), Int64(-98)] as (Int32, Option<VArray<UInt64, $8>>, Rune, UInt64, Array<Int64>)), (Int8(-2) as (Int32, Option<VArray<UInt64, $8>>, Rune, UInt64, Array<Int64>)), (UInt32(UInt16(Int16(-28))) as (Int32, Option<VArray<UInt64, $8>>, Rune, UInt64, Array<Int64>)), (UInt32(157) as (Int32, Option<VArray<UInt64, $8>>, Rune, UInt64, Array<Int64>))];
        (var_1711749266698_588[3] ?? (var_1711749266698_665, var_1711749266698_668, var_1711749266698_671, UInt64(129), [var_1711749266698_164, Int64(77), Int64(0), Int64(71), Int64(103), var_1711749266698_164, var_1711749266698_149, Int64(27), Int64(52), Int64(-77)]))[2];
        let var_1711749266698_697 : Struct_1711749266698_693 = Struct_1711749266698_693();
        match ((var_1711749266698_697.var_1711749266698_700 ?? var_1711749266698_697.var_1711749266698_705)) {
            case (_,_) => 
                var_1711749266698_412
            
            case (caseVar_1711749266698_726 : Option<(VArray<UInt64, $8>, Range<UInt16>)>,_ : VArray<UInt64, $8>) => 
                Option<VArray<UInt64, $8>>.Some(VArray<UInt64, $8>({ i => UInt64(142)}));
                var_1711749266698_412
            
            case (_,caseVar_1711749266698_741) => 
                var_1711749266698_412
            
            case _ => 
                Int16(17)
            
        };
        var loopTimeVar_1711749266698_768 : Int64 = 0;
        while ((var_1711749266698_752[3]) && loopTimeVar_1711749266698_768 < 100 ) {
            loopTimeVar_1711749266698_768++;
            UInt64(227)
        }
    }

}



public struct Struct_1711749266698_693 {
    public init() { // block id: 695

    }
;
    public let var_1711749266698_700 : ?(VArray<UInt64, $8>, Range<UInt16>) = Option<(VArray<UInt64, $8>, Range<UInt16>)>.None;
    let var_1711749266698_705 : (VArray<UInt64, $8>, Range<UInt16>) = (VArray<UInt64, $8>({ i => UInt64(183)}), ((UInt16(UInt16(31))&127)..(UInt16(UInt16(166))&127):(Int64(-11)|1)))
}

func func_1711749266698_236(param_1711749266698_237 : Range<Int64>) : Array<Enum_1711749266698_81> { // block id: 238
    let var_1711749266698_247 : Range<Int16> = ((Int16(Int16(26))&127)..(Int16(Int16(-104))&127):(Int64(47)|1));
    const var_1711749266698_272 : Int32 = 56;
    (if (match (var_1711749266698_247) {
        case _ : (Unit, Range<UInt8>) => 
            var var_1711749266698_254 : Byte = UInt8(125);
            [var_1711749266698_254, UInt8(182), UInt8(180), var_1711749266698_254, UInt8(187), UInt8(101), var_1711749266698_254, UInt8(185), UInt8(71), UInt8(75)];
            false
        
        case caseVar_1711749266698_268 => 
            var_1711749266698_272 <= Int32(108)
        
        case _ => 
            var_1711749266698_279
        
    }) { // block id: 281
        var_1711749266698_283;
        Option<UInt16>.Some(var_1711749266698_144)
    } else { // block id: 287
        let var_1711749266698_292 : UInt = UInt64(Int64(UInt8(Int8(90))));
        if (false) { VArray<UInt64, $8>(repeat: var_1711749266698_292) } else { var_1711749266698_305 } ;
        UInt32(228);
        if (false) { var_1711749266698_328 } else { Option<UInt16>.Some(UInt16(24)) } 
    } ?? (var_1711749266698_328 ?? if (true) { // block id: 338
        var_1711749266698_340
    } else { // block id: 342
        var_1711749266698_283;
        var_1711749266698_340
    }));
    const var_1711749266698_431 : String = "Q&ad5\\RS08";
    let var_1711749266698_475 : Class_1711749266698_470<Int8, Range<UInt8>> = Class_1711749266698_470<Int8, Range<UInt8>>(optionalParam_1711749266698_478 : Option<Range<Int64>>.None, namedParam_1711749266698_484 : Float64(109.0));
    func func_1711749266698_374(param_1711749266698_375 : UInt16, namedParam_1711749266698_376 ! : Float64) : Range<Int64> { // block id: 377
        let var_1711749266698_457 : Enum_1711749266698_454 = Enum_1711749266698_454.enumValue_1711749266698_459;
        if (false) { // block id: 380
            ();
            (Option<Unit>.None ?? ())
        } else if (if (if (var_1711749266698_392) { // block id: 395
            ((Int64(Int64(90))&127)..=(Int64(Int64(-47))&127):(Int64(-43)|1));
            Float64(-76.0) != var_1711749266698_400
        } else if (var_1711749266698_279) { // block id: 403
            var_1711749266698_272;
            ((UInt32(UInt32(215))&127)..=(UInt32(UInt32(177))&127):(var_1711749266698_164|1));
            false
        } else { // block id: 410
            var_1711749266698_412;
            var_1711749266698_415
        }) { // block id: 417
            var_1711749266698_392
        } else if ((Option<Bool>.Some(true) ?? true)) { // block id: 427
            if (false) { var_1711749266698_431 } else { var_1711749266698_431 } ;
            false
        } else { // block id: 435
            var_1711749266698_121 / Float32((Int32(Float32(-70.0))) | 1);
            true
        }) { // block id: 440
            var_1711749266698_444[3];
            Int32(2);
            match (var_1711749266698_457) {
                case _ => 
                    var_1711749266698_144 |= UInt16(38);
                    ()
                
            }
        };
        var_1711749266698_475.var_1711749266698_792[0]
    }
;
    (((Class_1711749266698_352.var_1711749266698_358) as Range<Int64>) ?? ((Option<Range<Int64>>.Some(((Int64(Int64(33))&127)..(Int64(Int64(5))&127):(Int64(-69)|1))), ((UInt16(UInt16(58))&127)..(UInt16(UInt16(99))&127):(Int64(-5)|1)), Class_1711749266698_352(), var_1711749266698_369, var_1711749266698_144)[0] ?? func_1711749266698_374(UInt16(253), namedParam_1711749266698_376 : var_1711749266698_400)));
    var_1711749266698_860
}



public func func_1711749266698_72(param_1711749266698_73 : Range<UInt8>) : Array<Int64> { // block id: 74
    let var_1711749266698_77 : Bool = true;
    const var_1711749266698_110 : UInt16 = 96;
    var loopTimeVar_1711749266698_124 : Int = 0;
    while ((var_1711749266698_77) && loopTimeVar_1711749266698_124 < 100 ) {
        loopTimeVar_1711749266698_124++;
        let var_1711749266698_84 : Enum_1711749266698_81 = Enum_1711749266698_81.enumValue_1711749266698_86(r'O', UInt16(127), ((UInt64(UInt64(53))&127)..=(UInt64(UInt64(100))&127):(Int64(79)|1)));
        var var_1711749266698_99 : Range<Int64> = ((Int64(Int64(UInt64(UInt16(Int16(37)))))&127)..=(Int64(Int64(-60))&127):(Int64(-78)|1));
        let var_1711749266698_118 : Unit = ();
        match (var_1711749266698_84) {
            case enumValue_1711749266698_86(_, _ : Bool, _) => 
                if (false) { var_1711749266698_99 } else { ((Int64(Int64(93))&127)..=(Int64(Int64(82))&127):(Int64(111)|1)) } ;
                var_1711749266698_110 + UInt16(242);
                Float32(125.0)
            
            case _ => 
                var_1711749266698_118;
                var_1711749266698_121
            
        }
    };
    var_1711749266698_128[0];
    const var_1711749266698_217 : Unit = ();
    let var_1711749266698_873 : (Range<Int64>) -> Array<Enum_1711749266698_81> = func_1711749266698_236;
    func func_1711749266698_175() : Array<Enum_1711749266698_81> { // block id: 176
        try { // block id: 178
            if (true) { var_1711749266698_182 } else { ((UInt16(UInt16(151))&127)..=(UInt16(UInt16(19))&127):(Int64(34)|1)) } 
        } catch (_) { // block id: 189
            (Option<VArray<UInt64, $8>>.Some(VArray<UInt64, $8>(repeat: var_1711749266698_198)) ?? VArray<UInt64, $8>(repeat: var_1711749266698_198));
            var_1711749266698_217;
            const var_1711749266698_228 : UInt64 = 65;
            (VArray<UInt64, $8>(repeat: var_1711749266698_198), ((UInt16(UInt16(165))&127)..=(UInt16(UInt16(149))&127):(Int64(101)|1)))[1]
        };
        var var_1711749266698_888 : Range<Int64> = ((Int64(Int64(-96))&127)..(Int64(Int64(-44))&127):(Int64(UInt16(9))|1));
        (try { // block id: 877
            Option<Range<Int64>>.None
        } catch (e: Exception) { // block id: 879
            var_1711749266698_752;
            var_1711749266698_217;
            Option<Range<Int64>>.Some(((Int64(Int64(-102))&127)..=(Int64(Int64(42))&127):(Int64(7)|1)))
        } ?? var_1711749266698_888)|>var_1711749266698_873
    }
;
    func func_1711749266698_169<T0>() : Int64 { // block id: 170
        let var_1711749266698_923 : Array<UInt8> = [UInt8(Int8(-9)), UInt8(UInt8(Int8(-105))), UInt8(93), UInt8(145), UInt8(UInt8(137)), UInt8(213), UInt8(Int8(UInt8(UInt8(92)))), UInt8(UInt8(216)), UInt8(Int8(Int8(Int8(3)))), UInt8(100)];
        match (func_1711749266698_175()[6]) {
            case defaultValue => 
                var_1711749266698_217;
                Option<UInt16>.None;
                var_1711749266698_164
            
            case caseVar_1711749266698_903 => 
                ();
                var_1711749266698_144++;
                Int64(-94)
            
            case defaultValue => 
                var_1711749266698_149
            
            case enumValue_1711749266698_800(_) => 
                Int64(-98)
            
            case _ => 
                if (false) { var_1711749266698_923 } else { [UInt8(60), UInt8(156), UInt8(203), UInt8(10), UInt8(174), UInt8(120), UInt8(4), UInt8(92), UInt8(67), UInt8(224)] } ;
                if (var_1711749266698_392) { var_1711749266698_773 } else { var_1711749266698_773 } ;
                var_1711749266698_149
            
        }
    }
;
    let var_1711749266698_961 : ?Int64 = (Option<(VArray<UInt64, $8>, Range<UInt16>)>.Some((VArray<UInt64, $8>({ i => UInt64(206)}), ((UInt16(UInt16(189))&127)..=(UInt16(UInt16(246))&127):(Int64(4)|1)))) as Int64);
    let var_1711749266698_989 : UInt32 = UInt32(UInt32(60));
    [try { // block id: 135
        var_1711749266698_110;
        var var_1711749266698_138 : Int64 = Int64(UInt32(105));
        var_1711749266698_138
    } catch (_) { // block id: 141
        var_1711749266698_144 %= ((var_1711749266698_144) | 1);
        var_1711749266698_149 | Int64(49)
    }, [Int64(-85), Int64(-95), Int64(-125), Int64(-6), Int64(-108), Int64(-65), Int64(-99), var_1711749266698_149, Int64(-53), var_1711749266698_164][4], Int64(123), func_1711749266698_169<Option<Bool>>(), (if (var_1711749266698_415) { Option<Int64>.None } else { var_1711749266698_961 }  ?? var_1711749266698_164 - Int64(-3)), Int64((Option<UInt32>.Some(var_1711749266698_989) ?? UInt32(0))), try { // block id: 994
        ();
        ();
        Int64(86)
    } catch (_) { // block id: 998
        var_1711749266698_283;
        var_1711749266698_217;
        Int64(-100)
    } finally { // block id: 1002
        const var_1711749266698_1005 : Int64 = 104;
        var var_1711749266698_1008 : Int64 = Int64(103);
        var_1711749266698_1005 | var_1711749266698_1008
    }, try { // block id: 1011
        -Int64(-78)
    } finally { // block id: 1014
        var_1711749266698_164 << ((Int64(28)) & 7)
    }, (Option<Int64>.None ?? var_1711749266698_149), var_1711749266698_164 * Int64(20)]
}


func func_1711749266698_45(param_1711749266698_46 : Array<UInt64>) : Array<Int64> { // block id: 47
    let var_1711749266698_1025 : (Range<UInt8>) -> Array<Int64> = func_1711749266698_72;
    let var_1711749266698_1029 : Class_1711749266698_470<Int8, Range<UInt8>> = Class_1711749266698_470<Int8, Range<UInt8>>();
    var var_1711749266698_1070 : ?Unit = (UInt32(UInt16(115)) as Unit);
    if (var_1711749266698_52[1]) { (match (var_1711749266698_1029) {
        case _ => 
            var_1711749266698_1035;
            var var_1711749266698_1039 : Int32 = Int32(-48);
            var_1711749266698_1039 &= var_1711749266698_1039;
            var_1711749266698_1043
        
        case _ => 
            ((UInt8(UInt8(152))&127)..=(UInt8(UInt8(62))&127):(var_1711749266698_149|1))
        
    }|>var_1711749266698_1025) } else { (([Option<Unit>.Some(var_1711749266698_1035), Option<Unit>.None, var_1711749266698_528, var_1711749266698_528, var_1711749266698_528, var_1711749266698_528, Option<Unit>.Some(()), Option<Unit>.None, var_1711749266698_1070, Option<Unit>.Some(())] as Array<Int64>) ?? var_1711749266698_1077) } 
}

main(): Int64 {
    try {
        let var_1711749266698_16 : Array<UInt8> = [UInt8(131), UInt8(174), UInt8(238), UInt8(31), UInt8(75), UInt8(232), UInt8(218), UInt8(2), UInt8(98), UInt8(169)];
        var_1711749266698_16[0];
        var var_1711749266698_24 : VArray<UInt64, $8> = [UInt64(244), UInt64(UInt16(120)), UInt64(161), UInt64(UInt16(197)), UInt64(UInt8(212)), UInt64(201), UInt64(Int8(38)), UInt64(UInt8(UInt8(UInt8(230))))];
        let var_1711749266698_1094 : (Array<UInt64>) -> Array<Int64> = func_1711749266698_45;
        ((Int64(Int64(var_1711749266698_24[0]))&127)..=(Int64(([var_1711749266698_198, var_1711749266698_198, var_1711749266698_1100, UInt64(66), UInt64(62), UInt64(191), var_1711749266698_198, UInt64(40), var_1711749266698_198, var_1711749266698_1100]|>var_1711749266698_1094)[9])&127):(try { // block id: 1111
            var_1711749266698_283;
            Int64(-75) | Int64(-20)
        } catch (_) { // block id: 1116
            var_1711749266698_144 &= var_1711749266698_144;
            Class_1711749266698_352();
            Int64(113)
        }|1));
        var_1711749266698_164
        // CRC Check All Variables
        var crcCheck = CrcCheck(5000, 32)
        crcCheck.updateBuffer(UInt64(var_1711749266698_144*var_1711749266698_144), 64)
        crcCheck.updateBuffer(UInt64(var_1711749266698_149*var_1711749266698_149), 64)
        crcCheck.updateBuffer(UInt64(var_1711749266698_164*var_1711749266698_164), 64)
        crcCheck.updateBuffer(UInt64(var_1711749266698_198*var_1711749266698_198), 64)
        crcCheck.updateBuffer(UInt64(var_1711749266698_340*var_1711749266698_340), 64)
        crcCheck.updateBuffer(UInt64(var_1711749266698_369*var_1711749266698_369), 64)
        crcCheck.updateBuffer(UInt64(var_1711749266698_412*var_1711749266698_412), 64)
        crcCheck.updateBuffer(UInt64(var_1711749266698_1100*var_1711749266698_1100), 64)
        crcCheck.crcCheck()
        crcCheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[(i + buffer_index) % buffer.size] = byteArray[i + byte_index]
            i++
        }
        buffer_index = (buffer_index + i) % buffer.size
    }

    func updateBuffer(input: Bool, byte_n: Int64): Unit {
        if (input == true) {
            updateBuffer(1, byte_n)
        } else {
            updateBuffer(0, byte_n)
        }
    }

    func updateBuffer(input: Rune, byte_n: Int64): Unit {
        updateBuffer(UInt64(UInt32(input)), byte_n)
    }

    func updateBuffer(input: String, byte_n: Int64): Unit {
        for (c in input) {
            updateBuffer(c, byte_n)
        }
    }

    func updateBuffer(input: Unit, byte_n: Int64): Unit {
        updateBuffer(input.toString(), byte_n)
    }

    func updateBuffer(input: Any, byte_n: Int64) : Unit {
        if (input is Hashable) {
            match(input as Hashable) {
                case Some(v) => updateBuffer(UInt64(v.hashCode()), byte_n)
                case _=> updateBuffer(1, byte_n)
            }
            
        } else if (input is ToString) {
            match(input as ToString) {
                case Some(v) => updateBuffer(v.toString(), byte_n)
                case _=> updateBuffer(1, byte_n)
            }
        } else {
            updateBuffer(1, byte_n)
        }
    }     
    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}

extend Enum_1711749266698_81 {

}

extend Class_1711749266698_568 {

}

extend Class_1711749266698_352 {

}
// ASSERT: scan-8 sema_varray_cjvm_in_ref_type

