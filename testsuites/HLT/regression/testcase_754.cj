/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args 

@Deprecated
public const var_1745856680495_6: Unit = ()
public var var_1745856680495_18: UInt = UInt64(UInt8(77))
var var_1745856680495_28: Option<String> = Option<String>.None
@Deprecated
public var var_1745856680495_37: String = "Um+a\\LvS4P"
public const var_1745856680495_56: Bool = true
public let var_1745856680495_68: Struct_1745856680495_64<Range<Int16>, String> = Struct_1745856680495_64<Range<Int16>, String>()
public const var_1745856680495_91: Int64 = 32
public let var_1745856680495_95: Int16 = Int16(Int16(UInt8(34)))
public var var_1745856680495_219: Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
@Deprecated
var var_1745856680495_257: Int16 = Int16(20)
public const var_1745856680495_395: UInt64 = 88
@Deprecated
internal var var_1745856680495_403: (Array<Struct_1745856680495_197>, Struct_1745856680495_197, Range<UInt16>) = ([Struct_1745856680495_197(),
        Struct_1745856680495_197(), Struct_1745856680495_197(), Struct_1745856680495_197(), Struct_1745856680495_197(),
        Struct_1745856680495_197(), Struct_1745856680495_197(), Struct_1745856680495_197(), Struct_1745856680495_197(),
        Struct_1745856680495_197()], Struct_1745856680495_197(), ((UInt16(UInt16(179)) & 127)..=(UInt16(UInt16(102)) &
        127) : (Int64(-100) | 1)))
internal let var_1745856680495_437: ?Option<Unit> = (Int16(Int16(-118)) as Option<Unit>)
@Deprecated
internal const var_1745856680495_473: Float32 = 93.0
const var_1745856680495_477: UInt8 = 36
@Deprecated
internal var var_1745856680495_490: Range<UInt16> = ((UInt16(UInt16(UInt8(UInt8(217)))) & 127)..(UInt16(UInt16(Int8(-117))) &
    127) : (Int64(117) | 1))
@Deprecated
var var_1745856680495_503: Int = Int64(124)
@Deprecated
internal var var_1745856680495_547: ?Option<Unit> = Option<Option<Unit>>.None
public let var_1745856680495_554: UInt16 = UInt16(UInt8(UInt8(225)))
@Deprecated
public var var_1745856680495_579: Bool = true
public var var_1745856680495_599: UInt32 = UInt32(UInt16(Int16(UInt16(Int8(-3)))))
@Deprecated
public var var_1745856680495_617: Int16 = Int16(Int8(Int8(-29)))
public var var_1745856680495_639: Bool = (((UInt8(UInt8(177)) & 127)..(UInt8(UInt8(160)) & 127) : (Int64(-109) | 1)) is Option<Float32>)

public struct Struct_1745856680495_64<T0, T1> {
    @Frozen
    public init() { // block id: 66

    }

    @Frozen
    private mut prop var_1745856680495_136: UInt8 { // block id: 137
        get() { // block id: 139
            Int32(UInt16(UInt16(253)));
            UInt8(Int8(UInt8(UInt8(31))))
        }
        set(Value) { // block id: 149
            ()
        }
    }
    func func_1745856680495_71(param_1745856680495_72: UInt16, namedParam_1745856680495_73!: Unit): Range<UInt32> { // block id: 74
        var var_1745856680495_87: Int32 = Int32(27);
        if ((if (var_1745856680495_56) { // block id: 79
            Int16(-128)
        } else if (var_1745856680495_56) { // block id: 82
            if (var_1745856680495_56) {
                ((Int32(var_1745856680495_87) & 127)..=(Int32(var_1745856680495_87) & 127) : (var_1745856680495_91 | 1))
            } else {
                ((Int32(Int32(32)) & 127)..=(Int32(Int32(-39)) & 127) : (Int64(75) | 1))
            };
            var_1745856680495_95
        } else { // block id: 99
            ((UInt64(var_1745856680495_18) & 127)..=(UInt64(UInt64(197)) & 127) : (var_1745856680495_91 | 1));
            let var_1745856680495_106: Float32 = Float32(-121.0);
            const var_1745856680495_116: Float32 = 33.0;
            VArray<Float32, $9>(repeat: var_1745856680495_106);
            var_1745856680495_95 ^ var_1745856680495_95
        } is Range<Int16>)) { // block id: 121
            VArray<Unit, $4>({i => ()})[1];
            var loopTimeVar_1745856680495_153: Array<UInt64> = [UInt64(Int8(Int8(UInt8(181)))),
                UInt64(UInt32(Int32(-15))), UInt64(UInt16(Int16(17))), UInt64(229), UInt64(Int64(-109)),
                UInt64(UInt16(155)), UInt64(25), UInt64(197), UInt64(Int32(Int16(0))), UInt64(237)];
            for (i in loopTimeVar_1745856680495_153 where var_1745856680495_56) {
                var_1745856680495_6;
                ((UInt8(var_1745856680495_136) & 127)..(UInt8(UInt8(40)) & 127) : (var_1745856680495_91 | 1))
            }
        };
        var loopTimeVar_1745856680495_180: Int = 0;
        while ((true) && loopTimeVar_1745856680495_180 < 100) {
            loopTimeVar_1745856680495_180++;
        };
        var var_1745856680495_520: (Unit) -> Range<UInt32> = func_1745856680495_182;
        var var_1745856680495_525: Class_1745856680495_450 = Class_1745856680495_450();
        const var_1745856680495_543: Int8 = -42;
        (var_1745856680495_525.var_1745856680495_528 ||= Int8(123) >= var_1745856680495_543) |> var_1745856680495_520
    };

    static const var_1745856680495_683: Int32 = -102
}

public struct Struct_1745856680495_197 {
    @Frozen
    public init() { // block id: 199

    }

    public static let var_1745856680495_378: Class_1745856680495_305<Int8, Range<UInt8>, Int8> = Class_1745856680495_305<Int8, Range<UInt8>, Int8>();

    @Frozen
    func func_1745856680495_420(param_1745856680495_421: Int16, param_1745856680495_422: Bool,
        optionalParam_1745856680495_423!: Bool = true,
        optionalParam_1745856680495_425!: Option<Option<Unit>> = Option<Option<Unit>>.None): UInt8 { // block id: 427
        var_1745856680495_257 >>= ((try { // block id: 432
            ();
            var_1745856680495_257
        } catch (_) { // block id: 435
            var_1745856680495_437;
            Int16(94)
        } << ((Int16(28)) & 7)) & 7)
        var var_1745856680495_454: Class_1745856680495_450 = Class_1745856680495_450();
        Float32((var_1745856680495_454.var_1745856680495_457 ?? match (Option<Struct_1745856680495_197>.None) {
            case caseVar_1745856680495_463 =>
                const var_1745856680495_467: Float32 = 103.0;
                -var_1745856680495_467

            case _ => var_1745856680495_473
        }));
        -var_1745856680495_477
    }
}

public interface Interface_1745856680495_308 {}

public interface Interface_1745856680495_309<T0, T1> {}

public open class Class_1745856680495_305<T0, T1, T2> <: Interface_1745856680495_308 & Interface_1745856680495_309<Range<UInt16>,
    Range<UInt16>> {
    public init() { // block id: 307

    }

    @Frozen
    public prop var_1745856680495_314: Array<Struct_1745856680495_197> { // block id: 315
        get() { // block id: 317
            [Struct_1745856680495_197(), Struct_1745856680495_197(), Struct_1745856680495_197(),
                Struct_1745856680495_197(), Struct_1745856680495_197(), Struct_1745856680495_197(),
                Struct_1745856680495_197(), Struct_1745856680495_197(), Struct_1745856680495_197(),
                Struct_1745856680495_197()]
        }
    }
    public var var_1745856680495_361: Byte = UInt8(226);
    public var var_1745856680495_457: Option<Float32> = Option<Float32>.None
    static init() {
    }
}

@Deprecated
func func_1745856680495_336(param_1745856680495_337: UInt64): Class_1745856680495_305<Int8, Range<UInt8>, Int8> { // block id: 338
    var var_1745856680495_350: ?Option<Unit> = ("""
JJAk8
y`hw+
""" as Option<Unit>);
    var var_1745856680495_358: Class_1745856680495_305<Int8, Range<UInt8>, Int8> = Class_1745856680495_305<Int8, Range<UInt8>, Int8>();
    let var_1745856680495_371: Byte = UInt8(Int8(Int8(76)));
    ((var_1745856680495_350 ?? (Int16(-86) as Unit)) ?? (var_1745856680495_358.var_1745856680495_361 += (Option<UInt8>
        .Some(UInt8(75)) ?? var_1745856680495_371)));
    Struct_1745856680495_197.var_1745856680495_378
}

@Frozen
internal func func_1745856680495_332<T0, T1>(param_1745856680495_333: Array<Unit>): Class_1745856680495_305<Int8, Range<UInt8>,
    Int8> { // block id: 334
    let var_1745856680495_384: Struct_1745856680495_197 = Struct_1745856680495_197();
    try { // block id: 382
        var_1745856680495_384;
        UInt64(150) - UInt64(243)
    } catch (_) { // block id: 389
        UInt64(125)
    } finally { // block id: 391
        var_1745856680495_18 - var_1745856680495_395
    } |> func_1745856680495_336
}

@Deprecated
public open class Class_1745856680495_450 <: Class_1745856680495_305<Int8, Range<UInt8>, Int8> & Interface_1745856680495_309<Range<UInt16>,
    Range<UInt16>> & Interface_1745856680495_308 {
    @Frozen
    public init() { // block id: 452

    }

    @Frozen
    public mut prop var_1745856680495_528: Bool { // block id: 529
        get() { // block id: 531
            (Int64(-104) is Int64);
            var_1745856680495_702
        }
        set(Value) { // block id: 536
            ();
            UInt64(211);
            ();
            var_1745856680495_702 = Value
        }
    }
    mut prop var_1745856680495_702: Bool { // block id: 703
        get() { // block id: 705
            ();
            ();
            (Option<Struct_1745856680495_197>.None is Int8)
        }
        set(Value) { // block id: 712
            ((Int32(Int32(74)) & 127)..=(Int32(Int32(-38)) & 127) : (Int64(115) | 1));
            ()
        }
    }
}

@Frozen
@Deprecated
public func func_1745856680495_193<T0>(param_1745856680495_194: Int8): UInt8 { // block id: 195
    func func_1745856680495_201(): Struct_1745856680495_197 { // block id: 202
        if (try { // block id: 207
            var_1745856680495_6;
            false && false
        } catch (_) { // block id: 212
            false
        }) { // block id: 214
            var_1745856680495_6;
            if (false) {
                var_1745856680495_219
            } else {
                [(), (), (), (), (), (), (), (), (), ()]
            };
            [(), (), (), (), (), (), (), (), (), ()]
        } else { // block id: 223
            Int32(-99);
            [var_1745856680495_6, var_1745856680495_6, var_1745856680495_6, (), (), (), (), (), (), var_1745856680495_6]
        }[7];
        func func_1745856680495_283<T0>(
            optionalParam_1745856680495_284!: Option<Option<Struct_1745856680495_197>> = Option<Option<Struct_1745856680495_197>>
                .None, optionalParam_1745856680495_286!: Struct_1745856680495_197 = Struct_1745856680495_197(),
            optionalParam_1745856680495_289!: Range<UInt32> = ((UInt32(UInt32(Int16(Int16(126)))) & 127)..=(UInt32(UInt32(Int16(UInt16(76)))) &
                127) : (Int64(UInt16(UInt16(UInt16(174)))) | 1)), optionalParam_1745856680495_301!: Bool = true): Array<Struct_1745856680495_197> { // block id: 303
            var var_1745856680495_311: Class_1745856680495_305<Int8, Range<UInt8>, Int8> = Class_1745856680495_305<Int8, Range<UInt8>, Int8>();
            var_1745856680495_311.var_1745856680495_314
        };

        try { // block id: 238
            Float64(-82.0);
            let var_1745856680495_261: ?Option<Struct_1745856680495_197> = Option<Option<Struct_1745856680495_197>>
                .Some((Int8(94) as Struct_1745856680495_197));
            const var_1745856680495_270: Int32 = 113;
            let var_1745856680495_276: Option<Struct_1745856680495_197> = (("yGhyHb%R?|" as String) as Struct_1745856680495_197);
            func func_1745856680495_241(): Struct_1745856680495_197 { // block id: 242
                (try { // block id: 254
                    var_1745856680495_257 -= Int16(102)
                    var_1745856680495_261
                } catch (e: Exception) { // block id: 265
                    var_1745856680495_261
                } finally { // block id: 267
                    var_1745856680495_270 * Int32(-1);
                    var_1745856680495_6;
                    Option<Option<Struct_1745856680495_197>>.Some(var_1745856680495_276)
                }.getOrThrow() ?? func_1745856680495_283<Int8>()[0])
            };

            func_1745856680495_241()
        } finally { // block id: 330
            [(), (), (), (), (), (), (), (), (), ()] |> func_1745856680495_332<Range<Int64>, UInt8>;
            UInt16(170);
            var_1745856680495_403[1]
        }
    };

    func_1745856680495_201().func_1745856680495_420(if (false) { // block id: 481
        Int16(-47)
    } else { // block id: 483
        var_1745856680495_6;
        var_1745856680495_257 + var_1745856680495_95
    }, (var_1745856680495_490 is Interface_1745856680495_308),
        optionalParam_1745856680495_423: (((Int16(Int16(-15)) & 127)..(Int16(Int16(-8)) & 127) : (var_1745856680495_503 |
            1)) is Int64), optionalParam_1745856680495_425: try { // block id: 506
            var_1745856680495_6;
            var_1745856680495_437
        } finally { // block id: 509
            Option<Option<Unit>>.None
        })
}

@Frozen
@Deprecated
public func func_1745856680495_182(param_1745856680495_183: Unit): Range<UInt32> { // block id: 184
    true;
    var var_1745856680495_512: (Int8) -> UInt8 = func_1745856680495_193<Int8>;
    if (false) { // block id: 188
        ();
        ((UInt32(UInt32(254)) & 127)..=(UInt32(UInt32(194)) & 127) : (Int64(-47) | 1))
    } else { // block id: 191
        Int8(110) |> var_1745856680495_512;
        if (false) {
            ((UInt32(UInt32(224)) & 127)..(UInt32(UInt32(34)) & 127) : (Int64(14) | 1))
        } else {
            ((UInt32(UInt32(222)) & 127)..=(UInt32(UInt32(221)) & 127) : (Int64(91) | 1))
        }
    }
}

@Frozen
internal func func_1745856680495_60(param_1745856680495_61: Range<Int8>): Range<UInt32> { // block id: 62
    var var_1745856680495_571: ?Option<Struct_1745856680495_197> = (() as Option<Struct_1745856680495_197>);
    var var_1745856680495_589: Int = Int64(UInt8(183));
    var_1745856680495_68.func_1745856680495_71(match (var_1745856680495_547) {
        case _ =>
            Option<Option<Unit>>.None;
            var_1745856680495_554

        case _ =>
            var var_1745856680495_563: UInt16 = UInt16(204);
            var_1745856680495_563 ^= UInt16(41)
            var_1745856680495_554 ^ UInt16(150)
    }, namedParam_1745856680495_73: match (var_1745856680495_571) {
        case _ =>
            var_1745856680495_579 &&= var_1745856680495_579
            var_1745856680495_6

        case caseVar_1745856680495_585 => var_1745856680495_589 &= Int64(107)

        case caseVar_1745856680495_595 =>
            var_1745856680495_599 -= var_1745856680495_599
            var var_1745856680495_609: Byte = UInt8(UInt8(Int8(UInt8(232))));
            ((UInt8(UInt8(51)) & 127)..=(UInt8(var_1745856680495_609) & 127) : (var_1745856680495_91 | 1));
            var_1745856680495_617 >>= ((var_1745856680495_617) & 7)

        case caseVar_1745856680495_624: Struct_1745856680495_197 =>
            ();
            ()

        case _ =>
            var_1745856680495_579 ||= true
            ()
    })
}

@Frozen
public func func_1745856680495_52(): VArray<Float32, $9> { // block id: 53
    const var_1745856680495_647: Float32 = -23.0;
    let var_1745856680495_665: VArray<Float32, $9> = VArray<Float32, $9>({i => Float32(8.0)});
    if (var_1745856680495_56) { // block id: 58
        ((Int8(Int8(93)) & 127)..=(Int8(Int8(-101)) & 127) : (Int64(-101) | 1)) |> func_1745856680495_60;
        if (var_1745856680495_639) { // block id: 642
            Option<String>.Some(var_1745856680495_37);
            var var_1745856680495_652: Float32 = Float32(Float32(Float32(Float32(Float32(-58.0)))));
            VArray<Float32, $9>(repeat: var_1745856680495_647)
        } else { // block id: 663
            var_1745856680495_665
        }
    } else { // block id: 679
        Struct_1745856680495_64<Range<Int16>, String>.var_1745856680495_683;
        var_1745856680495_665
    }
}

main(): Int64 {
    try {
        var_1745856680495_6;
        var var_1745856680495_33: UInt16 = UInt16(40);
        (try { // block id: 14
            UInt64(237);
            let var_1745856680495_22: UInt = UInt64(226);
            var_1745856680495_18 += var_1745856680495_22
            if (false) {
                Option<String>.None
            } else {
                var_1745856680495_28
            }
        } finally { // block id: 30
            var_1745856680495_33--;
            var_1745856680495_28
        } ?? var_1745856680495_37);
        match (func_1745856680495_52()[2]) {
            case 126.0 =>
                ();
                Int64(-45) << ((var_1745856680495_91) & 7)

            case _ =>
                var_1745856680495_6;
                ();
                Int64(-104) - var_1745856680495_91
        }
        // CRC Check All Variables
        var crcCheck = CrcCheck(5000, 32)
        crcCheck.updateBuffer(UInt64(var_1745856680495_33 * var_1745856680495_33), 64)
        crcCheck.updateBuffer(UInt64(var_1745856680495_91 * var_1745856680495_91), 64)
        crcCheck.crcCheck()
        crcCheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) {
        println("Exception: NoneValueException")
    }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        buffer = Array<Int64>(buffer_n, {i => 0})
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, {i => 0})
        var byte_c = 1
        var byte_index = 0
        while (value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[(i + buffer_index) % buffer.size] = byteArray[i + byte_index]
            i++
        }
        buffer_index = (buffer_index + i) % buffer.size
    }

    func updateBuffer(input: Bool, byte_n: Int64): Unit {
        if (input == true) {
            updateBuffer(1, byte_n)
        } else {
            updateBuffer(0, byte_n)
        }
    }

    func updateBuffer(input: Rune, byte_n: Int64): Unit {
        updateBuffer(UInt64(UInt32(input)), byte_n)
    }

    func updateBuffer(input: String, byte_n: Int64): Unit {
        for (c in input) {
            updateBuffer(c, byte_n)
        }
    }

    func updateBuffer(input: Unit, byte_n: Int64): Unit {
        updateBuffer(input.toString(), byte_n)
    }

    func updateBuffer(input: Any, byte_n: Int64): Unit {
        if (input is Hashable) {
            match (input as Hashable) {
                case Some(v) => updateBuffer(UInt64(v.hashCode()), byte_n)
                case _ => updateBuffer(1, byte_n)
            }
        } else if (input is ToString) {
            match (input as ToString) {
                case Some(v) => updateBuffer(v.toString(), byte_n)
                case _ => updateBuffer(1, byte_n)
            }
        } else {
            updateBuffer(1, byte_n)
        }
    }
    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, {i => 0})
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2 ** 2 * crc_output[i] + 2 ** 1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
