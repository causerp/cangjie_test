/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK:%compiler %cmp_opt %f -o %output

var var_1689463686541_159 : (Float32, Range<Int8>, Option<(Int16, Unit, UInt32, UInt16, UInt16, Float32)>, Bool, Float32, (Int16, Unit, UInt32, UInt16, UInt16, Float32)) = (Float32(75.0), ((Int8(Int8(-50))&127)..=(Int8(Int8(-20))&127):((-121)|1)), Option<(Int16, Unit, UInt32, UInt16, UInt16, Float32)>.None, (16.0 is Range<UInt8>), Float32(28.0), (Int16(87), (), UInt32(111), UInt16(161), UInt16(64), Float32(Float32(-76.0))))
public var var_1689463686541_228 : Int16 = Int16(Int8(12))
var var_1689463686541_237 : Int32 = Int32(Int8(116))
public var var_1689463686541_387 : UInt8 = UInt8(141)
public var var_1689463686541_466 : UInt16 = UInt16(188)
public var var_1689463686541_493 : UInt16 = UInt16(47)
public var var_1689463686541_516 : ?(Int16, Unit, UInt32, UInt16, UInt16, Float32) = Option<(Int16, Unit, UInt32, UInt16, UInt16, Float32)>.None
public let var_1689463686541_545 : Range<Int16> = ((Int16(Int16(UInt16(34)))&127)..=(Int16(Int16(UInt16(UInt8(238))))&127):(Int64(UInt8(Int8(Int8(61))))|1))
public var var_1689463686541_615 : Class_1689463686541_122<Int32> = Class_1689463686541_122<Int32>()
var var_1689463686541_661 : Unit = ()
var var_1689463686541_699 : Float32 = Float32(65.0)
public let var_1689463686541_726 : Bool = ((Int16(-36), (), UInt32(UInt32(Int8(-58))), UInt16(UInt16(UInt8(32))), UInt16(139), Float32(Float32(Float32(-9.0)))) is Rune)
var var_1689463686541_743 : ?Float32 = Option<Float32>.None
public let var_1689463686541_753 : UInt32 = UInt32(26)
public let var_1689463686541_874 : Bool = true
var var_1689463686541_1075 : Array<Option<Bool>> = [Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, (((UInt64(UInt64(UInt8(161)))&127)..(UInt64(UInt64(159))&127):((-105)|1)) as Bool), Option<Bool>.None, (###"a{dtEZu7\\bg"### as Bool), Option<Bool>.None, ("8dT4_|n%L2" as Bool), (Int8(Int8(-40)) as Bool), ((((UInt64(UInt64(221))&127)..(UInt64(UInt64(99))&127):(120|1)) as Bool) as Bool)]
public let var_1689463686541_1107 : Range<UInt64> = ((UInt64(UInt64(63))&127)..=(UInt64(UInt64(Int16(52)))&127):(Int64(Int8(-21))|1))
let var_1689463686541_1250 : Int64 = Int64(Int16(Int8(-58)))
let var_1689463686541_1256 : UInt64 = UInt64(98)
var var_1689463686541_1295 : Int64 = 10
public let var_1689463686541_1344 : Array<Int16> = [Int16(-77), Int16(-53), Int16(-21), Int16(110), Int16(-60), Int16(114), Int16(29), Int16(31), Int16(47), Int16(-23)]

public open class Class_1689463686541_122<T0> {
    public init() { // block id: 124

    }
;
    protected mut prop var_1689463686541_188 : UInt32 { // block id: 189
        get() { // block id: 191
            ((Int8(Int8(UInt8(163)))&127)..=(Int8(Int8(UInt8(64)))&127):(54|1));
            UInt32(Int32(Int32(111)));
            var_1689463686541_1352
        }

        set(Value) { // block id: 203
            ();
            var_1689463686541_1352 = Value
        }

    };
    func func_1689463686541_129(param_1689463686541_130 : Float32, optionalParam_1689463686541_131 ! : Range<Int64> = ((Int64((-107))&127)..=(Int64((-71))&127):((-90)|1)), optionalParam_1689463686541_133 ! : Bool = (((Int16(Int16(Int8(-82)))&127)..(Int16(Int16(24))&127):(Int64(UInt16(206))|1)) is Range<Int32>), optionalParam_1689463686541_141 ! : Range<UInt32> = ((UInt32(UInt32(Int16(-90)))&127)..=(UInt32(UInt32(Int32(-47)))&127):(Int64(UInt64(Int8(28)))|1))) : Unit { // block id: 150
        var var_1689463686541_180 : (Range<UInt32>) -> Option<(Int16, Unit, UInt32, UInt16, UInt16, Float32)> = { lambdaParameter_1689463686541_183 : Range<UInt32> => Option<(Int16, Unit, UInt32, UInt16, UInt16, Float32)>.None };
        let var_1689463686541_212 : Unit = ();
        let var_1689463686541_219 : String = ###"U)oAVRhRB}"###;
        match ((((UInt32(var_1689463686541_188)&127)..=(UInt32(UInt32(90))&127):((-128)|1))|>var_1689463686541_180)) {
            case caseVar_1689463686541_209 => 
                var_1689463686541_212
            
            case caseVar_1689463686541_216 => 
                var_1689463686541_219;
                var var_1689463686541_223 : UInt64 = UInt64(122);
                var_1689463686541_223 >>= ((UInt64(11)) & 7);
                var_1689463686541_228 += Int16(-32)
            
            case _ : UInt16 => 
                var_1689463686541_237 <<= ((var_1689463686541_237) & 7);
                var_1689463686541_212
            
            case _ => 
                let var_1689463686541_245 : Int8 = Int8(-4);
                var_1689463686541_245;
                ()
            
        }
    }
;
    public static prop var_1689463686541_255 : (UInt16, (Int16, Unit, UInt32, UInt16, UInt16, Float32), Unit) { // block id: 256
        get() { // block id: 258
            (UInt16(220), (Int16(-100), (), UInt32(Int8(-126)), UInt16(151), UInt16(14), Float32(80.0)), ())
        }

    };
    static prop var_1689463686541_480 : Unit { // block id: 481
        get() { // block id: 483

        }

    };
    public var var_1689463686541_512 : Int8 = Int8(-47);
    public func func_1689463686541_286(optionalParam_1689463686541_287 ! : Array<Option<(Int16, Unit, UInt32, UInt16, UInt16, Float32)>> = [(((Int32(Int32(Int32(-24)))&127)..=(Int32(Int32(80))&127):((-8)|1)) as (Int16, Unit, UInt32, UInt16, UInt16, Float32)), (UInt8(239) as (Int16, Unit, UInt32, UInt16, UInt16, Float32)), Option<(Int16, Unit, UInt32, UInt16, UInt16, ,Float32)>.None, ([UInt64(UInt32(11)), UInt64(Int32(-59)), UInt64(168), UInt64(UInt16(120)), UInt64(Int8(35)), UInt64(137), UInt64(Int16(-16)), UInt64(Int32(-89)), UInt64(Int8(-110)), UInt64(UInt64(199))] as (Int16, Unit, UInt32, UInt16, UInt16, Float32)), Option<(Int16, Unit, UInt32, UInt16, UInt16, Float32)>.Some((Int16(-56), (), UInt32(9), UInt16(Int16(22)), UInt16(161), Float32(Float32(55.0)))), Option<(Int16, Unit, UInt32, UInt16, UInt16, Float32)>.Some((Int16(Int16(-78)), (), UInt32(UInt32(120)), UInt16(242), UInt16(237), Float32(101.0))), ((((Int32(Int32(-44))&127)..(Int32(Int32(77))&127):((-72)|1)) is UInt64) as (Int16, Unit, UInt32, UInt16, UInt16, Float32)), Option<(Int16, Unit, UInt32, UInt16, UInt16, Float32)>.Some((Int16(28), (), UInt32(41), UInt16(103), UInt16(Int8(-74)), Float32(Float32(-123.0)))), Option<(Int16, Unit, UInt32, UInt16, UInt16, Float32)>.None, Option<(Int16, Unit, UInt32, UInt16, UInt16, Float32)>.None], optionalParam_1689463686541_356 ! : Range<Int8> = ((Int8(Int8(107))&127)..=(Int8(Int8(65))&127):(Int64(Int8(-16))|1)), optionalParam_1689463686541_362 ! : Range<UInt16> = ((UInt16(UInt16(160))&127)..=(UInt16(UInt16(58))&127):(2|1))) : Int16 { // block id: 364
        let var_1689463686541_471 : (Rune) -> (Int16, Unit, UInt32, UInt16, UInt16, Float32) = func_1689463686541_378;
        let var_1689463686541_496 : Float32 = Float32(-123.0);
        let var_1689463686541_500 : (Int16, Unit, UInt32, UInt16, UInt16, Float32) = (Int16(-95), (), UInt32(Int8(123)), UInt16(223), UInt16(128), Float32(-64.0));
        func func_1689463686541_369(optionalParam_1689463686541_370 ! : Range<Int16> = ((Int16(Int16(20))&127)..=(Int16(Int16(123))&127):(103|1)), optionalParam_1689463686541_372 ! : String = """
|vgR*
SP\\,<
""", optionalParam_1689463686541_374 ! : String = ###"zY.I}ggBSY"###) : (Int16, Unit, UInt32, UInt16, UInt16, Float32) { // block id: 376
            var var_1689463686541_476 : Bool = false;
            var var_1689463686541_541 : Rune = 'Z';
            match (if (var_1689463686541_476) { // block id: 478
                var_1689463686541_480;
                if (var_1689463686541_476) { Option<(Int16, Unit, UInt32, UInt16, UInt16, Float32)>.Some((var_1689463686541_228, (), UInt32(162), UInt16(231), var_1689463686541_493, var_1689463686541_496)) } else { Option<(Int16, Unit, UInt32, UInt16, UInt16, Float32)>.Some(var_1689463686541_500) } 
            } else { // block id: 509
                var_1689463686541_512 /= ((var_1689463686541_512) | 1);
                var_1689463686541_516
            }) {
                case caseVar_1689463686541_520 => 
                    if (true) { 'f' } else { 't' } 
                
                case _ : Range<UInt16> => 
                    var var_1689463686541_530 : Range<UInt64> = ((UInt64(UInt64(6))&127)..(UInt64(UInt64(103))&127):((-52)|1));
                    var_1689463686541_530;
                    'T'
                
                case _ => 
                    var_1689463686541_228 & Int16(-67);
                    if (var_1689463686541_476) { var_1689463686541_541 } else { 'g' } 
                
            }|>var_1689463686541_471
        }
;
        Int16(-122) + func_1689463686541_369(optionalParam_1689463686541_370 : var_1689463686541_545, optionalParam_1689463686541_374 : "+cQir6YjL9")[0]
    }
;
    let var_1689463686541_956 : Float32 = Float32(-75.0);
    public static var var_1689463686541_1059 : Int8 = Int8(82);
    private static let var_1689463686541_1242 : Range<UInt8> = ((UInt8(UInt8(29))&127)..=(UInt8(UInt8(154))&127):(39|1));
    public static func func_1689463686541_1034(param_1689463686541_1035 : Range<Int16>, param_1689463686541_1036 : (Int16, Unit, UInt32, UInt16, UInt16, Float32), param_1689463686541_1037 : Array<UInt64>, param_1689463686541_1038 : (Range<UInt32>) -> Option<(Int16, Unit, UInt32, UInt16, UInt16, Float32)>) : Unit { // block id: 1041
        if (match ((((Int32(Int32(43))&127)..=(Int32(Int32(94))&127):(101|1)) as (Int16, Unit, UInt32, UInt16, UInt16, Float32))) {
            case caseVar_1689463686541_1048 : UInt16 => 
                "WkYYBItpP<";
                var_1689463686541_661;
                UInt64(90) != UInt64(249)
            
            case _ => 
                var_1689463686541_1059 += var_1689463686541_1059;
                !var_1689463686541_726
            
        }) { // block id: 1064
            var loopTimeVar_1689463686541_1069 : Int64 = 0;
            do {
                loopTimeVar_1689463686541_1069++;

            } while ((false) && loopTimeVar_1689463686541_1069 < 100 ) 
        };
        let var_1689463686541_1119 : Bool = ([Option<(Int16, Unit, UInt32, UInt16, UInt16, Float32)>.Some((Int16(-45), (), UInt32(128), UInt16(104), UInt16(92), Float32(125.0))), (((Int8(Int8(26))&127)..(Int8(Int8(-74))&127):(56|1)) as (Int16, Unit, UInt32, UInt16, UInt16, Float32)), Option<(Int16, Unit, UInt32, UInt16, UInt16, Float32)>.Some((Int16(-1), (), UInt32(220), UInt16(183), UInt16(8), Float32(-82.0))), Option<(Int16, Unit, UInt32, UInt16, UInt16, Float32)>.Some((Int16(-95), (), UInt32(132), UInt16(220), UInt16(234), Float32(-6.0))), (((Int8(Int8(110))&127)..=(Int8(Int8(-2))&127):(54|1)) as (Int16, Unit, UInt32, UInt16, UInt16, Float32)), ((UInt8(11) as (Int16, Unit, UInt32, UInt16, UInt16, Float32)) as (Int16, Unit, UInt32, UInt16, UInt16, Float32)), Option<(Int16, Unit, UInt32, UInt16, UInt16, Float32)>.None, Option<(Int16, Unit, UInt32, UInt16, UInt16, Float32)>.None, Option<(Int16, Unit, UInt32, UInt16, UInt16, Float32)>.None, Option<(Int16, Unit, UInt32, UInt16, UInt16, Float32)>.None] is (UInt32) -> Option<Float32>);
        var var_1689463686541_1170 : Array<Option<(Int16, Unit, UInt32, UInt16, UInt16, Float32)>> = [Option<(Int16, Unit, UInt32, UInt16, UInt16, Float32)>.Some((Int16(-70), (), UInt32(50), UInt16(UInt8(99)), UInt16(138), Float32(39.0))), (((UInt16(UInt16(11))&127)..(UInt16(UInt16(UInt8(203)))&127):(Int64(UInt64(61))|1)) as (Int16, Unit, UInt32, UInt16, UInt16, Float32)), Option<(Int16, Unit, UInt32, UInt16, UInt16, Float32)>.None, (Int8(-7) as (Int16, Unit, UInt32, UInt16, UInt16, Float32)), ((true, ((Int64(47)&127)..(Int64(67)&127):(0|1)), ((UInt64(UInt64(44))&127)..=(UInt64(UInt64(128))&127):(97|1)), (UInt16(206), (Int16(68), (), UInt32(149), UInt16(152), UInt16(217), Float32(-6.0)), ()), (UInt32(220), UInt32(163)), Float32(Float32(-71.0))) as (Int16, Unit, UInt32, UInt16, UInt16, Float32)), (UInt8(UInt8(228)) as (Int16, Unit, UInt32, UInt16, UInt16, Float32)), Option<(Int16, Unit, UInt32, UInt16, UInt16, Float32)>.None, Option<(Int16, Unit, UInt32, UInt16, UInt16, Float32)>.None, Option<(Int16, Unit, UInt32, UInt16, UInt16, Float32)>.None, Option<(Int16, Unit, UInt32, UInt16, UInt16, Float32)>.Some((Int16(Int8(-63)), (), UInt32(216), UInt16(UInt8(11)), UInt16(UInt16(209)), Float32(Float32(5.0))))];
        var loopTimeVar_1689463686541_1268 : Range<UInt64> = ((UInt64(UInt64(60))&127)..=(UInt64(UInt64(75))&127):(Int64(Int32(UInt32(UInt32(241))))|1));
        for (i in loopTimeVar_1689463686541_1268 where match (var_1689463686541_1075[4]) {
            case caseVar_1689463686541_1104 : Float32 => 
                var_1689463686541_1107;
                var_1689463686541_228 << ((Int16(24)) & 7);
                !var_1689463686541_1119
            
            case _ => 
                Int32(-81) == var_1689463686541_237
            
            case _ => 
                var_1689463686541_1170;
                true
            
            case _ => 
                var_1689463686541_726
            
        }) {
            (var_1689463686541_480, var_1689463686541_1242, (false, ((Int64((-71))&127)..=(Int64((-99))&127):(var_1689463686541_1250|1)), ((UInt64(var_1689463686541_1256)&127)..(UInt64(UInt64(36))&127):((-100)|1)), var_1689463686541_255, (var_1689463686541_753, UInt32(64)), var_1689463686541_699), ())[2];
            ()
        }
    }
;
    static mut prop var_1689463686541_1308 : (Int16, Unit, UInt32, UInt16, UInt16, Float32) { // block id: 1309
        get() { // block id: 1311
            UInt64(48);
            ();
            (Int16(45), (), UInt32(UInt16(51)), UInt16(Int8(Int8(-6))), UInt16(31), Float32(Float32(Float32(-10.0))))
        }

        set(Value) { // block id: 1328
            Int16(72);
            ()
        }

    };
    public static let var_1689463686541_1350 : Int64 = (-90);
    var var_1689463686541_1352 : UInt32 = UInt32(204)
}

public func func_1689463686541_153<T0, T1>(param_1689463686541_154 : Range<UInt32>) : Option<(Int16, Unit, UInt32, UInt16, UInt16, Float32)> where T0 <: Int8, T1 <: Range<UInt32> { // block id: 155
    var_1689463686541_159[2]
}

public func func_1689463686541_378(param_1689463686541_379 : Rune) : (Int16, Unit, UInt32, UInt16, UInt16, Float32) { // block id: 380
    let var_1689463686541_393 : UInt32 = UInt32(UInt16(79));
    var var_1689463686541_401 : Float32 = Float32(-46.0);
    let var_1689463686541_412 : Float64 = 67.0;
    let var_1689463686541_458 : Int16 = Int16(Int16(46));
    try { // block id: 382
        let var_1689463686541_409 : Float64 = 88.0;
        try { // block id: 384
            ((Int32(Int32(-38))&127)..(Int32(Int32(-123))&127):(23|1));
            var_1689463686541_387;
            var var_1689463686541_398 : UInt16 = UInt16(93);
            (Int16(-72), (), var_1689463686541_393, UInt16(33), var_1689463686541_398, var_1689463686541_401)
        } finally { // block id: 403
            var_1689463686541_228 = var_1689463686541_228;
            var_1689463686541_409 / Float64((Int32(var_1689463686541_412)) | 1);
            let var_1689463686541_419 : UInt16 = UInt16(Int16(UInt16(244)));
            (Int16(-68), (), UInt32(85), var_1689463686541_419, UInt16(183), var_1689463686541_401)
        }
    } catch (e: Exception) { // block id: 425
        var var_1689463686541_428 : ?(Int16, Unit, UInt32, UInt16, UInt16, Float32) = Option<(Int16, Unit, UInt32, UInt16, UInt16, Float32)>.Some((Int16(-107), (), UInt32(Int8(-6)), UInt16(199), UInt16(105), Float32(Float32(-95.0))));
        let var_1689463686541_440 : (Int16, Unit, UInt32, UInt16, UInt16, Float32) = (Int16(UInt8(UInt8(229))), (), UInt32(53), UInt16(Int16(Int16(UInt8(83)))), UInt16(198), Float32(Float32(Float32(-72.0))));
        (var_1689463686541_428 ?? var_1689463686541_440)
    } finally { // block id: 455
        let var_1689463686541_462 : Unit = ();
        (var_1689463686541_458, var_1689463686541_462, UInt32(109), var_1689463686541_466, var_1689463686541_466, Float32(115.0))
    }
}



func func_1689463686541_684(param_1689463686541_685 : UInt32) : Option<Float32> { // block id: 686
    match (((UInt32(UInt32(63))&127)..=(UInt32(UInt32(218))&127):(50|1))) {
        case caseVar_1689463686541_691 => 
            let var_1689463686541_695 : Bool = false;
            Option<Bool>.Some(var_1689463686541_695);
            var_1689463686541_699 += Float32(104.0);
            Option<Float32>.None
        
        case _ : (UInt16, (Int16, Unit, UInt32, UInt16, UInt16, Float32), Unit) => 
            ();
            Option<Float32>.Some(Float32(122.0))
        
        case _ : UInt64 => 
            let var_1689463686541_713 : ?Float32 = Option<Float32>.Some(Float32(-43.0));
            var_1689463686541_713
        
        case caseVar_1689463686541_718 : Int64 => 
            var_1689463686541_661;
            var_1689463686541_466 -= UInt16(224);
            if (var_1689463686541_726) { Option<Float32>.None } else { var_1689463686541_743 } 
        
        case _ => 
            if (true) { Option<Float32>.None } else { var_1689463686541_743 } 
        
    }
}

public func func_1689463686541_277(param_1689463686541_278 : Int8) : (Int16, Unit, UInt32, UInt16, UInt16, Float32) { // block id: 279
    var var_1689463686541_283 : Class_1689463686541_122<Int32> = Class_1689463686541_122<Int32>();
    let var_1689463686541_559 : Array<Option<(Int16, Unit, UInt32, UInt16, UInt16, Float32)>> = [("NaMEKvm}~t" as (Int16, Unit, UInt32, UInt16, UInt16, Float32)), Option<(Int16, Unit, UInt32, UInt16, UInt16, Float32)>.Some((Int16(Int16(-109)), (), UInt32(Int16(15)), UInt16(UInt8(152)), UInt16(183), Float32(Float32(-40.0)))), Option<(Int16, Unit, UInt32, UInt16, UInt16, Float32)>.None, (((Int8(Int8(-70))&127)..(Int8(Int8(18))&127):((-89)|1)) as (Int16, Unit, UInt32, UInt16, UInt16, Float32)), ((Int16(-68), (), UInt32(UInt16(10)), UInt16(124), UInt16(175), Float32(Float32(41.0))) as (Int16, Unit, UInt32, UInt16, UInt16, Float32)), Option<(Int16, Unit, UInt32, UInt16, UInt16, Float32)>.None, (Option<(Int16, Unit, UInt32, UInt16, UInt16, Float32)>.None as (Int16, Unit, UInt32, UInt16, UInt16, Float32)), Option<(Int16, Unit, UInt32, UInt16, UInt16, Float32)>.None, (((Int32(Int32(-62))&127)..(Int32(Int32(74))&127):(37|1)) as (Int16, Unit, UInt32, UInt16, UInt16, Float32)), Option<(Int16, Unit, UInt32, UInt16, UInt16, Float32)>.None];
    let var_1689463686541_606 : Option<Bool> = (Int64(UInt16(UInt8(UInt8(78)))) as Bool);
    var var_1689463686541_624 : (Bool, Range<Int64>, Range<UInt64>, (UInt16, (Int16, Unit, UInt32, UInt16, UInt16, Float32), Unit), (UInt32, UInt32), Float32) = ((() is Int16), ((Int64(63)&127)..(Int64((-29))&127):((-36)|1)), ((UInt64(UInt64(20))&127)..(UInt64(UInt64(Int16(67)))&127):(21|1)), (UInt16(UInt16(87)), (Int16(-90), (), UInt32(118), UInt16(191), UInt16(Int8(80)), Float32(69.0)), ()), (UInt32(Int16(Int16(107))), UInt32(Int32(121))), Float32(Float32(Float32(59.0))));
    var var_1689463686541_665 : Float32 = Float32(-127.0);
    var var_1689463686541_668 : Float32 = Float32(-30.0);
    (var_1689463686541_283.func_1689463686541_286(optionalParam_1689463686541_287 : var_1689463686541_559, optionalParam_1689463686541_362 : ((UInt16(UInt16(50))&127)..=(UInt16(var_1689463686541_493)&127):((-9)|1))), if ((var_1689463686541_606 ?? true)) { // block id: 613
        var_1689463686541_615;
        ();
        ()
    }, var_1689463686541_624[4][0], var_1689463686541_493, try { // block id: 659
        var_1689463686541_661;
        var_1689463686541_665 += var_1689463686541_668;
        -var_1689463686541_466
    } finally { // block id: 672
        UInt16(116);
        var_1689463686541_668 = var_1689463686541_668;
        var_1689463686541_493
    }, ((var_1689463686541_753|>func_1689463686541_684) ?? (var_1689463686541_743 ?? Float32(111.0))))
}

public struct Struct_1689463686541_762 {
    public init() { // block id: 764

    }
;
    public static var var_1689463686541_767 : Int8 = Int8(-12)
}

public func func_1689463686541_7<T0>(param_1689463686541_8 : Int16) : Unit where T0 <: Array<UInt64> { // block id: 9
    var var_1689463686541_13 : Int8 = Int8(UInt8(UInt8(UInt8(31))));
    UInt8(UInt8(var_1689463686541_13));
    let var_1689463686541_63 : Float32 = Float32(Float32(Float32(Float32(25.0))));
    let var_1689463686541_103 : UInt64 = UInt64((-43));
    func func_1689463686541_20(param_1689463686541_21 : Bool) : Unit { // block id: 22
        let var_1689463686541_44 : ?(Int16, Unit, UInt32, UInt16, UInt16, Float32) = Option<(Int16, Unit, UInt32, UInt16, UInt16, Float32)>.None;
        var var_1689463686541_52 : Unit = ();
        var var_1689463686541_55 : UInt32 = UInt32(91);
        let var_1689463686541_58 : UInt16 = UInt16(Int8(84));
        ([Option<(Int16, Unit, UInt32, UInt16, UInt16, Float32)>.None, var_1689463686541_44, var_1689463686541_44, var_1689463686541_44, Option<(Int16, Unit, UInt32, UInt16, UInt16, Float32)>.Some((Int16(71), var_1689463686541_52, var_1689463686541_55, var_1689463686541_58, UInt16(130), var_1689463686541_63)), Option<(Int16, Unit, UInt32, UInt16, UInt16, Float32)>.None, var_1689463686541_44, var_1689463686541_44, var_1689463686541_44, var_1689463686541_44][1] ?? try { // block id: 75
            (Int16(5), (), var_1689463686541_55, UInt16(105), UInt16(70), Float32(117.0))
        } catch (_) { // block id: 83
            let var_1689463686541_85 : (Int16, Unit, UInt32, UInt16, UInt16, Float32) = (Int16(Int16(11)), (), UInt32(UInt8(Int8(-17))), UInt16(2), UInt16(155), Float32(Float32(Float32(Float32(-11.0)))));
            var_1689463686541_85;
            [UInt64(188), UInt64(55), var_1689463686541_103, var_1689463686541_103, var_1689463686541_103, UInt64(114), UInt64(156), var_1689463686541_103, UInt64(87), var_1689463686541_103];
            (Int16(94), var_1689463686541_52, var_1689463686541_55, UInt16(177), UInt16(36), Float32(20.0))
        })[1];
        var var_1689463686541_126 : Class_1689463686541_122<Int32> = Class_1689463686541_122<Int32>();
        var_1689463686541_126.func_1689463686541_129(Float32(Float32(124.0)));
        Class_1689463686541_122<Int32>.var_1689463686541_255[2]
    }
;
    let var_1689463686541_759 : (Int8) -> (Int16, Unit, UInt32, UInt16, UInt16, Float32) = func_1689463686541_277;
    let var_1689463686541_792 : Int64 = 20;
    let var_1689463686541_894 : Struct_1689463686541_762 = Struct_1689463686541_762();
    func func_1689463686541_272(namedParam_1689463686541_273 ! : Int16) : Bool { // block id: 274
        var var_1689463686541_822 : Range<Int8> = ((Int8(Int8(-46))&127)..(Int8(Int8(71))&127):(40|1));
        let var_1689463686541_826 : Int8 = Int8(Int8(-62));
        match ((Struct_1689463686541_762.var_1689463686541_767|>var_1689463686541_759)) {
            case (caseVar_1689463686541_771 : Range<Int8>,caseVar_1689463686541_772 : (UInt16, (Int16, Unit, UInt32, UInt16, UInt16, Float32), Unit),_,caseVar_1689463686541_773,caseVar_1689463686541_774 : Range<UInt8>,_ : Range<Int32>) => 
                UInt32(134) * UInt32(123);
                ();
                ((Int8(Int8(-44))&127)..=(Int8(Int8(-126))&127):(74|1))
            
            case (_ : Range<Int16>,caseVar_1689463686541_783 : Option<Float32>,_,_ : Float32,_,caseVar_1689463686541_784 : Array<Option<(Int16, Unit, UInt32, UInt16, UInt16, Float32)>>) => 
                var var_1689463686541_796 : (UInt16, (Int16, Unit, UInt32, UInt16, UInt16, Float32), Unit) = (UInt16(Int8(UInt8(UInt8(119)))), (Int16(UInt8(142)), (), UInt32(243), UInt16(Int16(Int8(24))), UInt16(UInt16(UInt16(31))), Float32(61.0)), ());
                (false, ((Int64((-125))&127)..(Int64(93)&127):(var_1689463686541_792|1)), ((UInt64(UInt64(235))&127)..=(UInt64(UInt64(191))&127):((-34)|1)), var_1689463686541_796, (var_1689463686541_753, UInt32(166)), var_1689463686541_699);
                var var_1689463686541_830 : Int8 = Int8(-71);
                if (var_1689463686541_726) { var_1689463686541_822 } else { ((Int8(var_1689463686541_826)&127)..(Int8(var_1689463686541_830)&127):(125|1)) } 
            
            case _ => 
                var_1689463686541_822
            
        };
        var var_1689463686541_883 : Bool = (Float64(124.0) is Range<Int64>);
        let var_1689463686541_908 : Int16 = Int16(Int8(-128));
        try { // block id: 837
            match (UInt8(101)) {
                case _ => 
                    if (var_1689463686541_726) { ((Int16(var_1689463686541_228)&127)..(Int16(var_1689463686541_228)&127):(var_1689463686541_792|1)) } else { var_1689463686541_545 } ;
                    var var_1689463686541_851 : UInt32 = UInt32(Int8(Int8(Int8(-34))));
                    var_1689463686541_851--;
                    var_1689463686541_699 = Float32(-8.0)
                
            };
            if (var_1689463686541_726) { // block id: 861
                (Int16(-44), (), UInt32(245), UInt16(172), UInt16(29), var_1689463686541_699);
                if (var_1689463686541_726) { Struct_1689463686541_762() } else { Struct_1689463686541_762() } 
            } else if (var_1689463686541_874) { // block id: 876
                let var_1689463686541_878 : Struct_1689463686541_762 = Struct_1689463686541_762();
                var_1689463686541_878
            } else { // block id: 880
                var_1689463686541_883 ||= false;
                let var_1689463686541_889 : Unit = ();
                var_1689463686541_889;
                if (var_1689463686541_726) { var_1689463686541_894 } else { var_1689463686541_894 } 
            }
        } finally { // block id: 897
            match (Option<Bool>.None) {
                case _ : UInt64 => 
                    if (var_1689463686541_726) { Option<(Int16, Unit, UInt32, UInt16, UInt16, Float32)>.Some((var_1689463686541_908, (), UInt32(20), UInt16(127), var_1689463686541_466, var_1689463686541_63)) } else { Option<(Int16, Unit, UInt32, UInt16, UInt16, Float32)>.None } 
                
                case _ => 
                    var_1689463686541_661;
                    ();
                    var var_1689463686541_926 : (Int16, Unit, UInt32, UInt16, UInt16, Float32) = (Int16(Int8(Int8(UInt8(230)))), (), UInt32(UInt32(20)), UInt16(126), UInt16(177), Float32(Float32(-40.0)));
                    if (true) { Option<(Int16, Unit, UInt32, UInt16, UInt16, Float32)>.Some(var_1689463686541_926) } else { Option<(Int16, Unit, UInt32, UInt16, UInt16, Float32)>.None } 
                
                case _ => 
                    var_1689463686541_661;
                    var_1689463686541_661;
                    if (var_1689463686541_874) { var_1689463686541_516 } else { var_1689463686541_516 } 
                
            };
            var var_1689463686541_949 : Struct_1689463686541_762 = Struct_1689463686541_762();
            var_1689463686541_949
        };
        let var_1689463686541_964 : UInt8 = UInt8(UInt8(141));
        var var_1689463686541_971 : (Int16, Unit, UInt32, UInt16, UInt16, Float32) = (Int16(9), (), UInt32(211), UInt16(Int16(52)), UInt16(248), Float32(Float32(-37.0)));
        match (var_1689463686541_615.var_1689463686541_956) {
            case -99.0 | 112.0 | 125.0 => 
                Float32(-69.0);
                var_1689463686541_493;
                var_1689463686541_964
            
            case _ => 
                var_1689463686541_971;
                var_1689463686541_661;
                var_1689463686541_964
            
            case _ => 
                var_1689463686541_964
            
            case 32.0 | 6.0 | 119.0 => 
                var_1689463686541_883 ||= false;
                var_1689463686541_661;
                let var_1689463686541_996 : UInt8 = UInt8(UInt8(227));
                var_1689463686541_996 + UInt8(173)
            
            case _ => 
                var_1689463686541_661;
                ();
                var_1689463686541_964
            
        } == UInt8(30)
    }
;
    match (func_1689463686541_20(func_1689463686541_272(namedParam_1689463686541_273 : var_1689463686541_228))) {
        case () | () | () => 
            var_1689463686541_743;
            UInt64(42);
            var_1689463686541_13--
        
        case _ => 
            var_1689463686541_661
        
        case () => 
            var var_1689463686541_1023 : Int64 = (-93);
            var_1689463686541_1023 &= var_1689463686541_1023;
            UInt32(123);
            ()
        
        case _ => 
            ()
        
    };
    let var_1689463686541_1336 : (Range<UInt32>) -> Option<(Int16, Unit, UInt32, UInt16, UInt16, Float32)> = func_1689463686541_153<Int8, Range<UInt32>>;
    Class_1689463686541_122<Int32>.func_1689463686541_1034(try { // block id: 1278
        var_1689463686541_228 /= ((Int16(-20)) | 1);
        ((Int16(Int16(-69))&127)..=(Int16(Int16(113))&127):((-68)|1))
    } catch (_) { // block id: 1283
        var_1689463686541_466 ^= var_1689463686541_493;
        ((UInt32(UInt32(147))&127)..(UInt32(UInt32(19))&127):((-96)|1));
        var_1689463686541_545
    } finally { // block id: 1289
        UInt16(59) ^ var_1689463686541_493;
        var_1689463686541_1295 /= (((-12)) | 1);
        if (false) { ((Int16(var_1689463686541_228)&127)..=(Int16(Int16(57))&127):(var_1689463686541_792|1)) } else { var_1689463686541_545 } 
    }, Class_1689463686541_122<Int32>.var_1689463686541_1308, [[UInt64(170), UInt64(208), UInt64(31), UInt64(69), UInt64(135), UInt64(221), UInt64(128), UInt64(78), UInt64(1), UInt64(229)], [UInt64(245), UInt64(89), UInt64(246), UInt64(147), UInt64(77), UInt64(60), UInt64(86), UInt64(86), UInt64(40), UInt64(28)], [UInt64(200), UInt64(13), UInt64(194), UInt64(99), UInt64(129), UInt64(189), UInt64(108), UInt64(87), UInt64(125), UInt64(80)], [UInt64(219), UInt64(221), UInt64(15), UInt64(202), UInt64(242), UInt64(8), UInt64(79), UInt64(94), UInt64(32), UInt64(179)], [UInt64(181), UInt64(163), UInt64(125), UInt64(152), UInt64(243), UInt64(20), UInt64(174), UInt64(2), UInt64(198), UInt64(1)], [UInt64(125), UInt64(161), UInt64(82), UInt64(40), UInt64(18), UInt64(24), UInt64(9), UInt64(8), UInt64(179), UInt64(218)], [UInt64(52), UInt64(105), UInt64(81), UInt64(47), UInt64(80), UInt64(58), UInt64(231), UInt64(2), UInt64(180), UInt64(92)], [UInt64(148), UInt64(36), UInt64(108), UInt64(54), UInt64(189), UInt64(109), UInt64(229), UInt64(31), UInt64(97), UInt64(57)], [UInt64(186), UInt64(16), UInt64(34), UInt64(29), UInt64(74), UInt64(142), UInt64(126), UInt64(47), UInt64(234), UInt64(36)], [UInt64(59), UInt64(133), UInt64(98), UInt64(251), UInt64(113), UInt64(195), UInt64(29), UInt64(201), UInt64(106), UInt64(142)]][9], var_1689463686541_1336)
}

main(): Int64 {
    try {
        var var_1689463686541_1339 : (Int16) -> Unit = func_1689463686541_7<Array<UInt64>>;
        var_1689463686541_1344[6]|>var_1689463686541_1339;
        Class_1689463686541_122<Int32>.var_1689463686541_1350
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
// ASSERT: scan parse_expected_type


