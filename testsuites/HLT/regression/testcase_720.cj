/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args

@Deprecated
public const var_1732091549242_46: Unit = ()
public var var_1732091549242_61: Int16 = Int16(Int8(89))
public const var_1732091549242_66: Byte = 204
@Deprecated
public const var_1732091549242_118: Int64 = -45
@Deprecated
var var_1732091549242_172: Int = Int64(UInt32(85))
public var var_1732091549242_195: Bool = (() is Float32)
public var var_1732091549242_203: Range<Int64> = ((Int64(Int64(-9)) & 127)..=(Int64(Int64(-89)) & 127) : (Int64(114) | 1))
@Deprecated
public let var_1732091549242_208: Range<UInt32> = ((UInt32(UInt32(Int16(Int16(UInt8(91))))) & 127)..(UInt32(UInt32(177)) &
    127) : (Int64(-54) | 1))
internal var var_1732091549242_231: Class_1732091549242_223 = Class_1732091549242_223()

public struct Struct_1732091549242_74 {
    @Frozen
    public init() { // block id: 76

    }

    public var var_1732091549242_219: Bool = false
}

@Deprecated
public const func func_1732091549242_114<T0, T1>(param_1732091549242_115: Float32): String { // block id: 116
    var_1732091549242_118;
    "=7s.40#;+("
}

public enum Enum_1732091549242_123<T0, T1, T2> {
    defaultValue
    | enumValue_1732091549242_126
}

@Frozen
public func func_1732091549242_78<T0>(namedParam_1732091549242_79!: Range<UInt32>, namedParam_1732091549242_80!: Int8,
    namedParam_1732091549242_81!: Float32, optionalParam_1732091549242_82!: String = ###"v-HgLL)wkg"###): Struct_1732091549242_74 { // block id: 84
    var var_1732091549242_101: UInt16 = UInt16(30);
    if (try { // block id: 87
        false
    } catch (e: Exception) { // block id: 89
        var var_1732091549242_92: Int32 = Int32(Int16(Int16(UInt16(114))));
        var_1732091549242_92 ^= var_1732091549242_92
        var_1732091549242_46;
        var_1732091549242_101 > UInt16(223)
    } finally { // block id: 104
        var var_1732091549242_107: Bool = false;
        var_1732091549242_107 &&= var_1732091549242_107
        UInt32(139) < UInt32(201)
    }) {
        (match (Enum_1732091549242_123<Float64, UInt16, Int16>.enumValue_1732091549242_126) {
            case defaultValue =>
                ();
                const var_1732091549242_133: Float32 = 20.0;
                var_1732091549242_133 + var_1732091549242_133

            case caseVar_1732091549242_138: Range<UInt8> =>
                ();
                ();
                let var_1732091549242_143: Float32 = Float32(Float32(Float32(72.0)));
                var_1732091549242_143

            case defaultValue =>
                var_1732091549242_101 %= ((UInt16(25)) | 1)
                UInt8(252) & UInt8(113);
                Float32(-73.0) / Float32((Int32(Float32(126.0))) | 1)

            case _ => Float32(99.0) / Float32((Int32(Float32(-70.0))) | 1)
        } |> func_1732091549242_114<UInt64, Unit>)
    } else {
        func_1732091549242_114<UInt64, Unit>(Float32(-78.0))
    };
    ();
    try { // block id: 169
        var_1732091549242_172 <<= ((Int64(-72)) & 7)
        var var_1732091549242_180: Struct_1732091549242_74 = Struct_1732091549242_74();
        [var_1732091549242_180, var_1732091549242_180, var_1732091549242_180, Struct_1732091549242_74(),
            var_1732091549242_180, Struct_1732091549242_74(), var_1732091549242_180, Struct_1732091549242_74(),
            Struct_1732091549242_74(), Struct_1732091549242_74()][9]
    } finally { // block id: 192
        if (var_1732091549242_195) { // block id: 198
            var_1732091549242_46
        } else if (true) { // block id: 201
            var_1732091549242_203;
            ()
        };
        Struct_1732091549242_74()
    }
}

public sealed interface Interface_1732091549242_229 {}

public sealed interface Interface_1732091549242_228<T0, T1, T2> <: Interface_1732091549242_229 {}

public sealed interface Interface_1732091549242_227 <: Interface_1732091549242_228<Range<Int32>, Array<UInt64>, UInt16> &
    Interface_1732091549242_229 {}

public interface Interface_1732091549242_226<T0> <: Interface_1732091549242_227 {}

public open class Class_1732091549242_223 <: Interface_1732091549242_226<Int64> & Interface_1732091549242_229 {
    public init() { // block id: 225

    }

    @Frozen
    prop var_1732091549242_234: Unit { // block id: 235
        get() { // block id: 237
            r'S';
            ()
        }
    }
}

main(): Int64 {
    try {
        let var_1732091549242_20: Range<Int32> = ((Int32(Int32(Int8(Int8(-46)))) & 127)..=(Int32(Int32(36)) & 127) : (Int64(Int16(7)) |
            1));
        let var_1732091549242_33: Bool = (((Int64(Int64(-104)) & 127)..=(Int64(Int64(-45)) & 127) : (Int64(124) | 1)) is Range<UInt16>);
        let var_1732091549242_266: Unit = ();
        if (match (var_1732091549242_20) {
            case _ => VArray<Bool, $4>(repeat: var_1732091549242_33)
        }[1]) { // block id: 40
            try { // block id: 42
                UInt8(97)
            } catch (_) { // block id: 44
                var_1732091549242_46;
                var var_1732091549242_50: Int64 = Int64(UInt16(UInt8(18)));
                var_1732091549242_50 = Int64(63)
                UInt8(142) + UInt8(139)
            } finally { // block id: 58
                var_1732091549242_61 + Int16(7);
                var_1732091549242_66
            };
            let var_1732091549242_70: Int64 = Int64(-73);
            var_1732091549242_70 * Int64(-114)
        } else if (func_1732091549242_78<UInt8>(namedParam_1732091549242_79: var_1732091549242_208,
            namedParam_1732091549242_80: Int8(101), namedParam_1732091549242_81: Float32(117.0)).var_1732091549242_219) { // block id: 221
            var_1732091549242_231.var_1732091549242_234;
            ();
            var var_1732091549242_244: (Int64, Range<UInt8>) = (Int64(Int64(56)), ((UInt8(UInt8(Int8(-91))) & 127)..(UInt8(UInt8(204)) &
                    127) : (Int64(UInt32(188)) | 1)));
            var_1732091549242_244[0]
        } else { // block id: 255
            VArray<Unit, $8>(repeat: var_1732091549242_46)[4];
            var loopTimeVar_1732091549242_275: Array<UInt64> = [UInt64(20), UInt64(224), UInt64(30), UInt64(138),
                UInt64(Int32(Int8(-10))), UInt64(60), UInt64(UInt32(UInt32(129))), UInt64(Int16(UInt8(45))), UInt64(213),
                UInt64(UInt16(Int16(-31)))];
            for (i in loopTimeVar_1732091549242_275 where true) {
                var_1732091549242_46;
                ()
            };
            var_1732091549242_172
        }
        // CRC Check All Variables
        var crcCheck = CrcCheck(5000, 32)
        crcCheck.updateBuffer(UInt64(var_1732091549242_61 * var_1732091549242_61), 64)
        crcCheck.updateBuffer(UInt64(var_1732091549242_66 * var_1732091549242_66), 64)
        crcCheck.updateBuffer(UInt64(var_1732091549242_172 * var_1732091549242_172), 64)
        crcCheck.crcCheck()
        crcCheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) {
        println("Exception: NoneValueException")
    }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        buffer = Array<Int64>(buffer_n, {i => 0})
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, {i => 0})
        var byte_c = 1
        var byte_index = 0
        while (value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[(i + buffer_index) % buffer.size] = byteArray[i + byte_index]
            i++
        }
        buffer_index = (buffer_index + i) % buffer.size
    }

    func updateBuffer(input: Bool, byte_n: Int64): Unit {
        if (input == true) {
            updateBuffer(1, byte_n)
        } else {
            updateBuffer(0, byte_n)
        }
    }

    func updateBuffer(input: Rune, byte_n: Int64): Unit {
        updateBuffer(UInt64(UInt32(input)), byte_n)
    }

    func updateBuffer(input: String, byte_n: Int64): Unit {
        for (c in input) {
            updateBuffer(c, byte_n)
        }
    }

    func updateBuffer(input: Unit, byte_n: Int64): Unit {
        updateBuffer(input.toString(), byte_n)
    }

    func updateBuffer(input: Any, byte_n: Int64): Unit {
        if (input is Hashable) {
            match (input as Hashable) {
                case Some(v) => updateBuffer(UInt64(v.hashCode()), byte_n)
                case _ => updateBuffer(1, byte_n)
            }
        } else if (input is ToString) {
            match (input as ToString) {
                case Some(v) => updateBuffer(v.toString(), byte_n)
                case _ => updateBuffer(1, byte_n)
            }
        } else {
            updateBuffer(1, byte_n)
        }
    }
    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, {i => 0})
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2 ** 2 * crc_output[i] + 2 ** 1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
