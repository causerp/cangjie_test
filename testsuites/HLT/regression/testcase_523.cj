/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args

public let var_1696800182810_53 : Unit = ()
var var_1696800182810_86 : Int16 = Int16(96)
public let var_1696800182810_106 : UInt16 = UInt16(UInt8(104))
public var var_1696800182810_157 : UInt8 = UInt8(60)
public var var_1696800182810_167 : Array<UInt64> = [UInt64(147), UInt64(78), UInt64(227), UInt64(5), UInt64(38), UInt64(218), UInt64(113), UInt64(74), UInt64(67), UInt64(195)]
var var_1696800182810_256 : Class_1696800182810_116<UInt32> = Class_1696800182810_116<UInt32>()
public var var_1696800182810_426 : UInt64 = UInt64(125)
public let var_1696800182810_506 : Unit = ()




public interface Interface_1696800182810_122 {

}

public interface Interface_1696800182810_121<T0> <: Interface_1696800182810_122 {

}

public interface Interface_1696800182810_120 <: Interface_1696800182810_121<Int32> & Interface_1696800182810_122 {

}

public interface Interface_1696800182810_119 <: Interface_1696800182810_120 & Interface_1696800182810_122 {

}

public open class Class_1696800182810_116<T0> <: Interface_1696800182810_119 {
    public init() { // block id: 118

    }
;
    mut prop var_1696800182810_127 : Int16 { // block id: 128
        get() { // block id: 130
            Int16(-60);
            var_1696800182810_550
        }

        set(Value) { // block id: 134
            Option<Int16>.None;
            Class_1696800182810_116<UInt32>();
            ();
            var_1696800182810_550 = Value
        }

    };
    mut prop var_1696800182810_182 : Unit { // block id: 183
        get() { // block id: 185
            Int32(Int8(54));
            ()
        }

        set(Value) { // block id: 191
            ();
            ()
        }

    };
    public static prop var_1696800182810_210 : (Range<UInt64>, String, Float64, Bool, Rune) { // block id: 211
        get() { // block id: 213
            (((UInt64(UInt64(141))&127)..=(UInt64(UInt64(14))&127):((-22)|1)), "??U]<G=mv?", Float64(Float32(-76.0)), ((Int16(119) as Unit) is UInt16), r'q')
        }

    };
    let var_1696800182810_259 : (Range<UInt64>, UInt32, UInt16, Array<Unit>, Int64, Float64, (Range<UInt64>, String, Float64, Bool, Rune), String) = (((UInt64(UInt64(154))&127)..(UInt64(UInt64(56))&127):(104|1)), UInt32(37), UInt16(68), [(), (), (), (), (), (), (), (), (), ()], (-119), 17.0, (((UInt64(UInt64(251))&127)..(UInt64(UInt64(95))&127):(88|1)), "(UEx]?UPa{b", 86.0, true, r'J'), "\"c@ACcY/^-");
    static prop var_1696800182810_342 : Unit { // block id: 343
        get() { // block id: 345
            ();
            ();
            ()
        }

    };
    let var_1696800182810_359 : Option<Option<Array<Unit>>> = Option<Option<Array<Unit>>>.None;
    static var var_1696800182810_547 : Int64 = 97;
    var var_1696800182810_550 : Int16 = Int16(91)
}




public func func_1696800182810_249(param_1696800182810_250 : Interface_1696800182810_120) : Option<Option<Array<Unit>>> { // block id: 251
    var_1696800182810_256.var_1696800182810_259[4];
    (try { // block id: 277
        Class_1696800182810_116<UInt32>()
    } finally { // block id: 279
        ();
        Class_1696800182810_116<UInt32>()
    } as Option<Array<Unit>>)
}

public func func_1696800182810_30<T0, T1>(param_1696800182810_31 : Array<UInt64>) : Option<Array<Unit>> { // block id: 32
    let var_1696800182810_46 : Bool = (UInt32(UInt8(89)) is Range<Int8>);
    let var_1696800182810_73 : ?Int16 = Option<Int16>.Some(Int16(UInt8(229)));
    (if ((Option<Bool>.Some(var_1696800182810_46) ?? var_1696800182810_46)) { // block id: 51
        var_1696800182810_53;
        ();
        let var_1696800182810_57 : ?Int16 = (Float32(Float32(Float32(Float32(-126.0)))) as Int16);
        var_1696800182810_57
    } else if (false) { // block id: 64
        "l1-qxND$\\>";
        var var_1696800182810_69 : Range<Int64> = ((Int64(55)&127)..=(Int64((-76))&127):((-107)|1));
        if (true) { var_1696800182810_69 } else { var_1696800182810_69 } ;
        var_1696800182810_73
    } else { // block id: 77
        var_1696800182810_73
    } ?? Int16(try { // block id: 81
        var var_1696800182810_83 : Array<UInt64> = [UInt64(175), UInt64(63), UInt64(123), UInt64(151), UInt64(184), UInt64(143), UInt64(82), UInt64(139), UInt64(196), UInt64(202)];
        var_1696800182810_83;
        var_1696800182810_86;
        Int16(33)
    } catch (e: Exception) { // block id: 89
        var_1696800182810_86 % ((var_1696800182810_86) | 1)
    } finally { // block id: 93
        UInt8(198);
        Int16(-52) * var_1696800182810_86
    }));
    var var_1696800182810_124 : Class_1696800182810_116<UInt32> = Class_1696800182810_116<UInt32>();
    (match ((var_1696800182810_106 as Unit)) {
        case _ => 
            var_1696800182810_53;
            Option<Unit>.Some(())
        
    } ?? (var_1696800182810_124.var_1696800182810_127 <<= ((var_1696800182810_124.var_1696800182810_127) & 7)));
    var var_1696800182810_151 : ??Array<Unit> = (Int16(-51) as Option<Array<Unit>>);
    let var_1696800182810_299 : ?Array<Unit> = Option<Array<Unit>>.Some([(), (), (), (), (), (), (), (), (), ()]);
    func func_1696800182810_195<T0>(param_1696800182810_196 : UInt64, param_1696800182810_197 : Int64, optionalParam_1696800182810_198 ! : UInt32 = UInt32(Int32(UInt32(93))), namedParam_1696800182810_202 ! : Range<UInt64>) : Float64 { // block id: 203
        let var_1696800182810_234 : UInt64 = UInt64(UInt64(Int16(Int8(Int8(33)))));
        let var_1696800182810_303 : ?Bool = Option<Bool>.Some((((UInt64(UInt64(UInt8(151)))&127)..(UInt64(UInt64(71))&127):(Int64(UInt16(213))|1)) is Range<UInt32>));
        let var_1696800182810_335 : UInt32 = UInt32(126);
        if (Class_1696800182810_116<UInt32>.var_1696800182810_210[3]) { // block id: 224
            let var_1696800182810_242 : Int64 = 81;
            (Option<(Range<UInt64>, String, Float64, Bool, Rune)>.None ?? (((UInt64(var_1696800182810_234)&127)..(UInt64(UInt64(228))&127):(var_1696800182810_242|1)), "mYGWB@\\b_<", 105.0, false, r'J'));
            var var_1696800182810_283 : (Interface_1696800182810_120) -> Option<Option<Array<Unit>>> = func_1696800182810_249;
            Class_1696800182810_116<UInt32>()|>var_1696800182810_283;
            var var_1696800182810_288 : ?Bool = ((Option<Bool>.None as Option<Array<Unit>>) as Bool);
            match (var_1696800182810_288) {
                case _ => 
                    ()
                
            }
        } else if (match (try { // block id: 297
            var_1696800182810_299;
            var_1696800182810_303
        } finally { // block id: 312
            ();
            var_1696800182810_303
        }) {
            case _ => 
                var var_1696800182810_320 : UInt64 = UInt64(148);
                var_1696800182810_320++;
                Class_1696800182810_116<UInt32>();
                var_1696800182810_46
            
            case _ => 
                var_1696800182810_53;
                var var_1696800182810_329 : Float32 = Float32(Float32(-58.0));
                var_1696800182810_329 /= Float32((Int32(Float32(-85.0))) | 1);
                var_1696800182810_335 != UInt32(161)
            
        }) { // block id: 338
            Class_1696800182810_116<UInt32>.var_1696800182810_342;
            Class_1696800182810_116<UInt32>.var_1696800182810_342
        };
        var var_1696800182810_356 : Class_1696800182810_116<UInt32> = Class_1696800182810_116<UInt32>();
        match ((var_1696800182810_356.var_1696800182810_359 ?? var_1696800182810_299)) {
            case caseVar_1696800182810_364 => 
                var_1696800182810_299;
                var_1696800182810_53;
                (-48.0)
            
            case _ => 
                Option<Option<Array<Unit>>>.None;
                let var_1696800182810_373 : Float64 = 0.0;
                var_1696800182810_373
            
        }
    }
;
    let var_1696800182810_377 : UInt64 = UInt64(Int16(UInt8(UInt8(4))));
    let var_1696800182810_396 : Int64 = Int64(UInt8(200));
    func func_1696800182810_170<T0>(param_1696800182810_171 : Int32, param_1696800182810_172 : Range<Int32>, param_1696800182810_173 : UInt8, optionalParam_1696800182810_174 ! : Range<Int32> = ((Int32(Int32(119))&127)..=(Int32(Int32(90))&127):((-75)|1))) : Option<Array<Unit>> { // block id: 176
        var var_1696800182810_179 : Class_1696800182810_116<UInt32> = Class_1696800182810_116<UInt32>();
        var_1696800182810_179.var_1696800182810_182;
        var var_1696800182810_388 : Float64 = Float64(Float32(-80.0));
        var var_1696800182810_408 : UInt32 = UInt32(Int8(58));
        let var_1696800182810_414 : Interface_1696800182810_122 = Class_1696800182810_116<UInt32>();
        let var_1696800182810_449 : Range<UInt64> = ((UInt64(UInt64(UInt64(182)))&127)..=(UInt64(UInt64(118))&127):((-117)|1));
        func_1696800182810_195<Int32>(var_1696800182810_377 - match (var_1696800182810_53) {
            case _ => 
                var_1696800182810_388 /= Float64((Int32(85.0)) | 1);
                ();
                var_1696800182810_377
            
        }, var_1696800182810_396 * var_1696800182810_396, namedParam_1696800182810_202 : match ((Float32(-20.0) as (Range<UInt64>, String, Float64, Bool, Rune))) {
            case _ => 
                ((UInt32(var_1696800182810_408)&127)..=(UInt32(UInt32(197))&127):(var_1696800182810_396|1));
                var_1696800182810_414;
                ((UInt64(UInt64(63))&127)..=(UInt64(UInt64(201))&127):((-89)|1))
            
            case caseVar_1696800182810_419 : Float64 => 
                var_1696800182810_53;
                if (var_1696800182810_46) { ((UInt64(var_1696800182810_426)&127)..(UInt64(var_1696800182810_377)&127):(var_1696800182810_396|1)) } else { ((UInt64(var_1696800182810_426)&127)..=(UInt64(UInt64(251))&127):(var_1696800182810_396|1)) } 
            
            case caseVar_1696800182810_436 => 
                ();
                var_1696800182810_53;
                var var_1696800182810_444 : UInt64 = UInt64(127);
                if (false) { ((UInt64(var_1696800182810_444)&127)..(UInt64(UInt64(63))&127):((-29)|1)) } else { var_1696800182810_449 } 
            
            case caseVar_1696800182810_457 : Interface_1696800182810_120 => 
                if (var_1696800182810_46) { var_1696800182810_449 } else { ((UInt64(UInt64(154))&127)..=(UInt64(UInt64(97))&127):(var_1696800182810_396|1)) } 
            
            case _ => 
                if (var_1696800182810_46) { ((UInt64(UInt64(224))&127)..=(UInt64(UInt64(238))&127):(91|1)) } else { ((UInt64(UInt64(229))&127)..=(UInt64(UInt64(30))&127):((-79)|1)) } 
            
        });
        var_1696800182810_299
    }
;
    let var_1696800182810_474 : Int32 = Int32(5);
    var var_1696800182810_479 : Range<Int32> = ((Int32(Int32(UInt16(252)))&127)..(Int32(Int32(UInt16(Int8(-29))))&127):((-41)|1));
    (try { // block id: 147
        var_1696800182810_73;
        ();
        var_1696800182810_151
    } finally { // block id: 154
        var_1696800182810_53;
        var_1696800182810_157;
        var_1696800182810_151
    } ?? ((var_1696800182810_167 as Option<Array<Unit>>) ?? func_1696800182810_170<Interface_1696800182810_119>(var_1696800182810_474, ((Int32(Int32(-30))&127)..(Int32(Int32(61))&127):(66|1)), UInt8(7), optionalParam_1696800182810_174 : var_1696800182810_479)))
}

public func func_1696800182810_10(param_1696800182810_11 : UInt16) : Unit { // block id: 12
    var var_1696800182810_516 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    (([UInt64(26), UInt64(125), var_1696800182810_426, var_1696800182810_426, var_1696800182810_426, UInt64(174), var_1696800182810_426, UInt64(88), UInt64(165), UInt64(141)]|>func_1696800182810_30<Option<Option<Array<Unit>>>, UInt16>) ?? try { // block id: 500
        [(), (), (), var_1696800182810_506, var_1696800182810_506, var_1696800182810_53, var_1696800182810_53, var_1696800182810_506, (), ()]
    } finally { // block id: 514
        var_1696800182810_516
    })[1]
}

public func func_1696800182810_6(param_1696800182810_7 : Float32) : Unit { // block id: 8
    let var_1696800182810_520 : (UInt16) -> Unit = func_1696800182810_10;
    UInt16(24)|>var_1696800182810_520;
    var_1696800182810_53
}

main(): Int64 {
    try {
        var var_1696800182810_529 : Float32 = Float32(Float32(Float32(Float32(92.0))));
        [var_1696800182810_529, Float32(-49.0), var_1696800182810_529, Float32(34.0), var_1696800182810_529, Float32(25.0), Float32(78.0), var_1696800182810_529, var_1696800182810_529, Float32(-67.0)][7]|>func_1696800182810_6;
        Class_1696800182810_116<UInt32>.var_1696800182810_547
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var_1696800182810_86*var_1696800182810_86), 64)
        crccheck.updateBuffer(UInt64(var_1696800182810_106*var_1696800182810_106), 64)
        crccheck.updateBuffer(UInt64(var_1696800182810_157*var_1696800182810_157), 64)
        crccheck.updateBuffer(UInt64(var_1696800182810_426*var_1696800182810_426), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend<T0> Class_1696800182810_116<T0> {

}

