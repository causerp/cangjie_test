/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args

public let var_1659088402119_66 : Bool = false
let var_1659088402119_69 : Int16 = Int16(-125)
public var var_1659088402119_100 : Bool = false
var var_1659088402119_114 : Int64 = Int64(Int32(Int32(89)))
let var_1659088402119_160 : Unit = ()
public func func_1659088402119_21(param_1659088402119_22 : Int16) : Unit { // block id: 23

}

public enum Enum_1659088402119_31<T0, T1, T2> {
    defaultValue |
    enumValue_1659088402119_55(Bool, Bool)
}
main(): Int64 {
    try {
        UInt64(156);
        let var_1659088402119_25 : (Int16) -> Unit = { lambdaParameter_1659088402119_28 : Int16 =>  };
        let var_1659088402119_137 : Enum_1659088402119_31<UInt8, Range<Int8>, Range<UInt32>> = Enum_1659088402119_31<UInt8, Range<Int8>, Range<UInt32>>.enumValue_1659088402119_55((((UInt32(22)&127)..=(UInt32(4)&127):(101|1)) is Int8), true);
        func func_1659088402119_14<T0, T1>(namedParam_1659088402119_15 ! : Unit, optionalParam_1659088402119_16 ! : String = "?pQ!k9m ZI", namedParam_1659088402119_18 ! : Int32) : Int64 { // block id: 19
            let var_1659088402119_44 : Array<Enum_1659088402119_31<UInt8, Range<Int8>, Range<UInt32>>> = [Enum_1659088402119_31<UInt8, Range<Int8>, Range<UInt32>>.defaultValue, Enum_1659088402119_31<UInt8, Range<Int8>, Range<UInt32>>.defaultValue, Enum_1659088402119_31<UInt8, Range<Int8>, Range<UInt32>>.defaultValue, Enum_1659088402119_31<UInt8, Range<Int8>, Range<UInt32>>.defaultValue, Enum_1659088402119_31<UInt8, Range<Int8>, Range<UInt32>>.defaultValue, Enum_1659088402119_31<UInt8, Range<Int8>, Range<UInt32>>.defaultValue, Enum_1659088402119_31<UInt8, Range<Int8>, Range<UInt32>>.defaultValue, Enum_1659088402119_31<UInt8, Range<Int8>, Range<UInt32>>.defaultValue, Enum_1659088402119_31<UInt8, Range<Int8>, Range<UInt32>>.enumValue_1659088402119_55(true, true), Enum_1659088402119_31<UInt8, Range<Int8>, Range<UInt32>>.defaultValue];
            var var_1659088402119_82 : String = "HsOlod\"2-6";
            var var_1659088402119_94 : Int8 = Int8(Int8(Int8(121)));
            match (var_1659088402119_44[2]) {
                case enumValue_1659088402119_55(_ : Rune, _) => 
                    var_1659088402119_66;
                    var_1659088402119_69
                
                case caseVar_1659088402119_73 : Bool => 
                    var var_1659088402119_77 : Int64 = (-64);
                    var_1659088402119_77 = var_1659088402119_77;
                    var_1659088402119_82 = var_1659088402119_82;
                    Int16(101) % ((Int16(-88)) | 1)
                
                case enumValue_1659088402119_55(_, caseVar_1659088402119_90) => 
                    var_1659088402119_94--;
                    var_1659088402119_100 &&= caseVar_1659088402119_90;
                    var_1659088402119_69
                
                case caseVar_1659088402119_106 : Bool => 
                    namedParam_1659088402119_15;
                    Int16(53)
                
                case _ => 
                    var_1659088402119_114 &= 121;
                    Int16(-63)
                
            }|>var_1659088402119_25;
            -try { // block id: 122
                ();
                var var_1659088402119_132 : Bool = (true is (Int16) -> Unit);
                [Enum_1659088402119_31<UInt8, Range<Int8>, Range<UInt32>>.defaultValue, Enum_1659088402119_31<UInt8, Range<Int8>, Range<UInt32>>.enumValue_1659088402119_55(true, var_1659088402119_100), Enum_1659088402119_31<UInt8, Range<Int8>, Range<UInt32>>.defaultValue, Enum_1659088402119_31<UInt8, Range<Int8>, Range<UInt32>>.enumValue_1659088402119_55(var_1659088402119_132, var_1659088402119_132), var_1659088402119_137, Enum_1659088402119_31<UInt8, Range<Int8>, Range<UInt32>>.defaultValue, var_1659088402119_137, Enum_1659088402119_31<UInt8, Range<Int8>, Range<UInt32>>.defaultValue, Enum_1659088402119_31<UInt8, Range<Int8>, Range<UInt32>>.defaultValue, Enum_1659088402119_31<UInt8, Range<Int8>, Range<UInt32>>.defaultValue];
                -(-20)
            } catch (_) { // block id: 149
                91
            } finally { // block id: 151
                -91
            }
        }
;
        let var_1659088402119_156 : Int32 = Int32(89);
        func func_1659088402119_8<T0, T1, T2>(namedParam_1659088402119_9 ! : Float64) : Int64 { // block id: 10
            var var_1659088402119_163 : Int32 = Int32(UInt8(33));
            -(func_1659088402119_14<Range<Int16>, Int16>(namedParam_1659088402119_15 : (), namedParam_1659088402119_18 : var_1659088402119_156) + func_1659088402119_14<Range<Int16>, Int16>(namedParam_1659088402119_15 : var_1659088402119_160, namedParam_1659088402119_18 : var_1659088402119_163))
        }
;
        Int64(func_1659088402119_8<Range<UInt16>, Enum_1659088402119_31<UInt8, Range<Int8>, Range<UInt32>>, UInt8>(namedParam_1659088402119_9 : 123.0))
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var_1659088402119_69*var_1659088402119_69), 64)
        crccheck.updateBuffer(UInt64(var_1659088402119_114*var_1659088402119_114), 64)
        crccheck.updateBuffer(UInt64(var_1659088402119_156*var_1659088402119_156), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend<T0, T1, T2> Enum_1659088402119_31<T0, T1, T2> {

}

