/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args

public let var_1663073018938_65 : Int8 = Int8(Int8(UInt8(Int8(Int8(111)))))
public let var_1663073018938_89 : Float32 = Float32(Float32(Float32(-59.0)))
public var var_1663073018938_100 : UInt8 = UInt8(245)
public let var_1663073018938_108 : UInt64 = UInt64(154)
public let var_1663073018938_116 : UInt64 = UInt64(203)
public var var_1663073018938_158 : UInt32 = UInt32(121)
var var_1663073018938_161 : Unit = ()
let var_1663073018938_362 : String = "@M-|B=Fwdn"
var var_1663073018938_394 : Float32 = Float32(-11.0)
public var var_1663073018938_411 : Int32 = Int32(UInt32(Int16(UInt8(Int8(-12)))))
let var_1663073018938_422 : (Unit, Range<Int16>) = ((), ((Int16(Int16(-50))&127)..=(Int16(-92)&127):((Int64(UInt32(UInt8(103)))|1))))
let var_1663073018938_481 : (Range<UInt16>, Float64, UInt16, Unit, UInt32, (Float64, Int8, Bool, Bool), Int64) = (((UInt16(14)&127)..(UInt16(27)&127):((-62)|1)), 8.0, UInt16(15), (), UInt32(92), ((-121.0), Int8(31), true, true), Int64(Int16(UInt16(177))))
public let var_1663073018938_508 : Bool = true
public var var_1663073018938_564 : Bool = (Float32(Float32(-46.0)) is Enum_1663073018938_25)
public let var_1663073018938_580 : Range<Int16> = ((Int16(70)&127)..=(Int16(16)&127):((Int64(UInt64(5))|1)))
var var_1663073018938_644 : Rune = r'5'
public var var_1663073018938_671 : Bool = (Float64(Float64(18.0)) is Int64)
var var_1663073018938_687 : (Int8, Enum_1663073018938_25) = (Int8(-13), Enum_1663073018938_25.defaultValue)
public var var_1663073018938_693 : Class_1663073018938_134 = Class_1663073018938_134()
let var_1663073018938_715 : UInt8 = UInt8(104)
public var var_1663073018938_871 : Float32 = Float32(34.0)
public let var_1663073018938_879 : (UInt16, Array<Bool>, Float32) = (UInt16(UInt16(151)), [false, ((UInt32(74) as Option<Array<UInt64>>) is Int64), true, false, ((((68&127)..((-19)&127):((4|1))) as Array<UInt64>) is (Int64, (Unit, Range<Int16>), Range<Int32>) -> (Unit, Range<Int16>)), true, true, false, ("0d.1(kLQZw" is Enum_1663073018938_25), true], Float32(Float32(Float32(-45.0))))
public var var_1663073018938_956 : Option<Float64> = (Struct_1663073018938_238<UInt32, UInt32>() as Float64)
var var_1663073018938_968 : Float64 = 62.0
public let var_1663073018938_974 : (Float64, Int8, Bool, Bool) = ((-63.0), Int8(UInt8(70)), true, (Enum_1663073018938_366.defaultValue is UInt8))
public enum Enum_1663073018938_25 {
    defaultValue |
    enumValue_1663073018938_683(String)
}
public func func_1663073018938_211() : Bool { // block id: 32
    var var_1663073018938_39 : Bool = (Int32(UInt8(Int8(-68))) is UInt8);
    try { // block id: 36
        if (var_1663073018938_39) { ((-100.0), Int8(-117), var_1663073018938_39, true) } else { ((-35.0), Int8(-34), true, true) } 
    } catch (_) { // block id: 54
        (20.0, Int8(-55), var_1663073018938_39, false)
    } finally { // block id: 60
        ();
        (8.0, var_1663073018938_65, true, false)
    }[3]
}

public interface Interface_1663073018938_137<T0, T1> {
    func func_1663073018938_149(namedParam_1663073018938_150 ! : Int64, namedParam_1663073018938_151 ! : String, namedParam_1663073018938_152 ! : Float64, namedParam_1663073018938_153 ! : () -> Bool) : Unit { // block id: 155
        var_1663073018938_158++;
        var_1663073018938_161
    }

}

public open class Class_1663073018938_134 <: Interface_1663073018938_137<Int32, UInt64> {
    public init() { // block id: 136

    }
;
    private static let var_1663073018938_166 : Int64 = (-128);
    static let var_1663073018938_255 : (Unit, Range<Int16>) = ((), ((Int16(15)&127)..=(Int16(-112)&127):(((-100)|1))));
    public var var_1663073018938_706 : Int64 = (-107);
    private var var_1663073018938_712 : Float64 = 59.0;
    public init(param_1663073018938_142 : Unit) { // block id: 143
        var var_1663073018938_146 : Interface_1663073018938_137<Int32, UInt64> = Class_1663073018938_134();
        var var_1663073018938_170 : Enum_1663073018938_25 = Enum_1663073018938_25.defaultValue;
        var var_1663073018938_186 : String = "Y0%w|Y.\\jZ";
        let var_1663073018938_204 : () -> Bool = func_1663073018938_211;
        var_1663073018938_146.func_1663073018938_149(namedParam_1663073018938_150 : Class_1663073018938_134.var_1663073018938_166, namedParam_1663073018938_151 : match (var_1663073018938_170) {
            case defaultValue => 
                "N4s0crruWo"
            
            case _ : Float32 => 
                let var_1663073018938_180 : UInt8 = UInt8(139);
                var_1663073018938_180;
                if (false) { "b0WJH2L\\'!" } else { var_1663073018938_186 } 
            
            case caseVar_1663073018938_190 : UInt8 => 
                var_1663073018938_186
            
            case _ => 
                var_1663073018938_186
            
        }, namedParam_1663073018938_152 : (Option<Float64>.None ?? (-10.0)), namedParam_1663073018938_153 : var_1663073018938_204);
        let var_1663073018938_207 : Int16 = Int16(UInt8(236));
        var_1663073018938_207;
        func_1663073018938_211(namedParam_1663073018938_212 : Option<Float64>.Some(var_1663073018938_693.var_1663073018938_712), namedParam_1663073018938_213 : var_1663073018938_715)
    }

}


public struct Struct_1663073018938_238<T0, T1> {
    public init() { // block id: 240

    }
;
    public mut func func_1663073018938_245(namedParam_1663073018938_246 ! : Enum_1663073018938_25, optionalParam_1663073018938_247 ! : Enum_1663073018938_25 = Enum_1663073018938_25.defaultValue, namedParam_1663073018938_249 ! : Unit, namedParam_1663073018938_250 ! : Class_1663073018938_134) : (Unit, Range<Int16>) { // block id: 251
        Class_1663073018938_134.var_1663073018938_255
    }
;
    public var var_1663073018938_768 : Unit = ()
}

public func func_1663073018938_232(param_1663073018938_233 : Int64, param_1663073018938_234 : (Unit, Range<Int16>), namedParam_1663073018938_235 ! : Range<Int32>) : (Unit, Range<Int16>) { // block id: 236
    var var_1663073018938_242 : Struct_1663073018938_238<UInt32, UInt32> = Struct_1663073018938_238<UInt32, UInt32>();
    var var_1663073018938_265 : Enum_1663073018938_25 = Enum_1663073018938_25.defaultValue;
    let var_1663073018938_296 : Bool = (Enum_1663073018938_25.defaultValue is Int64);
    var var_1663073018938_329 : Int16 = Int16(UInt8(UInt8(Int8(Int8(-88)))));
    let var_1663073018938_359 : Class_1663073018938_134 = Class_1663073018938_134();
    var_1663073018938_242.func_1663073018938_245(namedParam_1663073018938_246 : try { // block id: 263
        var_1663073018938_265
    } catch (e: Exception) { // block id: 267
        var var_1663073018938_270 : Bool = ([UInt64(Int32(UInt32(183))), UInt64(UInt16(UInt16(227))), UInt64(UInt64(UInt16(235))), UInt64(152), UInt64(123), UInt64(24), UInt64(75), UInt64(UInt16(Int16(-21))), UInt64(30), UInt64(133)] is Enum_1663073018938_25);
        if (var_1663073018938_270) { Enum_1663073018938_25.defaultValue } else { Enum_1663073018938_25.defaultValue } 
    }, optionalParam_1663073018938_247 : if (var_1663073018938_296) { var_1663073018938_265 } else { var_1663073018938_265 } , namedParam_1663073018938_249 : match ((var_1663073018938_161, ((Int16(-25)&127)..=(Int16(-95)&127):((-64)|1)))) {
        case (_,_) => 
            var_1663073018938_161;
            var_1663073018938_158--
        
        case (caseVar_1663073018938_313 : Bool,caseVar_1663073018938_314) => 
            var_1663073018938_161
        
        case (_,_) => 
            """
U+*sJ
#F@lw
""";
            var_1663073018938_161
        
        case _ => 
            ();
            ();
            var var_1663073018938_336 : Int16 = Int16(Int16(21));
            var_1663073018938_329 ^= var_1663073018938_336
        
        case _ => 
            var var_1663073018938_343 : Int32 = Int32(Int8(-31));
            var_1663073018938_343 <<= ((Int32(-117)) & 7);
            ();
            var_1663073018938_343++
        
    }, namedParam_1663073018938_250 : (((Int8(104)&127)..=(Int8(-74)&127):(((-14)|1))), var_1663073018938_116, var_1663073018938_359, var_1663073018938_362)[2])
}

public enum Enum_1663073018938_366 {
    defaultValue
}

func func_1663073018938_226(param_1663073018938_227 : Rune) : Array<UInt64> { // block id: 228
    let var_1663073018938_373 : Int64 = 95;
    var var_1663073018938_439 : Range<Int32> = ((Int32(Int32(UInt16(UInt8(99))))&127)..(Int32(12)&127):((Int64(Int8(UInt8(Int8(-113))))|1)));
    func_1663073018938_232(match (Enum_1663073018938_366.defaultValue) {
        case defaultValue => 
            var_1663073018938_373
        
        case _ : Rune => 
            var_1663073018938_161;
            var var_1663073018938_380 : Range<Int16> = ((Int16(UInt8(121))&127)..(Int16(119)&127):(((-116)|1)));
            var_1663073018938_380;
            (-20) ** var_1663073018938_116
        
        case _ => 
            var_1663073018938_394 *= Float32(79.0);
            var var_1663073018938_399 : Bool = false;
            if (var_1663073018938_399) { r'J' } else { r'F' } ;
            var_1663073018938_373 & 40
        
        case defaultValue => 
            ();
            var_1663073018938_411;
            var_1663073018938_373
        
        case _ => 
            20
        
    }, var_1663073018938_422, namedParam_1663073018938_235 : if (true) { ((var_1663073018938_411&127)..(var_1663073018938_411&127):(((-122)|1))) } else { var_1663073018938_439 } )[0];
    var var_1663073018938_470 : Float64 = Float64(Float32(100.0));
    try { // block id: 454
        var_1663073018938_161;
        ();
        var var_1663073018938_460 : UInt16 = UInt16(163);
        let var_1663073018938_475 : Bool = true;
        (((var_1663073018938_460&127)..(UInt16(3)&127):(((-11)|1))), 58.0, UInt16(169), (), UInt32(171), (var_1663073018938_470, var_1663073018938_65, var_1663073018938_475, var_1663073018938_475), 44)
    } finally { // block id: 479
        var_1663073018938_481
    }[3];
    let var_1663073018938_526 : Array<UInt64> = [UInt64(84), UInt64(107), UInt64(155), UInt64(239), UInt64(UInt32(UInt32(UInt32(129)))), UInt64(31), UInt64(247), UInt64(UInt32(Int8(Int8(37)))), UInt64(UInt8(98)), UInt64(81)];
    (Option<Array<UInt64>>.Some(try { // block id: 504
        ();
        var_1663073018938_508 && var_1663073018938_508;
        [UInt64(52), UInt64(25), UInt64(73), UInt64(249), UInt64(86), UInt64(8), UInt64(115), UInt64(121), UInt64(90), UInt64(17)]
    } finally { // block id: 512
        var_1663073018938_161;
        [var_1663073018938_116, UInt64(58), var_1663073018938_116, UInt64(42), var_1663073018938_116, var_1663073018938_116, UInt64(45), UInt64(49), var_1663073018938_116, UInt64(134)]
    }) ?? var_1663073018938_526)
}



public func func_1663073018938_211(namedParam_1663073018938_212 ! : Option<Float64>, namedParam_1663073018938_213 ! : UInt8) : Unit { // block id: 214
    var var_1663073018938_635 : Struct_1663073018938_238<UInt32, UInt32> = Struct_1663073018938_238<UInt32, UInt32>();
    (if (var_1663073018938_508) { // block id: 633
        var_1663073018938_635;
        if (var_1663073018938_564) { r'a' } else { r'7' } 
    } else if (var_1663073018938_508) { // block id: 642
        var_1663073018938_644
    } else { // block id: 646
        var_1663073018938_564 ||= false;
        if (false) { r'k' } else { var_1663073018938_644 } 
    }|>{ lambdaParameter_1663073018938_548 : Rune => let var_1663073018938_599 : Array<UInt64> = [UInt64(153), UInt64(195), UInt64(19), UInt64(42), UInt64(231), UInt64(114), UInt64(8), UInt64(242), UInt64(32), UInt64(116)]; (if (match (Enum_1663073018938_25.defaultValue) {
        case caseVar_1663073018938_556 => 
            !var_1663073018938_508
        
        case defaultValue => 
            var_1663073018938_564
        
        case caseVar_1663073018938_570 : (Range<Int8>, UInt64, Class_1663073018938_134, String) => 
            var_1663073018938_161;
            true
        
        case _ => 
            var_1663073018938_411 |= Int32(16);
            var_1663073018938_580;
            true
        
    }) { (Option<Option<Array<UInt64>>>.Some(Option<Array<UInt64>>.None) ?? Option<Array<UInt64>>.None) } else { (if (var_1663073018938_564) { Option<Array<UInt64>>.Some(var_1663073018938_599) } else { Option<Array<UInt64>>.Some([UInt64(6), UInt64(19), UInt64(179), UInt64(16), UInt64(221), UInt64(77), UInt64(28), UInt64(160), UInt64(220), UInt64(212)]) } ) }  ?? (Option<(Range<Int8>, Int8, Bool, Array<UInt64>, Int32, Bool, Float32, Array<UInt64>)>.None ?? (((Int8(124)&127)..=(Int8(-55)&127):((-106)|1)), var_1663073018938_65, false, [UInt64(128), UInt64(47), UInt64(84), UInt64(41), UInt64(83), UInt64(103), UInt64(4), UInt64(28), UInt64(26), UInt64(179)], Int32(-111), false, Float32(-74.0), [UInt64(176), var_1663073018938_116, var_1663073018938_116, var_1663073018938_116, UInt64(247), UInt64(143), var_1663073018938_116, UInt64(253), var_1663073018938_116, var_1663073018938_116]))[3]) })[4];
    func func_1663073018938_656() : Unit { // block id: 657
        var var_1663073018938_664 : Int8 = Int8(-105);
        let var_1663073018938_679 : (Int8, Enum_1663073018938_25) = (Int8(81), Enum_1663073018938_25.enumValue_1663073018938_683(";$:=&N;Rn]"));
        let var_1663073018938_699 : Enum_1663073018938_25 = Enum_1663073018938_25.defaultValue;
        try { // block id: 661
            var_1663073018938_664++;
            ((-48.0), var_1663073018938_65, true, var_1663073018938_671);
            if (var_1663073018938_508) { var_1663073018938_679 } else { var_1663073018938_687 } 
        } finally { // block id: 691
            var_1663073018938_693;
            (-28);
            (Int8(-90), var_1663073018938_699)
        }[1];
        var_1663073018938_693.var_1663073018938_706--
    }
;
    func_1663073018938_656()
}



main(): Int64 {
    try {
        let var_1663073018938_75 : Enum_1663073018938_25 = Enum_1663073018938_25.defaultValue;
        func func_1663073018938_28() : Enum_1663073018938_25 { // block id: 29
            func_1663073018938_211();
            var_1663073018938_75
        }
;
        let var_1663073018938_81 : Unit = ();
        let var_1663073018938_796 : Bool = false;
        func func_1663073018938_18<T0, T1, T2>(param_1663073018938_19 : UInt8, optionalParam_1663073018938_20 ! : Int16 = Int16(6)) : Bool { // block id: 22
            var var_1663073018938_104 : Int64 = Int64(UInt64(225));
            match (match (func_1663073018938_28()) {
                    case defaultValue => 
                        var_1663073018938_81;
                        var_1663073018938_81;
                        UInt64(141)
                    
                    case defaultValue => 
                        var_1663073018938_89;
                        UInt64(2) | UInt64(245)
                    
                    case _ => 
                        var_1663073018938_100 = param_1663073018938_19;
                        var_1663073018938_104;
                        var_1663073018938_108
                    
                }) {
                case caseVar_1663073018938_112 => 
                    var_1663073018938_116 % ((UInt64(111)) | 1);
                    optionalParam_1663073018938_20 | Int16(71)
                
                case _ => 
                    var_1663073018938_81;
                    var var_1663073018938_126 : Unit = ();
                    var_1663073018938_126;
                    optionalParam_1663073018938_20 & optionalParam_1663073018938_20
                
            };
            var var_1663073018938_139 : Class_1663073018938_134 = Class_1663073018938_134(());
            try { // block id: 132
                var_1663073018938_139.var_1663073018938_706;
                let var_1663073018938_730 : Array<UInt64> = [UInt64(17), UInt64(68), UInt64(217), UInt64(77), UInt64(194), UInt64(33), UInt64(71), UInt64(184), UInt64(121), UInt64(98)];
                let var_1663073018938_743 : UInt64 = UInt64(35);
                ((((Int8(-79)&127)..(var_1663073018938_65&127):((var_1663073018938_104|1))), var_1663073018938_65, true, var_1663073018938_730, var_1663073018938_411, var_1663073018938_564, Float32(106.0), [UInt64(65), var_1663073018938_108, UInt64(191), UInt64(141), var_1663073018938_116, UInt64(52), var_1663073018938_743, var_1663073018938_116, UInt64(40), var_1663073018938_108]), ((UInt32(203)&127)..(UInt32(82)&127):(37|1)))[0];
                (Option<UInt16>.None ?? UInt16(16))
            } finally { // block id: 757
                let var_1663073018938_760 : UInt16 = UInt16(UInt16(44));
                Option<UInt16>.Some(var_1663073018938_760);
                let var_1663073018938_765 : Struct_1663073018938_238<UInt32, UInt32> = Struct_1663073018938_238<UInt32, UInt32>();
                var_1663073018938_765.var_1663073018938_768;
                var_1663073018938_760
            };
            try { // block id: 774
                116;
                ();
                [var_1663073018938_671, var_1663073018938_564, var_1663073018938_564, false, var_1663073018938_564, var_1663073018938_671, var_1663073018938_508, false, false, false]
            } finally { // block id: 788
                if (true) { [false, var_1663073018938_508, true, var_1663073018938_796, var_1663073018938_671, var_1663073018938_796, true, var_1663073018938_508, true, false] } else { [false, false, false, false, false, false, false, false, false, false] } 
            }[0]
        }
;
        let var_1663073018938_854 : UInt16 = UInt16(Int16(Int16(Int16(100))));
        func func_1663073018938_7(namedParam_1663073018938_8 ! : Bool, namedParam_1663073018938_9 ! : Bool, optionalParam_1663073018938_10 ! : UInt8 = UInt8(UInt8(170)), optionalParam_1663073018938_13 ! : String = ###"du}o;8/-}B"###) : Float32 { // block id: 15
            var loopTimeVar_1663073018938_809 : Int64 = 0;
            while ((func_1663073018938_18<UInt64, Enum_1663073018938_25, Range<Int64>>(UInt8(72))) && loopTimeVar_1663073018938_809 < 100 ) {
                loopTimeVar_1663073018938_809++;

            };
            let var_1663073018938_833 : UInt64 = UInt64(243);
            Option<Option<Array<UInt64>>>.Some(try { // block id: 812
                Option<Array<UInt64>>.None
            } finally { // block id: 814
                if (false) { Option<Float64>.Some((-116.0)) } else { Option<Float64>.None } ;
                var var_1663073018938_826 : UInt64 = UInt64(88);
                Option<Array<UInt64>>.Some([UInt64(13), UInt64(113), UInt64(101), var_1663073018938_826, UInt64(85), UInt64(207), UInt64(104), UInt64(56), var_1663073018938_833, var_1663073018938_833])
            });
            if (if (false) { // block id: 841
                !true
            } else { // block id: 844
                var_1663073018938_564 &&= var_1663073018938_796;
                false
            }) { // block id: 849
                if (false) { (var_1663073018938_854, [var_1663073018938_671, true, false, true, var_1663073018938_508, namedParam_1663073018938_9, var_1663073018938_796, var_1663073018938_564, true, false], var_1663073018938_871) } else { (var_1663073018938_854, [true, true, true, true, true, true, false, false, false, true], var_1663073018938_89) } 
            } else { // block id: 877
                var_1663073018938_879
            }[2]
        }
;
        func_1663073018938_7(namedParam_1663073018938_8 : false || var_1663073018938_671, namedParam_1663073018938_9 : func_1663073018938_18<UInt64, Enum_1663073018938_25, Range<Int64>>(UInt8(101), optionalParam_1663073018938_20 : Int16(-111)), optionalParam_1663073018938_10 : match (Option<Option<Array<UInt64>>>.Some(Option<Array<UInt64>>.Some([UInt64(98), UInt64(232), var_1663073018938_108, var_1663073018938_116, var_1663073018938_116, var_1663073018938_108, UInt64(150), UInt64(52), UInt64(241), var_1663073018938_108]))) {
            case _ : Float32 => 
                var_1663073018938_100 >> ((var_1663073018938_100) & 7)
            
            case _ => 
                UInt8(164)
            
            case _ => 
                var var_1663073018938_939 : Unit = ();
                var_1663073018938_939;
                var var_1663073018938_943 : Int8 = Int8(-68);
                var_1663073018938_943 *= Int8(114);
                UInt8(201) / ((var_1663073018938_100) | 1)
            
        });
        var var_1663073018938_965 : Range<UInt16> = ((UInt16(89)&127)..(UInt16(29)&127):((-94)|1));
        var var_1663073018938_999 : ?Int64 = Option<Int64>.None;
        let var_1663073018938_1017 : Int64 = Int64(UInt8(16));
        (match (var_1663073018938_956) {
            case caseVar_1663073018938_961 : Option<Float64> => 
                let var_1663073018938_983 : Int64 = 112;
                (var_1663073018938_965, var_1663073018938_968, var_1663073018938_854, (), var_1663073018938_158, var_1663073018938_974, var_1663073018938_983);
                Option<Int64>.Some(76)
            
            case caseVar_1663073018938_989 => 
                Option<Int64>.None
            
            case caseVar_1663073018938_994 => 
                if (false) { var_1663073018938_999 } else { var_1663073018938_999 } 
            
            case _ => 
                ();
                [UInt64(26), UInt64(190), UInt64(106), UInt64(80), UInt64(32), UInt64(236), UInt64(237), UInt64(32), UInt64(71), UInt64(164)];
                var_1663073018938_999
            
        } ?? if (var_1663073018938_508) { // block id: 1009
            var_1663073018938_879;
            (-64) + (-14)
        } else { // block id: 1014
            var_1663073018938_1017 >> ((var_1663073018938_1017) & 7)
        })
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var_1663073018938_100*var_1663073018938_100), 64)
        crccheck.updateBuffer(UInt64(var_1663073018938_108*var_1663073018938_108), 64)
        crccheck.updateBuffer(UInt64(var_1663073018938_854*var_1663073018938_854), 64)
        crccheck.updateBuffer(UInt64(var_1663073018938_1017*var_1663073018938_1017), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Enum_1663073018938_25 {

}

