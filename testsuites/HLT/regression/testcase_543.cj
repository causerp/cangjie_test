/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args

public let var_1700263933283_9 : Struct_1700263933283_5 = Struct_1700263933283_5()
var var_1700263933283_33 : Interface_1700263933283_27 = Class_1700263933283_19()
public var var_1700263933283_49 : Unit = ()
var var_1700263933283_81 : Bool = ((UInt64(134) as Unit) is Struct_1700263933283_5)
const var_1700263933283_86 : Int32 = -8
let var_1700263933283_89 : String = "h_Hx]/+L(P"
const var_1700263933283_238 : UInt32 = 253
const var_1700263933283_247 : Int16 = 116
const var_1700263933283_255 : Bool = true
public const var_1700263933283_263 : Float32 = 41.0
const var_1700263933283_266 : Unit = ()
public const var_1700263933283_367 : UInt16 = 222
public const var_1700263933283_382 : Float64 = 90.0
const var_1700263933283_388 : UInt8 = 216
const var_1700263933283_398 : Rune = r'k'
const var_1700263933283_410 : Rune = r'W'
let var_1700263933283_543 : Class_1700263933283_539 = Class_1700263933283_539()
public var var_1700263933283_605 : Int32 = Int32(-38)
public var var_1700263933283_644 : ??Unit = Option<Option<Unit>>.None
public var var_1700263933283_672 : Class_1700263933283_19 = Class_1700263933283_19()
public var var_1700263933283_710 : (UInt16, Unit) = (UInt16(UInt8(Int8(66))), ())
public var var_1700263933283_722 : Int64 = Int64(-31)
const var_1700263933283_831 : Int = -56
let var_1700263933283_844 : Interface_1700263933283_22 = Class_1700263933283_19()
public struct Struct_1700263933283_5 {
    public init() { // block id: 7

    }
;
    static var var_1700263933283_756 : Int64 = Int64(-84);
    static func func_1700263933283_62(optionalParam_1700263933283_63 ! : Float64 = Float64(Float64(-113.0))) : Option<Option<Unit>> { // block id: 66
        var loopTimeVar_1700263933283_769 : Int64 = 0;
        (func_1700263933283_69(var_1700263933283_756, do {
            loopTimeVar_1700263933283_769++;
            var_1700263933283_605++;
            var var_1700263933283_765 : Int16 = Int16(-27);
            var_1700263933283_765 *= Int16(75)
        } while ((var_1700263933283_255) && loopTimeVar_1700263933283_769 < 100 ) ) as Option<Unit>)
    }
;
    public static prop var_1700263933283_782 : Option<UInt16> { // block id: 783
        get() { // block id: 785
            ();
            (((((Int16(Int16(105))&127)..(Int16(Int16(47))&127):(Int64(-18)|1)) is Interface_1700263933283_27), Int32(UInt32(6))), """
#+,7(
t%fkX
""");
            Option<UInt16>.None
        }

    };
    func func_1700263933283_12(param_1700263933283_13 : UInt64, param_1700263933283_14 : Float32, namedParam_1700263933283_15 ! : Int16, namedParam_1700263933283_16 ! : UInt32) : Unit { // block id: 17
        func_1700263933283_69<UInt32>().var_1700263933283_37;
        var_1700263933283_49;
        var loopTimeVar_1700263933283_799 : Int = 0;
        ((func_1700263933283_62() ?? (var_1700263933283_255 as Unit)) ?? while (((Option<Bool>.None ?? var_1700263933283_255)) && loopTimeVar_1700263933283_799 < 100 ) {
            loopTimeVar_1700263933283_799++;
            var_1700263933283_782
        })
    }

}

sealed public interface Interface_1700263933283_26 {

}

public interface Interface_1700263933283_27 <: Interface_1700263933283_26 {

}

public interface Interface_1700263933283_25<T0, T1> <: Interface_1700263933283_26 & Interface_1700263933283_27 {

}

public interface Interface_1700263933283_28 {
    static func func_1700263933283_617(param_1700263933283_618 : Interface_1700263933283_25<Bool, Int64>) : Option<UInt16> { // block id: 619
        (if (var_1700263933283_255) { // block id: 623
            var_1700263933283_89
        } else { // block id: 625
            if (true) { "[#KZ]mx(!~" } else { """
@v5]X
Sefgw
""" } 
        } as UInt16)
    }

}

public interface Interface_1700263933283_24<T0> <: Interface_1700263933283_25<Bool, Int64> & Interface_1700263933283_28 {
    static func func_1700263933283_617(param_1700263933283_618 : Interface_1700263933283_25<Bool, Int64>) : Option<UInt16> { // block id: 619
        (if (var_1700263933283_255) { // block id: 623
            var_1700263933283_89
        } else { // block id: 625
            if (true) { "[#KZ]mx(!~" } else { """
@v5]X
Sefgw
""" } 
        } as UInt16)
    }

}

sealed public interface Interface_1700263933283_23 <: Interface_1700263933283_24<UInt8> & Interface_1700263933283_27 {
    static func func_1700263933283_617(param_1700263933283_618 : Interface_1700263933283_25<Bool, Int64>) : Option<UInt16> { // block id: 619
        (if (var_1700263933283_255) { // block id: 623
            var_1700263933283_89
        } else { // block id: 625
            if (true) { "[#KZ]mx(!~" } else { """
@v5]X
Sefgw
""" } 
        } as UInt16)
    }

}

sealed public interface Interface_1700263933283_22 <: Interface_1700263933283_23 {
    static func func_1700263933283_617(param_1700263933283_618 : Interface_1700263933283_25<Bool, Int64>) : Option<UInt16> { // block id: 619
        (if (var_1700263933283_255) { // block id: 623
            var_1700263933283_89
        } else { // block id: 625
            if (true) { "[#KZ]mx(!~" } else { """
@v5]X
Sefgw
""" } 
        } as UInt16)
    }

}

public open class Class_1700263933283_19 <: Interface_1700263933283_22 & Interface_1700263933283_27 {
    public init() { // block id: 21

    }
;
    mut prop var_1700263933283_37 : String { // block id: 38
        get() { // block id: 40
            ();
            ();
            ###"v3(|'GpPrO"###;
            var_1700263933283_860
        }

        set(Value) { // block id: 46
            ();
            var_1700263933283_860 = Value
        }

    };
    public static const var_1700263933283_546 : Float32 = 119.0;
    init(param_1700263933283_533 : UInt16, param_1700263933283_534 : Rune, namedParam_1700263933283_535 ! : UInt16) { // block id: 536
        ();
        Class_1700263933283_19.var_1700263933283_546
    }
;
    public static const var_1700263933283_675 : Unit = ();
    var var_1700263933283_860 : String = """
F#kL'
(E9Gy
""";
    public static func func_1700263933283_617(param_1700263933283_618 : Interface_1700263933283_25<Bool, Int64>) : Option<UInt16> { // block id: 619
        (if (var_1700263933283_255) { // block id: 623
            var_1700263933283_89
        } else { // block id: 625
            if (true) { "[#KZ]mx(!~" } else { """
@v5]X
Sefgw
""" } 
        } as UInt16)
    }

}

func func_1700263933283_69<T0>() : Class_1700263933283_19 { // block id: 31
    var_1700263933283_33;
    Class_1700263933283_19()
}



public const func func_1700263933283_228(namedParam_1700263933283_229 ! : Rune) : Unit { // block id: 230

}

const func func_1700263933283_326(param_1700263933283_327 : Rune, namedParam_1700263933283_328 ! : Float32, optionalParam_1700263933283_329 ! : Unit = (), namedParam_1700263933283_331 ! : UInt16) : UInt8 { // block id: 332
    const func func_1700263933283_341(param_1700263933283_342 : Int16, namedParam_1700263933283_343 ! : UInt8, optionalParam_1700263933283_344 ! : Int64 = -83, namedParam_1700263933283_346 ! : Unit) : UInt8 { // block id: 347
        var_1700263933283_263;
        ();
        200
    }
;
    const func func_1700263933283_336() : UInt8 { // block id: 337
        ();
        ();
        const var_1700263933283_364 : Int = 42;
        const func func_1700263933283_354<T0>(optionalParam_1700263933283_355 ! : UInt16 = 174, namedParam_1700263933283_357 ! : Bool, optionalParam_1700263933283_358 ! : Float64 = -73.0, optionalParam_1700263933283_360 ! : Int8 = 7) : Int64 { // block id: 362
            var_1700263933283_364
        }
;
        func_1700263933283_341(-43, namedParam_1700263933283_343 : 53, optionalParam_1700263933283_344 : func_1700263933283_354<UInt64>(optionalParam_1700263933283_355 : var_1700263933283_367, namedParam_1700263933283_357 : true, optionalParam_1700263933283_358 : -1.0), namedParam_1700263933283_346 : var_1700263933283_266)
    }
;
    (func_1700263933283_336() / ((220) | 1)) * 97
}

public const func func_1700263933283_306(optionalParam_1700263933283_307 ! : UInt16 = 156, namedParam_1700263933283_309 ! : UInt32, optionalParam_1700263933283_310 ! : UInt16 = 252, optionalParam_1700263933283_312 ! : Unit = ()) : UInt8 { // block id: 314
    var_1700263933283_247;
    const var_1700263933283_375 : Rune = r'B';
    const func func_1700263933283_317(param_1700263933283_318 : Int32, param_1700263933283_319 : Float64) : UInt8 { // block id: 320
        const var_1700263933283_323 : UInt8 = 105;
        var_1700263933283_323 | func_1700263933283_326(var_1700263933283_375, namedParam_1700263933283_328 : 27.0, optionalParam_1700263933283_329 : (), namedParam_1700263933283_331 : var_1700263933283_367)
    }
;
    func_1700263933283_317(-101, var_1700263933283_382)
}

public const func func_1700263933283_293(param_1700263933283_294 : Int16, optionalParam_1700263933283_295 ! : Int16 = 32, optionalParam_1700263933283_297 ! : UInt64 = 208) : Unit { // block id: 299
    func_1700263933283_228(namedParam_1700263933283_229 : r'2');
    192 * (func_1700263933283_306(namedParam_1700263933283_309 : 39, optionalParam_1700263933283_310 : 205) >> (((var_1700263933283_388 & 158)) & 7));
    var_1700263933283_266
}

public const func func_1700263933283_288(optionalParam_1700263933283_289 ! : UInt32 = 222) : Float64 { // block id: 291
    func_1700263933283_293(-76, optionalParam_1700263933283_295 : 67);
    var_1700263933283_382
}

const func func_1700263933283_283() : Rune { // block id: 284
    -92.0 * func_1700263933283_288(optionalParam_1700263933283_289 : 69);
    var_1700263933283_266;
    var_1700263933283_398
}

public const func func_1700263933283_277<T0>(param_1700263933283_278 : UInt32, param_1700263933283_279 : Int8) : Unit { // block id: 280
    func_1700263933283_228(namedParam_1700263933283_229 : func_1700263933283_283());
    -18.0;
    var_1700263933283_266
}

const func func_1700263933283_273(param_1700263933283_274 : Float32) : Float64 { // block id: 275
    func_1700263933283_277<Int8>(var_1700263933283_238, -110);
    ();
    57.0
}

public const func func_1700263933283_258(param_1700263933283_259 : Unit, namedParam_1700263933283_260 ! : UInt32) : Rune { // block id: 261
    var_1700263933283_263;
    var_1700263933283_266;
    const func func_1700263933283_270() : Bool { // block id: 271
        func_1700263933283_273(var_1700263933283_263);
        true
    }
;
    if (func_1700263933283_270()) { r'D' } else { var_1700263933283_410 } 
}

const func func_1700263933283_172(param_1700263933283_173 : String) : Rune { // block id: 174
    const var_1700263933283_194 : Float64 = -35.0;
    const func func_1700263933283_185() : Float64 { // block id: 186
        const var_1700263933283_188 : Float32 = 13.0;
        var_1700263933283_188;
        239;
        const var_1700263933283_219 : Int = 85;
        const func func_1700263933283_224(param_1700263933283_225 : Int16) : Int64 { // block id: 226
            func_1700263933283_228(namedParam_1700263933283_229 : r'P');
            -106;
            var_1700263933283_219
        }
;
        const func func_1700263933283_199(param_1700263933283_200 : UInt32, optionalParam_1700263933283_201 ! : UInt32 = 92, namedParam_1700263933283_203 ! : Float64, namedParam_1700263933283_204 ! : UInt16) : Int64 { // block id: 205
            -102 % ((-56) | 1);
            const var_1700263933283_210 : Unit = ();
            var_1700263933283_210;
            ((-82 ^ 100) * (var_1700263933283_219 * var_1700263933283_219)) % (((func_1700263933283_224(108) / ((func_1700263933283_224(28)) | 1))) | 1)
        }
;
        const var_1700263933283_243 : UInt16 = 169;
        (var_1700263933283_194 ** 104.0) ** (func_1700263933283_199(var_1700263933283_238, optionalParam_1700263933283_201 : var_1700263933283_238, namedParam_1700263933283_203 : -87.0, namedParam_1700263933283_204 : var_1700263933283_243) ^ func_1700263933283_224(var_1700263933283_247))
    }
;
    const var_1700263933283_420 : Rune = r'a';
    const func func_1700263933283_178(param_1700263933283_179 : Int16, param_1700263933283_180 : Int8, optionalParam_1700263933283_181 ! : Float32 = 119.0) : Rune { // block id: 183
        func_1700263933283_185();
        const var_1700263933283_251 : Rune = r'p';
        func_1700263933283_228(namedParam_1700263933283_229 : var_1700263933283_251);
        if (var_1700263933283_255) { func_1700263933283_258(var_1700263933283_266, namedParam_1700263933283_260 : var_1700263933283_238) } else { (if ((false && false)) { var_1700263933283_398 } else { var_1700263933283_420 } ) } 
    }
;
    const var_1700263933283_424 : Int8 = -41;
    if (false) { func_1700263933283_178(var_1700263933283_247, var_1700263933283_424, optionalParam_1700263933283_181 : var_1700263933283_263) } else { (if (false) { (if (false) { var_1700263933283_398 } else { r'T' } ) } else { (if (var_1700263933283_255) { var_1700263933283_398 } else { var_1700263933283_398 } ) } ) } 
}

const func func_1700263933283_135(param_1700263933283_136 : Unit) : Int16 { // block id: 137
    const var_1700263933283_139 : Unit = ();
    var_1700263933283_139;
    const var_1700263933283_168 : UInt64 = 191;
    const func func_1700263933283_157(namedParam_1700263933283_158 ! : Rune, namedParam_1700263933283_159 ! : Int8, namedParam_1700263933283_160 ! : UInt16, namedParam_1700263933283_161 ! : UInt16) : UInt64 { // block id: 162
        const var_1700263933283_164 : Float32 = -79.0;
        var_1700263933283_164;
        var_1700263933283_168 ^ var_1700263933283_168
    }
;
    const func func_1700263933283_142(optionalParam_1700263933283_143 ! : UInt32 = 54, optionalParam_1700263933283_145 ! : Unit = ()) : Unit { // block id: 147
        const func func_1700263933283_151(optionalParam_1700263933283_152 ! : UInt64 = 136) : Int8 { // block id: 154
            const var_1700263933283_442 : UInt = 185;
            func_1700263933283_157(namedParam_1700263933283_158 : func_1700263933283_172("n'`\"!\\B.a{N"), namedParam_1700263933283_159 : -51, namedParam_1700263933283_160 : 137, namedParam_1700263933283_161 : var_1700263933283_367) % ((var_1700263933283_442) | 1);
            8
        }
;
        -102 * func_1700263933283_151();
        122;
        ()
    }
;
    func_1700263933283_142(optionalParam_1700263933283_143 : 155, optionalParam_1700263933283_145 : var_1700263933283_266);
    -19
}

public func func_1700263933283_130(param_1700263933283_131 : Rune) : Option<Option<Unit>> { // block id: 132
    var var_1700263933283_460 : Int16 = Int16(UInt16(UInt16(71)));
    match (((Option<Unit>.Some(var_1700263933283_266) ?? ())|>func_1700263933283_135)) {
        case -98 => 
            var_1700263933283_460 %= ((var_1700263933283_460) | 1)
        
        case 36 | 35 => 
            ()
        
        case _ => 
            ()
        
        case _ => 
            var_1700263933283_266;
            ()
        
    };
    (try { // block id: 480
        var_1700263933283_460--;
        Class_1700263933283_19();
        Class_1700263933283_19()
    } finally { // block id: 485
        Option<Option<Unit>>.Some(Option<Unit>.None);
        Class_1700263933283_19();
        Class_1700263933283_19()
    } as Option<Unit>)
}

public open class Class_1700263933283_539 <: Class_1700263933283_19 {
    public init() { // block id: 541

    }
;
    public static func func_1700263933283_617(param_1700263933283_618 : Interface_1700263933283_25<Bool, Int64>) : Option<UInt16> { // block id: 619
        (if (var_1700263933283_255) { // block id: 623
            var_1700263933283_89
        } else { // block id: 625
            if (true) { "[#KZ]mx(!~" } else { """
@v5]X
Sefgw
""" } 
        } as UInt16)
    }

    static init() {
    }
}


func func_1700263933283_124(param_1700263933283_125 : Option<Option<Unit>>) : Interface_1700263933283_28 { // block id: 126
    var var_1700263933283_496 : UInt16 = UInt16(95);
    (((var_1700263933283_398|>func_1700263933283_130) ?? try { // block id: 493
        var_1700263933283_496 -= UInt16(52);
        var_1700263933283_9;
        Option<Unit>.Some(())
    } catch (_) { // block id: 502
        Option<Unit>.None
    } finally { // block id: 504
        var_1700263933283_247;
        let var_1700263933283_508 : UInt64 = UInt64(Int16(Int16(10)));
        var_1700263933283_508 & UInt64(68);
        var var_1700263933283_516 : ?Unit = (UInt32(86) as Unit);
        if (false) { var_1700263933283_516 } else { Option<Unit>.None } 
    }) ?? try { // block id: 521

    } catch (_) { // block id: 522

    });
    var_1700263933283_238 & try { // block id: 526
        ();
        UInt32(241)
    } finally { // block id: 529
        var_1700263933283_238
    };
    var var_1700263933283_561 : Array<UInt16> = [UInt16(30), UInt16(UInt8(252)), UInt16(206), UInt16(UInt16(UInt8(UInt8(136)))), UInt16(Int16(Int16(Int8(25)))), UInt16(131), UInt16(250), UInt16(UInt8(196)), UInt16(Int16(UInt16(20))), UInt16(Int8(Int8(UInt8(166))))];
    let var_1700263933283_634 : (UInt16, Unit) = (UInt16(UInt8(164)), ());
    Class_1700263933283_19(-var_1700263933283_561[4], if (if (var_1700263933283_81) { // block id: 590
        var_1700263933283_81 && var_1700263933283_255
    } else { // block id: 594
        false
    }) { // block id: 596
        if (false) { var_1700263933283_398 } else { r'G' } 
    } else { // block id: 601
        ();
        var_1700263933283_605 -= Int32(101);
        r'M'
    }, namedParam_1700263933283_535 : (Interface_1700263933283_28.func_1700263933283_617(Class_1700263933283_539()) ?? var_1700263933283_634[0]))
}


func func_1700263933283_69(param_1700263933283_70 : Int64, param_1700263933283_71 : Unit) : Int64 { // block id: 72
    var loopTimeVar_1700263933283_646 : Range<UInt64> = ((UInt64(UInt64(102))&127)..(UInt64(UInt64(Int16(UInt16(155))))&127):(Int64(Int8(38))|1));
    for (i in loopTimeVar_1700263933283_646 where ((var_1700263933283_81, var_1700263933283_86), var_1700263933283_89)[0][0]) {
        var var_1700263933283_96 : ?Unit = Option<Unit>.None;
        match (var_1700263933283_96) {
            case _ : Interface_1700263933283_27 => 
                Class_1700263933283_19();
                ();
                ()
            
            case caseVar_1700263933283_106 => 
                ();
                ();
                ()
            
            case _ => 
                var_1700263933283_81 &&= var_1700263933283_81
            
            case _ => 
                var_1700263933283_49;
                ();
                ()
            
        };
        let var_1700263933283_641 : (Option<Option<Unit>>) -> Interface_1700263933283_28 = func_1700263933283_124;
        var_1700263933283_644|>var_1700263933283_641
    };
    var var_1700263933283_662 : ?Interface_1700263933283_23 = (((UInt64(UInt64(Int64(-109)))&127)..(UInt64(UInt64(146))&127):(Int64(-96)|1)) as Interface_1700263933283_23);
    try { // block id: 655
        var_1700263933283_662.getOrThrow();
        ();
        Class_1700263933283_19.var_1700263933283_675
    } finally { // block id: 677
        ();
        var var_1700263933283_682 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
        var_1700263933283_682[1]
    };
    match (try { // block id: 697
        (var_1700263933283_367, var_1700263933283_266)
    } catch (_) { // block id: 701
        ();
        (UInt16(93), ())
    } finally { // block id: 706
        ();
        ();
        var_1700263933283_710
    }) {
        case (_,_ : ((Bool, Int32), String)) => 
            var_1700263933283_266;
            var_1700263933283_722 ^= Int64(45);
            var_1700263933283_722
        
        case caseVar_1700263933283_728 : Rune => 
            var var_1700263933283_732 : UInt8 = UInt8(UInt8(Int8(UInt8(218))));
            var_1700263933283_732 -= var_1700263933283_732;
            if (true) { var_1700263933283_89 } else { ###"T]sM/j~Y|!"### } ;
            Int64(-93)
        
        case (_,caseVar_1700263933283_745) => 
            Int64(-120) + Int64(116)
        
        case _ => 
            Class_1700263933283_19();
            var_1700263933283_722
        
    }
}


main(): Int64 {
    try {
        var_1700263933283_9.func_1700263933283_12(UInt64(118), Float32(Float32(61.0)), namedParam_1700263933283_15 : if (var_1700263933283_255) { // block id: 805
            var_1700263933283_266;
            ();
            Int16(114)
        } else { // block id: 809
            Option<UInt16>.Some(var_1700263933283_367);
            Int16(111)
        }, namedParam_1700263933283_16 : (Option<Interface_1700263933283_23>.Some(Class_1700263933283_539()), true, ((UInt16(UInt16(65))&127)..(UInt16(UInt16(175))&127):(Int64(-4)|1)), ((UInt8(UInt8(0))&127)..=(UInt8(var_1700263933283_388)&127):(var_1700263933283_722|1)), UInt32(165), var_1700263933283_543, """
 ;yZr
F([d}
""", ((Int16(var_1700263933283_247)&127)..(Int16(Int16(9))&127):(var_1700263933283_831|1)))[4]);
        let var_1700263933283_848 : Interface_1700263933283_26 = Class_1700263933283_19();
        match (try { // block id: 836
            ();
            ();
            var var_1700263933283_840 : Interface_1700263933283_26 = Class_1700263933283_19();
            var_1700263933283_840
        } finally { // block id: 842
            var_1700263933283_844;
            var_1700263933283_266;
            var_1700263933283_848
        }) {
            case _ : Array<Unit> => 
                Int64(99)
            
            case _ => 
                var_1700263933283_831
            
        }
        // CRC Check All Variables
        var crcCheck = CrcCheck(5000, 32)
        crcCheck.updateBuffer(UInt64(var_1700263933283_86*var_1700263933283_86), 64)
        crcCheck.updateBuffer(UInt64(var_1700263933283_238*var_1700263933283_238), 64)
        crcCheck.updateBuffer(UInt64(var_1700263933283_247*var_1700263933283_247), 64)
        crcCheck.updateBuffer(UInt64(var_1700263933283_367*var_1700263933283_367), 64)
        crcCheck.updateBuffer(UInt64(var_1700263933283_388*var_1700263933283_388), 64)
        crcCheck.updateBuffer(UInt64(var_1700263933283_605*var_1700263933283_605), 64)
        crcCheck.updateBuffer(UInt64(var_1700263933283_722*var_1700263933283_722), 64)
        crcCheck.updateBuffer(UInt64(var_1700263933283_831*var_1700263933283_831), 64)
        crcCheck.crcCheck()
        crcCheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[(i + buffer_index) % buffer.size] = byteArray[i + byte_index]
            i++
        }
        buffer_index = (buffer_index + i) % buffer.size
    }

    func updateBuffer(input: Bool, byte_n: Int64): Unit {
        if (input == true) {
            updateBuffer(1, byte_n)
        } else {
            updateBuffer(0, byte_n)
        }
    }

    func updateBuffer(input: Rune, byte_n: Int64): Unit {
        updateBuffer(UInt64(UInt32(input)), byte_n)
    }

    func updateBuffer(input: String, byte_n: Int64): Unit {
        for (c in input) {
            updateBuffer(c, byte_n)
        }
    }

    func updateBuffer(input: Unit, byte_n: Int64): Unit {
        updateBuffer(input.toString(), byte_n)
    }

    func updateBuffer(input: Any, byte_n: Int64) : Unit {
        if (input is Hashable) {
            match(input as Hashable) {
                case Some(v) => updateBuffer(UInt64(v.hashCode()), byte_n)
                case _=> updateBuffer(1, byte_n)
            }
            
        } else if (input is ToString) {
            match(input as ToString) {
                case Some(v) => updateBuffer(v.toString(), byte_n)
                case _=> updateBuffer(1, byte_n)
            }
        } else {
            updateBuffer(1, byte_n)
        }
    }     
    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Class_1700263933283_539 {

}

extend Class_1700263933283_19 {

}

