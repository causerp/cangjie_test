/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args

public var var_1739719357718_23: Int8 = Int8(Int8(Int8(Int8(14))))
public let var_1739719357718_31: (Float32, UInt16, UInt64) = (Float32(Float32(Float32(Float32(-6.0)))), UInt16(16),
    UInt64(105))
public let var_1739719357718_43: Unit = ()
public const var_1739719357718_50: UInt64 = 66
@Deprecated
public var var_1739719357718_56: Float32 = Float32(57.0)
internal let var_1739719357718_68: UInt = UInt64(Int32(UInt32(251)))
@Deprecated
public let var_1739719357718_119: Option<Enum_1739719357718_97> = (UInt8(UInt8(Int8(-118))) as Enum_1739719357718_97)
var var_1739719357718_130: UInt16 = UInt16(Int8(UInt8(UInt8(UInt8(25)))))
public const var_1739719357718_148: UInt8 = 88
public let var_1739719357718_300: Unit = ()
public let var_1739719357718_316: Int16 = Int16(-49)
@Deprecated
public var var_1739719357718_437: (Enum_1739719357718_377, (Option<Enum_1739719357718_97>, Int8, Unit), Float64) = (Enum_1739719357718_377
        .enumValue_1739719357718_440(
            (Option<UInt64>.None is (Enum_1739719357718_377, (Option<Enum_1739719357718_97>, Int8, Unit), Float64)),
            ("bFZ&'A|/-P", r'S', (Float32(88.0), UInt16(172), UInt64(127)), Option<Enum_1739719357718_97>.None, Float64(-66.0),
                Float32(Float32(-35.0)), UInt8(Int8(-124))),
            ((Option<Option<Enum_1739719357718_97>>.None is Rune), Int32(UInt32(130)), Int8(68))), (Option<Enum_1739719357718_97>
            .None, Int8(Int8(UInt8(138))), ()), Float64(-27.0))
public var var_1739719357718_474: Option<UInt64> = Option<UInt64>.None
public let var_1739719357718_477: Option<Option<Enum_1739719357718_97>> = ((Float32(Float32(Float32(-94.0))), UInt16(10),
    UInt64(UInt8(252))) as Option<Enum_1739719357718_97>)
internal var var_1739719357718_538: Int32 = Int32(17)
public var var_1739719357718_553: Option<Int16> = ((Float32(-57.0) is Rune) as Int16)
public let var_1739719357718_591: String = """
rSF 6
0A&W=
"""
public const var_1739719357718_594: Rune = r'Z'

public enum Enum_1739719357718_97 {
    defaultValue
    | enumValue_1739719357718_151
    | enumValue_1739719357718_514
    | enumValue_1739719357718_521(Enum_1739719357718_377, Float32, Rune, (Bool, Int32, Int8))
}

public func func_1739719357718_92<T0, T1, T2>(param_1739719357718_93: Unit): UInt64 { // block id: 94
    ();
    func func_1739719357718_105<T0, T1, T2>(): Option<Enum_1739719357718_97> { // block id: 106
        let var_1739719357718_116: Option<Option<Enum_1739719357718_97>> = Option<Option<Enum_1739719357718_97>>.None;
        ((var_1739719357718_116 ?? var_1739719357718_119), Int8(-33), try { // block id: 126
                var_1739719357718_31;
                var_1739719357718_130 *= UInt16(65)
                var_1739719357718_43
            } catch (e: Exception) { // block id: 138
                var var_1739719357718_141: Int16 = Int16(-72);
                var_1739719357718_141--
            })[0]
    };

    let var_1739719357718_154: (Bool, Int32, Int8) = (false, Int32(UInt32(128)), Int8(43));
    match ((func_1739719357718_105<Bool, Bool, UInt32>() ?? (var_1739719357718_148, Enum_1739719357718_97
            .enumValue_1739719357718_151, var_1739719357718_56, var_1739719357718_154)[1])) {
        case _ =>
            (Float32(-106.0), var_1739719357718_130, var_1739719357718_68);
            UInt64(250) - UInt64(41)

        case enumValue_1739719357718_151 =>
            """
H9)[N
eGnA+
""";
            var_1739719357718_50

        case enumValue_1739719357718_151 => var_1739719357718_50

        case caseVar_1739719357718_182: Float32 => var_1739719357718_50

        case _ => UInt64(75)
    }
}

public struct Struct_1739719357718_235 {
    @Frozen
    public init() { // block id: 237

    }

    public var var_1739719357718_242: Unit = ();
    public static var var_1739719357718_325: (Bool, Int32, Int8) = (true, Int32(-128), Int8(-105));
    public let var_1739719357718_382: Enum_1739719357718_377 = Enum_1739719357718_377.enumValue_1739719357718_384(
        UInt64(234), UInt32(26), Int16(109),
        ("b^4TI*[=/ ", r'a', (Float32(28.0), UInt16(191), UInt64(216)), Option<Enum_1739719357718_97>.None, Float64(-36.0),
            Float32(-95.0), UInt8(158)))
}

public enum Enum_1739719357718_377 {
    defaultValue
    | enumValue_1739719357718_384(UInt64, UInt32, Int16,
        (String, Rune, (Float32, UInt16, UInt64), Option<Enum_1739719357718_97>, Float64, Float32, UInt8))
    | enumValue_1739719357718_440(Bool,
        (String, Rune, (Float32, UInt16, UInt64), Option<Enum_1739719357718_97>, Float64, Float32, UInt8),
        (Bool, Int32, Int8))
}

main(): Int64 {
    try {
        var loopTimeVar_1739719357718_13: Int = 0;
        var var_1739719357718_20: ?Int8 = Option<Int8>.None;
        let var_1739719357718_53: Bool = true;
        let var_1739719357718_76: (Bool, Int32, Int8) = ((r'E' is Rune), Int32(44), Int8(96));
        const var_1739719357718_203: Float64 = 43.0;
        let var_1739719357718_355: (String, Rune, (Float32, UInt16, UInt64), Option<Enum_1739719357718_97>, Float64, 
            Float32, UInt8) = ("""
!M0(_
atYRi
""", r'N', (Float32(-6.0), UInt16(82), UInt64(Int32(-28))),
            Option<Enum_1739719357718_97>.Some(Enum_1739719357718_97.enumValue_1739719357718_151), Float64(-14.0),
            Float32(117.0), UInt8(181));
        let var_1739719357718_422: Bool = false;
        (do {
                loopTimeVar_1739719357718_13++;
                ()
            } while ((true) && loopTimeVar_1739719357718_13 < 100), (var_1739719357718_20 ?? var_1739719357718_23),
            var_1739719357718_31[0], (var_1739719357718_43, var_1739719357718_23, Float32(115.0), (), (),
                var_1739719357718_50, var_1739719357718_53, var_1739719357718_56, UInt64(112))[4], match (UInt32(32)) {
                case _ => ()
            }, var_1739719357718_68 / ((UInt64(50)) | 1), var_1739719357718_76[0], if (true) { // block id: 85
                ();
                var_1739719357718_56
            } else { // block id: 88
                var_1739719357718_53;
                Float32(45.0)
            }, (var_1739719357718_43 |> {
                lambdaParameter_1739719357718_191: Unit =>
                    let var_1739719357718_229: Option<Option<Enum_1739719357718_97>> = (r'W' as Option<Enum_1739719357718_97>);
                    let var_1739719357718_239: Struct_1739719357718_235 = Struct_1739719357718_235();
                    const var_1739719357718_338: Unit = ();
                    func func_1739719357718_209(optionalParam_1739719357718_210!: Float64 = Float64(51.0)): UInt64 { // block id: 212
                        try { // block id: 214
                            let var_1739719357718_217: Bool = ((false as Option<Enum_1739719357718_97>) is Float64);
                            if (var_1739719357718_217) { // block id: 221
                                ()
                            } else if (var_1739719357718_217) { // block id: 224
                                var_1739719357718_43
                            };
                            ();
                            (var_1739719357718_229 ?? var_1739719357718_119)
                        } catch (_) { // block id: 233
                            var_1739719357718_239.var_1739719357718_242;
                            Option<Enum_1739719357718_97>.None
                        } finally { // block id: 245
                            let var_1739719357718_249: ((Unit, Int8, Float32, Unit, Unit, UInt64, Bool, Float32, UInt64), 
                                Rune, (Option<Enum_1739719357718_97>, Int8, Unit), (UInt8, Enum_1739719357718_97, 
                                Float32, (Bool, Int32, Int8)), Unit) = (((), Int8(-102), Float32(Float32(117.0)), (), (),
                                    UInt64(Int16(-77)), true, Float32(Float32(-87.0)), UInt64(68)), r'o', (Option<Enum_1739719357718_97>
                                        .Some(Enum_1739719357718_97.enumValue_1739719357718_151), Int8(-95), ()), (UInt8(40),
                                    Enum_1739719357718_97.enumValue_1739719357718_151, Float32(Float32(Float32(-73.0))),
                                    ((Int64(49) is Int8), Int32(-117), Int8(25))), ());
                            var_1739719357718_249[3];
                            (var_1739719357718_249 as Enum_1739719357718_97)
                        };
                        func func_1739719357718_286<T0, T1>(param_1739719357718_287: Unit,
                            optionalParam_1739719357718_288!: (Bool, Int32, Int8) = ((Float32(-48.0) is Int16), Int32(UInt16(18)),
                                Int8(-69)),
                            namedParam_1739719357718_295!: (String, Rune, (Float32, UInt16, UInt64), Option<Enum_1739719357718_97>, 
                                Float64, Float32, UInt8), optionalParam_1739719357718_296!: UInt64 = UInt64(236)): (Bool, 
                            Int32, Int8) { // block id: 298
                            var_1739719357718_300;
                            var var_1739719357718_311: Int32 = Int32(UInt16(101));
                            var loopTimeVar_1739719357718_321: Int = 0;
                            do {
                                loopTimeVar_1739719357718_321++;
                            } while ((try { // block id: 305
                                ();
                                Int16(99)
                            } finally { // block id: 308
                                var_1739719357718_311 &= Int32(-54)
                                var_1739719357718_316
                            } != Int16(29)) && loopTimeVar_1739719357718_321 < 100);
                            Struct_1739719357718_235.var_1739719357718_325
                        };

                        const func func_1739719357718_331<T0>(optionalParam_1739719357718_332!: Unit = (),
                            optionalParam_1739719357718_334!: Float32 = -67.0): Unit { // block id: 336
                            var_1739719357718_338;
                            ();
                            var_1739719357718_338
                        };

                        var loopTimeVar_1739719357718_353: Int64 = 0;
                        func_1739719357718_286<String, Float32>(
                            func_1739719357718_331<Int16>(
                                optionalParam_1739719357718_332: do {
                                    loopTimeVar_1739719357718_353++;
                                    var var_1739719357718_347: Int32 = Int32(UInt8(4));
                                    var_1739719357718_347 /= ((var_1739719357718_347) | 1)
                                    ()
                                } while ((false) && loopTimeVar_1739719357718_353 < 100)),
                            namedParam_1739719357718_295: var_1739719357718_355);
                        (Option<UInt64>.Some(UInt64(48)) ?? match (var_1739719357718_239.var_1739719357718_382) {
                            case caseVar_1739719357718_405: (UInt8, Enum_1739719357718_97, Float32, (Bool, Int32, Int8)) => UInt64(214) -
                                var_1739719357718_68

                            case _ =>
                                Float32(1.0);
                                var_1739719357718_300;
                                -UInt64(110)
                        })
                    };
                    try { // block id: 194
                        ("""
0QN6_
KM)T[
""", r'e', var_1739719357718_31, var_1739719357718_119, var_1739719357718_203,
                            Float32(-126.0), UInt8(51))[3];
                        func_1739719357718_209(optionalParam_1739719357718_210: var_1739719357718_203)
                    } finally { // block id: 418
                        var_1739719357718_338;
                        if (var_1739719357718_422) {
                            var_1739719357718_239
                        } else {
                            Struct_1739719357718_235()
                        };
                        const var_1739719357718_428: Int32 = -77;
                        UInt64(var_1739719357718_428)
                    }
            }))[4];
        var var_1739719357718_495: (Option<Enum_1739719357718_97>, Int8, Unit) = ((r'F' as Enum_1739719357718_97), Int8(UInt8(Int8(Int8(-12)))),
            ());
        try { // block id: 435
            var_1739719357718_437
        } catch (e: Exception) { // block id: 472
            var_1739719357718_474;
            var_1739719357718_477;
            (Enum_1739719357718_377.enumValue_1739719357718_440(true, var_1739719357718_355, (false, Int32(44), Int8(96))),
                var_1739719357718_495, var_1739719357718_203)
        } finally { // block id: 505
            var_1739719357718_300;
            var_1739719357718_437
        }[0];
        var var_1739719357718_602: Enum_1739719357718_377 = Enum_1739719357718_377.enumValue_1739719357718_384(
            UInt64(215), UInt32(Int8(Int8(Int8(-54)))), Int16(UInt16(UInt16(27))),
            ("""
d%4l#
Q Q.*
""", r'R', (Float32(84.0), UInt16(Int16(-4)), UInt64(UInt8(90))), Option<Enum_1739719357718_97>
                    .None, Float64(56.0), Float32(Float32(Float32(110.0))), UInt8(Int8(49))));
        try { // block id: 510
            match (Option<Enum_1739719357718_97>.Some(Enum_1739719357718_97.enumValue_1739719357718_514)) {
                case _ =>
                    (var_1739719357718_148, Enum_1739719357718_97.enumValue_1739719357718_521(
                            Enum_1739719357718_377.enumValue_1739719357718_384(var_1739719357718_68, UInt32(21),
                                var_1739719357718_316, var_1739719357718_355), Float32(-13.0), r'I',
                            var_1739719357718_76), Float32(87.0), (var_1739719357718_53, var_1739719357718_538, Int8(75)));
                    const var_1739719357718_543: Int = 57;
                    var_1739719357718_543 << ((var_1739719357718_543) & 7)
            }
        } finally { // block id: 546
            (var_1739719357718_553 ?? var_1739719357718_316);
            match (Option<Int16>.Some(var_1739719357718_316)) {
                case caseVar_1739719357718_563: Option<Option<Enum_1739719357718_97>> =>
                    var_1739719357718_43;
                    ();
                    Int64(3)

                case caseVar_1739719357718_570: Float32 =>
                    ();
                    (var_1739719357718_422, var_1739719357718_538, var_1739719357718_23);
                    Int64(125) + Int64(109)

                case _ =>
                    if (false) {
                        Enum_1739719357718_377.enumValue_1739719357718_384(UInt64(49), UInt32(63), Int16(-71),
                            (var_1739719357718_591, var_1739719357718_594, var_1739719357718_31, var_1739719357718_119,
                                var_1739719357718_203, Float32(125.0), UInt8(174)))
                    } else {
                        var_1739719357718_602
                    };
                    ();
                    Int64(-110)
            }
        }
        // CRC Check All Variables
        var crcCheck = CrcCheck(5000, 32)
        crcCheck.updateBuffer(UInt64(var_1739719357718_50 * var_1739719357718_50), 64)
        crcCheck.updateBuffer(UInt64(var_1739719357718_68 * var_1739719357718_68), 64)
        crcCheck.updateBuffer(UInt64(var_1739719357718_130 * var_1739719357718_130), 64)
        crcCheck.updateBuffer(UInt64(var_1739719357718_148 * var_1739719357718_148), 64)
        crcCheck.updateBuffer(UInt64(var_1739719357718_538 * var_1739719357718_538), 64)
        crcCheck.crcCheck()
        crcCheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) {
        println("Exception: NoneValueException")
    }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        buffer = Array<Int64>(buffer_n, {i => 0})
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, {i => 0})
        var byte_c = 1
        var byte_index = 0
        while (value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[(i + buffer_index) % buffer.size] = byteArray[i + byte_index]
            i++
        }
        buffer_index = (buffer_index + i) % buffer.size
    }

    func updateBuffer(input: Bool, byte_n: Int64): Unit {
        if (input == true) {
            updateBuffer(1, byte_n)
        } else {
            updateBuffer(0, byte_n)
        }
    }

    func updateBuffer(input: Rune, byte_n: Int64): Unit {
        updateBuffer(UInt64(UInt32(input)), byte_n)
    }

    func updateBuffer(input: String, byte_n: Int64): Unit {
        for (c in input) {
            updateBuffer(c, byte_n)
        }
    }

    func updateBuffer(input: Unit, byte_n: Int64): Unit {
        updateBuffer(input.toString(), byte_n)
    }

    func updateBuffer(input: Any, byte_n: Int64): Unit {
        if (input is Hashable) {
            match (input as Hashable) {
                case Some(v) => updateBuffer(UInt64(v.hashCode()), byte_n)
                case _ => updateBuffer(1, byte_n)
            }
        } else if (input is ToString) {
            match (input as ToString) {
                case Some(v) => updateBuffer(v.toString(), byte_n)
                case _ => updateBuffer(1, byte_n)
            }
        } else {
            updateBuffer(1, byte_n)
        }
    }
    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, {i => 0})
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2 ** 2 * crc_output[i] + 2 ** 1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
