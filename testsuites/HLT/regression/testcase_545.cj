/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args

public const var_1700451066115_55 : UInt = 89
const var_1700451066115_78 : UInt32 = 33
const var_1700451066115_85 : Rune = r'm'
const var_1700451066115_118 : UInt16 = 198
public const var_1700451066115_121 : UInt8 = 71
public const var_1700451066115_144 : Bool = false
public const var_1700451066115_153 : Bool = true
public var var_1700451066115_193 : Bool = (Float32(Float32(Float32(112.0))) is Range<UInt8>)
public const func func_1700451066115_10<T0>(optionalParam_1700451066115_11 ! : UInt8 = 82) : Unit { // block id: 13
    ()
}

public const func func_1700451066115_27(param_1700451066115_28 : UInt32, param_1700451066115_29 : String) : UInt16 { // block id: 30
    const var_1700451066115_32 : UInt16 = 127;
    var_1700451066115_32
}

public const func func_1700451066115_49(optionalParam_1700451066115_50 ! : Int64 = -88, namedParam_1700451066115_52 ! : UInt32) : Int64 { // block id: 53
    var_1700451066115_55;
    const var_1700451066115_59 : Int64 = 106;
    var_1700451066115_59 ** (var_1700451066115_55 * var_1700451066115_55)
}

public const func func_1700451066115_66(optionalParam_1700451066115_67 ! : Int32 = -95, namedParam_1700451066115_69 ! : Rune, namedParam_1700451066115_70 ! : Int64) : UInt32 { // block id: 71
    1 * 136;
    ();
    var_1700451066115_78 * 220
}

const func func_1700451066115_100(namedParam_1700451066115_101 ! : Rune) : Bool { // block id: 102
    const var_1700451066115_105 : UInt16 = 180;
    var_1700451066115_105 >> (((212 ^ 110)) & 7);
    const var_1700451066115_111 : Bool = false;
    var_1700451066115_111
}

public const func func_1700451066115_23(param_1700451066115_24 : UInt16) : UInt16 { // block id: 25
    const var_1700451066115_82 : Int32 = 46;
    const func func_1700451066115_44(param_1700451066115_45 : Bool) : String { // block id: 46
        const var_1700451066115_88 : Int = 41;
        func_1700451066115_49(optionalParam_1700451066115_50 : -105, namedParam_1700451066115_52 : func_1700451066115_66(optionalParam_1700451066115_67 : var_1700451066115_82, namedParam_1700451066115_69 : var_1700451066115_85, namedParam_1700451066115_70 : var_1700451066115_88)) >> ((115) & 7);
        func_1700451066115_10<Float32>(optionalParam_1700451066115_11 : 103);
        "|FHU9qA['E"
    }
;
    const func func_1700451066115_36(param_1700451066115_37 : Bool) : String { // block id: 38
        178;
        const var_1700451066115_41 : Unit = ();
        var_1700451066115_41;
        const func func_1700451066115_95() : Bool { // block id: 96
            !(func_1700451066115_100(namedParam_1700451066115_101 : var_1700451066115_85) || func_1700451066115_100(namedParam_1700451066115_101 : r'a'))
        }
;
        func_1700451066115_44(func_1700451066115_95())
    }
;
    func_1700451066115_27(252, func_1700451066115_36(false))
}

const func func_1700451066115_16(param_1700451066115_17 : UInt8, param_1700451066115_18 : UInt16, optionalParam_1700451066115_19 ! : Int16 = -63) : UInt16 { // block id: 21
    func_1700451066115_23(var_1700451066115_118)
}

public const func func_1700451066115_6(param_1700451066115_7 : String) : Int64 { // block id: 8
    func_1700451066115_10<Float32>();
    func_1700451066115_16(var_1700451066115_121, var_1700451066115_118);
    25
}

main(): Int64 {
    try {
        """
o>3~#
J`:h;
"""|>{ lambdaParameter_1700451066115_127 : String => const var_1700451066115_164 : UInt32 = 35; let var_1700451066115_169 : UInt32 = UInt32(UInt32(41)); const var_1700451066115_176 : Bool = false; let var_1700451066115_200 : Int = Int64(UInt32(UInt32(144))); if (if ([var_1700451066115_144, var_1700451066115_144, true, var_1700451066115_144, false, false, var_1700451066115_144, var_1700451066115_153, var_1700451066115_144, var_1700451066115_153][1]) { // block id: 158
            if (var_1700451066115_153) { ((UInt32(UInt32(143))&127)..=(UInt32(var_1700451066115_164)&127):(Int64(67)|1)) } else { ((UInt32(var_1700451066115_169)&127)..(UInt32(var_1700451066115_169)&127):(Int64(14)|1)) } ;
            ();
            var_1700451066115_176
        } else if (if (var_1700451066115_144) { // block id: 180
            !var_1700451066115_144
        } else { // block id: 183
            true
        }) { // block id: 185
            const var_1700451066115_187 : Unit = ();
            var_1700451066115_187;
            false
        } else { // block id: 190
            ();
            var_1700451066115_193
        }) { // block id: 198
            var_1700451066115_200
        } else { // block id: 204
            func_1700451066115_49(namedParam_1700451066115_52 : var_1700451066115_164)
        } }
        // CRC Check All Variables
        var crcCheck = CrcCheck(5000, 32)
        crcCheck.crcCheck()
        crcCheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[(i + buffer_index) % buffer.size] = byteArray[i + byte_index]
            i++
        }
        buffer_index = (buffer_index + i) % buffer.size
    }

    func updateBuffer(input: Bool, byte_n: Int64): Unit {
        if (input == true) {
            updateBuffer(1, byte_n)
        } else {
            updateBuffer(0, byte_n)
        }
    }

    func updateBuffer(input: Rune, byte_n: Int64): Unit {
        updateBuffer(UInt64(UInt32(input)), byte_n)
    }

    func updateBuffer(input: String, byte_n: Int64): Unit {
        for (c in input) {
            updateBuffer(c, byte_n)
        }
    }

    func updateBuffer(input: Unit, byte_n: Int64): Unit {
        updateBuffer(input.toString(), byte_n)
    }

    func updateBuffer(input: Any, byte_n: Int64) : Unit {
        if (input is Hashable) {
            match(input as Hashable) {
                case Some(v) => updateBuffer(UInt64(v.hashCode()), byte_n)
                case _=> updateBuffer(1, byte_n)
            }
            
        } else if (input is ToString) {
            match(input as ToString) {
                case Some(v) => updateBuffer(v.toString(), byte_n)
                case _=> updateBuffer(1, byte_n)
            }
        } else {
            updateBuffer(1, byte_n)
        }
    }     
    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
