/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args

internal var var_1729094812264_14: Int32 = Int32(Int8(UInt8(189)))
public var var_1729094812264_22: Rune = r'u'
public var var_1729094812264_102: UInt32 = UInt32(UInt8(Int8(Int8(55))))
@Deprecated
public const var_1729094812264_153: UInt = 167
public var var_1729094812264_239: (UInt16, Option<Int32>, Float32) = (UInt16(29), (Class_1729094812264_207() as Int32),
    Float32(-92.0))
@Deprecated
public var var_1729094812264_251: Option<Int32> = Option<Int32>.None
public let var_1729094812264_254: Float32 = Float32(Float32(-94.0))
@Deprecated
var var_1729094812264_267: Int32 = Int32(Int16(56))
public const var_1729094812264_318: String = "5\\wf!z'Ha)"
@Deprecated
internal const var_1729094812264_364: Rune = r'Q'
public const var_1729094812264_399: UInt32 = 5
public const var_1729094812264_470: Rune = r'D'
public const var_1729094812264_485: Int16 = 27
public var var_1729094812264_511: Unit = ()
let var_1729094812264_645: Range<UInt8> = ((UInt8(UInt8(UInt8(UInt8(195)))) & 127)..=(UInt8(UInt8(UInt8(65))) & 127) : (Int64(UInt32(Int32(85))) |
    1))
public const var_1729094812264_663: Int64 = -63
@Deprecated
internal let var_1729094812264_710: Array<Range<UInt64>> = [((UInt64(UInt64(Int8(91))) & 127)..(UInt64(UInt64(UInt64(248))) &
    127) : (Int64(33) | 1)),
    ((UInt64(UInt64(Int64(-125))) & 127)..(UInt64(UInt64(UInt32(UInt32(160)))) & 127) : (Int64(-55) | 1)),
    ((UInt64(UInt64(UInt8(24))) & 127)..(UInt64(UInt64(164)) & 127) : (Int64(120) | 1)),
    ((UInt64(UInt64(4)) & 127)..=(UInt64(UInt64(Int16(32))) & 127) : (Int64(111) | 1)),
    ((UInt64(UInt64(34)) & 127)..=(UInt64(UInt64(115)) & 127) : (Int64(20) | 1)),
    ((UInt64(UInt64(Int16(90))) & 127)..=(UInt64(UInt64(121)) & 127) : (Int64(-96) | 1)),
    ((UInt64(UInt64(89)) & 127)..=(UInt64(UInt64(194)) & 127) : (Int64(-116) | 1)),
    ((UInt64(UInt64(73)) & 127)..(UInt64(UInt64(231)) & 127) : (Int64(76) | 1)),
    ((UInt64(UInt64(203)) & 127)..(UInt64(UInt64(Int8(-69))) & 127) : (Int64(-38) | 1)),
    ((UInt64(UInt64(Int16(UInt8(89)))) & 127)..=(UInt64(UInt64(151)) & 127) : (Int64(UInt8(UInt8(99))) | 1))]
internal const var_1729094812264_817: Int8 = 7
@Deprecated
public let var_1729094812264_824: Struct_1729094812264_820 = Struct_1729094812264_820()
let var_1729094812264_901: (Range<UInt64>, UInt8) = (((UInt64(UInt64(189)) & 127)..=(UInt64(UInt64(UInt8(172))) & 127) : (Int64(126) |
        1)), UInt8(4))
@Deprecated
internal var var_1729094812264_940: Int16 = Int16(-109)
internal const var_1729094812264_985: Unit = ()
@Deprecated
public var var_1729094812264_991: Option<Int8> = Option<Int8>.None
@Deprecated
public let var_1729094812264_998: UInt16 = UInt16(200)
internal let var_1729094812264_1024: Unit = ()
public let var_1729094812264_1050: Class_1729094812264_207 = Class_1729094812264_207()
public var var_1729094812264_1062: Bool = false
public var var_1729094812264_1112: Unit = ()
let var_1729094812264_1125: Range<Int8> = ((Int8(Int8(-91)) & 127)..=(Int8(Int8(50)) & 127) : (Int64(25) | 1))
public let var_1729094812264_1155: Array<Range<UInt64>> = [((UInt64(UInt64(167)) & 127)..=(UInt64(UInt64(234)) & 127) : (Int64(4) |
    1)), ((UInt64(UInt64(17)) & 127)..=(UInt64(UInt64(251)) & 127) : (Int64(35) | 1)),
    ((UInt64(UInt64(45)) & 127)..=(UInt64(UInt64(160)) & 127) : (Int64(101) | 1)),
    ((UInt64(UInt64(60)) & 127)..(UInt64(UInt64(211)) & 127) : (Int64(-118) | 1)),
    ((UInt64(UInt64(241)) & 127)..(UInt64(UInt64(236)) & 127) : (Int64(21) | 1)),
    ((UInt64(UInt64(58)) & 127)..=(UInt64(UInt64(240)) & 127) : (Int64(-30) | 1)),
    ((UInt64(UInt64(142)) & 127)..(UInt64(UInt64(109)) & 127) : (Int64(-46) | 1)),
    ((UInt64(UInt64(154)) & 127)..=(UInt64(UInt64(62)) & 127) : (Int64(106) | 1)),
    ((UInt64(UInt64(231)) & 127)..(UInt64(UInt64(104)) & 127) : (Int64(-45) | 1)),
    ((UInt64(UInt64(249)) & 127)..=(UInt64(UInt64(206)) & 127) : (Int64(-91) | 1))]
public let var_1729094812264_1163: VArray<UInt32, $7> = [UInt32(223), UInt32(112), UInt32(231), UInt32(144), UInt32(184),
    UInt32(158), UInt32(114)]
public const var_1729094812264_1233: Unit = ()
public var var_1729094812264_1236: Range<Int16> = ((Int16(Int16(98)) & 127)..(Int16(Int16(93)) & 127) : (Int64(126) | 1))
@Deprecated
internal let var_1729094812264_1254: Int = Int64(-42)

@Deprecated
public struct Struct_1729094812264_171 {
    @Frozen
    public init() { // block id: 173

    }

    private let var_1729094812264_896: Range<UInt32> = ((UInt32(UInt32(219)) & 127)..=(UInt32(UInt32(58)) & 127) : (Int64(-59) |
        1));

    @Frozen
    prop var_1729094812264_912: Class_1729094812264_207 { // block id: 913
        get() { // block id: 915
            Class_1729094812264_207()
        }
    }

    @Frozen
    func func_1729094812264_181(param_1729094812264_182: Range<UInt64>, namedParam_1729094812264_183!: Unit,
        namedParam_1729094812264_184!: UInt16, namedParam_1729094812264_185!: Bool): Unit { // block id: 186
        let var_1729094812264_893: (Range<UInt32>) -> (UInt16, (Range<UInt64>, UInt8), UInt8, Range<Int8>, Rune, Array<UInt64>) = func_1729094812264_192;
        (var_1729094812264_896 |> var_1729094812264_893)[1][0];
        var_1729094812264_901;
        let var_1729094812264_931: Option<Int8> = Option<Int8>.Some(Int8(-125));
        var_1729094812264_912.var_1729094812264_918 <<= ((match (match (((Int64(Int64(-123)) & 127)..=(Int64(Int64(108)) &
            127) : (var_1729094812264_663 | 1))) {
            case _ =>
                var_1729094812264_511;
                var_1729094812264_931
        }) {
            case caseVar_1729094812264_936: Option<Int8> =>
                var_1729094812264_940 = var_1729094812264_940
                var_1729094812264_318;
                var_1729094812264_663 % ((var_1729094812264_663) | 1)

            case caseVar_1729094812264_949 =>
                var_1729094812264_485;
                ((Int16(var_1729094812264_940) & 127)..=(Int16(Int16(-3)) & 127) : (Int64(-4) | 1));
                Int64(11) - var_1729094812264_663

            case _ =>
                var_1729094812264_511;
                var_1729094812264_267--;
                Int64(-59) / ((Int64(17)) | 1)
        }) & 7)
    }
}

public interface Interface_1729094812264_210<T0, T1, T2> {
    @Frozen
    static func func_1729094812264_226(namedParam_1729094812264_227!: Range<UInt32>): Int32 { // block id: 228
        var var_1729094812264_236: Unit = ();
        let var_1729094812264_272: Option<Int32> = (UInt8(UInt8(151)) as Int32);
        (try { // block id: 233
            ();
            var_1729094812264_236;
            var_1729094812264_239
        } finally { // block id: 245
            var_1729094812264_236;
            ();
            (UInt16(158), var_1729094812264_251, var_1729094812264_254)
        }[1] ?? ([var_1729094812264_251, Option<Int32>.None, Option<Int32>.None,
            Option<Int32>.Some(var_1729094812264_267), var_1729094812264_251, var_1729094812264_272,
            var_1729094812264_251, var_1729094812264_251, var_1729094812264_272, Option<Int32>.Some(Int32(-40))][0] ??
            Int32(16)))
    };

    @Frozen
    func func_1729094812264_603(param_1729094812264_604: Float32): Unit { // block id: 605
        var loopTimeVar_1729094812264_610: Int64 = 0;
        do {
            loopTimeVar_1729094812264_610++;
        } while ((true) && loopTimeVar_1729094812264_610 < 100)
    }
}

public open class Class_1729094812264_207 <: Interface_1729094812264_210<Unit, Int16, UInt64> {
    @Frozen
    public init() { // block id: 209

    }

    @Frozen
    public prop var_1729094812264_498: (Range<UInt64>, UInt8) { // block id: 499
        get() { // block id: 501
            ();
            (((UInt64(UInt64(144)) & 127)..=(UInt64(UInt64(23)) & 127) : (Int64(89) | 1)), UInt8(91))
        }
    }
    var var_1729094812264_918: Int64 = Int64(-76);
    public let var_1729094812264_1053: Unit = ();
    public static func func_1729094812264_226(namedParam_1729094812264_227!: Range<UInt32>): Int32 { // block id: 228
        var var_1729094812264_236: Unit = ();
        let var_1729094812264_272: Option<Int32> = (UInt8(UInt8(151)) as Int32);
        (try { // block id: 233
            ();
            var_1729094812264_236;
            var_1729094812264_239
        } finally { // block id: 245
            var_1729094812264_236;
            ();
            (UInt16(158), var_1729094812264_251, var_1729094812264_254)
        }[1] ?? ([var_1729094812264_251, Option<Int32>.None, Option<Int32>.None,
            Option<Int32>.Some(var_1729094812264_267), var_1729094812264_251, var_1729094812264_272,
            var_1729094812264_251, var_1729094812264_251, var_1729094812264_272, Option<Int32>.Some(Int32(-40))][0] ??
            Int32(16)))
    };

    public open override func func_1729094812264_603(param_1729094812264_604: Float32): Unit { // block id: 605
        var loopTimeVar_1729094812264_610: Int64 = 0;
        do {
            loopTimeVar_1729094812264_610++;
        } while ((true) && loopTimeVar_1729094812264_610 < 100)
    }
}

@Frozen
@Deprecated
public const func func_1729094812264_314(param_1729094812264_315: UInt16): String { // block id: 316
    var_1729094812264_318
}

@Deprecated
internal const func func_1729094812264_375(optionalParam_1729094812264_376!: Int8 = 69,
    optionalParam_1729094812264_378!: Int32 = 31, optionalParam_1729094812264_380!: Int64 = 108): Int16 { // block id: 382
    const var_1729094812264_384: Int16 = 86;
    var_1729094812264_384
}

@Frozen
public const func func_1729094812264_326(param_1729094812264_327: Float64): Bool { // block id: 328
    const var_1729094812264_456: UInt8 = 232;
    const var_1729094812264_478: Int64 = -97;
    const var_1729094812264_481: Float64 = -103.0;
    const func func_1729094812264_330(param_1729094812264_331: UInt8, param_1729094812264_332: Int8,
        param_1729094812264_333: Bool): Int64 { // block id: 334
        ();
        ();
        const var_1729094812264_367: Unit = ();
        const func func_1729094812264_360(): Unit { // block id: 361
            ();
            var_1729094812264_364;
            var_1729094812264_367
        };

        const func func_1729094812264_351(param_1729094812264_352: Int16, namedParam_1729094812264_353!: Unit,
            optionalParam_1729094812264_354!: Bool = true, namedParam_1729094812264_356!: Rune): Unit { // block id: 357
            18.0;
            func_1729094812264_360()
        };

        const var_1729094812264_387: Int8 = -65;
        const var_1729094812264_459: Rune = r'0';
        const var_1729094812264_467: Bool = false;
        const func func_1729094812264_346(namedParam_1729094812264_347!: UInt64, namedParam_1729094812264_348!: UInt16): Unit { // block id: 349
            const func func_1729094812264_439(): Int32 { // block id: 440
                const func func_1729094812264_442(): Int32 { // block id: 443
                    ();
                    78
                };

                func_1729094812264_442()
            };

            const func func_1729094812264_434(param_1729094812264_435: UInt16): Int32 { // block id: 436
                func_1729094812264_360();
                func_1729094812264_439()
            };

            const var_1729094812264_447: UInt16 = 147;
            const func func_1729094812264_390(): Int32 { // block id: 391
                const var_1729094812264_431: Int32 = 82;
                const var_1729094812264_451: Float64 = 120.0;
                const func func_1729094812264_413(namedParam_1729094812264_414!: Float64,
                    namedParam_1729094812264_415!: UInt8, optionalParam_1729094812264_416!: Rune = r'4',
                    namedParam_1729094812264_418!: String): UInt32 { // block id: 419
                    var_1729094812264_387;
                    ();
                    const func func_1729094812264_423(param_1729094812264_424: Float64,
                        namedParam_1729094812264_425!: Int8): UInt32 { // block id: 426
                        (-28 << ((var_1729094812264_431) & 7)) | func_1729094812264_434(var_1729094812264_447);
                        200
                    };

                    func_1729094812264_423(var_1729094812264_451, namedParam_1729094812264_425: var_1729094812264_387)
                };

                const func func_1729094812264_402(namedParam_1729094812264_403!: Int8,
                    optionalParam_1729094812264_404!: Int16 = 65): UInt32 { // block id: 406
                    104;
                    const var_1729094812264_410: Int32 = -4;
                    func_1729094812264_375(optionalParam_1729094812264_378: var_1729094812264_410);
                    func_1729094812264_413(namedParam_1729094812264_414: -122.0,
                        namedParam_1729094812264_415: var_1729094812264_456,
                        optionalParam_1729094812264_416: var_1729094812264_459,
                        namedParam_1729094812264_418: "5Ad\\@wY+K?")
                };

                const func func_1729094812264_393(): Int32 { // block id: 394
                    (151 + var_1729094812264_399) * func_1729094812264_402(
                        namedParam_1729094812264_403: var_1729094812264_387);
                    -61;
                    var_1729094812264_431
                };

                func_1729094812264_393()
            };

            const func func_1729094812264_370(): Int16 { // block id: 371
                var_1729094812264_367;
                func_1729094812264_360();
                func_1729094812264_375(optionalParam_1729094812264_376: var_1729094812264_387,
                    optionalParam_1729094812264_378: func_1729094812264_390())
            };

            func_1729094812264_351(func_1729094812264_370(), namedParam_1729094812264_353: (),
                optionalParam_1729094812264_354: var_1729094812264_467,
                namedParam_1729094812264_356: var_1729094812264_470);
            ()
        };

        const func func_1729094812264_338(optionalParam_1729094812264_339!: Float64 = 20.0,
            namedParam_1729094812264_341!: UInt32, optionalParam_1729094812264_342!: Int16 = 28): Int64 { // block id: 344
            const var_1729094812264_475: UInt16 = 127;
            func_1729094812264_346(namedParam_1729094812264_347: 134,
                namedParam_1729094812264_348: var_1729094812264_475);
            var_1729094812264_478
        };

        func_1729094812264_338(optionalParam_1729094812264_339: var_1729094812264_481, namedParam_1729094812264_341: 135,
            optionalParam_1729094812264_342: var_1729094812264_485)
    };

    const var_1729094812264_489: Int8 = -127;
    func_1729094812264_330(var_1729094812264_456, var_1729094812264_489, true);
    false
}

public struct Struct_1729094812264_820 {
    public init() { // block id: 822

    }

    @Frozen
    public prop var_1729094812264_827: Unit { // block id: 828
        get() { // block id: 830
            ()
        }
    }
}

@Frozen
@Deprecated
func func_1729094812264_192(param_1729094812264_193: Range<UInt32>): (UInt16, (Range<UInt64>, UInt8), UInt8, Range<Int8>, 
    Rune, Array<UInt64>) { // block id: 194
    ((Int16(Int16(-101)) & 127)..=(Int16(Int16(119)) & 127) : (Int64(-126) | 1));
    let var_1729094812264_212: Class_1729094812264_207 = Class_1729094812264_207();
    let var_1729094812264_620: Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    let var_1729094812264_810: Option<Int8> = Option<Int8>.Some(Int8(Int8(Int8(UInt8(26)))));
    func func_1729094812264_197(): UInt32 { // block id: 198
        func func_1729094812264_202(namedParam_1729094812264_203!: Struct_1729094812264_171): Option<Int32> { // block id: 204
            var var_1729094812264_585: Int64 = Int64(UInt16(UInt16(Int16(UInt16(205)))));
            match (var_1729094812264_212.func_1729094812264_215(UInt32(89), var_1729094812264_485, var_1729094812264_364,
                ())) {
                case caseVar_1729094812264_578: UInt8 =>
                    var_1729094812264_511;
                    ((UInt32(UInt32(67)) & 127)..=(UInt32(UInt32(54)) & 127) : (var_1729094812264_585 | 1));
                    var var_1729094812264_592: Byte = UInt8(119);
                    var_1729094812264_592

                case _ => UInt8(40)
            };
            let var_1729094812264_600: Interface_1729094812264_210<Unit, Int16, UInt64> = Class_1729094812264_207();
            var_1729094812264_600.func_1729094812264_603(var_1729094812264_254);
            var_1729094812264_251
        };

        const var_1729094812264_641: Bool = false;
        match (func_1729094812264_202(namedParam_1729094812264_203: Struct_1729094812264_171())) {
            case _ =>
                ();
                var_1729094812264_511;
                var_1729094812264_620

            case _: Struct_1729094812264_171 => var_1729094812264_620

            case _ =>
                if (var_1729094812264_641) {
                    ((UInt8(UInt8(222)) & 127)..=(UInt8(UInt8(219)) & 127) : (Int64(88) | 1))
                } else {
                    var_1729094812264_645
                };
                var_1729094812264_511;
                [(), (), (), (), (), (), (), (), (), ()]

            case _ =>
                Int64(40) + var_1729094812264_663;
                [Option<Int32>.None, var_1729094812264_251, var_1729094812264_251, var_1729094812264_251,
                    var_1729094812264_251, Option<Int32>.Some(Int32(30)), Option<Int32>.Some(var_1729094812264_267),
                    Option<Int32>.Some(var_1729094812264_267), Option<Int32>.None, Option<Int32>.None];
                if (false) {
                    [var_1729094812264_511, var_1729094812264_511, var_1729094812264_511, var_1729094812264_511, (), (),
                        var_1729094812264_511, (), var_1729094812264_511, ()]
                } else {
                    var_1729094812264_620
                }

            case _ =>
                var_1729094812264_485 * Int16(24);
                ();
                if (var_1729094812264_641) {
                    [(), (), (), (), (), (), (), (), (), ()]
                } else {
                    [(), (), (), (), (), (), (), (), (), ()]
                }
        }[2];
        var var_1729094812264_849: UInt16 = UInt16(111);
        try { // block id: 706
            var_1729094812264_710[5];
            var var_1729094812264_763: Array<String> = ["""
k'GI2
CkRk/
""", """
nQkxK
mLfJ(
""", "@ab`(sfRZJ",
                "nlEJ7jQ.&L", ###"Euyc|INSet"###, "=`#C;_TN\\8", """
pgQO6
BKWGn
""", """
L8Sf&
9=kmk
""", "w9c>\\f=2?}",
                ###"NYUY<t^ xG"###];
            var_1729094812264_763[1];
            var var_1729094812264_778: Byte = UInt8(Int8(UInt8(Int8(-26))));
            UInt32(var_1729094812264_778)
        } catch (e: Exception) { // block id: 783
            ();
            (Option<Unit>.None ?? var_1729094812264_511);
            VArray<UInt32, $7>({i => UInt32(174)})[4]
        } finally { // block id: 803
            (var_1729094812264_810 ?? var_1729094812264_817);
            var_1729094812264_824.var_1729094812264_827;
            match (var_1729094812264_251) {
                case caseVar_1729094812264_836: Range<UInt64> =>
                    let var_1729094812264_841: UInt8 = UInt8(143);
                    (((UInt64(UInt64(246)) & 127)..=(UInt64(UInt64(52)) & 127) : (Int64(32) | 1)), var_1729094812264_841);
                    UInt32(232)

                case _ =>
                    var_1729094812264_849 &= var_1729094812264_849
                    Option<Unit>.Some(var_1729094812264_511);
                    UInt32(68)
            }
        }
    };

    func_1729094812264_197();
    var var_1729094812264_856: (UInt16, (Range<UInt64>, UInt8), UInt8, Range<Int8>, Rune, Array<UInt64>) = (UInt16(226),
        (((UInt64(UInt64(192)) & 127)..(UInt64(UInt64(246)) & 127) : (Int64(47) | 1)), UInt8(136)), UInt8(Int8(UInt8(UInt8(55)))),
        ((Int8(Int8(-100)) & 127)..(Int8(Int8(UInt8(14))) & 127) : (Int64(Int8(Int8(11))) | 1)), r'N', [UInt64(UInt64(107)),
            UInt64(Int64(Int64(-108))), UInt64(1), UInt64(Int32(UInt32(241))), UInt64(74), UInt64(87),
            UInt64(Int32(-86)), UInt64(Int64(15)), UInt64(214), UInt64(10)]);
    var_1729094812264_856
}

@Frozen
internal func func_1729094812264_167<T0>(param_1729094812264_168: Range<Int64>): Option<Int32> { // block id: 169
    func func_1729094812264_175(): Struct_1729094812264_171 { // block id: 176
        var var_1729094812264_178: Struct_1729094812264_171 = Struct_1729094812264_171();
        var_1729094812264_178
    };

    let var_1729094812264_1009: UInt16 = UInt16(141);
    func_1729094812264_175().func_1729094812264_181(try { // block id: 969
        var_1729094812264_511;
        ((UInt64(var_1729094812264_153) & 127)..=(UInt64(UInt64(71)) & 127) : (Int64(-124) | 1))
    } finally { // block id: 975
        var_1729094812264_511;
        ((UInt64(UInt64(220)) & 127)..=(UInt64(UInt64(252)) & 127) : (Int64(108) | 1))
    },
        namedParam_1729094812264_183: ([(), (), (), (), (), (), (), (), (), ()], Option<Int32>.Some(
                var_1729094812264_267), var_1729094812264_985, UInt64(58))[2],
        namedParam_1729094812264_184: match (var_1729094812264_991) {
            case _: Rune => var_1729094812264_998 - var_1729094812264_998

            case caseVar_1729094812264_1003: Range<UInt16> =>
                var_1729094812264_511;
                var_1729094812264_511;
                var_1729094812264_1009 * var_1729094812264_998

            case _ => var_1729094812264_998 >> ((var_1729094812264_998) & 7)
        }, namedParam_1729094812264_185: match (var_1729094812264_710) {
            case _: Float64 =>
                var_1729094812264_1024;
                false

            case _: Rune =>
                var var_1729094812264_1032: UInt64 = UInt64(UInt32(86));
                var_1729094812264_1032 |= var_1729094812264_1032
                var_1729094812264_1024;
                true

            case _ =>
                var var_1729094812264_1043: Int8 = Int8(-14);
                var_1729094812264_1043 |= Int8(-75)
                var_1729094812264_901;
                true
        });
    var_1729094812264_1050.var_1729094812264_1053;
    if ([false, true, true, true, false, false, false, true, true, true][8]) {
        match (var_1729094812264_1062) {
            case false =>
                var_1729094812264_1024;
                var_1729094812264_1024;
                Option<Int32>.None

            case true =>
                var var_1729094812264_1075: Byte = UInt8(71);
                var_1729094812264_1075--;
                if (true) {
                    var_1729094812264_251
                } else {
                    var_1729094812264_251
                }

            case _ =>
                Option<Unit>.Some(());
                ();
                if (var_1729094812264_1062) {
                    var_1729094812264_251
                } else {
                    var_1729094812264_251
                }
        }
    } else {
        (var_1729094812264_1050.func_1729094812264_215(var_1729094812264_102, var_1729094812264_485, r'y', ()))
    }
}

@Frozen
public func func_1729094812264_31(param_1729094812264_32: UInt16): (Int32, UInt64, Float32, Float64, Rune, Rune) { // block id: 33
    const var_1729094812264_144: Int64 = 81;
    func func_1729094812264_39(): (Int32, UInt64, Float32, Float64, Rune, Rune) { // block id: 40
        var var_1729094812264_60: Bool = (((Int16(Int16(-99)) & 127)..=(Int16(Int16(-25)) & 127) : (Int64(29) | 1)) is Range<Int16>);
        let var_1729094812264_66: UInt64 = UInt64(UInt32(4));
        let var_1729094812264_78: Array<UInt64> = [UInt64(Int32(-108)), UInt64(UInt16(Int16(67))), UInt64(Int8(-33)),
            UInt64(65), UInt64(26), UInt64(198), UInt64(209), UInt64(163), UInt64(Int8(UInt8(Int8(-63)))),
            UInt64(UInt64(UInt32(229)))];
        let var_1729094812264_127: (Int32, UInt64, Float32, Float64, Rune, Rune) = (Int32(35), UInt64(193), Float32(30.0),
            Float64(Float32(Float32(4.0))), r'1', r's');
        try { // block id: 42
            [(), (), (), (), (), (), (), (), (), ()][8];
            try { // block id: 57
                if (var_1729094812264_60) {
                    [UInt64(175), var_1729094812264_66, UInt64(68), var_1729094812264_66, var_1729094812264_66,
                        UInt64(83), var_1729094812264_66, var_1729094812264_66, UInt64(68), UInt64(8)]
                } else {
                    var_1729094812264_78
                }
            } catch (_) { // block id: 99
                var_1729094812264_102 &= var_1729094812264_102
                var_1729094812264_78
            } finally { // block id: 109
                var_1729094812264_60;
                ((Int64(Int64(-120)) & 127)..(Int64(Int64(-64)) & 127) : (Int64(-56) | 1));
                if (var_1729094812264_60) {
                    [UInt64(223), UInt64(134), UInt64(75), UInt64(35), UInt64(33), UInt64(60), UInt64(204), UInt64(119),
                        UInt64(196), UInt64(102)]
                } else {
                    [UInt64(10), var_1729094812264_66, UInt64(209), UInt64(117), var_1729094812264_66, UInt64(59),
                        UInt64(48), var_1729094812264_66, var_1729094812264_66, UInt64(70)]
                }
            };
            var_1729094812264_127
        } finally { // block id: 137
            if (var_1729094812264_60) {
                ((Int64(Int64(96)) & 127)..(Int64(Int64(-88)) & 127) : (var_1729094812264_144 | 1))
            } else {
                ((Int64(var_1729094812264_144) & 127)..(Int64(Int64(43)) & 127) : (Int64(-74) | 1))
            };
            var var_1729094812264_159: Rune = r'H';
            (Int32(12), var_1729094812264_153, Float32(-98.0), Float64(-49.0), r'U', var_1729094812264_159)
        }
    };

    func func_1729094812264_35(namedParam_1729094812264_36!: Int32): (Int32, UInt64, Float32, Float64, Rune, Rune) { // block id: 37
        func_1729094812264_39()
    };

    var var_1729094812264_1099: (Range<Int64>) -> Option<Int32> = func_1729094812264_167<VArray<UInt32, $7>>;
    const var_1729094812264_1116: Unit = ();
    var var_1729094812264_1121: Int32 = Int32(Int16(45));
    const var_1729094812264_1129: UInt8 = 129;
    func_1729094812264_35(
        namedParam_1729094812264_36: ((((Int64(Int64(52)) & 127)..(Int64(Int64(-100)) & 127) : (Int64(120) | 1)) |>
            var_1729094812264_1099) ?? ([var_1729094812264_511, (), (), (), (), var_1729094812264_1112,
                var_1729094812264_1112, var_1729094812264_1116, (), ()], var_1729094812264_1121, var_1729094812264_1125,
            var_1729094812264_1050, var_1729094812264_1129)[1]))
}

@Frozen
public func func_1729094812264_27<T0, T1>(param_1729094812264_28: UInt32): UInt64 { // block id: 29
    var var_1729094812264_1133: (UInt16) -> (Int32, UInt64, Float32, Float64, Rune, Rune) = func_1729094812264_31;
    let var_1729094812264_1141: UInt16 = UInt16(Int16(UInt16(UInt8(75))));
    if (false) { // block id: 1138
        [true, true, false, false, false, true, true, true, false, true];
        var_1729094812264_1141
    } else if (true) { // block id: 1147
        let var_1729094812264_1149: Int8 = Int8(18);
        var_1729094812264_1149;
        UInt16(126)
    } else { // block id: 1152
        ();
        var_1729094812264_1155;
        UInt16(107)
    } << (((var_1729094812264_1141, var_1729094812264_1163, var_1729094812264_239, var_1729094812264_1141)[3]) & 7) |>
        var_1729094812264_1133;
    var var_1729094812264_1179: ((VArray<UInt32, $7>, Unit, Int64, Struct_1729094812264_820), (Range<UInt64>, UInt8)) = ((VArray<UInt32, $7>(repeat: UInt32(UInt32(151))),
            (), Int64(33), Struct_1729094812264_820()), (((UInt64(UInt64(113)) & 127)..=(UInt64(UInt64(93)) & 127) : (Int64(UInt64(219)) |
                1)), UInt8(UInt8(180))));
    (Option<((VArray<UInt32, $7>, Unit, Int64, Struct_1729094812264_820), (Range<UInt64>, UInt8))>.Some(
        var_1729094812264_1179) ?? var_1729094812264_1179)[0][1];
    UInt64(192)
}

main(): Int64 {
    try {
        Float32((-(var_1729094812264_14, UInt64(91), Float32(-77.0), Float64(-116.0), var_1729094812264_22,
            var_1729094812264_22)[2]));
        let var_1729094812264_1209: (UInt32) -> UInt64 = func_1729094812264_27<Rune, Array<Unit>>;
        UInt32(194) |> var_1729094812264_1209;
        var var_1729094812264_1216: Bool = ((Int32(-20), UInt64(11), Float32(Float32(102.0)), Float64(Float64(-9.0)),
            r'n', r'i') is (Float64) -> Bool);
        match (match (if (var_1729094812264_1216) {
            var_1729094812264_22
        } else {
            r'l'
        }) {
            case _ =>
                var_1729094812264_1233;
                var_1729094812264_1236;
                Option<((VArray<UInt32, $7>, Unit, Int64, Struct_1729094812264_820), (Range<UInt64>, UInt8))>.None
        }) {
            case _: (Int32, UInt64, Float32, Float64, Rune, Rune) =>
                if (true) {
                    ((Int64(Int64(-72)) & 127)..(Int64(Int64(59)) & 127) : (Int64(6) | 1))
                } else {
                    ((Int64(Int64(69)) & 127)..=(Int64(Int64(1)) & 127) : (Int64(3) | 1))
                };
                let var_1729094812264_1247: Range<UInt16> = ((UInt16(UInt16(91)) & 127)..(UInt16(UInt16(233)) & 127) : (Int64(Int64(-39)) |
                    1));
                var_1729094812264_1247;
                var_1729094812264_1254

            case _: Option<((VArray<UInt32, $7>, Unit, Int64, Struct_1729094812264_820), (Range<UInt64>, UInt8))> => var_1729094812264_1254 <<
                ((var_1729094812264_1254) & 7)

            case _ => var_1729094812264_1254 ^ Int64(-61)
        }
        // CRC Check All Variables
        var crcCheck = CrcCheck(5000, 32)
        crcCheck.updateBuffer(UInt64(var_1729094812264_14 * var_1729094812264_14), 64)
        crcCheck.updateBuffer(UInt64(var_1729094812264_1254 * var_1729094812264_1254), 64)
        crcCheck.crcCheck()
        crcCheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) {
        println("Exception: NoneValueException")
    }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        buffer = Array<Int64>(buffer_n, {i => 0})
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, {i => 0})
        var byte_c = 1
        var byte_index = 0
        while (value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[(i + buffer_index) % buffer.size] = byteArray[i + byte_index]
            i++
        }
        buffer_index = (buffer_index + i) % buffer.size
    }

    func updateBuffer(input: Bool, byte_n: Int64): Unit {
        if (input == true) {
            updateBuffer(1, byte_n)
        } else {
            updateBuffer(0, byte_n)
        }
    }

    func updateBuffer(input: Rune, byte_n: Int64): Unit {
        updateBuffer(UInt64(UInt32(input)), byte_n)
    }

    func updateBuffer(input: String, byte_n: Int64): Unit {
        for (c in input) {
            updateBuffer(c, byte_n)
        }
    }

    func updateBuffer(input: Unit, byte_n: Int64): Unit {
        updateBuffer(input.toString(), byte_n)
    }

    func updateBuffer(input: Any, byte_n: Int64): Unit {
        if (input is Hashable) {
            match (input as Hashable) {
                case Some(v) => updateBuffer(UInt64(v.hashCode()), byte_n)
                case _ => updateBuffer(1, byte_n)
            }
        } else if (input is ToString) {
            match (input as ToString) {
                case Some(v) => updateBuffer(v.toString(), byte_n)
                case _ => updateBuffer(1, byte_n)
            }
        } else {
            updateBuffer(1, byte_n)
        }
    }
    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, {i => 0})
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2 ** 2 * crc_output[i] + 2 ** 1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}

extend Struct_1729094812264_820 {}

extend Struct_1729094812264_171 {}

extend Class_1729094812264_207 {
    public func func_1729094812264_215(param_1729094812264_216: UInt32, param_1729094812264_217: Int16,
        param_1729094812264_218: Rune, param_1729094812264_219: Unit): Option<Int32> { // block id: 220
        var var_1729094812264_305: Range<Int16> = ((Int16(Int16(37)) & 127)..(Int16(Int16(73)) & 127) : (Int64(UInt64(29)) |
            1));
        const var_1729094812264_322: UInt16 = 146;
        try { // block id: 222
            var var_1729094812264_284: Range<UInt32> = ((UInt32(UInt32(Int32(-34))) & 127)..(UInt32(UInt32(248)) & 127) : (Int64(-89) |
                1));
            Interface_1729094812264_210<Unit, Int16, UInt64>.func_1729094812264_226(
                namedParam_1729094812264_227: var_1729094812264_284);
            if (true) { // block id: 292
                if (false) {
                    [(), (), (), (), (), (), (), (), (), ()]
                } else {
                    [(), (), (), (), (), (), (), (), (), ()]
                };
                ###"ua($AQMPLm"###
            } else { // block id: 298
                let var_1729094812264_301: Bool = true;
                if (var_1729094812264_301) {
                    ((Int16(Int16(1)) & 127)..(Int16(Int16(9)) & 127) : (Int64(45) | 1))
                } else {
                    var_1729094812264_305
                };
                "BOr)%rQc7\\"
            }
        } finally { // block id: 312
            var_1729094812264_322 |> func_1729094812264_314
        };
        if ((try { // block id: 495
            var_1729094812264_254;
            var_1729094812264_498;
            -Float64(16.0)
        } catch (_) { // block id: 508
            var_1729094812264_318;
            var_1729094812264_511;
            let var_1729094812264_514: Float64 = Float64(65.0);
            var_1729094812264_514
        } |> func_1729094812264_326)) { // block id: 516
            Int8(Int8(21));
            let var_1729094812264_524: Option<Int32> = (((Int64(Int64(124)) & 127)..=(Int64(Int64(-56)) & 127) : (Int64(Int64(Int8(86))) |
                1)) as Int32);
            if (false) { // block id: 521
                ();
                var_1729094812264_524
            } else if (true) { // block id: 533
                Option<Int32>.Some(Int32(-48))
            } else { // block id: 536
                let var_1729094812264_538: Unit = ();
                var_1729094812264_538;
                var_1729094812264_524
            }
        } else { // block id: 541
            var_1729094812264_511;
            let var_1729094812264_546: Array<Option<Int32>> = [Option<Int32>.None, Option<Int32>.None,
                (Option<Int32>.Some(Int32(57)) as Int32), Option<Int32>.None,
                ((Int32(45), UInt64(UInt16(234)), Float32(57.0), Float64(-34.0), r'o', r'z') as Int32),
                (Struct_1729094812264_171() as Int32), (UInt16(48) as Int32), Option<Int32>.None, Option<Int32>.None,
                (((Int64(Int64(-26)) & 127)..(Int64(Int64(110)) & 127) : (Int64(-72) | 1)) as Int32)];
            var_1729094812264_546[9]
        }
    }
}
