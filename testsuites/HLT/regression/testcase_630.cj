/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// (CJNATIVE) EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// (CJNATIVE) RUN-EXEC: %run %run_opt %output %run_args
// (not CJNATIVE) ERRCHECK: %compiler %overflow_wrapping %f %cmp_opt

public let var_1717413986396_20 : VArray<UInt32, $7> = VArray<UInt32, $7>(repeat: UInt32(108))
public const var_1717413986396_41 : Bool = false
public const var_1717413986396_44 : Unit = ()
public let var_1717413986396_54 : Int32 = Int32(UInt8(229))
let var_1717413986396_117 : (VArray<UInt32, $7>, Bool, Range<UInt32>, Range<Int16>, (VArray<UInt32, $7>, UInt32, Class_1717413986396_64, Int32, UInt16, Float32, Range<UInt32>, UInt32), String, Bool) = (VArray<UInt32, $7>(repeat: UInt32(166)), false, ((UInt32(UInt32(Int16(Int8(89))))&127)..(UInt32(UInt32(30))&127):(Int64(UInt64(92))|1)), ((Int16(Int16(-57))&127)..=(Int16(Int16(UInt8(Int8(55))))&127):(Int64(-29)|1)), (VArray<UInt32, $7>(repeat: UInt32(UInt8(227))), UInt32(68), Class_1717413986396_64(), Int32(91), UInt16(Int8(-50)), Float32(Float32(-51.0)), ((UInt32(UInt32(135))&127)..(UInt32(UInt32(9))&127):(Int64(-116)|1)), UInt32(181)), """
rSo\"\"
'$00 
""", false)
public var var_1717413986396_217 : Bool = (Int16(UInt8(188)) is Int32)
var var_1717413986396_306 : (VArray<UInt32, $7>, Int64, String, Unit) = (VArray<UInt32, $7>(repeat: UInt32(UInt32(UInt16(211)))), Int64(-107), ###"m9\"Ip#/JkD"###, ())
public var var_1717413986396_328 : Int32 = Int32(-37)
var var_1717413986396_332 : UInt16 = UInt16(246)
public var var_1717413986396_342 : Int = Int64(Int8(Int8(UInt8(249))))
public var var_1717413986396_375 : Enum_1717413986396_189 = Enum_1717413986396_189.enumValue_1717413986396_377((), ((UInt64(UInt64(UInt8(Int8(-105))))&127)..(UInt64(UInt64(252))&127):(Int64(Int32(UInt8(69)))|1)), ((UInt64(UInt64(UInt8(UInt8(190))))&127)..=(UInt64(UInt64(172))&127):(Int64(-54)|1)))
let var_1717413986396_400 : ??Enum_1717413986396_189 = Option<Option<Enum_1717413986396_189>>.None
var var_1717413986396_417 : Option<Class_1717413986396_64> = Option<Class_1717413986396_64>.None
var var_1717413986396_444 : Unit = ()
public var var_1717413986396_462 : Int8 = Int8(-105)
public const var_1717413986396_465 : Int16 = -99
public let var_1717413986396_468 : UInt32 = UInt32(UInt16(Int8(40)))
let var_1717413986396_473 : Range<Int64> = ((Int64(Int64(Int8(UInt8(220))))&127)..(Int64(Int64(Int16(100)))&127):(Int64(-81)|1))
public let var_1717413986396_494 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
public const var_1717413986396_523 : Unit = ()
public var var_1717413986396_618 : Int32 = Int32(Int16(121))
public const var_1717413986396_623 : Float32 = 39.0
var var_1717413986396_723 : UInt16 = UInt16(182)
public let var_1717413986396_743 : Option<UInt16> = Option<UInt16>.None
let var_1717413986396_759 : Class_1717413986396_64 = Class_1717413986396_697()
const func func_1717413986396_37(param_1717413986396_38 : Int32) : Unit { // block id: 39
    var_1717413986396_41;
    var_1717413986396_44
}

public open class Class_1717413986396_64 <: Resource {
    public init() { // block id: 66

    }
;
    public mut prop var_1717413986396_96 : Int32 { // block id: 97
        get() { // block id: 99
            ();
            Float32(Float32(Float32(Float32(104.0))));
            Int32(-17)
        }

        set(Value) { // block id: 108
            UInt8(65);
            ();
            ()
        }

    };
    public mut prop var_1717413986396_177 : UInt { // block id: 178
        get() { // block id: 180
            ((Int8(Int8(42))&127)..(Int8(Int8(36))&127):(Int64(-79)|1));
            UInt64(133);
            var_1717413986396_798
        }

        set(Value) { // block id: 185
            ();
            ();
            var_1717413986396_798 = Value
        }

    };
    public var var_1717413986396_285 : ?Unit = Option<Unit>.None;
    public mut prop var_1717413986396_407 : ?Enum_1717413986396_189 { // block id: 408
        get() { // block id: 410
            Option<Enum_1717413986396_189>.None
        }

        set(Value) { // block id: 414
            ()
        }

    };
    public open func func_1717413986396_453(namedParam_1717413986396_454 ! : Int16, namedParam_1717413986396_455 ! : UInt32, namedParam_1717413986396_456 ! : Range<Int64>, namedParam_1717413986396_457 ! : (Int32) -> Unit) : Int8 { // block id: 460
        var_1717413986396_462
    }
;
    static let var_1717413986396_549 : (Class_1717413986396_64, Range<UInt64>, Option<Option<Enum_1717413986396_189>>);
    static var var_1717413986396_561 : Range<UInt16>;
    public static mut prop var_1717413986396_651 : Option<UInt16> { // block id: 652
        get() { // block id: 654
            Int8(UInt8(UInt8(Int8(-110))));
            ();
            (UInt64(66) as UInt16)
        }

        set(Value) { // block id: 664
            ()
        }

    };
    private static prop var_1717413986396_701 : Class_1717413986396_697 { // block id: 702
        get() { // block id: 704
            ();
            Class_1717413986396_697()
        }

    };
    protected var var_1717413986396_708 : Float64 = Float64(41.0);
    public open func func_1717413986396_453() : Float64 { // block id: 633
        if ([true, true, false, false, false, false, true, false, true, true][6]) { // block id: 639
            var_1717413986396_444
        } else if (match ((var_1717413986396_468 as Class_1717413986396_64)) {
            case _ => 
                ();
                if (true) { var_1717413986396_651 } else { Option<UInt16>.None } ;
                false && false
            
        }) { // block id: 670
            match (var_1717413986396_465) {
                case -78 | 75 | 40 | 66 => 
                    UInt64(93)
                
                case _ => 
                    Int8(-47);
                    var_1717413986396_177
                
            };
            [var_1717413986396_444, (), (), var_1717413986396_523, (), var_1717413986396_444, var_1717413986396_44, (), (), var_1717413986396_444][0]
        };
        ();
        var_1717413986396_701.var_1717413986396_708
    }
;
    let var_1717413986396_794 : Int64 = Int64(-116);
    var var_1717413986396_798 : UInt64 = UInt64(137)
    static init() {
        var_1717413986396_549 = (Class_1717413986396_64(), ((UInt64(UInt64(160))&127)..(UInt64(UInt64(218))&127):(Int64(-2)|1)), Option<Option<Enum_1717413986396_189>>.None)
        var_1717413986396_561 = ((UInt16(UInt16(146))&127)..=(UInt16(UInt16(45))&127):(Int64(-86)|1))
    }
    public func isClosed(): Bool { return false }
    public func close(): Unit {}
}

func func_1717413986396_68(param_1717413986396_69 : (Int32) -> Unit) : Class_1717413986396_64 { // block id: 72
    var var_1717413986396_77 : Class_1717413986396_64 = Class_1717413986396_64();
    try { // block id: 74
        var_1717413986396_44;
        var_1717413986396_77
    } finally { // block id: 79
        "]n5.%4IeF-";
        let var_1717413986396_83 : UInt16 = UInt16(206);
        Int64(var_1717413986396_83);
        var_1717413986396_77
    }
}

public enum Enum_1717413986396_189 {
    defaultValue |
    enumValue_1717413986396_198(Int32, UInt16) |
    enumValue_1717413986396_377(Unit, Range<UInt64>, Range<UInt64>)
}






func func_1717413986396_244(param_1717413986396_245 : Unit) : Option<Class_1717413986396_64> { // block id: 246
    func func_1717413986396_258(param_1717413986396_259 : Range<UInt64>, optionalParam_1717413986396_260 ! : Int16 = Int16(Int8(30)), namedParam_1717413986396_263 ! : UInt16) : (VArray<UInt32, $7>, Int64, String, Unit) { // block id: 264
        func func_1717413986396_271() : Option<(VArray<UInt32, $7>, Int64, String, Unit)> { // block id: 272
            ();
            let var_1717413986396_282 : (Int32) -> Unit = func_1717413986396_37;
            (func_1717413986396_68(var_1717413986396_282).var_1717413986396_285 ?? func_1717413986396_37([Int32(-111), var_1717413986396_54, Int32(98), var_1717413986396_54, var_1717413986396_54, var_1717413986396_54, Int32(109), var_1717413986396_54, Int32(61), Int32(24)][4]));
            Option<(VArray<UInt32, $7>, Int64, String, Unit)>.None
        }
;
        (func_1717413986396_271() ?? try { // block id: 304
            var_1717413986396_306
        } finally { // block id: 325
            var_1717413986396_328--;
            var_1717413986396_332 <<= ((var_1717413986396_332) & 7);
            var_1717413986396_306
        })
    }
;
    let var_1717413986396_348 : Range<UInt64> = ((UInt64(UInt64(65))&127)..(UInt64(UInt64(177))&127):(Int64(-43)|1));
    func func_1717413986396_248(namedParam_1717413986396_249 ! : Enum_1717413986396_189, optionalParam_1717413986396_250 ! : Int8 = Int8(UInt8(UInt8(90)))) : Option<Class_1717413986396_64> { // block id: 254
        func_1717413986396_258(if (false) { ((UInt64(UInt64(92))&127)..=(UInt64(UInt64(72))&127):(var_1717413986396_342|1)) } else { var_1717413986396_348 } , namedParam_1717413986396_263 : (Option<UInt16>.Some(UInt16(87)) ?? UInt16(19)))[3];
        let var_1717413986396_404 : Class_1717413986396_64 = Class_1717413986396_64();
        ((try { // block id: 366
            var var_1717413986396_369 : UInt32 = UInt32(237);
            var_1717413986396_369 -= UInt32(234);
            Option<Option<Enum_1717413986396_189>>.Some(Option<Enum_1717413986396_189>.Some(var_1717413986396_375))
        } catch (_) { // block id: 396
            var_1717413986396_41;
            Class_1717413986396_64();
            var_1717413986396_400
        } ?? var_1717413986396_404.var_1717413986396_407) as Enum_1717413986396_189);
        var_1717413986396_417
    }
;
    const var_1717413986396_425 : String = "Js1-a{yxa{10";
    var var_1717413986396_450 : Class_1717413986396_64 = Class_1717413986396_64();
    var var_1717413986396_482 : (Int32) -> Unit = func_1717413986396_37;
    func_1717413986396_248(namedParam_1717413986396_249 : if (((var_1717413986396_20, Int64(18), var_1717413986396_425, ()) is (Int32) -> Unit)) { // block id: 428
        var_1717413986396_400;
        if (var_1717413986396_217) { Enum_1717413986396_189.enumValue_1717413986396_377(var_1717413986396_44, ((UInt64(UInt64(179))&127)..=(UInt64(UInt64(240))&127):(Int64(-78)|1)), var_1717413986396_348) } else { var_1717413986396_375 } 
    } else if (var_1717413986396_332 < UInt16(102)) { // block id: 440
        var_1717413986396_375
    } else { // block id: 442
        var_1717413986396_444;
        ();
        var_1717413986396_375
    }, optionalParam_1717413986396_250 : var_1717413986396_450.func_1717413986396_453(namedParam_1717413986396_454 : var_1717413986396_465, namedParam_1717413986396_455 : var_1717413986396_468, namedParam_1717413986396_456 : var_1717413986396_473, namedParam_1717413986396_457 : var_1717413986396_482));
    let var_1717413986396_517 : Unit = ();
    try { // block id: 487
        var var_1717413986396_490 : UInt64 = UInt64(Int16(-81));
        var_1717413986396_490--;
        var_1717413986396_494
    } catch (e: Exception) { // block id: 506
        if (var_1717413986396_41) { """
\"unjG
<V,zz
""" } else { var_1717413986396_425 } ;
        if (var_1717413986396_41) { [var_1717413986396_444, (), var_1717413986396_517, (), (), (), var_1717413986396_523, var_1717413986396_517, var_1717413986396_517, ()] } else { var_1717413986396_494 } 
    }[0];
    try { // block id: 531
        var_1717413986396_417
    } finally { // block id: 533
        UInt8(UInt8(40));
        (var_1717413986396_400 as Class_1717413986396_64)
    }
}


public open class Class_1717413986396_697 <: Class_1717413986396_64 {
    public init() { // block id: 699

    }

    static init() {
    }
}

func func_1717413986396_59(param_1717413986396_60 : Float64) : Float64 { // block id: 61
    const var_1717413986396_210 : UInt64 = 58;
    func_1717413986396_68({ lambdaParameter_1717413986396_88 : Int32 => var var_1717413986396_93 : Class_1717413986396_64 = Class_1717413986396_64(); var_1717413986396_93.var_1717413986396_96 >>= ((var_1717413986396_117[4][3]) & 7) }).var_1717413986396_177 &= match ((Option<Enum_1717413986396_189>.None ?? Enum_1717413986396_189.enumValue_1717413986396_198(var_1717413986396_54, UInt16(200)))) {
        case defaultValue => 
            var_1717413986396_54;
            UInt64(88) | var_1717413986396_210
        
        case _ => 
            var_1717413986396_217 &&= var_1717413986396_41;
            ((Int16(Int16(-29))&127)..=(Int16(Int16(-105))&127):(Int64(-68)|1));
            UInt64(209) + UInt64(35)
        
    };
    func func_1717413986396_231(namedParam_1717413986396_232 ! : Range<UInt16>, namedParam_1717413986396_233 ! : Range<UInt16>, namedParam_1717413986396_234 ! : (VArray<UInt32, $7>, UInt32, Class_1717413986396_64, Int32, UInt16, Float32, Range<UInt32>, UInt32), optionalParam_1717413986396_235 ! : Class_1717413986396_64 = Class_1717413986396_64()) : Class_1717413986396_64 { // block id: 237
        var var_1717413986396_541 : Rune = 'V';
        (((var_1717413986396_541 = '8')|>func_1717413986396_244) ?? Class_1717413986396_64.var_1717413986396_549[0])
    }
;
    let var_1717413986396_580 : UInt8 = UInt8(UInt8(Int8(-72)));
    let var_1717413986396_602 : ?(VArray<UInt32, $7>, UInt32, Class_1717413986396_64, Int32, UInt16, Float32, Range<UInt32>, UInt32) = Option<(VArray<UInt32, $7>, UInt32, Class_1717413986396_64, Int32, UInt16, Float32, Range<UInt32>, UInt32)>.None;
    let var_1717413986396_615 : Class_1717413986396_64 = Class_1717413986396_64();
    func func_1717413986396_227() : Float64 { // block id: 228
        var var_1717413986396_588 : Range<UInt16> = ((UInt16(UInt16(Int16(52)))&127)..(UInt16(UInt16(174))&127):(Int64(Int8(UInt8(186)))|1));
        func_1717413986396_231(namedParam_1717413986396_232 : Class_1717413986396_64.var_1717413986396_561, namedParam_1717413986396_233 : if (var_1717413986396_41) { // block id: 568
            if (var_1717413986396_41) { ((UInt16(UInt16(94))&127)..=(UInt16(UInt16(137))&127):(Int64(38)|1)) } else { ((UInt16(var_1717413986396_332)&127)..=(UInt16(var_1717413986396_332)&127):(Int64(-76)|1)) } 
        } else if (true) { // block id: 577
            -var_1717413986396_580;
            var_1717413986396_523;
            ((UInt16(UInt16(89))&127)..=(UInt16(UInt16(197))&127):(Int64(90)|1))
        } else { // block id: 586
            var_1717413986396_588
        }, namedParam_1717413986396_234 : (var_1717413986396_602 ?? (VArray<UInt32, $7>(repeat: var_1717413986396_468), var_1717413986396_468, var_1717413986396_615, var_1717413986396_618, UInt16(132), var_1717413986396_623, ((UInt32(UInt32(157))&127)..(UInt32(var_1717413986396_468)&127):(var_1717413986396_342|1)), var_1717413986396_468)), optionalParam_1717413986396_235 : Class_1717413986396_64()).func_1717413986396_453()
    }
;
    func_1717413986396_227()
}


main(): Int64 {
    try {
        let var_1717413986396_47 : (Int32) -> Unit = { lambdaParameter_1717413986396_50 : Int32 => () };
        try (resource = Class_1717413986396_64()) { // block id: 6

        } catch (_) { // block id: 7
            var_1717413986396_20[6];
            var_1717413986396_54|>var_1717413986396_47
        } finally { // block id: 57
            Float64(107.0)|>func_1717413986396_59;
            var_1717413986396_444
        };
        var var_1717413986396_727 : Range<Int8> = ((Int8(Int8(-99))&127)..=(Int8(Int8(Int8(Int8(-99))))&127):(Int64(Int32(-41))|1));
        if ((var_1717413986396_41, ((Int64(var_1717413986396_342)&127)..(Int64(var_1717413986396_342)&127):(var_1717413986396_342|1)), var_1717413986396_723, var_1717413986396_44, var_1717413986396_727)[0]) { // block id: 736
            var var_1717413986396_747 : UInt32 = UInt32(Int16(-118));
            try (resource = Class_1717413986396_64()) { // block id: 738
                if (true) { Option<UInt16>.None } else { var_1717413986396_743 } ;
                var_1717413986396_747++
            } catch (_) { // block id: 750

            } finally { // block id: 751
                "M}3\"EARJ%h";
                var var_1717413986396_755 : VArray<UInt32, $7> = [UInt32(190), UInt32(189), UInt32(231), UInt32(155), UInt32(178), UInt32(196), UInt32(145)];
                (var_1717413986396_755, UInt32(33), var_1717413986396_759, var_1717413986396_328, UInt16(213), var_1717413986396_623, ((UInt32(var_1717413986396_747)&127)..=(UInt32(UInt32(44))&127):(var_1717413986396_342|1)), var_1717413986396_468);
                ()
            };
            var loopTimeVar_1717413986396_774 : Int = 0;
            do {
                loopTimeVar_1717413986396_774++;

            } while ((false) && loopTimeVar_1717413986396_774 < 100 ) ;
            let var_1717413986396_778 : Array<Int64> = [Int64(-109), Int64(57), Int64(-89), Int64(-66), Int64(-124), Int64(47), Int64(-126), Int64(-128), Int64(123), Int64(-61)];
            var_1717413986396_778[3]
        } else { // block id: 781
            (Option<Rune>.None ?? r'd');
            let var_1717413986396_791 : Class_1717413986396_697 = Class_1717413986396_697();
            var_1717413986396_791.var_1717413986396_794
        }
        // CRC Check All Variables
        var crcCheck = CrcCheck(5000, 32)
        crcCheck.updateBuffer(UInt64(var_1717413986396_54*var_1717413986396_54), 64)
        crcCheck.updateBuffer(UInt64(var_1717413986396_332*var_1717413986396_332), 64)
        crcCheck.updateBuffer(UInt64(var_1717413986396_342*var_1717413986396_342), 64)
        crcCheck.updateBuffer(UInt64(var_1717413986396_462*var_1717413986396_462), 64)
        crcCheck.updateBuffer(UInt64(var_1717413986396_468*var_1717413986396_468), 64)
        crcCheck.updateBuffer(UInt64(var_1717413986396_723*var_1717413986396_723), 64)
        crcCheck.crcCheck()
        crcCheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[(i + buffer_index) % buffer.size] = byteArray[i + byte_index]
            i++
        }
        buffer_index = (buffer_index + i) % buffer.size
    }

    func updateBuffer(input: Bool, byte_n: Int64): Unit {
        if (input == true) {
            updateBuffer(1, byte_n)
        } else {
            updateBuffer(0, byte_n)
        }
    }

    func updateBuffer(input: Rune, byte_n: Int64): Unit {
        updateBuffer(UInt64(UInt32(input)), byte_n)
    }

    func updateBuffer(input: String, byte_n: Int64): Unit {
        for (c in input) {
            updateBuffer(c, byte_n)
        }
    }

    func updateBuffer(input: Unit, byte_n: Int64): Unit {
        updateBuffer(input.toString(), byte_n)
    }

    func updateBuffer(input: Any, byte_n: Int64) : Unit {
        if (input is Hashable) {
            match(input as Hashable) {
                case Some(v) => updateBuffer(UInt64(v.hashCode()), byte_n)
                case _=> updateBuffer(1, byte_n)
            }
            
        } else if (input is ToString) {
            match(input as ToString) {
                case Some(v) => updateBuffer(v.toString(), byte_n)
                case _=> updateBuffer(1, byte_n)
            }
        } else {
            updateBuffer(1, byte_n)
        }
    }     
    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}

extend Class_1717413986396_64 {

}

extend Class_1717413986396_697 {

}

// ASSERT: scan HLIR ERROR: VArrays in instance class fields are not supported yet
