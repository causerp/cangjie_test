/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args

// All global variable need to be defined before use!
public let var_1672949782441_16 : Option<Unit> = (UInt32(Int32(Int16(Int16(-86)))) as Unit)
public var var_1672949782441_112 : Bool = (UInt16(206) is Range<UInt16>)
let var_1672949782441_118 : Int32 = Int32(-81)
public let var_1672949782441_141 : (Rune, Int16) = (r'c', Int16(UInt16(UInt16(Int16(75)))))
var var_1672949782441_199 : (Range<Int32>, Int8, Option<Option<Int8>>, Int16, UInt32, Array<UInt64>) = (((Int32(-90)&127)..=(Int32(112)&127):(1|1)), Int8(-28), (((UInt32(140)&127)..(UInt32(6)&127):(58|1)) as Option<Int8>), Int16(UInt16(133)), UInt32(Int32(-119)), [UInt64(164), UInt64(8), UInt64(148), UInt64(33), UInt64(UInt8(UInt8(33))), UInt64(Int32(Int8(-67))), UInt64(39), UInt64(139), UInt64(UInt32(UInt16(167))), UInt64(UInt64(143))])
public var var_1672949782441_243 : Range<Int64> = ((Int64(Int32(56))&127)..(Int64(Int32(81))&127):((Int64(Int32(UInt16(119)))|1)))
public let var_1672949782441_254 : Int64 = Int64(UInt64(13))
public var var_1672949782441_318 : Int64 = Int64(Int16(Int8(Int8(Int8(-67)))))
public let var_1672949782441_434 : (UInt16, Option<Unit>) = (UInt16(Int8(-47)), Option<Unit>.None)
public var var_1672949782441_450 : ?Range<Int64> = Option<Range<Int64>>.None
public let var_1672949782441_455 : Unit = ()
public let var_1672949782441_480 : UInt16 = UInt16(UInt8(235))
public let var_1672949782441_552 : Option<Bool> = (Float32(5.0) as Bool)
public let var_1672949782441_578 : UInt8 = UInt8(142)
public let var_1672949782441_591 : Float64 = Float64((-113.0))
public var var_1672949782441_599 : Range<Int32> = ((Int32(102)&127)..(Int32(45)&127):((-10)|1))
public var var_1672949782441_607 : Range<Int8> = ((Int8(Int8(UInt8(134)))&127)..=(Int8(-3)&127):(((-30)|1)))
public let var_1672949782441_638 : (Float64, Range<Int64>, Range<Int32>, Int64, Range<Int32>, Range<Int8>, Array<Bool>, UInt16) = (Float64(Float32(26.0)), (((-59)&127)..=(Int64(UInt16(Int8(-85)))&127):((45|1))), ((Int32(36)&127)..=(Int32(94)&127):(16|1)), Int64(UInt16(239)), ((Int32(84)&127)..=(Int32(-5)&127):(64|1)), ((Int8(16)&127)..=(Int8(-32)&127):(46|1)), [true, true, true, false, false, true, false, false, false, false], UInt16(UInt16(59)))
public let var_1672949782441_691 : Int64 = Int64(UInt8(141))
public var var_1672949782441_781 : Option<Int64> = (UInt64(UInt8(171)) as Int64)
let var_1672949782441_845 : Option<Int8> = (((Int16(-56)&127)..(Int16(UInt8(213))&127):((Int64(Int8(Int8(-99)))|1))) as Int8)
public let var_1672949782441_879 : Float32 = Float32(71.0)
public let var_1672949782441_884 : Class_1672949782441_513<Float64> = Class_1672949782441_513<Float64>()
public var var_1672949782441_892 : Float64 = (-27.0)
public var var_1672949782441_930 : Array<Rune> = [r'K', r'F', r'K', r'l', r'I', r'U', r'V', r'2', r'S', r'J']
var var_1672949782441_937 : UInt64 = UInt64(188)


public func func_1672949782441_150<T0, T1>(namedParam_1672949782441_59 ! : Int32, namedParam_1672949782441_60 ! : String) : Bool { // block id: 61
    let var_1672949782441_99 : Option<Int8> = Option<Int8>.None;
    try (resource = Class_1672949782441_513<Float64>()) { // block id: 63
        let var_1672949782441_68 : String = """
'4*xz
2mC90
""";
        if (true) { "wB K\"=/Yqk" } else { var_1672949782441_68 } ;
        ()
    } catch (_) { // block id: 71
        let var_1672949782441_74 : Bool = true;
        var loopTimeVar_1672949782441_77 : Range<UInt64> = ((UInt64(37)&127)..(UInt64(153)&127):((Int64(Int64(Int32(-124)))|1)));
        for (i in loopTimeVar_1672949782441_77 where var_1672949782441_74) {

        };
        (var_1672949782441_99 ?? Int8(84));
        var var_1672949782441_106 : Int32 = Int32(Int8(48));
        var loopTimeVar_1672949782441_110 : Int64 = 0;
        while ((var_1672949782441_74) && loopTimeVar_1672949782441_110 < 100 ) {
            loopTimeVar_1672949782441_110++;
            var_1672949782441_106
        }
    };
    var_1672949782441_112
}



func func_1672949782441_178(param_1672949782441_179 : Int32, optionalParam_1672949782441_180 ! : Int8 = Int8(UInt8(210)), optionalParam_1672949782441_183 ! : (Int32, String) -> Bool = func_1672949782441_150<Range<Int32>, Option<Int8>>, namedParam_1672949782441_188 ! : Int32) : Array<Range<Int64>> { // block id: 189
    let var_1672949782441_282 : Range<Int64> = ((Int64(UInt64(205))&127)..(Int64(Int32(Int8(UInt8(106))))&127):(((-98)|1)));
    let var_1672949782441_306 : Int64 = (-120);
    let var_1672949782441_348 : Array<Range<Int64>> = [((30&127)..((-61)&127):((-52)|1)), (((-127)&127)..=((-50)&127):((-98)|1)), (((-119)&127)..=((-115)&127):((-21)|1)), (((-21)&127)..=(1&127):((-77)|1)), ((36&127)..((-70)&127):(108|1)), (((-25)&127)..(28&127):(38|1)), (((-17)&127)..=((-116)&127):(25|1)), ((52&127)..(57&127):((-21)|1)), (((-125)&127)..(16&127):(60|1)), (((-103)&127)..((-67)&127):(68|1))];
    match ((var_1672949782441_199[2] ?? Option<Int8>.None)) {
        case _ => 
            var var_1672949782441_234 : UInt16 = UInt16(15);
            ((var_1672949782441_234&127)..(UInt16(190)&127):(((-111)|1)));
            var var_1672949782441_272 : Range<Int64> = ((Int64(UInt32(53))&127)..=(Int64(UInt32(Int32(Int16(-2))))&127):((99|1)));
            if (var_1672949782441_112) { [(((-90)&127)..=((-39)&127):(45|1)), ((3&127)..((-25)&127):(18|1)), ((26&127)..=((-60)&127):((-121)|1)), ((92&127)..((-22)&127):(52|1)), (((-43)&127)..=(78&127):(42|1)), (((-17)&127)..=((-36)&127):(55|1)), ((96&127)..((-106)&127):((-8)|1)), (((-29)&127)..=(95&127):((-90)|1)), (((-95)&127)..=((-8)&127):((-107)|1)), (((-84)&127)..(87&127):((-40)|1))] } else { [var_1672949782441_243, ((var_1672949782441_254&127)..((-101)&127):(((-59)|1))), ((22&127)..(15&127):((25|1))), var_1672949782441_243, (((-113)&127)..=((-37)&127):((-119)|1)), (((-39)&127)..(114&127):((48|1))), (((-106)&127)..=(70&127):(79|1)), var_1672949782441_243, var_1672949782441_272, var_1672949782441_282] } 
        
        case _ => 
            if (var_1672949782441_112) { var_1672949782441_16 } else { Option<Unit>.None } ;
            var var_1672949782441_339 : Int64 = Int64(UInt64(Int8(26)));
            [((94&127)..(17&127):(72|1)), ((var_1672949782441_254&127)..=(var_1672949782441_254&127):((var_1672949782441_254|1))), ((var_1672949782441_306&127)..(var_1672949782441_306&127):((21|1))), var_1672949782441_243, (((-100)&127)..(var_1672949782441_306&127):((var_1672949782441_254|1))), ((var_1672949782441_254&127)..=(var_1672949782441_318&127):((var_1672949782441_254|1))), ((var_1672949782441_306&127)..(var_1672949782441_306&127):((var_1672949782441_318|1))), ((var_1672949782441_306&127)..(56&127):(((-84)|1))), ((var_1672949782441_254&127)..(32&127):((var_1672949782441_306|1))), ((var_1672949782441_339&127)..=(var_1672949782441_339&127):((0|1)))]
        
        case _ => 
            var_1672949782441_348;
            [((25&127)..=(32&127):(50|1)), (((-106)&127)..=((-58)&127):(33|1)), (((-10)&127)..=((-123)&127):(43|1)), (((-82)&127)..=(58&127):((-39)|1)), (((-40)&127)..=(11&127):(53|1)), (((-44)&127)..((-115)&127):(29|1)), (((-104)&127)..=((-27)&127):((-43)|1)), ((69&127)..((-4)&127):((-32)|1)), ((65&127)..((-56)&127):(55|1)), (((-22)&127)..(27&127):((-53)|1))]
        
    }
}

public func func_1672949782441_150(param_1672949782441_151 : Range<Int32>, param_1672949782441_152 : (Int32, String) -> Bool) : Range<Int64> { // block id: 156
    let var_1672949782441_165 : ?Range<Int64> = Option<Range<Int64>>.None;
    (try { // block id: 163
        var_1672949782441_165
    } finally { // block id: 167
        let var_1672949782441_171 : Int64 = (-37);
        Option<Range<Int64>>.Some(((var_1672949782441_171&127)..=(101&127):((10|1))))
    } ?? func_1672949782441_178(Int32(-114), namedParam_1672949782441_188 : Int32(79))[1])
}


public func func_1672949782441_410<T0>(param_1672949782441_411 : UInt16) : Bool { // block id: 412
    let var_1672949782441_425 : UInt16 = UInt16(34);
    var var_1672949782441_429 : Range<Int16> = ((Int16(-36)&127)..=(Int16(1)&127):((-109)|1));
    (Int16(34)&127)..(Int16(if (false) { // block id: 418
        ();
        var_1672949782441_254;
        UInt16(223)
    } else if (true) { // block id: 423
        var_1672949782441_425
    } else { // block id: 427
        var_1672949782441_429;
        if (var_1672949782441_112) { var_1672949782441_434 } else { var_1672949782441_434 } ;
        UInt16(34) * UInt16(2)
    })&127):((match (var_1672949782441_450) {
        case _ => 
            var_1672949782441_455;
            var var_1672949782441_460 : Option<Int64> = Option<Int64>.None;
            if (var_1672949782441_112) { var_1672949782441_460 } else { var_1672949782441_460 } 
        
    } ?? [16, var_1672949782441_318, var_1672949782441_254, 82, var_1672949782441_254, var_1672949782441_318, var_1672949782441_318, (-97), (-124), 82][1])|1);
    var_1672949782441_112
}

public open class Class_1672949782441_513<T0> <: Resource {
    public init() { // block id: 515

    }
;
    public prop var_1672949782441_520 : Unit { // block id: 521
        get() { // block id: 523
            (r'r', Int16(-126));
            ()
        }

    };
    public let var_1672949782441_887 : Float32 = Float32(-106.0);
    public static prop var_1672949782441_980 : Unit { // block id: 981
        get() { // block id: 983

        }

    }
    public func isClosed(): Bool { return true }
    public func close(): Unit {}
}


func func_1672949782441_359<T0>(optionalParam_1672949782441_360 ! : (Range<Int32>, Int8, Option<Option<Int8>>, Int16, UInt32, Array<UInt64>) = (((Int32(-94)&127)..(Int32(72)&127):(114|1)), Int8(24), Option<Option<Int8>>.Some((((Int32(47)&127)..=(Int32(5)&127):(((-110)|1))) as Int8)), Int16(Int16(20)), UInt32(Int16(UInt8(87))), [UInt64(UInt32(76)), UInt64(UInt16(228)), UInt64(83), UInt64(Int32(UInt16(8))), UInt64(149), UInt64(Int8(UInt8(141))), UInt64(233), UInt64(UInt64(237)), UInt64(118), UInt64(123)]), optionalParam_1672949782441_393 ! : Option<Range<Int64>> = Option<Range<Int64>>.None, optionalParam_1672949782441_395 ! : (Int32, String) -> Bool = { lambdaParameter_1672949782441_398 : Int32, lambdaParameter_1672949782441_399 : String => ("32-Xa{Fl]OB" is Int16) }) : Unit { // block id: 406
    var loopTimeVar_1672949782441_529 : Int64 = 0;
    do {
        loopTimeVar_1672949782441_529++;
        var loopTimeVar_1672949782441_511 : Int64 = 0;
        while ((var_1672949782441_112) && loopTimeVar_1672949782441_511 < 100 ) {
            loopTimeVar_1672949782441_511++;
            ();
            ()
        };
        let var_1672949782441_517 : Class_1672949782441_513<Float64> = Class_1672949782441_513<Float64>();
        var_1672949782441_517.var_1672949782441_520
    } while ((if ((var_1672949782441_480|>func_1672949782441_410<UInt16>)) { // block id: 483
        ();
        var_1672949782441_112
    } else { // block id: 486
        var var_1672949782441_488 : Option<Option<Int8>> = Option<Option<Int8>>.Some(Option<Int8>.Some(Int8(-110)));
        var_1672949782441_488;
        [var_1672949782441_318, (-91), 5, 47, var_1672949782441_254, (-62), (-50), 27, var_1672949782441_318, 69];
        true
    }) && loopTimeVar_1672949782441_529 < 100 ) ;
    let var_1672949782441_559 : (UInt16, Option<Unit>) = (UInt16(216), Option<Unit>.Some(()));
    (if ([false, false, false, true, false, false, false, true, false, true][0]) { try { // block id: 541
        ();
        if (var_1672949782441_112) { Option<Bool>.Some(var_1672949782441_112) } else { Option<Bool>.None } 
    } finally { // block id: 548
        if (true) { var_1672949782441_552 } else { Option<Bool>.Some(var_1672949782441_112) } 
    } } else { (var_1672949782441_559 as Bool) }  ?? (var_1672949782441_552 ?? ((-90.0) is (UInt16) -> Bool)));
    var var_1672949782441_570 : UInt32 = UInt32(UInt8(UInt8(Int8(-127))));
    var_1672949782441_570 >>= ((UInt32(Int8(var_1672949782441_578))) & 7)
}

public func func_1672949782441_355(param_1672949782441_356 : Bool) : Range<Int32> { // block id: 357
    var var_1672949782441_581 : (Int32, String) -> Bool = func_1672949782441_150<Range<Int32>, Option<Int8>>;
    func_1672949782441_359<Option<Range<Int64>>>(optionalParam_1672949782441_395 : var_1672949782441_581);
    let var_1672949782441_615 : Array<Bool> = [(((UInt64(25)&127)..=(UInt64(69)&127):(113|1)) is Array<Int64>), true, (((r'v', Int16(-85)) as Bool) is (Int32, Int8, (Int32, String) -> Bool, Int32) -> Array<Range<Int64>>), false, true, (Class_1672949782441_513<Float64>() is Int32), true, true, (() is (Int32, String) -> Bool), (Int16(UInt8(154)) is Rune)];
    var var_1672949782441_662 : UInt64 = UInt64(Int16(57));
    let var_1672949782441_668 : Int64 = (-116);
    let var_1672949782441_713 : Int8 = Int8(-16);
    var var_1672949782441_724 : Unit = ();
    var var_1672949782441_746 : Array<UInt64> = [UInt64(23), UInt64(78), UInt64(138), UInt64(87), UInt64(201), UInt64(Int16(UInt16(Int8(121)))), UInt64(45), UInt64(UInt8(64)), UInt64(3), UInt64(74)];
    let var_1672949782441_797 : Array<Int64> = [67, Int64(Int16(Int16(UInt16(208)))), Int64(UInt64(UInt16(181))), 94, Int64(Int16(-85)), Int64(UInt64(Int16(-120))), Int64(Int8(52)), Int64(UInt8(226)), Int64(UInt32(Int16(UInt16(127)))), Int64(UInt32(30))];
    [var_1672949782441_254, if (true) { (var_1672949782441_591, ((var_1672949782441_254&127)..(var_1672949782441_318&127):((41|1))), var_1672949782441_599, 30, ((Int32(20)&127)..=(Int32(31)&127):((var_1672949782441_318|1))), var_1672949782441_607, var_1672949782441_615, var_1672949782441_480) } else { var_1672949782441_638 } [3], match (Option<Unit>.None) {
        case _ => 
            var_1672949782441_662;
            var_1672949782441_318 >> ((var_1672949782441_668) & 7)
        
    }, if (false) { [113, var_1672949782441_668, 113, var_1672949782441_318, 99, var_1672949782441_254, var_1672949782441_318, var_1672949782441_668, var_1672949782441_318, var_1672949782441_318] } else { [var_1672949782441_668, 34, 55, 101, 20, var_1672949782441_691, (-105), (-118), (-93), (-29)] } [4], var_1672949782441_668, try { // block id: 701
        var_1672949782441_455;
        var_1672949782441_691
    } catch (_) { // block id: 704
        var_1672949782441_434;
        var_1672949782441_691 - 95
    }, Int64(match (Option<Int8>.Some(var_1672949782441_713)) {
        case _ => 
            ((UInt8(169)&127)..=(UInt8(201)&127):(13|1));
            Int16(110)
        
    }), try { // block id: 720
        var_1672949782441_691
    } catch (e: Exception) { // block id: 722
        var_1672949782441_724;
        37
    } finally { // block id: 727
        var_1672949782441_318
    }, var_1672949782441_318, (match (var_1672949782441_16) {
        case caseVar_1672949782441_735 => 
            if (true) { Option<Int64>.None } else { Option<Int64>.None } 
        
        case caseVar_1672949782441_743 => 
            var_1672949782441_746;
            ();
            let var_1672949782441_765 : Int64 = 66;
            Option<Int64>.Some(var_1672949782441_765)
        
        case _ => 
            let var_1672949782441_773 : UInt32 = UInt32(UInt16(177));
            ((UInt32(120)&127)..(var_1672949782441_773&127):((var_1672949782441_318|1)));
            UInt8(141) | var_1672949782441_578;
            var_1672949782441_781
        
        case caseVar_1672949782441_787 : (Rune, Int16) => 
            ();
            ();
            var_1672949782441_781
        
        case _ => 
            var_1672949782441_781
        
    } ?? var_1672949782441_797[3])];
    ((Int32(37)&127)..=(Int32(118)&127):(80|1))
}

public func func_1672949782441_131(namedParam_1672949782441_132 ! : Float64, optionalParam_1672949782441_133 ! : Int8 = Int8(-118)) : String { // block id: 135
    let var_1672949782441_828 : (Int32, String) -> Bool = func_1672949782441_150<Range<Int32>, Option<Int8>>;
    if ((var_1672949782441_141[1] is Option<Int8>)) { func_1672949782441_150((var_1672949782441_112|>func_1672949782441_355), var_1672949782441_828) } else { (var_1672949782441_450 ?? ((125&127)..(var_1672949782441_254&127):((93|1)))) } ;
    "q+E?[w,r3&"
}


public func func_1672949782441_24<T0>() : Unit { // block id: 25
    var var_1672949782441_32 : Unit = ();
    let var_1672949782441_855 : Option<Int8> = (Float32(-38.0) as Int8);
    let var_1672949782441_902 : (Int64, Float64, UInt16, Bool, UInt8, Float32, Int32) = (Int64(Int32(24)), Float64(Float32(Float32(-1.0))), UInt16(140), ((UInt16(Int16(-24)), ((UInt16(160), Option<Unit>.Some(())) as Unit)) is Unit), UInt8(108), Float32(50.0), Int32(-70));
    func func_1672949782441_46(namedParam_1672949782441_47 ! : UInt64, optionalParam_1672949782441_48 ! : Int32 = Int32(Int16(Int8(UInt8(Int8(101))))), namedParam_1672949782441_54 ! : Int64) : Rune { // block id: 55
        if (func_1672949782441_150<Range<Int32>, Option<Int8>>(namedParam_1672949782441_59 : try { // block id: 116
            var_1672949782441_118
        } finally { // block id: 120
            ();
            var var_1672949782441_124 : Int16 = Int16(Int8(UInt8(34)));
            var_1672949782441_124 |= var_1672949782441_124;
            Int32(26)
        }, namedParam_1672949782441_60 : func_1672949782441_131(namedParam_1672949782441_132 : var_1672949782441_591))) { // block id: 838
            Float32(Float32(30.0))
        } else if (match (if (var_1672949782441_112) { var_1672949782441_845 } else { var_1672949782441_855 } ) {
            case _ => 
                false
            
        }) { // block id: 861
            [(), var_1672949782441_455, (), (), var_1672949782441_455, var_1672949782441_455, (), (), var_1672949782441_455, var_1672949782441_455][3];
            Int64(var_1672949782441_578);
            var_1672949782441_879
        } else { // block id: 881
            var_1672949782441_884.var_1672949782441_887
        };
        Float64((var_1672949782441_892 * Float64(Float32(15.0))));
        if (var_1672949782441_902[3]) { (Option<Array<Rune>>.None ?? var_1672949782441_930) } else { (Option<Array<Rune>>.None ?? [r'o', r'w', r'n', r'c', r'n', r'g', r'K', r'v', r'i', r'Y']) } [3]
    }
;
    try (resource = Class_1672949782441_513<Float64>()) { // block id: 27
        var var_1672949782441_36 : UInt64 = UInt64(108);
        if (true) { // block id: 30
            var_1672949782441_32;
            var_1672949782441_36 >>= ((UInt64(56)) & 7)
        };
        var loopTimeVar_1672949782441_43 : Int64 = 0;
        while ((true) && loopTimeVar_1672949782441_43 < 100 ) {
            loopTimeVar_1672949782441_43++;

        }
    } catch (_) { // block id: 44
        func_1672949782441_46(namedParam_1672949782441_47 : var_1672949782441_937, optionalParam_1672949782441_48 : var_1672949782441_118, namedParam_1672949782441_54 : var_1672949782441_254);
        (r'M', var_1672949782441_141, var_1672949782441_591, var_1672949782441_892, var_1672949782441_243, ((var_1672949782441_480&127)..(var_1672949782441_480&127):((var_1672949782441_318|1))), 125, var_1672949782441_141)[4];
        var loopTimeVar_1672949782441_964 : Array<Rune> = [r'R', r'e', r'n', r'N', r'N', r'g', r'D', r'9', r'5', r'D'];
        for (i in loopTimeVar_1672949782441_964 where var_1672949782441_112) {
            if (var_1672949782441_112) { Option<Unit>.None } else { Option<Unit>.Some(()) } 
        }
    } finally { // block id: 976
        Class_1672949782441_513<Float64>.var_1672949782441_980;
        ()
    }
}

main(): Int64 {
    try {
        ((UInt16(213), var_1672949782441_16)[1] ?? func_1672949782441_24<Option<Int64>>());
        ((UInt64(110)&127)..=(UInt64(2)&127):((-14)|1));
        23
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var_1672949782441_318*var_1672949782441_318), 64)
        crccheck.updateBuffer(UInt64(var_1672949782441_480*var_1672949782441_480), 64)
        crccheck.updateBuffer(UInt64(var_1672949782441_578*var_1672949782441_578), 64)
        crccheck.updateBuffer(UInt64(var_1672949782441_691*var_1672949782441_691), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
