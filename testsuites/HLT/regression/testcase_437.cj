/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args

var var_1692046360744_40 : Class_1692046360744_36 = Class_1692046360744_36()
public var var_1692046360744_74 : Float32 = Float32(71.0)
public var var_1692046360744_86 : Int32 = Int32(UInt16(212))
public var var_1692046360744_125 : Unit = ()
var var_1692046360744_156 : Float64 = Float64(-75.0)
public const var_1692046360744_160 : Bool = false
let var_1692046360744_184 : Unit = ()
public var var_1692046360744_192 : Unit = ()
var var_1692046360744_248 : UInt = UInt64(Int16(4))
const var_1692046360744_356 : Float32 = 49.0
const var_1692046360744_359 : Int8 = 43
public const var_1692046360744_580 : Bool = false
let var_1692046360744_615 : Class_1692046360744_611 = Class_1692046360744_611()
const var_1692046360744_649 : Float64 = -49.0
let var_1692046360744_726 : UInt8 = UInt8(Int8(Int8(107)))

public open class Class_1692046360744_18 {
    init() { // block id: 20

    }
;
    func func_1692046360744_26() : Option<Unit> { // block id: 27
        (match (func_1692046360744_30()) {
            case Some(num) => num
            case None => ()
        });
        func_1692046360744_54(namedParam_1692046360744_55 : Int16(125), namedParam_1692046360744_56 : var_1692046360744_86).var_1692046360744_90[4]
    }
;
    public mut prop var_1692046360744_265 : Option<Array<Class_1692046360744_36>> { // block id: 266
        get() { // block id: 268
            Int64(83);
            ((match ([UInt64(117), UInt64(201), UInt64(249), UInt64(191), UInt64(244), UInt64(30), UInt64(100), UInt64(119), UInt64(89), UInt64(222)]) {
                case newVar: Unit => Option<Unit>.Some(newVar)
                case _ => Option<Unit>.None
            }), Int16(-87), UInt64(139));
            (match (((Int32(Int32(35))&127)..(Int32(Int32(Int32(-111)))&127):(Int64(Int64(107))|1))) {
                case newVar: Array<Class_1692046360744_36> => Option<Array<Class_1692046360744_36>>.Some(newVar)
                case _ => Option<Array<Class_1692046360744_36>>.None
            })
        }

        set(Value) { // block id: 284

        }

    }
    static init() {
    }
}

func func_1692046360744_22() : Class_1692046360744_18 { // block id: 23
    Class_1692046360744_18()
}

public open class Class_1692046360744_36 {
    Class_1692046360744_36() { // block id: 38

    }
;
    public var var_1692046360744_43 : (Option<Unit>, Int16, UInt64) = (Option<Unit>.None, Int16(-36), UInt64(197));
    public static var var_1692046360744_82 : Class_1692046360744_36;
    public mut prop var_1692046360744_90 : (Float64, Float64, Int16, UInt8, Option<Unit>, Int64, Float64, Bool) { // block id: 91
        get() { // block id: 93
            Int32(UInt32(UInt8(Int8(86))));
            ();
            (Float64(Float64(Float64(-50.0))), Float64(Float32(Float32(-75.0))), Int16(Int16(75)), UInt8(206), Option<Unit>.None, Int64(44), Float64(10.0), (match ((match (UInt16(194)) {
                case newVar: Unit => Option<Unit>.Some(newVar)
                case _ => Option<Unit>.None
            })) {
                case _: Option<Unit> => true
                case _ => false
            }));
            var_1692046360744_777
        }

        set(Value) { // block id: 117
            ();
            ();
            var_1692046360744_777 = Value
        }

    };
    public let var_1692046360744_146 : Range<Int64> = ((Int64(Int64(-19))&127)..=(Int64(Int64(59))&127):(Int64(48)|1));
    public var var_1692046360744_488 : Option<Bool> = Option<Bool>.None;
    static let var_1692046360744_497 : Bool;
    public init(namedParam_1692046360744_309 ! : (Float64, Float64, Int16, UInt8, Option<Unit>, Int64, Float64, Bool), optionalParam_1692046360744_310 ! : Range<Int16> = ((Int16(Int16(UInt16(UInt8(225))))&127)..(Int16(Int16(UInt16(25)))&127):(Int64(-65)|1)), namedParam_1692046360744_318 ! : UInt32) { // block id: 319
        func_1692046360744_321(var_1692046360744_615.var_1692046360744_43);
        let var_1692046360744_629 : Int = Int64(-54);
        (match ((match (Int32(UInt8(46))) {
            case newVar: Float64 => Option<Float64>.Some(newVar)
            case _ => Option<Float64>.None
        })) {
            case Some(num) => num
            case None => try { // block id: 627
            var_1692046360744_629;
            var var_1692046360744_632 : Float64 = Float64(-116.0);
            var_1692046360744_632
        } catch (e: Exception) { // block id: 634
            var var_1692046360744_636 : Float64 = Float64(Float64(56.0));
            var_1692046360744_636
        } finally { // block id: 639
            (Float64(-56.0), Float64(122.0), Int16(110), UInt8(144), Option<Unit>.Some(()), Int64(-83), var_1692046360744_649, var_1692046360744_580);
            if (var_1692046360744_580) { "5;LdDTqA3\\" } else { ">MdIa^a{|au" } ;
            Float64(-17.0)
        }
        })
    }
;
    public open func func_1692046360744_681(param_1692046360744_682 : UInt64, namedParam_1692046360744_683 ! : ((Option<Unit>, Int16, UInt64)) -> Unit, namedParam_1692046360744_686 ! : Float32, namedParam_1692046360744_687 ! : Array<UInt64>) : Int64 { // block id: 688
        var var_1692046360744_742 : UInt32 = UInt32(61);
        let var_1692046360744_745 : Int = Int64(122);
        let var_1692046360744_752 : Range<UInt16> = ((UInt16(UInt16(Int8(Int8(100))))&127)..(UInt16(UInt16(183))&127):(Int64(47)|1));
        try { // block id: 692
            var var_1692046360744_694 : (UInt8, Float64, Int32, Unit, Int64, Bool, Int8, (UInt64, Unit, Range<UInt32>, UInt64, Rune), Range<UInt16>) = (UInt8(UInt8(UInt8(UInt8(186)))), Float64(82.0), Int32(104), (), Int64(UInt32(6)), (match (()) {
                case _: ((Int16, Int32) -> Class_1692046360744_36) -> Class_1692046360744_36 => true
                case _ => false
            }), Int8(UInt8(171)), (UInt64(166), (), ((UInt32(UInt32(UInt8(138)))&127)..(UInt32(UInt32(Int16(105)))&127):(Int64(-124)|1)), UInt64(Int32(37)), r'V'), ((UInt16(UInt16(102))&127)..(UInt16(UInt16(31))&127):(Int64(-115)|1)));
            var_1692046360744_694
        } finally { // block id: 722
            [(), (), (), (), (), (), (), (), (), ()];
            let var_1692046360744_749 : Rune = r'7';
            (var_1692046360744_726, var_1692046360744_649, var_1692046360744_86, (), Int64(116), false, Int8(12), (UInt64(113), var_1692046360744_184, ((UInt32(UInt32(151))&127)..(UInt32(var_1692046360744_742)&127):(var_1692046360744_745|1)), UInt64(21), var_1692046360744_749), var_1692046360744_752)
        }[4]
    }
;
    mut prop var_1692046360744_777 : (Float64, Float64, Int16, UInt8, Option<Unit>, Int64, Float64, Bool) { // block id: 778
        get() { // block id: 780
            Int64(Int8(88));
            (Float64(Float32(Float32(-22.0))), Float64(-22.0), Int16(-103), UInt8(229), (match (UInt64(62)) {
                case newVar: Unit => Option<Unit>.Some(newVar)
                case _ => Option<Unit>.None
            }), Int64(-52), Float64(-25.0), (match ((Float64(19.0), Float64(24.0), Int16(84), UInt8(151), Option<Unit>.None, Int64(-108), Float64(-84.0), false)) {
                case _: () -> Class_1692046360744_36 => true
                case _ => false
            }))
        }

        set(Value) { // block id: 806
            ();
            ()
        }

    }
    static init() {
        var_1692046360744_82 = Class_1692046360744_36()
        var_1692046360744_497 = true
    }
}

public func func_1692046360744_30() : Option<Unit> { // block id: 31
    ();
    var_1692046360744_40.var_1692046360744_43[0]
}


func func_1692046360744_54(namedParam_1692046360744_55 ! : Int16, namedParam_1692046360744_56 ! : Int32) : Class_1692046360744_36 { // block id: 57
    var var_1692046360744_69 : Option<Class_1692046360744_36> = (match (UInt16(43)) {
        case newVar: Class_1692046360744_36 => Option<Class_1692046360744_36>.Some(newVar)
        case _ => Option<Class_1692046360744_36>.None
    });
    (match ((UInt8(165), Int64(30), var_1692046360744_69, UInt64(190), var_1692046360744_74)[2]) {
        case Some(num) => num
        case None => (match (Option<Class_1692046360744_36>.None) {
        case Some(num) => num
        case None => Class_1692046360744_36.var_1692046360744_82
    })
    })
}

public func func_1692046360744_13(optionalParam_1692046360744_14 ! : Float64 = Float64(-44.0)) : Option<Unit> { // block id: 16
    var chainCall17 = func_1692046360744_22();chainCall17.func_1692046360744_26()
}



func func_1692046360744_368(param_1692046360744_369 : UInt64) : Option<Bool> { // block id: 370
    let var_1692046360744_372 : String = """
6!=O[
^2|kK
""";
    var_1692046360744_372;
    var_1692046360744_184;
    let var_1692046360744_413 : UInt64 = UInt64(48);
    func func_1692046360744_377(param_1692046360744_378 : (Int16, Int32) -> Class_1692046360744_36) : Class_1692046360744_36 { // block id: 382
        ();
        var var_1692046360744_386 : Bool = (match (UInt32(UInt8(UInt8(248)))) {
            case _: Range<Int64> => true
            case _ => false
        });
        let var_1692046360744_448 : Bool = (match (((UInt8(UInt8(170))&127)..=(UInt8(UInt8(UInt8(UInt8(20))))&127):(Int64(Int64(Int32(-108)))|1))) {
            case _: Option<Bool> => true
            case _ => false
        });
        if (var_1692046360744_386) { // block id: 391
            let var_1692046360744_401 : Float64 = Float64(-126.0);
            try { // block id: 393
                var_1692046360744_86 = var_1692046360744_86 * (var_1692046360744_86);
                Float64(11.0)
            } catch (_) { // block id: 398
                var_1692046360744_401 - Float64(29.0)
            } finally { // block id: 404
                var_1692046360744_401
            };
            ();
            var_1692046360744_40
        } else { // block id: 408
            const var_1692046360744_419 : Rune = r'o';
            (var_1692046360744_413, (), ((UInt32(UInt32(10))&127)..(UInt32(UInt32(109))&127):(Int64(123)|1)), var_1692046360744_413, var_1692046360744_419)[1];
            try { // block id: 423
                let var_1692046360744_427 : Option<Bool> = (match (((UInt64(UInt64(247))&127)..=(UInt64(UInt64(51))&127):(Int64(-5)|1))) {
                    case newVar: Bool => Option<Bool>.Some(newVar)
                    case _ => Option<Bool>.None
                });
                if (var_1692046360744_386) { var_1692046360744_427 } else { var_1692046360744_427 } ;
                var var_1692046360744_433 : Int8 = Int8(Int8(UInt8(114)));
                var_1692046360744_433 = var_1692046360744_433 ^ (Int8(88))
            } finally { // block id: 438
                var_1692046360744_184;
                ()
            };
            var var_1692046360744_463 : Range<Int64> = ((Int64(Int64(2))&127)..(Int64(Int64(-90))&127):(Int64(104)|1));
            var var_1692046360744_476 : Int8 = Int8(Int8(Int8(Int8(Int8(88)))));
            if (var_1692046360744_386) { // block id: 443
                ();
                var_1692046360744_419;
                if (var_1692046360744_448) { Class_1692046360744_36() } else { Class_1692046360744_36() } 
            } else if (true) { // block id: 461
                var_1692046360744_463;
                if (true) { var_1692046360744_40 } else { Class_1692046360744_36() } 
            } else { // block id: 472
                ();
                var_1692046360744_476 = var_1692046360744_476 & (Int8(102));
                var_1692046360744_40
            }
        }
    }
;
    let var_1692046360744_485 : (Int16, Int32) -> Class_1692046360744_36 = func_1692046360744_54;
    var chainCall375 = func_1692046360744_377(var_1692046360744_485);chainCall375.var_1692046360744_488
}

public open class Class_1692046360744_522 {
    Class_1692046360744_522() { // block id: 524

    }
;
    static mut prop var_1692046360744_527 : Class_1692046360744_36 { // block id: 528
        get() { // block id: 530
            Class_1692046360744_36()
        }

        set(Value) { // block id: 534
            (Float64(Float32(124.0)), Float64(Float32(Float32(11.0))), Int16(UInt16(UInt8(156))), UInt8(147), Option<Unit>.None, Int64(-13), Float64(Float64(Float32(91.0))), (match (true) {
                case _: Int16 => true
                case _ => false
            }));
            ()
        }

    }
    static init() {
    }
}

func func_1692046360744_321(param_1692046360744_322 : (Option<Unit>, Int16, UInt64)) : Unit { // block id: 323
    var var_1692046360744_326 : Int8 = Int8(Int8(-94));
    var var_1692046360744_352 : Float32 = Float32(Float32(83.0));
    var_1692046360744_326 = var_1692046360744_326 << ((try { // block id: 330
        let var_1692046360744_333 : UInt = UInt64(UInt8(171));
        var_1692046360744_333 - var_1692046360744_333;
        var_1692046360744_192;
        var_1692046360744_326
    } catch (_) { // block id: 339
        var var_1692046360744_342 : UInt32 = UInt32(Int16(-108));
        var_1692046360744_342 = var_1692046360744_342 & (UInt32(3));
        Int8(27) ^ Int8(37)
    } finally { // block id: 349
        var_1692046360744_352 = var_1692046360744_352 + (var_1692046360744_356);
        var_1692046360744_359
    }) & 7);
    let var_1692046360744_491 : (UInt64) -> Option<Bool> = func_1692046360744_368;
    if ((match ((var_1692046360744_491(UInt64(18)))) {
        case Some(num) => num
        case None => Class_1692046360744_36.var_1692046360744_497
    })) { try { // block id: 500
        var var_1692046360744_502 : (UInt64, Unit, Range<UInt32>, UInt64, Rune) = (UInt64(47), (), ((UInt32(UInt32(87))&127)..=(UInt32(UInt32(UInt32(Int8(1))))&127):(Int64(-59)|1)), UInt64(UInt64(UInt32(Int8(79)))), r'z');
        var_1692046360744_502;
        var_1692046360744_40
    } finally { // block id: 518
        ();
        Class_1692046360744_36()
    } } else { (Class_1692046360744_522.var_1692046360744_527) } ;
    let var_1692046360744_586 : Bool = (match (Int8(-30)) {
        case _: (UInt64, Unit, Range<UInt32>, UInt64, Rune) => true
        case _ => false
    });
    var loopTimeVar_1692046360744_608 : Int64 = 0;
    while ((if (match (((UInt64(UInt64(139))&127)..(UInt64(UInt64(195))&127):(Int64(27)|1))) {
        case _ => 
            ();
            false
        
        case _ => 
            var var_1692046360744_569 : UInt8 = UInt8(34);
            var_1692046360744_569 = var_1692046360744_569 % ((var_1692046360744_569) | 1);
            ((Int64(Int64(-80))&127)..(Int64(Int64(-110))&127):(Int64(47)|1));
            let var_1692046360744_574 : Bool = true;
            var_1692046360744_574
        
    }) { // block id: 576
        false && var_1692046360744_580;
        var_1692046360744_580
    } else if (var_1692046360744_580) { // block id: 584
        var_1692046360744_586
    } else { // block id: 589
        Int32(31) <= var_1692046360744_86
    }) && loopTimeVar_1692046360744_608 < 100 ) {
        loopTimeVar_1692046360744_608++;
        [(), var_1692046360744_184, var_1692046360744_192, (), var_1692046360744_192, (), var_1692046360744_192, (), var_1692046360744_184, var_1692046360744_184][7]
    }
    return
}

public open class Class_1692046360744_611 <: Class_1692046360744_36 {
    init() { // block id: 613

    }

    static init() {
    }
}


public func func_1692046360744_54() : Class_1692046360744_36 { // block id: 130
    match (var_1692046360744_40.var_1692046360744_146) {
        case caseVar_1692046360744_153 : Int16 => 
            var_1692046360744_156;
            var var_1692046360744_163 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
            if (var_1692046360744_160) { var_1692046360744_163 } else { [(), (), (), (), (), (), (), (), (), ()] } 
        
        case _ : Int8 => 
            if (var_1692046360744_160) { [var_1692046360744_125, (), var_1692046360744_125, var_1692046360744_125, (), var_1692046360744_125, (), (), (), ()] } else { [var_1692046360744_184, (), var_1692046360744_184, var_1692046360744_184, (), var_1692046360744_125, var_1692046360744_192, (), (), ()] } 
        
        case caseVar_1692046360744_199 => 
            ();
            [(), (), (), (), (), (), (), (), (), ()]
        
        case _ => 
            ();
            let var_1692046360744_209 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
            if (false) { var_1692046360744_209 } else { [(), var_1692046360744_184, (), (), (), var_1692046360744_192, (), var_1692046360744_184, (), var_1692046360744_125] } 
        
    }[9];
    var loopTimeVar_1692046360744_252 : Int64 = 0;
    (match (Option<Unit>.None) {
        case Some(num) => num
        case None => do {
        loopTimeVar_1692046360744_252++;
        var_1692046360744_86 = var_1692046360744_86 - (Int32(11));
        (Option<Unit>.Some(()), Int16(12), var_1692046360744_248)
    } while ((var_1692046360744_86 < var_1692046360744_86) && loopTimeVar_1692046360744_252 < 100 ) 
    });
    var var_1692046360744_262 : Class_1692046360744_18 = Class_1692046360744_18();
    var var_1692046360744_290 : Range<UInt16> = ((UInt16(UInt16(121))&127)..=(UInt16(UInt16(UInt16(129)))&127):(Int64(-44)|1));
    let var_1692046360744_297 : Array<Class_1692046360744_36> = [Class_1692046360744_36(), Class_1692046360744_36(), Class_1692046360744_36(), Class_1692046360744_36(), Class_1692046360744_36(), Class_1692046360744_36(), Class_1692046360744_36(), Class_1692046360744_36(), Class_1692046360744_36(namedParam_1692046360744_309 : (Float64(109.0), Float64(Float64(-70.0)), Int16(Int8(-85)), UInt8(UInt8(123)), (match (Class_1692046360744_36()) {
        case newVar: Unit => Option<Unit>.Some(newVar)
        case _ => Option<Unit>.None
    }), Int64(UInt16(254)), Float64(Float64(16.0)), false), namedParam_1692046360744_318 : UInt32(UInt32(225))), Class_1692046360744_36()];
    (match (var_1692046360744_262.var_1692046360744_265) {
        case Some(num) => num
        case None => (UInt32(143), var_1692046360744_290, var_1692046360744_297, UInt8(185), ((Int8(Int8(64))&127)..=(Int8(Int8(10))&127):(Int64(-97)|1)), [(), (), (), (), (), (), (), (), (), ()])[2]
    })[4]
}

main(): Int64 {
    try {
        (match (func_1692046360744_13(optionalParam_1692046360744_14 : Float64(56.0))) {
            case Some(num) => num
            case None => (match (Option<Unit>.None) {
            case Some(num) => num
            case None => var_1692046360744_125
        })
        });
        var chainCall127 = func_1692046360744_54();chainCall127.func_1692046360744_681(var_1692046360744_248, namedParam_1692046360744_683 : func_1692046360744_321, namedParam_1692046360744_686 : var_1692046360744_74, namedParam_1692046360744_687 : [var_1692046360744_248, UInt64(151), UInt64(203), UInt64(231), UInt64(6), var_1692046360744_248, var_1692046360744_248, UInt64(171), UInt64(86), UInt64(11)])
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var_1692046360744_248*var_1692046360744_248), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Int32 {
        var i = 0
        var res = ""
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
        if ( res == "1011404355160" ){
            return 0
        }
        return 1
    }
}
extend Class_1692046360744_522 {

}

extend Class_1692046360744_36 {

}

extend Class_1692046360744_611 {

}

