/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler --int-overflow=wrapping %cmp_opt %f -o %output


public let var29 : Bool = ('n' is String)
public var var45 : Int32 = Int32(-69)
public let var70 : String = "l9zY+i|_ #"
public let var130 : Class7 = Class7()
public var var199 : ?UInt64 = Option<UInt64>.None
public var var332 : Rune = 'm'
var var412 : Array<Array<Unit>> = [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]]
public let var429 : Unit = ()
public let var434 : Unit = ()
public var var546 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
var var568 : Array<Option<Float32>> = Array<Option<Float32>>(10){ i => Option<Float32>.None }
public var var648 : UInt64 = UInt64(Int32(58))
public let var698 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
let var703 : ?Float32 = (((UInt32(128)&127)..=(UInt32(179)&127):((-127)|1)) as Float32)
public var var720 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
public var var780 : (Int16, Array<Range<UInt8>>, Int32, Option<(Range<UInt16>, Unit, Unit)>, Range<Int8>) = (Int16(UInt16(100)), [((UInt8(78)&127)..=(UInt8(188)&127):((-56)|1)), ((UInt8(120)&127)..=(UInt8(177)&127):((-1)|1)), ((UInt8(156)&127)..(UInt8(60)&127):((-42)|1)), ((UInt8(173)&127)..=(UInt8(115)&127):((-97)|1)), ((UInt8(31)&127)..(UInt8(214)&127):((-115)|1)), ((UInt8(7)&127)..(UInt8(23)&127):((-80)|1)), ((UInt8(57)&127)..=(UInt8(56)&127):((-104)|1)), ((UInt8(169)&127)..(UInt8(235)&127):(15|1)), ((UInt8(253)&127)..=(UInt8(208)&127):((-83)|1)), ((UInt8(45)&127)..(UInt8(166)&127):((-11)|1))], Int32(-43), ((UInt16(Int8(-72)), (-66), [(), (), (), (), (), (), (), (), (), ()], ((UInt16(232)&127)..=(UInt16(40)&127):(34|1))) as (Range<UInt16>, Unit, Unit)), ((Int8(UInt8(176))&127)..=(Int8(93)&127):((39|1))))
public var var818 : Int64 = Int64(UInt16(28))
public var var860 : Range<Int16> = ((Int16(63)&127)..=(Int16(Int16(UInt16(Int16(-100))))&127):((Int64(UInt32(177))|1)))
public var var874 : Int32 = Int32(UInt8(5))
let var885 : Range<UInt8> = ((UInt8(252)&127)..=(UInt8(UInt8(239))&127):((Int64(UInt64((-26)))|1)))
var var927 : Array<Range<UInt8>> = [((UInt8(86)&127)..(UInt8(230)&127):((-16)|1)), ((UInt8(240)&127)..=(UInt8(229)&127):(48|1)), ((UInt8(122)&127)..(UInt8(27)&127):((-5)|1)), ((UInt8(31)&127)..=(UInt8(173)&127):(42|1)), ((UInt8(36)&127)..=(UInt8(254)&127):((-102)|1)), ((UInt8(32)&127)..=(UInt8(7)&127):((-95)|1)), ((UInt8(105)&127)..=(UInt8(88)&127):(125|1)), ((UInt8(41)&127)..(UInt8(158)&127):(5|1)), ((UInt8(246)&127)..=(UInt8(177)&127):((-16)|1)), ((UInt8(211)&127)..(UInt8(118)&127):(60|1))]
var var1002 : ?Range<UInt16> = Option<Range<UInt16>>.None
public let var1026 : UInt16 = UInt16(108)
public var var1163 : Unit = ()
public let var1192 : Range<UInt64> = ((UInt64(29)&127)..(UInt64(238)&127):((-106)|1))
public let var1212 : Range<UInt16> = ((UInt16(92)&127)..=(UInt16(246)&127):((5|1)))
public var var1301 : Option<Unit> = Option<Unit>.None
public let var1306 : Bool = (((Int16(-13)&127)..=(Int16(UInt16(173))&127):((Int64(UInt32(UInt16(58)))|1))) is Range<Int32>)
public var var1349 : ?Unit = ((((UInt16(254)&127)..=(UInt16(194)&127):((-116)|1)), (), ()) as Unit)
let var1392 : UInt32 = UInt32(Int16(38))
public let var1466 : ((Range<UInt16>, Unit, Unit), ((UInt16, Int64, Array<Unit>, Range<UInt16>), Float32, UInt16, Range<Int16>, Range<UInt64>, Array<Unit>), String, Int16, Array<UInt8>, Range<UInt8>, UInt64) = ((((UInt16(230)&127)..(UInt16(116)&127):(10|1)), (), ()), ((UInt16(UInt16(221)), Int64(UInt8(110)), [(), (), (), (), (), (), (), (), (), ()], ((UInt16(226)&127)..=(UInt16(113)&127):((-112)|1))), Float32(Float32(Float32(-118.0))), UInt16(Int8(-40)), ((Int16(-43)&127)..(Int16(-5)&127):((-64)|1)), ((UInt64(153)&127)..(UInt64(234)&127):((Int64(UInt16(31))|1))), [(), (), (), (), (), (), (), (), (), ()]), ###"w${var70}]${var70}d?IY=#ks"###, Int16(40), [UInt8(119), UInt8(80), UInt8(246), UInt8(65), UInt8(76), UInt8(30), UInt8(250), UInt8(193), UInt8(161), UInt8(223)], ((UInt8(235)&127)..(UInt8(172)&127):(77|1)), UInt64(116))
public var var1552 : Int8 = Int8(73)
public var var1616 : Option<Option<Range<UInt16>>> = ((UInt16(79), 119, [(), (), (), (), (), (), (), (), (), ()], ((UInt16(37)&127)..(UInt16(12)&127):((-123)|1))) as Option<Range<UInt16>>)
var var1687 : ?Array<Range<UInt8>> = Option<Array<Range<UInt8>>>.None
var var1700 : UInt8 = UInt8(135)
public let var1706 : Class7 = Class7()
public let var1792 : UInt16 = UInt16(144)
public let var1947 : Option<Array<Option<Float32>>> = (Int32(-118) as Array<Option<Float32>>)
public var var2129 : (UInt16, Int64, Array<Unit>, Range<UInt16>) = (UInt16(4), 20, [(), (), (), (), (), (), (), (), (), ()], ((UInt16(UInt16(187))&127)..(UInt16(Int8(19))&127):((Int64(Int8(56))|1))))
public let var2142 : Float32 = Float32(-21.0)
public var var2158 : UInt64 = UInt64(Int32(UInt16(106)))
let var2166 : (UInt16, Int64, Array<Unit>, Range<UInt16>) = (UInt16(104), Int64(Int8(UInt8(Int8(-8)))), [(), (), (), (), (), (), (), (), (), ()], ((UInt16(167)&127)..=(UInt16(UInt8(2))&127):((Int64(Int32(-37))|1))))
let var2191 : Unit = ()
public var var2204 : Float32 = Float32(Float32(-2.0))
public var var2219 : (((Range<UInt16>, Unit, Unit), ((UInt16, Int64, Array<Unit>, Range<UInt16>), Float32, UInt16, Range<Int16>, Range<UInt64>, Array<Unit>), String, Int16, Array<UInt8>, Range<UInt8>, UInt64), (Int64, ((UInt16, Int64, Array<Unit>, Range<UInt16>), Float32, UInt16, Range<Int16>, Range<UInt64>, Array<Unit>), Rune, Float32, Unit), Float64, UInt16, Range<Int32>, Unit, Range<UInt64>, Float64) = (((((UInt16(70)&127)..(UInt16(179)&127):((106|1))), (), ()), ((UInt16(247), 65, [(), (), (), (), (), (), (), (), (), ()], ((UInt16(147)&127)..(UInt16(204)&127):((75|1)))), Float32(15.0), UInt16(Int16(-121)), ((Int16(-10)&127)..=(Int16(-128)&127):(114|1)), ((UInt64(111)&127)..=(UInt64(5)&127):(((-66)|1))), [(), (), (), (), (), (), (), (), (), ()]), "zt24c${var70}2#\"#J", Int16(101), [UInt8(232), UInt8(106), UInt8(217), UInt8(188), UInt8(25), UInt8(117), UInt8(192), UInt8(94), UInt8(80), UInt8(175)], ((UInt8(221)&127)..=(UInt8(69)&127):((-12)|1)), UInt64(UInt64(10))), (Int64(UInt16(UInt16(160))), ((UInt16(224), 111, [(), (), (), (), (), (), (), (), (), ()], ((UInt16(111)&127)..(UInt16(213)&127):((46|1)))), Float32(Float32(65.0)), UInt16(89), ((Int16(-21)&127)..(Int16(49)&127):(((-83)|1))), ((UInt64(186)&127)..(UInt64(54)&127):(((-99)|1))), [(), (), (), (), (), (), (), (), (), ()]), 'K', Float32(Float32(Float32(30.0))), ()), (-118.0), UInt16(116), ((Int32(-10)&127)..=(Int32(-43)&127):((-25)|1)), (), ((UInt64(UInt32(UInt32(72)))&127)..(UInt64(UInt64(Int8(-46)))&127):((Int64(UInt64(UInt64(176)))|1))), Float64(Float32(-102.0)))
public let var2476 : Int16 = Int16(-97)
public let var2510 : Range<UInt32> = ((UInt32(9)&127)..=(UInt32(111)&127):(42|1))
public let var2549 : UInt8 = UInt8(Int8(UInt8(167)))
public var var2587 : ?Array<Unit> = Option<Array<Unit>>.None
public let var2664 : Unit = ()
public var var2678 : UInt8 = UInt8(240)
public let var2709 : (Unit, (Range<UInt16>, Unit, Unit), Bool, Bool) = ((), (((UInt16(UInt8(140))&127)..=(UInt16(Int16(116))&127):((Int64(UInt32(126))|1))), (), ()), (Option<Unit>.None is Class7), true)
let var2774 : Option<Option<Unit>> = Option<Option<Unit>>.None
var var2878 : ?Unit = Option<Unit>.None
public var var2881 : ((UInt16, Int64, Array<Unit>, Range<UInt16>), Float32, UInt16, Range<Int16>, Range<UInt64>, Array<Unit>) = ((UInt16(Int16(23)), (-48), [(), (), (), (), (), (), (), (), (), ()], ((UInt16(UInt8(40))&127)..(UInt16(UInt8(173))&127):((24|1)))), Float32(Float32(-24.0)), UInt16(Int8(-35)), ((Int16(UInt16(UInt16(157)))&127)..(Int16(UInt8(Int8(-2)))&127):(((-91)|1))), ((UInt64(144)&127)..=(UInt64(157)&127):(108|1)), [(), (), (), (), (), (), (), (), (), ()])
let var3008 : Int8 = Int8(UInt8(Int8(Int8(36))))
public var var3201 : Aggregate217 = Aggregate217()
public let var3250 : Float32 = Float32(-3.0)
var var3254 : ?Float32 = ((Option<Aggregate217>.None as Aggregate217) as Float32)
public let var3279 : ?Unit = Option<Unit>.None
public let var3325 : ?Range<UInt32> = ((Int16(-61), [((UInt8(69)&127)..(UInt8(42)&127):(27|1)), ((UInt8(29)&127)..(UInt8(176)&127):(((-73)|1))), ((UInt8(251)&127)..(UInt8(0)&127):(65|1)), ((UInt8(198)&127)..=(UInt8(208)&127):(52|1)), ((UInt8(52)&127)..(UInt8(104)&127):((45|1))), ((UInt8(194)&127)..(UInt8(120)&127):(62|1)), ((UInt8(36)&127)..(UInt8(122)&127):(93|1)), ((UInt8(51)&127)..=(UInt8(195)&127):((-86)|1)), ((UInt8(64)&127)..(UInt8(146)&127):(19|1)), ((UInt8(113)&127)..(UInt8(224)&127):((-34)|1))], Int32(-19), (((UInt64(26)&127)..(UInt64(42)&127):(88|1)) as (Range<UInt16>, Unit, Unit)), ((Int8(81)&127)..(Int8(116)&127):((-127)|1))) as Range<UInt32>)
public var var3386 : ?((UInt16, Int64, Array<Unit>, Range<UInt16>), Float32, UInt16, Range<Int16>, Range<UInt64>, Array<Unit>) = Option<((UInt16, Int64, Array<Unit>, Range<UInt16>), Float32, UInt16, Range<Int16>, Range<UInt64>, Array<Unit>)>.None
var var3419 : Array<UInt8> = [UInt8(9), UInt8(195), UInt8(64), UInt8(251), UInt8(111), UInt8(96), UInt8(184), UInt8(204), UInt8(216), UInt8(39)]
var var3483 : ?Int64 = Option<Int64>.None
var var3550 : (UInt16, Int64, Array<Unit>, Range<UInt16>) = (UInt16(UInt8(Int8(UInt8(132)))), Int64(UInt64(198)), [(), (), (), (), (), (), (), (), (), ()], ((UInt16(132)&127)..(UInt16(Int8(Int8(44)))&127):((Int64(UInt32(Int16(86)))|1))))
public var var3596 : Unit = ()
public var var3644 : (Int64, ((UInt16, Int64, Array<Unit>, Range<UInt16>), Float32, UInt16, Range<Int16>, Range<UInt64>, Array<Unit>), Rune, Float32, Unit) = (Int64(UInt8(UInt8(66))), ((UInt16(Int8(106)), Int64(Int8(15)), [(), (), (), (), (), (), (), (), (), ()], ((UInt16(54)&127)..=(UInt16(243)&127):((-100)|1))), Float32(Float32(-29.0)), UInt16(UInt8(Int8(-99))), ((Int16(3)&127)..=(Int16(57)&127):((Int64(Int16(-64))|1))), ((UInt64(Int16(-21))&127)..=(UInt64(72)&127):((Int64((-20))|1))), [(), (), (), (), (), (), (), (), (), ()]), 'Q', Float32(10.0), ())
public let var3757 : String = """
>*J3${var70}L
mI-Ej
"""
public let var3861 : Array<Unit> = Array<Unit>(10){ i => () }
public let var3882 : ?Range<UInt16> = Option<Range<UInt16>>.None
public let var3908 : Float64 = Float64(Float32(Float32(Float32(Float32(39.0)))))
public open class Class7 <: Resource {
    public init() { // block id: 9

    }
;
    public let var138 : UInt16 = UInt16(88);
    public let var176 : UInt64 = UInt64(159);
    public static var var221 : Aggregate217 = Aggregate217();
    public static var var292 : Int64 = (-78);
    static var var1664 : Int16 = Int16(-49);
    public let var3874 : Bool = false
    public func isClosed(): Bool { return true }
    public func close(): Unit {}
}


public func func100(param101 : Rune) : Int8 { // block id: 102
    Int8(-84)
}


public func func100(param204 : Option<UInt64>, param205 : Class7, param206 : Int8) : UInt64 { // block id: 207
    UInt64(27)
}

public struct Aggregate217 {
    public init() { // block id: 219

    }
;
    public var var224 : UInt64 = UInt64(7);
    func func1170(param1171 : (Range<Int16>) -> Unit, namedParam1174 ! : (UInt16, Int64, Array<Unit>, Range<UInt16>), optionalParam1175 ! : Range<UInt32> = ((UInt32(79)&127)..=(UInt32(167)&127):((-52)|1)), optionalParam1177 ! : Rune = 'N') : Unit { // block id: 1179
        var var1186 : ?Unit = Option<Unit>.Some(());
        let var1199 : Int8 = Int8(Int8(UInt8(173)));
        (var1186 ?? match (match (var1192) {
                case _ => 
                    ((Int8(14)&127)..=(var1199&127):((var818|1)));
                    var199
                
            }) {
            case caseVar1207 => 
                var1163;
                Option<Range<UInt16>>.Some(var1212);
                var var1219 : Float32 = Float32(33.0);
                var1219 -= Float32(-61.0)
            
            case _ => 
                var1163;
                var1163
            
        })
    }
;
    static var var1658 : Bool = false;
    static var var3543 : (Range<UInt16>, Unit, Unit) = (((UInt16(29)&127)..=(UInt16(144)&127):(7|1)), (), ());
    public static var var3569 : UInt16 = UInt16(217);
    public init(param556 : Range<UInt64>, param557 : Unit) { // block id: 558
        var var3479 : (Rune) -> Range<Int16> = func3314;
        match (var3483) {
            case _ => 
                'C'
            
            case caseVar3491 => 
                var2158;
                if (var1306) { 'N' } else { 'G' } 
            
            case _ => 
                ();
                'a'
            
            case caseVar3505 => 
                if (false) { 'j' } else { var332 } 
            
            case _ => 
                var332
            
        }|>(var3479~>{ lambdaParameter1167 : Range<Int16> => func1170((func3108~>func1227), namedParam1174 : var2166) });
        var loopTimeVar3635 : Int64 = 0;
        while ((try { // block id: 3516
            !false
        } finally { // block id: 3519
            var1700 -= UInt8(167);
            var1306
        }) && loopTimeVar3635 < 100 ) {
            loopTimeVar3635++;
            var var3626 : UInt32 = UInt32(128);
            if (var1658) { // block id: 3527
                ()
            } else if (var1658) { // block id: 3530
                var var3532 : (Unit, Array<Array<Unit>>, Option<String>, UInt64, Int32) = ((), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], Option<String>.Some("z'6DGKGOV?"), UInt64(160), Int32(-18));
                var3532;
                var var3612 : Float32 = Float32(90.0);
                ((var3543, (var3550, Float32(59.0), var3569, var860, var1192, [(), (), (), (), (), (), (), (), (), ()]), var70, var2476, [UInt8(165), UInt8(17), UInt8(237), UInt8(171), UInt8(237), UInt8(97), UInt8(8), UInt8(86), UInt8(175), UInt8(157)], ((UInt8(46)&127)..=(UInt8(114)&127):(17|1)), UInt64(136)), ((-109), ((UInt16(208), (-12), [var1163, var1163, param557, (), (), (), param557, param557, (), var3596], ((UInt16(215)&127)..(UInt16(114)&127):((var818|1)))), var2142, UInt16(58), ((var2476&127)..=(var2476&127):((53|1))), param556, var546), var332, var3612, var3596), 94.0, var1026, ((var45&127)..(var45&127):(((-72)|1))), var3596, param556, 122.0);
                var3626 &= UInt32(218)
            };
            match (((UInt64(235)&127)..=(UInt64(206)&127):(89|1))) {
                case _ => 
                    var703
                
            }
        }
    }

}

public func func677(param678 : Range<Int8>) : Unit { // block id: 679
    let var686 : Unit = ();
    try { // block id: 682
        [(), var686, var686, var686, (), var686, (), (), (), ()]
    } finally { // block id: 696
        var698;
        if (true) { var703 } else { var703 } ;
        if (false) { [(), (), (), (), (), (), (), (), (), ()] } else { [(), (), (), (), (), (), (), (), (), ()] } 
    }[5]
}



public func func931(param932 : UInt8) : UInt8 { // block id: 933
    match ((var70 as Float32)) {
        case _ : Option<(Range<UInt16>, Unit, Unit)> => 
            ();
            param932
        
        case caseVar944 : UInt8 => 
            UInt8(48) % ((UInt8(65)) | 1)
        
        case caseVar951 : Option<Float32> => 
            UInt32(207);
            UInt8(241)
        
        case caseVar957 => 
            param932 + param932
        
        case _ => 
            ((UInt16(66)&127)..(UInt16(239)&127):(10|1));
            UInt8(189)
        
    }
}



public func func971(param972 : Bool) : Bool { // block id: 973
    let var995 : UInt8 = UInt8(143);
    func func982(param983 : Bool) : Range<UInt16> { // block id: 984
        var loopTimeVar1005 : Int64 = 0;
        do {
            loopTimeVar1005++;
            (var1002 as Array<Range<UInt8>>)
        } while ((try { // block id: 987
            ();
            param972
        } catch (_) { // block id: 990
            ();
            UInt8(60) < var995
        } finally { // block id: 997
            param983
        }) && loopTimeVar1005 < 100 ) ;
        var var1014 : ?Unit = Option<Unit>.None;
        var var1047 : Range<UInt16> = ((UInt16(225)&127)..=(UInt16(112)&127):((-26)|1));
        try { // block id: 1007
            (var1014 ?? ());
            var loopTimeVar1022 : Int64 = 0;
            do {
                loopTimeVar1022++;
                Int16(20)
            } while ((param972) && loopTimeVar1022 < 100 ) ;
            ((UInt16(188)&127)..=(var1026&127):(((-33)|1)))
        } finally { // block id: 1029
            try { // block id: 1031
                UInt16(191);
                var199;
                'h'
            } finally { // block id: 1035
                'j'
            };
            var loopTimeVar1043 : Int64 = 0;
            while ((false) && loopTimeVar1043 < 100 ) {
                loopTimeVar1043++;
                var70;
                ()
            };
            try { // block id: 1045
                var1047
            } finally { // block id: 1049
                ((UInt16(209)&127)..=(UInt16(37)&127):(125|1))
            }
        }
    }
;
    ((Option<Range<UInt16>>.None ?? func982(param972)) is UInt16)
}

public func func766(optionalParam767 ! : Class7 = Class7(), namedParam769 ! : UInt8) : Array<Range<UInt8>> { // block id: 770
    let var812 : UInt16 = UInt16(Int16(UInt8(147)));
    let var822 : Unit = ();
    func func800(namedParam801 ! : (Range<UInt16>, Unit, Unit), optionalParam802 ! : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]) : (Range<UInt16>, Unit, Unit) { // block id: 804
        try { // block id: 806
            namedParam801
        } finally { // block id: 808
            (((var812&127)..(var812&127):((var818|1))), var822, var822)
        }
    }
;
    (var780[3] ?? func800(namedParam801 : (((var812&127)..(var812&127):((57|1))), (), var822), optionalParam802 : [(), (), (), (), (), (), (), (), (), ()]))[1];
    var var903 : Range<UInt8> = ((UInt8(Int8(Int8(-95)))&127)..=(UInt8(Int8(UInt8(90)))&127):((40|1)));
    var var914 : UInt8 = UInt8(68);
    let var967 : (UInt8) -> UInt8 = func931;
    var var1053 : (Bool) -> Bool = func971;
    let var1056 : Bool = false;
    let var1078 : UInt8 = UInt8(140);
    try { // block id: 835
        match (Option<Array<Range<UInt8>>>.None) {
            case _ => 
                var var842 : Int16 = Int16(71);
                var842 &= var842;
                var842
            
        };
        var var852 : Bool = false;
        match {
            case false => 
            ();
            ();
            var852
            case var852 => 
            var852 &&= false;
            var860;
            true
            case _ => 
            var45 >>= ((var874) & 7);
            var818 += var818;
            var852
        };
        (Option<Array<Range<UInt8>>>.None ?? [var885, var885, ((namedParam769&127)..(UInt8(95)&127):((var818|1))), ((UInt8(244)&127)..(UInt8(233)&127):((-10)|1)), var885, var885, ((UInt8(107)&127)..=(UInt8(20)&127):(53|1)), var903, ((var914&127)..(var914&127):(((-48)|1))), ((UInt8(199)&127)..=(UInt8(105)&127):((-121)|1))])
    } catch (_) { // block id: 919
        try { // block id: 921
            var var923 : Array<Range<UInt8>> = [((UInt8(71)&127)..=(UInt8(63)&127):((-21)|1)), ((UInt8(50)&127)..=(UInt8(203)&127):(66|1)), ((UInt8(26)&127)..(UInt8(122)&127):(1|1)), ((UInt8(130)&127)..=(UInt8(188)&127):((-6)|1)), ((UInt8(199)&127)..(UInt8(200)&127):(104|1)), ((UInt8(121)&127)..=(UInt8(162)&127):(41|1)), ((UInt8(136)&127)..(UInt8(11)&127):(89|1)), ((UInt8(104)&127)..=(UInt8(24)&127):(99|1)), ((UInt8(62)&127)..(UInt8(253)&127):(17|1)), ((UInt8(237)&127)..=(UInt8(243)&127):((-81)|1))];
            var923
        } finally { // block id: 925
            var927
        }
    } finally { // block id: 929
        namedParam769|>var967;
        var1056|>var1053;
        match (Option<UInt64>.None) {
            case caseVar1062 : Array<Unit> => 
                ();
                [((UInt8(60)&127)..(UInt8(69)&127):(95|1)), ((UInt8(130)&127)..=(UInt8(172)&127):((-53)|1)), ((UInt8(21)&127)..=(UInt8(227)&127):(68|1)), ((UInt8(84)&127)..(UInt8(44)&127):((-97)|1)), ((var914&127)..(namedParam769&127):(((-38)|1))), ((UInt8(19)&127)..=(UInt8(28)&127):(94|1)), var903, ((var1078&127)..=(UInt8(210)&127):((38|1))), ((UInt8(200)&127)..=(UInt8(223)&127):((-4)|1)), ((UInt8(80)&127)..=(UInt8(242)&127):(8|1))]
            
            case _ => 
                if (false) { [((UInt8(194)&127)..=(UInt8(233)&127):(4|1)), ((UInt8(199)&127)..=(UInt8(56)&127):(29|1)), ((UInt8(143)&127)..=(UInt8(245)&127):((-87)|1)), ((UInt8(30)&127)..=(UInt8(216)&127):((-32)|1)), ((UInt8(95)&127)..(UInt8(67)&127):(110|1)), ((UInt8(37)&127)..=(UInt8(244)&127):(60|1)), ((UInt8(171)&127)..(UInt8(166)&127):((-113)|1)), ((UInt8(63)&127)..=(UInt8(200)&127):(81|1)), ((UInt8(136)&127)..(UInt8(60)&127):((-88)|1)), ((UInt8(91)&127)..=(UInt8(34)&127):((-55)|1))] } else { var927 } 
            
        }
    }
}

public func func560(param561 : Rune) : Unit { // block id: 562
    let var614 : Unit = ();
    var var617 : Unit = ();
    var var625 : (Range<UInt16>, Unit, Unit) = (((UInt16(UInt8(62))&127)..=(UInt16(Int8(-89))&127):((Int64(Int8(UInt8(23)))|1))), (), ());
    var var640 : Float64 = (-114.0);
    var var660 : Bool = true;
    var loopTimeVar669 : Range<UInt64> = ((UInt64(Int16(-20))&127)..=(UInt64(166)&127):((Int64(UInt8(87))|1)));
    let var713 : (Range<Int8>) -> Unit = func677;
    var loopTimeVar723 : Int64 = 0;
    var var729 : (UInt16, Int64, Array<Unit>, Range<UInt16>) = (UInt16(Int16(Int16(-39))), Int64(UInt64(UInt8(UInt8(190)))), [(), (), (), (), (), (), (), (), (), ()], ((UInt16(131)&127)..(UInt16(86)&127):((Int64(UInt32(219))|1))));
    if (match (var568[7]) {
        case _ => 
            var614;
            var617;
            true
        
    }) { [var614, var625[1], (var640 *= var640), try (resource = Class7()) { // block id: 644
        ();
        var648 |= UInt64(227)
    } finally { // block id: 652
        ();
        ()
    }, if (false) { // block id: 657
        var617
    } else if (var660) { // block id: 662
        var199;
        var617
    }, (), for (i in loopTimeVar669 where var660) {

    }, (((Int8(-118)&127)..=(Int8(96)&127):(96|1))|>var713), do {
        loopTimeVar723++;
        var720
    } while ((var660) && loopTimeVar723 < 100 ) , func677(((Int8(-86)&127)..(Int8(-116)&127):(24|1)))] } else { var729[2] } ;
    var var763 : ?Array<Range<UInt8>> = Option<Array<Range<UInt8>>>.None;
    var var1091 : UInt8 = UInt8(UInt8(60));
    (var763 ?? func766(namedParam769 : var1091))[0];
    if (if (var660) { // block id: 1098
        var var1102 : Float64 = 84.0;
        14.0 != var1102
    } else if (try { // block id: 1105
        Option<Unit>.Some(());
        var660
    } catch (e: Exception) { // block id: 1109
        var660
    }) { // block id: 1111
        var617;
        false
    } else { // block id: 1114
        var660
    }) { // block id: 1116

    } else if (var660) { // block id: 1118
        [(), (), (), (), (), (), (), (), (), ()][7];
        let var1125 : ((UInt16, Int64, Array<Unit>, Range<UInt16>), Float32, UInt16, Range<Int16>, Range<UInt64>, Array<Unit>) = ((UInt16(150), Int64(Int32(Int8(-108))), [(), (), (), (), (), (), (), (), (), ()], ((UInt16(82)&127)..=(UInt16(230)&127):((-29)|1))), Float32(-106.0), UInt16(132), ((Int16(36)&127)..(Int16(-28)&127):(23|1)), ((UInt64(UInt64(UInt8(62)))&127)..=(UInt64(UInt64(Int32(99)))&127):((Int64(Int32(UInt16(244)))|1))), [(), (), (), (), (), (), (), (), (), ()]);
        var1125[1];
        var loopTimeVar1153 : Range<UInt64> = ((UInt64(160)&127)..(UInt64(110)&127):((97|1)));
        for (i in loopTimeVar1153 where true) {
            var617
        }
    }
}

public func func1159(param1160 : Range<Int16>) : Unit { // block id: 1161
    var1163
}






public func func1457(param1458 : Option<Range<UInt16>>) : String { // block id: 1459
    match (var1466[4][3]) {
        case _ => 
            let var1502 : Int8 = Int8(UInt8(Int8(UInt8(Int8(45)))));
            var1502
        
    };
    var var1515 : Float32 = Float32(-122.0);
    var var1518 : Float32 = Float32(Float32(Float32(23.0)));
    var var1523 : ?Float32 = ((Int16(28), [((UInt8(140)&127)..=(UInt8(179)&127):(26|1)), ((UInt8(238)&127)..(UInt8(156)&127):((-2)|1)), ((UInt8(63)&127)..=(UInt8(49)&127):(98|1)), ((UInt8(43)&127)..(UInt8(29)&127):((-15)|1)), ((UInt8(144)&127)..(UInt8(139)&127):(103|1)), ((UInt8(43)&127)..(UInt8(182)&127):(111|1)), ((UInt8(215)&127)..(UInt8(146)&127):(108|1)), ((UInt8(185)&127)..=(UInt8(188)&127):((-115)|1)), ((UInt8(62)&127)..=(UInt8(15)&127):(107|1)), ((UInt8(230)&127)..=(UInt8(247)&127):((-87)|1))], Int32(71), Option<(Range<UInt16>, Unit, Unit)>.Some((((UInt16(160)&127)..=(UInt16(133)&127):(78|1)), (), ())), ((Int8(-118)&127)..(Int8(-76)&127):((-101)|1))) as Float32);
    let var1593 : Range<Int8> = ((Int8(Int8(-31))&127)..(Int8(Int8(Int8(110)))&127):((44|1)));
    match (match (try { // block id: 1511
                var1163;
                var1515 -= var1518;
                var1523
            } finally { // block id: 1535
                Option<Float32>.Some(var1515)
            }) {
            case caseVar1540 : String => 
                if (false) { Option<Unit>.None } else { Option<Unit>.None } ;
                !var1306
            
            case _ => 
                var1552 >>= ((var1552) & 7);
                ();
                var818 == (-26)
            
        }) {
        case true | false => 
            if (true) { Option<Unit>.None } else { var1301 } ;
            if (false) { Option<Unit>.Some(var1163) } else { Option<Unit>.Some(var1163) } ;
            "Luo:/u^9Zg"
        
        case false | false => 
            Option<Range<UInt16>>.None;
            if (var1306) { var70 } else { "k+q-AGFn53" } 
        
        case _ : Option<Range<UInt16>> => 
            Float64(var1518) ** Float64(Int32(var1515) & 3);
            var1392;
            var70
        
        case _ => 
            var1392;
            var1593;
            if (var1306) { """
75L:Z
a{2efD
""" } else { var70 } 
        
    }
}


public func func1681(param1682 : Aggregate217) : Option<Array<Range<UInt8>>> { // block id: 1683
    ();
    var1163;
    var1687
}

func func1677(param1678 : Array<Unit>) : Int16 { // block id: 1679
    let var1713 : Aggregate217 = Aggregate217();
    func1681(try { // block id: 1690
        let var1695 : Aggregate217 = Aggregate217();
        if (var1306) { Aggregate217() } else { var1695 } 
    } catch (e: Exception) { // block id: 1697
        var1700 &= UInt8(57);
        if (var1306) { var1706 } else { var1706 } ;
        if (var1306) { Aggregate217() } else { var1713 } 
    } finally { // block id: 1715
        var1163;
        var var1722 : ?String = Option<String>.None;
        if (var1306) { Option<String>.Some(var70) } else { var1722 } ;
        Aggregate217()
    });
    Int16(-102)
}


func func1742(param1743 : (UInt16, Int64, Array<Unit>, Range<UInt16>)) : Unit { // block id: 1744
    var var1754 : Float32 = Float32(Float32(9.0));
    let var1763 : Float64 = Float64(86.0);
    if (func971([false, false, false, true, false, true, false, false, true, false][6])) { // block id: 1751
        var1754 *= var1754;
        var loopTimeVar1769 : Int64 = 0;
        do {
            loopTimeVar1769++;
            var1763 * (-10.0);
            ()
        } while ((true) && loopTimeVar1769 < 100 ) ;
        var1700
    } else { // block id: 1771
        var1700|>func931
    };
    var1616;
    var var1829 : (UInt16, Int64, Array<Unit>, Range<UInt16>) = (UInt16(110), Int64(UInt64(173)), [(), (), (), (), (), (), (), (), (), ()], ((UInt16(Int16(UInt16(177)))&127)..=(UInt16(Int16(-76))&127):(((-78)|1))));
    if (func971(true)) { (Option<(Int64, ((UInt16, Int64, Array<Unit>, Range<UInt16>), Float32, UInt16, Range<Int16>, Range<UInt64>, Array<Unit>), Rune, Float32, Unit)>.None ?? (var818, ((var1792, var818, var698, ((UInt16(26)&127)..(var1792&127):((22|1)))), var1754, var1026, ((Int16(43)&127)..(Int16(-110)&127):(29|1)), var1192, [var1163, var1163, var1163, var1163, (), (), var1163, (), (), var1163]), 'H', Float32(-88.0), var1163)) } else { try { // block id: 1819
        var648 = UInt64(Int64(var648) ** (var648 & 3));
        Option<Option<Range<UInt16>>>.Some(var1002);
        var var1854 : UInt16 = UInt16(UInt8(UInt8(56)));
        let var1861 : Int16 = Int16(Int16(UInt8(Int8(-75))));
        ((-65), (var1829, var1754, var1854, ((Int16(18)&127)..=(var1861&127):((var818|1))), ((UInt64(56)&127)..=(UInt64(62)&127):(95|1)), [(), (), (), var1163, (), (), var1163, (), (), var1163]), var332, Float32(76.0), var1163)
    } catch (e: Exception) { // block id: 1882
        var var1884 : (Int64, ((UInt16, Int64, Array<Unit>, Range<UInt16>), Float32, UInt16, Range<Int16>, Range<UInt64>, Array<Unit>), Rune, Float32, Unit) = (Int64(Int64(Int8(65))), ((UInt16(UInt16(82)), Int64(Int32(20)), [(), (), (), (), (), (), (), (), (), ()], ((UInt16(13)&127)..(UInt16(199)&127):((-14)|1))), Float32(Float32(Float32(48.0))), UInt16(UInt8(15)), ((Int16(-15)&127)..(Int16(61)&127):(103|1)), ((UInt64(Int32(-74))&127)..=(UInt64(49)&127):((52|1))), [(), (), (), (), (), (), (), (), (), ()]), 'R', Float32(Float32(Float32(9.0))), ());
        var1884
    } } [4]
}




public func func2086(param2087 : Range<Int16>) : (UInt16, Int64, Array<Unit>, Range<UInt16>) { // block id: 2088
    ();
    var var2096 : (Range<UInt16>, Unit, Unit) = (((UInt16(144)&127)..(UInt16(Int16(103))&127):(((-21)|1))), (), ());
    if (((), var2096, var1306, var1306)[3]) { // block id: 2108

    };
    let var2117 : (Range<UInt16>, Unit, Unit) = (((UInt16(UInt8(144))&127)..(UInt16(145)&127):((Int64(Int8(37))|1))), (), ());
    let var2151 : Array<UInt8> = [UInt8(12), UInt8(192), UInt8(57), UInt8(93), UInt8(48), UInt8(231), UInt8(97), UInt8(200), UInt8(182), UInt8(209)];
    let var2200 : Unit = ();
    let var2209 : Float64 = 39.0;
    let var2213 : Range<Int32> = ((Int32(-71)&127)..=(Int32(41)&127):((-26)|1));
    let var2340 : UInt8 = UInt8(UInt8(UInt8(200)));
    var var2354 : ?Int64 = (UInt8(15) as Int64);
    (if (var1306) { ((var2117, (var2129, var2142, UInt16(61), var860, var1192, [(), (), (), (), (), (), (), (), (), ()]), var70, Int16(-57), var2151, ((var1700&127)..=(UInt8(76)&127):((114|1))), var2158), (var818, (var2166, var2142, UInt16(76), ((Int16(-42)&127)..=(Int16(-29)&127):(((-1)|1))), var1192, [var1163, var1163, var2191, (), var1163, (), (), var2191, var1163, var2200]), 'N', var2204, ()), var2209, var1792, var2213, (), var1192, var2209) } else { var2219 } [3], ((((var2340&127)..=(UInt8(212)&127):((0|1))), Float32(52.0), (var2191, var2117, false, true), var1026, var2354, UInt32(138), ((Int32(35)&127)..=(Int32(-35)&127):(93|1)))[4] ?? Int64(var648)), (try { // block id: 2368
        var568;
        Option<Array<Unit>>.Some([(), var2200, var1163, (), (), (), var1163, var2191, (), ()])
    } catch (e: Exception) { // block id: 2382
        let var2386 : ?String = Option<String>.None;
        if (true) { var2386 } else { Option<String>.None } ;
        var2191;
        Option<Array<Unit>>.Some([(), (), (), (), (), (), (), (), (), ()])
    } finally { // block id: 2392
        Option<Array<Unit>>.Some(var698)
    } ?? if (false) { [(), (), (), (), (), (), (), (), (), ()] } else { var698 } ), var1212)
}

public func func1651(param1652 : Array<Unit>) : Unit { // block id: 1653
    func971(Aggregate217.var1658);
    let var1728 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    Class7.var1664 += match {
        case true => 
        var1163;
        Option<Unit>.Some(var1163);
        Int16(71)
        case _ => 
        Int16(-22)
    } | (var1728|>func1677);
    let var2078 : Unit = ();
    let var2401 : (Range<Int16>) -> (UInt16, Int64, Array<Unit>, Range<UInt16>) = func2086;
    var var2431 : Unit = ();
    let var2449 : Unit = ();
    let var2467 : Float64 = 23.0;
    var var2497 : String = ###"v(jZ5V62P5"###;
    match (if (var1306) { [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]] } else { [[(), (), (), (), (), (), (), (), (), ()], param1652, [var1163, var2078, var2191, var2078, var1163, (), var2191, var1163, var2191, var2191], [var2078, (), var2191, (), (), var2191, var1163, (), var2431, ()], [(), (), (), (), (), (), (), (), (), ()], [(), var2191, (), var1163, (), var2431, var2191, var2078, (), ()], var546, [var2449, var2431, (), var2191, (), var2431, (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], param1652] } ) {
        case _ : Int32 => 
            var2467 ** Float64(Int32((-36.0)) & 3);
            var860
        
        case _ => 
            ((var2476&127)..(var2476&127):(((-25)|1)))
        
        case caseVar2482 : Option<Option<Range<UInt16>>> => 
            Option<Array<Range<UInt8>>>.None;
            Option<Float32>.None;
            ((var2476&127)..(var2476&127):(((-54)|1)))
        
        case caseVar2492 : Array<Array<Unit>> => 
            var1163;
            var2497 = ###";\\C1S:>`(8"###;
            if (var1306) { var860 } else { ((Int16(13)&127)..=(Int16(31)&127):(((-86)|1))) } 
        
        case _ => 
            var2510;
            var2449;
            if (var1306) { var860 } else { var860 } 
        
    }|>(var2401~>{ lambdaParameter1927 : (UInt16, Int64, Array<Unit>, Range<UInt16>) => let var2003 : Range<UInt32> = ((UInt32(134)&127)..(UInt32(27)&127):(75|1)); var var2037 : (Int64, ((UInt16, Int64, Array<Unit>, Range<UInt16>), Float32, UInt16, Range<Int16>, Range<UInt64>, Array<Unit>), Rune, Float32, Unit) = (Int64(Int16(Int8(UInt8(92)))), ((UInt16(Int8(-67)), Int64(Int8(96)), [(), (), (), (), (), (), (), (), (), ()], ((UInt16(12)&127)..(UInt16(136)&127):((30|1)))), Float32(Float32(Float32(111.0))), UInt16(194), ((Int16(-116)&127)..(Int16(54)&127):(105|1)), ((UInt64(220)&127)..=(UInt64(12)&127):(49|1)), [(), (), (), (), (), (), (), (), (), ()]), 'P', Float32(Float32(-122.0)), ()); try (resource = Class7()) { // block id: 1930
        let var1933 : (Unit, Array<Array<Unit>>, Option<String>, UInt64, Int32) = ((), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], Option<String>.None, UInt64(246), Int32(-78));
        var1933[1];
        var var1951 : Array<Option<Float32>> = [(true as Float32), (((Int32(-77)&127)..=(Int32(-29)&127):((Int64(Int8(-33))|1))) as Float32), Option<Float32>.None, Option<Float32>.Some(Float32(77.0)), Option<Float32>.None, (([(), (), (), (), (), (), (), (), (), ()] as Array<Option<Float32>>) as Float32), Option<Float32>.None, (((Int8(107)&127)..(Int8(-26)&127):(((-7)|1))) as Float32), Option<Float32>.Some(Float32(113.0)), ([(), (), (), (), (), (), (), (), (), ()] as Float32)];
        (var1947 ?? var1951);
        try (resource = Class7()) { // block id: 1999
            if (true) { var2003 } else { var2003 } ;
            var818 /= ((111) | 1)
        } finally { // block id: 2009
            var var2012 : UInt32 = UInt32(Int16(UInt16(144)));
            var2012 >>= ((var1392) & 7);
            ()
        }
    } catch (_) { // block id: 2018
        let var2033 : Unit = ();
        match (((UInt64(225)&127)..(UInt64(75)&127):(119|1))) {
            case _ => 
                lambdaParameter1927;
                if (var1306) { ((UInt16(169)&127)..(UInt16(215)&127):(79|1)) } else { ((UInt16(58)&127)..(UInt16(154)&127):((35|1))) } ;
                Option<Unit>.Some(var2033)
            
        };
        var2037[4]
    } finally { // block id: 2076
        var2078;
        var1163;
        match (var1002) {
            case _ => 
                ()
            
        }
    } })
}


public func func2520(param2521 : Range<Int16>) : Array<Unit> { // block id: 2522
    var loopTimeVar2553 : Range<UInt64> = ((UInt64(115)&127)..(UInt64(211)&127):((89|1)));
    for (i in loopTimeVar2553 where false) {
        try { // block id: 2527
            ();
            let var2530 : Range<Int64> = (((-108)&127)..((-90)&127):(102|1));
            var2530;
            [UInt8(138), UInt8(198), UInt8(22), UInt8(209), UInt8(208), UInt8(217), UInt8(169), UInt8(174), UInt8(173), UInt8(235)]
        } catch (e: Exception) { // block id: 2533
            var818 |= var818;
            var1163;
            [UInt8(26), UInt8(74), var1700, UInt8(99), UInt8(79), UInt8(243), var1700, var1700, var1700, var2549]
        }
    };
    var var2582 : ?Array<Unit> = ((UInt32(214) as Array<Range<UInt8>>) as Array<Unit>);
    var var2601 : Unit = ();
    if ((try { // block id: 2562
        ();
        false
    } finally { // block id: 2565
        ();
        var874 <<= ((var874) & 7);
        false
    } || (Int32(-61) < var45))) { (if (false) { var2582 } else { var2587 }  ?? if (var1306) { [var1163, var1163, (), (), var2191, (), (), var2191, var2601, ()] } else { var546 } ) } else { [(), (), (), (), (), (), (), (), (), ()] } 
}


func func1634(optionalParam1635 ! : (Range<Int8>) -> Unit = { lambdaParameter1638 : Range<Int8> =>  }, namedParam1642 ! : (Bool) -> Bool, optionalParam1645 ! : Class7 = Class7(), namedParam1647 ! : Class7) : Option<Range<UInt16>> { // block id: 1648
    var var2518 : (Array<Unit>) -> Unit = func1651;
    var860|>(func2520~>var2518);
    var var2640 : Int32 = Int32(Int32(UInt8(206)));
    var var2671 : ?Int64 = (Int8(20) as Int64);
    let var2701 : ?Float32 = Option<Float32>.Some(Float32(Float32(-73.0)));
    var var2802 : ?Unit = ((((Option<Range<UInt16>>.None as Int64) as Unit) as Unit) as Unit);
    if (match ((Option<((UInt16, Int64, Array<Unit>, Range<UInt16>), Float32, UInt16, Range<Int16>, Range<UInt64>, Array<Unit>)>.None ?? (var2129, Float32(112.0), UInt16(148), ((Int16(17)&127)..=(Int16(-53)&127):(4|1)), ((UInt64(253)&127)..=(UInt64(198)&127):(113|1)), [(), (), (), (), (), (), (), (), (), ()]))) {
        case ((caseVar2625 : ((UInt16, Int64, Array<Unit>, Range<UInt16>), Float32, UInt16, Range<Int16>, Range<UInt64>, Array<Unit>),caseVar2626,_,caseVar2627),caseVar2628 : Rune,_,_ : String,caseVar2629,caseVar2630 : Bool) => 
            -var1552;
            var1306
        
        case _ => 
            ();
            var2640 -= var45;
            var1306
        
    }) { match (match (UInt16(55)) {
            case caseVar2651 : Range<Int32> => 
                (((UInt8(206)&127)..(UInt8(218)&127):((-96)|1)), Float32(74.0), ((), (((var1026&127)..(var1026&127):((var818|1))), var2664, var2191), false, var1306), var1026, var2671, var1392, caseVar2651);
                [var2678, var2549, UInt8(190), var1700, UInt8(216), UInt8(44), var2549, UInt8(28), var2549, var1700];
                if (var1306) { Option<Float32>.Some(var2142) } else { var703 } 
            
            case _ => 
                if (false) { Option<Float32>.None } else { var2701 } 
            
            case 249 => 
                var2709;
                let var2738 : Unit = ();
                (var1792, var818, [var2664, (), var2191, var1163, var2191, var2191, (), (), var2738, ()], var1212);
                var703
            
            case _ => 
                if (false) { var2701 } else { var703 } 
            
        }) {
        case _ : Array<Unit> => 
            if (var1306) { Option<Array<Option<Float32>>>.None } else { Option<Array<Option<Float32>>>.None } ;
            if (var1306) { Option<Range<UInt16>>.Some(((UInt16(250)&127)..=(UInt16(126)&127):(63|1))) } else { var1002 } 
        
        case caseVar2763 : Array<Unit> => 
            if (var1306) { Option<Range<UInt16>>.Some(((UInt16(69)&127)..=(UInt16(4)&127):((-112)|1))) } else { Option<Range<UInt16>>.None } 
        
        case _ : Option<((UInt16, Int64, Array<Unit>, Range<UInt16>), Float32, UInt16, Range<Int16>, Range<UInt64>, Array<Unit>)> => 
            var2774;
            Option<Range<UInt16>>.None
        
        case _ => 
            var2204 =Float32(Float64(var2204) ** Float64(Int32(Float32(-13.0)) & 3));
            if (true) { Option<Range<UInt16>>.Some(((UInt16(213)&127)..=(UInt16(36)&127):((-12)|1))) } else { var1002 } 
        
    } } else { (if (false) { try { // block id: 2790
        if (var1306) { var332 } else { var332 } ;
        Option<Range<UInt16>>.Some(((UInt16(16)&127)..(UInt16(102)&127):(34|1)))
    } finally { // block id: 2797
        var1947;
        var1002
    } } else { match (var2802) {
        case _ : (UInt16, Int64, Array<Unit>, Range<UInt16>) => 
            var2664;
            Option<Range<UInt16>>.Some(var1212)
        
        case _ : Option<Unit> => 
            if (var1306) { """
cEjw3
H<EcX
""" } else { ###"FXGA'V>#K~"### } ;
            var1002
        
        case caseVar2824 => 
            var720;
            ((Int16(-54)&127)..(Int16(-57)&127):((-99)|1));
            if (false) { var1002 } else { Option<Range<UInt16>>.Some(var1212) } 
        
        case _ => 
            var1002
        
    } } ) } 
}

func func1450(param1451 : Option<Unit>) : String { // block id: 1452
    func560(var332);
    ();
    let var2838 : (Bool) -> Bool = func971;
    (var1616 ?? func1634(optionalParam1635 : func677, namedParam1642 : var2838, namedParam1647 : Class7()))|>{ lambdaParameter1607 : Option<Range<UInt16>> => ###"dk'Q(|JFj*"### }
}

func func1334(param1335 : Rune) : Unit { // block id: 1336
    var var1382 : Float32 = Float32(Float32(Float32(-73.0)));
    ((Option<Option<Unit>>.Some(var1349) ?? (###"$S`6B+BW5a{"###, UInt64(99), ((UInt8(221)&127)..(UInt8(215)&127):(123|1)), Option<Unit>.None, ((UInt16(76), var818, [var1163, (), (), (), (), (), (), (), var1163, var1163], ((var1026&127)..(var1026&127):(((-85)|1)))), var1382, var1026, ((Int16(-117)&127)..(Int16(-116)&127):(99|1)), var1192, [(), (), (), (), (), (), (), (), (), ()]), ((var1392&127)..(var1392&127):((var818|1))), var1163)[3]) ?? if (func971(true)) { // block id: 1402

    });
    let var2842 : (Option<Unit>) -> String = func1450;
    var var2845 : ?Unit = (([(), (), (), (), (), (), (), (), (), ()] as Array<Unit>) as Unit);
    match (((var1163, [[var1163, var1163, (), (), var1163, (), var1163, (), (), var1163], var546, [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), var1163, (), (), (), var1163, var1163, var1163, var1163, ()], var546, [(), (), (), (), (), (), (), (), (), ()]], Option<String>.Some(###"GYT7jlEYAE"###), var648, Int32(31))[2] ?? (var2845|>var2842))) {
        case _ => 
            'H';
            ()
        
    };
    var1163
}

public func func1258(param1259 : Range<Int8>) : Option<Unit> { // block id: 1260
    var var1274 : Unit = ();
    var var1318 : UInt16 = UInt16(UInt8(UInt8(UInt8(106))));
    var var2911 : (String, UInt64, Range<UInt8>, Option<Unit>, ((UInt16, Int64, Array<Unit>, Range<UInt16>), Float32, UInt16, Range<Int16>, Range<UInt64>, Array<Unit>), Range<UInt32>, Unit) = ("""
R}w/y
Nue-1
""", UInt64(143), ((UInt8(55)&127)..=(UInt8(165)&127):((-50)|1)), Option<Unit>.Some(()), ((UInt16(6), Int64(UInt64(40)), [(), (), (), (), (), (), (), (), (), ()], ((UInt16(254)&127)..(UInt16(170)&127):(107|1))), Float32(Float32(Float32(50.0))), UInt16(Int8(122)), ((Int16(2)&127)..(Int16(114)&127):((-60)|1)), ((UInt64(Int8(-112))&127)..(UInt64(186)&127):((Int64(UInt16(179))|1))), [(), (), (), (), (), (), (), (), (), ()]), ((UInt32(118)&127)..(UInt32(206)&127):((-74)|1)), ());
    try (resource = Class7()) { // block id: 1262
        var var1265 : Bool = (((Int16(85)&127)..(Int16(-33)&127):((66|1))) is Option<UInt64>);
        if (var1265) { // block id: 1271
            Option<Unit>.Some(var1274);
            ()
        };
        let var1279 : (Range<UInt16>, Unit, Unit) = (((UInt16(59)&127)..(UInt16(96)&127):(115|1)), (), ());
        var1279[2];
        var loopTimeVar1288 : Range<UInt64> = ((UInt64(UInt8(30))&127)..=(UInt64(155)&127):(((-4)|1)));
        for (i in loopTimeVar1288 where var1265) {

        }
    } catch (e: Exception) { // block id: 1294
        (var1301 ?? ());
        var loopTimeVar1324 : Range<UInt64> = ((UInt64(UInt32(UInt32(Int16(108))))&127)..=(UInt64(125)&127):(((-7)|1)));
        for (i in loopTimeVar1324 where var1306) {
            var1318 *= var1318
        }
    } finally { // block id: 1332
        var var2865 : (Rune) -> Unit = func1334;
        'G'|>var2865;
        if (var1306) { (###"G8\"OhpGaj9"###, UInt64(202), ((var2678&127)..=(UInt8(202)&127):((47|1))), var2878, var2881, ((UInt32(24)&127)..(UInt32(183)&127):((-97)|1)), ()) } else { var2911 } ;
        var loopTimeVar2954 : Int64 = 0;
        while ((var1306) && loopTimeVar2954 < 100 ) {
            loopTimeVar2954++;

        }
    };
    if (match (try { // block id: 2958
            var1301
        } catch (e: Exception) { // block id: 2960
            let var2964 : ?((UInt16, Int64, Array<Unit>, Range<UInt16>), Float32, UInt16, Range<Int16>, Range<UInt64>, Array<Unit>) = (Option<((UInt16, Int64, Array<Unit>, Range<UInt16>), Float32, UInt16, Range<Int16>, Range<UInt64>, Array<Unit>)>.Some(((UInt16(181), (-17), [(), (), (), (), (), (), (), (), (), ()], ((UInt16(126)&127)..=(UInt16(157)&127):((-73)|1))), Float32(-108.0), UInt16(45), ((Int16(88)&127)..=(Int16(40)&127):(14|1)), ((UInt64(220)&127)..(UInt64(11)&127):((93|1))), [(), (), (), (), (), (), (), (), (), ()])) as ((UInt16, Int64, Array<Unit>, Range<UInt16>), Float32, UInt16, Range<Int16>, Range<UInt64>, Array<Unit>));
            if (true) { var2964 } else { var2964 } ;
            Option<UInt64>.None;
            var1301
        }) {
        case _ : Rune => 
            var2129;
            true
        
        case _ : (Unit, (Range<UInt16>, Unit, Unit), Bool, Bool) => 
            var2476 + var2476;
            var1552 &= var3008;
            var1306
        
        case caseVar3016 : Array<Range<UInt8>> => 
            var874 = Int32(Int64(var874) ** (UInt64(46) & 3));
            true
        
        case caseVar3024 => 
            UInt64(230) >= var2158
        
        case _ => 
            true
        
    }) { // block id: 3032
        [((UInt8(254)&127)..=(UInt8(219)&127):(122|1)), ((UInt8(237)&127)..(UInt8(44)&127):((-118)|1)), ((UInt8(181)&127)..(UInt8(11)&127):(56|1)), ((UInt8(199)&127)..(UInt8(189)&127):((-60)|1)), ((UInt8(218)&127)..=(UInt8(220)&127):(124|1)), ((UInt8(131)&127)..(UInt8(95)&127):((-111)|1)), ((UInt8(117)&127)..=(UInt8(25)&127):((-79)|1)), ((UInt8(148)&127)..=(UInt8(194)&127):(82|1)), ((UInt8(41)&127)..=(UInt8(205)&127):(100|1)), ((UInt8(126)&127)..(UInt8(142)&127):((-1)|1))];
        var loopTimeVar3037 : Range<UInt64> = ((UInt64(Int64(UInt64(117)))&127)..=(UInt64(200)&127):((Int64(Int8(UInt8(127)))|1)));
        for (i in loopTimeVar3037 where var1306) {

        }
    };
    var loopTimeVar3056 : Int64 = 0;
    Option<Unit>.Some(do {
        loopTimeVar3056++;
        if (false) { var2911 } else { var2911 } 
    } while ((true) && loopTimeVar3056 < 100 ) )
}

func func1227(param1228 : Aggregate217) : Unit { // block id: 1229
    let var1248 : Bool = (Int32(Int16(UInt16(37))) is (Bool) -> Bool);
    let var1254 : ?Unit = Option<Unit>.Some(());
    var var3097 : UInt16 = UInt16(UInt16(Int16(Int16(22))));
    match (if (try { // block id: 1233
            var818 /= ((var818) | 1);
            var var1238 : Unit = ();
            var1238;
            Int8(-25) < Int8(-54)
        } catch (_) { // block id: 1243
            var546;
            true || var1248
        }) { var1254 } else { (((Int8(88)&127)..=(Int8(87)&127):(52|1))|>func1258) } ) {
        case caseVar3061 : Range<Int32> => 
            if (var1306) { [var2664, (), var1163, (), var1163, (), (), (), (), ()] } else { var546 } ;
            var2191
        
        case _ => 
            var1163;
            var860;
            var var3085 : UInt16 = UInt16(136);
            var3085 += UInt16(88)
        
        case _ : Range<Int8> => 
            var1163
        
        case _ : Array<Array<Unit>> => 
            var3097 %= ((UInt16(0)) | 1);
            var1163
        
        case _ => 
            var2191
        
    }
}


public func func3108(param3109 : Range<Int16>) : Aggregate217 { // block id: 3110
    let var3141 : (Unit, Array<Array<Unit>>, Option<String>, UInt64, Int32) = ((), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], (("""
szP@u
(rgUz
""", UInt64(53), ((UInt8(67)&127)..(UInt8(210)&127):((-68)|1)), Option<Unit>.None, ((UInt16(53), 120, [(), (), (), (), (), (), (), (), (), ()], ((UInt16(4)&127)..(UInt16(30)&127):((31|1)))), Float32(99.0), UInt16(233), ((Int16(-73)&127)..=(Int16(-51)&127):(((-52)|1))), ((UInt64(113)&127)..(UInt64(179)&127):((95|1))), [(), (), (), (), (), (), (), (), (), ()]), ((UInt32(207)&127)..(UInt32(174)&127):(53|1)), ()) as String), UInt64(126), Int32(Int8(Int8(UInt8(221)))));
    var loopTimeVar3184 : Range<UInt64> = ((UInt64(Int64(Int64(UInt32(212))))&127)..(UInt64(222)&127):((54|1)));
    for (i in loopTimeVar3184 where try { // block id: 3113
        ();
        var1306
    } finally { // block id: 3116
        ((var1392&127)..(var1392&127):((var818|1)));
        var1306
    }) {
        let var3135 : Array<Array<Unit>> = [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]];
        try { // block id: 3124
            var var3127 : Bool = false;
            var3127 ||= var3127;
            if (true) { (var1163, var3135, Option<String>.None, UInt64(84), var45) } else { var3141 } 
        } catch (_) { // block id: 3179
            var3141
        };
        var var3182 : Int8 = Int8(-69);
        var3182
    };
    let var3224 : ?Int64 = (((UInt16(92)&127)..=(UInt16(178)&127):(23|1)) as Int64);
    var var3271 : Bool = ((Int8(-41) as Array<Unit>) is Option<(Int64, ((UInt16, Int64, Array<Unit>, Range<UInt16>), Float32, UInt16, Range<Int16>, Range<UInt64>, Array<Unit>), Rune, Float32, Unit)>);
    var var3299 : UInt32 = UInt32(163);
    try { // block id: 3193
        (Option<Aggregate217>.Some(var3201) ?? var3201)
    } catch (_) { // block id: 3204
        var var3229 : Range<Int32> = ((Int32(4)&127)..(Int32(47)&127):((Int64(Int32(94))|1)));
        (((var2678&127)..(UInt8(206)&127):(((-4)|1))), var2142, ((), (((UInt16(2)&127)..=(UInt16(169)&127):((var818|1))), (), var1163), var1306, var1306), UInt16(221), var3224, UInt32(36), var3229);
        try (resource = Class7()) { // block id: 3236
            ()
        } finally { // block id: 3238
            var1163;
            var1700 *= UInt8(98)
        };
        match ([Option<Float32>.None, Option<Float32>.Some(var2204), Option<Float32>.Some(var3250), var703, var3254, Option<Float32>.Some(Float32(-113.0)), Option<Float32>.Some(var3250), Option<Float32>.None, var3254, var703]) {
            case caseVar3267 : UInt8 => 
                var3271 ||= true;
                if (var3271) { var3279 } else { var3279 } ;
                if (false) { var3201 } else { var3201 } 
            
            case _ : Option<Aggregate217> => 
                if (false) { var3201 } else { Aggregate217() } 
            
            case caseVar3295 : Option<((UInt16, Int64, Array<Unit>, Range<UInt16>), Float32, UInt16, Range<Int16>, Range<UInt64>, Array<Unit>)> => 
                var3299 = var3299;
                [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]];
                Aggregate217()
            
            case _ => 
                ();
                Option<Unit>.Some(var1163);
                var3201
            
        }
    } finally { // block id: 3310
        Aggregate217()
    }
}


public func func3314(param3315 : Rune) : Range<Int16> { // block id: 3316
    let var3367 : Unit = ();
    let var3390 : (Range<UInt16>, Unit, Unit) = (((UInt16(43)&127)..=(UInt16(78)&127):((Int64((-72))|1))), (), ());
    match (match ((var3325 ?? var2510)) {
            case _ : Option<Option<Unit>> => 
                let var3355 : Range<Int8> = ((Int8(123)&127)..(Int8(-86)&127):(((-25)|1)));
                var3355;
                ((((UInt16(116)&127)..=(var1792&127):((40|1))), var3367, ()), var2881, var70, var2476, [UInt8(241), UInt8(245), UInt8(203), UInt8(221), UInt8(160), UInt8(52), UInt8(28), UInt8(117), UInt8(15), UInt8(130)], ((UInt8(124)&127)..=(var2678&127):(((-43)|1))), var2158)
            
            case caseVar3381 => 
                Option<Array<Unit>>.Some(var546);
                var3386;
                (var3390, (var2129, var2142, UInt16(23), var860, ((UInt64(31)&127)..(UInt64(27)&127):((-92)|1)), [var2191, var1163, var2664, (), var3367, var2664, (), (), var2191, var3367]), var70, var2476, var3419, var885, UInt64(164))
            
            case _ : Int32 => 
                ();
                var var3429 : UInt16 = UInt16(Int8(-67));
                var3429 = var3429;
                if (var1306) { var1466 } else { var1466 } 
            
            case _ => 
                var1466
            
        }) {
        case (_,((_,_ : Option<Aggregate217>,caseVar3442,_),_ : Option<Float32>,_,_ : Option<(Int64, ((UInt16, Int64, Array<Unit>, Range<UInt16>), Float32, UInt16, Range<Int16>, Range<UInt64>, Array<Unit>), Rune, Float32, Unit)>,caseVar3443 : Array<Unit>,_ : Option<Range<UInt32>>),caseVar3444 : (Range<UInt16>, Unit, Unit),_ : Range<UInt32>,_ : Option<Option<Range<UInt16>>>,_ : ((Range<UInt16>, Unit, Unit), ((UInt16, Int64, Array<Unit>, Range<UInt16>), Float32, UInt16, Range<Int16>, Range<UInt64>, Array<Unit>), String, Int16, Array<UInt8>, Range<UInt8>, UInt64),_ : Array<Unit>) => 
            UInt64(214) & var2158;
            UInt8(189);
            var860
        
        case _ => 
            if (false) { var1466 } else { ((var1212, (), ()), var2881, """
7vO(a
\\WNsb
""", Int16(-48), [UInt8(205), UInt8(3), UInt8(31), UInt8(58), UInt8(86), UInt8(43), UInt8(128), UInt8(119), UInt8(121), UInt8(116)], ((UInt8(180)&127)..(UInt8(219)&127):((-119)|1)), UInt64(157)) } ;
            ((var2678&127)..(UInt8(24)&127):((var818|1)));
            if (true) { var860 } else { ((Int16(-15)&127)..=(var2476&127):(((-53)|1))) } 
        
    }
}

func func295(namedParam296 ! : Int16, namedParam297 ! : Array<Unit>, optionalParam298 ! : Range<Int64> = ((104&127)..((-75)&127):((-30)|1))) : Float64 { // block id: 300
    let var419 : Range<UInt16> = ((UInt16(135)&127)..=(UInt16(183)&127):(71|1));
    let var3771 : (String, UInt64, Range<UInt8>, Option<Unit>, ((UInt16, Int64, Array<Unit>, Range<UInt16>), Float32, UInt16, Range<Int16>, Range<UInt64>, Array<Unit>), Range<UInt32>, Unit) = ("ivsjt|&cG8", UInt64(Int16(119)), ((UInt8(UInt8(Int8(-121)))&127)..=(UInt8(28)&127):((Int64(UInt8(UInt8(74)))|1))), ((((Int32(53)&127)..=(Int32(-49)&127):((24|1))) as Range<UInt32>) as Unit), ((UInt16(UInt8(140)), (-102), [(), (), (), (), (), (), (), (), (), ()], ((UInt16(27)&127)..=(UInt16(16)&127):(124|1))), Float32(Float32(Float32(12.0))), UInt16(Int16(Int16(-26))), ((Int16(Int16(100))&127)..=(Int16(-53)&127):(((-25)|1))), ((UInt64(133)&127)..=(UInt64(UInt16(153))&127):((72|1))), [(), (), (), (), (), (), (), (), (), ()]), ((UInt32(Int16(27))&127)..=(UInt32(Int8(UInt8(89)))&127):((Int64(UInt32(UInt32(25)))|1))), ());
    func func303(param304 : Array<Unit>) : Class7 { // block id: 305
        let var313 : UInt32 = UInt32(UInt8(Int8(-105)));
        let var319 : Int64 = (-29);
        var var327 : Int8 = Int8(Int8(-75));
        match (((var313&127)..=(var313&127):((var319|1)))) {
            case caseVar323 => 
                var327 |= var327;
                var332;
                var var335 : Array<Array<Unit>> = Array<Array<Unit>>(10){ i => [(), (), (), (), (), (), (), (), (), ()] };
                var335
            
            case caseVar409 : Range<Int16> => 
                var412
            
            case caseVar416 => 
                var419;
                ();
                var var424 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
                let var455 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
                [var424, [(), var429, (), (), var434, (), var434, var434, (), var434], [(), (), (), (), (), (), (), (), (), ()], [var429, (), (), var434, (), var434, (), (), (), var434], [(), (), (), (), (), (), (), (), (), ()], var455, [(), (), (), (), (), (), (), (), (), ()], [var434, (), var429, (), var434, var429, var429, (), (), ()], [(), var434, var434, (), var429, var434, var434, var434, (), ()], var424]
            
            case _ => 
                var327;
                var429;
                [[(), (), var429, (), var429, var434, (), (), var434, var429], [(), (), (), var434, var434, var429, (), var434, (), var429], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), var434, (), var434, var429, var434, (), ()], [(), var429, var429, (), (), var434, (), var434, var434, var429], [var434, (), var434, (), var434, var434, (), (), (), var429], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], var546]
            
        }[1][3];
        try { // block id: 551
            try { // block id: 553
                Aggregate217(((UInt64(169)&127)..=(var648&127):((22|1))), ())
            } catch (_) { // block id: 3641
                var2664;
                var3644;
                if (false) { Aggregate217() } else { var3201 } 
            };
            (Option<Unit>.None ?? var434);
            [(), (), (), (), (), (), (), (), (), ()]
        } finally { // block id: 3696
            var var3698 : Array<Unit> = Array<Unit>(10){ i => () };
            var3698
        };
        var var3722 : Unit = ();
        var var3736 : UInt16 = UInt16(219);
        match (match (try { // block id: 3713
                    Option<Unit>.Some(());
                    (((var1792&127)..=(UInt16(247)&127):((67|1))), var3722, var434)
                } catch (_) { // block id: 3725
                    var2664;
                    let var3728 : (Range<UInt16>, Unit, Unit) = (((UInt16(152)&127)..(UInt16(41)&127):((-53)|1)), (), ());
                    var3728
                } finally { // block id: 3733
                    var3736 /= ((UInt16(105)) | 1);
                    if (var1306) { (var419, (), ()) } else { (((var1026&127)..(UInt16(217)&127):((22|1))), (), ()) } 
                }) {
                case _ => 
                    (var3757, UInt64(19), ((UInt8(29)&127)..(UInt8(187)&127):(43|1)), var1349, var2881, ((UInt32(215)&127)..=(UInt32(149)&127):((60|1))), ())
                
                case _ => 
                    var3771
                
            }) {
            case caseVar3846 => 
                var130
            
            case _ => 
                var1212;
                var2664;
                if (var1306) { var130 } else { var1706 } 
            
        }
    }
;
    func303(if (var29) { [(), (), (), (), (), (), (), (), (), ()] } else { var3861 } ).var3874;
    try { // block id: 3877
        ((UInt32(34)&127)..=(UInt32(138)&127):(12|1));
        match (Option<Option<Range<UInt16>>>.Some(var3882)) {
            case caseVar3886 => 
                var1349;
                Option<Array<Option<Float32>>>.None;
                Option<((UInt16, Int64, Array<Unit>, Range<UInt16>), Float32, UInt16, Range<Int16>, Range<UInt64>, Array<Unit>)>.None
            
            case caseVar3893 => 
                ();
                Option<((UInt16, Int64, Array<Unit>, Range<UInt16>), Float32, UInt16, Range<Int16>, Range<UInt64>, Array<Unit>)>.None
            
            case _ => 
                var434;
                (var1026, var818, namedParam297, var1212);
                Option<((UInt16, Int64, Array<Unit>, Range<UInt16>), Float32, UInt16, Range<Int16>, Range<UInt64>, Array<Unit>)>.None
            
        };
        -var3908
    } catch (_) { // block id: 3914
        if (var1306) { var130 } else { var130 } ;
        (var1552 as Array<Option<Float32>>);
        if (var29) { // block id: 3923
            var874++;
            103.0 + (-98.0)
        } else { // block id: 3929
            var434;
            if (true) { var3279 } else { Option<Unit>.Some(()) } ;
            (-31.0) / Float64((Int32(81.0)) | 1)
        }
    }
}

main(): Int64 {
    try {
        let var34 : Unit = ();
        let var106 : Rune = '3';
        let var115 : Int64 = 110;
        func func11() : Class7 { // block id: 12
            let var21 : ?Float32 = (Float32(1.0) as Float32);
            var var54 : UInt16 = UInt16(Int16(Int16(UInt8(6))));
            if (match ((var21 ?? Float32(114.0))) {
                case _ => 
                    !var29
                
            }) { // block id: 32
                var34
            } else if (var29) { // block id: 37
                match (var21) {
                    case caseVar42 : UInt16 => 
                        var45;
                        UInt16(171)
                    
                    case caseVar50 : String => 
                        var54 += var54;
                        var54 * UInt16(25)
                    
                    case caseVar65 => 
                        if (var29) { var70 } else { "dXp}3CQHE-" } ;
                        var34;
                        var54
                    
                    case _ : UInt16 => 
                        var21;
                        var34;
                        UInt16(143)
                    
                    case _ => 
                        UInt16(46)
                    
                };
                var var92 : Int8 = Int8(59);
                if (true) { // block id: 86
                    UInt16(74) * var54;
                    var92 /= ((Int8(50)) | 1)
                } else if (false) { // block id: 96

                }
            };
            match (match ((var106|>func100)) {
                    case caseVar110 => 
                        Int64(-118) ** UInt64(var115 & 3)
                    
                    case caseVar119 : Float64 => 
                        10
                    
                    case _ => 
                        (-94);
                        var115
                    
                }) {
                case 2 | 103 => 
                    var130;
                    Class7()
                
                case _ => 
                    ();
                    Class7()
                
            }
        }
;
        func11().var138;
        try { // block id: 141
            var var143 : UInt16 = UInt16(UInt8(33));
            var143
        } catch (_) { // block id: 146
            ();
            UInt16(130)
        } finally { // block id: 149
            UInt16(200)
        };
        let var245 : UInt16 = UInt16(74);
        func func152(optionalParam153 ! : Float64 = Float64(Float32(Float32(Float32(Float32(-44.0)))))) : Int64 { // block id: 159
            [(), (), (), (), (), (), (), (), (), ()][4];
            ((func11().var176&127)..=(Class7.func181(namedParam182 : ((Int16(-70)&127)..(Int16(102)&127):((-89)|1)), namedParam188 : ((Int32(-34)&127)..=(Int32(-65)&127):((-107)|1)), namedParam189 : var45)&127):(match (if (true) { var199 } else { Option<UInt64>.None } ) {
                case _ : Unit => 
                    52
                
                case caseVar240 => 
                    ((UInt16(111)&127)..(var245&127):((var115|1)));
                    33 / (((-70)) | 1)
                
                case _ : Range<Int32> => 
                    var29;
                    28
                
                case _ => 
                    ();
                    117
                
            }|1));
            try { // block id: 261
                ();
                var loopTimeVar266 : Range<UInt64> = ((UInt64(229)&127)..(UInt64(19)&127):((Int64(UInt16(UInt8(181)))|1)));
                for (i in loopTimeVar266 where true) {

                };
                (-101) >> ((var115) & 7)
            } finally { // block id: 277
                var loopTimeVar281 : Range<UInt64> = ((UInt64(UInt16(135))&127)..=(UInt64(Int32(33))&127):((Int64(Int32(72))|1)));
                for (i in loopTimeVar281 where false) {

                };
                Class7.var292
            }
        }
;
        func152(optionalParam153 : func295(namedParam296 : var2476, namedParam297 : [var2664, (), (), (), (), var3596, var3596, (), var3596, var34]))
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var115*var115), 64)
        crccheck.updateBuffer(UInt64(var245*var245), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Aggregate217 {

}

extend Class7 {
    public static func func181(namedParam182 ! : Range<Int16>, optionalParam183 ! : Range<UInt64> = ((UInt64(28)&127)..=(UInt64(96)&127):(((-103)|1))), namedParam188 ! : Range<Int32>, namedParam189 ! : Int32) : UInt64 { // block id: 190
        try { // block id: 192
            var199.getOrThrow()
        } catch (e: Exception) { // block id: 201
            func100(Option<UInt64>.None, Class7(), Int8(115));
            [(), (), (), (), (), (), (), (), (), ()][0];
            var221.var224
        }
    }

}
// ASSERT: scan sema_unreachable_pattern
// ASSERT: scan sema_illegal_capture_this


