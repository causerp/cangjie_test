/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args 

const var_1694636776828_24 : Unit = ()
public let var_1694636776828_50 : Struct_1694636776828_46 = Struct_1694636776828_46()
public const var_1694636776828_69 : Float64 = 28.0
public let var_1694636776828_94 : String = """
,m[hI
1:Q/Y
"""
public let var_1694636776828_104 : Class_1694636776828_100<UInt64> = Class_1694636776828_100<UInt64>()
var var_1694636776828_311 : Option<Bool> = ([(Int32(Int16(-127)) is UInt64), true, false, ((((UInt16(UInt16(73))&127)..=(UInt16(UInt16(237))&127):(Int64(-48)|1)) as Bool) is Int16), (Float64(Float32(-36.0)) is Int64), true, (((UInt32(UInt32(40))&127)..(UInt32(UInt32(164))&127):(Int64(111)|1)) is Struct_1694636776828_46), (Int8(61) is Float32), (((Int16(Int16(82))&127)..=(Int16(Int16(100))&127):(Int64(69)|1)) is UInt32), (((UInt32(UInt32(141))&127)..(UInt32(UInt32(147))&127):(Int64(104)|1)) is String)] as Bool)
public let var_1694636776828_349 : ((Bool, Int8, UInt16, Struct_1694636776828_46), Bool, Int16, Int16, Array<Bool>, Range<UInt32>) = (((UInt32(207) is Unit), Int8(Int8(UInt8(245))), UInt16(UInt8(Int8(-81))), Struct_1694636776828_46()), false, Int16(115), Int16(Int16(-111)), [((Class_1694636776828_100<UInt64>() as Float64) is UInt8), false, false, ([true, true, true, true, false, true, false, true, true, false] is Class_1694636776828_100<UInt64>), (((UInt8(UInt8(73))&127)..(UInt8(UInt8(228))&127):(Int64(11)|1)) is Range<Int32>), false, true, (UInt16(UInt16(215)) is Int16), (((Int8(Int8(-69))&127)..(Int8(Int8(100))&127):(Int64(-77)|1)) is ((Bool, Int8, UInt16, Struct_1694636776828_46), Bool, Int16, Int16, Array<Bool>, Range<UInt32>)), (((Int32(Int32(-118))&127)..(Int32(Int32(-5))&127):(Int64(-127)|1)) is Range<UInt16>)], ((UInt32(UInt32(140))&127)..=(UInt32(UInt32(235))&127):(Int64(-31)|1)))
let var_1694636776828_406 : Bool = ([UInt64(10), UInt64(214), UInt64(5), UInt64(31), UInt64(249), UInt64(105), UInt64(36), UInt64(122), UInt64(179), UInt64(239)] is UInt64)
let var_1694636776828_442 : Int32 = Int32(-65)
public var var_1694636776828_471 : ((Bool, Int8, UInt16, Struct_1694636776828_46), Bool, Int16, Int16, Array<Bool>, Range<UInt32>) = (((((true, Int8(110), UInt16(88), Struct_1694636776828_46()), true, Int16(-111), Int16(-80), [true, false, false, true, true, false, true, true, false, false], ((UInt32(UInt32(85))&127)..(UInt32(UInt32(226))&127):(Int64(29)|1))) is Float64), Int8(77), UInt16(181), Struct_1694636776828_46()), ([false, true, false, false, false, true, false, true, true, true] is Range<Int64>), Int16(Int16(Int8(-42))), Int16(-63), [true, (([UInt64(67), UInt64(49), UInt64(236), UInt64(105), UInt64(181), UInt64(251), UInt64(96), UInt64(95), UInt64(140), UInt64(186)] as Float64) is (Float64) -> Int64), true, false, false, false, (Int8(81) is Array<Float64>), false, (UInt32(UInt16(100)) is String), ((false, Int8(30), UInt16(89), Struct_1694636776828_46()) is Option<Float64>)], ((UInt32(UInt32(246))&127)..(UInt32(UInt32(203))&127):(Int64(-22)|1)))
public var var_1694636776828_547 : Bool = (((Int8(Int8(Int8(72)))&127)..=(Int8(Int8(9))&127):(Int64(-31)|1)) is Array<UInt64>)
var var_1694636776828_581 : UInt64 = UInt64(50)
public let var_1694636776828_606 : Int64 = Int64(Int32(4))
var var_1694636776828_612 : Int8 = Int8(-21)
const func func_1694636776828_20(param_1694636776828_21 : Float64) : Int64 { // block id: 22
    var_1694636776828_24;
    -95
}

public func func_1694636776828_14<T0, T1>(param_1694636776828_15 : Bool) : Bool { // block id: 16
    ((-func_1694636776828_20(Float64(37.0))) is UInt32)
}

public struct Struct_1694636776828_46 {
    public init() { // block id: 48

    }
;
    public prop var_1694636776828_53 : Float64 { // block id: 54
        get() { // block id: 56
            UInt32(UInt32(12));
            Float64(-35.0)
        }

    }
}


public open class Class_1694636776828_100<T0> <: Resource {
    public init() { // block id: 102

    }
;
    public prop var_1694636776828_107 : (Bool, Int8, UInt16, Struct_1694636776828_46) { // block id: 108
        get() { // block id: 110
            ((UInt64(Int8(85)) is Option<Float64>), Int8(Int8(UInt8(105))), UInt16(85), Struct_1694636776828_46())
        }

    };
    private static let var_1694636776828_294 : UInt16 = UInt16(97);
    public let var_1694636776828_393 : Range<UInt64> = ((UInt64(UInt64(157))&127)..=(UInt64(UInt64(49))&127):(Int64(17)|1));
    public static mut prop var_1694636776828_413 : Bool { // block id: 414
        get() { // block id: 416
            ();
            true
        }

        set(Value) { // block id: 421
            Float64(Float64(Float64(-3.0)));
            ()
        }

    };
    public open func func_1694636776828_274(namedParam_1694636776828_275 ! : Range<Int32>, namedParam_1694636776828_276 ! : Bool, namedParam_1694636776828_277 ! : Bool) : Range<UInt8> { // block id: 278
        let var_1694636776828_290 : Bool = false;
        const var_1694636776828_302 : Int8 = -20;
        var loopTimeVar_1694636776828_432 : Int64 = 0;
        while (((if (false) { // block id: 287
            if (var_1694636776828_290) { ((UInt16(var_1694636776828_294)&127)..=(UInt16(UInt16(119))&127):(Int64(-26)|1)) } else { ((UInt16(UInt16(12))&127)..=(UInt16(UInt16(181))&127):(Int64(-9)|1)) } ;
            (false, var_1694636776828_302, var_1694636776828_294, Struct_1694636776828_46());
            if (false) { Option<Bool>.Some(var_1694636776828_290) } else { var_1694636776828_311 } 
        } else { // block id: 340
            if (var_1694636776828_290) { var_1694636776828_311 } else { Option<Bool>.Some(true) } 
        } ?? var_1694636776828_349[1])) && loopTimeVar_1694636776828_432 < 100 ) {
            loopTimeVar_1694636776828_432++;
            if (true) { var_1694636776828_393 } else { var_1694636776828_393 } ;
            var var_1694636776828_400 : Int16 = Int16(-112);
            (var_1694636776828_107, true, var_1694636776828_400, Int16(5), [var_1694636776828_290, var_1694636776828_406, var_1694636776828_290, true, var_1694636776828_406, var_1694636776828_413, var_1694636776828_290, true, var_1694636776828_406, var_1694636776828_413], ((UInt32(UInt32(176))&127)..=(UInt32(UInt32(19))&127):(Int64(-33)|1)))
        };
        var var_1694636776828_434 : Range<UInt8> = ((UInt8(UInt8(6))&127)..=(UInt8(UInt8(237))&127):(Int64(Int64(12))|1));
        var_1694636776828_434
    }
;
    public var var_1694636776828_588 : Array<Float64> = [Float64(4.0), Float64(-49.0), Float64(-52.0), Float64(20.0), Float64(-29.0), Float64(-34.0), Float64(109.0), Float64(81.0), Float64(-9.0), Float64(-37.0)]
    public func isClosed(): Bool { return true }
    public func close(): Unit {}
}

func func_1694636776828_74<T0, T1, T2>(param_1694636776828_75 : T2) : (Bool, Int8, UInt16, Struct_1694636776828_46) { // block id: 76
    var var_1694636776828_84 : UInt32 = UInt32(164);
    let var_1694636776828_87 : UInt16 = UInt16(50);
    match (UInt8(45)) {
        case 193 => 
            var_1694636776828_84--;
            var_1694636776828_87;
            ()
        
        case _ => 
            var_1694636776828_94;
            var var_1694636776828_97 : Unit = ();
            var_1694636776828_97
        
    };
    var_1694636776828_104.var_1694636776828_107
}


public struct Struct_1694636776828_218 {
    public init() { // block id: 220

    }
;
    mut prop var_1694636776828_260 : Class_1694636776828_100<UInt64> { // block id: 261
        get() { // block id: 263
            ();
            Class_1694636776828_100<UInt64>();
            var_1694636776828_659
        }

        set(Value) { // block id: 268
            ();
            ();
            var_1694636776828_659 = Value
        }

    };
    var var_1694636776828_659 : Class_1694636776828_100<UInt64> = Class_1694636776828_100<UInt64>()
}




func func_1694636776828_6(namedParam_1694636776828_7 ! : String, optionalParam_1694636776828_8 ! : Unit = (), namedParam_1694636776828_10 ! : Int32, namedParam_1694636776828_11 ! : Int64) : Int64 { // block id: 12
    let var_1694636776828_66 : Option<Float64> = Option<Float64>.None;
    let var_1694636776828_121 : (Struct_1694636776828_46) -> (Bool, Int8, UInt16, Struct_1694636776828_46) = func_1694636776828_74<Float32, Float32, Struct_1694636776828_46>;
    (Struct_1694636776828_46()|>var_1694636776828_121)[0]|>{ lambdaParameter_1694636776828_30 : Bool => Float64(if (true) { // block id: 36
        Float64(124.0) / Float64((Int32(Float64(-35.0))) | 1)
    } else { // block id: 40
        Float64(98.0) + Float64(-83.0)
    }) == ((var_1694636776828_50.var_1694636776828_53) / Float64((Int32((var_1694636776828_66 ?? var_1694636776828_69))) | 1)) };
    let var_1694636776828_188 : Range<Int64> = ((Int64(Int64(Int32(25)))&127)..=(Int64(Int64(-98))&127):(Int64(Int64(12))|1));
    func func_1694636776828_138(namedParam_1694636776828_139 ! : Range<UInt64>, namedParam_1694636776828_140 ! : Unit, namedParam_1694636776828_141 ! : Float64, namedParam_1694636776828_142 ! : UInt32) : Class_1694636776828_100<UInt64> { // block id: 143
        let var_1694636776828_179 : Option<Float64> = Option<Float64>.None;
        let var_1694636776828_446 : Int = Int64(97);
        let var_1694636776828_456 : Int16 = Int16(UInt8(197));
        if (if ((false|>{ lambdaParameter_1694636776828_149 : Bool => true|>{ lambdaParameter_1694636776828_154 : Bool => let var_1694636776828_174 : Bool = (UInt64(UInt16(192)) is Range<UInt64>); func func_1694636776828_159<T0, T1>(param_1694636776828_160 : Unit, param_1694636776828_161 : Int64) : Class_1694636776828_100<UInt64> { // block id: 162
            var var_1694636776828_164 : Unit = ();
            var_1694636776828_164;
            var loopTimeVar_1694636776828_195 : Array<UInt64> = [UInt64(UInt64(UInt32(23))), UInt64(252), UInt64(77), UInt64(Int32(97)), UInt64(Int8(7)), UInt64(UInt32(Int32(UInt8(193)))), UInt64(157), UInt64(Int8(UInt8(Int8(92)))), UInt64(9), UInt64(129)];
            (((if (var_1694636776828_174) { var_1694636776828_179 } else { Option<Float64>.Some(var_1694636776828_69) } ) as Unit) ?? for (i in loopTimeVar_1694636776828_195 where var_1694636776828_174) {
                ();
                var_1694636776828_188
            });
            let var_1694636776828_257 : Struct_1694636776828_218 = Struct_1694636776828_218();
            func func_1694636776828_222() : Struct_1694636776828_218 { // block id: 223
                var var_1694636776828_237 : Option<(Bool, Int8, UInt16, Struct_1694636776828_46)> = (((UInt64(UInt64(UInt8(UInt8(115))))&127)..=(UInt64(UInt64(Int8(UInt8(104))))&127):(Int64(Int64(Int16(5)))|1)) as (Bool, Int8, UInt16, Struct_1694636776828_46));
                (if ([true, false, false, true, true, true, true, false, false, true][7]) { try { // block id: 235
                    var_1694636776828_237
                } finally { // block id: 249
                    ();
                    ();
                    Option<(Bool, Int8, UInt16, Struct_1694636776828_46)>.None
                } } else { Option<(Bool, Int8, UInt16, Struct_1694636776828_46)>.None }  ?? func_1694636776828_74<Float32, Float32, Struct_1694636776828_46>(var_1694636776828_50));
                var_1694636776828_257
            }
;
            func_1694636776828_222().var_1694636776828_260
        }
; match (func_1694636776828_159<Float64, String>((), Int64(44)).func_1694636776828_274(namedParam_1694636776828_275 : ((Int32(var_1694636776828_442)&127)..(Int32(var_1694636776828_442)&127):(var_1694636776828_446|1)), namedParam_1694636776828_276 : false, namedParam_1694636776828_277 : var_1694636776828_174)) {
            case caseVar_1694636776828_452 => 
                var_1694636776828_456 >= Int16(-122);
                var var_1694636776828_462 : Float32 = Float32(Float32(27.0));
                var_1694636776828_462 = var_1694636776828_462;
                false
            
            case _ => 
                var_1694636776828_471;
                var_1694636776828_174
            
        } } })) { // block id: 540
            ();
            false
        } else { // block id: 543
            ();
            var_1694636776828_547 || var_1694636776828_547
        }) { // block id: 555
            var loopTimeVar_1694636776828_560 : Int64 = 0;
            while ((false) && loopTimeVar_1694636776828_560 < 100 ) {
                loopTimeVar_1694636776828_560++;

            };
            try (resource = Class_1694636776828_100<UInt64>()) { // block id: 562
                var_1694636776828_547 &&= var_1694636776828_547;
                ()
            } finally { // block id: 567

            };
            var loopTimeVar_1694636776828_572 : Int64 = 0;
            while ((true) && loopTimeVar_1694636776828_572 < 100 ) {
                loopTimeVar_1694636776828_572++;

            }
        };
        let var_1694636776828_575 : Struct_1694636776828_218 = Struct_1694636776828_218();
        var_1694636776828_575.var_1694636776828_260
    }
;
    func_1694636776828_138(namedParam_1694636776828_139 : ((UInt64(UInt64(52))&127)..=(UInt64(var_1694636776828_581)&127):(Int64(83)|1)), namedParam_1694636776828_140 : (), namedParam_1694636776828_141 : Float64(75.0), namedParam_1694636776828_142 : UInt32(76)).var_1694636776828_588[0];
    (if (VArray<Bool, $2>({ i => false})[0]) { // block id: 603
        Option<Int64>.Some(var_1694636776828_606)
    } else { // block id: 609
        var_1694636776828_612 <<= ((Int8(-15)) & 7);
        Option<Int64>.None
    } ?? try { // block id: 619
        [Int64(-73), Int64(72), Int64(72), Int64(-29), Int64(4), Int64(-121), Int64(5), Int64(-101), Int64(-19), Int64(-88)]
    } finally { // block id: 621
        [Int64(54), Int64(31), Int64(126), Int64(119), Int64(85), Int64(85), Int64(70), Int64(95), Int64(93), Int64(-30)]
    }[5])
}


main(): Int64 {
    try {
        var var_1694636776828_630 : Option<String> = (Float64(-20.0) as String);
        let var_1694636776828_634 : String = "Y_i.yO,h4C";
        var var_1694636776828_649 : Struct_1694636776828_218 = Struct_1694636776828_218();
        func_1694636776828_6(namedParam_1694636776828_7 : (var_1694636776828_630 ?? var_1694636776828_634), namedParam_1694636776828_10 : try { // block id: 639
            UInt16(155);
            if (var_1694636776828_547) { [Int32(-81), Int32(-28), Int32(31), Int32(-2), Int32(-89), Int32(-45), Int32(-21), Int32(-56), Int32(-16), Int32(-78)] } else { [Int32(97), Int32(35), Int32(23), Int32(-15), Int32(94), Int32(109), Int32(14), Int32(-78), Int32(-77), Int32(-52)] } 
        } finally { // block id: 645
            if (false) { var_1694636776828_649 } else { var_1694636776828_649 } ;
            var var_1694636776828_653 : Unit = ();
            var_1694636776828_653;
            [Int32(-89), Int32(80), Int32(36), Int32(17), Int32(-52), Int32(15), Int32(-54), Int32(91), Int32(-31), Int32(-17)]
        }[8], namedParam_1694636776828_11 : Int64(18))
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var_1694636776828_442*var_1694636776828_442), 64)
        crccheck.updateBuffer(UInt64(var_1694636776828_581*var_1694636776828_581), 64)
        crccheck.updateBuffer(UInt64(var_1694636776828_612*var_1694636776828_612), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Int32 {
        var i = 0
        var res = ""
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
        if ( res == "10201470477777777777777777776225215404625" ){
            return 0
        }
        return 1
    }
}
extend Struct_1694636776828_46 {

}

