/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output

public let var6 : Unit = ()
let var39 : Bool = (Float32(-2.0) is Unit)
public var var43 : ?Float32 = (UInt8(UInt8(Int8(55))) as Float32)
let var110 : Float32 = Float32(Float32(28.0))
public let var116 : Float32 = Float32(Float32(88.0))
public let var130 : Float32 = Float32(Float32(-14.0))
public var var158 : ?Float32 = Option<Float32>.None
var var194 : UInt16 = UInt16(133)
public var var198 : (UInt16, Float32, Int8, UInt16, Int8) = (UInt16(20), Float32(Float32(89.0)), Int8(24), UInt16(Int16(Int8(68))), Int8(-43))
public var var300 : Int8 = Int8(-2)
public var var440 : ?(UInt16, (UInt16, Float32, Int8, UInt16, Int8), UInt64, Int16, Unit, Int32, Range<Int16>, Range<Int8>) = Option<(UInt16, (UInt16, Float32, Int8, UInt16, Int8), UInt64, Int16, Unit, Int32, Range<Int16>, Range<Int8>)>.None
public var var459 : (Int64, UInt32, Int64, Range<Int8>, Float32, UInt16) = (Int64(Int64(UInt32(Int16(22)))), UInt32(UInt16(14)), 56, ((Int8(-41)&127)..=(Int8(UInt8(254))&127):(((-104)|1))), Float32(Float32(Float32(53.0))), UInt16(146))
var var481 : UInt32 = UInt32(144)
public var var577 : Float64 = 60.0
var var812 : (UInt16, (UInt16, Float32, Int8, UInt16, Int8), UInt64, Int16, Unit, Int32, Range<Int16>, Range<Int8>) = (UInt16(141), (UInt16(Int16(3)), Float32(-70.0), Int8(Int8(UInt8(242))), UInt16(214), Int8(74)), UInt64(180), Int16(UInt8(236)), (), Int32(UInt32(171)), ((Int16(45)&127)..(Int16(-84)&127):((Int64(UInt32(0))|1))), ((Int8(9)&127)..=(Int8(80)&127):((-74)|1)))
public let var856 : Int16 = Int16(Int16(-94))
public let var867 : Int64 = (-128)
let var874 : ?Array<Option<Float32>> = (Option<Float64>.None as Array<Option<Float32>>)
public var var900 : Int16 = Int16(UInt8(UInt8(Int8(Int8(-22)))))
var var941 : Range<Int32> = ((Int32(21)&127)..=(Int32(99)&127):((Int64(UInt32(UInt16(249)))|1)))
var var990 : Int32 = Int32(-102)
var var1061 : Bool = ((UInt16(UInt8(177)), (([(-102), 61, 73, 68, 56, (-98), (-119), 101, (-67), 9], r'e', (), ((88&127)..((-45)&127):((-26)|1)), [(), (), (), (), (), (), (), (), (), ()], ((UInt8(191)&127)..=(UInt8(204)&127):(((-18)|1))), ()) as Unit), Int32(UInt16(94)), (UInt8(90), [(-15), (-64), 99, 88, (-77), 43, 84, (-11), 90, 25]), ()) is Float32)
public var var1246 : (Float64, Array<Range<Int8>>, Range<Int16>, Array<Unit>, (UInt8, Array<Int64>), Bool) = (8.0, [((Int8(-30)&127)..(Int8(-5)&127):(57|1)), ((Int8(51)&127)..(Int8(2)&127):(29|1)), ((Int8(-68)&127)..=(Int8(11)&127):(8|1)), ((Int8(94)&127)..=(Int8(-111)&127):(101|1)), ((Int8(50)&127)..=(Int8(13)&127):(98|1)), ((Int8(-100)&127)..=(Int8(20)&127):((-87)|1)), ((Int8(96)&127)..(Int8(67)&127):(26|1)), ((Int8(-90)&127)..(Int8(80)&127):((-37)|1)), ((Int8(-44)&127)..=(Int8(-18)&127):(49|1)), ((Int8(66)&127)..=(Int8(-48)&127):(67|1))], ((Int16(-97)&127)..=(Int16(-111)&127):(((-6)|1))), [(), (), (), (), (), (), (), (), (), ()], (UInt8(49), [112, 103, Int64(Int8(92)), (-112), (-5), 45, 118, 48, Int64(14), (-77)]), ([(), (), (), (), (), (), (), (), (), ()] is Interface1213))
public let var1330 : Unit = ()
let var1372 : Range<Int8> = ((Int8(-67)&127)..=(Int8(77)&127):((Int64(UInt64(UInt32(161)))|1)))
let var1385 : (UInt64, Range<Int16>, (Array<Int64>, Rune, Unit, Range<Int64>, Array<Unit>, Range<UInt8>, Unit), String, Bool) = (UInt64(Int32(UInt16(164))), ((Int16(11)&127)..(Int16(54)&127):(126|1)), ([Int64(Int16(-6)), 42, 38, 26, Int64(Int8(69)), Int64(75), (-56), Int64(UInt64(227)), Int64(23), 8], r'v', (), ((Int64(Int8(-12))&127)..(Int64(Int8(-53))&127):((117|1))), [(), (), (), (), (), (), (), (), (), ()], ((UInt8(UInt8(203))&127)..(UInt8(UInt8(87))&127):((Int64(UInt8(23))|1))), ()), "cq\"YyE/0]`", ([[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]] is (String) -> Array<Float32>))
public var var1566 : (UInt64, Array<Unit>, (UInt16, Option<Unit>, Int32, (UInt8, Array<Int64>), Unit), Int8, (UInt16, (UInt16, Float32, Int8, UInt16, Int8), UInt64, Int16, Unit, Int32, Range<Int16>, Range<Int8>)) = (UInt64(UInt8(UInt8(85))), [(), (), (), (), (), (), (), (), (), ()], (UInt16(UInt8(235)), Option<Unit>.None, Int32(Int16(UInt8(53))), (UInt8(120), [53, (-20), 110, 26, 19, 68, (-61), 45, (-33), (-46)]), ()), Int8(UInt8(69)), (UInt16(104), (UInt16(Int16(-70)), Float32(Float32(-126.0)), Int8(-7), UInt16(247), Int8(78)), UInt64(UInt16(UInt16(250))), Int16(28), (), Int32(UInt16(58)), ((Int16(4)&127)..=(Int16(-118)&127):(43|1)), ((Int8(-91)&127)..(Int8(11)&127):(8|1))))
public var var1753 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
let var1962 : Int16 = Int16(-88)
public let var1982 : Aggregate1668<Range<UInt64>, Option<Class1210>> = Aggregate1668<Range<UInt64>, Option<Class1210>>()
let var2161 : UInt8 = UInt8(191)
public var var2232 : Int32 = Int32(-112)
public var var2241 : (Range<UInt8>, Range<Int64>, Range<UInt8>) = (((UInt8(76)&127)..(UInt8(27)&127):((Int64(UInt32(UInt8(12)))|1))), ((76&127)..=((-111)&127):((47|1))), ((UInt8(UInt8(193))&127)..(UInt8(Int8(8))&127):((Int64(Int8(40))|1))))
let var2373 : Class1210 = Class1210()
public var var2407 : Bool = false
public var var2489 : UInt8 = UInt8(UInt8(UInt8(140)))
var var2587 : ?Int16 = Option<Int16>.None
public var var2629 : Int16 = Int16(82)
var var2671 : ?Unit = Option<Unit>.None
var var2773 : Range<Int64> = ((100&127)..(Int64(Int64(UInt16(60)))&127):((Int64(Int8(Int8(UInt8(169))))|1)))
let var2801 : UInt64 = UInt64(12)
public var var2805 : (UInt16, Option<Unit>, Int32, (UInt8, Array<Int64>), Unit) = (UInt16(UInt16(70)), Option<Unit>.None, Int32(Int16(UInt8(Int8(-41)))), (UInt8(171), [Int64(UInt32(2)), Int64(Int16(-56)), 59, 74, 80, Int64(Int8(65)), 97, Int64(Int16(-12)), 80, Int64(UInt16(127))]), ())
let var3160 : Unit = ()
var var3181 : Int64 = Int64(Int8(Int8(64)))
let var3231 : Array<Range<Int8>> = Array<Range<Int8>>(10){ i => ((Int8(-89)&127)..=(Int8(Int8(Int8(97)))&127):((Int64(Int64(Int8(88)))|1))) }
let var3268 : Option<Range<Int16>> = Option<Range<Int16>>.None
public var var3330 : Unit = ()


public func func50(param51 : Bool) : Float32 { // block id: 52
    var var71 : ?Array<Option<Float32>> = Option<Array<Option<Float32>>>.Some([Option<Float32>.None, Option<Float32>.Some(Float32(-98.0)), (UInt64(UInt32(32)) as Float32), (() as Float32), Option<Float32>.Some(Float32(Float32(-127.0))), ((((Int32(-92)&127)..(Int32(-112)&127):((111|1))) as Array<Option<Float32>>) as Float32), Option<Float32>.Some(Float32(Float32(-56.0))), Option<Float32>.Some(Float32(Float32(-52.0))), (((UInt16(117)&127)..=(UInt16(43)&127):(82|1)) as Float32), (UInt32(UInt16(53)) as Float32)]);
    var var134 : ?Float32 = (((Int8(-76)&127)..(Int8(-98)&127):((-98)|1)) as Float32);
    if (false) { (var71 ?? [var43, Option<Float32>.None, Option<Float32>.None, Option<Float32>.Some(Float32(-26.0)), Option<Float32>.Some(var110), var43, Option<Float32>.Some(var116), Option<Float32>.Some(Float32(-93.0)), Option<Float32>.None, var43]) } else { (if (var39) { [var43, Option<Float32>.None, Option<Float32>.Some(var130), var134, var134, Option<Float32>.None, var134, var43, Option<Float32>.Some(Float32(-86.0)), Option<Float32>.Some(var130)] } else { [Option<Float32>.Some(var110), Option<Float32>.None, Option<Float32>.None, Option<Float32>.None, var134, Option<Float32>.Some(var116), var43, var134, var43, var158] } ) } [9];
    let var168 : Int64 = (-36);
    var var171 : UInt32 = UInt32(95);
    var var180 : UInt16 = UInt16(UInt8(UInt8(67)));
    match ((var168, var171, var168, ((Int8(-8)&127)..(Int8(-54)&127):(((-10)|1))), Float32(-27.0), var180)[3]) {
        case _ => 
            if (var39) { (var180, var116, Int8(44), var194, Int8(114)) } else { var198 } 
        
    }[1]
}




public func func455(param456 : UInt32) : (Int64, UInt32, Int64, Range<Int8>, Float32, UInt16) { // block id: 457
    var459
}


private func func566(param567 : String) : Range<Int8> { // block id: 568
    let var592 : (Range<Int8>, (UInt16, Float32, Int8, UInt16, Int8)) = (((Int8(UInt8(UInt8(44)))&127)..(Int8(UInt8(UInt8(238)))&127):((Int64(Int32(Int8(25)))|1))), (UInt16(131), Float32(-42.0), Int8(-2), UInt16(UInt8(Int8(-29))), Int8(84)));
    let var614 : Range<Int32> = ((Int32(41)&127)..(Int32(98)&127):(63|1));
    let var625 : (UInt8, Array<Int64>) = (UInt8(Int8(Int8(UInt8(30)))), [(-116), Int64(Int8(21)), Int64(UInt8(Int8(2))), 25, (-102), Int64(UInt8(82)), Int64(2), Int64((-109)), Int64(UInt32(222)), Int64(UInt32(110))]);
    func func580(param581 : Int64, optionalParam582 ! : Range<Int16> = ((Int16(69)&127)..(Int16(-58)&127):((Int64(UInt16(143))|1)))) : Float64 { // block id: 588
        var592[0];
        var614;
        let var680 : ?Int64 = Option<Int64>.None;
        ((var625[1] as Float64) ?? match (Option<Float64>.Some(69.0)) {
            case caseVar657 => 
                var577
            
            case _ : UInt64 => 
                var var667 : Range<Int8> = ((Int8(-50)&127)..=(Int8(13)&127):((Int64(Int8(UInt8(19)))|1)));
                if (false) { (var667, var198) } else { var592 } ;
                (-96.0)
            
            case _ => 
                var680;
                var577
            
        } - if (var39) { // block id: 685
            ();
            (-123.0)
        } else { // block id: 688
            14.0
        })
    }
;
    func func571(namedParam572 ! : Int64, namedParam573 ! : Option<(UInt16, (UInt16, Float32, Int8, UInt16, Int8), UInt64, Int16, Unit, Int32, Range<Int16>, Range<Int8>)>) : Option<Unit> { // block id: 574
        let var695 : Int32 = Int32(-107);
        var var708 : Int16 = Int16(-64);
        var577 /= Float64((Int32(func580(match {
            case true => 
            var695 >> ((Int32(116)) & 7);
            namedParam572
            case _ => 
            var592;
            namedParam572 * 91
        }, optionalParam582 : if (var39) { ((var708&127)..(Int16(111)&127):((namedParam572|1))) } else { ((Int16(-88)&127)..(Int16(-39)&127):((-89)|1)) } ))) | 1);
        var var720 : (UInt64, Array<Unit>, (UInt16, Option<Unit>, Int32, (UInt8, Array<Int64>), Unit), Int8, (UInt16, (UInt16, Float32, Int8, UInt16, Int8), UInt64, Int16, Unit, Int32, Range<Int16>, Range<Int8>)) = (UInt64(208), [(), (), (), (), (), (), (), (), (), ()], (UInt16(199), (((Int16(36)&127)..=(Int16(-111)&127):(9|1)) as Unit), Int32(Int8(-50)), (UInt8(Int8(-117)), [(-120), 85, 80, 59, (-19), 79, 7, (-80), 96, (-122)]), ()), Int8(UInt8(UInt8(87))), (UInt16(UInt16(139)), (UInt16(192), Float32(Float32(-74.0)), Int8(-78), UInt16(Int16(80)), Int8(UInt8(189))), UInt64(UInt16(Int16(28))), Int16(36), (), Int32(-113), ((Int16(-17)&127)..=(Int16(UInt16(222))&127):((Int64(UInt8(141))|1))), ((Int8(-40)&127)..(Int8(-33)&127):((-23)|1))));
        try { // block id: 718
            var720
        } finally { // block id: 783
            ();
            ();
            var var789 : Array<Unit> = Array<Unit>(10){ i => () };
            let var804 : ?Unit = ([Float32(-4.0), Float32(45.0), Float32(-37.0), Float32(1.0), Float32(52.0), Float32(-14.0), Float32(10.0), Float32(21.0), Float32(-64.0), Float32(108.0)] as Unit);
            (UInt64(111), var789, (var194, var804, var695, var625, ()), var300, var812)
        }[2][1]
    }
;
    var var861 : Int32 = Int32(43);
    (func571(namedParam572 : (Option<Int64>.None ?? (-18)), namedParam573 : try { // block id: 842
        Option<(UInt16, (UInt16, Float32, Int8, UInt16, Int8), UInt64, Int16, Unit, Int32, Range<Int16>, Range<Int8>)>.None
    } catch (_) { // block id: 844
        let var852 : UInt64 = UInt64(Int16(-33));
        var var870 : Range<Int8> = ((Int8(21)&127)..=(Int8(49)&127):((-73)|1));
        if (var39) { Option<(UInt16, (UInt16, Float32, Int8, UInt16, Int8), UInt64, Int16, Unit, Int32, Range<Int16>, Range<Int8>)>.Some((var194, var198, var852, var856, (), var861, ((var856&127)..(var856&127):((var867|1))), var870)) } else { var440 } ;
        var874;
        Option<(UInt16, (UInt16, Float32, Int8, UInt16, Int8), UInt64, Int16, Unit, Int32, Range<Int16>, Range<Int8>)>.None
    } finally { // block id: 878
        var6;
        var var883 : Range<Int64> = ((86&127)..((-84)&127):((-58)|1));
        if (true) { var883 } else { ((var867&127)..(99&127):((var867|1))) } ;
        var440
    }) ?? try (resource = Class1210()) { // block id: 891
        var300 -= var300;
        ###"9VVnz7e6-e"###;
        ()
    } finally { // block id: 897
        var900 ^= var856;
        var6;
        ()
    });
    ((Int8(78)&127)..=(Int8(-26)&127):(74|1))
}

private func func522(param523 : (Bool) -> Float32) : Range<Int8> { // block id: 526
    func func530(optionalParam531 ! : String = "\"3j|AQDpuk") : Array<Float32> { // block id: 533
        [Float32(-2.0), Float32(-18.0), Float32(-96.0), Float32(-60.0), Float32(85.0), Float32(-41.0), Float32(-113.0), Float32(116.0), Float32(-24.0), Float32(-58.0)]
    }
;
    func530()[2];
    let var542 : (Array<Int64>, Rune, Unit, Range<Int64>, Array<Unit>, Range<UInt8>, Unit) = ([(-87), (-77), 107, (-12), (-111), (-23), (-124), 90, (-35), 28], r'W', (), (((-41)&127)..=(1&127):(((-30)|1))), [(), (), (), (), (), (), (), (), (), ()], ((UInt8(60)&127)..=(UInt8(79)&127):(126|1)), ());
    let var911 : (String) -> Range<Int8> = { lambdaParameter914 : String => ((Int8(65)&127)..=(Int8(-117)&127):((29|1))) };
    let var987 : ?Unit = Option<Unit>.None;
    let var993 : (UInt8, Array<Int64>) = (UInt8(174), [Int64(Int64((-15))), 69, Int64(UInt32(157)), Int64(UInt64(174)), Int64(Int16(Int16(54))), (-57), (-57), (-96), Int64(Int16(50)), Int64(UInt8(UInt8(154)))]);
    try { // block id: 537
        (((-22)&127)..(107&127):((-69)|1));
        var542[4];
        "}E&ER-g1eb"|>var911
    } catch (_) { // block id: 921
        let var924 : ?Int64 = Option<Int64>.Some(Int64(UInt8(244)));
        var var962 : (UInt16, Option<Unit>, Int32, (UInt8, Array<Int64>), Unit) = (UInt16(211), Option<Unit>.None, Int32(17), (UInt8(218), [Int64(UInt16(18)), 70, 62, 100, (-57), Int64(Int16(104)), Int64(UInt64(124)), 5, 53, (-45)]), ());
        match (var924) {
            case _ => 
                ((Int32(84)&127)..=(Int32(90)&127):((var867|1)))
            
            case _ : String => 
                if (true) { var941 } else { ((Int32(24)&127)..=(Int32(-72)&127):(72|1)) } 
            
            case _ : Range<Int8> => 
                var6;
                if (true) { ((Int32(29)&127)..(Int32(26)&127):(25|1)) } else { var941 } 
            
            case _ => 
                if (var39) { var962 } else { (UInt16(98), var987, var990, var993, var6) } ;
                let var1018 : UInt64 = UInt64(Int8(UInt8(Int8(UInt8(27)))));
                var1018;
                ((var990&127)..(var990&127):((var867|1)))
            
        };
        var var1031 : Array<Range<Int8>> = [((Int8(-10)&127)..(Int8(-75)&127):((-88)|1)), ((Int8(-8)&127)..=(Int8(-124)&127):((-107)|1)), ((Int8(-46)&127)..=(Int8(117)&127):((-112)|1)), ((Int8(-9)&127)..(Int8(-49)&127):((-7)|1)), ((Int8(-49)&127)..=(Int8(-117)&127):((-94)|1)), ((Int8(-111)&127)..=(Int8(-19)&127):((-18)|1)), ((Int8(-80)&127)..(Int8(0)&127):(24|1)), ((Int8(66)&127)..(Int8(60)&127):(95|1)), ((Int8(-66)&127)..(Int8(-22)&127):(58|1)), ((Int8(50)&127)..=(Int8(2)&127):((-40)|1))];
        var1031[1]
    }
}

public func func1046(param51 : Bool) : Float32 { // block id: 52
    var var71 : ?Array<Option<Float32>> = Option<Array<Option<Float32>>>.Some([Option<Float32>.None, Option<Float32>.Some(Float32(-98.0)), (UInt64(UInt32(32)) as Float32), (() as Float32), Option<Float32>.Some(Float32(Float32(-127.0))), ((((Int32(-92)&127)..(Int32(-112)&127):((111|1))) as Array<Option<Float32>>) as Float32), Option<Float32>.Some(Float32(Float32(-56.0))), Option<Float32>.Some(Float32(Float32(-52.0))), (((UInt16(117)&127)..=(UInt16(43)&127):(82|1)) as Float32), (UInt32(UInt16(53)) as Float32)]);
    var var134 : ?Float32 = (((Int8(-76)&127)..(Int8(-98)&127):((-98)|1)) as Float32);
    if (false) { (var71 ?? [var43, Option<Float32>.None, Option<Float32>.None, Option<Float32>.Some(Float32(-26.0)), Option<Float32>.Some(var110), var43, Option<Float32>.Some(var116), Option<Float32>.Some(Float32(-93.0)), Option<Float32>.None, var43]) } else { (if (var39) { [var43, Option<Float32>.None, Option<Float32>.Some(var130), var134, var134, Option<Float32>.None, var134, var43, Option<Float32>.Some(Float32(-86.0)), Option<Float32>.Some(var130)] } else { [Option<Float32>.Some(var110), Option<Float32>.None, Option<Float32>.None, Option<Float32>.None, var134, Option<Float32>.Some(var116), var43, var134, var43, var158] } ) } [9];
    let var168 : Int64 = (-36);
    var var171 : UInt32 = UInt32(95);
    var var180 : UInt16 = UInt16(UInt8(UInt8(67)));
    match ((var168, var171, var168, ((Int8(-8)&127)..(Int8(-54)&127):(((-10)|1))), Float32(-27.0), var180)[3]) {
        case _ => 
            if (var39) { (var180, var116, Int8(44), var194, Int8(114)) } else { var198 } 
        
    }[1]
}

public func func381<T0>(param382 : Range<UInt32>) : Int64 { // block id: 383
    let var410 : (UInt16, (UInt16, Float32, Int8, UInt16, Int8), UInt64, Int16, Unit, Int32, Range<Int16>, Range<Int8>) = (UInt16(204), (UInt16(93), Float32(Float32(54.0)), Int8(Int8(Int8(49))), UInt16(189), Int8(29)), UInt64(UInt16(121)), Int16(Int16(UInt16(UInt16(122)))), (), Int32(79), ((Int16(UInt8(78))&127)..=(Int16(UInt16(UInt16(165)))&127):(((-16)|1))), ((Int8(-43)&127)..=(Int8(-124)&127):((-27)|1)));
    func func386(optionalParam387 ! : Range<Int32> = ((Int32(-21)&127)..(Int32(Int8(28))&127):((Int64(Int8(-14))|1))), namedParam394 ! : (Int64, UInt32, Int64, Range<Int8>, Float32, UInt16), namedParam395 ! : Option<Float32>, namedParam396 ! : Int16) : Range<Int16> { // block id: 397
        (try { // block id: 406
            ((UInt8(16)&127)..(UInt8(34)&127):(93|1));
            Option<(UInt16, (UInt16, Float32, Int8, UInt16, Int8), UInt64, Int16, Unit, Int32, Range<Int16>, Range<Int8>)>.Some(var410)
        } catch (_) { // block id: 438
            var440
        } finally { // block id: 442
            var440
        } ?? var410)[4];
        var var447 : Range<Int16> = ((Int16(7)&127)..=(Int16(Int8(-109))&127):((Int64(UInt16(27))|1)));
        var447
    }
;
    var var478 : (UInt32) -> (Int64, UInt32, Int64, Range<Int8>, Float32, UInt16) = func455;
    var var490 : Int16 = Int16(Int8(28));
    let var499 : Int32 = Int32(UInt8(Int8(Int8(UInt8(246)))));
    match (func386(namedParam394 : (var481|>var478), namedParam395 : if (true) { var43 } else { var43 } , namedParam396 : Int16(-88) >> ((var490) & 7))) {
        case caseVar495 : Option<Array<Option<Float32>>> => 
            var6;
            var499;
            var var508 : Range<Int64> = ((124&127)..(54&127):(37|1));
            if (var39) { var508 } else { var508 } 
        
        case _ => 
            let var516 : Int64 = Int64(UInt16(UInt8(226)));
            (((-95)&127)..=(var516&127):(((-95)|1)))
        
    };
    let var1035 : ((Bool) -> Float32) -> Range<Int8> = { lambdaParameter1038 : (Bool) -> Float32 => ((Int8(63)&127)..=(Int8(126)&127):((Int64(Int16(UInt8(48)))|1))) };
    func1046|>var1035;
    try { // block id: 1051
        var var1055 : ?Float32 = Option<Float32>.Some(Float32(16.0));
        if (true) { var1055 } else { Option<Float32>.None } ;
        if (var1061) { (var867, UInt32(121), 12, ((var300&127)..(Int8(-102)&127):(((-52)|1))), var116, UInt16(67)) } else { (var867, UInt32(122), var867, ((Int8(78)&127)..(Int8(69)&127):((75|1))), var110, var194) } 
    } catch (_) { // block id: 1134
        var459
    } finally { // block id: 1136
        (117, var481, 18, ((Int8(55)&127)..(Int8(55)&127):((-25)|1)), Float32(-51.0), UInt16(175))
    }[2]
}


public interface Interface1213 {
    static func func2058(namedParam2059 ! : (UInt32) -> (Int64, UInt32, Int64, Range<Int8>, Float32, UInt16), namedParam2062 ! : (Int64, UInt32, Int64, Range<Int8>, Float32, UInt16), namedParam2063 ! : (UInt16, Float32, Int8, UInt16, Int8)) : Class1210 { // block id: 2064
        let var2217 : (Option<(UInt16, (UInt16, Float32, Int8, UInt16, Int8), UInt64, Int16, Unit, Int32, Range<Int16>, Range<Int8>)>) -> (Array<Int64>, Rune, Unit, Range<Int64>, Array<Unit>, Range<UInt8>, Unit) = func2082;
        let var2288 : (Array<Int64>, Rune, Unit, Range<Int64>, Array<Unit>, Range<UInt8>, Unit) = ([43, Int64(Int32(-104)), 99, Int64(UInt8(Int8(-27))), (-82), (-104), 31, Int64(Int16(11)), Int64(Int32(-117)), (-73)], r'S', (), ((34&127)..=((-107)&127):(110|1)), [(), (), (), (), (), (), (), (), (), ()], ((UInt8(169)&127)..=(UInt8(UInt8(163))&127):((121|1))), ());
        var var2353 : Range<UInt8> = ((UInt8(43)&127)..(UInt8(134)&127):((-116)|1));
        let var2356 : Unit = ();
        if (if ((UInt8(137) is Int8)) { // block id: 2069
            true
        } else if (var1061) { // block id: 2072
            var1330;
            var39
        } else { // block id: 2075
            var6;
            Int32(63) ^ Int32(25);
            var39
        }) { (Option<(UInt16, (UInt16, Float32, Int8, UInt16, Int8), UInt64, Int16, Unit, Int32, Range<Int16>, Range<Int8>)>.Some((UInt16(163), (var194, Float32(-15.0), Int8(99), var194, Int8(-31)), UInt64(108), Int16(-22), var1330, var2232, ((Int16(114)&127)..(Int16(-100)&127):(((-127)|1))), ((Int8(-8)&127)..=(Int8(39)&127):(81|1))))|>var2217) } else { match (var2241) {
            case (_ : (Int64, UInt32, Int64, Range<Int8>, Float32, UInt16),_ : (Range<Int8>, (UInt16, Float32, Int8, UInt16, Int8)),caseVar2262) => 
                ();
                ([89, 45, 73, (-62), (-84), (-30), 37, (-77), 94, (-52)], r'F', var6, (((-53)&127)..((-127)&127):((-25)|1)), [(), (), (), (), (), (), (), (), (), ()], ((UInt8(242)&127)..(UInt8(75)&127):(((-91)|1))), ())
            
            case (_,caseVar2278 : (Range<UInt8>, Range<Int64>, Range<UInt8>),_ : (Int64, UInt32, Int64, Range<Int8>, Float32, UInt16)) => 
                ();
                ((var481&127)..(var481&127):((112|1)));
                var var2318 : Array<Int64> = [86, Int64(UInt32(146)), Int64(Int32(50)), Int64((-3)), 72, Int64(Int64(UInt16(Int16(-89)))), Int64(UInt32(194)), 22, Int64(Int8(43)), 97];
                if (var1061) { var2288 } else { (var2318, r'K', var6, (((-88)&127)..=((-15)&127):((-9)|1)), [var1330, var6, (), var6, var1330, var6, var1330, (), var1330, var1330], var2353, var2356) } 
            
            case _ => 
                (((-100)&127)..(111&127):((-80)|1));
                ();
                var2288
            
            case _ => 
                let var2368 : Bool = true;
                if (var2368) { var2288 } else { var2288 } 
            
        } } ;
        var2373
    }
;
    func func1993(param2054 : (Array<Int64>, Rune, Unit, Range<Int64>, Array<Unit>, Range<UInt8>, Unit)) : Bool { // block id: 2055
        let var2376 : (UInt32) -> (Int64, UInt32, Int64, Range<Int8>, Float32, UInt16) = func455;
        let var2380 : ?Int64 = (((UInt32(112)&127)..=(UInt32(176)&127):((-22)|1)) as Int64);
        let var2437 : Range<UInt64> = ((UInt64(12)&127)..(UInt64(154)&127):((-30)|1));
        func2058(namedParam2059 : var2376, namedParam2062 : match (var2380) {
            case caseVar2385 => 
                if (false) { (92, var481, (-95), ((Int8(-107)&127)..=(Int8(-73)&127):(116|1)), var116, var194) } else { var459 } 
            
            case caseVar2399 : (Range<UInt8>, Range<Int64>, Range<UInt8>) => 
                var459
            
            case _ => 
                if (var2407) { Option<Array<Option<Float32>>>.None } else { var874 } ;
                ((-64), UInt32(45), var867, ((Int8(-58)&127)..=(Int8(-51)&127):((var867|1))), Float32(-6.0), var194)
            
            case caseVar2423 => 
                var6;
                (38, var481, 11, var1372, Float32(61.0), var194)
            
            case _ => 
                ();
                var2437;
                var459
            
        }, namedParam2063 : var198).var2442
    }
;
    func func1993(param1994 : (UInt64, Array<Unit>, (UInt16, Option<Unit>, Int32, (UInt8, Array<Int64>), Unit), Int8, (UInt16, (UInt16, Float32, Int8, UInt16, Int8), UInt64, Int16, Unit, Int32, Range<Int16>, Range<Int8>)), param1995 : (Range<UInt32>) -> Int64, param1998 : Range<Int64>, namedParam1999 ! : String) : (Range<UInt8>, Range<Int64>, Range<UInt8>) { // block id: 2000
        let var2016 : Option<Array<Unit>> = ((UInt16(146), Float32(Float32(-116.0)), Int8(60), UInt16(UInt8(19)), Int8(96)) as Array<Unit>);
        var var2045 : UInt16 = UInt16(15);
        var var2445 : (Array<Int64>, Rune, Unit, Range<Int64>, Array<Unit>, Range<UInt8>, Unit) = ([108, (-69), 28, 79, (-59), (-94), 27, 21, 51, 53], r'q', (), (((-96)&127)..(Int64(Int8(4))&127):((Int64(UInt8(223))|1))), [(), (), (), (), (), (), (), (), (), ()], ((UInt8(UInt8(208))&127)..=(UInt8(Int8(Int8(-127)))&127):((118|1))), ());
        if (false) { (match (Option<Float64>.None) {
            case caseVar2012 => 
                Int32(40);
                var2016
            
            case _ => 
                var194 -= UInt16(71);
                false;
                Option<Array<Unit>>.Some(var1753)
            
        } ?? ((var1372, (var2045, Float32(122.0), var300, var194, var300))|>func2035)) } else { (if (func1993(var2445)) { (if (var1061) { [(), (), (), (), (), (), (), (), (), ()] } else { var1753 } ) } else { try { // block id: 2470
            var874;
            if (var2407) { [(), (), (), (), (), (), (), (), (), ()] } else { [(), var1330, var6, var1330, var6, (), var6, var1330, (), var6] } 
        } catch (_) { // block id: 2486
            var2489 &= var2489;
            var130;
            [(), (), (), (), (), (), (), (), (), ()]
        } finally { // block id: 2496
            [(), (), var1330, (), (), (), (), var6, (), var1330]
        } } ) } ;
        var var2515 : ?Int64 = (r'Y' as Int64);
        var var2579 : UInt64 = UInt64(110);
        let var2597 : Float64 = 110.0;
        var var2604 : (UInt8, Array<Int64>) = (UInt8(245), [107, (-9), Int64(Int32(66)), Int64(UInt8(178)), 62, (-1), (-1), Int64(Int32(UInt16(53))), Int64(UInt16(84)), (-80)]);
        var var2668 : (UInt32) -> (Int64, UInt32, Int64, Range<Int8>, Float32, UInt16) = func455;
        if (match (if (var1061) { Option<Int64>.Some(var867) } else { var2515 } ) {
            case caseVar2520 : Option<(UInt16, (UInt16, Float32, Int8, UInt16, Int8), UInt64, Int16, Unit, Int32, Range<Int16>, Range<Int8>)> => 
                var481 &= UInt32(121);
                let var2526 : ?Unit = ((UInt16(101), (UInt16(231), Float32(-57.0), Int8(Int8(-69)), UInt16(53), Int8(108)), UInt64(157), Int16(0), (), Int32(Int32(-121)), ((Int16(UInt16(82))&127)..(Int16(Int8(66))&127):((9|1))), ((Int8(Int8(54))&127)..=(Int8(70)&127):(((-115)|1)))) as Unit);
                var2526;
                false
            
            case _ => 
                ();
                var2407 && var1061
            
        }) { (var2373.var2564, var2373.var2569, UInt64(1) & var2579, (var2587 ?? var900), var6, if (true) { // block id: 2593
            var577 -= var2597;
            Int32(-118)
        } else { // block id: 2600
            if (var1061) { var2604 } else { var2604 } ;
            [Int16(95), Int16(33), Int16(29), Int16(38), Int16(34), Int16(-7), Int16(-25), Int16(116), Int16(-53), Int16(85)];
            Int32(93)
        }, ((Int16(-20)&127)..(var2629&127):(((-85)|1))), var1372) } else { (var2373.func2636(namedParam2637 : var481, namedParam2638 : [65, 71, 106, 90, 126, (-51), (-43), (-120), (-9), (-34)], namedParam2639 : var2668, namedParam2642 : var2671)) } ;
        let var2707 : ?Float32 = (([((UInt8(184)&127)..(UInt8(188)&127):(40|1)), ((UInt8(150)&127)..=(UInt8(227)&127):(99|1)), ((UInt8(59)&127)..(UInt8(94)&127):(82|1)), ((UInt8(110)&127)..(UInt8(36)&127):((-54)|1)), ((UInt8(45)&127)..(UInt8(21)&127):((-118)|1)), ((UInt8(239)&127)..(UInt8(42)&127):(65|1)), ((UInt8(195)&127)..=(UInt8(126)&127):((-76)|1)), ((UInt8(92)&127)..=(UInt8(99)&127):((-35)|1)), ((UInt8(95)&127)..(UInt8(253)&127):((-12)|1)), ((UInt8(186)&127)..=(UInt8(49)&127):((-108)|1))] as Array<Option<Float32>>) as Float32);
        match (match (try { // block id: 2676
                    var440
                } catch (_) { // block id: 2678
                    var440
                }) {
                case caseVar2682 => 
                    var6;
                    var1385;
                    var2241
                
                case _ : Array<Int64> => 
                    var var2692 : Range<UInt8> = ((UInt8(109)&127)..=(UInt8(70)&127):(66|1));
                    (var2692, (((-9)&127)..=((-65)&127):(76|1)), ((UInt8(45)&127)..(UInt8(55)&127):(110|1)))
                
                case _ => 
                    var2241
                
            }) {
            case _ => 
                Option<Array<Option<Float32>>>.Some([var43, Option<Float32>.Some(Float32(-119.0)), var2707, var158, var2707, var158, var2707, Option<Float32>.None, var158, var2707]);
                var1061 &&= var39;
                var var2725 : (Range<UInt8>, Range<Int64>, Range<UInt8>) = (((UInt8(UInt8(153))&127)..=(UInt8(UInt8(19))&127):((Int64(UInt64(UInt32(76)))|1))), ((72&127)..((-74)&127):(82|1)), ((UInt8(Int8(-48))&127)..(UInt8(Int8(UInt8(137)))&127):((Int64(Int16(UInt16(248)))|1))));
                if (false) { var2241 } else { var2725 } 
            
        }
    }
;
    func func2636(namedParam2637 ! : UInt32, namedParam2638 ! : Array<Int64>, namedParam2639 ! : (UInt32) -> (Int64, UInt32, Int64, Range<Int8>, Float32, UInt16), namedParam2642 ! : Option<Unit>) : (UInt16, (UInt16, Float32, Int8, UInt16, Int8), UInt64, Int16, Unit, Int32, Range<Int16>, Range<Int8>) 

}

public open class Class1210 <: Interface1213 & Resource {
    public init() { // block id: 1212

    }
;
    public var var2442 : Bool = false;
    var var2564 : UInt16 = UInt16(46);
    let var2569 : (UInt16, Float32, Int8, UInt16, Int8) = (UInt16(201), Float32(-120.0), Int8(46), UInt16(229), Int8(-67));
    public let var2647 : (UInt16, (UInt16, Float32, Int8, UInt16, Int8), UInt64, Int16, Unit, Int32, Range<Int16>, Range<Int8>) = (UInt16(10), (UInt16(213), Float32(0.0), Int8(-99), UInt16(196), Int8(-94)), UInt64(71), Int16(86), (), Int32(1), ((Int16(-66)&127)..(Int16(-41)&127):(1|1)), ((Int8(118)&127)..=(Int8(-90)&127):((15|1))));
    public open func func2636(namedParam2637 ! : UInt32, namedParam2638 ! : Array<Int64>, namedParam2639 ! : (UInt32) -> (Int64, UInt32, Int64, Range<Int8>, Float32, UInt16), namedParam2642 ! : Option<Unit>) : (UInt16, (UInt16, Float32, Int8, UInt16, Int8), UInt64, Int16, Unit, Int32, Range<Int16>, Range<Int8>) { // block id: 2643
        this.var2647
    }
;
    private static let var2757 : String = "]CX6j&L\"\"/";
    public static func func1976(param1977 : UInt16, param1978 : Range<Int64>) : String { // block id: 1979
        var1982.var1985;
        let var1990 : Class1210 = Class1210();
        let var2747 : (Range<UInt32>) -> Int64 = func381<Range<Int16>>;
        match (var1990.func1993(var1566, var2747, ((57&127)..(123&127):(104|1)), namedParam1999 : ###"~uhTSv;1wf"###)) {
            case _ => 
                var2232;
                ();
                var1330
            
        };
        var2757
    }
;
    let var3272 : Unit = ()
    public func isClosed(): Bool { return false }
    public func close(): Unit {}
}

public func func1515(param1516 : (UInt64, Array<Unit>, (UInt16, Option<Unit>, Int32, (UInt8, Array<Int64>), Unit), Int8, (UInt16, (UInt16, Float32, Int8, UInt16, Int8), UInt64, Int16, Unit, Int32, Range<Int16>, Range<Int8>))) : Array<Range<UInt8>> { // block id: 1517
    var var1521 : Array<Range<UInt8>> = [((UInt8(187)&127)..(UInt8(114)&127):((-64)|1)), ((UInt8(25)&127)..=(UInt8(9)&127):(36|1)), ((UInt8(188)&127)..=(UInt8(8)&127):(81|1)), ((UInt8(25)&127)..(UInt8(188)&127):((-7)|1)), ((UInt8(160)&127)..=(UInt8(183)&127):(28|1)), ((UInt8(36)&127)..(UInt8(208)&127):(12|1)), ((UInt8(18)&127)..=(UInt8(32)&127):((-12)|1)), ((UInt8(229)&127)..=(UInt8(234)&127):(39|1)), ((UInt8(200)&127)..(UInt8(67)&127):((-15)|1)), ((UInt8(249)&127)..=(UInt8(31)&127):((-87)|1))];
    func func1524(optionalParam1525 ! : Rune = r'Q', optionalParam1527 ! : Float32 = Float32(-105.0)) : Array<Range<UInt8>> { // block id: 1529
        if (true) { [((UInt8(210)&127)..=(UInt8(8)&127):(70|1)), ((UInt8(238)&127)..=(UInt8(69)&127):((-91)|1)), ((UInt8(187)&127)..(UInt8(225)&127):((-86)|1)), ((UInt8(60)&127)..(UInt8(5)&127):((-32)|1)), ((UInt8(26)&127)..(UInt8(21)&127):((-42)|1)), ((UInt8(253)&127)..=(UInt8(42)&127):(88|1)), ((UInt8(129)&127)..(UInt8(209)&127):((-74)|1)), ((UInt8(140)&127)..=(UInt8(12)&127):((-6)|1)), ((UInt8(208)&127)..=(UInt8(245)&127):(124|1)), ((UInt8(251)&127)..(UInt8(202)&127):(12|1))] } else { [((UInt8(15)&127)..=(UInt8(181)&127):((-118)|1)), ((UInt8(54)&127)..=(UInt8(209)&127):((-7)|1)), ((UInt8(147)&127)..=(UInt8(114)&127):(121|1)), ((UInt8(105)&127)..=(UInt8(169)&127):(44|1)), ((UInt8(244)&127)..(UInt8(98)&127):(27|1)), ((UInt8(163)&127)..=(UInt8(88)&127):(71|1)), ((UInt8(148)&127)..=(UInt8(131)&127):((-52)|1)), ((UInt8(22)&127)..(UInt8(30)&127):(11|1)), ((UInt8(102)&127)..(UInt8(188)&127):(13|1)), ((UInt8(82)&127)..=(UInt8(102)&127):(34|1))] } 
    }
;
    if (var1061) { var1521 } else { func1524(optionalParam1525 : r'b') } 
}

public func func1226(param1227 : Range<UInt8>) : Range<UInt8> { // block id: 1228
    var var1287 : Array<Unit> = Array<Unit>(10){ i => () };
    let var1318 : Unit = ();
    var var1361 : Unit = ();
    match (if (try { // block id: 1232
            var6;
            var var1235 : Bool = false;
            var1235
        } catch (_) { // block id: 1237
            var39
        } finally { // block id: 1239
            var6;
            ();
            var1061
        }) { var1246[3] } else { [var1287, [(), var6, var6, var6, var6, var6, (), var6, var6, ()], [(), var6, (), var6, (), (), var1318, var6, var6, ()], var1287, [(), var6, var1318, (), var1330, (), var1318, var1318, var1318, var6], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), var1318, (), (), (), var1318, var6], [(), (), var6, var1330, var1330, var1318, (), (), (), var1361], var1287][6] } ) {
        case _ => 
            var43
        
        case _ => 
            var1372;
            var43
        
    };
    var var1492 : UInt64 = UInt64(UInt8(Int8(16)));
    match (if (var1385[4]) { var1287 } else { [(), (), (), (), (), (), (), (), (), ()] } ) {
        case _ : Interface1213 => 
            var var1486 : UInt8 = UInt8(11);
            var1486 ^= UInt8(141);
            var1330;
            var1492 %= ((var1492) | 1)
        
        case caseVar1499 => 
            var var1503 : Int16 = Int16(Int16(UInt16(198)));
            var1503++
        
        case _ => 
            var194 ^= var194
        
    };
    let var1543 : UInt16 = UInt16(122);
    let var1546 : ?Unit = Option<Unit>.None;
    var var1558 : UInt64 = UInt64(186);
    (if (var39) { (UInt64(106), [(), (), (), (), (), (), (), (), (), ()], (var1543, var1546, Int32(-64), (UInt8(207), [83, 60, 87, (-117), 102, (-11), (-81), (-37), 16, (-76)]), var1330), Int8(15), (var1543, var198, var1558, var856, (), var990, ((Int16(56)&127)..(Int16(-11)&127):((-35)|1)), var1372)) } else { var1566 } |>func1515)[2]
}


public struct Aggregate1668<T0, T1> {
    public init() { // block id: 1670

    }
;
    public static var var1815 : Array<Array<Unit>> = Array<Array<Unit>>(10){ i => [(), (), (), (), (), (), (), (), (), ()] };
    private static let var1894 : UInt64 = UInt64(43);
    private static let var1913 : Aggregate1668<Range<UInt64>, Option<Class1210>> = Aggregate1668<Range<UInt64>, Option<Class1210>>();
    let var1916 : Unit = ();
    public static func func1902(namedParam1903 ! : Array<Option<Float32>>, namedParam1904 ! : String, optionalParam1905 ! : UInt64 = UInt64(UInt32(UInt16(68))), namedParam1909 ! : UInt64) : Unit { // block id: 1910
        var1913.var1916
    }
;
    static var var1919 : Array<Option<Float32>> = [Option<Float32>.None, Option<Float32>.None, Option<Float32>.None, Option<Float32>.None, Option<Float32>.None, Option<Float32>.None, Option<Float32>.None, Option<Float32>.None, Option<Float32>.None, Option<Float32>.None];
    let var1985 : Int8 = Int8(60);
    static func func1673(optionalParam1674 ! : Option<Class1210> = ([((Int8(Int8(84))&127)..=(Int8(-88)&127):((Int64(UInt64(176))|1))), ((Int8(-36)&127)..=(Int8(60)&127):(109|1)), ((Int8(-82)&127)..(Int8(48)&127):((101|1))), ((Int8(-94)&127)..=(Int8(98)&127):((45|1))), ((Int8(UInt8(110))&127)..=(Int8(-79)&127):(((-29)|1))), ((Int8(-7)&127)..=(Int8(70)&127):(68|1)), ((Int8(UInt8(147))&127)..=(Int8(122)&127):((81|1))), ((Int8(115)&127)..(Int8(UInt8(169))&127):((Int64(Int32(66))|1))), ((Int8(Int8(-12))&127)..=(Int8(-79)&127):(((-46)|1))), ((Int8(99)&127)..=(Int8(-8)&127):(76|1))] as Class1210), optionalParam1715 ! : (String) -> Range<Int8> = { lambdaParameter1718 : String => ((Int8(25)&127)..=(Int8(-86)&127):((Int64(UInt64(48))|1))) }, namedParam1727 ! : (UInt64, Array<Unit>, (UInt16, Option<Unit>, Int32, (UInt8, Array<Int64>), Unit), Int8, (UInt16, (UInt16, Float32, Int8, UInt16, Int8), UInt64, Int16, Unit, Int32, Range<Int16>, Range<Int8>)), optionalParam1728 ! : (UInt32) -> (Int64, UInt32, Int64, Range<Int8>, Float32, UInt16) = { lambdaParameter1731 : UInt32 => (Int64(48), UInt32(127), (-8), ((Int8(-78)&127)..=(Int8(-54)&127):((Int64(UInt16(61))|1))), Float32(Float32(33.0)), UInt16(Int16(UInt16(52)))) }) : Unit { // block id: 1750
        let var1775 : Range<UInt8> = ((UInt8(215)&127)..(UInt8(Int8(UInt8(60)))&127):(((-2)|1)));
        var var1785 : UInt8 = UInt8(89);
        var var1812 : Array<Array<Unit>> = [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]];
        match (var1753) {
            case caseVar1767 : Range<UInt16> => 
                ();
                let var1793 : Int64 = (-88);
                [((UInt8(230)&127)..=(UInt8(241)&127):((-48)|1)), ((UInt8(162)&127)..(UInt8(207)&127):(102|1)), ((UInt8(185)&127)..(UInt8(242)&127):((-79)|1)), var1775, ((UInt8(87)&127)..(var1785&127):(((-116)|1))), ((UInt8(186)&127)..(UInt8(90)&127):((-72)|1)), ((UInt8(18)&127)..(var1785&127):((var1793|1))), ((UInt8(45)&127)..=(UInt8(87)&127):(((-15)|1))), var1775, ((var1785&127)..=(UInt8(117)&127):((100|1)))];
                [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]]
            
            case caseVar1807 => 
                if (true) { var1812 } else { var1815 } ;
                [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]]
            
            case _ : Option<(UInt16, (UInt16, Float32, Int8, UInt16, Int8), UInt64, Int16, Unit, Int32, Range<Int16>, Range<Int8>)> => 
                UInt64(250) * var1894;
                var1815
            
            case _ => 
                [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]]
            
        };
        ();
        func1902(namedParam1903 : var1919, namedParam1904 : (UInt64(Int8(-42))|>func1932), optionalParam1905 : UInt64(208), namedParam1909 : (Option<UInt64>.None ?? UInt64(150) >> ((var1894) & 7)))
    }

}


public func func2035(param2036 : (Range<Int8>, (UInt16, Float32, Int8, UInt16, Int8))) : Array<Unit> { // block id: 2037
    ();
    [(), (), (), (), (), (), (), (), (), ()]
}


public func func2082(param2083 : Option<(UInt16, (UInt16, Float32, Int8, UInt16, Int8), UInt64, Int16, Unit, Int32, Range<Int16>, Range<Int8>)>) : (Array<Int64>, Rune, Unit, Range<Int64>, Array<Unit>, Range<UInt8>, Unit) { // block id: 2084
    let var2102 : Array<Int64> = [(-48), 6, (-3), (-73), (-75), (-113), (-61), (-119), 9, (-105)];
    var var2171 : ?(Array<Int64>, Rune, Unit, Range<Int64>, Array<Unit>, Range<UInt8>, Unit) = (true as (Array<Int64>, Rune, Unit, Range<Int64>, Array<Unit>, Range<UInt8>, Unit));
    var var2176 : (Array<Int64>, Rune, Unit, Range<Int64>, Array<Unit>, Range<UInt8>, Unit) = ([(-101), (-67), Int64(Int8(UInt8(190))), Int64(UInt32(152)), (-108), Int64(UInt16(Int16(108))), Int64(Int16(UInt8(65))), 92, Int64(Int16(UInt16(136))), Int64(Int8(-31))], r'e', (), (((-53)&127)..=((-110)&127):(54|1)), [(), (), (), (), (), (), (), (), (), ()], ((UInt8(34)&127)..=(UInt8(86)&127):(35|1)), ());
    (match ((((Int16(74)&127)..(var856&127):((var867|1))) as Float64)) {
        case _ : (Float64, Array<Range<Int8>>, Range<Int16>, Array<Unit>, (UInt8, Array<Int64>), Bool) => 
            Option<(Array<Int64>, Rune, Unit, Range<Int64>, Array<Unit>, Range<UInt8>, Unit)>.Some((var2102, r'H', var6, (((-25)&127)..(11&127):((-79)|1)), [(), var6, var6, var1330, (), (), var1330, var6, (), ()], ((UInt8(162)&127)..=(UInt8(217)&127):(64|1)), var1330))
        
        case caseVar2122 : Int16 => 
            Option<Class1210>.Some(Class1210());
            UInt32(202) >> ((UInt32(1)) & 7);
            let var2132 : ?(Array<Int64>, Rune, Unit, Range<Int64>, Array<Unit>, Range<UInt8>, Unit) = (UInt64(7) as (Array<Int64>, Rune, Unit, Range<Int64>, Array<Unit>, Range<UInt8>, Unit));
            if (true) { var2132 } else { Option<(Array<Int64>, Rune, Unit, Range<Int64>, Array<Unit>, Range<UInt8>, Unit)>.None } 
        
        case _ : Option<Int64> => 
            ();
            var var2152 : Int64 = 12;
            Option<(Array<Int64>, Rune, Unit, Range<Int64>, Array<Unit>, Range<UInt8>, Unit)>.Some(([var867, (-123), (-23), 103, (-1), var867, (-94), 73, var2152, 24], r'O', (), (((-52)&127)..((-64)&127):((-121)|1)), var1753, ((var2161&127)..(UInt8(93)&127):((var2152|1))), var6))
        
        case _ => 
            if (var39) { var2171 } else { Option<(Array<Int64>, Rune, Unit, Range<Int64>, Array<Unit>, Range<UInt8>, Unit)>.Some(var2176) } 
        
    } ?? var2176)
}



private func func1932(param1933 : UInt64) : String { // block id: 1934
    UInt8(UInt8(64));
    var var1939 : (UInt32) -> (Int64, UInt32, Int64, Range<Int8>, Float32, UInt16) = { lambdaParameter1942 : UInt32 => (Int64(UInt32(124)), UInt32(Int16(Int16(-128))), 15, ((Int8(110)&127)..=(Int8(92)&127):(82|1)), Float32(Float32(Float32(-121.0))), UInt16(99)) };
    UInt32([Int16(-84), var1962, Int16(-84), Int16(105), var900, Int16(-33), Int16(87), Int16(-64), Int16(-55), var1962][6])|>var1939;
    var var2768 : ?Range<Int64> = (Option<Int64>.Some(84) as Range<Int64>);
    Class1210.func1976(var2373.var2564, (var2768 ?? var2773))
}


private func func1662(param1663 : (String) -> Range<Int8>) : Option<Class1210> { // block id: 1666
    Aggregate1668<Range<UInt64>, Option<Class1210>>.func1673(optionalParam1715 : param1663, namedParam1727 : if (var2407) { (var2801, var1753, var2805, var300, var812) } else { var1566 } );
    let var2843 : ?Class1210 = Option<Class1210>.None;
    try { // block id: 2837
        var2671.getOrThrow();
        if (true) { var2843 } else { var2843 } 
    } finally { // block id: 2846
        var loopTimeVar2855 : Int64 = 0;
        while ((var2407) && loopTimeVar2855 < 100 ) {
            loopTimeVar2855++;
            ();
            var2232 ^= var2232
        };
        var var2865 : (Range<Int8>, (UInt16, Float32, Int8, UInt16, Int8)) = (((Int8(UInt8(UInt8(144)))&127)..(Int8(UInt8(Int8(-82)))&127):((Int64((-17))|1))), (UInt16(UInt8(UInt8(98))), Float32(104.0), Int8(Int8(76)), UInt16(Int8(Int8(-81))), Int8(-114)));
        if (var1061) { (((var300&127)..(var300&127):((65|1))), var198) } else { var2865 } ;
        var var2889 : Array<Option<Float32>> = Array<Option<Float32>>(10){ i => (([((UInt8(152)&127)..(UInt8(205)&127):(47|1)), ((UInt8(54)&127)..=(UInt8(6)&127):(((-109)|1))), ((UInt8(69)&127)..(UInt8(241)&127):(44|1)), ((UInt8(152)&127)..=(UInt8(79)&127):((50|1))), ((UInt8(242)&127)..=(UInt8(188)&127):(37|1)), ((UInt8(246)&127)..=(UInt8(158)&127):(((-98)|1))), ((UInt8(77)&127)..=(UInt8(239)&127):((78|1))), ((UInt8(135)&127)..(UInt8(93)&127):(((-119)|1))), ((UInt8(103)&127)..(UInt8(76)&127):((84|1))), ((UInt8(54)&127)..(UInt8(39)&127):((-66)|1))] as Array<Option<Float32>>) as Float32) };
        (var2889 as Class1210)
    }
}



main(): Int64 {
    try {
        var6;
        (try { // block id: 14
            Option<Float32>.None
        } catch (_) { // block id: 16
            ();
            var var19 : ?Float32 = (() as Float32);
            var19;
            let var24 : Bool = false;
            if (var24) { Option<Float32>.Some(Float32(-15.0)) } else { Option<Float32>.Some(Float32(-114.0)) } 
        } finally { // block id: 30
            let var34 : Int64 = Int64(Int32(-110));
            11 + var34;
            if (var39) { var43 } else { var43 } 
        } ?? (var39|>func50));
        let var255 : Int32 = Int32(Int8(Int8(66)));
        let var324 : (Bool) -> Float32 = { lambdaParameter327 : Bool => Float32(Float32(-34.0)) };
        let var1626 : (Range<UInt8>) -> Range<UInt8> = func1226;
        let var3022 : (String) -> Range<Int8> = func566;
        let var3096 : (Array<Int64>, Rune, Unit, Range<Int64>, Array<Unit>, Range<UInt8>, Unit) = ([(-35), 110, 66, (-39), 99, 63, 60, 100, 25, 64], r'L', (), ((76&127)..(Int64(UInt16(18))&127):((7|1))), [(), (), (), (), (), (), (), (), (), ()], ((UInt8(Int8(Int8(-12)))&127)..=(UInt8(207)&127):((Int64(Int8(110))|1))), ());
        let var3193 : Rune = r'5';
        let var3342 : Int64 = Int64(UInt8(UInt8(202)));
        let var3351 : Int8 = Int8(Int8(UInt8(161)));
        func func213(namedParam214 ! : Range<Int32>, namedParam215 ! : Range<Int32>) : Int64 { // block id: 216
            let var229 : ?Unit = ([(), (), (), (), (), (), (), (), (), ()] as Unit);
            let var245 : Array<Int64> = [(-112), 87, 11, (-112), (-91), (-49), (-113), 114, 26, (-117)];
            var var261 : UInt32 = UInt32(Int8(UInt8(UInt8(231))));
            var var283 : Int16 = Int16(104);
            var var288 : Int64 = 108;
            func func1215(namedParam1216 ! : Array<Option<Float32>>, namedParam1217 ! : (Array<Int64>, Rune, Unit, Range<Int64>, Array<Unit>, Range<UInt8>, Unit), optionalParam1218 ! : Array<Range<Int8>> = [((Int8(12)&127)..(Int8(-113)&127):((-109)|1)), ((Int8(-88)&127)..(Int8(52)&127):(15|1)), ((Int8(125)&127)..=(Int8(124)&127):(85|1)), ((Int8(89)&127)..=(Int8(-64)&127):(117|1)), ((Int8(71)&127)..=(Int8(16)&127):((-100)|1)), ((Int8(78)&127)..(Int8(91)&127):((-106)|1)), ((Int8(-86)&127)..(Int8(-106)&127):((-116)|1)), ((Int8(-45)&127)..(Int8(8)&127):(123|1)), ((Int8(96)&127)..(Int8(-52)&127):((-81)|1)), ((Int8(-112)&127)..=(Int8(64)&127):((-6)|1))], namedParam1220 ! : Range<Int16>) : Class1210 { // block id: 1221
                var var1648 : UInt8 = UInt8(172);
                ((((UInt8(124)&127)..(UInt8(214)&127):((-99)|1))|>var1626), ((30&127)..((-78)&127):(18|1)), match (Option<Array<Option<Float32>>>.None) {
                    case _ => 
                        ();
                        var var1637 : Range<UInt8> = ((UInt8(160)&127)..(UInt8(0)&127):(64|1));
                        var1637
                    
                    case caseVar1641 => 
                        if (true) { ((UInt8(22)&127)..(UInt8(250)&127):((-51)|1)) } else { ((var1648&127)..=(var1648&127):((119|1))) } 
                    
                    case _ => 
                        ((UInt8(186)&127)..(UInt8(135)&127):((-63)|1))
                    
                })[0];
                (func1662(var3022) ?? match (if (var1061) { // block id: 3027

                    }) {
                    case _ => 
                        if (var2407) { var2373 } else { Class1210() } 
                    
                })
            }
;
            let var3085 : Range<UInt8> = ((UInt8(250)&127)..=(UInt8(215)&127):(40|1));
            let var3358 : Int32 = Int32(24);
            try { // block id: 218
                [(), (), (), (), (), (), (), (), (), ()][7];
                var229.getOrThrow();
                var245[7]
            } catch (_) { // block id: 248
                let var279 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
                match (UInt16(153)) {
                    case _ => 
                        var255;
                        var261 -= var261
                    
                    case 37 | 229 => 
                        ((Int8(44)&127)..=(Int8(-3)&127):((60|1)));
                        var6
                    
                    case _ : Range<Int32> => 
                        var279;
                        var283 /= ((var283) | 1);
                        var288 = (-58)
                    
                    case 179 => 
                        Option<Array<Option<Float32>>>.None;
                        var6
                    
                    case _ => 
                        var300 >>= ((Int8(88)) & 7)
                    
                };
                (Option<Int64>.None ?? var288)
            } finally { // block id: 310
                let var342 : Int64 = Int64(Int64(UInt8(237)));
                let var367 : UInt64 = UInt64(13);
                let var3043 : ?Float32 = Option<Float32>.None;
                let var3052 : Range<Int16> = ((Int16(64)&127)..=(Int16(19)&127):((81|1)));
                let var3221 : Int8 = Int8(Int8(Int8(-36)));
                func func312(param313 : Option<Unit>, param314 : Range<Int8>, param315 : Range<Int8>, optionalParam316 ! : Int32 = Int32(-13)) : Int64 { // block id: 318
                    try { // block id: 320
                        var6;
                        true|>var324
                    } finally { // block id: 332
                        var var350 : Int64 = 10;
                        try (resource = Class1210()) { // block id: 334
                            var6;
                            var6
                        } catch (_) { // block id: 337
                            UInt64(71);
                            var6
                        } finally { // block id: 340
                            var342;
                            Option<Int64>.Some(var342);
                            var350 <<= ((26) & 7)
                        };
                        var loopTimeVar357 : Range<UInt64> = ((UInt64(174)&127)..(UInt64(151)&127):(((-25)|1)));
                        for (i in loopTimeVar357 where false) {
                            var6
                        };
                        func50(var39)
                    };
                    let var1153 : ?Bool = Option<Bool>.Some(((((Int8(99)&127)..(Int8(-103)&127):(((-50)|1))), (UInt16(184), Float32(-103.0), Int8(5), UInt16(124), Int8(-59))) is Array<Option<Float32>>));
                    let var3137 : UInt8 = UInt8(157);
                    func func1168(param1169 : (Bool) -> Float32, optionalParam1172 ! : Option<Array<Option<Float32>>> = Option<Array<Option<Float32>>>.Some([Option<Float32>.None, ((UInt8(45), [25, 84, 99, 10, (-69), 64, 111, (-83), 77, (-25)]) as Float32), ([Float32(-6.0), Float32(-22.0), Float32(38.0), Float32(-18.0), Float32(85.0), Float32(-5.0), Float32(51.0), Float32(-63.0), Float32(84.0), Float32(82.0)] as Float32), Option<Float32>.Some(Float32(-93.0)), (((UInt16(1)&127)..(UInt16(36)&127):((8|1))) as Float32), Option<Float32>.Some(Float32(-5.0)), Option<Float32>.None, (() as Float32), Option<Float32>.None, (Int8(27) as Float32)]), namedParam1207 ! : Range<UInt64>) : Bool { // block id: 1208
                        var var3146 : Int64 = (-110);
                        func1215(namedParam1216 : [Option<Float32>.None, Option<Float32>.Some(Float32(4.0)), Option<Float32>.None, var43, Option<Float32>.Some(Float32(-10.0)), var3043, Option<Float32>.Some(var116), var158, Option<Float32>.None, var43], namedParam1217 : match (var3052) {
                            case _ : Interface1213 => 
                                var var3061 : ?(Array<Int64>, Rune, Unit, Range<Int64>, Array<Unit>, Range<UInt8>, Unit) = (Option<Unit>.None as (Array<Int64>, Rune, Unit, Range<Int64>, Array<Unit>, Range<UInt8>, Unit));
                                var3061;
                                ();
                                ([44, 71, 91, 83, (-48), 39, (-95), (-106), (-62), 59], r'n', (), ((var867&127)..=((-41)&127):(((-8)|1))), [(), (), var1330, (), var6, (), var6, var6, (), ()], var3085, var6)
                            
                            case caseVar3090 : Int64 => 
                                var1330;
                                if (var2407) { var3096 } else { var3096 } 
                            
                            case _ => 
                                var3096
                            
                            case caseVar3132 : Array<Array<Unit>> => 
                                var2489 >>= ((var3137) & 7);
                                ([var342, 24, var867, (-42), var3146, 110, var3146, (-120), (-84), 95], r'I', (), ((97&127)..=(26&127):(44|1)), [var1330, (), var3160, (), (), (), var6, (), (), ()], ((var3137&127)..=(var3137&127):(((-77)|1))), var1330)
                            
                            case _ => 
                                ([var342, var867, var3181, var3146, (-88), var3181, var342, 102, (-38), var867], var3193, var3160, var2773, var1753, ((UInt8(158)&127)..(var3137&127):(((-104)|1))), ())
                            
                        }, optionalParam1218 : (Option<Array<Range<Int8>>>.Some([param315, ((Int8(-61)&127)..=(Int8(42)&127):(92|1)), ((Int8(-43)&127)..=(var300&127):((var3146|1))), var1372, ((Int8(13)&127)..(Int8(31)&127):((-96)|1)), param314, ((var3221&127)..=(Int8(27)&127):(((-7)|1))), ((Int8(-99)&127)..=(Int8(-98)&127):((-22)|1)), ((Int8(-110)&127)..(Int8(55)&127):(119|1)), ((Int8(-17)&127)..=(Int8(-28)&127):((-78)|1))]) ?? var3231), namedParam1220 : (var3268 ?? ((Int16(72)&127)..(Int16(2)&127):(41|1)))).var3272;
                        try (resource = Class1210()) { // block id: 3275
                            match (var2161) {
                                case _ => 
                                    ()
                                
                            };
                            try (resource = Class1210()) { // block id: 3282
                                Option<Array<Option<Float32>>>.None;
                                var6;
                                var var3287 : UInt64 = UInt64(UInt32(211));
                                var3287 += UInt64(152)
                            } finally { // block id: 3291
                                var3160;
                                var812;
                                ()
                            }
                        } finally { // block id: 3295
                            (param313 ?? var6);
                            ((-19), var481, (-3), ((var3221&127)..(Int8(-71)&127):((var342|1))), Float32(-113.0), var194);
                            var var3311 : UInt64 = UInt64(237);
                            var3311--
                        };
                        var39
                    }
;
                    if (var367 <= (UInt64(199) >> ((var367) & 7))) { // block id: 373
                        var loopTimeVar378 : Int64 = 0;
                        do {
                            loopTimeVar378++;

                        } while ((var39) && loopTimeVar378 < 100 ) ;
                        ();
                        ((UInt32(73)&127)..(UInt32(248)&127):((-61)|1))|>func381<Range<Int16>>
                    } else if ((var1153 ?? func1168(var324, namedParam1207 : ((UInt64(119)&127)..=(var2801&127):((var3181|1)))))) { // block id: 3319
                        var3181 &= 125;
                        match (Option<Array<Option<Float32>>>.None) {
                            case caseVar3327 : Array<Range<UInt8>> => 
                                var3330;
                                var3160;
                                (-49)
                            
                            case _ => 
                                var2373;
                                var867
                            
                        }
                    } else { // block id: 3338
                        var3160;
                        var3342 * var867
                    }
                }
;
                func312(Option<Unit>.None, var1372, ((var3351&127)..=(Int8(-67)&127):((66|1))), optionalParam316 : var3358)
            }
        }
;
        Int64(func213(namedParam214 : ((var2232&127)..=(Int32(74)&127):(((-101)|1))), namedParam215 : var941))
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var194*var194), 64)
        crccheck.updateBuffer(UInt64(var255*var255), 64)
        crccheck.updateBuffer(UInt64(var300*var300), 64)
        crccheck.updateBuffer(UInt64(var481*var481), 64)
        crccheck.updateBuffer(UInt64(var856*var856), 64)
        crccheck.updateBuffer(UInt64(var867*var867), 64)
        crccheck.updateBuffer(UInt64(var900*var900), 64)
        crccheck.updateBuffer(UInt64(var990*var990), 64)
        crccheck.updateBuffer(UInt64(var1962*var1962), 64)
        crccheck.updateBuffer(UInt64(var2161*var2161), 64)
        crccheck.updateBuffer(UInt64(var2232*var2232), 64)
        crccheck.updateBuffer(UInt64(var2489*var2489), 64)
        crccheck.updateBuffer(UInt64(var2629*var2629), 64)
        crccheck.updateBuffer(UInt64(var2801*var2801), 64)
        crccheck.updateBuffer(UInt64(var3181*var3181), 64)
        crccheck.updateBuffer(UInt64(var3342*var3342), 64)
        crccheck.updateBuffer(UInt64(var3351*var3351), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
// ASSERT: scan sema_unreachable_pattern
// ASSERT: scan chir_typecast_overflow
// ASSERT: scan chir_dce_unused_variable
// ASSERT: scan chir_dce_unused_expression
// ASSERT: scan chir_dce_unused_function
// ASSERT: scan chir_dce_unused_operator


