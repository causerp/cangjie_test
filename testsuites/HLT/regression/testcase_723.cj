/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args

public let var_1733276526312_11: (Int8, Bool, UInt8, Rune, Float64) = (Int8(UInt8(131)), (Float32(-40.0) is Float32),
    UInt8(Int8(-89)), r'C', Float64(Float64(Float32(Float32(-107.0)))))
internal const var_1733276526312_36: Bool = false
@Deprecated
public let var_1733276526312_76: Option<Enum_1733276526312_68> = Option<Enum_1733276526312_68>.None
public var var_1733276526312_97: Enum_1733276526312_68 = Enum_1733276526312_68.enumValue_1733276526312_99(
    func_1733276526312_58<Int16>, Float64(Float32(Float32(Float32(-94.0)))), Int8(Int8(-60)))
@Deprecated
public var var_1733276526312_142: UInt32 = UInt32(UInt8(UInt8(Int8(Int8(50)))))
@Deprecated
public const var_1733276526312_231: Bool = false
@Deprecated
var var_1733276526312_238: Unit = ()
public var var_1733276526312_244: Int = Int64(-12)
@Deprecated
let var_1733276526312_276: Array<Option<Unit>> = [Option<Unit>.None, Option<Unit>.None,
    ((Int8(UInt8(181)), (true is UInt16), UInt8(215), r'A', Float64(Float32(67.0))) as Unit), Option<Unit>.None,
    (((Int64(Int64(-30)) & 127)..(Int64(Int64(85)) & 127) : (Int64(-115) | 1)) as Unit),
    (((Int64(Int64(73)) & 127)..=(Int64(Int64(-76)) & 127) : (Int64(-52) | 1)) as Unit), Option<Unit>.None,
    Option<Unit>.None, (Int8(UInt8(159)) as Unit),
    (((UInt16(UInt16(63)) & 127)..=(UInt16(UInt16(160)) & 127) : (Int64(-2) | 1)) as Unit)]
public let var_1733276526312_309: Option<Option<Unit>> = Option<Option<Unit>>.None
public let var_1733276526312_330: Option<Unit> = Option<Unit>.None
@Deprecated
public var var_1733276526312_377: UInt16 = UInt16(Int8(-48))
public var var_1733276526312_409: UInt8 = UInt8(UInt8(207))
@Deprecated
public const var_1733276526312_623: Int8 = -2
public let var_1733276526312_663: Class_1733276526312_644 = Class_1733276526312_644()
public var var_1733276526312_676: Int32 = Int32(UInt8(39))
public let var_1733276526312_696: Range<Int16> = ((Int16(Int16(-41)) & 127)..(Int16(Int16(-127)) & 127) : (Int64(104) | 1))
public const var_1733276526312_703: Bool = true
public let var_1733276526312_706: VArray<Float32, $8> = VArray<Float32, $8>({i => Float32(97.0)})
@Deprecated
public var var_1733276526312_723: Rune = r'j'
var var_1733276526312_768: Unit = ()
public let var_1733276526312_790: Option<String> = ([(UInt64(UInt16(51)) is Interface_1733276526312_650),
    (false is Interface_1733276526312_660<Float64, Unit, Float64>), true, (Option<Option<String>>.None is Range<UInt16>),
    true,
    (((Int8(Int8(-91)) & 127)..(Int8(Int8(11)) & 127) : (Int64(-76) | 1)) is ((Int8, Bool, UInt8, Rune, Float64), (Float32, 
    Enum_1733276526312_68, Float32), Unit)), (Int8(-34) is VArray<Float32, $8>), true, false, true] as String)
public var var_1733276526312_821: Bool = (Float64(69.0) is (Int8, Bool, UInt8, Rune, Float64))
var var_1733276526312_831: Int16 = Int16(57)
public var var_1733276526312_890: Option<Float32> = (Class_1733276526312_644() as Float32)

@Frozen
@Deprecated
public const func func_1733276526312_58<T0>(): Unit { // block id: 59
    ()
}

@Deprecated
public enum Enum_1733276526312_68 {
    defaultValue
    | enumValue_1733276526312_83(Int8, Float64)
    | enumValue_1733276526312_99(() -> Unit, Float64, Int8)
    | enumValue_1733276526312_446(Range<Int16>, Range<Int32>, Float32, UInt64)
}

@Frozen
public func func_1733276526312_64(param_1733276526312_65: Float32): Rune { // block id: 66
    const var_1733276526312_87: Int8 = 24;
    match ((var_1733276526312_76 ?? (Float32(87.0), Enum_1733276526312_68.enumValue_1733276526312_83(
            var_1733276526312_87, Float64(50.0)), Float32(-12.0))[1])) {
        case _ =>
            Option<Enum_1733276526312_68>.Some(var_1733276526312_97);
            ()
    };
    let var_1733276526312_153: (Option<Enum_1733276526312_68>, Enum_1733276526312_68, Rune, Bool) = ((Int8(UInt8(Int8(-104))) as Enum_1733276526312_68),
        Enum_1733276526312_68.enumValue_1733276526312_99(func_1733276526312_58<Int16>, Float64(-116.0), Int8(13)), r'x',
        (((Int8(87), true, UInt8(138), r'l', Float64(-3.0)), (Float32(-36.0),
                Enum_1733276526312_68.enumValue_1733276526312_99({=> ()}, Float64(88.0), Int8(120)), Float32(91.0)), ()) is Int16));
    if (false) { // block id: 114
        let var_1733276526312_118: ((Int8, Bool, UInt8, Rune, Float64), (Float32, Enum_1733276526312_68, Float32), Unit) = ((Int8(-82),
                (Int16(64) is String), UInt8(Int8(-95)), r'G', Float64(Float32(Float32(-18.0)))), (Float32(-39.0),
                Enum_1733276526312_68.enumValue_1733276526312_83(Int8(-96), Float64(Float64(-95.0))), Float32(Float32(Float32(-14.0)))),
            ());
        var_1733276526312_118[2];
        var_1733276526312_142;
        r'p'
    } else { // block id: 149
        var_1733276526312_153[2]
    }
}

@Frozen
@Deprecated
public const func func_1733276526312_185<T0>(param_1733276526312_186: String): Rune { // block id: 187
    r'y'
}

public struct Struct_1733276526312_194 {
    @Frozen
    public init() { // block id: 196

    }

    @Frozen
    static prop var_1733276526312_428: Struct_1733276526312_424 { // block id: 429
        get() { // block id: 431
            ((Int8(Int8(-87)), (UInt64(65) is Float32), UInt8(120), r'4', Float64(Float64(-41.0))), (Float32(Float32(45.0)),
                    Enum_1733276526312_68.enumValue_1733276526312_446(
                        ((Int16(Int16(-109)) & 127)..=(Int16(Int16(-77)) & 127) : (Int64(-42) | 1)),
                        ((Int32(Int32(14)) & 127)..=(Int32(Int32(-43)) & 127) : (Int64(23) | 1)), Float32(62.0),
                        UInt64(202)), Float32(Float32(-96.0))), ());
            Struct_1733276526312_424()
        }
    }
}

public func func_1733276526312_214(param_1733276526312_215: Option<Enum_1733276526312_68>): Option<Unit> { // block id: 216
    var var_1733276526312_234: Option<Unit> = Option<Unit>.None;
    var var_1733276526312_249: UInt8 = UInt8(136);
    let var_1733276526312_336: Struct_1733276526312_194 = Struct_1733276526312_194();
    var var_1733276526312_351: Option<Unit> = Option<Unit>.None;
    [if (var_1733276526312_231) {
        var_1733276526312_234
    } else {
        Option<Unit>.Some(var_1733276526312_238)
    }, try { // block id: 241
        var_1733276526312_244 * Int64(22);
        ((UInt8(var_1733276526312_249) & 127)..=(UInt8(UInt8(59)) & 127) : (Int64(34) | 1));
        if (var_1733276526312_36) {
            Option<Unit>.None
        } else {
            Option<Unit>.None
        }
    } catch (_) { // block id: 257
        "fd@Q\\Q~=l%";
        var_1733276526312_234
    } finally { // block id: 260
        [Option<Unit>.None, Option<Unit>.None, var_1733276526312_234, var_1733276526312_234, var_1733276526312_234,
            var_1733276526312_234, var_1733276526312_234, var_1733276526312_234, Option<Unit>.Some(()),
            var_1733276526312_234];
        var_1733276526312_234
    }, var_1733276526312_276[1], (var_1733276526312_309 ?? var_1733276526312_234), var_1733276526312_234,
        if (false) {
        var_1733276526312_234
    } else {
        Option<Unit>.Some(var_1733276526312_238)
    }, try { // block id: 319
        if (var_1733276526312_36) {
            var_1733276526312_234
        } else {
            var_1733276526312_234
        }
    } catch (e: Exception) { // block id: 324
        Option<Option<Unit>>.None;
        if (true) {
            Option<Unit>.None
        } else {
            var_1733276526312_330
        }
    }, if (var_1733276526312_231) { // block id: 334
        var_1733276526312_336;
        if (var_1733276526312_231) {
            Option<Unit>.None
        } else {
            Option<Unit>.Some(())
        }
    } else { // block id: 343
        var_1733276526312_238;
        var_1733276526312_234
    }, if (var_1733276526312_36) {
        var_1733276526312_234
    } else {
        Option<Unit>.None
    }, var_1733276526312_351][8]
}

public struct Struct_1733276526312_424 {
    @Frozen
    public init() { // block id: 426

    }

    @Frozen
    mut prop var_1733276526312_466: ((Int32, Int32, Array<Option<Unit>>, Int64, Rune), Float32) { // block id: 467
        get() { // block id: 469
            ((Int32(-124), Int32(-120), [Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None,
                        Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None,
                        Option<Unit>.None], Int64(116), r'n'), Float32(94.0));
            var_1733276526312_729
        }
        set(Value) { // block id: 490
            ();
            ();
            var_1733276526312_729 = Value
        }
    }
    var var_1733276526312_729: ((Int32, Int32, Array<Option<Unit>>, Int64, Rune), Float32) = ((Int32(-124), Int32(-31), [Option<Unit>
                .None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None,
                Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None], Int64(5), r'9'), Float32(-73.0))
}

@Deprecated
public const func func_1733276526312_636(param_1733276526312_637: Float32): String { // block id: 638
    const var_1733276526312_640: String = "}Z7tlt&4kt";
    var_1733276526312_640
}

public sealed interface Interface_1733276526312_658 {}

public interface Interface_1733276526312_660<T0, T1, T2> {}

public sealed interface Interface_1733276526312_659 <: Interface_1733276526312_658 & Interface_1733276526312_660<Float64,
        Unit, Float64> {}

public interface Interface_1733276526312_657<T0, T1, T2> <: Interface_1733276526312_658 & Interface_1733276526312_659 {}

public interface Interface_1733276526312_656 <: Interface_1733276526312_657<UInt8, UInt32, UInt32> {}

public interface Interface_1733276526312_655 <: Interface_1733276526312_656 & Interface_1733276526312_659 {}

public interface Interface_1733276526312_654 <: Interface_1733276526312_655 {}

public interface Interface_1733276526312_661 <: Interface_1733276526312_657<UInt8, UInt32, UInt32> {}

public interface Interface_1733276526312_653 <: Interface_1733276526312_654 & Interface_1733276526312_661 {}

public sealed interface Interface_1733276526312_652<T0, T1> <: Interface_1733276526312_653 {}

public interface Interface_1733276526312_651 <: Interface_1733276526312_652<Int8, UInt64> {}

public sealed interface Interface_1733276526312_650 <: Interface_1733276526312_651 {}

public sealed interface Interface_1733276526312_649 <: Interface_1733276526312_650 {}

public interface Interface_1733276526312_648<T0> <: Interface_1733276526312_649 & Interface_1733276526312_653 {}

public interface Interface_1733276526312_647 <: Interface_1733276526312_648<UInt8> & Interface_1733276526312_651 {
    @Frozen
    func func_1733276526312_666(namedParam_1733276526312_667!: Rune): Float32 { // block id: 668
        if (true) { // block id: 672
            ();
            var_1733276526312_676 >>= ((Int32(5)) & 7)
            var var_1733276526312_683: Float32 = Float32(Float32(Float32(-93.0)));
            Float32(50.0) * var_1733276526312_683
        } else { // block id: 687
            ((Int32(Int32(35)) & 127)..(Int32(var_1733276526312_676) & 127) : (var_1733276526312_244 | 1));
            if (true) {
                ((Int16(Int16(-96)) & 127)..=(Int16(Int16(15)) & 127) : (Int64(72) | 1))
            } else {
                var_1733276526312_696
            };
            Float32(-111.0)
        } + if (var_1733276526312_703) {
            var_1733276526312_706
        } else {
            var_1733276526312_706
        }[4]
    }
}

public open class Class_1733276526312_644 <: Interface_1733276526312_647 & Interface_1733276526312_651 {
    @Frozen
    public init() { // block id: 646

    }

    static const var_1733276526312_778: String = ###">4|yg[(v)y"###;
    private var var_1733276526312_811: Option<Option<String>> = Option<Option<String>>.None;
    public var var_1733276526312_842: Float64 = Float64(104.0);
    static var var_1733276526312_847: UInt64 = UInt64(73);
    static prop var_1733276526312_868: UInt16 { // block id: 869
        get() { // block id: 871
            UInt16(Int8(Int8(UInt8(88))))
        }
    }
    public open override func func_1733276526312_666(namedParam_1733276526312_667!: Rune): Float32 { // block id: 753
        var var_1733276526312_853: Option<String> = Option<String>.Some("9Jk]DD M07");
        ((Option<Option<String>>.None ?? try { // block id: 766
            var_1733276526312_768;
            var var_1733276526312_773: Option<String> = Option<String>.Some("""
UK6A%
O%do]
""");
            if (true) {
                var_1733276526312_773
            } else {
                Option<String>.Some(var_1733276526312_778)
            }
        } catch (_) { // block id: 780
            var var_1733276526312_783: Int32 = Int32(UInt32(Int16(-57)));
            ((Int32(var_1733276526312_783) & 127)..(Int32(var_1733276526312_783) & 127) : (Int64(-97) | 1));
            var_1733276526312_790
        } finally { // block id: 809
            var_1733276526312_811;
            var_1733276526312_790
        }) ?? if (true) {
            if (var_1733276526312_703) { // block id: 818
                var_1733276526312_821 ||= false
                ();
                var_1733276526312_778
            } else if (var_1733276526312_703) { // block id: 828
                var_1733276526312_831 <<= ((Int16(-59)) & 7)
                UInt8(42);
                if (true) {
                    """
pp<=Q
s#'>n
"""
                } else {
                    var_1733276526312_778
                }
            } else { // block id: 839
                var_1733276526312_842 /= Float64((Int32(Float64(-100.0))) | 1)
                var_1733276526312_847 & UInt64(30);
                var_1733276526312_778
            }
        } else {
            (var_1733276526312_853 ?? "s*@OO2r/8u")
        });
        const var_1733276526312_881: Float32 = 6.0;
        ((var_1733276526312_868, [Option<Float32>.None, Option<Float32>.None,
                Option<Float32>.Some(var_1733276526312_881), Option<Float32>.Some(var_1733276526312_881),
                Option<Float32>.None, Option<Float32>.None, Option<Float32>.Some(Float32(-120.0)), var_1733276526312_890,
                Option<Float32>.None, Option<Float32>.None], "38~Ix|r !8", ((UInt32(UInt32(227)) & 127)..(UInt32(UInt32(252)) &
                127) : (Int64(99) | 1)), Int32(21), var_1733276526312_868)[1][7] ?? var_1733276526312_881)
    }

    static init() {
    }
}

main(): Int64 {
    try {
        var var_1733276526312_45: Int8 = Int8(Int8(UInt8(UInt8(147))));
        var loopTimeVar_1733276526312_62: Int = 0;
        while ((var_1733276526312_11[1]) && loopTimeVar_1733276526312_62 < 100) {
            loopTimeVar_1733276526312_62++;
            let var_1733276526312_32: UInt32 = UInt32(14);
            var var_1733276526312_54: Float64 = Float64(-115.0);
            if (false) { // block id: 28
                ();
                var_1733276526312_32 ^ UInt32(250)
            } else if (var_1733276526312_36) { // block id: 38
                ();
                break;
                var_1733276526312_32
            } else { // block id: 42
                (var_1733276526312_45, true, UInt8(254), r'6', var_1733276526312_54);
                var_1733276526312_32
            };
            func_1733276526312_58<Int16>()
        };
        let var_1733276526312_525: Option<Unit> = ((Int32(38), Int32(-1), [Option<Unit>.Some(()), (UInt16(222) as Unit),
                (Int32(57) as Unit), Option<Unit>.Some(()), Option<Unit>.Some(()), Option<Unit>.Some(()),
                (Enum_1733276526312_68.enumValue_1733276526312_446(
                ((Int16(Int16(108)) & 127)..(Int16(Int16(-12)) & 127) : (Int64(5) | 1)),
                ((Int32(Int32(-58)) & 127)..=(Int32(Int32(98)) & 127) : (Int64(17) | 1)), Float32(90.0), UInt64(225)) as Unit),
                Option<Unit>.None,
                ((Option<Enum_1733276526312_68>.Some(
                    Enum_1733276526312_68.enumValue_1733276526312_83(Int8(46), Float64(-116.0))),
                Enum_1733276526312_68.enumValue_1733276526312_83(Int8(-28), Float64(-121.0)), r'b', true) as Unit),
                ((Int32(-30), Int32(118), [Option<Unit>.None, Option<Unit>.None, Option<Unit>.Some(()),
                    Option<Unit>.Some(()), Option<Unit>.None, Option<Unit>.Some(()), Option<Unit>.None,
                    Option<Unit>.Some(()), Option<Unit>.Some(()), Option<Unit>.Some(())], Int64(33), r'y') as Unit)],
            Int64(-127), r'u') as Unit);
        let var_1733276526312_601: Option<Unit> = (Int8(-76) as Unit);
        var_1733276526312_663.func_1733276526312_666(namedParam_1733276526312_667: var_1733276526312_723) |> (func_1733276526312_636 ~>
            {
            lambdaParameter_1733276526312_191: String =>
                let var_1733276526312_517: Int32 = Int32(UInt16(UInt16(Int8(100))));
                var var_1733276526312_627: Int32 = Int32(UInt32(254));
                Struct_1733276526312_194.func_1733276526312_199<UInt32, UInt64>(func_1733276526312_185<Float32>,
                    if (var_1733276526312_36) { // block id: 498
                        var_1733276526312_231
                    } else if (true) { // block id: 501
                        ();
                        UInt64(34) == UInt64(243)
                    } else { // block id: 506
                        var_1733276526312_238;
                        var_1733276526312_238;
                        !true
                    }, UInt16(9) > var_1733276526312_377,
                    optionalParam_1733276526312_205: match ((var_1733276526312_517, var_1733276526312_517, [var_1733276526312_525,
                            var_1733276526312_525, Option<Unit>.Some(()), var_1733276526312_330, var_1733276526312_525,
                            var_1733276526312_525, var_1733276526312_525, Option<Unit>.None, var_1733276526312_601,
                            var_1733276526312_330], var_1733276526312_244, r'R')) {
                        case caseVar_1733276526312_609 =>
                            var_1733276526312_238;
                            var_1733276526312_238;
                            ()

                        case _: (Int8, Bool, UInt8, Rune, Float64) => ()

                        case caseVar_1733276526312_620 =>
                            var_1733276526312_623;
                            var_1733276526312_627 <<= ((Int32(-15)) & 7)

                        case _ =>
                            var_1733276526312_11;
                            ()
                    })
        });
        Int64(-102)
        // CRC Check All Variables
        var crcCheck = CrcCheck(5000, 32)
        crcCheck.updateBuffer(UInt64(var_1733276526312_45 * var_1733276526312_45), 64)
        crcCheck.updateBuffer(UInt64(var_1733276526312_409 * var_1733276526312_409), 64)
        crcCheck.crcCheck()
        crcCheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) {
        println("Exception: NoneValueException")
    }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        buffer = Array<Int64>(buffer_n, {i => 0})
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, {i => 0})
        var byte_c = 1
        var byte_index = 0
        while (value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[(i + buffer_index) % buffer.size] = byteArray[i + byte_index]
            i++
        }
        buffer_index = (buffer_index + i) % buffer.size
    }

    func updateBuffer(input: Bool, byte_n: Int64): Unit {
        if (input == true) {
            updateBuffer(1, byte_n)
        } else {
            updateBuffer(0, byte_n)
        }
    }

    func updateBuffer(input: Rune, byte_n: Int64): Unit {
        updateBuffer(UInt64(UInt32(input)), byte_n)
    }

    func updateBuffer(input: String, byte_n: Int64): Unit {
        for (c in input) {
            updateBuffer(c, byte_n)
        }
    }

    func updateBuffer(input: Unit, byte_n: Int64): Unit {
        updateBuffer(input.toString(), byte_n)
    }

    func updateBuffer(input: Any, byte_n: Int64): Unit {
        if (input is Hashable) {
            match (input as Hashable) {
                case Some(v) => updateBuffer(UInt64(v.hashCode()), byte_n)
                case _ => updateBuffer(1, byte_n)
            }
        } else if (input is ToString) {
            match (input as ToString) {
                case Some(v) => updateBuffer(v.toString(), byte_n)
                case _ => updateBuffer(1, byte_n)
            }
        } else {
            updateBuffer(1, byte_n)
        }
    }
    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, {i => 0})
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2 ** 2 * crc_output[i] + 2 ** 1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}

extend Struct_1733276526312_424 {}

extend Struct_1733276526312_194 {
    @Frozen
    public static func func_1733276526312_199<T0, T1>(param_1733276526312_200: (String) -> Rune,
        param_1733276526312_203: Bool, param_1733276526312_204: Bool, optionalParam_1733276526312_205!: Unit = ()): Rune { // block id: 207
        var var_1733276526312_355: (Option<Enum_1733276526312_68>) -> Option<Unit> = func_1733276526312_214;
        let var_1733276526312_363: (Option<Enum_1733276526312_68>, Enum_1733276526312_68, Rune, Bool) = ((Int64(-31) as Enum_1733276526312_68),
            Enum_1733276526312_68.enumValue_1733276526312_83(Int8(Int8(UInt8(17))), Float64(-59.0)), r'v', (() is Struct_1733276526312_194));
        var loopTimeVar_1733276526312_390: Range<UInt64> = ((UInt64(UInt64(59)) & 127)..(UInt64(UInt64(148)) & 127) : (Int64(3) |
            1));
        (((var_1733276526312_231 as Enum_1733276526312_68) |> var_1733276526312_355) ?? for (i in loopTimeVar_1733276526312_390 where try { // block id: 361
            var_1733276526312_363;
            var_1733276526312_377 %= ((UInt16(77)) | 1)
            true
        } catch (e: Exception) { // block id: 382
            true
        } finally { // block id: 384
            ();
            Int64(7) > Int64(-90)
        }) {
        });
        var loopTimeVar_1733276526312_418: Int = 0;
        do {
            loopTimeVar_1733276526312_418++;
        } while ((if ([true, true, false, true, false, false, true, true, false, false][0]) { // block id: 401
            var_1733276526312_231
        } else { // block id: 403
            var_1733276526312_231 || true;
            var_1733276526312_409 &= UInt8(66)
            var_1733276526312_231 || var_1733276526312_231
        }) && loopTimeVar_1733276526312_418 < 100);
        var_1733276526312_428.var_1733276526312_466[0][4]
    }
}

extend Enum_1733276526312_68 {}
