/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args

public const var_1739712777211_12: Byte = 126
@Deprecated
public const var_1739712777211_56: Bool = true
public var var_1739712777211_157: UInt32 = UInt32(UInt16(UInt8(Int8(Int8(-59)))))
public var var_1739712777211_203: Int8 = Int8(UInt8(Int8(-110)))
public let var_1739712777211_236: Enum_1739712777211_233 = Enum_1739712777211_233.enumValue_1739712777211_238(
    Class_1739712777211_19(), Class_1739712777211_19(), Int64(-78),
    ((Int32(Int32(42)) & 127)..(Int32(Int32(-98)) & 127) : (Int64(-94) | 1)))
public let var_1739712777211_261: Interface_1739712777211_22 = Class_1739712777211_19()
var var_1739712777211_265: UInt16 = UInt16(84)
public const var_1739712777211_274: Float64 = -1.0
@Deprecated
internal var var_1739712777211_323: Int = Int64(Int64(UInt32(UInt16(UInt8(223)))))
var var_1739712777211_331: Range<Int16> = ((Int16(Int16(79)) & 127)..(Int16(Int16(-40)) & 127) : (Int64(-5) | 1))
public const var_1739712777211_388: Bool = true
@Deprecated
public let var_1739712777211_448: Int16 = Int16(UInt16(Int8(Int8(UInt8(109)))))
internal var var_1739712777211_455: Rune = r'S'
public var var_1739712777211_465: Range<Int16> = ((Int16(Int16(-37)) & 127)..(Int16(Int16(UInt16(117))) & 127) : (Int64(74) |
    1))
public var var_1739712777211_504: UInt = UInt64(Int16(UInt16(148)))
@Deprecated
public var var_1739712777211_516: Range<UInt8> = ((UInt8(UInt8(Int8(88))) & 127)..=(UInt8(UInt8(Int8(108))) & 127) : (Int64(Int8(UInt8(UInt8(109)))) |
    1))
let var_1739712777211_533: Range<UInt32> = ((UInt32(UInt32(247)) & 127)..(UInt32(UInt32(UInt32(Int16(UInt16(19))))) & 127) : (Int64(Int64(Int8(Int8(13)))) |
    1))
public let var_1739712777211_550: Class_1739712777211_19 = Class_1739712777211_19()
@Deprecated
public var var_1739712777211_563: VArray<UInt8, $7> = VArray<UInt8, $7>(repeat: UInt8(UInt8(197)))
let var_1739712777211_596: Int64 = Int64(93)
public var var_1739712777211_617: Bool = (((UInt32(UInt32(UInt32(74))) & 127)..=(UInt32(UInt32(172)) & 127) : (Int64(Int8(-105)) |
    1)) is Interface_1739712777211_23)
internal var var_1739712777211_643: Unit = ()
@Deprecated
public var var_1739712777211_653: UInt8 = UInt8(27)
@Deprecated
public let var_1739712777211_663: (Enum_1739712777211_233, Interface_1739712777211_28, Interface_1739712777211_25, 
    Int64, UInt8, Int8, Range<UInt64>) = (Enum_1739712777211_233.enumValue_1739712777211_666(func_1739712777211_40,
        Class_1739712777211_19()), Class_1739712777211_19(), Class_1739712777211_19(), Int64(38), UInt8(UInt8(169)),
    Int8(-74), ((UInt64(UInt64(11)) & 127)..(UInt64(UInt64(223)) & 127) : (Int64(113) | 1)))

@Frozen
@Deprecated
public const func func_1739712777211_6(param_1739712777211_7: Float32): UInt8 { // block id: 8
    ();
    251;
    var_1739712777211_12
}

public sealed interface Interface_1739712777211_28 {}

public interface Interface_1739712777211_30<T0> {}

public sealed interface Interface_1739712777211_29 <: Interface_1739712777211_30<Int32> {}

public sealed interface Interface_1739712777211_27 <: Interface_1739712777211_28 & Interface_1739712777211_29 {}

public sealed interface Interface_1739712777211_26 <: Interface_1739712777211_27 {}

public interface Interface_1739712777211_25 <: Interface_1739712777211_26 & Interface_1739712777211_30<Int32> {}

public sealed interface Interface_1739712777211_24 <: Interface_1739712777211_25 {}

public sealed interface Interface_1739712777211_23 <: Interface_1739712777211_24 & Interface_1739712777211_30<Int32> {}

public sealed interface Interface_1739712777211_22 <: Interface_1739712777211_23 {}

public open class Class_1739712777211_19 <: Interface_1739712777211_22 & Resource {
    public init() { // block id: 21

    }

    @Frozen
    public static mut prop var_1739712777211_101: String { // block id: 102
        get() { // block id: 104
            "`JnT/0M/Vk";
            var_1739712777211_681
        }
        set(Value) { // block id: 108
            ();
            var_1739712777211_681 = Value
        }
    }
    public func func_1739712777211_35(): Int64 { // block id: 36
        let var_1739712777211_44: (UInt32) -> Unit = {lambdaParameter_1739712777211_47: UInt32 => ()};
        const var_1739712777211_52: Rune = r'8';
        var var_1739712777211_116: Int8 = Int8(-122);
        var var_1739712777211_127: Bool = (Int8(UInt8(210)) is Unit);
        try (resource = Class_1739712777211_19()) { // block id: 38
            UInt32(141) |> var_1739712777211_44;
            var_1739712777211_52;
            var loopTimeVar_1739712777211_59: Array<UInt64> = [UInt64(54), UInt64(UInt32(UInt32(128))),
                UInt64(UInt32(UInt8(250))), UInt64(216), UInt64(Int16(-52)), UInt64(224), UInt64(UInt32(211)),
                UInt64(UInt8(220)), UInt64(159), UInt64(UInt32(UInt8(228)))];
            for (i in loopTimeVar_1739712777211_59 where var_1739712777211_56) {
            }
        } finally { // block id: 89
            var var_1739712777211_119: Unit = ();
            match (Enum_1739712777211_91<Int8, Range<UInt32>, Int8>.enumValue_1739712777211_94) {
                case caseVar_1739712777211_97: Float32 =>
                    var_1739712777211_101 = var_1739712777211_101
                    var_1739712777211_12

                case enumValue_1739712777211_94 =>
                    var_1739712777211_116;
                    var_1739712777211_119;
                    UInt8(103)

                case _ =>
                    var_1739712777211_127 ||= true
                    ((UInt64(UInt64(54)) & 127)..=(UInt64(UInt64(217)) & 127) : (Int64(-64) | 1));
                    -UInt8(80)
            };
            var var_1739712777211_138: UInt32 = UInt32(97);
            var_1739712777211_138 |> var_1739712777211_44
        };
        let var_1739712777211_143: (Int64, UInt8, Int64, Rune) = (Int64(Int32(Int32(UInt32(223)))), UInt8(UInt8(228)),
            Int64(Int64(52)), r'I');
        var_1739712777211_143[0]
    };

    public static var var_1739712777211_194: Rune = r'j';
    public let var_1739712777211_553: Byte = UInt8(95);
    static var var_1739712777211_681: String = ###"fvKL95.8ij"###
    public func isClosed(): Bool {
        return true
    }
    public func close(): Unit {}
}

public const func func_1739712777211_40(param_1739712777211_41: UInt32): Unit { // block id: 42

}

public enum Enum_1739712777211_91<T0, T1, T2> {
    defaultValue
    | enumValue_1739712777211_94
}

public struct Struct_1739712777211_166<T0> where T0 <: Interface_1739712777211_22 & Interface_1739712777211_23 {
    @Frozen
    public init() { // block id: 168

    }

    @Frozen
    public static mut prop var_1739712777211_178: Unit { // block id: 179
        get() { // block id: 181
            ()
        }
        set(Value) { // block id: 185
            ((UInt32(UInt32(142)) & 127)..=(UInt32(UInt32(69)) & 127) : (Int64(90) | 1));
            Float64(Float64(Float64(-21.0)));
            ()
        }
    }
    var var_1739712777211_279: Array<UInt8> = [UInt8(143), UInt8(171), UInt8(103), UInt8(203), UInt8(202), UInt8(207),
        UInt8(143), UInt8(12), UInt8(55), UInt8(245)]
}

public enum Enum_1739712777211_233 {
    defaultValue
    | enumValue_1739712777211_238(Interface_1739712777211_29, Class_1739712777211_19, Int64, Range<Int32>)
    | enumValue_1739712777211_666((UInt32) -> Unit, Interface_1739712777211_26)
}

@Frozen
internal func func_1739712777211_15(param_1739712777211_16: Rune): UInt8 { // block id: 17
    var var_1739712777211_32: Class_1739712777211_19 = Class_1739712777211_19();
    var_1739712777211_32.func_1739712777211_35();
    func_1739712777211_40(var_1739712777211_157);
    func func_1739712777211_170<T0, T1, T2>(param_1739712777211_171: Class_1739712777211_19): Struct_1739712777211_166<Interface_1739712777211_22> { // block id: 172
        let var_1739712777211_198: Struct_1739712777211_166<Interface_1739712777211_22> = Struct_1739712777211_166<Interface_1739712777211_22>();
        var var_1739712777211_209: Int64 = Int64(UInt8(Int8(Int8(Int8(-6)))));
        try { // block id: 174
            Struct_1739712777211_166<Interface_1739712777211_22>.var_1739712777211_178;
            Class_1739712777211_19.var_1739712777211_194
        } catch (_) { // block id: 196
            var_1739712777211_198;
            match (((Int8(var_1739712777211_203) & 127)..(Int8(var_1739712777211_203) & 127) : (var_1739712777211_209 | 1))) {
                case _ =>
                    Struct_1739712777211_166<Interface_1739712777211_22>();
                    let var_1739712777211_223: Rune = r'x';
                    if (var_1739712777211_56) {
                        r'E'
                    } else {
                        var_1739712777211_223
                    }

                case _ =>
                    if (false) {
                        r'9'
                    } else {
                        r'p'
                    }
            }
        };
        match (var_1739712777211_236) {
            case defaultValue =>
                var var_1739712777211_251: Float64 = Float64(-62.0);
                var_1739712777211_251

            case defaultValue => Float64(-105.0)

            case _: Range<UInt64> =>
                var_1739712777211_261;
                var_1739712777211_265 *= UInt16(0)
                Float64(-86.0)

            case _ => -var_1739712777211_274
        };
        Struct_1739712777211_166<Interface_1739712777211_22>()
    };

    func_1739712777211_170<Interface_1739712777211_23, Bool, Int16>(Class_1739712777211_19()).var_1739712777211_279[8]
}

@Deprecated
public enum Enum_1739712777211_293 {
    defaultValue
    | enumValue_1739712777211_299(Range<Int16>)
}

@Frozen
public func func_1739712777211_289<T0, T1>(param_1739712777211_290: UInt16): VArray<UInt8, $7> { // block id: 291
    let var_1739712777211_304: Int16 = Int16(66);
    var var_1739712777211_308: Enum_1739712777211_293 = Enum_1739712777211_293.enumValue_1739712777211_299(
        ((Int16(Int16(UInt8(Int8(14)))) & 127)..(Int16(Int16(Int16(23))) & 127) : (Int64(UInt16(244)) | 1)));
    var var_1739712777211_381: VArray<UInt8, $7> = [UInt8(106), UInt8(195), UInt8(132), UInt8(28), UInt8(219),
        UInt8(139), UInt8(231)];
    match ([Enum_1739712777211_293.enumValue_1739712777211_299(
        ((Int16(Int16(40)) & 127)..(Int16(var_1739712777211_304) & 127) : (Int64(-28) | 1))), var_1739712777211_308,
        Enum_1739712777211_293.enumValue_1739712777211_299(
        ((Int16(var_1739712777211_304) & 127)..(Int16(var_1739712777211_304) & 127) : (var_1739712777211_323 | 1))),
        Enum_1739712777211_293.enumValue_1739712777211_299(var_1739712777211_331),
        Enum_1739712777211_293.enumValue_1739712777211_299(var_1739712777211_331), var_1739712777211_308,
        Enum_1739712777211_293.enumValue_1739712777211_299(
        ((Int16(Int16(48)) & 127)..=(Int16(Int16(-26)) & 127) : (Int64(0) | 1))),
        Enum_1739712777211_293.enumValue_1739712777211_299(
        ((Int16(var_1739712777211_304) & 127)..(Int16(var_1739712777211_304) & 127) : (Int64(-8) | 1))),
        var_1739712777211_308, var_1739712777211_308][5]) {
        case _: Bool =>
            var var_1739712777211_353: (Int64, UInt8, Int64, Rune) = (Int64(UInt16(153)), UInt8(UInt8(Int8(UInt8(201)))),
                Int64(66), r'p');
            var_1739712777211_353;
            ();
            let var_1739712777211_365: VArray<UInt8, $7> = VArray<UInt8, $7>(repeat: UInt8(UInt8(8)));
            var_1739712777211_365

        case defaultValue => var_1739712777211_381

        case _ =>
            if (var_1739712777211_388) {
                VArray<UInt8, $7>(repeat: var_1739712777211_12)
            } else {
                VArray<UInt8, $7>(repeat: UInt8(99))
            }
    };
    let var_1739712777211_408: (Float32) -> UInt8 = {lambdaParameter_1739712777211_411: Float32 => UInt8(193)};
    Float32(-74.0) |> var_1739712777211_408;
    var_1739712777211_381
}

@Frozen
internal func func_1739712777211_422(param_1739712777211_423: Float32): Rune { // block id: 424
    var var_1739712777211_428: Enum_1739712777211_293 = Enum_1739712777211_293.enumValue_1739712777211_299(
        ((Int16(Int16(UInt16(16))) & 127)..(Int16(Int16(Int8(41))) & 127) : (Int64(Int32(Int32(62))) | 1)));
    var var_1739712777211_481: Range<UInt32> = ((UInt32(UInt32(Int16(UInt8(28)))) & 127)..=(UInt32(UInt32(Int8(UInt8(177)))) &
        127) : (Int64(UInt16(3)) | 1));
    match (match (var_1739712777211_428) {
        case _ => UInt8(89) & UInt8(165)
    }) {
        case 226 | 171 =>
            var_1739712777211_448;
            var_1739712777211_455

        case _ =>
            let var_1739712777211_462: Bool = true;
            if (var_1739712777211_462) {
                var_1739712777211_465
            } else {
                var_1739712777211_465
            };
            if (var_1739712777211_462) {
                "T`kaw}jQJ_"
            } else {
                "E->S?-eFWU"
            };
            var_1739712777211_455

        case 149 =>
            var_1739712777211_481;
            -Float64(-14.0)
            var_1739712777211_455

        case caseVar_1739712777211_496: Enum_1739712777211_233 => r'L'

        case _ =>
            var_1739712777211_504 += var_1739712777211_504
            if (false) {
                ((UInt8(UInt8(146)) & 127)..(UInt8(UInt8(69)) & 127) : (Int64(-23) | 1))
            } else {
                var_1739712777211_516
            };
            if (false) {
                var_1739712777211_455
            } else {
                r'O'
            }
    }
}

main(): Int64 {
    try {
        let var_1739712777211_417: (UInt16) -> VArray<UInt8, $7> = func_1739712777211_289<Range<Int8>, Bool>;
        Float32(-21.0) |> (func_1739712777211_422 ~> {
            lambdaParameter_1739712777211_284: Rune => (UInt16(UInt8(52)) |> var_1739712777211_417)[1]
        });
        var_1739712777211_533;
        var var_1739712777211_560: Interface_1739712777211_30<Int32> = Class_1739712777211_19();
        let var_1739712777211_602: Class_1739712777211_19 = Class_1739712777211_19();
        var var_1739712777211_656: Byte = UInt8(176);
        if (UInt8(var_1739712777211_203) < (var_1739712777211_550.var_1739712777211_553)) { // block id: 555
            let var_1739712777211_589: Byte = UInt8(200);
            if (true) { // block id: 558
                var_1739712777211_560;
                var_1739712777211_563
            } else { // block id: 580
                VArray<UInt8, $7>({i => UInt8(20)})
            };
            let var_1739712777211_605: Unit = ();
            var var_1739712777211_609: Int32 = Int32(UInt8(232));
            try { // block id: 592
                Int64(-19) / ((var_1739712777211_596) | 1);
                var_1739712777211_596;
                Int32(-2)
            } catch (_) { // block id: 600
                var_1739712777211_602;
                var_1739712777211_605;
                var_1739712777211_609 ^ Int32(-71)
            } finally { // block id: 613
                var_1739712777211_605;
                var_1739712777211_617 &&= var_1739712777211_56
                var_1739712777211_609
            };
            if (true) { // block id: 629
                Int64(-116)
            } else if (var_1739712777211_388) { // block id: 632
                var_1739712777211_56;
                var_1739712777211_596
            } else { // block id: 635
                var_1739712777211_605;
                var_1739712777211_596
            }
        } else { // block id: 638
            VArray<Unit, $2>(repeat: var_1739712777211_643)[0];
            var loopTimeVar_1739712777211_659: Int = 0;
            while ((false) && loopTimeVar_1739712777211_659 < 100) {
                loopTimeVar_1739712777211_659++;
                Class_1739712777211_19();
                var_1739712777211_653 = var_1739712777211_656
            };
            var_1739712777211_663[3]
        }
        // CRC Check All Variables
        var crcCheck = CrcCheck(5000, 32)
        crcCheck.updateBuffer(UInt64(var_1739712777211_203 * var_1739712777211_203), 64)
        crcCheck.updateBuffer(UInt64(var_1739712777211_265 * var_1739712777211_265), 64)
        crcCheck.updateBuffer(UInt64(var_1739712777211_504 * var_1739712777211_504), 64)
        crcCheck.updateBuffer(UInt64(var_1739712777211_596 * var_1739712777211_596), 64)
        crcCheck.updateBuffer(UInt64(var_1739712777211_653 * var_1739712777211_653), 64)
        crcCheck.updateBuffer(UInt64(var_1739712777211_656 * var_1739712777211_656), 64)
        crcCheck.crcCheck()
        crcCheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) {
        println("Exception: NoneValueException")
    }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        buffer = Array<Int64>(buffer_n, {i => 0})
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, {i => 0})
        var byte_c = 1
        var byte_index = 0
        while (value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[(i + buffer_index) % buffer.size] = byteArray[i + byte_index]
            i++
        }
        buffer_index = (buffer_index + i) % buffer.size
    }

    func updateBuffer(input: Bool, byte_n: Int64): Unit {
        if (input == true) {
            updateBuffer(1, byte_n)
        } else {
            updateBuffer(0, byte_n)
        }
    }

    func updateBuffer(input: Rune, byte_n: Int64): Unit {
        updateBuffer(UInt64(UInt32(input)), byte_n)
    }

    func updateBuffer(input: String, byte_n: Int64): Unit {
        for (c in input) {
            updateBuffer(c, byte_n)
        }
    }

    func updateBuffer(input: Unit, byte_n: Int64): Unit {
        updateBuffer(input.toString(), byte_n)
    }

    func updateBuffer(input: Any, byte_n: Int64): Unit {
        if (input is Hashable) {
            match (input as Hashable) {
                case Some(v) => updateBuffer(UInt64(v.hashCode()), byte_n)
                case _ => updateBuffer(1, byte_n)
            }
        } else if (input is ToString) {
            match (input as ToString) {
                case Some(v) => updateBuffer(v.toString(), byte_n)
                case _ => updateBuffer(1, byte_n)
            }
        } else {
            updateBuffer(1, byte_n)
        }
    }
    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, {i => 0})
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2 ** 2 * crc_output[i] + 2 ** 1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
