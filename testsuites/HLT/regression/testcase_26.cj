/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC-PIPE-1: %compiler %cmp_opt -Woff all %f -o %output 2>&1 |compare %f

let var49 : Bool = true
public let var109 : Int32 = Int32(UInt32(51))
let var115 : ?(Unit, Int32, Unit, Int16, UInt16, Float64, Unit, Int64) = Option<(Unit, Int32, Unit, Int16, UInt16, Float64, Unit, Int64)>.None
var var124 : Unit = ()
var var255 : Int64 = Int64(Int32(-82))
var var278 : UInt64 = UInt64(Int8(UInt8(UInt8(185))))
public var var366 : Range<UInt64> = ((UInt64(69)&127)..(UInt64(233)&127):((-117)|1))
public let var403 : Class29 = Class29()
let var415 : (String, Range<Int8>) = (###"@zYaCBnhwc"###, ((Int8(-47)&127)..=(Int8(Int8(Int8(-106)))&127):((Int64(Int64(UInt32(129)))|1))))
public let var484 : Range<Int64> = (((-92)&127)..(Int64(Int8(UInt8(Int8(24))))&127):((7|1)))
var var520 : Range<UInt8> = ((UInt8(73)&127)..(UInt8(218)&127):(16|1))
let var839 : Range<UInt64> = ((UInt64(UInt64(38))&127)..(UInt64(Int64(UInt32(42)))&127):((Int64(UInt32(UInt8(194)))|1)))
public var var1004 : Bool = (Class29() is Array<Range<UInt64>>)
let var1122 : (String, Range<UInt8>, Int16, Array<Int32>, Range<Int32>, Array<Range<Int32>>) = ("""
JbQz&
Xa{0c%
""", ((UInt8(218)&127)..=(UInt8(132)&127):((53|1))), Int16(Int16(UInt16(58))), [Int32(-48), Int32(-102), Int32(45), Int32(116), Int32(-22), Int32(-79), Int32(-119), Int32(73), Int32(-76), Int32(-54)], ((Int32(-68)&127)..=(Int32(-116)&127):((-9)|1)), [((Int32(59)&127)..(Int32(-87)&127):(39|1)), ((Int32(-17)&127)..=(Int32(119)&127):(92|1)), ((Int32(-55)&127)..=(Int32(8)&127):((58|1))), ((Int32(96)&127)..(Int32(-16)&127):((-50)|1)), ((Int32(-25)&127)..(Int32(-9)&127):((Int64((-76))|1))), ((Int32(UInt16(225))&127)..(Int32(Int8(-84))&127):((Int64(UInt8(10))|1))), ((Int32(23)&127)..(Int32(49)&127):(5|1)), ((Int32(0)&127)..=(Int32(UInt16(37))&127):(((-128)|1))), ((Int32(-4)&127)..(Int32(-53)&127):((-18)|1)), ((Int32(47)&127)..=(Int32(102)&127):((Int64(Int16(-25))|1)))])
public var var1487 : Range<Int16> = ((Int16(36)&127)..=(Int16(-71)&127):(29|1))
public var var1540 : Int16 = Int16(-19)
var var1620 : Float64 = 89.0
public var var1875 : ?Unit = Option<Unit>.None
public let var2070 : Array<(Unit, Int32, Unit, Int16, UInt16, Float64, Unit, Int64)> = Array<(Unit, Int32, Unit, Int16, UInt16, Float64, Unit, Int64)>(10){ i => ((), Int32(-78), (), Int16(UInt16(126)), UInt16(UInt16(UInt16(106))), (-101.0), (), (-30)) }
var var2237 : UInt16 = UInt16(2)
public var var2272 : Int64 = Int64(Int32(-106))
var var2284 : Int64 = (-78)
public var var2348 : (Range<UInt32>, Int16, Rune, Float32) = (((UInt32(Int32(Int32(46)))&127)..(UInt32(52)&127):(((-17)|1))), Int16(Int16(2)), 'k', Float32(-41.0))
var var2387 : Option<Option<Unit>> = Option<Option<Unit>>.None
public let var2401 : ?Unit = (Option<Rune>.None as Unit)
public let var2912 : ?(Int16, UInt64, UInt32, Bool) = Option<(Int16, UInt64, UInt32, Bool)>.None
public var var3070 : ?Int8 = (((), Int32(UInt16(UInt8(107))), (), Int16(-66), UInt16(UInt16(Int8(-81))), Float64(Float64(Float32(-39.0))), (), (-71)) as Int8)
var var3096 : Bool = ((Int32(UInt8(202)) as Int16) is (Range<Int16>, (Unit, Int32, Unit, Int16, UInt16, Float64, Unit, Int64)) -> UInt32)
let var3107 : Range<Int32> = ((Int32(97)&127)..(Int32(-12)&127):(36|1))
let var3117 : Bool = ([true, true, false, false, true, true, false, false, true, true] is Array<Range<UInt64>>)
var var3149 : Option<Range<Int64>> = (((83, 'S', UInt8(51), Int16(Int8(27)), UInt64(Int8(-5))), (), [Int32(UInt32(17)), Int32(UInt16(151)), Int32(-17), Int32(54), Int32(-96), Int32(92), Int32(Int8(-5)), Int32(Int32(-32)), Int32(12), Int32(Int32(-75))], ((UInt16(115)&127)..(UInt16(7)&127):(((-57)|1))), Int64(UInt64(252)), ((Int16(-84)&127)..(Int16(61)&127):((-116)|1))) as Range<Int64>)
public var var3296 : String = "1]$^C_K@~_"
public var var3339 : Array<Range<Int32>> = [((Int32(-63)&127)..=(Int32(68)&127):((-113)|1)), ((Int32(57)&127)..=(Int32(-42)&127):((-11)|1)), ((Int32(115)&127)..=(Int32(85)&127):((-61)|1)), ((Int32(101)&127)..(Int32(-7)&127):(33|1)), ((Int32(49)&127)..(Int32(-72)&127):((-31)|1)), ((Int32(105)&127)..=(Int32(79)&127):((-7)|1)), ((Int32(-65)&127)..(Int32(-7)&127):(116|1)), ((Int32(73)&127)..(Int32(-68)&127):((-105)|1)), ((Int32(109)&127)..=(Int32(-28)&127):(61|1)), ((Int32(-18)&127)..=(Int32(-40)&127):((-65)|1))]
let var3374 : Range<UInt16> = ((UInt16(85)&127)..=(UInt16(Int16(101))&127):(((-71)|1)))
let var3394 : Unit = ()
var var3401 : ((Int64, Rune, UInt8, Int16, UInt64), Unit, Array<Int32>, Range<UInt16>, Int64, Range<Int16>) = ((109, 'y', UInt8(Int8(126)), Int16(-42), UInt64((-73))), (), [Int32(-15), Int32(23), Int32(64), Int32(-111), Int32(54), Int32(-52), Int32(-62), Int32(-107), Int32(-75), Int32(-78)], ((UInt16(120)&127)..(UInt16(61)&127):(((-13)|1))), 68, ((Int16(UInt8(250))&127)..(Int16(Int8(-17))&127):((Int64(UInt32(Int8(50)))|1))))
public let var3444 : Rune = 'K'
public let var3619 : (Int64, Rune, UInt8, Int16, UInt64) = (72, 'T', UInt8(99), Int16(90), UInt64(Int16(Int16(47))))
var var3847 : Int8 = Int8(UInt8(141))
public let var4079 : ?Int16 = ([((Int32(52)&127)..(Int32(125)&127):((-45)|1)), ((Int32(83)&127)..=(Int32(83)&127):((-31)|1)), ((Int32(36)&127)..(Int32(112)&127):(47|1)), ((Int32(70)&127)..=(Int32(-75)&127):((-57)|1)), ((Int32(53)&127)..(Int32(119)&127):((-105)|1)), ((Int32(-55)&127)..(Int32(-114)&127):((-95)|1)), ((Int32(50)&127)..(Int32(-2)&127):(23|1)), ((Int32(104)&127)..=(Int32(1)&127):(0|1)), ((Int32(-21)&127)..(Int32(-103)&127):((-53)|1)), ((Int32(105)&127)..=(Int32(-34)&127):(79|1))] as Int16)
public var var4102 : Float64 = Float64(Float32(-92.0))
var var4117 : (Unit, Int32, Unit, Int16, UInt16, Float64, Unit, Int64) = ((), Int32(Int8(Int8(76))), (), Int16(UInt8(46)), UInt16(226), Float64(85.0), (), Int64(UInt64(104)))
public var var4183 : Int8 = Int8(11)
public var var4191 : Array<Class29> = Array<Class29>(10){ i => Class29() }
var var4389 : Int8 = Int8(-90)
let var4494 : Float32 = Float32(Float32(Float32(Float32(Float32(9.0)))))
let var4533 : ?(Int64, Rune, UInt8, Int16, UInt64) = Option<(Int64, Rune, UInt8, Int16, UInt64)>.None
var var4543 : ??Int16 = Option<Option<Int16>>.None
let var4593 : Option<Int64> = Option<Int64>.None
public let var4633 : Unit = ()
public var var4764 : Range<UInt8> = ((UInt8(34)&127)..(UInt8(186)&127):(57|1))
let var4982 : Unit = ()
var var5005 : UInt32 = UInt32(211)
public var var5074 : ?Bool = Option<Bool>.None
var var5187 : UInt32 = UInt32(165)
let var5192 : (Unit, Int32, Unit, Int16, UInt16, Float64, Unit, Int64) = ((), Int32(Int32(64)), (), Int16(-21), UInt16(103), (-27.0), (), (-35))
public open class Class29 <: Resource {
    public init() { // block id: 31

    }
;
    private static var var94 : (Unit, Int32, Unit, Int16, UInt16, Float64, Unit, Int64) = ((), Int32(47), (), Int16(57), UInt16(157), 32.0, (), 106);
    static let var120 : Unit = ();
    public static var var144 : Array<(Unit, Int32, Unit, Int16, UInt16, Float64, Unit, Int64)> = Array<(Unit, Int32, Unit, Int16, UInt16, Float64, Unit, Int64)>(10){ i => ((), Int32(-109), (), Int16(-40), UInt16(14), (-102.0), (), (-119)) };
    public init(namedParam82 ! : String) { // block id: 83
        (match (Option<(Unit, Int32, Unit, Int16, UInt16, Float64, Unit, Int64)>.Some(var94)) {
            case _ =>
                Int32(25) | var109;
                let var128 : UInt16 = UInt16(227);
                if (var49) { var115 } else { Option<(Unit, Int32, Unit, Int16, UInt16, Float64, Unit, Int64)>.Some((var120, Int32(-32), var124, Int16(-9), var128, (-44.0), var124, (-96))) }

        } ?? var144[8])[4];
        var var246 : UInt8 = UInt8(1);
        var var261 : Bool = true;
        var loopTimeVar265 : Range<UInt64> = ((UInt64(UInt64(81))&127)..=(UInt64(UInt16(198))&127):((21|1)));
        for (i in loopTimeVar265 where match {
            case var49 || false =>
            var246 * UInt8(216);
            var var251 : UInt64 = UInt64(138);
            ((var251&127)..=(UInt64(131)&127):((var255|1)));
            var49
            case _ =>
            var261
        }) {
            var246
        }
    }
;
    public open func func349(namedParam350 ! : Range<UInt64>, namedParam351 ! : UInt64, namedParam352 ! : Option<Bool>, namedParam353 ! : Range<Int64>) : Int32 { // block id: 354
        [Int32(-120), Int32(-78), Int32(-10), Int32(-18), Int32(-40), Int32(108), Int32(-29), Int32(112), Int32(69), Int32(-113)][6]
    }
;
    public open func func408(namedParam409 ! : String, namedParam410 ! : Option<Bool>) : Unit { // block id: 411

    }
;
    public static let var881 : (Bool, Array<(Unit, Int32, Unit, Int16, UInt16, Float64, Unit, Int64)>, Range<Int32>) = (true, [((), Int32(28), (), Int16(-118), UInt16(73), 90.0, (), 112), ((), Int32(92), (), Int16(-60), UInt16(19), (-124.0), (), 13), ((), Int32(56), (), Int16(-74), UInt16(52), 113.0, (), 95), ((), Int32(-127), (), Int16(53), UInt16(224), 73.0, (), 40), ((), Int32(47), (), Int16(-125), UInt16(101), (-52.0), (), (-116)), ((), Int32(61), (), Int16(-44), UInt16(121), 122.0, (), 48), ((), Int32(114), (), Int16(0), UInt16(175), 103.0, (), 97), ((), Int32(-25), (), Int16(-59), UInt16(0), 85.0, (), (-91)), ((), Int32(72), (), Int16(-43), UInt16(139), (-15.0), (), 64), ((), Int32(78), (), Int16(14), UInt16(156), 113.0, (), (-62))], ((Int32(5)&127)..(Int32(-74)&127):((45|1))));
    let var1050 : Unit = ();
    public var var1219 : UInt16 = UInt16(236);
    var var1446 : UInt32 = UInt32(6);
    public static var var1460 : Int32 = Int32(34);
    private static var var1481 : UInt32 = UInt32(216);
    static let var1585 : Int16 = Int16(-13);
    static let var1603 : Unit = ();
    public init(namedParam1427 ! : Option<Unit>, namedParam1428 ! : Option<Bool>, optionalParam1429 ! : Range<Int64> = ((4&127)..=(Int64(Int16(UInt8(121)))&127):(((-41)|1)))) { // block id: 1436
        func func1449(optionalParam1450 ! : Float64 = Float64(29.0), namedParam1453 ! : Range<UInt32>, namedParam1454 ! : Range<Int64>) : UInt32 { // block id: 1455
            var var1473 : Rune = 'H';
            try { // block id: 1457
                var1460 >>= ((var109) & 7);
                (namedParam1427 ?? var120);
                Option<Rune>.Some(var1473).getOrThrow()
            } finally { // block id: 1475
                if (false) { // block id: 1478
                    var1481 >>= ((var1481) & 7);
                    var1473
                } else { // block id: 1485
                    var1487;
                    'B'
                }
            };
            var var1499 : UInt8 = UInt8(UInt8(0));
            var var1504 : ?UInt32 = Option<UInt32>.Some(UInt32(UInt16(Int16(-82))));
            UInt32((try { // block id: 1497
                var1499;
                ();
                var1504
            } finally { // block id: 1509
                var120;
                var1481 >>= ((UInt32(106)) & 7);
                if (false) { Option<UInt32>.None } else { var1504 }
            } ?? var1481 * UInt32(130)))
        }
;
        func func1438(namedParam1439 ! : Range<Int16>, namedParam1440 ! : (Unit, Int32, Unit, Int16, UInt16, Float64, Unit, Int64)) : UInt32 { // block id: 1441
            this.var1446 ^= func1449(namedParam1453 : [((UInt32(208)&127)..=(UInt32(137)&127):((-41)|1)), ((UInt32(85)&127)..(UInt32(36)&127):(3|1)), ((UInt32(66)&127)..=(UInt32(125)&127):((-22)|1)), ((UInt32(205)&127)..(UInt32(155)&127):(120|1)), ((UInt32(251)&127)..(UInt32(103)&127):(98|1)), ((UInt32(60)&127)..(UInt32(152)&127):(64|1)), ((UInt32(68)&127)..=(UInt32(234)&127):((-75)|1)), ((UInt32(175)&127)..=(UInt32(180)&127):(99|1)), ((UInt32(121)&127)..=(UInt32(62)&127):(125|1)), ((UInt32(23)&127)..=(UInt32(166)&127):((-77)|1))][1], namedParam1454 : var484);
            var1481
        }
;
        func1438(namedParam1439 : try { // block id: 1528
            var124;
            ((Int16(33)&127)..=(Int16(-101)&127):(3|1))
        } finally { // block id: 1531
            let var1543 : UInt16 = UInt16(Int8(17));
            (var49, [((), var109, var120, var1540, var1543, 88.0, var120, var255), ((), var1460, var120, Int16(-68), UInt16(7), 51.0, (), var255), var94, (var120, var109, (), Int16(-55), var1543, (-72.0), (), (-60)), (var120, Int32(-112), (), Int16(-15), UInt16(252), (-72.0), (), var255), var94, var94, var94, ((), Int32(-18), var124, var1585, UInt16(182), 70.0, (), var255), var94], ((var1460&127)..=(var109&127):((var255|1))));
            ((Int16(-44)&127)..=(Int16(-84)&127):((-86)|1))
        }, namedParam1440 : try { // block id: 1598
            (var120, Int32(-13), var1603, Int16(70), UInt16(131), (-68.0), (), 55)
        } finally { // block id: 1610
            ();
            ();
            (var124, Int32(105), var120, var1540, UInt16(61), var1620, var1603, var255)
        })
    }
;
    public init(param1642 : Option<(Int16, UInt64, UInt32, Bool)>, param1643 : (Int16, UInt64, UInt32, Bool), optionalParam1644 ! : Range<UInt64> = ((UInt64(130)&127)..(UInt64(51)&127):((-23)|1)), optionalParam1646 ! : Option<UInt64> = Option<UInt64>.Some(UInt64(179))) { // block id: 1649
        ()
    }
;
    static let var2691 : Array<Int32> = [Int32(-30), Int32(112), Int32(95), Int32(74), Int32(70), Int32(12), Int32(-22), Int32(-13), Int32(7), Int32(80)];
    private static let var2710 : Rune = 'R';
    public static let var2721 : Range<UInt16> = ((UInt16(109)&127)..(UInt16(84)&127):((-32)|1));
    private static var var2798 : Int8 = Int8(2);
    public init(optionalParam2445 ! : (Int8) -> Range<Int64> = { lambdaParameter2448 : Int8 => (((-59)&127)..=(116&127):(84|1)) }, optionalParam2453 ! : (Array<Int32>, Array<Bool>, ((Int64, Rune, UInt8, Int16, UInt64), Unit, Array<Int32>, Range<UInt16>, Int64, Range<Int16>)) = ([Int32(17), Int32(60), Int32(58), Int32(-19), Int32(-77), Int32(-56), Int32(-118), Int32(-42), Int32(54), Int32(118)], [true, true, true, ((18, 'P', UInt8(135), Int16(-117), UInt64(7)) is Range<Int8>), (((Int8(-23)&127)..=(Int8(-1)&127):(60|1)) is Array<Bool>), ([(), (), (), (), (), (), (), (), (), ()] is Option<(Int16, UInt64, UInt32, Bool)>), true, (((Int16(65), UInt64(20), UInt32(55), true) as (Int16, UInt64, UInt32, Bool)) is (Range<UInt64>, UInt64, Option<Bool>, Range<Int64>) -> Int32), ((###"J75OL%6Vq'"###, ((UInt8(15)&127)..(UInt8(27)&127):(19|1)), Int16(0), [Int32(-72), Int32(-88), Int32(-29), Int32(-15), Int32(99), Int32(80), Int32(103), Int32(106), Int32(60), Int32(-91)], ((Int32(-6)&127)..=(Int32(91)&127):(40|1)), [((Int32(22)&127)..(Int32(38)&127):(64|1)), ((Int32(-8)&127)..(Int32(-125)&127):(82|1)), ((Int32(115)&127)..=(Int32(-80)&127):((-16)|1)), ((Int32(-46)&127)..=(Int32(-107)&127):(9|1)), ((Int32(46)&127)..=(Int32(-57)&127):(59|1)), ((Int32(49)&127)..(Int32(121)&127):(69|1)), ((Int32(-96)&127)..=(Int32(-128)&127):(54|1)), ((Int32(-12)&127)..=(Int32(-10)&127):((-13)|1)), ((Int32(42)&127)..(Int32(-8)&127):(119|1)), ((Int32(1)&127)..(Int32(42)&127):((-122)|1))]) is Option<(Int16, UInt64, UInt32, Bool)>), false], ((Int64(UInt8(80)), 'J', UInt8(161), Int16(81), UInt64(28)), (), [Int32(UInt32(81)), Int32(-40), Int32(102), Int32(UInt8(32)), Int32(UInt32(185)), Int32(17), Int32(-73), Int32(109), Int32(Int8(16)), Int32(28)], ((UInt16(UInt8(146))&127)..=(UInt16(182)&127):((Int64(Int8(91))|1))), (-107), ((Int16(-15)&127)..=(Int16(-74)&127):((-45)|1)))), namedParam2520 ! : Option<UInt32>) { // block id: 2521
        let var2527 : ?UInt64 = (((Int64(Int16(29))&127)..(Int64(Int32(Int32(-12)))&127):(((-115)|1))) as UInt64);
        let var2687 : UInt32 = UInt32(18);
        var var2713 : UInt8 = UInt8(UInt8(120));
        var var2838 : Int16 = Int16(-4);
        match (match (if (false) { var2527 } else { Option<UInt64>.Some(var278) } ) {
                case caseVar2540 : String =>
                    var var2544 : ?Unit = Option<Unit>.None;
                    Option<Option<Unit>>.Some(var2544);
                    let var2565 : Float64 = (-32.0);
                    [var94, var94, ((), Int32(54), var124, var1585, var2237, (-65.0), var1603, var2284), ((), var109, (), var1585, var2237, var2565, var124, var2284), ((), Int32(30), var120, Int16(-79), var2237, (-122.0), var120, (-5)), (var1603, var1460, var1603, var1540, var2237, var1620, (), (-63)), ((), Int32(54), (), var1540, var2237, var1620, (), var255), ((), var109, var1603, var1585, UInt16(153), var2565, (), 70), var94, ((), Int32(71), var1603, var1585, UInt16(149), var1620, (), var255)]

                case _ : Option<Int16> =>
                    var1603;
                    var1603;
                    var var2629 : Unit = ();
                    [(var120, var109, var124, Int16(-73), var2237, (-104.0), var2629, 33), var94, ((), var109, var124, var1585, var2237, var1620, (), var2284), ((), var109, (), Int16(-25), var2237, var1620, (), 50), var94, ((), Int32(50), var2629, Int16(-127), var2237, var1620, (), var2284), ((), Int32(13), (), var1585, UInt16(249), 11.0, (), var2284), var94, (var1603, Int32(-115), (), Int16(-113), var2237, (-113.0), (), (-126)), var94]

                case _ : Range<UInt32> =>
                    var1481 &= var2687;
                    let var2704 : Array<Bool> = [false, true, true, false, false, true, false, false, true, true];
                    (var2691, var2704, (((-115), var2710, var2713, Int16(-81), UInt64(89)), var124, [Int32(-20), Int32(34), Int32(-121), Int32(60), Int32(-57), Int32(23), Int32(30), Int32(36), Int32(0), Int32(-45)], var2721, 86, var1487));
                    let var2780 : UInt16 = UInt16(31);
                    [var94, (var1603, var109, var124, Int16(-14), UInt16(88), var1620, var124, 101), ((), var1460, var120, var1540, UInt16(244), 95.0, (), (-34)), var94, ((), var109, var124, Int16(42), var2237, var1620, (), 42), ((), Int32(-79), (), Int16(87), UInt16(44), var1620, (), 53), (var120, var1460, var124, var1540, var2237, var1620, var124, var255), var94, (var120, Int32(-103), (), Int16(-56), var2780, var1620, var1603, 36), ((), var109, (), Int16(-79), UInt16(104), var1620, (), 4)]

                case _ =>
                    var2798 >>= ((Int8(20)) & 7);
                    ();
                    [((), Int32(94), var1603, var1585, var2237, var1620, (), 1), ((), Int32(38), (), Int16(-85), UInt16(68), var1620, (), (-38)), (var124, Int32(-114), var1603, Int16(-4), var2237, (-90.0), var1603, var2284), var94, var94, var94, (var1603, var109, var120, var2838, var2237, var1620, (), 121), var94, ((), Int32(-85), (), var1585, UInt16(135), var1620, var120, var2284), (var1603, var1460, (), Int16(-88), UInt16(27), var1620, (), var2272)]

            }) {
            case caseVar2865 =>
                let var2868 : Array<Range<Int32>> = Array<Range<Int32>>(10){ i => ((Int32(8)&127)..=(Int32(-41)&127):(121|1)) };
                var2868;
                UInt32(1) != UInt32(178)

            case _ =>
                false

        };
        var var2900 : Enum2024<Option<Int8>, Option<Range<Int64>>> = Enum2024<Option<Int8>, Option<Range<Int64>>>.defaultValue;
        var loopTimeVar2923 : Range<UInt64> = ((UInt64(22)&127)..(UInt64(94)&127):((Int64(Int32(48))|1)));
        for (i in loopTimeVar2923 where match (var2900) {
            case _ =>
                var2838 += Int16(-81);
                var1004

        }) {
            var var2916 : Float32 = Float32(Float32(26.0));
            try (resource = Class29()) { // block id: 2910
                var2912;
                var2916 /= Float32((Int32(Float32(-14.0))) | 1)
            } finally { // block id: 2920
                var1603;
                var120
            }
        }
    }
;
    public static let var3007 : (Int16, UInt64, UInt32, Bool) = (Int16(-126), UInt64(162), UInt32(2), false);
    private var var3700 : Int64 = 96;
    public static var var3715 : Int32 = Int32(117);
    public open func func3570(namedParam3571 ! : String, namedParam3572 ! : Range<Int64>) : (Int64, Rune, UInt8, Int16, UInt64) { // block id: 3573
        match (try { // block id: 3577
                var1620
            } finally { // block id: 3579
                (((-78)&127)..((-127)&127):(26|1));
                var1620
            }) {
            case _ : Array<(Unit, Int32, Unit, Int16, UInt16, Float64, Unit, Int64)> =>
                ();
                var2272

            case _ =>
                104 + var255

        } * (-68);
        var var3696 : Int32 = Int32(UInt32(117));
        let var3734 : Unit = ();
        if (try { // block id: 3595
            ();
            var2284;
            var3117
        } catch (e: Exception) { // block id: 3599
            var1540 &= var1585;
            var var3605 : Float32 = Float32(120.0);
            // var3605 %= Float32((Int32(Float32(-53.0))) | 1);
            var3117
        } finally { // block id: 3609
            ();
            false
        }) { (Option<(Int64, Rune, UInt8, Int16, UInt64)>.Some(var3619) ?? match ([this, Class29(Option<(Int16, UInt64, UInt32, Bool)>.None, var3007, optionalParam1644 : ((UInt64(115)&127)..=(UInt64(188)&127):((-42)|1))), var403, Class29(namedParam2520 : Option<UInt32>.Some(var1446)), this, var403, this, this, Class29(Option<(Int16, UInt64, UInt32, Bool)>.Some((var1585, UInt64(1), var1446, false)), (var1585, UInt64(246), UInt32(32), var3096), optionalParam1644 : var839), this]) {
            case _ =>
                if (var3096) { var3619 } else { var3619 }

            case _ : UInt32 =>
                'M';
                (114, 'W', UInt8(209), var1540, UInt64(204))

            case _ =>
                var var3678 : UInt8 = UInt8(Int8(77));
                var3678 /= ((var3678) | 1);
                var3619

        }) } else { match (if (false) { [((Int32(98)&127)..=(Int32(-73)&127):((-24)|1)), ((var109&127)..=(var109&127):(((-98)|1))), ((Int32(34)&127)..=(Int32(-125)&127):(29|1)), ((var1460&127)..=(var3696&127):((var3700|1))), ((Int32(-31)&127)..(Int32(112)&127):((var3700|1))), ((Int32(38)&127)..=(Int32(90)&127):(33|1)), ((var3696&127)..(var1460&127):((12|1))), ((Int32(15)&127)..(Int32(-30)&127):(64|1)), ((Int32(-85)&127)..(Int32(55)&127):(101|1)), ((var3715&127)..(Int32(92)&127):((32|1)))] } else { var3339 } ) {
            case caseVar3722 =>
                ();
                if (true) { var3619 } else { var3619 }

            case caseVar3731 : Range<Int32> =>
                var3734;
                (16, var2710, UInt8(98), Int16(75), var278)

            case _ : Array<Int32> =>
                var1540--;
                var1050;
                var3619

            case caseVar3751 =>
                if (false) { var3619 } else { (var3700, 'g', UInt8(21), var1540, UInt64(16)) }

            case _ =>
                (var255, var2710, UInt8(40), Int16(52), UInt64(219))

        } }
    }

    public func isClosed(): Bool { return false }
    public func close(): Unit {}
}




func func399(param400 : Range<Int64>) : Unit { // block id: 401
    var403;
    var403.func408(namedParam409 : var415[0], namedParam410 : match (var49) {
        case caseVar431 : Class29 =>
            Int8(7);
            if (true) { Option<Bool>.Some(true) } else { Option<Bool>.None }

        case _ =>
            var124;
            var var446 : ?Bool = Option<Bool>.Some(true);
            if (false) { var446 } else { Option<Bool>.Some(var49) }

        case true =>
            Option<Bool>.None

        case _ =>
            Option<Bool>.None

    });
    var278 <<= ((-var278) & 7)
}


public func func466(param467 : Int8) : Range<Int64> { // block id: 468
    func func470(param471 : Range<UInt8>) : Range<Int64> { // block id: 472
        (Option<Range<Int64>>.None ?? try { // block id: 480
            if (true) { var484 } else { ((var255&127)..(var255&127):(((-61)|1))) }
        } finally { // block id: 496
            let var498 : (Range<UInt32>, Int16, Rune, Float32) = (((UInt32(113)&127)..=(UInt32(81)&127):(97|1)), Int16(-59), 'z', Float32(Float32(Float32(Float32(52.0)))));
            var498;
            [var109, Int32(-120), var109, Int32(101), var109, var109, Int32(-77), var109, Int32(87), var109];
            var484
        })
    }
;
    func470(var520)
}




func func1062(param1063 : (Range<Int64>) -> Unit) : Int16 { // block id: 1066
    let var1087 : (Int64, Rune, UInt8, Int16, UInt64) = (80, 'N', UInt8(UInt8(Int8(-22))), Int16(Int16(UInt8(UInt8(66)))), UInt64(UInt8(153)));
    let var1102 : Array<Int32> = [Int32(110), Int32(96), Int32(95), Int32(89), Int32(-71), Int32(-46), Int32(-12), Int32(-24), Int32(54), Int32(119)];
    var loopTimeVar1111 : Int64 = 0;
    do {
        loopTimeVar1111++;

    } while ((([Int32(37), Int32(14), Int32(-121), Int32(24), var109, Int32(87), var109, var109, Int32(39), var109], [false, false, true, true, true, false, true, true, false, false], (var1087, (), var1102, ((UInt16(82)&127)..(UInt16(144)&127):(117|1)), 58, ((Int16(0)&127)..(Int16(75)&127):((-67)|1))))[1][4]) && loopTimeVar1111 < 100 ) ;
    var839;
    let var1176 : (Int16, UInt64, UInt32, Bool) = (Int16(-6), UInt64(82), UInt32(UInt32(UInt16(Int16(77)))), false);
    ((var1122[4] as Int16) ?? (Option<(Int16, UInt64, UInt32, Bool)>.None ?? var1176)[0])
}

func func1194(param400 : Range<Int64>) : Unit { // block id: 401
    var403;
    var403.func408(namedParam409 : var415[0], namedParam410 : match (var49) {
        case caseVar431 : Class29 =>
            Int8(7);
            if (true) { Option<Bool>.Some(true) } else { Option<Bool>.None }

        case _ =>
            var124;
            var var446 : ?Bool = Option<Bool>.Some(true);
            if (false) { var446 } else { Option<Bool>.Some(var49) }

        case true =>
            Option<Bool>.None

        case _ =>
            Option<Bool>.None

    });
    var278 <<= ((-var278) & 7)
}

public func func1203(param400 : Range<Int64>) : Unit { // block id: 401
    var403;
    var403.func408(namedParam409 : var415[0], namedParam410 : match (var49) {
        case caseVar431 : Class29 =>
            Int8(7);
            if (true) { Option<Bool>.Some(true) } else { Option<Bool>.None }

        case _ =>
            var124;
            var var446 : ?Bool = Option<Bool>.Some(true);
            if (false) { var446 } else { Option<Bool>.Some(var49) }

        case true =>
            Option<Bool>.None

        case _ =>
            Option<Bool>.None

    });
    var278 <<= ((-var278) & 7)
}

func func1206(param1207 : ((Int64, Rune, UInt8, Int16, UInt64), Unit, Array<Int32>, Range<UInt16>, Int64, Range<Int16>)) : Unit { // block id: 1208

}





public enum Enum2024<T0, T1> {
    defaultValue
}

func func2313(param2314 : Int8) : Option<Unit> { // block id: 2315
    try { // block id: 2317
        if (var1004) { // block id: 2320
            [var109, var109, var109, var109, Int32(-32), var109, Int32(-108), var109, var109, var109];
            ()
        } else if (true) { // block id: 2334
            ();
            -UInt16(162);
            var124
        };
        var var2341 : (Int8) -> Range<Int64> = func466;
        Int8(-10)|>var2341
    } catch (e: Exception) { // block id: 2344
        func466(param2314)
    };
    var2348;
    var var2368 : Float32 = Float32(Float32(Float32(Float32(Float32(48.0)))));
    let var2382 : Int16 = Int16(UInt8(64));
    var var2394 : Int32 = Int32(Int8(Int8(Int8(-92))));
    let var3039 : Range<Int32> = ((Int32(5)&127)..(Int32(-94)&127):((-110)|1));
    func func2414(optionalParam2415 ! : Enum2024<Option<Int8>, Option<Range<Int64>>> = Enum2024<Option<Int8>, Option<Range<Int64>>>.defaultValue, optionalParam2417 ! : (((Int64, Rune, UInt8, Int16, UInt64), Unit, Array<Int32>, Range<UInt16>, Int64, Range<Int16>)) -> Unit = { lambdaParameter2420 : ((Int64, Rune, UInt8, Int16, UInt64), Unit, Array<Int32>, Range<UInt16>, Int64, Range<Int16>) =>  }) : Option<Unit> { // block id: 2424
        let var2430 : (String, (Int64, Rune, UInt8, Int16, UInt64), Option<UInt32>, ((Int64, Rune, UInt8, Int16, UInt64), Unit, Array<Int32>, Range<UInt16>, Int64, Range<Int16>), Range<UInt8>, (Unit, Int32, Unit, Int16, UInt16, Float64, Unit, Int64)) = ("Z#1ozswOd2", (Int64(UInt8(67)), '3', UInt8(92), Int16(-63), UInt64(105)), ((Int8(86), Class29(optionalParam2453 : ([Int32(113), Int32(-83), Int32(53), Int32(-68), Int32(97), Int32(45), Int32(13), Int32(41), Int32(84), Int32(25)], [true, true, false, true, true, false, false, false, false, true], (((-9), '3', UInt8(243), Int16(78), UInt64(82)), (), [Int32(93), Int32(-99), Int32(-27), Int32(6), Int32(55), Int32(-68), Int32(-64), Int32(20), Int32(-32), Int32(126)], ((UInt16(107)&127)..=(UInt16(88)&127):(107|1)), 96, ((Int16(-93)&127)..=(Int16(-27)&127):(22|1)))), namedParam2520 : Option<UInt32>.Some(UInt32(229))), ([((UInt64(74)&127)..(UInt64(137)&127):(78|1)), ((UInt64(15)&127)..(UInt64(182)&127):(120|1)), ((UInt64(195)&127)..(UInt64(149)&127):(2|1)), ((UInt64(36)&127)..(UInt64(198)&127):(59|1)), ((UInt64(8)&127)..(UInt64(129)&127):(79|1)), ((UInt64(160)&127)..(UInt64(178)&127):(116|1)), ((UInt64(24)&127)..=(UInt64(176)&127):((-128)|1)), ((UInt64(252)&127)..(UInt64(172)&127):(106|1)), ((UInt64(82)&127)..(UInt64(184)&127):((-76)|1)), ((UInt64(180)&127)..=(UInt64(210)&127):((-9)|1))] is (Array<Int32>, Array<Bool>, ((Int64, Rune, UInt8, Int16, UInt64), Unit, Array<Int32>, Range<UInt16>, Int64, Range<Int16>))), Int16(10), UInt64(246)) as UInt32), (((-72), '4', UInt8(28), Int16(91), UInt64(UInt8(148))), (), [Int32(UInt8(185)), Int32(-115), Int32(Int16(43)), Int32(-68), Int32(UInt16(122)), Int32(114), Int32(UInt32(232)), Int32(UInt16(34)), Int32(UInt8(2)), Int32(Int8(96))], ((UInt16(187)&127)..=(UInt16(114)&127):((9|1))), Int64(Int32(27)), ((Int16(-92)&127)..(Int16(80)&127):((-5)|1))), ((UInt8(149)&127)..(UInt8(Int8(-66))&127):((92|1))), ((), Int32(94), (), Int16(Int8(-114)), UInt16(26), 39.0, (), 125));
        Option<UInt32>.Some((var2430[2] ?? UInt32(UInt16(196))));
        try { // block id: 3003
            Class29.var3007;
            ();
            var var3024 : Range<Int32> = ((Int32(-99)&127)..(Int32(UInt8(Int8(-122)))&127):(((-4)|1)));
            try { // block id: 3015
                ((var109&127)..=(var109&127):(((-66)|1)))
            } finally { // block id: 3020
                if (var49) { var3024 } else { ((var109&127)..(var109&127):((38|1))) }
            }
        } catch (_) { // block id: 3035
            if (var1004) { var3039 } else { var3039 }
        } finally { // block id: 3042
            var3039
        };
        var loopTimeVar3058 : Int64 = 0;
        Option<Unit>.Some(do {
            loopTimeVar3058++;
            ();
            var124
        } while ((try { // block id: 3047
            var124;
            ();
            true
        } finally { // block id: 3051
            var366;
            false
        }) && loopTimeVar3058 < 100 ) )
    }
;
    (((var2368 as Option<Option<Unit>>) ?? match (((Int8(98)&127)..(Int8(-64)&127):(56|1))) {
        case _ =>
            var124;
            var2382 < Int16(15);
            var2387

        case _ =>
            var2394++;
            Option<Option<Unit>>.Some(var2401)

        case _ =>
            Option<Option<Unit>>.None

    }) ?? if (var49) { (Option<Option<Unit>>.None ?? Option<Unit>.Some(())) } else { func2414(optionalParam2415 : Enum2024<Option<Int8>, Option<Range<Int64>>>.defaultValue, optionalParam2417 : func1206) } )
}


func func2308(param2309 : UInt32) : Bool { // block id: 2310
    let var3062 : (Int8) -> Option<Unit> = func2313;
    let var3088 : Int8 = Int8(-105);
    var loopTimeVar3130 : Int64 = 0;
    (((var3070 ?? var3088)|>var3062) ?? while ((if (var49) { // block id: 3093
        var var3103 : Bool = false;
        if (var3096) { (var3103, var2070, var3107) } else { (false, var2070, ((Int32(75)&127)..(Int32(-67)&127):(31|1))) } ;
        var1004 ||= true;
        var3117
    } else if (true) { // block id: 3121
        var1540;
        var49
    } else { // block id: 3124
        false
    }) && loopTimeVar3130 < 100 ) {
        loopTimeVar3130++;
        var124;
        var3088
    });
    var var3132 : (Int64, Rune, UInt8, Int16, UInt64) = (Int64(Int8(Int8(UInt8(29)))), '0', UInt8(Int8(-106)), Int16(-118), UInt64(86));
    var3132;
    false
}



func func2020(param2021 : (Range<UInt32>, Int16, Rune, Float32)) : Option<Option<Unit>> { // block id: 2022
    var var2039 : (Int8, Class29, Bool, Int16, UInt64) = (Int8(-89), Class29(Option<(Int16, UInt64, UInt32, Bool)>.None, (Int16(Int16(34)), UInt64(96), UInt32(UInt32(24)), (Int16(45) is Array<Int32>)), optionalParam1644 : ((UInt64(Int16(78))&127)..(UInt64(UInt8(126))&127):(((-92)|1)))), (Float64(Float64((-4.0))) is Option<Unit>), Int16(Int16(Int8(UInt8(13)))), UInt64(Int32(71)));
    var var2269 : Unit = ();
    match (Enum2024<Option<Int8>, Option<Range<Int64>>>.defaultValue) {
        case defaultValue =>
            if (false) { (Int8(-86), Class29(), false, var1540, UInt64(16)) } else { var2039 } ;
            var124;
            var2070

        case _ =>
            ();
            let var2210 : (Unit, Int32, Unit, Int16, UInt16, Float64, Unit, Int64) = ((), Int32(Int16(-2)), (), Int16(-13), UInt16(240), Float64(Float32(Float32(Float32(-49.0)))), (), Int64(UInt32(Int16(-102))));
            if (var1004) { var2210 } else { var2210 } ;
            if (var1004) { [var2210, (var124, Int32(90), (), Int16(-12), var2237, var1620, (), (-37)), var2210, ((), Int32(-12), (), var1540, var2237, 51.0, var124, (-74)), ((), Int32(-43), (), Int16(-72), UInt16(195), (-127.0), var124, var255), ((), Int32(55), var124, var1540, UInt16(92), (-90.0), var2269, var2272), (var124, var109, var2269, Int16(-60), UInt16(34), var1620, var2269, var2284), (var2269, Int32(-84), var124, var1540, var2237, var1620, (), (-91)), (var124, Int32(1), (), var1540, UInt16(67), var1620, var124, var2272), var2210] } else { var2070 }

    };
    let var3145 : (UInt32) -> Bool = func2308;
    var var3306 : Array<Int32> = [Int32(-62), Int32(53), Int32(108), Int32(70), Int32(-66), Int32(83), Int32(-64), Int32(-100), Int32(75), Int32(94)];
    if ((match (var3149) {
        case _ =>
            let var3187 : Array<Int32> = Array<Int32>(10){ i => Int32(UInt8(72)) };
            var3187;
            if (true) { [true, false, var3117, true, var1004, false, var1004, true, true, true] } else { [var1004, false, false, var3096, var3117, false, false, var49, true, var3096] } ;
            let var3231 : UInt32 = UInt32(Int16(UInt8(Int8(60))));
            -var3231

    }|>var3145)) { // block id: 3236
        [var109, var109, Int32(-24), var109, Int32(74), var109, Int32(-8), var109, var109, var109];
        let var3254 : Option<(Array<Int32>, Array<Bool>, ((Int64, Rune, UInt8, Int16, UInt64), Unit, Array<Int32>, Range<UInt16>, Int64, Range<Int16>))> = Option<(Array<Int32>, Array<Bool>, ((Int64, Rune, UInt8, Int16, UInt64), Unit, Array<Int32>, Range<UInt16>, Int64, Range<Int16>))>.None;
        let var3258 : Array<Int32> = [Int32(-77), Int32(44), Int32(8), Int32(91), Int32(-53), Int32(-64), Int32(-68), Int32(117), Int32(-62), Int32(-31)];
        var var3272 : ((Int64, Rune, UInt8, Int16, UInt64), Unit, Array<Int32>, Range<UInt16>, Int64, Range<Int16>) = (((-73), '4', UInt8(204), Int16(39), UInt64(0)), (), [Int32(-56), Int32(-3), Int32(-79), Int32(30), Int32(-50), Int32(-22), Int32(-110), Int32(117), Int32(97), Int32(-96)], ((UInt16(132)&127)..(UInt16(234)&127):((-67)|1)), Int64(Int8(-91)), ((Int16(-82)&127)..(Int16(0)&127):((-23)|1)));
        (var3254 ?? (var3258, [var3096, true, true, var1004, true, var3117, true, var3096, true, true], var3272))
    } else if (var3096) { // block id: 3287
        var var3301 : UInt8 = UInt8(34);
        (Option<(String, Range<UInt8>, Int16, Array<Int32>, Range<Int32>, Array<Range<Int32>>)>.Some((var3296, ((UInt8(135)&127)..=(var3301&127):((var2272|1))), Int16(-54), var3306, var3107, [((Int32(44)&127)..=(var109&127):((var255|1))), ((Int32(-21)&127)..(Int32(-104)&127):(101|1)), var3107, ((Int32(2)&127)..(Int32(-98)&127):((-37)|1)), var3107, var3107, ((Int32(-51)&127)..(var109&127):((var2284|1))), ((var109&127)..(Int32(43)&127):((var2272|1))), ((Int32(16)&127)..(Int32(-41)&127):((-1)|1)), ((var109&127)..(var109&127):((var2272|1)))])) ?? ("eH(q:DT<_)", ((UInt8(251)&127)..(UInt8(217)&127):(46|1)), var1540, var3306, var3107, var3339));
        (var3306, [var3117, var49, var49, false, var49, false, var3117, true, true, false], ((var2284, 's', var3301, Int16(74), UInt64(123)), (), [Int32(55), Int32(121), Int32(-14), Int32(62), Int32(-8), var109, var109, var109, var109, var109], var3374, 45, ((var1540&127)..=(Int16(-5)&127):(((-46)|1)))))
    } else { // block id: 3385
        try (resource = Class29()) { // block id: 3387
            if (var1004) { Option<(String, Range<UInt8>, Int16, Array<Int32>, Range<Int32>, Array<Range<Int32>>)>.None } else { Option<(String, Range<UInt8>, Int16, Array<Int32>, Range<Int32>, Array<Range<Int32>>)>.None } ;
            ();
            var3394
        } finally { // block id: 3396

        };
        ([Int32(-31), Int32(-5), Int32(11), Int32(-117), Int32(-83), Int32(-85), Int32(27), Int32(-24), Int32(35), Int32(47)], [true, false, true, false, false, false, false, false, true, true], var3401)
    };
    Option<Option<Unit>>.Some(try { // block id: 3428
        ();
        var1875
    } catch (e: Exception) { // block id: 3431
        ();
        var1875
    })
}




public func func1212(param1213 : Range<Int64>) : ((Int64, Rune, UInt8, Int16, UInt64), Unit, Array<Int32>, Range<UInt16>, Int64, Range<Int16>) { // block id: 1214
    let var1225 : Int16 = Int16(-47);
    let var1229 : UInt32 = UInt32(191);
    let var1392 : UInt16 = UInt16(194);
    var403.var1219 <<= ((match {
        case (var1225, var278, var1229, false)[3] =>
        UInt16(161)
        case try { // block id: 1236
        let var1239 : Bool = ([((), Int32(Int16(102)), (), Int16(Int16(56)), UInt16(135), Float64(Float32(-107.0)), (), (-75)), ((), Int32(114), (), Int16(Int16(80)), UInt16(Int16(55)), Float64(Float32(89.0)), (), 93), ((), Int32(UInt8(172)), (), Int16(UInt8(76)), UInt16(221), (-32.0), (), (-52)), ((), Int32(Int16(-89)), (), Int16(UInt16(63)), UInt16(209), Float64(Float32(-6.0)), (), 11), ((), Int32(Int8(125)), (), Int16(36), UInt16(UInt16(181)), Float64(Float32(-71.0)), (), 62), ((), Int32(UInt8(65)), (), Int16(Int8(47)), UInt16(Int8(-5)), Float64(110.0), (), Int64(UInt64(19))), ((), Int32(-63), (), Int16(UInt16(24)), UInt16(Int8(-17)), (-86.0), (), Int64(UInt16(137))), ((), Int32(-39), (), Int16(-21), UInt16(Int16(70)), Float64(Float32(-123.0)), (), 28), ((), Int32(42), (), Int16(-118), UInt16(Int8(69)), Float64(42.0), (), Int64(UInt8(168))), ((), Int32(45), (), Int16(43), UInt16(Int8(66)), Float64(Float32(-13.0)), (), (-61))] is Float64);
        var1239 && var1004
    } catch (_) { // block id: 1362
        ();
        var278++;
        Int32(-108) >= Int32(83)
    } =>
        var var1372 : Int8 = Int8(UInt8(UInt8(Int8(83))));
        var1372 = Int8(31);
        ();
        let var1380 : UInt16 = UInt16(131);
        var1380
        case _ =>
        var var1385 : Float32 = Float32(Float32(-57.0));
        var var1389 : Float32 = Float32(26.0);
        var1385 += var1389;
        var1392
    }) & 7);
    let var1867 : ?Int16 = Option<Int16>.Some(Int16(UInt16(UInt8(38))));
    try (resource = Class29()) { // block id: 1395
        var var1403 : Rune = '9';
        var var1411 : (Int64, Rune, UInt8, Int16, UInt64) = (84, 'h', UInt8(103), Int16(15), UInt64(207));
        try { // block id: 1397
            var var1406 : UInt8 = UInt8(41);
            if (false) { (var255, var1403, var1406, var1225, UInt64(66)) } else { var1411 }
        } finally { // block id: 1418
            var var1420 : Array<Class29> = Array<Class29>(10){ i => Class29(namedParam82 : "g=QT.rd&`,") };
            var1420;
            let var1849 : (Int64, Rune, UInt8, Int16, UInt64) = ((-109), 'F', UInt8(15), Int16(-119), UInt64(78));
            var1849
        };
        var403.var1050
    } catch (_) { // block id: 1859
        (Option<Option<Int16>>.Some(var1867) ?? var1867);
        (var1875 ?? ())
    } finally { // block id: 1878
        (var1875 ?? var124);
        ()
    };
    let var3435 : ((Range<UInt32>, Int16, Rune, Float32)) -> Option<Option<Unit>> = func2020;
    func func1886<T0, T1>(namedParam1887 ! : Int16, namedParam1888 ! : Class29, optionalParam1889 ! : (Bool, Array<(Unit, Int32, Unit, Int16, UInt16, Float64, Unit, Int64)>, Range<Int32>) = (((Int16(54), UInt64(142), UInt32(25), true) is (Range<UInt64>, UInt64, Option<Bool>, Range<Int64>) -> Int32), [((), Int32(Int32(-68)), (), Int16(-35), UInt16(Int16(78)), Float64(107.0), (), Int64(UInt16(25))), ((), Int32(-92), (), Int16(UInt8(176)), UInt16(UInt8(221)), (-37.0), (), Int64(UInt16(75))), ((), Int32(26), (), Int16(UInt8(178)), UInt16(Int16(-22)), Float64(Float32(-70.0)), (), Int64(31)), ((), Int32(UInt32(210)), (), Int16(UInt8(204)), UInt16(24), Float64(58.0), (), Int64(UInt16(119))), ((), Int32(1), (), Int16(58), UInt16(239), (-4.0), (), Int64(Int16(53))), ((), Int32(118), (), Int16(30), UInt16(UInt8(99)), Float64(Float32(-46.0)), (), Int64(UInt32(164))), ((), Int32(58), (), Int16(40), UInt16(129), Float64(32.0), (), (-51)), ((), Int32(-73), (), Int16(UInt16(105)), UInt16(77), Float64(Float32(35.0)), (), 26), ((), Int32(-80), (), Int16(UInt16(3)), UInt16(116), 119.0, (), (-39)), ((), Int32(81), (), Int16(-60), UInt16(160), 55.0, (), 122)], ((Int32(88)&127)..(Int32(41)&127):((-28)|1)))) : Class29 { // block id: 2012
        match ((((((var1229&127)..=(var1229&127):((var255|1))), Int16(-95), var3444, Float32(117.0))|>var3435) ?? if (var3096) { Option<Unit>.None } else { var1875 } )) {
            case _ : Option<UInt32> =>
                Option<Range<Int64>>.None;
                var3394;
                [(), (), var3394, (), (), var124, var3394, var124, var124, ()]

            case _ =>
                var1004 ||= var1004;
                let var3473 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
                var3473

        };
        let var3500 : ?Rune = Option<Rune>.Some('k');
        try { // block id: 3476
            match ([((Int32(115)&127)..(Int32(38)&127):((-6)|1)), ((Int32(45)&127)..(Int32(-113)&127):((-90)|1)), ((Int32(-3)&127)..(Int32(69)&127):((-76)|1)), ((Int32(89)&127)..(Int32(84)&127):(90|1)), ((Int32(-50)&127)..(Int32(-82)&127):(82|1)), ((Int32(26)&127)..=(Int32(105)&127):(114|1)), ((Int32(41)&127)..(Int32(-116)&127):(99|1)), ((Int32(-115)&127)..=(Int32(35)&127):(30|1)), ((Int32(-109)&127)..(Int32(96)&127):((-20)|1)), ((Int32(-79)&127)..(Int32(23)&127):(75|1))]) {
                case caseVar3481 =>
                    var278 *= UInt64(59);
                    ();
                    [(), (), (), (), (), (), (), (), (), ()]

                case caseVar3490 =>
                    [(), (), (), (), (), (), (), (), (), ()]

                case _ : Range<Int32> =>
                    [(), (), (), (), (), (), (), (), (), ()]

                case _ =>
                    var3500;
                    [(), (), (), (), (), (), (), (), (), ()]

            };
            var var3505 : ?UInt32 = Option<UInt32>.None;
            var3505;
            Option<Class29>.Some(Class29(namedParam2520 : Option<UInt32>.None)).getOrThrow()
        } finally { // block id: 3515
            let var3539 : (Int16, UInt64, UInt32, Bool) = (Int16(UInt16(47)), UInt64(UInt16(Int8(101))), UInt32(UInt32(147)), false);
            match (var115) {
                case _ =>
                    var3070;
                    Class29(namedParam1427 : Option<Unit>.Some(()), namedParam1428 : Option<Bool>.None, optionalParam1429 : (((-126)&127)..=((-101)&127):(23|1)))

                case caseVar3529 : Array<(Unit, Int32, Unit, Int16, UInt16, Float64, Unit, Int64)> =>
                    var124;
                    var124;
                    if (var1004) { namedParam1888 } else { Class29(Option<(Int16, UInt64, UInt32, Bool)>.Some(var3539), var3539, optionalParam1646 : Option<UInt64>.Some(UInt64(213))) }

                case _ : Option<Unit> =>
                    var124;
                    if (var49) { namedParam1888 } else { namedParam1888 }

                case _ =>
                    if (false) { var403 } else { Class29(namedParam82 : "Oy=@#h\\P'%") }

            }
        }
    }
;
    (func1886<Unit, Option<Int64>>(namedParam1887 : Int16(83), namedParam1888 : var403).func3570(namedParam3571 : var3296, namedParam3572 : ((11&127)..=(var2284&127):((var2272|1)))), if (var1004) { // block id: 3777
        ();
        var var3782 : UInt64 = UInt64(0);
        ((UInt64(241)&127)..(var3782&127):((var2284|1)));
        var3394
    }, [Int32(106), Int32(28), Int32(-65), Int32(-63), Int32(125), Int32(26), Int32(51), Int32(7), Int32(25), Int32(-20)], ((UInt16(180)&127)..(UInt16(147)&127):((-16)|1)), if (match (var403) {
        case _ =>
            true

        case _ =>
            var2387;
            var3401;
            Int16(-34) <= Int16(73)

        case _ =>
            false || var1004

    }) { // block id: 3808
        if (var3096) { var2387 } else { Option<Option<Unit>>.Some(var1875) } ;
        -82
    } else if (var3096) { // block id: 3817
        83
    } else { // block id: 3819
        (-21)
    }, (Option<Range<Int16>>.None ?? ((Int16(75)&127)..(Int16(-70)&127):((var2284|1)))))
}


public func func850(param851 : Int16) : Range<UInt64> { // block id: 852
    func func856(optionalParam857 ! : (Unit, Int32, Unit, Int16, UInt16, Float64, Unit, Int64) = ((), Int32(-36), (), Int16(UInt16(UInt16(199))), UInt16(Int16(-25)), Float64(Float32(Float32(-17.0))), (), 48), optionalParam872 ! : Array<Int32> = [Int32(-113), Int32(-119), Int32(-36), Int32(102), Int32(36), Int32(-15), Int32(0), Int32(-23), Int32(-47), Int32(90)]) : Class29 { // block id: 874
        if (Class29.var881[0]) { match (Option<Unit>.Some(())) {
            case _ =>
                [var403, Class29(), Class29(namedParam82 : ###"51RfZt_a{#g"###), var403, Class29(), var403, Class29(), var403, var403, Class29()]

        }[6] } else { try { // block id: 1001
            var1004 ||= var1004;
            if (var49) { var366 } else { ((UInt64(70)&127)..(var278&127):((25|1))) } ;
            if (var49) { Class29() } else { var403 }
        } catch (e: Exception) { // block id: 1019
            var124;
            if (var1004) { Class29(namedParam82 : """
pCV,?
wp]%]
""") } else { var403 }
        } }
    }
;
    var var1027 : (Unit, Int32, Unit, Int16, UInt16, Float64, Unit, Int64) = ((), Int32(UInt32(226)), (), Int16(-85), UInt16(113), (-14.0), (), 25);
    let var1055 : (Range<Int64>) -> Unit = { lambdaParameter1058 : Range<Int64> =>  };
    let var1210 : (((Int64, Rune, UInt8, Int16, UInt64), Unit, Array<Int32>, Range<UInt16>, Int64, Range<Int16>)) -> Unit = func1206;
    var var3832 : (Range<Int64>) -> ((Int64, Rune, UInt8, Int16, UInt64), Unit, Array<Int32>, Range<UInt16>, Int64, Range<Int16>) = func1212;
    (func856(optionalParam857 : var1027, optionalParam872 : [Int32(110), Int32(-55), var109, var109, Int32(-121), var109, var109, var109, Int32(-16), Int32(-100)]).var1050, var109, ((((-121)&127)..=(114&127):(35|1))|>var1055), ((var3832~>var1210)|>{ lambdaParameter1188 : (Range<Int64>) -> Unit => let var1192 : ((Range<Int64>) -> Unit) -> Int16 = func1062; var var1197 : (Range<Int64>) -> Unit = { lambdaParameter1200 : Range<Int64> => () }; var1197|>var1192 }), var2237, match (try { // block id: 3837
            let var3839 : ?Option<Option<Unit>> = Option<Option<Option<Unit>>>.None;
            var3839;
            ((Int8(57)&127)..=(Int8(-109)&127):(80|1))
        } catch (_) { // block id: 3842
            ();
            ((Int8(-9)&127)..=(var3847&127):((var255|1)))
        }) {
        case _ : Array<Range<UInt32>> =>
            ((-123), var3444, UInt8(141), param851, UInt64(3));
            99.0

        case _ =>
            ();
            Option<Range<Int64>>.Some(var484);
            121.0 ** Float64(Int32(var1620) & 3)

    }, if (var1004) { // block id: 3871
        var124
    } else if (match (((Int16(-47)&127)..=(Int16(-55)&127):((-35)|1))) {
        case caseVar3877 =>
            if (false) { var839 } else { ((UInt64(205)&127)..(UInt64(224)&127):((95|1))) } ;
            ();
            Int16(87) < Int16(19)

        case _ =>
            !true;
            var1122;
            true

    }) { // block id: 3896

    }, ((Int32(55) as Int64) ?? Int64(UInt64(23))));
    let var3910 : Array<Int32> = [Int32(37), Int32(-70), Int32(22), Int32(124), Int32(-2), Int32(-128), Int32(-26), Int32(-57), Int32(97), Int32(23)];
    match (match ((var3910 as UInt64)) {
            case caseVar3914 : UInt16 =>
                var2401

            case _ =>
                var124;
                Option<Unit>.Some(())

        }) {
        case _ =>
            var2272;
            if (true) { var2387 } else { var2387 } ;
            var var3934 : Range<UInt64> = ((UInt64(238)&127)..=(UInt64(25)&127):(63|1));
            if (var3096) { ((UInt64(210)&127)..=(UInt64(245)&127):(84|1)) } else { var3934 }

        case caseVar3938 =>
            var var3941 : (Bool, Array<(Unit, Int32, Unit, Int16, UInt16, Float64, Unit, Int64)>, Range<Int32>) = (((Int16(51), UInt64(221), UInt32(139), true) is Array<Range<UInt32>>), [((), Int32(Int16(-121)), (), Int16(82), UInt16(210), Float64((-19.0)), (), (-4)), ((), Int32(61), (), Int16(Int8(108)), UInt16(177), (-109.0), (), Int64(Int32(-94))), ((), Int32(UInt16(190)), (), Int16(30), UInt16(61), 67.0, (), Int64(UInt16(103))), ((), Int32(-64), (), Int16(Int16(110)), UInt16(228), (-75.0), (), Int64(UInt64(154))), ((), Int32(56), (), Int16(UInt16(59)), UInt16(202), 1.0, (), (-5)), ((), Int32(84), (), Int16(114), UInt16(Int16(-66)), Float64(31.0), (), Int64(Int16(102))), ((), Int32(6), (), Int16(Int16(12)), UInt16(UInt16(143)), Float64((-88.0)), (), 108), ((), Int32(Int32(115)), (), Int16(66), UInt16(77), Float64(Float32(-26.0)), (), Int64(Int32(-37))), ((), Int32(4), (), Int16(0), UInt16(Int16(-118)), (-24.0), (), 123), ((), Int32(Int32(46)), (), Int16(88), UInt16(34), (-71.0), (), (-116))], ((Int32(Int8(-72))&127)..=(Int32(UInt32(UInt16(117)))&127):((Int64(Int32(UInt8(172)))|1))));
            var3941;
            var3394;
            ((UInt64(175)&127)..(UInt64(102)&127):(77|1))

        case caseVar4073 : Int16 =>
            ((UInt64(35)&127)..(UInt64(121)&127):((-117)|1))

        case _ =>
            var4079;
            ((UInt64(146)&127)..(var278&127):(((-66)|1)))

    }
}

func func7(param784 : Class29) : Range<UInt64> { // block id: 785
    let var810 : ?Unit = Option<Unit>.Some(());
    var var834 : Float64 = Float64(Float32(-112.0));
    var var4151 : Int64 = Int64(Int16(-39));
    var var4166 : (Unit, Int32, Unit, Int16, UInt16, Float64, Unit, Int64) = ((), Int32(UInt32(UInt32(37))), (), Int16(-106), UInt16(26), (-35.0), (), Int64(Int16(-32)));
    var var4235 : ?UInt32 = Option<UInt32>.Some(UInt32(87));
    let var4242 : (String, (Int64, Rune, UInt8, Int16, UInt64), Option<UInt32>, ((Int64, Rune, UInt8, Int16, UInt64), Unit, Array<Int32>, Range<UInt16>, Int64, Range<Int16>), Range<UInt8>, (Unit, Int32, Unit, Int16, UInt16, Float64, Unit, Int64)) = (###"Us&(y!E\"b4"###, (Int64(UInt64(133)), 'H', UInt8(57), Int16(-90), UInt64(54)), (((), Int32(Int16(117)), (), Int16(-32), UInt16(Int16(-44)), 48.0, (), 4) as UInt32), ((Int64(Int8(44)), '5', UInt8(UInt8(60)), Int16(48), UInt64(45)), (), [Int32(-6), Int32(80), Int32(117), Int32(-68), Int32(66), Int32(-48), Int32(104), Int32(119), Int32(126), Int32(7)], ((UInt16(150)&127)..=(UInt16(115)&127):(54|1)), Int64(28), ((Int16(Int16(-120))&127)..=(Int16(26)&127):((5|1)))), ((UInt8(244)&127)..(UInt8(UInt8(31))&127):((39|1))), ((), Int32(UInt16(189)), (), Int16(Int8(Int8(-81))), UInt16(35), 72.0, (), 66));
    [try { // block id: 790
        ((UInt64(207)&127)..(UInt64(210)&127):((-127)|1))
    } catch (e: Exception) { // block id: 792
        UInt32(122);
        var366
    } finally { // block id: 795
        var var797 : Range<UInt64> = ((UInt64(Int32(UInt16(116)))&127)..=(UInt64(UInt32(Int8(Int8(-115))))&127):((Int64(68)|1)));
        var797
    }, match (var810) {
        case caseVar815 : Range<Int64> =>
            ((UInt64(22)&127)..(UInt64(111)&127):(23|1))

        case _ : Class29 =>
            var366

        case _ =>
            ();
            ((UInt64(82)&127)..=(var278&127):((var255|1)))

        case _ =>
            // var834 %= Float64((Int32(var834)) | 1);
            var839

    }, (var1540|>func850), ((UInt64(236)&127)..=(var278&127):((var2272|1))), var366, match ([((), var109, var3394, var1540, var2237, var4102, (), 0), ((), var109, (), Int16(59), var2237, var1620, var3394, 56), var4117, var4117, (var3394, Int32(-120), var3394, Int16(-108), UInt16(64), 117.0, (), 86), ((), Int32(85), (), Int16(-104), var2237, 6.0, (), var4151), var4117, var4117, ((), Int32(-114), (), Int16(-90), var2237, var4102, var124, var255), var4166]) {
        case _ =>
            var4183 >>= ((var3847) & 7);
            ();
            ((UInt64(103)&127)..=(UInt64(130)&127):((-125)|1))

    }, var839, match (var4191) {
        case _ =>
            var2237 %= ((var2237) | 1);
            var1540;
            ((var278&127)..=(var278&127):(((-86)|1)))

        case _ =>
            ((UInt64(224)&127)..(UInt64(40)&127):((-40)|1))

    }, ((UInt64(158)&127)..=(UInt64(186)&127):((-51)|1)), match (()) {
        case () =>
            var124;
            if (var3096) { (var3296, ((-84), 'z', UInt8(72), var1540, var278), var4235, var3401, var520, var4117) } else { var4242 } ;
            if (var1004) { var839 } else { var839 }

        case () =>
            UInt16(191);
            ((var278&127)..(var278&127):((16|1)))

        case caseVar4314 : Option<Bool> =>
            ((UInt64(36)&127)..=(UInt64(233)&127):(((-49)|1)))

        case () =>
            var3847;
            ();
            var839

        case _ =>
            var839

    }][6]
}



func func779(param780 : Class29) : Range<Int64> { // block id: 781
    func7(var403);
    var var4343 : Unit = ();
    var var4349 : ?(String, Range<Int8>) = (UInt64(Int16(126)) as (String, Range<Int8>));
    (try { // block id: 4337
        if (var3117) { var2401 } else { Option<Unit>.Some(var4343) } ;
        var4079;
        if (var3096) { var4349 } else { Option<(String, Range<Int8>)>.Some((var3296, ((var4183&127)..(var3847&127):((var2272|1))))) }
    } finally { // block id: 4360
        var839;
        let var4369 : Range<Int8> = ((Int8(UInt8(170))&127)..(Int8(56)&127):(((-67)|1)));
        if (false) { Option<(String, Range<Int8>)>.None } else { Option<(String, Range<Int8>)>.Some((var3296, var4369)) }
    } ?? ((Option<Option<(String, Range<Int8>)>>.Some(var4349) ?? var4349) ?? ("<FFUC;RpA=", ((var3847&127)..(var4389&127):(((-62)|1))))));
    var484
}

public func func4396<T0, T1, T2>(param4397 : Int8) : Class29 where T0 <: Option<Range<Int64>>, T1 <: Array<Bool>, T2 <: Array<(Unit, Int32, Unit, Int16, UInt16, Float64, Unit, Int64)> { // block id: 4398
    var var4403 : ?Rune = ([Int32(15), Int32(Int16(12)), Int32(Int16(UInt16(45))), Int32(Int16(99)), Int32(-86), Int32(UInt32(52)), Int32(99), Int32(Int32(25)), Int32(UInt32(107)), Int32(39)] as Rune);
    try { // block id: 4400
        (var4403 ?? 'f');
        var loopTimeVar4430 : Int64 = 0;
        do {
            loopTimeVar4430++;
            Option<(Array<Int32>, Array<Bool>, ((Int64, Rune, UInt8, Int16, UInt64), Unit, Array<Int32>, Range<UInt16>, Int64, Range<Int16>))>.None;
            Int16(-124)
        } while ((var49) && loopTimeVar4430 < 100 ) ;
        var403
    } catch (e: Exception) { // block id: 4432
        if (false) { var403 } else { Class29(namedParam1427 : Option<Unit>.Some(var124), namedParam1428 : Option<Bool>.None) }
    }
}


func func529(param530 : (Range<UInt32>, Int16, Rune, Float32), optionalParam531 ! : ((Int64, Rune, UInt8, Int16, UInt64), Unit, Array<Int32>, Range<UInt16>, Int64, Range<Int16>) = ((99, 'L', UInt8(22), Int16(Int8(UInt8(67))), UInt64(221)), (), [Int32(UInt16(60)), Int32(14), Int32(-64), Int32(10), Int32(115), Int32(-44), Int32(44), Int32(31), Int32(98), Int32(-3)], ((UInt16(83)&127)..=(UInt16(130)&127):((-110)|1)), Int64(UInt16(Int16(81))), ((Int16(-8)&127)..=(Int16(-117)&127):((-31)|1)))) : ((Int64, Rune, UInt8, Int16, UInt64), Unit, Array<Int32>, Range<UInt16>, Int64, Range<Int16>) { // block id: 559
    let var605 : Array<Unit> = Array<Unit>(10){ i => () };
    let var4474 : (Int8) -> Range<Int64> = func466;
    let var4489 : UInt32 = UInt32(11);
    func func562(param563 : Float32, param564 : Range<UInt32>, param565 : (Int8, Class29, Bool, Int16, UInt64), param566 : Unit) : Bool { // block id: 567
        let var639 : String = ".93R2|50+v";
        let var4394 : (Class29) -> Range<Int64> = func779;
        try { // block id: 569
            Option<Bool>.None.getOrThrow()
        } finally { // block id: 572
            let var714 : Int8 = Int8(87);
            let var747 : UInt16 = UInt16(Int16(Int8(51)));
            func func574(optionalParam575 ! : (Int8) -> Range<Int64> = { lambdaParameter578 : Int8 => ((Int64(UInt64(Int8(2)))&127)..((-76)&127):((Int64(UInt16(220))|1))) }, optionalParam589 ! : Range<UInt32> = ((UInt32(207)&127)..=(UInt32(70)&127):((69|1))), optionalParam594 ! : Option<UInt64> = Option<UInt64>.Some(UInt64(UInt16(123)))) : Bool { // block id: 598
                var var644 : Int32 = Int32(-93);
                var var657 : Int16 = Int16(UInt8(26));
                try (resource = Class29()) { // block id: 600
                    ((UInt64(115)&127)..=(UInt64(53)&127):((-59)|1));
                    var605[6];
                    if (var49) { // block id: 620

                    }
                } catch (e: Exception) { // block id: 621
                    var var624 : UInt16 = UInt16(UInt16(UInt8(UInt8(191))));
                    var624 |= var624;
                    ()
                } finally { // block id: 631
                    match (var115) {
                        case _ =>
                            (var639, ((Int8(42)&127)..(Int8(-75)&127):((-124)|1)));
                            var644 &= var644;
                            var var649 : Float32 = Float32(-70.0);
                            var649 *= var649

                        case _ : (Int64, Rune, UInt8, Int16, UInt64) =>
                            var657 *= var657;
                            param566;
                            var var664 : Int8 = Int8(Int8(10));
                            var664 ^= var664

                        case _ =>
                            param566;
                            true;
                            var278 -= var278

                    };
                    (Option<Unit>.Some(()) ?? ());
                    var var692 : UInt16 = UInt16(47);
                    if (true) { // block id: 685
                        var278;
                        ()
                    } else if (false) { // block id: 689
                        var692++;
                        ()
                    }
                };
                var var700 : Array<Range<Int32>> = [((Int32(10)&127)..(Int32(17)&127):(86|1)), ((Int32(-62)&127)..=(Int32(-54)&127):(97|1)), ((Int32(-92)&127)..(Int32(50)&127):(22|1)), ((Int32(-58)&127)..(Int32(19)&127):(92|1)), ((Int32(-111)&127)..(Int32(79)&127):((-127)|1)), ((Int32(53)&127)..(Int32(-77)&127):(76|1)), ((Int32(101)&127)..=(Int32(-23)&127):(75|1)), ((Int32(40)&127)..=(Int32(-32)&127):((-72)|1)), ((Int32(28)&127)..(Int32(-61)&127):(18|1)), ((Int32(123)&127)..=(Int32(62)&127):(83|1))];
                try { // block id: 696
                    var700[5]
                } catch (_) { // block id: 703
                    if (var49) { // block id: 706
                        ();
                        ()
                    };
                    var loopTimeVar718 : Int64 = 0;
                    do {
                        loopTimeVar718++;
                        var714 << ((Int8(104)) & 7)
                    } while ((var49) && loopTimeVar718 < 100 ) ;
                    let var758 : Range<Int32> = ((Int32(117)&127)..(Int32(UInt16(132))&127):((Int64(Int8(32))|1)));
                    match (Option<Bool>.None) {
                        case _ =>
                            var366;
                            ((Int32(-40)&127)..(Int32(47)&127):((var255|1)))

                        case _ : Array<(Unit, Int32, Unit, Int16, UInt16, Float64, Unit, Int64)> =>
                            param566;
                            if (var49) { ((Int32(-89)&127)..=(Int32(77)&127):((-104)|1)) } else { ((Int32(-127)&127)..(Int32(3)&127):(62|1)) }

                        case caseVar739 : String =>
                            var484;
                            var var744 : UInt16 = UInt16(136);
                            var744 *= var747;
                            if (var49) { ((Int32(-113)&127)..=(Int32(88)&127):((79|1))) } else { var758 }

                        case _ =>
                            var758

                    }
                } finally { // block id: 768
                    Class29.var120;
                    ((Int32(61)&127)..=(Int32(-123)&127):(((-80)|1)))
                };
                var var4458 : Bool = (Option<(String, Range<Int8>)>.None is Option<Unit>);
                match (((Option<Int8>.None ?? var4389)|>(func4396<Option<Range<Int64>>, Array<Bool>, Array<(Unit, Int32, Unit, Int16, UInt16, Float64, Unit, Int64)>>~>var4394))) {
                    case caseVar4446 : Range<Int16> =>
                        Int16(-74) <= var657

                    case caseVar4453 : UInt16 =>
                        var124;
                        var4458 &&= false;
                        Int32(67) <= Int32(2)

                    case _ : Range<UInt16> =>
                        false

                    case _ =>
                        [Int32(-74), Int32(-56), Int32(-23), Int32(113), Int32(103), Int32(-55), Int32(99), Int32(-86), Int32(-76), Int32(96)];
                        false

                }
            }
;
            func574(optionalParam575 : var4474, optionalParam589 : ((UInt32(149)&127)..(UInt32(133)&127):((var2272|1))));
            var loopTimeVar4486 : Int64 = 0;
            while ((var1004) && loopTimeVar4486 < 100 ) {
                loopTimeVar4486++;
                param566;
                Int8(7)
            };
            var4489 >= var4489
        }
    }
;
    var var4502 : Range<UInt32> = ((UInt32(UInt8(UInt8(208)))&127)..(UInt32(234)&127):((Int64(UInt64(UInt64(0)))|1)));
    let var4512 : (Int8, Class29, Bool, Int16, UInt64) = (Int8(UInt8(UInt8(144))), Class29(optionalParam2445 : func466, namedParam2520 : Option<UInt32>.None), false, Int16(-120), UInt64(Int16(36)));
    var loopTimeVar4529 : Int64 = 0;
    let var4577 : Int32 = Int32(Int16(UInt8(106)));
    if (func562(var4494 * var4494, var4502, var4512, do {
        loopTimeVar4529++;
        var2237
    } while ((true) && loopTimeVar4529 < 100 ) )) { ((var4533 ?? (var2284, 'z', UInt8(144), var1540, var278)), match (var4543) {
        case caseVar4547 =>
            if (var1004) { (((var4489&127)..(UInt32(126)&127):((var2272|1))), var1540, var3444, Float32(51.0)) } else { (((UInt32(32)&127)..=(UInt32(57)&127):(65|1)), Int16(81), 'U', var4494) } ;
            ()

        case _ =>
            ()

    }, [var109, Int32(23), Int32(52), var109, Int32(-37), var109, Int32(121), var4577, var4577, var109], ((var2237&127)..(UInt16(196)&127):((var2272|1))), (var4593 ?? 13), var1487) } else { optionalParam531 }
}


public func func523(param524 : Range<UInt64>) : Range<Int64> { // block id: 525
    let var4636 : Array<Int32> = [Int32(-81), Int32(57), Int32(Int8(-107)), Int32(65), Int32(-111), Int32(UInt8(59)), Int32(-16), Int32(UInt16(Int16(UInt8(182)))), Int32(124), Int32(UInt8(22))];
    var var4665 : ((Int64, Rune, UInt8, Int16, UInt64), Unit, Array<Int32>, Range<UInt16>, Int64, Range<Int16>) = ((57, 'k', UInt8(234), Int16(30), UInt64(UInt64(Int16(50)))), (), [Int32(-51), Int32(Int8(56)), Int32(-57), Int32(-66), Int32(UInt16(3)), Int32(35), Int32(UInt8(88)), Int32(Int8(24)), Int32(-120), Int32(UInt8(121))], ((UInt16(50)&127)..(UInt16(194)&127):((-15)|1)), (-81), ((Int16(12)&127)..(Int16(103)&127):((Int64(Int16(-69))|1))));
    let var4704 : UInt8 = UInt8(UInt8(78));
    func529(var2348, optionalParam531 : if (var49) { // block id: 4601
        var3394;
        var3394;
        ((var2284, var3444, UInt8(210), var1540, var278), var3394, [Int32(32), Int32(-126), Int32(-71), Int32(-78), Int32(44), Int32(-84), Int32(-116), Int32(-100), Int32(-92), Int32(43)], ((UInt16(23)&127)..=(var2237&127):(((-72)|1))), var2284, var1487)
    } else if (var49) { // block id: 4620
        ();
        var1540 /= ((Int16(-103)) | 1);
        ((101, var3444, UInt8(92), var1540, var278), var4633, var4636, ((UInt16(126)&127)..(UInt16(178)&127):((-41)|1)), (-17), ((Int16(98)&127)..=(Int16(22)&127):(34|1)))
    } else { // block id: 4657
        var4183 <<= ((var3847) & 7);
        ();
        if (false) { var4665 } else { ((8, 'G', var4704, var1540, var278), (), [Int32(-30), Int32(-109), Int32(12), Int32(32), Int32(-66), Int32(-68), Int32(84), Int32(-20), Int32(73), Int32(66)], ((var2237&127)..=(UInt16(243)&127):((var2272|1))), (-42), ((Int16(60)&127)..=(Int16(125)&127):((var255|1)))) }
    })[1];
    try (resource = Class29()) { // block id: 4722
        var var4736 : ?UInt64 = (Option<(Int64, Rune, UInt8, Int16, UInt64)>.None as UInt64);
        match (Option<Unit>.None) {
            case caseVar4727 : Option<Option<Option<Unit>>> =>
                ();
                var124

            case caseVar4733 : (Bool, Array<(Unit, Int32, Unit, Int16, UInt16, Float64, Unit, Int64)>, Range<Int32>) =>
                var4736;
                ()

            case caseVar4742 =>
                var2237++;
                ()

            case _ =>
                var3394

        };
        ()
    } catch (_) { // block id: 4751
        match (((UInt16(12)&127)..(UInt16(251)&127):(9|1))) {
            case caseVar4756 : Option<UInt32> =>
                ("""
^:7KB
j^c!m
""", var3619, Option<UInt32>.None, var3401, var4764, var4117);
                ()

            case _ =>
                var2237 /= ((UInt16(119)) | 1);
                var4633

        };
        var loopTimeVar4778 : Int64 = 0;
        do {
            loopTimeVar4778++;

        } while ((false) && loopTimeVar4778 < 100 )
    } finally { // block id: 4779
        if (var1004) { // block id: 4782
            var1875;
            ();
            var2237 /= ((var2237) | 1)
        } else if (var49) { // block id: 4789
            Option<(Int64, Rune, UInt8, Int16, UInt64)>.Some(var3619);
            ()
        };
        var278++
    };
    var var4813 : ?Rune = Option<Rune>.Some('s');
    let var4844 : Range<Int64> = (((-54)&127)..(82&127):((-118)|1));
    try { // block id: 4796
        (Option<Range<Int64>>.None ?? var484)
    } catch (e: Exception) { // block id: 4804
        try { // block id: 4806
            var124;
            if (true) { Option<Rune>.Some('Q') } else { var4813 }
        } finally { // block id: 4816
            ((Int8(-3)&127)..=(Int8(-8)&127):((-78)|1));
            if (false) { var4813 } else { var4813 }
        };
        var484
    } finally { // block id: 4823
        Int8(-80) < var4389;
        match (Class29()) {
            case _ =>
                ();
                if (true) { Option<(Int64, Rune, UInt8, Int16, UInt64)>.Some((var2284, 'n', UInt8(236), var1540, var278)) } else { Option<(Int64, Rune, UInt8, Int16, UInt64)>.None } ;
                var4844

            case _ =>
                var124;
                "/vMQ)@mVus";
                if (var1004) { var484 } else { var4844 }

        }
    }
}

public func func4855(param4856 : Int8) : Range<UInt64> { // block id: 4857
    var var4884 : Option<Class29> = Option<Class29>.None;
    if ((var278 is Option<Option<(String, Range<Int8>)>>)) { // block id: 4861
        Option<Int8>.None;
        if (false) { // block id: 4865
            ();
            var2348;
            var124
        } else if (false) { // block id: 4870
            ((var255&127)..(65&127):((9|1)));
            ();
            var124
        };
        var loopTimeVar4887 : Int64 = 0;
        do {
            loopTimeVar4887++;
            if (var3117) { Option<Class29>.None } else { var4884 }
        } while ((true) && loopTimeVar4887 < 100 )
    };
    let var4897 : Bool = false;
    let var4905 : Bool = false;
    let var4915 : Range<Int32> = ((Int32(115)&127)..(Int32(101)&127):((-126)|1));
    var var4918 : ??(String, Range<Int8>) = (Int32(UInt8(78)) as Option<(String, Range<Int8>)>);
    let var4926 : Bool = ((((-79)&127)..(66&127):(4|1)) is Rune);
    let var4948 : Unit = ();
    (-54.0) * if (false) { // block id: 4892
        ();
        var1620
    } else if (if (var4897) { // block id: 4899
        ();
        var3847 > Int8(-67)
    } else if (var4905) { // block id: 4907
        if (var49) { ((Int32(-118)&127)..(Int32(60)&127):(((-78)|1))) } else { var4915 } ;
        var4918;
        var1004
    } else { // block id: 4923
        let var4934 : Unit = ();
        if (var4926) { [var124, var124, var124, var4934, var4633, (), (), (), var4633, var3394] } else { [(), var4633, (), (), var4948, (), (), var4633, (), ()] } ;
        var4926
    }) { // block id: 4956
        var4102 ** Float64(Int32(var4102) & 3)
    } else { // block id: 4960
        (var3296, ((Int8(-126)&127)..=(Int8(57)&127):((37|1))));
        var1620
    };
    let var4978 : UInt8 = UInt8(128);
    var var5043 : Unit = ();
    (match (if (var4905) { // block id: 4972
            var3394;
            ();
            UInt8(93) | var4978
        } else { // block id: 4980
            var4982;
            UInt8(156) + UInt8(97)
        }) {
        case _ =>
            var255 <<= ((var2284) & 7);
            Int16(45) / ((Int16(-6)) | 1);
            UInt64(164) & var278

        case 175 | 68 | 249 | 56 =>
            Int16(-58);
            var5005--;
            UInt64(222) % ((var278) | 1)

        case 85 =>
            var278

        case 225 | 184 | 83 | 104 =>
            ();
            var4982;
            UInt64(253 ** (UInt64(46) & 3))

        case _ =>
            ();
            var278

    }&127)..=(UInt64(param4856) - UInt64(78)&127):((if (true) { // block id: 5032
        ();
        7 << (((-77)) & 7)
    } else if ((Option<Bool>.Some(false) ?? false)) { // block id: 5041
        var5043;
        var1004 &&= false;
        (-93) % ((var2272) | 1)
    } else { // block id: 5051
        Int32(80);
        (-62) & (-81)
    }|1))
}


public func func25(param26 : UInt8) : Bool { // block id: 27
    let var274 : Bool = true;
    func func33(param34 : Int16, optionalParam35 ! : Int32 = Int32(UInt16(76))) : Class29 { // block id: 38
        var var72 : Unit = ();
        let var76 : Int8 = Int8(-14);
        let var79 : Class29 = Class29(namedParam82 : "S#z`Iiwg;s");
        match {
            case (Option<Bool>.None ?? var49) =>
            (-98);
            Int8(65);
            let var55 : (Int8, Class29, Bool, Int16, UInt64) = (Int8(-84), Class29(), (UInt64(236) is Int32), Int16(Int16(UInt16(Int8(63)))), UInt64(UInt32(123)));
            var55
            case _ =>
            param26 >= param26;
            var72;
            (var76, var79, var274, Int16(-97), var278)
        }[1]
    }
;
    let var287 : (Range<UInt32>, Int16, Rune, Float32) = (((UInt32(73)&127)..(UInt32(Int8(-81))&127):((Int64(UInt8(UInt8(229)))|1))), Int16(UInt16(UInt16(UInt16(172)))), 'E', Float32(-20.0));
    var var310 : UInt16 = UInt16(2);
    let var374 : ?UInt64 = Option<UInt64>.Some(UInt64(184));
    var var380 : ?Bool = Option<Bool>.Some(true);
    func33(var287[1], optionalParam35 : if (var49) { // block id: 305
        var124;
        Int32(108)
    } else { // block id: 308
        var310;
        var var315 : (Unit, Int32, Unit, Int16, UInt16, Float64, Unit, Int64) = ((), Int32(Int8(UInt8(173))), (), Int16(-28), UInt16(UInt8(UInt8(5))), 46.0, (), Int64(Int16(Int8(UInt8(80)))));
        let var337 : Int16 = Int16(-42);
        var var341 : Float64 = (-60.0);
        if (var274) { var315 } else { ((), Int32(-109), (), var337, UInt16(168), var341, var124, var255) } ;
        Int32(120) | var109
    }).func349(namedParam350 : if (var274) { ((UInt64(205)&127)..=(var278&127):((var255|1))) } else { var366 } , namedParam351 : (var374 ?? UInt64(238)), namedParam352 : match (var380) {
        case _ =>
            var124;
            Option<Bool>.Some(var49)

    }, namedParam353 : if (var274) { ((var255&127)..=((-11)&127):((42|1))) } else { (((-114)&127)..((-45)&127):((37|1))) } );
    let var463 : (Range<Int64>) -> Unit = func399;
    (try { // block id: 5058
        var1540 -= Int16(-46);
        ((UInt8(191)&127)..=(UInt8(8)&127):(92|1));
        var3847
    } finally { // block id: 5064
        Int8(42)
    }|>(func4855~>func523))|>var463;
    try { // block id: 5067
        var5074.getOrThrow()
    } finally { // block id: 5076
        match (((var4183&127)..=(var3847&127):((var2272|1)))) {
            case _ =>
                ();
                var109;
                Float32(85.0) < var4494

        }
    }
}

func func14(optionalParam15 ! : UInt16 = UInt16(92), namedParam17 ! : Int32, namedParam18 ! : UInt64, optionalParam19 ! : String = "Ra{DIFsR<]^") : (Int64, Rune, UInt8, Int16, UInt64) { // block id: 21
    let var5091 : UInt8 = UInt8(98);
    match {
        case !(var5091|>func25) =>
        var4183++;
        match (Int16(-46)) {
            case 62 | -75 =>
                (var2284, 'A', UInt8(239), Int16(83), UInt64(51))

            case caseVar5109 : Class29 =>
                if (false) { var3619 } else { ((-88), var3444, UInt8(113), var1540, namedParam18) }

            case _ =>
                if (true) { var3619 } else { (var255, var3444, UInt8(71), var1540, UInt64(253)) }

        }
        case false =>
        Option<(Int64, Rune, UInt8, Int16, UInt64)>.None;
        if (var3117) { var3619 } else { (var2272, 'w', var5091, var1540, UInt64(109)) }
        case _ =>
        Option<Bool>.None;
        var1004 &&= var3096;
        match ((var3847, Class29(namedParam82 : "v}[S<pDW_N"), false, Int16(-15), UInt64(79))) {
            case (_ : Array<Class29>,_,caseVar5158,caseVar5159,caseVar5160 : Option<(String, Range<UInt8>, Int16, Array<Int32>, Range<Int32>, Array<Range<Int32>>)>) =>
                var3394;
                if (false) { var3619 } else { (53, 'w', UInt8(59), caseVar5159, var278) }

            case _ =>
                var3149;
                var3619

        }
    }
}

public func func7(param8 : Float64) : Bool { // block id: 9
    var var5211 : Int64 = Int64(Int32(-82));
    func14(namedParam17 : Int32(62), namedParam18 : var278, optionalParam19 : "|;mc;pP[p~")[0] >= try { // block id: 5181
        (var3296, var3619, Option<UInt32>.Some(var5187), var3401, var520, var5192);
        var3394;
        var2284
    } catch (_) { // block id: 5205
        var var5208 : Int64 = (-94);
        var5208 + var5211
    }
}

main(): Int64 {
    try {
        var var5215 : (Float64) -> Bool = func7;
        if ((var4102|>var5215)) { // block id: 5218
            if (false) { var2912 } else { Option<(Int16, UInt64, UInt32, Bool)>.None } ;
            ();
            ()
        };
        (-22)
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var109*var109), 64)
        crccheck.updateBuffer(UInt64(var255*var255), 64)
        crccheck.updateBuffer(UInt64(var278*var278), 64)
        crccheck.updateBuffer(UInt64(var1540*var1540), 64)
        crccheck.updateBuffer(UInt64(var2237*var2237), 64)
        crccheck.updateBuffer(UInt64(var2272*var2272), 64)
        crccheck.updateBuffer(UInt64(var2284*var2284), 64)
        crccheck.updateBuffer(UInt64(var3847*var3847), 64)
        crccheck.updateBuffer(UInt64(var4183*var4183), 64)
        crccheck.updateBuffer(UInt64(var4389*var4389), 64)
        crccheck.updateBuffer(UInt64(var5005*var5005), 64)
        crccheck.updateBuffer(UInt64(var5187*var5187), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Class29 {

}
// ASSERT: scan sema_illegal_capture_this
