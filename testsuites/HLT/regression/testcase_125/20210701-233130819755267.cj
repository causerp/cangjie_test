/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC-1:%compiler %cmp_opt %n.cj

// random seed:1625151719172

// All global variable need to be defined before use!
 var var18 : Enum15 = Enum15.defaultValue
 let var32 : Unit = ()
public let var131 : (Int32*UInt32*Bool*Int32*Float32) = (Int32(19), UInt32(113), false, Int32(-17), Float32(-36.0))
 let var202 : Interface41 = Class40()
public let var213 : Class40 = Class40()
 var var317 : (((Rune*UInt8*Int32*Int8)*Bool*UInt8*Float64)*UInt32) = ((('c', UInt8(136), Int32(66), Int8(-117)), true, UInt8(147), (-16.0)), UInt32(41))
public var var423 : Unit = ()
 var var498 : UInt32 = UInt32(72)
 let var545 : Enum140 = Enum140.enumValue547
public var var622 : Bool = false
 let var93 : Aggregate89 = Aggregate89((-81.0))
 let var768 : (Int64*Float32*((Rune*UInt8*Int32*Int8)*Bool*UInt8*Float64)*(((Rune*UInt8*Int32*Int8)*Bool*UInt8*Float64)*UInt32)*UInt16) = ((-37), Float32(92.0), (('9', UInt8(195), Int32(82), Int8(-14)), false, UInt8(34), (-57.0)), ((('M', UInt8(118), Int32(43), Int8(-84)), false, UInt8(207), (-66.0)), UInt32(53)), UInt16(201))
public let var818 : Rune = 'K'
public let var855 : (((Rune*UInt8*Int32*Int8)*Bool*UInt8*Float64)*UInt32) = ((('J', UInt8(44), Int32(-77), Int8(-44)), true, UInt8(228), 4.0), UInt32(55))
public let var1001 : Float64 = (-89.0)
 var var1077 : Bool = true
 var var1115 : UInt8 = UInt8(86)
 var var1197 : Unit = ()
public let var1233 : (Rune*UInt8*Int32*Int8) = ('Q', UInt8(128), Int32(108), Int8(76))
public let var1257 : Int8 = Int8(85)
public let var1260 : Int8 = Int8(38)
 var var1322 : Interface42 = Class40()
 let var1336 : Aggregate1332 = Aggregate1332()
 let var1363 : Bool = false
 let var1419 : UInt16 = UInt16(112)
 var var1435 : Unit = ()
public let var1441 : Bool = true
public var var1447 : Int16 = Int16(-56)
public var var1510 : Int64 = 100
 var var1571 : UInt64 = UInt64(251)
public let var1707 : Float64 = 53.0
 var var1871 : Int32 = Int32(-2)
enum Enum15 {
    defaultValue
}
 interface Interface41 {
    func func205(namedParam206 ! : UInt64, namedParam207 ! : UInt32, namedParam208 ! : UInt16, namedParam209 ! : Rune) : Bool { // block id: 210
        var213.var216;
        let var220 : Bool = false;
        let var270 : Int32 = Int32(-111);
        let var358 : Float64 = 113.0;
        var var380 : Bool = false;
        let var395 : Float32 = Float32(-122.0);
        let var405 : ((Rune*UInt8*Int32*Int8)*Bool*UInt8*Float64) = (('R', UInt8(238), Int32(75), Int8(69)), true, UInt8(71), 36.0);
        if (var220) { // block id: 222
            var var230 : Int8 = Int8(48);
            ('0', UInt8(26), Int32(-119), var230)[2];
            let var303 : ((Rune*UInt8*Int32*Int8)*Bool*UInt8*Float64) = (('6', UInt8(122), Int32(72), Int8(-98)), true, UInt8(111), (-62.0));
            func func278(namedParam279 ! : (Rune*UInt8*Int32*Int8), optionalParam280 ! : Unit = (), namedParam282 ! : (Rune*UInt8*Int32*Int8), optionalParam283 ! : Bool = false) : ((Rune*UInt8*Int32*Int8)*Bool*UInt8*Float64) { // block id: 285
                let var297 : UInt8 = UInt8(34);
                if (false) { // block id: 288
                    var var294 : Bool = true;
                    var var300 : Float64 = 54.0;
                    if (optionalParam283) { (namedParam279, var294, var297, var300) } else { var303 }
                } else { // block id: 313
                    var317[0]
                }
            }
;
            let var339 : (Rune*UInt8*Int32*Int8) = ('U', UInt8(117), Int32(-9), Int8(-62));
            func func234() : Bool { // block id: 235
                var var241 : Int32 = Int32(-40);
                let var335 : Int8 = Int8(-21);
                var var351 : Float32 = Float32(-123.0);
                var var365 : UInt8 = UInt8(134);
                if (match (var241) {
                    case caseVar246@ caseVar245 =>
                        namedParam209;
                        Int16(81);
                        var220

                    case 15 | 105 | -13 =>
                        var220

                    case caseVar257 =>
                        false

                    case caseVar262 : UInt8 =>
                        namedParam208;
                        var220

                    case _ =>
                        (var270, UInt32(194), true, Int32(-43), Float32(-62.0));
                        var220

                }) { func278(namedParam279 : (namedParam209, UInt8(148), Int32(10), var335), optionalParam280 : (), namedParam282 : var339, optionalParam283 : true) } else { ((-80), var351, (var339, true, UInt8(152), var358), ((var339, var220, var365, var358), UInt32(87)), UInt16(57))[2] } [1]
            }
;
            func234()
        } else if (match (match {
                case var220 =>
                var32;
                var32;
                var131
                case var380 =>
                UInt16(193);
                var131
                case _ =>
                ();
                var131
            }) {
            case caseVar398@ (_,caseVar390,caseVar392@ caseVar391@ _,var270,caseVar397@ -107.0 | var395) =>
                ();
                false

            case _ =>
                var405;
                true

        }) { // block id: 416
            var405[1];
            if (var220) { var423 } else { var423 } ;
            match (var220) {
                case _ =>
                    'c';
                    var380

                case var220 | true | false | var220 =>
                    true

                case caseVar441 =>
                    (-111);
                    ();
                    var220

                case caseVar448 =>
                    'W';
                    var380

                case _ =>
                    '0';
                    namedParam207;
                    true

            }
        } else { // block id: 457
            Class40.var461;
            var var486 : UInt8 = UInt8(65);
            let var490 : Int8 = Int8(-92);
            match (var405) {
                case (caseVar467@ _,_,caseVar470@ caseVar469@ caseVar468 : UInt32,_) =>
                    false

                case (_ : UInt32,_ : (Int64*Float32*((Rune*UInt8*Int32*Int8)*Bool*UInt8*Float64)*(((Rune*UInt8*Int32*Int8)*Bool*UInt8*Float64)*UInt32)*UInt16),caseVar477@ caseVar476@ caseVar475@ 232,caseVar478 : UInt16) =>
                    var32;
                    let var483 : Rune = 'd';
                    (var483, var486, Int32(-29), var490);
                    true

                case _ =>
                    false

            }
        }
    }
;
    func func810(namedParam811 ! : Bool, namedParam812 ! : Rune, namedParam813 ! : Float32) : Rune { // block id: 814
        namedParam812
    }
;
    func func1158(namedParam1159 ! : (Int64*Float32*((Rune*UInt8*Int32*Int8)*Bool*UInt8*Float64)*(((Rune*UInt8*Int32*Int8)*Bool*UInt8*Float64)*UInt32)*UInt16), namedParam1160 ! : (Int64*Float32*((Rune*UInt8*Int32*Int8)*Bool*UInt8*Float64)*(((Rune*UInt8*Int32*Int8)*Bool*UInt8*Float64)*UInt32)*UInt16)) : UInt64 { // block id: 1161
        Class40.func1165(if (false) { Int16(41) } else { Int16(74) } );
        let var1291 : Interface41 = Class40();
        let var1298 : UInt64 = UInt64(26);
        let var1309 : UInt16 = UInt16(171);
        var var1645 : Int32 = Int32(-35);
        if ((if ((var1291.func205(namedParam206 : var1298, namedParam207 : UInt32(39), namedParam208 : UInt16(105), namedParam209 : var818))) { (var1291.func205(namedParam206 : UInt64(45), namedParam207 : UInt32(220), namedParam208 : var1309, namedParam209 : 'u')) } else { if (false) { // block id: 1314
            false
        } else { // block id: 1316
            var423;
            var622
        } } )) { UInt16(46) } else { (var1322.func1325(Int32(2), Float32(55.0), namedParam1328 : ((('4', var1115, var1645, Int8(-29)), var1441, UInt8(158), var1001), var498))) } ;
        var var1719 : Float32 = Float32(8.0);
        if (if (match ((var818, UInt8(212), var1645, Int8(86))) {
            case _ =>
                var32;
                var1435;
                var1363

        }) { if (true) { // block id: 1667
            var1197;
            ();
            var1363
        } else { // block id: 1671
            var1441
        } } else { if (true) { // block id: 1675
            var622
        } else { // block id: 1677
            var1197;
            ();
            var1077
        } } ) { // block id: 1681
            match ('C') {
                case 'u' =>
                    var32;
                    var var1689 : Unit = ();
                    var1689

                case _ =>
                    var1435;
                    var423;
                    ()

            };
            match ((-34.0)) {
                case _ =>
                    ();
                    Int32(51);
                    var818

                case -68.0 | var1707 | -6.0 =>
                    var818

                case _ =>
                    Float32(120.0);
                    'I'

            };
            var1298
        } else { // block id: 1716
            let var1724 : Float32 = Float32(-2.0);
            match (var1719) {
                case var1724 | var1724 | -7.0 | -104.0 =>
                    UInt64(53)

                case caseVar1732@ caseVar1731 =>
                    ();
                    UInt64(145)

                case _ =>
                    123.0;
                    var1435;
                    UInt64(106)

            };
            var1298
        }
    }
;
    static func func1165(param1166 : Int16) : Unit

}

public interface Interface42 <: Interface41 {
    func func1325(param1326 : Int32, param1327 : Float32, namedParam1328 ! : (((Rune*UInt8*Int32*Int8)*Bool*UInt8*Float64)*UInt32)) : UInt16 { // block id: 1329
        match (var1336.func1339(var131, var1510)) {
            case 143 =>
                Int8(-122);
                var1419

            case caseVar1631 =>
                var1419

            case _ =>
                var1419

        }
    }
;
    func func81(namedParam82 ! : Float64, namedParam83 ! : UInt64, namedParam84 ! : Float32) : Unit { // block id: 85
        if (if (var93.var632) { // block id: 634
            var423;
            false
        } else if (match (var545) {
            case caseVar641 =>
                ();
                var var645 : Int8 = Int8(121);
                var645;
                var622

            case defaultValue =>
                ();
                UInt8(22);
                var622

            case defaultValue  =>
                ();
                var622

            case _ =>
                ();
                true

        }) { // block id: 663
            var622
        } else { // block id: 665
            (-34);
            var423;
            var622
        }) { // block id: 669
            ();
            let var675 : Unit = ();
            var loopTimeVar678 : Int64 = 0;
            while (var622 && loopTimeVar678 < 100 ) {
                loopTimeVar678++;
                var675
            };
            var var683 : Rune = 'l';
            if (var622) { 'z' } else { var683 }
        } else { // block id: 685
            let var795 : (Rune*UInt8*Int32*Int8) = ('o', UInt8(102), Int32(84), Int8(70));
            let var837 : Bool = false;
            let var845 : Unit = ();
            func func687(param688 : Unit, param689 : (((Rune*UInt8*Int32*Int8)*Bool*UInt8*Float64)*UInt32)) : Rune { // block id: 690
                func func701(param702 : (Int64*Float32*((Rune*UInt8*Int32*Int8)*Bool*UInt8*Float64)*(((Rune*UInt8*Int32*Int8)*Bool*UInt8*Float64)*UInt32)*UInt16), param703 : ((Rune*UInt8*Int32*Int8)*Bool*UInt8*Float64), optionalParam704 ! : Float64 = 126.0) : Unit { // block id: 706

                }
;
                let var734 : ((Rune*UInt8*Int32*Int8)*Bool*UInt8*Float64) = (('b', UInt8(134), Int32(-127), Int8(-48)), true, UInt8(13), (-110.0));
                if (var202.func205(namedParam206 : namedParam83, namedParam207 : UInt32(101), namedParam208 : UInt16(81), namedParam209 : 'R')) { // block id: 699
                    var var708 : (Int64*Float32*((Rune*UInt8*Int32*Int8)*Bool*UInt8*Float64)*(((Rune*UInt8*Int32*Int8)*Bool*UInt8*Float64)*UInt32)*UInt16) = (118, Float32(-53.0), (('6', UInt8(15), Int32(59), Int8(-71)), true, UInt8(160), 95.0), ((('p', UInt8(253), Int32(104), Int8(-27)), true, UInt8(142), 56.0), UInt32(182)), UInt16(183));
                    func701(var708, var734);
                    if (var622) { var423 } else { () } ;
                    if (var622) { // block id: 750
                        'u'
                    } else if (var622) { // block id: 753
                        param688;
                        var var756 : Unit = ();
                        var756;
                        '3'
                    } else { // block id: 759
                        ();
                        125;
                        'C'
                    }
                } else if (var622) { // block id: 764
                    ();
                    let var803 : UInt8 = UInt8(14);
                    func701(var768, (var795, true, var803, (-14.0)), optionalParam704 : 120.0);
                    var202.func810(namedParam811 : true, namedParam812 : var818, namedParam813 : namedParam84)
                } else { // block id: 821
                    let var833 : Unit = ();
                    match (var32) {
                        case caseVar826 : UInt8 =>
                            ();
                            'W'

                        case var833 =>
                            var837;
                            var423;
                            var818

                        case param688 | var845 =>
                            ();
                            'N'

                        case _ =>
                            'T'

                    }
                }
            }
;
            func687(var845, var855)
        };
        var var869 : Int32 = Int32(-45);
        match (var869) {
            case _ =>
                Int16(114)

        };
        let var1082 : Int32 = Int32(59);
        func func879(namedParam880 ! : UInt8, namedParam881 ! : (Int32*UInt32*Bool*Int32*Float32), namedParam882 ! : UInt64, namedParam883 ! : UInt64) : Bool { // block id: 884
            match (var213.func889(var1082, optionalParam891 : false)) {
                case _ : UInt32 =>
                    var423;
                    var423;
                    false

                case caseVar1093@ defaultValue  =>
                    false

                case _ =>
                    var622

                case _ : UInt8 =>
                    UInt32(110);
                    var32;
                    var622

                case _ =>
                    var1077;
                    ();
                    false

            }
        }
;
        let var1744 : (Int64*Float32*((Rune*UInt8*Int32*Int8)*Bool*UInt8*Float64)*(((Rune*UInt8*Int32*Int8)*Bool*UInt8*Float64)*UInt32)*UInt16) = (66, Float32(-105.0), (('v', UInt8(133), Int32(51), Int8(15)), false, UInt8(45), (-56.0)), ((('W', UInt8(37), Int32(71), Int8(-86)), true, UInt8(229), (-47.0)), UInt32(163)), UInt16(171));
        let var1805 : Int64 = 88;
        func func875() : Unit { // block id: 876
            let var1124 : ((Rune*UInt8*Int32*Int8)*Bool*UInt8*Float64) = (('h', UInt8(144), Int32(22), Int8(62)), false, UInt8(56), (-118.0));
            if (func879(namedParam880 : if (true) { // block id: 1113
                var1115
            } else if (true) { // block id: 1118
                var32;
                var423;
                var1115
            } else { // block id: 1122
                var1124;
                var768;
                var1115
            }, namedParam881 : if (var622) { // block id: 1138
                ();
                var423;
                var131
            } else if (var622) { // block id: 1143
                namedParam83;
                var32;
                var131
            } else { // block id: 1147
                var423;
                (Int32(-114), var498, true, Int32(-27), Float32(-70.0))
            }, namedParam882 : var202.func1158(namedParam1159 : var768, namedParam1160 : var1744), namedParam883 : UInt64(220))) { // block id: 1770
                var loopTimeVar1777 : Int64 = 0;
                while (true && loopTimeVar1777 < 100 ) {
                    loopTimeVar1777++;
                    104.0;
                    ()
                };
                false
            } else { // block id: 1779
                if (var1441) { // block id: 1782
                    'j';
                    var1260
                } else { // block id: 1785
                    Int8(-112)
                };
                if (true) { var1197 } else { () } ;
                false
            };
            if (if (match ((-97)) {
                case 77 | -96 =>
                    ();
                    UInt32(160);
                    var622

                case caseVar1807@ 106 | -118 | var1805 =>
                    var1363

                case _ =>
                    var1435;
                    var1419;
                    var1363

            }) { // block id: 1815
                ();
                var1257;
                var1441
            } else if (true) { // block id: 1820
                var498;
                var1197;
                false
            } else { // block id: 1824
                var1197;
                var1077
            }) { // block id: 1827
                ();
                if (var1441) { // block id: 1831
                    ()
                }
            }
        }
;
        func875()
    }
;
    static func func1165(param1166 : Int16) : Unit

}

 open class Class40 <: Interface41 & Interface42 {
    public init() { // block id: 44

    }
;
    public static let var78 : Interface42 = Class40();
    public var var216 : Bool = true;
    public static var var461 : Unit = ();
    private let var952 : ((Rune*UInt8*Int32*Int8)*Bool*UInt8*Float64) = (('I', UInt8(179), Int32(116), Int8(0)), true, UInt8(104), (-8.0));
    public static let var1049 : UInt16 = UInt16(75);
    public func func889(param890 : Int32, optionalParam891 ! : Bool = false, optionalParam893 ! : UInt8 = UInt8(163)) : Enum140 { // block id: 895
        var var903 : Aggregate899 = Aggregate899();
        var var927 : Rune = 'L';
        let var933 : Float32 = Float32(43.0);
        let var1054 : Int32 = Int32(-36);
        match {
            case func205(namedParam206 : var903.var906, namedParam207 : if (var622) { UInt32(8) } else { UInt32(161) } , namedParam208 : UInt16(189), namedParam209 : if (true) { // block id: 915
                'b'
            } else if (var216) { // block id: 918
                let var920 : Float32 = Float32(-36.0);
                var920;
                var818
            } else { // block id: 923
                var423;
                ();
                var927
            }) =>
            if (true) { var933 } else { Float32(-78.0) } ;
            if (var216) { // block id: 938

            };
            let var973 : Unit = ();
            match (Enum140.enumValue547) {
                case defaultValue  =>
                    Enum140.defaultValue

                case defaultValue  =>
                    ((-128), Float32(111.0), var952, var317, UInt16(26));
                    var545

                case defaultValue  =>
                    Int32(-102);
                    Enum140.defaultValue

                case _ =>
                    var973;
                    Enum140.enumValue547

            }
            case match (match (Enum978.defaultValue) {
                    case defaultValue  =>
                        ();
                        var768;
                        (-86.0)

                    case _ =>
                        var498;
                        ();
                        85.0

                    case _ =>
                        (var927, optionalParam893, Int32(92), Int8(-71));
                        var1001

                }) {
                case caseVar1005@ _ =>
                    ();
                    Float32(-21.0);
                    false

                case 10.0 | var1001 | var1001 | var1001 =>
                    var1001;
                    ();
                    var622

                case caseVar1023@ var1001 | 89.0 | -20.0 | var1001 =>
                    optionalParam891

                case _ =>
                    var461;
                    Int32(-41);
                    false

            } =>
            if (var216) { // block id: 1034
                UInt8(233)
            } else { // block id: 1036
                var var1038 : Unit = ();
                var1038;
                'O';
                optionalParam893
            };
            Enum140.enumValue547
            case _ =>
            match (UInt16(44)) {
                case var1049 =>
                    ();
                    var1054

                case caseVar1058 : UInt16 =>
                    ();
                    Int32(-80)

                case _ =>
                    var var1065 : Int16 = Int16(-123);
                    var1065;
                    Int32(-49)

            };
            if (true) { // block id: 1070

            } else if (var622) { // block id: 1072
                var32;
                ()
            };
            if (var1077) { Enum140.enumValue547 } else { var545 }
        }
    }
;
    private var var1204 : Unit = ();
    public static var var1243 : Interface41 = Class40();
    public static func func1165(param1166 : Int16) : Unit { // block id: 1167
        let var1181 : Enum1169 = Enum1169.defaultValue;
        match (if ((Aggregate1173.var1178)) { var1181 } else { if (var1077) { // block id: 1185
                Enum1169.defaultValue
            } else if (var622) { // block id: 1188
                var1115;
                var423;
                Enum1169.defaultValue
            } else { // block id: 1192
                var1181
            } } ) {
            case _ =>
                var1197;
                var1049;
                var461

        };
        var213.var1204;
        var var1249 : UInt16 = UInt16(118);
        var loopTimeVar1282 : Int64 = 0;
        if ((if ((if (false) { true } else { var622 } )) { (if (false) { var622 } else { var1077 } ) } else { match (var818) {
            case var818 =>
                true

            case _ : Rune =>
                var461;
                UInt32(27);
                var1077

            case _ =>
                var1197;
                var1233;
                var1077

        } } )) { (if ((var1243.func205(namedParam206 : UInt64(227), namedParam207 : UInt32(191), namedParam208 : var1249, namedParam209 : var818))) { match (Int8(-20)) {
            case caseVar1263@ caseVar1262@ var1257 | 52 | var1260 =>
                ()

            case _ =>
                ();
                UInt8(56);
                var461

        } } else { if (var622) { // block id: 1273

        } } ) } else { while (if (var1077) { false } else { var622 }  && loopTimeVar1282 < 100 ) {
            loopTimeVar1282++;
            ()
        } }
    }
;
    public static let var1861 : Rune = 'F';
    public static var var1866 : Float32 = Float32(116.0)
}

public struct Aggregate89 {
    public init() { // block id: 91

    }
;
    public static var var106 : UInt8 = UInt8(161);
    public static let var173 : Int32 = Int32(-41);
    private let var522 : (Rune*UInt8*Int32*Int8) = ('q', UInt8(158), Int32(-94), Int8(0));
    private func func144(namedParam145 ! : UInt16, namedParam146 ! : Rune, namedParam147 ! : Bool, namedParam148 ! : UInt64) : Bool { // block id: 149
        var32;
        func func153() : Int64 { // block id: 154
            var var181 : Int64 = (-38);
            match (Int32(-118)) {
                case caseVar159 : UInt8 =>
                    var var162 : Int64 = (-101);
                    var162

                case _ =>
                    var var168 : Int64 = 62;
                    var168

                case var173 | var173 | var173 | -31 =>
                    3;
                    var32;
                    var181

                case 56 | var173 =>
                    var32;
                    ();
                    3

                case _ =>
                    UInt8(188);
                    UInt32(71);
                    var181

            }
        }
;
        match (func153()) {
            case _ =>
                UInt16(118);
                Int16(19)

        };
        if (var202.func205(namedParam206 : UInt64(215), namedParam207 : var498, namedParam208 : namedParam145, namedParam209 : namedParam146)) { // block id: 502
            var32;
            var202.func205(namedParam206 : UInt64(211), namedParam207 : var498, namedParam208 : UInt16(206), namedParam209 : namedParam146)
        } else { // block id: 511
            if (true) { // block id: 514
                Int16(-35);
                UInt8(9)
            } else { // block id: 517
                UInt8(237)
            };
            (var522, namedParam147, var106, 117.0)[1]
        }
    }
;
    private static var var536 : Rune = 'G';
    public static var var539 : Bool = false;
    public static var var566 : Int8 = Int8(-93);
    public static let var584 : Bool = false;
    public init(param96 : Float64) { // block id: 97
        match (match (var18) {
                case caseVar103 : UInt16 =>
                    var106;
                    Enum15.defaultValue

                case caseVar112@ caseVar111@ defaultValue =>
                    UInt16(209);
                    caseVar112

                case _ =>
                    Enum15.defaultValue

            }) {
            case _ : Float32 =>
                var32;
                var32;
                var32

            case _ =>
                var var128 : Rune = 'C';
                var128;
                var131;
                var32

        };
        var var533 : UInt16 = UInt16(243);
        let var553 : Enum140 = Enum140.defaultValue;
        match (if (func144(namedParam145 : var533, namedParam146 : var536, namedParam147 : var539, namedParam148 : UInt64(52))) { (if (var539) { var545 } else { var545 } ) } else { if (var539) { // block id: 551
                var553
            } else if (var539) { // block id: 556
                var553
            } else { // block id: 558
                (((var536, var106, var173, var566), var539, var106, param96), var498);
                var317;
                var545
            } } ) {
            case _ : Int64 =>
                var539

            case caseVar580 =>
                false;
                var584

            case _ =>
                var539;
                var539

        };
        let var615 : (Rune*UInt8*Int32*Int8) = ('T', UInt8(138), Int32(-4), Int8(112));
        match {
            case false =>
            var var594 : ((Rune*UInt8*Int32*Int8)*Bool*UInt8*Float64) = (('M', UInt8(79), Int32(-91), Int8(20)), false, UInt8(86), 58.0);
            var594;
            match (UInt32(250)) {
                case _ =>
                    ()

            };
            (Aggregate89(), (var615, var622, UInt8(79), (-91.0)), var533)[0]
            case _ =>
            Aggregate89()
        }
    }
;
    public var var632 : Bool = false
}

enum Enum140 {
    defaultValue |
    enumValue547
}
struct Aggregate899 {
    public init() { // block id: 901

    }
;
    public let var906 : UInt64 = UInt64(115)
}

enum Enum978 {
    defaultValue
}
public enum Enum1169 {
    defaultValue
}
 struct Aggregate1173 {
    public init() { // block id: 1175

    }
;
    public static var var1178 : Bool = false
}

struct Aggregate1332 {
    public init() { // block id: 1334

    }
;
    private static let var1401 : UInt8 = UInt8(119);
    private static let var1405 : ((Rune*UInt8*Int32*Int8)*Bool*UInt8*Float64) = (('5', UInt8(45), Int32(94), Int8(111)), true, UInt8(166), 64.0);
    public static var var1521 : UInt32 = UInt32(96);
    public func func1339(param1340 : (Int32*UInt32*Bool*Int32*Float32), param1341 : Int64) : UInt64 { // block id: 1342
        var var1349 : Bool = false;
        let var1357 : Int32 = Int32(-22);
        if (true) { match ((var1233, var1349, var1115, 70.0)) {
            case ((_,caseVar1355,-76 | var1357 | var1357 | var1357,caseVar1361@ _),var1363 | true,caseVar1355,-39.0) =>
                caseVar1355;
                (var1233, false, caseVar1355, var1001)

            case caseVar1375 =>
                caseVar1375

            case _ : Int8 =>
                var1197;
                ((var818, UInt8(116), Int32(21), var1257), false, var1115, (-112.0))

            case _ =>
                ((var818, var1115, Int32(45), var1257), var1349, var1401, (-7.0))

        } } else { var1405 } ;
        var loopTimeVar1462 : Int64 = 0;
        while (if (match (var1419) {
            case 231 =>
                var1349

            case var1419 =>
                var423;
                ();
                var1077

            case _ =>
                var1435;
                ();
                var1363

        }) { (if (var1441) { true } else { false } ) } else { match (var1447) {
            case _ =>
                ();
                ();
                var1077

            case _ =>
                var1435;
                var622

        } }  && loopTimeVar1462 < 100 ) {
            loopTimeVar1462++;
            var768
        };
        match {
            case match (false) {
                case caseVar1468 =>
                    var32;
                    var var1472 : ((Rune*UInt8*Int32*Int8)*Bool*UInt8*Float64) = (('A', UInt8(160), Int32(-70), Int8(-104)), false, UInt8(201), (-42.0));
                    var1472;
                    true

                case true =>
                    var1349

                case _ =>
                    ();
                    (var1233, var1363, UInt8(67), (-65.0));
                    true

            } =>
            match (((var1233, var622, UInt8(66), var1001), UInt32(244))) {
                case _ =>
                    var1197;
                    var var1513 : Float32 = Float32(-80.0);
                    (var1510, var1513, var1405, var855, UInt16(62));
                    (Int32(-61), var1521, false, Int32(31), var1513)

            };
            if (false) { // block id: 1528
                let var1530 : UInt64 = UInt64(217);
                var1530
            } else { // block id: 1532
                var32;
                var1197;
                UInt64(207)
            }
            case match (var1401) {
                case caseVar1541@ 176 | var1401 =>
                    var1197;
                    true

                case _ =>
                    (Int32(68), UInt32(137), true, var1357, Float32(-118.0));
                    var1363;
                    var1077

                case caseVar1559@ caseVar1558 =>
                    let var1562 : Bool = false;
                    var1562

                case _ =>
                    var1357;
                    var622

            } =>
            ();
            var1571
            case _ =>
            let var1594 : (Int32*UInt32*Bool*Int32*Float32) = (Int32(-67), UInt32(178), true, Int32(-128), Float32(18.0));
            match (false) {
                case true =>
                    var1233;
                    UInt32(99);
                    param1340

                case var1363 =>
                    var1435;
                    ();
                    var131

                case _ =>
                    'Q';
                    Float32(11.0);
                    var1594

            };
            match (param1341) {
                case caseVar1605 : Unit =>
                    Int8(-82);
                    ();
                    ()

                case -74 =>
                    var1435;
                    var1571;
                    var32

                case _ =>
                    var1435;
                    var1197;
                    var32

            };
            var1571
        }
    }

}

main(): Int64 {
    if (false) { // block id: 7
        ();
        var var10 : Float64 = (-19.0);
        var10
    } else { // block id: 12
        113.0
    };
    match (var18) {
        case caseVar22@ defaultValue =>
            var var25 : Unit = ();
            var25

        case caseVar29@ defaultValue =>
            var32;
            var32;
            var32

        case _ =>
            ()

    };
    Class40.func47(var1871)
    // CRC Check All Variables
    var crccheck = CrcCheck(5000, 32)
    crccheck.updateBuffer(UInt64(var498), 64)
    crccheck.updateBuffer(UInt64(var1115), 64)
    crccheck.updateBuffer(UInt64(var1257), 64)
    crccheck.updateBuffer(UInt64(var1260), 64)
    crccheck.updateBuffer(UInt64(var1419), 64)
    crccheck.updateBuffer(UInt64(var1447), 64)
    crccheck.updateBuffer(UInt64(var1510), 64)
    crccheck.updateBuffer(UInt64(var1571), 64)
    crccheck.updateBuffer(UInt64(var1871), 64)
    crccheck.crcCheck()
    crccheck.getCrcOutput()

    return 0;
}

class CrcCheck {
    public var buffer: Array<Int64>
    public var poly: Array<Int64>
    public var crc_output: Array<Int64>
    public var poly_n: Int64
    public var buffer_index: Int64
    public var crc_output_n: Int64

    public init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64> (crc_output_n, 0)
        buffer = Array<Int64> (buffer_n, 0)
        poly_n = crc_n + 1
        poly = Array<Int64> (poly_n, 0)
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    public func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64> (byte_n, 0)
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    public func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64> (crc_output_n, 0)
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64> (crc_output_n, 0)
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    public func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
    }
}
extend Enum140 {

}

extend Aggregate899 {

}

extend Aggregate899 {

}

extend Class40 {
    public static func func47(param48 : Int32) : Int64 { // block id: 49
        let var55 : Bool = false;
        var var59 : (Int32*UInt32*Bool*Int32*Float32) = (Int32(98), UInt32(193), false, Int32(-41), Float32(-99.0));
        match {
            case if (var55) { // block id: 57
                var59
            } else { // block id: 66
                var32;
                (param48, UInt32(206), true, Int32(-115), Float32(19.0))
            }[2] =>
            var78.func81(namedParam82 : 85.0, namedParam83 : var1571, namedParam84 : Float32(24.0));
            if (var1363) { // block id: 1838
                ();
                var498
            } else { // block id: 1841
                UInt16(239);
                var498
            }
            case var1441 =>
            var423;
            var498
            case _ =>
            Float32(9.0);
            UInt32(88)
        };
        match (if (true) { 122.0 } else { (-121.0) } ) {
            case var1001 | -100.0 =>
                var1861

            case _ =>
                var1866;
                'd'

        };
        var1510
    }

}

