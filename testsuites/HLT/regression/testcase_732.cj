/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args

public let var_1735131112844_94: (Class_1735131112844_80, UInt16, Class_1735131112844_80, Float32, Unit) = (Class_1735131112844_80(),
    UInt16(UInt8(146)), Class_1735131112844_80(), Float32(Float32(Float32(Float32(126.0)))), ())
public var var_1735131112844_122: Int16 = Int16(80)
public var var_1735131112844_137: (Float64, (Bool, Class_1735131112844_80, Float64, Class_1735131112844_80, 
    Class_1735131112844_80), (Bool, Class_1735131112844_80, Float64, Class_1735131112844_80, Class_1735131112844_80), 
    Interface_1735131112844_83) = (Float64(Float32(Float32(5.0))), ((Class_1735131112844_80() is Int32),
        Class_1735131112844_80(), Float64(Float32(-87.0)), Class_1735131112844_80(), Class_1735131112844_80()), (false,
        Class_1735131112844_80(), Float64(Float32(Float32(86.0))), Class_1735131112844_80(), Class_1735131112844_80()),
    Class_1735131112844_80())
internal const var_1735131112844_183: Unit = ()
@Deprecated
public const var_1735131112844_195: Bool = false
public var var_1735131112844_198: String = "K`0d&I}4Jz"
public var var_1735131112844_247: Int32 = Int32(111)
@Deprecated
public var var_1735131112844_251: UInt = UInt64(208)
public let var_1735131112844_255: Float32 = Float32(Float32(-98.0))

@Frozen
@Deprecated
public const func func_1735131112844_6<T0, T1, T2>(param_1735131112844_7: Int64): Int64 { // block id: 8
    200;
    const func func_1735131112844_15(namedParam_1735131112844_16!: Float64, namedParam_1735131112844_17!: UInt64,
        namedParam_1735131112844_18!: Int32): Int8 { // block id: 19
        71;
        10 - 19
    };

    const var_1735131112844_52: Int64 = 126;
    const var_1735131112844_75: Int32 = -35;
    const func func_1735131112844_11<T0, T1>(): Int64 { // block id: 12
        const var_1735131112844_25: Float64 = -119.0;
        const var_1735131112844_42: Unit = ();
        const func func_1735131112844_35(param_1735131112844_36: Float64, namedParam_1735131112844_37!: Rune,
            optionalParam_1735131112844_38!: Int8 = 110): Unit { // block id: 40
            var_1735131112844_42
        };

        const func func_1735131112844_46(param_1735131112844_47: Int64, param_1735131112844_48: String): Rune { // block id: 49
            r'C'
        };

        const func func_1735131112844_29(optionalParam_1735131112844_30!: Bool = false,
            namedParam_1735131112844_32!: String): Int32 { // block id: 33
            func_1735131112844_35(-74.0,
                namedParam_1735131112844_37: func_1735131112844_46(var_1735131112844_52, "tfiId0`Vhn"));
            const var_1735131112844_63: Int16 = -10;
            const func func_1735131112844_58<T0>(): Int32 { // block id: 59
                ();
                var_1735131112844_63 + var_1735131112844_63;
                -67
            };

            19 & func_1735131112844_58<UInt64>()
        };

        const var_1735131112844_68: Bool = false;
        func_1735131112844_15(namedParam_1735131112844_16: var_1735131112844_25, namedParam_1735131112844_17: 173,
            namedParam_1735131112844_18: func_1735131112844_29(optionalParam_1735131112844_30: var_1735131112844_68,
                namedParam_1735131112844_32: "k3-X(x(ySA")) - func_1735131112844_15(
            namedParam_1735131112844_16: var_1735131112844_25, namedParam_1735131112844_17: 156,
            namedParam_1735131112844_18: var_1735131112844_75);
        var_1735131112844_52
    };

    func_1735131112844_11<String, Int8>()
}

public interface Interface_1735131112844_83 {}

@Deprecated
public open class Class_1735131112844_80 <: Interface_1735131112844_83 & Resource {
    public init() { // block id: 82

    }

    @Frozen
    public init(param_1735131112844_174: UInt8) { // block id: 175
        let var_1735131112844_202: Float64 = Float64(-54.0);
        (try (resource = Class_1735131112844_80()) { // block id: 180
                ();
                var_1735131112844_183;
                ()
            } finally { // block id: 186

            }, (Option<(Bool, String, Int16, Float64)>.None ?? (var_1735131112844_195, var_1735131112844_198,
                var_1735131112844_122, var_1735131112844_202)))[0];
        var_1735131112844_183
    };

    public let var_1735131112844_264: Int64 = Int64(74)
    public func isClosed(): Bool {
        return true
    }
    public func close(): Unit {}
}

@Deprecated
public struct Struct_1735131112844_113<T0> {
    public init() { // block id: 115

    }
}

@Frozen
public func func_1735131112844_109(param_1735131112844_110: UInt64): (Bool, Class_1735131112844_80, Float64, 
    Class_1735131112844_80, Class_1735131112844_80) { // block id: 111
    Struct_1735131112844_113<Int8>.func_1735131112844_118();
    var_1735131112844_137[1]
}

@Frozen
@Deprecated
public func func_1735131112844_161(param_1735131112844_162: (Int64) -> Int64): (Bool, Class_1735131112844_80, Float64, 
    Class_1735131112844_80, Class_1735131112844_80) { // block id: 165
    let var_1735131112844_167: (Bool, Class_1735131112844_80, Float64, Class_1735131112844_80, Class_1735131112844_80) = (true,
        Class_1735131112844_80(), Float64(90.0), Class_1735131112844_80(UInt8(250)), Class_1735131112844_80());
    var_1735131112844_167
}

@Deprecated
public const func func_1735131112844_211(param_1735131112844_7: Int64): Int64 { // block id: 8
    200;
    const func func_1735131112844_15(namedParam_1735131112844_16!: Float64, namedParam_1735131112844_17!: UInt64,
        namedParam_1735131112844_18!: Int32): Int8 { // block id: 19
        71;
        10 - 19
    };

    const var_1735131112844_52: Int64 = 126;
    const var_1735131112844_75: Int32 = -35;
    const func func_1735131112844_11<T0, T1>(): Int64 { // block id: 12
        const var_1735131112844_25: Float64 = -119.0;
        const var_1735131112844_42: Unit = ();
        const func func_1735131112844_35(param_1735131112844_36: Float64, namedParam_1735131112844_37!: Rune,
            optionalParam_1735131112844_38!: Int8 = 110): Unit { // block id: 40
            var_1735131112844_42
        };

        const func func_1735131112844_46(param_1735131112844_47: Int64, param_1735131112844_48: String): Rune { // block id: 49
            r'C'
        };

        const func func_1735131112844_29(optionalParam_1735131112844_30!: Bool = false,
            namedParam_1735131112844_32!: String): Int32 { // block id: 33
            func_1735131112844_35(-74.0,
                namedParam_1735131112844_37: func_1735131112844_46(var_1735131112844_52, "tfiId0`Vhn"));
            const var_1735131112844_63: Int16 = -10;
            const func func_1735131112844_58<T0>(): Int32 { // block id: 59
                ();
                var_1735131112844_63 + var_1735131112844_63;
                -67
            };

            19 & func_1735131112844_58<UInt64>()
        };

        const var_1735131112844_68: Bool = false;
        func_1735131112844_15(namedParam_1735131112844_16: var_1735131112844_25, namedParam_1735131112844_17: 173,
            namedParam_1735131112844_18: func_1735131112844_29(optionalParam_1735131112844_30: var_1735131112844_68,
                namedParam_1735131112844_32: "k3-X(x(ySA")) - func_1735131112844_15(
            namedParam_1735131112844_16: var_1735131112844_25, namedParam_1735131112844_17: 156,
            namedParam_1735131112844_18: var_1735131112844_75);
        var_1735131112844_52
    };

    func_1735131112844_11<String, Int8>()
}

public func func_1735131112844_213(param_1735131112844_214: UInt64): (Int64) -> Int64 { // block id: 215
    func_1735131112844_211
}

@Deprecated
public enum Enum_1735131112844_219<T0> {
    defaultValue
    | enumValue_1735131112844_224(Unit)
}

main(): Int64 {
    try {
        let var_1735131112844_209: ((Int64) -> Int64) -> (Bool, Class_1735131112844_80, Float64, Class_1735131112844_80, 
            Class_1735131112844_80) = func_1735131112844_161;
        let var_1735131112844_231: (Bool, String, Int16, Float64) = ((UInt32(UInt8(86)) is (Int64) -> Int64),
            ###"/i(]TT/#A]"###, Int16(UInt8(Int8(Int8(-47)))), Float64(Float32(Float32(Float32(-7.0)))));
        func func_1735131112844_85<T0, T1, T2>(optionalParam_1735131112844_86!: Float32 = Float32(110.0),
            namedParam_1735131112844_88!: Int32, namedParam_1735131112844_89!: UInt8): Class_1735131112844_80 { // block id: 90
            var_1735131112844_94[4];
            var var_1735131112844_222: Enum_1735131112844_219<Struct_1735131112844_113<Int8>> = Enum_1735131112844_219<Struct_1735131112844_113<Int8>>
                .enumValue_1735131112844_224(());
            (match (var_1735131112844_222) {
                case _ =>
                    var_1735131112844_231;
                    var_1735131112844_247 /= ((Int32(75)) | 1)
                    var_1735131112844_251
            } |> (func_1735131112844_213 ~> var_1735131112844_209))[3]
        };

        var var_1735131112844_260: Byte = UInt8(Int8(102));
        func_1735131112844_85<Rune, UInt8, Interface_1735131112844_83>(
            optionalParam_1735131112844_86: var_1735131112844_255, namedParam_1735131112844_88: var_1735131112844_247,
            namedParam_1735131112844_89: var_1735131112844_260).var_1735131112844_264 |> func_1735131112844_6<Rune, Rune, Bool>
        // CRC Check All Variables
        var crcCheck = CrcCheck(5000, 32)
        crcCheck.updateBuffer(UInt64(var_1735131112844_247 * var_1735131112844_247), 64)
        crcCheck.updateBuffer(UInt64(var_1735131112844_260 * var_1735131112844_260), 64)
        crcCheck.crcCheck()
        crcCheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) {
        println("Exception: NoneValueException")
    }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        buffer = Array<Int64>(buffer_n, {i => 0})
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, {i => 0})
        var byte_c = 1
        var byte_index = 0
        while (value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[(i + buffer_index) % buffer.size] = byteArray[i + byte_index]
            i++
        }
        buffer_index = (buffer_index + i) % buffer.size
    }

    func updateBuffer(input: Bool, byte_n: Int64): Unit {
        if (input == true) {
            updateBuffer(1, byte_n)
        } else {
            updateBuffer(0, byte_n)
        }
    }

    func updateBuffer(input: Rune, byte_n: Int64): Unit {
        updateBuffer(UInt64(UInt32(input)), byte_n)
    }

    func updateBuffer(input: String, byte_n: Int64): Unit {
        for (c in input) {
            updateBuffer(c, byte_n)
        }
    }

    func updateBuffer(input: Unit, byte_n: Int64): Unit {
        updateBuffer(input.toString(), byte_n)
    }

    func updateBuffer(input: Any, byte_n: Int64): Unit {
        if (input is Hashable) {
            match (input as Hashable) {
                case Some(v) => updateBuffer(UInt64(v.hashCode()), byte_n)
                case _ => updateBuffer(1, byte_n)
            }
        } else if (input is ToString) {
            match (input as ToString) {
                case Some(v) => updateBuffer(v.toString(), byte_n)
                case _ => updateBuffer(1, byte_n)
            }
        } else {
            updateBuffer(1, byte_n)
        }
    }
    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, {i => 0})
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2 ** 2 * crc_output[i] + 2 ** 1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}

extend<T0> Enum_1735131112844_219<T0> {}

extend<T0> Struct_1735131112844_113<T0> {
    public static func func_1735131112844_118(): Unit { // block id: 119
        let var_1735131112844_127: (Bool, String, Int16, Float64) = (true, "=Ki5ZJY2wk", Int16(-25), Float64(27.0));
        var_1735131112844_122 ^= var_1735131112844_127[2]
    }
}
