/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler --int-overflow=wrapping %cmp_opt %f -o %output


public var var14 : Class7 = Class7()
let var42 : UInt8 = UInt8(UInt8(155))
let var79 : Rune = 'n'
let var106 : Array<Interface11> = Array<Interface11>(10){ i => Class7() }
let var125 : ?Interface11 = ('r' as Interface11)
public let var233 : UInt64 = UInt64(UInt8(Int8(UInt8(103))))
let var251 : (Range<Int32>, Range<Int32>, Range<Int16>, Float32, Range<Int16>, Int16, Int8, UInt32) = (((Int32(15)&127)..=(Int32(-111)&127):(55|1)), ((Int32(UInt8(148))&127)..(Int32(-88)&127):((Int64(UInt64(66))|1))), ((Int16(-78)&127)..=(Int16(UInt8(UInt8(221)))&127):((Int64(UInt32(166))|1))), Float32(Float32(Float32(88.0))), ((Int16(Int16(24))&127)..=(Int16(UInt8(175))&127):((Int64(Int16(UInt8(10)))|1))), Int16(80), Int8(UInt8(135)), UInt32(Int8(23)))
public var var288 : UInt64 = UInt64(40)
var var301 : Int32 = Int32(Int16(Int16(-93)))
public let var367 : ((Range<Int32>, Range<Int32>, Range<Int16>, Float32, Range<Int16>, Int16, Int8, UInt32), Float64, Bool, Int32, Option<Option<Option<Int8>>>, UInt8, Unit, Range<UInt16>) = ((((Int32(UInt32(37))&127)..(Int32(-89)&127):((76|1))), ((Int32(-109)&127)..(Int32(-112)&127):(63|1)), ((Int16(-103)&127)..=(Int16(Int8(37))&127):(((-124)|1))), Float32(37.0), ((Int16(Int16(-1))&127)..=(Int16(91)&127):((77|1))), Int16(-72), Int8(UInt8(UInt8(104))), UInt32(UInt16(Int8(-61)))), 23.0, ((Int16(-128), UInt16(Int16(-76))) is (Range<Int32>, Range<Int32>, Range<Int16>, Float32, Range<Int16>, Int16, Int8, UInt32)), Int32(-117), Option<Option<Option<Int8>>>.None, UInt8(UInt8(Int8(81))), (), ((UInt16(172)&127)..=(UInt16(UInt8(119))&127):(((-84)|1))))
let var434 : Interface11 = Class7()
public let var464 : Int8 = Int8(UInt8(21))
let var487 : ?UInt16 = ('R' as UInt16)
public let var506 : UInt16 = UInt16(UInt8(140))
public var var560 : Bool = false
var var624 : Array<Option<Int8>> = Array<Option<Int8>>(10){ i => (Enum468.defaultValue as Int8) }
var var709 : Range<UInt8> = ((UInt8(55)&127)..=(UInt8(235)&127):(121|1))
let var732 : Int16 = Int16(Int16(83))
let var782 : Bool = false
var var865 : ?Int8 = Option<Int8>.None
public let var1019 : ?Float64 = ((Int16(UInt16(150)), UInt16(220)) as Float64)
public var var1066 : Unit = ()
public var var1095 : Int8 = Int8(-55)
public var var1177 : Int64 = Int64(UInt64(Int8(UInt8(Int8(-10)))))
var var1193 : Aggregate168 = Aggregate168()
var var1230 : Array<Range<Int8>> = [((Int8(47)&127)..(Int8(58)&127):((-115)|1)), ((Int8(-6)&127)..(Int8(-67)&127):((-11)|1)), ((Int8(9)&127)..=(Int8(-53)&127):((-46)|1)), ((Int8(-51)&127)..=(Int8(52)&127):(59|1)), ((Int8(-107)&127)..=(Int8(-9)&127):(29|1)), ((Int8(-37)&127)..(Int8(123)&127):(59|1)), ((Int8(-51)&127)..(Int8(38)&127):((-63)|1)), ((Int8(-36)&127)..=(Int8(107)&127):((-62)|1)), ((Int8(-6)&127)..(Int8(6)&127):((-109)|1)), ((Int8(-111)&127)..=(Int8(-8)&127):(83|1))]
public let var1277 : ??UInt32 = Option<Option<UInt32>>.None
var var1327 : Float64 = Float64(Float32(-65.0))
var var1380 : UInt16 = UInt16(Int8(4))
public let var1411 : (Range<UInt16>, Array<Aggregate168>, UInt16, Float32, (Int16, UInt16)) = (((UInt16(Int16(63))&127)..=(UInt16(UInt8(192))&127):((Int64(38)|1))), [Aggregate168(), Aggregate168(), Aggregate168(), Aggregate168(), Aggregate168(), Aggregate168(), Aggregate168(), Aggregate168(), Aggregate168(), Aggregate168()], UInt16(109), Float32(-1.0), (Int16(-115), UInt16(Int8(UInt8(33)))))
public var var1441 : (UInt32, Unit, Range<Int32>, Range<Int64>, Unit, (Float64, Rune)) = (UInt32(248), (), ((Int32(-64)&127)..=(Int32(-116)&127):((33|1))), (((-118)&127)..(8&127):(((-125)|1))), (), ((-29.0), 'E'))
var var1466 : Range<Int32> = ((Int32(123)&127)..(Int32(119)&127):((-108)|1))
public let var1633 : Range<UInt64> = ((UInt64(Int32(Int16(-99)))&127)..(UInt64(144)&127):((Int64(UInt32(UInt32(UInt8(225))))|1)))
let var1715 : Range<UInt32> = ((UInt32(UInt16(106))&127)..=(UInt32(90)&127):((Int64(Int8(UInt8(Int8(46))))|1)))
public var var1766 : (Array<Unit>, Range<UInt64>, Rune, Bool, Range<UInt8>, (Int16, UInt16), Range<Int32>, (Range<Int32>, Range<Int32>, Range<Int16>, Float32, Range<Int16>, Int16, Int8, UInt32)) = ([(), (), (), (), (), (), (), (), (), ()], ((UInt64(15)&127)..=(UInt64(Int16(-44))&127):((107|1))), 'E', true, ((UInt8(118)&127)..=(UInt8(UInt8(89))&127):((Int64(Int16(99))|1))), (Int16(UInt8(190)), UInt16(Int8(116))), ((Int32(-102)&127)..(Int32(42)&127):((-11)|1)), (((Int32(UInt32(157))&127)..(Int32(UInt8(188))&127):((Int64(93)|1))), ((Int32(Int8(115))&127)..=(Int32(Int16(-3))&127):((91|1))), ((Int16(51)&127)..=(Int16(107)&127):((-57)|1)), Float32(73.0), ((Int16(UInt8(71))&127)..=(Int16(57)&127):((37|1))), Int16(UInt16(225)), Int8(88), UInt32(UInt16(Int16(-6)))))
let var1903 : Int32 = Int32(Int16(UInt16(241)))
var var2058 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
let var2122 : UInt32 = UInt32(UInt32(Int32(85)))
let var2134 : Option<Interface10> = Option<Interface10>.None
let var2154 : (Float64, Rune) = (88.0, 'x')
public let var2164 : ???Int8 = (((-91.0) is Array<Unit>) as Option<Option<Int8>>)
var var2375 : UInt32 = UInt32(167)
var var2602 : UInt32 = UInt32(172)
let var2674 : UInt8 = UInt8(208)
public var var2690 : (Int16, Option<(Array<Unit>, Range<UInt64>, Rune, Bool, Range<UInt8>, (Int16, UInt16), Range<Int32>, (Range<Int32>, Range<Int32>, Range<Int16>, Float32, Range<Int16>, Int16, Int8, UInt32))>, Float64, Range<Int64>, Range<UInt8>, (Array<Unit>, Range<UInt64>, Rune, Bool, Range<UInt8>, (Int16, UInt16), Range<Int32>, (Range<Int32>, Range<Int32>, Range<Int16>, Float32, Range<Int16>, Int16, Int8, UInt32))) = (Int16(Int16(29)), ([((UInt64(128)&127)..=(UInt64(156)&127):((-94)|1)), ((UInt64(97)&127)..=(UInt64(241)&127):((-29)|1)), ((UInt64(15)&127)..(UInt64(175)&127):(9|1)), ((UInt64(224)&127)..=(UInt64(69)&127):(((-120)|1))), ((UInt64(191)&127)..=(UInt64(18)&127):((-60)|1)), ((UInt64(205)&127)..=(UInt64(167)&127):(((-10)|1))), ((UInt64(215)&127)..(UInt64(93)&127):((74|1))), ((UInt64(64)&127)..=(UInt64(191)&127):((121|1))), ((UInt64(9)&127)..(UInt64(103)&127):((73|1))), ((UInt64(251)&127)..(UInt64(151)&127):((-71)|1))] as (Array<Unit>, Range<UInt64>, Rune, Bool, Range<UInt8>, (Int16, UInt16), Range<Int32>, (Range<Int32>, Range<Int32>, Range<Int16>, Float32, Range<Int16>, Int16, Int8, UInt32))), Float64(19.0), ((110&127)..=((-35)&127):(108|1)), ((UInt8(207)&127)..(UInt8(74)&127):(((-44)|1))), ([(), (), (), (), (), (), (), (), (), ()], ((UInt64(7)&127)..=(UInt64(68)&127):((-66)|1)), '8', false, ((UInt8(130)&127)..(UInt8(70)&127):(60|1)), (Int16(UInt16(137)), UInt16(Int16(-9))), ((Int32(-27)&127)..=(Int32(121)&127):((Int64(UInt32(193))|1))), (((Int32(37)&127)..=(Int32(-89)&127):((-106)|1)), ((Int32(-16)&127)..(Int32(25)&127):((-94)|1)), ((Int16(-35)&127)..=(Int16(-61)&127):(72|1)), Float32(Float32(-30.0)), ((Int16(-94)&127)..(Int16(-71)&127):((-17)|1)), Int16(50), Int8(Int8(-79)), UInt32(UInt16(88)))))
public var var2845 : Option<Unit> = Option<Unit>.None
public var var2933 : UInt64 = UInt64(Int16(Int8(-89)))
let var2938 : UInt64 = UInt64(100)
let var3002 : ???Int8 = (((Enum468.defaultValue is Aggregate168), [((Int8(-35)&127)..(Int8(-49)&127):((-48)|1)), ((Int8(80)&127)..(Int8(-55)&127):(107|1)), ((Int8(105)&127)..(Int8(45)&127):((-36)|1)), ((Int8(8)&127)..=(Int8(-73)&127):((-30)|1)), ((Int8(66)&127)..(Int8(82)&127):(117|1)), ((Int8(35)&127)..(Int8(-108)&127):(56|1)), ((Int8(76)&127)..=(Int8(-62)&127):((-9)|1)), ((Int8(75)&127)..=(Int8(-62)&127):(78|1)), ((Int8(14)&127)..=(Int8(-79)&127):(112|1)), ((Int8(111)&127)..(Int8(46)&127):((-121)|1))]) as Option<Option<Int8>>)
public let var3058 : Option<Int32> = (([(), (), (), (), (), (), (), (), (), ()], ((UInt64(UInt8(206))&127)..(UInt64(Int32(38))&127):((Int64(UInt8(60))|1))), 'D', true, ((UInt8(154)&127)..(UInt8(55)&127):((-62)|1)), (Int16(UInt16(65)), UInt16(220)), ((Int32(59)&127)..(Int32(-30)&127):((-86)|1)), (((Int32(85)&127)..=(Int32(-115)&127):(((-36)|1))), ((Int32(43)&127)..(Int32(-90)&127):((-65)|1)), ((Int16(90)&127)..=(Int16(-112)&127):((-100)|1)), Float32(43.0), ((Int16(85)&127)..(Int16(5)&127):(103|1)), Int16(UInt8(83)), Int8(-52), UInt32(167))) as Int32)
public let var3109 : ???UInt32 = (Option<Option<Option<Int8>>>.None as Option<Option<UInt32>>)
public var var3122 : Range<Int16> = ((Int16(-17)&127)..=(Int16(11)&127):(19|1))
public var var3143 : ?UInt32 = Option<UInt32>.None
public interface Interface12<T0, T1, T2> where T0 <: Option<Option<Option<Option<Int8>>>>, T1 <: Option<Option<Float32>>, T2 <: Array<String> {
    func func229(namedParam230 ! : Aggregate168) : UInt64 { // block id: 231
        var233
    }
;
    func func229(namedParam2678 ! : Rune, namedParam2679 ! : Float32) : (Float64, Rune) { // block id: 2680
        let var2774 : (Array<Unit>, Range<UInt64>, Rune, Bool, Range<UInt8>, (Int16, UInt16), Range<Int32>, (Range<Int32>, Range<Int32>, Range<Int16>, Float32, Range<Int16>, Int16, Int8, UInt32)) = ([(), (), (), (), (), (), (), (), (), ()], ((UInt64(10)&127)..=(UInt64(161)&127):(109|1)), 'N', true, ((UInt8(44)&127)..=(UInt8(232)&127):((-20)|1)), (Int16(Int8(-9)), UInt16(64)), ((Int32(UInt32(Int8(-56)))&127)..(Int32(UInt8(Int8(11)))&127):(((-112)|1))), (((Int32(56)&127)..=(Int32(70)&127):((-47)|1)), ((Int32(UInt32(233))&127)..(Int32(UInt32(234))&127):(((-57)|1))), ((Int16(-27)&127)..(Int16(UInt16(81))&127):((98|1))), Float32(Float32(Float32(68.0))), ((Int16(-107)&127)..(Int16(Int16(-95))&127):((17|1))), Int16(UInt8(Int8(93))), Int8(-48), UInt32(Int32(-51))));
        (var2690[1] ?? try { // block id: 2768
            ((var506&127)..(UInt16(206)&127):((var1177|1)));
            var2774
        } catch (_) { // block id: 2830
            Int32(namedParam2679) % (Int32(Float32(65.0)) | 1);
            var2122;
            var2774
        } finally { // block id: 2836
            var2774
        })[1];
        var loopTimeVar2851 : Int64 = 0;
        (var2845 ?? while ((false) && loopTimeVar2851 < 100 ) {
            loopTimeVar2851++;

        });
        var var2869 : UInt8 = UInt8(UInt8(UInt8(Int8(Int8(3)))));
        match {
            case false =>
            if (var782) { (42.0, 'n') } else { (var1327, '6') }
            case _ =>
            try { // block id: 2865
                var1066;
                var2869 /= ((var42) | 1);
                (var1327, namedParam2678)
            } finally { // block id: 2879
                ();
                var1066;
                (111.0, 'p')
            };
            if (false) { (var1327, var79) } else { (var1327, namedParam2678) }
        }
    }

}

public interface Interface11 <: Interface12<Option<Option<Option<Option<Int8>>>>, Option<Option<Float32>>, Array<String>> {

}

public interface Interface10 <: Interface11 {

}

public open class Class7 <: Interface10 & Interface12<Option<Option<Option<Option<Int8>>>>, Option<Option<Float32>>, Array<String>> & Resource {
    public init() { // block id: 9

    }
;
    public var var17 : Int32 = Int32(121);
    public let var226 : UInt16 = UInt16(154);
    public var var317 : Int8 = Int8(101);
    public var var612 : Unit = ();
    public init(param603 : UInt16, param604 : Range<UInt16>, param605 : Aggregate168) { // block id: 606
        try (resource = Class7()) { // block id: 608
            this.var612;
            var301|>func25
        } finally { // block id: 617

        };
        let var651 : ?Int8 = Option<Int8>.None;
        Option<Option<Int8>>.Some(if (true) { var624 } else { [Option<Int8>.None, Option<Int8>.None, var651, var651, Option<Int8>.None, var651, var651, var651, Option<Int8>.Some(Int8(-56)), Option<Int8>.None] } [3])
    }
;
    static let var821 : Int8 = Int8(-55);
    public static let var1029 : Unit = ();
    public func func229(namedParam230 ! : Aggregate168) : UInt64 { // block id: 231
        var233
    }
;
    public func func229(namedParam2678 ! : Rune, namedParam2679 ! : Float32) : (Float64, Rune) { // block id: 2680
        let var2774 : (Array<Unit>, Range<UInt64>, Rune, Bool, Range<UInt8>, (Int16, UInt16), Range<Int32>, (Range<Int32>, Range<Int32>, Range<Int16>, Float32, Range<Int16>, Int16, Int8, UInt32)) = ([(), (), (), (), (), (), (), (), (), ()], ((UInt64(10)&127)..=(UInt64(161)&127):(109|1)), 'N', true, ((UInt8(44)&127)..=(UInt8(232)&127):((-20)|1)), (Int16(Int8(-9)), UInt16(64)), ((Int32(UInt32(Int8(-56)))&127)..(Int32(UInt8(Int8(11)))&127):(((-112)|1))), (((Int32(56)&127)..=(Int32(70)&127):((-47)|1)), ((Int32(UInt32(233))&127)..(Int32(UInt32(234))&127):(((-57)|1))), ((Int16(-27)&127)..(Int16(UInt16(81))&127):((98|1))), Float32(Float32(Float32(68.0))), ((Int16(-107)&127)..(Int16(Int16(-95))&127):((17|1))), Int16(UInt8(Int8(93))), Int8(-48), UInt32(Int32(-51))));
        (var2690[1] ?? try { // block id: 2768
            ((var506&127)..(UInt16(206)&127):((var1177|1)));
            var2774
        } catch (_) { // block id: 2830
            Int32(namedParam2679) % (Int32(Float32(65.0)) | 1);
            var2122;
            var2774
        } finally { // block id: 2836
            var2774
        })[1];
        var loopTimeVar2851 : Int64 = 0;
        (var2845 ?? while ((false) && loopTimeVar2851 < 100 ) {
            loopTimeVar2851++;

        });
        var var2869 : UInt8 = UInt8(UInt8(UInt8(Int8(Int8(3)))));
        if (false) { // block id: 2854
            if (var782) { (42.0, 'n') } else { (var1327, '6') }
        } else { // block id: 2863
            try { // block id: 2865
                var1066;
                var2869 /= ((var42) | 1);
                (var1327, namedParam2678)
            } finally { // block id: 2879
                ();
                var1066;
                (111.0, 'p')
            };
            if (false) { (var1327, var79) } else { (var1327, namedParam2678) }
        }
    }

    public func isClosed(): Bool { return false }
    public func close(): Unit {}
}


public func func86(param87 : Bool) : Int64 { // block id: 88
    var var133 : Int32 = Int32(UInt32(167));
    match (if ([false, true, true, false, true, false, false, true, true, false][1]) { var106[3] } else { (var125 ?? Class7()) } ) {
        case _ =>
            var133 = var133;
            if (param87) { [false, false, false, false, true, true, false, false, false, false] } else { [false, true, false, false, true, false, true, false, true, true] } ;
            var42

    };
    var var153 : Int64 = Int64(UInt32(136));
    var153
}

func func25(param26 : Int32) : Unit { // block id: 27
    var var31 : Bool = false;
    if (var31) { // block id: 33
        var var35 : Rune = 'I';
        var35;
        UInt64(224);
        UInt8(240)
    } else { // block id: 39
        UInt8(204)
    } >> ((var42) & 7);
    let var54 : UInt16 = UInt16(UInt8(64));
    try { // block id: 46
        var var51 : Int16 = Int16(-18);
        (var51, var54)[0];
        let var59 : Rune = 'n';
        var59
    } catch (_) { // block id: 61
        var var64 : UInt32 = UInt32(UInt16(Int16(Int16(Int8(-99)))));
        var64 & var64;
        var var72 : Unit = ();
        var72;
        ((-65.0), var79)[1]
    };
    var var157 : (Bool) -> Int64 = func86;
    var loopTimeVar162 : Int64 = 0;
    do {
        loopTimeVar162++;

    } while ((97 > (false|>var157)) && loopTimeVar162 < 100 )
}

public struct Aggregate168 {
    public init() { // block id: 170

    }
;
    public static var var186 : UInt64 = UInt64(126);
    func func205(optionalParam206 ! : Int8 = Int8(UInt8(248)), namedParam209 ! : Option<Interface11>, namedParam210 ! : UInt16) : Interface10 { // block id: 211
        Class7()
    }
;
    public init(optionalParam1219 ! : Option<Float64> = Option<Float64>.Some((-10.0)), namedParam1222 ! : Int32, optionalParam1223 ! : String = """
vh&`(
2Ab.8
""", namedParam1225 ! : (Range<Int8>) -> Int8) { // block id: 1228
        var1230;
        var var1939 : ?Int8 = ([Option<Int8>.Some(Int8(UInt8(225))), Option<Int8>.Some(Int8(Int8(54))), (((UInt32(206)&127)..(UInt32(150)&127):(((-59)|1))) as Int8), ([((Int8(-105)&127)..(Int8(-29)&127):((-48)|1)), ((Int8(-44)&127)..=(Int8(-46)&127):((-16)|1)), ((Int8(-124)&127)..=(Int8(-79)&127):(121|1)), ((Int8(16)&127)..(Int8(72)&127):((-10)|1)), ((Int8(-10)&127)..(Int8(23)&127):(95|1)), ((Int8(35)&127)..(Int8(-104)&127):(8|1)), ((Int8(7)&127)..(Int8(41)&127):(14|1)), ((Int8(108)&127)..(Int8(-36)&127):((-6)|1)), ((Int8(-2)&127)..=(Int8(-55)&127):(54|1)), ((Int8(98)&127)..=(Int8(117)&127):((-31)|1))] as Int8), (Class7(UInt16(175), ((UInt16(47)&127)..=(UInt16(207)&127):(((-39)|1))), Aggregate168()) as Int8), (["""
L51Tl
w5\";I
""", """
R,Vdf
v\\e\\6
""", "U)p\"\"uk UG", """
+?f9]
RS9 c
""", "4=e=2gI~8^", ";%4$U'+Y;L", "7\\brdTqQmW", "*Jn~=GQWc(", """
p9Bf[
@ushO
""", "MBa{]7N%=BA"] as Int8), Option<Int8>.None, Option<Int8>.Some(Int8(UInt8(4))), ((Option<Float32>.Some(Float32(92.0)) as UInt16) as Int8), (Int8(Int8(-34)) as Int8)] as Int8);
        try { // block id: 1932
            var1066;
            if (var560) { var624 } else { [var1939, var1939, Option<Int8>.None, Option<Int8>.Some(Int8(-126)), var1939, Option<Int8>.Some(Int8(-78)), Option<Int8>.Some(var1095), var1939, var865, Option<Int8>.Some(Int8(-76))] }
        } catch (_) { // block id: 1989
            let var1991 : Array<Option<Int8>> = [Option<Int8>.Some(Int8(Int8(Int8(-101)))), Option<Int8>.Some(Int8(UInt8(UInt8(252)))), Option<Int8>.None, Option<Int8>.Some(Int8(Int8(0))), Option<Int8>.None, (UInt16(UInt8(UInt8(247))) as Int8), Option<Int8>.None, Option<Int8>.Some(Int8(UInt8(24))), (Int16(UInt8(110)) as Int8), Option<Int8>.Some(Int8(95))];
            var1991
        }|>func1233
    }
;
    static let var2337 : Range<Int8> = ((Int8(30)&127)..(Int8(74)&127):((-12)|1));
    private static var var2494 : Option<Bool> = Option<Bool>.None;
    public static var var2539 : Range<UInt64> = ((UInt64(96)&127)..=(UInt64(68)&127):((-58)|1));
    public static var var2559 : Float32 = Float32(-44.0);
    private static let var2614 : Int64 = 76;
    static let var2648 : Range<UInt16> = ((UInt16(29)&127)..(UInt16(226)&127):((-72)|1));
    public init(namedParam175 ! : Rune) { // block id: 176
        let var195 : Unit = ();
        let var2293 : (Bool, Array<Range<Int8>>) = (false, [((Int8(-124)&127)..(Int8(-65)&127):(70|1)), ((Int8(76)&127)..=(Int8(116)&127):(72|1)), ((Int8(-46)&127)..=(Int8(-73)&127):(21|1)), ((Int8(UInt8(220))&127)..=(Int8(99)&127):(((-3)|1))), ((Int8(62)&127)..(Int8(26)&127):(33|1)), ((Int8(UInt8(51))&127)..(Int8(-20)&127):((3|1))), ((Int8(-47)&127)..=(Int8(29)&127):(58|1)), ((Int8(11)&127)..=(Int8(-6)&127):(16|1)), ((Int8(Int8(120))&127)..(Int8(-79)&127):((Int64(UInt32(70))|1))), ((Int8(-87)&127)..(Int8(17)&127):((-84)|1))]);
        let var2514 : Option<Bool> = (Option<Option<Option<Int8>>>.None as Bool);
        let var2594 : Class7 = Class7();
        let var2640 : Option<Float32> = Option<Float32>.Some(Float32(Float32(15.0)));
        func func179(optionalParam180 ! : UInt8 = UInt8(148), optionalParam182 ! : Interface12<Option<Option<Option<Option<Int8>>>>, Option<Option<Float32>>, Array<String>> = Class7()) : Interface11 { // block id: 184
            var186;
            let var2241 : Range<Int16> = ((Int16(31)&127)..=(Int16(-105)&127):(68|1));
            let var2272 : UInt32 = UInt32(UInt32(UInt8(110)));
            let var2475 : Enum468 = Enum468.defaultValue;
            func func198(param199 : String, param200 : (Int16, UInt16), namedParam201 ! : Interface12<Option<Option<Option<Option<Int8>>>>, Option<Option<Float32>>, Array<String>>) : Bool { // block id: 202
                func205(namedParam209 : match (Class7()) {
                    case _ =>
                        Float32(27.0);
                        if (true) { Option<Interface11>.Some(Class7()) } else { var125 }

                }, namedParam210 : var14.var226).func229(namedParam230 : (var288|>func239));
                try { // block id: 2197
                    var var2235 : Float32 = Float32(Float32(Float32(Float32(-61.0))));
                    try { // block id: 2199
                        var var2208 : Unit = ();
                        if (true) { ([var1066, var195, (), var2208, (), (), (), var2208, var195, ()], ((UInt64(170)&127)..=(UInt64(129)&127):(1|1)), 'd', false, ((UInt8(238)&127)..(UInt8(254)&127):(99|1)), (var732, UInt16(254)), ((Int32(-33)&127)..(Int32(49)&127):((7|1))), (var1466, ((Int32(-77)&127)..(Int32(124)&127):(43|1)), ((var732&127)..=(Int16(65)&127):((var1177|1))), var2235, var2241, var732, var464, UInt32(76))) } else { var1766 } ;
                        if (var782) { ((111&127)..=(44&127):(27|1)) } else { ((98&127)..((-15)&127):(75|1)) }
                    } finally { // block id: 2251
                        if (false) { Option<Option<Option<Int8>>>.None } else { var2164 } ;
                        var195;
                        if (var782) { ((var1177&127)..(var1177&127):((var1177|1))) } else { ((11&127)..(var1177&127):((var1177|1))) }
                    };
                    var loopTimeVar2276 : Range<UInt64> = ((UInt64(Int8(-96))&127)..(UInt64(199)&127):(((-23)|1)));
                    for (i in loopTimeVar2276 where true) {
                        ();
                        var2272
                    };
                    var251[1]
                } catch (_) { // block id: 2285
                    (Option<(Bool, Array<Range<Int8>>)>.Some(var2293) ?? var2293);
                    if (var782) { ((Int32(-70)&127)..(Int32(-98)&127):((-41)|1)) } else { ((var301&127)..(var1903&127):((var1177|1))) }
                } finally { // block id: 2328
                    if (false) { // block id: 2331
                        Option<(Bool, Array<Range<Int8>>)>.Some((var560, [var2337, ((Int8(100)&127)..=(Int8(65)&127):((-92)|1)), ((var1095&127)..=(Int8(80)&127):(((-22)|1))), ((Int8(107)&127)..=(Int8(62)&127):((-81)|1)), ((var464&127)..(var1095&127):((39|1))), ((Int8(22)&127)..=(Int8(40)&127):(13|1)), var2337, ((Int8(42)&127)..(Int8(112)&127):(78|1)), ((Int8(88)&127)..=(var464&127):((var1177|1))), ((Int8(61)&127)..=(Int8(-117)&127):((-32)|1))]));
                        Option<Range<UInt32>>.None;
                        var1066
                    };
                    var251[0]
                };
                var var2466 : UInt8 = UInt8(UInt8(UInt8(180)));
                if (try { // block id: 2365
                    Int32(118) & Int32(-3)
                } catch (e: Exception) { // block id: 2369
                    namedParam175;
                    Option<Range<UInt32>>.Some(((var2272&127)..(var2375&127):((var1177|1))));
                    Int32(60) & Int32(-19)
                } >= match (param199) {
                    case _ =>
                        if (false) { var79 } else { var79 } ;
                        var1903 % ((Int32(59)) | 1)

                }) { // block id: 2392
                    var288 ^= var186;
                    let var2418 : Array<Range<UInt64>> = [((UInt64(90)&127)..(UInt64(66)&127):(117|1)), ((UInt64(125)&127)..(UInt64(56)&127):(95|1)), ((UInt64(101)&127)..=(UInt64(190)&127):(83|1)), ((UInt64(183)&127)..=(UInt64(184)&127):(95|1)), ((UInt64(27)&127)..=(UInt64(161)&127):(64|1)), ((UInt64(69)&127)..(UInt64(147)&127):((-112)|1)), ((UInt64(99)&127)..(UInt64(155)&127):((-97)|1)), ((UInt64(163)&127)..(UInt64(58)&127):(61|1)), ((UInt64(168)&127)..=(UInt64(95)&127):((-88)|1)), ((UInt64(218)&127)..=(UInt64(111)&127):((-107)|1))];
                    match ([((Int8(-32)&127)..=(Int8(-81)&127):((-74)|1)), ((Int8(-102)&127)..(Int8(67)&127):(67|1)), ((Int8(112)&127)..(Int8(-42)&127):(63|1)), ((Int8(94)&127)..=(Int8(101)&127):((-92)|1)), ((Int8(44)&127)..=(Int8(34)&127):((-48)|1)), ((Int8(-18)&127)..(Int8(-123)&127):((-71)|1)), ((Int8(58)&127)..(Int8(14)&127):((-20)|1)), ((Int8(48)&127)..=(Int8(114)&127):((-113)|1)), ((Int8(-27)&127)..(Int8(-67)&127):((-16)|1)), ((Int8(15)&127)..=(Int8(36)&127):((-79)|1))]) {
                        case caseVar2400 =>
                            true

                        case caseVar2405 =>
                            var var2409 : Int32 = Int32(Int8(Int8(45)));
                            ((var2409&127)..(var301&127):((84|1)));
                            if (false) { var2418 } else { [((UInt64(206)&127)..=(UInt64(173)&127):((-40)|1)), ((UInt64(88)&127)..=(UInt64(238)&127):(45|1)), ((var186&127)..(var186&127):((var1177|1))), ((UInt64(27)&127)..(var288&127):((11|1))), var1633, var1633, ((var288&127)..(UInt64(210)&127):((var1177|1))), ((UInt64(13)&127)..(UInt64(84)&127):(91|1)), ((UInt64(193)&127)..=(UInt64(212)&127):((60|1))), ((UInt64(103)&127)..=(UInt64(135)&127):((-75)|1))] } ;
                            UInt8(54) <= var42

                        case caseVar2448 =>
                            var1327 *= (-46.0);
                            var1066;
                            UInt16(229) <= var1380

                        case _ =>
                            true

                    }
                } else { // block id: 2460
                    var loopTimeVar2477 : Range<UInt64> = ((UInt64(UInt64(21))&127)..(UInt64(62)&127):(((-43)|1)));
                    for (i in loopTimeVar2477 where false) {
                        var2466 |= var2466;
                        if (var782) { Enum468.defaultValue } else { var2475 }
                    };
                    if (var782) { var2134 } else { Option<Interface10>.Some(Class7()) } ;
                    (var2494 ?? var560)
                }
            }
;
            func func190(param191 : Option<Interface11>, namedParam192 ! : Range<Int32>) : Bool { // block id: 193
                var195;
                let var2505 : String = "\\82dgP43Ky";
                var var2573 : ??Int8 = (###"2wiI.${var2505}>senJ${var2505}"### as Option<Int8>);
                func198(if ((var2494 ?? true)) { // block id: 2501
                    if (var782) { var2505 } else { "*}7EC\",;0}" }
                } else if ((var2514 ?? false)) { // block id: 2518
                    ();
                    var var2522 : UInt8 = UInt8(Int8(-16));
                    var2522 %= ((UInt8(181)) | 1);
                    if (var782) { ###"MD9i45\"Vm|"### } else { ###"?uGbPmdkU8"### }
                } else { // block id: 2530
                    if (var782) { var2337 } else { var2337 } ;
                    ###"m+ f61ffP("###
                }, (match (var2539) {
                    case caseVar2543 =>
                        Int16(3)

                    case _ =>
                        if (false) { ((((Int32(-10)&127)..(Int32(95)&127):(36|1)), ((var301&127)..(Int32(124)&127):((25|1))), ((Int16(0)&127)..=(Int16(100)&127):((-78)|1)), var2559, ((var732&127)..(Int16(-111)&127):((var1177|1))), Int16(12), Int8(103), var2122), var1327, false, var1903, Option<Option<Option<Int8>>>.Some(var2573), var42, var195, ((UInt16(23)&127)..=(UInt16(156)&127):(((-94)|1)))) } else { var367 } ;
                        Int16(116)

                }, try { // block id: 2585
                    UInt16(179)
                } finally { // block id: 2587
                    ();
                    ();
                    var1380
                }), namedParam201 : Class7())
            }
;
            if (func190((var2594 as Interface11), namedParam192 : try { // block id: 2597
                var195;
                var2375 /= ((var2602) | 1);
                if (var782) { ((Int32(-98)&127)..=(var301&127):(((-109)|1))) } else { ((var301&127)..(var301&127):((var2614|1))) }
            } finally { // block id: 2616
                ((Int32(22)&127)..(Int32(-75)&127):(47|1))
            })) { ((Float32(-127.0) as Interface11) ?? if (var782) { var434 } else { Class7(var1380, ((UInt16(238)&127)..(UInt16(252)&127):((-34)|1)), var1193) } ) } else { try { // block id: 2633
                UInt32(67) / ((var2272) | 1);
                if (var782) { var2640 } else { var2640 } ;
                Class7(UInt16(74), var2648, Aggregate168())
            } finally { // block id: 2651
                var var2653 : Unit = ();
                var2653;
                var1066;
                if (var560) { Class7(var506, var2648, Aggregate168()) } else { var434 }
            } }
        }
;
        func179(optionalParam180 : if (var782) { // block id: 2665
            var195;
            var1066;
            var42 ^ var42
        } else { // block id: 2671
            ();
            var2674
        }).func229(namedParam2678 : if (var560) { // block id: 2895
            if (true) { Option<Option<Int8>>.Some(var865) } else { Option<Option<Int8>>.None } ;
            if (false) { var1411 } else { var1411 } ;
            namedParam175
        } else { // block id: 2906
            var195;
            if (var560) { var79 } else { 'm' }
        }, namedParam2679 : Float32(-110.0))
    }
;
    private static let var2948 : UInt8 = UInt8(139);
    func func2915() : Int32 { // block id: 2916
        let var2922 : Option<Range<UInt32>> = Option<Range<UInt32>>.None;
        let var2944 : Float32 = Float32(-110.0);
        let var2953 : Option<Float32> = Option<Float32>.None;
        if (((var79 as Bool) is Option<Float32>)) { var2922 } else { try { // block id: 2925
            var732;
            var1066;
            Option<Range<UInt32>>.Some(((UInt32(233)&127)..=(UInt32(16)&127):(103|1)))
        } catch (_) { // block id: 2930
            var2933 += var2938;
            Option<Range<UInt32>>.None
        } finally { // block id: 2941
            let var2962 : Int64 = Int64(Int32(64));
            (var2944, ((var2948&127)..=(UInt8(13)&127):(((-1)|1))), var2953, var2122, 'W', (), ((Int16(-106)&127)..(var732&127):((var2962|1))));
            var2922
        } } ;
        let var3045 : ?(Array<Unit>, Range<UInt64>, Rune, Bool, Range<UInt8>, (Int16, UInt16), Range<Int32>, (Range<Int32>, Range<Int32>, Range<Int16>, Float32, Range<Int16>, Int16, Int8, UInt32)) = Option<(Array<Unit>, Range<UInt64>, Rune, Bool, Range<UInt8>, (Int16, UInt16), Range<Int32>, (Range<Int32>, Range<Int32>, Range<Int16>, Float32, Range<Int16>, Int16, Int8, UInt32))>.None;
        if (false) { // block id: 2968
            var var2974 : Int32 = Int32(-67);
            if (false) { // block id: 2971
                ();
                var2974
            } else { // block id: 2976
                Int32(83)
            }
        } else if (try { // block id: 2979
            var288 ^= UInt64(182);
            false
        } finally { // block id: 2984
            var624;
            false
        }) { // block id: 2987
            ((UInt8(137)&127)..=(var42&127):((var2614|1)));
            Int32(32) - var301
        } else { // block id: 2995
            (var3002 ?? Option<Option<Int8>>.None);
            match (var1441) {
                case (caseVar3013 : Option<Unit>,caseVar3014 : Option<(Bool, Array<Range<Int8>>)>,caseVar3015,caseVar3016,caseVar3017,_) =>
                    ();
                    if (true) { var487 } else { var487 }

                case (caseVar3026 : Option<Interface10>,caseVar3027,caseVar3028 : Option<Option<Int8>>,caseVar3029,_,(_ : Option<Option<Option<Int8>>>,_ : Array<Range<Int8>>)) =>
                    ();
                    ();
                    Option<UInt16>.None

                case (caseVar3036 : UInt32,caseVar3037,caseVar3038,_ : Int16,caseVar3039 : (Range<UInt16>, Array<Aggregate168>, UInt16, Float32, (Int16, UInt16)),_) =>
                    Option<UInt16>.None

                case _ =>
                    var3045;
                    if (var782) { var487 } else { Option<UInt16>.Some(var1380) }

            };
            (var3058 ?? var301)
        }
    }

}







public enum Enum468 {
    defaultValue
}

public func func326(param327 : Range<UInt8>, optionalParam328 ! : Interface12<Option<Option<Option<Option<Int8>>>>, Option<Option<Float32>>, Array<String>> = Class7(), optionalParam330 ! : Float64 = Float64(Float32(124.0)), optionalParam333 ! : Interface10 = Class7()) : Unit { // block id: 335
    var var343 : Bool = (UInt64(236) is Interface10);
    let var419 : ??Int8 = (Int16(Int16(108)) as Option<Int8>);
    let var426 : Bool = (Aggregate168() is (Aggregate168) -> UInt64);
    let var438 : Range<Int32> = ((Int32(-82)&127)..=(Int32(-28)&127):(10|1));
    let var443 : Unit = ();
    func func347(optionalParam348 ! : UInt32 = UInt32(Int8(Int8(UInt8(12))))) : Option<Int8> { // block id: 353
        var var450 : ?Int8 = (Int32(Int32(40)) as Int8);
        var var460 : ??Int8 = Option<Option<Int8>>.None;
        ((var367[4] ?? (Option<Option<Option<Int8>>>.None ?? var419)) ?? if (if (var426) { // block id: 429
            if (var426) { Option<Interface11>.Some(var434) } else { var125 } ;
            var438;
            var426
        } else { // block id: 441
            var443;
            var288 |= UInt64(123);
            var426
        }) { var450 } else { (var460 ?? Option<Int8>.Some(var464)) } )
    }
;
    let var471 : Enum468 = Enum468.defaultValue;
    (if (var343) { func347() } else { match (var471) {
        case _ =>
            ();
            Option<Int8>.Some(var464)

    } }  ?? var464);
    func25(Int32((var487 ?? UInt16(160))))
}

public func func877(param878 : Array<Bool>) : Option<Int8> { // block id: 879
    let var884 : (Float64, Rune) = (Float64(Float32(Float32(-93.0))), 'n');
    var var900 : Range<UInt32> = ((UInt32(95)&127)..(UInt32(231)&127):((Int64(Int32(Int32(11)))|1)));
    let var911 : Unit = ();
    if (match (var884) {
        case _ : Array<Interface11> =>
            ();
            !true

        case _ =>
            var900;
            var782

        case _ =>
            var911;
            true

    }) { [var865, Option<Int8>.Some(Int8(88)), Option<Int8>.Some(var464), var865, var865, Option<Int8>.None, var865, Option<Int8>.Some(Int8(119)), Option<Int8>.None, var865] } else { [Option<Int8>.Some(Int8(41)), var865, Option<Int8>.Some(Int8(-24)), Option<Int8>.None, Option<Int8>.Some(var464), var865, Option<Int8>.Some(var464), Option<Int8>.None, var865, Option<Int8>.Some(Int8(-115))] } [8]
}

func func833<T0>(param834 : Range<Int8>) : Int8 { // block id: 835
    try { // block id: 837
        let var841 : (UInt32, Unit, Range<Int32>, Range<Int64>, Unit, (Float64, Rune)) = (UInt32(UInt16(UInt8(Int8(-34)))), (), ((Int32(81)&127)..(Int32(UInt8(218))&127):((58|1))), (((-30)&127)..(68&127):(((-126)|1))), (), (121.0, 'h'));
        var841[1];
        if (var782) { var865 } else { Option<Int8>.Some(var464) }
    } finally { // block id: 869
        [(), (), (), (), (), (), (), (), (), ()][5];
        func326(((UInt8(174)&127)..=(UInt8(147)&127):(106|1)));
        var var947 : Array<Bool> = [(((UInt64(0)&127)..(UInt64(32)&127):((-14)|1)) is Float32), false, ([(), (), (), (), (), (), (), (), (), ()] is (UInt32) -> Option<Int8>), (Class7() is Option<Option<Int8>>), false, (Class7() is Range<Int64>), (((UInt32(229)&127)..(UInt32(70)&127):((-98)|1)) is (Aggregate168) -> UInt64), true, true, ((((Int8(-72)&127)..=(Int8(16)&127):((-6)|1)) as Int8) is Option<Interface11>)];
        var947|>func877
    };
    Int8(-107)
}

func func320(param321 : Float64) : Int8 { // block id: 322
    var var496 : Interface10 = Class7();
    var var500 : Bool = true;
    let var525 : Aggregate168 = Aggregate168();
    var var548 : Aggregate168 = Aggregate168();
    try { // block id: 324
        func326(((UInt8(226)&127)..(UInt8(134)&127):((72|1))), optionalParam333 : var496);
        if (var500) { // block id: 502

        };
        var var520 : Unit = ();
        match (Option<UInt16>.Some(var506)) {
            case caseVar511 =>
                Class7();
                Aggregate168()

            case caseVar517 =>
                var520;
                Option<UInt16>.Some(UInt16(173));
                var525

            case _ =>
                var var532 : UInt32 = UInt32(123);
                var532 /= ((var532) | 1);
                Aggregate168()

            case _ =>
                var var540 : Unit = ();
                var540;
                var500 &&= false;
                if (var500) { var548 } else { Aggregate168() }

            case _ =>
                var548

        }
    } finally { // block id: 554
        var var567 : Bool = (true is Array<Interface11>);
        match ([true, var500, var560, false, false, false, false, var567, false, true]) {
            case _ : Array<Bool> =>
                ();
                if (var500) { var525 } else { var525 }

            case _ =>
                ();
                Option<Option<Option<Int8>>>.Some(Option<Option<Int8>>.Some(Option<Int8>.Some(Int8(-51))));
                var548

        }
    };
    var var772 : (Int16, UInt16) = (Int16(30), UInt16(UInt8(UInt8(Int8(118)))));
    let var801 : Int8 = Int8(-103);
    let var816 : UInt32 = UInt32(96);
    if (if (true) { // block id: 592
        ((14&127)..=(24&127):(105|1));
        var var664 : Range<UInt16> = ((UInt16(UInt8(236))&127)..(UInt16(145)&127):((Int64(UInt8(Int8(UInt8(234))))|1)));
        [Class7(), Class7(), var434, Class7(), var434, var434, Class7(UInt16(92), var664, Aggregate168()), Class7(UInt16(228), var664, Aggregate168()), Class7(var506, ((UInt16(166)&127)..(UInt16(10)&127):((-54)|1)), var525), Class7(UInt16(161), ((UInt16(99)&127)..(UInt16(96)&127):(47|1)), Aggregate168())];
        UInt8(223) < var42
    } else if (var560) { // block id: 690
        false
    } else { // block id: 692
        ();
        var624;
        var42 <= UInt8(34)
    } || (((Int16(105)&127)..=(Int16(-61)&127):(35|1)) is Int64)) { // block id: 700
        ((Int8(-6)&127)..=(var464&127):((123|1)));
        var var720 : Int64 = Int64(UInt8(233));
        var var724 : Float32 = Float32(Float32(-108.0));
        var var750 : Range<Int32> = ((Int32(-117)&127)..(Int32(0)&127):((-128)|1));
        var var757 : Int16 = Int16(78);
        var var768 : Bool = (((UInt8(25)&127)..(UInt8(103)&127):(76|1)) is (Aggregate168) -> UInt64);
        var var788 : Range<Int16> = ((Int16(UInt8(173))&127)..=(Int16(67)&127):(((-73)|1)));
        try { // block id: 706
            var464;
            var709;
            var var713 : Range<Int32> = ((Int32(-89)&127)..(Int32(15)&127):((-19)|1));
            (var713, ((Int32(-37)&127)..(Int32(-128)&127):(121|1)), ((Int16(100)&127)..=(Int16(99)&127):((var720|1))), var724, ((Int16(6)&127)..=(Int16(-94)&127):(((-15)|1))), var732, Int8(88), UInt32(68))
        } catch (_) { // block id: 737
            'u';
            var var742 : Range<UInt16> = ((UInt16(34)&127)..=(UInt16(71)&127):(5|1));
            Class7(var506, var742, var525);
            let var761 : UInt32 = UInt32(UInt16(54));
            if (true) { var251 } else { (var750, ((Int32(-126)&127)..(Int32(-126)&127):((-94)|1)), ((Int16(19)&127)..(Int16(-35)&127):(11|1)), Float32(70.0), ((Int16(79)&127)..=(Int16(-95)&127):((-99)|1)), var757, var464, var761) }
        } finally { // block id: 764
            var500;
            if (var768) { var772 } else { var772 } ;
            if (var782) { (((Int32(-1)&127)..=(Int32(94)&127):(8|1)), ((Int32(-121)&127)..=(Int32(-125)&127):((-106)|1)), var788, Float32(125.0), ((Int16(-116)&127)..=(Int16(47)&127):((84|1))), Int16(107), var801, UInt32(36)) } else { (var750, ((Int32(7)&127)..(Int32(-18)&127):((-64)|1)), ((var757&127)..=(var757&127):((8|1))), Float32(-42.0), ((Int16(-75)&127)..=(Int16(-59)&127):(116|1)), var732, Int8(25), var816) }
        };
        Class7.var821
    } else if (var560) { // block id: 824
        Int32(13);
        func func827() : Int8 { // block id: 828
            let var978 : (Range<Int8>) -> Int8 = func833<Int16>;
            let var989 : Range<Int8> = ((Int8(87)&127)..=(Int8(-91)&127):((-122)|1));
            let var996 : Int64 = Int64(UInt64(UInt64(168)));
            (Option<Int8>.Some(var801) ?? ([((Int8(-104)&127)..=(Int8(110)&127):(83|1)), ((Int8(-42)&127)..(var464&127):(((-45)|1))), var989, ((Int8(5)&127)..(Int8(4)&127):(44|1)), ((Int8(-102)&127)..(Int8(70)&127):((var996|1))), ((Int8(-43)&127)..=(Int8(113)&127):((-98)|1)), ((Int8(102)&127)..=(Int8(6)&127):((-6)|1)), ((Int8(-28)&127)..(Int8(88)&127):((-106)|1)), ((Int8(-98)&127)..=(Int8(71)&127):((-81)|1)), ((Int8(101)&127)..(Int8(120)&127):(38|1))][7]|>var978))
        }
;
        func827()
    } else { // block id: 1006
        let var1010 : Range<Int8> = ((Int8(-100)&127)..(Int8(108)&127):(83|1));
        var1010|>func833<Int16>
    }
}


func func1040(param1041 : Range<UInt64>) : String { // block id: 1042
    ["\\}\\?&W;GKH", """
Ia{7$b
,5D6h
""", ">`C:[Qnc>(", ###"!wqiu;DKvB"###, "%q7.'G[f20", """
zO6#G
QCRqE
""", "[a{svKl.Lp4", "%6ik.~f>+S", "P_~CE0CIe9", "-CdA gNRrP"][4]
}



func func1244(param1245 : (Float64) -> Int8) : Option<Float32> { // block id: 1248
    var var1267 : Float32 = Float32(Float32(101.0));
    var var1283 : (Int32) -> Unit = { lambdaParameter1286 : Int32 =>  };
    try { // block id: 1250
        (Option<UInt32>.Some(UInt32(134)) ?? UInt32(51));
        var288 / ((var288) | 1);
        if (var560) { Option<Float32>.None } else { Option<Float32>.Some(var1267) }
    } finally { // block id: 1270
        (var1277 ?? Option<UInt32>.Some(UInt32(57)));
        Int32(66)|>var1283;
        Option<Float32>.Some(Float32(86.0))
    }
}

public func func1292(param321 : Float64) : Int8 { // block id: 322
    var var496 : Interface10 = Class7();
    var var500 : Bool = true;
    let var525 : Aggregate168 = Aggregate168();
    var var548 : Aggregate168 = Aggregate168();
    try { // block id: 324
        func326(((UInt8(226)&127)..(UInt8(134)&127):((72|1))), optionalParam333 : var496);
        if (var500) { // block id: 502

        };
        var var520 : Unit = ();
        match (Option<UInt16>.Some(var506)) {
            case caseVar511 =>
                Class7();
                Aggregate168()

            case caseVar517 =>
                var520;
                Option<UInt16>.Some(UInt16(173));
                var525

            case _ =>
                var var532 : UInt32 = UInt32(123);
                var532 /= ((var532) | 1);
                Aggregate168()

            case _ =>
                var var540 : Unit = ();
                var540;
                var500 &&= false;
                if (var500) { var548 } else { Aggregate168() }

            case _ =>
                var548

        }
    } finally { // block id: 554
        var var567 : Bool = (true is Array<Interface11>);
        match ([true, var500, var560, false, false, false, false, var567, false, true]) {
            case _ : Array<Bool> =>
                ();
                if (var500) { var525 } else { var525 }

            case _ =>
                ();
                Option<Option<Option<Int8>>>.Some(Option<Option<Int8>>.Some(Option<Int8>.Some(Int8(-51))));
                var548

        }
    };
    var var772 : (Int16, UInt16) = (Int16(30), UInt16(UInt8(UInt8(Int8(118)))));
    let var801 : Int8 = Int8(-103);
    let var816 : UInt32 = UInt32(96);
    if (if (true) { // block id: 592
        ((14&127)..=(24&127):(105|1));
        var var664 : Range<UInt16> = ((UInt16(UInt8(236))&127)..(UInt16(145)&127):((Int64(UInt8(Int8(UInt8(234))))|1)));
        [Class7(), Class7(), var434, Class7(), var434, var434, Class7(UInt16(92), var664, Aggregate168()), Class7(UInt16(228), var664, Aggregate168()), Class7(var506, ((UInt16(166)&127)..(UInt16(10)&127):((-54)|1)), var525), Class7(UInt16(161), ((UInt16(99)&127)..(UInt16(96)&127):(47|1)), Aggregate168())];
        UInt8(223) < var42
    } else if (var560) { // block id: 690
        false
    } else { // block id: 692
        ();
        var624;
        var42 <= UInt8(34)
    } || (((Int16(105)&127)..=(Int16(-61)&127):(35|1)) is Int64)) { // block id: 700
        ((Int8(-6)&127)..=(var464&127):((123|1)));
        var var720 : Int64 = Int64(UInt8(233));
        var var724 : Float32 = Float32(Float32(-108.0));
        var var750 : Range<Int32> = ((Int32(-117)&127)..(Int32(0)&127):((-128)|1));
        var var757 : Int16 = Int16(78);
        var var768 : Bool = (((UInt8(25)&127)..(UInt8(103)&127):(76|1)) is (Aggregate168) -> UInt64);
        var var788 : Range<Int16> = ((Int16(UInt8(173))&127)..=(Int16(67)&127):(((-73)|1)));
        try { // block id: 706
            var464;
            var709;
            var var713 : Range<Int32> = ((Int32(-89)&127)..(Int32(15)&127):((-19)|1));
            (var713, ((Int32(-37)&127)..(Int32(-128)&127):(121|1)), ((Int16(100)&127)..=(Int16(99)&127):((var720|1))), var724, ((Int16(6)&127)..=(Int16(-94)&127):(((-15)|1))), var732, Int8(88), UInt32(68))
        } catch (_) { // block id: 737
            'u';
            var var742 : Range<UInt16> = ((UInt16(34)&127)..=(UInt16(71)&127):(5|1));
            Class7(var506, var742, var525);
            let var761 : UInt32 = UInt32(UInt16(54));
            if (true) { var251 } else { (var750, ((Int32(-126)&127)..(Int32(-126)&127):((-94)|1)), ((Int16(19)&127)..(Int16(-35)&127):(11|1)), Float32(70.0), ((Int16(79)&127)..=(Int16(-95)&127):((-99)|1)), var757, var464, var761) }
        } finally { // block id: 764
            var500;
            if (var768) { var772 } else { var772 } ;
            if (var782) { (((Int32(-1)&127)..=(Int32(94)&127):(8|1)), ((Int32(-121)&127)..=(Int32(-125)&127):((-106)|1)), var788, Float32(125.0), ((Int16(-116)&127)..=(Int16(47)&127):((84|1))), Int16(107), var801, UInt32(36)) } else { (var750, ((Int32(7)&127)..(Int32(-18)&127):((-64)|1)), ((var757&127)..=(var757&127):((8|1))), Float32(-42.0), ((Int16(-75)&127)..=(Int16(-59)&127):(116|1)), var732, Int8(25), var816) }
        };
        Class7.var821
    } else if (var560) { // block id: 824
        Int32(13);
        func func827() : Int8 { // block id: 828
            let var978 : (Range<Int8>) -> Int8 = func833<Int16>;
            let var989 : Range<Int8> = ((Int8(87)&127)..=(Int8(-91)&127):((-122)|1));
            let var996 : Int64 = Int64(UInt64(UInt64(168)));
            (Option<Int8>.Some(var801) ?? ([((Int8(-104)&127)..=(Int8(110)&127):(83|1)), ((Int8(-42)&127)..(var464&127):(((-45)|1))), var989, ((Int8(5)&127)..(Int8(4)&127):(44|1)), ((Int8(-102)&127)..(Int8(70)&127):((var996|1))), ((Int8(-43)&127)..=(Int8(113)&127):((-98)|1)), ((Int8(102)&127)..=(Int8(6)&127):((-6)|1)), ((Int8(-28)&127)..(Int8(88)&127):((-106)|1)), ((Int8(-98)&127)..=(Int8(71)&127):((-81)|1)), ((Int8(101)&127)..(Int8(120)&127):(38|1))][7]|>var978))
        }
;
        func827()
    } else { // block id: 1006
        let var1010 : Range<Int8> = ((Int8(-100)&127)..(Int8(108)&127):(83|1));
        var1010|>func833<Int16>
    }
}

func func1237(param1238 : Range<UInt16>) : Option<Float32> { // block id: 1239
    Class7.var1029;
    let var1295 : (Float64) -> Int8 = { lambdaParameter1298 : Float64 => Int8(Int8(-11)) };
    var1295|>func1244
}


public func func1313(optionalParam1314 ! : Bool = true, optionalParam1316 ! : Float64 = (-31.0)) : Option<Option<Float32>> { // block id: 1318
    let var1324 : ?Option<Float32> = Option<Option<Float32>>.None;
    try { // block id: 1320
        Option<Option<Float32>>.None
    } finally { // block id: 1322
        var1324
    }
}

public func func1303<T0>(param1304 : String) : Option<Float32> { // block id: 1305
    ((func1313(optionalParam1316 : var1327) ?? Option<Float32>.None) as Float32)
}

public func func1359(param1360 : (Float64) -> Int8) : Bool { // block id: 1363
    let var1392 : Float32 = Float32(Float32(-115.0));
    var var1459 : UInt32 = UInt32(Int8(25));
    match (match {
            case if (false) { // block id: 1368
            ();
            var14;
            var560
        } else { // block id: 1372
            Option<UInt16>.Some(var506);
            false
        } =>
            Option<Float64>.None;
            var1380++;
            Float32(35.0)
            case try { // block id: 1385
            false
        } catch (_) { // block id: 1387
            var560
        } =>
            -var1392
            case _ =>
            var1177 >>= ((var1177) & 7);
            Float32(-45.0) - var1392
        }) {
        case -62.0 =>
            ();
            false

        case _ =>
            var1411;
            let var1463 : Unit = ();
            let var1474 : (Float64, Rune) = (56.0, 'j');
            if (true) { var1441 } else { (var1459, var1463, var1466, (((-80)&127)..(var1177&127):((var1177|1))), (), var1474) } ;
            var732 > Int16(76)

        case _ =>
            var865;
            true

    }
}

public func func1486(param321 : Float64) : Int8 { // block id: 322
    var var496 : Interface10 = Class7();
    var var500 : Bool = true;
    let var525 : Aggregate168 = Aggregate168();
    var var548 : Aggregate168 = Aggregate168();
    try { // block id: 324
        func326(((UInt8(226)&127)..(UInt8(134)&127):((72|1))), optionalParam333 : var496);
        if (var500) { // block id: 502

        };
        var var520 : Unit = ();
        match (Option<UInt16>.Some(var506)) {
            case caseVar511 =>
                Class7();
                Aggregate168()

            case caseVar517 =>
                var520;
                Option<UInt16>.Some(UInt16(173));
                var525

            case _ =>
                var var532 : UInt32 = UInt32(123);
                var532 /= ((var532) | 1);
                Aggregate168()

            case _ =>
                var var540 : Unit = ();
                var540;
                var500 &&= false;
                if (var500) { var548 } else { Aggregate168() }

            case _ =>
                var548

        }
    } finally { // block id: 554
        var var567 : Bool = (true is Array<Interface11>);
        match ([true, var500, var560, false, false, false, false, var567, false, true]) {
            case _ : Array<Bool> =>
                ();
                if (var500) { var525 } else { var525 }

            case _ =>
                ();
                Option<Option<Option<Int8>>>.Some(Option<Option<Int8>>.Some(Option<Int8>.Some(Int8(-51))));
                var548

        }
    };
    var var772 : (Int16, UInt16) = (Int16(30), UInt16(UInt8(UInt8(Int8(118)))));
    let var801 : Int8 = Int8(-103);
    let var816 : UInt32 = UInt32(96);
    if (if (true) { // block id: 592
        ((14&127)..=(24&127):(105|1));
        var var664 : Range<UInt16> = ((UInt16(UInt8(236))&127)..(UInt16(145)&127):((Int64(UInt8(Int8(UInt8(234))))|1)));
        [Class7(), Class7(), var434, Class7(), var434, var434, Class7(UInt16(92), var664, Aggregate168()), Class7(UInt16(228), var664, Aggregate168()), Class7(var506, ((UInt16(166)&127)..(UInt16(10)&127):((-54)|1)), var525), Class7(UInt16(161), ((UInt16(99)&127)..(UInt16(96)&127):(47|1)), Aggregate168())];
        UInt8(223) < var42
    } else if (var560) { // block id: 690
        false
    } else { // block id: 692
        ();
        var624;
        var42 <= UInt8(34)
    } || (((Int16(105)&127)..=(Int16(-61)&127):(35|1)) is Int64)) { // block id: 700
        ((Int8(-6)&127)..=(var464&127):((123|1)));
        var var720 : Int64 = Int64(UInt8(233));
        var var724 : Float32 = Float32(Float32(-108.0));
        var var750 : Range<Int32> = ((Int32(-117)&127)..(Int32(0)&127):((-128)|1));
        var var757 : Int16 = Int16(78);
        var var768 : Bool = (((UInt8(25)&127)..(UInt8(103)&127):(76|1)) is (Aggregate168) -> UInt64);
        var var788 : Range<Int16> = ((Int16(UInt8(173))&127)..=(Int16(67)&127):(((-73)|1)));
        try { // block id: 706
            var464;
            var709;
            var var713 : Range<Int32> = ((Int32(-89)&127)..(Int32(15)&127):((-19)|1));
            (var713, ((Int32(-37)&127)..(Int32(-128)&127):(121|1)), ((Int16(100)&127)..=(Int16(99)&127):((var720|1))), var724, ((Int16(6)&127)..=(Int16(-94)&127):(((-15)|1))), var732, Int8(88), UInt32(68))
        } catch (_) { // block id: 737
            'u';
            var var742 : Range<UInt16> = ((UInt16(34)&127)..=(UInt16(71)&127):(5|1));
            Class7(var506, var742, var525);
            let var761 : UInt32 = UInt32(UInt16(54));
            if (true) { var251 } else { (var750, ((Int32(-126)&127)..(Int32(-126)&127):((-94)|1)), ((Int16(19)&127)..(Int16(-35)&127):(11|1)), Float32(70.0), ((Int16(79)&127)..=(Int16(-95)&127):((-99)|1)), var757, var464, var761) }
        } finally { // block id: 764
            var500;
            if (var768) { var772 } else { var772 } ;
            if (var782) { (((Int32(-1)&127)..=(Int32(94)&127):(8|1)), ((Int32(-121)&127)..=(Int32(-125)&127):((-106)|1)), var788, Float32(125.0), ((Int16(-116)&127)..=(Int16(47)&127):((84|1))), Int16(107), var801, UInt32(36)) } else { (var750, ((Int32(7)&127)..(Int32(-18)&127):((-64)|1)), ((var757&127)..=(var757&127):((8|1))), Float32(-42.0), ((Int16(-75)&127)..=(Int16(-59)&127):(116|1)), var732, Int8(25), var816) }
        };
        Class7.var821
    } else if (var560) { // block id: 824
        Int32(13);
        func func827() : Int8 { // block id: 828
            let var978 : (Range<Int8>) -> Int8 = func833<Int16>;
            let var989 : Range<Int8> = ((Int8(87)&127)..=(Int8(-91)&127):((-122)|1));
            let var996 : Int64 = Int64(UInt64(UInt64(168)));
            (Option<Int8>.Some(var801) ?? ([((Int8(-104)&127)..=(Int8(110)&127):(83|1)), ((Int8(-42)&127)..(var464&127):(((-45)|1))), var989, ((Int8(5)&127)..(Int8(4)&127):(44|1)), ((Int8(-102)&127)..(Int8(70)&127):((var996|1))), ((Int8(-43)&127)..=(Int8(113)&127):((-98)|1)), ((Int8(102)&127)..=(Int8(6)&127):((-6)|1)), ((Int8(-28)&127)..(Int8(88)&127):((-106)|1)), ((Int8(-98)&127)..=(Int8(71)&127):((-81)|1)), ((Int8(101)&127)..(Int8(120)&127):(38|1))][7]|>var978))
        }
;
        func827()
    } else { // block id: 1006
        let var1010 : Range<Int8> = ((Int8(-100)&127)..(Int8(108)&127):(83|1));
        var1010|>func833<Int16>
    }
}


public func func1354(param1355 : Array<String>) : Range<UInt64> { // block id: 1356
    let var1513 : Range<UInt32> = ((UInt32(UInt32(80))&127)..(UInt32(Int16(-22))&127):((Int64(Int16(117))|1)));
    let var1532 : (Bool, Array<Range<Int8>>) = (([([false, true, true, true, true, false, false, true, false, false] as Int8), Option<Int8>.Some(Int8(-55)), Option<Int8>.Some(Int8(-46)), Option<Int8>.Some(Int8(27)), (Option<Option<Int8>>.Some(Option<Int8>.Some(Int8(22))) as Int8), (["""
]j01I
W2L@9
""", "af\";8vxXb@", "nxP*C>gv:$", """
NzBgC
gHXS#
""", """
&i@2C
=a0lT
""", """
U%B?}
2~5>T
""", "UJV}?kq\"N?", "qsRJ:YA-\"\"", """
op:=B
cjwC/
""", "SV|'^zQ>9y"] as Int8), Option<Int8>.None, Option<Int8>.None, Option<Int8>.None, ([((UInt64(245)&127)..=(UInt64(131)&127):((-99)|1)), ((UInt64(132)&127)..(UInt64(108)&127):((-117)|1)), ((UInt64(136)&127)..=(UInt64(154)&127):((-118)|1)), ((UInt64(248)&127)..=(UInt64(95)&127):(119|1)), ((UInt64(22)&127)..=(UInt64(81)&127):(73|1)), ((UInt64(248)&127)..=(UInt64(95)&127):(119|1)), ((UInt64(223)&127)..=(UInt64(226)&127):((-69)|1)), ((UInt64(45)&127)..(UInt64(253)&127):(91|1)), ((UInt64(114)&127)..=(UInt64(108)&127):((-49)|1)), ((UInt64(128)&127)..=(UInt64(243)&127):((-1)|1))] as Int8)] is Array<Range<UInt64>>), [((Int8(UInt8(6))&127)..(Int8(UInt8(189))&127):(((-27)|1))), ((Int8(30)&127)..(Int8(31)&127):((Int64(Int16(42))|1))), ((Int8(-86)&127)..=(Int8(-57)&127):((-96)|1)), ((Int8(3)&127)..(Int8(16)&127):(37|1)), ((Int8(73)&127)..(Int8(-63)&127):((-99)|1)), ((Int8(Int8(-30))&127)..=(Int8(Int8(113))&127):((Int64(Int16(-18))|1))), ((Int8(53)&127)..(Int8(Int8(-111))&127):(((-83)|1))), ((Int8(-53)&127)..(Int8(UInt8(244))&127):((9|1))), ((Int8(Int8(50))&127)..(Int8(Int8(46))&127):((Int64(Int16(47))|1))), ((Int8(UInt8(156))&127)..(Int8(-36)&127):((17|1)))]);
    let var1606 : Unit = ();
    var var1623 : Float32 = Float32(-55.0);
    if ((func1486|>func1359)) { // block id: 1489
        var var1499 : UInt32 = UInt32(231);
        (Option<Range<UInt32>>.Some(((UInt32(159)&127)..(UInt32(78)&127):((-121)|1))) ?? ((var1499&127)..(var1499&127):((13|1))));
        if (true) { // block id: 1505
            ();
            var1066
        } else if (var782) { // block id: 1509
            if (var782) { var1513 } else { ((UInt32(190)&127)..(UInt32(162)&127):(94|1)) } ;
            var367;
            ()
        };
        let var1526 : Float32 = Float32(-14.0);
        var1526 - Float32(-93.0)
    } else if (var1532[0]) { // block id: 1600
        if (var782) { // block id: 1603
            ();
            var1606;
            UInt16(232)
        } else { // block id: 1609
            var1380
        };
        let var1615 : Unit = ();
        try (resource = Class7()) { // block id: 1612

        } catch (_) { // block id: 1613
            var1615;
            var1615
        } finally { // block id: 1618
            ()
        };
        Float32(Float64(101.0) ** Float64(Int32(var1623) & 3))
    } else { // block id: 1625
        var1623
    };
    match (var1327) {
        case -124.0 =>
            var1633

        case _ =>
            var1606;
            ((UInt64(151)&127)..(var233&127):(((-71)|1)))

    }
}

public func func1340(param1341 : Range<UInt16>) : String { // block id: 1342
    [((UInt64(203)&127)..(UInt64(177)&127):(20|1)), ((UInt64(107)&127)..=(UInt64(227)&127):((-77)|1)), ((UInt64(221)&127)..=(UInt64(244)&127):((-69)|1)), ((UInt64(249)&127)..=(UInt64(249)&127):((-41)|1)), ((UInt64(159)&127)..(UInt64(112)&127):((-85)|1)), ((UInt64(54)&127)..=(UInt64(92)&127):(45|1)), ((UInt64(232)&127)..=(UInt64(204)&127):(120|1)), ((UInt64(146)&127)..(UInt64(141)&127):(42|1)), ((UInt64(136)&127)..(UInt64(25)&127):(29|1)), ((UInt64(78)&127)..=(UInt64(177)&127):(44|1))][7];
    let var1651 : (Array<String>) -> Range<UInt64> = func1354;
    let var1656 : String = "))=:0Wsdnq";
    match ("`asB${var1656}W% L4${var1656}p") {
        case _ =>
            var var1672 : UInt32 = UInt32(86);
            var1672 >>= ((var1672) & 7);
            var var1678 : Enum468 = Enum468.defaultValue;
            if (true) { var1678 } else { var1678 } ;
            let var1684 : UInt64 = UInt64(UInt32(26));
            ((var233&127)..(var1684&127):(((-14)|1)))

    }|>{ lambdaParameter1350 : Range<UInt64> => func1040((["""
(?XYY
k|w(X
""", var1656, var1656, var1656, "v^jbY#vH9&", "~V\"`WdF)J#", """
H%TO/
q7!oY
""", "pP7LZp+Hz3", "*exLuy'0$a{", ###"K;``.5\\UDY"###]|>var1651)) }
}


public func func1233(param1234 : Array<Option<Int8>>) : (UInt32, Unit, Range<Int32>, Range<Int64>, Unit, (Float64, Rune)) { // block id: 1235
    var var1332 : (String) -> Option<Float32> = { lambdaParameter1335 : String => Option<Float32>.Some(Float32(Float32(-54.0))) };
    let var1696 : Option<((Range<Int32>, Range<Int32>, Range<Int16>, Float32, Range<Int16>, Int16, Int8, UInt32), Float64, Bool, Int32, Option<Option<Option<Int8>>>, UInt8, Unit, Range<UInt16>)> = (Enum468.defaultValue as ((Range<Int32>, Range<Int32>, Range<Int16>, Float32, Range<Int16>, Int16, Int8, UInt32), Float64, Bool, Int32, Option<Option<Option<Int8>>>, UInt8, Unit, Range<UInt16>));
    var var1727 : UInt32 = UInt32(Int8(Int8(85)));
    match ((var1696 ?? var367)) {
        case _ =>
            let var1705 : UInt16 = UInt16(211);
            ((var1705&127)..(UInt16(37)&127):((var1177|1)))

        case _ : (Range<UInt16>, Array<Aggregate168>, UInt16, Float32, (Int16, UInt16)) =>
            if (var782) { var1715 } else { ((UInt32(98)&127)..(var1727&127):((var1177|1))) } ;
            var1715;
            ((UInt16(112)&127)..=(UInt16(106)&127):(34|1))

        case (caseVar1736 : UInt64,_ : Int32,caseVar1737 : Option<UInt32>,caseVar1738 : Class7,_ : Option<Float32>,caseVar1739 : Array<Option<Int8>>,caseVar1740,caseVar1741) =>
            if (var782) { ((UInt16(2)&127)..(UInt16(95)&127):(89|1)) } else { ((UInt16(254)&127)..=(UInt16(192)&127):(111|1)) }

        case _ =>
            if (false) { ((var1380&127)..(UInt16(98)&127):((var1177|1))) } else { ((var1380&127)..(var506&127):(((-93)|1))) }

    }|>(func1340~>var1332);
    var1193;
    var var1827 : (Rune, Array<Range<Int8>>, Rune, (UInt32, Unit, Range<Int32>, Range<Int64>, Unit, (Float64, Rune)), Range<UInt32>, Unit, (UInt32, Unit, Range<Int32>, Range<Int64>, Unit, (Float64, Rune)), Unit) = ('r', [((Int8(-96)&127)..=(Int8(74)&127):(72|1)), ((Int8(52)&127)..(Int8(-96)&127):(22|1)), ((Int8(-23)&127)..=(Int8(-123)&127):((-125)|1)), ((Int8(-78)&127)..(Int8(-32)&127):((-31)|1)), ((Int8(25)&127)..=(Int8(41)&127):(95|1)), ((Int8(118)&127)..(Int8(44)&127):(48|1)), ((Int8(99)&127)..=(Int8(-86)&127):((-115)|1)), ((Int8(-30)&127)..(Int8(-17)&127):((-76)|1)), ((Int8(-71)&127)..(Int8(-15)&127):((-92)|1)), ((Int8(-97)&127)..=(Int8(-94)&127):((-65)|1))], 'C', (UInt32(88), (), ((Int32(-50)&127)..(Int32(63)&127):((Int64(UInt16(38))|1))), (((-91)&127)..(1&127):((-119)|1)), (), (Float64(Float32(86.0)), '3')), ((UInt32(111)&127)..(UInt32(UInt16(UInt8(120)))&127):((103|1))), (), (UInt32(204), (), ((Int32(47)&127)..=(Int32(-108)&127):((-37)|1)), (((-101)&127)..(Int64(UInt64(127))&127):(((-19)|1))), (), (Float64((-84.0)), 'a')), ());
    var var1909 : Int64 = Int64(UInt32(UInt32(Int32(-21))));
    if (var1766[3]) { var1827 } else { if (var560) { // block id: 1870
        var1727;
        var42;
        var1827
    } else if (true) { // block id: 1875
        if (var782) { (((-59)&127)..(var1177&127):((var1177|1))) } else { ((var1177&127)..=(var1177&127):((16|1))) } ;
        var1177 >>= ((var1177) & 7);
        var1827
    } else { // block id: 1890
        var1277;
        let var1895 : Array<Range<Int8>> = [((Int8(126)&127)..(Int8(-114)&127):(117|1)), ((Int8(-22)&127)..(Int8(86)&127):((-44)|1)), ((Int8(19)&127)..(Int8(22)&127):(110|1)), ((Int8(-90)&127)..=(Int8(40)&127):((-120)|1)), ((Int8(-31)&127)..=(Int8(40)&127):(64|1)), ((Int8(67)&127)..(Int8(-113)&127):(30|1)), ((Int8(-107)&127)..(Int8(-114)&127):(42|1)), ((Int8(74)&127)..(Int8(13)&127):((-117)|1)), ((Int8(37)&127)..(Int8(-38)&127):((-73)|1)), ((Int8(43)&127)..=(Int8(-7)&127):((-85)|1))];
        ('l', var1895, 'X', (UInt32(12), (), ((var1903&127)..(Int32(114)&127):((var1909|1))), ((15&127)..=((-16)&127):(((-29)|1))), (), (77.0, 'K')), ((var1727&127)..=(UInt32(13)&127):((var1909|1))), (), var1441, ())
    } } [3]
}


public func func1032(param1033 : Option<Option<Option<Int8>>>) : Aggregate168 { // block id: 1034
    Class7.var1029;
    let var1056 : Range<UInt16> = ((UInt16(49)&127)..(UInt16(Int16(UInt8(Int8(-7))))&127):(((-24)|1)));
    let var1114 : Array<String> = ["oc>\"c3@)!I", ###"Qr6yFXL7.a{"###, ###"\\P3TdE^Ia_"###, "<*\"Lw_LEy$", ###"kFLr=iF0z;"###, "':}Ok}T\\ag", "*S@//'d!s@", """
#0u/v
n}WPl
""", "a[9TfrQR?p", "Rx@jr5KiHe"];
    let var1138 : Float64 = 124.0;
    match ((if (false) { ((UInt64(238)&127)..=(UInt64(153)&127):((7|1))) } else { ((UInt64(118)&127)..(UInt64(229)&127):(26|1)) } |>{ lambdaParameter1049 : Range<UInt64> => var var1110 : UInt32 = UInt32(142); try { // block id: 1052
            if (var782) { var1056 } else { ((UInt16(220)&127)..=(UInt16(88)&127):((-52)|1)) } ;
            var1066;
            var var1081 : String = ###"I+`Pa{bM&ku"###;
            if (false) { // block id: 1070
                Class7();
                ();
                let var1074 : String = "'!qZ&bbQl~";
                var1074
            } else { // block id: 1076
                var1066;
                if (var782) { var1081 } else { """
h8EU+
x8BJO
""" }
            }
        } finally { // block id: 1084
            let var1099 : Unit = ();
            try (resource = Class7()) { // block id: 1086
                if (true) { Aggregate168() } else { Aggregate168() } ;
                ()
            } catch (_) { // block id: 1092
                var1095 /= ((var464) | 1);
                var1099
            } finally { // block id: 1101
                if (var560) { var125 } else { Option<Interface11>.None } ;
                Option<Option<Option<Int8>>>.None;
                ()
            };
            Int32(var1110);
            var1114[3]
        } })) {
        case ###"}@]fL.Igd;"### | "8SugaTHK$^" | "*Hra`r1c)B" | """
8oC|I
!|`5a
""" =>
            var1138;
            var1066

        case _ =>
            Int8(15);
            var var1147 : UInt8 = UInt8(Int8(2));
            var1147 &= var1147;
            ()

        case _ =>
            UInt32(229);
            ()

    };
    let var1185 : Aggregate168 = Aggregate168();
    let var1206 : (Range<UInt16>, Array<Aggregate168>, UInt16, Float32, (Int16, UInt16)) = (((UInt16(56)&127)..=(UInt16(171)&127):((Int64(Int64(80))|1))), [Aggregate168(), Aggregate168(), Aggregate168(optionalParam1219 : Option<Float64>.None, namedParam1222 : Int32(UInt32(39)), optionalParam1223 : "tuWbG:44$|", namedParam1225 : func833<Int16>), Aggregate168(), Aggregate168(), Aggregate168(optionalParam1219 : Option<Float64>.None, namedParam1222 : Int32(35), namedParam1225 : func833<Int16>), Aggregate168(namedParam1222 : Int32(UInt8(153)), namedParam1225 : func833<Int16>), Aggregate168(namedParam1222 : Int32(94), namedParam1225 : func833<Int16>), Aggregate168(optionalParam1219 : Option<Float64>.None, namedParam1222 : Int32(Int16(100)), namedParam1225 : func833<Int16>), Aggregate168()], UInt16(UInt8(UInt8(UInt8(195)))), Float32(-51.0), (Int16(-120), UInt16(Int8(Int8(7)))));
    let var2089 : Range<Int16> = ((Int16(-4)&127)..=(Int16(-73)&127):((-68)|1));
    func func1157(param1158 : Interface10, namedParam1159 ! : Float32) : Aggregate168 { // block id: 1160
        var var1201 : (Int16, UInt16) = (Int16(-19), UInt16(12));
        try { // block id: 1166
            ();
            var var1174 : UInt16 = UInt16(167);
            if (var560) { (((var506&127)..=(var1174&127):((var1177|1))), [var1185, Aggregate168(), var1185, Aggregate168(), var1185, var1185, var1193, Aggregate168(), var1193, var1193], var1174, Float32(53.0), var1201) } else { var1206 }
        } catch (_) { // block id: 2053
            let var2078 : Range<Int32> = ((Int32(-124)&127)..=(Int32(-17)&127):((-39)|1));
            if (true) { (var2058, ((UInt64(218)&127)..=(UInt64(249)&127):((-113)|1)), 'a', false, ((UInt8(61)&127)..=(UInt8(2)&127):(35|1)), (var732, UInt16(19)), var2078, (var1466, ((var1903&127)..=(var1903&127):((var1177|1))), ((Int16(-32)&127)..=(Int16(-37)&127):(40|1)), Float32(45.0), var2089, var732, Int8(-87), UInt32(156))) } else { ([(), (), (), (), (), (), (), (), (), ()], ((UInt64(29)&127)..(UInt64(23)&127):((-52)|1)), 'g', var782, ((UInt8(172)&127)..(UInt8(196)&127):((-67)|1)), var1201, ((Int32(41)&127)..(Int32(88)&127):((-65)|1)), (((var301&127)..(var1903&127):(((-5)|1))), ((Int32(11)&127)..=(Int32(-124)&127):(12|1)), ((Int16(95)&127)..(Int16(52)&127):(36|1)), namedParam1159, ((Int16(107)&127)..(Int16(-55)&127):((-90)|1)), var732, Int8(-67), UInt32(171))) } ;
            var1206
        }[1][5]
    }
;
    let var2138 : Interface10 = Class7();
    func1157(if ((Option<Range<UInt32>>.Some(((var2122&127)..(UInt32(84)&127):((62|1)))) is Rune)) { (var2134 ?? Class7()) } else { var2138 } , namedParam1159 : Float32(-70.0))
}


func func307(namedParam308 ! : Float32, optionalParam309 ! : Option<Float32> = Option<Float32>.Some(Float32(-91.0))) : Aggregate168 { // block id: 312
    var14.var317 %= ((((var1019 ?? 107.0)|>func320)) | 1);
    Class7.var1029;
    let var2142 : (Option<Option<Option<Int8>>>) -> Aggregate168 = func1032;
    (try { // block id: 2150
        if (true) { var2154 } else { var2154 } ;
        Option<Option<Option<Option<Int8>>>>.None
    } finally { // block id: 2160
        ();
        Option<Option<Option<Option<Int8>>>>.Some(var2164)
    } ?? var2164)|>var2142
}

public func func239(param240 : UInt64) : Aggregate168 { // block id: 241
    (Option<Float32>.Some(var251[3]) ?? try { // block id: 285
        var288 ^= UInt64(235);
        var var293 : Float32 = Float32(-28.0);
        var293 - Float32(25.0)
    } finally { // block id: 296
        Aggregate168();
        Int32(-28) ^ var301;
        Float32(59.0)
    });
    let var2173 : (Float32, Range<UInt8>, Option<Float32>, UInt32, Rune, Unit, Range<Int16>) = (Float32(Float32(-16.0)), ((UInt8(201)&127)..=(UInt8(184)&127):((-68)|1)), Option<Float32>.None, UInt32(UInt16(243)), 'l', (), ((Int16(72)&127)..=(Int16(Int8(Int8(99)))&127):((Int64(UInt8(183))|1))));
    func307(namedParam308 : (var2173[2] ?? Float32(Int32(93.0) % (Int32(Float32(126.0)) | 1))))
}










func func21(param22 : UInt32) : Int64 { // block id: 23
    var var172 : Aggregate168 = Aggregate168(namedParam175 : 'K');
    var172.func2915()|>{ lambdaParameter165 : Int32 =>  };
    (try { // block id: 3107
        var3109
    } finally { // block id: 3112
        Int8(11);
        var3109
    } ?? match (if (var560) { (var1466, ((Int32(10)&127)..=(Int32(98)&127):((-110)|1)), var3122, Float32(89.0), ((Int16(-90)&127)..=(Int16(-26)&127):((-6)|1)), Int16(-73), var464, UInt32(197)) } else { var251 } ) {
        case (caseVar3132,_,_,caseVar3133,_,_,_ : UInt64,caseVar3134) =>
            var1066;
            ();
            var1277

        case _ =>
            Option<Option<UInt32>>.Some(var3143)

    });
    match (match (try { // block id: 3148
                ();
                var1095--;
                var var3157 : ??Int8 = Option<Option<Int8>>.None;
                if (var782) { Option<Option<Int8>>.Some(Option<Int8>.None) } else { var3157 }
            } finally { // block id: 3159
                var1066;
                Option<Option<Int8>>.Some(var865)
            }) {
            case caseVar3165 : Option<UInt32> =>
                let var3168 : Option<Range<UInt32>> = (((UInt64(50)&127)..(UInt64(245)&127):((-119)|1)) as Range<UInt32>);
                var3168;
                ();
                var1633

            case caseVar3175 =>
                var1066;
                ((UInt64(125)&127)..=(var2938&127):(((-112)|1)))

            case _ =>
                var1633

        }) {
        case _ =>
            var1177

    }
}

main(): Int64 {
    try {
        var14.var17++;
        Int64(var2375|>func21) ** UInt64(var1177 & 3)
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var42*var42), 64)
        crccheck.updateBuffer(UInt64(var233*var233), 64)
        crccheck.updateBuffer(UInt64(var288*var288), 64)
        crccheck.updateBuffer(UInt64(var301*var301), 64)
        crccheck.updateBuffer(UInt64(var464*var464), 64)
        crccheck.updateBuffer(UInt64(var506*var506), 64)
        crccheck.updateBuffer(UInt64(var732*var732), 64)
        crccheck.updateBuffer(UInt64(var1095*var1095), 64)
        crccheck.updateBuffer(UInt64(var1177*var1177), 64)
        crccheck.updateBuffer(UInt64(var1380*var1380), 64)
        crccheck.updateBuffer(UInt64(var1903*var1903), 64)
        crccheck.updateBuffer(UInt64(var2122*var2122), 64)
        crccheck.updateBuffer(UInt64(var2375*var2375), 64)
        crccheck.updateBuffer(UInt64(var2602*var2602), 64)
        crccheck.updateBuffer(UInt64(var2674*var2674), 64)
        crccheck.updateBuffer(UInt64(var2933*var2933), 64)
        crccheck.updateBuffer(UInt64(var2938*var2938), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Enum468 {

}
// ASSERT: scan sema_illegal_capture_this
// ASSERT: scan sema_unreachable_pattern


