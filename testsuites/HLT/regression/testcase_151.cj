/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args

public let var_1663270159901_58 : Enum_1663270159901_55<Int8, Class_1663270159901_93> = Enum_1663270159901_55<Int8, Class_1663270159901_93>.defaultValue
public var var_1663270159901_72 : Float32 = Float32(-97.0)
var var_1663270159901_79 : UInt16 = UInt16(79)
var var_1663270159901_82 : UInt8 = UInt8(148)
var var_1663270159901_117 : Bool = false
var var_1663270159901_163 : Class_1663270159901_93 = Class_1663270159901_93()
var var_1663270159901_191 : Float32 = Float32(-78.0)
public var var_1663270159901_439 : UInt64 = UInt64(170)
let var_1663270159901_471 : UInt64 = UInt64(196)
public var var_1663270159901_520 : Array<(Int64, Int16)> = [(Int64(UInt8(34)), Int16(-74)), (107, Int16(Int16(Int16(-73)))), (Int64((-27)), Int16(Int16(Int16(96)))), (Int64(Int8(34)), Int16(-104)), (97, Int16(Int16(Int16(-46)))), (Int64(Int16(86)), Int16(UInt8(59))), (Int64(70), Int16(103)), (Int64(UInt8(UInt8(191))), Int16(UInt16(224))), (Int64(UInt32(UInt8(193))), Int16(98)), (Int64(Int64(UInt64(27))), Int16(UInt16(Int16(126))))]
let var_1663270159901_586 : (UInt64, Array<Float64>, Array<Bool>, Int64, Int32, Array<Float64>) = (UInt64(UInt64(UInt64(Int16(62)))), [Float64(Float64(Float32(-103.0))), Float64(Float32(46.0)), Float64(Float64(121.0)), 24.0, Float64(Float32(Float32(102.0))), (-92.0), Float64(Float32(-30.0)), Float64((-6.0)), (-98.0), (-27.0)], [((Option<UInt64>.None, ((UInt64(76)&127)..(UInt64(182)&127):(112|1)), 'B', UInt8(97), [UInt64(102), UInt64(194), UInt64(11), UInt64(218), UInt64(116), UInt64(235), UInt64(128), UInt64(127), UInt64(130), UInt64(42)]) is Array<(Int64, Int16)>), (UInt32(205) is Rune), false, false, ((Option<UInt64>.None, ((UInt64(205)&127)..=(UInt64(240)&127):((-2)|1)), 'x', UInt8(106), [UInt64(211), UInt64(168), UInt64(165), UInt64(113), UInt64(55), UInt64(72), UInt64(168), UInt64(102), UInt64(211), UInt64(203)]) is Bool), true, (Enum_1663270159901_55<Int8, Class_1663270159901_93>.defaultValue is Enum_1663270159901_55<Int8, Class_1663270159901_93>), (((-115), Int16(-27)) is Int8), false, false], Int64(UInt8(151)), Int32(UInt8(63)), [77.0, (-59.0), (-79.0), (-9.0), (-121.0), (-26.0), (-97.0), (-99.0), (-97.0), 35.0])
public struct Struct_1663270159901_17 {
    public init() { // block id: 19

    }
;
    let var_1663270159901_24 : Unit = ()
}

public enum Enum_1663270159901_55<T0, T1> {
    defaultValue |
    enumValue_1663270159901_580
}
public interface Interface_1663270159901_98 {

}

public interface Interface_1663270159901_97 <: Interface_1663270159901_98 {

}

public interface Interface_1663270159901_96<T0> <: Interface_1663270159901_97 & Interface_1663270159901_98 {
    func func_1663270159901_110() : Unit { // block id: 111
        if ([var_1663270159901_117, var_1663270159901_117, var_1663270159901_117, true, var_1663270159901_117, false, var_1663270159901_117, var_1663270159901_117, var_1663270159901_117, var_1663270159901_117][6]) { // block id: 129
            try (resource = Class_1663270159901_93()) { // block id: 131
                UInt16(96);
                var_1663270159901_82 = var_1663270159901_82
            } finally { // block id: 136
                let var_1663270159901_138 : Unit = ();
                var_1663270159901_138
            }
        }
    }

}

public open class Class_1663270159901_93 <: Interface_1663270159901_96<Range<Int16>> & Resource {
    public init() { // block id: 95

    }
;
    public prop var_1663270159901_166 : Bool { // block id: 167
        get() { // block id: 169
            true
        }

    };
    public static prop var_1663270159901_400 : Bool { // block id: 401
        get() { // block id: 403
            (((78&127)..((-67)&127):(109|1)) is Int16)
        }

    }
    public func isClosed(): Bool { return true }
    public func close(): Unit {}
}

func func_1663270159901_100(namedParam_1663270159901_101 ! : Interface_1663270159901_96<Range<Int16>>, namedParam_1663270159901_102 ! : Range<Int16>) : Class_1663270159901_93 { // block id: 103
    let var_1663270159901_105 : Class_1663270159901_93 = Class_1663270159901_93();
    var_1663270159901_105
}




func func_1663270159901_419(param_1663270159901_420 : Range<UInt8>) : UInt64 { // block id: 421
    let var_1663270159901_447 : UInt64 = UInt64(79);
    let var_1663270159901_452 : UInt64 = UInt64(Int16(-19));
    var var_1663270159901_457 : Option<UInt64> = Option<UInt64>.Some(UInt64(Int32(57)));
    var var_1663270159901_474 : UInt64 = UInt64(146);
    (if (false) { (Option<UInt64>.Some(UInt64(215)), ((UInt64(51)&127)..(UInt64(176)&127):((-77)|1)), 'h', UInt8(156), [var_1663270159901_439, UInt64(222), var_1663270159901_439, UInt64(20), UInt64(4), var_1663270159901_439, var_1663270159901_447, UInt64(125), UInt64(183), var_1663270159901_452]) } else { (var_1663270159901_457, ((var_1663270159901_447&127)..=(UInt64(249)&127):((-50)|1)), 'I', var_1663270159901_82, [var_1663270159901_439, var_1663270159901_439, var_1663270159901_471, var_1663270159901_474, UInt64(73), UInt64(67), var_1663270159901_439, var_1663270159901_474, var_1663270159901_447, UInt64(211)]) } [0] ?? try { // block id: 484
        UInt64(229) >> ((var_1663270159901_439) & 7)
    } finally { // block id: 488
        Int8(51);
        UInt64(31)
    })
}

main(): Int64 {
    try {
        let var_1663270159901_48 : (Float64, Bool, UInt64) = ((-53.0), true, UInt64(230));
        func func_1663270159901_6<T0, T1>(optionalParam_1663270159901_7 ! : UInt16 = UInt16(105), namedParam_1663270159901_9 ! : Float32, optionalParam_1663270159901_10 ! : UInt8 = UInt8(UInt8(53))) : Unit { // block id: 13
            try { // block id: 15
                let var_1663270159901_21 : Struct_1663270159901_17 = Struct_1663270159901_17();
                var_1663270159901_21.var_1663270159901_24;
                [115.0, 28.0, 122.0, 14.0, 118.0, (-123.0), (-82.0), 31.0, 124.0, 74.0][3]
            } catch (_) { // block id: 39
                ();
                Float32(-20.0);
                func func_1663270159901_43() : Float64 { // block id: 44
                    var_1663270159901_48[0]
                }
;
                func_1663270159901_43()
            };
            var var_1663270159901_65 : Unit = ();
            match (var_1663270159901_58) {
                case caseVar_1663270159901_62 : Int64 => 
                    var_1663270159901_65
                
                case _ => 
                    var_1663270159901_65
                
            }
        }
;
        var var_1663270159901_85 : UInt8 = UInt8(UInt8(UInt8(Int8(Int8(1)))));
        func_1663270159901_6<Range<Int16>, String>(namedParam_1663270159901_9 : var_1663270159901_72 * var_1663270159901_72, optionalParam_1663270159901_10 : (var_1663270159901_79, var_1663270159901_82, var_1663270159901_85)[2]);
        func_1663270159901_100(namedParam_1663270159901_101 : Class_1663270159901_93(), namedParam_1663270159901_102 : ((Int16(47)&127)..=(Int16(58)&127):(4|1))).func_1663270159901_110();
        let var_1663270159901_204 : Range<UInt64> = ((UInt64(40)&127)..=(UInt64(121)&127):(108|1));
        let var_1663270159901_264 : Range<Int64> = ((Int64(Int32(-118))&127)..=(Int64(UInt8(67))&127):(2|1));
        let var_1663270159901_409 : UInt64 = UInt64(6);
        let var_1663270159901_576 : Interface_1663270159901_97 = Class_1663270159901_93();
        func func_1663270159901_142(optionalParam_1663270159901_143 ! : Enum_1663270159901_55<Int8, Class_1663270159901_93> = Enum_1663270159901_55<Int8, Class_1663270159901_93>.defaultValue, optionalParam_1663270159901_145 ! : Int32 = Int32(118), optionalParam_1663270159901_147 ! : Unit = (), optionalParam_1663270159901_149 ! : Enum_1663270159901_55<Int8, Class_1663270159901_93> = Enum_1663270159901_55<Int8, Class_1663270159901_93>.defaultValue) : Int64 { // block id: 151
            let var_1663270159901_158 : ?Unit = Option<Unit>.None;
            var loopTimeVar_1663270159901_173 : Int64 = 0;
            (var_1663270159901_158 ?? do {
                loopTimeVar_1663270159901_173++;

            } while ((var_1663270159901_163.var_1663270159901_166) && loopTimeVar_1663270159901_173 < 100 ) );
            var var_1663270159901_198 : Float64 = Float64(Float64(Float32(Float32(-105.0))));
            let var_1663270159901_248 : Array<UInt64> = [UInt64(196), UInt64(148), UInt64(191), UInt64(19), UInt64(85), UInt64(79), UInt64(119), UInt64(142), UInt64(234), UInt64(105)];
            let var_1663270159901_282 : Range<UInt32> = ((UInt32(111)&127)..=(UInt32(125)&127):(83|1));
            let var_1663270159901_299 : ?Bool = (((Int8(-87)&127)..=(Int8(12)&127):(93|1)) as Bool);
            func func_1663270159901_222<T0>(optionalParam_1663270159901_223 ! : Interface_1663270159901_97 = Class_1663270159901_93(), optionalParam_1663270159901_225 ! : Range<Int64> = (((-66)&127)..=(108&127):(Int64(UInt16(Int16(82)))|1)), optionalParam_1663270159901_232 ! : Range<UInt16> = ((UInt16(248)&127)..(UInt16(Int16(-15))&127):(107|1)), namedParam_1663270159901_238 ! : Class_1663270159901_93) : Option<Bool> { // block id: 239
                match (if ((Option<Bool>.None ?? true)) { (if (true) { var_1663270159901_248 } else { [UInt64(233), UInt64(200), UInt64(108), UInt64(120), UInt64(208), UInt64(41), UInt64(33), UInt64(122), UInt64(212), UInt64(220)] } ) } else { match (((UInt8(50)&127)..=(UInt8(249)&127):((-65)|1))) {
                        case caseVar_1663270159901_255 => 
                            var_1663270159901_248
                        
                        case caseVar_1663270159901_260 : Int16 => 
                            ();
                            var_1663270159901_264;
                            if (true) { var_1663270159901_248 } else { [UInt64(31), UInt64(205), UInt64(167), UInt64(91), UInt64(139), UInt64(153), UInt64(219), UInt64(104), UInt64(187), UInt64(189)] } 
                        
                        case _ => 
                            var_1663270159901_248
                        
                    } } ) {
                    case _ : Struct_1663270159901_17 => 
                        var_1663270159901_282;
                        (-123);
                        let var_1663270159901_288 : ?Bool = (UInt8(85) as Bool);
                        if (var_1663270159901_117) { var_1663270159901_288 } else { Option<Bool>.Some(true) } 
                    
                    case _ => 
                        if (true) { var_1663270159901_299 } else { var_1663270159901_299 } 
                    
                    case caseVar_1663270159901_305 : Struct_1663270159901_17 => 
                        if (var_1663270159901_117) { Option<Bool>.Some(true) } else { var_1663270159901_299 } 
                    
                    case _ => 
                        optionalParam_1663270159901_147;
                        if (true) { Option<Bool>.Some(var_1663270159901_117) } else { var_1663270159901_299 } 
                    
                }
            }
;
            let var_1663270159901_371 : Int64 = 54;
            let var_1663270159901_374 : Int16 = Int16(48);
            let var_1663270159901_506 : Float32 = Float32(Float32(72.0));
            func func_1663270159901_210(optionalParam_1663270159901_211 ! : Float32 = Float32(-91.0), namedParam_1663270159901_213 ! : Interface_1663270159901_97) : Range<UInt64> { // block id: 214
                let var_1663270159901_329 : UInt32 = UInt32(Int32(82));
                var loopTimeVar_1663270159901_360 : Int64 = 0;
                while (((func_1663270159901_222<Option<UInt64>>(optionalParam_1663270159901_232 : ((UInt16(9)&127)..(UInt16(179)&127):(124|1)), namedParam_1663270159901_238 : var_1663270159901_163) ?? try { // block id: 323
                    UInt32(100);
                    ();
                    UInt32(33) < var_1663270159901_329
                } catch (e: Exception) { // block id: 332
                    true
                } finally { // block id: 334
                    var_1663270159901_117
                })) && loopTimeVar_1663270159901_360 < 100 ) {
                    loopTimeVar_1663270159901_360++;
                    var loopTimeVar_1663270159901_340 : Array<Bool> = [false, true, true, (Enum_1663270159901_55<Int8, Class_1663270159901_93>.defaultValue is UInt8), true, false, (((UInt64(253)&127)..(UInt64(141)&127):(85|1)) is String), (((UInt8(226)&127)..(UInt8(110)&127):((-20)|1)) is Struct_1663270159901_17), (((UInt64(225)&127)..=(UInt64(1)&127):((-101)|1)) is Range<Int32>), false];
                    for (i in loopTimeVar_1663270159901_340 where false) {

                    }
                };
                let var_1663270159901_386 : Unit = ();
                func_1663270159901_6<Range<Int16>, String>(optionalParam_1663270159901_7 : UInt16(if (var_1663270159901_117) { // block id: 365
                    UInt8(34);
                    ((var_1663270159901_79&127)..=(UInt16(11)&127):(var_1663270159901_371|1));
                    var_1663270159901_374
                } else { // block id: 376
                    var var_1663270159901_378 : (UInt16, UInt8, UInt8) = (UInt16(52), UInt8(249), UInt8(Int8(Int8(-43))));
                    var_1663270159901_378;
                    var_1663270159901_386;
                    var_1663270159901_374 << ((Int16(-93)) & 7)
                }), namedParam_1663270159901_9 : [Float32(86.0), Float32(87.0), Float32(-38.0), Float32(-55.0), Float32(-52.0), Float32(-40.0), Float32(-60.0), Float32(5.0), Float32(-48.0), Float32(20.0)][8]);
                ((if (Class_1663270159901_93.var_1663270159901_400) { // block id: 406
                    var_1663270159901_409 & UInt64(165)
                } else { // block id: 412
                    [64.0, (-125.0), (-39.0), (-39.0), 105.0, (-95.0), (-41.0), (-59.0), (-110.0), (-82.0)];
                    var_1663270159901_82 & UInt8(51);
                    var_1663270159901_409
                }&127)..=((((var_1663270159901_82&127)..=(var_1663270159901_82&127):((-40)|1), (), [var_1663270159901_191, optionalParam_1663270159901_211, Float32(39.0), Float32(-55.0), var_1663270159901_506, var_1663270159901_191, Float32(25.0), var_1663270159901_72, Float32(13.0), var_1663270159901_72])[0]|>func_1663270159901_419)&127):(var_1663270159901_520[8][0]|1))
            }
;
            if (match (if (var_1663270159901_117) { Option<Unit>.Some(()) } else { Option<Unit>.Some(()) } ) {
                case _ : Int64 => 
                    optionalParam_1663270159901_147;
                    false
                
                case _ => 
                    var_1663270159901_191 += Float32(96.0);
                    optionalParam_1663270159901_147;
                    48.0 != var_1663270159901_198
                
            }) { var_1663270159901_204 } else { func_1663270159901_210(namedParam_1663270159901_213 : var_1663270159901_576) } ;
            var_1663270159901_371
        }
;
        func_1663270159901_142(optionalParam_1663270159901_143 : Enum_1663270159901_55<Int8, Class_1663270159901_93>.enumValue_1663270159901_580, optionalParam_1663270159901_147 : (), optionalParam_1663270159901_149 : Enum_1663270159901_55<Int8, Class_1663270159901_93>.defaultValue) >> ((var_1663270159901_586[3]) & 7)
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var_1663270159901_79*var_1663270159901_79), 64)
        crccheck.updateBuffer(UInt64(var_1663270159901_82*var_1663270159901_82), 64)
        crccheck.updateBuffer(UInt64(var_1663270159901_85*var_1663270159901_85), 64)
        crccheck.updateBuffer(UInt64(var_1663270159901_409*var_1663270159901_409), 64)
        crccheck.updateBuffer(UInt64(var_1663270159901_439*var_1663270159901_439), 64)
        crccheck.updateBuffer(UInt64(var_1663270159901_471*var_1663270159901_471), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend<T0, T1> Enum_1663270159901_55<T0, T1> {

}

