/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output


var var21 : (String, Unit) = ("c-TD<ki7P/", ())
public let var94 : Int64 = 23
var var111 : Range<UInt8> = (UInt8(36)&127..UInt8(112)&127:99|1)
public let var115 : Array<Bool> = [false, true, true, false, true, true, true, true, false, true]
let var160 : ?Array<Int16> = ((UInt64(Int8(84))&127..=UInt64(163)&127:((-123)|1)) as Array<Int16>)
var var168 : Array<Int16> = [Int16(Int16(UInt8(Int8(-29)))), Int16(UInt16(132)), Int16(-119), Int16(UInt16(UInt8(Int8(88)))), Int16(119), Int16(78), Int16(UInt8(121)), Int16(Int8(Int8(-91))), Int16(-76), Int16(-51)]
public let var241 : Int8 = Int8(Int8(Int8(-53)))
public var var443 : UInt8 = UInt8(147)
var var516 : Int64 = 79
let var530 : ?Range<UInt8> = ('V' as Range<UInt8>)
let var542 : String = ###"NuYn]LLv`B"###
let var589 : Range<Int64> = ((-7)&127..123&127:(-21)|1)
public let var605 : Int64 = Int64(Int16(20))
let var622 : Bool = (Int16(Int8(-24)) is Int8)
public var var755 : Int64 = (-36)
public let var829 : (((String, Unit), UInt8, Int8, Range<UInt32>), (String, Unit), String, Range<Int64>, Int8) = (((###"*:'${var542}s${var542}j8$4q<"###, ()), UInt8(UInt8(UInt8(34))), Int8(6), (UInt32(35)&127..UInt32(Int8(83))&127:((-2)|1))), ("""
(>s${var542}x+
O${var542}L${var542}MQs
""", ()), """
j${var542}%1yy${var542}
BrDq.
""", (60&127..=48&127:(5|1)), Int8(15))
let var987 : Unit = ()
public var var993 : Int32 = Int32(-66)
public let var1147 : Int8 = Int8(75)
public var var1275 : Range<Int8> = (Int8(72)&127..=Int8(-60)&127:42|1)
var var1287 : Array<Array<Unit>> = [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]]
let var1323 : Class1003 = Class1003()
public let var1359 : ?(Array<Range<UInt8>>, Class1003, Range<Int16>) = Option<(Array<Range<UInt8>>, Class1003, Range<Int16>)>.None
public let var1404 : Array<(String, Unit)> = [(###":*Rifwc\"}_"###, ()), ("Sn/w${var542}RRu${var542}MBH", ()), ("a{@${var542}W${var542}}w_9W$:", ()), ("3${var542}*.V<${var542}~${var542}>(y:", ()), ("""
;SCOY
nR${var542}!1${var542}4
""", ()), ("""
tO${var542}W;'
Y}5fW
""", ()), ("""
P${var542}uU${var542}pS
w)7${var542}p9
""", ()), (###"Np@fXo:eh${var542}2${var542}"###, ()), ("MH${var542}z${var542}a{a|>${var542}x${var542})G", ()), ("9SMa{P:`?=C${var542}", ())]
var var1445 : ?(Array<Range<UInt8>>, Class1003, Range<Int16>) = Option<(Array<Range<UInt8>>, Class1003, Range<Int16>)>.None
let var1452 : Interface1009 = Class1003()
public let var1498 : (Bool, Range<UInt8>, (String, Unit), Array<(String, Unit)>, (String, Unit), (String, Unit)) = (false, (UInt8(225)&127..=UInt8(254)&127:(-34)|1), ("RTG${var542}KF${var542}h${var542}mle4", ()), [("XH3${var542}5j6${var542}Gttc", ()), ("}]fdeo3F${var542}<O", ()), ("E@_:J`\"${var542}C8z", ()), ("4(Q@#kr9~${var542}[", ()), ("G${var542})h5MY2${var542}qkd", ()), ("h[N${var542}&/T${var542}</*P", ()), (###"'fh${var542}O${var542}Y|${var542};u$${var542}7"###, ()), ("""
3\\5Cs${var542}
R~%mq
""", ()), (###"xSYk0u${var542}2|b${var542}?"###, ()), ("""
g${var542};6bI
3?${var542}H=${var542}x
""", ())], ("H${var542}5U^&ant!G", ()), ("""
G5${var542}x${var542}|U
G$K\"${var542}g
""", ()))
public var var1547 : UInt16 = UInt16(221)
let var1558 : Unit = ()
let var1650 : Float64 = Float64(Float32(Float32(-41.0)))
public var var1721 : Array<Int64> = [26, (-35), (-65), (-79), (-94), (-22), 46, (-27), 24, 34]
public let var1758 : ((String, Unit), UInt8, Int8, Range<UInt32>) = (("}AREx${var542}BugGB", ()), UInt8(206), Int8(-58), (UInt32(71)&127..UInt32(253)&127:(-101)|1))
var var1843 : ?Unit = Option<Unit>.None
let var1891 : Range<UInt8> = (UInt8(Int8(Int8(Int8(73))))&127..UInt8(209)&127:(Int64(Int32(Int8(-80)))|1))
public var var2001 : Bool = ((Class1003() as Bool) is UInt64)
let var2067 : Float32 = Float32(Float32(Float32(Float32(Float32(74.0)))))
public var var2084 : Bool = ([[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]] is Bool)
public var var2178 : (Range<UInt8>, String, Array<Bool>, (Unit, Int8, Range<UInt64>, Bool, String, UInt8), (String, Unit), Range<UInt16>, Bool) = ((UInt8(185)&127..=UInt8(35)&127:(-126)|1), "q${var542}\"X;^C?^.E", [false, false, false, true, false, true, true, true, false, false], ((), Int8(UInt8(113)), (UInt64(105)&127..UInt64(104)&127:(-76)|1), false, "5FTR}${var542}mLq6<", UInt8(UInt8(UInt8(147)))), ("""
E${var542}T*;g
RtyG)${var542}
""", ()), (UInt16(169)&127..UInt16(UInt16(UInt8(227)))&127:((-31)|1)), (Option<Array<Int16>>.None is Range<UInt16>))
var var2209 : Array<Unit> = Array<Unit>(10){ i => () }
public let var2225 : Range<UInt16> = (UInt16(33)&127..=UInt16(248)&127:(-19)|1)
public var var2336 : Unit = ()
public let var2356 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
let var2406 : Unit = ()
public let var2466 : Unit = ()
let var2534 : (Float64, Unit, Array<Bool>, Bool, Unit) = (Float64(Float64(Float32(Float32(63.0)))), (), [false, false, false, true, false, false, true, true, true, true], (Float64(17.0) is Interface1011), ())
var var2614 : Interface1011 = Class1003()
var var2683 : Int16 = Int16(UInt8(22))
public let var2751 : UInt32 = UInt32(Int16(Int8(55)))
var var2784 : Range<Int64> = ((-124)&127..(-50)&127:(Int64(UInt16(183))|1))
public var var2796 : Array<Range<UInt8>> = [(UInt8(140)&127..UInt8(82)&127:74|1), (UInt8(171)&127..UInt8(68)&127:86|1), (UInt8(62)&127..UInt8(220)&127:(-64)|1), (UInt8(222)&127..=UInt8(182)&127:26|1), (UInt8(182)&127..UInt8(171)&127:84|1), (UInt8(144)&127..UInt8(84)&127:122|1), (UInt8(54)&127..=UInt8(45)&127:(-125)|1), (UInt8(120)&127..UInt8(85)&127:97|1), (UInt8(174)&127..=UInt8(142)&127:56|1), (UInt8(5)&127..=UInt8(240)&127:59|1)]
let var2817 : Option<Int32> = Option<Int32>.None
public let var2826 : Array<Array<Unit>> = [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]]
let var2834 : (Array<Unit>, Int64, Unit, Float32, Range<UInt16>, Float32) = ([(), (), (), (), (), (), (), (), (), ()], Int64(Int8(123)), (), Float32(Float32(-73.0)), (UInt16(96)&127..UInt16(50)&127:(-2)|1), Float32(Float32(Float32(125.0))))
var var2866 : Float32 = Float32(-62.0)
public var var3130 : UInt64 = UInt64(UInt64(208))
public let var3189 : Bool = true
var var3211 : UInt32 = UInt32(Int16(-27))
public var var3235 : (Option<Array<Int16>>, Float32) = (([("F*87Alm.C`", ()), ("""
'A_f5
:cpkh
""", ()), (" HZa{qC${var542}<wZa{${var542}", ()), ("""
x`${var542}a{${var542}o${var542}o
us.|T
""", ()), (###"S;I${var542}<hZ9y&${var542}t"###, ()), ("""
VO)q 
V3;${var542}s$
""", ()), (###"&:r^I${var542}zMRNW"###, ()), ("""
M)5_e
$6R${var542}=*
""", ()), ("#)SBpbZ%%B${var542}", ()), ("""
h#OAK
fJP=F${var542}
""", ())] as Array<Int16>), Float32(-118.0))
var var3383 : ?Range<UInt32> = Option<Range<UInt32>>.None
public let var3434 : Range<UInt32> = (UInt32(191)&127..=UInt32(40)&127:(-74)|1)
var var3509 : Float64 = Float64((-84.0))
var var3574 : (Array<Range<UInt8>>, Class1003, Range<Int16>) = ([(UInt8(139)&127..=UInt8(247)&127:(-25)|1), (UInt8(189)&127..UInt8(2)&127:97|1), (UInt8(118)&127..UInt8(219)&127:104|1), (UInt8(Int8(91))&127..=UInt8(228)&127:(27|1)), (UInt8(125)&127..UInt8(101)&127:(Int64(UInt8(174))|1)), (UInt8(Int8(-39))&127..UInt8(200)&127:(Int64(UInt16(74))|1)), (UInt8(118)&127..=UInt8(60)&127:65|1), (UInt8(Int8(3))&127..UInt8(197)&127:(Int64((-82))|1)), (UInt8(134)&127..UInt8(242)&127:(-57)|1), (UInt8(UInt8(15))&127..=UInt8(17)&127:((-67)|1))], Class1003(), (Int16(104)&127..=Int16(-44)&127:46|1))
var var3745 : Aggregate935 = Aggregate935()
public let var3777 : Option<Range<Int32>> = (Aggregate935() as Range<Int32>)
var var3782 : Range<Int32> = (Int32(43)&127..Int32(115)&127:50|1)
let var3835 : UInt8 = UInt8(134)
public var var3899 : Interface1006 = Class1003()
public var var3940 : Option<Option<Range<Int32>>> = Option<Option<Range<Int32>>>.None
let var3948 : Option<Range<Int32>> = (Option<Int32>.None as Range<Int32>)
let var4040 : Unit = ()
func func65(param66 : Array<Bool>) : Bool { // block id: 67
    var var73 : Range<UInt16> = (UInt16(Int16(67))&127..=UInt16(198)&127:(Int64(Int8(UInt8(Int8(-63))))|1));
    !try { // block id: 70
        [true, true, false, true, false, false, false, false, true, true];
        var73;
        var var84 : UInt64 = UInt64(Int32(Int32(56)));
        var84 < UInt64(72)
    } catch (e: Exception) { // block id: 89
        ();
        (Int32(84)&127..=Int32(-125)&127:99|1);
        var94 != var94
    } finally { // block id: 97
        let var99 : Bool = false;
        var99
    }
}


public func func1479(param317 : Int32, namedParam318 ! : (Range<UInt8>, String, Array<Bool>, (Unit, Int8, Range<UInt64>, Bool, String, UInt8), (String, Unit), Range<UInt16>, Bool), namedParam319 ! : Rune) : Range<UInt8> { // block id: 320
    let var325 : Bool = (((UInt8(224)&127..=UInt8(18)&127:65|1), "MmJc jkgbB", [true, ([Int16(-84), Int16(-2), Int16(69), Int16(-58), Int16(66), Int16(-108), Int16(-45), Int16(45), Int16(-91), Int16(-61)] is Rune), true, ("""
Yvwc4
s:mN@
""" is UInt8), ((Int16(-77)&127..Int16(121)&127:(-73)|1) is Int16), (((UInt8(146)&127..=UInt8(110)&127:(85|1)), "rqz(S'>O'E", [false, false, false, true, false, false, true, false, false, false], ((), Int8(82), (UInt64(127)&127..UInt64(124)&127:((-113)|1)), false, "a{kVC?q1+Sj", UInt8(250)), ("ShyGO/SZd&", ()), (UInt16(188)&127..=UInt16(216)&127:((-72)|1)), false) is Int32), ('w' is Int8), false, (Int8(70) is Range<Int64>), ((UInt32(227)&127..UInt32(214)&127:(-47)|1) is Rune)], ((), Int8(Int8(-42)), (UInt64(160)&127..UInt64(177)&127:64|1), false, "6'#e'/W3pu", UInt8(Int8(-8))), ("""
hUx\\T
2NyBv
""", ()), (UInt16(84)&127..=UInt16(118)&127:(Int64(Int32(36))|1)), true) is Array<Range<UInt8>>);
    match (if (var325) { var160 } else { var160 } ) {
        case _ => 
            [(UInt8(60)&127..UInt8(104)&127:111|1), (UInt8(167)&127..=UInt8(103)&127:4|1), (UInt8(155)&127..UInt8(15)&127:58|1), (UInt8(114)&127..UInt8(246)&127:63|1), (UInt8(54)&127..=UInt8(57)&127:76|1), (UInt8(245)&127..UInt8(48)&127:(-128)|1), (UInt8(195)&127..UInt8(103)&127:(-81)|1), (UInt8(48)&127..=UInt8(181)&127:39|1), (UInt8(179)&127..UInt8(149)&127:(-3)|1), (UInt8(88)&127..=UInt8(195)&127:23|1)]
        
    }[5]
}


public func func697(param698 : Range<UInt32>) : Unit { // block id: 699

}

public struct Aggregate935 {
    public init() { // block id: 937

    }
;
    public let var942 : Unit = ();
    public static var var3104 : Bool = false;
    public init(namedParam3058 ! : Option<Bool>, namedParam3059 ! : Interface1006, namedParam3060 ! : (Option<Array<Int16>>, Interface1008, Option<Int64>) -> Range<UInt32>) { // block id: 3065
        [(), (), (), (), (), (), (), (), (), ()];
        var loopTimeVar3153 : Int64 = 0;
        while ((if (match {
            case true => 
            ();
            ();
            false
            case false => 
            true
            case _ => 
            if (false) { (UInt16(192)&127..=UInt16(175)&127:107|1) } else { var2225 } ;
            var2466;
            var2001
        }) { // block id: 3085
            var2084
        } else if (match ((UInt8(23)&127..UInt8(249)&127:(8|1))) {
            case _ => 
                var2084
            
            case _ => 
                ();
                var2683 += var2683;
                var3104
            
            case _ => 
                var var3113 : (Array<Range<UInt8>>, Class1003, Range<Int16>) = ([(UInt8(128)&127..=UInt8(76)&127:(-111)|1), (UInt8(12)&127..=UInt8(224)&127:75|1), (UInt8(82)&127..UInt8(236)&127:125|1), (UInt8(92)&127..=UInt8(234)&127:63|1), (UInt8(34)&127..UInt8(187)&127:(-79)|1), (UInt8(50)&127..UInt8(95)&127:13|1), (UInt8(203)&127..UInt8(92)&127:(-54)|1), (UInt8(180)&127..UInt8(73)&127:39|1), (UInt8(249)&127..=UInt8(197)&127:19|1), (UInt8(52)&127..=UInt8(9)&127:(-89)|1)], Class1003(), (Int16(-86)&127..Int16(1)&127:80|1));
                if (false) { Option<(Array<Range<UInt8>>, Class1003, Range<Int16>)>.None } else { Option<(Array<Range<UInt8>>, Class1003, Range<Int16>)>.Some(var3113) } ;
                var var3120 : UInt32 = UInt32(UInt8(97));
                var3120 ^= UInt32(129);
                UInt16(46) < UInt16(153)
            
        }) { // block id: 3127
            var3130 *= UInt64(201);
            false
        } else { // block id: 3135
            (78&127..(-39)&127:(-121)|1);
            if (false) { [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]] } else { [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]] } ;
            true
        }) && loopTimeVar3153 < 100 ) {
            loopTimeVar3153++;
            if (true) { (Option<Array<Int16>>.None, Float32(39.0)) } else { (var160, var2067) } ;
            var2178
        };
        var loopTimeVar3186 : Int64 = 0;
        while (((namedParam3058 ?? if (false) { // block id: 3159
            Option<Bool>.None;
            var2614;
            var622
        } else if (true) { // block id: 3164
            var2466;
            let var3167 : Bool = false;
            var3167
        } else { // block id: 3169
            ();
            ();
            var2084
        })) && loopTimeVar3186 < 100 ) {
            loopTimeVar3186++;
            try (resource = Class1003()) { // block id: 3175
                var3130++;
                var993 -= var993;
                var993--
            } finally { // block id: 3183
                var2466
            }
        }
    }

}


public interface Interface1007 {

}

public interface Interface1011 {

}

public interface Interface1010 <: Interface1007 & Interface1011 {

}

public interface Interface1009 <: Interface1007 & Interface1010 {
    func func1581() : Int64 { // block id: 1582
        let var1595 : (Option<Array<Int16>>, Float32) = (Option<Array<Int16>>.Some([Int16(50), Int16(Int16(42)), Int16(-7), Int16(Int8(88)), Int16(-87), Int16(27), Int16(114), Int16(70), Int16(8), Int16(-96)]), Float32(Float32(Float32(Float32(119.0)))));
        if (var1323.var1589) { // block id: 1591
            var1547--;
            var1595
        } else { // block id: 1615
            let var1621 : Float32 = Float32(-44.0);
            if (false) { (Option<Array<Int16>>.None, var1621) } else { (var160, Float32(-49.0)) } 
        }[0];
        let var1667 : Unit = ();
        let var1687 : Bool = ((Int32(80)&127..=Int32(-107)&127:(-18)|1) is Int64);
        (Option<(Float64, Unit, Array<Bool>, Bool, Unit)>.None ?? match ((var993&127..=Int32(86)&127:((-76)|1))) {
            case caseVar1642 => 
                if (false) { Class1003() } else { Class1003() } ;
                (var1650, var987, var115, var622, var987)
            
            case _ => 
                (122.0, (), var115, true, var1667)
            
            case _ => 
                var var1673 : UInt64 = UInt64(UInt64(115));
                var1673++;
                var1667;
                (var1650, (), [true, true, true, true, var622, var1687, false, var1687, true, true], var622, var1558)
            
        })[4];
        var var1700 : (Range<UInt32>) -> Unit = { lambdaParameter1703 : Range<UInt32> => () };
        let var1735 : Bool = false;
        var var1753 : (Range<UInt32>) -> Unit = func1750;
        func1479(var1700) << (((var1753|>{ lambdaParameter1709 : (Range<UInt32>) -> Unit => let var1730 : Option<Int64> = Option<Int64>.Some(39); (Option<Array<Int64>>.None ?? var1721)[1] * (var1730 ?? if (var1735) { // block id: 1737
            ();
            let var1742 : Int16 = Int16(UInt8(133));
            (Int16(112)&127..=var1742&127:(var516|1));
            38
        } else { // block id: 1747
            ();
            var605
        }) })) & 7)
    }

}

public interface Interface1008 <: Interface1007 & Interface1009 {

}

public interface Interface1006 <: Interface1007 & Interface1008 {

}

public open class Class1003 <: Interface1006 & Resource {
    public init() { // block id: 1005

    }
;
    static var var1014 : Bool = true;
    var var1382 : Unit = ();
    public let var1589 : Bool = true;
    private static var var3659 : ?Int64 = Option<Int64>.None;
    public static var var3800 : String = "vYf0P,all/";
    public static var var3843 : (String, Unit) = ("JE*T=${var3800}-@v=${var3800}Z${var3800}", ());
    public init(param3619 : Range<UInt16>, param3620 : Range<UInt16>, param3621 : Unit, optionalParam3622 ! : Option<Unit> = ((Int32(105)&127..Int32(93)&127:(-33)|1) as Unit)) { // block id: 3625
        try { // block id: 3627
            var2834;
            let var3635 : Option<Unit> = ((Float64((-98.0)), (), [true, false, true, false, false, true, true, false, true, false], ([(), (), (), (), (), (), (), (), (), ()] is (String, Unit)), ()) as Unit);
            (var3635 ?? var1558)
        } finally { // block id: 3646
            (Option<Unit>.Some(var2466) ?? var2466)
        };
        var var3705 : Bool = (Option<Array<Int16>>.None is (Array<(String, Unit)>) -> (Array<Unit>, Int64, Unit, Float32, Range<UInt16>, Float32));
        try { // block id: 3652
            (var3659 ?? (-117));
            var loopTimeVar3668 : Int64 = 0;
            while ((var3189) && loopTimeVar3668 < 100 ) {
                loopTimeVar3668++;
                ();
                ()
            }
        } catch (e: Exception) { // block id: 3669
            match (Float32(1.0)) {
                case caseVar3674 => 
                    var993 <<= ((var993) & 7)
                
                case caseVar3681 : Option<Range<Int32>> => 
                    var3130 **= (var3130 & 3)
                
                case _ => 
                    ()
                
                case _ : UInt8 => 
                    var2336;
                    ();
                    ()
                
                case _ => 
                    var2001 &&= false
                
            };
            UInt32(var2751);
            var loopTimeVar3712 : Int64 = 0;
            do {
                loopTimeVar3712++;
                var2336;
                var542
            } while ((var3705) && loopTimeVar3712 < 100 ) 
        };
        var var3722 : Interface1010 = Class1003();
        var var3729 : (Unit, Int8, Range<UInt64>, Bool, String, UInt8) = ((), Int8(41), (UInt64(12)&127..UInt64(243)&127:108|1), (UInt64(248) is (Range<Int64>, Range<UInt8>, Float64, Array<Range<UInt8>>, Range<UInt8>, Range<UInt64>)), "Kf$;iS923v", UInt8(Int8(Int8(UInt8(11)))));
        if ((try { // block id: 3716
            var2466;
            UInt32(38)
        } finally { // block id: 3719
            var1758;
            var3722;
            var2751 * var2751
        } < match (var3729) {
            case (_ : Float64,_ : Int8,_ : Option<Array<Int64>>,_,_ : Float64,_ : Range<Int16>) => 
                var3745;
                param3621;
                var3211
            
            case (_,caseVar3751 : Interface1008,_ : Range<UInt8>,caseVar3752 : (Array<Range<UInt8>>, Class1003, Range<Int16>),_ : Option<(Float64, Unit, Array<Bool>, Bool, Unit)>,caseVar3753) => 
                var3211 ** (UInt32(65) & 3)
            
            case (caseVar3760 : Option<Int64>,_ : (Range<Int64>, Range<UInt8>, Float64, Array<Range<UInt8>>, Range<UInt8>, Range<UInt64>),_ : Option<Array<Int64>>,caseVar3761,_,_ : Option<Array<Int64>>) => 
                var3211
            
            case _ => 
                var3211 - var2751
            
        })) { (if (false) { var3777 } else { var3777 }  ?? var3782) } else { match ((Option<Array<(String, Unit)>>.Some([var21, ("""
Q+xo~
QjxUh
""", var987), var21, var21, (var3800, var2466), (var542, var2466), var21, var21, var21, (var542, ())]) ?? var1404)) {
            case _ : UInt8 => 
                ();
                ();
                if (var3705) { (Int32(74)&127..Int32(-92)&127:65|1) } else { var3782 } 
            
            case _ : Option<(Option<Array<Int16>>, Float32)> => 
                var2406;
                if (var622) { var829 } else { (((var3800, ()), var3835, Int8(-29), (UInt32(200)&127..=UInt32(120)&127:((-116)|1))), var3843, "/Y$)Q9#ffM", (var605&127..11&127:(35|1)), Int8(97)) } ;
                var3782
            
            case _ => 
                if (var622) { (Int32(-122)&127..=var993&127:(var755|1)) } else { (Int32(10)&127..=Int32(88)&127:32|1) } 
            
            case _ => 
                var2683++;
                var3782
            
            case _ => 
                var3782
            
        } } 
    }
;
    public static var var4028 : Interface1010 = Class1003();
    public init(param3929 : (Float64, Unit, Array<Bool>, Bool, Unit)) { // block id: 3930
        var var3994 : (String, Unit) = ("=$tiS(Kgfo", ());
        match ((if (var622) { var3940 } else { Option<Option<Range<Int32>>>.None }  ?? try { // block id: 3944
                if (var2084) { var3948 } else { var3948 } 
            } catch (_) { // block id: 3952
                var1891;
                if (var3189) { Option<Range<Int32>>.None } else { var3948 } 
            } finally { // block id: 3958
                (("""
>e8[C
+)62t
""", var987), var3835, Int8(-49), var3434);
                var3948
            })) {
            case _ : Option<Option<Range<Int32>>> => 
                ();
                if (true) { (Int16(-13)&127..=Int16(42)&127:121|1) } else { (Int16(-50)&127..=var2683&127:(107|1)) } ;
                (UInt16(64)&127..=UInt16(181)&127:57|1)
            
            case _ : Array<Array<Unit>> => 
                (var1891, """
?ZNt`
/3zua{
""", [false, false, true, true, true, true, true, true, false, false], ((), var1147, (UInt64(188)&127..UInt64(14)&127:24|1), var622, var3800, var443), var3994, (var1547&127..var1547&127:((-125)|1)), var2084);
                (UInt16(245)&127..UInt16(142)&127:(-79)|1)
            
            case caseVar4006 => 
                if (var2001) { (UInt16(246)&127..UInt16(250)&127:32|1) } else { (var1547&127..var1547&127:(var605|1)) } 
            
            case caseVar4017 : Option<(Float64, Unit, Array<Bool>, Bool, Unit)> => 
                if (false) { Class1003(var2225, (UInt16(47)&127..=UInt16(239)&127:43|1), var1558, optionalParam3622 : Option<Unit>.Some(var2466)) } else { var4028 } ;
                (var1547&127..UInt16(155)&127:((-72)|1))
            
            case _ => 
                ();
                var3235;
                var2225
            
        };
        var4040;
        var3211--
    }

    public func isClosed(): Bool { return false }
    public func close(): Unit {}
}

func func1037(param1038 : Array<Bool>) : Array<Bool> { // block id: 1039
    var var1043 : Rune = 'X';
    let var1081 : Int64 = 55;
    let var1096 : Bool = false;
    try { // block id: 1041
        var1043;
        [var21, var21, (var542, ()), var21, var21, var21, var21, ("""
tC3:D
k[FW`
""", var987), var21, var21];
        try { // block id: 1061
            if (false) { [false, var622, false, var622, true, true, var622, false, false, var622] } else { [true, false, true, false, true, true, false, false, true, true] } 
        } catch (e: Exception) { // block id: 1076
            [false, false, true, false, true, false, false, false, true, false];
            ((-22)&127..var1081&127:(var1081|1));
            let var1087 : Bool = true;
            [var622, var1087, false, true, false, false, false, true, var1096, true]
        }
    } finally { // block id: 1099
        var115
    }
}




func func1216<T0>(param1217 : (Array<Bool>) -> Array<Bool>) : Class1003 { // block id: 1220
    try { // block id: 1222
        func1037(var115)
    } catch (_) { // block id: 1225
        if (false) { (var993&127..var993&127:(21|1)) } else { (Int32(-37)&127..=Int32(-14)&127:(-1)|1) } ;
        match (Option<Array<Int16>>.Some([Int16(-23), Int16(76), Int16(20), Int16(22), Int16(100), Int16(-67), Int16(-48), Int16(-72), Int16(104), Int16(-102)])) {
            case caseVar1238 => 
                (UInt32(166)&127..=UInt32(25)&127:117|1);
                var var1243 : Bool = (((UInt8(190)&127..=UInt8(179)&127:(-82)|1), "b!rL\\4Ts-;", [true, true, false, true, false, true, false, false, true, true], ((), Int8(-60), (UInt64(99)&127..=UInt64(194)&127:(-23)|1), false, """
/eTI`
+)Ez_
""", UInt8(UInt8(93))), ("X|UPw!q_d'", ()), (UInt16(236)&127..UInt16(201)&127:(-91)|1), true) is Range<Int64>);
                let var1265 : UInt32 = UInt32(163);
                if (var1243) { (UInt32(188)&127..UInt32(57)&127:97|1) } else { (var1265&127..UInt32(165)&127:(var605|1)) } ;
                var115
            
            case _ => 
                var987;
                var1275;
                if (var622) { [false, false, false, false, true, true, false, false, false, true] } else { var115 } 
            
            case _ => 
                var115
            
        }
    };
    var1287[7];
    let var1294 : Bool = false;
    var var1306 : Int8 = Int8(Int8(93));
    var var1316 : UInt16 = UInt16(126);
    var var1348 : (Array<Range<UInt8>>, Class1003, Range<Int16>) = ([(UInt8(93)&127..=UInt8(109)&127:111|1), (UInt8(11)&127..=UInt8(165)&127:36|1), (UInt8(127)&127..=UInt8(206)&127:(-92)|1), (UInt8(21)&127..=UInt8(244)&127:(-39)|1), (UInt8(39)&127..=UInt8(103)&127:94|1), (UInt8(111)&127..=UInt8(178)&127:94|1), (UInt8(43)&127..UInt8(226)&127:111|1), (UInt8(117)&127..=UInt8(14)&127:(-77)|1), (UInt8(81)&127..=UInt8(232)&127:94|1), (UInt8(68)&127..UInt8(128)&127:(-12)|1)], Class1003(), (Int16(58)&127..=Int16(-80)&127:58|1));
    try { // block id: 1291
        match (var1294) {
            case caseVar1298 : Range<UInt8> => 
                var987
            
            case _ : Option<Range<UInt8>> => 
                var1306 %= ((Int8(-88)) | 1);
                var993++
            
            case _ => 
                var1316 <<= ((var1316) & 7)
            
        };
        if (var1294) { Class1003() } else { var1323 } 
    } catch (e: Exception) { // block id: 1325
        var987;
        ([(UInt8(207)&127..UInt8(133)&127:67|1), (UInt8(137)&127..UInt8(168)&127:72|1), (UInt8(34)&127..UInt8(231)&127:126|1), (UInt8(34)&127..UInt8(34)&127:(-11)|1), (UInt8(143)&127..=UInt8(73)&127:85|1), (UInt8(16)&127..=UInt8(177)&127:90|1), (UInt8(61)&127..=UInt8(35)&127:(-65)|1), (UInt8(81)&127..UInt8(117)&127:(-124)|1), (UInt8(145)&127..=UInt8(161)&127:66|1), (UInt8(86)&127..UInt8(123)&127:61|1)], Class1003(), (Int16(-85)&127..=Int16(100)&127:76|1))[1]
    } finally { // block id: 1334
        let var1341 : ?(Array<Range<UInt8>>, Class1003, Range<Int16>) = (Option<Bool>.Some((((-105.0) as Array<Int16>) is String)) as (Array<Range<UInt8>>, Class1003, Range<Int16>));
        (var1341 ?? var1348);
        (var1359 ?? ([(UInt8(85)&127..UInt8(231)&127:(-1)|1), (UInt8(215)&127..=UInt8(10)&127:7|1), (UInt8(79)&127..=UInt8(113)&127:16|1), (UInt8(166)&127..UInt8(233)&127:(-23)|1), (UInt8(77)&127..UInt8(36)&127:(-56)|1), (UInt8(42)&127..UInt8(79)&127:(-3)|1), (UInt8(89)&127..UInt8(109)&127:(-101)|1), (UInt8(38)&127..=UInt8(243)&127:122|1), (UInt8(235)&127..UInt8(74)&127:47|1), (UInt8(15)&127..=UInt8(106)&127:(-86)|1)], var1323, (Int16(-100)&127..Int16(49)&127:(var94|1))));
        Class1003()
    }
}

func func1376(param1038 : Array<Bool>) : Array<Bool> { // block id: 1039
    var var1043 : Rune = 'X';
    let var1081 : Int64 = 55;
    let var1096 : Bool = false;
    try { // block id: 1041
        var1043;
        [var21, var21, (var542, ()), var21, var21, var21, var21, ("""
tC3:D
k[FW`
""", var987), var21, var21];
        try { // block id: 1061
            if (false) { [false, var622, false, var622, true, true, var622, false, false, var622] } else { [true, false, true, false, true, true, false, false, true, true] } 
        } catch (e: Exception) { // block id: 1076
            [false, false, true, false, true, false, false, false, true, false];
            ((-22)&127..var1081&127:(var1081|1));
            let var1087 : Bool = true;
            [var622, var1087, false, true, false, false, false, true, var1096, true]
        }
    } finally { // block id: 1099
        var115
    }
}

public func func1479(param1480 : (Range<UInt32>) -> Unit) : Int64 { // block id: 1483
    (-36)
}

public func func1488(param698 : Range<UInt32>) : Unit { // block id: 699

}




public func func1750(param698 : Range<UInt32>) : Unit { // block id: 699

}

func func1386(param1387 : Int64) : (Array<Range<UInt8>>, Class1003, Range<Int16>) { // block id: 1388
    var var1437 : (String, Unit) = ("\\?Mw_OGJ)?", ());
    if ((Option<Bool>.Some(var622) ?? var622)) { (false, var111, (var542, ()), var1404, var1437, var21)[2] } else { match (var1445) {
        case caseVar1449 : (Range<UInt8>, String, Array<Bool>, (Unit, Int8, Range<UInt64>, Bool, String, UInt8), (String, Unit), Range<UInt16>, Bool) => 
            var1452;
            var1437
        
        case caseVar1457 => 
            var1437
        
        case _ => 
            ();
            ("r]0SoH=J6a", ())
        
    } } [1];
    let var1486 : ((Range<UInt32>) -> Unit) -> Int64 = func1479;
    let var1571 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    (try { // block id: 1469
        ();
        45
    } finally { // block id: 1472
        let var1474 : Interface1007 = Class1003();
        var1474;
        ();
        (-7)
    }&127..=({ lambdaParameter1492 : Range<UInt32> => match ((var1498 as (Array<Range<UInt8>>, Class1003, Range<Int16>))) {
        case _ : Range<UInt32> => 
            var1547 <<= ((var1547) & 7);
            var987;
            if (var622) { [var987, (), var987, var1558, (), (), var987, (), var987, ()] } else { [(), (), (), (), (), (), (), (), (), ()] } 
        
        case _ : Range<Int64> => 
            var1571
        
        case _ => 
            var1558;
            var1571
        
    }[9] }|>var1486)&127:(var1323.func1581()|1));
    let var1774 : (Array<Range<UInt8>>, Class1003, Range<Int16>) = ([(UInt8(79)&127..=UInt8(82)&127:78|1), (UInt8(99)&127..=UInt8(92)&127:(-82)|1), (UInt8(214)&127..=UInt8(35)&127:126|1), (UInt8(38)&127..=UInt8(178)&127:38|1), (UInt8(15)&127..UInt8(61)&127:(-125)|1), (UInt8(196)&127..UInt8(21)&127:106|1), (UInt8(252)&127..=UInt8(238)&127:(-23)|1), (UInt8(52)&127..UInt8(71)&127:(-11)|1), (UInt8(247)&127..UInt8(14)&127:(-83)|1), (UInt8(231)&127..UInt8(117)&127:(-119)|1)], Class1003(), (Int16(34)&127..=Int16(-21)&127:(63|1)));
    let var1795 : Range<UInt16> = (UInt16(180)&127..UInt16(222)&127:(-69)|1);
    try { // block id: 1756
        var1758;
        var loopTimeVar1770 : Int64 = 0;
        do {
            loopTimeVar1770++;

        } while ((var622) && loopTimeVar1770 < 100 ) ;
        (Option<(Array<Range<UInt8>>, Class1003, Range<Int16>)>.None ?? var1774)
    } catch (e: Exception) { // block id: 1782
        (Option<Unit>.Some(()) ?? var987);
        if (true) { // block id: 1789
            Int16(38);
            [(-19), 120, 62, 47, 34, (-1), (-27), 35, 87, (-28)];
            ()
        };
        match (var1795) {
            case _ => 
                var1774
            
            case _ => 
                var1547 /= ((var1547) | 1);
                ();
                ([(UInt8(155)&127..UInt8(156)&127:87|1), (UInt8(67)&127..UInt8(17)&127:30|1), (UInt8(48)&127..=UInt8(234)&127:23|1), (UInt8(70)&127..=UInt8(55)&127:(-1)|1), (UInt8(34)&127..UInt8(88)&127:(-78)|1), (UInt8(242)&127..UInt8(4)&127:68|1), (UInt8(103)&127..UInt8(129)&127:(-27)|1), (UInt8(89)&127..UInt8(163)&127:(-79)|1), (UInt8(78)&127..UInt8(147)&127:1|1), (UInt8(188)&127..=UInt8(175)&127:43|1)], Class1003(), (Int16(-99)&127..=Int16(-47)&127:54|1))
            
        }
    }
}

func func1812(param1813 : Bool) : (Array<Range<UInt8>>, Class1003, Range<Int16>) { // block id: 1814
    func func1816<T0, T1, T2>(namedParam1817 ! : Option<Unit>) : Int8 { // block id: 1818
        var loopTimeVar1828 : Int64 = 0;
        do {
            loopTimeVar1828++;
            if (true) { namedParam1817 } else { Option<Unit>.None } 
        } while ((func65(var115)) && loopTimeVar1828 < 100 ) ;
        var1147
    }
;
    func1816<Range<UInt8>, Interface1006, Interface1008>(namedParam1817 : try { // block id: 1831
        let var1835 : ?Unit = Option<Unit>.Some(());
        if (param1813) { var1835 } else { Option<Unit>.Some(var987) } 
    } finally { // block id: 1840
        ();
        var1843
    });
    var var1846 : (Array<Range<UInt8>>, Class1003, Range<Int16>) = ([(UInt8(250)&127..UInt8(7)&127:74|1), (UInt8(169)&127..=UInt8(147)&127:(-44)|1), (UInt8(70)&127..=UInt8(181)&127:(-71)|1), (UInt8(234)&127..=UInt8(191)&127:(-128)|1), (UInt8(203)&127..=UInt8(225)&127:(-106)|1), (UInt8(130)&127..UInt8(93)&127:(-3)|1), (UInt8(52)&127..=UInt8(62)&127:33|1), (UInt8(118)&127..=UInt8(11)&127:126|1), (UInt8(121)&127..=UInt8(140)&127:78|1), (UInt8(121)&127..=UInt8(127)&127:(-68)|1)], Class1003(), (Int16(126)&127..=Int16(41)&127:3|1));
    var1846
}

public func func1854(param1855 : Int64) : Bool { // block id: 1856
    ();
    (try { // block id: 1860
        if (var622) { Option<Unit>.Some(var1558) } else { Option<Unit>.Some(()) } 
    } catch (e: Exception) { // block id: 1867
        var1843
    } finally { // block id: 1869
        if (false) { Option<Unit>.Some(var987) } else { var1843 } 
    } ?? ());
    var var1918 : ?Bool = Option<Bool>.Some(false);
    var var1934 : (Array<Bool>) -> Bool = { lambdaParameter1937 : Array<Bool> => false };
    try { // block id: 1877
        let var1910 : Int16 = Int16(Int8(-112));
        if (false) { var1359 } else { Option<(Array<Range<UInt8>>, Class1003, Range<Int16>)>.Some(([(UInt8(22)&127..var443&127:(96|1)), (UInt8(5)&127..UInt8(176)&127:(-110)|1), var111, var1891, (UInt8(109)&127..UInt8(208)&127:(-97)|1), (UInt8(148)&127..UInt8(182)&127:77|1), (UInt8(104)&127..=UInt8(78)&127:31|1), (UInt8(18)&127..UInt8(14)&127:110|1), (UInt8(9)&127..UInt8(67)&127:(-29)|1), var111], Class1003(), (var1910&127..=var1910&127:((-16)|1)))) } ;
        ();
        var1918.getOrThrow()
    } catch (e: Exception) { // block id: 1921
        var var1924 : Bool = false;
        var loopTimeVar1927 : Range<UInt64> = (UInt64(65)&127..UInt64(42)&127:((-123)|1));
        for (i in loopTimeVar1927 where var1924) {

        };
        [true, true, true, false, true, true, false, false, false, true]|>var1934
    }
}

public func func1109(param1110 : Int32) : UInt8 { // block id: 1111
    var loopTimeVar1132 : Int64 = 0;
    do {
        loopTimeVar1132++;
        var loopTimeVar1127 : Int64 = 0;
        while ((var622) && loopTimeVar1127 < 100 ) {
            loopTimeVar1127++;

        };
        (Option<Unit>.None ?? var987)
    } while ((((Class1003() as Bool) ?? ((Int16(60)&127..Int16(113)&127:(-67)|1) is Option<Unit>))) && loopTimeVar1132 < 100 ) ;
    let var1154 : UInt64 = UInt64(UInt32(UInt16(0)));
    let var1370 : ((Array<Bool>) -> Array<Bool>) -> Class1003 = { lambdaParameter1373 : (Array<Bool>) -> Array<Bool> => Class1003() };
    let var1852 : (Bool) -> (Array<Range<UInt8>>, Class1003, Range<Int16>) = func1812;
    func func1134(param1135 : Class1003, namedParam1136 ! : Class1003) : UInt8 { // block id: 1137
        var var1144 : Int8 = Int8(-97);
        var loopTimeVar1210 : Int64 = 0;
        while ((try { // block id: 1141
            var1144 /= ((var1147) | 1);
            UInt64(249)
        } catch (e: Exception) { // block id: 1150
            UInt64(80) & var1154
        } == UInt64(Int16(-27))) && loopTimeVar1210 < 100 ) {
            loopTimeVar1210++;
            var987;
            match (Option<Array<Int16>>.None) {
                case _ : UInt8 => 
                    var987;
                    ();
                    let var1170 : Array<Range<UInt32>> = [(UInt32(232)&127..=UInt32(Int16(78))&127:(Int64(Int32(UInt16(196)))|1)), (UInt32(89)&127..=UInt32(72)&127:71|1), (UInt32(53)&127..UInt32(239)&127:(-32)|1), (UInt32(180)&127..UInt32(197)&127:(-74)|1), (UInt32(31)&127..=UInt32(82)&127:(-79)|1), (UInt32(61)&127..UInt32(11)&127:2|1), (UInt32(238)&127..UInt32(127)&127:(Int64(UInt64(72))|1)), (UInt32(32)&127..UInt32(31)&127:5|1), (UInt32(Int16(UInt8(37)))&127..UInt32(3)&127:(Int64(Int8(Int8(116)))|1)), (UInt32(178)&127..=UInt32(69)&127:(-71)|1)];
                    var1170
                
                case _ => 
                    if (var622) { Option<Bool>.Some(var622) } else { Option<Bool>.Some(var622) } ;
                    ();
                    [(UInt32(120)&127..=UInt32(172)&127:101|1), (UInt32(102)&127..=UInt32(12)&127:0|1), (UInt32(4)&127..=UInt32(159)&127:42|1), (UInt32(97)&127..=UInt32(106)&127:(-17)|1), (UInt32(118)&127..=UInt32(82)&127:(-4)|1), (UInt32(217)&127..=UInt32(95)&127:102|1), (UInt32(211)&127..=UInt32(183)&127:75|1), (UInt32(167)&127..UInt32(146)&127:(-74)|1), (UInt32(202)&127..=UInt32(69)&127:86|1), (UInt32(100)&127..UInt32(222)&127:(-32)|1)]
                
            }
        };
        func func1213() : Class1003 { // block id: 1214
            let var1379 : (Array<Bool>) -> Array<Bool> = func1376;
            var1379|>var1370
        }
;
        func1213().var1382;
        let var1942 : (Int64) -> Bool = func1854;
        match ((Int64(UInt64(234))|>(var1942~>var1852))) {
            case _ => 
                ();
                var443
            
        }
    }
;
    func1134(Class1003(), namedParam1136 : Class1003())
}

func func1989() : Array<Bool> { // block id: 1990
    var var2054 : ?Bool = (Aggregate935() as Bool);
    var loopTimeVar2064 : Int64 = 0;
    do {
        loopTimeVar2064++;

    } while (((match (var1147) {
        case _ : Array<Bool> => 
            84;
            Option<Bool>.Some(var2001)
        
        case caseVar2007 : Int64 => 
            UInt16(154);
            var516 **= (var755 & 3);
            var var2014 : ?Bool = (((UInt8(Int8(81))&127..UInt8(174)&127:(28|1)), ###"[f*ri|?K8U"###, [false, true, false, true, false, false, false, false, true, false], ((), Int8(UInt8(42)), (UInt64(30)&127..=UInt64(162)&127:(-70)|1), false, "SzN5M8TQoa", UInt8(Int8(-110))), (###"8CiqfVy`74"###, ()), (UInt16(198)&127..UInt16(55)&127:105|1), false) as Bool);
            var2014
        
        case caseVar2040 : Int16 => 
            var987;
            ();
            var var2046 : Bool = false;
            Option<Bool>.Some(var2046)
        
        case _ => 
            ();
            if (true) { var2054 } else { Option<Bool>.None } 
        
    } ?? (Option<Bool>.Some(true) ?? true))) && loopTimeVar2064 < 100 ) ;
    var var2081 : Bool = true;
    let var2168 : Bool = false;
    var var2171 : Bool = true;
    match (var2067) {
        case _ => 
            ();
            ();
            [false, var622, var2081, var2084, var2168, var2171, false, var2081, var2081, false]
        
    }
}

func func2254(param2255 : ((String, Unit), UInt8, Int8, Range<UInt32>)) : Array<Array<Unit>> { // block id: 2256
    ();
    let var2264 : Int16 = Int16(Int8(UInt8(198)));
    let var2289 : Option<Array<Int64>> = Option<Array<Int64>>.Some([74, (-53), (-5), 41, (-24), (-108), 3, (-15), 71, 19]);
    try { // block id: 2259
        ((Int16(-85)&127..=var2264&127:(var755|1)) as Array<Int64>)
    } finally { // block id: 2269
        try { // block id: 2271
            ();
            ();
            if (var2001) { Option<Array<Int64>>.Some([110, (-75), (-63), var755, (-97), var605, var605, 33, (-10), var516]) } else { var2289 } 
        } catch (_) { // block id: 2292
            var2289
        }
    };
    let var2415 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    var var2462 : Unit = ();
    if ((UInt8(Int8(115)) == UInt8(var443))) { match (if (var622) { (var987, Int8(-90), (UInt64(243)&127..UInt64(58)&127:(-48)|1), var2084, var542, UInt8(130)) } else { (var1558, Int8(-82), (UInt64(174)&127..=UInt64(191)&127:(-46)|1), var2084, var542, var443) } ) {
        case (caseVar2319,caseVar2320 : Range<UInt64>,_,caseVar2321 : Option<Bool>,_,_) => 
            if (true) { [[(), var987, var1558, caseVar2319, (), var1558, (), (), var2336, ()], var2209, var2209, [(), (), caseVar2319, var2336, (), (), var2336, (), (), ()], var2209, var2209, var2209, var2356, [(), caseVar2319, (), var987, (), (), var2336, var1558, (), var987], [(), (), (), (), (), (), (), (), (), ()]] } else { [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]] } 
        
        case (caseVar2373 : Interface1007,caseVar2374,caseVar2375,caseVar2376 : Option<(Array<Range<UInt8>>, Class1003, Range<Int16>)>,_,_) => 
            let var2394 : Unit = ();
            if (var2001) { [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]] } else { [var2209, [(), var987, var987, (), (), var987, (), var987, var2336, var2394], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), var2394, var2394, var987, var2406, (), (), var987, var987], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], var2415, [(), (), (), var2406, (), (), (), var2394, var2336, var2394]] } 
        
        case (caseVar2430,caseVar2431 : Aggregate935,_ : Array<Int16>,_,_,_ : Class1003) => 
            [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]]
        
        case _ => 
            var2406;
            if (var2001) { Class1003() } else { Class1003() } ;
            var var2503 : Unit = ();
            if (var622) { [[var987, (), (), (), (), (), var2406, (), var2406, ()], [(), var987, var1558, (), var987, var2462, var2406, var2466, (), ()], [var1558, (), (), var987, (), (), var2462, var2466, (), var2466], [(), (), (), (), (), (), (), (), (), ()], var2415, [(), var987, var2336, (), (), (), (), var987, var987, var987], var2415, [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), var2503, var2406, (), var2503, var2503, ()]] } else { var1287 } 
        
    } } else { var1287 } 
}


func func2563(param2564 : Array<Range<UInt8>>) : Range<UInt32> { // block id: 2565
    let var2571 : Int16 = Int16(-26);
    let var2594 : Interface1007 = Class1003();
    match (try { // block id: 2568
            (var2571&127..Int16(28)&127:(var605|1));
            if (var2084) { (var21, var443, Int8(-51), (UInt32(155)&127..UInt32(92)&127:(-68)|1)) } else { var1758 } ;
            var755 << ((var94) & 7)
        } finally { // block id: 2586
            var605 >> (((-83)) & 7)
        }) {
        case _ => 
            var2594;
            var var2598 : Int8 = Int8(Int8(Int8(-38)));
            var2598++;
            var443 / ((var443) | 1)
        
        case 125 | 86 => 
            UInt8(4)
        
        case _ => 
            if (var622) { var2614 } else { Class1003() } ;
            var2001 &&= false;
            var443 - var443
        
    };
    Class1003();
    var var2651 : ?Bool = (((("""
eUQ-\"
G^!(T
""", ()), UInt8(UInt8(5)), Int8(UInt8(62)), (UInt32(29)&127..UInt32(57)&127:(-1)|1)), (###"w;-AYtq%.9"###, ()), "8RLXNM_, 9", ((-85)&127..=Int64(UInt64(156))&127:((-87)|1)), Int8(Int8(UInt8(152)))) as Bool);
    var var2691 : Range<UInt32> = (UInt32(149)&127..=UInt32(Int16(59))&127:((-56)|1));
    (((if (var2084) { (var1650, var2336, [false, true, false, false, false, false, true, true, true, true], var622, ()) } else { var2534 } ) as Range<UInt32>) ?? try { // block id: 2647
        if (false) { var2651 } else { var2651 } ;
        (UInt32(161)&127..UInt32(149)&127:((-126)|1))
    } catch (e: Exception) { // block id: 2680
        var2683 *= Int16(-53);
        var2084 &&= var2084;
        var2691
    })
}

public func func2247(param2248 : Option<Array<Int16>>, param2249 : Interface1008, namedParam2250 ! : Option<Int64>) : Range<UInt32> { // block id: 2251
    match (((("R^bD##_R0p", ()), UInt8(54), var1147, (UInt32(199)&127..=UInt32(227)&127:(-22)|1))|>func2254)) {
        case caseVar2522 : Range<UInt64> => 
            var2084 &&= var622;
            var516 += (-70);
            Class1003()
        
        case _ => 
            var2534;
            if (var622) { Class1003() } else { Class1003() } 
        
    };
    var516 *= try { // block id: 2553
        var605
    } finally { // block id: 2555
        var2001 ||= true;
        var605 & var94
    };
    func2563(try { // block id: 2698
        [(UInt8(74)&127..UInt8(138)&127:(-110)|1), (UInt8(229)&127..=UInt8(199)&127:(-42)|1), (UInt8(8)&127..=UInt8(166)&127:110|1), (UInt8(55)&127..=UInt8(209)&127:(-25)|1), (UInt8(207)&127..=UInt8(128)&127:(-96)|1), (UInt8(53)&127..=UInt8(5)&127:(51|1)), var1891, (UInt8(243)&127..UInt8(224)&127:110|1), (UInt8(8)&127..UInt8(140)&127:(-116)|1), var1891]
    } catch (e: Exception) { // block id: 2713
        ();
        (Int32(67)&127..Int32(41)&127:(-15)|1);
        [var111, var111, (UInt8(149)&127..UInt8(23)&127:14|1), var111, (var443&127..=var443&127:(var94|1)), var1891, (UInt8(145)&127..=UInt8(151)&127:18|1), (UInt8(167)&127..UInt8(100)&127:9|1), (var443&127..=var443&127:(29|1)), var1891]
    })
}


public func func1033(param1034 : Array<(String, Unit)>) : (Array<Unit>, Int64, Unit, Float32, Range<UInt16>, Float32) { // block id: 1035
    let var1966 : (Option<Array<Int16>>, Float32) = (Option<Array<Int16>>.Some([Int16(93), Int16(UInt8(177)), Int16(UInt16(59)), Int16(2), Int16(Int16(70)), Int16(-15), Int16(-111), Int16(105), Int16(UInt16(183)), Int16(UInt8(198))]), Float32(Float32(-11.0)));
    func func1104() : Array<Bool> { // block id: 1105
        UInt8((var993|>func1109)) ** (try { // block id: 1955
            Class1003();
            var443
        } catch (e: Exception) { // block id: 1958
            if (var622) { (Option<Array<Int16>>.Some(var168), Float32(91.0)) } else { var1966 } ;
            UInt8(53)
        } & 3);
        func1989()
    }
;
    func1037(func1104())|>func1037;
    var2178;
    var var2737 : Int64 = 39;
    ([(), (), (), (), (), (), (), (), (), ()], match ((var2209, var94, (), Float32(-5.0), var2225, var2067)) {
        case (_,_,_ : UInt16,caseVar2230,_ : Bool,_) => 
            var755
        
        case caseVar2235 => 
            ();
            87
        
        case _ => 
            var516 >>= (((-69)) & 7);
            (-122)
        
    }, func1488(func2247(var160, Class1003(), namedParam2250 : Option<Int64>.Some(var2737))), match (try { // block id: 2741
            Class1003();
            var1558;
            UInt32(30)
        } finally { // block id: 2745
            (UInt8(19)&127..UInt8(32)&127:(9|1));
            var2751
        }) {
        case 245 | 175 | 249 => 
            if (var2084) { var2614 } else { var2614 } ;
            var2067 % Float32((Int32(Float32(90.0))) | 1)
        
        case _ : (Range<Int64>, Range<UInt8>, Float64, Array<Range<UInt8>>, Range<UInt8>, Range<UInt64>) => 
            ();
            ();
            var2067
        
        case _ : UInt64 => 
            var2466;
            var2067 - Float32(117.0)
        
        case caseVar2780 => 
            (var2784, (var443&127..=var443&127:(var605|1)), var1650, var2796, var1891, (UInt64(157)&127..=UInt64(24)&127:60|1));
            ();
            Float32(93.0)
        
        case _ => 
            var993 %= ((var993) | 1);
            var2067 % Float32((Int32(Float32(-32.0))) | 1)
        
    }, match ((var2817 ?? var993)) {
        case _ => 
            (UInt16(30)&127..=UInt16(249)&127:(-92)|1)
        
    }, Float32(match (var2826) {
        case _ => 
            var993 >>= ((Int32(21)) & 7);
            var2834;
            var2067
        
    }))
}

public func func1026(namedParam1027 ! : UInt32, optionalParam1028 ! : Array<Bool> = [false, true, true, true, true, false, true, true, false, true]) : (Array<Unit>, Int64, Unit, Float32, Range<UInt16>, Float32) { // block id: 1030
    ();
    var var2879 : (String, Unit) = ("<dr|hj]`^^", ());
    var var2925 : Unit = ();
    match (match (Int32(58)) {
            case -114 | -90 => 
                var2866 *= var2866;
                (-77);
                UInt16(63)
            
            case _ => 
                var1547
            
        }) {
        case 68 | 131 => 
            [var2879, ("""
hKPm_
0G0o+
""", var2466), ("""
bB/`*
}5WPo
""", ()), (var542, var987), var2879, (":N,$1Vmi!x", ()), var21, (var542, var987), (",vT?j(\"qKe", var1558), var21]
        
        case _ => 
            if (false) { var1404 } else { [var21, (var542, var2336), var2879, var21, var21, var21, (###"7-O$Y}.A_6"###, var2406), var21, ("5OBF?8S8W ", var2925), ("""
9KOwt
w9\\=y
""", var987)] } 
        
    }|>func1033
}

func func1020(param1021 : Aggregate935) : Aggregate935 { // block id: 1022
    func1026(namedParam1027 : UInt32(231) - var2751, optionalParam1028 : try { // block id: 2934
        ();
        var115
    } finally { // block id: 2937
        var115
    })[2];
    var var2948 : (Array<Range<UInt8>>, Class1003, Range<Int16>) = ([(UInt8(UInt8(189))&127..=UInt8(158)&127:(Int64(UInt64(0))|1)), (UInt8(152)&127..=UInt8(Int8(-67))&127:(Int64(UInt16(79))|1)), (UInt8(66)&127..=UInt8(192)&127:(83|1)), (UInt8(29)&127..=UInt8(121)&127:(-126)|1), (UInt8(198)&127..UInt8(144)&127:(Int64(UInt8(210))|1)), (UInt8(152)&127..UInt8(94)&127:((-46)|1)), (UInt8(108)&127..=UInt8(83)&127:80|1), (UInt8(237)&127..=UInt8(5)&127:(74|1)), (UInt8(UInt8(99))&127..=UInt8(84)&127:((-36)|1)), (UInt8(UInt8(29))&127..=UInt8(77)&127:(Int64(Int16(-51))|1))], Class1003(), (Int16(10)&127..Int16(-97)&127:(-81)|1));
    try { // block id: 2941
        if (true) { param1021 } else { param1021 } 
    } finally { // block id: 2946
        var2948;
        if (true) { // block id: 2997
            var2466
        };
        let var3001 : (Range<Int64>, Range<UInt8>, Float64, Array<Range<UInt8>>, Range<UInt8>, Range<UInt64>) = ((85&127..11&127:(-6)|1), (UInt8(240)&127..UInt8(79)&127:60|1), 126.0, [(UInt8(195)&127..UInt8(95)&127:(-23)|1), (UInt8(70)&127..=UInt8(UInt8(237))&127:((-114)|1)), (UInt8(214)&127..UInt8(172)&127:73|1), (UInt8(181)&127..UInt8(UInt8(144))&127:(Int64(UInt8(140))|1)), (UInt8(Int8(91))&127..UInt8(UInt8(98))&127:(24|1)), (UInt8(41)&127..UInt8(169)&127:(Int64(UInt64(225))|1)), (UInt8(30)&127..UInt8(201)&127:24|1), (UInt8(219)&127..=UInt8(35)&127:11|1), (UInt8(109)&127..UInt8(Int8(107))&127:((-13)|1)), (UInt8(Int8(9))&127..UInt8(Int8(-48))&127:(13|1))], (UInt8(Int8(76))&127..=UInt8(197)&127:((-77)|1)), (UInt64(249)&127..=UInt64(245)&127:16|1));
        match (var3001) {
            case _ => 
                param1021
            
        }
    }
}


public func func997(param998 : ((String, Unit), UInt8, Int8, Range<UInt32>)) : (String, Unit) { // block id: 999
    ();
    Class1003.var1014 &&= var622;
    let var3054 : (Aggregate935) -> Aggregate935 = func1020;
    var var3193 : (Option<Array<Int16>>, Interface1008, Option<Int64>) -> Range<UInt32> = func2247;
    var var3229 : ?(Option<Array<Int16>>, Float32) = Option<(Option<Array<Int16>>, Float32)>.Some((Option<Array<Int16>>.None, Float32(36.0)));
    if (match ((Aggregate935(namedParam3058 : Option<Bool>.Some(var3189), namedParam3059 : Class1003(), namedParam3060 : var3193)|>var3054)) {
        case _ : Array<Range<UInt8>> => 
            var3189
        
        case caseVar3201 => 
            !var3189
        
        case caseVar3207 => 
            var3211 = var2751;
            var1843;
            var1650 >= 44.0
        
        case _ => 
            var3189
        
    }) { match ((var3229 ?? var3235)) {
        case caseVar3272 => 
            ();
            ("u+ut+/ B#9", var1558)
        
        case _ => 
            var115;
            var987;
            var21
        
    } } else { try { // block id: 3284
        ();
        let var3306 : Range<UInt64> = (UInt64(53)&127..UInt64(253)&127:(Int64(Int8(88))|1));
        var var3347 : Bool = true;
        if (true) { ((UInt8(113)&127..=UInt8(32)&127:42|1), var542, [false, var3189, false, false, true, var622, var2084, var622, var622, true], ((), var1147, var3306, false, var542, UInt8(21)), var21, (var1547&127..=UInt16(192)&127:(var755|1)), true) } else { (var1891, "c*RL_<%q?I", [false, var2001, var2084, true, var2001, false, var2001, var2084, true, true], (var2336, Int8(-40), var3306, true, var542, var443), (var542, ()), (UInt16(254)&127..=UInt16(35)&127:(-61)|1), var3347) } ;
        var21
    } catch (_) { // block id: 3350
        var2466;
        ();
        var21
    } } 
}

public func func968(param969 : (Int32, (Range<UInt8>, String, Array<Bool>, (Unit, Int8, Range<UInt64>, Bool, String, UInt8), (String, Unit), Range<UInt16>, Bool), Rune) -> Range<UInt8>) : (String, Unit) { // block id: 974
    let var976 : Range<UInt32> = (UInt32(83)&127..UInt32(209)&127:33|1);
    var976;
    match ([(), (), (), (), (), (), (), (), (), ()][3]) {
        case caseVar984 => 
            var987
        
        case _ => 
            var993 |= Int32(-80)
        
    };
    let var3355 : (((String, Unit), UInt8, Int8, Range<UInt32>)) -> (String, Unit) = func997;
    var var3366 : UInt8 = UInt8(Int8(114));
    try { // block id: 3358
        if (true) { Option<Range<UInt8>>.Some(var111) } else { Option<Range<UInt8>>.Some((var3366&127..UInt8(61)&127:((-49)|1))) } ;
        if (var3189) { var1758 } else { (var21, UInt8(134), Int8(-98), var976) } 
    } catch (_) { // block id: 3379
        if (false) { var3383 } else { Option<Range<UInt32>>.Some((var2751&127..var3211&127:((-118)|1))) } ;
        let var3395 : UInt8 = UInt8(Int8(Int8(UInt8(229))));
        ((var542, var987), var3395, Int8(-85), (UInt32(163)&127..UInt32(220)&127:(-98)|1))
    }|>var3355
}

func func3403(param317 : Int32, namedParam318 : (Range<UInt8>, String, Array<Bool>, (Unit, Int8, Range<UInt64>, Bool, String, UInt8), (String, Unit), Range<UInt16>, Bool), namedParam319 : Rune) : Range<UInt8> { // block id: 320
    let var325 : Bool = (((UInt8(224)&127..=UInt8(18)&127:65|1), "MmJc jkgbB", [true, ([Int16(-84), Int16(-2), Int16(69), Int16(-58), Int16(66), Int16(-108), Int16(-45), Int16(45), Int16(-91), Int16(-61)] is Rune), true, ("""
Yvwc4
s:mN@
""" is UInt8), ((Int16(-77)&127..Int16(121)&127:(-73)|1) is Int16), (((UInt8(146)&127..=UInt8(110)&127:(85|1)), "rqz(S'>O'E", [false, false, false, true, false, false, true, false, false, false], ((), Int8(82), (UInt64(127)&127..UInt64(124)&127:((-113)|1)), false, "a{kVC?q1+Sj", UInt8(250)), ("ShyGO/SZd&", ()), (UInt16(188)&127..=UInt16(216)&127:((-72)|1)), false) is Int32), ('w' is Int8), false, (Int8(70) is Range<Int64>), ((UInt32(227)&127..UInt32(214)&127:(-47)|1) is Rune)], ((), Int8(Int8(-42)), (UInt64(160)&127..UInt64(177)&127:64|1), false, "6'#e'/W3pu", UInt8(Int8(-8))), ("""
hUx\\T
2NyBv
""", ()), (UInt16(84)&127..=UInt16(118)&127:(Int64(Int32(36))|1)), true) is Array<Range<UInt8>>);
    match (if (var325) { var160 } else { var160 } ) {
        case _ => 
            [(UInt8(60)&127..UInt8(104)&127:111|1), (UInt8(167)&127..=UInt8(103)&127:4|1), (UInt8(155)&127..UInt8(15)&127:58|1), (UInt8(114)&127..UInt8(246)&127:63|1), (UInt8(54)&127..=UInt8(57)&127:76|1), (UInt8(245)&127..UInt8(48)&127:(-128)|1), (UInt8(195)&127..UInt8(103)&127:(-81)|1), (UInt8(48)&127..=UInt8(181)&127:39|1), (UInt8(179)&127..UInt8(149)&127:(-3)|1), (UInt8(88)&127..=UInt8(195)&127:23|1)]
        
    }[5]
}








func func640(param641 : Unit) : Range<Int64> { // block id: 642
    let var679 : Bool = ((Int16(58)&127..Int16(6)&127:(43|1)) is Array<Bool>);
    let var706 : Array<Range<UInt32>> = [(UInt32(155)&127..UInt32(UInt8(UInt8(116)))&127:(Int64(UInt64(62))|1)), (UInt32(37)&127..UInt32(12)&127:3|1), (UInt32(45)&127..=UInt32(UInt32(35))&127:(Int64(Int32(UInt8(174)))|1)), (UInt32(181)&127..UInt32(166)&127:(-2)|1), (UInt32(145)&127..=UInt32(143)&127:(-83)|1), (UInt32(60)&127..=UInt32(67)&127:84|1), (UInt32(67)&127..=UInt32(Int32(85))&127:(114|1)), (UInt32(UInt32(Int16(25)))&127..UInt32(227)&127:(Int64(Int8(-92))|1)), (UInt32(UInt32(82))&127..=UInt32(218)&127:((-9)|1)), (UInt32(234)&127..UInt32(227)&127:(-33)|1)];
    let var3408 : (Int32, (Range<UInt8>, String, Array<Bool>, (Unit, Int8, Range<UInt64>, Bool, String, UInt8), (String, Unit), Range<UInt16>, Bool), Rune) -> Range<UInt8> = func3403;
    func func644(optionalParam645 ! : Range<UInt16> = (UInt16(130)&127..UInt16(Int8(-29))&127:(20|1)), optionalParam651 ! : Int16 = Int16(9), optionalParam653 ! : Range<Int16> = (Int16(124)&127..=Int16(Int16(77))&127:((-124)|1))) : Unit { // block id: 659
        let var800 : ((String, Unit), UInt8, Int8, Range<UInt32>) = (("""
A)7<-
\">'|,
""", ()), UInt8(241), Int8(UInt8(Int8(-121))), (UInt32(250)&127..UInt32(Int8(Int8(-95)))&127:(Int64(UInt8(215))|1)));
        let var856 : (String, Unit) = (###"sX[za{(2\\BR"###, ());
        let var939 : Aggregate935 = Aggregate935();
        let var3455 : UInt32 = UInt32(176);
        func func663(optionalParam664 ! : Range<Int32> = (Int32(Int8(98))&127..=Int32(Int8(Int8(110)))&127:(Int64(UInt64(166))|1))) : Array<Range<UInt32>> { // block id: 673
            let var869 : Array<(String, Unit)> = [("""
hWX*g
U';bU
""", ()), ("""
He[Iz
Bfb9H
""", ()), ("t1`KE$TR58", ()), ("y5V%7a{}23U", ()), ("\"~1Mhsv:]n", ()), ("""
x\"~tp
G9(Zx
""", ()), ("""
<nX9C
XXkk6
""", ()), ("Jn`aQa{e|Ix", ()), (###"EFoIG]63d<"###, ()), ("!zI\\Lb#0FZ", ())];
            let var908 : (Unit, Int8, Range<UInt64>, Bool, String, UInt8) = ((), Int8(24), (UInt64(228)&127..=UInt64(192)&127:(Int64(UInt16(UInt16(197)))|1)), true, """
L@DE[
?hw;k
""", UInt8(36));
            func func675() : Unit { // block id: 676
                var loopTimeVar687 : Int64 = 0;
                while ((var679) && loopTimeVar687 < 100 ) {
                    loopTimeVar687++;

                };
                func func691(optionalParam692 ! : Range<Int8> = (Int8(-56)&127..Int8(-77)&127:(-21)|1)) : (String, Unit) { // block id: 694
                    param641;
                    if (false) { [(UInt32(143)&127..=UInt32(12)&127:(-115)|1), (UInt32(24)&127..UInt32(92)&127:(-121)|1), (UInt32(240)&127..=UInt32(235)&127:99|1), (UInt32(218)&127..UInt32(99)&127:(-23)|1), (UInt32(37)&127..=UInt32(111)&127:(-39)|1), (UInt32(150)&127..UInt32(242)&127:96|1), (UInt32(152)&127..UInt32(65)&127:(-106)|1), (UInt32(147)&127..=UInt32(254)&127:15|1), (UInt32(78)&127..UInt32(233)&127:(-86)|1), (UInt32(159)&127..=UInt32(62)&127:110|1)] } else { var706 } [4]|>func697;
                    var var774 : Int32 = Int32(64);
                    var var779 : UInt32 = UInt32(121);
                    if ((Int8(UInt8(201)) <= match (Option<Range<UInt8>>.Some((UInt8(157)&127..=var443&127:(var755|1)))) {
                        case caseVar759 : Range<UInt8> => 
                            Int8(53)
                        
                        case caseVar764 : Option<Array<Int16>> => 
                            Int32(91);
                            Int8(67)
                        
                        case caseVar770 : Option<Range<UInt8>> => 
                            var774 **= (var774 & 3);
                            var779--;
                            Int8(49)
                        
                        case caseVar784 => 
                            var241 >> ((var241) & 7)
                        
                        case _ => 
                            var241 ** (var241 & 3)
                        
                    })) { (var800, var21, var542, (var516&127..=var516&127:((-116)|1)), var241)[0][0] } else { if (var622) { var829 } else { (var800, var856, var542, (125&127..(-8)&127:51|1), Int8(48)) } [1] } 
                }
;
                try { // block id: 689
                    func691(optionalParam692 : (Int8(118)&127..Int8(19)&127:64|1))
                } catch (e: Exception) { // block id: 865
                    var869[7]
                } finally { // block id: 902
                    func691()
                };
                try (resource = Class1003()) { // block id: 905
                    var908[0];
                    var loopTimeVar925 : Range<UInt64> = (UInt64(UInt32(42))&127..UInt64(105)&127:(Int64(UInt16(Int16(-33)))|1));
                    for (i in loopTimeVar925 where var679) {

                    }
                } finally { // block id: 933
                    var939.var942
                }
            }
;
            func675();
            try { // block id: 945
                var var952 : ?Unit = ((("u1tyg a{8y-", ()), UInt8(UInt8(62)), Int8(UInt8(231)), (UInt32(135)&127..=UInt32(121)&127:12|1)) as Unit);
                var952.getOrThrow();
                func func964(param965 : Int16) : (String, Unit) { // block id: 966
                    var3408|>func968
                }
;
                func964(var2683);
                let var3413 : ?(Array<Range<UInt8>>, Class1003, Range<Int16>) = Option<(Array<Range<UInt8>>, Class1003, Range<Int16>)>.None;
                match (var3413) {
                    case caseVar3417 : Option<Array<Int64>> => 
                        Class1003();
                        var706
                    
                    case _ : Array<Range<UInt8>> => 
                        var1147 & Int8(28);
                        ();
                        var706
                    
                    case _ : Array<Unit> => 
                        [var3434, (UInt32(231)&127..=UInt32(149)&127:(-5)|1), (UInt32(29)&127..UInt32(49)&127:(-57)|1), (UInt32(79)&127..UInt32(8)&127:(var755|1)), (UInt32(234)&127..UInt32(58)&127:((-92)|1)), (UInt32(134)&127..=UInt32(18)&127:94|1), (UInt32(100)&127..UInt32(46)&127:90|1), (UInt32(137)&127..=UInt32(247)&127:(var94|1)), (var3211&127..=var3455&127:(var516|1)), (UInt32(148)&127..=UInt32(128)&127:88|1)]
                    
                    case _ => 
                        var2336;
                        var706
                    
                    case _ => 
                        var987;
                        ();
                        [(UInt32(184)&127..UInt32(227)&127:116|1), (UInt32(240)&127..UInt32(188)&127:(-57)|1), (UInt32(50)&127..UInt32(100)&127:(-119)|1), (UInt32(237)&127..=UInt32(55)&127:54|1), (UInt32(35)&127..UInt32(166)&127:(-65)|1), (UInt32(5)&127..=UInt32(200)&127:(-113)|1), (UInt32(131)&127..=UInt32(66)&127:(-18)|1), (UInt32(216)&127..=UInt32(94)&127:(-32)|1), (UInt32(74)&127..UInt32(31)&127:45|1), (UInt32(131)&127..=UInt32(3)&127:(-58)|1)]
                    
                }
            } finally { // block id: 3469
                var loopTimeVar3474 : Int64 = 0;
                do {
                    loopTimeVar3474++;

                } while ((false) && loopTimeVar3474 < 100 ) ;
                var706
            }
        }
;
        func663(optionalParam664 : (Option<Range<Int32>>.Some((Int32(-16)&127..var993&127:(31|1))) ?? (Int32(-67)&127..Int32(32)&127:(var516|1))))[3];
        try { // block id: 3492
            Int64(var2683);
            param641;
            (var1147&127..=var1147&127:((-99)|1))
        } catch (e: Exception) { // block id: 3500
            match (var1323) {
                case _ => 
                    Option<Range<Int32>>.None;
                    var1275
                
            }
        };
        var3509 -= try { // block id: 3513
            ();
            var3509
        } finally { // block id: 3516
            var3509 * var1650
        }
    }
;
    let var3532 : Unit = ();
    let var3542 : Range<UInt64> = (UInt64(UInt8(174))&127..UInt64(UInt16(81))&127:((-28)|1));
    func644(optionalParam653 : (var2683&127..var2683&127:(if (false) { // block id: 3525
        var1558;
        var1558;
        (-54)
    } else if (true) { // block id: 3530
        var3532;
        (var111, var542, [true, true, false, true, false, false, true, false, false, false], ((), Int8(23), var3542, true, var542, var443), var21, (UInt16(121)&127..UInt16(119)&127:(-12)|1), true);
        59
    } else { // block id: 3556
        var2466;
        Option<Range<UInt8>>.Some((UInt8(47)&127..UInt8(123)&127:118|1));
        (-104) / ((var755) | 1)
    }|1)));
    var var3914 : Interface1006 = Class1003((UInt16(244)&127..=UInt16(58)&127:(-117)|1), (UInt16(151)&127..UInt16(243)&127:((-9)|1)), (), optionalParam3622 : Option<Unit>.Some(()));
    match (try { // block id: 3565
            Option<(Float64, Unit, Array<Bool>, Bool, Unit)>.Some(var2534);
            var1547 % ((UInt16(22)) | 1);
            if (var3189) { var3574 } else { var3574 } 
        } catch (e: Exception) { // block id: 3612
            let var3877 : Range<Int16> = (Int16(37)&127..Int16(-20)&127:(83|1));
            if (true) { ([(UInt8(189)&127..UInt8(73)&127:(-39)|1), (UInt8(83)&127..UInt8(89)&127:(-95)|1), (UInt8(2)&127..=UInt8(11)&127:(-17)|1), (UInt8(65)&127..UInt8(208)&127:6|1), (UInt8(182)&127..UInt8(115)&127:61|1), (UInt8(2)&127..=UInt8(47)&127:(-116)|1), (UInt8(81)&127..=UInt8(58)&127:29|1), (UInt8(96)&127..UInt8(125)&127:14|1), (UInt8(14)&127..UInt8(80)&127:108|1), (UInt8(0)&127..=UInt8(172)&127:108|1)], Class1003(var2225, var2225, var987), var3877) } else { var3574 } 
        } finally { // block id: 3883
            ();
            var3574
        }) {
        case _ : Interface1009 => 
            [false, true, true, false, false, false, false, true, true, false];
            var443 += UInt8(28);
            var var3896 : Interface1006 = Class1003();
            if (false) { var3896 } else { var3899 } 
        
        case _ => 
            var1359;
            Class1003(var2225, (UInt16(252)&127..UInt16(215)&127:109|1), var2406, optionalParam3622 : Option<Unit>.None)
        
        case _ : Interface1009 => 
            var3914
        
        case _ : Interface1007 => 
            Class1003(var2534)
        
        case _ => 
            var1275;
            Class1003((90.0, (), [false, false, true, true, false, false, false, true, true, false], false, var3532))
        
    };
    var var4063 : Option<Range<Int64>> = Option<Range<Int64>>.None;
    try { // block id: 4056
        (var4063 ?? (70&127..=var516&127:(var516|1)))
    } finally { // block id: 4069
        (Option<Range<Int64>>.None ?? var589)
    }
}

func func103() : Array<Bool> { // block id: 104
    let var118 : (Unit, Int8, Range<UInt64>, Bool, String, UInt8) = ((), Int8(Int8(UInt8(Int8(7)))), (UInt64(48)&127..=UInt64(UInt64(UInt8(88)))&127:(Int64(Int32(-91))|1)), ((UInt64(62)&127..=UInt64(Int32(34))&127:(Int64(UInt32(224))|1)) is Range<Int64>), """
J*%1M
=YHi;
""", UInt8(86));
    var var145 : UInt16 = UInt16(82);
    (var111, """
~]z}D
EBX`.
""", var115, var118, var21, (UInt16(173)&127..var145&127:(var94|1)), false)[3][2];
    Int16((var160 ?? var168)[4]);
    let var263 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    let var271 : Bool = true;
    let var430 : Rune = '9';
    let var560 : Int8 = Int8(7);
    let var564 : UInt64 = UInt64(56);
    func func254(param255 : UInt16, param256 : Int8, namedParam257 ! : Range<UInt64>, namedParam258 ! : UInt32) : Range<UInt8> { // block id: 259
        var263[1];
        var var276 : Bool = ((Int16(-4)&127..Int16(-120)&127:20|1) is Range<Int64>);
        try (resource = Class1003()) { // block id: 267

        } catch (e: Exception) { // block id: 268
            var loopTimeVar289 : Int64 = 0;
            do {
                loopTimeVar289++;
                var276 &&= var276;
                var var282 : UInt64 = UInt64(UInt64(UInt64(UInt64(227))));
                var282 ^= UInt64(252)
            } while ((var271) && loopTimeVar289 < 100 ) 
        };
        let var311 : UInt8 = UInt8(209);
        var var408 : (Range<UInt8>, String, Array<Bool>, (Unit, Int8, Range<UInt64>, Bool, String, UInt8), (String, Unit), Range<UInt16>, Bool) = ((UInt8(249)&127..=UInt8(96)&127:(-105)|1), "|f2+0MTTY5", [true, false, false, false, false, false, true, true, false, false], ((), Int8(UInt8(UInt8(174))), (UInt64(150)&127..=UInt64(5)&127:(-84)|1), (Int8(Int8(109)) is Range<Int8>), "PulT$,enBj", UInt8(253)), (###"[VB>]dR'/0"###, ()), (UInt16(83)&127..UInt16(216)&127:53|1), true);
        var var557 : Unit = ();
        [(UInt8(146)&127..=UInt8(29)&127:124|1), [(UInt8(69)&127..UInt8(222)&127:126|1), (UInt8(30)&127..=UInt8(227)&127:(126|1)), var111, (UInt8(152)&127..=UInt8(128)&127:53|1), (UInt8(133)&127..UInt8(223)&127:108|1), (UInt8(102)&127..UInt8(59)&127:86|1), var111, (UInt8(120)&127..UInt8(147)&127:(-81)|1), var111, (UInt8(198)&127..var311&127:(var94|1))][2], func1479(Int32(27), namedParam318 : var408, namedParam319 : var430), [(UInt8(171)&127..UInt8(208)&127:88|1), (UInt8(25)&127..=UInt8(86)&127:(-57)|1), (var311&127..=var311&127:(var94|1)), (UInt8(96)&127..=var443&127:(var94|1)), (UInt8(55)&127..var311&127:(var94|1)), (UInt8(69)&127..=UInt8(79)&127:(var94|1)), (UInt8(123)&127..UInt8(231)&127:((-87)|1)), var111, (UInt8(232)&127..UInt8(106)&127:(-15)|1), (UInt8(44)&127..var443&127:((-17)|1))][7], ((124&127..=(-46)&127:(3|1)), (var443&127..=var443&127:((-103)|1)), (-113.0), [var111, (UInt8(63)&127..=var311&127:((-81)|1)), var111, (var311&127..=UInt8(165)&127:(var94|1)), (UInt8(43)&127..UInt8(60)&127:(-72)|1), (UInt8(70)&127..var311&127:(69|1)), var111, (UInt8(19)&127..UInt8(237)&127:37|1), (UInt8(166)&127..UInt8(119)&127:35|1), (UInt8(238)&127..var443&127:(57|1))], var111, (UInt64(104)&127..UInt64(76)&127:(-70)|1))[1], try { // block id: 504
            var168;
            (var443&127..UInt8(124)&127:(var94|1))
        } catch (_) { // block id: 510
            var var512 : String = """
*36MY
Y00cW
""";
            var512;
            var516 |= var94;
            var111
        }, (var443&127..UInt8(80)&127:(12|1)), (var530 ?? (UInt8(132)&127..=UInt8(200)&127:(-62)|1)), func1479(Int32(-62), namedParam318 : ((var311&127..var443&127:(4|1)), var542, [var271, var271, false, true, true, var271, false, false, false, true], (var557, var560, (var564&127..=var564&127:(69|1)), var271, " @qO|I/C$`", UInt8(233)), var21, (param255&127..=param255&127:(var516|1)), true), namedParam319 : var430), try { // block id: 579
            if (var276) { (UInt8(96)&127..var311&127:(var516|1)) } else { var111 } 
        } catch (e: Exception) { // block id: 587
            var589;
            ();
            (UInt8(153)&127..=var311&127:((-125)|1))
        } finally { // block id: 596
            ();
            if (false) { (UInt16(214)&127..UInt16(4)&127:(-125)|1) } else { (UInt16(76)&127..=param255&127:(var605|1)) } ;
            (var443&127..var443&127:(var94|1))
        }][2]
    }
;
    var var4074 : (Unit) -> Range<Int64> = func640;
    try { // block id: 192
        var var196 : Bool = ([Int16(-56), Int16(-114), Int16(Int16(-40)), Int16(UInt8(77)), Int16(UInt16(Int16(121))), Int16(Int16(48)), Int16(-30), Int16(96), Int16(-100), Int16(-2)] is UInt8);
        let var250 : Int8 = Int8(UInt8(148));
        match ([var196, var196, true, true, var196, var196, false, true, false, var196]) {
            case caseVar225 => 
                var var229 : Int8 = Int8(109);
                var229 | Int8(-68)
            
            case caseVar234 : (String, Unit) => 
                Int8(-26)
            
            case _ : Range<UInt64> => 
                var241
            
            case _ => 
                -86;
                var250
            
        };
        func254(var145, var241, namedParam257 : (var564&127..var564&127:(1|1)), namedParam258 : UInt32(216));
        var var629 : Bool = (66 is Range<Int64>);
        [var622, true, var271, var629, var196, var622, var629, var622, false, false]
    } finally { // block id: 638
        var987|>var4074;
        [false, false, true, false, false, true, true, true, false, true]
    }
}

public func func61(param62 : (String, Unit)) : Bool { // block id: 63
    func103()|>func65
}

main(): Int64 {
    try {
        if (true) { // block id: 9
            var var11 : (String, Unit) = (###"!'mIQ-nI<^"###, ());
            var11
        } else if (false) { // block id: 16
            UInt16(221);
            if (false) { var21 } else { ("""
|]WtJ
4:WkK
""", ()) } 
        } else { // block id: 28
            var21
        }[1];
        var var4079 : ((String, Unit)) -> Bool = func61;
        if ([true, false, true, false, false, true, false, false, false, false][3]) { // block id: 44
            var var47 : Int32 = Int32(Int8(UInt8(138)));
            var47 ^= var47;
            var var54 : UInt16 = UInt16(UInt8(Int8(UInt8(Int8(115)))));
            var54--
        } else if ((("\"o!atbec8F", ())|>var4079)) { // block id: 4084
            ()
        };
        (-118)
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var94*var94), 64)
        crccheck.updateBuffer(UInt64(var241*var241), 64)
        crccheck.updateBuffer(UInt64(var443*var443), 64)
        crccheck.updateBuffer(UInt64(var516*var516), 64)
        crccheck.updateBuffer(UInt64(var605*var605), 64)
        crccheck.updateBuffer(UInt64(var755*var755), 64)
        crccheck.updateBuffer(UInt64(var993*var993), 64)
        crccheck.updateBuffer(UInt64(var1147*var1147), 64)
        crccheck.updateBuffer(UInt64(var1547*var1547), 64)
        crccheck.updateBuffer(UInt64(var2683*var2683), 64)
        crccheck.updateBuffer(UInt64(var2751*var2751), 64)
        crccheck.updateBuffer(UInt64(var3130*var3130), 64)
        crccheck.updateBuffer(UInt64(var3211*var3211), 64)
        crccheck.updateBuffer(UInt64(var3835*var3835), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_unexpected_declaration_in_scope
// ASSERT: scan parse_expected_character
// ASSERT: scan parse_expected_left_brace
// ASSERT: scan parse_expected_expr_or_decl_in
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_expected_case

/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 