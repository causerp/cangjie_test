/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output


public let var20 : UInt16 = UInt16(Int16(-87))
var var25 : Bool = (Float32(-73.0) is Option<Rune>)
public let var40 : Option<Rune> = (Float64(Float64(Float32(-30.0))) as Rune)
var var387 : UInt64 = UInt64(Int64(71))
public var var411 : Bool = false
var var470 : Range<Int16> = (Int16(-112)&127..Int16(4)&127:(-77)|1)
var var480 : Int16 = Int16(Int8(Int8(13)))
var var494 : Bool = true
public var var499 : ?Int16 = (";ya{Y)GApYf" as Int16)
var var511 : UInt64 = UInt64(215)
public var var559 : Bool = (Float32(Float32(Float32(-29.0))) is String)
public var var629 : Float32 = Float32(Float32(-125.0))
public let var659 : Unit = ()
let var675 : Range<Int64> = ((-16)&127..=115&127:110|1)
public var var703 : UInt8 = UInt8(178)
public let var732 : Range<UInt16> = (UInt16(236)&127..=UInt16(203)&127:(-76)|1)
public var var800 : Bool = false
let var809 : Array<Bool> = [false, false, false, false, false, true, true, false, false, true]
public let var832 : Int64 = Int64(Int32(-102))
public let var836 : Range<UInt32> = (UInt32(195)&127..=UInt32(191)&127:(Int64(UInt16(134))|1))
public let var994 : Class296 = Class296()
public var var1055 : Int32 = Int32(UInt32(UInt16(UInt8(Int8(7)))))
public var var1091 : ?Int16 = (Option<Unit>.None as Int16)
public let var1194 : Bool = true
public var var1208 : (Range<Int8>, Bool, Bool, Int16, Float32) = ((Int8(UInt8(104))&127..Int8(Int8(Int8(82)))&127:(Int64(UInt16(UInt8(208)))|1)), ((UInt32(120)&127..=UInt32(131)&127:(Int64(UInt32(21))|1)) is Option<(String, Int64, Int8, Rune, Option<UInt8>, Bool)>), true, Int16(UInt16(36)), Float32(67.0))
public var var1269 : UInt32 = UInt32(29)
let var1310 : (Range<Int64>, Array<Range<UInt32>>, Range<Int8>, (String, Range<UInt16>, Aggregate449, Int16), Int8) = ((Int64(UInt32(UInt8(84)))&127..=Int64(UInt8(UInt8(212)))&127:((-96)|1)), [(UInt32(118)&127..UInt32(235)&127:(-9)|1), (UInt32(2)&127..=UInt32(128)&127:(-30)|1), (UInt32(213)&127..UInt32(185)&127:99|1), (UInt32(223)&127..UInt32(182)&127:110|1), (UInt32(194)&127..UInt32(82)&127:(-28)|1), (UInt32(91)&127..=UInt32(248)&127:98|1), (UInt32(243)&127..=UInt32(129)&127:(-60)|1), (UInt32(131)&127..UInt32(248)&127:21|1), (UInt32(134)&127..=UInt32(28)&127:21|1), (UInt32(177)&127..UInt32(133)&127:43|1)], (Int8(10)&127..=Int8(73)&127:(-97)|1), ("hWykP_;'JA", (UInt16(213)&127..=UInt16(170)&127:((-73)|1)), Aggregate449(), Int16(UInt8(Int8(-93)))), Int8(-79))
public var var1465 : Int64 = Int64(Int8(Int8(79)))
public var var1595 : UInt32 = UInt32(11)
let var1609 : Array<Option<Int16>> = Array<Option<Int16>>(10){ i => Option<Int16>.None }
public var var1801 : Int8 = Int8(Int8(UInt8(Int8(75))))
var var1810 : (UInt32, Unit, Class296) = (UInt32(UInt8(UInt8(131))), (), Class296())
public let var2006 : String = """
G3\"[F
 ~K%r
"""
var var2139 : Float64 = Float64(12.0)
public var var2183 : ?Unit = Option<Unit>.None
public var var2284 : Range<Int8> = (Int8(-54)&127..Int8(-58)&127:(-118)|1)
public let var2489 : ?(String, Int64, Int8, Rune, Option<UInt8>, Bool) = Option<(String, Int64, Int8, Rune, Option<UInt8>, Bool)>.None
public let var2512 : ??(String, Int64, Int8, Rune, Option<UInt8>, Bool) = (Option<Class296>.None as Option<(String, Int64, Int8, Rune, Option<UInt8>, Bool)>)
let var2588 : Option<Bool> = Option<Bool>.None
let var2679 : (String, Range<UInt16>, Aggregate449, Int16) = ("Vma{G-x+8hr", (UInt16(50)&127..=UInt16(200)&127:118|1), Aggregate449(), Int16(Int8(116)))
public var var2696 : Int64 = Int64(Int64(Int32(UInt16(Int8(-18)))))
let var2737 : ?Array<Option<(String, Int64, Int8, Rune, Option<UInt8>, Bool)>> = (((Class296() as Int64) as (String, Int64, Int8, Rune, Option<UInt8>, Bool)) as Array<Option<(String, Int64, Int8, Rune, Option<UInt8>, Bool)>>)
public var var2759 : Bool = (((UInt32(155)&127..=UInt32(6)&127:71|1), (Int32(60)&127..Int32(-80)&127:52|1)) is (Enum1368, Array<Int8>, Array<UInt32>, (Range<Int8>, Bool, Bool, Int16, Float32), (Range<Int8>, Bool, Bool, Int16, Float32)))
public let var2771 : (String, Int64, Int8, Rune, Option<UInt8>, Bool) = ("&GnN]V#IgE", 122, Int8(UInt8(UInt8(131))), 'K', Option<UInt8>.None, ("""
5/}d5
G+Ogs
""" is Option<Unit>))




public open class Class296 <: Resource {
    public init() { // block id: 298

    }
;
    var var303 : Int32 = Int32(104);
    var var997 : Int64 = 64;
    public static var var1511 : (Range<Int8>, Bool, Bool, Int16, Float32) = ((Int8(30)&127..=Int8(-117)&127:(81|1)), false, true, Int16(99), Float32(94.0))
    public func isClosed(): Bool { return false }
    public func close(): Unit {}
}


public struct Aggregate449 {
    public init() { // block id: 451

    }
;
    static let var454 : Float64 = (-2.0);
    public static var var906 : ?Unit = Option<Unit>.None;
    static let var955 : (Range<Int8>, Bool, Bool, Int16, Float32) = ((Int8(-114)&127..=Int8(102)&127:(-121)|1), true, false, Int16(57), Float32(-95.0));
    private static let var963 : ?Range<UInt8> = Option<Range<UInt8>>.None;
    static var var968 : Range<UInt64> = (UInt64(19)&127..UInt64(117)&127:(26|1));
    public init(param897 : Range<Int8>, param898 : UInt64) { // block id: 899
        var var928 : Int8 = Int8(-118);
        var loopTimeVar930 : Range<UInt64> = (UInt64(UInt16(UInt16(UInt8(76))))&127..UInt64(UInt32(51))&127:(34|1));
        (var906 ?? for (i in loopTimeVar930 where match {
            case var559 => 
            var480--;
            true
            case _ => 
            ();
            var387 < UInt64(90)
        }) {
            var var923 : UInt32 = UInt32(54);
            var923--;
            Int8(19) + var928
        });
        (if (var411) { try { // block id: 947
            var var950 : UInt16 = UInt16(UInt16(191));
            var950 &= UInt16(51);
            var955;
            var963
        } finally { // block id: 965
            (Int32(116)&127..Int32(110)&127:(-21)|1);
            var968;
            Option<Range<UInt8>>.Some((UInt8(164)&127..=var703&127:(var832|1)))
        } } else { var963 }  ?? ((Int16(-87) as Range<UInt8>) ?? (UInt8(180)&127..=UInt8(47)&127:97|1)))
    }
;
    static let var2062 : Array<UInt32> = Array<UInt32>(10){ i => UInt32(74) };
    private static var var2123 : ?UInt64 = Option<UInt64>.None;
    private static var var2143 : Float64 = (-21.0);
    private static let var2227 : Range<UInt8> = (UInt8(229)&127..=UInt8(135)&127:(105|1));
    public init(namedParam2014 ! : (UInt64) -> Option<Int16>, namedParam2017 ! : Float64, namedParam2018 ! : Option<Array<Int8>>, optionalParam2019 ! : UInt32 = UInt32(Int16(11))) { // block id: 2022
        try { // block id: 2024
            try { // block id: 2026
                var963;
                var1801 **= (Int8(-94) & 3);
                -var1269
            } catch (e: Exception) { // block id: 2033
                var659;
                var1269
            } finally { // block id: 2036
                var480 -= Int16(-108);
                var703;
                UInt32(234)
            };
            Option<Range<Int32>>.None;
            (var836, (var1055&127..=Int32(121)&127:((-104)|1)))[0]
        } finally { // block id: 2052
            let var2058 : Range<Int32> = (Int32(56)&127..=Int32(14)&127:(-45)|1);
            (var809, var2058, (UInt64(7)&127..=UInt64(10)&127:41|1), var2062, ((Int8(91)&127..Int8(-16)&127:11|1), var494, true, Int16(98), var629), [UInt32(230), UInt32(44), UInt32(71), UInt32(127), UInt32(180), UInt32(156), UInt32(223), UInt32(73), UInt32(87), UInt32(18)], var1595, var1801)[3];
            (Option<Range<UInt32>>.Some(var836) ?? var836)
        };
        let var2097 : Array<Int16> = Array<Int16>(10){ i => Int16(-35) };
        var var2174 : Unit = ();
        (match (var2097[2]) {
            case caseVar2120 => 
                var2123
            
            case -17 | -33 | -51 => 
                ();
                var659;
                if (var559) { Option<UInt64>.None } else { Option<UInt64>.None } 
            
            case -94 => 
                var2139 -= var2143;
                var1055++;
                if (true) { var2123 } else { Option<UInt64>.Some(UInt64(72)) } 
            
            case _ => 
                var511 |= var387;
                var var2160 : ?UInt64 = Option<UInt64>.Some(UInt64(7));
                if (false) { var2160 } else { var2123 } 
            
        }, UInt32(214), (match ((UInt64(39)&127..=UInt64(119)&127:(-111)|1)) {
            case caseVar2171 => 
                var2174;
                var2123;
                Option<Unit>.Some(var659)
            
            case _ : Option<UInt64> => 
                var2183
            
            case caseVar2187 => 
                UInt16(35) >> ((UInt16(87)) & 7);
                Option<Unit>.Some(var2174)
            
            case caseVar2196 => 
                var2174;
                if (var494) { Option<Unit>.Some(var659) } else { var2183 } 
            
            case _ => 
                var1609;
                ();
                var2183
            
        } ?? match ((UInt64(235)&127..=UInt64(142)&127:(-6)|1)) {
            case caseVar2213 : Option<Range<UInt8>> => 
                (Int32(-68)&127..=Int32(113)&127:63|1);
                var var2217 : Unit = ();
                var2217
            
            case _ : Range<Int16> => 
                var var2223 : ?Class296 = Option<Class296>.Some(Class296());
                var2223;
                var2227;
                var2174
            
            case _ => 
                var659;
                ()
            
        }));
        try { // block id: 2238
            if (false) { var906 } else { var2183 } 
        } catch (e: Exception) { // block id: 2243
            var2183
        }
    }
;
    public init(param2316 : String, param2317 : Array<Int16>) { // block id: 2318
        var659;
        var1465 |= match {
            case if (true) { // block id: 2325
            (UInt16(105)&127..UInt16(218)&127:10|1);
            Option<UInt64>.Some(UInt64(202));
            var480 >= Int16(5)
        } else if (true) { // block id: 2333
            var659;
            [var1194, false, var559, false, true, false, var800, true, false, true];
            var1194
        } else { // block id: 2347
            var703 &= UInt8(67);
            true && false
        } => 
            ();
            var1465
            case _ => 
            var1465 << ((var832) & 7)
        }
    }

}

func func463(param464 : Aggregate449) : Range<Int16> { // block id: 465
    let var467 : String = ###"z?Q&}4l:w1"###;
    var467;
    var470
}

public func func473(param474 : Class296) : Range<Int16> { // block id: 475
    match (match (Option<Int16>.Some(var480)) {
            case caseVar486 : String => 
                if (true) { ###"4!vEb,tE_K"### } else { ###"Lq&?v|yX'A"### } ;
                if (var494) { Option<Int16>.Some(Int16(103)) } else { var499 } 
            
            case _ => 
                var499
            
        }) {
        case caseVar507 => 
            var511 **= (var387 & 3);
            [UInt32(60), UInt32(85), UInt32(132), UInt32(125), UInt32(237), UInt32(167), UInt32(48), UInt32(71), UInt32(187), UInt32(27)];
            if (true) { var470 } else { (Int16(88)&127..=Int16(103)&127:81|1) } 
        
        case _ => 
            (Int16(-122)&127..Int16(124)&127:92|1)
        
        case caseVar525 : Range<UInt32> => 
            let var529 : Int16 = Int16(UInt16(24));
            (var529&127..=var480&127:((-45)|1))
        
        case _ => 
            (Int16(-87)&127..Int16(60)&127:(-26)|1)
        
        case _ => 
            var470
        
    }
}


public func func542(param543 : Aggregate449) : Class296 { // block id: 544
    let var549 : Bool = ('p' is String);
    let var570 : Int64 = Int64(22);
    func func575(namedParam576 ! : Int16, namedParam577 ! : Int64) : Class296 { // block id: 578
        func func597(param598 : Range<Int64>) : Class296 { // block id: 599
            var var667 : Int8 = Int8(22);
            if (match ([Option<Int16>.Some(Int16(-115)), Option<Int16>.None, Option<Int16>.Some(namedParam576), Option<Int16>.None, var499, Option<Int16>.None, Option<Int16>.None, Option<Int16>.Some(namedParam576), Option<Int16>.Some(var480), var499][4]) {
                case caseVar622 : Int16 => 
                    ();
                    var559
                
                case _ => 
                    var629;
                    var494 ||= var411;
                    var411
                
            }) { // block id: 636
                var loopTimeVar641 : Range<UInt64> = (UInt64(UInt8(UInt8(Int8(-71))))&127..UInt64(UInt16(Int8(Int8(-127))))&127:((-119)|1));
                for (i in loopTimeVar641 where var494) {
                    ()
                };
                match (var499) {
                    case caseVar656 : Int8 => 
                        var659
                    
                    case _ => 
                        var511 %= ((var511) | 1);
                        var667;
                        var659
                    
                }
            };
            UInt8(253);
            Class296()
        }
;
        (try { // block id: 585
            ();
            let var590 : ?Class296 = Option<Class296>.Some(Class296());
            if (var549) { var590 } else { var590 } 
        } finally { // block id: 594
            Option<Class296>.None
        } ?? func597(if (var411) { var675 } else { (100&127..=62&127:20|1) } ))
    }
;
    var loopTimeVar698 : Int64 = 0;
    do {
        loopTimeVar698++;
        func575(namedParam576 : var480, namedParam577 : 4);
        if (var494) { // block id: 682
            [UInt32(51), UInt32(94), UInt32(68), UInt32(214), UInt32(58), UInt32(179), UInt32(241), UInt32(78), UInt32(2), UInt32(160)];
            !var494
        } else if (var549) { // block id: 687
            var411;
            -60;
            var549
        } else { // block id: 692
            ();
            true || var494
        }
    } while ((if (match {
        case var549 => 
        var549
        case _ => 
        var var556 : Unit = ();
        var556;
        var559
    }) { // block id: 564
        false
    } else { // block id: 566
        (-11) <= var570
    }) && loopTimeVar698 < 100 ) ;
    if (if ((var703 is Unit)) { // block id: 705
        false
    } else if (try { // block id: 708
        var549
    } catch (e: Exception) { // block id: 710
        param543;
        var629 != Float32(37.0)
    } finally { // block id: 715
        if (var411) { Option<Class296>.Some(Class296()) } else { Option<Class296>.None } ;
        UInt32(131);
        false
    }) { // block id: 723
        var570 >= 12
    } else { // block id: 727
        if (false) { (UInt16(38)&127..UInt16(115)&127:119|1) } else { var732 } ;
        var549
    }) { // block id: 735
        let var739 : (Range<Int8>, Bool, Bool, Int16, Float32) = ((Int8(-67)&127..=Int8(-70)&127:11|1), (Option<Class296>.Some(Class296()) is Range<Int64>), false, Int16(Int16(UInt16(244))), Float32(Float32(Float32(Float32(30.0)))));
        var739[0];
        var659
    };
    Class296()
}






func func1136(param1137 : Range<Int64>) : (Range<Int8>, Bool, Bool, Int16, Float32) { // block id: 1138
    var var1143 : (Range<Int32>, String, Range<Int16>, Float64, Option<Range<UInt8>>, Range<Int16>) = ((Int32(95)&127..=Int32(-57)&127:((-76)|1)), ###"/h\\sF+gafg"###, (Int16(UInt8(108))&127..Int16(UInt8(198))&127:(Int64(Int16(82))|1)), Float64(Float32(Float32(Float32(57.0)))), Option<Range<UInt8>>.Some((UInt8(Int8(88))&127..UInt8(UInt8(238))&127:(Int64(Int16(48))|1))), (Int16(45)&127..=Int16(Int8(-115))&127:(Int64(UInt8(229))|1)));
    var var1203 : UInt8 = UInt8(Int8(Int8(3)));
    match (var1143[4]) {
        case caseVar1178 => 
            var480 + Int16(-62);
            var659
        
        case _ => 
            [true, true, var494, var559, false, true, var1194, var494, var494, var559];
            var809;
            var703 ^= var1203
        
    };
    var1208
}

public func func1257(param1258 : UInt8) : Aggregate449 { // block id: 1259
    let var1292 : Int8 = Int8(Int8(29));
    try { // block id: 1265
        ();
        var1269 = UInt32(184);
        let var1283 : Aggregate449 = Aggregate449();
        var var1287 : Int8 = Int8(-92);
        (((-21)&127..=(-7)&127:(var832|1)), [(UInt32(112)&127..UInt32(180)&127:69|1), (UInt32(148)&127..UInt32(72)&127:(-70)|1), (UInt32(89)&127..=UInt32(142)&127:(-49)|1), (UInt32(218)&127..=UInt32(177)&127:60|1), (UInt32(108)&127..=UInt32(156)&127:(-84)|1), (UInt32(147)&127..UInt32(83)&127:(-100)|1), (UInt32(232)&127..=UInt32(185)&127:(-124)|1), (UInt32(166)&127..UInt32(118)&127:(-108)|1), (UInt32(24)&127..=UInt32(206)&127:(-38)|1), (UInt32(188)&127..=UInt32(200)&127:91|1)], (Int8(-92)&127..=Int8(34)&127:90|1), ("Ja{,j`tB'*d", var732, var1283, Int16(-44)), var1287)
    } finally { // block id: 1289
        (var1292&127..=var1292&127:(87|1));
        let var1300 : ?Range<Int32> = ((Int64(Int8(-8))&127..(-17)&127:(Int64(UInt64(120))|1)) as Range<Int32>);
        if (false) { var1300 } else { Option<Range<Int32>>.None } ;
        var1310
    }[3][2]
}

public enum Enum1368 {
    defaultValue |
    enumValue1529(UInt64, Int8) |
    enumValue1710
}

public func func1136(param988 : Bool, param989 : Option<Int16>) : Int64 { // block id: 990
    var994.var997--;
    let var1131 : ?Int64 = Option<Int64>.None;
    let var1359 : UInt8 = UInt8(Int8(Int8(UInt8(UInt8(201)))));
    let var1373 : (Enum1368, Array<Int8>, Array<UInt32>, (Range<Int8>, Bool, Bool, Int16, Float32), (Range<Int8>, Bool, Bool, Int16, Float32)) = (Enum1368.defaultValue, [Int8(-108), Int8(105), Int8(-85), Int8(-98), Int8(69), Int8(63), Int8(109), Int8(-11), Int8(-80), Int8(18)], [UInt32(Int16(78)), UInt32(Int16(70)), UInt32(Int16(102)), UInt32(15), UInt32(252), UInt32(248), UInt32(Int16(35)), UInt32(182), UInt32(Int32(115)), UInt32(UInt32(UInt8(245)))], ((Int8(81)&127..=Int8(UInt8(59))&127:(Int64(Int16(-20))|1)), (Int32(UInt8(140)) is Enum1368), (Float32(Float32(-95.0)) is Aggregate449), Int16(Int16(UInt8(223))), Float32(99.0)), ((Int8(111)&127..Int8(52)&127:(Int64(Int32(-71))|1)), true, (((Int32(30)&127..=Int32(-54)&127:126|1), """
0XhjI
)Kgl>
""", (Int16(68)&127..Int16(-29)&127:(-119)|1), (-11.0), Option<Range<UInt8>>.None, (Int16(82)&127..=Int16(110)&127:95|1)) is String), Int16(UInt16(144)), Float32(Float32(Float32(-81.0)))));
    try { // block id: 1000
        var var1003 : ?Range<Int32> = Option<Range<Int32>>.None;
        let var1011 : (Range<Int8>, Bool, Bool, Int16, Float32) = ((Int8(58)&127..=Int8(77)&127:110|1), ([UInt32(Int32(-27)), UInt32(60), UInt32(118), UInt32(UInt16(93)), UInt32(218), UInt32(UInt32(189)), UInt32(120), UInt32(237), UInt32(UInt32(214)), UInt32(27)] is Bool), ((UInt8(35)&127..UInt8(225)&127:(41|1)) is Array<Int8>), Int16(-33), Float32(Float32(Float32(Float32(-114.0)))));
        match (var1003) {
            case _ : Range<UInt16> => 
                if (var800) { var1011 } else { ((Int8(9)&127..Int8(89)&127:89|1), true, false, Int16(16), var629) } ;
                var659;
                ()
            
            case caseVar1050 => 
                UInt64(127);
                var1055 %= ((Int32(-38)) | 1)
            
            case _ : UInt32 => 
                var var1067 : UInt16 = UInt16(9);
                var1067 |= var1067;
                (var832&127..=40&127:((-57)|1));
                ()
            
            case _ => 
                let var1098 : Array<Option<Int16>> = [Option<Int16>.None, Option<Int16>.None, (UInt64(252) as Int16), Option<Int16>.Some(Int16(Int16(5))), (49.0 as Int16), ((UInt16(33)&127..=UInt16(243)&127:(Int64(UInt16(209))|1)) as Int16), ((UInt8(227)&127..UInt8(35)&127:85|1) as Int16), Option<Int16>.None, Option<Int16>.Some(Int16(-104)), Option<Int16>.None];
                if (param988) { [Option<Int16>.Some(Int16(-33)), Option<Int16>.Some(var480), Option<Int16>.None, Option<Int16>.Some(var480), Option<Int16>.Some(Int16(18)), var499, var1091, param989, Option<Int16>.None, param989] } else { var1098 } ;
                ()
            
        };
        (Option<Range<UInt8>>.None ?? (UInt8(191)&127..=UInt8(70)&127:(-43)|1));
        (var1131 ?? var832)
    } catch (e: Exception) { // block id: 1134
        let var1230 : (Range<Int64>) -> (Range<Int8>, Bool, Bool, Int16, Float32) = { lambdaParameter1233 : Range<Int64> => ((Int8(-11)&127..Int8(UInt8(15))&127:(11|1)), ((UInt32(3)&127..=UInt32(10)&127:66|1) is (Range<Int8>, Bool, Bool, Int16, Float32)), (UInt8(UInt8(191)) is (Range<Int16>, Range<UInt16>, UInt32, Int8) -> Int16), Int16(-52), Float32(19.0)) };
        var675|>var1230;
        func func1250(param1251 : Array<Option<Int16>>, namedParam1252 ! : (Range<Int64>) -> (Range<Int8>, Bool, Bool, Int16, Float32)) : Unit { // block id: 1255
            try { // block id: 1337
                var559;
                var var1341 : Int8 = Int8(-9);
                var1341 /= ((Int8(-75)) | 1);
                var703
            } catch (_) { // block id: 1345
                ();
                var703 & UInt8(244)
            }|>func1257;
            var703 %= ((try { // block id: 1353
                UInt8(195)
            } catch (_) { // block id: 1355
                UInt8(143) * var1359
            } finally { // block id: 1365
                var703
            }) | 1);
            let var1441 : (Range<Int8>, Bool, Bool, Int16, Float32) = ((Int8(-12)&127..=Int8(-98)&127:(-100)|1), true, true, Int16(Int8(UInt8(UInt8(195)))), Float32(-9.0));
            match (var1373[0]) {
                case defaultValue => 
                    var659
                
                case _ => 
                    var1441;
                    var511--;
                    var659
                
                case _ : Range<Int64> => 
                    var387 |= UInt64(120);
                    var659
                
                case _ => 
                    var1465 *= (-14);
                    ()
                
            }
        }
;
        var var1472 : Array<Option<Int16>> = Array<Option<Int16>>(10){ i => Option<Int16>.None };
        func1250(var1472, namedParam1252 : var1230);
        (var1131 ?? var832)
    } finally { // block id: 1499
        (Option<Int64>.None ?? var1465)
    }
}

public func func1539(param1540 : UInt64) : Option<Int16> { // block id: 1541
    var var1548 : Range<UInt16> = (UInt16(Int16(83))&127..UInt16(55)&127:(Int64(Int8(UInt8(166)))|1));
    var var1645 : ?Unit = (64.0 as Unit);
    match (match (if (false) { (UInt16(115)&127..UInt16(82)&127:(-115)|1) } else { var1548 } ) {
            case _ => 
                let var1562 : Range<UInt64> = (UInt64(UInt16(Int16(60)))&127..=UInt64(UInt8(Int8(-69)))&127:(Int64(UInt64(Int8(UInt8(1))))|1));
                if (var494) { var1562 } else { (var511&127..UInt64(182)&127:(53|1)) } ;
                [var1269, UInt32(1), UInt32(60), var1269, UInt32(248), var1269, UInt32(246), var1269, UInt32(223), UInt32(12)]
            
            case _ => 
                [UInt32(44), UInt32(193), var1595, var1595, UInt32(56), UInt32(166), UInt32(71), UInt32(44), UInt32(107), var1269]
            
        }) {
        case _ : Array<Range<UInt32>> => 
            ();
            var1609;
            Option<Int16>.None
        
        case caseVar1640 : Option<Int64> => 
            if (true) { var1645 } else { var1645 } ;
            if (false) { Option<Int16>.Some(var480) } else { Option<Int16>.None } 
        
        case caseVar1656 : UInt64 => 
            ();
            var809;
            if (var559) { var499 } else { var499 } 
        
        case _ => 
            var1055;
            if (false) { var499 } else { var499 } 
        
        case _ => 
            var659;
            if (false) { Option<Int16>.Some(Int16(-24)) } else { var499 } 
        
    }
}

public func func1707(optionalParam1708 ! : Enum1368 = Enum1368.enumValue1710, optionalParam1711 ! : Bool = (11.0 is Range<Int64>), optionalParam1714 ! : Range<Int8> = (Int8(3)&127..Int8(36)&127:(-97)|1)) : Int32 { // block id: 1716
    UInt32(241);
    try { // block id: 1719
        Int32(-56)
    } finally { // block id: 1721
        Option<Int16>.Some(var480);
        var1055
    }
}

func func1523(param1524 : Int8, namedParam1525 ! : Range<UInt64>, namedParam1526 ! : Class296, optionalParam1527 ! : Enum1368 = Enum1368.enumValue1529(UInt64(UInt16(UInt16(114))), Int8(UInt8(15)))) : Option<Int16> { // block id: 1537
    var var1681 : (UInt64) -> Option<Int16> = { lambdaParameter1684 : UInt64 => ([Option<Int16>.None, ((Int32(34)&127..Int32(-64)&127:(-41)|1) as Int16), Option<Int16>.Some(Int16(95)), Option<Int16>.Some(Int16(110)), Option<Int16>.None, Option<Int16>.None, (Option<Unit>.None as Int16), (Int16(101) as Int16), (Enum1368.defaultValue as Int16), (Option<Array<Int8>>.None as Int16)] as Int16) };
    UInt64(func1707(optionalParam1708 : Enum1368.defaultValue, optionalParam1711 : var559))|>var1681
}

func func892(param893 : UInt64, optionalParam894 ! : Aggregate449 = Aggregate449((Int8(-112)&127..=Int8(86)&127:(-9)|1), UInt64(165))) : Int64 { // block id: 985
    var var1731 : Array<Range<UInt32>> = [(UInt32(224)&127..UInt32(Int8(UInt8(111)))&127:(114|1)), (UInt32(9)&127..=UInt32(150)&127:105|1), (UInt32(96)&127..=UInt32(237)&127:(-26)|1), (UInt32(11)&127..=UInt32(91)&127:(-21)|1), (UInt32(87)&127..=UInt32(43)&127:(-58)|1), (UInt32(121)&127..=UInt32(123)&127:5|1), (UInt32(UInt32(124))&127..=UInt32(UInt8(Int8(-95)))&127:(43|1)), (UInt32(4)&127..=UInt32(UInt8(141))&127:(Int64((-90))|1)), (UInt32(34)&127..UInt32(8)&127:(-42)|1), (UInt32(245)&127..UInt32(202)&127:95|1)];
    let var1761 : (String, Range<UInt16>, Aggregate449, Int16) = ("ML53zTdGhP", (UInt16(243)&127..UInt16(210)&127:(-63)|1), Aggregate449((Int8(Int8(-86))&127..Int8(43)&127:(Int64(UInt8(121))|1)), UInt64(Int32(UInt32(119)))), Int16(-84));
    let var1782 : String = ###"8acYnBakM-"###;
    let var1787 : UInt16 = UInt16(Int16(-60));
    func func1819(param1820 : Option<Range<Int32>>) : Enum1368 { // block id: 1821
        let var1846 : Enum1368 = Enum1368.enumValue1529(UInt64(UInt8(88)), Int8(61));
        func func1842(param1843 : Range<UInt64>) : Enum1368 { // block id: 1844
            var1846
        }
;
        var var1870 : Range<UInt64> = (UInt64(UInt8(40))&127..=UInt64(249)&127:(59|1));
        let var1883 : Array<Int8> = [Int8(Int8(Int8(UInt8(167)))), Int8(Int8(-11)), Int8(Int8(Int8(UInt8(223)))), Int8(17), Int8(101), Int8(UInt8(224)), Int8(UInt8(60)), Int8(-102), Int8(77), Int8(Int8(18))];
        if (match (("""
!19!c
M;-7G
""", var732, optionalParam894, Int16(-43))) {
            case (_ : Int64,_ : UInt8,caseVar1831,caseVar1832) => 
                Option<Range<UInt8>>.None;
                true
            
            case _ => 
                var659;
                var659;
                true
            
        }) { func1842(match (var1609) {
            case _ : Range<Int32> => 
                (UInt64(50)&127..UInt64(0)&127:(-58)|1)
            
            case _ => 
                var411 &&= var411;
                if (true) { (UInt64(63)&127..UInt64(147)&127:(var832|1)) } else { var1870 } 
            
            case _ => 
                (UInt64(206)&127..UInt64(129)&127:(-58)|1)
            
        }) } else { (var1883, (var703&127..=UInt8(101)&127:(var832|1)), Int16(-21), Enum1368.enumValue1529(var387, var1801), var732, UInt8(197), """
vz#^y
olA6Y
""")[3] } 
    }
;
    func1136(Class296.var1511[2], func1523((var675, var1731, (Int8(-84)&127..=Int8(-16)&127:79|1), var1761, Int8(-62))[4], namedParam1525 : try { // block id: 1779
        (var1782, (UInt16(172)&127..=var1787&127:(var1465|1)), Aggregate449(), Int16(-128));
        Int32(51);
        (UInt64(226)&127..UInt64(236)&127:(var1465|1))
    } catch (_) { // block id: 1798
        var1801--;
        (UInt64(66)&127..UInt64(129)&127:45|1)
    }, namedParam1526 : var1810[2], optionalParam1527 : func1819(Option<Range<Int32>>.None)))
}




public func func888(param889 : (Range<Int8>, Bool, Bool, Int16, Float32)) : (Range<Int8>, Bool, Bool, Int16, Float32) { // block id: 890
    let var1926 : (Option<UInt64>, UInt32, Unit) = ((Option<Array<Int8>>.None as UInt64), UInt32(UInt16(146)), ());
    var var1976 : Rune = '4';
    func892((var1926[0] ?? match (UInt8(167)) {
        case 28 => 
            UInt64(5)
        
        case _ : Float32 => 
            let var1944 : (Array<Int8>, Range<UInt8>, Int16, Enum1368, Range<UInt16>, UInt8, String) = ([Int8(115), Int8(-11), Int8(-25), Int8(-108), Int8(-124), Int8(-66), Int8(-103), Int8(9), Int8(13), Int8(-108)], (UInt8(215)&127..UInt8(UInt8(95))&127:(Int64(UInt64(12))|1)), Int16(-96), Enum1368.enumValue1710, (UInt16(Int8(Int8(-17)))&127..=UInt16(Int16(Int8(84)))&127:(41|1)), UInt8(235), ###"-vu%?^Cf(\""###);
            var1944;
            -UInt64(211)
        
        case 25 | 228 | 5 => 
            var659;
            UInt64(168)
        
        case _ => 
            var1976;
            -Int8(32);
            let var1981 : UInt64 = UInt64(25);
            var1981
        
        case _ => 
            var411 &&= false;
            UInt64(124)
        
    }));
    var var2310 : (String, Range<UInt16>, Aggregate449, Int16) = ("Q%Hlo+*[}!", (UInt16(35)&127..=UInt16(152)&127:16|1), Aggregate449("W} `G\"K@-5", [Int16(-44), Int16(-99), Int16(UInt8(181)), Int16(-86), Int16(UInt8(50)), Int16(UInt8(249)), Int16(UInt16(28)), Int16(-48), Int16(UInt8(137)), Int16(UInt8(59))]), Int16(-46));
    match {
        case [true, true, true, true, true, false, false, true, true, false][4] => 
        var var2246 : (UInt64) -> Option<Int16> = func1539;
        let var2251 : Int16 = Int16(Int16(-64));
        try (resource = Class296()) { // block id: 1996
            let var1998 : Enum1368 = Enum1368.enumValue1529(UInt64(178), Int8(1));
            var1998;
            var var2261 : ?Array<Int8> = ((UInt32(Int16(-58)), (), Class296()) as Array<Int8>);
            if (var494) { (var2006, (UInt16(49)&127..=var20&127:(var1465|1)), Aggregate449(namedParam2014 : var2246, namedParam2017 : 87.0, namedParam2018 : Option<Array<Int8>>.None), var2251) } else { ("BqG8!q[;Y8", var732, Aggregate449(namedParam2014 : var2246, namedParam2017 : var2139, namedParam2018 : var2261, optionalParam2019 : UInt32(28)), var480) } ;
            var629 += Float32(-20.0)
        } catch (e: Exception) { // block id: 2273
            ()
        } finally { // block id: 2275

        };
        match ([false, true, true, false, true, false, true, false, false, true]) {
            case _ : (UInt32, Unit, Class296) => 
                var659;
                (var2284, var494, true, var2251, var629)
            
            case _ => 
                ((117&127..90&127:(-125)|1), [(UInt32(35)&127..=UInt32(111)&127:(-64)|1), (UInt32(145)&127..=UInt32(203)&127:(-82)|1), (UInt32(119)&127..=UInt32(84)&127:((-78)|1)), var836, (UInt32(89)&127..=UInt32(148)&127:24|1), var836, var836, (UInt32(127)&127..=UInt32(203)&127:(-78)|1), var836, (UInt32(148)&127..UInt32(110)&127:(-99)|1)], (Int8(-127)&127..Int8(119)&127:71|1), var2310, var1801);
                if (var800) { var675 } else { ((-50)&127..=var1465&127:(var1465|1)) } ;
                if (var800) { (var2284, true, false, Int16(-55), Float32(71.0)) } else { var1208 } 
            
        }
        case _ => 
        (Option<String>.Some("""
bp*.7
-\"E^|
""") ?? "ck7<d1WI*9");
        if (true) { ((Int8(59)&127..=Int8(44)&127:(-104)|1), true, var494, var480, var629) } else { var1208 } 
    }
}


public func func283(param284 : Range<Int8>) : Bool { // block id: 285
    let var403 : Int64 = 79;
    func func445(namedParam446 ! : Range<UInt64>) : Option<Int16> { // block id: 447
        Aggregate449.var454;
        let var457 : ?Int16 = Option<Int16>.None;
        var457
    }
;
    func func290(optionalParam291 ! : Range<Int32> = (Int32(-73)&127..Int32(-99)&127:35|1)) : Int16 { // block id: 293
        var var300 : Class296 = Class296();
        var var306 : Int32 = Int32(UInt8(155));
        var300.var303 ^= var306;
        var var317 : UInt32 = UInt32(61);
        var loopTimeVar351 : Int64 = 0;
        while ((false) && loopTimeVar351 < 100 ) {
            loopTimeVar351++;
            let var321 : Int64 = (-77);
            let var328 : Range<UInt32> = (UInt32(211)&127..=UInt32(105)&127:(Int64(Int64(Int16(UInt8(254))))|1));
            [(var317&127..var317&127:(var321|1)), (var317&127..UInt32(203)&127:(91|1)), var328, (UInt32(47)&127..UInt32(149)&127:((-26)|1)), (UInt32(123)&127..=UInt32(110)&127:(-49)|1), (UInt32(152)&127..=UInt32(16)&127:6|1), (UInt32(192)&127..=UInt32(237)&127:115|1), (var317&127..=UInt32(167)&127:(17|1)), (UInt32(49)&127..=UInt32(180)&127:(-86)|1), var328][2]
        };
        let var395 : Int16 = Int16(Int8(UInt8(Int8(1))));
        let var430 : UInt32 = UInt32(27);
        func func353(optionalParam354 ! : Range<Int16> = (Int16(121)&127..Int16(12)&127:(-55)|1), optionalParam356 ! : Range<UInt16> = (UInt16(93)&127..=UInt16(98)&127:((-96)|1)), optionalParam361 ! : UInt32 = UInt32(UInt16(34)), namedParam364 ! : Int8) : Int16 { // block id: 365
            let var368 : Bool = ((UInt16(15)&127..UInt16(235)&127:16|1) is Unit);
            var loopTimeVar375 : Range<UInt64> = (UInt64(Int8(-91))&127..UInt64(86)&127:((-112)|1));
            for (i in loopTimeVar375 where var368) {
                var var373 : Unit = ();
                var373
            };
            (try { // block id: 384
                var387 %= ((UInt64(165)) | 1);
                Int16(-88) & var395
            } finally { // block id: 400
                var403 ^ var403;
                ();
                Int16(-56)
            } + try { // block id: 409
                var411;
                let var416 : Int16 = Int16(-73);
                Int16(97) << ((var416) & 7)
            } finally { // block id: 418
                [UInt32(222), optionalParam361, UInt32(31), optionalParam361, UInt32(63), optionalParam361, UInt32(130), optionalParam361, optionalParam361, var430];
                var var435 : Int32 = Int32(16);
                (Int32(80)&127..var435&127:((-75)|1));
                var395
            }) ** ((func445(namedParam446 : (UInt64(35)&127..=UInt64(179)&127:96|1)) ?? Int16(UInt8(164))) & 3)
        }
;
        func353(optionalParam354 : (Aggregate449()|>(func542~>func473)), namedParam364 : (Option<Array<Int8>>.Some([Int8(-85), Int8(96), Int8(-44), Int8(-37), Int8(107), Int8(103), Int8(42), Int8(54), Int8(54), Int8(-45)]) ?? [Int8(-10), Int8(111), Int8(-96), Int8(-72), Int8(-1), Int8(40), Int8(-41), Int8(-87), Int8(-127), Int8(30)])[2])
    }
;
    var var770 : Range<Int32> = (Int32(5)&127..=Int32(106)&127:(-116)|1);
    var var859 : ?Class296 = Option<Class296>.Some(Class296());
    if (true) { // block id: 288
        func290(optionalParam291 : var770);
        (param284, true, false, var480, Float32(-92.0))[1]
    } else if (try { // block id: 783
        var659;
        if (var559) { var499 } else { var499 } ;
        var var803 : Bool = (Float64(Float32(-60.0)) is Option<Array<Int8>>);
        if (true) { [var411, false, false, false, true, var559, false, var800, var803, false] } else { var809 } 
    } finally { // block id: 811
        var var817 : UInt32 = UInt32(154);
        [(UInt32(193)&127..UInt32(125)&127:(-51)|1), (UInt32(89)&127..var817&127:(var403|1)), (UInt32(31)&127..UInt32(233)&127:(23|1)), (var817&127..=var817&127:((-35)|1)), (UInt32(28)&127..=UInt32(123)&127:(var832|1)), var836, (UInt32(77)&127..UInt32(199)&127:(-33)|1), (UInt32(206)&127..=UInt32(244)&127:27|1), (var817&127..=UInt32(134)&127:((-100)|1)), var836];
        var809
    }[2]) { // block id: 851
        var loopTimeVar862 : Range<UInt64> = (UInt64(UInt8(18))&127..=UInt64(214)&127:(72|1));
        for (i in loopTimeVar862 where false) {
            if (false) { Option<Class296>.None } else { var859 } 
        };
        var var876 : Int32 = Int32(-102);
        (Option<Range<Int32>>.None ?? (var876&127..Int32(-74)&127:((-87)|1)));
        var411
    } else { // block id: 881
        var loopTimeVar886 : Int64 = 0;
        do {
            loopTimeVar886++;

        } while ((var411) && loopTimeVar886 < 100 ) ;
        var var2416 : ((Range<Int8>, Bool, Bool, Int16, Float32)) -> (Range<Int8>, Bool, Bool, Int16, Float32) = func888;
        ((var1801&127..=Int8(114)&127:(var403|1)), var559, var411, Int16(-64), Float32(14.0))|>var2416;
        let var2433 : Option<Bool> = Option<Bool>.None;
        (var2433 ?? false)
    }
}


public func func279(param280 : UInt32) : Int8 { // block id: 281
    var var2437 : (Range<Int8>) -> Bool = func283;
    var2284|>var2437;
    let var2454 : ?Int64 = Option<Int64>.None;
    match ((Option<Option<Int64>>.None ?? try { // block id: 2448
            if (var800) { Option<Int64>.Some(var1465) } else { var2454 } 
        } catch (e: Exception) { // block id: 2456
            (var1801&127..=Int8(-70)&127:((-114)|1));
            if (var25) { Option<Int64>.None } else { var2454 } 
        })) {
        case _ => 
            Int8(48)
        
    }
}


public func func266(optionalParam267 ! : Option<Array<Option<(String, Int64, Int8, Rune, Option<UInt8>, Bool)>>> = Option<Array<Option<(String, Int64, Int8, Rune, Option<UInt8>, Bool)>>>.None, optionalParam269 ! : Unit = ()) : (String, Int64, Int8, Rune, Option<UInt8>, Bool) { // block id: 271
    let var2469 : (UInt32) -> Int8 = func279;
    [UInt32(146), UInt32(139), UInt32(70), UInt32(124), UInt32(140), UInt32(83), UInt32(30), UInt32(112), UInt32(199), UInt32(116)][3] ** (UInt32((var1595|>var2469)) & 3);
    var var2485 : Unit = ();
    let var2631 : (String, Int64, Int8, Rune, Option<UInt8>, Bool) = ("""
LZJYx
|~~8 
""", (-54), Int8(-24), 'i', ((UInt32(Int8(-20)), (), Class296()) as UInt8), false);
    ((match (UInt64(188)) {
        case 210 | 113 | 160 | 76 => 
            ();
            var2485;
            Option<Option<(String, Int64, Int8, Rune, Option<UInt8>, Bool)>>.Some(var2489)
        
        case _ => 
            let var2497 : (Option<UInt64>, UInt32, Unit) = ((((UInt32(132)&127..UInt32(207)&127:37|1), (Int32(121)&127..Int32(65)&127:37|1)) as UInt64), UInt32(Int8(-66)), ());
            if (true) { var2497 } else { (Option<UInt64>.Some(UInt64(42)), UInt32(40), ()) } ;
            var2512
        
        case 7 => 
            let var2519 : (Enum1368, Array<Int8>, Array<UInt32>, (Range<Int8>, Bool, Bool, Int16, Float32), (Range<Int8>, Bool, Bool, Int16, Float32)) = (Enum1368.enumValue1710, [Int8(-40), Int8(UInt8(248)), Int8(UInt8(UInt8(81))), Int8(UInt8(UInt8(84))), Int8(Int8(Int8(-82))), Int8(79), Int8(UInt8(219)), Int8(Int8(-62)), Int8(-21), Int8(-34)], [UInt32(83), UInt32(9), UInt32(244), UInt32(247), UInt32(197), UInt32(231), UInt32(182), UInt32(58), UInt32(78), UInt32(244)], ((Int8(UInt8(179))&127..Int8(-50)&127:(38|1)), true, true, Int16(UInt16(17)), Float32(-7.0)), ((Int8(UInt8(126))&127..=Int8(Int8(126))&127:(70|1)), false, true, Int16(117), Float32(-6.0)));
            var2519;
            var659;
            Option<Option<(String, Int64, Int8, Rune, Option<UInt8>, Bool)>>.None
        
        case 156 => 
            if (var411) { var2512 } else { Option<Option<(String, Int64, Int8, Rune, Option<UInt8>, Bool)>>.None } 
        
        case _ => 
            if (true) { Option<Option<(String, Int64, Int8, Rune, Option<UInt8>, Bool)>>.Some(Option<(String, Int64, Int8, Rune, Option<UInt8>, Bool)>.None) } else { var2512 } 
        
    } ?? if (var25) { var2489 } else { var2489 } ) ?? if ((var2588 ?? true)) { // block id: 2591
        (var2006, var1465, var1801, 'F', Option<UInt8>.Some(var703), var559)
    } else { // block id: 2600
        var var2602 : (Array<Int8>, Range<UInt8>, Int16, Enum1368, Range<UInt16>, UInt8, String) = ([Int8(-48), Int8(110), Int8(Int8(81)), Int8(Int8(Int8(103))), Int8(-80), Int8(-3), Int8(-14), Int8(Int8(115)), Int8(-78), Int8(UInt8(Int8(92)))], (UInt8(83)&127..=UInt8(8)&127:(-112)|1), Int16(-56), Enum1368.defaultValue, (UInt16(3)&127..=UInt16(96)&127:24|1), UInt8(UInt8(165)), ###"|>RHb=\"7tl"###);
        var2602;
        if (var800) { var2631 } else { var2631 } 
    })
}

public func func55(param56 : Float32) : (String, Int64, Int8, Rune, Option<UInt8>, Bool) { // block id: 57
    var var80 : Array<Option<(String, Int64, Int8, Rune, Option<UInt8>, Bool)>> = Array<Option<(String, Int64, Int8, Rune, Option<UInt8>, Bool)>>(10){ i => ([Option<(String, Int64, Int8, Rune, Option<UInt8>, Bool)>.None, (Option<(String, Int64, Int8, Rune, Option<UInt8>, Bool)>.Some(("""
an(@S
Qbp&/
""", 62, Int8(-5), 'x', Option<UInt8>.None, false)) as (String, Int64, Int8, Rune, Option<UInt8>, Bool)), Option<(String, Int64, Int8, Rune, Option<UInt8>, Bool)>.Some(("r/u*YdW_d3", (-70), Int8(-96), '4', Option<UInt8>.Some(UInt8(176)), false)), (Option<UInt8>.Some(UInt8(58)) as (String, Int64, Int8, Rune, Option<UInt8>, Bool)), (true as (String, Int64, Int8, Rune, Option<UInt8>, Bool)), (() as (String, Int64, Int8, Rune, Option<UInt8>, Bool)), Option<(String, Int64, Int8, Rune, Option<UInt8>, Bool)>.Some(("VSuCBZ'a{uP", 54, Int8(-73), 'j', Option<UInt8>.None, false)), Option<(String, Int64, Int8, Rune, Option<UInt8>, Bool)>.Some((###"m-TdK0hpc'"###, 93, Int8(-56), 'L', Option<UInt8>.Some(UInt8(235)), true)), Option<(String, Int64, Int8, Rune, Option<UInt8>, Bool)>.None, Option<(String, Int64, Int8, Rune, Option<UInt8>, Bool)>.Some(("""
ulm&1
jP+\">
""", (-123), Int8(97), '1', Option<UInt8>.Some(UInt8(45)), true))] as (String, Int64, Int8, Rune, Option<UInt8>, Bool)) };
    let var2649 : Bool = (Option<Range<UInt32>>.None is Range<UInt64>);
    let var2693 : Int8 = Int8(-41);
    let var2713 : ?(String, Int64, Int8, Rune, Option<UInt8>, Bool) = Option<(String, Int64, Int8, Rune, Option<UInt8>, Bool)>.None;
    ((Option<Array<Option<(String, Int64, Int8, Rune, Option<UInt8>, Bool)>>>.None ?? var80)[9] ?? func266(optionalParam267 : try { // block id: 2646
        if (var2649) { ((72&127..118&127:(-91)|1), [(UInt32(225)&127..=UInt32(160)&127:(-92)|1), (var1269&127..UInt32(77)&127:((-108)|1)), var836, (UInt32(129)&127..=UInt32(121)&127:94|1), (var1269&127..=var1269&127:(var832|1)), var836, (UInt32(64)&127..=var1595&127:(var832|1)), (var1595&127..=var1269&127:(45|1)), var836, (UInt32(115)&127..=UInt32(27)&127:93|1)], var2284, var2679, var1801) } else { ((32&127..=20&127:(-72)|1), [(UInt32(99)&127..UInt32(65)&127:(-28)|1), (UInt32(36)&127..=UInt32(42)&127:37|1), (UInt32(142)&127..UInt32(4)&127:68|1), (UInt32(177)&127..UInt32(28)&127:85|1), (UInt32(252)&127..UInt32(125)&127:(-68)|1), (UInt32(147)&127..UInt32(184)&127:(-118)|1), (UInt32(106)&127..=UInt32(232)&127:(-119)|1), (UInt32(200)&127..=UInt32(110)&127:22|1), (UInt32(143)&127..=UInt32(40)&127:30|1), (UInt32(152)&127..=UInt32(45)&127:2|1)], (var1801&127..var2693&127:(var2696|1)), var2679, Int8(32)) } ;
        var1055 -= var1055;
        let var2717 : (String, Int64, Int8, Rune, Option<UInt8>, Bool) = (###"!iG^j;8YTA"###, 29, Int8(94), 'L', (Int16(Int8(-46)) as UInt8), false);
        Option<Array<Option<(String, Int64, Int8, Rune, Option<UInt8>, Bool)>>>.Some([var2489, Option<(String, Int64, Int8, Rune, Option<UInt8>, Bool)>.None, var2489, var2713, Option<(String, Int64, Int8, Rune, Option<UInt8>, Bool)>.Some(var2717), var2713, Option<(String, Int64, Int8, Rune, Option<UInt8>, Bool)>.None, Option<(String, Int64, Int8, Rune, Option<UInt8>, Bool)>.Some(var2717), Option<(String, Int64, Int8, Rune, Option<UInt8>, Bool)>.None, var2489])
    } finally { // block id: 2733
        if (var411) { var2737 } else { Option<Array<Option<(String, Int64, Int8, Rune, Option<UInt8>, Bool)>>>.None } 
    }))
}

public func func8(param9 : UInt8) : Int64 { // block id: 10
    (match (try { // block id: 18
            var20;
            var var29 : String = """
,.}:&
9|];a
""";
            if (var25) { var29 } else { var29 } 
        } catch (_) { // block id: 32
            ###"9<ju/@>a{dA"###
        }) {
        case _ => 
            var25;
            if (false) { var40 } else { var40 } 
        
    } ?? '1');
    let var2744 : (Float32) -> (String, Int64, Int8, Rune, Option<UInt8>, Bool) = func55;
    ((Float32(-5.0)|>var2744)[4] ?? (([var559, true, var25, true, var1194, false, false, var2759, var25, false] as UInt8) ?? param9));
    Int64(match ((var2771 as Int16)) {
        case caseVar2784 => 
            (UInt16(80)&127..var20&127:(var1465|1));
            param9 + UInt8(39)
        
        case caseVar2795 => 
            param9 >> ((UInt8(112)) & 7)
        
        case caseVar2802 : (Range<Int64>, Array<Range<UInt32>>, Range<Int8>, (String, Range<UInt16>, Aggregate449, Int16), Int8) => 
            let var2805 : Option<UInt8> = (UInt32(Int32(UInt16(Int8(95)))) as UInt8);
            var2805;
            param9
        
        case _ => 
            ();
            UInt64(159);
            param9
        
    })
}

main(): Int64 {
    try {
        var var2818 : (UInt8) -> Int64 = func8;
        let var2823 : UInt8 = UInt8(UInt8(158));
        match (Option<UInt8>.Some(var2823)) {
            case _ : UInt64 => 
                UInt8(135) & var2823
            
            case _ => 
                let var2835 : Unit = ();
                var2835;
                UInt8(214)
            
        }|>var2818
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var2823*var2823), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Enum1368 {

}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_unmatched_right_delimiter
// ASSERT: scan parse_unexpected_declaration_in_scope
// ASSERT: scan parse_expected_character
// ASSERT: scan parse_expected_expr_or_decl_in
// ASSERT: scan parse_expected_catch_or_finally_in_try


