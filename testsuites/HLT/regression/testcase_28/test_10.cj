/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output


public var var23 : UInt8 = UInt8(Int8(UInt8(39)))
public var var50 : Range<Int16> = (Int16(31)&127..Int16(-9)&127:43|1)
public let var71 : Option<Float64> = Option<Float64>.None
public var var83 : Bool = true
var var186 : Unit = ()
public let var202 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
let var218 : Class91 = Class91()
public var var270 : (Range<UInt16>, UInt8, UInt64, Unit, Range<Int16>, UInt32) = ((UInt16(24)&127..UInt16(114)&127:((-5)|1)), UInt8(UInt8(71)), UInt64(193), (), (Int16(68)&127..=Int16(37)&127:8|1), UInt32(Int32(UInt32(39))))
public var var292 : Range<UInt16> = (UInt16(9)&127..UInt16(37)&127:(75|1))
public var var313 : Int64 = Int64(UInt32(17))
public let var323 : Unit = ()
public var var389 : UInt64 = UInt64(Int8(UInt8(Int8(Int8(-119)))))
public let var397 : Unit = ()
public var var407 : UInt16 = UInt16(29)
public let var433 : Float32 = Float32(Float32(-19.0))
public let var464 : ??Range<UInt16> = ((UInt16(199)&127..UInt16(UInt16(Int16(89)))&127:(Int64(UInt16(UInt16(225)))|1)) as Option<Range<UInt16>>)
public var var518 : Float64 = Float64(Float32(30.0))
public var var540 : String = "irS*,zcvAc"
public var var544 : Range<UInt8> = (UInt8(UInt8(Int8(75)))&127..UInt8(Int8(Int8(UInt8(187))))&127:(Int64(UInt64(254))|1))
public let var594 : (Class91, Int32) = (Class91(), Int32(18))
public var var601 : Bool = ((123&127..=(-8)&127:(-63)|1) is (Range<Int32>, String, Bool, Range<Int16>) -> Unit)
public let var606 : Int16 = Int16(Int8(Int8(58)))
public var var671 : Int32 = Int32(Int8(Int8(UInt8(189))))
let var730 : ?Range<UInt16> = Option<Range<UInt16>>.None
let var735 : ?Class91 = ((Int8(UInt8(110))&127..Int8(Int8(-43))&127:(Int64(UInt8(Int8(100)))|1)) as Class91)
let var822 : ?Bool = ((Int16(34)&127..=Int16(10)&127:47|1) as Bool)
public let var863 : ?UInt8 = Option<UInt8>.None
public var var912 : Int64 = Int64(Int8(UInt8(Int8(108))))
public let var935 : (Float32, Range<UInt32>, UInt32, UInt16, Int8) = (Float32(Float32(Float32(-119.0))), (UInt32(58)&127..=UInt32(124)&127:(-127)|1), UInt32(161), UInt16(UInt8(88)), Int8(-94))
public var var993 : Int8 = Int8(-60)
public var var1000 : UInt8 = UInt8(171)
public let var1048 : Int32 = Int32(81)
public var var1054 : Int16 = Int16(UInt8(230))
public var var1107 : Rune = 'y'
public var var1136 : UInt8 = UInt8(Int8(-79))
public let var1163 : Unit = ()
public let var1173 : (Range<UInt32>, String, Range<Int16>, Int32, Rune, UInt32, Array<Unit>) = ((UInt32(23)&127..UInt32(93)&127:91|1), "^=#Yn BMDc", (Int16(81)&127..Int16(64)&127:(-36)|1), Int32(10), 'g', UInt32(Int32(121)), [(), (), (), (), (), (), (), (), (), ()])
let var1251 : ?Range<UInt64> = Option<Range<UInt64>>.None
public let var1297 : ?Option<Float64> = Option<Option<Float64>>.None
var var1315 : Range<Int64> = (48&127..=(-14)&127:(-101)|1)
public var var1459 : Bool = (Option<Bool>.None is (Float64, Int64, Option<Bool>, Float32))
public var var1463 : ?(Float64, Bool, Float64, Int16, Range<UInt8>) = Option<(Float64, Bool, Float64, Int16, Range<UInt8>)>.None
public let var1517 : (Float64, Bool, Float64, Int16, Range<UInt8>) = ((-73.0), (UInt64(Int8(UInt8(219))) is Int16), (-51.0), Int16(Int8(UInt8(118))), (UInt8(3)&127..=UInt8(95)&127:(-110)|1))
public var var1540 : ?Unit = (() as Unit)
public var var1548 : UInt32 = UInt32(UInt8(Int8(Int8(-90))))
public var var1635 : ?Range<UInt64> = Option<Range<UInt64>>.None
public var var1677 : UInt8 = UInt8(Int8(78))
let var1742 : Unit = ()
var var1771 : Int16 = Int16(-123)
public let var1793 : Unit = ()
public var var1821 : String = "0WHXIaO<vD"
var var1853 : UInt16 = UInt16(80)
public let var1860 : Range<Int16> = (Int16(-101)&127..Int16(109)&127:23|1)
public var var1871 : Int32 = Int32(-84)
public var var1891 : Range<UInt64> = (UInt64(188)&127..UInt64(53)&127:(Int64((-93))|1))
var var1907 : Int64 = Int64(UInt8(Int8(105)))
public let var1952 : Range<UInt32> = (UInt32(67)&127..UInt32(68)&127:103|1)
public var var1991 : ?Range<UInt16> = (((UInt32(111)&127..UInt32(28)&127:(Int64(UInt64(12))|1)), ###"B${var540}7Gf[4|Y;${var540}_"###, (Int16(-20)&127..Int16(-58)&127:116|1), Int32(-110), 'K', UInt32(Int8(57)), [(), (), (), (), (), (), (), (), (), ()]) as Range<UInt16>)
let var2307 : ?Range<UInt64> = (2.0 as Range<UInt64>)
public func func9(param10 : UInt16) : Bool { // block id: 11
    true
}

public func func42(param43 : Range<Int16>) : Unit { // block id: 44

}

public enum Enum57 {
    defaultValue
}

public open class Class91 <: Resource {
    public init() { // block id: 93

    }
;
    public var var110 : UInt64 = UInt64(40);
    public static var var115 : UInt64 = UInt64(134);
    static let var177 : Float64 = 94.0;
    public static func func149(optionalParam150 ! : Range<Int32> = (Int32(55)&127..=Int32(-122)&127:(Int64(Int16(-8))|1)), optionalParam156 ! : String = """
KHcE&
E,(V7
""", optionalParam158 ! : Bool = ((UInt32(Int32(Int8(-24)))&127..UInt32(Int8(-105))&127:(Int64(Int16(Int16(-84)))|1)) is Range<UInt64>), namedParam169 ! : Range<Int16>) : Unit { // block id: 170
        (var177, UInt16(204), (Int32(78)&127..Int32(-38)&127:(113|1)), (57&127..(-62)&127:43|1), var186, (UInt64(226)&127..UInt64(48)&127:(-104)|1))[1]|>func9;
        (((-84) as Array<Unit>) ?? if (true) { var202 } else { var202 } )[7]
    }
;
    let var221 : String = "dElagHMG!K";
    public let var359 : Int32 = Int32(97);
    let var446 : (Bool, Option<Range<UInt16>>, Range<Int32>) = (false, Option<Range<UInt16>>.None, (Int32(112)&127..=Int32(76)&127:(-28)|1));
    public open func func776() : Unit { // block id: 777

    }
;
    open func func330(param331 : Range<UInt32>, param332 : Range<UInt8>, param333 : Rune, namedParam334 ! : UInt8) : Unit { // block id: 335
        var var338 : (Range<Int16>) -> Unit = func42;
        (((var110&127..var110&127:((-3)|1)), Enum57.defaultValue, (28&127..=31&127:90|1))[1]|>func341)|>var338
    }
;
    public init(namedParam2150 ! : (Int16, Int32, Option<Unit>, (Float32, Range<UInt32>, UInt32, UInt16, Int8)) -> Option<UInt8>, optionalParam2156 ! : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()], optionalParam2158 ! : Option<UInt8> = Option<UInt8>.Some(UInt8(16)), namedParam2161 ! : Option<Bool>) { // block id: 2162
        let var2168 : Array<Array<Bool>> = Array<Array<Bool>>(10){ i => [false, true, false, false, true, true, true, false, false, true] };
        var loopTimeVar2291 : Int64 = 0;
        while ((var2168[9][2]) && loopTimeVar2291 < 100 ) {
            loopTimeVar2291++;

        }
    }

    public func isClosed(): Bool { return false }
    public func close(): Unit {}
}








public func func480(param481 : Range<Int32>) : (Range<UInt16>, UInt8, UInt64, Unit, Range<Int16>, UInt32) { // block id: 482
    var var560 : Range<UInt8> = (UInt8(216)&127..UInt8(13)&127:(Int64(Int16(59))|1));
    let var571 : ???Range<UInt16> = Option<Option<Option<Range<UInt16>>>>.Some(('W' as Option<Range<UInt16>>));
    match (match ((92&127..103&127:(var313|1))) {
            case _ => 
                (UInt8(73)&127..=var23&127:(4|1))
            
            case _ => 
                if (true) { (var23&127..=UInt8(226)&127:(var313|1)) } else { (UInt8(239)&127..UInt8(29)&127:(-122)|1) } 
            
            case caseVar510 => 
                (UInt8(73)&127..=UInt8(221)&127:98|1)
            
            case _ => 
                var323;
                var518 -= var518;
                if (false) { (UInt8(190)&127..UInt8(47)&127:42|1) } else { (var23&127..var23&127:(var313|1)) } 
            
        }) {
        case _ : Option<Range<UInt16>> => 
            var186;
            let var537 : ???Range<UInt16> = Option<Option<Option<Range<UInt16>>>>.None;
            if (true) { (var537, var540, param481, var544) } else { (var537, var540, (Int32(29)&127..Int32(21)&127:(-39)|1), var560) } 
        
        case _ => 
            var186;
            let var579 : UInt8 = UInt8(226);
            (var571, "9U\\d>EfQRx", param481, (var579&127..=var579&127:(61|1)))
        
    }[0];
    try { // block id: 585
        try { // block id: 587
            if (false) { (UInt8(2)&127..=UInt8(149)&127:6|1) } else { var544 } 
        } catch (_) { // block id: 592
            var594;
            var544
        };
        var loopTimeVar611 : Int64 = 0;
        while ((var601) && loopTimeVar611 < 100 ) {
            loopTimeVar611++;
            var606
        };
        match (Enum57.defaultValue) {
            case _ : (Class91, Int32) => 
                var323;
                var270
            
            case _ => 
                var270
            
        }
    } catch (e: Exception) { // block id: 622
        Int8(6);
        try (resource = Class91()) { // block id: 625
            var397;
            ()
        } finally { // block id: 628

        };
        try { // block id: 630
            if (true) { var270 } else { var270 } 
        } finally { // block id: 635
            var540;
            ((UInt16(92)&127..=UInt16(11)&127:(-82)|1), var23, UInt64(165), (), (Int16(66)&127..=Int16(-2)&127:(var313|1)), UInt32(97))
        }
    }
}

func func417(param418 : (Range<UInt16>, UInt8, UInt64, Unit, Range<Int16>, UInt32)) : Option<Class91> { // block id: 419
    var var438 : Bool = ((UInt32(91)&127..UInt32(94)&127:(-91)|1) is Range<UInt64>);
    if ((((-50.0), (-62), Option<Bool>.None, var433)[2] ?? var438)) { var218.var446[1] } else { ((Option<Option<Option<Range<UInt16>>>>.None ?? var464) ?? Option<Range<UInt16>>.Some((var407&127..=var407&127:((-59)|1)))) } ;
    let var652 : ???Range<UInt16> = ((UInt64(189) as Class91) as Option<Option<Range<UInt16>>>);
    var var685 : Range<Int32> = (Int32(30)&127..Int32(UInt8(Int8(UInt8(189))))&127:(Int64(UInt32(UInt16(4)))|1));
    match (try { // block id: 650
            var652;
            (-103.0)
        } finally { // block id: 657
            var var660 : Bool = ((68&127..=99&127:(Int64(UInt32(160))|1)) is Range<UInt16>);
            var660 &&= var601;
            Int32(-72) ^ var671;
            (-93.0)
        }) {
        case 22.0 | 47.0 => 
            (Int32(-78)&127..=Int32(52)&127:(-69)|1)
        
        case 34.0 => 
            var685
        
        case _ => 
            (Int32(125)&127..Int32(34)&127:(-95)|1)
        
    }|>func480;
    var var719 : Int32 = Int32(UInt32(UInt8(Int8(3))));
    match (try { // block id: 700
            let var702 : Range<UInt64> = (UInt64(27)&127..UInt64(141)&127:(-85)|1);
            var702
        } finally { // block id: 704
            (Int8(73)&127..=Int8(-35)&127:(-38)|1);
            let var707 : Range<UInt64> = (UInt64(UInt16(25))&127..=UInt64(47)&127:((-79)|1));
            var707
        }) {
        case _ => 
            var671 *= var719;
            var685;
            Option<Class91>.Some(var218)
        
        case _ => 
            var730;
            if (var438) { var735 } else { var735 } 
        
    }
}

func func400<T0>(param401 : Class91) : Class91 { // block id: 402
    if (func9(var407 / ((UInt16(126)) | 1))) { Class91() } else { ((var270|>func417) ?? Class91()) } 
}

public func func346(optionalParam347 ! : Option<Array<Unit>> = Option<Array<Unit>>.None, namedParam349 ! : UInt64) : Class91 { // block id: 350
    try { // block id: 352
        var202[9];
        var218.var359;
        var loopTimeVar379 : Int64 = 0;
        do {
            loopTimeVar379++;
            var23 <<= ((UInt8(172)) & 7);
            [var323, (), (), (), (), (), var323, var186, var323, ()]
        } while ((var83) && loopTimeVar379 < 100 ) 
    } finally { // block id: 380
        try (resource = Class91()) { // block id: 382
            ()
        } finally { // block id: 384
            namedParam349;
            var83;
            var389 /= ((var389) | 1)
        };
        var397
    };
    func400<String>(try { // block id: 752
        ();
        var218
    } finally { // block id: 755
        if (var601) { Class91() } else { var218 } 
    })|>func400<String>
}



public func func341(namedParam781 ! : Rune) : UInt8 { // block id: 782
    var loopTimeVar792 : Range<UInt64> = (UInt64(UInt32(Int16(66)))&127..UInt64(Int8(UInt8(Int8(16))))&127:(Int64(UInt16(185))|1));
    (Option<Unit>.None ?? for (i in loopTimeVar792 where true) {

    });
    Option<Class91>.Some(func346(namedParam349 : UInt64(var23)));
    var var840 : (Option<Option<Option<Range<UInt16>>>>, String, Range<Int32>, Range<UInt8>) = ((UInt32(UInt8(0)) as Option<Option<Range<UInt16>>>), """
.u:Y`
GJQ3A
""", (Int32(Int32(UInt16(48)))&127..Int32(-60)&127:(Int64(UInt8(0))|1)), (UInt8(144)&127..=UInt8(Int8(74))&127:(98|1)));
    (match (if (var601) { var730 } else { Option<Range<UInt16>>.Some(var292) } ) {
        case _ => 
            var822;
            var23;
            Option<UInt8>.Some(UInt8(83))
        
        case _ : (Bool, Option<Range<UInt16>>, Range<Int32>) => 
            if (true) { (Option<Option<Option<Range<UInt16>>>>.Some(Option<Option<Range<UInt16>>>.None), ",.%fLeJja{+", (Int32(11)&127..=Int32(14)&127:7|1), var544) } else { var840 } ;
            if (var601) { Option<Class91>.None } else { var735 } ;
            var863
        
        case _ => 
            (UInt16(232)&127..=UInt16(136)&127:(-79)|1);
            UInt8(46);
            Option<UInt8>.Some(var23)
        
    } ?? var23)
}

public func func341(param342 : Enum57) : Range<Int16> { // block id: 343
    var var765 : Rune = 'I';
    func346(namedParam349 : if (false) { // block id: 762
        var765 = '7';
        UInt64(24)
    } else { // block id: 769
        var83 &&= var83;
        ();
        UInt64(120)
    }).func776();
    match (func341(namedParam781 : if (false) { 'I' } else { 'h' } )) {
        case 234 => 
            if (var601) { var50 } else { var50 } 
        
        case 222 | 14 | 2 | 183 => 
            if (var601) { (Int16(88)&127..Int16(-111)&127:(-5)|1) } else { (Int16(-6)&127..=Int16(49)&127:(-113)|1) } 
        
        case caseVar892 : Float32 => 
            if (true) { Option<Bool>.Some(var601) } else { Option<Bool>.Some(true) } ;
            if (false) { (var606&127..=Int16(-88)&127:((-117)|1)) } else { (Int16(-24)&127..=Int16(-16)&127:(-99)|1) } 
        
        case _ => 
            var313 |= var912;
            if (var83) { (Int16(-18)&127..Int16(-53)&127:(-56)|1) } else { var50 } 
        
    }
}


public func func948(param949 : Option<Option<Range<UInt16>>>) : Rune { // block id: 950
    let var955 : (Float64, Int64, Option<Bool>, Float32) = (Float64(Float32(Float32(Float32(-71.0)))), Int64(UInt32(Int16(4))), (Option<Unit>.None as Bool), Float32(Float32(Float32(35.0))));
    var var978 : Int8 = Int8(-29);
    match (-match (var955) {
            case _ => 
                var323;
                if (false) { (Int8(-106)&127..var978&127:(var313|1)) } else { (Int8(104)&127..var978&127:(118|1)) } ;
                UInt8(250) & UInt8(72)
            
            case _ : String => 
                var993 /= ((Int8(-94)) | 1);
                var397;
                UInt8(149) & var1000
            
            case caseVar1004 : (Range<UInt64>, Enum57, Range<Int64>) => 
                var23
            
            case _ : Range<Int64> => 
                if (false) { [var186, var397, var323, var186, (), var397, (), (), (), ()] } else { [(), var323, (), (), var397, (), var323, (), (), ()] } ;
                UInt8(125) ^ UInt8(117)
            
            case _ => 
                UInt8(130) | var23
            
        }) {
        case _ => 
            """
O34FJ
;3<WB
""";
            var671 ^= var1048;
            Option<Bool>.Some(false)
        
    };
    let var1060 : (Float64, Bool, Float64, Int16, Range<UInt8>) = ((-47.0), ((Class91(), Int32(UInt8(175))) is Range<UInt32>), Float64(Float32(Float32(24.0))), Int16(Int8(UInt8(101))), (UInt8(90)&127..UInt8(Int8(-96))&127:(Int64(UInt16(UInt16(29)))|1)));
    var1054 |= var1060[3];
    var var1117 : Range<UInt32> = (UInt32(187)&127..=UInt32(2)&127:((-101)|1));
    if (try { // block id: 1084
        Int32(-35);
        Option<Unit>.Some(var397);
        var601
    } catch (e: Exception) { // block id: 1089
        let var1091 : Bool = false;
        var1091
    }) { if ((Option<Bool>.None ?? true)) { // block id: 1101
        Option<Unit>.Some(var186);
        if (true) { var1107 } else { var1107 } 
    } else if ((UInt16(171)|>func9)) { // block id: 1113
        let var1125 : UInt32 = UInt32(Int16(UInt8(UInt8(UInt8(130)))));
        if (var601) { var1117 } else { (UInt32(16)&127..=var1125&127:(var313|1)) } ;
        'a'
    } else { // block id: 1133
        var1136 <<= ((var1136) & 7);
        true;
        var1107
    } } else { if (false) { ((UInt32(53)&127..=UInt32(17)&127:(8|1)), "}DYoLNtZU;", (var606&127..Int16(-25)&127:((-39)|1)), Int32(32), var1107, UInt32(41), [var186, var397, var1163, var1163, var186, var1163, var323, (), (), ()]) } else { var1173 } [4] } 
}

func func60(param61 : UInt64) : Enum57 { // block id: 62
    var var77 : Float64 = Float64((-112.0));
    var loopTimeVar89 : Int64 = 0;
    do {
        loopTimeVar89++;
        var loopTimeVar87 : Int64 = 0;
        do {
            loopTimeVar87++;

        } while ((var83) && loopTimeVar87 < 100 ) 
    } while (((var71 ?? (-44.0)) <= ((-111.0) - var77)) && loopTimeVar89 < 100 ) ;
    let var135 : Int32 = Int32(Int32(-7));
    func func95(param96 : Range<Int16>, optionalParam97 ! : Range<UInt32> = (UInt32(79)&127..UInt32(217)&127:((-71)|1)), namedParam102 ! : Unit) : Class91 { // block id: 103
        var var107 : Class91 = Class91();
        var107.var110 ^= Class91.var115;
        var var127 : Rune = 'U';
        (try { // block id: 121
            var23++;
            var107
        } catch (_) { // block id: 125
            var127;
            Class91()
        } finally { // block id: 130
            (Int32(99)&127..=Int32(1)&127:(-24)|1);
            var107
        }, Int32(var135))[0]
    }
;
    func func140(param141 : Range<Int32>, param142 : Int16, optionalParam143 ! : Int64 = (-27)) : Range<Int16> { // block id: 145
        let var212 : ?Range<Int32> = ((UInt16(136)&127..=UInt16(92)&127:39|1) as Range<Int32>);
        Class91.func149(optionalParam150 : (var212 ?? param141), optionalParam156 : var218.var221, namedParam169 : (param142&127..param142&127:(optionalParam143|1)));
        try { // block id: 228
            let var233 : Range<UInt16> = (UInt16(34)&127..=UInt16(124)&127:(-99)|1);
            if (var83) { (UInt16(44)&127..=UInt16(253)&127:(-107)|1) } else { var233 } 
        } finally { // block id: 235
            var loopTimeVar239 : Range<UInt64> = (UInt64(UInt64(UInt64((-99))))&127..=UInt64(17)&127:(Int64(UInt16(29))|1));
            for (i in loopTimeVar239 where false) {

            };
            (Option<Range<UInt16>>.None ?? (UInt16(166)&127..=UInt16(103)&127:(38|1)))
        };
        try { // block id: 261
            var186;
            var var265 : Float64 = Float64(Float32(Float32(-1.0)));
            Option<Float64>.Some(var265);
            var270
        } finally { // block id: 284
            var83 ||= true;
            if (var83) { (var292, var23, param61, var186, (param142&127..=param142&127:((-102)|1)), UInt32(193)) } else { var270 } 
        }[4]
    }
;
    let var1195 : (Option<Option<Range<UInt16>>>) -> Rune = { lambdaParameter1198 : Option<Option<Range<UInt16>>> => '1' };
    func95(func140((var135&127..Int32(-79)&127:(118|1)), Int16(45), optionalParam143 : var313), namedParam102 : try (resource = Class91()) { // block id: 317
        var313 -= (-37)
    } finally { // block id: 321
        var323;
        var23;
        var83 &&= var83
    }).func330(var935[1], var544, (Option<Option<Range<UInt16>>>.None|>var1195), namedParam334 : var1136 % ((UInt8(76)) | 1));
    let var1206 : Enum57 = Enum57.defaultValue;
    var1206
}




func func1430(param1431 : Int16, optionalParam1432 ! : Int32 = Int32(Int8(123)), namedParam1435 ! : Option<Unit>, optionalParam1436 ! : (Float32, Range<UInt32>, UInt32, UInt16, Int8) = (Float32(-20.0), (UInt32(49)&127..=UInt32(76)&127:(-5)|1), UInt32(UInt32(162)), UInt16(Int8(-125)), Int8(UInt8(UInt8(176))))) : Option<UInt8> { // block id: 1447
    (if ((Option<Bool>.None ?? var601)) { (if (var1459) { var1463 } else { var1463 } ) } else { try { // block id: 1467
        Option<(Float64, Bool, Float64, Int16, Range<UInt8>)>.None
    } finally { // block id: 1469
        var518 += 8.0;
        var1463
    } }  ?? try { // block id: 1475
        (var518, var601, 93.0, var1054, (UInt8(226)&127..=UInt8(14)&127:(-30)|1));
        var407 -= var407;
        let var1497 : (Float64, Bool, Float64, Int16, Range<UInt8>) = (20.0, ((Int64(Int8(-73)) as Option<Option<Range<UInt16>>>) is (Range<Int16>) -> Unit), Float64(Float32(87.0)), Int16(-107), (UInt8(91)&127..=UInt8(UInt8(97))&127:(Int64(Int16(-93))|1)));
        if (true) { (60.0, var83, (-122.0), var606, (UInt8(113)&127..=UInt8(36)&127:(var313|1))) } else { var1497 } 
    } catch (_) { // block id: 1513
        if (var1459) { var1517 } else { var1517 } 
    } finally { // block id: 1530
        if (var1459) { Option<Float64>.Some(var518) } else { Option<Float64>.None } ;
        var1517
    });
    Option<UInt8>.None
}



public func func1638(namedParam1639 ! : (Enum57) -> Range<Int16>, optionalParam1642 ! : (Range<UInt32>, String, Range<Int16>, Int32, Rune, UInt32, Array<Unit>) = ((UInt32(175)&127..UInt32(89)&127:40|1), "HYFnj7*4bi", (Int16(90)&127..Int16(114)&127:((-76)|1)), Int32(-63), 'R', UInt32(Int8(UInt8(224))), [(), (), (), (), (), (), (), (), (), ()]), optionalParam1656 ! : (Enum57) -> Range<Int16> = func341) : Range<UInt64> { // block id: 1660
    var var1669 : Bool = true;
    let var1681 : Int64 = 102;
    let var1708 : Range<Int8> = (Int8(-113)&127..=Int8(-99)&127:(Int64(Int32(-29))|1));
    let var1720 : Int16 = Int16(-107);
    let var1777 : Unit = ();
    (if ((var1669 && var1669)) { Option<Array<Unit>>.None } else { match ((UInt8(42)&127..=var1677&127:(var1681|1))) {
        case _ => 
            Option<Array<Unit>>.None;
            let var1688 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
            Option<Array<Unit>>.Some(var1688)
        
    } }  ?? match ((Option<Range<Int8>>.None ?? var1708)) {
        case caseVar1716 => 
            (var1720&127..Int16(38)&127:((-38)|1));
            [(), (), (), (), (), (), (), (), (), ()]
        
        case _ => 
            var1669 &&= false;
            var var1732 : Range<Int64> = (Int64(UInt8(UInt8(117)))&127..=Int64(UInt8(203))&127:((-83)|1));
            var1732;
            [var1742, (), (), (), var1742, var1742, (), (), var1742, ()]
        
        case _ => 
            [var1742, (), (), (), var1742, (), (), var1742, (), var1742]
        
        case _ => 
            var1771 >>= ((Int16(116)) & 7);
            [(), var1777, var1777, var1742, (), var1742, (), (), (), ()]
        
    });
    var var1805 : Array<Unit> = Array<Unit>(10){ i => () };
    var var1824 : UInt32 = UInt32(142);
    match (match (if (true) { [var1793, var1742, var1742, (), var1793, var1793, var1777, var1793, var1742, var1793] } else { var1805 } ) {
            case _ : Int16 => 
                var1821;
                var1824
            
            case _ => 
                var1793;
                ();
                var1824 + UInt32(53)
            
            case _ : Int8 => 
                var1824
            
            case _ : Int32 => 
                true;
                if (var1669) { 'j' } else { 'y' } ;
                var1824
            
            case _ => 
                ((UInt16(4)&127..=var1853&127:(var1681|1)), UInt8(54), UInt64(196), (), var1860, var1824);
                var1777;
                UInt32(10)
            
        }) {
        case _ : Rune => 
            var1708;
            var1871 >>= ((var1871) & 7)
        
        case _ => 
            ()
        
    };
    match (Option<Array<Unit>>.None) {
        case _ : Range<UInt32> => 
            (UInt64(79)&127..UInt64(21)&127:(-121)|1)
        
        case _ : Option<Range<Int8>> => 
            var1669 ||= false;
            Float32(-107.0);
            var1891
        
        case caseVar1899 => 
            var1742;
            var1793;
            (UInt64(41)&127..=UInt64(128)&127:(var1907|1))
        
        case _ => 
            var1742;
            var1891
        
    }
}

public func func1630(param1631 : Range<UInt8>) : Range<UInt64> { // block id: 1632
    let var1922 : Range<Int32> = (Int32(-3)&127..Int32(-9)&127:(-98)|1);
    let var1942 : Bool = true;
    var var1963 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    (var1635 ?? func1638(namedParam1639 : func341, optionalParam1642 : match ((UInt32(171)&127..=UInt32(119)&127:37|1)) {
        case _ => 
            var1922;
            var1173
        
        case caseVar1927 : Int8 => 
            Int16(-88);
            if (true) { var1173 } else { var1173 } 
        
        case caseVar1936 => 
            ();
            var389;
            if (var1942) { var1173 } else { var1173 } 
        
        case _ => 
            let var1957 : Int32 = Int32(UInt8(131));
            if (true) { (var1952, var1821, (Int16(87)&127..Int16(98)&127:(-99)|1), var1957, var1107, UInt32(107), var1963) } else { (var1952, "8V}Myn[@Z$", (Int16(99)&127..Int16(118)&127:(-52)|1), Int32(11), var1107, UInt32(41), [(), (), (), (), (), (), (), (), (), ()]) } 
        
    }, optionalParam1656 : func341))
}




main(): Int64 {
    try {
        let var14 : (UInt16) -> Bool = { lambdaParameter17 : UInt16 => false };
        var loopTimeVar27 : Range<UInt64> = (UInt64(Int8(-21))&127..=UInt64(128)&127:(43|1));
        for (i in loopTimeVar27 where (UInt16(60)|>var14)) {
            var23
        };
        var50|>{ lambdaParameter47 : Range<Int16> =>  };
        let var1350 : Range<UInt32> = (UInt32(216)&127..UInt32(50)&127:62|1);
        let var1392 : (Range<UInt64>, Enum57, Range<Int64>) = ((UInt64(47)&127..=UInt64(89)&127:69|1), Enum57.defaultValue, ((-101)&127..=92&127:67|1));
        func func1375(param1376 : Option<Range<UInt64>>) : String { // block id: 1377
            let var1407 : Unit = ();
            let var1560 : Array<Option<UInt8>> = [(() as UInt8), Option<UInt8>.Some(UInt8(35)), (Option<Option<Float64>>.Some((Option<Option<Range<UInt16>>>.Some(Option<Range<UInt16>>.None) as Float64)) as UInt8), (UInt32(Int8(Int8(12))) as UInt8), (Class91() as UInt8), Option<UInt8>.None, Option<UInt8>.None, (UInt32(245) as UInt8), Option<UInt8>.Some(UInt8(251)), (Option<Option<Float64>>.None as UInt8)];
            func func1380(param1381 : Range<UInt64>, param1382 : Option<Range<Int32>>, optionalParam1383 ! : Option<UInt8> = (() as UInt8), namedParam1386 ! : Range<Int8>) : Bool { // block id: 1387
                var var1602 : Enum57 = Enum57.defaultValue;
                match (if (match (var1392) {
                        case caseVar1399 => 
                            var83
                        
                        case caseVar1404 : Range<UInt32> => 
                            var1407;
                            var594;
                            false || var601
                        
                        case _ : UInt8 => 
                            false && true
                        
                        case _ : Option<UInt8> => 
                            var83
                        
                        case _ => 
                            var912 % (((-125)) | 1);
                            var83
                        
                    }) { func1430(var1054, namedParam1435 : var1540, optionalParam1436 : (var433, (UInt32(249)&127..=var1548&127:((-34)|1)), var1548, var407, Int8(-17))) } else { var1560[7] } ) {
                    case caseVar1588 : (Option<Option<Option<Range<UInt16>>>>, String, Range<Int32>, Range<UInt8>) => 
                        ();
                        if (false) { (UInt64(57)&127..UInt64(47)&127:104|1) } else { (UInt64(187)&127..=UInt64(193)&127:(var313|1)) } ;
                        if (false) { Enum57.defaultValue } else { var1602 } 
                    
                    case _ => 
                        Enum57.defaultValue
                    
                };
                match (if (true) { ['u', 't', 'U', '1', 'A', 'o', '2', 'i', 'A', 'A'] } else { [var1107, 'K', 'P', 'y', var1107, var1107, 'C', var1107, 'L', var1107] } [3]) {
                    case _ => 
                        (126&127..=36&127:(-41)|1)
                    
                };
                var601
            }
;
            var loopTimeVar2025 : Int64 = 0;
            while ((func1380(((UInt8(102)&127..UInt8(209)&127:(-79)|1)|>func1630), (Int8(-117) as Range<Int32>), optionalParam1383 : var863, namedParam1386 : [(Int8(-71)&127..Int8(-87)&127:(-113)|1), (Int8(110)&127..=Int8(-47)&127:(-69)|1), (Int8(79)&127..=Int8(94)&127:73|1), (Int8(-33)&127..=Int8(-120)&127:50|1), (Int8(-4)&127..Int8(-47)&127:(-69)|1), (Int8(87)&127..=Int8(-125)&127:41|1), (Int8(-65)&127..=Int8(125)&127:98|1), (Int8(108)&127..=Int8(98)&127:(-65)|1), (Int8(-16)&127..Int8(12)&127:(-54)|1), (Int8(21)&127..Int8(24)&127:(-25)|1)][4])) && loopTimeVar2025 < 100 ) {
                loopTimeVar2025++;
                ();
                try { // block id: 1986
                    if (false) { Option<Range<UInt16>>.None } else { var1991 } ;
                    ((UInt64(205)&127..=UInt64(69)&127:(-28)|1), Enum57.defaultValue, (81&127..(-22)&127:(-33)|1));
                    Int32(-28)
                } finally { // block id: 2021
                    var323;
                    var1048
                }
            };
            if ((try { // block id: 2029
                if (true) { var822 } else { Option<Bool>.None } 
            } catch (_) { // block id: 2034
                Option<Bool>.None
            } finally { // block id: 2036
                var83;
                if (var1459) { Option<Bool>.Some(false) } else { var822 } 
            } ?? [true, true, false, true, false, true, true, true, false, false][5])) { // block id: 2047
                let var2054 : ?Array<Rune> = (Option<Option<Range<UInt16>>>.None as Array<Rune>);
                (var2054 ?? [var1107, var1107, 'a', var1107, 'E', var1107, '4', 'Q', var1107, var1107]);
                var186;
                try (resource = Class91()) { // block id: 2070
                    var186
                } catch (_) { // block id: 2072
                    var993 += var993;
                    ()
                }
            };
            var var2298 : ?Bool = ((Int16(44)&127..=Int16(38)&127:(-105)|1) as Bool);
            if ((match (var313) {
                case _ => 
                    UInt16(218);
                    var671 **= (Int32(70) & 3);
                    (var1054&127..var606&127:((-23)|1))
                
            } is (Float64, Int64, Option<Bool>, Float32))) { // block id: 2091
                match ('V') {
                    case 'p' | 'P' | 'M' | 'a' => 
                        var1163;
                        ();
                        """
3\\hS-
+HSI4
"""
                    
                    case _ : Range<Int32> => 
                        UInt16(77);
                        var397;
                        if (false) { """
)][<$
fO0(@
""" } else { "47za{4J;L ," } 
                    
                    case _ => 
                        var540
                    
                    case _ => 
                        if (false) { var540 } else { var540 } 
                    
                }
            } else if (try { // block id: 2120
                var1350;
                true
            } finally { // block id: 2123
                ();
                if (false) { var1560 } else { var1560 } ;
                false
            }) { // block id: 2130
                try { // block id: 2132
                    var671 **= (var1048 & 3);
                    "a{51 HrrT8i"
                } catch (e: Exception) { // block id: 2137
                    var601 ||= false;
                    ###"mqTCBx;xx&"###
                } finally { // block id: 2142
                    """
r]BZ+
W\\yDY
"""
                }
            } else { // block id: 2144
                var var2293 : (Int16, Int32, Option<Unit>, (Float32, Range<UInt32>, UInt32, UInt16, Int8)) -> Option<UInt8> = func1430;
                if (var83) { (Class91(namedParam2150 : var2293, optionalParam2156 : [(), (), (), (), (), (), (), (), (), ()], optionalParam2158 : var863, namedParam2161 : var2298), Int32(-61)) } else { (var218, var671) } ;
                var540
            }
        }
;
        let var2358 : Enum57 = Enum57.defaultValue;
        let var2410 : UInt32 = UInt32(200);
        func func1372() : Bool { // block id: 1373
            func1375(var2307);
            var var2329 : ???Range<UInt16> = Option<Option<Option<Range<UInt16>>>>.Some((Float64(Float32(-87.0)) as Option<Range<UInt16>>));
            var loopTimeVar2335 : Range<UInt64> = (UInt64(Int8(Int8(Int8(-113))))&127..UInt64(213)&127:((-12)|1));
            var loopTimeVar2350 : Int64 = 0;
            var loopTimeVar2414 : Int64 = 0;
            var loopTimeVar2430 : Int64 = 0;
            [(Option<Unit>.Some(var397) ?? var323), for (i in loopTimeVar2335 where false) {
                var var2322 : UInt16 = UInt16(UInt16(234));
                var2322 |= var407;
                if (true) { var2329 } else { Option<Option<Option<Range<UInt16>>>>.None } 
            }, (var1540 ?? ()), while ((var601) && loopTimeVar2350 < 100 ) {
                loopTimeVar2350++;

            }, match (((var389&127..var389&127:((-85)|1)), var2358, (126&127..(-27)&127:126|1))) {
                case caseVar2363 => 
                    ()
                
                case caseVar2368 : UInt8 => 
                    var23 >>= ((var1136) & 7);
                    (Int32(84)&127..=Int32(23)&127:20|1);
                    var186
                
                case (_ : Option<UInt8>,caseVar2377 : Range<UInt8>,caseVar2378 : Option<(Float64, Bool, Float64, Int16, Range<UInt8>)>) => 
                    (var433, (UInt32(47)&127..=var1548&127:(var912|1)), var1548, UInt16(79), Int8(17));
                    var323;
                    var518 -= var518
                
                case _ => 
                    var323
                
            }, if (var601) { // block id: 2398
                ();
                var186
            } else if (var601) { // block id: 2402
                var323
            }, while ((true) && loopTimeVar2414 < 100 ) {
                loopTimeVar2414++;
                var1548 ** (var2410 & 3);
                var397
            }, (), (Option<Unit>.Some(var1163) ?? var323), do {
                loopTimeVar2430++;
                ();
                Option<Float64>.None
            } while ((var83) && loopTimeVar2430 < 100 ) ][7];
            var var2446 : ?Bool = (Option<(Float64, Bool, Float64, Int16, Range<UInt8>)>.Some((122.0, (75 is Option<Class91>), 22.0, Int16(Int8(70)), (UInt8(6)&127..UInt8(171)&127:(-94)|1))) as Bool);
            var var2461 : ?Bool = (Option<Bool>.Some(true) as Bool);
            (try { // block id: 2434
                var518 += var518;
                """
]:`]i
%hg:E
""";
                var var2441 : Bool = ("""
&8K>4
u}2&C
""" is (Range<Int16>, Range<UInt32>, Unit) -> Class91);
                if (var2441) { Option<Bool>.None } else { var2446 } 
            } catch (e: Exception) { // block id: 2457
                (UInt64(190)&127..=UInt64(15)&127:(-68)|1);
                var1392;
                var2461
            } ?? true)
        }
;
        func func53() : Int64 { // block id: 54
            var var1209 : (UInt64) -> Enum57 = func60;
            let var1238 : ?Bool = ((UInt16(229)&127..UInt16(138)&127:87|1) as Bool);
            let var1279 : UInt32 = UInt32(153);
            let var1301 : Float64 = 104.0;
            let var1309 : ?Range<UInt64> = (((-122)&127..0&127:95|1) as Range<UInt64>);
            func func1285() : Range<Int64> { // block id: 1286
                match (if (var601) { var71 } else { (var1297 ?? Option<Float64>.Some(var1301)) } ) {
                    case caseVar1305 : Option<UInt8> => 
                        var464;
                        var1309;
                        if (var83) { var1315 } else { (59&127..=36&127:((-94)|1)) } 
                    
                    case caseVar1323 => 
                        var601 ||= var83;
                        var186;
                        ((-18)&127..(-75)&127:45|1)
                    
                    case _ : (Bool, Option<Range<UInt16>>, Range<Int32>) => 
                        var1163;
                        var var1338 : ?Array<Unit> = Option<Array<Unit>>.None;
                        if (true) { Option<Array<Unit>>.None } else { var1338 } ;
                        (var313&127..=var912&127:((-79)|1))
                    
                    case caseVar1346 => 
                        (var1350, "S2HB;B\\279", (Int16(43)&127..=Int16(29)&127:(-88)|1), Int32(43), '3', var1279, var202);
                        var671 *= Int32(-109);
                        if (true) { ((-47)&127..=var912&127:(var912|1)) } else { (31&127..47&127:75|1) } 
                    
                    case _ => 
                        var1315
                    
                }
            }
;
            func func1229(param1230 : String, param1231 : Option<Array<Unit>>, param1232 : Bool) : Bool { // block id: 1233
                var var1243 : Range<UInt64> = (UInt64(20)&127..=UInt64(142)&127:(-89)|1);
                var var1261 : Enum57 = Enum57.defaultValue;
                (if ((var1238 ?? param1232)) { var1243 } else { (var1251 ?? (UInt64(99)&127..UInt64(196)&127:(-45)|1)) } , ((var1243, var1261, ((-127)&127..(-112)&127:124|1)), (UInt64(127)&127..UInt64(193)&127:((-105)|1)), (UInt64(99)&127..=UInt64(19)&127:(-122)|1), ((var407&127..=var407&127:(var313|1)), var1136, var389, var397, (Int16(29)&127..=Int16(106)&127:(-106)|1), var1279), ((-97)&127..61&127:57|1))[0][1], func1285());
                func1372()
            }
;
            var loopTimeVar2481 : Int64 = 0;
            do {
                loopTimeVar2481++;
                func1229("""
A }[]
ybFKP
""", Option<Array<Unit>>.Some([(), var186, var397, (), (), (), var323, (), (), var186]), var601)
            } while ((match ((var389|>var1209)) {
                case defaultValue => 
                    false && false
                
                case _ => 
                    Option<Option<Option<Range<UInt16>>>>.None;
                    var397;
                    var83
                
                case _ => 
                    true
                
            }) && loopTimeVar2481 < 100 ) ;
            ();
            Int64((('I' as Int8) ?? var993))
        }
;
        func53()
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var606*var606), 64)
        crccheck.updateBuffer(UInt64(var1054*var1054), 64)
        crccheck.updateBuffer(UInt64(var1136*var1136), 64)
        crccheck.updateBuffer(UInt64(var1548*var1548), 64)
        crccheck.updateBuffer(UInt64(var2410*var2410), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_expected_left_brace
// ASSERT: scan parse_expected_case


