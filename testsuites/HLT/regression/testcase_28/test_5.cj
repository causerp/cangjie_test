/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output


public let var39 : UInt32 = UInt32(189)
public let var42 : Int16 = Int16(-115)
let var50 : Class46 = Class46()
var var61 : Bool = (() is Class46)
var var73 : Int16 = Int16(88)
public var var301 : ?Float64 = (Option<Range<UInt16>>.None as Float64)
public var var319 : UInt16 = UInt16(153)
public let var355 : Range<Int16> = (Int16(-54)&127..=Int16(-19)&127:(-81)|1)
public let var408 : Unit = ()
let var516 : Array<Bool> = [false, true, true, true, true, false, true, true, false, false]
public var var557 : UInt8 = UInt8(Int8(2))
public let var685 : Int8 = Int8(Int8(16))
public let var694 : Range<UInt8> = (UInt8(35)&127..UInt8(129)&127:58|1)
var var784 : Range<Int16> = (Int16(-69)&127..Int16(126)&127:(-115)|1)
public var var807 : Range<Int64> = (21&127..=(-62)&127:93|1)
var var886 : Float64 = Float64(Float32(Float32(-78.0)))
public var var968 : (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)) = (UInt64(91), Float32(Float32(Float32(115.0))), (Int32(Int8(UInt8(50)))&127..=Int32(56)&127:(Int64(1)|1)), (Int16(-58)&127..Int16(4)&127:74|1), ([false, false, true, false, true, true, true, true, false, true], (UInt8(245)&127..UInt8(UInt8(34))&127:(76|1)), (UInt8(32)&127..UInt8(UInt8(115))&127:(Int64(UInt32(124))|1)), ['W', 'b', '4', 'j', 'H', 'B', 'I', 'D', 'c', 'Q'], UInt32(30), Int64(Int64(UInt32(138)))))
let var1203 : (Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64))) = ((), (Int16(Int16(-1))&127..Int16(-5)&127:(Int64(UInt64(130))|1)), (Int8(67)&127..=Int8(-110)&127:((-89)|1)), (UInt64(217), Float32(59.0), (Int32(-80)&127..Int32(16)&127:(-25)|1), (Int16(Int8(-117))&127..=Int16(UInt8(150))&127:(110|1)), ([true, false, true, false, false, false, false, false, true, true], (UInt8(213)&127..UInt8(133)&127:125|1), (UInt8(6)&127..UInt8(70)&127:((-105)|1)), ['9', 'K', 'N', 'k', 'Q', '7', 'M', 'l', 'R', 'R'], UInt32(88), Int64(UInt8(109)))))
public var var1864 : (Range<Int32>, (Float64, Bool, Float64, UInt16, UInt32, Int16), Array<Bool>, Unit, Range<UInt32>, Range<Int64>, UInt32) = ((Int32(UInt16(63))&127..=Int32(-22)&127:((-35)|1)), ((-80.0), ([Option<Int16>.None, Option<Int16>.None, Option<Int16>.None, Option<Int16>.None, Option<Int16>.None, Option<Int16>.None, Option<Int16>.None, Option<Int16>.None, Option<Int16>.None, Option<Int16>.None] is Option<Unit>), Float64(Float64(38.0)), UInt16(UInt16(UInt8(118))), UInt32(Int8(UInt8(90))), Int16(UInt8(UInt8(27)))), [(((), Int16(13), (UInt32(44)&127..UInt32(68)&127:(54|1)), Option<Range<UInt16>>.None) is Float64), true, (UInt16(UInt8(147)) is Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>), true, ((UInt8(232)&127..=UInt8(115)&127:(49|1)) is Int64), (Option<Bool>.None is Range<UInt32>), true, ((UInt64(128), Float32(40.0), (Int32(-18)&127..Int32(-93)&127:(-76)|1), (Int16(-44)&127..=Int16(-19)&127:(15|1)), ([false, false, true, true, true, true, false, true, true, false], (UInt8(60)&127..UInt8(168)&127:(53|1)), (UInt8(132)&127..=UInt8(51)&127:(73|1)), ['0', 'z', 'O', 'U', '2', 'x', 's', '6', 'u', '8'], UInt32(225), 74)) is (() -> Unit, (Range<UInt32>) -> Option<Range<UInt16>>, Array<Option<Int16>>, Float32) -> (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64))), false, true], (), (UInt32(10)&127..UInt32(117)&127:62|1), (Int64(UInt64(UInt16(184)))&127..Int64(Int8(-3))&127:((-105)|1)), UInt32(245))
let var1973 : ?Array<Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>> = ((((), (Int16(14)&127..Int16(-88)&127:(-9)|1), (Int8(-38)&127..Int8(-95)&127:(-88)|1), (UInt64(221), Float32(-41.0), (Int32(-13)&127..Int32(-11)&127:((-46)|1)), (Int16(31)&127..Int16(104)&127:(-4)|1), ([true, false, true, false, true, true, true, true, false, false], (UInt8(80)&127..=UInt8(156)&127:(120|1)), (UInt8(19)&127..UInt8(183)&127:(65|1)), ['I', '3', 'p', 's', 'P', 'e', 'o', 'U', 'j', 'j'], UInt32(10), 18))), (Int8(Int8(-81))&127..=Int8(UInt8(122))&127:(79|1))) as Array<Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>>)
public let var2039 : ?(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64))) = ('y' as (Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64))))
var var2099 : Int64 = Int64(Int16(46))
public let var2107 : Bool = false
public var var2112 : Int32 = Int32(Int8(UInt8(33)))
let var2134 : UInt64 = UInt64(224)
let var2240 : Bool = ('I' is Array<Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>>)
public let var2868 : ???(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64))) = (Int64(UInt32(Int16(Int8(52)))) as Option<Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>>)
var var2895 : Rune = 'o'
public let var3651 : Array<Array<Bool>> = [[true, false, ((UInt64(110)&127..UInt64(29)&127:(-95)|1) is () -> (Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))), true, false, ([Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None, Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None, Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None, Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None, Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None, Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None, Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None, Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None, Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None, Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None] is UInt16), false, false, (([true, true, true, false, false, false, true, true, false, false], (UInt8(212)&127..=UInt8(130)&127:((-19)|1)), (UInt8(173)&127..UInt8(154)&127:6|1), ['t', 'C', 'u', 'H', 'f', '0', '4', 'Q', 'n', 'T'], UInt32(211), (-110)) is Range<UInt64>), false], [true, (((Int16(74)&127..Int16(-51)&127:(-127)|1), ((Int32(-101)&127..=Int32(-27)&127:((-89)|1)), ((-23.0), false, 41.0, UInt16(177), UInt32(75), Int16(-30)), [false, true, false, true, true, false, true, true, false, true], (), (UInt32(6)&127..UInt32(236)&127:((-74)|1)), ((-113)&127..62&127:((-49)|1)), UInt32(11)), UInt16(6), true) is (() -> Unit, (Range<UInt32>) -> Option<Range<UInt16>>, Array<Option<Int16>>, Float32) -> (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64))), false, (((Int16(33)&127..=Int16(-70)&127:19|1), ((Int32(18)&127..=Int32(-6)&127:((-97)|1)), (108.0, true, 58.0, UInt16(166), UInt32(119), Int16(76)), [true, true, true, false, false, false, true, false, true, true], (), (UInt32(187)&127..UInt32(225)&127:(-63)|1), (27&127..120&127:(-30)|1), UInt32(63)), UInt16(211), false) is Range<Int8>), false, (([Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None, Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None, Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None, Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None, Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None, Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None, Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None, Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None, Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None, Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None] as Bool) is (Unit, Int16, Range<UInt32>, Option<Range<UInt16>>)), false, false, false, ([Float32(-78.0), Float32(-98.0), Float32(99.0), Float32(88.0), Float32(19.0), Float32(92.0), Float32(18.0), Float32(13.0), Float32(37.0), Float32(-110.0)] is Unit)], [false, false, false, true, false, true, true, true, true, false], [true, true, false, false, true, false, false, true, false, true], [true, true, false, true, false, false, true, true, false, false], [((46.0, true, (-65.0), UInt16(85), UInt32(152), Int16(-32)) is () -> Unit), (Int32(UInt16(99)) is Array<Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>>), true, ((UInt16(30)&127..=UInt16(23)&127:62|1) is (() -> Unit, (Range<UInt32>) -> Option<Range<UInt16>>, Array<Option<Int16>>, Float32) -> (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64))), false, (((), (Int16(-28)&127..Int16(-22)&127:(33|1)), (Int8(-17)&127..=Int8(-22)&127:40|1), (UInt64(177), Float32(-95.0), (Int32(-98)&127..Int32(25)&127:((-118)|1)), (Int16(41)&127..=Int16(122)&127:(-15)|1), ([true, false, false, true, true, true, false, false, true, false], (UInt8(185)&127..=UInt8(79)&127:93|1), (UInt8(247)&127..UInt8(235)&127:(-101)|1), ['1', 'N', 'f', 'F', 'C', 'i', 'l', 'L', 'W', 'l'], UInt32(81), 89))) is UInt8), false, false, (Option<Float64>.None is Int8), true], [((((Int16(53)&127..Int16(117)&127:(125|1)), ((Int32(-6)&127..Int32(-16)&127:((-51)|1)), (103.0, true, (-51.0), UInt16(247), UInt32(191), Int16(-38)), [true, false, false, true, true, true, true, false, true, true], (), (UInt32(200)&127..UInt32(17)&127:(-100)|1), (119&127..=44&127:(-76)|1), UInt32(176)), UInt16(84), true) as Option<Bool>) is Option<Option<Bool>>), true, ([Float32(-35.0), Float32(-120.0), Float32(-112.0), Float32(61.0), Float32(78.0), Float32(54.0), Float32(-2.0), Float32(114.0), Float32(-85.0), Float32(30.0)] is Option<Array<Rune>>), false, ((UInt8(188)&127..UInt8(29)&127:((-18)|1)) is Range<UInt16>), (((-24)&127..114&127:94|1) is Float32), ([Float32(-95.0), Float32(-88.0), Float32(111.0), Float32(-26.0), Float32(-34.0), Float32(-1.0), Float32(-71.0), Float32(-88.0), Float32(-122.0), Float32(-5.0)] is (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64))), ((['z', 'c', 'y', 'b', 'n', '0', 'g', 'Q', 'j', 'u'] as Array<Rune>) is Range<UInt64>), ((Option<Option<Bool>>.None as Bool) is Option<Int16>), (([true, false, true, false, true, false, false, false, true, true], (UInt8(70)&127..=UInt8(34)&127:69|1), (UInt8(181)&127..UInt8(42)&127:((-109)|1)), ['9', 'X', 'Y', 'H', 'w', 'R', 'j', 'F', '5', 'o'], UInt32(65), (-123)) is (Range<UInt32>) -> Option<Range<UInt16>>)], [(((Int32(17)&127..=Int32(28)&127:(114|1)), ((-88.0), false, 48.0, UInt16(56), UInt32(163), Int16(-79)), [true, false, true, true, true, true, false, false, true, true], (), (UInt32(46)&127..=UInt32(103)&127:((-55)|1)), ((-23)&127..=(-2)&127:116|1), UInt32(32)) is Array<Array<Float32>>), true, (((((Int32(62)&127..=Int32(-84)&127:66|1), (18.0, true, 32.0, UInt16(187), UInt32(249), Int16(-33)), [false, false, true, false, false, true, false, false, false, true], (), (UInt32(63)&127..UInt32(202)&127:(-22)|1), ((-77)&127..(-20)&127:58|1), UInt32(133)), [Option<Int16>.None, Option<Int16>.None, Option<Int16>.None, Option<Int16>.None, Option<Int16>.None, Option<Int16>.None, Option<Int16>.None, Option<Int16>.None, Option<Int16>.None, Option<Int16>.None], Float32(-68.0), ((Int32(100)&127..Int32(13)&127:120|1), (22.0, false, 30.0, UInt16(48), UInt32(119), Int16(-108)), [false, false, true, false, true, false, true, true, true, false], (), (UInt32(215)&127..UInt32(62)&127:(32|1)), (98&127..=(-95)&127:(-14)|1), UInt32(155)), (UInt16(193)&127..UInt16(141)&127:73|1)) as Bool) is Enum2542), true, (((-108.0), false, 17.0, UInt16(252), UInt32(70), Int16(-9)) is Range<Int32>), ((['b', 'q', 'M', '6', '1', 'A', '8', 'E', 'A', 'b'], UInt8(41), UInt32(221), 56.0, UInt16(205), false) is (UInt64, Array<Bool>, Range<Int16>, (UInt32, Array<Float64>, Int8)) -> Class46), true, false, true, true], [true, true, false, true, true, true, false, true, true, true], [false, false, ((UInt8(23)&127..=UInt8(254)&127:(-110)|1) is (UInt16, Range<Int8>) -> Bool), true, true, ((96.0, true, 48.0, UInt16(205), UInt32(173), Int16(-36)) is Float32), (Enum2542.defaultValue is ((Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64))), Range<Int8>)), (((UInt8(247)&127..=UInt8(204)&127:14|1) as UInt16) is Option<Float64>), (Int8(120) is Array<Array<Float32>>), ((Option<Array<Rune>>.None as Float64) is Int32)]]
var var4171 : Range<UInt8> = (UInt8(105)&127..UInt8(7)&127:(112|1))
public let var4206 : String = """
nXI=O
B+_sU
"""
let var4241 : ?Unit = Option<Unit>.None
public var var4515 : Array<Option<Int16>> = [((['W', 'J', 'g', 'c', '2', 'U', '8', 'Q', 'w', 'u'], UInt8(141), UInt32(250), Float64(44.0), UInt16(Int16(-78)), (29 is (Float64, Bool, Float64, UInt16, UInt32, Int16))) as Int16), Option<Int16>.None, Option<Int16>.None, (Float64((-116.0)) as Int16), Option<Int16>.None, Option<Int16>.None, Option<Int16>.None, Option<Int16>.None, (Enum2542.defaultValue as Int16), ((Option<Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>>.None as Option<Bool>) as Int16)]
public var var4543 : Float32 = Float32(Float32(Float32(-68.0)))
public let var4889 : Bool = false
var var5229 : ?Bool = Option<Bool>.None
public let var5242 : ??Bool = Option<Option<Bool>>.None
public let var5282 : ?Array<Option<Int16>> = Option<Array<Option<Int16>>>.None
public let var5341 : ?Int16 = ((Option<Array<Option<Int16>>>.None as Array<Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>>) as Int16)
public let var5414 : ?Unit = (Option<Option<Unit>>.None as Unit)
let var5920 : Rune = 'C'
let var5926 : UInt32 = UInt32(51)
var var6001 : ?Array<Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>> = Option<Array<Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>>>.None
let var6102 : ?Range<UInt16> = (() as Range<UInt16>)
let var6132 : Bool = ((((), (Int16(22)&127..Int16(25)&127:((-51)|1)), (Int8(-44)&127..=Int8(-80)&127:(48|1)), (UInt64(105), Float32(-36.0), (Int32(48)&127..=Int32(-4)&127:(76|1)), (Int16(-23)&127..=Int16(-20)&127:(-11)|1), ([false, true, false, false, false, false, true, true, false, true], (UInt8(175)&127..=UInt8(44)&127:((-36)|1)), (UInt8(202)&127..UInt8(186)&127:((-48)|1)), ['K', 'O', 'f', '5', '9', 'Z', 'q', 'Q', '5', 'K'], UInt32(1), 73))) as Range<UInt16>) is ((Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64), (Range<Int16>, (Range<Int32>, (Float64, Bool, Float64, UInt16, UInt32, Int16), Array<Bool>, Unit, Range<UInt32>, Range<Int64>, UInt32), UInt16, Bool), Range<UInt8>) -> ((Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64))), Range<Int8>))
public let var6504 : Unit = ()
let var6534 : Array<Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>> = Array<Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>>(10){ i => Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None }
public let var6575 : (Float64, Bool, Float64, UInt16, UInt32, Int16) = (Float64(Float32(-83.0)), (((Int16(-48)&127..Int16(-110)&127:(-39)|1), ((Int32(-33)&127..Int32(-127)&127:(-20)|1), ((-128.0), false, (-118.0), UInt16(176), UInt32(117), Int16(112)), [true, false, false, true, true, true, true, false, true, false], (), (UInt32(119)&127..UInt32(79)&127:((-11)|1)), (6&127..=(-95)&127:(-35)|1), UInt32(39)), UInt16(50), true) is Range<UInt32>), Float64(Float32(-108.0)), UInt16(Int8(31)), UInt32(88), Int16(Int8(Int8(-100))))
public let var6717 : Bool = (['K', '9', 'v', 'm', 'l', 'L', 'U', 'o', 'G', 'a'] is Float64)
public let var6733 : Unit = ()
public var var6742 : Array<Float64> = [(-34.0), Float64((-67.0)), Float64(Float64(35.0)), 75.0, 91.0, Float64((-13.0)), Float64(Float64(Float32(-78.0))), Float64(Float64(Float32(-104.0))), Float64(Float32(119.0)), Float64(Float32(Float32(Float32(-107.0))))]
var var6773 : Range<UInt16> = (UInt16(UInt16(245))&127..=UInt16(250)&127:((-83)|1))
public let var6834 : Bool = false
public let var6878 : (Range<Int16>, (Range<Int32>, (Float64, Bool, Float64, UInt16, UInt32, Int16), Array<Bool>, Unit, Range<UInt32>, Range<Int64>, UInt32), UInt16, Bool) = ((Int16(Int16(21))&127..Int16(0)&127:(Int64(Int32(102))|1)), ((Int32(53)&127..Int32(UInt8(62))&127:(Int64(Int16(118))|1)), (Float64(Float32(11.0)), ([Float32(-101.0), Float32(-58.0), Float32(86.0), Float32(3.0), Float32(15.0), Float32(24.0), Float32(88.0), Float32(108.0), Float32(-7.0), Float32(-70.0)] is (Array<Float32>) -> ((Range<Int32>, (Float64, Bool, Float64, UInt16, UInt32, Int16), Array<Bool>, Unit, Range<UInt32>, Range<Int64>, UInt32), Array<Option<Int16>>, Float32, (Range<Int32>, (Float64, Bool, Float64, UInt16, UInt32, Int16), Array<Bool>, Unit, Range<UInt32>, Range<Int64>, UInt32), Range<UInt16>)), Float64((-86.0)), UInt16(Int8(-46)), UInt32(146), Int16(Int16(-26))), [(['r', '9', 'l', 'U', 'Y', 'g', 'X', 'F', 'R', 'u'] is Rune), (Option<Float64>.None is (Option<Array<Rune>>) -> Option<Unit>), true, false, ([[Float32(52.0), Float32(-96.0), Float32(91.0), Float32(0.0), Float32(-30.0), Float32(-14.0), Float32(-6.0), Float32(72.0), Float32(48.0), Float32(-44.0)], [Float32(-6.0), Float32(25.0), Float32(-114.0), Float32(-15.0), Float32(-99.0), Float32(-109.0), Float32(65.0), Float32(48.0), Float32(-51.0), Float32(-78.0)], [Float32(4.0), Float32(18.0), Float32(35.0), Float32(6.0), Float32(7.0), Float32(104.0), Float32(105.0), Float32(-5.0), Float32(-67.0), Float32(106.0)], [Float32(-33.0), Float32(32.0), Float32(100.0), Float32(-56.0), Float32(-77.0), Float32(50.0), Float32(17.0), Float32(105.0), Float32(-77.0), Float32(-40.0)], [Float32(-110.0), Float32(125.0), Float32(87.0), Float32(63.0), Float32(-5.0), Float32(-20.0), Float32(9.0), Float32(26.0), Float32(-118.0), Float32(-117.0)], [Float32(3.0), Float32(-60.0), Float32(-52.0), Float32(-24.0), Float32(24.0), Float32(-46.0), Float32(-48.0), Float32(-122.0), Float32(-100.0), Float32(-56.0)], [Float32(123.0), Float32(33.0), Float32(-42.0), Float32(57.0), Float32(56.0), Float32(-92.0), Float32(67.0), Float32(111.0), Float32(70.0), Float32(-90.0)], [Float32(-78.0), Float32(-51.0), Float32(-52.0), Float32(66.0), Float32(7.0), Float32(-54.0), Float32(-119.0), Float32(-24.0), Float32(36.0), Float32(-77.0)], [Float32(-58.0), Float32(109.0), Float32(-77.0), Float32(-92.0), Float32(29.0), Float32(68.0), Float32(35.0), Float32(-46.0), Float32(-26.0), Float32(80.0)], [Float32(110.0), Float32(-71.0), Float32(-91.0), Float32(108.0), Float32(-73.0), Float32(-31.0), Float32(124.0), Float32(-4.0), Float32(90.0), Float32(82.0)]] is Range<Int8>), true, (Int16(24) is Option<Int16>), true, (Int16(34) is Option<Array<Option<Int16>>>), ([false, false, true, false, false, true, false, true, true, true] is Range<UInt16>)], (), (UInt32(Int32(-124))&127..UInt32(24)&127:(30|1)), (Int64(UInt8(186))&127..Int64(UInt16(135))&127:((-81)|1)), UInt32(UInt8(65))), UInt16(Int16(Int16(UInt8(60)))), (((['A', 'q', 'i', 'a', 'j', 'K', 'x', 'J', '9', 'n'], UInt8(93), UInt32(57), (-113.0), UInt16(20), true) as (Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))) is Option<Bool>))
public let var7115 : ?Float64 = Option<Float64>.None
public var var7158 : ??(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64))) = ([(-3.0), (-121.0), (-122.0), 51.0, (-8.0), (-109.0), (-15.0), 112.0, 63.0, (-61.0)] as Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>)
let var7348 : ((Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64))), Range<Int8>) = (((), (Int16(UInt8(214))&127..=Int16(-89)&127:(Int64(Int16(-27))|1)), (Int8(-61)&127..=Int8(Int8(13))&127:((-12)|1)), (UInt64(195), Float32(-119.0), (Int32(75)&127..=Int32(122)&127:(-101)|1), (Int16(29)&127..=Int16(9)&127:(-25)|1), ([false, true, false, true, true, true, false, false, false, false], (UInt8(192)&127..UInt8(175)&127:109|1), (UInt8(105)&127..UInt8(235)&127:((-93)|1)), ['b', '0', 'S', 'G', 'n', 'b', '4', 'q', 'B', 'P'], UInt32(229), (-116)))), (Int8(17)&127..Int8(Int8(-99))&127:((-117)|1)))
var var7398 : Int8 = Int8(Int8(Int8(-2)))
var var7460 : ??Unit = Option<Option<Unit>>.None
public let var7463 : ??Unit = Option<Option<Unit>>.None
public var var7488 : String = "C5\\${var4206}?4Q$]${var4206}uC"
let var7589 : (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64) = ([false, false, true, false, true, false, false, true, false, false], (UInt8(230)&127..UInt8(172)&127:(18|1)), (UInt8(206)&127..UInt8(183)&127:((-33)|1)), ['R', 'Y', 'y', 'P', 'F', 'v', 'Q', '6', 'E', 'Q'], UInt32(61), (-84))
public var var7900 : UInt32 = UInt32(Int32(51))
public let var7928 : Int64 = 37
public var var7973 : Int32 = Int32(UInt16(UInt16(Int8(UInt8(32)))))
var var8017 : ?Bool = ('S' as Bool)

public open class Class46 <: Resource {
    public init() { // block id: 48

    }
;
    public var var53 : UInt32 = UInt32(97);
    public static var var152 : Unit = ();
    public static var var392 : UInt64 = UInt64(115);
    public static var var567 : Int8 = Int8(125);
    static var var583 : Int64 = 108;
    static var var617 : (Array<Rune>, UInt8, UInt32, Float64, UInt16, Bool) = (['Z', 'u', 'g', 'f', 'f', 'b', 'E', 'D', 'M', 'Q'], UInt8(213), UInt32(185), (-25.0), UInt16(195), false);
    private static var var665 : Int16 = Int16(59);
    public init(param656 : UInt64, param657 : UInt32) { // block id: 658
        var loopTimeVar667 : Range<UInt64> = (UInt64(6)&127..UInt64(56)&127:(Int64(Int32(UInt16(UInt16(171))))|1));
        for (i in loopTimeVar667 where var61) {
            Class46.var665
        }
    }
;
    public static let var788 : Range<Int32> = (Int32(94)&127..Int32(-11)&127:(-116)|1);
    static let var935 : Bool = false;
    public static func func599(namedParam600 ! : UInt64, optionalParam601 ! : Array<Bool> = [false, false, true, false, false, true, false, false, false, false], namedParam603 ! : Range<Int16>, namedParam604 ! : (UInt32, Array<Float64>, Int8)) : Class46 { // block id: 605
        var152;
        var var649 : (Range<Int16>) -> Class46 = { lambdaParameter652 : Range<Int16> => Class46(UInt64(UInt8(UInt8(4))), UInt32(Int16(78))) };
        var var700 : (Range<Int32>, (Float64, Bool, Float64, UInt16, UInt32, Int16), Array<Bool>, Unit, Range<UInt32>, Range<Int64>, UInt32) = ((Int32(-59)&127..Int32(-127)&127:(Int64(UInt16(110))|1)), ((-49.0), true, Float64(Float32(Float32(124.0))), UInt16(Int16(59)), UInt32(139), Int16(UInt16(246))), [(Option<Range<UInt16>>.Some((UInt16(215)&127..=UInt16(30)&127:(-113)|1)) is Range<UInt32>), (((Int32(101)&127..=Int32(33)&127:(-50)|1), ((-124.0), false, 101.0, UInt16(236), UInt32(215), Int16(-17)), [false, true, true, true, true, true, false, true, true, false], (), (UInt32(179)&127..=UInt32(50)&127:((-75)|1)), ((-91)&127..=(-51)&127:((-108)|1)), UInt32(8)) is (Array<Rune>, UInt8, UInt32, Float64, UInt16, Bool)), true, (((-31.0), true, 52.0, UInt16(39), UInt32(76), Int16(-34)) is (UInt32, Array<Float64>, Int8)), true, ((UInt8(202)&127..=UInt8(52)&127:(-57)|1) is Option<Bool>), (Int32(UInt8(20)) is Range<Int16>), true, true, ((UInt32(196)&127..=UInt32(102)&127:80|1) is Int16)], (), (UInt32(175)&127..=UInt32(40)&127:(-126)|1), (Int64(Int16(43))&127..Int64(Int8(Int8(-17)))&127:(Int64(UInt8(Int8(-50)))|1)), UInt32(250));
        let var791 : (Float64, Bool, Float64, UInt16, UInt32, Int16) = (Float64(Float64(Float32(107.0))), false, 50.0, UInt16(69), UInt32(117), Int16(Int16(UInt8(11))));
        var var840 : (Range<Int16>, (Range<Int32>, (Float64, Bool, Float64, UInt16, UInt32, Int16), Array<Bool>, Unit, Range<UInt32>, Range<Int64>, UInt32), UInt16, Bool) = ((Int16(96)&127..Int16(Int16(39))&127:(Int64(Int16(-122))|1)), ((Int32(-86)&127..=Int32(Int32(-39))&127:(116|1)), (Float64((-10.0)), true, Float64(89.0), UInt16(UInt16(222)), UInt32(12), Int16(Int8(-127))), [false, true, false, false, false, true, false, false, false, false], (), (UInt32(Int8(105))&127..=UInt32(193)&127:(Int64(Int8(-10))|1)), ((-48)&127..85&127:104|1), UInt32(218)), UInt16(UInt16(148)), false);
        let var944 : Range<UInt32> = (UInt32(56)&127..=UInt32(46)&127:112|1);
        match ((var685&127..=Int8(-68)&127:((-115)|1))) {
            case _ => 
                var694;
                true;
                ((Int16(12)&127..Int16(23)&127:126|1), var700, var319, var61)
            
            case caseVar778 => 
                var152;
                ();
                (var784, (var788, var791, optionalParam601, (), (UInt32(81)&127..=UInt32(46)&127:5|1), var807, var39), var319, true)
            
            case caseVar814 : Float32 => 
                ();
                [false, var61, var61, var61, false, var61, var61, var61, true, var61];
                ((Int16(-108)&127..=Int16(68)&127:(-93)|1), var700, UInt16(143), var61)
            
            case _ : Range<UInt16> => 
                ();
                var var906 : Range<UInt32> = (UInt32(188)&127..=UInt32(Int8(71))&127:(39|1));
                if (false) { var840 } else { (namedParam603, ((Int32(10)&127..Int32(-6)&127:109|1), ((-37.0), true, var886, var319, var39, var42), [true, var61, var61, var61, false, false, var61, var61, var61, true], (), var906, (8&127..var583&127:(var583|1)), UInt32(67)), UInt16(251), var61) } 
            
            case _ => 
                ((Int16(65)&127..=var42&127:(var583|1)), (var788, var791, [var61, true, var61, var61, var935, false, var61, var61, var935, false], (), var944, var807, UInt32(197)), UInt16(25), var61)
            
        }[0]|>var649
    }
;
    var var1065 : Unit = ();
    private var var1187 : ?Array<Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>> = Option<Array<Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>>>.None;
    static let var1248 : ?(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64))) = Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None;
    private static let var1262 : Float64 = (-55.0);
    open func func1171() : (Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64))) { // block id: 1172
        ();
        var var1192 : ?(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64))) = (UInt16(Int8(75)) as (Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64))));
        ((var1187 ?? [Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None, var1192, var1192, var1192, Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None, var1192, var1192, Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.Some(var1203), var1248, Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None])[7] ?? try { // block id: 1253
            var1203
        } finally { // block id: 1255
            var408;
            (['2', 'J', 'w', 'l', 'Q', 'a', 'w', 'z', 'j', 'm'], UInt8(229), var53, var1262, UInt16(254), true);
            var1203
        })
    }
;
    public let var1847 : Unit = ();
    public static let var2145 : ((Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64))), Range<Int8>) = (((), (Int16(19)&127..=Int16(90)&127:(-119)|1), (Int8(88)&127..Int8(-92)&127:58|1), (UInt64(65), Float32(-72.0), (Int32(-76)&127..=Int32(-17)&127:(16|1)), (Int16(-34)&127..Int16(18)&127:(87|1)), ([false, true, false, true, false, false, true, true, false, false], (UInt8(191)&127..=UInt8(98)&127:((-68)|1)), (UInt8(168)&127..=UInt8(136)&127:((-95)|1)), ['v', 'P', 'H', 'S', 'y', '8', 'z', 'V', 'Z', '5'], UInt32(143), (-80)))), (Int8(-85)&127..=Int8(-28)&127:((-88)|1)));
    public var var2300 : Bool = false;
    public var var2430 : ??Bool = Option<Option<Bool>>.None;
    public static let var2433 : ?Bool = Option<Bool>.None;
    public static let var2503 : (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64) = ([true, true, true, true, false, true, false, false, true, true], (UInt8(100)&127..UInt8(100)&127:((-110)|1)), (UInt8(124)&127..=UInt8(53)&127:(-102)|1), ['D', '6', 'n', '7', 'e', 'r', 'V', '3', 'S', 'C'], UInt32(117), (-11));
    public static var var4571 : Int8 = Int8(-68);
    private var var4597 : Range<Int32> = (Int32(-61)&127..=Int32(94)&127:(-102)|1);
    public var var4772 : Range<UInt16> = (UInt16(113)&127..=UInt16(220)&127:(-84)|1);
    private var var4778 : ((Range<Int32>, (Float64, Bool, Float64, UInt16, UInt32, Int16), Array<Bool>, Unit, Range<UInt32>, Range<Int64>, UInt32), Array<Option<Int16>>, Float32, (Range<Int32>, (Float64, Bool, Float64, UInt16, UInt32, Int16), Array<Bool>, Unit, Range<UInt32>, Range<Int64>, UInt32), Range<UInt16>) = (((Int32(-75)&127..=Int32(34)&127:5|1), ((-99.0), true, 17.0, UInt16(80), UInt32(230), Int16(46)), [true, true, false, true, false, true, false, false, false, true], (), (UInt32(53)&127..=UInt32(215)&127:33|1), ((-53)&127..(-28)&127:((-126)|1)), UInt32(96)), [Option<Int16>.None, Option<Int16>.None, Option<Int16>.None, Option<Int16>.None, Option<Int16>.None, Option<Int16>.None, Option<Int16>.None, Option<Int16>.None, Option<Int16>.None, Option<Int16>.None], Float32(-5.0), ((Int32(-73)&127..Int32(62)&127:72|1), ((-35.0), true, (-10.0), UInt16(218), UInt32(249), Int16(-55)), [true, true, true, false, true, true, false, true, false, true], (), (UInt32(149)&127..UInt32(132)&127:(106|1)), ((-92)&127..=(-81)&127:((-123)|1)), UInt32(22)), (UInt16(60)&127..UInt16(253)&127:(-49)|1));
    public func func2202(param2203 : ((Range<Int32>, (Float64, Bool, Float64, UInt16, UInt32, Int16), Array<Bool>, Unit, Range<UInt32>, Range<Int64>, UInt32)) -> Float32) : Unit { // block id: 2206
        func func2209(optionalParam2210 ! : UInt16 = UInt16(Int8(102)), optionalParam2213 ! : Range<Int8> = (Int8(Int8(UInt8(216)))&127..Int8(UInt8(Int8(Int8(-24))))&127:(Int64(Int32(Int32(UInt32(235))))|1))) : Bool { // block id: 2226
            var var2295 : Bool = false;
            [var516, [var935, var2107, var2107, var61, false, var2240, var2107, false, var935, true], var516, [true, var2107, true, true, var935, true, var935, var935, true, false], [false, false, true, var61, var2107, var935, false, var61, var935, true], [var2240, var935, var935, var935, var935, var2107, var2240, var2240, true, var935], var516, [false, false, false, var61, false, true, false, var935, var935, var2240], [var2295, var2295, true, var2300, false, var2300, false, var2300, true, false], [true, true, false, false, true, false, false, false, false, true]][2][0] || var2300
        }
;
        if (func2209(optionalParam2210 : try { // block id: 2313
            UInt16(50) ^ UInt16(80)
        } finally { // block id: 2317
            UInt16(249)
        }, optionalParam2213 : (Int8(-2)&127..=Int8(71)&127:(var2099|1)))) { // block id: 2323
            try { // block id: 2325
                ();
                var694;
                (UInt8(200)&127..=var557&127:(40|1))
            } finally { // block id: 2332
                var408;
                (var557&127..=var557&127:(var583|1))
            };
            match (Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.Some(var1203)) {
                case _ => 
                    [false, var2107, true, var2240, var935, true, var2107, var61, false, true]
                
                case _ : Range<Int64> => 
                    var319 += UInt16(127);
                    ();
                    [var61, var2300, true, true, true, var2107, true, false, var2300, false]
                
                case _ => 
                    var516
                
                case _ => 
                    var var2381 : Bool = (Option<Range<UInt16>>.None is UInt64);
                    var var2390 : UInt64 = UInt64(186);
                    if (var2381) { (var2134&127..=var392&127:((-51)|1)) } else { (var2390&127..UInt64(55)&127:((-55)|1)) } ;
                    if (var2240) { Option<Range<UInt16>>.Some((var319&127..UInt16(210)&127:(105|1))) } else { Option<Range<UInt16>>.Some((UInt16(54)&127..=var319&127:(var2099|1))) } ;
                    [var61, var935, var2300, true, var935, var2381, var2107, true, true, false]
                
            };
            ()
        };
        let var2488 : Float32 = Float32(Float32(10.0));
        func func2475(param2476 : Range<UInt64>, param2477 : String, param2478 : Array<Float64>, param2479 : String) : ((Range<Int32>, (Float64, Bool, Float64, UInt16, UInt32, Int16), Array<Bool>, Unit, Range<UInt32>, Range<Int64>, UInt32), Array<Option<Int16>>, Float32, (Range<Int32>, (Float64, Bool, Float64, UInt16, UInt32, Int16), Array<Bool>, Unit, Range<UInt32>, Range<Int64>, UInt32), Range<UInt16>) { // block id: 2480
            Float32((try { // block id: 2484
                Int32(-110);
                ();
                var2488
            } finally { // block id: 2491
                var152;
                var152;
                Float32(54.0) % Float32((Int32(Float32(-59.0))) | 1)
            } / Float32((Int32(var2488)) | 1)));
            let var4679 : Int64 = Int64(UInt8(217));
            func func2499(param2500 : Option<Array<Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>>>) : ((Range<Int32>, (Float64, Bool, Float64, UInt16, UInt32, Int16), Array<Bool>, Unit, Range<UInt32>, Range<Int64>, UInt32), Array<Option<Int16>>, Float32, (Range<Int32>, (Float64, Bool, Float64, UInt16, UInt32, Int16), Array<Bool>, Unit, Range<UInt32>, Range<Int64>, UInt32), Range<UInt16>) { // block id: 2501
                var2503;
                let var4600 : (Float64, Bool, Float64, UInt16, UInt32, Int16) = (60.0, ((((Int32(-6)&127..=Int32(97)&127:((-27)|1)), (41.0, true, 89.0, UInt16(17), UInt32(12), Int16(51)), [true, false, false, true, false, false, true, true, true, false], (), (UInt32(209)&127..UInt32(94)&127:85|1), ((-91)&127..=104&127:73|1), UInt32(142)), [Option<Int16>.None, Option<Int16>.None, Option<Int16>.Some(Int16(-96)), Option<Int16>.Some(Int16(54)), Option<Int16>.None, Option<Int16>.Some(Int16(-6)), Option<Int16>.Some(Int16(82)), Option<Int16>.Some(Int16(37)), Option<Int16>.Some(Int16(125)), Option<Int16>.Some(Int16(11))], Float32(63.0), ((Int32(-63)&127..Int32(-37)&127:(-113)|1), (31.0, false, 23.0, UInt16(85), UInt32(28), Int16(-125)), [true, false, true, true, false, false, false, true, false, false], (), (UInt32(12)&127..=UInt32(30)&127:((-98)|1)), ((-100)&127..=24&127:((-116)|1)), UInt32(20)), (UInt16(240)&127..UInt16(19)&127:((-61)|1))) is Array<Array<Float32>>), Float64(Float32(-37.0)), UInt16(Int8(24)), UInt32(114), Int16(-54));
                let var4685 : Array<Option<Int16>> = Array<Option<Int16>>(10){ i => Option<Int16>.Some(Int16(UInt8(UInt8(82)))) };
                if (false) { // block id: 2526
                    (Option<UInt16>.None ?? UInt16(199));
                    var1065;
                    [Float32(75.0), var4543, Float32(-54.0), var4543, var2488, var2488, Float32(69.0), Float32(74.0), var4543, Float32(-61.0)]|>func2536
                } else { // block id: 4568
                    var4571 += Int8(85);
                    var var4672 : Array<Bool> = [false, false, true, true, false, true, true, false, true, false];
                    if (false) { // block id: 4576
                        var152;
                        ();
                        (var1864, var4515, Float32(-45.0), var1864, (UInt16(168)&127..=UInt16(13)&127:(58|1)))
                    } else if (false) { // block id: 4589
                        var39 >> ((var53) & 7);
                        var408;
                        ((var4597, var4600, var4672, var1847, (var39&127..var39&127:(var4679|1)), (90&127..91&127:(-100)|1), UInt32(205)), var4685, var4543, ((Int32(108)&127..var2112&127:(var2099|1)), (var1262, true, 11.0, var319, var39, Int16(-38)), var4672, (), (var53&127..=var53&127:(var2099|1)), (9&127..38&127:(-17)|1), var39), var4772)
                    } else { // block id: 4774
                        if (false) { var4778 } else { (var1864, var4685, Float32(105.0), var1864, (UInt16(183)&127..var319&127:(var2099|1))) } 
                    }
                }
            }
;
            func2499(var1973)
        }
;
        var loopTimeVar4867 : Range<UInt64> = (UInt64(Int64(Int32(-74)))&127..UInt64(UInt16(123))&127:(55|1));
        for (i in loopTimeVar4867 where ((var2430 ?? var2433) ?? if (false) { // block id: 2437
            let var2444 : Float32 = Float32(Float32(100.0));
            var var2453 : (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64) = ([true, false, false, false, true, false, false, true, false, false], (UInt8(23)&127..UInt8(20)&127:(-14)|1), (UInt8(UInt8(48))&127..=UInt8(50)&127:((-20)|1)), ['E', 'U', 'x', 'r', '9', 'g', 'p', 'j', '2', 'M'], UInt32(168), Int64(UInt32(Int16(UInt8(31)))));
            if (var2300) { var968 } else { (var392, var2444, var788, (Int16(-95)&127..=Int16(82)&127:((-84)|1)), var2453) } ;
            var42 > Int16(-120)
        } else { // block id: 2471
            var2300
        })) {
            func2475((var2134&127..=UInt64(180)&127:((-91)|1)), """
5vxjR
i!S'#
""", [53.0, 104.0, 67.0, 25.0, 32.0, (-81.0), (-45.0), 103.0, 43.0, (-7.0)], var4206)
        }
    }
;
    static let var5828 : Array<Float64> = [22.0, 107.0, 39.0, 32.0, (-35.0), (-53.0), 1.0, 82.0, (-58.0), 98.0];
    static func func546(param547 : UInt8, param548 : Range<UInt32>, namedParam549 ! : (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64), namedParam550 ! : Int8) : Class46 { // block id: 551
        let var586 : Int64 = (-114);
        var loopTimeVar597 : Int64 = 0;
        while ((try { // block id: 554
            var557 >>= ((var557) & 7);
            var557++;
            var61
        } catch (e: Exception) { // block id: 564
            var567 |= Int8(102);
            var152;
            true
        }) && loopTimeVar597 < 100 ) {
            loopTimeVar597++;
            match ((21&127..=(-95)&127:115|1)) {
                case caseVar577 : Int16 => 
                    Option<Int16>.None;
                    ();
                    var583 /= ((var586) | 1)
                
                case _ => 
                    ();
                    var392 - var392;
                    var73--
                
            }
        };
        func599(namedParam600 : try { // block id: 952
            66.0;
            var583 **= (20 & 3);
            UInt64(71) >> ((var392) & 7)
        } finally { // block id: 960
            var694;
            UInt64(204)
        }, namedParam603 : try { // block id: 966
            var968
        } catch (_) { // block id: 1000
            var968
        }[3], namedParam604 : ((var39, var5828, Int8(-1))|>func1004))
    }
;
    static var var5903 : Bool = false;
    let var6065 : Float64 = 58.0;
    let var6072 : Unit = ();
    var var6192 : Array<Bool> = [false, true, true, false, true, true, true, true, false, false];
    public func func5944(namedParam5945 ! : Float32, optionalParam5946 ! : Range<UInt32> = (UInt32(Int16(113))&127..UInt32(73)&127:(Int64(Int64(Int32(-107)))|1)), namedParam5954 ! : Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>, optionalParam5955 ! : Array<Rune> = ['l', 'b', 'F', 'e', 'B', 'x', 'K', 'l', 'B', 'x']) : Int8 { // block id: 5957
        let var5966 : Range<Int8> = (Int8(28)&127..Int8(Int8(Int8(115)))&127:((-38)|1));
        let var6255 : Range<UInt16> = (UInt16(143)&127..UInt16(44)&127:(-116)|1);
        if (match (match (Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.Some(((), var784, var5966, (var392, Float32(-97.0), var4597, (Int16(63)&127..Int16(-24)&127:(-93)|1), (var516, (var557&127..=var557&127:(var2099|1)), var694, optionalParam5955, var5926, 2))))) {
                case _ => 
                    if (var2300) { Option<Array<Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>>>.None } else { Option<Array<Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>>>.None } 
                
                case _ => 
                    if (true) { var6001 } else { var1187 } 
                
                case _ : Range<Int16> => 
                    if (var61) { var6001 } else { var1187 } 
                
                case _ => 
                    var152;
                    if (true) { (Int16(125)&127..var665&127:(69|1)) } else { var784 } ;
                    if (false) { Option<Array<Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>>>.None } else { Option<Array<Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>>>.None } 
                
                case _ => 
                    Option<Array<Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>>>.None
                
            }) {
            case _ => 
                var2107
            
            case _ : Range<UInt8> => 
                var2107
            
            case _ : Rune => 
                ();
                (var1864, [var5341, var5341, Option<Int16>.Some(var665), Option<Int16>.Some(Int16(-66)), var5341, var5341, Option<Int16>.Some(var73), Option<Int16>.Some(var665), var5341, Option<Int16>.None], Float32(59.0), (var4597, (112.0, var2107, var6065, UInt16(200), var5926, Int16(-9)), var516, var6072, (UInt32(82)&127..UInt32(126)&127:(-60)|1), (43&127..(-5)&127:(var583|1)), var53), var4772);
                var1262 >= var6065
            
            case _ : (Range<Int16>, (Range<Int32>, (Float64, Bool, Float64, UInt16, UInt32, Int16), Array<Bool>, Unit, Range<UInt32>, Range<Int64>, UInt32), UInt16, Bool) => 
                ();
                ();
                42.0 < var886
            
            case _ => 
                var5903
            
        }) { // block id: 6095
            var var6232 : ?Range<UInt16> = (((), Int16(UInt16(36)), (UInt32(Int8(-17))&127..=UInt32(46)&127:(109|1)), Option<Range<UInt16>>.Some((UInt16(228)&127..UInt16(124)&127:2|1))) as Range<UInt16>);
            match ((-84.0)) {
                case 109.0 | -45.0 => 
                    var6102
                
                case _ => 
                    var6102
                
                case _ => 
                    let var6113 : Unit = ();
                    var6113;
                    var1065;
                    if (false) { Option<Range<UInt16>>.None } else { var6102 } 
                
                case _ => 
                    [[false, true, true, false, true, true, false, false, false, true], var516, var516, [var935, true, false, true, var6132, var61, var6132, false, true, true], var6192, [false, var61, true, var61, true, var2107, var2107, var2300, true, var4889], var516, var516, [var5903, true, var5903, true, true, var935, var2240, var2240, true, false], var6192];
                    if (var935) { var6232 } else { Option<Range<UInt16>>.Some((UInt16(160)&127..var319&127:(var583|1))) } 
                
            };
            var567
        } else { // block id: 6251
            match (Option<Range<UInt16>>.Some(var6255)) {
                case _ : UInt16 => 
                    if (var2300) { Option<Array<Option<Int16>>>.None } else { Option<Array<Option<Int16>>>.Some(var4515) } 
                
                case caseVar6267 => 
                    if (false) { var5282 } else { var5282 } 
                
                case _ => 
                    var1065;
                    Option<Array<Option<Int16>>>.None
                
            };
            Int8(Int8(69))
        }
    }
;
    static let var6293 : Enum2542 = Enum2542.defaultValue
    public func isClosed(): Bool { return true }
    public func close(): Unit {}
}




public func func86(param416 : Range<UInt32>) : Option<Range<UInt16>> { // block id: 417
    var var421 : (Unit, Int16, Range<UInt32>, Option<Range<UInt16>>) = ((), Int16(UInt8(UInt8(Int8(6)))), (UInt32(163)&127..UInt32(128)&127:(-42)|1), ('Z' as Range<UInt16>));
    var421[3]
}


public func func608(param609 : Range<Int16>) : Class46 { // block id: 610
    match (Class46.var617[2]) {
        case 181 | 153 => 
            var var640 : Int32 = Int32(UInt32(196));
            var640;
            ();
            Class46()
        
        case _ => 
            Class46()
        
    }
}



public func func1068() : Unit { // block id: 1069

}



public func func1841(param1842 : (Range<Int32>, (Float64, Bool, Float64, UInt16, UInt32, Int16), Array<Bool>, Unit, Range<UInt32>, Range<Int64>, UInt32)) : Float32 { // block id: 1843
    var50.var1847;
    let var1850 : Float32 = Float32(-104.0);
    var1850
}

func func1837(param1838 : Range<Int8>) : Float32 { // block id: 1839
    var1864|>{ lambdaParameter1854 : (Range<Int32>, (Float64, Bool, Float64, UInt16, UInt32, Int16), Array<Bool>, Unit, Range<UInt32>, Range<Int64>, UInt32) => [[Float32(96.0), Float32(119.0), Float32(-67.0), Float32(52.0), Float32(95.0), Float32(76.0), Float32(-127.0), Float32(124.0), Float32(39.0), Float32(-34.0)], [Float32(24.0), Float32(-25.0), Float32(-93.0), Float32(23.0), Float32(5.0), Float32(32.0), Float32(-56.0), Float32(-93.0), Float32(98.0), Float32(22.0)], [Float32(-48.0), Float32(73.0), Float32(-84.0), Float32(14.0), Float32(47.0), Float32(-86.0), Float32(-75.0), Float32(15.0), Float32(70.0), Float32(-122.0)], [Float32(-48.0), Float32(41.0), Float32(51.0), Float32(-56.0), Float32(-55.0), Float32(6.0), Float32(-99.0), Float32(111.0), Float32(39.0), Float32(94.0)], [Float32(83.0), Float32(42.0), Float32(99.0), Float32(12.0), Float32(121.0), Float32(115.0), Float32(-10.0), Float32(75.0), Float32(82.0), Float32(17.0)], [Float32(-123.0), Float32(-36.0), Float32(-9.0), Float32(49.0), Float32(58.0), Float32(-62.0), Float32(-75.0), Float32(107.0), Float32(78.0), Float32(49.0)], [Float32(95.0), Float32(-11.0), Float32(-109.0), Float32(100.0), Float32(117.0), Float32(120.0), Float32(114.0), Float32(44.0), Float32(120.0), Float32(17.0)], [Float32(68.0), Float32(-113.0), Float32(-78.0), Float32(55.0), Float32(80.0), Float32(80.0), Float32(88.0), Float32(-105.0), Float32(0.0), Float32(-83.0)], [Float32(122.0), Float32(13.0), Float32(86.0), Float32(86.0), Float32(-51.0), Float32(-122.0), Float32(-123.0), Float32(-38.0), Float32(-81.0), Float32(-79.0)], [Float32(-13.0), Float32(80.0), Float32(90.0), Float32(-127.0), Float32(-127.0), Float32(-12.0), Float32(44.0), Float32(31.0), Float32(-111.0), Float32(-108.0)]][0][8] }
}

func func1086(param1087 : Range<Int32>) : (Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64))) { // block id: 1088
    func func1090(namedParam1091 ! : () -> Unit, optionalParam1093 ! : (Range<UInt32>) -> Option<Range<UInt16>> = func86, optionalParam1097 ! : Array<Option<Int16>> = [(UInt32(88) as Int16), Option<Int16>.None, ((UInt8(UInt8(148))&127..UInt8(UInt8(157))&127:(15|1)) as Int16), Option<Int16>.Some(Int16(Int16(UInt16(183)))), Option<Int16>.None, (Class46(UInt64(238), UInt32(102)) as Int16), Option<Int16>.Some(Int16(Int16(Int8(-91)))), (['1', 'f', 'x', '7', 'K', '8', 'o', 'Z', 'b', 'R'] as Int16), ([(-50.0), (-93.0), (-108.0), 16.0, (-117.0), (-40.0), (-15.0), (-12.0), 71.0, 16.0] as Int16), (() as Int16)], namedParam1128 ! : Float32) : (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)) { // block id: 1129
        var968
    }
;
    let var1158 : UInt64 = UInt64((-91));
    let var1305 : ((Range<Int32>, (Float64, Bool, Float64, UInt16, UInt32, Int16), Array<Bool>, Unit, Range<UInt32>, Range<Int64>, UInt32), Array<Option<Int16>>, Float32, (Range<Int32>, (Float64, Bool, Float64, UInt16, UInt32, Int16), Array<Bool>, Unit, Range<UInt32>, Range<Int64>, UInt32), Range<UInt16>) = (((Int32(-110)&127..Int32(80)&127:(-2)|1), (Float64(Float32(-17.0)), ([Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None, Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.Some(((), (Int16(-104)&127..Int16(32)&127:(-99)|1), (Int8(49)&127..Int8(115)&127:((-110)|1)), (UInt64(197), Float32(-21.0), (Int32(21)&127..Int32(111)&127:103|1), (Int16(126)&127..=Int16(53)&127:(115|1)), ([true, false, false, false, true, true, false, true, true, false], (UInt8(58)&127..=UInt8(144)&127:((-79)|1)), (UInt8(72)&127..=UInt8(108)&127:78|1), ['v', '1', 'E', 'J', '7', 'b', 'j', 'E', 'X', '6'], UInt32(87), 36)))), Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.Some(((), (Int16(-123)&127..Int16(-125)&127:(-39)|1), (Int8(97)&127..Int8(-44)&127:(-113)|1), (UInt64(220), Float32(52.0), (Int32(-118)&127..Int32(-14)&127:(81|1)), (Int16(-79)&127..=Int16(-83)&127:((-71)|1)), ([true, true, true, true, true, false, true, true, false, false], (UInt8(43)&127..UInt8(37)&127:((-83)|1)), (UInt8(20)&127..=UInt8(196)&127:(-88)|1), ['b', 'n', 'k', 'C', 'm', 'm', '5', 'N', '7', 'a'], UInt32(162), (-11))))), Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None, Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.Some(((), (Int16(-19)&127..=Int16(33)&127:83|1), (Int8(-104)&127..Int8(108)&127:((-79)|1)), (UInt64(254), Float32(62.0), (Int32(-63)&127..Int32(-49)&127:63|1), (Int16(-60)&127..Int16(68)&127:((-112)|1)), ([false, false, true, false, true, false, true, true, true, true], (UInt8(175)&127..UInt8(238)&127:(-56)|1), (UInt8(20)&127..=UInt8(101)&127:(35|1)), ['0', 'a', 'd', 'w', '6', 'b', '6', '4', 'H', '7'], UInt32(201), 81)))), Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.Some(((), (Int16(-17)&127..Int16(82)&127:(117|1)), (Int8(-59)&127..Int8(-52)&127:97|1), (UInt64(241), Float32(88.0), (Int32(-20)&127..Int32(-77)&127:(115|1)), (Int16(124)&127..Int16(105)&127:((-24)|1)), ([true, false, false, false, false, true, false, true, false, false], (UInt8(86)&127..=UInt8(129)&127:(126|1)), (UInt8(9)&127..UInt8(234)&127:(-128)|1), ['f', 't', 'w', 'W', 'N', 'w', '2', 'q', 'I', '1'], UInt32(193), (-7))))), Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None, Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.Some(((), (Int16(-30)&127..Int16(125)&127:78|1), (Int8(22)&127..=Int8(31)&127:((-81)|1)), (UInt64(100), Float32(-16.0), (Int32(48)&127..=Int32(57)&127:(-108)|1), (Int16(-123)&127..=Int16(65)&127:87|1), ([false, true, true, false, true, false, true, true, false, false], (UInt8(142)&127..=UInt8(20)&127:112|1), (UInt8(200)&127..UInt8(144)&127:(-105)|1), ['Z', 'O', 'm', 'q', 'P', '2', 'F', 'J', 'f', '4'], UInt32(243), 70)))), Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.Some(((), (Int16(-7)&127..Int16(29)&127:(25|1)), (Int8(-63)&127..=Int8(-85)&127:9|1), (UInt64(177), Float32(30.0), (Int32(116)&127..Int32(-8)&127:((-115)|1)), (Int16(-119)&127..Int16(119)&127:(92|1)), ([true, false, false, false, false, true, false, true, false, true], (UInt8(202)&127..=UInt8(55)&127:107|1), (UInt8(2)&127..=UInt8(122)&127:((-122)|1)), ['j', 'v', 'Z', '6', '6', '9', 's', '3', 'h', '0'], UInt32(120), (-18))))), Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None] is Array<Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>>), Float64(Float32(-89.0)), UInt16(UInt16(143)), UInt32(UInt8(242)), Int16(47)), [true, false, false, false, false, true, false, false, true, false], (), (UInt32(230)&127..=UInt32(UInt32(102))&127:(Int64(101)|1)), (77&127..Int64(UInt32(170))&127:(Int64(UInt8(134))|1)), UInt32(114)), [Option<Int16>.Some(Int16(54)), Option<Int16>.None, Option<Int16>.None, ((UInt8(102) as Range<UInt16>) as Int16), (((), Int16(49), (UInt32(145)&127..=UInt32(177)&127:((-106)|1)), Option<Range<UInt16>>.Some((UInt16(242)&127..=UInt16(217)&127:(31|1)))) as Int16), (((-63)&127..=2&127:(-20)|1) as Int16), (((-45.0), false, (-121.0), UInt16(53), UInt32(43), Int16(-9)) as Int16), Option<Int16>.None, Option<Int16>.None, (Class46(UInt64(221), UInt32(218)) as Int16)], Float32(-124.0), ((Int32(-78)&127..=Int32(-111)&127:(Int64(UInt16(107))|1)), (Float64((-114.0)), (123.0 is Bool), 60.0, UInt16(Int8(97)), UInt32(Int32(-21)), Int16(-126)), [false, false, true, false, false, true, false, true, true, false], (), (UInt32(176)&127..UInt32(Int16(46))&127:((-23)|1)), (40&127..=(-116)&127:70|1), UInt32(159)), (UInt16(164)&127..=UInt16(111)&127:(-100)|1));
    let var1623 : Unit = ();
    let var1629 : Int64 = Int64(UInt16(31));
    var var1800 : (Range<Int32>, (Float64, Bool, Float64, UInt16, UInt32, Int16), Array<Bool>, Unit, Range<UInt32>, Range<Int64>, UInt32) = ((Int32(Int8(UInt8(239)))&127..=Int32(UInt16(56))&127:(Int64(Int64(UInt16(14)))|1)), ((-38.0), (UInt64(UInt16(203)) is Range<UInt32>), Float64(Float64((-66.0))), UInt16(142), UInt32(Int8(95)), Int16(-16)), [false, true, false, true, true, true, false, true, false, false], (), (UInt32(120)&127..=UInt32(162)&127:(-89)|1), (18&127..Int64(Int8(-41))&127:(55|1)), UInt32(144));
    func1090(namedParam1091 : {  => var loopTimeVar1270 : Int64 = 0; while ((var516[9]) && loopTimeVar1270 < 100 ) {
        loopTimeVar1270++;
        func func1140(optionalParam1141 ! : Range<UInt16> = (UInt16(Int8(Int8(UInt8(167))))&127..=UInt16(108)&127:(99|1)), namedParam1149 ! : Range<Int16>) : (Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64))) { // block id: 1150
            var var1152 : Array<Rune> = ['o', 'm', 'j', 's', 'g', '6', '9', 'D', 'k', 't'];
            var1152;
            func608(match (var1158) {
                case _ => 
                    var319;
                    false;
                    (Int16(-98)&127..Int16(-33)&127:117|1)
                
                case _ => 
                    (Int16(-106)&127..Int16(-118)&127:89|1)
                
            }).func1171()
        }
;
        func1140(optionalParam1141 : (UInt16(85)&127..=UInt16(221)&127:(-99)|1), namedParam1149 : var784)
    } }, optionalParam1097 : try { // block id: 1274
        var var1288 : (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64) = ([true, true, false, false, false, false, false, true, false, false], (UInt8(72)&127..UInt8(73)&127:(-77)|1), (UInt8(22)&127..=UInt8(UInt8(22))&127:(Int64((-82))|1)), ['C', 's', 'V', 'x', '9', 'a', 'D', 'u', 'Z', 'K'], UInt32(249), 39);
        if (false) { ([false, true, true, true, false, false, false, false, true, false], (UInt8(74)&127..=UInt8(153)&127:38|1), (UInt8(201)&127..var557&127:(39|1)), ['u', 'J', 'Q', 'W', 'F', 'N', 'Y', '5', 'Q', '6'], UInt32(172), 22) } else { var1288 } ;
        var301;
        var var1638 : Array<Option<Int16>> = [Option<Int16>.Some(Int16(-29)), Option<Int16>.Some(Int16(29)), Option<Int16>.Some(Int16(-11)), ((UInt64(222)&127..UInt64(159)&127:121|1) as Int16), ((Option<Float64>.None as Array<Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>>) as Int16), ((Int32(67)&127..Int32(UInt16(108))&127:(Int64(UInt32(123))|1)) as Int16), (Option<Array<Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>>>.Some([Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.Some(((), (Int16(51)&127..=Int16(59)&127:(-123)|1), (Int8(-82)&127..=Int8(63)&127:98|1), (UInt64(226), Float32(-54.0), (Int32(-25)&127..Int32(58)&127:60|1), (Int16(81)&127..Int16(-91)&127:93|1), ([true, false, true, true, true, false, true, true, false, true], (UInt8(35)&127..=UInt8(138)&127:((-7)|1)), (UInt8(133)&127..UInt8(98)&127:(50|1)), ['K', 'K', 'l', '6', 'U', 'f', 'B', 'X', 'q', 'P'], UInt32(113), 86)))), Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None, Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None, Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.Some(((), (Int16(69)&127..Int16(-46)&127:52|1), (Int8(34)&127..=Int8(-1)&127:((-46)|1)), (UInt64(113), Float32(32.0), (Int32(-119)&127..=Int32(-63)&127:(114|1)), (Int16(65)&127..Int16(66)&127:16|1), ([false, true, false, true, false, false, false, true, false, true], (UInt8(71)&127..=UInt8(38)&127:62|1), (UInt8(67)&127..UInt8(106)&127:76|1), ['m', 'Z', '9', 'y', '0', 'a', '3', 'o', '8', 'g'], UInt32(58), (-54))))), Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None, Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.Some(((), (Int16(45)&127..Int16(39)&127:(-77)|1), (Int8(-27)&127..=Int8(7)&127:3|1), (UInt64(107), Float32(-4.0), (Int32(123)&127..=Int32(-55)&127:(33|1)), (Int16(123)&127..=Int16(-35)&127:((-44)|1)), ([false, false, false, false, false, false, true, true, false, true], (UInt8(0)&127..=UInt8(251)&127:(-97)|1), (UInt8(66)&127..=UInt8(129)&127:2|1), ['F', 'V', 'a', 'V', 'N', '1', 'D', 'x', 'z', 'H'], UInt32(197), (-46))))), Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None, Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None, Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None, Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None]) as Int16), Option<Int16>.Some(Int16(59)), (Option<Unit>.Some(()) as Int16), (Int8(Int8(Int8(-16))) as Int16)];
        var var1797 : Float32 = Float32(94.0);
        if (var61) { var1305 } else { (((Int32(-68)&127..Int32(-101)&127:40|1), (var886, var61, 34.0, UInt16(61), var39, var42), [true, false, true, true, true, false, var61, true, var61, false], var1623, (var39&127..=UInt32(159)&127:(var1629|1)), (71&127..(-86)&127:((-46)|1)), var39), var1638, var1797, var1800, (UInt16(62)&127..UInt16(214)&127:92|1)) } 
    } finally { // block id: 1833
        var1305
    }[1], namedParam1128 : ((Int8(-75)&127..=Int8(-44)&127:(-29)|1)|>func1837));
    let var2054 : Range<Int16> = (Int16(Int8(UInt8(Int8(-56))))&127..Int16(UInt16(Int16(22)))&127:(Int64(Int32(25))|1));
    let var2078 : Unit = ();
    var var2082 : Range<Int8> = (Int8(9)&127..Int8(-12)&127:97|1);
    match (try { // block id: 1968
            ();
            if (true) { var1973 } else { var1973 } 
        } finally { // block id: 2028
            if (var61) { """
j:<+}
~z$i.
""" } else { ".vJ5\\DSkwH" } ;
            ();
            if (false) { Option<Array<Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>>>.Some([var2039, Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.Some((var1623, (Int16(95)&127..=Int16(32)&127:(-117)|1), (Int8(97)&127..Int8(56)&127:107|1), var968)), var2039, Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None, Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.Some(((), var2054, (var685&127..=Int8(-29)&127:(80|1)), var968)), var2039, Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.Some(var1203), var2039, var2039, Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.Some((var2078, var355, var2082, var968))]) } else { Option<Array<Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>>>.None } 
        }) {
        case _ => 
            var1623;
            var2078;
            if (var61) { var1203 } else { var1203 } 
        
    }
}




public enum Enum2542 {
    defaultValue
}



func func2833(param2834 : Option<Array<Rune>>) : Option<Unit> { // block id: 2835
    var var2855 : Array<Rune> = ['Z', 'O', 'G', 'X', 'E', '5', 'T', '8', '6', 'b'];
    var var4158 : Range<Int32> = (Int32(-29)&127..Int32(UInt16(Int16(Int16(104))))&127:(Int64(Int32(-94))|1));
    ((try { // block id: 2847
        var886 **= Float64(Int32(var886) & 3);
        if (var61) { ['P', 'W', 'x', 't', 'F', 'y', 'Q', 'F', 'z', 'X'] } else { var2855 } ;
        var2868
    } catch (_) { // block id: 2874
        var2868
    } finally { // block id: 2876
        var var2879 : Rune = 'Q';
        var2879 = 'k';
        ();
        if (var2240) { var2868 } else { var2868 } 
    } ?? Option<Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>>.None) ?? match (match (UInt64(12)) {
            case 153 | 63 | 150 | 199 => 
                var2895;
                [[false, false, false, false, true, false, true, false, false, false], [false, true, false, false, true, false, true, true, true, true], [true, false, false, false, true, true, true, false, false, false], [true, true, false, true, true, true, true, false, true, true], [false, true, true, false, false, true, true, true, false, false], [false, false, true, false, true, true, false, false, true, true], [true, true, true, true, false, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true], [false, true, false, true, false, false, false, true, true, false], [false, true, true, true, false, true, false, false, false, true]]
            
            case _ : Option<Bool> => 
                ();
                (var1203, (Int8(23)&127..Int8(48)&127:(-56)|1));
                var var2906 : Array<Array<Bool>> = Array<Array<Bool>>(10){ i => [((((Int16(-93)&127..=Int16(52)&127:((-76)|1)), ((Int32(-109)&127..Int32(56)&127:87|1), (94.0, true, (-26.0), UInt16(216), UInt32(131), Int16(32)), [true, true, true, false, true, true, true, true, true, true], (), (UInt32(64)&127..UInt32(188)&127:113|1), ((-117)&127..(-81)&127:26|1), UInt32(71)), UInt16(8), true) as UInt16) is (Range<Int32>) -> (Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))), (Option<Array<Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>>>.None is UInt32), (Class46(UInt64(39), UInt32(145)) is (Range<UInt16>, Range<Int16>) -> (Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))), ((Option<Bool>.Some(false) as Array<Rune>) is (() -> Unit, (Range<UInt32>) -> Option<Range<UInt16>>, Array<Option<Int16>>, Float32) -> (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64))), true, true, (['T', 'N', 'o', '1', 'd', 'V', '1', 'd', 'Q', '9'] is Option<Option<Bool>>), true, ((Option<Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>>.Some(Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None) as (Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))) is Option<Unit>), (Class46() is Option<Bool>)] };
                var2906
            
            case 234 | 24 | 8 | 122 => 
                var var3547 : Bool = false;
                var var3590 : Bool = ([((UInt32(60), [31.0, 59.0, 118.0, 92.0, (-55.0), (-29.0), 41.0, (-125.0), 97.0, 69.0], Int8(29)) is (Range<Int16>) -> Class46), false, false, false, (Option<Unit>.None is Array<Bool>), true, ('4' is Range<UInt16>), ((UInt16(43)&127..UInt16(134)&127:((-53)|1)) is (Range<UInt16>, UInt16, Unit) -> Unit), (((), Int16(-46), (UInt32(110)&127..UInt32(182)&127:((-90)|1)), Option<Range<UInt16>>.Some((UInt16(24)&127..=UInt16(71)&127:((-51)|1)))) is Int16), false] is ((Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64))), Range<Int8>));
                let var3636 : Bool = (false is Int32);
                if (true) { [[var2240, true, true, var2107, true, var3547, var2107, true, true, var2107], [true, false, false, false, false, true, true, true, false, true], [false, var3547, var3547, var61, false, true, false, var3547, false, true], [var2240, var61, false, var61, var2107, var61, false, true, true, false], [var61, true, var3547, true, false, var2240, var2107, true, true, false], [true, var3590, true, false, var61, false, var61, false, true, var3590], [false, var3636, true, true, false, var3590, false, true, var3547, true], [true, true, true, false, false, true, false, true, true, false], [true, true, true, false, false, false, true, true, true, false], [true, false, true, true, true, true, true, false, true, true]] } else { var3651 } 
            
            case 127 => 
                let var4073 : (Array<Rune>, UInt8, UInt32, Float64, UInt16, Bool) = (['t', 't', 'o', '4', '6', '7', 'j', 'a', '9', 'b'], UInt8(UInt8(Int8(Int8(-78)))), UInt32(64), Float64(Float64(Float32(Float32(20.0)))), UInt16(Int8(UInt8(164))), true);
                var4073;
                var1203;
                var3651
            
            case _ => 
                (Int8(38)&127..Int8(29)&127:24|1);
                [[true, true, true, false, false, true, false, true, false, false], [false, false, false, false, true, true, false, false, true, true], [true, false, true, true, true, false, false, false, false, true], [false, false, false, false, true, false, false, true, true, true], [false, true, false, false, false, true, false, false, true, true], [false, true, true, true, false, true, true, false, false, true], [true, false, false, true, true, true, true, false, false, false], [false, false, false, true, false, false, true, true, true, true], [true, false, false, false, false, false, true, true, false, true], [true, false, true, false, true, true, false, false, false, true]]
            
        }) {
        case _ : Rune => 
            ();
            var2039
        
        case _ : UInt8 => 
            let var4114 : Array<Float64> = [Float64(Float64(Float64(Float32(-79.0)))), (-123.0), (-35.0), Float64(86.0), Float64(Float32(Float32(-8.0))), Float64(Float32(Float32(28.0))), 39.0, 84.0, Float64(Float32(43.0)), Float64((-30.0))];
            var4114;
            var2039
        
        case _ => 
            var var4155 : Float32 = Float32(-39.0);
            if (false) { Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.Some(((), (Int16(33)&127..Int16(8)&127:(-69)|1), (Int8(-24)&127..=Int8(-112)&127:12|1), var968)) } else { Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.Some((var408, var784, (Int8(42)&127..Int8(-19)&127:70|1), (var2134, var4155, var4158, (Int16(28)&127..Int16(-83)&127:(-90)|1), (var516, var4171, (UInt8(80)&127..UInt8(232)&127:(var2099|1)), ['h', '7', 'V', 'W', 'C', '6', '0', '8', 'T', 'W'], UInt32(207), var2099)))) } 
        
    });
    var var4201 : UInt8 = UInt8(Int8(-128));
    let var4213 : ??Range<UInt16> = Option<Option<Range<UInt16>>>.None;
    try { // block id: 4184
        Option<Unit>.Some(())
    } catch (e: Exception) { // block id: 4187
        var685 - var685;
        (Option<UInt16>.Some(UInt16(33)) as Unit)
    } finally { // block id: 4194
        let var4216 : ??Range<UInt16> = (['q', 'j', 'O', 'W', 'B', 'L', 'a', 'p', 'V', 'X'] as Option<Range<UInt16>>);
        try { // block id: 4196
            param2834
        } catch (_) { // block id: 4198
            var4201 &= UInt8(206);
            var4206;
            param2834
        } finally { // block id: 4209
            if (var2240) { var4213 } else { var4216 } ;
            if (var2107) { Option<Array<Rune>>.Some(['d', 'd', 'I', 'Q', 'd', 'Y', '7', 'a', 'Q', 'O']) } else { param2834 } 
        };
        (Option<Option<Unit>>.Some(var4241) ?? Option<Unit>.None)
    }
}

func func2536(param2537 : Array<Float32>) : ((Range<Int32>, (Float64, Bool, Float64, UInt16, UInt32, Int16), Array<Bool>, Unit, Range<UInt32>, Range<Int64>, UInt32), Array<Option<Int16>>, Float32, (Range<Int32>, (Float64, Bool, Float64, UInt16, UInt32, Int16), Array<Bool>, Unit, Range<UInt32>, Range<Int64>, UInt32), Range<UInt16>) { // block id: 2538
    let var4266 : Int16 = Int16(Int8(53));
    try { // block id: 2540
        var var2548 : ((Range<Int32>, (Float64, Bool, Float64, UInt16, UInt32, Int16), Array<Bool>, Unit, Range<UInt32>, Range<Int64>, UInt32), Array<Option<Int16>>, Float32, (Range<Int32>, (Float64, Bool, Float64, UInt16, UInt32, Int16), Array<Bool>, Unit, Range<UInt32>, Range<Int64>, UInt32), Range<UInt16>) = (((Int32(53)&127..=Int32(-25)&127:86|1), ((-87.0), (Option<Float64>.Some((-58.0)) is Array<Float64>), Float64(Float32(59.0)), UInt16(Int8(84)), UInt32(75), Int16(Int8(48))), [false, true, false, true, false, true, false, true, true, false], (), (UInt32(UInt16(189))&127..UInt32(199)&127:(30|1)), (45&127..(-18)&127:(-1)|1), UInt32(UInt32(152))), [([Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.Some(((), (Int16(-41)&127..=Int16(-48)&127:24|1), (Int8(125)&127..Int8(35)&127:((-87)|1)), (UInt64(237), Float32(122.0), (Int32(58)&127..Int32(103)&127:((-91)|1)), (Int16(126)&127..Int16(-25)&127:((-39)|1)), ([false, false, false, false, true, false, false, false, false, false], (UInt8(55)&127..=UInt8(43)&127:((-56)|1)), (UInt8(194)&127..UInt8(221)&127:((-54)|1)), ['R', '8', 'U', 'i', 'F', 'y', 'W', 'H', 'q', 'M'], UInt32(175), (-30))))), Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None, Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.Some(((), (Int16(-27)&127..Int16(68)&127:0|1), (Int8(-123)&127..=Int8(93)&127:(-59)|1), (UInt64(114), Float32(53.0), (Int32(59)&127..=Int32(-114)&127:(6|1)), (Int16(95)&127..=Int16(-106)&127:96|1), ([true, true, true, true, true, false, false, true, true, false], (UInt8(48)&127..=UInt8(110)&127:(-116)|1), (UInt8(254)&127..=UInt8(17)&127:(-108)|1), ['E', 'l', 'J', 's', 'm', 'R', 'K', 'x', 'g', 'g'], UInt32(231), (-107))))), Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None, Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None, Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None, Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.Some(((), (Int16(-111)&127..Int16(-31)&127:(95|1)), (Int8(-72)&127..Int8(-126)&127:(-107)|1), (UInt64(223), Float32(-68.0), (Int32(96)&127..=Int32(46)&127:((-81)|1)), (Int16(-55)&127..=Int16(69)&127:78|1), ([true, true, false, false, true, true, false, true, true, false], (UInt8(48)&127..=UInt8(125)&127:24|1), (UInt8(250)&127..UInt8(2)&127:(-67)|1), ['W', 'E', 'Z', '6', 'l', 'N', '6', 'C', '0', 'P'], UInt32(36), (-106))))), Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None, Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.Some(((), (Int16(-18)&127..=Int16(-102)&127:((-107)|1)), (Int8(92)&127..=Int8(-99)&127:(117|1)), (UInt64(98), Float32(45.0), (Int32(28)&127..Int32(11)&127:126|1), (Int16(27)&127..Int16(19)&127:97|1), ([true, false, true, true, true, false, false, false, false, false], (UInt8(16)&127..=UInt8(114)&127:(-92)|1), (UInt8(107)&127..UInt8(227)&127:(120|1)), ['0', 'I', 'N', 'l', 'w', 'p', 's', '6', 'J', 'j'], UInt32(195), 56)))), Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.Some(((), (Int16(-8)&127..Int16(-97)&127:102|1), (Int8(17)&127..Int8(12)&127:(-128)|1), (UInt64(218), Float32(119.0), (Int32(-48)&127..Int32(22)&127:1|1), (Int16(99)&127..=Int16(-94)&127:(-111)|1), ([false, false, true, false, false, false, true, true, false, true], (UInt8(213)&127..=UInt8(17)&127:16|1), (UInt8(102)&127..=UInt8(106)&127:((-74)|1)), ['4', 'n', 'i', 'z', 'A', 'r', 'O', 's', '1', '5'], UInt32(14), (-52)))))] as Int16), Option<Int16>.None, Option<Int16>.None, Option<Int16>.None, (false as Int16), Option<Int16>.None, (['p', 'j', 't', 'K', 'S', '4', 'F', 'R', 'k', 'v'] as Int16), Option<Int16>.Some(Int16(UInt8(39))), (((), Int16(23), (UInt32(156)&127..UInt32(215)&127:(-71)|1), Option<Range<UInt16>>.None) as Int16), ((((), (Int16(86)&127..=Int16(-29)&127:34|1), (Int8(102)&127..=Int8(69)&127:((-39)|1)), (UInt64(54), Float32(117.0), (Int32(-103)&127..Int32(7)&127:104|1), (Int16(18)&127..Int16(-3)&127:(-2)|1), ([false, true, true, true, true, false, false, true, true, true], (UInt8(90)&127..=UInt8(18)&127:(-30)|1), (UInt8(169)&127..UInt8(218)&127:(-58)|1), ['v', 'R', 'W', 'M', 'w', 'E', 'L', 'A', '6', 'x'], UInt32(207), 58))), (Int8(-84)&127..=Int8(-24)&127:(-31)|1)) as Int16)], Float32(78.0), ((Int32(UInt8(70))&127..=Int32(Int32(-39))&127:((-76)|1)), (Float64((-96.0)), (((), Int16(-36), (UInt32(230)&127..=UInt32(0)&127:(-41)|1), Option<Range<UInt16>>.Some((UInt16(153)&127..UInt16(9)&127:((-40)|1)))) is (Range<Int16>) -> Class46), 77.0, UInt16(Int8(-122)), UInt32(163), Int16(-38)), [false, true, false, false, true, true, false, true, true, true], (), (UInt32(7)&127..UInt32(UInt8(38))&127:(Int64(UInt32(32))|1)), (103&127..=43&127:31|1), UInt32(Int16(UInt16(153)))), (UInt16(179)&127..UInt16(31)&127:(-94)|1));
        match (Enum2542.defaultValue) {
            case _ => 
                var2548
            
        }
    } finally { // block id: 2831
        let var4245 : (Option<Array<Rune>>) -> Option<Unit> = func2833;
        Option<Array<Rune>>.Some(['A', 'C', 'P', 'k', 'w', 'v', '1', 'j', 'L', 'Y'])|>var4245;
        var loopTimeVar4254 : Range<UInt64> = (UInt64(225)&127..=UInt64(164)&127:(19|1));
        for (i in loopTimeVar4254 where var61) {
            var319;
            ()
        };
        var var4263 : Int16 = Int16(-120);
        let var4550 : UInt16 = UInt16(Int8(UInt8(123)));
        try { // block id: 4260
            var4263 /= ((var4266) | 1);
            let var4270 : ((Range<Int32>, (Float64, Bool, Float64, UInt16, UInt32, Int16), Array<Bool>, Unit, Range<UInt32>, Range<Int64>, UInt32), Array<Option<Int16>>, Float32, (Range<Int32>, (Float64, Bool, Float64, UInt16, UInt32, Int16), Array<Bool>, Unit, Range<UInt32>, Range<Int64>, UInt32), Range<UInt16>) = (((Int32(-3)&127..=Int32(-17)&127:(-71)|1), (Float64(Float32(115.0)), (Int16(-62) is Enum2542), Float64(Float32(-36.0)), UInt16(Int8(64)), UInt32(144), Int16(Int8(-105))), [false, true, false, true, true, true, true, true, false, false], (), (UInt32(Int32(72))&127..=UInt32(215)&127:(Int64(Int8(-20))|1)), (35&127..53&127:54|1), UInt32(Int32(21))), [Option<Int16>.None, (((Int16(82)&127..=Int16(-20)&127:(69|1)), ((Int32(19)&127..=Int32(-53)&127:((-115)|1)), (105.0, false, 115.0, UInt16(13), UInt32(8), Int16(-68)), [true, true, false, false, true, true, false, false, false, false], (), (UInt32(227)&127..=UInt32(27)&127:57|1), (13&127..=115&127:(63|1)), UInt32(120)), UInt16(105), true) as Int16), Option<Int16>.Some(Int16(UInt8(190))), ((((Int32(94)&127..Int32(89)&127:27|1), ((-116.0), false, (-109.0), UInt16(151), UInt32(196), Int16(109)), [true, true, true, true, false, true, true, true, false, true], (), (UInt32(247)&127..UInt32(104)&127:(-86)|1), ((-5)&127..=7&127:18|1), UInt32(139)), [Option<Int16>.Some(Int16(-35)), Option<Int16>.Some(Int16(55)), Option<Int16>.Some(Int16(-109)), Option<Int16>.Some(Int16(119)), Option<Int16>.None, Option<Int16>.None, Option<Int16>.Some(Int16(121)), Option<Int16>.None, Option<Int16>.Some(Int16(8)), Option<Int16>.None], Float32(-4.0), ((Int32(-37)&127..=Int32(92)&127:((-68)|1)), ((-40.0), false, (-14.0), UInt16(125), UInt32(213), Int16(61)), [true, false, false, true, true, true, true, true, false, false], (), (UInt32(142)&127..=UInt32(187)&127:(100|1)), (62&127..=(-59)&127:((-91)|1)), UInt32(209)), (UInt16(97)&127..=UInt16(185)&127:((-27)|1))) as Int16), ((UInt8(135)&127..=UInt8(239)&127:(-44)|1) as Int16), ((UInt64(221)&127..=UInt64(128)&127:((-61)|1)) as Int16), Option<Int16>.Some(Int16(Int16(-66))), (((Int16(-43)&127..=Int16(-107)&127:(44|1)), ((Int32(-30)&127..Int32(-104)&127:72|1), (99.0, true, (-20.0), UInt16(52), UInt32(251), Int16(92)), [true, true, true, true, true, true, false, true, true, true], (), (UInt32(25)&127..=UInt32(97)&127:((-80)|1)), (121&127..=(-52)&127:((-110)|1)), UInt32(65)), UInt16(45), true) as Int16), Option<Int16>.None, (Float32(Float32(-17.0)) as Int16)], Float32(114.0), ((Int32(-48)&127..Int32(50)&127:(-25)|1), (Float64(49.0), (Int8(112) is Array<Bool>), (-80.0), UInt16(UInt8(74)), UInt32(200), Int16(-121)), [(Option<Option<Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>>>.Some(Option<Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>>.Some(Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None)) is Int64), (((-89)&127..126&127:((-48)|1)) is ((Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)) -> ((Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64))), Range<Int8>)), (Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None is Option<Array<Rune>>), true, true, (((-71.0), false, 88.0, UInt16(74), UInt32(118), Int16(10)) is () -> Unit), (Int32(94) is Option<Int16>), false, false, true], (), (UInt32(Int8(126))&127..=UInt32(Int16(123))&127:(Int64(UInt64(44))|1)), (Int64((-18))&127..=(-88)&127:(Int64(11)|1)), UInt32(Int32(UInt32(57)))), (UInt16(206)&127..UInt16(251)&127:(-31)|1));
            var4270
        } catch (e: Exception) { // block id: 4511
            (var1864, var4515, var4543, var1864, (var4550&127..UInt16(183)&127:((-30)|1)))
        }
    }
}

public func func2180(param2181 : Array<Option<Int16>>) : (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64) { // block id: 2182
    var516;
    let var4901 : Rune = '2';
    func func2186(namedParam2187 ! : Array<Array<Float32>>, namedParam2188 ! : Range<UInt64>, namedParam2189 ! : Array<Rune>, optionalParam2190 ! : ((Range<Int32>, (Float64, Bool, Float64, UInt16, UInt32, Int16), Array<Bool>, Unit, Range<UInt32>, Range<Int64>, UInt32)) -> Float32 = { lambdaParameter2193 : (Range<Int32>, (Float64, Bool, Float64, UInt16, UInt32, Int16), Array<Bool>, Unit, Range<UInt32>, Range<Int64>, UInt32) => Float32(118.0) }) : Option<Array<Rune>> { // block id: 2198
        var50.func2202(func1841);
        let var4922 : Array<Rune> = ['i', 'M', 'n', 'c', 'H', 'W', '0', 'S', 'y', '8'];
        try { // block id: 4877
            Option<Unit>.None.getOrThrow();
            let var4894 : ?Array<Rune> = Option<Array<Rune>>.None;
            try { // block id: 4881
                ();
                (var2134&127..=UInt64(134)&127:(var2099|1));
                if (var4889) { Option<Array<Rune>>.Some(['H', 'q', 'J', 'I', 'T', '1', 'x', 'p', 'Z', 'K']) } else { var4894 } 
            } catch (_) { // block id: 4896
                Option<Array<Rune>>.Some([var2895, var4901, var4901, '4', 'E', var2895, var2895, var2895, 'o', 'k'])
            } finally { // block id: 4911
                (namedParam2189, UInt8(100), var39, var886, var319, false);
                ();
                Option<Array<Rune>>.Some(var4922)
            }
        } catch (_) { // block id: 4924
            ([Float32(-21.0), Float32(55.0), Float32(-64.0), Float32(-84.0), Float32(3.0), Float32(5.0), Float32(85.0), Float32(-31.0), Float32(-2.0), Float32(17.0)] as Array<Rune>)
        }
    }
;
    let var4931 : Array<Float32> = [Float32(2.0), Float32(-19.0), Float32(-7.0), Float32(-41.0), Float32(19.0), Float32(11.0), Float32(115.0), Float32(96.0), Float32(2.0), Float32(125.0)];
    let var4948 : Array<Rune> = ['1', 'k', 'q', '7', 'c', 's', 'i', '0', 'n', 'L'];
    let var4957 : (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64) = ([false, false, true, false, true, false, true, false, false, true], (UInt8(56)&127..=UInt8(56)&127:(Int64(Int16(UInt16(150)))|1)), (UInt8(221)&127..UInt8(42)&127:((-24)|1)), ['j', 'P', 'q', '9', 'i', 'B', 'L', 'U', '7', 'Q'], UInt32(UInt8(153)), 53);
    match (func2186(namedParam2187 : if (false) { [var4931, var4931, var4931, var4931, var4931, var4931, var4931, [Float32(-32.0), Float32(49.0), Float32(-41.0), Float32(-16.0), Float32(-65.0), Float32(-40.0), Float32(36.0), Float32(22.0), Float32(72.0), Float32(-11.0)], [Float32(62.0), Float32(79.0), Float32(-36.0), Float32(81.0), Float32(55.0), Float32(36.0), Float32(-8.0), Float32(-92.0), Float32(-100.0), Float32(-35.0)], [Float32(118.0), Float32(-54.0), Float32(-32.0), Float32(17.0), Float32(89.0), Float32(-7.0), Float32(-36.0), Float32(61.0), Float32(-67.0), Float32(-68.0)]] } else { [[Float32(-41.0), Float32(41.0), Float32(73.0), Float32(13.0), Float32(-67.0), Float32(-128.0), Float32(7.0), Float32(79.0), Float32(19.0), Float32(-61.0)], [Float32(7.0), Float32(-23.0), Float32(114.0), Float32(89.0), Float32(-34.0), Float32(110.0), Float32(-104.0), Float32(-113.0), Float32(-95.0), Float32(-116.0)], [Float32(49.0), Float32(-73.0), Float32(104.0), Float32(-27.0), Float32(-85.0), Float32(34.0), Float32(-18.0), Float32(-80.0), Float32(-92.0), Float32(117.0)], [Float32(-63.0), Float32(19.0), Float32(-9.0), Float32(-105.0), Float32(93.0), Float32(78.0), Float32(125.0), Float32(-71.0), Float32(64.0), Float32(-119.0)], [Float32(-35.0), Float32(24.0), Float32(72.0), Float32(32.0), Float32(45.0), Float32(64.0), Float32(-109.0), Float32(23.0), Float32(100.0), Float32(103.0)], [Float32(24.0), Float32(17.0), Float32(-102.0), Float32(100.0), Float32(16.0), Float32(-56.0), Float32(-108.0), Float32(-84.0), Float32(62.0), Float32(-11.0)], [Float32(-15.0), Float32(-80.0), Float32(77.0), Float32(101.0), Float32(51.0), Float32(-114.0), Float32(-13.0), Float32(81.0), Float32(-73.0), Float32(-23.0)], [Float32(41.0), Float32(82.0), Float32(89.0), Float32(10.0), Float32(30.0), Float32(-111.0), Float32(-118.0), Float32(63.0), Float32(-90.0), Float32(80.0)], [Float32(108.0), Float32(95.0), Float32(-122.0), Float32(-71.0), Float32(-74.0), Float32(24.0), Float32(87.0), Float32(119.0), Float32(87.0), Float32(11.0)], [Float32(-62.0), Float32(56.0), Float32(-38.0), Float32(12.0), Float32(106.0), Float32(-48.0), Float32(26.0), Float32(-89.0), Float32(-113.0), Float32(-105.0)]] } , namedParam2188 : (var2134&127..=UInt64(135)&127:(var2099|1)), namedParam2189 : var4948)) {
        case caseVar4952 => 
            if (true) { var4957 } else { var4957 } 
        
        case _ => 
            var4957
        
    }
}

public func func1079(param1080 : (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64), param1081 : (Range<Int16>, (Range<Int32>, (Float64, Bool, Float64, UInt16, UInt32, Int16), Array<Bool>, Unit, Range<UInt32>, Range<Int64>, UInt32), UInt16, Bool), namedParam1082 ! : Range<UInt8>) : ((Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64))), Range<Int8>) { // block id: 1083
    ((Int32(20)&127..Int32(13)&127:(var2099|1))|>func1086)[0];
    var var2130 : UInt64 = UInt64(Int32(86));
    var loopTimeVar2137 : Int64 = 0;
    while ((if (var2107) { // block id: 2109
        var2112 & Int32(41)
    } else { // block id: 2117
        var408;
        var var2121 : UInt32 = UInt32(200);
        var2121 ^= var39;
        var2112
    } <= Int32(var319)) && loopTimeVar2137 < 100 ) {
        loopTimeVar2137++;
        var2130 |= var2134
    };
    Class46.func2141(namedParam2142 : (var4515|>func2180))
}



func func1073(param1074 : UInt16) : Array<Option<Int16>> { // block id: 1075
    var var5024 : (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64) = ([true, (Int16(Int8(35)) is ((Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64))), Range<Int8>)), ((Int32(-4)&127..Int32(35)&127:(-42)|1) is Range<UInt32>), true, false, true, ((UInt64(65), Float32(-68.0), (Int32(-55)&127..Int32(-15)&127:(-101)|1), (Int16(-64)&127..Int16(8)&127:12|1), ([false, false, false, true, true, false, true, true, true, true], (UInt8(219)&127..UInt8(200)&127:(-85)|1), (UInt8(154)&127..UInt8(96)&127:101|1), ['J', '2', 'C', '2', 'Q', 'Z', 'U', 'w', '2', 'E'], UInt32(228), 117)) is Option<Option<Range<UInt16>>>), false, ([Option<Int16>.None, Option<Int16>.Some(Int16(92)), Option<Int16>.None, Option<Int16>.None, Option<Int16>.Some(Int16(34)), Option<Int16>.None, Option<Int16>.None, Option<Int16>.None, Option<Int16>.None, Option<Int16>.None] is (UInt64, Array<Bool>, Range<Int16>, (UInt32, Array<Float64>, Int8)) -> Class46), false], (UInt8(188)&127..UInt8(197)&127:103|1), (UInt8(13)&127..=UInt8(Int8(78))&127:(Int64(Int64(UInt64(167)))|1)), ['U', 'p', 'Z', 'g', 'q', 'S', '8', 'm', 'V', 'S'], UInt32(42), (-62));
    let var5163 : ?(Range<Int16>, (Range<Int32>, (Float64, Bool, Float64, UInt16, UInt32, Int16), Array<Bool>, Unit, Range<UInt32>, Range<Int64>, UInt32), UInt16, Bool) = Option<(Range<Int16>, (Range<Int32>, (Float64, Bool, Float64, UInt16, UInt32, Int16), Array<Bool>, Unit, Range<UInt32>, Range<Int64>, UInt32), UInt16, Bool)>.Some(((Int16(-42)&127..Int16(108)&127:63|1), ((Int32(42)&127..=Int32(21)&127:11|1), (96.0, false, 35.0, UInt16(43), UInt32(20), Int16(105)), [true, false, true, true, true, true, false, false, false, false], (), (UInt32(157)&127..=UInt32(176)&127:(85|1)), ((-116)&127..=16&127:(110|1)), UInt32(233)), UInt16(58), false));
    let var5190 : (Range<Int16>, (Range<Int32>, (Float64, Bool, Float64, UInt16, UInt32, Int16), Array<Bool>, Unit, Range<UInt32>, Range<Int64>, UInt32), UInt16, Bool) = ((Int16(-38)&127..=Int16(55)&127:(-88)|1), ((Int32(111)&127..=Int32(117)&127:122|1), (97.0, ((UInt8(54)&127..=UInt8(60)&127:(-38)|1) is Option<Unit>), 84.0, UInt16(UInt8(31)), UInt32(Int32(34)), Int16(95)), [false, false, true, true, true, true, false, false, false, true], (), (UInt32(10)&127..UInt32(30)&127:59|1), ((-39)&127..=(-13)&127:((-80)|1)), UInt32(130)), UInt16(38), ((Float32(-88.0) as Option<Unit>) is Int64));
    func1079(try { // block id: 4981
        var var4988 : Bool = ((Option<Array<Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>>>.None as Bool) is Option<Option<Unit>>);
        var var4997 : Bool = ((Int16(66)&127..=Int16(-50)&127:(-94)|1) is Range<Int32>);
        let var5007 : Int64 = 83;
        if (true) { ([false, var4988, false, var4889, true, true, var4997, false, true, false], (UInt8(248)&127..var557&127:(var5007|1)), var4171, [var2895, 'd', var2895, var2895, var2895, var2895, 'z', var2895, var2895, '0'], UInt32(77), (-119)) } else { var5024 } 
    } finally { // block id: 5106
        let var5121 : Array<Float64> = [(-110.0), 29.0, 52.0, (-112.0), Float64(Float32(-28.0)), Float64(Float32(Float32(25.0))), (-47.0), (-39.0), 90.0, 42.0];
        if (false) { [var886, 83.0, var886, (-100.0), var886, 104.0, var886, var886, 3.0, var886] } else { var5121 } ;
        var408;
        ([false, var61, false, var61, true, false, var2240, false, var2107, var61], (UInt8(217)&127..=UInt8(149)&127:(var2099|1)), var4171, ['x', 'h', '1', 'j', 'U', 'j', 'q', 'B', 'z', 'V'], var39, var2099)
    }, (var5163 ?? var5190), namedParam1082 : (UInt8(85)&127..=var557&127:((-29)|1)))[0];
    let var5232 : ?UInt16 = Option<UInt16>.Some(UInt16(76));
    match (Option<(Range<Int16>, (Range<Int32>, (Float64, Bool, Float64, UInt16, UInt32, Int16), Array<Bool>, Unit, Range<UInt32>, Range<Int64>, UInt32), UInt16, Bool)>.None) {
        case caseVar5226 => 
            var5229;
            var5232
        
        case caseVar5237 => 
            if (false) { var5242 } else { var5242 } ;
            Option<UInt16>.None
        
        case _ => 
            ();
            var4543 %= Float32((Int32(Float32(-65.0))) | 1);
            var5232
        
    };
    (match (if (true) { (var2134&127..var2134&127:((-52)|1)) } else { (UInt64(63)&127..=UInt64(96)&127:109|1) } ) {
        case _ => 
            let var5272 : ?Array<Option<Int16>> = ([75.0, 61.0, 83.0, (-46.0), 102.0, (-17.0), (-30.0), (-30.0), 34.0, (-38.0)] as Array<Option<Int16>>);
            if (false) { var5272 } else { var5272 } 
        
        case caseVar5278 => 
            ();
            var5282
        
        case _ => 
            var61;
            var2112 ^= var2112;
            let var5291 : ?Array<Option<Int16>> = ((((), (Int16(106)&127..Int16(125)&127:(10|1)), (Int8(74)&127..Int8(48)&127:((-108)|1)), (UInt64(51), Float32(-30.0), (Int32(119)&127..=Int32(-39)&127:(-91)|1), (Int16(8)&127..Int16(-126)&127:6|1), ([true, false, false, true, true, true, false, true, false, false], (UInt8(205)&127..=UInt8(251)&127:69|1), (UInt8(246)&127..=UInt8(192)&127:((-79)|1)), ['n', 'S', 'o', 'N', 't', '3', '2', 'W', '9', 'c'], UInt32(27), (-36)))), (Int8(-26)&127..Int8(40)&127:(-126)|1)) as Array<Option<Int16>>);
            var5291
        
    } ?? match (Int8(112) & var685) {
        case _ => 
            var2039;
            ();
            [Option<Int16>.None, var5341, Option<Int16>.Some(Int16(-104)), Option<Int16>.None, Option<Int16>.None, Option<Int16>.None, var5341, var5341, var5341, Option<Int16>.None]
        
    })
}


func func1004(param1005 : (UInt32, Array<Float64>, Int8)) : (UInt32, Array<Float64>, Int8) { // block id: 1006
    let var1020 : ?Range<UInt16> = Option<Range<UInt16>>.None;
    func func1008(param1009 : Option<Int16>) : Unit { // block id: 1010
        let var1029 : ?Unit = (false as Unit);
        var var1033 : Unit = ();
        var loopTimeVar1045 : Int64 = 0;
        do {
            loopTimeVar1045++;
            (var1029 ?? var1033);
            var loopTimeVar1043 : Int64 = 0;
            do {
                loopTimeVar1043++;
                if (true) { var301 } else { var301 } 
            } while ((var61) && loopTimeVar1043 < 100 ) 
        } while ((((Option<Option<Range<UInt16>>>.None ?? var1020) is Option<Int16>)) && loopTimeVar1045 < 100 ) ;
        var var1054 : Range<Int8> = (Int8(UInt8(73))&127..Int8(UInt8(UInt8(11)))&127:((-92)|1));
        func608(((), var355, var1054, var968)[1]).var1065;
        func1068()
    }
;
    let var5355 : (UInt16) -> Array<Option<Int16>> = func1073;
    func1008((var319|>var5355)[7]);
    let var5419 : (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64) = ([((['o', 'k', 'v', '2', 'M', 'R', 'z', 'Y', '3', 'G'], UInt8(175), UInt32(147), (-96.0), UInt16(127), true) is (Float64) -> Unit), (Option<Array<Rune>>.None is UInt8), false, true, true, false, true, (Int8(-124) is Option<Unit>), ([Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.Some(((), (Int16(101)&127..=Int16(102)&127:((-101)|1)), (Int8(30)&127..=Int8(51)&127:((-93)|1)), (UInt64(238), Float32(41.0), (Int32(-29)&127..=Int32(68)&127:(-12)|1), (Int16(-41)&127..Int16(-14)&127:((-122)|1)), ([true, true, true, true, false, true, true, false, false, true], (UInt8(131)&127..=UInt8(26)&127:((-51)|1)), (UInt8(13)&127..=UInt8(216)&127:109|1), ['b', 'j', 'W', 'G', 'a', 'j', '1', '6', 'M', 'q'], UInt32(248), 54)))), Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None, Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.Some(((), (Int16(-96)&127..Int16(119)&127:((-96)|1)), (Int8(23)&127..=Int8(-1)&127:57|1), (UInt64(127), Float32(-89.0), (Int32(-54)&127..Int32(-88)&127:123|1), (Int16(-71)&127..Int16(-75)&127:(77|1)), ([false, false, false, false, false, false, false, false, true, true], (UInt8(129)&127..UInt8(149)&127:37|1), (UInt8(252)&127..UInt8(23)&127:((-48)|1)), ['T', 'z', 'G', 'a', 'n', 'D', '6', 'y', 'D', '4'], UInt32(107), 40)))), Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.Some(((), (Int16(126)&127..=Int16(90)&127:122|1), (Int8(-56)&127..=Int8(-94)&127:((-126)|1)), (UInt64(42), Float32(41.0), (Int32(109)&127..Int32(88)&127:10|1), (Int16(54)&127..=Int16(-127)&127:((-42)|1)), ([false, false, true, true, true, false, true, true, false, true], (UInt8(26)&127..UInt8(218)&127:(64|1)), (UInt8(103)&127..=UInt8(158)&127:42|1), ['6', '3', '5', 'P', 'P', 'H', 'q', 'X', 'e', 'J'], UInt32(71), (-16))))), Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None, Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.Some(((), (Int16(20)&127..Int16(105)&127:((-122)|1)), (Int8(64)&127..Int8(-122)&127:(-89)|1), (UInt64(46), Float32(99.0), (Int32(3)&127..=Int32(-76)&127:49|1), (Int16(-92)&127..Int16(74)&127:(-30)|1), ([false, true, true, false, false, true, true, false, false, false], (UInt8(148)&127..=UInt8(244)&127:106|1), (UInt8(109)&127..UInt8(101)&127:((-47)|1)), ['U', 'a', 'k', 'Q', 'w', 'E', 'e', 'C', 'g', 'L'], UInt32(184), 102)))), Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None, Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.Some(((), (Int16(-11)&127..=Int16(62)&127:91|1), (Int8(-88)&127..Int8(102)&127:(112|1)), (UInt64(32), Float32(105.0), (Int32(-68)&127..=Int32(29)&127:74|1), (Int16(0)&127..Int16(38)&127:(92|1)), ([true, true, true, true, false, false, true, false, false, false], (UInt8(50)&127..UInt8(14)&127:(-10)|1), (UInt8(116)&127..UInt8(8)&127:79|1), ['s', 'N', '0', 'h', 'a', 'S', 'L', '1', 'E', 'C'], UInt32(233), (-41))))), Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None, Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.Some(((), (Int16(-79)&127..Int16(-107)&127:125|1), (Int8(38)&127..=Int8(85)&127:29|1), (UInt64(247), Float32(-109.0), (Int32(29)&127..=Int32(111)&127:((-73)|1)), (Int16(92)&127..=Int16(69)&127:(40|1)), ([true, true, true, true, true, false, true, true, false, true], (UInt8(202)&127..=UInt8(159)&127:(-90)|1), (UInt8(109)&127..UInt8(229)&127:(-27)|1), ['k', 'f', 'P', '2', 'U', 'U', 'J', 'z', 'z', 'q'], UInt32(200), (-47)))))] is (Range<UInt16>, UInt16, Unit) -> Unit), true], (UInt8(Int8(UInt8(207)))&127..=UInt8(UInt8(89))&127:(Int64(UInt32(164))|1)), (UInt8(11)&127..UInt8(63)&127:(-39)|1), ['E', 'X', 'O', 't', '2', 'e', 'N', 'p', '8', 'T'], UInt32(210), Int64(Int32(Int16(Int8(-96)))));
    let var5710 : ?Bool = Option<Bool>.None;
    let var5797 : ?Range<Int64> = Option<Range<Int64>>.None;
    if ((match (Int32(-110)) {
        case caseVar5365 => 
            true
        
        case _ => 
            var61
        
    } is (Range<UInt16>, Range<Int16>) -> (Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64))))) { // block id: 5371
        try (resource = Class46()) { // block id: 5373

        } finally { // block id: 5374

        };
        UInt32(151) % ((var39) | 1);
        let var5387 : Range<Int16> = (Int16(-14)&127..=Int16(-61)&127:(-115)|1);
        let var5723 : Unit = ();
        match ([var2039, Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.Some(var1203), Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.Some((var408, var5387, (Int8(17)&127..Int8(-91)&127:(-118)|1), var968)), var2039, Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None, Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.Some(var1203), var2039, Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.Some(var1203), Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None, var2039]) {
            case _ => 
                if (var2240) { var5282 } else { var5282 } ;
                param1005
            
            case _ => 
                if (false) { var5414 } else { var4241 } ;
                var5419;
                param1005
            
            case caseVar5704 : Option<Option<Range<UInt16>>> => 
                ();
                if (var2240) { var5710 } else { var5710 } ;
                if (var2107) { (var39, [(-52.0), 86.0, 111.0, (-15.0), (-5.0), 99.0, 89.0, (-80.0), 84.0, (-68.0)], Int8(100)) } else { param1005 } 
            
            case _ => 
                var5723;
                var5723;
                var var5732 : Array<Float64> = [(-89.0), 4.0, (-55.0), (-43.0), (-6.0), 9.0, (-40.0), 126.0, (-35.0), 21.0];
                if (false) { param1005 } else { (UInt32(35), var5732, Int8(-93)) } 
            
        }
    } else if (var61) { // block id: 5736
        match ("""
T72ij
g%;)7
""") {
            case """
\"Vm7\\
HOR~F
""" => 
                var2112 |= var2112
            
            case _ : Option<Bool> => 
                ();
                var var5751 : UInt32 = UInt32(UInt16(105));
                var5751 /= ((UInt32(245)) | 1);
                ()
            
            case caseVar5758 : UInt64 => 
                var var5762 : Int32 = Int32(Int16(Int16(118)));
                var5762 **= (var5762 & 3);
                ()
            
            case _ => 
                var61 ||= var2240
            
        };
        if (false) { param1005 } else { (UInt32(72), [0.0, var886, (-69.0), (-122.0), (-61.0), 12.0, var886, (-78.0), var886, 115.0], Int8(-68)) } 
    } else { // block id: 5790
        (var5797 ?? (var2099&127..=(-14)&127:(116|1)));
        ['I', 'Q', 'C', 'x', 'L', '6', 'Z', 'Z', 'g', 'A'];
        if (var61) { (var39, [(-79.0), (-126.0), 100.0, 34.0, 121.0, (-47.0), 8.0, (-29.0), 88.0, (-9.0)], Int8(57)) } else { (var39, [var886, (-57.0), 15.0, 36.0, var886, (-97.0), 53.0, var886, var886, var886], Int8(105)) } 
    }
}


func func532(param533 : Option<Range<UInt16>>) : Int16 { // block id: 534
    Int16((Class46.func539(Option<Int16>.None)))
}

public func func384(param385 : UInt16) : Option<Range<UInt16>> { // block id: 386
    func func528(param529 : UInt64) : Range<UInt32> { // block id: 530
        let var6389 : (Option<Range<UInt16>>) -> Int16 = func532;
        try { // block id: 6392
            if (true) { Option<Range<UInt16>>.None } else { var6102 } 
        } catch (_) { // block id: 6397
            Option<Range<UInt16>>.None
        }|>var6389;
        var var6400 : Range<UInt32> = (UInt32(225)&127..UInt32(99)&127:((-20)|1));
        var6400
    }
;
    func func433(optionalParam434 ! : UInt32 = UInt32(UInt8(UInt8(229))), optionalParam438 ! : String = """
g}V&E
)UEI>
""", namedParam440 ! : Float64, namedParam441 ! : Range<Int8>) : Range<UInt32> { // block id: 442
        try (resource = Class46()) { // block id: 444

        } finally { // block id: 445
            let var480 : Float64 = 109.0;
            let var495 : (UInt32, Array<Float64>, Int8) = (UInt32(UInt16(106)), [13.0, 76.0, (-14.0), 123.0, 91.0, (-50.0), (-108.0), (-72.0), (-85.0), 44.0], Int8(-90));
            func func447() : Unit { // block id: 448
                if (var61) { ((-17.0), true, namedParam440, UInt16(56), UInt32(108), Int16(-76)) } else { (namedParam440, var61, (-74.0), UInt16(66), optionalParam434, var73) } [0] * [(-29.0), (-4.0), 115.0, 57.0, namedParam440, namedParam440, (-101.0), (-60.0), var480, (-121.0)][5];
                var loopTimeVar503 : Int64 = 0;
                do {
                    loopTimeVar503++;
                    var495[2]
                } while ((try { // block id: 486
                    """
<oL-/
;`u#s
""";
                    true
                } finally { // block id: 489
                    var61
                }) && loopTimeVar503 < 100 ) 
            }
;
            func447()
        };
        let var519 : Range<UInt8> = (UInt8(146)&127..UInt8(102)&127:56|1);
        (Option<Array<Rune>>.None ?? (var516, var519, (UInt8(45)&127..UInt8(187)&127:25|1), ['a', 's', 'q', 'c', 'd', 'g', 'S', 'Z', '8', 'y'], var39, (-98))[3])[4];
        func528(match (try { // block id: 6407
                var var6410 : UInt64 = UInt64(94);
                var6410 /= ((var6410) | 1);
                var var6415 : ?Unit = ([95.0, (-102.0), 115.0, (-9.0), 113.0, (-118.0), (-116.0), (-19.0), (-91.0), 46.0] as Unit);
                Option<Option<Unit>>.Some(var6415)
            } catch (e: Exception) { // block id: 6418
                if (true) { Option<Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>>.Some(Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.Some(var1203)) } else { Option<Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>>.None } ;
                Option<Option<Unit>>.Some(var5414)
            }) {
            case caseVar6429 : (Unit, Int16, Range<UInt32>, Option<Range<UInt16>>) => 
                Enum2542.defaultValue;
                UInt64(55) ^ UInt64(222)
            
            case _ => 
                var73 **= (var73 & 3);
                var685 + Int8(47);
                var2134
            
            case _ => 
                (var1203, (Int8(-69)&127..Int8(-112)&127:(var2099|1)));
                ();
                var2134
            
        })
    }
;
    if (((Class46.var392) < if (var61) { // block id: 396
        ();
        ###"c|^PHpZT0]"###;
        let var400 : UInt64 = UInt64(Int32(-17));
        var400
    } else if (false) { // block id: 404
        UInt64(38)
    } else { // block id: 406
        var408;
        UInt32(149) <= UInt32(60);
        UInt64(113)
    })) { func86(func433(optionalParam438 : """
sn[V`
\\pz~b
""", namedParam440 : 71.0, namedParam441 : (Int8(-66)&127..Int8(112)&127:122|1))) } else { match (if (var61) { (Int8(84)&127..var685&127:(var2099|1)) } else { (Int8(-76)&127..=var685&127:(var2099|1)) } ) {
        case _ => 
            var var6473 : UInt64 = UInt64(Int8(63));
            var6473 ^= UInt64(113);
            var6102
        
    } } 
}


func func379(param380 : Option<Bool>, namedParam381 ! : Unit) : Option<Range<UInt16>> { // block id: 382
    -(Option<UInt16>.Some(UInt16(100)) ?? UInt16(175))|>func384
}

func func282(param283 : (Range<Int32>, (Float64, Bool, Float64, UInt16, UInt32, Int16), Array<Bool>, Unit, Range<UInt32>, Range<Int64>, UInt32)) : Option<Range<UInt16>> { // block id: 284
    var var342 : Int32 = Int32(-106);
    match (match (match (Option<Bool>.None) {
                case _ => 
                    var var293 : ?Float64 = Option<Float64>.Some(14.0);
                    var293
                
                case caseVar298 => 
                    var301
                
                case _ => 
                    ();
                    if (false) { var301 } else { var301 } 
                
                case _ => 
                    Option<Float64>.None
                
            }) {
            case _ => 
                var319 &= UInt16(19);
                var var323 : (Float64, Bool, Float64, UInt16, UInt32, Int16) = (101.0, (Option<Int16>.Some(Int16(-105)) is Option<Bool>), (-48.0), UInt16(Int16(Int8(34))), UInt32(UInt8(124)), Int16(UInt16(8)));
                var323
            
        }) {
        case _ : Bool => 
            var var346 : Int64 = Int64(UInt32(112));
            (var342&127..=var342&127:(var346|1));
            let var350 : Unit = ();
            var350;
            if (true) { var355 } else { (var42&127..=Int16(-33)&127:(var346|1)) } 
        
        case caseVar363 : Option<Int16> => 
            var var366 : Unit = ();
            var366;
            (Int16(31)&127..Int16(92)&127:44|1)
        
        case _ => 
            if (false) { (var73&127..=Int16(-82)&127:((-21)|1)) } else { var355 } 
        
    };
    var var6518 : ?Bool = ((112 as Bool) as Bool);
    var loopTimeVar6559 : Int64 = 0;
    func379(if (if (true) { // block id: 6491
        ((-54)&127..=23&127:(-102)|1);
        var408;
        var61
    } else if (true) { // block id: 6496
        true
    } else { // block id: 6498
        var50;
        true
    }) { try { // block id: 6502
        var6504;
        let var6507 : ?Bool = Option<Bool>.Some(((7 as Range<UInt16>) is (UInt64, Array<Bool>, Range<Int16>, (UInt32, Array<Float64>, Int8)) -> Class46));
        var6507
    } catch (_) { // block id: 6512
        Int16(-40);
        var4206;
        Option<Bool>.Some(var4889)
    } } else { var6518 } , namedParam381 : do {
        loopTimeVar6559++;
        var61 ||= true;
        if (false) { var6534 } else { var6534 } 
    } while (((Option<Bool>.Some(var2240) ?? false)) && loopTimeVar6559 < 100 ) )
}


func func277(param278 : Int32) : Option<Float64> { // block id: 279
    var var6622 : Bool = false;
    let var6637 : Int64 = Int64(UInt64((-84)));
    var var6647 : Bool = ((['d', 'O', 'k', 'f', 's', 'R', 'S', 'C', '9', 't'], UInt8(Int8(9)), UInt32(160), Float64(Float64((-28.0))), UInt16(Int16(-64)), (Int8(-72) is ((Range<Int32>, (Float64, Bool, Float64, UInt16, UInt32, Int16), Array<Bool>, Unit, Range<UInt32>, Range<Int64>, UInt32)) -> Option<Range<UInt16>>)) is Int64);
    var var6686 : Bool = ([Float32(50.0), Float32(-6.0), Float32(-81.0), Float32(-122.0), Float32(34.0), Float32(-30.0), Float32(-74.0), Float32(-80.0), Float32(-97.0), Float32(87.0)] is Range<Int16>);
    (func282(if (true) { // block id: 6562
        Option<Bool>.None;
        let var6570 : Int32 = Int32(61);
        if (false) { var1864 } else { ((var6570&127..=Int32(98)&127:(var2099|1)), var6575, [var2240, var6622, var4889, true, true, false, var2107, var61, var61, true], (), (UInt32(3)&127..=var5926&127:(var6637|1)), var807, var5926) } 
    } else if (false) { // block id: 6644
        let var6672 : Enum2542 = Enum2542.defaultValue;
        if (var6647) { var6672 } else { var6672 } ;
        var var6682 : Bool = false;
        ((Int32(-40)&127..Int32(-117)&127:(-36)|1), var6575, [var6132, var2107, var6682, false, var6686, var4889, var6622, false, var61, var2240], var6504, (UInt32(220)&127..=UInt32(208)&127:((-114)|1)), (8&127..=(-115)&127:21|1), var39)
    } else { // block id: 6701
        if (true) { var1864 } else { ((Int32(-59)&127..Int32(-47)&127:26|1), var6575, [var2107, var6132, false, var6647, true, var61, false, var6717, var4889, var4889], var6733, (UInt32(232)&127..UInt32(21)&127:(-24)|1), ((-33)&127..=(-98)&127:(-111)|1), UInt32(75)) } 
    }) ?? match ((var5926, var6742, var685)) {
        case (caseVar6769 : Enum2542,_,caseVar6770 : Option<Float64>) => 
            var6773
        
        case caseVar6781 : Option<Bool> => 
            var6773
        
        case _ : UInt32 => 
            (UInt16(12)&127..var319&127:(var6637|1))
        
        case _ => 
            (UInt16(106)&127..UInt16(231)&127:1|1)
        
    });
    var var6816 : Enum2542 = Enum2542.defaultValue;
    try { // block id: 6795
        (var5414 ?? var408);
        var loopTimeVar6803 : Int64 = 0;
        do {
            loopTimeVar6803++;

        } while ((var2240) && loopTimeVar6803 < 100 ) ;
        let var6810 : ?Enum2542 = (Class46(UInt64(59), UInt32(128)) as Enum2542);
        (var6810 ?? var6816)
    } catch (_) { // block id: 6818
        var var6859 : Range<UInt32> = (UInt32(UInt16(27))&127..=UInt32(70)&127:(73|1));
        let var6874 : Unit = ();
        try { // block id: 6820
            if (false) { Option<(Range<Int16>, (Range<Int32>, (Float64, Bool, Float64, UInt16, UInt32, Int16), Array<Bool>, Unit, Range<UInt32>, Range<Int64>, UInt32), UInt16, Bool)>.Some(((Int16(-11)&127..Int16(40)&127:43|1), ((Int32(-30)&127..=Int32(55)&127:(var2099|1)), (var886, var6834, (-6.0), var319, UInt32(19), Int16(-42)), [false, false, true, true, true, true, true, false, false, true], var408, (UInt32(102)&127..=UInt32(136)&127:(var2099|1)), var807, UInt32(144)), var319, var6132)) } else { Option<(Range<Int16>, (Range<Int32>, (Float64, Bool, Float64, UInt16, UInt32, Int16), Array<Bool>, Unit, Range<UInt32>, Range<Int64>, UInt32), UInt16, Bool)>.Some(((Int16(-22)&127..Int16(-52)&127:(-44)|1), ((Int32(-4)&127..=Int32(-126)&127:(-63)|1), var6575, var516, var6733, var6859, var807, var39), var319, false)) } 
        } catch (e: Exception) { // block id: 6869
            Int32(-109);
            Option<(Range<Int16>, (Range<Int32>, (Float64, Bool, Float64, UInt16, UInt32, Int16), Array<Bool>, Unit, Range<UInt32>, Range<Int64>, UInt32), UInt16, Bool)>.None
        } finally { // block id: 6872
            var6874;
            Option<(Range<Int16>, (Range<Int32>, (Float64, Bool, Float64, UInt16, UInt32, Int16), Array<Bool>, Unit, Range<UInt32>, Range<Int64>, UInt32), UInt16, Bool)>.Some(var6878)
        };
        if (var2240) { var6816 } else { var6816 } 
    } finally { // block id: 6973
        ();
        let var6976 : ?Int8 = (([[true, false, true, true, true, false, true, true, false, true], [true, false, false, false, false, false, false, false, false, true], [false, true, false, false, false, false, false, false, false, true], [true, true, false, false, true, false, false, false, false, true], [true, true, true, true, true, true, true, false, false, false], [false, false, true, false, true, true, true, false, true, false], [false, true, false, false, true, true, false, false, false, true], [true, false, false, true, true, false, true, true, false, true], [true, false, true, true, true, false, false, true, false, false], [true, false, true, true, false, true, true, true, false, false]] as Option<Bool>) as Int8);
        var6976;
        try { // block id: 7051
            var5229;
            var6504;
            if (var2240) { Enum2542.defaultValue } else { var6816 } 
        } catch (e: Exception) { // block id: 7058
            if (true) { Enum2542.defaultValue } else { Enum2542.defaultValue } 
        }
    };
    Option<Float64>.Some((match (var6878) {
        case (caseVar7069 : UInt16,(caseVar7070 : UInt16,(_,_,_,_ : Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>,caseVar7071 : Option<Option<Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>>>,caseVar7072),_ : Option<Range<Int64>>,_,caseVar7073 : Option<Enum2542>,caseVar7074,caseVar7075 : Array<Option<Int16>>),caseVar7076,caseVar7077) => 
            var6504;
            if (true) { Option<Option<Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>>>.None } else { Option<Option<Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>>>.Some(Option<Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>>.Some(var2039)) } ;
            var301
        
        case (caseVar7089 : Class46,(caseVar7090 : Option<UInt16>,(_ : Option<Int16>,caseVar7091,_ : Array<Array<Float32>>,_,caseVar7092 : Option<Enum2542>,caseVar7093 : (Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))),_,_ : Option<Bool>,_ : Option<(Range<Int16>, (Range<Int32>, (Float64, Bool, Float64, UInt16, UInt32, Int16), Array<Bool>, Unit, Range<UInt32>, Range<Int64>, UInt32), UInt16, Bool)>,caseVar7094 : String,caseVar7095),caseVar7096,_ : Array<Rune>) => 
            Int16(21);
            if (true) { var301 } else { var301 } 
        
        case caseVar7105 => 
            if (true) { var5229 } else { var5229 } ;
            ();
            if (var6622) { var7115 } else { var301 } 
        
        case _ => 
            (UInt32(61)&127..UInt32(117)&127:(var6637|1));
            Option<Float64>.None
        
    } ?? var886))
}

public func func270(param271 : Float32, namedParam272 ! : Array<Bool>, optionalParam273 ! : Option<Bool> = Option<Bool>.None) : Option<Float64> { // block id: 275
    if (var5926 != UInt32(65)) { // block id: 7131
        Int32(123)
    } else if (try { // block id: 7134
        if (var2107) { var6001 } else { Option<Array<Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>>>.None } ;
        var319;
        false
    } finally { // block id: 7141
        [(-38.0), 38.0, var886, 3.0, (-108.0), var886, var886, var886, var886, 98.0];
        var6132
    }) { // block id: 7154
        var2112
    } else { // block id: 7156
        var7158;
        Int32(-97) | Int32(-99)
    }|>func277
}


public func func249<T0, T1>(param250 : Class46) : Float64 { // block id: 251
    var loopTimeVar255 : Range<UInt64> = (UInt64(209)&127..UInt64(Int32(Int8(UInt8(135))))&127:(Int64(UInt32(138))|1));
    for (i in loopTimeVar255 where var61) {

    };
    var var7172 : ?Float64 = ((-110.0) as Float64);
    (func270(var4543, namedParam272 : [true, false, false, true, false, true, true, false, true, true]) ?? (var7172 ?? 74.0))
}


func func86(param87 : Int32, namedParam88 ! : Int16) : Int16 { // block id: 89
    let var161 : (Range<Int32>, (Float64, Bool, Float64, UInt16, UInt32, Int16), Array<Bool>, Unit, Range<UInt32>, Range<Int64>, UInt32) = ((Int32(72)&127..Int32(Int8(UInt8(34)))&127:(Int64((-63))|1)), (Float64(Float64(Float32(108.0))), true, Float64(Float32(Float32(37.0))), UInt16(11), UInt32(UInt8(230)), Int16(-66)), [true, false, (((Int32(-92)&127..=Int32(-90)&127:(-91)|1), ((-54.0), false, 51.0, UInt16(4), UInt32(186), Int16(-105)), [false, true, false, true, false, false, false, false, false, true], (), (UInt32(166)&127..=UInt32(7)&127:(81|1)), (1&127..(-122)&127:(111|1)), UInt32(201)) is Range<Int64>), ((UInt16(189)&127..UInt16(189)&127:((-33)|1)) is (Range<UInt16>, UInt16, Unit) -> Unit), (() is Bool), (("21YWxR84nz" as Int16) is (Range<Int32>, (Float64, Bool, Float64, UInt16, UInt32, Int16), Array<Bool>, Unit, Range<UInt32>, Range<Int64>, UInt32)), ((41&127..=34&127:((-22)|1)) is UInt32), true, (() is Unit), ((90&127..105&127:((-20)|1)) is UInt32)], (), (UInt32(98)&127..UInt32(55)&127:43|1), (1&127..=(-120)&127:80|1), UInt32(UInt16(UInt8(UInt8(211)))));
    let var7329 : Int32 = Int32(-116);
    func func102(optionalParam103 ! : UInt8 = UInt8(Int8(59))) : Array<Bool> { // block id: 106
        var var140 : Int64 = (-35);
        Class46.func110(namedParam111 : (Option<Range<UInt16>>.None ?? (UInt16(116)&127..UInt16(157)&127:(-95)|1)), optionalParam115 : if (false) { // block id: 127
            ();
            ()
        } else if (var61) { // block id: 131
            UInt8(71);
            if (false) { (Int16(-71)&127..Int16(111)&127:(-13)|1) } else { (namedParam88&127..=Int16(-35)&127:(var140|1)) } ;
            ()
        });
        let var7177 : (Class46) -> Float64 = func249<Option<Unit>, String>;
        func func144(param145 : Float32, param146 : Int16, param147 : Range<Int64>) : Unit { // block id: 148
            Class46.var152;
            func func155(param156 : Float64) : Unit { // block id: 157
                var161[3]
            }
;
            func155((var50|>var7177) ** Float64(Int32(try { // block id: 7181
                var886 * (-85.0)
            } finally { // block id: 7185
                var886
            }) & 3));
            var loopTimeVar7193 : Int64 = 0;
            while (((Option<Bool>.None ?? var6834)) && loopTimeVar7193 < 100 ) {
                loopTimeVar7193++;

            }
        }
;
        var var7238 : ?Array<Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>> = ((UInt64(UInt8(64)), Float32(70.0), (Int32(Int16(77))&127..Int32(-107)&127:(19|1)), (Int16(-115)&127..Int16(-15)&127:(112|1)), ([true, true, false, true, true, false, false, true, true, true], (UInt8(104)&127..UInt8(166)&127:(61|1)), (UInt8(191)&127..UInt8(149)&127:((-112)|1)), ['N', 'K', 'c', 'N', 'C', 'f', '1', 'G', 'r', '4'], UInt32(UInt16(108)), (-46))) as Array<Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>>);
        var var7306 : Array<Array<Float32>> = [[Float32(-72.0), Float32(95.0), Float32(-57.0), Float32(31.0), Float32(47.0), Float32(-84.0), Float32(28.0), Float32(4.0), Float32(-128.0), Float32(74.0)], [Float32(-99.0), Float32(44.0), Float32(39.0), Float32(-48.0), Float32(26.0), Float32(12.0), Float32(-97.0), Float32(68.0), Float32(30.0), Float32(-107.0)], [Float32(-61.0), Float32(113.0), Float32(-124.0), Float32(-62.0), Float32(52.0), Float32(-128.0), Float32(0.0), Float32(-85.0), Float32(102.0), Float32(-65.0)], [Float32(-44.0), Float32(-33.0), Float32(-120.0), Float32(12.0), Float32(61.0), Float32(-82.0), Float32(-96.0), Float32(-77.0), Float32(44.0), Float32(-115.0)], [Float32(55.0), Float32(29.0), Float32(49.0), Float32(-93.0), Float32(42.0), Float32(-125.0), Float32(94.0), Float32(-89.0), Float32(20.0), Float32(9.0)], [Float32(-18.0), Float32(-43.0), Float32(52.0), Float32(24.0), Float32(95.0), Float32(-1.0), Float32(-16.0), Float32(114.0), Float32(-71.0), Float32(-71.0)], [Float32(-6.0), Float32(111.0), Float32(-31.0), Float32(-21.0), Float32(119.0), Float32(-81.0), Float32(94.0), Float32(-19.0), Float32(95.0), Float32(-94.0)], [Float32(116.0), Float32(0.0), Float32(-30.0), Float32(59.0), Float32(68.0), Float32(5.0), Float32(-75.0), Float32(-29.0), Float32(-44.0), Float32(75.0)], [Float32(102.0), Float32(-93.0), Float32(-87.0), Float32(-65.0), Float32(-56.0), Float32(-10.0), Float32(35.0), Float32(4.0), Float32(15.0), Float32(-115.0)], [Float32(-15.0), Float32(69.0), Float32(-93.0), Float32(-23.0), Float32(84.0), Float32(29.0), Float32(-12.0), Float32(36.0), Float32(110.0), Float32(43.0)]];
        let var7407 : Int64 = Int64(1);
        let var7446 : Bool = true;
        func144(Float32(58.0), match (Option<Enum2542>.Some(Enum2542.defaultValue)) {
            case _ => 
                var140++;
                if (false) { Option<Option<Unit>>.Some(Option<Unit>.Some(var6733)) } else { Option<Option<Unit>>.None } ;
                var42
            
            case caseVar7213 : Option<Array<Option<Int16>>> => 
                var6733;
                var73 ** (Int16(-97) & 3)
            
            case Some(caseVar7221) => 
                ();
                Int16(-91)
            
            case _ => 
                if (false) { ((-42.0), true, 42.0, var319, var5926, Int16(64)) } else { var6575 } ;
                var7238;
                Int16(44)
            
        } ** (try { // block id: 7289
            var42
        } finally { // block id: 7291
            namedParam88
        } & 3), (try { // block id: 7295
            108 - var2099
        } catch (e: Exception) { // block id: 7299
            var140
        } finally { // block id: 7301
            if (var2240) { [[Float32(-61.0), Float32(3.0), Float32(115.0), Float32(36.0), Float32(84.0), Float32(31.0), Float32(-80.0), Float32(-120.0), Float32(98.0), Float32(-83.0)], [Float32(-94.0), Float32(38.0), Float32(-42.0), Float32(39.0), Float32(102.0), Float32(77.0), Float32(-10.0), Float32(-12.0), Float32(-63.0), Float32(19.0)], [Float32(96.0), Float32(-61.0), Float32(41.0), Float32(-127.0), Float32(-34.0), Float32(26.0), Float32(-74.0), Float32(89.0), Float32(41.0), Float32(106.0)], [Float32(-55.0), Float32(39.0), Float32(-78.0), Float32(94.0), Float32(83.0), Float32(-54.0), Float32(-18.0), Float32(3.0), Float32(-67.0), Float32(-99.0)], [Float32(-96.0), Float32(-54.0), Float32(20.0), Float32(72.0), Float32(15.0), Float32(-1.0), Float32(6.0), Float32(-38.0), Float32(56.0), Float32(41.0)], [Float32(-94.0), Float32(-11.0), Float32(87.0), Float32(67.0), Float32(33.0), Float32(44.0), Float32(-46.0), Float32(-18.0), Float32(46.0), Float32(26.0)], [Float32(-8.0), Float32(-82.0), Float32(-117.0), Float32(81.0), Float32(58.0), Float32(42.0), Float32(-71.0), Float32(-84.0), Float32(-35.0), Float32(-87.0)], [Float32(-40.0), Float32(-92.0), Float32(0.0), Float32(7.0), Float32(5.0), Float32(29.0), Float32(83.0), Float32(-15.0), Float32(-77.0), Float32(-126.0)], [Float32(45.0), Float32(-113.0), Float32(115.0), Float32(43.0), Float32(-89.0), Float32(-116.0), Float32(76.0), Float32(126.0), Float32(-23.0), Float32(29.0)], [Float32(-58.0), Float32(-76.0), Float32(-43.0), Float32(-74.0), Float32(99.0), Float32(44.0), Float32(-121.0), Float32(44.0), Float32(-90.0), Float32(-77.0)]] } else { var7306 } ;
            (-49)
        }&127..match ([Float32(69.0), Float32(-113.0), Float32(56.0), var4543, Float32(49.0), var4543, Float32(-13.0), Float32(85.0), Float32(-5.0), Float32(-9.0)]) {
            case _ : UInt16 => 
                if (var61) { (param87&127..=var7329&127:((-124)|1)) } else { (Int32(118)&127..Int32(111)&127:(-26)|1) } ;
                ();
                50
            
            case _ => 
                var319 <<= ((var319) & 7);
                ();
                var140
            
            case caseVar7345 : Int32 => 
                var7348;
                (-3)
            
            case _ => 
                var7398 &= Int8(69);
                var2112 = Int32(-21);
                var7407
            
        }&127:(match (var2895) {
            case 'f' | 'Q' => 
                105
            
            case 'D' | 'U' | 'U' | 'V' => 
                var408;
                var2112 += param87;
                var140
            
            case 'Y' | 'f' | 'N' => 
                if (var6132) { var7158 } else { Option<Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>>.None } ;
                var6102;
                var2099 & 22
            
            case _ => 
                [var6834, false, var6834, false, var6717, false, true, var7446, true, var7446];
                var140
            
        }|1)));
        match (((Option<Option<Option<Unit>>>.Some(var7460) ?? var7463) ?? Option<Unit>.Some(()))) {
            case _ => 
                if (false) { var516 } else { [true, false, false, true, false, false, false, false, true, false] } 
            
        }
    }
;
    let var7525 : Int16 = Int16(34);
    if (func102(optionalParam103 : var557)[2]) { // block id: 7475
        match (var557) {
            case _ : Array<Rune> => 
                var2112
            
            case 214 | 52 => 
                (Int8(26)&127..Int8(26)&127:68|1);
                var7488 = ###"-PqQCF[lLj"###;
                Int32(-38) & var2112
            
            case _ => 
                Option<Int8>.Some(var685);
                var6733;
                var2112 | Int32(96)
            
        };
        try (resource = Class46()) { // block id: 7503
            var408;
            ();
            ()
        } catch (e: Exception) { // block id: 7507
            if (var2107) { var7460 } else { var7463 } ;
            Option<Int16>.None;
            var6733
        } finally { // block id: 7514
            var73 /= ((namedParam88) | 1)
        };
        namedParam88
    } else if (var61) { // block id: 7520
        (var5926 as Float64);
        var7525 % ((namedParam88) | 1)
    } else { // block id: 7528
        var73
    }
}

func func83() : Int16 { // block id: 84
    func86(Int32(var73), namedParam88 : if (if (true) { // block id: 7535
        28 == var2099
    } else { // block id: 7539
        var6132
    }) { // block id: 7541
        var2099 ^ (-48);
        if (var2107) { var7158 } else { var7158 } ;
        Int16(39)
    } else { // block id: 7550
        ();
        Int16(-68)
    })
}

public func func56(param57 : Class46) : Unit { // block id: 58
    let var7558 : ?Float64 = Option<Float64>.Some(83.0);
    func func66(namedParam67 ! : Unit, optionalParam68 ! : String = ###"'|L2cw E;-"###) : Int32 { // block id: 70
        var73 >>= (((((-8) as Int16) ?? func83())) & 7);
        var var7637 : UInt64 = UInt64(4);
        var var7669 : Array<Float32> = [Float32(-8.0), Float32(119.0), Float32(4.0), Float32(-98.0), Float32(109.0), Float32(34.0), Float32(-93.0), Float32(117.0), Float32(-93.0), Float32(-46.0)];
        var var7672 : ((Range<Int32>, (Float64, Bool, Float64, UInt16, UInt32, Int16), Array<Bool>, Unit, Range<UInt32>, Range<Int64>, UInt32), Array<Option<Int16>>, Float32, (Range<Int32>, (Float64, Bool, Float64, UInt16, UInt32, Int16), Array<Bool>, Unit, Range<UInt32>, Range<Int64>, UInt32), Range<UInt16>) = (((Int32(-65)&127..Int32(56)&127:(Int64(UInt8(168))|1)), (Float64(Float32(96.0)), true, Float64((-49.0)), UInt16(UInt8(1)), UInt32(Int8(-2)), Int16(Int16(7))), [true, ((UInt64(158), Float32(69.0), (Int32(-47)&127..=Int32(87)&127:((-54)|1)), (Int16(-9)&127..Int16(77)&127:(-109)|1), ([true, true, false, true, false, true, true, true, true, true], (UInt8(174)&127..=UInt8(17)&127:(20|1)), (UInt8(125)&127..UInt8(116)&127:(46|1)), ['J', 'b', 't', 'W', 'a', 'O', '7', 't', 'R', 'l'], UInt32(47), (-102))) is Option<Float64>), false, true, false, (['7', '2', 'k', 'X', 'z', 'P', 'y', 'W', 'K', 'e'] is (Range<UInt64>, String, Array<Float64>, String) -> ((Range<Int32>, (Float64, Bool, Float64, UInt16, UInt32, Int16), Array<Bool>, Unit, Range<UInt32>, Range<Int64>, UInt32), Array<Option<Int16>>, Float32, (Range<Int32>, (Float64, Bool, Float64, UInt16, UInt32, Int16), Array<Bool>, Unit, Range<UInt32>, Range<Int64>, UInt32), Range<UInt16>)), ((-73) is Bool), false, true, false], (), (UInt32(100)&127..UInt32(149)&127:(24|1)), (Int64(Int8(95))&127..=Int64(UInt16(49))&127:((-83)|1)), UInt32(149)), [((UInt64(249), Float32(70.0), (Int32(55)&127..Int32(23)&127:((-76)|1)), (Int16(-31)&127..=Int16(27)&127:(23|1)), ([true, false, false, false, false, true, true, true, true, false], (UInt8(164)&127..UInt8(209)&127:101|1), (UInt8(118)&127..UInt8(143)&127:14|1), ['V', 'y', 'L', 'e', 'L', 'i', 'c', 'L', 'j', 'X'], UInt32(46), 85)) as Int16), Option<Int16>.None, ([Option<Int16>.Some(Int16(-29)), Option<Int16>.None, Option<Int16>.None, Option<Int16>.Some(Int16(-10)), Option<Int16>.Some(Int16(-13)), Option<Int16>.None, Option<Int16>.Some(Int16(49)), Option<Int16>.Some(Int16(-32)), Option<Int16>.None, Option<Int16>.Some(Int16(76))] as Int16), Option<Int16>.Some(Int16(-104)), (Option<Array<Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>>>.None as Int16), (Option<(Range<Int16>, (Range<Int32>, (Float64, Bool, Float64, UInt16, UInt32, Int16), Array<Bool>, Unit, Range<UInt32>, Range<Int64>, UInt32), UInt16, Bool)>.None as Int16), ((Int8(34) as Bool) as Int16), Option<Int16>.None, (Option<Option<Range<UInt16>>>.None as Int16), ('Z' as Int16)], Float32(-93.0), ((Int32(-11)&127..=Int32(-58)&127:95|1), ((-46.0), (((), (Int16(-45)&127..Int16(-42)&127:25|1), (Int8(114)&127..=Int8(64)&127:((-30)|1)), (UInt64(242), Float32(-11.0), (Int32(85)&127..Int32(98)&127:(37|1)), (Int16(-113)&127..=Int16(-107)&127:((-51)|1)), ([false, false, false, true, false, true, false, false, true, false], (UInt8(167)&127..UInt8(236)&127:((-112)|1)), (UInt8(135)&127..=UInt8(104)&127:(15|1)), ['z', 'S', '0', 'b', 'a', 'k', 'O', 'h', 'n', '1'], UInt32(139), (-81)))) is (UInt32, String, Float64, Range<Int8>) -> Range<UInt32>), (-33.0), UInt16(32), UInt32(46), Int16(93)), [false, true, false, false, true, false, true, true, true, true], (), (UInt32(94)&127..=UInt32(69)&127:(-67)|1), ((-72)&127..=(-102)&127:124|1), UInt32(192)), (UInt16(Int8(2))&127..UInt16(Int16(-25))&127:(20|1)));
        try { // block id: 7554
            ();
            var var7576 : UInt32 = UInt32(58);
            match (var7558) {
                case _ => 
                    if (var4889) { Option<Bool>.None } else { var5229 } ;
                    var319 &= var319
                
                case _ => 
                    var7576 = var7576;
                    var7398 %= ((Int8(68)) | 1)
                
                case caseVar7584 : Range<Int64> => 
                    if (true) { var7589 } else { (var516, (var557&127..UInt8(18)&127:((-93)|1)), (UInt8(171)&127..=var557&127:(1|1)), ['E', 'E', 'u', 'P', 'P', 'j', 'b', 'p', 'y', '4'], var39, var2099) } ;
                    var7398 <<= ((Int8(-85)) & 7);
                    var557 -= UInt8(199)
                
                case _ => 
                    var7637 *= var2134;
                    namedParam67;
                    var var7644 : Int16 = Int16(Int8(108));
                    var73 &= var7644
                
                case _ => 
                    var6733
                
            };
            if (var6717) { // block id: 7652
                Option<(Range<Int16>, (Range<Int32>, (Float64, Bool, Float64, UInt16, UInt32, Int16), Array<Bool>, Unit, Range<UInt32>, Range<Int64>, UInt32), UInt16, Bool)>.Some(var6878);
                [[Float32(120.0), Float32(-98.0), Float32(-104.0), Float32(3.0), Float32(-117.0), Float32(-21.0), Float32(-13.0), Float32(93.0), Float32(95.0), Float32(-43.0)], [Float32(116.0), Float32(52.0), Float32(-105.0), Float32(68.0), Float32(-57.0), Float32(-104.0), Float32(-85.0), Float32(115.0), Float32(-92.0), Float32(-116.0)], [Float32(-105.0), Float32(-67.0), Float32(-66.0), Float32(-30.0), Float32(-128.0), Float32(-12.0), Float32(56.0), Float32(-109.0), Float32(-19.0), Float32(119.0)], [Float32(126.0), Float32(-77.0), Float32(-38.0), Float32(-23.0), Float32(99.0), Float32(116.0), Float32(-63.0), Float32(-21.0), Float32(-1.0), Float32(81.0)], [Float32(101.0), Float32(80.0), Float32(2.0), Float32(-118.0), Float32(-20.0), Float32(32.0), Float32(26.0), Float32(67.0), Float32(-107.0), Float32(-103.0)], [Float32(-103.0), Float32(32.0), Float32(107.0), Float32(4.0), Float32(-106.0), Float32(99.0), Float32(-75.0), Float32(124.0), Float32(-90.0), Float32(52.0)], [Float32(-48.0), Float32(-118.0), Float32(-42.0), Float32(-73.0), Float32(93.0), Float32(50.0), Float32(-39.0), Float32(57.0), Float32(62.0), Float32(-70.0)], [Float32(-42.0), Float32(-97.0), Float32(88.0), Float32(60.0), Float32(68.0), Float32(-98.0), Float32(-79.0), Float32(-81.0), Float32(-21.0), Float32(-97.0)], [Float32(-77.0), Float32(62.0), Float32(16.0), Float32(-79.0), Float32(-121.0), Float32(72.0), Float32(-109.0), Float32(-41.0), Float32(-110.0), Float32(41.0)], [Float32(-102.0), Float32(-31.0), Float32(-23.0), Float32(34.0), Float32(51.0), Float32(-62.0), Float32(92.0), Float32(-61.0), Float32(-12.0), Float32(32.0)]];
                var2112
            } else if (false) { // block id: 7658
                var886 *= 125.0;
                (UInt64(213)&127..var2134&127:((-67)|1));
                var2112
            } else { // block id: 7667
                var7669;
                var7672;
                var2112
            }
        } finally { // block id: 7894
            UInt16(205) - UInt16(60);
            var7900--;
            Int32(var42)
        }
    }
;
    var loopTimeVar7916 : Int64 = 0;
    do {
        loopTimeVar7916++;
        var var7906 : Unit = ();
        func66(namedParam67 : var7906, optionalParam68 : "*re=:fnrra{");
        var var7912 : Unit = ();
        (Option<Unit>.Some(var7912) ?? ())
    } while ((var61) && loopTimeVar7916 < 100 ) ;
    var loopTimeVar7949 : Int64 = 0;
    while ((match ((Int16(-88) as Array<Option<Int16>>)) {
        case caseVar7923 => 
            var6733;
            var7928 >= 1
        
        case caseVar7933 => 
            var557 %= ((UInt8(125)) | 1);
            ();
            var6132
        
        case _ => 
            var6132
        
    }) && loopTimeVar7949 < 100 ) {
        loopTimeVar7949++;
        (UInt16(188)&127..=UInt16(187)&127:(var2099|1))
    };
    var6733
}

func func27(param28 : Bool) : Float64 { // block id: 29
    ((-87.0), false, (-102.0), UInt16(245), var39, var42)[4] == (var50.var53);
    match (match (var1864) {
            case caseVar7957 : (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64) => 
                var408;
                (Int8(112)&127..=Int8(-9)&127:(var2099|1));
                var2112
            
            case caseVar7967 => 
                ();
                var2112--;
                var7973
            
            case _ => 
                Int32(-68)
            
        }) {
        case 14 | -103 | -110 | 1 => 
            ();
            var408;
            var50
        
        case caseVar7990 : (UInt32, Array<Float64>, Int8) => 
            var6733;
            Class46()
        
        case caseVar7996 : Array<Option<Int16>> => 
            var6733;
            var6733;
            Class46(var2134, UInt32(156))
        
        case caseVar8005 => 
            Int8(-14);
            ();
            if (true) { var50 } else { Class46() } 
        
        case _ => 
            ();
            var8017;
            if (var2107) { var50 } else { var50 } 
        
    }|>func56;
    Float64(var886)
}

main(): Int64 {
    try {
        let var13 : Bool = (Option<Bool>.None is UInt32);
        let var8027 : (Bool) -> Float64 = func27;
        func func18(param19 : Option<Bool>, namedParam20 ! : UInt64, optionalParam21 ! : Rune = 'e', optionalParam23 ! : String = "HRp_CDhGOn") : Rune { // block id: 25
            try { // block id: 8030
                ();
                var61
            } finally { // block id: 8033
                var61
            }|>var8027;
            if (var2107) { // block id: 8037
                if (false) { '0' } else { var5920 } 
            } else { // block id: 8042
                var6504;
                optionalParam21
            }
        }
;
        var var8047 : UInt64 = UInt64(UInt8(UInt8(129)));
        let var8053 : ?(Range<Int16>, (Range<Int32>, (Float64, Bool, Float64, UInt16, UInt32, Int16), Array<Bool>, Unit, Range<UInt32>, Range<Int64>, UInt32), UInt16, Bool) = (UInt8(167) as (Range<Int16>, (Range<Int32>, (Float64, Bool, Float64, UInt16, UInt32, Int16), Array<Bool>, Unit, Range<UInt32>, Range<Int64>, UInt32), UInt16, Bool));
        let var8077 : Unit = ();
        if ((Option<Bool>.Some(var13) ?? var13)) { func18(var8017, namedParam20 : var8047) } else { match (var8053) {
            case _ => 
                if (var2107) { (UInt8(12)&127..=UInt8(74)&127:(-16)|1) } else { var4171 } ;
                UInt16(148) ^ UInt16(37);
                if (true) { 'y' } else { 'G' } 
            
            case _ => 
                var7398 -= var685;
                let var8084 : Int64 = 31;
                (var8077, Int16(-108), (var7900&127..var5926&127:(var8084|1)), var6102);
                var5920
            
        } } ;
        Int64(UInt8(Int8(4)))
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var39*var39), 64)
        crccheck.updateBuffer(UInt64(var42*var42), 64)
        crccheck.updateBuffer(UInt64(var73*var73), 64)
        crccheck.updateBuffer(UInt64(var319*var319), 64)
        crccheck.updateBuffer(UInt64(var557*var557), 64)
        crccheck.updateBuffer(UInt64(var685*var685), 64)
        crccheck.updateBuffer(UInt64(var2099*var2099), 64)
        crccheck.updateBuffer(UInt64(var2112*var2112), 64)
        crccheck.updateBuffer(UInt64(var2134*var2134), 64)
        crccheck.updateBuffer(UInt64(var5926*var5926), 64)
        crccheck.updateBuffer(UInt64(var7398*var7398), 64)
        crccheck.updateBuffer(UInt64(var7900*var7900), 64)
        crccheck.updateBuffer(UInt64(var7928*var7928), 64)
        crccheck.updateBuffer(UInt64(var7973*var7973), 64)
        crccheck.updateBuffer(UInt64(var8047*var8047), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Class46 {
    static func func110(namedParam111 ! : Range<UInt16>, optionalParam112 ! : UInt16 = UInt16(UInt16(78)), optionalParam115 ! : Unit = ()) : Unit { // block id: 117

    }
;
    public static func func2141(namedParam2142 ! : (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)) : ((Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64))), Range<Int8>) { // block id: 2143
        var2145
    }
;
    public static func func539(param540 : Option<Int16>, optionalParam541 ! : Array<Rune> = ['e', '1', 'H', 'O', 'y', 'N', 'y', '1', 'y', 'j']) : Int8 { // block id: 543
        let var5844 : Range<UInt32> = (UInt32(UInt32(156))&127..=UInt32(227)&127:((-8)|1));
        var var5870 : UInt8 = UInt8(UInt8(Int8(-84)));
        var var6308 : (Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64))) = ((), (Int16(68)&127..Int16(68)&127:(-128)|1), (Int8(116)&127..Int8(36)&127:(-122)|1), (UInt64(214), Float32(-84.0), (Int32(UInt32(23))&127..Int32(UInt8(19))&127:(Int64(UInt64(105))|1)), (Int16(Int16(-9))&127..=Int16(-103)&127:(Int64(Int8(20))|1)), ([true, true, false, true, false, false, true, false, true, false], (UInt8(91)&127..=UInt8(205)&127:(15|1)), (UInt8(124)&127..=UInt8(245)&127:(122|1)), ['s', 'R', 'q', 't', 'Z', 'O', 'd', 'V', 'M', 'f'], UInt32(23), (-35))));
        func546(-UInt8(80), var5844, namedParam549 : if (true) { // block id: 5852
            ();
            ([false, var4889, false, false, var2107, false, var61, var4889, true, var2240], var4171, (UInt8(176)&127..var5870&127:((-101)|1)), [var2895, var2895, 'x', '1', 'Y', 'S', 'Y', 'S', '6', var2895], UInt32(213), (-79))
        } else if (var61) { // block id: 5889
            Option<Array<Rune>>.None;
            if (true) { ([var4889, true, var2107, var2107, true, var4889, true, var5903, var61, var2107], var694, (var557&127..var557&127:((-45)|1)), [var2895, var2895, '0', var2895, 'a', 'l', var5920, 'M', var2895, 'h'], var5926, (-81)) } else { var2503 } 
        } else { // block id: 5930
            if (false) { var2503 } else { var2503 } 
        }, namedParam550 : (Option<Int8>.Some(var4571) ?? Int8(-11))).func5944(namedParam5945 : Float32(var4543), optionalParam5946 : if (false) { (UInt32(30)&127..UInt32(211)&127:(var583|1)) } else { (UInt32(210)&127..var5926&127:((-87)|1)) } , namedParam5954 : match (var6293) {
            case _ : Option<Int8> => 
                var var6300 : UInt32 = UInt32(103);
                var6300 ^= UInt32(205);
                if (true) { var1248 } else { Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.Some(var6308) } 
            
            case defaultValue => 
                ();
                if (true) { Option<Float64>.None } else { Option<Float64>.None } ;
                Option<(Unit, Range<Int16>, Range<Int8>, (UInt64, Float32, Range<Int32>, Range<Int16>, (Array<Bool>, Range<UInt8>, Range<UInt8>, Array<Rune>, UInt32, Int64)))>.None
            
            case defaultValue => 
                var6102;
                var2112 ^= Int32(-108);
                if (true) { var2039 } else { var1248 } 
            
            case _ => 
                var152;
                if (false) { (Int8(-54)&127..Int8(-123)&127:(var583|1)) } else { (Int8(-30)&127..=Int8(-1)&127:(-118)|1) } ;
                if (var5903) { var2039 } else { var1248 } 
            
        }, optionalParam5955 : optionalParam541)
    }

}

extend Enum2542 {

}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_expected_left_brace
// ASSERT: scan parse_expected_case
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_unexpected_declaration_in_scope
// ASSERT: scan parse_expected_character
// ASSERT: scan parse_expected_catch_or_finally_in_try
// ASSERT: scan parse_expected_expr_or_decl_in


