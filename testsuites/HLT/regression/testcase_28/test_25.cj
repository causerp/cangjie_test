/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output


var var54 : Bool = false
public let var131 : Aggregate127 = Aggregate127()
public var var174 : Bool = false
public var var200 : Unit = ()
var var213 : UInt32 = UInt32(177)
var var298 : ?Bool = Option<Bool>.None
let var339 : Range<UInt16> = (UInt16(21)&127..UInt16(UInt16(UInt8(140)))&127:((-4)|1))
public let var383 : Int64 = 10
var var414 : Unit = ()
public var var446 : Int8 = Int8(UInt8(Int8(-20)))
public var var484 : Float32 = Float32(Float32(Float32(Float32(108.0))))
let var577 : UInt16 = UInt16(Int8(-12))
let var589 : ?Unit = (((), Int8(-97), Int32(UInt8(145))) as Unit)
public let var644 : Rune = 'a'
public var var649 : Rune = 's'
public let var668 : Array<Rune> = Array<Rune>(10){ i => 'n' }
public let var724 : Rune = 's'
var var745 : Rune = 'e'
let var1064 : Range<Int64> = (Int64(Int64(Int16(UInt8(222))))&127..=Int64(UInt16(UInt16(UInt8(62))))&127:(Int64(UInt64(7))|1))
var var1094 : Range<Int8> = (Int8(-2)&127..=Int8(-95)&127:(-112)|1)
public var var1153 : Int8 = Int8(-102)
let var1188 : Range<Int64> = (99&127..=47&127:53|1)
var var1218 : Range<UInt8> = (UInt8(242)&127..UInt8(102)&127:1|1)
var var1225 : ?Bool = (UInt32(Int16(Int8(UInt8(247)))) as Bool)
let var1236 : ?Bool = Option<Bool>.None
public let var1302 : Enum1293 = Enum1293.defaultValue
let var1314 : Bool = (Option<Range<Int8>>.None is Unit)
public let var1368 : Class493 = Class493()
let var1491 : ?Int32 = Option<Int32>.None
public var var1658 : Unit = ()
var var1705 : Int32 = Int32(UInt32(Int8(Int8(UInt8(86)))))
let var1713 : Float64 = 42.0
public let var1716 : Rune = '3'
let var1723 : Bool = (96 is (UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>))
var var1756 : UInt16 = UInt16(79)
let var1780 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
public var var1826 : UInt8 = UInt8(147)
var var1919 : Unit = ()
let var1926 : Int8 = Int8(53)
public let var1932 : (Float32, Array<Unit>, Bool, Range<UInt16>, Range<Int8>) = (Float32(Float32(62.0)), [(), (), (), (), (), (), (), (), (), ()], ((UInt32(189)&127..UInt32(UInt16(245))&127:(Int64(UInt64(19))|1)) is (UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>)), (UInt16(216)&127..UInt16(74)&127:83|1), (Int8(Int8(-51))&127..Int8(-54)&127:(Int64(Int64(Int16(80)))|1)))
var var1969 : String = """
F2wxP
`uPh,
"""
let var2292 : Bool = ((UInt64(77)&127..UInt64(80)&127:(-38)|1) is Option<(Unit, Int8, Int32)>)
public let var2343 : Int32 = Int32(UInt16(7))
public let var2373 : (UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>) = (UInt64(220), UInt8(UInt8(UInt8(UInt8(143)))), Int32(11), 'n', ((UInt32(Int32(-28))&127..=UInt32(UInt16(65))&127:((-3)|1)), (-119), [false, true, false, false, false, false, false, true, false, false], ('K' as Bool)), [(), (), (), (), (), (), (), (), (), ()])
public var var2400 : Int32 = Int32(80)
let var2566 : Array<Array<Rune>> = [['X', 'C', 'Z', 'a', '0', 'G', 'S', 'r', 'z', '8'], ['Y', 'w', 'f', 'q', 'X', 'E', 'P', 'u', 'S', 'U'], ['J', 't', 'i', 'C', 'F', 'W', 'F', 'W', 'j', 'v'], ['v', 'V', 'S', 'v', 'u', '7', 'y', 'e', 'e', 'e'], ['1', 'F', 'q', '8', '4', 'G', 'D', 'F', 'L', 'U'], ['X', 'S', 'w', 'H', 'Z', 'w', 'F', '3', '0', 'n'], ['t', 'P', '7', 'e', '8', 'd', 'V', '9', 'i', 'F'], ['8', 'H', 'Y', 'S', 'n', 'Y', 'z', '5', '1', 'y'], ['A', 'V', 'E', 'z', 'd', '4', 'n', '6', 'Y', 'z'], ['w', 'D', 'y', 'N', 'P', 'm', 'E', 'n', '4', 'q']]
public let var2699 : (Unit, Int8, Int32) = ((), Int8(53), Int32(UInt8(UInt8(UInt8(118)))))
var var2957 : UInt64 = UInt64(Int8(80))
let var3017 : Rune = '0'
public var var3025 : Rune = 'X'
let var3189 : ?Enum1293 = ((() as Array<Int8>) as Enum1293)
public var var3281 : Int64 = Int64(Int32(-98))
public var var3286 : ?Unit = (((Int32(UInt8(18))&127..Int32(-119)&127:(Int64(UInt64(82))|1)) as Unit) as Unit)
public let var3407 : Array<Bool> = [((Int64(Int16(-35))&127..=(-92)&127:(Int64(Int32(78))|1)) is Option<Aggregate127>), false, (UInt16(Int8(-72)) is (((Float32, Array<Unit>, Bool, Range<UInt16>, Range<Int8>), Array<Rune>, UInt32, (Float32, Array<Unit>, Bool, Range<UInt16>, Range<Int8>), Array<Unit>, Float32, Range<Int32>), Float64, UInt8, (Range<UInt8>, Int32, Range<UInt16>, Int32, Bool, Float64, Rune, Float64, Float64), Option<Enum1293>, ((UInt64, Int16, String, UInt64, Float64), Array<Array<Rune>>), UInt8)), true, ((([false, true, false, true, true, false, false, true, false, false] as Array<Int8>) as String) is (Array<Array<Rune>>) -> Unit), (((Float32(43.0), [(), (), (), (), (), (), (), (), (), ()], false, (UInt16(123)&127..=UInt16(121)&127:((-86)|1)), (Int8(-72)&127..=Int8(49)&127:(-112)|1)), ['5', 'l', '1', '0', 'b', 'b', '5', '3', 'A', 'F'], UInt32(UInt16(161)), (Float32(-88.0), [(), (), (), (), (), (), (), (), (), ()], false, (UInt16(195)&127..=UInt16(85)&127:((-58)|1)), (Int8(49)&127..=Int8(100)&127:(22|1))), [(), (), (), (), (), (), (), (), (), ()], Float32(Float32(-118.0)), (Int32(47)&127..=Int32(-89)&127:42|1)) is Range<UInt64>), (Option<Unit>.None is (Array<Array<Rune>>) -> Unit), false, ((UInt64(24), UInt8(204), Int32(Int16(15)), 'N', ((UInt32(200)&127..=UInt32(156)&127:(85|1)), 28, [false, true, false, false, true, false, false, false, true, true], Option<Bool>.None), [(), (), (), (), (), (), (), (), (), ()]) is (Range<UInt8>, Int32, Range<UInt16>, Int32, Bool, Float64, Rune, Float64, Float64)), (Class493() is Range<UInt64>)]
var var3531 : ?(UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>) = (Option<Range<Int8>>.None as (UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>))
public var var3595 : Bool = ((Option<Range<Int8>>.None, 39, (Int16(-15)&127..=Int16(62)&127:(-42)|1), Int8(UInt8(Int8(-7))), [Int8(100), Int8(16), Int8(-49), Int8(40), Int8(8), Int8(-88), Int8(-12), Int8(-114), Int8(-20), Int8(-36)]) is Array<Array<Rune>>)
var var3690 : Range<Int16> = (Int16(UInt8(UInt8(Int8(-61))))&127..=Int16(UInt8(182))&127:(54|1))
var var3794 : ((Float32, Array<Unit>, Bool, Range<UInt16>, Range<Int8>), Array<Rune>, UInt32, (Float32, Array<Unit>, Bool, Range<UInt16>, Range<Int8>), Array<Unit>, Float32, Range<Int32>) = ((Float32(102.0), [(), (), (), (), (), (), (), (), (), ()], (Option<(Unit, Int8, Int32)>.None is Bool), (UInt16(102)&127..=UInt16(89)&127:14|1), (Int8(-73)&127..=Int8(119)&127:(56|1))), ['z', 'j', 'n', 'N', 'H', 'W', 'Y', 'v', 'u', 'E'], UInt32(UInt16(130)), (Float32(-44.0), [(), (), (), (), (), (), (), (), (), ()], (Class493() is ((Float32, Array<Unit>, Bool, Range<UInt16>, Range<Int8>), Array<Rune>, UInt32, (Float32, Array<Unit>, Bool, Range<UInt16>, Range<Int8>), Array<Unit>, Float32, Range<Int32>)), (UInt16(143)&127..UInt16(0)&127:14|1), (Int8(UInt8(85))&127..=Int8(UInt8(77))&127:((-30)|1))), [(), (), (), (), (), (), (), (), (), ()], Float32(Float32(-92.0)), (Int32(-52)&127..=Int32(Int8(UInt8(25)))&127:((-46)|1)))
var var3867 : (UInt64, Int16, String, UInt64, Float64) = (UInt64(Int16(14)), Int16(-56), "J4.!9V^6${var1969}^Y", UInt64(242), (-4.0))
public var var3939 : ?Int32 = ([Option<Int32>.None, Option<Int32>.None, ((Int32(13)&127..Int32(-1)&127:(-110)|1) as Int32), (['q', '1', '5', 'U', 'n', 'F', 'T', 'e', 'Q', 'b'] as Int32), Option<Int32>.None, Option<Int32>.None, (Option<Unit>.None as Int32), Option<Int32>.None, (((UInt64(47), Int16(65), ###"S1l${var1969}a{${var1969}VA.[${var1969}/2"###, UInt64(216), (-122.0)) as Unit) as Int32), ([(Int16(6)&127..=Int16(-119)&127:60|1), (Int16(-55)&127..Int16(-50)&127:((-111)|1)), (Int16(-15)&127..Int16(43)&127:((-120)|1)), (Int16(-20)&127..Int16(72)&127:(50|1)), (Int16(-123)&127..Int16(-117)&127:103|1), (Int16(-126)&127..=Int16(40)&127:(-105)|1), (Int16(-109)&127..Int16(-98)&127:(-86)|1), (Int16(-120)&127..Int16(-69)&127:(32|1)), (Int16(-78)&127..Int16(57)&127:(73|1)), (Int16(-67)&127..Int16(33)&127:(-53)|1)] as Int32)] as Int32)
public var var4004 : ?Int32 = Option<Int32>.None
var var4590 : Rune = '5'
var var4657 : Unit = ()
var var4712 : Range<UInt64> = (UInt64(179)&127..=UInt64(UInt16(Int16(UInt16(4))))&127:(Int64(Int8(Int8(-9)))|1))
var var4844 : (((Float32, Array<Unit>, Bool, Range<UInt16>, Range<Int8>), Array<Rune>, UInt32, (Float32, Array<Unit>, Bool, Range<UInt16>, Range<Int8>), Array<Unit>, Float32, Range<Int32>), Float64, UInt8, (Range<UInt8>, Int32, Range<UInt16>, Int32, Bool, Float64, Rune, Float64, Float64), Option<Enum1293>, ((UInt64, Int16, String, UInt64, Float64), Array<Array<Rune>>), UInt8) = (((Float32(Float32(30.0)), [(), (), (), (), (), (), (), (), (), ()], false, (UInt16(32)&127..=UInt16(96)&127:((-47)|1)), (Int8(89)&127..=Int8(58)&127:(48|1))), ['x', 'X', 'X', 'X', 'm', 'V', 'W', 'K', 'h', 'G'], UInt32(252), (Float32(Float32(121.0)), [(), (), (), (), (), (), (), (), (), ()], true, (UInt16(225)&127..=UInt16(139)&127:(36|1)), (Int8(-86)&127..Int8(-45)&127:62|1)), [(), (), (), (), (), (), (), (), (), ()], Float32(Float32(-96.0)), (Int32(-124)&127..Int32(-39)&127:79|1)), Float64(Float64(Float64(1.0))), UInt8(242), ((UInt8(75)&127..=UInt8(Int8(-16))&127:(Int64(UInt16(177))|1)), Int32(-112), (UInt16(139)&127..=UInt16(92)&127:77|1), Int32(UInt8(Int8(-61))), (([(), (), (), (), (), (), (), (), (), ()] as Aggregate127) is (Range<Int64>, Bool, Range<UInt8>, Float32)), 98.0, '4', (-15.0), Float64(Float32(92.0))), Option<Enum1293>.None, ((UInt64(Int8(-126)), Int16(Int8(64)), "V${var1969}3DY@1}}.!${var1969}", UInt64(94), 105.0), [['j', 'N', 'n', 'p', 'U', 'o', 'G', 'a', 'm', 'M'], ['S', 'b', 'Q', 'n', 'Q', 'a', 'n', 'J', 'C', 'C'], ['z', '1', 'S', 'L', 'u', 'C', 'P', 'M', 'A', 'Z'], ['f', '7', 'y', 'Z', 'j', 'Y', 'J', 'a', 'Q', 'g'], ['A', 'k', '3', 'a', 'J', 'Q', 'Z', 'w', 'm', 'V'], ['n', 'n', '4', 'e', 'U', 'u', 'R', 'E', 'E', 'T'], ['M', 'J', 'r', '8', 'w', 'B', 'k', '2', 'A', 'k'], ['I', '0', 'D', 'U', 'a', 'g', 'v', 'J', 'B', 'Q'], ['f', 'h', '1', 'y', 't', 'M', 'b', '0', '3', 'p'], ['p', 'w', 'v', 'X', 'z', 't', '0', '6', 'Z', '1']]), UInt8(UInt8(75)))
let var5127 : ?Int32 = ([Option<Int32>.None, Option<Int32>.None, (Int8(-125) as Int32), (UInt32(137) as Int32), ((UInt8(92) as (UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>)) as Int32), Option<Int32>.None, (Option<(UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>)>.None as Int32), (UInt8(Int8(96)) as Int32), (Int16(Int8(18)) as Int32), (((), Int8(-104), Int32(-35)) as Int32)] as Int32)
var var5173 : Unit = ()
public var var5185 : Range<Int32> = (Int32(75)&127..=Int32(-34)&127:72|1)
public var var5219 : Int64 = Int64(UInt16(182))
var var5245 : ?(Unit, Int8, Int32) = (Enum1293.defaultValue as (Unit, Int8, Int32))
public var var5260 : Int8 = Int8(49)
let var5434 : Int16 = Int16(Int8(53))
public let var5703 : Enum1293 = Enum1293.defaultValue
public let var5734 : ((UInt64, Int16, String, UInt64, Float64), Array<Array<Rune>>) = ((UInt64(Int8(92)), Int16(-116), " \"DGo${var1969}._]pU", UInt64(243), (-64.0)), [['E', 'K', 'L', 'l', 'N', 'p', '2', 'h', 'G', 't'], ['l', 'o', '3', '1', 'H', 'R', 'Q', '0', 'b', 'G'], ['v', 'g', 'g', 'C', 'H', '6', '6', 'P', 'U', 'Y'], ['s', 'w', 'm', 'G', 'U', 'd', 'v', 's', 'O', 'Y'], ['j', 'V', 'B', 'f', '8', 'U', 'H', 'd', 'x', '0'], ['u', 'b', 'N', 'K', 'c', 'D', 'g', 'R', 'Z', 'a'], ['k', 'x', 't', '8', 'k', 'm', 'C', 'u', 'U', 'U'], ['H', 'G', 'I', 'y', 'A', 'S', 'V', 'Z', 'P', 'B'], ['W', 'I', 'p', 'D', 'S', '3', '8', 'F', 'f', 'm'], ['O', '7', 'N', 'g', '0', 'k', 'M', 'I', 'C', 'a']])
public let var6220 : (Range<UInt32>, Int64, Array<Bool>, Option<Bool>) = ((UInt32(208)&127..UInt32(128)&127:16|1), Int64(UInt16(UInt16(UInt8(79)))), [(((UInt64(78)&127..UInt64(103)&127:(-21)|1) as (UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>)) is Option<Option<Enum1293>>), false, true, true, false, false, (((Int32(-83)&127..Int32(49)&127:31|1) as Int8) is (Range<Int64>, Bool, Range<UInt8>, Float32)), true, false, true], ((Float32(Float32(-27.0)), [(), (), (), (), (), (), (), (), (), ()], (Option<Option<Option<Range<Int8>>>>.None is Option<Unit>), (UInt16(72)&127..=UInt16(74)&127:((-1)|1)), (Int8(21)&127..=Int8(-111)&127:((-28)|1))) as Bool))
var var6279 : Unit = ()
public var var6506 : Float64 = Float64((-56.0))
public let var6617 : Bool = ([Option<Int32>.None, Option<Int32>.None, ("Gu${var1969},I${var1969}u80v ~" as Int32), (((Option<Range<Int8>>.None, 88, (Int16(-120)&127..=Int16(-76)&127:((-97)|1)), Int8(121), [Int8(-121), Int8(-46), Int8(62), Int8(-86), Int8(-61), Int8(-39), Int8(24), Int8(-79), Int8(-64), Int8(-48)]) as Option<Enum1293>) as Int32), Option<Int32>.None, (() as Int32), ([['5', 'f', 'Q', 'e', 'Q', 'k', 'y', 'v', 'H', 'O'], ['P', 'H', 'p', 't', 'J', 'R', 'd', '1', 'I', 'G'], ['D', 'a', 'F', 'K', 'D', 'R', 'G', 'y', 'Z', 'y'], ['f', 'z', 'h', 'I', '3', '6', 'M', 'x', 'O', 'V'], ['S', 'E', 'd', 'z', 'Q', 'R', 'E', 'v', '3', 'O'], ['3', 'V', 'Q', 'u', 'x', 'K', 'S', 'G', 'S', 'U'], ['w', 't', '4', 'w', 'F', 'l', 'k', 'i', '5', 'R'], ['X', 'a', 'N', 'S', 'j', 'W', '9', 'Q', 'q', 'm'], ['F', 'w', 'r', 'u', '2', 'z', 'y', 'l', '2', 'Y'], ['C', 'i', 'B', 'j', 'u', 'y', 'D', 'Y', '5', 'D']] as Int32), (Option<Enum1293>.None as Int32), ([(), (), (), (), (), (), (), (), (), ()] as Int32), Option<Int32>.None] is (Int64) -> Unit)
var var6797 : UInt32 = UInt32(Int8(UInt8(144)))
public let var6966 : Range<UInt32> = (UInt32(64)&127..=UInt32(149)&127:(-3)|1)
let var7009 : UInt64 = UInt64(UInt64(70))
public let var7094 : Array<Rune> = ['5', 'I', 'C', 'b', 's', 'A', 'x', '4', 'N', 'Y']
let var7153 : Float64 = 48.0
let var7207 : Option<(UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>)> = Option<(UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>)>.None
var var7248 : Option<(Unit, Int8, Int32)> = Option<(Unit, Int8, Int32)>.None
public var var7282 : ???Range<Int8> = Option<Option<Option<Range<Int8>>>>.None
public let var7439 : Bool = true
var var7448 : Int16 = Int16(30)
public let var7455 : ??Bool = (Option<Unit>.None as Option<Bool>)
var var7459 : ??Enum1293 = ((Int32(10) as Array<Bool>) as Option<Enum1293>)
var var7505 : Array<Option<Int32>> = [Option<Int32>.None, ((((73&127..(-6)&127:((-118)|1)), false, (UInt8(34)&127..UInt8(9)&127:(-97)|1), Float32(38.0)) as Option<Array<Int8>>) as Int32), Option<Int32>.None, Option<Int32>.None, (((), Int8(-95), Int32(-91)) as Int32), (Option<Enum1293>.None as Int32), Option<Int32>.None, ((Float32(Float32(-123.0)), [(), (), (), (), (), (), (), (), (), ()], (((UInt64(237), Int16(91), """
WK${var1969}C${var1969}]${var1969}@${var1969}
UNg.]
""", UInt64(49), (-46.0)), [['y', 'l', 'd', 'b', 'H', 'M', 'W', 'J', 'M', 's'], ['Y', 'Y', 'm', 'm', 'O', 'q', 'e', '3', 'L', 'U'], ['a', 'N', 'B', '2', 'c', '4', 'I', 'G', 'q', 's'], ['1', 'J', 'e', 'r', 'i', 'p', 'P', 'c', '2', '6'], ['M', 't', 'b', '8', 'x', 'q', 'f', 'm', 'm', '2'], ['t', '3', 'j', '6', 'q', 'f', 'G', 'V', 'm', 'a'], ['y', 'n', 'm', 'V', 'R', 'k', 'o', 'N', 'p', 'j'], ['k', 'C', 'c', 'h', 'W', 'a', 'q', 'P', 'U', 'I'], ['e', 'g', 'S', 'N', 'B', '6', 'r', 'm', 'v', 'f'], ['c', 'N', '1', 'H', 'v', 'x', 'K', '2', 'k', '5']]) is Range<UInt16>), (UInt16(188)&127..UInt16(61)&127:86|1), (Int8(44)&127..Int8(29)&127:((-98)|1))) as Int32), Option<Int32>.None, (true as Int32)]
public let var7614 : Rune = 'p'
var var7741 : Bool = true
public var var7763 : ?Range<UInt32> = Option<Range<UInt32>>.None
let var7901 : String = """
m0${var1969}s|4${var1969}
,V${var1969}X`S${var1969}
"""
public let var7921 : Int32 = Int32(-72)
public let var7971 : ?UInt64 = Option<UInt64>.None
public var var7997 : Int16 = Int16(Int16(61))
public let var8015 : Int8 = Int8(123)
public var var8098 : (Option<Range<Int8>>, Int64, Range<Int16>, Int8, Array<Int8>) = (Option<Range<Int8>>.None, Int64(Int64(UInt64(Int16(26)))), (Int16(85)&127..=Int16(-67)&127:(-3)|1), Int8(54), [Int8(-12), Int8(110), Int8(83), Int8(-94), Int8(115), Int8(122), Int8(4), Int8(52), Int8(-58), Int8(-98)])
public let var8145 : Unit = ()
var var8220 : Int32 = Int32(Int8(Int8(UInt8(Int8(-108)))))
var var8261 : Int64 = Int64(UInt8(109))
let var8284 : Array<(Unit, Int8, Int32)> = [((), Int8(Int8(UInt8(140))), Int32(UInt32(48))), ((), Int8(125), Int32(UInt32(UInt16(57)))), ((), Int8(76), Int32(UInt8(206))), ((), Int8(Int8(2)), Int32(UInt8(119))), ((), Int8(Int8(-25)), Int32(-91)), ((), Int8(UInt8(UInt8(99))), Int32(Int16(Int8(84)))), ((), Int8(UInt8(103)), Int32(UInt8(48))), ((), Int8(UInt8(UInt8(177))), Int32(53)), ((), Int8(-44), Int32(Int16(59))), ((), Int8(-89), Int32(-96))]
var var8367 : ??Int32 = ([Int8(UInt8(UInt8(141))), Int8(Int8(Int8(-33))), Int8(Int8(Int8(-117))), Int8(Int8(Int8(110))), Int8(UInt8(22)), Int8(UInt8(Int8(-89))), Int8(Int8(-53)), Int8(31), Int8(UInt8(Int8(24))), Int8(116)] as Option<Int32>)
let var8398 : ?Range<Int8> = (['D', 'O', 'k', 'w', 'd', 'X', 'X', 'g', 'H', 'q'] as Range<Int8>)
var var8505 : Array<Bool> = [(Option<Enum1293>.None is Range<UInt8>), false, true, ([(Int16(64)&127..Int16(-78)&127:(-84)|1), (Int16(-68)&127..=Int16(-32)&127:(100|1)), (Int16(-123)&127..Int16(-123)&127:((-101)|1)), (Int16(83)&127..Int16(94)&127:51|1), (Int16(31)&127..=Int16(-21)&127:(-102)|1), (Int16(-21)&127..Int16(26)&127:85|1), (Int16(66)&127..=Int16(12)&127:((-58)|1)), (Int16(-51)&127..Int16(122)&127:(-26)|1), (Int16(23)&127..Int16(63)&127:71|1), (Int16(112)&127..=Int16(112)&127:(36|1))] is Int16), true, true, (Option<Option<Int32>>.None is ((Range<UInt32>, Int64, Array<Bool>, Option<Bool>)) -> Unit), true, (Int16(-58) is (Array<Array<Rune>>, UInt64, (Range<Int64>, Bool, Range<UInt8>, Float32), Float32) -> Unit), true]
let var8555 : ?Bool = Option<Bool>.None
public let var8671 : Option<Option<Unit>> = Option<Option<Unit>>.None
public let var8809 : Int8 = Int8(-127)
public var var8840 : ?Array<Bool> = (([(), (), (), (), (), (), (), (), (), ()] as Unit) as Array<Bool>)

public struct Aggregate127 {
    public init() { // block id: 129

    }
;
    var var134 : Unit = ();
    let var353 : Bool = true;
    public let var2133 : ((Float32, Array<Unit>, Bool, Range<UInt16>, Range<Int8>), Array<Rune>, UInt32, (Float32, Array<Unit>, Bool, Range<UInt16>, Range<Int8>), Array<Unit>, Float32, Range<Int32>) = ((Float32(-55.0), [(), (), (), (), (), (), (), (), (), ()], false, (UInt16(216)&127..=UInt16(1)&127:(32|1)), (Int8(-55)&127..=Int8(-78)&127:(-104)|1)), ['H', 'v', 'R', 'H', 'V', 'H', 'h', 'e', 'c', 'f'], UInt32(183), (Float32(28.0), [(), (), (), (), (), (), (), (), (), ()], false, (UInt16(37)&127..UInt16(43)&127:(-45)|1), (Int8(-35)&127..Int8(-121)&127:95|1)), [(), (), (), (), (), (), (), (), (), ()], Float32(-126.0), (Int32(3)&127..=Int32(-98)&127:120|1));
    public var var2668 : Int32 = Int32(91);
    public static let var3165 : Range<UInt32> = (UInt32(116)&127..UInt32(2)&127:((-77)|1));
    static let var3213 : ?Aggregate127 = Option<Aggregate127>.None;
    public static var var3226 : ?Array<Int8> = Option<Array<Int8>>.None;
    public init(namedParam3049 ! : Option<(UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>)>, namedParam3050 ! : UInt8) { // block id: 3051
        let var3156 : Class493 = Class493();
        var loopTimeVar3159 : Int64 = 0;
        while ((var1723) && loopTimeVar3159 < 100 ) {
            loopTimeVar3159++;
            var var3139 : ?Range<Int8> = Option<Range<Int8>>.None;
            var loopTimeVar3142 : Int64 = 0;
            do {
                loopTimeVar3142++;
                let var3065 : Array<Bool> = Array<Bool>(10){ i => (((Option<Bool>.None as String) is (Array<Array<Rune>>) -> Unit) is Option<(Unit, Int8, Int32)>) };
                ((UInt32(48)&127..=UInt32(104)&127:((-81)|1)), (-124), var3065, var298);
                var3139
            } while ((var2292) && loopTimeVar3142 < 100 ) ;
            try { // block id: 3144
                ();
                if (true) { var1368 } else { Class493() } 
            } catch (e: Exception) { // block id: 3150
                Class493()
            } finally { // block id: 3152
                Option<(UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>)>.None;
                var1919;
                var3156
            }
        };
        match (if (try { // block id: 3163
                var3165;
                Int32(109) != var2400
            } catch (e: Exception) { // block id: 3173
                Option<Enum1293>.Some(Enum1293.defaultValue);
                true
            }) { (Option<Aggregate127>.Some(var131)|>func3178<UInt64, Range<Int16>>) } else { (var3213|>func3178<UInt64, Range<Int16>>) } ) {
            case _ => 
                (var484, var1780, var54, (UInt16(123)&127..=UInt16(186)&127:(-48)|1), var1094);
                var200
            
        };
        match (var3226) {
            case caseVar3230 => 
                var383;
                ();
                var1826 ^= namedParam3050
            
            case _ : Unit => 
                var484;
                var1919
            
            case _ => 
                namedParam3049;
                var1658
            
        }
    }
;
    public init(optionalParam6128 ! : Option<Unit> = ((((Float32(78.0), [(), (), (), (), (), (), (), (), (), ()], false, (UInt16(245)&127..UInt16(154)&127:31|1), (Int8(18)&127..Int8(-59)&127:(-87)|1)), ['Q', 'o', 'T', 'q', 's', '4', '5', 'N', 'v', 'U'], UInt32(249), (Float32(-69.0), [(), (), (), (), (), (), (), (), (), ()], false, (UInt16(46)&127..=UInt16(17)&127:(61|1)), (Int8(39)&127..=Int8(76)&127:((-66)|1))), [(), (), (), (), (), (), (), (), (), ()], Float32(-91.0), (Int32(-128)&127..=Int32(75)&127:((-63)|1))), 111.0, UInt8(UInt8(187)), ((UInt8(10)&127..=UInt8(22)&127:39|1), Int32(UInt16(147)), (UInt16(245)&127..=UInt16(108)&127:((-98)|1)), Int32(29), (Option<Int8>.None is (Option<Range<Int8>>) -> (UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>)), Float64((-14.0)), 'o', Float64(Float32(-62.0)), 122.0), Option<Enum1293>.Some(Enum1293.defaultValue), ((UInt64(250), Int16(-82), """
P[U.u
G,t^`
""", UInt64(243), 60.0), [['E', 'b', 'p', 'O', 'n', 'V', 'J', 'e', '4', '4'], ['E', 'g', 'c', 'u', '4', 'O', 'J', 'r', 'j', 'S'], ['w', '9', 'A', 'z', '3', 'k', '5', '7', 's', 't'], ['8', '6', 'q', 'A', 'L', 'z', 'B', 'o', 'o', '7'], ['F', 'A', 'Z', 'N', '9', '6', 'T', 'X', 'O', 's'], ['u', 'P', 'L', 'n', 'f', 'j', '6', '2', 's', 'g'], ['S', 'n', 'n', 'L', '4', '8', '2', '5', '1', 'L'], ['7', 'c', '7', 'T', 'p', 'q', '1', 'n', 'D', 'F'], ['7', 'A', 'C', 'o', 'a', 'M', 'R', '3', 'v', 'v'], ['C', 'E', 'O', 'G', 'L', 'h', '9', '0', 'j', 'T']]), UInt8(UInt8(48))) as Unit), optionalParam6210 ! : (Unit, Option<Bool>) -> Int16 = func2272, namedParam6215 ! : (UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>)) { // block id: 6216
        var5173;
        match (var6220) {
            case _ : Array<Unit> => 
                var4657
            
            case _ : (Range<UInt8>, Int32, Range<UInt16>, Int32, Bool, Float64, Rune, Float64, Float64) => 
                'C';
                var3595 ||= var3595;
                var6279
            
            case caseVar6283 => 
                var1658;
                Enum1293.defaultValue;
                var5260 /= ((Int8(-62)) | 1)
            
            case caseVar6292 => 
                ()
            
            case _ => 
                var1919
            
        };
        let var6340 : Int64 = Int64(UInt32(UInt16(60)));
        var loopTimeVar6346 : Range<UInt64> = (UInt64(Int8(-52))&127..UInt64(142)&127:(120|1));
        for (i in loopTimeVar6346 where match (var5703) {
            case defaultValue => 
                var5260
            
            case _ => 
                var446 = Int8(-3);
                var1368;
                Int8(-95) ** (Int8(-89) & 3)
            
        } <= Int8(var446)) {
            try (resource = Class493()) { // block id: 6319
                var414;
                ();
                var4657
            } catch (_) { // block id: 6323
                if (var3595) { ['j', 's', 'M', '4', 'Z', 'u', 'c', 'K', 'L', 'u'] } else { ['P', 'B', 'j', '5', 's', 'O', 'Q', 'W', '3', 'd'] } ;
                ();
                var5219 &= 56
            } finally { // block id: 6332
                if (var3595) { (Int16(-24)&127..=Int16(-121)&127:(-95)|1) } else { (Int16(101)&127..=var5434&127:(var6340|1)) } ;
                var414
            };
            Class493()
        }
    }
;
    static var var6722 : Range<Int64> = (84&127..=(-100)&127:65|1);
    static var var6759 : ??Array<Int8> = Option<Option<Array<Int8>>>.None;
    private static var var6766 : ??Array<Int8> = Option<Option<Array<Int8>>>.None;
    public init(param6697 : Range<UInt32>, optionalParam6698 ! : Option<Option<Bool>> = Option<Option<Bool>>.Some(Option<Bool>.Some(('S' is Option<Unit>))), namedParam6703 ! : ((UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>)) -> Option<Int32>, namedParam6706 ! : (Range<UInt32>, Int64, Array<Bool>, Option<Bool>)) { // block id: 6707
        var var6729 : Float32 = Float32(-6.0);
        ((try { // block id: 6719
            (var6722, var3595, (UInt8(229)&127..=UInt8(98)&127:(-25)|1), var484);
            var6729 = Float32(89.0);
            var var6735 : ???Array<Int8> = (Int32(Int32(UInt8(Int8(108)))) as Option<Option<Array<Int8>>>);
            if (true) { var6735 } else { var6735 } 
        } catch (_) { // block id: 6742
            [Option<Int32>.None, var4004, Option<Int32>.None, var5127, var5127, Option<Int32>.None, var1491, var3939, var4004, var5127];
            Option<Option<Option<Array<Int8>>>>.None
        } ?? try { // block id: 6756
            var1218;
            var6759
        } finally { // block id: 6761
            if (var3595) { var6759 } else { var6766 } 
        }) ?? try { // block id: 6769
            Option<Array<Int8>>.None
        } catch (e: Exception) { // block id: 6771
            if (true) { Option<Array<Int8>>.None } else { var3226 } 
        });
        var1705 *= var2400
    }
;
    public func func1387(param1388 : Range<Int64>) : Bool { // block id: 1389
        ();
        (func1394().var7777) && false
    }

}


public open class Class493 <: Resource {
    public init() { // block id: 495

    }
;
    static var var498 : Unit = ();
    let var1371 : Int8 = Int8(38);
    public static let var1377 : Int8 = Int8(-32);
    var var1843 : Unit = ();
    public static var var5786 : Option<Option<(Unit, Int8, Int32)>> = Option<Option<(Unit, Int8, Int32)>>.None;
    public static var var5887 : Float64 = (-60.0);
    static func func2188(param2189 : Array<Array<Rune>>, optionalParam2190 ! : UInt64 = UInt64(30), optionalParam2192 ! : (Range<Int64>, Bool, Range<UInt8>, Float32) = ((62&127..=(-125)&127:((-102)|1)), false, (UInt8(Int8(UInt8(76)))&127..UInt8(66)&127:(Int64(UInt8(163))|1)), Float32(66.0)), optionalParam2207 ! : Float32 = Float32(Float32(Float32(Float32(Float32(37.0)))))) : Unit { // block id: 2213
        var var5757 : (UInt16) -> Enum1293 = func2217;
        let var5850 : ??Range<Int8> = Option<Option<Range<Int8>>>.Some(((((-53)&127..=77&127:(-93)|1), true, (UInt8(7)&127..=UInt8(69)&127:52|1), Float32(16.0)) as Range<Int8>));
        let var5859 : ?Range<Int8> = Option<Range<Int8>>.None;
        if (((var1756|>var5757) is Range<UInt64>)) { (match (()) {
            case () | () | () => 
                if (true) { (var2400&127..var2400&127:(var383|1)) } else { (Int32(2)&127..Int32(-70)&127:(62|1)) } ;
                var1705 &= Int32(-25);
                if (false) { var5786 } else { Option<Option<(Unit, Int8, Int32)>>.None } 
            
            case _ : Option<Range<Int8>> => 
                var4657;
                Option<Option<(Unit, Int8, Int32)>>.Some(Option<(Unit, Int8, Int32)>.None)
            
            case _ => 
                var5786
            
            case () | () => 
                if (var2292) { var5786 } else { var5786 } 
            
            case _ => 
                ();
                Option<Option<(Unit, Int8, Int32)>>.Some(Option<(Unit, Int8, Int32)>.None)
            
        } ?? try { // block id: 5812
            ();
            Int8(-2) ^ Int8(47);
            let var5818 : ?(Unit, Int8, Int32) = Option<(Unit, Int8, Int32)>.Some(((), Int8(27), Int32(Int8(44))));
            var5818
        } catch (_) { // block id: 5825
            var var5827 : ?(Unit, Int8, Int32) = ((((-55)&127..(-3)&127:70|1), (UInt16(Int16(106)) is Option<(UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>)>), (UInt8(60)&127..UInt8(153)&127:(-59)|1), Float32(Float32(106.0))) as (Unit, Int8, Int32));
            var5827
        } finally { // block id: 5837
            Option<(Unit, Int8, Int32)>.Some(((), Int8(-49), Int32(104)))
        }) } else { match ((var5850 ?? var5859)) {
            case _ => 
                Option<Int8>.None;
                var5219 *= 123;
                Option<(Unit, Int8, Int32)>.Some((var498, var1926, var2343))
            
        } } ;
        Option<Int8>.Some(var1153);
        try (resource = Class493()) { // block id: 5875
            let var5891 : Unit = ();
            try { // block id: 5877
                Option<Unit>.Some(var5173);
                var5173;
                (var2957, Int16(73), var1969, UInt64(7), var5887)
            } finally { // block id: 5889
                var5891;
                if (false) { var724 } else { var4590 } ;
                var3867
            };
            var498
        } catch (_) { // block id: 5899
            (((54&127..=(-15)&127:(-16)|1), true, var1218, optionalParam2207) as Range<Int8>);
            Option<Int32>.None;
            var var5909 : (Range<UInt8>, Int32, Range<UInt16>, Int32, Bool, Float64, Rune, Float64, Float64) = ((UInt8(202)&127..=UInt8(101)&127:((-96)|1)), Int32(97), (UInt16(18)&127..=UInt16(UInt16(Int8(-110)))&127:(Int64(Int32(UInt32(83)))|1)), Int32(UInt8(Int8(Int8(107)))), ((Option<Aggregate127>.None as Int8) is (Float32, Array<Unit>, Bool, Range<UInt16>, Range<Int8>)), 46.0, 'y', (-114.0), Float64(Float64(Float32(Float32(88.0)))));
            var var5941 : Array<(Unit, Int8, Int32)> = Array<(Unit, Int8, Int32)>(10){ i => ((), Int8(-11), Int32(Int8(-90))) };
            match (var5909) {
                case _ => 
                    var5941;
                    var1658
                
            }
        }
    }
;
    public let var7777 : Bool = true
    public func isClosed(): Bool { return false }
    public func close(): Unit {}
}


public func func502(param503 : Range<Int64>) : Array<Bool> { // block id: 504
    var var530 : Int32 = Int32(12);
    match ((try { // block id: 512
            Option<Aggregate127>.None
        } finally { // block id: 514
            var var516 : ?Aggregate127 = (UInt8(Int8(UInt8(Int8(-86)))) as Aggregate127);
            var516
        } ?? try { // block id: 523
            (UInt16(145)&127..UInt16(211)&127:((-95)|1));
            var530 += Int32(38);
            let var536 : Aggregate127 = Aggregate127();
            if (var174) { var536 } else { var131 } 
        } catch (_) { // block id: 539
            Aggregate127()
        })) {
        case caseVar543 : Int64 => 
            var414;
            var var549 : ?Unit = ('N' as Unit);
            if (false) { var549 } else { var549 } 
        
        case _ : Range<Int64> => 
            let var557 : ?Unit = Option<Unit>.Some(());
            var557
        
        case caseVar562 => 
            var414;
            let var566 : ?Unit = Option<Unit>.Some(());
            var566
        
        case _ => 
            ();
            if (false) { (UInt16(145)&127..=var577&127:(var383|1)) } else { (UInt16(69)&127..=UInt16(98)&127:((-115)|1)) } ;
            if (var174) { Option<Unit>.None } else { var589 } 
        
    };
    let var606 : Rune = 'l';
    let var622 : Rune = 'o';
    let var657 : Rune = 'd';
    var var945 : Array<Array<Rune>> = [['d', 'e', 'G', 'j', 'h', 'N', 'm', '5', 'Y', 'T'], ['u', 'x', '5', 'S', '4', 'z', 't', 'v', '0', 'W'], ['q', 'H', 'I', 'U', '0', 'L', 'z', '2', '7', 'a'], ['4', 'w', 'V', 't', 'c', 'U', 'n', 'l', 'A', 'b'], ['9', 'S', 'R', '3', 'c', 'H', '8', 'w', 'h', 'g'], ['3', 'D', 'w', 'G', 'A', 'L', '2', 'E', 'C', 'm'], ['U', 'd', 'D', 'q', 'y', '4', 'F', 'K', '1', '9'], ['b', 'I', 'i', 'E', 'y', 'A', 'X', 'A', 'u', 'q'], ['p', 'V', 'z', 'A', 'z', 'P', 'e', 'C', 'd', 'P'], ['7', 'e', '2', 'B', '6', 'y', 'G', '5', 's', 'a']];
    var var1032 : Rune = 'm';
    match (match (Option<Aggregate127>.None) {
            case _ : UInt16 => 
                [var606, 'A', var606, var606, 'I', '8', 'E', 'S', 'o', 'T'];
                let var635 : Array<Rune> = ['i', 'c', 'd', '4', 'm', 'T', 'P', 'v', 'B', 'R'];
                var var758 : Rune = '8';
                var var768 : Rune = 'W';
                if (var54) { [[var622, var606, 'b', var622, var622, var622, var606, 'H', 'w', 'V'], ['j', 'b', 'O', 'l', 'n', 'Y', 'e', 'f', 'X', 'W'], var635, ['5', '5', var622, '2', 'b', var644, var644, 'n', var649, var649], [var606, var606, var644, var657, 'y', var606, var606, 'U', var606, '4'], ['0', 'R', 'k', 'N', 'E', 'h', 'C', 'T', '8', 'G'], ['6', 'A', 'x', 'h', 'M', 'd', 'a', 'H', '8', 'p'], var668, var668, ['C', 'g', var657, 'o', var657, var622, 'f', var606, var606, var657]] } else { [['r', var622, var606, var606, '9', var606, 'L', var606, var644, 'i'], [var644, 'C', var649, 'j', var622, 'f', '9', 'L', var657, 'X'], ['S', 'b', 'l', 'V', 'C', 'Z', 'F', 'k', 'n', 'T'], ['u', 'T', 'M', '1', '9', 't', '9', 'a', 'H', '2'], ['I', 'C', 'K', 'L', 'm', 'N', 'N', 'z', 'l', 'T'], [var644, 'U', 'S', var644, var724, 'w', 'E', var606, var644, 'T'], ['z', var622, var649, var622, 'K', 'c', 'M', var724, 'R', var644], var635, [var745, 'y', '6', 'h', 'Y', 'x', '2', 'D', 'W', 'K'], [var758, '0', var644, var649, 'E', 'A', var745, 'e', var768, 'K']] } 
            
            case caseVar773 : Range<Int32> => 
                var414;
                var414;
                let var778 : Array<Array<Rune>> = [['6', 'w', '0', 'W', 'm', 'I', 'L', 't', 'm', 'T'], ['7', '3', '3', 'c', 'l', 'u', 'D', 'I', 'x', '2'], ['o', 'X', 'f', 'G', 'y', '1', 'r', '9', 'a', 'A'], ['d', 'K', '8', 'q', 'n', '8', 'l', 'k', 'N', 'C'], ['o', 'H', 'R', 'a', 'X', 'y', '6', 'G', 'a', 'X'], ['z', 'y', 'j', '5', 'm', 'r', 'f', 'Y', 'q', 'I'], ['b', 'M', 'G', '6', 'P', 'N', 'm', 'E', 'G', 'y'], ['A', 'Y', 'X', 'L', 'A', '1', 'B', '8', 'N', 'g'], ['j', '7', '7', 'r', 'F', 'j', 'X', 'k', '0', '8'], ['J', 'D', 'I', 'l', '4', '0', 'b', 'X', 'p', 'Y']];
                var778
            
            case caseVar782 : Range<Int16> => 
                let var785 : UInt8 = UInt8(UInt8(Int8(Int8(117))));
                var785;
                var var791 : Array<Array<Rune>> = Array<Array<Rune>>(10){ i => ['D', 'I', 'D', 'd', 'O', 'A', 'p', 'F', 'K', 'j'] };
                var791
            
            case _ => 
                var var869 : Array<Array<Rune>> = Array<Array<Rune>>(10){ i => ['A', 'C', 'O', 'y', 'a', 'Z', 'L', 'd', '9', 'B'] };
                if (true) { var869 } else { var869 } 
            
            case _ => 
                var945
            
        }[7]) {
        case caseVar1010 : Int8 => 
            ();
            ((-5)&127..=var383&127:(35|1))
        
        case _ => 
            var var1042 : Array<Rune> = Array<Rune>(10){ i => 'T' };
            if (var54) { [['6', 'e', var724, 'T', 'U', 'F', 'n', var644, var1032, var745], ['l', 'd', 'o', 'r', 'e', 's', 'E', 'L', '5', 'u'], ['n', 'O', 'F', 'C', 'f', 'J', 'x', 'z', 'o', 'N'], var668, ['6', '0', '2', '5', 'd', 'M', 'k', 'm', 'V', 'N'], var668, ['1', 'V', 'v', 'm', 'o', 'u', 'h', 'V', '0', 'u'], var1042, var1042, var1042] } else { var945 } ;
            ();
            param503
        
    };
    var var1060 : Array<Bool> = [false, false, true, false, false, false, true, true, true, false];
    var1060
}



public func func2272(param462 : Unit, param463 : Option<Bool>) : Int16 { // block id: 464
    try (resource = Class493()) { // block id: 466
        var loopTimeVar491 : Int64 = 0;
        while ((var174) && loopTimeVar491 < 100 ) {
            loopTimeVar491++;
            let var477 : Range<UInt8> = (UInt8(Int8(94))&127..UInt8(162)&127:(67|1));
            (((-93)&127..31&127:(var383|1)), true, var477, var484);
            Int32(-47)
        };
        Class493.var498
    } catch (e: Exception) { // block id: 500
        var1064|>func502;
        var var1082 : ?Range<Int8> = ((Int32(Int16(Int8(-61)))&127..=Int32(Int8(UInt8(224)))&127:(Int64(UInt8(188))|1)) as Range<Int8>);
        (var1082 ?? var1094);
        var loopTimeVar1100 : Int64 = 0;
        do {
            loopTimeVar1100++;

        } while ((true) && loopTimeVar1100 < 100 ) 
    };
    let var1104 : Unit = ();
    try (resource = Class493()) { // block id: 1102
        var1104
    } finally { // block id: 1106
        [var1104, var414, var414, (), (), param462, param462, var200, (), var1104][0];
        let var1122 : Array<Unit> = Array<Unit>(10){ i => () };
        var1122[2]
    };
    let var1145 : ?Range<Int8> = Option<Range<Int8>>.Some((Int8(-86)&127..Int8(28)&127:120|1));
    let var1178 : Int16 = Int16(24);
    match (((var1145, 116, (Int16(126)&127..=Int16(-127)&127:76|1), Int8(25), [var1153, Int8(-63), var1153, Int8(-99), Int8(-48), Int8(-43), var1153, var1153, var1153, var1153])[0] ?? (Int8(32)&127..Int8(10)&127:(-99)|1))) {
        case caseVar1168 => 
            var var1171 : Int16 = Int16(-4);
            var1171
        
        case _ => 
            "/CMJZ&T6F.";
            var1178
        
        case _ => 
            Aggregate127();
            ();
            Int16(-14)
        
    }
}


public enum Enum1293 {
    defaultValue |
    enumValue5725(Rune, ((UInt64, Int16, String, UInt64, Float64), Array<Array<Rune>>), (UInt16) -> Range<Int8>, Option<Aggregate127>)
}


public func func1567(param1568 : UInt16) : Range<Int8> { // block id: 1569
    let var1582 : Bool = true;
    let var1590 : (Range<UInt32>, Int64, Array<Bool>, Option<Bool>) = ((UInt32(227)&127..=UInt32(191)&127:(Int64(UInt64(UInt8(233)))|1)), (-77), [false, true, true, true, false, true, false, false, true, false], ([false, true, false, true, (108.0 is Range<UInt32>), (((UInt32(115)&127..=UInt32(144)&127:76|1), 39, [true, false, false, true, false, false, true, true, false, true], Option<Bool>.Some(true)) is Range<Int8>), (Option<Array<Int8>>.None is UInt64), false, true, false] as Bool));
    var var1646 : Int8 = Int8(UInt8(104));
    var var1675 : Bool = (Int32(Int8(Int8(UInt8(176)))) is Int32);
    var loopTimeVar1689 : Int64 = 0;
    do {
        loopTimeVar1689++;
        try (resource = Class493()) { // block id: 1637
            var1491;
            Int32(-1) * Int32(91);
            var200
        } finally { // block id: 1643
            var1646 >>= ((var1153) & 7);
            var200
        };
        let var1665 : (Float32, Array<Unit>, Bool, Range<UInt16>, Range<Int8>) = (Float32(Float32(113.0)), [(), (), (), (), (), (), (), (), (), ()], false, (UInt16(67)&127..=UInt16(18)&127:(-99)|1), (Int8(-78)&127..=Int8(65)&127:116|1));
        match (var668) {
            case _ : Aggregate127 => 
                Int16(-90);
                var1658
            
            case caseVar1662 : (Option<Range<Int8>>, Int64, Range<Int16>, Int8, Array<Int8>) => 
                var1665;
                var1675 ||= true
            
            case _ => 
                (Int16(-6)&127..=Int16(7)&127:108|1);
                var446 *= var1153
            
        }
    } while ((match {
        case try { // block id: 1573
        var1314
    } finally { // block id: 1575
        [true, true, false, false, true, false, false, false, false, false];
        var54
    } => 
        var414;
        if (var1582) { ((UInt32(32)&127..=UInt32(254)&127:87|1), 19, [false, true, true, true, true, false, false, true, false, false], var1225) } else { var1590 } ;
        true || var174
        case _ => 
        var1582
    }) && loopTimeVar1689 < 100 ) ;
    var var1697 : UInt8 = UInt8(Int8(-5));
    var var1763 : ?Range<Int8> = Option<Range<Int8>>.None;
    if (if (((var1697&127..=UInt8(68)&127:(var383|1)), Int32(-99), (UInt16(199)&127..UInt16(71)&127:5|1), var1705, var1314, var1713, var1716, (-92.0), (-56.0))[4]) { // block id: 1721
        var1723
    } else { // block id: 1726
        var var1729 : Bool = ([((UInt8(68)&127..=UInt8(178)&127:((-12)|1)) is (Range<UInt32>, Int64, Array<Bool>, Option<Bool>)), ((Int8(39)&127..=Int8(21)&127:(101|1)) is Int32), (Int64((-71)) is Int8), false, true, false, true, true, false, true] is Int8);
        if (var1729) { Class493() } else { Class493() } ;
        var1756 &= var1756;
        var1582
    }) { var1094 } else { match (var1763) {
        case caseVar1767 => 
            var200;
            (Int8(8)&127..=Int8(121)&127:(var383|1))
        
        case _ => 
            var1646 |= Int8(-37);
            var1780;
            if (false) { var1094 } else { (Int8(101)&127..=Int8(20)&127:(-89)|1) } 
        
    } } 
}

func func1564() : Range<Int8> { // block id: 1565
    let var1790 : ?Range<Int8> = ((UInt32(141)&127..UInt32(125)&127:((-111)|1)) as Range<Int8>);
    var var1815 : UInt16 = UInt16(UInt8(15));
    match (match (var1790) {
            case _ => 
                ();
                var484
            
            case _ => 
                Float32(59.0)
            
            case _ => 
                Float32(-36.0)
            
        }) {
        case -64.0 | -117.0 | -66.0 => 
            let var1812 : Unit = ();
            var1812;
            var1815
        
        case _ : (Range<UInt32>, Int64, Array<Bool>, Option<Bool>) => 
            var383 + var383;
            var1826 |= UInt8(79);
            var1815
        
        case _ => 
            var1658;
            var1815
        
    }|>func1567
}





func func2354(param2355 : Option<Range<Int8>>) : (UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>) { // block id: 2356
    [(), (), (), (), (), (), (), (), (), ()][6];
    let var2396 : UInt64 = UInt64(189);
    var var2404 : (Range<UInt32>, Int64, Array<Bool>, Option<Bool>) = ((UInt32(67)&127..UInt32(199)&127:(-41)|1), (-91), [(Option<Aggregate127>.None is String), ([Int8(-44), Int8(110), Int8(-59), Int8(-6), Int8(117), Int8(90), Int8(-50), Int8(-82), Int8(75), Int8(91)] is Bool), true, ((Option<(Unit, Int8, Int32)>.Some(((), Int8(80), Int32(27))) is (Range<UInt8>, Int32, Range<UInt16>, Int32, Bool, Float64, Rune, Float64, Float64)) is Int8), true, (Int32(-71) is Option<Unit>), false, (Option<String>.None is Float64), false, ([(), (), (), (), (), (), (), (), (), ()] is Enum1293)], Option<Bool>.Some((Option<Unit>.Some(()) is Unit)));
    let var2509 : ?(UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>) = (() as (UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>));
    var var2536 : Range<UInt32> = (UInt32(120)&127..=UInt32(114)&127:50|1);
    (Option<(UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>)>.Some(try { // block id: 2367
        ();
        ();
        if (true) { var2373 } else { (var2396, UInt8(74), var2400, var745, var2404, [var414, (), (), var1658, (), var414, (), (), var1658, var1919]) } 
    } finally { // block id: 2465
        var745 = var649;
        (UInt64(223), var1826, Int32(-128), '0', var2404, [(), (), (), (), (), (), (), (), (), ()])
    }) ?? (if (var1314) { Option<(UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>)>.Some((UInt64(115), var1826, var1705, var649, ((var213&127..=var213&127:(var383|1)), (-10), [var2292, var1314, false, var54, false, false, true, false, var1314, true], var298), [(), (), (), (), (), (), (), (), (), ()])) } else { var2509 }  ?? match (Aggregate127()) {
        case _ => 
            var213 <<= ((UInt32(241)) & 7);
            var2373
        
        case _ : Array<Range<Int16>> => 
            var2373
        
        case _ : ((UInt64, Int16, String, UInt64, Float64), Array<Array<Rune>>) => 
            ();
            (var2396, UInt8(209), var2400, 'L', (var2536, var383, [var2292, true, true, false, false, false, true, false, true, var1723], var1225), [(), (), (), (), (), (), (), (), (), ()])
        
        case _ => 
            var2373
        
        case _ => 
            ();
            ();
            var2373
        
    }))
}

func func2562(param2563 : Array<Int8>) : (UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>) { // block id: 2564
    var2566;
    var2373
}

func func2660(param2661 : Range<UInt64>) : (UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>) { // block id: 2662
    let var2712 : Rune = '9';
    var var2734 : Rune = '2';
    let var2745 : Rune = 'E';
    let var2770 : Range<Int64> = (56&127..=(-112)&127:(-34)|1);
    let var2778 : ?Aggregate127 = Option<Aggregate127>.None;
    if ((var131.var2668) >= (var2400 << ((var1705) & 7))) { // block id: 2673
        (var1188, false, (UInt8(231)&127..var1826&127:(var383|1)), var484)
    } else { // block id: 2682
        if (false) { // block id: 2685
            ((), var1153, Int32(15))
        } else if (var1723) { // block id: 2691
            ((), Int8(94), var2343)
        } else { // block id: 2696
            Float32(64.0);
            var2699
        };
        match ([['n', var2712, 'F', 'x', 'd', '3', var649, 's', var745, var644], ['x', 'G', '2', 'd', 'h', 'r', 'X', 'l', '9', 'y'], var668, ['r', var724, 'E', var644, var649, 'U', var644, var644, var2734, var1716], [var2712, 'M', var1716, var644, 'q', var2734, var2745, 'm', 'G', var649], ['f', 'I', 'i', 'g', 'y', 'V', 'D', '4', '3', '0'], ['5', 'K', '6', 'O', 'V', 'C', 'z', 'k', 'r', 'y'], [var1716, 'N', var745, var649, 'n', var724, var2745, 'i', 'S', 'Q'], ['h', 'n', '9', 'a', 'm', 'd', 'x', 'r', 'H', '4'], ['J', 'd', 'c', 'm', 'y', 'I', 'E', 'O', 'E', 'd']]) {
            case _ => 
                (var2770, var2292, var1218, var484)
            
            case _ => 
                var2778;
                (((-58)&127..=12&127:55|1), var1314, (UInt8(210)&127..=UInt8(113)&127:(var383|1)), Float32(-103.0))
            
        }
    };
    Int64(UInt32(44));
    var var2791 : (UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>) = (UInt64(Int8(-40)), UInt8(138), Int32(Int8(74)), 'f', ((UInt32(101)&127..UInt32(6)&127:98|1), Int64(Int8(30)), [true, true, false, true, false, true, false, true, false, true], Option<Bool>.Some(("qQ,hc6}E.q" is Option<Unit>))), [(), (), (), (), (), (), (), (), (), ()]);
    var2791
}

func func2879(param2880 : Option<(UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>)>) : Unit { // block id: 2881
    let var2888 : (Option<Range<Int8>>, Int64, Range<Int16>, Int8, Array<Int8>) = (Option<Range<Int8>>.Some((Int8(UInt8(119))&127..Int8(-117)&127:(Int64((-44))|1))), Int64(UInt16(Int8(Int8(59)))), (Int16(UInt16(UInt8(2)))&127..=Int16(97)&127:(Int64(Int16(UInt16(88)))|1)), Int8(UInt8(178)), [Int8(87), Int8(-112), Int8(-128), Int8(-9), Int8(84), Int8(-33), Int8(67), Int8(-35), Int8(114), Int8(21)]);
    let var2935 : Array<Int8> = [Int8(-83), Int8(-17), Int8(-23), Int8(-111), Int8(-51), Int8(1), Int8(-96), Int8(-108), Int8(-40), Int8(-114)];
    var loopTimeVar2979 : Int64 = 0;
    while ((match (if (true) { // block id: 2886
            var2888
        } else { // block id: 2912
            var414;
            var1919;
            var var2920 : ?Range<Int8> = (((90&127..=(-39)&127:31|1), true, (UInt8(131)&127..=UInt8(118)&127:95|1), Float32(Float32(101.0))) as Range<Int8>);
            if (var174) { var2888 } else { (var2920, (-19), (Int16(45)&127..=Int16(57)&127:(var383|1)), var446, var2935) } 
        }) {
        case _ => 
            var2292
        
        case (caseVar2943 : Array<(Unit, Int8, Int32)>,caseVar2944 : Enum1293,_ : Range<UInt32>,caseVar2945,caseVar2946) => 
            Int32(107);
            ();
            false
        
        case caseVar2953 => 
            var2957 & UInt64(121);
            var1969;
            var1314 || var1314
        
        case (caseVar2967,_ : Class493,caseVar2968,_,_ : Array<Array<Rune>>) => 
            var1094;
            true && var1723
        
        case _ => 
            true
        
    }) && loopTimeVar2979 < 100 ) {
        loopTimeVar2979++;

    };
    ()
}

func func2982(param2983 : Array<Array<Rune>>) : Unit { // block id: 2984
    var1658
}


func func3178<T0, T1>(param3179 : Option<Aggregate127>) : Enum1293 { // block id: 3180
    ((Option<Option<Enum1293>>.None ?? var3189) ?? try { // block id: 3194
        var1919;
        var2957;
        if (false) { Enum1293.defaultValue } else { Enum1293.defaultValue } 
    } catch (e: Exception) { // block id: 3201
        var200;
        if (false) { Enum1293.defaultValue } else { Enum1293.defaultValue } 
    })
}




public func func3255(param3256 : (UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>)) : Option<Int32> { // block id: 3257
    let var3266 : (Range<Int64>, Bool, Range<UInt8>, Float32) = ((110&127..=Int64(Int16(Int16(28)))&127:(Int64(Int32(-40))|1)), false, (UInt8(205)&127..=UInt8(92)&127:109|1), Float32(Float32(85.0)));
    var var3304 : Array<Array<Rune>> = [['F', 'k', 'O', 'o', 'T', 'r', 'P', 'A', 'H', 'a'], ['c', 'S', '4', '2', 'q', 'Y', 'M', 'b', 'e', 'W'], ['R', 'B', 'd', 'X', 'x', 'A', 'H', 'G', 'E', 'L'], ['D', 'd', 'U', 'R', 'I', 'y', 'U', 'K', 'w', 'O'], ['Y', '2', 'r', 'M', 'F', 'E', '2', '0', 'S', 'v'], ['O', 'y', 'q', 'E', 'K', 'o', 'Q', '7', 'c', 'j'], ['2', 'z', 'U', 'I', 's', 'b', 'z', 'y', 'b', 'F'], ['y', 'S', 'd', 'c', 'P', '8', 's', 'O', 'O', 'N'], ['q', 'R', 'j', 'x', 'Q', '8', '4', 'B', 'B', 'X'], ['p', 'V', 'U', 'T', 'Q', 'M', 'n', '2', 't', 'R']];
    var loopTimeVar3386 : Range<UInt64> = (UInt64(141)&127..=UInt64(UInt16(48))&127:(Int64(Int16(Int16(-126)))|1));
    (try { // block id: 3264
        var3266;
        var3281 |= var3281;
        var3286
    } catch (_) { // block id: 3295
        var414;
        var3286
    } ?? for (i in loopTimeVar3386 where var1713 > (-122.0)) {
        var3304
    });
    let var3402 : ?Array<Bool> = (Option<Aggregate127>.Some(Aggregate127()) as Array<Bool>);
    if ((var3402 ?? var3407)[7]) { // block id: 3527
        if (false) { var3531 } else { Option<(UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>)>.Some(param3256) } ;
        Float32(Float32(81.0));
        func2982([['y', 'M', 'l', 'A', 'M', 'u', 'V', 'G', 'q', 'd'], [var3025, 'Z', var644, '2', var724, 'H', var3025, var3017, var1716, 'D'], var668, ['7', 'I', 'A', 'P', 'F', 'l', 'u', 'X', 'D', 'w'], ['P', 'T', '4', 'J', 'd', 'J', 'j', '3', 'u', '2'], ['t', var745, 'm', var649, 'h', 'n', var3017, var3017, 'C', var1716], ['a', 'D', '5', 'K', '6', 'J', '1', 'G', 'L', 'E'], [var3017, 'U', var3025, var745, 'F', '9', var3017, var724, var745, 'F'], var668, ['g', 'G', 'e', 'v', 'f', 'P', 'T', 'D', 'b', 'l']])
    } else if (if (var213 != UInt32(231)) { // block id: 3584
        if (true) { Option<Array<Bool>>.None } else { Option<Array<Bool>>.None } ;
        var174
    } else if (match {
        case var54 => 
        var446;
        var3595
        case _ => 
        var1314
    }) { // block id: 3607
        ();
        var1723
    } else { // block id: 3610
        ();
        true
    }) { // block id: 3613
        match (Int16(38)) {
            case -71 => 
                let var3620 : Range<UInt64> = (UInt64(124)&127..UInt64(224)&127:59|1);
                var3620;
                var var3623 : ?Array<Int8> = (Class493() as Array<Int8>);
                var3623
            
            case 106 => 
                Option<Array<Int8>>.None
            
            case _ => 
                let var3636 : ?Array<Int8> = Option<Array<Int8>>.None;
                if (false) { Option<Array<Int8>>.None } else { var3636 } 
            
        };
        let var3646 : (Range<UInt32>, Int64, Array<Bool>, Option<Bool>) = ((UInt32(165)&127..UInt32(113)&127:(Int64(UInt32(Int32(-36)))|1)), Int64(Int8(Int8(114))), [(UInt32(98) is Option<Array<Int8>>), ((((-9)&127..=(-66)&127:14|1), true, (UInt8(79)&127..=UInt8(97)&127:((-99)|1)), Float32(126.0)) is String), ("""
Q1,3?
~-( R
""" is Option<Unit>), (Option<(Unit, Int8, Int32)>.None is (Range<Int64>, Bool, Range<UInt8>, Float32)), (Option<Array<Int8>>.Some([Int8(-126), Int8(113), Int8(102), Int8(117), Int8(82), Int8(-85), Int8(-22), Int8(70), Int8(-100), Int8(18)]) is Array<Bool>), ('k' is (Option<Aggregate127>) -> Enum1293), true, false, false, true], Option<Bool>.None);
        func2879(Option<(UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>)>.Some((var2957, var1826, var2343, var745, var3646, var1780)))
    };
    let var3706 : (((Float32, Array<Unit>, Bool, Range<UInt16>, Range<Int8>), Array<Rune>, UInt32, (Float32, Array<Unit>, Bool, Range<UInt16>, Range<Int8>), Array<Unit>, Float32, Range<Int32>), Float64, UInt8, (Range<UInt8>, Int32, Range<UInt16>, Int32, Bool, Float64, Rune, Float64, Float64), Option<Enum1293>, ((UInt64, Int16, String, UInt64, Float64), Array<Array<Rune>>), UInt8) = (((Float32(Float32(105.0)), [(), (), (), (), (), (), (), (), (), ()], (() is Option<Option<Enum1293>>), (UInt16(157)&127..UInt16(108)&127:((-11)|1)), (Int8(50)&127..Int8(-117)&127:(-99)|1)), ['8', 'p', 'y', 'p', 'F', '5', 'a', 'w', 'v', 'i'], UInt32(77), (Float32(126.0), [(), (), (), (), (), (), (), (), (), ()], true, (UInt16(83)&127..UInt16(232)&127:116|1), (Int8(105)&127..=Int8(-59)&127:(-85)|1)), [(), (), (), (), (), (), (), (), (), ()], Float32(Float32(60.0)), (Int32(-44)&127..=Int32(32)&127:(Int64(UInt16(98))|1))), 0.0, UInt8(10), ((UInt8(203)&127..UInt8(132)&127:0|1), Int32(-100), (UInt16(UInt16(66))&127..=UInt16(UInt16(135))&127:(Int64(UInt32(75))|1)), Int32(UInt32(Int8(-55))), false, Float64(Float64((-62.0))), 'l', (-67.0), 83.0), ([(Int16(-57)&127..=Int16(-115)&127:(-22)|1), (Int16(-10)&127..=Int16(-7)&127:(-9)|1), (Int16(126)&127..Int16(-111)&127:(-97)|1), (Int16(-119)&127..=Int16(97)&127:(-75)|1), (Int16(51)&127..Int16(-45)&127:(-13)|1), (Int16(38)&127..=Int16(52)&127:91|1), (Int16(-82)&127..Int16(-42)&127:(-21)|1), (Int16(4)&127..Int16(-70)&127:121|1), (Int16(-97)&127..=Int16(106)&127:63|1), (Int16(-41)&127..Int16(-59)&127:121|1)] as Enum1293), ((UInt64(Int32(55)), Int16(UInt8(183)), ###" /o1^$H%3["###, UInt64(Int16(101)), 10.0), [['S', '2', 'U', 'E', 'R', 'h', '6', 'a', 'w', '6'], ['9', 't', 'h', 'R', 'Z', 'o', 'D', 'F', '9', 'n'], ['I', 'U', '1', 'C', 'd', 'n', 'f', 'I', 'h', 'n'], ['h', 'L', 's', '3', '9', '9', 'b', 'G', 'd', 'L'], ['e', 'E', 'c', 'g', 'T', 'w', 'p', 'd', 'B', 'a'], ['i', '6', 'm', 'G', 'D', '4', 'p', 'G', 'l', 'Z'], ['G', '4', 's', 'j', 'i', '0', 'v', '8', 'c', 'Q'], ['j', 'L', '2', 'P', 'v', 'R', 'b', '5', 'j', 'O'], ['4', '4', 'A', 'w', 'R', 'z', 'k', 'z', 'I', 'm'], ['P', 'm', 'k', 'I', 'a', 'H', 'o', 'V', 'w', 'S']]), UInt8(212));
    func func3687() : (((Float32, Array<Unit>, Bool, Range<UInt16>, Range<Int8>), Array<Rune>, UInt32, (Float32, Array<Unit>, Bool, Range<UInt16>, Range<Int8>), Array<Unit>, Float32, Range<Int32>), Float64, UInt8, (Range<UInt8>, Int32, Range<UInt16>, Int32, Bool, Float64, Rune, Float64, Float64), Option<Enum1293>, ((UInt64, Int16, String, UInt64, Float64), Array<Array<Rune>>), UInt8) { // block id: 3688
        var3690;
        var var3833 : (Range<UInt8>, Int32, Range<UInt16>, Int32, Bool, Float64, Rune, Float64, Float64) = ((UInt8(Int8(UInt8(111)))&127..UInt8(UInt8(UInt8(156)))&127:(Int64(Int16(Int16(87)))|1)), Int32(Int16(-12)), (UInt16(19)&127..=UInt16(28)&127:(55|1)), Int32(112), (((Int16(-32)&127..=Int16(61)&127:((-70)|1)) as Option<Enum1293>) is Int16), Float64(Float32(Float32(-81.0))), 'U', 28.0, 99.0);
        if ((var3402 ?? [true, false, true, true, false, true, false, false, true, true])[3]) { var3706 } else { try { // block id: 3783
            UInt32(225);
            var var3788 : Float32 = Float32(Float32(Float32(-57.0)));
            var484 -= var3788;
            (var3794, (-52.0), UInt8(227), var3833, Option<Enum1293>.None, (var3867, [['5', 'h', 'R', '1', '1', 'Q', '2', 'n', 't', 'k'], ['Q', 'R', '0', '7', '5', 'z', 'j', 'D', 's', '0'], ['I', 'G', 'B', 'q', 't', 'a', 'r', 'o', 'A', 'r'], ['y', 'O', 'k', 'M', '2', 'H', 'I', 'W', 'S', 'Q'], ['4', 'p', 'h', 'v', 'Y', 'G', '3', 'E', 'h', 'W'], ['2', 'U', 'R', '4', 'j', '5', 'W', 'w', '4', 'b'], ['L', 'r', '4', 'L', 'I', 'H', 'j', '9', 'G', 'n'], ['R', 'j', '9', 'r', '7', 'q', '4', '9', 't', 'm'], ['i', 'X', 'X', 'F', 'c', 'U', 'X', '5', '8', 'y'], ['0', 'P', 'z', 'w', '6', 'w', 'k', 's', 'W', 'i']]), var1826)
        } finally { // block id: 3877
            if (var54) { var3706 } else { var3706 } 
        } } 
    }
;
    let var4009 : Array<Option<Int32>> = [Option<Int32>.Some(Int32(UInt8(70))), ((-12.0) as Int32), Option<Int32>.None, Option<Int32>.None, ([Option<Int32>.Some(Int32(35)), ((Float32(117.0), [(), (), (), (), (), (), (), (), (), ()], false, (UInt16(160)&127..=UInt16(117)&127:(62|1)), (Int8(5)&127..Int8(-24)&127:(79|1))) as Int32), Option<Int32>.Some(Int32(-61)), Option<Int32>.None, ([((), Int8(-30), Int32(54)), ((), Int8(50), Int32(124)), ((), Int8(101), Int32(-16)), ((), Int8(24), Int32(104)), ((), Int8(-69), Int32(-85)), ((), Int8(-84), Int32(-29)), ((), Int8(-35), Int32(83)), ((), Int8(-27), Int32(108)), ((), Int8(0), Int32(0)), ((), Int8(-73), Int32(124))] as Int32), Option<Int32>.Some(Int32(126)), (['h', 'm', 'W', 'a', 'J', 'R', '1', 'd', 'y', 'R'] as Int32), (UInt16(42) as Int32), (true as Int32), ((-36.0) as Int32)] as Int32), Option<Int32>.None, ((UInt16(11)&127..=UInt16(96)&127:3|1) as Int32), ((Int32(UInt8(48))&127..=Int32(-109)&127:((-16)|1)) as Int32), Option<Int32>.Some(Int32(UInt8(Int8(-99)))), Option<Int32>.Some(Int32(Int8(-119)))];
    let var4139 : (Range<UInt8>, Int32, Range<UInt16>, Int32, Bool, Float64, Rune, Float64, Float64) = ((UInt8(UInt8(UInt8(117)))&127..=UInt8(UInt8(101))&127:((-120)|1)), Int32(-14), (UInt16(110)&127..UInt16(Int8(-64))&127:(Int64(UInt32(166))|1)), Int32(UInt32(Int16(5))), true, Float64(Float32(Float32(94.0))), 'J', 126.0, Float64(Float32(Float32(-106.0))));
    let var4193 : Rune = 'M';
    let var4294 : Int16 = Int16(UInt8(152));
    func func4260<T0, T1, T2>() : Option<Int32> where T0 <: Option<Option<Array<Int8>>>, T1 <: Array<Rune>, T2 <: Option<Array<Bool>> { // block id: 4261
        var var4311 : Int16 = Int16(Int16(7));
        (match ([var2699, var2699, var2699, var2699, var2699, (var1658, var446, Int32(38)), ((), Int8(126), Int32(80)), var2699, (var1919, var446, Int32(-2)), ((), var1153, Int32(67))]) {
            case _ : (Unit, Int8, Int32) => 
                var414;
                [(var4294&127..Int16(-62)&127:(var383|1)), var3690, (Int16(-100)&127..=var4294&127:(27|1)), var3690, (Int16(22)&127..=Int16(-85)&127:(-98)|1), (Int16(113)&127..Int16(30)&127:(-50)|1), (Int16(-29)&127..=Int16(-14)&127:117|1), (Int16(-72)&127..=var4311&127:((-68)|1)), (Int16(-93)&127..=Int16(34)&127:(-26)|1), (Int16(-118)&127..var4294&127:(100|1))]
            
            case _ => 
                let var4323 : Array<Range<Int16>> = [(Int16(-123)&127..=Int16(123)&127:(-7)|1), (Int16(-74)&127..Int16(UInt8(UInt8(100)))&127:(Int64(UInt32(202))|1)), (Int16(42)&127..=Int16(Int8(Int8(81)))&127:((-85)|1)), (Int16(-5)&127..=Int16(33)&127:13|1), (Int16(Int16(Int16(-57)))&127..=Int16(Int8(Int8(121)))&127:((-37)|1)), (Int16(-87)&127..=Int16(-33)&127:((-23)|1)), (Int16(Int8(74))&127..Int16(Int8(Int8(-89)))&127:(104|1)), (Int16(UInt16(47))&127..=Int16(UInt8(Int8(19)))&127:((-69)|1)), (Int16(122)&127..Int16(-50)&127:81|1), (Int16(UInt8(Int8(93)))&127..=Int16(-85)&127:(Int64(UInt16(213))|1))];
                var4323
            
        } as Int32)
    }
;
    try { // block id: 3685
        func3687();
        UInt64(205) & UInt64(213);
        [Option<Int32>.None, Option<Int32>.Some(Int32(85)), Option<Int32>.Some(Int32(-36)), Option<Int32>.None, var1491, Option<Int32>.Some(Int32(110)), Option<Int32>.None, Option<Int32>.None, var1491, var1491][9]
    } catch (_) { // block id: 3902
        let var3909 : ?Int8 = (() as Int8);
        (var3909 ?? Int8(27));
        if (var3595) { var1491 } else { var1491 } 
    } finally { // block id: 3917
        match (UInt32(77)) {
            case 115 => 
                param3256;
                var1658
            
            case 182 | 66 | 24 | 116 => 
                var414;
                ();
                ()
            
            case _ => 
                if (true) { [var1491, var1491, var3939, Option<Int32>.None, Option<Int32>.None, var1491, Option<Int32>.Some(Int32(105)), var4004, Option<Int32>.None, var1491] } else { var4009 } ;
                var var4118 : Bool = true;
                var4118 ||= false;
                var200
            
        };
        try { // block id: 4123
            if (true) { ";b+Q=Uc9a{;" } else { """
8O;cJ
60$bM
""" } ;
            ();
            Option<(UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>)>.None
        } catch (_) { // block id: 4130
            ();
            var var4169 : ((UInt64, Int16, String, UInt64, Float64), Array<Array<Rune>>) = ((UInt64(62), Int16(Int16(UInt16(169))), """
=^$ha
c6.'d
""", UInt64(Int32(36)), 19.0), [['G', 'E', 'P', 'D', 'S', 'x', '9', '0', 'L', 'q'], ['t', 'D', '0', 'v', 'Q', 'i', 'o', 'l', 'O', 'Q'], ['l', 'b', 'U', '0', 'S', 'A', 'y', 'E', '6', 'W'], ['6', 's', '8', 'x', 'f', 'M', 'Y', 'm', 'W', 'P'], ['k', '3', 'o', 'h', 'e', '6', 'k', 'M', '7', 'C'], ['j', 's', 'y', 's', 'q', '4', 'B', 'E', 'K', 'x'], ['Y', '3', 'v', 'l', 'x', 'a', 'Z', 'l', 'l', 'W'], ['1', 'o', 'I', 'K', '8', 'a', 'V', 'r', '7', 'A'], ['9', 'j', '3', 'R', 'Y', '5', 'u', 'E', 'U', 'e'], ['b', 'X', 'x', '4', 'T', 'x', 'j', 'S', 'y', 'K']]);
            var var4200 : (Float32, Array<Unit>, Bool, Range<UInt16>, Range<Int8>) = (Float32(Float32(3.0)), [(), (), (), (), (), (), (), (), (), ()], true, (UInt16(167)&127..=UInt16(UInt16(UInt16(111)))&127:(Int64(UInt8(145))|1)), (Int8(-24)&127..=Int8(Int8(UInt8(91)))&127:(Int64(UInt32(UInt16(12)))|1)));
            if (var174) { (var3794, var1713, var1826, var4139, var3189, var4169, UInt8(26)) } else { ((var1932, ['3', var649, 'q', 'v', var649, 'S', var4193, 'a', var1716, var724], UInt32(214), var4200, var1780, Float32(-25.0), (Int32(-124)&127..Int32(-46)&127:(-116)|1)), 26.0, var1826, var4139, Option<Enum1293>.None, var4169, var1826) } ;
            var var4243 : Option<(UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>)> = (((39&127..104&127:(-121)|1), (Option<Range<Int8>>.Some((Int8(71)&127..Int8(-13)&127:(-30)|1)) is Option<Array<Int8>>), (UInt8(Int8(112))&127..=UInt8(Int8(73))&127:(Int64(UInt16(8))|1)), Float32(1.0)) as (UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>));
            if (false) { var4243 } else { var4243 } 
        };
        func4260<Option<Option<Array<Int8>>>, Array<Rune>, Option<Array<Bool>>>()
    }
}

func func2989(param2990 : Option<(UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>)>) : Array<Array<Rune>> { // block id: 2991
    let var2999 : Array<Rune> = ['D', 'R', '1', 'y', 'P', 'm', 'C', '8', 'l', 'Z'];
    let var4462 : UInt8 = UInt8(190);
    let var4481 : Int16 = Int16(UInt8(Int8(Int8(UInt8(90)))));
    let var4507 : Range<UInt64> = (UInt64(142)&127..UInt64(48)&127:115|1);
    let var4564 : Rune = 'k';
    let var4568 : Rune = '5';
    func func3250(param3251 : (Float32, Array<Unit>, Bool, Range<UInt16>, Range<Int8>)) : Array<Array<Rune>> { // block id: 3252
        var200;
        var var4375 : ((UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>)) -> Option<Int32> = func3255;
        try { // block id: 4378
            let var4385 : (Range<UInt32>, Int64, Array<Bool>, Option<Bool>) = ((UInt32(171)&127..=UInt32(80)&127:112|1), Int64(UInt32(UInt16(165))), [false, true, false, false, false, true, true, true, false, true], Option<Bool>.Some(true));
            (UInt64(253), UInt8(37), var2343, var1716, var4385, var1780)
        } finally { // block id: 4395
            var2373
        }|>var4375;
        let var4429 : Range<Int32> = (Int32(48)&127..Int32(-59)&127:(-125)|1);
        var var4443 : ?Range<Int8> = Option<Range<Int8>>.Some((Int8(Int8(UInt8(224)))&127..=Int8(Int8(76))&127:(52|1)));
        var var4512 : Int16 = Int16(UInt8(223));
        match (if ((var298 ?? var3595)) { // block id: 4402
                if (var2292) { ((Float32(65.0), [(), (), (), (), (), (), (), (), (), ()], false, (UInt16(234)&127..=var1756&127:(var3281|1)), (var446&127..Int8(-88)&127:(79|1))), var2999, UInt32(21), (var484, [(), (), (), (), (), (), (), (), (), ()], var174, var339, var1094), [(), (), (), (), (), (), (), (), (), ()], var484, var4429) } else { (var1932, var668, UInt32(61), param3251, var1780, var484, (Int32(-49)&127..=Int32(14)&127:(3|1))) } ;
                var4443;
                ((), Int8(-95), var2343)
            } else if (match ((var1188, var1723, (var4462&127..UInt8(251)&127:((-40)|1)), Float32(97.0))) {
                case (_,_,caseVar4469 : Float32,_) => 
                    var1723
                
                case _ => 
                    UInt8(189) <= UInt8(236)
                
            }) { // block id: 4477
                (Int16(107)&127..=var4481&127:(var383|1));
                var var4490 : Float64 = Float64(Float32(Float32(Float32(-63.0))));
                var4490 += var4490;
                if (var2292) { ((), Int8(71), Int32(-122)) } else { var2699 } 
            } else { // block id: 4503
                if (false) { var4507 } else { (UInt64(9)&127..UInt64(57)&127:(-46)|1) } ;
                var4512 |= var4512;
                var2699
            }) {
            case caseVar4519 : Rune => 
                if (true) { (var4462&127..UInt8(77)&127:(var3281|1)) } else { (UInt8(124)&127..=UInt8(192)&127:(var3281|1)) } ;
                Int8(72);
                [['L', 'z', 'W', 'o', 'R', 'Z', 'L', 'g', '8', '9'], [var724, var649, var644, var3025, caseVar4519, var724, var724, var3025, 't', 'w'], ['t', var3017, caseVar4519, var3025, var1716, 'm', var1716, '3', 's', 'h'], var668, var668, [var745, var3017, 'q', caseVar4519, var4564, var3025, var4568, var3025, 'u', '4'], [var1716, var4564, var4568, var4568, var1716, 'O', 'P', var649, var649, var3025], var668, ['M', '0', 'L', 'e', '6', 'V', 'i', 'v', '2', '5'], [var3017, caseVar4519, var4590, 'O', var1716, 'Z', '3', '7', var649, var644]]
            
            case (_,caseVar4601 : (UInt64, Int16, String, UInt64, Float64),_) => 
                [['a', 'S', 'x', 'R', 'e', 'l', 'M', 'O', 'n', 'x'], ['I', 'j', 'k', 'Z', '3', 'r', 'c', 'U', 't', 'i'], ['K', 'C', '3', 'W', 'A', 'o', '6', 'h', 'E', 'L'], ['u', '7', 'g', 'q', '5', 'B', '3', 'j', 'R', 'P'], ['p', 'F', 'Y', 'i', 'y', 'e', 'w', 'W', 'z', 'F'], ['B', 'J', 'D', 'k', 'N', '1', 'P', 'q', 'r', 'I'], ['o', 's', 'i', 'd', 's', 'q', 'b', 'Q', 'W', 'w'], ['Q', 'u', 'i', 'D', 'o', '3', 'w', 'P', 'L', 'e'], ['9', 'H', '5', 'R', 'z', 'y', 'F', 'B', 'c', 'y'], ['R', 'W', '0', 'z', 'n', 'L', 'P', '5', 'b', 'O']]
            
            case _ => 
                [false, true, false, false, true, true, true, false, false, false];
                [[var3025, var3025, var644, 'g', 'B', var1716, 'u', 'j', var4590, var4564], var668, ['k', 'B', var724, var649, 'k', 'i', 'e', var3017, '0', 'Q'], ['2', 'U', 'H', 'Z', 'c', 'j', 'V', '1', 'K', 'G'], ['7', 'w', 'x', 'o', '7', '7', 'g', 'B', 'I', 'D'], ['x', 'M', 'n', 'O', 'W', 'p', 'I', 'X', 'H', 'y'], ['o', 'a', 'w', 'G', 't', '9', '7', 'P', 'R', 'd'], [var1716, var724, var4590, var1716, 'R', 'O', 'E', 'h', var745, 'l'], ['E', 'a', 'a', 'M', 'w', 'c', 'c', 'm', 'f', 'y'], var668]
            
        }
    }
;
    var var4668 : Int64 = Int64(UInt64(UInt8(91)));
    try { // block id: 2993
        ();
        let var3020 : Rune = 'R';
        [['T', 'y', 'm', 'R', 'K', 'e', 'z', 'Q', 'p', 'C'], ['A', 'H', 'q', 'k', 'l', 'c', 'G', 'd', 'u', '4'], var2999, [var649, var644, 'n', var644, var3017, var3020, var3017, var1716, var3025, var3017], ['M', '6', '8', 'p', '6', '9', 'f', 'C', 'o', 'w'], ['3', 'S', 's', 'G', 'l', 'g', 'g', 'b', '9', '9'], var2999, ['X', var649, 'O', 'k', var644, '7', var3020, var1716, 's', 'i'], ['U', 'W', 'r', 'V', 'q', '3', 'W', 'I', '2', 'O'], ['t', '8', 'D', 'W', 'x', 'y', 'J', 'o', 'l', 'I']]
    } catch (e: Exception) { // block id: 3044
        if (true) { Aggregate127(namedParam3049 : param2990, namedParam3050 : UInt8(146)) } else { var131 } ;
        func3250((var484, [var1919, (), var1658, (), (), var4657, (), (), var1919, var4657], var1314, (UInt16(170)&127..var577&127:(var4668|1)), (Int8(-116)&127..=Int8(109)&127:101|1)))
    } finally { // block id: 4673
        [['P', '5', 'U', '5', 'w', '5', '2', 'e', 'e', 'Q'], ['0', 'b', 'r', 'Y', '8', 'w', '1', 'Q', 'M', 'A'], ['E', 'M', '9', 'c', 'k', '3', '8', 'q', 'W', 't'], ['d', 'R', 'g', 'O', 'q', 'X', 'V', 'L', 'N', 'W'], ['8', 'E', 'x', 'I', 't', 'M', 'o', 'F', 'q', 'T'], ['O', 'g', 'o', 'w', 'B', 'K', '6', 'g', 'A', '6'], ['V', 'm', '1', 'V', 'N', 'k', 'p', 'C', 'E', 'Y'], ['8', '1', '9', 'f', 'T', '5', 'Q', 'k', 'A', '0'], ['L', 'J', 'x', 'w', 'u', 'T', 'j', 'K', 'S', 't'], ['s', 'm', 'z', 'V', 'W', 'B', 's', 'U', '2', 'O']]
    }
}

func func2821(optionalParam2822 ! : ((Float32, Array<Unit>, Bool, Range<UInt16>, Range<Int8>), Array<Rune>, UInt32, (Float32, Array<Unit>, Bool, Range<UInt16>, Range<Int8>), Array<Unit>, Float32, Range<Int32>) = ((Float32(-27.0), [(), (), (), (), (), (), (), (), (), ()], true, (UInt16(124)&127..=UInt16(182)&127:(-22)|1), (Int8(46)&127..Int8(30)&127:62|1)), ['r', 'K', 'L', 'V', 'D', '1', 'H', 'm', '3', 'H'], UInt32(0), (Float32(-61.0), [(), (), (), (), (), (), (), (), (), ()], (Option<(UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>)>.None is Option<Range<Int8>>), (UInt16(44)&127..UInt16(3)&127:111|1), (Int8(-102)&127..=Int8(-114)&127:(-59)|1)), [(), (), (), (), (), (), (), (), (), ()], Float32(Float32(59.0)), (Int32(-85)&127..=Int32(6)&127:104|1)), namedParam2873 ! : (Range<UInt64>) -> (UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>), namedParam2876 ! : Option<(UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>)>) : Range<UInt64> { // block id: 2877
    var var2987 : (Array<Array<Rune>>) -> Unit = func2982;
    var var4676 : (Option<(UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>)>) -> Array<Array<Rune>> = func2989;
    var var4679 : Option<(UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>)> = Option<(UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>)>.None;
    var4679|>(var4676~>var2987);
    match (Enum1293.defaultValue) {
        case defaultValue => 
            (var2957&127..=UInt64(17)&127:(50|1))
        
        case caseVar4692 => 
            var1314;
            (66&127..=75&127:(43|1));
            if (var3595) { (UInt64(133)&127..UInt64(41)&127:(-15)|1) } else { (var2957&127..=UInt64(153)&127:((-80)|1)) } 
        
        case _ : Range<Int32> => 
            [['x', 'p', 'I', 'T', 'm', 'm', 'n', 'Z', 'S', 'C'], ['F', 'w', 'i', 'i', 'P', '7', 'K', 'e', '0', 'F'], ['j', 'B', 'x', 'P', '2', 'j', 'j', 'N', 'a', 'u'], ['Z', 'c', 'N', 'f', 'o', 'l', 'o', 'd', 'U', 'Y'], ['s', 'j', 'j', 'v', 'F', 'l', '7', 'R', '1', '0'], ['a', 'A', 'p', 'E', '4', 'f', '8', 'W', 'h', 'E'], ['z', 'i', 'c', 'O', 'M', 'G', 'e', '9', 'I', 'p'], ['g', 'H', '7', 'I', 'Q', 'O', 'v', '1', 'D', 'b'], ['c', 'K', 'V', 'Y', '1', '3', 'O', 'y', 'L', 'X'], ['0', 'k', 'k', 'O', 'D', 'n', 'd', 'H', 'Z', 'M']];
            ();
            var4712
        
        case caseVar4724 : Option<(Unit, Int8, Int32)> => 
            if (false) { (UInt64(31)&127..UInt64(168)&127:(var383|1)) } else { (UInt64(178)&127..=UInt64(116)&127:17|1) } 
        
        case _ => 
            let var4738 : (Range<UInt8>, Int32, Range<UInt16>, Int32, Bool, Float64, Rune, Float64, Float64) = ((UInt8(167)&127..UInt8(132)&127:(-118)|1), Int32(UInt32(44)), (UInt16(191)&127..=UInt16(27)&127:(-111)|1), Int32(UInt32(UInt32(39))), (Option<Aggregate127>.None is Aggregate127), (-100.0), 'm', (-23.0), 83.0);
            if (false) { var4738 } else { var4738 } ;
            var1932;
            var4712
        
    }
}

public func func2817(param2818 : Aggregate127) : Range<UInt64> { // block id: 2819
    var var4758 : (Range<UInt64>) -> (UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>) = func2660;
    var var4769 : ?Range<Int8> = (() as Range<Int8>);
    let var4801 : Int64 = (-47);
    func2821(optionalParam2822 : var3794, namedParam2873 : var4758, namedParam2876 : match (if (true) { Option<Range<Int8>>.Some((Int8(-21)&127..Int8(100)&127:(var383|1))) } else { var4769 } ) {
        case caseVar4774 : Option<Enum1293> => 
            (Int32(21)&127..Int32(-109)&127:(109|1));
            if (true) { var3531 } else { Option<(UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>)>.Some(var2373) } 
        
        case caseVar4787 => 
            var3531
        
        case _ => 
            Option<(UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>)>.Some(var2373)
        
        case _ => 
            (var2400&127..Int32(83)&127:(var4801|1));
            var414;
            var3531
        
    })
}

func func2813(param2814 : Int8) : Range<UInt64> { // block id: 2815
    let var4813 : Option<(UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>)> = ((UInt32(UInt32(UInt32(62)))&127..UInt32(236)&127:((-123)|1)) as (UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>));
    try { // block id: 4807
        if (false) { var131 } else { Aggregate127(namedParam3049 : var4813, namedParam3050 : var1826) } 
    } catch (_) { // block id: 4822
        Option<Unit>.Some(());
        var131
    } finally { // block id: 4826
        if (true) { Aggregate127() } else { Aggregate127() } 
    }|>func2817
}

public func func2809(param2810 : Array<Int8>) : Range<UInt64> { // block id: 2811
    Int8(var1826)|>func2813
}

func func4837(param4838 : Option<Range<Int8>>) : Array<Int8> { // block id: 4839
    var var5198 : Int16 = Int16(Int16(UInt16(223)));
    let var5224 : (Range<Int64>, Bool, Range<UInt8>, Float32) = ((28&127..=(-64)&127:48|1), false, (UInt8(220)&127..=UInt8(249)&127:(-60)|1), Float32(-20.0));
    try (resource = Class493()) { // block id: 4841
        let var5027 : Array<Option<Int32>> = Array<Option<Int32>>(10){ i => Option<Int32>.None };
        let var5156 : Int32 = Int32(-46);
        match (var4844) {
            case caseVar5016 : Range<UInt16> => 
                var2566;
                if (var174) { (var1826&127..=var1826&127:(var383|1)) } else { (UInt8(50)&127..UInt8(95)&127:(-22)|1) } ;
                var5027
            
            case caseVar5058 : Option<Aggregate127> => 
                var213--;
                let var5073 : ?Int32 = ((UInt64(Int16(102)), Int16(-124), """
X.-#z
NssD_
""", UInt64(150), (-10.0)) as Int32);
                if (false) { [Option<Int32>.Some(var1705), var4004, Option<Int32>.Some(Int32(-87)), Option<Int32>.None, Option<Int32>.None, var5073, var5073, Option<Int32>.Some(var2400), Option<Int32>.None, var1491] } else { [var4004, Option<Int32>.Some(Int32(59)), Option<Int32>.Some(Int32(77)), Option<Int32>.Some(Int32(-57)), var1491, var1491, var1491, Option<Int32>.None, Option<Int32>.None, var5073] } 
            
            case _ => 
                var5027
            
            case (_,_,_,(caseVar5107 : Int8,_ : Array<Bool>,_ : Int8,_,caseVar5108,_ : Option<Unit>,caseVar5109 : ((UInt64, Int16, String, UInt64, Float64), Array<Array<Rune>>),_ : UInt64,_ : (UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>)),Some(defaultValue),_ : UInt16,_ : (Range<UInt32>, Int64, Array<Bool>, Option<Bool>)) => 
                if (var1314) { [Option<Int32>.Some(Int32(-86)), Option<Int32>.Some(Int32(-4)), Option<Int32>.None, var3939, var1491, var4004, var3939, Option<Int32>.Some(Int32(47)), var3939, var5127] } else { [Option<Int32>.Some(var5156), var1491, Option<Int32>.None, var5127, Option<Int32>.Some(Int32(39)), var3939, Option<Int32>.Some(Int32(24)), var4004, Option<Int32>.Some(var2343), var4004] } 
            
            case _ => 
                var5173;
                var5027
            
        };
        var loopTimeVar5180 : Int64 = 0;
        do {
            loopTimeVar5180++;

        } while ((true) && loopTimeVar5180 < 100 ) ;
        ()
    } catch (e: Exception) { // block id: 5182
        match (var5185) {
            case _ => 
                ();
                ()
            
            case caseVar5194 : (Range<UInt32>, Int64, Array<Bool>, Option<Bool>) => 
                var5198 >>= ((var5198) & 7);
                var2957 = var2957
            
            case _ => 
                var1705++;
                if (var3595) { (Int16(37)&127..=Int16(-22)&127:((-54)|1)) } else { (Int16(-93)&127..Int16(52)&127:(-128)|1) } ;
                var5219 >>= ((108) & 7)
            
        };
        var5224;
        var loopTimeVar5233 : Range<UInt64> = (UInt64(151)&127..=UInt64(126)&127:(Int64(UInt16(UInt16(UInt8(161))))|1));
        for (i in loopTimeVar5233 where var174) {

        }
    } finally { // block id: 5241

    };
    ((var5245 as Array<Int8>) ?? try { // block id: 5249
        var var5251 : Array<Int8> = [Int8(58), Int8(20), Int8(25), Int8(48), Int8(-77), Int8(-11), Int8(68), Int8(63), Int8(-118), Int8(-84)];
        var5251
    } catch (e: Exception) { // block id: 5253
        if (false) { [Int8(-92), Int8(82), Int8(51), Int8(-17), Int8(6), Int8(110), Int8(55), Int8(16), Int8(-41), Int8(36)] } else { [Int8(-99), var5260, var446, var1926, Int8(37), var446, Int8(87), Int8(-98), Int8(78), Int8(-66)] } 
    })
}


func func2272(param2273 : Int64) : Unit { // block id: 2274
    let var2319 : (Unit, Int8, Int32) = ((), Int8(-110), Int32(114));
    let var5271 : (Option<Range<Int8>>) -> Array<Int8> = func4837;
    func func2277<T0, T1>(optionalParam2278 ! : (UInt64, Int16, String, UInt64, Float64) = (UInt64(239), Int16(87), """
(xi=:
xPYnX
""", UInt64(39), Float64(9.0)), namedParam2286 ! : Enum1293) : Bool { // block id: 2287
        try { // block id: 2289
            var loopTimeVar2296 : Range<UInt64> = (UInt64(95)&127..=UInt64(184)&127:((-85)|1));
            for (i in loopTimeVar2296 where var2292) {

            };
            try { // block id: 2302
                var1969;
                var577
            } catch (e: Exception) { // block id: 2305
                ();
                var1302;
                var1756
            } finally { // block id: 2309
                var1756 << ((var1756) & 7)
            };
            Int16(-42)
        } finally { // block id: 2314
            [var2319, (var1919, var1153, var1705), var2319, var2319, var2319, ((), Int8(48), var1705), ((), var446, var1705), (var1658, Int8(-98), var2343), var2319, (var1658, Int8(21), var2343)][9];
            Int16(18)
        };
        let var4835 : (Array<Int8>) -> Range<UInt64> = func2809;
        (Enum1293.defaultValue as Range<Int8>)|>(var5271~>(var4835~>func2660));
        false
    }
;
    var var5463 : (Range<UInt8>, Int32, Range<UInt16>, Int32, Bool, Float64, Rune, Float64, Float64) = ((UInt8(UInt8(Int8(3)))&127..=UInt8(154)&127:((-112)|1)), Int32(87), (UInt16(UInt8(Int8(56)))&127..UInt16(Int8(UInt8(230)))&127:(Int64(UInt16(UInt8(214)))|1)), Int32(43), false, (-48.0), 'h', Float64((-98.0)), Float64(Float64(Float32(82.0))));
    var var5510 : (Unit, Int8, Int32) = ((), Int8(Int8(-78)), Int32(UInt16(82)));
    var var5519 : (Unit, Int8, Int32) = ((), Int8(Int8(-94)), Int32(UInt32(UInt8(33))));
    var loopTimeVar5602 : Int64 = 0;
    while ((func2277<Option<Unit>, Float32>(optionalParam2278 : try { // block id: 5277
        var var5279 : Array<(Unit, Int8, Int32)> = Array<(Unit, Int8, Int32)>(10){ i => ((), Int8(-112), Int32(-72)) };
        var5279;
        let var5338 : Array<Option<Int32>> = Array<Option<Int32>>(10){ i => (((UInt32(131)&127..=UInt32(231)&127:(-13)|1), Int64(UInt8(187)), [false, false, false, false, true, true, true, true, false, false], ((((-97)&127..30&127:(-35)|1), false, (UInt8(13)&127..=UInt8(109)&127:2|1), Float32(40.0)) as Bool)) as Int32) };
        if (true) { var5338 } else { [var1491, var5127, var5127, var1491, var5127, var1491, var1491, Option<Int32>.None, Option<Int32>.Some(var2400), var1491] } ;
        let var5425 : Int16 = Int16(UInt16(UInt8(7)));
        (UInt64(64), var5425, var1969, var2957, var1713)
    } finally { // block id: 5432
        var5434;
        var414;
        var var5442 : UInt64 = UInt64(236);
        if (true) { (var5442, var5434, """
CoZ\\ 
_\"o`/
""", var5442, 54.0) } else { var3867 } 
    }, namedParam2286 : try { // block id: 5450
        if (var1314) { var1302 } else { var1302 } 
    } finally { // block id: 5455
        var1302
    })) && loopTimeVar5602 < 100 ) {
        loopTimeVar5602++;
        (Option<Unit>.None ?? ());
        var var5569 : UInt16 = UInt16(Int8(38));
        match (var5463) {
            case _ => 
                let var5542 : Int32 = Int32(UInt8(Int8(Int8(-126))));
                if (true) { [var2319, ((), Int8(122), Int32(-99)), var2699, var2699, var2699, var2699, var2319, var2699, var2319, var5510] } else { [var5519, var5519, var2319, (var4657, var5260, var2400), var5519, var5519, var5519, var2699, var5510, (var1919, var1153, var5542)] } ;
                Int16(-126);
                ()
            
            case (_ : UInt64,caseVar5551 : UInt64,caseVar5552 : ((UInt64, Int16, String, UInt64, Float64), Array<Array<Rune>>),_ : Option<Array<Bool>>,caseVar5553 : Int16,caseVar5554,_,_ : Option<(Unit, Int8, Int32)>,caseVar5555 : Option<(UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>)>) => 
                ((UInt8(181)&127..=UInt8(164)&127:(-75)|1), Int32(111), (UInt16(46)&127..=UInt16(223)&127:(-76)|1), Int32(-66), var1314, var1713, var4590, 68.0, caseVar5554);
                var5569 |= var1756
            
            case caseVar5575 => 
                var4657;
                var2957 &= var2957;
                var1658
            
            case caseVar5584 : ((Float32, Array<Unit>, Bool, Range<UInt16>, Range<Int8>), Array<Rune>, UInt32, (Float32, Array<Unit>, Bool, Range<UInt16>, Range<Int8>), Array<Unit>, Float32, Range<Int32>) => 
                ((UInt32(80)&127..=UInt32(151)&127:(-54)|1), var383, [true, false, false, false, true, false, false, true, true, true], var1225);
                ()
            
            case _ => 
                let var5596 : UInt32 = UInt32(110);
                (var5596&127..=UInt32(184)&127:((-82)|1));
                var200
            
        }
    };
    var var5610 : Int8 = Int8(Int8(UInt8(UInt8(UInt8(217)))));
    var loopTimeVar5642 : Range<UInt64> = (UInt64(UInt8(Int8(-26)))&127..=UInt64(UInt32(242))&127:(84|1));
    for (i in loopTimeVar5642 where ([var2699, ((), var5610, var2400), ((), var446, Int32(-59)), ((), Int8(-57), Int32(63)), var5510, var5519, var5519, (var200, var1926, Int32(-54)), var2699, ((), var5260, var1705)] is Option<Option<Enum1293>>)) {
        var var5640 : Int32 = Int32(-22);
        var5640--
    };
    try (resource = Class493()) { // block id: 5651
        ();
        Option<Unit>.None.getOrThrow();
        (Option<Unit>.Some(()) ?? var200)
    } finally { // block id: 5663
        var loopTimeVar5681 : Int64 = 0;
        do {
            loopTimeVar5681++;
            var var5670 : ?Array<Int8> = (Float64(Float64(Float32(Float32(-78.0)))) as Array<Int8>);
            let var5677 : ?Array<Int8> = Option<Array<Int8>>.None;
            if (var1723) { var5670 } else { var5677 } ;
            var2566
        } while ((var3595) && loopTimeVar5681 < 100 ) ;
        var loopTimeVar5686 : Range<UInt64> = (UInt64((-109))&127..UInt64(49)&127:(63|1));
        for (i in loopTimeVar5686 where false) {
            ()
        };
        var414
    }
}

public func func2217(param2218 : UInt16) : Enum1293 { // block id: 2219
    var1780;
    let var2225 : ?Range<Int8> = Option<Range<Int8>>.Some((Int8(UInt8(16))&127..=Int8(-20)&127:(Int64(Int16(-64))|1)));
    var var5694 : (Int64) -> Unit = func2272;
    try { // block id: 2222
        match (var2225) {
            case _ : Array<Int8> => 
                param2218;
                ();
                if (var1723) { var1302 } else { var1302 } 
            
            case caseVar2244 : (Range<UInt8>, Int32, Range<UInt16>, Int32, Bool, Float64, Rune, Float64, Float64) => 
                if (var174) { Aggregate127() } else { var131 } ;
                Enum1293.defaultValue
            
            case caseVar2253 => 
                Option<Bool>.None;
                if (true) { Enum1293.defaultValue } else { Enum1293.defaultValue } 
            
            case _ => 
                UInt8(210) % ((UInt8(109)) | 1);
                var1919;
                if (false) { var1302 } else { var1302 } 
            
        }
    } catch (_) { // block id: 2270
        (-74)|>var5694;
        var1826 &= UInt8(218);
        (var3189 ?? var5703)
    } finally { // block id: 5705
        var414;
        try (resource = Class493()) { // block id: 5708
            var3595 ||= var54;
            var1658
        } finally { // block id: 5713
            ();
            var414
        };
        match (var298) {
            case caseVar5720 => 
                var589;
                (-109);
                Enum1293.enumValue5725(var1716, var5734, func1567, Option<Aggregate127>.Some(var131))
            
            case _ => 
                var2400++;
                var1302
            
            case _ => 
                var1302
            
        }
    }
}







public func func2123(param2124 : UInt64, namedParam2125 ! : Aggregate127) : Float32 { // block id: 2126
    let var6077 : ??Bool = Option<Option<Bool>>.Some(Option<Bool>.None);
    let var6089 : ???Range<Int8> = Option<Option<Option<Range<Int8>>>>.None;
    let var6496 : ?Aggregate127 = Option<Aggregate127>.None;
    func func2176(namedParam2177 ! : Enum1293) : Float64 { // block id: 2178
        let var6010 : (Option<Range<Int8>>, Int64, Range<Int16>, Int8, Array<Int8>) = (Option<Range<Int8>>.Some((Int8(114)&127..=Int8(UInt8(64))&127:(Int64(UInt16(184))|1))), Int64(UInt16(125)), (Int16(UInt16(Int8(54)))&127..=Int16(-68)&127:(Int64(Int64(53))|1)), Int8(UInt8(Int8(Int8(-34)))), [Int8(Int8(Int8(-67))), Int8(-102), Int8(110), Int8(Int8(UInt8(10))), Int8(UInt8(UInt8(32))), Int8(33), Int8(UInt8(UInt8(203))), Int8(Int8(77)), Int8(-70), Int8(-87)]);
        let var6433 : Bool = (((Float32(-10.0), [(), (), (), (), (), (), (), (), (), ()], ((Int8(-78)&127..=Int8(-40)&127:12|1) is () -> Option<Int32>), (UInt16(92)&127..=UInt16(75)&127:(-40)|1), (Int8(73)&127..=Int8(-82)&127:120|1)), ['c', '3', 'k', '6', 'g', 'l', 'T', 'Y', 'M', '7'], UInt32(150), (Float32(47.0), [(), (), (), (), (), (), (), (), (), ()], (Option<Aggregate127>.None is Option<Unit>), (UInt16(254)&127..=UInt16(176)&127:(126|1)), (Int8(-10)&127..=Int8(-97)&127:((-37)|1))), [(), (), (), (), (), (), (), (), (), ()], Float32(Float32(116.0)), (Int32(-3)&127..=Int32(-13)&127:118|1)) is Int8);
        func func2183() : Enum1293 { // block id: 2184
            Class493.func2188(match (70.0) {
                case caseVar6005 => 
                    if (false) { var6010 } else { var6010 } ;
                    let var6055 : Array<Int8> = [Int8(48), Int8(-107), Int8(-11), Int8(-58), Int8(-54), Int8(84), Int8(-13), Int8(-71), Int8(71), Int8(-20)];
                    var6055;
                    var2566
                
                case _ => 
                    (var213&127..UInt32(102)&127:(var5219|1));
                    if (true) { var5185 } else { var5185 } ;
                    var2566
                
            });
            var loopTimeVar6094 : Int64 = 0;
            do {
                loopTimeVar6094++;
                (var6089 ?? Option<Option<Range<Int8>>>.Some(Option<Range<Int8>>.None))
            } while ((((var6077 ?? var1236) ?? var3595)) && loopTimeVar6094 < 100 ) ;
            let var6109 : Enum1293 = Enum1293.enumValue5725('c', ((UInt64(UInt16(11)), Int16(UInt16(142)), "[BYKTSD)7p", UInt64((-77)), Float64(Float32(-95.0))), [['K', 'b', 'T', '2', 'z', 'r', '0', 'M', '9', 'H'], ['t', 'Q', 'Y', 'r', 'v', 'y', '8', 'B', 'G', '7'], ['Q', 'r', '3', 'y', 'Y', 'n', 'a', 'E', 'T', 'B'], ['W', 'F', 'e', 'J', 'v', '4', 't', '8', 'O', 'i'], ['D', 'D', 'k', 'v', '9', 'D', 'a', '2', 'm', 'I'], ['p', 't', 'T', 'T', 'v', 'x', 'L', '4', 'K', 'B'], ['L', 'T', 's', 'o', 'o', '2', 's', 'p', 'P', 'w'], ['Q', 'm', 'r', 'B', 'M', 'w', 'C', 'g', 'n', 'B'], ['h', 'c', 'B', 'k', 'j', 'T', '1', 'e', 'J', 'U'], ['n', 'y', 't', 'C', 'A', 'Z', 'm', '2', '1', 'a']]), func1567, (Aggregate127(namedParam6215 : (UInt64(180), UInt8(179), Int32(-68), 'O', ((UInt32(29)&127..=UInt32(249)&127:12|1), 125, [false, false, false, true, false, true, true, true, true, false], Option<Bool>.None), [(), (), (), (), (), (), (), (), (), ()])) as Aggregate127));
            var var6491 : (UInt16) -> Range<Int8> = func1567;
            (match (try { // block id: 6098
                    (var3867, [['k', '4', 'M', 'h', 'Z', 'd', 'P', 'N', 'n', '1'], ['V', 'w', 'N', 'b', 'K', 'z', 'Y', 'e', '8', 'w'], ['1', 'S', '9', 'V', 'Q', 'Z', 'h', '5', 'N', 'N'], ['Q', 'u', 'v', 'K', 'F', 'D', 'C', 'K', 'w', 'p'], ['F', 'q', '9', 'A', 'i', 'p', 'B', 'O', '6', 'G'], ['T', 'U', 'K', '5', 't', 'Y', 'G', '1', 'R', '3'], ['P', 'X', 'v', 'L', '1', '6', 'y', 'K', 'B', 'K'], ['j', 'n', 'y', '7', '2', 'y', 'Q', 'm', 'U', 'k'], ['Q', 'm', 'R', '9', 'a', 'U', 'V', 'd', '0', 'u'], ['Q', 'r', '1', 'Z', 'B', 'y', 'K', 'Q', 'P', '1']]);
                    Option<Option<Range<Int8>>>.None;
                    (Int32(58)&127..=Int32(29)&127:79|1)
                } catch (_) { // block id: 6104
                    if (var1314) { namedParam2177 } else { var6109 } ;
                    (var2343&127..=var2343&127:((-104)|1))
                }) {
                case caseVar6379 : Option<Range<Int8>> => 
                    var2566;
                    if (var1314) { var3189 } else { Option<Enum1293>.Some(namedParam2177) } 
                
                case _ : Option<(UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>)> => 
                    var6279;
                    Option<Enum1293>.Some(var1302)
                
                case _ => 
                    ();
                    var5434;
                    Option<Enum1293>.None
                
            } ?? Enum1293.enumValue5725(try { // block id: 6400
                if (var174) { var745 } else { var724 } 
            } finally { // block id: 6405
                if (var174) { 'g' } else { 'w' } 
            }, if (true) { // block id: 6412
                var5173;
                if (false) { ((UInt64(88), Int16(-43), """
AOqt~
qX32@
""", param2124, (-14.0)), [['4', 'X', 'x', 'M', 'j', 'i', 'b', 'Q', 'N', '9'], ['O', 'I', 'J', 'w', 'G', 'k', 'b', 'l', 't', 'w'], ['k', 'G', 'y', 'k', 'g', 'v', 'O', 'z', 'p', '1'], ['i', 'S', 'I', 'd', 'Y', '2', 'g', 'L', 'F', 'j'], ['g', 'L', 'q', '7', 'e', 'Y', 'w', '4', 'H', 't'], ['Q', 'W', '9', '0', 'm', '8', '4', 'U', 'f', 'E'], ['e', '4', 'q', 'U', 'o', 't', 'W', 'R', 'r', '5'], ['Q', '3', 'S', 'B', 'E', '8', 'K', 'n', 'L', '7'], ['o', 'm', '1', '0', 'V', 'B', 'd', 'H', '5', 'm'], ['O', 'y', 'L', 'q', 'B', 'W', 'z', 'x', 'h', 'v']]) } else { ((UInt64(17), var5434, var1969, UInt64(208), var1713), [['s', 'S', 'k', 'R', 'n', 'j', 'C', 'X', '3', 'o'], ['x', '8', '7', 'X', 'J', 'N', 'N', 'g', 'x', 'S'], ['B', 'c', 'r', '3', 'i', 'H', 'D', 'D', 'U', 'G'], ['v', 'r', 'Z', 'B', 'J', 'X', 'N', 'K', '9', '5'], ['h', 'y', 'C', '5', 'M', 'w', 'j', '4', 'x', 'B'], ['k', 'a', 'Q', 'G', '0', 'o', 'z', 'y', 'U', 'h'], ['l', '8', 'M', 'G', '9', '5', 'F', 'F', '7', 'G'], ['4', 'h', 'd', 'O', 'w', 'M', 'l', 'F', 'J', 's'], ['E', 'E', 'd', 't', 'v', '6', 'v', 'E', '0', 'A'], ['J', 'y', 'x', 'G', 'h', 'a', 'Y', 'j', 'r', 'x']]) } 
            } else if (var6433) { // block id: 6472
                var5434 ^ var5434;
                Option<Bool>.None;
                (var3867, [['u', '7', 'B', 'F', 'C', 'P', 'T', 'j', 'W', 'g'], ['u', 'n', 'U', 'J', '9', 'M', 'L', 'l', 'p', 'L'], ['h', 'm', 'z', '9', 'L', 's', 'H', 'X', 'C', '6'], ['s', '1', 'v', 'N', 'N', 'z', 'y', '1', 'd', 'l'], ['R', 'E', 'R', 'i', 'U', 'Z', 'K', 'p', 'X', 'g'], ['m', 'Q', 'k', 'Y', 'n', 'm', '1', 'T', 'r', 'J'], ['Y', 'w', 'g', '7', 'p', 'U', 'k', '5', '8', '8'], ['W', 'i', 'p', 'v', 'k', '1', 'Z', 'F', 'v', 'T'], ['Q', 'B', '4', 'r', 'J', 'e', 'S', 'p', 'W', 'X'], ['p', 'w', 'v', 'W', 'p', 'd', 'i', '1', 'a', '0']])
            } else { // block id: 6480
                var2400 * Int32(101);
                var1826 ^= var1826;
                (var3867, [['4', '8', 'B', '9', 'r', 'y', 'C', 'N', 'N', 'e'], ['u', 'V', 'U', '7', 'J', 'a', 'Y', 'p', 'Z', 'e'], ['t', 'p', 'l', 'A', 'P', '9', 'S', 'z', 'u', 'd'], ['I', 'l', 'C', 'q', 'Y', 'A', 'k', 's', 'I', 'g'], ['V', 'P', 'y', '7', 'X', 'e', 's', 'i', 'L', 'K'], ['6', 'L', 'r', 'R', 'd', 'B', 'X', 'G', 'm', '6'], ['8', '0', 'M', 'I', 'C', 'y', 'H', 'n', 'y', 'm'], ['j', 'V', 'W', 'k', 'S', 'K', '4', 'L', 'R', 'c'], ['S', 'B', 'D', 'z', 'U', 'k', 'W', 'z', 'F', 'f'], ['D', 'H', 'n', 'a', 't', 'U', 'Q', '3', '0', 'M']])
            }, var6491, try { // block id: 6494
                var6496
            } finally { // block id: 6498
                var6496
            }))
        }
;
        func func2180() : Enum1293 { // block id: 2181
            func2183()
        }
;
        func2180();
        match (var2343) {
            case _ => 
                var4657;
                var6506
            
        }
    }
;
    var var6516 : UInt8 = UInt8(152);
    let var6780 : Range<UInt32> = (UInt32(5)&127..UInt32(166)&127:((-66)|1));
    (namedParam2125.var2133, func2176(namedParam2177 : var1302), var1826, try { // block id: 6512
        ((var6516&127..UInt8(124)&127:(var5219|1)), var1705, var339, Int32(-47), var1723, 103.0, var3017, (-75.0), 9.0)
    } finally { // block id: 6528
        let var6539 : Int64 = 64;
        ((UInt8(161)&127..UInt8(247)&127:((-124)|1)), Int32(120), (var577&127..=UInt16(4)&127:(var6539|1)), Int32(31), false, 40.0, 'r', (-128.0), var1713)
    }, var3189, match {
        case false => 
        if (var54) { var5734 } else { ((UInt64(45), var5434, var1969, var2957, (-81.0)), var2566) } 
        case _ => 
        var var6604 : Rune = 'r';
        ((UInt64(254), Int16(-51), var1969, param2124, (-11.0)), [var668, ['D', '1', '1', 'A', 'y', 'O', 'B', '3', 'd', 'b'], var668, var668, ['q', 'c', var644, 'N', var1716, var3025, 'l', 'J', '7', var644], ['E', var3025, var4590, 'I', '9', '9', 'd', '3', 'g', '2'], [var4590, var3017, var644, 'O', var3017, var6604, var3025, '4', var3017, 'O'], var668, ['1', 'O', '7', 'i', 'o', '7', 'n', 'Y', '5', 'Z'], var668])
    }, try { // block id: 6614
        let var6787 : (Range<UInt32>, Int64, Array<Bool>, Option<Bool>) = ((UInt32(14)&127..=UInt32(103)&127:(-98)|1), 106, [true, true, false, true, false, false, false, false, true, true], Option<Bool>.Some(false));
        let var6805 : ((UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>)) -> Option<Int32> = func3255;
        if (var6617) { Aggregate127(var6780, namedParam6703 : func3255, namedParam6706 : var6787) } else { Aggregate127((var6797&127..var6797&127:((-48)|1)), optionalParam6698 : Option<Option<Bool>>.None, namedParam6703 : var6805, namedParam6706 : var6220) } ;
        UInt8(91)
    } finally { // block id: 6809
        UInt8(26)
    })[4];
    var var6830 : ?Unit = Option<Unit>.Some(());
    var loopTimeVar6846 : Int64 = 0;
    do {
        loopTimeVar6846++;
        try (resource = Class493()) { // block id: 6817
            var2957 %= ((UInt64(0)) | 1);
            var484 /= Float32((Int32(Float32(-54.0))) | 1);
            var446++
        } finally { // block id: 6826
            if (false) { var6830 } else { var6830 } ;
            if (false) { var649 } else { '6' } ;
            var1919
        };
        try (resource = Class493()) { // block id: 6840

        } finally { // block id: 6841
            var1705 /= ((var2400) | 1)
        }
    } while ((('L' is UInt64)) && loopTimeVar6846 < 100 ) ;
    var484
}


public func func2116(param2117 : Option<Aggregate127>) : ((UInt64, Int16, String, UInt64, Float64), Array<Array<Rune>>) { // block id: 2118
    var var2120 : Range<Int32> = (Int32(-9)&127..=Int32(-84)&127:112|1);
    var2120;
    var var6858 : Array<Option<Int32>> = [(Option<Bool>.Some(((Int16(-53)&127..=Int16(-97)&127:(-58)|1) is Array<Range<Int16>>)) as Int32), ((UInt64(UInt64(45)), UInt8(38), Int32(Int16(-8)), 'T', ((UInt32(154)&127..=UInt32(247)&127:((-108)|1)), (-61), [true, true, true, false, true, false, false, true, true, false], Option<Bool>.Some(false)), [(), (), (), (), (), (), (), (), (), ()]) as Int32), (UInt8(43) as Int32), Option<Int32>.None, Option<Int32>.Some(Int32(114)), Option<Int32>.Some(Int32(66)), ((Option<Option<(Unit, Int8, Int32)>>.None as Option<Enum1293>) as Int32), (Option<Enum1293>.None as Int32), (((UInt64(114)&127..=UInt64(202)&127:69|1) is (Enum1293) -> Float64) as Int32), (Option<Option<Range<Int8>>>.Some(Option<Range<Int8>>.None) as Int32)];
    var var6932 : (Unit, Option<Bool>) -> Int16 = func2272;
    func2123(UInt64(var5434), namedParam2125 : match ((Option<Array<Option<Int32>>>.Some(var6858) ?? [Option<Int32>.None, Option<Int32>.Some(Int32(75)), Option<Int32>.Some(Int32(1)), Option<Int32>.Some(Int32(80)), Option<Int32>.None, var3939, var1491, Option<Int32>.Some(var2400), var1491, Option<Int32>.Some(Int32(64))])) {
        case _ : Unit => 
            var414;
            Aggregate127(optionalParam6210 : var6932, namedParam6215 : var2373)
        
        case _ : UInt8 => 
            var var6941 : ?Range<Int8> = Option<Range<Int8>>.Some((Int8(-95)&127..Int8(72)&127:5|1));
            if (var2292) { var6941 } else { Option<Range<Int8>>.Some((Int8(-90)&127..=Int8(-107)&127:33|1)) } ;
            Option<Bool>.None;
            var131
        
        case caseVar6950 => 
            var3189;
            Aggregate127()
        
        case _ => 
            if (var54) { Enum1293.defaultValue } else { Enum1293.defaultValue } ;
            var var6972 : ((UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>)) -> Option<Int32> = func3255;
            if (false) { var131 } else { Aggregate127(var6966, optionalParam6698 : Option<Option<Bool>>.Some(Option<Bool>.Some(true)), namedParam6703 : var6972, namedParam6706 : var6220) } 
        
        case _ => 
            var6506 - var6506;
            Aggregate127(optionalParam6128 : Option<Unit>.None, namedParam6215 : (var2957, var1826, Int32(-14), var745, var6220, var1780))
        
    });
    match (UInt32(Int32(-89))) {
        case 215 | 62 | 142 => 
            var1919;
            var6279;
            if (true) { var5734 } else { var5734 } 
        
        case 182 | 31 | 106 | 193 => 
            ();
            ();
            ((var7009, Int16(-77), "3c\\B)GV#Pt", var2957, var1713), var2566)
        
        case caseVar7019 : Range<UInt16> => 
            var414;
            ();
            var5734
        
        case _ => 
            let var7040 : Rune = 's';
            var var7045 : Rune = 'P';
            if (false) { var5734 } else { (var3867, [var668, ['x', 'G', 'n', 'd', 'E', var7040, var1716, 'e', var7045, 'L'], [var3017, var7045, var1716, '4', '5', var7040, '2', 'q', '8', var1716], ['p', var745, '8', var7045, 'Y', 'i', 'g', 'Y', 'D', var3017], [var3025, 'o', var649, var745, 'e', var4590, 'E', var3025, 'm', 'a'], var668, ['N', 't', 'q', var1716, 'f', var7045, '1', 'h', '8', var3025], var7094, ['G', var745, 'u', 'r', 'c', 'T', 'u', var644, 'S', 'E'], ['0', 'D', '3', 'Q', 'q', 'u', 'T', 'A', 'w', 'I']]) } 
        
    }
}

public func func2112(param2113 : Range<UInt8>) : ((UInt64, Int16, String, UInt64, Float64), Array<Array<Rune>>) { // block id: 2114
    let var7109 : (Option<Aggregate127>) -> ((UInt64, Int16, String, UInt64, Float64), Array<Array<Rune>>) = func2116;
    let var7159 : ?Aggregate127 = Option<Aggregate127>.Some(Aggregate127(namedParam6215 : (UInt64(141), UInt8(UInt8(46)), Int32(UInt16(254)), 'a', ((UInt32(100)&127..=UInt32(24)&127:45|1), 10, [false, true, true, true, true, true, true, true, true, false], Option<Bool>.None), [(), (), (), (), (), (), (), (), (), ()])));
    if (true) { try { // block id: 7114
        if (true) { Option<Aggregate127>.Some(Aggregate127()) } else { Option<Aggregate127>.None } 
    } catch (e: Exception) { // block id: 7120
        var1826;
        ();
        let var7124 : ?Aggregate127 = Option<Aggregate127>.Some(Aggregate127(optionalParam6128 : Option<Unit>.None, namedParam6215 : (UInt64(Int8(-97)), UInt8(142), Int32(-61), 'C', ((UInt32(129)&127..UInt32(34)&127:64|1), (-77), [false, true, true, false, true, false, true, true, true, true], Option<Bool>.Some(false)), [(), (), (), (), (), (), (), (), (), ()])));
        var7124
    } } else { try { // block id: 7142
        (var1218, var2400, var339, var1705, false, 24.0, 'S', 34.0, var7153);
        var446 &= Int8(-103);
        var7159
    } finally { // block id: 7195
        var7159
    } } |>var7109
}

public func func2107() : (UInt64, Int16, String, UInt64, Float64) { // block id: 2108
    ((UInt8(128)&127..=UInt8(181)&127:(var383|1))|>func2112)[0]
}

func func2044(optionalParam2045 ! : Array<Rune> = ['i', 't', 'h', 'D', 'n', 'n', 'y', '5', 'C', 'N'], namedParam2047 ! : Aggregate127) : String { // block id: 2048
    let var2062 : Rune = 'U';
    let var2078 : Int16 = Int16(-43);
    try { // block id: 2050
        var var2081 : Int16 = Int16(UInt8(UInt8(UInt8(UInt8(123)))));
        let var2089 : Range<Int16> = (Int16(-37)&127..=Int16(57)&127:(-127)|1);
        match (var1302) {
            case defaultValue => 
                var var2069 : Rune = 't';
                if (var1314) { ['X', 'M', 'z', '4', '1', 'Z', 'j', 'b', 'B', 'h'] } else { ['N', var2062, 'O', var644, 'f', 'c', var2069, '8', var724, 'E'] } ;
                if (true) { (var2078&127..var2081&127:(31|1)) } else { var2089 } 
            
            case _ => 
                ();
                var2081 + Int16(-68);
                var2089
            
        }
    } finally { // block id: 2098
        ();
        [(Int16(-101)&127..=Int16(15)&127:(-112)|1), (Int16(27)&127..=Int16(-75)&127:(-53)|1), (Int16(64)&127..=Int16(-91)&127:(-124)|1), (Int16(11)&127..Int16(-36)&127:(-121)|1), (Int16(80)&127..Int16(-2)&127:(-5)|1), (Int16(-17)&127..Int16(-31)&127:(-43)|1), (Int16(-73)&127..Int16(-62)&127:(-85)|1), (Int16(113)&127..=Int16(-69)&127:30|1), (Int16(-36)&127..=Int16(-5)&127:(-80)|1), (Int16(-12)&127..Int16(-102)&127:64|1)][6]
    };
    func2107()[2]
}

public func func1973(param1974 : (Float32, Array<Unit>, Bool, Range<UInt16>, Range<Int8>)) : Option<Unit> { // block id: 1975
    try { // block id: 1977
        Option<(Unit, Int8, Int32)>.None.getOrThrow();
        [(), (), (), (), (), (), (), (), (), ()][9];
        var1780[0]
    } finally { // block id: 1990
        var1658;
        if (var1314) { // block id: 1994
            var var1996 : (UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>) = (UInt64(77), UInt8(UInt8(Int8(Int8(81)))), Int32(UInt8(190)), '1', ((UInt32(122)&127..UInt32(167)&127:(-26)|1), Int64(Int8(Int8(-6))), [true, true, true, true, true, false, true, false, false, false], (Int16(Int8(74)) as Bool)), [(), (), (), (), (), (), (), (), (), ()]);
            var1996;
            var414;
            var1919
        }
    };
    var var2035 : Option<String> = ((UInt16(Int16(-27))&127..=UInt16(33)&127:(Int64(Int8(-115))|1)) as String);
    match ((var2035 ?? func2044(optionalParam2045 : ['V', 'T', 'O', 'i', 'G', 'D', 'a', 'b', 'i', 'S'], namedParam2047 : Aggregate127(namedParam3049 : var7207, namedParam3050 : UInt8(158))))) {
        case _ => 
            if (var54) { (UInt64(132)&127..=var2957&127:((-103)|1)) } else { var4712 } ;
            var446 |= Int8(36);
            Int32(93)
        
    };
    var589
}

public func func1847(param1848 : Array<Unit>) : Option<Unit> { // block id: 1849
    var var1857 : Int64 = (-90);
    var loopTimeVar1894 : Range<UInt64> = (UInt64(72)&127..=UInt64(UInt8(153))&127:(40|1));
    for (i in loopTimeVar1894 where match (try { // block id: 1853
            (Int32(-122)&127..=Int32(-2)&127:(-41)|1);
            var1857 -= var383;
            var1236
        } finally { // block id: 1861
            var var1863 : Unit = ();
            var1863;
            (UInt64(27)&127..UInt64(171)&127:34|1);
            var1225
        }) {
        case _ : Array<Bool> => 
            false
        
        case caseVar1873 : Array<Unit> => 
            var200;
            var1723
        
        case _ => 
            ();
            var1658;
            false
        
    }) {
        [var54, false, false, false, var1314, var174, false, var174, var1723, var1723]
    };
    if (match (((Float32(98.0), [var1658, var200, var414, (), (), var200, var414, var1658, var1658, var1919], true, var339, (var446&127..=var1926&127:(122|1))), var668, var213, var1932, param1848, var484, (Int32(-106)&127..Int32(-56)&127:(-3)|1))[2]) {
        case _ => 
            var1969;
            false
        
    }) { (if (var1314) { var1932 } else { var1932 } |>func1973) } else { var589 } 
}

func func1560(param1561 : (Range<UInt32>, Int64, Array<Bool>, Option<Bool>)) : Unit { // block id: 1562
    func1564();
    try (resource = Class493()) { // block id: 1835
        var1826 += var1826
    } catch (_) { // block id: 1839
        var1368.var1843
    };
    ((var1780|>func1847) ?? var1658)
}


func func1554(param1555 : UInt8) : (Unit, Int8, Int32) { // block id: 1556
    var var7234 : ((Range<UInt32>, Int64, Array<Bool>, Option<Bool>)) -> Unit = func1560;
    try { // block id: 1558
        var6220|>var7234;
        var loopTimeVar7241 : Int64 = 0;
        do {
            loopTimeVar7241++;

        } while ((var6617) && loopTimeVar7241 < 100 ) ;
        var7248.getOrThrow()
    } finally { // block id: 7250
        ();
        if (var54) { (var6279, var446, var2400) } else { ((), Int8(69), var1705) } 
    }
}

func func1532(param1533 : Option<Array<Int8>>) : Option<Enum1293> { // block id: 1534
    try (resource = Class493()) { // block id: 1536
        try { // block id: 1538
            var200;
            var213;
            Float32(67.0) - Float32(-71.0)
        } catch (e: Exception) { // block id: 1544
            Float32(-35.0)
        };
        var loopTimeVar1550 : Int64 = 0;
        do {
            loopTimeVar1550++;

        } while ((var54) && loopTimeVar1550 < 100 ) 
    } catch (e: Exception) { // block id: 1551

    };
    let var7326 : Int64 = (-62);
    (if (var3595) { // block id: 7265
        ();
        UInt16(196);
        UInt8(142) << ((var1826) & 7)
    } else if (var54) { // block id: 7272
        var1826 %= ((UInt8(106)) | 1);
        var1368;
        var1826 ^ var1826
    } else { // block id: 7280
        var7282;
        (var1932, ['7', var649, '9', '6', 'X', 'x', 'l', var644, 'B', var644], UInt32(47), (var484, [(), (), var5173, var1658, var6279, (), (), (), var1658, var414], var6617, (UInt16(132)&127..=UInt16(227)&127:(var383|1)), (var446&127..var5260&127:(var5219|1))), [(), (), (), (), (), (), (), (), (), ()], var484, (Int32(123)&127..=Int32(-36)&127:(var7326|1)));
        UInt8(5) + UInt8(58)
    }|>func1554)[0];
    Option<Enum1293>.Some((Option<Enum1293>.None ?? try { // block id: 7336
        if (false) { var5703 } else { var5703 } 
    } finally { // block id: 7341
        Enum1293.defaultValue
    }))
}




func func1503(param1504 : (UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>)) : Int64 { // block id: 1505
    let var7357 : Int8 = Int8(-10);
    let var7364 : ??Range<Int8> = Option<Option<Range<Int8>>>.None;
    func func1508(optionalParam1509 ! : Aggregate127 = Aggregate127(), namedParam1511 ! : UInt64, optionalParam1512 ! : Range<UInt16> = (UInt16(Int16(UInt16(236)))&127..UInt16(237)&127:(Int64(UInt64(181))|1)), optionalParam1520 ! : Option<Int32> = (Option<Range<Int8>>.Some((Int8(Int8(32))&127..Int8(51)&127:(Int64(Int8(61))|1))) as Int32)) : Enum1293 { // block id: 1529
        let var7382 : (UInt16) -> Range<Int8> = func1567;
        (func1532(match (var213) {
            case _ => 
                var213;
                Option<Array<Int8>>.Some([Int8(121), Int8(45), Int8(108), Int8(97), Int8(-38), Int8(-95), var7357, var7357, var1926, Int8(-26)])
            
        }) ?? match (var7364) {
            case caseVar7368 => 
                ();
                var1826 |= var1826;
                var1302
            
            case _ => 
                let var7385 : ?Aggregate127 = Option<Aggregate127>.None;
                Enum1293.enumValue5725('2', var5734, var7382, var7385)
            
            case _ => 
                Enum1293.defaultValue
            
        })
    }
;
    match (func1508(optionalParam1509 : Aggregate127(optionalParam6128 : Option<Unit>.None, optionalParam6210 : func2272, namedParam6215 : var2373), namedParam1511 : (Option<UInt64>.Some(var2957) ?? UInt64(152)), optionalParam1520 : (Option<Option<Int32>>.None ?? Option<Int32>.None))) {
        case caseVar7411 : Array<Rune> => 
            let var7419 : Range<Int8> = (Int8(Int8(Int8(Int8(-69))))&127..Int8(UInt8(UInt8(68)))&127:((-96)|1));
            (Float32(74.0), var1780, true, (UInt16(121)&127..=UInt16(203)&127:(-110)|1), var7419)
        
        case _ => 
            var1756 ^= var577;
            var1932
        
    };
    (match (if (var7439) { Option<Int32>.None } else { var5127 } ) {
        case _ => 
            var7448++;
            if (true) { Option<Option<Bool>>.Some(var1236) } else { var7455 } ;
            var7459
        
        case caseVar7465 => 
            var6279;
            var7459
        
        case caseVar7471 => 
            var5173;
            if (true) { Option<Option<Enum1293>>.None } else { Option<Option<Enum1293>>.None } 
        
        case caseVar7480 => 
            var414;
            var7459
        
        case _ => 
            var7459
        
    } ?? ((Option<Option<Option<Enum1293>>>.None ?? Option<Option<Enum1293>>.None) ?? Option<Enum1293>.None));
    var3281
}

public func func1498(param1499 : Range<Int64>) : Int64 { // block id: 1500
    var414;
    let var7498 : ((UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>)) -> Int64 = func1503;
    var var7558 : ?Range<Int8> = ((UInt64(Int32(Int16(-75))), Int16(43), """
~-UF)
?X=U\\
""", UInt64(UInt16(Int16(118))), (-125.0)) as Range<Int8>);
    var var7617 : Rune = 'e';
    (UInt64(97), match (Option<Array<Option<Int32>>>.Some(var7505)) {
        case caseVar7552 : ((UInt64, Int16, String, UInt64, Float64), Array<Array<Rune>>) => 
            if (var1723) { Option<Range<Int8>>.None } else { var7558 } ;
            var1826
        
        case caseVar7573 => 
            UInt8(225) ** (var1826 & 3)
        
        case caseVar7580 : Rune => 
            UInt8(225)
        
        case _ => 
            if (var2292) { Option<Int32>.Some(Int32(-111)) } else { var3939 } ;
            ();
            UInt8(112) | UInt8(222)
        
        case _ => 
            UInt8(72) ** (var1826 & 3)
        
    }, try { // block id: 7601
        ((var484, var1780, var174, var339, var1094), ['f', var649, var649, var7614, var7617, var3017, var7617, 'a', var1716, var3025], var6797, var1932, [var1658, (), var414, (), var6279, (), (), (), (), var6279], Float32(-41.0), (Int32(-63)&127..=Int32(-89)&127:41|1));
        var5173;
        var2400 * Int32(-89)
    } finally { // block id: 7643
        Int32(14)
    }, match (Option<Option<Option<Array<Int8>>>>.None) {
        case _ => 
            var1756 -= var577;
            let var7653 : Rune = '0';
            var7653
        
    }, (var6966, 108, [false, true, false, false, true, false, true, false, false, false], var1236), match (var3531) {
        case caseVar7664 => 
            var2957 >>= ((UInt64(194)) & 7);
            if (var2292) { [(), (), (), (), (), (), (), (), (), ()] } else { [(), (), (), (), (), (), (), (), (), ()] } 
        
        case _ => 
            if (true) { [(), (), (), (), (), (), (), (), (), ()] } else { var1780 } 
        
    })|>var7498
}


func func1494(param1495 : Option<Enum1293>) : Int32 { // block id: 1496
    let var7688 : Option<Range<Int64>> = Option<Range<Int64>>.None;
    let var7698 : ??Range<Int8> = ([(Int16(-82)&127..Int16(96)&127:5|1), (Int16(49)&127..Int16(-73)&127:(-115)|1), (Int16(107)&127..=Int16(90)&127:(-4)|1), (Int16(69)&127..=Int16(11)&127:(-123)|1), (Int16(-15)&127..Int16(-7)&127:(-81)|1), (Int16(123)&127..Int16(-117)&127:35|1), (Int16(37)&127..=Int16(116)&127:(-82)|1), (Int16(-84)&127..=Int16(-106)&127:14|1), (Int16(58)&127..=Int16(123)&127:(-13)|1), (Int16(-78)&127..=Int16(95)&127:(-45)|1)] as Option<Range<Int8>>);
    (try { // block id: 7686
        var7688
    } catch (_) { // block id: 7690
        ();
        Class493();
        var7688
    } finally { // block id: 7694
        if (var7439) { var7698 } else { var7698 } ;
        var213 >>= ((var6797) & 7);
        Option<Range<Int64>>.Some(((-20)&127..(-67)&127:39|1))
    } ?? (var3281&127..var5219&127:(var383|1)))|>func1498;
    let var7715 : ???Array<Int8> = Option<Option<Option<Array<Int8>>>>.None;
    var var7720 : Bool = (Option<Array<Int8>>.Some([Int8(-15), Int8(61), Int8(-119), Int8(-18), Int8(123), Int8(113), Int8(-82), Int8(45), Int8(-117), Int8(57)]) is Option<Bool>);
    let var7731 : ???Array<Int8> = Option<Option<Option<Array<Int8>>>>.None;
    match (try { // block id: 7713
            var7715
        } catch (_) { // block id: 7717
            var7720 ||= var1723;
            var7715
        } finally { // block id: 7726
            if (false) { var7715 } else { var7731 } 
        }) {
        case _ : Array<(Unit, Int8, Int32)> => 
            var1705
        
        case _ => 
            var7741 &&= var54;
            var2957 = UInt64(15);
            Int32(48) * var1705
        
    }
}


func func1394(optionalParam1395 ! : (Range<Int64>) -> Array<Bool> = func502) : Class493 { // block id: 1399
    var var1413 : (Option<Range<Int8>>, Int64, Range<Int16>, Int8, Array<Int8>) = (([false, (Float32(65.0) is (Range<Int64>) -> Array<Bool>), (UInt16(47) is Option<Bool>), false, (Aggregate127() is Option<Enum1293>), (Option<Range<Int8>>.Some((Int8(-114)&127..=Int8(95)&127:((-91)|1))) is Option<Range<Int8>>), (['F', 'U', '5', '0', '4', 'F', 'W', 'b', '2', 'Z'] is Aggregate127), ([true, true, false, true, true, true, true, false, true, true] is Int64), (73 is Int64), false] as Range<Int8>), Int64(UInt8(162)), (Int16(Int16(-11))&127..Int16(21)&127:(Int64(UInt16(Int16(-128)))|1)), Int8(116), [Int8(Int8(UInt8(197))), Int8(43), Int8(Int8(18)), Int8(-48), Int8(-81), Int8(Int8(Int8(25))), Int8(-36), Int8(Int8(Int8(-98))), Int8(89), Int8(UInt8(133))]);
    let var7751 : (Option<Enum1293>) -> Int32 = func1494;
    (match ([['c', '6', 'U', 'T', '4', 'x', 'O', 'H', 'R', 'O'], ['t', 'l', 'K', 'H', 's', 'b', 'B', 'a', 'F', 'Y'], ['U', 'a', 'e', 'R', 'd', 'V', 'M', 'y', 'a', 'I'], ['r', 'b', 'X', 'q', 'V', 'Y', 'g', 'Q', '3', 'K'], ['W', '4', '2', 'c', 'A', 'I', 'K', 'W', 's', '0'], ['1', 'X', 'E', 'x', 'Y', 'O', 'n', 'W', 'y', 'e'], ['q', 'K', 'z', 'k', 't', 'D', '4', 'Y', 'P', 'a'], ['s', '0', 'Y', 'S', 'B', 'G', '6', 'Y', 'W', 'b'], ['W', 'O', 'h', 'J', '1', 'g', 'N', 'y', 'Z', 'v'], ['Z', 'Q', 'k', 'z', 'Q', 'w', 'F', 'O', '6', 'i']]) {
        case caseVar1409 : UInt32 => 
            var414;
            var1413;
            let var1471 : ?Int32 = ((Int8(Int8(-103))&127..Int8(Int8(98))&127:(110|1)) as Int32);
            if (var1314) { Option<Int32>.None } else { var1471 } 
        
        case _ => 
            var213 %= ((UInt32(243)) | 1);
            let var1487 : ?Int32 = (() as Int32);
            if (false) { var1487 } else { var1491 } 
        
    } ?? ((var7459 ?? Option<Enum1293>.Some(var5703))|>var7751));
    (var7763 ?? try { // block id: 7766
        var1188;
        var5245;
        (UInt32(76)&127..=UInt32(3)&127:59|1)
    } finally { // block id: 7770
        var7448 += Int16(69);
        var6966
    });
    Class493()
}


public func func1380(param1381 : Range<Int16>) : Int8 { // block id: 1382
    var loopTimeVar7783 : Range<UInt64> = (UInt64(212)&127..UInt64(83)&127:(Int64(UInt32(UInt32(64)))|1));
    for (i in loopTimeVar7783 where var131.func1387(var1188)) {
        var1218
    };
    let var7856 : Rune = 'W';
    match {
        case try { // block id: 7792
        var1919;
        true
    } catch (_) { // block id: 7795
        true
    } finally { // block id: 7797
        var1932;
        ();
        false
    } => 
        var loopTimeVar7808 : Int64 = 0;
        while ((false) && loopTimeVar7808 < 100 ) {
            loopTimeVar7808++;
            ();
            ()
        };
        try (resource = Class493()) { // block id: 7810
            ();
            var200
        } catch (_) { // block id: 7813
            var414;
            (15&127..65&127:(var5219|1));
            ()
        };
        if (true) { "XI*+XjYmsp" } else { var1969 } 
        case _ => 
        if (true) { // block id: 7827
            if (false) { (UInt64(222), var7448, var1969, var2957, 98.0) } else { (UInt64(145), Int16(29), ###"pa{2)<*ru4q"###, UInt64(181), (-4.0)) } ;
            if (false) { var3025 } else { '0' } 
        } else { // block id: 7846
            if (true) { var3531 } else { Option<(UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>)>.Some(var2373) } ;
            ();
            if (var7741) { var7856 } else { 'L' } 
        };
        (Option<Unit>.None ?? ());
        try { // block id: 7863
            let var7865 : Array<Rune> = ['W', 'u', 'U', 'u', 'v', 'B', '2', '8', 'S', 'k'];
            var7865;
            Option<Range<UInt32>>.None;
            if (false) { var1969 } else { var1969 } 
        } finally { // block id: 7872
            if (true) { (Int16(12)&127..Int16(-41)&127:36|1) } else { (var5434&127..=Int16(105)&127:(34|1)) } ;
            var var7888 : (Range<Int64>, Bool, Range<UInt8>, Float32) = ((114&127..=19&127:(-99)|1), ((Option<UInt64>.Some(UInt64(199)) as Range<Int64>) is Option<(UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>)>), (UInt8(0)&127..UInt8(210)&127:(-43)|1), Float32(-36.0));
            if (var174) { ((49&127..=22&127:(-4)|1), true, var1218, Float32(-114.0)) } else { var7888 } ;
            if (true) { var1969 } else { var7901 } 
        }
    };
    let var7946 : Bool = (((-49)&127..=45&127:(Int64(Int32(Int32(121)))|1)) is (Option<(UInt64, UInt8, Int32, Rune, (Range<UInt32>, Int64, Array<Bool>, Option<Bool>), Array<Unit>)>) -> Unit);
    var var8041 : String = "L$G1&T[wcJ";
    if ((match ([false, false, true, false, true, false, false, false, true, true]) {
        case _ => 
            if (false) { Option<Array<Option<Int32>>>.Some(var7505) } else { Option<Array<Option<Int32>>>.Some([Option<Int32>.None, Option<Int32>.None, var3939, Option<Int32>.Some(var7921), var3939, Option<Int32>.Some(var1705), var1491, var1491, var4004, var1491]) } ;
            Option<Bool>.None
        
        case caseVar7933 : Array<Array<Rune>> => 
            var5219 /= (((-127)) | 1);
            var7448;
            Option<Bool>.None
        
        case caseVar7942 => 
            if (var7946) { Option<Bool>.Some(false) } else { Option<Bool>.None } 
        
        case _ => 
            ();
            if (false) { Option<Range<UInt32>>.None } else { Option<Range<UInt32>>.Some((UInt32(46)&127..=UInt32(93)&127:(-62)|1)) } ;
            if (false) { Option<Bool>.None } else { var298 } 
        
    } ?? (var7971 is (Unit, Int8, Int32)))) { // block id: 7973
        var loopTimeVar7978 : Int64 = 0;
        do {
            loopTimeVar7978++;

        } while ((false) && loopTimeVar7978 < 100 ) ;
        var174 ||= false;
        var var8002 : Int64 = Int64(Int16(UInt16(246)));
        try { // block id: 7983
            var200;
            var5219 |= var5219;
            var446
        } catch (_) { // block id: 7989
            let var7992 : ?Range<Int8> = Option<Range<Int8>>.None;
            (var7992, (-9), (var7997&127..=Int16(-128)&127:(var8002|1)), Int8(-24), [Int8(7), Int8(90), Int8(-68), Int8(-93), Int8(-38), Int8(103), Int8(121), Int8(98), Int8(17), Int8(-56)]);
            [var1153, Int8(-70), var1926, var5260, Int8(-49), var8015, Int8(-59), Int8(10), Int8(-23), Int8(-49)];
            var446
        }
    } else { // block id: 8022
        match ((var7009, Int16(38), """
=?Wf(
A,D`U
""", var7009, 36.0)) {
            case _ => 
                var484 **= Float32(Int32(Float32(122.0)) & 3)
            
            case _ => 
                if (true) { var8041 } else { "ss#F7~ca\"/" } ;
                let var8049 : ?Aggregate127 = Option<Aggregate127>.None;
                if (true) { Option<Aggregate127>.Some(var131) } else { var8049 } ;
                var414
            
        };
        var1826;
        (Option<Int8>.None ?? Int8(-3))
    }
}

public func func1254(param1255 : Option<Bool>) : Array<Int8> { // block id: 1256
    var var1265 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    try { // block id: 1259
        ();
        Int32(-22);
        if (var54) { var1265 } else { [(), (), (), (), (), (), (), (), (), ()] } 
    } finally { // block id: 1278
        ();
        (UInt32(183)&127..var213&127:(var383|1));
        [(), (), (), (), (), (), (), (), (), ()]
    }[3];
    Int32(77);
    var var1319 : Array<Bool> = [true, false, true, true, true, false, false, false, false, true];
    var var1341 : Int32 = Int32(38);
    let var1355 : ?Array<Int8> = (Aggregate127() as Array<Int8>);
    var var8061 : (Range<Int16>) -> Int8 = func1380;
    var var8078 : ?Range<Int8> = Option<Range<Int8>>.None;
    (match ((Option<Enum1293>.Some(var1302) ?? var1302)) {
        case caseVar1307 : Int64 => 
            var213 **= (UInt32(212) & 3);
            if (var1314) { [false, false, false, true, true, false, false, true, true, false] } else { var1319 } ;
            let var1324 : Int8 = Int8(32);
            Option<Array<Int8>>.Some([var1324, var1153, var1153, var446, var1324, var446, Int8(-92), Int8(81), var446, Int8(119)])
        
        case caseVar1337 => 
            var1341 += Int32(-64);
            var200;
            if (var1314) { Option<Array<Int8>>.None } else { Option<Array<Int8>>.None } 
        
        case defaultValue => 
            var414;
            Float32(7.0);
            var1355
        
        case _ => 
            var484;
            if (false) { Option<Array<Int8>>.None } else { var1355 } 
        
    } ?? [var1368.var1371, var1153, Class493.var1377, ((Int16(-82)&127..Int16(-111)&127:((-125)|1))|>var8061), if (var1723) { // block id: 8069
        if (false) { var5703 } else { Enum1293.defaultValue } ;
        if (var6617) { (var8078, var5219, (var5434&127..=Int16(49)&127:(var383|1)), var8015, [Int8(-125), var1926, var8015, Int8(58), var1926, Int8(11), var8015, Int8(81), Int8(-24), var1926]) } else { var8098 } ;
        var1153
    } else if (true) { // block id: 8110
        (var4657, var446, var2400);
        var2400 = Int32(-28);
        var1153
    } else { // block id: 8119
        if (var1723) { var7207 } else { var7207 } ;
        let var8127 : ???Array<Int8> = Option<Option<Option<Array<Int8>>>>.Some(Option<Option<Array<Int8>>>.Some(Option<Array<Int8>>.None));
        let var8133 : ??Array<Int8> = Option<Option<Array<Int8>>>.Some(Option<Array<Int8>>.None);
        if (var6617) { var8127 } else { Option<Option<Option<Array<Int8>>>>.Some(var8133) } ;
        Int8(3)
    }, try { // block id: 8138
        let var8154 : Unit = ();
        if (var2292) { (var484, [var8145, (), var4657, (), var200, (), (), var8154, var8154, ()], var3595, var339, (var446&127..=Int8(65)&127:(var3281|1))) } else { var1932 } ;
        -var446
    } catch (e: Exception) { // block id: 8167
        var1153
    } finally { // block id: 8169
        Int8(-38)
    }, var8015, Int8(Int8(44)), Int8(var1826), if (var174) { // block id: 8178
        var var8180 : ?Array<Option<Int32>> = Option<Array<Option<Int32>>>.None;
        var8180;
        Int8(103)
    } else if (var3595) { // block id: 8184
        (((-45)&127..=42&127:36|1), false, (UInt8(31)&127..UInt8(23)&127:(-102)|1), var484);
        Int8(-6) & var8015
    } else { // block id: 8193
        var589;
        var4657;
        var5260 << ((var5260) & 7)
    }])
}

func func1249(param1250 : (Option<Range<Int8>>, Int64, Range<Int16>, Int8, Array<Int8>)) : Bool { // block id: 1251
    match ((Option<Bool>.None|>func1254)) {
        case caseVar8203 : (Range<Int64>, Bool, Range<UInt8>, Float32) => 
            var1756 < var577
        
        case _ : Option<Option<Option<Range<Int8>>>> => 
            var1723
        
        case caseVar8214 : Int32 => 
            (var1658, var5260, var8220);
            Option<(Unit, Int8, Int32)>.Some((var8145, var446, var2343));
            var174
        
        case _ => 
            var2957 < UInt64(90)
        
        case _ => 
            var414;
            true
        
    }
}

public func func438() : Bool { // block id: 439
    var var1202 : Unit = ();
    Int16([var446, var446, Int8(105), Int8(51), var446, var446, var446, Int8(-2), Int8(83), Int8(-75)][4]) % ((func2272((), match (var1188) {
        case caseVar1192 : Int16 => 
            var var1196 : Int16 = Int16(Int8(UInt8(0)));
            var1196 **= (Int16(-49) & 3);
            var1202;
            if (var174) { var298 } else { var298 } 
        
        case _ => 
            ((var383&127..=(-50)&127:(var383|1)), var174, var1218, var484);
            if (false) { var298 } else { var1225 } 
        
        case _ : (Option<Range<Int8>>, Int64, Range<Int16>, Int8, Array<Int8>) => 
            var414;
            var1236
        
        case _ => 
            var var1244 : Array<Bool> = [true, false, false, false, false, true, false, true, false, false];
            if (var54) { [false, false, true, true, true, true, true, false, true, false] } else { var1244 } ;
            ();
            var1225
        
    })) | 1);
    var var8243 : ((Option<Range<Int8>>, Int64, Range<Int16>, Int8, Array<Int8>)) -> Bool = func1249;
    try { // block id: 8246
        var8098
    } finally { // block id: 8248
        var200;
        ();
        if (true) { var8098 } else { var8098 } 
    }|>var8243
}



func func432(param433 : Aggregate127) : Option<Unit> { // block id: 434
    var loopTimeVar8350 : Int64 = 0;
    do {
        loopTimeVar8350++;
        match (var8284) {
            case _ => 
                var484 **= Float32(Int32(Float32(-36.0)) & 3)
            
        }
    } while ((if (func438()) { // block id: 8255
        ();
        (UInt8(1)&127..=UInt8(8)&127:(var8261|1));
        false && var174
    } else if ((Option<Bool>.None ?? var6617)) { // block id: 8270
        ();
        if (true) { Option<Enum1293>.Some(var5703) } else { var3189 } ;
        true
    } else { // block id: 8278
        var7921;
        var7439
    }) && loopTimeVar8350 < 100 ) ;
    try { // block id: 8352
        Option<Option<Unit>>.None.getOrThrow()
    } finally { // block id: 8359
        (Option<Option<Option<Int32>>>.None ?? var8367);
        try { // block id: 8395
            var4657;
            var8398
        } catch (_) { // block id: 8411
            [var3690, (Int16(115)&127..=var7997&127:((-14)|1)), (Int16(-19)&127..var7997&127:(var8261|1)), (Int16(85)&127..Int16(79)&127:82|1), (var5434&127..var7448&127:(43|1)), (Int16(-25)&127..=Int16(8)&127:(var383|1)), (Int16(-27)&127..var7448&127:(var3281|1)), (Int16(-62)&127..Int16(0)&127:(-117)|1), (var7997&127..Int16(111)&127:(115|1)), var3690];
            var8398
        };
        var589
    }
}

func func335(param336 : (Range<UInt32>, Int64, Array<Bool>, Option<Bool>)) : (Range<UInt32>, Int64, Array<Bool>, Option<Bool>) { // block id: 337
    var339;
    var var350 : Aggregate127 = Aggregate127();
    let var357 : Range<UInt64> = (UInt64(246)&127..UInt64(155)&127:(-88)|1);
    var loopTimeVar427 : Int64 = 0;
    do {
        loopTimeVar427++;
        var var379 : UInt16 = UInt16(64);
        match (()) {
            case caseVar375 : UInt32 => 
                (var379&127..=UInt16(251)&127:(var383|1));
                ();
                var200
            
            case _ => 
                var var393 : (Float32, Array<Unit>, Bool, Range<UInt16>, Range<Int8>) = (Float32(6.0), [(), (), (), (), (), (), (), (), (), ()], false, (UInt16(94)&127..UInt16(UInt16(UInt16(42)))&127:(Int64(UInt8(Int8(-116)))|1)), (Int8(123)&127..Int8(-27)&127:(-102)|1));
                if (true) { var393 } else { var393 } ;
                ()
            
            case caseVar411 : Range<Int64> => 
                var414;
                var414;
                var54 ||= false
            
            case _ => 
                var174 = false;
                var414
            
        }
    } while ((match {
        case var350.var353 => 
        var357;
        false
        case var174 => 
        Int8(53);
        var54
        case _ => 
        var var367 : Bool = ('m' is UInt64);
        !var367
    }) && loopTimeVar427 < 100 ) ;
    let var8444 : (Aggregate127) -> Option<Unit> = func432;
    var var8496 : ?Bool = Option<Bool>.None;
    match ((var131|>var8444)) {
        case _ => 
            ((UInt8(25)&127..UInt8(127)&127:((-102)|1)), var7921, (UInt16(200)&127..=var577&127:(var383|1)), Int32(-14), false, var1713, 'D', (-27.0), var1713);
            var2373
        
        case _ => 
            ();
            var var8471 : Unit = ();
            var8471;
            (var7009, var1826, Int32(-96), var4590, ((UInt32(121)&127..=var213&127:(84|1)), 121, [var1314, true, var54, var1314, true, false, true, var7741, true, false], var8496), var1780)
        
    }[4]
}

public func func244(param245 : Range<Int32>) : Option<Bool> { // block id: 246
    var var252 : Int64 = Int64(UInt32(82));
    var var271 : Array<Rune> = ['w', 'q', 'i', 'W', 'A', 'M', 'g', 'i', 'h', 'p'];
    let var286 : Rune = 'L';
    if (match (var252) {
        case -42 | 68 => 
            var200;
            true
        
        case _ => 
            var var264 : Int32 = Int32(-99);
            var264 += Int32(52);
            var174
        
    }) { (if (var174) { var271 } else { ['C', var286, var286, 'C', '0', var286, var286, 'Z', var286, var286] } ) } else { match (var298) {
        case _ => 
            var271
        
        case caseVar306 => 
            ['a', 'O', 'H', 'r', '5', 'z', 'L', 'D', 't', 'F']
        
        case _ => 
            if (var174) { (Int32(103)&127..=Int32(19)&127:(var252|1)) } else { param245 } ;
            ();
            ['m', '4', 'q', 'L', '3', 'I', 'q', 'j', '6', 'l']
        
        case caseVar323 => 
            var271
        
        case _ => 
            (-22);
            ();
            ['M', 'B', 'y', 'o', 'B', '0', 'x', 'b', 'K', 'T']
        
    } } [7];
    var var8501 : ((Range<UInt32>, Int64, Array<Bool>, Option<Bool>)) -> (Range<UInt32>, Int64, Array<Bool>, Option<Bool>) = func335;
    var var8558 : (Range<UInt32>, Int64, Array<Bool>, Option<Bool>) = ((UInt32(148)&127..=UInt32(18)&127:84|1), (-35), [false, false, true, true, true, false, true, true, false, true], ((UInt64(UInt8(227)), Int16(UInt16(114)), ###"NV6#9E),We"###, UInt64(185), 71.0) as Bool));
    (match (var8505) {
        case _ => 
            if (true) { var6220 } else { var6220 } 
        
        case _ : Option<(Unit, Int8, Int32)> => 
            var4657;
            var8555;
            var8558
        
        case _ => 
            if (var174) { ((var6797&127..=var6797&127:(117|1)), var3281, [false, false, false, true, true, true, false, false, false, false], Option<Bool>.Some(var7741)) } else { var6220 } 
        
    }|>var8501)[3]
}




func func8(param9 : String) : (Unit, Int8, Int32) { // block id: 10
    let var43 : (Range<Int64>, Bool, Range<UInt8>, Float32) = (((-5)&127..=(-18)&127:121|1), (Int32(30) is Range<Int32>), (UInt8(29)&127..=UInt8(12)&127:99|1), Float32(23.0));
    let var88 : Bool = true;
    let var100 : Int64 = (-92);
    let var189 : UInt32 = UInt32(58);
    func func138(namedParam139 ! : Float64, namedParam140 ! : UInt8, namedParam141 ! : Range<Int32>) : Option<Unit> { // block id: 142
        var loopTimeVar186 : Int64 = 0;
        while ((if (var88) { [var88, var88, var88, var88, var88, var54, true, true, false, var88] } else { [false, var88, var88, var88, true, false, var88, false, false, false] } [2]) && loopTimeVar186 < 100 ) {
            loopTimeVar186++;
            var loopTimeVar177 : Range<UInt64> = (UInt64(112)&127..UInt64(165)&127:(Int64(UInt8(Int8(100)))|1));
            for (i in loopTimeVar177 where var174) {

            };
            ()
        };
        let var220 : Unit = ();
        match (var189) {
            case 181 | 94 | 89 | 122 => 
                var var196 : Int32 = Int32(116);
                var196 %= ((Int32(-64)) | 1);
                var200
            
            case 245 => 
                var var207 : UInt64 = UInt64(UInt8(UInt8(192)));
                var207--;
                var213 -= var189
            
            case _ : Array<Bool> => 
                var220;
                (UInt64(250)&127..=UInt64(111)&127:85|1);
                var var225 : Float64 = Float64(Float64(Float32(Float32(Float32(57.0)))));
                var225 += (-68.0)
            
            case _ => 
                var174 = var88
            
        };
        if ((((var8220&127..=var1705&127:(var3281|1))|>func244) ?? var7741)) { Option<Unit>.None } else { try { // block id: 8595
            var1919;
            Option<Unit>.Some(var414)
        } catch (_) { // block id: 8599
            ();
            var577;
            Option<Unit>.None
        } } 
    }
;
    let var8646 : Option<Range<Int16>> = (Option<Option<Option<Enum1293>>>.Some(Option<Option<Enum1293>>.None) as Range<Int16>);
    func func17(namedParam18 ! : Unit, optionalParam19 ! : Int32 = Int32(36), optionalParam21 ! : UInt8 = UInt8(UInt8(UInt8(UInt8(Int8(40))))), namedParam27 ! : Float32) : Option<Unit> { // block id: 28
        if (var43[1]) { [(), (), (), (), (), (), (), (), (), ()] } else { (if (var54) { [(), (), (), (), (), (), (), (), (), ()] } else { [(), (), (), (), (), (), (), (), (), ()] } ) } [2];
        let var68 : ?Unit = ("GSv~uy)-rw" as Unit);
        let var81 : Unit = ();
        var var104 : Rune = '9';
        if (if (var54) { // block id: 64
            if (var54) { var68 } else { var68 } ;
            let var97 : Int8 = Int8(-64);
            (Float32(117.0), [namedParam18, (), (), (), (), var81, (), namedParam18, (), var81], var88, (UInt16(252)&127..=UInt16(219)&127:(123|1)), (Int8(-57)&127..=var97&127:(var100|1)))
        } else { // block id: 102
            var104;
            let var109 : Array<Unit> = Array<Unit>(10){ i => () };
            (Float32(-63.0), var109, var54, (UInt16(129)&127..UInt16(249)&127:51|1), (Int8(77)&127..Int8(79)&127:(-65)|1))
        }[2]) { // block id: 125
            var131.var134
        } else if (match (func138(namedParam139 : (-67.0), namedParam140 : var1826, namedParam141 : (Int32(99)&127..Int32(-7)&127:(-29)|1))) {
            case _ : Array<Range<Int16>> => 
                var8220 += var2400;
                ();
                var1723
            
            case _ => 
                var1723
            
        }) { // block id: 8617
            var var8633 : ?Array<Int8> = (Class493() as Array<Int8>);
            if (var7439) { Option<Array<Int8>>.Some([var446, Int8(125), Int8(-82), var1153, var8015, var446, var1153, Int8(96), Int8(-63), var1153]) } else { var8633 } ;
            var7997++
        };
        try { // block id: 8639
            var8646.getOrThrow();
            Option<Class493>.Some(Class493()).getOrThrow();
            if (false) { Option<Unit>.None } else { var589 } 
        } finally { // block id: 8661
            (Option<Unit>.None ?? ());
            (var8671 ?? Option<Unit>.None);
            Option<Unit>.None
        }
    }
;
    var loopTimeVar8684 : Int64 = 0;
    var var8691 : Bool = false;
    (func17(namedParam18 : while ((false) && loopTimeVar8684 < 100 ) {
        loopTimeVar8684++;
        if (false) { var8367 } else { var8367 } ;
        ()
    }, optionalParam19 : if (true) { // block id: 8687
        var200;
        var8220
    } else if (var8691) { // block id: 8693
        var484 = var484;
        Int32(47) + Int32(-66)
    } else { // block id: 8700
        Int32(81) | var2343
    }, optionalParam21 : if (var8691) { // block id: 8706
        ();
        var6797 &= var189;
        UInt8(71)
    } else { // block id: 8712
        if (var54) { Option<Class493>.None } else { Option<Class493>.None } ;
        var1826
    }, namedParam27 : Float32(-9.0)) ?? if (var3595) { // block id: 8721

    } else if ((var298 ?? var88)) { // block id: 8725
        var1368;
        var1658;
        ()
    });
    let var8754 : Float64 = Float64(Float64(Float32(-101.0)));
    if ((Option<Class493>.None is Option<Option<(Unit, Int8, Int32)>>)) { // block id: 8732
        ()
    } else if (match {
        case var54 => 
        ((-39)&127..69&127:63|1);
        var8691
        case try { // block id: 8740
        true
    } finally { // block id: 8742
        !false
    } => 
        if (var1723) { (UInt64(195), Int16(120), var7901, var2957, var8754) } else { var3867 } ;
        var3595
        case _ => 
        var213 >= UInt32(91)
    }) { // block id: 8764
        var5173;
        var2957 -= var2957
    };
    var var8774 : Bool = true;
    var loopTimeVar8781 : Range<UInt64> = (UInt64(UInt32(Int16(-97)))&127..=UInt64(UInt16(55))&127:(Int64(Int64(UInt32(UInt8(41))))|1));
    (for (i in loopTimeVar8781 where (var1236 ?? var8774)) {
        var200;
        var var8779 : Unit = ();
        var8779
    }, match (UInt8(29)) {
        case 33 | 107 | 108 | 84 => 
            var1368;
            var6279;
            Int8(73) ^ var1153
        
        case 197 | 219 => 
            UInt32(156);
            var8809 << ((Int8(-92)) & 7)
        
        case _ => 
            var3281 |= (-81);
            ();
            var8015 >> ((Int8(-85)) & 7)
        
    } >> ((var1926) & 7), ((var8367 ?? Option<Int32>.None) ?? (Option<Int32>.None ?? var1705)))
}

main(): Int64 {
    try {
        var var8830 : (String) -> (Unit, Int8, Int32) = func8;
        (###"/Yf,,U4}%|"###|>var8830)[0];
        try { // block id: 8835
            if (true) { Option<Array<Bool>>.None } else { var8840 } ;
            var383
        } finally { // block id: 8855
            var var8857 : Int64 = (-57);
            var8857
        }
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var213*var213), 64)
        crccheck.updateBuffer(UInt64(var383*var383), 64)
        crccheck.updateBuffer(UInt64(var446*var446), 64)
        crccheck.updateBuffer(UInt64(var577*var577), 64)
        crccheck.updateBuffer(UInt64(var1153*var1153), 64)
        crccheck.updateBuffer(UInt64(var1705*var1705), 64)
        crccheck.updateBuffer(UInt64(var1756*var1756), 64)
        crccheck.updateBuffer(UInt64(var1826*var1826), 64)
        crccheck.updateBuffer(UInt64(var1926*var1926), 64)
        crccheck.updateBuffer(UInt64(var2343*var2343), 64)
        crccheck.updateBuffer(UInt64(var2400*var2400), 64)
        crccheck.updateBuffer(UInt64(var2957*var2957), 64)
        crccheck.updateBuffer(UInt64(var3281*var3281), 64)
        crccheck.updateBuffer(UInt64(var5219*var5219), 64)
        crccheck.updateBuffer(UInt64(var5260*var5260), 64)
        crccheck.updateBuffer(UInt64(var5434*var5434), 64)
        crccheck.updateBuffer(UInt64(var6797*var6797), 64)
        crccheck.updateBuffer(UInt64(var7009*var7009), 64)
        crccheck.updateBuffer(UInt64(var7448*var7448), 64)
        crccheck.updateBuffer(UInt64(var7921*var7921), 64)
        crccheck.updateBuffer(UInt64(var7997*var7997), 64)
        crccheck.updateBuffer(UInt64(var8015*var8015), 64)
        crccheck.updateBuffer(UInt64(var8220*var8220), 64)
        crccheck.updateBuffer(UInt64(var8261*var8261), 64)
        crccheck.updateBuffer(UInt64(var8809*var8809), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_expected_while_in_do_while
// ASSERT: scan parse_unexpected_declaration_in_scope
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_expected_left_brace
// ASSERT: scan parse_expected_case


