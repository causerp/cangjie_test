/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output


public var var7 : Bool = ((-125.0) is UInt8)
var var40 : Int32 = Int32(Int16(Int16(-15)))
let var117 : (Range<UInt32>, UInt64, Unit) = ((UInt32(94)&127..UInt32(53)&127:23|1), UInt64(251), ())
public let var167 : UInt16 = UInt16(UInt8(UInt8(UInt8(79))))
public var var195 : UInt16 = UInt16(Int16(-50))
public var var456 : UInt64 = UInt64(UInt64(Int8(Int8(UInt8(33)))))
public var var469 : Range<UInt32> = (UInt32(113)&127..UInt32(UInt8(223))&127:(Int64(122)|1))
public var var495 : Range<Int32> = (Int32(Int8(51))&127..=Int32(Int8(81))&127:((-108)|1))
public var var571 : Array<Int32> = [Int32(Int8(UInt8(134))), Int32(58), Int32(UInt8(UInt8(UInt8(6)))), Int32(-52), Int32(-115), Int32(-36), Int32(58), Int32(-65), Int32(UInt16(25)), Int32(73)]
public let var594 : Unit = ()
public let var621 : Int32 = Int32(Int8(UInt8(Int8(UInt8(20)))))
public var var632 : Bool = false
var var658 : ?Range<UInt8> = (UInt8(8) as Range<UInt8>)
public var var741 : UInt8 = UInt8(151)
public var var808 : ??Range<UInt8> = ([Int8(UInt8(81)), Int8(Int8(UInt8(111))), Int8(Int8(78)), Int8(UInt8(110)), Int8(Int8(UInt8(145))), Int8(Int8(UInt8(113))), Int8(9), Int8(53), Int8(-48), Int8(Int8(Int8(22)))] as Option<Range<UInt8>>)
public var var924 : ??Array<Unit> = Option<Option<Array<Unit>>>.None
public let var958 : UInt32 = UInt32(251)
var var992 : Array<Int8> = [Int8(20), Int8(-64), Int8(57), Int8(-98), Int8(-28), Int8(72), Int8(-124), Int8(35), Int8(-122), Int8(97)]
var var1021 : Array<Range<Int16>> = Array<Range<Int16>>(10){ i => (Int16(-26)&127..=Int16(-89)&127:26|1) }
let var1065 : Int8 = Int8(-36)
let var1123 : Int64 = (-49)
var var1139 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
let var1214 : Array<Bool> = [false, true, true, true, true, false, true, false, false, true]
public var var1313 : Enum1217 = Enum1217.defaultValue
var var1327 : Bool = ([Int32(-119), Int32(UInt16(59)), Int32(-15), Int32(UInt16(212)), Int32(Int8(98)), Int32(-47), Int32(Int16(Int8(-28))), Int32(Int8(-22)), Int32(Int8(10)), Int32(20)] is (Array<Unit>, Array<Unit>, Array<Int8>))
public var var1361 : (Int32, String, Range<UInt64>, Int64, Enum1217, Range<UInt16>) = (Int32(45), "b}u<^<jJKk", (UInt64(70)&127..=UInt64(41)&127:(-43)|1), Int64(Int32(UInt16(137))), Enum1217.defaultValue, (UInt16(124)&127..=UInt16(205)&127:(-97)|1))
public let var1408 : ?(Unit, String) = ([false, true, false, true, false, true, false, true, true, false] as (Unit, String))
public let var1415 : (Unit, String) = ((), """
Z\\h9~
k~A>&
""")
public let var1440 : (Range<Int8>, Range<Int16>, UInt32, Range<Int16>, Float64, UInt16) = ((Int8(UInt8(241))&127..=Int8(UInt8(Int8(87)))&127:(Int64(UInt32(178))|1)), (Int16(Int16(-116))&127..=Int16(-25)&127:(97|1)), UInt32(UInt32(115)), (Int16(25)&127..Int16(-127)&127:86|1), (-106.0), UInt16(237))
let var1478 : Bool = true
public var var1557 : Float64 = 29.0
public let var1564 : String = "U[^CteLZn&"
public var var1702 : ?Range<Int16> = Option<Range<Int16>>.None
public var var1735 : Bool = ((Int32(Int16(115)), """
<$5%;
x ${var1564}'b${var1564}7
""", (UInt64(110)&127..UInt64(42)&127:78|1), Int64(Int64(Int8(104))), Enum1217.defaultValue, (UInt16(192)&127..=UInt16(58)&127:(-94)|1)) is Array<Bool>)
public let var1953 : Int16 = Int16(115)
var var2023 : Float32 = Float32(Float32(-78.0))
let var2040 : ??(Unit, String) = Option<Option<(Unit, String)>>.None
var var2065 : Range<Int64> = (44&127..(-51)&127:(-42)|1)
var var2082 : Bool = false
public let var2152 : Rune = 'i'
public var var2190 : UInt32 = UInt32(80)
let var2263 : ?(Unit, String) = ((-4.0) as (Unit, String))
public let var2294 : Range<Int16> = (Int16(122)&127..=Int16(65)&127:(-69)|1)
var var2352 : ??(Unit, String) = Option<Option<(Unit, String)>>.None
var var2437 : Float64 = (-15.0)
public let var2442 : ((Range<UInt32>, UInt64, Unit), Range<UInt32>, String, Range<Int64>, Option<Bool>, (Range<UInt32>, UInt64, Unit), UInt8) = (((UInt32(146)&127..=UInt32(13)&127:(Int64(14)|1)), UInt64(51), ()), (UInt32(UInt8(249))&127..=UInt32(102)&127:((-16)|1)), "|PcHw${var1564}WI${var1564}>;E", (Int64(UInt32(UInt16(107)))&127..=Int64(Int16(Int8(-10)))&127:(Int64(Int16(UInt16(194)))|1)), (Option<Option<Array<Bool>>>.None as Bool), ((UInt32(133)&127..UInt32(Int16(125))&127:(84|1)), UInt64(119), ()), UInt8(158))
public var var2520 : Int16 = Int16(-2)
let var2540 : UInt32 = UInt32(UInt8(55))
public let var2573 : ?Rune = (Int16(Int16(UInt16(Int16(-33)))) as Rune)
public var var2615 : Option<Int8> = Option<Int8>.None
var var2764 : Array<UInt64> = Array<UInt64>(10){ i => UInt64(58) }
public var var2856 : Unit = ()
var var2884 : ?Array<Unit> = ((Int32(9) as Range<UInt16>) as Array<Unit>)
public let var2897 : Unit = ()
public let var3001 : Range<UInt8> = (UInt8(Int8(Int8(Int8(11))))&127..=UInt8(UInt8(UInt8(44)))&127:(Int64(Int32(59))|1))
public var var3026 : Option<UInt64> = Option<UInt64>.None
var var3049 : ?Range<UInt8> = Option<Range<UInt8>>.None
public var var3101 : Int32 = Int32(97)
var var3367 : Float32 = Float32(Float32(Float32(124.0)))
public var var3376 : ??Array<Unit> = ([UInt64(130), UInt64(81), UInt64(213), UInt64(60), UInt64(149), UInt64(37), UInt64(52), UInt64(38), UInt64(239), UInt64(159)] as Option<Array<Unit>>)
public var var3409 : ?Array<Unit> = (((((Int8(62)&127..Int8(-103)&127:89|1), (Int16(-7)&127..Int16(120)&127:10|1), UInt32(90), (Int16(-63)&127..=Int16(-22)&127:(94|1)), 112.0, UInt16(179)) as Range<UInt8>) as Unit) as Array<Unit>)
let var3635 : Range<UInt32> = (UInt32(UInt8(161))&127..UInt32(Int32(UInt8(Int8(-75))))&127:(Int64(UInt32(223))|1))
public var var3661 : Bool = (Option<Float32>.None is (Array<Unit>, Array<Unit>, Array<Int8>))
let var3755 : Option<Int64> = (Option<Unit>.None as Int64)



public func func124(param125 : Option<UInt16>) : Int8 { // block id: 126
    let var139 : ???UInt16 = ([Int8(Int8(-111)), Int8(43), Int8(-15), Int8(24), Int8(UInt8(33)), Int8(Int8(126)), Int8(UInt8(Int8(-100))), Int8(-15), Int8(UInt8(116)), Int8(-103)] as Option<Option<UInt16>>);
    let var159 : ??UInt16 = (() as Option<UInt16>);
    var var177 : Float64 = (-104.0);
    let var181 : Int8 = Int8(120);
    var var184 : Unit = ();
    match (((var139 ?? var159) ?? (Option<Option<UInt16>>.Some(param125) ?? Option<UInt16>.Some(var167)))) {
        case _ : Array<Int8> => 
            var177 %= Float64((Int32(103.0)) | 1);
            var181;
            var184
        
        case _ => 
            ()
        
        case _ => 
            ();
            var195--
        
    };
    var var200 : Bool = (Int32(40) is Float32);
    var loopTimeVar205 : Int64 = 0;
    do {
        loopTimeVar205++;

    } while ((var200) && loopTimeVar205 < 100 ) ;
    Int8(-12)
}

public func func30(param31 : String) : Int8 { // block id: 32
    Option<UInt16>.None;
    var var68 : UInt16 = UInt16(Int16(Int8(-32)));
    var var90 : Float64 = Float64(Float32(Float32(Float32(-6.0))));
    let var211 : ?UInt16 = (Option<Option<UInt16>>.None as UInt16);
    try { // block id: 35
        let var59 : Int8 = Int8(UInt8(184));
        try { // block id: 37
            -var40;
            Int8(122) - Int8(-127)
        } catch (_) { // block id: 47
            ();
            ();
            let var53 : Int8 = Int8(Int8(-45));
            Int8(91) ^ var53
        } finally { // block id: 56
            var59 ^ var59
        }
    } catch (e: Exception) { // block id: 63
        let var74 : Unit = ();
        try { // block id: 65
            var68 ^= UInt16(233);
            var74;
            false
        } catch (e: Exception) { // block id: 77
            var var80 : Int64 = 78;
            var80 -= (-79);
            false
        };
        (Int32(29), param31, var90, 116, var40, (-24.0), var90, UInt32(37))[3];
        [Int8(93), Int8(-110), Int8(-70), Int8(68), Int8(17), Int8(14), Int8(74), Int8(125), Int8(102), Int8(-56)][7]
    } finally { // block id: 113
        var117[2];
        var var208 : (Option<UInt16>) -> Int8 = func124;
        var211|>var208
    }
}

public func func26(param27 : Int32) : Int8 { // block id: 28
    let var215 : (String) -> Int8 = func30;
    "-_Y]-ya,YZ"|>var215
}

public func func16(param17 : UInt64) : Bool { // block id: 18
    var var253 : Float32 = Float32(-16.0);
    (match ((var40|>func26)) {
        case caseVar222 : UInt16 => 
            (UInt8(58)&127..=UInt8(236)&127:((-41)|1));
            Option<UInt16>.Some(UInt16(3))
        
        case 117 => 
            let var234 : Unit = ();
            var234;
            Option<UInt16>.None
        
        case _ => 
            var var241 : String = "t,nI~/&7K'";
            var241 = """
yM#AV
i${var241}5${var241})`s${var241}
""";
            ();
            Option<UInt16>.None
        
    } ?? try { // block id: 247
        ();
        var167
    } finally { // block id: 250
        var253 += Float32(20.0);
        let var257 : Unit = ();
        var257;
        var195
    });
    true
}




public func func525(param526 : UInt8) : Option<Range<UInt8>> { // block id: 527
    ();
    let var540 : Int16 = Int16(Int16(UInt16(UInt16(UInt8(226)))));
    let var600 : ?UInt16 = ('K' as UInt16);
    match (try { // block id: 533
            var var535 : Unit = ();
            var535;
            let var548 : Int64 = Int64(Int16(UInt8(78)));
            Option<Range<Int16>>.Some((var540&127..Int16(46)&127:(var548|1)))
        } finally { // block id: 552
            var var558 : Int64 = Int64(UInt8(238));
            Option<Range<Int16>>.Some((Int16(-128)&127..Int16(-91)&127:(var558|1)))
        }) {
        case _ : UInt32 => 
            Int16(94);
            [Int32(120), Int32(-64), Int32(35), Int32(-125), Int32(107), Int32(28), Int32(-6), Int32(96), Int32(54), Int32(76)]
        
        case caseVar568 => 
            var571
        
        case caseVar591 => 
            var594;
            if (false) { Option<UInt16>.None } else { var600 } ;
            if (true) { [Int32(-18), Int32(69), Int32(-62), Int32(3), Int32(-112), Int32(75), Int32(-31), Int32(-71), Int32(67), Int32(46)] } else { var571 } 
        
        case _ : Unit => 
            [var40, var40, var40, Int32(18), var40, Int32(-29), Int32(-61), var40, var40, var621]
        
        case _ => 
            ();
            if (var632) { [var621, Int32(123), var40, var621, var40, Int32(27), Int32(-37), Int32(39), var40, var621] } else { [Int32(43), Int32(58), var621, Int32(56), var621, var40, var621, Int32(-112), var40, Int32(27)] } 
        
    }[1];
    var658
}



public func func516(param517 : String) : Bool { // block id: 518
    let var678 : (UInt8) -> Option<Range<UInt8>> = func525;
    var var747 : Int64 = Int64((-6));
    var var764 : Array<Range<Int16>> = [(Int16(102)&127..=Int16(-51)&127:(-39)|1), (Int16(-89)&127..Int16(-7)&127:110|1), (Int16(-108)&127..Int16(-11)&127:(-124)|1), (Int16(89)&127..=Int16(-121)&127:52|1), (Int16(-24)&127..=Int16(-54)&127:126|1), (Int16(62)&127..=Int16(-5)&127:70|1), (Int16(-3)&127..=Int16(8)&127:78|1), (Int16(-7)&127..=Int16(-57)&127:(-122)|1), (Int16(-122)&127..Int16(-9)&127:25|1), (Int16(14)&127..Int16(-100)&127:104|1)];
    ((UInt8(Int8(28))|>{ lambdaParameter663 : UInt8 => let var684 : Int8 = Int8(120); var var714 : Int64 = Int64(UInt8(56)); try { // block id: 666
        var594;
        (Option<Unit>.Some(()) ?? var594);
        lambdaParameter663|>var678
    } finally { // block id: 681
        match (var684) {
            case -14 | 7 | 63 => 
                if (true) { var658 } else { Option<Range<UInt8>>.None } 
            
            case _ : UInt8 => 
                if (true) { var658 } else { var658 } 
            
            case _ => 
                UInt64(29);
                Option<Range<UInt8>>.None
            
            case _ => 
                var594;
                var594;
                Option<Range<UInt8>>.Some((lambdaParameter663&127..=UInt8(115)&127:(var714|1)))
            
        };
        lambdaParameter663|>var678;
        var var726 : ??Range<UInt8> = Option<Option<Range<UInt8>>>.None;
        (var726 ?? Option<Range<UInt8>>.Some((UInt8(5)&127..UInt8(58)&127:101|1)))
    } }) ?? if ([false, true, true, false, true, false, true, true, true, false][2]) { (var741, (var741&127..var741&127:(var747|1)), (-126.0), [var621, var621, Int32(87), Int32(-21), var621, var621, var40, Int32(-9), var40, Int32(46)], Int8(-66), var764)[1] } else { (var741&127..=var741&127:(41|1)) } );
    [var632, true, var632, var632, false, false, var632, var632, var632, false][1] && (if (false) { // block id: 789
        if (var632) { var495 } else { (Int32(-126)&127..=var40&127:(var747|1)) } ;
        (UInt8(111)&127..=UInt8(198)&127:(-91)|1);
        var40 < var40
    } else if (var632) { // block id: 802
        if (var632) { Option<Option<Range<UInt8>>>.Some(var658) } else { var808 } ;
        var632
    } else { // block id: 833
        var var835 : (Range<Int8>, Range<Int16>, UInt32, Range<Int16>, Float64, UInt16) = ((Int8(-46)&127..=Int8(57)&127:91|1), (Int16(-123)&127..=Int16(-101)&127:9|1), UInt32(UInt16(176)), (Int16(54)&127..=Int16(16)&127:109|1), 40.0, UInt16(6));
        var835;
        true
    } && (var741 is Array<Bool>))
}




public func func16(param908 : Array<Int8>, param909 : Bool) : Float64 { // block id: 910
    var var927 : ?Array<Unit> = (Float32(-1.0) as Array<Unit>);
    ((var924 ?? var927) ?? [var594, (), var594, (), var594, var594, (), var594, (), var594])[4];
    let var962 : String = "'D;_zOjZh*";
    let var972 : Int64 = Int64(Int8(UInt8(Int8(Int8(2)))));
    let var983 : Bool = ((Option<Option<UInt16>>.None as Option<Range<UInt8>>) is UInt8);
    var loopTimeVar989 : Int64 = 0;
    do {
        loopTimeVar989++;

    } while ((((((UInt32(240)&127..UInt32(60)&127:103|1), UInt64(50), ()), (UInt32(254)&127..=var958&127:((-55)|1)), var962, ((-108)&127..100&127:(-93)|1), Option<Bool>.Some(true), ((var958&127..=UInt32(60)&127:(var972|1)), UInt64(118), ()), var741)[4] ?? var983)) && loopTimeVar989 < 100 ) ;
    (-46.0)
}



public enum Enum1217 {
    defaultValue
}

public func func1210(param1211 : Range<UInt16>) : Unit { // block id: 1212
    var1214;
    let var1234 : ((Range<Int8>, Range<Int16>, UInt32, Range<Int16>, Float64, UInt16), (Range<Int8>, Range<Int16>, UInt32, Range<Int16>, Float64, UInt16), Float32, Option<Enum1217>, Range<Int16>, Range<Int16>, Float32) = (((Int8(-56)&127..=Int8(-83)&127:(-61)|1), (Int16(-69)&127..=Int16(-19)&127:(Int64(UInt64(23))|1)), UInt32(226), (Int16(-52)&127..=Int16(88)&127:70|1), 63.0, UInt16(248)), ((Int8(-36)&127..=Int8(-64)&127:((-16)|1)), (Int16(Int8(-83))&127..Int16(95)&127:(Int64(UInt16(67))|1)), UInt32(11), (Int16(-38)&127..Int16(-116)&127:((-55)|1)), Float64(Float32(Float32(-121.0))), UInt16(120)), Float32(91.0), Option<Enum1217>.Some(Enum1217.defaultValue), (Int16(27)&127..Int16(62)&127:(-92)|1), (Int16(68)&127..=Int16(-80)&127:(-96)|1), Float32(-67.0));
    let var1282 : Range<Int16> = (Int16(-117)&127..Int16(-11)&127:(-125)|1);
    let var1323 : ??UInt16 = Option<Option<UInt16>>.None;
    func func1220() : Enum1217 { // block id: 1221
        let var1287 : Float64 = 84.0;
        let var1291 : (Range<Int8>, Range<Int16>, UInt32, Range<Int16>, Float64, UInt16) = ((Int8(26)&127..=Int8(Int8(Int8(-31)))&127:((-52)|1)), (Int16(80)&127..Int16(29)&127:(-96)|1), UInt32(5), (Int16(45)&127..Int16(-78)&127:122|1), 13.0, UInt16(UInt8(Int8(Int8(51)))));
        let var1308 : Float32 = Float32(Float32(-99.0));
        (try { // block id: 1230
            var594;
            ();
            var1234
        } catch (_) { // block id: 1273
            ();
            (((var1065&127..=Int8(25)&127:(88|1)), var1282, var958, (Int16(-12)&127..Int16(-101)&127:(-45)|1), var1287, var195), var1291, var1308, Option<Enum1217>.Some(var1313), (Int16(12)&127..=Int16(-124)&127:((-11)|1)), (Int16(-5)&127..=Int16(-70)&127:(-97)|1), var1308)
        } finally { // block id: 1321
            var1323;
            if (var1327) { var1234 } else { var1234 } 
        }[3] ?? try { // block id: 1353
            if (var1327) { var1214 } else { [true, true, false, false, true, false, false, false, false, false] } ;
            Option<UInt16>.Some(var195);
            var1361
        } finally { // block id: 1371
            var1361
        }[4])
    }
;
    match (func1220()) {
        case _ => 
            var594
        
    }
}

public open class Class1383 <: Resource {
    public init() { // block id: 1385

    }
;
    static let var2746 : Unit = ();
    public init(param2625 : (UInt64) -> Bool) { // block id: 2628
        let var2641 : ?Unit = ((((Int8(5)&127..=Int8(19)&127:70|1), (Int16(-45)&127..=Int16(-114)&127:(109|1)), UInt32(233), (Int16(-109)&127..=Int16(-32)&127:(-40)|1), (-44.0), UInt16(Int8(-37))), ((Int8(-117)&127..Int8(115)&127:(-89)|1), (Int16(-48)&127..Int16(-65)&127:79|1), UInt32(UInt16(206)), (Int16(122)&127..Int16(-20)&127:((-46)|1)), Float64(107.0), UInt16(47)), Float32(Float32(-28.0)), Option<Enum1217>.Some(Enum1217.defaultValue), (Int16(86)&127..Int16(50)&127:(-54)|1), (Int16(22)&127..=Int16(124)&127:(46|1)), Float32(-44.0)) as Unit);
        var var2683 : Option<Option<Array<Bool>>> = Option<Option<Array<Bool>>>.Some(Option<Array<Bool>>.Some([false, (24 is Enum1217), false, (Option<Range<UInt16>>.None is (Option<UInt16>) -> Int8), (Int16(56) is UInt32), (Option<Option<Array<Bool>>>.None is UInt64), false, ([Int32(-50), Int32(86), Int32(118), Int32(86), Int32(-61), Int32(-78), Int32(-115), Int32(124), Int32(-113), Int32(-61)] is () -> Option<(Unit, String)>), ((Int16(35)&127..Int16(86)&127:(21|1)) is Array<Option<(Unit, String)>>), true]));
        var loopTimeVar2717 : Range<UInt64> = (UInt64(2)&127..UInt64(90)&127:((-4)|1));
        (try { // block id: 2635
            var1735;
            var var2638 : Option<Enum1217> = Option<Enum1217>.None;
            var2638;
            var2641
        } finally { // block id: 2677
            Option<Unit>.Some(var594)
        } ?? for (i in loopTimeVar2717 where (var2683 is (((Range<UInt32>, UInt64, Unit), Range<UInt32>, String, Range<Int64>, Option<Bool>, (Range<UInt32>, UInt64, Unit), UInt8), Option<Range<UInt16>>, Option<Option<Array<Unit>>>) -> Int32)) {

        });
        var var2737 : Int8 = Int8(59);
        var loopTimeVar2758 : Int64 = 0;
        do {
            loopTimeVar2758++;

        } while ((try { // block id: 2724
            var1564;
            var var2729 : ?Bool = Option<Bool>.None;
            if (true) { var2729 } else { var2729 } ;
            var1327
        } catch (e: Exception) { // block id: 2733
            ();
            var2737 &= var2737;
            var1327
        } finally { // block id: 2741
            [var594, var594, var2746, (), var2746, var594, var594, (), var594, var2746];
            var1327
        }) && loopTimeVar2758 < 100 ) 
    }
;
    private static let var2910 : (Float64, Array<Bool>, Range<Int64>, Array<Bool>, Option<Option<UInt16>>, Rune, Range<UInt8>, Int16) = (18.0, [false, false, false, false, false, true, true, false, false, true], ((-124)&127..45&127:75|1), [false, true, true, false, false, true, false, false, false, true], Option<Option<UInt16>>.None, 'H', (UInt8(87)&127..UInt8(163)&127:((-102)|1)), Int16(-72));
    func func2808(namedParam2809 ! : Option<UInt64>, namedParam2810 ! : Option<Option<Range<UInt8>>>, namedParam2811 ! : (Unit, String), optionalParam2812 ! : Option<Option<Range<UInt8>>> = Option<Option<Range<UInt8>>>.None) : Unit { // block id: 2814
        (if (try { // block id: 2818
            (var741&127..=var741&127:((-85)|1));
            var1327 ||= var1735;
            var456 > var456
        } finally { // block id: 2829
            ();
            !var1478
        }) { (if (false) { [var594, var594, var2746, (), var594, var594, var594, var2746, var594, ()] } else { [var594, var594, var594, var594, var594, (), var594, (), var2856, ()] } ) } else { try { // block id: 2860
            54.0 == var2437;
            if (false) { var1139 } else { var1139 } 
        } finally { // block id: 2868
            var1139
        } } , ((Option<Option<Array<Unit>>>.Some(Option<Array<Unit>>.Some([(), (), (), (), (), (), (), (), (), ()])) ?? var2884) ?? (Option<Array<Unit>>.None ?? [(), (), (), var594, var594, var2897, var594, (), var2897, var594])), var992);
        let var2959 : ??UInt16 = ([(Int16(23)&127..Int16(-42)&127:(Int64(UInt32(210))|1)), (Int16(Int8(-81))&127..Int16(26)&127:(74|1)), (Int16(Int16(-59))&127..=Int16(UInt16(152))&127:(Int64(UInt64(33))|1)), (Int16(59)&127..=Int16(-97)&127:6|1), (Int16(-56)&127..Int16(85)&127:50|1), (Int16(64)&127..Int16(-116)&127:(-114)|1), (Int16(-65)&127..Int16(UInt8(166))&127:((-84)|1)), (Int16(-96)&127..Int16(65)&127:74|1), (Int16(UInt16(138))&127..=Int16(-50)&127:(Int64(Int32(-41))|1)), (Int16(Int16(111))&127..=Int16(-56)&127:((-125)|1))] as Option<UInt16>);
        var loopTimeVar3024 : Int64 = 0;
        while ((try { // block id: 2906
            if (var2082) { var2910 } else { (66.0, [var1735, false, var1327, true, var632, false, false, var1735, var632, var2082], ((-7)&127..(-119)&127:(-55)|1), [var1478, var2082, false, var632, true, var1735, var632, var1735, false, true], var2959, 'L', var3001, var1953) } ;
            true
        } finally { // block id: 3014
            false
        }) && loopTimeVar3024 < 100 ) {
            loopTimeVar3024++;
            try { // block id: 3018
                ();
                (Int8(58)&127..=Int8(58)&127:(-17)|1)
            } finally { // block id: 3021
                (Int8(-22)&127..=Int8(116)&127:(-70)|1)
            }
        }
    }

    public func isClosed(): Bool { return true }
    public func close(): Unit {}
}



func func1899(param1900 : Float32) : Option<(Unit, String)> { // block id: 1901
    var1021;
    var var1905 : Bool = (Option<Option<Array<Bool>>>.Some(((Int32(48), ###"<kP\"qB`d5:"###, (UInt64(162)&127..=UInt64(237)&127:((-70)|1)), 52, Enum1217.defaultValue, (UInt16(200)&127..=UInt16(73)&127:(-43)|1)) as Array<Bool>)) is Range<UInt64>);
    var loopTimeVar1927 : Int64 = 0;
    while ((var1905) && loopTimeVar1927 < 100 ) {
        loopTimeVar1927++;
        (var167&127..=UInt16(62)&127:(16|1))|>func1210
    };
    var var1939 : ?(Unit, String) = Option<(Unit, String)>.Some(((), "XshkOe;\\~7"));
    (Option<Option<(Unit, String)>>.Some(try { // block id: 1935
        if (true) { var1939 } else { var1939 } 
    } catch (_) { // block id: 1945
        var var1969 : Range<Int16> = (Int16(113)&127..=Int16(-35)&127:(-98)|1);
        var var1992 : Option<Enum1217> = Option<Enum1217>.None;
        if (var1478) { (((Int8(-36)&127..=Int8(-115)&127:(-120)|1), (var1953&127..Int16(-121)&127:(72|1)), UInt32(88), (Int16(123)&127..Int16(-12)&127:63|1), var1557, var167), var1440, param1900, Option<Enum1217>.None, (Int16(-121)&127..=Int16(2)&127:(var1123|1)), var1969, param1900) } else { (((var1065&127..=var1065&127:((-98)|1)), (Int16(-60)&127..=var1953&127:(var1123|1)), var958, (Int16(97)&127..var1953&127:(73|1)), var1557, UInt16(69)), var1440, Float32(-102.0), var1992, var1969, (Int16(77)&127..=var1953&127:(var1123|1)), Float32(45.0)) } ;
        if (false) { Option<(Unit, String)>.Some((var594, """
,OKRJ
6zo4a{
""")) } else { Option<(Unit, String)>.None } 
    }) ?? Option<(Unit, String)>.None)
}

public func func2029(namedParam2030 ! : (Range<Int8>, Range<Int16>, UInt32, Range<Int16>, Float64, UInt16), optionalParam2031 ! : (Range<UInt32>, UInt64, Unit) = ((UInt32(245)&127..=UInt32(73)&127:36|1), UInt64(55), ())) : (Unit, String) { // block id: 2036
    var var2050 : Int8 = Int8(Int8(107));
    ((var2040 ?? match (var1021) {
        case caseVar2046 : Option<Option<(Unit, String)>> => 
            var2050 %= ((Int8(106)) | 1);
            var1408
        
        case caseVar2057 => 
            var1408
        
        case caseVar2062 : Option<Option<Option<UInt16>>> => 
            var2065;
            var1408
        
        case caseVar2070 : ((Range<Int8>, Range<Int16>, UInt32, Range<Int16>, Float64, UInt16), (Range<Int8>, Range<Int16>, UInt32, Range<Int16>, Float64, UInt16), Float32, Option<Enum1217>, Range<Int16>, Range<Int16>, Float32) => 
            Option<Option<Range<UInt8>>>.Some(var658);
            ();
            Option<(Unit, String)>.Some(var1415)
        
        case _ => 
            var1327 &&= var2082;
            if (var632) { var1408 } else { Option<(Unit, String)>.Some(var1415) } 
        
    }) ?? (Option<(Unit, String)>.None ?? match (var1415) {
        case _ => 
            if (false) { var1361 } else { var1361 } ;
            (var594, var1564)
        
    }))
}

public func func2014(param2015 : Float64) : Option<Option<(Unit, String)>> { // block id: 2016
    var loopTimeVar2027 : Int64 = 0;
    while (((Option<Range<Int16>>.None is Array<Option<(Unit, String)>>)) && loopTimeVar2027 < 100 ) {
        loopTimeVar2027++;
        func1899(var2023)
    };
    let var2160 : (Int32, Rune, Array<Range<Int16>>, Unit, Int64, Range<Int16>, UInt64) = (Int32(UInt8(111)), 'C', [(Int16(-106)&127..=Int16(52)&127:(-18)|1), (Int16(-50)&127..=Int16(95)&127:54|1), (Int16(40)&127..Int16(88)&127:(-120)|1), (Int16(118)&127..=Int16(62)&127:53|1), (Int16(-97)&127..=Int16(-91)&127:123|1), (Int16(-54)&127..=Int16(-61)&127:(-25)|1), (Int16(-8)&127..Int16(-62)&127:120|1), (Int16(-62)&127..Int16(-34)&127:(-76)|1), (Int16(68)&127..=Int16(96)&127:14|1), (Int16(-109)&127..Int16(95)&127:(-21)|1)], (), Int64(Int8(UInt8(Int8(-44)))), (Int16(-21)&127..Int16(96)&127:(Int64(UInt16(210))|1)), UInt64(68));
    func2029(namedParam2030 : ((var1065&127..var1065&127:(var1123|1)), match ((var40, var1564, (-84.0), var1123, Int32(-31), (-76.0), 6.0, UInt32(9))) {
        case _ => 
            let var2120 : Range<Int16> = (Int16(63)&127..=Int16(38)&127:82|1);
            var2120
        
    }, UInt32(Int16(-115)), (var1953&127..=Int16(-48)&127:(102|1)), Float64(var2023), try { // block id: 2131
        var var2134 : Int16 = Int16(UInt16(Int16(-109)));
        var2134 >>= ((var2134) & 7);
        if (false) { Option<UInt16>.None } else { Option<UInt16>.None } ;
        var195 ^ UInt16(237)
    } catch (_) { // block id: 2146
        if (false) { (var621, var2152, var1021, (), 14, (Int16(65)&127..=Int16(-105)&127:(-96)|1), UInt64(142)) } else { var2160 } ;
        UInt16(150) / ((UInt16(143)) | 1)
    } finally { // block id: 2180
        UInt16(0)
    }));
    var2040
}


func func1881() : Option<(Unit, String)> { // block id: 1882
    let var1894 : ???UInt16 = ([false, true, true, true, false, true, false, false, true, false] as Option<Option<UInt16>>);
    func func1884(optionalParam1885 ! : (UInt64) -> Bool = func16, namedParam1889 ! : Range<Int16>, optionalParam1890 ! : Array<Bool> = [true, false, true, true, false, false, false, true, true, true]) : Option<Option<Option<UInt16>>> { // block id: 1892
        var1894
    }
;
    func1884(namedParam1889 : (Int16(-53)&127..=Int16(110)&127:119|1));
    let var2223 : (Int32, Rune, Array<Range<Int16>>, Unit, Int64, Range<Int16>, UInt64) = (Int32(Int16(UInt8(UInt8(71)))), '6', [(Int16(-16)&127..=Int16(-124)&127:55|1), (Int16(-33)&127..=Int16(-86)&127:(-84)|1), (Int16(106)&127..Int16(9)&127:(-76)|1), (Int16(65)&127..Int16(-22)&127:(-118)|1), (Int16(-66)&127..=Int16(-88)&127:(-10)|1), (Int16(-96)&127..Int16(-35)&127:14|1), (Int16(-110)&127..=Int16(-14)&127:84|1), (Int16(-84)&127..=Int16(5)&127:(-119)|1), (Int16(51)&127..Int16(-43)&127:76|1), (Int16(17)&127..Int16(-85)&127:(-97)|1)], (), Int64(UInt8(97)), (Int16(-67)&127..=Int16(112)&127:(-74)|1), UInt64(UInt32(226)));
    let var2241 : ?Bool = Option<Bool>.None;
    var var2309 : Int16 = Int16(54);
    ((((Int8(-11)&127..var1065&127:(var1123|1)), var2294, var958, (Int16(-3)&127..=Int16(63)&127:(-97)|1), var1557, UInt16(84)) as Float32) ?? match {
        case false => 
        (var456&127..=var456&127:(var1123|1));
        var2309 /= ((Int16(-119)) | 1);
        Float32(0.0)
        case _ => 
        var var2316 : Int32 = Int32(UInt16(187));
        var var2338 : Unit = ();
        (var2316, 'q', [(Int16(20)&127..=Int16(33)&127:(-122)|1), var2294, (Int16(-87)&127..=Int16(-1)&127:(-18)|1), (Int16(-127)&127..=Int16(-121)&127:104|1), var2294, var2294, (Int16(-24)&127..=Int16(-57)&127:(85|1)), (Int16(-66)&127..=Int16(61)&127:13|1), (var1953&127..=var2309&127:(63|1)), (Int16(67)&127..=Int16(63)&127:(-72)|1)], var2338, var1123, (Int16(75)&127..=Int16(38)&127:(-47)|1), UInt64(229));
        var2023
    })|>{ lambdaParameter2010 : Float32 => ((match (Float32(94.0)) {
        case _ => 
            var2190--;
            var594;
            -57.0
        
    }|>func2014) ?? match (match (Enum1217.defaultValue) {
            case _ => 
                var195++;
                var1557;
                Option<Bool>.Some(var632)
            
            case caseVar2208 => 
                var594;
                let var2214 : ?Bool = (Float32(123.0) as Bool);
                if (var1735) { var2214 } else { var2214 } 
            
            case caseVar2220 : Class1383 => 
                var2223;
                ();
                if (var1327) { var2241 } else { Option<Bool>.Some(var1327) } 
            
            case _ => 
                true;
                var40 &= Int32(-5);
                var2241
            
        }) {
        case caseVar2254 : UInt32 => 
            var2082;
            var594;
            var var2260 : Bool = false;
            if (var2260) { var2263 } else { Option<(Unit, String)>.None } 
        
        case _ : (Array<Unit>, Array<Unit>, Array<Int8>) => 
            var2263
        
        case caseVar2273 => 
            if (true) { var2263 } else { var2263 } 
        
        case _ => 
            var2263
        
    }) }
}


func func1655(param1656 : Float32) : UInt64 { // block id: 1657
    let var1675 : Bool = (Option<Array<Unit>>.None is (Option<UInt16>) -> Int8);
    var var1688 : ?Array<Unit> = Option<Array<Unit>>.Some([(), (), (), (), (), (), (), (), (), ()]);
    var loopTimeVar1748 : Range<UInt64> = (UInt64(UInt64(Int64(UInt32(126))))&127..UInt64(245)&127:(Int64(UInt16(107))|1));
    for (i in loopTimeVar1748 where if (try { // block id: 1661
        "t9vO$:K4l?";
        [Int32(-48), Int32(-24), var40, Int32(122), var621, var621, var621, Int32(-109), Int32(121), Int32(-81)];
        var1675
    } finally { // block id: 1678
        if (true) { var658 } else { Option<Range<UInt8>>.Some((UInt8(224)&127..=UInt8(146)&127:(-64)|1)) } ;
        ();
        false
    }) { // block id: 1686
        var1688;
        var1327
    } else if (match (Option<UInt16>.None) {
        case _ : UInt32 => 
            false
        
        case _ => 
            var1702;
            ();
            var1675
        
        case caseVar1708 => 
            if (true) { caseVar1708 } else { Option<UInt16>.None } ;
            !false
        
        case caseVar1718 : (UInt8, Range<UInt8>, Float64, Array<Int32>, Int8, Array<Range<Int16>>) => 
            var1361;
            var594;
            var1675
        
        case _ => 
            var594;
            false
        
    }) { // block id: 1727
        var594;
        var571;
        var1327
    } else { // block id: 1731
        var1139;
        !var1735
    }) {

    };
    func func1760(param1761 : (UInt64) -> Bool, param1764 : Rune, param1765 : (Int32, String, Range<UInt64>, Int64, Enum1217, Range<UInt16>), namedParam1766 ! : Int16) : UInt64 { // block id: 1767
        let var1781 : Array<UInt64> = [UInt64(194), UInt64(133), UInt64(91), UInt64(195), UInt64(181), UInt64(50), UInt64(235), UInt64(49), UInt64(33), UInt64(4)];
        let var1791 : Array<UInt64> = [UInt64(60), UInt64(221), UInt64(153), UInt64(16), UInt64(175), UInt64(71), UInt64(14), UInt64(103), UInt64(235), UInt64(14)];
        var var1827 : Array<UInt64> = [UInt64(74), UInt64(193), UInt64(142), UInt64(86), UInt64(94), UInt64(103), UInt64(230), UInt64(242), UInt64(155), UInt64(243)];
        if (false) { match (param1656) {
            case 71.0 => 
                var195 >>= ((var167) & 7);
                var1781
            
            case _ => 
                [UInt64(9), UInt64(41), UInt64(45), UInt64(170), UInt64(44), UInt64(112), UInt64(148), UInt64(85), UInt64(8), UInt64(251)]
            
            case -36.0 | 18.0 => 
                var1791
            
            case _ => 
                if (true) { [UInt64(234), UInt64(212), UInt64(245), UInt64(196), UInt64(17), UInt64(207), UInt64(18), UInt64(166), UInt64(247), UInt64(144)] } else { [UInt64(247), UInt64(125), UInt64(126), UInt64(152), UInt64(174), UInt64(159), UInt64(82), UInt64(126), UInt64(212), UInt64(225)] } 
            
            case _ => 
                var var1804 : Int16 = Int16(-89);
                var1804 >>= ((namedParam1766) & 7);
                if (false) { [UInt64(83), UInt64(162), UInt64(215), UInt64(30), UInt64(72), UInt64(50), UInt64(96), UInt64(160), UInt64(64), UInt64(148)] } else { [UInt64(117), var456, UInt64(149), var456, var456, UInt64(175), UInt64(231), var456, var456, UInt64(6)] } 
            
        } } else { try { // block id: 1822
            if (false) { [UInt64(92), UInt64(164), UInt64(44), UInt64(28), UInt64(194), UInt64(109), UInt64(218), UInt64(170), UInt64(41), UInt64(42)] } else { var1827 } 
        } catch (_) { // block id: 1829
            var1827
        } } [6]
    }
;
    let var1838 : Range<UInt64> = (UInt64(Int16(32))&127..UInt64(Int32(UInt8(49)))&127:(Int64(Int64(UInt64(63)))|1));
    if (func16(func1760(func16, 'v', (var40, """
piBKs
*2yW=
""", var1838, var1123, Enum1217.defaultValue, (UInt16(128)&127..UInt16(86)&127:(-71)|1)), namedParam1766 : Int16(-85)))) { match (func1210((UInt16(111)&127..=UInt16(213)&127:(-54)|1))) {
        case _ : UInt16 => 
            Int8(125) + Int8(11);
            var594;
            var1408
        
        case caseVar1865 : Range<Int8> => 
            Option<(Unit, String)>.Some((var594, "q>j\"aS+KdF"))
        
        case _ : Range<Int16> => 
            var1408
        
        case _ => 
            ();
            Int16(-25);
            Option<(Unit, String)>.None
        
    } } else { func1881() } ;
    var var2356 : Option<UInt64> = (UInt32(173) as UInt64);
    let var2380 : Int8 = Int8(UInt8(224));
    (try { // block id: 2350
        var2352;
        var594;
        var2356
    } finally { // block id: 2359
        var2190;
        var195 %= ((UInt16(35)) | 1);
        var2356
    } ?? if (if (var1675) { // block id: 2368
        ([(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [var1065, var1065, Int8(55), Int8(78), var1065, Int8(44), var2380, var1065, var1065, var1065]);
        var594;
        var1327
    } else { // block id: 2388
        if (var1327) { Option<UInt64>.Some(var456) } else { var2356 } ;
        var594;
        var1557 != 19.0
    }) { // block id: 2398
        Option<Option<(Unit, String)>>.Some(Option<(Unit, String)>.None);
        var2190 &= UInt32(218);
        UInt64(192)
    } else { // block id: 2405
        UInt64(248)
    })
}



func func1391(param1392 : (Range<UInt32>, UInt64, Unit)) : Int32 { // block id: 1393
    let var1405 : ?(Unit, String) = Option<(Unit, String)>.None;
    let var1423 : String = "pe&$C5YNgs";
    ([var1405, var1408, var1408, var1405, Option<(Unit, String)>.Some(var1415), Option<(Unit, String)>.Some(((), var1423)), var1408, var1405, var1405, var1408][0] ?? if (true) { (var594, """
uZ~'${var1423}c
6[${var1423}~JH
""") } else { var1415 } )[0];
    var loopTimeVar1485 : Range<UInt64> = (UInt64(21)&127..UInt64(51)&127:(Int64((-104))|1));
    for (i in loopTimeVar1485 where match (var1440) {
        case _ : Option<(Unit, String)> => 
            false
        
        case _ => 
            var1327
        
        case (caseVar1470,caseVar1471,_ : UInt64,caseVar1472 : Range<UInt32>,caseVar1473,caseVar1474 : Array<Unit>) => 
            ();
            var1478
        
        case _ => 
            var594;
            true
        
    }) {

    };
    var var1510 : ???UInt16 = ((([(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [Int8(102), Int8(33), Int8(-75), Int8(-15), Int8(-26), Int8(-78), Int8(110), Int8(63), Int8(22), Int8(91)]) as Option<Array<Unit>>) as Option<Option<UInt16>>);
    let var2417 : ?Float64 = Option<Float64>.Some(Float64(Float32(58.0)));
    func func1538(param1539 : ((Range<UInt32>, UInt64, Unit), Range<UInt32>, String, Range<Int64>, Option<Bool>, (Range<UInt32>, UInt64, Unit), UInt8), param1540 : Option<Range<UInt16>>, optionalParam1541 ! : Option<Option<Array<Unit>>> = ((UInt64(Int8(Int8(122)))&127..=UInt64(UInt16(UInt16(164)))&127:((-31)|1)) as Option<Array<Unit>>)) : Int32 { // block id: 1551
        var var1571 : Float32 = Float32(-116.0);
        var var1574 : Float32 = Float32(-2.0);
        match {
            case (match (var1557) {
            case caseVar1561 : (Unit, String) => 
                var1564
            
            case 1.0 | -20.0 | 109.0 | -92.0 => 
                var1571 -= var1574;
                var195 -= UInt16(86);
                """
y1S92
1c<4j
"""
            
            case -34.0 | 24.0 | 76.0 | -45.0 => 
                ###"\\N~`tZpF6c"###
            
            case _ => 
                ();
                var594;
                if (var1327) { var1423 } else { "1;Rl9xm3HU" } 
            
            case _ => 
                (var594, var1423);
                if (var1478) { (UInt32(228)&127..=var958&127:((-106)|1)) } else { (var958&127..var958&127:(66|1)) } ;
                if (var1327) { var1564 } else { var1423 } 
            
        }|>func516) => 
            var594;
            var var1623 : Float64 = 52.0;
            if (false) { // block id: 1616
                (-65.0)
            } else { // block id: 1618
                ();
                var1557 - var1623
            }
            case (((-4)&127..(-70)&127:(-17)|1) is Option<UInt16>) => 
            var var1636 : Range<Int8> = (Int8(UInt8(UInt8(UInt8(70))))&127..Int8(UInt8(Int8(-45)))&127:((-50)|1));
            let var1647 : Range<Int16> = (Int16(-1)&127..Int16(-35)&127:(-21)|1);
            try (resource = Class1383()) { // block id: 1629
                var594;
                ();
                var594
            } finally { // block id: 1633
                (var1636, var1647, UInt32(63), (Int16(-125)&127..=Int16(-117)&127:101|1), (-45.0), var167);
                ()
            };
            let var2408 : (Float32) -> UInt64 = func1655;
            var1574|>var2408;
            (var2417 ?? var1557)
            case _ => 
            var loopTimeVar2430 : Int64 = 0;
            do {
                loopTimeVar2430++;
                var741 ^= UInt8(204)
            } while ((var1478) && loopTimeVar2430 < 100 ) ;
            var loopTimeVar2435 : Int64 = 0;
            do {
                loopTimeVar2435++;

            } while ((true) && loopTimeVar2435 < 100 ) ;
            var2437
        };
        var117;
        var621
    }
;
    try { // block id: 1492
        var loopTimeVar1497 : Range<UInt64> = (UInt64(Int32(-64))&127..=UInt64(Int16(UInt8(Int8(-58))))&127:(Int64(Int32(Int32(102)))|1));
        for (i in loopTimeVar1497 where var632) {
            continue
        };
        (var1510 as Array<Bool>);
        func1538(var2442, Option<Range<UInt16>>.Some((var167&127..=var167&127:((-28)|1))), optionalParam1541 : var924)
    } finally { // block id: 2486
        (Option<Int32>.Some(Int32(114)) ?? var40)
    }
}




public func func1387() : Class1383 { // block id: 1388
    let var2507 : Option<UInt64> = Option<UInt64>.Some(UInt64(UInt32(Int32(Int16(16)))));
    var var2526 : ?Float64 = (Int32(UInt8(197)) as Float64);
    ((((UInt32(103)&127..=UInt32(201)&127:((-27)|1)), var456, var594)|>func1391), if (true) { // block id: 2505
        var2507;
        if (false) { "zC:_TFJdq1" } else { """
OpQYQ
\"R*l\\
""" } 
    } else { // block id: 2517
        var2520 <<= ((Int16(-92)) & 7);
        ###"@ cohU#ng\\"###
    }, (var2526 ?? var1557), Int64((Option<Int32>.Some(Int32(-46)) ?? Int32(-86))), var621, (-72.0), (-79.0), var2540);
    var var2559 : Range<UInt64> = (UInt64(51)&127..=UInt64(42)&127:27|1);
    (match (match (Option<(Unit, String)>.Some(((), "I6;PENK:3a{"))) {
            case caseVar2556 : Option<Option<Array<Unit>>> => 
                var2559
            
            case _ => 
                ();
                (UInt64(197)&127..UInt64(137)&127:84|1)
            
        }) {
        case caseVar2567 : (Range<Int8>, Range<Int16>, UInt32, Range<Int16>, Float64, UInt16) => 
            ();
            if (false) { var2573 } else { var2573 } 
        
        case _ => 
            if (var1478) { (UInt8(177)&127..UInt8(26)&127:(-36)|1) } else { (var741&127..=UInt8(149)&127:(var1123|1)) } ;
            ();
            Option<Rune>.Some(var2152)
        
    } ?? var2152);
    var var2622 : Class1383 = Class1383(func16);
    match ((try { // block id: 2600
            ();
            (UInt8(13)&127..=var741&127:(var1123|1));
            Option<Int8>.None
        } finally { // block id: 2607
            var594;
            var658;
            if (false) { Option<Int8>.Some(var1065) } else { var2615 } 
        } ?? var1065)) {
        case _ : Unit => 
            var2622
        
        case -47 => 
            var2764;
            var594;
            if (var1478) { var2622 } else { var2622 } 
        
        case -66 | 119 | 65 => 
            var2190 <<= ((UInt32(195)) & 7);
            if (true) { var2622 } else { var2622 } 
        
        case _ => 
            ();
            if (true) { (UInt64(53)&127..UInt64(41)&127:5|1) } else { (UInt64(103)&127..UInt64(87)&127:61|1) } ;
            Class1383()
        
    }
}



func func1378(param1379 : (Range<Int8>, Range<Int16>, UInt32, Range<Int16>, Float64, UInt16)) : Unit { // block id: 1380
    var594;
    func1387().func2808(namedParam2809 : var3026, namedParam2810 : try { // block id: 3029
        var2520 += Int16(97);
        if (false) { var808 } else { Option<Option<Range<UInt8>>>.None } 
    } catch (e: Exception) { // block id: 3037
        UInt8(13);
        if (var1735) { var808 } else { Option<Option<Range<UInt8>>>.None } 
    } finally { // block id: 3043
        Option<Array<Unit>>.Some([(), (), (), (), (), (), (), (), (), ()]);
        var2897;
        Option<Option<Range<UInt8>>>.Some(var3049)
    }, namedParam2811 : var1415, optionalParam2812 : match ((var1440, ((var1065&127..var1065&127:(var1123|1)), (Int16(-62)&127..Int16(47)&127:(var1123|1)), var958, var2294, (-87.0), var167), Float32(-9.0), Option<Enum1217>.Some(var1313), (Int16(38)&127..=Int16(108)&127:8|1), (var2520&127..=var2520&127:(var1123|1)), var2023)) {
        case (caseVar3079,(caseVar3080,_,caseVar3081,_ : (UInt8, Range<UInt8>, Float64, Array<Int32>, Int8, Array<Range<Int16>>),_,_),caseVar3082,None,caseVar3083 : (Float64, Array<Bool>, Range<Int64>, Array<Bool>, Option<Option<UInt16>>, Rune, Range<UInt8>, Int16),_,caseVar3084 : ((Range<UInt32>, UInt64, Unit), Range<UInt32>, String, Range<Int64>, Option<Bool>, (Range<UInt32>, UInt64, Unit), UInt8)) => 
            let var3088 : ?Range<UInt8> = ([false, true, true, true, false, false, true, false, false, false] as Range<UInt8>);
            Option<Option<Range<UInt8>>>.Some(var3088)
        
        case _ => 
            ();
            var808
        
        case _ => 
            (Int32(100)&127..var3101&127:(var1123|1));
            Option<Option<Range<UInt8>>>.Some(Option<Range<UInt8>>.None)
        
    })
}

public func func3107(param3108 : Range<UInt16>) : (Range<Int8>, Range<Int16>, UInt32, Range<Int16>, Float64, UInt16) { // block id: 3109
    match (Option<Unit>.Some(var594)) {
        case _ : Option<Array<Bool>> => 
            if (false) { var2884 } else { var2884 } ;
            var1440
        
        case _ => 
            ((var1065&127..=Int8(-5)&127:((-116)|1)), (Int16(-59)&127..var2520&127:((-76)|1)), var958, (Int16(-51)&127..Int16(-66)&127:(-60)|1), var2437, var195)
        
    }
}




func func860(param861 : Option<Option<Range<UInt8>>>) : Float64 { // block id: 862
    let var876 : Float64 = 112.0;
    let var886 : Range<UInt8> = (UInt8(245)&127..=UInt8(101)&127:(-47)|1);
    let var1155 : Option<Option<Array<Bool>>> = Option<Option<Array<Bool>>>.Some(Option<Array<Bool>>.None);
    let var1180 : ?Array<Bool> = (([false, (Int16(63) is Float64), ((-116) is Option<Option<UInt16>>), true, (Option<Option<Option<UInt16>>>.Some(Option<Option<UInt16>>.None) is (UInt8, Range<UInt8>, Float64, Array<Int32>, Int8, Array<Range<Int16>>)), (Option<Unit>.Some(()) is Bool), true, false, ([(), (), (), (), (), (), (), (), (), ()] is Option<Option<Array<Bool>>>), (Option<UInt16>.None is Option<Unit>)] as Array<Unit>) as Array<Bool>);
    func func868() : Unit { // block id: 869
        var var883 : Rune = 'Z';
        var var998 : Float32 = Float32(39.0);
        if (match ((var876, [false, true, true, false, false, false, true, false, true, true], ((-94)&127..=86&127:105|1), [true, false, true, false, true, true, true, true, true, true], Option<Option<UInt16>>.None, var883, var886, Int16(-28))[4]) {
            case caseVar892 : Int16 => 
                """
iJi0;
$Vf8h
""";
                true
            
            case _ => 
                var var900 : String = """
-/Jp,
#tf[|
""";
                var900 = "5F`\":${var900})~X${var900}.R";
                !false
            
        }) { // block id: 905
            func16(var992, true)
        } else { // block id: 995
            Float64(var998)
        };
        var var1068 : (Int32, Rune, Array<Range<Int16>>, Unit, Int64, Range<Int16>, UInt64) = (Int32(-104), '3', [(Int16(-79)&127..Int16(39)&127:((-2)|1)), (Int16(41)&127..Int16(UInt16(4))&127:(Int64(UInt8(217))|1)), (Int16(120)&127..Int16(41)&127:66|1), (Int16(-20)&127..Int16(75)&127:(91|1)), (Int16(25)&127..=Int16(94)&127:(-56)|1), (Int16(-41)&127..=Int16(87)&127:91|1), (Int16(UInt16(212))&127..Int16(-89)&127:(Int64(UInt64(214))|1)), (Int16(-111)&127..Int16(124)&127:(-39)|1), (Int16(114)&127..Int16(112)&127:95|1), (Int16(92)&127..=Int16(-35)&127:(-11)|1)], (), (-29), (Int16(72)&127..Int16(-59)&127:(-62)|1), UInt64(Int16(Int8(13))));
        try { // block id: 1003
            ();
            var var1013 : Int64 = (-66);
            if (true) { (var40, 'w', [(Int16(-33)&127..Int16(108)&127:(-45)|1), (Int16(48)&127..Int16(-111)&127:(-106)|1), (Int16(-117)&127..=Int16(-100)&127:(-88)|1), (Int16(-55)&127..Int16(19)&127:62|1), (Int16(67)&127..Int16(-55)&127:12|1), (Int16(-85)&127..=Int16(114)&127:(-15)|1), (Int16(-72)&127..Int16(124)&127:(-33)|1), (Int16(-89)&127..Int16(5)&127:125|1), (Int16(-104)&127..=Int16(24)&127:14|1), (Int16(-19)&127..Int16(100)&127:(-115)|1)], (), var1013, (Int16(61)&127..Int16(-95)&127:63|1), var456) } else { (Int32(-120), 'A', var1021, (), var1013, (Int16(17)&127..Int16(-94)&127:(-115)|1), UInt64(155)) } 
        } finally { // block id: 1063
            var1065;
            var1068
        }[3];
        let var3169 : Range<Int8> = (Int8(102)&127..=Int8(95)&127:41|1);
        let var3183 : ?Range<UInt16> = Option<Range<UInt16>>.None;
        func func1130(namedParam1131 ! : Range<UInt8>) : Array<Bool> { // block id: 1132
            ([(), (), (), (), (), (), (), (), (), ()], var1139, var992)[1][1];
            let var3137 : (Range<UInt16>) -> (Range<Int8>, Range<Int16>, UInt32, Range<Int16>, Float64, UInt16) = func3107;
            let var3148 : ?Bool = Option<Bool>.None;
            let var3217 : Int64 = (-90);
            func func1204(param1205 : Range<Int64>, param1206 : (Int32, String, Float64, Int64, Int32, Float64, Float64, UInt32), param1207 : Option<Option<Array<Bool>>>) : Array<Bool> { // block id: 1208
                var var3242 : ??Array<Unit> = ([true, true, true, true, true, false, false, false, false, true] as Option<Array<Unit>>);
                (match (var594) {
                    case () => 
                        if (var632) { var3148 } else { var3148 } ;
                        var2897;
                        let var3153 : ?Range<UInt16> = Option<Range<UInt16>>.None;
                        var3153
                    
                    case _ : Array<Bool> => 
                        var2520 >>= ((Int16(-65)) & 7);
                        var741++;
                        Option<Range<UInt16>>.Some((UInt16(242)&127..UInt16(195)&127:96|1))
                    
                    case () | () | () | () => 
                        var3169;
                        [var2263, var2263, var1408, var2263, Option<(Unit, String)>.None, Option<(Unit, String)>.None, var1408, var2263, Option<(Unit, String)>.None, Option<(Unit, String)>.None];
                        var3183
                    
                    case _ => 
                        var3183
                    
                } ?? try { // block id: 3189
                    ();
                    let var3233 : Int16 = Int16(UInt8(6));
                    if (var1735) { [var2294, var2294, var2294, (Int16(-19)&127..Int16(-107)&127:(-107)|1), (Int16(118)&127..=Int16(-109)&127:(-59)|1), var2294, (var2520&127..var1953&127:(var1123|1)), (Int16(-33)&127..=Int16(60)&127:28|1), var2294, (Int16(-25)&127..=Int16(-12)&127:(-36)|1)] } else { [(Int16(-105)&127..Int16(109)&127:((-98)|1)), var2294, (var1953&127..var2520&127:(var3217|1)), (var2520&127..=var2520&127:(var3217|1)), var2294, var2294, (Int16(1)&127..=Int16(-22)&127:(var3217|1)), (Int16(93)&127..Int16(56)&127:(-56)|1), (var2520&127..var3233&127:(var3217|1)), (Int16(-30)&127..Int16(13)&127:14|1)] } ;
                    (UInt16(73)&127..UInt16(152)&127:(-48)|1)
                } finally { // block id: 3239
                    var2897;
                    var3242;
                    let var3246 : Range<UInt16> = (UInt16(20)&127..=UInt16(224)&127:(-51)|1);
                    var3246
                })|>(var3137~>func1378);
                var var3255 : ?Array<Unit> = Option<Array<Unit>>.Some([(), (), (), (), (), (), (), (), (), ()]);
                ((var3255 as Unit) ?? (Option<Unit>.None ?? ()));
                [true, false, true, true, false, false, false, false, false, false]
            }
;
            ((var1155 ?? match ([var632, var632, true, var632, true, var632, true, false, true, var632]) {
                case _ => 
                    var var1174 : UInt32 = UInt32(111);
                    var1174 <<= ((var1174) & 7);
                    if (var632) { var1180 } else { Option<Array<Bool>>.None } 
                
            }) ?? func1204((46&127..111&127:(var1123|1)), (Option<(Int32, String, Float64, Int64, Int32, Float64, Float64, UInt32)>.Some((var40, var1564, var1557, var3217, Int32(-21), var2437, var1557, UInt32(93))) ?? (var3101, var1564, var1557, 86, Int32(98), var2437, (-17.0), UInt32(241))), (Option<Option<Array<Bool>>>.None as Option<Array<Bool>>)))
        }
;
        if (try { // block id: 1108
            var632
        } catch (_) { // block id: 1110
            (Int16(-33)&127..Int16(-82)&127:32|1);
            var958 << ((UInt32(253)) & 7);
            true
        }) { // block id: 1116
            ((var958&127..UInt32(198)&127:(var1123|1)), UInt64(241), ())[2]
        } else if (func1130(namedParam1131 : (UInt8(193)&127..=UInt8(71)&127:39|1))[8]) { // block id: 3298

        }
    }
;
    var loopTimeVar3300 : Int64 = 0;
    do {
        loopTimeVar3300++;
        var594;
        func868()
    } while ((var632) && loopTimeVar3300 < 100 ) ;
    95.0
}

public func func855(param856 : UInt64) : String { // block id: 857
    let var3303 : (Option<Option<Range<UInt8>>>) -> Float64 = func860;
    var var3340 : Unit = ();
    match ((match (var1440) {
            case _ => 
                var808
            
        }|>var3303)) {
        case -33.0 | -104.0 | 98.0 | 58.0 => 
            ();
            UInt64(133)
        
        case caseVar3317 : Option<(Unit, String)> => 
            ((UInt32(145)&127..=UInt32(160)&127:(-102)|1), UInt64(236), var2897);
            var var3324 : ?Float64 = ((Int8(UInt8(Int8(45)))&127..Int8(Int8(Int8(-110)))&127:(Int64(UInt8(133))|1)) as Float64);
            var3324;
            var456
        
        case -115.0 | -76.0 => 
            var3340;
            var456
        
        case 119.0 | -18.0 => 
            -UInt64(183)
        
        case _ => 
            ();
            var594;
            UInt64(231)
        
    };
    (if (match (var2442) {
        case (_ : Option<Range<UInt16>>,_ : Float32,_ : Option<Range<Int16>>,caseVar3359,_,_ : Option<Option<(Unit, String)>>,caseVar3360) => 
            var1557 -= var2437;
            var3367 >= var3367
        
        case _ => 
            false
        
    }) { var3376 } else { Option<Option<Array<Unit>>>.None }  ?? if ((true || var1478)) { match (var117) {
        case _ => 
            (Int32(-9)&127..var621&127:(36|1));
            let var3393 : ?Array<Unit> = Option<Array<Unit>>.Some([(), (), (), (), (), (), (), (), (), ()]);
            var3393
        
    } } else { (if (var1735) { var3409 } else { Option<Array<Unit>>.None } ) } );
    if (var1735) { match (((Int8(37)&127..=Int8(108)&127:3|1) as Rune)) {
        case _ => 
            var1702;
            var1564
        
    } } else { ###"pXs6>1kkY9"### } 
}


public func func445(param446 : (Int32, String, Float64, Int64, Int32, Float64, Float64, UInt32)) : Option<Range<UInt16>> { // block id: 447
    let var484 : UInt32 = UInt32(UInt32(UInt32(178)));
    let var506 : Int64 = (-82);
    var var848 : (String) -> Bool = { lambdaParameter851 : String => ([false, false, true, false, false, true, false, true, true, true] is Option<Option<UInt16>>) };
    let var3435 : (UInt64) -> String = func855;
    let var3443 : (UInt8, Range<UInt8>, Float64, Array<Int32>, Int8, Array<Range<Int16>>) = (UInt8(Int8(Int8(UInt8(103)))), (UInt8(197)&127..=UInt8(102)&127:(-1)|1), 42.0, [Int32(UInt32(30)), Int32(Int8(46)), Int32(UInt32(172)), Int32(Int32(UInt8(200))), Int32(UInt8(Int8(-37))), Int32(Int32(115)), Int32(UInt8(UInt8(4))), Int32(94), Int32(-90), Int32(UInt8(UInt8(139)))], Int8(UInt8(Int8(UInt8(80)))), [(Int16(17)&127..=Int16(-17)&127:8|1), (Int16(119)&127..Int16(UInt16(106))&127:(Int64(UInt32(122))|1)), (Int16(-73)&127..Int16(-96)&127:(39|1)), (Int16(Int8(-120))&127..=Int16(Int8(-12))&127:(62|1)), (Int16(Int16(58))&127..=Int16(UInt16(65))&127:(Int64(UInt8(234))|1)), (Int16(84)&127..Int16(UInt8(60))&127:(Int64(Int16(95))|1)), (Int16(UInt8(21))&127..Int16(UInt16(105))&127:(Int64(UInt32(112))|1)), (Int16(-29)&127..Int16(125)&127:(Int64(UInt16(238))|1)), (Int16(43)&127..=Int16(-85)&127:36|1), (Int16(Int16(13))&127..Int16(UInt16(125))&127:((-75)|1))]);
    if ((try { // block id: 451
        ();
        ((UInt32(63)&127..=UInt32(196)&127:80|1), var456, ())
    } catch (_) { // block id: 463
        ();
        let var478 : Unit = ();
        if (true) { (var469, var456, var478) } else { ((UInt32(172)&127..=var484&127:((-117)|1)), var456, ()) } 
    } finally { // block id: 491
        if (true) { var495 } else { (var40&127..var40&127:(var506|1)) } ;
        var117
    } is Option<Option<Option<UInt16>>>)) { // block id: 509
        Option<UInt16>.Some(var195)|>func124
    } else if ((var456 >> ((var456) & 7)|>(var3435~>var848))) { // block id: 3440
        var var3535 : Int8 = Int8(UInt8(189));
        match (var3443) {
            case _ => 
                var var3543 : Int8 = Int8(Int8(UInt8(UInt8(192))));
                if (var1735) { [var1065, var3535, Int8(65), var3535, Int8(-124), Int8(-54), var3543, Int8(28), Int8(-28), Int8(-84)] } else { [var3535, Int8(10), var3535, Int8(27), Int8(113), Int8(114), var1065, var3535, Int8(-86), var3535] } 
            
        };
        var1065
    } else { // block id: 3563
        var loopTimeVar3571 : Int64 = 0;
        do {
            loopTimeVar3571++;
            var2190 >>= ((var958) & 7)
        } while ((var1735) && loopTimeVar3571 < 100 ) ;
        var loopTimeVar3580 : Range<UInt64> = (UInt64(68)&127..=UInt64(252)&127:(Int64(UInt8(UInt8(Int8(-1))))|1));
        for (i in loopTimeVar3580 where true) {
            var2540;
            ([(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [Int8(22), Int8(67), Int8(30), Int8(-121), Int8(116), Int8(-23), Int8(17), Int8(29), Int8(-57), Int8(-33)])
        };
        match (Option<Unit>.Some(())) {
            case caseVar3593 : Option<Option<Option<UInt16>>> => 
                Int8(-63) / ((var1065) | 1)
            
            case _ => 
                var594;
                var1065
            
            case caseVar3605 => 
                var2190 %= ((UInt32(165)) | 1);
                ();
                Int8(102)
            
            case _ => 
                ();
                var621 >> ((Int32(79)) & 7);
                Int8(-1)
            
        }
    };
    var var3652 : ?Range<UInt16> = Option<Range<UInt16>>.Some((UInt16(103)&127..UInt16(202)&127:13|1));
    if (try { // block id: 3621
        true
    } catch (_) { // block id: 3623
        var2065;
        var var3627 : Int64 = Int64(Int32(Int8(-116)));
        var3627 |= var506;
        var2082
    } finally { // block id: 3633
        var3635;
        let var3646 : Unit = ();
        var3646;
        var40 < Int32(-121)
    }) { var3652 } else { (if (if (true) { // block id: 3658
        var3661 = false;
        (-18);
        var3661
    } else if (false) { // block id: 3668
        Option<Bool>.None;
        Option<Float32>.None;
        var2023 <= Float32(99.0)
    } else { // block id: 3674
        Float32(-78.0) - var3367;
        var594;
        var1735
    }) { var3652 } else { (Option<Option<Range<UInt16>>>.None ?? var3652) } ) } 
}

func func435(param436 : Range<UInt32>) : Option<Range<UInt16>> { // block id: 437
    let var440 : Bool = (UInt8(Int8(-60)) is (Int32) -> Int8);
    var var3689 : ((Int32, String, Float64, Int64, Int32, Float64, Float64, UInt32)) -> Option<Range<UInt16>> = func445;
    var var3692 : (Int32, String, Float64, Int64, Int32, Float64, Float64, UInt32) = (Int32(29), """
^Pq\"P
'*&\\z
""", Float64(Float32(95.0)), (-70), Int32(UInt8(Int8(UInt8(192)))), (-50.0), (-3.0), UInt32(Int8(UInt8(205))));
    let var3717 : Option<Option<Range<UInt16>>> = Option<Option<Range<UInt16>>>.None;
    var var3727 : ?Range<UInt16> = (Option<Enum1217>.Some(Enum1217.defaultValue) as Range<UInt16>);
    if (var440) { (var3692|>var3689) } else { (try { // block id: 3710
        var2040;
        (Int8(-111)&127..var1065&127:(25|1));
        var3717
    } catch (_) { // block id: 3719
        if (false) { var3717 } else { var3717 } 
    } ?? if (false) { var3727 } else { Option<Range<UInt16>>.None } ) } 
}


func func426(param427 : Range<UInt64>) : Range<Int16> { // block id: 428
    let var3733 : (Range<UInt32>) -> Option<Range<UInt16>> = func435;
    ((try { // block id: 3736
        var2897;
        (UInt32(238)&127..var2190&127:(var1123|1))
    } finally { // block id: 3742
        (UInt32(234)&127..=UInt32(100)&127:31|1)
    }|>var3733) ?? (UInt16(UInt8(85))&127..UInt16(Int16(79))&127:((var3755 ?? var1123)|1)));
    let var3760 : Range<Int16> = (Int16(UInt16(141))&127..Int16(UInt8(Int8(UInt8(45))))&127:(Int64(UInt16(Int8(94)))|1));
    var3760
}


public func func12() : Bool { // block id: 13
    let var284 : Bool = (UInt64(UInt64(77)) is String);
    let var399 : Int16 = Int16(-20);
    let var415 : Unit = ();
    let var3782 : Option<Array<UInt64>> = Option<Array<UInt64>>.None;
    var loopTimeVar3806 : Int64 = 0;
    do {
        loopTimeVar3806++;
        let var311 : Int64 = (-80);
        let var320 : Int16 = Int16(Int16(-127));
        let var375 : UInt64 = UInt64(167);
        let var388 : UInt32 = UInt32(Int16(UInt16(UInt8(UInt8(71)))));
        func func267(namedParam268 ! : Range<Int64>, namedParam269 ! : Range<Int32>, namedParam270 ! : (String) -> Int8) : Unit { // block id: 273
            var var276 : Int16 = Int16(UInt16(150));
            var276++;
            var var300 : Range<Int16> = (Int16(-97)&127..Int16(41)&127:(-67)|1);
            var var344 : (Range<Int8>, Range<Int16>, UInt32, Range<Int16>, Float64, UInt16) = ((Int8(15)&127..Int8(-5)&127:((-57)|1)), (Int16(UInt8(144))&127..=Int16(Int8(UInt8(247)))&127:(25|1)), UInt32(Int32(27)), (Int16(-23)&127..=Int16(UInt16(Int8(-122)))&127:(14|1)), (-2.0), UInt16(15));
            [if (var284) { (Int16(-3)&127..Int16(-67)&127:(-113)|1) } else { (Int16(79)&127..=Int16(-19)&127:((-87)|1)) } , (Int16(-25)&127..var276&127:((-69)|1)), [var300, (Int16(-79)&127..=Int16(54)&127:(50|1)), (Int16(88)&127..Int16(106)&127:93|1), (var276&127..=Int16(-127)&127:(var311|1)), var300, var300, var300, (Int16(121)&127..=Int16(-109)&127:(-16)|1), (Int16(25)&127..=Int16(76)&127:(-79)|1), (var320&127..var320&127:(56|1))][2], (var320&127..=Int16(-59)&127:(var311|1)), (Option<Range<Int16>>.Some((var320&127..=var320&127:((-4)|1))) ?? var300), var344[3], var300, try { // block id: 370
                if (true) { (var375&127..var375&127:((-114)|1)) } else { (var375&127..var375&127:(36|1)) } ;
                var var385 : UInt32 = UInt32(7);
                var385 &= var388;
                (Int16(-50)&127..Int16(89)&127:108|1)
            } catch (e: Exception) { // block id: 395
                (var320&127..=var399&127:(35|1))
            } finally { // block id: 402
                (Int16(35)&127..Int16(-2)&127:((-115)|1))
            }, try { // block id: 408
                (Int16(-63)&127..Int16(89)&127:(126|1))
            } finally { // block id: 413
                var415;
                (UInt32(133)&127..UInt32(136)&127:15|1);
                if (var284) { (Int16(-77)&127..Int16(-4)&127:92|1) } else { (var399&127..var399&127:(var311|1)) } 
            }, ((UInt64(121)&127..=UInt64(73)&127:(-69)|1)|>func426)][1];
            var loopTimeVar3789 : Range<UInt64> = (UInt64(80)&127..=UInt64(125)&127:(Int64(Int32(UInt32(UInt32(83))))|1));
            for (i in loopTimeVar3789 where match ((var3782 ?? var2764)) {
                case _ => 
                    false
                
            }) {

            }
        }
;
        let var3803 : (String) -> Int8 = func30;
        func267(namedParam268 : (90&127..(-66)&127:(-20)|1), namedParam269 : (Int32(99)&127..=Int32(1)&127:(var1123|1)), namedParam270 : var3803)
    } while (((UInt64(66) | UInt64(86)|>func16)) && loopTimeVar3806 < 100 ) ;
    var var3892 : ?Array<Bool> = ((Option<Option<Array<Unit>>>.None as Option<Range<UInt16>>) as Array<Bool>);
    (try { // block id: 3809
        let var3814 : Array<Bool> = Array<Bool>(10){ i => (Int32(64) is Array<Unit>) };
        if (var1735) { Option<Array<Bool>>.Some(var3814) } else { var3892 } 
    } catch (e: Exception) { // block id: 3896
        var3892
    } finally { // block id: 3898
        ();
        Option<Array<Bool>>.None
    } is () -> Enum1217)
}


main(): Int64 {
    try {
        var7;
        if (func12()) { // block id: 3901
            ###"~b29r;U[Jb"###;
            (-52) ** ((-8) & 3)
        } else if ((Option<Bool>.None ?? true)) { // block id: 3913
            var594;
            var2856;
            (-101) << (((-49)) & 7)
        } else { // block id: 3919
            71 + (-55)
        }
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Enum1217 {

}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_trailing_closure_only_follow_name
// ASSERT: scan parse_expected_expr_or_decl_in
// ASSERT: scan parse_expected_catch_or_finally_in_try
// ASSERT: scan parse_expected_case


