/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output


public var var38 : Bool = true
var var52 : UInt16 = UInt16(Int16(-110))
var var63 : Int16 = Int16(UInt16(220))
var var74 : Float32 = Float32(-14.0)
public let var107 : ?UInt32 = Option<UInt32>.None
var var125 : Int8 = Int8(-55)
var var129 : UInt32 = UInt32(108)
public var var170 : Range<UInt8> = (UInt8(30)&127..=UInt8(173)&127:113|1)
public var var319 : UInt64 = UInt64(18)
var var335 : Unit = ()
public let var341 : (Bool, Range<UInt64>, Float64) = (((UInt8(58)&127..UInt8(120)&127:(Int64(Int16(43))|1)) is Range<UInt16>), (UInt64(Int16(UInt8(12)))&127..=UInt64(UInt16(UInt16(254)))&127:((-32)|1)), Float64(Float64((-75.0))))
let var420 : UInt8 = UInt8(59)
var var426 : UInt16 = UInt16(148)
public let var449 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
let var463 : Bool = false
public let var479 : Array<Range<UInt64>> = Array<Range<UInt64>>(10){ i => (UInt64(UInt16(181))&127..=UInt64(218)&127:(Int64(UInt16(Int16(69)))|1)) }
var var532 : Float64 = (-118.0)
let var603 : Unit = ()
let var629 : ?Bool = Option<Bool>.None
public let var634 : Bool = ([(), (), (), (), (), (), (), (), (), ()] is Option<Bool>)
public let var728 : Range<Int64> = ((-14)&127..=Int64(UInt64(245))&127:(Int64(36)|1))
public let var759 : Range<UInt64> = (UInt64(192)&127..=UInt64(151)&127:31|1)
var var791 : ?Unit = Option<Unit>.None
var var851 : Enum7 = Enum7.defaultValue
public var var857 : ?Int8 = ([(UInt64(76)&127..UInt64(3)&127:(Int64(UInt16(68))|1)), (UInt64(196)&127..UInt64(231)&127:58|1), (UInt64(175)&127..=UInt64(108)&127:(-78)|1), (UInt64(140)&127..UInt64(53)&127:(-55)|1), (UInt64(1)&127..=UInt64(240)&127:(Int64((-110))|1)), (UInt64(180)&127..UInt64(Int16(-5))&127:(Int64(Int32(-35))|1)), (UInt64(63)&127..=UInt64(177)&127:23|1), (UInt64(124)&127..UInt64(167)&127:((-1)|1)), (UInt64(70)&127..UInt64(62)&127:90|1), (UInt64(102)&127..UInt64(154)&127:73|1)] as Int8)
let var982 : Unit = ()
var var1017 : Range<Int8> = (Int8(-55)&127..=Int8(-101)&127:(27|1))
public var var1062 : Int32 = Int32(-85)
public var var1098 : Unit = ()
let var1117 : Unit = ()
public var var1302 : ((Int8, Range<Int64>, Float32, Array<Array<Unit>>, Array<Range<UInt8>>, Float32, Bool), UInt8, Int64, Unit, Unit, (Range<UInt32>, UInt64, Range<Int32>, Float64, Range<Int32>, Rune, Rune), UInt8, Bool) = ((Int8(UInt8(Int8(23))), (38&127..46&127:(-16)|1), Float32(Float32(Float32(-90.0))), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], [(UInt8(158)&127..=UInt8(143)&127:117|1), (UInt8(43)&127..=UInt8(91)&127:(-49)|1), (UInt8(159)&127..=UInt8(148)&127:125|1), (UInt8(95)&127..=UInt8(201)&127:(-54)|1), (UInt8(180)&127..=UInt8(152)&127:(-29)|1), (UInt8(225)&127..=UInt8(87)&127:51|1), (UInt8(69)&127..=UInt8(87)&127:5|1), (UInt8(177)&127..=UInt8(176)&127:120|1), (UInt8(51)&127..=UInt8(164)&127:(-20)|1), (UInt8(52)&127..=UInt8(213)&127:(-26)|1)], Float32(Float32(Float32(38.0))), ((Int32(68)&127..=Int32(118)&127:(-96)|1) is Option<UInt32>)), UInt8(70), (-123), (), (), ((UInt32(218)&127..=UInt32(55)&127:14|1), UInt64(Int32(-74)), (Int32(-43)&127..Int32(-15)&127:122|1), (-115.0), (Int32(Int8(-121))&127..=Int32(-122)&127:(16|1)), 'q', 'L'), UInt8(Int8(UInt8(UInt8(106)))), ((UInt8(74)&127..=UInt8(210)&127:23|1) is Range<Int8>))
let var1758 : (Range<UInt32>, UInt64, Range<Int32>, Float64, Range<Int32>, Rune, Rune) = ((UInt32(Int8(Int8(37)))&127..=UInt32(113)&127:(Int64(Int16(Int16(15)))|1)), UInt64(UInt16(Int8(UInt8(210)))), (Int32(81)&127..Int32(-14)&127:(-23)|1), Float64(Float32(-97.0)), (Int32(-63)&127..Int32(60)&127:(-34)|1), 'Y', 'K')
let var1913 : (Option<Unit>, Int16) = (Option<Unit>.None, Int16(UInt16(Int16(30))))
var var1920 : Array<Array<Unit>> = [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]]
public var var2011 : Array<Option<UInt32>> = Array<Option<UInt32>>(10){ i => ([(), (), (), (), (), (), (), (), (), ()] as UInt32) }
public let var2096 : Range<UInt8> = (UInt8(116)&127..UInt8(Int8(39))&127:(41|1))
public let var2108 : UInt8 = UInt8(Int8(16))
let var2120 : String = "xNDiGbIV5M"
var var2156 : ?UInt32 = ((68&127..(-124)&127:(-38)|1) as UInt32)
public var var2170 : Range<UInt32> = (UInt32(26)&127..UInt32(UInt16(UInt16(112)))&127:(Int64(UInt8(UInt8(UInt8(66))))|1))
let var2275 : Range<Int16> = (Int16(-77)&127..=Int16(113)&127:(-99)|1)
public var var2289 : Int64 = 110
let var2476 : Float32 = Float32(Float32(Float32(13.0)))
public var var2496 : ?Enum7 = Option<Enum7>.None
var var2554 : Int8 = Int8(Int8(Int8(UInt8(248))))
public var var2683 : Array<Range<UInt8>> = [(UInt8(154)&127..UInt8(180)&127:(-94)|1), (UInt8(96)&127..UInt8(158)&127:51|1), (UInt8(134)&127..UInt8(81)&127:91|1), (UInt8(38)&127..UInt8(104)&127:(-69)|1), (UInt8(195)&127..UInt8(239)&127:43|1), (UInt8(172)&127..=UInt8(150)&127:45|1), (UInt8(47)&127..=UInt8(132)&127:10|1), (UInt8(141)&127..UInt8(66)&127:94|1), (UInt8(228)&127..UInt8(6)&127:(-70)|1), (UInt8(160)&127..=UInt8(112)&127:(-64)|1)]
public let var2687 : Int32 = Int32(-119)
public var var2701 : (String, Int8, Range<UInt16>, Bool, Int8) = ("""
bDFb4
(Yd${var2120}LX
""", Int8(Int8(Int8(18))), (UInt16(251)&127..=UInt16(47)&127:(-83)|1), false, Int8(47))
public let var2728 : Option<Range<Int32>> = Option<Range<Int32>>.None
public enum Enum7 {
    defaultValue
}



public interface Interface281 {
    func func452(namedParam453 ! : Array<Bool>, namedParam454 ! : Range<UInt8>) : Bool 

}

public interface Interface282<T0, T1> {
    func func452(namedParam453 ! : Array<Bool>, namedParam454 ! : Range<UInt8>) : Bool 

}

public open class Class278 <: Interface281 & Interface282<Aggregate1147<UInt8, Range<UInt16>, Range<Int64>>, Enum7> & Resource {
    public init() { // block id: 280

    }
;
    public static let var386 : Array<Option<Unit>> = [Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None];
    public init(namedParam375 ! : Option<UInt32>, optionalParam376 ! : Array<Bool> = [false, false, false, false, true, true, true, false, false, false], optionalParam378 ! : UInt8 = UInt8(Int8(-72))) { // block id: 381
        match (var386[9]) {
            case _ => 
                [(), (), (), (), (), (), (), (), (), ()]
            
        }
    }
;
    public open func func452(namedParam453 ! : Array<Bool>, namedParam454 ! : Range<UInt8>) : Bool { // block id: 455
        var38
    }
;
    public var var2748 : Float64 = (-88.0)
    public func isClosed(): Bool { return true }
    public func close(): Unit {}
}

public func func305(param306 : Class278) : UInt64 { // block id: 307
    ();
    ();
    try { // block id: 312
        var var315 : Float64 = (-104.0);
        var315 /= Float64((Int32(21.0)) | 1);
        var319
    } catch (_) { // block id: 321
        let var325 : Bool = false;
        var38 &&= var325;
        UInt64(91)
    } ^ if ([true, true, false, true, true, true, true, true, false, false][3]) { // block id: 333
        var335;
        UInt64(252)
    } else if (var341[0]) { // block id: 361
        var319 * UInt64(167)
    } else { // block id: 365
        var335;
        UInt64(199)
    }
}


func func551(param559 : Int16, param560 : String, param561 : Array<Array<Unit>>) : Array<Array<Unit>> { // block id: 562
    match (Option<UInt32>.Some(var129)) {
        case _ => 
            (Int8(-50), (17&127..(-56)&127:114|1), var74, [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], [(UInt8(232)&127..=UInt8(143)&127:23|1), (UInt8(237)&127..=UInt8(230)&127:(-79)|1), (UInt8(111)&127..UInt8(138)&127:(-58)|1), (UInt8(227)&127..UInt8(125)&127:(-93)|1), (UInt8(179)&127..=UInt8(231)&127:92|1), (UInt8(6)&127..UInt8(250)&127:65|1), (UInt8(145)&127..UInt8(100)&127:63|1), (UInt8(248)&127..UInt8(40)&127:68|1), (UInt8(214)&127..=UInt8(166)&127:97|1), (UInt8(27)&127..=UInt8(180)&127:99|1)], Float32(14.0), var38)
        
    }[3]
}


public func func709(param710 : Range<UInt32>) : Range<UInt32> { // block id: 711
    var loopTimeVar737 : Int64 = 0;
    do {
        loopTimeVar737++;
        var728;
        var603
    } while ((try { // block id: 714
        var463
    } catch (_) { // block id: 716
        var335;
        if (var463) { Option<Bool>.Some(var463) } else { var629 } ;
        var463
    } finally { // block id: 724
        var38
    }) && loopTimeVar737 < 100 ) ;
    var var739 : Range<UInt16> = (UInt16(220)&127..UInt16(Int16(UInt8(Int8(71))))&127:((-112)|1));
    var739;
    var var807 : ?Class278 = Option<Class278>.None;
    match (try { // block id: 749
            UInt64(123);
            let var772 : Int64 = Int64(Int64(UInt64(UInt64(UInt64(11)))));
            [(UInt64(237)&127..=UInt64(61)&127:95|1), (UInt64(152)&127..UInt64(65)&127:96|1), (UInt64(90)&127..=var319&127:(81|1)), var759, (UInt64(91)&127..var319&127:((-54)|1)), (UInt64(183)&127..UInt64(244)&127:(-48)|1), var759, (UInt64(62)&127..UInt64(106)&127:(-36)|1), (var319&127..=var319&127:(var772|1)), (var319&127..UInt64(147)&127:((-105)|1))]
        } finally { // block id: 782
            var var785 : ?Unit = Option<Unit>.Some(());
            [var785, Option<Unit>.Some(var603), var791, Option<Unit>.Some(var603), Option<Unit>.None, var785, Option<Unit>.Some(var335), Option<Unit>.None, var785, var785];
            if (false) { Option<Class278>.Some(Class278()) } else { var807 } ;
            if (false) { [(UInt64(116)&127..UInt64(32)&127:58|1), (UInt64(45)&127..UInt64(137)&127:(-41)|1), (UInt64(95)&127..UInt64(98)&127:(-100)|1), (UInt64(202)&127..=UInt64(97)&127:(-84)|1), (UInt64(83)&127..=UInt64(167)&127:(-56)|1), (UInt64(204)&127..UInt64(238)&127:29|1), (UInt64(237)&127..UInt64(157)&127:112|1), (UInt64(59)&127..UInt64(97)&127:101|1), (UInt64(251)&127..UInt64(137)&127:(-3)|1), (UInt64(173)&127..UInt64(241)&127:(-16)|1)] } else { var479 } 
        }) {
        case _ => 
            var var821 : Int64 = Int64(Int8(UInt8(76)));
            if (false) { (var129&127..=UInt32(215)&127:(var821|1)) } else { (var129&127..UInt32(1)&127:(var821|1)) } 
        
    }
}

public func func551(param552 : Range<UInt32>) : Enum7 { // block id: 553
    func551(Int16(-80), "l;R. 3 Na{P", [[(), (), (), (), (), (), (), (), (), ()], var449, [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [var335, (), var335, var335, (), (), var335, (), var335, var335], var449, [(), var335, var335, var603, (), var603, (), var603, (), var603], var449, var449, var449])[0][9];
    let var656 : (Range<UInt32>, UInt64, Range<Int32>, Float64, Range<Int32>, Rune, Rune) = ((UInt32(143)&127..=UInt32(167)&127:(-12)|1), UInt64((-97)), (Int32(87)&127..Int32(108)&127:(-119)|1), Float64(Float32(-85.0)), (Int32(110)&127..=Int32(110)&127:35|1), 'X', 'X');
    var loopTimeVar669 : Int64 = 0;
    do {
        loopTimeVar669++;
        var656[2]
    } while ((if (var463) { // block id: 619
        Option<Unit>.None;
        UInt32(42);
        false
    } else if ((var629 ?? var463)) { // block id: 632
        var634
    } else { // block id: 647
        var125 >>= ((var125) & 7);
        var463
    }) && loopTimeVar669 < 100 ) ;
    var var680 : UInt64 = UInt64(94);
    let var700 : UInt16 = UInt16(81);
    let var703 : Unit = ();
    try { // block id: 671
        var var684 : Int32 = Int32(35);
        var var691 : Rune = 's';
        try (resource = Class278()) { // block id: 673
            if (var38) { var656 } else { (param552, var680, (var684&127..Int32(63)&127:(74|1)), (-61.0), (Int32(65)&127..=Int32(-125)&127:54|1), var691, 'Z') } ;
            true;
            ()
        } finally { // block id: 696
            var52 <<= ((var700) & 7);
            var703;
            var125 **= (Int8(60) & 3)
        };
        var var830 : (Range<UInt32>) -> Range<UInt32> = { lambdaParameter833 : Range<UInt32> => (UInt32(204)&127..=UInt32(246)&127:71|1) };
        (UInt32(106)&127..UInt32(13)&127:(-72)|1)|>var830;
        let var847 : Int64 = Int64(Int16(76));
        match ((33&127..(-16)&127:(-105)|1)) {
            case caseVar841 => 
                (UInt8(88)&127..var420&127:(var847|1));
                var851
            
            case _ => 
                var335;
                var857;
                Enum7.defaultValue
            
        }
    } finally { // block id: 887
        Enum7.defaultValue
    }
}


public func func273<T0, T1>(param274 : Unit) : Option<Int8> where T0 <: Int16, T1 <: Array<Range<UInt64>> { // block id: 275
    func func284(param285 : Range<Int32>, param286 : Option<Int8>, optionalParam287 ! : Array<Unit> = Array<Unit>(10){ i => () }, namedParam299 ! : Array<Unit>) : Class278 { // block id: 300
        ();
        var var369 : (Class278) -> UInt64 = func305;
        let var432 : Range<Int64> = (Int64(Int8(UInt8(129)))&127..17&127:(69|1));
        try { // block id: 303
            var var372 : Class278 = Class278(namedParam375 : Option<UInt32>.Some(UInt32(77)), optionalParam378 : UInt8(162));
            var372|>var369;
            var loopTimeVar410 : Int64 = 0;
            do {
                loopTimeVar410++;
                ()
            } while ((var38) && loopTimeVar410 < 100 ) ;
            (Option<Class278>.Some(Class278(namedParam375 : Option<UInt32>.None, optionalParam378 : var420)) ?? var372)
        } catch (e: Exception) { // block id: 423
            var426 ^= var426;
            if (false) { var432 } else { var432 } ;
            if (var38) { Class278(namedParam375 : var107) } else { Class278() } 
        }
    }
;
    var loopTimeVar473 : Int64 = 0;
    while ((func284((Int32(75)&127..=Int32(-47)&127:(-46)|1), Option<Int8>.None, namedParam299 : var449).func452(namedParam453 : [var38, var38, var38, var38, var463, var463, var38, false, false, true], namedParam454 : var170)) && loopTimeVar473 < 100 ) {
        loopTimeVar473++;

    };
    try { // block id: 475
        var479[4];
        try { // block id: 512
            ();
            var426 ^= var426;
            UInt32(5)
        } catch (e: Exception) { // block id: 518
            var var521 : Int32 = Int32(UInt8(UInt8(168)));
            var521 >>= ((var521) & 7);
            UInt32(248)
        }
    } catch (_) { // block id: 527
        var129
    } finally { // block id: 529
        var532 = 121.0;
        [var129, var129, var129, var129, UInt32(254), var129, UInt32(254), UInt32(130), var129, UInt32(14)][9]
    };
    var var1002 : Range<UInt32> = (UInt32(80)&127..UInt32(UInt32(135))&127:(Int64(UInt16(57))|1));
    match ((try { // block id: 987
            let var996 : Unit = ();
            [(), (), var982, (), (), var603, var996, var335, (), ()];
            var1002
        } catch (e: Exception) { // block id: 1009
            if (var634) { (var125&127..=Int8(-44)&127:(119|1)) } else { var1017 } ;
            ();
            if (var463) { (UInt32(240)&127..UInt32(146)&127:(31|1)) } else { (UInt32(227)&127..var129&127:((-66)|1)) } 
        }|>{ lambdaParameter891 : Range<UInt32> => (try { // block id: 899
            var var901 : (Int8, Range<Int64>, Float32, Array<Array<Unit>>, Array<Range<UInt8>>, Float32, Bool) = (Int8(54), (64&127..Int64(UInt32(103))&127:(Int64(Int16(Int8(121)))|1)), Float32(Float32(83.0)), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], [(UInt8(71)&127..UInt8(115)&127:(-50)|1), (UInt8(63)&127..=UInt8(172)&127:6|1), (UInt8(124)&127..UInt8(92)&127:34|1), (UInt8(206)&127..UInt8(109)&127:94|1), (UInt8(114)&127..=UInt8(2)&127:(-103)|1), (UInt8(233)&127..=UInt8(101)&127:65|1), (UInt8(91)&127..=UInt8(100)&127:(-77)|1), (UInt8(122)&127..=UInt8(33)&127:59|1), (UInt8(84)&127..UInt8(158)&127:113|1), (UInt8(218)&127..=UInt8(68)&127:105|1)], Float32(Float32(-98.0)), false);
            var901;
            ();
            Option<Enum7>.None
        } finally { // block id: 980
            var982;
            Option<Enum7>.None
        } ?? var851) })) {
        case defaultValue => 
            if (true) { (UInt64(231)&127..=UInt64(221)&127:((-14)|1)) } else { (UInt64(194)&127..=UInt64(249)&127:104|1) } ;
            var857
        
        case _ : Array<Range<UInt64>> => 
            var857
        
        case caseVar1050 : Bool => 
            var603;
            if (true) { Option<Int8>.Some(Int8(-114)) } else { var857 } 
        
        case _ => 
            var1062 >>= ((Int32(-35)) & 7);
            if (var38) { var857 } else { Option<Int8>.None } 
        
    }
}

public struct Aggregate1147<T0, T1, T2> {
    init() { // block id: 1149

    }
;
    private static let var1267 : Int64 = 5;
    static func func1152(param1153 : String, namedParam1154 ! : (Range<UInt32>) -> Range<UInt32>, optionalParam1157 ! : (Int16, String, Array<Array<Unit>>) -> Array<Array<Unit>> = func551) : UInt64 { // block id: 1163
        var var1167 : ((Int8, Range<Int64>, Float32, Array<Array<Unit>>, Array<Range<UInt8>>, Float32, Bool), UInt8, Int64, Unit, Unit, (Range<UInt32>, UInt64, Range<Int32>, Float64, Range<Int32>, Rune, Rune), UInt8, Bool) = ((Int8(UInt8(127)), (Int64(Int32(-46))&127..=Int64(Int8(-119))&127:(Int64(Int8(-22))|1)), Float32(Float32(-74.0)), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], [(UInt8(236)&127..UInt8(249)&127:75|1), (UInt8(149)&127..UInt8(240)&127:(-33)|1), (UInt8(22)&127..=UInt8(222)&127:19|1), (UInt8(239)&127..UInt8(100)&127:(-88)|1), (UInt8(187)&127..UInt8(199)&127:113|1), (UInt8(11)&127..UInt8(174)&127:(-73)|1), (UInt8(33)&127..=UInt8(152)&127:(-55)|1), (UInt8(243)&127..UInt8(250)&127:37|1), (UInt8(74)&127..UInt8(21)&127:(-28)|1), (UInt8(130)&127..=UInt8(75)&127:(-13)|1)], Float32(100.0), (Option<Int8>.None is (Range<UInt32>) -> Range<UInt32>)), UInt8(20), (-127), (), (), ((UInt32(178)&127..=UInt32(96)&127:((-57)|1)), UInt64(249), (Int32(74)&127..=Int32(-103)&127:110|1), Float64((-45.0)), (Int32(UInt8(43))&127..Int32(UInt16(129))&127:(96|1)), '3', 'H'), UInt8(UInt8(144)), false);
        var1167[3];
        var var1609 : Class278 = Class278(namedParam375 : Option<UInt32>.None, optionalParam376 : [((UInt32(247)&127..UInt32(27)&127:(109|1)) is (Int8, Range<Int64>, Float32, Array<Array<Unit>>, Array<Range<UInt8>>, Float32, Bool)), true, (42.0 is Option<Class278>), ("""
.tgoj
X=|?^
""" is Array<Bool>), true, true, ([(UInt8(144)&127..=UInt8(73)&127:7|1), (UInt8(204)&127..=UInt8(214)&127:(-27)|1), (UInt8(214)&127..UInt8(129)&127:(-100)|1), (UInt8(183)&127..UInt8(52)&127:(-124)|1), (UInt8(97)&127..UInt8(117)&127:71|1), (UInt8(215)&127..=UInt8(7)&127:45|1), (UInt8(25)&127..UInt8(214)&127:58|1), (UInt8(240)&127..=UInt8(221)&127:(-106)|1), (UInt8(72)&127..UInt8(30)&127:7|1), (UInt8(244)&127..UInt8(14)&127:121|1)] is Rune), false, false, true]);
        let var1677 : Unit = ();
        func func1637(param1638 : Array<Array<Unit>>, param1639 : Range<UInt16>, optionalParam1640 ! : (Class278) -> UInt64 = { lambdaParameter1643 : Class278 => UInt64(55) }) : (Option<Unit>, Int16) { // block id: 1648
            var var1699 : Unit = ();
            let var1714 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
            let var1732 : Range<UInt8> = (UInt8(145)&127..UInt8(UInt8(UInt8(UInt8(203))))&127:(Int64(UInt8(125))|1));
            try { // block id: 1650
                ();
                var603;
                ((Int8(-103), ((-54)&127..var1267&127:(var1267|1)), var74, [[(), (), (), (), (), (), (), (), (), ()], [(), (), var335, var1098, var1117, var603, var603, var335, var335, ()], [var982, var1677, var603, (), var603, (), (), var335, (), var982], var449, [(), var1117, var603, var1677, (), var1677, var982, (), var1098, var1699], var449, [(), (), (), (), var1677, var1117, var982, var1117, (), var1098], var1714, var449, var449], [(UInt8(156)&127..UInt8(30)&127:(-58)|1), (UInt8(14)&127..UInt8(25)&127:(-35)|1), var1732, (UInt8(47)&127..=UInt8(229)&127:(-10)|1), var1732, var170, (UInt8(122)&127..UInt8(162)&127:10|1), (var420&127..=UInt8(218)&127:(var1267|1)), var1732, (UInt8(161)&127..=UInt8(250)&127:(-52)|1)], Float32(67.0), var634), UInt8(186), 96, var603, (), var1758, UInt8(41), false)
            } catch (_) { // block id: 1780
                var loopTimeVar1785 : Range<UInt64> = (UInt64(192)&127..UInt64(UInt64(Int8(-97)))&127:(3|1));
                for (i in loopTimeVar1785 where true) {
                    var1699
                };
                var1302
            };
            let var1799 : Option<(Option<Unit>, Int16)> = ([Option<Unit>.Some(()), (((Int8(5), (124&127..(-92)&127:(44|1)), Float32(93.0), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], [(UInt8(77)&127..=UInt8(79)&127:((-44)|1)), (UInt8(167)&127..UInt8(60)&127:(30|1)), (UInt8(154)&127..=UInt8(232)&127:((-17)|1)), (UInt8(214)&127..=UInt8(93)&127:(0|1)), (UInt8(217)&127..=UInt8(96)&127:43|1), (UInt8(31)&127..UInt8(44)&127:((-50)|1)), (UInt8(142)&127..=UInt8(102)&127:97|1), (UInt8(75)&127..UInt8(212)&127:(30|1)), (UInt8(52)&127..UInt8(96)&127:(-71)|1), (UInt8(157)&127..UInt8(250)&127:(-58)|1)], Float32(105.0), true), UInt8(250), (-62), (), (), ((UInt32(12)&127..UInt32(186)&127:(8|1)), UInt64(239), (Int32(-33)&127..Int32(-114)&127:(30|1)), 119.0, (Int32(-120)&127..=Int32(1)&127:((-88)|1)), 'p', 'C'), UInt8(222), true) as Unit), Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.Some(()), (Option<Class278>.Some(Class278(namedParam375 : Option<UInt32>.None)) as Unit), (UInt64(Int32(21)) as Unit), ((Option<Unit>.Some(()), Int16(37)) as Unit), (Enum7.defaultValue as Unit)] as (Option<Unit>, Int16));
            (var1799 ?? match (try { // block id: 1889
                    (Int8(26), var728, Float32(-19.0), param1638, [(UInt8(231)&127..UInt8(233)&127:(-24)|1), (UInt8(4)&127..=UInt8(125)&127:(-106)|1), (UInt8(30)&127..UInt8(99)&127:(-60)|1), (UInt8(230)&127..UInt8(207)&127:40|1), (UInt8(22)&127..=UInt8(12)&127:(-58)|1), (UInt8(221)&127..=UInt8(62)&127:15|1), (UInt8(30)&127..UInt8(5)&127:(-104)|1), (UInt8(128)&127..UInt8(8)&127:102|1), (UInt8(225)&127..UInt8(137)&127:22|1), (UInt8(128)&127..UInt8(11)&127:(-115)|1)], var74, false);
                    (-9);
                    Class278(namedParam375 : var107, optionalParam376 : [false, false, false, false, true, true, false, false, false, false])
                } catch (_) { // block id: 1902
                    var125 |= Int8(-20);
                    let var1907 : Interface281 = Class278();
                    var1907
                }) {
                case _ => 
                    ();
                    var1913
                
            })
        }
;
        if (try { // block id: 1253
            ();
            Option<Enum7>.Some(Enum7.defaultValue);
            Int16(-61) >= Int16(-118)
        } finally { // block id: 1260
            if (var38) { (UInt8(246)&127..UInt8(207)&127:(var1267|1)) } else { (UInt8(133)&127..var420&127:(var1267|1)) } ;
            var125 < Int8(68)
        }) { // block id: 1276
            func1278(func709, namedParam1282 : 91.0, namedParam1283 : var851);
            var var1605 : Array<Range<UInt8>> = [(UInt8(52)&127..=UInt8(169)&127:(-71)|1), (UInt8(219)&127..=UInt8(117)&127:72|1), (UInt8(79)&127..=UInt8(45)&127:54|1), (UInt8(232)&127..UInt8(83)&127:105|1), (UInt8(128)&127..UInt8(49)&127:(-61)|1), (UInt8(242)&127..=UInt8(83)&127:(-80)|1), (UInt8(251)&127..=UInt8(106)&127:(-87)|1), (UInt8(94)&127..=UInt8(90)&127:16|1), (UInt8(211)&127..UInt8(134)&127:(-100)|1), (UInt8(38)&127..UInt8(146)&127:(-88)|1)];
            try { // block id: 1566
                ();
                if (var38) { [var170, (var420&127..var420&127:(var1267|1)), var170, (var420&127..var420&127:(22|1)), var170, (UInt8(24)&127..UInt8(130)&127:(var1267|1)), (UInt8(253)&127..UInt8(216)&127:(-107)|1), var170, (UInt8(98)&127..=UInt8(108)&127:98|1), (UInt8(101)&127..=UInt8(97)&127:72|1)] } else { [(UInt8(101)&127..=UInt8(18)&127:96|1), (UInt8(180)&127..=UInt8(73)&127:98|1), (UInt8(10)&127..=UInt8(149)&127:(-83)|1), (UInt8(52)&127..UInt8(152)&127:(-48)|1), (UInt8(119)&127..UInt8(9)&127:(-14)|1), (UInt8(94)&127..=UInt8(92)&127:111|1), (UInt8(167)&127..UInt8(32)&127:100|1), (UInt8(57)&127..=UInt8(72)&127:(-91)|1), (UInt8(153)&127..=UInt8(200)&127:108|1), (UInt8(58)&127..UInt8(192)&127:14|1)] } 
            } catch (e: Exception) { // block id: 1591
                [true, true, true, true, true, var634, var463, false, var38, true];
                var125;
                var1605
            };
            func305(var1609)
        } else { // block id: 1630
            var loopTimeVar1635 : Int64 = 0;
            while ((false) && loopTimeVar1635 < 100 ) {
                loopTimeVar1635++;

            };
            func1637(var1920, (UInt16(25)&127..UInt16(165)&127:(-59)|1));
            var319
        }
    }

}

func func1278(param1279 : (Range<UInt32>) -> Range<UInt32>, namedParam1282 ! : Float64, namedParam1283 ! : Enum7) : Unit { // block id: 1284
    let var1542 : Int64 = Int64(Int8(43));
    func func1295() : Unit { // block id: 1296
        var var1517 : Unit = ();
        match ((var1302[3]|>func273<Int16, Array<Range<UInt64>>>)) {
            case caseVar1405 : Option<Bool> => 
                var982;
                ()
            
            case caseVar1411 => 
                var var1416 : Array<Option<UInt32>> = Array<Option<UInt32>>(10){ i => Option<UInt32>.None };
                if (true) { var1416 } else { var1416 } ;
                ();
                ()
            
            case caseVar1514 : Bool => 
                var1517
            
            case caseVar1521 => 
                var74 += var74;
                var335;
                ()
            
            case _ => 
                ()
            
        };
        var loopTimeVar1555 : Range<UInt64> = (UInt64(51)&127..=UInt64(238)&127:((-51)|1));
        for (i in loopTimeVar1555 where try { // block id: 1533
            var1062;
            let var1539 : Int64 = 93;
            (var125, (var1539&127..=var1542&127:((-37)|1)), Float32(-99.0), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], [(UInt8(75)&127..=UInt8(42)&127:(-101)|1), (UInt8(162)&127..=UInt8(51)&127:16|1), (UInt8(137)&127..UInt8(196)&127:64|1), (UInt8(16)&127..=UInt8(149)&127:(-95)|1), (UInt8(116)&127..UInt8(16)&127:(-19)|1), (UInt8(183)&127..UInt8(212)&127:39|1), (UInt8(69)&127..=UInt8(105)&127:101|1), (UInt8(175)&127..=UInt8(85)&127:(-34)|1), (UInt8(191)&127..=UInt8(214)&127:(-76)|1), (UInt8(53)&127..UInt8(24)&127:98|1)], Float32(89.0), true);
            var463
        } finally { // block id: 1552
            true
        }) {

        }
    }
;
    var loopTimeVar1561 : Int64 = 0;
    do {
        loopTimeVar1561++;
        func1295()
    } while ((match {
        case var38 => 
        var603;
        var38
        case _ => 
        true
    }) && loopTimeVar1561 < 100 ) 
}




public func func2072(param2073 : Int32) : Bool { // block id: 2074
    let var2090 : Int64 = Int64(UInt64(Int8(Int8(-126))));
    var var2182 : ?Unit = (("""
VDz#z
ERw~B
""", Int8(64), (UInt16(100)&127..=UInt16(94)&127:(122|1)), true, Int8(111)) as Unit);
    if (([(UInt8(119)&127..=var420&127:(26|1)), (var420&127..=UInt8(182)&127:(var2090|1)), var2096, var170, (UInt8(38)&127..UInt8(1)&127:(-21)|1), (UInt8(128)&127..UInt8(211)&127:(-104)|1), (var420&127..var2108&127:(var2090|1)), (UInt8(63)&127..=UInt8(101)&127:96|1), (var2108&127..=var420&127:((-63)|1)), var2096], (var2120, var125, (UInt16(232)&127..UInt16(172)&127:50|1), false, Int8(-12)))[1][3]) { // block id: 2128
        ();
        (Option<Range<Int8>>.None ?? var1017);
        var loopTimeVar2140 : Range<UInt64> = (UInt64(94)&127..=UInt64(161)&127:(Int64(UInt64(Int8(-91)))|1));
        for (i in loopTimeVar2140 where var38) {

        }
    } else if (var463) { // block id: 2149
        match ([Option<UInt32>.None, var107, var107, var2156, var2156, var2156, var107, Option<UInt32>.Some(UInt32(119)), Option<UInt32>.None, var107]) {
            case _ => 
                ();
                var2170
            
        };
        (var2182 ?? ())
    };
    var463
}

public enum Enum2254 {
    defaultValue
}
func func2250(param2251 : UInt64) : (Bool, Range<UInt64>, Float64) { // block id: 2252
    var var2265 : Bool = (Class278() is Option<Int8>);
    match (Enum2254.defaultValue) {
        case _ => 
            var52 += var426;
            var982;
            (var2265, var759, var532)
        
    }
}

func func2241(param2242 : ((Int8, Range<Int64>, Float32, Array<Array<Unit>>, Array<Range<UInt8>>, Float32, Bool), UInt8, Int64, Unit, Unit, (Range<UInt32>, UInt64, Range<Int32>, Float64, Range<Int32>, Rune, Rune), UInt8, Bool)) : Option<Class278> { // block id: 2243
    ((var851 as Class278), (var319|>func2250), UInt8(127), (UInt8(244)&127..=UInt8(69)&127:(-116)|1), var2275)[0]
}



func func2235<T0, T1>(param2236 : (Class278) -> UInt64) : (Int16, (Float32, ((Int8, Range<Int64>, Float32, Array<Array<Unit>>, Array<Range<UInt8>>, Float32, Bool), UInt8, Int64, Unit, Unit, (Range<UInt32>, UInt64, Range<Int32>, Float64, Range<Int32>, Rune, Rune), UInt8, Bool), Range<UInt32>, String), Array<Range<UInt8>>, Range<Int32>, Bool) where T0 <: Array<Option<UInt32>>, T1 <: String { // block id: 2239
    var var2279 : (((Int8, Range<Int64>, Float32, Array<Array<Unit>>, Array<Range<UInt8>>, Float32, Bool), UInt8, Int64, Unit, Unit, (Range<UInt32>, UInt64, Range<Int32>, Float64, Range<Int32>, Rune, Rune), UInt8, Bool)) -> Option<Class278> = func2241;
    var var2306 : Array<UInt32> = [UInt32(UInt8(224)), UInt32(211), UInt32(UInt32(Int8(97))), UInt32(UInt32(UInt16(30))), UInt32(Int32(UInt8(UInt8(158)))), UInt32(Int16(Int8(-50))), UInt32(23), UInt32(Int8(-24)), UInt32(250), UInt32(Int8(UInt8(227)))];
    let var2355 : UInt32 = UInt32(108);
    let var2453 : Range<Int32> = (Int32(123)&127..Int32(UInt32(82))&127:((-20)|1));
    if (try { // block id: 2283
        ();
        false
    } finally { // block id: 2286
        var2289 += var2289;
        Enum2254.defaultValue;
        var634
    }) { // block id: 2294
        var1062 <<= ((var1062) & 7);
        if (false) { (var52, var2120, ((-48)&127..30&127:59|1), var2011, var2306, var52, [UInt32(29), UInt32(130), UInt32(159), UInt32(135), UInt32(16), UInt32(174), UInt32(84), UInt32(7), UInt32(98), UInt32(238)]) } else { (UInt16(55), """
\\6,[y
v_cPe
""", var728, [var107, var107, Option<UInt32>.Some(var129), Option<UInt32>.None, var2156, Option<UInt32>.None, var2156, Option<UInt32>.None, var107, var2156], [UInt32(193), UInt32(162), UInt32(114), UInt32(248), var2355, UInt32(97), UInt32(229), var129, var2355, UInt32(225)], var52, [UInt32(37), UInt32(82), UInt32(47), UInt32(76), UInt32(97), UInt32(246), UInt32(247), UInt32(223), UInt32(141), UInt32(115)]) } ;
        var var2388 : Int64 = Int64(UInt32(252));
        ((var125, var728, Float32(-123.0), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], [(UInt8(8)&127..UInt8(7)&127:((-4)|1)), var170, var2096, (UInt8(22)&127..=UInt8(231)&127:(29|1)), (UInt8(96)&127..UInt8(84)&127:65|1), var2096, (UInt8(166)&127..=UInt8(11)&127:70|1), (UInt8(101)&127..=UInt8(208)&127:(var2388|1)), (var2108&127..=UInt8(19)&127:(var2289|1)), (UInt8(147)&127..=var420&127:(var2289|1))], Float32(4.0), false), var2108, var2289, var1117, (), var1758, var2108, true)
    } else if ((Int32(109)|>func2072)) { // block id: 2411
        Option<Bool>.Some(true);
        Option<Class278>.Some(Class278());
        if (false) { var1302 } else { var1302 } 
    } else { // block id: 2420
        var634;
        var var2434 : Range<UInt8> = (UInt8(122)&127..UInt8(93)&127:98|1);
        if (true) { ((Int8(-46), var728, Float32(91.0), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], [(UInt8(55)&127..=UInt8(158)&127:18|1), var170, var2434, (UInt8(36)&127..=UInt8(235)&127:(-106)|1), (UInt8(70)&127..=UInt8(83)&127:(-78)|1), var2434, (UInt8(191)&127..=UInt8(168)&127:30|1), var2434, var170, (UInt8(15)&127..=UInt8(173)&127:123|1)], Float32(16.0), false), UInt8(231), 25, (), (), ((UInt32(65)&127..=UInt32(248)&127:(-101)|1), var319, var2453, var532, var2453, 'w', 'O'), UInt8(141), var463) } else { ((var125, (var2289&127..=var2289&127:((-25)|1)), Float32(-106.0), var1920, [(UInt8(150)&127..UInt8(157)&127:(-120)|1), (UInt8(92)&127..UInt8(122)&127:118|1), (UInt8(240)&127..=UInt8(107)&127:69|1), (UInt8(225)&127..UInt8(114)&127:24|1), (UInt8(83)&127..UInt8(163)&127:61|1), (UInt8(140)&127..=UInt8(87)&127:117|1), (UInt8(162)&127..UInt8(196)&127:88|1), (UInt8(151)&127..UInt8(89)&127:18|1), (UInt8(103)&127..=UInt8(76)&127:15|1), (UInt8(138)&127..=UInt8(44)&127:(-17)|1)], var2476, false), UInt8(166), var2289, var1098, (), var1758, var2108, var463) } 
    }|>var2279;
    var var2535 : Int8 = Int8(Int8(-56));
    Int64((match (var2496) {
        case _ => 
            if (var634) { Option<Int32>.Some(Int32(-62)) } else { Option<Int32>.None } 
        
        case None => 
            var982;
            var125 <<= ((var125) & 7);
            Option<Int32>.None
        
        case caseVar2516 => 
            if (var38) { Option<Int32>.Some(Int32(-92)) } else { Option<Int32>.None } 
        
        case caseVar2525 => 
            ();
            var982;
            Option<Int32>.Some(Int32(14))
        
        case _ => 
            var2535 >>= ((var2535) & 7);
            Option<Int32>.Some(Int32(-78))
        
    } ?? match (Option<(Option<Unit>, Int16)>.None) {
        case _ => 
            var1062
        
    }));
    var var2567 : (Int16, (Float32, ((Int8, Range<Int64>, Float32, Array<Array<Unit>>, Array<Range<UInt8>>, Float32, Bool), UInt8, Int64, Unit, Unit, (Range<UInt32>, UInt64, Range<Int32>, Float64, Range<Int32>, Rune, Rune), UInt8, Bool), Range<UInt32>, String), Array<Range<UInt8>>, Range<Int32>, Bool) = (Int16(112), (Float32(-122.0), ((Int8(28), ((-88)&127..=88&127:21|1), Float32(41.0), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], [(UInt8(126)&127..UInt8(9)&127:2|1), (UInt8(75)&127..=UInt8(163)&127:(97|1)), (UInt8(238)&127..=UInt8(200)&127:((-80)|1)), (UInt8(57)&127..UInt8(160)&127:(55|1)), (UInt8(125)&127..=UInt8(170)&127:((-36)|1)), (UInt8(207)&127..=UInt8(60)&127:(82|1)), (UInt8(142)&127..UInt8(119)&127:((-46)|1)), (UInt8(231)&127..=UInt8(46)&127:(55|1)), (UInt8(173)&127..UInt8(220)&127:(10|1)), (UInt8(125)&127..=UInt8(11)&127:((-44)|1))], Float32(125.0), true), UInt8(Int8(-44)), Int64(Int8(-103)), (), (), ((UInt32(176)&127..UInt32(66)&127:25|1), UInt64(140), (Int32(35)&127..=Int32(1)&127:(51|1)), 102.0, (Int32(-84)&127..Int32(4)&127:((-126)|1)), 'k', 'y'), UInt8(Int8(114)), true), (UInt32(UInt8(73))&127..=UInt32(48)&127:((-31)|1)), ###"1,+_m]!:;5"###), [(UInt8(208)&127..UInt8(140)&127:119|1), (UInt8(35)&127..UInt8(243)&127:16|1), (UInt8(105)&127..UInt8(245)&127:30|1), (UInt8(220)&127..=UInt8(138)&127:(-60)|1), (UInt8(42)&127..=UInt8(46)&127:19|1), (UInt8(139)&127..UInt8(235)&127:(-101)|1), (UInt8(128)&127..UInt8(190)&127:32|1), (UInt8(71)&127..=UInt8(41)&127:70|1), (UInt8(126)&127..=UInt8(6)&127:74|1), (UInt8(23)&127..=UInt8(138)&127:(-38)|1)], (Int32(62)&127..=Int32(Int16(-59))&127:(Int64(UInt8(Int8(18)))|1)), (((-62)&127..=(-116)&127:(-113)|1) is Range<Int64>));
    try { // block id: 2547
        match (var125) {
            case _ => 
                var2554++;
                ()
            
        };
        (Option<(Int16, (Float32, ((Int8, Range<Int64>, Float32, Array<Array<Unit>>, Array<Range<UInt8>>, Float32, Bool), UInt8, Int64, Unit, Unit, (Range<UInt32>, UInt64, Range<Int32>, Float64, Range<Int32>, Rune, Rune), UInt8, Bool), Range<UInt32>, String), Array<Range<UInt8>>, Range<Int32>, Bool)>.Some(var2567) ?? (var63, (Float32(-119.0), ((var2554, ((-41)&127..var2289&127:(var2289|1)), Float32(-11.0), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], [(UInt8(4)&127..=UInt8(12)&127:60|1), (UInt8(138)&127..=UInt8(229)&127:(-58)|1), (UInt8(139)&127..=UInt8(239)&127:(-75)|1), (UInt8(125)&127..UInt8(145)&127:(-10)|1), (UInt8(215)&127..=UInt8(220)&127:24|1), (UInt8(211)&127..UInt8(110)&127:1|1), (UInt8(41)&127..=UInt8(123)&127:51|1), (UInt8(38)&127..=UInt8(116)&127:(-87)|1), (UInt8(211)&127..=UInt8(122)&127:1|1), (UInt8(214)&127..=UInt8(174)&127:(-70)|1)], Float32(2.0), true), var420, 10, (), var1098, var1758, var420, var634), (UInt32(216)&127..UInt32(224)&127:56|1), ###"E oMh0n~7W"###), var2683, (var2687&127..var1062&127:(6|1)), var634))
    } finally { // block id: 2692
        ();
        if (var634) { // block id: 2696
            var38 &&= true;
            var2701;
            var2567
        } else { // block id: 2711
            var2567
        }
    }
}

public func func2716(param306 : Class278) : UInt64 { // block id: 307
    ();
    ();
    try { // block id: 312
        var var315 : Float64 = (-104.0);
        var315 /= Float64((Int32(21.0)) | 1);
        var319
    } catch (_) { // block id: 321
        let var325 : Bool = false;
        var38 &&= var325;
        UInt64(91)
    } ^ if ([true, true, false, true, true, true, true, true, false, false][3]) { // block id: 333
        var335;
        UInt64(252)
    } else if (var341[0]) { // block id: 361
        var319 * UInt64(167)
    } else { // block id: 365
        var335;
        UInt64(199)
    }
}


func func2067(param2068 : Array<UInt32>) : Range<Int32> { // block id: 2069
    let var2196 : (Int32) -> Bool = { lambdaParameter2199 : Int32 => (Int16(97) is Array<Unit>) };
    var var2211 : Int16 = Int16(110);
    let var2714 : ((Class278) -> UInt64) -> (Int16, (Float32, ((Int8, Range<Int64>, Float32, Array<Array<Unit>>, Array<Range<UInt8>>, Float32, Bool), UInt8, Int64, Unit, Unit, (Range<UInt32>, UInt64, Range<Int32>, Float64, Range<Int32>, Rune, Rune), UInt8, Bool), Range<UInt32>, String), Array<Range<UInt8>>, Range<Int32>, Bool) = func2235<Array<Option<UInt32>>, String>;
    if ((match (var52) {
        case _ : UInt16 => 
            var63 |= var2211;
            var1062
        
        case _ : (Float32, ((Int8, Range<Int64>, Float32, Array<Array<Unit>>, Array<Range<UInt8>>, Float32, Bool), UInt8, Int64, Unit, Unit, (Range<UInt32>, UInt64, Range<Int32>, Float64, Range<Int32>, Rune, Rune), UInt8, Bool), Range<UInt32>, String) => 
            var319 >>= ((var319) & 7);
            Int32(-90)
        
        case _ => 
            var var2225 : Int64 = (-8);
            (var2225&127..=var2225&127:((-23)|1));
            var1062 & var1062
        
    }|>var2196)) { (func2716|>var2714)[3] } else { (try { // block id: 2726
        var2728
    } finally { // block id: 2730
        var2728
    } ?? (Int32(94)&127..=var1062&127:(var2289|1))) } 
}

func func1980(param1981 : Enum7) : Range<Int32> { // block id: 1982
    var var2006 : Int64 = 67;
    var var2046 : Array<UInt32> = [UInt32(46), UInt32(105), UInt32(41), UInt32(Int8(26)), UInt32(Int32(Int32(Int8(90)))), UInt32(158), UInt32(140), UInt32(Int16(Int16(Int16(-82)))), UInt32(31), UInt32(163)];
    (try { // block id: 1991
        Option<Unit>.None;
        var var1994 : Option<(UInt16, String, Range<Int64>, Array<Option<UInt32>>, Array<UInt32>, UInt16, Array<UInt32>)> = Option<(UInt16, String, Range<Int64>, Array<Option<UInt32>>, Array<UInt32>, UInt16, Array<UInt32>)>.None;
        var1994
    } finally { // block id: 1996
        var125 ^= var125;
        Option<(UInt16, String, Range<Int64>, Array<Option<UInt32>>, Array<UInt32>, UInt16, Array<UInt32>)>.None
    } ?? (var426, "cFB\"ZacL8b", (var2006&127..=var2006&127:(var2006|1)), var2011, [UInt32(243), UInt32(156), UInt32(131), UInt32(103), UInt32(19), UInt32(95), UInt32(81), UInt32(32), UInt32(122), UInt32(96)], var426, var2046))[3];
    let var2737 : (Array<UInt32>) -> Range<Int32> = func2067;
    if (true) { [UInt32(218), UInt32(33), UInt32(138), UInt32(131), UInt32(110), UInt32(204), UInt32(215), UInt32(50), UInt32(127), UInt32(26)] } else { [UInt32(155), UInt32(186), UInt32(36), UInt32(190), UInt32(113), UInt32(146), UInt32(13), UInt32(32), UInt32(119), UInt32(84)] } |>var2737
}

public func func110(param111 : Unit) : UInt32 { // block id: 112
    let var121 : ?Int8 = (Float32(100.0) as Int8);
    var loopTimeVar131 : Range<UInt64> = (UInt64(8)&127..UInt64(Int8(UInt8(68)))&127:(Int64(UInt16(230))|1));
    for (i in loopTimeVar131 where ((var121 ?? var125) is Unit)) {
        var129
    };
    let var198 : Range<UInt32> = (UInt32(53)&127..=UInt32(59)&127:((-50)|1));
    let var226 : ?Unit = Option<Unit>.None;
    let var255 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    func func158(param159 : Option<UInt32>) : Option<Int8> { // block id: 160
        var var176 : (Option<Unit>, Int16) = (Option<Unit>.None, Int16(Int16(-95)));
        let var205 : ?Unit = Option<Unit>.None;
        var var216 : Int64 = 109;
        var loopTimeVar238 : Range<UInt64> = (UInt64(UInt16(UInt16(UInt8(91))))&127..=UInt64(Int8(UInt8(Int8(-2))))&127:(Int64(Int8(-88))|1));
        (match (var170) {
            case _ : Int32 => 
                var176
            
            case _ => 
                if (true) { var176 } else { (Option<Unit>.Some(()), var63) } 
            
            case _ => 
                let var195 : Unit = ();
                var195;
                var198;
                (var205, var63)
            
            case caseVar210 => 
                (Int16(-5)&127..=Int16(-60)&127:(var216|1));
                ();
                if (true) { (Option<Unit>.None, Int16(-17)) } else { (var226, Int16(77)) } 
            
            case _ => 
                ();
                ();
                var176
            
        }[0] ?? for (i in loopTimeVar238 where var38) {

        });
        let var1070 : (Unit) -> Option<Int8> = func273<Int16, Array<Range<UInt64>>>;
        try { // block id: 251
            var255[8];
            [(UInt8(146)&127..=UInt8(253)&127:(-72)|1), (UInt8(173)&127..UInt8(233)&127:109|1), (UInt8(242)&127..=UInt8(89)&127:(-123)|1), (UInt8(179)&127..UInt8(66)&127:(-23)|1), (UInt8(189)&127..=UInt8(223)&127:14|1), (UInt8(21)&127..UInt8(225)&127:51|1), (UInt8(229)&127..UInt8(81)&127:90|1), (UInt8(12)&127..=UInt8(139)&127:(-9)|1), (UInt8(232)&127..=UInt8(219)&127:47|1), (UInt8(152)&127..UInt8(158)&127:54|1)][0];
            ()|>var1070
        } catch (_) { // block id: 1073
            (var791 ?? var603);
            match (Option<Bool>.Some(var38)) {
                case _ : Option<Bool> => 
                    param111;
                    ()
                
                case _ : Option<Bool> => 
                    var982;
                    param111
                
                case caseVar1092 : UInt16 => 
                    ()
                
                case _ => 
                    var1098
                
            };
            match (var463) {
                case true | true => 
                    (UInt64(171)&127..UInt64(215)&127:(-125)|1);
                    var125 |= Int8(70);
                    if (true) { Option<Int8>.None } else { Option<Int8>.None } 
                
                case _ : Array<Unit> => 
                    var1117;
                    var857
                
                case _ => 
                    Option<Int8>.None
                
            }
        }
    }
;
    let var2767 : Bool = ((Int8(UInt8(21))&127..=Int8(UInt8(UInt8(160)))&127:(Int64(UInt16(43))|1)) is Option<Int8>);
    func func148(param149 : Int64, optionalParam150 ! : Bool = (Int64(UInt8(UInt8(152))) is Range<UInt16>)) : Unit { // block id: 155
        match (func158([Option<UInt32>.Some(var129), var107, var107, var107, var107, var107, Option<UInt32>.None, var107, var107, var107][7])) {
            case _ => 
                ()
            
        };
        func func1143(param1144 : Range<Int32>) : Class278 { // block id: 1145
            Aggregate1147<UInt8, Range<UInt16>, Range<Int64>>.func1152(###"srlH>.//q>"###, namedParam1154 : func709, optionalParam1157 : func551);
            var var1937 : String = "qyNu~g]K=d";
            var loopTimeVar1940 : Range<UInt64> = (UInt64(158)&127..UInt64(Int64(UInt64(223)))&127:(Int64((-75))|1));
            for (i in loopTimeVar1940 where optionalParam150) {
                (var74, var1302, (UInt32(155)&127..=UInt32(246)&127:(-28)|1), var1937)[3]
            };
            var var1973 : Array<Bool> = [true, true, false, true, false, true, true, false, true, true];
            match (try { // block id: 1950
                    if (true) { Enum7.defaultValue } else { Enum7.defaultValue } 
                } finally { // block id: 1955
                    var851
                }) {
                case defaultValue => 
                    ();
                    var52 |= var52;
                    Class278()
                
                case _ => 
                    if (optionalParam150) { Class278(namedParam375 : Option<UInt32>.Some(var129), optionalParam376 : var1973) } else { Class278(namedParam375 : Option<UInt32>.None, optionalParam376 : var1973, optionalParam378 : UInt8(134)) } 
                
            }
        }
;
        let var2744 : (Enum7) -> Range<Int32> = func1980;
        func1143((var851|>var2744)).var2748;
        var var2761 : Unit = ();
        var loopTimeVar2782 : Range<UInt64> = (UInt64(Int32(43))&127..UInt64(239)&127:((-47)|1));
        for (i in loopTimeVar2782 where try { // block id: 2752
            let var2755 : Int16 = Int16(-111);
            var2755 == Int16(102)
        } catch (e: Exception) { // block id: 2758
            var2289;
            var2761;
            var38
        }) {
            if (var2767) { // block id: 2777
                var63 *= var63;
                ()
            }
        }
    }
;
    var var2793 : UInt8 = UInt8(98);
    let var2827 : Int16 = Int16(Int16(UInt8(UInt8(210))));
    func148(try { // block id: 2789
        ();
        var2793 ^= UInt8(131);
        86
    } catch (_) { // block id: 2797
        ();
        "*ZGC+=)5a{(";
        28
    } finally { // block id: 2801
        var38 &&= false;
        var1098;
        (-60) / ((var2289) | 1)
    }, optionalParam150 : match (var449) {
        case _ => 
            true
        
        case _ : Range<UInt64> => 
            ();
            """
VE:?.
)miX@
""";
            var463
        
        case _ : Range<UInt32> => 
            var2827 <= var63
        
        case _ => 
            var463
        
    } && var634);
    var129 << ((match ((Int8(61)&127..=Int8(118)&127:(var2289|1))) {
        case _ : Array<Array<Unit>> => 
            var129
        
        case caseVar2850 : Array<Unit> => 
            var129
        
        case _ : Option<Enum7> => 
            var129
        
        case _ => 
            ();
            var129 << ((var129) & 7)
        
        case _ => 
            UInt32(109)
        
    }) & 7)
}

func func84(param85 : Unit) : Bool { // block id: 86
    let var89 : UInt32 = UInt32(Int8(Int8(-76)));
    let var101 : Rune = '5';
    var var2868 : (Unit) -> UInt32 = func110;
    var89 % (((try { // block id: 99
        var101;
        Option<UInt32>.Some(var89)
    } finally { // block id: 105
        var107
    } ?? (var1117|>var2868))) | 1);
    true
}

main(): Int64 {
    try {
        var var44 : Unit = ();
        var loopTimeVar57 : Int64 = 0;
        while ((match (Enum7.defaultValue) {
            case caseVar12 : UInt16 => 
                ();
                false
            
            case _ => 
                var var21 : UInt64 = UInt64(Int32(UInt16(UInt16(Int8(-70)))));
                var21 &= UInt64(40);
                Int32(94) / ((Int32(-34)) | 1);
                true || true
            
            case defaultValue => 
                var38
            
            case defaultValue => 
                var44;
                false
            
            case _ => 
                false
            
        }) && loopTimeVar57 < 100 ) {
            loopTimeVar57++;
            var52;
            Float32(-125.0)
        };
        if (try { // block id: 60
            var63 * var63;
            ();
            true && true
        } catch (_) { // block id: 71
            var74 = Float32(28.0);
            Int16(83) == Int16(-66)
        }) { // block id: 80
            var44;
            (-101)
        } else if (func84(var1117)) { // block id: 2873
            ();
            var var2876 : ?Class278 = Option<Class278>.Some(Class278(namedParam375 : Option<UInt32>.Some(UInt32(116)), optionalParam376 : [false, false, ([Option<UInt32>.Some(UInt32(73)), Option<UInt32>.None, Option<UInt32>.None, Option<UInt32>.None, Option<UInt32>.Some(UInt32(1)), Option<UInt32>.None, Option<UInt32>.Some(UInt32(89)), Option<UInt32>.Some(UInt32(109)), Option<UInt32>.Some(UInt32(157)), Option<UInt32>.Some(UInt32(95))] is Int64), true, false, (UInt32(61) is (Option<UInt32>) -> Option<Int8>), (Option<(UInt16, String, Range<Int64>, Array<Option<UInt32>>, Array<UInt32>, UInt16, Array<UInt32>)>.None is () -> Unit), ((95&127..=(-86)&127:45|1) is (Unit) -> Option<Int8>), false, ([false, true, false, false, true, true, false, false, false, false] is (Int32) -> Bool)], optionalParam378 : UInt8(193)));
            var2876;
            var2289
        } else { // block id: 2925
            var var2929 : Int16 = Int16(69);
            (var791, var2929);
            Option<(Option<Unit>, Int16)>.Some((Option<Unit>.Some(()), Int16(-9)));
            24
        }
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var52*var52), 64)
        crccheck.updateBuffer(UInt64(var63*var63), 64)
        crccheck.updateBuffer(UInt64(var125*var125), 64)
        crccheck.updateBuffer(UInt64(var129*var129), 64)
        crccheck.updateBuffer(UInt64(var319*var319), 64)
        crccheck.updateBuffer(UInt64(var420*var420), 64)
        crccheck.updateBuffer(UInt64(var426*var426), 64)
        crccheck.updateBuffer(UInt64(var1062*var1062), 64)
        crccheck.updateBuffer(UInt64(var2108*var2108), 64)
        crccheck.updateBuffer(UInt64(var2289*var2289), 64)
        crccheck.updateBuffer(UInt64(var2554*var2554), 64)
        crccheck.updateBuffer(UInt64(var2687*var2687), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Enum2254 {

}

extend<T0, T1, T2> Aggregate1147<T0, T1, T2> {

}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_unexpected_declaration_in_scope
// ASSERT: scan parse_trailing_closure_only_follow_name
// ASSERT: scan parse_expected_expr_or_decl_in
// ASSERT: scan parse_expected_character
// ASSERT: scan parse_expected_left_brace
// ASSERT: scan parse_expected_catch_or_finally_in_try
// ASSERT: scan parse_expected_case


