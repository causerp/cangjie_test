/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output


public var var35 : Int16 = Int16(Int8(-86))
public var var57 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
public var var96 : Float32 = Float32(Float32(-22.0))
public var var117 : Unit = ()
public var var186 : Int32 = Int32(-103)
public let var190 : Bool = false
let var205 : (Int64, Bool, Range<Int32>) = (Int64(UInt32(UInt8(156))), false, (Int32(-61)&127..Int32(-79)&127:89|1))
public var var244 : Float64 = Float64(Float32(Float32(Float32(Float32(38.0)))))
public var var374 : Range<UInt32> = (UInt32(UInt8(175))&127..=UInt32(Int16(50))&127:((-8)|1))
public var var410 : Bool = true
public let var432 : Array<Unit> = Array<Unit>(10){ i => () }
public var var566 : UInt8 = UInt8(Int8(UInt8(178)))
public var var605 : Unit = ()
public let var638 : Int64 = (-70)
public let var657 : (Array<Float32>, Array<Float32>) = ([Float32(123.0), Float32(15.0), Float32(45.0), Float32(-94.0), Float32(-16.0), Float32(-90.0), Float32(-80.0), Float32(40.0), Float32(-44.0), Float32(8.0)], [Float32(Float32(Float32(-94.0))), Float32(-87.0), Float32(122.0), Float32(-1.0), Float32(Float32(122.0)), Float32(Float32(-77.0)), Float32(50.0), Float32(Float32(100.0)), Float32(42.0), Float32(Float32(Float32(-99.0)))])
public var var717 : Range<Int8> = (Int8(43)&127..=Int8(-26)&127:115|1)
public var var730 : Rune = 'H'
public var var769 : UInt64 = UInt64(Int16(120))
public var var810 : Int8 = Int8(-106)
let var827 : Array<Enum820> = [Enum820.defaultValue, Enum820.defaultValue, Enum820.defaultValue, Enum820.defaultValue, Enum820.defaultValue, Enum820.defaultValue, Enum820.defaultValue, Enum820.defaultValue, Enum820.defaultValue, Enum820.defaultValue]
var var840 : Array<Enum820> = [Enum820.defaultValue, Enum820.defaultValue, Enum820.defaultValue, Enum820.defaultValue, Enum820.defaultValue, Enum820.defaultValue, Enum820.defaultValue, Enum820.defaultValue, Enum820.defaultValue, Enum820.defaultValue]
let var857 : Rune = 'F'
public let var909 : Float32 = Float32(-96.0)
public let var1081 : Int64 = Int64((-59))
public var var1102 : Bool = true
let var1251 : UInt32 = UInt32(72)
public let var1341 : Range<Int16> = (Int16(64)&127..=Int16(70)&127:(-81)|1)
public let var1346 : UInt16 = UInt16(UInt16(UInt8(195)))
let var1359 : Range<UInt64> = (UInt64(193)&127..=UInt64(154)&127:((-47)|1))
public var var1376 : Range<UInt64> = (UInt64(254)&127..=UInt64(175)&127:64|1)
let var1399 : Option<String> = Option<String>.None
var var1419 : Array<Bool> = [false, false, false, true, true, false, true, true, true, false]
let var1424 : Range<Int16> = (Int16(-47)&127..Int16(3)&127:(59|1))
public let var1452 : ?UInt64 = Option<UInt64>.None
public let var1489 : Bool = false
var var1517 : (Int16, Array<Unit>) = (Int16(116), [(), (), (), (), (), (), (), (), (), ()])
public let var1573 : Int64 = Int64(UInt8(121))
let var1583 : ?Range<Int32> = Option<Range<Int32>>.None
var var1586 : Range<Int32> = (Int32(-59)&127..Int32(16)&127:((-122)|1))
public let var1611 : ?Array<Rune> = (Enum999.defaultValue as Array<Rune>)
public var var1683 : Array<Float32> = [Float32(Float32(Float32(-75.0))), Float32(Float32(-88.0)), Float32(-32.0), Float32(92.0), Float32(Float32(60.0)), Float32(Float32(-53.0)), Float32(-83.0), Float32(-25.0), Float32(-103.0), Float32(Float32(Float32(93.0)))]
var var1707 : Float32 = Float32(64.0)
public var var1723 : Rune = 'I'
public var var1754 : Range<UInt16> = (UInt16(242)&127..=UInt16(15)&127:(-58)|1)
public var var1807 : UInt64 = UInt64(Int8(UInt8(UInt8(4))))
public var var1834 : String = "-E4:t\"N)Wl"
let var1849 : Enum820 = Enum820.defaultValue
public interface Interface12 {
    func func1837(namedParam1838 ! : UInt64) : Int64 { // block id: 1839
        var605;
        var var1865 : (Range<UInt8>, Range<UInt8>, Range<UInt16>, Unit) = ((UInt8(UInt8(UInt8(61)))&127..UInt8(Int8(-38))&127:(Int64(Int8(Int8(6)))|1)), (UInt8(UInt8(88))&127..=UInt8(Int8(Int8(-14)))&127:((-38)|1)), (UInt16(110)&127..=UInt16(161)&127:(-98)|1), ());
        if (((var1849 as Bool) ?? var410)) { var1452 } else { (match ('V') {
            case _ => 
                Option<Option<UInt64>>.None
            
        } ?? (var1865 as UInt64)) } ;
        74
    }

}

public interface Interface11 <: Interface12 {

}

public open class Class8 <: Interface11 & Interface12 {
    public init() { // block id: 10

    }
;
    private static let var1795 : UInt16 = UInt16(95);
    public init(optionalParam75 ! : Rune = 'E', namedParam77 ! : Bool, namedParam78 ! : (Int8) -> Int16, optionalParam81 ! : UInt32 = UInt32(Int8(-12))) { // block id: 84
        func86(UInt32(111) ^ (UInt32(16) * optionalParam81), var1723);
        var var1743 : Range<UInt8> = (UInt8(77)&127..=UInt8(Int8(-86))&127:(95|1));
        (match (Option<Float64>.None) {
            case _ : Int16 => 
                if (var190) { (UInt8(107)&127..=UInt8(25)&127:39|1) } else { (UInt8(188)&127..UInt8(146)&127:38|1) } 
            
            case _ => 
                (var35&127..var35&127:(33|1));
                var1743
            
        }, (var1743, (UInt8(141)&127..=UInt8(97)&127:106|1), var1754, ())[1], match (((-10), false, (var186&127..Int32(-22)&127:(var1573|1)))) {
            case caseVar1768 : Array<Rune> => 
                (UInt16(156)&127..=var1346&127:(var638|1))
            
            case (caseVar1776,_ : Interface798,_ : Option<Array<Rune>>) => 
                var657;
                var var1780 : Range<UInt16> = (UInt16(101)&127..UInt16(140)&127:(-88)|1);
                var1780
            
            case caseVar1784 : Enum820 => 
                if (false) { (UInt16(152)&127..=UInt16(227)&127:(var1573|1)) } else { (var1346&127..var1795&127:(var1081|1)) } 
            
            case _ => 
                var810 /= ((var810) | 1);
                if (true) { Option<UInt64>.Some(var1807) } else { var1452 } ;
                (UInt16(34)&127..=UInt16(172)&127:(-91)|1)
            
        }, var605)[3]
    }
;
    public func func1837(namedParam1838 ! : UInt64) : Int64 { // block id: 1839
        var605;
        var var1865 : (Range<UInt8>, Range<UInt8>, Range<UInt16>, Unit) = ((UInt8(UInt8(UInt8(61)))&127..UInt8(Int8(-38))&127:(Int64(Int8(Int8(6)))|1)), (UInt8(UInt8(88))&127..=UInt8(Int8(Int8(-14)))&127:((-38)|1)), (UInt16(110)&127..=UInt16(161)&127:(-98)|1), ());
        if (((var1849 as Bool) ?? var410)) { var1452 } else { (match ('V') {
            case _ => 
                Option<Option<UInt64>>.None
            
        } ?? (var1865 as UInt64)) } ;
        74
    }

}


public func func31(param32 : Int8) : Int16 { // block id: 33
    var35
}


func func268(param269 : (Int64, Bool, Range<Int32>)) : Range<Int8> { // block id: 270
    try { // block id: 274
        ();
        let var282 : Int8 = Int8(55);
        var var286 : Int64 = (-4);
        if (var190) { [(Int8(40)&127..Int8(56)&127:(-125)|1), (Int8(-15)&127..=Int8(-52)&127:(-110)|1), (Int8(-45)&127..=Int8(-67)&127:(-53)|1), (Int8(122)&127..Int8(84)&127:(-89)|1), (Int8(-85)&127..=Int8(-119)&127:16|1), (Int8(-28)&127..Int8(48)&127:67|1), (Int8(-74)&127..Int8(-62)&127:91|1), (Int8(-1)&127..Int8(97)&127:(-33)|1), (Int8(110)&127..Int8(-121)&127:67|1), (Int8(-53)&127..Int8(111)&127:57|1)] } else { [(var282&127..Int8(21)&127:(var286|1)), (Int8(49)&127..Int8(94)&127:(-84)|1), (Int8(-39)&127..Int8(14)&127:(110|1)), (Int8(-92)&127..Int8(-58)&127:34|1), (Int8(-80)&127..=Int8(54)&127:(-86)|1), (Int8(-61)&127..=var282&127:(var286|1)), (Int8(-46)&127..Int8(46)&127:(-66)|1), (Int8(-19)&127..=Int8(85)&127:(-34)|1), (Int8(9)&127..Int8(0)&127:(var286|1)), (Int8(97)&127..=Int8(104)&127:60|1)] } 
    } finally { // block id: 306
        var var313 : Int64 = Int64(UInt8(UInt8(24)));
        var var318 : Range<Int8> = (Int8(-1)&127..Int8(-34)&127:3|1);
        var var322 : Int8 = Int8(UInt8(Int8(-119)));
        [(Int8(-49)&127..Int8(111)&127:89|1), (Int8(-74)&127..=Int8(-23)&127:(var313|1)), var318, (var322&127..=Int8(85)&127:(111|1)), (var322&127..=Int8(-82)&127:(var313|1)), (Int8(-61)&127..Int8(-12)&127:105|1), var318, (Int8(39)&127..=Int8(13)&127:45|1), var318, (Int8(73)&127..Int8(24)&127:(-28)|1)]
    }[1]
}




public func func553(param554 : Range<Int64>) : Rune { // block id: 555
    var var557 : Unit = ();
    var557;
    let var590 : Unit = ();
    var var613 : Range<UInt8> = (UInt8(UInt8(Int8(-83)))&127..=UInt8(UInt8(Int8(UInt8(134))))&127:(Int64(UInt32(UInt8(Int8(100))))|1));
    try (resource = Class795()) { // block id: 560
        try { // block id: 562
            ();
            var566 &= var566;
            (-108)
        } catch (_) { // block id: 572
            ();
            var var576 : Int64 = Int64(Int32(-74));
            var576 ** (var576 & 3)
        };
        ([var557, var557, (), (), (), var557, var557, var590, var590, var557] as String);
        let var600 : ?Unit = (Int64(Int16(-123)) as Unit);
        (var600 ?? var605)
    } finally { // block id: 607
        ((UInt8(167)&127..UInt8(45)&127:(-22)|1), var613, (UInt16(1)&127..=UInt16(116)&127:(-99)|1), var590)[3]
    };
    ['e', 'N', 'm', 'T', 'a', 'b', 'v', 'u', 'k', '5'][5]
}

public func func478(param479 : Range<Int16>) : Float64 { // block id: 480
    let var494 : Unit = ();
    var loopTimeVar501 : Range<UInt64> = (UInt64(Int16(7))&127..=UInt64(130)&127:(Int64(Int16(Int8(UInt8(159))))|1));
    for (i in loopTimeVar501 where var190) {
        if (var410) { // block id: 486
            ();
            ()
        };
        if (var410) { // block id: 491
            var205;
            var494
        } else if (var410) { // block id: 497
            Class8();
            var205;
            var494
        }
    };
    func func512(param513 : UInt16, param514 : Rune) : (Range<UInt32>, Float64, Option<Unit>, Float64, Range<UInt64>) { // block id: 515
        var var517 : (Range<UInt32>, Float64, Option<Unit>, Float64, Range<UInt64>) = ((UInt32(250)&127..UInt32(157)&127:91|1), (-27.0), Option<Unit>.None, Float64(Float64(Float32(Float32(39.0)))), (UInt64(125)&127..UInt64(243)&127:81|1));
        var517
    }
;
    var var539 : UInt16 = UInt16(0);
    var var544 : Float64 = (-10.0);
    let var549 : UInt16 = UInt16(UInt8(28));
    var var634 : (Range<Int64>) -> Rune = func553;
    let var642 : Int64 = Int64(Int16(-105));
    func512(try { // block id: 528
        var var530 : UInt16 = UInt16(236);
        var530
    } catch (_) { // block id: 532
        var var534 : Range<Int32> = (Int32(-71)&127..=Int32(-104)&127:40|1);
        var534;
        [(Int8(52)&127..Int8(61)&127:(-37)|1), (Int8(86)&127..Int8(68)&127:(-88)|1), (Int8(119)&127..=Int8(63)&127:(-38)|1), (Int8(100)&127..Int8(-58)&127:(-44)|1), (Int8(-6)&127..Int8(16)&127:(-18)|1), (Int8(101)&127..=Int8(121)&127:90|1), (Int8(-78)&127..Int8(-40)&127:72|1), (Int8(126)&127..=Int8(-102)&127:48|1), (Int8(-26)&127..Int8(-21)&127:(-59)|1), (Int8(42)&127..Int8(117)&127:112|1)];
        var539 << ((UInt16(158)) & 7)
    } finally { // block id: 542
        var544;
        UInt16(11) >> ((var549) & 7)
    }, ((var638&127..18&127:(var642|1))|>var634))[1]
}


public func func420(param421 : Bool) : Float64 { // block id: 422
    let var647 : (Range<Int16>) -> Float64 = func478;
    func func424(namedParam425 ! : Float32, namedParam426 ! : UInt64) : Float64 { // block id: 427
        let var460 : Option<Float64> = (true as Float64);
        var var474 : String = "mYI\\.3I$1?";
        try { // block id: 429
            var432[4];
            let var447 : Bool = true;
            var loopTimeVar453 : Int64 = 0;
            do {
                loopTimeVar453++;
                Class8();
                ()
            } while ((var447) && loopTimeVar453 < 100 ) ;
            (var460 ?? (-26.0))
        } finally { // block id: 464
            ((Int8(-54)&127..=Int8(29)&127:(-32)|1) as Float64);
            (Option<String>.Some(var474) ?? var474);
            (var35&127..=Int16(-123)&127:(73|1))|>var647
        }
    }
;
    let var691 : UInt16 = UInt16(UInt8(Int8(UInt8(238))));
    var var720 : ?UInt64 = (UInt16(209) as UInt64);
    func424(namedParam425 : var657[0][3], namedParam426 : (match (((UInt8(251)&127..UInt8(116)&127:(-63)|1), (UInt8(246)&127..=UInt8(63)&127:86|1), (var691&127..UInt16(185)&127:(64|1)), ())) {
        case (caseVar701,caseVar702,_ : Option<UInt64>,_ : (Int64, Bool, Range<Int32>)) => 
            ();
            Option<Unit>.Some(());
            Option<UInt64>.Some(UInt64(98))
        
        case caseVar711 : (Range<UInt32>, Float64, Option<Unit>, Float64, Range<UInt64>) => 
            var var714 : Interface12 = Class8();
            var714;
            var717;
            var720
        
        case caseVar725 : Array<Range<Int8>> => 
            ['m', var730, 'w', var730, var730, 's', 'A', var730, 'o', 'C'];
            if (false) { var720 } else { Option<UInt64>.Some(UInt64(88)) } 
        
        case (caseVar747 : UInt8,caseVar748,_ : Float32,_ : Range<Int32>) => 
            var var752 : UInt64 = UInt64(106);
            var752++;
            if (param421) { (Int16(-31)&127..Int16(-41)&127:(-90)|1) } else { (Int16(10)&127..Int16(104)&127:56|1) } ;
            if (true) { var720 } else { Option<UInt64>.Some(UInt64(28)) } 
        
        case _ => 
            var717;
            var720
        
    } ?? UInt64(var769)))
}

func func775(param776 : (Range<Int64>) -> Rune) : Range<UInt64> { // block id: 779
    [(UInt64(226)&127..=UInt64(169)&127:(-59)|1), (UInt64(61)&127..=UInt64(173)&127:7|1), (UInt64(103)&127..UInt64(198)&127:(-119)|1), (UInt64(218)&127..UInt64(78)&127:46|1), (UInt64(236)&127..UInt64(51)&127:(-81)|1), (UInt64(141)&127..=UInt64(240)&127:(-57)|1), (UInt64(236)&127..=UInt64(122)&127:51|1), (UInt64(55)&127..UInt64(14)&127:(-33)|1), (UInt64(218)&127..=UInt64(60)&127:(-92)|1), (UInt64(1)&127..UInt64(231)&127:2|1)][3]
}

public func func787(param554 : Range<Int64>) : Rune { // block id: 555
    var var557 : Unit = ();
    var557;
    let var590 : Unit = ();
    var var613 : Range<UInt8> = (UInt8(UInt8(Int8(-83)))&127..=UInt8(UInt8(Int8(UInt8(134))))&127:(Int64(UInt32(UInt8(Int8(100))))|1));
    try (resource = Class795()) { // block id: 560
        try { // block id: 562
            ();
            var566 &= var566;
            (-108)
        } catch (_) { // block id: 572
            ();
            var var576 : Int64 = Int64(Int32(-74));
            var576 ** (var576 & 3)
        };
        ([var557, var557, (), (), (), var557, var557, var590, var590, var557] as String);
        let var600 : ?Unit = (Int64(Int16(-123)) as Unit);
        (var600 ?? var605)
    } finally { // block id: 607
        ((UInt8(167)&127..UInt8(45)&127:(-22)|1), var613, (UInt16(1)&127..=UInt16(116)&127:(-99)|1), var590)[3]
    };
    ['e', 'N', 'm', 'T', 'a', 'b', 'v', 'u', 'k', '5'][5]
}

func func351(param352 : Int64) : Option<Unit> { // block id: 353
    let var360 : Unit = ();
    let var383 : Range<UInt64> = (UInt64(UInt64(148))&127..=UInt64(Int16(Int8(34)))&127:((-117)|1));
    let var403 : UInt32 = UInt32(UInt16(2));
    func func396(param397 : Int16) : Option<Unit> { // block id: 398
        var loopTimeVar413 : Range<UInt64> = (UInt64(137)&127..=UInt64(21)&127:((-76)|1));
        Option<Unit>.Some(for (i in loopTimeVar413 where var403 > UInt32(69)) {
            var410 ||= var410
        })
    }
;
    let var785 : ((Range<Int64>) -> Rune) -> Range<UInt64> = func775;
    (try { // block id: 358
        var360;
        var360;
        let var364 : Range<UInt32> = (UInt32(Int16(UInt16(87)))&127..=UInt32(Int8(-59))&127:(115|1));
        var364
    } catch (_) { // block id: 372
        var374
    } finally { // block id: 381
        var383;
        (UInt32(145)&127..UInt32(181)&127:126|1)
    }, var244 + var244, func396(var35), (true|>func420), (func787|>var785))[2]
}

public interface Interface799 <: Interface12 {

}

public interface Interface798 <: Interface12 & Interface799 {
    func func1837(namedParam1838 ! : UInt64) : Int64 { // block id: 1839
        var605;
        var var1865 : (Range<UInt8>, Range<UInt8>, Range<UInt16>, Unit) = ((UInt8(UInt8(UInt8(61)))&127..UInt8(Int8(-38))&127:(Int64(Int8(Int8(6)))|1)), (UInt8(UInt8(88))&127..=UInt8(Int8(Int8(-14)))&127:((-38)|1)), (UInt16(110)&127..=UInt16(161)&127:(-98)|1), ());
        if (((var1849 as Bool) ?? var410)) { var1452 } else { (match ('V') {
            case _ => 
                Option<Option<UInt64>>.None
            
        } ?? (var1865 as UInt64)) } ;
        74
    }

}

public open class Class795 <: Interface12 & Interface798 & Resource {
    public init() { // block id: 797

    }
;
    let var804 : Int64 = 29;
    public static var var989 : Float64 = 29.0;
    static let var1179 : (Int64, Range<UInt64>, UInt8, Range<Int64>, Range<Int16>, Int32, Int8, UInt16) = (41, (UInt64(8)&127..=UInt64(191)&127:(-104)|1), UInt8(145), (71&127..=(-127)&127:106|1), (Int16(111)&127..=Int16(87)&127:(105|1)), Int32(42), Int8(-82), UInt16(239));
    var var1471 : Bool = false;
    public func func1837(namedParam1838 ! : UInt64) : Int64 { // block id: 1839
        var605;
        var var1865 : (Range<UInt8>, Range<UInt8>, Range<UInt16>, Unit) = ((UInt8(UInt8(UInt8(61)))&127..UInt8(Int8(-38))&127:(Int64(Int8(Int8(6)))|1)), (UInt8(UInt8(88))&127..=UInt8(Int8(Int8(-14)))&127:((-38)|1)), (UInt16(110)&127..=UInt16(161)&127:(-98)|1), ());
        if (((var1849 as Bool) ?? var410)) { var1452 } else { (match ('V') {
            case _ => 
                Option<Option<UInt64>>.None
            
        } ?? (var1865 as UInt64)) } ;
        74
    }

    public func isClosed(): Bool { return true }
    public func close(): Unit {}
}

public enum Enum820 {
    defaultValue
}
func func31(param261 : Range<Int32>, namedParam262 ! : Range<Int64>, namedParam263 ! : Int64) : Unit { // block id: 264
    var loopTimeVar348 : Int64 = 0;
    do {
        loopTimeVar348++;

    } while (((((47, var190, (Int32(-35)&127..var186&127:(namedParam263|1)))|>func268) is Int8)) && loopTimeVar348 < 100 ) ;
    var var792 : (Int64) -> Option<Unit> = func351;
    let var801 : Class795 = Class795();
    match ((var801.var804|>var792)) {
        case _ => 
            var810++;
            if (false) { var717 } else { (var810&127..=var810&127:(namedParam263|1)) } 
        
    };
    match (if (true) { var827 } else { var840 } [4]) {
        case defaultValue => 
            var857;
            ();
            var769++
        
        case defaultValue => 
            false;
            Class795();
            ()
        
        case _ => 
            false;
            if (true) { var657 } else { ([Float32(107.0), var96, var96, var96, Float32(-62.0), var96, var96, Float32(-30.0), Float32(36.0), var96], [var96, Float32(-57.0), var96, Float32(57.0), var96, var96, Float32(-69.0), var96, Float32(78.0), Float32(-34.0)]) } ;
            var566 *= var566
        
    }
}


public enum Enum999 {
    defaultValue
}
func func943(param944 : (Range<Int64>) -> Rune) : Unit { // block id: 947
    var var955 : Interface12 = Class8();
    let var1002 : Enum999 = Enum999.defaultValue;
    let var1010 : UInt16 = UInt16(Int8(47));
    let var1020 : Array<Rune> = ['S', '4', 'a', 'S', '6', 'G', 'U', 'K', 'D', '6'];
    func func964(namedParam965 ! : Float64, namedParam966 ! : Enum820, namedParam967 ! : (Range<Int16>) -> Float64, namedParam970 ! : Option<Unit>) : Array<Rune> { // block id: 971
        match (((-77)|>func351)) {
            case _ => 
                Float32(-49.0) ** Float32(Int32(Float32(82.0)) & 3);
                if (true) { Class795() } else { Class795() } 
            
        };
        Class795.var989 += var244;
        var var1014 : Int64 = Int64(UInt8(UInt8(Int8(-58))));
        ((match (var1002) {
            case _ => 
                UInt32(32);
                (UInt16(220)&127..=var1010&127:(var1014|1))
            
        } as Array<Rune>) ?? var1020)
    }
;
    var var1025 : (Range<Int16>) -> Float64 = { lambdaParameter1028 : Range<Int16> => (-87.0) };
    var var1035 : (Range<UInt8>, Range<UInt8>, Range<UInt16>, Unit) = ((UInt8(236)&127..=UInt8(78)&127:((-60)|1)), (UInt8(251)&127..=UInt8(236)&127:71|1), (UInt16(177)&127..=UInt16(8)&127:(-86)|1), ());
    var var1052 : Range<UInt64> = (UInt64(191)&127..UInt64(151)&127:85|1);
    var var1108 : UInt64 = UInt64(196);
    var loopTimeVar1164 : Int64 = 0;
    do {
        loopTimeVar1164++;
        func964(namedParam965 : var244, namedParam966 : Enum820.defaultValue, namedParam967 : var1025, namedParam970 : Option<Unit>.Some(()));
        match (var1035) {
            case (caseVar1046 : Float64,caseVar1047 : Option<Array<Rune>>,_,caseVar1048) => 
                [var1052, (UInt64(175)&127..UInt64(61)&127:(-128)|1), (UInt64(126)&127..UInt64(195)&127:95|1), (UInt64(37)&127..UInt64(68)&127:(-100)|1), (var769&127..UInt64(74)&127:(93|1)), (UInt64(213)&127..UInt64(29)&127:((-34)|1)), (UInt64(253)&127..=var769&127:(var638|1)), (var769&127..=UInt64(139)&127:(var638|1)), (var769&127..=UInt64(189)&127:(64|1)), (UInt64(69)&127..UInt64(201)&127:(var1081|1))]
            
            case _ => 
                let var1091 : Enum820 = Enum820.defaultValue;
                [Enum820.defaultValue, Enum820.defaultValue, Enum820.defaultValue, var1091, var1091, var1091, Enum820.defaultValue, var1091, Enum820.defaultValue, Enum820.defaultValue];
                UInt8(131);
                let var1148 : Range<UInt64> = (UInt64(36)&127..=UInt64(123)&127:(-44)|1);
                if (var1102) { [(var769&127..=var1108&127:(var1081|1)), var1052, (var1108&127..UInt64(15)&127:((-38)|1)), var1052, (UInt64(0)&127..=UInt64(147)&127:(var638|1)), (var1108&127..=var1108&127:(8|1)), (UInt64(157)&127..=UInt64(63)&127:(-23)|1), (UInt64(68)&127..UInt64(202)&127:(var638|1)), (var1108&127..=UInt64(136)&127:(var638|1)), var1052] } else { [(UInt64(155)&127..UInt64(71)&127:19|1), (var769&127..=UInt64(246)&127:(var638|1)), var1052, (UInt64(132)&127..=UInt64(31)&127:58|1), (UInt64(218)&127..=var1108&127:(84|1)), var1148, (var769&127..=UInt64(240)&127:(0|1)), (var1108&127..=var769&127:((-43)|1)), (UInt64(127)&127..UInt64(206)&127:67|1), (var769&127..=UInt64(245)&127:((-27)|1))] } 
            
        }
    } while (((try { // block id: 951
        if (false) { var955 } else { Class8() } 
    } finally { // block id: 958
        ();
        var410;
        var955
    } is Int16)) && loopTimeVar1164 < 100 ) 
}

public func func1168(param554 : Range<Int64>) : Rune { // block id: 555
    var var557 : Unit = ();
    var557;
    let var590 : Unit = ();
    var var613 : Range<UInt8> = (UInt8(UInt8(Int8(-83)))&127..=UInt8(UInt8(Int8(UInt8(134))))&127:(Int64(UInt32(UInt8(Int8(100))))|1));
    try (resource = Class795()) { // block id: 560
        try { // block id: 562
            ();
            var566 &= var566;
            (-108)
        } catch (_) { // block id: 572
            ();
            var var576 : Int64 = Int64(Int32(-74));
            var576 ** (var576 & 3)
        };
        ([var557, var557, (), (), (), var557, var557, var590, var590, var557] as String);
        let var600 : ?Unit = (Int64(Int16(-123)) as Unit);
        (var600 ?? var605)
    } finally { // block id: 607
        ((UInt8(167)&127..UInt8(45)&127:(-22)|1), var613, (UInt16(1)&127..=UInt16(116)&127:(-99)|1), var590)[3]
    };
    ['e', 'N', 'm', 'T', 'a', 'b', 'v', 'u', 'k', '5'][5]
}

public func func1201(namedParam1202 ! : Bool) : Int64 { // block id: 1203
    var857;
    let var1245 : Array<Int64> = [(-33), (-92), (-35), (-80), (-122), 63, 1, 68, 81, 9];
    func func1206(param1207 : Unit, param1208 : Array<Unit>) : Int64 { // block id: 1209
        match (Class795()) {
            case caseVar1216 : Option<Array<Rune>> => 
                Option<Unit>.Some(param1207);
                [(-70), 3, 19, 125, (-98), (-3), 53, 119, (-106), (-35)]
            
            case _ => 
                if (true) { (var1081&127..var1081&127:(var638|1)) } else { (var638&127..98&127:(12|1)) } ;
                var605;
                [88, (-110), 32, (-78), (-90), (-8), (-26), (-36), 15, 18]
            
            case _ => 
                let var1240 : Array<Int64> = [(-77), (-128), 49, 13, 120, 82, 4, (-68), 115, (-55)];
                var1240
            
            case _ => 
                var1245
            
        }[4]
    }
;
    let var1291 : Int32 = Int32(UInt16(119));
    let var1332 : Range<Int64> = (Int64(UInt64(0))&127..=Int64(UInt64((-48)))&127:((-85)|1));
    let var1369 : Int8 = Int8(UInt8(132));
    let var1405 : ?Array<Rune> = (Class795() as Array<Rune>);
    var var1413 : UInt16 = UInt16(167);
    func1206(match (match (var1251) {
            case 163 | 120 => 
                let var1266 : Range<Int64> = (60&127..83&127:106|1);
                let var1275 : UInt16 = UInt16(Int16(-52));
                if (namedParam1202) { (var638, (UInt64(57)&127..var769&127:((-20)|1)), UInt8(232), var1266, (var35&127..=Int16(86)&127:(var638|1)), var186, Int8(-71), var1275) } else { (92, (UInt64(246)&127..=UInt64(100)&127:110|1), var566, (var1081&127..13&127:(25|1)), (Int16(62)&127..var35&127:(var638|1)), var1291, Int8(-64), UInt16(120)) } 
            
            case _ => 
                var717;
                var605;
                let var1311 : Int16 = Int16(Int16(Int8(Int8(106))));
                let var1321 : UInt16 = UInt16(UInt8(170));
                (101, (UInt64(119)&127..=UInt64(10)&127:40|1), UInt8(61), (var638&127..14&127:(var638|1)), (var1311&127..=Int16(117)&127:((-120)|1)), var186, Int8(48), var1321)
            
            case _ : Int32 => 
                (var638, (UInt64(139)&127..UInt64(228)&127:(-47)|1), var566, var1332, var1341, var186, var810, var1346)
            
            case _ => 
                var769++;
                if (true) { ((-94), var1359, var566, var1332, (Int16(55)&127..=Int16(-55)&127:(-105)|1), var1291, var1369, var1346) } else { (87, var1376, UInt8(89), (74&127..=(-26)&127:124|1), var1341, Int32(85), Int8(26), UInt16(29)) } 
            
        }) {
        case (caseVar1386 : UInt32,caseVar1387 : Option<Unit>,_ : Range<UInt16>,_ : Interface799,_,caseVar1388 : Int16,caseVar1389 : Interface798,caseVar1390 : UInt32) => 
            var605;
            var605
        
        case caseVar1396 => 
            var1399;
            if (false) { Option<Array<Rune>>.None } else { var1405 } ;
            var605
        
        case _ => 
            var1413--
        
    }, if (var1419[0]) { match (var1424) {
        case caseVar1431 : Array<Unit> => 
            Option<Unit>.None;
            var432
        
        case caseVar1437 : Class795 => 
            ();
            var432
        
        case _ => 
            [(), (), (), (), (), (), (), (), (), ()]
        
        case _ => 
            if (true) { Option<UInt64>.Some(UInt64(236)) } else { var1452 } ;
            var432
        
    } } else { [var605, (), (), (), (), var605, var605, (), (), ()] } )
}


public func func160(param161 : Range<UInt32>, namedParam162 ! : Range<UInt8>, optionalParam163 ! : Range<UInt64> = (UInt64(Int32(UInt8(UInt8(117))))&127..UInt64(Int32(Int8(Int8(108))))&127:(Int64(UInt8(241))|1))) : Array<Unit> { // block id: 175
    var var253 : Unit = ();
    if (if (try { // block id: 179
        ();
        ();
        false
    } finally { // block id: 183
        var186 | var186;
        var190
    }) { // block id: 192
        var35 /= ((Int16(112)) | 1);
        let var197 : Unit = ();
        var197;
        var190 || true
    } else if (var205[1]) { // block id: 213
        let var215 : Range<Int8> = (Int8(UInt8(Int8(121)))&127..=Int8(90)&127:(Int64(UInt8(UInt8(UInt8(165))))|1));
        var215;
        var var228 : Range<UInt8> = (UInt8(128)&127..UInt8(108)&127:(Int64(UInt32(Int16(Int8(90))))|1));
        let var239 : UInt8 = UInt8(64);
        if (var190) { var228 } else { (UInt8(31)&127..var239&127:(18|1)) } ;
        var244 > 85.0
    } else { // block id: 251
        var253;
        var253;
        true
    }) { // block id: 257
        var253
    };
    var var921 : Range<Int32> = (Int32(88)&127..Int32(-115)&127:(-40)|1);
    let var1166 : ((Range<Int64>) -> Rune) -> Unit = func943;
    func func932(namedParam933 ! : (Range<Int16>) -> Float64, namedParam936 ! : Interface12, namedParam937 ! : ((Range<Int64>) -> Rune) -> Range<UInt64>, namedParam940 ! : Range<UInt64>) : (Int64, Range<UInt64>, UInt8, Range<Int64>, Range<Int16>, Int32, Int8, UInt16) { // block id: 941
        { lambdaParameter1172 : Range<Int64> => func553(lambdaParameter1172) }|>var1166;
        Class795.var1179
    }
;
    var var1468 : Class795 = Class795();
    func31(try { // block id: 901
        ([var96, var96, var96, var96, var909, var909, Float32(105.0), Float32(-70.0), var909, var909], [Float32(-126.0), Float32(-48.0), Float32(-125.0), Float32(39.0), Float32(-30.0), Float32(80.0), Float32(-38.0), Float32(-83.0), Float32(-6.0), Float32(-77.0)]);
        Class795();
        if (var410) { var921 } else { var921 } 
    } finally { // block id: 924
        (var186&127..Int32(27)&127:(var638|1))
    }, namedParam262 : func932(namedParam933 : func478, namedParam936 : Class8(), namedParam937 : func775, namedParam940 : (UInt64(230)&127..=var769&127:(102|1)))[3], namedParam263 : func1201(namedParam1202 : var1468.var1471));
    let var1482 : Array<Float32> = [Float32(-43.0), Float32(16.0), Float32(80.0), Float32(-92.0), Float32(111.0), Float32(81.0), Float32(-37.0), Float32(20.0), Float32(-39.0), Float32(100.0)];
    let var1495 : UInt8 = UInt8(175);
    (match (var1482) {
        case _ => 
            Enum999.defaultValue;
            if (var1489) { Option<(Int16, Array<Unit>)>.None } else { Option<(Int16, Array<Unit>)>.None } 
        
    } ?? match (var1495) {
        case caseVar1499 : Bool => 
            var var1505 : UInt8 = UInt8(Int8(-124));
            (namedParam162, (var1505&127..UInt8(229)&127:(101|1)), (UInt16(177)&127..UInt16(8)&127:(var638|1)), var605);
            ();
            var1517
        
        case _ => 
            var1468;
            if (false) { var1517 } else { var1517 } 
        
    })[1]
}

func func143(param144 : Int64) : Array<Unit> { // block id: 145
    var var156 : ?Array<Unit> = Option<Array<Unit>>.None;
    if (false) { (Option<Array<Unit>>.None ?? (var156 ?? [(), (), (), (), (), (), (), (), (), ()])) } else { func160(var374, namedParam162 : (var566&127..var566&127:(var1081|1))) } 
}

public func func131(namedParam132 ! : Range<Int32>, namedParam133 ! : Int64, optionalParam134 ! : Range<UInt32> = (UInt32(143)&127..=UInt32(Int32(-94))&127:(Int64(84)|1))) : Bool { // block id: 141
    if (if (var1102) { // block id: 1548
        var190
    } else if (true) { // block id: 1551
        var186;
        !var1102
    } else { // block id: 1555
        (UInt16(190)&127..=UInt16(150)&127:43|1);
        false
    }) { // block id: 1558
        var638
    } else if (([(Int8(58)&127..=Int8(70)&127:(-7)|1), (Int8(60)&127..=Int8(2)&127:(-24)|1), (Int8(123)&127..Int8(63)&127:27|1), (Int8(70)&127..Int8(65)&127:(-80)|1), (Int8(97)&127..=Int8(-116)&127:(-99)|1), (Int8(-69)&127..=Int8(-103)&127:51|1), (Int8(-70)&127..Int8(110)&127:15|1), (Int8(-32)&127..Int8(-46)&127:17|1), (Int8(83)&127..Int8(-21)&127:(-27)|1), (Int8(-40)&127..=Int8(-116)&127:52|1)] is (Float64, Enum820, (Range<Int16>) -> Float64, Option<Unit>) -> Array<Rune>)) { // block id: 1562
        var117;
        var117;
        (-33)
    } else { // block id: 1566
        var var1568 : Range<Int64> = (74&127..(-52)&127:92|1);
        var1568;
        !var1489;
        var1573
    }|>func143;
    false
}


public func func86(param87 : UInt32, param88 : Rune) : Range<UInt64> { // block id: 89
    var var114 : Unit = ();
    var loopTimeVar128 : Int64 = 0;
    do {
        loopTimeVar128++;
        [(), var114, var117, var117, (), var117, var114, (), var114, ()][5]
    } while ((([var96, var96, Float32(-127.0), var96, Float32(-18.0), var96, var96, Float32(-5.0), Float32(-3.0), var96][1] is Class8)) && loopTimeVar128 < 100 ) ;
    match {
        case func131(namedParam132 : (var1583 ?? var1586), namedParam133 : ((-39), var410, var1586)[0], optionalParam134 : (UInt32(246)&127..UInt32(102)&127:(-24)|1)) => 
        93;
        var loopTimeVar1607 : Int64 = 0;
        while ((false) && loopTimeVar1607 < 100 ) {
            loopTimeVar1607++;
            var730 = var730
        };
        try { // block id: 1609
            var1611;
            if (var1489) { (Int8(106)&127..=Int8(-35)&127:126|1) } else { (Int8(-107)&127..=Int8(-92)&127:(-88)|1) } ;
            'o'
        } finally { // block id: 1619
            if (true) { 'x' } else { '3' } 
        }
        case _ => 
        if (var1489) { // block id: 1627
            Float32(86.0);
            (Int16(68)&127..=Int16(83)&127:(var1573|1));
            param88
        } else if (true) { // block id: 1635
            'W'
        } else { // block id: 1637
            (var374, 16.0, Option<Unit>.None, (-63.0), var1376);
            Option<Unit>.None;
            var730
        }
    };
    (try { // block id: 1650
        var35 / ((var35) | 1)
    } catch (_) { // block id: 1654
        Int16(26)
    }, if (var1102) { // block id: 1658
        (-68.0)
    } else { // block id: 1660
        -Int32(21);
        var244 ** Float64(Int32((-33.0)) & 3)
    }, var1376, [var909, Float32(26.0), var909, Float32(-11.0), Float32(-39.0), Float32(53.0), Float32(60.0), Float32(-68.0), Float32(-27.0), Float32(126.0)], var638, if (var190) { (var1683, [Float32(-111.0), var96, Float32(-80.0), var1707, Float32(53.0), var909, Float32(-100.0), var909, var909, Float32(64.0)]) } else { var657 } )[2]
}



main(): Int64 {
    try {
        let var40 : Int8 = Int8(92);
        func func14(param15 : String, optionalParam16 ! : Int32 = Int32(108)) : Class8 { // block id: 18
            var loopTimeVar23 : Int64 = 0;
            do {
                loopTimeVar23++;

            } while ((true) && loopTimeVar23 < 100 ) ;
            func func53(param54 : Range<UInt32>) : Array<Unit> { // block id: 55
                var57
            }
;
            (((var40|>func31) as Unit) ?? func53((UInt32(46)&127..=UInt32(228)&127:83|1))[2]);
            let var72 : Class8 = Class8(namedParam77 : (Option<(Int16, Array<Unit>)>.Some((Int16(122), [(), (), (), (), (), (), (), (), (), ()])) is Class8), namedParam78 : func31, optionalParam81 : UInt32(57));
            var72
        }
;
        func14(var1834).func1837(namedParam1838 : UInt64(194))
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var40*var40), 64)
        crccheck.updateBuffer(UInt64(var1573*var1573), 64)
        crccheck.updateBuffer(UInt64(var1807*var1807), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Class8 {

}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_expected_left_brace
// ASSERT: scan parse_expected_case


