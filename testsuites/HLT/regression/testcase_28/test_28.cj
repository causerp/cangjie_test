/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output


var var61 : Class55 = Class55()
public var var108 : Unit = ()
public var var112 : ?Unit = Option<Unit>.None
public var var152 : Int32 = Int32(Int8(65))
var var158 : Range<UInt16> = (UInt16(153)&127..UInt16(172)&127:42|1)
public let var205 : Bool = (Float32(Float32(Float32(-23.0))) is Int64)
var var250 : ?Unit = Option<Unit>.None
public let var296 : Array<Option<Unit>> = [((Int32(88)&127..Int32(-113)&127:65|1) as Unit), ("""
(l5*6
6p(4S
""" as Unit), (((UInt16(102)&127..UInt16(113)&127:(16|1)), (), "xg7 `zCWR#", [(-51.0), 91.0, (-80.0), (-94.0), 82.0, 97.0, (-16.0), (-117.0), 3.0, 49.0], (Option<Unit>.None is Range<UInt16>), (UInt8(112)&127..UInt8(72)&127:(123|1)), (UInt8(23)&127..UInt8(51)&127:(-37)|1)) as Unit), Option<Unit>.None, ((Int32(Int16(-83))&127..=Int32(-92)&127:(Int64(UInt64(178))|1)) as Unit), (Int32(103) as Unit), Option<Unit>.None, (Float32(66.0) as Unit), ((UInt64(UInt8(112))&127..=UInt64(Int16(-75))&127:(85|1)) as Unit), Option<Unit>.None]
public let var353 : Range<Int64> = (Int64(Int32(Int32(Int32(19))))&127..Int64(UInt8(Int8(95)))&127:((-62)|1))
public var var365 : UInt8 = UInt8(132)
let var447 : Float32 = Float32(Float32(54.0))
public let var619 : Int8 = Int8(UInt8(243))
public let var630 : Range<Int8> = (Int8(-95)&127..=Int8(118)&127:(36|1))
public var var645 : Int8 = Int8(-54)
public var var653 : Bool = ((40&127..(-113)&127:123|1) is UInt8)
public let var657 : Rune = 'J'
public let var717 : Class55 = Class55()
public var var728 : Float32 = Float32(-85.0)
public var var751 : Float64 = 101.0
public let var755 : Array<Int32> = [Int32(-127), Int32(-60), Int32(-32), Int32(-11), Int32(44), Int32(52), Int32(-107), Int32(-102), Int32(-122), Int32(121)]
public let var761 : UInt64 = UInt64(204)
public var var764 : Int64 = Int64(UInt8(126))
public var var909 : Int16 = Int16(Int8(109))
public let var1015 : String = " Y[>$@n_]s"
let var1023 : String = "9_\"${var1015}R${var1015}A${var1015}sOq0${var1015}l${var1015}"
public let var1043 : Range<UInt64> = (UInt64(23)&127..=UInt64(145)&127:(-126)|1)
public let var1051 : (Range<UInt32>, (Float64, Array<Int32>, Int32, Float32, Range<Int8>), Unit, Class55) = ((UInt32(69)&127..=UInt32(9)&127:(Int64(UInt64(Int8(-40)))|1)), (Float64(Float32(Float32(-66.0))), [Int32(76), Int32(Int8(114)), Int32(102), Int32(63), Int32(-54), Int32(UInt32(209)), Int32(UInt8(102)), Int32(67), Int32(110), Int32(Int8(14))], Int32(UInt32(67)), Float32(52.0), (Int8(UInt8(104))&127..=Int8(Int8(-39))&127:(69|1))), (), Class55())
public var var1234 : UInt16 = UInt16(UInt16(UInt8(UInt8(Int8(60)))))
var var1273 : Range<UInt8> = (UInt8(UInt8(250))&127..=UInt8(191)&127:(Int64(Int32(UInt32(Int32(124))))|1))
var var1284 : Range<UInt8> = (UInt8(247)&127..UInt8(237)&127:(-3)|1)
public var var1450 : Range<UInt8> = (UInt8(UInt8(33))&127..=UInt8(166)&127:(Int64(UInt32(Int8(-111)))|1))
public var var1584 : Array<Option<(Range<Int8>, Option<Unit>, Float32, UInt8, (Range<UInt16>, Unit, String, Array<Float64>, Bool, Range<UInt8>, Range<UInt8>), UInt16)>> = [Option<(Range<Int8>, Option<Unit>, Float32, UInt8, (Range<UInt16>, Unit, String, Array<Float64>, Bool, Range<UInt8>, Range<UInt8>), UInt16)>.None, ([26.0, 41.0, 39.0, (-41.0), (-113.0), 99.0, 99.0, (-76.0), 109.0, (-43.0)] as (Range<Int8>, Option<Unit>, Float32, UInt8, (Range<UInt16>, Unit, String, Array<Float64>, Bool, Range<UInt8>, Range<UInt8>), UInt16)), Option<(Range<Int8>, Option<Unit>, Float32, UInt8, (Range<UInt16>, Unit, String, Array<Float64>, Bool, Range<UInt8>, Range<UInt8>), UInt16)>.None, Option<(Range<Int8>, Option<Unit>, Float32, UInt8, (Range<UInt16>, Unit, String, Array<Float64>, Bool, Range<UInt8>, Range<UInt8>), UInt16)>.None, Option<(Range<Int8>, Option<Unit>, Float32, UInt8, (Range<UInt16>, Unit, String, Array<Float64>, Bool, Range<UInt8>, Range<UInt8>), UInt16)>.None, ((Int16(UInt16(46))&127..Int16(Int8(-78))&127:((-100)|1)) as (Range<Int8>, Option<Unit>, Float32, UInt8, (Range<UInt16>, Unit, String, Array<Float64>, Bool, Range<UInt8>, Range<UInt8>), UInt16)), (Option<UInt8>.None as (Range<Int8>, Option<Unit>, Float32, UInt8, (Range<UInt16>, Unit, String, Array<Float64>, Bool, Range<UInt8>, Range<UInt8>), UInt16)), (Class55() as (Range<Int8>, Option<Unit>, Float32, UInt8, (Range<UInt16>, Unit, String, Array<Float64>, Bool, Range<UInt8>, Range<UInt8>), UInt16)), (Option<(Range<Int8>, Option<Unit>, Float32, UInt8, (Range<UInt16>, Unit, String, Array<Float64>, Bool, Range<UInt8>, Range<UInt8>), UInt16)>.None as (Range<Int8>, Option<Unit>, Float32, UInt8, (Range<UInt16>, Unit, String, Array<Float64>, Bool, Range<UInt8>, Range<UInt8>), UInt16)), Option<(Range<Int8>, Option<Unit>, Float32, UInt8, (Range<UInt16>, Unit, String, Array<Float64>, Bool, Range<UInt8>, Range<UInt8>), UInt16)>.None]
public let var2076 : String = """
<SY}c
0${var1023}/@${var1015}lK${var1023}
"""
public var var2215 : ??Array<Float64> = (Int8(UInt8(UInt8(127))) as Option<Array<Float64>>)
var var2265 : (UInt16, Range<Int64>, Range<Int8>, Option<Unit>, Range<UInt8>, Rune) = (UInt16(70), (48&127..(-76)&127:(-2)|1), (Int8(-115)&127..=Int8(-114)&127:((-38)|1)), ((Int16(Int8(79))&127..Int16(-69)&127:(Int64(UInt64(84))|1)) as Unit), (UInt8(Int8(-31))&127..UInt8(UInt8(Int8(-93)))&127:(Int64(UInt64(Int8(27)))|1)), 't')
var var2379 : Range<UInt8> = (UInt8(16)&127..UInt8(UInt8(212))&127:(Int64(UInt64(233))|1))
public var var2548 : (Range<UInt16>, Unit, String, Array<Float64>, Bool, Range<UInt8>, Range<UInt8>) = ((UInt16(178)&127..=UInt16(202)&127:43|1), (), """
0#${var1015}\\N3${var2076}
5}az7
""", [Float64((-40.0)), Float64(Float32(Float32(87.0))), (-114.0), Float64(Float32(Float32(123.0))), Float64((-108.0)), 71.0, 46.0, (-44.0), Float64(79.0), Float64((-30.0))], true, (UInt8(39)&127..UInt8(188)&127:(-20)|1), (UInt8(103)&127..UInt8(3)&127:20|1))
public let var2601 : Float64 = 45.0
public var var2678 : Option<Option<Option<Array<Range<UInt8>>>>> = (Float32(-106.0) as Option<Option<Array<Range<UInt8>>>>)
public var var2779 : Bool = (([(), (), (), (), (), (), (), (), (), ()], (UInt32(UInt8(135))&127..UInt32(147)&127:((-120)|1)), [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]) is Option<Bool>)
public let var2854 : (Array<Unit>, Range<UInt32>, Array<Unit>, Array<Unit>) = ([(), (), (), (), (), (), (), (), (), ()], (UInt32(Int16(Int8(-26)))&127..UInt32(215)&127:(Int64(Int8(Int8(37)))|1)), [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()])
public let var3050 : ??Int8 = Option<Option<Int8>>.None
var var3262 : ?Class55 = (Float32(-123.0) as Class55)
public let var3282 : ?Range<UInt64> = (("]76/DuT!${var1015}Y${var1023}E${var1023}", [false, false, false, true, true, false, true, true, true, true]) as Range<UInt64>)
public let var3323 : Option<Bool> = Option<Bool>.None
public let var3384 : ?Int8 = ((UInt8(171) as Option<Int8>) as Int8)
public let var3433 : Int32 = Int32(62)
public let var3450 : Rune = '6'
public let var3475 : Int64 = Int64(UInt8(28))
public let var3482 : Int64 = Int64(UInt32(Int32(66)))
public var var3609 : (String, Array<Bool>) = ("=%+R${var1023}Lz7${var1015}ha{c", [false, true, false, true, true, false, false, true, false, false])
public let var3679 : ?UInt8 = Option<UInt8>.None
public var var3713 : Array<Int32> = [Int32(-4), Int32(-97), Int32(5), Int32(-41), Int32(23), Int32(101), Int32(87), Int32(20), Int32(-87), Int32(-45)]
public let var3823 : Float64 = 65.0
public let var3856 : Array<Option<Unit>> = Array<Option<Unit>>(10){ i => (Option<Unit>.None as Unit) }
public var var3943 : Int16 = Int16(Int16(-91))
public var var4088 : Float64 = (-112.0)
var var4112 : Option<Array<Option<Unit>>> = Option<Array<Option<Unit>>>.None
let var4158 : Float64 = Float64(81.0)
var var4360 : ?Array<Range<UInt8>> = (("u${var1023}>_`2<${var2076}2${var1015}jRD", [false, false, false, false, true, false, true, true, true, true]) as Array<Range<UInt8>>)
let var4416 : (Float64, Array<Int32>, Int32, Float32, Range<Int8>) = (21.0, [Int32(39), Int32(40), Int32(42), Int32(33), Int32(23), Int32(54), Int32(-68), Int32(-1), Int32(71), Int32(-27)], Int32(-64), Float32(Float32(Float32(Float32(0.0)))), (Int8(87)&127..=Int8(-35)&127:78|1))
public let var4440 : Interface58 = Class55()
public var var4515 : Range<Int32> = (Int32(-62)&127..=Int32(-94)&127:2|1)
public let var4525 : Option<Range<Int16>> = ([(), (), (), (), (), (), (), (), (), ()] as Range<Int16>)
public var var4530 : Range<Int16> = (Int16(0)&127..Int16(-67)&127:((-99)|1))
var var4560 : ?Range<UInt8> = Option<Range<UInt8>>.None
public let var4565 : ?Array<Float64> = Option<Array<Float64>>.None
public let var4573 : ?Array<Float64> = ([Option<Unit>.None, (Option<Bool>.None as Unit), Option<Unit>.None, Option<Unit>.None, (() as Unit), Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, (Option<Option<Range<UInt8>>>.None as Unit)] as Array<Float64>)
public var var4594 : UInt32 = UInt32(52)
let var4622 : Int32 = Int32(UInt32(Int32(Int16(-100))))
let var4716 : ?(Range<Int8>, Option<Unit>, Float32, UInt8, (Range<UInt16>, Unit, String, Array<Float64>, Bool, Range<UInt8>, Range<UInt8>), UInt16) = ((UInt8(167)&127..UInt8(59)&127:(-26)|1) as (Range<Int8>, Option<Unit>, Float32, UInt8, (Range<UInt16>, Unit, String, Array<Float64>, Bool, Range<UInt8>, Range<UInt8>), UInt16))
public var var4840 : Range<Int32> = (Int32(-71)&127..=Int32(85)&127:(-33)|1)
public let var4846 : ?Range<Int8> = Option<Range<Int8>>.None
public let var4892 : ?Unit = (((UInt32(133)&127..=UInt32(184)&127:(-8)|1) as Range<UInt8>) as Unit)
public var var4900 : Float64 = (-97.0)
public let var4997 : ??String = Option<Option<String>>.None
public var var5014 : Unit = ()
var var5018 : Int32 = Int32(Int8(-94))
public interface Interface59 {
    func func64(param65 : Bool) : (Range<UInt16>, Unit, String, Array<Float64>, Bool, Range<UInt8>, Range<UInt8>) { // block id: 66
        var var69 : Bool = false;
        var69 ||= (func73(namedParam74 : (var152&127..Int32(-24)&127:((-31)|1)), namedParam75 : var158, optionalParam76 : 'u', namedParam78 : Int8(-109)) is Range<UInt8>);
        var var163 : (Range<UInt16>, Unit, String, Array<Float64>, Bool, Range<UInt8>, Range<UInt8>) = ((UInt16(UInt16(62))&127..=UInt16(UInt16(Int8(-70)))&127:(Int64(Int32(-94))|1)), (), ###"3j~bb/LWa{^"###, [121.0, 84.0, (-35.0), (-126.0), Float64(Float32(114.0)), (-30.0), 96.0, Float64(Float32(Float32(9.0))), Float64(Float32(-76.0)), 103.0], ((UInt16(38), (2&127..15&127:((-86)|1)), (Int8(-36)&127..Int8(0)&127:39|1), (UInt8(67) as Unit), (UInt8(204)&127..UInt8(254)&127:51|1), 'h') is Int64), (UInt8(122)&127..UInt8(168)&127:(-23)|1), (UInt8(90)&127..UInt8(252)&127:(-22)|1));
        var163
    }
;
    func func64(namedParam480 ! : (Rune, (UInt16, Range<Int64>, Range<Int8>, Option<Unit>, Range<UInt8>, Rune))) : UInt16 { // block id: 481
        func483(namedParam484 : var4515, namedParam485 : (if (false) { var4525 } else { Option<Range<Int16>>.Some(var4530) }  ?? match (var4112) {
            case _ : Option<Option<Range<UInt8>>> => 
                var4530
            
            case _ => 
                if (true) { var296 } else { [var112, Option<Unit>.None, var112, Option<Unit>.None, var112, var112, var112, var112, Option<Unit>.None, var112] } ;
                var4530
            
        }));
        (var4560 ?? match (match (var4565) {
                case caseVar4569 => 
                    var645;
                    var4573
                
                case _ => 
                    var4594--;
                    var4573
                
                case _ => 
                    var108;
                    Option<Array<Float64>>.None
                
                case _ => 
                    var4573
                
            }) {
            case _ => 
                if (false) { var1284 } else { (UInt8(100)&127..UInt8(127)&127:(-92)|1) } 
            
            case _ => 
                [var152, var152, var3433, var3433, var152, var152, var4622, Int32(116), var4622, var3433];
                (UInt8(143)&127..UInt8(122)&127:46|1)
            
        });
        var var4652 : Rune = 'L';
        try { // block id: 4632
            var loopTimeVar4638 : Range<UInt64> = (UInt64(141)&127..=UInt64(UInt8(127))&127:((-124)|1));
            for (i in loopTimeVar4638 where true) {
                var108;
                ()
            };
            UInt16(90)
        } finally { // block id: 4645
            try (resource = Class55()) { // block id: 4647
                if (false) { var657 } else { var4652 } ;
                ();
                var108
            } finally { // block id: 4656
                var108;
                if (var653) { Option<Array<Option<Unit>>>.Some([Option<Unit>.None, var112, Option<Unit>.None, var112, var112, var112, var112, Option<Unit>.Some(()), Option<Unit>.None, var112]) } else { var4112 } ;
                ()
            };
            UInt16(38) << ((var1234) & 7)
        }
    }

}

public interface Interface58 <: Interface59 {
    func func3572() : Unit { // block id: 3573

    }

}

public open class Class55 <: Interface58 & Interface59 & Resource {
    public init() { // block id: 57

    }
;
    public var var720 : Unit = ();
    public init(namedParam1491 ! : Int8, optionalParam1492 ! : Option<Array<Option<Unit>>> = Option<Array<Option<Unit>>>.Some([(((Int8(14)&127..Int8(16)&127:(104|1)), Option<Unit>.None, Float32(-79.0), UInt8(142), ((UInt16(168)&127..UInt16(108)&127:24|1), (), "WMP\\;w5=UF", [79.0, 110.0, 78.0, 6.0, 25.0, (-98.0), 90.0, 16.0, (-57.0), 55.0], true, (UInt8(166)&127..=UInt8(48)&127:(22|1)), (UInt8(243)&127..UInt8(135)&127:(-78)|1)), UInt16(254)) as Unit), ([(UInt8(129)&127..UInt8(216)&127:(-54)|1), (UInt8(96)&127..=UInt8(102)&127:(-89)|1), (UInt8(135)&127..=UInt8(8)&127:(-59)|1), (UInt8(9)&127..=UInt8(246)&127:50|1), (UInt8(148)&127..UInt8(109)&127:(-4)|1), (UInt8(203)&127..UInt8(233)&127:116|1), (UInt8(225)&127..UInt8(135)&127:106|1), (UInt8(28)&127..UInt8(238)&127:52|1), (UInt8(24)&127..UInt8(83)&127:24|1), (UInt8(55)&127..UInt8(112)&127:(-49)|1)] as Unit), Option<Unit>.Some(()), ((UInt64(47)&127..UInt64(235)&127:(107|1)) as Unit), (([false, true, false, false, false, false, false, true, false, true] as (Range<Int8>, Option<Unit>, Float32, UInt8, (Range<UInt16>, Unit, String, Array<Float64>, Bool, Range<UInt8>, Range<UInt8>), UInt16)) as Unit), (Class55() as Unit), Option<Unit>.Some(()), Option<Unit>.Some(()), ((UInt32(45)&127..UInt32(212)&127:7|1) as Unit), Option<Unit>.Some(())]), optionalParam1548 ! : String = "osI6 T>U0Y") { // block id: 1550
        var var1559 : UInt32 = UInt32(UInt16(UInt8(97)));
        var var1566 : Array<Unit> = Array<Unit>(10){ i => () };
        ([(), (), (), (), (), (), (), (), (), ()], (var1559&127..var1559&127:(var764|1)), var1566, var1566)[0][5];
        var1584[5]
    }
;
    let var1783 : Bool = true;
    static var var2034 : Unit = ();
    public func func64(param65 : Bool) : (Range<UInt16>, Unit, String, Array<Float64>, Bool, Range<UInt8>, Range<UInt8>) { // block id: 66
        var var69 : Bool = false;
        var69 ||= (func73(namedParam74 : (var152&127..Int32(-24)&127:((-31)|1)), namedParam75 : var158, optionalParam76 : 'u', namedParam78 : Int8(-109)) is Range<UInt8>);
        var var163 : (Range<UInt16>, Unit, String, Array<Float64>, Bool, Range<UInt8>, Range<UInt8>) = ((UInt16(UInt16(62))&127..=UInt16(UInt16(Int8(-70)))&127:(Int64(Int32(-94))|1)), (), ###"3j~bb/LWa{^"###, [121.0, 84.0, (-35.0), (-126.0), Float64(Float32(114.0)), (-30.0), 96.0, Float64(Float32(Float32(9.0))), Float64(Float32(-76.0)), 103.0], ((UInt16(38), (2&127..15&127:((-86)|1)), (Int8(-36)&127..Int8(0)&127:39|1), (UInt8(67) as Unit), (UInt8(204)&127..UInt8(254)&127:51|1), 'h') is Int64), (UInt8(122)&127..UInt8(168)&127:(-23)|1), (UInt8(90)&127..UInt8(252)&127:(-22)|1));
        var163
    }
;
    public func func64(namedParam480 ! : (Rune, (UInt16, Range<Int64>, Range<Int8>, Option<Unit>, Range<UInt8>, Rune))) : UInt16 { // block id: 481
        func483(namedParam484 : var4515, namedParam485 : (if (false) { var4525 } else { Option<Range<Int16>>.Some(var4530) }  ?? match (var4112) {
            case _ : Option<Option<Range<UInt8>>> => 
                var4530
            
            case _ => 
                if (true) { var296 } else { [var112, Option<Unit>.None, var112, Option<Unit>.None, var112, var112, var112, var112, Option<Unit>.None, var112] } ;
                var4530
            
        }));
        (var4560 ?? match (match (var4565) {
                case caseVar4569 => 
                    var645;
                    var4573
                
                case _ => 
                    var4594--;
                    var4573
                
                case _ => 
                    var108;
                    Option<Array<Float64>>.None
                
                case _ => 
                    var4573
                
            }) {
            case _ => 
                if (false) { var1284 } else { (UInt8(100)&127..UInt8(127)&127:(-92)|1) } 
            
            case _ => 
                [var152, var152, var3433, var3433, var152, var152, var4622, Int32(116), var4622, var3433];
                (UInt8(143)&127..UInt8(122)&127:46|1)
            
        });
        var var4652 : Rune = 'L';
        try { // block id: 4632
            var loopTimeVar4638 : Range<UInt64> = (UInt64(141)&127..=UInt64(UInt8(127))&127:((-124)|1));
            for (i in loopTimeVar4638 where true) {
                var108;
                ()
            };
            UInt16(90)
        } finally { // block id: 4645
            try (resource = Class55()) { // block id: 4647
                if (false) { var657 } else { var4652 } ;
                ();
                var108
            } finally { // block id: 4656
                var108;
                if (var653) { Option<Array<Option<Unit>>>.Some([Option<Unit>.None, var112, Option<Unit>.None, var112, var112, var112, var112, Option<Unit>.Some(()), Option<Unit>.None, var112]) } else { var4112 } ;
                ()
            };
            UInt16(38) << ((var1234) & 7)
        }
    }

    public func isClosed(): Bool { return true }
    public func close(): Unit {}
}


func func73(namedParam74 ! : Range<Int32>, namedParam75 ! : Range<UInt16>, optionalParam76 ! : Rune = 'h', namedParam78 ! : Int8) : Rune { // block id: 79
    var var90 : (Rune, (UInt16, Range<Int64>, Range<Int8>, Option<Unit>, Range<UInt8>, Rune)) = ('H', (UInt16(92), (28&127..11&127:(-43)|1), (Int8(UInt8(104))&127..Int8(53)&127:((-28)|1)), ((Int16(-78)&127..Int16(55)&127:105|1) as Unit), (UInt8(187)&127..=UInt8(25)&127:78|1), 'I'));
    (var90[1][3] ?? var108);
    let var121 : Bool = true;
    match (var112) {
        case _ => 
            93;
            ();
            if (var121) { optionalParam76 } else { 'S' } 
        
        case _ => 
            if (true) { 'g' } else { optionalParam76 } ;
            if (var121) { optionalParam76 } else { optionalParam76 } 
        
        case caseVar138 => 
            if (var121) { 'c' } else { optionalParam76 } 
        
        case _ => 
            if (false) { optionalParam76 } else { '5' } 
        
    }
}



public func func530(param531 : Range<UInt64>) : Bool { // block id: 532
    var var536 : Array<Bool> = Array<Bool>(10){ i => false };
    var536[5]
}

func func734(param735 : Array<Int32>) : Bool { // block id: 736
    false
}

public func func739(param740 : Range<UInt64>) : Array<Int32> { // block id: 741
    try (resource = Class55()) { // block id: 743
        if (true) { // block id: 746
            ()
        }
    } finally { // block id: 748
        var751 **= Float64(Int32(var751) & 3)
    };
    var755
}


func func768(param769 : String) : Array<Option<Unit>> { // block id: 770
    let var810 : Option<Array<Option<Unit>>> = Option<Array<Option<Unit>>>.Some([Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, ((-123.0) as Unit), (UInt16(Int16(72)) as Unit), Option<Unit>.None, Option<Unit>.Some(()), (Int64(UInt16(193)) as Unit), Option<Unit>.Some(()), (Class55() as Unit)]);
    let var858 : Interface58 = Class55();
    let var868 : Bool = (((UInt32(184)&127..=UInt32(89)&127:107|1) as Unit) is (UInt16, Range<Int64>, Range<Int8>, Option<Unit>, Range<UInt8>, Rune));
    let var894 : ?Unit = Option<Unit>.None;
    func func845() : Array<Option<Unit>> { // block id: 846
        var var850 : ?Range<UInt64> = ((-76) as Range<UInt64>);
        try { // block id: 848
            var850;
            (var810 ?? var296)
        } catch (e: Exception) { // block id: 856
            var858;
            match ("! :e[*97L0") {
                case "nd=TCm7 .<" => 
                    var653 && var868;
                    if (false) { [var112, Option<Unit>.Some(()), Option<Unit>.None, var112, Option<Unit>.Some(var108), var112, Option<Unit>.Some(var108), Option<Unit>.None, var112, Option<Unit>.None] } else { [Option<Unit>.Some(var108), Option<Unit>.Some(var108), var894, Option<Unit>.Some(()), Option<Unit>.None, var894, Option<Unit>.None, Option<Unit>.Some(var108), var894, var894] } 
                
                case _ => 
                    var909 = Int16(14);
                    var108;
                    if (var653) { var296 } else { [Option<Unit>.None, var894, var894, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.Some(var108), Option<Unit>.None, Option<Unit>.None, Option<Unit>.Some(var108)] } 
                
            }
        }
    }
;
    if ((try { // block id: 774
        82
    } catch (_) { // block id: 776
        (var152&127..Int32(-65)&127:(var764|1));
        (-18)
    } finally { // block id: 782
        var365 &= var365;
        var764
    } is Range<UInt16>)) { (if (true) { Option<Array<Option<Unit>>>.Some([Option<Unit>.Some(()), Option<Unit>.None, var112, var112, var112, Option<Unit>.Some(()), Option<Unit>.None, var112, Option<Unit>.Some(()), var112]) } else { var810 }  ?? [Option<Unit>.None, var112, var112, var112, Option<Unit>.None, Option<Unit>.Some(()), Option<Unit>.None, var112, var112, Option<Unit>.Some(var108)]) } else { func845() } ;
    let var933 : (String, Array<Bool>) = ("""
NS5iJ
hKVW!
""", [((37&127..=(-88)&127:((-4)|1)) is Interface59), true, ((###"R'6a{j`:xTe"###, [false, false, false, true, false, false, true, false, false, true]) is (Rune, (UInt16, Range<Int64>, Range<Int8>, Option<Unit>, Range<UInt8>, Rune))), false, false, ((((-60.0), [Int32(-112), Int32(93), Int32(-49), Int32(-22), Int32(119), Int32(-59), Int32(-45), Int32(99), Int32(-94), Int32(-38)], Int32(89), Float32(-86.0), (Int8(0)&127..Int8(96)&127:((-71)|1))) as Range<UInt64>) is Class55), false, ('t' is Int32), true, true]);
    var933[1];
    var296
}

func func585(param586 : Option<Range<UInt64>>) : Array<Option<Unit>> { // block id: 587
    let var594 : (Float64, Array<Int32>, Int32, Float32, Range<Int8>) = (121.0, [Int32(22), Int32(97), Int32(121), Int32(-78), Int32(-12), Int32(-89), Int32(38), Int32(124), Int32(-66), Int32(71)], Int32(-44), Float32(126.0), (Int8(-122)&127..Int8(-109)&127:(-72)|1));
    match (try { // block id: 592
            var594
        } finally { // block id: 601
            ();
            let var606 : UInt32 = UInt32(174);
            UInt32(201) * var606;
            let var612 : Float64 = 12.0;
            if (true) { (var612, [Int32(117), Int32(-110), Int32(16), Int32(-27), Int32(-111), Int32(93), Int32(78), Int32(-101), Int32(86), Int32(8)], Int32(-50), Float32(-4.0), (var619&127..=Int8(55)&127:(89|1))) } else { (var612, [Int32(88), Int32(83), Int32(4), Int32(-43), Int32(-96), Int32(-46), Int32(9), Int32(-24), Int32(69), Int32(121)], Int32(-1), Float32(-51.0), var630) } 
        }[3]) {
        case 104.0 | 5.0 | 1.0 | -6.0 => 
            var var640 : Int16 = Int16(Int8(-11));
            var640;
            var645 %= ((Int8(35)) | 1)
        
        case _ : Interface59 => 
            if (var653) { var657 } else { var657 } ;
            ()
        
        case -110.0 => 
            let var665 : UInt32 = UInt32(Int16(UInt8(154)));
            var665;
            ()
        
        case 94.0 => 
            ();
            var108
        
        case _ => 
            Option<Range<UInt64>>.None;
            var108;
            ()
        
    };
    try (resource = Class55()) { // block id: 681
        var var683 : (UInt16, Range<Int64>, Range<Int8>, Option<Unit>, Range<UInt8>, Rune) = (UInt16(Int8(Int8(119))), (Int64(Int16(-95))&127..2&127:(Int64(11)|1)), (Int8(8)&127..Int8(-99)&127:(-65)|1), (Class55() as Unit), (UInt8(UInt8(92))&127..=UInt8(Int8(-16))&127:(120|1)), 't');
        var683;
        ();
        var717.var720
    } catch (_) { // block id: 722
        if (false) { // block id: 725
            var108;
            var728;
            ()
        }
    };
    var var983 : (Range<UInt16>, Unit, String, Array<Float64>, Bool, Range<UInt8>, Range<UInt8>) = ((UInt16(UInt16(219))&127..UInt16(63)&127:(Int64(Int8(Int8(55)))|1)), (), "y)J|i|Da{#N", [(-61.0), 49.0, (-41.0), (-81.0), 94.0, 109.0, (-52.0), 124.0, (-5.0), 7.0], ((UInt16(Int8(88)), (94&127..(-21)&127:(-73)|1), (Int8(-63)&127..=Int8(87)&127:(-75)|1), Option<Unit>.Some(()), (UInt8(167)&127..=UInt8(112)&127:((-53)|1)), 'Q') is Range<UInt16>), (UInt8(Int8(-41))&127..UInt8(123)&127:((-6)|1)), (UInt8(22)&127..=UInt8(168)&127:(-28)|1));
    let var1030 : UInt32 = UInt32(UInt32(UInt32(UInt32(Int8(18)))));
    if (((UInt64(64)&127..=var761&127:(var764|1))|>(func739~>func734))) { (match (Option<Unit>.None) {
        case _ => 
            var751 **= Float64(Int32(var751) & 3);
            var909;
            "%Ab(=9Azb^"
        
        case caseVar980 : Array<Option<Unit>> => 
            var983;
            var1015
        
        case _ => 
            if (false) { var1023 } else { "M/8gb<HM#*" } 
        
        case _ : Range<UInt8> => 
            var1030;
            """
aD->K
^(\\FL
"""
        
        case _ => 
            if (true) { Option<Range<UInt64>>.Some(var1043) } else { Option<Range<UInt64>>.None } ;
            ###"?a!LtOJuFY"###
        
    }|>func768) } else { match (var1051[3]) {
        case caseVar1092 => 
            var728 % Float32((Int32(Float32(-43.0))) | 1);
            var296
        
        case caseVar1100 => 
            ();
            var108;
            [Option<Unit>.Some(()), var112, Option<Unit>.None, var112, Option<Unit>.Some(var108), var112, Option<Unit>.None, Option<Unit>.None, var112, Option<Unit>.Some(())]
        
        case _ => 
            var296
        
    } } 
}





func func1645(optionalParam1646 ! : Range<Int16> = (Int16(63)&127..Int16(122)&127:120|1), optionalParam1648 ! : Class55 = Class55(namedParam1491 : Int8(Int8(UInt8(Int8(114)))), optionalParam1492 : Option<Array<Option<Unit>>>.Some([(Option<Int8>.Some(Int8(-101)) as Unit), Option<Unit>.None, (UInt16(213) as Unit), ((45.0, [Int32(59), Int32(3), Int32(-51), Int32(-126), Int32(-72), Int32(27), Int32(119), Int32(61), Int32(77), Int32(18)], Int32(-97), Float32(92.0), (Int8(-74)&127..Int8(-6)&127:(19|1))) as Unit), (Float32(-76.0) as Unit), (((Int8(-48)&127..=Int8(115)&127:89|1), Option<Unit>.Some(()), Float32(-81.0), UInt8(225), ((UInt16(137)&127..UInt16(239)&127:(77|1)), (), ###"w!3@gucFd#"###, [11.0, 105.0, 30.0, (-17.0), 124.0, 65.0, (-29.0), (-95.0), (-59.0), (-49.0)], true, (UInt8(200)&127..=UInt8(97)&127:35|1), (UInt8(233)&127..UInt8(49)&127:65|1)), UInt16(221)) as Unit), ([[Int32(70), Int32(-117), Int32(-70), Int32(83), Int32(-53), Int32(26), Int32(108), Int32(-81), Int32(110), Int32(-32)], [Int32(-58), Int32(48), Int32(-70), Int32(75), Int32(-42), Int32(-125), Int32(64), Int32(-94), Int32(-2), Int32(-119)], [Int32(-96), Int32(103), Int32(63), Int32(105), Int32(-84), Int32(-112), Int32(108), Int32(-86), Int32(-97), Int32(17)], [Int32(-94), Int32(-31), Int32(-114), Int32(60), Int32(6), Int32(-34), Int32(3), Int32(77), Int32(-16), Int32(-61)], [Int32(-116), Int32(103), Int32(-50), Int32(-105), Int32(124), Int32(23), Int32(81), Int32(-21), Int32(-65), Int32(-53)], [Int32(-63), Int32(35), Int32(-22), Int32(-104), Int32(69), Int32(3), Int32(-7), Int32(110), Int32(-99), Int32(4)], [Int32(81), Int32(94), Int32(-8), Int32(-80), Int32(-38), Int32(53), Int32(2), Int32(-100), Int32(-10), Int32(-24)], [Int32(63), Int32(16), Int32(50), Int32(79), Int32(-79), Int32(-103), Int32(22), Int32(-29), Int32(119), Int32(124)], [Int32(19), Int32(90), Int32(4), Int32(13), Int32(-86), Int32(-12), Int32(-45), Int32(62), Int32(-27), Int32(-15)], [Int32(-74), Int32(117), Int32(-111), Int32(40), Int32(120), Int32(79), Int32(-44), Int32(-16), Int32(104), Int32(72)]] as Unit), Option<Unit>.Some(()), Option<Unit>.Some(()), (((UInt32(100)&127..=UInt32(204)&127:(-23)|1), Option<Range<UInt64>>.None, (-5), Float32(92.0), (UInt32(151)&127..UInt32(58)&127:(-51)|1), false) as Unit)]), optionalParam1548 : ###"B .X[=&w;B"###)) : Unit { // block id: 1778
    var loopTimeVar1786 : Range<UInt64> = (UInt64(49)&127..UInt64(UInt8(UInt8(83)))&127:((-11)|1));
    for (i in loopTimeVar1786 where optionalParam1648.var1783) {

    }
}







func func2193<T0, T1>(param2194 : Int64) : Option<Array<Float64>> { // block id: 2195
    [(UInt8(240)&127..=UInt8(138)&127:(-127)|1), (UInt8(61)&127..UInt8(11)&127:(-40)|1), (UInt8(164)&127..=UInt8(8)&127:(-128)|1), (UInt8(232)&127..UInt8(82)&127:(-18)|1), (UInt8(141)&127..UInt8(121)&127:(-12)|1), (UInt8(170)&127..=UInt8(97)&127:109|1), (UInt8(155)&127..=UInt8(210)&127:38|1), (UInt8(62)&127..=UInt8(243)&127:30|1), (UInt8(144)&127..=UInt8(83)&127:(-92)|1), (UInt8(242)&127..UInt8(41)&127:67|1)];
    (if ((Option<Array<Option<Unit>>>.None is (Range<UInt64>) -> Bool)) { Option<Option<Array<Float64>>>.None } else { (Option<Option<Option<Array<Float64>>>>.Some(Option<Option<Array<Float64>>>.Some(Option<Array<Float64>>.None)) ?? var2215) }  ?? try { // block id: 2221
        Option<Array<Float64>>.Some([18.0, 28.0, (-27.0), (-53.0), 65.0, (-5.0), (-93.0), (-20.0), (-12.0), 42.0])
    } catch (_) { // block id: 2224
        var764 &= 56;
        let var2229 : ?Array<Float64> = (Int8(86) as Array<Float64>);
        var2229
    })
}

func func2238() : Int64 { // block id: 2239
    var loopTimeVar2315 : Range<UInt64> = (UInt64(Int32(29))&127..UInt64(200)&127:(Int64(UInt64(UInt32(219)))|1));
    for (i in loopTimeVar2315 where if (if (var653) { // block id: 2244
        var152 &= Int32(67);
        var909 < var909
    } else { // block id: 2251
        !var653
    }) { // block id: 2254
        false
    } else { // block id: 2256
        ((-69)&127..(-121)&127:(-125)|1);
        var653
    }) {
        var var2298 : Range<Int64> = (30&127..32&127:110|1);
        match {
            case true => 
            ();
            var2265
            case _ => 
            ();
            var108;
            if (true) { (UInt16(68), var2298, (Int8(11)&127..Int8(-65)&127:(var764|1)), var112, (UInt8(121)&127..=var365&127:(var764|1)), var657) } else { var2265 } 
        };
        (Option<Unit>.Some(var108) ?? ())
    };
    (-19)
}

func func2234(param2235 : Option<Array<Range<UInt8>>>) : Int64 { // block id: 2236
    func2238()
}









func func1641(param1642 : Float64) : Unit { // block id: 1643
    let var1887 : ?Array<Range<UInt8>> = Option<Array<Range<UInt8>>>.None;
    let var1988 : Range<UInt16> = (UInt16(192)&127..UInt16(25)&127:53|1);
    let var2349 : Int32 = Int32(UInt32(157));
    let var2684 : (Range<Int8>, Option<Unit>, Float32, UInt8, (Range<UInt16>, Unit, String, Array<Float64>, Bool, Range<UInt8>, Range<UInt8>), UInt16) = ((Int8(37)&127..Int8(108)&127:28|1), Option<Unit>.Some(()), Float32(Float32(Float32(Float32(-95.0)))), UInt8(Int8(UInt8(135))), ((UInt16(38)&127..UInt16(37)&127:(-25)|1), (), ###"WX|NRZLSxr"###, [115.0, 52.0, (-98.0), 7.0, (-19.0), 112.0, (-42.0), 16.0, (-122.0), (-16.0)], false, (UInt8(140)&127..=UInt8(157)&127:(-89)|1), (UInt8(Int8(41))&127..UInt8(40)&127:(Int64(UInt8(4))|1))), UInt16(Int8(86)));
    let var3055 : ?Int8 = Option<Int8>.Some(Int8(113));
    let var3094 : Array<Array<Int32>> = Array<Array<Int32>>(10){ i => [Int32(-104), Int32(UInt8(UInt8(0))), Int32(-55), Int32(-69), Int32(Int16(UInt16(78))), Int32(Int8(Int8(-123))), Int32(UInt16(241)), Int32(UInt8(111)), Int32(UInt32(Int16(-62))), Int32(UInt16(Int16(-33)))] };
    func func1794(optionalParam1795 ! : Option<Range<UInt64>> = ((Int32(9)&127..=Int32(-40)&127:(-103)|1) as Range<UInt64>)) : Range<Int16> { // block id: 1798
        var loopTimeVar1845 : Range<UInt64> = (UInt64(49)&127..=UInt64(UInt64(195))&127:(Int64(UInt32(UInt8(UInt8(209))))|1));
        for (i in loopTimeVar1845 where try { // block id: 1801
            Float32(-35.0);
            var909 >= var909
        } catch (_) { // block id: 1806
            var1234;
            var909 != var909
        } finally { // block id: 1811
            var653
        }) {
            var var1817 : (Range<Int32>, UInt8, (Rune, (UInt16, Range<Int64>, Range<Int8>, Option<Unit>, Range<UInt8>, Rune)), Array<Int32>) = ((Int32(-118)&127..=Int32(-75)&127:2|1), UInt8(Int8(UInt8(Int8(-1)))), ('v', (UInt16(221), (46&127..=65&127:((-76)|1)), (Int8(-49)&127..=Int8(72)&127:113|1), (((-40)&127..108&127:((-54)|1)) as Unit), (UInt8(188)&127..UInt8(181)&127:(105|1)), 'Z')), [Int32(-42), Int32(-17), Int32(86), Int32(57), Int32(-59), Int32(-1), Int32(-41), Int32(-62), Int32(97), Int32(76)]);
            var1817[2]
        };
        let var1902 : Bool = false;
        let var2068 : Int64 = Int64(UInt32(Int8(Int8(UInt8(148)))));
        let var2409 : String = """
0is/<
[b'c(
""";
        let var2461 : ?Array<Float64> = Option<Array<Float64>>.Some([112.0, 70.0, Float64(Float32(-124.0)), Float64(Float32(1.0)), (-43.0), 76.0, Float64(Float32(Float32(37.0))), (-25.0), (-51.0), 89.0]);
        let var2480 : Float64 = Float64(Float32(Float32(-39.0)));
        let var2731 : Option<Bool> = Option<Bool>.None;
        let var2948 : ??String = (Option<Option<Array<Range<UInt8>>>>.Some(Option<Array<Range<UInt8>>>.Some([(UInt8(57)&127..UInt8(180)&127:70|1), (UInt8(57)&127..UInt8(177)&127:43|1), (UInt8(169)&127..UInt8(254)&127:48|1), (UInt8(109)&127..=UInt8(180)&127:41|1), (UInt8(198)&127..=UInt8(235)&127:114|1), (UInt8(51)&127..UInt8(144)&127:(-38)|1), (UInt8(230)&127..=UInt8(89)&127:77|1), (UInt8(128)&127..=UInt8(75)&127:69|1), (UInt8(202)&127..UInt8(123)&127:11|1), (UInt8(64)&127..UInt8(83)&127:59|1)])) as Option<String>);
        func func1855(namedParam1856 ! : (Range<Int32>, UInt8, (Rune, (UInt16, Range<Int64>, Range<Int8>, Option<Unit>, Range<UInt8>, Rune)), Array<Int32>), namedParam1857 ! : Option<Int8>, namedParam1858 ! : Array<Bool>, optionalParam1859 ! : (Range<UInt32>, Option<Range<UInt64>>, Int64, Float32, Range<UInt32>, Bool) = ((UInt32(115)&127..=UInt32(55)&127:90|1), Option<Range<UInt64>>.Some((UInt64(237)&127..=UInt64(121)&127:(86|1))), 106, Float32(-35.0), (UInt32(7)&127..=UInt32(248)&127:(Int64(UInt16(UInt8(8)))|1)), false)) : Range<Int16> { // block id: 1876
            var var1884 : ?Array<Range<UInt8>> = Option<Array<Range<UInt8>>>.None;
            var var1993 : Array<Float64> = [Float64(88.0), Float64(Float64(Float32(97.0))), 5.0, 59.0, Float64(Float32(-111.0)), Float64(Float32(9.0)), 67.0, 68.0, 100.0, Float64(35.0)];
            let var2345 : Int32 = Int32(17);
            try { // block id: 1878
                try (resource = Class55()) { // block id: 1880
                    if (false) { var1884 } else { var1887 } ;
                    var108
                } finally { // block id: 1890
                    ();
                    var365 %= ((UInt8(148)) | 1);
                    var108
                };
                var loopTimeVar1905 : Range<UInt64> = (UInt64(UInt64(Int32(-47)))&127..UInt64(Int16(UInt8(79)))&127:(Int64(UInt16(UInt8(178)))|1));
                for (i in loopTimeVar1905 where false) {
                    var653 &&= var1902;
                    var108
                };
                let var1945 : (Range<UInt16>, Unit, String, Array<Float64>, Bool, Range<UInt8>, Range<UInt8>) = ((UInt16(Int8(UInt8(151)))&127..UInt16(248)&127:(Int64(Int16(60))|1)), (), ###"'!f)z,;8A5"###, [69.0, 55.0, Float64(Float32(Float32(22.0))), Float64((-69.0)), Float64(Float32(-85.0)), (-58.0), (-40.0), 115.0, (-22.0), Float64(10.0)], true, (UInt8(20)&127..=UInt8(27)&127:(Int64(UInt8(144))|1)), (UInt8(Int8(-30))&127..UInt8(195)&127:(114|1)));
                match (Option<Int8>.None) {
                    case _ => 
                        if (false) { ((UInt16(181)&127..=UInt16(218)&127:46|1), var108, var1023, [param1642, var751, var751, var751, var751, param1642, var751, param1642, param1642, param1642], var1902, (UInt8(11)&127..UInt8(196)&127:(-21)|1), (var365&127..UInt8(154)&127:(104|1))) } else { var1945 } 
                    
                    case _ : Class55 => 
                        (var1988, (), ###"98*wr('_+_"###, var1993, true, (UInt8(186)&127..var365&127:(var764|1)), (UInt8(151)&127..UInt8(147)&127:(-63)|1))
                    
                    case _ => 
                        ((UInt16(200)&127..=UInt16(175)&127:(-83)|1), (), ###"\\ORRLy/Ymr"###, var1993, var653, var1284, (UInt8(45)&127..=UInt8(94)&127:(var764|1)))
                    
                }
            } catch (_) { // block id: 2030
                Class55.var2034;
                (Option<(Range<UInt16>, Unit, String, Array<Float64>, Bool, Range<UInt8>, Range<UInt8>)>.Some(((UInt16(172)&127..=UInt16(101)&127:(-119)|1), (), """
i Nps
<@S$i
""", [(-96.0), var751, (-79.0), param1642, 58.0, param1642, var751, var751, (-48.0), param1642], var1902, (var365&127..=UInt8(54)&127:((-41)|1)), (UInt8(13)&127..=UInt8(208)&127:(-88)|1))) ?? ((UInt16(29)&127..UInt16(27)&127:(var2068|1)), var108, var2076, [(-44.0), 113.0, (-73.0), 15.0, 103.0, 1.0, (-108.0), (-101.0), 123.0, 34.0], false, (var365&127..var365&127:(var2068|1)), (UInt8(185)&127..=UInt8(82)&127:122|1)))
            } finally { // block id: 2085
                let var2095 : (Rune, (UInt16, Range<Int64>, Range<Int8>, Option<Unit>, Range<UInt8>, Rune)) = ('g', (UInt16(235), ((-29)&127..=(-116)&127:91|1), (Int8(-110)&127..=Int8(-123)&127:(Int64(Int32(-95))|1)), Option<Unit>.None, (UInt8(Int8(110))&127..=UInt8(UInt8(9))&127:((-18)|1)), 'z'));
                if (var653) { // block id: 2088
                    var728;
                    var108
                } else if (false) { // block id: 2092
                    ();
                    var2095;
                    var108
                };
                let var2336 : Range<UInt32> = (UInt32(210)&127..UInt32(113)&127:43|1);
                let var2362 : Int64 = Int64(UInt8(130));
                let var2426 : (Range<Int32>, Range<UInt16>, Rune, Int8) -> Rune = { lambdaParameter2429 : Range<Int32>, lambdaParameter2430 : Range<UInt16>, lambdaParameter2431 : Rune, lambdaParameter2432 : Int8 => 'R' };
                let var2436 : (Array<Bool>, Bool) = ([true, true, false, false, false, true, (Class55() is UInt16), true, true, ((Int8(-45)&127..=Int8(-84)&127:((-27)|1)) is Option<Option<Option<Array<Float64>>>>)], true);
                func func2116(param2117 : Int32) : (Range<UInt16>, Unit, String, Array<Float64>, Bool, Range<UInt8>, Range<UInt8>) { // block id: 2118
                    let var2175 : ?Array<Range<UInt8>> = Option<Array<Range<UInt8>>>.None;
                    let var2189 : ??Array<Range<UInt8>> = Option<Option<Array<Range<UInt8>>>>.None;
                    let var2325 : (Option<Array<Range<UInt8>>>) -> Int64 = { lambdaParameter2328 : Option<Array<Range<UInt8>>> => Int64(Int16(UInt16(36))) };
                    func func2126(namedParam2127 ! : Option<Range<UInt64>>, optionalParam2128 ! : (Range<UInt16>, Unit, String, Array<Float64>, Bool, Range<UInt8>, Range<UInt8>) = ((UInt16(54)&127..UInt16(166)&127:(110|1)), (), "Z>?ghGM$+a", [(-15.0), (-101.0), (-90.0), (-10.0), Float64(Float32(Float32(-33.0))), Float64(24.0), Float64(Float32(74.0)), (-8.0), Float64(Float32(Float32(74.0))), 6.0], (true is Interface58), (UInt8(107)&127..=UInt8(132)&127:122|1), (UInt8(91)&127..=UInt8(68)&127:(-79)|1)), optionalParam2157 ! : (Range<Int32>, Range<UInt16>, Rune, Int8) -> Rune = func73, optionalParam2164 ! : (Array<Bool>, Bool) = ([true, false, false, false, true, true, true, false, true, false], (Option<Int8>.Some(Int8(61)) is (String) -> Array<Option<Unit>>))) : Option<Array<Float64>> { // block id: 2170
                        var1043;
                        if (var653) { var2175 } else { ((Option<Option<Option<Array<Range<UInt8>>>>>.None ?? var2189) ?? var2175) } ;
                        (match ((var2336, (19.0, [param2117, var152, param2117, var2345, var152, var2349, var152, Int32(100), Int32(-77), Int32(104)], var2349, var728, (Int8(58)&127..=Int8(73)&127:(var2362|1))), var108, var717)) {
                            case _ => 
                                ();
                                var var2388 : Range<UInt8> = (UInt8(UInt8(Int8(-11)))&127..=UInt8(245)&127:(Int64(Int32(-121))|1));
                                Option<Array<Range<UInt8>>>.Some([(UInt8(71)&127..=UInt8(195)&127:(-101)|1), (UInt8(187)&127..UInt8(74)&127:110|1), (var365&127..=var365&127:(var2362|1)), var2379, var2379, var2388, (UInt8(199)&127..UInt8(50)&127:86|1), (UInt8(161)&127..UInt8(67)&127:86|1), var2388, (UInt8(41)&127..UInt8(194)&127:(-15)|1)])
                            
                        }|>var2325)|>func2193<Option<Bool>, Option<Int8>>
                    }
;
                    var var2531 : Int64 = Int64(Int16(UInt8(Int8(Int8(-58)))));
                    let var2621 : (Range<Int8>, Option<Unit>, Float32, UInt8, (Range<UInt16>, Unit, String, Array<Float64>, Bool, Range<UInt8>, Range<UInt8>), UInt16) = ((Int8(107)&127..Int8(-54)&127:(46|1)), (() as Unit), Float32(Float32(99.0)), UInt8(Int8(88)), ((UInt16(113)&127..UInt16(50)&127:(75|1)), (), ###"S6g\"c=|'Ck"###, [0.0, 28.0, (-81.0), (-96.0), 72.0, 11.0, (-88.0), (-5.0), (-35.0), 58.0], (Option<Array<Range<UInt8>>>.Some([(UInt8(184)&127..=UInt8(120)&127:(-89)|1), (UInt8(198)&127..UInt8(130)&127:((-39)|1)), (UInt8(236)&127..=UInt8(145)&127:(-42)|1), (UInt8(141)&127..=UInt8(128)&127:((-93)|1)), (UInt8(210)&127..=UInt8(221)&127:(-54)|1), (UInt8(250)&127..=UInt8(169)&127:89|1), (UInt8(117)&127..UInt8(169)&127:(-35)|1), (UInt8(227)&127..UInt8(93)&127:((-120)|1)), (UInt8(104)&127..UInt8(241)&127:(88|1)), (UInt8(109)&127..=UInt8(78)&127:(6|1))]) is Option<Range<UInt64>>), (UInt8(200)&127..UInt8(241)&127:(-48)|1), (UInt8(203)&127..=UInt8(214)&127:51|1)), UInt16(UInt16(170)));
                    match ((func2126(namedParam2127 : Option<Range<UInt64>>.Some((UInt64(93)&127..UInt64(122)&127:(var2068|1))), optionalParam2128 : ((UInt16(109)&127..=UInt16(55)&127:51|1), (), var2409, [61.0, param1642, (-76.0), (-102.0), 124.0, 40.0, (-79.0), param1642, (-65.0), var751], true, var1450, (UInt8(252)&127..UInt8(20)&127:71|1)), optionalParam2157 : var2426, optionalParam2164 : var2436) ?? (var2461 ?? [var2480, param1642, (-52.0), (-108.0), 106.0, (-121.0), (-121.0), 33.0, var2480, (-102.0)]))) {
                        case caseVar2495 => 
                            let var2498 : (Range<Int8>, Option<Unit>, Float32, UInt8, (Range<UInt16>, Unit, String, Array<Float64>, Bool, Range<UInt8>, Range<UInt8>), UInt16) = ((Int8(35)&127..=Int8(48)&127:30|1), Option<Unit>.None, Float32(Float32(Float32(Float32(52.0)))), UInt8(216), ((UInt16(229)&127..=UInt16(210)&127:((-20)|1)), (), """
5wx@V
~e@2k
""", [122.0, 10.0, (-35.0), 69.0, (-31.0), (-48.0), 61.0, (-112.0), (-29.0), (-74.0)], true, (UInt8(110)&127..UInt8(58)&127:((-108)|1)), (UInt8(Int8(-83))&127..=UInt8(12)&127:(90|1))), UInt16(30));
                            var2498
                        
                        case _ => 
                            var2531 |= var2531;
                            ();
                            var var2542 : ?Unit = Option<Unit>.Some(());
                            ((Int8(-50)&127..Int8(51)&127:44|1), var2542, var728, var365, var2548, UInt16(203))
                        
                        case caseVar2578 => 
                            Option<Option<Array<Range<UInt8>>>>.None;
                            if (var1902) { var2189 } else { Option<Option<Array<Range<UInt8>>>>.None } ;
                            ((var619&127..=Int8(30)&127:(var2362|1)), var112, Float32(88.0), UInt8(145), (var158, (), var1023, [(-87.0), 18.0, var2601, 83.0, (-7.0), (-59.0), 19.0, param1642, (-72.0), var2480], true, var1273, (var365&127..=var365&127:((-98)|1))), var1234)
                        
                        case _ : Array<Option<(Range<Int8>, Option<Unit>, Float32, UInt8, (Range<UInt16>, Unit, String, Array<Float64>, Bool, Range<UInt8>, Range<UInt8>), UInt16)>> => 
                            var2621
                        
                        case _ => 
                            -Int8(-83);
                            var2678;
                            if (true) { var2684 } else { ((Int8(-122)&127..Int8(-30)&127:(var2531|1)), var112, var728, UInt8(184), var2548, var1234) } 
                        
                    };
                    [[Int32(-58), Int32(4), Int32(32), Int32(63), Int32(120), Int32(-36), Int32(83), Int32(-18), Int32(-31), Int32(-97)], [Int32(-8), Int32(-97), Int32(-46), Int32(70), Int32(-61), Int32(86), Int32(-38), Int32(-47), Int32(95), Int32(66)], [Int32(6), Int32(-63), Int32(-83), Int32(-75), Int32(80), Int32(-105), Int32(90), Int32(-99), Int32(-102), Int32(37)], [Int32(19), Int32(111), Int32(53), Int32(-32), Int32(99), Int32(-43), Int32(81), Int32(-87), Int32(108), Int32(-78)], [Int32(-57), Int32(92), Int32(76), Int32(-45), Int32(121), Int32(23), Int32(96), Int32(90), Int32(-62), Int32(-62)], [Int32(-11), Int32(38), Int32(-75), Int32(-61), Int32(-105), Int32(-112), Int32(101), Int32(121), Int32(-25), Int32(-35)], [Int32(-30), Int32(12), Int32(69), Int32(-29), Int32(124), Int32(112), Int32(-116), Int32(27), Int32(-76), Int32(-44)], [Int32(-28), Int32(87), Int32(-79), Int32(14), Int32(-113), Int32(81), Int32(-47), Int32(-9), Int32(-7), Int32(-61)], [Int32(113), Int32(77), Int32(27), Int32(2), Int32(-96), Int32(-110), Int32(105), Int32(-31), Int32(7), Int32(-50)], [Int32(-100), Int32(11), Int32(-8), Int32(76), Int32(-5), Int32(-11), Int32(60), Int32(-32), Int32(-68), Int32(83)]];
                    var loopTimeVar2820 : Range<UInt64> = (UInt64(198)&127..=UInt64(UInt8(32))&127:((-113)|1));
                    var var2832 : ?String = Option<String>.None;
                    if ((if (false) { var2731 } else { Option<Bool>.None }  ?? (var1051 is (Range<Int8>, Option<Unit>, Float32, UInt8, (Range<UInt16>, Unit, String, Array<Float64>, Bool, Range<UInt8>, Range<UInt8>), UInt16)))) { try { // block id: 2737
                        var108;
                        ((var1234&127..UInt16(231)&127:(var2531|1)), (), "o2d<:C\\~[d", [(-87.0), var2601, (-123.0), 67.0, var751, var2480, 44.0, (-113.0), param1642, param1642], false, (UInt8(227)&127..UInt8(53)&127:16|1), var1273)
                    } catch (e: Exception) { // block id: 2760
                        if (false) { (var1988, var108, ###"cWq6'RY~^g"###, [125.0, param1642, var2601, (-83.0), (-24.0), var751, 13.0, var751, (-11.0), (-121.0)], var2779, var1284, (UInt8(94)&127..=UInt8(246)&127:(36|1))) } else { var2548 } 
                    } } else { ((UInt16(222)&127..UInt16(238)&127:(-38)|1), for (i in loopTimeVar2820 where true) {
                        let var2815 : Int8 = Int8(-124);
                        if (var653) { Class55(namedParam1491 : var2815) } else { Class55(namedParam1491 : var619, optionalParam1548 : "(1V.YM_9k+") } 
                    }, (var2832 ?? var2076), (Option<Array<Float64>>.Some([var751, 36.0, (-89.0), (-66.0), (-49.0), (-29.0), (-47.0), var2601, 16.0, (-119.0)]) ?? [(-15.0), (-1.0), 16.0, (-21.0), (-39.0), 78.0, 50.0, (-106.0), (-75.0), 80.0]), (var2731 ?? true), match (var2854) {
                        case _ => 
                            var2779 ||= var2779;
                            (UInt8(33)&127..=UInt8(54)&127:(-51)|1)
                        
                    }, (Option<Range<UInt8>>.Some((UInt8(152)&127..var365&127:(var2531|1))) ?? var1273)) } 
                }
;
                func2116(var2345)
            };
            var loopTimeVar2939 : Int64 = 0;
            do {
                loopTimeVar2939++;

            } while (((try { // block id: 2918
                if (var653) { Option<Bool>.Some(var653) } else { Option<Bool>.None } 
            } finally { // block id: 2924
                if (false) { Option<Bool>.Some(var653) } else { Option<Bool>.None } 
            } ?? (Option<Bool>.None ?? var653))) && loopTimeVar2939 < 100 ) ;
            (match ((var2948 ?? Option<String>.Some("""
g|HQ?
a{vU:z
"""))) {
                case _ => 
                    var108;
                    if (var653) { Option<(Range<UInt16>, Unit, String, Array<Float64>, Bool, Range<UInt8>, Range<UInt8>)>.Some(var2548) } else { Option<(Range<UInt16>, Unit, String, Array<Float64>, Bool, Range<UInt8>, Range<UInt8>)>.None } ;
                    Int16(-29)
                
                case _ => 
                    ();
                    var909
                
            }&127..match (try { // block id: 2971
                    ();
                    [true, true, false, true, false, false, true, false, false, false];
                    var1584
                } finally { // block id: 2975
                    var1584
                }) {
                case _ => 
                    var108;
                    var108;
                    var909
                
                case caseVar2985 : (Float64, Array<Int32>, Int32, Float32, Range<Int8>) => 
                    var2854;
                    Int16(-48) ^ var909
                
                case _ => 
                    UInt64(40);
                    Int16(-8)
                
                case _ => 
                    Int16(46) >> ((var909) & 7)
                
            }&127:(Int64(UInt32(169))|1))
        }
;
        let var3004 : (Range<Int32>, UInt8, (Rune, (UInt16, Range<Int64>, Range<Int8>, Option<Unit>, Range<UInt8>, Rune)), Array<Int32>) = ((Int32(10)&127..=Int32(-12)&127:(-91)|1), UInt8(165), ('a', (UInt16(Int8(-32)), ((-24)&127..63&127:90|1), (Int8(-119)&127..Int8(-95)&127:((-91)|1)), Option<Unit>.Some(()), (UInt8(215)&127..UInt8(235)&127:(-64)|1), 'r')), [Int32(Int16(-101)), Int32(73), Int32(40), Int32(Int16(65)), Int32(Int8(92)), Int32(UInt8(UInt8(185))), Int32(UInt32(UInt16(101))), Int32(Int8(9)), Int32(Int32(UInt32(38))), Int32(UInt16(224))]);
        var var3074 : Array<Bool> = [true, false, false, false, false, true, false, false, false, true];
        var var3080 : ?Range<UInt8> = ('W' as Range<UInt8>);
        func1855(namedParam1856 : var3004, namedParam1857 : (var3050 ?? if (false) { var3055 } else { Option<Int8>.None } ), namedParam1858 : match (if (false) { // block id: 3062
                var2068
            } else { // block id: 3064
                var761 ^ var761;
                (Int32(94)&127..Int32(-3)&127:116|1);
                (-75)
            }) {
            case -86 => 
                var3074
            
            case _ => 
                var3080;
                [false, true, true, false, true, false, true, false, true, false]
            
            case caseVar3086 => 
                var3074
            
            case _ => 
                if (false) { var3094 } else { var3094 } ;
                Option<Option<Array<Float64>>>.None;
                [true, true, true, true, true, true, true, false, false, false]
            
        })
    }
;
    func1645(optionalParam1646 : func1794(), optionalParam1648 : if ((var619 is Unit)) { try { // block id: 3241
        var1234 >>= ((UInt16(118)) & 7);
        var717
    } catch (_) { // block id: 3246
        var2076;
        ();
        if (var653) { var717 } else { var717 } 
    } finally { // block id: 3253
        var764;
        var717
    } } else { (var3262 ?? var717) } );
    var108;
    ()
}

public func func1407(param1408 : Option<UInt8>, optionalParam1409 ! : Range<UInt64> = (UInt64(Int64(UInt32(Int8(-100))))&127..=UInt64(234)&127:(95|1)), namedParam1417 ! : Array<Float64>) : Unit { // block id: 1418
    let var1466 : (Range<Int8>, Option<Unit>, Float32, UInt8, (Range<UInt16>, Unit, String, Array<Float64>, Bool, Range<UInt8>, Range<UInt8>), UInt16) = ((Int8(Int8(64))&127..Int8(UInt8(UInt8(184)))&127:(Int64(Int32(37))|1)), Option<Unit>.None, Float32(79.0), UInt8(Int8(117)), ((UInt16(51)&127..=UInt16(130)&127:((-109)|1)), (), """
PE,h'
d:'/L
""", [11.0, 121.0, 62.0, 118.0, 8.0, 35.0, 78.0, 66.0, (-39.0), (-73.0)], (Class55(namedParam1491 : Int8(15), optionalParam1492 : Option<Array<Option<Unit>>>.Some([Option<Unit>.None, Option<Unit>.None, Option<Unit>.Some(()), Option<Unit>.None, Option<Unit>.None, Option<Unit>.Some(()), Option<Unit>.None, Option<Unit>.Some(()), Option<Unit>.Some(()), Option<Unit>.None]), optionalParam1548 : "XW0K/nWBKZ") is Array<Int32>), (UInt8(172)&127..UInt8(UInt8(207))&127:((-23)|1)), (UInt8(39)&127..=UInt8(UInt8(32))&127:(Int64(UInt16(85))|1))), UInt16(UInt8(Int8(-88))));
    if (if (var653) { // block id: 1424
        -UInt32(25);
        var108;
        var645 != Int8(-94)
    } else { // block id: 1431
        true
    }) { (var630, Option<Unit>.Some(var108), Float32(-7.0), UInt8(54), (var158, var108, var1023, [80.0, (-96.0), 97.0, 116.0, 64.0, 115.0, (-7.0), (-105.0), (-46.0), 72.0], var653, (var365&127..=var365&127:(var764|1)), var1450), UInt16(92)) } else { (Option<(Range<Int8>, Option<Unit>, Float32, UInt8, (Range<UInt16>, Unit, String, Array<Float64>, Bool, Range<UInt8>, Range<UInt8>), UInt16)>.None ?? var1466) } [1];
    let var3269 : (Float64) -> Unit = func1641;
    let var3289 : Option<Bool> = Option<Bool>.Some(false);
    if (true) { // block id: 3273
        ();
        if (true) { Class55() } else { Class55() } ;
        (-122.0)
    } else if ((var3282 is Option<(Range<Int8>, Option<Unit>, Float32, UInt8, (Range<UInt16>, Unit, String, Array<Float64>, Bool, Range<UInt8>, Range<UInt8>), UInt16)>)) { // block id: 3287
        var3289;
        if (true) { Option<Class55>.Some(Class55()) } else { var3262 } ;
        var2601
    } else { // block id: 3298
        var751
    }|>var3269
}


func func1403(param1404 : Int32) : Option<Int8> { // block id: 1405
    var var3349 : ??UInt8 = ((((Int8(3)&127..=Int8(82)&127:((-11)|1)), ((Int16(4)&127..=Int16(-126)&127:(-94)|1) as Unit), Float32(-122.0), UInt8(72), ((UInt16(224)&127..=UInt16(195)&127:((-62)|1)), (), ###"XpUN;?T^C1"###, [69.0, 56.0, 123.0, 92.0, (-53.0), (-29.0), 106.0, (-72.0), 7.0, 26.0], true, (UInt8(153)&127..UInt8(81)&127:84|1), (UInt8(247)&127..UInt8(91)&127:((-17)|1))), UInt16(UInt8(184))) as (Range<UInt16>, Unit, String, Array<Float64>, Bool, Range<UInt8>, Range<UInt8>)) as Option<UInt8>);
    let var3379 : Array<Float64> = [(-49.0), (-123.0), (-83.0), 54.0, 38.0, (-123.0), 102.0, 67.0, (-55.0), (-17.0)];
    func1407(((var365 as Option<UInt8>) ?? match (var3282) {
        case _ : Option<Option<Array<Float64>>> => 
            var152 += Int32(-70);
            Option<UInt8>.Some(UInt8(140))
        
        case caseVar3319 => 
            Option<(Range<UInt16>, Unit, String, Array<Float64>, Bool, Range<UInt8>, Range<UInt8>)>.None;
            var3323;
            Option<UInt8>.None
        
        case _ => 
            var108;
            Option<UInt8>.None
        
    }), optionalParam1409 : try { // block id: 3331
        ();
        var var3334 : Range<UInt64> = (UInt64(80)&127..UInt64(67)&127:(Int64(Int32(-51))|1));
        var3334
    } catch (e: Exception) { // block id: 3340
        ();
        var var3344 : UInt32 = UInt32(120);
        var3344++;
        var1043
    } finally { // block id: 3347
        var3349;
        var1043
    }, namedParam1417 : var3379);
    (var3050 ?? var3384)
}

public func func1392(optionalParam1393 ! : Range<Int64> = ((-10)&127..=(-7)&127:34|1), namedParam1395 ! : Array<Array<Int32>>) : Class55 { // block id: 1396
    ((match (Class55()) {
        case caseVar3393 : (Range<Int32>, UInt8, (Rune, (UInt16, Range<Int64>, Range<Int8>, Option<Unit>, Range<UInt8>, Rune)), Array<Int32>) => 
            ();
            if (var653) { var1043 } else { (var761&127..=var761&127:((-64)|1)) } ;
            var152
        
        case _ => 
            Int32(89)
        
        case _ : Option<(Range<UInt16>, Unit, String, Array<Float64>, Bool, Range<UInt8>, Range<UInt8>)> => 
            Int32(-74) % ((Int32(55)) | 1)
        
        case caseVar3416 => 
            let var3420 : Int32 = Int32(UInt16(UInt8(215)));
            var3420 ^ var3420
        
        case _ => 
            if (var653) { var3262 } else { Option<Class55>.Some(Class55()) } ;
            var3433
        
    }|>func1403) ?? Int8(45));
    match (Class55()) {
        case caseVar3440 => 
            caseVar3440
        
        case caseVar3445 : (Array<Bool>, Bool) => 
            if (false) { var3450 } else { var3450 } ;
            if (false) { Class55(namedParam1491 : var619) } else { Class55(namedParam1491 : Int8(51), optionalParam1548 : var2076) } 
        
        case _ => 
            var var3463 : ???Array<Float64> = ("a4fA:N~>e7" as Option<Option<Array<Float64>>>);
            var3463;
            var var3469 : String = "7&Rea7D6Bo";
            Class55(namedParam1491 : Int8(-113), optionalParam1548 : var3469)
        
    }
}



func func1387(param1388 : Option<UInt8>) : Bool { // block id: 1389
    var var3489 : Array<Array<Int32>> = [[Int32(47), Int32(51), Int32(79), Int32(2), Int32(-42), Int32(113), Int32(59), Int32(-95), Int32(-12), Int32(-4)], [Int32(53), Int32(60), Int32(-77), Int32(36), Int32(86), Int32(40), Int32(-104), Int32(39), Int32(-41), Int32(111)], [Int32(31), Int32(-99), Int32(55), Int32(24), Int32(35), Int32(98), Int32(-46), Int32(96), Int32(-125), Int32(-15)], [Int32(-100), Int32(-81), Int32(-76), Int32(-117), Int32(-74), Int32(42), Int32(-83), Int32(38), Int32(-68), Int32(22)], [Int32(-34), Int32(2), Int32(-65), Int32(UInt8(92)), Int32(31), Int32(Int8(Int8(119))), Int32(110), Int32(-57), Int32(UInt16(61)), Int32(-70)], [Int32(-127), Int32(43), Int32(101), Int32(-120), Int32(-94), Int32(25), Int32(30), Int32(-119), Int32(48), Int32(-4)], [Int32(UInt32(12)), Int32(UInt16(UInt8(225))), Int32(Int16(80)), Int32(UInt8(UInt8(21))), Int32(Int16(UInt8(134))), Int32(Int8(-69)), Int32(UInt16(200)), Int32(Int16(-101)), Int32(UInt32(46)), Int32(Int8(-15))], [Int32(118), Int32(-91), Int32(42), Int32(50), Int32(34), Int32(-111), Int32(-20), Int32(-99), Int32(-58), Int32(80)], [Int32(97), Int32(UInt32(UInt16(154))), Int32(UInt16(Int8(39))), Int32(Int32(-112)), Int32(UInt8(UInt8(230))), Int32(-28), Int32(UInt16(UInt16(98))), Int32(-8), Int32(95), Int32(-48)], [Int32(-86), Int32(UInt16(UInt8(110))), Int32(-101), Int32(126), Int32(-106), Int32(Int8(99)), Int32(-40), Int32(Int32(11)), Int32(20), Int32(-19)]];
    func1392(optionalParam1393 : if (var2779) { (var3475&127..=var764&127:(20|1)) } else { (var3482&127..var3482&127:(var3475|1)) } , namedParam1395 : var3489).func3572();
    let var3586 : ?Range<UInt64> = Option<Range<UInt64>>.None;
    (Option<Unit>.Some(try (resource = Class55()) { // block id: 3581
        let var3583 : Unit = ();
        var3583;
        var3586;
        ()
    } catch (e: Exception) { // block id: 3589
        Option<Range<UInt64>>.Some(var1043);
        var108
    }) ?? ());
    var var3604 : Range<UInt8> = (UInt8(27)&127..=UInt8(42)&127:(-94)|1);
    match (((Option<Option<Range<UInt8>>>.Some(Option<Range<UInt8>>.Some(var3604)) ?? Option<Range<UInt8>>.None) ?? match (var3609) {
            case _ => 
                var1051;
                (var365&127..=UInt8(111)&127:(var764|1))
            
            case _ : Rune => 
                var365 += var365;
                (UInt8(101)&127..UInt8(102)&127:24|1)
            
            case _ : Range<UInt8> => 
                (var365&127..var365&127:((-23)|1))
            
            case _ => 
                (UInt8(192)&127..=UInt8(127)&127:(43|1))
            
        })) {
        case _ : Range<Int16> => 
            false
        
        case _ => 
            var var3650 : Float64 = (-37.0);
            var2601 <= var3650
        
    }
}

public func func3655(param3656 : Array<Int32>) : Option<UInt8> { // block id: 3657
    var loopTimeVar3662 : Int64 = 0;
    while ((false) && loopTimeVar3662 < 100 ) {
        loopTimeVar3662++;

    };
    if ((match ((-45.0)) {
        case _ => 
            var645 += var619;
            if (var2779) { Option<Bool>.Some(true) } else { Option<Bool>.None } 
        
    } ?? var653)) { var3679 } else { (match ((var1234, (69&127..88&127:(-127)|1), (Int8(-57)&127..=Int8(-4)&127:(-111)|1), Option<Unit>.None, (UInt8(245)&127..=UInt8(126)&127:79|1), var657)) {
        case _ => 
            Class55()
        
    } as UInt8) } 
}


public func func1381(param1382 : Range<UInt8>) : (Range<UInt16>, Unit, String, Array<Float64>, Bool, Range<UInt8>, Range<UInt8>) { // block id: 1383
    let var3653 : (Option<UInt8>) -> Bool = func1387;
    var var3734 : Array<Float64> = [81.0, (-41.0), (-86.0), 124.0, 77.0, (-103.0), (-122.0), 101.0, 83.0, (-29.0)];
    var var3819 : Float64 = 24.0;
    if ((match (var152) {
        case caseVar3698 => 
            var152;
            [Int32(-32), Int32(59), Int32(-8), Int32(-15), Int32(-82), Int32(63), Int32(101), Int32(79), Int32(24), Int32(-52)]
        
        case caseVar3704 => 
            var909 += var909;
            if (var653) { var755 } else { var3713 } 
        
        case caseVar3717 : UInt32 => 
            var755
        
        case _ => 
            var3609;
            (var3475&127..=1&127:(83|1));
            [Int32(-21), Int32(-9), Int32(-127), Int32(-31), Int32(9), Int32(-121), Int32(-113), Int32(-80), Int32(91), Int32(1)]
        
    }|>(func3655~>var3653))) { // block id: 3728
        var2548
    } else if (match (match (Option<Array<Float64>>.Some(var3734)) {
            case _ => 
                let var3741 : Interface59 = Class55();
                if (var653) { var3741 } else { var3741 } 
            
        }) {
        case _ => 
            true
        
    }) { // block id: 3747
        var var3750 : Option<(Range<UInt16>, Unit, String, Array<Float64>, Bool, Range<UInt8>, Range<UInt8>)> = (((Class55() as Array<Range<UInt8>>) as UInt8) as (Range<UInt16>, Unit, String, Array<Float64>, Bool, Range<UInt8>, Range<UInt8>));
        (var3750 as Option<Option<Array<Range<UInt8>>>>);
        let var3761 : ?Range<Int8> = ([[Int32(117), Int32(6), Int32(91), Int32(-29), Int32(12), Int32(69), Int32(126), Int32(35), Int32(-43), Int32(88)], [Int32(-104), Int32(70), Int32(107), Int32(-38), Int32(119), Int32(99), Int32(-39), Int32(-96), Int32(-45), Int32(-28)], [Int32(-49), Int32(-121), Int32(-6), Int32(-27), Int32(-115), Int32(111), Int32(110), Int32(79), Int32(-15), Int32(-9)], [Int32(-55), Int32(-44), Int32(97), Int32(-122), Int32(-53), Int32(-74), Int32(119), Int32(-120), Int32(-84), Int32(-79)], [Int32(-106), Int32(-11), Int32(72), Int32(19), Int32(100), Int32(118), Int32(90), Int32(-31), Int32(109), Int32(-102)], [Int32(57), Int32(123), Int32(-58), Int32(41), Int32(99), Int32(4), Int32(40), Int32(-87), Int32(96), Int32(60)], [Int32(88), Int32(-110), Int32(-100), Int32(-103), Int32(-38), Int32(18), Int32(-53), Int32(-43), Int32(85), Int32(-97)], [Int32(-115), Int32(-37), Int32(29), Int32(-98), Int32(-102), Int32(-121), Int32(-17), Int32(-64), Int32(120), Int32(-113)], [Int32(92), Int32(62), Int32(60), Int32(82), Int32(-46), Int32(115), Int32(-104), Int32(26), Int32(33), Int32(-48)], [Int32(-82), Int32(2), Int32(-1), Int32(58), Int32(-96), Int32(88), Int32(81), Int32(111), Int32(-6), Int32(-94)]] as Range<Int8>);
        (var3761 ?? (Int8(-124)&127..=Int8(35)&127:(-13)|1));
        if (false) { // block id: 3767
            [Int32(7), Int32(49), Int32(31), Int32(19), Int32(76), Int32(-3), Int32(-57), Int32(35), Int32(-128), Int32(83)];
            ((UInt16(83)&127..UInt16(34)&127:103|1), (), var1023, var3734, false, var1450, (UInt8(153)&127..UInt8(213)&127:((-70)|1)))
        } else { // block id: 3780
            (var158, (), ###"VTws#L:^#-"###, [102.0, (-126.0), var751, var751, (-73.0), var2601, 30.0, 65.0, 10.0, var751], var653, (UInt8(148)&127..=UInt8(221)&127:(-8)|1), param1382)
        }
    } else { // block id: 3799
        match {
            case var653 => 
            ();
            ();
            if (false) { ((UInt16(137)&127..=UInt16(227)&127:102|1), (), var2076, [var2601, (-22.0), (-98.0), var751, var2601, var2601, var3819, (-31.0), var3823, var3823], false, var1450, (UInt8(188)&127..UInt8(19)&127:(var3475|1))) } else { ((UInt16(153)&127..UInt16(13)&127:(-124)|1), (), """
_\\)8O
F)),_
""", [(-1.0), 32.0, 102.0, (-70.0), 85.0, 73.0, 30.0, 41.0, (-42.0), 114.0], false, (UInt8(110)&127..=UInt8(113)&127:54|1), (UInt8(178)&127..UInt8(211)&127:(-108)|1)) } 
            case _ => 
            [(), (), (), (), (), (), (), (), (), ()];
            var909 >>= ((var909) & 7);
            ((UInt16(233)&127..=UInt16(8)&127:90|1), (), """
Do&0&
W`~/*
""", var3734, var2779, param1382, (UInt8(76)&127..=UInt8(42)&127:(-93)|1))
        }
    }
}


public func func1307(param1308 : (Range<UInt16>, Unit, String, Array<Float64>, Bool, Range<UInt8>, Range<UInt8>)) : (Range<UInt32>, Option<Range<UInt64>>, Int64, Float32, Range<UInt32>, Bool) { // block id: 1309
    let var3933 : Int16 = Int16(-90);
    func func1354() : Int32 { // block id: 1355
        var var1371 : Array<Bool> = [false, false, true, true, true, true, true, true, true, false];
        var loopTimeVar1377 : Int64 = 0;
        (try { // block id: 1358
            if (var653) { Option<Unit>.None } else { Option<Unit>.None } 
        } finally { // block id: 1363
            ();
            Option<Unit>.None
        } ?? while (((var1371, false)[1]) && loopTimeVar1377 < 100 ) {
            loopTimeVar1377++;

        });
        let var3896 : (Array<Bool>, Bool) = ([false, true, true, false, true, false, false, true, false, false], true);
        var var3905 : Float64 = (-60.0);
        try { // block id: 1379
            var1284|>func1381;
            var3856;
            UInt16(80) > UInt16(25)
        } catch (e: Exception) { // block id: 3888
            var loopTimeVar3893 : Int64 = 0;
            while ((var653) && loopTimeVar3893 < 100 ) {
                loopTimeVar3893++;

            };
            match (var3896) {
                case _ => 
                    var3905 -= (-10.0);
                    var909 < Int16(-67)
                
                case _ => 
                    Option<Option<Int8>>.Some(var3384);
                    var2854;
                    false
                
            }
        } finally { // block id: 3917
            var2601 >= (-41.0)
        };
        Int32(match ((UInt8(182)&127..var365&127:((-105)|1))) {
            case caseVar3929 : (Float64, Array<Int32>, Int32, Float32, Range<Int8>) => 
                var3933 % ((Int16(105)) | 1)
            
            case caseVar3938 : Array<Range<UInt8>> => 
                ();
                var3943 / ((var3943) | 1)
            
            case caseVar3949 : (Range<UInt32>, Option<Range<UInt64>>, Int64, Float32, Range<UInt32>, Bool) => 
                var108;
                ();
                Int16(31) << ((var3933) & 7)
            
            case caseVar3958 => 
                var3943
            
            case _ => 
                var1234 -= UInt16(190);
                ([var653, true, var653, true, false, false, var653, var653, var2779, var653], var653);
                var3933
            
        })
    }
;
    func func1311(optionalParam1312 ! : Option<Range<UInt64>> = ((UInt64(35)&127..=UInt64(Int32(-22))&127:((-12)|1)) as Range<UInt64>), namedParam1319 ! : Option<Range<UInt64>>, optionalParam1320 ! : Array<Int32> = Array<Int32>(10){ i => Int32(-122) }) : Unit { // block id: 1345
        try { // block id: 1347
            var loopTimeVar1352 : Int64 = 0;
            while ((var653) && loopTimeVar1352 < 100 ) {
                loopTimeVar1352++;

            };
            func1354()
        } catch (e: Exception) { // block id: 3980
            Int32(Int16(-100))
        };
        (var112 ?? ())
    }
;
    let var3998 : (Range<Int8>, Option<Unit>, Float32, UInt8, (Range<UInt16>, Unit, String, Array<Float64>, Bool, Range<UInt8>, Range<UInt8>), UInt16) = ((Int8(UInt8(234))&127..Int8(-73)&127:(17|1)), ('d' as Unit), Float32(Float32(99.0)), UInt8(238), ((UInt16(Int16(52))&127..=UInt16(UInt16(120))&127:(87|1)), (), ###"j/7KI4oy}h"###, [(-75.0), 19.0, (-81.0), (-114.0), 124.0, (-57.0), (-110.0), (-82.0), (-104.0), (-92.0)], true, (UInt8(Int8(19))&127..=UInt8(183)&127:(24|1)), (UInt8(Int8(23))&127..=UInt8(85)&127:(91|1))), UInt16(Int8(46)));
    var var4065 : ?Range<UInt64> = ((((UInt64(104)&127..UInt64(14)&127:(-107)|1) as Option<UInt8>) as Option<Option<Array<Range<UInt8>>>>) as Range<UInt64>);
    func1311(optionalParam1312 : if ((UInt64(204) < var761)) { var3282 } else { (if (false) { Option<Range<UInt64>>.None } else { var3282 } ) } , namedParam1319 : match (match (var3998) {
            case _ => 
                ();
                Option<Unit>.None
            
            case _ => 
                ();
                if (false) { Option<Unit>.Some(()) } else { Option<Unit>.None } 
            
        }) {
        case _ => 
            if (false) { [var2779, false, false, var653, true, var2779, var653, var653, var653, true] } else { [true, true, true, false, true, false, true, false, true, false] } ;
            if (true) { var4065 } else { Option<Range<UInt64>>.None } 
        
    });
    var var4093 : (Rune, (UInt16, Range<Int64>, Range<Int8>, Option<Unit>, Range<UInt8>, Rune)) = ('o', (UInt16(190), ((-82)&127..73&127:(-55)|1), (Int8(113)&127..Int8(67)&127:102|1), Option<Unit>.None, (UInt8(45)&127..=UInt8(156)&127:44|1), '1'));
    var loopTimeVar4120 : Range<UInt64> = (UInt64(80)&127..UInt64(142)&127:((-28)|1));
    for (i in loopTimeVar4120 where (([var2601, var2601, var2601, (-48.0), 70.0, var751, (-123.0), 103.0, var4088, var2601] as Bool) ?? (var4093 is Option<String>))) {
        try { // block id: 4105
            Float32(-90.0);
            Option<Array<Option<Unit>>>.None
        } catch (_) { // block id: 4108
            if (var653) { var4112 } else { Option<Array<Option<Unit>>>.None } 
        } finally { // block id: 4115
            var1234 |= var1234;
            Option<Array<Option<Unit>>>.None
        }
    };
    let var4126 : (Range<UInt32>, Option<Range<UInt64>>, Int64, Float32, Range<UInt32>, Bool) = ((UInt32(218)&127..=UInt32(199)&127:(-127)|1), Option<Range<UInt64>>.None, (-55), Float32(-112.0), (UInt32(238)&127..UInt32(132)&127:40|1), false);
    var4126
}

public func func1189(param1190 : Float64) : Range<UInt64> { // block id: 1191
    var var1195 : (Array<Int32>) -> Bool = func734;
    let var1264 : ?Array<Range<UInt8>> = Option<Array<Range<UInt8>>>.None;
    func func1203(namedParam1204 ! : Class55, optionalParam1205 ! : Int16 = Int16(81), namedParam1207 ! : UInt32) : Range<UInt8> { // block id: 1208
        Float32(Float32((Float32(-77.0) % Float32((Int32(Float32(93.0))) | 1))));
        let var1267 : Array<Range<UInt8>> = [(UInt8(4)&127..UInt8(66)&127:(-97)|1), (UInt8(42)&127..=UInt8(183)&127:76|1), (UInt8(180)&127..=UInt8(173)&127:82|1), (UInt8(212)&127..=UInt8(176)&127:116|1), (UInt8(29)&127..UInt8(135)&127:18|1), (UInt8(129)&127..=UInt8(144)&127:(-29)|1), (UInt8(160)&127..=UInt8(105)&127:105|1), (UInt8(191)&127..=UInt8(218)&127:71|1), (UInt8(211)&127..=UInt8(208)&127:48|1), (UInt8(243)&127..UInt8(35)&127:120|1)];
        if (try { // block id: 1218
            var var1221 : UInt64 = UInt64(Int16(Int8(-101)));
            var1221++;
            UInt8(109) + UInt8(204);
            Int8(36) < var619
        } catch (e: Exception) { // block id: 1231
            var var1241 : Range<Int64> = (25&127..=47&127:(Int64(UInt32(29))|1));
            (var1234, var1241, (Int8(-107)&127..=var619&127:(89|1)), var112, (UInt8(71)&127..=UInt8(169)&127:(var764|1)), '6');
            true
        }) { (var1264 ?? var1267) } else { [(UInt8(194)&127..UInt8(102)&127:117|1), (UInt8(114)&127..UInt8(142)&127:(-67)|1), var1273, (UInt8(223)&127..=UInt8(59)&127:(-53)|1), var1284, (UInt8(189)&127..=UInt8(245)&127:20|1), (UInt8(85)&127..UInt8(247)&127:(-4)|1), (var365&127..UInt8(99)&127:(99|1)), (UInt8(127)&127..=UInt8(105)&127:(-89)|1), var1284] } [2]
    }
;
    var loopTimeVar1298 : Int64 = 0;
    do {
        loopTimeVar1298++;
        func1203(namedParam1204 : var717, namedParam1207 : UInt32(104))
    } while ((([[Int32(34), Int32(40), Int32(-46), Int32(-126), Int32(-8), Int32(41), Int32(83), Int32(-101), Int32(83), Int32(90)], [Int32(10), Int32(-109), Int32(-47), Int32(107), Int32(32), Int32(-45), Int32(55), Int32(-40), Int32(-116), Int32(-7)], [Int32(51), Int32(36), Int32(92), Int32(-29), Int32(-25), Int32(-62), Int32(35), Int32(44), Int32(26), Int32(76)], [Int32(60), Int32(-46), Int32(126), Int32(46), Int32(-112), Int32(33), Int32(73), Int32(26), Int32(-99), Int32(-7)], [Int32(119), Int32(103), Int32(114), Int32(-33), Int32(-113), Int32(-60), Int32(116), Int32(-103), Int32(79), Int32(91)], [Int32(-118), Int32(60), Int32(-33), Int32(61), Int32(-1), Int32(-33), Int32(-36), Int32(123), Int32(-109), Int32(-107)], [Int32(7), Int32(71), Int32(-115), Int32(78), Int32(-15), Int32(-40), Int32(-53), Int32(108), Int32(101), Int32(-124)], [Int32(-34), Int32(89), Int32(-105), Int32(125), Int32(99), Int32(-38), Int32(-31), Int32(95), Int32(63), Int32(-15)], [Int32(97), Int32(-82), Int32(-38), Int32(1), Int32(-46), Int32(86), Int32(-4), Int32(101), Int32(64), Int32(64)], [Int32(73), Int32(7), Int32(69), Int32(-38), Int32(-108), Int32(71), Int32(49), Int32(-109), Int32(-30), Int32(-60)]][5]|>var1195)) && loopTimeVar1298 < 100 ) ;
    var var4135 : ((Range<UInt16>, Unit, String, Array<Float64>, Bool, Range<UInt8>, Range<UInt8>)) -> (Range<UInt32>, Option<Range<UInt64>>, Int64, Float32, Range<UInt32>, Bool) = func1307;
    var var4142 : Array<Float64> = [(-88.0), (-45.0), (-66.0), 49.0, (-14.0), (-29.0), (-31.0), 42.0, 121.0, 79.0];
    ((((UInt16(32)&127..UInt16(186)&127:(-62)|1), var108, "33rhQ/CX1~", var4142, true, (UInt8(198)&127..=UInt8(145)&127:122|1), (var365&127..var365&127:(var3482|1)))|>var4135)[1] ?? (UInt64(85)&127..=UInt64(94)&127:(-1)|1))
}

public func func575(param576 : Array<Bool>) : Range<UInt64> { // block id: 577
    let var579 : Int8 = Int8(UInt8(UInt8(Int8(-123))));
    var579;
    var var1122 : (Option<Range<UInt64>>) -> Array<Option<Unit>> = { lambdaParameter1125 : Option<Range<UInt64>> => [((Int16(-31)&127..Int16(76)&127:(-86)|1) as Unit), ((Int32(-26)&127..=Int32(-80)&127:((-5)|1)) as Unit), (Class55() as Unit), Option<Unit>.None, Option<Unit>.None, (Option<Array<Option<Unit>>>.Some([Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.Some(()), Option<Unit>.Some(()), Option<Unit>.None, Option<Unit>.None, Option<Unit>.Some(()), Option<Unit>.Some(()), Option<Unit>.Some(())]) as Unit), Option<Unit>.None, (Int32(-29) as Unit), ((Int32(-101)&127..Int32(48)&127:23|1) as Unit), (UInt16(UInt8(210)) as Unit)] };
    match (Class55()) {
        case _ : Range<UInt64> => 
            if (true) { Option<Range<UInt64>>.Some((UInt64(64)&127..UInt64(63)&127:(-100)|1)) } else { Option<Range<UInt64>>.Some((UInt64(41)&127..UInt64(13)&127:(var764|1))) } 
        
        case _ => 
            let var1182 : ?Range<UInt64> = (Option<Array<Option<Unit>>>.None as Range<UInt64>);
            var1182
        
    }|>var1122;
    var var4153 : (Float64) -> Range<UInt64> = func1189;
    if (false) { var1043 } else { ((-32.0) - var4158|>var4153) } 
}

func func511(param512 : Array<Int32>) : Range<UInt64> { // block id: 513
    var365 |= (Option<UInt8>.None ?? var365);
    var var553 : Range<UInt64> = (UInt64(68)&127..=UInt64(Int32(UInt8(27)))&127:(28|1));
    func func568(namedParam569 ! : Int16, optionalParam570 ! : Int8 = Int8(-69), namedParam572 ! : Array<Int32>) : Range<UInt64> { // block id: 573
        let var4177 : Array<Range<UInt8>> = [(UInt8(212)&127..=UInt8(204)&127:(-114)|1), (UInt8(167)&127..UInt8(21)&127:94|1), (UInt8(136)&127..UInt8(162)&127:121|1), (UInt8(167)&127..UInt8(65)&127:53|1), (UInt8(94)&127..=UInt8(147)&127:(-41)|1), (UInt8(64)&127..UInt8(55)&127:87|1), (UInt8(254)&127..=UInt8(143)&127:124|1), (UInt8(7)&127..=UInt8(56)&127:(Int64(Int32(Int16(59)))|1)), (UInt8(124)&127..UInt8(134)&127:(120|1)), (UInt8(127)&127..=UInt8(171)&127:(-15)|1)];
        let var4198 : (Array<Bool>, Bool) = ([(Class55(namedParam1491 : Int8(-86), optionalParam1492 : Option<Array<Option<Unit>>>.None, optionalParam1548 : "zcyg1Fi^=8") is Option<Int8>), false, (false is (Range<UInt16>, Unit, String, Array<Float64>, Bool, Range<UInt8>, Range<UInt8>)), false, false, ((Int8(105)&127..Int8(-12)&127:(54|1)) is (Bool) -> (Range<UInt16>, Unit, String, Array<Float64>, Bool, Range<UInt8>, Range<UInt8>)), ((Int32(80)&127..Int32(57)&127:((-110)|1)) is (Array<Int32>) -> Bool), true, (UInt8(131) is (Array<Bool>, Bool)), (UInt16(234) is Option<Option<Int8>>)], (Option<Array<Option<Unit>>>.None is Option<String>));
        var var4238 : ?String = ((Option<Int8>.None as (Range<UInt16>, Unit, String, Array<Float64>, Bool, Range<UInt8>, Range<UInt8>)) as String);
        var var4257 : Int64 = Int64(Int32(Int32(Int8(Int8(-33)))));
        [true, (UInt8(116) is UInt8), true, try { // block id: 4168
            var2779
        } finally { // block id: 4170
            if (false) { Option<Array<Range<UInt8>>>.Some([(UInt8(17)&127..UInt8(101)&127:61|1), (UInt8(138)&127..=UInt8(88)&127:(-108)|1), (UInt8(218)&127..UInt8(146)&127:(-114)|1), (UInt8(163)&127..=UInt8(98)&127:45|1), (UInt8(32)&127..UInt8(51)&127:(-92)|1), (UInt8(35)&127..UInt8(220)&127:64|1), (UInt8(164)&127..UInt8(112)&127:(-50)|1), (UInt8(35)&127..=UInt8(77)&127:(-92)|1), (UInt8(171)&127..=UInt8(0)&127:(-53)|1), (UInt8(254)&127..=UInt8(169)&127:113|1)]) } else { Option<Array<Range<UInt8>>>.Some(var4177) } ;
            var4198;
            var2779
        }, (Option<Bool>.None ?? true), var653, (Option<Bool>.None ?? var2779), match (var4238) {
            case _ => 
                true
            
            case caseVar4248 => 
                var108;
                var2779
            
            case _ => 
                var764 |= var4257;
                Int8(-22) >= Int8(-39)
            
        }, true, var653]|>func575
    }
;
    let var4271 : ??UInt8 = Option<Option<UInt8>>.Some((UInt8(195) as UInt8));
    let var4283 : UInt64 = UInt64(68);
    var var4337 : Class55 = Class55();
    (if ((var553|>func530)) { (if (true) { Option<Range<UInt64>>.None } else { Option<Range<UInt64>>.Some(var553) } ) } else { (var108 as Range<UInt64>) }  ?? func568(namedParam569 : try { // block id: 4269
        var4271;
        var909
    } finally { // block id: 4276
        var108;
        var var4280 : UInt64 = UInt64(249);
        var4280 -= var4283;
        var3943
    }, namedParam572 : try { // block id: 4287
        (var3450, (UInt16(155), (122&127..(-115)&127:(97|1)), var630, Option<Unit>.Some(()), var2379, 'Z'));
        [Int32(61), Int32(-79), Int32(16), Int32(-60), Int32(-68), Int32(40), Int32(-4), Int32(-92), Int32(-127), Int32(16)]
    } finally { // block id: 4302
        ();
        let var4307 : (Float64, Array<Int32>, Int32, Float32, Range<Int8>) = (Float64((-77.0)), [Int32(-114), Int32(15), Int32(Int16(Int16(-30))), Int32(UInt32(42)), Int32(UInt32(Int32(-60))), Int32(23), Int32(61), Int32(-108), Int32(-127), Int32(-18)], Int32(-18), Float32(-28.0), (Int8(33)&127..Int8(125)&127:(Int64(Int16(Int8(-103)))|1)));
        ((UInt32(12)&127..UInt32(183)&127:(-42)|1), var4307, var108, var4337);
        var3713
    }))
}


func func483(namedParam484 ! : Range<Int32>, namedParam485 ! : Range<Int16>) : String { // block id: 486
    func func488(namedParam489 ! : Rune, namedParam490 ! : Range<UInt64>, namedParam491 ! : Int8, optionalParam492 ! : Bool = ((UInt64(180)&127..=UInt64(Int8(Int8(-41)))&127:(73|1)) is Float64)) : Unit { // block id: 500
        ()
    }
;
    let var4352 : Float64 = 77.0;
    func func504(param505 : (UInt16, Range<Int64>, Range<Int8>, Option<Unit>, Range<UInt8>, Rune), param506 : Interface58, param507 : Int8, param508 : Unit) : Range<UInt64> { // block id: 509
        func511([Int32(Int8(-80)), Int32(Int8(59)), Int32(UInt16(94)), Int32(UInt16(204)), try { // block id: 4350
            var4352;
            var108;
            var3433
        } finally { // block id: 4356
            Int32(15)
        }, match (var4360) {
            case caseVar4367 => 
                var764 -= var3482;
                Int32(-50) | var152
            
            case _ : UInt64 => 
                var645++;
                ();
                var3433
            
            case caseVar4384 => 
                var645 /= ((var645) | 1);
                Int32(-24)
            
            case _ : Array<Option<Unit>> => 
                var3433
            
            case _ => 
                var3433 ** (Int32(-63) & 3)
            
        }, (Option<Int32>.None ?? Int32(38)), match (Option<Option<Array<Range<UInt8>>>>.None) {
            case _ => 
                if (true) { var1051 } else { ((UInt32(170)&127..=UInt32(35)&127:(-81)|1), var4416, var108, var717) } ;
                -var3433
            
        }, Int32(21), Int32(var1234)])
    }
;
    var var4448 : Bool = false;
    var loopTimeVar4469 : Int64 = 0;
    var var4478 : Option<Bool> = Option<Bool>.Some(("f+I6R}%8_i" is Option<UInt8>));
    func488(namedParam489 : '3', namedParam490 : func504(var2265, try { // block id: 4435
        var1234 |= UInt16(119);
        var4440
    } finally { // block id: 4442
        ([false, false, var4448, var653, var2779, var653, var653, true, true, true], false);
        var4440;
        var4440
    }, var645, do {
        loopTimeVar4469++;
        var3262;
        var1234 >>= ((UInt16(159)) & 7)
    } while ((var2779) && loopTimeVar4469 < 100 ) ), namedParam491 : Int8(-23), optionalParam492 : if (try { // block id: 4473
        var108;
        false
    } finally { // block id: 4476
        var4478;
        var4448
    }) { // block id: 4483
        let var4485 : (Rune, (UInt16, Range<Int64>, Range<Int8>, Option<Unit>, Range<UInt8>, Rune)) = ('U', (UInt16(UInt16(212)), (36&127..Int64(UInt32(32))&127:((-61)|1)), (Int8(91)&127..Int8(-106)&127:(-1)|1), (Option<Option<Option<Array<Float64>>>>.Some(Option<Option<Array<Float64>>>.None) as Unit), (UInt8(0)&127..UInt8(Int8(-60))&127:(Int64(UInt16(145))|1)), 'J'));
        var4485;
        var4448
    } else { // block id: 4508
        true
    });
    try (resource = Class55()) { // block id: 4511

    } catch (_) { // block id: 4512

    };
    var2076
}



func func214(param215 : Int8) : Option<Unit> { // block id: 216
    let var271 : Array<Float64> = Array<Float64>(10){ i => Float64(Float32(Float32(Float32(-20.0)))) };
    let var476 : Interface58 = Class55();
    let var4679 : (Rune, (UInt16, Range<Int64>, Range<Int8>, Option<Unit>, Range<UInt8>, Rune)) = ('Z', (UInt16(UInt8(149)), (112&127..=(-38)&127:(-7)|1), (Int8(-65)&127..Int8(2)&127:(Int64(Int32(-4))|1)), (Option<Int32>.None as Unit), (UInt8(Int8(-120))&127..=UInt8(125)&127:(Int64(UInt64(100))|1)), 'c'));
    let var4770 : Array<Float64> = [Float64(Float32(Float32(Float32(37.0)))), Float64(19.0), (-42.0), 59.0, (-99.0), 3.0, Float64((-95.0)), 17.0, 48.0, 93.0];
    func func221(namedParam222 ! : Float64, optionalParam223 ! : Range<UInt32> = (UInt32(145)&127..=UInt32(9)&127:56|1), namedParam225 ! : UInt64, optionalParam226 ! : Range<Int32> = (Int32(-114)&127..Int32(7)&127:(55|1))) : Range<Int64> { // block id: 231
        match (var112) {
            case caseVar236 : (Range<UInt16>, Unit, String, Array<Float64>, Bool, Range<UInt8>, Range<UInt8>) => 
                [Option<Unit>.None, var112, Option<Unit>.None, var112, Option<Unit>.None, var112, Option<Unit>.Some(var108), var112, var112, var250]
            
            case _ => 
                [var250, Option<Unit>.None, var250, Option<Unit>.Some(()), Option<Unit>.None, var112, Option<Unit>.None, Option<Unit>.Some(()), var112, var250]
            
            case _ => 
                var271;
                var296
            
        };
        let var387 : Array<Int32> = [Int32(Int16(UInt16(Int8(-37)))), Int32(UInt32(174)), Int32(UInt16(UInt16(UInt16(89)))), Int32(57), Int32(-14), Int32(UInt32(UInt8(Int8(118)))), Int32(0), Int32(62), Int32(UInt16(Int16(UInt16(181)))), Int32(Int16(-58))];
        func func471() : Range<UInt16> { // block id: 472
            (var476.func64(namedParam480 : var4679)&127..=((var2215 as UInt16) ?? UInt16(155))&127:(try { // block id: 4709
                (-4)
            } finally { // block id: 4711
                var3609;
                var3475
            }|1))
        }
;
        func func340(param341 : Range<UInt32>) : Range<UInt16> { // block id: 342
            var152 |= match (var250) {
                case _ => 
                    var353;
                    var365 *= UInt8(198);
                    if (var205) { [Int32(7), var152, Int32(-66), var152, Int32(-42), var152, Int32(63), var152, var152, Int32(-57)] } else { [Int32(32), Int32(98), Int32(34), Int32(-60), Int32(-101), Int32(-55), Int32(117), Int32(-84), Int32(-81), Int32(27)] } 
                
                case _ : Range<UInt64> => 
                    ((-58)&127..=(-31)&127:(-33)|1);
                    var387
                
                case _ : Int16 => 
                    (var365&127..var365&127:((-66)|1));
                    var var421 : Array<Int32> = [Int32(Int8(-31)), Int32(123), Int32(UInt32(63)), Int32(82), Int32(UInt32(UInt16(138))), Int32(Int8(UInt8(UInt8(9)))), Int32(UInt32(238)), Int32(-118), Int32(Int16(-72)), Int32(-78)];
                    var421
                
                case _ => 
                    var447 * var447;
                    [Int32(72), Int32(-110), Int32(-88), Int32(117), Int32(54), Int32(-35), Int32(76), Int32(13), Int32(79), Int32(12)]
                
                case _ => 
                    ();
                    if (false) { var387 } else { [Int32(-24), var152, Int32(-126), Int32(-15), Int32(-119), var152, var152, var152, var152, var152] } 
                
            }[9];
            func471()
        }
;
        func340(match (var4716) {
            case _ : Class55 => 
                var108;
                ();
                (UInt32(28)&127..=UInt32(61)&127:(-22)|1)
            
            case caseVar4727 => 
                (UInt32(238)&127..=UInt32(116)&127:111|1)
            
            case caseVar4732 : String => 
                optionalParam223
            
            case _ => 
                var108;
                optionalParam223
            
        });
        try { // block id: 4740
            var loopTimeVar4745 : Int64 = 0;
            while ((false) && loopTimeVar4745 < 100 ) {
                loopTimeVar4745++;

            };
            if (var653) { var3856 } else { var3856 } ;
            (15&127..78&127:68|1)
        } catch (e: Exception) { // block id: 4751
            match (Option<Range<UInt64>>.Some(var1043)) {
                case _ => 
                    (var764&127..20&127:(112|1))
                
                case caseVar4764 : Class55 => 
                    if (true) { Option<Array<Float64>>.Some(var4770) } else { Option<Array<Float64>>.Some(var271) } ;
                    var4679;
                    (90&127..var3482&127:((-49)|1))
                
                case _ => 
                    var645 += var619;
                    (64&127..var3475&127:(var764|1))
                
                case caseVar4806 : (Array<Bool>, Bool) => 
                    (109&127..=57&127:21|1)
                
                case _ => 
                    var108;
                    var353
                
            }
        } finally { // block id: 4813
            UInt32(76) - UInt32(226);
            let var4821 : Unit = ();
            try (resource = Class55()) { // block id: 4818

            } finally { // block id: 4819
                var4821
            };
            try { // block id: 4824
                Option<UInt16>.Some(var1234);
                ();
                if (true) { var353 } else { ((-22)&127..=var764&127:((-77)|1)) } 
            } finally { // block id: 4835
                var353
            }
        }
    }
;
    match (func221(namedParam222 : var3823, namedParam225 : UInt64(160), optionalParam226 : var4840)) {
        case _ : Option<Range<Int16>> => 
            var4846;
            Option<Array<Float64>>.Some([61.0, (-46.0), 83.0, (-27.0), (-9.0), (-15.0), (-36.0), 69.0, 42.0, 36.0]);
            if (var205) { var296 } else { var296 } 
        
        case _ : Array<Array<Int32>> => 
            var var4864 : UInt64 = UInt64(UInt16(UInt8(120)));
            if (false) { var3282 } else { Option<Range<UInt64>>.Some((var761&127..var4864&127:((-125)|1))) } ;
            var296
        
        case _ => 
            (UInt32(69)&127..=UInt32(191)&127:(-115)|1);
            var108;
            [Option<Unit>.None, var112, var250, var250, Option<Unit>.None, Option<Unit>.None, var112, Option<Unit>.Some(()), var112, var250]
        
    }[9]
}


public func func49(param50 : Unit) : Unit { // block id: 51
    var61.func64(var205)[3];
    try { // block id: 212
        Int8(-103)|>func214
    } catch (_) { // block id: 4889
        (var4892 ?? var108);
        var751 **= Float64(Int32(var4900) & 3);
        var112
    } finally { // block id: 4903
        (Option<(Range<UInt32>, (Float64, Array<Int32>, Int32, Float32, Range<Int8>), Unit, Class55)>.None ?? var1051);
        var loopTimeVar4919 : Int64 = 0;
        do {
            loopTimeVar4919++;
            ();
            var365 |= UInt8(83)
        } while ((var205) && loopTimeVar4919 < 100 ) ;
        Option<Unit>.Some(param50)
    };
    var loopTimeVar4939 : Range<UInt64> = (UInt64(Int8(Int8(Int8(-79))))&127..=UInt64(89)&127:((-104)|1));
    for (i in loopTimeVar4939 where if (if (true) { // block id: 4926
        [[Int32(84), Int32(-52), Int32(-101), Int32(122), Int32(-115), Int32(-50), Int32(93), Int32(22), Int32(-11), Int32(25)], [Int32(1), Int32(-106), Int32(34), Int32(76), Int32(-41), Int32(-128), Int32(65), Int32(119), Int32(-39), Int32(49)], [Int32(35), Int32(41), Int32(-68), Int32(-75), Int32(-6), Int32(43), Int32(11), Int32(45), Int32(-114), Int32(59)], [Int32(64), Int32(46), Int32(45), Int32(36), Int32(-71), Int32(-71), Int32(-61), Int32(-16), Int32(103), Int32(40)], [Int32(-43), Int32(-86), Int32(-6), Int32(-62), Int32(55), Int32(-106), Int32(65), Int32(85), Int32(-2), Int32(113)], [Int32(125), Int32(85), Int32(50), Int32(2), Int32(-78), Int32(6), Int32(71), Int32(-127), Int32(3), Int32(1)], [Int32(8), Int32(26), Int32(49), Int32(69), Int32(-17), Int32(-12), Int32(-106), Int32(71), Int32(101), Int32(-104)], [Int32(67), Int32(-110), Int32(57), Int32(-55), Int32(108), Int32(-68), Int32(15), Int32(-82), Int32(-69), Int32(-96)], [Int32(-89), Int32(105), Int32(-123), Int32(-35), Int32(-81), Int32(-27), Int32(-4), Int32(101), Int32(-76), Int32(-113)], [Int32(-72), Int32(36), Int32(35), Int32(22), Int32(120), Int32(-95), Int32(14), Int32(60), Int32(-77), Int32(-34)]];
        ();
        true
    } else { // block id: 4930
        var653
    }) { // block id: 4932
        true
    } else { // block id: 4934
        var205 && false
    }) {

    }
}


public func func44(param45 : String) : Unit { // block id: 46
    let var4949 : (Unit) -> Unit = func49;
    let var4957 : Range<UInt32> = (UInt32(121)&127..=UInt32(66)&127:(-127)|1);
    var loopTimeVar4971 : Int64 = 0;
    match ((do {
            loopTimeVar4971++;
            Option<(Range<UInt32>, (Float64, Array<Int32>, Int32, Float32, Range<Int8>), Unit, Class55)>.Some((var4957, (var4088, var3713, Int32(8), var447, (Int8(-63)&127..=Int8(-110)&127:(-18)|1)), var108, Class55()));
            var909 ^= var3943
        } while ((var653) && loopTimeVar4971 < 100 ) |>var4949)) {
        case _ => 
            ();
            var108;
            var3450
        
        case () | () | () => 
            var3450
        
        case _ => 
            (UInt16(28)&127..UInt16(115)&127:38|1);
            'a'
        
    };
    let var4994 : ???String = Option<Option<Option<String>>>.None;
    var loopTimeVar5000 : Range<UInt64> = (UInt64(132)&127..UInt64(32)&127:(Int64(UInt16(Int16(-58)))|1));
    for (i in loopTimeVar5000 where ((var4994 ?? var4997) is Option<Array<Range<UInt8>>>)) {

    }
}

main(): Int64 {
    try {
        let var18 : Array<Float64> = Array<Float64>(10){ i => Float64(Float64(Float32(-124.0))) };
        var18[7];
        "~@q_ %K`ok"|>func44;
        var var5034 : UInt8 = UInt8(UInt8(151));
        if (match {
            case var205 => 
            var5014;
            var5018 ^ Int32(-54);
            var205
            case var205 => 
            var var5027 : Bool = (UInt16(177) is (Range<UInt64>) -> Bool);
            var5027 &&= var5027;
            var5014;
            var5034 < UInt8(228)
            case _ => 
            var205
        }) { // block id: 5040
            47
        } else { // block id: 5042
            75
        }
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var5018*var5018), 64)
        crccheck.updateBuffer(UInt64(var5034*var5034), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Class55 {

}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_unexpected_declaration_in_scope
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_expected_left_brace
// ASSERT: scan parse_expected_case

/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 