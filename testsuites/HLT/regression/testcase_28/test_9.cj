/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output


public var var43 : Class39 = Class39()
public var var77 : (UInt32, Unit, String, Array<Unit>, Option<Array<Int64>>) = (UInt32(130), (), "^thJ&Uw~m}", [(), (), (), (), (), (), (), (), (), ()], ((UInt8(152)&127..=UInt8(225)&127:103|1) as Array<Int64>))
let var154 : Bool = ((Float32(14.0), UInt16(84), """
/Oa{-.
.\"0go
""", UInt16(90), UInt8(UInt8(Int8(99))), UInt8(UInt8(159))) is Range<UInt8>)
var var214 : (Float32, UInt16, String, UInt16, UInt8, UInt8) = (Float32(Float32(-108.0)), UInt16(17), "Y@6byl3NJ9", UInt16(89), UInt8(Int8(UInt8(198))), UInt8(22))
public let var322 : Int64 = (-12)
public let var331 : Int64 = (-25)
public var var364 : Range<UInt8> = (UInt8(106)&127..=UInt8(15)&127:((-117)|1))
public var var423 : UInt32 = UInt32(35)
public var var429 : (Bool, Array<Unit>) = ((UInt8(Int8(-55)) is Bool), [(), (), (), (), (), (), (), (), (), ()])
public var var536 : Unit = ()
public let var560 : Unit = ()
let var563 : UInt64 = UInt64(212)
var var601 : Array<Bool> = Array<Bool>(10){ i => ([Int64(UInt8(79)), 79, 88, (-91), 100, Int64(UInt8(102)), Int64(Int16(93)), Int64(UInt32(231)), Int64(Int32(-63)), 57] is Int64) }
public var var778 : UInt64 = UInt64((-23))
public var var796 : Unit = ()
public let var868 : Array<Int64> = Array<Int64>(10){ i => Int64(UInt32(47)) }
public var var919 : Int8 = Int8(-35)
public let var1006 : Int64 = Int64(Int32(-16))
public let var1018 : Bool = false
public var var1022 : (Range<UInt64>, Range<UInt8>, Rune, Array<Int64>, Unit, Array<Int64>, (Bool, Array<Unit>)) = ((UInt64(Int32(Int16(-79)))&127..=UInt64(152)&127:(Int64(UInt8(89))|1)), (UInt8(24)&127..UInt8(Int8(55))&127:(15|1)), 'K', [(-44), 91, (-100), (-4), 23, 35, (-38), (-8), 122, 37], (), [15, 62, (-89), 67, Int64(Int32(Int16(-64))), Int64(Int64(9)), Int64(UInt32(168)), Int64(Int8(50)), Int64(UInt8(148)), Int64(Int16(-42))], (true, [(), (), (), (), (), (), (), (), (), ()]))
public var var1108 : Float32 = Float32(Float32(Float32(Float32(104.0))))
public var var1134 : Float32 = Float32(-79.0)
public let var1350 : Unit = ()
public let var1423 : Range<Int8> = (Int8(-84)&127..=Int8(-100)&127:(Int64(Int16(12))|1))
var var1476 : Bool = false
public let var1513 : Class673 = Class673()
public var var1760 : Float64 = 105.0
var var1767 : Int32 = Int32(UInt16(UInt8(213)))
public var var1837 : String = "T.3L^j>*Iq"
var var2049 : Option<(Range<UInt32>, String, Range<Int16>, Range<UInt16>, (Range<UInt64>, Range<UInt8>, Rune, Array<Int64>, Unit, Array<Int64>, (Bool, Array<Unit>)), Array<UInt32>, Int8, (Bool, Array<Unit>), Rune)> = Option<(Range<UInt32>, String, Range<Int16>, Range<UInt16>, (Range<UInt64>, Range<UInt8>, Rune, Array<Int64>, Unit, Array<Int64>, (Bool, Array<Unit>)), Array<UInt32>, Int8, (Bool, Array<Unit>), Rune)>.None
public var var2106 : Array<UInt32> = Array<UInt32>(10){ i => UInt32(UInt32(UInt16(UInt8(241)))) }
public let var2133 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
public let var2157 : Array<Int64> = Array<Int64>(10){ i => (-87) }
public let var2178 : Int64 = 44
public let var2418 : (String, (Unit, Bool, Range<UInt8>), Array<Unit>) = ("""
5=|e${var1837}T${var1837}
U${var1837}k4${var1837}a{f
""", ((), ((UInt16(133), UInt32(25), (Int8(-108)&127..=Int8(-55)&127:92|1), [Float32(-25.0), Float32(-46.0), Float32(56.0), Float32(17.0), Float32(86.0), Float32(-123.0), Float32(-2.0), Float32(70.0), Float32(20.0), Float32(99.0)], Int16(42), UInt32(85), Int16(-111), 59, ()) is ((Range<UInt64>, Range<UInt8>, Rune, Array<Int64>, Unit, Array<Int64>, (Bool, Array<Unit>)), Float64, Bool, (UInt32, Unit, String, Array<Unit>, Option<Array<Int64>>), Range<Int8>, UInt16)), (UInt8(Int8(99))&127..=UInt8(UInt8(44))&127:((-107)|1))), [(), (), (), (), (), (), (), (), (), ()])
let var2500 : UInt32 = UInt32(131)
let var2510 : UInt8 = UInt8(UInt8(87))
public var var2517 : UInt8 = UInt8(Int8(91))
var var2592 : Unit = ()
public let var2782 : (UInt32, Unit, String, Array<Unit>, Option<Array<Int64>>) = (UInt32(40), (), """
+B${var1837}\"bn${var1837}
*${var1837}h${var1837}Nii
""", [(), (), (), (), (), (), (), (), (), ()], Option<Array<Int64>>.None)
public let var2853 : Int8 = Int8(Int8(UInt8(UInt8(Int8(-32)))))
var var3036 : (UInt16, UInt32, Range<Int8>, Array<Float32>, Int16, UInt32, Int16, Int64, Unit) = (UInt16(1), UInt32(110), (Int8(UInt8(106))&127..Int8(-58)&127:(Int64(Int32(-18))|1)), [Float32(-8.0), Float32(-121.0), Float32(19.0), Float32(-69.0), Float32(-57.0), Float32(71.0), Float32(19.0), Float32(-51.0), Float32(-27.0), Float32(29.0)], Int16(UInt16(UInt16(UInt8(214)))), UInt32(UInt32(162)), Int16(65), (-106), ())
public let var3072 : ???(Bool, Array<Unit>) = (Option<Range<UInt64>>.None as Option<Option<(Bool, Array<Unit>)>>)
var var3220 : Int64 = 10
public let var3528 : Array<Bool> = [true, true, false, false, true, false, true, false, false, false]
let var3638 : ((Range<UInt64>, Range<UInt8>, Rune, Array<Int64>, Unit, Array<Int64>, (Bool, Array<Unit>)), Float64, Bool, (UInt32, Unit, String, Array<Unit>, Option<Array<Int64>>), Range<Int8>, UInt16) = (((UInt64(40)&127..=UInt64(68)&127:18|1), (UInt8(166)&127..UInt8(31)&127:(Int64(Int32(114))|1)), 'W', [106, (-51), (-23), (-96), (-10), (-54), 113, (-107), (-3), (-47)], (), [Int64(UInt8(233)), Int64(Int32(16)), (-52), (-49), Int64(UInt16(139)), (-16), Int64(UInt64(68)), 119, (-113), Int64((-123))], (true, [(), (), (), (), (), (), (), (), (), ()])), Float64(Float32(-67.0)), false, (UInt32(Int32(122)), (), "H,${var1837}6l3Pf(_>", [(), (), (), (), (), (), (), (), (), ()], (Option<Array<Int64>>.None as Array<Int64>)), (Int8(49)&127..=Int8(11)&127:(-10)|1), UInt16(UInt8(UInt8(151))))
public var var3784 : UInt16 = UInt16(UInt16(126))
public let var3793 : ?Unit = Option<Unit>.None
var var3884 : Range<UInt64> = (UInt64(172)&127..UInt64(UInt16(Int8(57)))&127:(119|1))
public let var3971 : Array<Range<Int32>> = [(Int32(64)&127..Int32(-96)&127:(-73)|1), (Int32(9)&127..=Int32(-27)&127:(-8)|1), (Int32(-118)&127..=Int32(26)&127:102|1), (Int32(-11)&127..=Int32(-64)&127:48|1), (Int32(-34)&127..=Int32(-54)&127:25|1), (Int32(112)&127..Int32(-67)&127:(-45)|1), (Int32(-35)&127..=Int32(-67)&127:(-57)|1), (Int32(-101)&127..=Int32(-46)&127:(-91)|1), (Int32(71)&127..=Int32(29)&127:86|1), (Int32(29)&127..Int32(-105)&127:90|1)]
let var3986 : Range<Int32> = (Int32(17)&127..Int32(63)&127:62|1)
let var4093 : Bool = ([false, true, true, false, false, false, false, false, true, false] is Option<(Bool, Array<Unit>)>)
var var4225 : UInt8 = UInt8(Int8(UInt8(64)))
public let var4275 : UInt16 = UInt16(Int8(-103))
public let var4414 : Unit = ()
var var4428 : ?((Range<UInt64>, Range<UInt8>, Rune, Array<Int64>, Unit, Array<Int64>, (Bool, Array<Unit>)), Float64, Bool, (UInt32, Unit, String, Array<Unit>, Option<Array<Int64>>), Range<Int8>, UInt16) = Option<((Range<UInt64>, Range<UInt8>, Rune, Array<Int64>, Unit, Array<Int64>, (Bool, Array<Unit>)), Float64, Bool, (UInt32, Unit, String, Array<Unit>, Option<Array<Int64>>), Range<Int8>, UInt16)>.None
let var4546 : Range<Int64> = (70&127..(-65)&127:4|1)
var var4640 : ?(UInt32, Unit, String, Array<Unit>, Option<Array<Int64>>) = Option<(UInt32, Unit, String, Array<Unit>, Option<Array<Int64>>)>.None
public var var4646 : Int64 = 89
var var4742 : ?Int8 = (Int16(Int16(Int16(-27))) as Int8)
public let var4750 : (Array<Unit>, Unit, (Range<UInt64>, Range<UInt8>, Rune, Array<Int64>, Unit, Array<Int64>, (Bool, Array<Unit>)), (Range<UInt64>, Range<UInt8>, Rune, Array<Int64>, Unit, Array<Int64>, (Bool, Array<Unit>)), ((Range<UInt64>, Range<UInt8>, Rune, Array<Int64>, Unit, Array<Int64>, (Bool, Array<Unit>)), Float64, Bool, (UInt32, Unit, String, Array<Unit>, Option<Array<Int64>>), Range<Int8>, UInt16), String) = ([(), (), (), (), (), (), (), (), (), ()], (), ((UInt64(70)&127..UInt64(11)&127:(-91)|1), (UInt8(6)&127..=UInt8(142)&127:(Int64(UInt64(180))|1)), 'a', [115, 8, 100, (-102), 105, 36, 88, 78, 7, (-115)], (), [(-62), 115, (-104), (-55), 126, 68, 32, (-35), (-21), 59], ((Option<(Range<UInt32>, String, Range<Int16>, Range<UInt16>, (Range<UInt64>, Range<UInt8>, Rune, Array<Int64>, Unit, Array<Int64>, (Bool, Array<Unit>)), Array<UInt32>, Int8, (Bool, Array<Unit>), Rune)>.None is Range<UInt64>), [(), (), (), (), (), (), (), (), (), ()])), ((UInt64(155)&127..=UInt64(37)&127:80|1), (UInt8(53)&127..UInt8(215)&127:65|1), 'R', [(-27), (-124), (-87), 108, (-44), 21, (-125), 66, (-88), 27], (), [Int64(UInt32(254)), 72, Int64(UInt8(7)), (-48), Int64(UInt16(4)), Int64((-39)), Int64(Int8(92)), 104, (-24), Int64(UInt32(221))], ((Option<Range<UInt64>>.None is Option<Int8>), [(), (), (), (), (), (), (), (), (), ()])), (((UInt64(249)&127..UInt64(23)&127:((-64)|1)), (UInt8(95)&127..UInt8(109)&127:((-114)|1)), 'E', [74, 31, (-83), (-13), (-34), 55, 46, 76, (-128), (-48)], (), [48, (-107), 101, 0, (-68), 31, (-75), 122, 57, (-54)], (true, [(), (), (), (), (), (), (), (), (), ()])), Float64(Float64(57.0)), false, (UInt32(UInt32(6)), (), ###"|${var1837}S${var1837}]\"jj\\${var1837}O@k"###, [(), (), (), (), (), (), (), (), (), ()], (".mY${var1837}Q]${var1837}Z|,Q7" as Array<Int64>)), (Int8(-7)&127..=Int8(-57)&127:(-60)|1), UInt16(Int8(Int8(4)))), "'LB*${var1837}&va${var1837}Zwo")
public let var4927 : (Float32, UInt16, String, UInt16, UInt8, UInt8) = (Float32(-48.0), UInt16(UInt16(UInt16(UInt16(74)))), "_<Q-4${var1837}D2au$", UInt16(Int16(95)), UInt8(UInt8(218)), UInt8(230))
public let var5009 : Range<Int16> = (Int16(-53)&127..=Int16(10)&127:72|1)
public let var5037 : Option<Option<Range<UInt64>>> = ((Float32(Float32(Float32(-59.0))), UInt16(UInt16(70)), "yj}u${var1837}'${var1837}t${var1837}#j${var1837}:s", UInt16(UInt16(Int8(-44))), UInt8(118), UInt8(Int8(Int8(-43)))) as Option<Range<UInt64>>)
public let var5137 : ?Array<Int64> = ((UInt32(5), (), "C&?${var1837}m!K${var1837}!${var1837}0b9", [(), (), (), (), (), (), (), (), (), ()], (Float64(Float32(56.0)) as Array<Int64>)) as Array<Int64>)
public let var5199 : Option<Array<Int64>> = ((Int16(-116)&127..Int16(58)&127:98|1) as Array<Int64>)
public var var5211 : Int64 = Int64(Int8(34))
public struct Aggregate8<T0, T1> where T0 <: Bool, T1 <: Range<UInt64> {
    public init() { // block id: 10

    }
;
    public var var15 : UInt32 = UInt32(215)
}

public open class Class39 <: Resource {
    public init() { // block id: 41

    }
;
    public let var46 : (Bool, Array<Unit>) = (true, [(), (), (), (), (), (), (), (), (), ()])
    public func isClosed(): Bool { return true }
    public func close(): Unit {}
}


public struct Aggregate67 {
    init() { // block id: 69

    }
;
    public static let var72 : Float32 = Float32(-29.0)
}

public func func143(param144 : Float32) : Bool { // block id: 145
    match (Option<Array<Int64>>.Some([(-87), 8, (-55), 24, 17, (-8), (-105), (-107), (-111), (-102)])) {
        case _ => 
            var154 || true
        
        case _ => 
            Int16(-2) < Int16(-60)
        
        case caseVar175 => 
            let var179 : UInt64 = UInt64(UInt64(67));
            var179 <= UInt64(251)
        
        case _ => 
            var154
        
    }
}



func func195(param196 : Range<Int8>) : Float32 { // block id: 197
    Int16(-77);
    let var211 : ?(Float32, UInt16, String, UInt16, UInt8, UInt8) = Option<(Float32, UInt16, String, UInt16, UInt8, UInt8)>.None;
    var var250 : Unit = ();
    var var266 : Int64 = (-18);
    let var273 : Array<Int64> = Array<Int64>(10){ i => (-57) };
    var var337 : Float32 = Float32(Float32(Float32(-70.0)));
    var var375 : UInt64 = UInt64(40);
    (match ((var211 ?? var214)) {
        case caseVar227 : Range<Int16> => 
            let var230 : ?(Bool, Array<Unit>) = Option<(Bool, Array<Unit>)>.Some(((((Int32(24)&127..=Int32(82)&127:(-42)|1) as (Bool, Array<Unit>)) is Float64), [(), (), (), (), (), (), (), (), (), ()]));
            var230
        
        case (_,_,caseVar239,caseVar240,_,_ : Array<Unit>) => 
            ();
            let var258 : Unit = ();
            Option<(Bool, Array<Unit>)>.Some((var154, [(), (), var250, (), (), (), var250, (), var258, var250]))
        
        case _ : Range<Int32> => 
            var266 ** ((-27) & 3);
            let var296 : ?Array<Int64> = Option<Array<Int64>>.None;
            if (false) { Option<Array<Int64>>.Some(var273) } else { var296 } ;
            let var299 : ?(Bool, Array<Unit>) = Option<(Bool, Array<Unit>)>.Some((((UInt32(140)&127..=UInt32(26)&127:7|1) is UInt32), [(), (), (), (), (), (), (), (), (), ()]));
            var299
        
        case _ => 
            if (var154) { [59, var266, (-69), 7, 40, (-12), var266, var266, var266, var266] } else { [var322, 27, (-28), 14, var266, (-34), var322, var331, (-54), var322] } ;
            var337 ** Float32(Int32(Float32(-67.0)) & 3);
            let var343 : ?(Bool, Array<Unit>) = Option<(Bool, Array<Unit>)>.Some((true, [(), (), (), (), (), (), (), (), (), ()]));
            var343
        
    } ?? if (match {
        case true => 
        UInt32(211);
        var364;
        true
        case true => 
        '3';
        var375 = UInt64(220);
        false
        case _ => 
        ();
        var154
    }) { // block id: 382
        Float32(-79.0);
        var var386 : Int8 = Int8(40);
        (var386&127..var386&127:(var266|1));
        var var396 : (Bool, Array<Unit>) = ((UInt64(247) is String), [(), (), (), (), (), (), (), (), (), ()]);
        if (false) { (true, [(), (), (), (), (), (), (), (), (), ()]) } else { var396 } 
    } else if (var154) { // block id: 412
        var var415 : Bool = (Int8(Int8(105)) is Range<Int32>);
        var415 &&= true;
        (UInt32(97)&127..=var423&127:(119|1));
        if (true) { var429 } else { (false, [(), (), (), (), (), (), (), (), (), ()]) } 
    } else { // block id: 438
        'o';
        (var154, [(), (), (), (), (), (), (), (), (), ()])
    });
    let var452 : Float64 = (-118.0);
    try { // block id: 446
        (var375&127..=UInt64(184)&127:((-16)|1));
        var452;
        [Float32(-19.0), Float32(-111.0), Float32(85.0), Float32(90.0), Float32(61.0), Float32(24.0), Float32(103.0), Float32(-58.0), Float32(-62.0), Float32(-118.0)]
    } catch (e: Exception) { // block id: 455
        [Float32(-101.0), Float32(-116.0), Float32(25.0), Float32(-7.0), Float32(-46.0), Float32(53.0), Float32(-4.0), Float32(39.0), Float32(48.0), Float32(105.0)]
    }[8]
}

public func func136(param137 : Int16) : Bool { // block id: 138
    try (resource = Class673()) { // block id: 140

    } finally { // block id: 141

    };
    let var188 : (Float32) -> Bool = { lambdaParameter191 : Float32 => false };
    ((Int8(-125)&127..=Int8(4)&127:(-23)|1)|>{ lambdaParameter460 : Range<Int8> => Float32(-69.0) })|>var188
}


func func566(param567 : (Int16) -> Bool) : Unit { // block id: 570

}

public func func574(param137 : Int16) : Bool { // block id: 138
    try (resource = Class673()) { // block id: 140

    } finally { // block id: 141

    };
    let var188 : (Float32) -> Bool = { lambdaParameter191 : Float32 => false };
    ((Int8(-125)&127..=Int8(4)&127:(-23)|1)|>{ lambdaParameter460 : Range<Int8> => Float32(-69.0) })|>var188
}

public open class Class673 <: Resource {
    public init() { // block id: 675

    }
;
    var var680 : Bool = false;
    open func func972(namedParam973 ! : Array<Float32>, namedParam974 ! : UInt8) : (Bool, Array<Unit>) { // block id: 975
        var429
    }
;
    public static var var1082 : Unit = ();
    var var1516 : UInt8 = UInt8(55);
    private let var1817 : Unit = ();
    static var var3500 : ?(Bool, Array<Unit>) = Option<(Bool, Array<Unit>)>.None;
    public static func func2012(param2013 : Int32, param2014 : Float64) : Option<(Bool, Array<Unit>)> { // block id: 2015
        let var3327 : Array<Option<Int8>> = Array<Option<Int8>>(10){ i => Option<Int8>.Some(Int8(Int8(UInt8(148)))) };
        ((var3327[5]|>func2022) ?? try { // block id: 3496
            if (false) { var3500 } else { Option<(Bool, Array<Unit>)>.Some(var429) } 
        } finally { // block id: 3504
            if (true) { Option<(Bool, Array<Unit>)>.None } else { var3500 } 
        })
    }
;
    private static let var3599 : Range<UInt64> = (UInt64(122)&127..=UInt64(192)&127:(-60)|1);
    public static func func1981(optionalParam1982 ! : (Float32, UInt16, String, UInt16, UInt8, UInt8) = (Float32(12.0), UInt16(232), ###" B%%dLI@}y"###, UInt16(127), UInt8(181), UInt8(217)), optionalParam1990 ! : UInt16 = UInt16(230), namedParam1992 ! : ((Int16) -> Bool) -> Unit) : Unit { // block id: 1995
        try { // block id: 1997
            [(), var1350, var560, (), var536, var1082, (), (), var796, var560][5];
            func2012(var1767, 87.0)
        } catch (e: Exception) { // block id: 3511
            if (var1018) { Option<(Bool, Array<Unit>)>.Some(var429) } else { Option<(Bool, Array<Unit>)>.None } 
        } finally { // block id: 3517
            var3500
        };
        let var3577 : Bool = ((UInt16(160)&127..UInt16(218)&127:1|1) is Range<Int16>);
        var loopTimeVar3716 : Int64 = 0;
        while ((match (UInt16(97)) {
            case 91 | 142 => 
                var3528
            
            case _ => 
                var1350;
                [true, false, false, true, false, true, true, false, false, false]
            
            case 40 => 
                if (true) { [var1018, var1018, true, true, true, false, var1476, var154, var1476, var154] } else { [true, true, false, false, true, false, true, true, true, true] } 
            
            case 13 | 196 | 64 => 
                [var154, false, false, false, false, true, var154, false, var154, var1476]
            
            case _ => 
                ();
                var2592;
                if (false) { [var1476, var1018, true, var3577, var154, true, var1018, true, true, var3577] } else { [false, true, true, false, true, false, true, true, true, false] } 
            
        }[9]) && loopTimeVar3716 < 100 ) {
            loopTimeVar3716++;
            match (optionalParam1990) {
                case _ => 
                    var var3621 : Rune = 'y';
                    (var2133, (), (var3599, var364, 'f', [var322, var331, var322, (-35), 114, (-94), 116, var2178, 27, (-115)], (), [113, 38, 32, (-109), (-18), 37, 67, 6, 89, (-43)], var429), (var3599, (UInt8(55)&127..UInt8(223)&127:(-71)|1), var3621, [(-74), var2178, var331, (-73), (-73), 47, 65, 63, var1006, var2178], var1350, var868, var429), var3638, var1837);
                    var536
                
                case caseVar3688 : (Range<UInt32>, String, Range<Int16>, Range<UInt16>, (Range<UInt64>, Range<UInt8>, Rune, Array<Int64>, Unit, Array<Int64>, (Bool, Array<Unit>)), Array<UInt32>, Int8, (Bool, Array<Unit>), Rune) => 
                    var536;
                    ();
                    var2517 -= var2517
                
                case 151 | 90 | 50 | 17 => 
                    var1767 -= var1767;
                    var560
                
                case 134 | 73 | 148 | 214 => 
                    Option<Option<(Bool, Array<Unit>)>>.Some(var3500);
                    ();
                    ()
                
                case _ => 
                    var796;
                    var1476 ||= false
                
            }
        }
    }
;
    public static let var3724 : UInt16 = UInt16(17);
    public init(optionalParam1966 ! : Array<Float32> = [Float32(-69.0), Float32(2.0), Float32(-42.0), Float32(97.0), Float32(25.0), Float32(-34.0), Float32(-90.0), Float32(65.0), Float32(94.0), Float32(-71.0)], optionalParam1968 ! : ((Int16) -> Bool) -> Unit = { lambdaParameter1971 : (Int16) -> Bool => () }, namedParam1976 ! : (Unit, Bool, Range<UInt8>)) { // block id: 1977
        Class673.func1981(optionalParam1982 : if (var1018) { (Float32(-25.0), UInt16(46), "Oa)=vx`fNf", var3724, UInt8(153), UInt8(55)) } else { var214 } , namedParam1992 : func566);
        if (var154) { // block id: 3732
            (Option<Unit>.Some(var1350) ?? ());
            ();
            var loopTimeVar3746 : Int64 = 0;
            do {
                loopTimeVar3746++;

            } while ((true) && loopTimeVar3746 < 100 ) 
        };
        match ((Option<Array<Int64>>.Some([36, (-5), 65, 89, 90, 42, (-103), (-78), 9, (-44)]) as Array<Bool>)) {
            case _ : (Bool, Array<Unit>) => 
                false || true;
                var2592
            
            case caseVar3760 : Option<Range<UInt64>> => 
                ();
                ()
            
            case _ => 
                var536
            
        }
    }
;
    public var var3842 : UInt8 = UInt8(209);
    public open func func1809(namedParam1810 ! : Range<Int64>, namedParam1811 ! : Option<(Bool, Array<Unit>)>, namedParam1812 ! : UInt64) : UInt8 { // block id: 1813
        this.var1817;
        match ((Option<Option<Unit>>.Some(Option<Unit>.None)|>func1821)) {
            case caseVar3808 => 
                if (var1476) { [UInt32(156), var423, UInt32(47), UInt32(185), var423, var423, var2500, UInt32(185), UInt32(195), var423] } else { var2106 } ;
                ();
                UInt8(238)
            
            case caseVar3828 : Int32 => 
                var796;
                var680 &&= var1476;
                var1516
            
            case _ => 
                ();
                UInt8(57) + var3842
            
            case caseVar3846 : Array<Int64> => 
                UInt8(193) ^ UInt8(25)
            
            case _ => 
                ();
                UInt8(31) + var1516
            
        }
    }

    public func isClosed(): Bool { return true }
    public func close(): Unit {}
}



public func func817(param137 : Int16) : Bool { // block id: 138
    try (resource = Class673()) { // block id: 140

    } finally { // block id: 141

    };
    let var188 : (Float32) -> Bool = { lambdaParameter191 : Float32 => false };
    ((Int8(-125)&127..=Int8(4)&127:(-23)|1)|>{ lambdaParameter460 : Range<Int8> => Float32(-69.0) })|>var188
}


public func func935(param137 : Int16) : Bool { // block id: 138
    try (resource = Class673()) { // block id: 140

    } finally { // block id: 141

    };
    let var188 : (Float32) -> Bool = { lambdaParameter191 : Float32 => false };
    ((Int8(-125)&127..=Int8(4)&127:(-23)|1)|>{ lambdaParameter460 : Range<Int8> => Float32(-69.0) })|>var188
}


public func func940(param941 : Float64) : Option<Option<Unit>> { // block id: 942
    (UInt32((var423 % ((UInt32(126)) | 1))) is Int16);
    var var956 : ?Array<Bool> = Option<Array<Bool>>.None;
    let var969 : Class673 = Class673();
    func func963(param964 : (Bool, Array<Unit>), param965 : Float64) : (Bool, Array<Unit>) { // block id: 966
        var var986 : Int16 = Int16(UInt8(Int8(Int8(31))));
        let var998 : Rune = 'M';
        var969.func972(namedParam973 : [Float32(23.0), Float32(-3.0), Float32(-57.0), Float32(-109.0), Float32(-119.0), Float32(-75.0), Float32(-53.0), Float32(112.0), Float32(69.0), Float32(94.0)], namedParam974 : if (true) { // block id: 980
            var796;
            UInt8(23)
        } else { // block id: 983
            var986 = var986;
            if (true) { ((UInt64(112)&127..UInt64(86)&127:55|1), var364, var998, var868, (), [var331, var322, var1006, var331, 16, (-64), 23, 95, (-9), 88], (var1018, [(), (), (), (), (), (), (), (), (), ()])) } else { var1022 } ;
            var var1062 : UInt8 = UInt8(UInt8(Int8(80)));
            var1062
        })
    }
;
    var loopTimeVar1069 : Int64 = 0;
    do {
        loopTimeVar1069++;
        (UInt32(178)&127..=UInt32(50)&127:(-5)|1);
        func963(var429, param941)
    } while (((var956 ?? var601)[9]) && loopTimeVar1069 < 100 ) ;
    Option<Option<Unit>>.None
}

public struct Aggregate1086 {
    public init() { // block id: 1088

    }
;
    public static var var1451 : ?Int8 = Option<Int8>.None;
    private static let var1461 : Range<UInt64> = (UInt64(196)&127..=UInt64(81)&127:(-13)|1);
    static func func1091(param1092 : Array<UInt32>) : Float64 { // block id: 1093
        let var1119 : Float32 = Float32(Float32(Float32(-10.0)));
        let var1466 : (Int16) -> Bool = func136;
        let var1489 : UInt8 = UInt8(180);
        func func1149(param1150 : Option<Int8>) : Range<UInt64> { // block id: 1151
            let var1153 : Array<Unit> = Array<Unit>(10){ i => () };
            var1153;
            'e';
            try { // block id: 1167
                let var1434 : (Option<Array<Int64>>) -> (UInt32, Unit, String, Array<Unit>, Option<Array<Int64>>) = { lambdaParameter1437 : Option<Array<Int64>> => (UInt32(109), (), ###"M6~\\bL~Z=k"###, [(), (), (), (), (), (), (), (), (), ()], (false as Array<Int64>)) };
                Option<Array<Int64>>.Some(var868)|>var1434;
                if (false) { var1451 } else { var1451 } ;
                Option<Range<UInt64>>.Some(var1461).getOrThrow()
            } catch (e: Exception) { // block id: 1463
                func566(var1466);
                match (Option<Unit>.None) {
                    case caseVar1472 : UInt8 => 
                        var1476 &&= false
                    
                    case _ : Int32 => 
                        var1476 ||= var1018;
                        ()
                    
                    case _ => 
                        var1489;
                        ()
                    
                };
                (Option<Range<UInt64>>.None ?? (UInt64(124)&127..=UInt64(126)&127:104|1))
            } finally { // block id: 1495
                func func1497(param1498 : ((Int16) -> Bool) -> Unit, param1501 : UInt64) : Unit { // block id: 1502
                    ()
                }
;
                func1497(func566, UInt64(99));
                let var3892 : (Option<Int8>) -> Range<UInt64> = func1507;
                Option<Int8>.Some(Int8(-8))|>var3892
            }
        }
;
        let var3905 : (Int16) -> Bool = func3902;
        var3905|>{ lambdaParameter1097 : (Int16) -> Bool => var loopTimeVar3901 : Int64 = 0; while (((try { // block id: 1102
            let var1124 : Float32 = Float32(-110.0);
            if (var154) { [Float32(7.0), var1108, Float32(37.0), var1108, var1108, Float32(122.0), var1108, var1119, var1124, var1124] } else { [var1119, Float32(117.0), var1119, var1108, var1108, var1134, var1108, Float32(-40.0), var1119, Float32(-26.0)] } ;
            (UInt64(30)&127..=UInt64(59)&127:(-98)|1)
        } finally { // block id: 1141
            (UInt64(173)&127..UInt64(154)&127:9|1);
            if (var1018) { (UInt64(55)&127..=UInt64(143)&127:(-90)|1) } else { (UInt64(88)&127..=UInt64(29)&127:25|1) } 
        } is Range<Int32>)) && loopTimeVar3901 < 100 ) {
            loopTimeVar3901++;
            let var3897 : ?Int8 = (Option<(Bool, Array<Unit>)>.None as Int8);
            func1149(var3897)
        } };
        70.0
    }

}

public func func1169(param1170 : Option<Array<Int64>>) : (UInt32, Unit, String, Array<Unit>, Option<Array<Int64>>) { // block id: 1171
    Float32(68.0) % Float32((Int32(var1108)) | 1);
    var var1182 : (Array<Unit>, Unit, (Range<UInt64>, Range<UInt8>, Rune, Array<Int64>, Unit, Array<Int64>, (Bool, Array<Unit>)), (Range<UInt64>, Range<UInt8>, Rune, Array<Int64>, Unit, Array<Int64>, (Bool, Array<Unit>)), ((Range<UInt64>, Range<UInt8>, Rune, Array<Int64>, Unit, Array<Int64>, (Bool, Array<Unit>)), Float64, Bool, (UInt32, Unit, String, Array<Unit>, Option<Array<Int64>>), Range<Int8>, UInt16), String) = ([(), (), (), (), (), (), (), (), (), ()], (), ((UInt64(Int16(-22))&127..=UInt64(163)&127:((-72)|1)), (UInt8(87)&127..=UInt8(UInt8(93))&127:(Int64(Int16(-65))|1)), 'h', [104, 83, Int64(Int16(66)), Int64(Int32(-86)), Int64(UInt16(91)), Int64((-11)), Int64(Int16(33)), Int64(UInt64(211)), 115, Int64(UInt64(238))], (), [(-86), (-22), 13, 121, (-108), (-88), 74, 27, (-86), 119], (([(), (), (), (), (), (), (), (), (), ()] is (Float32, UInt16, String, UInt16, UInt8, UInt8)), [(), (), (), (), (), (), (), (), (), ()])), ((UInt64(UInt64(20))&127..UInt64(191)&127:((-37)|1)), (UInt8(34)&127..UInt8(26)&127:54|1), 'l', [Int64(UInt16(234)), Int64(UInt8(89)), (-49), Int64(44), Int64(Int8(-102)), 68, Int64(114), 18, 45, (-53)], (), [77, 62, 100, (-39), (-99), (-25), 33, (-18), (-117), (-74)], ((Class673() is ((Range<UInt64>, Range<UInt8>, Rune, Array<Int64>, Unit, Array<Int64>, (Bool, Array<Unit>)), Float64, Bool, (UInt32, Unit, String, Array<Unit>, Option<Array<Int64>>), Range<Int8>, UInt16)), [(), (), (), (), (), (), (), (), (), ()])), (((UInt64(22)&127..UInt64(145)&127:((-97)|1)), (UInt8(175)&127..=UInt8(26)&127:(21|1)), 'H', [98, (-81), 86, (-54), 36, 107, (-86), (-107), 18, (-124)], (), [46, 25, 69, 106, 58, 101, 15, 126, (-39), (-56)], (false, [(), (), (), (), (), (), (), (), (), ()])), Float64(Float64((-127.0))), ([true, false, false, false, true, false, true, true, false, false] is Array<Unit>), (UInt32(Int8(40)), (), "h?+nW0a{Aw~", [(), (), (), (), (), (), (), (), (), ()], (UInt64(29) as Array<Int64>)), (Int8(68)&127..Int8(39)&127:42|1), UInt16(251)), """
g`akG
0u/bP
""");
    var var1346 : Rune = 'V';
    let var1366 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    let var1387 : Int64 = 101;
    let var1393 : Int64 = (-33);
    let var1405 : Float64 = Float64(Float32(-120.0));
    let var1410 : (UInt32, Unit, String, Array<Unit>, Option<Array<Int64>>) = (UInt32(Int8(Int8(-105))), (), "6Au|Cq8U[0", [(), (), (), (), (), (), (), (), (), ()], (Int8(UInt8(Int8(13))) as Array<Int64>));
    if (true) { var1182 } else { ([(), (), (), var796, (), var536, var796, (), (), var560], var536, ((var778&127..=UInt64(220)&127:(var322|1)), var364, var1346, var868, var1350, [var1006, var331, (-61), var1006, (-9), var1006, (-7), 79, var331, (-83)], (var1018, var1366)), ((UInt64(188)&127..=UInt64(161)&127:88|1), var364, var1346, var868, var796, [var322, var1387, 12, var1006, (-37), var1393, (-102), (-84), var1006, 82], (var154, var1366)), (var1022, var1405, true, var1410, var1423, UInt16(211)), "y)zhF15C/ ") } [4][3]
}





func func2040(param2041 : Range<UInt32>) : (Range<UInt32>, String, Range<Int16>, Range<UInt16>, (Range<UInt64>, Range<UInt8>, Rune, Array<Int64>, Unit, Array<Int64>, (Bool, Array<Unit>)), Array<UInt32>, Int8, (Bool, Array<Unit>), Rune) { // block id: 2042
    var var2066 : Int16 = Int16(106);
    let var2069 : Int64 = 30;
    var var2072 : Range<UInt16> = (UInt16(58)&127..=UInt16(211)&127:91|1);
    let var2089 : Rune = 'z';
    let var2191 : Bool = (UInt64(119) is Range<Int64>);
    var var2197 : (Range<UInt32>, String, Range<Int16>, Range<UInt16>, (Range<UInt64>, Range<UInt8>, Rune, Array<Int64>, Unit, Array<Int64>, (Bool, Array<Unit>)), Array<UInt32>, Int8, (Bool, Array<Unit>), Rune) = ((UInt32(Int32(UInt16(215)))&127..UInt32(UInt8(UInt8(43)))&127:(Int64(Int32(UInt8(168)))|1)), ###"=MW^:'|wSB"###, (Int16(76)&127..=Int16(UInt8(Int8(-113)))&127:(4|1)), (UInt16(95)&127..=UInt16(8)&127:81|1), ((UInt64(Int32(-33))&127..=UInt64(1)&127:(Int64(Int8(-19))|1)), (UInt8(UInt8(217))&127..=UInt8(Int8(-70))&127:((-60)|1)), 'c', [Int64(UInt64(8)), (-59), Int64(UInt64(181)), Int64((-110)), (-3), Int64(Int8(23)), Int64(Int32(-95)), (-13), Int64(UInt16(203)), (-25)], (), [Int64(UInt8(169)), Int64(Int8(-33)), Int64(UInt64(78)), Int64(Int8(-4)), Int64(Int16(-62)), 106, Int64(94), Int64(UInt8(213)), (-76), Int64((-99))], (((UInt32(239)&127..UInt32(7)&127:(-111)|1) is Option<Int8>), [(), (), (), (), (), (), (), (), (), ()])), [UInt32(226), UInt32(UInt8(Int8(-24))), UInt32(205), UInt32(98), UInt32(16), UInt32(6), UInt32(121), UInt32(84), UInt32(Int16(UInt8(221))), UInt32(112)], Int8(UInt8(Int8(110))), (((((UInt64(249)&127..=UInt64(43)&127:((-38)|1)), (UInt8(157)&127..=UInt8(125)&127:(-6)|1), 'r', [(-32), (-101), (-42), 107, 89, 50, 115, 66, (-34), (-33)], (), [(-17), (-70), (-61), (-14), 104, 83, (-64), (-69), 88, 104], (true, [(), (), (), (), (), (), (), (), (), ()])), (-93.0), true, (UInt32(122), (), "JmVdVtk=TD", [(), (), (), (), (), (), (), (), (), ()], Option<Array<Int64>>.None), (Int8(124)&127..Int8(8)&127:(55|1)), UInt16(184)) is ((Int16) -> Bool) -> Unit), [(), (), (), (), (), (), (), (), (), ()]), 'C');
    (var2049 ?? if (false) { // block id: 2053
        var1760 **= Float64(Int32(var1760) & 3);
        var var2076 : Range<UInt64> = (UInt64(Int32(UInt32(Int16(-64))))&127..=UInt64(218)&127:(Int64(Int64(UInt32(Int8(15))))|1));
        ((UInt32(90)&127..var423&127:(var1006|1)), var1837, (Int16(38)&127..=var2066&127:(var2069|1)), var2072, (var2076, var364, var2089, [var331, (-113), 88, (-22), 117, var1006, (-47), var1006, (-96), (-96)], (), [(-47), 11, (-123), 61, 1, (-75), 84, (-96), (-73), (-125)], var429), var2106, Int8(-26), (var1476, var2133), var2089)
    } else { // block id: 2136
        var536;
        var var2144 : Range<Int16> = (Int16(-49)&127..Int16(30)&127:(-92)|1);
        var var2154 : Rune = 'y';
        if (true) { (param2041, "}PMzf/F)3m", var2144, var2072, ((UInt64(252)&127..var778&127:(var322|1)), var364, var2154, var2157, var536, [76, var331, 88, var2178, var322, var322, var331, var2069, var2069, var322], var429), var2106, var919, (var2191, [(), (), (), (), (), (), (), (), (), ()]), 'D') } else { var2197 } 
    })
}


func func940(param2034 : Array<Int64>) : (String, (Unit, Bool, Range<UInt8>), Array<Unit>) { // block id: 2035
    var var2342 : (Range<UInt32>) -> (Range<UInt32>, String, Range<Int16>, Range<UInt16>, (Range<UInt64>, Range<UInt8>, Rune, Array<Int64>, Unit, Array<Int64>, (Bool, Array<Unit>)), Array<UInt32>, Int8, (Bool, Array<Unit>), Rune) = func2040;
    var var2353 : ?Array<Bool> = ((UInt32(Int32(72))&127..=UInt32(Int16(Int16(-85)))&127:(Int64(Int32(5))|1)) as Array<Bool>);
    match (((UInt32(205)&127..var423&127:(var1006|1))|>var2342)[4]) {
        case _ => 
            var2353;
            var423 /= ((var423) | 1);
            let var2367 : Range<Int16> = (Int16(86)&127..Int16(-105)&127:(-28)|1);
            var2367
        
        case _ : UInt8 => 
            var536;
            113.0;
            var var2377 : Range<Int16> = (Int16(67)&127..=Int16(-93)&127:92|1);
            if (true) { var2377 } else { var2377 } 
        
        case _ => 
            (Int16(-108)&127..Int16(-77)&127:(-93)|1)
        
    };
    var var2392 : ?Range<UInt64> = Option<Range<UInt64>>.None;
    let var2399 : (Unit, Bool, Range<UInt8>) = ((), (Float32(Float32(71.0)) is (Unit, Bool, Range<UInt8>)), (UInt8(253)&127..UInt8(UInt8(247))&127:(Int64(Int32(UInt32(86)))|1)));
    if (((Option<Option<Range<UInt64>>>.None ?? var2392) is (((Int16) -> Bool) -> Unit, UInt64) -> Unit)) { try { // block id: 2395
        ("h:2tvAe;a{p", var2399, [(), (), (), (), (), (), (), (), (), ()])
    } finally { // block id: 2413
        var364;
        if (var1476) { var2418 } else { (var1837, ((), true, (UInt8(172)&127..=UInt8(71)&127:36|1)), [(), (), (), (), (), (), (), (), (), ()]) } 
    } } else { (if (true) { "5T3*R5\"EN!" } else { """
Qa{zCr
Ei39m
""" } , if (true) { // block id: 2465
        ((), true, var364)
    } else if (false) { // block id: 2471
        ((), false, (UInt8(25)&127..UInt8(55)&127:48|1))
    } else { // block id: 2476
        var796;
        var2399
    }, var2133) } 
}

func func2027(param2028 : Option<Option<(Bool, Array<Unit>)>>) : Array<Unit> { // block id: 2029
    func940(if (true) { [(-3), 11, (-84), 105, (-83), (-1), 50, 96, 97, 80] } else { [(-23), 53, (-94), 38, 76, var322, var322, var2178, (-40), 22] } )[2]
}



public func func2022(param2023 : Option<Int8>) : Option<Option<(Bool, Array<Unit>)>> { // block id: 2024
    let var2496 : (Option<Option<(Bool, Array<Unit>)>>) -> Array<Unit> = func2027;
    var var2526 : Range<UInt32> = (UInt32(UInt8(106))&127..=UInt32(18)&127:(Int64(UInt64(Int16(-3)))|1));
    let var2537 : Int16 = Int16(UInt16(95));
    var var2544 : UInt16 = UInt16(Int8(-93));
    var var2551 : Range<UInt64> = (UInt64(192)&127..=UInt64(UInt64(UInt16(UInt16(166))))&127:(Int64(Int16(UInt16(251)))|1));
    var var2595 : Rune = 'n';
    var var2629 : Rune = 'N';
    var var2658 : Array<Bool> = [false, (((-27.0) as Unit) is (Option<Option<Unit>>, (Array<Unit>, Unit, (Range<UInt64>, Range<UInt8>, Rune, Array<Int64>, Unit, Array<Int64>, (Bool, Array<Unit>)), (Range<UInt64>, Range<UInt8>, Rune, Array<Int64>, Unit, Array<Int64>, (Bool, Array<Unit>)), ((Range<UInt64>, Range<UInt8>, Rune, Array<Int64>, Unit, Array<Int64>, (Bool, Array<Unit>)), Float64, Bool, (UInt32, Unit, String, Array<Unit>, Option<Array<Int64>>), Range<Int8>, UInt16), String)) -> Class673), false, ((Int32(-53) as Array<Int64>) is Option<(UInt32, Unit, String, Array<Unit>, Option<Array<Int64>>)>), false, false, (((((UInt64(86)&127..UInt64(169)&127:((-81)|1)), (UInt8(138)&127..=UInt8(233)&127:38|1), 'S', [104, (-76), (-19), 61, (-110), 20, 58, 56, 105, 79], (), [123, (-11), 70, (-40), 20, 109, 22, (-82), 35, 61], (false, [(), (), (), (), (), (), (), (), (), ()])), 106.0, true, (UInt32(117), (), ###"Fhe,2JUr'U"###, [(), (), (), (), (), (), (), (), (), ()], Option<Array<Int64>>.Some([(-8), 87, (-41), (-7), 9, (-104), 48, (-27), 70, (-105)])), (Int8(-117)&127..=Int8(72)&127:(-115)|1), UInt16(249)) as Array<Int64>) is Option<(Bool, Array<Unit>)>), ((UInt16(232), UInt32(167), (Int8(-23)&127..Int8(-71)&127:9|1), [Float32(-25.0), Float32(-51.0), Float32(-66.0), Float32(-11.0), Float32(-52.0), Float32(-126.0), Float32(27.0), Float32(35.0), Float32(8.0), Float32(26.0)], Int16(UInt16(157)), UInt32(UInt16(182)), Int16(43), Int64(UInt16(161)), ()) is Array<UInt32>), true, (55.0 is Array<Unit>)];
    let var2790 : ?Array<Bool> = ((Int64(Int16(Int16(-25)))&127..81&127:(Int64(UInt8(Int8(79)))|1)) as Array<Bool>);
    let var2864 : Bool = ([UInt32(66), UInt32(112), UInt32(209), UInt32(130), UInt32(UInt32(UInt16(104))), UInt32(143), UInt32(Int8(Int8(-125))), UInt32(UInt8(Int8(-36))), UInt32(UInt8(Int8(89))), UInt32(201)] is UInt8);
    var var2900 : ((Range<UInt64>, Range<UInt8>, Rune, Array<Int64>, Unit, Array<Int64>, (Bool, Array<Unit>)), Float64, Bool, (UInt32, Unit, String, Array<Unit>, Option<Array<Int64>>), Range<Int8>, UInt16) = (((UInt64(222)&127..UInt64(Int32(-62))&127:(113|1)), (UInt8(99)&127..UInt8(63)&127:31|1), 'd', [93, (-90), (-14), 33, 76, 73, 73, 115, 41, (-64)], (), [89, 67, 39, (-65), (-48), 33, (-93), (-115), (-47), (-47)], (((-88.0) is Option<Option<(Bool, Array<Unit>)>>), [(), (), (), (), (), (), (), (), (), ()])), Float64(Float32(-4.0)), ((Int8(79) as Int8) is Option<Range<UInt64>>), (UInt32(Int8(-92)), (), "d]Ya`-9%h*", [(), (), (), (), (), (), (), (), (), ()], Option<Array<Int64>>.Some([(-106), 33, (-72), (-30), 2, (-110), 92, (-14), (-116), 75])), (Int8(92)&127..Int8(2)&127:54|1), UInt16(124));
    var var3033 : Aggregate1086 = Aggregate1086();
    (((var2500 as Option<(Bool, Array<Unit>)>)|>var2496), match ((var1134, UInt16(232), ###">Iy_ba{%hN:"###, UInt16(115), UInt8(180), var2510)) {
        case _ => 
            var2517 ^= UInt8(91)
        
    }, if ((Option<(Range<UInt32>, String, Range<Int16>, Range<UInt16>, (Range<UInt64>, Range<UInt8>, Rune, Array<Int64>, Unit, Array<Int64>, (Bool, Array<Unit>)), Array<UInt32>, Int8, (Bool, Array<Unit>), Rune)>.Some((var2526, """
]]R~j
E3$j7
""", (var2537&127..=Int16(-106)&127:(var322|1)), (var2544&127..=var2544&127:(var322|1)), (var2551, (UInt8(100)&127..=UInt8(192)&127:(-115)|1), 'L', [(-115), 45, 1, 85, (-52), 125, (-88), 83, 106, 122], var536, [42, (-75), (-50), 66, (-61), 39, (-84), (-96), (-9), 40], var429), [var2500, UInt32(187), var423, UInt32(57), UInt32(42), UInt32(238), var423, var2500, UInt32(179), UInt32(52)], Int8(85), (var154, [var560, (), (), var796, (), (), var536, var560, var536, var2592]), var2595)) is Rune)) { // block id: 2597
        var2592;
        ((UInt64(186)&127..=UInt64(17)&127:(-128)|1), (UInt8(183)&127..UInt8(175)&127:2|1), 'w', [70, (-26), (-87), 50, 111, (-97), var2178, var331, 44, var1006], (), [105, 97, (-8), (-23), (-106), (-29), (-83), 53, 36, 38], (var1476, var2133))
    } else { // block id: 2619
        Option<Int8>.Some(Int8(-69));
        ((UInt64(146)&127..UInt64(114)&127:((-25)|1)), var364, var2629, [(-19), (-23), 113, var2178, (-82), (-115), var322, (-6), (-56), var331], var536, [(-24), 97, 97, 66, (-123), 17, (-83), (-22), (-2), (-69)], var429)
    }, match (try { // block id: 2647
            var796;
            var var2651 : UInt8 = UInt8(11);
            var2651 |= UInt8(120);
            if (false) { var601 } else { var2658 } 
        } catch (e: Exception) { // block id: 2754
            [false, false, true, false, true, false, false, true, false, true]
        } finally { // block id: 2756
            var2629;
            var1476 ||= var1476;
            var2658
        }) {
        case caseVar2764 : (Array<Unit>, Unit, (Range<UInt64>, Range<UInt8>, Rune, Array<Int64>, Unit, Array<Int64>, (Bool, Array<Unit>)), (Range<UInt64>, Range<UInt8>, Rune, Array<Int64>, Unit, Array<Int64>, (Bool, Array<Unit>)), ((Range<UInt64>, Range<UInt8>, Rune, Array<Int64>, Unit, Array<Int64>, (Bool, Array<Unit>)), Float64, Bool, (UInt32, Unit, String, Array<Unit>, Option<Array<Int64>>), Range<Int8>, UInt16), String) => 
            var214;
            var1022
        
        case caseVar2770 : UInt32 => 
            (UInt64(52)&127..var563&127:((-9)|1));
            var560;
            var1022
        
        case _ => 
            Option<(UInt32, Unit, String, Array<Unit>, Option<Array<Int64>>)>.Some(var2782);
            var2790;
            ((UInt64(186)&127..=UInt64(127)&127:107|1), (var2510&127..var2510&127:((-82)|1)), var2629, var868, var1350, [67, 19, 121, var331, (-115), var2178, 7, var1006, 106, var1006], var429)
        
    }, (((var2551, var364, var2629, [(-10), 35, 85, (-40), (-96), (-51), (-121), 116, (-122), 21], (), var868, (var1018, [var536, (), (), var536, var796, var1350, (), (), (), var2592])), var1006, (var919&127..var2853&127:((-108)|1)), Option<((Range<UInt64>, Range<UInt8>, Rune, Array<Int64>, Unit, Array<Int64>, (Bool, Array<Unit>)), Float64, Bool, (UInt32, Unit, String, Array<Unit>, Option<Array<Int64>>), Range<Int8>, UInt16)>.None)[3] ?? if (var2864) { // block id: 2885
        [Float32(48.0), Float32(-86.0), Float32(-124.0), Float32(107.0), Float32(93.0), Float32(106.0), Float32(102.0), Float32(59.0), Float32(-85.0), Float32(-6.0)];
        if (var1476) { (var1022, 22.0, true, var2782, (Int8(-54)&127..Int8(39)&127:(var331|1)), UInt16(63)) } else { var2900 } 
    } else if (var1018) { // block id: 2943
        let var2954 : Rune = '6';
        let var2959 : Array<Int64> = Array<Int64>(10){ i => Int64(UInt8(3)) };
        if (var154) { ((var2551, (UInt8(40)&127..=UInt8(124)&127:(var2178|1)), var2954, var2157, var2592, var2959, (var1476, [(), (), (), (), var2592, (), (), (), (), ()])), var1760, false, var2782, (var2853&127..=var919&127:((-9)|1)), UInt16(109)) } else { (((var778&127..=var563&127:(var2178|1)), var364, var2954, [var1006, var322, (-114), var1006, var322, (-71), var2178, var1006, 49, var2178], var536, [(-30), 61, 64, (-1), 30, (-96), 20, (-110), 5, 66], var429), var1760, var154, var2782, (var2853&127..=Int8(22)&127:(var322|1)), var2544) } 
    } else { // block id: 3031
        var3033;
        var3036;
        var2900
    }), var1837);
    let var3077 : ?(Bool, Array<Unit>) = Option<(Bool, Array<Unit>)>.None;
    let var3110 : ??(Bool, Array<Unit>) = Option<Option<(Bool, Array<Unit>)>>.None;
    var var3160 : Array<Float32> = Array<Float32>(10){ i => Float32(Float32(-67.0)) };
    let var3195 : Range<Int16> = (Int16(UInt16(Int8(Int8(40))))&127..Int16(102)&127:(125|1));
    try { // block id: 3059
        var var3063 : Array<Range<Int32>> = [(Int32(114)&127..Int32(-30)&127:113|1), (Int32(37)&127..Int32(-38)&127:92|1), (Int32(98)&127..=Int32(1)&127:(-91)|1), (Int32(-6)&127..=Int32(30)&127:(-38)|1), (Int32(-39)&127..Int32(84)&127:(-123)|1), (Int32(-8)&127..Int32(94)&127:(-123)|1), (Int32(106)&127..Int32(30)&127:(-83)|1), (Int32(122)&127..Int32(125)&127:68|1), (Int32(18)&127..=Int32(-41)&127:(-55)|1), (Int32(110)&127..Int32(-56)&127:(-77)|1)];
        var3063[3];
        (var3072 ?? Option<Option<(Bool, Array<Unit>)>>.Some(var3077))
    } catch (_) { // block id: 3079
        var var3180 : ?Array<Int64> = (Option<Option<Range<UInt64>>>.None as Array<Int64>);
        match (Option<(Bool, Array<Unit>)>.Some((var1018, var2133))) {
            case caseVar3087 => 
                (UInt16(166)&127..var2544&127:(var331|1));
                var796;
                Option<Option<(Bool, Array<Unit>)>>.Some(var3077)
            
            case caseVar3098 => 
                ();
                Option<Option<(Bool, Array<Unit>)>>.Some(var3077)
            
            case _ : UInt32 => 
                ();
                if (true) { var3110 } else { var3110 } 
            
            case caseVar3115 : Range<Int16> => 
                (var2133, (), (var2551, var364, var2595, var868, var1350, [(-14), var1006, 31, var322, 36, var1006, var2178, (-128), var1006, var2178], (false, [var796, var536, var536, (), (), (), var2592, (), var796, var796])), var1022, var2900, var1837);
                ();
                Option<Option<(Bool, Array<Unit>)>>.Some(Option<(Bool, Array<Unit>)>.Some(var429))
            
            case _ => 
                var3160;
                if (var2864) { var3180 } else { Option<Array<Int64>>.None } ;
                Option<Option<(Bool, Array<Unit>)>>.None
            
        }
    } finally { // block id: 3185
        var778 / ((var563) | 1);
        let var3216 : Int64 = Int64((-78));
        var var3235 : (Range<UInt32>, String, Range<Int16>, Range<UInt16>, (Range<UInt64>, Range<UInt8>, Rune, Array<Int64>, Unit, Array<Int64>, (Bool, Array<Unit>)), Array<UInt32>, Int8, (Bool, Array<Unit>), Rune) = ((UInt32(6)&127..=UInt32(192)&127:(Int64(Int32(51))|1)), "bUw83R%I-7", (Int16(UInt16(UInt16(54)))&127..=Int16(Int16(Int16(6)))&127:((-37)|1)), (UInt16(85)&127..=UInt16(101)&127:(-9)|1), ((UInt64(179)&127..=UInt64(18)&127:(-14)|1), (UInt8(154)&127..=UInt8(230)&127:(-74)|1), 'r', [Int64(Int8(93)), Int64(UInt16(39)), Int64((-69)), Int64(Int8(95)), Int64(UInt16(234)), 34, Int64(UInt64(117)), 76, 34, (-11)], (), [Int64(UInt32(249)), 82, Int64(Int8(57)), (-58), 42, 102, Int64(UInt16(41)), 87, Int64(UInt16(156)), Int64(Int32(51))], (true, [(), (), (), (), (), (), (), (), (), ()])), [UInt32(25), UInt32(187), UInt32(248), UInt32(148), UInt32(118), UInt32(130), UInt32(146), UInt32(40), UInt32(75), UInt32(70)], Int8(UInt8(221)), (false, [(), (), (), (), (), (), (), (), (), ()]), 'h');
        if (true) { (var2526, var1837, var3195, (var2544&127..=var2544&127:(var331|1)), ((UInt64(148)&127..=UInt64(210)&127:78|1), (UInt8(43)&127..UInt8(152)&127:35|1), var2595, [49, (-62), (-20), (-108), (-13), 115, (-125), (-94), 72, 90], (), [var322, var3216, var3220, (-16), 92, 30, var3220, var322, var322, var322], var429), [UInt32(238), UInt32(87), UInt32(70), UInt32(127), UInt32(20), UInt32(254), UInt32(245), UInt32(48), UInt32(206), UInt32(134)], var919, var429, var2629) } else { var3235 } ;
        (Option<Int8>.Some(Int8(-106)) as Option<(Bool, Array<Unit>)>)
    }
}


func func1821(param1822 : Option<Option<Unit>>) : Option<Array<Int64>> { // block id: 1823
    var var1842 : ?(UInt32, Unit, String, Array<Unit>, Option<Array<Int64>>) = Option<(UInt32, Unit, String, Array<Unit>, Option<Array<Int64>>)>.Some((UInt32(UInt16(Int16(18))), (), ###"#DLO_%eRWH"###, [(), (), (), (), (), (), (), (), (), ()], Option<Array<Int64>>.Some([117, (-54), (-28), (-44), (-49), (-76), (-7), (-16), 50, 42])));
    var var1868 : (UInt32, Unit, String, Array<Unit>, Option<Array<Int64>>) = (UInt32(147), (), "&/5>%BR2Sd", [(), (), (), (), (), (), (), (), (), ()], Option<Array<Int64>>.Some([Int64(UInt32(188)), 65, (-76), Int64(UInt8(182)), 70, Int64(Int32(-54)), Int64(Int32(-76)), Int64(UInt16(137)), Int64(UInt64(118)), Int64(UInt32(89))]));
    (if (false) { Option<(UInt32, Unit, String, Array<Unit>, Option<Array<Int64>>)>.Some((UInt32(181), var536, var1837, [(), (), (), (), (), (), (), (), (), ()], Option<Array<Int64>>.None)) } else { var1842 }  ?? try { // block id: 1864
        if (var154) { var1868 } else { var1868 } 
    } finally { // block id: 1904
        var1868
    })[1];
    let var1919 : Range<Int64> = (54&127..=(-101)&127:117|1);
    let var1926 : ?Int8 = ((UInt32(138)&127..=UInt32(29)&127:58|1) as Int8);
    var var1930 : ?Array<Int64> = (Option<Option<Unit>>.Some(((Int32(-85) as (UInt32, Unit, String, Array<Unit>, Option<Array<Int64>>)) as Unit)) as Array<Int64>);
    if (if (var1018) { var429 } else { (var154, [(), (), (), (), (), (), (), (), (), ()]) } [0]) { try { // block id: 1917
        var1919;
        if (true) { Option<Int8>.Some(var919) } else { var1926 } ;
        var1930
    } finally { // block id: 1936
        var423 = UInt32(27);
        let var1941 : ?Int8 = ([Float32(-101.0), Float32(-10.0), Float32(112.0), Float32(-91.0), Float32(-86.0), Float32(-91.0), Float32(Float32(32.0)), Float32(Float32(Float32(-1.0))), Float32(Float32(Float32(-120.0))), Float32(91.0)] as Int8);
        var1941;
        Option<Array<Int64>>.Some([(-29), (-37), 2, 19, (-46), (-120), (-32), 110, (-20), (-112)])
    } } else { match (if (var154) { Class673(namedParam1976 : (var536, var154, (UInt8(200)&127..UInt8(9)&127:(-93)|1))) } else { Class673() } ) {
        case _ : UInt64 => 
            if (var1018) { Option<Array<Int64>>.None } else { var1930 } 
        
        case caseVar3781 => 
            var3784;
            ();
            Option<Array<Int64>>.Some([120, (-104), (-31), 109, (-60), (-39), 118, 75, 49, (-13)])
        
        case _ => 
            var3793;
            (var1022, var1760, true, var1868, (Int8(-72)&127..Int8(-95)&127:71|1), var3784);
            var1930
        
    } } 
}

public func func1519(param1520 : Unit) : UInt8 { // block id: 1521
    let var1685 : ?Int8 = Option<Int8>.Some(Int8(91));
    let var1741 : Bool = ((((UInt32(73)&127..=UInt32(185)&127:((-29)|1)) is (Range<UInt64>, Range<UInt8>, Rune, Array<Int64>, Unit, Array<Int64>, (Bool, Array<Unit>))), [(), (), (), (), (), (), (), (), (), ()]) is Option<Int8>);
    func func1524(optionalParam1525 ! : Option<Option<Unit>> = Option<Option<Unit>>.None, optionalParam1527 ! : (Array<Unit>, Unit, (Range<UInt64>, Range<UInt8>, Rune, Array<Int64>, Unit, Array<Int64>, (Bool, Array<Unit>)), (Range<UInt64>, Range<UInt8>, Rune, Array<Int64>, Unit, Array<Int64>, (Bool, Array<Unit>)), ((Range<UInt64>, Range<UInt8>, Rune, Array<Int64>, Unit, Array<Int64>, (Bool, Array<Unit>)), Float64, Bool, (UInt32, Unit, String, Array<Unit>, Option<Array<Int64>>), Range<Int8>, UInt16), String) = ([(), (), (), (), (), (), (), (), (), ()], (), ((UInt64(17)&127..=UInt64(173)&127:(-125)|1), (UInt8(170)&127..=UInt8(Int8(-10))&127:((-120)|1)), '8', [116, 75, 6, (-92), (-38), (-40), 81, 2, (-20), 103], (), [57, 82, 77, 24, (-72), (-117), 44, (-73), (-32), (-127)], (false, [(), (), (), (), (), (), (), (), (), ()])), ((UInt64(UInt16(105))&127..=UInt64(142)&127:(Int64(Int16(-54))|1)), (UInt8(Int8(-16))&127..=UInt8(8)&127:(Int64(UInt8(253))|1)), 't', [83, 125, 41, (-26), 93, (-99), (-85), 51, (-125), 17], (), [109, Int64(UInt64(41)), (-126), 38, Int64(UInt16(126)), Int64(UInt16(224)), (-60), Int64(UInt8(90)), (-95), Int64(UInt64(182))], (((UInt8(16)&127..=UInt8(213)&127:70|1) is Int32), [(), (), (), (), (), (), (), (), (), ()])), (((UInt64(224)&127..=UInt64(9)&127:14|1), (UInt8(137)&127..UInt8(196)&127:((-11)|1)), 'x', [(-35), (-31), 18, 94, (-117), 22, (-106), 32, 55, (-85)], (), [125, 103, (-90), (-115), (-27), (-118), (-4), (-126), (-59), (-73)], (true, [(), (), (), (), (), (), (), (), (), ()])), Float64(Float64(Float32(31.0))), true, (UInt32(Int32(-125)), (), "\"?$xD~dyB3", [(), (), (), (), (), (), (), (), (), ()], (Option<Int8>.None as Array<Int64>)), (Int8(-112)&127..Int8(66)&127:(-39)|1), UInt16(108)), """
@a=xp
O@QFj
""")) : Class673 { // block id: 1660
        let var1693 : UInt8 = UInt8(UInt8(185));
        var var1726 : Array<Unit> = Array<Unit>(10){ i => () };
        match (match (func195((Int8(-106)&127..=Int8(51)&127:26|1))) {
                case caseVar1667 : Rune => 
                    [var796, var560, (), var796, param1520, (), var536, (), var1350, var536];
                    if (true) { Option<Int8>.Some(Int8(22)) } else { var1685 } 
                
                case 53.0 | -85.0 | 125.0 | 98.0 => 
                    var1693 << ((UInt8(84)) & 7);
                    if (false) { (var154, [(), param1520, (), var796, (), (), (), (), var796, ()]) } else { var429 } ;
                    var1685
                
                case 80.0 | 26.0 => 
                    ();
                    var1685
                
                case 14.0 => 
                    var1685
                
                case _ => 
                    var1726;
                    var1350;
                    if (var1741) { Option<Int8>.Some(var919) } else { var1685 } 
                
            }) {
            case caseVar1755 => 
                ();
                var154;
                var1760
            
            case _ => 
                var1767--;
                44.0
            
            case caseVar1774 => 
                param1520;
                72.0
            
            case _ : Range<Int16> => 
                (var423&127..var423&127:((-77)|1));
                ();
                var1760
            
            case _ => 
                var560;
                var1760
            
        };
        match ((Int16(-5)&127..=Int16(6)&127:(-76)|1)) {
            case caseVar1795 => 
                Class673()
            
            case _ : Unit => 
                var536;
                var1767++;
                var1513
            
            case _ => 
                Class673()
            
        }
    }
;
    var var3858 : Range<Int64> = ((-6)&127..(-65)&127:(-117)|1);
    func1524().func1809(namedParam1810 : var3858, namedParam1811 : (var2106 as (Bool, Array<Unit>)), namedParam1812 : UInt64(UInt32(79)))
}

func func1507(param1508 : Option<Int8>) : Range<UInt64> { // block id: 1509
    var loopTimeVar3868 : Range<UInt64> = (UInt64(Int16(30))&127..=UInt64(UInt64(UInt16(UInt8(39))))&127:(Int64(UInt16(Int8(83)))|1));
    var1513.var1516 ^= (for (i in loopTimeVar3868 where var1018) {

    }|>func1519);
    (((var3220 as (UInt32, Unit, String, Array<Unit>, Option<Array<Int64>>)) as Range<UInt64>) ?? var3884)
}

func func3902(param137 : Int16) : Bool { // block id: 138
    try (resource = Class673()) { // block id: 140

    } finally { // block id: 141

    };
    let var188 : (Float32) -> Bool = { lambdaParameter191 : Float32 => false };
    ((Int8(-125)&127..=Int8(4)&127:(-23)|1)|>{ lambdaParameter460 : Range<Int8> => Float32(-69.0) })|>var188
}

func func837(param838 : Int16) : Option<Option<Unit>> { // block id: 839
    let var849 : UInt8 = UInt8(45);
    let var909 : (UInt32, Unit, String, Array<Unit>, Option<Array<Int64>>) = (UInt32(136), (), ###"PxC=7l/WaP"###, [(), (), (), (), (), (), (), (), (), ()], ([(-102), (-67), (-25), 104, (-103), 55, 40, 111, 20, (-92)] as Array<Int64>));
    let var1072 : (Float64) -> Option<Option<Unit>> = func940;
    try (resource = Class673()) { // block id: 841
        (var560, true, (var849&127..UInt8(19)&127:((-87)|1)))[0];
        [UInt32(116), UInt32(167), UInt32(22), UInt32(49), UInt32(12), UInt32(215), UInt32(237), UInt32(19), UInt32(151), UInt32(155)][1];
        Option<Unit>.None.getOrThrow()
    } catch (e: Exception) { // block id: 860
        ((UInt64(60)&127..UInt64(86)&127:75|1), (UInt8(193)&127..=UInt8(85)&127:79|1), 'W', var868, (), [var331, 9, var322, var322, var322, (-97), 104, 73, var322, var322], var429)[2];
        let var925 : Unit = ();
        if (var154) { // block id: 904
            var var906 : Int8 = Int8(76);
            var906;
            var909;
            var919 <<= ((Int8(45)) & 7)
        } else if (var154) { // block id: 923
            var925;
            var919 <<= ((Int8(-34)) & 7);
            var536
        };
        var var933 : ((Int16) -> Bool) -> Unit = func566;
        func935|>var933
    } finally { // block id: 938
        var var1075 : Float64 = Float64(Float64(107.0));
        var1075|>var1072;
        Class673.var1082
    };
    func940(Aggregate1086.func1091([UInt32(61), UInt32(5), UInt32(146), UInt32(70), UInt32(0), UInt32(221), UInt32(164), UInt32(16), UInt32(206), UInt32(159)]))
}


func func828() : Unit { // block id: 829
    var var3910 : (Int16) -> Option<Option<Unit>> = func837;
    let var3915 : Range<Int32> = (Int32(-14)&127..Int32(44)&127:22|1);
    let var3936 : Bool = false;
    match (((Int16(68)|>var3910) ?? (var3915 as Unit))) {
        case caseVar3919 => 
            [UInt32(150), UInt32(178), UInt32(52), UInt32(79), UInt32(91), UInt32(7), UInt32(112), UInt32(93), UInt32(147), UInt32(193)];
            if (var1476) { var429 } else { var429 } 
        
        case caseVar3928 : Option<Option<(Bool, Array<Unit>)>> => 
            var429
        
        case _ => 
            ();
            if (var3936) { var429 } else { var429 } 
        
    };
    var var3945 : Bool = false;
    var var4018 : Int16 = Int16(UInt16(16));
    (try { // block id: 3942
        if (var3945) { [Float32(-98.0), Float32(21.0), Float32(46.0), Float32(-5.0), Float32(88.0), Float32(71.0), Float32(106.0), Float32(-42.0), Float32(-117.0), Float32(81.0)] } else { [var1134, Float32(-45.0), Float32(-33.0), Float32(-32.0), Float32(-16.0), Float32(53.0), Float32(84.0), Float32(20.0), Float32(57.0), Float32(55.0)] } ;
        var3784 & var3784
    } catch (_) { // block id: 3962
        let var3964 : Unit = ();
        var3964;
        UInt16(128)
    } finally { // block id: 3967
        if (true) { var3971 } else { [var3915, (var1767&127..Int32(123)&127:((-81)|1)), (var1767&127..=Int32(18)&127:(var2178|1)), var3915, (Int32(18)&127..=Int32(119)&127:(-21)|1), var3986, var3915, var3915, var3915, (Int32(3)&127..=Int32(56)&127:24|1)] } ;
        var3784 + UInt16(139)
    }&127..=UInt16(86) - UInt16(UInt8(163))&127:(if (try { // block id: 4001
        ();
        if (true) { 'V' } else { '4' } ;
        false
    } catch (_) { // block id: 4008
        var1018
    } finally { // block id: 4010
        Int8(49) < Int8(77)
    }) { // block id: 4014
        Option<Array<Int64>>.None;
        var4018 |= Int16(6);
        var1006 & var1006
    } else { // block id: 4025
        var var4028 : Int64 = Int64(UInt8(194));
        var4028 >> (((-74)) & 7)
    }|1));
    let var4045 : Option<Unit> = Option<Unit>.None;
    var var4050 : ?(Float32, UInt16, String, UInt16, UInt8, UInt8) = Option<(Float32, UInt16, String, UInt16, UInt8, UInt8)>.None;
    (try { // block id: 4038
        var var4041 : UInt64 = UInt64(230);
        var4041++;
        [(-5), (-80), 29, (-90), (-105), 5, 58, (-27), 105, 33];
        var4045
    } finally { // block id: 4047
        var1350;
        var4050;
        if (var1018) { var4045 } else { Option<Unit>.Some(()) } 
    } ?? var536)
}

func func812(param813 : Int32) : Int8 { // block id: 814
    var var820 : (Int16) -> Bool = { lambdaParameter823 : Int16 => ((Int32(60)&127..Int32(19)&127:(-110)|1) is Unit) };
    var820|>func566;
    func828();
    (if ((!false)) { (var1837 as Int8) } else { Option<Int8>.None }  ?? -Int8(-96))
}

func func761(param762 : Int8, optionalParam763 ! : Range<UInt32> = (UInt32(6)&127..=UInt32(101)&127:(-62)|1), namedParam765 ! : Option<(Float32, UInt16, String, UInt16, UInt8, UInt8)>) : Int8 { // block id: 766
    ();
    var var4084 : ?Int8 = ((Aggregate1086() as (UInt32, Unit, String, Array<Unit>, Option<Array<Int64>>)) as Int8);
    var var4185 : Range<UInt16> = (UInt16(Int8(101))&127..UInt16(119)&127:((-28)|1));
    var var4196 : Option<Option<Range<UInt64>>> = (((Float64(121.0) as Int8) as Unit) as Option<Range<UInt64>>);
    match {
        case if (var154) { // block id: 772
        Int8(90) * param762;
        var778 <<= ((var778) & 7);
        (true, [(), (), (), (), (), (), (), (), (), ()])
    } else if (false) { // block id: 786
        (false, [var536, var536, var536, var560, var560, var796, var796, var536, (), var560])
    } else { // block id: 802
        if (var154) { var429 } else { (var154, [(), (), (), (), (), (), (), (), (), ()]) } 
    }[0] => 
        var1767|>func812
        case if (false) { // block id: 4071
        var560;
        var1760 >= (-39.0)
    } else { // block id: 4076
        Int16(-44) * Int16(-55);
        var1018
    } => 
        match (var4084) {
            case _ => 
                var var4097 : ?(Bool, Array<Unit>) = Option<(Bool, Array<Unit>)>.Some((((UInt64(167)&127..UInt64(106)&127:(-54)|1) is Array<Option<Int8>>), [(), (), (), (), (), (), (), (), (), ()]));
                if (var4093) { var4097 } else { var4097 } ;
                var3971;
                let var4151 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
                if (var1476) { var1022 } else { ((UInt64(215)&127..=UInt64(32)&127:122|1), (var2517&127..var2510&127:(84|1)), 'C', [74, var2178, var2178, var2178, var322, 95, (-36), var1006, var2178, (-46)], var1350, [var1006, 17, var2178, 62, 116, (-19), var2178, 107, var3220, 68], (var1018, var4151)) } 
            
            case _ => 
                (var3884, var364, '1', [53, (-90), 116, (-109), 82, 121, (-117), 41, 6, (-23)], (), [(-118), (-53), (-88), (-113), (-34), 33, 4, var322, var1006, (-34)], (var1476, [(), (), (), (), (), (), (), (), (), ()]))
            
        };
        if (true) { Option<Option<Option<(Bool, Array<Unit>)>>>.None } else { Option<Option<Option<(Bool, Array<Unit>)>>>.None } ;
        Int8(UInt8(185))
        case _ => 
        var3036;
        match (var4185) {
            case caseVar4193 => 
                var4196;
                ()
            
            case _ => 
                var560;
                ()
            
        };
        if (var1018) { // block id: 4209
            var919 % ((Int8(81)) | 1)
        } else { // block id: 4213
            ();
            Int8(78)
        }
    }
}

public func func684(param685 : UInt8) : Int8 { // block id: 686
    var loopTimeVar700 : Int64 = 0;
    while ((if ((var560 is Rune)) { // block id: 691
        ();
        UInt8(202) == UInt8(196)
    } else { // block id: 696
        false
    }) && loopTimeVar700 < 100 ) {
        loopTimeVar700++;

    };
    var var708 : ?Int8 = ((Int32(UInt32(42))&127..Int32(69)&127:(Int64(Int8(-27))|1)) as Int8);
    let var722 : ?Int8 = ((UInt16(Int8(91)), UInt32(48), (Int8(-72)&127..Int8(-19)&127:69|1), [Float32(-8.0), Float32(Float32(58.0)), Float32(Float32(107.0)), Float32(Float32(-68.0)), Float32(-20.0), Float32(-3.0), Float32(Float32(19.0)), Float32(-91.0), Float32(Float32(107.0)), Float32(Float32(-75.0))], Int16(Int16(47)), UInt32(Int8(10)), Int16(Int16(9)), Int64(Int32(Int32(-39))), ()) as Int8);
    var var757 : Int8 = Int8(-88);
    (var708 ?? (var722 ?? var757)) + (func761(Int8(92), optionalParam763 : (UInt32(137)&127..=UInt32(4)&127:(-128)|1), namedParam765 : Option<(Float32, UInt16, String, UInt16, UInt8, UInt8)>.Some((Float32(-67.0), UInt16(46), var1837, var3784, var4225, var2510))) / ((Int8(97)) | 1))
}

func func668(param669 : Range<UInt16>) : Option<Unit> { // block id: 670
    let var677 : Class673 = Class673();
    var loopTimeVar4287 : Int64 = 0;
    while ((var677.var680) && loopTimeVar4287 < 100 ) {
        loopTimeVar4287++;
        var2517|>func684;
        let var4244 : Bool = false;
        var var4251 : Bool = (Option<(UInt32, Unit, String, Array<Unit>, Option<Array<Int64>>)>.None is (Float32, UInt16, String, UInt16, UInt8, UInt8));
        var var4270 : ?Array<Int64> = ([UInt32(188), UInt32(17), UInt32(77), UInt32(33), UInt32(108), UInt32(144), UInt32(177), UInt32(236), UInt32(116), UInt32(138)] as Array<Int64>);
        match ([true, true, false, true, true, false, false, true, false, false]) {
            case _ : (Float32, UInt16, String, UInt16, UInt8, UInt8) => 
                (var2592, true, (UInt8(14)&127..UInt8(1)&127:97|1));
                if (var4244) { Option<((Range<UInt64>, Range<UInt8>, Rune, Array<Int64>, Unit, Array<Int64>, (Bool, Array<Unit>)), Float64, Bool, (UInt32, Unit, String, Array<Unit>, Option<Array<Int64>>), Range<Int8>, UInt16)>.Some((var1022, var1760, var4251, (var423, var796, """
#A,i-
}\"e@V
""", [(), (), (), var560, var560, (), (), (), (), var560], var4270), var1423, var4275)) } else { Option<((Range<UInt64>, Range<UInt8>, Rune, Array<Int64>, Unit, Array<Int64>, (Bool, Array<Unit>)), Float64, Bool, (UInt32, Unit, String, Array<Unit>, Option<Array<Int64>>), Range<Int8>, UInt16)>.None } ;
                var2517
            
            case _ => 
                var3986;
                UInt8(114) ^ UInt8(5)
            
        }
    };
    var3793
}

public func func540<T0>() : Range<Int64> { // block id: 541
    let var553 : Float32 = Float32(-51.0);
    let var572 : ((Int16) -> Bool) -> Unit = func566;
    ((try { // block id: 549
        var536;
        var553 ** Float32(Int32(var553) & 3);
        UInt64(116)
    } finally { // block id: 557
        var536;
        var560;
        var563
    } as Unit) ?? ({ lambdaParameter578 : Int16 => let var653 : Bool = true; match ((UInt32(184)&127..=UInt32(155)&127:(-117)|1)) {
        case _ => 
            if (true) { [var154, var154, var154, true, false, var154, false, var154, var154, var154] } else { var601 } 
        
        case caseVar635 : Bool => 
            if (false) { [(-75), 15, (-48), (-124), (-65), (-71), (-21), 126, 16, 25] } else { [(-79), (-29), 120, (-99), var322, (-96), 41, var322, 122, (-11)] } ;
            if (var653) { [true, true, false, false, false, false, true, true, false, true] } else { var601 } 
        
        case _ => 
            [true, false, false, true, false, true, true, false, false, true]
        
    }[0] }|>var572));
    func func663(param664 : Option<(Bool, Array<Unit>)>, namedParam665 ! : Int8) : Option<Unit> { // block id: 666
        try { // block id: 4291
            ();
            ();
            (UInt16(159)&127..UInt16(35)&127:97|1)
        } finally { // block id: 4295
            [var1476, false, false, true, var1018, var4093, var1018, false, false, var4093];
            if (var1018) { (UInt16(0)&127..UInt16(236)&127:(-83)|1) } else { (UInt16(120)&127..UInt16(111)&127:(94|1)) } 
        }|>func668
    }
;
    (func663(match (Option<((Range<UInt64>, Range<UInt8>, Rune, Array<Int64>, Unit, Array<Int64>, (Bool, Array<Unit>)), Float64, Bool, (UInt32, Unit, String, Array<Unit>, Option<Array<Int64>>), Range<Int8>, UInt16)>.None) {
        case caseVar4318 => 
            if (var154) { Option<(Bool, Array<Unit>)>.None } else { Option<(Bool, Array<Unit>)>.None } ;
            if (false) { Option<(Bool, Array<Unit>)>.None } else { Option<(Bool, Array<Unit>)>.Some((var4093, [(), (), (), (), (), (), (), (), (), ()])) } 
        
        case caseVar4333 => 
            if (true) { var3793 } else { var3793 } ;
            if (true) { 'J' } else { '1' } ;
            Option<(Bool, Array<Unit>)>.None
        
        case _ => 
            var var4347 : ?(Bool, Array<Unit>) = Option<(Bool, Array<Unit>)>.None;
            var4347
        
    }, namedParam665 : match ((var1837, (var536, true, (UInt8(30)&127..var2510&127:((-5)|1))), var2133)) {
        case _ : UInt8 => 
            var2853
        
        case (caseVar4366,_ : (Range<UInt64>, Range<UInt8>, Rune, Array<Int64>, Unit, Array<Int64>, (Bool, Array<Unit>)),_ : Option<(UInt32, Unit, String, Array<Unit>, Option<Array<Int64>>)>) => 
            var2853
        
        case _ => 
            if (var154) { var214 } else { (var553, UInt16(206), "<Y(o`fgM>a", UInt16(31), UInt8(192), var2517) } ;
            ();
            Int8(-85)
        
    }) ?? (var1760 = 1.0));
    var var4403 : Rune = 'C';
    let var4406 : Array<Int64> = [45, 27, 4, 50, 39, (-59), (-17), (-30), 20, (-57)];
    var var4451 : ((Range<UInt64>, Range<UInt8>, Rune, Array<Int64>, Unit, Array<Int64>, (Bool, Array<Unit>)), Int64, Range<Int8>, Option<((Range<UInt64>, Range<UInt8>, Rune, Array<Int64>, Unit, Array<Int64>, (Bool, Array<Unit>)), Float64, Bool, (UInt32, Unit, String, Array<Unit>, Option<Array<Int64>>), Range<Int8>, UInt16)>) = (((UInt64(85)&127..UInt64(157)&127:(-28)|1), (UInt8(147)&127..UInt8(147)&127:(-61)|1), 'q', [(-118), Int64((-127)), 37, Int64((-73)), 33, (-79), Int64(Int8(26)), 120, Int64(Int16(-115)), Int64(UInt64(204))], (), [Int64(UInt8(113)), (-123), 29, (-49), Int64(Int16(-13)), Int64(UInt16(5)), Int64(UInt16(207)), 11, Int64(104), (-83)], (((UInt16(72)&127..UInt16(84)&127:(30|1)) is (Option<Option<(Bool, Array<Unit>)>>) -> Array<Unit>), [(), (), (), (), (), (), (), (), (), ()])), Int64(UInt8(224)), (Int8(UInt8(165))&127..Int8(116)&127:(Int64(Int32(Int16(102)))|1)), (((Int16(59)&127..Int16(-95)&127:(12|1)) as Array<Bool>) as ((Range<UInt64>, Range<UInt8>, Rune, Array<Int64>, Unit, Array<Int64>, (Bool, Array<Unit>)), Float64, Bool, (UInt32, Unit, String, Array<Unit>, Option<Array<Int64>>), Range<Int8>, UInt16)));
    if (try { // block id: 4388
        var1837 = var1837;
        false || var1476
    } finally { // block id: 4395
        var154
    }) { match (((var3884, (UInt8(92)&127..UInt8(77)&127:(-125)|1), var4403, var4406, var1350, [(-125), (-9), (-89), 84, 73, (-72), (-6), 99, (-108), 74], (true, [var4414, var796, var4414, (), (), var560, var2592, (), (), var2592])), 14, (Int8(115)&127..Int8(49)&127:(-33)|1), var4428)) {
        case ((_,caseVar4432,_,_,_,_,(_ : Array<Bool>,_ : Option<Option<Range<UInt64>>>)),_,caseVar4433,_ : (UInt32, Unit, String, Array<Unit>, Option<Array<Int64>>)) => 
            ();
            ((-39)&127..(-122)&127:(var322|1))
        
        case (_ : ((Range<UInt64>, Range<UInt8>, Rune, Array<Int64>, Unit, Array<Int64>, (Bool, Array<Unit>)), Float64, Bool, (UInt32, Unit, String, Array<Unit>, Option<Array<Int64>>), Range<Int8>, UInt16),caseVar4442,caseVar4443 : (String, (Unit, Bool, Range<UInt8>), Array<Unit>),_) => 
            var919 += Int8(56);
            if (var1018) { var4451 } else { var4451 } ;
            (93&127..=(-31)&127:44|1)
        
        case ((_ : Int8,caseVar4516,_ : Option<Unit>,_,_ : Array<Bool>,caseVar4517,(caseVar4518 : Option<Unit>,caseVar4519)),caseVar4520,_,caseVar4521 : Range<Int16>) => 
            ();
            (var2178&127..=(-48)&127:(var331|1))
        
        case caseVar4530 : UInt8 => 
            ();
            (var3220&127..=var322&127:((-34)|1))
        
        case _ => 
            var796;
            let var4543 : Range<Int64> = ((-122)&127..(-97)&127:38|1);
            if (false) { var4543 } else { var4546 } 
        
    } } else { match (if (false) { (121&127..=48&127:(95|1)) } else { var4546 } ) {
        case _ => 
            ((-100)&127..(-107)&127:39|1)
        
        case caseVar4562 : Option<Option<Unit>> => 
            var var4565 : Array<Option<Int8>> = [(Option<(Bool, Array<Unit>)>.None as Int8), ([true, false, true, true, true, false, false, false, true, false] as Int8), (Aggregate1086() as Int8), Option<Int8>.Some(Int8(55)), ((((UInt64(253)&127..UInt64(58)&127:(25|1)), (UInt8(100)&127..UInt8(79)&127:55|1), 'a', [(-107), (-58), (-52), 62, (-38), (-32), 19, (-82), 86, (-55)], (), [(-33), (-107), 21, 2, (-69), (-37), 62, 26, 14, 84], (false, [(), (), (), (), (), (), (), (), (), ()])), Float64(Float32(-119.0)), false, (UInt32(118), (), "seta?Ob\\sL", [(), (), (), (), (), (), (), (), (), ()], Option<Array<Int64>>.None), (Int8(108)&127..Int8(96)&127:(26|1)), UInt16(165)) as Int8), Option<Int8>.Some(Int8(Int8(104))), Option<Int8>.Some(Int8(101)), Option<Int8>.None, ((UInt32(213)&127..=UInt32(91)&127:(-87)|1) as Int8), (Option<Unit>.Some(()) as Int8)];
            var4565;
            var4546
        
        case _ => 
            ();
            var4640;
            if (false) { (var4646&127..=103&127:((-24)|1)) } else { var4546 } 
        
    } } 
}

func func516(param517 : (Float32) -> Bool) : Range<Int64> { // block id: 520
    var var532 : Bool = false;
    match (if (true) { // block id: 524
            UInt32(232)
        } else { // block id: 526
            UInt32(156)
        }) {
        case _ => 
            var532 ||= var154;
            var536;
            92.0
        
    };
    func540<Option<Array<Int64>>>()
}

public func func4654(param144 : Float32) : Bool { // block id: 145
    match (Option<Array<Int64>>.Some([(-87), 8, (-55), 24, 17, (-8), (-105), (-107), (-111), (-102)])) {
        case _ => 
            var154 || true
        
        case _ => 
            Int16(-2) < Int16(-60)
        
        case caseVar175 => 
            let var179 : UInt64 = UInt64(UInt64(67));
            var179 <= UInt64(251)
        
        case _ => 
            var154
        
    }
}

public func func131(param132 : Range<UInt8>) : Bool { // block id: 133
    var var471 : Range<Int8> = (Int8(Int8(UInt8(UInt8(196))))&127..Int8(UInt8(148))&127:(Int64(Int16(Int16(-122)))|1));
    var var483 : Array<Float32> = Array<Float32>(10){ i => Float32(Float32(Float32(Float32(22.0)))) };
    var var507 : Int16 = Int16(71);
    var var4652 : ((Float32) -> Bool) -> Range<Int64> = func516;
    var loopTimeVar4658 : Int64 = 0;
    do {
        loopTimeVar4658++;
        func4654|>var4652
    } while ((((UInt16(95), var423, var471, var483, var507, var423, var507, var331, ())[4]|>func136)) && loopTimeVar4658 < 100 ) ;
    true
}

public func func126(param127 : Array<Int64>) : (Float32, UInt16, String, UInt16, UInt8, UInt8) { // block id: 128
    var var4702 : UInt32 = UInt32(156);
    let var4917 : Bool = false;
    if ((var364|>func131)) { // block id: 4662
        let var4665 : ?(Float32, UInt16, String, UInt16, UInt8, UInt8) = Option<(Float32, UInt16, String, UInt16, UInt8, UInt8)>.None;
        match (var4665) {
            case caseVar4669 => 
                if (false) { Aggregate1086() } else { Aggregate1086() } ;
                ();
                var var4683 : UInt8 = UInt8(148);
                (Float32(-109.0), UInt16(99), var1837, UInt16(167), UInt8(112), var4683)
            
            case _ => 
                var4225 *= var2510;
                var429;
                var214
            
        }
    } else if (false) { // block id: 4693
        var loopTimeVar4700 : Int64 = 0;
        while ((var1476) && loopTimeVar4700 < 100 ) {
            loopTimeVar4700++;
            var3528;
            [(), (), (), (), (), (), (), (), (), ()]
        };
        var4702;
        match ((UInt32(141), (), var1837, [var2592, (), (), (), (), (), var560, var1350, var796, ()], Option<Array<Int64>>.Some([var1006, 73, var3220, (-51), var1006, var3220, var322, (-78), var4646, var331]))) {
            case (_ : Array<Option<Int8>>,_ : (String, (Unit, Bool, Range<UInt8>), Array<Unit>),_,caseVar4734 : Option<Unit>,_) => 
                var214
            
            case caseVar4739 => 
                var4742;
                if (var1476) { var4750 } else { var4750 } ;
                if (var1018) { (Float32(106.0), var4275, var1837, var4275, UInt8(161), UInt8(46)) } else { (Float32(-113.0), UInt16(54), var1837, var3784, UInt8(25), UInt8(18)) } 
            
            case _ => 
                if (var154) { var214 } else { (Float32(-22.0), var4275, "8ncUWH8R`t", var4275, var2510, var2517) } 
            
        }
    } else { // block id: 4899
        try { // block id: 4901
            var1767 % ((Int32(24)) | 1);
            var560;
            true
        } finally { // block id: 4907
            Option<(Range<UInt32>, String, Range<Int16>, Range<UInt16>, (Range<UInt64>, Range<UInt8>, Rune, Array<Int64>, Unit, Array<Int64>, (Bool, Array<Unit>)), Array<UInt32>, Int8, (Bool, Array<Unit>), Rune)>.None;
            ();
            false
        };
        var560;
        let var4949 : (Float32, UInt16, String, UInt16, UInt8, UInt8) = (Float32(Float32(Float32(Float32(73.0)))), UInt16(UInt8(92)), "}kR;U-LfF|", UInt16(UInt16(127)), UInt8(UInt8(210)), UInt8(UInt8(180)));
        try { // block id: 4913
            ();
            if (var4917) { (Float32(-31.0), var4275, var1837, var3784, var2510, UInt8(33)) } else { var4927 } 
        } catch (_) { // block id: 4940
            (UInt8(75)&127..=var4225&127:(var2178|1));
            if (true) { var214 } else { var4949 } 
        } finally { // block id: 4964
            var1476 &&= var1476;
            ();
            var214
        }
    }
}

public func func114(namedParam115 ! : Range<Int16>, optionalParam116 ! : Int64 = Int64((-57)), namedParam119 ! : Range<UInt32>, optionalParam120 ! : Int32 = Int32(-16)) : Range<Int64> { // block id: 122
    var var4971 : (Array<Int64>) -> (Float32, UInt16, String, UInt16, UInt8, UInt8) = func126;
    ([74, (-109), (-32), (-95), (-120), 38, 77, (-36), (-62), (-120)]|>var4971)[3];
    (var1006&127..-var331&127:(var322|1))
}


public func func106(namedParam107 ! : (UInt32, Unit, String, Array<Unit>, Option<Array<Int64>>), optionalParam108 ! : Range<UInt32> = (UInt32(49)&127..=UInt32(238)&127:(-32)|1), optionalParam110 ! : Unit = ()) : (UInt32, Unit, String, Array<Unit>, Option<Array<Int64>>) { // block id: 112
    var var5029 : Range<UInt64> = (UInt64(UInt32(113))&127..=UInt64(UInt64(95))&127:((-59)|1));
    func114(namedParam115 : if ((!true)) { try { // block id: 4984
        var796;
        let var4987 : Range<Int16> = (Int16(UInt8(202))&127..=Int16(-51)&127:(Int64(UInt16(UInt16(UInt8(6))))|1));
        var4987
    } finally { // block id: 4996
        var var5002 : Int16 = Int16(-23);
        if (false) { (Int16(113)&127..=Int16(64)&127:78|1) } else { (var5002&127..=var5002&127:(var331|1)) } 
    } } else { try { // block id: 5007
        var5009
    } catch (e: Exception) { // block id: 5011
        var1350;
        var5009
    } finally { // block id: 5014
        Int16(95);
        var5009
    } } , optionalParam116 : if (if (var1476) { // block id: 5020
        true
    } else { // block id: 5022
        ();
        var154 && false
    }) { // block id: 5027
        var5029;
        var5037;
        -var322
    } else if (var1018) { // block id: 5056
        if (var154) { Option<Int8>.Some(Int8(117)) } else { Option<Int8>.None } ;
        (-100) >> ((var3220) & 7)
    } else { // block id: 5065
        (-86)
    }, namedParam119 : try { // block id: 5068
        optionalParam108
    } catch (e: Exception) { // block id: 5070
        var4225 <<= ((UInt8(228)) & 7);
        if (var4093) { Class673() } else { var1513 } ;
        optionalParam108
    } finally { // block id: 5079
        (UInt32(179)&127..=UInt32(96)&127:29|1)
    });
    var2133;
    try { // block id: 5083
        var var5091 : ??Unit = (Option<(Bool, Array<Unit>)>.None as Option<Unit>);
        (Option<Option<Option<Unit>>>.None ?? var5091);
        let var5102 : ?Array<Int64> = ([(), (), (), (), (), (), (), (), (), ()] as Array<Int64>);
        (var4640 ?? (var2500, var4414, "'y%ew`e1_@", [(), (), (), (), (), (), (), (), (), ()], var5102))
    } finally { // block id: 5105
        var loopTimeVar5110 : Range<UInt64> = (UInt64(UInt16(UInt16(205)))&127..UInt64(Int64(Int32(UInt16(17))))&127:(Int64(65)|1));
        for (i in loopTimeVar5110 where false) {
            ()
        };
        (var4640 ?? var2782)
    }
}

public func func61(param62 : Range<UInt16>) : Option<Array<Int64>> { // block id: 63
    try { // block id: 65
        Aggregate67.var72;
        var77[4]
    } catch (_) { // block id: 96
        var var101 : ?Array<Int64> = Option<Array<Int64>>.Some([75, (-126), 95, (-114), 48, 118, 122, (-5), (-40), (-60)]);
        if (true) { Option<Array<Int64>>.None } else { var101 } 
    } finally { // block id: 104
        func106(namedParam107 : (UInt32(198), var4414, "b.mE-}2zuH", var2133, Option<Array<Int64>>.Some([(-102), (-38), (-110), 53, (-68), (-24), (-121), (-124), 25, 67])));
        try (resource = Class39()) { // block id: 5132
            var4414;
            ()
        } catch (_) { // block id: 5135

        };
        var5137
    }
}


public func func32(param33 : Float32) : Array<Int64> { // block id: 34
    var loopTimeVar54 : Int64 = 0;
    while ((var43.var46[0]) && loopTimeVar54 < 100 ) {
        loopTimeVar54++;
        ()
    };
    let var5165 : Range<UInt16> = (UInt16(186)&127..=UInt16(229)&127:(-92)|1);
    ((match (var364) {
        case caseVar5162 => 
            var5165
        
        case caseVar5169 => 
            var1760 %= Float64((Int32(var1760)) | 1);
            if (var1018) { (var3784&127..=var4275&127:(var1006|1)) } else { (UInt16(190)&127..UInt16(235)&127:(var322|1)) } 
        
        case caseVar5186 => 
            ();
            var5165
        
        case _ => 
            var5165
        
    }|>func61) ?? (var5199 ?? if (false) { var2157 } else { [var331, (-57), var4646, var4646, var5211, var2178, 10, var5211, var2178, 114] } ))
}

main(): Int64 {
    try {
        let var12 : Aggregate8<Bool, Range<UInt64>> = Aggregate8<Bool, Range<UInt64>>();
        var12.var15;
        [(), (), (), (), (), (), (), (), (), ()][1];
        (var1108|>func32)[1]
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Class39 {

}

extend Aggregate1086 {

}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_unmatched_right_delimiter
// ASSERT: scan parse_expected_expr_or_decl_in
// ASSERT: scan parse_unexpected_declaration_in_scope
// ASSERT: scan parse_expected_left_brace
// ASSERT: scan parse_expected_case


