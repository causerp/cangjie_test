/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output


public let var22 : UInt64 = UInt64(177)
let var144 : Bool = true
public var var203 : Float64 = 13.0
var var216 : ?Unit = Option<Unit>.None
var var237 : (UInt16, Float64, Range<Int8>, Range<Int32>, Float32, Range<UInt16>) = (UInt16(UInt8(26)), (-92.0), (Int8(108)&127..Int8(-38)&127:(-56)|1), (Int32(66)&127..=Int32(120)&127:87|1), Float32(Float32(Float32(90.0))), (UInt16(254)&127..=UInt16(44)&127:((-69)|1)))
let var352 : (Int32, Range<UInt16>, Range<Int64>, Float32, Range<Int16>) = (Int32(97), (UInt16(159)&127..=UInt16(143)&127:(Int64(UInt32(7))|1)), ((-127)&127..=(-110)&127:51|1), Float32(Float32(Float32(75.0))), (Int16(UInt16(253))&127..=Int16(Int16(Int8(-13)))&127:((-5)|1)))
public var var373 : Int32 = Int32(-120)
public var var376 : Range<UInt16> = (UInt16(UInt16(UInt8(Int8(-123))))&127..=UInt16(68)&127:((-51)|1))
var var385 : Range<Int64> = (50&127..(-6)&127:(-7)|1)
public let var450 : Class29 = Class29()
public var var474 : Int8 = Int8(UInt8(27))
var var502 : Int64 = 62
let var505 : Bool = true
public let var593 : Array<UInt64> = [UInt64(203), UInt64(145), UInt64(205), UInt64(106), UInt64(62), UInt64(156), UInt64(220), UInt64(170), UInt64(213), UInt64(236)]
let var633 : ?Array<Option<Unit>> = Option<Array<Option<Unit>>>.None
let var646 : (Option<Unit>, Float32) = (Option<Unit>.None, Float32(Float32(Float32(Float32(-4.0)))))
public var var670 : String = """
t)RYH
%nAWO
"""
let var733 : (Array<UInt64>, (Float64, Int8, Float32, (Int32, Range<UInt16>, Range<Int64>, Float32, Range<Int16>), Bool, String), String, Array<Option<Unit>>) = ([UInt64(82), UInt64(188), UInt64(67), UInt64(UInt64(222)), UInt64(Int32(44)), UInt64(UInt8(218)), UInt64(98), UInt64(22), UInt64(Int8(-52)), UInt64(70)], ((-66.0), Int8(Int8(Int8(-21))), Float32(-49.0), (Int32(UInt8(55)), (UInt16(180)&127..UInt16(31)&127:(87|1)), (13&127..=80&127:58|1), Float32(4.0), (Int16(75)&127..=Int16(-50)&127:(-112)|1)), ((UInt64(154)&127..UInt64(174)&127:(97|1)) is (Int16, Range<Int16>, Class29, Int64)), ###"?OVe${var670}.yZ${var670}*${var670}f${var670}U"###), ###"l<?D${var670}2t0Hfq"###, [Option<Unit>.None, (Option<Int32>.None as Unit), Option<Unit>.None, (true as Unit), Option<Unit>.None, Option<Unit>.None, (() as Unit), Option<Unit>.None, (Option<Int64>.None as Unit), ([Option<(Int16, Range<Int16>, Class29, Int64)>.None, Option<(Int16, Range<Int16>, Class29, Int64)>.None, Option<(Int16, Range<Int16>, Class29, Int64)>.None, Option<(Int16, Range<Int16>, Class29, Int64)>.None, Option<(Int16, Range<Int16>, Class29, Int64)>.None, Option<(Int16, Range<Int16>, Class29, Int64)>.None, Option<(Int16, Range<Int16>, Class29, Int64)>.None, Option<(Int16, Range<Int16>, Class29, Int64)>.None, Option<(Int16, Range<Int16>, Class29, Int64)>.None, Option<(Int16, Range<Int16>, Class29, Int64)>.None] as Unit)])
public let var803 : ?Bool = ([(), (), (), (), (), (), (), (), (), ()] as Bool)
public let var808 : (Int16, Range<Int16>, Class29, Int64) = (Int16(-58), (Int16(UInt8(40))&127..Int16(Int8(68))&127:(Int64(UInt8(154))|1)), Class29(), (-20))
let var862 : Int64 = Int64(Int16(Int8(41)))
public var var882 : ?Unit = (Option<Class29>.None as Unit)
var var1143 : Unit = ()
public var var1222 : Float32 = Float32(105.0)
let var1279 : UInt64 = UInt64(Int32(-63))
let var1302 : UInt64 = UInt64(UInt16(115))
public var var1546 : Int16 = Int16(UInt8(199))
var var1564 : UInt16 = UInt16(UInt8(210))
public let var1641 : Array<Option<Bool>> = Array<Option<Bool>>(10){ i => Option<Bool>.None }
var var1785 : UInt64 = UInt64(68)
var var1933 : UInt8 = UInt8(95)
public var var2061 : Option<Aggregate894<Option<Array<Option<Unit>>>>> = (Option<(Int16, Range<Int16>, Class29, Int64)>.None as Aggregate894<Option<Array<Option<Unit>>>>)
public var var2299 : Range<UInt32> = (UInt32(Int8(-66))&127..=UInt32(Int16(74))&127:(16|1))
let var2471 : Bool = ((Int16(14)&127..Int16(44)&127:(Int64(UInt64(215))|1)) is Option<Bool>)
let var2534 : ?Unit = Option<Unit>.None
public var var2537 : Array<Option<Unit>> = Array<Option<Unit>>(10){ i => ((UInt32(91)&127..=UInt32(26)&127:(-73)|1) as Unit) }
public let var2618 : Array<Range<UInt64>> = [(UInt64(Int16(13))&127..UInt64(UInt8(Int8(-70)))&127:(Int64((-76))|1)), (UInt64(UInt32(151))&127..=UInt64(183)&127:(Int64(UInt64(146))|1)), (UInt64(Int64(Int32(8)))&127..UInt64(137)&127:(104|1)), (UInt64(231)&127..=UInt64(228)&127:(-44)|1), (UInt64(74)&127..UInt64(13)&127:(-113)|1), (UInt64(114)&127..UInt64(15)&127:109|1), (UInt64(211)&127..UInt64(224)&127:(Int64(1)|1)), (UInt64(0)&127..=UInt64(137)&127:40|1), (UInt64(236)&127..UInt64(19)&127:(-60)|1), (UInt64(UInt16(57))&127..=UInt64(UInt16(126))&127:(80|1))]
let var2949 : ?Range<UInt64> = (Option<Int32>.None as Range<UInt64>)
public var var3014 : Float64 = 72.0
var var3031 : (Float64, Int8, Float32, (Int32, Range<UInt16>, Range<Int64>, Float32, Range<Int16>), Bool, String) = ((-57.0), Int8(Int8(-3)), Float32(Float32(-67.0)), (Int32(-70), (UInt16(251)&127..=UInt16(UInt16(55))&127:(77|1)), ((-111)&127..(-9)&127:(124|1)), Float32(Float32(49.0)), (Int16(-57)&127..=Int16(17)&127:54|1)), (Int8(-48) is Bool), """
@${var670}\"`m${var670}g
!P+Vh
""")
let var3074 : String = "(+\\4wAv+=j${var670}"
var var3086 : (Int32, Range<UInt16>, Range<Int64>, Float32, Range<Int16>) = (Int32(-36), (UInt16(UInt8(144))&127..=UInt16(UInt8(53))&127:((-88)|1)), ((-58)&127..=(-109)&127:121|1), Float32(85.0), (Int16(Int8(UInt8(19)))&127..=Int16(-99)&127:(Int64(Int64(Int8(8)))|1)))
let var3144 : Rune = 'X'
public var var3323 : Bool = (Class29() is Bool)
public var var3328 : Range<UInt64> = (UInt64(Int8(Int8(Int8(63))))&127..=UInt64(66)&127:((-26)|1))
public var var3416 : UInt32 = UInt32(UInt16(137))
public let var3561 : Bool = false
public var var3641 : (Range<Int8>, Bool, Int8, Bool, Bool, Range<Int64>, String, UInt16, Float64) = ((Int8(Int8(UInt8(82)))&127..=Int8(Int8(-95))&127:((-39)|1)), (((Int8(-118)&127..=Int8(-72)&127:96|1), Int16(38), (UInt16(1), 4.0, (Int8(63)&127..Int8(27)&127:(122|1)), (Int32(30)&127..=Int32(52)&127:((-82)|1)), Float32(-108.0), (UInt16(217)&127..=UInt16(11)&127:(-84)|1)), ((Int32(125), (UInt16(120)&127..=UInt16(0)&127:((-36)|1)), (88&127..(-33)&127:(-15)|1), Float32(-118.0), (Int16(-59)&127..Int16(-115)&127:((-124)|1))) is (Int32, Range<UInt16>, Range<Int64>, Float32, Range<Int16>)), [(UInt64(127)&127..UInt64(97)&127:(124|1)), (UInt64(36)&127..UInt64(45)&127:(53|1)), (UInt64(36)&127..UInt64(66)&127:(-104)|1), (UInt64(179)&127..=UInt64(162)&127:(-94)|1), (UInt64(236)&127..UInt64(29)&127:(105|1)), (UInt64(93)&127..UInt64(0)&127:10|1), (UInt64(174)&127..UInt64(52)&127:(-5)|1), (UInt64(91)&127..UInt64(1)&127:(-86)|1), (UInt64(213)&127..=UInt64(235)&127:(-40)|1), (UInt64(195)&127..UInt64(36)&127:((-120)|1))], 118) is (Int8) -> Array<UInt64>), Int8(72), ([UInt64(247), UInt64(164), UInt64(140), UInt64(40), UInt64(Int16(26)), UInt64(Int16(-116)), UInt64(174), UInt64(133), UInt64(250), UInt64((-85))] is ((Option<Int32>) -> Option<Unit>) -> Bool), false, (Int64(Int32(28))&127..51&127:(12|1)), "p${var3074}f]z*Zb6e8", UInt16(UInt8(UInt8(Int8(-90)))), Float64(Float32(92.0)))
public var var3835 : Unit = ()
public var var3882 : UInt16 = UInt16(UInt8(Int8(Int8(-56))))
let var3894 : Float32 = Float32(Float32(Float32(Float32(-61.0))))
var var3916 : Bool = (Option<Class29>.None is UInt64)
public var var3944 : Array<Class29> = Array<Class29>(10){ i => Class29() }
var var3991 : Int64 = Int64(UInt32(224))
var var4018 : ?Class29 = Option<Class29>.None
public var var4040 : ?(Int16, Range<Int16>, Class29, Int64) = (Option<Bool>.None as (Int16, Range<Int16>, Class29, Int64))
public let var4091 : Option<Range<Int16>> = Option<Range<Int16>>.None
public let var4099 : ?Bool = (((Int8(48)&127..=Int8(14)&127:(-80)|1), (Option<Class29>.None is ((Int16, Range<Int16>, Class29, Int64), Array<Class29>) -> Bool), Int8(-2), (([Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None] is (Range<UInt16>) -> Option<Bool>) is Range<Int32>), true, ((-124)&127..119&127:34|1), """
ZoTw8${var670}
|Y\"${var670}tN${var670}
""", UInt16(117), Float64(Float32(-52.0))) as Bool)
let var4152 : Range<UInt8> = (UInt8(247)&127..=UInt8(131)&127:85|1)
public var var4174 : (Int32, Range<UInt16>, Range<Int64>, Float32, Range<Int16>) = (Int32(UInt16(UInt8(UInt8(69)))), (UInt16(120)&127..=UInt16(UInt16(UInt8(135)))&127:((-27)|1)), (Int64(Int32(UInt16(7)))&127..=99&127:(Int64(Int32(Int32(9)))|1)), Float32(88.0), (Int16(-37)&127..=Int16(-8)&127:0|1))
let var4252 : ?Int64 = (((Int16(-82), (Int16(-88)&127..Int16(-94)&127:(79|1)), Class29(), Int64(Int8(4))) as Range<Int16>) as Int64)
public var var4346 : UInt8 = UInt8(133)
var var4388 : Option<(Int16, Range<Int16>, Class29, Int64)> = Option<(Int16, Range<Int16>, Class29, Int64)>.None
let var4658 : UInt8 = UInt8(Int8(-96))
let var4833 : Int16 = Int16(-16)
public var var4872 : Array<Bool> = Array<Bool>(10){ i => true }
var var4947 : Unit = ()
public var var5079 : UInt64 = UInt64(Int64(Int8(Int8(-97))))
var var5129 : ?Unit = Option<Unit>.None
public func func18(param19 : Int32) : UInt64 { // block id: 20
    var22
}

public interface Interface32 {
    static func func581(param582 : Float32) : String { // block id: 583
        let var607 : Array<Option<Unit>> = [Option<Unit>.Some(()), Option<Unit>.Some(()), Option<Unit>.Some(()), (Option<Array<UInt64>>.None as Unit), ((UInt64(208)&127..=UInt64(189)&127:60|1) as Unit), (UInt32(134) as Unit), Option<Unit>.Some(()), Option<Unit>.None, Option<Unit>.None, ((Int8(80)&127..=Int8(-71)&127:(-35)|1) as Unit)];
        if (match (var203) {
            case 28.0 | 71.0 | 63.0 => 
                var593;
                ();
                true
            
            case _ => 
                var var601 : UInt64 = UInt64(Int8(UInt8(207)));
                var601++;
                false
            
        }) { var607 } else { (var633 ?? var607) } [2];
        func func638() : String { // block id: 639
            ###"8?g-I18ddI"###
        }
;
        func638()
    }
;
    func func453(namedParam454 ! : (Int16, Range<Int16>, Class29, Int64), namedParam455 ! : Array<Class29>) : Bool { // block id: 456
        let var465 : UInt16 = UInt16(UInt8(UInt8(Int8(Int8(38)))));
        var var572 : (Unit) -> Int8 = func486;
        var var575 : Unit = ();
        Int8((Float32(95.0), (var465, (-119.0), (var474&127..=var474&127:(51|1)), (Int32(-76)&127..Int32(-12)&127:(-77)|1), Float32(44.0), (UInt16(188)&127..UInt16(145)&127:79|1)), Int8(-109))[2]) >> ((((var575|>var572) + var474)) & 7);
        var var642 : Float32 = Float32(59.0);
        if (true) { func581(var642) } else { match (var646) {
            case _ => 
                if (var505) { Option<Int64>.None } else { Option<Int64>.None } ;
                var575;
                "_@k),OZoM\""
            
            case _ => 
                var502;
                (Int32(68)&127..=Int32(34)&127:19|1);
                if (false) { ###"@.s2NfNn'x"### } else { var670 } 
            
        } } ;
        { lambdaParameter845 : Option<Int32> => var216 }|>func673
    }
;
    static func func337() : Range<UInt64> { // block id: 338
        ();
        var var389 : Range<Int16> = (Int16(UInt8(119))&127..=Int16(79)&127:(Int64(Int32(34))|1));
        let var400 : Bool = (UInt8(116) is Range<Int32>);
        try { // block id: 348
            if (false) { var352 } else { (var373, var376, var385, Float32(115.0), var389) } 
        } finally { // block id: 396
            Float32(-112.0);
            if (var400) { var352 } else { (Int32(28), (UInt16(209)&127..=UInt16(216)&127:(-121)|1), var385, Float32(39.0), (Int16(109)&127..=Int16(-98)&127:101|1)) } 
        }[4]|>func341;
        var var421 : Option<Array<UInt64>> = Option<Array<UInt64>>.None;
        (UInt64(150)&127..(var421 ?? [UInt64(120), UInt64(217), UInt64(11), UInt64(29), UInt64(206), UInt64(242), UInt64(251), var22, UInt64(238), UInt64(97)])[3]&127:((match (Option<Array<Option<Unit>>>.None) {
            case _ => 
                if (var3916) { (UInt8(65)&127..UInt8(238)&127:(-59)|1) } else { var4152 } ;
                UInt16(135)
            
            case _ => 
                var373 &= var373;
                var3882
            
        }|>func436)|1))
    }
;
    func func4721(param4722 : Rune, namedParam4723 ! : Array<Bool>) : Float32 { // block id: 4724
        var var4730 : ?Unit = (UInt16(UInt8(Int8(77))) as Unit);
        let var4739 : Option<Option<Range<UInt64>>> = Option<Option<Range<UInt64>>>.None;
        try { // block id: 4726
            Option<Bool>.None;
            var4730.getOrThrow();
            if (true) { // block id: 4737
                var4739;
                (Int16(-72)&127..=Int16(95)&127:100|1);
                var1222
            } else if (var3561) { // block id: 4744
                var1143;
                -Float32(93.0)
            } else { // block id: 4748
                var203 = (-21.0);
                ();
                var3894 + var3894
            }
        } catch (_) { // block id: 4756
            if (var3916) { // block id: 4759
                if (true) { var633 } else { Option<Array<Option<Unit>>>.None } ;
                ();
                var3416 -= UInt32(52)
            };
            var var4782 : Bool = true;
            let var4795 : Array<Option<Unit>> = Array<Option<Unit>>(10){ i => Option<Unit>.None };
            if (var144) { // block id: 4770
                Option<Array<Option<Unit>>>.Some(var2537);
                var1143;
                Float32(-119.0) + var3894
            } else if (var3561) { // block id: 4778
                var1143;
                if (var4782) { (var593, (var3014, Int8(-94), var3894, var3086, true, var3074), "LL?q=46wCP", var4795) } else { (var593, (35.0, var474, var3894, (Int32(68), (UInt16(160)&127..=UInt16(137)&127:(-110)|1), (31&127..=41&127:19|1), Float32(79.0), (var4833&127..Int16(121)&127:((-62)|1))), true, "t.K9KgA+)I"), """
B5Uzi
};$H_
""", [Option<Unit>.Some(()), Option<Unit>.None, var882, Option<Unit>.None, var2534, Option<Unit>.None, var882, Option<Unit>.None, Option<Unit>.None, var2534]) } ;
                var1222
            } else { // block id: 4853
                var4152;
                var3894
            }
        } finally { // block id: 4856
            var loopTimeVar4860 : Range<UInt64> = (UInt64(5)&127..=UInt64(UInt64(UInt32(UInt32(2))))&127:((-97)|1));
            for (i in loopTimeVar4860 where false) {

            };
            Float32(Float32(88.0))
        }
    }

}

public open class Class29 <: Interface32 & Resource {
    public init() { // block id: 31

    }
;
    public static var var35 : UInt64 = UInt64(147);
    public var var129 : Bool = false;
    var var1941 : Unit = ();
    public static var var1957 : Int64 = (-64);
    public init(namedParam334 ! : Range<UInt8>) { // block id: 335
        func337();
        match (try { // block id: 4291
                ();
                var646
            } catch (_) { // block id: 4294
                ();
                (Int16(22)&127..var1546&127:(111|1));
                if (var3916) { var646 } else { var646 } 
            } finally { // block id: 4304
                let var4310 : ?Unit = ((((-17)&127..=Int64(UInt16(230))&127:(87|1)) as Array<Option<Unit>>) as Unit);
                if (var3323) { var646 } else { (var4310, var3894) } 
            }) {
            case (_ : Option<Int64>,caseVar4321) => 
                97.0
            
            case (_,caseVar4326 : Range<Int32>) => 
                var3835;
                ();
                var203 * var203
            
            case (_,_ : Option<Array<Unit>>) => 
                UInt64(46);
                var203 - var203
            
            case _ => 
                Option<Option<Int64>>.None;
                var1933 ^= var4346;
                (-60.0)
            
        }
    }

    public func isClosed(): Bool { return false }
    public func close(): Unit {}
}


func func12(param13 : Float32) : UInt64 { // block id: 14
    UInt64(227);
    var var44 : Int32 = Int32(UInt32(31));
    var var56 : Unit = ();
    ((Option<Int32>.None ?? var44)|>{ lambdaParameter26 : Int32 => Class29.var35 }) + try { // block id: 48
        UInt64(63) / ((var22) | 1);
        UInt64(177);
        var22
    } catch (_) { // block id: 54
        var56;
        UInt64(211)
    } finally { // block id: 59
        var56;
        var44;
        var22
    }
}


public func func168(param169 : Option<Int32>) : Option<Unit> { // block id: 170
    var var172 : Unit = ();
    var172;
    var var185 : Array<Class29> = Array<Class29>(10){ i => Class29() };
    var185[8];
    (match (var203) {
        case caseVar207 : Array<Class29> => 
            var var212 : ?Unit = Option<Unit>.Some(());
            if (var144) { var212 } else { var216 } 
        
        case _ : Rune => 
            Option<Int32>.None;
            ();
            if (false) { Option<Unit>.Some(var172) } else { var216 } 
        
        case _ => 
            var var231 : UInt8 = UInt8(69);
            var231;
            Option<Unit>.None
        
    }, var237[4])[0]
}



func func341(param342 : Range<Int16>) : Unit { // block id: 343

}



public func func486(param487 : Unit) : Int8 { // block id: 488
    var var491 : Int16 = Int16(75);
    var491--;
    var var513 : UInt16 = UInt16(245);
    let var534 : (Float64, Int8, Float32, (Int32, Range<UInt16>, Range<Int64>, Float32, Range<Int16>), Bool, String) = (Float64(Float32(Float32(Float32(-62.0)))), Int8(UInt8(Int8(Int8(44)))), Float32(Float32(29.0)), (Int32(Int8(-21)), (UInt16(4)&127..UInt16(17)&127:(-33)|1), (Int64(Int16(-81))&127..(-83)&127:(Int64(44)|1)), Float32(111.0), (Int16(86)&127..Int16(Int16(-7))&127:(Int64(UInt16(49))|1))), ((Option<Unit>.Some(()), Float32(Float32(100.0))) is Array<UInt64>), """
#2k;4
q1QA?
""");
    match {
        case ((var474&127..=Int8(98)&127:(var502|1)), var505, Int8(-20), true, var144, var385, """
AR^.K
amP%&
""", var513, 81.0)[4] => 
        let var521 : Float32 = Float32(87.0);
        Float32(59.0) * var521;
        var474
        case _ => 
        var474 >>= ((Int8(-6)) & 7);
        var474 | var474
    } << ((var534[1]) & 7)
}



func func725(param726 : (Int16, Range<Int16>, Class29, Int64)) : Option<Bool> { // block id: 727
    (var733[3][8] ?? ());
    var803
}

public func func673(param722 : Range<UInt16>) : Option<Bool> { // block id: 723
    var808|>func725
}

public func func673(param674 : (Option<Int32>) -> Option<Unit>) : Bool { // block id: 677
    let var692 : Range<UInt64> = (UInt64(225)&127..=UInt64(71)&127:51|1);
    try { // block id: 679
        var loopTimeVar684 : Int64 = 0;
        while ((var505) && loopTimeVar684 < 100 ) {
            loopTimeVar684++;

        };
        if (var144) { (var22&127..=UInt64(241)&127:(46|1)) } else { var692 } 
    } catch (_) { // block id: 694
        let var698 : Array<Unit> = Array<Unit>(10){ i => () };
        var698[2];
        [(UInt64(214)&127..UInt64(51)&127:(-110)|1), (UInt64(183)&127..=UInt64(104)&127:(-21)|1), (UInt64(245)&127..=UInt64(149)&127:(-117)|1), (UInt64(204)&127..=UInt64(247)&127:74|1), (UInt64(40)&127..UInt64(62)&127:(-8)|1), (UInt64(27)&127..=UInt64(57)&127:(-13)|1), (UInt64(108)&127..UInt64(251)&127:125|1), (UInt64(179)&127..UInt64(0)&127:121|1), (UInt64(87)&127..UInt64(163)&127:91|1), (UInt64(114)&127..=UInt64(103)&127:50|1)][4]
    };
    (func673((UInt16(113)&127..UInt16(144)&127:(-76)|1)) ?? ([Option<Bool>.Some(var144), var803, Option<Bool>.None, var803, Option<Bool>.Some(true), var803, Option<Bool>.Some(true), Option<Bool>.None, Option<Bool>.None, var803][6] ?? false))
}

public func func841(param169 : Option<Int32>) : Option<Unit> { // block id: 170
    var var172 : Unit = ();
    var172;
    var var185 : Array<Class29> = Array<Class29>(10){ i => Class29() };
    var185[8];
    (match (var203) {
        case caseVar207 : Array<Class29> => 
            var var212 : ?Unit = Option<Unit>.Some(());
            if (var144) { var212 } else { var216 } 
        
        case _ : Rune => 
            Option<Int32>.None;
            ();
            if (false) { Option<Unit>.Some(var172) } else { var216 } 
        
        case _ => 
            var var231 : UInt8 = UInt8(69);
            var231;
            Option<Unit>.None
        
    }, var237[4])[0]
}

public struct Aggregate894<T0> {
    public init() { // block id: 896

    }
;
    public static let var899 : ((Range<Int8>, Int16, (UInt16, Float64, Range<Int8>, Range<Int32>, Float32, Range<UInt16>), Bool, Array<Range<UInt64>>, Int64), Array<Range<UInt64>>) = (((Int8(47)&127..Int8(66)&127:(2|1)), Int16(2), (UInt16(204), (-31.0), (Int8(113)&127..Int8(21)&127:((-103)|1)), (Int32(50)&127..=Int32(-122)&127:(-23)|1), Float32(-127.0), (UInt16(205)&127..=UInt16(67)&127:(-7)|1)), true, [(UInt64(198)&127..UInt64(24)&127:((-13)|1)), (UInt64(106)&127..=UInt64(19)&127:51|1), (UInt64(13)&127..UInt64(147)&127:(82|1)), (UInt64(64)&127..UInt64(63)&127:(-112)|1), (UInt64(142)&127..UInt64(195)&127:48|1), (UInt64(220)&127..UInt64(94)&127:(-16)|1), (UInt64(2)&127..=UInt64(177)&127:(-123)|1), (UInt64(29)&127..=UInt64(186)&127:(42|1)), (UInt64(7)&127..UInt64(11)&127:(-105)|1), (UInt64(16)&127..UInt64(205)&127:(-45)|1)], (-22)), [(UInt64(230)&127..UInt64(86)&127:(-41)|1), (UInt64(125)&127..UInt64(43)&127:105|1), (UInt64(204)&127..UInt64(40)&127:48|1), (UInt64(70)&127..=UInt64(92)&127:(-24)|1), (UInt64(66)&127..=UInt64(61)&127:111|1), (UInt64(253)&127..=UInt64(94)&127:97|1), (UInt64(36)&127..=UInt64(32)&127:(-3)|1), (UInt64(3)&127..=UInt64(53)&127:62|1), (UInt64(42)&127..UInt64(98)&127:65|1), (UInt64(249)&127..=UInt64(231)&127:(-70)|1)]);
    public func func1061(param1062 : Interface32, optionalParam1063 ! : Array<Range<UInt64>> = Array<Range<UInt64>>(10){ i => (UInt64(88)&127..UInt64(12)&127:(8|1)) }, optionalParam1095 ! : Int32 = Int32(-126), optionalParam1097 ! : Option<Int64> = (((UInt32(109) as Int32) as Int64) as Int64)) : Unit { // block id: 1102
        ()
    }
;
    public static let var2283 : ?Bool = Option<Bool>.None;
    public init(param2125 : (Int8) -> Array<UInt64>, param2128 : Range<Int64>, namedParam2129 ! : (Range<Int16>) -> Unit, optionalParam2132 ! : (Array<UInt64>, (Float64, Int8, Float32, (Int32, Range<UInt16>, Range<Int64>, Float32, Range<Int16>), Bool, String), String, Array<Option<Unit>>) = ([UInt64(125), UInt64(154), UInt64(8), UInt64(11), UInt64(203), UInt64(42), UInt64(236), UInt64(239), UInt64(90), UInt64(38)], (Float64((-32.0)), Int8(Int8(UInt8(66))), Float32(Float32(-82.0)), (Int32(Int32(-113)), (UInt16(69)&127..=UInt16(106)&127:(79|1)), ((-44)&127..=(-91)&127:100|1), Float32(-35.0), (Int16(40)&127..Int16(50)&127:(67|1))), ((Option<Int64>.Some((-104)) as (Int16, Range<Int16>, Class29, Int64)) is Option<Unit>), """
eAczm
f%Ff\"
"""), ###"`>@?#/CA:l"###, [Option<Unit>.None, Option<Unit>.Some(()), ((60.0, Int8(48), Float32(121.0), (Int32(125), (UInt16(176)&127..=UInt16(181)&127:102|1), (62&127..(-38)&127:(-74)|1), Float32(-82.0), (Int16(-55)&127..=Int16(61)&127:((-38)|1))), true, ###"An7D=9u~n-"###) as Unit), ((Float32(-67.0), (UInt16(55), 117.0, (Int8(-107)&127..=Int8(-68)&127:((-4)|1)), (Int32(63)&127..Int32(-119)&127:(-16)|1), Float32(42.0), (UInt16(98)&127..=UInt16(213)&127:(49|1))), Int8(61)) as Unit), Option<Unit>.Some(()), Option<Unit>.None, Option<Unit>.None, (UInt8(Int8(110)) as Unit), Option<Unit>.Some(()), (Option<Int64>.None as Unit)])) { // block id: 2210
        var1785++;
        var var2251 : (Float32, (UInt16, Float64, Range<Int8>, Range<Int32>, Float32, Range<UInt16>), Int8) = (Float32(Float32(50.0)), (UInt16(UInt16(Int8(-25))), Float64(Float32(Float32(-29.0))), (Int8(125)&127..=Int8(UInt8(165))&127:(Int64(Int32(66))|1)), (Int32(-115)&127..Int32(-54)&127:52|1), Float32(Float32(Float32(99.0))), (UInt16(44)&127..=UInt16(212)&127:(-108)|1)), Int8(Int8(Int8(Int8(-31)))));
        if (false) { // block id: 2215
            match ('R') {
                case 'n' => 
                    var1222 **= Float32(Int32(Float32(76.0)) & 3);
                    var1564 *= UInt16(162)
                
                case '6' => 
                    var1143
                
                case _ => 
                    var373++
                
                case 'E' | 'H' => 
                    var1143
                
                case _ => 
                    ();
                    var1143
                
            }
        } else if (((var2251 as Bool) ?? if (var505) { // block id: 2279
            [var803, var2283, var803, var2283, Option<Bool>.Some(true), var2283, Option<Bool>.Some(true), var2283, var803, Option<Bool>.None];
            if (false) { (UInt32(118)&127..=UInt32(104)&127:(-41)|1) } else { var2299 } ;
            false
        } else { // block id: 2307
            var505
        })) { // block id: 2309
            [(UInt64(68)&127..=UInt64(116)&127:84|1), (UInt64(162)&127..=UInt64(238)&127:(-119)|1), (UInt64(169)&127..=UInt64(252)&127:12|1), (UInt64(80)&127..=UInt64(169)&127:(-33)|1), (UInt64(40)&127..=UInt64(13)&127:88|1), (UInt64(170)&127..UInt64(0)&127:(-14)|1), (UInt64(194)&127..UInt64(129)&127:(-36)|1), (UInt64(174)&127..=UInt64(127)&127:104|1), (UInt64(34)&127..UInt64(26)&127:(-111)|1), (UInt64(186)&127..=UInt64(35)&127:88|1)];
            ()
        }
    }

}



public func func1105(param1106 : (Float32) -> UInt64) : Interface32 { // block id: 1109
    let var1111 : Interface32 = Class29();
    var1111
}

public func func1114(param13 : Float32) : UInt64 { // block id: 14
    UInt64(227);
    var var44 : Int32 = Int32(UInt32(31));
    var var56 : Unit = ();
    ((Option<Int32>.None ?? var44)|>{ lambdaParameter26 : Int32 => Class29.var35 }) + try { // block id: 48
        UInt64(63) / ((var22) | 1);
        UInt64(177);
        var22
    } catch (_) { // block id: 54
        var56;
        UInt64(211)
    } finally { // block id: 59
        var56;
        var44;
        var22
    }
}


public func func1477(param1478 : Int8) : Array<UInt64> { // block id: 1479
    var var1493 : Bool = false;
    var var1499 : ?Int64 = Option<Int64>.Some(Int64(UInt64(166)));
    var loopTimeVar1551 : Int64 = 0;
    do {
        loopTimeVar1551++;
        if (true) { // block id: 1510
            let var1512 : (Float64, Int8, Float32, (Int32, Range<UInt16>, Range<Int64>, Float32, Range<Int16>), Bool, String) = ((-81.0), Int8(Int8(Int8(UInt8(66)))), Float32(Float32(Float32(Float32(18.0)))), (Int32(Int32(-19)), (UInt16(124)&127..UInt16(Int8(0))&127:(Int64(Int16(93))|1)), (65&127..(-27)&127:(-105)|1), Float32(-50.0), (Int16(UInt8(82))&127..Int16(Int8(113))&127:(16|1))), false, ###"+q1YF%x]->"###);
            var1512;
            var1143;
            var203
        } else { // block id: 1544
            var1546;
            42.0
        }
    } while ((match ((Option<Array<Option<Unit>>>.None as Option<Int64>)) {
        case caseVar1486 : (Range<Int8>, Int16, (UInt16, Float64, Range<Int8>, Range<Int32>, Float32, Range<UInt16>), Bool, Array<Range<UInt64>>, Int64) => 
            false
        
        case _ => 
            var1493
        
        case _ => 
            var1499;
            false
        
        case _ => 
            var144
        
    }) && loopTimeVar1551 < 100 ) ;
    let var1571 : Range<Int16> = (Int16(2)&127..=Int16(-81)&127:(-127)|1);
    var loopTimeVar1586 : Range<UInt64> = (UInt64(Int32(UInt8(142)))&127..UInt64(Int16(Int16(UInt8(172))))&127:(Int64(UInt32(166))|1));
    for (i in loopTimeVar1586 where try { // block id: 1554
        (25.0, var373, Option<Option<Int64>>.None, (var373, (UInt16(50)&127..=var1564&127:((-30)|1)), var385, Float32(-29.0), var1571), [(UInt64(61)&127..=UInt64(174)&127:2|1), (UInt64(204)&127..UInt64(233)&127:(-75)|1), (UInt64(146)&127..=UInt64(177)&127:56|1), (UInt64(246)&127..=UInt64(179)&127:44|1), (UInt64(188)&127..=UInt64(247)&127:(-104)|1), (UInt64(147)&127..UInt64(108)&127:99|1), (UInt64(174)&127..UInt64(6)&127:(-14)|1), (UInt64(32)&127..UInt64(152)&127:116|1), (UInt64(11)&127..=UInt64(61)&127:14|1), (UInt64(20)&127..=UInt64(139)&127:74|1)], (Int32(-12)&127..Int32(11)&127:(-44)|1), [UInt64(249), UInt64(253), UInt64(94), UInt64(65), UInt64(123), UInt64(238), UInt64(14), UInt64(11), UInt64(55), UInt64(212)]);
        var1222 > Float32(89.0)
    } finally { // block id: 1579
        var1143;
        Float32(-47.0) != Float32(-117.0)
    }) {
        ()
    };
    [UInt64(180), UInt64(99), UInt64(81), UInt64(110), UInt64(239), UInt64(81), UInt64(105), UInt64(8), UInt64(135), UInt64(42)]
}

public func func1635(param1636 : Range<UInt64>) : Unit { // block id: 1637
    let var1761 : Int16 = Int16(33);
    var var1807 : Array<Option<Unit>> = Array<Option<Unit>>(10){ i => (Option<Int64>.None as Unit) };
    if (match (var1641) {
        case _ : Int32 => 
            var var1768 : Range<Int32> = (Int32(UInt32(UInt8(UInt8(185))))&127..Int32(-18)&127:(Int64(Int32(UInt8(UInt8(171))))|1));
            ((var474&127..var474&127:(24|1)), var1761, (UInt16(63), var203, (Int8(-117)&127..Int8(120)&127:(-128)|1), var1768, var1222, (UInt16(191)&127..=UInt16(205)&127:(-36)|1)), false, [(var1785&127..=var1785&127:(var502|1)), param1636, param1636, param1636, param1636, (UInt64(192)&127..=UInt64(179)&127:68|1), (UInt64(214)&127..UInt64(168)&127:(var502|1)), param1636, param1636, (var22&127..=var1279&127:((-92)|1))], var502);
            Option<Array<Option<Unit>>>.Some(var1807);
            UInt64(13) != var22
        
        case caseVar1838 : Option<Int64> => 
            let var1841 : Array<Bool> = Array<Bool>(10){ i => false };
            var1841;
            Option<Int32>.Some(Int32(-10));
            var505 || false
        
        case _ => 
            var450;
            var1933 >>= ((var1933) & 7);
            false
        
    }) { // block id: 1937
        var450.var1941;
        try (resource = Class29()) { // block id: 1944
            ();
            var1143
        } catch (_) { // block id: 1947

        }
    };
    let var1951 : ?Int64 = Option<Int64>.Some(35);
    let var1968 : Range<UInt32> = (UInt32(178)&127..UInt32(214)&127:(-28)|1);
    (var1951 ?? Class29.var1957) << ((try { // block id: 1960
        ();
        var1143;
        var862 / ((var502) | 1)
    } catch (_) { // block id: 1966
        var1968;
        var var1971 : Array<Option<Unit>> = Array<Option<Unit>>(10){ i => Option<Unit>.None };
        var1971;
        (-11) << (((-30)) & 7)
    }) & 7);
    var var2021 : Bool = ((Int16(UInt8(86))&127..Int16(44)&127:(Int64((-56))|1)) is Array<Range<UInt64>>);
    var loopTimeVar2042 : Range<UInt64> = (UInt64(UInt16(Int8(Int8(122))))&127..=UInt64((-70))&127:((-99)|1));
    for (i in loopTimeVar2042 where (match (Option<Class29>.None) {
        case caseVar2015 => 
            var373++;
            var2021 ||= false;
            var803
        
        case _ => 
            UInt32(158);
            var1143;
            if (var2021) { var803 } else { var803 } 
        
    } ?? (var373 is ((Range<Int8>, Int16, (UInt16, Float64, Range<Int8>, Range<Int32>, Float32, Range<UInt16>), Bool, Array<Range<UInt64>>, Int64), Array<Range<UInt64>>)))) {

    }
}



func func2052(param2053 : (Range<Int8>, Int16, (UInt16, Float64, Range<Int8>, Range<Int32>, Float32, Range<UInt16>), Bool, Array<Range<UInt64>>, Int64)) : Unit { // block id: 2054
    let var2313 : (Int8) -> Array<UInt64> = func1477;
    let var2339 : (Float64, Int32, Option<Option<Int64>>, (Int32, Range<UInt16>, Range<Int64>, Float32, Range<Int16>), Array<Range<UInt64>>, Range<Int32>, Array<UInt64>) = ((-108.0), Int32(120), Option<Option<Int64>>.None, (Int32(78), (UInt16(120)&127..UInt16(52)&127:(-47)|1), (Int64(UInt8(60))&127..=72&127:(Int64(Int32(71))|1)), Float32(8.0), (Int16(UInt8(82))&127..Int16(25)&127:(Int64(UInt8(173))|1))), [(UInt64(216)&127..=UInt64(UInt16(80))&127:(Int64(UInt64(95))|1)), (UInt64(134)&127..UInt64(49)&127:(-26)|1), (UInt64(27)&127..UInt64(167)&127:(Int64(UInt64(85))|1)), (UInt64(151)&127..=UInt64(Int8(27))&127:((-6)|1)), (UInt64(UInt8(11))&127..=UInt64(UInt16(171))&127:(Int64(UInt8(105))|1)), (UInt64(107)&127..UInt64(1)&127:(37|1)), (UInt64(207)&127..=UInt64(136)&127:(-108)|1), (UInt64(89)&127..=UInt64(16)&127:((-71)|1)), (UInt64(26)&127..UInt64(UInt16(168))&127:((-91)|1)), (UInt64(222)&127..=UInt64(232)&127:(-34)|1)], (Int32(-1)&127..Int32(-80)&127:(-67)|1), [UInt64(75), UInt64(34), UInt64(214), UInt64(152), UInt64(40), UInt64(186), UInt64(186), UInt64(64), UInt64(195), UInt64(194)]);
    (var2061 ?? match (match ((Float32(122.0), (var1564, var203, (Int8(60)&127..=Int8(-85)&127:40|1), (Int32(-105)&127..=Int32(-80)&127:(var862|1)), Float32(-48.0), (UInt16(92)&127..=UInt16(89)&127:(-92)|1)), Int8(76))) {
            case (caseVar2081 : Unit,(_,caseVar2082 : Int64,_ : (Int32, Range<UInt16>, Range<Int64>, Float32, Range<Int16>),caseVar2083,caseVar2084,caseVar2085),caseVar2086 : Range<UInt16>) => 
                caseVar2081;
                var144
            
            case (_,_,caseVar2092 : Array<Bool>) => 
                if (var505) { [false, true, false, true, true, false, true, true, false, false] } else { [var505, true, var144, var505, var144, false, var505, true, false, var144] } ;
                let var2109 : Unit = ();
                var2109;
                true
            
            case _ => 
                false
            
        }) {
        case caseVar2117 : Option<Class29> => 
            var1564 >>= ((UInt16(179)) & 7);
            Class29();
            Aggregate894<Option<Array<Option<Unit>>>>(var2313, ((-9)&127..(-48)&127:(65|1)), namedParam2129 : func341, optionalParam2132 : var733)
        
        case caseVar2323 => 
            ();
            Aggregate894<Option<Array<Option<Unit>>>>()
        
        case caseVar2329 : Option<Class29> => 
            var1143;
            Aggregate894<Option<Array<Option<Unit>>>>()
        
        case _ => 
            ();
            if (false) { var2339 } else { var2339 } ;
            let var2404 : Aggregate894<Option<Array<Option<Unit>>>> = Aggregate894<Option<Array<Option<Unit>>>>();
            var2404
        
    });
    (try { // block id: 2408
        if (false) { var882 } else { var216 } 
    } catch (_) { // block id: 2413
        ();
        var1785 **= (var1279 & 3);
        Option<Unit>.Some(())
    } finally { // block id: 2420
        var var2424 : UInt32 = UInt32(83);
        (UInt32(71)&127..=var2424&127:(var862|1));
        var1143;
        if (var505) { var216 } else { var882 } 
    } ?? ())
}

public func func2436(param2437 : Range<UInt64>) : (Range<Int8>, Int16, (UInt16, Float64, Range<Int8>, Range<Int32>, Float32, Range<UInt16>), Bool, Array<Range<UInt64>>, Int64) { // block id: 2438
    var var2487 : Interface32 = Class29();
    let var2512 : Bool = (Option<Int32>.Some(Int32(-10)) is (Range<Int8>, Bool, Int8, Bool, Bool, Range<Int64>, String, UInt16, Float64));
    var var2526 : ?Unit = (UInt16(UInt8(83)) as Unit);
    ((Int8(83)&127..Int8(-114)&127:(-127)|1), (Int16(-1) + var1546) + Int16(Int8(-115)), if (var144) { // block id: 2449
        (UInt16(10), var203, (var474&127..var474&127:(2|1)), (Int32(-71)&127..=Int32(-34)&127:(-70)|1), Float32(114.0), var376)
    } else { // block id: 2460
        var237
    }, if (var144) { // block id: 2464
        var var2466 : UInt32 = UInt32(97);
        var2466;
        var144 && var2471
    } else if (try { // block id: 2479
        var1143;
        var593;
        var2471
    } catch (e: Exception) { // block id: 2483
        if (var2471) { var2487 } else { var2487 } ;
        var144
    }) { // block id: 2491
        if (var144) { (UInt8(241)&127..var1933&127:((-30)|1)) } else { (UInt8(37)&127..var1933&127:(var862|1)) } ;
        true
    } else { // block id: 2503
        var1222 **= Float32(Int32(Float32(87.0)) & 3);
        var505
    }, try { // block id: 2509
        if (var2512) { [Option<Unit>.Some(()), var882, var882, Option<Unit>.Some(var1143), Option<Unit>.None, var882, var2526, var2526, Option<Unit>.Some(var1143), var2534] } else { var2537 } ;
        var2618
    } catch (_) { // block id: 2656
        ();
        var1143;
        if (var505) { var2618 } else { var2618 } 
    }, 29 + 36)
}


public func func2669(param2670 : Range<Int16>) : Range<UInt64> { // block id: 2671
    var var2974 : Range<UInt64> = (UInt64(124)&127..UInt64(1)&127:29|1);
    (match (try { // block id: 2679
            var1143;
            let var2684 : Array<Option<(Int16, Range<Int16>, Class29, Int64)>> = [(UInt32(250) as (Int16, Range<Int16>, Class29, Int64)), ((Float32(-2.0), (UInt16(144), (-13.0), (Int8(67)&127..Int8(23)&127:(-34)|1), (Int32(-3)&127..Int32(-64)&127:((-69)|1)), Float32(70.0), (UInt16(203)&127..UInt16(93)&127:(-55)|1)), Int8(Int8(-114))) as (Int16, Range<Int16>, Class29, Int64)), ((Option<Bool>.Some(true) as Array<UInt64>) as (Int16, Range<Int16>, Class29, Int64)), ((Int64(UInt8(59))&127..Int64(Int32(2))&127:(72|1)) as (Int16, Range<Int16>, Class29, Int64)), ([(UInt64(228)&127..=UInt64(1)&127:107|1), (UInt64(157)&127..=UInt64(225)&127:92|1), (UInt64(208)&127..=UInt64(136)&127:36|1), (UInt64(174)&127..=UInt64(40)&127:(-122)|1), (UInt64(183)&127..=UInt64(166)&127:119|1), (UInt64(177)&127..UInt64(85)&127:104|1), (UInt64(84)&127..=UInt64(245)&127:3|1), (UInt64(131)&127..UInt64(35)&127:(-104)|1), (UInt64(7)&127..=UInt64(223)&127:(-38)|1), (UInt64(86)&127..=UInt64(26)&127:69|1)] as (Int16, Range<Int16>, Class29, Int64)), Option<(Int16, Range<Int16>, Class29, Int64)>.Some((Int16(Int8(-56)), (Int16(57)&127..Int16(73)&127:(97|1)), Class29(), (-103))), ((UInt8(141)&127..UInt8(39)&127:59|1) as (Int16, Range<Int16>, Class29, Int64)), (((Int8(74)&127..=Int8(-41)&127:(-57)|1), Int16(60), (UInt16(123), (-128.0), (Int8(26)&127..Int8(-74)&127:(-72)|1), (Int32(99)&127..Int32(97)&127:((-32)|1)), Float32(5.0), (UInt16(164)&127..=UInt16(239)&127:((-104)|1))), (Option<Class29>.Some(Class29()) is Array<UInt64>), [(UInt64(156)&127..=UInt64(90)&127:(19|1)), (UInt64(172)&127..UInt64(80)&127:((-16)|1)), (UInt64(44)&127..=UInt64(174)&127:(-17)|1), (UInt64(132)&127..UInt64(48)&127:90|1), (UInt64(112)&127..UInt64(189)&127:((-14)|1)), (UInt64(97)&127..UInt64(155)&127:124|1), (UInt64(92)&127..=UInt64(194)&127:(85|1)), (UInt64(245)&127..=UInt64(93)&127:126|1), (UInt64(10)&127..=UInt64(37)&127:(-125)|1), (UInt64(203)&127..UInt64(63)&127:23|1)], 84) as (Int16, Range<Int16>, Class29, Int64)), (Option<Unit>.None as (Int16, Range<Int16>, Class29, Int64)), (UInt16(122) as (Int16, Range<Int16>, Class29, Int64))];
            if (true) { var2684 } else { var2684 } 
        } finally { // block id: 2777
            var var2779 : Array<Option<(Int16, Range<Int16>, Class29, Int64)>> = Array<Option<(Int16, Range<Int16>, Class29, Int64)>>(10){ i => Option<(Int16, Range<Int16>, Class29, Int64)>.Some((Int16(Int16(117)), (Int16(26)&127..Int16(43)&127:((-111)|1)), Class29(), 92)) };
            var2779
        }) {
        case caseVar2944 => 
            ();
            var1143;
            var2949
        
        case _ : Option<Range<UInt64>> => 
            Option<Range<UInt64>>.Some((var22&127..=UInt64(106)&127:(var502|1)))
        
        case caseVar2962 => 
            var2949
        
        case _ : Bool => 
            var1143;
            if (var144) { Option<Range<UInt64>>.None } else { Option<Range<UInt64>>.Some(var2974) } 
        
        case _ => 
            var1143;
            Option<Range<UInt64>>.None
        
    } ?? if ((var1564 > UInt16(193))) { (UInt64(44)&127..=UInt64(231)&127:45|1) } else { (UInt64(192)&127..var1785&127:((-19)|1)) } )
}

public func func1626(namedParam1627 ! : Rune, optionalParam1628 ! : Class29 = Class29(), optionalParam1630 ! : Int16 = Int16(-14)) : Option<Array<UInt64>> { // block id: 1632
    let var2434 : ((Range<Int8>, Int16, (UInt16, Float64, Range<Int8>, Range<Int32>, Float32, Range<UInt16>), Bool, Array<Range<UInt64>>, Int64)) -> Unit = func2052;
    let var2667 : (Range<UInt64>) -> (Range<Int8>, Int16, (UInt16, Float64, Range<Int8>, Range<Int32>, Float32, Range<UInt16>), Bool, Array<Range<UInt64>>, Int64) = func2436;
    var var2990 : (Range<Int16>) -> Range<UInt64> = func2669;
    (Int16(UInt16(59))&127..=Int16(UInt16(90))&127:((Option<Int64>.Some(var862) ?? 105)|1))|>(var2990~>(var2667~>var2434));
    ();
    ((if (match {
        case false => 
        var1143;
        false
        case var505 => 
        (-35.0) < var3014
        case _ => 
        """
'y<,k
#;-X/
""";
        Option<Unit>.Some(var1143);
        false
    }) { if (true) { // block id: 3023
        var1143;
        var474 &= Int8(-86);
        if (var144) { var3031 } else { var3031 } 
    } else if (true) { // block id: 3057
        ();
        (115.0, Int8(83), Float32(34.0), (Int32(76), (UInt16(212)&127..UInt16(45)&127:92|1), (var502&127..var502&127:(95|1)), var1222, (Int16(78)&127..Int16(-124)&127:62|1)), true, var3074)
    } else { // block id: 3076
        ();
        ();
        if (false) { (var203, Int8(106), Float32(31.0), var3086, false, var670) } else { ((-22.0), var474, Float32(-47.0), (Int32(96), var376, ((-115)&127..54&127:(var502|1)), var1222, (Int16(2)&127..=Int16(-61)&127:40|1)), var505, var670) } 
    } } else { var3031 } ) as Array<UInt64>)
}

func func1622() : Int8 { // block id: 1623
    let var3132 : Rune = 'e';
    match (func1626(namedParam1627 : match (var670) {
            case _ : Range<Int16> => 
                var1143;
                if (var2471) { var3132 } else { 'u' } 
            
            case ###"6QIK,!kd~a"### | """
g,)9H
GtIGG
""" => 
                ();
                'X'
            
            case "G=fVA|V~na{" => 
                var3144
            
            case _ => 
                var1546 += var1546;
                var1143;
                var3132
            
        }, optionalParam1628 : Class29(), optionalParam1630 : var1546 + var1546)) {
        case _ => 
            Option<Bool>.None;
            -UInt64(11);
            var1785 | var1785
        
    };
    var1143;
    try { // block id: 3167
        let var3173 : ?Class29 = Option<Class29>.Some(Class29());
        if (var2471) { Option<Class29>.Some(Class29()) } else { var3173 } ;
        try { // block id: 3177
            var474 / ((var474) | 1)
        } finally { // block id: 3181
            if (var144) { var237 } else { var237 } ;
            var502;
            Int8(13) >> ((var474) & 7)
        }
    } catch (e: Exception) { // block id: 3190
        var var3228 : UInt32 = UInt32(Int16(Int16(77)));
        try { // block id: 3192
            var var3206 : ?Bool = ((Int16(UInt8(104)), (Int16(-39)&127..Int16(47)&127:52|1), Class29(), Int64(Int32(83))) as Bool);
            [Option<Bool>.Some(false), var803, Option<Bool>.None, var803, Option<Bool>.Some(var505), var803, var803, Option<Bool>.None, var803, var3206];
            var var3218 : Int64 = Int64(Int32(Int16(70)));
            var502 = var3218;
            ()
        } finally { // block id: 3223
            var1143;
            ();
            var3228 *= UInt32(28)
        };
        if (false) { // block id: 3235
            var474
        } else if (false) { // block id: 3238
            var1785 -= UInt64(41);
            Int8(-3)
        } else { // block id: 3243
            var1143;
            Int8(19)
        }
    } finally { // block id: 3246
        var474
    }
}


func func1351(param1352 : Range<Int16>) : Array<Range<UInt64>> { // block id: 1353
    var loopTimeVar1358 : Int64 = 0;
    while ((var144) && loopTimeVar1358 < 100 ) {
        loopTimeVar1358++;

    };
    let var1599 : (Int8) -> Array<UInt64> = { lambdaParameter1602 : Int8 => [UInt64(Int8(24)), UInt64(225), UInt64(193), UInt64(UInt64(UInt32(94))), UInt64(208), UInt64(Int16(116)), UInt64(157), UInt64(247), UInt64(UInt8(Int8(-41))), UInt64(226)] };
    let var3257 : (Option<Int32>) -> Option<Unit> = func168;
    let var3436 : Int64 = 51;
    let var3472 : Option<Option<Range<UInt64>>> = Option<Option<Range<UInt64>>>.Some(Option<Range<UInt64>>.Some((UInt64(74)&127..UInt64(50)&127:(Int64((-24))|1))));
    let var3569 : Int64 = (-14);
    func func1360(optionalParam1361 ! : UInt32 = UInt32(46), namedParam1363 ! : (Range<Int8>, Bool, Int8, Bool, Bool, Range<Int64>, String, UInt16, Float64)) : Array<Range<UInt64>> { // block id: 1364
        func func1375(param1376 : Float32, param1377 : (Range<UInt16>) -> Option<Bool>, param1380 : Range<Int8>, namedParam1381 ! : (Option<Int32>) -> Option<Unit>) : Array<UInt64> { // block id: 1384
            var var1390 : (Float64, Int32, Option<Option<Int64>>, (Int32, Range<UInt16>, Range<Int64>, Float32, Range<Int16>), Array<Range<UInt64>>, Range<Int32>, Array<UInt64>) = ((-5.0), Int32(-53), Option<Option<Int64>>.Some(Option<Int64>.Some(Int64(UInt32(3)))), (Int32(-42), (UInt16(Int16(-47))&127..=UInt16(249)&127:(Int64(Int16(37))|1)), (60&127..(-32)&127:44|1), Float32(Float32(-68.0)), (Int16(25)&127..=Int16(59)&127:73|1)), [(UInt64(43)&127..=UInt64(93)&127:72|1), (UInt64(248)&127..=UInt64(181)&127:(-92)|1), (UInt64(Int32(39))&127..=UInt64(233)&127:(Int64(Int16(98))|1)), (UInt64(UInt16(208))&127..=UInt64(UInt8(87))&127:(Int64(UInt16(210))|1)), (UInt64(249)&127..=UInt64(30)&127:(Int64(69)|1)), (UInt64(80)&127..UInt64(97)&127:(-94)|1), (UInt64(87)&127..=UInt64(161)&127:61|1), (UInt64(129)&127..UInt64(UInt32(220))&127:(Int64((-71))|1)), (UInt64(UInt32(169))&127..UInt64(74)&127:(Int64(Int8(110))|1)), (UInt64(25)&127..=UInt64(13)&127:(-34)|1)], (Int32(UInt32(15))&127..=Int32(-99)&127:(Int64(Int8(-110))|1)), [UInt64(UInt32(Int32(53))), UInt64(236), UInt64(38), UInt64(53), UInt64(UInt16(16)), UInt64(UInt64(208)), UInt64(214), UInt64(122), UInt64(196), UInt64(UInt32(UInt16(250)))]);
            try { // block id: 1386
                Option<Unit>.None.getOrThrow();
                var1390;
                (var882 ?? var1143)
            } catch (_) { // block id: 1472
                var1143;
                var1143;
                var1143
            };
            func1622()|>var1599
        }
;
        let var3254 : Int64 = (-98);
        var loopTimeVar3265 : Int64 = 0;
        do {
            loopTimeVar3265++;
            func1375(Float32(-114.0), func673, (var474&127..=Int8(-49)&127:(var3254|1)), namedParam1381 : var3257);
            var loopTimeVar3263 : Int64 = 0;
            while ((false) && loopTimeVar3263 < 100 ) {
                loopTimeVar3263++;

            }
        } while (((Option<Bool>.Some(var144) ?? [false, true, false, true, true, false, true, false, false, true][2])) && loopTimeVar3265 < 100 ) ;
        let var3392 : Int64 = Int64(UInt64(215));
        let var3515 : ?Int32 = Option<Int32>.Some(Int32(Int32(30)));
        var var3558 : Range<Int8> = (Int8(62)&127..Int8(-17)&127:77|1);
        [match (try { // block id: 3269
                var1933 >>= ((var1933) & 7);
                var var3275 : Bool = true;
                var3275 ||= true;
                if (true) { (Int16(-99)&127..=Int16(96)&127:(-11)|1) } else { (Int16(99)&127..Int16(-3)&127:(-23)|1) } 
            } catch (e: Exception) { // block id: 3282
                (var1546&127..Int16(-110)&127:(var502|1))
            } finally { // block id: 3287
                ();
                if (var505) { (var373, (UInt16(147)&127..=UInt16(109)&127:25|1), (var3254&127..1&127:(var3254|1)), var1222, (Int16(-116)&127..=Int16(120)&127:(-76)|1)) } else { var3086 } ;
                param1352
            }) {
            case caseVar3304 : (Range<Int8>, Int16, (UInt16, Float64, Range<Int8>, Range<Int32>, Float32, Range<UInt16>), Bool, Array<Range<UInt64>>, Int64) => 
                var1143;
                (UInt64(144)&127..UInt64(186)&127:50|1)
            
            case caseVar3310 => 
                var1143;
                var373 **= (var373 & 3);
                (UInt64(157)&127..UInt64(226)&127:97|1)
            
            case caseVar3319 : UInt32 => 
                var3323 ||= var3323;
                var3328
            
            case _ => 
                var3323 ||= var3323;
                [(UInt64(126)&127..var1785&127:(var3254|1)), var3328, var3328, (UInt64(191)&127..UInt64(13)&127:((-34)|1)), (UInt64(157)&127..=UInt64(74)&127:106|1), (UInt64(174)&127..UInt64(161)&127:91|1), var3328, var3328, var3328, (var22&127..=UInt64(148)&127:(var862|1))];
                (var1785&127..UInt64(191)&127:(var502|1))
            
        }, var3328, var3328, try { // block id: 3368
            var3144;
            var3328
        } catch (_) { // block id: 3371
            let var3374 : UInt16 = UInt16(40);
            let var3378 : Range<Int8> = (Int8(-82)&127..Int8(Int8(Int8(UInt8(6))))&127:(45|1));
            (var3374, 9.0, var3378, (Int32(16)&127..Int32(81)&127:30|1), Float32(32.0), (UInt16(249)&127..UInt16(145)&127:(var3392|1)));
            var1143;
            if (false) { var3328 } else { var3328 } 
        }, if (false) { match (var2618) {
            case caseVar3406 => 
                ();
                var1143;
                (UInt64(42)&127..UInt64(175)&127:(-48)|1)
            
            case _ => 
                var3416 **= (UInt32(56) & 3);
                var1143;
                if (var3323) { var3328 } else { (var1279&127..=UInt64(244)&127:(var502|1)) } 
            
            case caseVar3430 => 
                (UInt64(150)&127..=UInt64(175)&127:(var3436|1))
            
            case caseVar3440 : UInt8 => 
                if (var144) { (var1785&127..=var1279&127:((-50)|1)) } else { (UInt64(236)&127..=UInt64(235)&127:(var502|1)) } 
            
            case _ => 
                (UInt64(200)&127..UInt64(232)&127:(-84)|1)
            
        } } else { (if (var144) { (UInt64(155)&127..=UInt64(244)&127:(var502|1)) } else { (var1785&127..UInt64(141)&127:(var502|1)) } ) } , ((var3472 ?? var2949) ?? try { // block id: 3482
            Option<Int32>.None;
            var3328
        } catch (_) { // block id: 3485
            var1143;
            (var1302&127..var22&127:(var862|1))
        }), try { // block id: 3492
            ();
            (UInt64(252)&127..=UInt64(36)&127:(-123)|1)
        } finally { // block id: 3495
            Float32(-93.0);
            if (false) { (UInt64(192)&127..=var1302&127:(var3254|1)) } else { var3328 } 
        }, ((Option<Option<Range<UInt64>>>.Some(Option<Range<UInt64>>.None) as Range<UInt64>) ?? (UInt64(174)&127..var1302&127:((-116)|1))), (match (var3515) {
            case _ => 
                if (true) { [Option<Unit>.Some(()), Option<Unit>.None, var882, var216, Option<Unit>.None, Option<Unit>.Some(()), Option<Unit>.Some(()), var2534, var882, var882] } else { var2537 } ;
                var1143;
                let var3545 : Int64 = (-26);
                Option<Range<UInt64>>.Some((UInt64(206)&127..=var1302&127:(var3545|1)))
            
            case caseVar3549 => 
                var3416 ^= var3416;
                if (var144) { (var3558, var3561, var474, false, var144, ((-112)&127..=var3569&127:(114|1)), "j*U>VZ-jAt", var1564, var3014) } else { namedParam1363 } ;
                Option<Range<UInt64>>.None
            
            case _ : Option<Option<Int64>> => 
                var var3597 : ?Unit = Option<Unit>.Some(());
                ([UInt64(48), UInt64(79), UInt64(221), UInt64(221), UInt64(183), UInt64(151), UInt64(86), UInt64(238), UInt64(228), UInt64(253)], var3031, "_M![DZ/xA~", [var216, Option<Unit>.None, Option<Unit>.None, var882, Option<Unit>.Some(var1143), Option<Unit>.Some(var1143), var2534, Option<Unit>.Some(var1143), var3597, Option<Unit>.None]);
                var3323 &&= var505;
                var2949
            
            case _ => 
                Option<Range<UInt64>>.None
            
        } ?? (UInt64(79)&127..UInt64(31)&127:(-30)|1)), var3328]
    }
;
    func1360(optionalParam1361 : var3416, namedParam1363 : if (match {
        case var2471 => 
        var1143;
        true
        case _ => 
        ();
        false
    }) { // block id: 3620
        var862;
        ((Int8(92)&127..Int8(68)&127:86|1), var144, var474, false, var144, (var3569&127..=37&127:(83|1)), var670, var1564, var203)
    } else { // block id: 3635
        param1352;
        ();
        let var3734 : (Range<Int8>, Bool, Int8, Bool, Bool, Range<Int64>, String, UInt16, Float64) = ((Int8(69)&127..Int8(80)&127:(-109)|1), ((0.0, Int32(115), ((-15) as Option<Int64>), (Int32(-59), (UInt16(209)&127..=UInt16(130)&127:((-98)|1)), (15&127..=19&127:(-115)|1), Float32(-70.0), (Int16(119)&127..=Int16(-97)&127:110|1)), [(UInt64(100)&127..=UInt64(181)&127:(10|1)), (UInt64(43)&127..UInt64(251)&127:(24|1)), (UInt64(146)&127..UInt64(128)&127:((-43)|1)), (UInt64(237)&127..=UInt64(163)&127:(20|1)), (UInt64(182)&127..=UInt64(151)&127:(-65)|1), (UInt64(189)&127..=UInt64(113)&127:((-25)|1)), (UInt64(80)&127..UInt64(203)&127:(51|1)), (UInt64(60)&127..=UInt64(48)&127:((-120)|1)), (UInt64(184)&127..UInt64(139)&127:70|1), (UInt64(118)&127..UInt64(170)&127:((-64)|1))], (Int32(49)&127..Int32(74)&127:(106|1)), [UInt64(117), UInt64(27), UInt64(21), UInt64(221), UInt64(248), UInt64(3), UInt64(80), UInt64(23), UInt64(101), UInt64(197)]) is Range<UInt64>), Int8(-98), (((Option<Bool>.None as Option<Range<UInt64>>) as Range<UInt64>) is Option<Range<UInt64>>), false, ((-21)&127..=(-91)&127:(-106)|1), """
F%h\"V
$h|!U
""", UInt16(201), Float64(Float32(Float32(Float32(-21.0)))));
        if (true) { var3641 } else { var3734 } 
    })
}


func func1124(param1125 : Interface32, optionalParam1126 ! : Option<Unit> = Option<Unit>.None) : Array<Range<UInt64>> { // block id: 1128
    (((var144 as Option<Unit>) ?? [Option<Unit>.None, Option<Unit>.None, Option<Unit>.Some(var1143), optionalParam1126, Option<Unit>.Some(()), Option<Unit>.Some(var1143), Option<Unit>.None, Option<Unit>.Some(()), Option<Unit>.None, optionalParam1126][2]) ?? var1143);
    try (resource = Class29()) { // block id: 1158

    } catch (_) { // block id: 1159
        (Int16(-35)&127..Int16(-3)&127:((-45)|1))|>func341
    };
    var var1173 : (Range<Int8>, Int16, (UInt16, Float64, Range<Int8>, Range<Int32>, Float32, Range<UInt16>), Bool, Array<Range<UInt64>>, Int64) = ((Int8(Int8(36))&127..Int8(-82)&127:(Int64(UInt16(3))|1)), Int16(-44), (UInt16(UInt16(242)), Float64(Float32(12.0)), (Int8(-104)&127..Int8(-26)&127:(-47)|1), (Int32(Int8(107))&127..=Int32(Int32(25))&127:(Int64(UInt8(140))|1)), Float32(Float32(Float32(-102.0))), (UInt16(198)&127..=UInt16(Int16(125))&127:((-116)|1))), true, [(UInt64(93)&127..UInt64(35)&127:99|1), (UInt64(92)&127..=UInt64(135)&127:(-23)|1), (UInt64(81)&127..UInt64(243)&127:126|1), (UInt64(15)&127..=UInt64(171)&127:16|1), (UInt64(248)&127..UInt64(186)&127:113|1), (UInt64(56)&127..UInt64(148)&127:36|1), (UInt64(100)&127..UInt64(112)&127:(-44)|1), (UInt64(205)&127..=UInt64(3)&127:94|1), (UInt64(41)&127..UInt64(55)&127:7|1), (UInt64(100)&127..=UInt64(239)&127:(-67)|1)], Int64(UInt64(UInt8(185))));
    var var1306 : UInt64 = UInt64(UInt16(UInt16(Int8(Int8(-47)))));
    try { // block id: 1167
        (var882 ?? ());
        match (var1173) {
            case (caseVar1210,_,(_,_ : Int16,caseVar1211,_ : Option<Bool>,caseVar1212,caseVar1213 : Option<Array<Unit>>),caseVar1214,_,_ : Option<Int32>) => 
                var var1218 : Int16 = Int16(-38);
                var1218++;
                var1222 = Float32(88.0);
                var var1251 : Range<UInt64> = (UInt64(39)&127..=UInt64(68)&127:(-94)|1);
                [(UInt64(119)&127..var22&127:(var502|1)), (UInt64(137)&127..=UInt64(79)&127:0|1), (var22&127..UInt64(21)&127:(var862|1)), (UInt64(205)&127..=UInt64(165)&127:((-77)|1)), (var22&127..UInt64(57)&127:(var862|1)), (var22&127..=UInt64(208)&127:(34|1)), (UInt64(24)&127..=UInt64(186)&127:(-63)|1), (UInt64(78)&127..=UInt64(61)&127:(-51)|1), (UInt64(235)&127..UInt64(132)&127:22|1), var1251]
            
            case _ => 
                UInt8(223);
                [(UInt64(4)&127..=UInt64(184)&127:(-68)|1), (UInt64(9)&127..UInt64(55)&127:(-68)|1), (UInt64(228)&127..UInt64(3)&127:(-117)|1), (UInt64(211)&127..UInt64(135)&127:(-66)|1), (UInt64(82)&127..=UInt64(187)&127:(-66)|1), (UInt64(124)&127..=UInt64(126)&127:5|1), (UInt64(158)&127..=UInt64(193)&127:24|1), (UInt64(102)&127..=UInt64(153)&127:(-52)|1), (UInt64(251)&127..UInt64(201)&127:88|1), (UInt64(161)&127..=UInt64(9)&127:57|1)]
            
        }
    } catch (_) { // block id: 1257
        match ((var216, var1222)) {
            case (caseVar1264,caseVar1265 : Array<Class29>) => 
                var593
            
            case (_,_) => 
                [UInt64(146), UInt64(139), var22, UInt64(164), UInt64(3), UInt64(124), var1279, var22, UInt64(5), UInt64(170)]
            
            case caseVar1287 => 
                Option<Unit>.Some(());
                var var1292 : UInt32 = UInt32(166);
                var1292;
                [UInt64(247), UInt64(237), UInt64(140), UInt64(5), UInt64(51), UInt64(0), UInt64(234), UInt64(43), UInt64(68), UInt64(14)]
            
            case caseVar1297 : Array<UInt64> => 
                [UInt64(35), var1302, var1306, var1306, UInt64(186), UInt64(207), UInt64(106), var22, UInt64(166), var1302]
            
            case _ => 
                if (true) { Option<Bool>.None } else { var803 } ;
                Int8(38);
                if (var505) { [UInt64(15), var1279, var1306, var1306, var1279, UInt64(142), UInt64(233), UInt64(184), UInt64(165), UInt64(195)] } else { [var1306, UInt64(32), UInt64(85), var1279, var1279, var1302, UInt64(81), var22, UInt64(129), var22] } 
            
        };
        (Int16(35)&127..Int16(-53)&127:(var862|1))|>func1351
    } finally { // block id: 3810
        (Option<Unit>.Some(()) ?? var1143);
        var2618
    }
}

func func1025(param1026 : Int8) : Class29 { // block id: 1027
    let var1038 : ?Array<Unit> = Option<Array<Unit>>.None;
    let var1045 : Unit = ();
    (try { // block id: 1035
        (-19);
        var1038
    } catch (_) { // block id: 1040
        var1038
    } ?? [(), var1045, (), (), var1045, var1045, var1045, (), var1045, var1045])[9];
    var var1058 : Aggregate894<Option<Array<Option<Unit>>>> = Aggregate894<Option<Array<Option<Unit>>>>();
    var var1117 : (Float32) -> UInt64 = { lambdaParameter1120 : Float32 => UInt64(46) };
    var var3821 : Interface32 = Class29();
    var var3841 : ??Unit = ((((((Int8(21)&127..Int8(117)&127:((-102)|1)), Int16(35), (UInt16(234), 109.0, (Int8(-3)&127..=Int8(7)&127:(-100)|1), (Int32(19)&127..=Int32(20)&127:((-3)|1)), Float32(-119.0), (UInt16(53)&127..=UInt16(24)&127:(101|1))), false, [(UInt64(131)&127..=UInt64(208)&127:73|1), (UInt64(187)&127..=UInt64(209)&127:5|1), (UInt64(26)&127..=UInt64(62)&127:(-24)|1), (UInt64(233)&127..=UInt64(202)&127:105|1), (UInt64(66)&127..=UInt64(1)&127:37|1), (UInt64(39)&127..=UInt64(250)&127:(-51)|1), (UInt64(117)&127..UInt64(57)&127:112|1), (UInt64(233)&127..=UInt64(195)&127:(-8)|1), (UInt64(89)&127..=UInt64(180)&127:68|1), (UInt64(39)&127..UInt64(243)&127:98|1)], 49), [(UInt64(200)&127..=UInt64(0)&127:(-100)|1), (UInt64(184)&127..UInt64(53)&127:(-98)|1), (UInt64(218)&127..UInt64(43)&127:(-37)|1), (UInt64(238)&127..UInt64(61)&127:(-120)|1), (UInt64(226)&127..=UInt64(249)&127:(-115)|1), (UInt64(26)&127..=UInt64(142)&127:55|1), (UInt64(174)&127..=UInt64(30)&127:60|1), (UInt64(64)&127..=UInt64(123)&127:(-82)|1), (UInt64(28)&127..=UInt64(225)&127:85|1), (UInt64(68)&127..UInt64(75)&127:(-10)|1)]) as Unit), Float32(Float32(Float32(123.0)))) as Option<Unit>);
    let var3875 : Int8 = Int8(126);
    var1058.func1061((var1117|>func1105), optionalParam1063 : func1124(var3821, optionalParam1126 : var216), optionalParam1095 : try { // block id: 3825
        Int32(82) ** (Int32(2) & 3)
    } catch (e: Exception) { // block id: 3829
        (Int32(-21)&127..=Int32(26)&127:(-34)|1);
        var1045;
        var373
    } finally { // block id: 3833
        var3835;
        var373
    }, optionalParam1097 : try { // block id: 3839
        var3841;
        ((var3875&127..Int8(-86)&127:(var502|1)), Int16(64), (var3882, var3014, (Int8(108)&127..Int8(-55)&127:121|1), (Int32(-104)&127..=var373&127:(var502|1)), var3894, var376), true, [(UInt64(15)&127..=UInt64(236)&127:109|1), (UInt64(19)&127..UInt64(45)&127:101|1), (UInt64(49)&127..UInt64(105)&127:(-19)|1), (UInt64(44)&127..=UInt64(199)&127:(-19)|1), (UInt64(134)&127..=UInt64(125)&127:55|1), (UInt64(224)&127..=UInt64(243)&127:(-99)|1), (UInt64(94)&127..UInt64(10)&127:(-58)|1), (UInt64(84)&127..UInt64(69)&127:67|1), (UInt64(201)&127..=UInt64(177)&127:(-16)|1), (UInt64(120)&127..UInt64(220)&127:(-93)|1)], var502);
        Option<Int64>.None
    } finally { // block id: 3904
        var1785 >>= ((UInt64(211)) & 7);
        if (true) { [true, true, false, true, false, false, false, true, false, false] } else { [false, true, var2471, var3916, true, var3323, var3561, false, false, var2471] } ;
        let var3928 : ?Int64 = ((Int64(UInt8(Int8(72)))&127..20&127:(26|1)) as Int64);
        if (false) { var3928 } else { var3928 } 
    });
    var450
}

func func1014(optionalParam1015 ! : (Int32, Range<UInt16>, Range<Int64>, Float32, Range<Int16>) = (Int32(-20), (UInt16(58)&127..UInt16(126)&127:(-105)|1), ((-118)&127..=(-12)&127:85|1), Float32(Float32(126.0)), (Int16(77)&127..=Int16(-45)&127:(-35)|1))) : Class29 { // block id: 1023
    var474|>func1025
}


func func1003(param1004 : (Int16, Range<Int16>, Class29, Int64)) : Range<Int16> { // block id: 1005
    var var1008 : Bool = true;
    var1008 &&= true;
    let var3971 : UInt64 = UInt64(6);
    var var3983 : UInt64 = UInt64(59);
    var var4022 : Range<Int16> = (Int16(UInt8(Int8(46)))&127..=Int16(125)&127:(Int64(UInt64(UInt16(164)))|1));
    if ((func1014(optionalParam1015 : var352).func453(namedParam454 : param1004, namedParam455 : var3944))) { match (var203 + (-75.0)) {
        case _ : Array<Class29> => 
            ((Int8(115)&127..Int8(-46)&127:89|1), var1546, var237, false, [(var3971&127..=var1302&127:(83|1)), (var3971&127..=var1302&127:(var502|1)), (UInt64(167)&127..UInt64(33)&127:(-37)|1), (UInt64(168)&127..=UInt64(75)&127:38|1), (var3983&127..UInt64(231)&127:(var502|1)), (UInt64(26)&127..UInt64(42)&127:(var3991|1)), var3328, var3328, (UInt64(18)&127..UInt64(130)&127:(-3)|1), (UInt64(180)&127..=UInt64(122)&127:(-122)|1)], 124);
            (Int16(54)&127..var1546&127:(var862|1))
        
        case _ : (Float64, Int8, Float32, (Int32, Range<UInt16>, Range<Int64>, Float32, Range<Int16>), Bool, String) => 
            (Int16(117)&127..Int16(92)&127:((-54)|1))
        
        case _ => 
            if (false) { Option<Class29>.Some(Class29()) } else { var4018 } ;
            ();
            var4022
        
        case 26.0 => 
            if (var3561) { Option<Option<Range<UInt64>>>.None } else { Option<Option<Range<UInt64>>>.None } ;
            [var4040, Option<(Int16, Range<Int16>, Class29, Int64)>.Some((var1546, (Int16(119)&127..Int16(4)&127:122|1), var450, 115)), var4040, var4040, Option<(Int16, Range<Int16>, Class29, Int64)>.None, var4040, var4040, var4040, var4040, Option<(Int16, Range<Int16>, Class29, Int64)>.Some(param1004)];
            let var4061 : Range<Int16> = (Int16(Int16(-36))&127..Int16(UInt8(Int8(Int8(-79))))&127:(Int64(UInt16(Int8(UInt8(107))))|1));
            if (var505) { var4061 } else { (Int16(23)&127..=Int16(76)&127:(-84)|1) } 
        
        case _ => 
            (Int16(-74)&127..=Int16(-100)&127:(-31)|1)
        
    } } else { (match (var450) {
        case _ => 
            var3835;
            var3416 %= ((UInt32(128)) | 1);
            var4091
        
    } ?? var4022) } 
}

func func997(param998 : Range<UInt8>) : Option<Unit> { // block id: 999
    let var4095 : ((Int16, Range<Int16>, Class29, Int64)) -> Range<Int16> = func1003;
    (match (var4099) {
        case _ : Option<Array<Option<Unit>>> => 
            if (true) { var808 } else { var808 } 
        
        case _ => 
            ();
            var var4140 : Range<Int16> = (Int16(-106)&127..Int16(-82)&127:95|1);
            if (true) { (Int16(-75), var4140, Class29(), 98) } else { var808 } 
        
    }|>var4095)|>func341;
    var216
}

public func func436(param437 : UInt16) : Int64 { // block id: 438
    let var851 : Range<Int16> = (Int16(-107)&127..Int16(UInt8(UInt8(UInt8(136))))&127:(Int64(Int16(88))|1));
    let var950 : (Float64, Int32, Option<Option<Int64>>, (Int32, Range<UInt16>, Range<Int64>, Float32, Range<Int16>), Array<Range<UInt64>>, Range<Int32>, Array<UInt64>) = (Float64(79.0), Int32(93), Option<Option<Int64>>.None, (Int32(111), (UInt16(Int16(-13))&127..UInt16(Int8(48))&127:(Int64(UInt64(0))|1)), (109&127..(-35)&127:103|1), Float32(Float32(Float32(-25.0))), (Int16(Int8(-110))&127..Int16(-50)&127:(78|1))), [(UInt64(179)&127..=UInt64(154)&127:21|1), (UInt64(152)&127..=UInt64(14)&127:(-21)|1), (UInt64(230)&127..=UInt64(33)&127:(-62)|1), (UInt64(14)&127..=UInt64(61)&127:99|1), (UInt64(252)&127..=UInt64(188)&127:(-60)|1), (UInt64(86)&127..UInt64(208)&127:117|1), (UInt64(225)&127..UInt64(154)&127:51|1), (UInt64(161)&127..=UInt64(40)&127:(-70)|1), (UInt64(200)&127..=UInt64(229)&127:(-65)|1), (UInt64(204)&127..=UInt64(164)&127:(-69)|1)], (Int32(117)&127..=Int32(-74)&127:(-80)|1), [UInt64(Int16(-21)), UInt64(Int8(UInt8(97))), UInt64(Int16(46)), UInt64(42), UInt64(169), UInt64(174), UInt64(67), UInt64(180), UInt64(5), UInt64(169)]);
    let var4147 : (Range<UInt8>) -> Option<Unit> = func997;
    func func445() : Option<Int64> { // block id: 446
        let var873 : Class29 = Class29();
        var loopTimeVar888 : Int64 = 0;
        do {
            loopTimeVar888++;
            (var882 ?? ());
            var733
        } while ((var450.func453(namedParam454 : (Int16(-54), var851, var450, var862), namedParam455 : [Class29(), Class29(), Class29(), var450, var450, var873, Class29(), Class29(), Class29(), Class29()])) && loopTimeVar888 < 100 ) ;
        Aggregate894<Option<Array<Option<Unit>>>>.var899[0][1];
        func func993() : Option<Int64> { // block id: 994
            let var4220 : Range<Int32> = (Int32(98)&127..Int32(75)&127:(-95)|1);
            match ((try { // block id: 4150
                    var4152
                } catch (e: Exception) { // block id: 4154
                    (var1546, (var1546&127..=Int16(95)&127:((-110)|1)), var450, 96);
                    (UInt8(239)&127..=UInt8(231)&127:113|1)
                } finally { // block id: 4164
                    var var4169 : ??Int64 = Option<Option<Int64>>.Some(((35&127..=70&127:(-124)|1) as Int64));
                    (29.0, Int32(-27), var4169, var4174, [(UInt64(173)&127..=UInt64(92)&127:(-13)|1), (var1302&127..=UInt64(76)&127:((-96)|1)), (UInt64(35)&127..var1785&127:(var862|1)), (UInt64(26)&127..=UInt64(158)&127:53|1), var3328, (UInt64(242)&127..=UInt64(142)&127:(var862|1)), var3328, (UInt64(131)&127..UInt64(64)&127:(-103)|1), (UInt64(211)&127..=var22&127:((-118)|1)), var3328], var4220, [UInt64(168), UInt64(7), UInt64(105), UInt64(42), UInt64(11), UInt64(113), UInt64(230), UInt64(16), UInt64(168), UInt64(138)]);
                    var3882 >>= ((var3882) & 7);
                    let var4227 : Range<UInt8> = (UInt8(88)&127..=UInt8(28)&127:32|1);
                    var4227
                }|>var4147)) {
                case _ : Range<Int32> => 
                    var1143;
                    Option<Aggregate894<Option<Array<Option<Unit>>>>>.None;
                    var474 >>= ((Int8(-21)) & 7)
                
                case _ => 
                    (var474&127..Int8(126)&127:(var502|1));
                    ()
                
                case _ => 
                    ();
                    var3416 **= (UInt32(60) & 3)
                
            };
            var4252
        }
;
        (var950[2] ?? func993())
    }
;
    (func445() ?? try { // block id: 4265
        34 / ((57) | 1)
    } catch (e: Exception) { // block id: 4269
        ();
        var862
    })
}


func func318(param319 : Range<Int8>) : Option<(Int16, Range<Int16>, Class29, Int64)> { // block id: 320
    let var327 : ?(Int16, Range<Int16>, Class29, Int64) = Option<(Int16, Range<Int16>, Class29, Int64)>.Some((Int16(117), (Int16(62)&127..Int16(-91)&127:(-99)|1), Class29(namedParam334 : (UInt8(32)&127..UInt8(237)&127:(-57)|1)), Int64(UInt8(UInt8(147)))));
    var var4371 : Range<Int16> = (Int16(58)&127..Int16(-49)&127:(Int64(Int32(89))|1));
    let var4391 : (Int16, Range<Int16>, Class29, Int64) = (Int16(UInt16(188)), (Int16(75)&127..=Int16(-111)&127:(Int64(UInt8(Int8(-83)))|1)), Class29(), (-1));
    if (var144) { [var327, var4040, Option<(Int16, Range<Int16>, Class29, Int64)>.Some((Int16(-109), (Int16(-111)&127..=Int16(-50)&127:66|1), var450, (-44))), Option<(Int16, Range<Int16>, Class29, Int64)>.Some(var808), Option<(Int16, Range<Int16>, Class29, Int64)>.None, Option<(Int16, Range<Int16>, Class29, Int64)>.Some(var808), var4040, var4040, Option<(Int16, Range<Int16>, Class29, Int64)>.Some((Int16(17), var4371, var450, (-16))), Option<(Int16, Range<Int16>, Class29, Int64)>.None][8] } else { ((var4388 ?? var4391) as (Int16, Range<Int16>, Class29, Int64)) } 
}


func func306(param307 : (Int32) -> UInt64) : Unit { // block id: 310
    var var4404 : (Range<Int8>) -> Option<(Int16, Range<Int16>, Class29, Int64)> = func318;
    let var4407 : Range<Int8> = (Int8(-25)&127..Int8(Int8(38))&127:(Int64(Int32(Int32(98)))|1));
    var var4421 : Int64 = (-54);
    let var4442 : Unit = ();
    match (((var4407|>var4404) ?? (Int16(-45), (Int16(-79)&127..var1546&127:(var4421|1)), var450, 98))) {
        case _ => 
            var var4431 : Interface32 = Class29(namedParam334 : (UInt8(93)&127..UInt8(135)&127:(Int64(Int32(UInt32(14)))|1)));
            if (true) { Class29() } else { var4431 } ;
            (Option<Unit>.Some(var4442), var1222);
            ()
        
    };
    var var4475 : ?Unit = (((UInt8(96)&127..UInt8(Int8(-6))&127:(Int64(Int16(51))|1)) as Bool) as Unit);
    let var4492 : Range<Int8> = (Int8(17)&127..Int8(Int8(UInt8(102)))&127:(34|1));
    let var4500 : Range<Int32> = (Int32(-29)&127..=Int32(Int16(UInt8(231)))&127:(Int64(UInt8(137))|1));
    var loopTimeVar4555 : Int64 = 0;
    (if ((var803 ?? false)) { match (Option<Array<Option<Unit>>>.None) {
        case caseVar4455 => 
            var4442;
            ();
            let var4462 : ?Unit = (Option<Option<Int64>>.Some(Option<Int64>.None) as Unit);
            if (var3916) { var4462 } else { var4462 } 
        
        case caseVar4469 => 
            var2949;
            if (var144) { var4475 } else { Option<Unit>.None } 
        
        case _ => 
            (var3882, (-95.0), var4492, var4500, Float32(80.0), (UInt16(161)&127..UInt16(133)&127:41|1));
            Int32(-105);
            var4475
        
        case caseVar4514 => 
            var1143;
            var502++;
            if (var3323) { var4475 } else { Option<Unit>.None } 
        
        case _ => 
            var474 >> ((Int8(-125)) & 7);
            if (false) { Option<Unit>.Some(var1143) } else { var4475 } 
        
    } } else { (Option<Option<Unit>>.None ?? var4475) }  ?? while ((try { // block id: 4542
        var1143;
        (94&127..(-119)&127:53|1);
        Float32(-71.0) == Float32(111.0)
    } catch (_) { // block id: 4548
        (-118);
        var373 == Int32(62)
    }) && loopTimeVar4555 < 100 ) {
        loopTimeVar4555++;

    })
}

public func func4559<T0, T1>(param19 : Int32) : UInt64 { // block id: 20
    var22
}

public func func287(param288 : Range<Int64>) : Unit { // block id: 289
    let var4557 : ((Int32) -> UInt64) -> Unit = func306;
    func func291(namedParam292 ! : Int16, optionalParam293 ! : Range<Int32> = (Int32(UInt16(12))&127..Int32(Int32(72))&127:(Int64(UInt8(12))|1)), optionalParam301 ! : Rune = 'c', namedParam303 ! : Int8) : Unit { // block id: 304
        func4559<UInt16, Rune>|>var4557;
        ()
    }
;
    let var4570 : (Float64, Int32, Option<Option<Int64>>, (Int32, Range<UInt16>, Range<Int64>, Float32, Range<Int16>), Array<Range<UInt64>>, Range<Int32>, Array<UInt64>) = ((-7.0), Int32(UInt32(33)), (Option<(Int16, Range<Int16>, Class29, Int64)>.None as Option<Int64>), (Int32(-66), (UInt16(68)&127..=UInt16(Int8(72))&127:(Int64(UInt32(63))|1)), (31&127..=Int64(Int16(-52))&127:(101|1)), Float32(Float32(36.0)), (Int16(-23)&127..=Int16(-124)&127:38|1)), [(UInt64(140)&127..UInt64(18)&127:((-22)|1)), (UInt64(44)&127..=UInt64(35)&127:(-108)|1), (UInt64(58)&127..=UInt64(80)&127:(60|1)), (UInt64(2)&127..UInt64(211)&127:(-3)|1), (UInt64(93)&127..=UInt64(10)&127:66|1), (UInt64(UInt32(39))&127..UInt64(UInt8(77))&127:(78|1)), (UInt64(UInt64(204))&127..UInt64(78)&127:(Int64(Int32(-63))|1)), (UInt64(Int32(-114))&127..UInt64(193)&127:((-47)|1)), (UInt64(210)&127..UInt64(Int32(116))&127:(63|1)), (UInt64(Int8(-78))&127..=UInt64(Int16(47))&127:((-48)|1))], (Int32(UInt8(13))&127..Int32(16)&127:(Int64(UInt8(53))|1)), [UInt64(37), UInt64(119), UInt64(128), UInt64(110), UInt64(115), UInt64(178), UInt64(72), UInt64(232), UInt64(73), UInt64(72)]);
    let var4684 : (Int16, Range<Int16>, Class29, Int64) = (Int16(UInt16(Int16(42))), (Int16(96)&127..Int16(4)&127:(-53)|1), Class29(), Int64(Int32(Int16(Int8(-100)))));
    func291(namedParam292 : Int16(50), namedParam303 : if (if (false) { // block id: 4567
        var1143;
        var4570;
        true
    } else { // block id: 4641
        var var4649 : Range<UInt8> = (UInt8(52)&127..UInt8(158)&127:48|1);
        [Class29(namedParam334 : (UInt8(83)&127..=UInt8(68)&127:(-72)|1)), var450, var450, Class29(namedParam334 : var4649), var450, Class29(namedParam334 : (UInt8(228)&127..=UInt8(166)&127:(-128)|1)), Class29(namedParam334 : (var4346&127..=var4658&127:(78|1))), var450, Class29(), Class29()];
        var var4670 : Range<Int16> = (Int16(-105)&127..Int16(-36)&127:46|1);
        [Option<(Int16, Range<Int16>, Class29, Int64)>.Some((var1546, var4670, Class29(namedParam334 : var4649), var3991)), var4040, Option<(Int16, Range<Int16>, Class29, Int64)>.Some((Int16(-98), (Int16(122)&127..Int16(87)&127:21|1), var450, var862)), Option<(Int16, Range<Int16>, Class29, Int64)>.Some(var4684), var4040, var4040, var4040, var4040, Option<(Int16, Range<Int16>, Class29, Int64)>.Some(var4684), var4040];
        false
    }) { // block id: 4703
        ();
        Option<Array<UInt64>>.None;
        var474
    } else { // block id: 4707
        Option<Array<UInt64>>.None;
        var474
    })
}



public func func8(param9 : String) : Int64 { // block id: 10
    let var163 : ?Unit = (UInt8(UInt8(167)) as Unit);
    func func66(param67 : UInt32, param68 : Float32, optionalParam69 ! : UInt64 = UInt64(36), optionalParam71 ! : (Float32) -> UInt64 = { lambdaParameter74 : Float32 => UInt64(UInt8(UInt8(119))) }) : Class29 { // block id: 81
        let var89 : ?Int32 = (Int32(33) as Int32);
        var var98 : Int16 = Int16(-114);
        var var126 : Class29 = Class29();
        var loopTimeVar141 : Int64 = 0;
        (match (var89) {
            case caseVar94 => 
                ();
                var98;
                let var102 : Bool = (UInt64(UInt32(UInt32(UInt16(8)))) is Int64);
                let var109 : ?Unit = Option<Unit>.Some(());
                if (var102) { var109 } else { Option<Unit>.Some(()) } 
            
            case caseVar116 : Unit => 
                Option<Unit>.Some(())
            
            case _ => 
                Option<Unit>.None
            
        } ?? while ((var126.var129) && loopTimeVar141 < 100 ) {
            loopTimeVar141++;
            66.0 > 39.0;
            var var137 : UInt8 = UInt8(107);
            var137 += UInt8(74)
        });
        var loopTimeVar158 : Int64 = 0;
        while ((var144) && loopTimeVar158 < 100 ) {
            loopTimeVar158++;
            var loopTimeVar156 : Int64 = 0;
            while ((var144) && loopTimeVar156 < 100 ) {
                loopTimeVar156++;
                let var151 : ?Unit = Option<Unit>.Some(());
                var151;
                ()
            }
        };
        let var4711 : (Range<Int64>) -> Unit = func287;
        try { // block id: 160
            var163.getOrThrow();
            var89|>func168;
            (Option<Class29>.None ?? Class29())
        } catch (_) { // block id: 262
            let var265 : Bool = false;
            var loopTimeVar270 : Int64 = 0;
            while ((var265) && loopTimeVar270 < 100 ) {
                loopTimeVar270++;
                ()
            };
            var var274 : (Int16, Range<Int16>, Class29, Int64) = (Int16(126), (Int16(95)&127..Int16(UInt16(102))&127:((-29)|1)), Class29(), (-19));
            var274[2]
        } finally { // block id: 285
            (37&127..=29&127:109|1)|>var4711;
            var633;
            Class29(namedParam334 : (UInt8(189)&127..=UInt8(170)&127:24|1))
        }
    }
;
    func66(UInt32(151), Float32(58.0), optionalParam71 : func12).func4721(var3144, namedParam4723 : var4872)|>func12;
    let var4968 : ?Option<(Int16, Range<Int16>, Class29, Int64)> = ([Class29(), Class29(namedParam334 : (UInt8(155)&127..=UInt8(182)&127:((-55)|1))), Class29(), Class29(), Class29(namedParam334 : (UInt8(203)&127..=UInt8(147)&127:((-5)|1))), Class29(namedParam334 : (UInt8(121)&127..=UInt8(93)&127:(66|1))), Class29(namedParam334 : (UInt8(85)&127..UInt8(28)&127:((-4)|1))), Class29(), Class29(namedParam334 : (UInt8(54)&127..UInt8(210)&127:79|1)), Class29(namedParam334 : (UInt8(194)&127..UInt8(79)&127:((-63)|1)))] as Option<(Int16, Range<Int16>, Class29, Int64)>);
    (if (try { // block id: 4944
        ();
        var4947;
        var3882 == UInt16(244)
    } catch (e: Exception) { // block id: 4952
        if (var3916) { ((-111)&127..(-125)&127:80|1) } else { ((-103)&127..=var3991&127:(var502|1)) } ;
        true
    } finally { // block id: 4961
        var373 >= Int32(-1)
    }) { try { // block id: 4966
        var4968
    } finally { // block id: 5002
        var373 -= Int32(91);
        ();
        if (true) { var4968 } else { Option<Option<(Int16, Range<Int16>, Class29, Int64)>>.None } 
    } } else { Option<Option<(Int16, Range<Int16>, Class29, Int64)>>.Some(var4388) }  ?? ((Option<Option<Option<(Int16, Range<Int16>, Class29, Int64)>>>.Some(var4968) ?? Option<Option<(Int16, Range<Int16>, Class29, Int64)>>.None) ?? if (var144) { Option<(Int16, Range<Int16>, Class29, Int64)>.Some(var808) } else { var4388 } ));
    if (try { // block id: 5030
        var3916
    } catch (e: Exception) { // block id: 5032
        ();
        ();
        var3561
    } finally { // block id: 5036
        var1546 |= Int16(-51);
        var2471
    }) { // block id: 5041
        ();
        var var5044 : (Float32, (UInt16, Float64, Range<Int8>, Range<Int32>, Float32, Range<UInt16>), Int8) = (Float32(Float32(Float32(Float32(-52.0)))), (UInt16(Int8(62)), Float64((-24.0)), (Int8(-108)&127..=Int8(85)&127:63|1), (Int32(4)&127..Int32(57)&127:(-34)|1), Float32(Float32(Float32(-57.0))), (UInt16(247)&127..=UInt16(40)&127:(59|1))), Int8(UInt8(Int8(UInt8(31)))));
        var5044;
        31
    } else if (if (var3916) { // block id: 5071
        var3144;
        false
    } else { // block id: 5074
        (UInt64(160)&127..=UInt64(142)&127:29|1);
        var1302 ^ var5079;
        true
    }) { // block id: 5085
        var3991
    } else { // block id: 5087
        let var5095 : ?Unit = Option<Unit>.None;
        if (var505) { [var163, Option<Unit>.Some(var1143), var5095, Option<Unit>.Some(var4947), Option<Unit>.Some(()), Option<Unit>.None, var163, Option<Unit>.None, Option<Unit>.Some(()), var163] } else { [Option<Unit>.Some(()), Option<Unit>.None, Option<Unit>.None, Option<Unit>.Some(()), Option<Unit>.None, var5095, var5095, Option<Unit>.None, var163, Option<Unit>.None] } ;
        var3991
    } / ((Int64(try { // block id: 5123
        if (var3561) { Option<Option<Unit>>.None } else { Option<Option<Unit>>.Some(var5129) } ;
        UInt32(104)
    } catch (_) { // block id: 5132
        UInt32(123) / ((UInt32(13)) | 1)
    } finally { // block id: 5136
        var1546 |= Int16(-99);
        var var5141 : ??Int64 = Option<Option<Int64>>.Some(Option<Int64>.Some(91));
        var5141;
        UInt32(148)
    })) | 1)
}

main(): Int64 {
    try {
        let var5147 : (String) -> Int64 = func8;
        66 ^ ("""
`PdQ-
OPKhm
"""|>var5147)
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var22*var22), 64)
        crccheck.updateBuffer(UInt64(var373*var373), 64)
        crccheck.updateBuffer(UInt64(var474*var474), 64)
        crccheck.updateBuffer(UInt64(var502*var502), 64)
        crccheck.updateBuffer(UInt64(var862*var862), 64)
        crccheck.updateBuffer(UInt64(var1279*var1279), 64)
        crccheck.updateBuffer(UInt64(var1302*var1302), 64)
        crccheck.updateBuffer(UInt64(var1546*var1546), 64)
        crccheck.updateBuffer(UInt64(var1564*var1564), 64)
        crccheck.updateBuffer(UInt64(var1785*var1785), 64)
        crccheck.updateBuffer(UInt64(var1933*var1933), 64)
        crccheck.updateBuffer(UInt64(var3416*var3416), 64)
        crccheck.updateBuffer(UInt64(var3882*var3882), 64)
        crccheck.updateBuffer(UInt64(var3991*var3991), 64)
        crccheck.updateBuffer(UInt64(var4346*var4346), 64)
        crccheck.updateBuffer(UInt64(var4658*var4658), 64)
        crccheck.updateBuffer(UInt64(var4833*var4833), 64)
        crccheck.updateBuffer(UInt64(var5079*var5079), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Class29 {

}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_unexpected_declaration_in_scope
// ASSERT: scan parse_trailing_closure_only_follow_name
// ASSERT: scan parse_expected_expr_or_decl_in
// ASSERT: scan parse_expected_left_brace
// ASSERT: scan parse_expected_case


