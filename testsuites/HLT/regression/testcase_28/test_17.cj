/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output


let var52 : (Rune, Int16, Bool, Int16, UInt8) = ('J', Int16(UInt16(UInt8(87))), false, Int16(100), UInt8(UInt8(215)))
public var var69 : Int8 = Int8(Int8(-84))
public var var118 : Bool = true
let var123 : Interface9 = Class6()
public var var219 : Int32 = Int32(Int32(22))
public let var249 : Float32 = Float32(Float32(115.0))
public var var327 : Int16 = Int16(-22)
public let var379 : Interface12 = Class6()
var var386 : Unit = ()
let var463 : Interface13 = Class6()
public let var497 : Float64 = Float64((-19.0))
public let var541 : ?Range<Int32> = (Class6() as Range<Int32>)
let var636 : Rune = '9'
let var664 : UInt32 = UInt32(UInt8(UInt8(170)))
let var671 : Unit = ()
var var674 : UInt32 = UInt32(Int32(UInt32(Int32(91))))
public let var688 : ?Class6 = Option<Class6>.None
public let var727 : ???Range<Int32> = ((Option<UInt16>.None as Unit) as Option<Option<Range<Int32>>>)
var var795 : Class6 = Class6()
public let var835 : ?Interface12 = ((Float64(Float64(Float32(16.0))) as Interface12) as Interface12)
public var var870 : Int64 = 84
var var890 : Array<Bool> = [true, true, false, true, true, false, false, false, true, false]
let var964 : Array<Option<UInt64>> = [Option<UInt64>.None, Option<UInt64>.None, ("++O%KoJ9C'" as UInt64), ((Int32(Int32(-95)), UInt64(UInt8(68)), Option<Bool>.None, ('J', Int16(43), true, Int16(33), UInt8(192)), UInt16(145)) as UInt64), Option<UInt64>.None, Option<UInt64>.None, ((([true, false, false, true, true, true, true, false, true, false] is Interface12) as Option<(Float64, Range<UInt32>, Range<Int32>, Int8, UInt16)>) as UInt64), Option<UInt64>.None, Option<UInt64>.None, Option<UInt64>.None]
let var1011 : (UInt32, Option<Option<(Float64, Range<UInt32>, Range<Int32>, Int8, UInt16)>>, Range<UInt16>) = (UInt32(244), ((UInt64(233)&127..UInt64(Int8(-122))&127:(Int64(UInt16(60))|1)) as Option<(Float64, Range<UInt32>, Range<Int32>, Int8, UInt16)>), (UInt16(89)&127..UInt16(81)&127:69|1))
var var1042 : Float32 = Float32(Float32(Float32(Float32(Float32(-66.0)))))
let var1102 : (UInt64, UInt8, Unit, UInt64, Unit, Int16, UInt64, String, Int8) = (UInt64(107), UInt8(51), (), UInt64(210), (), Int16(-42), UInt64(155), """
~P]c:
]Wei_
""", Int8(UInt8(UInt8(UInt8(16)))))
public let var1123 : Interface14 = Class6()
let var1162 : UInt64 = UInt64(82)
public var var1189 : (Interface10, Range<Int16>) = (Class6(), (Int16(-95)&127..=Int16(-116)&127:(-61)|1))
public let var1266 : UInt64 = UInt64(58)
public let var1355 : (Int32, UInt64, Option<Bool>, (Rune, Int16, Bool, Int16, UInt8), UInt16) = (Int32(-27), UInt64(97), Option<Bool>.None, ('E', Int16(80), ((31&127..(-53)&127:(-37)|1) is Interface9), Int16(-9), UInt8(UInt8(Int8(124)))), UInt16(94))
public let var1448 : Interface11 = Class6()
let var1545 : (UInt16, UInt16, UInt32, UInt16, Array<Bool>) = (UInt16(57), UInt16(Int16(UInt8(UInt8(75)))), UInt32(Int16(Int8(-52))), UInt16(72), [true, true, ((Int8(101)&127..=Int8(-116)&127:(-65)|1) is (Int16, Bool, String, Bool, UInt64, String, Float64, Int16)), true, ((Class6(), (Int16(74)&127..Int16(50)&127:((-55)|1))) is Array<Float32>), (Option<Interface11>.None is Option<Class6>), (Class6() is UInt16), false, (((UInt16(154), UInt16(181), UInt32(254), UInt16(76), [false, true, true, false, true, false, true, true, true, true]) as UInt8) is UInt8), (12.0 is (Rune, Int16, Bool, Int16, UInt8))])
var var1636 : UInt64 = UInt64(UInt8(234))
public var var1704 : Option<(Float64, Range<UInt32>, Range<Int32>, Int8, UInt16)> = Option<(Float64, Range<UInt32>, Range<Int32>, Int8, UInt16)>.None
let var1725 : (Float64, Range<UInt32>, Range<Int32>, Int8, UInt16) = (24.0, (UInt32(25)&127..UInt32(174)&127:(-11)|1), (Int32(-123)&127..=Int32(Int16(Int8(-124)))&127:(Int64(UInt64(191))|1)), Int8(-91), UInt16(UInt8(133)))
public var var1743 : (Range<Int64>, (Rune, Int16, Bool, Int16, UInt8), Int32, Range<UInt16>, (Int16, Range<Int64>, Range<Int16>, Range<UInt8>, Option<Range<Int32>>, Range<UInt32>), Array<Bool>) = ((84&127..=(-15)&127:73|1), ('v', Int16(Int8(UInt8(65))), false, Int16(Int8(Int8(-103))), UInt8(33)), Int32(95), (UInt16(UInt16(160))&127..UInt16(UInt8(190))&127:(Int64(Int8(-71))|1)), (Int16(UInt16(37)), (43&127..=6&127:113|1), (Int16(-97)&127..=Int16(-53)&127:125|1), (UInt8(Int8(-123))&127..=UInt8(UInt8(117))&127:(30|1)), Option<Range<Int32>>.None, (UInt32(128)&127..UInt32(135)&127:(-87)|1)), [false, false, false, false, true, true, true, false, true, false])
public var var1901 : ??Range<Int32> = (81 as Option<Range<Int32>>)
var var1926 : Array<Range<Int32>> = [(Int32(73)&127..Int32(-107)&127:117|1), (Int32(-36)&127..Int32(-73)&127:118|1), (Int32(90)&127..=Int32(22)&127:27|1), (Int32(UInt8(179))&127..Int32(Int8(Int8(62)))&127:(36|1)), (Int32(5)&127..Int32(22)&127:(-29)|1), (Int32(20)&127..=Int32(Int32(Int8(-106)))&127:(Int64(UInt16(196))|1)), (Int32(Int8(Int8(103)))&127..Int32(-102)&127:(55|1)), (Int32(-106)&127..Int32(1)&127:61|1), (Int32(Int32(-73))&127..Int32(UInt16(106))&127:(103|1)), (Int32(104)&127..Int32(Int16(UInt8(123)))&127:((-40)|1))]
var var1982 : Range<UInt64> = (UInt64(155)&127..UInt64(11)&127:126|1)
var var1992 : Range<Int32> = (Int32(7)&127..Int32(0)&127:20|1)
var var2001 : Interface14 = Class6()
public var var2015 : Array<Int8> = [Int8(59), Int8(-94), Int8(108), Int8(-41), Int8(-51), Int8(-30), Int8(82), Int8(-14), Int8(-45), Int8(40)]
let var2057 : ?Unit = ((((-120)&127..=18&127:65|1), ('2', Int16(38), true, Int16(UInt8(18)), UInt8(176)), Int32(UInt8(Int8(85))), (UInt16(247)&127..=UInt16(73)&127:(-109)|1), (Int16(-80), (59&127..=5&127:(-101)|1), (Int16(89)&127..Int16(-20)&127:(-86)|1), (UInt8(93)&127..UInt8(185)&127:(43|1)), (Int16(-70) as Range<Int32>), (UInt32(53)&127..UInt32(242)&127:6|1)), [((UInt32(117)&127..=UInt32(221)&127:(-49)|1) is Option<(Float64, Range<UInt32>, Range<Int32>, Int8, UInt16)>), ((UInt32(52), Option<Option<(Float64, Range<UInt32>, Range<Int32>, Int8, UInt16)>>.None, (UInt16(17)&127..UInt16(134)&127:((-71)|1))) is (Interface12, (Unit) -> Interface11, Int32) -> Class6), true, ([false, false, false, true, true, true, true, false, false, true] is (Option<Range<Int32>>) -> Range<Int16>), false, (UInt32(149) is Range<UInt64>), true, true, true, false]) as Unit)
public let var2468 : (Float64, (Int16, Range<Int64>, Range<Int16>, Range<UInt8>, Option<Range<Int32>>, Range<UInt32>)) = (Float64((-34.0)), (Int16(-35), ((-25)&127..=(-18)&127:(-74)|1), (Int16(UInt16(218))&127..Int16(UInt16(21))&127:((-58)|1)), (UInt8(UInt8(194))&127..UInt8(Int8(-50))&127:(Int64(UInt32(6))|1)), (UInt16(UInt16(220)) as Range<Int32>), (UInt32(206)&127..UInt32(16)&127:(-76)|1)))
public var var2624 : Interface11 = Class6()
public var var2646 : ?UInt8 = Option<UInt8>.None
let var2771 : Int64 = 126
public let var2792 : Option<Array<Range<Int32>>> = Option<Array<Range<Int32>>>.None
public var var2811 : ??Bool = Option<Option<Bool>>.None
var var2824 : UInt64 = UInt64(34)
var var2853 : UInt64 = UInt64(Int16(-61))
public var var2887 : Option<Class6> = Option<Class6>.None
public interface Interface11 {

}

public interface Interface12 {

}

public interface Interface10 <: Interface11 & Interface12 {
    static func func777(namedParam778 ! : Range<Int32>, namedParam779 ! : (Int16, Range<Int64>, Range<Int16>, Range<UInt8>, Option<Range<Int32>>, Range<UInt32>), namedParam780 ! : Unit, namedParam781 ! : Range<UInt8>) : Range<UInt32> { // block id: 782
        (var1743[4]|>func786)[1]
    }

}

public interface Interface14 {

}

public interface Interface13 <: Interface14 {

}

public interface Interface9 <: Interface10 & Interface13 {

}

public open class Class6 <: Interface9 & Resource {
    public init() { // block id: 8

    }
;
    let var199 : (Int16, Bool, String, Bool, UInt64, String, Float64, Int16) = (Int16(106), false, "4iuy\\}AKPO", true, UInt64(222), "+=n/'i^M=%", 14.0, Int16(58));
    public init(param749 : Interface13, param750 : Rune, namedParam751 ! : Option<Option<Range<Int32>>>) { // block id: 752
        var var757 : Array<Bool> = Array<Bool>(10){ i => false };
        var loopTimeVar1809 : Int64 = 0;
        while ((var757[8]) && loopTimeVar1809 < 100 ) {
            loopTimeVar1809++;
            var var1782 : (Int16, Range<Int64>, Range<Int16>, Range<UInt8>, Option<Range<Int32>>, Range<UInt32>) = (Int16(34), (Int64(UInt8(Int8(64)))&127..(-21)&127:(48|1)), (Int16(Int8(37))&127..=Int16(UInt16(130))&127:(Int64(Int8(10))|1)), (UInt8(224)&127..UInt8(72)&127:(-70)|1), Option<Range<Int32>>.None, (UInt32(116)&127..UInt32(188)&127:(Int64(UInt32(UInt32(152)))|1)));
            func777(namedParam778 : (Int32(-83)&127..=Int32(-24)&127:61|1), namedParam779 : var1782, namedParam780 : (), namedParam781 : (UInt8(97)&127..UInt8(110)&127:120|1))
        }
    }
;
    public static var var2161 : ?Interface13 = Option<Interface13>.None;
    static var var2173 : Unit = ();
    public init(param2122 : Option<Unit>, optionalParam2123 ! : Interface12 = Class6(), namedParam2125 ! : Array<Bool>) { // block id: 2126
        match ((try { // block id: 2134
                if (var118) { Option<Interface12>.Some(optionalParam2123) } else { Option<Interface12>.Some(Class6()) } ;
                ();
                var var2147 : ?Interface13 = ([(), (), (), (), (), (), (), (), (), ()] as Interface13);
                if (var118) { Option<Interface13>.Some(Class6()) } else { var2147 } 
            } catch (e: Exception) { // block id: 2150
                (Class6(), (Int16(-7)&127..Int16(54)&127:((-44)|1)));
                ();
                if (var118) { var2161 } else { var2161 } 
            } ?? try { // block id: 2165
                var386;
                if (var118) { var463 } else { var463 } 
            } finally { // block id: 2171
                var2173;
                var1636 = var1636;
                if (false) { var463 } else { var463 } 
            })) {
            case _ => 
                ();
                var497 ** Float64(Int32(var497) & 3)
            
        }
    }
;
    public init(param2212 : Array<Unit>, param2213 : (UInt16, UInt16, UInt32, UInt16, Array<Bool>), param2214 : Option<UInt64>, param2215 : Interface14) { // block id: 2216
        var964
    }
;
    public init(param2321 : Float64) { // block id: 2322
        Option<Option<Option<Range<Int32>>>>.None;
        var1189;
        var loopTimeVar2341 : Int64 = 0;
        do {
            loopTimeVar2341++;
            UInt16(243)
        } while ((match (if (false) { var1448 } else { var1448 } ) {
            case _ : Range<Int8> => 
                true
            
            case _ => 
                var118
            
        }) && loopTimeVar2341 < 100 ) 
    }
;
    public init(namedParam2396 ! : Option<Option<Bool>>, optionalParam2397 ! : Array<UInt64> = [UInt64(Int16(-15)), UInt64(Int32(UInt16(59))), UInt64(95), UInt64(23), UInt64(Int8(21)), UInt64(UInt32(Int32(UInt16(219)))), UInt64(172), UInt64(69), UInt64(53), UInt64(109)]) { // block id: 2417
        var463;
        var var2422 : ?Array<Float32> = Option<Array<Float32>>.Some([Float32(-112.0), Float32(-52.0), Float32(19.0), Float32(114.0), Float32(3.0), Float32(-81.0), Float32(5.0), Float32(112.0), Float32(-56.0), Float32(-29.0)]);
        let var2442 : Option<Float32> = (Class6() as Float32);
        let var2522 : Range<Int32> = (Int32(-5)&127..=Int32(90)&127:63|1);
        let var2540 : Option<Option<(Float64, Range<UInt32>, Range<Int32>, Int8, UInt16)>> = ([true, ((UInt8(75)&127..=UInt8(106)&127:((-62)|1)) is Option<Array<Range<Int32>>>), true, false, ([(), (), (), (), (), (), (), (), (), ()] is Option<Interface12>), true, true, (Int32(106) is UInt16), (Option<Interface12>.None is Interface9), ([Int8(-72), Int8(111), Int8(118), Int8(30), Int8(26), Int8(89), Int8(108), Int8(47), Int8(-127), Int8(123)] is (Range<Int64>, (Rune, Int16, Bool, Int16, UInt8), Int32, Range<UInt16>, (Int16, Range<Int64>, Range<Int16>, Range<UInt8>, Option<Range<Int32>>, Range<UInt32>), Array<Bool>))] as Option<(Float64, Range<UInt32>, Range<Int32>, Int8, UInt16)>);
        let var2562 : Range<UInt16> = (UInt16(Int8(-76))&127..UInt16(Int8(78))&127:((-7)|1));
        if ((var2422 is (Interface13) -> UInt32)) { // block id: 2425
            var loopTimeVar2430 : Int64 = 0;
            while ((false) && loopTimeVar2430 < 100 ) {
                loopTimeVar2430++;

            };
            if (true) { var1189 } else { var1189 } 
        } else if ((var2442 ?? Float32(-40.0)) <= (Option<Float32>.None ?? var249)) { // block id: 2449
            if (false) { // block id: 2452
                var671;
                var219 **= (var219 & 3);
                var69--
            };
            if (false) { // block id: 2461
                var2015;
                var2173
            } else if (var118) { // block id: 2465
                var671;
                var2468;
                ()
            };
            var var2499 : Option<(Interface10, Range<Int16>)> = Option<(Interface10, Range<Int16>)>.Some((Class6(), (Int16(-76)&127..Int16(-88)&127:(-66)|1)));
            (var2499 ?? var1189)
        } else { // block id: 2505
            match (UInt8(160)) {
                case 253 | 26 | 113 => 
                    if (var118) { [(Int32(-110)&127..=Int32(-89)&127:24|1), (Int32(13)&127..=Int32(53)&127:6|1), (Int32(-42)&127..=Int32(-107)&127:(-100)|1), (Int32(-59)&127..=Int32(116)&127:(-43)|1), (Int32(-117)&127..=Int32(73)&127:6|1), (Int32(85)&127..=Int32(10)&127:(-17)|1), (Int32(-85)&127..=Int32(-66)&127:22|1), (Int32(124)&127..Int32(-43)&127:(-10)|1), (Int32(-115)&127..=Int32(86)&127:121|1), (Int32(-110)&127..Int32(39)&127:55|1)] } else { [var1992, var1992, (Int32(-128)&127..var219&127:(109|1)), var2522, (Int32(-52)&127..Int32(95)&127:(-108)|1), (Int32(113)&127..=Int32(-111)&127:(-7)|1), (Int32(-104)&127..Int32(33)&127:0|1), (Int32(-73)&127..=Int32(49)&127:(-101)|1), (Int32(-50)&127..=var219&127:(26|1)), var1992] } ;
                    var1189
                
                case 16 | 130 | 103 | 9 => 
                    (UInt32(156), var2540, var2562);
                    ();
                    var1189
                
                case _ => 
                    var var2576 : Range<UInt8> = (UInt8(188)&127..=UInt8(250)&127:(Int64(Int16(-123))|1));
                    if (var118) { var2576 } else { (UInt8(203)&127..=UInt8(51)&127:(-34)|1) } ;
                    var1189
                
            }
        }
    }
;
    static var var2653 : Range<UInt16> = (UInt16(203)&127..UInt16(147)&127:(-45)|1);
    static let var2687 : (Int16, Range<Int64>, Range<Int16>, Range<UInt8>, Option<Range<Int32>>, Range<UInt32>) = (Int16(-54), (28&127..=20&127:66|1), (Int16(31)&127..=Int16(-79)&127:(101|1)), (UInt8(220)&127..UInt8(58)&127:((-34)|1)), Option<Range<Int32>>.None, (UInt32(66)&127..UInt32(1)&127:(-104)|1));
    private static let var2731 : Interface14 = Class6();
    static var var2743 : UInt8 = UInt8(130);
    static let var2753 : ?Interface11 = Option<Interface11>.None;
    private static var var2763 : Unit = ();
    private static var var2766 : Range<Int64> = (120&127..(-98)&127:86|1);
    public init(namedParam2630 ! : Option<Array<Range<Int32>>>) { // block id: 2631
        let var2663 : Int32 = Int32(Int32(42));
        let var2682 : Float64 = Float64(Float64(9.0));
        if (try { // block id: 2634
            var118
        } catch (_) { // block id: 2636
            var671;
            Option<Interface12>.Some(var379);
            var249 <= var1042
        } finally { // block id: 2643
            ();
            var2646;
            true
        }) { var1926 } else { try { // block id: 2651
            var2653;
            Class6();
            [var1992, (Int32(68)&127..Int32(-111)&127:81|1), (Int32(-7)&127..Int32(-109)&127:(-127)|1), (Int32(75)&127..Int32(57)&127:(-72)|1), (var2663&127..=Int32(-42)&127:(77|1)), var1992, (var2663&127..=Int32(27)&127:(8|1)), var1992, (Int32(122)&127..var219&127:((-60)|1)), var1992]
        } catch (e: Exception) { // block id: 2679
            (var2682, var2687);
            if (var118) { [var1992, (var219&127..var219&127:(var870|1)), var1992, (Int32(49)&127..=var219&127:((-65)|1)), (Int32(-94)&127..Int32(-66)&127:(-90)|1), var1992, var1992, (Int32(49)&127..=Int32(-88)&127:(-82)|1), var1992, var1992] } else { [(Int32(3)&127..Int32(97)&127:23|1), (Int32(1)&127..Int32(-51)&127:(-101)|1), (Int32(-90)&127..Int32(-105)&127:23|1), (Int32(-77)&127..=Int32(111)&127:(-96)|1), (Int32(-70)&127..Int32(123)&127:103|1), (Int32(-12)&127..Int32(-39)&127:54|1), (Int32(-49)&127..Int32(16)&127:(-76)|1), (Int32(-41)&127..=Int32(111)&127:41|1), (Int32(-10)&127..Int32(95)&127:63|1), (Int32(-51)&127..=Int32(-45)&127:31|1)] } 
        } } ;
        if (match (if (var118) { var2001 } else { Class6([(), (), (), (), (), (), (), (), (), ()], var1545, Option<UInt64>.None, var2731) } ) {
            case _ => 
                false
            
            case caseVar2739 : Option<Interface12> => 
                var2743 |= var2743;
                var1042 /= Float32((Int32(Float32(-2.0))) | 1);
                true
            
            case _ => 
                var2753;
                true
            
        }) { // block id: 2756

        } else if (if (var219 <= Int32(-94)) { // block id: 2761
            var2763;
            var2766;
            var870 != var2771
        } else { // block id: 2773
            var2763;
            let var2776 : Unit = ();
            var2776;
            Int32(-50) <= Int32(-57)
        }) { // block id: 2781

        };
        UInt64(((Option<Interface13>.None as Int8) ?? Int8(73)))
    }
;
    public var var3288 : Int64 = (-69)
    public func isClosed(): Bool { return true }
    public func close(): Unit {}
}



public func func114(param115 : Option<Class6>) : Bool { // block id: 116
    var118
}


public func func145(param146 : Unit) : Interface11 { // block id: 147
    (Option<Unit>.Some(param146) ?? ());
    Class6()
}


func func167(param168 : Interface10) : Option<Interface11> { // block id: 169
    func func182(param183 : (Option<Class6>) -> Bool, param186 : UInt64) : Class6 { // block id: 187
        Class6()
    }
;
    let var196 : Class6 = Class6();
    func func173(optionalParam174 ! : Interface12 = Class6(), namedParam176 ! : (Unit) -> Interface11, namedParam179 ! : Int32) : Class6 { // block id: 180
        var var190 : (Option<Class6>) -> Bool = func114;
        func182(var190, var196.var199[4])
    }
;
    let var212 : (Unit) -> Interface11 = { lambdaParameter215 : Unit => Class6() };
    var var226 : Unit = ();
    let var238 : ?Interface11 = ((Option<Interface11>.Some(Class6()) as Unit) as Interface11);
    match (Option<Class6>.Some(func173(optionalParam174 : Class6(), namedParam176 : var212, namedParam179 : var219))) {
        case _ : Option<Class6> => 
            var226;
            Option<Interface11>.Some(Class6())
        
        case caseVar232 => 
            Class6();
            if (var118) { var238 } else { var238 } 
        
        case _ => 
            var249 / Float32((Int32(Float32(-107.0))) | 1);
            var238
        
        case caseVar256 : Interface12 => 
            var var261 : UInt16 = UInt16(UInt16(211));
            UInt16(96) ** (var261 & 3);
            var var266 : UInt64 = UInt64(Int8(Int8(-80)));
            var266 = var266;
            var238
        
        case _ => 
            var var276 : Int16 = Int16(-25);
            var276 %= ((var276) | 1);
            var238
        
    }
}



public func func356(param357 : UInt16) : Option<Interface11> { // block id: 358
    let var367 : ??Class6 = Option<Option<Class6>>.Some(Option<Class6>.None);
    let var371 : ?Class6 = (Class6() as Class6);
    var loopTimeVar376 : Int64 = 0;
    do {
        loopTimeVar376++;

    } while ((func114((var367 ?? var371))) && loopTimeVar376 < 100 ) ;
    let var394 : UInt8 = UInt8(UInt8(Int8(Int8(-102))));
    let var410 : UInt64 = UInt64(Int8(UInt8(Int8(86))));
    let var417 : Float64 = Float64(Float32(Float32(Float32(Float32(75.0)))));
    var var424 : Int16 = Int16(-70);
    match (var379) {
        case _ : UInt64 => 
            Class6();
            var386;
            ('I', var327, var118, Int16(82), var394)
        
        case _ : Interface14 => 
            var var406 : String = """
CjwW`
kYM(H
""";
            (var327, false, var406, false, var410, "e${var406}x,oXery${var406}]~", var417, var424);
            Option<Interface11>.Some(Class6());
            var52
        
        case _ => 
            var219 ^= Int32(-126);
            var379;
            let var436 : (Rune, Int16, Bool, Int16, UInt8) = ('v', Int16(Int16(20)), true, Int16(UInt8(UInt8(244))), UInt8(UInt8(13)));
            var436
        
    };
    var var450 : (Unit) -> Interface11 = { lambdaParameter453 : Unit => Class6() };
    var loopTimeVar466 : Int64 = 0;
    Option<Interface11>.Some((while ((var118) && loopTimeVar466 < 100 ) {
        loopTimeVar466++;
        var69 /= ((Int8(58)) | 1);
        var463
    }|>var450))
}





public func func659(param660 : Interface13) : UInt32 { // block id: 661
    var664 * try { // block id: 669
        var671;
        var674
    } finally { // block id: 679
        var386;
        ###"iCQeXH]</&"###;
        var674
    }
}









func func1037(param1038 : Range<UInt16>) : Unit { // block id: 1039
    let var1056 : ?Array<Float32> = Option<Array<Float32>>.Some([Float32(-14.0), Float32(8.0), Float32(-44.0), Float32(89.0), Float32(-42.0), Float32(25.0), Float32(-62.0), Float32(92.0), Float32(114.0), Float32(58.0)]);
    var var1060 : Array<Float32> = [Float32(Float32(Float32(Float32(41.0)))), Float32(79.0), Float32(Float32(Float32(Float32(-64.0)))), Float32(-122.0), Float32(7.0), Float32(Float32(Float32(Float32(-112.0)))), Float32(84.0), Float32(91.0), Float32(-14.0), Float32(Float32(4.0))];
    var1042 -= (var1056 ?? var1060)[9];
    func func1085<T0, T1>(namedParam1086 ! : Class6, optionalParam1087 ! : (Interface10) -> Option<Interface11> = { lambdaParameter1090 : Interface10 => Option<Interface11>.Some(Class6()) }, namedParam1096 ! : Range<Int16>, optionalParam1097 ! : Interface10 = Class6()) : (UInt64, UInt8, Unit, UInt64, Unit, Int16, UInt64, String, Int8) { // block id: 1099
        var1011;
        var1102
    }
;
    var var1137 : Range<Int16> = (Int16(-38)&127..=Int16(21)&127:(-88)|1);
    func1085<Option<Class6>, Option<Array<Int8>>>(namedParam1086 : if (true) { var795 } else { var795 } , optionalParam1087 : func167, namedParam1096 : match (var1123) {
        case caseVar1127 => 
            var671;
            if (var118) { (var327&127..var327&127:((-115)|1)) } else { var1137 } 
        
        case caseVar1141 : Interface9 => 
            (var636, Int16(102), true, var327, UInt8(45));
            var118 &&= var118;
            var1137
        
        case _ : Option<Option<Option<Range<Int32>>>> => 
            if (var118) { [UInt64(81), UInt64(43), UInt64(66), UInt64(90), UInt64(121), UInt64(235), UInt64(146), UInt64(229), UInt64(133), UInt64(162)] } else { [UInt64(204), var1162, UInt64(225), var1162, var1162, UInt64(176), UInt64(109), UInt64(119), UInt64(160), var1162] } ;
            ();
            var1137
        
        case _ : Option<Option<Option<Range<Int32>>>> => 
            if (var118) { var1123 } else { var1123 } ;
            var1137
        
        case _ => 
            ();
            (Int16(44)&127..Int16(63)&127:85|1)
        
    }, optionalParam1097 : var1189[0])[2]
}


public func func1029(optionalParam1030 ! : Interface11 = Class6(), optionalParam1032 ! : Int32 = Int32(UInt16(134))) : Unit { // block id: 1035
    (UInt16(22)&127..=UInt16(121)&127:(-31)|1)|>func1037;
    let var1201 : ?UInt64 = Option<UInt64>.Some(UInt64(UInt64(147)));
    var var1230 : ?Bool = Option<Bool>.Some((Option<Option<Option<Range<Int32>>>>.None is Range<UInt16>));
    var var1292 : Int8 = Int8(Int8(Int8(Int8(-74))));
    ((var1201 ?? UInt64(32)), (Option<UInt8>.None ?? UInt8(41)), [(), var671, (), var671, (), (), (), var671, (), var386][7], try { // block id: 1228
        var1230;
        var1162
    } finally { // block id: 1235
        ();
        var727;
        var1162 ^ var1162
    }, if (true) { // block id: 1243
        var671;
        var118 ||= var118
    } else if (true) { // block id: 1249
        var674 -= var664
    }, Int16(UInt16(254)), try { // block id: 1256
        var386;
        let var1261 : ?UInt8 = Option<UInt8>.None;
        if (false) { var1261 } else { var1261 } ;
        var1266 % ((UInt64(15)) | 1)
    } catch (e: Exception) { // block id: 1269
        var386;
        UInt64(175) - UInt64(230)
    }, match (Class6()) {
        case caseVar1278 => 
            ();
            "T; js}a{rRi"
        
        case _ => 
            var118 &&= false;
            if (false) { "=u.q-4'.A$" } else { ###"m@?'Kx3Aow"### } 
        
    }, var1292)[2]
}

public func func826(param827 : Option<Range<Int32>>) : Range<Int16> { // block id: 828
    (var835 ?? (Option<Interface12>.Some(var379) ?? Class6()));
    let var906 : Int16 = Int16(109);
    let var922 : Range<UInt32> = (UInt32(67)&127..UInt32(4)&127:79|1);
    func func1025(namedParam1026 ! : (Rune, Int16, Bool, Int16, UInt8)) : Unit { // block id: 1027
        var var1313 : (Float64, (Int16, Range<Int64>, Range<Int16>, Range<UInt8>, Option<Range<Int32>>, Range<UInt32>)) = (Float64(Float64(Float64((-105.0)))), (Int16(UInt8(247)), ((-85)&127..109&127:77|1), (Int16(UInt8(159))&127..=Int16(-53)&127:((-63)|1)), (UInt8(UInt8(240))&127..UInt8(175)&127:((-120)|1)), (Option<Option<Class6>>.Some(Option<Class6>.None) as Range<Int32>), (UInt32(149)&127..=UInt32(173)&127:114|1)));
        func1029(optionalParam1032 : try { // block id: 1299
            var var1302 : UInt16 = UInt16(UInt16(211));
            var1302--;
            var118 &&= false;
            var219 - Int32(-88)
        } finally { // block id: 1311
            var1313;
            Int32(53) & Int32(-112)
        })
    }
;
    let var1346 : UInt8 = UInt8(UInt8(Int8(-112)));
    func func999(optionalParam1000 ! : Option<Interface11> = Option<Interface11>.Some(Class6()), optionalParam1003 ! : Interface9 = Class6()) : Option<Bool> { // block id: 1005
        var loopTimeVar1352 : Int64 = 0;
        do {
            loopTimeVar1352++;
            func1025(namedParam1026 : (var636, Int16(108), var118, var906, var1346));
            (UInt8(62)&127..UInt8(176)&127:83|1)
        } while (((var1011[1] is (Interface12, (Unit) -> Interface11, Int32) -> Class6)) && loopTimeVar1352 < 100 ) ;
        var1355[2]
    }
;
    let var1381 : Int16 = Int16(Int16(UInt16(165)));
    let var1468 : ?Interface11 = Option<Interface11>.Some(Class6());
    let var1520 : Unit = ();
    let var1594 : Unit = ();
    func func861() : (Int32, UInt64, Option<Bool>, (Rune, Int16, Bool, Int16, UInt8), UInt16) { // block id: 862
        var118 ||= try { // block id: 867
            var870--;
            let var876 : Bool = true;
            if (var118) { [var876, var118, false, false, false, var876, var118, false, var118, var876] } else { [false, false, false, false, false, false, true, true, false, false] } 
        } catch (e: Exception) { // block id: 888
            var890
        }[1];
        var var910 : Range<UInt8> = (UInt8(163)&127..=UInt8(UInt8(Int8(113)))&127:(Int64(Int64(Int32(-14)))|1));
        let var928 : (Float64, (Int16, Range<Int64>, Range<Int16>, Range<UInt8>, Option<Range<Int32>>, Range<UInt32>)) = (Float64(Float32(101.0)), (Int16(UInt8(Int8(-121))), (95&127..(-61)&127:(Int64((-58))|1)), (Int16(-106)&127..Int16(-110)&127:102|1), (UInt8(230)&127..=UInt8(13)&127:((-108)|1)), ((UInt16(172)&127..=UInt16(184)&127:56|1) as Range<Int32>), (UInt32(84)&127..=UInt32(UInt8(189))&127:(114|1))));
        try { // block id: 896
            var671;
            (104.0, (var327, (39&127..=(-68)&127:(-18)|1), (var327&127..=var906&127:(var870|1)), var910, Option<Range<Int32>>.Some((Int32(11)&127..Int32(-76)&127:(-87)|1)), var922))
        } catch (e: Exception) { // block id: 924
            ();
            var671;
            var928
        }[1];
        var var1387 : UInt16 = UInt16(183);
        let var1436 : Range<UInt64> = (UInt64(166)&127..=UInt64(85)&127:(Int64(UInt32(UInt8(UInt8(65))))|1));
        var var1475 : (Float64, Range<UInt32>, Range<Int32>, Int8, UInt16) = (Float64(Float64(Float32(Float32(9.0)))), (UInt32(186)&127..UInt32(17)&127:(-81)|1), (Int32(-14)&127..Int32(61)&127:(-104)|1), Int8(-106), UInt16(166));
        (Int32(-103), (var964[3] ?? [UInt64(44), UInt64(197), UInt64(78), UInt64(229), UInt64(137), UInt64(19), UInt64(138), UInt64(119), UInt64(170), UInt64(56)][0]), func999(optionalParam1000 : match ((Int32(-51), var1162, Option<Bool>.None, (var636, var327, var118, var1381, UInt8(47)), var1387)) {
            case _ => 
                let var1396 : Array<Range<Int32>> = Array<Range<Int32>>(10){ i => (Int32(UInt8(188))&127..Int32(UInt32(Int8(-51)))&127:(Int64(Int16(63))|1)) };
                if (true) { [(Int32(39)&127..Int32(-19)&127:(-111)|1), (Int32(124)&127..Int32(-29)&127:95|1), (Int32(-45)&127..=Int32(-31)&127:101|1), (Int32(-2)&127..=Int32(-65)&127:(-74)|1), (Int32(-27)&127..=Int32(-107)&127:(-99)|1), (Int32(-46)&127..=Int32(-125)&127:(-91)|1), (Int32(-71)&127..=Int32(-91)&127:121|1), (Int32(-68)&127..Int32(-65)&127:48|1), (Int32(-97)&127..Int32(122)&127:53|1), (Int32(88)&127..=Int32(-18)&127:26|1)] } else { var1396 } ;
                if (true) { (UInt64(151)&127..=UInt64(61)&127:(-101)|1) } else { var1436 } ;
                if (true) { Option<Interface11>.Some(var1448) } else { Option<Interface11>.Some(Class6()) } 
            
            case _ => 
                var var1458 : Range<Int16> = (Int16(66)&127..=Int16(UInt8(UInt8(246)))&127:((-61)|1));
                (Class6(), var1458);
                if (true) { var1468 } else { var1468 } 
            
            case _ => 
                var1475;
                var1468
            
        }, optionalParam1003 : match (Option<Option<Bool>>.None) {
            case caseVar1490 => 
                if (false) { var636 } else { 'Y' } ;
                Class6()
            
            case caseVar1499 => 
                if (var118) { param827 } else { Option<Range<Int32>>.Some((Int32(30)&127..var219&127:(58|1))) } ;
                Class6()
            
            case _ => 
                var386;
                if (var118) { Class6() } else { Class6() } 
            
        }), try { // block id: 1518
            var1520;
            var69 >>= ((var69) & 7);
            ('B', var906, true, var327, var1346)
        } finally { // block id: 1531
            var835;
            var386;
            (var636, var1381, true, Int16(-91), UInt8(105))
        }, try { // block id: 1543
            var1545
        } catch (_) { // block id: 1584
            -var674;
            let var1588 : ??Range<Int32> = (119.0 as Option<Range<Int32>>);
            var1588;
            var1545
        } finally { // block id: 1592
            var1594;
            (UInt16(98), UInt16(136), UInt32(223), var1387, [false, false, false, true, false, var118, true, var118, false, var118])
        }[3])
    }
;
    (try { // block id: 851
        ();
        Option<Option<Bool>>.None
    } catch (e: Exception) { // block id: 854
        Option<Option<Bool>>.None
    } finally { // block id: 856
        Option<Option<Bool>>.None
    } ?? func861()[2]);
    var1189[1]
}

public func func819(param820 : (Interface13) -> UInt32) : Option<Option<(Float64, Range<UInt32>, Range<Int32>, Int8, UInt16)>> { // block id: 823
    var var1618 : (Option<Range<Int32>>) -> Range<Int16> = func826;
    match ((Option<Range<Int32>>.Some((var219&127..Int32(120)&127:(var870|1)))|>var1618)) {
        case _ : Rune => 
            ();
            var795;
            ()
        
        case _ => 
            var1636 *= UInt64(101)
        
        case _ => 
            if (true) { Option<Option<Class6>>.None } else { Option<Option<Class6>>.None } ;
            ()
        
    };
    ();
    let var1667 : Option<Option<(Float64, Range<UInt32>, Range<Int32>, Int8, UInt16)>> = Option<Option<(Float64, Range<UInt32>, Range<Int32>, Int8, UInt16)>>.None;
    try { // block id: 1649
        var loopTimeVar1653 : Range<UInt64> = (UInt64(111)&127..=UInt64(UInt16(UInt16(UInt16(26))))&127:((-115)|1));
        for (i in loopTimeVar1653 where true) {

        };
        ();
        try { // block id: 1663
            (UInt8(68)&127..=UInt8(2)&127:106|1);
            var671;
            var1667
        } catch (e: Exception) { // block id: 1669
            ();
            (Int8(121)&127..=Int8(1)&127:(-43)|1);
            Option<Option<(Float64, Range<UInt32>, Range<Int32>, Int8, UInt16)>>.None
        } finally { // block id: 1673
            if (true) { var1667 } else { var1667 } 
        }
    } catch (e: Exception) { // block id: 1678
        (Option<Unit>.None ?? var386);
        "!S:;4:/|x'";
        var1667
    }
}

public func func1685(param660 : Interface13) : UInt32 { // block id: 661
    var664 * try { // block id: 669
        var671;
        var674
    } finally { // block id: 679
        var386;
        ###"iCQeXH]</&"###;
        var674
    }
}

public func func786(param787 : (Int16, Range<Int64>, Range<Int16>, Range<UInt8>, Option<Range<Int32>>, Range<UInt32>)) : (Float64, Range<UInt32>, Range<Int32>, Int8, UInt16) { // block id: 788
    var loopTimeVar807 : Int64 = 0;
    while ((func114(try { // block id: 792
        Option<Class6>.Some(var795)
    } catch (_) { // block id: 797
        Option<Class6>.None
    } finally { // block id: 799
        if (var118) { var688 } else { Option<Class6>.Some(Class6()) } 
    })) && loopTimeVar807 < 100 ) {
        loopTimeVar807++;

    };
    (((func1685|>func819) ?? match ([(), (), (), (), var386, (), var386, (), (), ()]) {
        case _ => 
            var1704
        
        case _ => 
            let var1712 : Range<UInt32> = (UInt32(48)&127..UInt32(Int8(71))&127:(Int64(Int8(UInt8(Int8(105))))|1));
            Option<(Float64, Range<UInt32>, Range<Int32>, Int8, UInt16)>.Some(((-80.0), var1712, (Int32(-51)&127..=Int32(-122)&127:25|1), var69, UInt16(119)))
        
    }) ?? var1725)
}


func func605(namedParam606 ! : Range<UInt64>, optionalParam607 ! : Option<Range<Int32>> = Option<Range<Int32>>.None, optionalParam609 ! : Int8 = Int8(Int8(UInt8(Int8(22)))), optionalParam614 ! : UInt64 = UInt64(77)) : Array<Range<Int32>> { // block id: 616
    let var631 : UInt32 = UInt32(UInt8(199));
    let var650 : ?Bool = (Option<Range<Int32>>.Some((Int32(-99)&127..=Int32(9)&127:(-7)|1)) as Bool);
    var loopTimeVar693 : Int64 = 0;
    while (((if (var118) { var688 } else { Option<Class6>.None } |>{ lambdaParameter621 : Option<Class6> => let var642 : UInt8 = UInt8(198); (try { // block id: 629
        var631;
        (var636, var327, var118, var327, var642);
        Option<Bool>.None
    } finally { // block id: 645
        Int32(-2);
        if (true) { var650 } else { Option<Bool>.Some(true) } 
    } ?? var631 >= (var463|>func659)) })) && loopTimeVar693 < 100 ) {
        loopTimeVar693++;

    };
    let var706 : Range<Int8> = (Int8(-100)&127..=Int8(-112)&127:125|1);
    let var739 : ??Range<Int32> = Option<Option<Range<Int32>>>.None;
    let var1837 : ?UInt64 = (Option<Option<(Float64, Range<UInt32>, Range<Int32>, Int8, UInt16)>>.Some((UInt32(UInt8(214)) as (Float64, Range<UInt32>, Range<Int32>, Int8, UInt16))) as UInt64);
    var var1846 : ?UInt64 = (Class6() as UInt64);
    ((match (var706) {
        case caseVar710 : Option<Interface11> => 
            ();
            let var714 : ???Range<Int32> = ([(Int32(30)&127..=Int32(75)&127:(-25)|1), (Int32(31)&127..Int32(50)&127:58|1), (Int32(3)&127..Int32(84)&127:(-27)|1), (Int32(79)&127..=Int32(-15)&127:42|1), (Int32(-15)&127..Int32(-37)&127:7|1), (Int32(-55)&127..Int32(-78)&127:54|1), (Int32(-27)&127..Int32(119)&127:125|1), (Int32(2)&127..=Int32(1)&127:(-70)|1), (Int32(-79)&127..=Int32(-90)&127:(-71)|1), (Int32(5)&127..Int32(125)&127:77|1)] as Option<Option<Range<Int32>>>);
            var714
        
        case _ : Interface12 => 
            optionalParam607;
            var var723 : UInt8 = UInt8(203);
            var723 >>= ((var723) & 7);
            var727
        
        case _ : Range<Int64> => 
            if (var118) { var727 } else { Option<Option<Option<Range<Int32>>>>.Some(var739) } 
        
        case caseVar743 => 
            if (var118) { Class6(Class6(), 't', namedParam751 : Option<Option<Range<Int32>>>.None) } else { var1448 } ;
            [UInt64(101), UInt64(207), UInt64(125), UInt64(105), UInt64(102), UInt64(32), UInt64(20), UInt64(175), UInt64(163), UInt64(214)];
            if (var118) { var727 } else { Option<Option<Option<Range<Int32>>>>.Some(Option<Option<Range<Int32>>>.None) } 
        
        case _ => 
            ();
            var674 &= var674;
            Option<Option<Option<Range<Int32>>>>.Some(Option<Option<Range<Int32>>>.None)
        
    } ?? Option<Option<Range<Int32>>>.Some(optionalParam607)) ?? match (if (true) { [Option<UInt64>.Some(optionalParam614), var1837, var1837, var1837, var1846, Option<UInt64>.None, var1837, var1837, var1846, Option<UInt64>.None] } else { var964 } ) {
        case caseVar1857 => 
            var1102;
            var541
        
        case _ : Option<Option<Bool>> => 
            ();
            ();
            Option<Range<Int32>>.None
        
        case caseVar1869 : Float64 => 
            var386;
            var var1874 : Range<Int32> = (Int32(-114)&127..Int32(59)&127:(-11)|1);
            Option<Range<Int32>>.Some(var1874)
        
        case _ => 
            ();
            let var1881 : Range<Int16> = (Int16(-125)&127..=Int16(Int8(UInt8(Int8(-62))))&127:(Int64(UInt8(Int8(UInt8(52))))|1));
            var1881;
            var var1893 : ?Range<Int32> = (true as Range<Int32>);
            var1893
        
        case _ => 
            if (var118) { var1901 } else { Option<Option<Range<Int32>>>.Some(var541) } ;
            var var1912 : Range<Int32> = (Int32(88)&127..=Int32(104)&127:53|1);
            if (false) { Option<Range<Int32>>.Some((Int32(85)&127..Int32(60)&127:44|1)) } else { Option<Range<Int32>>.Some(var1912) } 
        
    });
    (match ([(Int32(-16)&127..Int32(-7)&127:(-118)|1), (Int32(-71)&127..Int32(-39)&127:(-90)|1), (Int32(82)&127..=Int32(-89)&127:56|1), (Int32(6)&127..=Int32(-19)&127:(-18)|1), (Int32(70)&127..Int32(-105)&127:64|1), (Int32(-99)&127..Int32(58)&127:(-29)|1), (Int32(-56)&127..Int32(30)&127:(-39)|1), (Int32(-106)&127..Int32(-26)&127:83|1), (Int32(-55)&127..Int32(5)&127:25|1), (Int32(14)&127..=Int32(-93)&127:(-90)|1)]) {
        case _ => 
            Option<Array<Range<Int32>>>.Some(var1926)
        
        case _ => 
            var870 + (-105);
            Option<Array<Range<Int32>>>.Some(var1926)
        
    } ?? match (Float32(-107.0) + var249) {
        case _ => 
            optionalParam609;
            (77&127..=(-110)&127:(-20)|1);
            [(Int32(123)&127..=Int32(44)&127:116|1), (Int32(-10)&127..Int32(-36)&127:(-128)|1), (Int32(77)&127..=Int32(-6)&127:(-5)|1), (Int32(108)&127..Int32(55)&127:126|1), (Int32(-123)&127..Int32(-122)&127:121|1), (Int32(13)&127..=Int32(-103)&127:(-46)|1), (Int32(-96)&127..=Int32(-75)&127:(-23)|1), (Int32(-23)&127..=Int32(115)&127:124|1), (Int32(-68)&127..Int32(-78)&127:26|1), (Int32(-119)&127..Int32(93)&127:73|1)]
        
    })
}

func func586(param587 : Int8) : Range<Int32> { // block id: 588
    let var590 : Array<Interface11> = [Class6(), Class6(), Class6(), Class6(), Class6(), Class6(), Class6(), Class6(), Class6(), Class6()];
    var590;
    func605(namedParam606 : var1982, optionalParam607 : try { // block id: 1985
        (Int16(11)&127..Int16(-111)&127:23|1);
        if (var118) { var541 } else { Option<Range<Int32>>.Some(var1992) } 
    } catch (_) { // block id: 1994
        var1636 &= var1162;
        if (var118) { var2001 } else { var1123 } ;
        var541
    } finally { // block id: 2005
        if (true) { Option<Range<Int32>>.None } else { var541 } 
    })[3]
}

public func func511(param512 : Interface10) : Range<Int32> { // block id: 513
    var var551 : (Int16, Range<Int64>, Range<Int16>, Range<UInt8>, Option<Range<Int32>>, Range<UInt32>) = (Int16(UInt8(167)), (Int64(UInt32(UInt16(88)))&127..=60&127:(29|1)), (Int16(-93)&127..=Int16(36)&127:(Int64(Int8(Int8(94)))|1)), (UInt8(Int8(-76))&127..=UInt8(Int8(Int8(76)))&127:(Int64(Int16(-55))|1)), (Int16(UInt16(128)) as Range<Int32>), (UInt32(237)&127..=UInt32(132)&127:(-71)|1));
    (if (false) { // block id: 523
        var386;
        ();
        var var531 : Int64 = Int64(Int16(UInt16(UInt16(Int8(-36)))));
        (Int16(-17), (53&127..=var531&127:(119|1)), (Int16(-89)&127..Int16(-85)&127:(-119)|1), (UInt8(126)&127..UInt8(11)&127:2|1), var541, (UInt32(95)&127..=UInt32(213)&127:(var531|1)))
    } else if (var118) { // block id: 549
        var551
    } else { // block id: 579
        let var581 : Range<UInt8> = (UInt8(116)&127..UInt8(24)&127:(-12)|1);
        var581;
        var551
    }[4] ?? (var2015[0]|>func586))
}






func func507(param508 : Range<UInt16>) : Array<Interface11> { // block id: 509
    var var2110 : Interface10 = Class6();
    try { // block id: 2020
        if (true) { Option<Array<Interface11>>.Some([Class6(), Class6(), Class6(Class6(), var636, namedParam751 : Option<Option<Range<Int32>>>.Some(var541)), var1448, Class6(), var1448, Class6(var463, '9', namedParam751 : var1901), var1448, Class6(), Class6(Class6(), 'H', namedParam751 : var1901)]) } else { Option<Array<Interface11>>.None } ;
        let var2050 : Interface10 = Class6();
        if (false) { var2050 } else { var2050 } 
    } finally { // block id: 2053
        if (false) { var2057 } else { var2057 } ;
        if (false) { Class6() } else { var463 } ;
        var2110
    }|>func511;
    var var2614 : ?Array<Interface11> = Option<Array<Interface11>>.None;
    var var2804 : Option<Option<UInt16>> = (Int8(-47) as Option<UInt16>);
    var var2846 : ?Bool = (Option<UInt8>.None as Bool);
    try { // block id: 2113
        var var2116 : ?Array<Interface11> = Option<Array<Interface11>>.Some([Class6(), Class6((91.0 as Unit), optionalParam2123 : Class6(), namedParam2125 : [false, true, false, false, true, true, false, false, true, false]), Class6(), Class6(), Class6(Class6(), 'q', namedParam751 : Option<Option<Range<Int32>>>.Some(Option<Range<Int32>>.None)), Class6(Class6([(), (), (), (), (), (), (), (), (), ()], (UInt16(153), UInt16(47), UInt32(69), UInt16(39), [true, true, true, false, false, true, true, true, false, true]), Option<UInt64>.Some(UInt64(80)), Class6()), 'b', namedParam751 : Option<Option<Range<Int32>>>.Some(Option<Range<Int32>>.None)), Class6(Class6([(), (), (), (), (), (), (), (), (), ()], (UInt16(138), UInt16(253), UInt32(72), UInt16(93), [false, true, false, false, true, false, false, true, false, false]), Option<UInt64>.None, Class6()), 'L', namedParam751 : (Option<Array<Float32>>.Some([Float32(101.0), Float32(-104.0), Float32(-76.0), Float32(50.0), Float32(75.0), Float32(-106.0), Float32(19.0), Float32(62.0), Float32(57.0), Float32(-16.0)]) as Option<Range<Int32>>)), Class6(), Class6(Class6([(), (), (), (), (), (), (), (), (), ()], (UInt16(238), UInt16(35), UInt32(142), UInt16(169), [false, true, false, true, false, true, false, true, false, false]), Option<UInt64>.None, Class6()), '9', namedParam751 : ((Int16(-1), false, ###"#t7+R^*.0A"###, false, UInt64(31), "B\\0-]oa{`k2", 80.0, Int16(-30)) as Option<Range<Int32>>)), Class6(Float64(86.0))]);
        let var2345 : Array<Interface11> = Array<Interface11>(10){ i => Class6(Class6(), 'M', namedParam751 : Option<Option<Range<Int32>>>.Some(Option<Range<Int32>>.None)) };
        (var2116 ?? var2345)
    } catch (_) { // block id: 2604
        var loopTimeVar2611 : Int64 = 0;
        do {
            loopTimeVar2611++;
            var386;
            ()
        } while ((true) && loopTimeVar2611 < 100 ) ;
        (var2614 ?? [Class6((-18.0)), Class6(Option<Unit>.None, namedParam2125 : [false, false, true, true, false, true, false, false, false, false]), var1448, var2624, Class6(), Class6(), Class6(namedParam2630 : var2792), var2624, var1448, var1448])
    } finally { // block id: 2797
        (var2804 ?? Option<UInt16>.None);
        let var2817 : UInt64 = UInt64(87);
        var var2862 : UInt64 = UInt64(UInt64(12));
        [Class6(namedParam2396 : var2811, optionalParam2397 : [UInt64(118), UInt64(236), var2817, UInt64(14), var2817, UInt64(78), UInt64(160), var2824, var2824, var1162]), var2624, var2624, Class6(namedParam2630 : var2792), Class6(namedParam2630 : Option<Array<Range<Int32>>>.Some(var1926)), Class6(var463, var636, namedParam751 : Option<Option<Range<Int32>>>.Some(var541)), Class6(namedParam2396 : var2811, optionalParam2397 : [UInt64(229), UInt64(201), UInt64(177), UInt64(128), UInt64(196), UInt64(91), UInt64(132), UInt64(240), UInt64(228), UInt64(89)]), Class6(namedParam2396 : Option<Option<Bool>>.Some(var2846), optionalParam2397 : [UInt64(103), UInt64(87), var2853, var1162, var1162, var1162, UInt64(79), UInt64(137), var2862, UInt64(204)]), Class6(101.0), var1448]
    }
}


public func func501(param502 : Interface14) : Array<Interface11> { // block id: 503
    var var2873 : UInt16 = UInt16(231);
    var var2955 : ?Interface11 = Option<Interface11>.None;
    var var2972 : Bool = false;
    let var2984 : ??Class6 = (((-6.0) as Option<Class6>) as Option<Class6>);
    let var3019 : ?Bool = ((UInt8(UInt8(94))&127..UInt8(145)&127:(Int64(Int32(Int32(121)))|1)) as Bool);
    [((UInt16(234)&127..var2873&127:(var2771|1))|>func507)[5], (Option<Interface11>.None ?? if (false) { var2624 } else { Class6(namedParam2396 : Option<Option<Bool>>.None) } ), ((var2887 as Interface11) ?? match (var2887) {
        case caseVar2893 : Range<Int8> => 
            11.0;
            var2624
        
        case caseVar2899 : Float32 => 
            var2624
        
        case _ : Option<Int8> => 
            var var2920 : UInt8 = UInt8(161);
            if (var118) { (var1266, UInt8(139), (), var2824, var386, var327, var2853, ###"ShSNZU~,7~"###, var69) } else { (UInt64(206), var2920, var386, UInt64(64), var386, Int16(6), UInt64(104), "+M,g:x=4zC", Int8(102)) } ;
            var var2937 : Bool = (Class6() is Option<Int8>);
            Class6(var2057, namedParam2125 : [true, false, true, var118, var2937, false, var118, true, var2937, var2937])
        
        case _ => 
            ();
            ();
            Class6(var2057, optionalParam2123 : var379, namedParam2125 : var890)
        
    }), (var2955 ?? (Option<Interface11>.Some(Class6()) ?? Class6(var2057, optionalParam2123 : var379, namedParam2125 : [false, var118, var118, var118, true, true, var118, var2972, var118, var2972]))), var1448, try { // block id: 2978
        ();
        ();
        var1448
    } catch (e: Exception) { // block id: 2982
        var2984;
        ();
        if (false) { Class6((-13.0)) } else { var1448 } 
    }, var2624, try { // block id: 2996
        (UInt16(23)&127..=UInt16(174)&127:((-105)|1));
        var1448
    } catch (e: Exception) { // block id: 3002
        var671;
        if (false) { var1743 } else { var1743 } ;
        var1448
    }, var2624, match ((Option<Option<Option<Bool>>>.None ?? Option<Option<Bool>>.Some(var3019))) {
        case _ => 
            var386;
            var671;
            if (true) { Class6() } else { var1448 } 
        
    }]
}


public func func468(param469 : Interface10) : UInt16 { // block id: 470
    var386;
    let var3060 : Option<Array<Int8>> = Option<Array<Int8>>.Some([Int8(90), Int8(UInt8(145)), Int8(39), Int8(UInt8(UInt8(201))), Int8(-56), Int8(54), Int8(117), Int8(71), Int8(UInt8(75)), Int8(-99)]);
    let var3092 : Bool = true;
    func func478() : Option<UInt16> { // block id: 479
        ((var497 as Array<Interface11>) ?? (var2001|>func501))[1];
        try { // block id: 3040
            let var3049 : UInt16 = UInt16(Int8(UInt8(220)));
            if (false) { var1545 } else { (UInt16(233), UInt16(210), UInt32(83), var3049, [true, false, true, true, false, false, true, true, true, true]) } ;
            var3060.getOrThrow();
            (var497 as UInt16)
        } finally { // block id: 3079
            var loopTimeVar3086 : Int64 = 0;
            while ((var118) && loopTimeVar3086 < 100 ) {
                loopTimeVar3086++;
                Class6(var497)
            };
            (var2057 ?? var671);
            if (var3092) { Option<UInt16>.None } else { Option<UInt16>.Some(UInt16(117)) } 
        }
    }
;
    var var3117 : UInt16 = UInt16(Int8(20));
    (func478() ?? (Option<UInt16>.Some(UInt16(249)) ?? if (var3092) { // block id: 3102
        if (false) { var2001 } else { Class6() } ;
        if (var3092) { (var327&127..=var327&127:((-105)|1)) } else { (Int16(102)&127..Int16(61)&127:68|1) } ;
        UInt16(139) * var3117
    } else if (var3092) { // block id: 3121
        var3117 %= ((UInt16(244)) | 1);
        UInt16(238)
    } else { // block id: 3126
        if (var118) { var2057 } else { var2057 } ;
        ();
        UInt16(62)
    }))
}


func func128(param129 : Option<Class6>) : Class6 { // block id: 130
    let var134 : UInt32 = UInt32(220);
    let var344 : UInt16 = UInt16(48);
    let var3165 : Interface10 = Class6();
    let var3181 : ?UInt64 = (Option<Class6>.Some(Class6()) as UInt64);
    let var3226 : UInt8 = UInt8(Int8(UInt8(114)));
    func func138(namedParam139 ! : Interface9, namedParam140 ! : UInt64, optionalParam141 ! : Float64 = 6.0) : UInt8 { // block id: 143
        let var314 : Bool = (Int8(-13) is Interface9);
        let var331 : String = ###"W*47Zn(FF/"###;
        let var352 : Class6 = Class6();
        try (resource = Class6()) { // block id: 3194
            if (var118) { var2057 } else { Option<Unit>.None } ;
            ();
            var671
        } finally { // block id: 3201

        }|>{ lambdaParameter159 : Unit => let var3134 : (Interface10) -> UInt16 = func468; ((if (false) { var3165 } else { var3165 } |>{ lambdaParameter282 : Interface10 => if ((if (true) { param129 } else { Option<Class6>.Some(var352) } |>{ lambdaParameter288 : Option<Class6> => var var309 : Unit = (); try { // block id: 291
            let var296 : UInt8 = UInt8(119);
            try { // block id: 293
                var296 >> ((UInt8(187)) & 7);
                var var301 : UInt8 = UInt8(4);
                var301 += UInt8(64);
                32.0 > 97.0
            } catch (_) { // block id: 307
                var309;
                false
            } finally { // block id: 312
                var314
            }
        } finally { // block id: 317
            (UInt64(175), UInt8(13), (), namedParam140, lambdaParameter159, var327, UInt64(93), var331, var69)[4];
            (Option<Interface12>.None ?? Class6());
            var344 == UInt16(141)
        } })) { (try { // block id: 3137
            lambdaParameter282
        } finally { // block id: 3139
            Class6()
        }|>(var3134~>func356)) } else { (if ((var1926 is Array<Option<UInt64>>)) { (Option<Float32>.None as Interface11) } else { match ([(Int32(-54)&127..=Int32(10)&127:(-93)|1), (Int32(-62)&127..=Int32(-65)&127:42|1), (Int32(-57)&127..=Int32(6)&127:(-75)|1), (Int32(-95)&127..Int32(11)&127:90|1), (Int32(40)&127..=Int32(-49)&127:(-63)|1), (Int32(45)&127..Int32(18)&127:(-64)|1), (Int32(100)&127..=Int32(120)&127:39|1), (Int32(55)&127..=Int32(-108)&127:(-124)|1), (Int32(67)&127..=Int32(19)&127:85|1), (Int32(71)&127..=Int32(-23)&127:(-98)|1)]) {
            case _ => 
                var386;
                Option<Interface11>.Some(var1448)
            
            case _ => 
                var870 *= var2771;
                Option<Interface11>.Some(Class6(namedParam2630 : Option<Array<Range<Int32>>>.None))
            
        } } ) }  }) ?? try { // block id: 3169
            if (var118) { Class6(var2057, optionalParam2123 : var379, namedParam2125 : [false, true, true, false, false, true, true, false, true, true]) } else { Class6(Class6([(), (), (), (), (), (), (), (), (), ()], var1545, var3181, Class6()), var636, namedParam751 : Option<Option<Range<Int32>>>.Some(var541)) } 
        } catch (_) { // block id: 3189
            lambdaParameter159;
            Class6(namedParam2630 : Option<Array<Range<Int32>>>.None)
        }) };
        var3165;
        var var3214 : UInt8 = UInt8(170);
        UInt8(UInt8(match {
            case false => 
            var69 ^= Int8(40);
            ();
            var3214 + UInt8(197)
            case _ => 
            var1926;
            if (var314) { Option<Array<Range<Int32>>>.Some([(Int32(38)&127..Int32(107)&127:(-13)|1), (Int32(-30)&127..Int32(-95)&127:(-3)|1), (Int32(50)&127..=Int32(49)&127:(-50)|1), (Int32(-99)&127..Int32(-88)&127:53|1), (Int32(93)&127..=Int32(-103)&127:(-104)|1), (Int32(-100)&127..Int32(-77)&127:37|1), (Int32(-18)&127..=Int32(100)&127:(-96)|1), (Int32(-72)&127..Int32(-84)&127:17|1), (Int32(101)&127..Int32(51)&127:122|1), (Int32(-6)&127..=Int32(24)&127:49|1)]) } else { Option<Array<Range<Int32>>>.None } ;
            var3226 ^ UInt8(144)
        }))
    }
;
    var loopTimeVar3235 : Int64 = 0;
    do {
        loopTimeVar3235++;
        func138(namedParam139 : var123, namedParam140 : var2853);
        break
    } while (((var134 is Interface11)) && loopTimeVar3235 < 100 ) ;
    var var3254 : Bool = (Option<Option<Bool>>.None is Option<Interface12>);
    try { // block id: 3237
        if (true) { var795 } else { Class6() } 
    } catch (_) { // block id: 3242
        Option<Class6>.None;
        try { // block id: 3245
            var795
        } finally { // block id: 3247
            var671;
            var674 &= UInt32(40);
            if (var3254) { Class6() } else { Class6() } 
        }
    } finally { // block id: 3259
        (Option<Class6>.None ?? var795)
    }
}

public func func106(param107 : (Rune, Int16, Bool, Int16, UInt8)) : Class6 { // block id: 108
    var var110 : Unit = ();
    var110;
    if ((Option<Class6>.None|>func114)) { var123 } else { Class6() } ;
    let var3268 : (Option<Class6>) -> Class6 = func128;
    Option<Class6>.Some(if (var118) { var795 } else { var795 } )|>var3268
}

main(): Int64 {
    try {
        let var3276 : ((Rune, Int16, Bool, Int16, UInt8)) -> Class6 = func106;
        func func16(optionalParam17 ! : Bool = false, namedParam19 ! : Interface9, optionalParam20 ! : Int8 = Int8(62)) : Class6 { // block id: 22
            var var24 : Unit = ();
            var24;
            var var33 : UInt8 = UInt8(Int8(4));
            let var83 : ?Class6 = Option<Class6>.Some(Class6());
            var var87 : Class6 = Class6();
            if ((if (true) { // block id: 30
                var33 += var33;
                let var39 : UInt16 = UInt16(123);
                -var39;
                var33--
            } else if (optionalParam17) { // block id: 44
                Class6();
                78.0;
                var24
            } is UInt8)) { (if (var52[2]) { match (UInt64(154)) {
                case _ => 
                    var69 >>= ((Int8(107)) & 7);
                    if (false) { Class6() } else { Class6() } 
                
            } } else { (var83 ?? var87) } ) } else { (try { // block id: 95
                let var97 : UInt16 = UInt16(UInt8(UInt8(228)));
                var97;
                Option<Class6>.None
            } catch (e: Exception) { // block id: 102
                var24;
                Option<Class6>.None
            } ?? (('x', Int16(-43), optionalParam17, Int16(85), UInt8(123))|>var3276)) } 
        }
;
        let var3285 : Interface9 = Class6();
        func16(namedParam19 : var3285).var3288
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var69*var69), 64)
        crccheck.updateBuffer(UInt64(var219*var219), 64)
        crccheck.updateBuffer(UInt64(var327*var327), 64)
        crccheck.updateBuffer(UInt64(var664*var664), 64)
        crccheck.updateBuffer(UInt64(var674*var674), 64)
        crccheck.updateBuffer(UInt64(var870*var870), 64)
        crccheck.updateBuffer(UInt64(var1162*var1162), 64)
        crccheck.updateBuffer(UInt64(var1266*var1266), 64)
        crccheck.updateBuffer(UInt64(var1636*var1636), 64)
        crccheck.updateBuffer(UInt64(var2771*var2771), 64)
        crccheck.updateBuffer(UInt64(var2824*var2824), 64)
        crccheck.updateBuffer(UInt64(var2853*var2853), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Class6 {

}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_unexpected_declaration_in_scope
// ASSERT: scan parse_expected_while_in_do_while
// ASSERT: scan parse_expected_catch_or_finally_in_try
// ASSERT: scan parse_expected_left_brace
// ASSERT: scan parse_expected_case


