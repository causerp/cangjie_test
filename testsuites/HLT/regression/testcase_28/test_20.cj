/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output


public var var17 : ?Bool = Option<Bool>.None
public let var22 : UInt64 = UInt64(228)
public var var27 : UInt16 = UInt16(116)
public var var55 : UInt32 = UInt32(UInt8(UInt8(91)))
public let var64 : Aggregate60 = Aggregate60()
public var var123 : Rune = 'H'
public var var127 : Int64 = Int64(Int8(Int8(83)))
public var var155 : Unit = ()
var var163 : Class39 = Class39()
var var182 : (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8) = (UInt16(164), Int8(UInt8(Int8(-53))), true, [Int32(-92), Int32(-45), Int32(-121), Int32(-105), Int32(57), Int32(-5), Int32(-59), Int32(98), Int32(-30), Int32(109)], 'U', 'G', Int64(Int8(59)), Int8(UInt8(251)))
let var222 : ?Array<Range<UInt64>> = ((UInt64(16)&127..=UInt64(156)&127:(80|1)) as Array<Range<UInt64>>)
public var var233 : Range<UInt64> = (UInt64(57)&127..UInt64(71)&127:(-92)|1)
let var241 : UInt64 = UInt64(176)
public var var250 : UInt64 = UInt64(UInt32(21))
var var297 : String = "$VhG]|9IK~"
public let var314 : Option<Option<Array<Range<UInt64>>>> = Option<Option<Array<Range<UInt64>>>>.None
public var var322 : Int8 = Int8(61)
let var328 : Bool = (Class39() is (UInt32, Interface43, String) -> Class39)
let var337 : Interface45 = Class39()
var var359 : Class355 = Class355()
public let var397 : Rune = 'd'
let var454 : Option<Array<Unit>> = Option<Array<Unit>>.None
var var513 : Int64 = (-97)
var var542 : Bool = false
public var var563 : Class421 = Class421()
var var688 : Int8 = Int8(Int8(-86))
public let var836 : Range<UInt32> = (UInt32(173)&127..=UInt32(249)&127:(-126)|1)
public var var885 : (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8) = (UInt16(247), Int8(Int8(13)), true, [Int32(-24), Int32(36), Int32(72), Int32(-90), Int32(102), Int32(-104), Int32(42), Int32(112), Int32(-16), Int32(-121)], '6', 'x', Int64(Int16(UInt16(Int16(-123)))), Int8(-3))
let var912 : (Float32, Int16, Bool, (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Int64) = (Float32(74.0), Int16(Int16(43)), false, (UInt16(88), Int8(UInt8(Int8(35))), true, [Int32(Int16(-29)), Int32(UInt32(48)), Int32(UInt16(150)), Int32(Int16(62)), Int32(67), Int32(UInt16(66)), Int32(104), Int32(36), Int32(126), Int32(Int8(-69))], 'E', 'O', Int64(Int16(-66)), Int8(UInt8(UInt8(29)))), 5)
public var var957 : Int64 = 74
let var966 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
public var var976 : Unit = ()
let var1002 : Int32 = Int32(Int16(-122))
public var var1456 : ?Unit = Option<Unit>.None
let var1479 : Array<Class421> = Array<Class421>(10){ i => Class421() }
var var1514 : Range<Int16> = (Int16(12)&127..=Int16(-24)&127:(-54)|1)
public var var1823 : Array<Bool> = [true, true, true, false, true, true, true, false, true, false]
public let var1832 : Array<Range<UInt64>> = [(UInt64(101)&127..UInt64(228)&127:92|1), (UInt64(213)&127..=UInt64(106)&127:26|1), (UInt64(90)&127..UInt64(228)&127:(-42)|1), (UInt64(5)&127..=UInt64(137)&127:(-99)|1), (UInt64(93)&127..=UInt64(98)&127:(-25)|1), (UInt64(166)&127..UInt64(101)&127:(-121)|1), (UInt64(250)&127..UInt64(223)&127:44|1), (UInt64(35)&127..=UInt64(36)&127:69|1), (UInt64(45)&127..=UInt64(67)&127:(-63)|1), (UInt64(232)&127..=UInt64(227)&127:85|1)]
public let var1847 : UInt32 = UInt32(194)
public let var1875 : Int16 = Int16(Int8(Int8(1)))
public var var1930 : Int64 = 96
public let var1935 : Float32 = Float32(Float32(-79.0))
var var1943 : Range<UInt64> = (UInt64(133)&127..UInt64(66)&127:124|1)
var var1952 : UInt16 = UInt16(UInt8(8))
var var2021 : Array<Array<Unit>> = [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]]
public var var2124 : (Range<UInt64>, ((Float32, Int16, Bool, (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Int64), (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Range<Int8>, Array<Array<Unit>>, Int32, Bool), ((Float32, Int16, Bool, (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Int64), (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Range<Int8>, Array<Array<Unit>>, Int32, Bool), Range<Int8>, Option<Range<Int32>>, Range<Int64>, UInt16, Int64, Unit) = ((UInt64(134)&127..=UInt64(27)&127:98|1), ((Float32(118.0), Int16(Int8(-6)), true, (UInt16(120), Int8(117), false, [Int32(-100), Int32(-118), Int32(-2), Int32(35), Int32(-20), Int32(55), Int32(110), Int32(-68), Int32(14), Int32(-96)], 'k', '0', 75, Int8(-21)), Int64(UInt32(20))), (UInt16(UInt8(26)), Int8(40), ([Class421(), Class421(), Class421(), Class421(), Class421(), Class421(), Class421(), Class421(), Class421(), Class421()] is Enum664), [Int32(-40), Int32(126), Int32(35), Int32(24), Int32(86), Int32(-70), Int32(34), Int32(-126), Int32(74), Int32(-68)], 'n', 'K', 77, Int8(Int8(88))), (Int8(Int8(-13))&127..Int8(-56)&127:(16|1)), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], Int32(Int16(126)), true), ((Float32(Float32(32.0)), Int16(32), ([UInt32(202), UInt32(227), UInt32(6), UInt32(189), UInt32(101), UInt32(189), UInt32(18), UInt32(230), UInt32(135), UInt32(107)] is Class39), (UInt16(35), Int8(-96), true, [Int32(31), Int32(-50), Int32(62), Int32(114), Int32(44), Int32(-19), Int32(-104), Int32(-127), Int32(-7), Int32(-113)], 'M', 'J', 12, Int8(-90)), Int64(UInt32(37))), (UInt16(UInt8(30)), Int8(13), ([UInt64(148), UInt64(67), UInt64(146), UInt64(47), UInt64(213), UInt64(72), UInt64(240), UInt64(147), UInt64(239), UInt64(196)] is Array<Range<UInt64>>), [Int32(-63), Int32(25), Int32(-43), Int32(54), Int32(9), Int32(43), Int32(-17), Int32(-20), Int32(117), Int32(40)], 'b', 'J', 28, Int8(100)), (Int8(UInt8(13))&127..Int8(-71)&127:(116|1)), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], Int32(Int8(UInt8(55))), false), (Int8(84)&127..Int8(73)&127:51|1), ([UInt32(33), UInt32(96), UInt32(234), UInt32(108), UInt32(218), UInt32(246), UInt32(230), UInt32(98), UInt32(194), UInt32(86)] as Range<Int32>), (Int64(UInt64(UInt64(114)))&127..(-87)&127:(110|1)), UInt16(225), (-2), ())
let var2615 : Int8 = Int8(Int8(Int8(UInt8(234))))
var var2885 : Array<Int32> = [Int32(-84), Int32(7), Int32(-20), Int32(99), Int32(21), Int32(-80), Int32(59), Int32(-49), Int32(-110), Int32(97)]
var var2916 : Option<Class421> = (UInt64(215) as Class421)
let var2920 : Aggregate431 = Aggregate431()
public let var3008 : (Float32, Int16, Bool, (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Int64) = (Float32(81.0), Int16(-25), true, (UInt16(UInt8(132)), Int8(UInt8(Int8(-110))), (Class421() is Interface44), [Int32(Int8(-55)), Int32(UInt8(212)), Int32(UInt16(240)), Int32(Int16(-77)), Int32(Int16(126)), Int32(-128), Int32(-43), Int32(118), Int32(Int8(58)), Int32(-102)], 'q', 'B', 53, Int8(-105)), Int64(Int8(Int8(UInt8(116)))))
public var var3056 : Int32 = Int32(Int16(UInt16(Int8(Int8(-120)))))
public let var3112 : UInt64 = UInt64(UInt64(UInt32(UInt32(14))))
public var var3152 : Int16 = Int16(Int8(-120))
public let var3178 : ?Unit = Option<Unit>.None
var var3196 : Float32 = Float32(Float32(Float32(106.0)))
public let var3252 : Int32 = Int32(UInt16(Int8(UInt8(Int8(-21)))))
var var3290 : Range<Int32> = (Int32(-88)&127..Int32(-8)&127:15|1)
public let var3294 : Float64 = Float64(Float32(-72.0))
public var var3307 : UInt32 = UInt32(35)
public let var3316 : UInt32 = UInt32(Int8(-108))
let var3517 : (Int16, Float64) = (Int16(UInt16(0)), Float64(Float32(13.0)))
public let var3529 : Int8 = Int8(UInt8(242))
public var var3597 : String = """
P\\nIB
VpLX)
"""
public var var3817 : ((Float32, Int16, Bool, (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Int64), (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Range<Int8>, Array<Array<Unit>>, Int32, Bool) = ((Float32(Float32(-34.0)), Int16(Int16(-3)), ((Float32(-73.0), Int16(98), false, (UInt16(203), Int8(-122), true, [Int32(-56), Int32(-33), Int32(53), Int32(95), Int32(110), Int32(95), Int32(120), Int32(26), Int32(-11), Int32(-36)], 'z', 'A', 103, Int8(-59)), (-58)) is Option<Array<Range<UInt64>>>), (UInt16(UInt16(202)), Int8(-29), false, [Int32(-12), Int32(-75), Int32(88), Int32(77), Int32(49), Int32(8), Int32(-33), Int32(20), Int32(121), Int32(35)], 'p', 'U', (-57), Int8(113)), 54), (UInt16(UInt16(Int8(7))), Int8(UInt8(Int8(-10))), false, [Int32(4), Int32(-109), Int32(-123), Int32(60), Int32(-7), Int32(-48), Int32(-23), Int32(113), Int32(100), Int32(7)], 'U', 'V', 98, Int8(UInt8(184))), (Int8(-17)&127..=Int8(-112)&127:60|1), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], Int32(UInt32(UInt8(Int8(-104)))), ((Int8(-98)&127..=Int8(39)&127:(-7)|1) is Array<Array<Unit>>))
public let var3900 : Int32 = Int32(29)
public let var4073 : UInt8 = UInt8(35)
public let var4208 : Int64 = Int64(UInt32(UInt8(39)))

public interface Interface43 {

}

public interface Interface45 <: Interface43 {
    func func349() : UInt64 { // block id: 350
        let var4078 : (Int8, UInt64, Int64, Array<Bool>, Array<Bool>, UInt16) = (Int8(-85), UInt64(Int16(125)), Int64(Int32(2)), [true, true, true, false, (((UInt16(125)&127..UInt16(169)&127:(11|1)), 'c', """
0B,M0
-/,co
""") is (Int16) -> Rune), (Option<(((Float32, Int16, Bool, (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Int64), (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Range<Int8>, Array<Array<Unit>>, Int32, Bool), Range<Int64>, Range<UInt64>, Option<Bool>, Int8)>.None is Interface42), (Int32(-33) is Option<Int32>), true, ((Int32(51) as (((Float32, Int16, Bool, (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Int64), (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Range<Int8>, Array<Array<Unit>>, Int32, Bool), Range<Int64>, Range<UInt64>, Option<Bool>, Int8)) is (Unit, Float64, Range<Int8>)), false], [false, false, false, ((Int32(126)&127..=Int32(-83)&127:109|1) is Option<Unit>), false, (Class421() is () -> Int32), ((Int16(-76)&127..Int16(-114)&127:113|1) is (Int16) -> Rune), true, (Int8(-88) is ((Range<UInt64>, ((Float32, Int16, Bool, (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Int64), (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Range<Int8>, Array<Array<Unit>>, Int32, Bool), ((Float32, Int16, Bool, (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Int64), (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Range<Int8>, Array<Array<Unit>>, Int32, Bool), Range<Int8>, Option<Range<Int32>>, Range<Int64>, UInt16, Int64, Unit), ((Float32, Int16, Bool, (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Int64), (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Range<Int8>, Array<Array<Unit>>, Int32, Bool)) -> Range<Int64>), (((-128)&127..=16&127:(-28)|1) is (String, Range<Int16>, Range<UInt16>) -> Unit)], UInt16(UInt16(Int8(-24))));
        [var359.var362, UInt64(Int8(-37)), func367([(UInt64(11)&127..UInt64(2)&127:(69|1)), var233, var233, var233, (var3112&127..=var3112&127:(16|1)), (UInt64(171)&127..UInt64(194)&127:(-21)|1), (var3112&127..=UInt64(10)&127:(var127|1)), var233, (UInt64(97)&127..=UInt64(235)&127:(-87)|1), var233], namedParam369 : var4073), var4078[1], (var3112, (Int16(9)&127..Int16(58)&127:(var127|1)), ([Int32(-119), Int32(57), Int32(112), Int32(68), Int32(85), Int32(-80), Int32(-87), Int32(30), Int32(9), Int32(-107)], [UInt32(18), UInt32(104), UInt32(30), UInt32(54), UInt32(187), UInt32(213), UInt32(90), UInt32(50), UInt32(232), UInt32(232)], (Int32(5)&127..Int32(124)&127:42|1), (), var3294), var1935, var3152)[0], UInt64(210) % ((var3112) | 1), UInt64(var3112), UInt64(4), UInt64(var127), UInt64(43)][1]
    }

}

public interface Interface44 <: Interface43 & Interface45 {

}

public interface Interface42 <: Interface43 & Interface44 {
    func func300(namedParam301 ! : Range<UInt8>, namedParam302 ! : Float32, namedParam303 ! : Int32, namedParam304 ! : UInt8) : UInt64 { // block id: 305
        var loopTimeVar347 : Int64 = 0;
        do {
            loopTimeVar347++;

        } while ((match ((var314 ?? var222)) {
            case _ : Range<UInt64> => 
                (var322&127..Int8(11)&127:((-99)|1));
                var155;
                var328
            
            case _ => 
                if (true) { var337 } else { Class39() } ;
                var64;
                var328
            
            case _ => 
                false
            
        }) && loopTimeVar347 < 100 ) ;
        func349()
    }

}

public open class Class39 <: Interface42 & Interface43 {
    public init() { // block id: 41

    }
;
    public var var289 : Bool = true
}

public struct Aggregate60 {
    public init() { // block id: 62

    }
;
    public let var67 : UInt32 = UInt32(61);
    public static let var277 : String = ###"!Vs9jn]BGR"###
}


public func func174(param175 : Class39) : Range<UInt64> { // block id: 176
    var var206 : Bool = false;
    let var211 : Int8 = Int8(UInt8(UInt8(175)));
    if (match (var182) {
        case _ : Float64 => 
            (-19.0);
            '5';
            true
        
        case _ => 
            var206 ||= var206;
            var211 != var211
        
    }) { (var222 ?? [(UInt64(166)&127..UInt64(157)&127:43|1), (UInt64(54)&127..=UInt64(35)&127:27|1), (UInt64(43)&127..UInt64(128)&127:(-97)|1), (UInt64(38)&127..UInt64(71)&127:7|1), (UInt64(113)&127..=UInt64(179)&127:63|1), (UInt64(23)&127..=UInt64(48)&127:65|1), (UInt64(106)&127..=UInt64(208)&127:(-60)|1), (UInt64(81)&127..UInt64(37)&127:(-2)|1), (UInt64(163)&127..=UInt64(125)&127:(-90)|1), (UInt64(243)&127..UInt64(137)&127:9|1)]) } else { (Option<Array<Range<UInt64>>>.None ?? [var233, var233, var233, var233, var233, (var241&127..var22&127:(var127|1)), var233, var233, (UInt64(171)&127..var250&127:(var127|1)), (UInt64(34)&127..=UInt64(57)&127:(var127|1))]) } [0]
}

public func func167(param168 : String) : String { // block id: 169
    Class39();
    let var260 : (Class39) -> Range<UInt64> = { lambdaParameter263 : Class39 => (UInt64(Int64(Int32(9)))&127..UInt64(UInt64(Int8(-52)))&127:((-95)|1)) };
    if (((Class39()|>var260) is Array<Int32>)) { (Aggregate60.var277) } else { param168 } 
}


public open class Class355 {
    public init() { // block id: 357

    }
;
    public var var362 : UInt64 = UInt64(242)
}

public open class Class421 <: Resource {
    public init() { // block id: 423

    }
;
    public var var428 : Int32 = Int32(-88);
    public static var var497 : Bool = false;
    public open func func490(namedParam491 ! : Array<Range<UInt64>>, namedParam492 ! : Range<Int64>) : Bool { // block id: 493
        Class421.var497
    }
;
    public init(param2940 : ((Class39) -> Range<UInt64>) -> Unit, param2943 : String) { // block id: 2944
        var976
    }
;
    public static var var3711 : Int16 = Int16(65);
    public init(namedParam3605 ! : ((Class39) -> Range<UInt64>) -> Unit, namedParam3608 ! : (String) -> String) { // block id: 3611
        let var3616 : Array<Range<UInt64>> = [(UInt64(13)&127..=UInt64(121)&127:54|1), (UInt64(UInt16(41))&127..UInt64(5)&127:((-1)|1)), (UInt64(UInt64(172))&127..=UInt64(199)&127:(Int64(Int8(Int8(79)))|1)), (UInt64(5)&127..UInt64(242)&127:(-8)|1), (UInt64(67)&127..=UInt64(146)&127:(Int64(Int32(-31))|1)), (UInt64(169)&127..UInt64(168)&127:(-38)|1), (UInt64(176)&127..UInt64(43)&127:48|1), (UInt64(161)&127..=UInt64(148)&127:68|1), (UInt64(16)&127..=UInt64(33)&127:(-25)|1), (UInt64(131)&127..UInt64(177)&127:(Int64(UInt64(UInt16(157)))|1))];
        let var3649 : Range<Int8> = (Int8(66)&127..Int8(-67)&127:(-59)|1);
        let var3783 : Unit = ();
        var var3797 : Option<Array<Array<Unit>>> = ((UInt8(238)&127..=UInt8(36)&127:(-48)|1) as Array<Array<Unit>>);
        if (if ((var3616 is (Range<Int8>) -> Int16)) { // block id: 3647
            var3649;
            Int8(48) > var688
        } else { // block id: 3654
            false
        }) { match ((Option<Array<Range<UInt64>>>.Some([(UInt64(41)&127..var3112&127:(var957|1)), (UInt64(107)&127..UInt64(83)&127:(-88)|1), var1943, var1943, (UInt64(142)&127..UInt64(14)&127:(14|1)), var1943, (UInt64(190)&127..=UInt64(75)&127:(19|1)), (var3112&127..UInt64(89)&127:(var513|1)), var1943, (UInt64(97)&127..UInt64(65)&127:(-39)|1)]) ?? [(UInt64(149)&127..=UInt64(181)&127:(var1930|1)), (UInt64(52)&127..=UInt64(119)&127:55|1), (UInt64(39)&127..=UInt64(64)&127:54|1), var1943, (UInt64(96)&127..UInt64(201)&127:16|1), var1943, (UInt64(193)&127..UInt64(121)&127:(-2)|1), var1943, (var3112&127..UInt64(216)&127:(var1930|1)), (UInt64(253)&127..var3112&127:(var513|1))])) {
            case _ => 
                var3711 /= ((var3152) | 1);
                var976;
                [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]]
            
            case _ => 
                if (false) { var1479 } else { [this, var563, Class421(namedParam3605, var3597), var563, this, var563, this, Class421(), Class421(namedParam3605, "Q@NPeRha\"q"), Class421(func2375, """
4S*5u
O[8@C
""")] } ;
                [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], var966, [(), var976, (), (), (), (), (), (), (), var976], var966, [(), (), var976, (), var976, var976, var976, var976, var976, ()], [var976, (), var976, (), var976, (), var976, (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [var976, (), var976, var3783, var976, (), (), var3783, (), var976]]
            
        } } else { (var3797 ?? var2021) } ;
        ((Float32(97.0) as Bool) ?? var542) && true
    }

    public func isClosed(): Bool { return false }
    public func close(): Unit {}
}

public struct Aggregate431 {
    public init() { // block id: 433

    }
;
    static var var501 : Range<UInt64> = (UInt64(227)&127..UInt64(202)&127:(-38)|1);
    static let var505 : UInt64 = UInt64(185);
    static func func466(param467 : String, optionalParam468 ! : Range<Int32> = (Int32(16)&127..Int32(-75)&127:69|1), optionalParam470 ! : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()], namedParam482 ! : Range<Int64>) : Float32 { // block id: 483
        var var487 : Class421 = Class421();
        var loopTimeVar531 : Int64 = 0;
        while ((var487.func490(namedParam491 : [var501, (var505&127..UInt64(173)&127:((-27)|1)), (UInt64(168)&127..var505&127:(var513|1)), (var505&127..var505&127:(6|1)), (UInt64(237)&127..UInt64(94)&127:99|1), (UInt64(12)&127..UInt64(96)&127:((-23)|1)), (UInt64(4)&127..=UInt64(169)&127:98|1), var501, (UInt64(97)&127..UInt64(193)&127:(-61)|1), (UInt64(136)&127..=UInt64(47)&127:54|1)], namedParam492 : namedParam482)) && loopTimeVar531 < 100 ) {
            loopTimeVar531++;

        };
        let var3442 : ((String) -> String) -> Array<Unit> = func534;
        let var3447 : (String) -> String = func3444;
        (var3447|>var3442)[6];
        Float32(var1935)
    }
;
    public static func func436(param437 : (Class39) -> Range<UInt64>) : Int32 { // block id: 440
        func func442() : Int32 { // block id: 443
            (Option<Array<Unit>>.None ?? (var454 ?? [(), (), (), (), (), (), (), (), (), ()]))[4];
            let var3500 : Range<Int8> = (Int8(12)&127..=Int8(UInt8(145))&127:(Int64(Int32(UInt32(UInt16(74))))|1));
            Int32((((), var3294, var3500)[0]|>func460))
        }
;
        func442()
    }

}


func func557(param558 : Class421) : Range<Int8> { // block id: 559
    (Int8(-29)&127..=Int8(-80)&127:113|1)
}


public enum Enum664 {
    defaultValue |
    enumValue2812(Array<Bool>, Range<UInt16>)
}
public func func880(param881 : Array<Range<UInt64>>) : Bool { // block id: 882
    (var885 is (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8))
}



public func func2625() : Option<Float32> { // block id: 1051
    var var1061 : (Range<UInt64>, ((Float32, Int16, Bool, (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Int64), (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Range<Int8>, Array<Array<Unit>>, Int32, Bool), ((Float32, Int16, Bool, (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Int64), (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Range<Int8>, Array<Array<Unit>>, Int32, Bool), Range<Int8>, Option<Range<Int32>>, Range<Int64>, UInt16, Int64, Unit) = ((UInt64(Int64(Int32(51)))&127..UInt64(147)&127:(70|1)), ((Float32(Float32(36.0)), Int16(104), false, (UInt16(74), Int8(-42), true, [Int32(73), Int32(91), Int32(4), Int32(38), Int32(126), Int32(73), Int32(17), Int32(75), Int32(-88), Int32(90)], 'p', 'Q', (-112), Int8(-80)), 102), (UInt16(143), Int8(32), true, [Int32(121), Int32(-32), Int32(-101), Int32(52), Int32(8), Int32(-100), Int32(89), Int32(-13), Int32(-31), Int32(-96)], 'I', '2', Int64(Int32(104)), Int8(-78)), (Int8(72)&127..Int8(UInt8(82))&127:(12|1)), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], Int32(Int8(-118)), (((UInt64(214)&127..=UInt64(1)&127:(81|1)), ((Float32(85.0), Int16(-64), true, (UInt16(81), Int8(-7), false, [Int32(-30), Int32(-8), Int32(-90), Int32(-109), Int32(102), Int32(-26), Int32(-23), Int32(-68), Int32(-108), Int32(25)], 'm', 'P', (-8), Int8(-12)), 112), (UInt16(197), Int8(-72), true, [Int32(-98), Int32(-87), Int32(-48), Int32(-10), Int32(95), Int32(-94), Int32(23), Int32(104), Int32(79), Int32(9)], 'R', 'Y', (-33), Int8(-65)), (Int8(-94)&127..=Int8(-32)&127:(-70)|1), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], Int32(-63), true), ((Float32(-18.0), Int16(46), false, (UInt16(182), Int8(-47), false, [Int32(-19), Int32(68), Int32(23), Int32(59), Int32(115), Int32(59), Int32(-53), Int32(106), Int32(-41), Int32(6)], 't', '0', 20, Int8(62)), 64), (UInt16(107), Int8(24), false, [Int32(117), Int32(28), Int32(65), Int32(-51), Int32(-114), Int32(-59), Int32(-69), Int32(19), Int32(2), Int32(-72)], 'B', '2', (-71), Int8(-70)), (Int8(76)&127..Int8(20)&127:(42|1)), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], Int32(32), false), (Int8(-73)&127..=Int8(31)&127:110|1), Option<Range<Int32>>.None, (32&127..=85&127:25|1), UInt16(208), (-111), ()) is (String) -> String)), ((Float32(-65.0), Int16(UInt8(211)), false, (UInt16(15), Int8(-98), true, [Int32(-1), Int32(96), Int32(29), Int32(58), Int32(-13), Int32(-114), Int32(36), Int32(-22), Int32(-53), Int32(105)], 'j', 'E', (-89), Int8(27)), Int64(UInt64(169))), (UInt16(UInt8(129)), Int8(-93), true, [Int32(-20), Int32(0), Int32(88), Int32(60), Int32(114), Int32(8), Int32(55), Int32(27), Int32(122), Int32(-33)], 'h', 'G', Int64(Int32(64)), Int8(Int8(-86))), (Int8(81)&127..=Int8(-26)&127:79|1), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], Int32(69), true), (Int8(UInt8(Int8(-122)))&127..=Int8(UInt8(240))&127:(18|1)), (Enum664.defaultValue as Range<Int32>), (18&127..Int64(UInt16(155))&127:((-64)|1)), UInt16(Int16(Int8(1))), 104, ());
    ((var1061[4] ?? (var1002&127..=var1002&127:(var513|1))) as Float32)
}

public func func902(param903 : Int16) : Float32 { // block id: 904
    var var980 : Unit = ();
    (var912, (UInt16(232), var688, var542, [Int32(75), Int32(115), Int32(100), Int32(99), Int32(15), Int32(-112), Int32(66), Int32(-81), Int32(-103), Int32(27)], var397, 'D', var957, Int8(75)), (Int8(95)&127..var688&127:((-94)|1)), [var966, var966, var966, var966, var966, [(), (), var976, (), var980, (), var976, (), (), ()], [(), var976, var976, var980, (), var976, (), var980, (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], var1002, true)[3][1][8];
    let var1019 : UInt64 = UInt64(UInt16(64));
    let var1025 : Float32 = Float32(-123.0);
    (Option<Float32>.Some(try { // block id: 1016
        var980;
        var1019;
        Float32(-77.0) ** Float32(Int32(var1025) & 3)
    } catch (_) { // block id: 1027
        [var1019, UInt64(252), var1019, UInt64(39), UInt64(211), UInt64(246), UInt64(122), UInt64(38), var1019, UInt64(121)];
        var980;
        Float32(57.0) - var1025
    } finally { // block id: 1043
        var976;
        var1025 ** Float32(Int32(Float32(-18.0)) & 3)
    }) ?? (func2625() ?? match (var1019) {
        case _ => 
            Float32(-25.0)
        
    }))
}


public func func1494(param1495 : Int16) : Rune { // block id: 1496
    var397
}

func func1566(param1567 : Range<Int32>, optionalParam1568 ! : (Range<UInt64>, ((Float32, Int16, Bool, (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Int64), (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Range<Int8>, Array<Array<Unit>>, Int32, Bool), ((Float32, Int16, Bool, (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Int64), (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Range<Int8>, Array<Array<Unit>>, Int32, Bool), Range<Int8>, Option<Range<Int32>>, Range<Int64>, UInt16, Int64, Unit) = ((UInt64(195)&127..=UInt64(7)&127:34|1), ((Float32(Float32(61.0)), Int16(-50), false, (UInt16(14), Int8(-88), false, [Int32(46), Int32(120), Int32(8), Int32(49), Int32(-105), Int32(-124), Int32(35), Int32(101), Int32(80), Int32(105)], 'k', 'O', (-118), Int8(-58)), Int64(UInt8(160))), (UInt16(Int16(-61)), Int8(62), false, [Int32(24), Int32(-98), Int32(8), Int32(81), Int32(-35), Int32(-74), Int32(53), Int32(-54), Int32(-20), Int32(2)], 'V', '5', Int64(UInt16(31)), Int8(62)), (Int8(UInt8(3))&127..=Int8(-28)&127:(Int64(Int8(94))|1)), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], Int32(Int8(-24)), false), ((Float32(Float32(45.0)), Int16(Int8(-116)), ((UInt8(26)&127..UInt8(250)&127:(33|1)) is Array<Array<Unit>>), (UInt16(178), Int8(24), false, [Int32(-30), Int32(-126), Int32(13), Int32(114), Int32(103), Int32(-77), Int32(-30), Int32(39), Int32(37), Int32(73)], '2', 'l', 79, Int8(82)), Int64(UInt32(241))), (UInt16(Int8(-4)), Int8(Int8(-91)), true, [Int32(19), Int32(111), Int32(-87), Int32(47), Int32(-105), Int32(-49), Int32(13), Int32(-47), Int32(56), Int32(29)], 'L', 'Y', 33, Int8(-38)), (Int8(UInt8(94))&127..=Int8(-27)&127:(46|1)), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], Int32(Int16(UInt8(48))), (() is Class421)), (Int8(Int8(Int8(-30)))&127..Int8(Int8(114))&127:(Int64(UInt32(UInt32(78)))|1)), Option<Range<Int32>>.Some((Int32(47)&127..Int32(-11)&127:65|1)), ((-102)&127..(-67)&127:70|1), UInt16(Int8(UInt8(Int8(94)))), Int64(Int8(-74)), ()), namedParam1752 ! : UInt32) : Option<Array<Unit>> { // block id: 1753
    var454
}

public func func1757(param1758 : Range<UInt32>) : Int32 { // block id: 1759
    var var1770 : UInt8 = UInt8(152);
    let var1773 : UInt8 = UInt8(177);
    match ([Int32(34), Int32(-53), Int32(-97), Int32(2), Int32(94), Int32(26), Int32(0), Int32(107), Int32(-108), Int32(108)][5]) {
        case 59 => 
            ();
            var1770 ** (var1773 & 3)
        
        case -62 | -80 => 
            UInt8(178) << ((UInt8(153)) & 7)
        
        case _ => 
            Option<Class421>.Some(Class421());
            UInt8(226) & var1770
        
        case 110 | -52 | -38 => 
            var1770
        
        case _ => 
            var1770 & var1773
        
    };
    var loopTimeVar1812 : Range<UInt64> = (UInt64(UInt16(48))&127..UInt64(199)&127:((-80)|1));
    for (i in loopTimeVar1812 where if (true) { // block id: 1802
        ();
        var885
    } else { // block id: 1805
        var885
    }[2]) {
        ();
        UInt8(var1773)
    };
    Int32(if (var1823[8]) { // block id: 1826
        var1770 ^ UInt8(125)
    } else if (func880(var1832)) { // block id: 1834
        ();
        Class421();
        var1773 - var1773
    } else { // block id: 1840
        UInt8(185)
    })
}

func func1917(param1918 : Array<Class421>) : (Range<UInt64>, ((Float32, Int16, Bool, (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Int64), (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Range<Int8>, Array<Array<Unit>>, Int32, Bool), ((Float32, Int16, Bool, (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Int64), (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Range<Int8>, Array<Array<Unit>>, Int32, Bool), Range<Int8>, Option<Range<Int32>>, Range<Int64>, UInt16, Int64, Unit) { // block id: 1919
    (Int8(-63)&127..Int8(33)&127:(-71)|1);
    let var1958 : Array<Int32> = Array<Int32>(10){ i => Int32(Int8(60)) };
    var var1983 : Rune = 'V';
    var var2110 : Range<Int64> = (30&127..=Int64(UInt16(148))&127:(Int64(UInt16(UInt16(0)))|1));
    if (if (var542) { // block id: 1924
        false
    } else if (true) { // block id: 1927
        ();
        var1930;
        Float32(42.0) > var1935
    } else { // block id: 1938
        true
    }) { // block id: 1940
        let var1993 : Int32 = Int32(UInt8(UInt8(94)));
        var var2010 : Rune = 'y';
        var var2106 : Range<Int8> = (Int8(30)&127..=Int8(-30)&127:112|1);
        (var1943, ((var1935, Int16(63), false, (var1952, var688, false, var1958, var1983, 'X', 86, Int8(118)), var957), var885, (Int8(6)&127..=Int8(102)&127:(-82)|1), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], var1993, true), ((Float32(-127.0), Int16(73), true, (var1952, Int8(-24), false, [Int32(-76), Int32(17), Int32(71), Int32(101), Int32(-103), Int32(111), Int32(-36), Int32(92), Int32(-111), Int32(-39)], 'r', var2010, var513, Int8(37)), 69), var885, (Int8(-66)&127..=var688&127:(8|1)), var2021, Int32(74), var542), var2106, Option<Range<Int32>>.None, var2110, var1952, var1930, ())
    } else { // block id: 2121
        Option<Unit>.None;
        var2124
    }
}



public func func2375(param2376 : (Class39) -> Range<UInt64>) : Unit { // block id: 2379
    var loopTimeVar2384 : Int64 = 0;
    while ((true) && loopTimeVar2384 < 100 ) {
        loopTimeVar2384++;

    };
    var688--;
    var var2389 : UInt8 = UInt8(Int8(50));
    var var2403 : ((Float32, Int16, Bool, (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Int64), (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Range<Int8>, Array<Array<Unit>>, Int32, Bool) = ((Float32(94.0), Int16(-31), true, (UInt16(UInt8(223)), Int8(Int8(-45)), false, [Int32(50), Int32(62), Int32(-123), Int32(56), Int32(47), Int32(-90), Int32(117), Int32(-42), Int32(-25), Int32(119)], 'E', 'O', (-16), Int8(UInt8(62))), 63), (UInt16(216), Int8(UInt8(22)), true, [Int32(70), Int32(-65), Int32(-115), Int32(126), Int32(122), Int32(12), Int32(-72), Int32(-87), Int32(-116), Int32(-21)], 'P', '0', 40, Int8(16)), (Int8(105)&127..Int8(60)&127:(-7)|1), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], Int32(-122), ((Int32(121)&127..=Int32(-92)&127:(-31)|1) is (Array<Range<UInt64>>) -> Bool));
    let var2541 : Int16 = Int16(99);
    var var2577 : Unit = ();
    var var2603 : Option<UInt8> = (Float32(88.0) as UInt8);
    var2389 -= (try { // block id: 2398
        var1952;
        if (var542) { var2403 } else { ((Float32(92.0), var2541, var542, (var1952, Int8(17), var542, [Int32(-5), Int32(-25), Int32(-20), Int32(19), Int32(-54), Int32(-117), Int32(85), Int32(-49), Int32(83), Int32(-99)], var397, 'o', (-44), var688), var957), (var1952, var688, var542, [Int32(-45), Int32(76), Int32(-65), Int32(-92), Int32(43), Int32(106), Int32(126), Int32(-85), Int32(-15), Int32(-118)], '2', 'h', 24, Int8(-20)), (var688&127..Int8(91)&127:((-105)|1)), [[(), (), (), (), (), (), (), (), (), ()], var966, [(), (), (), (), (), (), (), (), (), ()], [var976, var976, (), var976, var2577, (), var976, (), (), var2577], [(), var976, var2577, (), (), var2577, (), var2577, (), ()], var966, var966, [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], var1002, var542) } ;
        var2603
    } catch (_) { // block id: 2606
        var2403;
        if (var542) { Option<UInt8>.Some(UInt8(126)) } else { Option<UInt8>.None } 
    } ?? UInt8(var2615))
}

func func2625(param2626 : (Class421) -> Range<Int8>) : Unit { // block id: 2629

}

public func func2636(param558 : Class421) : Range<Int8> { // block id: 559
    (Int8(-29)&127..=Int8(-80)&127:113|1)
}

public func func2639(param175 : Class39) : Range<UInt64> { // block id: 176
    var var206 : Bool = false;
    let var211 : Int8 = Int8(UInt8(UInt8(175)));
    if (match (var182) {
        case _ : Float64 => 
            (-19.0);
            '5';
            true
        
        case _ => 
            var206 ||= var206;
            var211 != var211
        
    }) { (var222 ?? [(UInt64(166)&127..UInt64(157)&127:43|1), (UInt64(54)&127..=UInt64(35)&127:27|1), (UInt64(43)&127..UInt64(128)&127:(-97)|1), (UInt64(38)&127..UInt64(71)&127:7|1), (UInt64(113)&127..=UInt64(179)&127:63|1), (UInt64(23)&127..=UInt64(48)&127:65|1), (UInt64(106)&127..=UInt64(208)&127:(-60)|1), (UInt64(81)&127..UInt64(37)&127:(-2)|1), (UInt64(163)&127..=UInt64(125)&127:(-90)|1), (UInt64(243)&127..UInt64(137)&127:9|1)]) } else { (Option<Array<Range<UInt64>>>.None ?? [var233, var233, var233, var233, var233, (var241&127..var22&127:(var127|1)), var233, var233, (UInt64(171)&127..var250&127:(var127|1)), (UInt64(34)&127..=UInt64(57)&127:(var127|1))]) } [0]
}

public func func1508(param1509 : Array<Int32>) : UInt16 { // block id: 1510
    let var1556 : Array<Range<UInt64>> = [(UInt64(159)&127..=UInt64(174)&127:(-115)|1), (UInt64(79)&127..UInt64(201)&127:24|1), (UInt64(220)&127..=UInt64(10)&127:15|1), (UInt64(63)&127..UInt64(237)&127:(-47)|1), (UInt64(81)&127..UInt64(221)&127:(-17)|1), (UInt64(7)&127..=UInt64(112)&127:71|1), (UInt64(155)&127..=UInt64(244)&127:79|1), (UInt64(237)&127..UInt64(99)&127:9|1), (UInt64(184)&127..=UInt64(155)&127:(-105)|1), (UInt64(15)&127..UInt64(233)&127:(-24)|1)];
    var loopTimeVar1564 : Int64 = 0;
    (match (var1514) {
        case _ : ((Float32, Int16, Bool, (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Int64), (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Range<Int8>, Array<Array<Unit>>, Int32, Bool) => 
            ();
            var1456
        
        case caseVar1523 => 
            var1456
        
        case _ : (Range<UInt64>, ((Float32, Int16, Bool, (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Int64), (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Range<Int8>, Array<Array<Unit>>, Int32, Bool), ((Float32, Int16, Bool, (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Int64), (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Range<Int8>, Array<Array<Unit>>, Int32, Bool), Range<Int8>, Option<Range<Int32>>, Range<Int64>, UInt16, Int64, Unit) => 
            if (true) { Option<Unit>.None } else { Option<Unit>.Some(var976) } 
        
        case caseVar1536 : UInt8 => 
            if (true) { Option<Unit>.Some(var976) } else { var1456 } 
        
        case _ => 
            let var1546 : UInt64 = UInt64(UInt16(Int8(111)));
            var1546;
            var976;
            Option<Unit>.Some(var976)
        
    } ?? while ((func880(var1556)) && loopTimeVar1564 < 100 ) {
        loopTimeVar1564++;
        var513 %= ((var957) | 1);
        var976
    });
    let var1843 : (Range<UInt32>) -> Int32 = func1757;
    let var1850 : UInt32 = UInt32(78);
    var var1853 : Int64 = Int64(Int8(29));
    var var1900 : Range<Int32> = (Int32(-16)&127..Int32(-82)&127:(-38)|1);
    func func2256(namedParam2257 ! : (Range<UInt64>, ((Float32, Int16, Bool, (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Int64), (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Range<Int8>, Array<Array<Unit>>, Int32, Bool), ((Float32, Int16, Bool, (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Int64), (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Range<Int8>, Array<Array<Unit>>, Int32, Bool), Range<Int8>, Option<Range<Int32>>, Range<Int64>, UInt16, Int64, Unit), optionalParam2258 ! : ((Float32, Int16, Bool, (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Int64), (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Range<Int8>, Array<Array<Unit>>, Int32, Bool) = ((Float32(35.0), Int16(-18), (() is Array<Unit>), (UInt16(UInt16(130)), Int8(Int8(-5)), true, [Int32(44), Int32(-81), Int32(-114), Int32(2), Int32(120), Int32(94), Int32(-64), Int32(-108), Int32(-85), Int32(102)], 'k', '0', Int64(52), Int8(49)), Int64(UInt8(Int8(21)))), (UInt16(Int16(UInt8(77))), Int8(Int8(Int8(116))), false, [Int32(UInt8(97)), Int32(-87), Int32(-93), Int32(28), Int32(UInt32(18)), Int32(Int16(42)), Int32(Int16(-73)), Int32(-32), Int32(Int8(122)), Int32(UInt16(35))], 'r', '4', (-29), Int8(70)), (Int8(-109)&127..Int8(-93)&127:(-34)|1), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], Int32(31), true)) : Range<Int64> { // block id: 2373
        let var2631 : ((Class421) -> Range<Int8>) -> Unit = { lambdaParameter2634 : (Class421) -> Range<Int8> =>  };
        func2639|>{ lambdaParameter2622 : (Class39) -> Range<UInt64> => func2636|>var2631 };
        ((-75)&127..56&127:(-8)|1)
    }
;
    let var2645 : ((Float32, Int16, Bool, (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Int64), (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Range<Int8>, Array<Array<Unit>>, Int32, Bool) = ((Float32(Float32(-116.0)), Int16(-111), true, (UInt16(114), Int8(UInt8(124)), false, [Int32(45), Int32(-127), Int32(110), Int32(122), Int32(57), Int32(-1), Int32(-8), Int32(91), Int32(46), Int32(52)], '2', 'P', Int64(Int16(-13)), Int8(-77)), (-49)), (UInt16(115), Int8(-107), true, [Int32(57), Int32(119), Int32(Int32(113)), Int32(-57), Int32(66), Int32(-128), Int32(Int8(27)), Int32(-93), Int32(UInt8(114)), Int32(24)], 'B', 'y', Int64(UInt16(Int16(-61))), Int8(Int8(84))), (Int8(UInt8(UInt8(247)))&127..=Int8(Int8(UInt8(6)))&127:((-35)|1)), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], Int32(-83), false);
    let var2709 : Bool = (UInt32(214) is (Int16) -> Float32);
    func1566(match (((var1847&127..=var1850&127:(var1853|1))|>var1843)) {
        case caseVar1858 => 
            var976;
            Option<Float32>.Some(Float32(67.0));
            (Int32(-67)&127..Int32(15)&127:(-101)|1)
        
        case 8 => 
            if (var542) { (UInt64(126)&127..=UInt64(25)&127:(-71)|1) } else { (UInt64(204)&127..=UInt64(119)&127:(var513|1)) } ;
            var1875;
            let var1880 : Range<Int32> = (Int32(UInt32(155))&127..=Int32(Int16(Int16(111)))&127:(Int64(UInt64(Int32(UInt32(219))))|1));
            var1880
        
        case 120 | -57 => 
            (Int32(-47)&127..Int32(-5)&127:18|1)
        
        case _ : (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8) => 
            var1456;
            var1900
        
        case _ => 
            if (var542) { var454 } else { Option<Array<Unit>>.Some([(), (), (), (), (), (), (), (), (), ()]) } ;
            ();
            var var1914 : Range<Int32> = (Int32(-73)&127..=Int32(6)&127:38|1);
            if (false) { var1900 } else { var1914 } 
        
    }, optionalParam1568 : ((Option<Array<Class421>>.None ?? var1479)|>func1917), namedParam1752 : match (func2256(namedParam2257 : var2124, optionalParam2258 : var2645)) {
        case _ : Array<Array<Unit>> => 
            var1850
        
        case _ : Float32 => 
            if (var2709) { [var1002, Int32(117), Int32(69), Int32(72), Int32(-60), Int32(-30), var1002, var1002, Int32(58), var1002] } else { param1509 } ;
            var1847 & var1850
        
        case _ => 
            var976;
            ();
            var1850 * UInt32(105)
        
    });
    (match {
        case true => 
        UInt16(80)
        case var2709 => 
        var1952;
        var1952 > var1952;
        let var2747 : UInt16 = UInt16(118);
        var2747
        case _ => 
        var var2753 : Range<Int8> = (Int8(-83)&127..=Int8(10)&127:(-1)|1);
        if (false) { var2753 } else { (Int8(63)&127..=Int8(19)&127:(-32)|1) } ;
        var var2758 : UInt16 = UInt16(UInt8(Int8(0)));
        var2758 * var1952
    } | UInt16(UInt8(136))) + UInt16(126)
}

public func func705(param706 : Float32) : UInt16 { // block id: 707
    let var717 : (Float32, Int16, Bool, (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Int64) = (Float32(-102.0), Int16(UInt8(UInt8(UInt8(9)))), ((Float32(Float32(91.0)), Int16(UInt16(192)), (((-68)&127..30&127:(-81)|1) is Array<UInt64>), (UInt16(110), Int8(-36), true, [Int32(-96), Int32(126), Int32(64), Int32(-41), Int32(21), Int32(-84), Int32(-2), Int32(107), Int32(7), Int32(-57)], 'c', 'h', (-14), Int8(-43)), Int64(UInt64(148))) is Range<Int16>), (UInt16(68), Int8(-82), true, [Int32(UInt8(33)), Int32(Int16(-5)), Int32(104), Int32(-90), Int32(66), Int32(-78), Int32(Int32(-115)), Int32(Int16(-5)), Int32(-115), Int32(UInt32(47))], '6', 'c', Int64(UInt32(38)), Int8(Int8(UInt8(162)))), (-88));
    match {
        case true => 
        if (false) { var717 } else { var717 } 
        case var542 => 
        var var776 : UInt32 = UInt32(166);
        var776 **= (var776 & 3);
        let var783 : Array<Range<UInt64>> = Array<Range<UInt64>>(10){ i => (UInt64(UInt8(141))&127..UInt64(Int16(-76))&127:(89|1)) };
        if (var542) { [(UInt64(181)&127..UInt64(31)&127:74|1), (UInt64(151)&127..=UInt64(30)&127:68|1), (UInt64(97)&127..UInt64(24)&127:72|1), (UInt64(15)&127..UInt64(166)&127:(-111)|1), (UInt64(187)&127..=UInt64(56)&127:(-118)|1), (UInt64(105)&127..UInt64(57)&127:(-34)|1), (UInt64(16)&127..UInt64(163)&127:94|1), (UInt64(119)&127..=UInt64(139)&127:13|1), (UInt64(181)&127..UInt64(254)&127:30|1), (UInt64(196)&127..UInt64(140)&127:24|1)] } else { var783 } ;
        var717
        case _ => 
        UInt32(65);
        if (var542) { (UInt32(66)&127..=UInt32(220)&127:(-104)|1) } else { var836 } ;
        var717
    }[4] - var513;
    [(), (), (), (), (), (), (), (), (), ()][7];
    let var1437 : (Int16) -> Float32 = { lambdaParameter1440 : Int16 => Float32(Float32(-22.0)) };
    func func845() : UInt16 { // block id: 846
        func func849(optionalParam850 ! : Array<UInt64> = [UInt64(Int8(60)), UInt64(UInt16(Int16(-71))), UInt64(UInt8(208)), UInt64(179), UInt64(70), UInt64(UInt64(Int8(Int8(-33)))), UInt64(Int8(Int8(UInt8(18)))), UInt64(27), UInt64(UInt16(106)), UInt64(200)], optionalParam873 ! : Range<Int64> = ((-30)&127..(-83)&127:54|1), namedParam875 ! : Bool, namedParam876 ! : Float32) : Bool { // block id: 877
            var542
        }
;
        let var1445 : Int16 = Int16(Int16(UInt8(21)));
        var loopTimeVar1459 : Range<UInt64> = (UInt64(231)&127..=UInt64(UInt64(Int16(-43)))&127:(60|1));
        for (i in loopTimeVar1459 where func849(namedParam875 : ([(UInt64(46)&127..UInt64(133)&127:(-61)|1), (UInt64(70)&127..UInt64(41)&127:13|1), (UInt64(42)&127..UInt64(146)&127:(-126)|1), (UInt64(211)&127..=UInt64(115)&127:61|1), (UInt64(44)&127..=UInt64(183)&127:(-1)|1), (UInt64(44)&127..UInt64(234)&127:(-111)|1), (UInt64(96)&127..UInt64(228)&127:(-99)|1), (UInt64(118)&127..=UInt64(159)&127:(-108)|1), (UInt64(196)&127..=UInt64(107)&127:(-85)|1), (UInt64(193)&127..=UInt64(113)&127:(-23)|1)]|>func880), namedParam876 : (var1445|>var1437))) {
            (var1456 ?? ())
        };
        try { // block id: 1467
            (var1456 ?? var976);
            var loopTimeVar1475 : Int64 = 0;
            do {
                loopTimeVar1475++;

            } while ((false) && loopTimeVar1475 < 100 ) ;
            var1479[9]
        } finally { // block id: 1492
            Int16(94)|>func1494;
            (var1456 ?? var976);
            if (var542) { var563 } else { var563 } 
        };
        var var2767 : (Array<Int32>) -> UInt16 = func1508;
        var var2775 : Array<Int32> = Array<Int32>(10){ i => Int32(UInt32(242)) };
        if (var885[2]) { [Int32(-119), Int32(-61), Int32(-51), Int32(-111), Int32(59), Int32(-74), Int32(-1), Int32(105), Int32(10), Int32(-67)] } else { var2775 } |>var2767
    }
;
    func845()
}

public func func667(optionalParam668 ! : Float32 = Float32(Float32(-75.0)), namedParam671 ! : Array<Int32>, optionalParam672 ! : Range<UInt64> = (UInt64(176)&127..UInt64(142)&127:82|1), optionalParam674 ! : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]) : Enum664 { // block id: 676
    let var2860 : Range<UInt16> = (UInt16(1)&127..=UInt16(Int8(52))&127:((-83)|1));
    let var2869 : ?Range<Int32> = Option<Range<Int32>>.Some((Int32(-50)&127..Int32(-126)&127:54|1));
    let var2878 : UInt16 = UInt16(Int8(UInt8(UInt8(208))));
    if (var542) { match (if (var542) { // block id: 682
            if (var542) { (Int8(84)&127..Int8(0)&127:(-90)|1) } else { (var688&127..Int8(-56)&127:(var513|1)) } ;
            var397
        } else { // block id: 694
            var397
        }) {
        case _ => 
            [UInt64(60), UInt64(174), UInt64(139), UInt64(112), UInt64(75), UInt64(86), UInt64(43), UInt64(71), UInt64(62), UInt64(61)];
            if (var542) { Enum664.defaultValue } else { Enum664.defaultValue } 
        
    } } else { match ((Float32(71.0)|>func705)) {
        case _ => 
            ();
            var1823;
            if (true) { Enum664.defaultValue } else { Enum664.defaultValue } 
        
        case _ : ((Float32, Int16, Bool, (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Int64), (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Range<Int8>, Array<Array<Unit>>, Int32, Bool) => 
            var var2810 : Enum664 = Enum664.enumValue2812([(((UInt8(147)&127..=UInt8(14)&127:60|1) as Float32) is Float64), true, (((-110)&127..(-6)&127:(11|1)) is Option<UInt8>), true, true, (Option<Float32>.None is Range<Int8>), false, true, ([UInt32(113), UInt32(159), UInt32(161), UInt32(20), UInt32(201), UInt32(149), UInt32(94), UInt32(211), UInt32(165), UInt32(63)] is Interface45), ([(UInt64(46)&127..=UInt64(79)&127:10|1), (UInt64(242)&127..=UInt64(158)&127:56|1), (UInt64(233)&127..UInt64(163)&127:(-48)|1), (UInt64(195)&127..UInt64(27)&127:(-33)|1), (UInt64(69)&127..UInt64(233)&127:(50|1)), (UInt64(85)&127..UInt64(186)&127:((-117)|1)), (UInt64(225)&127..UInt64(24)&127:(-19)|1), (UInt64(190)&127..UInt64(227)&127:(-59)|1), (UInt64(222)&127..UInt64(167)&127:(-84)|1), (UInt64(82)&127..UInt64(189)&127:(-23)|1)] is Aggregate431)], (UInt16(UInt16(146))&127..UInt16(28)&127:(45|1)));
            if (var542) { var2810 } else { var2810 } ;
            Enum664.enumValue2812(var1823, var2860)
        
        case _ => 
            var2869;
            ();
            Enum664.enumValue2812(var1823, (UInt16(145)&127..=var2878&127:(var957|1)))
        
    } } 
}

func func660(param661 : Array<UInt32>) : Int16 { // block id: 662
    match (func667(namedParam671 : var2885)) {
        case enumValue2812(caseVar2889, caseVar2890 : ((Float32, Int16, Bool, (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Int64), (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Range<Int8>, Array<Array<Unit>>, Int32, Bool)) => 
            Int16(23)
        
        case caseVar2895 : Unit => 
            let var2900 : Int16 = Int16(118);
            Int16(4) << ((var2900) & 7)
        
        case enumValue2812(_, caseVar2904 : Option<Array<Unit>>) => 
            ();
            var976;
            var1875
        
        case _ => 
            if (true) { Option<Class421>.Some(Class421()) } else { var2916 } ;
            var2920;
            var1875
        
    }
}


func func609(param610 : Int16) : Range<UInt32> { // block id: 611
    func func614() : Option<Array<Unit>> { // block id: 615
        let var2948 : String = """
=\\:mW
]RF:3
""";
        let var2979 : ?Float32 = ([Int32(6), Int32(75), Int32(-124), Int32(112), Int32(17), Int32(60), Int32(-95), Int32(101), Int32(-84), Int32(-49)] as Float32);
        let var3052 : Int64 = 19;
        let var3072 : Option<Range<Int32>> = ([(), (), (), (), (), (), (), (), (), ()] as Range<Int32>);
        func func617(namedParam618 ! : Int32, namedParam619 ! : Range<Int16>, namedParam620 ! : Range<Int64>) : Range<Int32> { // block id: 621
            var var649 : Float32 = Float32(85.0);
            try { // block id: 623
                var loopTimeVar628 : Range<UInt64> = (UInt64(UInt8(253))&127..UInt64(Int32(13))&127:(Int64(Int64(Int16(-64)))|1));
                for (i in loopTimeVar628 where var542) {
                    '4'
                };
                (Option<Class421>.None ?? Class421())
            } finally { // block id: 644
                try { // block id: 646
                    var649 -= var649;
                    ();
                    if (false) { var563 } else { var563 } 
                } catch (e: Exception) { // block id: 657
                    var563
                }
            };
            var var2958 : UInt32 = UInt32(Int32(Int8(UInt8(UInt8(205)))));
            try { // block id: 2925
                var1952;
                var976;
                [UInt32(192), UInt32(11), UInt32(39), UInt32(154), UInt32(11), UInt32(142), UInt32(23), UInt32(193), UInt32(176), UInt32(92)]
            } finally { // block id: 2929
                [Class421(), Class421(), Class421(), var563, var563, Class421(), Class421(), Class421(func2375, var2948), var563, var563];
                [var1847, UInt32(218), UInt32(54), var1847, var2958, UInt32(209), UInt32(136), var2958, UInt32(226), var2958]
            }|>func660;
            try { // block id: 2970
                Option<Class421>.None;
                try { // block id: 2973
                    ();
                    ();
                    (Int32(-65)&127..=Int32(38)&127:(-87)|1)
                } finally { // block id: 2977
                    var2979;
                    if (true) { (Int32(-124)&127..Int32(122)&127:(-75)|1) } else { (Int32(10)&127..Int32(-100)&127:(-47)|1) } 
                }
            } finally { // block id: 2986
                match (var1847) {
                    case caseVar2991 : Int16 => 
                        var1952 -= UInt16(85)
                    
                    case 120 | 101 | 44 => 
                        ();
                        var976
                    
                    case 87 | 85 => 
                        ();
                        if (var542) { var3008 } else { (Float32(-116.0), param610, var542, var885, var3052) } ;
                        var3056 **= (namedParam618 & 3)
                    
                    case _ => 
                        ()
                    
                };
                (var3072 ?? (var3056&127..=Int32(94)&127:(var957|1)))
            }
        }
;
        func617(namedParam618 : var1002, namedParam619 : (Int16(-78)&127..=Int16(-39)&127:107|1), namedParam620 : ((-42)&127..(-25)&127:(-18)|1));
        var var3125 : UInt32 = UInt32(148);
        try (resource = Class421()) { // block id: 3083
            var976;
            let var3093 : ((Class39) -> Range<UInt64>) -> Unit = func2375;
            try (resource = Class421()) { // block id: 3086
                [Class421(func2375, "@k<cD,j#-y"), Class421(var3093, var2948), var563, Class421(func2375, var2948), var563, var563, var563, var563, var563, Class421(func2375, var2948)];
                var912;
                ()
            } finally { // block id: 3110
                var3112;
                ()
            };
            var976
        } catch (_) { // block id: 3119
            var loopTimeVar3130 : Int64 = 0;
            do {
                loopTimeVar3130++;
                var3125 **= (var3125 & 3);
                ()
            } while ((false) && loopTimeVar3130 < 100 ) 
        } finally { // block id: 3131
            match (true) {
                case _ : Range<UInt64> => 
                    UInt16(8);
                    var976;
                    var976
                
                case _ : Unit => 
                    ();
                    ();
                    var542 ||= true
                
                case _ => 
                    var3152 += param610;
                    ()
                
            };
            (var1456 ?? ())
        };
        Option<Array<Unit>>.None
    }
;
    match (func614()) {
        case _ => 
            var var3165 : Unit = ();
            var3165;
            var836
        
        case _ => 
            (var1847&127..var1847&127:((-76)|1))
        
    }
}




func func534(param535 : (String) -> String) : Array<Unit> { // block id: 538
    let var599 : Range<Int16> = (Int16(30)&127..Int16(-120)&127:(-35)|1);
    let var3223 : Range<Int64> = ((-70)&127..(-121)&127:(-12)|1);
    let var3226 : Range<UInt64> = (UInt64(UInt32(UInt8(Int8(-88))))&127..UInt64(131)&127:(108|1));
    func func552(optionalParam553 ! : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]) : Bool { // block id: 555
        var563|>func557;
        let var3191 : ((Class39) -> Range<UInt64>) -> Unit = func2375;
        try (resource = Class421()) { // block id: 566
            var var572 : Int16 = Int16(UInt16(105));
            let var604 : Int16 = Int16(UInt16(142));
            try { // block id: 568
                ();
                (var572&127..=var572&127:((-57)|1))
            } catch (_) { // block id: 577
                ();
                let var580 : Range<Int16> = (Int16(80)&127..=Int16(73)&127:(Int64(UInt8(Int8(61)))|1));
                var580
            } finally { // block id: 587
                let var590 : UInt8 = UInt8(54);
                (var590&127..var590&127:(var513|1));
                var var596 : Bool = true;
                if (var596) { var599 } else { (Int16(-119)&127..var604&127:(var513|1)) } 
            };
            var572|>func609;
            var3178.getOrThrow()
        } finally { // block id: 3180
            (Option<Int32>.None ?? Int32(17));
            (Class421(var3191, """
7nMjh
MS~Gc
""") as Range<Int32>);
            var3196 -= var3196
        };
        ((Option<(((Float32, Int16, Bool, (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Int64), (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Range<Int8>, Array<Array<Unit>>, Int32, Bool), Range<Int64>, Range<UInt64>, Option<Bool>, Int8)>.None ?? ((var3008, var885, (Int8(93)&127..=Int8(-4)&127:(-80)|1), var2021, Int32(-96), var542), var3223, var3226, Option<Bool>.None, var2615))[3] ?? false)
    }
;
    let var3266 : Array<UInt32> = Array<UInt32>(10){ i => UInt32(Int8(UInt8(UInt8(227)))) };
    var var3339 : (((Float32, Int16, Bool, (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Int64), (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Range<Int8>, Array<Array<Unit>>, Int32, Bool), Range<Int64>, Range<UInt64>, Option<Bool>, Int8) = (((Float32(Float32(-12.0)), Int16(118), true, (UInt16(109), Int8(24), true, [Int32(-90), Int32(104), Int32(-123), Int32(51), Int32(3), Int32(-1), Int32(-45), Int32(113), Int32(95), Int32(-104)], 't', 'g', (-84), Int8(-23)), Int64(Int32(-23))), (UInt16(181), Int8(114), ((UInt32(182)&127..UInt32(67)&127:73|1) is Array<Unit>), [Int32(-68), Int32(71), Int32(-103), Int32(124), Int32(75), Int32(22), Int32(118), Int32(24), Int32(-97), Int32(8)], 'x', 'K', (-124), Int8(49)), (Int8(-104)&127..=Int8(-76)&127:(Int64(UInt16(132))|1)), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], Int32(Int16(Int8(-74))), ((Option<(((Float32, Int16, Bool, (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Int64), (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Range<Int8>, Array<Array<Unit>>, Int32, Bool), Range<Int64>, Range<UInt64>, Option<Bool>, Int8)>.Some((((Float32(-102.0), Int16(33), false, (UInt16(67), Int8(123), false, [Int32(-69), Int32(-30), Int32(58), Int32(119), Int32(77), Int32(53), Int32(75), Int32(-79), Int32(-100), Int32(-57)], 'R', 'f', 52, Int8(-101)), 18), (UInt16(125), Int8(-126), true, [Int32(-62), Int32(48), Int32(-110), Int32(120), Int32(75), Int32(108), Int32(-58), Int32(58), Int32(-45), Int32(-4)], 'D', 'e', (-77), Int8(80)), (Int8(39)&127..=Int8(-66)&127:126|1), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], Int32(-34), false), ((-10)&127..=(-104)&127:(95|1)), (UInt64(123)&127..=UInt64(39)&127:(-64)|1), Option<Bool>.None, Int8(-7))) as Float32) is Option<Range<Int32>>)), (6&127..16&127:(-59)|1), (UInt64(240)&127..UInt64(44)&127:(105|1)), (UInt16(13) as Bool), Int8(-28));
    if ((var542 || if (true) { // block id: 546
        false
    } else { // block id: 548
        var542
    })) { (if (func552(optionalParam553 : var966)) { var966 } else { (if (false) { var966 } else { [(), (), (), (), (), (), (), (), (), ()] } ) } ) } else { match (([Int32(24), Int32(121), var3252, Int32(-50), Int32(-71), var3252, Int32(-105), Int32(94), Int32(14), var3252], var3266, var3290, (), var3294)[1]) {
        case caseVar3300 : Int8 => 
            var var3324 : UInt32 = UInt32(162);
            if (var542) { [var1847, var3307, var1847, var3307, UInt32(113), UInt32(108), UInt32(1), UInt32(166), var3316, UInt32(215)] } else { [UInt32(33), UInt32(123), var3324, UInt32(116), var3307, UInt32(40), var3316, UInt32(213), var3316, UInt32(251)] } ;
            [(), (), (), (), (), (), (), (), (), ()]
        
        case _ => 
            ();
            var3339;
            [(), (), (), (), (), (), (), (), (), ()]
        
        case _ => 
            Int8(95);
            Option<(((Float32, Int16, Bool, (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Int64), (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Range<Int8>, Array<Array<Unit>>, Int32, Bool), Range<Int64>, Range<UInt64>, Option<Bool>, Int8)>.Some(var3339);
            var966
        
    } } 
}

public func func3444(param168 : String) : String { // block id: 169
    Class39();
    let var260 : (Class39) -> Range<UInt64> = { lambdaParameter263 : Class39 => (UInt64(Int64(Int32(9)))&127..UInt64(UInt64(Int8(-52)))&127:((-95)|1)) };
    if (((Class39()|>var260) is Array<Int32>)) { (Aggregate60.var277) } else { param168 } 
}

func func460(param461 : Unit) : Int32 { // block id: 462
    var var3456 : Range<UInt16> = (UInt16(UInt16(Int8(56)))&127..=UInt16(UInt16(Int16(Int8(85))))&127:(11|1));
    Aggregate431.func466((var3456, '5', "(dk_g&T_)n")[2], optionalParam468 : var3290, namedParam482 : try { // block id: 3471
        param461;
        var976;
        (var1930&127..=(-49)&127:(var513|1))
    } finally { // block id: 3478
        ();
        var var3487 : Range<Int64> = ((-97)&127..85&127:(-96)|1);
        if (true) { (103&127..=var957&127:(55|1)) } else { var3487 } 
    });
    var542 ||= var542;
    var3252
}

public func func416(param417 : Range<Int8>) : Int16 { // block id: 418
    var var425 : Class421 = Class421();
    var425.var428 >>= ((Aggregate431.func436(func174)) & 7);
    (Int16(11) | var3517[0]) >> ((Int16(-25)) & 7)
}




public func func367(param368 : Array<Range<UInt64>>, namedParam369 ! : UInt8, optionalParam370 ! : Float64 = Float64(Float64((-44.0)))) : UInt64 { // block id: 374
    var var400 : Int64 = Int64(UInt32(Int32(-61)));
    let var3556 : Enum664 = Enum664.defaultValue;
    func func408(param409 : String, param410 : Range<Int16>, param411 : Range<UInt16>) : Unit { // block id: 412
        var loopTimeVar3535 : Int64 = 0;
        do {
            loopTimeVar3535++;

        } while (((((Int8(-47)&127..var3529&127:(var1930|1))|>func416) is Unit)) && loopTimeVar3535 < 100 ) ;
        var688 ^= match (try { // block id: 3540
                Enum664.enumValue2812([true, var542, true, false, var542, var542, false, var542, true, false], (UInt16(222)&127..UInt16(254)&127:(-58)|1))
            } finally { // block id: 3554
                var3556
            }) {
            case caseVar3560 : Range<Int8> => 
                var3529
            
            case _ => 
                var976;
                var688 / ((var688) | 1)
            
        }
    }
;
    var var3574 : Range<UInt16> = (UInt16(144)&127..UInt16(220)&127:(-31)|1);
    var loopTimeVar3577 : Int64 = 0;
    do {
        loopTimeVar3577++;
        var var384 : Int32 = Int32(-18);
        var var405 : Int8 = Int8(-124);
        (UInt16(159), Int8(-120), true, [var384, var384, var384, var384, Int32(-27), Int32(66), Int32(41), var384, var384, var384], '5', var397, var400, var405);
        var var3570 : String = """
rNU?\"
j)f`d
""";
        func408(var3570, (Int16(30)&127..Int16(11)&127:(-72)|1), var3574)
    } while ((false) && loopTimeVar3577 < 100 ) ;
    var var3588 : ((Class39) -> Range<UInt64>) -> Unit = func2375;
    var var3929 : Array<UInt32> = Array<UInt32>(10){ i => UInt32(78) };
    match (match (Option<Array<Class421>>.Some([var563, var563, var563, var563, Class421(var3588, "OMK8_iR9*)"), Class421(func2375, "z\\Q\\fo!gI7"), Class421(func2375, var3597), var563, Class421(var3588, "(@NZl3BSqM"), Class421(namedParam3605 : var3588, namedParam3608 : func167)])) {
            case _ => 
                Int16(61);
                var3817
            
        }) {
        case _ => 
            var976;
            var var3891 : Array<UInt32> = [UInt32(68), UInt32(29), UInt32(75), UInt32(23), UInt32(31), UInt32(130), UInt32(4), UInt32(215), UInt32(190), UInt32(19)];
            if (true) { (var2885, var3891, (Int32(-87)&127..Int32(77)&127:2|1), (), 63.0) } else { ([var3056, var3900, var3252, var1002, var3056, Int32(73), Int32(113), var3056, Int32(-58), Int32(111)], [UInt32(93), UInt32(48), UInt32(117), UInt32(60), UInt32(186), UInt32(250), UInt32(166), UInt32(43), UInt32(103), UInt32(126)], (Int32(-17)&127..Int32(45)&127:52|1), var976, (-64.0)) } 
        
        case _ => 
            ([var1002, Int32(-68), var3056, Int32(-24), var3056, Int32(78), var3056, Int32(-108), Int32(-38), var3900], var3929, (Int32(49)&127..Int32(-11)&127:84|1), (), 8.0)
        
    };
    var var3971 : Option<(((Float32, Int16, Bool, (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Int64), (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Range<Int8>, Array<Array<Unit>>, Int32, Bool), Range<Int64>, Range<UInt64>, Option<Bool>, Int8)> = Option<(((Float32, Int16, Bool, (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Int64), (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8), Range<Int8>, Array<Array<Unit>>, Int32, Bool), Range<Int64>, Range<UInt64>, Option<Bool>, Int8)>.Some((((Float32(-31.0), Int16(-38), true, (UInt16(32), Int8(-25), true, [Int32(82), Int32(-12), Int32(-54), Int32(-68), Int32(15), Int32(-31), Int32(-73), Int32(92), Int32(-10), Int32(-119)], 'J', 'W', 109, Int8(90)), 7), (UInt16(191), Int8(-32), true, [Int32(49), Int32(90), Int32(64), Int32(-9), Int32(38), Int32(37), Int32(93), Int32(11), Int32(57), Int32(-98)], 'B', 'V', 66, Int8(-51)), (Int8(49)&127..=Int8(9)&127:((-90)|1)), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], Int32(UInt16(124)), false), ((-34)&127..Int64(Int16(-98))&127:(87|1)), (UInt64(UInt32(198))&127..UInt64(148)&127:((-2)|1)), Option<Bool>.Some(false), Int8(Int8(45))));
    match (if (true) { (if (true) { var3574 } else { var3574 } ) } else { (var1952&127..var1952&127:(26|1)) } ) {
        case caseVar3968 => 
            var3971;
            ((UInt16(15)&127..UInt16(105)&127:90|1), 'c', "*!]+T-gw<*");
            UInt64(74)
        
        case _ => 
            var976;
            var3056 ^= Int32(-72);
            var3112
        
        case _ : UInt8 => 
            -var3112
        
        case _ => 
            ();
            UInt64(216)
        
    }
}

func func35(param36 : Option<Bool>) : Bool { // block id: 37
    let var83 : (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8) = (UInt16(Int16(UInt8(Int8(55)))), Int8(Int8(UInt8(Int8(-26)))), false, [Int32(37), Int32(-7), Int32(UInt16(78)), Int32(Int16(71)), Int32(Int16(86)), Int32(85), Int32(UInt8(160)), Int32(10), Int32(UInt8(Int8(-18))), Int32(9)], 'b', 't', 52, Int8(-69));
    func func47(param48 : UInt32, optionalParam49 ! : Interface43 = Class39(), namedParam51 ! : String) : Class39 { // block id: 52
        var55 |= var64.var67;
        match (var83[3][7]) {
            case _ => 
                if (true) { 'i' } else { var123 } ;
                var127 ^= (-119);
                let var133 : Class39 = Class39();
                var133
            
        }
    }
;
    let var141 : Range<Int16> = (Int16(74)&127..=Int16(118)&127:(-121)|1);
    var var158 : Interface43 = Class39();
    var var281 : (String) -> String = { lambdaParameter284 : String => """
J?BEE
?:gr}
""" };
    func47([UInt32(61), UInt32(129), UInt32(52), UInt32(114), UInt32(129), UInt32(222), UInt32(117), UInt32(82), UInt32(235), UInt32(202)][8], optionalParam49 : match (var141) {
        case _ => 
            let var147 : Interface43 = Class39();
            var147
        
        case caseVar151 : (UInt16, Int8, Bool, Array<Int32>, Rune, Rune, Int64, Int8) => 
            ();
            var155;
            var158
        
        case _ => 
            var163;
            var158
        
    }, namedParam51 : (###")\"/Me]$(::"###|>var281)).var289;
    var var4156 : UInt8 = UInt8(UInt8(Int8(-54)));
    let var4163 : Float32 = Float32(69.0);
    let var4167 : UInt8 = UInt8(UInt8(237));
    ((func47(UInt32(53), optionalParam49 : var158, namedParam51 : var297).func300(namedParam301 : (var4156&127..UInt8(166)&127:(var127|1)), namedParam302 : var4163, namedParam303 : Int32(-9), namedParam304 : var4167)) is Option<Bool>)
}

main(): Int64 {
    try {
        var var4171 : (Option<Bool>) -> Bool = func35;
        (try { // block id: 13
            ();
            ();
            var17
        } catch (_) { // block id: 19
            var22 + UInt64(163);
            var27 %= ((var27) | 1);
            Option<Bool>.Some(false)
        } finally { // block id: 32
            Option<Bool>.None
        } ?? (Option<Bool>.Some(true)|>var4171));
        UInt16(Int8(Int8(-42)));
        match ([var328, false, true, true, var328, var328, true, true, true, false]) {
            case _ : String => 
                [true, var328, var328, var328, var328, var328, true, false, true, var328];
                var27 <<= ((var27) & 7);
                var4208
            
            case caseVar4214 => 
                var155;
                ();
                var127
            
            case _ : Array<Unit> => 
                ();
                ();
                var127 + (-102)
            
            case _ => 
                var155;
                (-95) ^ 102
            
            case _ => 
                let var4239 : Rune = 'T';
                ((UInt16(200)&127..=UInt16(85)&127:(-78)|1), var4239, "`Z/>CyW~#}");
                4
            
        }
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var22*var22), 64)
        crccheck.updateBuffer(UInt64(var241*var241), 64)
        crccheck.updateBuffer(UInt64(var250*var250), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Class355 {

}

extend Class39 {

}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_unexpected_declaration_in_scope
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_expected_character
// ASSERT: scan parse_expected_catch_or_finally_in_try
// ASSERT: scan parse_expected_expr_or_decl_in


