/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output


var var49 : Int16 = Int16(78)
public let var127 : Range<Int16> = (Int16(-98)&127..Int16(-63)&127:(-33)|1)
var var142 : UInt64 = UInt64(11)
var var148 : Int64 = Int64(Int8(-4))
let var282 : ?Int64 = Option<Int64>.None
var var366 : Unit = ()
var var455 : UInt8 = UInt8(Int8(30))
let var466 : UInt16 = UInt16(UInt8(Int8(58)))
public var var472 : UInt16 = UInt16(Int8(Int8(-84)))
public var var582 : Unit = ()
public var var618 : Int64 = Int64(UInt32(222))
public var var657 : Float64 = Float64(Float64(Float32(-36.0)))
public let var713 : ?Bool = Option<Bool>.None
var var751 : Bool = (UInt8(152) is Range<UInt16>)
var var830 : ?Bool = (UInt8(UInt8(UInt8(UInt8(50)))) as Bool)
let var889 : Range<UInt16> = (UInt16(Int16(UInt16(Int16(126))))&127..=UInt16(41)&127:(Int64(Int8(95))|1))
public let var931 : ?Unit = Option<Unit>.None
var var964 : Array<Option<Bool>> = [((UInt64(160)&127..UInt64(161)&127:(-122)|1) as Bool), Option<Bool>.None, Option<Bool>.None, (110.0 as Bool), (Class942() as Bool), Option<Bool>.None, Option<Bool>.None, (Int16(-5) as Bool), Option<Bool>.None, Option<Bool>.None]
public let var984 : (UInt32, UInt32, Bool, Int32, Array<Range<UInt16>>, Float32, Float32) = (UInt32(24), UInt32(92), false, Int32(43), [(UInt16(117)&127..UInt16(251)&127:56|1), (UInt16(236)&127..UInt16(197)&127:46|1), (UInt16(192)&127..UInt16(217)&127:(-11)|1), (UInt16(78)&127..=UInt16(150)&127:109|1), (UInt16(132)&127..UInt16(101)&127:(-10)|1), (UInt16(109)&127..UInt16(117)&127:55|1), (UInt16(178)&127..=UInt16(44)&127:(-60)|1), (UInt16(97)&127..UInt16(15)&127:63|1), (UInt16(37)&127..=UInt16(34)&127:50|1), (UInt16(227)&127..UInt16(186)&127:114|1)], Float32(16.0), Float32(116.0))
public let var1295 : Interface946 = Class942()
let var1309 : Int32 = Int32(-102)
var var1365 : Float32 = Float32(93.0)
public var var1368 : String = ###"_lM_/?S/23"###
var var1439 : Range<UInt8> = (UInt8(28)&127..=UInt8(UInt8(109))&127:((-98)|1))
var var1658 : (UInt32, UInt32, Bool, Int32, Array<Range<UInt16>>, Float32, Float32) = (UInt32(UInt8(Int8(-25))), UInt32(UInt8(67)), false, Int32(Int16(UInt16(Int16(-46)))), [(UInt16(254)&127..=UInt16(105)&127:(-112)|1), (UInt16(145)&127..=UInt16(37)&127:42|1), (UInt16(170)&127..=UInt16(235)&127:(-127)|1), (UInt16(7)&127..UInt16(245)&127:7|1), (UInt16(229)&127..=UInt16(53)&127:62|1), (UInt16(153)&127..UInt16(0)&127:46|1), (UInt16(230)&127..UInt16(12)&127:(-108)|1), (UInt16(20)&127..=UInt16(233)&127:(-90)|1), (UInt16(158)&127..=UInt16(146)&127:(-77)|1), (UInt16(173)&127..UInt16(248)&127:106|1)], Float32(102.0), Float32(83.0))
let var1744 : (Range<UInt16>, Int8, Int64, Range<Int8>, Range<UInt32>) = ((UInt16(164)&127..=UInt16(8)&127:117|1), Int8(59), 89, (Int8(Int8(-68))&127..Int8(UInt8(126))&127:(Int64(UInt8(99))|1)), (UInt32(51)&127..UInt32(56)&127:(-112)|1))
var var1800 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
public var var1857 : Interface948 = Class942()
public var var1868 : (Unit, Array<Unit>, Range<Int64>, (UInt8, Range<Int16>, Range<Int16>, Int8, Unit, Range<Int32>, Range<Int32>, Range<UInt8>), Interface949) = ((), [(), (), (), (), (), (), (), (), (), ()], (100&127..(-62)&127:14|1), (UInt8(UInt8(Int8(-83))), (Int16(2)&127..=Int16(-73)&127:(Int64(Int8(-117))|1)), (Int16(UInt16(176))&127..=Int16(UInt8(160))&127:(5|1)), Int8(Int8(UInt8(117))), (), (Int32(-24)&127..=Int32(-108)&127:(Int64(UInt64(58))|1)), (Int32(46)&127..=Int32(46)&127:(-105)|1), (UInt8(161)&127..UInt8(Int8(115))&127:(Int64(Int32(-83))|1))), Class942())
let var1965 : Class942 = Class942()
var var1989 : Aggregate1985<Bool, Range<Int8>, Option<Unit>> = Aggregate1985<Bool, Range<Int8>, Option<Unit>>()
var var2038 : Range<Int8> = (Int8(64)&127..=Int8(-83)&127:(Int64(UInt32(UInt8(Int8(42))))|1))
var var2062 : Option<Interface949> = Option<Interface949>.None
public var var2065 : Interface949 = Class942()
var var2073 : UInt32 = UInt32(47)
public let var2080 : Interface947<Array<Range<UInt16>>, UInt8> = Class942()
let var2093 : ?Range<UInt16> = Option<Range<UInt16>>.None
var var2175 : UInt16 = UInt16(172)
var var2376 : ?Range<Int32> = (Option<Array<Option<Int32>>>.None as Range<Int32>)
public var var2403 : Float64 = 16.0
public var var2425 : Int8 = Int8(-89)
let var2487 : (Int32, Range<UInt16>, UInt16, Range<UInt8>, Int16, (UInt32, UInt32, Bool, Int32, Array<Range<UInt16>>, Float32, Float32), Array<Bool>) = (Int32(-77), (UInt16(197)&127..=UInt16(UInt8(128))&127:(Int64(UInt8(UInt8(210)))|1)), UInt16(12), (UInt8(31)&127..=UInt8(176)&127:45|1), Int16(-40), (UInt32(UInt8(UInt8(87))), UInt32(29), false, Int32(UInt16(87)), [(UInt16(248)&127..=UInt16(207)&127:((-85)|1)), (UInt16(211)&127..UInt16(3)&127:((-16)|1)), (UInt16(170)&127..UInt16(125)&127:(97|1)), (UInt16(100)&127..=UInt16(190)&127:((-5)|1)), (UInt16(59)&127..UInt16(59)&127:84|1), (UInt16(220)&127..UInt16(103)&127:(-38)|1), (UInt16(203)&127..UInt16(145)&127:(-73)|1), (UInt16(153)&127..UInt16(81)&127:97|1), (UInt16(165)&127..UInt16(25)&127:6|1), (UInt16(28)&127..UInt16(116)&127:29|1)], Float32(Float32(-27.0)), Float32(Float32(98.0))), [true, true, false, false, false, true, true, false, false, true])
let var2556 : Range<Int64> = (30&127..46&127:(-39)|1)
public var var2638 : (Range<Int64>, UInt64, Range<UInt64>, Unit, Option<Int64>, Int64, Range<UInt8>) = ((Int64(Int32(92))&127..98&127:(64|1)), UInt64(UInt8(172)), (UInt64(73)&127..UInt64(49)&127:(-57)|1), (), (Option<Unit>.None as Int64), 73, (UInt8(207)&127..=UInt8(173)&127:45|1))
public let var2731 : Range<Int32> = (Int32(34)&127..Int32(-95)&127:(-103)|1)
public var var2743 : Unit = ()
public let var2825 : Interface950 = Class942()
let var2870 : Option<UInt64> = Option<UInt64>.None
public let var2956 : (Range<UInt16>, Int16, Unit) = ((UInt16(83)&127..=UInt16(175)&127:(-4)|1), Int16(Int16(-106)), ())
let var3024 : String = ">${var1368}}${var1368}rH${var1368}iO\"TiI"
public let var3248 : ?Interface951 = Option<Interface951>.None
let var3260 : Array<Option<Unit>> = [((Int32(UInt16(82)), (UInt16(87)&127..=UInt16(33)&127:(-32)|1), UInt16(Int16(39)), (UInt8(56)&127..=UInt8(150)&127:63|1), Int16(-53), (UInt32(67), UInt32(44), true, Int32(115), [(UInt16(99)&127..UInt16(99)&127:((-67)|1)), (UInt16(239)&127..=UInt16(41)&127:(-40)|1), (UInt16(68)&127..=UInt16(39)&127:(-41)|1), (UInt16(201)&127..UInt16(120)&127:12|1), (UInt16(8)&127..=UInt16(235)&127:(-21)|1), (UInt16(25)&127..=UInt16(198)&127:52|1), (UInt16(120)&127..UInt16(108)&127:((-25)|1)), (UInt16(152)&127..UInt16(235)&127:(30|1)), (UInt16(230)&127..UInt16(187)&127:(2|1)), (UInt16(34)&127..=UInt16(156)&127:((-97)|1))], Float32(124.0), Float32(-65.0)), [false, true, true, true, true, true, false, true, true, false]) as Unit), Option<Unit>.None, (((), [(), (), (), (), (), (), (), (), (), ()], ((-59)&127..(-79)&127:(-80)|1), (UInt8(57), (Int16(-81)&127..=Int16(18)&127:((-40)|1)), (Int16(-19)&127..=Int16(67)&127:43|1), Int8(-90), (), (Int32(86)&127..=Int32(-109)&127:(71|1)), (Int32(-122)&127..=Int32(-78)&127:68|1), (UInt8(80)&127..UInt8(90)&127:((-100)|1))), Class942()) as Unit), Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, ((UInt32(UInt8(206)), UInt32(49), true, Int32(UInt32(228)), [(UInt16(42)&127..=UInt16(60)&127:(-19)|1), (UInt16(46)&127..=UInt16(174)&127:99|1), (UInt16(250)&127..UInt16(183)&127:(-39)|1), (UInt16(101)&127..UInt16(129)&127:56|1), (UInt16(148)&127..UInt16(99)&127:(-60)|1), (UInt16(87)&127..UInt16(2)&127:3|1), (UInt16(244)&127..UInt16(82)&127:70|1), (UInt16(7)&127..=UInt16(223)&127:(-60)|1), (UInt16(193)&127..UInt16(137)&127:(-127)|1), (UInt16(61)&127..UInt16(208)&127:(-50)|1)], Float32(Float32(126.0)), Float32(Float32(-30.0))) as Unit), (Option<Int32>.None as Unit), Option<Unit>.None, Option<Unit>.None]
var var3431 : Int32 = Int32(UInt8(5))
public let var3466 : ?Option<Interface949> = (Int16(Int8(UInt8(37))) as Option<Interface949>)
public let var3741 : ?Int32 = Option<Int32>.None
var var3897 : Interface951 = Class942()
public let var4000 : Option<Array<Unit>> = (UInt32(UInt16(UInt16(40))) as Array<Unit>)
public let var4013 : Unit = ()


public func func382(param383 : Int32) : Bool { // block id: 384
    true
}

func func488(namedParam489 ! : Float64, optionalParam490 ! : UInt8 = UInt8(UInt8(Int8(-99)))) : Int32 { // block id: 494
    Int32(17)
}


func func511(param512 : Range<UInt8>) : Int32 { // block id: 513
    var var515 : (UInt8, Range<Int16>, Range<Int16>, Int8, Unit, Range<Int32>, Range<Int32>, Range<UInt8>) = (UInt8(Int8(-51)), (Int16(50)&127..Int16(-57)&127:36|1), (Int16(115)&127..=Int16(25)&127:(-19)|1), Int8(UInt8(Int8(UInt8(189)))), (), (Int32(107)&127..=Int32(116)&127:30|1), (Int32(Int8(Int8(-108)))&127..Int32(Int16(106))&127:(Int64(UInt8(Int8(121)))|1)), (UInt8(203)&127..UInt8(70)&127:(-42)|1));
    var515;
    let var550 : Int32 = Int32(UInt8(100));
    if (try { // block id: 539
        var366;
        var49 / ((Int16(-4)) | 1);
        let var545 : Bool = true;
        var545
    } finally { // block id: 547
        var550 > Int32(-109)
    }) { // block id: 554
        Int32(var455)
    } else { // block id: 557
        var var560 : Bool = ((UInt64(39)&127..=UInt64(227)&127:(-109)|1) is (UInt16, Int8, Unit) -> Option<Int64>);
        var loopTimeVar566 : Int64 = 0;
        while ((var560) && loopTimeVar566 < 100 ) {
            loopTimeVar566++;
            var455
        };
        var var586 : Int8 = Int8(UInt8(Int8(-47)));
        try { // block id: 568
            ();
            ()
        } finally { // block id: 571
            var var574 : Int32 = Int32(Int32(94));
            var574 &= var574;
            ((UInt16(207)&127..=UInt16(246)&127:31|1), Int16(125), var582);
            var586 &= var586
        };
        (Option<Int32>.None ?? var550)
    }
}

public func func394<T0, T1>(param395 : Rune) : Int32 { // block id: 396
    var var408 : (Range<Int64>, UInt64, Range<UInt64>, Unit, Option<Int64>, Int64, Range<UInt8>) = ((Int64(UInt16(152))&127..(-41)&127:(Int64(Int8(-102))|1)), UInt64(UInt64(UInt64(Int8(116)))), (UInt64(UInt32(20))&127..UInt64(52)&127:(Int64(UInt16(231))|1)), (), (UInt8(100) as Int64), (-80), (UInt8(77)&127..UInt8(238)&127:(-105)|1));
    var var435 : Bool = ((11&127..=(-48)&127:(-27)|1) is UInt64);
    match (try { // block id: 399
            if (true) { Option<Int64>.Some(var148) } else { Option<Int64>.Some(101) } 
        } catch (e: Exception) { // block id: 406
            var408;
            Option<Int64>.None
        } finally { // block id: 432
            var435 ||= var435;
            if (var435) { ###"t\"%al&vs:W"### } else { "jc#I\"U}doX" } ;
            var282
        }) {
        case caseVar446 => 
            ();
            ()
        
        case _ : Range<Int32> => 
            var455 %= ((UInt8(34)) | 1)
        
        case caseVar461 => 
            UInt16(95) | var466;
            var472 |= var472;
            ()
        
        case _ => 
            ();
            var366;
            var435 &&= false
        
    };
    var var504 : Int32 = Int32(33);
    (func488(namedParam489 : (-48.0)) & (Option<Int32>.None ?? var504)) * ((var504 >> ((var504) & 7)) / ((((var455&127..UInt8(86)&127:(var148|1))|>func511)) | 1))
}



public interface Interface951 {

}

public interface Interface950 <: Interface951 {

}

public interface Interface949 <: Interface950 {
    static func func1938() : Range<UInt64> { // block id: 1939
        var var2598 : Range<UInt16> = (UInt16(UInt16(Int16(13)))&127..=UInt16(104)&127:((-2)|1));
        var var2606 : Range<UInt16> = (UInt16(Int16(Int16(99)))&127..UInt16(165)&127:(Int64(UInt32(223))|1));
        func1941((var1309, (UInt16(141)&127..UInt16(215)&127:(-1)|1), UInt16(203), (UInt8(48)&127..=UInt8(228)&127:21|1), Int16(64), (UInt32(45), var2073, var751, Int32(59), [(UInt16(202)&127..UInt16(69)&127:108|1), (UInt16(60)&127..var472&127:(var148|1)), var889, (UInt16(84)&127..var472&127:(var618|1)), (var472&127..=UInt16(96)&127:(var618|1)), (var466&127..=var2175&127:((-89)|1)), var2598, var2606, (UInt16(186)&127..UInt16(67)&127:7|1), (UInt16(176)&127..=UInt16(225)&127:4|1)], var1365, Float32(60.0)), [var751, true, var751, var751, false, var751, true, true, false, var751])[0], var455, func1063, func1291)
    }
;
    func func1860() : ((Range<UInt16>, Int16, Unit), Range<Int8>, Range<Int8>, UInt64) { // block id: 1861
        let var1926 : Interface945 = Class942();
        (UInt64(var2073)|>{ lambdaParameter1917 : UInt64 => (try { // block id: 2864
            var657 *= var657;
            ();
            var2870
        } catch (_) { // block id: 2872
            Option<Int64>.Some(var618);
            ();
            var2870
        } finally { // block id: 2877
            ();
            var2870
        } ?? UInt64(211))|>{ lambdaParameter1922 : UInt64 => var1926.func1929() } })[0];
        var618--;
        var var2902 : ?Option<Option<((Range<UInt16>, Int16, Unit), Range<Int8>, Range<Int8>, UInt64)>> = Option<Option<Option<((Range<UInt16>, Int16, Unit), Range<Int8>, Range<Int8>, UInt64)>>>.Some(((UInt8(221), (Int16(-90)&127..Int16(-43)&127:118|1), (Int16(-3)&127..=Int16(117)&127:20|1), Int8(-110), (), (Int32(38)&127..=Int32(38)&127:(104|1)), (Int32(81)&127..Int32(-71)&127:(-60)|1), (UInt8(195)&127..=UInt8(228)&127:101|1)) as Option<((Range<UInt16>, Int16, Unit), Range<Int8>, Range<Int8>, UInt64)>));
        (((var2902 ?? Option<Option<((Range<UInt16>, Int16, Unit), Range<Int8>, Range<Int8>, UInt64)>>.None) ?? Option<((Range<UInt16>, Int16, Unit), Range<Int8>, Range<Int8>, UInt64)>.None) ?? match {
            case try { // block id: 2921
            ();
            var366;
            var751
        } catch (e: Exception) { // block id: 2925
            Int32(-58) == Int32(-65)
        } finally { // block id: 2929
            var472 /= ((UInt16(238)) | 1);
            var751
        } => 
            (UInt64(226)&127..var142&127:((-78)|1));
            let var2940 : ((Range<UInt16>, Int16, Unit), Range<Int8>, Range<Int8>, UInt64) = (((UInt16(40)&127..=UInt16(109)&127:95|1), Int16(Int16(-81)), ()), (Int8(Int8(17))&127..Int8(67)&127:(95|1)), (Int8(-72)&127..Int8(33)&127:6|1), UInt64(2));
            var2940
            case match (var2956) {
            case caseVar2964 => 
                var366;
                var751
            
            case _ => 
                ();
                var751
            
        } => 
            var var2989 : Range<UInt16> = (UInt16(34)&127..=UInt16(149)&127:(-99)|1);
            if (true) { (var2956, (Int8(78)&127..=Int8(-56)&127:(var618|1)), (Int8(9)&127..var2425&127:(var148|1)), UInt64(170)) } else { ((var2989, Int16(51), var582), var2038, (Int8(92)&127..=Int8(120)&127:51|1), UInt64(3)) } 
            case _ => 
            (var2956, (var2425&127..=Int8(-52)&127:(107|1)), (Int8(68)&127..Int8(33)&127:94|1), UInt64(184))
        })
    }

}

public interface Interface948 <: Interface949 {

}

public interface Interface947<T0, T1> <: Interface948 {
    func func1314(namedParam1315 ! : Option<Int32>, namedParam1316 ! : (Range<UInt16>, Int16, Unit)) : Float32 { // block id: 1317
        let var1339 : (Range<Int8>) -> Unit = func1329;
        func func1320(param1321 : String, optionalParam1322 ! : Range<Int16> = (Int16(-37)&127..=Int16(19)&127:(39|1))) : Float32 { // block id: 1327
            let var1357 : Int8 = Int8(-117);
            try { // block id: 1342
                var751 &&= false;
                var657;
                let var1351 : Int8 = Int8(73);
                if (false) { (var1351&127..var1351&127:((-123)|1)) } else { (var1357&127..var1357&127:(57|1)) } 
            } catch (e: Exception) { // block id: 1361
                var582;
                (Int8(-21)&127..Int8(107)&127:(-27)|1)
            }|>var1339;
            var1365
        }
;
        Float32(func1320(var1368))
    }

}

public interface Interface946 <: Interface947<Array<Range<UInt16>>, UInt8> {

}

public interface Interface945 <: Interface946 & Interface949 {
    func func1929() : (Unit, Array<Unit>, Range<Int64>, (UInt8, Range<Int16>, Range<Int16>, Int8, Unit, Range<Int32>, Range<Int32>, Range<UInt8>), Interface949) { // block id: 1930
        var loopTimeVar1935 : Int64 = 0;
        while ((var751) && loopTimeVar1935 < 100 ) {
            loopTimeVar1935++;

        };
        match (func1938()) {
            case _ => 
                let var2660 : Int64 = (-116);
                if (true) { var2638 } else { (var2556, UInt64(83), (UInt64(235)&127..=UInt64(208)&127:27|1), (), var282, var2660, (UInt8(249)&127..=UInt8(202)&127:(-55)|1)) } ;
                var582;
                var582
            
        };
        let var2698 : (Range<UInt16>, Int16, Unit) = ((UInt16(173)&127..=UInt16(UInt8(Int8(55)))&127:((-87)|1)), Int16(-16), ());
        let var2721 : Array<Bool> = [true, false, false, false, true, true, false, false, false, false];
        var var2788 : (UInt8, Range<Int16>, Range<Int16>, Int8, Unit, Range<Int32>, Range<Int32>, Range<UInt8>) = (UInt8(UInt8(Int8(-108))), (Int16(15)&127..Int16(-54)&127:(91|1)), (Int16(UInt16(Int16(33)))&127..Int16(-40)&127:(55|1)), Int8(UInt8(216)), (), (Int32(Int16(102))&127..=Int32(UInt8(132))&127:(34|1)), (Int32(Int8(-92))&127..Int32(84)&127:((-103)|1)), (UInt8(67)&127..UInt8(Int8(UInt8(58)))&127:((-88)|1)));
        if (((Int8(14), var1309, var49, 58.0, var1368)[2] is (Range<UInt16>) -> Interface946)) { (var2638[3], [var582, var366, var366, var582, (), (), (), (), var582, ()], ((), ((-62)&127..=(-12)&127:(-6)|1), var1658, var2698)[1], match ((Int8(63)&127..=Int8(84)&127:((-40)|1))) {
            case caseVar2716 : Int64 => 
                if (var751) { var2721 } else { [true, false, true, false, true, true, true, true, false, false] } ;
                (var455, var127, (Int16(-56)&127..=Int16(60)&127:106|1), Int8(-38), (), var2731, var2731, (var455&127..=var455&127:(caseVar2716|1)))
            
            case _ : Interface949 => 
                Float32(93.0);
                var2743;
                var var2746 : (UInt8, Range<Int16>, Range<Int16>, Int8, Unit, Range<Int32>, Range<Int32>, Range<UInt8>) = (UInt8(UInt8(Int8(Int8(-59)))), (Int16(Int16(Int8(42)))&127..Int16(UInt8(UInt8(179)))&127:(4|1)), (Int16(-94)&127..=Int16(-87)&127:(Int64(Int32(UInt8(214)))|1)), Int8(88), (), (Int32(Int8(Int8(-17)))&127..=Int32(-107)&127:(Int64(UInt32(UInt32(195)))|1)), (Int32(Int8(46))&127..Int32(-59)&127:(Int64(UInt32(Int16(36)))|1)), (UInt8(232)&127..UInt8(137)&127:(-42)|1));
                var2746
            
            case _ => 
                ();
                var2788
            
        }, match (var2825) {
            case caseVar2829 => 
                var2175 **= (var466 & 3);
                ();
                var2065
            
            case _ => 
                var2065
            
            case _ : Array<UInt64> => 
                if (false) { Class942(func511, (UInt8(246)&127..=UInt8(64)&127:(-60)|1)) } else { var2065 } 
            
            case _ => 
                if (var751) { var2062 } else { var2062 } ;
                ();
                var2065
            
        }) } else { var1868 } 
    }
;
    static func func1938() : Range<UInt64> { // block id: 1939
        var var2598 : Range<UInt16> = (UInt16(UInt16(Int16(13)))&127..=UInt16(104)&127:((-2)|1));
        var var2606 : Range<UInt16> = (UInt16(Int16(Int16(99)))&127..UInt16(165)&127:(Int64(UInt32(223))|1));
        func1941((var1309, (UInt16(141)&127..UInt16(215)&127:(-1)|1), UInt16(203), (UInt8(48)&127..=UInt8(228)&127:21|1), Int16(64), (UInt32(45), var2073, var751, Int32(59), [(UInt16(202)&127..UInt16(69)&127:108|1), (UInt16(60)&127..var472&127:(var148|1)), var889, (UInt16(84)&127..var472&127:(var618|1)), (var472&127..=UInt16(96)&127:(var618|1)), (var466&127..=var2175&127:((-89)|1)), var2598, var2606, (UInt16(186)&127..UInt16(67)&127:7|1), (UInt16(176)&127..=UInt16(225)&127:4|1)], var1365, Float32(60.0)), [var751, true, var751, var751, false, var751, true, true, false, var751])[0], var455, func1063, func1291)
    }
;
    func func1860() : ((Range<UInt16>, Int16, Unit), Range<Int8>, Range<Int8>, UInt64) { // block id: 1861
        let var1926 : Interface945 = Class942();
        (UInt64(var2073)|>{ lambdaParameter1917 : UInt64 => (try { // block id: 2864
            var657 *= var657;
            ();
            var2870
        } catch (_) { // block id: 2872
            Option<Int64>.Some(var618);
            ();
            var2870
        } finally { // block id: 2877
            ();
            var2870
        } ?? UInt64(211))|>{ lambdaParameter1922 : UInt64 => var1926.func1929() } })[0];
        var618--;
        var var2902 : ?Option<Option<((Range<UInt16>, Int16, Unit), Range<Int8>, Range<Int8>, UInt64)>> = Option<Option<Option<((Range<UInt16>, Int16, Unit), Range<Int8>, Range<Int8>, UInt64)>>>.Some(((UInt8(221), (Int16(-90)&127..Int16(-43)&127:118|1), (Int16(-3)&127..=Int16(117)&127:20|1), Int8(-110), (), (Int32(38)&127..=Int32(38)&127:(104|1)), (Int32(81)&127..Int32(-71)&127:(-60)|1), (UInt8(195)&127..=UInt8(228)&127:101|1)) as Option<((Range<UInt16>, Int16, Unit), Range<Int8>, Range<Int8>, UInt64)>));
        (((var2902 ?? Option<Option<((Range<UInt16>, Int16, Unit), Range<Int8>, Range<Int8>, UInt64)>>.None) ?? Option<((Range<UInt16>, Int16, Unit), Range<Int8>, Range<Int8>, UInt64)>.None) ?? match {
            case try { // block id: 2921
            ();
            var366;
            var751
        } catch (e: Exception) { // block id: 2925
            Int32(-58) == Int32(-65)
        } finally { // block id: 2929
            var472 /= ((UInt16(238)) | 1);
            var751
        } => 
            (UInt64(226)&127..var142&127:((-78)|1));
            let var2940 : ((Range<UInt16>, Int16, Unit), Range<Int8>, Range<Int8>, UInt64) = (((UInt16(40)&127..=UInt16(109)&127:95|1), Int16(Int16(-81)), ()), (Int8(Int8(17))&127..Int8(67)&127:(95|1)), (Int8(-72)&127..Int8(33)&127:6|1), UInt64(2));
            var2940
            case match (var2956) {
            case caseVar2964 => 
                var366;
                var751
            
            case _ => 
                ();
                var751
            
        } => 
            var var2989 : Range<UInt16> = (UInt16(34)&127..=UInt16(149)&127:(-99)|1);
            if (true) { (var2956, (Int8(78)&127..=Int8(-56)&127:(var618|1)), (Int8(9)&127..var2425&127:(var148|1)), UInt64(170)) } else { ((var2989, Int16(51), var582), var2038, (Int8(92)&127..=Int8(120)&127:51|1), UInt64(3)) } 
            case _ => 
            (var2956, (var2425&127..=Int8(-52)&127:(107|1)), (Int8(68)&127..Int8(33)&127:94|1), UInt64(184))
        })
    }

}

public open class Class942 <: Interface945 & Resource {
    public init() { // block id: 944

    }
;
    public static var var954 : Unit = ();
    private static var var1435 : Interface947<Array<Range<UInt16>>, UInt8> = Class942();
    public init(param1413 : (Range<UInt8>) -> Int32, param1416 : Range<UInt8>) { // block id: 1417
        var loopTimeVar1433 : Int64 = 0;
        do {
            loopTimeVar1433++;

        } while ((((Option<Range<Int32>>.Some((var1309&127..=var1309&127:(var148|1))) ?? (Int32(53)&127..=Int32(-44)&127:48|1)) is (Range<Int64>, UInt64, Range<UInt64>, Unit, Option<Int64>, Int64, Range<UInt8>))) && loopTimeVar1433 < 100 ) ;
        var1435
    }
;
    static let var1513 : (Unit, Array<Unit>, Range<Int64>, (UInt8, Range<Int16>, Range<Int16>, Int8, Unit, Range<Int32>, Range<Int32>, Range<UInt8>), Interface949) = ((), [(), (), (), (), (), (), (), (), (), ()], ((-53)&127..(-22)&127:(106|1)), (UInt8(201), (Int16(62)&127..=Int16(68)&127:(104|1)), (Int16(-8)&127..Int16(-64)&127:(-94)|1), Int8(-29), (), (Int32(-33)&127..Int32(-111)&127:((-35)|1)), (Int32(31)&127..=Int32(83)&127:((-112)|1)), (UInt8(16)&127..UInt8(223)&127:107|1)), Class942());
    public init(param1287 : Option<Range<UInt16>>) { // block id: 1288
        match (((UInt16(179)&127..UInt16(25)&127:(-96)|1)|>func1291)) {
            case caseVar1301 => 
                var582;
                Int32(24)
            
            case _ => 
                [(UInt16(182)&127..=UInt16(233)&127:(-54)|1), (UInt16(168)&127..UInt16(113)&127:60|1), (UInt16(84)&127..=UInt16(216)&127:103|1), (UInt16(246)&127..=UInt16(215)&127:25|1), (UInt16(100)&127..=UInt16(229)&127:(-111)|1), (UInt16(111)&127..=UInt16(119)&127:31|1), (UInt16(107)&127..=UInt16(20)&127:64|1), (UInt16(39)&127..UInt16(188)&127:(-122)|1), (UInt16(143)&127..UInt16(156)&127:19|1), (UInt16(107)&127..UInt16(121)&127:(-32)|1)];
                var1309
            
        };
        let var1371 : ?Int32 = Option<Int32>.Some(Int32(Int32(-53)));
        var var1447 : Int16 = Int16(Int8(17));
        if (match (func1314(namedParam1315 : var1371, namedParam1316 : ((UInt16(92)&127..=var472&127:((-46)|1)), Int16(-9), ()))) {
            case caseVar1384 => 
                var582;
                false
            
            case caseVar1390 : Range<Int64> => 
                var var1394 : Bool = ((Int16(4)&127..Int16(Int16(UInt16(74)))&127:(Int64(UInt64(Int8(-66)))|1)) is (UInt8, Range<Int16>, Range<Int16>, Int8, Unit, Range<Int32>, Range<Int32>, Range<UInt8>));
                var1394 &&= var1394;
                var582;
                Int32(-99) == Int32(69)
            
            case _ => 
                Class942(func511, var1439);
                var1447 **= (var1447 & 3);
                var751
            
        }) { (Int16(-60)&127..=Int16(-74)&127:(-104)|1) } else { (Int16(117)&127..=Int16(-98)&127:(-40)|1) } ;
        var var1490 : Interface949 = Class942(func511, (UInt8(94)&127..=UInt8(125)&127:65|1));
        match (Float32(-51.0)) {
            case _ => 
                var var1465 : (UInt8, Range<Int16>, Range<Int16>, Int8, Unit, Range<Int32>, Range<Int32>, Range<UInt8>) = (UInt8(251), (Int16(13)&127..=Int16(-61)&127:(-111)|1), (Int16(43)&127..Int16(48)&127:(-93)|1), Int8(UInt8(Int8(UInt8(203)))), (), (Int32(-69)&127..=Int32(37)&127:(-20)|1), (Int32(Int8(UInt8(79)))&127..=Int32(-69)&127:(Int64(UInt32(UInt16(74)))|1)), (UInt8(101)&127..=UInt8(Int8(3))&127:(83|1)));
                let var1497 : Array<Unit> = Array<Unit>(10){ i => () };
                if (var751) { (var366, [(), (), (), (), (), (), (), (), (), ()], (86&127..58&127:(-95)|1), var1465, var1490) } else { (var366, var1497, ((-57)&127..=(-114)&127:(-19)|1), var1465, var1490) } ;
                var1513
            
        }
    }
;
    let var1968 : Int32 = Int32(30);
    public init(optionalParam3403 ! : UInt64 = UInt64(Int16(UInt8(44))), optionalParam3407 ! : (UInt64) -> (Unit, Array<Unit>, Range<Int64>, (UInt8, Range<Int16>, Range<Int16>, Int8, Unit, Range<Int32>, Range<Int32>, Range<UInt8>), Interface949) = func1864, namedParam3411 ! : Option<Range<Int32>>) { // block id: 3412
        try (resource = Class942()) { // block id: 3414
            (Option<Unit>.None ?? ())
        } finally { // block id: 3418

        };
        var loopTimeVar3442 : Int64 = 0;
        while ((var751) && loopTimeVar3442 < 100 ) {
            loopTimeVar3442++;
            try (resource = Class942()) { // block id: 3423

            } catch (e: Exception) { // block id: 3424
                ();
                var472 <= UInt16(240);
                var3431 &= var1309
            } finally { // block id: 3435
                var954
            };
            var var3439 : Rune = 'j';
            (var3439 as Array<Option<Int32>>)
        }
    }

    public func isClosed(): Bool { return false }
    public func close(): Unit {}
}

public func func854(param855 : (Rune) -> Int32) : Unit { // block id: 858
    var var870 : UInt16 = UInt16(UInt16(16));
    (Option<Range<UInt16>>.Some([(var870&127..=UInt16(13)&127:(var148|1)), (UInt16(253)&127..=UInt16(108)&127:8|1), (UInt16(128)&127..=var466&127:(var148|1)), (var472&127..var870&127:(var148|1)), (UInt16(88)&127..=UInt16(172)&127:((-105)|1)), var889, (UInt16(183)&127..=UInt16(53)&127:((-22)|1)), var889, (UInt16(189)&127..=var870&127:(var148|1)), (UInt16(210)&127..var472&127:((-58)|1))][4]) ?? [(UInt16(220)&127..=UInt16(215)&127:(-37)|1), (UInt16(191)&127..UInt16(191)&127:(-46)|1), (UInt16(58)&127..=UInt16(153)&127:(-69)|1), (UInt16(165)&127..UInt16(1)&127:(-15)|1), (UInt16(193)&127..UInt16(216)&127:(-43)|1), (UInt16(195)&127..=UInt16(157)&127:77|1), (UInt16(175)&127..UInt16(189)&127:(-78)|1), (UInt16(129)&127..=UInt16(240)&127:95|1), (UInt16(125)&127..UInt16(55)&127:15|1), (UInt16(199)&127..UInt16(174)&127:56|1)][1]);
    let var924 : ?Unit = (Option<Bool>.Some((true is (Float64, UInt8) -> Int32)) as Unit);
    ([var924, Option<Unit>.None, var931, Option<Unit>.None, var924, Option<Unit>.None, Option<Unit>.None, var931, var931, var924][4] ?? Class942.var954)
}

func func957(param958 : Bool) : Unit { // block id: 959
    var loopTimeVar999 : Int64 = 0;
    do {
        loopTimeVar999++;
        [(), (), (), (), (), (), (), (), (), ()][5]
    } while (((var964[4] ?? var984[2])) && loopTimeVar999 < 100 ) 
}


public func func1063(optionalParam1064 ! : (UInt32, UInt32, Bool, Int32, Array<Range<UInt16>>, Float32, Float32) = (UInt32(81), UInt32(Int16(Int16(Int8(-77)))), ((UInt8(248)&127..UInt8(Int8(-26))&127:(30|1)) is UInt16), Int32(UInt8(35)), [(UInt16(133)&127..UInt16(132)&127:(-28)|1), (UInt16(18)&127..=UInt16(Int16(112))&127:(Int64(UInt16(126))|1)), (UInt16(15)&127..=UInt16(178)&127:(-13)|1), (UInt16(154)&127..UInt16(235)&127:(Int64(UInt16(167))|1)), (UInt16(163)&127..=UInt16(127)&127:12|1), (UInt16(Int8(90))&127..UInt16(Int8(-89))&127:(Int64(UInt16(164))|1)), (UInt16(154)&127..UInt16(251)&127:(-6)|1), (UInt16(Int8(-83))&127..=UInt16(Int16(56))&127:(25|1)), (UInt16(251)&127..UInt16(109)&127:(-10)|1), (UInt16(134)&127..=UInt16(32)&127:((-25)|1))], Float32(Float32(12.0)), Float32(52.0))) : Interface949 { // block id: 1116
    var var1152 : (UInt8, Range<Int16>, Range<Int16>, Int8, Unit, Range<Int32>, Range<Int32>, Range<UInt8>) = (UInt8(UInt8(33)), (Int16(-89)&127..Int16(-118)&127:(-120)|1), (Int16(-38)&127..=Int16(Int16(114))&127:(94|1)), Int8(UInt8(UInt8(UInt8(8)))), (), (Int32(-97)&127..=Int32(101)&127:22|1), (Int32(62)&127..Int32(58)&127:(-28)|1), (UInt8(6)&127..=UInt8(239)&127:(Int64(UInt64(41))|1)));
    match ((Option<Option<Int32>>.Some(Option<Int32>.None) ?? Option<Int32>.None)) {
        case caseVar1130 : Interface950 => 
            let var1135 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
            let var1175 : Interface949 = Class942();
            (var582, var1135, (113&127..var148&127:((-58)|1)), var1152, var1175)
        
        case _ => 
            let var1201 : (Unit, Array<Unit>, Range<Int64>, (UInt8, Range<Int16>, Range<Int16>, Int8, Unit, Range<Int32>, Range<Int32>, Range<UInt8>), Interface949) = ((), [(), (), (), (), (), (), (), (), (), ()], (30&127..=(-101)&127:(Int64(Int8(-124))|1)), (UInt8(125), (Int16(28)&127..Int16(-36)&127:102|1), (Int16(-7)&127..=Int16(-112)&127:(-42)|1), Int8(19), (), (Int32(4)&127..Int32(79)&127:(-56)|1), (Int32(-43)&127..Int32(-84)&127:(-4)|1), (UInt8(68)&127..=UInt8(13)&127:(-118)|1)), Class942());
            if (var751) { ((), [var366, (), (), var582, (), var366, (), (), var582, var366], (var148&127..var618&127:(58|1)), var1152, Class942()) } else { var1201 } 
        
    }[4]
}

func func1291(param1292 : Range<UInt16>) : Interface946 { // block id: 1293
    var1295
}

func func1329(param1330 : Range<Int8>) : Unit { // block id: 1331
    let var1334 : (Rune) -> Int32 = func394<Option<UInt64>, Option<Int64>>;
    func854(var1334);
    var366;
    var366
}


public func func1001(param1002 : (Rune) -> Int32) : Bool { // block id: 1005
    let var1012 : (Range<UInt16>, Int16, Unit) = ((UInt16(59)&127..UInt16(171)&127:18|1), Int16(7), ());
    var var1021 : (Int32) -> Bool = { lambdaParameter1024 : Int32 => false };
    if (try { // block id: 1008
        false
    } finally { // block id: 1010
        var1012;
        false
    }) { // block id: 1018

    } else if ((Int32(UInt32(191))|>var1021)) { // block id: 1029
        (Option<Unit>.Some(()) ?? ());
        var var1037 : ?Range<UInt16> = Option<Range<UInt16>>.None;
        try (resource = Class942()) { // block id: 1035
            var1037;
            ();
            var var1041 : Unit = ();
            var1041
        } finally { // block id: 1043
            if (var751) { Class942() } else { Class942() } ;
            ()
        };
        var loopTimeVar1053 : Range<UInt64> = (UInt64(Int16(-16))&127..UInt64(212)&127:(Int64(Int32(Int32(UInt32(214))))|1));
        for (i in loopTimeVar1053 where var751) {
            var366
        }
    };
    func1063();
    let var1242 : ?Int32 = Option<Int32>.Some(Int32(-125));
    func func1234(param1235 : Range<Int8>, param1236 : UInt8) : (UInt32, UInt32, Bool, Int32, Array<Range<UInt16>>, Float32, Float32) { // block id: 1237
        var var1552 : Array<Range<UInt16>> = [(UInt16(19)&127..UInt16(Int8(115))&127:(102|1)), (UInt16(Int8(Int8(-22)))&127..=UInt16(26)&127:((-126)|1)), (UInt16(24)&127..=UInt16(117)&127:(Int64(UInt16(UInt16(181)))|1)), (UInt16(Int16(-59))&127..=UInt16(237)&127:(Int64(Int16(20))|1)), (UInt16(218)&127..UInt16(234)&127:(78|1)), (UInt16(UInt8(232))&127..UInt16(Int16(52))&127:((-17)|1)), (UInt16(Int16(-104))&127..UInt16(30)&127:(59|1)), (UInt16(249)&127..=UInt16(Int8(82))&127:(Int64(UInt32(UInt16(46)))|1)), (UInt16(174)&127..UInt16(16)&127:45|1), (UInt16(Int8(-27))&127..UInt16(UInt16(UInt8(187)))&127:(Int64(Int16(UInt16(112)))|1))];
        var loopTimeVar1639 : Int64 = 0;
        while ((match (match (var1242) {
                case _ => 
                    var366;
                    var366;
                    [(UInt16(19)&127..UInt16(125)&127:(-96)|1), (UInt16(199)&127..UInt16(221)&127:(53|1)), (UInt16(201)&127..=var472&127:(var148|1)), (var466&127..UInt16(247)&127:(var148|1)), var889, (UInt16(214)&127..=UInt16(104)&127:(-34)|1), (var472&127..var466&127:(var618|1)), var889, var889, var889]
                
                case _ => 
                    let var1281 : Int16 = Int16(Int8(-71));
                    ((var466&127..=UInt16(16)&127:(var148|1)), var1281, var582);
                    Class942(Option<Range<UInt16>>.None);
                    var1552
                
            }) {
            case caseVar1611 : Range<Int64> => 
                Int16(-51);
                !true
            
            case _ => 
                Int32(-22) & Int32(-15);
                var49 % ((Int16(48)) | 1);
                var751
            
            case _ : Int16 => 
                false
            
            case _ => 
                var582;
                (UInt8(173)&127..UInt8(237)&127:112|1);
                false
            
        }) && loopTimeVar1639 < 100 ) {
            loopTimeVar1639++;
            func1291(var889)
        };
        var var1714 : UInt32 = UInt32(Int8(91));
        match (try { // block id: 1642
                if (var751) { var713 } else { var713 } ;
                var713;
                (-81.0)
            } finally { // block id: 1649
                var142 |= var142;
                (-13.0)
            }) {
            case _ => 
                var1658
            
            case 30.0 => 
                if (var751) { [(), (), (), (), (), (), (), (), (), ()] } else { [var366, (), var582, (), var366, (), (), (), (), ()] } ;
                100.0;
                let var1696 : Int32 = Int32(Int16(17));
                (UInt32(108), UInt32(75), var751, var1696, [(UInt16(107)&127..=UInt16(99)&127:117|1), (UInt16(110)&127..=UInt16(37)&127:(-82)|1), (UInt16(45)&127..=UInt16(152)&127:23|1), (UInt16(22)&127..UInt16(221)&127:(-55)|1), (UInt16(5)&127..UInt16(1)&127:(-42)|1), (UInt16(3)&127..UInt16(178)&127:(-57)|1), (UInt16(83)&127..=UInt16(167)&127:93|1), (UInt16(182)&127..UInt16(212)&127:1|1), (UInt16(2)&127..UInt16(105)&127:(-37)|1), (UInt16(64)&127..UInt16(143)&127:(-43)|1)], var1365, Float32(-68.0))
            
            case caseVar1704 => 
                var1365 += var1365;
                UInt64(142) * UInt64(137);
                (var1714, UInt32(98), false, Int32(113), var1552, var1365, var1365)
            
            case _ => 
                let var1726 : (UInt32, UInt32, Bool, Int32, Array<Range<UInt16>>, Float32, Float32) = (UInt32(UInt32(82)), UInt32(UInt16(UInt8(101))), true, Int32(-114), [(UInt16(113)&127..UInt16(113)&127:(-58)|1), (UInt16(205)&127..UInt16(129)&127:9|1), (UInt16(102)&127..UInt16(232)&127:3|1), (UInt16(222)&127..UInt16(182)&127:97|1), (UInt16(132)&127..UInt16(238)&127:35|1), (UInt16(239)&127..UInt16(23)&127:(-90)|1), (UInt16(179)&127..UInt16(239)&127:(-119)|1), (UInt16(46)&127..UInt16(112)&127:104|1), (UInt16(144)&127..UInt16(157)&127:(-13)|1), (UInt16(242)&127..UInt16(149)&127:91|1)], Float32(19.0), Float32(Float32(Float32(Float32(-126.0)))));
                var1726
            
        }
    }
;
    let var1760 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    func1234(var1744[3], match (var1760) {
        case _ : (UInt8, Range<Int16>, Range<Int16>, Int8, Unit, Range<Int32>, Range<Int32>, Range<UInt8>) => 
            var964;
            var657 %= Float64((Int32(var657)) | 1);
            var455 - UInt8(126)
        
        case _ => 
            var142 * UInt64(110);
            UInt8(107) << ((UInt8(183)) & 7)
        
    })[2]
}

public func func1846(param395 : Rune) : Int32 { // block id: 396
    var var408 : (Range<Int64>, UInt64, Range<UInt64>, Unit, Option<Int64>, Int64, Range<UInt8>) = ((Int64(UInt16(152))&127..(-41)&127:(Int64(Int8(-102))|1)), UInt64(UInt64(UInt64(Int8(116)))), (UInt64(UInt32(20))&127..UInt64(52)&127:(Int64(UInt16(231))|1)), (), (UInt8(100) as Int64), (-80), (UInt8(77)&127..UInt8(238)&127:(-105)|1));
    var var435 : Bool = ((11&127..=(-48)&127:(-27)|1) is UInt64);
    match (try { // block id: 399
            if (true) { Option<Int64>.Some(var148) } else { Option<Int64>.Some(101) } 
        } catch (e: Exception) { // block id: 406
            var408;
            Option<Int64>.None
        } finally { // block id: 432
            var435 ||= var435;
            if (var435) { ###"t\"%al&vs:W"### } else { "jc#I\"U}doX" } ;
            var282
        }) {
        case caseVar446 => 
            ();
            ()
        
        case _ : Range<Int32> => 
            var455 %= ((UInt8(34)) | 1)
        
        case caseVar461 => 
            UInt16(95) | var466;
            var472 |= var472;
            ()
        
        case _ => 
            ();
            var366;
            var435 &&= false
        
    };
    var var504 : Int32 = Int32(33);
    (func488(namedParam489 : (-48.0)) & (Option<Int32>.None ?? var504)) * ((var504 >> ((var504) & 7)) / ((((var455&127..UInt8(86)&127:(var148|1))|>func511)) | 1))
}

public func func1864(param1865 : UInt64) : (Unit, Array<Unit>, Range<Int64>, (UInt8, Range<Int16>, Range<Int16>, Int8, Unit, Range<Int32>, Range<Int32>, Range<UInt8>), Interface949) { // block id: 1866
    var1868
}

public struct Aggregate1985<T0, T1, T2> {
    public init() { // block id: 1987

    }
;
    let var1992 : Unit = ()
}


func func2049(param2050 : (Range<UInt8>) -> Int32) : Option<Range<Int32>> { // block id: 2053
    let var2102 : ?Range<Int32> = ([Option<Int64>.Some(Int64(UInt8(123))), (Option<Range<Int32>>.Some((Int32(114)&127..=Int32(24)&127:(-55)|1)) as Int64), ((Class942() as Unit) as Int64), Option<Int64>.None, (Int8(Int8(-60)) as Int64), (Int8(UInt8(104)) as Int64), (Class942() as Int64), Option<Int64>.Some(Int64(Int32(117))), Option<Int64>.Some(109), (((UInt16(93)&127..=UInt16(144)&127:45|1), Int8(-64), 107, (Int8(-116)&127..=Int8(-47)&127:72|1), (UInt32(130)&127..UInt32(204)&127:(-111)|1)) as Int64)] as Range<Int32>);
    var var2143 : Range<Int64> = ((-66)&127..=(-104)&127:(Int64(UInt8(UInt8(Int8(-120))))|1));
    let var2178 : UInt16 = UInt16(124);
    match (match ((var2062 ?? var2065)) {
            case caseVar2069 => 
                var2073 |= var2073;
                var49 / ((Int16(96)) | 1);
                var2080
            
            case _ => 
                if (var751) { (UInt8(179)&127..=UInt8(221)&127:69|1) } else { (var455&127..UInt8(249)&127:((-101)|1)) } ;
                Class942(var2093)
            
        }) {
        case caseVar2097 => 
            var713;
            ();
            var2102
        
        case caseVar2137 => 
            ();
            var var2154 : Int64 = (-35);
            if (true) { var2143 } else { (var148&127..=var2154&127:(var2154|1)) } ;
            var2102
        
        case _ => 
            var var2185 : Int64 = Int64(UInt32(Int32(-77)));
            [var889, (UInt16(225)&127..=UInt16(183)&127:63|1), (UInt16(36)&127..=UInt16(30)&127:(52|1)), var889, (UInt16(70)&127..UInt16(122)&127:44|1), var889, var889, var889, (var2175&127..=var2178&127:(var148|1)), (UInt16(20)&127..=var466&127:(var2185|1))];
            -var1365;
            var2102
        
        case _ => 
            Int8(94);
            ();
            if (var751) { Option<Range<Int32>>.Some((var1309&127..Int32(103)&127:(var618|1))) } else { Option<Range<Int32>>.Some((Int32(-92)&127..=Int32(27)&127:119|1)) } 
        
        case _ => 
            Class942(param2050, (UInt8(62)&127..UInt8(15)&127:(-1)|1));
            if (var751) { Option<Range<Int32>>.None } else { var2102 } 
        
    }
}

public func func2218(param512 : Range<UInt8>) : Int32 { // block id: 513
    var var515 : (UInt8, Range<Int16>, Range<Int16>, Int8, Unit, Range<Int32>, Range<Int32>, Range<UInt8>) = (UInt8(Int8(-51)), (Int16(50)&127..Int16(-57)&127:36|1), (Int16(115)&127..=Int16(25)&127:(-19)|1), Int8(UInt8(Int8(UInt8(189)))), (), (Int32(107)&127..=Int32(116)&127:30|1), (Int32(Int8(Int8(-108)))&127..Int32(Int16(106))&127:(Int64(UInt8(Int8(121)))|1)), (UInt8(203)&127..UInt8(70)&127:(-42)|1));
    var515;
    let var550 : Int32 = Int32(UInt8(100));
    if (try { // block id: 539
        var366;
        var49 / ((Int16(-4)) | 1);
        let var545 : Bool = true;
        var545
    } finally { // block id: 547
        var550 > Int32(-109)
    }) { // block id: 554
        Int32(var455)
    } else { // block id: 557
        var var560 : Bool = ((UInt64(39)&127..=UInt64(227)&127:(-109)|1) is (UInt16, Int8, Unit) -> Option<Int64>);
        var loopTimeVar566 : Int64 = 0;
        while ((var560) && loopTimeVar566 < 100 ) {
            loopTimeVar566++;
            var455
        };
        var var586 : Int8 = Int8(UInt8(Int8(-47)));
        try { // block id: 568
            ();
            ()
        } finally { // block id: 571
            var var574 : Int32 = Int32(Int32(94));
            var574 &= var574;
            ((UInt16(207)&127..=UInt16(246)&127:31|1), Int16(125), var582);
            var586 &= var586
        };
        (Option<Int32>.None ?? var550)
    }
}




public func func1291(param2021 : Range<Int64>) : Range<UInt64> { // block id: 2022
    try { // block id: 2024
        var1744
    } finally { // block id: 2026
        if (false) { var1744 } else { ((UInt16(79)&127..=UInt16(88)&127:(41|1)), Int8(-114), var618, var2038, (UInt32(24)&127..UInt32(218)&127:(-103)|1)) } 
    };
    let var2216 : ((Range<UInt8>) -> Int32) -> Option<Range<Int32>> = func2049;
    let var2271 : Array<Option<Int32>> = [((UInt64(26)&127..=UInt64(103)&127:40|1) as Int32), (Class942() as Int32), Option<Int32>.Some(Int32(UInt16(23))), Option<Int32>.None, ((Int8(-100)&127..Int8(-9)&127:69|1) as Int32), (Aggregate1985<Bool, Range<Int8>, Option<Unit>>() as Int32), ([(UInt16(113)&127..=UInt16(7)&127:93|1), (UInt16(183)&127..UInt16(90)&127:11|1), (UInt16(39)&127..=UInt16(9)&127:122|1), (UInt16(82)&127..UInt16(69)&127:(-95)|1), (UInt16(58)&127..UInt16(20)&127:(-25)|1), (UInt16(35)&127..UInt16(76)&127:(-75)|1), (UInt16(77)&127..=UInt16(61)&127:78|1), (UInt16(79)&127..UInt16(212)&127:(-55)|1), (UInt16(227)&127..UInt16(109)&127:(-67)|1), (UInt16(229)&127..=UInt16(54)&127:123|1)] as Int32), Option<Int32>.None, (Class942() as Int32), Option<Int32>.Some(Int32(-77))];
    func func2242(param2243 : Class942, namedParam2244 ! : (Range<Int64>, UInt64, Range<UInt64>, Unit, Option<Int64>, Int64, Range<UInt8>)) : Option<Int32> { // block id: 2245
        var var2304 : ?Int32 = Option<Int32>.None;
        if (if (var751) { // block id: 2251
            var366;
            var1989;
            UInt32(130) != var2073
        } else if (false) { // block id: 2258
            var148 <<= ((7) & 7);
            var142 *= var142;
            false
        } else { // block id: 2266
            ();
            var2093;
            false
        }) { var2271 } else { (Option<Array<Option<Int32>>>.Some(var2271) ?? [Option<Int32>.Some(Int32(111)), Option<Int32>.None, var2304, var2304, var2304, Option<Int32>.Some(Int32(-79)), Option<Int32>.None, Option<Int32>.None, var2304, var2304]) } [3]
    }
;
    let var2366 : ?Int64 = (Int16(-47) as Int64);
    match (({ lambdaParameter2222 : Range<UInt8> => let var2233 : ??Int32 = Option<Option<Int32>>.None; let var2238 : Int32 = Int32(UInt16(1)); (((Option<Option<Option<Int32>>>.Some(var2233) ?? Option<Option<Int32>>.Some(Option<Int32>.Some(var2238))) ?? func2242(var1965, namedParam2244 : (((-69)&127..=(-28)&127:85|1), var142, (UInt64(192)&127..=UInt64(151)&127:(-23)|1), var582, var282, var618, (UInt8(4)&127..UInt8(225)&127:(-63)|1)))) ?? if ([false, true, false, false, true, true, false, true, false, false][5]) { // block id: 2328
            ();
            var366;
            var1309 ^ var1309
        } else if (if (var751) { // block id: 2336
            let var2349 : Int64 = Int64(UInt64(Int16(Int8(Int8(26)))));
            [var282, Option<Int64>.Some(var618), var282, var282, var282, Option<Int64>.None, Option<Int64>.Some(var618), Option<Int64>.Some(var2349), var282, Option<Int64>.None];
            !true
        } else { // block id: 2359
            true
        }) { // block id: 2361
            if (false) { var282 } else { var2366 } ;
            Int32(-44) + var1309
        } else { // block id: 2372
            if (var751) { var2376 } else { Option<Range<Int32>>.Some((Int32(-81)&127..=Int32(-14)&127:(-84)|1)) } ;
            var2238
        }) }|>var2216)) {
        case _ : Option<Interface949> => 
            var2175 -= var466
        
        case caseVar2390 => 
            var142 %= ((var142) | 1);
            var657 *= (-124.0)
        
        case caseVar2400 => 
            var2403;
            var657 -= var2403
        
        case caseVar2410 : Range<Int64> => 
            var657 -= var657;
            ()
        
        case _ => 
            var366;
            var582
        
    };
    var var2428 : Int64 = Int64(Int8(Int8(-104)));
    let var2480 : Array<UInt64> = [UInt64(8), UInt64(0), UInt64(234), UInt64(57), UInt64(190), UInt64(226), UInt64(51), UInt64(172), UInt64(175), UInt64(172)];
    (match (((UInt16(231)&127..UInt16(66)&127:67|1), var2425, var2428, (Int8(-61)&127..Int8(-96)&127:(-82)|1), (UInt32(150)&127..UInt32(187)&127:(var2428|1)))) {
        case (_,_,_ : Range<UInt8>,caseVar2439,caseVar2440) => 
            UInt64(156)
        
        case caseVar2445 : Range<UInt32> => 
            var142
        
        case (_ : Option<Range<UInt16>>,caseVar2450 : UInt64,caseVar2451 : (Range<UInt16>, Int8, Int64, Range<Int8>, Range<UInt32>),_ : Class942,caseVar2452 : Range<UInt32>) => 
            UInt64(57) * UInt64(64)
        
        case _ => 
            (UInt16(227)&127..UInt16(242)&127:44|1);
            var2366;
            var142 % ((UInt64(181)) | 1)
        
        case _ => 
            ();
            var366;
            var142
        
    }&127..=(Option<Array<UInt64>>.Some([UInt64(221), UInt64(192), UInt64(105), UInt64(103), UInt64(4), UInt64(22), UInt64(193), UInt64(4), UInt64(84), UInt64(199)]) ?? var2480)[3]&127:(match (var2487[2]) {
        case _ => 
            ();
            2
        
        case _ => 
            var889;
            38 ** ((-2) & 3)
        
        case _ => 
            (Int16(8)&127..=Int16(-30)&127:93|1);
            var148 | var2428
        
    }|1))
}

public func func1972(param1973 : (Bool) -> Unit) : Range<UInt64> { // block id: 1976
    var var1998 : ?Range<Int32> = (Int16(Int16(Int16(Int16(-39)))) as Range<Int32>);
    try (resource = Class942()) { // block id: 1978

    } catch (e: Exception) { // block id: 1979
        if (var751) { var1965 } else { var1965 } ;
        var1989.var1992
    } finally { // block id: 1994
        var751;
        match (var1998) {
            case caseVar2006 => 
                ();
                UInt16(64)
            
            case _ => 
                if (var751) { var1868 } else { var1868 } ;
                UInt16(173)
            
        };
        func957(var751)
    };
    func1291(var2556)
}

public func func2561(param958 : Bool) : Unit { // block id: 959
    var loopTimeVar999 : Int64 = 0;
    do {
        loopTimeVar999++;
        [(), (), (), (), (), (), (), (), (), ()][5]
    } while (((var964[4] ?? var984[2])) && loopTimeVar999 < 100 ) 
}

func func1941(param1942 : Int32, param1943 : UInt8, param1944 : ((UInt32, UInt32, Bool, Int32, Array<Range<UInt16>>, Float32, Float32)) -> Interface949, param1947 : (Range<UInt16>) -> Interface946) : Range<UInt64> { // block id: 1950
    let var1960 : Array<Bool> = [false, false, false, false, false, true, false, true, false, true];
    let var2559 : ((Bool) -> Unit) -> Range<UInt64> = func1972;
    var var2564 : (Bool) -> Unit = func2561;
    if ((var1965.var1968|>{ lambdaParameter1955 : Int32 => var1960[9] })) { (UInt64(237)&127..UInt64(6)&127:106|1) } else { (var2564|>var2559) } 
}





public func func1849<T0>(param1850 : Interface951) : Int32 where T0 <: Option<Int32> { // block id: 1851
    func1329(var1857.func1860()[2]);
    var var3037 : ?Option<Option<((Range<UInt16>, Int16, Unit), Range<Int8>, Range<Int8>, UInt64)>> = Option<Option<Option<((Range<UInt16>, Int16, Unit), Range<Int8>, Range<Int8>, UInt64)>>>.Some((Option<UInt64>.Some(UInt64(35)) as Option<((Range<UInt16>, Int16, Unit), Range<Int8>, Range<Int8>, UInt64)>));
    var var3106 : (Int8, Int32, Int16, Float64, String) = (Int8(UInt8(Int8(UInt8(79)))), Int32(UInt8(48)), Int16(-31), Float64(Float64(Float64(40.0))), "4ehd}<3mFV");
    let var3134 : (Int8, Int32, Int16, Float64, String) = (Int8(Int8(56)), Int32(-6), Int16(-73), (-119.0), "@b)gm4c.9_");
    let var3166 : Int8 = Int8(62);
    if (try { // block id: 3008
        Option<((Range<UInt16>, Int16, Unit), Range<Int8>, Range<Int8>, UInt64)>.None;
        false
    } finally { // block id: 3011
        var2870;
        !var751
    }) { // block id: 3015
        if (var751) { (var2425, Int32(-122), Int16(-80), 89.0, var3024) } else { (Int8(-82), var1309, var49, var657, """
(_80Z
(!I7d
""") } 
    } else if (try { // block id: 3035
        var3037;
        var2743;
        var var3044 : (Range<Int32>, Bool, (Int8, Int32, Int16, Float64, String), Float64, (Range<UInt16>, Int16, Unit)) = ((Int32(-126)&127..Int32(-45)&127:(-104)|1), (Int64(Int16(Int16(61))) is Option<Int64>), (Int8(Int8(-93)), Int32(UInt32(Int8(18))), Int16(Int8(-26)), Float64(Float32(Float32(-71.0))), """
|21n2
=];!a{
"""), Float64(Float64((-107.0))), ((UInt16(UInt16(122))&127..UInt16(Int8(-125))&127:(Int64(Int8(22))|1)), Int16(36), ()));
        var3044
    } catch (_) { // block id: 3076
        ();
        ((Int32(122)&127..var1309&127:(var618|1)), var751, (var2425, var1309, Int16(79), (-93.0), var1368), var657, var2956)
    } finally { // block id: 3092
        var751 ||= false;
        ();
        var var3103 : Bool = true;
        ((Int32(-13)&127..=Int32(92)&127:(var148|1)), var3103, var3106, 119.0, ((UInt16(39)&127..=var2175&127:(52|1)), var49, ()))
    }[1]) { // block id: 3129
        ();
        if (var751) { var3134 } else { var3106 } 
    } else { // block id: 3143
        try { // block id: 3145
            if (true) { var3106 } else { (Int8(120), Int32(16), var49, var2403, "5s \"@xUPuZ") } 
        } catch (e: Exception) { // block id: 3155
            if (var751) { (Int8(-76), var1309, Int16(80), 6.0, "t>#!L:\\lnO") } else { (var3166, Int32(-40), var49, var657, var1368) } 
        }
    };
    let var3174 : ?Int32 = ((Int8(88)&127..=Int8(84)&127:58|1) as Int32);
    let var3194 : ?Int32 = (Option<Option<((Range<UInt16>, Int16, Unit), Range<Int8>, Range<Int8>, UInt64)>>.Some(Option<((Range<UInt16>, Int16, Unit), Range<Int8>, Range<Int8>, UInt64)>.Some((((UInt16(217)&127..=UInt16(208)&127:(97|1)), Int16(-38), ()), (Int8(1)&127..Int8(95)&127:(-39)|1), (Int8(101)&127..=Int8(16)&127:((-64)|1)), UInt64(240)))) as Int32);
    match (var3174) {
        case caseVar3179 => 
            Int32(91) << ((var1309) & 7)
        
        case _ => 
            ();
            [Option<Int32>.None, Option<Int32>.Some(var1309), var3174, var3194, var3174, Option<Int32>.Some(var1309), var3174, var3194, var3194, var3194];
            Int32(-117)
        
        case _ : UInt64 => 
            var366;
            Int32(-25)
        
        case _ => 
            -Int8(96);
            if (false) { ###"r*lK?z1Ig9"### } else { var1368 } ;
            Int32(-110)
        
    }
}


public func func3235(param3236 : Rune) : Interface951 { // block id: 3237
    var var3361 : Interface951 = Class942(func511, (UInt8(116)&127..UInt8(76)&127:76|1));
    (try { // block id: 3244
        if (false) { var3248 } else { var3248 } 
    } finally { // block id: 3251
        var49 >>= ((var49) & 7);
        var366;
        Option<Interface951>.None
    } ?? ((var3260 as Interface951) ?? var3361))
}



func func847(param848 : Range<Int16>, optionalParam849 ! : Float64 = (-59.0), namedParam851 ! : Float64) : Unit { // block id: 852
    let var1808 : Interface945 = Class942(func511, (UInt8(62)&127..=UInt8(39)&127:(Int64(Int16(UInt16(95)))|1)));
    var var3366 : (Rune) -> Interface951 = func3235;
    (var3366~>func1849<Option<Int32>>)|>({ lambdaParameter1783 : (Rune) -> Int32 => if ((var1309|>func382)) { // block id: 1790
        false
    } else if (try { // block id: 1793
        var49 += Int16(48);
        if (true) { var1800 } else { [(), (), (), (), (), (), (), (), (), ()] } ;
        Float32(75.0) <= Float32(-104.0)
    } catch (e: Exception) { // block id: 1806
        var1808;
        var366;
        var751
    }) { // block id: 1819
        Option<Int32>.None;
        if (false) { var984 } else { var1658 } ;
        false
    } else { // block id: 1826
        if (true) { Option<Range<UInt16>>.Some((var466&127..var472&127:((-58)|1))) } else { Option<Range<UInt16>>.Some((var466&127..=UInt16(32)&127:(var618|1))) } ;
        var751 &&= true;
        var142 > UInt64(97)
    } && false }~>func957);
    var var3391 : ?Option<Interface949> = (UInt64(Int32(35)) as Option<Interface949>);
    let var3475 : (UInt64) -> (Unit, Array<Unit>, Range<Int64>, (UInt8, Range<Int16>, Range<Int16>, Int8, Unit, Range<Int32>, Range<Int32>, Range<UInt8>), Interface949) = func1864;
    match ((try { // block id: 3375
            Option<Option<Interface949>>.Some(var2062)
        } catch (e: Exception) { // block id: 3378
            Option<Option<Option<((Range<UInt16>, Int16, Unit), Range<Int8>, Range<Int8>, UInt64)>>>.Some(Option<Option<((Range<UInt16>, Int16, Unit), Range<Int8>, Range<Int8>, UInt64)>>.Some(Option<((Range<UInt16>, Int16, Unit), Range<Int8>, Range<Int8>, UInt64)>.None));
            if (var751) { Option<Option<Int32>>.None } else { Option<Option<Int32>>.None } ;
            if (false) { Option<Option<Interface949>>.Some(var2062) } else { var3391 } 
        } finally { // block id: 3395
            var2743;
            UInt16(242);
            var var3399 : ?Option<Interface949> = (Class942(optionalParam3403 : UInt64(23), namedParam3411 : ([Option<Int64>.None, Option<Int64>.None, Option<Int64>.None, Option<Int64>.Some(105), Option<Int64>.None, Option<Int64>.Some(70), Option<Int64>.Some(61), Option<Int64>.Some(43), Option<Int64>.None, Option<Int64>.None] as Range<Int32>)) as Option<Interface949>);
            var3399
        } ?? (var3466 ?? Option<Interface949>.Some(Class942(optionalParam3403 : var142, optionalParam3407 : var3475, namedParam3411 : Option<Range<Int32>>.Some((Int32(-40)&127..Int32(-113)&127:45|1))))))) {
        case _ => 
            var366;
            var var3485 : (Range<UInt8>) -> Int32 = func511;
            let var3488 : Range<UInt8> = (UInt8(197)&127..UInt8(105)&127:92|1);
            Class942(var3485, var3488);
            var2743
        
        case _ => 
            if (var751) { Class942(func511, (UInt8(93)&127..=UInt8(32)&127:(63|1))) } else { var1295 } ;
            var2743
        
        case caseVar3506 : Option<Range<Int32>> => 
            var366
        
        case caseVar3511 => 
            var1857;
            if (var751) { var2956 } else { var2956 } ;
            ()
        
        case _ => 
            var var3522 : Unit = ();
            var3522
        
    }
}



func func841(param842 : Range<Int16>) : Option<Bool> { // block id: 843
    -var49;
    var var3546 : Array<Option<Int32>> = [([Option<Int32>.Some(Int32(-110)), ((41&127..(-25)&127:(100|1)) as Int32), (Option<Unit>.Some(()) as Int32), Option<Int32>.Some(Int32(-18)), ('E' as Int32), (true as Int32), Option<Int32>.Some(Int32(104)), (Float32(-91.0) as Int32), ([(UInt16(8)&127..UInt16(56)&127:(-66)|1), (UInt16(238)&127..=UInt16(239)&127:(-14)|1), (UInt16(8)&127..=UInt16(101)&127:(-53)|1), (UInt16(181)&127..UInt16(0)&127:105|1), (UInt16(42)&127..=UInt16(229)&127:(-33)|1), (UInt16(1)&127..UInt16(221)&127:(-128)|1), (UInt16(10)&127..UInt16(39)&127:(-52)|1), (UInt16(242)&127..=UInt16(220)&127:(-111)|1), (UInt16(236)&127..=UInt16(3)&127:(-101)|1), (UInt16(39)&127..=UInt16(125)&127:17|1)] as Int32), ((Int8(-76)&127..Int8(97)&127:((-55)|1)) as Int32)] as Int32), Option<Int32>.None, Option<Int32>.None, ([(UInt16(197)&127..UInt16(218)&127:((-23)|1)), (UInt16(119)&127..UInt16(25)&127:(-105)|1), (UInt16(126)&127..UInt16(47)&127:((-94)|1)), (UInt16(67)&127..=UInt16(183)&127:((-37)|1)), (UInt16(180)&127..UInt16(28)&127:93|1), (UInt16(218)&127..=UInt16(248)&127:59|1), (UInt16(143)&127..=UInt16(55)&127:(101|1)), (UInt16(107)&127..=UInt16(93)&127:108|1), (UInt16(198)&127..UInt16(248)&127:(100|1)), (UInt16(218)&127..=UInt16(108)&127:((-67)|1))] as Int32), ((Option<Array<Option<Int32>>>.None is (Unit, Range<Int64>, (UInt32, UInt32, Bool, Int32, Array<Range<UInt16>>, Float32, Float32), (Range<UInt16>, Int16, Unit))) as Int32), ((((86&127..=(-80)&127:((-38)|1)), UInt64(178), (UInt64(216)&127..=UInt64(170)&127:10|1), (), Option<Int64>.Some(82), 66, (UInt8(30)&127..=UInt8(248)&127:(-73)|1)) as Range<UInt16>) as Int32), Option<Int32>.Some(Int32(Int16(Int8(33)))), ((UInt32(Int32(37)), UInt32(127), true, Int32(30), [(UInt16(164)&127..UInt16(208)&127:((-4)|1)), (UInt16(207)&127..UInt16(147)&127:((-128)|1)), (UInt16(225)&127..UInt16(65)&127:(-120)|1), (UInt16(73)&127..=UInt16(231)&127:((-76)|1)), (UInt16(82)&127..UInt16(184)&127:(-43)|1), (UInt16(37)&127..UInt16(190)&127:((-31)|1)), (UInt16(35)&127..=UInt16(135)&127:(120|1)), (UInt16(104)&127..=UInt16(26)&127:(59|1)), (UInt16(60)&127..UInt16(195)&127:(-61)|1), (UInt16(148)&127..UInt16(84)&127:(2|1))], Float32(25.0), Float32(Float32(47.0))) as Int32), Option<Int32>.Some(Int32(UInt8(Int8(-40)))), Option<Int32>.None];
    func847(param842, optionalParam849 : Float64(if (var751) { // block id: 3528
        if (false) { Class942(func511, (var455&127..var455&127:((-40)|1))) } else { Class942() } ;
        ();
        (-95.0)
    } else if (true) { // block id: 3541
        UInt8(179);
        45.0
    } else { // block id: 3544
        var3546;
        let var3678 : Float64 = Float64(Float64(Float64(17.0)));
        var3678
    }), namedParam851 : try { // block id: 3684
        Class942(Option<Range<UInt16>>.None);
        (-48.0) * var2403
    } finally { // block id: 3690
        var582;
        var2870;
        (-39.0)
    });
    var var3746 : ?Int32 = (Class942(Option<Range<UInt16>>.None) as Int32);
    let var3754 : Int64 = Int64(Int16(Int16(12)));
    var var3760 : Bool = ((Int16(-104)&127..=Int16(-17)&127:(-115)|1) is Float32);
    var var3775 : Int32 = Int32(57);
    if ((try { // block id: 3701
        [Option<Unit>.Some(()), Option<Unit>.Some(var582), var931, var931, Option<Unit>.None, Option<Unit>.Some(()), Option<Unit>.Some(()), var931, Option<Unit>.None, Option<Unit>.Some(var582)];
        if (var751) { Option<Bool>.None } else { Option<Bool>.Some(var751) } 
    } finally { // block id: 3723
        let var3730 : ?Int32 = Option<Int32>.Some(Int32(Int16(-106)));
        var var3736 : ?Int32 = Option<Int32>.Some(Int32(-75));
        if (true) { var3546 } else { [Option<Int32>.None, var3730, var3730, var3736, var3730, var3741, var3736, var3730, var3746, var3730] } ;
        var618 ** (var3754 & 3);
        Option<Bool>.Some(var3760)
    } ?? try { // block id: 3764
        Option<Array<UInt64>>.Some([UInt64(63), UInt64(110), UInt64(113), UInt64(147), UInt64(211), UInt64(151), UInt64(152), UInt64(164), UInt64(225), UInt64(156)]);
        var2425;
        Float32(-83.0) < var1365
    } finally { // block id: 3771
        Int32(54) == var3775
    })) { try { // block id: 3778
        var3760 ||= false;
        Option<Bool>.None
    } catch (e: Exception) { // block id: 3783
        if (true) { Option<Bool>.Some(false) } else { Option<Bool>.None } 
    } finally { // block id: 3789
        var2743;
        var49 += Int16(-20);
        var830
    } } else { match ((Option<Class942>.Some(Class942()) ?? var1965)) {
        case _ => 
            var582;
            Option<Bool>.Some(var3760)
        
        case caseVar3812 : (Range<UInt16>, Int8, Int64, Range<Int8>, Range<UInt32>) => 
            var142++;
            var2743;
            if (true) { var713 } else { Option<Bool>.None } 
        
        case _ => 
            if (false) { var713 } else { var830 } 
        
        case _ => 
            if (true) { Option<Bool>.Some(true) } else { Option<Bool>.Some(false) } 
        
    } } 
}

public func func227(param228 : Range<Int32>) : Bool { // block id: 229
    let var345 : Bool = (Float64(102.0) is UInt16);
    func func233(optionalParam234 ! : UInt16 = UInt16(112), optionalParam236 ! : Int8 = Int8(Int8(-62)), namedParam239 ! : Unit) : Option<Int64> { // block id: 240
        let var252 : ?Int64 = Option<Int64>.None;
        let var256 : Range<UInt8> = (UInt8(216)&127..UInt8(148)&127:(-76)|1);
        var var265 : Int32 = Int32(UInt32(73));
        let var278 : Int64 = Int64(Int16(116));
        var var285 : ?Int64 = ((UInt32(160)&127..UInt32(Int32(15))&127:(Int64(UInt8(UInt8(4)))|1)) as Int64);
        let var301 : Array<Option<Int64>> = [Option<Int64>.None, (UInt32(102) as Int64), Option<Int64>.Some(Int64(UInt16(11))), Option<Int64>.Some(Int64(Int8(-81))), Option<Int64>.Some((-44)), (((UInt16(28)&127..=UInt16(57)&127:(49|1)), Int16(Int16(-20)), ()) as Int64), Option<Int64>.Some(57), ((UInt32(109)&127..UInt32(UInt8(37))&127:(Int64(Int8(-27))|1)) as Int64), (((-54)&127..=111&127:56|1) as Int64), Option<Int64>.Some(93)];
        match ((((-76)&127..=(-43)&127:(-53)|1), UInt64(93), (UInt64(148)&127..=UInt64(91)&127:(-69)|1), (), var252, 115, var256)[4]) {
            case caseVar261 : Range<UInt8> => 
                var265++;
                [Option<Int64>.None, Option<Int64>.Some(var148), Option<Int64>.Some(var148), var252, var252, Option<Int64>.Some(var278), var282, var285, var285, Option<Int64>.Some(var148)]
            
            case _ : Int32 => 
                var301
            
            case _ => 
                var var340 : Int32 = Int32(27);
                var340 >>= ((Int32(34)) & 7);
                if (var345) { [Option<Int64>.None, var282, var282, Option<Int64>.None, Option<Int64>.None, var282, Option<Int64>.None, Option<Int64>.Some((-77)), Option<Int64>.Some(var278), Option<Int64>.Some(var278)] } else { var301 } 
            
        }[2]
    }
;
    Option<Int64>.Some(match (func233(namedParam239 : var366)) {
        case _ => 
            var366;
            97
        
    });
    let var387 : (Int32) -> Bool = { lambdaParameter390 : Int32 => false };
    let var690 : Int64 = Int64(UInt16(Int8(100)));
    let var782 : UInt32 = UInt32(238);
    let var3842 : (Range<Int32>, Bool, (Int8, Int32, Int16, Float64, String), Float64, (Range<UInt16>, Int16, Unit)) = ((Int32(54)&127..=Int32(UInt8(198))&127:((-68)|1)), (Class942(Option<Range<UInt16>>.None) is Option<Option<Interface949>>), (Int8(54), Int32(UInt16(UInt8(128))), Int16(49), (-106.0), "%IpYe1\\~`!"), (-114.0), ((UInt16(22)&127..UInt16(196)&127:120|1), Int16(UInt16(40)), ()));
    func func378() : Option<Bool> { // block id: 379
        let var601 : Rune = '4';
        let var608 : Range<Int64> = ((-38)&127..(-118)&127:57|1);
        let var622 : Int64 = Int64(Int16(UInt8(123)));
        let var631 : Unit = ();
        var loopTimeVar674 : Int64 = 0;
        while ((((var601|>func394<Option<UInt64>, Option<Int64>>)|>var387)) && loopTimeVar674 < 100 ) {
            loopTimeVar674++;
            var var634 : (Range<Int64>, UInt64, Range<UInt64>, Unit, Option<Int64>, Int64, Range<UInt8>) = ((48&127..=(-121)&127:112|1), UInt64(224), (UInt64(UInt64(UInt64(75)))&127..=UInt64(Int8(-9))&127:((-82)|1)), (), ((Int16(43)&127..=Int16(23)&127:(Int64(UInt32(25))|1)) as Int64), 61, (UInt8(61)&127..UInt8(86)&127:114|1));
            try { // block id: 605
                let var627 : Range<UInt8> = (UInt8(17)&127..UInt8(64)&127:(-84)|1);
                (var608, var142, (var142&127..var142&127:(118|1)), var366, Option<Int64>.Some(var618), var622, var627)
            } catch (_) { // block id: 629
                var631;
                var634
            } finally { // block id: 654
                var657 *= var657;
                var631;
                if (var345) { var634 } else { var634 } 
            };
            let var670 : String = """
G7`[p
.6Gi)
""";
            if (true) { var670 } else { "u7+T<${var670}[di${var670}i[" } 
        };
        var var717 : Array<Option<Bool>> = Array<Option<Bool>>(10){ i => Option<Bool>.None };
        let var800 : ?Bool = Option<Bool>.Some((UInt64(Int8(UInt8(239))) is UInt32));
        let var3837 : (Range<Int16>) -> Option<Bool> = func841;
        [(UInt64(96) as Bool), match ([Option<Int64>.None, Option<Int64>.None, Option<Int64>.Some(var618), var282, Option<Int64>.None, Option<Int64>.Some(var690), Option<Int64>.None, Option<Int64>.Some((-84)), var282, Option<Int64>.None]) {
            case caseVar701 => 
                var472;
                var618 /= ((var690) | 1);
                Option<Bool>.Some(true)
            
            case _ => 
                var127;
                var713
            
        }, var717[9], if (var751) { var713 } else { Option<Bool>.None } , [Option<Bool>.Some(false), var713, Option<Bool>.Some(false), Option<Bool>.None, Option<Bool>.None, var713, Option<Bool>.Some(true), var713, Option<Bool>.None, var713][8], if (false) { var713 } else { var713 } , match (var142) {
            case 197 => 
                var782;
                Option<Bool>.None
            
            case _ : (Range<UInt16>, Int16, Unit) => 
                var717;
                if (var345) { Option<Bool>.None } else { Option<Bool>.None } 
            
            case 95 | 92 | 13 | 223 => 
                if (true) { Option<Bool>.None } else { var800 } 
            
            case 119 | 96 | 0 => 
                var148 = (-54);
                if (true) { Option<Bool>.Some(false) } else { var800 } 
            
            case _ => 
                var366;
                var800
            
        }, try { // block id: 822
            var var824 : Range<UInt32> = (UInt32(130)&127..UInt32(8)&127:((-113)|1));
            var824;
            var830
        } finally { // block id: 836
            ();
            Option<Bool>.Some(false)
        }, ((Int16(-15)&127..Int16(-57)&127:101|1)|>var3837), (var3842 as Bool)][4]
    }
;
    (func378() ?? ((var2062 as Int64) is (String, Range<Int16>) -> Float32))
}




func func31(param32 : Int8) : Array<Unit> { // block id: 33
    let var45 : UInt64 = UInt64(67);
    func func36(namedParam37 ! : Option<Int64>) : Bool { // block id: 38
        var var62 : Int64 = 5;
        let var66 : Bool = ([(), (), (), (), (), (), (), (), (), ()] is Range<UInt8>);
        match (namedParam37) {
            case _ : Range<UInt64> => 
                var45;
                var49 >>= ((var49) & 7);
                true
            
            case caseVar55 => 
                let var58 : Unit = ();
                var58;
                var62 >>= (((-26)) & 7);
                var66
            
            case _ => 
                !var66
            
        }
    }
;
    let var85 : ?Int64 = Option<Int64>.Some(100);
    let var106 : UInt8 = UInt8(UInt8(Int8(Int8(84))));
    var var112 : Int64 = Int64(UInt8(UInt8(182)));
    var var130 : Unit = ();
    let var219 : Range<UInt16> = (UInt16(95)&127..=UInt16(249)&127:110|1);
    let var3871 : (Range<Int32>) -> Bool = func227;
    func func161(optionalParam162 ! : Range<UInt64> = (UInt64(Int16(11))&127..=UInt64(214)&127:((-70)|1)), optionalParam168 ! : Option<Int64> = Option<Int64>.None, namedParam170 ! : Rune) : Unit { // block id: 171
        var var179 : Bool = false;
        var var189 : (UInt8, Range<Int16>, Range<Int16>, Int8, Unit, Range<Int32>, Range<Int32>, Range<UInt8>) = (UInt8(UInt8(Int8(Int8(42)))), (Int16(Int8(-94))&127..=Int16(-58)&127:(Int64(UInt32(184))|1)), (Int16(-99)&127..Int16(UInt16(Int16(-83)))&127:(Int64(Int32(96))|1)), Int8(Int8(-59)), (), (Int32(80)&127..Int32(68)&127:(-11)|1), (Int32(30)&127..=Int32(-74)&127:(-118)|1), (UInt8(28)&127..=UInt8(114)&127:(-78)|1));
        var loopTimeVar225 : Int64 = 0;
        do {
            loopTimeVar225++;
            var189[3];
            (var219, var49, ())[2]
        } while ((try { // block id: 174
            var148 ^= (-53);
            var179
        } catch (_) { // block id: 181
            UInt32(7);
            ();
            true
        }) && loopTimeVar225 < 100 ) ;
        (Option<Range<Int32>>.Some((Int32(-81)&127..var1309&127:((-91)|1))) ?? (Int32(-24)&127..=Int32(26)&127:(6|1)))|>var3871;
        var loopTimeVar3911 : Int64 = 0;
        (match ((Option<Option<Interface951>>.None ?? Option<Interface951>.Some(var3897))) {
            case _ => 
                var582;
                var931
            
        } ?? while ((true) && loopTimeVar3911 < 100 ) {
            loopTimeVar3911++;
            var2743;
            var142 |= var142
        })
    }
;
    var loopTimeVar3925 : Int64 = 0;
    do {
        loopTimeVar3925++;
        let var3914 : Rune = 'R';
        func161(optionalParam162 : (UInt64(185)&127..UInt64(182)&127:111|1), namedParam170 : var3914);
        var var3918 : ?Array<UInt64> = (Option<Unit>.None as Array<UInt64>);
        var var3922 : Array<UInt64> = [UInt64(211), UInt64(104), UInt64(28), UInt64(235), UInt64(184), UInt64(33), UInt64(253), UInt64(85), UInt64(109), UInt64(200)];
        (var3918 ?? var3922)
    } while ((func36(namedParam37 : match (var85) {
        case _ => 
            let var92 : Unit = ();
            var92;
            var92;
            Option<Int64>.Some(81)
        
        case caseVar99 : Range<Int32> => 
            var var117 : Range<UInt8> = (UInt8(83)&127..=UInt8(41)&127:10|1);
            if (true) { (UInt8(173)&127..var106&127:(var112|1)) } else { var117 } ;
            if (false) { Option<Int64>.None } else { var85 } 
        
        case _ => 
            var127;
            var130;
            if (false) { var85 } else { var85 } 
        
        case caseVar138 => 
            var142--;
            if (true) { Option<Int64>.Some(var148) } else { Option<Int64>.None } 
        
        case _ => 
            ();
            if (true) { Option<Int64>.None } else { Option<Int64>.None } 
        
    })) && loopTimeVar3925 < 100 ) ;
    match (Int16(UInt8(param32))) {
        case 34 => 
            ()
        
        case -57 => 
            var751 ||= var751
        
        case _ => 
            ();
            var2062;
            ()
        
        case _ => 
            var366
        
    };
    ((try { // block id: 3956
        var142;
        ();
        var931
    } finally { // block id: 3960
        var931
    } as Array<Unit>) ?? (try { // block id: 3964
        var var3969 : ??Int32 = (Option<Interface951>.Some(Class942(func511, (UInt8(237)&127..UInt8(250)&127:97|1))) as Option<Int32>);
        let var3976 : Option<Option<Option<Int32>>> = (Int64(Int16(Int8(52))) as Option<Option<Int32>>);
        if (false) { Option<Option<Option<Int32>>>.Some(var3969) } else { var3976 } ;
        Option<Array<Unit>>.Some([(), (), (), (), (), (), (), (), (), ()])
    } finally { // block id: 3983
        var582;
        if (true) { Option<Array<Unit>>.Some([var366, (), var130, (), var366, var2743, var366, (), var582, ()]) } else { var4000 } 
    } ?? var1800))
}

public func func11(optionalParam12 ! : Int8 = Int8(Int8(55)), namedParam15 ! : Unit, namedParam16 ! : UInt8, optionalParam17 ! : Unit = ()) : Option<Int64> { // block id: 19
    let var4007 : (Int8) -> Array<Unit> = func31;
    (-var2425|>var4007)[2];
    var4013;
    Option<Int64>.None
}


main(): Int64 {
    try {
        (func11(namedParam15 : (), namedParam16 : UInt8(90), optionalParam17 : var582) ?? (Option<Int64>.Some((-120)) ?? (-31)))
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var49*var49), 64)
        crccheck.updateBuffer(UInt64(var142*var142), 64)
        crccheck.updateBuffer(UInt64(var148*var148), 64)
        crccheck.updateBuffer(UInt64(var455*var455), 64)
        crccheck.updateBuffer(UInt64(var466*var466), 64)
        crccheck.updateBuffer(UInt64(var472*var472), 64)
        crccheck.updateBuffer(UInt64(var618*var618), 64)
        crccheck.updateBuffer(UInt64(var1309*var1309), 64)
        crccheck.updateBuffer(UInt64(var2073*var2073), 64)
        crccheck.updateBuffer(UInt64(var2175*var2175), 64)
        crccheck.updateBuffer(UInt64(var2425*var2425), 64)
        crccheck.updateBuffer(UInt64(var3431*var3431), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Class942 {

}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_unexpected_declaration_in_scope
// ASSERT: scan parse_trailing_closure_only_follow_name
// ASSERT: scan parse_expected_character
// ASSERT: scan parse_expected_catch_or_finally_in_try
// ASSERT: scan parse_unmatched_right_delimiter
// ASSERT: scan parse_expected_left_brace
// ASSERT: scan parse_expected_case


