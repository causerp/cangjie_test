/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output


public let var33 : Bool = ((UInt16(54)&127..UInt16(101)&127:29|1) is Unit)
public var var61 : Class9 = Class9()
public var var130 : Unit = ()
public var var161 : UInt64 = UInt64(139)
public let var174 : Array<Bool> = [(() is Float32), true, (Float32(-115.0) is String), ((UInt32(UInt8(100))&127..UInt32(92)&127:(Int64(Int8(89))|1)) is Float64), false, (Int32(79) is UInt16), false, ([true, true, true, true, true, false, true, false, false, false] is Range<UInt16>), true, false]
public let var254 : (Float64, UInt8) = ((-91.0), UInt8(Int8(Int8(Int8(-24)))))
public let var282 : Float64 = Float64(Float32(12.0))
let var293 : Option<Bool> = Option<Bool>.None
public var var377 : String = ###"-]/''v_^}]"###
public let var396 : (Int64, Array<Bool>) = (81, [true, false, false, false, true, false, false, true, true, true])
public let var422 : Int8 = Int8(Int8(78))
public var var445 : Enum442 = Enum442.defaultValue
public var var485 : Rune = 'q'
public var var500 : Range<Int8> = (Int8(UInt8(39))&127..Int8(19)&127:(32|1))
public var var512 : Int64 = Int64(Int16(-6))
public var var518 : Bool = false
public let var534 : UInt16 = UInt16(67)
public var var554 : Int32 = Int32(UInt32(1))
public let var603 : (Range<Int64>, Int16, (Float64, UInt8), Unit, (Option<String>, Int64, Range<UInt16>), UInt8) = ((Int64(37)&127..12&127:(7|1)), Int16(-122), ((-120.0), UInt8(UInt8(117))), (), ((((14&127..97&127:(-108)|1), Int16(-51), (37.0, UInt8(94)), (), (Option<String>.None, (-99), (UInt16(118)&127..=UInt16(4)&127:93|1)), UInt8(178)) as String), 73, (UInt16(79)&127..UInt16(Int8(0))&127:(Int64(UInt32(57))|1))), UInt8(215))
public let var666 : Range<Int64> = (65&127..=(-110)&127:(-99)|1)
public var var692 : (Option<String>, Int64, Range<UInt16>) = ((Int64(Int8(Int8(21))) as String), Int64(UInt16(250)), (UInt16(124)&127..UInt16(152)&127:(Int64(Int64(Int8(-35)))|1)))
public var var742 : ?Array<Bool> = (UInt64(174) as Array<Bool>)
public var var750 : Aggregate317 = Aggregate317()
public let var813 : Int64 = Int64(UInt64(UInt8(Int8(UInt8(231)))))
public let var870 : Option<Unit> = (Int16(UInt16(UInt16(UInt8(44)))) as Unit)
public var var907 : Int16 = Int16(-68)
public var var959 : ?Range<UInt16> = ((36&127..11&127:(-56)|1) as Range<UInt16>)
public var var978 : UInt8 = UInt8(175)
public let var1005 : Range<UInt16> = (UInt16(UInt16(Int16(Int8(108))))&127..=UInt16(Int8(-5))&127:(103|1))
var var1047 : Enum1044<UInt64, Int8> = Enum1044<UInt64, Int8>.defaultValue
let var1113 : Int64 = (-22)
public let var1139 : Array<Range<UInt16>> = [(UInt16(24)&127..UInt16(144)&127:((-73)|1)), (UInt16(26)&127..=UInt16(Int16(70))&127:(30|1)), (UInt16(219)&127..UInt16(51)&127:46|1), (UInt16(172)&127..UInt16(227)&127:25|1), (UInt16(37)&127..=UInt16(UInt16(Int8(-113)))&127:(Int64(UInt32(192))|1)), (UInt16(182)&127..=UInt16(3)&127:118|1), (UInt16(UInt8(238))&127..=UInt16(211)&127:(7|1)), (UInt16(20)&127..UInt16(UInt16(62))&127:(Int64(UInt64(UInt64(18)))|1)), (UInt16(92)&127..=UInt16(117)&127:5|1), (UInt16(97)&127..UInt16(218)&127:102|1)]
public var var1187 : Range<Int32> = (Int32(122)&127..=Int32(-112)&127:118|1)
public let var1241 : Bool = ([(UInt16(27)&127..=UInt16(47)&127:(Int64(UInt16(58))|1)), (UInt16(188)&127..UInt16(73)&127:(Int64(Int8(53))|1)), (UInt16(109)&127..=UInt16(8)&127:(-21)|1), (UInt16(223)&127..=UInt16(118)&127:110|1), (UInt16(21)&127..=UInt16(196)&127:(-86)|1), (UInt16(164)&127..UInt16(42)&127:(-67)|1), (UInt16(244)&127..=UInt16(65)&127:(-105)|1), (UInt16(UInt8(19))&127..UInt16(Int8(16))&127:(Int64(Int32(-43))|1)), (UInt16(Int16(-84))&127..=UInt16(Int8(-127))&127:(Int64(Int8(-68))|1)), (UInt16(142)&127..=UInt16(36)&127:(-115)|1)] is Option<String>)
public var var1470 : (Int8, Float64, Range<Int32>, Bool, Int16, UInt8) = (Int8(115), Float64(Float64(Float64(76.0))), (Int32(Int32(Int32(-15)))&127..=Int32(Int16(-58))&127:(121|1)), true, Int16(Int8(61)), UInt8(94))
public var var1495 : UInt8 = UInt8(123)
public var var1627 : Option<(Int32, Float64, UInt32, Float64, Range<UInt64>, Array<Unit>)> = Option<(Int32, Float64, UInt32, Float64, Range<UInt64>, Array<Unit>)>.None
public var var1657 : Int8 = Int8(Int8(Int8(99)))
public var var1712 : Unit = ()
public let var1730 : Int32 = Int32(Int8(101))
public var var1884 : ?Bool = Option<Bool>.None
public var var1906 : Unit = ()
public let var1947 : Array<Option<Unit>> = Array<Option<Unit>>(10){ i => ("/0&gX@6_h3" as Unit) }
public let var1969 : UInt32 = UInt32(6)
public var var2008 : UInt64 = UInt64(185)
public let var2051 : UInt16 = UInt16(UInt16(Int16(Int8(Int8(104)))))
public var var2069 : ?Bool = (Int8(UInt8(Int8(82))) as Bool)
public let var2089 : Int16 = Int16(120)
public var var2100 : Int64 = Int64(11)
let var2110 : ?Int16 = Option<Int16>.None
public var var2160 : Bool = false
public var var2168 : Int32 = Int32(UInt8(Int8(UInt8(118))))
public let var2198 : Range<UInt32> = (UInt32(243)&127..UInt32(95)&127:10|1)
public let var2260 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
public var var2278 : Range<UInt16> = (UInt16(215)&127..UInt16(Int16(UInt8(Int8(-11))))&127:((-7)|1))
public let var2381 : Unit = ()
public var var2446 : Range<Int64> = (Int64(Int8(-113))&127..=Int64(UInt32(20))&127:((-38)|1))
public let var2730 : Unit = ()
public let var2755 : UInt16 = UInt16(UInt8(99))
public let var2764 : Array<Range<UInt16>> = [(UInt16(230)&127..UInt16(37)&127:105|1), (UInt16(31)&127..UInt16(57)&127:63|1), (UInt16(190)&127..UInt16(48)&127:(-6)|1), (UInt16(144)&127..UInt16(93)&127:27|1), (UInt16(117)&127..=UInt16(164)&127:(-2)|1), (UInt16(81)&127..UInt16(173)&127:63|1), (UInt16(252)&127..UInt16(234)&127:(-107)|1), (UInt16(24)&127..=UInt16(231)&127:(-45)|1), (UInt16(65)&127..UInt16(126)&127:105|1), (UInt16(80)&127..=UInt16(87)&127:85|1)]
public var var2830 : (UInt32, Float32, (Range<UInt32>, Bool, Unit, Range<Int8>), Rune, Unit, Range<UInt16>) = (UInt32(UInt8(UInt8(60))), Float32(Float32(Float32(-107.0))), ((UInt32(Int16(-123))&127..=UInt32(UInt32(166))&127:(26|1)), true, (), (Int8(Int8(-5))&127..Int8(Int8(-96))&127:(Int64(UInt16(74))|1))), '5', (), (UInt16(79)&127..UInt16(176)&127:98|1))
public var var2865 : Interface1365 = Class1359()
public let var2886 : Class1359 = Class1359()
public var var3007 : Bool = true
public var var3053 : Bool = ("%DJF_sF:ZB" is Range<Int16>)
public let var3092 : Float64 = (-17.0)
var var3096 : (Float64, UInt8) = (Float64(Float32(20.0)), UInt8(Int8(Int8(Int8(1)))))
public let var3110 : Array<Array<Unit>> = [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]]
public let var3213 : ?Unit = (Int8(UInt8(115)) as Unit)
public var var3442 : UInt32 = UInt32(Int8(-127))
var var3449 : ?Bool = ((UInt8(115)&127..=UInt8(248)&127:(-1)|1) as Bool)
let var3466 : ?Bool = Option<Bool>.None
public var var3494 : Range<UInt32> = (UInt32(170)&127..=UInt32(186)&127:(Int64(Int64(Int16(48)))|1))
public var var3653 : Int32 = Int32(UInt16(Int16(UInt8(Int8(75)))))
var var3664 : ?String = Option<String>.None
public let var3701 : Rune = 'j'
public var var3722 : ?Unit = Option<Unit>.None
public let var3727 : Unit = ()
public let var3766 : UInt32 = UInt32(6)
public let var3813 : ?Unit = ('5' as Unit)
public let var3838 : Option<Range<Int8>> = ((Int8(89), Float64(Float32(Float32(-64.0))), (Int32(-50)&127..=Int32(117)&127:(-91)|1), true, Int16(UInt16(235)), UInt8(Int8(Int8(-58)))) as Range<Int8>)
public let var3866 : (Option<Range<UInt16>>, Int8, Range<Int64>) = (Option<Range<UInt16>>.None, Int8(UInt8(28)), ((-118)&127..Int64(UInt32(Int32(120)))&127:(Int64(Int16(Int8(-62)))|1)))
var var3921 : Float32 = Float32(-75.0)
public let var3989 : Bool = false
public let var4057 : ?(Int64, Array<Bool>) = Option<(Int64, Array<Bool>)>.None
public var var4168 : ?Bool = (Option<Bool>.None as Bool)
public var var4177 : Option<Bool> = (((Int8(UInt8(159)), (-33.0), (Int32(-2)&127..Int32(-125)&127:122|1), (Class1359() is Range<UInt64>), Int16(102), UInt8(UInt8(182))) as Option<Bool>) as Bool)
public var var4196 : UInt16 = UInt16(71)
public var var4225 : Float64 = Float64(Float64(Float64(82.0)))
public open class Class9 <: Resource {
    public init() { // block id: 11

    }
;
    static var var310 : (Option<String>, Int64, Range<UInt16>) = (Option<String>.None, 74, (UInt16(139)&127..=UInt16(25)&127:79|1));
    public static let var389 : Int8 = Int8(-85);
    var var973 : Bool = false;
    public open func func65(namedParam66 ! : Range<Int16>, namedParam67 ! : Int8, namedParam68 ! : Range<UInt64>, namedParam69 ! : UInt32) : Int64 { // block id: 70
        var loopTimeVar74 : Range<UInt64> = (UInt64(UInt8(UInt8(98)))&127..UInt64(75)&127:(5|1));
        for (i in loopTimeVar74 where var33) {

        };
        let var4239 : (UInt64) -> Int64 = func82;
        UInt64(35)|>var4239
    }

    public func isClosed(): Bool { return true }
    public func close(): Unit {}
}




public struct Aggregate317 {
    public init() { // block id: 319

    }
;
    public static func func322(namedParam323 ! : UInt64, optionalParam324 ! : Array<Unit> = Array<Unit>(10){ i => () }, optionalParam336 ! : Int8 = Int8(UInt8(Int8(Int8(30))))) : String { // block id: 341
        var var415 : Int32 = Int32(Int32(Int8(105)));
        match ((var396[1]|>func344<Option<Bool>, Option<Option<String>>>)) {
            case caseVar403 : (String, Class9, Int8) => 
                var130;
                Option<String>.None;
                if (var33) { "i*OZ0C0X>8" } else { ":\"DWlzJ`\"I" } 
            
            case _ => 
                -var415;
                var377
            
        }
    }

}

public func func344<T0, T1>(param345 : Array<Bool>) : Class9 { // block id: 346
    let var365 : Int64 = 11;
    (match {
        case false => 
        var161 |= UInt64(34);
        "HoXCfRx3=n"
        case var33 => 
        let var369 : Int16 = Int16(7);
        if (true) { (Int16(11)&127..=Int16(13)&127:(var365|1)) } else { (var369&127..var369&127:((-90)|1)) } ;
        var130;
        if (var33) { var377 } else { var377 } 
        case _ => 
        Float32(13.0) + Float32(-107.0);
        "$0MshIoyk<"
    }, Class9(), Class9.var389)[1]
}


public func func432(param433 : Option<Option<Bool>>) : Option<Option<Bool>> { // block id: 434
    (var61 as Option<Bool>)
}

public enum Enum442 {
    defaultValue
}
public func func227(param228 : Range<UInt64>) : Bool { // block id: 229
    let var237 : ?Bool = Option<Bool>.Some((UInt16(UInt8(UInt8(202))) is Float32));
    let var250 : Int64 = Int64((-98));
    var var267 : UInt8 = UInt8(Int8(Int8(-18)));
    match (if (var33) { Option<Bool>.None } else { var237 } ) {
        case _ : UInt32 => 
            (var161&127..UInt64(133)&127:(var250|1));
            var254
        
        case _ => 
            ((-111.0), var267)
        
        case _ => 
            var var276 : Int32 = Int32(Int32(-49));
            var276 *= Int32(87);
            (var282, UInt8(240))
        
        case _ => 
            (var250&127..=(-88)&127:(var250|1));
            var293;
            if (var33) { var254 } else { var254 } 
        
    }[0];
    (Class9.var310[0] ?? Aggregate317.func322(namedParam323 : UInt64(148), optionalParam336 : var422));
    let var439 : ??Bool = Option<Option<Bool>>.None;
    let var475 : UInt32 = UInt32(Int32(101));
    match (((var439|>func432) ?? match (var445) {
            case _ => 
                var237
            
        })) {
        case _ => 
            [true, false, true, var33, false, false, false, true, false, true];
            true
        
        case caseVar467 => 
            (Option<String>.Some(var377), 44, (UInt16(1)&127..=UInt16(145)&127:58|1));
            var475;
            UInt32(186) < var475
        
        case _ => 
            var485;
            if (false) { var254 } else { (78.0, UInt8(199)) } ;
            var33
        
        case _ => 
            false
        
    }
}





public func func966(param967 : Unit) : Range<UInt16> { // block id: 968
    var loopTimeVar981 : Int64 = 0;
    while ((var61.var973) && loopTimeVar981 < 100 ) {
        loopTimeVar981++;
        var978--
    };
    var var995 : Range<UInt16> = (UInt16(110)&127..=UInt16(75)&127:(-14)|1);
    try { // block id: 985
        let var987 : Rune = '4';
        var987;
        [(UInt16(242)&127..=var534&127:(var813|1)), var995, (UInt16(244)&127..UInt16(82)&127:(-46)|1), (UInt16(252)&127..=UInt16(11)&127:(-42)|1), (var534&127..=UInt16(114)&127:((-125)|1)), var995, var1005, (UInt16(209)&127..=UInt16(56)&127:110|1), (UInt16(236)&127..=UInt16(196)&127:(-41)|1), (var534&127..=var534&127:(var512|1))]
    } catch (e: Exception) { // block id: 1020
        (Option<Range<UInt16>>.Some((UInt16(60)&127..UInt16(158)&127:60|1)), var422, ((-4)&127..26&127:(var813|1)));
        [(UInt16(209)&127..UInt16(43)&127:92|1), (UInt16(38)&127..UInt16(5)&127:107|1), (UInt16(179)&127..UInt16(171)&127:(-89)|1), (UInt16(80)&127..=UInt16(161)&127:(-74)|1), (UInt16(41)&127..=UInt16(126)&127:37|1), (UInt16(244)&127..=UInt16(93)&127:(-62)|1), (UInt16(41)&127..=UInt16(27)&127:62|1), (UInt16(243)&127..UInt16(242)&127:18|1), (UInt16(185)&127..UInt16(58)&127:(-7)|1), (UInt16(29)&127..=UInt16(2)&127:(-59)|1)]
    } finally { // block id: 1030
        var130;
        ();
        [(UInt16(169)&127..UInt16(222)&127:(-25)|1), (UInt16(40)&127..UInt16(192)&127:(-93)|1), (UInt16(154)&127..UInt16(74)&127:(-80)|1), (UInt16(119)&127..UInt16(178)&127:(-76)|1), (UInt16(9)&127..UInt16(89)&127:103|1), (UInt16(121)&127..UInt16(249)&127:13|1), (UInt16(112)&127..=UInt16(4)&127:(-91)|1), (UInt16(216)&127..UInt16(2)&127:(-36)|1), (UInt16(206)&127..=UInt16(226)&127:111|1), (UInt16(10)&127..=UInt16(53)&127:(-15)|1)]
    }[7]
}

public enum Enum1044<T0, T1> where T0 <: UInt64, T1 <: Int8 {
    defaultValue
}

public interface Interface1363<T0> {

}

public interface Interface1362 <: Interface1363<UInt64> {

}

public interface Interface1366 <: Interface1362 {

}

public interface Interface1365 <: Interface1366 {

}

public interface Interface1364 <: Interface1363<UInt64> & Interface1365 {

}

public open class Class1359 <: Interface1362 & Interface1364 & Resource {
    public init() { // block id: 1361

    }
;
    public static var var1369 : Float64 = 72.0
    public func isClosed(): Bool { return false }
    public func close(): Unit {}
}


public func func1522(param1523 : Range<UInt16>) : Range<UInt64> { // block id: 1524
    (UInt64(193)&127..=UInt64(98)&127:(-87)|1)
}


public func func1671(param1672 : UInt32) : Unit { // block id: 1673

}

public func func1758(param1759 : (Range<UInt64>) -> Bool) : Interface1364 { // block id: 1762
    if ((Class1359() is Float64)) { try { // block id: 1768
        Class1359();
        [var1712, (), (), (), (), (), (), (), (), var1712]
    } finally { // block id: 1781
        var1712;
        var1657 *= Int8(77);
        [(), (), (), (), (), (), (), (), (), ()]
    } } else { [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]][6] } [0];
    var907;
    var var1794 : Interface1364 = Class1359();
    var1794
}

public func func1797(param228 : Range<UInt64>) : Bool { // block id: 229
    let var237 : ?Bool = Option<Bool>.Some((UInt16(UInt8(UInt8(202))) is Float32));
    let var250 : Int64 = Int64((-98));
    var var267 : UInt8 = UInt8(Int8(Int8(-18)));
    match (if (var33) { Option<Bool>.None } else { var237 } ) {
        case _ : UInt32 => 
            (var161&127..UInt64(133)&127:(var250|1));
            var254
        
        case _ => 
            ((-111.0), var267)
        
        case _ => 
            var var276 : Int32 = Int32(Int32(-49));
            var276 *= Int32(87);
            (var282, UInt8(240))
        
        case _ => 
            (var250&127..=(-88)&127:(var250|1));
            var293;
            if (var33) { var254 } else { var254 } 
        
    }[0];
    (Class9.var310[0] ?? Aggregate317.func322(namedParam323 : UInt64(148), optionalParam336 : var422));
    let var439 : ??Bool = Option<Option<Bool>>.None;
    let var475 : UInt32 = UInt32(Int32(101));
    match (((var439|>func432) ?? match (var445) {
            case _ => 
                var237
            
        })) {
        case _ => 
            [true, false, true, var33, false, false, false, true, false, true];
            true
        
        case caseVar467 => 
            (Option<String>.Some(var377), 44, (UInt16(1)&127..=UInt16(145)&127:58|1));
            var475;
            UInt32(186) < var475
        
        case _ => 
            var485;
            if (false) { var254 } else { (78.0, UInt8(199)) } ;
            var33
        
        case _ => 
            false
        
    }
}





func func1847(param1848 : Float64) : Bool { // block id: 1849
    var var1856 : Array<Bool> = [true, true, true, false, false, true, false, true, false, false];
    let var1916 : Bool = false;
    func func1891(param1892 : Range<UInt8>, optionalParam1893 ! : (Range<UInt16>) -> Range<UInt64> = { lambdaParameter1896 : Range<UInt16> => (UInt64(24)&127..UInt64(245)&127:((-12)|1)) }) : Bool { // block id: 1904
        var1906;
        ((if (var1916) { // block id: 1918
            UInt64(26)
        } else if (false) { // block id: 1921
            var var1924 : Int64 = Int64(Int8(-99));
            var1924 &= 98;
            ();
            UInt64(6)
        } else { // block id: 1930
            if (var1241) { var1139 } else { [(UInt16(119)&127..UInt16(185)&127:(-93)|1), (UInt16(211)&127..UInt16(193)&127:29|1), (UInt16(79)&127..UInt16(175)&127:40|1), (UInt16(153)&127..=UInt16(251)&127:36|1), (UInt16(166)&127..UInt16(129)&127:51|1), (UInt16(242)&127..UInt16(176)&127:(-59)|1), (UInt16(151)&127..UInt16(12)&127:80|1), (UInt16(205)&127..UInt16(65)&127:(-60)|1), (UInt16(123)&127..=UInt16(36)&127:(-86)|1), (UInt16(143)&127..UInt16(151)&127:37|1)] } ;
            ();
            UInt64(226) & UInt64(167)
        } as Unit) ?? (var1947[9] ?? if (false) { // block id: 1966

        }));
        (var1969 is String)
    }
;
    let var1973 : (Range<UInt16>) -> Range<UInt64> = func1522;
    var var2019 : Int64 = Int64(Int32(-5));
    if (match {
        case ((48, var1856) is (UInt32) -> Unit) => 
        ();
        var1712;
        var1241
        case var1856[3] => 
        var1187;
        (UInt32(68)&127..UInt32(52)&127:(-19)|1);
        false
        case _ => 
        var1495;
        true
    }) { [((UInt64(76)&127..=UInt64(103)&127:(8|1)) is Array<UInt32>), (var1884 ?? var1241), var907 >= Int16(-80), func1891((UInt8(44)&127..UInt8(103)&127:66|1), optionalParam1893 : var1973), try { // block id: 1976
        var1916 && false
    } finally { // block id: 1980
        (-50.0) <= 56.0
    }, match ((117&127..59&127:(-40)|1)) {
        case caseVar1988 : Array<Array<Unit>> => 
            var1916
        
        case _ => 
            var1906;
            var var1996 : UInt64 = UInt64(121);
            var1996 |= var1996;
            true
        
    }, var1241, if (false) { // block id: 2003
        false
    } else { // block id: 2005
        var2008 <<= ((UInt64(144)) & 7);
        var1916
    }, var1495 != UInt8(29), try { // block id: 2016
        var2019 |= var1113;
        var var2024 : ?(Int64, Array<Bool>) = ((22.0, UInt8(Int8(UInt8(197)))) as (Int64, Array<Bool>));
        var2024;
        let var2033 : Bool = false;
        var2033 || var1241
    } catch (_) { // block id: 2036
        if (var1916) { (UInt64(29)&127..=var2008&127:(var2019|1)) } else { (UInt64(248)&127..UInt64(98)&127:(var2019|1)) } ;
        false
    }] } else { [(var2051 is (UInt32, Float32, (Range<UInt32>, Bool, Unit, Range<Int8>), Rune, Unit, Range<UInt16>)), !var1241, var1241, match (()) {
        case _ => 
            ();
            var1906;
            false
        
    }, (var2069 ?? true), var1241, var1241, true && true, false, (Int32(-74) is Int16)] } ;
    ((try { // block id: 2086
        var1906;
        var2089
    } finally { // block id: 2091
        var var2094 : Int64 = 72;
        var2094 /= ((var2019) | 1);
        var2019 &= var2100;
        Int16(-18)
    }&127..=(var2110 ?? Int16(-64))&127:(try { // block id: 2114
        var2019 + var2019
    } catch (_) { // block id: 2118
        '6';
        var2019
    } finally { // block id: 2121
        (-32)
    }|1)) is Option<UInt16>)
}

public func func1840(param1841 : ((Range<UInt64>) -> Bool) -> Interface1364) : Array<Unit> { // block id: 1844
    let var2124 : (Float64) -> Bool = func1847;
    var var2139 : Float32 = Float32(Float32(Float32(Float32(Float32(88.0)))));
    var var2153 : UInt8 = UInt8(163);
    if ((Float64((-38.0))|>var2124)) { // block id: 2128
        true
    } else if (((Option<Bool>.None as Bool) ?? if (var1241) { // block id: 2135
        var1906;
        var2139 %= Float32((Int32(Float32(5.0))) | 1);
        true
    } else { // block id: 2147
        ();
        var1241
    })) { // block id: 2150
        match (var2153) {
            case _ : Option<Unit> => 
                var2160 &&= true
            
            case 203 => 
                var2168 %= ((Int32(64)) | 1);
                var var2176 : Float64 = (-39.0);
                var2176 = var2176;
                ()
            
            case _ => 
                ();
                var2139 /= Float32((Int32(Float32(-22.0))) | 1);
                var1712
            
        };
        UInt16(15) <= var2051
    } else { // block id: 2190
        (var2069 ?? true)
    };
    var var2223 : Float64 = 56.0;
    let var2250 : Range<UInt64> = (UInt64(251)&127..UInt64(Int32(UInt16(UInt8(133))))&127:(Int64(UInt16(192))|1));
    let var2291 : Int64 = 95;
    let var2345 : (Int32, Float64, UInt32, Float64, Range<UInt64>, Array<Unit>) = (Int32(69), 94.0, UInt32(115), 66.0, (UInt64(UInt64(152))&127..=UInt64(Int64((-9)))&127:((-73)|1)), [(), (), (), (), (), (), (), (), (), ()]);
    match (try { // block id: 2196
            var2198
        } catch (e: Exception) { // block id: 2200
            var907;
            (var1969&127..UInt32(97)&127:(31|1))
        } finally { // block id: 2206
            var1906;
            var2160 ||= false;
            (UInt32(59)&127..UInt32(227)&127:117|1)
        }) {
        case _ : Range<UInt32> => 
            var var2245 : UInt32 = UInt32(UInt16(132));
            if (false) { Option<(Int32, Float64, UInt32, Float64, Range<UInt64>, Array<Unit>)>.Some((var1730, (-95.0), var1969, var2223, (var2008&127..=var2008&127:(var1113|1)), [var1906, var1712, var1712, var1906, (), var1712, (), (), var1712, ()])) } else { Option<(Int32, Float64, UInt32, Float64, Range<UInt64>, Array<Unit>)>.Some((Int32(114), (-113.0), var2245, 122.0, var2250, var2260)) } 
        
        case _ : Range<UInt64> => 
            [(UInt16(132)&127..UInt16(172)&127:(-66)|1), var2278, (UInt16(112)&127..=UInt16(178)&127:(-38)|1), (UInt16(234)&127..var2051&127:(var2291|1)), var2278, (UInt16(188)&127..UInt16(5)&127:(-64)|1), (UInt16(54)&127..UInt16(150)&127:56|1), (UInt16(106)&127..=UInt16(198)&127:(var1113|1)), var2278, var2278];
            var1627
        
        case _ => 
            var1969;
            var var2311 : (Int32, Float64, UInt32, Float64, Range<UInt64>, Array<Unit>) = (Int32(56), 45.0, UInt32(Int8(Int8(-43))), (-43.0), (UInt64(25)&127..=UInt64(168)&127:110|1), [(), (), (), (), (), (), (), (), (), ()]);
            if (var2160) { Option<(Int32, Float64, UInt32, Float64, Range<UInt64>, Array<Unit>)>.Some(var2311) } else { var1627 } 
        
        case caseVar2334 : (Int32, Float64, UInt32, Float64, Range<UInt64>, Array<Unit>) => 
            if (true) { Option<(Int64, Array<Bool>)>.None } else { Option<(Int64, Array<Bool>)>.None } ;
            var2100 %= ((95) | 1);
            Option<(Int32, Float64, UInt32, Float64, Range<UInt64>, Array<Unit>)>.Some(var2345)
        
        case _ => 
            var1627
        
    };
    try { // block id: 2373
        [var1712, (), (), (), var2381, (), (), (), (), var1712][5];
        var2260
    } finally { // block id: 2390
        UInt32(111);
        var loopTimeVar2397 : Int64 = 0;
        do {
            loopTimeVar2397++;
            ()
        } while ((var1241) && loopTimeVar2397 < 100 ) ;
        var2260
    }
}

public func func2400(param1759 : (Range<UInt64>) -> Bool) : Interface1364 { // block id: 1762
    if ((Class1359() is Float64)) { try { // block id: 1768
        Class1359();
        [var1712, (), (), (), (), (), (), (), (), var1712]
    } finally { // block id: 1781
        var1712;
        var1657 *= Int8(77);
        [(), (), (), (), (), (), (), (), (), ()]
    } } else { [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]][6] } [0];
    var907;
    var var1794 : Interface1364 = Class1359();
    var1794
}

public func func1036(param1751 : (Range<UInt16>) -> Range<UInt64>, param1754 : UInt32, param1755 : Float32) : Array<Unit> { // block id: 1756
    { lambdaParameter1801 : Range<UInt64> => ([UInt32(212), UInt32(242), UInt32(179), UInt32(105), UInt32(226), UInt32(128), UInt32(56), UInt32(89), UInt32(5), UInt32(176)][6] | (UInt32(191) / ((UInt32(56)) | 1))) > if (var1241) { [param1754, UInt32(147), UInt32(205), UInt32(203), UInt32(97), UInt32(159), param1754, UInt32(81), param1754, UInt32(184)] } else { [param1754, UInt32(191), param1754, UInt32(11), param1754, param1754, param1754, UInt32(211), UInt32(99), UInt32(222)] } [3] }|>func1758;
    let var2405 : ((Range<UInt64>) -> Bool) -> Interface1364 = func2400;
    if (var1241) { (var2405|>func1840) } else { [(), (), (), (), (), (), (), (), (), ()] } 
}

public func func1722(param1723 : Rune) : Unit { // block id: 1724
    var1657 ^= match (var1730 == Int32(97)) {
        case false | false => 
            ();
            var1657 << ((Int8(28)) & 7)
        
        case true => 
            var1657
        
        case _ => 
            Int8(32)
        
    };
    func1036(func1522, UInt32(8), match {
        case var2160 => 
        (-91.0);
        Float32(-77.0)
        case true => 
        Float32(-47.0)
        case _ => 
        ();
        var1657 %= ((var1657) | 1);
        let var2424 : Float32 = Float32(Float32(95.0));
        var2424
    })[9]
}

public func func1667(param1668 : Array<Unit>) : Unit { // block id: 1669
    var var1675 : (UInt32) -> Unit = { lambdaParameter1678 : UInt32 =>  };
    var var1686 : Array<UInt32> = Array<UInt32>(10){ i => UInt32(240) };
    UInt32(UInt16(206)) >> ((var1686[2]) & 7)|>var1675;
    if ((UInt32(UInt32(2)) is (Option<String>, Int64, Range<UInt16>))) { // block id: 1707
        var loopTimeVar1716 : Int64 = 0;
        do {
            loopTimeVar1716++;
            var1712;
            ()
        } while ((false) && loopTimeVar1716 < 100 ) ;
        14.0 - 75.0
    } else { // block id: 1720
        var var2429 : (Rune) -> Unit = func1722;
        's'|>var2429;
        if (true) { (Int8(60)&127..Int8(-27)&127:((-33)|1)) } else { (Int8(-78)&127..Int8(53)&127:78|1) } ;
        [15.0, (-115.0), (-13.0), (-85.0), (-33.0), (-91.0), 87.0, (-99.0), 37.0, (-19.0)][8]
    };
    var var2461 : (UInt32, Float32, (Range<UInt32>, Bool, Unit, Range<Int8>), Rune, Unit, Range<UInt16>) = (UInt32(166), Float32(-27.0), ((UInt32(2)&127..=UInt32(183)&127:49|1), ((UInt16(44)&127..=UInt16(212)&127:72|1) is (Int16) -> Unit), (), (Int8(UInt8(222))&127..Int8(Int8(-86))&127:(Int64(32)|1))), 'd', (), (UInt16(178)&127..UInt16(153)&127:(-50)|1));
    let var2549 : Int16 = Int16(60);
    match (match (var2446) {
            case _ : Int16 => 
                var2100 += var2100;
                (UInt32(167)&127..UInt32(22)&127:(-103)|1);
                var2461
            
            case _ => 
                let var2490 : (Range<UInt32>, Bool, Unit, Range<Int8>) = ((UInt32(55)&127..UInt32(UInt32(UInt32(236)))&127:(93|1)), true, (), (Int8(-118)&127..Int8(-4)&127:(-84)|1));
                if (var2160) { var2461 } else { (var1969, Float32(-43.0), var2490, 't', (), (UInt16(16)&127..=var2051&127:(81|1))) } 
            
            case caseVar2509 => 
                (var1969&127..=var1969&127:(var2100|1));
                if (var2160) { (var1969&127..=UInt32(162)&127:(var1113|1)) } else { var2198 } ;
                var2461
            
            case _ => 
                var2461
            
        }) {
        case caseVar2528 : Range<UInt32> => 
            var2381;
            ()
        
        case caseVar2534 => 
            ()
        
        case caseVar2539 => 
            var1906
        
        case _ => 
            Int32(-67);
            var1906;
            var907 &= var2549
        
    }
}



func func1542(param1543 : Unit) : Array<Range<UInt16>> { // block id: 1544
    var var1550 : UInt16 = UInt16(48);
    var var1573 : UInt16 = UInt16(Int16(Int16(Int8(UInt8(43)))));
    var var1591 : Range<UInt16> = (UInt16(23)&127..UInt16(Int8(UInt8(UInt8(162))))&127:(22|1));
    let var2552 : (Array<Unit>) -> Unit = func1667;
    let var2561 : ?Range<UInt16> = ([[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]] as Range<UInt16>);
    let var2642 : ?Range<UInt16> = (Int8(63) as Range<UInt16>);
    let var2648 : Range<UInt16> = (UInt16(78)&127..UInt16(74)&127:90|1);
    func func1664() : Range<UInt16> { // block id: 1665
        var2260|>var2552;
        (var2561 ?? ((Option<Option<Range<UInt16>>>.None ?? var2642) ?? (Option<Range<UInt16>>.Some(var2648) ?? (UInt16(220)&127..=var2051&127:((-36)|1)))))
    }
;
    let var2659 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    var var2724 : Unit = ();
    [try { // block id: 1547
        (var1550&127..=UInt16(64)&127:(var1113|1))
    } catch (e: Exception) { // block id: 1554
        var var1556 : Interface1363<UInt64> = Class1359();
        var1556;
        if (var1241) { (UInt16(125)&127..UInt16(201)&127:(-111)|1) } else { (UInt16(60)&127..=UInt16(162)&127:((-93)|1)) } 
    }, ((Option<UInt16>.Some(var1573) ?? UInt16(62))&127..UInt16(39)&127:(if (false) { // block id: 1583
        31
    } else { // block id: 1585
        param1543;
        (-102)
    }|1)), try { // block id: 1589
        var1591
    } finally { // block id: 1599
        if (false) { (var1573&127..var1573&127:(var1113|1)) } else { (UInt16(72)&127..UInt16(183)&127:((-60)|1)) } 
    }, match ((Option<(Int64, Array<Bool>)>.Some(var396) ?? var396)) {
        case (caseVar1617,_) => 
            var907 %= ((Int16(-61)) | 1);
            var1591
        
        case _ : Int16 => 
            var1627;
            (UInt16(48)&127..UInt16(234)&127:(89|1))
        
        case (caseVar1635,caseVar1636) => 
            Option<UInt16>.Some(UInt16(196));
            var907 ^= Int16(-96);
            if (true) { var1591 } else { var1591 } 
        
        case (_ : Range<Int16>,_) => 
            var1187;
            var1627;
            (UInt16(162)&127..UInt16(170)&127:(-28)|1)
        
        case _ => 
            var1657 -= Int8(68);
            (UInt16(98)&127..UInt16(150)&127:107|1)
        
    }, func1664(), try { // block id: 2656
        var var2712 : Unit = ();
        [var2659, [(), var2381, var2381, var2381, (), (), (), var2381, var1906, ()], [(), (), (), (), (), (), (), (), (), ()], [(), var1712, (), var1712, var1906, (), (), var1906, (), var1906], [(), var1906, (), (), (), var2381, (), var2381, (), ()], [var1906, (), var2381, param1543, (), (), (), param1543, var1712, ()], [(), var2381, var2381, var1712, var2712, (), (), var1712, (), ()], [(), (), (), (), (), (), (), (), (), ()], [var2712, var2381, var2724, var2712, param1543, var2724, var2730, var1712, var2712, ()], [(), (), (), (), (), (), (), (), (), ()]];
        var1139
    } catch (_) { // block id: 2737
        [(UInt16(185)&127..UInt16(74)&127:(-72)|1), (UInt16(159)&127..=UInt16(1)&127:(-82)|1), (UInt16(15)&127..UInt16(197)&127:99|1), (UInt16(109)&127..=UInt16(50)&127:19|1), (UInt16(62)&127..=UInt16(242)&127:(-43)|1), (UInt16(34)&127..=UInt16(34)&127:7|1), (UInt16(39)&127..=UInt16(218)&127:(-67)|1), (UInt16(2)&127..=UInt16(110)&127:36|1), (UInt16(242)&127..UInt16(99)&127:(-84)|1), (UInt16(232)&127..UInt16(47)&127:(-64)|1)]
    }[5], if ((Option<UInt16>.Some(UInt16(138)) is Option<Range<UInt16>>)) { var2648 } else { (var2642 ?? (var2051&127..=var1550&127:((-104)|1))) } , (var2561 ?? (var2755&127..=UInt16(223)&127:((-10)|1))), if (var1241) { var2764 } else { [(UInt16(20)&127..UInt16(230)&127:6|1), var2278, (var2755&127..var1550&127:(var2100|1)), var1591, (UInt16(228)&127..UInt16(154)&127:36|1), (UInt16(249)&127..UInt16(14)&127:(-114)|1), (UInt16(150)&127..=var2051&127:(var1113|1)), (UInt16(64)&127..UInt16(223)&127:(-9)|1), (UInt16(136)&127..=var2755&127:((-48)|1)), (var1573&127..var2755&127:(var2100|1))] } [4], try { // block id: 2791
        (UInt16(88)&127..=UInt16(226)&127:(-116)|1)
    } finally { // block id: 2793
        var1657 &= Int8(-80);
        (var1573&127..=var2755&127:(var1113|1))
    }]
}

func func1528<T0>(namedParam1529 ! : Range<Int64>, namedParam1530 ! : Enum1044<UInt64, Int8>, namedParam1531 ! : UInt64) : Range<UInt16> where T0 <: Array<Range<UInt16>> { // block id: 1532
    let var2802 : (Unit) -> Array<Range<UInt16>> = func1542;
    func func1534(param1535 : Float32) : Range<UInt16> { // block id: 1536
        [(), (), (), (), (), (), (), (), (), ()][6];
        (()|>var2802)[9]
    }
;
    func1534(Float32(-52.0))
}

public func func1433(optionalParam1434 ! : UInt64 = UInt64(Int32(Int8(Int8(102)))), optionalParam1439 ! : Int16 = Int16(-98), optionalParam1441 ! : Int8 = Int8(28)) : (UInt32, Float32, (Range<UInt32>, Bool, Unit, Range<Int8>), Rune, Unit, Range<UInt16>) { // block id: 1443
    var var1499 : Range<Int16> = (Int16(-50)&127..=Int16(28)&127:(-68)|1);
    let var2810 : Array<Range<Int64>> = [((-67)&127..=(-87)&127:(-118)|1), ((-82)&127..43&127:(-24)|1), (29&127..=(-98)&127:92|1), (99&127..(-25)&127:34|1), (74&127..=78&127:(-122)|1), (83&127..=123&127:59|1), (7&127..=(-46)&127:(-107)|1), (16&127..(-102)&127:(-111)|1), ((-22)&127..=7&127:(-106)|1), (88&127..59&127:93|1)];
    func func1512(optionalParam1513 ! : Range<UInt64> = (UInt64(171)&127..=UInt64(UInt32(12))&127:((-69)|1)), namedParam1519 ! : Unit) : Range<UInt64> { // block id: 1520
        func1528<Array<Range<UInt16>>>(namedParam1529 : var2810[0], namedParam1530 : var1047, namedParam1531 : optionalParam1434)|>func1522
    }
;
    var loopTimeVar2818 : Int64 = 0;
    do {
        loopTimeVar2818++;
        try { // block id: 1492
            var1495 >>= ((var1495) & 7);
            var1499
        } catch (_) { // block id: 1501
            if (var1241) { var1499 } else { var1499 } 
        } finally { // block id: 1506
            (Int16(25)&127..var907&127:((-37)|1))
        };
        func1512(optionalParam1513 : (UInt64(82)&127..=UInt64(225)&127:(-119)|1), namedParam1519 : ())
    } while ((try { // block id: 1447
        var var1449 : Unit = ();
        var1449;
        ();
        if (var1241) { [false, false, true, true, true, true, true, true, false, false] } else { [var1241, true, var1241, false, var1241, var1241, var1241, var1241, var1241, var1241] } 
    } catch (_) { // block id: 1466
        [false, false, false, true, false, false, true, true, true, false]
    } finally { // block id: 1468
        var1470;
        [false, false, false, true, true, false, true, false, true, true]
    }[4]) && loopTimeVar2818 < 100 ) ;
    var var2821 : UInt32 = UInt32(238);
    var2821 <<= ((UInt32(Int16(0)) * (var1969 - var2821)) & 7);
    var2830
}

public func func1344(param1345 : (Unit) -> Range<UInt16>) : (Int64, Array<Bool>) { // block id: 1348
    let var1390 : Range<UInt64> = (UInt64(UInt64(161))&127..UInt64(34)&127:(Int64(Int8(Int8(UInt8(7))))|1));
    func func1350(namedParam1351 ! : (UInt32, Float32, (Range<UInt32>, Bool, Unit, Range<Int8>), Rune, Unit, Range<UInt16>)) : Unit { // block id: 1352
        let var1387 : Float64 = (-89.0);
        let var1409 : UInt64 = UInt64(UInt16(109));
        let var1417 : Option<(Int32, Float64, UInt32, Float64, Range<UInt64>, Array<Unit>)> = ((Int16(27)&127..Int16(UInt8(UInt8(87)))&127:(55|1)) as (Int32, Float64, UInt32, Float64, Range<UInt64>, Array<Unit>));
        func func1354(param1355 : Int16) : Unit { // block id: 1356
            var var1381 : Int32 = Int32(Int16(-124));
            let var1400 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
            (Class1359.var1369) < (Option<(Int32, Float64, UInt32, Float64, Range<UInt64>, Array<Unit>)>.Some((var1381, (-98.0), UInt32(46), var1387, var1390, var1400)) ?? (Int32(41), var1387, UInt32(165), 22.0, (var1409&127..var1409&127:(var1113|1)), var1400))[3];
            var1417;
            var loopTimeVar1430 : Int64 = 0;
            while (((Int16(-37) is Rune)) && loopTimeVar1430 < 100 ) {
                loopTimeVar1430++;

            }
        }
;
        func1354(var907)
    }
;
    func1350(namedParam1351 : func1433());
    let var2875 : Float64 = Float64(Float64(Float64(Float32(27.0))));
    var var2900 : String = "aWl=O#A*uW";
    var var2947 : Float64 = (-122.0);
    var var3003 : Range<Int8> = (Int8(-22)&127..Int8(40)&127:108|1);
    let var3038 : Array<Bool> = [true, false, false, false, true, true, false, true, true, false];
    var var3050 : Bool = false;
    match {
        case try { // block id: 2860
        var2100 **= ((-103) & 3);
        var2865;
        26.0
    } catch (_) { // block id: 2868
        Enum1044<UInt64, Int8>.defaultValue;
        var1657 <<= ((var1657) & 7);
        var2875 * 65.0
    } < 35.0 => 
        var396
        case (var2886 is Array<Unit>) => 
        var var2926 : Bool = false;
        match (Int8(46)) {
            case caseVar2893 => 
                var1495--;
                if (var2160) { var2900 } else { """
'p'b?
*!99G
""" } ;
                if (true) { (var2100, [true, var2160, false, true, false, true, var2160, true, var1241, var2160]) } else { (var1113, [var1241, var1241, false, false, var2926, var2160, true, var1241, false, var2160]) } 
            
            case _ => 
                Int16(-72);
                var396
            
            case _ => 
                var396
            
            case -2 => 
                var2947 = var2947;
                var396
            
            case _ => 
                Option<UInt16>.None;
                if (var2160) { var396 } else { var396 } 
            
        }
        case _ => 
        (UInt32(108), Float32(109.0), ((UInt32(72)&127..=UInt32(242)&127:(-74)|1), var1241, (), (Int8(53)&127..var1657&127:(3|1))), 'v', (), (UInt16(20)&127..=UInt16(153)&127:(var2100|1)));
        var var2993 : UInt32 = UInt32(201);
        var var2996 : Int64 = Int64(UInt32(Int8(-28)));
        match (var2008) {
            case 119 | 211 | 58 | 138 => 
                var2381;
                ((UInt32(217)&127..UInt32(0)&127:38|1), false, (), (Int8(-74)&127..=Int8(22)&127:87|1))
            
            case _ => 
                ((var1969&127..=var2993&127:(var2996|1)), false, (), var3003)
            
        };
        if (var3007) { // block id: 3009
            var2008 %= ((UInt64(87)) | 1);
            if (false) { (111, [true, var3007, false, false, false, var3007, var2160, false, var1241, true]) } else { var396 } 
        } else { // block id: 3029
            if (false) { ((-55), [false, false, true, true, true, true, false, true, true, true]) } else { (var2100, var3038) } ;
            if (false) { ((-120), var3038) } else { (var2996, [true, var3050, var3053, false, false, false, true, var3050, var2160, var1241]) } 
        }
    }
}

public func func3064(param967 : Unit) : Range<UInt16> { // block id: 968
    var loopTimeVar981 : Int64 = 0;
    while ((var61.var973) && loopTimeVar981 < 100 ) {
        loopTimeVar981++;
        var978--
    };
    var var995 : Range<UInt16> = (UInt16(110)&127..=UInt16(75)&127:(-14)|1);
    try { // block id: 985
        let var987 : Rune = '4';
        var987;
        [(UInt16(242)&127..=var534&127:(var813|1)), var995, (UInt16(244)&127..UInt16(82)&127:(-46)|1), (UInt16(252)&127..=UInt16(11)&127:(-42)|1), (var534&127..=UInt16(114)&127:((-125)|1)), var995, var1005, (UInt16(209)&127..=UInt16(56)&127:110|1), (UInt16(236)&127..=UInt16(196)&127:(-41)|1), (var534&127..=var534&127:(var512|1))]
    } catch (e: Exception) { // block id: 1020
        (Option<Range<UInt16>>.Some((UInt16(60)&127..UInt16(158)&127:60|1)), var422, ((-4)&127..26&127:(var813|1)));
        [(UInt16(209)&127..UInt16(43)&127:92|1), (UInt16(38)&127..UInt16(5)&127:107|1), (UInt16(179)&127..UInt16(171)&127:(-89)|1), (UInt16(80)&127..=UInt16(161)&127:(-74)|1), (UInt16(41)&127..=UInt16(126)&127:37|1), (UInt16(244)&127..=UInt16(93)&127:(-62)|1), (UInt16(41)&127..=UInt16(27)&127:62|1), (UInt16(243)&127..UInt16(242)&127:18|1), (UInt16(185)&127..UInt16(58)&127:(-7)|1), (UInt16(29)&127..=UInt16(2)&127:(-59)|1)]
    } finally { // block id: 1030
        var130;
        ();
        [(UInt16(169)&127..UInt16(222)&127:(-25)|1), (UInt16(40)&127..UInt16(192)&127:(-93)|1), (UInt16(154)&127..UInt16(74)&127:(-80)|1), (UInt16(119)&127..UInt16(178)&127:(-76)|1), (UInt16(9)&127..UInt16(89)&127:103|1), (UInt16(121)&127..UInt16(249)&127:13|1), (UInt16(112)&127..=UInt16(4)&127:(-91)|1), (UInt16(216)&127..UInt16(2)&127:(-36)|1), (UInt16(206)&127..=UInt16(226)&127:111|1), (UInt16(10)&127..=UInt16(53)&127:(-15)|1)]
    }[7]
}

func func1340(param1341 : Array<Range<UInt16>>) : (Int64, Array<Bool>) { // block id: 1342
    var var3067 : (Unit) -> Range<UInt16> = func3064;
    var3067|>func1344
}

public func func1180(param1181 : (Float64, UInt8)) : (Int64, Array<Bool>) { // block id: 1182
    let var1191 : (Range<UInt32>, Bool, Unit, Range<Int8>) = ((UInt32(90)&127..=UInt32(128)&127:15|1), ([(UInt16(249)&127..UInt16(136)&127:((-84)|1)), (UInt16(238)&127..UInt16(190)&127:(-88)|1), (UInt16(142)&127..UInt16(89)&127:64|1), (UInt16(210)&127..=UInt16(106)&127:77|1), (UInt16(211)&127..=UInt16(210)&127:((-54)|1)), (UInt16(172)&127..=UInt16(80)&127:12|1), (UInt16(223)&127..=UInt16(242)&127:((-61)|1)), (UInt16(195)&127..UInt16(22)&127:100|1), (UInt16(145)&127..UInt16(50)&127:24|1), (UInt16(5)&127..=UInt16(112)&127:(90|1))] is UInt32), (), (Int8(-96)&127..=Int8(19)&127:2|1));
    var loopTimeVar1225 : Int64 = 0;
    while (((var1187 is (Option<String>, Int64, Range<UInt16>)) || var1191[1]) && loopTimeVar1225 < 100 ) {
        loopTimeVar1225++;
        ();
        [(UInt16(19)&127..UInt16(131)&127:109|1), (UInt16(61)&127..=UInt16(147)&127:38|1), (UInt16(75)&127..UInt16(204)&127:8|1), (UInt16(77)&127..=UInt16(236)&127:0|1), (UInt16(180)&127..=UInt16(193)&127:(-84)|1), (UInt16(192)&127..UInt16(93)&127:(-47)|1), (UInt16(188)&127..=UInt16(246)&127:76|1), (UInt16(168)&127..UInt16(247)&127:27|1), (UInt16(238)&127..=UInt16(239)&127:30|1), (UInt16(50)&127..=UInt16(122)&127:(-62)|1)]
    };
    var var1232 : ?(Int64, Array<Bool>) = (Float32(Float32(Float32(Float32(-15.0)))) as (Int64, Array<Bool>));
    var var1294 : Int64 = Int64(Int16(99));
    let var1304 : Array<Bool> = [false, false, true, false, true, true, false, true, true, false];
    let var1319 : UInt64 = UInt64(UInt8(Int8(Int8(UInt8(43)))));
    let var3070 : (Array<Range<UInt16>>) -> (Int64, Array<Bool>) = func1340;
    (var1232 ?? if ((!var1241)) { match (Option<(Int64, Array<Bool>)>.Some(((-19), [true, false, false, true, false, false, var1241, var1241, true, true]))) {
        case _ : Int8 => 
            var1294 **= ((-23) & 3);
            let var1299 : Unit = ();
            var1299;
            (var1113, var1304)
        
        case _ : (Range<UInt32>, Bool, Unit, Range<Int8>) => 
            if (false) { (41, [true, true, false, false, false, true, true, true, true, false]) } else { var396 } 
        
        case _ => 
            var1319 + var1319;
            ((-122), [true, var1241, true, false, var1241, true, true, false, var1241, var1241])
        
    } } else { ([(UInt16(119)&127..=UInt16(99)&127:(-5)|1), (UInt16(150)&127..UInt16(247)&127:(-41)|1), (UInt16(233)&127..=UInt16(62)&127:(-59)|1), (UInt16(4)&127..UInt16(10)&127:87|1), (UInt16(215)&127..=UInt16(243)&127:2|1), (UInt16(177)&127..=UInt16(165)&127:(-61)|1), (UInt16(40)&127..UInt16(26)&127:(-107)|1), (UInt16(200)&127..=UInt16(36)&127:87|1), (UInt16(254)&127..=UInt16(227)&127:89|1), (UInt16(72)&127..UInt16(49)&127:(-12)|1)]|>var3070) } )
}


func func1176(param1177 : Float32) : Bool { // block id: 1178
    var var3088 : Bool = false;
    func1180((Option<(Float64, UInt8)>.None ?? try { // block id: 3080
        var1113;
        ((-27.0), var1495)
    } catch (e: Exception) { // block id: 3085
        if (var3088) { (var3092, UInt8(40)) } else { var3096 } 
    }));
    (var2446 is Float32)
}


public func func1036(param1037 : (Array<Bool>) -> Class9) : Range<UInt16> { // block id: 1040
    var var1103 : Float64 = Float64(Float64((-28.0)));
    var var1110 : Int32 = Int32(102);
    let var3114 : Float32 = Float32(Float32(-8.0));
    var var3140 : Int64 = 121;
    let var3143 : Rune = 'X';
    let var3154 : Bool = (((Int8(40), Float64(Float32(102.0)), (Int32(25)&127..Int32(86)&127:(49|1)), ([UInt32(117), UInt32(176), UInt32(89), UInt32(12), UInt32(186), UInt32(46), UInt32(146), UInt32(42), UInt32(28), UInt32(36)] is Interface1366), Int16(118), UInt8(82)), Int32(UInt32(105)), [true, false, false, false, true, true, false, false, true, false], [(UInt16(204)&127..UInt16(53)&127:((-58)|1)), (UInt16(92)&127..UInt16(141)&127:(116|1)), (UInt16(243)&127..UInt16(99)&127:(52|1)), (UInt16(95)&127..UInt16(98)&127:(18|1)), (UInt16(173)&127..=UInt16(123)&127:(28|1)), (UInt16(97)&127..UInt16(56)&127:((-81)|1)), (UInt16(246)&127..=UInt16(42)&127:(92|1)), (UInt16(174)&127..=UInt16(171)&127:((-71)|1)), (UInt16(4)&127..UInt16(99)&127:((-22)|1)), (UInt16(135)&127..=UInt16(240)&127:109|1)]) is Class1359);
    var var3257 : Float64 = Float64(Float32(12.0));
    match {
        case (match (var1047) {
        case _ => 
            var396
        
    } is (Float64, UInt8)) => 
        let var1061 : Bool = true;
        let var1066 : Unit = ();
        let var1072 : (Float64, UInt8) = (25.0, UInt8(Int8(Int8(5))));
        match (var1047) {
            case defaultValue => 
                ((UInt32(167)&127..UInt32(165)&127:(-64)|1), var1061, (), (Int8(-75)&127..=Int8(109)&127:71|1));
                var1066
            
            case _ : Range<Int16> => 
                var1072;
                var907--
            
            case defaultValue => 
                var1066
            
            case defaultValue => 
                ()
            
            case _ => 
                var1066;
                ()
            
        };
        var loopTimeVar1096 : Int64 = 0;
        do {
            loopTimeVar1096++;

        } while ((var1061) && loopTimeVar1096 < 100 ) ;
        var var1120 : Array<Bool> = [(((-21)&127..=69&127:91|1) is (Option<Option<Bool>>) -> Option<Option<Bool>>), false, false, (Float32(Float32(-78.0)) is Option<Range<UInt16>>), true, (() is (UInt64, Array<Unit>, Int8) -> String), true, (###"&V=~s]VTMo"### is Int32), (Enum1044<UInt64, Int8>.defaultValue is Enum1044<UInt64, Int8>), false];
        ((Int8(-62), var1103, (Int32(119)&127..var1110&127:(var1113|1)), true, var907, UInt8(237)), var1110, var1120, var1139)[0]
        case (try { // block id: 3108
        var3110;
        ();
        var3114
    } catch (_) { // block id: 3117
        (Int8(9)&127..Int8(105)&127:21|1);
        Option<(Float64, UInt8)>.Some(var3096);
        Float32(16.0)
    } finally { // block id: 3122
        var1906;
        Float32(-9.0)
    }|>func1176) => 
        if (var3007) { var2830 } else { (var1969, var3114, ((UInt32(64)&127..=UInt32(198)&127:101|1), var1241, var1906, (var1657&127..Int8(123)&127:(var3140|1))), var3143, (), (UInt16(233)&127..UInt16(95)&127:87|1)) } ;
        match (var396) {
            case _ => 
                if (var3154) { Option<Unit>.Some(()) } else { var3213 } ;
                'v'
            
            case _ : Interface1365 => 
                Option<Unit>.Some(());
                '9'
            
            case (_,caseVar3226) => 
                '4'
            
            case (_ : Range<UInt64>,_ : Option<Bool>) => 
                var2730;
                var3143
            
            case _ => 
                var3143
            
        };
        (Option<(Int8, Float64, Range<Int32>, Bool, Int16, UInt8)>.None ?? var1470)
        case _ => 
        var loopTimeVar3249 : Int64 = 0;
        while ((var3053) && loopTimeVar3249 < 100 ) {
            loopTimeVar3249++;

        };
        ();
        if (true) { // block id: 3253
            (var1657, var3257, (Int32(-121)&127..=Int32(-116)&127:101|1), false, var907, UInt8(176))
        } else if (var3154) { // block id: 3265
            var1906;
            (Int8(74), var3092, (Int32(-66)&127..Int32(3)&127:(-35)|1), false, var907, UInt8(104))
        } else { // block id: 3274
            (var1657, (-23.0), (var2168&127..=Int32(29)&127:((-83)|1)), var3007, Int16(-62), UInt8(9))
        }
    };
    let var3290 : Option<UInt16> = (Option<(Float64, UInt8)>.None as UInt16);
    ((if (var1241) { var3290 } else { var3290 }  ?? var2755)&127..=UInt16(126)&127:(if (var2755 >= UInt16(23)) { // block id: 3300
        57
    } else { // block id: 3302
        ((-62), [var3007, var2160, var3053, false, var1241, var1241, var3053, var3007, var3007, var3007]);
        ();
        43
    }|1))
}

public func func3321(param345 : Array<Bool>) : Class9 { // block id: 346
    let var365 : Int64 = 11;
    (if (false) { // block id: 352
        var161 |= UInt64(34);
        "HoXCfRx3=n"
    } else if (var33) { // block id: 358
        let var369 : Int16 = Int16(7);
        if (true) { (Int16(11)&127..=Int16(13)&127:(var365|1)) } else { (var369&127..var369&127:((-90)|1)) } ;
        var130;
        if (var33) { var377 } else { var377 } 
    } else { // block id: 380
        Float32(13.0) + Float32(-107.0);
        "$0MshIoyk<"
    }, Class9(), Class9.var389)[1]
}

public func func3323(param3324 : Unit) : (Array<Bool>) -> Class9 { // block id: 3325
    var var3328 : UInt16 = UInt16(52);
    var3328 *= try { // block id: 3332
        var2160 &&= true;
        ();
        var3328
    } finally { // block id: 3338
        if (false) { [(), (), (), (), (), (), (), (), (), ()] } else { [param3324, var2381, var1712, var2730, (), (), (), (), (), var2381] } ;
        var1712;
        var2755
    } / ((var2051) | 1);
    func3321
}

public func func878(namedParam879 ! : Rune, namedParam880 ! : UInt64) : Unit { // block id: 881
    var var888 : ??Bool = Option<Option<Bool>>.Some(Option<Bool>.None);
    var var921 : UInt32 = UInt32(217);
    var var946 : UInt8 = UInt8(62);
    (Int16(109)&127..match (if (false) { var888 } else { Option<Option<Bool>>.None } ) {
        case caseVar894 : Class9 => 
            if (false) { var500 } else { (Int8(75)&127..Int8(38)&127:(-7)|1) } ;
            ();
            Int16(-53)
        
        case _ : Range<Int32> => 
            var907 - Int16(7)
        
        case caseVar912 => 
            Int16(-9) % ((var907) | 1)
        
        case _ => 
            var921 /= ((UInt32(14)) | 1);
            Int16(-81)
        
    }&127:(match {
        case var174[6] => 
        var130;
        var130;
        var813 ** ((-40) & 3)
        case ((UInt64(195)&127..=UInt64(137)&127:(-99)|1)|>func227) => 
        113
        case _ => 
        var518 &&= false;
        var946 ^= UInt8(41);
        var512
    }|1));
    let var3319 : ((Array<Bool>) -> Class9) -> Range<UInt16> = func1036;
    let var3358 : (Unit) -> (Array<Bool>) -> Class9 = func3323;
    var loopTimeVar3364 : Int64 = 0;
    ((var959, Int8(9), var666)[0] ?? (while ((var518) && loopTimeVar3364 < 100 ) {
        loopTimeVar3364++;

    }|>(var3358~>var3319)));
    ()
}

func func731(param732 : Float64) : Unit { // block id: 733
    var loopTimeVar777 : Int64 = 0;
    do {
        loopTimeVar777++;
        match (var750) {
            case caseVar754 => 
                if (true) { """
b%ieB
*_AdK
""" } else { ###"Bj.R60to.="### } 
            
            case _ => 
                """
>v/^?
ed[\"d
"""
            
        };
        [var130, (), var130, var130, var130, var130, var130, var130, var130, ()][5]
    } while (((var742 ?? var174)[3]) && loopTimeVar777 < 100 ) ;
    try { // block id: 781
        ();
        ();
        ((UInt32(194)&127..UInt32(74)&127:64|1), true, var130, var500)
    } catch (e: Exception) { // block id: 789
        ((UInt32(123)&127..=UInt32(219)&127:(-21)|1), var518, var130, (Int8(103)&127..=Int8(-28)&127:100|1))
    } finally { // block id: 795
        ((UInt32(151)&127..UInt32(180)&127:(-90)|1), var33, var130, (Int8(-56)&127..var422&127:(21|1)))
    }[0];
    var loopTimeVar822 : Int64 = 0;
    var var826 : (UInt32, Float32, (Range<UInt32>, Bool, Unit, Range<Int8>), Rune, Unit, Range<UInt16>) = (UInt32(238), Float32(Float32(Float32(Float32(35.0)))), ((UInt32(55)&127..UInt32(91)&127:(-82)|1), true, (), (Int8(57)&127..Int8(-95)&127:(-87)|1)), 'X', (), (UInt16(68)&127..=UInt16(69)&127:99|1));
    let var858 : (String, Class9, Int8) = ("_`Y0W7C~FN", Class9(), Int8(-89));
    var loopTimeVar3406 : Range<UInt64> = (UInt64(UInt8(UInt8(59)))&127..UInt64(4)&127:(Int64(UInt8(235))|1));
    [while ((var518) && loopTimeVar822 < 100 ) {
        loopTimeVar822++;
        (20&127..var813&127:(118|1));
        ()
    }, var826[4], (), (), var130, try (resource = Class9()) { // block id: 846
        var var850 : Int64 = Int64(UInt8(UInt8(Int8(-9))));
        var512 &= var850;
        var130
    } finally { // block id: 856
        var858;
        ()
    }, (var870 ?? ()), func878(namedParam879 : var485, namedParam880 : var161), var130, for (i in loopTimeVar3406 where var518) {
        [var282, var282, (-40.0), param732, (-103.0), 66.0, 51.0, var282, param732, (-52.0)];
        let var3384 : (Int32, Float64, UInt32, Float64, Range<UInt64>, Array<Unit>) = (Int32(Int16(51)), 75.0, UInt32(UInt32(Int8(53))), Float64(35.0), (UInt64(138)&127..=UInt64(191)&127:(-92)|1), [(), (), (), (), (), (), (), (), (), ()]);
        var3384
    }][2]
}




func func581(param582 : (Array<Bool>) -> Class9) : (Option<String>, Int64, Range<UInt16>) { // block id: 585
    var var659 : UInt16 = UInt16(Int8(48));
    let var688 : UInt8 = UInt8(159);
    (match (Enum442.defaultValue) {
        case defaultValue => 
            var377 = var377;
            Option<(Range<Int64>, Int16, (Float64, UInt8), Unit, (Option<String>, Int64, Range<UInt16>), UInt8)>.Some(var603)
        
        case defaultValue => 
            var var644 : Option<(Range<Int64>, Int16, (Float64, UInt8), Unit, (Option<String>, Int64, Range<UInt16>), UInt8)> = ((Int8(Int8(83))&127..=Int8(UInt8(85))&127:(Int64(UInt16(148))|1)) as (Range<Int64>, Int16, (Float64, UInt8), Unit, (Option<String>, Int64, Range<UInt16>), UInt8));
            if (var33) { var644 } else { Option<(Range<Int64>, Int16, (Float64, UInt8), Unit, (Option<String>, Int64, Range<UInt16>), UInt8)>.Some(var603) } 
        
        case _ => 
            var659 **= (UInt16(128) & 3);
            Option<(Range<Int64>, Int16, (Float64, UInt8), Unit, (Option<String>, Int64, Range<UInt16>), UInt8)>.Some((var666, Int16(24), var254, (), (Option<String>.Some(var377), 49, (UInt16(240)&127..=UInt16(211)&127:(-37)|1)), UInt8(161)))
        
    } ?? try { // block id: 678
        (((-110)&127..var512&127:(117|1)), Int16(-77), ((-22.0), var688), (), var692, var688)
    } catch (_) { // block id: 707
        ();
        var130;
        var var719 : ?String = Option<String>.None;
        (((-79)&127..=(-42)&127:(-12)|1), Int16(-65), (var282, UInt8(27)), var130, (var719, 104, (UInt16(21)&127..UInt16(100)&127:(108|1))), UInt8(113))
    } finally { // block id: 727
        var603
    })[4];
    try { // block id: 3417
        (-29.0)
    } catch (e: Exception) { // block id: 3419
        var282
    }|>func731;
    let var3490 : Float32 = Float32(37.0);
    if ((match ([UInt32(161), UInt32(132), UInt32(237), UInt32(223), UInt32(231), UInt32(126), UInt32(124), UInt32(203), UInt32(70), UInt32(128)]) {
        case caseVar3431 : (Int8, Float64, Range<Int32>, Bool, Int16, UInt8) => 
            if (false) { Option<Bool>.None } else { Option<Bool>.Some(var33) } 
        
        case _ : (Range<UInt32>, Bool, Unit, Range<Int8>) => 
            var3442;
            Int8(-38) - Int8(52);
            var3449
        
        case caseVar3454 : Option<Bool> => 
            var518 &&= false;
            (var959, var422, var666);
            if (false) { var3466 } else { Option<Bool>.None } 
        
        case _ : Int16 => 
            let var3487 : UInt32 = UInt32(160);
            var var3507 : Range<UInt16> = (UInt16(UInt8(UInt8(UInt8(149))))&127..=UInt16(Int16(Int8(-88)))&127:(Int64(15)|1));
            if (var33) { (UInt32(42), Float32(120.0), ((UInt32(142)&127..=UInt32(18)&127:25|1), false, (), (Int8(-85)&127..Int8(124)&127:13|1)), 'G', var130, (UInt16(19)&127..=UInt16(62)&127:(-48)|1)) } else { (var3487, var3490, (var3494, false, var130, (Int8(-29)&127..=Int8(-4)&127:(-53)|1)), var485, (), var3507) } ;
            ();
            var3466
        
        case _ => 
            var3466
        
    } ?? (var554 is Option<Array<Bool>>))) { ((Option<Option<String>>.None ?? Option<String>.None), try { // block id: 3534
        25
    } catch (_) { // block id: 3536
        (-58) ^ var813
    } finally { // block id: 3540
        102
    }, if (true) { var1005 } else { var1005 } ) } else { ((var377 as (Option<String>, Int64, Range<UInt16>)) ?? if (var33) { // block id: 3555
        (Option<String>.None, (-81), (UInt16(171)&127..=UInt16(159)&127:(-11)|1))
    } else { // block id: 3560
        if (true) { (Option<String>.None, var813, var1005) } else { var692 } 
    }) } 
}

public func func3571(param345 : Array<Bool>) : Class9 { // block id: 346
    let var365 : Int64 = 11;
    (if (false) { // block id: 352
        var161 |= UInt64(34);
        "HoXCfRx3=n"
    } else if (var33) { // block id: 358
        let var369 : Int16 = Int16(7);
        if (true) { (Int16(11)&127..=Int16(13)&127:(var365|1)) } else { (var369&127..var369&127:((-90)|1)) } ;
        var130;
        if (var33) { var377 } else { var377 } 
    } else { // block id: 380
        Float32(13.0) + Float32(-107.0);
        "$0MshIoyk<"
    }, Class9(), Class9.var389)[1]
}

public func func207(param208 : Array<Unit>) : Bool { // block id: 209
    var161;
    var loopTimeVar224 : Int64 = 0;
    while ((((Int16(49) as Bool) ?? (19 is UInt32))) && loopTimeVar224 < 100 ) {
        loopTimeVar224++;
        ()
    };
    let var3569 : ((Array<Bool>) -> Class9) -> (Option<String>, Int64, Range<UInt16>) = func581;
    let var3578 : Range<Int16> = (Int16(UInt8(UInt8(UInt8(144))))&127..=Int16(-99)&127:((-10)|1));
    match {
        case (match (var500) {
        case _ => 
            (UInt64(168)&127..=UInt64(89)&127:(var512|1))
        
    }|>func227) => 
        var518 ||= var518;
        let var543 : Range<UInt16> = (UInt16(UInt8(Int8(Int8(-67))))&127..=UInt16(236)&127:(46|1));
        if (true) { // block id: 523
            ();
            var var529 : ?String = Option<String>.None;
            if (true) { (var529, var512, (var534&127..=UInt16(115)&127:(82|1))) } else { (Option<String>.Some("""
'Y`(6
Vbj?(
"""), var512, var543) } ;
            Int32(-118) == var554
        } else { // block id: 557
            var33
        }
        case true => 
        var loopTimeVar565 : Int64 = 0;
        do {
            loopTimeVar565++;

        } while ((var518) && loopTimeVar565 < 100 ) ;
        let var569 : (Int8, Float64, Range<Int32>, Bool, Int16, UInt8) = (Int8(-89), 3.0, (Int32(-14)&127..Int32(-3)&127:(-1)|1), false, Int16(-104), UInt8(UInt8(241)));
        var569[3]
        case _ => 
        let var3574 : (Array<Bool>) -> Class9 = func3571;
        var3574|>var3569;
        match (var3578) {
            case caseVar3588 : Option<(Option<String>, Int64, Range<UInt16>)> => 
                Option<Unit>.None;
                UInt16(123) > UInt16(130)
            
            case caseVar3596 => 
                false || var518
            
            case caseVar3603 => 
                true
            
            case _ => 
                UInt32(92) <= var3442
            
        }
    }
}







public func func92() : Unit { // block id: 93
    let var3632 : Option<Option<Bool>> = Option<Option<Bool>>.Some(Option<Bool>.None);
    func func145(namedParam146 ! : Range<UInt32>, namedParam147 ! : Range<Int32>, namedParam148 ! : Range<Int32>) : Bool { // block id: 149
        let var3612 : (Array<Unit>) -> Bool = func207;
        if (false) { // block id: 152
            var var157 : Int16 = Int16(46);
            match {
                case false => 
                var157;
                var161 = var161;
                var161
                case true => 
                var130;
                UInt64(36)
                case _ => 
                UInt64(21)
            };
            var174[9]
        } else if ((if (true) { Option<Bool>.None } else { Option<Bool>.None }  ?? ([(), (), var2381, var2381, (), var2730, var1712, var130, (), var1712]|>var3612))) { // block id: 3625
            (var3632 ?? var1884);
            var loopTimeVar3640 : Int64 = 0;
            while ((true) && loopTimeVar3640 < 100 ) {
                loopTimeVar3640++;

            };
            if (true) { // block id: 3643
                var161 += UInt64(108);
                Class1359();
                let var3650 : Int32 = Int32(108);
                var3650 != var3653
            } else if (var2160) { // block id: 3660
                var1241
            } else { // block id: 3662
                var3664;
                var2160
            }
        } else { // block id: 3667
            (Option<(Option<Range<UInt16>>, Int8, Range<Int64>)>.None ?? (Option<Range<UInt16>>.None, Int8(-90), (var512&127..(-22)&127:(var813|1))));
            (Option<Bool>.Some(var518) ?? false)
        }
    }
;
    let var3711 : ?UInt8 = Option<UInt8>.None;
    let var3750 : Class9 = Class9();
    func func103(param104 : Range<Int32>, optionalParam105 ! : Float64 = (-128.0), namedParam107 ! : Class9, namedParam108 ! : Float32) : Range<Int8> { // block id: 109
        var var113 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
        let var124 : Unit = ();
        var loopTimeVar142 : Int64 = 0;
        let var3691 : Int64 = (-39);
        var loopTimeVar3697 : Int64 = 0;
        let var3753 : Bool = (Class9() is Option<(Option<Range<UInt16>>, Int8, Range<Int64>)>);
        [var113[0], match (Float32(15.0) ** Float32(Int32(namedParam108) & 3)) {
            case 62.0 | -45.0 | -8.0 => 
                var124
            
            case _ : Int8 => 
                var130;
                ()
            
            case _ => 
                (Int8(89)&127..=Int8(-101)&127:94|1);
                ()
            
        }, var124, while ((var33) && loopTimeVar142 < 100 ) {
            loopTimeVar142++;

        }, do {
            loopTimeVar3697++;
            Option<Bool>.Some(false)
        } while ((func145(namedParam146 : (UInt32(100)&127..=UInt32(114)&127:82|1), namedParam147 : (Int32(23)&127..Int32(-87)&127:32|1), namedParam148 : (var3653&127..var2168&127:(var3691|1)))) && loopTimeVar3697 < 100 ) , (var485 = var3701), (var1495 -= (var3711 ?? var1495)), ((Option<Option<Unit>>.None ?? var3722) ?? (var870 ?? var3727)), (), if (if (var3007) { // block id: 3733
            true && true
        } else { // block id: 3737
            var282 < 20.0
        }) { // block id: 3741

        } else if (match ("&`p9lhffu1") {
            case caseVar3746 => 
                var2755;
                var3750;
                var3753
            
            case caseVar3758 => 
                var3442 |= UInt32(161);
                var1969 == var3766
            
            case _ => 
                if (var3007) { var870 } else { Option<Unit>.Some(()) } ;
                if (false) { Option<(Int64, Array<Bool>)>.Some(var396) } else { Option<(Int64, Array<Bool>)>.None } ;
                var33
            
            case "fz\\3~lrq~6" | """
F3H6&
gTV;?
""" | """
n^aY2
N\",+a{
""" => 
                var161 &= var2008;
                !false
            
            case _ => 
                var1470;
                var2730;
                var3007
            
        }) { // block id: 3795

        }];
        (Int8(20)&127..=Int8(8)&127:61|1);
        (((if (false) { [Option<Unit>.None, Option<Unit>.Some(()), Option<Unit>.None, Option<Unit>.Some(()), var3813, Option<Unit>.None, Option<Unit>.None, var3813, Option<Unit>.None, var3813] } else { var1947 } ) as Range<Int8>) ?? (match ((var377, Class9(), var422)) {
            case caseVar3830 : Interface1366 => 
                UInt8(106) - UInt8(216);
                if (var518) { var3838 } else { var3838 } 
            
            case _ => 
                ();
                let var3857 : Unit = ();
                var3857;
                Option<Range<Int8>>.Some((Int8(-128)&127..var1657&127:(var512|1)))
            
        } ?? match (var3866) {
            case caseVar3881 : Option<Bool> => 
                ();
                ();
                (Int8(-113)&127..Int8(25)&127:26|1)
            
            case (_,_,_) => 
                (Int8(-109)&127..=Int8(-2)&127:(-69)|1)
            
            case (caseVar3892 : Int64,_,caseVar3893 : String) => 
                (Int8(104)&127..=Int8(124)&127:(caseVar3892|1))
            
            case caseVar3901 => 
                Option<Option<Range<UInt16>>>.None;
                (var422&127..Int8(96)&127:(56|1))
            
            case _ => 
                var2381;
                var500
            
        }))
    }
;
    func func96(optionalParam97 ! : Rune = '6', optionalParam99 ! : Rune = 'O') : Bool { // block id: 101
        var var3958 : UInt16 = UInt16(243);
        func103(match ((-88.0)) {
            case -27.0 | 76.0 | -11.0 => 
                var1657 >>= ((Int8(38)) & 7);
                var3921;
                var1187
            
            case caseVar3926 => 
                (Int32(-65)&127..Int32(-94)&127:(119|1))
            
            case _ => 
                ();
                if (var3007) { (Int32(97)&127..=Int32(48)&127:56|1) } else { (Int32(115)&127..Int32(-116)&127:38|1) } 
            
        }, namedParam107 : var3750, namedParam108 : match (try { // block id: 3942
                if (true) { (UInt64(94)&127..UInt64(184)&127:(-9)|1) } else { (UInt64(228)&127..UInt64(162)&127:(var813|1)) } 
            } catch (e: Exception) { // block id: 3950
                if (var1241) { Option<Unit>.None } else { Option<Unit>.Some(var2730) } ;
                var3958 <<= ((var2755) & 7);
                (UInt64(204)&127..=UInt64(73)&127:(-4)|1)
            }) {
            case _ => 
                var1906;
                -Float32(74.0)
            
            case caseVar3970 => 
                ();
                Option<Option<String>>.None;
                Float32(112.0)
            
            case _ => 
                var3921
            
        });
        var loopTimeVar4010 : Int64 = 0;
        while (((Option<Bool>.Some(false) ?? match (Option<Unit>.None) {
            case caseVar3986 => 
                var3989
            
            case _ => 
                var907 |= var907;
                var3092 > (-57.0)
            
        })) && loopTimeVar4010 < 100 ) {
            loopTimeVar4010++;
            ();
            if (false) { Option<Range<Int8>>.None } else { Option<Range<Int8>>.Some((Int8(98)&127..=var1657&127:(var813|1))) } 
        };
        var var4031 : Interface1364 = Class1359();
        if ((var1884 ?? false) && var518) { // block id: 4017
            if (var3989) { [(-102.0), 93.0, (-39.0), (-103.0), 100.0, (-86.0), (-28.0), 68.0, (-100.0), (-41.0)] } else { [(-46.0), 66.0, 110.0, (-124.0), 32.0, 19.0, (-111.0), (-70.0), (-69.0), (-12.0)] } ;
            try { // block id: 4023
                false
            } finally { // block id: 4025
                ();
                if (true) { Class1359() } else { var4031 } ;
                86 == var2100
            }
        } else if (var2160) { // block id: 4037
            var2446;
            try (resource = Class9()) { // block id: 4040

            } finally { // block id: 4041
                var2886;
                var3442++;
                ()
            };
            var2051 >= UInt16(205)
        } else { // block id: 4049
            ();
            true
        }
    }
;
    var loopTimeVar4103 : Range<UInt64> = (UInt64(94)&127..UInt64(97)&127:((-41)|1));
    var loopTimeVar4150 : Range<UInt64> = (UInt64(UInt64(UInt16(UInt8(197))))&127..UInt64(UInt16(Int8(Int8(-21))))&127:(Int64(Int16(-123))|1));
    if (func96()) { match (try { // block id: 4054
            Option<(Int8, Float64, Range<Int32>, Bool, Int16, UInt8)>.None;
            var4057
        } catch (_) { // block id: 4059
            [(), (), (), (), (), (), (), (), (), ()];
            var1712;
            var4057
        } finally { // block id: 4063
            var2730;
            var4057
        }) {
        case _ => 
            var1712;
            var2260
        
        case caseVar4073 : Array<Float64> => 
            ();
            [(), (), (), (), (), (), (), (), (), ()]
        
        case _ => 
            if (false) { [(), (), (), (), (), (), (), (), (), ()] } else { [var1906, var3727, var3727, (), var3727, (), var1906, (), var1712, var2730] } 
        
    } } else { [var1712, try (resource = Class1359()) { // block id: 4096

    } finally { // block id: 4097
        ()
    }, (), for (i in loopTimeVar4103 where var2160) {

    }, try (resource = Class1359()) { // block id: 4109
        if (true) { var870 } else { var870 } ;
        Class1359();
        var2381
    } finally { // block id: 4116

    }, match (var2755) {
        case 189 | 61 | 212 => 
            var130;
            Option<(Option<Range<UInt16>>, Int8, Range<Int64>)>.None;
            ()
        
        case caseVar4127 => 
            ()
        
        case _ => 
            ()
        
    }, match (UInt8(123)) {
        case _ => 
            var130;
            var3727;
            var1712
        
    }, var3442++, var1906, for (i in loopTimeVar4150 where var3053) {
        if (var518) { Option<String>.None } else { Option<String>.None } 
    }] } ;
    var loopTimeVar4193 : Int64 = 0;
    do {
        loopTimeVar4193++;

    } while ((((Option<Option<Bool>>.Some(Option<Bool>.None) ?? var4168) ?? (var4177 ?? var3007))) && loopTimeVar4193 < 100 ) ;
    var4196 |= var534
}

public func func86(param87 : Range<Int8>) : Int64 { // block id: 88
    try { // block id: 90
        func92();
        var loopTimeVar4207 : Int64 = 0;
        while ((true) && loopTimeVar4207 < 100 ) {
            loopTimeVar4207++;
            if (var518) { var870 } else { var870 } 
        };
        54 ^ var512
    } catch (e: Exception) { // block id: 4211
        var3727;
        var var4217 : Int64 = (-1);
        try { // block id: 4214
            var4217 + var4217
        } finally { // block id: 4220
            Option<Option<String>>.Some(Option<String>.None);
            var4225 %= Float64((Int32(9.0)) | 1);
            (-37) * 75
        }
    }
}

public func func82(param83 : UInt64) : Int64 { // block id: 84
    func86(if (var3007) { (Int8(-30)&127..Int8(-3)&127:71|1) } else { (Int8(35)&127..Int8(-102)&127:(-117)|1) } )
}

main(): Int64 {
    try {
        Int16(88);
        func func13(param14 : UInt64) : Class9 { // block id: 15
            [(), (), (), (), (), (), (), (), (), ()][9];
            let var48 : Int8 = Int8(10);
            var loopTimeVar50 : Range<UInt64> = (UInt64(Int64(UInt16(Int16(125))))&127..=UInt64(Int64(Int16(87)))&127:((-59)|1));
            for (i in loopTimeVar50 where true) {
                var loopTimeVar37 : Range<UInt64> = (UInt64(Int32(75))&127..UInt64(Int8(UInt8(UInt8(31))))&127:(47|1));
                for (i in loopTimeVar37 where var33) {

                };
                UInt8(var48)
            };
            var61
        }
;
        func13(UInt64(110)).func65(namedParam66 : (var2089&127..=Int16(-108)&127:(var2100|1)), namedParam67 : Int8(-30), namedParam68 : (UInt64(203)&127..UInt64(187)&127:55|1), namedParam69 : var1969)
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var161*var161), 64)
        crccheck.updateBuffer(UInt64(var534*var534), 64)
        crccheck.updateBuffer(UInt64(var813*var813), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend<T0, T1> Enum1044<T0, T1> where T0 <: UInt64, T1 <: Int8 {

}

extend Aggregate317 {

}

extend Enum442 {

}

extend Class9 {

}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_expected_expr_or_decl_in
// ASSERT: scan parse_expected_character
// ASSERT: scan parse_unexpected_declaration_in_scope
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_expected_catch_or_finally_in_try


