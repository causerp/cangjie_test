/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output


public let var118 : Enum68<Range<UInt16>> = Enum68<Range<UInt16>>.defaultValue
public let var129 : Array<Bool> = [false, false, false, false, true, false, true, false, true, false]
public var var150 : ?Unit = Option<Unit>.None
public let var175 : Bool = (Int8(Int8(Int8(43))) is Int32)
public var var229 : ?Array<Unit> = Option<Array<Unit>>.None
public var var232 : Array<Bool> = [(Int64(Int8(UInt8(230))) is Option<Class190>), true, false, true, true, ((Int32(2)&127..Int32(-35)&127:(-109)|1) is Range<UInt16>), ('b' is Option<Unit>), ([Class190(), Class190(), Class190(), Class190(), Class190(), Class190(), Class190(), Class190(), Class190(), Class190()] is Array<Unit>), ((UInt64(88)&127..UInt64(115)&127:85|1) is UInt32), (("""
e$dl_
,rr-O
""" as Class190) is Range<Int8>)]
public var var282 : Int16 = Int16(91)
public let var310 : Int64 = 107
public let var419 : ?Bool = ((UInt8(224)&127..UInt8(28)&127:35|1) as Bool)
public var var431 : Range<UInt64> = (UInt64(101)&127..=UInt64(55)&127:((-44)|1))
public var var444 : Int32 = Int32(84)
public let var461 : Rune = 'i'
public let var479 : Float64 = Float64(Float32(125.0))
public let var560 : Bool = false
public var var667 : (Option<Option<Array<Unit>>>, Float64) = (Option<Option<Array<Unit>>>.None, Float64(Float32(Float32(Float32(27.0)))))
public var var746 : UInt32 = UInt32(142)
public var var773 : UInt8 = UInt8(53)
public var var817 : Unit = ()
public let var969 : Range<Int64> = (Int64(UInt32(62))&127..=Int64(UInt32(11))&127:(Int64(Int8(UInt8(UInt8(49))))|1))
public let var1003 : (Range<Int64>, Float64, Enum960, Int16, Int32, Unit) = ((96&127..=(-106)&127:90|1), 86.0, Enum960.defaultValue, Int16(Int8(-69)), Int32(Int32(-27)), ())
public let var1249 : Bool = ((Option<Class190>.None as Option<Range<UInt32>>) is (Range<UInt64>) -> Int64)
public let var1333 : UInt16 = UInt16(123)
public let var1384 : Int8 = Int8(UInt8(233))
public let var1391 : Class855 = Class855()
public var var1419 : Array<Class190> = Array<Class190>(10){ i => Class190() }
public var var1432 : ??Bool = Option<Option<Bool>>.None
public var var1442 : Unit = ()
public var var1457 : UInt64 = UInt64(Int64(Int8(85)))
var var1464 : ?Class190 = ((Option<Option<Range<UInt32>>>.None as Class190) as Class190)
public var var1493 : (Int64, Int8, Int8, Bool, Int8, UInt32) = (Int64(Int16(UInt16(Int8(27)))), Int8(UInt8(Int8(-71))), Int8(Int8(-115)), false, Int8(110), UInt32(UInt16(Int16(UInt8(197)))))
public let var1540 : Range<Int8> = (Int8(-14)&127..=Int8(15)&127:(80|1))
public var var1569 : Range<UInt8> = (UInt8(Int8(40))&127..UInt8(Int8(61))&127:((-108)|1))
public var var1584 : Int64 = 67
public var var1597 : (Range<Int8>, UInt64, Array<Bool>, (Int16, Int64, Float64)) = ((Int8(-41)&127..Int8(116)&127:(-47)|1), UInt64(100), [false, (() is ((Range<Int8>, UInt64, Array<Bool>, (Int16, Int64, Float64))) -> Range<UInt32>), ([(), (), (), (), (), (), (), (), (), ()] is Int8), (((Int8(-99)&127..Int8(4)&127:(10|1)), UInt64(193), [true, true, true, false, false, false, true, true, true, true], (Int16(7), 18, 14.0)) is Option<Array<Bool>>), false, false, ((Int8(-112)&127..Int8(0)&127:((-40)|1)) is Array<Class190>), true, (Option<Range<UInt32>>.None is Option<Array<Unit>>), ([Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None] is (Range<Int8>, UInt64, Array<Bool>, (Int16, Int64, Float64)))], (Int16(54), (-25), 70.0))
public let var1858 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
public let var1874 : Option<((Range<Int8>, UInt64, Array<Bool>, (Int16, Int64, Float64)), (Int64, Int8, Int8, Bool, Int8, UInt32), Range<Int16>, UInt8)> = Option<((Range<Int8>, UInt64, Array<Bool>, (Int16, Int64, Float64)), (Int64, Int8, Int8, Bool, Int8, UInt32), Range<Int16>, UInt8)>.None
public let var1920 : Float64 = (-119.0)
public var var1961 : Unit = ()
var var2021 : ?Range<UInt32> = Option<Range<UInt32>>.None
let var2086 : ?Bool = Option<Bool>.None
public var var2186 : ?Bool = Option<Bool>.None
public var var2284 : ((Range<Int8>, UInt64, Array<Bool>, (Int16, Int64, Float64)), (Int64, Int8, Int8, Bool, Int8, UInt32), Range<Int16>, UInt8) = (((Int8(-60)&127..=Int8(73)&127:(-60)|1), UInt64(226), [false, false, false, true, true, false, true, true, false, false], (Int16(Int16(25)), (-4), (-9.0))), ((-42), Int8(Int8(-10)), Int8(UInt8(167)), (((-103), Int8(8), Int8(35), false, Int8(-41), UInt32(84)) is Option<Int16>), Int8(2), UInt32(Int16(UInt16(26)))), (Int16(22)&127..=Int16(42)&127:39|1), UInt8(UInt8(74)))
public var var2322 : UInt8 = UInt8(Int8(30))
public var var2344 : Bool = (Int16(Int16(94)) is Option<Option<Array<Unit>>>)
var var2468 : Option<Int16> = ((-110) as Int16)
public let var2488 : Array<Option<Bool>> = Array<Option<Bool>>(10){ i => Option<Bool>.None }
public var var2681 : Array<Unit> = Array<Unit>(10){ i => () }
public var var2758 : Range<Int16> = (Int16(85)&127..=Int16(Int16(106))&127:(Int64(UInt16(146))|1))
public let var2768 : (Range<Int8>, UInt64, Array<Bool>, (Int16, Int64, Float64)) = ((Int8(5)&127..=Int8(110)&127:(-123)|1), UInt64(Int64(Int8(Int8(84)))), [(([true, true, true, false, false, false, false, false, true, true] as Class190) is (Range<Int16>) -> Option<Option<Bool>>), false, false, false, (Int64(Int32(21)) is Option<Array<Unit>>), ((((UInt8(77)&127..UInt8(133)&127:(-8)|1), 37.0, [false, false, false, false, true, false, false, false, false, true], Int16(-50), Option<Option<Option<Bool>>>.None) as Unit) is Array<Unit>), (UInt16(11) is Array<UInt8>), false, false, false], (Int16(UInt16(UInt8(155))), (-39), 111.0))
public var var2887 : Option<Unit> = (Class190() as Unit)
var var2902 : ?((Range<Int8>, UInt64, Array<Bool>, (Int16, Int64, Float64)), (Int64, Int8, Int8, Bool, Int8, UInt32), Range<Int16>, UInt8) = Option<((Range<Int8>, UInt64, Array<Bool>, (Int16, Int64, Float64)), (Int64, Int8, Int8, Bool, Int8, UInt32), Range<Int16>, UInt8)>.None
public let var2927 : (Int64, Int8, Int8, Bool, Int8, UInt32) = (Int64(Int32(99)), Int8(-97), Int8(Int8(-119)), true, Int8(UInt8(10)), UInt32(77))
public var var2945 : ((Range<Int8>, UInt64, Array<Bool>, (Int16, Int64, Float64)), (Int64, Int8, Int8, Bool, Int8, UInt32), Range<Int16>, UInt8) = (((Int8(-8)&127..=Int8(37)&127:71|1), UInt64(130), [true, false, ((((Int8(51)&127..Int8(-65)&127:((-44)|1)), UInt64(119), [false, false, true, false, true, false, false, true, true, false], (Int16(8), 41, (-7.0))), ((-50), Int8(67), Int8(-68), true, Int8(-46), UInt32(226)), (Int16(-127)&127..=Int16(20)&127:(-126)|1), UInt8(235)) is UInt16), false, true, (((-121)&127..(-15)&127:((-75)|1)) is Range<Int8>), false, (Option<Range<UInt32>>.None is Range<Int16>), ((Option<Option<Bool>>.None, (Int8(96)&127..Int8(25)&127:45|1)) is UInt64), true], (Int16(53), Int64(77), Float64(Float32(-71.0)))), ((-119), Int8(-13), Int8(UInt8(Int8(-16))), ((Int16(-37)&127..Int16(42)&127:(-86)|1) is Option<((Range<Int8>, UInt64, Array<Bool>, (Int16, Int64, Float64)), (Int64, Int8, Int8, Bool, Int8, UInt32), Range<Int16>, UInt8)>), Int8(96), UInt32(Int8(Int8(16)))), (Int16(-30)&127..=Int16(-9)&127:(-107)|1), UInt8(7))
let var3041 : ?Array<Unit> = Option<Array<Unit>>.None
public var var3076 : Range<Int32> = (Int32(-53)&127..Int32(UInt32(UInt16(Int8(-34))))&127:(111|1))
public let var3100 : Int16 = Int16(Int16(Int16(UInt8(Int8(60)))))
public var var3120 : Array<UInt16> = Array<UInt16>(10){ i => UInt16(119) }


public enum Enum68<T0> {
    defaultValue
}


public open class Class190 <: Resource {
    public init() { // block id: 192

    }
;
    public static var var288 : UInt32 = UInt32(43);
    private var var295 : Int16 = Int16(72);
    private var var374 : Bool = false;
    public static let var441 : Unit = ();
    public func func264(namedParam265 ! : Range<Int8>, optionalParam266 ! : Float64 = Float64(Float32(-107.0)), namedParam269 ! : Array<Class190>, namedParam270 ! : Range<Int32>) : Bool { // block id: 271
        let var304 : UInt64 = UInt64(245);
        (Option<Int16>.Some(try { // block id: 279
            var282 - Int16(-70)
        } catch (_) { // block id: 285
            var288 &= UInt32(242);
            ();
            var282
        } finally { // block id: 293
            var295
        }) ?? (namedParam265, var304, [true, false, false, true, false, false, true, false, false, false], (var282, var310, 30.0))[3][0]);
        var var406 : ?Bool = (Int32(Int32(Int16(-71))) as Bool);
        let var452 : Int16 = Int16(-109);
        (match (UInt32(153)) {
            case _ : Int32 => 
                ((-56)&127..=(-29)&127:(-26)|1);
                var288 + UInt32(219);
                let var334 : Array<Option<Bool>> = Array<Option<Bool>>(10){ i => ((UInt32(50)&127..=UInt32(241)&127:60|1) as Bool) };
                if (false) { var334 } else { var334 } 
            
            case _ => 
                (var310&127..=var310&127:(107|1));
                var374 ||= var374;
                var var380 : Array<Option<Bool>> = [(Enum68<Range<UInt16>>.defaultValue as Bool), ((UInt32(201)&127..=UInt32(76)&127:9|1) as Bool), Option<Bool>.None, Option<Bool>.Some(false), Option<Bool>.None, Option<Bool>.Some(false), ((Int32(UInt32(210))&127..Int32(-102)&127:(74|1)) as Bool), Option<Bool>.Some(false), Option<Bool>.None, Option<Bool>.None];
                if (var374) { var380 } else { [Option<Bool>.Some(false), var406, Option<Bool>.None, var406, Option<Bool>.None, var406, Option<Bool>.None, var406, var406, var419] } 
            
        }[0] ?? if (if (false) { // block id: 426
            if (true) { (UInt64(182)&127..=UInt64(235)&127:86|1) } else { var431 } ;
            UInt64(115) < UInt64(121)
        } else { // block id: 439
            var441;
            var444;
            false
        }) { // block id: 447
            if (true) { (var452, 62, optionalParam266) } else { (Int16(124), 55, 48.0) } ;
            var461;
            83 >= 104
        } else { // block id: 466
            var374
        })
    }
;
    public static let var544 : Int32 = Int32(-9);
    public static var var1769 : Class190 = Class190();
    private static func func1825(namedParam1826 ! : Option<Option<Int32>>) : Rune { // block id: 1827
        match {
            case var1249 || try { // block id: 1832
            var1249
        } finally { // block id: 1834
            false
        } => 
            var loopTimeVar1842 : Int64 = 0;
            do {
                loopTimeVar1842++;
                ()
            } while ((false) && loopTimeVar1842 < 100 ) ;
            if (false) { // block id: 1845
                var441;
                ()
            };
            '3'
            case _ => 
            var loopTimeVar1871 : Int64 = 0;
            while ((var560) && loopTimeVar1871 < 100 ) {
                loopTimeVar1871++;
                if (false) { var229 } else { Option<Array<Unit>>.Some(var1858) } 
            };
            match (var1874) {
                case caseVar1878 : Array<UInt8> => 
                    if (var560) { Option<Option<Range<UInt32>>>.Some(Option<Range<UInt32>>.Some((UInt32(5)&127..=var288&127:(var1584|1)))) } else { Option<Option<Range<UInt32>>>.Some(Option<Range<UInt32>>.None) } ;
                    (var746&127..=var288&127:(var1584|1))
                
                case _ => 
                    ();
                    if (true) { Option<Bool>.None } else { var419 } ;
                    (UInt32(173)&127..=var288&127:(46|1))
                
            };
            if (false) { // block id: 1907
                var461
            } else { // block id: 1909
                ();
                if (var1249) { 'f' } else { var461 } 
            }
        }
    }
;
    public static var var1923 : Enum960 = Enum960.defaultValue;
    static let var1932 : ??Int32 = Option<Option<Int32>>.None;
    static let var2043 : Float32 = Float32(-63.0);
    public init(param1685 : Range<Int32>, param1686 : Rune) { // block id: 1687
        func func1689(param1690 : Rune, optionalParam1691 ! : (Range<Int16>) -> Option<Option<Bool>> = { lambdaParameter1694 : Range<Int16> => Option<Option<Bool>>.Some(((UInt16(136)&127..UInt16(150)&127:111|1) as Bool)) }, optionalParam1701 ! : Array<Option<Bool>> = [Option<Bool>.None, Option<Bool>.Some((Option<Int32>.Some(Int32(109)) is Option<Class190>)), ((((-38), Int8(-39), Int8(37), false, Int8(-8), UInt32(50)) is Float64) as Bool), (((UInt8(40)&127..UInt8(43)&127:(-55)|1), [UInt8(236), UInt8(74), UInt8(174), UInt8(90), UInt8(128), UInt8(132), UInt8(245), UInt8(102), UInt8(185), UInt8(53)], (Int32(-67)&127..=Int32(-30)&127:(77|1)), Float32(Float32(-60.0)), (Option<Int16>.Some(Int16(107)) as Unit), ()) as Bool), ([true, true, true, true, true, false, false, false, false, true] as Bool), (() as Bool), (Enum68<Range<UInt16>>.defaultValue as Bool), Option<Bool>.None, Option<Bool>.None, ((((-110)&127..94&127:88|1), Float64((-91.0)), Enum960.enumValue1038(((-65)&127..=4&127:((-36)|1))), Int16(-125), Int32(43), ()) as Bool)]) : Array<Class190> { // block id: 1762
            let var1783 : Option<((Range<Int8>, UInt64, Array<Bool>, (Int16, Int64, Float64)), (Int64, Int8, Int8, Bool, Int8, UInt32), Range<Int16>, UInt8)> = Option<((Range<Int8>, UInt64, Array<Bool>, (Int16, Int64, Float64)), (Int64, Int8, Int8, Bool, Int8, UInt32), Range<Int16>, UInt8)>.None;
            try { // block id: 1764
                var817;
                [this, var1769, this, Class190(), this, var1769, Class190(), this, var1769, this]
            } finally { // block id: 1779
                var441;
                match (var1783) {
                    case _ : Int64 => 
                        [var1769, var1769, Class190(), var1769, this, Class190(), this, Class190(), this, var1769]
                    
                    case _ => 
                        var var1803 : Float64 = (-26.0);
                        var1803 **= Float64(Int32(var1803) & 3);
                        var773 <<= ((var773) & 7);
                        if (var1249) { var1419 } else { [this, this, Class190(), var1769, this, this, Class190(), this, Class190(), this] } 
                    
                }
            }
        }
;
        func1689(func1825(namedParam1826 : try { // block id: 1916
            (var969, var1920, var1923, var282, Int32(-123), ());
            var441;
            if (false) { var1932 } else { Option<Option<Int32>>.Some(Option<Int32>.None) } 
        } catch (e: Exception) { // block id: 1936
            if (var1249) { Option<Option<Int32>>.None } else { var1932 } 
        } finally { // block id: 1941
            Option<Option<Int32>>.None
        }), optionalParam1691 : { lambdaParameter1945 : Range<Int16> => (match (var444) {
            case caseVar1958 => 
                var1961;
                ((UInt8(210)&127..=UInt8(147)&127:(-55)|1), (-101.0), [true, true, true, true, false, false, true, false, false, true], Int16(-90), Option<Option<Option<Bool>>>.Some(Option<Option<Bool>>.None))
            
            case _ => 
                var var1974 : Float32 = Float32(Float32(Float32(-70.0)));
                var1974 %= Float32((Int32(Float32(-13.0))) | 1);
                ();
                let var1990 : (Range<UInt8>, Float64, Array<Bool>, Int16, Option<Option<Option<Bool>>>) = ((UInt8(62)&127..UInt8(188)&127:114|1), Float64(Float32(Float32(Float32(-5.0)))), [([UInt8(171), UInt8(153), UInt8(198), UInt8(180), UInt8(176), UInt8(224), UInt8(148), UInt8(51), UInt8(125), UInt8(38)] is Array<UInt8>), true, false, (((UInt64(201)&127..UInt64(105)&127:(-22)|1) as Option<Int32>) is Option<Bool>), false, true, (UInt8(129) is ((Range<Int8>, UInt64, Array<Bool>, (Int16, Int64, Float64)), (Int64, Int8, Int8, Bool, Int8, UInt32), Range<Int16>, UInt8)), false, (Int8(122) is (Range<UInt8>, Float64, Array<Bool>, Int16, Option<Option<Option<Bool>>>)), (Int8(UInt8(163)) is Range<Int32>)], Int16(44), Option<Option<Option<Bool>>>.None);
                if (var1249) { ((UInt8(96)&127..=UInt8(118)&127:(-48)|1), (-73.0), var129, var282, Option<Option<Option<Bool>>>.Some(var1432)) } else { var1990 } 
            
        }[4] ?? Option<Option<Bool>>.None) });
        match (var2021) {
            case caseVar2025 : Option<Option<Range<UInt32>>> => 
                [(), (), (), (), (), (), (), (), (), ()]
            
            case caseVar2030 => 
                param1686;
                var1419;
                if (true) { [(), (), (), (), (), (), (), (), (), ()] } else { [(), (), (), (), (), (), (), (), (), ()] } 
            
            case caseVar2040 => 
                var2043;
                var1858
            
            case caseVar2048 => 
                if (false) { (var1457&127..=var1457&127:(var310|1)) } else { var431 } ;
                (UInt64(160)&127..=UInt64(146)&127:(-2)|1);
                var1858
            
            case _ => 
                if (var560) { [var1442, (), var1961, (), var1442, var1961, var817, (), (), ()] } else { [(), (), (), (), (), (), (), (), (), ()] } 
            
        };
        (try { // block id: 2081
            ();
            Option<Array<Option<Bool>>>.Some([var2086, Option<Bool>.Some(var1249), var419, Option<Bool>.None, var419, var419, Option<Bool>.None, var2086, Option<Bool>.None, Option<Bool>.Some(true)])
        } finally { // block id: 2099
            ();
            ();
            Option<Array<Option<Bool>>>.None
        } ?? match (Option<Array<Option<Bool>>>.None) {
            case caseVar2107 => 
                let var2110 : ((Range<Int8>, UInt64, Array<Bool>, (Int16, Int64, Float64)), (Int64, Int8, Int8, Bool, Int8, UInt32), Range<Int16>, UInt8) = (((Int8(UInt8(44))&127..=Int8(UInt8(4))&127:(Int64(Int16(-44))|1)), UInt64(UInt64(140)), [true, ([false, false, false, true, false, false, true, true, true, false] is Int16), false, true, ("""
xFZ_:
ETNbH
""" is Option<Array<Unit>>), false, (Option<Bool>.Some(false) is String), (((-77)&127..=(-45)&127:(81|1)) is Enum68<Range<UInt16>>), (Option<Array<Unit>>.None is Option<Option<Option<Bool>>>), (0 is (Range<Int8>, UInt64, Array<Bool>, (Int16, Int64, Float64)))], (Int16(Int8(-15)), 81, Float64(Float32(107.0)))), (Int64(UInt8(UInt8(5))), Int8(117), Int8(Int8(Int8(-115))), false, Int8(Int8(Int8(-98))), UInt32(UInt16(UInt16(33)))), (Int16(-69)&127..=Int16(76)&127:(-12)|1), UInt8(103));
                var2110;
                var288 >> ((UInt32(164)) & 7);
                [var419, var419, var2086, Option<Bool>.Some(false), var2186, var2186, var2186, Option<Bool>.None, var2086, Option<Bool>.None]
            
            case _ => 
                var288 | var288;
                [Option<Bool>.None, Option<Bool>.Some(var560), Option<Bool>.Some(var560), Option<Bool>.Some(true), var2086, Option<Bool>.None, Option<Bool>.Some(var1249), Option<Bool>.Some(var1249), var2186, Option<Bool>.None]
            
        })
    }
;
    static let var2473 : Option<Option<Option<Bool>>> = Option<Option<Option<Bool>>>.None;
    public init(param514 : Array<Bool>, optionalParam515 ! : Range<Int8> = (Int8(Int8(14))&127..Int8(Int8(-85))&127:(87|1)), namedParam522 ! : Option<Unit>, namedParam523 ! : (Range<Int8>, UInt64, Array<Bool>, (Int16, Int64, Float64))) { // block id: 524
        let var2318 : (UInt8) -> Range<Int16> = func1561;
        var var2362 : Range<UInt32> = (UInt32(82)&127..=UInt32(Int8(UInt8(UInt8(25))))&127:(Int64(UInt32(Int32(UInt16(130))))|1));
        ((var2322 + UInt8(4)|>(var2318~>func1446)) ?? ((Option<Option<Option<Bool>>>.Some(Option<Option<Bool>>.Some(Option<Bool>.Some(true))) ?? Option<Option<Bool>>.None) ?? match (UInt16(188)) {
            case caseVar2337 : UInt64 => 
                if (var1249) { var2086 } else { Option<Bool>.Some(var2344) } 
            
            case caseVar2350 : (Array<Bool>, UInt64) => 
                var2186
            
            case caseVar2355 => 
                ();
                if (var560) { Option<Range<UInt32>>.Some(var2362) } else { var2021 } ;
                Option<Bool>.None
            
            case _ => 
                var2086
            
        }));
        if (try { // block id: 2380
            ();
            ();
            true
        } finally { // block id: 2384
            var1961;
            var560 || false
        }) { // block id: 2389
            (() as ((Range<Int8>, UInt64, Array<Bool>, (Int16, Int64, Float64)), (Int64, Int8, Int8, Bool, Int8, UInt32), Range<Int16>, UInt8));
            var loopTimeVar2398 : Int64 = 0;
            while ((true) && loopTimeVar2398 < 100 ) {
                loopTimeVar2398++;
                ();
                ()
            };
            var loopTimeVar2403 : Int64 = 0;
            do {
                loopTimeVar2403++;

            } while ((false) && loopTimeVar2403 < 100 ) 
        } else if ((Option<Bool>.None ?? var560)) { // block id: 2407
            match (var2043) {
                case 56.0 | 120.0 | -62.0 | -78.0 => 
                    (UInt8(96)&127..=UInt8(126)&127:110|1)
                
                case _ : Option<Array<Option<Bool>>> => 
                    [UInt8(207), UInt8(177), UInt8(63), UInt8(236), UInt8(241), UInt8(22), UInt8(79), UInt8(45), UInt8(208), UInt8(64)];
                    if (var2344) { (UInt8(202)&127..=UInt8(242)&127:(var310|1)) } else { (UInt8(45)&127..=var773&127:(62|1)) } 
                
                case -63.0 | 55.0 => 
                    var2322 * var773;
                    Option<Option<Range<UInt32>>>.None;
                    var1569
                
                case 78.0 => 
                    (UInt8(250)&127..=UInt8(204)&127:(var1584|1))
                
                case _ => 
                    (UInt8(237)&127..=UInt8(95)&127:(76|1))
                
            };
            var loopTimeVar2454 : Int64 = 0;
            while ((var1249) && loopTimeVar2454 < 100 ) {
                loopTimeVar2454++;
                true
            };
            try (resource = Class855()) { // block id: 2456
                var1442;
                ()
            } finally { // block id: 2459
                var444 &= Int32(17);
                var1961
            }
        };
        (if ((var2468 is Range<UInt64>)) { (var2473 ?? var1432) } else { (Option<Option<Option<Bool>>>.None ?? Option<Option<Bool>>.None) }  ?? ((UInt8(251) as Option<Bool>) ?? var2488[7]))
    }

    public func isClosed(): Bool { return false }
    public func close(): Unit {}
}


public func func194(param195 : Array<Unit>, optionalParam196 ! : Unit = (), optionalParam198 ! : Option<Array<Unit>> = Option<Array<Unit>>.Some([(), (), (), (), (), (), (), (), (), ()]), namedParam201 ! : Array<Bool>) : Class190 { // block id: 202
    let var212 : Array<Class190> = Array<Class190>(10){ i => Class190() };
    (Option<Class190>.Some(var212[5]) ?? Class190())
}






func func588(optionalParam589 ! : Int16 = Int16(11), optionalParam591 ! : Range<Int8> = (Int8(UInt8(Int8(30)))&127..Int8(Int8(1))&127:(Int64(Int32(Int8(-91)))|1)), namedParam601 ! : Range<Int32>) : Unit { // block id: 602
    func func604(optionalParam605 ! : Option<Unit> = (Option<Bool>.Some(true) as Unit), optionalParam609 ! : UInt16 = UInt16(Int16(Int16(UInt8(112))))) : Option<Array<Unit>> { // block id: 614
        var var616 : (Range<Int8>, UInt64, Array<Bool>, (Int16, Int64, Float64)) = ((Int8(21)&127..=Int8(-81)&127:(-71)|1), UInt64(230), [false, true, true, true, true, false, true, true, true, true], (Int16(Int8(-38)), (-62), Float64(Float64(Float32(119.0)))));
        var616;
        var loopTimeVar653 : Range<UInt64> = (UInt64(64)&127..=UInt64(UInt64(19))&127:((-110)|1));
        for (i in loopTimeVar653 where [var560, var560, false, var560, false, false, false, var560, true, true][5]) {
            (optionalParam589&127..Int16(-58)&127:(74|1));
            var var649 : Int8 = Int8(UInt8(UInt8(146)));
            var649--
        };
        let var681 : (Int16, Int64, Float64) = (Int16(UInt16(UInt16(UInt16(194)))), Int64(Int64(UInt32(157))), (-10.0));
        var var705 : ?Array<Unit> = ((28, Int8(-35), Int8(-25), true, Int8(107), UInt32(10)) as Array<Unit>);
        (var667[0] ?? ((((-41)&127..=(-31)&127:81|1), var681, Option<Option<Array<Unit>>>.Some(Option<Array<Unit>>.Some([(), (), (), (), (), (), (), (), (), ()])), var310, "OA<[0ut%1d", (UInt64(103)&127..=UInt64(234)&127:6|1), (Int16(-2), (-111), 48.0))[2] ?? if (false) { var705 } else { Option<Array<Unit>>.None } ))
    }
;
    var var723 : Int64 = 35;
    var var794 : Class190 = Class190();
    func604(optionalParam605 : Option<Unit>.Some(match ((Int8(45)&127..=Int8(-4)&127:(-90)|1)) {
        case _ : Range<UInt32> => 
            var723 *= (-120)
        
        case caseVar728 : Array<Class190> => 
            var var732 : UInt8 = UInt8(151);
            var732 = var732;
            'c';
            ()
        
        case _ => 
            var var742 : UInt32 = UInt32(UInt16(152));
            var742 = var746
        
        case _ => 
            ();
            ()
        
    }), optionalParam609 : match (match (Option<Unit>.None) {
            case caseVar757 => 
                var444 ^= Int32(-15);
                if (var560) { Option<Array<Unit>>.None } else { var229 } ;
                Float32(34.0)
            
            case caseVar769 => 
                var773 ** (var773 & 3);
                var773 -= UInt8(219);
                let var782 : Float32 = Float32(Float32(Float32(108.0)));
                Float32(99.0) + var782
            
            case caseVar788 : Array<Unit> => 
                Float32(35.0)
            
            case _ => 
                var794;
                ((-102)&127..=6&127:(35|1));
                Float32(20.0)
            
        }) {
        case _ => 
            53.0 > (-25.0);
            var var807 : Unit = ();
            var807;
            var var811 : UInt16 = UInt16(Int16(-7));
            var811 << ((var811) & 7)
        
    });
    Enum68<Range<UInt16>>.defaultValue;
    var817
}


public open class Class855 <: Resource {
    public init() { // block id: 857

    }
;
    public static var var860 : UInt16 = UInt16(206)
    public func isClosed(): Bool { return false }
    public func close(): Unit {}
}

public enum Enum960 {
    defaultValue |
    enumValue1038(Range<Int64>)
}
public func func831(param832 : Range<UInt64>) : Int64 { // block id: 833
    let var842 : ??Int32 = Option<Option<Int32>>.Some((Int16(Int8(-95)) as Int32));
    var var848 : ?Int32 = Option<Int32>.Some(Int32(UInt8(Int8(Int8(-62)))));
    var var901 : Array<Bool> = [((UInt32(23)&127..UInt32(207)&127:(-111)|1) is Option<Unit>), ((Int16(-37), Int64(Int32(89)), (-39.0)) is Option<Array<Unit>>), (96.0 is Range<Int64>), (Int32(Int8(89)) is (Int16, Int64, Float64)), (() is Range<UInt16>), ((Int32(-107)&127..Int32(-109)&127:17|1) is Class190), ((UInt16(197)&127..=UInt16(79)&127:(-46)|1) is Range<UInt16>), false, false, ((UInt16(92)&127..=UInt16(185)&127:(-2)|1) is Array<Unit>)];
    var var945 : Bool = (UInt32(Int32(Int32(UInt32(167)))) is Range<Int64>);
    try { // block id: 835
        (var842 ?? var848);
        Class855.var860;
        ([true, true, true, false, true, false, true, true, false, true], UInt64(144))[0]
    } catch (e: Exception) { // block id: 868
        match (UInt32(220)) {
            case 48 => 
                let var875 : Unit = ();
                var875;
                var var891 : Array<Bool> = [true, true, false, false, false, false, false, false, false, true];
                if (false) { [true, var560, var560, true, false, true, var560, var560, true, false] } else { var891 } 
            
            case caseVar895 : Int64 => 
                Option<Int32>.None;
                if (true) { var901 } else { [false, var560, false, var560, false, var560, true, var560, false, var560] } 
            
            case _ => 
                if (true) { [true, true, true, false, true, false, true, false, false, true] } else { [var560, var945, var945, true, false, var560, false, true, var560, false] } 
            
        }
    };
    let var987 : Unit = ();
    var var995 : Enum960 = Enum960.defaultValue;
    var var1019 : UInt64 = UInt64(196);
    var var1022 : Array<Bool> = [true, true, false, false, false, false, true, false, true, true];
    let var1068 : Int64 = Int64(UInt64(Int16(UInt8(UInt8(149)))));
    match (match {
            case var945 => 
            (var969, 93.0, Enum960.defaultValue, var282, Int32(-6), ())
            case var945 => 
            var987;
            var var998 : Int16 = Int16(123);
            if (false) { (var969, (-86.0), var995, var998, Int32(-20), ()) } else { var1003 } 
            case _ => 
            let var1016 : Range<Int8> = (Int8(93)&127..=Int8(-126)&127:(-9)|1);
            var var1027 : Int64 = Int64(UInt16(149));
            (var1016, var1019, var1022, (Int16(-6), var1027, (-44.0)));
            (var901, UInt64(168));
            (((-105)&127..=98&127:(-6)|1), 45.0, Enum960.enumValue1038(var969), Int16(-50), var444, var987)
        }[2]) {
        case caseVar1047 : Array<Option<Bool>> => 
            ();
            var var1051 : Range<Int8> = (Int8(10)&127..Int8(125)&127:(-109)|1);
            var1051;
            (-48)
        
        case caseVar1056 : Rune => 
            ();
            (-63)
        
        case _ => 
            var var1064 : Float64 = (-103.0);
            var1064 -= (-66.0);
            var1068
        
    }
}

public func func584(param585 : Range<UInt32>) : Unit { // block id: 586
    let var1075 : (Range<UInt64>) -> Int64 = func831;
    func588(namedParam601 : (try { // block id: 821
        var817;
        var444
    } finally { // block id: 824
        UInt64(51);
        Int32(115) % ((var444) | 1)
    }&127..Int32(-55)&127:(((UInt64(39)&127..UInt64(238)&127:(-79)|1)|>var1075)|1)));
    var773 %= (([var773, var773, UInt8(166), var773, var773, UInt8(129), var773, var773, var773, UInt8(146)][0]) | 1);
    let var1100 : (Range<UInt8>, Array<UInt8>, Range<Int32>, Float32, Option<Unit>, Unit) = ((UInt8(Int8(-61))&127..UInt8(63)&127:(Int64(Int8(71))|1)), [UInt8(9), UInt8(131), UInt8(223), UInt8(172), UInt8(54), UInt8(133), UInt8(20), UInt8(137), UInt8(115), UInt8(89)], (Int32(-29)&127..=Int32(84)&127:(107|1)), Float32(85.0), ((Int16(UInt16(176))&127..=Int16(Int16(72))&127:((-48)|1)) as Unit), ());
    var loopTimeVar1124 : Int64 = 0;
    do {
        loopTimeVar1124++;
        var1100[4]
    } while ((var560) && loopTimeVar1124 < 100 ) 
}



public func func1154<T0>(param1155 : (Range<Int8>, UInt64, Array<Bool>, (Int16, Int64, Float64))) : Range<UInt32> where T0 <: Option<Int32> { // block id: 1156
    ();
    (UInt32(207)&127..UInt32(98)&127:37|1)
}

public func func580(param581 : UInt16) : Option<Option<Bool>> { // block id: 582
    var var1137 : ??Range<UInt32> = Option<Option<Range<UInt32>>>.Some((Option<Bool>.Some(true) as Range<UInt32>));
    let var1144 : Range<UInt32> = (UInt32(Int32(Int16(Int16(31))))&127..=UInt32(46)&127:(Int64(UInt16(11))|1));
    let var1160 : ((Range<Int8>, UInt64, Array<Bool>, (Int16, Int64, Float64))) -> Range<UInt32> = { lambdaParameter1163 : (Range<Int8>, UInt64, Array<Bool>, (Int16, Int64, Float64)) => (UInt32(133)&127..=UInt32(1)&127:104|1) };
    var var1167 : (Range<Int8>, UInt64, Array<Bool>, (Int16, Int64, Float64)) = ((Int8(37)&127..Int8(75)&127:(-88)|1), UInt64(Int64(UInt16(UInt8(219)))), [true, false, true, true, true, false, false, false, false, false], (Int16(87), Int64(UInt64(173)), Float64(Float32(Float32(-24.0)))));
    ((var1137 ?? Option<Range<UInt32>>.Some(var1144)) ?? (var1167|>var1160))|>func584;
    var var1187 : ?Array<Unit> = (([false, (Int8(-121) is Range<UInt8>), true, false, false, (Enum68<Range<UInt16>>.defaultValue is Range<Int16>), (Option<Option<Range<UInt32>>>.None is Int8), ((Int32(59)&127..=Int32(-32)&127:(-6)|1) is (Range<UInt8>, Array<UInt8>, Range<Int32>, Float32, Option<Unit>, Unit)), (((Int8(61)&127..Int8(75)&127:((-68)|1)), UInt64(102), [true, false, false, false, true, false, true, true, true, true], (Int16(34), (-90), (-20.0))) is Float32), ((UInt16(90)&127..=UInt16(101)&127:((-77)|1)) is Enum960)], UInt64(144)) as Array<Unit>);
    var var1227 : Bool = true;
    var var1240 : Int8 = Int8(Int8(UInt8(14)));
    let var1295 : (Option<Option<Bool>>, Range<Int8>) = ((((Int16(123), (-64), (-103.0)) as Unit) as Option<Bool>), (Int8(-44)&127..=Int8(Int8(UInt8(92)))&127:(Int64(Int16(18))|1)));
    let var1312 : ??Bool = ((107&127..16&127:107|1) as Option<Bool>);
    if (match (var1187) {
        case caseVar1223 : Range<UInt8> => 
            var1227 ||= var560;
            Float32(-7.0) < Float32(-99.0)
        
        case caseVar1235 => 
            Int8(-121) < var1240
        
        case _ => 
            if (var1249) { var461 } else { var461 } ;
            ((UInt8(140)&127..UInt8(159)&127:(49|1)), [var773, UInt8(163), var773, UInt8(215), UInt8(196), UInt8(237), UInt8(205), UInt8(11), UInt8(5), var773], (Int32(30)&127..=var444&127:(71|1)), Float32(29.0), var150, ());
            var1227 && true
        
        case caseVar1283 : Bool => 
            false
        
        case _ => 
            ();
            var1249
        
    }) { // block id: 1290
        var817;
        if (false) { var1295 } else { (var1312, (Int8(-34)&127..=Int8(83)&127:38|1)) } 
    } else { // block id: 1316
        var1295
    }[0]
}

func func536(param537 : Int8) : Option<Option<Bool>> { // block id: 538
    try { // block id: 540
        Class190.var544
    } finally { // block id: 546
        (Option<Int32>.None ?? Int32(30))
    };
    var var573 : UInt32 = UInt32(253);
    var loopTimeVar578 : Int64 = 0;
    while (((if (true) { Option<Bool>.Some(var560) } else { Option<Bool>.Some(var560) }  ?? (var310, param537, Int8(-46), var560, param537, var573)[3])) && loopTimeVar578 < 100 ) {
        loopTimeVar578++;

    };
    var var1324 : Float32 = Float32(-32.0);
    if (Float32(-18.0) != var1324) { // block id: 1326
        var817;
        if (var560) { (UInt8(0)&127..=UInt8(225)&127:(-80)|1) } else { (UInt8(155)&127..=UInt8(35)&127:(-27)|1) } ;
        var1333
    } else if ([true, var560, var560, var560, false, var1249, true, var560, true, true][5]) { // block id: 1348
        ();
        var817;
        var1333
    } else { // block id: 1352
        UInt16(174)
    }|>func580
}

func func531(param532 : UInt8) : Option<Option<Bool>> { // block id: 533
    match ((((-81), var1384, Int8(40), var560, var1384, UInt32(135))[4]|>{ lambdaParameter1356 : Int8 => let var1371 : ??Bool = ((((-106) as Option<Bool>), (Int8(UInt8(206))&127..=Int8(-49)&127:(23|1))) as Option<Bool>); (try { // block id: 1360
            Class855()
        } finally { // block id: 1362
            if (false) { (Option<Option<Bool>>.Some(Option<Bool>.None), (Int8(-42)&127..Int8(63)&127:66|1)) } else { (var1371, (Int8(1)&127..var1384&127:(122|1))) } ;
            if (var1249) { var1391 } else { Class855() } 
        } as Option<Bool>) })) {
        case caseVar1405 => 
            if (false) { Option<Unit>.Some(var817) } else { var150 } ;
            Option<Option<Bool>>.Some(var419)
        
        case _ : UInt32 => 
            Class855();
            var1419;
            var1432
        
        case caseVar1436 : (Range<Int64>, (Int16, Int64, Float64), Option<Option<Array<Unit>>>, Int64, String, Range<UInt64>, (Int16, Int64, Float64)) => 
            Option<Option<Bool>>.None
        
        case _ => 
            var1442;
            var1432
        
    }
}

func func1446(param1447 : Range<Int16>) : Option<Option<Bool>> { // block id: 1448
    let var1454 : ??Array<Unit> = Option<Option<Array<Unit>>>.None;
    var loopTimeVar1488 : Int64 = 0;
    while ((match (try { // block id: 1452
            var1454;
            var1457;
            if (var1249) { var1464 } else { var1464 } 
        } catch (e: Exception) { // block id: 1469
            var1442;
            let var1476 : Class190 = Class190();
            if (true) { Option<Class190>.None } else { Option<Class190>.Some(var1476) } 
        }) {
        case caseVar1480 => 
            var1249
        
        case _ => 
            true
        
    }) && loopTimeVar1488 < 100 ) {
        loopTimeVar1488++;

    };
    try (resource = Class190()) { // block id: 1490

    } catch (e: Exception) { // block id: 1491
        var1493;
        let var1512 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
        var1512[7]
    } finally { // block id: 1525
        try { // block id: 1527
            var817;
            (Int8(49)&127..Int8(-50)&127:(-125)|1)
        } catch (e: Exception) { // block id: 1530
            var817;
            ();
            if (false) { (Int8(-74)&127..var1384&127:((-90)|1)) } else { var1540 } 
        };
        if (true) { // block id: 1547
            ();
            var var1551 : UInt16 = UInt16(Int16(Int16(120)));
            var1551 >>= ((UInt16(198)) & 7)
        }
    };
    func531([UInt8(134), UInt8(77), UInt8(104), UInt8(72), UInt8(62), UInt8(10), UInt8(4), UInt8(191), UInt8(41), UInt8(245)][6])
}




func func1561(param1562 : UInt8) : Range<Int16> { // block id: 1563
    [(), (), (), (), (), (), (), (), (), ()][3];
    match (var1569) {
        case _ : (Range<Int64>, (Int16, Int64, Float64), Option<Option<Array<Unit>>>, Int64, String, Range<UInt64>, (Int16, Int64, Float64)) => 
            ()
        
        case _ => 
            var1584 |= (-88)
        
    };
    var var2232 : Bool = true;
    (Option<((Range<Int8>, UInt64, Array<Bool>, (Int16, Int64, Float64)), (Int64, Int8, Int8, Bool, Int8, UInt32), Range<Int16>, UInt8)>.Some((var1597, ((-100), var1384, var1384, var1249, var1384, var746), (Int16(36)&127..=Int16(93)&127:9|1), UInt8(184))) ?? if (var560) { // block id: 1666
        ();
        var var1675 : Bool = ([Class190(), Class190(), Class190(), Class190(), Class190(), Class190((Int32(-15)&127..Int32(-103)&127:33|1), 'r'), Class190((Int32(121)&127..=Int32(81)&127:((-67)|1)), 'p'), Class190(), Class190(), Class190()] is Enum960);
        let var2235 : Bool = ([false, false, true, false, true, false, true, true, true, true] is Option<Option<Range<UInt32>>>);
        let var2239 : (Int16, Int64, Float64) = (Int16(UInt16(UInt16(Int8(49)))), Int64(UInt16(UInt8(155))), Float64(Float32(64.0)));
        ((var1540, UInt64(152), [var560, var1675, var560, var1249, var1249, true, var1675, false, var2232, var2235], var2239), var1493, (Int16(-61)&127..=Int16(-5)&127:((-11)|1)), param1562)
    } else { // block id: 2256
        var1442;
        var var2272 : Int8 = Int8(Int8(119));
        let var2280 : Range<Int16> = (Int16(35)&127..=Int16(-84)&127:64|1);
        if (var560) { ((var1540, var1457, var129, (Int16(-8), (-26), var1920)), ((-97), var2272, var2272, var2232, Int8(8), UInt32(159)), var2280, param1562) } else { var2284 } 
    })[2]
}




public func func506(param507 : Float32, namedParam508 ! : Array<Unit>, optionalParam509 ! : Array<Class190> = Array<Class190>(10){ i => Class190() }, namedParam2607 ! : Option<Unit>) : Unit { // block id: 2608
    ();
    let var2617 : Option<Array<Unit>> = (((-27)&127..Int64(UInt8(2))&127:(Int64(UInt16(211))|1)) as Array<Unit>);
    (var2617 ?? if (var2344) { [(), (), (), var1442, var1442, var817, var1442, (), (), ()] } else { [var1442, (), (), var1442, var1442, (), var1442, (), var1442, ()] } )[8];
    let var2658 : ???Range<UInt32> = Option<Option<Option<Range<UInt32>>>>.Some(Option<Option<Range<UInt32>>>.None);
    var loopTimeVar2678 : Int64 = 0;
    while ((((var2658 ?? Option<Option<Range<UInt32>>>.None) is UInt16)) && loopTimeVar2678 < 100 ) {
        loopTimeVar2678++;
        [var817, (), var817, var817, var1442, var1442, var1442, var1442, (), ()][6];
        var1442
    }
}

func func185(param186 : Option<Unit>) : Unit { // block id: 187
    let var469 : Range<Int8> = (Int8(UInt8(UInt8(Int8(105))))&127..=Int8(Int8(17))&127:(93|1));
    var var484 : Class190 = Class190();
    let var489 : Class190 = Class190();
    var var498 : Range<Int32> = (Int32(103)&127..Int32(Int8(-58))&127:((-97)|1));
    if (func194([(), (), (), (), (), (), (), (), (), ()], optionalParam198 : var229, namedParam201 : var232).func264(namedParam265 : var469, optionalParam266 : var479, namedParam269 : [var484, var484, var484, var489, var484, Class190(), Class190(), Class190(), var484, Class190()], namedParam270 : var498)) { // block id: 504
        func506(Float32(33.0), namedParam508 : var2681, namedParam2607 : var150)
    };
    true;
    let var2699 : Bool = (Option<Option<Bool>>.Some(Option<Bool>.None) is Array<UInt8>);
    let var2873 : (Int64, Int8, Int8, Bool, Int8, UInt32) = (Int64(UInt64(70)), Int8(71), Int8(34), false, Int8(69), UInt32(233));
    ((match (var2699) {
        case caseVar2705 : Range<UInt16> => 
            [var773, var773, UInt8(112), UInt8(42), UInt8(180), var773, UInt8(59), var773, var773, UInt8(239)];
            "R8s$Za{`Gn,";
            var var2741 : (Int64, Int8, Int8, Bool, Int8, UInt32) = (Int64(UInt64(Int64(UInt32(95)))), Int8(Int8(Int8(51))), Int8(UInt8(UInt8(UInt8(222)))), true, Int8(-60), UInt32(59));
            if (var1249) { (((Int8(-105)&127..Int8(93)&127:72|1), var1457, [var2344, false, var1249, false, true, false, var175, var1249, var2344, var2699], (Int16(16), 2, var479)), var2741, var2758, var773) } else { (var2768, var2741, var2758, UInt8(61)) } 
        
        case caseVar2819 => 
            var var2822 : ((Range<Int8>, UInt64, Array<Bool>, (Int16, Int64, Float64)), (Int64, Int8, Int8, Bool, Int8, UInt32), Range<Int16>, UInt8) = (((Int8(-45)&127..Int8(93)&127:(Int64(UInt32(110))|1)), UInt64(220), [false, false, false, false, false, true, false, true, false, true], (Int16(-29), Int64(UInt16(97)), Float64((-30.0)))), (Int64(Int16(-103)), Int8(UInt8(8)), Int8(Int8(UInt8(208))), ([(), (), (), (), (), (), (), (), (), ()] is (Int64, Int8, Int8, Bool, Int8, UInt32)), Int8(-69), UInt32(70)), (Int16(-6)&127..Int16(97)&127:58|1), UInt8(Int8(-30)));
            var2822
        
        case _ => 
            var var2867 : UInt16 = UInt16(UInt8(140));
            var2867++;
            (var2768, var2873, var2758, var773)
        
    } as Unit) ?? var1442)
}


func func141(param142 : Option<Array<Unit>>) : Bool { // block id: 143
    let var155 : Int16 = Int16(UInt8(73));
    var var162 : UInt16 = UInt16(UInt16(UInt16(153)));
    var loopTimeVar168 : Int64 = 0;
    (var150 ?? while ((var155 <= var155) && loopTimeVar168 < 100 ) {
        loopTimeVar168++;
        var162 &= UInt16(186)
    });
    if (match {
        case (false is Int64) => 
        var175
        case _ => 
        false
    }) { // block id: 182
        ();
        var2887|>func185
    };
    var var3037 : Bool = false;
    match ((try { // block id: 2897
            var1442;
            if (var175) { var2902 } else { var2902 } 
        } finally { // block id: 2905
            Option<Unit>.None;
            var2902
        } ?? if (var1249) { // block id: 2910
            if (false) { (var2768, ((-11), var1384, Int8(-85), var175, Int8(92), UInt32(178)), var2758, UInt8(32)) } else { (var2768, var2927, var2758, UInt8(89)) } 
        } else if (var2344) { // block id: 2941
            var1384;
            var1442;
            var2945
        } else { // block id: 3010
            var817;
            var2344 ||= var2344;
            var2945
        })) {
        case ((caseVar3018 : Option<Option<Option<Range<UInt32>>>>,caseVar3019 : Option<((Range<Int8>, UInt64, Array<Bool>, (Int16, Int64, Float64)), (Int64, Int8, Int8, Bool, Int8, UInt32), Range<Int16>, UInt8)>,_ : Option<Unit>,caseVar3020),caseVar3021,caseVar3022 : Float32,caseVar3023) => 
            ();
            var2344
        
        case caseVar3029 : Range<UInt32> => 
            false
        
        case _ => 
            ();
            ();
            var3037
        
    }
}

func func21(param22 : Bool) : Int64 { // block id: 23
    var var33 : Option<Array<Bool>> = ('P' as Array<Bool>);
    var var55 : Unit = ();
    let var90 : Bool = false;
    let var123 : Unit = ();
    let var3048 : Option<Array<Bool>> = ((Option<Array<Bool>>.None as Array<Unit>) as Array<Bool>);
    func func134<T0>(optionalParam135 ! : Float64 = 67.0, namedParam137 ! : Rune) : Unit where T0 <: Option<Option<Option<Range<UInt32>>>> { // block id: 138
        var loopTimeVar3062 : Int64 = 0;
        do {
            loopTimeVar3062++;
            try { // block id: 3045
                var129;
                var3048;
                var1384 << ((Int8(-62)) & 7)
            } finally { // block id: 3055
                ();
                var1384
            };
            (Option<Unit>.None ?? ())
        } while (((var3041|>func141)) && loopTimeVar3062 < 100 ) 
    }
;
    let var3065 : Rune = 'z';
    let var3072 : Int32 = Int32(124);
    func func60() : Range<UInt16> { // block id: 61
        var var95 : Bool = true;
        var var106 : ?Array<Unit> = (((Int8(-19) as Array<Unit>) as Array<Bool>) as Array<Unit>);
        (match (Enum68<Range<UInt16>>.defaultValue) {
            case _ : Range<Int8> => 
                ();
                if (param22) { """
f\"eT4
~|Iw*
""" } else { "KLkjkha{s3/" } ;
                Option<Unit>.None
            
            case _ => 
                ();
                [false, true, false, param22, param22, var90, param22, var90, var95, false];
                Option<Unit>.None
            
        } ?? (var106 ?? [(), (), (), (), (), (), (), (), (), ()])[5]);
        var loopTimeVar3084 : Range<UInt64> = (UInt64(Int16(Int8(86)))&127..=UInt64(Int8(117))&127:((-54)|1));
        for (i in loopTimeVar3084 where match (var118) {
            case _ => 
                var123;
                if (true) { [true, true, true, true, true, false, true, true, true, false] } else { var129 } 
            
        }[1]) {
            func134<Option<Option<Option<Range<UInt32>>>>>(optionalParam135 : var479, namedParam137 : var3065);
            if (true) { (Int32(116)&127..=var3072&127:(var310|1)) } else { var3076 } 
        };
        ([UInt16(196), UInt16(52), UInt16(127), UInt16(252), UInt16(94), UInt16(193), UInt16(10), UInt16(171), UInt16(85), UInt16(116)][6] - UInt16(var3100)&127..try { // block id: 3107
            UInt16(72)
        } catch (e: Exception) { // block id: 3109
            if (var175) { Option<Array<Unit>>.Some([(), (), (), (), (), (), (), (), (), ()]) } else { var3041 } ;
            UInt16(210)
        }&127:(var1584|1))
    }
;
    var loopTimeVar3118 : Int64 = 0;
    do {
        loopTimeVar3118++;
        match {
            case param22 => 
            Float32(-16.0)
            case _ => 
            var55;
            ();
            Float32(121.0)
        };
        func60()
    } while (((var33 ?? [false, param22, param22, param22, param22, true, false, true, param22, true])[0]) && loopTimeVar3118 < 100 ) ;
    var3120;
    Int64(UInt16(221))
}

main(): Int64 {
    try {
        [(), (), (), (), (), (), (), (), (), ()][9];
        let var3141 : (Bool) -> Int64 = func21;
        (true|>var3141) * Int64(var3100)
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_expected_expr_or_decl_in
// ASSERT: scan parse_unexpected_declaration_in_scope
// ASSERT: scan parse_trailing_closure_only_follow_name
// ASSERT: scan parse_expected_character
// ASSERT: scan parse_expected_left_brace


