/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output


public let var23 : ?Unit = Option<Unit>.None
public var var39 : ?Unit = Option<Unit>.None
public var var98 : UInt16 = UInt16(Int16(Int8(Int8(Int8(-78)))))
public var var110 : Float64 = (-88.0)
var var125 : Float64 = (-73.0)
var var141 : Bool = false
public let var146 : Unit = ()
public var var333 : UInt16 = UInt16(78)
public let var336 : Int64 = Int64(Int32(-69))
public var var384 : (Int16, Option<Unit>, UInt64, Bool, (Int32, Unit, UInt8, Range<UInt16>, Range<UInt32>, UInt32, UInt32, Range<Int64>, Range<Int32>), Float64) = (Int16(UInt8(UInt8(7))), ((Int64(UInt16(122))&127..=Int64(Int32(-84))&127:(83|1)) as Unit), UInt64(239), true, (Int32(Int16(-125)), (), UInt8(UInt8(240)), (UInt16(UInt16(124))&127..UInt16(Int16(107))&127:(Int64(Int8(59))|1)), (UInt32(222)&127..=UInt32(UInt8(209))&127:(Int64(Int8(99))|1)), UInt32(Int16(-112)), UInt32(158), ((-50)&127..=(-63)&127:76|1), (Int32(16)&127..Int32(9)&127:(Int64((-80))|1))), Float64(Float32(-16.0)))
public let var554 : Int32 = Int32(-8)
let var557 : Range<Int16> = (Int16(47)&127..=Int16(-119)&127:(-81)|1)
public let var561 : Enum542 = Enum542.defaultValue
public var var676 : Array<Option<Unit>> = Array<Option<Unit>>(10){ i => (Option<(Int32, Range<Int16>, Float64, Enum542)>.None as Unit) }
public let var780 : ??Range<Int64> = Option<Option<Range<Int64>>>.None
public var var784 : Range<Int64> = (90&127..=48&127:((-48)|1))
public var var809 : Int16 = Int16(-49)
public var var855 : Range<Int16> = (Int16(UInt16(221))&127..=Int16(UInt8(Int8(-101)))&127:(117|1))
public var var864 : Float64 = 90.0
public let var890 : UInt32 = UInt32(113)
public var var928 : UInt8 = UInt8(Int8(UInt8(218)))
public let var949 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
public var var965 : (Float32, Range<Int16>, UInt8, Int32, Int8, Int16, (Int32, Unit, UInt8, Range<UInt16>, Range<UInt32>, UInt32, UInt32, Range<Int64>, Range<Int32>)) = (Float32(-46.0), (Int16(17)&127..=Int16(115)&127:109|1), UInt8(Int8(Int8(121))), Int32(14), Int8(-75), Int16(UInt16(236)), (Int32(UInt32(21)), (), UInt8(187), (UInt16(33)&127..=UInt16(UInt8(67))&127:(Int64(UInt32(163))|1)), (UInt32(51)&127..UInt32(Int32(73))&127:(Int64(UInt64(181))|1)), UInt32(235), UInt32(160), (109&127..(-40)&127:101|1), (Int32(8)&127..=Int32(-38)&127:83|1)))
public var var1013 : Class301 = Class301()
public let var1032 : Bool = (UInt64(UInt32(162)) is Array<Option<Unit>>)
public let var1042 : Array<Bool> = [true, false, true, false, true, false, true, false, false, true]
public let var1056 : Float32 = Float32(Float32(-118.0))
public var var1098 : Unit = ()
public var var1145 : UInt32 = UInt32(Int8(Int8(22)))
public var var1153 : Int32 = Int32(UInt32(UInt8(Int8(UInt8(78)))))
public var var1215 : Bool = true
public let var1288 : Enum1280 = Enum1280.defaultValue
public let var1309 : Bool = true
public var var1335 : Bool = true
public var var1350 : Bool = ((Int16(125)&127..=Int16(UInt8(UInt8(207)))&127:(71|1)) is Range<Int16>)
public let var1399 : String = "rn.8U3sU1)"
public var var1403 : UInt64 = UInt64(231)
public let var1430 : Unit = ()
public var var1479 : Array<Enum1280> = Array<Enum1280>(10){ i => Enum1280.defaultValue }
public var var1551 : ?Unit = Option<Unit>.None
public var var1656 : Rune = 't'
public let var1885 : Range<UInt64> = (UInt64(43)&127..UInt64(UInt64(Int8(UInt8(69))))&127:(Int64(UInt64(230))|1))
public var var1962 : Array<Option<Float32>> = Array<Option<Float32>>(10){ i => ((Float32(88.0), (Int16(-45)&127..=Int16(-89)&127:39|1), UInt8(Int8(-63)), Int32(UInt8(211)), Int8(UInt8(247)), Int16(UInt16(189)), (Int32(12), (), UInt8(81), (UInt16(2)&127..=UInt16(253)&127:(54|1)), (UInt32(104)&127..=UInt32(83)&127:((-111)|1)), UInt32(227), UInt32(117), (17&127..(-22)&127:((-36)|1)), (Int32(-88)&127..Int32(25)&127:(114|1)))) as Float32) }
public let var2113 : ?Bool = Option<Bool>.None
public var var2124 : Bool = true
public let var2135 : Bool = (Int32(62) is (Float64) -> Array<Unit>)
public let var2184 : Range<Int16> = (Int16(-86)&127..Int16(-35)&127:(-97)|1)
public let var2260 : (Array<Bool>, UInt16, Array<Array<Bool>>, Unit, Int8, String, UInt32) = ([true, true, false, false, false, false, false, true, false, false], UInt16(229), [[false, true, true, true, false, true, false, false, false, true], [true, true, false, false, true, true, true, true, false, true], [true, false, true, false, false, ((Int32(-88), (), UInt8(75), (UInt16(71)&127..=UInt16(225)&127:((-41)|1)), (UInt32(230)&127..UInt32(33)&127:((-68)|1)), UInt32(221), UInt32(176), ((-28)&127..(-45)&127:(89|1)), (Int32(71)&127..Int32(78)&127:((-6)|1))) is Range<UInt64>), true, true, ((Float32(9.0), (Int16(-73)&127..=Int16(39)&127:69|1), UInt8(3), Int32(94), Int8(101), Int16(18), (Int32(-86), (), UInt8(169), (UInt16(204)&127..UInt16(79)&127:(18|1)), (UInt32(68)&127..=UInt32(222)&127:(58|1)), UInt32(50), UInt32(31), (74&127..59&127:71|1), (Int32(-69)&127..=Int32(-63)&127:55|1))) is Option<Unit>), false], [false, false, false, (((70&127..3&127:(77|1)), (Int16(87)&127..=Int16(109)&127:((-109)|1)), Int32(37), (77&127..(-125)&127:((-117)|1)), UInt8(67), Int8(70)) is (Array<Bool>, UInt16, Array<Array<Bool>>, Unit, Int8, String, UInt32)), false, ((UInt64(240)&127..=UInt64(73)&127:(-115)|1) is () -> Option<Option<Unit>>), true, false, false, ([false, true, false, true, true, false, true, true, false, true] is (Range<Int64>, Range<Int16>, Int32, Range<Int64>, UInt8, Int8))], [true, true, true, false, true, true, true, true, true, true], [false, ([Int32(-105), Int32(112), Int32(-88), Int32(-9), Int32(-23), Int32(65), Int32(51), Int32(29), Int32(10), Int32(97)] is (Range<UInt32>, Float64, Range<Int32>) -> Int64), true, true, false, (Int16(-59) is (Int32) -> Bool), (Class301() is Array<Option<Float32>>), ((UInt32(5)&127..UInt32(251)&127:((-108)|1)) is (Float64, Range<UInt64>) -> Option<Unit>), ((UInt64(140)&127..UInt64(248)&127:((-126)|1)) is Array<Enum1280>), ((Float32(126.0), (Int16(1)&127..Int16(41)&127:(-126)|1), UInt8(127), Int32(42), Int8(-42), Int16(89), (Int32(28), (), UInt8(188), (UInt16(179)&127..=UInt16(26)&127:(-99)|1), (UInt32(107)&127..UInt32(176)&127:34|1), UInt32(29), UInt32(13), ((-78)&127..=(-50)&127:(-5)|1), (Int32(-108)&127..Int32(85)&127:90|1))) is (Class301, Unit, Int32, Range<Int32>) -> UInt8)], [false, (Enum1280.enumValue1950 is (UInt64, Rune, Bool, Int8, Range<Int32>, Int64, Unit)), false, ([Option<Float32>.None, Option<Float32>.None, Option<Float32>.None, Option<Float32>.None, Option<Float32>.None, Option<Float32>.None, Option<Float32>.None, Option<Float32>.None, Option<Float32>.None, Option<Float32>.None] is (Range<Int64>, (Int16, Option<Unit>, UInt64, Bool, (Int32, Unit, UInt8, Range<UInt16>, Range<UInt32>, UInt32, UInt32, Range<Int64>, Range<Int32>), Float64), Rune) -> UInt8), false, true, true, true, true, false], [false, false, true, false, false, false, false, true, false, false], [false, true, true, false, false, false, false, false, false, false], [(((-53)&127..=(-13)&127:((-36)|1)) is Array<Option<Unit>>), ('M' is String), ((Int32(-27)&127..=Int32(-40)&127:116|1) is Range<Int8>), false, false, true, (Enum542.defaultValue is Int8), (("J${var1399}T@n3mvvxY", (UInt16(152)&127..=UInt16(224)&127:((-95)|1)), 'l', Option<Unit>.None) is (Int32, Range<UInt64>)), false, (Aggregate1807() is Int8)]], (), Int8(Int8(-112)), "V*Y;~'${var1399}} j7", UInt32(98))
public var var2470 : Bool = true
public var var2473 : Array<Option<Unit>> = [(UInt8(64) as Unit), ((Int8(-71)&127..=Int8(-3)&127:(-62)|1) as Unit), Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, (UInt16(UInt8(Int8(7))) as Unit), Option<Unit>.None, (() as Unit), (Option<Option<Range<Int64>>>.None as Unit), Option<Unit>.None]
public let var2500 : ?Unit = Option<Unit>.None
public var var2521 : Array<Int32> = [Int32(-99), Int32(106), Int32(-105), Int32(18), Int32(-113), Int32(-2), Int32(84), Int32(71), Int32(60), Int32(57)]
let var2574 : Int8 = Int8(UInt8(88))
public let var2634 : Option<Enum2626> = Option<Enum2626>.None
public var var2690 : ?Unit = Option<Unit>.None
public let var2721 : Enum1280 = Enum1280.enumValue1950
var var2727 : Bool = false
public let var2764 : Array<Option<Unit>> = [(Enum542.defaultValue as Unit), (Option<Option<Range<Int64>>>.None as Unit), (Enum2626.defaultValue as Unit), Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, ((Float32(-54.0), (Int16(27)&127..Int16(-68)&127:((-117)|1)), UInt8(88), Int32(UInt8(132)), Int8(Int8(106)), Int16(Int16(11)), (Int32(116), (), UInt8(254), (UInt16(9)&127..=UInt16(247)&127:(-102)|1), (UInt32(94)&127..UInt32(161)&127:(-101)|1), UInt32(180), UInt32(109), (92&127..(-32)&127:((-110)|1)), (Int32(87)&127..=Int32(29)&127:(105|1)))) as Unit), (Option<Enum2626>.None as Unit)]
let var2844 : Bool = (Class301() is (Int32, Range<UInt64>))
var var2858 : Aggregate242 = Aggregate242()
let var2863 : (Range<Int64>, Range<Int16>, Int32, Range<Int64>, UInt8, Int8) = (((-3)&127..=25&127:(-32)|1), (Int16(-61)&127..=Int16(UInt8(206))&127:((-32)|1)), Int32(Int32(UInt8(Int8(1)))), ((-36)&127..Int64(Int16(-67))&127:(49|1)), UInt8(62), Int8(54))
public var var2887 : ??Unit = Option<Option<Unit>>.None
public let var2893 : Int32 = Int32(-115)
public let var3008 : (Int32, Range<Int16>, Float64, Enum542) = (Int32(95), (Int16(-118)&127..Int16(-72)&127:((-118)|1)), Float64(Float32(102.0)), Enum542.defaultValue)
public var var3019 : Range<Int8> = (Int8(86)&127..Int8(-13)&127:75|1)
var var3024 : String = "dBd eM2PX-"
public var var3032 : Bool = (("joN;S${var3024}RSQ*g" as Float32) is (String, Range<UInt16>, Rune, Option<Unit>))
var var3107 : Range<UInt16> = (UInt16(110)&127..=UInt16(30)&127:(-100)|1)
public let var3110 : Range<UInt32> = (UInt32(UInt8(139))&127..UInt32(46)&127:((-26)|1))
var var3123 : Range<Int32> = (Int32(-71)&127..=Int32(-5)&127:109|1)
public let var3183 : ?Bool = Option<Bool>.None
let var3192 : Range<UInt32> = (UInt32(158)&127..=UInt32(195)&127:(Int64(Int32(-4))|1))
public var var3232 : (Int32, Unit, UInt8, Range<UInt16>, Range<UInt32>, UInt32, UInt32, Range<Int64>, Range<Int32>) = (Int32(4), (), UInt8(Int8(44)), (UInt16(UInt8(41))&127..=UInt16(Int16(UInt16(146)))&127:(Int64(UInt32(244))|1)), (UInt32(63)&127..=UInt32(94)&127:(-105)|1), UInt32(55), UInt32(233), (Int64(UInt64(133))&127..66&127:(40|1)), (Int32(-124)&127..=Int32(Int16(106))&127:(Int64(UInt16(UInt16(220)))|1)))
public let var3329 : Option<Float32> = (Option<Option<Range<Int64>>>.None as Float32)
public let var3339 : Float32 = Float32(-28.0)
public let var3540 : Int32 = Int32(Int8(-18))
public let var3566 : Array<Option<Unit>> = [Option<Unit>.None, (([false, false, false, false, false, true, false, false, false, false], UInt16(Int8(57)), [[false, true, false, false, true, false, false, true, true, false], [false, true, false, true, true, true, false, false, true, false], [false, true, true, false, true, true, false, true, false, false], [true, false, false, true, false, false, false, false, false, false], [false, false, false, false, true, false, true, true, false, false], [false, false, true, true, true, false, false, false, false, false], [false, false, false, true, false, true, true, false, true, false], [false, false, false, true, false, true, false, false, true, true], [true, false, false, false, true, true, false, false, false, true], [true, false, false, false, false, true, true, false, true, false]], (), Int8(16), "\\s,Syke~lJ", UInt32(UInt16(90))) as Unit), Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, ([Int32(-122), Int32(Int32(-21)), Int32(70), Int32(14), Int32(UInt16(205)), Int32(-54), Int32(UInt16(145)), Int32(Int16(64)), Int32(-92), Int32(-81)] as Unit), (([true, true, true, false, true, false, false, true, true, false] as Option<Unit>) as Unit), Option<Unit>.None, (Enum2626.defaultValue as Unit), ((Int32(55)&127..Int32(74)&127:66|1) as Unit)]
public let var3912 : Bool = true
public let var3925 : Bool = true
public let var3934 : (String, Range<UInt16>, Rune, Option<Unit>) = ("""
H@!B0
^P#'${var3024}@
""", (UInt16(132)&127..=UInt16(145)&127:115|1), 'a', Option<Unit>.None)
public var var3958 : Int16 = Int16(111)
public let var3996 : Unit = ()
let var4014 : Bool = (UInt16(53) is Int16)
public let var4080 : Enum1280 = Enum1280.enumValue1950
let var4437 : Option<Range<Int32>> = ((Int32(-97), (Int16(-35)&127..=Int16(62)&127:35|1), 50.0, Enum542.defaultValue) as Range<Int32>)
var var4554 : ?Int64 = ([Int32(15), Int32(82), Int32(-49), Int32(Int16(-58)), Int32(Int8(UInt8(129))), Int32(116), Int32(60), Int32(106), Int32(-34), Int32(Int8(UInt8(133)))] as Int64)
public let var4575 : Bool = true

public func func44(optionalParam45 ! : Range<UInt32> = (UInt32(Int8(27))&127..=UInt32(Int8(UInt8(219)))&127:(Int64(Int8(-89))|1)), optionalParam54 ! : Float64 = 86.0, namedParam56 ! : Range<Int32>) : Int64 { // block id: 57
    (-43)
}

public struct Aggregate242 {
    public init() { // block id: 244

    }
;
    public static let var247 : Bool = false;
    public let var258 : Rune = 'J'
}

public func func250(param251 : Int32) : Bool { // block id: 252
    let var255 : Aggregate242 = Aggregate242();
    var255.var258;
    let var270 : UInt8 = UInt8(UInt8(UInt8(Int8(90))));
    var loopTimeVar281 : Range<UInt64> = (UInt64(Int32(UInt16(134)))&127..=UInt64(155)&127:((-103)|1));
    for (i in loopTimeVar281 where try { // block id: 262
        var141 &&= true;
        UInt8(60);
        UInt8(4) > var270
    } catch (_) { // block id: 275
        var141
    } finally { // block id: 277
        Aggregate242();
        var141
    }) {

    };
    [[true, false, false, true, false, false, false, true, true, true], [true, true, true, true, false, true, false, true, false, true], [true, false, true, true, true, false, true, false, false, false], [true, true, true, false, false, true, false, true, false, false], [true, true, true, true, true, false, true, false, false, false], [true, false, true, false, true, true, false, true, false, true], [false, false, true, false, true, false, true, false, true, false], [true, false, true, false, true, true, false, false, false, false], [false, true, false, false, false, false, true, false, false, false], [false, true, false, true, true, false, false, false, false, true]][0][0]
}

public interface Interface304 {
    func func3364(param3365 : Array<Option<Unit>>, param3366 : ((Int32, Range<UInt64>), UInt16, Option<Range<Int64>>), param3367 : () -> Bool, param3369 : Option<Enum2626>) : Unit { // block id: 3370
        var var3528 : (Class301, Unit, Int32, Range<Int32>) -> UInt8 = func1006;
        var1013.func3374(namedParam3375 : (Int16(70)&127..Int16(-76)&127:((-27)|1)), optionalParam3376 : Int16(-11), namedParam3378 : var3528);
        try { // block id: 3531
            let var3551 : Range<Int32> = (Int32(-17)&127..=Int32(44)&127:(-13)|1);
            match (var864) {
                case 63.0 | -32.0 | -54.0 | 80.0 => 
                    var890;
                    (var3540, (), UInt8(32), (UInt16(27)&127..=UInt16(118)&127:22|1), var3110, UInt32(94), UInt32(162), (92&127..(-114)&127:89|1), var3551)
                
                case _ => 
                    var3232
                
            };
            var928 ^= var928
        } finally { // block id: 3559

        }
    }

}

public open class Class301 <: Interface304 & Resource {
    public init() { // block id: 303

    }
;
    let var309 : Bool = true;
    public init(param513 : UInt64, optionalParam514 ! : UInt8 = UInt8(149)) { // block id: 516
        match (Option<Unit>.None) {
            case _ => 
                let var522 : UInt32 = UInt32(116);
                var522
            
        }
    }
;
    var var527 : Int16 = Int16(22);
    static var var885 : UInt32 = UInt32(177);
    public let var1016 : Unit = ();
    let var1849 : (Int32, Range<UInt64>) = (Int32(28), (UInt64(139)&127..UInt64(71)&127:((-57)|1)));
    public let var2149 : Int32 = Int32(-56);
    protected let var3497 : ?Range<Int64> = Option<Range<Int64>>.None;
    public var var3508 : ((Int32, Range<UInt64>), UInt16, Option<Range<Int64>>) = ((Int32(36), (UInt64(153)&127..=UInt64(247)&127:((-53)|1))), UInt16(40), Option<Range<Int64>>.None);
    func func3374(namedParam3375 ! : Range<Int16>, optionalParam3376 ! : Int16 = Int16(-84), namedParam3378 ! : (Class301, Unit, Int32, Range<Int32>) -> UInt8) : Int8 { // block id: 3384
        var3232;
        var var3416 : ((Int32, Range<UInt64>), UInt16, Option<Range<Int64>>) = ((Int32(UInt8(UInt8(92))), (UInt64(UInt8(55))&127..=UInt64(93)&127:(Int64(53)|1))), UInt16(UInt16(Int16(22))), (Enum1280.enumValue1950 as Range<Int64>));
        let var3442 : (Int32, Range<UInt64>) = (Int32(UInt32(10)), (UInt64(71)&127..UInt64(236)&127:95|1));
        let var3488 : Option<(Int32, Range<Int16>, Float64, Enum542)> = ([(), (), (), (), (), (), (), (), (), ()] as (Int32, Range<Int16>, Float64, Enum542));
        if (match {
            case (var1032 is Enum1280) => 
            UInt64(11) >= var1403
            case _ => 
            var1016;
            var1098;
            UInt16(217) != var333
        }) { try { // block id: 3401
            [(), (), (), var1430, var1098, var1016, var1430, (), var1430, ()];
            if (false) { var3416 } else { (var1849, UInt16(254), Option<Range<Int64>>.Some(var784)) } 
        } catch (_) { // block id: 3439
            let var3449 : ?Range<Int64> = (Int64(UInt64(Int32(98))) as Range<Int64>);
            (var3442, UInt16(141), var3449)
        } finally { // block id: 3454
            var var3461 : ?Range<Int64> = (UInt64(Int32(Int32(UInt16(63)))) as Range<Int64>);
            ((Int32(114), var1885), var333, var3461)
        } } else { (if ((var1013.var309)) { if (false) { // block id: 3473
            var3416
        } else if (true) { // block id: 3476
            var3416
        } else { // block id: 3478
            if (false) { Option<(Int32, Range<Int16>, Float64, Enum542)>.Some((var2893, (Int16(-127)&127..Int16(126)&127:106|1), var864, var561)) } else { var3488 } ;
            if (false) { (var3442, UInt16(32), var3497) } else { ((var2893, (UInt64(148)&127..UInt64(238)&127:(-42)|1)), UInt16(3), Option<Range<Int64>>.None) } 
        } } else { (var1013.var3508) } ) } ;
        let var3519 : Int8 = Int8(UInt8(27));
        var3519
    }
;
    public static let var3896 : ((Int32, Range<UInt64>), UInt16, Option<Range<Int64>>) = ((Int32(111), (UInt64(20)&127..=UInt64(42)&127:83|1)), UInt16(237), Option<Range<Int64>>.None)
    public func isClosed(): Bool { return false }
    public func close(): Unit {}
}

public enum Enum542 {
    defaultValue |
    enumValue867(Int16) |
    enumValue1303(Array<Array<Bool>>)
}



func func1006(namedParam876 ! : Class301, namedParam877 ! : Unit, namedParam878 ! : Int32, namedParam879 ! : Range<Int32>) : UInt8 { // block id: 880
    Class301.var885 %= (((var890 | var890) << ((UInt32(var809)) & 7)) | 1);
    UInt16(UInt16(83));
    let var903 : Range<UInt32> = (UInt32(205)&127..UInt32(Int32(92))&127:(Int64(Int64(UInt8(UInt8(142))))|1));
    UInt8(if (true) { // block id: 901
        var903;
        namedParam877;
        UInt8(128)
    } else { // block id: 914
        var var917 : Int32 = Int32(UInt32(118));
        var917 >>= ((Int32(-90)) & 7);
        UInt8(128)
    }) << ((if (UInt16(206) >= var333) { // block id: 926
        var928
    } else { // block id: 932
        ();
        var561;
        UInt8(35) >> ((UInt8(51)) & 7)
    }) & 7)
}


public func func1122(param1123 : Int16) : Unit { // block id: 1124
    var1013.var1016
}

public func func1235(param1236 : Int32) : Int16 { // block id: 1237
    let var1240 : (Int16, Option<Unit>, UInt64, Bool, (Int32, Unit, UInt8, Range<UInt16>, Range<UInt32>, UInt32, UInt32, Range<Int64>, Range<Int32>), Float64) = (Int16(Int8(-102)), (Option<Option<Range<Int64>>>.Some(Option<Range<Int64>>.None) as Unit), UInt64(Int8(28)), true, (Int32(50), (), UInt8(4), (UInt16(139)&127..UInt16(142)&127:(-31)|1), (UInt32(68)&127..=UInt32(9)&127:102|1), UInt32(146), UInt32(123), ((-14)&127..64&127:(-96)|1), (Int32(UInt32(208))&127..Int32(106)&127:((-23)|1))), Float64(Float32(71.0)));
    var1240[0]
}

func func1026(param1027 : Float64) : Array<Unit> { // block id: 1028
    var loopTimeVar1038 : Int64 = 0;
    var loopTimeVar1050 : Int64 = 0;
    var var1063 : Int8 = Int8(102);
    var loopTimeVar1088 : Int64 = 0;
    var var1092 : Option<(Int32, Range<Int16>, Float64, Enum542)> = Option<(Int32, Range<Int16>, Float64, Enum542)>.None;
    var loopTimeVar1225 : Range<UInt64> = (UInt64(UInt32(UInt32(17)))&127..UInt64(89)&127:((-113)|1));
    var var1268 : (Int32) -> Int16 = func1235;
    [do {
        loopTimeVar1038++;

    } while ((var1032) && loopTimeVar1038 < 100 ) , while ((var1042[4]) && loopTimeVar1050 < 100 ) {
        loopTimeVar1050++;
        let var1047 : Unit = ();
        var1047
    }, do {
        loopTimeVar1088++;
        var var1069 : Unit = ();
        (var1056, var855, UInt8(94), Int32(72), var1063, var809, (var554, var1069, var928, (UInt16(21)&127..=UInt16(100)&127:68|1), (UInt32(117)&127..=var890&127:(var336|1)), UInt32(126), var890, (18&127..(-1)&127:(var336|1)), (Int32(-13)&127..Int32(119)&127:(-104)|1)));
        Int32(-125) * var554
    } while ((true) && loopTimeVar1088 < 100 ) , if (match (var1092) {
        case Some(_ : Array<Bool>) => 
            var1098;
            false
        
        case _ => 
            true
        
    }) { // block id: 1104
        var1098;
        var var1108 : UInt64 = UInt64(193);
        var1108 *= var1108;
        ()
    }, ((Option<Option<Unit>>.Some(Option<Unit>.None) ?? var39) ?? (var809|>func1122)), var1098, if (if (var1032) { // block id: 1134
        var var1137 : Int64 = (-37);
        var1137 *= var336;
        var1032
    } else if (var1032) { // block id: 1142
        var1145--;
        ();
        Int32(-78) != var1153
    } else { // block id: 1159
        let var1161 : Array<Option<Unit>> = [(UInt8(Int8(-7)) as Unit), ('u' as Unit), ((Int32(-46), (), UInt8(107), (UInt16(131)&127..=UInt16(228)&127:83|1), (UInt32(153)&127..UInt32(187)&127:(42|1)), UInt32(Int32(-128)), UInt32(Int32(-122)), (67&127..8&127:(-20)|1), (Int32(-120)&127..=Int32(56)&127:((-16)|1))) as Unit), (UInt8(206) as Unit), (Float64(Float64(Float32(-13.0))) as Unit), Option<Unit>.Some(()), Option<Unit>.None, Option<Unit>.None, ((23 as Unit) as Unit), Option<Unit>.None];
        var1161;
        var1098;
        var336 >= var336
    }) { // block id: 1205
        var1098;
        var1098
    }, for (i in loopTimeVar1225 where (UInt64(91), 'S', var1215, Int8(-30), (Int32(-81)&127..=Int32(-99)&127:(-2)|1), var336, var1098)[2]) {
        ();
        break
    }, ((var1153|>var1268)|>func1122), var1098]
}

public enum Enum1280 {
    defaultValue |
    enumValue1950
}
public func func1006(param1007 : Array<Unit>) : Int8 { // block id: 1008
    var var1020 : Int8 = Int8(UInt8(28));
    try (resource = Class301()) { // block id: 1010
        var1013.var1016;
        var1020 /= ((Int8(91)) | 1)
    } catch (_) { // block id: 1024
        var864|>func1026;
        param1007[8]
    };
    var1098;
    var var1342 : Bool = false;
    let var1362 : Bool = (Class301(UInt64(Int32(-118)), optionalParam514 : UInt8(69)) is UInt8);
    var var1382 : Int64 = Int64(UInt32(238));
    let var1434 : Int8 = Int8(UInt8(UInt8(Int8(Int8(-66)))));
    let var1446 : Range<UInt32> = (UInt32(94)&127..=UInt32(197)&127:((-15)|1));
    match (match ([Enum1280.defaultValue, Enum1280.defaultValue, var1288, var1288, var1288, Enum1280.defaultValue, Enum1280.defaultValue, Enum1280.defaultValue, var1288, Enum1280.defaultValue][8]) {
            case _ => 
                ();
                Enum542.enumValue1303([var1042, [var1309, true, true, false, var1032, true, var1032, false, true, var1215], var1042, [var1215, true, true, true, var1309, true, true, var1032, true, false], [var1215, var1335, true, true, var1309, var1309, var1342, var1335, true, var1215], [var1309, var1350, false, true, true, var1362, var1032, var1309, false, var1215], var1042, [false, true, false, true, false, false, true, true, false, false], [false, true, true, false, true, false, true, false, false, false], var1042])
            
            case defaultValue => 
                var1098;
                var1382 >>= ((var336) & 7);
                var var1390 : Int16 = Int16(111);
                if (false) { Enum542.enumValue867(var1390) } else { var561 } 
            
            case _ => 
                if (var1309) { "#~H&IeI|S6" } else { var1399 } ;
                var1403 <<= ((var1403) & 7);
                if (var1032) { var561 } else { Enum542.defaultValue } 
            
        }) {
        case enumValue1303(caseVar1412 : Int32) => 
            var1020 | var1020
        
        case enumValue867(caseVar1419 : Range<UInt16>) => 
            var39;
            (UInt64(134), 'S', true, var1020, (Int32(25)&127..Int32(-35)&127:(-24)|1), var1382, var1430);
            var1434 >> ((var1020) & 7)
        
        case _ => 
            if (var1350) { var1446 } else { (UInt32(205)&127..=UInt32(215)&127:115|1) } ;
            Int8(33) - var1020
        
    }
}

public func func538<T0, T1>(param539 : Range<Int32>) : Range<Int16> { // block id: 540
    let var572 : Range<UInt32> = (UInt32(Int16(UInt16(UInt16(252))))&127..UInt32(154)&127:((-12)|1));
    let var593 : Unit = ();
    let var599 : ?Unit = Option<Unit>.Some(());
    match ((Option<(Int32, Range<Int16>, Float64, Enum542)>.None ?? (var554, var557, 61.0, var561))[3]) {
        case caseVar566 => 
            if (false) { (UInt32(81)&127..UInt32(177)&127:(-119)|1) } else { var572 } ;
            let var581 : Range<Int64> = (74&127..=Int64(Int8(UInt8(212)))&127:((-29)|1));
            var581;
            [Option<Unit>.Some(()), Option<Unit>.Some(var593), Option<Unit>.Some(()), var39, var599, var39, var599, Option<Unit>.None, Option<Unit>.None, var599]
        
        case defaultValue => 
            var593;
            var333 &= UInt16(135);
            [Option<Unit>.None, Option<Unit>.Some(()), var39, var39, var39, var39, var39, Option<Unit>.Some(()), Option<Unit>.None, Option<Unit>.Some(())]
        
        case caseVar630 : Range<UInt64> => 
            ();
            var var634 : (Range<Int64>, Range<Int16>, Int32, Range<Int64>, UInt8, Int8) = ((16&127..=(-42)&127:(-95)|1), (Int16(UInt8(234))&127..=Int16(UInt16(123))&127:((-73)|1)), Int32(-32), (Int64(UInt16(Int16(-9)))&127..=(-103)&127:(Int64(Int16(Int8(-96)))|1)), UInt8(119), Int8(UInt8(UInt8(UInt8(106)))));
            var634;
            let var664 : ?Unit = ((UInt32(201)&127..=UInt32(101)&127:6|1) as Unit);
            if (false) { [Option<Unit>.None, Option<Unit>.Some(()), var664, var599, Option<Unit>.Some(()), Option<Unit>.None, var39, var599, Option<Unit>.None, Option<Unit>.None] } else { var676 } 
        
        case caseVar756 => 
            let var759 : Range<UInt16> = (UInt16(151)&127..=UInt16(249)&127:(-125)|1);
            var759;
            if (true) { var676 } else { var676 } 
        
        case _ => 
            var676
        
    };
    let var791 : Bool = ((Int8(93)&127..Int8(UInt8(121))&127:(Int64(Int64(UInt64(215)))|1)) is (Int32) -> Bool);
    var var943 : UInt64 = UInt64(UInt8(58));
    var var1456 : (Array<Unit>) -> Int8 = func1006;
    (((var780 ?? Option<Range<Int64>>.Some(var784)) ?? if (var791) { ((-15)&127..78&127:71|1) } else { var784 } ), try { // block id: 803
        if (false) { (Int16(1)&127..=var809&127:(125|1)) } else { var557 } 
    } finally { // block id: 813
        var557
    }, try { // block id: 816
        var554
    } finally { // block id: 818
        ();
        let var824 : Range<UInt16> = (UInt16(253)&127..UInt16(UInt8(39))&127:(31|1));
        if (true) { (UInt16(28)&127..=UInt16(248)&127:(-123)|1) } else { var824 } ;
        Int32(24) % ((Int32(-16)) | 1)
    }, try { // block id: 834
        var var837 : UInt8 = UInt8(62);
        var837--;
        var593;
        var784
    } finally { // block id: 841
        if (var791) { (Int32(22), (Int16(-15)&127..Int16(39)&127:(124|1)), (-68.0), Enum542.defaultValue) } else { (Int32(-103), var855, var864, Enum542.enumValue867(Int16(-127))) } ;
        if (false) { var784 } else { var784 } 
    }, func1006(namedParam876 : if (true) { Class301() } else { Class301(var943) } , namedParam877 : var949[3], namedParam878 : var965[3], namedParam879 : if (var791) { (var554&127..=var554&127:(11|1)) } else { param539 } ), (match (Int8(12)) {
        case caseVar1462 => 
            ();
            if (var1335) { [(), (), (), (), (), (), (), (), (), ()] } else { var949 } 
        
        case 52 | -28 => 
            var336;
            [(), (), (), (), (), (), (), (), (), ()]
        
        case caseVar1476 => 
            var1479;
            var949
        
        case _ => 
            var949
        
    }|>var1456));
    (Int16(-47)&127..Int16(-11)&127:92|1)
}

public func func531(namedParam532 ! : Float64, namedParam533 ! : Range<UInt64>) : Option<Unit> { // block id: 534
    var var1497 : (Range<Int32>) -> Range<Int16> = func538<Option<Unit>, UInt64>;
    var var1503 : Int64 = Int64(Int16(UInt16(Int8(Int8(45)))));
    match ((((var1153&127..=Int32(122)&127:(var1503|1))|>var1497) as Unit)) {
        case caseVar1511 : UInt32 => 
            var333 /= ((UInt16(60)) | 1);
            var1403 %= ((var1403) | 1)
        
        case _ => 
            Int8(-26) ** (Int8(9) & 3);
            ()
        
    };
    let var1530 : ??Unit = Option<Option<Unit>>.None;
    func func1527() : Option<Option<Unit>> { // block id: 1528
        var1530
    }
;
    (func1527() ?? try { // block id: 1533
        if (true) { Option<Unit>.Some(var1430) } else { var39 } 
    } catch (_) { // block id: 1539
        var1503 <<= ((var1503) & 7);
        if (var1335) { var39 } else { Option<Unit>.None } 
    } finally { // block id: 1547
        if (true) { var1551 } else { Option<Unit>.Some(var1098) } 
    })
}

public struct Aggregate1807 {
    public init() { // block id: 1809

    }
;
    public let var1814 : (UInt32, Option<Range<Int64>>, Range<UInt16>, Range<UInt32>, Array<Array<Bool>>, Array<Unit>) = (UInt32(49), Option<Range<Int64>>.None, (UInt16(148)&127..=UInt16(143)&127:(-100)|1), (UInt32(137)&127..UInt32(92)&127:(56|1)), [[true, false, false, false, false, true, true, true, false, false], [false, false, true, false, false, false, false, true, false, false], [false, false, false, true, false, true, false, false, true, false], [false, true, false, false, true, false, false, false, true, false], [true, false, true, true, true, false, true, true, false, false], [true, false, false, false, false, false, false, true, false, false], [true, false, false, false, true, false, false, true, true, true], [true, false, false, true, false, false, false, false, false, true], [false, true, true, false, false, true, false, true, true, false], [true, false, false, false, false, true, true, true, false, false]], [(), (), (), (), (), (), (), (), (), ()])
}



public func func359(param360 : Range<Int16>) : Array<Array<Bool>> { // block id: 361
    let var1611 : UInt8 = UInt8(UInt8(Int8(Int8(-86))));
    let var1630 : (Int32, Unit, UInt8, Range<UInt16>, Range<UInt32>, UInt32, UInt32, Range<Int64>, Range<Int32>) = (Int32(UInt8(194)), (), UInt8(UInt8(UInt8(18))), (UInt16(139)&127..UInt16(201)&127:(-50)|1), (UInt32(Int8(Int8(-27)))&127..=UInt32(Int16(Int8(-9)))&127:(83|1)), UInt32(Int8(Int8(Int8(83)))), UInt32(53), (72&127..(-45)&127:(-112)|1), (Int32(88)&127..Int32(-2)&127:(-70)|1));
    let var1661 : Array<Array<Bool>> = [[true, false, true, true, false, true, false, false, false, false], [true, true, true, false, false, false, true, false, true, false], [true, true, false, true, false, true, true, false, true, false], [true, false, true, true, true, false, true, true, true, false], [((Float32(-70.0), (Int16(-31)&127..=Int16(97)&127:((-79)|1)), UInt8(53), Int32(108), Int8(35), Int16(70), (Int32(92), (), UInt8(243), (UInt16(46)&127..UInt16(74)&127:((-26)|1)), (UInt32(17)&127..=UInt32(245)&127:109|1), UInt32(38), UInt32(35), ((-79)&127..117&127:((-21)|1)), (Int32(-100)&127..Int32(-53)&127:1|1))) is Rune), ((Option<Unit>.Some(()) is Class301) is String), false, false, (Class301(UInt64(158), optionalParam514 : UInt8(156)) is Interface304), (Option<(Int32, Range<Int16>, Float64, Enum542)>.Some((Int32(26), (Int16(84)&127..Int16(-53)&127:(-41)|1), (-48.0), Enum542.defaultValue)) is (Int16, Option<Unit>, UInt64, Bool, (Int32, Unit, UInt8, Range<UInt16>, Range<UInt32>, UInt32, UInt32, Range<Int64>, Range<Int32>), Float64)), true, (72 is UInt64), false, ((UInt16(174)&127..UInt16(12)&127:(-68)|1) is (Range<Int64>, (Int16, Option<Unit>, UInt64, Bool, (Int32, Unit, UInt8, Range<UInt16>, Range<UInt32>, UInt32, UInt32, Range<Int64>, Range<Int32>), Float64), Rune) -> UInt8)], [false, true, true, false, true, true, true, false, false, true], [true, true, true, false, false, false, false, true, false, true], [false, ([Option<Unit>.Some(()), Option<Unit>.Some(()), Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.Some(()), Option<Unit>.None, Option<Unit>.None, Option<Unit>.Some(()), Option<Unit>.Some(())] is (Range<Int64>, (Int16, Option<Unit>, UInt64, Bool, (Int32, Unit, UInt8, Range<UInt16>, Range<UInt32>, UInt32, UInt32, Range<Int64>, Range<Int32>), Float64), Rune) -> UInt8), (Int32(36) is (UInt64, Rune, Bool, Int8, Range<Int32>, Int64, Unit)), (((96&127..=(-19)&127:((-128)|1)), (Int16(-101)&127..=Int16(9)&127:((-53)|1)), Int32(-126), (50&127..=27&127:(1|1)), UInt8(210), Int8(-66)) is (Class301, Unit, Int32, Range<Int32>) -> UInt8), true, false, true, true, (Int16(Int8(-60)) is () -> Option<Option<Unit>>), true], [true, false, false, false, true, false, true, true, false, true], [true, true, true, false, true, false, true, true, true, true]];
    func func363(optionalParam364 ! : Int16 = Int16(Int16(-90)), namedParam367 ! : Int64, namedParam368 ! : Float32, optionalParam369 ! : Range<UInt16> = (UInt16(146)&127..UInt16(Int16(UInt8(156)))&127:(Int64(UInt32(UInt8(120)))|1))) : Array<Array<Bool>> { // block id: 378
        var var455 : Int32 = Int32(54);
        let var462 : Bool = ((Int8(-29)&127..=Int8(Int8(30))&127:((-23)|1)) is Int8);
        var var481 : Bool = (106.0 is (String, Range<UInt16>, Rune, Option<Unit>));
        let var510 : Class301 = Class301(UInt64(21), optionalParam514 : UInt8(137));
        func func501(namedParam502 ! : Range<Int64>, namedParam503 ! : (Int16, Option<Unit>, UInt64, Bool, (Int32, Unit, UInt8, Range<UInt16>, Range<UInt32>, UInt32, UInt32, Range<Int64>, Range<Int32>), Float64), optionalParam504 ! : Rune = 'A') : UInt8 { // block id: 506
            var510.var527 += match (func531(namedParam532 : 121.0, namedParam533 : (UInt64(157)&127..UInt64(242)&127:(-39)|1))) {
                case caseVar1559 => 
                    var var1563 : Int16 = Int16(UInt8(83));
                    var1563 / ((var809) | 1)
                
                case _ : (Int32, Unit, UInt8, Range<UInt16>, Range<UInt32>, UInt32, UInt32, Range<Int64>, Range<Int32>) => 
                    var1145++;
                    var1098;
                    -var809
                
                case caseVar1577 : Range<Int8> => 
                    var809 **= (optionalParam364 & 3);
                    Int16(46)
                
                case caseVar1585 => 
                    var var1590 : Int16 = Int16(Int16(103));
                    var809 & var1590
                
                case _ => 
                    ();
                    Int16(12) + optionalParam364
                
            };
            try { // block id: 1600
                var928
            } finally { // block id: 1602
                func1122(optionalParam364);
                try { // block id: 1606
                    ();
                    var928 ** (var1611 & 3)
                } finally { // block id: 1616
                    (58&127..var336&127:(123|1));
                    UInt8(157)
                }
            }
        }
;
        var loopTimeVar1659 : Int64 = 0;
        do {
            loopTimeVar1659++;
            func501(namedParam502 : (85&127..77&127:118|1), namedParam503 : (Int16(73), Option<Unit>.Some(()), var1403, true, var1630, var864), optionalParam504 : var1656)
        } while ((match (var384[1]) {
            case caseVar431 : Array<Option<Unit>> => 
                true
            
            case _ : Int8 => 
                var var439 : Float64 = Float64(Float64(98.0));
                var439 -= 125.0;
                ();
                let var446 : Bool = (Float32(Float32(-37.0)) is Range<Int16>);
                var446
            
            case _ : Rune => 
                var455 *= Int32(75);
                ();
                false && var462
            
            case _ => 
                if (false) { [var462, var462, var462, false, false, false, var481, var481, var462, var481] } else { [true, true, true, false, var462, true, false, false, var481, false] } ;
                var481
            
        }) && loopTimeVar1659 < 100 ) ;
        var1661
    }
;
    func func1792(optionalParam1793 ! : (UInt64, Rune, Bool, Int8, Range<Int32>, Int64, Unit) = (UInt64(90), 'j', true, Int8(UInt8(179)), (Int32(-107)&127..Int32(10)&127:23|1), (-64), ())) : Range<UInt64> { // block id: 1803
        let var1811 : Aggregate1807 = Aggregate1807();
        var1811.var1814[1];
        if ((Option<Bool>.None ?? var1309)) { (var1013.var1849) } else { if (false) { // block id: 1858
            var var1872 : (Int32, Range<Int16>, Float64, Enum542) = (Int32(UInt8(Int8(UInt8(201)))), (Int16(-15)&127..=Int16(98)&127:(-45)|1), Float64(Float32(-70.0)), Enum542.defaultValue);
            if (true) { Option<(Int32, Range<Int16>, Float64, Enum542)>.Some((var1153, (Int16(-109)&127..=var809&127:((-104)|1)), var864, var561)) } else { Option<(Int32, Range<Int16>, Float64, Enum542)>.Some(var1872) } ;
            (Int32(36), var1885)
        } else { // block id: 1894
            (Int32(2), (var1403&127..UInt64(224)&127:(var336|1)))
        } } [1]
    }
;
    var var1926 : UInt64 = UInt64(UInt32(Int16(39)));
    func363(optionalParam364 : match (var1551) {
        case caseVar1772 : Interface304 => 
            Int16(63)
        
        case caseVar1777 : Option<Option<Range<Int64>>> => 
            let var1780 : Unit = ();
            var1780;
            if (true) { caseVar1777 } else { var780 } ;
            Int16(-39)
        
        case _ => 
            Int16(97)
        
    }, namedParam367 : match (func1792()) {
        case _ => 
            var1350 &&= var1335;
            (-101) * (-117)
        
        case caseVar1913 : Range<UInt64> => 
            var1153 <<= ((var554) & 7);
            var336 - (-70)
        
        case _ => 
            var1926 /= ((var1926) | 1);
            var336
        
        case caseVar1934 => 
            (((-102)&127..=(-68)&127:(-8)|1), (Int16(16)&127..=Int16(115)&127:(-109)|1), var1153, ((-95)&127..=(-42)&127:26|1), UInt8(232), Int8(99));
            ();
            var336 | var336
        
        case _ => 
            Enum1280.enumValue1950;
            (-25) | var336
        
    }, namedParam368 : (var1962[0] ?? Float32(49.0)))
}

public func func296<T0>(param297 : Array<Array<Bool>>) : Bool { // block id: 298
    var var306 : Class301 = Class301();
    var loopTimeVar316 : Range<UInt64> = (UInt64(Int32(-109))&127..UInt64(137)&127:(Int64(UInt64((-7)))|1));
    for (i in loopTimeVar316 where var306.var309) {
        let var313 : Rune = 'r';
        var313;
        UInt8(159)
    };
    var var346 : Float32 = Float32(-119.0);
    Float32(match (("""
*kXf6
+W(z%
""", (UInt16(71)&127..var333&127:(var336|1)), 'E', var39)[3]) {
        case _ : Rune => 
            var346
        
        case _ => 
            ();
            var346
        
        case _ => 
            Float32(-18.0)
        
    });
    ((var855|>func359)[3] is Interface304)
}

public func func2057<T0, T1>(param2058 : Int32) : Array<Array<Bool>> where T0 <: Rune, T1 <: Range<UInt8> { // block id: 2059
    var384;
    var var2067 : ((Int32, Range<UInt64>), UInt16, Option<Range<Int64>>) = ((Int32(39), (UInt64(246)&127..=UInt64(215)&127:9|1)), UInt16(UInt8(139)), Option<Range<Int64>>.Some(((-31)&127..=50&127:(-76)|1)));
    match (var2067[2]) {
        case caseVar2079 => 
            if (var1350) { (var554, (UInt64(123)&127..UInt64(198)&127:((-11)|1))) } else { (Int32(16), (UInt64(53)&127..=UInt64(223)&127:(-64)|1)) } ;
            ();
            var557
        
        case _ => 
            if (var1309) { (Int16(-38)&127..=Int16(-27)&127:76|1) } else { var855 } 
        
    }|>func359
}

func func134(param135 : UInt8) : Bool { // block id: 136
    let var171 : Float32 = Float32(Float32(Float32(Float32(Float32(12.0)))));
    let var184 : (Int32, Unit, UInt8, Range<UInt16>, Range<UInt32>, UInt32, UInt32, Range<Int64>, Range<Int32>) = (Int32(Int8(-46)), (), UInt8(UInt8(230)), (UInt16(93)&127..UInt16(0)&127:(-48)|1), (UInt32(UInt16(5))&127..UInt32(149)&127:(Int64(Int32(Int32(-102)))|1)), UInt32(Int8(Int8(97))), UInt32(UInt16(Int8(87))), (23&127..=(-28)&127:119|1), (Int32(-26)&127..Int32(112)&127:((-20)|1)));
    let var214 : (Range<Int64>, Range<Int16>, Int32, Range<Int64>, UInt8, Int8) = (((-89)&127..=Int64(Int16(Int8(-39)))&127:(Int64(Int8(Int8(110)))|1)), (Int16(-30)&127..Int16(119)&127:(-25)|1), Int32(Int32(Int8(-64))), (Int64(UInt32(230))&127..Int64(UInt8(Int8(103)))&127:((-11)|1)), UInt8(UInt8(UInt8(UInt8(119)))), Int8(47));
    let var2055 : (Array<Array<Bool>>) -> Bool = func296<Bool>;
    var var2101 : (Int32) -> Array<Array<Bool>> = func2057<Rune, Range<UInt8>>;
    let var2128 : Bool = (Option<Bool>.Some(true) is (Range<Int64>, (Int16, Option<Unit>, UInt64, Bool, (Int32, Unit, UInt8, Range<UInt16>, Range<UInt32>, UInt32, UInt32, Range<Int64>, Range<Int32>), Float64), Rune) -> UInt8);
    if (match (if (var141) { var39 } else { Option<Unit>.Some(var146) } ) {
        case _ : Range<UInt32> => 
            Int16(-77);
            false
        
        case caseVar155 => 
            (-56);
            var var160 : UInt64 = UInt64(75);
            var160 < UInt64(225)
        
        case _ : Rune => 
            var141
        
        case _ => 
            var171 % Float32((Int32(Float32(28.0))) | 1);
            var146;
            var141
        
    }) { // block id: 180
        var184[4];
        var214[4];
        Aggregate242.var247
    } else if (([Int32(71), Int32(77), Int32(22), Int32(-32), Int32(115), Int32(69), Int32(-100), Int32(54), Int32(-49), Int32(-118)][6]|>(var2101~>var2055))) { // block id: 2107
        if (var1032) { // block id: 2110

        };
        (var2113 ?? false)
    } else { // block id: 2116
        [var141, false, var1309, var2124, false, var2128, false, true, var2135, true][5]
    }
}

public func func2461() : Bool { // block id: 2462
    var1013.var1016;
    var var2509 : (Array<Array<Bool>>) -> Bool = { lambdaParameter2512 : Array<Array<Bool>> => false };
    (((if (var2470) { var2473 } else { [Option<Unit>.None, var1551, Option<Unit>.Some(var1430), Option<Unit>.Some(()), var2500, var2500, var2500, Option<Unit>.None, var2500, Option<Unit>.None] } ) as Bool) ?? (func359((Int16(-25)&127..=Int16(39)&127:(-120)|1))|>var2509))
}

public enum Enum2626 {
    defaultValue |
    enumValue2642(Array<Unit>, Range<Int32>, Option<Unit>, (Array<Unit>) -> Int8) |
    enumValue4175(((Int32, Range<UInt64>), UInt16, Option<Range<Int64>>), (Range<Int32>) -> Range<Int16>, Float32, (Int16, Option<Unit>, UInt64, Bool, (Int32, Unit, UInt8, Range<UInt16>, Range<UInt32>, UInt32, UInt32, Range<Int64>, Range<Int32>), Float64))
}

public func func2732(param2733 : Option<Unit>) : Unit { // block id: 2734
    var var2913 : Int32 = Int32(Int16(Int16(-11)));
    if (match (match (UInt16(175)) {
            case _ => 
                var333--;
                Option<Option<Unit>>.None;
                [Option<Unit>.None, Option<Unit>.None, var39, var2500, Option<Unit>.Some(var1430), var2500, param2733, Option<Unit>.None, Option<Unit>.Some(()), var2500]
            
            case 226 | 173 | 237 => 
                if (false) { var2764 } else { var2473 } 
            
            case 177 | 56 => 
                var1145 ^= UInt32(155);
                [var2690, Option<Unit>.None, Option<Unit>.None, Option<Unit>.Some(var1098), param2733, Option<Unit>.Some(var1430), var1551, Option<Unit>.None, var39, var23]
            
            case _ => 
                var146;
                var676
            
        }) {
        case caseVar2835 => 
            var1403 >= UInt64(238)
        
        case _ : Class301 => 
            var2844
        
        case _ => 
            (var2574&127..Int8(29)&127:(47|1));
            true
        
    }) { var2521 } else { (if ((var2858 is (Int32) -> Int16)) { try { // block id: 2861
        var2863;
        if (false) { Option<Option<Unit>>.Some(param2733) } else { var2887 } ;
        [Int32(47), var554, var2893, Int32(122), var554, var1153, var554, Int32(-123), var554, Int32(25)]
    } finally { // block id: 2902
        Enum1280.enumValue1950;
        [Int32(126), var2893, var554, var2893, Int32(75), Int32(55), var2893, var2913, var2893, var2913]
    } } else { (if (var1335) { [var554, var2913, Int32(-19), var2893, var1153, var1153, var2893, var2893, var2893, var2893] } else { var2521 } ) } ) } ;
    var loopTimeVar2939 : Int64 = 0;
    var loopTimeVar2949 : Int64 = 0;
    (Option<Unit>.Some(while ((false) && loopTimeVar2939 < 100 ) {
        loopTimeVar2939++;

    }) ?? do {
        loopTimeVar2949++;
        ();
        if (true) { Aggregate242() } else { var2858 } 
    } while ((false) && loopTimeVar2949 < 100 ) )
}

func func2650(param2651 : () -> Bool) : Array<Unit> { // block id: 2653
    func func2656(optionalParam2657 ! : Range<UInt32> = (UInt32(145)&127..=UInt32(7)&127:(-22)|1), namedParam2659 ! : (Int32, Unit, UInt8, Range<UInt16>, Range<UInt32>, UInt32, UInt32, Range<Int64>, Range<Int32>), optionalParam2660 ! : Option<Enum2626> = Option<Enum2626>.Some(Enum2626.enumValue2642([(), (), (), (), (), (), (), (), (), ()], (Int32(-111)&127..Int32(-60)&127:(-60)|1), (((Int16(3)&127..=Int16(-57)&127:((-32)|1)) as Enum2626) as Unit), func1006)), namedParam2682 ! : (Int16, Option<Unit>, UInt64, Bool, (Int32, Unit, UInt8, Range<UInt16>, Range<UInt32>, UInt32, UInt32, Range<Int64>, Range<Int32>), Float64)) : String { // block id: 2683
        (match (var2690) {
            case caseVar2694 => 
                if (var2470) { var561 } else { var561 } ;
                Int32(-90)
            
            case _ : (Int32, Range<Int16>, Float64, Enum542) => 
                var1215 ||= var1350;
                ();
                Int32(-61)
            
            case _ => 
                Int32(-84)
            
            case _ => 
                Int32(-25)
            
        }|>func1235)|>func1122;
        ((try { // block id: 2719
            var2721
        } catch (e: Exception) { // block id: 2723
            ();
            if (var2727) { Enum1280.defaultValue } else { var2721 } 
        } as Unit) ?? (((var809&127..=var809&127:(var336|1)) as Unit)|>func2732));
        match (match ((var333&127..=var333&127:((-97)|1))) {
                case _ => 
                    var110 -= 44.0;
                    if (true) { var2521 } else { [var1153, var554, Int32(101), Int32(37), Int32(114), Int32(32), Int32(102), var1153, var1153, var2893] } 
                
                case caseVar2984 : Int32 => 
                    var1098;
                    var2521
                
                case _ => 
                    ();
                    var2521
                
            }) {
            case caseVar2994 => 
                var1399
            
            case _ : (Range<Int64>, Range<Int16>, Int32, Range<Int64>, UInt8, Int8) => 
                if (var1032) { var1399 } else { "oLUv+%a~>5" } 
            
            case _ : Option<Float32> => 
                var3008;
                var3019;
                if (false) { var3024 } else { "AP0>;@a{S^Q" } 
            
            case _ => 
                [false, var3032, false, false, false, true, var1215, false, true, false];
                Int32(-34);
                "m!+\"C>T=Om"
            
        }
    }
;
    (func2656(namedParam2659 : match (var780) {
        case caseVar3050 : Array<Array<Bool>> => 
            var333 += var98;
            let var3068 : Range<Int32> = (Int32(66)&127..Int32(-94)&127:(-83)|1);
            (var2893, var1430, UInt8(182), (UInt16(145)&127..=UInt16(15)&127:26|1), (var890&127..=var890&127:(var336|1)), UInt32(53), UInt32(0), ((-9)&127..=92&127:38|1), var3068)
        
        case caseVar3072 : Option<Unit> => 
            ();
            let var3078 : (Int32, Unit, UInt8, Range<UInt16>, Range<UInt32>, UInt32, UInt32, Range<Int64>, Range<Int32>) = (Int32(5), (), UInt8(UInt8(197)), (UInt16(UInt8(15))&127..=UInt16(90)&127:(35|1)), (UInt32(237)&127..=UInt32(32)&127:(-68)|1), UInt32(UInt8(210)), UInt32(110), ((-121)&127..Int64(Int8(UInt8(121)))&127:(Int64(Int16(Int16(102)))|1)), (Int32(30)&127..=Int32(-4)&127:(-54)|1));
            if (true) { var3078 } else { (Int32(18), var1098, var928, var3107, var3110, UInt32(171), var1145, (88&127..73&127:(49|1)), var3123) } 
        
        case caseVar3127 => 
            var928 *= UInt8(130);
            var var3135 : Aggregate1807 = Aggregate1807();
            if (false) { var3135 } else { Aggregate1807() } ;
            let var3141 : (Int32, Unit, UInt8, Range<UInt16>, Range<UInt32>, UInt32, UInt32, Range<Int64>, Range<Int32>) = (Int32(UInt32(UInt16(Int8(108)))), (), UInt8(76), (UInt16(UInt8(140))&127..=UInt16(Int16(Int16(-2)))&127:(Int64(UInt32(4))|1)), (UInt32(86)&127..UInt32(Int16(-55))&127:(116|1)), UInt32(105), UInt32(203), ((-105)&127..=Int64(UInt16(246))&127:(Int64(UInt16(UInt8(107)))|1)), (Int32(UInt32(UInt8(112)))&127..=Int32(UInt16(Int16(86)))&127:(111|1)));
            if (true) { var3141 } else { var3141 } 
        
        case _ => 
            var3183;
            Option<Range<Int64>>.None;
            (var2893, var146, var928, (UInt16(54)&127..=UInt16(81)&127:(-27)|1), var3192, var890, var1145, (29&127..=113&127:5|1), (Int32(115)&127..Int32(-85)&127:(var336|1)))
        
    }, optionalParam2660 : if (false) { Option<Enum2626>.Some(Enum2626.defaultValue) } else { var2634 } , namedParam2682 : if (true) { // block id: 3212
        ();
        var2863;
        var384
    } else { // block id: 3216
        [false, true, true, true, false, false, false, false, true, false];
        var384
    }), var3107, match (if (var3032) { // block id: 3223
            var1098;
            (var809, Option<Unit>.Some(()), UInt64(205), false, var3232, (-115.0))
        } else if (var1215) { // block id: 3263
            var1288;
            var965;
            (var809, Option<Unit>.Some(()), UInt64(131), true, var3232, var110)
        } else { // block id: 3274
            Option<(Int32, Range<Int16>, Float64, Enum542)>.Some(var3008);
            var1145--;
            (Int16(-69), var39, UInt64(47), true, (Int32(-86), var1098, var928, var3107, (UInt32(254)&127..UInt32(206)&127:(-92)|1), UInt32(22), var1145, var784, var3123), 42.0)
        }) {
        case (_ : Int8,_ : Range<UInt32>,_ : Float64,caseVar3297 : UInt16,_ : Range<Int64>,caseVar3298) => 
            if (true) { var1656 } else { var1656 } 
        
        case (caseVar3306,_,_ : String,_,caseVar3307 : (String, Range<UInt16>, Rune, Option<Unit>),caseVar3308) => 
            'X'
        
        case (caseVar3313,_,caseVar3314,_,(caseVar3315,_ : Option<Bool>,_ : UInt16,_,caseVar3316,_,_,caseVar3317 : Float32,_),caseVar3318 : ((Int32, Range<UInt64>), UInt16, Option<Range<Int64>>)) => 
            var1656
        
        case _ => 
            [Option<Float32>.Some(Float32(-116.0)), Option<Float32>.Some(Float32(-79.0)), var3329, Option<Float32>.Some(Float32(-8.0)), var3329, var3329, var3329, Option<Float32>.Some(var3339), var3329, Option<Float32>.None];
            if (var1215) { '7' } else { var1656 } 
        
    }, (Option<Option<Unit>>.None ?? ([true, true, true, var2470, var2727, true, var1350, true, var2844, false] as Unit)));
    var1013.func3364(try { // block id: 3561
        var1145 /= ((UInt32(190)) | 1);
        var3566
    } catch (e: Exception) { // block id: 3667
        ();
        var var3673 : Array<Option<Unit>> = Array<Option<Unit>>(10){ i => ((UInt32(105), ((Int8(81)&127..Int8(126)&127:(87|1)) as Range<Int64>), (UInt16(213)&127..UInt16(186)&127:((-18)|1)), (UInt32(74)&127..=UInt32(55)&127:(33|1)), [[true, true, false, true, false, false, false, true, false, false], [false, false, true, false, true, false, true, false, false, true], [false, true, true, false, false, true, true, false, true, false], [false, false, true, false, true, false, false, true, false, false], [true, false, false, false, true, true, false, true, false, true], [true, false, true, false, false, false, false, true, false, true], [false, true, true, false, true, true, true, true, true, true], [true, false, false, true, true, false, false, true, true, true], [false, true, false, true, true, false, true, false, false, false], [true, true, false, false, false, false, true, false, true, true]], [(), (), (), (), (), (), (), (), (), ()]) as Unit) };
        if (true) { var676 } else { var3673 } 
    }, Class301.var3896, func2461, var2634);
    match (match {
            case if (true) { // block id: 3909
            if (var3912) { var561 } else { var561 } ;
            UInt8(237) == UInt8(152)
        } else if (var2727) { // block id: 3920
            var2135
        } else { // block id: 3922
            if (var3925) { ("RKQ&-aM(Va{", (UInt16(166)&127..=UInt16(219)&127:(-92)|1), '5', Option<Unit>.Some(())) } else { var3934 } ;
            (var1056, (var809&127..Int16(55)&127:(var336|1)), var928, Int32(77), Int8(-33), var809, var3232);
            var2727
        } => 
            var809 <<= ((var809) & 7);
            var3958 **= (var809 & 3);
            UInt8(81)
            case _ => 
            var928
        }) {
        case 142 | 146 | 164 => 
            if (true) { [(), (), (), (), (), (), (), (), (), ()] } else { var949 } 
        
        case 15 | 175 => 
            var141 ||= true;
            var var4000 : Unit = ();
            if (true) { [var1430, (), var146, (), (), var146, var146, (), (), var146] } else { [(), (), var1430, (), var3996, var1098, var4000, var1098, (), ()] } 
        
        case 74 | 184 => 
            [true, true, var1335, var2727, var4014, true, true, true, var1032, true];
            ();
            [(), (), (), (), (), (), (), (), (), ()]
        
        case _ => 
            ();
            var949
        
    }
}

public func func2637(param2638 : () -> Bool) : Enum2626 { // block id: 2640
    var var4032 : (Array<Unit>) -> Int8 = func1006;
    Enum2626.enumValue2642(func2650(func2461), (Int32(4)&127..Int32(93)&127:57|1), var39, var4032)
}

public func func4035() : Bool { // block id: 2462
    var1013.var1016;
    var var2509 : (Array<Array<Bool>>) -> Bool = { lambdaParameter2512 : Array<Array<Bool>> => false };
    (((if (var2470) { var2473 } else { [Option<Unit>.None, var1551, Option<Unit>.Some(var1430), Option<Unit>.Some(()), var2500, var2500, var2500, Option<Unit>.None, var2500, Option<Unit>.None] } ) as Bool) ?? (func359((Int16(-25)&127..=Int16(39)&127:(-120)|1))|>var2509))
}



public func func2578(optionalParam2579 ! : Option<Option<Unit>> = (((Int16(UInt16(143)), ((Int32(106), (), UInt8(45), (UInt16(39)&127..UInt16(185)&127:(-121)|1), (UInt32(208)&127..=UInt32(234)&127:((-68)|1)), UInt32(96), UInt32(131), (81&127..=14&127:86|1), (Int32(3)&127..Int32(-5)&127:(54|1))) as Unit), UInt64(69), true, (Int32(112), (), UInt8(189), (UInt16(71)&127..=UInt16(10)&127:(-61)|1), (UInt32(8)&127..=UInt32(44)&127:4|1), UInt32(102), UInt32(8), ((-113)&127..(-100)&127:114|1), (Int32(-28)&127..=Int32(20)&127:(11|1))), Float64(Float32(-78.0))) as Range<Int64>) as Option<Unit>), optionalParam2619 ! : Bool = (UInt64(234) is (Array<Array<Bool>>) -> Bool), namedParam2622 ! : () -> Bool) : Range<Int32> { // block id: 2624
    let var4067 : Enum1280 = Enum1280.enumValue1950;
    match ((var2634 ?? (func4035|>func2637))) {
        case caseVar4039 : UInt16 => 
            Option<Float32>.None;
            ();
            if (optionalParam2619) { var1479 } else { var1479 } 
        
        case caseVar4049 : Range<UInt64> => 
            var2634;
            var1145 ^= UInt32(70);
            let var4083 : Enum1280 = Enum1280.enumValue1950;
            if (false) { [Enum1280.enumValue1950, var2721, Enum1280.enumValue1950, var2721, Enum1280.defaultValue, Enum1280.defaultValue, var1288, Enum1280.enumValue1950, var4067, Enum1280.defaultValue] } else { [Enum1280.defaultValue, var4067, var2721, var4067, var1288, Enum1280.defaultValue, var1288, var1288, var4080, var4083] } 
        
        case _ => 
            Option<Option<Unit>>.None;
            var1479
        
    };
    let var4096 : (UInt32, Option<Range<Int64>>, Range<UInt16>, Range<UInt32>, Array<Array<Bool>>, Array<Unit>) = (UInt32(UInt32(UInt32(113))), Option<Range<Int64>>.None, (UInt16(30)&127..UInt16(57)&127:(Int64(Int8(Int8(57)))|1)), (UInt32(UInt16(169))&127..=UInt32(176)&127:((-102)|1)), [[(Enum542.defaultValue is Range<UInt64>), ([Option<Unit>.Some(()), Option<Unit>.None, Option<Unit>.Some(()), Option<Unit>.Some(()), Option<Unit>.None, Option<Unit>.Some(()), Option<Unit>.None, Option<Unit>.Some(()), Option<Unit>.Some(()), Option<Unit>.None] is (Array<Bool>, UInt16, Array<Array<Bool>>, Unit, Int8, String, UInt32)), false, (Option<Unit>.Some(()) is (Int16, Option<Unit>, UInt64, Bool, (Int32, Unit, UInt8, Range<UInt16>, Range<UInt32>, UInt32, UInt32, Range<Int64>, Range<Int32>), Float64)), ((Int32(-9), (UInt64(163)&127..UInt64(41)&127:(-92)|1)) is Enum1280), ((UInt64(214)&127..=UInt64(242)&127:(66|1)) is Int8), (Int8(88) is Option<(Int32, Range<Int16>, Float64, Enum542)>), false, (Float32(105.0) is (() -> Bool) -> Array<Unit>), (Aggregate1807() is Option<Option<Unit>>)], [false, true, false, true, true, false, true, true, false, false], [true, true, false, false, true, false, true, true, false, false], [true, false, (Int32(-27) is (UInt8) -> Bool), true, ([false, false, true, false, false, false, false, false, true, true] is Range<Int32>), (("=qq&iqq a{W", (UInt16(129)&127..=UInt16(44)&127:(-83)|1), 'v', Option<Unit>.None) is Array<Enum1280>), true, (Option<Enum2626>.Some(Enum2626.enumValue4175(((Int32(47), (UInt64(41)&127..=UInt64(35)&127:87|1)), UInt16(177), Option<Range<Int64>>.None), func538<Option<Unit>, UInt64>, Float32(36.0), (Int16(-116), Option<Unit>.Some(()), UInt64(60), true, (Int32(117), (), UInt8(157), (UInt16(41)&127..UInt16(77)&127:(54|1)), (UInt32(236)&127..UInt32(197)&127:(-1)|1), UInt32(23), UInt32(87), (37&127..=(-75)&127:(104|1)), (Int32(-34)&127..Int32(-15)&127:(-75)|1)), (-105.0)))) is (Range<UInt32>, Float64, Range<Int32>) -> Int64), ((((-102)&127..=58&127:((-118)|1)), (Int16(63)&127..=Int16(-70)&127:75|1), Int32(9), ((-77)&127..=(-9)&127:(-58)|1), UInt8(80), Int8(-16)) is Bool), ([Option<Float32>.Some(Float32(1.0)), Option<Float32>.Some(Float32(-39.0)), Option<Float32>.Some(Float32(-24.0)), Option<Float32>.Some(Float32(-1.0)), Option<Float32>.Some(Float32(-4.0)), Option<Float32>.None, Option<Float32>.None, Option<Float32>.Some(Float32(-61.0)), Option<Float32>.None, Option<Float32>.None] is Interface304)], [((UInt64(252)&127..=UInt64(85)&127:56|1) is Option<Float32>), ((Int32(116), (), UInt8(214), (UInt16(8)&127..UInt16(17)&127:(2|1)), (UInt32(60)&127..=UInt32(145)&127:(110|1)), UInt32(251), UInt32(192), ((-125)&127..=115&127:((-70)|1)), (Int32(-52)&127..Int32(-84)&127:70|1)) is (() -> Bool) -> Array<Unit>), (true is (String, Range<UInt16>, Rune, Option<Unit>)), false, false, false, true, true, false, true], [true, true, true, true, false, false, false, false, false, true], [(Option<Enum2626>.None is Enum1280), ((Float32(98.0), (Int16(21)&127..Int16(5)&127:(32|1)), UInt8(246), Int32(103), Int8(66), Int16(12), (Int32(-8), (), UInt8(198), (UInt16(133)&127..UInt16(247)&127:(-86)|1), (UInt32(78)&127..=UInt32(61)&127:(-44)|1), UInt32(193), UInt32(164), (121&127..(-9)&127:93|1), (Int32(-84)&127..=Int32(19)&127:((-97)|1)))) is Array<Option<Unit>>), ([false, false, false, true, true, true, true, false, false, false] is Array<Option<Unit>>), ([Option<Unit>.Some(()), Option<Unit>.Some(()), Option<Unit>.None, Option<Unit>.Some(()), Option<Unit>.None, Option<Unit>.None, Option<Unit>.Some(()), Option<Unit>.None, Option<Unit>.Some(()), Option<Unit>.None] is (Array<Array<Bool>>) -> Bool), false, true, false, (Int16(48) is Range<Int16>), ((UInt32(108)&127..=UInt32(71)&127:((-61)|1)) is Range<UInt16>), ((Float32(-103.0), (Int16(-116)&127..Int16(-99)&127:77|1), UInt8(107), Int32(73), Int8(43), Int16(-1), (Int32(-35), (), UInt8(155), (UInt16(134)&127..UInt16(43)&127:65|1), (UInt32(217)&127..=UInt32(34)&127:((-125)|1)), UInt32(134), UInt32(198), ((-9)&127..=32&127:(45|1)), (Int32(87)&127..Int32(-102)&127:(-84)|1))) is Range<Int16>)], [(Enum542.enumValue867(Int16(-108)) is Option<Option<Range<Int64>>>), false, true, true, (UInt32(187) is (Int32, Unit, UInt8, Range<UInt16>, Range<UInt32>, UInt32, UInt32, Range<Int64>, Range<Int32>)), true, true, ((UInt64(159)&127..UInt64(144)&127:((-123)|1)) is Option<Option<Unit>>), ([(), (), (), (), (), (), (), (), (), ()] is (Int16, Option<Unit>, UInt64, Bool, (Int32, Unit, UInt8, Range<UInt16>, Range<UInt32>, UInt32, UInt32, Range<Int64>, Range<Int32>), Float64)), false], [false, false, true, true, true, false, true, false, true, true], [true, ((Int16(98), Option<Unit>.Some(()), UInt64(248), true, (Int32(-22), (), UInt8(248), (UInt16(92)&127..UInt16(193)&127:(-55)|1), (UInt32(100)&127..=UInt32(167)&127:(-70)|1), UInt32(201), UInt32(62), ((-11)&127..(-85)&127:(-19)|1), (Int32(112)&127..=Int32(-29)&127:(-119)|1)), 63.0) is (Array<Bool>, UInt16, Array<Array<Bool>>, Unit, Int8, String, UInt32)), (Class301(UInt64(111)) is Bool), (Option<Enum2626>.None is Int8), true, true, false, false, false, true]], [(), (), (), (), (), (), (), (), (), ()]);
    let var4486 : Bool = ((Int16(UInt16(Int8(-125))), ([Int32(50), Int32(5), Int32(110), Int32(-98), Int32(-70), Int32(125), Int32(29), Int32(5), Int32(-46), Int32(34)] as Unit), UInt64(95), true, (Int32(UInt8(83)), (), UInt8(21), (UInt16(31)&127..=UInt16(233)&127:((-113)|1)), (UInt32(102)&127..=UInt32(47)&127:(36|1)), UInt32(183), UInt32(Int32(2)), ((-54)&127..37&127:(35|1)), (Int32(-91)&127..Int32(4)&127:71|1)), Float64(Float32(Float32(-11.0)))) is (Array<Option<Unit>>, ((Int32, Range<UInt64>), UInt16, Option<Range<Int64>>), () -> Bool, Option<Enum2626>) -> Unit);
    (match (var4096) {
        case (_ : Array<Bool>,caseVar4429,caseVar4430 : Enum542,_ : Array<Option<Float32>>,caseVar4431,_ : Enum2626) => 
            var3996;
            if (false) { var4437 } else { Option<Range<Int32>>.Some((var2893&127..=var3540&127:(7|1))) } 
        
        case caseVar4451 => 
            if (true) { var4437 } else { Option<Range<Int32>>.Some((Int32(-118)&127..=Int32(40)&127:46|1)) } 
        
        case (_,caseVar4460,_,caseVar4461,caseVar4462,_) => 
            Option<Range<Int32>>.Some((Int32(-38)&127..Int32(125)&127:(-82)|1))
        
        case caseVar4468 : Int32 => 
            ();
            var4437
        
        case _ => 
            ();
            Option<Bool>.Some(var2124);
            var4437
        
    } ?? (if (var1215) { // block id: 4481
        Int32(90) & var554
    } else if (var4486) { // block id: 4530
        var1145 &= var1145;
        var1403 |= UInt64(156);
        Int32(-66)
    } else { // block id: 4538
        var3540
    }&127..=try { // block id: 4541
        var var4543 : Range<Int64> = ((-6)&127..50&127:28|1);
        var4543;
        Int32(-73)
    } catch (_) { // block id: 4546
        Int32(85)
    }&127:((var4554 ?? (-56))|1)))
}

func func129(param130 : Range<Int64>) : Range<Int32> { // block id: 131
    let var4580 : () -> Bool = func2461;
    if ((if (true) { // block id: 2519
        var2521;
        UInt8(20) / ((UInt8(132)) | 1)
    } else if (var2135) { // block id: 2527
        if (var2135) { Option<Option<Unit>>.Some(Option<Unit>.None) } else { Option<Option<Unit>>.Some(Option<Unit>.None) } ;
        UInt8(184)
    } else { // block id: 2535
        true;
        if (false) { Aggregate242() } else { Aggregate242() } ;
        UInt8(188)
    }|>{ lambdaParameter2142 : UInt8 => if (func250(var1013.var2149)) { // block id: 2151
        var780;
        var1098;
        UInt8(176) != UInt8(155)
    } else if (try { // block id: 2158
        var2124
    } catch (_) { // block id: 2160
        var1098;
        !var1309
    } finally { // block id: 2164
        var146;
        ();
        true
    }) { // block id: 2168
        let var2190 : Int8 = Int8(Int8(UInt8(114)));
        try (resource = Class301()) { // block id: 2170

        } catch (e: Exception) { // block id: 2171
            var1153 &= var1153;
            var1403 *= var1403
        } finally { // block id: 2178
            let var2195 : (Range<Int64>, Range<Int16>, Int32, Range<Int64>, UInt8, Int8) = ((Int64(UInt8(251))&127..=38&127:((-49)|1)), (Int16(-64)&127..=Int16(72)&127:(Int64(Int32(UInt32(22)))|1)), Int32(-119), (85&127..95&127:(-107)|1), UInt8(96), Int8(-58));
            if (true) { (var784, var2184, var1153, (57&127..97&127:(-28)|1), UInt8(27), var2190) } else { var2195 } ;
            ()
        };
        Int32(-33)|>func250
    } else { // block id: 2216
        match (var2113) {
            case _ : Option<Option<Unit>> => 
                ();
                ();
                ###"J8xj8*f@Zq"###
            
            case _ : (Int32, Range<Int16>, Float64, Enum542) => 
                var1399
            
            case _ : Aggregate242 => 
                var1098;
                if (var1215) { var1399 } else { ">;(qx,(77v" } 
            
            case caseVar2239 => 
                var1145--;
                if (true) { (UInt16(128)&127..=UInt16(107)&127:(-116)|1) } else { (UInt16(214)&127..=UInt16(49)&127:(-118)|1) } ;
                "]xF/!q#$/F"
            
            case _ => 
                var1403 ^= UInt64(174);
                if (var1335) { var1399 } else { var1399 } 
            
        };
        var2260[3];
        func2461()
    } })) { (try { // block id: 2544
        ();
        var1098;
        var1153
    } finally { // block id: 2548
        Int32(-22) >> ((Int32(-87)) & 7)
    }&127..try { // block id: 2553
        Int32(85) - var1153
    } catch (_) { // block id: 2557
        ((var1153, (UInt64(14)&127..=UInt64(23)&127:(var336|1))), var98, Option<Range<Int64>>.None);
        var110 += var110;
        -var554
    }&127:(Int64(var2574)|1)) } else { func2578(optionalParam2579 : if (var4575) { Option<Option<Unit>>.None } else { var2887 } , namedParam2622 : var4580) } 
}

main(): Int64 {
    try {
        let var28 : Unit = ();
        ([var23, Option<Unit>.None, Option<Unit>.Some(var28), Option<Unit>.Some(()), Option<Unit>.None, var23, Option<Unit>.Some(var28), var23, var23, var39][1] ?? ());
        let var66 : Int16 = Int16(UInt16(217));
        let var84 : UInt32 = UInt32(Int8(Int8(UInt8(UInt8(203)))));
        func44(optionalParam45 : match ("c;H_mKE0#V") {
            case _ => 
                var66 >> ((Int16(126)) & 7);
                var var71 : Range<UInt32> = (UInt32(64)&127..=UInt32(36)&127:(Int64(Int8(-60))|1));
                var71
            
            case _ => 
                if (false) { (UInt32(183)&127..=var84&127:(89|1)) } else { (UInt32(8)&127..=UInt32(237)&127:(-118)|1) } ;
                (var84&127..var84&127:(61|1))
            
        }, optionalParam54 : match (var98) {
            case caseVar106 : UInt32 => 
                var110 * 27.0
            
            case 199 | 149 => 
                (-87.0)
            
            case _ => 
                UInt64(148);
                var98 &= UInt16(201);
                var125 ** Float64(Int32(var110) & 3)
            
        }, namedParam56 : (var784|>func129))
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var66*var66), 64)
        crccheck.updateBuffer(UInt64(var84*var84), 64)
        crccheck.updateBuffer(UInt64(var98*var98), 64)
        crccheck.updateBuffer(UInt64(var2574*var2574), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Enum1280 {

}

extend Enum2626 {

}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_unexpected_declaration_in_scope
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_expected_expr_or_decl_in
// ASSERT: scan parse_expected_left_brace
// ASSERT: scan parse_expected_case


