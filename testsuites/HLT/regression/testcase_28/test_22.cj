/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output


let var13 : Bool = (Int64(Int16(UInt16(140))) is UInt32)
public var var29 : UInt64 = UInt64(UInt8(Int8(Int8(UInt8(248)))))
public var var89 : (Unit, Bool, Float32, Bool, Float64, String, Int64) = ((), true, Float32(-60.0), (((), (UInt32(194) is Option<UInt8>), Float32(Float32(120.0)), false, (-43.0), "da=g8vWpf~", Int64((-97))) is UInt32), 70.0, "zWizO)6!hc", Int64(UInt64(145)))
var var196 : UInt16 = UInt16(243)
public var var263 : Bool = true
public var var272 : Unit = ()
public var var385 : ?Array<Array<Float64>> = ((() as (Range<UInt16>, Unit, Range<UInt64>)) as Array<Array<Float64>>)
public var var447 : Int32 = Int32(Int16(7))
var var460 : Int8 = Int8(Int8(UInt8(UInt8(84))))
let var468 : ?Range<UInt8> = (Int64(Int8(23)) as Range<UInt8>)
public var var571 : (Range<UInt16>, Unit, Range<UInt64>) = ((UInt16(146)&127..=UInt16(81)&127:105|1), (), (UInt64(122)&127..=UInt64(69)&127:46|1))
var var601 : Aggregate520 = Aggregate520()
public let var605 : ((Range<UInt16>, Unit, Range<UInt64>), Bool, (Range<UInt16>, Unit, Range<UInt64>), UInt32) = (((UInt16(13)&127..UInt16(Int16(-128))&127:(Int64(Int32(-25))|1)), (), (UInt64(152)&127..UInt64(Int32(49))&127:((-58)|1))), false, ((UInt16(100)&127..=UInt16(245)&127:((-6)|1)), (), (UInt64(Int32(-8))&127..UInt64(254)&127:(Int64(UInt64(59))|1))), UInt32(Int32(UInt16(Int8(-113)))))
public let var688 : Int64 = Int64(UInt64(195))
let var824 : Float64 = Float64(Float64((-39.0)))
public var var963 : Array<Float64> = [(-49.0), 77.0, 91.0, 11.0, (-98.0), (-25.0), (-45.0), 86.0, 12.0, 52.0]
public var var1076 : Float64 = Float64(101.0)
let var1438 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
public var var1446 : Float64 = Float64(Float32(Float32(Float32(Float32(-106.0)))))
public var var1462 : ?Range<UInt8> = Option<Range<UInt8>>.None
public var var1511 : Range<UInt16> = (UInt16(UInt16(124))&127..=UInt16(UInt16(247))&127:((-23)|1))
var var1520 : Range<UInt64> = (UInt64(146)&127..UInt64(UInt32(235))&127:((-100)|1))
var var1544 : UInt64 = UInt64(144)
public var var1567 : UInt8 = UInt8(Int8(126))
var var1592 : Range<Int16> = (Int16(-84)&127..=Int16(-73)&127:41|1)
public let var1617 : Bool = false
let var1684 : (Array<UInt32>, (Range<UInt16>, Unit, Range<UInt64>), Float64, Array<Unit>) = ([UInt32(250), UInt32(12), UInt32(219), UInt32(233), UInt32(166), UInt32(126), UInt32(160), UInt32(114), UInt32(102), UInt32(173)], ((UInt16(Int16(-34))&127..=UInt16(33)&127:((-34)|1)), (), (UInt64(UInt32(127))&127..=UInt64(34)&127:((-50)|1))), (-103.0), [(), (), (), (), (), (), (), (), (), ()])
var var1712 : Float64 = (-58.0)
public let var1766 : Bool = true
let var1825 : UInt32 = UInt32(232)
public var var1982 : ?Option<Array<Unit>> = Option<Option<Array<Unit>>>.None
var var2110 : Enum645 = Enum645.enumValue659
public var var2197 : UInt64 = UInt64(Int16(71))
let var2259 : (Array<Unit>, Range<UInt8>, Option<Float64>) = ([(), (), (), (), (), (), (), (), (), ()], (UInt8(128)&127..=UInt8(236)&127:(-74)|1), (([[54.0, (-100.0), (-9.0), (-61.0), 67.0, 123.0, (-122.0), (-62.0), (-69.0), 84.0], [(-61.0), 90.0, 29.0, 49.0, (-46.0), (-89.0), (-36.0), 114.0, 103.0, (-43.0)], [(-124.0), (-121.0), 16.0, (-76.0), (-92.0), (-78.0), 22.0, (-31.0), (-117.0), 19.0], [74.0, (-95.0), 16.0, 61.0, (-115.0), 112.0, (-72.0), (-31.0), (-54.0), 34.0], [53.0, 119.0, (-83.0), (-70.0), (-72.0), 113.0, (-95.0), 38.0, (-123.0), (-68.0)], [(-76.0), 9.0, 44.0, 74.0, (-26.0), (-103.0), 58.0, (-15.0), (-112.0), 8.0], [3.0, (-6.0), (-21.0), 17.0, 73.0, 82.0, (-22.0), (-6.0), (-31.0), 21.0], [28.0, 87.0, (-104.0), 31.0, (-57.0), 62.0, (-89.0), (-97.0), (-24.0), (-112.0)], [77.0, (-14.0), (-62.0), (-31.0), (-15.0), 46.0, (-1.0), (-30.0), (-54.0), (-100.0)], [88.0, 92.0, (-6.0), 94.0, (-99.0), 86.0, 0.0, 116.0, 38.0, (-80.0)]], [(-71.0), (-90.0), (-57.0), (-110.0), (-57.0), (-26.0), 69.0, 39.0, (-47.0), (-9.0)], Int8(61), [[(-72.0), (-16.0), 80.0, (-46.0), (-69.0), 13.0, (-117.0), (-77.0), (-29.0), (-56.0)], [(-69.0), (-99.0), 49.0, (-92.0), (-65.0), 11.0, 7.0, 17.0, (-43.0), (-12.0)], [27.0, 34.0, 82.0, (-50.0), 92.0, (-52.0), (-87.0), 100.0, (-24.0), (-58.0)], [(-80.0), 67.0, (-20.0), (-95.0), (-55.0), (-71.0), 16.0, (-19.0), (-123.0), 111.0], [(-126.0), (-42.0), 83.0, 29.0, 48.0, 47.0, (-33.0), 106.0, 38.0, (-41.0)], [24.0, 28.0, (-82.0), 57.0, (-78.0), 57.0, (-11.0), (-61.0), 39.0, 53.0], [126.0, 28.0, 23.0, (-79.0), 67.0, 14.0, (-38.0), (-53.0), 110.0, (-3.0)], [97.0, 31.0, 69.0, 8.0, 18.0, (-122.0), (-65.0), 31.0, 58.0, 53.0], [(-82.0), (-76.0), (-64.0), (-118.0), (-29.0), 26.0, (-48.0), 21.0, (-122.0), (-55.0)], [44.0, 124.0, (-127.0), (-110.0), (-80.0), (-126.0), 99.0, (-120.0), 101.0, (-65.0)]], Int64(UInt32(33)), (Int8(-92)&127..Int8(78)&127:(-108)|1)) as Float64))
var var2341 : UInt8 = UInt8(201)
public let var2416 : Float64 = Float64(65.0)
var var2477 : Int64 = (-113)
var var2519 : ?Float64 = Option<Float64>.None
public var var2645 : Float64 = 117.0
var var2691 : Float64 = Float64(Float64(Float32(-104.0)))
public let var2698 : Float64 = 101.0
public let var2724 : Float64 = Float64(Float32(Float32(Float32(43.0))))
public var var2759 : Array<Float64> = [23.0, 113.0, (-61.0), 102.0, (-32.0), (-85.0), 51.0, 26.0, 63.0, (-30.0)]
public let var2795 : Float64 = Float64(Float32(-127.0))
var var2951 : (Array<Array<Float64>>, Array<Float64>, Int8, Array<Array<Float64>>, Int64, Range<Int8>) = ([[99.0, 17.0, (-28.0), (-17.0), 97.0, 6.0, 29.0, 96.0, 103.0, 44.0], [2.0, (-30.0), (-28.0), 72.0, 48.0, (-2.0), 96.0, 12.0, (-17.0), (-101.0)], [83.0, 0.0, (-30.0), (-45.0), (-4.0), 3.0, (-11.0), 115.0, 4.0, 113.0], [(-21.0), 125.0, (-44.0), 112.0, 105.0, (-8.0), (-122.0), 21.0, 93.0, (-19.0)], [126.0, 15.0, (-90.0), 65.0, 85.0, (-1.0), (-40.0), 119.0, 112.0, 80.0], [35.0, 56.0, 68.0, (-19.0), 58.0, (-21.0), 40.0, (-25.0), (-78.0), 61.0], [(-19.0), 39.0, (-10.0), 78.0, 104.0, 22.0, (-80.0), 40.0, (-51.0), (-11.0)], [(-36.0), 20.0, (-92.0), 68.0, 26.0, (-52.0), 94.0, 23.0, (-32.0), (-59.0)], [(-35.0), 76.0, (-110.0), 29.0, 117.0, 102.0, (-117.0), 109.0, (-104.0), 13.0], [82.0, 2.0, 94.0, (-47.0), 60.0, 66.0, 6.0, (-103.0), (-44.0), 2.0]], [44.0, Float64(Float32(-18.0)), 54.0, 75.0, Float64(Float64(77.0)), 94.0, 91.0, 87.0, Float64(Float64(Float32(88.0))), Float64(Float32(-69.0))], Int8(UInt8(UInt8(7))), [[(-59.0), 9.0, 94.0, (-61.0), (-106.0), (-20.0), 116.0, 34.0, 70.0, 16.0], [106.0, 26.0, 95.0, 66.0, 6.0, (-73.0), (-54.0), 19.0, 60.0, 85.0], [(-55.0), 19.0, (-73.0), 21.0, (-82.0), 106.0, (-85.0), 104.0, 64.0, (-76.0)], [119.0, 35.0, (-48.0), 76.0, Float64(Float32(88.0)), Float64((-122.0)), Float64((-2.0)), Float64((-119.0)), Float64(76.0), Float64((-106.0))], [Float64((-51.0)), (-106.0), Float64((-9.0)), (-59.0), 8.0, 41.0, 34.0, 4.0, Float64(19.0), 36.0], [(-101.0), 118.0, Float64(61.0), (-29.0), Float64(Float32(-95.0)), (-14.0), (-102.0), (-97.0), 7.0, (-86.0)], [16.0, Float64(Float32(-107.0)), Float64(Float32(-49.0)), 90.0, 75.0, (-9.0), Float64(Float32(-25.0)), Float64((-39.0)), (-70.0), (-47.0)], [Float64((-102.0)), Float64(25.0), Float64(Float32(1.0)), 74.0, (-80.0), Float64(Float32(-65.0)), Float64(Float32(125.0)), (-55.0), (-74.0), Float64(84.0)], [(-25.0), 14.0, (-100.0), (-44.0), (-38.0), 75.0, 7.0, (-58.0), 10.0, (-61.0)], [Float64(Float32(80.0)), Float64((-78.0)), (-125.0), (-116.0), Float64(Float32(75.0)), Float64(Float32(87.0)), (-95.0), 13.0, Float64(Float32(113.0)), (-87.0)]], Int64(UInt16(60)), (Int8(Int8(Int8(60)))&127..Int8(Int8(Int8(-104)))&127:((-63)|1)))
public let var3083 : Array<Array<Float64>> = [[(-98.0), (-104.0), (-121.0), 24.0, (-16.0), 111.0, (-34.0), (-62.0), 111.0, (-39.0)], [(-68.0), 43.0, (-55.0), (-103.0), (-28.0), 21.0, (-109.0), (-10.0), (-126.0), (-14.0)], [114.0, 122.0, (-12.0), 112.0, 6.0, (-28.0), 62.0, (-39.0), 22.0, 69.0], [(-35.0), (-26.0), (-38.0), 88.0, 28.0, 72.0, (-37.0), 36.0, (-16.0), 58.0], [(-112.0), 80.0, 51.0, 25.0, (-30.0), (-8.0), (-18.0), 27.0, 112.0, 22.0], [(-103.0), (-46.0), (-96.0), 121.0, 48.0, 124.0, (-126.0), (-74.0), (-42.0), 30.0], [109.0, 105.0, 100.0, (-59.0), (-124.0), 72.0, 51.0, 62.0, (-91.0), (-30.0)], [1.0, 93.0, 22.0, 86.0, 63.0, 82.0, 76.0, (-31.0), (-127.0), (-30.0)], [28.0, 6.0, (-45.0), (-76.0), 116.0, 10.0, (-95.0), (-36.0), 53.0, 35.0], [57.0, 54.0, (-43.0), (-53.0), 92.0, (-5.0), (-46.0), (-99.0), 75.0, (-92.0)]]
public let var3272 : Range<Int32> = (Int32(63)&127..=Int32(3)&127:6|1)
var var3316 : Int16 = Int16(22)
let var3409 : Range<UInt8> = (UInt8(7)&127..UInt8(10)&127:120|1)
public let var3516 : Float32 = Float32(Float32(-21.0))
var var3541 : String = "00'N6<S+`A"
var var3610 : Int64 = 25
var var3738 : (Float64, Array<Unit>, Unit, Array<UInt8>) = (Float64(Float32(-60.0)), [(), (), (), (), (), (), (), (), (), ()], (), [UInt8(UInt8(Int8(-46))), UInt8(67), UInt8(UInt8(UInt8(250))), UInt8(21), UInt8(Int8(Int8(114))), UInt8(73), UInt8(UInt8(UInt8(32))), UInt8(102), UInt8(9), UInt8(Int8(-73))])
let var3873 : Option<Enum645> = Option<Enum645>.None
let var3973 : Unit = ()
public let var4045 : Range<UInt8> = (UInt8(127)&127..UInt8(127)&127:((-23)|1))
public let var4060 : Option<Array<Unit>> = ((41.0, [(), (), (), (), (), (), (), (), (), ()], (), [UInt8(136), UInt8(104), UInt8(52), UInt8(69), UInt8(212), UInt8(74), UInt8(147), UInt8(133), UInt8(132), UInt8(48)]) as Array<Unit>)
let var4084 : Option<Range<Int32>> = Option<Range<Int32>>.None
var var4293 : Unit = ()
let var4308 : Range<Int8> = (Int8(104)&127..Int8(123)&127:((-4)|1))

public func func50(param51 : UInt16) : Bool { // block id: 52
    false
}




public func func160(namedParam242 ! : Array<Float64>) : Option<Array<Array<Float64>>> { // block id: 243
    var var325 : Option<(Range<UInt16>, Unit, Range<UInt64>)> = ((Int32(UInt32(Int8(-98)))&127..=Int32(Int16(UInt8(129)))&127:(62|1)) as (Range<UInt16>, Unit, Range<UInt64>));
    var var341 : Unit = ();
    if (false) { // block id: 246
        var loopTimeVar250 : Range<UInt64> = (UInt64(69)&127..=UInt64(Int16(UInt8(Int8(-79))))&127:(Int64(UInt16(Int8(UInt8(251))))|1));
        for (i in loopTimeVar250 where true) {

        };
        var263 ||= false;
        let var277 : (Range<UInt16>, Unit, Range<UInt64>) = ((UInt16(186)&127..=UInt16(46)&127:(-44)|1), (), (UInt64(Int32(UInt8(182)))&127..UInt64(Int16(Int16(106)))&127:((-44)|1)));
        let var290 : UInt32 = UInt32(91);
        (((UInt16(234)&127..=UInt16(138)&127:34|1), var272, (UInt64(192)&127..UInt64(168)&127:(-4)|1)), var13, var277, var290)[0]
    } else { // block id: 293
        let var302 : Int32 = Int32(-36);
        if (var13) { // block id: 296
            var263 &&= true;
            var196;
            var302
        } else if (var13) { // block id: 305
            ((UInt16(145)&127..=UInt16(144)&127:(-8)|1), (), (UInt64(251)&127..UInt64(18)&127:33|1));
            Float32(-84.0);
            var302
        } else { // block id: 312
            var272;
            Option<Array<Array<Float64>>>.None;
            var302 | var302
        };
        [117.0, 84.0, (-14.0), (-23.0), (-101.0), 95.0, 69.0, (-83.0), (-58.0), 61.0];
        var var347 : Int64 = (-43);
        (var325 ?? ((UInt16(53)&127..=UInt16(182)&127:((-36)|1)), var341, (var29&127..UInt64(232)&127:(var347|1))))
    };
    let var352 : (Int16, UInt8, Option<Array<Array<Float64>>>, Range<UInt8>, Int16, Range<Int16>, Int32) = (Int16(Int16(UInt8(Int8(-125)))), UInt8(Int8(59)), (Int16(-111) as Array<Array<Float64>>), (UInt8(Int8(21))&127..UInt8(181)&127:((-66)|1)), Int16(-47), (Int16(-118)&127..Int16(-117)&127:59|1), Int32(UInt32(Int8(UInt8(126)))));
    var352[2]
}

func func216(param217 : Float64) : Array<Float64> { // block id: 218
    var var222 : (Bool, Array<UInt32>, Range<Int32>, Range<Int16>) = (true, [UInt32(228), UInt32(243), UInt32(97), UInt32(137), UInt32(67), UInt32(151), UInt32(57), UInt32(170), UInt32(99), UInt32(72)], (Int32(98)&127..Int32(26)&127:1|1), (Int16(115)&127..Int16(-126)&127:(Int64(UInt64(246))|1)));
    var222[2];
    (func160(namedParam242 : [(-118.0), 65.0, 71.0, 86.0, (-25.0), 56.0, 114.0, (-49.0), (-16.0), 81.0]) ?? [[28.0, 78.0, 105.0, (-58.0), 62.0, 22.0, 30.0, 71.0, 106.0, 88.0], [(-120.0), 6.0, (-32.0), (-44.0), (-31.0), 98.0, (-115.0), (-105.0), (-80.0), 32.0], [(-17.0), (-98.0), (-77.0), (-7.0), 47.0, (-83.0), (-16.0), (-92.0), (-57.0), 9.0], [16.0, 3.0, (-74.0), 40.0, 66.0, (-107.0), 41.0, 78.0, (-36.0), 78.0], [102.0, (-16.0), (-111.0), (-7.0), (-94.0), (-53.0), 15.0, 67.0, 34.0, (-59.0)], [48.0, 78.0, 67.0, (-100.0), (-16.0), 38.0, (-47.0), (-109.0), (-120.0), (-109.0)], [(-5.0), (-48.0), (-53.0), 111.0, (-12.0), 122.0, (-124.0), (-77.0), 34.0, 110.0], [(-82.0), (-70.0), 88.0, (-95.0), (-55.0), (-16.0), 9.0, 106.0, (-33.0), (-92.0)], [58.0, 92.0, (-115.0), 116.0, 3.0, 101.0, (-58.0), (-103.0), 47.0, 0.0], [55.0, (-48.0), 75.0, 78.0, (-15.0), 115.0, 5.0, 92.0, 43.0, (-13.0)]])[6]
}

public func func382() : UInt32 { // block id: 383
    var385;
    UInt32(241)
}

public struct Aggregate520 {
    public init() { // block id: 522

    }
;
    static let var525 : (Unit, Bool, Float32, Bool, Float64, String, Int64) = ((), false, Float32(46.0), false, 38.0, "x\\.SrAYC63", (-5));
    public static let var3717 : (Aggregate520, Unit, UInt64, Int16) = (Aggregate520(), (), UInt64(171), Int16(2))
}

public func func516(param517 : Array<Float64>) : Option<(Range<UInt16>, Unit, Range<UInt64>)> { // block id: 518
    Aggregate520.var525;
    var var537 : Option<(Range<UInt16>, Unit, Range<UInt64>)> = Option<(Range<UInt16>, Unit, Range<UInt64>)>.None;
    (match (var537) {
        case _ => 
            var var545 : ((Range<UInt16>, Unit, Range<UInt64>), Bool, (Range<UInt16>, Unit, Range<UInt64>), UInt32) = (((UInt16(UInt16(237))&127..UInt16(91)&127:(Int64(UInt32(152))|1)), (), (UInt64(186)&127..UInt64(99)&127:(-102)|1)), true, ((UInt16(Int8(0))&127..UInt16(UInt16(147))&127:(Int64(UInt32(217))|1)), (), (UInt64(16)&127..UInt64(59)&127:(-62)|1)), UInt32(UInt8(75)));
            if (var263) { var545 } else { (var571, true, var571, UInt32(122)) } 
        
        case _ => 
            let var583 : ((Range<UInt16>, Unit, Range<UInt64>), Bool, (Range<UInt16>, Unit, Range<UInt64>), UInt32) = (((UInt16(220)&127..UInt16(147)&127:(-120)|1), (), (UInt64(253)&127..UInt64(160)&127:35|1)), (Option<UInt8>.Some(UInt8(95)) is Range<Int8>), ((UInt16(94)&127..=UInt16(34)&127:42|1), (), (UInt64(143)&127..UInt64(193)&127:(-26)|1)), UInt32(108));
            var583
        
        case _ => 
            var601;
            UInt16(12);
            var605
        
        case _ => 
            var605
        
    } as (Range<UInt16>, Unit, Range<UInt64>))
}

public enum Enum645 {
    defaultValue |
    enumValue659
}

public func func511(param512 : (Int16, UInt8, Option<Array<Array<Float64>>>, Range<UInt8>, Int16, Range<Int16>, Int32)) : Option<Array<Array<Float64>>> { // block id: 513
    let var653 : Option<Enum645> = Option<Enum645>.Some(Enum645.defaultValue);
    let var667 : Range<UInt16> = (UInt16(Int16(UInt16(79)))&127..UInt16(182)&127:(Int64(UInt32(20))|1));
    let var732 : Array<Float64> = Array<Float64>(10){ i => (-26.0) };
    match ((var732|>{ lambdaParameter642 : Array<Float64> => var var677 : Range<UInt64> = (UInt64(118)&127..=UInt64(65)&127:122|1); var var684 : UInt8 = UInt8(252); var var694 : Option<(Range<UInt16>, Unit, Range<UInt64>)> = Option<(Range<UInt16>, Unit, Range<UInt64>)>.Some(((UInt16(226)&127..=UInt16(195)&127:(Int64(Int16(13))|1)), (), (UInt64(214)&127..UInt64(52)&127:(-88)|1))); match ((var653 ?? (var653 ?? Enum645.enumValue659))) {
            case enumValue659 => 
                var272;
                Option<(Range<UInt16>, Unit, Range<UInt64>)>.Some((var667, var272, var677))
            
            case enumValue659 => 
                (var684&127..=UInt8(67)&127:(var688|1));
                if (var263) { var694 } else { var694 } 
            
            case caseVar707 => 
                if (false) { var694 } else { var694 } 
            
            case _ => 
                var605;
                Option<(Range<UInt16>, Unit, Range<UInt64>)>.None
            
            case _ => 
                var var726 : Float64 = (-33.0);
                (var272, false, Float32(116.0), var263, var726, ",6\",P4h1e(", 35);
                var694
            
        } })) {
        case caseVar750 : Aggregate520 => 
            var263 &&= var263;
            if (false) { Option<Array<Array<Float64>>>.None } else { var385 } 
        
        case _ => 
            var385
        
        case caseVar765 : Range<Int8> => 
            var385
        
        case _ => 
            if (var13) { var385 } else { var385 } 
        
    }
}

func func392(param393 : (Float64) -> Array<Float64>) : Array<Array<Float64>> { // block id: 396
    let var418 : UInt8 = UInt8(92);
    var var426 : UInt32 = UInt32(117);
    var loopTimeVar485 : Int64 = 0;
    do {
        loopTimeVar485++;
        match (var447) {
            case caseVar452 => 
                Option<Range<UInt8>>.None
            
            case _ : Rune => 
                var460 -= var460;
                var272;
                var468
            
            case _ => 
                ();
                Option<Range<UInt8>>.None
            
        };
        try (resource = Class1372()) { // block id: 477
            var272;
            var263 ||= var263
        } finally { // block id: 482
            ()
        }
    } while ((match (var385) {
        case caseVar403 : Rune => 
            var var406 : UInt8 = UInt8(47);
            var406
        
        case caseVar410 => 
            var263 &&= var263;
            UInt8(154) & var418
        
        case caseVar422 => 
            var426 *= var426;
            var196 <<= ((var196) & 7);
            UInt8(102)
        
        case caseVar435 : (Int16, UInt8, Option<Array<Array<Float64>>>, Range<UInt8>, Int16, Range<Int16>, Int32) => 
            UInt32(35);
            UInt8(119)
        
        case _ => 
            UInt8(87)
        
    } <= UInt8(UInt8(215))) && loopTimeVar485 < 100 ) ;
    var var491 : Float64 = Float64(Float64(Float32(Float32(Float32(-76.0)))));
    let var507 : Array<Array<Float64>> = [[125.0, (-96.0), 7.0, 21.0, (-16.0), 120.0, (-122.0), 100.0, (-118.0), (-122.0)], [28.0, (-19.0), 22.0, 66.0, (-20.0), (-45.0), (-125.0), 15.0, (-4.0), (-114.0)], [85.0, 76.0, (-115.0), 118.0, (-96.0), 38.0, (-3.0), 31.0, (-22.0), 53.0], [(-122.0), (-48.0), 41.0, (-84.0), (-12.0), 109.0, (-68.0), (-79.0), 111.0, (-115.0)], [(-23.0), 64.0, (-117.0), 7.0, (-48.0), (-112.0), (-17.0), (-87.0), (-73.0), (-104.0)], [(-75.0), 66.0, (-79.0), 96.0, 81.0, (-23.0), 11.0, 50.0, 108.0, (-66.0)], [51.0, (-55.0), 103.0, (-53.0), (-1.0), 17.0, 36.0, (-4.0), (-7.0), 44.0], [(-38.0), (-115.0), (-7.0), (-2.0), (-41.0), 120.0, 102.0, (-82.0), (-19.0), (-126.0)], [(-40.0), 88.0, (-39.0), 27.0, 38.0, (-20.0), (-119.0), (-72.0), (-48.0), (-108.0)], [(-109.0), (-100.0), 86.0, 65.0, (-30.0), 20.0, (-60.0), 98.0, (-18.0), (-83.0)]];
    var var776 : (Int16, UInt8, Option<Array<Array<Float64>>>, Range<UInt8>, Int16, Range<Int16>, Int32) = (Int16(-119), UInt8(121), (Int8(117) as Array<Array<Float64>>), (UInt8(27)&127..=UInt8(25)&127:(Int64(Int32(29))|1)), Int16(-39), (Int16(Int8(Int8(-28)))&127..=Int16(93)&127:(Int64(Int64(UInt16(39)))|1)), Int32(Int32(15)));
    var var803 : Array<Float64> = [(-50.0), (-51.0), 34.0, (-126.0), (-65.0), (-66.0), (-59.0), (-41.0), 122.0, 106.0];
    let var820 : Float64 = (-108.0);
    if ((([var491, (-93.0), var491, var491, 67.0, var491, (-33.0), var491, var491, 17.0] as UInt8) is Rune)) { var507 } else { ((var776|>func511) ?? (var385 ?? [[(-16.0), (-116.0), (-55.0), (-12.0), 103.0, (-73.0), 75.0, 25.0, (-81.0), (-41.0)], var803, [66.0, var491, 63.0, (-62.0), var491, (-71.0), var491, 7.0, var491, var491], var803, var803, [var820, var820, var824, var820, (-115.0), var491, var824, var824, var824, var491], [var491, var824, var491, (-20.0), (-36.0), var820, var820, var824, var491, 72.0], [92.0, (-81.0), 23.0, (-27.0), 16.0, 6.0, 94.0, (-36.0), 111.0, 105.0], [(-1.0), var491, var820, 55.0, var824, 73.0, var491, 78.0, (-33.0), var491], [(-76.0), 104.0, (-108.0), 66.0, 80.0, 18.0, 119.0, (-68.0), (-77.0), (-6.0)]])) } 
}

public open class Class1372 <: Resource {
    public init() { // block id: 1374

    }
;
    static let var1377 : UInt64 = UInt64(31);
    static let var1978 : Unit = ();
    private var var2468 : Range<UInt8> = (UInt8(41)&127..=UInt8(1)&127:((-75)|1));
    var var2497 : Unit = ();
    static var var2534 : Int8 = Int8(22);
    public func func2442(optionalParam2443 ! : ((Int16, UInt8, Option<Array<Array<Float64>>>, Range<UInt8>, Int16, Range<Int16>, Int32)) -> Option<Array<Array<Float64>>> = func511, optionalParam2447 ! : (Array<Unit>, Range<UInt8>, Option<Float64>) = ([(), (), (), (), (), (), (), (), (), ()], (UInt8(11)&127..=UInt8(190)&127:(-108)|1), ([(), (), (), (), (), (), (), (), (), ()] as Float64))) : Float64 { // block id: 2463
        var loopTimeVar2500 : Int64 = 0;
        while ((([var2468, (var2341&127..UInt8(47)&127:(var2477|1)), (var2341&127..=UInt8(72)&127:((-49)|1)), (UInt8(88)&127..=UInt8(18)&127:(-124)|1), (UInt8(212)&127..=UInt8(119)&127:(85|1)), var2468, var2468, var2468, (UInt8(110)&127..UInt8(3)&127:(-103)|1), (UInt8(113)&127..=UInt8(207)&127:(-6)|1)] is Range<Int64>)) && loopTimeVar2500 < 100 ) {
            loopTimeVar2500++;
            this.var2497
        };
        (match ((-16)) {
            case _ => 
                var var2508 : Int64 = Int64(UInt32(UInt32(21)));
                var2508 <<= ((var688) & 7);
                121 ** (var2508 & 3);
                if (var1766) { var2519 } else { Option<Float64>.Some(51.0) } 
            
        } ?? try { // block id: 2525
            ();
            var1978;
            var2416
        } catch (e: Exception) { // block id: 2529
            var824
        } finally { // block id: 2531
            var2534 -= Int8(-88);
            var571;
            -(-112.0)
        } ** Float64(Int32(if (false) { // block id: 2542
            ();
            (-28.0)
        } else { // block id: 2545
            if (true) { var2110 } else { var2110 } ;
            var1446
        }) & 3))
    }
;
    public static var var2602 : UInt8 = UInt8(245);
    static let var3353 : Bool = true;
    public init(param3299 : (Range<UInt8>, UInt64) -> Array<Unit>, optionalParam3303 ! : Array<UInt32> = [UInt32(107), UInt32(137), UInt32(157), UInt32(15), UInt32(58), UInt32(186), UInt32(136), UInt32(218), UInt32(98), UInt32(168)], optionalParam3305 ! : Array<Range<UInt8>> = [(UInt8(55)&127..=UInt8(117)&127:50|1), (UInt8(6)&127..UInt8(42)&127:109|1), (UInt8(237)&127..=UInt8(74)&127:(-128)|1), (UInt8(234)&127..UInt8(137)&127:119|1), (UInt8(156)&127..=UInt8(146)&127:(-117)|1), (UInt8(154)&127..UInt8(207)&127:(-126)|1), (UInt8(6)&127..=UInt8(178)&127:(-45)|1), (UInt8(194)&127..=UInt8(206)&127:(-95)|1), (UInt8(95)&127..=UInt8(173)&127:36|1), (UInt8(138)&127..UInt8(3)&127:8|1)], namedParam3307 ! : Option<UInt8>) { // block id: 3308
        var loopTimeVar3358 : Range<UInt64> = (UInt64(14)&127..=UInt64(UInt32(201))&127:(13|1));
        for (i in loopTimeVar3358 where if (([var1592, (var3316&127..=Int16(59)&127:(63|1)), (Int16(-128)&127..Int16(104)&127:(-2)|1), var1592, (var3316&127..var3316&127:(var2477|1)), (Int16(76)&127..=Int16(117)&127:117|1), (Int16(-16)&127..Int16(-65)&127:(-25)|1), (Int16(64)&127..=Int16(100)&127:110|1), (Int16(101)&127..=Int16(34)&127:70|1), var1592] is Option<Float64>)) { // block id: 3331
            var2477 **= ((-18) & 3);
            var605;
            false
        } else { // block id: 3337
            (UInt16(188)&127..=UInt16(227)&127:(-69)|1);
            ();
            false
        }) {
            if (true) { // block id: 3344
                var3316--;
                ()
            } else if (var263) { // block id: 3349
                ()
            };
            if (var3353) { // block id: 3355
                var2519;
                ()
            }
        };
        var loopTimeVar3389 : Int64 = 0;
        do {
            loopTimeVar3389++;
            let var3384 : ?Unit = Option<Unit>.None;
            (var3384 ?? var272);
            ()
        } while ((try { // block id: 3366
            (UInt64(216)&127..=var2197&127:(var2477|1));
            (-22) < var2477
        } finally { // block id: 3374
            var var3377 : UInt32 = UInt32(214);
            var3377 ^= UInt32(222);
            var1617
        }) && loopTimeVar3389 < 100 ) 
    }
;
    private static var var3726 : Class1372 = Class1372();
    protected func func3729(namedParam3730 ! : (UInt32) -> (Array<Unit>, Range<UInt8>, Option<Float64>), namedParam3733 ! : Option<Option<Array<Unit>>>) : Unit { // block id: 3734
        var3738[2];
        try { // block id: 3768
            [(), (), (), (), (), (), (), (), (), ()];
            var1567 **= (UInt8(97) & 3);
            var var3775 : Array<UInt8> = [UInt8(UInt8(Int8(95))), UInt8(UInt8(Int8(79))), UInt8(157), UInt8(134), UInt8(Int8(39)), UInt8(UInt8(96)), UInt8(Int8(-70)), UInt8(102), UInt8(231), UInt8(Int8(Int8(-2)))];
            (var3775, (UInt64(163)&127..=UInt64(118)&127:87|1), var1825)
        } catch (e: Exception) { // block id: 3798
            var var3800 : (Array<UInt8>, Range<UInt64>, UInt32) = ([UInt8(112), UInt8(194), UInt8(34), UInt8(160), UInt8(216), UInt8(30), UInt8(203), UInt8(65), UInt8(201), UInt8(216)], (UInt64(115)&127..=UInt64(119)&127:(-119)|1), UInt32(Int8(112)));
            var3800
        } finally { // block id: 3806
            var var3810 : (Array<UInt8>, Range<UInt64>, UInt32) = ([UInt8(203), UInt8(UInt8(Int8(112))), UInt8(191), UInt8(16), UInt8(Int8(32)), UInt8(Int8(28)), UInt8(151), UInt8(142), UInt8(UInt8(UInt8(89))), UInt8(UInt8(Int8(37)))], (UInt64(35)&127..UInt64(18)&127:66|1), UInt32(Int16(-93)));
            var var3840 : UInt8 = UInt8(125);
            if (true) { var3810 } else { ([var2341, UInt8(156), UInt8(94), var3840, UInt8(39), UInt8(61), UInt8(161), UInt8(219), UInt8(167), UInt8(175)], (UInt64(164)&127..UInt64(237)&127:18|1), var1825) } 
        }[2];
        let var3862 : ?Unit = Option<Unit>.None;
        var loopTimeVar3867 : Int64 = 0;
        do {
            loopTimeVar3867++;
            (var3862 ?? ());
            ()
        } while ((try { // block id: 3853
            var1766
        } finally { // block id: 3855
            Option<Enum645>.None;
            ();
            var3353
        }) && loopTimeVar3867 < 100 ) 
    }
;
    public static var var3880 : Option<Array<Unit>> = Option<Array<Unit>>.None;
    private static var var4005 : Range<Int64> = ((-76)&127..=(-91)&127:((-95)|1));
    public static func func3666(param3667 : Option<Option<Array<Unit>>>, namedParam3668 ! : (Option<Array<Unit>>, UInt16, ((Range<UInt16>, Unit, Range<UInt64>), Bool, (Range<UInt16>, Unit, Range<UInt64>), UInt32)) -> Range<UInt32>, namedParam3673 ! : Range<Int32>, optionalParam3674 ! : (Array<UInt32>, (Range<UInt16>, Unit, Range<UInt64>), Float64, Array<Unit>) = ([UInt32(231), UInt32(126), UInt32(90), UInt32(214), UInt32(7), UInt32(16), UInt32(47), UInt32(187), UInt32(83), UInt32(57)], ((UInt16(UInt16(184))&127..UInt16(Int8(-63))&127:(69|1)), (), (UInt64(85)&127..=UInt64(229)&127:(Int64(UInt64(154))|1))), 29.0, [(), (), (), (), (), (), (), (), (), ()])) : UInt8 { // block id: 3702
        if (var89[3]) { (var601, (), UInt64(94), Int16(28)) } else { (Aggregate520.var3717) } [0];
        var var3869 : (UInt32) -> (Array<Unit>, Range<UInt8>, Option<Float64>) = func1956;
        var3726.func3729(namedParam3730 : var3869, namedParam3733 : match (var3873) {
            case None => 
                ();
                var3880;
                var1982
            
            case _ => 
                UInt64(214);
                var var3888 : Bool = false;
                var var3893 : ?(Array<Unit>, Range<UInt8>, Option<Float64>) = Option<(Array<Unit>, Range<UInt8>, Option<Float64>)>.Some(([(), (), (), (), (), (), (), (), (), ()], (UInt8(139)&127..=UInt8(87)&127:14|1), ([84.0, (-106.0), (-68.0), (-125.0), (-95.0), 100.0, (-87.0), (-70.0), (-66.0), (-61.0)] as Float64)));
                if (var3888) { Option<(Array<Unit>, Range<UInt8>, Option<Float64>)>.Some(var2259) } else { var3893 } ;
                param3667
            
        });
        let var4017 : (Array<UInt8>, Range<UInt64>, UInt32) = ([UInt8(202), UInt8(187), UInt8(80), UInt8(15), UInt8(144), UInt8(39), UInt8(232), UInt8(14), UInt8(219), UInt8(253)], (UInt64(40)&127..UInt64(UInt16(Int8(99)))&127:((-71)|1)), UInt32(90));
        match (if (match (var13) {
                case caseVar3917 => 
                    UInt32(3) > UInt32(18)
                
                case true | false => 
                    var196 %= ((UInt16(45)) | 1);
                    var263
                
                case true | false => 
                    false && true
                
                case false | true => 
                    var var3940 : Int64 = Int64(Int32(Int8(115)));
                    (var3940&127..103&127:(118|1));
                    var13
                
                case _ => 
                    let var3950 : Bool = false;
                    var3950
                
            }) { // block id: 3952
                Int8(73)
            } else if (((var824, [(), (), (), (), (), (), (), (), (), ()], (), [UInt8(22), UInt8(234), UInt8(214), UInt8(24), UInt8(167), var2602, UInt8(203), UInt8(57), UInt8(123), UInt8(33)]) is Option<(Range<UInt16>, Unit, Range<UInt64>)>)) { // block id: 3970
                ();
                var3973;
                Int8(35)
            } else { // block id: 3976
                var29 -= UInt64(12);
                var2951;
                Int8(99)
            }) {
            case 72 | 35 => 
                var3516;
                var1567 % ((UInt8(160)) | 1)
            
            case _ : UInt8 => 
                UInt8(74)
            
            case -62 => 
                var1567 ^ UInt8(176)
            
            case -122 | 14 | 125 => 
                if (false) { var4005 } else { (50&127..=(-116)&127:99|1) } ;
                UInt8(10) % ((var2602) | 1)
            
            case _ => 
                var4017;
                var2341
            
        }
    }

    public func isClosed(): Bool { return false }
    public func close(): Unit {}
}

public func func1379(param217 : Float64) : Array<Float64> { // block id: 218
    var var222 : (Bool, Array<UInt32>, Range<Int32>, Range<Int16>) = (true, [UInt32(228), UInt32(243), UInt32(97), UInt32(137), UInt32(67), UInt32(151), UInt32(57), UInt32(170), UInt32(99), UInt32(72)], (Int32(98)&127..Int32(26)&127:1|1), (Int16(115)&127..Int16(-126)&127:(Int64(UInt64(246))|1)));
    var222[2];
    (func160(namedParam242 : [(-118.0), 65.0, 71.0, 86.0, (-25.0), 56.0, 114.0, (-49.0), (-16.0), 81.0]) ?? [[28.0, 78.0, 105.0, (-58.0), 62.0, 22.0, 30.0, 71.0, 106.0, 88.0], [(-120.0), 6.0, (-32.0), (-44.0), (-31.0), 98.0, (-115.0), (-105.0), (-80.0), 32.0], [(-17.0), (-98.0), (-77.0), (-7.0), 47.0, (-83.0), (-16.0), (-92.0), (-57.0), 9.0], [16.0, 3.0, (-74.0), 40.0, 66.0, (-107.0), 41.0, 78.0, (-36.0), 78.0], [102.0, (-16.0), (-111.0), (-7.0), (-94.0), (-53.0), 15.0, 67.0, 34.0, (-59.0)], [48.0, 78.0, 67.0, (-100.0), (-16.0), 38.0, (-47.0), (-109.0), (-120.0), (-109.0)], [(-5.0), (-48.0), (-53.0), 111.0, (-12.0), 122.0, (-124.0), (-77.0), 34.0, 110.0], [(-82.0), (-70.0), 88.0, (-95.0), (-55.0), (-16.0), 9.0, 106.0, (-33.0), (-92.0)], [58.0, 92.0, (-115.0), 116.0, 3.0, 101.0, (-58.0), (-103.0), 47.0, 0.0], [55.0, (-48.0), 75.0, 78.0, (-15.0), 115.0, 5.0, 92.0, 43.0, (-13.0)]])[6]
}



func func1442(param1443 : Range<Int16>) : Float64 { // block id: 1444
    var1446
}

func func1422<T0>(param1423 : String) : Float64 { // block id: 1424
    ((Int32(-36) as Array<Unit>) ?? if (var13) { [(), (), (), (), (), (), (), (), (), ()] } else { var1438 } )[9];
    let var1453 : (Range<Int16>) -> Float64 = { lambdaParameter1456 : Range<Int16> => 109.0 };
    match (match (var1462) {
            case caseVar1466 => 
                var var1474 : Float64 = (-112.0);
                Option<Array<Array<Float64>>>.Some([[(-61.0), 91.0, 97.0, 9.0, 0.0, (-92.0), (-21.0), (-1.0), 70.0, (-36.0)], [95.0, 118.0, (-43.0), (-78.0), 13.0, 93.0, (-57.0), (-38.0), (-38.0), (-110.0)], [var1474, var824, var1076, var1446, 20.0, 35.0, 53.0, 73.0, 82.0, 39.0], [(-102.0), (-40.0), (-68.0), 97.0, (-87.0), 31.0, (-93.0), 111.0, 57.0, (-126.0)], [var1474, var1474, (-17.0), 74.0, var1446, var1446, 20.0, var824, 110.0, (-2.0)], [(-87.0), (-97.0), 15.0, (-21.0), (-114.0), (-23.0), (-110.0), (-74.0), (-33.0), (-82.0)], var963, [(-73.0), (-4.0), 117.0, (-91.0), (-25.0), (-15.0), 108.0, (-32.0), (-6.0), 70.0], var963, var963]);
                (UInt64(219)&127..=UInt64(140)&127:(-38)|1);
                let var1527 : UInt32 = UInt32(UInt16(64));
                if (false) { var605 } else { (var571, var13, (var1511, (), var1520), var1527) } 
            
            case caseVar1532 : UInt16 => 
                if (false) { (var571, var13, ((UInt16(81)&127..UInt16(92)&127:103|1), var272, (var1544&127..=UInt64(20)&127:((-34)|1))), UInt32(207)) } else { ((var1511, (), (UInt64(115)&127..=var29&127:(var688|1))), var263, ((UInt16(254)&127..UInt16(248)&127:7|1), (), (UInt64(17)&127..=UInt64(7)&127:(-47)|1)), UInt32(159)) } 
            
            case _ => 
                var1567 += UInt8(115);
                if (true) { (var571, false, ((UInt16(247)&127..=var196&127:(var688|1)), var272, var1520), UInt32(85)) } else { var605 } 
            
        }) {
        case ((_ : Range<UInt8>,_ : (Range<UInt16>, Unit, Range<UInt64>),_),caseVar1587,(_,_,caseVar1588 : Int8),_ : Option<(Range<UInt16>, Unit, Range<UInt64>)>) => 
            var272;
            var1592
        
        case _ : Option<Array<Float64>> => 
            ();
            if (var13) { param1423 } else { param1423 } ;
            if (false) { (Int16(5)&127..Int16(82)&127:(var688|1)) } else { var1592 } 
        
        case _ => 
            var272;
            var263 ||= true;
            if (var1617) { (Int16(-36)&127..=Int16(-62)&127:(-20)|1) } else { (Int16(43)&127..=Int16(117)&127:110|1) } 
        
    }|>var1453
}


public func func378<T0, T1>(param379 : Float32) : Array<Float64> { // block id: 380
    func382();
    let var884 : Range<Int64> = (Int64(Int16(-64))&127..=Int64(UInt8(Int8(55)))&127:(14|1));
    let var949 : Float64 = (-62.0);
    let var1142 : (Array<Array<Float64>>, Array<Float64>, Int8, Array<Array<Float64>>, Int64, Range<Int8>) = ([[21.0, 113.0, 2.0, (-120.0), (-116.0), 61.0, (-103.0), (-88.0), 14.0, 12.0], [97.0, 36.0, 113.0, (-62.0), (-102.0), 18.0, (-86.0), 119.0, 85.0, (-33.0)], [(-57.0), Float64(45.0), Float64(Float32(20.0)), Float64(Float32(-17.0)), (-60.0), Float64(Float32(-59.0)), Float64(Float32(27.0)), 34.0, Float64(Float32(96.0)), 9.0], [69.0, Float64(Float32(-21.0)), Float64(Float32(49.0)), Float64(Float32(-90.0)), Float64(Float32(44.0)), Float64(38.0), Float64((-103.0)), Float64(108.0), Float64(64.0), 113.0], [(-2.0), Float64(65.0), Float64((-111.0)), Float64(Float32(3.0)), Float64(Float32(25.0)), 31.0, Float64(Float32(-40.0)), 126.0, Float64(Float32(-91.0)), 63.0], [(-86.0), (-55.0), Float64(Float32(67.0)), (-107.0), Float64(Float32(-5.0)), Float64((-112.0)), 99.0, Float64((-73.0)), Float64((-119.0)), 50.0], [(-128.0), (-61.0), (-72.0), Float64(Float32(54.0)), (-46.0), (-48.0), Float64((-108.0)), (-104.0), (-63.0), 109.0], [Float64((-36.0)), Float64(Float32(-14.0)), Float64((-21.0)), 35.0, 15.0, (-110.0), Float64(65.0), 63.0, (-62.0), 103.0], [Float64(124.0), Float64(Float32(34.0)), Float64(Float32(-2.0)), (-112.0), Float64((-114.0)), Float64((-15.0)), Float64(Float32(-54.0)), 36.0, Float64((-95.0)), (-22.0)], [23.0, 6.0, (-16.0), 66.0, 121.0, 94.0, 17.0, 26.0, (-63.0), 42.0]], [(-62.0), (-9.0), 39.0, 104.0, (-110.0), 20.0, (-95.0), (-46.0), (-40.0), (-106.0)], Int8(UInt8(90)), [[(-72.0), Float64(Float32(57.0)), (-106.0), Float64(Float32(70.0)), 14.0, 23.0, Float64(Float32(-103.0)), Float64(Float32(-43.0)), (-97.0), (-87.0)], [38.0, (-21.0), 8.0, (-57.0), Float64((-119.0)), Float64((-90.0)), Float64((-58.0)), (-66.0), (-110.0), 76.0], [36.0, 58.0, (-26.0), (-84.0), (-78.0), (-1.0), 19.0, (-74.0), 37.0, (-70.0)], [47.0, 88.0, (-27.0), (-97.0), (-15.0), 81.0, 48.0, (-10.0), (-5.0), (-91.0)], [Float64((-55.0)), 94.0, (-71.0), 51.0, 69.0, (-33.0), Float64(26.0), Float64(96.0), (-34.0), Float64(94.0)], [(-88.0), (-109.0), (-128.0), 115.0, 12.0, 18.0, 4.0, 67.0, 55.0, 16.0], [31.0, (-29.0), Float64(Float32(-128.0)), Float64((-111.0)), (-87.0), Float64(Float32(-29.0)), Float64(Float32(-117.0)), Float64(Float32(-83.0)), (-25.0), Float64(Float32(32.0))], [Float64(Float32(111.0)), Float64(Float32(-93.0)), Float64((-99.0)), 96.0, (-58.0), 7.0, Float64(68.0), Float64(Float32(-36.0)), (-117.0), 104.0], [Float64(Float32(28.0)), Float64((-59.0)), Float64(Float32(-124.0)), (-119.0), Float64(123.0), Float64((-22.0)), (-80.0), Float64(Float32(-4.0)), Float64(63.0), Float64(Float32(-45.0))], [(-111.0), (-30.0), 80.0, 78.0, 53.0, 88.0, (-49.0), 63.0, (-45.0), (-18.0)]], Int64(Int16(98)), (Int8(38)&127..=Int8(10)&127:85|1));
    ({ lambdaParameter1383 : Float64 => func1379((-13.0)) }|>{ lambdaParameter861 : (Float64) -> Array<Float64> => func func864(optionalParam865 ! : Range<UInt32> = (UInt32(Int16(UInt8(Int8(126))))&127..=UInt32(213)&127:(Int64(Int8(29))|1)), namedParam874 ! : UInt64) : Array<Array<Float64>> { // block id: 875
        var var980 : Int16 = Int16(Int8(100));
        var var994 : Float64 = (-81.0);
        if (if (if (var13) { // block id: 880
            if (var263) { var884 } else { (14&127..=51&127:(var688|1)) } ;
            var13
        } else if (true) { // block id: 898
            var272;
            if (true) { [(-121.0), 33.0, (-106.0), 23.0, (-92.0), 104.0, (-79.0), (-29.0), 5.0, (-75.0)] } else { [54.0, (-85.0), (-36.0), 67.0, 44.0, var824, var824, (-91.0), (-59.0), (-108.0)] } ;
            var460 > var460
        } else { // block id: 917
            (-68.0) >= 105.0
        }) { // block id: 921
            var13;
            var272;
            var460 <= Int8(-104)
        } else { // block id: 927
            ();
            false || true
        }) { match (if (var13) { // block id: 935
                optionalParam865;
                [[var824, 13.0, var824, (-114.0), 112.0, (-45.0), var824, 59.0, (-27.0), var949], [var824, 47.0, 1.0, var824, 101.0, 115.0, var949, (-103.0), var949, var949], var963, [78.0, (-75.0), 82.0, (-73.0), (-107.0), 50.0, 23.0, 64.0, (-83.0), (-61.0)], var963, [57.0, (-66.0), 38.0, 74.0, (-81.0), 67.0, 46.0, (-104.0), 64.0, (-98.0)], [(-48.0), 100.0, (-52.0), 118.0, 35.0, (-37.0), (-4.0), (-113.0), (-116.0), (-75.0)], [(-101.0), 76.0, (-46.0), (-122.0), 120.0, 7.0, 21.0, (-77.0), (-109.0), 8.0], var963, var963];
                var263 ||= true
            } else if (var13) { // block id: 976
                var272;
                var980 %= ((var980) | 1)
            }) {
            case _ : Array<Array<Float64>> => 
                var272;
                [var963, var963, [54.0, 2.0, 16.0, 83.0, (-36.0), (-29.0), 108.0, 89.0, 39.0, 113.0], [var994, 99.0, 53.0, var949, 36.0, (-60.0), (-5.0), 29.0, var949, 8.0], var963, [60.0, (-116.0), var824, 73.0, (-115.0), 15.0, var824, 116.0, var994, var824], var963, [var824, (-128.0), 85.0, var824, (-92.0), (-105.0), var949, 50.0, (-55.0), 23.0], var963, [(-62.0), 119.0, (-44.0), 93.0, 70.0, 13.0, (-69.0), 17.0, 51.0, 94.0]]
            
            case caseVar1033 : Int64 => 
                [[56.0, 75.0, 20.0, 17.0, (-115.0), (-26.0), 110.0, (-85.0), (-76.0), (-61.0)], [(-108.0), 66.0, (-116.0), 103.0, 16.0, (-7.0), 105.0, (-99.0), 110.0, (-113.0)], var963, var963, [(-113.0), (-72.0), var824, var824, var824, var949, (-14.0), (-36.0), (-26.0), var994], [61.0, 38.0, (-60.0), 55.0, (-128.0), (-63.0), 120.0, 101.0, 109.0, 93.0], var963, [102.0, 66.0, (-20.0), 13.0, 97.0, (-28.0), (-23.0), (-32.0), 82.0, 116.0], [var949, 60.0, var994, (-58.0), var949, var949, var994, (-72.0), 122.0, var824], [var994, 77.0, (-43.0), (-9.0), var824, (-34.0), var994, var994, (-47.0), var1076]]
            
            case _ => 
                var272;
                [[(-28.0), 22.0, 113.0, 110.0, (-28.0), 84.0, 3.0, 87.0, (-82.0), (-36.0)], [53.0, (-118.0), 66.0, (-120.0), 89.0, 106.0, 12.0, (-56.0), 59.0, (-64.0)], [(-47.0), (-126.0), 19.0, 20.0, 95.0, (-20.0), (-92.0), 21.0, 85.0, 126.0], [74.0, 48.0, 97.0, (-120.0), 72.0, (-97.0), (-27.0), 103.0, (-41.0), 67.0], [(-23.0), 56.0, 113.0, 122.0, 83.0, (-116.0), (-20.0), 77.0, (-104.0), 39.0], [(-7.0), (-28.0), (-39.0), (-100.0), 106.0, (-123.0), (-2.0), 49.0, (-62.0), (-39.0)], [48.0, 57.0, (-23.0), 34.0, (-58.0), (-114.0), 25.0, 34.0, 56.0, (-44.0)], [89.0, 94.0, (-111.0), 34.0, 30.0, (-2.0), (-74.0), 34.0, 71.0, 67.0], [(-19.0), 86.0, (-72.0), 62.0, 35.0, 55.0, (-47.0), (-60.0), (-125.0), (-49.0)], [(-103.0), (-10.0), (-113.0), (-9.0), (-81.0), 81.0, 116.0, (-92.0), 56.0, (-110.0)]]
            
            case _ : Enum645 => 
                [[(-9.0), 93.0, (-67.0), 81.0, 113.0, 63.0, (-43.0), (-74.0), 105.0, 123.0], [(-87.0), 11.0, (-72.0), 87.0, (-47.0), 94.0, 25.0, 68.0, 70.0, 38.0], [101.0, (-84.0), 119.0, (-114.0), (-94.0), 66.0, (-37.0), (-90.0), (-62.0), (-127.0)], [99.0, 29.0, 80.0, 63.0, (-120.0), 21.0, 77.0, (-84.0), (-49.0), 1.0], [(-13.0), (-18.0), 39.0, 13.0, 92.0, 77.0, 66.0, 82.0, (-98.0), (-83.0)], [49.0, 33.0, (-121.0), 94.0, (-25.0), 56.0, 47.0, (-67.0), 82.0, (-116.0)], [(-103.0), (-113.0), 49.0, (-95.0), (-48.0), (-106.0), 39.0, (-30.0), 4.0, (-25.0)], [(-78.0), (-69.0), (-112.0), 23.0, 51.0, 119.0, 37.0, 82.0, 126.0, (-79.0)], [(-78.0), (-19.0), (-12.0), (-25.0), (-113.0), (-16.0), 19.0, (-56.0), (-8.0), (-25.0)], [(-25.0), (-46.0), (-98.0), 28.0, (-72.0), 27.0, 14.0, 75.0, (-44.0), (-92.0)]]
            
            case _ => 
                Option<Enum645>.None;
                true;
                [[(-26.0), (-66.0), (-40.0), 102.0, (-120.0), (-60.0), 39.0, (-11.0), 9.0, (-104.0)], var963, [var824, var949, var949, var824, var994, 24.0, (-7.0), var994, (-62.0), var824], var963, [(-14.0), 25.0, 43.0, 116.0, (-88.0), 12.0, 115.0, (-58.0), (-102.0), (-46.0)], [var824, var994, var1076, var824, 109.0, var1076, 54.0, var994, var994, 33.0], var963, [var1076, var949, var824, var1076, var949, var949, 109.0, (-45.0), (-21.0), (-79.0)], [99.0, (-121.0), 67.0, (-50.0), 7.0, (-73.0), 38.0, 3.0, 115.0, (-53.0)], var963]
            
        } } else { (if (false) { Option<Array<Array<Float64>>>.Some([[(-46.0), 42.0, 63.0, (-63.0), 25.0, (-1.0), 64.0, 97.0, 89.0, (-112.0)], [60.0, 110.0, (-101.0), (-109.0), (-71.0), 14.0, (-72.0), 2.0, 18.0, 93.0], [(-37.0), 19.0, (-45.0), (-79.0), 15.0, 15.0, 116.0, (-127.0), (-13.0), (-81.0)], [(-69.0), (-102.0), 97.0, 91.0, (-53.0), (-100.0), 113.0, 18.0, (-43.0), (-4.0)], [92.0, (-31.0), 38.0, (-85.0), (-78.0), 90.0, 113.0, (-111.0), (-94.0), 110.0], [(-100.0), (-79.0), 50.0, (-21.0), 27.0, 75.0, 106.0, 93.0, (-82.0), 87.0], [(-22.0), (-27.0), (-31.0), 3.0, 103.0, 57.0, 26.0, 0.0, 80.0, 120.0], [109.0, (-76.0), 0.0, (-114.0), 2.0, 21.0, 57.0, 116.0, (-90.0), (-87.0)], [48.0, (-53.0), (-3.0), (-19.0), 35.0, 107.0, 108.0, 93.0, (-73.0), 69.0], [42.0, (-124.0), (-121.0), 6.0, 113.0, (-31.0), 4.0, 24.0, 78.0, (-107.0)]]) } else { var385 }  ?? var1142[3]) } 
    }
; func864(namedParam874 : Class1372.var1377) })[0];
    let var1396 : ?Array<Float64> = (((), (((25&127..4&127:(-38)|1) as UInt8) is UInt32), Float32(-18.0), false, Float64(Float64(32.0)), ###"LpQh/3Qtx("###, Int64(UInt64(Int8(-66)))) as Array<Float64>);
    var var1622 : (String) -> Float64 = { lambdaParameter1625 : String => Float64(Float64(Float32(Float32(118.0)))) };
    var var1651 : ?Float64 = (((###"a{XsZeC<+W["### is UInt16), [UInt32(200), UInt32(171), UInt32(79), UInt32(Int32(87)), UInt32(UInt8(40)), UInt32(64), UInt32(179), UInt32(104), UInt32(Int16(65)), UInt32(252)], (Int32(-93)&127..=Int32(5)&127:(-20)|1), (Int16(UInt8(94))&127..Int16(76)&127:(Int64(Int32(-48))|1))) as Float64);
    let var1716 : Float64 = Float64(Float32(Float32(Float32(-81.0))));
    (try { // block id: 1394
        var1396
    } finally { // block id: 1412
        ();
        Option<Array<Float64>>.Some(var963)
    } ?? [var1076, var1076 * var824, ("""
0;>W(
a`E-3
"""|>var1622), [var1076, var1076, 60.0, var1076, var824, (-120.0), (-72.0), var949, 48.0, var949][6], (var1651 ?? (-6.0)), ("""
/zYhP
^6dWM
"""|>func1422<Option<Range<UInt8>>>), var1684[2], [(-47.0), (-113.0), var949, var1076, 18.0, var1076, var949, var1712, (-46.0), var1716][9], if (false) { // block id: 1724
        let var1728 : UInt16 = UInt16(UInt16(UInt8(165)));
        var196 -= var1728;
        (-56.0)
    } else { // block id: 1733
        UInt16(110);
        var272;
        (-85.0) - (-99.0)
    }, 118.0 % Float64((Int32(44.0)) | 1)])
}



public func func1972(param1973 : Float64) : Option<Option<Array<Unit>>> { // block id: 1974
    Class1372.var1978;
    119;
    var1982
}

func func1996(param1997 : (Range<Int16>) -> Float64) : Unit { // block id: 2000

}

func func2007(param1443 : Range<Int16>) : Float64 { // block id: 1444
    var1446
}


public func func1961(param1962 : Range<UInt8>, param1963 : UInt64) : Array<Unit> { // block id: 1964
    var var1985 : (Float64) -> Option<Option<Array<Unit>>> = { lambdaParameter1988 : Float64 => Option<Option<Array<Unit>>>.None };
    let var2002 : ((Range<Int16>) -> Float64) -> Unit = { lambdaParameter2005 : (Range<Int16>) -> Float64 =>  };
    var var2010 : (Range<Int16>) -> Float64 = { lambdaParameter2013 : Range<Int16> => Float64((-13.0)) };
    var var2019 : ?Bool = Option<Bool>.Some(((((Int32(-6)&127..=Int32(-66)&127:((-73)|1)) as UInt8) as Enum645) is UInt16));
    var loopTimeVar2035 : Int64 = 0;
    let var2042 : ?Unit = (([(), (), (), (), (), (), (), (), (), ()], (UInt8(48)&127..UInt8(Int8(-125))&127:(43|1)), (Option<Option<Array<Unit>>>.None as Float64)) as Unit);
    var loopTimeVar2083 : Range<UInt64> = (UInt64(Int64((-52)))&127..=UInt64(Int8(Int8(UInt8(213))))&127:(Int64(Int8(UInt8(24)))|1));
    var loopTimeVar2098 : Range<UInt64> = (UInt64(Int64(UInt8(188)))&127..UInt64(251)&127:(126|1));
    var var2121 : UInt32 = UInt32(Int32(Int32(Int8(31))));
    var var2129 : Int64 = 35;
    var var2137 : Float32 = Float32(9.0);
    let var2142 : String = "ry?b'WGQA4";
    (((var824|>var1985) ?? Option<Array<Unit>>.Some([(), (), (), (), (), (), (), (), (), ()])) ?? [(var2010|>var2002), match (var2019) {
        case _ => 
            var272
        
    }, while ((false) && loopTimeVar2035 < 100 ) {
        loopTimeVar2035++;

    }, (var2042 ?? var272), match ((-120.0)) {
        case -62.0 => 
            var1446 *= var1446;
            var272;
            ()
        
        case _ => 
            var272;
            ();
            var272
        
    }, for (i in loopTimeVar2083 where false) {
        var272
    }, for (i in loopTimeVar2098 where var1766) {

    }, try (resource = Class1372()) { // block id: 2106
        if (true) { var2110 } else { Enum645.defaultValue } ;
        ();
        ()
    } catch (_) { // block id: 2115
        var1544 -= param1963;
        var2121 -= UInt32(4)
    }, (var2129 &= var2129), (var272, false, var2137, false, (-84.0), var2142, (-44))[0]])
}


public func func1956(param1957 : UInt32) : (Array<Unit>, Range<UInt8>, Option<Float64>) { // block id: 1958
    let var2150 : Range<UInt8> = (UInt8(42)&127..UInt8(212)&127:122|1);
    var var2180 : Rune = 'V';
    func1961([var2150, (UInt8(98)&127..=UInt8(142)&127:(-118)|1), (UInt8(84)&127..var1567&127:(var688|1)), (UInt8(151)&127..=UInt8(59)&127:(var688|1)), var2150, var2150, var2150, (var1567&127..=UInt8(152)&127:(var688|1)), (UInt8(60)&127..=var1567&127:(var688|1)), (UInt8(61)&127..UInt8(162)&127:(-7)|1)][4], match (Enum645.defaultValue) {
        case _ : Unit => 
            var2180;
            if (false) { var468 } else { Option<Range<UInt8>>.None } ;
            UInt64(124)
        
        case caseVar2189 => 
            Int8(-60) / ((Int8(1)) | 1);
            var1544 <<= ((var2197) & 7);
            var29 % ((UInt64(0)) | 1)
        
        case _ => 
            -UInt64(15);
            var1544 | UInt64(223)
        
    })[8];
    var var2220 : Int16 = Int16(55);
    if ((!try { // block id: 2214
        var272;
        false
    } catch (_) { // block id: 2217
        var2220 -= var2220;
        var var2247 : Int64 = (-44);
        if (false) { (var571, false, ((UInt16(248)&127..UInt16(131)&127:19|1), var272, (var1544&127..=var2197&127:(var688|1))), UInt32(177)) } else { ((var1511, (), (UInt64(175)&127..=UInt64(108)&127:(-69)|1)), true, ((UInt16(81)&127..var196&127:(var2247|1)), (), (UInt64(94)&127..UInt64(169)&127:((-76)|1))), param1957) } ;
        false
    } finally { // block id: 2256
        false
    })) { var2259 } else { (Option<(Array<Unit>, Range<UInt8>, Option<Float64>)>.Some(var2259) ?? match (var2341) {
        case caseVar2345 => 
            var272;
            ([(), (), (), (), (), (), (), (), (), ()], (UInt8(248)&127..UInt8(199)&127:(-40)|1), Option<Float64>.Some(var1446))
        
        case _ => 
            var2259
        
    }) } 
}

public func func1907(param1908 : Float64) : Option<Array<Float64>> { // block id: 1909
    let var1913 : (UInt16) -> Bool = { lambdaParameter1916 : UInt16 => ((UInt64(203)&127..UInt64(28)&127:((-91)|1)) is (Range<Int16>) -> Float64) };
    var var1930 : Array<UInt32> = [UInt32(62), UInt32(111), UInt32(151), UInt32(108), UInt32(14), UInt32(52), UInt32(91), UInt32(42), UInt32(10), UInt32(183)];
    let var1949 : Array<Range<Int16>> = [(Int16(47)&127..=Int16(8)&127:(-68)|1), (Int16(-83)&127..=Int16(-27)&127:60|1), (Int16(122)&127..=Int16(-21)&127:(-67)|1), (Int16(71)&127..=Int16(26)&127:98|1), (Int16(73)&127..Int16(-40)&127:(-116)|1), (Int16(-27)&127..=Int16(28)&127:52|1), (Int16(64)&127..Int16(121)&127:77|1), (Int16(14)&127..=Int16(-31)&127:109|1), (Int16(-34)&127..=Int16(-5)&127:(-61)|1), (Int16(68)&127..=Int16(44)&127:(-120)|1)];
    ((var196|>var1913), if (true) { var1684 } else { (var1930, ((var196&127..UInt16(233)&127:((-45)|1)), var272, (var29&127..var1544&127:((-84)|1))), 101.0, var1438) } [0], (Int32(-96)&127..Int32(-21)&127:(-61)|1), var1949[9]);
    let var2374 : ?Array<Float64> = ((((UInt16(132)&127..=UInt16(120)&127:9|1), (), (UInt64(151)&127..UInt64(91)&127:(99|1))), ((Int32(16)&127..=Int32(-128)&127:44|1) is (Range<UInt16>, Unit, Range<UInt64>)), ((UInt16(118)&127..UInt16(215)&127:((-116)|1)), (), (UInt64(244)&127..UInt64(219)&127:(57|1))), UInt32(242)) as Array<Float64>);
    match ((var1825|>func1956)[2]) {
        case _ => 
            var272;
            (var1511, (), var1520);
            Option<Array<Float64>>.Some([(-1.0), 21.0, 80.0, 75.0, (-108.0), (-48.0), (-120.0), 39.0, (-65.0), (-89.0)])
        
        case caseVar2371 => 
            var2374
        
        case _ => 
            var var2422 : Float64 = 82.0;
            let var2430 : Float64 = Float64(Float64(108.0));
            if (var263) { Option<Array<Float64>>.Some([(-72.0), (-20.0), 114.0, var1446, (-100.0), 118.0, var1076, var1446, var1446, var1446]) } else { Option<Array<Float64>>.Some([var2416, (-77.0), var2416, var2422, (-37.0), (-37.0), var2416, (-96.0), var1712, var2430]) } 
        
    }
}

public func func1877(param1878 : Array<UInt32>) : Range<Int32> { // block id: 1879
    let var2439 : Class1372 = Class1372();
    func func1904() : Option<Array<Float64>> { // block id: 1905
        var var2435 : (Float64) -> Option<Array<Float64>> = func1907;
        let var2552 : (Array<Unit>, Range<UInt8>, Option<Float64>) = ([(), (), (), (), (), (), (), (), (), ()], (UInt8(79)&127..UInt8(196)&127:(Int64(UInt8(UInt8(220)))|1)), ((Class1372() as Bool) as Float64));
        var2439.func2442(optionalParam2447 : var2552)|>var2435
    }
;
    var loopTimeVar2597 : Int64 = 0;
    do {
        loopTimeVar2597++;
        func1904();
        var loopTimeVar2590 : Range<UInt64> = (UInt64(Int8(-117))&127..UInt64(101)&127:((-56)|1));
        for (i in loopTimeVar2590 where var1766) {
            if (false) { var571 } else { ((var196&127..UInt16(167)&127:(51|1)), (), (UInt64(124)&127..UInt64(189)&127:(-36)|1)) } ;
            var2477 *= var2477
        }
    } while (((try { // block id: 1883
        Option<Bool>.Some(false)
    } catch (e: Exception) { // block id: 1886
        var var1890 : ?Bool = ((UInt64(192)&127..=UInt64(160)&127:(-25)|1) as Bool);
        if (var13) { var1890 } else { var1890 } 
    } finally { // block id: 1894
        let var1896 : ?Bool = Option<Bool>.None;
        var1896
    } ?? (Option<Bool>.Some(var263) ?? var263))) && loopTimeVar2597 < 100 ) ;
    var var2631 : Array<Float64> = [(-107.0), (-62.0), (-98.0), 15.0, 74.0, 124.0, 102.0, 13.0, 17.0, (-106.0)];
    var var2648 : Float64 = 83.0;
    Class1372.var2602 &= match ([var963, [25.0, (-15.0), 53.0, (-102.0), 28.0, 76.0, (-41.0), 14.0, 102.0, (-37.0)], [(-114.0), var824, (-95.0), var1076, 74.0, (-69.0), var1712, var1712, 91.0, 32.0], [var1076, (-34.0), (-101.0), (-9.0), var1446, (-103.0), var824, var1712, 37.0, (-17.0)], var2631, [(-126.0), 12.0, 37.0, (-18.0), 9.0, 15.0, 64.0, 92.0, (-61.0), 45.0], var963, [var824, var1712, var1712, (-116.0), (-42.0), 122.0, var1446, (-35.0), var2645, var2648], [var1076, (-37.0), (-123.0), var1712, (-57.0), 103.0, var824, var1446, var2416, var824], [60.0, (-64.0), (-116.0), (-57.0), 55.0, 84.0, (-111.0), (-122.0), 26.0, (-27.0)]]) {
        case caseVar2664 => 
            UInt8(23)
        
        case _ : Option<Unit> => 
            UInt8(25) << ((var2341) & 7)
        
        case caseVar2675 : (Int16, UInt8, Option<Array<Array<Float64>>>, Range<UInt8>, Int16, Range<Int16>, Int32) => 
            Int32(-30);
            var1567
        
        case _ => 
            UInt8(52)
        
    };
    let var2753 : Bool = true;
    var var2801 : Float64 = (-84.0);
    var var3177 : Array<Float64> = Array<Float64>(10){ i => Float64(Float64(Float64(Float32(19.0)))) };
    match (match (Option<Array<Array<Float64>>>.Some([[(-11.0), 95.0, var2645, var2691, var1076, (-94.0), var2698, var2698, var2698, var2416], var2631, [(-89.0), (-91.0), (-75.0), 83.0, (-102.0), 99.0, 40.0, (-87.0), (-55.0), 79.0], [121.0, (-107.0), (-7.0), 64.0, 105.0, 94.0, (-115.0), (-2.0), (-92.0), (-102.0)], [100.0, var824, var2698, var1446, (-123.0), (-100.0), 54.0, var2416, (-53.0), 98.0], [(-58.0), 37.0, 107.0, 31.0, (-75.0), 107.0, (-13.0), (-59.0), (-45.0), 126.0], [(-106.0), var2648, var1712, (-56.0), var2724, var2645, var1712, 86.0, var2691, var2698], [var1446, var2724, 53.0, var824, (-116.0), 123.0, (-120.0), var2416, var2645, 38.0], [73.0, 26.0, (-86.0), (-70.0), 40.0, (-113.0), (-23.0), (-70.0), 99.0, (-4.0)], var963])) {
            case caseVar2749 : Unit => 
                var var2770 : Float64 = Float64(Float32(-100.0));
                var var2816 : (Array<Array<Float64>>, Array<Float64>, Int8, Array<Array<Float64>>, Int64, Range<Int8>) = ([[61.0, Float64((-56.0)), 13.0, (-17.0), (-50.0), (-65.0), Float64(Float32(-68.0)), Float64((-103.0)), 45.0, 106.0], [Float64(Float32(-36.0)), Float64(Float32(106.0)), Float64(Float32(-88.0)), Float64(54.0), Float64(Float32(-128.0)), 17.0, Float64((-71.0)), Float64(Float32(21.0)), Float64(Float32(86.0)), (-98.0)], [(-1.0), Float64(Float32(-111.0)), 66.0, 92.0, 106.0, Float64(Float32(-25.0)), Float64(73.0), 79.0, (-123.0), Float64(105.0)], [Float64((-71.0)), 50.0, (-62.0), (-16.0), (-46.0), 56.0, Float64(55.0), Float64(5.0), Float64(123.0), (-59.0)], [(-38.0), (-75.0), (-29.0), (-68.0), 104.0, 92.0, 12.0, (-20.0), 21.0, 91.0], [(-47.0), 88.0, (-55.0), (-97.0), (-5.0), 82.0, 17.0, 26.0, (-8.0), (-123.0)], [(-52.0), 38.0, (-39.0), (-97.0), (-123.0), 119.0, 99.0, 8.0, 25.0, (-122.0)], [(-11.0), Float64(Float32(48.0)), (-60.0), 15.0, (-45.0), Float64((-21.0)), (-104.0), (-52.0), Float64(Float32(75.0)), 51.0], [Float64((-106.0)), Float64(17.0), (-89.0), Float64(Float32(103.0)), Float64((-5.0)), (-46.0), Float64(Float32(-65.0)), 106.0, Float64(Float32(-112.0)), Float64(Float32(-45.0))], [35.0, Float64((-41.0)), Float64((-39.0)), (-119.0), Float64((-113.0)), Float64(53.0), 70.0, Float64(86.0), Float64(105.0), Float64(Float32(-35.0))]], [8.0, (-62.0), (-36.0), 102.0, (-18.0), 43.0, (-46.0), (-66.0), (-36.0), (-76.0)], Int8(Int8(UInt8(Int8(-16)))), [[(-76.0), (-84.0), (-85.0), 48.0, 75.0, (-47.0), (-107.0), (-6.0), (-80.0), (-100.0)], [(-122.0), 119.0, 113.0, 119.0, 60.0, (-118.0), (-118.0), 91.0, 46.0, (-80.0)], [118.0, 43.0, (-69.0), (-119.0), 35.0, 106.0, 64.0, 50.0, (-69.0), (-81.0)], [122.0, (-60.0), (-66.0), 86.0, (-18.0), (-53.0), (-39.0), 3.0, 119.0, (-114.0)], [56.0, 121.0, 21.0, 71.0, 87.0, (-35.0), 116.0, (-23.0), 50.0, (-33.0)], [(-50.0), 53.0, 102.0, (-97.0), (-58.0), (-26.0), 87.0, (-5.0), (-97.0), (-33.0)], [(-53.0), (-102.0), (-86.0), (-43.0), (-8.0), 75.0, 119.0, (-103.0), 21.0, 65.0], [(-33.0), (-45.0), 114.0, 10.0, (-13.0), 76.0, (-12.0), (-96.0), 103.0, 23.0], [(-86.0), (-97.0), (-78.0), (-71.0), (-18.0), (-103.0), 24.0, (-102.0), (-27.0), 84.0], [(-67.0), (-11.0), (-78.0), (-52.0), 83.0, (-111.0), (-117.0), (-50.0), (-99.0), 95.0]], Int64(UInt32(UInt32(120))), (Int8(-104)&127..Int8(75)&127:(-106)|1));
                if (var2753) { ([[(-62.0), 52.0, (-29.0), 12.0, (-41.0), 120.0, 61.0, 30.0, 78.0, 78.0], var2759, var2631, var2631, [(-43.0), 7.0, (-121.0), (-124.0), 120.0, 23.0, 88.0, (-53.0), 109.0, 77.0], [85.0, 16.0, 8.0, 48.0, 89.0, 26.0, (-67.0), (-60.0), 24.0, (-123.0)], var2631, [(-79.0), 115.0, 108.0, (-120.0), 17.0, (-120.0), 105.0, 11.0, (-108.0), 14.0], [96.0, var2770, (-125.0), 45.0, 107.0, 83.0, (-31.0), var824, var2770, 78.0], [(-54.0), var2691, var2698, 86.0, (-20.0), (-52.0), 62.0, 56.0, (-127.0), var2648]], [(-90.0), var2795, (-100.0), (-91.0), var2801, (-102.0), 69.0, var2691, 12.0, var824], var460, [[74.0, (-45.0), (-37.0), 13.0, 50.0, (-96.0), 126.0, (-56.0), 15.0, (-71.0)], [(-59.0), (-56.0), 22.0, 53.0, 45.0, 119.0, (-43.0), (-55.0), 30.0, (-68.0)], [(-45.0), (-2.0), 8.0, (-126.0), (-98.0), 119.0, 32.0, (-64.0), 12.0, (-124.0)], [61.0, (-102.0), (-32.0), 38.0, (-67.0), (-117.0), 30.0, (-104.0), 28.0, (-34.0)], [47.0, (-97.0), 108.0, 114.0, 64.0, 93.0, (-45.0), 60.0, 42.0, (-114.0)], [126.0, 102.0, (-84.0), (-65.0), 84.0, 60.0, (-61.0), (-94.0), (-23.0), (-18.0)], [(-100.0), (-99.0), 70.0, 40.0, 29.0, (-90.0), (-70.0), 118.0, 32.0, (-117.0)], [(-19.0), 69.0, (-81.0), (-61.0), (-115.0), (-104.0), 106.0, (-19.0), 81.0, (-18.0)], [(-84.0), (-26.0), 23.0, 73.0, 38.0, 103.0, (-33.0), 28.0, (-18.0), (-46.0)], [(-114.0), 89.0, 90.0, 45.0, (-2.0), (-22.0), 96.0, 75.0, (-126.0), (-80.0)]], (-97), (Int8(12)&127..Int8(35)&127:((-44)|1))) } else { var2816 } 
            
            case _ => 
                if (var1617) { var2951 } else { (var3083, [(-66.0), 62.0, (-121.0), (-29.0), (-19.0), (-51.0), (-65.0), 14.0, 20.0, 36.0], Int8(-34), var3083, 4, (Int8(-112)&127..Int8(-104)&127:87|1)) } 
            
            case caseVar3092 : Array<Range<UInt8>> => 
                (Int8(37)&127..=Int8(-57)&127:111|1);
                if (var1617) { ([[(-81.0), (-94.0), (-49.0), 106.0, 92.0, 88.0, 106.0, (-51.0), (-114.0), (-8.0)], [(-58.0), (-63.0), (-38.0), (-120.0), (-112.0), (-102.0), 12.0, (-38.0), (-40.0), (-122.0)], [(-98.0), (-63.0), 81.0, (-41.0), 69.0, 52.0, 49.0, (-46.0), 18.0, (-6.0)], [(-83.0), (-23.0), 87.0, (-75.0), 112.0, 11.0, (-18.0), (-50.0), 5.0, (-110.0)], [71.0, (-117.0), (-9.0), 82.0, (-102.0), 78.0, 95.0, 27.0, (-77.0), 87.0], [(-89.0), (-25.0), 52.0, (-78.0), 56.0, (-87.0), 23.0, (-45.0), 45.0, 122.0], [(-4.0), 22.0, (-128.0), 2.0, (-9.0), (-2.0), 14.0, 77.0, 119.0, (-95.0)], [15.0, (-107.0), (-98.0), 101.0, (-21.0), 122.0, (-25.0), (-34.0), 34.0, 3.0], [(-73.0), (-28.0), (-38.0), (-115.0), 64.0, 95.0, (-76.0), 57.0, (-128.0), 124.0], [(-62.0), 125.0, (-81.0), (-8.0), (-71.0), (-119.0), 84.0, (-19.0), 65.0, 107.0]], [(-123.0), 100.0, (-52.0), 118.0, (-21.0), (-5.0), (-120.0), 84.0, 2.0, (-33.0)], var460, var3083, var2477, (Int8(-104)&127..var460&127:((-71)|1))) } else { var2951 } 
            
            case _ => 
                var2951;
                var var3118 : Float64 = (-30.0);
                var var3129 : Float64 = Float64(Float32(Float32(Float32(Float32(78.0)))));
                var var3154 : Float64 = Float64(Float32(Float32(12.0)));
                (var3083, var2631, Int8(-18), [[var3118, var1076, (-87.0), var2795, var2648, (-116.0), var2801, (-2.0), (-7.0), var3129], [(-112.0), (-16.0), (-51.0), (-80.0), 126.0, 8.0, 34.0, 91.0, 94.0, (-69.0)], [(-116.0), var2698, (-22.0), (-127.0), (-22.0), var2801, (-6.0), (-62.0), (-92.0), 49.0], [42.0, (-117.0), 13.0, 25.0, 32.0, 118.0, 28.0, 60.0, (-79.0), 49.0], [var3129, 59.0, var824, 85.0, var3154, 74.0, var2691, (-69.0), 31.0, 22.0], var2759, var2631, [var2648, var2724, var3118, var824, 24.0, var2795, (-51.0), var2645, (-57.0), (-52.0)], var3177, [(-49.0), (-81.0), var1446, 19.0, var1076, var2724, 124.0, var1712, var2724, 100.0]], var2477, (Int8(-121)&127..=Int8(-128)&127:(-123)|1))
            
        }) {
        case caseVar3214 => 
            if (var2753) { var1462 } else { var1462 } ;
            let var3221 : Range<Int32> = (Int32(-124)&127..Int32(-90)&127:(-71)|1);
            var3221
        
        case _ => 
            (Int32(70)&127..=Int32(108)&127:(var688|1))
        
        case (caseVar3232,_ : Enum645,caseVar3233 : ((Range<UInt16>, Unit, Range<UInt64>), Bool, (Range<UInt16>, Unit, Range<UInt64>), UInt32),caseVar3234,_ : Option<(Range<UInt16>, Unit, Range<UInt64>)>,caseVar3235 : UInt16) => 
            if (true) { var468 } else { Option<Range<UInt8>>.Some((var1567&127..=var2341&127:(var688|1))) } ;
            (Int32(66)&127..Int32(40)&127:(-55)|1)
        
        case (_ : Rune,caseVar3248,caseVar3249,caseVar3250,caseVar3251 : Range<UInt32>,caseVar3252 : Bool) => 
            var var3257 : Range<Int32> = (Int32(UInt8(UInt8(UInt8(125))))&127..=Int32(Int16(UInt8(UInt8(221))))&127:(21|1));
            if (var263) { var3257 } else { (Int32(-31)&127..=Int32(-16)&127:119|1) } 
        
        case _ => 
            var3272
        
    }
}

public func func1870(optionalParam1871 ! : Option<Array<Unit>> = Option<Array<Unit>>.None, namedParam1873 ! : UInt16, namedParam1874 ! : ((Range<UInt16>, Unit, Range<UInt64>), Bool, (Range<UInt16>, Unit, Range<UInt64>), UInt32)) : Range<UInt32> { // block id: 1875
    [UInt32(122), UInt32(182), UInt32(251), UInt32(248), UInt32(27), UInt32(163), UInt32(181), UInt32(26), UInt32(202), UInt32(184)]|>func1877;
    let var3284 : Array<UInt8> = [UInt8(200), UInt8(17), UInt8(177), UInt8(15), UInt8(201), UInt8(133), UInt8(29), UInt8(243), UInt8(191), UInt8(117)];
    var2341 *= if (var263) { [UInt8(163), UInt8(61), UInt8(197), UInt8(143), UInt8(105), UInt8(239), UInt8(104), UInt8(139), UInt8(49), UInt8(176)] } else { var3284 } [6];
    let var3392 : Array<UInt32> = [UInt32(41), UInt32(76), UInt32(31), UInt32(43), UInt32(193), UInt32(191), UInt32(245), UInt32(96), UInt32(98), UInt32(96)];
    (match (UInt8(Int8(56))) {
        case caseVar3293 => 
            let var3414 : ?UInt8 = Option<UInt8>.None;
            var var3423 : UInt32 = UInt32(60);
            if (true) { Class1372(func1961, optionalParam3303 : var3392, optionalParam3305 : [(UInt8(236)&127..UInt8(80)&127:77|1), (UInt8(93)&127..=UInt8(89)&127:(-105)|1), (var2341&127..=var2341&127:(var2477|1)), (UInt8(161)&127..UInt8(185)&127:118|1), (UInt8(145)&127..=UInt8(220)&127:97|1), (UInt8(60)&127..UInt8(141)&127:(-17)|1), (UInt8(210)&127..UInt8(74)&127:(var2477|1)), var3409, (UInt8(18)&127..UInt8(123)&127:56|1), (UInt8(68)&127..UInt8(122)&127:(-42)|1)], namedParam3307 : var3414) } else { Class1372(func1961, optionalParam3303 : [UInt32(252), var1825, UInt32(163), var3423, UInt32(75), var1825, var1825, UInt32(171), UInt32(165), UInt32(31)], optionalParam3305 : [(UInt8(90)&127..UInt8(42)&127:(-14)|1), (UInt8(132)&127..UInt8(140)&127:(-60)|1), (UInt8(136)&127..UInt8(78)&127:(-93)|1), (UInt8(206)&127..=UInt8(98)&127:(-88)|1), (UInt8(229)&127..UInt8(59)&127:11|1), (UInt8(155)&127..=UInt8(109)&127:(-32)|1), (UInt8(150)&127..=UInt8(62)&127:30|1), (UInt8(180)&127..=UInt8(51)&127:56|1), (UInt8(209)&127..=UInt8(204)&127:(-21)|1), (UInt8(170)&127..UInt8(203)&127:34|1)], namedParam3307 : Option<UInt8>.None) } ;
            var3423
        
        case 121 | 5 => 
            UInt32(81)
        
        case _ => 
            UInt32(192)
        
    }&127..=UInt32(Int8(UInt8(247)))&127:((-62)|1))
}

public func func1743(param1744 : Float64) : Float32 { // block id: 1745
    var571[1];
    let var1795 : Int16 = Int16(UInt8(Int8(100)));
    func func1751(param1752 : Range<UInt32>, param1753 : Option<Float64>) : Bool { // block id: 1754
        var272;
        match (if ((Option<Bool>.Some(var1617) ?? var1766)) { // block id: 1768

            }) {
            case _ => 
                ();
                UInt64(48) <= UInt64(158)
            
            case _ : Bool => 
                ();
                ();
                var447 <= var447
            
            case caseVar1786 => 
                true
            
            case _ => 
                var272;
                Int16(-2) == var1795
            
        }
    }
;
    var var1802 : Range<UInt32> = (UInt32(Int8(UInt8(UInt8(73))))&127..=UInt32(92)&127:(Int64(UInt8(UInt8(142)))|1));
    var var1820 : Bool = true;
    let var1860 : ?Float64 = Option<Float64>.None;
    if (func1751(if (var1617) { var1802 } else { (UInt32(162)&127..UInt32(94)&127:17|1) } , match (var1076) {
        case 29.0 | 83.0 => 
            var1820 ||= true;
            var1825 ^ UInt32(195);
            Option<Float64>.None
        
        case caseVar1831 : Class1372 => 
            ();
            Option<Float64>.Some(22.0)
        
        case caseVar1838 : UInt32 => 
            let var1841 : ?Float64 = (((), true, Float32(Float32(Float32(15.0))), (Option<Array<Array<Float64>>>.None is Int32), (-32.0), "?,$bCNgPgg", Int64(UInt32(149))) as Float64);
            var1841
        
        case 28.0 | -30.0 | 45.0 => 
            [(-118.0), (-78.0), (-22.0), (-91.0), 74.0, 88.0, 84.0, (-62.0), (-4.0), (-15.0)];
            var1860
        
        case _ => 
            var1860
        
    })) { // block id: 1865

    };
    var var3479 : Array<Float32> = [Float32(Float32(Float32(53.0))), Float32(Float32(-39.0)), Float32(13.0), Float32(Float32(-78.0)), Float32(40.0), Float32(-21.0), Float32(119.0), Float32(Float32(-32.0)), Float32(Float32(Float32(Float32(117.0)))), Float32(-110.0)];
    match (func1870(optionalParam1871 : Option<Array<Unit>>.Some([var272, (), var272, var272, (), var272, (), var272, (), var272]), namedParam1873 : var196, namedParam1874 : (((var196&127..=UInt16(203)&127:(var688|1)), var272, (var29&127..var2197&127:(85|1))), true, (var1511, (), (UInt64(148)&127..UInt64(224)&127:39|1)), UInt32(13)))) {
        case _ : Option<Array<Float64>> => 
            var3479
        
        case caseVar3501 : (Unit, Bool, Float32, Bool, Float64, String, Int64) => 
            var460 *= Int8(-74);
            [Float32(-80.0), Float32(12.0), Float32(-110.0), Float32(-41.0), Float32(69.0), Float32(35.0), Float32(56.0), Float32(104.0), Float32(85.0), Float32(73.0)]
        
        case caseVar3509 => 
            var196 &= var196;
            [var3516, var3516, var3516, Float32(-111.0), Float32(-2.0), var3516, Float32(125.0), Float32(103.0), Float32(43.0), Float32(-39.0)]
        
        case _ => 
            var3479
        
    }[3]
}

func func207(namedParam208 ! : (Unit, Bool, Float32, Bool, Float64, String, Int64), optionalParam209 ! : UInt64 = UInt64(81)) : Float64 { // block id: 212
    (((), false, var3516, var1766, (-1.0), var3541, 66)[4]|>(func1743~>func378<Range<UInt32>, Class1372>))[7]
}

public func func160(param161 : Range<UInt64>) : Option<UInt8> { // block id: 162
    var var203 : String = """
a{N`w~
g:K6d
""";
    try { // block id: 164
        let var168 : (Range<UInt16>, Unit, Range<UInt64>) = ((UInt16(110)&127..=UInt16(UInt8(106))&127:(Int64(Int64(Int8(-123)))|1)), (), (UInt64(117)&127..UInt64(213)&127:96|1));
        var168[1];
        Option<Range<UInt8>>.None.getOrThrow();
        try { // block id: 187
            (UInt64(241)&127..=UInt64(115)&127:85|1);
            "2J^CzJ\"HXR"
        } finally { // block id: 190
            var var192 : Unit = ();
            var192;
            var196 <<= ((UInt16(115)) & 7);
            if (var13) { """
m'k*]
Lp.?0
""" } else { var203 } 
        }
    } finally { // block id: 205
        func207(namedParam208 : var89, optionalParam209 : UInt64(185));
        let var3550 : (Int16, UInt8, Option<Array<Array<Float64>>>, Range<UInt8>, Int16, Range<Int16>, Int32) = (Int16(-44), UInt8(UInt8(Int8(-73))), Option<Array<Array<Float64>>>.Some([[(-110.0), (-60.0), 19.0, 100.0, 106.0, (-41.0), (-14.0), 13.0, 11.0, 84.0], [16.0, (-57.0), (-84.0), 0.0, 109.0, (-93.0), (-32.0), (-111.0), 29.0, 22.0], [(-16.0), 49.0, (-55.0), 67.0, (-40.0), 101.0, 108.0, (-51.0), (-84.0), 92.0], [40.0, (-83.0), (-31.0), 31.0, 7.0, (-127.0), (-97.0), (-30.0), 44.0, (-120.0)], [(-27.0), 96.0, (-2.0), 8.0, 86.0, 58.0, (-86.0), (-128.0), (-101.0), (-23.0)], [68.0, 51.0, 16.0, 47.0, 5.0, 59.0, (-51.0), (-4.0), 24.0, 71.0], [48.0, 23.0, (-6.0), (-106.0), 29.0, 121.0, 66.0, (-12.0), (-104.0), (-106.0)], [(-44.0), (-24.0), 91.0, 25.0, (-69.0), (-19.0), (-113.0), (-121.0), (-112.0), 117.0], [(-103.0), (-12.0), 5.0, 29.0, (-117.0), 92.0, 20.0, 46.0, (-84.0), (-52.0)], [(-60.0), (-111.0), (-111.0), (-115.0), 61.0, (-7.0), (-101.0), (-105.0), 78.0, 118.0]]), (UInt8(UInt8(Int8(-114)))&127..UInt8(UInt8(UInt8(239)))&127:(72|1)), Int16(102), (Int16(30)&127..Int16(71)&127:(-38)|1), Int32(-109));
        match (var3550) {
            case (_ : Range<UInt8>,_,_,_,caseVar3571 : (Bool, Array<UInt32>, Range<Int32>, Range<Int16>),_ : Option<Array<Float64>>,caseVar3572) => 
                ###"z$S\"e45tbC"###
            
            case _ => 
                if (true) { """
T$kpv
)Zv/4
""" } else { var203 } 
            
        }
    };
    var loopTimeVar3588 : Range<UInt64> = (UInt64(174)&127..UInt64(61)&127:((-76)|1));
    for (i in loopTimeVar3588 where match (var385) {
        case _ => 
            var1617
        
    }) {

    };
    (UInt64(249) as UInt8)
}

func func155(param156 : Rune) : Bool { // block id: 157
    let var3596 : (Range<UInt64>) -> Option<UInt8> = func160;
    match ((match (Option<Option<Array<Unit>>>.None) {
            case _ => 
                var263 &&= var1617;
                (var1544&127..UInt64(152)&127:(var3610|1))
            
            case _ : Range<Int64> => 
                var272;
                (UInt8(128)&127..UInt8(243)&127:98|1);
                var var3618 : Range<UInt64> = (UInt64(Int8(-4))&127..=UInt64(63)&127:(Int64(Int8(-109))|1));
                var3618
            
            case _ => 
                var1520
            
            case _ => 
                (UInt64(173)&127..UInt64(179)&127:(-59)|1)
            
        }|>var3596)) {
        case _ => 
            if (true) { Option<Enum645>.Some(var2110) } else { Option<Enum645>.None } ;
            var1825 < UInt32(10)
        
    }
}


func func150(param151 : Int64) : UInt8 { // block id: 152
    ();
    try { // block id: 3644
        let var3646 : Rune = 'q';
        var3646
    } finally { // block id: 3648
        var1567++;
        let var3656 : Option<Array<Unit>> = ([(Int16(7)&127..Int16(-112)&127:73|1), (Int16(57)&127..=Int16(-57)&127:12|1), (Int16(94)&127..Int16(62)&127:68|1), (Int16(-125)&127..=Int16(97)&127:55|1), (Int16(83)&127..Int16(-97)&127:32|1), (Int16(-12)&127..=Int16(122)&127:(-10)|1), (Int16(-12)&127..=Int16(-59)&127:25|1), (Int16(-55)&127..=Int16(-52)&127:119|1), (Int16(-49)&127..Int16(-64)&127:(-90)|1), (Int16(52)&127..=Int16(-123)&127:(-124)|1)] as Array<Unit>);
        if (var1766) { Option<Array<Unit>>.Some(var1438) } else { var3656 } ;
        if (false) { 'E' } else { 'z' } 
    }|>func155;
    Class1372.func3666(try { // block id: 4029
        [(UInt8(186)&127..=UInt8(159)&127:(-108)|1), (UInt8(141)&127..UInt8(249)&127:(-42)|1), (UInt8(64)&127..UInt8(192)&127:51|1), (var1567&127..var1567&127:((-6)|1)), var3409, var3409, (var2341&127..var2341&127:(var2477|1)), var4045, var4045, var3409];
        Option<Option<Array<Unit>>>.None
    } finally { // block id: 4053
        ();
        if (var263) { var1982 } else { Option<Option<Array<Unit>>>.Some(var4060) } 
    }, namedParam3668 : func1870, namedParam3673 : (var4084 ?? var3272))
}


public func func43(param44 : UInt64) : Int64 { // block id: 45
    let var55 : (UInt16) -> Bool = { lambdaParameter58 : UInt16 => true };
    var var65 : Unit = ();
    let var70 : Bool = true;
    let var75 : Int64 = Int64(UInt64(UInt64(69)));
    let var81 : UInt8 = UInt8(150);
    if ((UInt16(80)|>var55)) { // block id: 62
        (var65, var13, Float32(-3.0), var70, 101.0, "qHvR7pY(\"<", var75)
    } else { // block id: 79
        var81;
        var var85 : Bool = true;
        var85 &&= false;
        var89
    }[3];
    let var115 : String = "<X#)!aE.5M";
    let var4143 : Range<UInt16> = (UInt16(158)&127..=UInt16(8)&127:91|1);
    let var4224 : Array<Range<Int16>> = [(Int16(-81)&127..=Int16(31)&127:(-88)|1), (Int16(43)&127..=Int16(-76)&127:106|1), (Int16(-21)&127..=Int16(-4)&127:113|1), (Int16(-26)&127..Int16(30)&127:(-39)|1), (Int16(74)&127..=Int16(-106)&127:88|1), (Int16(21)&127..Int16(106)&127:4|1), (Int16(-14)&127..Int16(-100)&127:0|1), (Int16(-37)&127..Int16(4)&127:85|1), (Int16(20)&127..=Int16(-69)&127:(-79)|1), (Int16(90)&127..Int16(68)&127:99|1)];
    func func139(optionalParam140 ! : Option<UInt8> = (###"=X*R~&..~2"### as UInt8), namedParam143 ! : Range<Int32>, namedParam144 ! : Int16) : Array<UInt32> { // block id: 145
        var loopTimeVar4092 : Range<UInt64> = (UInt64(2)&127..=UInt64(59)&127:((-78)|1));
        for (i in loopTimeVar4092 where var70) {
            (-57)|>func150;
            var1712 *= 68.0
        };
        let var4218 : UInt32 = UInt32(UInt8(Int8(-36)));
        if (if (UInt8(36) <= UInt8(110)) { // block id: 4102
            '0';
            if (var13) { var468 } else { Option<Range<UInt8>>.Some(var4045) } ;
            var13
        } else { // block id: 4110
            var13
        }) { [UInt32(50), UInt32(47), UInt32(184), UInt32(214), UInt32(171), UInt32(125), UInt32(0), UInt32(112), UInt32(169), UInt32(70)] } else { [try { // block id: 4115
            UInt32(94)
        } catch (_) { // block id: 4117
            var272;
            var1825
        } finally { // block id: 4120
            var1825 - UInt32(19)
        }, UInt32(199), try { // block id: 4126
            var1544 += var1544;
            var2645 **= Float64(Int32((-53.0)) & 3);
            UInt32(122)
        } catch (_) { // block id: 4134
            Option<Option<Array<Unit>>>.None;
            var1825 & UInt32(145)
        }, match (((var4143, var3973, (var2197&127..UInt64(116)&127:(111|1))), var1617, var571, UInt32(253))) {
            case (_,caseVar4155,(_ : Option<Range<Int32>>,_,_),caseVar4156) => 
                var460;
                var3973;
                var1825
            
            case caseVar4163 => 
                """
<ME&>
w=c8k
""";
                UInt32(222)
            
            case ((_,caseVar4169,_ : Array<Unit>),caseVar4170,(caseVar4171,caseVar4172,_),_ : (Array<Unit>, Range<UInt8>, Option<Float64>)) => 
                var1825
            
            case _ => 
                [var1567, var2341, var2341, UInt8(52), UInt8(182), UInt8(237), var2341, UInt8(242), UInt8(146), var1567];
                UInt32(113) / ((UInt32(118)) | 1)
            
            case _ => 
                ();
                UInt32(253)
            
        }, UInt32(232), match {
            case false => 
            var4084;
            ();
            var1825
            case var263 => 
            if (true) { Option<(Array<Unit>, Range<UInt8>, Option<Float64>)>.None } else { Option<(Array<Unit>, Range<UInt8>, Option<Float64>)>.Some(var2259) } ;
            let var4212 : UInt32 = UInt32(UInt16(25));
            var4212 * var1825
            case _ => 
            var4218
        }, match (var4224) {
            case caseVar4228 => 
                var var4233 : UInt16 = UInt16(Int8(23));
                UInt16(108) + var4233;
                UInt32(15) ^ var1825
            
            case caseVar4241 => 
                var1825
            
            case _ => 
                UInt32(20)
            
        }, if (var1766) { // block id: 4249
            var272;
            var272;
            var4218
        } else if (var13) { // block id: 4254
            var460 >>= ((var460) & 7);
            var4218 * var4218
        } else { // block id: 4261
            UInt32(204)
        }, (Option<UInt32>.Some(var1825) ?? var4218), UInt32(UInt32(78))] } 
    }
;
    try { // block id: 113
        var115;
        let var119 : UInt32 = UInt32(104);
        var119 | UInt32(87)
    } catch (e: Exception) { // block id: 122
        Int8(104);
        var65;
        let var126 : UInt32 = UInt32(90);
        var126
    } > func139(namedParam143 : (Int32(117)&127..=Int32(112)&127:7|1), namedParam144 : Int16(118))[6];
    let var4334 : Array<UInt8> = Array<UInt8>(10){ i => UInt8(Int8(70)) };
    match (try { // block id: 4278
            (var2691, [var3973, var3973, var3973, (), var65, (), (), var272, (), ()], var4293, [var81, var81, var1567, var2341, var81, var81, UInt8(23), var1567, var1567, UInt8(87)])
        } catch (e: Exception) { // block id: 4306
            var4308;
            var3316;
            if (var70) { var3738 } else { var3738 } 
        } finally { // block id: 4318
            (103.0, [(), (), var3973, (), (), (), var65, var4293, var3973, ()], var4293, var4334)
        }) {
        case (caseVar4353 : Array<UInt32>,_ : Aggregate520,caseVar4354 : Class1372,_) => 
            ();
            if (true) { Option<Option<Array<Unit>>>.Some(Option<Array<Unit>>.Some(var1438)) } else { var1982 } ;
            var3610
        
        case _ => 
            var3610
        
        case caseVar4370 => 
            Class1372();
            var3610
        
        case _ => 
            var605;
            var2477 + (-26)
        
    }
}

main(): Int64 {
    try {
        UInt8(2);
        var var19 : ?UInt8 = (Int8(Int8(UInt8(Int8(19)))) as UInt8);
        var var40 : UInt8 = UInt8(195);
        (if (var13) { var19 } else { var19 }  ?? try { // block id: 27
            var29;
            UInt8(200)
        } catch (_) { // block id: 36
            UInt8(189)
        } finally { // block id: 38
            var40
        });
        let var4381 : (UInt64) -> Int64 = func43;
        var2197|>var4381
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var29*var29), 64)
        crccheck.updateBuffer(UInt64(var40*var40), 64)
        crccheck.updateBuffer(UInt64(var196*var196), 64)
        crccheck.updateBuffer(UInt64(var447*var447), 64)
        crccheck.updateBuffer(UInt64(var460*var460), 64)
        crccheck.updateBuffer(UInt64(var688*var688), 64)
        crccheck.updateBuffer(UInt64(var1544*var1544), 64)
        crccheck.updateBuffer(UInt64(var1567*var1567), 64)
        crccheck.updateBuffer(UInt64(var1825*var1825), 64)
        crccheck.updateBuffer(UInt64(var2197*var2197), 64)
        crccheck.updateBuffer(UInt64(var2341*var2341), 64)
        crccheck.updateBuffer(UInt64(var2477*var2477), 64)
        crccheck.updateBuffer(UInt64(var3316*var3316), 64)
        crccheck.updateBuffer(UInt64(var3610*var3610), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Aggregate520 {

}

extend Enum645 {

}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_unexpected_declaration_in_scope
// ASSERT: scan parse_expected_catch_or_finally_in_try
// ASSERT: scan parse_expected_character
// ASSERT: scan parse_expected_left_brace
// ASSERT: scan parse_expected_case


