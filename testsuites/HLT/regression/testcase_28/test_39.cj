/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output


let var20 : (Int16, Enum15) = (Int16(75), Enum15.defaultValue)
var var46 : UInt32 = UInt32(UInt32(177))
let var91 : UInt64 = UInt64(142)
let var125 : Class117 = Class117()
let var197 : Int8 = Int8(-15)
public let var335 : String = "};7d~n&QyK"
var var356 : UInt16 = UInt16(18)
let var370 : Range<UInt64> = (UInt64(UInt8(Int8(-121)))&127..UInt64(44)&127:(75|1))
let var386 : Interface122<UInt32> = Class117()
public let var391 : Unit = ()
public let var425 : UInt8 = UInt8(UInt8(Int8(-97)))
public let var461 : Range<Int64> = ((-79)&127..(-32)&127:(-16)|1)
public let var482 : Range<Int32> = (Int32(UInt16(253))&127..Int32(UInt16(71))&127:(Int64(Int16(-128))|1))
let var493 : (Array<Unit>, Rune, Range<UInt32>, Range<Int64>, Interface121, Range<UInt8>, UInt8, Unit, (UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>)) = ([(), (), (), (), (), (), (), (), (), ()], '0', (UInt32(UInt32(28))&127..=UInt32(UInt16(184))&127:(Int64(UInt32(Int16(54)))|1)), (77&127..(-84)&127:(-66)|1), Class117(), (UInt8(67)&127..UInt8(29)&127:72|1), UInt8(242), (), (UInt8(27), UInt16(Int8(51)), Float32(-30.0), UInt64(Int16(27)), (), Float32(-23.0), (Int32(-57)&127..=Int32(50)&127:(-95)|1)))
let var606 : Option<Aggregate303> = Option<Aggregate303>.None
public let var611 : ?Unit = (Option<UInt32>.None as Unit)
let var688 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
let var738 : Range<Int8> = (Int8(96)&127..Int8(Int8(UInt8(113)))&127:(112|1))
let var791 : Int64 = (-2)
public var var828 : Interface120 = Class117()
public let var853 : Option<Option<Array<Unit>>> = Option<Option<Array<Unit>>>.None
var var915 : Range<UInt8> = (UInt8(97)&127..=UInt8(UInt8(91))&127:(Int64(Int8(-71))|1))
public let var924 : Array<Float64> = [109.0, (-74.0), 34.0, 58.0, 25.0, (-8.0), 14.0, 63.0, (-52.0), 111.0]
public var var1040 : Bool = (Float32(Float32(-119.0)) is Rune)
let var1045 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
let var1053 : Array<Option<UInt32>> = [Option<UInt32>.None, (Class117() as UInt32), (Option<Array<Unit>>.None as UInt32), (((UInt32(98), UInt16(228), [(), (), (), (), (), (), (), (), (), ()], ()) is (Array<Unit>, Rune, Range<UInt32>, Range<Int64>, Interface121, Range<UInt8>, UInt8, Unit, (UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>))) as UInt32), (Option<Aggregate303>.None as UInt32), Option<UInt32>.None, ([Int32(-89), Int32(39), Int32(17), Int32(124), Int32(73), Int32(118), Int32(120), Int32(82), Int32(-47), Int32(-99)] as UInt32), Option<UInt32>.None, (Int32(-86) as UInt32), ((123&127..=(-126)&127:(-11)|1) as UInt32)]
public let var1126 : ?UInt32 = Option<UInt32>.None
let var1172 : Enum15 = Enum15.defaultValue
public var var1183 : Bool = (Int8(-120) is (UInt32, UInt16, Array<Unit>, Unit))
public let var1226 : Int16 = Int16(117)
var var1238 : Int16 = Int16(Int8(Int8(-125)))
public var var1270 : ?(UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>) = Option<(UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>)>.None
public var var1283 : UInt8 = UInt8(Int8(UInt8(80)))
public let var1303 : (UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>) = (UInt8(12), UInt16(166), Float32(-68.0), UInt64((-100)), (), Float32(Float32(-8.0)), (Int32(58)&127..=Int32(Int16(Int8(76)))&127:(Int64(UInt32(46))|1)))
let var1324 : Float32 = Float32(Float32(Float32(101.0)))
public var var1341 : Int32 = Int32(UInt32(Int8(42)))
var var1560 : Bool = true
public var var1584 : Float64 = (-8.0)
let var1702 : Int16 = Int16(UInt16(108))
public var var1785 : UInt64 = UInt64(Int32(Int16(UInt8(81))))
public let var1823 : Int32 = Int32(UInt8(UInt8(18)))
public let var1878 : Enum147 = Enum147.defaultValue
let var1933 : Unit = ()
var var1937 : Unit = ()
var var1968 : (UInt32, UInt16, Array<Unit>, Unit) = (UInt32(UInt8(UInt8(UInt8(86)))), UInt16(UInt8(117)), [(), (), (), (), (), (), (), (), (), ()], ())
let var2052 : (Unit, Range<Int32>, (UInt32, UInt16, Array<Unit>, Unit), Range<Int16>, UInt32) = ((), (Int32(-125)&127..Int32(40)&127:59|1), (UInt32(UInt32(233)), UInt16(71), [(), (), (), (), (), (), (), (), (), ()], ()), (Int16(106)&127..Int16(Int16(25))&127:(Int64(Int32(-7))|1)), UInt32(145))
var var2124 : Array<Int32> = [Int32(-66), Int32(107), Int32(46), Int32(-52), Int32(-4), Int32(-18), Int32(-61), Int32(-71), Int32(115), Int32(111)]
public var var2308 : Aggregate303 = Aggregate303()
public var var2354 : Bool = ((UInt32(47)&127..UInt32(40)&127:(-34)|1) is Range<UInt32>)
var var2361 : Array<Class117> = Array<Class117>(10){ i => Class117() }
public let var2405 : (Range<Int32>, String, (UInt32, UInt16, Array<Unit>, Unit), Option<Array<Class117>>, (UInt32, UInt16, Array<Unit>, Unit), Float64, Range<UInt8>, Float64) = ((Int32(35)&127..Int32(48)&127:(Int64(111)|1)), "+l@XU${var335}.).vH", (UInt32(138), UInt16(Int8(UInt8(164))), [(), (), (), (), (), (), (), (), (), ()], ()), ((((Int32(-80)&127..=Int32(-20)&127:22|1), "U${var335}Es${var335}fcJ${var335}f${var335}%'`", (UInt32(206), UInt16(74), [(), (), (), (), (), (), (), (), (), ()], ()), Option<Array<Class117>>.None, (UInt32(140), UInt16(133), [(), (), (), (), (), (), (), (), (), ()], ()), 40.0, (UInt8(143)&127..=UInt8(250)&127:((-72)|1)), (-95.0)) as Option<Array<Unit>>) as Array<Class117>), (UInt32(Int32(-77)), UInt16(231), [(), (), (), (), (), (), (), (), (), ()], ()), (-126.0), (UInt8(152)&127..=UInt8(114)&127:(-39)|1), Float64(Float32(63.0)))
public let var2610 : Unit = ()
public let var2624 : ((UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>), Range<UInt32>, String, UInt64, Aggregate303, Array<Unit>) = ((UInt8(158), UInt16(Int8(68)), Float32(Float32(117.0)), UInt64(243), (), Float32(Float32(10.0)), (Int32(-8)&127..=Int32(UInt8(193))&127:(92|1))), (UInt32(96)&127..UInt32(89)&127:(-101)|1), """
RC${var335}`${var335}rz
Gf\"6w
""", UInt64(UInt8(Int8(UInt8(122)))), Aggregate303(), [(), (), (), (), (), (), (), (), (), ()])
public var var2664 : Int64 = (-40)
let var2688 : Unit = ()
public let var2714 : ???(Unit, Range<Int32>, (UInt32, UInt16, Array<Unit>, Unit), Range<Int16>, UInt32) = Option<Option<Option<(Unit, Range<Int32>, (UInt32, UInt16, Array<Unit>, Unit), Range<Int16>, UInt32)>>>.None
public let var2814 : Rune = 'e'
public var var2835 : Interface123<Int64, Int8> = Class117()
var var2937 : UInt8 = UInt8(UInt8(Int8(-74)))
var var3114 : (UInt32, Option<Array<Unit>>, Array<Int32>, Range<UInt8>, UInt32, Array<Float64>) = (UInt32(Int32(UInt8(Int8(-123)))), (UInt8(196) as Array<Unit>), [Int32(83), Int32(-18), Int32(80), Int32(122), Int32(-37), Int32(-78), Int32(41), Int32(-10), Int32(-101), Int32(59)], (UInt8(68)&127..UInt8(231)&127:71|1), UInt32(116), [78.0, (-122.0), Float64(Float32(Float32(-25.0))), 79.0, Float64(Float64(Float32(-62.0))), 65.0, Float64(Float32(Float32(-41.0))), 93.0, Float64(Float32(Float32(116.0))), (-89.0)])
public let var3187 : Bool = (Option<Array<Unit>>.None is Float32)
var var3209 : Int32 = Int32(-50)
public let var3336 : ?(Unit, Range<Int32>, (UInt32, UInt16, Array<Unit>, Unit), Range<Int16>, UInt32) = (104 as (Unit, Range<Int32>, (UInt32, UInt16, Array<Unit>, Unit), Range<Int16>, UInt32))
let var3712 : Option<(Int16, Enum15)> = Option<(Int16, Enum15)>.None
public let var3719 : UInt16 = UInt16(Int8(-10))
var var3967 : Range<UInt16> = (UInt16(149)&127..UInt16(5)&127:14|1)
var var4121 : Range<UInt32> = (UInt32(Int16(29))&127..UInt32(123)&127:(Int64(UInt16(UInt8(108)))|1))
public var var4197 : ?Int16 = Option<Int16>.None
var var4407 : ?Int16 = (Int8(110) as Int16)
var var4444 : ?Int16 = Option<Int16>.None
var var4469 : Array<Option<Int16>> = Array<Option<Int16>>(10){ i => Option<Int16>.None }
let var4673 : Option<Array<Class117>> = (Option<Int16>.None as Array<Class117>)
let var5038 : Bool = (Enum147.defaultValue is (UInt32, Option<Array<Unit>>, Array<Int32>, Range<UInt8>, UInt32, Array<Float64>))
func func6(param7 : Int16) : Unit { // block id: 8

}

public enum Enum15 {
    defaultValue |
    enumValue4702((Option<(Unit, Range<Int32>, (UInt32, UInt16, Array<Unit>, Unit), Range<Int16>, UInt32)>) -> Int32, Array<Class117>, Enum147)
}
public interface Interface123<T0, T1> where T0 <: Int64, T1 <: Int8 {

}

public interface Interface122<T0> <: Interface123<Int64, Int8> {
    func func128(namedParam129 ! : String, namedParam130 ! : Int32) : Bool { // block id: 131
        let var133 : Unit = ();
        var133;
        (match (((-115.0)|>func142)) {
            case _ => 
                var391;
                if (false) { Option<UInt8>.Some(UInt8(32)) } else { Option<UInt8>.Some(UInt8(235)) } 
            
            case 80 | 99 => 
                ();
                ();
                Option<UInt8>.None
            
            case _ => 
                var2688;
                let var4809 : ?UInt8 = (Aggregate303() as UInt8);
                if (false) { var4809 } else { var4809 } 
            
        } ?? UInt8(85));
        let var4844 : ?Bool = ((UInt16(162)&127..UInt16(118)&127:(25|1)) as Bool);
        (((Option<Option<Option<Bool>>>.None ?? Option<Option<Bool>>.None) ?? try { // block id: 4832
            var2610;
            var133;
            var var4838 : ?Bool = Option<Bool>.None;
            if (var2354) { var4838 } else { Option<Bool>.Some(var1183) } 
        } catch (_) { // block id: 4842
            var4844
        }) ?? (match (Option<Option<Bool>>.Some(Option<Bool>.Some(true))) {
            case _ => 
                if (var1183) { var2624 } else { ((var425, UInt16(106), var1324, UInt64(173), var133, var1324, var482), var4121, namedParam129, UInt64(205), Aggregate303(), [var2688, (), (), (), (), var2610, (), (), var1933, var2688]) } ;
                var1045;
                if (true) { var4844 } else { var4844 } 
            
        } ?? var356 >= var356))
    }

}

public interface Interface121 <: Interface122<UInt32> & Interface123<Int64, Int8> {

}

public interface Interface120 <: Interface121 {

}

public open class Class117 <: Interface120 & Interface121 & Resource {
    public init() { // block id: 119

    }
;
    static var var618 : Unit = ();
    private static var var3014 : (Bool, (Unit, Range<Int32>, (UInt32, UInt16, Array<Unit>, Unit), Range<Int16>, UInt32), Range<UInt64>, (UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>), UInt16) = (false, ((), (Int32(72)&127..Int32(-78)&127:((-104)|1)), (UInt32(245), UInt16(114), [(), (), (), (), (), (), (), (), (), ()], ()), (Int16(43)&127..=Int16(76)&127:(28|1)), UInt32(236)), (UInt64(23)&127..=UInt64(184)&127:((-125)|1)), (UInt8(70), UInt16(153), Float32(-96.0), UInt64(193), (), Float32(-3.0), (Int32(-98)&127..=Int32(103)&127:13|1)), UInt16(122));
    static let var3056 : Range<Int16> = (Int16(-62)&127..=Int16(13)&127:0|1);
    public init(param2966 : Option<UInt8>, param2967 : Int16, param2968 : (UInt32, Option<Array<Unit>>, Array<Int32>, Range<UInt8>, UInt32, Array<Float64>), param2969 : Option<(UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>)>) { // block id: 2970
        try (resource = Class117()) { // block id: 2972
            var var2979 : ?Interface120 = ([(UInt64(Int16(50)) as UInt32), Option<UInt32>.Some(UInt32(166)), Option<UInt32>.None, Option<UInt32>.Some(UInt32(Int8(-98))), ((Class117() as Float64) as UInt32), ((Int16(50)&127..=Int16(29)&127:84|1) as UInt32), Option<UInt32>.Some(UInt32(Int32(103))), (UInt16(UInt16(42)) as UInt32), ((UInt8(232)&127..=UInt8(206)&127:(38|1)) as UInt32), Option<UInt32>.None] as Interface120);
            var2979.getOrThrow();
            try (resource = Class117()) { // block id: 3009

            } finally { // block id: 3010
                if (true) { var3014 } else { (true, ((), (var1341&127..=var1341&127:(var2664|1)), var1968, var3056, var46), (UInt64(130)&127..=UInt64(5)&127:((-88)|1)), (UInt8(2), UInt16(176), Float32(2.0), UInt64(136), var1937, Float32(41.0), var482), UInt16(46)) } ;
                ()
            };
            try (resource = Class117()) { // block id: 3074
                ();
                ()
            } catch (_) { // block id: 3077

            } finally { // block id: 3078
                var1053;
                ();
                var618
            }
        } catch (_) { // block id: 3082
            try (resource = Class117()) { // block id: 3084

            } finally { // block id: 3085

            }
        } finally { // block id: 3086
            var loopTimeVar3091 : Int64 = 0;
            do {
                loopTimeVar3091++;

            } while ((true) && loopTimeVar3091 < 100 ) ;
            var var3094 : Bool = false;
            if (var3094) { // block id: 3096
                var1183 &&= var1183;
                Class117();
                var1040 &&= var1560
            };
            var loopTimeVar3110 : Int64 = 0;
            while ((var1183) && loopTimeVar3110 < 100 ) {
                loopTimeVar3110++;
                var391;
                var2610
            }
        }
    }
;
    public func func128(namedParam129 ! : String, namedParam130 ! : Int32) : Bool { // block id: 131
        let var133 : Unit = ();
        var133;
        (match (((-115.0)|>func142)) {
            case _ => 
                var391;
                if (false) { Option<UInt8>.Some(UInt8(32)) } else { Option<UInt8>.Some(UInt8(235)) } 
            
            case 80 | 99 => 
                ();
                ();
                Option<UInt8>.None
            
            case _ => 
                var2688;
                let var4809 : ?UInt8 = (Aggregate303() as UInt8);
                if (false) { var4809 } else { var4809 } 
            
        } ?? UInt8(85));
        let var4844 : ?Bool = ((UInt16(162)&127..UInt16(118)&127:(25|1)) as Bool);
        (((Option<Option<Option<Bool>>>.None ?? Option<Option<Bool>>.None) ?? try { // block id: 4832
            var2610;
            var133;
            var var4838 : ?Bool = Option<Bool>.None;
            if (var2354) { var4838 } else { Option<Bool>.Some(var1183) } 
        } catch (_) { // block id: 4842
            var4844
        }) ?? (match (Option<Option<Bool>>.Some(Option<Bool>.Some(true))) {
            case _ => 
                if (var1183) { var2624 } else { ((var425, UInt16(106), var1324, UInt64(173), var133, var1324, var482), var4121, namedParam129, UInt64(205), Aggregate303(), [var2688, (), (), (), (), var2610, (), (), var1933, var2688]) } ;
                var1045;
                if (true) { var4844 } else { var4844 } 
            
        } ?? var356 >= var356))
    }

    public func isClosed(): Bool { return true }
    public func close(): Unit {}
}


public enum Enum147 {
    defaultValue |
    enumValue161(Option<UInt8>)
}

public func func246(param247 : Float32) : Float64 { // block id: 248
    try { // block id: 260
        [57.0, 119.0, (-75.0), 48.0, (-95.0), (-4.0), 63.0, (-83.0), (-39.0), 113.0]
    } finally { // block id: 262
        [124.0, (-107.0), 39.0, 21.0, 124.0, (-112.0), 51.0, 32.0, (-90.0), 48.0]
    }[8]
}

public struct Aggregate303 {
    public init() { // block id: 305

    }
;
    public static var var308 : Unit = ()
}

public func func378(param379 : UInt32) : Interface121 { // block id: 380
    let var431 : (UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>) = (UInt8(Int8(UInt8(87))), UInt16(239), Float32(Float32(Float32(Float32(26.0)))), UInt64(Int16(-57)), (), Float32(-120.0), (Int32(-58)&127..Int32(-40)&127:((-30)|1)));
    var var457 : Int64 = Int64((-84));
    let var464 : Interface121 = Class117();
    var var476 : Float32 = Float32(74.0);
    if ((var386 is Enum15)) { try { // block id: 389
        var391;
        Class117();
        let var396 : Array<Unit> = Array<Unit>(10){ i => () };
        let var410 : Range<UInt32> = (UInt32(24)&127..UInt32(244)&127:(-28)|1);
        let var413 : Range<Int64> = ((-86)&127..=Int64(UInt64(79))&127:(Int64(UInt32(Int8(UInt8(215))))|1));
        (var396, 'o', var410, var413, Class117(), (UInt8(198)&127..UInt8(60)&127:(-106)|1), var425, var391, var431)
    } finally { // block id: 449
        ([(), (), (), (), (), (), (), (), (), ()], 'L', (UInt32(177)&127..param379&127:(var457|1)), var461, var464, (UInt8(33)&127..=var425&127:(75|1)), UInt8(27), (), (UInt8(61), UInt16(55), var476, UInt64(252), (), Float32(82.0), var482))
    } } else { (if (true) { var493 } else { var493 } ) } [4]
}














public func func667(namedParam1144 ! : Array<Int32>, namedParam1145 ! : Option<Float64>) : String { // block id: 1146
    var var1159 : Bool = false;
    (Option<String>.None ?? try { // block id: 1154
        var335
    } finally { // block id: 1156
        var1159 ||= true;
        if (var1040) { var335 } else { var335 } 
    })
}


func func1418(optionalParam1419 ! : Array<Int16> = [Int16(UInt8(UInt8(219))), Int16(Int16(Int16(-120))), Int16(-14), Int16(Int8(111)), Int16(106), Int16(-93), Int16(Int8(UInt8(229))), Int16(Int16(-83)), Int16(UInt16(Int8(65))), Int16(UInt16(173))], optionalParam1442 ! : Option<Unit> = Option<Unit>.None, optionalParam1444 ! : UInt32 = UInt32(UInt32(Int16(33)))) : Int32 { // block id: 1448
    let var1462 : (Unit, Range<Int32>, (UInt32, UInt16, Array<Unit>, Unit), Range<Int16>, UInt32) = ((), (Int32(61)&127..Int32(116)&127:116|1), (UInt32(101), UInt16(147), [(), (), (), (), (), (), (), (), (), ()], ()), (Int16(-128)&127..=Int16(8)&127:30|1), UInt32(Int16(110)));
    let var1491 : (Bool, (Unit, Range<Int32>, (UInt32, UInt16, Array<Unit>, Unit), Range<Int16>, UInt32), Range<UInt64>, (UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>), UInt16) = (false, ((), (Int32(14)&127..=Int32(125)&127:(-1)|1), (UInt32(UInt8(54)), UInt16(UInt16(218)), [(), (), (), (), (), (), (), (), (), ()], ()), (Int16(113)&127..=Int16(UInt16(0))&127:((-45)|1)), UInt32(213)), (UInt64(UInt32(Int16(-102)))&127..UInt64(206)&127:((-21)|1)), (UInt8(253), UInt16(UInt8(UInt8(186))), Float32(Float32(-29.0)), UInt64(UInt16(48)), (), Float32(-36.0), (Int32(2)&127..Int32(-102)&127:(-52)|1)), UInt16(55));
    func func1451(param1452 : (UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>)) : UInt16 { // block id: 1453
        if (if (true) { (var1040, var1462, (UInt64(64)&127..UInt64(111)&127:(var791|1)), (UInt8(229), UInt16(178), var1324, UInt64(74), (), var1324, (Int32(121)&127..=Int32(59)&127:(var791|1))), var356) } else { var1491 } [0]) { // block id: 1540
            match ((var46, UInt16(193), var688, ())) {
                case caseVar1549 : (Array<Unit>, Rune, Range<UInt32>, Range<Int64>, Interface121, Range<UInt8>, UInt8, Unit, (UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>)) => 
                    Option<Unit>.None;
                    var391
                
                case (caseVar1555 : Aggregate303,_ : String,_ : Option<Float64>,caseVar1556 : Int32) => 
                    var1560 = false;
                    var391
                
                case (_ : (Int16, Enum15),_,caseVar1566,_) => 
                    ()
                
                case _ => 
                    ()
                
            };
            UInt16(106) & var356
        } else { // block id: 1575
            var loopTimeVar1598 : Int64 = 0;
            do {
                loopTimeVar1598++;
                if (false) { var924 } else { [var1584, var1584, (-24.0), 120.0, var1584, var1584, (-15.0), var1584, 8.0, var1584] } ;
                Option<Unit>.Some(var391)
            } while ((false) && loopTimeVar1598 < 100 ) ;
            var var1600 : Unit = ();
            var1600;
            match {
                case false => 
                Option<Option<(Unit, Range<Int32>, (UInt32, UInt16, Array<Unit>, Unit), Range<Int16>, UInt32)>>.None;
                var356
                case false => 
                ();
                var356
                case _ => 
                Enum147.defaultValue;
                UInt16(17) & var356
            }
        }
    }
;
    Int32(func1451(var1303))
}

public func func1175(param1176 : Option<(Unit, Range<Int32>, (UInt32, UInt16, Array<Unit>, Unit), Range<Int16>, UInt32)>) : Int32 { // block id: 1177
    var var1199 : Int16 = Int16(UInt8(UInt8(206)));
    var var1213 : ?Array<Int16> = Option<Array<Int16>>.None;
    let var1254 : Int16 = Int16(Int16(UInt8(Int8(UInt8(251)))));
    if (if (var1183) { // block id: 1186
        ();
        var391;
        var1040
    } else if (var1183) { // block id: 1191
        var791;
        Enum147.defaultValue;
        var1183
    } else { // block id: 1195
        ();
        var1199 ** (var1199 & 3);
        var1040 && true
    }) { (var1213 ?? [Int16(-67), var1199, var1199, Int16(-9), Int16(81), Int16(17), var1199, var1199, var1199, var1226]) } else { (if (false) { [Int16(-108), Int16(-63), var1226, var1226, var1199, Int16(26), var1238, Int16(-76), Int16(-85), var1226] } else { [Int16(-106), Int16(49), Int16(-59), Int16(-128), var1226, var1238, Int16(52), var1254, Int16(-74), var1254] } ) } [9];
    let var1276 : Int16 = Int16(5);
    var var1338 : Int32 = Int32(0);
    var var1377 : (UInt32, Array<Int32>, (UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>), Array<Int16>, Array<Unit>, Rune, Range<UInt16>) = (UInt32(UInt16(172)), [Int32(98), Int32(-35), Int32(-16), Int32(102), Int32(-26), Int32(24), Int32(20), Int32(-76), Int32(41), Int32(-121)], (UInt8(Int8(UInt8(160))), UInt16(Int8(Int8(-32))), Float32(53.0), UInt64(173), (), Float32(Float32(Float32(63.0))), (Int32(-38)&127..=Int32(80)&127:(37|1))), [Int16(-33), Int16(2), Int16(67), Int16(16), Int16(Int8(UInt8(223))), Int16(-51), Int16(-6), Int16(UInt16(43)), Int16(29), Int16(71)], [(), (), (), (), (), (), (), (), (), ()], 'B', (UInt16(108)&127..UInt16(82)&127:5|1));
    try { // block id: 1264
        (var611 ?? var391);
        var1270.getOrThrow()
    } catch (e: Exception) { // block id: 1272
        var1276|>func6;
        if (true) { // block id: 1280
            (var1283, UInt16(238), Float32(51.0), UInt64(249), var391, Float32(76.0), (Int32(-34)&127..=Int32(-58)&127:62|1))
        } else { // block id: 1293
            if (var1183) { Option<Option<UInt32>>.Some(var1126) } else { Option<Option<UInt32>>.None } ;
            ();
            if (false) { var1303 } else { (UInt8(44), var356, var1324, var91, (), var1324, (Int32(-21)&127..Int32(-36)&127:79|1)) } 
        }
    } finally { // block id: 1332
        let var1350 : Int32 = Int32(86);
        var loopTimeVar1364 : Range<UInt64> = (UInt64(UInt16(Int8(98)))&127..UInt64(42)&127:(Int64(UInt64(UInt64(UInt32(149))))|1));
        for (i in loopTimeVar1364 where var1040) {
            var var1355 : Int32 = Int32(85);
            [var1338, var1341, var1341, Int32(-7), var1341, var1338, var1350, var1338, Int32(-18), var1355];
            var var1360 : ?Float64 = Option<Float64>.None;
            if (var1040) { var1360 } else { Option<Float64>.Some(96.0) } 
        };
        var1377[2]
    };
    var var1632 : ???(Unit, Range<Int32>, (UInt32, UInt16, Array<Unit>, Unit), Range<Int16>, UInt32) = ((false, ((), (Int32(68)&127..Int32(115)&127:(-55)|1), (UInt32(173), UInt16(71), [(), (), (), (), (), (), (), (), (), ()], ()), (Int16(36)&127..Int16(-105)&127:(41|1)), UInt32(UInt32(228))), (UInt64(240)&127..UInt64(63)&127:(-73)|1), (UInt8(Int8(54)), UInt16(Int16(34)), Float32(64.0), UInt64(2), (), Float32(101.0), (Int32(-108)&127..=Int32(-23)&127:(-53)|1)), UInt16(UInt8(Int8(-112)))) as Option<Option<(Unit, Range<Int32>, (UInt32, UInt16, Array<Unit>, Unit), Range<Int16>, UInt32)>>);
    var var1676 : Array<Int16> = [Int16(86), Int16(-20), Int16(-23), Int16(78), Int16(0), Int16(-40), Int16(-57), Int16(55), Int16(72), Int16(63)];
    var var1691 : Int16 = Int16(54);
    func1418(optionalParam1419 : if ((var1377 is Option<Option<UInt32>>)) { (var1213 ?? [Int16(-46), Int16(56), Int16(-99), Int16(-94), Int16(-98), Int16(38), Int16(-60), Int16(72), Int16(39), Int16(-87)]) } else { match (var1172) {
        case caseVar1627 : Range<Int16> => 
            if (false) { var1632 } else { Option<Option<Option<(Unit, Range<Int32>, (UInt32, UInt16, Array<Unit>, Unit), Range<Int16>, UInt32)>>>.None } ;
            var1676
        
        case defaultValue => 
            [var1254, Int16(75), Int16(-38), Int16(53), Int16(-36), Int16(112), Int16(-23), Int16(50), var1691, var1254]
        
        case defaultValue => 
            var91 - var91;
            [var1702, var1238, var1238, Int16(-112), Int16(-9), var1238, var1238, var1254, var1238, Int16(114)]
        
        case _ => 
            [Int16(26), Int16(-37), Int16(-53), Int16(-31), Int16(3), Int16(117), Int16(0), Int16(58), Int16(67), Int16(-6)]
        
    } } , optionalParam1442 : (var924 as Unit))
}

func func1168(param1169 : Option<Float64>) : Int32 { // block id: 1170
    var1172;
    Option<(Unit, Range<Int32>, (UInt32, UInt16, Array<Unit>, Unit), Range<Int16>, UInt32)>.None|>{ lambdaParameter1721 : Option<(Unit, Range<Int32>, (UInt32, UInt16, Array<Unit>, Unit), Range<Int16>, UInt32)> => var var1737 : ?Array<Unit> = (() as Array<Unit>); match (match (func378(UInt32(6))) {
            case _ : Enum15 => 
                (UInt16(234)&127..=UInt16(193)&127:43|1)
            
            case _ => 
                var391;
                Option<Option<Array<Unit>>>.Some(var1737);
                if (false) { (UInt16(174)&127..=UInt16(181)&127:16|1) } else { (UInt16(40)&127..=var356&127:((-7)|1)) } 
            
            case caseVar1749 : Option<String> => 
                (var356&127..UInt16(117)&127:(var791|1))
            
            case _ => 
                let var1759 : Range<UInt16> = (UInt16(250)&127..=UInt16(151)&127:(Int64(Int64(Int8(UInt8(95))))|1));
                var1759
            
            case _ => 
                ();
                (UInt16(48)&127..var356&127:(var791|1))
            
        }) {
        case caseVar1776 : Range<Int64> => 
            ();
            var1341
        
        case _ => 
            var1785 /= ((UInt64(75)) | 1);
            Int32(-54) + Int32(-58)
        
        case _ => 
            -Int32(116)
        
        case _ => 
            var391;
            Option<Option<Array<Unit>>>.None;
            var1341
        
    } }
}


func func1032(param1033 : Aggregate303) : String { // block id: 1034
    match (if (var1040) { var1045 } else { [(), (), (), (), (), (), (), (), (), ()] } ) {
        case caseVar1050 : Option<Option<Option<(Unit, Range<Int32>, (UInt32, UInt16, Array<Unit>, Unit), Range<Int16>, UInt32)>>> => 
            var1053
        
        case _ => 
            var var1082 : ?UInt32 = Option<UInt32>.Some(UInt32(138));
            let var1093 : ?UInt32 = Option<UInt32>.None;
            [var1082, var1082, var1082, var1082, var1082, var1082, var1082, Option<UInt32>.None, var1093, var1082]
        
        case caseVar1098 => 
            var var1106 : ?UInt32 = Option<UInt32>.Some(UInt32(Int16(-48)));
            if (false) { var1053 } else { [Option<UInt32>.None, var1106, Option<UInt32>.None, Option<UInt32>.None, var1106, var1106, Option<UInt32>.None, var1106, Option<UInt32>.Some(UInt32(146)), var1106] } 
        
        case _ => 
            var391;
            var391;
            var var1131 : ?UInt32 = Option<UInt32>.Some(UInt32(18));
            [Option<UInt32>.None, var1126, var1126, Option<UInt32>.None, var1131, var1126, Option<UInt32>.None, Option<UInt32>.Some(var46), Option<UInt32>.Some(UInt32(166)), Option<UInt32>.None]
        
    }[9];
    let var1806 : (Option<Float64>) -> Int32 = { lambdaParameter1809 : Option<Float64> => Int32(Int8(UInt8(102))) };
    let var1902 : Range<UInt16> = (UInt16(182)&127..UInt16(Int16(106))&127:(Int64(Int64(UInt32(Int16(119))))|1));
    var var1989 : Range<Int16> = (Int16(46)&127..=Int16(-48)&127:97|1);
    func667(namedParam1144 : [(Option<Float64>.None|>var1806), [Int32(-94), Int32(-31), var1341, Int32(16), var1341, var1823, var1823, var1341, Int32(-13), var1823][4], (Option<Float64>.Some((-115.0))|>func1168), var1341, try { // block id: 1838
        let var1840 : ((UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>), Range<UInt32>, String, UInt64, Aggregate303, Array<Unit>) = ((UInt8(74), UInt16(112), Float32(Float32(-117.0)), UInt64(Int16(UInt16(100))), (), Float32(Float32(-58.0)), (Int32(6)&127..Int32(110)&127:111|1)), (UInt32(170)&127..UInt32(64)&127:38|1), ###"0@\\<PA\\#Pa{"###, UInt64(UInt16(Int16(Int8(-28)))), Aggregate303(), [(), (), (), (), (), (), (), (), (), ()]);
        var1840;
        (Int8(11)&127..=Int8(2)&127:(-65)|1);
        var1341
    } catch (e: Exception) { // block id: 1874
        var1341
    } finally { // block id: 1876
        var1878;
        let var1882 : UInt32 = UInt32(118);
        let var1897 : Array<Int16> = [Int16(-6), Int16(107), Int16(-90), Int16(-97), Int16(9), Int16(7), Int16(50), Int16(93), Int16(-95), Int16(-54)];
        (var1882, [var1341, Int32(64), var1341, var1341, Int32(-65), var1823, var1823, var1341, Int32(73), var1823], var1303, var1897, [(), (), (), (), (), (), (), (), (), ()], 'M', var1902);
        var1341 ^ var1341
    }, Int32(-90) ^ Int32(-79), (Option<Int32>.None ?? Int32(10)), (Float32(-27.0), [var391, (), (), var1933, (), var1937, var391, var1933, var391, ()], var791, var461, Int32(113), (var46, var356, [(), (), var1933, (), var391, var391, var1937, (), (), ()], var1937), UInt16(214))[4], match (((), (Int32(-48)&127..=Int32(55)&127:(-38)|1), var1968, var1989, var46)) {
        case _ => 
            var1341
        
        case _ => 
            if (var1560) { var1172 } else { Enum15.defaultValue } ;
            var var2004 : Int16 = Int16(123);
            var2004 **= (var2004 & 3);
            Int32(22)
        
    }, var1823], namedParam1145 : (if (var1183) { // block id: 2012
        var356 >>= ((UInt16(109)) & 7);
        var var2018 : Int8 = Int8(Int8(Int8(-40)));
        var2018 = var2018;
        ((), (var1823&127..var1341&127:(62|1)), (UInt32(175), UInt16(79), [(), (), (), var1933, var1937, var391, (), (), (), ()], var1933), (Int16(19)&127..=Int16(58)&127:(-89)|1), UInt32(113))
    } else if (var1560) { // block id: 2047
        "u#9|\"y NCp";
        if (var1183) { var2052 } else { var2052 } 
    } else { // block id: 2080
        var2052
    } as Float64))
}

public func func997(param998 : Range<Int64>) : Option<Option<(Unit, Range<Int32>, (UInt32, UInt16, Array<Unit>, Unit), Range<Int16>, UInt32)>> { // block id: 999
    let var2098 : UInt32 = UInt32(18);
    let var2109 : ??(Unit, Range<Int32>, (UInt32, UInt16, Array<Unit>, Unit), Range<Int16>, UInt32) = Option<Option<(Unit, Range<Int32>, (UInt32, UInt16, Array<Unit>, Unit), Range<Int16>, UInt32)>>.Some(Option<(Unit, Range<Int32>, (UInt32, UInt16, Array<Unit>, Unit), Range<Int16>, UInt32)>.None);
    try { // block id: 1001
        var var1007 : Float32 = Float32(-2.0);
        let var1014 : Int32 = Int32(Int8(Int8(-70)));
        (var425, var356, var1007, UInt64(110), var391, Float32(12.0), (var1014&127..var1014&127:(var791|1)))[4];
        let var1027 : ???(Unit, Range<Int32>, (UInt32, UInt16, Array<Unit>, Unit), Range<Int16>, UInt32) = Option<Option<Option<(Unit, Range<Int32>, (UInt32, UInt16, Array<Unit>, Unit), Range<Int16>, UInt32)>>>.None;
        (var1027 ?? Option<Option<(Unit, Range<Int32>, (UInt32, UInt16, Array<Unit>, Unit), Range<Int16>, UInt32)>>.None)
    } catch (_) { // block id: 1030
        let var2084 : Aggregate303 = Aggregate303();
        var2084|>func1032;
        var var2090 : Range<Int32> = (Int32(-68)&127..Int32(-2)&127:(-25)|1);
        ((), var2090, var1968, (Int16(96)&127..var1238&127:(var791|1)), var2098)[0];
        var var2181 : ?(Unit, Range<Int32>, (UInt32, UInt16, Array<Unit>, Unit), Range<Int16>, UInt32) = ((UInt32(UInt8(52)), [Int32(97), Int32(Int16(-45)), Int32(-83), Int32(UInt32(114)), Int32(UInt16(27)), Int32(UInt16(188)), Int32(-17), Int32(Int32(-125)), Int32(-80), Int32(Int32(11))], (UInt8(114), UInt16(93), Float32(Float32(-20.0)), UInt64(122), (), Float32(Float32(-128.0)), (Int32(-100)&127..=Int32(-47)&127:63|1)), [Int16(101), Int16(-92), Int16(-96), Int16(49), Int16(98), Int16(-29), Int16(94), Int16(-71), Int16(-81), Int16(-6)], [(), (), (), (), (), (), (), (), (), ()], 'k', (UInt16(Int16(17))&127..=UInt16(22)&127:(3|1))) as (Unit, Range<Int32>, (UInt32, UInt16, Array<Unit>, Unit), Range<Int16>, UInt32));
        match ((19&127..=102&127:77|1)) {
            case _ => 
                if (true) { var2109 } else { Option<Option<(Unit, Range<Int32>, (UInt32, UInt16, Array<Unit>, Unit), Range<Int16>, UInt32)>>.None } 
            
            case _ => 
                ();
                let var2119 : UInt32 = UInt32(UInt8(Int8(-90)));
                let var2130 : Rune = 'w';
                (var2119, var2124, var1303, [Int16(5), Int16(79), Int16(-55), Int16(-117), Int16(51), Int16(91), Int16(33), Int16(50), Int16(118), Int16(38)], var688, var2130, (UInt16(2)&127..=var356&127:(var791|1)));
                var var2138 : ?(Unit, Range<Int32>, (UInt32, UInt16, Array<Unit>, Unit), Range<Int16>, UInt32) = (((UInt8(70), UInt16(UInt16(151)), Float32(-106.0), UInt64(134), (), Float32(Float32(-113.0)), (Int32(-125)&127..=Int32(89)&127:((-90)|1))), (UInt32(170)&127..UInt32(10)&127:105|1), "+XT(?Hd/r=", UInt64(159), Aggregate303(), [(), (), (), (), (), (), (), (), (), ()]) as (Unit, Range<Int32>, (UInt32, UInt16, Array<Unit>, Unit), Range<Int16>, UInt32));
                Option<Option<(Unit, Range<Int32>, (UInt32, UInt16, Array<Unit>, Unit), Range<Int16>, UInt32)>>.Some(var2138)
            
            case _ : Range<UInt64> => 
                if (var1560) { Option<Option<(Unit, Range<Int32>, (UInt32, UInt16, Array<Unit>, Unit), Range<Int16>, UInt32)>>.Some(Option<(Unit, Range<Int32>, (UInt32, UInt16, Array<Unit>, Unit), Range<Int16>, UInt32)>.None) } else { var2109 } 
            
            case _ => 
                Option<Option<(Unit, Range<Int32>, (UInt32, UInt16, Array<Unit>, Unit), Range<Int16>, UInt32)>>.Some(var2181)
            
        }
    }
}


public func func976(param977 : ((UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>), Range<UInt32>, String, UInt64, Aggregate303, Array<Unit>)) : Class117 { // block id: 978
    let var2237 : ?(Unit, Range<Int32>, (UInt32, UInt16, Array<Unit>, Unit), Range<Int16>, UInt32) = (Option<String>.Some("""
dDmj=
$:61T
""") as (Unit, Range<Int32>, (UInt32, UInt16, Array<Unit>, Unit), Range<Int16>, UInt32));
    let var2271 : Range<Int16> = (Int16(33)&127..Int16(59)&127:(79|1));
    func func982(param983 : Aggregate303) : (Unit, Range<Int32>, (UInt32, UInt16, Array<Unit>, Unit), Range<Int16>, UInt32) { // block id: 984
        ();
        var var2257 : (UInt32, UInt16, Array<Unit>, Unit) = (UInt32(UInt32(207)), UInt16(110), [(), (), (), (), (), (), (), (), (), ()], ());
        ((((var791&127..64&127:(var791|1))|>func997) ?? var2237) ?? ([(), (), (), var1937, (), (), var1933, (), var391, ()][2], var482, var2257, if (var1040) { (Int16(-94)&127..Int16(-55)&127:((-128)|1)) } else { var2271 } , match (UInt64(201)) {
            case 41 => 
                UInt32(14)
            
            case 108 => 
                var1937;
                var46
            
            case _ : Int64 => 
                var46
            
            case 248 | 48 | 29 => 
                UInt32(211) % ((var46) | 1)
            
            case _ => 
                var var2301 : Int8 = Int8(4);
                var2301 -= var197;
                var46
            
        }))
    }
;
    func982(if (var1183) { var2308 } else { var2308 } )[0];
    (((Int32(-4)&127..=Int32(-83)&127:(-97)|1), "(Md?H%f}Cm", (UInt32(54), UInt16(117), [(), (), (), (), (), (), (), (), (), ()], var1933), Option<Array<Class117>>.Some([Class117(), var125, Class117(), Class117(), var125, var125, var125, Class117(), Class117(), Class117()]), (var46, var356, [(), (), (), (), (), (), (), (), (), ()], var391), 58.0, (UInt8(195)&127..UInt8(213)&127:(-128)|1), (-8.0))[3] ?? try { // block id: 2351
        if (var2354) { Option<Unit>.Some(var1933) } else { Option<Unit>.None } ;
        var2361
    } catch (e: Exception) { // block id: 2373
        var1933;
        [Class117(), Class117(), Class117(), Class117(), Class117(), var125, Class117(), Class117(), var125, var125]
    })[8]
}

func func969(param970 : Range<UInt16>, optionalParam971 ! : Option<Float64> = (UInt64(203) as Float64)) : Option<(UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>)> { // block id: 974
    let var2495 : Bool = true;
    var var2499 : (UInt32, Array<Int32>, (UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>), Array<Int16>, Array<Unit>, Rune, Range<UInt16>) = (UInt32(UInt8(Int8(Int8(-128)))), [Int32(109), Int32(36), Int32(105), Int32(-124), Int32(Int16(-79)), Int32(51), Int32(-99), Int32(Int32(-54)), Int32(Int16(UInt16(79))), Int32(Int32(74))], (UInt8(54), UInt16(131), Float32(122.0), UInt64(240), (), Float32(-8.0), (Int32(-27)&127..=Int32(104)&127:(-98)|1)), [Int16(-30), Int16(65), Int16(79), Int16(103), Int16(54), Int16(-6), Int16(-38), Int16(38), Int16(-76), Int16(12)], [(), (), (), (), (), (), (), (), (), ()], '0', (UInt16(184)&127..UInt16(217)&127:35|1));
    if (match (var1270) {
        case caseVar2393 => 
            var1040 || var1183
        
        case _ : Array<Int16> => 
            var46 >>= ((var46) & 7);
            var2405;
            var197 > Int8(-105)
        
        case caseVar2487 => 
            ();
            (Int16(92)&127..Int16(94)&127:(-68)|1);
            var1560
        
        case _ => 
            var2495
        
    }) { match (var2499) {
        case (_ : Array<Int16>,_,_ : (Unit, Range<Int32>, (UInt32, UInt16, Array<Unit>, Unit), Range<Int16>, UInt32),caseVar2545,caseVar2546,_,caseVar2547 : (UInt32, UInt16, Array<Unit>, Unit)) => 
            var var2550 : ((UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>), Range<UInt32>, String, UInt64, Aggregate303, Array<Unit>) = ((UInt8(Int8(Int8(-55))), UInt16(UInt8(63)), Float32(Float32(Float32(9.0))), UInt64(UInt32(47)), (), Float32(-53.0), (Int32(79)&127..=Int32(2)&127:(-37)|1)), (UInt32(UInt16(164))&127..UInt32(Int32(-82))&127:((-124)|1)), "_'faOPz$n:", UInt64(48), Aggregate303(), [(), (), (), (), (), (), (), (), (), ()]);
            var2550
        
        case caseVar2588 => 
            var1933;
            ();
            let var2597 : UInt32 = UInt32(Int8(UInt8(129)));
            (var1303, (var46&127..var2597&127:(119|1)), var335, var91, Aggregate303(), [var391, var1937, (), var2610, var1937, (), (), (), var1933, ()])
        
        case caseVar2620 => 
            var2610;
            var2624
        
        case _ => 
            ();
            var2664 *= var2664;
            let var2683 : Unit = ();
            if (var1183) { var2624 } else { (var1303, (UInt32(249)&127..UInt32(218)&127:(-72)|1), var335, UInt64(35), Aggregate303(), [var2610, var1933, var391, var391, var1933, var2683, (), (), var2688, var391]) } 
        
    } } else { if (true) { // block id: 2693
        var2624
    } else { // block id: 2695
        ((UInt8(60), var356, Float32(109.0), var91, (), var1324, var482), (var46&127..var46&127:(var2664|1)), "@>jU;\"Sa{e&", var1785, Aggregate303(), [(), (), (), (), (), (), (), (), (), ()])
    } } |>func976;
    var2714;
    try { // block id: 2717
        var1933;
        if (var2495) { Option<(UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>)>.None } else { Option<(UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>)>.Some((var1283, var356, var1324, UInt64(64), var1937, Float32(-104.0), var482)) } 
    } catch (_) { // block id: 2731
        match (var1172) {
            case caseVar2736 : (UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>) => 
                if (var2495) { var20 } else { var20 } ;
                ();
                var1270
            
            case defaultValue => 
                if (var1183) { Option<(UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>)>.None } else { Option<(UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>)>.Some(var1303) } 
            
            case caseVar2754 : Enum147 => 
                ();
                let var2760 : ?(UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>) = Option<(UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>)>.Some((UInt8(146), UInt16(UInt16(249)), Float32(Float32(Float32(-93.0))), UInt64(UInt64(38)), (), Float32(-25.0), (Int32(-19)&127..=Int32(52)&127:(Int64(Int8(-111))|1))));
                if (var1560) { var2760 } else { var1270 } 
            
            case defaultValue => 
                var1785 -= var1785;
                Option<(UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>)>.Some(var1303)
            
            case _ => 
                Int8(-23);
                ();
                if (var2495) { Option<(UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>)>.Some(var1303) } else { var1270 } 
            
        }
    }
}

public func func965(param966 : Int8) : Option<(UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>)> { // block id: 967
    let var2825 : UInt16 = UInt16(153);
    func969(match (if (false) { // block id: 2799
            Option<Option<Option<UInt32>>>.Some(Option<Option<UInt32>>.Some(var1126));
            let var2806 : Rune = '2';
            if (true) { var2806 } else { 'n' } 
        } else { // block id: 2809
            var1283 **= (var1283 & 3);
            var2814
        }) {
        case _ => 
            (Int32(-78)&127..=Int32(39)&127:((-30)|1));
            ();
            (var2825&127..=var356&127:(var2664|1))
        
    })
}

public func func942(param943 : String, param944 : Interface120, optionalParam945 ! : Option<UInt8> = ((Int8(-61)&127..Int8(86)&127:38|1) as UInt8), namedParam948 ! : Range<Int16>) : (UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>) { // block id: 949
    var var2830 : (Int8) -> Option<(UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>)> = func965;
    let var2910 : Int32 = Int32(Int32(114));
    if (((Option<Float64>.None ?? (-107.0)) is Option<Option<Option<UInt32>>>)) { ((Int8(6)|>var2830) ?? match (var2835) {
        case _ : Rune => 
            ();
            if (var1183) { ###"m-yRE)>ea{Z"### } else { param943 } ;
            let var2848 : (UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>) = (UInt8(Int8(-78)), UInt16(Int16(119)), Float32(-91.0), UInt64(UInt16(UInt16(UInt16(44)))), (), Float32(37.0), (Int32(103)&127..=Int32(30)&127:(-114)|1));
            if (var2354) { var2848 } else { var1303 } 
        
        case caseVar2865 => 
            ();
            var2664;
            var1303
        
        case _ => 
            var1785 %= ((var91) | 1);
            var1283 |= UInt8(176);
            let var2886 : Range<Int32> = (Int32(Int32(Int8(66)))&127..Int32(-111)&127:(Int64((-84))|1));
            (UInt8(116), var356, Float32(-2.0), UInt64(179), (), var1324, var2886)
        
    }) } else { (if (var1560) { Option<(UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>)>.Some(var1303) } else { var1270 }  ?? (var425, var356, var1324, var1785, (), var1324, (Int32(119)&127..=var2910&127:(var2664|1)))) } 
}


func func928(param929 : Aggregate303) : Array<Unit> { // block id: 930
    var loopTimeVar3152 : Int64 = 0;
    var loopTimeVar3159 : Int64 = 0;
    var loopTimeVar3178 : Int64 = 0;
    var loopTimeVar3199 : Int64 = 0;
    var var3236 : Int16 = Int16(105);
    let var3259 : ?Array<Unit> = Option<Array<Unit>>.None;
    let var3270 : Int32 = Int32(43);
    var var3295 : Class117 = Class117();
    var loopTimeVar3303 : Range<UInt64> = (UInt64(Int32(-113))&127..UInt64(105)&127:(76|1));
    let var3317 : ?UInt8 = Option<UInt8>.Some(UInt8(170));
    [(Int16(var197)|>{ lambdaParameter935 : Int16 => var391 }), func942("41%pj$n7Wo", var828, namedParam948 : (Int16(93)&127..var1238&127:(var2664|1)))[4], do {
        loopTimeVar3152++;
        ();
        if (var1560) { [var125, var125, Class117(), var125, var125, var125, Class117(), Class117(), Class117(), Class117()] } else { [var125, Class117(), Class117(), Class117(Option<UInt8>.None, var1702, var3114, var1270), var125, var125, Class117(), var125, var125, Class117()] } 
    } while ((try { // block id: 2923
        var2354
    } catch (_) { // block id: 2925
        (var91&127..=var91&127:(17|1));
        var1560
    } finally { // block id: 2931
        var1238 -= Int16(48);
        var2937 <<= ((var425) & 7);
        var1702 == Int16(95)
    }) && loopTimeVar3152 < 100 ) , do {
        loopTimeVar3159++;
        var1270;
        ()
    } while ((false) && loopTimeVar3159 < 100 ) , do {
        loopTimeVar3178++;
        var391;
        ()
    } while ((try { // block id: 3162
        Class117();
        var2354
    } catch (e: Exception) { // block id: 3166
        var1172;
        let var3169 : Unit = ();
        var3169;
        var91 != UInt64(101)
    }) && loopTimeVar3178 < 100 ) , do {
        loopTimeVar3199++;

    } while (([false, var1183, true, var3187, true, var3187, false, var2354, var1183, var3187][8]) && loopTimeVar3199 < 100 ) , match ([Int32(-19), Int32(66), Int32(27), var1341, var1823, Int32(-7), var3209, Int32(59), var1341, var3209]) {
        case _ => 
            ()
        
    }, try (resource = Class117()) { // block id: 3218

    } finally { // block id: 3219
        var1937;
        var391;
        var1933
    }, ((Option<Aggregate303>.Some(param929) as Unit) ?? for (i in loopTimeVar3303 where var1040) {
        let var3232 : ?UInt8 = Option<UInt8>.Some(UInt8(74));
        Class117(var3232, var3236, (UInt32(139), Option<Array<Unit>>.None, var2124, (UInt8(162)&127..=UInt8(187)&127:(-114)|1), UInt32(53), var924), Option<(UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>)>.None);
        let var3278 : ?(UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>) = (((), (Int32(92)&127..Int32(-92)&127:95|1), (UInt32(UInt16(177)), UInt16(UInt16(135)), [(), (), (), (), (), (), (), (), (), ()], ()), (Int16(-44)&127..Int16(37)&127:(-12)|1), UInt32(Int32(UInt16(177)))) as (UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>));
        if (var1040) { var2361 } else { [var125, Class117(), Class117(Option<UInt8>.Some(UInt8(235)), Int16(-97), (var46, var3259, [Int32(1), Int32(-50), var3209, var3209, Int32(-53), Int32(-116), var3209, var3270, Int32(6), var3209], var915, UInt32(121), [119.0, (-4.0), 13.0, (-75.0), (-88.0), (-63.0), (-83.0), 66.0, 29.0, (-36.0)]), var3278), var3295, Class117(), var3295, Class117(), var3295, var3295, var125] } 
    }), if (false) { // block id: 3312
        ();
        if (var1560) { var3317 } else { var3317 } ;
        var1933
    }]
}


public func func813(param814 : UInt16) : (Int16, Enum15) { // block id: 815
    var var879 : Bool = (false is Option<UInt8>);
    let var883 : ?Array<Unit> = (((UInt8(182), UInt16(214), Float32(Float32(60.0)), UInt64(170), (), Float32(-66.0), (Int32(-106)&127..=Int32(62)&127:(117|1))), (UInt32(5)&127..=UInt32(151)&127:(-33)|1), ###"*Gmw/$G7\\x"###, UInt64(Int8(UInt8(10))), Aggregate303(), [(), (), (), (), (), (), (), (), (), ()]) as Array<Unit>);
    var var3323 : (Aggregate303) -> Array<Unit> = func928;
    ((match (var828) {
        case caseVar832 : Bool => 
            var var837 : ?Array<Unit> = Option<Array<Unit>>.Some([(), (), (), (), (), (), (), (), (), ()]);
            if (true) { var837 } else { Option<Array<Unit>>.None } ;
            [29.0, 73.0, (-110.0), (-80.0), 124.0, (-64.0), 100.0, 7.0, 125.0, (-118.0)];
            var853
        
        case caseVar857 => 
            if (false) { Option<Option<Array<Unit>>>.None } else { var853 } 
        
        case _ : Option<UInt8> => 
            ();
            UInt64(169);
            Option<Option<Array<Unit>>>.None
        
        case _ => 
            var var873 : Rune = 'm';
            var873 = 'm';
            Option<Option<Array<Unit>>>.None
        
    } ?? if (var879) { var883 } else { var883 } ) ?? ((UInt32(206), Option<Array<Unit>>.Some([(), (), (), (), (), (), (), (), (), ()]), [Int32(-67), Int32(-21), Int32(-66), Int32(-49), Int32(41), Int32(71), Int32(92), Int32(-73), Int32(104), Int32(-118)], var915, UInt32(49), var924)[1] ?? (var2308|>var3323)));
    var var3415 : ?UInt32 = (Enum147.enumValue161((false as UInt8)) as UInt32);
    var var3442 : ?UInt32 = Option<UInt32>.None;
    let var3449 : Array<Option<UInt32>> = Array<Option<UInt32>>(10){ i => Option<UInt32>.None };
    match (match (try { // block id: 3329
                false;
                if (var1040) { var1172 } else { Enum15.defaultValue } ;
                var3336
            } finally { // block id: 3339
                var738;
                var493;
                var3336
            }) {
            case caseVar3345 => 
                ###"\"8D;}=nw3A"###;
                if (true) { (Int8(94)&127..=Int8(-26)&127:((-110)|1)) } else { var738 } ;
                Option<(UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>)>.None
            
            case caseVar3358 => 
                UInt32(148);
                Option<(UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>)>.Some(var1303)
            
            case _ : String => 
                var1270
            
            case _ => 
                if (var1560) { Option<(UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>)>.Some(var1303) } else { Option<(UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>)>.None } 
            
        }) {
        case caseVar3376 => 
            [var1126, var1126, Option<UInt32>.None, Option<UInt32>.None, Option<UInt32>.None, var1126, Option<UInt32>.None, var1126, var1126, Option<UInt32>.Some(var46)]
        
        case caseVar3392 : Enum147 => 
            ();
            (var46, UInt16(137), var688, ());
            if (true) { [var1126, Option<UInt32>.None, Option<UInt32>.Some(var46), var1126, Option<UInt32>.Some(UInt32(222)), Option<UInt32>.Some(UInt32(115)), var1126, var1126, var3415, Option<UInt32>.Some(var46)] } else { var1053 } 
        
        case caseVar3425 : (Float32, Array<Unit>, Int64, Range<Int64>, Int32, (UInt32, UInt16, Array<Unit>, Unit), UInt16) => 
            var1785;
            ();
            var1053
        
        case _ => 
            if (true) { [Option<UInt32>.None, var3415, var1126, Option<UInt32>.None, Option<UInt32>.Some(UInt32(3)), var3442, Option<UInt32>.None, var3442, Option<UInt32>.None, var1126] } else { var3449 } 
        
    };
    let var3584 : ?UInt8 = ((UInt8(228), UInt16(Int16(UInt8(83))), Float32(Float32(-74.0)), UInt64(19), (), Float32(-21.0), (Int32(-45)&127..Int32(-53)&127:122|1)) as UInt8);
    let var3621 : Unit = ();
    let var3646 : (UInt32, Array<Int32>, (UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>), Array<Int16>, Array<Unit>, Rune, Range<UInt16>) = (UInt32(Int16(55)), [Int32(Int32(UInt32(254))), Int32(Int32(-72)), Int32(UInt32(UInt32(222))), Int32(-73), Int32(-6), Int32(-30), Int32(-93), Int32(16), Int32(-59), Int32(23)], (UInt8(252), UInt16(98), Float32(Float32(Float32(-12.0))), UInt64(247), (), Float32(Float32(-20.0)), (Int32(-127)&127..=Int32(-27)&127:(-118)|1)), [Int16(97), Int16(-35), Int16(-41), Int16(-25), Int16(-110), Int16(34), Int16(107), Int16(-6), Int16(94), Int16(89)], [(), (), (), (), (), (), (), (), (), ()], '1', (UInt16(Int8(-18))&127..=UInt16(110)&127:(32|1)));
    var var3696 : ?Interface120 = Option<Interface120>.None;
    try { // block id: 3525
        var var3568 : (UInt32, UInt16, Array<Unit>, Unit) = (UInt32(Int32(UInt8(UInt8(55)))), UInt16(142), [(), (), (), (), (), (), (), (), (), ()], ());
        try { // block id: 3527
            var391;
            var1968
        } finally { // block id: 3530
            var var3532 : (UInt32, Array<Int32>, (UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>), Array<Int16>, Array<Unit>, Rune, Range<UInt16>) = (UInt32(80), [Int32(-90), Int32(-47), Int32(-66), Int32(-9), Int32(-77), Int32(-51), Int32(-79), Int32(2), Int32(-77), Int32(90)], (UInt8(223), UInt16(88), Float32(Float32(62.0)), UInt64(UInt64(151)), (), Float32(42.0), (Int32(114)&127..=Int32(UInt32(115))&127:((-88)|1))), [Int16(119), Int16(-104), Int16(-126), Int16(-64), Int16(-97), Int16(-127), Int16(-104), Int16(61), Int16(86), Int16(72)], [(), (), (), (), (), (), (), (), (), ()], 'v', (UInt16(71)&127..=UInt16(146)&127:(-125)|1));
            var3532;
            var46;
            if (false) { var3568 } else { var1968 } 
        };
        try { // block id: 3579
            var1933;
            var20
        } catch (e: Exception) { // block id: 3582
            var3584;
            if (true) { (var1702, var1172) } else { var20 } 
        } finally { // block id: 3604
            var20
        }
    } finally { // block id: 3606
        match (Option<Int16>.None) {
            case caseVar3611 => 
                ();
                ();
                var2610
            
            case _ => 
                var1933;
                var3621
            
            case caseVar3625 : (Range<Int32>, String, (UInt32, UInt16, Array<Unit>, Unit), Option<Array<Class117>>, (UInt32, UInt16, Array<Unit>, Unit), Float64, Range<UInt8>, Float64) => 
                var1283 - var425;
                var2688;
                ()
            
            case caseVar3634 : (Bool, (Unit, Range<Int32>, (UInt32, UInt16, Array<Unit>, Unit), Range<Int16>, UInt32), Range<UInt64>, (UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>), UInt16) => 
                var386;
                'J';
                var1937
            
            case _ => 
                ()
            
        };
        var loopTimeVar3698 : Range<UInt64> = (UInt64((-114))&127..UInt64(UInt64(18))&127:(Int64(UInt32(70))|1));
        for (i in loopTimeVar3698 where false) {
            var3646;
            var3696
        };
        (var3712 ?? var20)
    }
}


func func726<T0, T1>() : Int64 { // block id: 727
    ();
    ();
    var var746 : Bool = (UInt64(105) is Array<Float64>);
    var var755 : Int16 = Int16(-119);
    var var794 : Int64 = Int64(Int64((-14)));
    var var3728 : Option<Int64> = Option<Int64>.None;
    var var3921 : Rune = 'y';
    if (match {
        case match (Option<Option<UInt32>>.None) {
        case _ => 
            var738;
            var746
        
        case caseVar751 : UInt32 => 
            var755 == var755
        
        case _ : (UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>) => 
            var746
        
        case _ => 
            UInt64(66) <= UInt64(111)
        
        case _ => 
            Class117();
            let var777 : Unit = ();
            [(), var391, (), var391, var777, var777, (), var391, (), var777];
            var746 && true
        
    } => 
        ();
        var791 / ((var794) | 1);
        var46 < var46
        case _ => 
        var91 % ((var91) | 1);
        var746
    }) { // block id: 806
        var loopTimeVar811 : Int64 = 0;
        while ((false) && loopTimeVar811 < 100 ) {
            loopTimeVar811++;

        };
        var var3716 : (UInt16) -> (Int16, Enum15) = func813;
        var3719|>var3716;
        (var3728 ?? (-121))
    } else { // block id: 3731
        var688[4];
        let var3781 : Float32 = Float32(Float32(Float32(Float32(-52.0))));
        var var3962 : Array<Int16> = [Int16(72), Int16(-45), Int16(-20), Int16(-117), Int16(110), Int16(29), Int16(-60), Int16(120), Int16(-127), Int16(79)];
        let var3970 : (UInt32, Array<Int32>, (UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>), Array<Int16>, Array<Unit>, Rune, Range<UInt16>) = (UInt32(26), [Int32(51), Int32(UInt8(103)), Int32(UInt32(UInt8(24))), Int32(UInt16(Int8(0))), Int32(93), Int32(UInt32(160)), Int32(UInt8(106)), Int32(UInt16(Int16(-58))), Int32(UInt32(23)), Int32(Int32(109))], (UInt8(178), UInt16(UInt16(162)), Float32(Float32(27.0)), UInt64(144), (), Float32(Float32(-11.0)), (Int32(Int8(6))&127..Int32(Int16(10))&127:(Int64(Int32(35))|1))), [Int16(75), Int16(-112), Int16(Int8(Int8(-101))), Int16(38), Int16(63), Int16(19), Int16(UInt16(11)), Int16(UInt16(169)), Int16(94), Int16(-9)], [(), (), (), (), (), (), (), (), (), ()], 'X', (UInt16(122)&127..UInt16(3)&127:(-38)|1));
        match ((Int32(113)&127..=Int32(-95)&127:68|1)) {
            case _ : Range<UInt64> => 
                (var46, [var3209, var1823, var1823, Int32(-79), Int32(-91), Int32(-54), var3209, var1341, Int32(-81), Int32(-58)], var1303, [Int16(103), Int16(76), Int16(-84), Int16(-100), Int16(-121), Int16(27), Int16(-56), Int16(21), Int16(3), Int16(-83)], [(), (), (), (), (), (), (), (), (), ()], 'w', (UInt16(36)&127..=var356&127:(var791|1)))
            
            case caseVar3763 => 
                (UInt16(190)&127..UInt16(159)&127:52|1);
                if (var746) { var2714 } else { Option<Option<Option<(Unit, Range<Int32>, (UInt32, UInt16, Array<Unit>, Unit), Range<Int16>, UInt32)>>>.Some(Option<Option<(Unit, Range<Int32>, (UInt32, UInt16, Array<Unit>, Unit), Range<Int16>, UInt32)>>.None) } ;
                let var3788 : Array<Int16> = Array<Int16>(10){ i => Int16(UInt8(Int8(-25))) };
                let var3820 : Unit = ();
                (UInt32(188), var2124, (UInt8(35), UInt16(224), var1324, var1785, (), var3781, caseVar3763), var3788, [(), (), var2688, var2610, (), var1933, var1937, var391, var2688, var3820], 'm', (var3719&127..UInt16(2)&127:((-54)|1)))
            
            case caseVar3829 : (UInt32, Array<Int32>, (UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>), Array<Int16>, Array<Unit>, Rune, Range<UInt16>) => 
                var606;
                [(-13.0), 30.0, (-75.0), 10.0, (-84.0), 92.0, 4.0, 10.0, (-85.0), 12.0];
                if (var3187) { caseVar3829 } else { caseVar3829 } 
            
            case caseVar3839 => 
                if (var2354) { var915 } else { var915 } ;
                let var3848 : (UInt32, Array<Int32>, (UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>), Array<Int16>, Array<Unit>, Rune, Range<UInt16>) = (UInt32(UInt32(214)), [Int32(-36), Int32(7), Int32(UInt32(Int8(55))), Int32(23), Int32(UInt16(27)), Int32(Int32(-126)), Int32(Int8(103)), Int32(Int8(Int8(-64))), Int32(UInt16(159)), Int32(UInt32(Int32(30)))], (UInt8(Int8(Int8(80))), UInt16(152), Float32(Float32(Float32(122.0))), UInt64(97), (), Float32(-24.0), (Int32(70)&127..Int32(66)&127:103|1)), [Int16(-70), Int16(100), Int16(92), Int16(30), Int16(17), Int16(86), Int16(90), Int16(95), Int16(-58), Int16(-61)], [(), (), (), (), (), (), (), (), (), ()], 'h', (UInt16(214)&127..=UInt16(2)&127:(-54)|1));
                let var3895 : Array<Int16> = Array<Int16>(10){ i => Int16(63) };
                var var3924 : Range<UInt16> = (UInt16(35)&127..UInt16(190)&127:(-62)|1);
                if (false) { var3848 } else { (var46, var2124, var1303, var3895, [(), (), (), (), (), (), (), (), (), ()], var3921, var3924) } 
            
            case _ => 
                ();
                var var3945 : ?UInt8 = ((UInt16(79)&127..UInt16(252)&127:57|1) as UInt8);
                if (true) { [Class117(), var125, Class117(), Class117(Option<UInt8>.None, Int16(-102), var3114, Option<(UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>)>.Some(var1303)), var125, var125, Class117(var3945, Int16(-101), var3114, var1270), var125, Class117(), var125] } else { var2361 } ;
                if (false) { (var46, [Int32(31), Int32(60), Int32(92), Int32(-63), Int32(37), Int32(-85), Int32(71), Int32(103), Int32(-36), Int32(-3)], var1303, var3962, [(), (), (), (), (), (), (), (), (), ()], 'l', var3967) } else { var3970 } 
            
        };
        (-67)
    }
}

public func func722(param723 : Option<Unit>) : (UInt32, UInt16, Array<Unit>, Unit) { // block id: 724
    func726<Int64, Option<Array<Class117>>>();
    ();
    var1968
}

public func func718<T0>(param719 : Range<UInt32>) : (UInt32, UInt16, Array<Unit>, Unit) where T0 <: Option<(Int16, Enum15)> { // block id: 720
    var611|>func722
}

public func func678(param679 : Range<Int64>) : Option<Int16> { // block id: 680
    try { // block id: 683
        if (false) { [(), (), (), (), (), (), (), (), (), ()] } else { var688 } 
    } finally { // block id: 700
        let var703 : Bool = ((UInt32(Int16(-72))&127..UInt32(162)&127:(Int64(48)|1)) is UInt16);
        if (var703) { Class117() } else { Class117() } ;
        var688
    }[4];
    var var4093 : (UInt32, Option<Array<Unit>>, Array<Int32>, Range<UInt8>, UInt32, Array<Float64>) = (UInt32(158), Option<Array<Unit>>.Some([(), (), (), (), (), (), (), (), (), ()]), [Int32(-3), Int32(-38), Int32(-122), Int32(38), Int32(-100), Int32(35), Int32(-112), Int32(-4), Int32(45), Int32(88)], (UInt8(73)&127..=UInt8(30)&127:25|1), UInt32(UInt16(UInt16(Int16(-29)))), [65.0, 102.0, 13.0, (-113.0), 115.0, 75.0, 19.0, 87.0, (-104.0), 48.0]);
    (match ((var425&127..var1283&127:(var791|1))) {
        case caseVar4043 : Enum15 => 
            Class117(Option<UInt8>.None, Int16(-102), (var46, Option<Array<Unit>>.None, var2124, (UInt8(90)&127..UInt8(213)&127:19|1), var46, [60.0, (-36.0), var1584, var1584, var1584, (-32.0), var1584, (-78.0), var1584, var1584]), var1270);
            ();
            var var4074 : Range<UInt32> = (UInt32(Int32(-118))&127..UInt32(14)&127:((-78)|1));
            if (false) { (UInt32(170)&127..UInt32(3)&127:(var791|1)) } else { var4074 } 
        
        case caseVar4082 => 
            let var4088 : ?UInt8 = Option<UInt8>.Some(UInt8(184));
            if (false) { Class117(var4088, var1702, var4093, var1270) } else { Class117() } ;
            var391;
            if (var2354) { var4121 } else { (UInt32(149)&127..var46&127:(22|1)) } 
        
        case caseVar4135 : Array<Option<UInt32>> => 
            ();
            if (var3187) { (UInt32(185)&127..=UInt32(39)&127:119|1) } else { (UInt32(93)&127..=UInt32(22)&127:(var2664|1)) } 
        
        case _ => 
            var1878;
            ();
            var var4152 : UInt32 = UInt32(Int16(Int8(UInt8(UInt8(136)))));
            (var4152&127..UInt32(121)&127:((-22)|1))
        
        case _ => 
            Class117();
            (var46&127..UInt32(216)&127:((-3)|1))
        
    }|>func718<Option<(Int16, Enum15)>>)[3];
    var var4201 : ?Int16 = (UInt16(Int8(-54)) as Int16);
    var var4217 : Array<Bool> = Array<Bool>(10){ i => (UInt16(206) is (UInt32, Option<Array<Unit>>, Array<Int32>, Range<UInt8>, UInt32, Array<Float64>)) };
    let var4411 : ?Int16 = ((UInt64(148)&127..UInt64(182)&127:(Int64(UInt64(93))|1)) as Int16);
    var var4532 : ?Int16 = (Enum147.enumValue161(((-15) as UInt8)) as Int16);
    match (try { // block id: 4172
            UInt32(90)
        } catch (_) { // block id: 4174
            UInt32(76)
        } finally { // block id: 4176
            ();
            var var4179 : ??(Unit, Range<Int32>, (UInt32, UInt16, Array<Unit>, Unit), Range<Int16>, UInt32) = (Option<Option<Array<Unit>>>.None as Option<(Unit, Range<Int32>, (UInt32, UInt16, Array<Unit>, Unit), Range<Int16>, UInt32)>);
            var4179;
            UInt32(124) >> ((UInt32(129)) & 7)
        }) {
        case 177 => 
            var2610;
            let var4192 : ?Int16 = Option<Int16>.Some(Int16(UInt8(101)));
            [Option<Int16>.None, var4192, var4197, Option<Int16>.None, var4201, var4201, Option<Int16>.Some(Int16(-103)), Option<Int16>.None, Option<Int16>.Some(Int16(82)), var4192]
        
        case caseVar4214 => 
            var4217;
            [Option<Int16>.Some(var1226), var4201, var4201, Option<Int16>.None, var4407, var4411, var4201, Option<Int16>.None, Option<Int16>.Some(Int16(79)), Option<Int16>.None]
        
        case 23 | 191 | 199 | 114 => 
            var1933;
            var2688;
            var var4459 : ?Int16 = Option<Int16>.None;
            if (true) { [Option<Int16>.Some(var1238), var4407, Option<Int16>.Some(var1702), var4197, var4197, var4197, Option<Int16>.None, Option<Int16>.None, Option<Int16>.Some(Int16(4)), var4444] } else { [var4411, Option<Int16>.None, var4407, var4201, Option<Int16>.None, Option<Int16>.None, var4411, Option<Int16>.Some(var1226), Option<Int16>.Some(var1702), var4459] } 
        
        case _ => 
            var2937;
            var2664++;
            if (false) { var4469 } else { [var4197, Option<Int16>.None, var4411, Option<Int16>.None, Option<Int16>.None, Option<Int16>.Some(var1226), var4532, Option<Int16>.Some(Int16(23)), var4407, Option<Int16>.Some(var1226)] } 
        
    }[9]
}

func func667(param668 : Rune) : Bool { // block id: 669
    Int16(45) >> (((((var2664&127..28&127:((-31)|1))|>func678) ?? Int16(-27))) & 7);
    false
}

public func func593(param594 : (Int16) -> Unit) : Option<Option<UInt32>> { // block id: 597
    let var623 : ((UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>), Range<UInt32>, String, UInt64, Aggregate303, Array<Unit>) = ((UInt8(UInt8(UInt8(107))), UInt16(Int8(Int8(67))), Float32(Float32(22.0)), UInt64(240), (), Float32(-60.0), (Int32(-128)&127..Int32(-70)&127:(-72)|1)), (UInt32(163)&127..UInt32(21)&127:(-94)|1), "i}=h7(k8>C", UInt64(246), Aggregate303(), [(), (), (), (), (), (), (), (), (), ()]);
    try { // block id: 599
        var606.getOrThrow()
    } finally { // block id: 608
        (var611 ?? ());
        Class117.var618;
        var623[4]
    };
    ();
    let var661 : ???UInt32 = Option<Option<Option<UInt32>>>.Some(("/G?yI<3:P2" as Option<UInt32>));
    let var4562 : ??UInt32 = ((Int32(-50)&127..Int32(-26)&127:31|1) as Option<UInt32>);
    let var4568 : ?Interface120 = Option<Interface120>.Some(Class117(((Float32(33.0), [(), (), (), (), (), (), (), (), (), ()], 1, ((-13)&127..=(-117)&127:(94|1)), Int32(83), (UInt32(66), UInt16(190), [(), (), (), (), (), (), (), (), (), ()], ()), UInt16(105)) as UInt8), Int16(-98), (UInt32(UInt32(201)), Option<Array<Unit>>.Some([(), (), (), (), (), (), (), (), (), ()]), [Int32(126), Int32(-56), Int32(-116), Int32(-97), Int32(113), Int32(-85), Int32(50), Int32(-49), Int32(-98), Int32(3)], (UInt8(184)&127..=UInt8(244)&127:(-4)|1), UInt32(Int32(-50)), [92.0, 97.0, (-34.0), (-58.0), (-127.0), (-1.0), 32.0, 71.0, 115.0, (-127.0)]), (((-25)&127..=116&127:(-89)|1) as (UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>))));
    let var4633 : ??(Unit, Range<Int32>, (UInt32, UInt16, Array<Unit>, Unit), Range<Int16>, UInt32) = Option<Option<(Unit, Range<Int32>, (UInt32, UInt16, Array<Unit>, Unit), Range<Int16>, UInt32)>>.None;
    (var661 ?? if ((var2814|>func667)) { match (Option<(Int16, Enum15)>.Some((Int16(96), var1172))) {
        case _ : Option<Unit> => 
            var1324;
            var4562
        
        case _ => 
            var4568;
            var4562
        
    } } else { (var4633 as Option<UInt32>) } )
}

func func4638(param7 : Int16) : Unit { // block id: 8

}

public func func142(param143 : Float64) : UInt16 { // block id: 144
    var var153 : Enum147 = Enum147.defaultValue;
    var var157 : Bool = (Int32(-55) is (Int16) -> Unit);
    var var179 : UInt8 = UInt8(252);
    let var214 : Unit = ();
    let var319 : Bool = (Int16(Int8(-3)) is Interface123<Int64, Int8>);
    func func223(optionalParam224 ! : Int32 = Int32(119), optionalParam226 ! : Interface122<UInt32> = Class117(), namedParam228 ! : Enum15, optionalParam229 ! : Int32 = Int32(96)) : String { // block id: 231
        var loopTimeVar242 : Int64 = 0;
        (Option<Unit>.None ?? do {
            loopTimeVar242++;

        } while ((true) && loopTimeVar242 < 100 ) );
        try (resource = Class117()) { // block id: 244
            Float32(-11.0)|>func246;
            Int32(18);
            let var273 : UInt16 = UInt16(184);
            let var279 : Float32 = Float32(113.0);
            (UInt8(14), var273, Float32(-5.0), var91, (), var279, (Int32(34)&127..=Int32(116)&127:(-55)|1))[4]
        } catch (_) { // block id: 283
            [(), (), (), (), (), (), (), (), (), ()][5];
            var var294 : Int16 = Int16(Int8(73));
            var loopTimeVar299 : Int64 = 0;
            do {
                loopTimeVar299++;
                't';
                var294 += var294
            } while ((false) && loopTimeVar299 < 100 ) 
        };
        match (Option<Unit>.Some(Aggregate303.var308)) {
            case caseVar312 : Range<UInt64> => 
                UInt32(97) * UInt32(150);
                let var324 : String = """
A\"o'-
RfW8\\
""";
                if (var319) { var324 } else { var324 } 
            
            case _ => 
                var214;
                ();
                if (false) { ###"!^[>@Yw9xo"### } else { var335 } 
            
        }
    }
;
    var var338 : Int32 = Int32(66);
    let var341 : Enum15 = Enum15.defaultValue;
    var loopTimeVar344 : Int64 = 0;
    do {
        loopTimeVar344++;
        func223(optionalParam224 : var338, namedParam228 : var341)
    } while ((match (try { // block id: 150
            Class117();
            var153;
            if (var157) { Enum147.enumValue161(Option<UInt8>.Some(UInt8(210))) } else { var153 } 
        } finally { // block id: 166
            let var168 : Int16 = Int16(Int8(UInt8(Int8(-1))));
            var168;
            ();
            let var183 : ?UInt8 = (Int8(62) as UInt8);
            if (false) { Enum147.enumValue161(Option<UInt8>.Some(var179)) } else { Enum147.enumValue161(var183) } 
        }) {
        case enumValue161(_) => 
            ();
            false
        
        case caseVar193 => 
            var197 >= Int8(-112);
            var var202 : UInt16 = UInt16(UInt16(Int16(Int8(UInt8(73)))));
            var202--;
            false
        
        case enumValue161(_) => 
            """
skQ<}
|&G5<
""";
            var214;
            false
        
        case _ => 
            Float32(6.0);
            var157
        
    }) && loopTimeVar344 < 100 ) ;
    let var4636 : ((Int16) -> Unit) -> Option<Option<UInt32>> = func593;
    func func535(param536 : Range<Int16>, param537 : Interface122<UInt32>, namedParam538 ! : Range<UInt32>, namedParam539 ! : UInt64) : UInt32 { // block id: 540
        var391;
        var var555 : UInt8 = UInt8(UInt8(Int8(UInt8(UInt8(192)))));
        var var571 : UInt64 = UInt64(UInt32(162));
        match (Class117()) {
            case caseVar546 : UInt32 => 
                var214;
                var var551 : Int64 = (-40);
                var551--;
                var555 |= var425
            
            case _ : Range<Int32> => 
                var214
            
            case _ : Interface121 => 
                var571 >>= ((UInt64(35)) & 7)
            
            case _ => 
                ();
                ();
                var46 ^= var46
            
        };
        var var4641 : (Int16) -> Unit = func4638;
        (((var4641|>var4636) ?? Option<UInt32>.Some(UInt32(232))) ?? UInt32(try { // block id: 4647
            var1283 *= UInt8(196);
            var1584 %= Float64((Int32(var1584)) | 1);
            var3209 >> ((var3209) & 7)
        } finally { // block id: 4657
            Class117();
            let var4663 : Int32 = Int32(-128);
            ((Int32(88)&127..var4663&127:(61|1)), "<oO#Hk\"M'e", (var46, UInt16(219), [(), (), (), (), (), (), (), (), (), ()], var1937), var4673, (var46, var3719, [(), (), (), (), (), (), (), (), (), ()], var391), param143, (UInt8(34)&127..=UInt8(114)&127:(-11)|1), (-56.0));
            Int32(-115) + var3209
        }))
    }
;
    let var4693 : Int64 = (-52);
    func func361(namedParam362 ! : (Int16) -> Unit, namedParam365 ! : (Int16, Enum15), optionalParam366 ! : Interface121 = Class117()) : Interface121 { // block id: 368
        var370;
        UInt32(func535((Int16(103)&127..=Int16(123)&127:125|1), var386, namedParam538 : (var46&127..=var46&127:(var4693|1)), namedParam539 : UInt64(169)))|>func378
    }
;
    let var4697 : (Int16) -> Unit = func6;
    if (Int32(var197) <= [Int32(24), Int32(122), Int32(-49), Int32(103), Int32(51), Int32(-29), Int32(98), Int32(-17), Int32(-5), Int32(4)][0]) { // block id: 353
        var356 - UInt16(181)
    } else if (match (func361(namedParam362 : var4697, namedParam365 : (Int16(-67), Enum15.enumValue4702(func1175, var2361, var1878)))) {
        case _ => 
            var1226 | var1226;
            var791 == var2664
        
    }) { // block id: 4719
        var3719
    } else { // block id: 4721
        let var4736 : ?UInt32 = ((UInt64(UInt64(136))&127..=UInt64(Int8(1))&127:(Int64(Int16(68))|1)) as UInt32);
        let var4754 : ?UInt32 = Option<UInt32>.Some(UInt32(Int8(Int8(28))));
        let var4770 : Unit = ();
        match (Option<Int64>.Some(var4693)) {
            case _ : (UInt32, Array<Int32>, (UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>), Array<Int16>, Array<Unit>, Rune, Range<UInt16>) => 
                ()
            
            case caseVar4731 => 
                var1937;
                [var4736, Option<UInt32>.None, Option<UInt32>.None, var1126, var1126, Option<UInt32>.Some(UInt32(119)), Option<UInt32>.Some(var46), var4754, var1126, var1126];
                ()
            
            case _ => 
                (UInt32(250)&127..UInt32(91)&127:18|1);
                var356 *= UInt16(44);
                var4770
            
            case _ => 
                var1937
            
            case _ => 
                ();
                var2361;
                ()
            
        };
        ();
        UInt16(151) ^ UInt16(132)
    }
}




public func func10(param11 : UInt32) : Unit { // block id: 12
    let var29 : Unit = ();
    var var55 : Int32 = Int32(UInt32(212));
    var var73 : Bool = false;
    var var99 : Unit = ();
    match (match (var20[1]) {
            case defaultValue => 
                var29;
                var var33 : UInt16 = UInt16(UInt16(5));
                var33 <<= ((var33) & 7)
            
            case _ : Int32 => 
                false;
                let var42 : Float64 = (-105.0);
                var42;
                var46 *= param11
            
            case _ => 
                var29;
                var55 &= var55;
                var var61 : UInt16 = UInt16(UInt8(Int8(UInt8(Int8(-36)))));
                var61 &= var61
            
        }) {
        case () | () | () | () => 
            var73 ||= var73;
            105.0 + 63.0;
            UInt64(37) ^ UInt64(85)
        
        case () | () => 
            (Int16(26), Enum15.defaultValue);
            ();
            var91 ** (var91 & 3)
        
        case caseVar96 : Unit => 
            var99;
            80;
            var91 * var91
        
        case _ => 
            (Int16(-42), Enum15.defaultValue);
            if (var73) { "<y:zgzqQ^C" } else { "E4x:vM8Sa{j" } ;
            UInt64(143)
        
    };
    let var4904 : Unit = ();
    var var4924 : ?Array<Int16> = ((Int32(-3)&127..Int32(-1)&127:(-106)|1) as Array<Int16>);
    if (var125.func128(namedParam129 : """
``1`s
ypJ]4
""", namedParam130 : var3209)) { // block id: 4894
        var var4897 : Bool = false;
        if (var4897) { // block id: 4899
            ()
        } else if (true) { // block id: 4902

        };
        var4904
    } else if (match (param11) {
        case 122 | 79 => 
            var46 /= ((UInt32(25)) | 1);
            4.0 > var1584
        
        case 8 => 
            Int16(17);
            if (false) { var4924 } else { Option<Array<Int16>>.Some([Int16(14), Int16(-36), Int16(-26), Int16(40), Int16(-77), Int16(30), Int16(5), Int16(-123), Int16(-57), Int16(-70)]) } ;
            var3209 >= Int32(-91)
        
        case caseVar4934 => 
            var2610;
            false
        
        case _ => 
            let var4942 : Bool = (((), (Int32(0)&127..Int32(-14)&127:(15|1)), (UInt32(Int8(124)), UInt16(UInt16(90)), [(), (), (), (), (), (), (), (), (), ()], ()), (Int16(39)&127..=Int16(64)&127:(32|1)), UInt32(UInt16(118))) is (Aggregate303) -> String);
            var4942
        
        case _ => 
            var1584 >= var1584
        
    }) { // block id: 4978

    };
    try (resource = Class117()) { // block id: 4980
        var var4989 : Unit = ();
        Option<(UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>)>.Some((var425, UInt16(189), var1324, UInt64(111), var4989, var1324, var482)).getOrThrow();
        if (var1183) { // block id: 4995
            ();
            ()
        }
    } finally { // block id: 4998
        Option<UInt8>.Some(var1283);
        (Option<Unit>.None ?? var1937);
        if (var1183) { // block id: 5006
            if (false) { Option<(UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>)>.None } else { Option<(UInt8, UInt16, Float32, UInt64, Unit, Float32, Range<Int32>)>.None } ;
            ()
        } else if (false) { // block id: 5013
            [false, false, false, false, true, false, false, false, false, false];
            ()
        }
    }
}


public func func5019(param5020 : Int16) : UInt32 { // block id: 5021
    ();
    var loopTimeVar5055 : Int64 = 0;
    do {
        loopTimeVar5055++;

    } while (((if (var1560) { Option<Bool>.None } else { Option<Bool>.None }  ?? try { // block id: 5030
        var1933;
        [false, false, true, false, var5038, var3187, false, true, var1183, false];
        false
    } finally { // block id: 5047
        var2610;
        var1785--;
        !false
    })) && loopTimeVar5055 < 100 ) ;
    (try { // block id: 5058
        ();
        var1126;
        Option<UInt32>.None
    } catch (e: Exception) { // block id: 5062
        if (var2354) { var1126 } else { var1126 } 
    } ?? (Option<UInt32>.None ?? UInt32(44)) / ((if (true) { // block id: 5077
        var46 ^ var46
    } else { // block id: 5081
        var46 << ((UInt32(40)) & 7)
    }) | 1))
}

main(): Int64 {
    try {
        let var5017 : (UInt32) -> Unit = func10;
        var1226|>(func5019~>var5017);
        var var5090 : Aggregate303 = Aggregate303();
        try { // block id: 5088
            var5090;
            43
        } finally { // block id: 5093
            if (var2354) { (39&127..22&127:(-34)|1) } else { (var791&127..=var791&127:((-94)|1)) } ;
            var var5104 : ?Array<Int16> = (false as Array<Int16>);
            if (var5038) { var5104 } else { var5104 } ;
            (-61)
        }
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var46*var46), 64)
        crccheck.updateBuffer(UInt64(var91*var91), 64)
        crccheck.updateBuffer(UInt64(var197*var197), 64)
        crccheck.updateBuffer(UInt64(var356*var356), 64)
        crccheck.updateBuffer(UInt64(var425*var425), 64)
        crccheck.updateBuffer(UInt64(var791*var791), 64)
        crccheck.updateBuffer(UInt64(var1226*var1226), 64)
        crccheck.updateBuffer(UInt64(var1238*var1238), 64)
        crccheck.updateBuffer(UInt64(var1283*var1283), 64)
        crccheck.updateBuffer(UInt64(var1341*var1341), 64)
        crccheck.updateBuffer(UInt64(var1702*var1702), 64)
        crccheck.updateBuffer(UInt64(var1785*var1785), 64)
        crccheck.updateBuffer(UInt64(var1823*var1823), 64)
        crccheck.updateBuffer(UInt64(var2664*var2664), 64)
        crccheck.updateBuffer(UInt64(var2937*var2937), 64)
        crccheck.updateBuffer(UInt64(var3209*var3209), 64)
        crccheck.updateBuffer(UInt64(var3719*var3719), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Class117 {

}

extend Enum15 {

}

extend Aggregate303 {

}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_unexpected_declaration_in_scope
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_expected_expr_or_decl_in
// ASSERT: scan parse_trailing_closure_only_follow_name
// ASSERT: scan parse_expected_left_brace
// ASSERT: scan parse_expected_case


