/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output


public var var77 : Float64 = Float64(Float32(-98.0))
let var103 : Rune = '8'
var var170 : Int8 = Int8(UInt8(102))
public var var262 : ?Enum16 = Option<Enum16>.None
let var342 : UInt16 = UInt16(140)
var var363 : Enum16 = Enum16.defaultValue
let var383 : UInt64 = UInt64(208)
public let var402 : ?Class119 = (Option<Class119>.None as Class119)
public let var406 : Class119 = Class119()
public let var489 : Enum16 = Enum16.defaultValue
public let var641 : Unit = ()
var var645 : Bool = false
public var var652 : UInt32 = UInt32(Int32(19))
let var658 : Rune = '7'
public var var760 : Array<(Int8, UInt32)> = Array<(Int8, UInt32)>(10){ i => (Int8(-123), UInt32(165)) }
let var813 : Int64 = 70
var var922 : Int32 = Int32(UInt32(UInt16(UInt8(39))))
public var var929 : UInt64 = UInt64(249)
var var945 : (Int8, UInt32) = (Int8(-72), UInt32(UInt8(UInt8(60))))
var var1051 : Range<Int64> = (Int64(Int32(Int8(115)))&127..Int64(UInt16(UInt8(205)))&127:((-56)|1))
public var var1203 : Array<Class119> = [Class119(), Class119(), Class119(), Class119(), Class119(), Class119(), Class119(), Class119(), Class119(), Class119()]
public var var1245 : Float32 = Float32(Float32(Float32(Float32(-18.0))))
public var var1313 : UInt32 = UInt32(97)
public let var1328 : (Int8, UInt32) = (Int8(UInt8(Int8(Int8(72)))), UInt32(99))
public let var1413 : Array<UInt32> = [UInt32(221), UInt32(70), UInt32(Int8(117)), UInt32(UInt32(Int16(Int8(-101)))), UInt32(Int16(UInt8(27))), UInt32(116), UInt32(230), UInt32(18), UInt32(21), UInt32(UInt16(109))]
let var1548 : UInt32 = UInt32(Int8(UInt8(UInt8(Int8(66)))))
let var1608 : Range<UInt32> = (UInt32(84)&127..UInt32(68)&127:(-109)|1)
let var1733 : UInt8 = UInt8(Int8(27))
public var var2084 : Unit = ()
public var var2089 : Unit = ()
let var2115 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
var var2179 : UInt16 = UInt16(126)
public let var2242 : ?(Unit, Array<(Int8, UInt32)>) = ((94.0 as Bool) as (Unit, Array<(Int8, UInt32)>))
public var var2257 : (UInt32, Range<Int32>, UInt32, String, Array<Unit>, Rune, Range<Int64>, Range<UInt32>) = (UInt32(179), (Int32(-126)&127..Int32(105)&127:74|1), UInt32(Int16(UInt16(UInt16(95)))), "Z=O/7UD^\\)", [(), (), (), (), (), (), (), (), (), ()], 'R', (43&127..5&127:(-10)|1), (UInt32(128)&127..=UInt32(0)&127:(-124)|1))
var var2271 : Int16 = Int16(UInt16(UInt16(Int16(71))))
public let var2342 : (Unit, Array<(Int8, UInt32)>) = ((), [(Int8(Int8(-86)), UInt32(84)), (Int8(UInt8(192)), UInt32(13)), (Int8(9), UInt32(193)), (Int8(UInt8(111)), UInt32(193)), (Int8(41), UInt32(Int16(-4))), (Int8(Int8(89)), UInt32(12)), (Int8(UInt8(77)), UInt32(Int16(-14))), (Int8(84), UInt32(UInt16(141))), (Int8(79), UInt32(Int8(-99))), (Int8(UInt8(178)), UInt32(UInt8(80)))])
public var var2415 : (Range<Int64>, (Array<Unit>, UInt8), Int64, Range<UInt16>) = ((Int64(UInt32(144))&127..=(-13)&127:(Int64(Int16(Int16(61)))|1)), ([(), (), (), (), (), (), (), (), (), ()], UInt8(Int8(-62))), (-75), (UInt16(141)&127..=UInt16(UInt8(6))&127:(Int64(UInt64(109))|1)))
public let var2452 : (Array<Unit>, UInt8) = ([(), (), (), (), (), (), (), (), (), ()], UInt8(UInt8(Int8(Int8(75)))))
public var var2574 : Unit = ()
var var2604 : Int32 = Int32(UInt16(Int16(-46)))
public var var2635 : ??Class119 = (('o', ((Option<Enum16>.None as Bool) is (Range<UInt32>, Array<Unit>, Array<UInt32>) -> (Unit, Array<(Int8, UInt32)>)), (Int16(61)&127..=Int16(103)&127:45|1)) as Option<Class119>)
var var2713 : UInt8 = UInt8(UInt8(Int8(Int8(UInt8(86)))))
public let var2724 : ?Int8 = Option<Int8>.None
let var2778 : Array<Array<UInt64>> = Array<Array<UInt64>>(10){ i => [UInt64(49), UInt64(UInt16(131)), UInt64(95), UInt64(172), UInt64(174), UInt64(UInt64(115)), UInt64(Int32(-9)), UInt64(Int16(-5)), UInt64(6), UInt64(179)] }
let var3004 : ?Enum16 = ((() as Array<Array<UInt64>>) as Enum16)
public var var3127 : String = "%rQ`3#ffq4"
var var3417 : (Float32, UInt64, Option<Array<(Int8, UInt32)>>, UInt16, Range<Int64>, Int32) = (Float32(-22.0), UInt64(Int32(Int16(Int16(-77)))), Option<Array<(Int8, UInt32)>>.None, UInt16(UInt8(Int8(Int8(89)))), (Int64(Int16(Int16(123)))&127..=Int64(UInt64(UInt8(115)))&127:((-126)|1)), Int32(UInt16(Int8(Int8(26)))))
var var3698 : ?Range<UInt16> = Option<Range<UInt16>>.None
var var3858 : UInt32 = UInt32(23)
public let var3990 : ??(Unit, Array<(Int8, UInt32)>) = Option<Option<(Unit, Array<(Int8, UInt32)>)>>.None
public var var4005 : String = ###"=rD${var3127}lI%${var3127}_Q${var3127}hy${var3127}"###
var var4222 : (UInt8, (UInt32, Range<Int32>, UInt32, String, Array<Unit>, Rune, Range<Int64>, Range<UInt32>), Array<Unit>, Option<Unit>, Array<UInt32>, Range<Int8>, (Int8, UInt32)) = (UInt8(UInt8(207)), (UInt32(UInt32(139)), (Int32(-125)&127..=Int32(-57)&127:(Int64(Int8(-70))|1)), UInt32(UInt16(235)), "R~2${var4005}n${var3127}|=>&K'", [(), (), (), (), (), (), (), (), (), ()], 'w', (117&127..=5&127:(-86)|1), (UInt32(171)&127..UInt32(66)&127:6|1)), [(), (), (), (), (), (), (), (), (), ()], (((108&127..=24&127:(98|1)), ([(), (), (), (), (), (), (), (), (), ()], UInt8(13)), 123, (UInt16(84)&127..UInt16(219)&127:12|1)) as Unit), [UInt32(184), UInt32(20), UInt32(81), UInt32(Int8(90)), UInt32(217), UInt32(UInt16(Int8(-59))), UInt32(UInt16(187)), UInt32(UInt32(Int8(-52))), UInt32(UInt32(63)), UInt32(244)], (Int8(Int8(Int8(71)))&127..=Int8(UInt8(UInt8(65)))&127:(Int64(Int16(UInt8(203)))|1)), (Int8(-60), UInt32(57)))
public var var4315 : Int64 = 124
public let var4325 : ?Unit = Option<Unit>.None
public let var4365 : Array<UInt32> = [UInt32(UInt32(33)), UInt32(222), UInt32(UInt16(171)), UInt32(191), UInt32(22), UInt32(180), UInt32(Int32(80)), UInt32(Int32(UInt16(78))), UInt32(80), UInt32(145)]
public var var4474 : Option<Rune> = (([(), (), (), (), (), (), (), (), (), ()], UInt8(Int8(-10))) as Rune)
public var var4491 : Rune = 'N'
public var var4503 : (Rune, Bool, Range<Int16>) = ('Z', (((Option<Int16>.None as Range<UInt16>) as Array<Class119>) is Option<(Array<Class119>, (Unit, Array<(Int8, UInt32)>))>), (Int16(-81)&127..Int16(121)&127:107|1))
public var var4512 : Range<UInt16> = (UInt16(217)&127..UInt16(191)&127:74|1)
public var var4517 : Bool = true
public var var4526 : Option<(Array<Unit>, UInt8)> = Option<(Array<Unit>, UInt8)>.None
public enum Enum16 {
    defaultValue
}
public open class Class119 {
    public init() { // block id: 121

    }
;
    let var954 : UInt8 = UInt8(49);
    public init(namedParam1072 ! : Range<Int32>) { // block id: 1073
        var641
    }
;
    public static var var1297 : Unit = ();
    var var1302 : Int16 = Int16(35);
    public static let var1655 : (Unit, Array<(Int8, UInt32)>) = ((), [(Int8(-121), UInt32(160)), (Int8(-48), UInt32(171)), (Int8(8), UInt32(7)), (Int8(-29), UInt32(142)), (Int8(-75), UInt32(77)), (Int8(98), UInt32(13)), (Int8(71), UInt32(83)), (Int8(-100), UInt32(243)), (Int8(4), UInt32(21)), (Int8(-8), UInt32(128))]);
    public static var var1719 : Rune = 't';
    func func1752(optionalParam1753 ! : Bool = false, optionalParam1755 ! : Array<Array<UInt64>> = [[UInt64(190), UInt64(7), UInt64(253), UInt64(161), UInt64(117), UInt64(99), UInt64(196), UInt64(83), UInt64(165), UInt64(0)], [UInt64(247), UInt64(228), UInt64(61), UInt64(162), UInt64(24), UInt64(130), UInt64(12), UInt64(181), UInt64(148), UInt64(90)], [UInt64(150), UInt64(204), UInt64(83), UInt64(109), UInt64(80), UInt64(192), UInt64(196), UInt64(87), UInt64(36), UInt64(6)], [UInt64(133), UInt64(80), UInt64(246), UInt64(21), UInt64(1), UInt64(83), UInt64(142), UInt64(152), UInt64(75), UInt64(117)], [UInt64(161), UInt64(45), UInt64(139), UInt64(158), UInt64(179), UInt64(140), UInt64(164), UInt64(7), UInt64(89), UInt64(239)], [UInt64(235), UInt64(11), UInt64(177), UInt64(115), UInt64(58), UInt64(234), UInt64(111), UInt64(145), UInt64(199), UInt64(52)], [UInt64(46), UInt64(115), UInt64(132), UInt64(67), UInt64(27), UInt64(83), UInt64(102), UInt64(179), UInt64(127), UInt64(204)], [UInt64(68), UInt64(230), UInt64(251), UInt64(160), UInt64(218), UInt64(26), UInt64(252), UInt64(251), UInt64(29), UInt64(106)], [UInt64(72), UInt64(77), UInt64(237), UInt64(168), UInt64(51), UInt64(201), UInt64(234), UInt64(3), UInt64(47), UInt64(163)], [UInt64(64), UInt64(43), UInt64(59), UInt64(178), UInt64(17), UInt64(70), UInt64(122), UInt64(178), UInt64(173), UInt64(211)]], namedParam1757 ! : (Unit, Array<(Int8, UInt32)>)) : Unit { // block id: 1758

    }
;
    public static let var1772 : (Float32, UInt64, Option<Array<(Int8, UInt32)>>, UInt16, Range<Int64>, Int32) = (Float32(125.0), UInt64(50), Option<Array<(Int8, UInt32)>>.None, UInt16(104), (29&127..=29&127:96|1), Int32(18));
    public static var var2036 : Int64 = 101;
    public init(param2016 : Range<UInt16>) { // block id: 2017
        let var2030 : Range<UInt64> = (UInt64(94)&127..UInt64(216)&127:(-23)|1);
        ((if (false) { var2030 } else { (UInt64(71)&127..=var383&127:(var2036|1)) } ) as Int8)|>{ lambdaParameter2024 : Option<Int8> =>  };
        ()
    }
;
    public static let var2321 : Int32 = Int32(-32);
    public var var3085 : (Rune, Bool, Range<Int16>) = ('w', false, (Int16(-74)&127..Int16(-70)&127:125|1));
    public static let var3228 : Unit = ();
    static let var3248 : ?Array<Unit> = Option<Array<Unit>>.None;
    static let var3256 : Bool = true;
    private static var var3312 : UInt32 = UInt32(236);
    static let var3348 : ?Array<(Int8, UInt32)> = Option<Array<(Int8, UInt32)>>.None;
    static var var3357 : Range<Int8> = (Int8(-52)&127..Int8(1)&127:34|1);
    public init(namedParam3215 ! : (Rune, Bool, Range<Int16>), namedParam3216 ! : Range<UInt16>) { // block id: 3217
        (match (match ([(), var2089, (), (), var641, var3228, (), (), (), ()]) {
                case caseVar3236 : Range<UInt16> => 
                    (UInt32(196)&127..var1548&127:(var813|1));
                    ();
                    if (var645) { Option<Array<Unit>>.Some([(), (), (), (), (), (), (), (), (), ()]) } else { var3248 } 
                
                case _ => 
                    (UInt64(67)&127..=UInt64(108)&127:(-34)|1);
                    UInt64(85);
                    if (var3256) { Option<Array<Unit>>.None } else { var3248 } 
                
            }) {
            case caseVar3262 : UInt16 => 
                if (false) { Option<Array<Unit>>.None } else { var3248 } ;
                ();
                Int16(-126)
            
            case _ => 
                Int16(-113)
            
            case _ => 
                if (true) { (UInt32(97)&127..UInt32(196)&127:(var813|1)) } else { (var1313&127..=var1548&127:(38|1)) } ;
                Int16(63)
            
        }&127..((Option<Array<Unit>>.None as Int16) ?? if (var3256) { // block id: 3296
            Int16(-13) - Int16(80)
        } else if (var645) { // block id: 3301
            var2271
        } else { // block id: 3303
            ();
            Int16(56)
        })&127:(var2036|1));
        var loopTimeVar3365 : Range<UInt64> = (UInt64(Int8(Int8(UInt8(203))))&127..UInt64(Int16(1))&127:(Int64(UInt32(84))|1));
        for (i in loopTimeVar3365 where if (var1313 == var3312) { // block id: 3314
            Option<Array<Unit>>.None;
            (UInt64(241)&127..var929&127:(77|1));
            UInt8(252) < var2713
        } else if (((var658, var645, (Int16(105)&127..=Int16(-4)&127:45|1)) is Option<Float32>)) { // block id: 3328
            var2271++;
            true
        } else { // block id: 3332
            UInt32(77);
            var2089;
            false
        }) {
            try { // block id: 3338
                if (true) { Option<Array<(Int8, UInt32)>>.None } else { Option<Array<(Int8, UInt32)>>.None } 
            } finally { // block id: 3343
                var645 &&= var645;
                var3348
            };
            try { // block id: 3351
                ((-78)&127..(-94)&127:((-16)|1));
                var3357
            } finally { // block id: 3359
                var2089;
                (var170&127..=Int8(-26)&127:((-34)|1))
            }
        }
    }
;
    public init(namedParam3391 ! : Rune) { // block id: 3392
        let var3406 : Range<UInt64> = (UInt64(Int32(69))&127..UInt64(187)&127:(Int64(UInt16(0))|1));
        match (match (if (true) { Option<Array<(Int8, UInt32)>>.Some(var760) } else { var3348 } ) {
                case _ => 
                    if (var645) { var3406 } else { (UInt64(157)&127..=UInt64(198)&127:72|1) } 
                
                case _ => 
                    var3417;
                    (UInt64(79)&127..=UInt64(63)&127:35|1)
                
            }) {
            case _ : (Array<Unit>, UInt8) => 
                var3228;
                let var3453 : Range<UInt8> = (UInt8(UInt8(Int8(-63)))&127..=UInt8(UInt8(UInt8(Int8(39))))&127:(Int64(UInt64(186))|1));
                if (var645) { (UInt8(187)&127..=UInt8(215)&127:((-66)|1)) } else { var3453 } 
            
            case _ : Option<Float32> => 
                if (false) { var3417 } else { var3417 } ;
                var170 **= (Int8(78) & 3);
                (UInt8(250)&127..=UInt8(27)&127:(-74)|1)
            
            case _ : Bool => 
                if (false) { [Float32(113.0), Float32(-52.0), Float32(-32.0), Float32(82.0), Float32(14.0), Float32(121.0), Float32(91.0), Float32(-128.0), Float32(-96.0), Float32(-28.0)] } else { [Float32(91.0), Float32(-32.0), Float32(109.0), Float32(-20.0), Float32(-68.0), Float32(82.0), Float32(-113.0), Float32(-6.0), Float32(21.0), Float32(119.0)] } ;
                (UInt8(87)&127..UInt8(80)&127:(-59)|1)
            
            case _ => 
                var2604--;
                (UInt8(238)&127..=UInt8(30)&127:(var813|1))
            
        };
        var641
    }
;
    public static let var3550 : Range<UInt16> = (UInt16(179)&127..UInt16(222)&127:(39|1));
    static var var3596 : Range<UInt8> = (UInt8(160)&127..UInt8(63)&127:(83|1));
    public init(namedParam421 ! : Float32, optionalParam422 ! : Option<Enum16> = Option<Enum16>.Some(Enum16.defaultValue)) { // block id: 425
        let var431 : Bool = false;
        var loopTimeVar438 : Int64 = 0;
        while ((true) && loopTimeVar438 < 100 ) {
            loopTimeVar438++;
            var loopTimeVar436 : Int64 = 0;
            while ((var431) && loopTimeVar436 < 100 ) {
                loopTimeVar436++;
                ()
            }
        };
        match ((match (Option<Unit>.Some(())) {
                case caseVar3158 : Option<Enum16> => 
                    -var2271
                
                case _ : Option<Enum16> => 
                    var2271
                
                case _ => 
                    var3127;
                    var2271
                
            }|>(func1172~>func1154))) {
            case caseVar3172 => 
                'H'
            
            case 213 => 
                Option<Array<Unit>>.None;
                var342;
                'z'
            
            case _ => 
                'B'
            
        };
        var var3192 : ?(Array<Class119>, (Unit, Array<(Int8, UInt32)>)) = Option<(Array<Class119>, (Unit, Array<(Int8, UInt32)>))>.Some(([Class119(namedParam1072 : (Int32(-111)&127..Int32(-87)&127:(-24)|1)), Class119(), Class119(namedParam1072 : (Int32(48)&127..=Int32(81)&127:((-104)|1))), Class119((UInt16(148)&127..=UInt16(234)&127:86|1)), Class119(namedParam1072 : (Int32(-122)&127..=Int32(-1)&127:(54|1))), Class119(), Class119(namedParam3215 : ('g', false, (Int16(24)&127..Int16(83)&127:(13|1))), namedParam3216 : (UInt16(22)&127..=UInt16(183)&127:119|1)), Class119(namedParam3215 : ('U', true, (Int16(-117)&127..=Int16(84)&127:69|1)), namedParam3216 : (UInt16(61)&127..UInt16(181)&127:(-83)|1)), Class119(namedParam3391 : '9'), Class119(namedParam3215 : ('N', true, (Int16(-23)&127..=Int16(90)&127:104|1)), namedParam3216 : (UInt16(225)&127..=UInt16(107)&127:(59|1)))], ((), [(Int8(61), UInt32(160)), (Int8(-107), UInt32(231)), (Int8(-46), UInt32(23)), (Int8(103), UInt32(20)), (Int8(38), UInt32(254)), (Int8(35), UInt32(220)), (Int8(16), UInt32(48)), (Int8(-107), UInt32(197)), (Int8(-54), UInt32(78)), (Int8(-2), UInt32(61))])));
        var var3539 : (Rune, Bool, Range<Int16>) = ('J', true, (Int16(-122)&127..=Int16(UInt8(89))&127:(Int64((-1))|1)));
        if (match ((var3192 ?? ([Class119(namedParam3215 : var3539, namedParam3216 : var3550), Class119(), Class119(namedParam3391 : 'c'), var406, this, Class119(namedParam3215 : var3539, namedParam3216 : (UInt16(160)&127..UInt16(37)&127:125|1)), var406, Class119(), Class119(namedParam3215 : var3539, namedParam3216 : var3550), var406], (var2089, var760)))) {
            case _ : Range<UInt16> => 
                var431
            
            case (_,(caseVar3578,caseVar3579)) => 
                var2778;
                ();
                var645
            
            case _ => 
                var77 > var77
            
        }) { (Option<Range<UInt8>>.None ?? var3596) } else { (UInt8(14)&127..UInt8(247)&127:101|1) } 
    }
;
    public static var var3973 : Option<(Array<Unit>, UInt8)> = Option<(Array<Unit>, UInt8)>.None;
    public init(param3927 : Array<(Int8, UInt32)>, namedParam3928 ! : Option<Array<Unit>>) { // block id: 3929
        var var3931 : ?Range<UInt16> = ((Int32(-44)&127..=Int32(-37)&127:87|1) as Range<UInt16>);
        var3931;
        var var3969 : Bool = true;
        (if (true) { try { // block id: 3938
            var2574;
            var1051
        } catch (e: Exception) { // block id: 3941
            if (false) { (var2036&127..(-5)&127:(44|1)) } else { (77&127..(-121)&127:(-67)|1) } 
        } } else { try { // block id: 3950
            (0&127..=(-124)&127:(15|1))
        } catch (e: Exception) { // block id: 3955
            ();
            if (true) { var1203 } else { var1203 } ;
            var1051
        } } , (if (var3969) { Option<(Array<Unit>, UInt8)>.None } else { var3973 }  ?? (var2115, var1733)), match (var2271) {
            case _ => 
                ();
                (-76) & var2036
            
        }, (UInt16(26)&127..=match (var3990) {
            case _ : Option<Range<UInt8>> => 
                UInt16(38)
            
            case _ => 
                var77 /= Float64((Int32(var77)) | 1);
                ();
                UInt16(128)
            
        }&127:(62|1)));
        var4005
    }
;
    var var4329 : UInt32 = UInt32(97)
}






func func619(param620 : Int32, namedParam621 ! : UInt8, optionalParam622 ! : Option<Enum16> = Option<Enum16>.None, optionalParam624 ! : Range<UInt8> = (UInt8(UInt8(8))&127..=UInt8(44)&127:((-5)|1))) : Range<Int8> { // block id: 630
    match (Option<Class119>.Some(Class119())) {
        case _ => 
            var641;
            var645 ||= var645;
            (UInt32(82), (Int32(-27)&127..Int32(-90)&127:(-30)|1), var652, "ZMSW$BRIu=", [(), (), (), (), (), (), (), (), (), ()], var658, (33&127..=67&127:((-98)|1)), (UInt32(60)&127..=UInt32(87)&127:60|1))
        
    }[4][7];
    let var730 : (Float32, UInt64, Option<Array<(Int8, UInt32)>>, UInt16, Range<Int64>, Int32) = (Float32(-39.0), UInt64(Int8(89)), Option<Array<(Int8, UInt32)>>.None, UInt16(17), (Int64(UInt64(Int32(-2)))&127..=Int64(UInt32(226))&127:(Int64(UInt64(UInt8(60)))|1)), Int32(-22));
    var var836 : Range<Int64> = (Int64(UInt8(182))&127..Int64(Int8(Int8(Int8(-25))))&127:(Int64(UInt8(171))|1));
    match (match (var262) {
            case _ : (Int8, UInt32) => 
                let var676 : (Float32, UInt64, Option<Array<(Int8, UInt32)>>, UInt16, Range<Int64>, Int32) = (Float32(Float32(Float32(Float32(20.0)))), UInt64(43), Option<Array<(Int8, UInt32)>>.Some([(Int8(32), UInt32(72)), (Int8(-95), UInt32(212)), (Int8(31), UInt32(83)), (Int8(-44), UInt32(62)), (Int8(111), UInt32(38)), (Int8(104), UInt32(134)), (Int8(42), UInt32(24)), (Int8(-24), UInt32(138)), (Int8(-19), UInt32(245)), (Int8(-32), UInt32(1))]), UInt16(Int8(-2)), (54&127..=103&127:(-8)|1), Int32(UInt16(UInt16(UInt8(215)))));
                var676
            
            case None => 
                (var652&127..UInt32(59)&127:((-125)|1));
                var730
            
            case caseVar749 : Range<Int32> => 
                let var752 : Float32 = Float32(Float32(-95.0));
                var752;
                (Float32(5.0), var383, Option<Array<(Int8, UInt32)>>.Some(var760), var342, (111&127..=var813&127:(var813|1)), Int32(-6))
            
            case _ => 
                var645 ||= false;
                var var826 : Float32 = Float32(Float32(Float32(Float32(Float32(19.0)))));
                if (var645) { (var826, var383, Option<Array<(Int8, UInt32)>>.None, UInt16(200), var836, param620) } else { var730 } 
            
        }[2]) {
        case _ => 
            var645 &&= var645;
            if (var645) { (Int8(-93)&127..Int8(74)&127:((-56)|1)) } else { (Int8(-19)&127..=Int8(-87)&127:32|1) } 
        
    }
}



func func598(optionalParam599 ! : Option<Class119> = Option<Class119>.Some(Class119()), optionalParam602 ! : Array<Class119> = Array<Class119>(10){ i => Class119() }, optionalParam614 ! : Int64 = 71, namedParam616 ! : UInt16) : Array<(Int8, UInt32)> { // block id: 617
    let var884 : ?Float32 = ((UInt32(UInt32(245))&127..UInt32(Int8(UInt8(110)))&127:(Int64(UInt64(UInt16(130)))|1)) as Float32);
    func func872(param873 : (Int8, UInt32), optionalParam874 ! : UInt32 = UInt32(163), namedParam876 ! : Range<Int32>) : Class119 { // block id: 877
        (var884 ?? [Float32(6.0), Float32(-122.0), Float32(50.0), Float32(-84.0), Float32(-35.0), Float32(96.0), Float32(56.0), Float32(-99.0), Float32(117.0), Float32(-67.0)][8]);
        var var912 : ?Array<(Int8, UInt32)> = (Int64(103) as Array<(Int8, UInt32)>);
        match (if ([true, true, true, true, true, false, false, true, false, true][6]) { Enum16.defaultValue } else { try { // block id: 907
                (Float32(-60.0), UInt64(208), var912, var342, (11&127..2&127:((-88)|1)), var922);
                var929 ^= var383;
                Enum16.defaultValue
            } finally { // block id: 933
                var363
            } } ) {
            case _ => 
                (Int8(-98), UInt32(54));
                var652 += optionalParam874;
                Class119()
            
        }
    }
;
    func619(try { // block id: 862
        if (var645) { Class119() } else { Class119() } ;
        Int32(70)
    } finally { // block id: 868
        Int32(-70)
    }, namedParam621 : func872(var945, optionalParam874 : var652, namedParam876 : (Int32(99)&127..=Int32(0)&127:102|1)).var954);
    let var971 : UInt32 = UInt32(66);
    var var982 : Float32 = Float32(-126.0);
    let var1042 : Int16 = Int16(-19);
    match (match ([var652, var652, UInt32(32), UInt32(78), UInt32(135), var652, UInt32(243), UInt32(55), UInt32(91), var971][0]) {
            case caseVar976 => 
                var922 ^ Int32(43);
                var982;
                var var988 : Range<Int16> = (Int16(106)&127..=Int16(Int16(UInt8(178)))&127:((-63)|1));
                if (var645) { (Int16(51)&127..=Int16(-62)&127:10|1) } else { var988 } 
            
            case caseVar997 : (UInt32, Range<Int32>, UInt32, String, Array<Unit>, Rune, Range<Int64>, Range<UInt32>) => 
                let var1000 : Unit = ();
                var1000;
                var var1003 : Range<Int16> = (Int16(38)&127..=Int16(-103)&127:119|1);
                var1003
            
            case _ => 
                if (var645) { (Int16(-26)&127..=Int16(-6)&127:41|1) } else { (Int16(90)&127..Int16(-100)&127:(-10)|1) } 
            
        }) {
        case _ : Float64 => 
            (var813&127..=(-112)&127:(optionalParam614|1))
        
        case _ => 
            var var1021 : Array<Float32> = Array<Float32>(10){ i => Float32(-53.0) };
            var1021;
            var1042;
            if (var645) { (var813&127..35&127:((-14)|1)) } else { var1051 } 
        
    };
    var var1076 : Range<Int32> = (Int32(-31)&127..=Int32(-114)&127:(-10)|1);
    var var1103 : (Int8, UInt32) = (Int8(UInt8(89)), UInt32(UInt32(168)));
    try { // block id: 1061
        Option<Array<Class119>>.Some([var406, Class119(namedParam1072 : var1076), var406, var406, Class119(), Class119(namedParam1072 : var1076), var406, Class119(), Class119(namedParam1072 : (var922&127..=var922&127:(109|1))), Class119()]).getOrThrow();
        if (false) { var760 } else { var760 } 
    } finally { // block id: 1095
        try { // block id: 1097
            [(Int8(115), var652), var1103, (Int8(-92), UInt32(227)), var1103, (var170, UInt32(76)), var1103, (var170, UInt32(117)), var1103, var945, var945]
        } finally { // block id: 1123
            var971;
            var641;
            var var1139 : Int8 = Int8(UInt8(UInt8(10)));
            [var1103, (var170, var652), (var170, UInt32(115)), (Int8(-93), UInt32(4)), (var1139, var652), var945, var945, var945, (var1139, UInt32(137)), var945]
        }
    }
}

func func441(param442 : Int16) : UInt64 { // block id: 443
    var var496 : Float32 = Float32(114.0);
    let var507 : Bool = ([Class119(), Class119(), Class119(), Class119(), Class119(), Class119(), Class119(), Class119(), Class119(), Class119()] is UInt16);
    var var526 : Unit = ();
    var loopTimeVar537 : Int64 = 0;
    do {
        loopTimeVar537++;

    } while ((match (match (var363) {
            case _ => 
                if (false) { Option<Enum16>.Some(Enum16.defaultValue) } else { Option<Enum16>.None } 
            
            case caseVar458 : Option<Class119> => 
                if (false) { Option<Enum16>.None } else { var262 } 
            
            case _ : (Int8, UInt32) => 
                let var468 : Array<Class119> = [Class119(), Class119(), Class119(), Class119(), Class119(), Class119(), Class119(), Class119(), Class119(), Class119()];
                var468;
                if (true) { Option<Enum16>.Some(var363) } else { Option<Enum16>.Some(var489) } 
            
            case caseVar493 : Int16 => 
                var496;
                Option<Enum16>.Some(Enum16.defaultValue)
            
            case _ => 
                var262
            
        }) {
        case _ : Range<UInt64> => 
            var507
        
        case caseVar522 : Enum16 => 
            (Int16(107)&127..=Int16(-56)&127:47|1);
            var526;
            var507 || false
        
        case _ => 
            var526;
            true
        
    }) && loopTimeVar537 < 100 ) ;
    try { // block id: 539
        (Option<Unit>.Some(var526) ?? var526);
        let var554 : ?Array<(Int8, UInt32)> = Option<Array<(Int8, UInt32)>>.Some([(Int8(-7), UInt32(Int8(63))), (Int8(31), UInt32(Int16(9))), (Int8(42), UInt32(Int16(-68))), (Int8(46), UInt32(37)), (Int8(113), UInt32(33)), (Int8(Int8(-49)), UInt32(36)), (Int8(-31), UInt32(80)), (Int8(UInt8(172)), UInt32(147)), (Int8(Int8(14)), UInt32(UInt8(11))), (Int8(Int8(-78)), UInt32(Int32(-33)))]);
        var554.getOrThrow()
    } catch (_) { // block id: 596
        func598(namedParam616 : UInt16(58))
    };
    var383
}


func func1154(param1155 : Option<Unit>) : UInt64 { // block id: 1156
    (Option<Array<Array<UInt64>>>.Some([[UInt64(27), UInt64(174), UInt64(189), UInt64(52), UInt64(166), UInt64(176), UInt64(97), UInt64(248), UInt64(131), UInt64(114)], [UInt64(123), UInt64(143), UInt64(158), UInt64(129), UInt64(69), UInt64(37), UInt64(123), UInt64(2), UInt64(27), UInt64(210)], [UInt64(247), UInt64(124), UInt64(222), UInt64(126), UInt64(60), UInt64(130), UInt64(137), UInt64(39), UInt64(190), UInt64(38)], [UInt64(3), UInt64(177), UInt64(228), UInt64(114), UInt64(171), UInt64(238), UInt64(117), UInt64(241), UInt64(243), UInt64(191)], [UInt64(91), UInt64(212), UInt64(39), UInt64(154), UInt64(167), UInt64(160), UInt64(87), UInt64(141), UInt64(222), UInt64(200)], [UInt64(165), UInt64(104), UInt64(181), UInt64(121), UInt64(14), UInt64(90), UInt64(207), UInt64(203), UInt64(252), UInt64(233)], [UInt64(218), UInt64(236), UInt64(67), UInt64(54), UInt64(124), UInt64(202), UInt64(146), UInt64(191), UInt64(254), UInt64(192)], [UInt64(47), UInt64(78), UInt64(156), UInt64(180), UInt64(182), UInt64(76), UInt64(205), UInt64(8), UInt64(54), UInt64(100)], [UInt64(100), UInt64(12), UInt64(128), UInt64(94), UInt64(187), UInt64(243), UInt64(75), UInt64(125), UInt64(38), UInt64(158)], [UInt64(162), UInt64(95), UInt64(197), UInt64(0), UInt64(103), UInt64(102), UInt64(244), UInt64(108), UInt64(57), UInt64(193)]]) ?? [[UInt64(219), UInt64(38), UInt64(196), UInt64(86), UInt64(79), UInt64(11), UInt64(149), UInt64(77), UInt64(37), UInt64(95)], [UInt64(210), UInt64(199), UInt64(253), UInt64(153), UInt64(184), UInt64(167), UInt64(143), UInt64(191), UInt64(32), UInt64(151)], [UInt64(34), UInt64(52), UInt64(17), UInt64(32), UInt64(165), UInt64(141), UInt64(138), UInt64(240), UInt64(155), UInt64(46)], [UInt64(244), UInt64(30), UInt64(178), UInt64(225), UInt64(248), UInt64(226), UInt64(74), UInt64(106), UInt64(76), UInt64(203)], [UInt64(4), UInt64(50), UInt64(181), UInt64(28), UInt64(69), UInt64(102), UInt64(227), UInt64(108), UInt64(44), UInt64(242)], [UInt64(192), UInt64(205), UInt64(97), UInt64(213), UInt64(9), UInt64(48), UInt64(251), UInt64(184), UInt64(1), UInt64(29)], [UInt64(64), UInt64(77), UInt64(98), UInt64(247), UInt64(135), UInt64(124), UInt64(195), UInt64(121), UInt64(10), UInt64(186)], [UInt64(47), UInt64(88), UInt64(134), UInt64(168), UInt64(244), UInt64(205), UInt64(196), UInt64(80), UInt64(234), UInt64(95)], [UInt64(41), UInt64(84), UInt64(18), UInt64(18), UInt64(91), UInt64(153), UInt64(187), UInt64(19), UInt64(199), UInt64(99)], [UInt64(122), UInt64(23), UInt64(131), UInt64(83), UInt64(144), UInt64(248), UInt64(89), UInt64(240), UInt64(162), UInt64(12)]])[0][2]
}



public func func1357(optionalParam1358 ! : Array<Unit> = Array<Unit>(10){ i => () }) : Array<Unit> { // block id: 1370
    ();
    let var1375 : (Array<Unit>, UInt8) = ([(), (), (), (), (), (), (), (), (), ()], UInt8(135));
    var1375[0]
}


func func1633(param1634 : Array<Class119>) : Int16 { // block id: 1635
    Class119.func1639();
    Int16(var170)
}

func func2019(param2020 : Option<Int8>) : Unit { // block id: 2021

}


public func func1629(param1630 : Int32) : Array<Unit> { // block id: 1631
    let var1841 : Int16 = Int16(UInt16(Int8(Int8(-16))));
    let var1849 : Bool = false;
    var var1855 : ((UInt32, Range<Int32>, UInt32, String, Array<Unit>, Rune, Range<Int64>, Range<UInt32>), Int16, UInt8) = ((UInt32(78), (Int32(Int32(-37))&127..=Int32(UInt8(183))&127:(Int64((-32))|1)), UInt32(20), ###"a{x\"uL\\\\b])"###, [(), (), (), (), (), (), (), (), (), ()], 'P', (Int64(Int16(-89))&127..=(-54)&127:(Int64(Int8(-125))|1)), (UInt32(169)&127..=UInt32(26)&127:27|1)), Int16(-19), UInt8(53));
    let var1899 : Unit = ();
    var var1903 : Unit = ();
    var var1941 : (Unit, Array<(Int8, UInt32)>) = ((), [(Int8(UInt8(158)), UInt32(UInt8(157))), (Int8(Int8(90)), UInt32(31)), (Int8(Int8(-2)), UInt32(UInt32(90))), (Int8(UInt8(90)), UInt32(Int16(18))), (Int8(126), UInt32(75)), (Int8(-77), UInt32(222)), (Int8(-128), UInt32(173)), (Int8(UInt8(40)), UInt32(35)), (Int8(Int8(-17)), UInt32(Int16(95))), (Int8(99), UInt32(Int32(-97)))]);
    var var2000 : Range<Int32> = (Int32(-65)&127..=Int32(Int16(58))&127:(Int64(Int64(Int16(UInt16(177))))|1));
    if (if (var1849) { // block id: 1851
        var var1909 : Unit = ();
        let var1919 : UInt32 = UInt32(UInt8(78));
        if (true) { var1855 } else { ((var1313, (Int32(35)&127..Int32(65)&127:(-52)|1), var1313, "'m8n+cYrC;", [var641, var641, var1899, (), var1903, var1899, (), var641, var1909, ()], var103, (var813&127..=var813&127:(var813|1)), (var1919&127..UInt32(43)&127:(48|1))), var1841, var1733) } ;
        var645
    } else if (true) { // block id: 1928
        UInt64(118) > var383
    } else { // block id: 1932
        false || true
    }) { (var1203, var1941)[0] } else { try { // block id: 1988
        var641;
        ();
        var1203
    } catch (_) { // block id: 1992
        var1899;
        [Class119(), var406, Class119(), Class119(namedParam1072 : var2000), Class119(namedParam1072 : (Int32(-97)&127..=var922&127:((-116)|1))), Class119((UInt16(162)&127..UInt16(206)&127:(-1)|1)), Class119(), Class119(namedParam1072 : var2000), Class119(namedParam1072 : (param1630&127..=var922&127:((-116)|1))), var406]
    } finally { // block id: 2049
        var1899;
        var1899;
        var1203
    } } |>{ lambdaParameter1838 : Array<Class119> => var1841 };
    var var2061 : Unit = ();
    let var2068 : ?Array<Unit> = (###"w'M.T]`_^$"### as Array<Unit>);
    let var2111 : ?Unit = Option<Unit>.Some(());
    (try { // block id: 2059
        var2061;
        (UInt32(229)&127..=UInt32(114)&127:(var813|1));
        var2068
    } finally { // block id: 2071
        var1903;
        var2068
    } ?? try { // block id: 2075
        (Int8(-78)&127..Int8(-114)&127:(-62)|1);
        if (var645) { [(), var2061, (), var2084, (), (), var2089, (), var1899, var641] } else { [var641, var641, (), var2061, (), (), (), var2084, (), var2061] } 
    } catch (e: Exception) { // block id: 2105
        if (var645) { var658 } else { 'e' } ;
        var2111;
        var2115
    } finally { // block id: 2127
        [(), var2084, (), var1899, (), var2089, var641, (), (), ()]
    })
}

func func2145(param2146 : (Array<Unit>, UInt8)) : Int32 { // block id: 2147
    let var2152 : ?Bool = Option<Bool>.Some((([Float32(-34.0), Float32(-49.0), Float32(-104.0), Float32(122.0), Float32(108.0), Float32(48.0), Float32(-13.0), Float32(40.0), Float32(-61.0), Float32(7.0)] as Array<Array<UInt64>>) is Option<Array<Class119>>));
    let var2162 : String = ###"Ogwazjj}?s"###;
    let var2191 : Unit = ();
    let var2279 : Range<Int16> = (Int16(Int8(-91))&127..Int16(UInt16(UInt16(Int8(14))))&127:(Int64(UInt8(Int8(-128)))|1));
    match (match (match (var2152) {
                case _ : Int8 => 
                    ();
                    var2162
                
                case caseVar2166 => 
                    "GBgMez`~D+"
                
                case _ => 
                    ();
                    true;
                    var2162
                
            }) {
            case "1sW_pn-RF7" | """
\"?oML
jk1)I
""" => 
                var2179 ^= var342;
                var var2183 : ?(Unit, Array<(Int8, UInt32)>) = (UInt64(UInt64(212)) as (Unit, Array<(Int8, UInt32)>));
                var2183
            
            case "kodN3/Vk\"2" | "HCA/Mo=\\4&" | ###"k2jI'.X/7;"### | """
a'Kd2
~eW,P
""" => 
                var2191;
                let var2198 : UInt64 = UInt64(248);
                if (var645) { (UInt64(186)&127..var2198&127:(var813|1)) } else { (var2198&127..UInt64(243)&127:(var813|1)) } ;
                let var2206 : ?(Unit, Array<(Int8, UInt32)>) = ((UInt32(UInt32(UInt16(250))), (Int32(0)&127..=Int32(94)&127:(-36)|1), UInt32(84), """
LOSk\\
6]Eq1
""", [(), (), (), (), (), (), (), (), (), ()], 'g', (Int64(Int16(-26))&127..54&127:(Int64(UInt8(95))|1)), (UInt32(114)&127..=UInt32(0)&127:(Int64(UInt8(69))|1))) as (Unit, Array<(Int8, UInt32)>));
                var2206
            
            case _ : Option<Unit> => 
                var2242
            
            case _ => 
                Option<(Unit, Array<(Int8, UInt32)>)>.Some((var2089, var760))
            
        }) {
        case _ : Array<Bool> => 
            (var2257, var2271, UInt8(2));
            [UInt64(63), UInt64(65), UInt64(242), UInt64(3), UInt64(108), UInt64(224), UInt64(254), UInt64(53), UInt64(87), UInt64(157)];
            var2279
        
        case _ => 
            var2279
        
    };
    var var2315 : Int64 = 70;
    try { // block id: 2294
        var loopTimeVar2301 : Range<UInt64> = (UInt64(Int8(Int8(Int8(-109))))&127..=UInt64(228)&127:((-98)|1));
        for (i in loopTimeVar2301 where var645) {
            let var2299 : Unit = ();
            var2299
        };
        if (var645) { // block id: 2311
            ();
            var2315 ^= (-71)
        };
        Class119.var2321
    } catch (e: Exception) { // block id: 2323
        let var2331 : Bool = ((UInt32(Int16(-104)) as (Unit, Array<(Int8, UInt32)>)) is Array<Class119>);
        if (true) { // block id: 2326
            var922 >> ((Int32(-118)) & 7)
        } else if (var2331) { // block id: 2336
            if (false) { var2242 } else { Option<(Unit, Array<(Int8, UInt32)>)>.Some(var2342) } ;
            if (var2331) { Option<Bool>.Some(var645) } else { var2152 } ;
            var922
        } else { // block id: 2393
            Int32(-79) << ((Int32(100)) & 7)
        }
    } finally { // block id: 2397
        try { // block id: 2399
            Int32(103)
        } finally { // block id: 2401
            Option<Bool>.None;
            Int32(65) - var922
        }
    }
}

func func1625(param1626 : Range<Int32>) : Array<Unit> { // block id: 1627
    let var2449 : ((Array<Unit>, UInt8)) -> Int32 = func2145;
    Int32((var2452|>var2449))|>{ lambdaParameter2141 : Int32 => func1629((var2415[1]|>{ lambdaParameter2408 : (Array<Unit>, UInt8) => Int32(var342) })) }
}




func func2592<T0, T1, T2>(param2593 : (UInt8, Unit, (UInt8, (UInt32, Range<Int32>, UInt32, String, Array<Unit>, Rune, Range<Int64>, Range<UInt32>), Array<Unit>, Option<Unit>, Array<UInt32>, Range<Int8>, (Int8, UInt32)), String, Int16, Int16, (Array<Unit>, UInt8))) : Enum16 where T0 <: UInt8, T1 <: Enum16, T2 <: Bool { // block id: 2594
    let var2627 : UInt64 = UInt64(90);
    func func2645(optionalParam2646 ! : (Unit, Array<(Int8, UInt32)>) = ((), [(Int8(UInt8(5)), UInt32(127)), (Int8(-5), UInt32(104)), (Int8(74), UInt32(UInt32(149))), (Int8(-61), UInt32(UInt8(159))), (Int8(102), UInt32(66)), (Int8(50), UInt32(15)), (Int8(UInt8(126)), UInt32(56)), (Int8(60), UInt32(116)), (Int8(Int8(-61)), UInt32(UInt16(219))), (Int8(UInt8(246)), UInt32(238))]), namedParam2687 ! : UInt64) : Option<Class119> { // block id: 2688
        var var2691 : (Option<Int8>) -> Unit = { lambdaParameter2694 : Option<Int8> =>  };
        if (([var1313, var1313, var1548, UInt32(153), UInt32(12), var1548, UInt32(7), var1548, var1548, UInt32(176)] is (Array<Unit>, UInt8))) { try { // block id: 2710
            var2713 ^= UInt8(107);
            var2574;
            if (var645) { var2724 } else { Option<Int8>.None } 
        } catch (e: Exception) { // block id: 2727
            ();
            if (true) { var2724 } else { Option<Int8>.None } 
        } } else { match ((var2271&127..=var2271&127:((-80)|1))) {
            case caseVar2740 => 
                Option<Int8>.None
            
            case _ => 
                if (var645) { (Int8(-101)&127..Int8(-39)&127:82|1) } else { (Int8(-32)&127..Int8(60)&127:27|1) } ;
                var641;
                var2724
            
        } } |>var2691;
        (Option<Option<(Unit, Array<(Int8, UInt32)>)>>.None ?? ((var342&127..UInt16(242)&127:(var813|1)) as (Unit, Array<(Int8, UInt32)>)));
        (match (if (var645) { Option<Unit>.None } else { Option<Unit>.Some(()) } ) {
            case _ => 
                var2084;
                if (var645) { var402 } else { var402 } 
            
        } as Class119)
    }
;
    var var2964 : UInt32 = UInt32(UInt16(154));
    if ((UInt64(Int8(-63)) <= match ((var1313, (var2604&127..Int32(23)&127:(var813|1)), var1313, ###"-i*$nY]Z\\?"###, var2115, var658, (var813&127..=89&127:(var813|1)), var1608)) {
        case _ => 
            var var2623 : UInt8 = UInt8(146);
            var2623++;
            ();
            var2627
        
    })) { (var2635 ?? var402) } else { func2645(optionalParam2646 : match (var2778) {
        case _ => 
            (var2713, (var652, (Int32(-19)&127..Int32(33)&127:111|1), UInt32(55), "^!.Ccw2XZw", [(), (), (), (), (), (), (), (), (), ()], 'D', ((-51)&127..=4&127:((-45)|1)), (UInt32(79)&127..UInt32(243)&127:7|1)), [(), (), (), (), (), (), (), (), (), ()], Option<Unit>.Some(()), [UInt32(33), UInt32(52), var1548, var1548, UInt32(253), UInt32(42), var652, var652, var652, var2964], (Int8(43)&127..=Int8(53)&127:(-51)|1), var945);
            if (var645) { ((), var760) } else { var2342 } 
        
    }, namedParam2687 : if (true) { // block id: 2977
        [Float32(-124.0), Float32(55.0), var1245, var1245, var1245, var1245, Float32(115.0), var1245, Float32(78.0), Float32(-66.0)];
        UInt64(249) ** (UInt64(80) & 3)
    } else if (var645) { // block id: 2993
        var2084;
        var929
    } else { // block id: 2996
        var929
    }) } ;
    (var3004 ?? Enum16.defaultValue)
}

public func func2504(param2505 : Class119, optionalParam2506 ! : Int64 = 94, optionalParam2508 ! : Range<UInt8> = (UInt8(249)&127..=UInt8(218)&127:74|1), namedParam2510 ! : Int8) : (Rune, Bool, Range<Int16>) { // block id: 2511
    let var2518 : (UInt8, Unit, (UInt8, (UInt32, Range<Int32>, UInt32, String, Array<Unit>, Rune, Range<Int64>, Range<UInt32>), Array<Unit>, Option<Unit>, Array<UInt32>, Range<Int8>, (Int8, UInt32)), String, Int16, Int16, (Array<Unit>, UInt8)) = (UInt8(201), (), (UInt8(Int8(122)), (UInt32(223), (Int32(114)&127..Int32(-94)&127:((-71)|1)), UInt32(230), ###"ceBq}O)sYZ"###, [(), (), (), (), (), (), (), (), (), ()], '3', ((-27)&127..=(-71)&127:(52|1)), (UInt32(6)&127..UInt32(232)&127:(27|1))), [(), (), (), (), (), (), (), (), (), ()], Option<Unit>.Some(()), [UInt32(147), UInt32(42), UInt32(95), UInt32(244), UInt32(57), UInt32(125), UInt32(78), UInt32(69), UInt32(12), UInt32(187)], (Int8(-5)&127..Int8(-28)&127:((-119)|1)), (Int8(Int8(39)), UInt32(33))), "63_vEE~ZLj", Int16(-117), Int16(102), ([(), (), (), (), (), (), (), (), (), ()], UInt8(147)));
    (var2518[2][3] ?? var2574);
    Int16(-11);
    let var3020 : ?Unit = (Int32(UInt16(186)) as Unit);
    let var3046 : Range<Int32> = (Int32(34)&127..Int32(-1)&127:(-124)|1);
    func func2579(namedParam2580 ! : Array<Class119>) : Class119 { // block id: 2581
        let var3010 : ((UInt8, Unit, (UInt8, (UInt32, Range<Int32>, UInt32, String, Array<Unit>, Rune, Range<Int64>, Range<UInt32>), Array<Unit>, Option<Unit>, Array<UInt32>, Range<Int8>, (Int8, UInt32)), String, Int16, Int16, (Array<Unit>, UInt8))) -> Enum16 = func2592<UInt8, Enum16, Bool>;
        try { // block id: 2583
            ((-24)&127..123&127:((-76)|1));
            var402.getOrThrow()
        } catch (_) { // block id: 2590
            (var1733, var2084, (UInt8(142), var2257, [(), (), (), (), (), (), (), (), (), ()], var3020, [var1548, var1548, var1313, var652, UInt32(95), UInt32(163), UInt32(22), UInt32(66), UInt32(211), var1313], (Int8(-118)&127..=Int8(-75)&127:(15|1)), var1328), "&1m>4+d$S7", Int16(-15), var2271, var2452)|>var3010;
            Class119(namedParam1072 : var3046)
        }
    }
;
    var var3059 : Range<UInt16> = (UInt16(136)&127..UInt16(222)&127:(Int64(UInt16(61))|1));
    func2579(namedParam2580 : match (Option<Bool>.None) {
        case _ => 
            var2271 -= Int16(-35);
            let var3067 : Class119 = Class119(namedParam1072 : (Int32(-59)&127..Int32(-91)&127:110|1));
            let var3075 : Int32 = Int32(-93);
            [Class119(), Class119(var3059), var406, var3067, var3067, Class119(namedParam1072 : (Int32(-65)&127..var3075&127:((-63)|1))), var406, Class119((UInt16(220)&127..UInt16(245)&127:(-78)|1)), Class119(namedParam1072 : var3046), var3067]
        
    }).var3085
}

func func2483(param2484 : Bool) : Bool { // block id: 2485
    func func2487(optionalParam2488 ! : String = "m7u=t[G'>e", optionalParam2490 ! : (Range<Int32>) -> Array<Unit> = { lambdaParameter2493 : Range<Int32> => [(), (), (), (), (), (), (), (), (), ()] }) : Bool { // block id: 2498
        var2089;
        var var3092 : Range<UInt16> = (UInt16(199)&127..=UInt16(39)&127:(-71)|1);
        var loopTimeVar3099 : Int64 = 0;
        do {
            loopTimeVar3099++;

        } while ((func2504(Class119(var3092), optionalParam2506 : 82, namedParam2510 : Int8(-70))[1]) && loopTimeVar3099 < 100 ) ;
        match ([UInt64(52), UInt64(118), UInt64(177), UInt64(158), UInt64(103), UInt64(92), UInt64(178), UInt64(77), UInt64(86), UInt64(176)]) {
            case _ => 
                var645
            
        }
    }
;
    let var3137 : UInt64 = UInt64(UInt16(UInt16(120)));
    var var3148 : (Range<Int32>) -> Array<Unit> = func1625;
    func2487(optionalParam2488 : if (if (false) { // block id: 3108
        var2089;
        if (param2484) { var2724 } else { var2724 } ;
        true
    } else { // block id: 3115
        var2084;
        var170++;
        UInt8(32) <= var1733
    }) { // block id: 3122
        var641;
        if (false) { var3127 } else { """
x[?hN
iYi7k
""" } 
    } else { // block id: 3130
        [UInt64(135), UInt64(74), UInt64(240), var383, var3137, var929, UInt64(253), UInt64(88), UInt64(152), UInt64(199)];
        var3127
    }, optionalParam2490 : var3148)
}

public func func1172(param1173 : Int16) : Option<Unit> { // block id: 1174
    var var1183 : ?Bool = Option<Bool>.None;
    let var1192 : ?Array<(Int8, UInt32)> = ('n' as Array<(Int8, UInt32)>);
    let var1267 : (UInt32, Range<Int32>, UInt32, String, Array<Unit>, Rune, Range<Int64>, Range<UInt32>) = (UInt32(Int16(UInt8(UInt8(21)))), (Int32(-104)&127..=Int32(UInt32(Int32(-58)))&127:(88|1)), UInt32(Int32(-59)), """
9P@<N
:@h&(
""", [(), (), (), (), (), (), (), (), (), ()], 'K', (Int64(Int64(UInt64(160)))&127..=Int64(Int8(104))&127:(Int64(Int32(-114))|1)), (UInt32(0)&127..=UInt32(55)&127:(-81)|1));
    func func1222(param1223 : Int64, param1224 : Range<UInt64>) : Bool { // block id: 1225
        var641;
        var var1341 : Array<Bool> = [true, true, false, false, true, true, false, false, true, true];
        if ((match ([(), (), (), (), (), (), (), (), (), ()]) {
            case _ : UInt8 => 
                Option<Bool>.None
            
            case caseVar1241 => 
                var1245 /= Float32((Int32(var1245)) | 1);
                ();
                Option<Bool>.Some(var645)
            
            case _ => 
                var645 &&= false;
                Option<Bool>.Some(var645)
            
        } ?? (Option<Bool>.None ?? var645))) { // block id: 1264
            var1267[4];
            Class119.var1297;
            var406.var1302
        } else { // block id: 1304
            let var1319 : (Int8, UInt32) = (Int8(Int8(-18)), UInt32(233));
            [var945, (Int8(-45), var652), (Int8(-94), var1313), (Int8(-61), UInt32(16)), var1319, (Int8(52), var1313), var1328, var945, (var170, var652), var945];
            var1341;
            (var1267, param1173, UInt8(59))[1]
        };
        match (if (((-68.0) == var77)) { [(), (), (), (), (), (), (), (), (), ()] } else { func1357() } ) {
            case _ => 
                var var1384 : ?Unit = ((Int32(-100)&127..Int32(14)&127:(-110)|1) as Unit);
                var1384;
                var1341;
                false || false
            
            case _ : Range<UInt16> => 
                var402;
                ();
                true
            
            case caseVar1399 => 
                ();
                ();
                var645
            
            case _ : Range<UInt8> => 
                var922;
                ();
                true
            
            case _ => 
                var1413;
                false
            
        }
    }
;
    var loopTimeVar1439 : Int64 = 0;
    do {
        loopTimeVar1439++;
        var var1217 : UInt16 = UInt16(UInt16(73));
        if (false) { // block id: 1201
            var1203;
            var1217 >>= ((UInt16(124)) & 7)
        };
        func1222(13, (UInt64(213)&127..UInt64(60)&127:(var813|1)))
    } while ((if ((var1183 ?? false)) { // block id: 1186
        var641;
        if (true) { Option<Array<(Int8, UInt32)>>.None } else { var1192 } ;
        var645
    } else { // block id: 1196
        var645
    }) && loopTimeVar1439 < 100 ) ;
    let var1477 : ?(Unit, Array<(Int8, UInt32)>) = Option<(Unit, Array<(Int8, UInt32)>)>.Some(((), [(Int8(-78), UInt32(96)), (Int8(-103), UInt32(0)), (Int8(35), UInt32(171)), (Int8(49), UInt32(105)), (Int8(-83), UInt32(53)), (Int8(45), UInt32(34)), (Int8(-108), UInt32(219)), (Int8(-18), UInt32(114)), (Int8(-33), UInt32(84)), (Int8(113), UInt32(63))]));
    let var1516 : Bool = true;
    func func1528(namedParam1529 ! : (Int32, UInt8, Option<Enum16>, Range<UInt8>) -> Range<Int8>) : Unit { // block id: 1535

    }
;
    let var1537 : (Int32, UInt8, Option<Enum16>, Range<UInt8>) -> Range<Int8> = func619;
    func func1443(namedParam1444 ! : Range<UInt32>, namedParam1445 ! : Array<Unit>, optionalParam1446 ! : Array<UInt32> = [UInt32(Int32(-126)), UInt32(230), UInt32(Int8(11)), UInt32(73), UInt32(52), UInt32(252), UInt32(Int8(Int8(UInt8(121)))), UInt32(UInt8(2)), UInt32(UInt16(UInt8(136))), UInt32(204)]) : (Unit, Array<(Int8, UInt32)>) { // block id: 1466
        var var1555 : (Int8, UInt32) = (Int8(Int8(Int8(UInt8(201)))), UInt32(UInt8(105)));
        (try { // block id: 1473
            if (true) { var1477 } else { var1477 } 
        } catch (_) { // block id: 1513
            if (var1516) { var1477 } else { var1477 } 
        } finally { // block id: 1520
            Int8(-3);
            var645 ||= var645;
            Option<(Unit, Array<(Int8, UInt32)>)>.None
        } ?? (func1528(namedParam1529 : var1537), (var1192 ?? [(var170, UInt32(139)), (var170, var1548), var1555, var1555, (var170, var1548), (Int8(107), var1548), var1555, var1328, (var170, UInt32(197)), var1328])))
    }
;
    var var2470 : (Range<Int32>) -> Array<Unit> = { lambdaParameter2473 : Range<Int32> => [(), (), (), (), (), (), (), (), (), ()] };
    func1443(namedParam1444 : match ([(), (), (), var641, var641, var641, (), var641, (), ()]) {
        case caseVar1590 => 
            Option<Bool>.Some(false);
            var77 *= 123.0;
            (UInt32(204)&127..UInt32(68)&127:13|1)
        
        case _ : Array<Bool> => 
            if (true) { (var1313&127..UInt32(43)&127:(var813|1)) } else { var1608 } 
        
        case caseVar1612 : Option<Class119> => 
            var922++;
            var645 ||= true;
            var1608
        
        case _ => 
            Option<Int8>.None;
            (UInt32(5)&127..UInt32(17)&127:125|1)
        
    }, namedParam1445 : ((Int32(64)&127..=var922&127:(33|1))|>var2470))[0];
    ((true|>func2483) as Unit)
}




public func func346(param347 : Bool) : Enum16 { // block id: 348
    var var357 : ?Int8 = ('G' as Int8);
    try { // block id: 350
        (var357 ?? Int8(-72));
        match (var363) {
            case _ : Int8 => 
                ();
                var var370 : UInt64 = UInt64(29);
                var370
            
            case _ => 
                let var376 : UInt64 = UInt64(UInt32(225));
                var376
            
            case defaultValue => 
                var383
            
            case _ => 
                var var389 : Int32 = Int32(-110);
                var389 = Int32(-31);
                Enum16.defaultValue;
                UInt64(56) ^ UInt64(38)
            
        };
        (var402 ?? var406)
    } finally { // block id: 408
        let var412 : Array<Class119> = [Class119(), Class119(), Class119(), Class119(), Class119(), Class119(namedParam421 : Float32(Float32(Float32(25.0)))), Class119(), Class119(namedParam1072 : (Int32(15)&127..=Int32(-109)&127:(-16)|1)), Class119(), Class119()];
        var412[1]
    };
    Enum16.defaultValue
}

public func func337(param338 : Range<UInt16>) : Unit { // block id: 339
    UInt16(var342);
    var var3614 : (Bool) -> Enum16 = func346;
    var var3639 : (Rune, Bool, Range<Int16>) = ('j', (Class119((UInt16(140)&127..=UInt16(218)&127:(46|1))) is Option<Bool>), (Int16(UInt16(Int8(84)))&127..=Int16(57)&127:((-47)|1)));
    match ((var645|>var3614)) {
        case defaultValue => 
            Int8(-2) | Int8(3);
            (UInt8(6)&127..=UInt8(127)&127:(-25)|1);
            if (var645) { "YVb\\5&&$;#" } else { "%x]Zv>w;Zt" } 
        
        case caseVar3630 => 
            var3417;
            ###" A`QSe1Ckc"###
        
        case caseVar3636 => 
            var3639;
            """
3s*)C
OM%2|
"""
        
        case _ => 
            "#.c0<d2A|M"
        
    };
    var641
}



func func333(param334 : Float64) : Range<UInt16> { // block id: 335
    (var2179&127..(Option<UInt16>.Some(UInt16(93)) ?? UInt16(182))&127:(var813|1))|>func337;
    let var3723 : (Int8, UInt32) = (Int8(-45), UInt32(Int8(Int8(-50))));
    let var3751 : Range<Int32> = (Int32(-110)&127..Int32(-65)&127:(-67)|1);
    var var3787 : (Unit, Array<(Int8, UInt32)>) = ((), [(Int8(UInt8(241)), UInt32(Int32(-1))), (Int8(89), UInt32(100)), (Int8(104), UInt32(UInt16(211))), (Int8(26), UInt32(UInt8(254))), (Int8(-43), UInt32(UInt16(78))), (Int8(99), UInt32(108)), (Int8(61), UInt32(Int8(83))), (Int8(UInt8(44)), UInt32(UInt32(99))), (Int8(UInt8(212)), UInt32(140)), (Int8(-16), UInt32(UInt8(88)))]);
    (match (if (true) { var2257 } else { (UInt32(76), (var2604&127..=Int32(37)&127:((-123)|1)), UInt32(64), ###"Sfgx+ F}a{k"###, [(), (), (), (), (), (), (), (), (), ()], var658, var1051, var1608) } ) {
        case _ => 
            UInt8(32) & UInt8(176);
            var3698
        
    } ?? match (match ((var1203, (var2084, var760))) {
            case _ => 
                Option<Float32>.None;
                (var170&127..var170&127:((-25)|1));
                (var2089, [var1328, (Int8(42), var652), var3723, (var170, var652), var1328, var1328, var3723, var3723, var1328, (var170, UInt32(253))])
            
            case _ => 
                var2713 %= ((UInt8(146)) | 1);
                if (true) { var406 } else { Class119(namedParam1072 : var3751) } ;
                if (true) { var2342 } else { (var2084, var760) } 
            
            case caseVar3761 => 
                var2342
            
            case (caseVar3766 : Range<Int32>,(_ : Array<(Int8, UInt32)>,caseVar3767)) => 
                if (var645) { [UInt64(40), UInt64(3), UInt64(35), UInt64(174), UInt64(40), UInt64(153), UInt64(121), UInt64(139), UInt64(72), UInt64(2)] } else { [var929, var929, var383, UInt64(159), var383, var929, UInt64(89), UInt64(177), var929, UInt64(53)] } ;
                var383;
                if (false) { var3787 } else { ((), [var1328, var945, (Int8(104), UInt32(249)), (var170, UInt32(229)), var1328, (var170, var1313), (var170, UInt32(91)), (var170, UInt32(78)), (Int8(43), var652), (Int8(-18), var3858)]) } 
            
            case _ => 
                if (false) { var2452 } else { var2452 } ;
                var3787
            
        }) {
        case caseVar3869 : (Int8, UInt32) => 
            var2342;
            (UInt16(250)&127..UInt16(232)&127:((-31)|1))
        
        case _ => 
            if (false) { var3787 } else { var2342 } ;
            var2084;
            (var2179&127..UInt16(236)&127:(var813|1))
        
    })
}

public func func329(param330 : Class119) : Range<UInt16> { // block id: 331
    var77|>func333
}


public func func10(param11 : UInt8) : Rune { // block id: 12
    let var19 : Enum16 = Enum16.defaultValue;
    var var26 : Bool = ("i`pXQ@$}$>" is UInt64);
    let var35 : Unit = ();
    let var46 : Float32 = Float32(Float32(Float32(Float32(29.0))));
    let var174 : UInt32 = UInt32(Int8(-8));
    let var183 : Int8 = Int8(Int8(Int8(UInt8(Int8(101)))));
    let var3895 : ??(Unit, Array<(Int8, UInt32)>) = Option<Option<(Unit, Array<(Int8, UInt32)>)>>.Some(([Class119(namedParam1072 : (Int32(58)&127..Int32(45)&127:(82|1))), Class119(namedParam3215 : ('y', true, (Int16(8)&127..=Int16(-109)&127:((-20)|1))), namedParam3216 : (UInt16(230)&127..=UInt16(28)&127:((-109)|1))), Class119(namedParam3215 : ('j', false, (Int16(118)&127..Int16(83)&127:25|1)), namedParam3216 : (UInt16(230)&127..=UInt16(207)&127:((-31)|1))), Class119([(Int8(-98), UInt32(15)), (Int8(-55), UInt32(69)), (Int8(91), UInt32(175)), (Int8(-7), UInt32(240)), (Int8(48), UInt32(74)), (Int8(-88), UInt32(37)), (Int8(-111), UInt32(153)), (Int8(-53), UInt32(153)), (Int8(-111), UInt32(151)), (Int8(-63), UInt32(158))], namedParam3928 : Option<Array<Unit>>.Some([(), (), (), (), (), (), (), (), (), ()])), Class119([(Int8(57), UInt32(250)), (Int8(83), UInt32(204)), (Int8(55), UInt32(106)), (Int8(-21), UInt32(173)), (Int8(-53), UInt32(56)), (Int8(48), UInt32(202)), (Int8(98), UInt32(150)), (Int8(63), UInt32(207)), (Int8(29), UInt32(79)), (Int8(86), UInt32(189))], namedParam3928 : Option<Array<Unit>>.Some([(), (), (), (), (), (), (), (), (), ()])), Class119(namedParam421 : Float32(30.0), optionalParam422 : Option<Enum16>.None), Class119((UInt16(179)&127..UInt16(34)&127:((-123)|1))), Class119(namedParam1072 : (Int32(-87)&127..=Int32(-76)&127:(30|1))), Class119([(Int8(81), UInt32(98)), (Int8(-56), UInt32(234)), (Int8(-72), UInt32(169)), (Int8(49), UInt32(91)), (Int8(15), UInt32(169)), (Int8(65), UInt32(247)), (Int8(39), UInt32(193)), (Int8(-63), UInt32(53)), (Int8(-105), UInt32(116)), (Int8(4), UInt32(186))], namedParam3928 : Option<Array<Unit>>.None), Class119(namedParam1072 : (Int32(-52)&127..=Int32(-99)&127:((-98)|1)))] as (Unit, Array<(Int8, UInt32)>)));
    let var4153 : ?Unit = (UInt8(208) as Unit);
    func func123(optionalParam124 ! : Float64 = Float64(Float32(-32.0)), namedParam127 ! : UInt8, optionalParam128 ! : Unit = ()) : Class119 { // block id: 130
        var var145 : Range<UInt16> = (UInt16(199)&127..UInt16(161)&127:(Int64(UInt64(Int16(Int16(29))))|1));
        var var160 : (Int8, UInt32) = (Int8(Int8(113)), UInt32(Int32(UInt8(UInt8(20)))));
        match (var145) {
            case _ => 
                UInt8(58);
                let var200 : Array<(Int8, UInt32)> = [(Int8(-8), UInt32(UInt16(Int16(-66)))), (Int8(Int8(-106)), UInt32(UInt32(61))), (Int8(115), UInt32(195)), (Int8(UInt8(246)), UInt32(111)), (Int8(84), UInt32(Int8(Int8(-102)))), (Int8(Int8(Int8(121))), UInt32(Int16(47))), (Int8(Int8(UInt8(17))), UInt32(35)), (Int8(88), UInt32(UInt8(Int8(111)))), (Int8(Int8(UInt8(12))), UInt32(147)), (Int8(UInt8(UInt8(221))), UInt32(Int16(Int16(46))))];
                if (false) { [var160, (var170, var174), var160, (Int8(4), var174), (var183, UInt32(35)), var160, var160, var160, (var170, UInt32(149)), (var183, UInt32(107))] } else { var200 } 
            
        }[1][0];
        var var269 : Range<Int64> = (Int64(UInt8(Int8(Int8(-1))))&127..Int64(UInt32(UInt8(96)))&127:(Int64(Int16(31))|1));
        var var300 : Int64 = 113;
        let var305 : Range<Int32> = (Int32(Int32(Int16(-75)))&127..Int32(89)&127:(Int64(UInt32(Int8(Int8(35))))|1));
        var loopTimeVar326 : Int64 = 0;
        do {
            loopTimeVar326++;

        } while ((match ((var262 ?? Enum16.defaultValue)) {
            case defaultValue => 
                var269;
                if (false) { Option<Enum16>.Some(var19) } else { Option<Enum16>.None } ;
                true
            
            case defaultValue => 
                optionalParam128;
                var170 >= Int8(-121)
            
            case defaultValue => 
                (UInt8(24)&127..param11&127:(var300|1));
                if (false) { var305 } else { var305 } ;
                false
            
            case _ => 
                var77;
                ();
                Int16(-2) >= Int16(75)
            
        }) && loopTimeVar326 < 100 ) ;
        var var4165 : UInt32 = UInt32(Int16(-117));
        match ((var406|>func329)) {
            case _ : Option<Enum16> => 
                var3895;
                if (false) { var406 } else { var406 } 
            
            case _ : Int16 => 
                var4153;
                if (false) { var406 } else { Class119() } 
            
            case _ : UInt32 => 
                var4165 *= UInt32(201);
                optionalParam128;
                var406
            
            case _ => 
                ();
                if (var645) { var406 } else { Class119() } 
            
        }
    }
;
    var var4385 : ?Bool = Option<Bool>.Some((Option<(Array<Unit>, UInt8)>.Some(([(), (), (), (), (), (), (), (), (), ()], UInt8(80))) is Int32));
    let var4393 : (Range<Int32>) -> Array<Unit> = func1625;
    var var4396 : (Option<Int8>) -> Unit = func2019;
    var var4411 : Array<Bool> = [false, false, false, true, false, true, true, true, true, true];
    if (if (match (var19) {
        case defaultValue => 
            var26 || false
        
        case defaultValue => 
            ();
            var35;
            false && false
        
        case defaultValue => 
            Float32(87.0) > var46
        
        case _ => 
            ();
            false
        
    }) { // block id: 55
        ();
        Enum16.defaultValue;
        true && true
    } else { // block id: 61
        true
    }) { // block id: 63
        try { // block id: 65
            ();
            var35;
            UInt64(153)
        } finally { // block id: 69
            var var72 : UInt16 = UInt16(Int8(49));
            var72--;
            var77 += var77;
            let var82 : UInt64 = UInt64(Int8(Int8(Int8(Int8(-114)))));
            var82
        };
        match (Enum16.defaultValue) {
            case _ : UInt16 => 
                UInt64(174);
                'y'
            
            case defaultValue => 
                'V'
            
            case defaultValue => 
                var103;
                var35;
                var103
            
            case caseVar109 : String => 
                var26 ||= true;
                'q'
            
            case _ => 
                '1'
            
        }
    } else if (func123(optionalParam124 : 39.0, namedParam127 : var2713, optionalParam128 : ()).func4182(var4385, var4393, namedParam4187 : var4396)) { // block id: 4398
        if (true) { // block id: 4401
            37;
            var2089;
            var2574
        };
        match (var4325) {
            case _ : Array<Bool> => 
                var4411;
                if (var645) { Option<Array<Class119>>.None } else { Option<Array<Class119>>.Some(var1203) } ;
                var658
            
            case _ : Option<Enum16> => 
                let var4425 : Range<Int32> = (Int32(UInt16(165))&127..=Int32(119)&127:((-63)|1));
                if (var26) { var4425 } else { var4425 } ;
                if (var26) { var658 } else { var103 } 
            
            case _ : Range<UInt32> => 
                var2084;
                'A'
            
            case _ => 
                var645 &&= false;
                't'
            
            case _ => 
                var658
            
        }
    } else { // block id: 4451
        try { // block id: 4453
            var1245;
            var170 += Int8(77)
        } catch (_) { // block id: 4458
            Option<Bool>.None;
            var2084
        };
        ();
        if (var26) { var658 } else { '8' } 
    }
}



main(): Int64 {
    try {
        if (true) { (UInt8(91)|>func10) } else { (var4474 ?? var4491) } ;
        var var4500 : ?(Rune, Bool, Range<Int16>) = Option<(Rune, Bool, Range<Int16>)>.None;
        Class119(namedParam3215 : (var4500 ?? var4503), namedParam3216 : var4512);
        if (var4517 && false) { // block id: 4520
            var641;
            var2574;
            var4315
        } else if ((var4526 is Option<Array<Unit>>)) { // block id: 4528
            39 % ((97) | 1)
        } else { // block id: 4532
            var2089;
            (-123) - 45
        }
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Class119 {
    func func4182(param4183 : Option<Bool>, param4184 : (Range<Int32>) -> Array<Unit>, namedParam4187 ! : (Option<Int8>) -> Unit, optionalParam4190 ! : UInt64 = UInt64(Int8(57))) : Bool { // block id: 4193
        var3256;
        (if ((var2574 is Unit)) { // block id: 4199
            var2089;
            var342
        } else if (false) { // block id: 4203
            var2713 <<= ((var1733) & 7);
            var2179
        } else { // block id: 4208
            var641;
            var1297;
            UInt16(127)
        }&127..UInt16(UInt8(97))&127:(var2036|1));
        (match {
            case ((UInt8(244), var3228, var4222, "C/.J4\\H32g", Int16(-47), var1302, var2452) is Bool) => 
            var2574;
            if (false) { ((-79)&127..=39&127:93|1) } else { (var2036&127..=(-66)&127:(var813|1)) } ;
            (var2713, (UInt32(115), (Int32(-13)&127..var2321&127:(var4315|1)), UInt32(129), "8Wa{n,$<N8r", var2115, var658, ((-103)&127..=58&127:(-103)|1), (UInt32(88)&127..UInt32(148)&127:10|1)), var2115, var4325, [var4329, UInt32(194), var3858, UInt32(48), UInt32(138), var1313, var4329, var4329, UInt32(4), var3858], (Int8(81)&127..Int8(125)&127:((-31)|1)), (var170, UInt32(4)))
            case _ => 
            (var954, (var652, (Int32(27)&127..=var2321&127:((-57)|1)), UInt32(28), """
2!?t4
JBXcK
""", var2115, var1719, (81&127..=44&127:(-22)|1), (UInt32(115)&127..=UInt32(178)&127:113|1)), [(), (), (), (), (), (), (), (), (), ()], var4325, var4365, (Int8(-103)&127..=Int8(-8)&127:22|1), var1328)
        } is Option<(Unit, Array<(Int8, UInt32)>)>)
    }
;
    static func func1639() : Unit { // block id: 1640
        [[UInt64(112), UInt64(200), UInt64(192), UInt64(130), UInt64(165), UInt64(213), UInt64(207), UInt64(203), UInt64(90), UInt64(101)], [UInt64(221), UInt64(231), UInt64(253), UInt64(111), UInt64(79), UInt64(215), UInt64(199), UInt64(162), UInt64(211), UInt64(197)], [UInt64(31), UInt64(252), UInt64(156), UInt64(15), UInt64(230), UInt64(13), UInt64(240), UInt64(90), UInt64(137), UInt64(94)], [UInt64(192), UInt64(35), UInt64(59), UInt64(168), UInt64(104), UInt64(54), UInt64(158), UInt64(89), UInt64(191), UInt64(186)], [UInt64(112), UInt64(164), UInt64(16), UInt64(39), UInt64(140), UInt64(71), UInt64(174), UInt64(190), UInt64(28), UInt64(215)], [UInt64(247), UInt64(175), UInt64(51), UInt64(227), UInt64(39), UInt64(188), UInt64(219), UInt64(170), UInt64(249), UInt64(158)], [UInt64(68), UInt64(183), UInt64(109), UInt64(105), UInt64(79), UInt64(137), UInt64(45), UInt64(168), UInt64(227), UInt64(172)], [UInt64(68), UInt64(39), UInt64(55), UInt64(130), UInt64(18), UInt64(163), UInt64(233), UInt64(189), UInt64(18), UInt64(249)], [UInt64(113), UInt64(79), UInt64(33), UInt64(14), UInt64(181), UInt64(88), UInt64(30), UInt64(62), UInt64(72), UInt64(8)], [UInt64(46), UInt64(125), UInt64(205), UInt64(88), UInt64(177), UInt64(19), UInt64(65), UInt64(241), UInt64(45), UInt64(249)]];
        let var1706 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
        var1313 %= ((match ([UInt32(101), UInt32(113), UInt32(151), UInt32(224), UInt32(55), UInt32(72), UInt32(233), UInt32(129), UInt32(252), UInt32(47)]) {
            case caseVar1648 : ((UInt32, Range<Int32>, UInt32, String, Array<Unit>, Rune, Range<Int64>, Range<UInt32>), Int16, UInt8) => 
                UInt32(68)
            
            case _ => 
                var1655;
                ();
                var652 ** (UInt32(148) & 3)
            
            case _ : Option<Bool> => 
                var var1730 : Int16 = Int16(-24);
                ((var652, (Int32(-67)&127..=var922&127:(var813|1)), var1548, "p?~BVlmSn5", var1706, var1719, (var813&127..var813&127:((-10)|1)), (var1313&127..=var1548&127:(35|1))), var1730, var1733);
                var652
            
            case _ : Array<Array<UInt64>> => 
                var1608;
                UInt32(180)
            
            case _ => 
                var1297;
                var645 ||= var645;
                UInt32(101)
            
        }) | 1);
        var406.func1752(optionalParam1753 : if (var645) { // block id: 1761
            if (var645) { (Float32(-14.0), var929, Option<Array<(Int8, UInt32)>>.None, UInt16(42), (124&127..=82&127:(-89)|1), Int32(2)) } else { var1772 } ;
            var170 %= ((Int8(-1)) | 1);
            true
        } else if (true) { // block id: 1785
            var77 + (-44.0);
            if (false) { (UInt8(86)&127..=UInt8(166)&127:(var813|1)) } else { (UInt8(211)&127..UInt8(202)&127:((-6)|1)) } ;
            true
        } else { // block id: 1800
            (UInt32(227)&127..=var1548&127:(var813|1));
            var363;
            var645
        }, optionalParam1755 : [[UInt64(142), UInt64(188), UInt64(211), UInt64(18), UInt64(198), UInt64(133), UInt64(118), UInt64(41), UInt64(66), UInt64(253)], [UInt64(222), UInt64(168), UInt64(227), UInt64(126), UInt64(205), UInt64(21), UInt64(205), UInt64(120), UInt64(173), UInt64(234)], [UInt64(185), UInt64(6), UInt64(90), UInt64(91), UInt64(177), UInt64(33), UInt64(178), UInt64(181), UInt64(95), UInt64(133)], [UInt64(46), UInt64(162), UInt64(194), UInt64(161), UInt64(67), UInt64(190), UInt64(245), UInt64(123), UInt64(163), UInt64(130)], [UInt64(85), UInt64(220), UInt64(224), UInt64(199), UInt64(145), UInt64(207), UInt64(12), UInt64(177), UInt64(80), UInt64(219)], [UInt64(18), UInt64(216), UInt64(196), UInt64(131), UInt64(121), UInt64(123), UInt64(116), UInt64(14), UInt64(31), UInt64(15)], [UInt64(138), UInt64(47), UInt64(169), UInt64(220), UInt64(107), UInt64(237), UInt64(251), UInt64(210), UInt64(187), UInt64(110)], [UInt64(55), UInt64(216), UInt64(99), UInt64(148), UInt64(254), UInt64(84), UInt64(55), UInt64(178), UInt64(50), UInt64(46)], [UInt64(36), UInt64(157), UInt64(38), UInt64(195), UInt64(115), UInt64(132), UInt64(116), UInt64(249), UInt64(137), UInt64(214)], [UInt64(44), UInt64(23), UInt64(80), UInt64(171), UInt64(146), UInt64(212), UInt64(15), UInt64(35), UInt64(111), UInt64(19)]], namedParam1757 : if (var645) { var1655 } else { ((), [(Int8(-65), var652), (Int8(2), var1313), var945, var1328, var945, var945, (var170, var1313), (Int8(-107), UInt32(133)), var945, (Int8(53), var1313)]) } )
    }

}

extend Enum16 {

}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_unexpected_declaration_in_scope
// ASSERT: scan parse_expected_left_brace
// ASSERT: scan parse_expected_case


