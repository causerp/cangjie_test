/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output


public var var21 : Unit = ()
public let var26 : Unit = ()
public let var36 : Int64 = 21
public var var57 : Int8 = Int8(Int8(-13))
public let var61 : Bool = (() is UInt32)
public let var77 : Float32 = Float32(107.0)
public let var159 : (Range<Int32>, Int16, Int8) = ((Int32(46)&127..=Int32(9)&127:37|1), Int16(UInt8(UInt8(207))), Int8(-3))
public let var173 : Aggregate169 = Aggregate169()
public var var204 : Int32 = Int32(Int16(UInt16(157)))
public let var214 : Int16 = Int16(Int8(Int8(UInt8(Int8(-98)))))
public var var278 : ??Int64 = ((Int32(105)&127..Int32(Int8(-77))&127:(Int64(UInt64(224))|1)) as Option<Int64>)
public let var315 : ??String = ((Int16(Int8(Int8(-37)))&127..Int16(UInt16(UInt16(142)))&127:((-77)|1)) as Option<String>)
public var var345 : Int16 = Int16(-27)
public let var405 : Range<Int32> = (Int32(Int32(-98))&127..Int32(Int16(UInt8(113)))&127:((-114)|1))
public var var414 : UInt64 = UInt64(79)
public let var435 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
public let var487 : Array<Bool> = [true, false, false, false, false, false, false, false, true, false]
var var715 : UInt16 = UInt16(UInt8(Int8(34)))
public var var732 : Range<Int32> = (Int32(UInt16(201))&127..Int32(UInt8(UInt8(UInt8(115))))&127:((-37)|1))
public let var814 : Bool = true
public let var819 : UInt32 = UInt32(Int8(UInt8(UInt8(Int8(116)))))
public var var848 : UInt32 = UInt32(Int8(Int8(UInt8(Int8(-12)))))
public var var934 : Int16 = Int16(Int16(Int8(UInt8(UInt8(232)))))
public let var1013 : ?String = Option<String>.None
public let var1021 : Option<Array<Range<UInt32>>> = Option<Array<Range<UInt32>>>.None
public var var1069 : UInt16 = UInt16(107)
public let var1089 : Array<Range<UInt32>> = Array<Range<UInt32>>(10){ i => (UInt32(51)&127..UInt32(80)&127:109|1) }
public let var1141 : Class1136 = Class1136()
public var var1155 : ?Float64 = Option<Float64>.None
public let var1160 : Array<Float64> = [(-96.0), 61.0, (-11.0), (-73.0), (-67.0), 26.0, (-76.0), (-77.0), 33.0, 102.0]
public var var1180 : Enum492 = Enum492.defaultValue
public var var1185 : ??String = ((UInt8(11)&127..UInt8(118)&127:88|1) as Option<String>)
public var var1235 : UInt16 = UInt16(Int16(-65))
public let var1344 : Int64 = Int64(UInt64(UInt8(126)))
let var1362 : (Int32, Int32, Unit, UInt32, Int64) = (Int32(Int16(122)), Int32(-103), (), UInt32(165), Int64(UInt64(203)))
var var1382 : UInt16 = UInt16(26)
public var var1441 : Range<UInt32> = (UInt32(106)&127..UInt32(133)&127:73|1)
public var var1444 : (Array<Unit>, Bool, Int64) = ([(), (), (), (), (), (), (), (), (), ()], (Option<(Range<Int32>, Int16, Int8)>.None is Option<Option<Int64>>), (-35))
public var var1546 : ??(Range<Int64>, Bool, Array<Bool>, Array<Bool>, UInt64, (Bool, Int32, Range<Int64>, Array<Range<Int32>>, (Range<Int32>, Int16, Int8), (Int32, Int32, Unit, UInt32, Int64)), UInt8, (Range<Int32>, Int16, Int8), Range<Int8>) = (((UInt8(193)&127..=UInt8(5)&127:((-104)|1)) as Int64) as Option<(Range<Int64>, Bool, Array<Bool>, Array<Bool>, UInt64, (Bool, Int32, Range<Int64>, Array<Range<Int32>>, (Range<Int32>, Int16, Int8), (Int32, Int32, Unit, UInt32, Int64)), UInt8, (Range<Int32>, Int16, Int8), Range<Int8>)>)
public var var1572 : Bool = true
public var var1579 : Range<Int64> = ((-30)&127..56&127:(-62)|1)
public var var1582 : Array<Range<Int32>> = Array<Range<Int32>>(10){ i => (Int32(UInt16(15))&127..=Int32(Int8(-45))&127:((-66)|1)) }
public var var1641 : Range<Int8> = (Int8(114)&127..=Int8(-58)&127:43|1)
public let var1644 : (Range<Int64>, Bool, Array<Bool>, Array<Bool>, UInt64, (Bool, Int32, Range<Int64>, Array<Range<Int32>>, (Range<Int32>, Int16, Int8), (Int32, Int32, Unit, UInt32, Int64)), UInt8, (Range<Int32>, Int16, Int8), Range<Int8>) = ((0&127..120&127:75|1), ([(Option<Option<Int64>>.None is Range<UInt16>), false, ((Enum492.defaultValue, (Int32(5)&127..Int32(-34)&127:(-86)|1), (18&127..(-34)&127:(-25)|1), [(UInt32(193)&127..UInt32(10)&127:((-60)|1)), (UInt32(59)&127..UInt32(187)&127:(-125)|1), (UInt32(51)&127..UInt32(178)&127:(-76)|1), (UInt32(177)&127..=UInt32(112)&127:(-90)|1), (UInt32(176)&127..UInt32(17)&127:((-17)|1)), (UInt32(229)&127..UInt32(4)&127:((-56)|1)), (UInt32(23)&127..UInt32(67)&127:76|1), (UInt32(231)&127..=UInt32(127)&127:((-38)|1)), (UInt32(96)&127..UInt32(37)&127:(-57)|1), (UInt32(40)&127..=UInt32(38)&127:89|1)], (-75.0)) is Array<Range<Int32>>), true, (Class1136() is Array<Unit>), ((Int16(-115)&127..=Int16(123)&127:27|1) is Option<Option<String>>), ((80&127..=(-43)&127:76|1) is UInt16), (Option<Int64>.None is Rune), false, false] is (Enum492) -> Unit), [((UInt64(149)&127..=UInt64(147)&127:((-102)|1)) is (UInt32) -> Array<Unit>), (Int64((-38)) is Range<Int16>), true, (Option<Option<(Range<Int64>, Bool, Array<Bool>, Array<Bool>, UInt64, (Bool, Int32, Range<Int64>, Array<Range<Int32>>, (Range<Int32>, Int16, Int8), (Int32, Int32, Unit, UInt32, Int64)), UInt8, (Range<Int32>, Int16, Int8), Range<Int8>)>>.None is Int64), ([Enum492.defaultValue, Enum492.defaultValue, Enum492.defaultValue, Enum492.defaultValue, Enum492.defaultValue, Enum492.defaultValue, Enum492.defaultValue, Enum492.defaultValue, Enum492.defaultValue, Enum492.defaultValue] is UInt16), ((Option<Option<UInt64>>.None as Int64) is (UInt32) -> Array<Unit>), false, (Int8(19) is Rune), ((Option<Option<Int64>>.None is Option<Array<Range<UInt32>>>) is Int16), true], [false, true, true, false, false, true, true, false, false, true], UInt64(UInt32(Int32(UInt32(39)))), (true, Int32(Int16(UInt16(145))), (72&127..63&127:(-78)|1), [(Int32(40)&127..Int32(-49)&127:1|1), (Int32(-36)&127..Int32(-70)&127:116|1), (Int32(110)&127..Int32(53)&127:49|1), (Int32(101)&127..=Int32(125)&127:(-65)|1), (Int32(-115)&127..=Int32(110)&127:71|1), (Int32(-97)&127..Int32(58)&127:9|1), (Int32(10)&127..=Int32(94)&127:(-74)|1), (Int32(-112)&127..Int32(27)&127:(-44)|1), (Int32(-91)&127..Int32(120)&127:(-106)|1), (Int32(-69)&127..=Int32(-1)&127:95|1)], ((Int32(-5)&127..Int32(-28)&127:(-110)|1), Int16(UInt16(44)), Int8(101)), (Int32(Int32(-28)), Int32(8), (), UInt32(120), (-53))), UInt8(UInt8(Int8(UInt8(43)))), ((Int32(-34)&127..Int32(-115)&127:55|1), Int16(-43), Int8(-110)), (Int8(Int8(Int8(-113)))&127..=Int8(UInt8(219))&127:(118|1)))
public let var1768 : Array<Bool> = [false, false, true, true, true, true, true, false, true, false]
public let var1779 : (Int32, Int32, Unit, UInt32, Int64) = (Int32(117), Int32(UInt32(189)), (), UInt32(88), (-31))
public let var1808 : Array<UInt32> = [UInt32(Int32(Int32(Int8(-117)))), UInt32(Int8(UInt8(Int8(-74)))), UInt32(Int32(Int16(125))), UInt32(121), UInt32(208), UInt32(Int16(UInt8(135))), UInt32(229), UInt32(23), UInt32(UInt32(UInt32(UInt8(67)))), UInt32(176)]
public var var1867 : ?(Range<Int64>, Bool, Array<Bool>, Array<Bool>, UInt64, (Bool, Int32, Range<Int64>, Array<Range<Int32>>, (Range<Int32>, Int16, Int8), (Int32, Int32, Unit, UInt32, Int64)), UInt8, (Range<Int32>, Int16, Int8), Range<Int8>) = (Option<(Range<Int64>, Bool, Array<Bool>, Array<Bool>, UInt64, (Bool, Int32, Range<Int64>, Array<Range<Int32>>, (Range<Int32>, Int16, Int8), (Int32, Int32, Unit, UInt32, Int64)), UInt8, (Range<Int32>, Int16, Int8), Range<Int8>)>.None as (Range<Int64>, Bool, Array<Bool>, Array<Bool>, UInt64, (Bool, Int32, Range<Int64>, Array<Range<Int32>>, (Range<Int32>, Int16, Int8), (Int32, Int32, Unit, UInt32, Int64)), UInt8, (Range<Int32>, Int16, Int8), Range<Int8>))
public var var1904 : Option<Aggregate169> = Option<Aggregate169>.None
public let var1927 : (Rune, Array<Range<Int32>>, Int8, Enum492, Range<Int64>, Array<Unit>) = ('9', [(Int32(49)&127..Int32(-88)&127:92|1), (Int32(-40)&127..=Int32(Int32(-14))&127:(Int64(Int32(-74))|1)), (Int32(Int16(-118))&127..Int32(87)&127:(29|1)), (Int32(-45)&127..Int32(72)&127:(-17)|1), (Int32(Int16(91))&127..=Int32(Int32(-113))&127:((-61)|1)), (Int32(UInt16(194))&127..=Int32(-51)&127:(Int64(64)|1)), (Int32(-70)&127..Int32(-128)&127:(-11)|1), (Int32(67)&127..Int32(-10)&127:(Int64(Int32(95))|1)), (Int32(-10)&127..Int32(-70)&127:(-89)|1), (Int32(UInt32(186))&127..Int32(Int16(-46))&127:((-95)|1))], Int8(125), Enum492.defaultValue, (Int64(Int32(UInt32(242)))&127..=Int64(UInt32(249))&127:((-102)|1)), [(), (), (), (), (), (), (), (), (), ()])
public let var2033 : Rune = 'd'
public let var2072 : Unit = ()
public let var2085 : Interface1139<Option<Array<Enum492>>, Range<Int32>, Range<UInt8>> = Class1136()
public let var2133 : Int64 = (-37)
public let var2143 : ??UInt64 = Option<Option<UInt64>>.None
public let var2172 : Float64 = Float64(Float32(11.0))
public let var2313 : Unit = ()
public var var2376 : Option<Bool> = ((UInt8(239) as Bool) as Bool)
let var2430 : ?Enum492 = Option<Enum492>.None
public var var2434 : Aggregate169 = Aggregate169()
let var2437 : Range<Int8> = (Int8(-84)&127..Int8(84)&127:(-79)|1)
public var var2441 : ?(Range<Int32>, Int16, Int8) = (Option<Array<UInt32>>.None as (Range<Int32>, Int16, Int8))
public var var2526 : Int64 = (-40)
public var var2568 : (Option<Array<Range<UInt32>>>, Int64, Float64) = (Option<Array<Range<UInt32>>>.None, (-3), 111.0)
let var2574 : (Option<Array<Range<UInt32>>>, Int64, Float64) = (Option<Array<Range<UInt32>>>.None, (-41), 39.0)
var var2611 : Option<Option<Array<Float64>>> = (Option<Class1136>.None as Option<Array<Float64>>)
public let var2627 : ?(Option<Int64>, Range<Int32>, UInt64, Unit) = (Option<Option<Array<Float64>>>.None as (Option<Int64>, Range<Int32>, UInt64, Unit))
public let var2637 : (Option<Int64>, Range<Int32>, UInt64, Unit) = (Option<Int64>.None, (Int32(110)&127..Int32(120)&127:(-92)|1), UInt64(49), ())
public var var2659 : Int64 = Int64(UInt32(101))
public let var2681 : Range<Int16> = (Int16(-12)&127..Int16(47)&127:(Int64(UInt32(UInt32(Int16(-121))))|1))
public let var2811 : Option<Option<Array<Enum492>>> = Option<Option<Array<Enum492>>>.None
var var2874 : Array<Range<Int32>> = [(Int32(UInt8(UInt8(144)))&127..Int32(47)&127:((-77)|1)), (Int32(Int16(Int16(118)))&127..Int32(Int32(81))&127:((-25)|1)), (Int32(-2)&127..Int32(-5)&127:61|1), (Int32(102)&127..=Int32(20)&127:(-125)|1), (Int32(72)&127..Int32(91)&127:(-101)|1), (Int32(-53)&127..=Int32(63)&127:(-6)|1), (Int32(-75)&127..=Int32(-21)&127:25|1), (Int32(113)&127..=Int32(-14)&127:(2|1)), (Int32(28)&127..=Int32(UInt8(UInt8(40)))&127:(Int64(Int32(-12))|1)), (Int32(-74)&127..=Int32(-101)&127:121|1)]
public let var2926 : UInt16 = UInt16(72)
public let var2932 : Array<Unit> = Array<Unit>(10){ i => () }
var var2945 : Array<Enum492> = [Enum492.defaultValue, Enum492.defaultValue, Enum492.defaultValue, Enum492.defaultValue, Enum492.defaultValue, Enum492.defaultValue, Enum492.defaultValue, Enum492.defaultValue, Enum492.defaultValue, Enum492.defaultValue]
public let var3085 : Array<Bool> = [false, false, true, true, false, true, false, false, true, false]
public var var3151 : Range<UInt16> = (UInt16(58)&127..=UInt16(21)&127:59|1)
let var3180 : Option<Array<Bool>> = Option<Array<Bool>>.None
public var var3208 : String = "0E)Li5K#7&"
let var3278 : ?Class1136 = Option<Class1136>.None

public func func118(param119 : Int32, namedParam120 ! : Int16) : Unit { // block id: 121

}


public struct Aggregate169 {
    public init() { // block id: 171

    }
;
    public var var176 : Bool = true
}

public func func114(param115 : String) : Unit { // block id: 116
    func118(try { // block id: 123
        Int8(58);
        ();
        Int32(76)
    } catch (_) { // block id: 127
        var var130 : UInt32 = UInt32(11);
        var130 **= (var130 & 3);
        Int32(114)
    } finally { // block id: 134
        Int32(-58) & Int32(58);
        var var140 : UInt16 = UInt16(UInt8(UInt8(Int8(Int8(51)))));
        var140++;
        let var147 : Int32 = Int32(Int16(-75));
        var147
    }, namedParam120 : (Option<(Range<Int32>, Int16, Int8)>.None ?? var159)[1]);
    var loopTimeVar185 : Int64 = 0;
    while ((var173.var176) && loopTimeVar185 < 100 ) {
        loopTimeVar185++;
        var loopTimeVar183 : Int64 = 0;
        while ((true) && loopTimeVar183 < 100 ) {
            loopTimeVar183++;

        }
    }
}





public func func375(param376 : (Range<Int32>, Int16, Int8)) : Array<Unit> { // block id: 377
    let var384 : (Option<Int64>, Range<Int32>, UInt64, Unit) = (((Int8(Int8(-50))&127..Int8(-16)&127:(Int64(UInt32(174))|1)) as Int64), (Int32(-64)&127..=Int32(UInt8(164))&127:(Int64(UInt8(Int8(116)))|1)), UInt64(23), ());
    var var457 : Unit = ();
    match (if (var61) { var384 } else { (Option<Int64>.None, var405, var414, ()) } [0]) {
        case _ => 
            if (true) { [var21, (), var26, var26, var26, var26, (), (), var21, var26] } else { var435 } 
        
        case caseVar439 : Range<UInt8> => 
            (Option<Int64>.None, (Int32(126)&127..Int32(-8)&127:(-43)|1), UInt64(225), var26);
            [var21, (), var26, (), var21, var21, var26, var21, (), var457]
        
        case caseVar461 => 
            var457;
            [(), (), (), (), (), (), (), (), (), ()]
        
        case caseVar467 => 
            (Int16(-47)&127..Int16(21)&127:(-23)|1);
            [var26, (), (), (), (), (), (), (), var21, ()]
        
        case _ => 
            UInt16(128) | UInt16(136);
            var487;
            var435
        
    }
}

public enum Enum492 {
    defaultValue |
    enumValue510(((Range<Int32>, Int16, Int8)) -> Array<Unit>, Int8) |
    enumValue535(Option<Option<Option<String>>>, UInt16) |
    enumValue584(Aggregate169, Range<Int8>, Array<Range<Int32>>)
}
public func func500(namedParam501 ! : Array<Enum492>) : Array<Enum492> { // block id: 502
    let var506 : (Array<Enum492>, Float32, Range<Int32>, Int16, Array<Bool>) = ([Enum492.enumValue510({ lambdaParameter517 : (Range<Int32>, Int16, Int8) => [(), (), (), (), (), (), (), (), (), ()] }, Int8(11)), Enum492.enumValue510({ lambdaParameter524 : (Range<Int32>, Int16, Int8) => [(), (), (), (), (), (), (), (), (), ()] }, Int8(UInt8(118))), Enum492.defaultValue, Enum492.defaultValue, Enum492.enumValue510(func375, Int8(-68)), Enum492.enumValue535(Option<Option<Option<String>>>.None, UInt16(Int8(-22))), Enum492.enumValue510(func375, Int8(UInt8(118))), Enum492.defaultValue, Enum492.enumValue535(Option<Option<Option<String>>>.None, UInt16(Int8(1))), Enum492.defaultValue], Float32(Float32(Float32(Float32(18.0)))), (Int32(39)&127..=Int32(UInt8(105))&127:(107|1)), Int16(Int16(110)), [true, true, false, true, false, false, true, false, false, true]);
    var506[0]
}

public func func495() : Enum492 { // block id: 496
    let var567 : ?String = ((UInt64(203)&127..=UInt64(186)&127:98|1) as String);
    var var574 : Array<Enum492> = [Enum492.enumValue535((([(), (), (), (), (), (), (), (), (), ()], true, (-13)) as Option<Option<String>>), UInt16(55)), Enum492.enumValue584(Aggregate169(), (Int8(-17)&127..=Int8(120)&127:107|1), [(Int32(-97)&127..Int32(-30)&127:(-126)|1), (Int32(-45)&127..Int32(16)&127:(-16)|1), (Int32(12)&127..=Int32(-24)&127:3|1), (Int32(-43)&127..Int32(7)&127:((-87)|1)), (Int32(22)&127..=Int32(-105)&127:((-28)|1)), (Int32(-9)&127..=Int32(69)&127:(38|1)), (Int32(-64)&127..=Int32(72)&127:(-76)|1), (Int32(90)&127..=Int32(-122)&127:(-60)|1), (Int32(-51)&127..Int32(-90)&127:((-60)|1)), (Int32(-5)&127..=Int32(-15)&127:((-2)|1))]), Enum492.enumValue510(func375, Int8(111)), Enum492.enumValue584(Aggregate169(), (Int8(-92)&127..=Int8(-92)&127:6|1), [(Int32(72)&127..=Int32(-42)&127:(-51)|1), (Int32(26)&127..Int32(-119)&127:(-30)|1), (Int32(-55)&127..=Int32(70)&127:98|1), (Int32(-76)&127..=Int32(-101)&127:120|1), (Int32(48)&127..=Int32(90)&127:(-108)|1), (Int32(68)&127..=Int32(-93)&127:(-80)|1), (Int32(52)&127..Int32(-99)&127:53|1), (Int32(-8)&127..=Int32(-45)&127:62|1), (Int32(20)&127..=Int32(-47)&127:10|1), (Int32(33)&127..=Int32(34)&127:19|1)]), Enum492.defaultValue, Enum492.enumValue584(Aggregate169(), (Int8(UInt8(251))&127..=Int8(UInt8(198))&127:(Int64(34)|1)), [(Int32(-79)&127..Int32(119)&127:(107|1)), (Int32(93)&127..=Int32(-93)&127:(-47)|1), (Int32(75)&127..Int32(85)&127:122|1), (Int32(94)&127..Int32(100)&127:65|1), (Int32(-70)&127..Int32(-108)&127:62|1), (Int32(-118)&127..=Int32(70)&127:(-66)|1), (Int32(-127)&127..=Int32(19)&127:105|1), (Int32(68)&127..=Int32(-55)&127:(45|1)), (Int32(26)&127..=Int32(-85)&127:(75|1)), (Int32(126)&127..=Int32(-35)&127:17|1)]), Enum492.enumValue510({ lambdaParameter656 : (Range<Int32>, Int16, Int8) => [(), (), (), (), (), (), (), (), (), ()] }, Int8(Int8(Int8(-23)))), Enum492.enumValue584(Aggregate169(), (Int8(Int8(-36))&127..Int8(UInt8(129))&127:(77|1)), [(Int32(100)&127..Int32(64)&127:(-25)|1), (Int32(-122)&127..=Int32(-128)&127:(-91)|1), (Int32(-56)&127..Int32(-62)&127:17|1), (Int32(-43)&127..Int32(-81)&127:(-105)|1), (Int32(-65)&127..=Int32(43)&127:(-108)|1), (Int32(-65)&127..Int32(88)&127:(-88)|1), (Int32(56)&127..Int32(14)&127:121|1), (Int32(92)&127..Int32(-28)&127:106|1), (Int32(-65)&127..Int32(38)&127:65|1), (Int32(-91)&127..=Int32(-68)&127:(-51)|1)]), Enum492.enumValue535(Option<Option<Option<String>>>.Some(Option<Option<String>>.Some(Option<String>.None)), UInt16(UInt16(14))), Enum492.enumValue584(Aggregate169(), (Int8(-2)&127..=Int8(60)&127:99|1), [(Int32(56)&127..Int32(19)&127:5|1), (Int32(64)&127..=Int32(-103)&127:(-103)|1), (Int32(-45)&127..Int32(-75)&127:(-76)|1), (Int32(111)&127..Int32(-74)&127:(-111)|1), (Int32(87)&127..=Int32(-84)&127:22|1), (Int32(-26)&127..=Int32(-127)&127:(-42)|1), (Int32(-75)&127..=Int32(-46)&127:123|1), (Int32(112)&127..Int32(-97)&127:(-13)|1), (Int32(1)&127..=Int32(-60)&127:115|1), (Int32(-99)&127..=Int32(89)&127:(-55)|1)])];
    func500(namedParam501 : match (Option<Option<String>>.Some(var567)) {
        case _ => 
            var574
        
        case _ => 
            var574
        
    })[3]
}

public func func299(param300 : UInt32) : Array<Unit> { // block id: 301
    var var329 : ?String = Option<String>.None;
    let var337 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    match (((Option<Option<Option<String>>>.Some(var315) ?? var315) ?? (Option<Option<String>>.Some(var329) ?? var329))) {
        case caseVar334 => 
            var337
        
        case caseVar341 : UInt64 => 
            var345 **= (var345 & 3);
            (UInt32(150)&127..=UInt32(245)&127:33|1);
            [(), var21, (), (), (), (), var26, var21, (), var26]
        
        case caseVar362 => 
            var var367 : Range<Int64> = (69&127..=56&127:(-10)|1);
            if (true) { var367 } else { (72&127..=(-104)&127:(-119)|1) } ;
            [(), (), (), (), (), (), (), (), (), ()]
        
        case _ => 
            [(), (), (), (), (), (), (), (), (), ()]
        
    };
    let var704 : Int16 = Int16(-73);
    match (func495()) {
        case _ : UInt32 => 
            UInt32(161);
            var214 + Int16(87);
            if (var61) { ((Int32(116)&127..Int32(-13)&127:(-23)|1), Int16(124), Int8(-54)) } else { ((var204&127..=var204&127:(65|1)), var704, Int8(124)) } 
        
        case enumValue510(caseVar709, caseVar710) => 
            ();
            var715--;
            ((var204&127..var204&127:((-31)|1)), var214, caseVar710)
        
        case _ => 
            if (false) { (var732, var704, var57) } else { ((Int32(-1)&127..Int32(108)&127:(-118)|1), Int16(-7), Int8(29)) } 
        
    }|>func375
}



func func997(param998 : (Range<Int32>, Int16, Int8)) : Array<Range<UInt32>> { // block id: 999
    var21;
    (if (if (false) { // block id: 1005
        true
    } else { // block id: 1007
        UInt16(251) == UInt16(146)
    }) { match (var1013) {
        case _ => 
            ();
            var26;
            var1021
        
        case _ => 
            var21;
            true;
            Option<Array<Range<UInt32>>>.None
        
        case caseVar1031 : Option<(Array<Unit>, Bool, Int64)> => 
            Option<Array<Range<UInt32>>>.None
        
        case caseVar1036 => 
            ();
            var1021
        
        case _ => 
            Option<Array<Range<UInt32>>>.Some([(UInt32(175)&127..=UInt32(53)&127:(-107)|1), (UInt32(77)&127..UInt32(241)&127:(-45)|1), (UInt32(43)&127..UInt32(161)&127:(-58)|1), (UInt32(147)&127..UInt32(138)&127:42|1), (UInt32(204)&127..UInt32(211)&127:17|1), (UInt32(209)&127..UInt32(87)&127:(-66)|1), (UInt32(53)&127..UInt32(32)&127:(-85)|1), (UInt32(6)&127..UInt32(227)&127:(-68)|1), (UInt32(48)&127..UInt32(116)&127:(-1)|1), (UInt32(163)&127..UInt32(250)&127:(-81)|1)])
        
    } } else { (Option<Array<Range<UInt32>>>.None, 81, (-18.0))[0] }  ?? match (match (var814) {
            case true | false => 
                var848 &= UInt32(81);
                (UInt16(118)&127..UInt16(37)&127:((-94)|1))
            
            case true | true | false | false => 
                var1069++;
                (UInt16(157)&127..=UInt16(240)&127:((-26)|1))
            
            case _ => 
                (UInt16(152)&127..=UInt16(249)&127:32|1)
            
        }) {
        case _ => 
            var57++;
            var21;
            [(UInt32(141)&127..=UInt32(106)&127:80|1), (UInt32(205)&127..=UInt32(48)&127:(-34)|1), (UInt32(87)&127..=UInt32(96)&127:42|1), (UInt32(124)&127..UInt32(252)&127:31|1), (UInt32(150)&127..=UInt32(144)&127:64|1), (UInt32(162)&127..=UInt32(52)&127:(-98)|1), (UInt32(30)&127..=UInt32(165)&127:112|1), (UInt32(252)&127..UInt32(98)&127:10|1), (UInt32(246)&127..=UInt32(149)&127:8|1), (UInt32(254)&127..UInt32(86)&127:(-61)|1)]
        
    })
}

public interface Interface1139<T0, T1, T2> {
    func func1144(namedParam1145 ! : Option<Int64>, namedParam1146 ! : Option<Array<Range<UInt32>>>, namedParam1147 ! : Array<Range<UInt32>>) : Bool { // block id: 1148
        (var1155 ?? var1160[8]);
        var var2151 : (Int32, Int16) -> Unit = func2147;
        (var2151|>func1166)[2];
        var1572
    }

}

public open class Class1136 <: Interface1139<Option<Array<Enum492>>, Range<Int32>, Range<UInt8>> {
    public init() { // block id: 1138

    }

}


public func func1224(param1225 : Aggregate169) : Array<Bool> { // block id: 1226
    [false, false, true, true, true, true, true, true, true, true]
}


public func func1391(param1392 : Enum492) : Unit { // block id: 1393

}

public func func1395(param1396 : Class1136) : Unit { // block id: 1397
    var21
}



public func func1418(param1419 : Range<UInt64>) : Option<Option<UInt64>> { // block id: 1420
    try { // block id: 1422
        try { // block id: 1424
            if (var61) { var1362 } else { var1362 } 
        } finally { // block id: 1429
            if (true) { var1362 } else { var1362 } 
        };
        (UInt64(144), Option<Array<Range<UInt32>>>.None, var814, var1441, var1444)[1]
    } catch (_) { // block id: 1451
        if (false) { var1021 } else { Option<Array<Range<UInt32>>>.Some([(UInt32(88)&127..UInt32(25)&127:(-5)|1), (UInt32(47)&127..=UInt32(82)&127:(-20)|1), (UInt32(5)&127..UInt32(141)&127:(-71)|1), (UInt32(10)&127..UInt32(116)&127:(-87)|1), (UInt32(72)&127..UInt32(125)&127:70|1), (UInt32(43)&127..UInt32(219)&127:(-21)|1), (UInt32(80)&127..=UInt32(54)&127:2|1), (UInt32(205)&127..UInt32(169)&127:(-109)|1), (UInt32(127)&127..=UInt32(232)&127:(-2)|1), (UInt32(5)&127..=UInt32(93)&127:(-74)|1)]) } 
    } finally { // block id: 1457
        if (false) { Option<Int64>.None } else { Option<Int64>.Some(26) } ;
        if (var61) { var1021 } else { var1021 } 
    };
    var var1468 : ??UInt64 = ((UInt64(10)&127..=UInt64(213)&127:13|1) as Option<UInt64>);
    var1468
}



public func func1404<T0, T1>(param1405 : UInt32) : UInt64 where T0 <: Unit, T1 <: Array<Option<UInt64>> { // block id: 1406
    var var1476 : Array<Option<UInt64>> = [Option<UInt64>.None, Option<UInt64>.None, Option<UInt64>.Some(UInt64(UInt64(UInt16(39)))), Option<UInt64>.None, Option<UInt64>.None, Option<UInt64>.Some(UInt64(Int32(87))), Option<UInt64>.Some(UInt64(Int32(99))), ((Int32(UInt32(1)) as UInt64) as UInt64), ((UInt32(UInt16(30)) as Option<UInt64>) as UInt64), ((Int32(UInt8(44)), Int32(121), (), UInt32(81), 83) as UInt64)];
    func func1510(optionalParam1511 ! : ((Range<Int32>, Int16, Int8)) -> Array<Unit> = func375, namedParam1515 ! : Array<Bool>, namedParam1516 ! : (Int32, Int32, Unit, UInt32, Int64), optionalParam1517 ! : (Option<Int64>, Range<Int32>, UInt64, Unit) = (((Int32(74)&127..=Int32(-30)&127:(58|1)) as Int64), (Int32(-1)&127..Int32(58)&127:(Int64(Int16(87))|1)), UInt64(Int16(18)), ())) : UInt64 { // block id: 1532
        ((var1546 ?? Option<(Range<Int64>, Bool, Array<Bool>, Array<Bool>, UInt64, (Bool, Int32, Range<Int64>, Array<Range<Int32>>, (Range<Int32>, Int16, Int8), (Int32, Int32, Unit, UInt32, Int64)), UInt8, (Range<Int32>, Int16, Int8), Range<Int8>)>.Some(((72&127..(-43)&127:(6|1)), true, var487, [false, var814, true, var814, var814, true, false, var61, false, var1572], UInt64(86), (false, var204, var1579, var1582, var159, var1362), UInt8(77), ((var204&127..=Int32(62)&127:(var1344|1)), Int16(-38), Int8(-43)), var1641))) ?? var1644)[4]
    }
;
    var var1772 : Interface1139<Option<Array<Enum492>>, Range<Int32>, Range<UInt8>> = Class1136();
    ((((UInt64(178)&127..UInt64(236)&127:(-106)|1)|>func1418) ?? var1476[5]) ?? func1510(optionalParam1511 : func375, namedParam1515 : var1768, namedParam1516 : match (var1772) {
        case caseVar1776 => 
            var1779
        
        case _ => 
            ();
            (var204, Int32(82), (), UInt32(198), var36)
        
    }))
}



public func func1400(param1401 : Enum492) : Class1136 { // block id: 1402
    let var1797 : (UInt32) -> UInt64 = func1404<Unit, Array<Option<UInt64>>>;
    (Option<Array<UInt32>>.None ?? var1808)[2]|>var1797;
    if (var814) { (Option<Class1136>.Some(var1141) ?? if (var814) { Class1136() } else { var1141 } ) } else { var1141 } 
}


public func func1856(param1857 : String) : Enum492 { // block id: 1858
    let var1874 : ?Enum492 = Option<Enum492>.Some(Enum492.enumValue510(func375, Int8(UInt8(Int8(52)))));
    (try { // block id: 1865
        var1867;
        if (true) { Option<Enum492>.None } else { var1874 } 
    } finally { // block id: 1881
        Option<Enum492>.None
    } ?? var1180)
}


public func func1269(param1270 : UInt32) : Aggregate169 { // block id: 1271
    var var1386 : Array<Range<Int32>> = [(Int32(-88)&127..Int32(-16)&127:53|1), (Int32(-32)&127..Int32(126)&127:(-106)|1), (Int32(-4)&127..=Int32(110)&127:116|1), (Int32(-118)&127..=Int32(-80)&127:119|1), (Int32(-106)&127..Int32(-25)&127:(-8)|1), (Int32(-39)&127..Int32(-80)&127:(-124)|1), (Int32(-66)&127..=Int32(-26)&127:(-8)|1), (Int32(-22)&127..Int32(-77)&127:(-125)|1), (Int32(-55)&127..Int32(-45)&127:(-7)|1), (Int32(-61)&127..Int32(90)&127:46|1)];
    if (false) { try { // block id: 1277
        let var1309 : (Int32, Int32, Unit, UInt32, Int64) = (Int32(-12), Int32(UInt32(197)), (), UInt32(130), Int64(UInt32(UInt16(UInt8(121)))));
        var var1324 : Range<Int64> = (Int64(Int16(-28))&127..=Int64(61)&127:(Int64(UInt16(UInt16(Int8(30))))|1));
        var var1340 : Unit = ();
        if (var814) { (true, Int32(12), ((-19)&127..(-2)&127:(-73)|1), [var405, (var204&127..=var204&127:(72|1)), (Int32(59)&127..=var204&127:(var36|1)), (Int32(-33)&127..Int32(-22)&127:(-31)|1), var405, (Int32(57)&127..Int32(-8)&127:4|1), (Int32(-60)&127..=var204&127:(var36|1)), var732, (Int32(19)&127..=Int32(95)&127:((-89)|1)), var732], var159, var1309) } else { (var814, var204, var1324, [(Int32(101)&127..Int32(91)&127:(-2)|1), (Int32(-10)&127..Int32(6)&127:46|1), (Int32(69)&127..Int32(-23)&127:109|1), (Int32(-39)&127..Int32(121)&127:95|1), (Int32(-80)&127..Int32(-91)&127:51|1), (Int32(-96)&127..Int32(-126)&127:73|1), (Int32(98)&127..Int32(-9)&127:93|1), (Int32(-27)&127..=Int32(102)&127:53|1), (Int32(3)&127..Int32(82)&127:(-35)|1), (Int32(-50)&127..Int32(111)&127:4|1)], var159, (Int32(-18), var204, var1340, UInt32(111), var1344)) } 
    } catch (_) { // block id: 1348
        (var814, Int32(-23), ((-95)&127..=65&127:(var36|1)), [(Int32(4)&127..=Int32(-46)&127:(-128)|1), (Int32(84)&127..Int32(-78)&127:(-65)|1), (Int32(-125)&127..Int32(-85)&127:(-55)|1), (Int32(-55)&127..Int32(-16)&127:(-49)|1), (Int32(-8)&127..Int32(46)&127:123|1), (Int32(-24)&127..Int32(-71)&127:113|1), (Int32(-60)&127..Int32(-27)&127:9|1), (Int32(-4)&127..Int32(-25)&127:(-49)|1), (Int32(-31)&127..Int32(-84)&127:7|1), (Int32(-93)&127..Int32(-69)&127:(-10)|1)], (var732, Int16(37), var57), var1362)
    }[3] } else { (if (try { // block id: 1374
        Float32(12.0) >= Float32(95.0)
    } finally { // block id: 1378
        var1235 <<= ((var1382) & 7);
        var814
    }) { var1386 } else { var1386 } ) } ;
    let var1854 : (Enum492) -> Class1136 = func1400;
    try { // block id: 1886
        """
sH:}7
4^-;M
"""
    } finally { // block id: 1888
        "J&@pu^Qw}>"
    }|>(func1856~>(var1854~>func1395));
    (try { // block id: 1896
        var414 %= ((var414) | 1);
        Option<Aggregate169>.Some(Aggregate169())
    } finally { // block id: 1902
        var1904
    } ?? var173)
}

public func func1221() : Array<Bool> { // block id: 1222
    let var1258 : Option<Aggregate169> = ([(), (), (), (), (), (), (), (), (), ()] as Aggregate169);
    var var1908 : (UInt32) -> Aggregate169 = func1269;
    func1224((match (var1235) {
        case caseVar1240 => 
            var21;
            if (var61) { [var26, (), (), var26, (), var21, (), (), (), ()] } else { [(), (), (), (), (), (), (), (), (), ()] } ;
            var1258
        
        case _ => 
            if (true) { Option<Aggregate169>.None } else { Option<Aggregate169>.Some(var173) } 
        
    } ?? (UInt32(211)|>var1908)))
}

public func func1215(param1216 : Interface1139<Option<Array<Enum492>>, Range<Int32>, Range<UInt8>>) : Enum492 { // block id: 1217
    var loopTimeVar1914 : Int64 = 0;
    while ((func1221()[8]) && loopTimeVar1914 < 100 ) {
        loopTimeVar1914++;

    };
    var var2009 : ?UInt64 = Option<UInt64>.Some(UInt64(85));
    var var2013 : ?UInt64 = (###"Xbm.5rJ:}'"### as UInt64);
    let var2079 : Unit = ();
    if (var77 == Float32(-23.0)) { // block id: 1921
        var26;
        var26;
        var var1991 : Rune = '9';
        if (var1572) { var1927 } else { (var1991, [(Int32(113)&127..=Int32(-30)&127:30|1), (Int32(-21)&127..=Int32(82)&127:(-94)|1), (Int32(-17)&127..=Int32(-38)&127:(-81)|1), (Int32(90)&127..Int32(-118)&127:10|1), (Int32(28)&127..=Int32(-31)&127:116|1), (Int32(78)&127..=Int32(-80)&127:(-41)|1), (Int32(-107)&127..=Int32(5)&127:(-78)|1), (Int32(68)&127..=Int32(-103)&127:32|1), (Int32(104)&127..Int32(-14)&127:38|1), (Int32(-74)&127..Int32(-77)&127:38|1)], var57, var1180, var1579, [(), (), (), (), (), (), (), (), (), ()]) } 
    } else if (try { // block id: 1999
        var61
    } catch (_) { // block id: 2001
        false
    } finally { // block id: 2003
        var var2019 : UInt64 = UInt64(Int16(Int16(UInt16(249))));
        [Option<UInt64>.None, Option<UInt64>.Some(var414), var2009, var2013, var2009, Option<UInt64>.Some(var2019), var2013, var2009, var2009, var2013];
        var1572
    }) { // block id: 2029
        var21;
        let var2039 : ((Range<Int32>, Int16, Int8)) -> Array<Unit> = func375;
        (var2033, [(Int32(125)&127..Int32(25)&127:(-51)|1), (Int32(-56)&127..Int32(94)&127:16|1), (Int32(51)&127..Int32(-27)&127:(-1)|1), (Int32(89)&127..=Int32(-125)&127:28|1), (Int32(-126)&127..Int32(-115)&127:101|1), (Int32(97)&127..=Int32(-3)&127:58|1), (Int32(-49)&127..=Int32(-102)&127:(-21)|1), (Int32(10)&127..=Int32(100)&127:103|1), (Int32(112)&127..=Int32(104)&127:67|1), (Int32(10)&127..Int32(-3)&127:113|1)], var57, Enum492.enumValue510(var2039, Int8(-48)), ((-116)&127..111&127:(-45)|1), [(), var21, var26, var21, (), (), (), (), (), var21])
    } else { // block id: 2054
        var var2056 : ?Class1136 = Option<Class1136>.None;
        var2056;
        (var2033, [(Int32(-12)&127..Int32(-59)&127:61|1), (Int32(58)&127..=Int32(110)&127:24|1), (Int32(1)&127..Int32(51)&127:(-55)|1), (Int32(106)&127..=Int32(2)&127:(-81)|1), (Int32(107)&127..=Int32(-127)&127:112|1), (Int32(-110)&127..=Int32(-121)&127:101|1), (Int32(69)&127..=Int32(-80)&127:(-75)|1), (Int32(-111)&127..Int32(-90)&127:105|1), (Int32(-8)&127..=Int32(-103)&127:99|1), (Int32(66)&127..Int32(-89)&127:(-121)|1)], var57, var1180, ((-117)&127..=19&127:(54|1)), [(), (), var26, var2072, (), (), var21, var2072, var2079, ()])
    }[3]
}

public func func1166(param1167 : (Int32, Int16) -> Unit) : (Int32, Int32, Unit, UInt32, Int64) { // block id: 1171
    var var1202 : Range<Int64> = (Int64(Int64(UInt8(Int8(-82))))&127..Int64(Int16(48))&127:(67|1));
    match ([try { // block id: 1175
            (UInt16(191)&127..=UInt16(71)&127:(-55)|1);
            if (false) { var1180 } else { Enum492.enumValue535(Option<Option<Option<String>>>.Some(var1185), var1069) } 
        } finally { // block id: 1189
            ();
            Enum492.defaultValue
        }, var1180, (var1180, (Int32(-36)&127..=var204&127:(44|1)), var1202, var1089, 114.0)[0], (var2085|>func1215), var1180, try { // block id: 2089
            Class1136();
            if (false) { var1180 } else { var1180 } 
        } finally { // block id: 2095
            Enum492.enumValue510(func375, Int8(85))
        }, (Option<Enum492>.None ?? var1180), try { // block id: 2103
            var2072;
            Enum492.defaultValue
        } finally { // block id: 2106
            var var2109 : Float32 = Float32(29.0);
            var2109 = Float32(-13.0);
            ();
            Enum492.defaultValue
        }, Enum492.enumValue584(var173, var1641, [(Int32(-14)&127..Int32(-13)&127:52|1), var732, (Int32(-46)&127..var204&127:(10|1)), (var204&127..=Int32(-37)&127:(var1344|1)), var405, (var204&127..=Int32(66)&127:(var2133|1)), var732, var732, var732, var732]), var1180]) {
        case _ => 
            var2143;
            var1779
        
    }
}

public func func2147(param119 : Int32, namedParam120 : Int16) : Unit { // block id: 121

}

public func func1131(param1132 : Float64) : Bool { // block id: 1133
    var loopTimeVar2166 : Int64 = 0;
    do {
        loopTimeVar2166++;
        var26;
        if (false) { Option<Array<Range<UInt32>>>.Some(var1089) } else { var1021 } 
    } while ((var1141.func1144(namedParam1145 : Option<Int64>.None, namedParam1146 : var1021, namedParam1147 : [(UInt32(198)&127..UInt32(31)&127:97|1), (UInt32(181)&127..=UInt32(110)&127:25|1), (UInt32(236)&127..UInt32(31)&127:101|1), (UInt32(162)&127..UInt32(63)&127:(-55)|1), (UInt32(36)&127..=UInt32(194)&127:63|1), (UInt32(209)&127..=UInt32(130)&127:(-28)|1), (UInt32(162)&127..=UInt32(163)&127:(-86)|1), (UInt32(30)&127..=UInt32(122)&127:97|1), (UInt32(31)&127..=UInt32(221)&127:(-58)|1), (UInt32(121)&127..UInt32(86)&127:(-63)|1)])) && loopTimeVar2166 < 100 ) ;
    (Int64(var57) is Class1136)
}




public func func993(param994 : UInt32) : Option<Array<Range<UInt32>>> { // block id: 995
    if ((var2172|>func1131)) { // block id: 2175
        var21;
        if (var1572) { var159 } else { var159 } 
    } else { // block id: 2181
        (UInt16(74)&127..UInt16(53)&127:(-41)|1);
        ();
        if (var1572) { ((Int32(-113)&127..=Int32(-77)&127:(-54)|1), Int16(0), Int8(61)) } else { var159 } 
    }|>{ lambdaParameter1086 : (Range<Int32>, Int16, Int8) => var1089 };
    let var2202 : Option<Option<Array<Float64>>> = (Enum492.enumValue584(Aggregate169(), (Int8(-50)&127..=Int8(-18)&127:66|1), [(Int32(-66)&127..Int32(-83)&127:((-3)|1)), (Int32(-58)&127..Int32(-90)&127:(-126)|1), (Int32(122)&127..Int32(-128)&127:52|1), (Int32(97)&127..Int32(30)&127:((-8)|1)), (Int32(87)&127..=Int32(-103)&127:54|1), (Int32(92)&127..=Int32(-8)&127:(-88)|1), (Int32(92)&127..Int32(92)&127:(14|1)), (Int32(-62)&127..Int32(84)&127:(-127)|1), (Int32(-8)&127..=Int32(0)&127:(-39)|1), (Int32(14)&127..=Int32(124)&127:(125|1))]) as Option<Array<Float64>>);
    ((var2202 ?? if (var814) { Option<Array<Float64>>.Some(var1160) } else { Option<Array<Float64>>.None } ) ?? [(-92.0), 28.0, (-14.0), (-98.0), (-95.0), (-16.0), (-108.0), 56.0, 13.0, 125.0]);
    var var2258 : Option<Bool> = (Float32(103.0) as Bool);
    if ((match (Option<Option<Option<String>>>.None) {
        case caseVar2246 => 
            var1013;
            Option<Bool>.None
        
        case _ : Array<Float64> => 
            if (var61) { Option<Bool>.Some(true) } else { var2258 } 
        
        case _ => 
            Enum492.defaultValue;
            ();
            if (true) { var2258 } else { Option<Bool>.Some(var814) } 
        
    } ?? match (var1141) {
        case caseVar2274 : Option<(Range<Int32>, Int16, Int8)> => 
            ();
            true
        
        case _ : Array<Bool> => 
            let var2284 : ?Int64 = (UInt64(Int8(UInt8(Int8(-72)))) as Int64);
            if (var61) { var2284 } else { var2284 } ;
            var61
        
        case _ => 
            var26;
            true
        
        case _ => 
            var21;
            false
        
    })) { ((UInt64(20)&127..var414&127:(90|1)) as Array<Range<UInt32>>) } else { try { // block id: 2307
        var21;
        var1021
    } finally { // block id: 2310
        ();
        var2313;
        var1021
    } } 
}

public func func980(param981 : (String) -> Unit) : Range<UInt32> { // block id: 984
    ((var819|>func993) ?? (Option<Array<Range<UInt32>>>.None ?? var1089))[9]
}

public func func2325(param115 : String) : Unit { // block id: 116
    func118(try { // block id: 123
        Int8(58);
        ();
        Int32(76)
    } catch (_) { // block id: 127
        var var130 : UInt32 = UInt32(11);
        var130 **= (var130 & 3);
        Int32(114)
    } finally { // block id: 134
        Int32(-58) & Int32(58);
        var var140 : UInt16 = UInt16(UInt8(UInt8(Int8(Int8(51)))));
        var140++;
        let var147 : Int32 = Int32(Int16(-75));
        var147
    }, namedParam120 : (Option<(Range<Int32>, Int16, Int8)>.None ?? var159)[1]);
    var loopTimeVar185 : Int64 = 0;
    while ((var173.var176) && loopTimeVar185 < 100 ) {
        loopTimeVar185++;
        var loopTimeVar183 : Int64 = 0;
        while ((true) && loopTimeVar183 < 100 ) {
            loopTimeVar183++;

        }
    }
}

public func func974(param975 : (Range<Int32>, Int16, Int8)) : Option<(Range<Int32>, Int16, Int8)> { // block id: 976
    let var2323 : ((String) -> Unit) -> Range<UInt32> = func980;
    var var2328 : (String) -> Unit = func2325;
    let var2381 : Array<Option<UInt64>> = [Option<UInt64>.Some(UInt64(23)), Option<UInt64>.None, Option<UInt64>.None, ((false, Int32(-96), ((-87)&127..=111&127:(-57)|1), [(Int32(-92)&127..=Int32(92)&127:(-112)|1), (Int32(118)&127..Int32(121)&127:(-36)|1), (Int32(-17)&127..=Int32(0)&127:124|1), (Int32(4)&127..=Int32(115)&127:98|1), (Int32(14)&127..=Int32(92)&127:68|1), (Int32(81)&127..=Int32(87)&127:(-29)|1), (Int32(-1)&127..=Int32(125)&127:(-125)|1), (Int32(-86)&127..=Int32(82)&127:(-17)|1), (Int32(27)&127..=Int32(87)&127:(-6)|1), (Int32(-30)&127..=Int32(24)&127:(-65)|1)], ((Int32(23)&127..=Int32(76)&127:13|1), Int16(27), Int8(18)), (Int32(32), Int32(-83), (), UInt32(121), 119)) as UInt64), Option<UInt64>.None, (Enum492.enumValue510(func375, Int8(39)) as UInt64), (Class1136() as UInt64), Option<UInt64>.None, Option<UInt64>.Some(UInt64(Int16(Int8(124)))), Option<UInt64>.None];
    try { // block id: 978
        var2328|>var2323;
        var var2347 : ?(Range<Int32>, Int16, Int8) = Option<(Range<Int32>, Int16, Int8)>.Some(((Int32(108)&127..Int32(126)&127:92|1), Int16(77), Int8(5)));
        match ((UInt16(4)&127..UInt16(222)&127:99|1)) {
            case _ => 
                var2313;
                Option<(Range<Int32>, Int16, Int8)>.Some(((Int32(47)&127..=Int32(-45)&127:(-99)|1), Int16(29), var57))
            
            case _ => 
                Option<Int64>.None;
                var848;
                var2347
            
            case _ => 
                ();
                ();
                if (var814) { Option<(Range<Int32>, Int16, Int8)>.None } else { var2347 } 
            
            case _ : (Array<Enum492>, Float32, Range<Int32>, Int16, Array<Bool>) => 
                Float32(125.0) + var77;
                ();
                if (true) { Option<(Range<Int32>, Int16, Int8)>.None } else { var2347 } 
            
            case _ => 
                var2376;
                var2381;
                var2347
            
        }
    } catch (e: Exception) { // block id: 2417
        try { // block id: 2419
            let var2424 : ((Range<Int32>, Int16, Int8)) -> Array<Unit> = func375;
            if (var814) { Enum492.enumValue510(var2424, var57) } else { var1180 } 
        } finally { // block id: 2428
            var2430;
            Enum492.enumValue584(var2434, var2437, var1582)
        };
        var2441
    }
}

public func func793(param794 : Range<Int16>) : Option<(Range<Int32>, Int16, Int8)> { // block id: 795
    var var806 : Range<Int64> = ((-15)&127..108&127:17|1);
    let var865 : Unit = ();
    if (try { // block id: 798
        UInt64(103) != UInt64(166)
    } finally { // block id: 802
        if (var61) { var806 } else { ((-90)&127..=(-110)&127:((-50)|1)) } ;
        var26;
        var814
    }) { // block id: 816
        var819 > UInt32(20);
        try { // block id: 827
            (UInt64(222)&127..UInt64(11)&127:(-54)|1);
            if (false) { ((Int32(-62)&127..Int32(-3)&127:(-2)|1), Int16(-14), Int8(81)) } else { ((Int32(-78)&127..=Int32(34)&127:(-38)|1), Int16(79), var57) } ;
            let var840 : (Array<Unit>, Bool, Int64) = ([(), (), (), (), (), (), (), (), (), ()], false, 10);
            var840
        } catch (_) { // block id: 845
            var848 <<= ((UInt32(81)) & 7);
            ([(), var26, (), var26, (), (), var26, var865, (), ()], true, var36)
        };
        (Option<(Array<Unit>, Bool, Int64)>.None ?? ([(), (), (), (), (), (), (), (), (), ()], var61, var36))
    } else { // block id: 881
        match (Enum492.enumValue584(var173, (Int8(-49)&127..Int8(8)&127:(90|1)), [var405, (Int32(90)&127..=Int32(-61)&127:57|1), var405, var732, var732, (Int32(-32)&127..Int32(-3)&127:123|1), var405, (Int32(20)&127..var204&127:(var36|1)), (Int32(59)&127..=var204&127:((-82)|1)), (Int32(-96)&127..=Int32(-48)&127:92|1)])) {
            case enumValue584(_, _, _) => 
                var345 -= Int16(-60);
                [var814, false, false, var814, var814, false, true, false, true, var61];
                (Int16(-47)&127..var214&127:(0|1))
            
            case enumValue510(caseVar929, caseVar930 : Range<UInt32>) => 
                (var934&127..var214&127:(var36|1))
            
            case _ => 
                (27&127..(-100)&127:((-94)|1));
                if (false) { param794 } else { (var345&127..var934&127:(var36|1)) } 
            
        };
        var var957 : ?(Range<Int32>, Int16, Int8) = (60.0 as (Range<Int32>, Int16, Int8));
        match (var957) {
            case _ => 
                124.0;
                if (true) { (var435, false, 21) } else { (var435, false, 113) } 
            
        }
    };
    var var2445 : ((Range<Int32>, Int16, Int8)) -> Option<(Range<Int32>, Int16, Int8)> = func974;
    match (if (var1572) { var2033 } else { 'Z' } ) {
        case '4' | 't' => 
            'M';
            ((Int32(49)&127..=Int32(10)&127:(-113)|1), var214, Int8(-73))
        
        case _ : (Range<Int32>, Int16, Int8) => 
            (var934&127..=var214&127:(var2133|1));
            var865;
            ((Int32(27)&127..var204&127:((-59)|1)), Int16(59), Int8(-62))
        
        case 'C' | 'Q' | 'r' => 
            var21;
            var159
        
        case 'd' | 'X' | '5' | '7' => 
            var865;
            if (true) { var159 } else { var159 } 
        
        case _ => 
            if (var814) { [var61, var814, false, false, false, true, true, true, true, false] } else { [false, false, true, true, true, true, true, true, false, false] } ;
            ((var204&127..Int32(70)&127:(var36|1)), Int16(20), Int8(-69))
        
    }|>var2445
}

func func758(param759 : (Option<Int64>, Range<Int32>, UInt64, Unit)) : Int32 { // block id: 760
    func func762(optionalParam763 ! : Array<Bool> = [((Int8(98)&127..=Int8(8)&127:12|1) is (Array<Enum492>, Float32, Range<Int32>, Int16, Array<Bool>)), true, ((UInt16(98)&127..UInt16(Int16(77))&127:(Int64(UInt16(33))|1)) is Enum492), true, ((UInt32(0)&127..UInt32(1)&127:31|1) is UInt64), true, true, true, false, (Option<Option<Int64>>.Some(([true, true, false, true, true, false, false, true, true, false] as Int64)) is Range<UInt32>)], optionalParam786 ! : Bool = (() is Bool), optionalParam789 ! : Aggregate169 = Aggregate169()) : Option<(Range<Int32>, Int16, Int8)> { // block id: 791
        var var2512 : (Range<Int16>) -> Option<(Range<Int32>, Int16, Int8)> = func793;
        try { // block id: 2515
            var var2518 : Int64 = 66;
            var2518 ^= var36;
            var2072;
            (Int16(79)&127..var934&127:(var2526|1))
        } catch (e: Exception) { // block id: 2528
            ();
            (Int16(-35)&127..=Int16(-72)&127:104|1)
        } finally { // block id: 2531
            var26;
            var26;
            if (false) { (Int16(-78)&127..=Int16(-63)&127:(-68)|1) } else { (Int16(5)&127..=var214&127:(var2526|1)) } 
        }|>var2512
    }
;
    func762();
    var loopTimeVar2615 : Int64 = 0;
    do {
        loopTimeVar2615++;
        var var2606 : Float64 = Float64(Float32(Float32(31.0)));
        if (var814) { Option<Option<Array<Float64>>>.Some(Option<Array<Float64>>.Some([(-28.0), 106.0, (-39.0), var2172, var2172, var2172, (-91.0), (-98.0), 18.0, var2606])) } else { var2611 } 
    } while ((match (if (var814) { // block id: 2545
            ();
            var2526 *= (-83);
            param759
        } else { // block id: 2551
            if (var61) { var1867 } else { Option<(Range<Int64>, Bool, Array<Bool>, Array<Bool>, UInt64, (Bool, Int32, Range<Int64>, Array<Range<Int32>>, (Range<Int32>, Int16, Int8), (Int32, Int32, Unit, UInt32, Int64)), UInt8, (Range<Int32>, Int16, Int8), Range<Int8>)>.None } ;
            var21;
            (Option<Int64>.None, (Int32(24)&127..Int32(-113)&127:(-87)|1), var414, var26)
        }) {
        case _ : Option<Option<Option<String>>> => 
            if (true) { var2568 } else { var2574 } ;
            Int32(67) < var204
        
        case _ : Option<Option<String>> => 
            true
        
        case _ => 
            ();
            var1572
        
    }) && loopTimeVar2615 < 100 ) ;
    Int32(var819)
}


public func func754(param755 : Option<(Range<Int32>, Int16, Int8)>) : Option<Int64> { // block id: 756
    (try { // block id: 2625
        var2627
    } catch (_) { // block id: 2630
        Option<(Option<Int64>, Range<Int32>, UInt64, Unit)>.None
    } ?? if (var1572) { // block id: 2634
        var57;
        var2637
    } else if (false) { // block id: 2644
        var2526 -= var1344;
        var var2652 : ?Int64 = ([UInt32(127), UInt32(116), UInt32(101), UInt32(169), UInt32(170), UInt32(229), UInt32(203), UInt32(181), UInt32(186), UInt32(51)] as Int64);
        if (false) { (var2652, (var204&127..var204&127:(var2659|1)), UInt64(7), var26) } else { var2637 } 
    } else { // block id: 2665
        if (false) { (UInt16(28)&127..UInt16(25)&127:(-15)|1) } else { (UInt16(3)&127..UInt16(92)&127:0|1) } ;
        if (true) { var2637 } else { var2637 } 
    })|>func758;
    ();
    let var2695 : ?Int64 = ([(-15.0), 34.0, 41.0, (-40.0), (-50.0), (-109.0), Float64(Float32(75.0)), 57.0, Float64(Float32(50.0)), Float64(Float64(Float32(122.0)))] as Int64);
    match (var2033) {
        case _ => 
            var2681;
            ();
            if (var61) { Option<Int64>.Some(var36) } else { var2695 } 
        
        case 'J' | 'V' | '9' | 't' => 
            var2695
        
        case caseVar2718 => 
            var1160;
            Option<Int64>.Some(var1344)
        
        case _ => 
            var57 >>= ((Int8(-37)) & 7);
            var345 += Int16(-62);
            var2695
        
    }
}


public func func748(param749 : (UInt32) -> Array<Unit>) : Array<Unit> { // block id: 752
    let var2733 : (Option<(Range<Int32>, Int16, Int8)>) -> Option<Int64> = func754;
    Option<(Range<Int32>, Int16, Int8)>.Some(var159)|>var2733;
    let var2745 : ?Unit = Option<Unit>.Some(());
    try { // block id: 2738
        var2745.getOrThrow();
        let var2749 : UInt8 = UInt8(42);
        var2749;
        if (false) { [(), (), (), (), (), (), (), (), (), ()] } else { [(), var21, (), (), (), (), var2072, (), var2313, ()] } 
    } finally { // block id: 2765
        [(), (), var21, var2072, (), var2072, (), var2072, (), ()]
    }
}

public func func1418(param300 : UInt32) : Array<Unit> { // block id: 301
    var var329 : ?String = Option<String>.None;
    let var337 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    match (((Option<Option<Option<String>>>.Some(var315) ?? var315) ?? (Option<Option<String>>.Some(var329) ?? var329))) {
        case caseVar334 => 
            var337
        
        case caseVar341 : UInt64 => 
            var345 **= (var345 & 3);
            (UInt32(150)&127..=UInt32(245)&127:33|1);
            [(), var21, (), (), (), (), var26, var21, (), var26]
        
        case caseVar362 => 
            var var367 : Range<Int64> = (69&127..=56&127:(-10)|1);
            if (true) { var367 } else { (72&127..=(-104)&127:(-119)|1) } ;
            [(), (), (), (), (), (), (), (), (), ()]
        
        case _ => 
            [(), (), (), (), (), (), (), (), (), ()]
        
    };
    let var704 : Int16 = Int16(-73);
    match (func495()) {
        case _ : UInt32 => 
            UInt32(161);
            var214 + Int16(87);
            if (var61) { ((Int32(116)&127..Int32(-13)&127:(-23)|1), Int16(124), Int8(-54)) } else { ((var204&127..=var204&127:(65|1)), var704, Int8(124)) } 
        
        case enumValue510(caseVar709, caseVar710) => 
            ();
            var715--;
            ((var204&127..var204&127:((-31)|1)), var214, caseVar710)
        
        case _ => 
            if (false) { (var732, var704, var57) } else { ((Int32(-1)&127..Int32(108)&127:(-118)|1), Int16(-7), Int8(29)) } 
        
    }|>func375
}



public func func2780(param2781 : UInt32) : (UInt32) -> Array<Unit> { // block id: 2782
    let var2837 : ?Array<Enum492> = ([(-108.0), 79.0, (-82.0), (-95.0), 35.0, 15.0, (-21.0), (-108.0), (-9.0), (-68.0)] as Array<Enum492>);
    var var2916 : Range<Int8> = (Int8(-73)&127..=Int8(-79)&127:(-86)|1);
    ((match ((Int32(-91), Int32(86), var2072, var848, 59)) {
        case caseVar2802 : UInt8 => 
            ();
            var21;
            Option<Option<Array<Enum492>>>.None
        
        case _ => 
            var2811
        
        case (_,_,_ : Option<Aggregate169>,caseVar2815 : Option<Array<Enum492>>,caseVar2816) => 
            (var414&127..var414&127:(0|1));
            if (true) { var1180 } else { var1180 } ;
            if (true) { var2811 } else { var2811 } 
        
        case (_ : Option<Aggregate169>,_ : Rune,_,_,caseVar2832 : Option<(Array<Unit>, Bool, Int64)>) => 
            ();
            Option<Option<Array<Enum492>>>.Some(var2837)
        
        case _ => 
            Option<(Range<Int64>, Bool, Array<Bool>, Array<Bool>, UInt64, (Bool, Int32, Range<Int64>, Array<Range<Int32>>, (Range<Int32>, Int16, Int8), (Int32, Int32, Unit, UInt32, Int64)), UInt8, (Range<Int32>, Int16, Int8), Range<Int8>)>.None;
            var21;
            Option<Option<Array<Enum492>>>.None
        
    } ?? (var2811 ?? Option<Array<Enum492>>.None)) ?? match (try { // block id: 2850
            ();
            (-96)
        } catch (e: Exception) { // block id: 2853
            ();
            var2072;
            110
        } finally { // block id: 2857
            (-93) / ((var2133) | 1)
        }) {
        case -80 | -96 => 
            var var2910 : ???String = Option<Option<Option<String>>>.None;
            [Enum492.enumValue584(Aggregate169(), (Int8(24)&127..=Int8(-15)&127:(-30)|1), [(Int32(-25)&127..Int32(-106)&127:(-3)|1), (Int32(-110)&127..=Int32(126)&127:21|1), (Int32(-20)&127..Int32(89)&127:(-112)|1), (Int32(57)&127..Int32(41)&127:14|1), (Int32(-89)&127..Int32(-56)&127:(-86)|1), (Int32(-94)&127..=Int32(57)&127:(-73)|1), (Int32(-83)&127..=Int32(-120)&127:(-95)|1), (Int32(-61)&127..Int32(95)&127:84|1), (Int32(45)&127..=Int32(121)&127:65|1), (Int32(97)&127..Int32(75)&127:(-27)|1)]), var1180, Enum492.enumValue584(var2434, var1641, var2874), var1180, Enum492.defaultValue, Enum492.enumValue535(var2910, var1235), Enum492.enumValue584(Aggregate169(), var2916, [(Int32(-45)&127..=Int32(-24)&127:63|1), (Int32(86)&127..Int32(16)&127:(-6)|1), (Int32(-45)&127..Int32(-70)&127:(-109)|1), (Int32(-67)&127..Int32(52)&127:97|1), (Int32(37)&127..=Int32(79)&127:35|1), (Int32(10)&127..=Int32(16)&127:99|1), (Int32(-22)&127..=Int32(3)&127:103|1), (Int32(73)&127..Int32(16)&127:(-24)|1), (Int32(14)&127..=Int32(16)&127:(-63)|1), (Int32(-58)&127..Int32(105)&127:120|1)]), Enum492.defaultValue, Enum492.enumValue535(var2910, UInt16(11)), Enum492.enumValue535(var2910, var2926)]
        
        case _ => 
            ();
            var2932;
            var2945
        
    });
    var var2958 : (UInt32) -> Array<Unit> = func1418;
    var2958
}



public func func287(namedParam288 ! : (String) -> Unit) : Option<Option<Int64>> { // block id: 291
    try { // block id: 293
        let var3033 : String = "s~9ak4G4J3";
        let var3091 : Bool = false;
        func func295<T0, T1, T2>() : Array<Bool> where T0 <: Range<Int32>, T1 <: Option<Aggregate169>, T2 <: Range<Int32> { // block id: 296
            let var2967 : ?UInt32 = Option<UInt32>.None;
            (var2967.getOrThrow()|>(func2780~>func748))[5];
            var var3053 : Bool = false;
            var var3077 : Bool = false;
            if (match ([var1441, (UInt32(254)&127..=UInt32(141)&127:77|1), (UInt32(88)&127..UInt32(110)&127:82|1), var1441, var1441, var1441, (UInt32(21)&127..=UInt32(159)&127:44|1), (UInt32(243)&127..UInt32(204)&127:15|1), var1441, (var848&127..=UInt32(57)&127:(var1344|1))]) {
                case caseVar2988 : Option<String> => 
                    var2033;
                    true
                
                case _ : UInt64 => 
                    var2085;
                    var414 **= (UInt64(62) & 3);
                    let var3002 : UInt8 = UInt8(UInt8(35));
                    UInt8(231) >= var3002
                
                case caseVar3007 => 
                    var1582;
                    var21;
                    false
                
                case _ => 
                    var2072;
                    var414 >= var414
                
            }) { var1768 } else { (Option<Array<Bool>>.None ?? match (Option<Array<UInt32>>.None) {
                case caseVar3029 : Array<Float64> => 
                    ();
                    var3033;
                    var1768
                
                case _ : UInt8 => 
                    if (var61) { var1768 } else { [var814, false, true, false, false, true, true, true, var1572, var3053] } 
                
                case caseVar3057 => 
                    var487
                
                case _ => 
                    if (var61) { [false, false, false, false, true, true, true, true, true, false] } else { [false, var814, var814, var814, false, true, var814, var1572, var1572, var3077] } 
                
                case _ => 
                    ();
                    if (true) { var3085 } else { [var3053, var61, var3091, false, true, true, true, true, var814, true] } 
                
            }) } 
        }
;
        func295<Range<Int32>, Option<Aggregate169>, Range<Int32>>();
        (var345 as Option<Int64>)
    } finally { // block id: 3102
        try { // block id: 3104
            if (var1572) { Option<Option<Int64>>.None } else { Option<Option<Int64>>.None } 
        } catch (_) { // block id: 3109
            UInt32(64);
            if (true) { Option<Option<UInt64>>.None } else { Option<Option<UInt64>>.None } ;
            if (true) { Option<Option<Int64>>.Some(Option<Int64>.Some((-91))) } else { Option<Option<Int64>>.Some(Option<Int64>.None) } 
        } finally { // block id: 3122
            Option<UInt64>.Some(var414);
            if (true) { Option<Option<Int64>>.None } else { var278 } 
        }
    }
}

public func func228(param229 : Float64) : String { // block id: 230
    let var240 : Array<Bool> = [(UInt8(27) is Range<UInt8>), true, (Aggregate169() is (String) -> Unit), (([(), (), (), (), (), (), (), (), (), ()], (([(), (), (), (), (), (), (), (), (), ()], true, (-50)) is Int8), (-42)) is Range<UInt16>), (Int64(Int64((-59))) is UInt16), false, ((Int16(26)&127..=Int16(100)&127:44|1) is Array<Bool>), false, false, true];
    let var3139 : ?Class1136 = (Int8(-100) as Class1136);
    var var3154 : ?Int64 = Option<Int64>.Some(Int64(UInt16(UInt8(179))));
    (if (var240[3]) { var278 } else { func287(namedParam288 : func114) }  ?? if (match (Option<Option<Option<String>>>.None) {
        case caseVar3135 : Rune => 
            var2376;
            var3139;
            true
        
        case _ => 
            var36 << (((-90)) & 7);
            false
        
    }) { (var3151 as Int64) } else { var3154 } );
    let var3168 : Bool = true;
    var loopTimeVar3190 : Range<UInt64> = (UInt64(Int8(98))&127..=UInt64(UInt32(Int8(Int8(-3))))&127:(97|1));
    for (i in loopTimeVar3190 where match {
        case (var1644 is Option<(Option<Int64>, Range<Int32>, UInt64, Unit)>) => 
        var21;
        var61
        case if (var3168) { // block id: 3170
        true
    } else { // block id: 3172
        var3168
    } => 
        if (false) { var1867 } else { var1867 } ;
        var3180;
        false
        case _ => 
        var3139;
        var2313;
        var61
    }) {
        "wuo^K]&',2";
        (UInt32(191)&127..=UInt32(157)&127:(-79)|1)
    };
    """
LvB$a{
$F.h~
"""
}

public func func94(param95 : UInt64, optionalParam96 ! : Unit = (), optionalParam98 ! : Range<UInt32> = (UInt32(Int8(UInt8(UInt8(171))))&127..=UInt32(93)&127:(Int64(UInt16(15))|1))) : UInt8 { // block id: 107
    let var3201 : (Float64) -> String = func228;
    func func109(namedParam110 ! : String) : Unit { // block id: 111
        var26;
        let var187 : (String) -> Unit = func114;
        (match (Option<String>.Some(###"vHT_cj!&Ti"###)) {
            case caseVar199 : (Range<Int32>, Int16, Int8) => 
                Int32(3) - var204;
                Option<String>.Some("Vze<eq~hGF")
            
            case _ => 
                var214 ** (Int16(101) & 3);
                if (var61) { Option<String>.Some(namedParam110) } else { Option<String>.Some("""
x1tzh
=a]&r
""") } 
            
        } ?? (var2172|>var3201))|>var187
    }
;
    func109(namedParam110 : try { // block id: 3205
        var1021;
        var3208
    } finally { // block id: 3210
        var var3213 : UInt8 = UInt8(194);
        var3213 /= ((var3213) | 1);
        Int16(34);
        var3208
    });
    Float32(if ((true is (UInt32) -> Array<Unit>)) { // block id: 3222
        (var1572, Int32(114), var1579, [var405, var732, (Int32(78)&127..=Int32(102)&127:(61|1)), (var204&127..=var204&127:(90|1)), (var204&127..=Int32(2)&127:((-114)|1)), (var204&127..var204&127:(54|1)), (Int32(43)&127..=Int32(43)&127:12|1), (var204&127..var204&127:(var36|1)), (Int32(93)&127..=Int32(-43)&127:(-53)|1), var732], ((Int32(-68)&127..=Int32(-69)&127:(-55)|1), var934, Int8(65)), var1779);
        Float32(-61.0)
    } else { // block id: 3259
        var204--;
        Float32(125.0)
    });
    var var3295 : UInt8 = UInt8(UInt8(210));
    match ([true, false, false, false, false, true, false, true, false, false]) {
        case _ : (Rune, Array<Range<Int32>>, Int8, Enum492, Range<Int64>, Array<Unit>) => 
            var21;
            UInt8(160) / ((UInt8(33)) | 1)
        
        case _ => 
            if (false) { var3278 } else { Option<Class1136>.Some(Class1136()) } ;
            let var3284 : UInt8 = UInt8(151);
            var3284 >> ((UInt8(134)) & 7)
        
        case caseVar3289 : Option<Option<(Range<Int64>, Bool, Array<Bool>, Array<Bool>, UInt64, (Bool, Int32, Range<Int64>, Array<Range<Int32>>, (Range<Int32>, Int16, Int8), (Int32, Int32, Unit, UInt32, Int64)), UInt8, (Range<Int32>, Int16, Int8), Range<Int8>)>> => 
            UInt8(183)
        
        case _ => 
            var3295
        
    }
}

public func func46(param47 : String, optionalParam48 ! : Unit = (), namedParam50 ! : Range<Int32>, namedParam51 ! : (Array<Unit>, Bool, Int64)) : Option<Int64> { // block id: 52
    var var71 : UInt32 = UInt32(UInt16(Int8(0)));
    let var3341 : Bool = (Option<(Range<Int32>, Int16, Int8)>.Some(((Int32(34)&127..=Int32(-69)&127:(13|1)), Int16(Int8(117)), Int8(UInt8(123)))) is (UInt32) -> Aggregate169);
    func func82(namedParam83 ! : Range<Int64>, namedParam84 ! : Int16, namedParam85 ! : Float64, namedParam86 ! : UInt8) : Rune { // block id: 87
        [(Int32(12)&127..Int32(93)&127:36|1), (Int32(-4)&127..Int32(1)&127:106|1), (Int32(-68)&127..Int32(-91)&127:(-69)|1), (Int32(25)&127..Int32(-95)&127:98|1), (Int32(92)&127..Int32(-119)&127:(-20)|1), (Int32(96)&127..=Int32(61)&127:(-118)|1), (Int32(10)&127..Int32(18)&127:8|1), (Int32(-26)&127..Int32(-95)&127:(-100)|1), (Int32(82)&127..Int32(-71)&127:(-22)|1), (Int32(42)&127..Int32(51)&127:97|1)][4];
        func94(UInt64(Int32(-48))) - match ((var1546 ?? var1867)) {
            case caseVar3306 : Range<UInt16> => 
                ();
                optionalParam48;
                namedParam86
            
            case _ => 
                UInt8(205) ^ namedParam86
            
        };
        if (if (true) { // block id: 3319
            if (false) { [(var819&127..=UInt32(166)&127:(5|1)), (UInt32(31)&127..=UInt32(98)&127:89|1), (UInt32(168)&127..UInt32(223)&127:11|1), var1441, var1441, (UInt32(197)&127..UInt32(122)&127:(-41)|1), (UInt32(165)&127..=UInt32(160)&127:39|1), (UInt32(201)&127..=UInt32(236)&127:(-49)|1), var1441, var1441] } else { var1089 } ;
            var814
        } else if (false) { // block id: 3339
            var3341
        } else { // block id: 3353
            !var3341
        }) { var2033 } else { 'q' } 
    }
;
    var loopTimeVar3376 : Int64 = 0;
    do {
        loopTimeVar3376++;
        func82(namedParam83 : ((-61)&127..10&127:(-127)|1), namedParam84 : var934, namedParam85 : 55.0, namedParam86 : UInt8(116));
        var loopTimeVar3365 : Range<UInt64> = (UInt64(Int8(-96))&127..=UInt64(UInt16(76))&127:(Int64(Int64(UInt32(UInt16(121))))|1));
        for (i in loopTimeVar3365 where true) {

        }
    } while ((try { // block id: 55
        var57;
        var61
    } catch (e: Exception) { // block id: 64
        true
    } finally { // block id: 66
        22.0 * (-37.0);
        var71;
        var77 > Float32(-117.0)
    }) && loopTimeVar3376 < 100 ) ;
    var var3378 : ?Int64 = (Class1136() as Int64);
    var3378
}

main(): Int64 {
    try {
        ([var21, var21, (), var26, var26, var21, (), (), (), ()], true, var36)[0][8];
        (func46(###"7Sxj\\7V?WF"###, namedParam50 : (Int32(22)&127..Int32(-81)&127:(var36|1)), namedParam51 : ([(), (), (), (), (), (), (), (), (), ()], false, var2526)) ?? try { // block id: 3391
            60
        } finally { // block id: 3393
            var2133
        })
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var36*var36), 64)
        crccheck.updateBuffer(UInt64(var57*var57), 64)
        crccheck.updateBuffer(UInt64(var934*var934), 64)
        crccheck.updateBuffer(UInt64(var1069*var1069), 64)
        crccheck.updateBuffer(UInt64(var1344*var1344), 64)
        crccheck.updateBuffer(UInt64(var2926*var2926), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Enum492 {

}

extend Aggregate169 {

}
// ASSERT: scan parse_expected_operator_or_end
// ASSERT: scan parse_expected_right_delimiter
// ASSERT: scan parse_illegal_modifier_in_scope
// ASSERT: scan parse_unexpected_declaration_in_scope
// ASSERT: scan parse_expected_left_brace
// ASSERT: scan parse_expected_case
// ASSERT: scan parse_expected_expr_or_decl_in
// ASSERT: scan parse_expected_catch_or_finally_in_try


