/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC-PIPE: %run %run_opt %output %run_args

let var_1678795781185_90 : (Range<Int64>, UInt8, (Range<Int8>, Option<Int64>, UInt32, Int32, Range<UInt64>, Range<Int16>), Range<Int32>, Range<Int8>, Range<UInt32>) = ((((-69)&127)..=(103&127):(116|1)), UInt8(142), (((Int8(-92)&127)..(Int8(124)&127):((Int64(UInt16(87))|1))), Option<Int64>.None, UInt32(250), Int32(-116), ((UInt64(UInt8(179))&127)..(UInt64(UInt16(130))&127):((30|1))), ((Int16(-125)&127)..(Int16(-35)&127):(31|1))), ((Int32(100)&127)..(Int32(-13)&127):(41|1)), ((Int8(-120)&127)..=(Int8(UInt8(3))&127):((Int64(Int16(-1))|1))), ((UInt32(UInt16(106))&127)..(UInt32(UInt16(Int16(-85)))&127):(((-93)|1))))
public let var_1678795781185_129 : Bool = (((2&127)..(50&127):((-78)|1)) is Range<Int64>)
let var_1678795781185_133 : Unit = ()
public let var_1678795781185_144 : ?Int64 = ((UInt64(Int64(UInt64(194))) as Int64) as Int64)
public var var_1678795781185_164 : String = """
43X5t
K6l^r
"""
var var_1678795781185_194 : Int32 = Int32(-69)
public let var_1678795781185_217 : Int16 = Int16(Int16(-89))
public var var_1678795781185_222 : Int64 = Int64(Int32(-15))
public let var_1678795781185_227 : Bool = false
public let var_1678795781185_287 : UInt8 = UInt8(251)
let var_1678795781185_303 : Int8 = Int8(UInt8(UInt8(202)))
public var var_1678795781185_493 : UInt8 = UInt8(75)
public var var_1678795781185_519 : (UInt16, Range<UInt32>, Float32, Rune, UInt64) = (UInt16(Int8(Int8(6))), ((UInt32(UInt8(4))&127)..(UInt32(10)&127):(((-55)|1))), Float32(-33.0), r'4', UInt64(146))
public var var_1678795781185_569 : ?UInt64 = ((((UInt16(247), ((UInt32(254)&127)..(UInt32(244)&127):(19|1)), Float32(43.0), r'h', UInt64(168)) is (Range<Int8>, Option<Int64>, UInt32, Int32, Range<UInt64>, Range<Int16>)) is Range<UInt16>) as UInt64)
public var var_1678795781185_580 : UInt64 = UInt64(UInt8(202))
var var_1678795781185_624 : UInt32 = UInt32(UInt32(250))
var var_1678795781185_629 : Option<Int8> = Option<Int8>.None

public struct Struct_1678795781185_271<T0> {
    init() { // block id: 273

    }

}


public func func_1678795781185_457<T0>(param_1678795781185_458 : Unit, param_1678795781185_459 : Option<Int64>, param_1678795781185_460 : Range<Int32>, optionalParam_1678795781185_461 ! : Int32 = Int32(UInt32(Int8(124)))) : Int8 { // block id: 465
    try { // block id: 467
        Int8(-66) ^ var_1678795781185_303
    } catch (_) { // block id: 471
        (Option<Int8>.None ?? Int8(-112))
    }
}

func func_1678795781185_267<T0, T1>(param_1678795781185_268 : Int8) : UInt64 { // block id: 269
    Struct_1678795781185_271<Array<Option<Int64>>>.func_1678795781185_276(try { // block id: 280
        ((UInt8(233)&127)..=(UInt8(18)&127):((-99)|1))
    } catch (e: Exception) { // block id: 282
        if (true) { ((var_1678795781185_287&127)..(UInt8(145)&127):((var_1678795781185_222|1))) } else { ((UInt8(195)&127)..(var_1678795781185_287&127):((var_1678795781185_222|1))) } 
    } finally { // block id: 295
        let var_1678795781185_299 : Int8 = Int8(UInt8(196));
        let var_1678795781185_311 : Int8 = Int8(Int8(125));
        [Int8(-1), var_1678795781185_299, var_1678795781185_303, var_1678795781185_303, var_1678795781185_299, Int8(-60), var_1678795781185_311, Int8(-68), Int8(-37), Int8(29)];
        [true, false, true, false, true, true, true, false, true, false];
        if (false) { ((UInt8(116)&127)..=(UInt8(95)&127):(70|1)) } else { ((UInt8(179)&127)..(UInt8(155)&127):((-72)|1)) } 
    });
    let var_1678795781185_348 : Unit = ();
    var var_1678795781185_352 : Int8 = Int8(-46);
    let var_1678795781185_362 : (UInt16, Range<UInt16>, Range<Int32>, Array<Bool>, Int8) = (UInt16(Int16(Int16(75))), ((UInt16(98)&127)..=(UInt16(111)&127):((-57)|1)), ((Int32(-37)&127)..=(Int32(-128)&127):((-85)|1)), [false, false, false, false, false, ([false, true, true, true, true, true, true, true, false, false] is Struct_1678795781185_271<Array<Option<Int64>>>), ([Int8(-52), Int8(100), Int8(114), Int8(108), Int8(42), Int8(98), Int8(36), Int8(-125), Int8(-104), Int8(108)] is Float32), (((UInt16(166), ((UInt16(38)&127)..(UInt16(239)&127):(86|1)), ((Int32(-95)&127)..(Int32(111)&127):((24|1))), [false, true, false, false, false, true, false, false, true, false], Int8(-59)) as Int64) is Array<UInt64>), (() is Rune), (((UInt32(20)&127)..=(UInt32(90)&127):((-73)|1)) is (Range<Int64>, UInt8, (Range<Int8>, Option<Int64>, UInt32, Int32, Range<UInt64>, Range<Int16>), Range<Int32>, Range<Int8>, Range<UInt32>))], Int8(-81));
    var var_1678795781185_444 : Range<Int8> = ((Int8(1)&127)..=(Int8(54)&127):((-100)|1));
    match ([(Option<Int8>.Some(var_1678795781185_303) ?? var_1678795781185_303), [Int8(-113), Int8(-107), Int8(91), Int8(-119), Int8(11), Int8(-49), Int8(71), Int8(-68), Int8(85), Int8(-24)][0], try { // block id: 336
        Int8(111)
    } finally { // block id: 338
        Float32(57.0);
        Int8(22) / ((var_1678795781185_303) | 1)
    }, if (true) { // block id: 345
        var_1678795781185_133;
        var_1678795781185_348;
        var_1678795781185_352 / ((var_1678795781185_303) | 1)
    } else { // block id: 355
        var_1678795781185_348;
        var_1678795781185_303
    }, var_1678795781185_352, var_1678795781185_362[4], [Int8(39), var_1678795781185_303, Int8(-19), Int8(84), Int8(-32), var_1678795781185_352, var_1678795781185_303, Int8(-57), var_1678795781185_303, Int8(22)][8], match (((Int8(93)&127)..(Int8(-87)&127):((-99)|1))) {
        case _ => 
            var_1678795781185_444;
            var_1678795781185_352--;
            Int8(97)
        
    }, match ("|>oC+tQzA4") {
        case _ => 
            var_1678795781185_352 | Int8(-109)
        
    }, func_1678795781185_457<UInt32>(var_1678795781185_133, var_1678795781185_144, ((Int32(-97)&127)..=(var_1678795781185_194&127):((var_1678795781185_222|1))), optionalParam_1678795781185_461 : var_1678795781185_194)]) {
        case caseVar_1678795781185_484 => 
            ()
        
        case caseVar_1678795781185_489 => 
            var_1678795781185_493 &= var_1678795781185_493
        
        case _ => 
            ()
        
        case _ => 
            var_1678795781185_133
        
    };
    var var_1678795781185_539 : Unit = ();
    let var_1678795781185_544 : (String, UInt64, Float32, UInt16) = ("""
vtP_e
cs#&3
""", UInt64(182), Float32(Float32(Float32(Float32(-57.0)))), UInt16(Int16(52)));
    if (try { // block id: 505
        UInt16(126);
        var_1678795781185_227
    } catch (e: Exception) { // block id: 508
        if (var_1678795781185_227) { ((Int32(26)&127)..=(Int32(74)&127):(18|1)) } else { ((Int32(85)&127)..(Int32(33)&127):((-31)|1)) } ;
        ();
        true
    }) { // block id: 515
        var_1678795781185_519[4]
    } else { // block id: 533
        [58.0, 5.0, 68.0, (-63.0), (-22.0), 104.0, (-15.0), (-38.0), 24.0, (-126.0)][7];
        var_1678795781185_539;
        var_1678795781185_544[1]
    }
}


func func_1678795781185_198(namedParam_1678795781185_199 ! : Range<Int8>, optionalParam_1678795781185_200 ! : Float64 = 6.0) : Int64 { // block id: 202
    UInt8(try { // block id: 207
        ();
        var_1678795781185_133;
        let var_1678795781185_211 : Array<Int8> = [Int8(-62), Int8(-47), Int8(39), Int8(36), Int8(83), Int8(51), Int8(-26), Int8(64), Int8(-29), Int8(-22)];
        var_1678795781185_211
    } catch (e: Exception) { // block id: 213
        var_1678795781185_133;
        ((var_1678795781185_217&127)..(Int16(-116)&127):((var_1678795781185_222|1)));
        let var_1678795781185_232 : Int8 = Int8(-5);
        var var_1678795781185_243 : Array<Int8> = [Int8(57), Int8(UInt8(238)), Int8(105), Int8(61), Int8(Int8(Int8(89))), Int8(38), Int8(UInt8(UInt8(UInt8(122)))), Int8(UInt8(Int8(Int8(90)))), Int8(102), Int8(-121)];
        if (var_1678795781185_227) { [Int8(38), var_1678795781185_232, Int8(-41), Int8(67), var_1678795781185_232, Int8(38), var_1678795781185_232, Int8(34), Int8(-40), Int8(-48)] } else { var_1678795781185_243 } 
    }[5]);
    var var_1678795781185_589 : Array<Int8> = [Int8(41), Int8(-40), Int8(-32), Int8(86), Int8(47), Int8(-44), Int8(-94), Int8(-37), Int8(-96), Int8(-11)];
    (((func_1678795781185_457<UInt32>(var_1678795781185_133, var_1678795781185_144, ((var_1678795781185_194&127)..=(var_1678795781185_194&127):(69|1)))|>func_1678795781185_267<Array<UInt64>, Array<Int8>>)&127)..((var_1678795781185_569 ?? var_1678795781185_580)&127):(match (([false, true, true, true, false, true, true, true, true, false], var_1678795781185_589, ((var_1678795781185_303&127)..=(Int8(-72)&127):(var_1678795781185_222|1)), ((var_1678795781185_303&127)..=(Int8(-75)&127):(var_1678795781185_222|1)))[0]) {

        case _ =>
            (-127) + var_1678795781185_222

        case _ =>
            Option<UInt64>.Some(UInt64(235));
            var_1678795781185_222

        case _ =>
            Float32(20.0);
            Int16(62);
            65

    }|1));
    var var_1678795781185_659 : Range<Int16> = ((Int16(UInt16(62))&127)..(Int16(-102)&127):((109|1)));
    Int64(match ((var_1678795781185_580, var_1678795781185_624, [Int8(2), Int8(106), Int8(84), Int8(41), Int8(-29), Int8(-125), Int8(80), Int8(-35), Int8(100), Int8(-15)], var_1678795781185_629)[3]) {
        case caseVar_1678795781185_634 : Range<UInt8> => 
            UInt64(244)
        
        case _ => 
            var var_1678795781185_644 : Range<Int8> = ((Int8(-91)&127)..(Int8(Int8(UInt8(Int8(106))))&127):((Int64(UInt64(Int32(29)))|1)));
            let var_1678795781185_666 : Range<Int32> = ((Int32(10)&127)..(Int32(30)&127):(52|1));
            ((((-102)&127)..=(8&127):(118|1)), var_1678795781185_287, (var_1678795781185_644, var_1678795781185_144, UInt32(167), var_1678795781185_194, ((UInt64(141)&127)..=(UInt64(67)&127):(82|1)), var_1678795781185_659), var_1678795781185_666, ((Int8(-42)&127)..=(Int8(40)&127):((-100)|1)), ((UInt32(43)&127)..=(var_1678795781185_624&127):((var_1678795781185_222|1))));
            let var_1678795781185_676 : Rune = r'x';
            if (var_1678795781185_129) { var_1678795781185_676 } else { var_1678795781185_676 } ;
            UInt64(178)
        
    })
}

main(): Int64 {
    try {
        let var_1678795781185_50 : UInt32 = UInt32(UInt32(17));
        let var_1678795781185_55 : ?Int64 = (Int16(UInt8(178)) as Int64);
        let var_1678795781185_63 : ?Int64 = Option<Int64>.Some(83);
        let var_1678795781185_141 : Int64 = 118;
        func func_1678795781185_80(param_1678795781185_81 : Range<Int64>, param_1678795781185_82 : String) : Array<Option<Int64>> { // block id: 83
            match (var_1678795781185_90[2][1]) {
                case _ => 
                    var_1678795781185_129;
                    var_1678795781185_133;
                    [Option<Int64>.None, var_1678795781185_63, var_1678795781185_55, Option<Int64>.Some(var_1678795781185_141), var_1678795781185_144, Option<Int64>.None, Option<Int64>.None, Option<Int64>.None, var_1678795781185_144, var_1678795781185_63]
                
            }
        }
;
        func func_1678795781185_77() : Array<Option<Int64>> { // block id: 78
            let var_1678795781185_183 : Rune = r'f';
            func_1678795781185_80(((121&127)..=(114&127):(53|1)), match (((Int32(-121)&127)..=(Int32(81)&127):((-53)|1))) {
                case _ => 
                    if (true) { var_1678795781185_164 } else { """
+RWl)
\\Y)>l
""" } 
                
                case caseVar_1678795781185_169 : UInt32 => 
                    "^|&[|AlNf+"
                
                case _ : Bool => 
                    if (var_1678795781185_129) { ###"|XYvi/4pl&"### } else { "xbC2NQJ$.V" } 
                
                case _ => 
                    var_1678795781185_183;
                    "0c|nj<Ka&Z"
                
                case _ => 
                    var_1678795781185_129;
                    var_1678795781185_164
                
            })
        }
;
        func func_1678795781185_11(namedParam_1678795781185_12 ! : Int64, namedParam_1678795781185_13 ! : Unit, namedParam_1678795781185_14 ! : Int32, namedParam_1678795781185_15 ! : UInt16) : Option<Int64> { // block id: 16
            var var_1678795781185_35 : Bool = true;
            if ([false, true, var_1678795781185_35, var_1678795781185_35, var_1678795781185_35, var_1678795781185_35, var_1678795781185_35, false, false, var_1678795781185_35][9]) { (Int8(-43), var_1678795781185_50, [var_1678795781185_55, Option<Int64>.Some((-44)), Option<Int64>.None, var_1678795781185_63, Option<Int64>.Some((-59)), var_1678795781185_55, Option<Int64>.Some((-19)), Option<Int64>.None, var_1678795781185_63, var_1678795781185_55], ())[2] } else { func_1678795781185_77() } [1]
        }
;
        (func_1678795781185_11(namedParam_1678795781185_12 : 37, namedParam_1678795781185_13 : var_1678795781185_133, namedParam_1678795781185_14 : var_1678795781185_194, namedParam_1678795781185_15 : UInt16(62)) ?? func_1678795781185_198(namedParam_1678795781185_199 : ((Int8(9)&127)..(Int8(56)&127):(((-83)|1)))))
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var_1678795781185_50*var_1678795781185_50), 64)
        crccheck.updateBuffer(UInt64(var_1678795781185_141*var_1678795781185_141), 64)
        crccheck.updateBuffer(UInt64(var_1678795781185_194*var_1678795781185_194), 64)
        crccheck.updateBuffer(UInt64(var_1678795781185_217*var_1678795781185_217), 64)
        crccheck.updateBuffer(UInt64(var_1678795781185_222*var_1678795781185_222), 64)
        crccheck.updateBuffer(UInt64(var_1678795781185_287*var_1678795781185_287), 64)
        crccheck.updateBuffer(UInt64(var_1678795781185_303*var_1678795781185_303), 64)
        crccheck.updateBuffer(UInt64(var_1678795781185_493*var_1678795781185_493), 64)
        crccheck.updateBuffer(UInt64(var_1678795781185_580*var_1678795781185_580), 64)
        crccheck.updateBuffer(UInt64(var_1678795781185_624*var_1678795781185_624), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend<T0> Struct_1678795781185_271<T0> {
    static func func_1678795781185_276(param_1678795781185_277 : Range<UInt8>) : Unit { // block id: 278

    }

}

