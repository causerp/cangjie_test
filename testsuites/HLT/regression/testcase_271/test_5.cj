/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC-PIPE: %run %run_opt %output %run_args 

let var_1679155050931_30 : Unit = ()
public let var_1679155050931_33 : Int16 = Int16(Int16(116))
public var var_1679155050931_79 : Bool = (Float64(Float64(Float32(Float32(-105.0)))) is UInt16)
public var var_1679155050931_89 : Range<Int64> = ((Int64(Int8(UInt8(150)))&127)..(Int64(UInt16(Int8(-125)))&127):((Int64(UInt64(UInt8(50)))|1)))
var var_1679155050931_109 : Range<UInt32> = ((UInt32(UInt16(UInt8(106)))&127)..(UInt32(24)&127):((Int64(Int16(Int16(90)))|1)))
let var_1679155050931_192 : Array<Option<Bool>> = [Option<Bool>.None, (((Int8(112)&127)..(Int8(-16)&127):((-51)|1)) as Bool), Option<Bool>.None, Option<Bool>.None, (UInt64(193) as Bool), (((UInt32(32)&127)..(UInt32(121)&127):(19|1)) as Bool), (((UInt64(131)&127)..=(UInt64(25)&127):(((-80)|1))) as Bool), ([(Option<Bool>.None as Bool), (true as Bool), (Option<Bool>.None as Bool), Option<Bool>.None, Option<Bool>.None, ((-70) as Bool), ([UInt64(109), UInt64(186), UInt64(213), UInt64(216), UInt64(70), UInt64(44), UInt64(127), UInt64(171), UInt64(10), UInt64(21)] as Bool), Option<Bool>.None, (Float32(42.0) as Bool), (r'C' as Bool)] as Bool), ([(), (), (), (), (), (), (), (), (), ()] as Bool), Option<Bool>.None]
public let var_1679155050931_234 : ?Bool = Option<Bool>.None
public var var_1679155050931_386 : Int16 = Int16(Int8(62))
public var var_1679155050931_420 : ?Range<UInt32> = Option<Range<UInt32>>.None
public var var_1679155050931_432 : UInt64 = UInt64(UInt16(UInt8(Int8(-114))))
public var var_1679155050931_441 : (Option<Unit>, Int64, Int16, UInt64) = (Option<Unit>.None, Int64(Int64(UInt16(UInt16(172)))), Int16(Int8(88)), UInt64(Int16(Int16(Int16(-77)))))
public let var_1679155050931_479 : UInt16 = UInt16(Int16(37))
public var var_1679155050931_491 : ?Unit = (Class_1679155050931_401() as Unit)
var var_1679155050931_509 : Int8 = Int8(UInt8(UInt8(UInt8(139))))
public var var_1679155050931_516 : UInt32 = UInt32(UInt16(232))
public var var_1679155050931_537 : Option<Interface_1679155050931_407> = (UInt16(78) as Interface_1679155050931_407)
public let var_1679155050931_541 : Interface_1679155050931_407 = Class_1679155050931_401()
var var_1679155050931_556 : Unit = ()
public var var_1679155050931_560 : Int32 = Int32(-44)
public let var_1679155050931_639 : Interface_1679155050931_404 = Class_1679155050931_401()
var var_1679155050931_649 : UInt8 = UInt8(Int8(UInt8(152)))
public let var_1679155050931_654 : UInt8 = UInt8(UInt8(136))
public let var_1679155050931_658 : Enum_1679155050931_102 = Enum_1679155050931_102.defaultValue
public let var_1679155050931_685 : Int8 = Int8(Int8(UInt8(Int8(-111))))
var var_1679155050931_695 : Int32 = Int32(Int16(-79))
public let var_1679155050931_701 : Rune = r'c'
public var var_1679155050931_716 : (Range<UInt8>, Array<Unit>, String, UInt64, Int64, UInt16, String, UInt32) = (((UInt8(107)&127)..=(UInt8(6)&127):((-80)|1)), [(), (), (), (), (), (), (), (), (), ()], "s(xw?7U1iZ", UInt64(14), Int64(Int16(117)), UInt16(Int8(26)), "SJk5VBuvb<", UInt32(72))
public let var_1679155050931_731 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
public enum Enum_1679155050931_102 {
    defaultValue |
    enumValue_1679155050931_466(Int16, (Int32) -> Option<Bool>, String)
}


public func func_1679155050931_184(param_1679155050931_185 : Int32) : Option<Bool> { // block id: 186
    try { // block id: 190
        var_1679155050931_192
    } finally { // block id: 230
        ();
        [var_1679155050931_234, Option<Bool>.Some(true), Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.Some(false), var_1679155050931_234, Option<Bool>.Some(var_1679155050931_79), Option<Bool>.None, var_1679155050931_234]
    }[7]
}




public func func_1679155050931_327(param_1679155050931_328 : UInt32) : Range<UInt32> { // block id: 329
    var var_1679155050931_337 : Unit = ();
    var var_1679155050931_353 : Int64 = Int64(UInt64(UInt8(UInt8(146))));
    var loopTimeVar_1679155050931_358 : Range<UInt64> = ((UInt64(5)&127)..=(UInt64(244)&127):((85|1)));
    for (i in loopTimeVar_1679155050931_358 where var_1679155050931_79) {
        try { // block id: 334
            ();
            var_1679155050931_337;
            ((Int8(119)&127)..(Int8(10)&127):((-19)|1))
        } catch (_) { // block id: 340
            ();
            if (false) { ((Int8(1)&127)..(Int8(42)&127):((-47)|1)) } else { ((Int8(-48)&127)..=(Int8(-31)&127):(25|1)) } 
        } finally { // block id: 346
            Int8(-50);
            ();
            ((Int8(-31)&127)..=(Int8(77)&127):((var_1679155050931_353|1)))
        }
    };
    var_1679155050931_337;
    let var_1679155050931_376 : UInt32 = UInt32(Int32(UInt8(Int8(Int8(-13)))));
    (try { // block id: 366
        let var_1679155050931_368 : Array<UInt64> = [UInt64(138), UInt64(50), UInt64(121), UInt64(223), UInt64(250), UInt64(217), UInt64(151), UInt64(167), UInt64(141), UInt64(141)];
        var_1679155050931_368;
        var_1679155050931_337;
        UInt32(87) % ((UInt32(182)) | 1)
    } catch (_) { // block id: 374
        var_1679155050931_376
    } finally { // block id: 382
        ((Int16(37)&127)..(var_1679155050931_386&127):((var_1679155050931_353|1)));
        var_1679155050931_376
    }&127)..(UInt32((Int8(47), ((UInt8(243)&127)..=(UInt8(132)&127):((-13)|1)))[0])&127):(40|1)
}

public interface Interface_1679155050931_409<T0, T1, T2> {

}

public interface Interface_1679155050931_408 <: Interface_1679155050931_409<Float64, Range<UInt8>, Int16> {

}

public interface Interface_1679155050931_410 <: Interface_1679155050931_409<Float64, Range<UInt8>, Int16> & Interface_1679155050931_408 {

}

public interface Interface_1679155050931_407 <: Interface_1679155050931_408 & Interface_1679155050931_410 {

}

public interface Interface_1679155050931_406 <: Interface_1679155050931_407 {

}

public interface Interface_1679155050931_405<T0, T1> <: Interface_1679155050931_406 {

}

public interface Interface_1679155050931_404 <: Interface_1679155050931_405<Array<UInt64>, Unit> {

}

public interface Interface_1679155050931_411 {

}

public open class Class_1679155050931_401 <: Interface_1679155050931_404 & Interface_1679155050931_411 & Resource {
    public init() { // block id: 403

    }
;
    static let var_1679155050931_414 : UInt32 = UInt32(187)
    public func isClosed(): Bool { return false }
    public func close(): Unit {}
}

public func func_1679155050931_266<T0, T1>(param_1679155050931_267 : Range<UInt32>) : Option<Unit> { // block id: 268
    let var_1679155050931_284 : Float32 = Float32(-116.0);
    var var_1679155050931_287 : UInt8 = UInt8(UInt8(141));
    var var_1679155050931_296 : Unit = ();
    let var_1679155050931_309 : Int8 = Int8(-21);
    let var_1679155050931_318 : ?Range<UInt32> = Option<Range<UInt32>>.Some(((UInt32(253)&127)..=(UInt32(115)&127):((-4)|1)));
    (((32.0, var_1679155050931_284, var_1679155050931_287, var_1679155050931_79, Option<Option<Range<UInt32>>>.Some(Option<Range<UInt32>>.None), false, [var_1679155050931_296, (), var_1679155050931_296, var_1679155050931_296, (), var_1679155050931_296, (), (), (), var_1679155050931_296], ((var_1679155050931_309&127)..=(var_1679155050931_309&127):((72|1))), Int16(-120))[4] ?? if (false) { var_1679155050931_318 } else { Option<Range<UInt32>>.Some(((UInt32(27)&127)..(UInt32(96)&127):((75|1)))) } ) ?? (Class_1679155050931_401.var_1679155050931_414|>func_1679155050931_327));
    Option<Unit>.None
}

public func func_1679155050931_174(param_1679155050931_175 : Range<Int64>) : Option<Unit> { // block id: 176
    let var_1679155050931_250 : (Int32) -> Option<Bool> = { lambdaParameter_1679155050931_253 : Int32 => Option<Bool>.None };
    if (((Int32(-107)|>var_1679155050931_250) ?? (Option<Bool>.Some(var_1679155050931_79) ?? var_1679155050931_79))) { ((var_1679155050931_420 ?? ((UInt32(133)&127)..(UInt32(15)&127):((-16)|1)))|>func_1679155050931_266<Option<Unit>, String>) } else { try { // block id: 426
        (Option<Unit>.None, 65, Int16(-54), var_1679155050931_432)
    } catch (_) { // block id: 437
        if (true) { var_1679155050931_441 } else { var_1679155050931_441 } 
    }[0] } 
}


func func_1679155050931_162(param_1679155050931_163 : Int8) : Unit { // block id: 164
    var var_1679155050931_166 : Unit = ();
    var_1679155050931_166;
    let var_1679155050931_457 : (Range<Int64>) -> Option<Unit> = func_1679155050931_174;
    var loopTimeVar_1679155050931_484 : Int64 = 0;
    ((var_1679155050931_89|>var_1679155050931_457) ?? do {
        loopTimeVar_1679155050931_484++;
        var var_1679155050931_464 : Enum_1679155050931_102 = Enum_1679155050931_102.enumValue_1679155050931_466(Int16(UInt8(UInt8(10))), func_1679155050931_184, "=ZpF(NbLt%");
        var_1679155050931_464;
        var_1679155050931_479 % ((var_1679155050931_479) | 1)
    } while ((false) && loopTimeVar_1679155050931_484 < 100 ) );
    var var_1679155050931_499 : Int32 = Int32(UInt16(UInt8(UInt8(113))));
    var loopTimeVar_1679155050931_506 : Int64 = 0;
    (var_1679155050931_491 ?? do {
        loopTimeVar_1679155050931_506++;
        var_1679155050931_499++;
        var_1679155050931_166
    } while ((var_1679155050931_79) && loopTimeVar_1679155050931_506 < 100 ) )
}


func func_1679155050931_156(param_1679155050931_157 : Int16) : Bool { // block id: 158
    try (resource = Class_1679155050931_401()) { // block id: 160
        var_1679155050931_509|>func_1679155050931_162;
        var_1679155050931_516 >>= ((var_1679155050931_516) & 7);
        let var_1679155050931_523 : (UInt64, Unit, Range<UInt16>) = (UInt64(UInt16(27)), (), ((UInt16(205)&127)..(UInt16(21)&127):(22|1)));
        var_1679155050931_523[1]
    } finally { // block id: 530
        (var_1679155050931_537 ?? var_1679155050931_541);
        let var_1679155050931_546 : (Float64, Bool, Int8) = (18.0, (Option<Bool>.Some(true) is Option<Bool>), Int8(Int8(-119)));
        var_1679155050931_546[1];
        var_1679155050931_556
    };
    var var_1679155050931_569 : Int64 = (-58);
    var_1679155050931_560 <<= ((if (var_1679155050931_79) { // block id: 564
        ((UInt8(124)&127)..=(UInt8(2)&127):((var_1679155050931_569|1)));
        var_1679155050931_560
    } else if (false) { // block id: 573
        ();
        var_1679155050931_516;
        Int32(109)
    } else { // block id: 577
        Int32(75) & var_1679155050931_560
    }) & 7);
    false
}

public func func_1679155050931_39<T0>(param_1679155050931_40 : Int8, namedParam_1679155050931_41 ! : Rune, optionalParam_1679155050931_42 ! : UInt64 = UInt64(Int16(UInt16(UInt16(Int16(-15))))), namedParam_1679155050931_48 ! : Bool) : Float64 { // block id: 49
    var var_1679155050931_66 : Unit = ();
    if (if (true) { // block id: 64
        var_1679155050931_66;
        let var_1679155050931_72 : Int64 = Int64(Int8(2));
        ((UInt8(140)&127)..=(UInt8(183)&127):((var_1679155050931_72|1)));
        true && true
    } else if (var_1679155050931_79) { // block id: 85
        var_1679155050931_79
    } else { // block id: 87
        var_1679155050931_89;
        var_1679155050931_79
    }) { match (Enum_1679155050931_102.defaultValue) {
        case defaultValue => 
            var_1679155050931_109;
            var_1679155050931_66;
            [(), (), (), (), (), (), (), (), (), ()]
        
        case defaultValue => 
            [(), (), (), (), (), (), (), (), (), ()]
        
        case _ : Float64 => 
            [(), (), (), (), (), (), (), (), (), ()]
        
        case _ => 
            [(), (), (), var_1679155050931_66, var_1679155050931_66, var_1679155050931_66, (), (), var_1679155050931_66, ()]
        
    } } else { [var_1679155050931_66, (), var_1679155050931_66, (), (), (), var_1679155050931_66, (), var_1679155050931_66, ()] } [6];
    var var_1679155050931_583 : (Int16) -> Bool = func_1679155050931_156;
    var var_1679155050931_592 : UInt64 = UInt64(233);
    var loopTimeVar_1679155050931_603 : Array<Option<Bool>> = [Option<Bool>.Some(true), Option<Bool>.None, Option<Bool>.Some((((UInt16(212)&127)..=(UInt16(135)&127):((70|1))) is Option<Bool>)), Option<Bool>.Some((Int16(UInt16(122)) is Int32)), ((42.0, true, Int8(Int8(109))) as Bool), Option<Bool>.Some(true), (() as Bool), Option<Bool>.None, (UInt32(95) as Bool), (Int32(-26) as Bool)];
    var var_1679155050931_669 : (Int32) -> Option<Bool> = func_1679155050931_184;
    match (for (i in loopTimeVar_1679155050931_603 where (var_1679155050931_386|>var_1679155050931_583)) {
        [UInt64(202), UInt64(75), UInt64(192), var_1679155050931_592, var_1679155050931_592, var_1679155050931_432, var_1679155050931_592, var_1679155050931_432, var_1679155050931_432, UInt64(85)];
        var_1679155050931_509 /= ((var_1679155050931_509) | 1)
    }) {
        case _ : Class_1679155050931_401 => 
            if (var_1679155050931_79) { var_1679155050931_639 } else { var_1679155050931_639 } ;
            Enum_1679155050931_102.defaultValue
        
        case caseVar_1679155050931_645 : Interface_1679155050931_407 => 
            var_1679155050931_649 <<= ((var_1679155050931_654) & 7);
            var_1679155050931_658
        
        case _ => 
            var_1679155050931_556;
            ();
            if (false) { Enum_1679155050931_102.enumValue_1679155050931_466(Int16(121), var_1679155050931_669, "d,Y-[MTuLe") } else { Enum_1679155050931_102.defaultValue } 
        
    };
    match (var_1679155050931_639) {
        case _ => 
            var var_1679155050931_678 : Interface_1679155050931_406 = Class_1679155050931_401();
            var_1679155050931_678;
            var var_1679155050931_681 : Float64 = Float64((-93.0));
            var_1679155050931_681
        
    }
}


main(): Int64 {
    try {
        let var_1679155050931_24 : Bool = (UInt64(136) is Float32);
        Int16(if (false) { // block id: 10
            let var_1679155050931_13 : Int32 = Int32(63);
            var_1679155050931_13 - var_1679155050931_13;
            var var_1679155050931_19 : Int16 = Int16(UInt16(UInt16(206)));
            Int16(-124) % ((var_1679155050931_19) | 1)
        } else if (var_1679155050931_24) { // block id: 27
            ();
            var_1679155050931_30;
            var_1679155050931_33
        } else { // block id: 36
            var_1679155050931_33
        });
        func_1679155050931_39<Class_1679155050931_401>(var_1679155050931_685, namedParam_1679155050931_41 : if (var_1679155050931_24) { // block id: 692
            var_1679155050931_695++;
            if (true) { var_1679155050931_701 } else { var_1679155050931_701 } 
        } else { // block id: 704
            r'Q'
        }, namedParam_1679155050931_48 : var_1679155050931_24);
        var var_1679155050931_749 : UInt32 = UInt32(205);
        (Option<(Range<UInt8>, Array<Unit>, String, UInt64, Int64, UInt16, String, UInt32)>.Some(var_1679155050931_716) ?? (((UInt8(213)&127)..=(UInt8(179)&127):((-85)|1)), var_1679155050931_731, ###"^jGZWWu,]="###, UInt64(251), 29, var_1679155050931_479, "'iAlWq*|,h", var_1679155050931_749))[4]
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var_1679155050931_33*var_1679155050931_33), 64)
        crccheck.updateBuffer(UInt64(var_1679155050931_695*var_1679155050931_695), 64)
        crccheck.updateBuffer(UInt64(var_1679155050931_749*var_1679155050931_749), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Enum_1679155050931_102 {

}

extend Class_1679155050931_401 {

}

