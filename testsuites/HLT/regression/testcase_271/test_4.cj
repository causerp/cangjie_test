/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC-PIPE: %run %run_opt %output %run_args 

public var var_1679151053244_42 : UInt16 = UInt16(Int8(74))
public let var_1679151053244_207 : UInt32 = UInt32(185)
public var var_1679151053244_233 : (Float64, Array<Array<Unit>>, Array<UInt32>, Float64, Option<Int16>) = ((-66.0), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], [UInt32(62), UInt32(250), UInt32(129), UInt32(41), UInt32(100), UInt32(181), UInt32(237), UInt32(135), UInt32(20), UInt32(147)], (-71.0), Option<Int16>.None)
let var_1679151053244_306 : Range<UInt64> = ((UInt64(37)&127)..(UInt64((-6))&127):((Int64(UInt16(Int16(38)))|1)))
var var_1679151053244_329 : Option<Int16> = ("ge|3Aj73Ya" as Int16)
let var_1679151053244_335 : Int8 = Int8(Int8(Int8(UInt8(4))))
public let var_1679151053244_347 : UInt64 = UInt64(124)
public var var_1679151053244_359 : Int64 = Int64(Int64(UInt16(Int8(UInt8(251)))))
var var_1679151053244_396 : Array<UInt32> = [UInt32(58), UInt32(188), UInt32(17), UInt32(99), UInt32(Int32(UInt8(UInt8(191)))), UInt32(59), UInt32(190), UInt32(201), UInt32(143), UInt32(6)]
let var_1679151053244_425 : Bool = false
var var_1679151053244_478 : Unit = ()
var var_1679151053244_495 : Int16 = Int16(-123)
public var var_1679151053244_515 : Range<UInt8> = ((UInt8(UInt8(148))&127)..(UInt8(125)&127):((Int64(UInt16(Int16(UInt16(15))))|1)))
let var_1679151053244_611 : ?Array<Array<Unit>> = Option<Array<Array<Unit>>>.None
public let var_1679151053244_619 : ?Interface_1679151053244_19 = Option<Interface_1679151053244_19>.None
var var_1679151053244_627 : Bool = false
var var_1679151053244_653 : Interface_1679151053244_19 = Class_1679151053244_16()
let var_1679151053244_695 : UInt64 = UInt64(UInt16(99))
public var var_1679151053244_738 : UInt64 = UInt64(UInt64(Int8(UInt8(UInt8(94)))))

public interface Interface_1679151053244_19 {

}

public open class Class_1679151053244_16 <: Interface_1679151053244_19 {
    public init() { // block id: 18

    }
;
    static let var_1679151053244_71 : Unit = ();
    private static mut prop var_1679151053244_79 : Unit { // block id: 80
        get() { // block id: 82
            ();
            ()
        }

        set(Value) { // block id: 87
            ();
            (((Int16(-22)&127)..=(Int16(-37)&127):(60|1)) is Array<Array<Unit>>);
            ()
        }

    };
    static mut prop var_1679151053244_94 : Unit { // block id: 95
        get() { // block id: 97
            var_1679151053244_861
        }

        set(Value) { // block id: 100
            ();
            var_1679151053244_861 = Value
        }

    };
    static prop var_1679151053244_162 : UInt32 { // block id: 163
        get() { // block id: 165
            UInt32(10)
        }

    };
    static var var_1679151053244_172 : Array<UInt32> = [UInt32(243), UInt32(49), UInt32(213), UInt32(98), UInt32(170), UInt32(12), UInt32(206), UInt32(178), UInt32(22), UInt32(28)];
    static func func_1679151053244_22(namedParam_1679151053244_23 ! : Float64) : UInt32 { // block id: 24
        let var_1679151053244_52 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
        var var_1679151053244_110 : Unit = ();
        var var_1679151053244_115 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
        var var_1679151053244_127 : Unit = ();
        try { // block id: 39
            var_1679151053244_42 %= ((var_1679151053244_42) | 1);
            [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]]
        } catch (_) { // block id: 47
            [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]]
        } finally { // block id: 49
            var var_1679151053244_105 : Unit = ();
            var var_1679151053244_142 : Unit = ();
            [var_1679151053244_52, [(), (), (), (), (), var_1679151053244_71, (), var_1679151053244_71, var_1679151053244_71, var_1679151053244_71], [var_1679151053244_79, var_1679151053244_79, var_1679151053244_94, var_1679151053244_94, var_1679151053244_71, var_1679151053244_105, (), (), var_1679151053244_110, var_1679151053244_105], var_1679151053244_52, var_1679151053244_115, var_1679151053244_115, var_1679151053244_115, [(), var_1679151053244_71, (), (), (), var_1679151053244_105, var_1679151053244_127, var_1679151053244_127, (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), var_1679151053244_105, (), var_1679151053244_79, (), (), (), var_1679151053244_142, (), ()]]
        }[4][4];
        'n';
        [[UInt32(181), UInt32(66), UInt32(136), UInt32(16), UInt32(72), UInt32(120), UInt32(3), UInt32(77), UInt32(198), UInt32(140)], [UInt32(201), UInt32(37), UInt32(138), UInt32(71), UInt32(136), var_1679151053244_162, UInt32(86), UInt32(46), UInt32(77), UInt32(206)], var_1679151053244_172, var_1679151053244_172, [var_1679151053244_162, UInt32(234), UInt32(198), var_1679151053244_162, UInt32(1), UInt32(47), var_1679151053244_162, UInt32(84), var_1679151053244_162, UInt32(25)], [UInt32(126), UInt32(241), UInt32(109), UInt32(169), UInt32(145), UInt32(118), UInt32(218), UInt32(224), UInt32(111), UInt32(42)], [var_1679151053244_162, var_1679151053244_162, var_1679151053244_162, var_1679151053244_162, var_1679151053244_162, UInt32(143), UInt32(185), var_1679151053244_162, var_1679151053244_162, UInt32(113)], [UInt32(109), UInt32(17), UInt32(147), UInt32(204), UInt32(242), UInt32(111), UInt32(113), UInt32(208), UInt32(93), UInt32(181)], [UInt32(173), UInt32(170), UInt32(186), UInt32(74), UInt32(211), UInt32(245), UInt32(221), UInt32(108), UInt32(53), UInt32(9)], [var_1679151053244_162, var_1679151053244_162, var_1679151053244_162, UInt32(243), UInt32(115), var_1679151053244_207, UInt32(137), var_1679151053244_162, UInt32(29), var_1679151053244_207]][9][9]
    }
;
    static mut prop var_1679151053244_861 : Unit { // block id: 862
        get() { // block id: 864
            ((UInt64(220)&127)..(UInt64(146)&127):(22|1));
            (###"/r5EA1iSbb"### as Array<Array<Unit>>);
            ()
        }

        set(Value) { // block id: 871
            ((UInt64(99)&127)..=(UInt64(90)&127):((-74)|1));
            ();
            ()
        }

    }
}


public func func_1679151053244_226() : Option<Unit> { // block id: 227
    var var_1679151053244_315 : Range<Int8> = ((Int8(Int8(-66))&127)..(Int8(Int8(87))&127):((Int64(Int8(Int8(UInt8(183))))|1)));
    match (match (var_1679151053244_233[4]) {
        case _ : UInt64 => 
            ();
            var_1679151053244_306;
            var_1679151053244_315
        
        case _ => 
            var_1679151053244_329;
            ();
            ((var_1679151053244_335&127)..=(Int8(125)&127):(((-113)|1)))
        
        case _ => 
            ((UInt64(63)&127)..=(var_1679151053244_347&127):((32|1)));
            ((Int8(44)&127)..=(Int8(-127)&127):((-83)|1))
        
    }) {
        case caseVar_1679151053244_353 => 
            ((UInt16(132)&127)..=(var_1679151053244_42&127):((var_1679151053244_359|1)));
            var var_1679151053244_366 : Unit = ();
            var_1679151053244_366;
            let var_1679151053244_373 : ?Unit = (((UInt32(UInt32(UInt32(202)))&127)..=(UInt32(UInt32(UInt8(164)))&127):(((-117)|1))) as Unit);
            if (true) { Option<Unit>.Some(var_1679151053244_366) } else { var_1679151053244_373 } 
        
        case _ : Array<UInt64> => 
            var var_1679151053244_387 : ?Unit = Option<Unit>.None;
            var_1679151053244_387
        
        case _ => 
            var var_1679151053244_393 : Int64 = (-90);
            var_1679151053244_393++;
            var_1679151053244_396;
            Option<Unit>.Some(())
        
    }
}




func func_1679151053244_450(optionalParam_1679151053244_451 ! : Int32 = Int32(UInt32(Int16(-92)))) : Array<Unit> { // block id: 455
    var var_1679151053244_466 : ?Array<Unit> = (Int8(UInt8(Int8(UInt8(171)))) as Array<Unit>);
    (try { // block id: 462
        if (var_1679151053244_425) { var_1679151053244_466 } else { var_1679151053244_466 } 
    } catch (_) { // block id: 473
        var_1679151053244_466
    } finally { // block id: 475
        ((UInt16(23)&127)..(UInt16(91)&127):((-124)|1));
        var_1679151053244_478;
        var_1679151053244_466
    } ?? (Option<Array<Array<Unit>>>.None ?? [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]])[0]);
    let var_1679151053244_525 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    try { // block id: 492
        var_1679151053244_495 += var_1679151053244_495;
        if (true) { Option<Interface_1679151053244_19>.None } else { Option<Interface_1679151053244_19>.None } ;
        [var_1679151053244_478, (), var_1679151053244_478, (), (), var_1679151053244_478, var_1679151053244_478, var_1679151053244_478, (), ()]
    } catch (e: Exception) { // block id: 513
        var_1679151053244_515;
        var_1679151053244_525
    }[6];
    [(), (), (), (), (), (), (), (), (), ()]
}

public func func_1679151053244_428(param_1679151053244_429 : Class_1679151053244_16) : Option<Interface_1679151053244_19> { // block id: 430
    var var_1679151053244_434 : (String, Int16, Unit, Array<Unit>, Range<UInt64>, Range<UInt16>) = ("\\?PY3EW[@>", Int16(53), (), [(), (), (), (), (), (), (), (), (), ()], ((UInt64(UInt32(UInt32(97)))&127)..(UInt64(223)&127):((10|1))), ((UInt16(186)&127)..=(UInt16(159)&127):((-128)|1)));
    var_1679151053244_434[2];
    let var_1679151053244_541 : Int32 = Int32(Int16(93));
    func_1679151053244_450(optionalParam_1679151053244_451 : Int32(var_1679151053244_541))[0];
    match (Option<Interface_1679151053244_19>.None) {
        case _ => 
            var_1679151053244_335 < var_1679151053244_335;
            if (var_1679151053244_425) { Option<Interface_1679151053244_19>.None } else { Option<Interface_1679151053244_19>.None } 
        
    }
}

func func_1679151053244_415(param_1679151053244_416 : Range<Int64>) : Interface_1679151053244_19 { // block id: 417
    let var_1679151053244_557 : (Class_1679151053244_16) -> Option<Interface_1679151053244_19> = { lambdaParameter_1679151053244_560 : Class_1679151053244_16 => Option<Interface_1679151053244_19>.None };
    let var_1679151053244_564 : Class_1679151053244_16 = Class_1679151053244_16();
    (if (var_1679151053244_425) { (var_1679151053244_564|>var_1679151053244_557) } else { match (var_1679151053244_611) {
        case caseVar_1679151053244_615 => 
            var_1679151053244_478;
            var_1679151053244_619
        
        case _ : Array<Unit> => 
            ((41&127)..(29&127):(87|1));
            var_1679151053244_627 ||= false;
            var_1679151053244_619
        
        case _ => 
            Int8(49);
            ();
            var var_1679151053244_638 : Interface_1679151053244_19 = Class_1679151053244_16();
            Option<Interface_1679151053244_19>.Some(var_1679151053244_638)
        
        case caseVar_1679151053244_642 => 
            ();
            Option<Interface_1679151053244_19>.None
        
        case _ => 
            if (true) { var_1679151053244_619 } else { Option<Interface_1679151053244_19>.None } 
        
    } }  ?? var_1679151053244_653)
}


public func func_1679151053244_11(param_1679151053244_12 : UInt64) : Option<Unit> { // block id: 13
    -(Class_1679151053244_16.func_1679151053244_22(namedParam_1679151053244_23 : (-103.0)));
    var var_1679151053244_657 : Range<Int64> = ((Int64(Int16(Int8(UInt8(29))))&127)..(Int64(UInt64(Int64(Int8(99))))&127):(((-71)|1)));
    try { // block id: 217
        (Option<Int16>.None ?? Int16(-102));
        func_1679151053244_226()
    } catch (_) { // block id: 413
        var_1679151053244_657|>func_1679151053244_415;
        var var_1679151053244_673 : ?Unit = Option<Unit>.Some(());
        if (false) { Option<Unit>.Some(()) } else { var_1679151053244_673 } 
    } finally { // block id: 676
        var var_1679151053244_679 : Int8 = Int8(88);
        var_1679151053244_679 -= var_1679151053244_679;
        var var_1679151053244_689 : ?Unit = Option<Unit>.Some(());
        (Option<Option<Unit>>.Some(var_1679151053244_689) ?? var_1679151053244_689)
    }
}

main(): Int64 {
    try {
        var loopTimeVar_1679151053244_703 : Int64 = 0;
        ((var_1679151053244_695|>func_1679151053244_11) ?? while ((var_1679151053244_627) && loopTimeVar_1679151053244_703 < 100 ) {
            loopTimeVar_1679151053244_703++;
            var_1679151053244_478
        });
        let var_1679151053244_753 : Array<Array<UInt32>> = [[UInt32(79), UInt32(249), UInt32(8), UInt32(164), UInt32(22), UInt32(219), UInt32(204), UInt32(131), UInt32(147), UInt32(115)], [UInt32(225), UInt32(85), UInt32(64), UInt32(93), UInt32(129), UInt32(246), UInt32(189), UInt32(44), UInt32(159), UInt32(106)], [UInt32(22), UInt32(110), UInt32(30), UInt32(236), UInt32(174), UInt32(146), UInt32(182), UInt32(102), UInt32(80), UInt32(187)], [UInt32(207), UInt32(189), UInt32(225), UInt32(160), UInt32(30), UInt32(76), UInt32(248), UInt32(151), UInt32(123), UInt32(30)], [UInt32(12), UInt32(135), UInt32(225), UInt32(108), UInt32(38), UInt32(239), UInt32(85), UInt32(89), UInt32(88), UInt32(13)], [UInt32(169), UInt32(162), UInt32(250), UInt32(215), UInt32(79), UInt32(85), UInt32(142), UInt32(173), UInt32(207), UInt32(40)], [UInt32(176), UInt32(171), UInt32(196), UInt32(171), UInt32(205), UInt32(81), UInt32(232), UInt32(199), UInt32(168), UInt32(182)], [UInt32(198), UInt32(45), UInt32(117), UInt32(210), UInt32(93), UInt32(54), UInt32(78), UInt32(81), UInt32(192), UInt32(69)], [UInt32(89), UInt32(174), UInt32(7), UInt32(33), UInt32(62), UInt32(200), UInt32(18), UInt32(67), UInt32(83), UInt32(138)], [UInt32(31), UInt32(192), UInt32(44), UInt32(189), UInt32(102), UInt32(233), UInt32(49), UInt32(66), UInt32(99), UInt32(9)]];
        let var_1679151053244_791 : Unit = ();
        var var_1679151053244_855 : UInt8 = UInt8(241);
        if (match ([var_1679151053244_478, var_1679151053244_478, (), (), (), (), (), (), (), var_1679151053244_478]) {
            case caseVar_1679151053244_719 => 
                var_1679151053244_478;
                false || true
            
            case _ : Range<UInt32> => 
                false
            
            case _ => 
                [UInt64(208), UInt64(131), UInt64(242), UInt64(72), UInt64(44), UInt64(237), UInt64(130), UInt64(3), UInt64(102), UInt64(161)];
                UInt16(66) >= UInt16(149)
            
        }) { // block id: 735
            var_1679151053244_738 &= UInt64(150);
            var_1679151053244_738 = UInt64(94);
            (-82) ^ var_1679151053244_359
        } else if (match (var_1679151053244_753) {
            case _ : Int16 => 
                !var_1679151053244_627
            
            case _ => 
                !var_1679151053244_627
            
            case _ : Rune => 
                Class_1679151053244_16();
                false
            
            case _ => 
                var_1679151053244_478;
                false
            
        }) { // block id: 774
            ();
            var_1679151053244_306;
            (-43) + var_1679151053244_359
        } else { // block id: 780
            var var_1679151053244_812 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
            var var_1679151053244_850 : Float64 = (-78.0);
            (57.0, [[(), (), (), (), (), (), (), (), (), ()], [var_1679151053244_478, (), (), (), var_1679151053244_791, (), var_1679151053244_791, (), (), var_1679151053244_791], [(), (), (), (), (), (), (), (), (), ()], [var_1679151053244_478, (), (), (), (), var_1679151053244_478, var_1679151053244_478, (), (), var_1679151053244_791], [(), (), (), (), (), (), (), (), (), ()], var_1679151053244_812, [(), (), (), (), (), (), (), (), (), ()], [(), (), (), var_1679151053244_478, var_1679151053244_791, (), (), var_1679151053244_478, var_1679151053244_791, var_1679151053244_478], [var_1679151053244_791, (), (), (), (), (), (), (), (), var_1679151053244_478], [(), (), (), (), (), (), (), (), (), ()]], [var_1679151053244_207, var_1679151053244_207, var_1679151053244_207, UInt32(218), UInt32(231), UInt32(67), UInt32(160), UInt32(198), UInt32(73), var_1679151053244_207], var_1679151053244_850, Option<Int16>.None);
            var_1679151053244_855 &= UInt8(209);
            (-1) >> ((var_1679151053244_359) & 7)
        }
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var_1679151053244_42*var_1679151053244_42), 64)
        crccheck.updateBuffer(UInt64(var_1679151053244_207*var_1679151053244_207), 64)
        crccheck.updateBuffer(UInt64(var_1679151053244_335*var_1679151053244_335), 64)
        crccheck.updateBuffer(UInt64(var_1679151053244_347*var_1679151053244_347), 64)
        crccheck.updateBuffer(UInt64(var_1679151053244_359*var_1679151053244_359), 64)
        crccheck.updateBuffer(UInt64(var_1679151053244_495*var_1679151053244_495), 64)
        crccheck.updateBuffer(UInt64(var_1679151053244_695*var_1679151053244_695), 64)
        crccheck.updateBuffer(UInt64(var_1679151053244_738*var_1679151053244_738), 64)
        crccheck.updateBuffer(UInt64(var_1679151053244_855*var_1679151053244_855), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
