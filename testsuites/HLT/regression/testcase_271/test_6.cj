/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC-PIPE: %run %run_opt %output %run_args 

public let var_1679164432996_9 : UInt32 = UInt32(Int16(Int16(UInt16(UInt16(241)))))
var var_1679164432996_70 : Array<Int32> = [Int32(0), Int32(117), Int32(-128), Int32(85), Int32(64), Int32(0), Int32(24), Int32(-83), Int32(42), Int32(-95)]
public var var_1679164432996_99 : Int64 = (-125)
public let var_1679164432996_141 : Unit = ()
public var var_1679164432996_147 : Option<Unit> = Option<Unit>.None
public let var_1679164432996_182 : Interface_1679164432996_20 = Class_1679164432996_17()
public let var_1679164432996_212 : (Int32, Int16, String, Range<UInt8>, UInt16) = (Int32(Int8(Int8(86))), Int16(-22), """
1qY>&
]!U(4
""", ((UInt8(251)&127)..(UInt8(193)&127):(85|1)), UInt16(Int16(Int16(-111))))
public var var_1679164432996_230 : Int32 = Int32(103)
public var var_1679164432996_280 : Bool = (UInt64(135) is Range<UInt32>)
public let var_1679164432996_289 : Int32 = Int32(116)
var var_1679164432996_300 : Int32 = Int32(78)
let var_1679164432996_313 : ?(UInt8, Bool, Range<UInt32>, Unit, Bool) = Option<(UInt8, Bool, Range<UInt32>, Unit, Bool)>.None
let var_1679164432996_316 : (UInt8, Bool, Range<UInt32>, Unit, Bool) = (UInt8(Int8(53)), false, ((UInt32(Int32(33))&127)..=(UInt32(70)&127):(((-45)|1))), (), (Int8(20) is String))
let var_1679164432996_397 : Option<Int32> = (((UInt8(130)&127)..=(UInt8(150)&127):((-70)|1)) as Int32)
var var_1679164432996_657 : Float64 = 62.0
let var_1679164432996_759 : UInt8 = UInt8(178)
public interface Interface_1679164432996_20 {

}

public open class Class_1679164432996_17 <: Interface_1679164432996_20 & Resource {
    public init() { // block id: 19

    }
;
    static var var_1679164432996_265 : Int32 = Int32(-90);
    public mut prop var_1679164432996_409 : (Array<Int32>, Float32, Array<Range<Int32>>, UInt64, Range<UInt32>) { // block id: 410
        get() { // block id: 412
            ((UInt32(162)&127)..=(UInt32(12)&127):(26|1));
            ();
            ([Int32(-83), Int32(70), Int32(4), Int32(-1), Int32(15), Int32(-48), Int32(42), Int32(4), Int32(10), Int32(-124)], Float32(-80.0), [((Int32(-4)&127)..=(Int32(96)&127):((-72)|1)), ((Int32(-110)&127)..(Int32(-104)&127):(52|1)), ((Int32(-46)&127)..=(Int32(41)&127):(45|1)), ((Int32(91)&127)..=(Int32(-45)&127):((-53)|1)), ((Int32(-1)&127)..(Int32(-100)&127):(61|1)), ((Int32(10)&127)..=(Int32(87)&127):((-112)|1)), ((Int32(98)&127)..=(Int32(-81)&127):((-5)|1)), ((Int32(-62)&127)..(Int32(51)&127):(69|1)), ((Int32(96)&127)..=(Int32(-114)&127):((-65)|1)), ((Int32(94)&127)..(Int32(-105)&127):((-42)|1))], UInt64(UInt8(172)), ((UInt32(140)&127)..=(UInt32(67)&127):(39|1)));
            var_1679164432996_888
        }

        set(Value) { // block id: 424
            ();
            ();
            ();
            var_1679164432996_888 = Value
        }

    };
    public let var_1679164432996_883 : Int64 = 36;
    var var_1679164432996_888 : (Array<Int32>, Float32, Array<Range<Int32>>, UInt64, Range<UInt32>) = ([Int32(-18), Int32(-7), Int32(-82), Int32(85), Int32(116), Int32(-111), Int32(27), Int32(107), Int32(40), Int32(120)], Float32(119.0), [((Int32(-105)&127)..=(Int32(22)&127):((-110)|1)), ((Int32(48)&127)..=(Int32(-92)&127):((-4)|1)), ((Int32(44)&127)..=(Int32(-2)&127):((-37)|1)), ((Int32(-115)&127)..(Int32(-30)&127):(43|1)), ((Int32(114)&127)..(Int32(49)&127):(20|1)), ((Int32(46)&127)..=(Int32(-61)&127):((-15)|1)), ((Int32(56)&127)..=(Int32(-65)&127):((-87)|1)), ((Int32(58)&127)..=(Int32(-5)&127):(16|1)), ((Int32(-48)&127)..=(Int32(31)&127):((-47)|1)), ((Int32(-127)&127)..(Int32(108)&127):(69|1))], UInt64(107), ((UInt32(181)&127)..=(UInt32(209)&127):(53|1)))
    public func isClosed(): Bool { return false }
    public func close(): Unit {}
}



public struct Struct_1679164432996_62 {
    public init() { // block id: 64

    }
;
    public static var var_1679164432996_67 : Unit = ();
    public static prop var_1679164432996_195 : Int32 { // block id: 196
        get() { // block id: 198
            Int16(Int16(Int16(UInt8(95))));
            ();
            Int32(10)
        }

    };
    let var_1679164432996_255 : Int32 = Int32(-77)
}



public func func_1679164432996_206(param_1679164432996_207 : UInt8) : Int32 { // block id: 208
    var_1679164432996_212[0]
}

func func_1679164432996_268(param_1679164432996_269 : Range<Int16>) : Array<Int32> { // block id: 270
    match (((Int32(-59)&127)..=(Int32(80)&127):(16|1))) {
        case _ : Range<UInt32> => 
            ();
            ();
            if (var_1679164432996_280) { [Int32(-93), Int32(-34), Int32(64), Int32(14), Int32(58), Int32(-2), Int32(-76), Int32(-32), Int32(-101), Int32(-46)] } else { [Int32(-23), Int32(85), Int32(84), Int32(-55), Int32(115), Int32(103), Int32(57), Int32(71), Int32(-85), Int32(97)] } 
        
        case _ => 
            [var_1679164432996_289, Int32(-41), var_1679164432996_289, Int32(60), Int32(60), var_1679164432996_230, var_1679164432996_230, Int32(-28), var_1679164432996_289, var_1679164432996_300]
        
    }
}


public func func_1679164432996_163(param_1679164432996_164 : String) : Unit { // block id: 165
    let var_1679164432996_177 : Option<Unit> = Option<Unit>.Some(());
    (try { // block id: 172
        if (true) { Option<Unit>.None } else { var_1679164432996_177 } 
    } catch (e: Exception) { // block id: 180
        var_1679164432996_182;
        var_1679164432996_177
    } ?? ());
    var var_1679164432996_188 : Bool = (((UInt32(44)&127)..=(UInt32(133)&127):((-86)|1)) is Range<Int32>);
    var var_1679164432996_248 : Int16 = Int16(-100);
    var var_1679164432996_252 : Struct_1679164432996_62 = Struct_1679164432996_62();
    if (var_1679164432996_188) { [Struct_1679164432996_62.var_1679164432996_195, (UInt8(9)|>func_1679164432996_206), (UInt8(252)|>func_1679164432996_206), var_1679164432996_230, try { // block id: 233
        Option<Unit>.None;
        Int32(-43)
    } catch (_) { // block id: 236
        var_1679164432996_141;
        var var_1679164432996_240 : UInt64 = UInt64(237);
        var_1679164432996_240 /= ((UInt64(86)) | 1);
        Int32(24) << ((Int32(49)) & 7)
    }, Int32(var_1679164432996_248), var_1679164432996_252.var_1679164432996_255, func_1679164432996_206(UInt8(116)), var_1679164432996_230 * Int32(-42), Class_1679164432996_17.var_1679164432996_265] } else { (((Int16(108)&127)..=(Int16(21)&127):(96|1))|>func_1679164432996_268) } ;
    var loopTimeVar_1679164432996_332 : Int64 = 0;
    do {
        loopTimeVar_1679164432996_332++;

    } while (((var_1679164432996_313 ?? var_1679164432996_316)[1]) && loopTimeVar_1679164432996_332 < 100 ) 
}


func func_1679164432996_341() : Range<Int32> { // block id: 342
    var var_1679164432996_349 : Option<Option<(UInt8, Bool, Range<UInt32>, Unit, Bool)>> = (((UInt8(Int8(-103))&127)..=(UInt8(UInt8(Int8(53)))&127):((Int64(Int32(Int16(-51)))|1))) as Option<(UInt8, Bool, Range<UInt32>, Unit, Bool)>);
    (var_1679164432996_349 ?? match (if (true) { var_1679164432996_349 } else { var_1679164432996_349 } ) {
        case caseVar_1679164432996_367 : Option<(UInt8, Bool, Range<UInt32>, Unit, Bool)> => 
            Option<(UInt8, Bool, Range<UInt32>, Unit, Bool)>.Some((UInt8(72), var_1679164432996_280, ((var_1679164432996_9&127)..(UInt32(194)&127):((101|1))), (), var_1679164432996_280))
        
        case _ => 
            ();
            Option<(UInt8, Bool, Range<UInt32>, Unit, Bool)>.None
        
        case caseVar_1679164432996_386 : UInt64 => 
            var_1679164432996_313
        
        case _ => 
            UInt8(109);
            if (false) { var_1679164432996_313 } else { var_1679164432996_313 } 
        
    });
    var_1679164432996_397;
    var var_1679164432996_406 : Class_1679164432996_17 = Class_1679164432996_17();
    var_1679164432996_406.var_1679164432996_409[2][5]
}

public enum Enum_1679164432996_647 {
    defaultValue
}
func func_1679164432996_57() : Array<Int32> { // block id: 58
    let var_1679164432996_87 : Int16 = Int16(-96);
    try (resource = Class_1679164432996_17()) { // block id: 60
        Struct_1679164432996_62.var_1679164432996_67;
        var_1679164432996_70;
        let var_1679164432996_78 : Option<Unit> = Option<Unit>.Some(());
        let var_1679164432996_82 : Unit = ();
        (var_1679164432996_78 ?? var_1679164432996_82)
    } finally { // block id: 84
        var_1679164432996_87 & var_1679164432996_87;
        [77, (-98), (-58), 60, 75, (-98), 76, (-15), 105, (-41)][9];
        var var_1679164432996_102 : Int64 = Int64(Int32(-120));
        var loopTimeVar_1679164432996_106 : Int64 = 0;
        do {
            loopTimeVar_1679164432996_106++;
            var_1679164432996_99 += var_1679164432996_102
        } while ((false) && loopTimeVar_1679164432996_106 < 100 ) 
    };
    let var_1679164432996_111 : Int8 = Int8(-81);
    var var_1679164432996_122 : Option<Unit> = (((Int32(37)&127)..=(Int32(82)&127):((-29)|1)) as Unit);
    var var_1679164432996_134 : Bool = false;
    let var_1679164432996_631 : (Float64, UInt64, UInt64, Range<UInt8>, Range<UInt64>, Unit, Range<UInt32>) = (Float64(Float32(-106.0)), UInt64(136), UInt64(219), ((UInt8(209)&127)..(UInt8(Int8(96))&127):(((-70)|1))), ((UInt64(160)&127)..(UInt64(202)&127):(0|1)), (), ((UInt32(129)&127)..=(UInt32(151)&127):(59|1)));
    func func_1679164432996_338() : String { // block id: 339
        func_1679164432996_341();
        var var_1679164432996_435 : Array<Option<Unit>> = [Option<Unit>.None, (Float32(-117.0) as Unit), Option<Unit>.None, (((Int16(125)&127)..=(Int16(-57)&127):((Int64(UInt16(97))|1))) as Unit), Option<Unit>.Some(()), (Class_1679164432996_17() as Unit), Option<Unit>.None, Option<Unit>.Some(()), Option<Unit>.None, Option<Unit>.None];
        var var_1679164432996_486 : UInt64 = UInt64(176);
        var var_1679164432996_495 : ((Int32, Int16, String, Range<UInt8>, UInt16), Range<Int8>, Array<UInt64>, UInt16, Class_1679164432996_17, Range<Int64>) = ((Int32(UInt16(212)), Int16(Int8(-119)), "y2gN9p nZQ", ((UInt8(UInt8(175))&127)..(UInt8(24)&127):((76|1))), UInt16(UInt8(211))), ((Int8(34)&127)..(Int8(125)&127):(56|1)), [UInt64(54), UInt64(Int8(39)), UInt64(Int32(Int8(81))), UInt64(122), UInt64(UInt64(54)), UInt64(222), UInt64(Int32(Int32(-107))), UInt64(Int32(77)), UInt64(Int16(UInt8(249))), UInt64(135)], UInt16(UInt16(54)), Class_1679164432996_17(), (((-113)&127)..(Int64(UInt64(Int32(-121)))&127):((104|1))));
        let var_1679164432996_546 : String = "2ae/&qI/Cb";
        var var_1679164432996_557 : Range<Int8> = ((Int8(-9)&127)..=(Int8(105)&127):((-108)|1));
        var var_1679164432996_624 : Class_1679164432996_17 = Class_1679164432996_17();
        let var_1679164432996_650 : Enum_1679164432996_647 = Enum_1679164432996_647.defaultValue;
        if (match (var_1679164432996_435[7]) {
            case caseVar_1679164432996_459 : UInt64 => 
                var_1679164432996_141;
                (UInt8(27), true, ((UInt32(76)&127)..(var_1679164432996_9&127):(((-24)|1))), var_1679164432996_141, false);
                var_1679164432996_111 == var_1679164432996_111
            
            case _ => 
                if (false) { Option<Unit>.Some(()) } else { Option<Unit>.None } ;
                if (true) { ((UInt64(152)&127)..(var_1679164432996_486&127):((var_1679164432996_99|1))) } else { ((UInt64(173)&127)..(UInt64(250)&127):((-56)|1)) } ;
                var_1679164432996_280
            
        }) { // block id: 491
            var_1679164432996_495[4];
            try { // block id: 542
                ();
                var_1679164432996_141;
                var_1679164432996_546
            } finally { // block id: 548
                var var_1679164432996_560 : Array<UInt64> = [UInt64(UInt8(UInt8(Int8(8)))), UInt64(Int16(-31)), UInt64(8), UInt64(UInt8(UInt8(Int8(-64)))), UInt64(108), UInt64(Int8(-55)), UInt64(UInt8(UInt8(Int8(19)))), UInt64(Int32(UInt16(UInt16(172)))), UInt64(215), UInt64(UInt64(31))];
                ((var_1679164432996_300, Int16(78), """
89xP=
:_p^V
""", ((UInt8(232)&127)..=(UInt8(50)&127):(84|1)), UInt16(44)), var_1679164432996_557, var_1679164432996_560, UInt16(125), Class_1679164432996_17(), (((-5)&127)..((-31)&127):((114|1))));
                var_1679164432996_289;
                var_1679164432996_546
            }
        } else if ((var_1679164432996_313 is (UInt8) -> Int32)) { // block id: 598
            var var_1679164432996_604 : UInt8 = UInt8(15);
            (((var_1679164432996_604&127)..(var_1679164432996_604&127):((11|1))), var_1679164432996_280, [Int32(43), Int32(120), Int32(49), Int32(70), Int32(-46), Int32(124), Int32(-107), Int32(126), Int32(-127), Int32(-38)])[2];
            try { // block id: 612
                if (var_1679164432996_280) { var_1679164432996_546 } else { "o_9$b~39<h" } 
            } catch (e: Exception) { // block id: 617
                if (var_1679164432996_280) { ###"fplN=U\\1nW"### } else { """
H[;/O
\\bX~e
""" } 
            } finally { // block id: 622
                var_1679164432996_624;
                """
r|$28
1t`\"6
"""
            }
        } else { // block id: 627
            var_1679164432996_631[4];
            match (var_1679164432996_650) {
                case _ => 
                    var_1679164432996_657 = 65.0;
                    if (false) { var_1679164432996_147 } else { Option<Unit>.Some(var_1679164432996_141) } 
                
                case _ => 
                    var_1679164432996_486 >>= ((var_1679164432996_486) & 7);
                    Option<Unit>.Some(())
                
                case defaultValue => 
                    var var_1679164432996_678 : UInt32 = UInt32(52);
                    var_1679164432996_678 &= var_1679164432996_678;
                    UInt64(27) + UInt64(74);
                    var_1679164432996_147
                
                case _ => 
                    Float32(42.0) * Float32(27.0);
                    var_1679164432996_486 += var_1679164432996_486;
                    if (var_1679164432996_280) { Option<Unit>.Some(()) } else { Option<Unit>.None } 
                
                case _ => 
                    ();
                    var_1679164432996_486 |= UInt64(32);
                    Option<Unit>.None
                
            };
            ["NGimq#atB\\", "rDCa'7%Kl`", "T!%57A_e:B", "kD\\b4Q_e<l", "J.?CMgKr3S", ###"1s\"`Z$`oF/"###, ###"S68UiFYtQJ"###, """
T?ik>
V2Q:+
""", """
7;'dU
*E'5A
""", """
f:|Ik
a8g%h
"""][9]
        }
    }
;
    (match (var_1679164432996_111 & Int8(-19)) {
        case -6 | 77 | -14 => 
            if (false) { Option<Unit>.Some(()) } else { var_1679164432996_122 } 
        
        case _ : Array<UInt64> => 
            Option<Unit>.None
        
        case 80 => 
            var var_1679164432996_137 : Rune = '4';
            if (var_1679164432996_134) { var_1679164432996_137 } else { var_1679164432996_137 } ;
            var_1679164432996_141;
            if (true) { var_1679164432996_122 } else { var_1679164432996_147 } 
        
        case _ => 
            Option<Unit>.Some(var_1679164432996_141)
        
        case _ => 
            Option<Unit>.None;
            ((Int16(-88)&127)..(Int16(71)&127):((-111)|1));
            if (var_1679164432996_134) { Option<Unit>.None } else { Option<Unit>.None } 
        
    } ?? (func_1679164432996_338()|>{ lambdaParameter_1679164432996_335 : String =>  }));
    var var_1679164432996_717 : (Range<UInt8>, Bool, Array<Int32>) = (((UInt8(UInt8(Int8(69)))&127)..(UInt8(Int8(UInt8(57)))&127):((Int64(UInt64(64))|1))), true, [Int32(-72), Int32(105), Int32(UInt32(90)), Int32(-47), Int32(Int16(-76)), Int32(UInt32(108)), Int32(Int16(Int16(70))), Int32(-72), Int32(UInt32(Int16(114))), Int32(-49)]);
    var var_1679164432996_750 : Int8 = Int8(Int8(Int8(-44)));
    var var_1679164432996_766 : Int32 = Int32(UInt32(87));
    let var_1679164432996_807 : Array<Range<Int32>> = [((Int32(-99)&127)..(Int32(107)&127):(70|1)), ((Int32(-111)&127)..=(Int32(Int8(25))&127):((32|1))), ((Int32(89)&127)..(Int32(-128)&127):((-56)|1)), ((Int32(84)&127)..(Int32(-28)&127):((-2)|1)), ((Int32(-12)&127)..(Int32(108)&127):((-7)|1)), ((Int32(-26)&127)..=(Int32(30)&127):((-25)|1)), ((Int32(105)&127)..=(Int32(-22)&127):((-52)|1)), ((Int32(Int16(86))&127)..=(Int32(Int32(Int32(-40)))&127):((Int64(UInt64(UInt8(130)))|1))), ((Int32(Int8(Int8(-107)))&127)..(Int32(-21)&127):((Int64(UInt16(88))|1))), ((Int32(-103)&127)..(Int32(-13)&127):((-67)|1))];
    if (try { // block id: 713
        ();
        var_1679164432996_141;
        var_1679164432996_717
    } catch (e: Exception) { // block id: 747
        var_1679164432996_750 %= ((var_1679164432996_111) | 1);
        ();
        (((var_1679164432996_759&127)..=(var_1679164432996_759&127):((var_1679164432996_99|1))), false, [var_1679164432996_766, var_1679164432996_766, var_1679164432996_230, var_1679164432996_230, Int32(-127), var_1679164432996_289, Int32(-111), Int32(-126), Int32(78), var_1679164432996_289])
    }[1]) { try { // block id: 782
        ();
        var_1679164432996_141;
        if (var_1679164432996_280) { [[Int32(-108), Int32(108), Int32(26), Int32(37), Int32(-11), Int32(38), Int32(20), Int32(104), Int32(10), Int32(120)], [Int32(-75), Int32(62), Int32(-113), Int32(-84), Int32(-49), Int32(79), Int32(-9), Int32(74), Int32(19), Int32(41)], [Int32(-112), Int32(-54), Int32(-57), Int32(-14), Int32(-18), Int32(110), Int32(109), Int32(-19), Int32(30), Int32(37)], [Int32(-64), Int32(126), Int32(105), Int32(-86), Int32(71), Int32(119), Int32(89), Int32(-9), Int32(-38), Int32(18)], [Int32(-108), Int32(-111), Int32(50), Int32(-58), Int32(-104), Int32(3), Int32(94), Int32(105), Int32(0), Int32(58)], [Int32(-100), Int32(93), Int32(-111), Int32(108), Int32(111), Int32(-92), Int32(-55), Int32(-85), Int32(-20), Int32(-81)], [Int32(-113), Int32(-3), Int32(99), Int32(18), Int32(58), Int32(39), Int32(-24), Int32(-53), Int32(-8), Int32(-7)], [Int32(-46), Int32(-103), Int32(-88), Int32(12), Int32(-75), Int32(105), Int32(73), Int32(66), Int32(-61), Int32(106)], [Int32(-11), Int32(-105), Int32(14), Int32(14), Int32(81), Int32(-42), Int32(77), Int32(103), Int32(-95), Int32(8)], [Int32(44), Int32(46), Int32(121), Int32(100), Int32(105), Int32(125), Int32(66), Int32(-114), Int32(36), Int32(41)]] } else { [[Int32(-43), Int32(-125), Int32(-50), Int32(20), Int32(4), Int32(-23), Int32(-78), Int32(-117), Int32(-73), Int32(124)], [Int32(-12), Int32(-11), Int32(-50), Int32(-124), Int32(-14), Int32(87), Int32(-110), Int32(-111), Int32(123), Int32(76)], [Int32(75), Int32(104), Int32(103), Int32(-101), Int32(44), Int32(-102), Int32(-91), Int32(78), Int32(-49), Int32(73)], [Int32(36), Int32(-80), Int32(-113), Int32(-77), Int32(-85), Int32(98), Int32(80), Int32(36), Int32(-106), Int32(-16)], [Int32(-22), Int32(-77), Int32(-80), Int32(90), Int32(65), Int32(89), Int32(58), Int32(77), Int32(45), Int32(-23)], [Int32(1), Int32(27), Int32(91), Int32(-37), Int32(86), Int32(71), Int32(-43), Int32(54), Int32(51), Int32(34)], [Int32(-17), Int32(54), Int32(-112), Int32(-24), Int32(37), Int32(-9), Int32(4), Int32(-123), Int32(-113), Int32(7)], [Int32(90), Int32(-120), Int32(121), Int32(101), Int32(62), Int32(13), Int32(-89), Int32(2), Int32(-41), Int32(87)], [Int32(37), Int32(41), Int32(27), Int32(48), Int32(2), Int32(-54), Int32(66), Int32(-14), Int32(105), Int32(-58)], [Int32(-41), Int32(74), Int32(78), Int32(-87), Int32(-99), Int32(86), Int32(23), Int32(96), Int32(-38), Int32(119)]] } 
    } finally { // block id: 789
        [var_1679164432996_147, var_1679164432996_147, var_1679164432996_122, Option<Unit>.Some(()), Option<Unit>.Some(()), Option<Unit>.Some(var_1679164432996_141), Option<Unit>.Some(var_1679164432996_141), var_1679164432996_122, var_1679164432996_147, Option<Unit>.Some(())];
        var_1679164432996_807;
        let var_1679164432996_839 : Bool = ((UInt8(Int8(Int8(20))), false, ((UInt32(243)&127)..=(UInt32(UInt16(129))&127):(((-13)|1))), (), (Class_1679164432996_17() is UInt16)) is Range<Int16>);
        if (var_1679164432996_839) { [[Int32(-1), Int32(49), Int32(-46), Int32(-122), Int32(21), Int32(48), Int32(-93), Int32(111), Int32(28), Int32(-6)], [Int32(120), Int32(-35), Int32(-97), Int32(-52), Int32(-5), Int32(-101), Int32(-85), Int32(94), Int32(-45), Int32(3)], [Int32(-48), Int32(-59), Int32(121), Int32(1), Int32(9), Int32(120), Int32(-11), Int32(-109), Int32(98), Int32(-51)], [Int32(54), Int32(97), Int32(-110), Int32(23), Int32(-92), Int32(-90), Int32(4), Int32(-94), Int32(111), Int32(-65)], [Int32(-47), Int32(-33), Int32(-12), Int32(59), Int32(-21), Int32(-122), Int32(-121), Int32(-64), Int32(119), Int32(-92)], [Int32(39), Int32(57), Int32(86), Int32(-6), Int32(-21), Int32(44), Int32(31), Int32(41), Int32(-103), Int32(-64)], [Int32(10), Int32(-34), Int32(-56), Int32(111), Int32(-75), Int32(-33), Int32(56), Int32(93), Int32(68), Int32(-116)], [Int32(-28), Int32(-65), Int32(-53), Int32(107), Int32(118), Int32(37), Int32(66), Int32(42), Int32(9), Int32(-75)], [Int32(77), Int32(-111), Int32(113), Int32(-119), Int32(102), Int32(7), Int32(-59), Int32(25), Int32(-116), Int32(-100)], [Int32(-38), Int32(-122), Int32(41), Int32(2), Int32(-120), Int32(-30), Int32(-52), Int32(-64), Int32(-41), Int32(-76)]] } else { [[Int32(-52), Int32(-66), Int32(123), Int32(36), Int32(-63), Int32(-1), Int32(19), Int32(-93), Int32(-41), Int32(-89)], [Int32(-7), Int32(-111), Int32(-17), Int32(-102), Int32(-77), Int32(-61), Int32(-33), Int32(-113), Int32(123), Int32(84)], [Int32(-43), Int32(16), Int32(55), Int32(-72), Int32(126), Int32(81), Int32(-79), Int32(-3), Int32(-118), Int32(-71)], [Int32(36), Int32(69), Int32(69), Int32(-32), Int32(-52), Int32(116), Int32(102), Int32(-85), Int32(-38), Int32(-124)], [Int32(-93), Int32(11), Int32(6), Int32(100), Int32(62), Int32(109), Int32(97), Int32(74), Int32(108), Int32(81)], [Int32(88), Int32(-58), Int32(14), Int32(118), Int32(55), Int32(-64), Int32(-105), Int32(94), Int32(114), Int32(98)], [Int32(63), Int32(120), Int32(15), Int32(83), Int32(118), Int32(-96), Int32(-54), Int32(28), Int32(121), Int32(106)], [Int32(115), Int32(43), Int32(61), Int32(-113), Int32(22), Int32(79), Int32(-14), Int32(108), Int32(-33), Int32(-69)], [Int32(107), Int32(74), Int32(-9), Int32(-75), Int32(-14), Int32(-6), Int32(46), Int32(-115), Int32(70), Int32(-99)], [Int32(69), Int32(45), Int32(67), Int32(80), Int32(13), Int32(102), Int32(-40), Int32(-36), Int32(-117), Int32(-113)]] } 
    }[0] } else { try { // block id: 858
        var_1679164432996_300 -= Int32(71);
        var_1679164432996_70
    } finally { // block id: 863
        if (true) { var_1679164432996_122 } else { Option<Unit>.None } ;
        if (var_1679164432996_280) { var_1679164432996_70 } else { var_1679164432996_70 } 
    } } 
}

public func func_1679164432996_22() : Class_1679164432996_17 { // block id: 23
    var var_1679164432996_37 : Option<Option<Int32>> = Option<Option<Int32>>.None;
    var var_1679164432996_41 : Option<Option<Int32>> = Option<Option<Int32>>.None;
    ((try { // block id: 35
        var_1679164432996_37
    } finally { // block id: 39
        var_1679164432996_41
    } ?? (true as Int32)) ?? func_1679164432996_57()[6]);
    let var_1679164432996_876 : Class_1679164432996_17 = Class_1679164432996_17();
    try { // block id: 874
        var_1679164432996_876
    } catch (_) { // block id: 878
        var_1679164432996_876
    } finally { // block id: 880
        var_1679164432996_876
    }
}

main(): Int64 {
    try {
        if ((var_1679164432996_9 is Float32)) { // block id: 15

        };
        func_1679164432996_22().var_1679164432996_883
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Class_1679164432996_17 {

}

extend Enum_1679164432996_647 {

}

extend Struct_1679164432996_62 {

}

