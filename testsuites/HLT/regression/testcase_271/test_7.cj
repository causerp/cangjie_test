/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC-PIPE: %run %run_opt %output %run_args 

let var_1679169981416_16 : Unit = ()
public var var_1679169981416_43 : Bool = true
public let var_1679169981416_53 : Bool = (((UInt64(234)&127)..(UInt64(178)&127):((-6)|1)) is Float32)
public let var_1679169981416_86 : Int8 = Int8(-71)
let var_1679169981416_95 : ?Array<Bool> = (((UInt64(82)&127)..(UInt64(47)&127):((-47)|1)) as Array<Bool>)
let var_1679169981416_248 : Range<UInt32> = ((UInt32(204)&127)..=(UInt32(49)&127):((-107)|1))
let var_1679169981416_251 : Unit = ()
var var_1679169981416_254 : UInt16 = UInt16(32)
public var var_1679169981416_295 : (Interface_1679169981416_142, Range<Int32>) = (Class_1679169981416_137(), ((Int32(98)&127)..=(Int32(120)&127):(92|1)))
public var var_1679169981416_312 : Int64 = (-46)
public var var_1679169981416_341 : UInt32 = UInt32(Int8(Int8(-14)))
public var var_1679169981416_358 : (UInt8, Range<UInt32>, Float32, Int64, UInt8, Range<UInt32>, Float64) = (UInt8(Int8(-56)), ((UInt32(6)&127)..=(UInt32(5)&127):(74|1)), Float32(-60.0), Int64(Int64(UInt32(41))), UInt8(UInt8(Int8(UInt8(172)))), ((UInt32(144)&127)..(UInt32(238)&127):((-118)|1)), (-3.0))
var var_1679169981416_491 : Interface_1679169981416_140<Option<Int64>> = Class_1679169981416_137()
public var var_1679169981416_542 : Bool = (((UInt16(UInt16(132))&127)..(UInt16(UInt8(UInt8(72)))&127):((Int64(Int32(64))|1))) is Array<Unit>)
public let var_1679169981416_560 : Float32 = Float32(-44.0)
public var var_1679169981416_608 : Array<Bool> = [true, true, true, true, false, true, false, false, false, true]
public var var_1679169981416_622 : Bool = (((15&127)..(87&127):(41|1)) is Int8)
public let var_1679169981416_709 : Array<Bool> = [(UInt8(UInt8(UInt8(71))) is Struct_1679169981416_185<Int8>), true, true, (Option<Rune>.None is Struct_1679169981416_185<Int8>), true, (Option<Unit>.None is (Option<Range<Int8>>, String, Range<Int32>) -> Rune), (Float32(Float32(-100.0)) is Int16), false, false, true]
public var var_1679169981416_759 : UInt8 = UInt8(197)
var var_1679169981416_846 : (Range<UInt16>, Int32, Range<Int64>, Bool, Bool, Range<UInt32>, Array<Array<Bool>>) = (((UInt16(85)&127)..=(UInt16(171)&127):((-108)|1)), Int32(UInt16(UInt8(UInt8(141)))), ((Int64(UInt8(Int8(-65)))&127)..=((-8)&127):((Int64(UInt16(Int8(60)))|1))), false, (((UInt32(9)&127)..(UInt32(227)&127):((-57)|1)) is UInt32), ((UInt32(20)&127)..(UInt32(73)&127):((-27)|1)), [[false, (Option<Range<Int8>>.None is (UInt16) -> Rune), true, (() is Int8), (() is Range<Int64>), false, (((Int8(-1)&127)..(Int8(93)&127):(126|1)) is UInt32), false, true, (UInt16(202) is Bool)], [true, true, true, true, true, false, true, true, true, true], [(Option<Range<Int8>>.None is Range<Int32>), true, false, (Option<UInt8>.None is Option<Array<Bool>>), (Option<Rune>.None is Array<Array<Bool>>), (((Int8(-121)&127)..=(Int8(-108)&127):(75|1)) is Range<Int32>), ((-11.0) is (UInt16) -> Rune), false, (((UInt16(118)&127)..(UInt16(112)&127):(65|1)) is Int64), false], [false, ((((UInt16(10)&127)..(UInt16(117)&127):((125|1))), Int32(-87), (((-73)&127)..=((-123)&127):((-127)|1)), true, false, ((UInt32(170)&127)..=(UInt32(136)&127):(33|1)), [[true, true, false, false, false, true, true, false, true, false], [true, false, true, true, true, false, true, true, false, false], [false, false, true, true, false, true, false, false, true, false], [false, false, true, false, false, true, false, false, false, true], [true, false, false, false, true, true, false, true, true, true], [true, true, true, false, true, true, true, true, false, true], [true, true, false, false, false, true, true, false, true, true], [true, true, true, false, false, true, false, false, true, true], [true, true, false, true, true, true, true, false, false, true], [false, true, true, false, true, true, true, false, true, true]]) is (Array<Bool>) -> UInt32), true, (true is Class_1679169981416_137), (Class_1679169981416_137() is Bool), (Option<Range<Int8>>.None is (Option<Range<Int8>>, String, Range<Int32>) -> Rune), (Option<Float32>.None is () -> UInt8), false, false, true], [true, true, false, false, true, false, true, true, false, true], [true, true, true, false, false, false, false, true, true, true], [(((UInt64(94)&127)..=(UInt64(56)&127):(((-12)|1))) is (UInt16) -> Rune), false, ((((UInt16(85)&127)..=(UInt16(5)&127):(100|1)), Int32(120), (((-42)&127)..((-23)&127):(126|1)), true, true, ((UInt32(22)&127)..=(UInt32(112)&127):((-19)|1)), [[true, true, true, false, true, true, true, true, false, true], [true, true, false, true, false, false, false, true, true, false], [true, true, true, false, true, true, true, false, true, true], [true, false, false, true, true, true, false, false, true, false], [true, true, true, true, false, false, false, false, true, true], [false, true, true, false, false, true, true, true, true, true], [false, false, false, true, true, false, true, false, false, false], [true, false, true, true, false, true, true, false, true, false], [true, false, true, true, true, true, false, false, false, false], [true, true, false, false, true, true, false, false, false, false]]) is (Range<UInt16>, Int32, Range<Int64>, Bool, Bool, Range<UInt32>, Array<Array<Bool>>)), (Class_1679169981416_137() is Option<Range<Int64>>), true, false, false, true, (Option<UInt8>.None is Range<UInt8>), true], [true, true, false, (((Int16(-1)&127)..(Int16(57)&127):((10|1))) is Range<Int8>), true, (Option<Range<Int64>>.None is Option<Array<Bool>>), true, ([[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]] is (Range<UInt32>, Unit, UInt16, (UInt8, Range<UInt32>, Float32, Int64, UInt8, Range<UInt32>, Float64), Range<UInt32>)), true, ([UInt64(219), UInt64(152), UInt64(28), UInt64(86), UInt64(219), UInt64(225), UInt64(188), UInt64(177), UInt64(6), UInt64(96)] is Float32)], [false, true, true, false, false, true, true, true, false, true], [true, true, (UInt8(112) is Range<Int64>), (((UInt32(103)&127)..=(UInt32(144)&127):((123|1))) is (UInt16) -> Rune), ((((UInt16(7)&127)..(UInt16(52)&127):(76|1)), Int32(-13), ((19&127)..((-127)&127):(84|1)), true, false, ((UInt32(16)&127)..(UInt32(106)&127):((61|1))), [[false, true, true, false, true, false, true, false, true, false], [true, true, true, true, true, false, true, false, false, true], [true, false, false, true, false, false, true, false, true, false], [false, false, false, true, true, false, false, false, true, false], [false, false, true, true, false, true, false, false, false, false], [true, false, true, false, false, true, false, true, true, false], [true, false, false, false, true, true, true, false, true, false], [false, true, true, false, false, false, false, false, true, false], [false, false, true, false, false, false, false, false, true, true], [true, false, false, false, true, false, true, false, false, true]]) is (Range<UInt32>, Unit, UInt16, (UInt8, Range<UInt32>, Float32, Int64, UInt8, Range<UInt32>, Float64), Range<UInt32>)), (false is Int16), (((UInt64(84)&127)..=(UInt64(131)&127):((57|1))) is UInt16), false, (Class_1679169981416_137() is Int32), (Int16(-120) is Option<UInt8>)]])
public var var_1679169981416_1442 : (Float64, Option<Int64>, Range<Int64>) = ((-63.0), ([(), (), (), (), (), (), (), (), (), ()] as Int64), ((47&127)..((-111)&127):((-102)|1)))
let var_1679169981416_1632 : UInt64 = UInt64(73)
public var var_1679169981416_1699 : UInt64 = UInt64(186)
public let var_1679169981416_1703 : Interface_1679169981416_142 = Class_1679169981416_137()
public let var_1679169981416_1735 : Rune = r'l'




public interface Interface_1679169981416_141<T0> {

}

public interface Interface_1679169981416_142 {

}

public interface Interface_1679169981416_140<T0> <: Interface_1679169981416_141<Range<Int16>> & Interface_1679169981416_142 {

}

public open class Class_1679169981416_137 <: Interface_1679169981416_140<Option<Int64>> & Interface_1679169981416_142 {
    public init() { // block id: 139

    }
;
    mut prop var_1679169981416_147 : UInt16 { // block id: 148
        get() { // block id: 150
            ();
            [UInt64(69), UInt64(225), UInt64(41), UInt64(140), UInt64(72), UInt64(221), UInt64(71), UInt64(210), UInt64(96), UInt64(74)];
            UInt16(Int8(UInt8(199)));
            var_1679169981416_1751
        }

        set(Value) { // block id: 158
            ();
            ();
            ();
            var_1679169981416_1751 = Value
        }

    };
    static mut prop var_1679169981416_213 : ?Unit { // block id: 214
        get() { // block id: 216
            (() is UInt8);
            UInt64(Int16(-122));
            (UInt16(Int16(113)) as Unit)
        }

        set(Value) { // block id: 226
            ();
            ()
        }

    };
    static let var_1679169981416_265 : UInt8 = UInt8(141);
    public static func func_1679169981416_202<T0, T1, T2>(param_1679169981416_203 : Float64, param_1679169981416_204 : Range<UInt64>, optionalParam_1679169981416_205 ! : UInt16 = UInt16(UInt8(143)), optionalParam_1679169981416_208 ! : Option<Range<Int8>> = (((UInt32(45)&127)..=(UInt32(138)&127):((-113)|1)) as Range<Int8>)) : UInt8 { // block id: 211
        var_1679169981416_213;
        let var_1679169981416_260 : Float32 = Float32(Float32(95.0));
        (((Option<Float32>.None ?? Float32(46.0)) as UInt8) ?? (var_1679169981416_248, var_1679169981416_251, var_1679169981416_254, (UInt8(185), ((UInt32(21)&127)..=(UInt32(208)&127):((-104)|1)), var_1679169981416_260, 17, var_1679169981416_265, ((UInt32(95)&127)..=(UInt32(218)&127):(124|1)), (-107.0)), var_1679169981416_248)[3][4])
    }
;
    public init(param_1679169981416_473 : UInt32, param_1679169981416_474 : Range<Int32>, param_1679169981416_475 : Range<UInt32>, param_1679169981416_476 : Float32) { // block id: 477
        var var_1679169981416_495 : Array<Array<Unit>> = [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]];
        try { // block id: 483
            var_1679169981416_254 %= ((UInt16(228)) | 1);
            ();
            [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]]
        } catch (_) { // block id: 489
            var_1679169981416_491;
            Class_1679169981416_137();
            var_1679169981416_495
        } finally { // block id: 527
            var_1679169981416_251;
            [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]]
        }[3][9];
        var loopTimeVar_1679169981416_569 : Range<UInt64> = ((UInt64(0)&127)..(UInt64(Int8(UInt8(179)))&127):(((-106)|1)));
        for (i in loopTimeVar_1679169981416_569 where try { // block id: 534
            var_1679169981416_251;
            ((var_1679169981416_341&127)..(UInt32(79)&127):((var_1679169981416_312|1)));
            var_1679169981416_542 || true
        } finally { // block id: 553
            var_1679169981416_312 <<= (((-120)) & 7);
            Float32(-91.0) > var_1679169981416_560
        }) {
            var loopTimeVar_1679169981416_567 : Int64 = 0;
            while ((true) && loopTimeVar_1679169981416_567 < 100 ) {
                loopTimeVar_1679169981416_567++;

            };
            ()
        }
    }
;
    static prop var_1679169981416_815 : Bool { // block id: 816
        get() { // block id: 818
            (UInt16(145) is Array<Array<Unit>>)
        }

    };
    public init(param_1679169981416_688 : Option<Rune>, optionalParam_1679169981416_689 ! : Float32 = Float32(44.0)) { // block id: 691
        let var_1679169981416_750 : UInt32 = UInt32(UInt8(17));
        var var_1679169981416_782 : Float64 = (-14.0);
        let var_1679169981416_790 : Option<Float32> = (() as Float32);
        let var_1679169981416_803 : Bool = (Struct_1679169981416_185<Int8>() is UInt16);
        let var_1679169981416_823 : ?Range<Int8> = Option<Range<Int8>>.None;
        match ([[var_1679169981416_542, false, true, var_1679169981416_622, var_1679169981416_43, var_1679169981416_53, var_1679169981416_622, var_1679169981416_542, var_1679169981416_542, var_1679169981416_53][9], var_1679169981416_709[5], match (Enum_1679169981416_730<UInt32, Option<Array<UInt64>>>.defaultValue) {
            case _ => 
                ();
                ();
                var_1679169981416_622
            
            case _ => 
                if (var_1679169981416_43) { ((UInt32(112)&127)..=(UInt32(213)&127):((14|1))) } else { ((var_1679169981416_750&127)..(var_1679169981416_750&127):((39|1))) } ;
                if (false) { ((var_1679169981416_759&127)..(UInt8(170)&127):(((-101)|1))) } else { ((UInt8(234)&127)..(UInt8(9)&127):(30|1)) } ;
                var_1679169981416_53 && var_1679169981416_43
            
            case _ => 
                var var_1679169981416_774 : Int64 = (-52);
                (var_1679169981416_759, ((UInt32(202)&127)..(UInt32(25)&127):((-88)|1)), Float32(-30.0), var_1679169981416_774, var_1679169981416_759, ((UInt32(245)&127)..=(UInt32(27)&127):((var_1679169981416_312|1))), var_1679169981416_782);
                var_1679169981416_542
            
        }, var_1679169981416_53 || var_1679169981416_542, (var_1679169981416_790 is (Array<Bool>) -> UInt32), [false, true, true, var_1679169981416_542, false, true, var_1679169981416_542, var_1679169981416_803, var_1679169981416_53, false][8], (Option<Float32>.Some(Float32(112.0)) is (Option<Range<Int8>>, String, Range<Int32>) -> Rune), Class_1679169981416_137.var_1679169981416_815, match (var_1679169981416_823) {
            case _ => 
                var var_1679169981416_830 : Bool = true;
                var_1679169981416_830 &&= var_1679169981416_53;
                false
            
            case _ => 
                ((Int8(59)&127)..(Int8(24)&127):((-30)|1));
                UInt16(162);
                var_1679169981416_622
            
            case _ => 
                true
            
        }, var_1679169981416_846[4]]) {
            case _ => 
                var_1679169981416_251;
                ();
                ()
            
        }
    }
;
    mut prop var_1679169981416_1751 : UInt16 { // block id: 1752
        get() { // block id: 1754
            ();
            ((UInt8(12)&127)..=(UInt8(UInt8(UInt8(200)))&127):((Int64(UInt16(Int16(109)))|1)));
            UInt16(UInt8(Int8(121)))
        }

        set(Value) { // block id: 1769
            ((Int16(121)&127)..=(Int16(-30)&127):((Int64(UInt64(227))|1)));
            ((UInt16(83)&127)..(UInt16(UInt8(UInt8(38)))&127):(((-66)|1)));
            ()
        }

    }
}

public struct Struct_1679169981416_185<T0> {
    public init() { // block id: 187

    }
;
    static let var_1679169981416_190 : UInt8 = UInt8(177);
    public static prop var_1679169981416_1740 : Float32 { // block id: 1741
        get() { // block id: 1743
            ();
            ();
            Float32(-41.0)
        }

    }
}



func func_1679169981416_193(param_1679169981416_194 : Interface_1679169981416_142) : UInt8 { // block id: 195
    let var_1679169981416_284 : Float64 = Float64(Float32(-45.0));
    func func_1679169981416_197<T0>() : UInt8 { // block id: 198
        var var_1679169981416_278 : Int8 = Int8(-25);
        Class_1679169981416_137.func_1679169981416_202<Range<UInt32>, Int64, UInt16>(try { // block id: 273
            87.0
        } finally { // block id: 275
            var_1679169981416_278 = var_1679169981416_278;
            ();
            var_1679169981416_284 / Float64((Int32(58.0)) | 1)
        }, ((UInt64(124)&127)..(UInt64(83)&127):((-58)|1)), optionalParam_1679169981416_205 : UInt16(Int8(28)))
    }
;
    func_1679169981416_197<UInt32>()
}


public func func_1679169981416_180(param_1679169981416_181 : Array<Bool>) : UInt32 { // block id: 182
    (Struct_1679169981416_185<Int8>.var_1679169981416_190) ^ (var_1679169981416_295[0]|>func_1679169981416_193);
    var var_1679169981416_336 : UInt8 = UInt8(Int8(-35));
    let var_1679169981416_353 : Range<UInt32> = ((UInt32(46)&127)..(UInt32(186)&127):((-25)|1));
    try { // block id: 301
        var var_1679169981416_317 : Int64 = (-97);
        (Option<Range<Int64>>.Some((((-66)&127)..=(18&127):((var_1679169981416_312|1)))) ?? ((var_1679169981416_312&127)..=(var_1679169981416_317&127):((var_1679169981416_317|1))));
        let var_1679169981416_322 : UInt32 = UInt32(UInt16(233));
        UInt32(var_1679169981416_322)
    } catch (e: Exception) { // block id: 325
        var loopTimeVar_1679169981416_330 : Int64 = 0;
        while ((true) && loopTimeVar_1679169981416_330 < 100 ) {
            loopTimeVar_1679169981416_330++;

        };
        try { // block id: 332
            ();
            var_1679169981416_336 = UInt8(240);
            var_1679169981416_341
        } finally { // block id: 345
            var_1679169981416_251;
            UInt32(150)
        }
    } finally { // block id: 348
        let var_1679169981416_375 : (Range<UInt32>, Unit, UInt16, (UInt8, Range<UInt32>, Float32, Int64, UInt8, Range<UInt32>, Float64), Range<UInt32>) = (((UInt32(211)&127)..(UInt32(139)&127):(125|1)), (), UInt16(UInt8(UInt8(Int8(126)))), (UInt8(Int8(88)), ((UInt32(Int32(65))&127)..=(UInt32(122)&127):((116|1))), Float32(Float32(120.0)), Int64(Int16(-102)), UInt8(UInt8(50)), ((UInt32(239)&127)..=(UInt32(74)&127):((-12)|1)), Float64(35.0)), ((UInt32(79)&127)..=(UInt32(63)&127):((10|1))));
        if (false) { (var_1679169981416_353, (), var_1679169981416_254, var_1679169981416_358, ((UInt32(155)&127)..=(UInt32(156)&127):((-113)|1))) } else { var_1679169981416_375 } ;
        let var_1679169981416_407 : Rune = r'm';
        let var_1679169981416_413 : ?Range<Int8> = Option<Range<Int8>>.Some(((Int8(Int8(Int8(-64)))&127)..=(Int8(Int8(Int8(-81)))&127):((Int64(Int32(UInt8(136)))|1))));
        try { // block id: 405
            var_1679169981416_407;
            Option<Rune>.None;
            if (var_1679169981416_53) { var_1679169981416_413 } else { var_1679169981416_413 } 
        } finally { // block id: 426
            if (var_1679169981416_53) { Option<Range<Int8>>.Some(((Int8(-32)&127)..(Int8(119)&127):(40|1))) } else { Option<Range<Int8>>.Some(((Int8(119)&127)..=(Int8(-83)&127):((var_1679169981416_312|1)))) } 
        };
        if (false) { // block id: 438
            ();
            var_1679169981416_341
        } else { // block id: 441
            var var_1679169981416_444 : Int16 = Int16(Int8(UInt8(Int8(Int8(-42)))));
            var_1679169981416_444 -= var_1679169981416_444;
            var_1679169981416_444 >>= ((var_1679169981416_444) & 7);
            UInt32(176)
        }
    }
}

public func func_1679169981416_76(param_1679169981416_77 : Int16) : Option<Array<Bool>> { // block id: 78
    func func_1679169981416_120(namedParam_1679169981416_121 ! : UInt16) : Rune { // block id: 122
        try { // block id: 124
            Option<Rune>.None.getOrThrow()
        } finally { // block id: 131
            if (true) { r'p' } else { r'L' } 
        }
    }
;
    let var_1679169981416_144 : Class_1679169981416_137 = Class_1679169981416_137();
    func func_1679169981416_113<T0>(namedParam_1679169981416_114 ! : Option<Range<Int8>>, namedParam_1679169981416_115 ! : T0, optionalParam_1679169981416_116 ! : Range<Int32> = ((Int32(55)&127)..=(Int32(-107)&127):(112|1))) : Rune { // block id: 118
        func_1679169981416_120(namedParam_1679169981416_121 : var_1679169981416_144.var_1679169981416_147)
    }
;
    let var_1679169981416_164 : String = """
jY)#f
ymKF0
""";
    try { // block id: 80
        if (false) { ((Int8(-32)&127)..=(Int8(-30)&127):((-11)|1)) } else { ((var_1679169981416_86&127)..(var_1679169981416_86&127):((32|1))) } 
    } catch (e: Exception) { // block id: 90
        ();
        if (var_1679169981416_53) { var_1679169981416_95 } else { Option<Array<Bool>>.Some([false, false, false, true, true, true, false, false, true, true]) } ;
        (Option<Range<Int8>>.Some(((Int8(12)&127)..=(var_1679169981416_86&127):(((-100)|1)))) ?? ((Int8(-118)&127)..=(Int8(-30)&127):(91|1)))
    } finally { // block id: 111
        func_1679169981416_113<String>(namedParam_1679169981416_114 : Option<Range<Int8>>.None, namedParam_1679169981416_115 : var_1679169981416_164);
        let var_1679169981416_173 : Range<Int8> = ((Int8(0)&127)..(Int8(46)&127):(((-75)|1)));
        if (var_1679169981416_53) { ((var_1679169981416_86&127)..(Int8(85)&127):((21|1))) } else { var_1679169981416_173 } 
    };
    let var_1679169981416_456 : (Array<Bool>) -> UInt32 = func_1679169981416_180;
    var var_1679169981416_463 : Array<Bool> = [(Int8(Int8(-25)) is Rune), false, false, (Class_1679169981416_137(UInt32(Int16(7)), ((Int32(-84)&127)..(Int32(-46)&127):((93|1))), ((UInt32(11)&127)..(UInt32(204)&127):(((-89)|1))), Float32(Float32(-50.0))) is (UInt16) -> Rune), true, (((Int32(79)&127)..=(Int32(-94)&127):(52|1)) is Range<UInt64>), false, true, true, (UInt64(70) is UInt32)];
    match (([[true, false, false, true, true, true, true, false, false, false], var_1679169981416_463, [false, var_1679169981416_43, var_1679169981416_43, var_1679169981416_542, false, true, var_1679169981416_542, true, false, true], var_1679169981416_608, var_1679169981416_463, [var_1679169981416_542, var_1679169981416_43, var_1679169981416_542, var_1679169981416_542, var_1679169981416_43, false, true, var_1679169981416_43, true, var_1679169981416_622], var_1679169981416_463, [false, var_1679169981416_542, true, var_1679169981416_53, var_1679169981416_53, true, var_1679169981416_622, true, true, true], [true, false, true, true, false, false, false, true, false, true], var_1679169981416_463][0]|>var_1679169981416_456)) {
        case 4 => 
            var var_1679169981416_644 : Range<Int16> = ((Int16(-87)&127)..(Int16(112)&127):(121|1));
            var_1679169981416_644;
            var_1679169981416_341 /= ((var_1679169981416_341) | 1);
            var_1679169981416_95
        
        case _ => 
            var_1679169981416_95
        
    }
}

public enum Enum_1679169981416_730<T0, T1> {
    defaultValue
}


public func func_1679169981416_8<T0>(namedParam_1679169981416_9 ! : Rune, namedParam_1679169981416_10 ! : Float32, namedParam_1679169981416_11 ! : UInt64, optionalParam_1679169981416_12 ! : Float32 = Float32(-82.0)) : Int64 { // block id: 14
    var_1679169981416_16;
    func func_1679169981416_19(param_1679169981416_20 : Int64, param_1679169981416_21 : UInt64) : Int64 { // block id: 22
        let var_1679169981416_49 : Bool = ([false, false, false, false, false, false, false, true, true, false] is Option<Array<Bool>>);
        let var_1679169981416_654 : (Int16) -> Option<Array<Bool>> = func_1679169981416_76;
        if ((Option<Array<Bool>>.None ?? [var_1679169981416_43, true, var_1679169981416_43, true, var_1679169981416_49, var_1679169981416_53, true, true, true, true])[1]) { // block id: 61
            var var_1679169981416_68 : ?Unit = (((UInt64(203)&127)..(UInt64(179)&127):(((-64)|1))) as Unit);
            (var_1679169981416_68 ?? var_1679169981416_16);
            var var_1679169981416_657 : Int16 = Int16(-128);
            var_1679169981416_657|>var_1679169981416_654;
            var var_1679169981416_662 : (Range<Int16>, Rune, Array<Unit>, Int64, Int64, Array<Array<Bool>>) = (((Int16(-97)&127)..(Int16(-67)&127):((-61)|1)), r'd', [(), (), (), (), (), (), (), (), (), ()], (-40), Int64(UInt32(Int8(Int8(-24)))), [[((Class_1679169981416_137(Option<Rune>.None), ((Int32(-90)&127)..=(Int32(30)&127):((-71)|1))) is Range<Int32>), (Int8(-77) is Int32), (UInt64(145) is (Interface_1679169981416_142, Range<Int32>)), true, ([[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]] is Bool), false, (Int32(19) is Option<Unit>), true, ((((-62)&127)..=((-89)&127):(((-70)|1))) is (Int16) -> Option<Array<Bool>>), true], [(((Int8(-98)&127)..=(Int8(98)&127):((78|1))) is Range<Int32>), (Float32(-84.0) is (Option<Range<Int8>>, String, Range<Int32>) -> Rune), (((UInt8(193)&127)..=(UInt8(94)&127):(126|1)) is UInt32), true, (UInt32(97) is Option<Range<Int64>>), true, (() is Range<UInt64>), (() is Interface_1679169981416_140<Option<Int64>>), (Class_1679169981416_137() is Range<Int16>), true], [true, true, false, true, (((Int32(26)&127)..(Int32(97)&127):((35|1))) is Range<Int8>), true, (() is Array<Bool>), true, true, false], [false, false, false, true, false, false, true, false, false, true], [true, true, true, (Class_1679169981416_137() is (Interface_1679169981416_142, Range<Int32>)), true, true, (UInt16(167) is () -> UInt8), (Int16(54) is UInt64), (() is Array<Unit>), (Class_1679169981416_137() is () -> UInt8)], [false, true, false, false, true, false, false, false, false, false], [(r'r' is Array<UInt64>), false, ((((Int16(20)&127)..=(Int16(26)&127):(47|1)), r'e', [(), (), (), (), (), (), (), (), (), ()], (-107), 43, [[false, true, false, false, true, false, false, false, false, true], [true, false, true, true, false, true, false, true, true, true], [true, false, true, true, true, false, false, false, true, false], [false, false, false, true, false, false, false, false, false, true], [false, false, false, false, true, true, false, false, true, true], [false, false, false, true, true, true, false, true, true, true], [true, false, true, false, true, false, true, true, true, true], [true, false, false, false, true, true, true, true, false, true], [false, false, false, true, false, false, true, true, false, false], [true, true, true, true, false, false, false, true, false, false]]) is Range<UInt32>), false, false, (Option<UInt8>.Some(UInt8(11)) is Int64), (Option<Range<Int64>>.None is Option<Range<Int64>>), false, (Enum_1679169981416_730<UInt32, Option<Array<UInt64>>>.defaultValue is UInt64), (Option<Rune>.Some(r's') is Int16)], [true, true, false, false, false, true, true, true, false, true], [true, (UInt16(100) is Option<UInt8>), true, false, (((UInt32(201)&127)..=(UInt32(136)&127):((-99)|1)) is (Array<Bool>) -> UInt32), true, ((((UInt16(118)&127)..=(UInt16(37)&127):((98|1))), Int32(-22), ((31&127)..((-64)&127):(54|1)), true, true, ((UInt32(86)&127)..(UInt32(146)&127):((-99)|1)), [[false, true, false, false, true, false, true, true, false, true], [true, true, false, false, true, true, false, true, false, true], [false, false, false, false, false, true, false, true, false, true], [true, true, false, false, false, true, false, true, true, false], [true, true, true, false, false, false, true, false, true, true], [false, false, false, true, true, false, false, false, true, false], [true, false, false, false, true, true, true, false, true, false], [true, false, true, true, false, true, false, true, false, true], [false, true, true, true, false, false, false, true, true, true], [true, false, false, false, true, true, false, true, false, true]]) is Option<Unit>), ((((Int16(61)&127)..(Int16(-30)&127):((-2)|1)), r'H', [(), (), (), (), (), (), (), (), (), ()], 86, 60, [[false, true, true, true, false, true, false, false, false, false], [true, true, false, false, true, true, true, false, false, false], [true, true, true, false, true, true, true, true, true, false], [true, true, true, true, false, true, false, false, true, true], [false, false, false, true, true, true, true, true, false, true], [true, true, true, true, false, true, false, true, true, false], [true, false, false, false, true, false, true, true, false, false], [true, false, true, true, false, false, false, false, false, true], [false, true, true, false, false, true, true, false, true, true], [true, false, true, true, false, true, true, false, false, true]]) is Range<UInt8>), true, false], [false, false, false, true, true, true, true, true, true, true]]);
            var_1679169981416_662[4]
        } else { // block id: 1425
            (Option<Array<UInt64>>.None ?? [UInt64(196), UInt64(9), UInt64(152), UInt64(191), UInt64(45), UInt64(16), UInt64(200), UInt64(217), UInt64(24), UInt64(188)]);
            (-26)
        }
    }
;
    var var_1679169981416_1460 : (Int16, Array<Array<Bool>>, Int32, Range<UInt32>, UInt64, String, Range<UInt32>, Int64, Array<Array<Bool>>) = (Int16(UInt8(Int8(4))), [[true, (Struct_1679169981416_185<Int8>() is (Interface_1679169981416_142) -> UInt8), (Option<Int64>.None is (UInt16) -> Rune), true, true, false, (Class_1679169981416_137() is (Interface_1679169981416_142) -> UInt8), (((Int8(-20)&127)..=(Int8(-94)&127):(((-7)|1))) is (Array<Bool>) -> UInt32), true, (Option<Range<Int64>>.None is Option<Rune>)], [false, (Int8(-98) is (Int64, UInt64) -> Int64), true, true, true, false, true, true, (UInt16(239) is Option<Rune>), false], [true, false, false, true, false, true, true, false, true, false], [false, true, true, false, false, false, true, true, false, false], [true, true, false, true, false, false, false, false, false, true], [false, true, (((Int32(44)&127)..=(Int32(-70)&127):((92|1))) is Range<UInt16>), false, false, false, (UInt8(116) is Float32), true, (Option<Range<Int8>>.None is () -> UInt8), true], [false, (Int16(60) is Option<Array<Bool>>), (Option<Range<Int8>>.Some(((Int8(96)&127)..=(Int8(-94)&127):(((-96)|1)))) is (UInt8, Range<UInt32>, Float32, Int64, UInt8, Range<UInt32>, Float64)), (Enum_1679169981416_730<UInt32, Option<Array<UInt64>>>.defaultValue is Option<Array<Bool>>), true, (Class_1679169981416_137() is (Interface_1679169981416_142, Range<Int32>)), true, (Option<Rune>.Some(r'5') is Option<Int64>), false, true], [(((Int32(75)&127)..=(Int32(42)&127):(44|1)) is (UInt16) -> Rune), false, true, ([[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]] is Option<Int64>), (Int32(-60) is Interface_1679169981416_140<Option<Int64>>), (Class_1679169981416_137() is Array<Array<Bool>>), (Option<Range<Int64>>.Some((((-23)&127)..=((-53)&127):(((-58)|1)))) is Interface_1679169981416_142), (Option<Int64>.None is Option<Array<UInt64>>), (UInt32(38) is Option<Rune>), false], [false, true, true, true, true, false, false, false, false, false], [true, true, false, true, false, false, false, true, false, false]], Int32(125), ((UInt32(3)&127)..(UInt32(202)&127):(122|1)), UInt64(UInt8(UInt8(233))), "a{O+Px5a'i%", ((UInt32(64)&127)..(UInt32(Int8(UInt8(163)))&127):((64|1))), Int64(UInt8(UInt8(216))), [[false, false, true, false, true, true, true, false, false, true], [false, true, true, true, false, true, false, false, true, false], [true, false, false, true, false, true, false, true, true, false], [true, true, true, true, false, true, false, true, false, false], [true, true, true, false, false, false, true, false, false, false], [true, true, true, false, false, false, false, true, true, true], [true, false, true, true, true, false, true, true, false, true], [false, false, false, false, true, true, true, false, false, false], [true, true, false, true, true, true, false, false, true, false], [false, false, false, true, false, false, false, false, false, false]]);
    let var_1679169981416_1585 : Int16 = Int16(Int8(84));
    let var_1679169981416_1658 : Bool = true;
    let var_1679169981416_1708 : Array<Array<Bool>> = [[true, false, false, true, true, false, true, true, false, true], [false, true, false, false, false, false, false, true, true, false], [false, true, false, false, true, true, false, false, true, false], [true, true, false, true, false, true, true, true, false, false], [true, false, true, false, true, false, false, false, false, true], [true, false, true, true, true, true, false, true, false, true], [true, false, false, false, false, false, false, false, false, true], [true, true, false, false, false, false, true, true, false, true], [true, false, false, false, false, true, true, true, true, true], [false, true, true, false, false, false, true, true, true, true]];
    let var_1679169981416_1728 : Option<UInt8> = (Float32(31.0) as UInt8);
    func_1679169981416_19((var_1679169981416_1442[1] ?? var_1679169981416_312), match (var_1679169981416_491) {
        case _ => 
            ();
            [UInt64(207), UInt64(43), UInt64(49), UInt64(176), UInt64(118), UInt64(120), UInt64(148), UInt64(53), UInt64(3), UInt64(35)];
            var_1679169981416_1460
        
        case caseVar_1679169981416_1581 : Array<UInt64> => 
            var var_1679169981416_1635 : String = """
@qtd6
fhvbD
""";
            var var_1679169981416_1639 : Int64 = (-75);
            let var_1679169981416_1674 : Bool = false;
            (var_1679169981416_1585, [[false, var_1679169981416_542, true, var_1679169981416_53, var_1679169981416_622, var_1679169981416_542, var_1679169981416_542, true, true, true], [true, false, false, false, false, false, true, true, true, false], [true, true, true, false, false, true, var_1679169981416_53, var_1679169981416_43, false, var_1679169981416_622], [true, true, true, false, false, true, false, true, false, false], [true, false, true, false, true, true, false, false, false, false], [false, false, true, true, true, false, true, false, true, false], var_1679169981416_709, [false, true, true, false, var_1679169981416_542, var_1679169981416_622, var_1679169981416_53, false, var_1679169981416_542, var_1679169981416_622], [true, true, false, true, true, false, true, true, true, true], var_1679169981416_608], Int32(-75), ((UInt32(80)&127)..=(UInt32(194)&127):(26|1)), var_1679169981416_1632, var_1679169981416_1635, var_1679169981416_248, var_1679169981416_1639, [var_1679169981416_709, [false, false, true, true, false, false, false, var_1679169981416_542, true, false], [true, false, var_1679169981416_1658, var_1679169981416_542, false, false, var_1679169981416_622, true, var_1679169981416_43, var_1679169981416_43], var_1679169981416_709, [false, false, false, false, false, true, true, false, true, true], [false, false, false, true, true, false, false, true, true, true], [false, false, var_1679169981416_1674, false, false, true, var_1679169981416_542, var_1679169981416_43, var_1679169981416_53, true], var_1679169981416_608, [false, false, false, true, false, false, false, false, false, true], var_1679169981416_608])
        
        case caseVar_1679169981416_1688 : (Float64, Option<Int64>, Range<Int64>) => 
            if (true) { var_1679169981416_1460 } else { var_1679169981416_1460 } 
        
        case _ => 
            var_1679169981416_1699 /= ((UInt64(47)) | 1);
            var_1679169981416_1703;
            (Int16(-14), var_1679169981416_1708, Int32(82), ((UInt32(230)&127)..(UInt32(219)&127):(((-34)|1))), var_1679169981416_1632, "_3'QvENE\"+", ((UInt32(43)&127)..=(UInt32(216)&127):(((-107)|1))), var_1679169981416_312, [[false, true, true, true, true, false, false, false, false, false], [true, true, true, false, true, false, true, true, true, true], [false, true, true, false, false, true, true, false, false, false], [true, true, false, false, true, true, false, true, true, true], [false, true, true, false, true, false, false, true, true, false], [true, true, true, false, false, true, false, false, true, true], [true, true, false, false, true, true, false, true, false, true], [true, true, false, true, true, false, false, false, true, true], [true, true, false, true, false, true, false, true, true, true], [true, false, false, false, true, false, true, false, true, false]])
        
        case _ => 
            if (var_1679169981416_542) { var_1679169981416_1728 } else { Option<UInt8>.None } ;
            var_1679169981416_1460
        
    }[4])
}

main(): Int64 {
    try {
        func_1679169981416_8<Range<Int32>>(namedParam_1679169981416_9 : var_1679169981416_1735, namedParam_1679169981416_10 : Struct_1679169981416_185<Int8>.var_1679169981416_1740, namedParam_1679169981416_11 : UInt64(var_1679169981416_341), optionalParam_1679169981416_12 : Float32(var_1679169981416_560))
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
