/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args


public let var_1701528719339_24 : UInt8 = UInt8(78)
let var_1701528719339_46 : Option<String> = Option<String>.None
public let var_1701528719339_64 : Unit = ()
var var_1701528719339_68 : UInt8 = UInt8(UInt8(Int8(Int8(Int8(-41)))))
var var_1701528719339_81 : Int8 = Int8(Int8(UInt8(Int8(Int8(43)))))
public var var_1701528719339_101 : Int32 = Int32(74)
const var_1701528719339_129 : UInt8 = 201
var var_1701528719339_204 : Unit = ()
const var_1701528719339_236 : Int16 = -41
public let var_1701528719339_384 : Bool = (Float64(0.0) is Float32)
public var var_1701528719339_397 : Rune = r'l'
public var var_1701528719339_422 : Option<String> = Option<String>.None
public let var_1701528719339_426 : String = ###"rV;8puT,,x"###
let var_1701528719339_441 : (Range<Int16>, String, (Int32, Int64, String), UInt8, Float32, Int8) = (((Int16(Int16(102))&127)..=(Int16(Int16(-58))&127):(Int64(-26)|1)), """
C]~3+
Y30${var_1701528719339_426}l]${var_1701528719339_426}
""", (Int32(UInt32(202)), Int64(Int8(-67)), "QRIW[${var_1701528719339_426}/FT${var_1701528719339_426}uH"), UInt8(Int8(UInt8(Int8(-89)))), Float32(49.0), Int8(90))


public const func func_1701528719339_5(param_1701528719339_119 : Rune, param_1701528719339_120 : Int32, namedParam_1701528719339_121 ! : UInt8, namedParam_1701528719339_122 ! : Int64) : Unit { // block id: 123

}

const func func_1701528719339_114(param_1701528719339_115 : Int8) : UInt64 { // block id: 116
    const var_1701528719339_125 : Rune = r'S';
    func_1701528719339_5(var_1701528719339_125, -49, namedParam_1701528719339_121 : var_1701528719339_129, namedParam_1701528719339_122 : -113);
    const var_1701528719339_134 : UInt64 = 11;
    var_1701528719339_134 / ((203) | 1)
}

public func func_1701528719339_35(param_1701528719339_36 : Int8) : Unit { // block id: 37
    let var_1701528719339_55 : UInt16 = UInt16(Int16(Int8(-124)));
    var var_1701528719339_93 : UInt32 = UInt32(UInt32(95));
    try { // block id: 39
        var_1701528719339_46.getOrThrow();
        (Option<UInt16>.None ?? var_1701528719339_55)
    } finally { // block id: 59
        const var_1701528719339_76 : Bool = true;
        var var_1701528719339_88 : Int8 = Int8(Int8(80));
        if (false) { // block id: 62
            var_1701528719339_64;
            var_1701528719339_68 <<= ((var_1701528719339_68) & 7)
        } else if (var_1701528719339_76) { // block id: 78
            var_1701528719339_81 ^= var_1701528719339_88;
            var_1701528719339_93 <<= ((var_1701528719339_93) & 7)
        };
        try { // block id: 98
            var_1701528719339_101 -= Int32(-40);
            var_1701528719339_55 & UInt16(66)
        } finally { // block id: 107
            var_1701528719339_64;
            var_1701528719339_64;
            UInt16(181) | UInt16(10)
        }
    };
    var var_1701528719339_138 : (Int8) -> UInt64 = { lambdaParameter_1701528719339_141 : Int8 => UInt64(240) };
    Int8(50)|>var_1701528719339_138;
    ()
}

const func func_1701528719339_239(optionalParam_1701528719339_240 ! : Int8 = 92, optionalParam_1701528719339_242 ! : UInt64 = 163, namedParam_1701528719339_244 ! : UInt16) : UInt8 { // block id: 245
    46
}

func func_1701528719339_291(param_1701528719339_292 : UInt8) : Option<UInt16> { // block id: 293
    (var_1701528719339_46 as UInt16)
}

func func_1701528719339_5(param_1701528719339_6 : String) : Int64 { // block id: 7
    var var_1701528719339_28 : Bool = false;
    try { // block id: 9
        let var_1701528719339_13 : (Int32, Int64, String) = (Int32(UInt32(Int8(UInt8(175)))), Int64(Int16(65)), ###"3w&=Ww)VTG"###);
        var_1701528719339_13[0];
        var_1701528719339_24;
        var loopTimeVar_1701528719339_32 : Int64 = 0;
        do {
            loopTimeVar_1701528719339_32++;

        } while ((var_1701528719339_28) && loopTimeVar_1701528719339_32 < 100 ) 
    } catch (e: Exception) { // block id: 33
        Int8(-105)|>{ lambdaParameter_1701528719339_148 : Int8 => var_1701528719339_64 };
        var var_1701528719339_161 : UInt32 = UInt32(Int32(43));
        var var_1701528719339_174 : UInt16 = UInt16(UInt16(UInt8(122)));
        if (var_1701528719339_28) { // block id: 154
            var_1701528719339_64;
            ()
        } else if (true) { // block id: 158
            var_1701528719339_161 &= UInt32(61);
            let var_1701528719339_166 : Int64 = Int64(UInt16(Int16(Int16(Int16(-118)))));
            var_1701528719339_166;
            var_1701528719339_174 /= ((var_1701528719339_174) | 1)
        }
    };
    const var_1701528719339_213 : Int = -70;
    const var_1701528719339_217 : Float32 = 122.0;
    const func func_1701528719339_273(param_1701528719339_274 : Int8, namedParam_1701528719339_275 ! : UInt16) : Int64 { // block id: 276
        ();
        var_1701528719339_213
    }
;
    const func func_1701528719339_221(optionalParam_1701528719339_222 ! : UInt16 = 142, optionalParam_1701528719339_224 ! : UInt16 = 66) : Float32 { // block id: 226
        const func func_1701528719339_229(optionalParam_1701528719339_230 ! : Int16 = -22, namedParam_1701528719339_232 ! : UInt8) : Rune { // block id: 233
            r'w'
        }
;
        const var_1701528719339_249 : UInt16 = 239;
        const var_1701528719339_252 : Int32 = 123;
        const func func_1701528719339_257(param_1701528719339_258 : Float32, optionalParam_1701528719339_259 ! : Unit = ()) : Int64 { // block id: 261
            -112 + (var_1701528719339_236 & 62);
            -6.0 - 34.0;
            var_1701528719339_213 % ((func_1701528719339_273(-90, namedParam_1701528719339_275 : var_1701528719339_249)) | 1)
        }
;
        func_1701528719339_5(func_1701528719339_229(optionalParam_1701528719339_230 : var_1701528719339_236, namedParam_1701528719339_232 : func_1701528719339_239(optionalParam_1701528719339_240 : 91, namedParam_1701528719339_244 : var_1701528719339_249)), var_1701528719339_252, namedParam_1701528719339_121 : func_1701528719339_239(namedParam_1701528719339_244 : var_1701528719339_249), namedParam_1701528719339_122 : func_1701528719339_257(78.0, optionalParam_1701528719339_259 : ()));
        var_1701528719339_129;
        86.0 * var_1701528719339_217
    }
;
    const func func_1701528719339_210() : Int64 { // block id: 211
        var_1701528719339_213;
        var_1701528719339_217 + (func_1701528719339_221() * var_1701528719339_217);
        110
    }
;
    var var_1701528719339_353 : Float32 = Float32(Float32(Float32(Float32(Float32(-83.0)))));
    var var_1701528719339_375 : UInt32 = UInt32(149);
    if ((if (false) { // block id: 183
        var_1701528719339_81 %= ((var_1701528719339_81) | 1);
        var var_1701528719339_189 : Int64 = Int64(UInt8(193));
        var_1701528719339_189 >>= ((var_1701528719339_189) & 7);
        UInt8(191)
    } else if (var_1701528719339_28) { // block id: 195
        var var_1701528719339_198 : String = ###"\"`DcZ0@tR;"###;
        Option<String>.Some(var_1701528719339_198);
        var_1701528719339_64;
        UInt8(192)
    } else { // block id: 202
        var_1701528719339_204;
        var_1701528719339_129
    } is UInt16)) { // block id: 207
        ();
        func_1701528719339_210()
    } else if (match ((UInt8(53)|>func_1701528719339_291)) {
        case caseVar_1701528719339_300 : Float32 => 
            UInt64(32);
            Int32(-24) >= Int32(-21)
        
        case _ : Bool => 
            UInt8(122);
            true && var_1701528719339_28
        
        case _ : Rune => 
            var_1701528719339_217;
            true
        
        case caseVar_1701528719339_320 : Float64 => 
            let var_1701528719339_323 : (Int32, Int64, String) = (Int32(63), Int64(UInt32(UInt16(115))), "g8'_v8##.K");
            var_1701528719339_323;
            var var_1701528719339_333 : Rune = r'U';
            if (var_1701528719339_28) { var_1701528719339_333 } else { var_1701528719339_333 } ;
            true && var_1701528719339_28
        
        case _ => 
            "GtgJQA>Whn";
            "Qpn}W([gGk";
            true
        
    }) { // block id: 345
        ();
        const var_1701528719339_361 : Int = -26;
        if (false) { // block id: 349
            var_1701528719339_64;
            var_1701528719339_353 = Float32(-48.0);
            var_1701528719339_361
        } else if (var_1701528719339_28) { // block id: 364
            var var_1701528719339_367 : UInt32 = UInt32(Int32(UInt32(227)));
            var_1701528719339_367++;
            Int64(112)
        } else { // block id: 372
            var_1701528719339_375 *= var_1701528719339_375;
            Int64(44) + var_1701528719339_213
        }
    } else { // block id: 381
        if (var_1701528719339_384) { // block id: 387
            Float64(-48.0)
        } else { // block id: 389
            var_1701528719339_64;
            var_1701528719339_28;
            Float64(120.0) + Float64(-22.0)
        };
        func_1701528719339_5(var_1701528719339_397, Int32(38), namedParam_1701528719339_121 : var_1701528719339_24, namedParam_1701528719339_122 : Int64(-87));
        Int64(UInt16(171))
    }
}


main(): Int64 {
    try {
        func_1701528719339_5(([var_1701528719339_422, Option<String>.Some(var_1701528719339_426), var_1701528719339_422, Option<String>.Some(var_1701528719339_426), var_1701528719339_422, Option<String>.None, var_1701528719339_422, Option<String>.None, var_1701528719339_422, var_1701528719339_422][4] ?? var_1701528719339_441[1]))
        // CRC Check All Variables
        var crcCheck = CrcCheck(5000, 32)
        crcCheck.updateBuffer(UInt64(var_1701528719339_24*var_1701528719339_24), 64)
        crcCheck.updateBuffer(UInt64(var_1701528719339_68*var_1701528719339_68), 64)
        crcCheck.updateBuffer(UInt64(var_1701528719339_81*var_1701528719339_81), 64)
        crcCheck.updateBuffer(UInt64(var_1701528719339_101*var_1701528719339_101), 64)
        crcCheck.updateBuffer(UInt64(var_1701528719339_129*var_1701528719339_129), 64)
        crcCheck.updateBuffer(UInt64(var_1701528719339_236*var_1701528719339_236), 64)
        crcCheck.crcCheck()
        crcCheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[(i + buffer_index) % buffer.size] = byteArray[i + byte_index]
            i++
        }
        buffer_index = (buffer_index + i) % buffer.size
    }

    func updateBuffer(input: Bool, byte_n: Int64): Unit {
        if (input == true) {
            updateBuffer(1, byte_n)
        } else {
            updateBuffer(0, byte_n)
        }
    }

    func updateBuffer(input: Rune, byte_n: Int64): Unit {
        updateBuffer(UInt64(UInt32(input)), byte_n)
    }

    func updateBuffer(input: String, byte_n: Int64): Unit {
        for (c in input) {
            updateBuffer(c, byte_n)
        }
    }

    func updateBuffer(input: Unit, byte_n: Int64): Unit {
        updateBuffer(input.toString(), byte_n)
    }

    func updateBuffer(input: Any, byte_n: Int64) : Unit {
        if (input is Hashable) {
            match(input as Hashable) {
                case Some(v) => updateBuffer(UInt64(v.hashCode()), byte_n)
                case _=> updateBuffer(1, byte_n)
            }
            
        } else if (input is ToString) {
            match(input as ToString) {
                case Some(v) => updateBuffer(v.toString(), byte_n)
                case _=> updateBuffer(1, byte_n)
            }
        } else {
            updateBuffer(1, byte_n)
        }
    }     
    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
