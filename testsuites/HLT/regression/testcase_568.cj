/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// (CJNATIVE) EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// (CJNATIVE) RUN-EXEC-PIPE: %run %run_opt %output %run_args
// (not CJNATIVE) ERRCHECK: %compiler %overflow_wrapping %f %cmp_opt

public var var_1704895342868_41 : Bool = false
public let var_1704895342868_44 : String = ###"FI?Qp$BOH-"###
public var var_1704895342868_56 : UInt8 = UInt8(Int8(94))
var var_1704895342868_62 : Int = Int64(Int32(Int16(Int8(7))))
let var_1704895342868_77 : Unit = ()
public let var_1704895342868_81 : Float64 = Float64(Float32(41.0))
public var var_1704895342868_101 : Float32 = Float32(Float32(-108.0))
public let var_1704895342868_116 : (Int32, UInt8, Float32, Bool, Float64) = (Int32(Int16(UInt8(14))), UInt8(27), Float32(Float32(Float32(Float32(-97.0)))), false, Float64(Float32(Float32(-41.0))))
var var_1704895342868_146 : VArray<UInt16, $3> = VArray<UInt16, $3>({ i => UInt16(76)})
public let var_1704895342868_166 : Unit = ()
public const var_1704895342868_179 : Int8 = -1
public var var_1704895342868_198 : Class_1704895342868_11 = Class_1704895342868_11()
public let var_1704895342868_232 : Class_1704895342868_228 = Class_1704895342868_228()
const var_1704895342868_258 : Int32 = 46
public const var_1704895342868_288 : Int = -31
const var_1704895342868_291 : Unit = ()
public const var_1704895342868_312 : UInt16 = 196
public const var_1704895342868_335 : UInt64 = 226
const var_1704895342868_349 : Int16 = -97
public const var_1704895342868_353 : UInt32 = 144
public const var_1704895342868_362 : Float64 = -46.0
public const var_1704895342868_379 : Unit = ()
var var_1704895342868_409 : (Option<Int8>, Array<UInt64>, Array<Option<UInt8>>, VArray<UInt16, $3>) = (Option<Int8>.None, [UInt64(232), UInt64(53), UInt64(220), UInt64(204), UInt64(184), UInt64(17), UInt64(25), UInt64(218), UInt64(186), UInt64(176)], [(UInt8(Int8(-17)) as UInt8), (Option<UInt8>.None as UInt8), (((Int8(Int8(81))&127)..=(Int8(Int8(120))&127):(Int64(93)|1)) as UInt8), (Class_1704895342868_11() as UInt8), Option<UInt8>.None, (((Int32(Int32(-128))&127)..(Int32(Int32(117))&127):(Int64(-42)|1)) as UInt8), Option<UInt8>.None, (Class_1704895342868_228() as UInt8), (Int16(63) as UInt8), Option<UInt8>.None], VArray<UInt16, $3>(repeat: UInt16(UInt8(UInt8(61)))))
var var_1704895342868_459 : ?Array<VArray<Int64, $4>> = (((Int32(Int32(Int8(UInt8(70))))&127)..(Int32(Int32(49))&127):(Int64(23)|1)) as Array<VArray<Int64, $4>>)
public var var_1704895342868_470 : Int = Int64(UInt8(Int8(Int8(93))))
public interface Interface_1704895342868_15 {

}

public interface Interface_1704895342868_14 <: Interface_1704895342868_15 {

}

sealed public interface Interface_1704895342868_17 <: Interface_1704895342868_15 & Interface_1704895342868_14 {
    func func_1704895342868_30(param_1704895342868_31 : Rune, namedParam_1704895342868_32 ! : Int8, namedParam_1704895342868_33 ! : Bool) : Unit { // block id: 34
        match (if (false) { // block id: 38
            if (var_1704895342868_41) { var_1704895342868_44 } else { var_1704895342868_44 } ;
            """
D!]nP
`)[iq
"""
        } else { // block id: 48
            ###"AT\"!Y,IYS3"###
        }) {
            case caseVar_1704895342868_52 => 
                var_1704895342868_56 += UInt8(156);
                var_1704895342868_62 += var_1704895342868_62;
                Float64(47.0)
            
            case ###"eRuGZ(,hZ>"### | ###",8 :K[yr\"_"### | ###"a;WH.[lSMf"### => 
                Float64(-55.0)
            
            case "JO4xQ',#wP" => 
                var_1704895342868_77;
                var_1704895342868_81 ** Int64(51)
            
            case _ => 
                ();
                var_1704895342868_81
            
        };
        const var_1704895342868_105 : Int8 = 15;
        ((UInt32(247), Option<Int8>.None, var_1704895342868_101, var_1704895342868_105, Float64(75.0))[1] ?? Int8(-52));
        var loopTimeVar_1704895342868_169 : Int64 = 0;
        while ((try { // block id: 114
            var_1704895342868_116
        } finally { // block id: 130
            var_1704895342868_116
        }[3]) && loopTimeVar_1704895342868_169 < 100 ) {
            loopTimeVar_1704895342868_169++;
            var_1704895342868_146[1];
            let var_1704895342868_163 : ?Unit = Option<Unit>.None;
            (var_1704895342868_163 ?? var_1704895342868_166)
        }
    }

}

sealed public interface Interface_1704895342868_16 <: Interface_1704895342868_17 {
    func func_1704895342868_30(param_1704895342868_31 : Rune, namedParam_1704895342868_32 ! : Int8, namedParam_1704895342868_33 ! : Bool) : Unit { // block id: 34
        match (if (false) { // block id: 38
            if (var_1704895342868_41) { var_1704895342868_44 } else { var_1704895342868_44 } ;
            """
D!]nP
`)[iq
"""
        } else { // block id: 48
            ###"AT\"!Y,IYS3"###
        }) {
            case caseVar_1704895342868_52 => 
                var_1704895342868_56 += UInt8(156);
                var_1704895342868_62 += var_1704895342868_62;
                Float64(47.0)
            
            case ###"eRuGZ(,hZ>"### | ###",8 :K[yr\"_"### | ###"a;WH.[lSMf"### => 
                Float64(-55.0)
            
            case "JO4xQ',#wP" => 
                var_1704895342868_77;
                var_1704895342868_81 ** Int64(51)
            
            case _ => 
                ();
                var_1704895342868_81
            
        };
        const var_1704895342868_105 : Int8 = 15;
        ((UInt32(247), Option<Int8>.None, var_1704895342868_101, var_1704895342868_105, Float64(75.0))[1] ?? Int8(-52));
        var loopTimeVar_1704895342868_169 : Int64 = 0;
        while ((try { // block id: 114
            var_1704895342868_116
        } finally { // block id: 130
            var_1704895342868_116
        }[3]) && loopTimeVar_1704895342868_169 < 100 ) {
            loopTimeVar_1704895342868_169++;
            var_1704895342868_146[1];
            let var_1704895342868_163 : ?Unit = Option<Unit>.None;
            (var_1704895342868_163 ?? var_1704895342868_166)
        }
    }

}

public open class Class_1704895342868_11 <: Interface_1704895342868_14 & Interface_1704895342868_16 {
    public init() { // block id: 13

    }
;
    private static prop var_1704895342868_24 : Interface_1704895342868_17 { // block id: 25
        get() { // block id: 27
            Class_1704895342868_11()
        }

    };
    private static let var_1704895342868_173 : VArray<Rune, $2> = [r'R', r'm'];
    public static func func_1704895342868_20() : Unit { // block id: 21
        var_1704895342868_24.func_1704895342868_30(var_1704895342868_173[1], namedParam_1704895342868_32 : (Option<Int8>.None ?? var_1704895342868_179), namedParam_1704895342868_33 : var_1704895342868_41 || var_1704895342868_41);
        ()
    }
;
    public static let var_1704895342868_190 : Range<UInt16> = ((UInt16(UInt16(17))&127)..(UInt16(UInt16(74))&127):(Int64(-29)|1));
    public let var_1704895342868_201 : Int32 = Int32(33);
    public open override func func_1704895342868_30(param_1704895342868_31 : Rune, namedParam_1704895342868_32 ! : Int8, namedParam_1704895342868_33 ! : Bool) : Unit { // block id: 34
        match (if (false) { // block id: 38
            if (var_1704895342868_41) { var_1704895342868_44 } else { var_1704895342868_44 } ;
            """
D!]nP
`)[iq
"""
        } else { // block id: 48
            ###"AT\"!Y,IYS3"###
        }) {
            case caseVar_1704895342868_52 => 
                var_1704895342868_56 += UInt8(156);
                var_1704895342868_62 += var_1704895342868_62;
                Float64(47.0)
            
            case ###"eRuGZ(,hZ>"### | ###",8 :K[yr\"_"### | ###"a;WH.[lSMf"### => 
                Float64(-55.0)
            
            case "JO4xQ',#wP" => 
                var_1704895342868_77;
                var_1704895342868_81 ** Int64(51)
            
            case _ => 
                ();
                var_1704895342868_81
            
        };
        const var_1704895342868_105 : Int8 = 15;
        ((UInt32(247), Option<Int8>.None, var_1704895342868_101, var_1704895342868_105, Float64(75.0))[1] ?? Int8(-52));
        var loopTimeVar_1704895342868_169 : Int64 = 0;
        while ((try { // block id: 114
            var_1704895342868_116
        } finally { // block id: 130
            var_1704895342868_116
        }[3]) && loopTimeVar_1704895342868_169 < 100 ) {
            loopTimeVar_1704895342868_169++;
            var_1704895342868_146[1];
            let var_1704895342868_163 : ?Unit = Option<Unit>.None;
            (var_1704895342868_163 ?? var_1704895342868_166)
        }
    }

}



func func_1704895342868_7(param_1704895342868_8 : UInt64) : Unit { // block id: 9
    Class_1704895342868_11.func_1704895342868_20();
    var loopTimeVar_1704895342868_203 : Range<UInt64> = ((UInt64(UInt64(49))&127)..(UInt64(UInt64(UInt8(210)))&127):(Int64(-76)|1));
    for (i in loopTimeVar_1704895342868_203 where ((Class_1704895342868_11.var_1704895342868_190) is Array<UInt64>)) {
        var_1704895342868_198.var_1704895342868_201
    }
}



public open class Class_1704895342868_228 {
    public init() { // block id: 230

    }
;
    prop var_1704895342868_235 : Option<Option<UInt64>> { // block id: 236
        get() { // block id: 238
            (r'Q' as Option<UInt64>)
        }

    }
    static init() {
    }
}

public func func_1704895342868_211(optionalParam_1704895342868_212 ! : Int8 = Int8(-63), optionalParam_1704895342868_214 ! : UInt64 = UInt64(209)) : UInt64 { // block id: 216
    let var_1704895342868_247 : Int16 = Int16(Int16(UInt8(Int8(Int8(57)))));
    ((var_1704895342868_232.var_1704895342868_235 ?? if (false) { Option<UInt64>.None } else { Option<UInt64>.None } ) ?? match (var_1704895342868_247) {
        case _ => 
            ();
            var_1704895342868_258;
            let var_1704895342868_261 : UInt64 = UInt64(Int64(UInt64(98)));
            var_1704895342868_261
        
    })
}

public const func func_1704895342868_302(param_1704895342868_303 : UInt16, namedParam_1704895342868_304 ! : Int16, namedParam_1704895342868_305 ! : Int16) : Int8 { // block id: 306
    const var_1704895342868_308 : Unit = ();
    var_1704895342868_308;
    var_1704895342868_179
}

public const func func_1704895342868_324(param_1704895342868_325 : UInt16, namedParam_1704895342868_326 ! : Int16, namedParam_1704895342868_327 ! : Float64, optionalParam_1704895342868_328 ! : Float32 = -113.0) : Int16 { // block id: 330
    const var_1704895342868_332 : Unit = ();
    var_1704895342868_332;
    var_1704895342868_335;
    const func func_1704895342868_339(param_1704895342868_340 : Int64, param_1704895342868_341 : UInt32, optionalParam_1704895342868_342 ! : UInt32 = 90, optionalParam_1704895342868_344 ! : UInt64 = 187) : Int16 { // block id: 346
        ();
        var_1704895342868_349
    }
;
    func_1704895342868_339(90, var_1704895342868_353, optionalParam_1704895342868_342 : var_1704895342868_353) | (var_1704895342868_349 + 10)
}

public const func func_1704895342868_315<T0>(param_1704895342868_316 : Int16, namedParam_1704895342868_317 ! : String, namedParam_1704895342868_318 ! : Int8) : Int16 { // block id: 319
    238;
    const var_1704895342868_367 : String = """
Ha{d!#
GJjwM
""";
    if ((func_1704895342868_324(136, namedParam_1704895342868_326 : -78, namedParam_1704895342868_327 : var_1704895342868_362) >= var_1704895342868_349)) { """
a>sHH
\"^t3T
""" } else { var_1704895342868_367 } ;
    4 + -80
}

public const func func_1704895342868_279(namedParam_1704895342868_280 ! : Unit, namedParam_1704895342868_281 ! : UInt16, optionalParam_1704895342868_282 ! : UInt64 = 166, optionalParam_1704895342868_284 ! : UInt16 = 7) : Int8 { // block id: 286
    var_1704895342868_288;
    var_1704895342868_291;
    const var_1704895342868_296 : Int8 = -14;
    const var_1704895342868_373 : Int16 = 87;
    (var_1704895342868_296 << (((-55 + -82)) & 7)) % ((func_1704895342868_302(var_1704895342868_312, namedParam_1704895342868_304 : func_1704895342868_315<Int64>(var_1704895342868_373, namedParam_1704895342868_317 : """
<-jYc
0Zpq`
""", namedParam_1704895342868_318 : -22), namedParam_1704895342868_305 : 35)) | 1)
}

public const func func_1704895342868_274(optionalParam_1704895342868_275 ! : UInt8 = 140) : Int8 { // block id: 277
    const var_1704895342868_382 : UInt16 = 155;
    func_1704895342868_279(namedParam_1704895342868_280 : var_1704895342868_379, namedParam_1704895342868_281 : var_1704895342868_382, optionalParam_1704895342868_284 : var_1704895342868_382);
    var_1704895342868_179 & ((var_1704895342868_179 | 22) | var_1704895342868_179)
}

public const func func_1704895342868_266(param_1704895342868_267 : UInt32, namedParam_1704895342868_268 ! : UInt8, namedParam_1704895342868_269 ! : UInt8, namedParam_1704895342868_270 ! : Unit) : Int8 { // block id: 271
    func_1704895342868_274() & (var_1704895342868_179 % ((-122) | 1))
}



main(): Int64 {
    try {
        func_1704895342868_211(optionalParam_1704895342868_212 : func_1704895342868_266(UInt32(186), namedParam_1704895342868_268 : UInt8(94), namedParam_1704895342868_269 : UInt8(236), namedParam_1704895342868_270 : ()))|>func_1704895342868_7;
        (var_1704895342868_409[2][9] ?? try { // block id: 445
            UInt8(69)
        } finally { // block id: 447
            var_1704895342868_56
        });
        var var_1704895342868_488 : Int64 = Int64(UInt64(UInt32(Int32(Int8(112)))));
        var var_1704895342868_495 : VArray<Int64, $4> = [Int64(6), Int64(-76), Int64(-109), Int64(121)];
        (var_1704895342868_459 ?? [VArray<Int64, $4>(repeat: var_1704895342868_470), VArray<Int64, $4>(repeat: var_1704895342868_288), VArray<Int64, $4>(repeat: var_1704895342868_288), var_1704895342868_495, var_1704895342868_495, var_1704895342868_495, VArray<Int64, $4>({ i => Int64(67)}), var_1704895342868_495, VArray<Int64, $4>(repeat: var_1704895342868_288), VArray<Int64, $4>({ i => Int64(-65)})])[2][1]
        // CRC Check All Variables
        var crcCheck = CrcCheck(5000, 32)
        crcCheck.updateBuffer(UInt64(var_1704895342868_56*var_1704895342868_56), 64)
        crcCheck.updateBuffer(UInt64(var_1704895342868_179*var_1704895342868_179), 64)
        crcCheck.updateBuffer(UInt64(var_1704895342868_470*var_1704895342868_470), 64)
        crcCheck.updateBuffer(UInt64(var_1704895342868_488*var_1704895342868_488), 64)
        crcCheck.crcCheck()
        crcCheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[(i + buffer_index) % buffer.size] = byteArray[i + byte_index]
            i++
        }
        buffer_index = (buffer_index + i) % buffer.size
    }

    func updateBuffer(input: Bool, byte_n: Int64): Unit {
        if (input == true) {
            updateBuffer(1, byte_n)
        } else {
            updateBuffer(0, byte_n)
        }
    }

    func updateBuffer(input: Rune, byte_n: Int64): Unit {
        updateBuffer(UInt64(UInt32(input)), byte_n)
    }

    func updateBuffer(input: String, byte_n: Int64): Unit {
        for (c in input) {
            updateBuffer(c, byte_n)
        }
    }

    func updateBuffer(input: Unit, byte_n: Int64): Unit {
        updateBuffer(input.toString(), byte_n)
    }

    func updateBuffer(input: Any, byte_n: Int64) : Unit {
        if (input is Hashable) {
            match(input as Hashable) {
                case Some(v) => updateBuffer(UInt64(v.hashCode()), byte_n)
                case _=> updateBuffer(1, byte_n)
            }
            
        } else if (input is ToString) {
            match(input as ToString) {
                case Some(v) => updateBuffer(v.toString(), byte_n)
                case _=> updateBuffer(1, byte_n)
            }
        } else {
            updateBuffer(1, byte_n)
        }
    }     
    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}

extend Class_1704895342868_228 {

}

// ASSERT: scan-3 sema_varray_cjvm_in_ref_type
