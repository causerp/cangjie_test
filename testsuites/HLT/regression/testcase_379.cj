/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// (CJNATIVE)ERRCHECK: %compiler %overflow_wrapping %cmp_opt %f -o %output
// (not CJNATIVE)EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// (not CJNATIVE)RUN-EXEC: %run %run_opt %output %run_args

public var var_1689793813518_39 : ?Unit = Option<Unit>.None
public let var_1689793813518_103 : Bool = (Float32(1.0) is Struct_1689793813518_55<Int8, Rune>)
public var var_1689793813518_178 : Unit = ()
let var_1689793813518_183 : UInt64 = UInt64(2)
public var var_1689793813518_189 : UInt64 = UInt64(Int32(-105))
public var var_1689793813518_194 : Bool = true
public var var_1689793813518_246 : VArray<UInt16, $4> = VArray<UInt16, $4>(repeat: UInt16(198))
var var_1689793813518_286 : UInt16 = UInt16(Int16(UInt8(217)))
public let var_1689793813518_305 : Unit = ()
public let var_1689793813518_318 : Int16 = Int16(90)
var var_1689793813518_349 : ?(UInt16, Unit, Unit, (Float32, Float32, String, UInt32, Unit, Unit, Bool), Rune) = Option<(UInt16, Unit, Unit, (Float32, Float32, String, UInt32, Unit, Unit, Bool), Rune)>.None
public var var_1689793813518_352 : (UInt16, Unit, Unit, (Float32, Float32, String, UInt32, Unit, Unit, Bool), Rune) = (UInt16(Int16(9)), (), (), (Float32(-75.0), Float32(Float32(121.0)), ###"Dx5}-6]sY("###, UInt32(UInt8(Int8(90))), (), (), (Float32(Float32(44.0)) is Option<Int64>)), r'G')
public let var_1689793813518_377 : Bool = (((Int32(Int32(-11))&127)..(Int32(Int32(-116))&127):(17|1)) is Bool)
public let var_1689793813518_386 : Option<Unit> = (Option<(UInt16, Unit, Unit, (Float32, Float32, String, UInt32, Unit, Unit, Bool), Rune)>.None as Unit)
public var var_1689793813518_406 : Int64 = (-120)
let var_1689793813518_441 : Float32 = Float32(Float32(91.0))
public var var_1689793813518_446 : String = """
7CIWs
V#C5\\
"""
public let var_1689793813518_467 : Struct_1689793813518_55<Int8, Rune> = Struct_1689793813518_55<Int8, Rune>()
var var_1689793813518_510 : ?Option<VArray<UInt16, $4>> = Option<Option<VArray<UInt16, $4>>>.None
public let var_1689793813518_552 : UInt8 = UInt8(Int8(-113))
public let var_1689793813518_589 : Bool = (((UInt8(UInt8(UInt8(Int8(111))))&127)..(UInt8(UInt8(212))&127):(Int64(UInt8(UInt8(196)))|1)) is Option<Option<VArray<UInt16, $4>>>)
public var var_1689793813518_686 : Option<Option<Int64>> = ((-37.0) as Option<Int64>)
var var_1689793813518_709 : Int8 = Int8(UInt8(12))
public var var_1689793813518_723 : UInt8 = UInt8(10)
public var var_1689793813518_788 : Option<(Float32, Float32, String, UInt32, Unit, Unit, Bool)> = Option<(Float32, Float32, String, UInt32, Unit, Unit, Bool)>.None
public var var_1689793813518_959 : Class_1689793813518_955<UInt8> = Class_1689793813518_955<UInt8>()
public let var_1689793813518_969 : Class_1689793813518_130<Int16, UInt32, String> = Class_1689793813518_130<Int16, UInt32, String>()
public let var_1689793813518_1093 : Int64 = 30
public var var_1689793813518_1096 : String = ###"]XN[&/EX@4"###
var var_1689793813518_1107 : Float64 = 51.0
public let var_1689793813518_1129 : Int16 = Int16(117)



public struct Struct_1689793813518_55<T0, T1> {
    init() { // block id: 57

    }
;
    public static prop var_1689793813518_60 : (Float32, Float32, String, UInt32, Unit, Unit, Bool) { // block id: 61
        get() { // block id: 63
            (Float32(Float32(-100.0)), Float32(Float32(Float32(124.0))), "[~p[2>pP.+", UInt32(UInt8(UInt8(184))), (), (), false)
        }

    };
    mut prop var_1689793813518_470 : Int16 { // block id: 471
        get() { // block id: 473
            Int16(UInt8(213))
        }

        set(Value) { // block id: 478
            ();
            ((UInt8(UInt8(188))&127)..=(UInt8(UInt8(126))&127):(71|1));
            ()
        }

    }
}

public func func_1689793813518_49<T0>(param_1689793813518_50 : Int16) : Unit { // block id: 51
    Struct_1689793813518_55<Int8, Rune>.var_1689793813518_60[3];
    ()
}

public open class Class_1689793813518_130<T0, T1, T2> {
    init() { // block id: 132

    }
;
    public init(optionalParam_1689793813518_137 ! : String = ";@As}09-Zv", optionalParam_1689793813518_139 ! : (UInt16, Unit, Unit, (Float32, Float32, String, UInt32, Unit, Unit, Bool), Rune) = (UInt16(Int16(Int8(UInt8(190)))), (), (), (Float32(35.0), Float32(Float32(25.0)), ###"~&cs$`,K:)"###, UInt32(UInt16(84)), (), (), false), r'J'), optionalParam_1689793813518_158 ! : Int64 = 41, namedParam_1689793813518_160 ! : Unit) { // block id: 161
        let var_1689793813518_206 : Option<VArray<UInt16, $4>> = Option<VArray<UInt16, $4>>.None;
        var var_1689793813518_210 : UInt16 = UInt16(Int8(-33));
        let var_1689793813518_236 : Rune = r'a';
        if (if (var_1689793813518_103) { // block id: 176
            var_1689793813518_178;
            UInt64(130) >= var_1689793813518_183
        } else if (var_1689793813518_103) { // block id: 186
            var_1689793813518_189 >>= ((UInt64(25)) & 7);
            var_1689793813518_194
        } else { // block id: 196
            ();
            [UInt64(39), UInt64(147), UInt64(93), UInt64(134), UInt64(157), UInt64(166), UInt64(245), UInt64(83), UInt64(165), UInt64(241)];
            var_1689793813518_194
        }) { (var_1689793813518_206 ?? VArray<UInt16, $4>(repeat: var_1689793813518_210)) } else { try { // block id: 217
            var_1689793813518_178;
            var var_1689793813518_225 : Float32 = Float32(-45.0);
            let var_1689793813518_230 : UInt32 = UInt32(127);
            (var_1689793813518_210, (), (), (var_1689793813518_225, var_1689793813518_225, """
n}Gce
DGqaM
""", var_1689793813518_230, (), (), true), var_1689793813518_236);
            VArray<UInt16, $4>(repeat: var_1689793813518_210)
        } finally { // block id: 243
            var_1689793813518_178;
            var_1689793813518_246
        } } [1];
        let var_1689793813518_262 : ?Option<VArray<UInt16, $4>> = (() as Option<VArray<UInt16, $4>>);
        (var_1689793813518_262 ?? try { // block id: 266
            var_1689793813518_206
        } finally { // block id: 268
            var_1689793813518_206;
            var_1689793813518_206
        })
    }
;
    mut prop var_1689793813518_273 : Int16 { // block id: 274
        get() { // block id: 276
            Option<Option<VArray<UInt16, $4>>>.None;
            UInt32(30);
            Int16(-57)
        }

        set(Value) { // block id: 282
            ()
        }

    };
    public static mut prop var_1689793813518_760 : Int32 { // block id: 761
        get() { // block id: 763
            Int32(-100);
            var_1689793813518_1140
        }

        set(Value) { // block id: 767
            ();
            [(), (), (), (), (), (), (), (), (), ()];
            ();
            var_1689793813518_1140 = Value
        }

    };
    private static var var_1689793813518_810 : UInt32;
    protected let var_1689793813518_962 : UInt8 = UInt8(108);
    public static func func_1689793813518_728(optionalParam_1689793813518_729 ! : Float32 = Float32(Float32(Float32(116.0))), optionalParam_1689793813518_733 ! : Range<Int8> = ((Int8(Int8(0))&127)..=(Int8(Int8(Int8(Int8(-81))))&127):(84|1)), namedParam_1689793813518_740 ! : Int8) : UInt8 { // block id: 741
        (if (var_1689793813518_194) { // block id: 750
            if (false) { ((Int32(Int32(60))&127)..=(Int32(Int32(-113))&127):(var_1689793813518_406|1)) } else { ((Int32(Int32(109))&127)..=(Int32(var_1689793813518_760)&127):(83|1)) } ;
            Option<Unit>.Some(var_1689793813518_305);
            if (true) { Option<(Float32, Float32, String, UInt32, Unit, Unit, Bool)>.None } else { var_1689793813518_788 } 
        } else if (true) { // block id: 791
            Option<(Float32, Float32, String, UInt32, Unit, Unit, Bool)>.Some((Float32(-7.0), Float32(-57.0), var_1689793813518_446, UInt32(249), (), (), var_1689793813518_377))
        } else { // block id: 801
            var_1689793813518_788
        } ?? try { // block id: 804
            (Float32(11.0), var_1689793813518_441, var_1689793813518_446, var_1689793813518_810, (), var_1689793813518_305, true)
        } catch (_) { // block id: 815
            var var_1689793813518_817 : (Float32, Float32, String, UInt32, Unit, Unit, Bool) = (Float32(33.0), Float32(Float32(62.0)), "IFA-nQXd|]", UInt32(77), (), (), (((UInt16(UInt16(225))&127)..(UInt16(UInt16(UInt16(117)))&127):(Int64(UInt64(131))|1)) is Range<Int64>));
            var_1689793813518_817
        })[4];
        var var_1689793813518_839 : Array<Bool> = [([true, false, ((UInt16(43), (), (), (Float32(-3.0), Float32(-85.0), "BS=qU<}\\yN", UInt32(129), (), (), false), r'9') is Option<Option<VArray<UInt16, $4>>>), ([(), (), (), (), (), (), (), (), (), ()] is Range<UInt8>), false, (Option<Unit>.None is (Bool, Int64, Option<Option<Int64>>) -> Option<Unit>), false, false, (VArray<Rune, $3>(repeat: r'm') is Range<UInt32>), ([(), (), (), (), (), (), (), (), (), ()] is Option<Bool>)] is Array<Bool>), true, (Struct_1689793813518_55<Int8, Rune>() is Struct_1689793813518_55<Int8, Rune>), false, true, (UInt16(195) is Option<VArray<UInt16, $4>>), (((UInt64(UInt64(38))&127)..=(UInt64(UInt64(47))&127):((-97)|1)) is Option<Bool>), true, ((Int16(Int8(49)), Int32(-114), UInt16(UInt16(186)), Int16(-49), (UInt16(48), (), (), (Float32(30.0), Float32(-126.0), """
X% -m
~w~=b
""", UInt32(180), (), (), false), r'b'), (UInt16(63), (), (), (Float32(-43.0), Float32(-41.0), "Ia{z@7r'b5cf", UInt32(144), (), (), true), 'K')) is UInt16), (() is Range<UInt32>)];
        let var_1689793813518_937 : Option<Array<Bool>> = (((UInt32(UInt32(52))&127)..(UInt32(UInt32(194))&127):((-3)|1)) as Array<Bool>);
        try { // block id: 835
            if (false) { var_1689793813518_839 } else { [var_1689793813518_377, false, true, true, var_1689793813518_103, var_1689793813518_103, true, var_1689793813518_377, true, var_1689793813518_103] } 
        } finally { // block id: 930
            let var_1689793813518_950 : Bool = (Option<Option<VArray<UInt16, $4>>>.None is Range<UInt8>);
            (var_1689793813518_937 ?? [var_1689793813518_194, var_1689793813518_194, false, var_1689793813518_377, var_1689793813518_377, true, var_1689793813518_103, false, var_1689793813518_950, var_1689793813518_950])
        };
        var_1689793813518_959.var_1689793813518_962
    }
;
    var var_1689793813518_982 : ?Float32 = Option<Float32>.None;
    public static mut prop var_1689793813518_990 : ??Option<VArray<UInt16, $4>> { // block id: 991
        get() { // block id: 993
            ();
            ((Option<Float32>.None as Array<Bool>) as Option<Option<VArray<UInt16, $4>>>)
        }

        set(Value) { // block id: 1000
            ()
        }

    };
    public open func func_1689793813518_972() : Bool { // block id: 973
        var var_1689793813518_1003 : ?Option<VArray<UInt16, $4>> = Option<Option<VArray<UInt16, $4>>>.None;
        var var_1689793813518_1016 : Rune = r'Z';
        try { // block id: 975
            var_1689793813518_982.getOrThrow();
            (var_1689793813518_990 ?? var_1689793813518_1003);
            Int8(-6)
        } catch (_) { // block id: 1006
            if (var_1689793813518_194) { // block id: 1009
                var_1689793813518_273 ^= var_1689793813518_273
            } else if (true) { // block id: 1014
                var_1689793813518_1016;
                var_1689793813518_194 ||= var_1689793813518_377
            };
            var var_1689793813518_1029 : Int8 = Int8(Int8(14));
            (Option<Int8>.Some(Int8(10)) ?? var_1689793813518_1029)
        };
        true
    }
;
    static mut prop var_1689793813518_1140 : Int32 { // block id: 1141
        get() { // block id: 1143
            Int32(22)
        }

        set(Value) { // block id: 1147
            ()
        }

    }
    static init() {
        var_1689793813518_810 = UInt32(177)
    }
}




public func func_1689793813518_123(param_1689793813518_124 : Bool) : UInt16 { // block id: 125
    var var_1689793813518_134 : Class_1689793813518_130<Int16, UInt32, String> = Class_1689793813518_130<Int16, UInt32, String>(namedParam_1689793813518_160 : ());
    var var_1689793813518_325 : (Float32, Float32, String, UInt32, Unit, Unit, Bool) = (Float32(Float32(Float32(Float32(23.0)))), Float32(9.0), """
h>lJ-
oMUCn
""", UInt32(62), (), (), (Int32(UInt16(UInt16(165))) is Int16));
    let var_1689793813518_341 : Rune = r'H';
    (var_1689793813518_134.var_1689793813518_273, Int32(var_1689793813518_286), if (true) { // block id: 292
        if (false) { VArray<UInt16, $4>(repeat: UInt16(28)) } else { var_1689793813518_246 } ;
        (-90.0);
        UInt16(185)
    } else { // block id: 303
        var_1689793813518_305;
        let var_1689793813518_309 : Int8 = Int8(-115);
        ((Int8(var_1689793813518_309)&127)..=(Int8(var_1689793813518_309)&127):(21|1));
        var_1689793813518_286 * var_1689793813518_286
    }, -var_1689793813518_318, (var_1689793813518_286, (), (), var_1689793813518_325, var_1689793813518_341), (var_1689793813518_349 ?? var_1689793813518_352))[2]
}


public func func_1689793813518_116<T0, T1>(param_1689793813518_117 : Float64) : Int16 { // block id: 118
    var var_1689793813518_374 : (Bool) -> UInt16 = func_1689793813518_123;
    var var_1689793813518_395 : Int32 = Int32(94);
    var var_1689793813518_400 : Rune = r'8';
    let var_1689793813518_415 : (Float32, Float32, String, UInt32, Unit, Unit, Bool) = (Float32(-118.0), Float32(-74.0), "TQ!]3of<Ia{", UInt32(66), (), (), ("""
xRX6?
V1^WP
""" is Float64));
    var var_1689793813518_427 : Range<UInt16> = ((UInt16(UInt16(24))&127)..=(UInt16(UInt16(146))&127):(Int64(UInt8(165))|1));
    var var_1689793813518_451 : Unit = ();
    var var_1689793813518_457 : VArray<Rune, $3> = [r'J', r'4', r'f'];
    ((var_1689793813518_377|>var_1689793813518_374), (var_1689793813518_386 ?? ()), try { // block id: 391
        ();
        var_1689793813518_395 %= ((Int32(-84)) | 1);
        var_1689793813518_400 = var_1689793813518_400
    } finally { // block id: 403
        var_1689793813518_406 &= 95;
        var_1689793813518_189 >>= ((UInt64(74)) & 7)
    }, try { // block id: 413
        var_1689793813518_415
    } finally { // block id: 425
        var_1689793813518_427;
        (UInt16(219), (), var_1689793813518_178, var_1689793813518_415, r'u');
        (var_1689793813518_441, Float32(63.0), var_1689793813518_446, UInt32(155), var_1689793813518_178, var_1689793813518_451, true)
    }, var_1689793813518_457[2])[1];
    var_1689793813518_305;
    var_1689793813518_467.var_1689793813518_470
}


public enum Enum_1689793813518_535<T0, T1> {
    defaultValue
}


public open class Class_1689793813518_955<T0> <: Class_1689793813518_130<Int16, UInt32, String> {
    init() { // block id: 957

    }

}




public func func_1689793813518_23(param_1689793813518_24 : String, optionalParam_1689793813518_25 ! : Float64 = 21.0, optionalParam_1689793813518_27 ! : UInt64 = UInt64(118), namedParam_1689793813518_29 ! : Int16) : Option<Option<Int64>> { // block id: 30
    let var_1689793813518_524 : Option<Bool> = (UInt32(108) as Bool);
    let var_1689793813518_1053 : Int8 = Int8(UInt8(Int8(-94)));
    try { // block id: 32
        (var_1689793813518_39 ?? ());
        let var_1689793813518_108 : Struct_1689793813518_55<Int8, Rune> = Struct_1689793813518_55<Int8, Rune>();
        let var_1689793813518_483 : (Float64) -> Int16 = func_1689793813518_116<Bool, Int16>;
        let var_1689793813518_634 : (Float32, Float32, String, UInt32, Unit, Unit, Bool) = (Float32(Float32(91.0)), Float32(-41.0), ###"'7rOTv^uu "###, UInt32(UInt32(33)), (), (), ((Int16(Int16(-32)), Int32(UInt32(251)), UInt16(UInt8(159)), Int16(UInt8(234)), (UInt16(183), (), (), (Float32(-106.0), Float32(-41.0), """
a{<FF6
M 5&v
""", UInt32(236), (), (), true), r'o'), (UInt16(158), (), (), (Float32(-121.0), Float32(-71.0), ###"*pZ6C%16/%"###, UInt32(2), (), (), false), r'y')) is Range<UInt64>));
        func func_1689793813518_43(param_1689793813518_44 : Unit, param_1689793813518_45 : String, param_1689793813518_46 : Unit) : Unit { // block id: 47
            let var_1689793813518_584 : ?Unit = (true as Unit);
            let var_1689793813518_602 : Int64 = (-75);
            let var_1689793813518_617 : (Float32, Float32, String, UInt32, Unit, Unit, Bool) = (Float32(43.0), Float32(113.0), "*B)lXv5?},", UInt32(Int8(-97)), (), (), ([(), (), (), (), (), (), (), (), (), ()] is Int8));
            let var_1689793813518_681 : Rune = r'r';
            Int16(if (false) { // block id: 701
                ();
                if (false) { [UInt64(47), UInt64(72), UInt64(29), UInt64(101), UInt64(2), UInt64(224), UInt64(61), UInt64(248), UInt64(134), UInt64(207)] } else { [UInt64(216), UInt64(196), UInt64(240), UInt64(159), UInt64(68), UInt64(205), UInt64(37), UInt64(104), UInt64(196), UInt64(47)] } ;
                var_1689793813518_709 / ((var_1689793813518_709) | 1)
            } else if (var_1689793813518_194) { // block id: 714
                ();
                var_1689793813518_709
            } else { // block id: 717
                ();
                var_1689793813518_305;
                var_1689793813518_709
            })|>{ lambdaParameter_1689793813518_81 : Int16 => let var_1689793813518_517 : Option<Int64> = (Option<Option<Int64>>.Some(Option<Int64>.None) as Int64); func func_1689793813518_85<T0, T1, T2>(namedParam_1689793813518_86 ! : T0, namedParam_1689793813518_87 ! : Int64, optionalParam_1689793813518_88 ! : Option<Option<Int64>> = ((Float32(-46.0), Float32(93.0), """
\\y<$0
4o'yZ
""", UInt32(92), (), (), false) as Option<Int64>)) : Option<Unit> { // block id: 98
                var var_1689793813518_111 : Unit = ();
                if (try { // block id: 101
                    var_1689793813518_103
                } catch (_) { // block id: 106
                    var_1689793813518_108;
                    var_1689793813518_111;
                    false
                }) { // block id: 114
                    21.0|>var_1689793813518_483;
                    [var_1689793813518_178, (), (), (), (), (), var_1689793813518_305, (), var_1689793813518_111, ()][3]
                };
                var loopTimeVar_1689793813518_529 : Range<UInt64> = ((UInt64(UInt64(23))&127)..(UInt64(UInt64(250))&127):((-17)|1));
                for (i in loopTimeVar_1689793813518_529 where try { // block id: 507
                    var_1689793813518_352;
                    var_1689793813518_510;
                    Option<Bool>.None
                } finally { // block id: 513
                    ();
                    Option<Option<Int64>>.Some(var_1689793813518_517);
                    if (false) { var_1689793813518_524 } else { var_1689793813518_524 } 
                }.getOrThrow()) {

                };
                var var_1689793813518_567 : Unit = ();
                var var_1689793813518_577 : Int16 = Int16(-29);
                match (try { // block id: 538
                    Enum_1689793813518_535<Option<Int64>, Float32>.defaultValue
                } finally { // block id: 540
                    Enum_1689793813518_535<Option<Int64>, Float32>.defaultValue
                }) {
                    case caseVar_1689793813518_544 : Range<Int32> => 
                        ();
                        var var_1689793813518_549 : UInt8 = UInt8(217);
                        var_1689793813518_549 >>= ((var_1689793813518_552) & 7);
                        var_1689793813518_39
                    
                    case defaultValue => 
                        var_1689793813518_178;
                        var_1689793813518_108;
                        var_1689793813518_39
                    
                    case caseVar_1689793813518_564 => 
                        var_1689793813518_567;
                        var_1689793813518_189 |= UInt64(217);
                        Option<Unit>.None
                    
                    case _ => 
                        var_1689793813518_577 /= ((Int16(-48)) | 1);
                        var_1689793813518_178;
                        if (var_1689793813518_103) { var_1689793813518_584 } else { var_1689793813518_39 } 
                    
                }
            }
; var loopTimeVar_1689793813518_697 : Int64 = 0; (func_1689793813518_85<Bool, Range<UInt16>, Float32>(namedParam_1689793813518_86 : var_1689793813518_589, namedParam_1689793813518_87 : (var_1689793813518_517 ?? var_1689793813518_602), optionalParam_1689793813518_88 : ((Int16(-116), Int32(65), UInt16(153), Int16(-9), (UInt16(198), (), var_1689793813518_178, var_1689793813518_617, r'g'), (UInt16(52), var_1689793813518_178, var_1689793813518_305, var_1689793813518_634, var_1689793813518_681)), UInt16(150), var_1689793813518_589, var_1689793813518_686)[3]) ?? do {
                loopTimeVar_1689793813518_697++;

            } while (([true, false, true, true, true, true, true, false, false, true][1]) && loopTimeVar_1689793813518_697 < 100 ) ) };
            var_1689793813518_723 %= ((Class_1689793813518_130<Int16, UInt32, String>.func_1689793813518_728(optionalParam_1689793813518_729 : Float32(110.0), namedParam_1689793813518_740 : Int8(-87))) | 1);
            if (var_1689793813518_969.func_1689793813518_972()) { // block id: 1033
                var var_1689793813518_1062 : Int16 = Int16(-126);
                match ([var_1689793813518_589, true, true, var_1689793813518_589, var_1689793813518_589, false, var_1689793813518_377, false, var_1689793813518_103, false]) {
                    case _ => 
                        ();
                        var_1689793813518_709 *= var_1689793813518_1053
                    
                    case _ => 
                        var_1689793813518_178;
                        var_1689793813518_1062 <<= ((Int16(59)) & 7)
                    
                }
            }
        }
;
        func_1689793813518_43((), var_1689793813518_446, var_1689793813518_305);
        var_1689793813518_686
    } finally { // block id: 1069
        UInt8(Int8(51));
        try { // block id: 1073
            ((UInt8(UInt8(125))&127)..(UInt8(UInt8(187))&127):((-96)|1))
        } finally { // block id: 1075
            var_1689793813518_510;
            if (var_1689793813518_377) { ((UInt8(UInt8(101))&127)..=(UInt8(UInt8(147))&127):(71|1)) } else { ((UInt8(var_1689793813518_723)&127)..=(UInt8(var_1689793813518_723)&127):(var_1689793813518_406|1)) } 
        };
        try { // block id: 1085
            Option<Option<Int64>>.None
        } finally { // block id: 1087
            var_1689793813518_686
        }
    }
}

public func func_1689793813518_14<T0, T1>(param_1689793813518_15 : Rune) : Option<Int64> { // block id: 16
    let var_1689793813518_1133 : Option<Int64> = Option<Int64>.None;
    (func_1689793813518_23((var_1689793813518_1093, var_1689793813518_1096)[1], optionalParam_1689793813518_25 : if (var_1689793813518_589) { // block id: 1101
        ();
        let var_1689793813518_1104 : Unit = ();
        var_1689793813518_1104;
        var_1689793813518_1107
    } else if (true) { // block id: 1110
        var var_1689793813518_1112 : Range<UInt64> = ((UInt64(UInt64(Int64(Int8(Int8(-52)))))&127)..=(UInt64(UInt64(UInt16(Int8(55))))&127):((-35)|1));
        var_1689793813518_1112;
        65.0
    } else { // block id: 1123
        (-19.0) ** 96
    }, namedParam_1689793813518_29 : var_1689793813518_1129 * Int16(-81)) ?? var_1689793813518_1133)
}

main(): Int64 {
    try {
        ();
        ((r'j'|>func_1689793813518_14<Option<Option<Int64>>, Enum_1689793813518_535<Option<Int64>, Float32>>) ?? Int64(var_1689793813518_318))
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var_1689793813518_709*var_1689793813518_709), 64)
        crccheck.updateBuffer(UInt64(var_1689793813518_1093*var_1689793813518_1093), 64)
        crccheck.updateBuffer(UInt64(var_1689793813518_1129*var_1689793813518_1129), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Int32 {
        var i = 0
        var res = ""
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            res = res + hex_value.toString()
            i = i + 3
        }
        print("\n")
        if ( res == "0403411527443237463646" ){
            return 0
        }
        return 1
    }
}
extend<T0, T1> Enum_1689793813518_535<T0, T1> {

}

// (CJNATIVE)ASSERT: scan sema_static_variable_use_generic_parameter
