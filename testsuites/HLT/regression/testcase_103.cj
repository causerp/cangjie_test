/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args

public let var_1659089422579_11 : Int8 = Int8(Int8(Int8(Int8(Int8(71)))))
public var var_1659089422579_20 : Int16 = Int16(59)
var var_1659089422579_23 : Bool = (Float32(79.0) is Unit)
public var var_1659089422579_87 : Unit = ()
let var_1659089422579_145 : Array<Option<(Unit, Float64)>> = [(((), Float64((-112.0))) as (Unit, Float64)), Option<(Unit, Float64)>.None, (Float64(Float64(Float32(-64.0))) as (Unit, Float64)), ('3' as (Unit, Float64)), Option<(Unit, Float64)>.None, ((false as (Unit, Float64)) as (Unit, Float64)), Option<(Unit, Float64)>.None, Option<(Unit, Float64)>.None, (((UInt16(219)&127)..(UInt16(156)&127):(((-120)|1))) as (Unit, Float64)), Option<(Unit, Float64)>.None]
var var_1659089422579_194 : Int32 = Int32(UInt8(232))
public let var_1659089422579_290 : Bool = true
var var_1659089422579_304 : Bool = ('t' is UInt32)
var var_1659089422579_360 : UInt64 = UInt64(226)



public func func_1659089422579_186(param_1659089422579_187 : Int8) : UInt64 { // block id: 188
    var loopTimeVar_1659089422579_203 : Range<UInt64> = ((UInt64(UInt64(145))&127)..(UInt64(240)&127):((95|1)));
    for (i in loopTimeVar_1659089422579_203 where var_1659089422579_23) {
        var_1659089422579_194 &= var_1659089422579_194;
        var loopTimeVar_1659089422579_202 : Int64 = 0;
        while ((true) && loopTimeVar_1659089422579_202 < 100 ) {
            loopTimeVar_1659089422579_202++;

        }
    };
    let var_1659089422579_222 : Range<UInt32> = ((UInt32(22)&127)..(UInt32(78)&127):((-74)|1));
    let var_1659089422579_256 : Unit = ();
    try { // block id: 210
        var loopTimeVar_1659089422579_216 : Int64 = 0;
        do {
            loopTimeVar_1659089422579_216++;
            ()
        } while ((false) && loopTimeVar_1659089422579_216 < 100 ) ;
        UInt64(98)
    } finally { // block id: 218
        ();
        var var_1659089422579_229 : UInt16 = UInt16(UInt8(31));
        match (var_1659089422579_222) {
            case _ : UInt8 => 
                var_1659089422579_229 *= var_1659089422579_229
            
            case _ => 
                var var_1659089422579_237 : Int32 = Int32(Int8(UInt8(UInt8(Int8(-56)))));
                var_1659089422579_237 *= Int32(-47);
                var_1659089422579_87
            
        };
        var var_1659089422579_251 : UInt64 = UInt64(175);
        if (var_1659089422579_23) { // block id: 247
            ();
            var_1659089422579_251 << ((UInt64(131)) & 7)
        } else { // block id: 254
            var_1659089422579_256;
            var_1659089422579_23 ||= var_1659089422579_23;
            UInt64(189)
        }
    }
}

public interface Interface_1659089422579_275 {

}

public interface Interface_1659089422579_276 {

}

public interface Interface_1659089422579_274<T0, T1, T2> <: Interface_1659089422579_275 & Interface_1659089422579_276 {

}

public interface Interface_1659089422579_273 <: Interface_1659089422579_274<Range<Int8>, Int64, Interface_1659089422579_275> {

}

public open class Class_1659089422579_270 <: Interface_1659089422579_273 {
    public init() { // block id: 272

    }
;
    static let var_1659089422579_279 : Int16 = Int16(-113)
}

main(): Int64 {
    try {
        var var_1659089422579_28 : Int64 = 41;
        let var_1659089422579_31 : Float32 = Float32(96.0);
        var var_1659089422579_35 : (Int8, Float32, UInt64, Int16, Bool, Bool, Int64, Float32, Int64) = (Int8(51), Float32(11.0), UInt64(198), Int16(UInt16(UInt8(UInt8(165)))), (true is Int16), true, Int64(Int64(UInt16(243))), Float32(-2.0), Int64(Int8(96)));
        if (false) { (var_1659089422579_11, Float32(-49.0), UInt64(156), var_1659089422579_20, var_1659089422579_23, var_1659089422579_23, var_1659089422579_28, var_1659089422579_31, var_1659089422579_28) } else { var_1659089422579_35 } [4];
        let var_1659089422579_71 : ?(Unit, Float64) = Option<(Unit, Float64)>.Some(((), (-106.0)));
        let var_1659089422579_80 : Float64 = (-85.0);
        let var_1659089422579_92 : (Unit, Float64) = ((), Float64((-21.0)));
        let var_1659089422579_122 : ?(Unit, Float64) = ('3' as (Unit, Float64));
        func func_1659089422579_55<T0>(param_1659089422579_56 : UInt64, namedParam_1659089422579_57 ! : Int8, optionalParam_1659089422579_58 ! : Int16 = Int16(67), namedParam_1659089422579_60 ! : UInt8) : Int64 { // block id: 61
            var var_1659089422579_102 : UInt8 = UInt8(UInt8(UInt8(Int8(Int8(-106)))));
            (match (var_1659089422579_71) {
                case _ => 
                    var_1659089422579_80;
                    var_1659089422579_71
                
                case _ : String => 
                    var_1659089422579_87;
                    var_1659089422579_87;
                    Option<(Unit, Float64)>.Some(var_1659089422579_92)
                
                case _ => 
                    var_1659089422579_102 = UInt8(45);
                    Option<(Unit, Float64)>.None
                
                case _ => 
                    if (var_1659089422579_23) { var_1659089422579_71 } else { var_1659089422579_71 } 
                
            } ?? (var_1659089422579_122 ?? var_1659089422579_92))[0];
            let var_1659089422579_178 : Int64 = 26;
            match ((Option<Array<Option<(Unit, Float64)>>>.None ?? var_1659089422579_145)[4]) {
                case caseVar_1659089422579_174 => 
                    var_1659089422579_178 ** param_1659089422579_56
                
                case _ => 
                    ();
                    var_1659089422579_178
                
            }
        }
;
        let var_1659089422579_263 : (Int8) -> UInt64 = func_1659089422579_186;
        var var_1659089422579_283 : UInt8 = UInt8(224);
        func_1659089422579_55<Rune>((var_1659089422579_11|>var_1659089422579_263), namedParam_1659089422579_57 : var_1659089422579_11 + Int8(62), optionalParam_1659089422579_58 : Class_1659089422579_270.var_1659089422579_279, namedParam_1659089422579_60 : var_1659089422579_283 & var_1659089422579_283);
        let var_1659089422579_298 : Class_1659089422579_270 = Class_1659089422579_270();
        var var_1659089422579_317 : Int16 = Int16(-120);
        let var_1659089422579_330 : Option<Array<Option<(Unit, Float64)>>> = Option<Array<Option<(Unit, Float64)>>>.None;
        func_1659089422579_55<Rune>(UInt64(161), namedParam_1659089422579_57 : if (var_1659089422579_290) { // block id: 292
            var_1659089422579_87;
            if (var_1659089422579_23) { Class_1659089422579_270() } else { var_1659089422579_298 } ;
            var_1659089422579_11
        } else { // block id: 301
            var_1659089422579_304 &&= var_1659089422579_290;
            ();
            var_1659089422579_11 / ((var_1659089422579_11) | 1)
        }, optionalParam_1659089422579_58 : [Int16(22), var_1659089422579_317, var_1659089422579_317, Int16(-71), Int16(-123), var_1659089422579_20, Int16(-14), var_1659089422579_317, Int16(-24), var_1659089422579_317][5], namedParam_1659089422579_60 : match (var_1659089422579_330) {
            case caseVar_1659089422579_334 => 
                var_1659089422579_87;
                var_1659089422579_283 + var_1659089422579_283
            
            case caseVar_1659089422579_342 : UInt16 => 
                ((UInt64(229)&127)..(UInt64(0)&127):(26|1));
                UInt8(203)
            
            case _ : UInt64 => 
                var var_1659089422579_351 : UInt8 = UInt8(50);
                var_1659089422579_351 << ((var_1659089422579_351) & 7)
            
            case caseVar_1659089422579_356 => 
                var_1659089422579_71;
                var_1659089422579_360;
                UInt8(32)
            
            case _ => 
                var var_1659089422579_367 : Int8 = Int8(UInt8(87));
                var_1659089422579_367 /= ((Int8(-39)) | 1);
                UInt8(92)
            
        })
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var_1659089422579_11*var_1659089422579_11), 64)
        crccheck.updateBuffer(UInt64(var_1659089422579_20*var_1659089422579_20), 64)
        crccheck.updateBuffer(UInt64(var_1659089422579_28*var_1659089422579_28), 64)
        crccheck.updateBuffer(UInt64(var_1659089422579_194*var_1659089422579_194), 64)
        crccheck.updateBuffer(UInt64(var_1659089422579_283*var_1659089422579_283), 64)
        crccheck.updateBuffer(UInt64(var_1659089422579_317*var_1659089422579_317), 64)
        crccheck.updateBuffer(UInt64(var_1659089422579_360*var_1659089422579_360), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Class_1659089422579_270 {

}

