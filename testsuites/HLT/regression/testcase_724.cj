/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args

public let var_1733372132158_39: (UInt8, Float64, Option<UInt64>, Unit, Bool, String, UInt32, Int8) = (UInt8(Int8(-88)),
    Float64(119.0), ((UInt8(UInt8(163)), Float64(-115.0), (UInt8(124) as UInt64), (), false, ###"tCisE8!`=7"###, UInt32(Int8(12)),
        Int8(Int8(-105))) as UInt64), (), false, """
DK8I,
yCY[5
""", UInt32(132), Int8(Int8(22)))
@Deprecated
public let var_1733372132158_73: Float64 = Float64(89.0)
public const var_1733372132158_77: Unit = ()
@Deprecated
internal var var_1733372132158_85: Int8 = Int8(-53)
public var var_1733372132158_113: Option<VArray<Bool, $5>> = (((Int64(Int64(Int32(UInt16(75)))) & 127)..(Int64(Int64(46)) &
    127) : (Int64(Int16(UInt16(75))) | 1)) as VArray<Bool, $5>)
@Deprecated
public var var_1733372132158_141: Option<UInt64> = Option<UInt64>.None
public var var_1733372132158_158: Float64 = Float64(-93.0)
@Deprecated
public let var_1733372132158_163: UInt8 = UInt8(Int8(-88))
public var var_1733372132158_172: Unit = ()
@Deprecated
public var var_1733372132158_176: String = """
@\\a{t#
_D=]H
"""
@Deprecated
public let var_1733372132158_214: Bool = (((Int32(Int32(-94)) & 127)..=(Int32(Int32(-13)) & 127) : (Int64(118) | 1)) is Float32)
let var_1733372132158_228: Unit = ()
public var var_1733372132158_233: Int64 = Int64(Int8(49))
public const var_1733372132158_249: Int8 = -60
@Deprecated
public let var_1733372132158_262: Option<Unit> = Option<Unit>.None
public var var_1733372132158_267: Bool = true
@Deprecated
let var_1733372132158_293: (Array<UInt8>, VArray<Bool, $5>, Range<UInt64>, VArray<Bool, $5>, Int32, Rune, Option<Int8>, 
    UInt16) = ([UInt8(UInt8(134)), UInt8(UInt8(Int8(92))), UInt8(UInt8(14)), UInt8(30), UInt8(Int8(UInt8(182))),
        UInt8(140), UInt8(154), UInt8(153), UInt8(245), UInt8(176)], VArray<Bool, $5>({i => true}), ((UInt64(UInt64(Int8(86))) &
        127)..(UInt64(UInt64(Int16(UInt8(119)))) & 127) : (Int64(-122) | 1)), VArray<Bool, $5>(repeat: false), Int32(UInt32(199)),
    r'm', Option<Int8>.None, UInt16(UInt16(35)))
public var var_1733372132158_389: Option<Bool> = (Option<VArray<Bool, $5>>.None as Bool)
public const var_1733372132158_397: Byte = 6
@Deprecated
public let var_1733372132158_426: Struct_1733372132158_422 = Struct_1733372132158_422()
public const var_1733372132158_448: Byte = 238
public let var_1733372132158_451: Int = Int64(UInt16(0))

func func_1733372132158_135(param_1733372132158_136: Option<UInt64>): Option<Bool> { // block id: 137
    Option<Bool>.None
}

public func func_1733372132158_91<T0, T1>(param_1733372132158_92: UInt8): Option<UInt64> { // block id: 93
    var_1733372132158_77;
    let var_1733372132158_126: Bool = (((Int64(Int64(112)) & 127)..=(Int64(Int64(93)) & 127) : (Int64(91) | 1)) is (UInt8, 
        Float64, Option<UInt64>, Unit, Bool, String, UInt32, Int8));
    const var_1733372132158_169: UInt = 186;
    if ((var_1733372132158_113 ?? VArray<Bool, $5>({i => false}))[2]) {
        match ((var_1733372132158_141 |> func_1733372132158_135)) {
            case caseVar_1733372132158_145 => var_1733372132158_141

            case _ => Option<UInt64>.Some(UInt64(94))

            case _ =>
                var_1733372132158_158 *= Float64(124.0)
                (var_1733372132158_163, Float64(-29.0), Option<UInt64>.Some(var_1733372132158_169), var_1733372132158_172,
                    false, var_1733372132158_176, UInt32(182), Int8(23));
                Option<UInt64>.Some(var_1733372132158_169)
        }
    } else {
        try { // block id: 183
            ();
            Option<UInt64>.None
        } catch (e: Exception) { // block id: 186
            var_1733372132158_141
        }
    }
}

@Deprecated
public func func_1733372132158_26<T0, T1>(param_1733372132158_27: Int16): Bool { // block id: 28
    Int8(52);
    const var_1733372132158_81: String = "P;a{Z$lNHXD";
    ((var_1733372132158_39[3] as UInt64) ?? (r'3', UInt64(191), (UInt8(145), var_1733372132158_73, Option<UInt64>.None,
            var_1733372132158_77, false, var_1733372132158_81, UInt32(38), var_1733372132158_85))[1]);
    if (((UInt8(201) |> {
        lambdaParameter_1733372132158_190: UInt8 => UInt8(Int8(-9)) % (([var_1733372132158_163, UInt8(22),
            var_1733372132158_163, UInt8(226), UInt8(35), UInt8(28), var_1733372132158_163, UInt8(68),
            var_1733372132158_163, UInt8(212)][1]) | 1) |> func_1733372132158_91<Range<UInt64>, Int16>
    }) is Option<VArray<Bool, $5>>)) { // block id: 212
        var_1733372132158_214
    } else { // block id: 217
        try (resource = Class_1733372132158_406<Bool>()) { // block id: 219
            if (var_1733372132158_214) {
                ((Int32(Int32(36)) & 127)..(Int32(Int32(67)) & 127) : (Int64(-125) | 1))
            } else {
                ((Int32(Int32(45)) & 127)..=(Int32(Int32(-22)) & 127) : (Int64(96) | 1))
            };
            UInt64(213);
            var_1733372132158_77
        } catch (_) { // block id: 226
            var_1733372132158_228
        } finally { // block id: 230
            var_1733372132158_233 /= ((Int64(-55)) | 1)
        };
        (var_1733372132158_233 is String)
    }
}

@Deprecated
public func func_1733372132158_17(param_1733372132158_18: Option<Bool>,
    optionalParam_1733372132158_19!: UInt32 = UInt32(Int32(UInt8(251)))): Int8 { // block id: 23
    var var_1733372132158_240: (Int16) -> Bool = {
        lambdaParameter_1733372132158_243: Int16 => (((UInt8(UInt8(175)) & 127)..=(UInt8(UInt8(80)) & 127) : (Int64(-127) |
            1)) is Range<Int32>)
    };
    var loopTimeVar_1733372132158_253: Int = 0;
    while (((Int16(var_1733372132158_249) |> var_1733372132158_240)) && loopTimeVar_1733372132158_253 < 100) {
        loopTimeVar_1733372132158_253++;
    };
    var var_1733372132158_284: Int = Int64(UInt64(237));
    try { // block id: 255
        (var_1733372132158_262 ?? ());
        var_1733372132158_267 ||= true
        (Option<Int8>.None ?? var_1733372132158_249)
    } finally { // block id: 277
        try (resource = Class_1733372132158_406<Bool>()) { // block id: 279
            ();
            ((UInt32(UInt32(43)) & 127)..=(UInt32(UInt32(126)) & 127) : (Int64(18) | 1));
            var_1733372132158_284 &= Int64(-67)
        } catch (_) { // block id: 288
            var_1733372132158_172
        };
        var_1733372132158_293[3];
        var var_1733372132158_361: Int8 = Int8(92);
        [Int8(-69), Int8(-12), var_1733372132158_361, var_1733372132158_249, var_1733372132158_361,
            var_1733372132158_361, var_1733372132158_249, var_1733372132158_361, var_1733372132158_249, Int8(-87)][9]
    }
}

public interface Interface_1733372132158_415 {}

public interface Interface_1733372132158_414 <: Interface_1733372132158_415 {}

public interface Interface_1733372132158_413<T0> <: Interface_1733372132158_414 {}

public interface Interface_1733372132158_412 <: Interface_1733372132158_413<Option<Bool>> {}

public sealed interface Interface_1733372132158_411<T0, T1> <: Interface_1733372132158_412 & Interface_1733372132158_414 {}

public sealed interface Interface_1733372132158_410 <: Interface_1733372132158_411<Range<Int32>, Range<Int32>> &
    Interface_1733372132158_415 {}

public sealed interface Interface_1733372132158_409<T0, T1> <: Interface_1733372132158_410 {}

@Deprecated
public open class Class_1733372132158_406<T0> <: Interface_1733372132158_409<Int32, Option<VArray<Bool, $5>>> & Resource {
    @Frozen
    public init() { // block id: 408

    }

    @Frozen
    public static func func_1733372132158_418<T0>(): Option<Bool> { // block id: 419
        var_1733372132158_426.var_1733372132158_429[1]
    }

    static init() {
    }
    public func isClosed(): Bool {
        return true
    }
    public func close(): Unit {}
}

public struct Struct_1733372132158_422 {
    @Frozen
    public init() { // block id: 424

    }

    public let var_1733372132158_429: Array<Option<Bool>> = [Option<Bool>.None, Option<Bool>.None, Option<Bool>.None,
        Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None,
        Option<Bool>.None]
}

main(): Int64 {
    try {
        let var_1733372132158_379: Option<Bool> = ([UInt8(196), UInt8(71), UInt8(138), UInt8(206), UInt8(18), UInt8(100),
            UInt8(105), UInt8(156), UInt8(68), UInt8(161)] as Bool);
        func func_1733372132158_13(): Option<Bool> { // block id: 14
            func_1733372132158_17(
                [Option<Bool>.Some(var_1733372132158_214), Option<Bool>.Some(false), var_1733372132158_379,
                    var_1733372132158_379, var_1733372132158_379, var_1733372132158_379, var_1733372132158_379,
                    var_1733372132158_379, var_1733372132158_379, var_1733372132158_389][7]) >> ((Int8(try { // block id: 395
                var_1733372132158_397
            } finally { // block id: 399
                ((Int32(Int32(56)) & 127)..=(Int32(Int32(-18)) & 127) : (Int64(-62) | 1));
                ();
                var_1733372132158_397 | UInt8(59)
            })) & 7);
            Class_1733372132158_406<Bool>.func_1733372132158_418<Option<VArray<Bool, $5>>>()
        };

        const var_1733372132158_458: String = ###")9OhsXrF8L"###;
        (func_1733372132158_13() ?? (((UInt8(UInt8(201)) & 127)..(UInt8(var_1733372132158_448) & 127) : (var_1733372132158_451 |
                1)), [UInt64(182), UInt64(50), UInt64(163), UInt64(65), UInt64(244), UInt64(38), UInt64(23), UInt64(76),
                UInt64(188), UInt64(136)], var_1733372132158_73, var_1733372132158_267, var_1733372132158_458)[3]);
        var_1733372132158_73;
        try { // block id: 463
            Int64(UInt16(179))
        } finally { // block id: 466
            Int64(15)
        }
        // CRC Check All Variables
        var crcCheck = CrcCheck(5000, 32)
        crcCheck.updateBuffer(UInt64(var_1733372132158_249 * var_1733372132158_249), 64)
        crcCheck.updateBuffer(UInt64(var_1733372132158_397 * var_1733372132158_397), 64)
        crcCheck.updateBuffer(UInt64(var_1733372132158_448 * var_1733372132158_448), 64)
        crcCheck.crcCheck()
        crcCheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) {
        println("Exception: NoneValueException")
    }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        buffer = Array<Int64>(buffer_n, {i => 0})
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, {i => 0})
        var byte_c = 1
        var byte_index = 0
        while (value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[(i + buffer_index) % buffer.size] = byteArray[i + byte_index]
            i++
        }
        buffer_index = (buffer_index + i) % buffer.size
    }

    func updateBuffer(input: Bool, byte_n: Int64): Unit {
        if (input == true) {
            updateBuffer(1, byte_n)
        } else {
            updateBuffer(0, byte_n)
        }
    }

    func updateBuffer(input: Rune, byte_n: Int64): Unit {
        updateBuffer(UInt64(UInt32(input)), byte_n)
    }

    func updateBuffer(input: String, byte_n: Int64): Unit {
        for (c in input) {
            updateBuffer(c, byte_n)
        }
    }

    func updateBuffer(input: Unit, byte_n: Int64): Unit {
        updateBuffer(input.toString(), byte_n)
    }

    func updateBuffer(input: Any, byte_n: Int64): Unit {
        if (input is Hashable) {
            match (input as Hashable) {
                case Some(v) => updateBuffer(UInt64(v.hashCode()), byte_n)
                case _ => updateBuffer(1, byte_n)
            }
        } else if (input is ToString) {
            match (input as ToString) {
                case Some(v) => updateBuffer(v.toString(), byte_n)
                case _ => updateBuffer(1, byte_n)
            }
        } else {
            updateBuffer(1, byte_n)
        }
    }
    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, {i => 0})
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, {i => 0})
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2 ** 2 * crc_output[i] + 2 ** 1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
