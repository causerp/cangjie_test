/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args

public var var_1663068712983_48 : Option<Option<Range<Int8>>> = (UInt32(Int16(Int8(84))) as Option<Range<Int8>>)
var var_1663068712983_56 : ?Range<Int8> = (UInt16(137) as Range<Int8>)
public var var_1663068712983_88 : Int16 = Int16(Int16(-37))
public let var_1663068712983_103 : Int16 = Int16(92)
public let var_1663068712983_144 : UInt16 = UInt16(Int16(UInt16(68)))
let var_1663068712983_160 : Range<UInt16> = ((UInt16(254)&127)..(UInt16(102)&127):((Int64((-10))|1)))
public let var_1663068712983_180 : Array<Range<UInt16>> = [((UInt16(27)&127)..(UInt16(8)&127):((-79)|1)), ((UInt16(15)&127)..=(UInt16(179)&127):(116|1)), ((UInt16(244)&127)..=(UInt16(61)&127):((-71)|1)), ((UInt16(181)&127)..=(UInt16(59)&127):(21|1)), ((UInt16(170)&127)..(UInt16(146)&127):((-93)|1)), ((UInt16(83)&127)..=(UInt16(Int16(Int8(-1)))&127):((93|1))), ((UInt16(UInt16(25))&127)..=(UInt16(UInt8(49))&127):((Int64(Int8(114))|1))), ((UInt16(181)&127)..=(UInt16(Int16(63))&127):((Int64(UInt16(140))|1))), ((UInt16(157)&127)..(UInt16(UInt8(174))&127):(((-116)|1))), ((UInt16(Int8(74))&127)..=(UInt16(153)&127):((Int64(Int8(Int8(-71)))|1)))]
public var var_1663068712983_249 : Float32 = Float32(13.0)
public var var_1663068712983_257 : ?Range<Int8> = Option<Range<Int8>>.None
let var_1663068712983_265 : Int8 = Int8(-82)
func func_1663068712983_9() : Unit { // block id: 10

}



func func_1663068712983_68(optionalParam_1663068712983_69 ! : Range<Int32> = ((Int32(-18)&127)..=(Int32(40)&127):(18|1)), optionalParam_1663068712983_71 ! : UInt16 = UInt16(158), namedParam_1663068712983_73 ! : Bool) : Bool { // block id: 74
    [false, false, false, false, true, false, false, true, true, true][6]
}

public func func_1663068712983_80(param_1663068712983_81 : Bool) : Range<Int32> { // block id: 82
    (Int32(Int32(-97))&127)..(Int32(var_1663068712983_88)&127):((Int64(try { // block id: 93
        ((UInt32(221)&127)..(UInt32(184)&127):(62|1));
        var var_1663068712983_97 : UInt64 = UInt64(219);
        var_1663068712983_97 = var_1663068712983_97;
        Int16(-40) & var_1663068712983_103
    } catch (e: Exception) { // block id: 105
        var var_1663068712983_107 : Unit = ();
        var_1663068712983_107;
        var_1663068712983_88 << ((Int16(-123)) & 7)
    })|1))
}



main(): Int64 {
    try {
        let var_1663068712983_6 : Float64 = (-107.0);
        var_1663068712983_6;
        func_1663068712983_9();
        let var_1663068712983_114 : Bool = false;
        let var_1663068712983_136 : Int64 = Int64(UInt64(Int8(-54)));
        let var_1663068712983_150 : Range<UInt16> = ((UInt16(233)&127)..(UInt16(37)&127):(((-82)|1)));
        let var_1663068712983_270 : Unit = ();
        let var_1663068712983_290 : Range<Int32> = ((Int32(-113)&127)..=(Int32(-20)&127):((-93)|1));
        func func_1663068712983_222(namedParam_1663068712983_223 ! : Range<Int64>) : Option<Range<Int8>> { // block id: 224
            match (((UInt8(149), UInt32(204), (-34), "^^BP;S%^~|", Option<Option<Option<Range<Int8>>>>.None, ((Int32(64)&127)..=(Int32(52)&127):(55|1)), ())[4] ?? var_1663068712983_48)) {
                case _ : Array<Range<UInt16>> => 
                    Float32(-69.0) - var_1663068712983_249;
                    var var_1663068712983_252 : Unit = ();
                    var_1663068712983_252;
                    if (false) { var_1663068712983_257 } else { Option<Range<Int8>>.None } 
                
                case _ => 
                    ((var_1663068712983_265&127)..=(Int8(9)&127):((var_1663068712983_136|1)));
                    var_1663068712983_270;
                    Option<Range<Int8>>.Some(((Int8(-9)&127)..(Int8(-118)&127):((-102)|1)))
                
                case caseVar_1663068712983_276 : Array<Range<UInt16>> => 
                    var_1663068712983_56
                
                case caseVar_1663068712983_281 => 
                    if (true) { Option<Range<Int8>>.None } else { Option<Range<Int8>>.None } 
                
                case _ => 
                    var_1663068712983_290;
                    var_1663068712983_270;
                    if (var_1663068712983_114) { var_1663068712983_257 } else { var_1663068712983_56 } 
                
            }
        }
;
        let var_1663068712983_298 : Range<Int64> = (((-100)&127)..=((-127)&127):((-63)|1));
        let var_1663068712983_318 : Option<Unit> = ((((((-95)&127)..=((-71)&127):((4|1))) as Option<Option<Range<Int8>>>) as Range<Int8>) as Unit);
        let var_1663068712983_336 : Array<Range<Int8>> = [((Int8(57)&127)..=(Int8(-90)&127):(33|1)), ((Int8(Int8(-69))&127)..=(Int8(41)&127):((81|1))), ((Int8(2)&127)..=(Int8(UInt8(249))&127):((Int64(UInt16(Int8(-48)))|1))), ((Int8(104)&127)..=(Int8(96)&127):((-3)|1)), ((Int8(108)&127)..(Int8(-36)&127):((-68)|1)), ((Int8(-23)&127)..=(Int8(-75)&127):((-100)|1)), ((Int8(61)&127)..(Int8(93)&127):((Int64(Int64(UInt32(173)))|1))), ((Int8(51)&127)..(Int8(109)&127):((-53)|1)), ((Int8(107)&127)..(Int8(-24)&127):((-73)|1)), ((Int8(56)&127)..(Int8(-119)&127):((-68)|1))];
        func func_1663068712983_61(optionalParam_1663068712983_62 ! : Range<UInt16> = ((UInt16(97)&127)..(UInt16(116)&127):(97|1)), namedParam_1663068712983_64 ! : Range<UInt64>) : Range<Int8> { // block id: 65
            var var_1663068712983_117 : UInt16 = UInt16(UInt16(UInt8(Int8(UInt8(48)))));
            let var_1663068712983_170 : UInt16 = UInt16(Int16(-57));
            if (func_1663068712983_68(optionalParam_1663068712983_69 : (var_1663068712983_114|>func_1663068712983_80), optionalParam_1663068712983_71 : var_1663068712983_117, namedParam_1663068712983_73 : false || var_1663068712983_114)) { try { // block id: 129
                [optionalParam_1663068712983_62, ((var_1663068712983_117&127)..=(UInt16(43)&127):((var_1663068712983_136|1))), optionalParam_1663068712983_62, ((var_1663068712983_117&127)..=(var_1663068712983_144&127):((var_1663068712983_136|1))), var_1663068712983_150, ((var_1663068712983_144&127)..=(var_1663068712983_117&127):((126|1))), var_1663068712983_160, var_1663068712983_150, var_1663068712983_150, ((var_1663068712983_170&127)..=(UInt16(72)&127):(((-19)|1)))]
            } catch (_) { // block id: 175
                var_1663068712983_48;
                if (false) { var_1663068712983_180 } else { [((UInt16(240)&127)..(UInt16(213)&127):((-74)|1)), ((UInt16(158)&127)..=(UInt16(80)&127):(19|1)), ((UInt16(90)&127)..(UInt16(146)&127):(70|1)), ((UInt16(190)&127)..(UInt16(22)&127):((-118)|1)), ((UInt16(188)&127)..=(UInt16(45)&127):(29|1)), ((UInt16(106)&127)..(UInt16(11)&127):((-22)|1)), ((UInt16(192)&127)..(UInt16(198)&127):((-30)|1)), ((UInt16(35)&127)..(UInt16(41)&127):(101|1)), ((UInt16(197)&127)..(UInt16(191)&127):(61|1)), ((UInt16(41)&127)..=(UInt16(94)&127):((-16)|1))] } 
            }[4] } else { match (func_1663068712983_222(namedParam_1663068712983_223 : var_1663068712983_298)) {
                case _ => 
                    let var_1663068712983_303 : Range<UInt16> = ((UInt16(Int16(98))&127)..=(UInt16(211)&127):(((-114)|1)));
                    var_1663068712983_303
                
            } } ;
            var loopTimeVar_1663068712983_332 : Int64 = 0;
            while ((false) && loopTimeVar_1663068712983_332 < 100 ) {
                loopTimeVar_1663068712983_332++;
                (var_1663068712983_318 ?? var_1663068712983_270);
                [(), (), (), (), (), (), (), (), (), ()][3]
            };
            var_1663068712983_336[2]
        }
;
        let var_1663068712983_380 : (UInt8, UInt32, Int64, String, Option<Option<Option<Range<Int8>>>>, Range<Int32>, Unit) = (UInt8(UInt8(Int8(43))), UInt32(Int8(UInt8(Int8(-89)))), (-23), "v,b??SO!\"g", ([(), (), (), (), (), (), (), (), (), ()] as Option<Option<Range<Int8>>>), ((Int32(-87)&127)..=(Int32(86)&127):((-101)|1)), ());
        let var_1663068712983_405 : UInt64 = UInt64(UInt16(Int8(-89)));
        let var_1663068712983_427 : String = "QY~*C#a{7rx";
        func func_1663068712983_12(param_1663068712983_13 : Bool, param_1663068712983_14 : Unit, param_1663068712983_15 : Float64, namedParam_1663068712983_16 ! : Unit) : Int64 { // block id: 17
            try { // block id: 29
                [UInt64(100), UInt64(229), UInt64(82), UInt64(54), UInt64(232), UInt64(7), UInt64(171), UInt64(145), UInt64(20), UInt64(145)]
            } catch (_) { // block id: 31
                ();
                var var_1663068712983_34 : Array<UInt64> = [UInt64(81), UInt64(37), UInt64(80), UInt64(133), UInt64(12), UInt64(125), UInt64(47), UInt64(9), UInt64(58), UInt64(230)];
                var_1663068712983_34
            }[6];
            ((var_1663068712983_48 ?? if (false) { var_1663068712983_56 } else { var_1663068712983_56 } ) ?? func_1663068712983_61(namedParam_1663068712983_64 : ((UInt64(42)&127)..(UInt64(127)&127):(76|1))));
            var var_1663068712983_422 : UInt8 = UInt8(197);
            var var_1663068712983_459 : Int32 = Int32(84);
            match (func_1663068712983_222(namedParam_1663068712983_223 : ((var_1663068712983_136&127)..=(110&127):(((-108)|1))))) {
                case _ : UInt8 => 
                    ();
                    param_1663068712983_13;
                    if (false) { var_1663068712983_380 } else { var_1663068712983_380 } 
                
                case _ => 
                    var var_1663068712983_400 : UInt64 = UInt64(7);
                    [var_1663068712983_400, var_1663068712983_400, UInt64(36), var_1663068712983_405, UInt64(86), UInt64(202), UInt64(177), var_1663068712983_405, var_1663068712983_400, UInt64(167)];
                    (-113) >> ((121) & 7);
                    let var_1663068712983_430 : Option<Option<Option<Range<Int8>>>> = Option<Option<Option<Range<Int8>>>>.Some(([((Int8(73)&127)..(Int8(-7)&127):((28|1))), ((Int8(-87)&127)..(Int8(66)&127):((-52)|1)), ((Int8(10)&127)..(Int8(-4)&127):((-49)|1)), ((Int8(-94)&127)..=(Int8(11)&127):(((-113)|1))), ((Int8(-77)&127)..(Int8(24)&127):(94|1)), ((Int8(111)&127)..(Int8(87)&127):(77|1)), ((Int8(75)&127)..=(Int8(-112)&127):((110|1))), ((Int8(-106)&127)..(Int8(2)&127):((-90)|1)), ((Int8(60)&127)..=(Int8(-53)&127):((99|1))), ((Int8(70)&127)..(Int8(-42)&127):(115|1))] as Option<Range<Int8>>));
                    if (var_1663068712983_114) { (var_1663068712983_422, UInt32(193), var_1663068712983_136, var_1663068712983_427, var_1663068712983_430, ((Int32(-64)&127)..=(var_1663068712983_459&127):((var_1663068712983_136|1))), var_1663068712983_270) } else { (var_1663068712983_422, UInt32(133), var_1663068712983_136, var_1663068712983_427, Option<Option<Option<Range<Int8>>>>.Some(Option<Option<Range<Int8>>>.None), ((Int32(93)&127)..=(Int32(-116)&127):((-27)|1)), ()) } 
                
            }[2]
        }
;
        func_1663068712983_12([var_1663068712983_114, true, var_1663068712983_114, false, true, true, true, true, true, var_1663068712983_114][8], if (var_1663068712983_114) { // block id: 489
            ((UInt16(44)&127)..=(var_1663068712983_144&127):((18|1)));
            var_1663068712983_270
        }, var_1663068712983_6, namedParam_1663068712983_16 : [var_1663068712983_270, (), (), var_1663068712983_270, (), var_1663068712983_270, (), var_1663068712983_270, (), ()][5])
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var_1663068712983_88*var_1663068712983_88), 64)
        crccheck.updateBuffer(UInt64(var_1663068712983_103*var_1663068712983_103), 64)
        crccheck.updateBuffer(UInt64(var_1663068712983_136*var_1663068712983_136), 64)
        crccheck.updateBuffer(UInt64(var_1663068712983_144*var_1663068712983_144), 64)
        crccheck.updateBuffer(UInt64(var_1663068712983_265*var_1663068712983_265), 64)
        crccheck.updateBuffer(UInt64(var_1663068712983_405*var_1663068712983_405), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
