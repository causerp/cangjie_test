/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args

public let var_1691175042021_21 : UInt32 = UInt32(222)
public const var_1691175042021_29 : Unit = ()
let var_1691175042021_56 : Enum_1691175042021_32 = Enum_1691175042021_32.defaultValue
var var_1691175042021_64 : Int8 = Int8(UInt8(28))
var var_1691175042021_83 : Float32 = Float32(68.0)
let var_1691175042021_139 : Bool = (r'k' is Range<UInt64>)
public let var_1691175042021_145 : Bool = false
public let var_1691175042021_157 : Option<UInt32> = (((UInt32(UInt32(50))&127)..(UInt32(UInt32(UInt16(UInt16(114))))&127):(Int64(6)|1)) as UInt32)
public let var_1691175042021_194 : UInt16 = UInt16(Int8(Int8(-35)))
var var_1691175042021_204 : UInt8 = UInt8(Int8(-31))
var var_1691175042021_233 : Range<UInt32> = ((UInt32(UInt32(239))&127)..=(UInt32(UInt32(168))&127):(Int64(76)|1))
let var_1691175042021_250 : Int64 = Int64(87)
var var_1691175042021_288 : UInt32 = UInt32(UInt32(UInt8(UInt8(163))))
public let var_1691175042021_309 : Float64 = Float64(Float64(-32.0))
let var_1691175042021_337 : Float64 = Float64(85.0)
public const var_1691175042021_341 : Float64 = -49.0
let var_1691175042021_364 : Range<Int64> = ((Int64(Int64(UInt16(UInt8(UInt8(178)))))&127)..=(Int64(Int64(UInt8(142)))&127):(Int64(Int8(109))|1))
var var_1691175042021_395 : ((Unit, Rune, Float64), Unit, Float32) = (((), r'J', Float64(-1.0)), (), Float32(-37.0))
var var_1691175042021_431 : VArray<Bool, $1> = [false]
public const var_1691175042021_464 : Int16 = 36
public var var_1691175042021_474 : Array<UInt64> = [UInt64(Int8(UInt8(235))), UInt64(UInt8(Int8(Int8(47)))), UInt64(Int64(74)), UInt64(144), UInt64(UInt8(Int8(UInt8(24)))), UInt64(85), UInt64(Int16(113)), UInt64(88), UInt64(99), UInt64(Int16(Int16(-7)))]
public let var_1691175042021_502 : UInt = UInt64(95)
public var var_1691175042021_566 : (Range<UInt64>, UInt32, Bool, Float64, UInt32) = (((UInt64(UInt64(201))&127)..(UInt64(UInt64(217))&127):(Int64(-58)|1)), UInt32(Int16(UInt8(42))), (false is Float32), Float64(Float32(-63.0)), UInt32(240))
public var var_1691175042021_601 : UInt = UInt64(Int32(UInt8(Int8(UInt8(156)))))
public var var_1691175042021_612 : Class_1691175042021_91 = Class_1691175042021_91()
public let var_1691175042021_674 : Range<Int16> = ((Int16(Int16(Int8(Int8(-95))))&127)..=(Int16(Int16(121))&127):(Int64(-98)|1))
public let var_1691175042021_697 : Bool = (Enum_1691175042021_670.defaultValue is () -> (Float32, Float64, Int8, Bool))
public var var_1691175042021_701 : Enum_1691175042021_670 = Enum_1691175042021_670.defaultValue
public let var_1691175042021_709 : Range<Int8> = ((Int8(Int8(48))&127)..=(Int8(Int8(-64))&127):(Int64(-105)|1))
public const var_1691175042021_750 : Bool = false
let var_1691175042021_757 : (Int32, UInt8, (Range<UInt64>, UInt32, Bool, Float64, UInt32), UInt16, Int32, Bool, VArray<Bool, $1>, (Unit, Rune, Float64)) = (Int32(UInt16(Int8(60))), UInt8(103), (((UInt64(UInt64(152))&127)..=(UInt64(UInt64(59))&127):(Int64(6)|1)), UInt32(Int8(Int8(7))), false, Float64(Float64(Float32(66.0))), UInt32(53)), UInt16(Int16(Int16(UInt8(111)))), Int32(91), ((Int8(UInt8(99)) as VArray<Bool, $1>) is Array<Bool>), VArray<Bool, $1>(repeat: false), ((), r'S', Float64(Float32(82.0))))
public let var_1691175042021_809 : Class_1691175042021_91 = Class_1691175042021_91()
var var_1691175042021_817 : Class_1691175042021_91 = Class_1691175042021_91()
public let var_1691175042021_826 : Int32 = Int32(Int32(-83))
public var var_1691175042021_836 : Class_1691175042021_91 = Class_1691175042021_91()
public var var_1691175042021_841 : UInt8 = UInt8(UInt8(15))
var var_1691175042021_888 : (Unit, Rune, Float64) = ((), r'g', Float64(123.0))
var var_1691175042021_933 : Class_1691175042021_861<Array<Float64>> = Class_1691175042021_861<Array<Float64>>()
public var var_1691175042021_965 : Int32 = Int32(Int16(Int8(-118)))
public enum Enum_1691175042021_32 {
    defaultValue
}
public open class Class_1691175042021_91 {
    init() { // block id: 93

    }
;
    public static let var_1691175042021_96 : (Float32, Float64, Int8, Bool) = (Float32(-69.0), Float64(38.0), Int8(32), false);
    public let var_1691175042021_349 : Array<Float64> = [Float64(51.0), Float64(67.0), Float64(80.0), Float64(-83.0), Float64(68.0), Float64(44.0), Float64(61.0), Float64(-88.0), Float64(91.0), Float64(-59.0)];
    public var var_1691175042021_846 : UInt16 = UInt16(114);
    public let var_1691175042021_880 : Range<UInt16> = ((UInt16(UInt16(16))&127)..=(UInt16(UInt16(29))&127):(Int64(16)|1));
    public mut prop var_1691175042021_936 : UInt8 { // block id: 937
        get() { // block id: 939
            Int64(-21);
            UInt8(UInt8(185));
            var_1691175042021_989
        }

        set(Value) { // block id: 945
            ();
            var_1691175042021_989 = Value
        }

    };
    var var_1691175042021_989 : UInt8 = UInt8(228)
}


public func func_1691175042021_117(param_1691175042021_118 : Class_1691175042021_91) : UInt32 { // block id: 119
    (if ([var_1691175042021_139, var_1691175042021_139, true, var_1691175042021_145, var_1691175042021_139, var_1691175042021_145, false, var_1691175042021_145, true, false][2]) { (if (var_1691175042021_145) { var_1691175042021_157 } else { var_1691175042021_157 } ) } else { if (var_1691175042021_139) { // block id: 168
        var_1691175042021_29;
        Option<UInt32>.Some(var_1691175042021_21)
    } else { // block id: 172
        var_1691175042021_29;
        var var_1691175042021_175 : UInt16 = UInt16(UInt16(UInt16(Int16(Int8(23)))));
        var_1691175042021_175;
        var_1691175042021_157
    } }  ?? var_1691175042021_21)
}

func func_1691175042021_447(param_1691175042021_267 : Array<Float64>, param_1691175042021_268 : Range<Int64>) : Array<Float64> { // block id: 269
    var var_1691175042021_282 : VArray<Int64, $1> = [Int64(-40)];
    match (if (var_1691175042021_139) { // block id: 275
        var var_1691175042021_278 : Bool = false;
        var_1691175042021_278 &&= var_1691175042021_139;
        var_1691175042021_282
    } else if (false) { // block id: 285
        var_1691175042021_288 >>= ((UInt32(76)) & 7);
        VArray<Int64, $1>(repeat: var_1691175042021_250)
    } else { // block id: 296
        VArray<Int64, $1>(repeat: var_1691175042021_250)
    }[0]) {
        case 85 | 24 | -8 => 
            [Float64(-84.0), Float64(-9.0), Float64(-81.0), Float64(-95.0), var_1691175042021_309, Float64(-47.0), Float64(100.0), var_1691175042021_309, Float64(-87.0), Float64(-10.0)]
        
        case _ => 
            let var_1691175042021_320 : (Float32, Float64, Int8, Bool) = (Float32(Float32(Float32(-111.0))), Float64(Float32(19.0)), Int8(44), true);
            var_1691175042021_320;
            [Float64(56.0), var_1691175042021_309, Float64(5.0), Float64(126.0), var_1691175042021_309, var_1691175042021_309, var_1691175042021_337, var_1691175042021_337, var_1691175042021_341, var_1691175042021_309]
        
    }
}

public func func_1691175042021_260(param_1691175042021_261 : Int64) : ((Unit, Rune, Float64), Unit, Float32) { // block id: 262
    let var_1691175042021_346 : Class_1691175042021_91 = Class_1691175042021_91();
    func_1691175042021_447(var_1691175042021_346.var_1691175042021_349, if (true) { // block id: 353
        var_1691175042021_29;
        ();
        ((Int64(var_1691175042021_250)&127)..=(Int64(Int64(3))&127):(Int64(-124)|1))
    } else if (false) { // block id: 361
        ();
        var_1691175042021_364
    } else { // block id: 374
        var_1691175042021_29;
        ();
        var_1691175042021_364
    })[1];
    try { // block id: 380
        var_1691175042021_29;
        (var_1691175042021_29, r'D', var_1691175042021_341);
        ((var_1691175042021_29, r'd', Float64(80.0)), var_1691175042021_29, Float32(82.0))
    } finally { // block id: 393
        var_1691175042021_395
    }
}



public struct Struct_1691175042021_631<T0, T1> {
    init() { // block id: 633

    }
;
    public static mut prop var_1691175042021_636 : (Float32, Float64, Int8, Bool) { // block id: 637
        get() { // block id: 639
            (Float32(Float32(Float32(63.0))), Float64(Float64(Float32(3.0))), Int8(UInt8(UInt8(225))), false)
        }

        set(Value) { // block id: 653
            ()
        }

    }
}

public enum Enum_1691175042021_670 {
    defaultValue
}
public func func_1691175042021_447<T0>() : Class_1691175042021_91 { // block id: 448
    let var_1691175042021_457 : ?Bool = (((UInt64(UInt64(34))&127)..(UInt64(UInt64(132))&127):(Int64(53)|1)) as Bool);
    const var_1691175042021_527 : UInt64 = 154;
    if (if ((var_1691175042021_457 ?? true)) { // block id: 461
        var_1691175042021_464 > var_1691175042021_464
    } else { // block id: 467
        var_1691175042021_464;
        false
    }) { [var_1691175042021_474, [UInt64(253), UInt64(193), UInt64(203), UInt64(95), UInt64(39), UInt64(203), UInt64(115), UInt64(4), UInt64(58), UInt64(217)], [UInt64(68), UInt64(29), UInt64(214), UInt64(157), UInt64(16), UInt64(126), UInt64(242), UInt64(76), UInt64(63), UInt64(14)], [var_1691175042021_502, UInt64(112), var_1691175042021_502, UInt64(252), UInt64(149), UInt64(150), UInt64(127), UInt64(231), UInt64(161), var_1691175042021_502], [UInt64(211), var_1691175042021_502, UInt64(114), var_1691175042021_502, UInt64(163), var_1691175042021_502, UInt64(179), var_1691175042021_502, var_1691175042021_502, var_1691175042021_502], [UInt64(250), var_1691175042021_527, UInt64(6), var_1691175042021_527, UInt64(0), UInt64(249), UInt64(156), UInt64(43), var_1691175042021_502, UInt64(58)], var_1691175042021_474, [UInt64(113), UInt64(104), UInt64(138), var_1691175042021_527, var_1691175042021_502, var_1691175042021_502, UInt64(241), UInt64(181), UInt64(253), UInt64(192)], var_1691175042021_474, [UInt64(121), var_1691175042021_527, var_1691175042021_502, UInt64(140), UInt64(186), UInt64(170), UInt64(101), UInt64(224), var_1691175042021_527, UInt64(2)]][4] } else { if (var_1691175042021_566[2]) { // block id: 578
        [var_1691175042021_527, var_1691175042021_502, var_1691175042021_502, var_1691175042021_527, var_1691175042021_502, UInt64(38), var_1691175042021_527, var_1691175042021_527, UInt64(10), UInt64(183)]
    } else if (var_1691175042021_145) { // block id: 591
        var_1691175042021_29;
        [var_1691175042021_502, UInt64(54), UInt64(164), UInt64(87), var_1691175042021_527, UInt64(183), var_1691175042021_601, UInt64(175), UInt64(63), UInt64(31)]
    } else { // block id: 610
        var_1691175042021_612;
        if (false) { [UInt64(237), UInt64(133), UInt64(98), UInt64(173), UInt64(142), UInt64(26), UInt64(69), UInt64(134), UInt64(54), UInt64(223)] } else { [var_1691175042021_502, UInt64(68), UInt64(142), var_1691175042021_502, var_1691175042021_601, UInt64(167), UInt64(210), UInt64(136), var_1691175042021_527, UInt64(254)] } 
    } } ;
    var loopTimeVar_1691175042021_657 : Range<UInt64> = ((UInt64(UInt64(105))&127)..=(UInt64(UInt64(UInt64(Int16(Int8(66)))))&127):(Int64(Int64(UInt64(UInt64(135))))|1));
    for (i in loopTimeVar_1691175042021_657 where Struct_1691175042021_631<Float64, Int32>.var_1691175042021_636[3]) {

    };
    var var_1691175042021_726 : VArray<Int64, $1> = VArray<Int64, $1>({ i => Int64(-26)});
    var var_1691175042021_797 : Option<UInt32> = ((((UInt64(UInt64(170))&127)..=(UInt64(UInt64(127))&127):(Int64(2)|1)), UInt32(213), false, Float64(83.0), UInt32(244)) as UInt32);
    if (match (match (var_1691175042021_674) {
        case caseVar_1691175042021_683 : Range<Int64> => 
            var_1691175042021_194;
            Enum_1691175042021_670.defaultValue
        
        case caseVar_1691175042021_689 : Float32 => 
            Enum_1691175042021_670.defaultValue
        
        case _ : Int8 => 
            if (var_1691175042021_697) { var_1691175042021_701 } else { var_1691175042021_701 } 
        
        case caseVar_1691175042021_706 : UInt16 => 
            var_1691175042021_709;
            var_1691175042021_29;
            var var_1691175042021_713 : Enum_1691175042021_670 = Enum_1691175042021_670.defaultValue;
            var_1691175042021_713
        
        case _ => 
            if (false) { Enum_1691175042021_670.defaultValue } else { Enum_1691175042021_670.defaultValue } 
        
    }) {
        case defaultValue => 
            false;
            var_1691175042021_726;
            var_1691175042021_194 <= UInt16(36)
        
        case _ : Enum_1691175042021_32 => 
            true
        
        case _ => 
            var_1691175042021_83 < var_1691175042021_83
        
        case caseVar_1691175042021_744 => 
            var_1691175042021_139
        
        case _ => 
            var_1691175042021_750
        
    }) { Class_1691175042021_91() } else { match (var_1691175042021_757[4]) {
        case 97 | -123 | 122 | 63 => 
            if (var_1691175042021_139) { Option<UInt32>.None } else { var_1691175042021_797 } ;
            if (var_1691175042021_139) { var_1691175042021_612 } else { var_1691175042021_809 } 
        
        case -92 => 
            if (true) { var_1691175042021_817 } else { var_1691175042021_809 } 
        
        case 3 => 
            var_1691175042021_29;
            var_1691175042021_826 + var_1691175042021_826;
            var_1691175042021_817
        
        case -16 => 
            Struct_1691175042021_631<Float64, Int32>();
            var_1691175042021_836
        
        case _ => 
            var_1691175042021_841;
            var_1691175042021_809
        
    } } 
}

public open class Class_1691175042021_861<T0> <: Class_1691175042021_91 {
    init() { // block id: 863

    }
;
    public static let var_1691175042021_866 : Array<Class_1691175042021_91> = [Class_1691175042021_91(), Class_1691175042021_861<Array<Float64>>(), Class_1691175042021_861<Array<Float64>>(), Class_1691175042021_861<Array<Float64>>(), Class_1691175042021_861<Array<Float64>>(), Class_1691175042021_91(), Class_1691175042021_861<Array<Float64>>(), Class_1691175042021_91(), Class_1691175042021_861<Array<Float64>>(), Class_1691175042021_91()]
}

public func func_1691175042021_442() : Class_1691175042021_91 { // block id: 443
    func_1691175042021_447<Option<UInt32>>().var_1691175042021_846 >>= ((var_1691175042021_194) & 7);
    var loopTimeVar_1691175042021_857 : Int64 = 0;
    while ((false) && loopTimeVar_1691175042021_857 < 100 ) {
        loopTimeVar_1691175042021_857++;
        [(), (), (), (), (), (), (), (), (), ()][1]
    };
    Class_1691175042021_861<Array<Float64>>.var_1691175042021_866[7]
}

func func_1691175042021_408(optionalParam_1691175042021_409 ! : Array<Float64> = [Float64(-17.0), Float64(-115.0), Float64(-70.0), Float64(-46.0), Float64(25.0), Float64(34.0), Float64(-47.0), Float64(-71.0), Float64(-105.0), Float64(27.0)], namedParam_1691175042021_411 ! : (Class_1691175042021_91) -> UInt32) : Range<UInt16> { // block id: 414
    let var_1691175042021_424 : Option<VArray<Bool, $1>> = (Float32(Float32(Float32(Float32(37.0)))) as VArray<Bool, $1>);
    var loopTimeVar_1691175042021_439 : Int64 = 0;
    do {
        loopTimeVar_1691175042021_439++;
        var_1691175042021_29;
        Enum_1691175042021_32.defaultValue
    } while (((var_1691175042021_424 ?? var_1691175042021_431)[0]) && loopTimeVar_1691175042021_439 < 100 ) ;
    func_1691175042021_442().var_1691175042021_880
}

public func func_1691175042021_404<T0, T1, T2>(param_1691175042021_405 : Int16) : ((Unit, Rune, Float64), Unit, Float32) { // block id: 406
    var var_1691175042021_883 : (Class_1691175042021_91) -> UInt32 = func_1691175042021_117;
    func_1691175042021_408(namedParam_1691175042021_411 : var_1691175042021_883);
    var_1691175042021_817;
    var loopTimeVar_1691175042021_896 : Array<Class_1691175042021_91> = [Class_1691175042021_91(), Class_1691175042021_91(), Class_1691175042021_861<Array<Float64>>(), Class_1691175042021_91(), Class_1691175042021_861<Array<Float64>>(), Class_1691175042021_91(), Class_1691175042021_91(), Class_1691175042021_91(), Class_1691175042021_91(), Class_1691175042021_91()];
    (var_1691175042021_888, for (i in loopTimeVar_1691175042021_896 where true) {

    }, -(Float32(-27.0) * var_1691175042021_83))
}

public func func_1691175042021_913(param_1691175042021_914 : Int64) : Int16 { // block id: 915
    var_1691175042021_464
}


func func_1691175042021_254(param_1691175042021_255 : UInt64) : Unit { // block id: 256
    var var_1691175042021_918 : (Int64) -> Int16 = func_1691175042021_913;
    ((Option<Int64>.Some(Int64(8)) ?? Int64(103))|>(var_1691175042021_918~>func_1691175042021_404<UInt32, Rune, Range<UInt64>>))[1];
    var_1691175042021_29;
    var_1691175042021_933.var_1691175042021_936 >>= ((UInt8((var_1691175042021_933.var_1691175042021_936))) & 7)
}

public func func_1691175042021_8(param_1691175042021_9 : Float32) : Int64 { // block id: 10
    func func_1691175042021_26() : (Float32, Float64, Int8, Bool) { // block id: 27
        var_1691175042021_29;
        var var_1691175042021_36 : Bool = (Float64(Float64(Float64(Float32(-89.0)))) is Int8);
        var var_1691175042021_74 : UInt = UInt64(123);
        match (if (var_1691175042021_36) { // block id: 42
            var var_1691175042021_45 : UInt64 = UInt64(Int64(Int32(Int16(Int8(-67)))));
            var_1691175042021_45--;
            Enum_1691175042021_32.defaultValue
        } else { // block id: 52
            ();
            var_1691175042021_29;
            var_1691175042021_56
        }) {
            case caseVar_1691175042021_60 => 
                Int8(75);
                var_1691175042021_64;
                ()
            
            case caseVar_1691175042021_70 : Int32 => 
                var_1691175042021_74 %= ((UInt64(76)) | 1);
                var_1691175042021_29
            
            case defaultValue => 
                var_1691175042021_83 -= var_1691175042021_83
            
            case _ => 
                ();
                var_1691175042021_29
            
        };
        Class_1691175042021_91.var_1691175042021_96
    }
;
    func func_1691175042021_13(param_1691175042021_14 : String, param_1691175042021_15 : UInt32, namedParam_1691175042021_16 ! : UInt32, optionalParam_1691175042021_17 ! : UInt16 = UInt16(238)) : Bool { // block id: 19
        var_1691175042021_21;
        func_1691175042021_26()[3]
    }
;
    const var_1691175042021_110 : String = "+G]wb)!nKN";
    var var_1691175042021_184 : (Class_1691175042021_91) -> UInt32 = { lambdaParameter_1691175042021_187 : Class_1691175042021_91 => UInt32(68) };
    var loopTimeVar_1691175042021_210 : Int64 = 0;
    do {
        loopTimeVar_1691175042021_210++;
        var loopTimeVar_1691175042021_208 : Int = 0;
        do {
            loopTimeVar_1691175042021_208++;
            var_1691175042021_204--
        } while ((var_1691175042021_139) && loopTimeVar_1691175042021_208 < 100 ) 
    } while ((func_1691175042021_13(try { // block id: 104
        UInt32(169);
        UInt8(31);
        if (true) { var_1691175042021_110 } else { "-hPd hhQuJ" } 
    } finally { // block id: 113
        var_1691175042021_110
    }, UInt32(91), namedParam_1691175042021_16 : (Class_1691175042021_91()|>var_1691175042021_184), optionalParam_1691175042021_17 : UInt16(104) << ((var_1691175042021_194) & 7))) && loopTimeVar_1691175042021_210 < 100 ) ;
    let var_1691175042021_224 : (Unit, Rune, Float64) = ((), r'Z', Float64(-115.0));
    func func_1691175042021_214(param_1691175042021_215 : String, optionalParam_1691175042021_216 ! : String = ###"2lA52w'H~a"###, optionalParam_1691175042021_218 ! : Range<UInt32> = ((UInt32(UInt32(109))&127)..(UInt32(UInt32(211))&127):(Int64(69)|1))) : Unit { // block id: 220
        var_1691175042021_224[0]
    }
;
    try { // block id: 212
        func_1691175042021_214(###"B^HVMu46L~"###, optionalParam_1691175042021_216 : var_1691175042021_110, optionalParam_1691175042021_218 : var_1691175042021_233);
        if (false) { // block id: 237
            ();
            ()
        } else if (var_1691175042021_145) { // block id: 241
            ();
            var_1691175042021_29
        };
        if (false) { // block id: 246
            Int64(-47)
        } else { // block id: 248
            var_1691175042021_250
        }
    } finally { // block id: 252
        let var_1691175042021_952 : (UInt64) -> Unit = func_1691175042021_254;
        UInt64(101)|>var_1691175042021_952;
        match (Option<Bool>.None) {
            case _ : Int64 => 
                ()
            
            case _ => 
                var_1691175042021_965 &= Int32(104);
                var_1691175042021_29
            
        };
        var_1691175042021_250 * Int64(106)
    }
}

main(): Int64 {
    try {
        let var_1691175042021_975 : (Float32) -> Int64 = func_1691175042021_8;
        try { // block id: 978
            Float32(-58.0)
        } catch (e: Exception) { // block id: 980
            var_1691175042021_83
        } finally { // block id: 982
            [[UInt64(186), UInt64(24), UInt64(94), UInt64(235), UInt64(176), UInt64(221), UInt64(171), UInt64(243), UInt64(147), UInt64(209)], [UInt64(115), UInt64(10), UInt64(109), UInt64(194), UInt64(197), UInt64(127), UInt64(41), UInt64(95), UInt64(237), UInt64(64)], [UInt64(165), UInt64(123), UInt64(85), UInt64(199), UInt64(120), UInt64(16), UInt64(114), UInt64(202), UInt64(129), UInt64(144)], [UInt64(106), UInt64(36), UInt64(135), UInt64(60), UInt64(199), UInt64(206), UInt64(91), UInt64(68), UInt64(155), UInt64(51)], [UInt64(56), UInt64(34), UInt64(91), UInt64(147), UInt64(82), UInt64(241), UInt64(166), UInt64(151), UInt64(200), UInt64(43)], [UInt64(154), UInt64(193), UInt64(211), UInt64(18), UInt64(218), UInt64(250), UInt64(128), UInt64(139), UInt64(221), UInt64(208)], [UInt64(157), UInt64(79), UInt64(186), UInt64(145), UInt64(98), UInt64(220), UInt64(17), UInt64(220), UInt64(63), UInt64(142)], [UInt64(79), UInt64(156), UInt64(136), UInt64(190), UInt64(107), UInt64(197), UInt64(118), UInt64(234), UInt64(224), UInt64(185)], [UInt64(210), UInt64(94), UInt64(21), UInt64(40), UInt64(69), UInt64(111), UInt64(1), UInt64(208), UInt64(169), UInt64(217)], [UInt64(15), UInt64(159), UInt64(133), UInt64(106), UInt64(131), UInt64(108), UInt64(87), UInt64(200), UInt64(148), UInt64(131)]];
            var_1691175042021_29;
            var_1691175042021_83
        }|>var_1691175042021_975
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var_1691175042021_250*var_1691175042021_250), 64)
        crccheck.updateBuffer(UInt64(var_1691175042021_502*var_1691175042021_502), 64)
        crccheck.updateBuffer(UInt64(var_1691175042021_841*var_1691175042021_841), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Int32 {
        var i = 0
        var res = ""
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            res = res + hex_value.toString()
            i = i + 3
        }
        print("\n")
        if ( res == "16621432036074174600240" ){
            return 0
        }
        return 1
    }
}
extend Enum_1691175042021_32 {

}

extend Enum_1691175042021_670 {

}

extend<T0> Class_1691175042021_861<T0> {

}

