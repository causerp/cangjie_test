/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output 


public const var_1702931971869_63 : Byte = 39
let var_1702931971869_151 : Range<Int16> = ((Int16(Int16(-34))&127)..(Int16(Int16(125))&127):(Int64(-68)|1))
const var_1702931971869_187 : Int64 = -72
public let var_1702931971869_276 : Range<Int8> = ((Int8(Int8(92))&127)..(Int8(Int8(126))&127):(Int64(UInt8(177))|1))
public const var_1702931971869_298 : Unit = ()
var var_1702931971869_304 : UInt16 = UInt16(UInt8(UInt8(118)))

sealed public open class Class_1702931971869_167 <: Resource {
    public init() { // block id: 169

    }
;
    var var_1702931971869_174 : Int64 = Int64(110)
    public func isClosed(): Bool { return true }
    public func close(): Unit {}
}

const func func_1702931971869_177<T0, T1>(param_1702931971869_178 : Int32) : Int64 where T0 <: Float64, T1 <: Float32 { // block id: 179
    const func func_1702931971869_182<T0>(optionalParam_1702931971869_183 ! : UInt32 = 238) : Int64 where T0 <: Int32 { // block id: 185
        var_1702931971869_187
    }
;
    const var_1702931971869_190 : UInt32 = 74;
    func_1702931971869_182<Int32>(optionalParam_1702931971869_183 : var_1702931971869_190) + ((59 | var_1702931971869_187) | (22 & -45))
}


main(): Int64 {
    try {
        let var_1702931971869_18 : Bool = (Float64(Float64(-43.0)) is UInt16);
        var var_1702931971869_23 : VArray<Bool, $8> = [true, false, true, true, true, false, false, false];
        let var_1702931971869_77 : (Range<UInt64>, Bool, Unit, Int64, Range<Int16>, Int16, Range<Int8>) = (((UInt64(UInt64(28))&127)..(UInt64(UInt64(222))&127):(Int64(56)|1)), false, (), Int64(-24), ((Int16(Int16(-71))&127)..=(Int16(Int16(58))&127):(Int64(-114)|1)), Int16(UInt8(9)), ((Int8(Int8(Int8(-66)))&127)..(Int8(Int8(UInt8(UInt8(96))))&127):(Int64(UInt8(33))|1)));
        let var_1702931971869_105 : Range<Int8> = ((Int8(Int8(84))&127)..=(Int8(Int8(9))&127):(Int64(-66)|1));
        let var_1702931971869_208 : Int32 = Int32(UInt16(84));
        let var_1702931971869_215 : Float64 = Float64(Float32(-69.0));
        var loopTimeVar_1702931971869_220 : Array<UInt64> = [UInt64(Int64(UInt64(Int8(26)))), UInt64(UInt16(Int8(117))), UInt64(15), UInt64(UInt8(166)), UInt64(104), UInt64(UInt8(UInt8(Int8(19)))), UInt64(8), UInt64(UInt64(UInt64(Int16(-16)))), UInt64(216), UInt64(UInt8(UInt8(133)))];
        for (i in loopTimeVar_1702931971869_220 where if (var_1702931971869_18) { var_1702931971869_23 } else { var_1702931971869_23 } [2]) {
            var var_1702931971869_36 : Bool = (((Int16(Int16(Int8(UInt8(16))))&127)..(Int16(Int16(Int8(89)))&127):(Int64(Int64(UInt32(28)))|1)) is Float32);
            let var_1702931971869_67 : Int = Int64(72);
            if (false) { // block id: 30
                ();
                ((UInt8(UInt8(252))&127)..=(UInt8(UInt8(168))&127):(Int64(80)|1))
            } else { // block id: 33
                var_1702931971869_36 ||= true;
                var var_1702931971869_51 : Range<UInt8> = ((UInt8(UInt8(Int8(-100)))&127)..(UInt8(UInt8(UInt8(UInt8(Int8(-51)))))&127):(Int64(UInt8(32))|1));
                if (var_1702931971869_18) { var_1702931971869_51 } else { ((UInt8(var_1702931971869_63)&127)..(UInt8(var_1702931971869_63)&127):(var_1702931971869_67|1)) } 
            };
            let var_1702931971869_116 : Array<Option<Unit>> = [Option<Unit>.None, (Int8(UInt8(Int8(-118))) as Unit), ((Int8(UInt8(167)) is Range<Int64>) as Unit), (((UInt16(UInt16(UInt8(145)))&127)..=(UInt16(UInt16(67))&127):(Int64(43)|1)) as Unit), (() as Unit), Option<Unit>.None, Option<Unit>.None, ((((Int8(Int8(13))&127)..(Int8(Int8(126))&127):(Int64(18)|1)) as Unit) as Unit), (([UInt64(194), UInt64(203), UInt64(81), UInt64(197), UInt64(103), UInt64(139), UInt64(240), UInt64(130), UInt64(112), UInt64(188)] as Unit) as Unit), (((Int64(Int64(-60))&127)..(Int64(Int64(16))&127):(Int64(68)|1)) as Unit)];
            let var_1702931971869_171 : Class_1702931971869_167 = Class_1702931971869_167();
            let var_1702931971869_212 : VArray<Bool, $8> = [false, true, true, false, true, false, false, false];
            func func_1702931971869_70<T0, T1>() : Unit where T0 <: Float64, T1 <: VArray<Bool, $8> { // block id: 71
                try { // block id: 75
                    var_1702931971869_77
                } finally { // block id: 94
                    const var_1702931971869_100 : Int = -17;
                    (((UInt64(UInt64(176))&127)..(UInt64(UInt64(138))&127):(Int64(-125)|1)), true, (), var_1702931971869_100, ((Int16(Int16(-95))&127)..=(Int16(Int16(-52))&127):(Int64(-10)|1)), Int16(-118), var_1702931971869_105)
                }[2];
                var var_1702931971869_162 : UInt16 = UInt16(143);
                (var_1702931971869_116[1] ?? try (resource = Class_1702931971869_167()) { // block id: 147
                    if (var_1702931971869_18) { var_1702931971869_151 } else { ((Int16(Int16(-58))&127)..(Int16(Int16(58))&127):(Int64(-83)|1)) } ;
                    var_1702931971869_63 | var_1702931971869_63;
                    ()
                } catch (e: Exception) { // block id: 158
                    ();
                    var_1702931971869_162 &= UInt16(52)
                });
                const var_1702931971869_204 : String = "uYL\\_w]hS?";
                var_1702931971869_171.var_1702931971869_174 ^= ((var_1702931971869_204, Int64(111), var_1702931971869_208, var_1702931971869_212, var_1702931971869_215, ((Int32(Int32(-61))&127)..=(Int32(Int32(-18))&127):(Int64(90)|1)))[2]|>func_1702931971869_177<Float64, Float32>)
            }
;
            func_1702931971869_70<Float64, VArray<Bool, $8>>()
        };
        ();
        (try { // block id: 253
            var var_1702931971869_257 : ?Int64 = Option<Int64>.None;
            if (false) { var_1702931971869_257 } else { Option<Int64>.None } 
        } finally { // block id: 260
            const var_1702931971869_270 : Int = 96;
            let var_1702931971869_273 : Int16 = Int16(68);
            (((UInt64(UInt64(77))&127)..=(UInt64(UInt64(240))&127):(Int64(-126)|1)), var_1702931971869_18, (), Int64(98), ((Int16(Int16(-32))&127)..(Int16(Int16(26))&127):(var_1702931971869_270|1)), var_1702931971869_273, var_1702931971869_276);
            Option<Int64>.Some(Int64(99))
        } ?? try { // block id: 285
            [UInt64(171), UInt64(125), UInt64(5), UInt64(53), UInt64(162), UInt64(23), UInt64(195), UInt64(97), UInt64(52), UInt64(23)];
            Int64(113) | var_1702931971869_187
        } catch (e: Exception) { // block id: 290
            var var_1702931971869_294 : Class_1702931971869_167 = Class_1702931971869_167();
            if (false) { var_1702931971869_294 } else { var_1702931971869_294 } ;
            var_1702931971869_298;
            var_1702931971869_187
        } finally { // block id: 301
            var_1702931971869_304 -= var_1702931971869_304;
            ();
            Int64(123)
        })
        // CRC Check All Variables
        var crcCheck = CrcCheck(5000, 32)
        crcCheck.updateBuffer(UInt64(var_1702931971869_63*var_1702931971869_63), 64)
        crcCheck.updateBuffer(UInt64(var_1702931971869_187*var_1702931971869_187), 64)
        crcCheck.updateBuffer(UInt64(var_1702931971869_208*var_1702931971869_208), 64)
        crcCheck.updateBuffer(UInt64(var_1702931971869_304*var_1702931971869_304), 64)
        crcCheck.crcCheck()
        crcCheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[(i + buffer_index) % buffer.size] = byteArray[i + byte_index]
            i++
        }
        buffer_index = (buffer_index + i) % buffer.size
    }

    func updateBuffer(input: Bool, byte_n: Int64): Unit {
        if (input == true) {
            updateBuffer(1, byte_n)
        } else {
            updateBuffer(0, byte_n)
        }
    }

    func updateBuffer(input: Rune, byte_n: Int64): Unit {
        updateBuffer(UInt64(UInt32(input)), byte_n)
    }

    func updateBuffer(input: String, byte_n: Int64): Unit {
        for (c in input) {
            updateBuffer(c, byte_n)
        }
    }

    func updateBuffer(input: Unit, byte_n: Int64): Unit {
        updateBuffer(input.toString(), byte_n)
    }

    func updateBuffer(input: Any, byte_n: Int64) : Unit {
        if (input is Hashable) {
            match(input as Hashable) {
                case Some(v) => updateBuffer(UInt64(v.hashCode()), byte_n)
                case _=> updateBuffer(1, byte_n)
            }
            
        } else if (input is ToString) {
            match(input as ToString) {
                case Some(v) => updateBuffer(v.toString(), byte_n)
                case _=> updateBuffer(1, byte_n)
            }
        } else {
            updateBuffer(1, byte_n)
        }
    }     
    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}

extend Class_1702931971869_167 {

}
// ASSERT: scan parse_redundant_modifier
// ASSERT: scan sema_non_abstract_class_cannot_be_sealed


