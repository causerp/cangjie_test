/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args 

let var_1669304211948_18 : Class_1669304211948_7<Interface_1669304211948_10, Int64> = Class_1669304211948_7<Interface_1669304211948_10, Int64>()
public let var_1669304211948_31 : (String, Enum_1669304211948_24, Int32, Rune, Unit) = (###"O9L%|ZZ y]"###, Enum_1669304211948_24.defaultValue, Int32(UInt8(UInt8(UInt8(4)))), r'z', ())
let var_1669304211948_54 : Interface_1669304211948_11 = Class_1669304211948_7<Interface_1669304211948_10, Int64>()
public var var_1669304211948_63 : Unit = ()
public var var_1669304211948_70 : Bool = true
public let var_1669304211948_119 : Interface_1669304211948_15<Rune> = Class_1669304211948_7<Interface_1669304211948_10, Int64>()
public var var_1669304211948_133 : Float64 = (-48.0)
public var var_1669304211948_145 : Int64 = Int64(UInt64(Int32(UInt32(UInt32(80)))))
let var_1669304211948_195 : Rune = r's'
public let var_1669304211948_202 : Int64 = Int64(UInt32(UInt16(UInt8(55))))
public interface Interface_1669304211948_13<T0> {

}

public interface Interface_1669304211948_14<T0, T1> <: Interface_1669304211948_13<Bool> {

}

public interface Interface_1669304211948_12 <: Interface_1669304211948_13<Bool> & Interface_1669304211948_14<Rune, Interface_1669304211948_16> {

}

public interface Interface_1669304211948_15<T0> {
    func func_1669304211948_21() : Unit { // block id: 22
        let var_1669304211948_50 : Int32 = Int32(UInt32(48));
        let var_1669304211948_57 : Float64 = (-26.0);
        var var_1669304211948_85 : Int32 = Int32(Int32(58));
        match (if (true) { var_1669304211948_31[1] } else { Enum_1669304211948_24.enumValue_1669304211948_43(###"@*S@><J5y5"###, var_1669304211948_50, var_1669304211948_54, var_1669304211948_57) } ) {
            case defaultValue => 
                var_1669304211948_63
            
            case _ => 
                var_1669304211948_70 ||= var_1669304211948_70;
                ();
                ()
            
            case caseVar_1669304211948_77 : Unit => 
                (-120);
                ()
            
            case _ => 
                var_1669304211948_85 /= ((Int32(83)) | 1)
            
        };
        let var_1669304211948_107 : Enum_1669304211948_24 = Enum_1669304211948_24.enumValue_1669304211948_109((-22.0), Class_1669304211948_7<Interface_1669304211948_10, Int64>(), UInt64(230));
        var var_1669304211948_122 : UInt64 = UInt64(57);
        try { // block id: 90
            var var_1669304211948_95 : Interface_1669304211948_16 = Class_1669304211948_7<Interface_1669304211948_10, Int64>();
            var loopTimeVar_1669304211948_98 : Int64 = 0;
            do {
                loopTimeVar_1669304211948_98++;
                var_1669304211948_95
            } while ((var_1669304211948_70) && loopTimeVar_1669304211948_98 < 100 ) 
        } catch (_) { // block id: 99
            var loopTimeVar_1669304211948_125 : Int64 = 0;
            while ((var_1669304211948_70) && loopTimeVar_1669304211948_125 < 100 ) {
                loopTimeVar_1669304211948_125++;
                Int32(-99);
                if (var_1669304211948_70) { var_1669304211948_107 } else { Enum_1669304211948_24.enumValue_1669304211948_109(var_1669304211948_57, var_1669304211948_119, var_1669304211948_122) } 
            }
        } finally { // block id: 126

        }
    }

}

public interface Interface_1669304211948_11 <: Interface_1669304211948_12 & Interface_1669304211948_15<Rune> {

}

public interface Interface_1669304211948_16 {

}

public interface Interface_1669304211948_10 <: Interface_1669304211948_11 & Interface_1669304211948_16 {

}

public open class Class_1669304211948_7<T0, T1> <: Interface_1669304211948_10 {
    public init() { // block id: 9

    }

}

public enum Enum_1669304211948_24 {
    defaultValue |
    enumValue_1669304211948_43(String, Int32, Interface_1669304211948_11, Float64) |
    enumValue_1669304211948_109(Float64, Interface_1669304211948_15<Rune>, UInt64)
}
main(): Int64 {
    try {
        var_1669304211948_18.func_1669304211948_21();
        var var_1669304211948_175 : Int8 = Int8(UInt8(19));
        var var_1669304211948_181 : Int64 = Int64(UInt8(UInt8(225)));
        match (try { // block id: 129
            var_1669304211948_63;
            let var_1669304211948_137 : UInt64 = UInt64(Int16(Int16(UInt8(12))));
            Enum_1669304211948_24.enumValue_1669304211948_109(var_1669304211948_133, var_1669304211948_119, var_1669304211948_137)
        } finally { // block id: 142
            var_1669304211948_145 - 111;
            Int8(67) >> ((Int8(30)) & 7);
            let var_1669304211948_158 : Enum_1669304211948_24 = Enum_1669304211948_24.enumValue_1669304211948_43(###"b\":#F=QOxT"###, Int32(-3), Class_1669304211948_7<Interface_1669304211948_10, Int64>(), Float64(Float32(-51.0)));
            if (var_1669304211948_70) { var_1669304211948_158 } else { var_1669304211948_158 } 
        }) {
            case _ => 
                var_1669304211948_145 % ((var_1669304211948_145) | 1);
                Int8(26) * var_1669304211948_175;
                (-66) << ((var_1669304211948_181) & 7)
            
            case caseVar_1669304211948_187 => 
                var_1669304211948_181
            
            case enumValue_1669304211948_109(_, _, caseVar_1669304211948_192 : Bool) => 
                var_1669304211948_195;
                var_1669304211948_181
            
            case _ => 
                -var_1669304211948_202
            
        }
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var_1669304211948_145*var_1669304211948_145), 64)
        crccheck.updateBuffer(UInt64(var_1669304211948_175*var_1669304211948_175), 64)
        crccheck.updateBuffer(UInt64(var_1669304211948_181*var_1669304211948_181), 64)
        crccheck.updateBuffer(UInt64(var_1669304211948_202*var_1669304211948_202), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
