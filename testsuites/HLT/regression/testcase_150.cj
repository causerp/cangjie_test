/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args

var var_1663279484099_82 : Int16 = Int16(-66)
public var var_1663279484099_92 : (Array<UInt64>, Bool, Unit, Int64, Float64) = ([UInt64(93), UInt64(125), UInt64(148), UInt64(UInt8(10)), UInt64(UInt8(73)), UInt64(164), UInt64(UInt64(236)), UInt64(136), UInt64(21), UInt64(19)], ((((98&127)..((-82)&127):(((-103)|1))) is Float64) is Array<UInt64>), (), Int64(Int32(-47)), Float64(Float32(Float32(Float32(-24.0)))))
public var var_1663279484099_165 : Class_1663279484099_149<Int16, Int8> = Class_1663279484099_149<Int16, Int8>()
public var var_1663279484099_173 : Bool = true
public var var_1663279484099_190 : UInt8 = UInt8(7)
public let var_1663279484099_236 : Rune = r'b'
var var_1663279484099_243 : Range<UInt16> = ((UInt16(214)&127)..=(UInt16(Int16(UInt16(7)))&127):(((-80)|1)))
let var_1663279484099_351 : Bool = false


public open class Class_1663279484099_149<T0, T1> {
    public init() { // block id: 151

    }
;
    public static let var_1663279484099_154 : Unit = ();
    public var var_1663279484099_223 : Rune = r'7';
    public let var_1663279484099_370 : Unit = ();
    public open func func_1663279484099_300(param_1663279484099_301 : Int32, namedParam_1663279484099_302 ! : Range<Int32>) : Unit { // block id: 303
        var var_1663279484099_314 : Int8 = Int8(Int8(93));
        var var_1663279484099_325 : UInt32 = UInt32(161);
        var var_1663279484099_373 : String = ###"g b^:vT&n@"###;
        var loopTimeVar_1663279484099_375 : Array<Option<Unit>> = [Option<Unit>.Some(()), Option<Unit>.None, (Int64(Int32(Int32(-121))) as Unit), Option<Unit>.None, (((Int32(31)&127)..(Int32(15)&127):((-91)|1)) as Unit), (((Int8(UInt8(167))&127)..=(Int8(-61)&127):((Int64(UInt32(95))|1))) as Unit), (Float64(Float64(112.0)) as Unit), (Float64(Float32(72.0)) as Unit), Option<Unit>.None, Option<Unit>.Some(())];
        for (i in loopTimeVar_1663279484099_375 where if (match (Option<Unit>.None) {
            case caseVar_1663279484099_310 => 
                var_1663279484099_314 += var_1663279484099_314;
                true
            
            case caseVar_1663279484099_321 : Array<UInt64> => 
                var_1663279484099_154;
                var_1663279484099_325;
                var_1663279484099_173
            
            case _ => 
                var_1663279484099_154;
                var_1663279484099_325 != var_1663279484099_325
            
        }) { // block id: 334
            let var_1663279484099_336 : Bool = (UInt32(131) is Range<UInt8>);
            var_1663279484099_336
        } else if (if (var_1663279484099_173) { // block id: 341
            var_1663279484099_325 = UInt32(156);
            var_1663279484099_154;
            UInt64(155) < UInt64(111)
        } else { // block id: 349
            var_1663279484099_351
        }) { // block id: 353
            param_1663279484099_301;
            let var_1663279484099_357 : Float64 = (-36.0);
            var_1663279484099_357 == (-81.0)
        } else { // block id: 360
            ((param_1663279484099_301&127)..=(Int32(32)&127):(((-87)|1)));
            true
        }) {
            var_1663279484099_165.var_1663279484099_370;
            var_1663279484099_373
        }
    }

}

public func func_1663279484099_161<T0, T1, T2>(param_1663279484099_162 : String) : Class_1663279484099_149<Int16, Int8> { // block id: 163
    var_1663279484099_165
}

main(): Int64 {
    try {
        let var_1663279484099_181 : Float64 = Float64(Float64(Float64(Float64(29.0))));
        func func_1663279484099_158<T0>() : Class_1663279484099_149<Int16, Int8> { // block id: 159
            var var_1663279484099_217 : String = "i5#uIxR_~c";
            if (if (false) { // block id: 171
                var_1663279484099_173
            } else if (var_1663279484099_173) { // block id: 176
                ((Int8(-28)&127)..=(Int8(-102)&127):((-36)|1));
                (-101.0) < var_1663279484099_181
            } else { // block id: 187
                var_1663279484099_190 = UInt8(43);
                ();
                var_1663279484099_173 || true
            }) { // block id: 197
                var var_1663279484099_199 : Unit = ();
                var_1663279484099_199;
                let var_1663279484099_204 : Range<UInt8> = ((UInt8(Int8(Int8(-27)))&127)..(UInt8(234)&127):((Int64(Int32(120))|1)));
                if (false) { var_1663279484099_204 } else { ((UInt8(223)&127)..=(var_1663279484099_190&127):(((-68)|1))) } ;
                var_1663279484099_217
            } else { // block id: 219
                ();
                var_1663279484099_217
            }|>func_1663279484099_161<Class_1663279484099_149<Int16, Int8>, Array<Option<Unit>>, Range<UInt8>>
        }
;
        func func_1663279484099_6<T0>(namedParam_1663279484099_7 ! : Rune) : Rune { // block id: 8
            let var_1663279484099_31 : Option<Array<Option<Unit>>> = (((Int16(-53)&127)..=(Int16(-97)&127):(((-49)|1))) as Array<Option<Unit>>);
            let var_1663279484099_40 : Unit = ();
            var var_1663279484099_43 : Option<Unit> = ([Option<Unit>.None, Option<Unit>.Some(()), Option<Unit>.Some(()), (((Int8(32)&127)..(Int8(-50)&127):(((-86)|1))) as Unit), Option<Unit>.Some(()), (((UInt16(4)&127)..=(UInt16(90)&127):(16|1)) as Unit), Option<Unit>.None, (UInt16(Int8(-36)) as Unit), (((UInt32(84)&127)..=(UInt32(115)&127):(51|1)) as Unit), Option<Unit>.None] as Unit);
            let var_1663279484099_87 : Bool = (UInt8(Int8(-127)) is Range<UInt16>);
            var var_1663279484099_124 : Array<UInt64> = [UInt64(234), UInt64(80), UInt64(109), UInt64(236), UInt64(233), UInt64(223), UInt64(228), UInt64(207), UInt64(34), UInt64(109)];
            var var_1663279484099_134 : Int64 = Int64(UInt8(150));
            ((var_1663279484099_31 ?? [Option<Unit>.Some(var_1663279484099_40), var_1663279484099_43, var_1663279484099_43, var_1663279484099_43, Option<Unit>.None, var_1663279484099_43, Option<Unit>.None, var_1663279484099_43, var_1663279484099_43, var_1663279484099_43])[9] ?? try { // block id: 79
                var_1663279484099_82 |= var_1663279484099_82;
                if (var_1663279484099_87) { var_1663279484099_92 } else { (var_1663279484099_124, true, var_1663279484099_40, (-72), (-31.0)) } 
            } finally { // block id: 130
                r'j';
                var_1663279484099_134 ^= var_1663279484099_134;
                let var_1663279484099_144 : Float64 = Float64((-122.0));
                (var_1663279484099_124, var_1663279484099_87, var_1663279484099_40, 107, var_1663279484099_144)
            }[2]);
            Class_1663279484099_149<Int16, Int8>.var_1663279484099_154;
            func_1663279484099_158<UInt64>().var_1663279484099_223
        }
;
        let var_1663279484099_229 : Unit = ();
        let var_1663279484099_255 : Array<Option<Unit>> = [Option<Unit>.None, Option<Unit>.None, (UInt8(155) as Unit), (UInt8(UInt8(240)) as Unit), Option<Unit>.None, Option<Unit>.Some(()), Option<Unit>.Some(()), ([Option<Unit>.Some(()), ("Z!~w`1t%<w" as Unit), (() as Unit), (((Int32(-54)&127)..(Int32(117)&127):((-113)|1)) as Unit), Option<Unit>.Some(()), Option<Unit>.Some(()), Option<Unit>.Some(()), Option<Unit>.Some(()), Option<Unit>.None, Option<Unit>.Some(())] as Unit), Option<Unit>.None, (((Int16(107)&127)..=(Int16(84)&127):((68|1))) as Unit)];
        func_1663279484099_6<Class_1663279484099_149<Int16, Int8>>(namedParam_1663279484099_7 : if (true) { // block id: 227
            var_1663279484099_229;
            ();
            if (var_1663279484099_173) { r'V' } else { var_1663279484099_236 } 
        } else if (var_1663279484099_173) { // block id: 239
            if (var_1663279484099_173) { var_1663279484099_243 } else { ((UInt16(157)&127)..=(UInt16(90)&127):((-78)|1)) } ;
            var_1663279484099_236
        } else { // block id: 252
            var_1663279484099_229;
            var_1663279484099_255;
            r'1'
        });
        func_1663279484099_158<UInt64>().func_1663279484099_300(Int32(18), namedParam_1663279484099_302 : ((Int32(-92)&127)..=(Int32(64)&127):(56|1)));
        Int64(match (Option<Unit>.None) {
            case _ => 
                Int32(60)
            
        })
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var_1663279484099_82*var_1663279484099_82), 64)
        crccheck.updateBuffer(UInt64(var_1663279484099_190*var_1663279484099_190), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
