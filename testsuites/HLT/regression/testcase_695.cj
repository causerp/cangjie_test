/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args

public var var_1658578550507_76 : Array<Option<Int8>> = [Option<Int8>.None, Option<Int8>.None, Option<Int8>.None, Option<Int8>.None, Option<Int8>.None, Option<Int8>.None, Option<Int8>.None, Option<Int8>.None, (((UInt32(66)&127)..(UInt32(Int16(-71))&127):(((-67)|1))) as Int8), Option<Int8>.None]
let var_1658578550507_95 : Int32 = Int32(UInt16(Int8(62)))
let var_1658578550507_138 : Range<Int32> = ((Int32(5)&127)..=(Int32(-68)&127):((-94)|1))
var var_1658578550507_208 : Int64 = 11
var var_1658578550507_233 : Int16 = Int16(67)
public struct Struct_1658578550507_57 {
    public init() { // block id: 59

    }
;
    var var_1658578550507_64 : UInt16 = UInt16(139)
}


public interface Interface_1658578550507_167<T0, T1> {

}

public interface Interface_1658578550507_166 <: Interface_1658578550507_167<Array<Int64>, Range<Int8>> {

}

public interface Interface_1658578550507_165 <: Interface_1658578550507_166 & Interface_1658578550507_167<Array<Int64>, Range<Int8>> {

}

public open class Class_1658578550507_162<T0, T1> <: Interface_1658578550507_165 & Interface_1658578550507_167<Array<Int64>, Range<Int8>> {
    public init() { // block id: 164

    }
;
    var var_1658578550507_190 : UInt16 = UInt16(27)
}

main(): Int64 {
    try {
        let var_1658578550507_104 : UInt32 = UInt32(85);
        let var_1658578550507_111 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
        func func_1658578550507_169<T0, T1>(optionalParam_1658578550507_170 ! : Option<Int8> = Option<Int8>.None, optionalParam_1658578550507_172 ! : Range<Int32> = ((Int32(Int32(-62))&127)..=(Int32(11)&127):((Int64(Int16(Int16(Int16(-99))))|1))), namedParam_1658578550507_181 ! : Struct_1658578550507_57, optionalParam_1658578550507_182 ! : Option<Int8> = (Float64(Float32(-80.0)) as Int8)) : Class_1658578550507_162<Int16, Interface_1658578550507_165> { // block id: 186
            Class_1658578550507_162<Int16, Interface_1658578550507_165>()
        }
;
        func func_1658578550507_7() : UInt16 { // block id: 8
            let var_1658578550507_158 : String = """
Mr/:?
6(~i*
""";
            try { // block id: 10
                func func_1658578550507_12<T0>(param_1658578550507_13 : Int32) : Int8 { // block id: 14
                    var var_1658578550507_28 : Bool = false;
                    let var_1658578550507_32 : UInt8 = UInt8(UInt8(214));
                    UInt32(if (var_1658578550507_28) { [var_1658578550507_32, UInt8(147), UInt8(186), UInt8(56), var_1658578550507_32, UInt8(45), var_1658578550507_32, UInt8(55), UInt8(94), var_1658578550507_32] } else { [UInt8(202), UInt8(12), UInt8(74), var_1658578550507_32, UInt8(95), UInt8(123), UInt8(112), var_1658578550507_32, UInt8(45), UInt8(248)] } [9]);
                    var var_1658578550507_61 : Struct_1658578550507_57 = Struct_1658578550507_57();
                    var_1658578550507_61.var_1658578550507_64;
                    (Option<Int8>.None ?? var_1658578550507_76[2].getOrThrow())
                }
;
                func_1658578550507_12<Bool>(var_1658578550507_95);
                match (Option<Int8>.None) {
                    case _ => 
                        var_1658578550507_104;
                        """
~qM&%
a{($Rn
"""
                    
                }
            } catch (_) { // block id: 107
                var_1658578550507_111[7];
                let var_1658578550507_129 : ?Int8 = Option<Int8>.None;
                if (false) { Option<Int8>.Some(Int8(3)) } else { var_1658578550507_129 } ;
                "(u<tk8yb6Q"
            } finally { // block id: 132
                var var_1658578550507_144 : Int64 = Int64(UInt16(UInt8(Int8(31))));
                [((Int32(11)&127)..(Int32(-36)&127):((-91)|1)), var_1658578550507_138, ((Int32(49)&127)..=(var_1658578550507_95&127):((var_1658578550507_144|1))), var_1658578550507_138, ((Int32(82)&127)..=(Int32(101)&127):(18|1)), var_1658578550507_138, var_1658578550507_138, ((Int32(-92)&127)..(Int32(63)&127):((-5)|1)), ((Int32(-10)&127)..(Int32(-62)&127):(0|1)), var_1658578550507_138][6];
                var_1658578550507_158
            };
            var var_1658578550507_193 : UInt16 = UInt16(UInt16(64));
            (func_1658578550507_169<Range<Int8>, Int16>(namedParam_1658578550507_181 : Struct_1658578550507_57()).var_1658578550507_190) & var_1658578550507_193
        }
;
        Int32(func_1658578550507_7());
        match (([((Int32(-32)&127)..(Int32(22)&127):((-15)|1)), var_1658578550507_138, var_1658578550507_138, var_1658578550507_138, ((Int32(24)&127)..(Int32(118)&127):((-29)|1)), ((Int32(35)&127)..(Int32(-121)&127):((var_1658578550507_208|1))), ((Int32(-34)&127)..(var_1658578550507_95&127):((var_1658578550507_208|1))), var_1658578550507_138, ((Int32(90)&127)..(Int32(77)&127):((-65)|1)), var_1658578550507_138] as Int8)) {
            case caseVar_1658578550507_219 => 
                UInt8(159);
                caseVar_1658578550507_219;
                var var_1658578550507_225 : UInt16 = UInt16(25);
                var_1658578550507_225 &= UInt16(13)
            
            case _ => 
                ();
                var_1658578550507_233--
            
        };
        try { // block id: 238
            Class_1658578550507_162<Int16, Interface_1658578550507_165>();
            [66, 4, 90, 13, 86, 101, (-96), 100, 73, 125]
        } catch (_) { // block id: 241
            var var_1658578550507_244 : Int32 = Int32(55);
            var_1658578550507_244 *= Int32(33);
            ();
            let var_1658578550507_249 : Array<Int64> = [Int64(UInt32(214)), 55, 29, Int64(Int16(Int8(-125))), Int64(Int8(Int8(-66))), Int64(Int64(UInt16(UInt8(164)))), Int64(Int16(UInt8(102))), 21, (-28), (-119)];
            var_1658578550507_249
        }[3]
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var_1658578550507_95*var_1658578550507_95), 64)
        crccheck.updateBuffer(UInt64(var_1658578550507_104*var_1658578550507_104), 64)
        crccheck.updateBuffer(UInt64(var_1658578550507_208*var_1658578550507_208), 64)
        crccheck.updateBuffer(UInt64(var_1658578550507_233*var_1658578550507_233), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend<T0, T1> Class_1658578550507_162<T0, T1> {

}

extend Struct_1658578550507_57 {

}

