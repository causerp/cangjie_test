/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args


public const var_1690482933098_39 : Int32 = 3
let var_1690482933098_65 : UInt32 = UInt32(104)
let var_1690482933098_190 : Rune = 'Q'
let var_1690482933098_198 : Struct_1690482933098_194 = Struct_1690482933098_194()
let var_1690482933098_282 : Option<Array<Array<Int32>>> = Option<Array<Array<Int32>>>.None
public var var_1690482933098_304 : UInt64 = UInt64(59)
var var_1690482933098_331 : ?Int32 = Option<Int32>.None
public var var_1690482933098_344 : UInt16 = UInt16(197)
let var_1690482933098_405 : Unit = ()
const var_1690482933098_413 : Bool = true
public var var_1690482933098_421 : Class_1690482933098_358<Enum_1690482933098_92> = Class_1690482933098_358<Enum_1690482933098_92>()
public var var_1690482933098_471 : Array<Array<Int32>> = [[Int32(114), Int32(-54), Int32(61), Int32(-31), Int32(78), Int32(-47), Int32(0), Int32(80), Int32(-21), Int32(-5)], [Int32(51), Int32(-7), Int32(-21), Int32(-67), Int32(107), Int32(87), Int32(-74), Int32(-50), Int32(-51), Int32(49)], [Int32(73), Int32(17), Int32(-116), Int32(-8), Int32(-72), Int32(31), Int32(-38), Int32(-13), Int32(-112), Int32(32)], [Int32(104), Int32(51), Int32(-39), Int32(76), Int32(-98), Int32(-87), Int32(44), Int32(48), Int32(-96), Int32(-12)], [Int32(-122), Int32(-20), Int32(64), Int32(-95), Int32(-9), Int32(58), Int32(-118), Int32(-58), Int32(-10), Int32(117)], [Int32(26), Int32(84), Int32(-66), Int32(98), Int32(38), Int32(-4), Int32(126), Int32(-48), Int32(123), Int32(18)], [Int32(-112), Int32(72), Int32(-32), Int32(7), Int32(68), Int32(94), Int32(93), Int32(-97), Int32(76), Int32(-126)], [Int32(-91), Int32(21), Int32(-42), Int32(32), Int32(-101), Int32(-115), Int32(48), Int32(54), Int32(-119), Int32(109)], [Int32(73), Int32(-89), Int32(91), Int32(69), Int32(54), Int32(-91), Int32(-115), Int32(-8), Int32(-114), Int32(-10)], [Int32(83), Int32(106), Int32(-22), Int32(-17), Int32(123), Int32(-54), Int32(76), Int32(105), Int32(-33), Int32(-57)]]
public let var_1690482933098_487 : Array<Bool> = [true, (Int32(Int16(35)) is Range<Int16>), (Int16(98) is Struct_1690482933098_194), false, false, false, false, false, (((UInt16(UInt16(112))&127)..=(UInt16(UInt16(184))&127):(Int64(84)|1)) is Range<UInt16>), true]
public var var_1690482933098_540 : Range<UInt32> = ((UInt32(UInt32(42))&127)..=(UInt32(UInt32(177))&127):(Int64(77)|1))
public var var_1690482933098_543 : UInt8 = UInt8(Int8(UInt8(219)))
public let var_1690482933098_554 : Int64 = Int64(UInt32(157))
var var_1690482933098_614 : Option<Option<Int32>> = Option<Option<Int32>>.None
var var_1690482933098_622 : ?(Unit, Float32, (Int64, Array<Array<Int32>>, Range<Int32>, UInt64), String) = Option<(Unit, Float32, (Int64, Array<Array<Int32>>, Range<Int32>, UInt64), String)>.None
public const var_1690482933098_628 : Float32 = -56.0
public let var_1690482933098_808 : Range<Int32> = ((Int32(Int32(45))&127)..(Int32(Int32(-19))&127):(Int64(-120)|1))
public const var_1690482933098_812 : String = """
]fU\\\"
vipCg
"""
let var_1690482933098_837 : (Unit, Float32, (Int64, Array<Array<Int32>>, Range<Int32>, UInt64), String) = ((), Float32(Float32(Float32(Float32(31.0)))), (Int64(-11), [[Int32(-45), Int32(11), Int32(39), Int32(-26), Int32(33), Int32(6), Int32(66), Int32(-58), Int32(-45), Int32(4)], [Int32(-32), Int32(112), Int32(-95), Int32(-13), Int32(-47), Int32(-72), Int32(-28), Int32(-49), Int32(-38), Int32(-59)], [Int32(89), Int32(32), Int32(-42), Int32(-102), Int32(-120), Int32(70), Int32(-61), Int32(39), Int32(4), Int32(122)], [Int32(-70), Int32(123), Int32(-49), Int32(57), Int32(50), Int32(-10), Int32(-100), Int32(-100), Int32(5), Int32(-117)], [Int32(46), Int32(-109), Int32(-87), Int32(110), Int32(80), Int32(-66), Int32(-47), Int32(-40), Int32(-119), Int32(-80)], [Int32(12), Int32(95), Int32(115), Int32(-68), Int32(-64), Int32(-102), Int32(-128), Int32(37), Int32(113), Int32(34)], [Int32(18), Int32(4), Int32(116), Int32(21), Int32(-75), Int32(-43), Int32(-20), Int32(11), Int32(-113), Int32(-111)], [Int32(-65), Int32(108), Int32(-82), Int32(31), Int32(66), Int32(92), Int32(-83), Int32(25), Int32(83), Int32(-89)], [Int32(17), Int32(-25), Int32(-76), Int32(-68), Int32(-97), Int32(-60), Int32(110), Int32(9), Int32(-98), Int32(-4)], [Int32(93), Int32(-35), Int32(85), Int32(-83), Int32(42), Int32(-101), Int32(-54), Int32(-30), Int32(-33), Int32(9)]], ((Int32(Int32(13))&127)..=(Int32(Int32(-127))&127):(Int64(-111)|1)), UInt64(UInt32(UInt32(121)))), "_(@uc\"\"${var_1690482933098_812}#${var_1690482933098_812}!C")
public enum Enum_1690482933098_16<T0, T1> {
    defaultValue
}

public func func_1690482933098_6(param_1690482933098_7 : String, optionalParam_1690482933098_8 ! : String = "cW$i ZPr2!") : Int32 { // block id: 10
    Int64(Int64(93));
    try { // block id: 14
        const var_1690482933098_26 : Rune = 'e';
        match (Enum_1690482933098_16<Int8, UInt16>.defaultValue) {
            case _ => 
                var var_1690482933098_23 : Bool = false;
                if (var_1690482933098_23) { var_1690482933098_26 } else { 'p' } ;
                Int16(-62);
                UInt64(101)
            
        };
        (Option<Int32>.Some(Int32(-111)) ?? var_1690482933098_39)
    } finally { // block id: 41
        ();
        const var_1690482933098_46 : UInt16 = 86;
        const var_1690482933098_49 : Float32 = 54.0;
        try { // block id: 44
            var_1690482933098_46;
            var_1690482933098_49
        } catch (e: Exception) { // block id: 51
            -var_1690482933098_49
        };
        match (UInt32(2)) {
            case _ : Int32 => 
                var_1690482933098_39
            
            case caseVar_1690482933098_62 : Int16 => 
                var_1690482933098_65;
                Int32(-34)
            
            case 138 | 72 | 222 => 
                var_1690482933098_39
            
            case _ => 
                let var_1690482933098_75 : Unit = ();
                var_1690482933098_75;
                var_1690482933098_39 | var_1690482933098_39
            
        }
    }
}

public enum Enum_1690482933098_92 {
    defaultValue
}


public struct Struct_1690482933098_194 {
    init() { // block id: 196

    }
;
    let var_1690482933098_201 : Rune = '4';
    public static prop var_1690482933098_452 : Int32 { // block id: 453
        get() { // block id: 455
            ((Int32(Int32(103))&127)..=(Int32(Int32(104))&127):(Int64(92)|1));
            Int32(38)
        }

    };
    mut prop var_1690482933098_507 : ?Unit { // block id: 508
        get() { // block id: 510
            Int16(120);
            Int32(-66);
            ([Int32(UInt16(43)), Int32(122), Int32(UInt8(99)), Int32(26), Int32(-39), Int32(41), Int32(UInt32(117)), Int32(-118), Int32(87), Int32(UInt8(237))] as Unit);
            var_1690482933098_898
        }

        set(Value) { // block id: 531
            Int32(Int8(5));
            ();
            var_1690482933098_898 = Value
        }

    };
    mut prop var_1690482933098_898 : ?Unit { // block id: 899
        get() { // block id: 901
            Option<Unit>.None
        }

        set(Value) { // block id: 905
            ();
            ()
        }

    }
}

func func_1690482933098_204(param_1690482933098_205 : Range<UInt64>) : Array<Option<Int32>> { // block id: 206
    var var_1690482933098_243 : ?Int32 = ([Int32(111), Int32(-46), Int32(2), Int32(Int16(UInt8(119))), Int32(UInt32(UInt8(149))), Int32(UInt32(UInt32(29))), Int32(Int16(Int16(-41))), Int32(Int8(Int8(-63))), Int32(UInt32(137)), Int32(-68)] as Int32);
    try { // block id: 208
        var var_1690482933098_211 : ?Unit = (Enum_1690482933098_92.defaultValue as Unit);
        var_1690482933098_211.getOrThrow();
        var var_1690482933098_216 : ?Int32 = (((UInt64(UInt64(UInt8(Int8(14))))&127)..(UInt64(UInt64(Int32(60)))&127):(Int64(-128)|1)) as Int32);
        [var_1690482933098_216, Option<Int32>.Some(Int32(-63)), var_1690482933098_216, Option<Int32>.Some(Int32(-67)), var_1690482933098_216, Option<Int32>.Some(Int32(37)), Option<Int32>.None, var_1690482933098_216, var_1690482933098_216, var_1690482933098_216]
    } finally { // block id: 237
        false;
        UInt64(Int64(33));
        [var_1690482933098_243, var_1690482933098_243, var_1690482933098_243, var_1690482933098_243, Option<Int32>.Some(Int32(65)), var_1690482933098_243, var_1690482933098_243, var_1690482933098_243, var_1690482933098_243, Option<Int32>.Some(var_1690482933098_39)]
    }
}


func func_1690482933098_111(param_1690482933098_112 : Option<Int32>) : Array<Option<Int32>> { // block id: 113
    let var_1690482933098_139 : Array<Int32> = [Int32(UInt16(42)), Int32(122), Int32(-97), Int32(UInt16(219)), Int32(Int8(UInt8(Int8(-63)))), Int32(81), Int32(UInt16(174)), Int32(Int8(-83)), Int32(56), Int32(106)];
    (Option<Array<Array<Int32>>>.None ?? [[Int32(41), Int32(14), Int32(9), Int32(103), Int32(26), Int32(-28), Int32(-76), Int32(88), Int32(-105), Int32(49)], [Int32(40), Int32(112), Int32(110), Int32(-86), Int32(-71), Int32(33), Int32(24), Int32(69), Int32(47), Int32(79)], [var_1690482933098_39, Int32(8), var_1690482933098_39, var_1690482933098_39, Int32(-88), Int32(2), Int32(-122), var_1690482933098_39, var_1690482933098_39, Int32(5)], var_1690482933098_139, [Int32(97), Int32(21), Int32(-49), Int32(-90), Int32(-12), Int32(94), Int32(-87), Int32(-92), Int32(-59), Int32(-102)], var_1690482933098_139, [Int32(15), Int32(-104), Int32(-3), Int32(-110), Int32(-51), Int32(-23), Int32(70), Int32(47), Int32(19), Int32(-54)], var_1690482933098_139, [var_1690482933098_39, Int32(-33), Int32(53), var_1690482933098_39, Int32(-6), Int32(117), Int32(90), Int32(-41), var_1690482933098_39, Int32(112)], [Int32(56), Int32(-61), Int32(71), Int32(114), Int32(104), Int32(61), Int32(-120), Int32(41), Int32(-98), Int32(113)]])[6][9];
    let var_1690482933098_186 : Bool = true;
    try { // block id: 177
        Option<Unit>.None.getOrThrow();
        if (var_1690482933098_186) { '3' } else { var_1690482933098_190 } 
    } catch (_) { // block id: 192
        var_1690482933098_198.var_1690482933098_201
    };
    if ((var_1690482933098_282 is Enum_1690482933098_16<Int8, UInt16>)) { // block id: 284
        ((UInt64(UInt64(76))&127)..(UInt64(UInt64(51))&127):(Int64(-2)|1))
    } else if ((Option<Bool>.Some(var_1690482933098_186) ?? var_1690482933098_186)) { // block id: 294
        var var_1690482933098_296 : ?Unit = (true as Unit);
        var_1690482933098_296;
        if (false) { ((UInt64(UInt64(10))&127)..(UInt64(UInt64(119))&127):(Int64(-57)|1)) } else { ((UInt64(var_1690482933098_304)&127)..=(UInt64(UInt64(98))&127):(Int64(-9)|1)) } 
    } else { // block id: 308
        let var_1690482933098_310 : Unit = ();
        var_1690482933098_310;
        var var_1690482933098_316 : Int64 = Int64(UInt16(74));
        ((UInt64(var_1690482933098_304)&127)..=(UInt64(UInt64(249))&127):(var_1690482933098_316|1))
    }|>func_1690482933098_204
}



func func_1690482933098_89(param_1690482933098_96 : Bool, param_1690482933098_97 : Unit) : Enum_1690482933098_92 { // block id: 98
    var var_1690482933098_320 : (Option<Int32>) -> Array<Option<Int32>> = func_1690482933098_111;
    let var_1690482933098_328 : Option<Option<Int32>> = Option<Option<Int32>>.None;
    ((var_1690482933098_328 ?? var_1690482933098_331)|>var_1690482933098_320)[4];
    let var_1690482933098_353 : Enum_1690482933098_92 = Enum_1690482933098_92.defaultValue;
    (Option<Enum_1690482933098_92>.None ?? try { // block id: 341
        var var_1690482933098_347 : UInt16 = UInt16(56);
        var_1690482933098_344 -= var_1690482933098_347;
        Enum_1690482933098_92.defaultValue
    } catch (e: Exception) { // block id: 350
        ();
        var_1690482933098_353
    })
}

public open class Class_1690482933098_358<T0> {
    init() { // block id: 360

    }
;
    public var var_1690482933098_365 : Unit = ();
    public var var_1690482933098_396 : UInt32 = UInt32(50);
    var var_1690482933098_424 : Array<Option<Int32>> = [Option<Int32>.None, Option<Int32>.None, Option<Int32>.None, Option<Int32>.None, Option<Int32>.None, Option<Int32>.None, Option<Int32>.None, Option<Int32>.None, Option<Int32>.None, Option<Int32>.None];
    public static const var_1690482933098_884 : Unit = ();
    public func func_1690482933098_881<T0>() : Unit { // block id: 882
        var_1690482933098_884;
        [((Int64(Int64(-8))&127)..=(Int64(Int64(-48))&127):(Int64(-19)|1)), ((Int64(Int64(-37))&127)..(Int64(Int64(17))&127):(Int64(-5)|1)), ((Int64(Int64(26))&127)..(Int64(Int64(41))&127):(Int64(-99)|1)), ((Int64(Int64(26))&127)..(Int64(Int64(-73))&127):(Int64(-78)|1)), ((Int64(Int64(65))&127)..(Int64(Int64(49))&127):(Int64(-23)|1)), ((Int64(Int64(-9))&127)..=(Int64(Int64(-100))&127):(Int64(70)|1)), ((Int64(Int64(97))&127)..=(Int64(Int64(-5))&127):(Int64(-116)|1)), ((Int64(Int64(-113))&127)..=(Int64(Int64(16))&127):(Int64(-79)|1)), ((Int64(Int64(-5))&127)..(Int64(Int64(-108))&127):(Int64(81)|1)), ((Int64(Int64(-93))&127)..=(Int64(Int64(-53))&127):(Int64(-80)|1))][3];
        ()
    }

}

func func_1690482933098_89() : Bool { // block id: 90
    let var_1690482933098_362 : Class_1690482933098_358<Enum_1690482933098_92> = Class_1690482933098_358<Enum_1690482933098_92>();
    const var_1690482933098_373 : Int64 = 75;
    const var_1690482933098_384 : Int16 = -16;
    match (func_1690482933098_89((Option<Unit>.None is Int16), var_1690482933098_362.var_1690482933098_365)) {
        case defaultValue => 
            Int64(10) - var_1690482933098_373
        
        case defaultValue => 
            var_1690482933098_373
        
        case defaultValue => 
            ();
            var_1690482933098_384;
            Int64(94)
        
        case _ => 
            'j';
            ((UInt8(UInt8(141))&127)..(UInt8(UInt8(39))&127):(Int64(60)|1));
            var_1690482933098_373
        
    };
    var_1690482933098_362.var_1690482933098_396 += try { // block id: 399
        ((UInt16(UInt16(120))&127)..=(UInt16(UInt16(34))&127):(Int64(38)|1));
        var_1690482933098_405;
        UInt32(69)
    } finally { // block id: 408
        var_1690482933098_65 >> ((UInt32(235)) & 7)
    };
    var_1690482933098_413
}


public func func_1690482933098_81(param_1690482933098_82 : (String, String) -> Int32) : String { // block id: 86
    if (func_1690482933098_89()) { // block id: 415
        Int64(UInt64(197))
    } else if (match (var_1690482933098_421.var_1690482933098_424) {
        case _ => 
            ((UInt8(UInt8(40))&127)..=(UInt8(UInt8(148))&127):(Int64(23)|1));
            let var_1690482933098_444 : UInt8 = UInt8(Int8(7));
            var_1690482933098_444 < var_1690482933098_444
        
    }) { // block id: 448
        Struct_1690482933098_194.var_1690482933098_452;
        let var_1690482933098_459 : Int64 = Int64(UInt16(Int16(Int16(UInt8(112)))));
        var_1690482933098_459
    } else { // block id: 465
        var var_1690482933098_477 : Int64 = Int64(UInt32(226));
        (Int64(-70), var_1690482933098_471, ((Int32(var_1690482933098_39)&127)..=(Int32(var_1690482933098_39)&127):(var_1690482933098_477|1)), UInt64(199))[0]
    };
    let var_1690482933098_573 : Range<Int16> = ((Int16(Int16(-120))&127)..(Int16(Int16(125))&127):(Int64(119)|1));
    var var_1690482933098_591 : Range<UInt64> = ((UInt64(UInt64(112))&127)..=(UInt64(UInt64(28))&127):(Int64(18)|1));
    (if (var_1690482933098_487[3]) { (var_1690482933098_198.var_1690482933098_507) } else { (((UInt8(UInt8(201))&127)..=(UInt8(UInt8(93))&127):(Int64(0)|1)), var_1690482933098_540, var_1690482933098_543, var_1690482933098_543, Option<Unit>.None, (), var_1690482933098_190, var_1690482933098_540, (var_1690482933098_554, [[Int32(51), Int32(20), Int32(11), Int32(20), Int32(31), Int32(92), Int32(-24), Int32(-56), Int32(-90), Int32(91)], [Int32(-60), Int32(-46), Int32(117), Int32(65), Int32(-41), Int32(-121), Int32(-8), Int32(-62), Int32(35), Int32(-73)], [Int32(-126), Int32(-87), Int32(-18), Int32(123), Int32(101), Int32(69), Int32(-126), Int32(86), Int32(113), Int32(25)], [Int32(84), Int32(4), Int32(72), Int32(-10), Int32(62), Int32(-90), Int32(-78), Int32(-74), Int32(26), Int32(-28)], [Int32(-70), Int32(-14), Int32(-95), Int32(60), Int32(-54), Int32(-88), Int32(-91), Int32(-84), Int32(122), Int32(126)], [Int32(94), Int32(-121), Int32(92), Int32(-68), Int32(80), Int32(69), Int32(60), Int32(84), Int32(111), Int32(-69)], [Int32(-120), Int32(41), Int32(-92), Int32(72), Int32(-26), Int32(-37), Int32(-78), Int32(-71), Int32(18), Int32(80)], [Int32(-29), Int32(-78), Int32(120), Int32(-93), Int32(120), Int32(-30), Int32(-115), Int32(-56), Int32(53), Int32(83)], [Int32(-114), Int32(111), Int32(115), Int32(-128), Int32(92), Int32(-4), Int32(20), Int32(48), Int32(70), Int32(38)], [Int32(-99), Int32(74), Int32(-30), Int32(50), Int32(-114), Int32(-88), Int32(-117), Int32(86), Int32(33), Int32(7)]], ((Int32(var_1690482933098_39)&127)..(Int32(Int32(124))&127):(Int64(-25)|1)), UInt64(208)))[4] }  ?? match (var_1690482933098_331) {
        case caseVar_1690482933098_568 => 
            if (var_1690482933098_413) { var_1690482933098_573 } else { ((Int16(Int16(75))&127)..(Int16(Int16(78))&127):(Int64(55)|1)) } ;
            var_1690482933098_405;
            var_1690482933098_405
        
        case caseVar_1690482933098_580 => 
            var var_1690482933098_584 : Int64 = Int64(-67);
            var_1690482933098_584 %= ((var_1690482933098_554) | 1)
        
        case _ : Option<Bool> => 
            var_1690482933098_591;
            var var_1690482933098_595 : UInt32 = UInt32(107);
            var_1690482933098_595++
        
        case _ => 
            var_1690482933098_198;
            if (var_1690482933098_413) { Struct_1690482933098_194() } else { Struct_1690482933098_194() } ;
            ()
        
    });
    (match (var_1690482933098_614) {
        case _ => 
            var var_1690482933098_631 : (Int64, Array<Array<Int32>>, Range<Int32>, UInt64) = (Int64(62), [[Int32(82), Int32(UInt32(164)), Int32(UInt8(42)), Int32(Int32(-8)), Int32(UInt32(125)), Int32(Int32(14)), Int32(Int16(-100)), Int32(-58), Int32(UInt8(78)), Int32(UInt32(59))], [Int32(85), Int32(-87), Int32(-80), Int32(4), Int32(33), Int32(-93), Int32(54), Int32(-82), Int32(93), Int32(70)], [Int32(6), Int32(33), Int32(-3), Int32(-127), Int32(Int8(-11)), Int32(124), Int32(Int32(-125)), Int32(Int8(-51)), Int32(-93), Int32(-88)], [Int32(Int16(-81)), Int32(89), Int32(-115), Int32(-67), Int32(-9), Int32(48), Int32(28), Int32(-10), Int32(-81), Int32(Int16(81))], [Int32(81), Int32(24), Int32(-102), Int32(-109), Int32(14), Int32(-109), Int32(-56), Int32(89), Int32(-13), Int32(-91)], [Int32(26), Int32(-40), Int32(-108), Int32(UInt16(71)), Int32(7), Int32(UInt32(208)), Int32(Int16(97)), Int32(Int32(61)), Int32(59), Int32(Int8(24))], [Int32(71), Int32(14), Int32(UInt16(175)), Int32(UInt32(236)), Int32(72), Int32(49), Int32(UInt8(48)), Int32(-34), Int32(-41), Int32(UInt32(129))], [Int32(UInt32(88)), Int32(30), Int32(68), Int32(-123), Int32(UInt32(108)), Int32(-8), Int32(UInt32(97)), Int32(Int32(63)), Int32(-125), Int32(124)], [Int32(UInt16(246)), Int32(UInt32(219)), Int32(Int8(114)), Int32(43), Int32(-120), Int32(Int8(-41)), Int32(-60), Int32(UInt16(228)), Int32(19), Int32(UInt16(13))], [Int32(-67), Int32(Int32(23)), Int32(Int16(115)), Int32(83), Int32(UInt32(186)), Int32(15), Int32(Int16(110)), Int32(84), Int32(Int32(-74)), Int32(-2)]], ((Int32(Int32(58))&127)..=(Int32(Int32(-120))&127):(Int64(99)|1)), UInt64(Int16(Int8(-10))));
            if (var_1690482933098_413) { var_1690482933098_622 } else { Option<(Unit, Float32, (Int64, Array<Array<Int32>>, Range<Int32>, UInt64), String)>.Some(((), var_1690482933098_628, var_1690482933098_631, """
buuj\"
,t_%[
""")) } 
        
        case _ => 
            var_1690482933098_622
        
        case caseVar_1690482933098_773 => 
            Int16(-85);
            let var_1690482933098_779 : ?(Unit, Float32, (Int64, Array<Array<Int32>>, Range<Int32>, UInt64), String) = ((((UInt64(UInt64(16))&127)..=(UInt64(UInt64(Int16(-11)))&127):(Int64(32)|1)) as Bool) as (Unit, Float32, (Int64, Array<Array<Int32>>, Range<Int32>, UInt64), String));
            if (true) { var_1690482933098_779 } else { Option<(Unit, Float32, (Int64, Array<Array<Int32>>, Range<Int32>, UInt64), String)>.None } 
        
        case caseVar_1690482933098_790 : Enum_1690482933098_92 => 
            (var_1690482933098_554, var_1690482933098_471, ((Int32(Int32(-54))&127)..=(Int32(Int32(-39))&127):(Int64(-56)|1)), UInt64(159));
            ();
            if (true) { Option<(Unit, Float32, (Int64, Array<Array<Int32>>, Range<Int32>, UInt64), String)>.Some(((), var_1690482933098_628, (var_1690482933098_554, [[Int32(-126), Int32(-102), Int32(-67), Int32(59), Int32(-14), Int32(-13), Int32(-116), Int32(116), Int32(-6), Int32(55)], [Int32(-84), Int32(50), Int32(-8), Int32(99), Int32(28), Int32(82), Int32(-34), Int32(-107), Int32(25), Int32(-97)], [Int32(-90), Int32(-114), Int32(40), Int32(21), Int32(34), Int32(45), Int32(-54), Int32(-103), Int32(101), Int32(-34)], [Int32(-35), Int32(53), Int32(-62), Int32(-44), Int32(46), Int32(-10), Int32(16), Int32(69), Int32(-45), Int32(-53)], [Int32(-4), Int32(25), Int32(-22), Int32(-102), Int32(-81), Int32(-33), Int32(86), Int32(-121), Int32(93), Int32(-55)], [Int32(110), Int32(-17), Int32(72), Int32(39), Int32(-59), Int32(94), Int32(-53), Int32(-127), Int32(41), Int32(56)], [Int32(54), Int32(51), Int32(62), Int32(63), Int32(114), Int32(70), Int32(122), Int32(87), Int32(-47), Int32(87)], [Int32(3), Int32(-56), Int32(-48), Int32(58), Int32(-41), Int32(32), Int32(-27), Int32(87), Int32(36), Int32(-29)], [Int32(25), Int32(-34), Int32(6), Int32(-91), Int32(25), Int32(61), Int32(110), Int32(107), Int32(74), Int32(5)], [Int32(36), Int32(-61), Int32(24), Int32(-2), Int32(72), Int32(104), Int32(47), Int32(-61), Int32(45), Int32(21)]], var_1690482933098_808, var_1690482933098_304), var_1690482933098_812)) } else { Option<(Unit, Float32, (Int64, Array<Array<Int32>>, Range<Int32>, UInt64), String)>.None } 
        
        case _ => 
            var_1690482933098_543 /= ((UInt8(122)) | 1);
            var_1690482933098_628 / Float32((Int32(Float32(-119.0))) | 1);
            let var_1690482933098_824 : ?(Unit, Float32, (Int64, Array<Array<Int32>>, Range<Int32>, UInt64), String) = Option<(Unit, Float32, (Int64, Array<Array<Int32>>, Range<Int32>, UInt64), String)>.Some(((), Float32(-54.0), (Int64(UInt32(50)), [[Int32(-24), Int32(-116), Int32(48), Int32(-53), Int32(122), Int32(-127), Int32(120), Int32(67), Int32(0), Int32(-37)], [Int32(124), Int32(84), Int32(41), Int32(38), Int32(-86), Int32(118), Int32(-98), Int32(-94), Int32(30), Int32(-95)], [Int32(-23), Int32(-18), Int32(88), Int32(25), Int32(1), Int32(-113), Int32(-112), Int32(-95), Int32(115), Int32(-105)], [Int32(118), Int32(97), Int32(106), Int32(65), Int32(-120), Int32(50), Int32(-8), Int32(56), Int32(113), Int32(84)], [Int32(69), Int32(33), Int32(-27), Int32(12), Int32(-85), Int32(-11), Int32(-118), Int32(113), Int32(-57), Int32(48)], [Int32(-103), Int32(-36), Int32(71), Int32(23), Int32(16), Int32(79), Int32(11), Int32(-28), Int32(107), Int32(-84)], [Int32(-103), Int32(5), Int32(-99), Int32(-64), Int32(-116), Int32(36), Int32(82), Int32(111), Int32(16), Int32(-13)], [Int32(-68), Int32(-87), Int32(-86), Int32(-1), Int32(109), Int32(-11), Int32(43), Int32(79), Int32(-117), Int32(75)], [Int32(-1), Int32(-109), Int32(59), Int32(-111), Int32(60), Int32(37), Int32(-48), Int32(-12), Int32(-75), Int32(66)], [Int32(50), Int32(81), Int32(78), Int32(26), Int32(-51), Int32(-15), Int32(-50), Int32(45), Int32(95), Int32(72)]], ((Int32(Int32(-89))&127)..(Int32(Int32(-127))&127):(Int64(-21)|1)), UInt64(54)), """
@Jbee
AvA~c
"""));
            var_1690482933098_824
        
    } ?? var_1690482933098_837)[3]
}

public func func_1690482933098_854(param_1690482933098_7 : String, optionalParam_1690482933098_8 : String) : Int32 { // block id: 10
    Int64(Int64(93));
    try { // block id: 14
        const var_1690482933098_26 : Rune = 'e';
        match (Enum_1690482933098_16<Int8, UInt16>.defaultValue) {
            case _ => 
                var var_1690482933098_23 : Bool = false;
                if (var_1690482933098_23) { var_1690482933098_26 } else { 'p' } ;
                Int16(-62);
                UInt64(101)
            
        };
        (Option<Int32>.Some(Int32(-111)) ?? var_1690482933098_39)
    } finally { // block id: 41
        ();
        const var_1690482933098_46 : UInt16 = 86;
        const var_1690482933098_49 : Float32 = 54.0;
        try { // block id: 44
            var_1690482933098_46;
            var_1690482933098_49
        } catch (e: Exception) { // block id: 51
            -var_1690482933098_49
        };
        match (UInt32(2)) {
            case _ : Int32 => 
                var_1690482933098_39
            
            case caseVar_1690482933098_62 : Int16 => 
                var_1690482933098_65;
                Int32(-34)
            
            case 138 | 72 | 222 => 
                var_1690482933098_39
            
            case _ => 
                let var_1690482933098_75 : Unit = ();
                var_1690482933098_75;
                var_1690482933098_39 | var_1690482933098_39
            
        }
    }
}

main(): Int64 {
    try {
        func_1690482933098_6((func_1690482933098_854|>func_1690482933098_81), optionalParam_1690482933098_8 : match (var_1690482933098_405) {
            case () | () => 
                var_1690482933098_628;
                'P';
                var_1690482933098_812
            
            case () | () | () => 
                ();
                "stR6.a{,M.%"
            
            case _ => 
                var_1690482933098_304 |= var_1690482933098_304;
                [false, false, false, false, true, false, true, false, true, true];
                var_1690482933098_812
            
        });
        var_1690482933098_421.func_1690482933098_881<Option<Int32>>();
        try { // block id: 892
            Int64(83)
        } catch (e: Exception) { // block id: 894
            var_1690482933098_405;
            var_1690482933098_554
        }
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var_1690482933098_39*var_1690482933098_39), 64)
        crccheck.updateBuffer(UInt64(var_1690482933098_65*var_1690482933098_65), 64)
        crccheck.updateBuffer(UInt64(var_1690482933098_304*var_1690482933098_304), 64)
        crccheck.updateBuffer(UInt64(var_1690482933098_344*var_1690482933098_344), 64)
        crccheck.updateBuffer(UInt64(var_1690482933098_543*var_1690482933098_543), 64)
        crccheck.updateBuffer(UInt64(var_1690482933098_554*var_1690482933098_554), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Enum_1690482933098_92 {

}

