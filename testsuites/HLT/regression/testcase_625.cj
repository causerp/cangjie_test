/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args

public var var_1716904667055_15 : Bool = true
public var var_1716904667055_43 : Byte = UInt8(UInt8(230))
public var var_1716904667055_53 : Int8 = Int8(-107)
public const var_1716904667055_84 : UInt = 143
public var var_1716904667055_100 : Float64 = Float64(Float32(Float32(Float32(92.0))))
public const var_1716904667055_113 : Unit = ()
public const var_1716904667055_131 : UInt16 = 15
public var var_1716904667055_154 : Byte = UInt8(169)
public var var_1716904667055_165 : Int64 = Int64(79)
public var var_1716904667055_235 : Range<UInt8> = ((UInt8(UInt8(67))&127)..=(UInt8(UInt8(254))&127):(Int64(-76)|1))
public let var_1716904667055_250 : Int16 = Int16(UInt16(90))
const var_1716904667055_313 : Float32 = 55.0
public var var_1716904667055_329 : ?Float32 = Option<Float32>.None
var var_1716904667055_413 : ?Float32 = (Option<Float32>.None as Float32)
public var var_1716904667055_425 : ?Range<UInt8> = ((VArray<Int64, $4>(repeat: Int64(Int16(-100))), ((UInt8(UInt8(112))&127)..=(UInt8(UInt8(62))&127):(Int64(-111)|1))) as Range<UInt8>)
public enum Enum_1716904667055_58<T0, T1>  {
    defaultValue |
    enumValue_1716904667055_61(Int8, UInt8, UInt64, Int16)
}
public const func func_1716904667055_109<T0>(param_1716904667055_110 : Int64) : UInt16 { // block id: 111
    var_1716904667055_113;
    const func func_1716904667055_116(namedParam_1716904667055_117 ! : Bool, optionalParam_1716904667055_118 ! : UInt64 = 110, namedParam_1716904667055_120 ! : Int8, optionalParam_1716904667055_121 ! : UInt32 = 130) : Unit { // block id: 123
        ();
        var_1716904667055_113
    }
;
    const var_1716904667055_127 : Bool = false;
    func_1716904667055_116(namedParam_1716904667055_117 : var_1716904667055_127, namedParam_1716904667055_120 : 62);
    var_1716904667055_131
}



public func func_1716904667055_21(optionalParam_1716904667055_22 ! : Float32 = Float32(54.0), optionalParam_1716904667055_24 ! : Int32 = Int32(UInt8(Int8(Int8(UInt8(129))))), namedParam_1716904667055_30 ! : UInt16, namedParam_1716904667055_31 ! : UInt64) : Int64 { // block id: 32
    var var_1716904667055_47 : UInt8 = UInt8(8);
    let var_1716904667055_183 : Int32 = Int32(UInt8(Int8(38)));
    try { // block id: 34
        if (var_1716904667055_15) { // block id: 37

        };
        var loopTimeVar_1716904667055_50 : Int64 = 0;
        while ((false) && loopTimeVar_1716904667055_50 < 100 ) {
            loopTimeVar_1716904667055_50++;
            var_1716904667055_43 <<= ((var_1716904667055_47) & 7)
        };
        var_1716904667055_53 += Int8(37)
    } finally { // block id: 56
        match (Enum_1716904667055_58<String, Int16>.enumValue_1716904667055_61(var_1716904667055_53, UInt8(82), UInt64(116), Int16(-16))) {
            case defaultValue => 
                ();
                UInt64(94)
            
            case defaultValue => 
                if (var_1716904667055_15) { ###"2IbM#Ud0ee"### } else { """
>,k$|
QnGBo
""" } ;
                ();
                var_1716904667055_84
            
            case caseVar_1716904667055_88 : UInt16 => 
                ();
                Int8(-117);
                UInt64(140) / ((UInt64(204)) | 1)
            
            case _ => 
                var_1716904667055_100 -= Float64(118.0);
                Float32(-52.0);
                var_1716904667055_84
            
        };
        let var_1716904667055_145 : Int16 = Int16(-32);
        Int64(26)|>{ lambdaParameter_1716904667055_135 : Int64 => var var_1716904667055_170 : UInt32 = UInt32(Int32(UInt16(171))); (Option<UInt16>.Some(match (var_1716904667055_145) {
            case caseVar_1716904667055_149 : Bool => 
                ();
                var_1716904667055_154 %= ((var_1716904667055_154) | 1);
                UInt16(182) % ((var_1716904667055_131) | 1)
            
            case 10 => 
                var_1716904667055_165 *= Int64(-114);
                var_1716904667055_170 /= ((var_1716904667055_170) | 1);
                UInt16(58)
            
            case _ => 
                var_1716904667055_131
            
        }) ?? match (var_1716904667055_183) {
            case _ => 
                UInt16(171)
            
        } >> (((Option<UInt16>.Some(UInt16(27)) ?? UInt16(212))) & 7)) };
        VArray<Unit, $2>(repeat: var_1716904667055_113)[1]
    };
    var var_1716904667055_221 : Option<VArray<Int64, $4>> = Option<VArray<Int64, $4>>.None;
    let var_1716904667055_232 : VArray<Int64, $4> = [Int64(80), Int64(-70), Int64(-51), Int64(-124)];
    if (var_1716904667055_15) { (var_1716904667055_221 ?? VArray<Int64, $4>(repeat: var_1716904667055_165)) } else { (var_1716904667055_232, var_1716904667055_235)[0] } [0]
}




func func_1716904667055_292(param_1716904667055_293 : Range<UInt8>) : UInt64 { // block id: 294
    let var_1716904667055_316 : Range<Int32> = ((Int32(Int32(UInt16(123)))&127)..=(Int32(Int32(Int8(Int8(Int8(-106)))))&127):(Int64(-37)|1));
    ((UInt16(191) as (Range<Int64>, Float32, Range<Int32>, Int16, Unit, Int32, Option<Float32>, Int16)) ?? (Option<(Range<Int64>, Float32, Range<Int32>, Int16, Unit, Int32, Option<Float32>, Int16)>.None ?? (((Int64(Int64(-76))&127)..(Int64(Int64(78))&127):(Int64(-79)|1)), var_1716904667055_313, var_1716904667055_316, var_1716904667055_250, var_1716904667055_113, Int32(18), var_1716904667055_329, var_1716904667055_250)))[4];
    try { // block id: 334
        try { // block id: 336
            let var_1716904667055_338 : Unit = ();
            var_1716904667055_338;
            Float64(-114.0);
            if (false) { Option<(Range<Int64>, Float32, Range<Int32>, Int16, Unit, Int32, Option<Float32>, Int16)>.None } else { Option<(Range<Int64>, Float32, Range<Int32>, Int16, Unit, Int32, Option<Float32>, Int16)>.Some((((Int64(Int64(112))&127)..(Int64(Int64(103))&127):(Int64(-9)|1)), var_1716904667055_313, ((Int32(Int32(-112))&127)..(Int32(Int32(31))&127):(Int64(-85)|1)), Int16(74), var_1716904667055_113, Int32(-109), var_1716904667055_329, Int16(-120))) } 
        } finally { // block id: 354
            var_1716904667055_113;
            Option<(Range<Int64>, Float32, Range<Int32>, Int16, Unit, Int32, Option<Float32>, Int16)>.None
        };
        let var_1716904667055_385 : VArray<Int64, $4> = [Int64(-1), Int64(-72), Int64(-3), Int64(75)];
        match (Option<UInt16>.None) {
            case caseVar_1716904667055_361 => 
                Int8(-40);
                var_1716904667055_84 << ((UInt64(232)) & 7)
            
            case _ => 
                UInt64(86)
            
            case caseVar_1716904667055_373 : Int8 => 
                var var_1716904667055_377 : Bool = true;
                if (var_1716904667055_377) { VArray<Int64, $4>({ i => Int64(-92)}) } else { var_1716904667055_385 } ;
                UInt64(162)
            
            case _ : Rune => 
                var_1716904667055_84
            
            case _ => 
                var_1716904667055_84
            
        }
    } finally { // block id: 396
        var var_1716904667055_402 : Option<(Range<Int64>, Float32, Range<Int32>, Int16, Unit, Int32, Option<Float32>, Int16)> = (Int16(UInt16(UInt16(Int16(-61)))) as (Range<Int64>, Float32, Range<Int32>, Int16, Unit, Int32, Option<Float32>, Int16));
        (Option<(Range<Int64>, Float32, Range<Int32>, Int16, Unit, Int32, Option<Float32>, Int16)>.None, var_1716904667055_402, (), true, UInt64(32), var_1716904667055_313, var_1716904667055_413, '8')[4]
    }
}


main(): Int64 {
    try {
        var loopTimeVar_1716904667055_19 : Int64 = 0;
        while ((try { // block id: 8
            false && true
        } finally { // block id: 12
            ();
            var_1716904667055_15
        }) && loopTimeVar_1716904667055_19 < 100 ) {
            loopTimeVar_1716904667055_19++;

        };
        var var_1716904667055_258 : ?Float32 = Option<Float32>.Some(Float32(Float32(-32.0)));
        func_1716904667055_21(optionalParam_1716904667055_22 : (match (Enum_1716904667055_58<String, Int16>.enumValue_1716904667055_61(var_1716904667055_53, var_1716904667055_154, UInt64(157), var_1716904667055_250)) {
            case caseVar_1716904667055_255 : UInt16 => 
                var_1716904667055_258
            
            case defaultValue => 
                var_1716904667055_258
            
            case enumValue_1716904667055_61(caseVar_1716904667055_268, caseVar_1716904667055_269, caseVar_1716904667055_270, caseVar_1716904667055_271 : Range<Int16>) => 
                Option<Float32>.None
            
            case _ => 
                ();
                var_1716904667055_113;
                if (var_1716904667055_15) { var_1716904667055_258 } else { var_1716904667055_258 } 
            
        } ?? try { // block id: 284
            var_1716904667055_113;
            true;
            Float32(56.0)
        } finally { // block id: 288
            Float32(49.0)
        }), namedParam_1716904667055_30 : var_1716904667055_131, namedParam_1716904667055_31 : ((var_1716904667055_425 ?? var_1716904667055_235)|>func_1716904667055_292))
        // CRC Check All Variables
        var crcCheck = CrcCheck(5000, 32)
        crcCheck.crcCheck()
        crcCheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[(i + buffer_index) % buffer.size] = byteArray[i + byte_index]
            i++
        }
        buffer_index = (buffer_index + i) % buffer.size
    }

    func updateBuffer(input: Bool, byte_n: Int64): Unit {
        if (input == true) {
            updateBuffer(1, byte_n)
        } else {
            updateBuffer(0, byte_n)
        }
    }

    func updateBuffer(input: Rune, byte_n: Int64): Unit {
        updateBuffer(UInt64(UInt32(input)), byte_n)
    }

    func updateBuffer(input: String, byte_n: Int64): Unit {
        for (c in input) {
            updateBuffer(c, byte_n)
        }
    }

    func updateBuffer(input: Unit, byte_n: Int64): Unit {
        updateBuffer(input.toString(), byte_n)
    }

    func updateBuffer(input: Any, byte_n: Int64) : Unit {
        if (input is Hashable) {
            match(input as Hashable) {
                case Some(v) => updateBuffer(UInt64(v.hashCode()), byte_n)
                case _=> updateBuffer(1, byte_n)
            }
            
        } else if (input is ToString) {
            match(input as ToString) {
                case Some(v) => updateBuffer(v.toString(), byte_n)
                case _=> updateBuffer(1, byte_n)
            }
        } else {
            updateBuffer(1, byte_n)
        }
    }     
    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}

extend <T0, T1> Enum_1716904667055_58<T0, T1> {

}

