/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC-1: %compiler %cmp_opt %f -o %output

public let var43 : UInt16 = UInt16(Int8(50))
public var var62 : Float64 = (-78.0)
public let var73 : ?Rune = ("w]<38i'tZb" as Rune)
public var var95 : Array<Bool> = Array<Bool>(10){ i => true }
public var var158 : Bool = false
public let var165 : Range<Int32> = (Int32(97)&127..Int32(61)&127:60|1)
public let var175 : Result<Unit> = Result<Unit>.Err(Exception("LangFuzz Inner Exception"))
var var275 : Result<Bool> = Result<Bool>.Err(Exception("LangFuzz Inner Exception"))
public var var326 : Bool = true
public let var463 : Unit = ()
public let var479 : Int32 = Int32(-79)
public let var619 : Int64 = Int64(Int32(93))
public let var629 : ??Result<Bool> = Option<Option<Result<Bool>>>.None
public var var698 : Option<Int32> = Option<Int32>.None
let var730 : Class241 = Class241()
public var var803 : UInt64 = UInt64(Int32(Int16(UInt16(6))))
public var var810 : UInt16 = UInt16(Int16(-103))
public var var857 : Int64 = Int64(UInt32(48))
let var866 : Rune = '8'
public var var1071 : UInt32 = UInt32(Int16(-95))
public var var1090 : ??Array<UInt8> = ((Int8(68)&127..=Int8(-93)&127:(-103)|1) as Option<Array<UInt8>>)
public var var1170 : Int16 = Int16(UInt16(UInt16(Int8(UInt8(13)))))
public let var1181 : (Int8*Float32*Range<Int64>*UInt64*UInt64*Range<Int16>*UInt64*Float64) = (Int8(47), Float32(98.0), (Int64(UInt8(244))&127..=10&127:(Int64(UInt8(Int8(-1)))|1)), UInt64(127), UInt64(46), (Int16(54)&127..Int16(-62)&127:111|1), UInt64(UInt32(201)), Float64(Float32(Float32(11.0))))
public let var1212 : Unit = ()
public let var1369 : (UInt16*Array<Bool>*Int64) = (UInt16(Int8(Int8(-4))), [(([[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]] as Option<Array<UInt8>>) is Array<Bool>), (Result<Option<(Range<Int16>*Array<UInt8>*Int32*UInt16*Int32)>>.Err(Exception("LangFuzz Inner Exception")) is Array<UInt32>), true, true, true, (Option<Int64>.None is Option<Result<Bool>>), ('a' is (Range<UInt16>*(Array<Int8>*Rune*Array<Array<UInt8>>*Array<Array<Unit>>*Int64)*Float32*Float32*Option<Array<UInt8>>*Array<Int8>)), false, false, false], 28)
public let var1421 : Array<Array<Unit>> = [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]]
public let var1455 : Int32 = Int32(56)
let var1470 : (UInt8*Result<Array<UInt32>>*Range<Int64>) = (UInt8(Int8(UInt8(107))), Result<Array<UInt32>>.Err(Exception("LangFuzz Inner Exception")), (Int64(UInt32(UInt16(99)))&127..=Int64(UInt8(UInt8(36)))&127:(Int64(UInt16(21))|1)))
public let var1491 : Bool = false
public let var1502 : Array<UInt8> = [UInt8(35), UInt8(143), UInt8(UInt8(UInt8(160))), UInt8(UInt8(UInt8(Int8(-47)))), UInt8(Int8(UInt8(Int8(102)))), UInt8(148), UInt8(77), UInt8(153), UInt8(UInt8(156)), UInt8(UInt8(176))]
public let var1542 : Bool = false
public let var1548 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
public var var1896 : Float64 = (-119.0)
public let var1915 : UInt8 = UInt8(UInt8(UInt8(64)))
public let var2017 : Result<Int16> = Result<Int16>.Err(Exception("LangFuzz Inner Exception"))
public let var2025 : (Range<UInt32>*Bool*String*Array<Int8>) = ((UInt32(200)&127..UInt32(74)&127:103|1), (UInt8(143) is Float64), "fv+a5m\"ib8", [Int8(43), Int8(-16), Int8(Int8(-102)), Int8(Int8(79)), Int8(UInt8(115)), Int8(45), Int8(Int8(Int8(42))), Int8(-58), Int8(28), Int8(Int8(22))])
public let var2053 : String = """
uZxBs
26 *C
"""
var var2061 : ?Result<Bool> = (Result<Option<(Range<Int16>*Array<UInt8>*Int32*UInt16*Int32)>>.Err(Exception("LangFuzz Inner Exception")) as Result<Bool>)
public var var2081 : ?Result<Bool> = Option<Result<Bool>>.None
public let var2084 : ?Result<Bool> = Option<Result<Bool>>.None
public let var2090 : Array<Array<UInt8>> = [[UInt8(161), UInt8(80), UInt8(193), UInt8(219), UInt8(227), UInt8(33), UInt8(68), UInt8(80), UInt8(22), UInt8(169)], [UInt8(124), UInt8(156), UInt8(244), UInt8(205), UInt8(UInt8(188)), UInt8(Int8(6)), UInt8(194), UInt8(UInt8(Int8(117))), UInt8(243), UInt8(Int8(Int8(48)))], [UInt8(133), UInt8(110), UInt8(144), UInt8(125), UInt8(32), UInt8(89), UInt8(34), UInt8(61), UInt8(242), UInt8(150)], [UInt8(60), UInt8(217), UInt8(44), UInt8(Int8(UInt8(213))), UInt8(136), UInt8(UInt8(Int8(104))), UInt8(Int8(51)), UInt8(UInt8(53)), UInt8(Int8(UInt8(38))), UInt8(UInt8(235))], [UInt8(213), UInt8(219), UInt8(43), UInt8(140), UInt8(36), UInt8(49), UInt8(93), UInt8(187), UInt8(16), UInt8(52)], [UInt8(149), UInt8(10), UInt8(Int8(-56)), UInt8(142), UInt8(5), UInt8(UInt8(163)), UInt8(80), UInt8(238), UInt8(Int8(UInt8(240))), UInt8(85)], [UInt8(149), UInt8(151), UInt8(105), UInt8(12), UInt8(27), UInt8(85), UInt8(77), UInt8(95), UInt8(8), UInt8(9)], [UInt8(152), UInt8(124), UInt8(179), UInt8(68), UInt8(105), UInt8(230), UInt8(198), UInt8(44), UInt8(113), UInt8(252)], [UInt8(51), UInt8(136), UInt8(210), UInt8(60), UInt8(22), UInt8(237), UInt8(162), UInt8(106), UInt8(187), UInt8(72)], [UInt8(128), UInt8(12), UInt8(57), UInt8(UInt8(210)), UInt8(37), UInt8(Int8(Int8(-27))), UInt8(Int8(-64)), UInt8(Int8(Int8(74))), UInt8(77), UInt8(17)]]
public var var2171 : Range<UInt8> = (UInt8(150)&127..=UInt8(149)&127:((-66)|1))
var var2180 : Range<Int16> = (Int16(-64)&127..Int16(126)&127:(-20)|1)
var var2298 : ?Array<Array<UInt8>> = (Option<Option<Result<Bool>>>.None as Array<Array<UInt8>>)
public let var2313 : UInt8 = UInt8(131)
public let var2328 : UInt8 = UInt8(UInt8(206))
let var2415 : ?(Range<Int16>*Array<UInt8>*Int32*UInt16*Int32) = ((UInt32(162)&127..UInt32(82)&127:115|1) as (Range<Int16>*Array<UInt8>*Int32*UInt16*Int32))
public var var2434 : Unit = ()
public var var2446 : Unit = ()
public let var2463 : Int16 = Int16(UInt16(Int16(Int8(-55))))
var var2652 : Float64 = (-19.0)
let var2666 : Rune = 'Z'
public var var2748 : Int64 = Int64(Int32(UInt8(60)))
public var var2776 : Rune = 'w'
public var var2811 : Option<Int64> = Option<Int64>.None
public let var2916 : Bool = ((UInt8(206)&127..UInt8(111)&127:(42|1)) is Result<Array<Unit>>)
public let var2955 : Float32 = Float32(-93.0)
public var var2996 : (Int8*Option<(Range<Int16>*Array<UInt8>*Int32*UInt16*Int32)>*Int16*Int64*Array<Bool>*Array<Unit>) = (Int8(Int8(UInt8(188))), Option<(Range<Int16>*Array<UInt8>*Int32*UInt16*Int32)>.None, Int16(Int8(97)), 20, [((Int8(-106)&127..Int8(62)&127:(66|1)) is (UInt16*Array<Bool>*Int64)), ((Option<Int64>.None as Option<Result<Bool>>) is (Range<UInt64>) -> Array<Array<UInt8>>), (((UInt32(218)&127..UInt32(100)&127:92|1), false, "b3d^(&7fxy", [Int8(96), Int8(36), Int8(82), Int8(107), Int8(37), Int8(-44), Int8(-41), Int8(-14), Int8(82), Int8(-82)]) is Result<Result<Array<Unit>>>), true, (([UInt32(180), UInt32(164), UInt32(130), UInt32(114), UInt32(213), UInt32(65), UInt32(225), UInt32(203), UInt32(150), UInt32(113)], [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], [false, false, true, true, true, false, false, false, true, true], [Int8(78), Int8(54), Int8(-107), Int8(30), Int8(-47), Int8(-12), Int8(17), Int8(6), Int8(122), Int8(-52)]) is Option<Option<Array<UInt8>>>), ((UInt8(154)&127..UInt8(10)&127:(108|1)) is Option<Int32>), ("\"Ig${var2053};FEd${var2053}Kc," is (Range<UInt64>) -> UInt8), (([(), (), (), (), (), (), (), (), (), ()], Int8(-64), (), [UInt32(124), UInt32(12), UInt32(153), UInt32(148), UInt32(14), UInt32(30), UInt32(164), UInt32(160), UInt32(37), UInt32(64)], Float32(-27.0)) is Result<UInt64>), (Option<Int32>.None is Option<Int64>), (Option<Int64>.None is Rune)], [(), (), (), (), (), (), (), (), (), ()])
public var var3146 : Int64 = 112
public var var3150 : (Range<UInt64>*Bool*Range<Int16>*Bool) = ((UInt64(UInt32(140))&127..UInt64(UInt16(190))&127:(25|1)), (Option<Option<Result<Bool>>>.None is Array<Int8>), (Int16(-56)&127..=Int16(101)&127:102|1), false)
let var3172 : Int64 = (-92)
public var var3230 : Range<Int8> = (Int8(51)&127..=Int8(-36)&127:((-76)|1))
public let var3374 : Int8 = Int8(-86)
let var3385 : Bool = ([(), (), (), (), (), (), (), (), (), ()] is Range<Int8>)
public var var3399 : Bool = (Result<UInt64>.Err(Exception("LangFuzz Inner Exception")) is Result<Array<Unit>>)
public var var3418 : Unit = ()
public var var3421 : Unit = ()
public var var3424 : Unit = ()
public var var3482 : Int8 = Int8(Int8(UInt8(250)))
public let var3513 : (Array<Int8>*Rune*Array<Array<UInt8>>*Array<Array<Unit>>*Int64) = ([Int8(Int8(Int8(-45))), Int8(14), Int8(-33), Int8(UInt8(86)), Int8(UInt8(28)), Int8(-9), Int8(83), Int8(1), Int8(-113), Int8(-29)], '7', [[UInt8(102), UInt8(157), UInt8(212), UInt8(40), UInt8(196), UInt8(86), UInt8(59), UInt8(228), UInt8(76), UInt8(209)], [UInt8(168), UInt8(230), UInt8(218), UInt8(75), UInt8(186), UInt8(88), UInt8(37), UInt8(62), UInt8(205), UInt8(159)], [UInt8(195), UInt8(72), UInt8(78), UInt8(226), UInt8(93), UInt8(164), UInt8(177), UInt8(132), UInt8(65), UInt8(131)], [UInt8(170), UInt8(152), UInt8(196), UInt8(49), UInt8(198), UInt8(118), UInt8(4), UInt8(24), UInt8(235), UInt8(105)], [UInt8(124), UInt8(127), UInt8(46), UInt8(184), UInt8(183), UInt8(149), UInt8(210), UInt8(42), UInt8(79), UInt8(75)], [UInt8(5), UInt8(0), UInt8(217), UInt8(192), UInt8(41), UInt8(152), UInt8(79), UInt8(39), UInt8(220), UInt8(191)], [UInt8(16), UInt8(61), UInt8(7), UInt8(210), UInt8(52), UInt8(239), UInt8(45), UInt8(149), UInt8(103), UInt8(148)], [UInt8(133), UInt8(226), UInt8(73), UInt8(227), UInt8(152), UInt8(144), UInt8(132), UInt8(52), UInt8(208), UInt8(120)], [UInt8(71), UInt8(136), UInt8(181), UInt8(216), UInt8(99), UInt8(15), UInt8(127), UInt8(27), UInt8(53), UInt8(249)], [UInt8(164), UInt8(195), UInt8(72), UInt8(107), UInt8(142), UInt8(148), UInt8(95), UInt8(189), UInt8(4), UInt8(53)]], [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], 40)
public let var3597 : ?Array<UInt8> = (((Int32(-66)&127..Int32(Int32(-94))&127:(Int64(Int8(-25))|1)) as Int64) as Array<UInt8>)
public var var3621 : Array<Int8> = [Int8(-77), Int8(0), Int8(103), Int8(8), Int8(78), Int8(42), Int8(-90), Int8(-72), Int8(-47), Int8(57)]
var var3644 : UInt8 = UInt8(189)
public var var3688 : Range<UInt16> = (UInt16(209)&127..UInt16(150)&127:120|1)
public var var3700 : UInt32 = UInt32(Int16(70))
public var var3730 : Result<Array<UInt32>> = Result<Array<UInt32>>.Err(Exception("LangFuzz Inner Exception"))
public var var3794 : Option<Float64> = Option<Float64>.None
public let var3823 : Int32 = Int32(11)
public let var3876 : Int32 = Int32(Int8(Int8(Int8(122))))
public var var3905 : ?Bool = (Int16(UInt8(UInt8(8))) as Bool)

public func func37(param38 : Unit, optionalParam39 ! : Range<Int64> = ((-20)&127..=(-108)&127:44|1)) : Rune { // block id: 41
    var43;
    let var68 : Bool = true;
    (try { // block id: 52
        UInt32(29);
        var var55 : ?Rune = Option<Rune>.Some('2');
        var55
    } catch (_) { // block id: 58
        (-58.0) + var62;
        Option<Rune>.None
    } finally { // block id: 65
        if (var68) { Option<Rune>.Some('e') } else { var73 } 
    } ?? 'N')
}


public struct Aggregate121<T0, T1> {
    init() { // block id: 123

    }
;
    static let var126 : Int32 = Int32(-50)
}




public func func168(param169 : Array<Unit>) : Float64 { // block id: 170
    -match ((var175 as Rune)) {
        case _ => 
            UInt32(89) >> ((UInt32(80)) & 7);
            UInt8(75) % ((UInt8(1)) | 1);
            let var187 : Float64 = Float64(Float32(Float32(-122.0)));
            var187
        
        case _ => 
            88.0 ** Float64(Int32(45.0) & 3)
        
        case caseVar199 => 
            ();
            29.0
        
        case _ => 
            let var207 : UInt64 = UInt64(UInt64(UInt64(11)));
            var207 >> ((UInt64(47)) & 7);
            var62 * var62
        
    }
}

public func func233(param234 : UInt8) : Unit { // block id: 235

}

public open class Class241 {
    public init() { // block id: 243

    }
;
    public open func func741(param742 : Range<UInt16>, namedParam743 ! : Rune) : UInt64 { // block id: 744
        var var763 : Result<Option<(Range<Int16>*Array<UInt8>*Int32*UInt16*Int32)>> = Result<Option<(Range<Int16>*Array<UInt8>*Int32*UInt16*Int32)>>.Err(Exception("LangFuzz Inner Exception"));
        var var766 : ?(Range<Int16>*Array<UInt8>*Int32*UInt16*Int32) = ((UInt16(151)&127..=UInt16(UInt16(UInt8(156)))&127:((-78)|1)) as (Range<Int16>*Array<UInt8>*Int32*UInt16*Int32));
        let var775 : (Range<Int16>*Array<UInt8>*Int32*UInt16*Int32) = ((Int16(-123)&127..Int16(82)&127:(-96)|1), [UInt8(UInt8(UInt8(24))), UInt8(13), UInt8(UInt8(97)), UInt8(UInt8(UInt8(79))), UInt8(UInt8(116)), UInt8(43), UInt8(11), UInt8(100), UInt8(Int8(UInt8(4))), UInt8(86)], Int32(UInt16(188)), UInt16(Int16(-49)), Int32(15));
        ((Result<Option<(Range<Int16>*Array<UInt8>*Int32*UInt16*Int32)>>.Ok(Option<(Range<Int16>*Array<UInt8>*Int32*UInt16*Int32)>.None) ?? (var763 ?? var766)) ?? var775);
        var803
    }
;
    public let var2970 : Unit = ()
}






public struct Aggregate636 {
    public init() { // block id: 638

    }
;
    public static var var652 : Array<Array<Unit>> = [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]];
    public func func643<T0, T1>(param644 : Option<Int32>, param645 : T0, param646 : Range<Int32>) : UInt64 where T0 <: Option<Result<Bool>>, T1 <: Result<Option<(Range<Int16>*Array<UInt8>*Int32*UInt16*Int32)>> { // block id: 647
        var652[0][9];
        UInt64(64)
    }
;
    public init(namedParam948 ! : Range<UInt8>) { // block id: 949
        ()
    }
;
    public init(namedParam1292 ! : Array<UInt32>, optionalParam1293 ! : Range<Int16> = (Int16(-102)&127..Int16(-90)&127:(-82)|1), optionalParam1295 ! : (UInt16*Array<Bool>*Int64) = (UInt16(Int16(Int16(-88))), [false, false, true, true, false, false, true, false, false, false], Int64(UInt64((-1))))) { // block id: 1304
        let var1309 : Range<Int32> = (Int32(UInt16(Int8(Int8(122))))&127..Int32(Int8(77))&127:(Int64(Int32(Int32(Int16(-80))))|1));
        let var1328 : Result<Array<UInt32>> = Result<Array<UInt32>>.Err(Exception("LangFuzz Inner Exception"));
        match (if ((var1309 is Range<UInt64>)) { namedParam1292 } else { (var1328 ?? [var1071, UInt32(211), var1071, UInt32(189), var1071, var1071, UInt32(248), UInt32(212), UInt32(131), UInt32(202)]) } ) {
            case _ : Option<Option<Array<UInt8>>> => 
                var463;
                ();
                ()
            
            case caseVar1349 => 
                (UInt8(70)&127..=UInt8(229)&127:((-28)|1));
                var var1357 : Int32 = Int32(Int32(Int8(Int8(-54))));
                var1357 += Int32(17);
                var463
            
            case _ => 
                ()
            
        }
    }

}

public func func708(optionalParam709 ! : Int16 = Int16(UInt16(UInt8(132))), namedParam713 ! : Aggregate636, namedParam714 ! : (UInt8) -> Unit, optionalParam717 ! : Range<Int64> = (Int64(Int64(UInt16(UInt8(90))))&127..Int64(Int32(-51))&127:(Int64(Int64(Int8(39)))|1))) : Class241 { // block id: 728
    var730
}





func func820(param821 : Rune) : Int64 { // block id: 822
    let var824 : Array<Array<Unit>> = [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]];
    var824;
    if (match ([Int8(-16), Int8(-39), Int8(0), Int8(61), Int8(114), Int8(-87), Int8(-24), Int8(-109), Int8(-105), Int8(77)]) {
        case _ => 
            var326
        
        case _ => 
            var463;
            var var837 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
            var837;
            true
        
    }) { // block id: 840
        UInt8(240)|>func233
    };
    let var869 : Array<Array<UInt8>> = [[UInt8(38), UInt8(218), UInt8(80), UInt8(126), UInt8(102), UInt8(121), UInt8(234), UInt8(162), UInt8(113), UInt8(205)], [UInt8(183), UInt8(16), UInt8(207), UInt8(165), UInt8(179), UInt8(65), UInt8(235), UInt8(227), UInt8(116), UInt8(20)], [UInt8(224), UInt8(3), UInt8(69), UInt8(47), UInt8(144), UInt8(76), UInt8(52), UInt8(160), UInt8(233), UInt8(253)], [UInt8(232), UInt8(146), UInt8(72), UInt8(26), UInt8(137), UInt8(21), UInt8(247), UInt8(153), UInt8(31), UInt8(49)], [UInt8(215), UInt8(15), UInt8(217), UInt8(8), UInt8(110), UInt8(240), UInt8(155), UInt8(5), UInt8(246), UInt8(148)], [UInt8(77), UInt8(77), UInt8(227), UInt8(253), UInt8(212), UInt8(108), UInt8(93), UInt8(186), UInt8(83), UInt8(27)], [UInt8(79), UInt8(50), UInt8(152), UInt8(8), UInt8(173), UInt8(161), UInt8(214), UInt8(68), UInt8(106), UInt8(98)], [UInt8(34), UInt8(112), UInt8(120), UInt8(43), UInt8(75), UInt8(132), UInt8(202), UInt8(99), UInt8(10), UInt8(232)], [UInt8(182), UInt8(252), UInt8(179), UInt8(121), UInt8(240), UInt8(130), UInt8(225), UInt8(27), UInt8(177), UInt8(64)], [UInt8(154), UInt8(140), UInt8(166), UInt8(251), UInt8(115), UInt8(60), UInt8(142), UInt8(220), UInt8(240), UInt8(192)]];
    var var911 : Unit = ();
    try { // block id: 845
        Int64(UInt64(47))
    } catch (_) { // block id: 848
        (Option<Int64>.Some(var619) ?? var857)
    } finally { // block id: 860
        var var873 : Array<Unit> = Array<Unit>(10){ i => () };
        ([Int8(26), Int8(118), Int8(41), Int8(-126), Int8(-39), Int8(-124), Int8(16), Int8(98), Int8(-63), Int8(-22)], var866, var869, [var873, var873, [(), (), (), (), (), (), (), (), (), ()], [(), (), var463, (), var463, var463, (), var463, (), ()], [(), (), (), (), (), (), (), (), (), ()], var873, [(), (), var463, (), (), (), var463, var463, (), var911], [var463, var463, (), var463, var911, (), (), (), var463, var463], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], 78)[4]
    }
}

public func func405(namedParam575 ! : UInt64, namedParam576 ! : (UInt8) -> Unit) : Range<UInt64> { // block id: 579
    let var591 : ?Result<Bool> = Option<Result<Bool>>.Some(Result<Bool>.Ok(true));
    (try { // block id: 586
        if (var326) { Option<Option<Result<Bool>>>.Some(var591) } else { Option<Option<Result<Bool>>>.None } 
    } finally { // block id: 596
        var var599 : Int16 = Int16(UInt16(UInt16(UInt16(181))));
        var599--;
        var var607 : Range<Int32> = (Int32(UInt8(Int8(UInt8(153))))&127..=Int32(-109)&127:(40|1));
        if (var326) { var607 } else { (var479&127..Int32(-41)&127:(var619|1)) } ;
        Option<Option<Result<Bool>>>.None
    } ?? (if (var326) { Option<Option<Result<Bool>>>.Some(var591) } else { var629 }  ?? (Option<Option<Result<Bool>>>.None ?? Option<Result<Bool>>.None)));
    let var640 : Aggregate636 = Aggregate636();
    let var733 : Int16 = Int16(39);
    var var738 : Range<Int64> = (56&127..86&127:(-85)|1);
    var var816 : Rune = 'M';
    (var640.func643<Option<Result<Bool>>, Result<Option<(Range<Int16>*Array<UInt8>*Int32*UInt16*Int32)>>>(var698, Option<Result<Bool>>.Some(var275), (Int32(-58)&127..=Int32(20)&127:((-45)|1)))&127..=func708(optionalParam709 : var733, namedParam713 : Aggregate636(), namedParam714 : func233, optionalParam717 : var738).func741((var810&127..var810&127:(var619|1)), namedParam743 : var816)&127:(('6'|>func820) ^ ((-21) >> ((57) & 7))|1))
}


func func535(param536 : UInt64, param537 : Int8, param538 : (Unit, Range<Int64>) -> Rune) : Option<Array<UInt8>> { // block id: 542
    var var549 : UInt16 = UInt16(Int16(Int16(Int16(-118))));
    let var556 : Bool = false;
    var var568 : Int64 = Int64(UInt64(95));
    func func934(namedParam935 ! : Aggregate636, namedParam936 ! : (Int16, Aggregate636, (UInt8) -> Unit, Range<Int64>) -> Class241) : UInt64 { // block id: 942
        param536
    }
;
    let var945 : Aggregate636 = Aggregate636(namedParam948 : (UInt8(41)&127..=UInt8(150)&127:122|1));
    var var955 : Range<UInt64> = (UInt64(Int16(Int8(UInt8(69))))&127..=UInt64(25)&127:(Int64(UInt8(244))|1));
    if ((var549, [var556, false, var556, false, true, false, var556, var556, var326, false], var568)[1][1]) { func405(namedParam575 : func934(namedParam935 : var945, namedParam936 : func708), namedParam576 : func233) } else { var955 } ;
    var463;
    try { // block id: 966
        var var986 : Array<Array<Unit>> = Array<Array<Unit>>(10){ i => [(), (), (), (), (), (), (), (), (), ()] };
        var var1050 : Float32 = Float32(-41.0);
        ((UInt16(176)&127..UInt16(28)&127:(-47)|1), ([Int8(33), param537, Int8(117), param537, Int8(-105), param537, param537, Int8(125), Int8(39), param537], var866, [[UInt8(59), UInt8(162), UInt8(123), UInt8(248), UInt8(65), UInt8(1), UInt8(232), UInt8(45), UInt8(21), UInt8(58)], [UInt8(130), UInt8(175), UInt8(185), UInt8(23), UInt8(172), UInt8(110), UInt8(254), UInt8(121), UInt8(38), UInt8(102)], [UInt8(211), UInt8(157), UInt8(224), UInt8(199), UInt8(63), UInt8(67), UInt8(14), UInt8(108), UInt8(20), UInt8(240)], [UInt8(94), UInt8(74), UInt8(94), UInt8(39), UInt8(237), UInt8(128), UInt8(206), UInt8(118), UInt8(102), UInt8(45)], [UInt8(62), UInt8(162), UInt8(184), UInt8(180), UInt8(103), UInt8(91), UInt8(254), UInt8(119), UInt8(79), UInt8(209)], [UInt8(88), UInt8(167), UInt8(101), UInt8(25), UInt8(3), UInt8(189), UInt8(61), UInt8(1), UInt8(211), UInt8(203)], [UInt8(153), UInt8(249), UInt8(19), UInt8(225), UInt8(94), UInt8(182), UInt8(14), UInt8(209), UInt8(5), UInt8(139)], [UInt8(164), UInt8(75), UInt8(249), UInt8(150), UInt8(62), UInt8(107), UInt8(11), UInt8(213), UInt8(204), UInt8(197)], [UInt8(217), UInt8(218), UInt8(38), UInt8(209), UInt8(193), UInt8(153), UInt8(250), UInt8(162), UInt8(14), UInt8(137)], [UInt8(4), UInt8(229), UInt8(182), UInt8(230), UInt8(176), UInt8(85), UInt8(122), UInt8(27), UInt8(15), UInt8(154)]], var986, var568), var1050, Float32(-60.0), Option<Array<UInt8>>.None, [Int8(-110), Int8(-108), param537, Int8(28), param537, param537, Int8(45), Int8(77), Int8(72), param537])[4]
    } catch (_) { // block id: 1066
        [var1071, var1071, UInt32(244), var1071, var1071, var1071, UInt32(2), UInt32(135), var1071, var1071][2];
        var var1094 : ?Array<UInt8> = ([UInt8(235), UInt8(192), UInt8(Int8(UInt8(0))), UInt8(24), UInt8(5), UInt8(225), UInt8(191), UInt8(55), UInt8(UInt8(UInt8(32))), UInt8(UInt8(235))] as Array<UInt8>);
        (var1090 ?? var1094)
    } finally { // block id: 1112
        let var1121 : Array<UInt8> = Array<UInt8>(10){ i => UInt8(44) };
        var var1147 : ?Array<UInt8> = ([(), (), (), (), (), (), (), (), (), ()] as Array<UInt8>);
        match ([UInt8(0), UInt8(218), UInt8(227), UInt8(225), UInt8(109), UInt8(22), UInt8(78), UInt8(143), UInt8(58), UInt8(226)]) {
            case _ => 
                if (true) { Option<Array<UInt8>>.Some(var1121) } else { var1147 } 
            
        }
    }
}




func func436(param437 : String) : Bool { // block id: 438
    let var457 : Int64 = 45;
    func func448() : Result<Bool> { // block id: 449
        var var474 : Option<Int32> = Option<Int32>.Some(Int32(UInt8(114)));
        let var493 : Range<Int16> = (Int16(43)&127..=Int16(UInt8(48))&127:(66|1));
        var var516 : Int64 = Int64(Int16(UInt16(175)));
        let var532 : UInt8 = UInt8(57);
        if (var326) { // block id: 452
            (UInt64(37)&127..UInt64(31)&127:(var457|1));
            var loopTimeVar467 : Int64 = 0;
            while ((var326) && loopTimeVar467 < 100 ) {
                loopTimeVar467++;
                var463;
                ()
            };
            (var474 ?? var479)
        } else if (false) { // block id: 482
            var loopTimeVar491 : Int64 = 0;
            do {
                loopTimeVar491++;
                if (var326) { (Int16(125)&127..Int16(54)&127:34|1) } else { (Int16(-6)&127..=Int16(-40)&127:9|1) } 
            } while ((false) && loopTimeVar491 < 100 ) ;
            var493;
            var var504 : Array<UInt8> = [UInt8(47), UInt8(236), UInt8(91), UInt8(147), UInt8(12), UInt8(225), UInt8(94), UInt8(234), UInt8(67), UInt8(7)];
            ((Int16(-12)&127..Int16(-47)&127:(-1)|1), var504, var479, UInt16(151), Int32(-124))[2]
        } else { // block id: 510
            try { // block id: 512
                var463;
                var516 = var457
            } finally { // block id: 521
                var var524 : UInt32 = UInt32(82);
                var524 = UInt32(94);
                ();
                ()
            };
            ();
            Int32(var532)
        };
        let var1209 : Int8 = Int8(-51);
        var var1216 : Float32 = Float32(79.0);
        func535(try { // block id: 1153
            let var1163 : UInt64 = UInt64(Int32(UInt8(165)));
            (Int8(-100), Float32(13.0), ((-95)&127..=78&127:(var516|1)), var803, var1163, (Int16(112)&127..=var1170&127:(var619|1)), var1163, (-93.0))
        } finally { // block id: 1179
            var1181
        }[4], Int8(var532) << ((([(), (), (), (), (), (), (), (), (), ()], var1209, var1212, [UInt32(0), UInt32(33), UInt32(16), UInt32(29), UInt32(132), UInt32(20), UInt32(180), UInt32(162), UInt32(84), UInt32(99)], var1216)[1]) & 7), func37);
        var275
    }
;
    let var1256 : Result<Bool> = Result<Bool>.Err(Exception("LangFuzz Inner Exception"));
    let var1283 : Result<Bool> = Result<Bool>.Ok(true);
    func func442() : Result<Bool> { // block id: 443
        let var1226 : Bool = true;
        var var1261 : Bool = (UInt64(165) is Option<Option<Result<Bool>>>);
        [func448(), if (var326) { Result<Bool>.Err(Exception("LangFuzz Inner Exception")) } else { Result<Bool>.Ok(var1226) } , try { // block id: 1229
            Int8(26) << ((Int8(104)) & 7);
            Result<Bool>.Err(Exception("LangFuzz Inner Exception"))
        } finally { // block id: 1234
            var463;
            ();
            var275
        }, (Option<Result<Bool>>.None ?? Result<Bool>.Ok(true)), var275, try { // block id: 1244
            if (true) { var275 } else { Result<Bool>.Ok(true) } 
        } catch (e: Exception) { // block id: 1250
            Result<Bool>.Err(Exception("LangFuzz Inner Exception"))
        } finally { // block id: 1252
            if (var326) { var1256 } else { var275 } 
        }, if (var1261) { var1256 } else { Result<Bool>.Err(Exception("LangFuzz Inner Exception")) } , if (false) { Result<Bool>.Ok(var1261) } else { Result<Bool>.Ok(false) } , try { // block id: 1273
            Result<Bool>.Ok(false)
        } catch (e: Exception) { // block id: 1276
            Option<Option<Array<UInt8>>>.Some(Option<Array<UInt8>>.Some([UInt8(206), UInt8(9), UInt8(211), UInt8(161), UInt8(23), UInt8(179), UInt8(56), UInt8(23), UInt8(36), UInt8(238)]));
            ();
            var1256
        }, var1283][9]
    }
;
    var var1404 : Int32 = Int32(91);
    let var1431 : Int8 = Int8(UInt8(66));
    var var1435 : ?(Range<Int16>*Array<UInt8>*Int32*UInt16*Int32) = (((-3)&127..107&127:120|1) as (Range<Int16>*Array<UInt8>*Int32*UInt16*Int32));
    var loopTimeVar1460 : Int64 = 0;
    do {
        loopTimeVar1460++;
        (var1431, var1435, Int16(-44), (-107), [false, false, true, true, true, true, var326, var326, false, true], [(), (), (), (), (), (), (), (), (), ()])[1];
        (var1455&127..var479&127:((-89)|1))
    } while ((match (func442()) {
        case _ => 
            Aggregate636(namedParam1292 : [UInt32(27), UInt32(226), UInt32(58), UInt32(52), UInt32(26), UInt32(24), UInt32(117), UInt32(111), UInt32(133), UInt32(40)], optionalParam1295 : var1369);
            var var1393 : Int32 = Int32(Int32(Int32(-2)));
            var1393 <<= ((var1393) & 7);
            var326
        
        case _ : Int16 => 
            var1404 <<= ((var1404) & 7);
            var var1410 : Float32 = Float32(Float32(Float32(-81.0)));
            Float32(-5.0) != var1410
        
        case _ => 
            var326
        
        case _ => 
            var1421;
            var810 == var810
        
    }) && loopTimeVar1460 < 100 ) ;
    ((var1470[1] as Array<Array<Unit>>) ?? var1421);
    let var1525 : Int32 = Int32(UInt8(UInt8(UInt8(223))));
    var var1566 : Int16 = Int16(12);
    if (var1491) { (Int8(-116), Option<(Range<Int16>*Array<UInt8>*Int32*UInt16*Int32)>.Some(((var1170&127..=Int16(115)&127:(var457|1)), var1502, var1525, UInt16(170), var1404)), Int16(-5), (-31), [false, var326, var326, var326, true, true, var1542, false, true, true], var1548) } else { (Int8(-120), Option<(Range<Int16>*Array<UInt8>*Int32*UInt16*Int32)>.None, var1170, 4, [true, true, false, false, false, false, false, true, true, false], [(), (), (), (), (), (), (), (), (), ()]) } [2] == (Result<Int16>.Ok(Int16(-57)) ?? var1566)
}





public func func414(param415 : Array<Array<UInt8>>) : Option<Result<Bool>> { // block id: 416
    let var427 : Int8 = Int8(11);
    let var1579 : Array<Int8> = [Int8(87), Int8(-80), Int8(118), Int8(-38), Int8(-20), Int8(16), Int8(126), Int8(34), Int8(-86), Int8(126)];
    let var1597 : Aggregate636 = Aggregate636(namedParam1292 : [UInt32(243), UInt32(UInt16(200)), UInt32(92), UInt32(91), UInt32(UInt8(UInt8(8))), UInt32(Int8(UInt8(226))), UInt32(71), UInt32(UInt8(UInt8(250))), UInt32(5), UInt32(235)], optionalParam1295 : (UInt16(UInt8(UInt8(57))), [false, true, true, false, false, true, false, false, false, false], Int64(UInt32(45))));
    let var1662 : Bool = ((((UInt32(37)&127..UInt32(25)&127:(3|1)), ((UInt16(129), [true, true, false, true, false, true, true, true, true, false], 53) is Array<UInt8>), """
&6b* 
Sk#y<
""", [Int8(-24), Int8(81), Int8(-96), Int8(95), Int8(71), Int8(-82), Int8(-75), Int8(-48), Int8(-12), Int8(26)]) as Option<Result<Bool>>) is Float32);
    let var1688 : (Range<UInt64>*Bool*Range<Int16>*Bool) = ((UInt64(226)&127..UInt64(177)&127:(-28)|1), false, (Int16(-121)&127..Int16(Int8(UInt8(83)))&127:(102|1)), false);
    let var1742 : ?Array<UInt8> = Option<Array<UInt8>>.None;
    func func430(optionalParam431 ! : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]) : Option<Array<UInt8>> { // block id: 433
        var var1651 : Int32 = Int32(116);
        match {
            case (((var1071&127..var1071&127:((-122)|1)), var1491, """
Q>_L^
G4,D\\
""", var1579)[2]|>func436) => 
            let var1592 : UInt32 = UInt32(UInt8(246));
            if (false) { // block id: 1585
                var857 << (((-85)) & 7);
                var1071 **= (var1592 & 3)
            };
            match (var1597) {
                case caseVar1626 => 
                    var629;
                    var1455
                
                case _ => 
                    ();
                    Int32(46)
                
                case caseVar1637 : Array<UInt32> => 
                    var1421;
                    if (true) { Option<Int64>.None } else { Option<Int64>.Some(var619) } ;
                    Int32(-99) | Int32(44)
                
                case _ => 
                    var1651;
                    Int32(-107)
                
            }
            case _ => 
            Int32(UInt16(87))
        };
        var loopTimeVar1710 : Int64 = 0;
        do {
            loopTimeVar1710++;

        } while ((if (var1662) { var1688 } else { ((UInt64(105)&127..UInt64(15)&127:(var619|1)), false, (Int16(30)&127..Int16(19)&127:124|1), false) } [3]) && loopTimeVar1710 < 100 ) ;
        let var1735 : Range<Int64> = ((-8)&127..48&127:(Int64(9)|1));
        match (([UInt32(32), UInt32(173), UInt32(240), UInt32(167), UInt32(26), UInt32(128), UInt32(82), UInt32(190), UInt32(115), UInt32(135)], var1421, var95, [var427, Int8(23), var427, Int8(-45), Int8(-121), var427, Int8(-70), Int8(114), var427, Int8(-50)])[0]) {
            case caseVar1732 : Array<Result<Bool>> => 
                var1735;
                var1742
            
            case caseVar1746 : (Array<Int8>*Rune*Array<Array<UInt8>>*Array<Array<Unit>>*Int64) => 
                var1742
            
            case _ => 
                var463;
                var1742
            
        }
    }
;
    func func420(optionalParam421 ! : Option<Range<Int8>> = Option<Range<Int8>>.None, namedParam423 ! : Int16) : Option<Array<UInt8>> { // block id: 424
        Int8(var427);
        let var1765 : Result<Array<Unit>> = Result<Array<Unit>>.Err(Exception("LangFuzz Inner Exception"));
        let var1779 : Unit = ();
        func430(optionalParam431 : ((Result<Result<Array<Unit>>>.Err(Exception("LangFuzz Inner Exception")) ?? var1765) ?? if (true) { var1548 } else { [(), (), (), var1212, (), var1212, (), var1779, (), ()] } ))
    }
;
    let var1790 : ?(Range<Int16>*Array<UInt8>*Int32*UInt16*Int32) = ((Int8(UInt8(207)), (Option<Range<Int8>>.Some((Int8(65)&127..Int8(-12)&127:(86|1))) as (Range<Int16>*Array<UInt8>*Int32*UInt16*Int32)), Int16(-90), (-58), [false, true, false, true, false, false, false, false, false, false], [(), (), (), (), (), (), (), (), (), ()]) as (Range<Int16>*Array<UInt8>*Int32*UInt16*Int32));
    let var1837 : (Int8*Option<(Range<Int16>*Array<UInt8>*Int32*UInt16*Int32)>*Int16*Int64*Array<Bool>*Array<Unit>) = (Int8(Int8(Int8(1))), (Option<Array<Array<Unit>>>.Some([[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]]) as (Range<Int16>*Array<UInt8>*Int32*UInt16*Int32)), Int16(Int8(-108)), Int64(UInt16(149)), [(Option<Array<UInt8>>.None is Array<UInt32>), (((UInt32(153)&127..=UInt32(172)&127:(-58)|1), false, ###"OiI2:rJ<V_"###, [Int8(93), Int8(67), Int8(-50), Int8(14), Int8(97), Int8(45), Int8(78), Int8(-43), Int8(-60), Int8(16)]) is Option<(Range<Int16>*Array<UInt8>*Int32*UInt16*Int32)>), (Int32(-56) is (Array<UInt32>*Array<Array<Unit>>*Array<Bool>*Array<Int8>)), false, ([(), (), (), (), (), (), (), (), (), ()] is Range<UInt64>), true, true, true, (Result<Array<UInt32>>.Err(Exception("LangFuzz Inner Exception")) is Result<Bool>), ((() as Int64) is (Option<Int32>, Option<Result<Bool>>, Range<Int32>) -> UInt64)], [(), (), (), (), (), (), (), (), (), ()]);
    try { // block id: 418
        func420(namedParam423 : Int16(94));
        var var1816 : Int16 = Int16(UInt16(195));
        var var1828 : Bool = true;
        try { // block id: 1785
            ();
            (var427, var1790, var1816, var619, [var1542, true, false, true, true, var326, var1828, false, var1828, var1491], var1548)
        } catch (e: Exception) { // block id: 1834
            var1212;
            var1837
        } finally { // block id: 1892
            var1837
        };
        var1896 /= Float64((Int32((-68.0))) | 1)
    } catch (e: Exception) { // block id: 1899
        ()
    };
    let var1957 : ?(Range<Int16>*Array<UInt8>*Int32*UInt16*Int32) = ((Int16(Int8(UInt8(51))) as Range<Int8>) as (Range<Int16>*Array<UInt8>*Int32*UInt16*Int32));
    try { // block id: 1902
        Option<Array<Array<UInt8>>>.Some([[UInt8(225), UInt8(120), UInt8(229), UInt8(135), UInt8(45), UInt8(109), UInt8(33), UInt8(74), UInt8(140), UInt8(231)], [UInt8(248), UInt8(31), var1915, var1915, var1915, UInt8(12), UInt8(9), var1915, UInt8(222), UInt8(164)], [UInt8(118), UInt8(143), UInt8(2), UInt8(224), UInt8(222), UInt8(219), UInt8(26), UInt8(107), UInt8(33), UInt8(219)], var1502, [UInt8(137), var1915, UInt8(24), var1915, UInt8(10), UInt8(61), var1915, UInt8(45), UInt8(165), var1915], var1502, [var1915, UInt8(18), UInt8(68), var1915, var1915, var1915, UInt8(157), UInt8(50), UInt8(241), UInt8(210)], [UInt8(151), UInt8(36), UInt8(226), UInt8(221), UInt8(202), UInt8(87), UInt8(124), UInt8(146), UInt8(185), UInt8(99)], [UInt8(21), UInt8(106), UInt8(17), UInt8(63), UInt8(75), UInt8(88), UInt8(79), UInt8(21), UInt8(17), UInt8(100)], var1502]).getOrThrow();
        try { // block id: 1955
            var1957
        } finally { // block id: 1963
            Option<(Range<Int16>*Array<UInt8>*Int32*UInt16*Int32)>.None
        };
        (Result<Bool>.Ok(var326) ?? var1542)
    } catch (e: Exception) { // block id: 1969
        (Result<Option<Array<Array<UInt8>>>>.Err(Exception("LangFuzz Inner Exception")) ?? Option<Array<Array<UInt8>>>.Some(param415));
        let var1983 : (Range<Int16>*Array<UInt8>*Int32*UInt16*Int32) = ((Int16(UInt16(UInt16(110)))&127..=Int16(71)&127:(Int64(Int16(-122))|1)), [UInt8(82), UInt8(217), UInt8(47), UInt8(131), UInt8(9), UInt8(249), UInt8(42), UInt8(115), UInt8(199), UInt8(184)], Int32(28), UInt16(Int16(23)), Int32(-20));
        if (false) { // block id: 1980
            [[UInt8(18), UInt8(11), UInt8(72), UInt8(53), UInt8(60), UInt8(3), UInt8(172), UInt8(44), UInt8(163), UInt8(219)], [UInt8(114), UInt8(165), UInt8(46), UInt8(27), UInt8(172), UInt8(138), UInt8(164), UInt8(204), UInt8(195), UInt8(5)], [UInt8(169), UInt8(115), UInt8(106), UInt8(207), UInt8(94), UInt8(69), UInt8(240), UInt8(83), UInt8(228), UInt8(154)], [UInt8(28), UInt8(144), UInt8(32), UInt8(70), UInt8(254), UInt8(146), UInt8(57), UInt8(44), UInt8(223), UInt8(193)], [UInt8(143), UInt8(8), UInt8(243), UInt8(140), UInt8(163), UInt8(187), UInt8(74), UInt8(37), UInt8(57), UInt8(86)], [UInt8(95), UInt8(160), UInt8(89), UInt8(217), UInt8(151), UInt8(245), UInt8(0), UInt8(209), UInt8(23), UInt8(5)], [UInt8(201), UInt8(109), UInt8(239), UInt8(15), UInt8(190), UInt8(81), UInt8(112), UInt8(34), UInt8(119), UInt8(102)], [UInt8(150), UInt8(205), UInt8(28), UInt8(91), UInt8(89), UInt8(193), UInt8(242), UInt8(71), UInt8(27), UInt8(202)], [UInt8(149), UInt8(15), UInt8(51), UInt8(8), UInt8(170), UInt8(30), UInt8(183), UInt8(38), UInt8(108), UInt8(204)], [UInt8(148), UInt8(177), UInt8(22), UInt8(97), UInt8(245), UInt8(0), UInt8(144), UInt8(133), UInt8(74), UInt8(139)]];
            var1983;
            ()
        };
        (var275 ?? true)
    };
    var var2014 : Int64 = (-54);
    if (true) { (if (try { // block id: 2005
        false || true
    } catch (_) { // block id: 2009
        (var810, var95, var2014);
        var2017;
        var1662
    }) { Option<Result<Bool>>.Some(Result<Bool>.Ok(true)) } else { match (var2025) {
        case (caseVar2050 : Result<Array<Unit>>,caseVar2051 : Range<UInt32>,$var2053 | """
#!Rho
N/Bv~
""" | $var2053,caseVar2056 : (Range<UInt32>*Bool*String*Array<Int8>)) => 
            ();
            ();
            var2061
        
        case _ => 
            if (true) { Option<Range<Int8>>.Some((Int8(3)&127..Int8(-35)&127:25|1)) } else { Option<Range<Int8>>.None } ;
            if (var1662) { Result<Array<Unit>>.Err(Exception("LangFuzz Inner Exception")) } else { Result<Array<Unit>>.Err(Exception("LangFuzz Inner Exception")) } ;
            Option<Result<Bool>>.None
        
    } } ) } else { (var629 ?? if (false) { var2081 } else { var2084 } ) } 
}

func func410(param411 : Range<UInt8>) : Option<Result<Bool>> { // block id: 412
    let var2087 : (Array<Array<UInt8>>) -> Option<Result<Bool>> = func414;
    var2090|>var2087
}

public func func405(param406 : Range<UInt64>) : Array<Array<UInt8>> { // block id: 407
    var var2168 : (Range<UInt8>) -> Option<Result<Bool>> = func410;
    let var2218 : (Range<UInt16>*(Array<Int8>*Rune*Array<Array<UInt8>>*Array<Array<Unit>>*Int64)*Float32*Float32*Option<Array<UInt8>>*Array<Int8>) = ((UInt16(238)&127..UInt16(Int16(25))&127:((-77)|1)), ([Int8(-107), Int8(115), Int8(104), Int8(-59), Int8(-5), Int8(-70), Int8(32), Int8(123), Int8(Int8(-37)), Int8(UInt8(178))], 'N', [[UInt8(86), UInt8(188), UInt8(94), UInt8(251), UInt8(111), UInt8(89), UInt8(76), UInt8(37), UInt8(211), UInt8(81)], [UInt8(57), UInt8(215), UInt8(190), UInt8(193), UInt8(138), UInt8(232), UInt8(230), UInt8(252), UInt8(163), UInt8(140)], [UInt8(85), UInt8(131), UInt8(216), UInt8(120), UInt8(189), UInt8(251), UInt8(122), UInt8(235), UInt8(59), UInt8(144)], [UInt8(4), UInt8(30), UInt8(52), UInt8(72), UInt8(222), UInt8(224), UInt8(248), UInt8(45), UInt8(152), UInt8(217)], [UInt8(82), UInt8(165), UInt8(199), UInt8(136), UInt8(149), UInt8(106), UInt8(107), UInt8(124), UInt8(45), UInt8(41)], [UInt8(10), UInt8(126), UInt8(92), UInt8(236), UInt8(87), UInt8(123), UInt8(131), UInt8(243), UInt8(177), UInt8(106)], [UInt8(150), UInt8(229), UInt8(195), UInt8(140), UInt8(20), UInt8(109), UInt8(87), UInt8(58), UInt8(67), UInt8(93)], [UInt8(137), UInt8(167), UInt8(248), UInt8(114), UInt8(157), UInt8(203), UInt8(209), UInt8(153), UInt8(78), UInt8(139)], [UInt8(19), UInt8(48), UInt8(227), UInt8(25), UInt8(30), UInt8(112), UInt8(230), UInt8(76), UInt8(199), UInt8(201)], [UInt8(190), UInt8(51), UInt8(35), UInt8(38), UInt8(100), UInt8(105), UInt8(92), UInt8(163), UInt8(47), UInt8(7)]], [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], Int64(UInt64(21))), Float32(36.0), Float32(Float32(Float32(-74.0))), ((UInt16(146), [true, true, false, true, false, true, false, true, true, true], (-69)) as Array<UInt8>), [Int8(69), Int8(-72), Int8(-8), Int8(-102), Int8(-41), Int8(45), Int8(19), Int8(-43), Int8(58), Int8(-99)]);
    let var2263 : Result<Option<(Range<Int16>*Array<UInt8>*Int32*UInt16*Int32)>> = Result<Option<(Range<Int16>*Array<UInt8>*Int32*UInt16*Int32)>>.Ok(Option<(Range<Int16>*Array<UInt8>*Int32*UInt16*Int32)>.None);
    match ((var2171|>var2168)) {
        case _ => 
            var2180;
            if (var1542) { [UInt8(253), UInt8(24), var1915, var1915, var1915, var1915, var1915, UInt8(242), var1915, UInt8(192)] } else { [UInt8(126), UInt8(143), UInt8(224), UInt8(216), UInt8(213), UInt8(172), UInt8(198), UInt8(246), UInt8(73), UInt8(162)] } 
        
        case caseVar2198 => 
            ();
            [UInt8(122), UInt8(171), var1915, UInt8(140), var1915, UInt8(22), UInt8(59), UInt8(54), var1915, var1915]
        
        case caseVar2214 : Array<Result<Bool>> => 
            var1470;
            var2218;
            [UInt8(108), UInt8(167), UInt8(129), UInt8(55), UInt8(10), UInt8(99), UInt8(47), UInt8(22), UInt8(131), UInt8(227)]
        
        case caseVar2257 => 
            if (var326) { Result<Option<(Range<Int16>*Array<UInt8>*Int32*UInt16*Int32)>>.Err(Exception("LangFuzz Inner Exception")) } else { var2263 } ;
            var810 ^= var810;
            if (true) { var1502 } else { var1502 } 
        
        case _ => 
            var1502
        
    };
    var var2373 : ?Array<UInt8> = Option<Array<UInt8>>.Some([UInt8(13), UInt8(175), UInt8(115), UInt8(11), UInt8(37), UInt8(91), UInt8(56), UInt8(156), UInt8(247), UInt8(192)]);
    var var2378 : Array<Int8> = Array<Int8>(10){ i => Int8(-26) };
    (try { // block id: 2278
        var var2282 : Int8 = Int8(63);
        ([var2282, Int8(51), Int8(80), var2282, Int8(37), var2282, Int8(30), Int8(16), Int8(81), var2282], var866, [[UInt8(76), UInt8(199), UInt8(230), UInt8(2), UInt8(137), UInt8(202), UInt8(135), UInt8(217), UInt8(143), UInt8(157)], [UInt8(45), UInt8(120), UInt8(184), UInt8(6), UInt8(170), UInt8(58), UInt8(12), UInt8(36), UInt8(94), UInt8(85)], [UInt8(36), UInt8(138), UInt8(120), UInt8(236), UInt8(253), UInt8(77), UInt8(151), UInt8(184), UInt8(80), UInt8(75)], [UInt8(223), UInt8(35), UInt8(184), UInt8(193), UInt8(247), UInt8(137), UInt8(32), UInt8(207), UInt8(188), UInt8(80)], [UInt8(190), UInt8(165), UInt8(157), UInt8(176), UInt8(206), UInt8(230), UInt8(137), UInt8(66), UInt8(82), UInt8(0)], [UInt8(210), UInt8(146), UInt8(195), UInt8(138), UInt8(12), UInt8(166), UInt8(66), UInt8(143), UInt8(199), UInt8(58)], [UInt8(71), UInt8(241), UInt8(43), UInt8(55), UInt8(7), UInt8(114), UInt8(105), UInt8(153), UInt8(253), UInt8(103)], [UInt8(41), UInt8(160), UInt8(99), UInt8(181), UInt8(11), UInt8(27), UInt8(202), UInt8(204), UInt8(176), UInt8(254)], [UInt8(48), UInt8(8), UInt8(211), UInt8(135), UInt8(97), UInt8(230), UInt8(24), UInt8(213), UInt8(223), UInt8(242)], [UInt8(207), UInt8(87), UInt8(152), UInt8(183), UInt8(86), UInt8(133), UInt8(199), UInt8(53), UInt8(205), UInt8(170)]], var1421, 77);
        var2298
    } catch (e: Exception) { // block id: 2301
        let var2337 : Array<UInt8> = [UInt8(122), UInt8(0), UInt8(209), UInt8(Int8(-52)), UInt8(0), UInt8(UInt8(UInt8(UInt8(47)))), UInt8(58), UInt8(31), UInt8(Int8(39)), UInt8(Int8(UInt8(16)))];
        Option<Array<Array<UInt8>>>.Some([[UInt8(136), UInt8(83), UInt8(193), UInt8(3), UInt8(195), UInt8(198), UInt8(65), UInt8(90), UInt8(70), UInt8(11)], var1502, var1502, [UInt8(150), UInt8(96), UInt8(143), UInt8(47), UInt8(113), UInt8(6), UInt8(139), UInt8(30), UInt8(98), UInt8(120)], [UInt8(172), UInt8(41), var1915, var2313, UInt8(228), var1915, var2313, var1915, var2313, UInt8(202)], [UInt8(141), UInt8(228), UInt8(213), UInt8(40), UInt8(162), UInt8(222), UInt8(50), UInt8(161), UInt8(202), UInt8(95)], [var1915, var1915, var2313, UInt8(162), var2328, UInt8(2), UInt8(83), var2313, UInt8(161), var2313], var2337, [var2328, UInt8(164), UInt8(93), var2328, UInt8(118), UInt8(4), UInt8(249), var2313, UInt8(123), var2328], var2337])
    } finally { // block id: 2368
        if (var1491) { Option<Option<Array<UInt8>>>.Some(var2373) } else { var1090 } ;
        var2378;
        var2298
    } ?? if (false) { [[UInt8(225), UInt8(228), UInt8(16), UInt8(59), UInt8(238), UInt8(73), UInt8(236), UInt8(76), UInt8(19), UInt8(231)], [UInt8(53), UInt8(121), UInt8(0), UInt8(7), UInt8(93), UInt8(5), UInt8(58), UInt8(82), UInt8(164), UInt8(84)], [UInt8(94), UInt8(117), UInt8(148), UInt8(47), UInt8(161), UInt8(94), UInt8(164), UInt8(200), UInt8(155), UInt8(46)], [UInt8(228), UInt8(227), UInt8(178), UInt8(221), UInt8(191), UInt8(196), UInt8(128), UInt8(117), UInt8(91), UInt8(32)], [UInt8(101), UInt8(89), UInt8(86), UInt8(11), UInt8(94), UInt8(71), UInt8(168), UInt8(76), UInt8(76), UInt8(200)], [UInt8(186), UInt8(76), UInt8(126), UInt8(207), UInt8(188), UInt8(93), UInt8(163), UInt8(117), UInt8(112), UInt8(11)], [UInt8(3), UInt8(141), UInt8(92), UInt8(50), UInt8(72), UInt8(234), UInt8(166), UInt8(123), UInt8(48), UInt8(52)], [UInt8(243), UInt8(123), UInt8(75), UInt8(162), UInt8(188), UInt8(136), UInt8(75), UInt8(130), UInt8(71), UInt8(170)], [UInt8(252), UInt8(179), UInt8(24), UInt8(188), UInt8(131), UInt8(22), UInt8(28), UInt8(20), UInt8(240), UInt8(27)], [UInt8(250), UInt8(151), UInt8(218), UInt8(26), UInt8(249), UInt8(18), UInt8(248), UInt8(5), UInt8(224), UInt8(230)]] } else { (if (true) { [[UInt8(251), UInt8(216), UInt8(99), UInt8(252), UInt8(142), UInt8(115), UInt8(161), UInt8(7), UInt8(76), UInt8(232)], [UInt8(62), UInt8(66), UInt8(113), UInt8(227), UInt8(224), UInt8(200), UInt8(29), UInt8(179), UInt8(3), UInt8(48)], [UInt8(170), UInt8(82), UInt8(104), UInt8(45), UInt8(68), UInt8(225), UInt8(205), UInt8(53), UInt8(165), UInt8(51)], [UInt8(79), UInt8(249), UInt8(215), UInt8(13), UInt8(36), UInt8(2), UInt8(117), UInt8(138), UInt8(109), UInt8(7)], [UInt8(104), UInt8(36), UInt8(54), UInt8(245), UInt8(162), UInt8(143), UInt8(193), UInt8(49), UInt8(190), UInt8(133)], [UInt8(236), UInt8(210), UInt8(192), UInt8(252), UInt8(58), UInt8(217), UInt8(222), UInt8(89), UInt8(171), UInt8(181)], [UInt8(67), UInt8(52), UInt8(171), UInt8(206), UInt8(43), UInt8(10), UInt8(163), UInt8(218), UInt8(86), UInt8(32)], [UInt8(74), UInt8(248), UInt8(34), UInt8(113), UInt8(240), UInt8(47), UInt8(129), UInt8(56), UInt8(48), UInt8(89)], [UInt8(91), UInt8(75), UInt8(191), UInt8(190), UInt8(250), UInt8(95), UInt8(218), UInt8(30), UInt8(213), UInt8(178)], [UInt8(204), UInt8(17), UInt8(32), UInt8(74), UInt8(47), UInt8(159), UInt8(201), UInt8(98), UInt8(167), UInt8(73)]] } else { [[UInt8(146), UInt8(220), UInt8(137), UInt8(233), UInt8(77), UInt8(10), UInt8(11), UInt8(69), UInt8(231), UInt8(137)], [UInt8(207), UInt8(63), UInt8(137), UInt8(135), UInt8(228), UInt8(35), UInt8(142), UInt8(208), UInt8(78), UInt8(172)], [UInt8(226), UInt8(198), UInt8(196), UInt8(57), UInt8(126), UInt8(46), UInt8(130), UInt8(5), UInt8(125), UInt8(63)], [UInt8(160), UInt8(55), UInt8(204), UInt8(111), UInt8(228), UInt8(48), UInt8(41), UInt8(78), UInt8(134), UInt8(84)], [UInt8(56), UInt8(170), UInt8(210), UInt8(109), UInt8(180), UInt8(153), UInt8(155), UInt8(139), UInt8(135), UInt8(65)], [UInt8(159), UInt8(96), UInt8(231), UInt8(151), UInt8(12), UInt8(71), UInt8(47), UInt8(174), UInt8(205), UInt8(231)], [UInt8(194), UInt8(134), UInt8(98), UInt8(198), UInt8(126), UInt8(201), UInt8(215), UInt8(241), UInt8(64), UInt8(224)], [UInt8(24), UInt8(210), UInt8(109), UInt8(237), UInt8(121), UInt8(143), UInt8(202), UInt8(203), UInt8(229), UInt8(137)], [UInt8(120), UInt8(140), UInt8(67), UInt8(208), UInt8(149), UInt8(168), UInt8(251), UInt8(238), UInt8(78), UInt8(16)], [UInt8(15), UInt8(49), UInt8(169), UInt8(37), UInt8(200), UInt8(175), UInt8(8), UInt8(234), UInt8(114), UInt8(221)]] } ) } )
}


func func296(param297 : Range<UInt64>) : UInt8 { // block id: 298
    let var321 : Range<UInt8> = (UInt8(107)&127..UInt8(191)&127:(-124)|1);
    let var386 : Int64 = Int64(Int16(-126));
    let var2404 : (Range<UInt64>) -> Array<Array<UInt8>> = func405;
    func func329(optionalParam330 ! : Range<Int8> = (Int8(Int8(-33))&127..=Int8(-35)&127:(Int64(Int8(UInt8(138)))|1)), optionalParam338 ! : UInt16 = UInt16(230), namedParam340 ! : Float64) : Array<Array<UInt8>> { // block id: 341
        let var344 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
        var344[0];
        try { // block id: 348
            func233(UInt8(64));
            var var352 : Class241 = Class241();
            var352
        } catch (_) { // block id: 354
            Class241()
        } finally { // block id: 356
            let var359 : UInt8 = UInt8(Int8(61));
            func233(var359);
            var var364 : Int16 = Int16(Int16(-96));
            (var364 as Range<Int8>);
            match (Option<Result<Bool>>.Some(Result<Bool>.Err(Exception("LangFuzz Inner Exception")))) {
                case caseVar372 => 
                    var var376 : UInt8 = UInt8(Int8(50));
                    var376 += UInt8(117);
                    if (true) { (var376&127..var359&127:(var386|1)) } else { (UInt8(68)&127..UInt8(67)&127:126|1) } ;
                    if (var326) { Class241() } else { Class241() } 
                
                case _ => 
                    if (var326) { Class241() } else { Class241() } 
                
                case _ => 
                    Class241()
                
            }
        };
        let var2410 : Int8 = Int8(Int8(Int8(-110)));
        var var2438 : Unit = ();
        var var2516 : Result<Range<UInt64>> = Result<Range<UInt64>>.Err(Exception("LangFuzz Inner Exception"));
        if (match ((var2410, var2415, Int16(106), 50, [var1491, var326, var326, true, var1491, var326, var1542, var1542, var326, var1491], [var463, var2434, (), var2438, (), (), (), (), (), var2446])) {
            case _ : Option<Range<Int8>> => 
                let var2454 : Option<Array<Array<Unit>>> = Option<Array<Array<Unit>>>.None;
                if (var1542) { var2454 } else { var2454 } ;
                ();
                false
            
            case ($var2410,_ : (Range<UInt16>*(Array<Int8>*Rune*Array<Array<UInt8>>*Array<Array<Unit>>*Int64)*Float32*Float32*Option<Array<UInt8>>*Array<Int8>),$var2463 | $var2463 | 102 | $var2463,$var386,_,caseVar2471 : String) => 
                var2434;
                var1542
            
            case caseVar2477 : (Array<Unit>*Int8*Unit*Array<UInt32>*Float32) => 
                true
            
            case (-117 | $var2410 | 79 | 0,_,-10 | -10 | $var2463 | $var2463,_,_,_) => 
                ();
                ();
                false && false
            
            case _ => 
                var var2498 : Result<Option<(Range<Int16>*Array<UInt8>*Int32*UInt16*Int32)>> = Result<Option<(Range<Int16>*Array<UInt8>*Int32*UInt16*Int32)>>.Err(Exception("LangFuzz Inner Exception"));
                if (false) { Result<Option<(Range<Int16>*Array<UInt8>*Int32*UInt16*Int32)>>.Ok(Option<(Range<Int16>*Array<UInt8>*Int32*UInt16*Int32)>.None) } else { var2498 } ;
                !var326
            
        }) { try { // block id: 2503
            if (var1491) { (UInt64(247)&127..=UInt64(4)&127:110|1) } else { param297 } 
        } finally { // block id: 2508
            (UInt64(175)&127..UInt64(78)&127:(-87)|1)
        } } else { (var2516 ?? (var803&127..var803&127:(var857|1))) } |>var2404
    }
;
    let var2524 : Int8 = Int8(33);
    let var2565 : UInt8 = UInt8(44);
    let var2602 : UInt8 = UInt8(Int8(UInt8(71)));
    let var2607 : UInt8 = UInt8(132);
    func func308(optionalParam309 ! : Range<Int64> = ((-17)&127..(-64)&127:(Int64(UInt32(178))|1))) : Array<UInt8> { // block id: 315
        var var2548 : UInt8 = UInt8(Int8(Int8(Int8(UInt8(148)))));
        if (match (var321) {
            case _ => 
                var326
            
        }) { func329(optionalParam330 : (var2524&127..=Int8(-20)&127:((-105)|1)), namedParam340 : var1896) } else { (Option<Array<Array<UInt8>>>.Some([[UInt8(242), UInt8(246), UInt8(29), UInt8(158), UInt8(118), UInt8(239), UInt8(112), UInt8(132), UInt8(33), UInt8(54)], [UInt8(176), var1915, UInt8(124), var2313, var1915, UInt8(117), var1915, UInt8(155), var1915, UInt8(153)], [var1915, var2313, var2548, UInt8(218), UInt8(168), UInt8(244), UInt8(95), UInt8(147), var2548, UInt8(227)], [UInt8(23), UInt8(51), UInt8(172), UInt8(73), UInt8(105), UInt8(110), UInt8(25), UInt8(164), UInt8(90), UInt8(106)], [var1915, var2565, var2565, UInt8(43), var2548, UInt8(0), var2565, var2565, UInt8(102), UInt8(55)], [var1915, UInt8(166), var2565, var2313, var2313, var2313, UInt8(29), UInt8(171), var1915, var2548], var1502, [UInt8(116), var2565, UInt8(20), UInt8(34), var2548, UInt8(90), var2565, var2565, UInt8(137), UInt8(195)], [var2313, var2565, var2602, var2607, var2548, UInt8(38), var2328, UInt8(176), var2328, UInt8(84)], [UInt8(63), UInt8(205), UInt8(127), UInt8(131), UInt8(144), UInt8(150), UInt8(134), UInt8(189), UInt8(227), UInt8(252)]]) ?? var2090) } [8];
        [UInt8(32), UInt8(147), UInt8(24), UInt8(253), UInt8(187), UInt8(184), UInt8(16), UInt8(150), UInt8(4), UInt8(216)]
    }
;
    var var2620 : Range<Int64> = (Int64(64)&127..=Int64(UInt16(Int16(Int8(-66))))&127:(114|1));
    (Option<Array<UInt8>>.None ?? func308(optionalParam309 : var2620))[0]
}

func func287(param288 : Range<Int8>) : UInt8 { // block id: 289
    let var2633 : UInt64 = UInt64(228);
    let var2769 : Int8 = Int8(-107);
    let var2784 : UInt64 = UInt64(UInt8(Int8(Int8(72))));
    func func292() : Bool { // block id: 293
        func233(((var2633&127..=UInt64(152)&127:(var619|1))|>func296));
        match (try { // block id: 2639
                ();
                var866
            } finally { // block id: 2642
                if (var326) { var866 } else { 's' } 
            }) {
            case caseVar2649 => 
                var2652;
                UInt8(125)
            
            case caseVar2657 : Range<Int32> => 
                var2434;
                var1915
            
            case $var866 | $var866 | $var2666 => 
                UInt8(74) & UInt8(171)
            
            case $var2666 => 
                param288;
                var1212;
                UInt8(33) - var2328
            
            case _ => 
                var2017;
                -UInt8(149)
            
        };
        let var2717 : UInt8 = UInt8(176);
        try { // block id: 2687
            let var2691 : Rune = 'L';
            ([Int8(100), Int8(29), Int8(-46), Int8(-14), Int8(-128), Int8(115), Int8(-80), Int8(3), Int8(100), Int8(54)], var2691, [var1502, var1502, [var2313, UInt8(55), var2313, UInt8(125), var2328, UInt8(10), var2328, var2328, UInt8(60), UInt8(241)], [UInt8(20), UInt8(21), UInt8(0), UInt8(48), UInt8(106), UInt8(20), UInt8(52), UInt8(71), UInt8(73), UInt8(143)], var1502, [UInt8(149), UInt8(76), UInt8(51), UInt8(243), UInt8(157), UInt8(188), UInt8(218), UInt8(7), UInt8(137), UInt8(247)], [var1915, var1915, var2313, var1915, UInt8(182), var2717, var1915, UInt8(22), UInt8(218), UInt8(242)], [var2313, var2717, var2313, var2313, UInt8(61), var2328, UInt8(219), UInt8(125), var2328, var1915], var1502, [UInt8(224), var2313, UInt8(232), UInt8(2), var2328, UInt8(146), UInt8(52), UInt8(171), UInt8(230), var2717]], var1421, var2748);
            var var2757 : Int32 = Int32(2);
            var var2763 : Int8 = Int8(31);
            if (var1491) { // block id: 2754
                var2757--;
                ([Int8(-108), var2763, var2763, var2763, var2763, var2769, var2769, Int8(-25), var2763, Int8(-119)], var2776, var2090, [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], 85);
                var803 > var2784
            } else { // block id: 2789
                var326
            }
        } finally { // block id: 2791
            var1491
        }
    }
;
    var loopTimeVar2816 : Int64 = 0;
    do {
        loopTimeVar2816++;
        try { // block id: 2795
            (var1170&127..Int16(24)&127:((-94)|1));
            var857++
        } finally { // block id: 2802

        };
        var loopTimeVar2814 : Int64 = 0;
        do {
            loopTimeVar2814++;
            if (var1542) { Option<Int64>.Some((-45)) } else { var2811 } 
        } while ((true) && loopTimeVar2814 < 100 ) 
    } while ((func292()) && loopTimeVar2816 < 100 ) ;
    try { // block id: 2818
        UInt8(var1915)
    } finally { // block id: 2821
        ();
        if (var326) { Option<Array<Array<UInt8>>>.None } else { var2298 } ;
        var2313
    }
}



public func func283(param284 : UInt16) : Unit { // block id: 285
    let var2831 : Int8 = Int8(Int8(UInt8(Int8(UInt8(45)))));
    (var2831&127..=(Result<Int8>.Err(Exception("LangFuzz Inner Exception")) ?? Int8(-39))&127:(-var619|1))|>func287;
    var var2857 : Result<UInt64> = Result<UInt64>.Err(Exception("LangFuzz Inner Exception"));
    (try { // block id: 2852
        var1915 % ((UInt8(8)) | 1);
        var2857
    } catch (_) { // block id: 2859
        var803 /= ((var803) | 1);
        if (true) { var2857 } else { Result<UInt64>.Ok(UInt64(248)) } 
    } ?? UInt64(81));
    var loopTimeVar2891 : Int64 = 0;
    while (((try { // block id: 2872
        ();
        if (var326) { var275 } else { Result<Bool>.Ok(var326) } 
    } finally { // block id: 2879
        Int32(45);
        var1212;
        Result<Bool>.Ok(true)
    } ?? (Result<Bool>.Ok(var1491) ?? false))) && loopTimeVar2891 < 100 ) {
        loopTimeVar2891++;
        ()
    }
}

public func func257(param258 : Unit) : Bool { // block id: 259
    if (((Option<Result<Bool>>.Some(Result<Bool>.Ok(true)) ?? var275) ?? false)) { // block id: 278
        UInt8(20)|>func233;
        var var2893 : (UInt16) -> Unit = func283;
        var810|>var2893
    };
    match ((if (var1491) { // block id: 2900
            var1170 / ((Int16(-35)) | 1)
        } else { // block id: 2904
            var1170
        } is () -> Result<Bool>)) {
        case $var1491 | true => 
            ();
            var2434;
            true
        
        case false | $var2916 => 
            var1896 > var2652
        
        case _ => 
            [[UInt8(76), UInt8(56), UInt8(156), UInt8(136), UInt8(19), UInt8(185), UInt8(229), UInt8(231), UInt8(47), UInt8(80)], [UInt8(243), UInt8(96), UInt8(21), UInt8(94), UInt8(29), UInt8(158), UInt8(122), UInt8(113), UInt8(217), UInt8(194)], [UInt8(252), UInt8(236), UInt8(11), UInt8(144), UInt8(163), UInt8(223), UInt8(218), UInt8(166), UInt8(90), UInt8(89)], [UInt8(253), UInt8(96), UInt8(112), UInt8(180), UInt8(27), UInt8(185), UInt8(29), UInt8(77), UInt8(112), UInt8(218)], [UInt8(52), UInt8(105), UInt8(158), UInt8(110), UInt8(194), UInt8(145), UInt8(155), UInt8(59), UInt8(14), UInt8(80)], [UInt8(47), UInt8(23), UInt8(196), UInt8(15), UInt8(7), UInt8(6), UInt8(183), UInt8(164), UInt8(73), UInt8(243)], [UInt8(190), UInt8(233), UInt8(229), UInt8(214), UInt8(21), UInt8(172), UInt8(11), UInt8(168), UInt8(183), UInt8(86)], [UInt8(219), UInt8(171), UInt8(221), UInt8(32), UInt8(79), UInt8(120), UInt8(163), UInt8(17), UInt8(211), UInt8(83)], [UInt8(71), UInt8(192), UInt8(122), UInt8(180), UInt8(131), UInt8(41), UInt8(93), UInt8(3), UInt8(58), UInt8(124)], [UInt8(62), UInt8(63), UInt8(76), UInt8(9), UInt8(221), UInt8(138), UInt8(118), UInt8(240), UInt8(45), UInt8(150)]];
            true
        
    }
}

public func func245(param246 : Array<Int8>, optionalParam247 ! : (Unit, Range<Int64>) -> Rune = func37, namedParam252 ! : Float32, namedParam253 ! : Bool) : Class241 { // block id: 254
    let var2931 : (Unit) -> Bool = func257;
    var loopTimeVar2938 : Int64 = 0;
    do {
        loopTimeVar2938++;

    } while ((((var803 |= UInt64(35))|>var2931)) && loopTimeVar2938 < 100 ) ;
    var730
}

public func func228(param229 : Int8, param230 : Range<Int64>) : Array<Int8> { // block id: 231
    var2313|>{ lambdaParameter238 : UInt8 => let var2942 : (Unit, Range<Int64>) -> Rune = func37; func245([Int8(-54), Int8(43), Int8(28), Int8(108), Int8(20), Int8(-53), Int8(-80), Int8(0), Int8(-39), Int8(82)], optionalParam247 : var2942, namedParam252 : match (Result<Int8>.Ok(Int8(-14))) {
        case caseVar2949 => 
            var1170 &= Int16(7);
            var2955
        
        case _ => 
            var2955 * Float32(-27.0)
        
        case _ => 
            Float32(56.0) / Float32((Int32(Float32(125.0))) | 1)
        
    }, namedParam253 : true).var2970 };
    if ((try { // block id: 2976
        var1212;
        if (var326) { var275 } else { var275 } 
    } catch (_) { // block id: 2982
        var1170 <<= ((Int16(74)) & 7);
        UInt64(142);
        var275
    } ?? if (var1491) { // block id: 2990
        false
    } else if (var1542) { // block id: 2993
        var463;
        var2996;
        Int32(-97) <= var479
    } else { // block id: 3139
        ([Int8(-114), Int8(9), Int8(-105), Int8(20), Int8(-104), Int8(49), Int8(-73), Int8(70), Int8(24), Int8(80)], var866, var2090, [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], var3146);
        var326
    })) { var3150 } else { try { // block id: 3163
        var3150
    } finally { // block id: 3165
        var3150
    } } ;
    [Int8(42), Int8(-2), Int8(103), Int8(-46), Int8(-110), Int8(-88), Int8(90), Int8(122), Int8(-8), Int8(-124)]
}

public func func145(param146 : Int16) : Option<Range<Int8>> { // block id: 147
    let var216 : (Array<Unit>) -> Float64 = func168;
    (if ((() is Aggregate121<Result<Bool>, Bool>)) { (if (var158) { Option<Float64>.Some(var62) } else { Option<Float64>.None } ) } else { (var165 as Float64) }  ?? ([(), (), (), (), (), (), (), (), (), ()]|>var216));
    var loopTimeVar223 : Int64 = 0;
    while ((var158) && loopTimeVar223 < 100 ) {
        loopTimeVar223++;

    };
    (func228(Int8(80), (var857&127..=var3172&127:(73|1)))[5] as Range<Int8>)
}


public func func33(param34 : Unit) : Array<Unit> { // block id: 35
    var var85 : Result<Unit> = Result<Unit>.Err(Exception("LangFuzz Inner Exception"));
    func37((if (true) { var85 } else { Result<Unit>.Ok(param34) }  ?? param34));
    param34;
    let var141 : Bool = true;
    let var3181 : ?Range<Int8> = (UInt32(UInt32(UInt8(8))) as Range<Int8>);
    let var3250 : ?Int8 = (((UInt16(197)&127..UInt16(212)&127:56|1), ([Int8(20), Int8(37), Int8(98), Int8(-57), Int8(84), Int8(-90), Int8(-117), Int8(28), Int8(105), Int8(35)], '8', [[UInt8(243), UInt8(49), UInt8(38), UInt8(221), UInt8(46), UInt8(183), UInt8(17), UInt8(181), UInt8(131), UInt8(233)], [UInt8(5), UInt8(134), UInt8(167), UInt8(214), UInt8(229), UInt8(139), UInt8(198), UInt8(106), UInt8(142), UInt8(80)], [UInt8(205), UInt8(154), UInt8(67), UInt8(31), UInt8(248), UInt8(205), UInt8(145), UInt8(36), UInt8(96), UInt8(228)], [UInt8(222), UInt8(20), UInt8(173), UInt8(215), UInt8(157), UInt8(182), UInt8(68), UInt8(112), UInt8(211), UInt8(230)], [UInt8(214), UInt8(177), UInt8(229), UInt8(221), UInt8(30), UInt8(107), UInt8(194), UInt8(215), UInt8(84), UInt8(167)], [UInt8(144), UInt8(220), UInt8(176), UInt8(72), UInt8(215), UInt8(83), UInt8(253), UInt8(94), UInt8(119), UInt8(84)], [UInt8(254), UInt8(227), UInt8(86), UInt8(22), UInt8(29), UInt8(14), UInt8(140), UInt8(121), UInt8(54), UInt8(251)], [UInt8(157), UInt8(172), UInt8(190), UInt8(197), UInt8(244), UInt8(159), UInt8(101), UInt8(231), UInt8(29), UInt8(232)], [UInt8(214), UInt8(35), UInt8(77), UInt8(132), UInt8(196), UInt8(211), UInt8(8), UInt8(233), UInt8(61), UInt8(24)], [UInt8(175), UInt8(28), UInt8(87), UInt8(144), UInt8(13), UInt8(154), UInt8(185), UInt8(223), UInt8(32), UInt8(242)]], [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], Int64(Int8(48))), Float32(Float32(Float32(12.0))), Float32(54.0), Option<Array<UInt8>>.None, [Int8(Int8(-8)), Int8(UInt8(184)), Int8(UInt8(145)), Int8(UInt8(168)), Int8(-1), Int8(Int8(-116)), Int8(17), Int8(117), Int8(Int8(4)), Int8(-110)]) as Int8);
    func func115(param116 : Array<Bool>, optionalParam117 ! : Unit = ()) : Option<Rune> { // block id: 119
        Aggregate121<Result<Bool>, Bool>.var126;
        var var3177 : (Int16) -> Option<Range<Int8>> = func145;
        (if ((Result<Bool>.Ok(var141) ?? false)) { (Int16(112)|>var3177) } else { var3181 }  ?? if ((var1896 >= var62)) { match (var1421) {
            case _ : Range<Int16> => 
                let var3203 : Int8 = Int8(Int8(-42));
                if (true) { (Int8(65)&127..=Int8(-59)&127:(var3172|1)) } else { (var3203&127..=var3203&127:(var3172|1)) } 
            
            case _ => 
                [[UInt8(3), UInt8(41), UInt8(168), UInt8(223), UInt8(204), UInt8(102), UInt8(245), UInt8(180), UInt8(67), UInt8(215)], [UInt8(77), UInt8(254), UInt8(63), UInt8(119), UInt8(14), UInt8(254), UInt8(145), UInt8(240), UInt8(220), UInt8(168)], [UInt8(195), UInt8(208), UInt8(250), UInt8(162), UInt8(234), UInt8(227), UInt8(222), UInt8(19), UInt8(62), UInt8(80)], [UInt8(75), UInt8(251), UInt8(192), UInt8(111), UInt8(88), UInt8(162), UInt8(47), UInt8(161), UInt8(156), UInt8(249)], [UInt8(93), UInt8(4), UInt8(184), UInt8(164), UInt8(139), UInt8(232), UInt8(189), UInt8(93), UInt8(188), UInt8(191)], [UInt8(94), UInt8(209), UInt8(126), UInt8(249), UInt8(6), UInt8(107), UInt8(213), UInt8(229), UInt8(246), UInt8(75)], [UInt8(126), UInt8(166), UInt8(220), UInt8(48), UInt8(14), UInt8(109), UInt8(246), UInt8(168), UInt8(172), UInt8(201)], [UInt8(121), UInt8(137), UInt8(10), UInt8(47), UInt8(20), UInt8(165), UInt8(16), UInt8(106), UInt8(112), UInt8(147)], [UInt8(235), UInt8(129), UInt8(246), UInt8(110), UInt8(81), UInt8(207), UInt8(157), UInt8(101), UInt8(253), UInt8(187)], [UInt8(184), UInt8(212), UInt8(58), UInt8(115), UInt8(63), UInt8(156), UInt8(46), UInt8(96), UInt8(127), UInt8(185)]];
                (UInt16(75)&127..=UInt16(231)&127:(var857|1));
                (Int8(76)&127..=Int8(-63)&127:(-66)|1)
            
            case caseVar3219 => 
                UInt8(216);
                param34;
                (Int8(16)&127..=Int8(48)&127:(-84)|1)
            
            case _ => 
                Option<Float64>.Some(var1896);
                var2017;
                var3230
            
        } } else { match (true) {
            case _ => 
                (Int8(-114)&127..=Int8(-47)&127:(-94)|1)
            
        } } );
        ((Int8(Int8(-97)) / (((var3250 ?? var3374)) | 1)) as Rune)
    }
;
    if (var95[4]) { match (func115([var158, false, false, var158, var326, var326, var141, var3385, var3399, false])) {
        case _ : Range<Int16> => 
            var2446;
            if (var1491) { [(), (), (), (), (), (), (), var3418, var3421, var3424] } else { [(), (), (), (), (), (), (), (), (), ()] } 
        
        case caseVar3429 : Range<Int8> => 
            var2017;
            var1421;
            var1548
        
        case caseVar3436 : Result<Range<UInt64>> => 
            var2434;
            var var3445 : Unit = ();
            if (var1542) { [(), var3418, var3445, (), (), (), var2446, param34, (), param34] } else { [(), (), var3418, (), var3424, var3424, var1212, (), (), ()] } 
        
        case caseVar3467 : Int64 => 
            var1896 -= var1896;
            [(), (), (), (), (), (), (), (), (), ()]
        
        case _ => 
            var var3477 : Float32 = Float32(-117.0);
            var3477 /= Float32((Int32(var2955)) | 1);
            var3482 ^= Int8(76);
            if (true) { var1548 } else { var1548 } 
        
    } } else { (if (match {
        case true => 
        var1170 <= Int16(-94)
        case _ => 
        var2916
    }) { try { // block id: 3501
        Option<Int8>.None;
        var1548
    } finally { // block id: 3504
        if (var326) { ((UInt16(80)&127..=UInt16(33)&127:(var2748|1)), var3513, var2955, var2955, var3597, [var3374, var3482, Int8(82), var3374, Int8(-120), Int8(90), Int8(90), Int8(104), Int8(123), var3482]) } else { ((UInt16(140)&127..UInt16(245)&127:(-78)|1), (var3621, var2776, [var1502, [UInt8(218), UInt8(128), UInt8(3), UInt8(183), UInt8(231), UInt8(175), UInt8(39), UInt8(252), UInt8(179), UInt8(88)], var1502, [UInt8(196), var1915, var1915, var1915, UInt8(241), var1915, var1915, var1915, UInt8(170), UInt8(217)], [UInt8(197), var2313, var2328, var3644, UInt8(129), var1915, var2328, var2328, UInt8(250), UInt8(235)], [UInt8(219), UInt8(41), UInt8(251), UInt8(88), UInt8(243), UInt8(88), UInt8(230), UInt8(101), UInt8(169), UInt8(60)], var1502, [var2328, UInt8(167), var1915, var3644, UInt8(74), UInt8(60), var2328, var1915, var2313, var2313], [var2328, UInt8(71), UInt8(144), UInt8(10), var3644, UInt8(6), var2313, var1915, var1915, var1915], [UInt8(168), UInt8(245), UInt8(223), UInt8(106), UInt8(67), UInt8(12), UInt8(4), UInt8(14), UInt8(254), UInt8(219)]], [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]], 34), var2955, Float32(121.0), Option<Array<UInt8>>.Some([UInt8(47), UInt8(254), UInt8(70), UInt8(138), UInt8(229), UInt8(143), UInt8(156), UInt8(5), UInt8(213), UInt8(231)]), var3621) } ;
        ();
        var1548
    } } else { match (var3688) {
        case caseVar3692 => 
            [var1071, var1071, UInt32(60), var1071, var3700, var1071, var3700, var3700, UInt32(215), UInt32(228)];
            if (true) { [(), (), (), (), (), (), (), (), (), ()] } else { var1548 } 
        
        case _ => 
            var3418;
            [(), var1212, param34, (), param34, var3424, (), param34, (), var463]
        
        case _ => 
            var3730;
            if (var1491) { var1548 } else { var1548 } 
        
    } } ) } 
}

public func func20<T0>() : Int32 where T0 <: Result<Array<UInt32>> { // block id: 21
    var var3739 : Bool = false;
    var loopTimeVar3745 : Range<UInt64> = (UInt64(73)&127..UInt64(UInt16(Int8(34)))&127:(Int64(UInt64(Int16(Int8(112))))|1));
    (for (i in loopTimeVar3745) if (var3739) {
        ();
        !var3739
    }|>func33)[8];
    match (if (match (var1369) {
            case (caseVar3763 : Array<UInt8>,_ : Option<(Range<Int16>*Array<UInt8>*Int32*UInt16*Int32)>,_) => 
                var1212;
                let var3768 : Int32 = Int32(Int16(Int16(Int8(UInt8(243)))));
                var3768 < var1455
            
            case _ => 
                var3482 += Int8(-100);
                (var43, var95, (-51));
                var1542
            
        }) { Aggregate636(namedParam948 : (UInt8(29)&127..=UInt8(26)&127:39|1)) } else { Aggregate636() } ) {
        case _ : (Range<UInt16>*(Array<Int8>*Rune*Array<Array<UInt8>>*Array<Array<Unit>>*Int64)*Float32*Float32*Option<Array<UInt8>>*Array<Int8>) => 
            if (var3385) { var3794 } else { var3794 } ;
            ();
            Int32(28)
        
        case _ : Array<Bool> => 
            if (true) { Result<Option<Array<Array<UInt8>>>>.Err(Exception("LangFuzz Inner Exception")) } else { Result<Option<Array<Array<UInt8>>>>.Err(Exception("LangFuzz Inner Exception")) } ;
            var1455
        
        case _ : (Int8*Option<(Range<Int16>*Array<UInt8>*Int32*UInt16*Int32)>*Int16*Int64*Array<Bool>*Array<Unit>) => 
            Int32(103)
        
        case caseVar3813 : (Array<Int8>*Rune*Array<Array<UInt8>>*Array<Array<Unit>>*Int64) => 
            var3418;
            Int32(-59)
        
        case _ => 
            var3418;
            var479 & var3823
        
    }
}


main(): Int64 {
    try {
        Float32(115.0);
        let var9 : Float64 = 11.0;
        var9;
        func func12(param13 : Int32, param14 : String, param15 : Float64, namedParam16 ! : Bool) : Int64 { // block id: 17
            114
        }
;
        func12(func20<Result<Array<UInt32>>>(), match ((UInt8(50)&127..UInt8(55)&127:0|1)) {
            case caseVar3829 : (Array<UInt32>*Array<Array<Unit>>*Array<Bool>*Array<Int8>) => 
                ();
                if (true) { "uayN/8x\\Z|" } else { var2053 } 
            
            case caseVar3838 => 
                ();
                var2053
            
            case caseVar3844 : UInt16 => 
                ();
                if (var326) { var2053 } else { var2053 } 
            
            case _ => 
                if (var2916) { var3730 } else { var3730 } ;
                var var3860 : String = ###"U<s'f)Eshj"###;
                if (true) { var3860 } else { var2053 } 
            
        }, try { // block id: 3864
            var var3867 : Int8 = Int8(8);
            var3867 %= ((Int8(31)) | 1);
            var var3871 : Float64 = (-119.0);
            var3871
        } catch (_) { // block id: 3873
            (var3876&127..=var3823&127:(14|1));
            var2955 - Float32(-52.0);
            var9
        } finally { // block id: 3887
            if (false) { (var3700&127..=var1071&127:((-100)|1)) } else { (UInt32(176)&127..var1071&127:((-113)|1)) } ;
            var1896
        }, namedParam16 : (var3905 ?? var2916))
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var43*var43), 64)
        crccheck.updateBuffer(UInt64(var3172*var3172), 64)
        crccheck.updateBuffer(UInt64(var3644*var3644), 64)
        crccheck.updateBuffer(UInt64(var3823*var3823), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Class241 {

}

extend Aggregate636 {

}

