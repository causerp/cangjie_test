/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC-1: %compiler %cmp_opt %f -o %output

let var29 : Class19<Option<Option<Int64>>> = Class19<Option<Option<Int64>>>()
public let var67 : UInt8 = UInt8(129)
public var var95 : Int32 = Int32(-57)
public let var101 : Unit = ()
public var var116 : UInt32 = UInt32(UInt16(185))
public var var192 : ?UInt32 = Option<UInt32>.None
public var var255 : Interface26 = Class19<Option<Option<Int64>>>()
let var292 : Interface23 = Class19<Option<Option<Int64>>>()
let var344 : Float64 = 86.0
public var var387 : Bool = (Class19<Option<Option<Int64>>>() is Float64)
public var var400 : Option<Range<Int16>> = Option<Range<Int16>>.None
let var435 : Range<Int8> = (Int8(-108)&127..=Int8(7)&127:(-89)|1)
let var457 : Interface22 = Class19<Option<Option<Int64>>>()
var var495 : ?UInt8 = Option<UInt8>.None
var var520 : UInt16 = UInt16(Int8(Int8(Int8(-91))))
public var var532 : Int64 = (-27)
public let var548 : (UInt64, Int32, (Float32, Float64, Bool, Array<UInt8>, Float32, Int16), UInt32) = (UInt64(UInt16(205)), Int32(UInt32(UInt32(212))), (Float32(-27.0), 37.0, false, [UInt8(Int8(23)), UInt8(UInt8(89)), UInt8(166), UInt8(Int8(42)), UInt8(185), UInt8(Int8(38)), UInt8(Int8(42)), UInt8(181), UInt8(UInt8(6)), UInt8(26)], Float32(Float32(Float32(114.0))), Int16(-88)), UInt32(213))
public var var587 : (Float32, Float64, Bool, Array<UInt8>, Float32, Int16) = (Float32(8.0), Float64(Float32(Float32(109.0))), false, [UInt8(UInt8(172)), UInt8(UInt8(101)), UInt8(UInt8(UInt8(240))), UInt8(19), UInt8(104), UInt8(Int8(-108)), UInt8(UInt8(9)), UInt8(UInt8(232)), UInt8(UInt8(Int8(89))), UInt8(174)], Float32(Float32(Float32(Float32(79.0)))), Int16(Int8(113)))
let var640 : Float32 = Float32(Float32(70.0))
var var700 : ?Int64 = Option<Int64>.None
let var783 : UInt16 = UInt16(Int8(-83))
public var var795 : Int16 = Int16(73)
var var812 : Interface24<Array<Option<Unit>>, Option<UInt32>, Option<Interface27>> = Class19<Option<Option<Int64>>>()
public let var825 : Int8 = Int8(UInt8(35))
let var1028 : Array<UInt8> = [UInt8(57), UInt8(221), UInt8(UInt8(160)), UInt8(184), UInt8(Int8(5)), UInt8(UInt8(179)), UInt8(UInt8(Int8(UInt8(193)))), UInt8(198), UInt8(Int8(Int8(81))), UInt8(Int8(-114))]
public let var1128 : Unit = ()
public var var1138 : UInt64 = UInt64(246)
public let var1224 : UInt32 = UInt32(194)
public var var1403 : UInt32 = UInt32(UInt16(71))
var var1457 : (Bool, String, Array<Float32>, Array<Float32>) = (false, "^i\"bQu6^Q-", [Float32(Float32(-75.0)), Float32(Float32(Float32(87.0))), Float32(-123.0), Float32(38.0), Float32(-28.0), Float32(Float32(Float32(107.0))), Float32(59.0), Float32(-64.0), Float32(-124.0), Float32(Float32(-86.0))], [Float32(48.0), Float32(68.0), Float32(53.0), Float32(46.0), Float32(Float32(Float32(-101.0))), Float32(Float32(Float32(-30.0))), Float32(Float32(82.0)), Float32(2.0), Float32(14.0), Float32(Float32(Float32(114.0)))])
public let var1516 : Float32 = Float32(Float32(-84.0))
let var1523 : Array<Float32> = [Float32(-9.0), Float32(-17.0), Float32(-128.0), Float32(25.0), Float32(-10.0), Float32(-101.0), Float32(-72.0), Float32(102.0), Float32(66.0), Float32(-126.0)]
var var1533 : Float64 = 21.0
public var var1549 : Array<Array<Unit>> = [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]]
let var1945 : Option<Interface27> = Option<Interface27>.None
var var1995 : (Interface27, String) = (Class943(), "+7*?Rx-62`")
var var2002 : String = "Dt?EtrUo[P"
public let var2012 : Array<Option<Unit>> = [(((Float32(-58.0) as (Interface27, String)) as UInt32) as Unit), ([(UInt64(81)&127..=UInt64(48)&127:(29|1)), (UInt64(72)&127..=UInt64(85)&127:(-86)|1), (UInt64(26)&127..UInt64(22)&127:77|1), (UInt64(41)&127..UInt64(110)&127:((-25)|1)), (UInt64(100)&127..UInt64(241)&127:58|1), (UInt64(226)&127..=UInt64(170)&127:(120|1)), (UInt64(101)&127..UInt64(230)&127:((-84)|1)), (UInt64(109)&127..=UInt64(25)&127:(2|1)), (UInt64(3)&127..=UInt64(140)&127:((-71)|1)), (UInt64(231)&127..UInt64(94)&127:95|1)] as Unit), Option<Unit>.None, (Option<Interface27>.None as Unit), Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, Option<Unit>.None, ((((UInt32(36)&127..UInt32(135)&127:((-111)|1)) is Bool), """
3XlM+${var2002}
zK${var2002}oM\\
""", [Float32(92.0), Float32(83.0), Float32(2.0), Float32(61.0), Float32(-34.0), Float32(24.0), Float32(-125.0), Float32(-108.0), Float32(78.0), Float32(-21.0)], [Float32(35.0), Float32(50.0), Float32(42.0), Float32(104.0), Float32(-110.0), Float32(-9.0), Float32(107.0), Float32(-126.0), Float32(-122.0), Float32(71.0)]) as Unit), Option<Unit>.None]
let var2159 : (Bool, String, Array<Float32>, Array<Float32>) = (((Class943(), "6${var2002}N${var2002}>'${var2002}dux${var2002}qdF") is Interface24<Array<Option<Unit>>, Option<UInt32>, Option<Interface27>>), """
^2]&${var2002}a{
L${var2002}9yH${var2002}q
""", [Float32(-66.0), Float32(50.0), Float32(-110.0), Float32(63.0), Float32(-112.0), Float32(-101.0), Float32(-26.0), Float32(116.0), Float32(60.0), Float32(72.0)], [Float32(Float32(63.0)), Float32(59.0), Float32(-117.0), Float32(-1.0), Float32(19.0), Float32(Float32(70.0)), Float32(21.0), Float32(Float32(Float32(-125.0))), Float32(-18.0), Float32(99.0)])
public let var2250 : ?Int64 = Option<Int64>.None
var var2367 : Rune = 'X'
let var2676 : UInt8 = UInt8(168)
let var2694 : Array<UInt8> = [UInt8(153), UInt8(25), UInt8(51), UInt8(151), UInt8(36), UInt8(222), UInt8(35), UInt8(179), UInt8(243), UInt8(209)]
let var2710 : UInt8 = UInt8(Int8(UInt8(Int8(51))))
public var var2721 : Float32 = Float32(Float32(Float32(-75.0)))
let var2751 : UInt8 = UInt8(247)
var var2843 : (Option<Unit>, UInt8) = (Option<Unit>.None, UInt8(Int8(6)))
var var2853 : (UInt64, UInt64, Range<UInt16>, Float64) = (UInt64(130), UInt64(Int32(54)), (UInt16(181)&127..UInt16(196)&127:(-67)|1), Float64(Float32(37.0)))
let var2939 : Range<UInt64> = (UInt64(229)&127..=UInt64(28)&127:(Int64(120)|1))
var var2971 : Unit = ()
let var2976 : Int8 = Int8(-117)
public let var3009 : ??Array<Range<UInt64>> = ('2' as Option<Array<Range<UInt64>>>)
var var3076 : UInt64 = UInt64(193)

public interface Interface25 {
    static func func1279(param1280 : Range<UInt8>) : Range<Int32> { // block id: 1281
        let var1360 : Array<Array<Unit>> = [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]];
        var var1368 : Range<UInt64> = (UInt64(202)&127..=UInt64(UInt8(108))&127:(125|1));
        try { // block id: 1286
            var var1288 : Array<Array<Unit>> = Array<Array<Unit>>(10){ i => [(), (), (), (), (), (), (), (), (), ()] };
            var1288
        } catch (_) { // block id: 1340
            let var1342 : Range<UInt64> = (UInt64(UInt32(UInt16(134)))&127..UInt64(Int8(UInt8(183)))&127:(Int64(Int16(UInt8(UInt8(226))))|1));
            var1342;
            var1138 - UInt64(55);
            if (var387) { var1360 } else { var1360 } 
        } finally { // block id: 1363
            [(UInt64(183)&127..=UInt64(204)&127:(-88)|1), (UInt64(29)&127..=UInt64(50)&127:9|1), var1368, (UInt64(162)&127..=UInt64(173)&127:(-105)|1), (UInt64(199)&127..=UInt64(55)&127:(-40)|1), (UInt64(58)&127..=UInt64(206)&127:(-68)|1), (UInt64(37)&127..UInt64(131)&127:(100|1)), (var1138&127..=UInt64(138)&127:((-27)|1)), var1368, (UInt64(136)&127..=UInt64(229)&127:(-57)|1)];
            [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]]
        }[3][0];
        var loopTimeVar1422 : Int64 = 0;
        do {
            loopTimeVar1422++;
            match ((UInt64(66)&127..=UInt64(170)&127:((-74)|1))) {
                case _ : Array<Bool> => 
                    var1403--;
                    var101;
                    var1128
                
                case _ : Range<UInt8> => 
                    var95 |= var95
                
                case _ => 
                    var532 ^= (-40);
                    false;
                    ()
                
            }
        } while ((var387) && loopTimeVar1422 < 100 ) ;
        (Int32(-38)&127..=Int32(10)&127:(-97)|1)
    }
;
    func func1272(namedParam1273 ! : UInt16) : Option<Unit> { // block id: 1274
        let var1443 : Float32 = Float32(Float32(Float32(-30.0)));
        let var1453 : Float32 = Float32(36.0);
        match (func1279((var67&127..=var67&127:(var532|1)))) {
            case caseVar1430 => 
                ();
                if (var387) { (true, """
/\\8xG
> #||
""", [Float32(-61.0), Float32(95.0), Float32(35.0), Float32(-60.0), Float32(-121.0), Float32(62.0), Float32(-51.0), Float32(70.0), Float32(88.0), Float32(-42.0)], [Float32(-50.0), Float32(110.0), var1443, Float32(77.0), var1443, Float32(119.0), Float32(58.0), Float32(-55.0), var1453, Float32(57.0)]) } else { var1457 } 
            
            case _ => 
                ();
                var101;
                var1457
            
            case _ : Array<Range<UInt64>> => 
                (var387, ###"-x/1fQRS`:"###, [var1453, Float32(7.0), Float32(64.0), var1453, Float32(-39.0), var1453, var1516, var1453, Float32(69.0), var1516], var1523)
            
            case _ => 
                (UInt64(153), Int32(-107), (var1443, var1533, false, [UInt8(122), UInt8(212), UInt8(83), UInt8(153), UInt8(189), UInt8(246), UInt8(253), UInt8(38), UInt8(191), UInt8(14)], Float32(93.0), var795), UInt32(107));
                var1457
            
        }[3];
        (UInt32(0) as Int64);
        let var1632 : Array<Option<Unit>> = [Option<Unit>.None, Option<Unit>.Some(()), Option<Unit>.None, Option<Unit>.None, Option<Unit>.Some(()), (() as Unit), Option<Unit>.Some(()), (UInt32(77) as Unit), (UInt16(Int8(Int8(33))) as Unit), Option<Unit>.None];
        if ((var1549 is Interface25)) { var1632 } else { var1632 } [5]
    }
;
    func func1165(namedParam1166 ! : Range<UInt32>, namedParam1167 ! : Option<Range<Int16>>) : Option<Unit> { // block id: 1168
        func func1181(namedParam1182 ! : (Float32) -> Bool, namedParam1185 ! : Int8, namedParam1186 ! : ((Option<Int64>, Interface27, Unit, UInt32) -> Interface23) -> String, namedParam1189 ! : Array<Bool>) : Unit { // block id: 1190

        }
;
        let var1194 : ((Option<Int64>, Interface27, Unit, UInt32) -> Interface23) -> String = func747;
        try (resource = Class943()) { // block id: 1170
            var var1174 : Array<Float32> = [Float32(-66.0), Float32(53.0), Float32(11.0), Float32(-16.0), Float32(112.0), Float32(38.0), Float32(54.0), Float32(-124.0), Float32(5.0), Float32(-44.0)];
            var1174[3];
            var67 ** (UInt8(45) & 3);
            let var1200 : Bool = false;
            func1181(namedParam1182 : func504, namedParam1185 : Int8(28), namedParam1186 : var1194, namedParam1189 : [var387, true, var1200, false, var1200, false, var387, var1200, false, var387])
        } catch (_) { // block id: 1209
            var loopTimeVar1213 : Range<UInt64> = (UInt64(Int32(UInt8(16)))&127..=UInt64(0)&127:(96|1));
            for (i in loopTimeVar1213 where var387) {

            };
            try (resource = Class943()) { // block id: 1221
                var1224 * var1224;
                (Int32(124)&127..=Int32(-59)&127:(99|1));
                var1128
            } catch (e: Exception) { // block id: 1232
                var101;
                ()
            }
        } finally { // block id: 1235

        };
        var var2759 : Int8 = Int8(-5);
        let var2769 : Range<Int16> = (Int16(58)&127..=Int16(-36)&127:3|1);
        match (([var387, true, true, var387, false, var387, var387, var387, false, false]|>func1238)) {
            case _ : Array<Option<Unit>> => 
                var1523;
                [UInt8(63), var2710, UInt8(167), UInt8(224), var2710, var2751, var67, UInt8(196), UInt8(82), var2710];
                var2759 /= ((Int8(87)) | 1)
            
            case (_,caseVar2764,_,caseVar2765 : Array<Unit>,_,caseVar2766) => 
                var2769;
                var1128
            
            case (caseVar2774,caseVar2775,caseVar2776 : Array<Bool>,_ : Range<Int8>,_,_) => 
                (var532&127..=(-116)&127:(var532|1));
                var387 &&= var387
            
            case _ => 
                (UInt32(187)&127..UInt32(100)&127:(var532|1));
                var101;
                ()
            
        };
        var var2799 : ?Bool = ([(UInt64(15)&127..=UInt64(203)&127:(-123)|1), (UInt64(34)&127..UInt64(Int16(-1))&127:(Int64(Int8(-28))|1)), (UInt64(37)&127..=UInt64(113)&127:(-91)|1), (UInt64(37)&127..UInt64(81)&127:((-43)|1)), (UInt64(152)&127..UInt64(114)&127:20|1), (UInt64(127)&127..UInt64(UInt16(112))&127:((-52)|1)), (UInt64(193)&127..=UInt64(166)&127:46|1), (UInt64(41)&127..UInt64(159)&127:(-18)|1), (UInt64(UInt8(190))&127..=UInt64(98)&127:(1|1)), (UInt64(UInt64(178))&127..=UInt64(UInt64(168))&127:(67|1))] as Bool);
        var var2877 : ?Unit = Option<Unit>.None;
        var var2906 : Unit = ();
        if (try { // block id: 2795
            false
        } finally { // block id: 2797
            var2799;
            false
        }) { (Option<(Option<Unit>, UInt8)>.None ?? var2843)[0] } else { (if (true) { match (var2853) {
            case caseVar2863 : (UInt64, UInt64, Range<UInt16>, Float64) => 
                var387;
                26;
                if (var387) { Option<Unit>.Some(var1128) } else { Option<Unit>.None } 
            
            case caseVar2874 => 
                var2877
            
            case caseVar2881 => 
                if (true) { var2877 } else { var2877 } 
            
            case caseVar2889 : String => 
                var548;
                var795 <<= ((Int16(65)) & 7);
                if (var387) { Option<Unit>.None } else { Option<Unit>.None } 
            
            case _ => 
                (Int8(19)&127..=var2759&127:(30|1));
                var2906;
                Option<Unit>.Some(var101)
            
        } } else { var2877 } ) } 
    }

}

public interface Interface27 <: Interface25 {

}

public interface Interface26 <: Interface27 {
    func func32() : Unit { // block id: 33

    }

}

public interface Interface24<T0, T1, T2> <: Interface25 & Interface26 {
    static func func1279(param1280 : Range<UInt8>) : Range<Int32> { // block id: 1281
        let var1360 : Array<Array<Unit>> = [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]];
        var var1368 : Range<UInt64> = (UInt64(202)&127..=UInt64(UInt8(108))&127:(125|1));
        try { // block id: 1286
            var var1288 : Array<Array<Unit>> = Array<Array<Unit>>(10){ i => [(), (), (), (), (), (), (), (), (), ()] };
            var1288
        } catch (_) { // block id: 1340
            let var1342 : Range<UInt64> = (UInt64(UInt32(UInt16(134)))&127..UInt64(Int8(UInt8(183)))&127:(Int64(Int16(UInt8(UInt8(226))))|1));
            var1342;
            var1138 - UInt64(55);
            if (var387) { var1360 } else { var1360 } 
        } finally { // block id: 1363
            [(UInt64(183)&127..=UInt64(204)&127:(-88)|1), (UInt64(29)&127..=UInt64(50)&127:9|1), var1368, (UInt64(162)&127..=UInt64(173)&127:(-105)|1), (UInt64(199)&127..=UInt64(55)&127:(-40)|1), (UInt64(58)&127..=UInt64(206)&127:(-68)|1), (UInt64(37)&127..UInt64(131)&127:(100|1)), (var1138&127..=UInt64(138)&127:((-27)|1)), var1368, (UInt64(136)&127..=UInt64(229)&127:(-57)|1)];
            [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]]
        }[3][0];
        var loopTimeVar1422 : Int64 = 0;
        do {
            loopTimeVar1422++;
            match ((UInt64(66)&127..=UInt64(170)&127:((-74)|1))) {
                case _ : Array<Bool> => 
                    var1403--;
                    var101;
                    var1128
                
                case _ : Range<UInt8> => 
                    var95 |= var95
                
                case _ => 
                    var532 ^= (-40);
                    false;
                    ()
                
            }
        } while ((var387) && loopTimeVar1422 < 100 ) ;
        (Int32(-38)&127..=Int32(10)&127:(-97)|1)
    }
;
    func func1272(namedParam1273 ! : UInt16) : Option<Unit> { // block id: 1274
        let var1443 : Float32 = Float32(Float32(Float32(-30.0)));
        let var1453 : Float32 = Float32(36.0);
        match (func1279((var67&127..=var67&127:(var532|1)))) {
            case caseVar1430 => 
                ();
                if (var387) { (true, """
/\\8xG
> #||
""", [Float32(-61.0), Float32(95.0), Float32(35.0), Float32(-60.0), Float32(-121.0), Float32(62.0), Float32(-51.0), Float32(70.0), Float32(88.0), Float32(-42.0)], [Float32(-50.0), Float32(110.0), var1443, Float32(77.0), var1443, Float32(119.0), Float32(58.0), Float32(-55.0), var1453, Float32(57.0)]) } else { var1457 } 
            
            case _ => 
                ();
                var101;
                var1457
            
            case _ : Array<Range<UInt64>> => 
                (var387, ###"-x/1fQRS`:"###, [var1453, Float32(7.0), Float32(64.0), var1453, Float32(-39.0), var1453, var1516, var1453, Float32(69.0), var1516], var1523)
            
            case _ => 
                (UInt64(153), Int32(-107), (var1443, var1533, false, [UInt8(122), UInt8(212), UInt8(83), UInt8(153), UInt8(189), UInt8(246), UInt8(253), UInt8(38), UInt8(191), UInt8(14)], Float32(93.0), var795), UInt32(107));
                var1457
            
        }[3];
        (UInt32(0) as Int64);
        let var1632 : Array<Option<Unit>> = Array<Option<Unit>>(10){ i => Option<Unit>.None };
        if ((var1549 is Interface25)) { var1632 } else { var1632 } [5]
    }
;
    func func1165(namedParam1166 ! : Range<UInt32>, namedParam1167 ! : Option<Range<Int16>>) : Option<Unit> { // block id: 1168
        func func1181(namedParam1182 ! : (Float32) -> Bool, namedParam1185 ! : Int8, namedParam1186 ! : ((Option<Int64>, Interface27, Unit, UInt32) -> Interface23) -> String, namedParam1189 ! : Array<Bool>) : Unit { // block id: 1190

        }
;
        let var1194 : ((Option<Int64>, Interface27, Unit, UInt32) -> Interface23) -> String = func747;
        try (resource = Class943()) { // block id: 1170
            var var1174 : Array<Float32> = [Float32(-66.0), Float32(53.0), Float32(11.0), Float32(-16.0), Float32(112.0), Float32(38.0), Float32(54.0), Float32(-124.0), Float32(5.0), Float32(-44.0)];
            var1174[3];
            var67 ** (UInt8(45) & 3);
            let var1200 : Bool = false;
            func1181(namedParam1182 : func504, namedParam1185 : Int8(28), namedParam1186 : var1194, namedParam1189 : [var387, true, var1200, false, var1200, false, var387, var1200, false, var387])
        } catch (_) { // block id: 1209
            var loopTimeVar1213 : Range<UInt64> = (UInt64(Int32(UInt8(16)))&127..=UInt64(0)&127:(96|1));
            for (i in loopTimeVar1213 where var387) {

            };
            try (resource = Class943()) { // block id: 1221
                var1224 * var1224;
                (Int32(124)&127..=Int32(-59)&127:(99|1));
                var1128
            } catch (e: Exception) { // block id: 1232
                var101;
                ()
            }
        } finally { // block id: 1235

        };
        var var2759 : Int8 = Int8(-5);
        let var2769 : Range<Int16> = (Int16(58)&127..=Int16(-36)&127:3|1);
        match (([var387, true, true, var387, false, var387, var387, var387, false, false]|>func1238)) {
            case _ : Array<Option<Unit>> => 
                var1523;
                [UInt8(63), var2710, UInt8(167), UInt8(224), var2710, var2751, var67, UInt8(196), UInt8(82), var2710];
                var2759 /= ((Int8(87)) | 1)
            
            case (_,caseVar2764,_,caseVar2765 : Array<Unit>,_,caseVar2766) => 
                var2769;
                var1128
            
            case (caseVar2774,caseVar2775,caseVar2776 : Array<Bool>,_ : Range<Int8>,_,_) => 
                (var532&127..=(-116)&127:(var532|1));
                var387 &&= var387
            
            case _ => 
                (UInt32(187)&127..UInt32(100)&127:(var532|1));
                var101;
                ()
            
        };
        var var2799 : ?Bool = ([(UInt64(15)&127..=UInt64(203)&127:(-123)|1), (UInt64(34)&127..UInt64(Int16(-1))&127:(Int64(Int8(-28))|1)), (UInt64(37)&127..=UInt64(113)&127:(-91)|1), (UInt64(37)&127..UInt64(81)&127:((-43)|1)), (UInt64(152)&127..UInt64(114)&127:20|1), (UInt64(127)&127..UInt64(UInt16(112))&127:((-52)|1)), (UInt64(193)&127..=UInt64(166)&127:46|1), (UInt64(41)&127..UInt64(159)&127:(-18)|1), (UInt64(UInt8(190))&127..=UInt64(98)&127:(1|1)), (UInt64(UInt64(178))&127..=UInt64(UInt64(168))&127:(67|1))] as Bool);
        var var2877 : ?Unit = Option<Unit>.None;
        var var2906 : Unit = ();
        if (try { // block id: 2795
            false
        } finally { // block id: 2797
            var2799;
            false
        }) { (Option<(Option<Unit>, UInt8)>.None ?? var2843)[0] } else { (if (true) { match (var2853) {
            case caseVar2863 : (UInt64, UInt64, Range<UInt16>, Float64) => 
                var387;
                26;
                if (var387) { Option<Unit>.Some(var1128) } else { Option<Unit>.None } 
            
            case caseVar2874 => 
                var2877
            
            case caseVar2881 => 
                if (true) { var2877 } else { var2877 } 
            
            case caseVar2889 : String => 
                var548;
                var795 <<= ((Int16(65)) & 7);
                if (var387) { Option<Unit>.None } else { Option<Unit>.None } 
            
            case _ => 
                (Int8(19)&127..=var2759&127:(30|1));
                var2906;
                Option<Unit>.Some(var101)
            
        } } else { var2877 } ) } 
    }

}

public interface Interface23 <: Interface24<Array<Option<Unit>>, Option<UInt32>, Option<Interface27>> {

}

public interface Interface22 <: Interface23 {

}

public open class Class19<T0> <: Interface22 & Interface24<Array<Option<Unit>>, Option<UInt32>, Option<Interface27>> & Resource where T0 <: Option<Option<Int64>> {
    public init() { // block id: 21

    }
;
    static var var501 : Unit = ();
    public let var544 : Bool = false;
    public static func func1279(param1280 : Range<UInt8>) : Range<Int32> { // block id: 1281
        let var1360 : Array<Array<Unit>> = [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]];
        var var1368 : Range<UInt64> = (UInt64(202)&127..=UInt64(UInt8(108))&127:(125|1));
        try { // block id: 1286
            var var1288 : Array<Array<Unit>> = Array<Array<Unit>>(10){ i => [(), (), (), (), (), (), (), (), (), ()] };
            var1288
        } catch (_) { // block id: 1340
            let var1342 : Range<UInt64> = (UInt64(UInt32(UInt16(134)))&127..UInt64(Int8(UInt8(183)))&127:(Int64(Int16(UInt8(UInt8(226))))|1));
            var1342;
            var1138 - UInt64(55);
            if (var387) { var1360 } else { var1360 } 
        } finally { // block id: 1363
            [(UInt64(183)&127..=UInt64(204)&127:(-88)|1), (UInt64(29)&127..=UInt64(50)&127:9|1), var1368, (UInt64(162)&127..=UInt64(173)&127:(-105)|1), (UInt64(199)&127..=UInt64(55)&127:(-40)|1), (UInt64(58)&127..=UInt64(206)&127:(-68)|1), (UInt64(37)&127..UInt64(131)&127:(100|1)), (var1138&127..=UInt64(138)&127:((-27)|1)), var1368, (UInt64(136)&127..=UInt64(229)&127:(-57)|1)];
            [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]]
        }[3][0];
        var loopTimeVar1422 : Int64 = 0;
        do {
            loopTimeVar1422++;
            match ((UInt64(66)&127..=UInt64(170)&127:((-74)|1))) {
                case _ : Array<Bool> => 
                    var1403--;
                    var101;
                    var1128
                
                case _ : Range<UInt8> => 
                    var95 |= var95
                
                case _ => 
                    var532 ^= (-40);
                    false;
                    ()
                
            }
        } while ((var387) && loopTimeVar1422 < 100 ) ;
        (Int32(-38)&127..=Int32(10)&127:(-97)|1)
    }
;
    public func func1272(namedParam1273 ! : UInt16) : Option<Unit> { // block id: 1274
        let var1443 : Float32 = Float32(Float32(Float32(-30.0)));
        let var1453 : Float32 = Float32(36.0);
        match (func1279((var67&127..=var67&127:(var532|1)))) {
            case caseVar1430 => 
                ();
                if (var387) { (true, """
/\\8xG
> #||
""", [Float32(-61.0), Float32(95.0), Float32(35.0), Float32(-60.0), Float32(-121.0), Float32(62.0), Float32(-51.0), Float32(70.0), Float32(88.0), Float32(-42.0)], [Float32(-50.0), Float32(110.0), var1443, Float32(77.0), var1443, Float32(119.0), Float32(58.0), Float32(-55.0), var1453, Float32(57.0)]) } else { var1457 } 
            
            case _ => 
                ();
                var101;
                var1457
            
            case _ : Array<Range<UInt64>> => 
                (var387, ###"-x/1fQRS`:"###, [var1453, Float32(7.0), Float32(64.0), var1453, Float32(-39.0), var1453, var1516, var1453, Float32(69.0), var1516], var1523)
            
            case _ => 
                (UInt64(153), Int32(-107), (var1443, var1533, false, [UInt8(122), UInt8(212), UInt8(83), UInt8(153), UInt8(189), UInt8(246), UInt8(253), UInt8(38), UInt8(191), UInt8(14)], Float32(93.0), var795), UInt32(107));
                var1457
            
        }[3];
        (UInt32(0) as Int64);
        let var1632 : Array<Option<Unit>> = [Option<Unit>.None, Option<Unit>.Some(()), Option<Unit>.None, Option<Unit>.None, Option<Unit>.Some(()), (() as Unit), Option<Unit>.Some(()), (UInt32(77) as Unit), (UInt16(Int8(Int8(33))) as Unit), Option<Unit>.None];
        if ((var1549 is Interface25)) { var1632 } else { var1632 } [5]
    }
;
    public func func1165(namedParam1166 ! : Range<UInt32>, namedParam1167 ! : Option<Range<Int16>>) : Option<Unit> { // block id: 1168
        func func1181(namedParam1182 ! : (Float32) -> Bool, namedParam1185 ! : Int8, namedParam1186 ! : ((Option<Int64>, Interface27, Unit, UInt32) -> Interface23) -> String, namedParam1189 ! : Array<Bool>) : Unit { // block id: 1190

        }
;
        let var1194 : ((Option<Int64>, Interface27, Unit, UInt32) -> Interface23) -> String = func747;
        try (resource = Class943()) { // block id: 1170
            var var1174 : Array<Float32> = [Float32(-66.0), Float32(53.0), Float32(11.0), Float32(-16.0), Float32(112.0), Float32(38.0), Float32(54.0), Float32(-124.0), Float32(5.0), Float32(-44.0)];
            var1174[3];
            var67 ** (UInt8(45) & 3);
            let var1200 : Bool = false;
            func1181(namedParam1182 : func504, namedParam1185 : Int8(28), namedParam1186 : var1194, namedParam1189 : [var387, true, var1200, false, var1200, false, var387, var1200, false, var387])
        } catch (_) { // block id: 1209
            var loopTimeVar1213 : Range<UInt64> = (UInt64(Int32(UInt8(16)))&127..=UInt64(0)&127:(96|1));
            for (i in loopTimeVar1213 where var387) {

            };
            try (resource = Class943()) { // block id: 1221
                var1224 * var1224;
                (Int32(124)&127..=Int32(-59)&127:(99|1));
                var1128
            } catch (e: Exception) { // block id: 1232
                var101;
                ()
            }
        } finally { // block id: 1235

        };
        var var2759 : Int8 = Int8(-5);
        let var2769 : Range<Int16> = (Int16(58)&127..=Int16(-36)&127:3|1);
        match (([var387, true, true, var387, false, var387, var387, var387, false, false]|>func1238)) {
            case _ : Array<Option<Unit>> => 
                var1523;
                [UInt8(63), var2710, UInt8(167), UInt8(224), var2710, var2751, var67, UInt8(196), UInt8(82), var2710];
                var2759 /= ((Int8(87)) | 1)
            
            case (_,caseVar2764,_,caseVar2765 : Array<Unit>,_,caseVar2766) => 
                var2769;
                var1128
            
            case (caseVar2774,caseVar2775,caseVar2776 : Array<Bool>,_ : Range<Int8>,_,_) => 
                (var532&127..=(-116)&127:(var532|1));
                var387 &&= var387
            
            case _ => 
                (UInt32(187)&127..UInt32(100)&127:(var532|1));
                var101;
                ()
            
        };
        var var2799 : ?Bool = ([(UInt64(15)&127..=UInt64(203)&127:(-123)|1), (UInt64(34)&127..UInt64(Int16(-1))&127:(Int64(Int8(-28))|1)), (UInt64(37)&127..=UInt64(113)&127:(-91)|1), (UInt64(37)&127..UInt64(81)&127:((-43)|1)), (UInt64(152)&127..UInt64(114)&127:20|1), (UInt64(127)&127..UInt64(UInt16(112))&127:((-52)|1)), (UInt64(193)&127..=UInt64(166)&127:46|1), (UInt64(41)&127..UInt64(159)&127:(-18)|1), (UInt64(UInt8(190))&127..=UInt64(98)&127:(1|1)), (UInt64(UInt64(178))&127..=UInt64(UInt64(168))&127:(67|1))] as Bool);
        var var2877 : ?Unit = Option<Unit>.None;
        var var2906 : Unit = ();
        if (try { // block id: 2795
            false
        } finally { // block id: 2797
            var2799;
            false
        }) { (Option<(Option<Unit>, UInt8)>.None ?? var2843)[0] } else { (if (true) { match (var2853) {
            case caseVar2863 : (UInt64, UInt64, Range<UInt16>, Float64) => 
                var387;
                26;
                if (var387) { Option<Unit>.Some(var1128) } else { Option<Unit>.None } 
            
            case caseVar2874 => 
                var2877
            
            case caseVar2881 => 
                if (true) { var2877 } else { var2877 } 
            
            case caseVar2889 : String => 
                var548;
                var795 <<= ((Int16(65)) & 7);
                if (var387) { Option<Unit>.None } else { Option<Unit>.None } 
            
            case _ => 
                (Int8(19)&127..=var2759&127:(30|1));
                var2906;
                Option<Unit>.Some(var101)
            
        } } else { var2877 } ) } 
    }
;
    public func func32() : Unit { // block id: 33

    }

    public func isClosed(): Bool { return false }
    public func close(): Unit {}
}


public func func81(param82 : Range<Int16>) : UInt8 { // block id: 83
    [(), (), (), (), (), (), (), (), (), ()][1];
    let var124 : Rune = 'y';
    let var133 : Array<Range<UInt64>> = [(UInt64(47)&127..=UInt64(65)&127:65|1), (UInt64(211)&127..UInt64(247)&127:(-39)|1), (UInt64(70)&127..=UInt64(115)&127:(-17)|1), (UInt64(168)&127..=UInt64(110)&127:85|1), (UInt64(36)&127..UInt64(52)&127:92|1), (UInt64(64)&127..=UInt64(31)&127:(-101)|1), (UInt64(3)&127..=UInt64(172)&127:(-103)|1), (UInt64(204)&127..=UInt64(76)&127:99|1), (UInt64(64)&127..=UInt64(67)&127:(-24)|1), (UInt64(186)&127..=UInt64(227)&127:25|1)];
    var var142 : ?UInt8 = Option<UInt8>.Some(UInt8(17));
    if ((false && false) && (var95 is Range<Int64>)) { // block id: 97
        var var107 : Bool = false;
        try (resource = Class943()) { // block id: 99
            var101;
            ()
        } catch (_) { // block id: 104
            var107 ||= false;
            if (var107) { (Int8(-89)&127..Int8(120)&127:98|1) } else { (Int8(75)&127..=Int8(74)&127:110|1) } ;
            var116 &= UInt32(227)
        } finally { // block id: 120
            if (var107) { var124 } else { var124 } ;
            var116 %= ((UInt32(166)) | 1)
        };
        var133[2];
        (var142 ?? UInt8(210))
    } else { // block id: 146
        if (false) { // block id: 149
            let var152 : Int16 = Int16(Int16(UInt16(Int16(Int8(71)))));
            (var152&127..=var152&127:(90|1));
            UInt8(29) & var67
        } else { // block id: 163
            var133;
            var101;
            var67
        }
    }
}




public func func283(param284 : Option<Int64>, optionalParam285 ! : Interface27 = Class19<Option<Option<Int64>>>(), optionalParam287 ! : Unit = (), namedParam289 ! : UInt32) : Interface23 { // block id: 290
    var292
}


public struct Aggregate404 {
    public init() { // block id: 406

    }
;
    public var var411 : Int8 = Int8(41)
}

public func func504(param505 : Float32) : Bool { // block id: 506
    var loopTimeVar537 : Int64 = 0;
    do {
        loopTimeVar537++;
        if (var387) { // block id: 516
            var101;
            var520 = UInt16(81)
        };
        try (resource = Class19<Option<Option<Int64>>>()) { // block id: 527

        } finally { // block id: 528
            """
uz^;,
<a{.tS
""";
            var532 <<= ((var532) & 7);
            ()
        }
    } while ((((Int16(-109)&127..Int16(-50)&127:(43|1)) is Class19<Option<Option<Int64>>>)) && loopTimeVar537 < 100 ) ;
    if (var29.var544) { // block id: 546
        var548
    } else { // block id: 581
        Int16(-46);
        (UInt64(235), var95, var587, UInt32(3))
    }[1];
    var387
}


public func func747(param748 : (Option<Int64>, Interface27, Unit, UInt32) -> Interface23) : String { // block id: 754
    func func758(namedParam759 ! : Range<Int16>, optionalParam760 ! : Range<Int64> = ((-109)&127..=(-120)&127:(-74)|1), namedParam762 ! : Range<Int8>, optionalParam763 ! : Float64 = Float64((-27.0))) : UInt16 { // block id: 766
        var var776 : Float32 = Float32(59.0);
        if (try { // block id: 769
            Int32(-116) <= Int32(-29)
        } finally { // block id: 773
            var776 %= Float32((Int32(var776)) | 1);
            (-28);
            true
        }) { // block id: 781
            var783
        } else { // block id: 786
            if (true) { // block id: 789
                ();
                ()
            };
            UInt16(254)
        }
    }
;
    try { // block id: 756
        let var800 : Range<Int8> = (Int8(UInt8(UInt8(Int8(-60))))&127..Int8(34)&127:(Int64(Int32(-88))|1));
        func758(namedParam759 : (var795&127..=var795&127:(83|1)), namedParam762 : var800, optionalParam763 : 107.0)
    } catch (_) { // block id: 810
        var812;
        var783
    } finally { // block id: 815
        UInt16(40)
    };
    var var851 : Unit = ();
    let var887 : String = """
?or:)
\\N#/I
""";
    let var909 : Float64 = (-118.0);
    match (try { // block id: 819
            var101;
            if (var387) { (var825&127..=Int8(-14)&127:(var532|1)) } else { (var825&127..=var825&127:(var532|1)) } ;
            if (true) { [(), (), (), (), (), (), (), (), (), ()] } else { [(), (), (), (), (), (), (), (), (), ()] } 
        } catch (_) { // block id: 838
            var var840 : UInt32 = UInt32(131);
            var840;
            [var101, (), var101, var101, (), var101, var101, var851, var851, ()]
        } finally { // block id: 855
            var var859 : Array<Unit> = Array<Unit>(10){ i => () };
            if (var387) { var859 } else { [(), (), (), (), var101, (), var101, var851, (), var851] } 
        }) {
        case caseVar884 : Rune => 
            var887
        
        case caseVar891 => 
            var887
        
        case _ => 
            var var899 : Float32 = Float32(0.0);
            var899 -= Float32(-56.0);
            ();
            var887
        
        case _ : (Float32, Float64, Bool, Array<UInt8>, Float32, Int16) => 
            var909 > var909;
            var101;
            "&$mPt_L.]9"
        
        case _ => 
            var887
        
    }
}

func func918(param284 : Option<Int64>, optionalParam285 : Interface27, optionalParam287 : Unit, namedParam289 : UInt32) : Interface23 { // block id: 290
    var292
}

public interface Interface946 <: Interface27 & Interface25 {
    static func func1279(param1280 : Range<UInt8>) : Range<Int32> { // block id: 1281
        let var1360 : Array<Array<Unit>> = [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]];
        var var1368 : Range<UInt64> = (UInt64(202)&127..=UInt64(UInt8(108))&127:(125|1));
        try { // block id: 1286
            var var1288 : Array<Array<Unit>> = [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]];
            var1288
        } catch (_) { // block id: 1340
            let var1342 : Range<UInt64> = (UInt64(UInt32(UInt16(134)))&127..UInt64(Int8(UInt8(183)))&127:(Int64(Int16(UInt8(UInt8(226))))|1));
            var1342;
            var1138 - UInt64(55);
            if (var387) { var1360 } else { var1360 } 
        } finally { // block id: 1363
            [(UInt64(183)&127..=UInt64(204)&127:(-88)|1), (UInt64(29)&127..=UInt64(50)&127:9|1), var1368, (UInt64(162)&127..=UInt64(173)&127:(-105)|1), (UInt64(199)&127..=UInt64(55)&127:(-40)|1), (UInt64(58)&127..=UInt64(206)&127:(-68)|1), (UInt64(37)&127..UInt64(131)&127:(100|1)), (var1138&127..=UInt64(138)&127:((-27)|1)), var1368, (UInt64(136)&127..=UInt64(229)&127:(-57)|1)];
            [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]]
        }[3][0];
        var loopTimeVar1422 : Int64 = 0;
        do {
            loopTimeVar1422++;
            match ((UInt64(66)&127..=UInt64(170)&127:((-74)|1))) {
                case _ : Array<Bool> => 
                    var1403--;
                    var101;
                    var1128
                
                case _ : Range<UInt8> => 
                    var95 |= var95
                
                case _ => 
                    var532 ^= (-40);
                    false;
                    ()
                
            }
        } while ((var387) && loopTimeVar1422 < 100 ) ;
        (Int32(-38)&127..=Int32(10)&127:(-97)|1)
    }
;
    func func1272(namedParam1273 ! : UInt16) : Option<Unit> { // block id: 1274
        let var1443 : Float32 = Float32(Float32(Float32(-30.0)));
        let var1453 : Float32 = Float32(36.0);
        match (func1279((var67&127..=var67&127:(var532|1)))) {
            case caseVar1430 => 
                ();
                if (var387) { (true, """
/\\8xG
> #||
""", [Float32(-61.0), Float32(95.0), Float32(35.0), Float32(-60.0), Float32(-121.0), Float32(62.0), Float32(-51.0), Float32(70.0), Float32(88.0), Float32(-42.0)], [Float32(-50.0), Float32(110.0), var1443, Float32(77.0), var1443, Float32(119.0), Float32(58.0), Float32(-55.0), var1453, Float32(57.0)]) } else { var1457 } 
            
            case _ => 
                ();
                var101;
                var1457
            
            case _ : Array<Range<UInt64>> => 
                (var387, ###"-x/1fQRS`:"###, [var1453, Float32(7.0), Float32(64.0), var1453, Float32(-39.0), var1453, var1516, var1453, Float32(69.0), var1516], var1523)
            
            case _ => 
                (UInt64(153), Int32(-107), (var1443, var1533, false, [UInt8(122), UInt8(212), UInt8(83), UInt8(153), UInt8(189), UInt8(246), UInt8(253), UInt8(38), UInt8(191), UInt8(14)], Float32(93.0), var795), UInt32(107));
                var1457
            
        }[3];
        (UInt32(0) as Int64);
        let var1632 : Array<Option<Unit>> = [Option<Unit>.None, Option<Unit>.Some(()), Option<Unit>.None, Option<Unit>.None, Option<Unit>.Some(()), (() as Unit), Option<Unit>.Some(()), (UInt32(77) as Unit), (UInt16(Int8(Int8(33))) as Unit), Option<Unit>.None];
        if ((var1549 is Interface25)) { var1632 } else { var1632 } [5]
    }
;
    func func1165(namedParam1166 ! : Range<UInt32>, namedParam1167 ! : Option<Range<Int16>>) : Option<Unit> { // block id: 1168
        func func1181(namedParam1182 ! : (Float32) -> Bool, namedParam1185 ! : Int8, namedParam1186 ! : ((Option<Int64>, Interface27, Unit, UInt32) -> Interface23) -> String, namedParam1189 ! : Array<Bool>) : Unit { // block id: 1190

        }
;
        let var1194 : ((Option<Int64>, Interface27, Unit, UInt32) -> Interface23) -> String = func747;
        try (resource = Class943()) { // block id: 1170
            var var1174 : Array<Float32> = [Float32(-66.0), Float32(53.0), Float32(11.0), Float32(-16.0), Float32(112.0), Float32(38.0), Float32(54.0), Float32(-124.0), Float32(5.0), Float32(-44.0)];
            var1174[3];
            var67 ** (UInt8(45) & 3);
            let var1200 : Bool = false;
            func1181(namedParam1182 : func504, namedParam1185 : Int8(28), namedParam1186 : var1194, namedParam1189 : [var387, true, var1200, false, var1200, false, var387, var1200, false, var387])
        } catch (_) { // block id: 1209
            var loopTimeVar1213 : Range<UInt64> = (UInt64(Int32(UInt8(16)))&127..=UInt64(0)&127:(96|1));
            for (i in loopTimeVar1213 where var387) {

            };
            try (resource = Class943()) { // block id: 1221
                var1224 * var1224;
                (Int32(124)&127..=Int32(-59)&127:(99|1));
                var1128
            } catch (e: Exception) { // block id: 1232
                var101;
                ()
            }
        } finally { // block id: 1235

        };
        var var2759 : Int8 = Int8(-5);
        let var2769 : Range<Int16> = (Int16(58)&127..=Int16(-36)&127:3|1);
        match (([var387, true, true, var387, false, var387, var387, var387, false, false]|>func1238)) {
            case _ : Array<Option<Unit>> => 
                var1523;
                [UInt8(63), var2710, UInt8(167), UInt8(224), var2710, var2751, var67, UInt8(196), UInt8(82), var2710];
                var2759 /= ((Int8(87)) | 1)
            
            case (_,caseVar2764,_,caseVar2765 : Array<Unit>,_,caseVar2766) => 
                var2769;
                var1128
            
            case (caseVar2774,caseVar2775,caseVar2776 : Array<Bool>,_ : Range<Int8>,_,_) => 
                (var532&127..=(-116)&127:(var532|1));
                var387 &&= var387
            
            case _ => 
                (UInt32(187)&127..UInt32(100)&127:(var532|1));
                var101;
                ()
            
        };
        var var2799 : ?Bool = ([(UInt64(15)&127..=UInt64(203)&127:(-123)|1), (UInt64(34)&127..UInt64(Int16(-1))&127:(Int64(Int8(-28))|1)), (UInt64(37)&127..=UInt64(113)&127:(-91)|1), (UInt64(37)&127..UInt64(81)&127:((-43)|1)), (UInt64(152)&127..UInt64(114)&127:20|1), (UInt64(127)&127..UInt64(UInt16(112))&127:((-52)|1)), (UInt64(193)&127..=UInt64(166)&127:46|1), (UInt64(41)&127..UInt64(159)&127:(-18)|1), (UInt64(UInt8(190))&127..=UInt64(98)&127:(1|1)), (UInt64(UInt64(178))&127..=UInt64(UInt64(168))&127:(67|1))] as Bool);
        var var2877 : ?Unit = Option<Unit>.None;
        var var2906 : Unit = ();
        if (try { // block id: 2795
            false
        } finally { // block id: 2797
            var2799;
            false
        }) { (Option<(Option<Unit>, UInt8)>.None ?? var2843)[0] } else { (if (true) { match (var2853) {
            case caseVar2863 : (UInt64, UInt64, Range<UInt16>, Float64) => 
                var387;
                26;
                if (var387) { Option<Unit>.Some(var1128) } else { Option<Unit>.None } 
            
            case caseVar2874 => 
                var2877
            
            case caseVar2881 => 
                if (true) { var2877 } else { var2877 } 
            
            case caseVar2889 : String => 
                var548;
                var795 <<= ((Int16(65)) & 7);
                if (var387) { Option<Unit>.None } else { Option<Unit>.None } 
            
            case _ => 
                (Int8(19)&127..=var2759&127:(30|1));
                var2906;
                Option<Unit>.Some(var101)
            
        } } else { var2877 } ) } 
    }

}

public open class Class943 <: Interface27 & Interface946 & Resource {
    public init() { // block id: 945

    }
;
    public var var1002 : (UInt64, UInt64, Range<UInt16>, Float64) = (UInt64(242), UInt64(171), (UInt16(62)&127..UInt16(237)&127:((-82)|1)), (-18.0));
    public static let var1656 : (UInt64, UInt64, Range<UInt16>, Float64) = (UInt64(198), UInt64(38), (UInt16(194)&127..=UInt16(237)&127:(-25)|1), (-110.0));
    private static let var1809 : Range<UInt8> = (UInt8(44)&127..UInt8(152)&127:59|1);
    public init(param1246 : Float32, param1247 : Bool, param1248 : Option<Range<Int16>>, param1249 : Option<Unit>) { // block id: 1250
        var var1262 : Bool = false;
        let var1664 : Array<Option<Unit>> = Array<Option<Unit>>(10){ i => Option<Unit>.None };
        if (var387) { // block id: 1253

        } else if ([var387, false, false, var387, var1262, var387, param1247, param1247, param1247, true][8]) { // block id: 1270
            var1656;
            match (var1664) {
                case _ : Array<Unit> => 
                    if (false) { var1809 } else { var1809 } ;
                    let var1813 : Array<Range<UInt64>> = [(UInt64(205)&127..=UInt64(Int16(UInt8(136)))&127:(Int64(UInt16(47))|1)), (UInt64(210)&127..UInt64(Int16(21))&127:((-1)|1)), (UInt64(111)&127..=UInt64(Int16(Int16(64)))&127:((-6)|1)), (UInt64(56)&127..=UInt64(45)&127:22|1), (UInt64(11)&127..=UInt64(188)&127:26|1), (UInt64(16)&127..UInt64(UInt16(UInt8(189)))&127:(115|1)), (UInt64(65)&127..UInt64(112)&127:(Int64(UInt16(UInt16(192)))|1)), (UInt64(93)&127..=UInt64(146)&127:4|1), (UInt64(UInt32(58))&127..=UInt64(Int32(-118))&127:((-25)|1)), (UInt64(178)&127..UInt64(Int8(Int8(-86)))&127:(Int64(UInt64(UInt64(70)))|1))];
                    var1813;
                    var795 %= ((Int16(70)) | 1)
                
                case _ => 
                    ()
                
                case _ => 
                    var1128
                
            }
        };
        ();
        Option<Range<Int16>>.None
    }
;
    static let var2914 : Range<UInt32> = (UInt32(197)&127..UInt32(198)&127:56|1);
    public static func func1279(param1280 : Range<UInt8>) : Range<Int32> { // block id: 1281
        let var1360 : Array<Array<Unit>> = [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]];
        var var1368 : Range<UInt64> = (UInt64(202)&127..=UInt64(UInt8(108))&127:(125|1));
        try { // block id: 1286
            var var1288 : Array<Array<Unit>> = Array<Array<Unit>>(10){ i => [(), (), (), (), (), (), (), (), (), ()] };
            var1288
        } catch (_) { // block id: 1340
            let var1342 : Range<UInt64> = (UInt64(UInt32(UInt16(134)))&127..UInt64(Int8(UInt8(183)))&127:(Int64(Int16(UInt8(UInt8(226))))|1));
            var1342;
            var1138 - UInt64(55);
            if (var387) { var1360 } else { var1360 } 
        } finally { // block id: 1363
            [(UInt64(183)&127..=UInt64(204)&127:(-88)|1), (UInt64(29)&127..=UInt64(50)&127:9|1), var1368, (UInt64(162)&127..=UInt64(173)&127:(-105)|1), (UInt64(199)&127..=UInt64(55)&127:(-40)|1), (UInt64(58)&127..=UInt64(206)&127:(-68)|1), (UInt64(37)&127..UInt64(131)&127:(100|1)), (var1138&127..=UInt64(138)&127:((-27)|1)), var1368, (UInt64(136)&127..=UInt64(229)&127:(-57)|1)];
            [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]]
        }[3][0];
        var loopTimeVar1422 : Int64 = 0;
        do {
            loopTimeVar1422++;
            match ((UInt64(66)&127..=UInt64(170)&127:((-74)|1))) {
                case _ : Array<Bool> => 
                    var1403--;
                    var101;
                    var1128
                
                case _ : Range<UInt8> => 
                    var95 |= var95
                
                case _ => 
                    var532 ^= (-40);
                    false;
                    ()
                
            }
        } while ((var387) && loopTimeVar1422 < 100 ) ;
        (Int32(-38)&127..=Int32(10)&127:(-97)|1)
    }
;
    public func func1272(namedParam1273 ! : UInt16) : Option<Unit> { // block id: 1274
        let var1443 : Float32 = Float32(Float32(Float32(-30.0)));
        let var1453 : Float32 = Float32(36.0);
        match (func1279((var67&127..=var67&127:(var532|1)))) {
            case caseVar1430 => 
                ();
                if (var387) { (true, """
/\\8xG
> #||
""", [Float32(-61.0), Float32(95.0), Float32(35.0), Float32(-60.0), Float32(-121.0), Float32(62.0), Float32(-51.0), Float32(70.0), Float32(88.0), Float32(-42.0)], [Float32(-50.0), Float32(110.0), var1443, Float32(77.0), var1443, Float32(119.0), Float32(58.0), Float32(-55.0), var1453, Float32(57.0)]) } else { var1457 } 
            
            case _ => 
                ();
                var101;
                var1457
            
            case _ : Array<Range<UInt64>> => 
                (var387, ###"-x/1fQRS`:"###, [var1453, Float32(7.0), Float32(64.0), var1453, Float32(-39.0), var1453, var1516, var1453, Float32(69.0), var1516], var1523)
            
            case _ => 
                (UInt64(153), Int32(-107), (var1443, var1533, false, [UInt8(122), UInt8(212), UInt8(83), UInt8(153), UInt8(189), UInt8(246), UInt8(253), UInt8(38), UInt8(191), UInt8(14)], Float32(93.0), var795), UInt32(107));
                var1457
            
        }[3];
        (UInt32(0) as Int64);
        let var1632 : Array<Option<Unit>> = Array<Option<Unit>>(10){ i => Option<Unit>.None };
        if ((var1549 is Interface25)) { var1632 } else { var1632 } [5]
    }
;
    public func func1165(namedParam1166 ! : Range<UInt32>, namedParam1167 ! : Option<Range<Int16>>) : Option<Unit> { // block id: 1168
        func func1181(namedParam1182 ! : (Float32) -> Bool, namedParam1185 ! : Int8, namedParam1186 ! : ((Option<Int64>, Interface27, Unit, UInt32) -> Interface23) -> String, namedParam1189 ! : Array<Bool>) : Unit { // block id: 1190

        }
;
        let var1194 : ((Option<Int64>, Interface27, Unit, UInt32) -> Interface23) -> String = func747;
        try (resource = Class943()) { // block id: 1170
            var var1174 : Array<Float32> = [Float32(-66.0), Float32(53.0), Float32(11.0), Float32(-16.0), Float32(112.0), Float32(38.0), Float32(54.0), Float32(-124.0), Float32(5.0), Float32(-44.0)];
            var1174[3];
            var67 ** (UInt8(45) & 3);
            let var1200 : Bool = false;
            func1181(namedParam1182 : func504, namedParam1185 : Int8(28), namedParam1186 : var1194, namedParam1189 : [var387, true, var1200, false, var1200, false, var387, var1200, false, var387])
        } catch (_) { // block id: 1209
            var loopTimeVar1213 : Range<UInt64> = (UInt64(Int32(UInt8(16)))&127..=UInt64(0)&127:(96|1));
            for (i in loopTimeVar1213 where var387) {

            };
            try (resource = Class943()) { // block id: 1221
                var1224 * var1224;
                (Int32(124)&127..=Int32(-59)&127:(99|1));
                var1128
            } catch (e: Exception) { // block id: 1232
                var101;
                ()
            }
        } finally { // block id: 1235

        };
        var var2759 : Int8 = Int8(-5);
        let var2769 : Range<Int16> = (Int16(58)&127..=Int16(-36)&127:3|1);
        match (([var387, true, true, var387, false, var387, var387, var387, false, false]|>func1238)) {
            case _ : Array<Option<Unit>> => 
                var1523;
                [UInt8(63), var2710, UInt8(167), UInt8(224), var2710, var2751, var67, UInt8(196), UInt8(82), var2710];
                var2759 /= ((Int8(87)) | 1)
            
            case (_,caseVar2764,_,caseVar2765 : Array<Unit>,_,caseVar2766) => 
                var2769;
                var1128
            
            case (caseVar2774,caseVar2775,caseVar2776 : Array<Bool>,_ : Range<Int8>,_,_) => 
                (var532&127..=(-116)&127:(var532|1));
                var387 &&= var387
            
            case _ => 
                (UInt32(187)&127..UInt32(100)&127:(var532|1));
                var101;
                ()
            
        };
        var var2799 : ?Bool = ([(UInt64(15)&127..=UInt64(203)&127:(-123)|1), (UInt64(34)&127..UInt64(Int16(-1))&127:(Int64(Int8(-28))|1)), (UInt64(37)&127..=UInt64(113)&127:(-91)|1), (UInt64(37)&127..UInt64(81)&127:((-43)|1)), (UInt64(152)&127..UInt64(114)&127:20|1), (UInt64(127)&127..UInt64(UInt16(112))&127:((-52)|1)), (UInt64(193)&127..=UInt64(166)&127:46|1), (UInt64(41)&127..UInt64(159)&127:(-18)|1), (UInt64(UInt8(190))&127..=UInt64(98)&127:(1|1)), (UInt64(UInt64(178))&127..=UInt64(UInt64(168))&127:(67|1))] as Bool);
        var var2877 : ?Unit = Option<Unit>.None;
        var var2906 : Unit = ();
        if (try { // block id: 2795
            false
        } finally { // block id: 2797
            var2799;
            false
        }) { (Option<(Option<Unit>, UInt8)>.None ?? var2843)[0] } else { (if (true) { match (var2853) {
            case caseVar2863 : (UInt64, UInt64, Range<UInt16>, Float64) => 
                var387;
                26;
                if (var387) { Option<Unit>.Some(var1128) } else { Option<Unit>.None } 
            
            case caseVar2874 => 
                var2877
            
            case caseVar2881 => 
                if (true) { var2877 } else { var2877 } 
            
            case caseVar2889 : String => 
                var548;
                var795 <<= ((Int16(65)) & 7);
                if (var387) { Option<Unit>.None } else { Option<Unit>.None } 
            
            case _ => 
                (Int8(19)&127..=var2759&127:(30|1));
                var2906;
                Option<Unit>.Some(var101)
            
        } } else { var2877 } ) } 
    }

    public func isClosed(): Bool { return true }
    public func close(): Unit {}
}






public func func1961(param1962 : Array<Option<Unit>>) : Interface27 { // block id: 1963
    let var1966 : ?Unit = (() as Unit);
    (var1966 ?? ());
    let var1981 : Interface946 = Class943();
    let var2006 : Option<(Interface27, String)> = Option<(Interface27, String)>.None;
    if (if (true) { // block id: 1975
        let var1977 : Bool = false;
        var1977
    } else { // block id: 1979
        var1981;
        if (var387) { param1962 } else { param1962 } ;
        false
    }) { (Option<(Interface27, String)>.Some(var1995) ?? (Class943(), var2002)) } else { (var2006 ?? var1995) } [0]
}


public func func1238<T0>() : Float64 where T0 <: Option<Interface27> { // block id: 2247
    var1533
}

func func1912<T0>(param1913 : Option<Int64>, param1914 : (UInt64, Int32, (Float32, Float64, Bool, Array<UInt8>, Float32, Int16), UInt32)) : Float64 where T0 <: Unit { // block id: 1915
    (if (try { // block id: 1923
        var387
    } catch (e: Exception) { // block id: 1925
        var101;
        (Int16(-101)&127..=var795&127:(111|1));
        Float32(-117.0) != var1516
    } finally { // block id: 1934
        false
    }) { ((Int32(99)&127..=Int32(-62)&127:42|1) as Interface27) } else { try { // block id: 1939
        Float32(-46.0) - Float32(-34.0);
        var1128;
        var1945
    } finally { // block id: 1947
        ();
        var532 >> ((75) & 7);
        var1945
    } }  ?? if (false) { Class943(var1516, true, var400, Option<Unit>.None) } else { (var2012|>func1961) } );
    let var2094 : Range<UInt32> = (UInt32(87)&127..UInt32(175)&127:40|1);
    func func2090() : (Bool, String, Array<Float32>, Array<Float32>) { // block id: 2091
        var var2101 : (Float32, Float64, Bool, Array<UInt8>, Float32, Int16) = (Float32(47.0), Float64((-114.0)), ((UInt32(167)&127..UInt32(78)&127:(Int64(Int16(46))|1)) is Option<Interface27>), [UInt8(Int8(-109)), UInt8(Int8(Int8(-94))), UInt8(Int8(UInt8(172))), UInt8(25), UInt8(248), UInt8(Int8(Int8(76))), UInt8(125), UInt8(UInt8(UInt8(166))), UInt8(156), UInt8(166)], Float32(Float32(Float32(Float32(57.0)))), Int16(4));
        match (var2094) {
            case caseVar2098 : UInt8 => 
                var2101;
                var1995;
                (var387, var2002, var1523, [var1516, var1516, var1516, Float32(120.0), var1516, Float32(-49.0), var1516, Float32(-21.0), var1516, Float32(-67.0)])
            
            case caseVar2155 : Array<UInt8> => 
                ();
                var2159
            
            case _ => 
                var2159
            
        }
    }
;
    var var2211 : Interface27 = Class943(Float32(Float32(92.0)), false, Option<Range<Int16>>.None, ((Class943(), "NAV(:K&YN/") as Unit));
    var var2227 : Array<Float32> = [Float32(17.0), Float32(-32.0), Float32(121.0), Float32(105.0), Float32(-116.0), Float32(-84.0), Float32(-76.0), Float32(38.0), Float32(27.0), Float32(79.0)];
    if (if (25 <= 59) { // block id: 2081
        var387
    } else { // block id: 2083
        var1128;
        UInt16(94) >= var783
    }) { // block id: 2088
        func2090()
    } else { // block id: 2185
        (var1457, (), [(UInt64(73)&127..UInt64(226)&127:1|1), (UInt64(136)&127..=UInt64(197)&127:(-28)|1), (UInt64(178)&127..UInt64(173)&127:(-89)|1), (UInt64(186)&127..UInt64(45)&127:(-89)|1), (UInt64(190)&127..UInt64(22)&127:68|1), (UInt64(147)&127..=UInt64(149)&127:(-75)|1), (UInt64(47)&127..UInt64(36)&127:28|1), (UInt64(146)&127..=UInt64(153)&127:(-65)|1), (UInt64(71)&127..UInt64(111)&127:89|1), (UInt64(154)&127..UInt64(139)&127:118|1)], (var1138&127..UInt64(249)&127:(var532|1)), (var532&127..var532&127:(var532|1)))[1];
        var var2207 : Option<Option<Interface27>> = Option<Option<Interface27>>.None;
        (var2207 ?? Option<Interface27>.Some(var2211));
        if (var387) { (var387, ###"[Qe|&6,vO}"###, var2227, [Float32(122.0), Float32(-36.0), Float32(17.0), Float32(122.0), Float32(-122.0), Float32(50.0), Float32(-55.0), Float32(12.0), Float32(33.0), Float32(-78.0)]) } else { (false, ###"6^||;#h'JG"###, var2227, [var1516, var1516, var1516, Float32(-100.0), Float32(-93.0), Float32(16.0), Float32(-38.0), var1516, var1516, Float32(-2.0)]) } 
    };
    func1238<Option<Interface27>>()
}


public func func2289(param2290 : (Float32) -> Bool) : Bool { // block id: 2293
    var var2305 : ((Bool, String, Array<Float32>, Array<Float32>), Unit, Array<Range<UInt64>>, Range<UInt64>, Range<Int64>) = ((true, "'mApjb|\\2a", [Float32(Float32(-83.0)), Float32(Float32(37.0)), Float32(Float32(92.0)), Float32(-76.0), Float32(-108.0), Float32(65.0), Float32(-20.0), Float32(Float32(-45.0)), Float32(Float32(-60.0)), Float32(Float32(28.0))], [Float32(-71.0), Float32(52.0), Float32(-54.0), Float32(-11.0), Float32(-82.0), Float32(113.0), Float32(Float32(60.0)), Float32(-84.0), Float32(Float32(27.0)), Float32(-79.0)]), (), [(UInt64(181)&127..UInt64(41)&127:(-41)|1), (UInt64(183)&127..=UInt64(82)&127:49|1), (UInt64(81)&127..UInt64(54)&127:36|1), (UInt64(86)&127..=UInt64(182)&127:(-121)|1), (UInt64(146)&127..UInt64(175)&127:(-43)|1), (UInt64(70)&127..=UInt64(50)&127:(-25)|1), (UInt64(108)&127..=UInt64(226)&127:37|1), (UInt64(84)&127..UInt64(91)&127:40|1), (UInt64(176)&127..UInt64(131)&127:89|1), (UInt64(220)&127..UInt64(165)&127:(-91)|1)], (UInt64(UInt16(221))&127..UInt64(251)&127:((-55)|1)), ((-49)&127..Int64(UInt16(81))&127:((-28)|1)));
    var var2396 : ?Bool = (Int32(106) as Bool);
    var var2468 : ((UInt64, UInt64, Range<UInt16>, Float64), (Range<Int32>, Float64, Range<Int16>, Int64, Range<UInt64>, Int32, Array<Range<UInt64>>), (UInt64, UInt64, Range<UInt16>, Float64), Range<Int16>, Bool, Int8, UInt32, Array<Array<Unit>>) = ((UInt64(Int32(94)), UInt64(UInt32(UInt8(147))), (UInt16(209)&127..UInt16(85)&127:(-19)|1), 64.0), ((Int32(-10)&127..=Int32(34)&127:(-86)|1), (-7.0), (Int16(48)&127..=Int16(-114)&127:(9|1)), (-57), (UInt64(UInt16(249))&127..UInt64((-18))&127:(32|1)), Int32(103), [(UInt64(206)&127..=UInt64(149)&127:(-78)|1), (UInt64(12)&127..=UInt64(197)&127:115|1), (UInt64(9)&127..UInt64(48)&127:3|1), (UInt64(9)&127..UInt64(157)&127:22|1), (UInt64(231)&127..=UInt64(9)&127:124|1), (UInt64(23)&127..UInt64(24)&127:(-107)|1), (UInt64(237)&127..=UInt64(140)&127:(-39)|1), (UInt64(173)&127..=UInt64(133)&127:(-71)|1), (UInt64(55)&127..=UInt64(160)&127:(-57)|1), (UInt64(159)&127..UInt64(150)&127:79|1)]), (UInt64(Int32(-49)), UInt64(132), (UInt16(213)&127..UInt16(130)&127:(-38)|1), 104.0), (Int16(78)&127..=Int16(-49)&127:(-84)|1), (Class943() is UInt8), Int8(UInt8(69)), UInt32(126), [[(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()], [(), (), (), (), (), (), (), (), (), ()]]);
    (match (try { // block id: 2301
            if (var387) { var2305 } else { var2305 } ;
            if (var387) { (var67&127..=UInt8(65)&127:((-99)|1)) } else { (UInt8(111)&127..=UInt8(4)&127:(107|1)) } 
        } catch (e: Exception) { // block id: 2363
            if (false) { var2367 } else { var2367 } ;
            if (true) { (var67&127..UInt8(87)&127:(var532|1)) } else { (UInt8(41)&127..=UInt8(71)&127:(var532|1)) } 
        } finally { // block id: 2380
            (UInt16(12)&127..UInt16(57)&127:(-114)|1);
            var1138 = UInt64(44);
            var var2388 : Range<UInt8> = (UInt8(242)&127..=UInt8(181)&127:41|1);
            if (var387) { var2388 } else { (UInt8(254)&127..=UInt8(199)&127:20|1) } 
        }) {
        case caseVar2393 => 
            var2396
        
        case _ => 
            (Int32(-55)&127..=var95&127:((-77)|1));
            var2396
        
        case _ : Int64 => 
            var var2413 : ?Unit = ((Int32(99)&127..Int32(4)&127:(Int64((-25))|1)) as Unit);
            [Option<Unit>.None, var2413, var2413, var2413, var2413, Option<Unit>.Some(var101), Option<Unit>.Some(var101), var2413, var2413, Option<Unit>.None];
            if (var387) { var2396 } else { Option<Bool>.Some(true) } 
        
        case caseVar2437 : UInt8 => 
            if (true) { [true, false, false, true, false, false, true, false, false, true] } else { [var387, var387, var387, false, var387, true, var387, var387, var387, true] } ;
            ();
            if (true) { Option<Bool>.Some(var387) } else { Option<Bool>.Some(var387) } 
        
        case _ => 
            Option<Bool>.Some(true)
        
    } ?? if (var2468[4]) { // block id: 2578
        UInt32(190) > UInt32(162)
    } else if (var2468[4]) { // block id: 2585
        true
    } else { // block id: 2587
        true
    })
}

public func func2592(param505 : Float32) : Bool { // block id: 506
    var loopTimeVar537 : Int64 = 0;
    do {
        loopTimeVar537++;
        if (var387) { // block id: 516
            var101;
            var520 = UInt16(81)
        };
        try (resource = Class19<Option<Option<Int64>>>()) { // block id: 527

        } finally { // block id: 528
            """
uz^;,
<a{.tS
""";
            var532 <<= ((var532) & 7);
            ()
        }
    } while ((((Int16(-109)&127..Int16(-50)&127:(43|1)) is Class19<Option<Option<Int64>>>)) && loopTimeVar537 < 100 ) ;
    if (var29.var544) { // block id: 546
        var548
    } else { // block id: 581
        Int16(-46);
        (UInt64(235), var95, var587, UInt32(3))
    }[1];
    var387
}

func func1238(param1239 : Array<Bool>) : (Float32, Float64, Bool, Array<UInt8>, Float32, Int16) { // block id: 1240
    let var2590 : ((Float32) -> Bool) -> Bool = func2289;
    let var2595 : (Float32) -> Bool = func2592;
    var var2609 : Range<UInt16> = (UInt16(55)&127..UInt16(178)&127:95|1);
    let var2658 : Array<UInt8> = [UInt8(10), UInt8(207), UInt8(61), UInt8(120), UInt8(225), UInt8(10), UInt8(38), UInt8(167), UInt8(44), UInt8(84)];
    let var2667 : ?Float64 = ((false as Unit) as Float64);
    var var2681 : UInt8 = UInt8(226);
    var var2700 : Bool = (() is Option<Unit>);
    (match (match (Class943(var1516, var387, var400, Option<Unit>.Some(var101))) {
            case caseVar1881 => 
                ();
                var101;
                'v'
            
            case _ => 
                '0'
            
        }) {
        case _ => 
            Float32(-2.0)
        
    }, (match (var1549) {
        case _ : Range<Int64> => 
            [(UInt64(82)&127..=UInt64(216)&127:(-21)|1), (UInt64(11)&127..UInt64(250)&127:(-94)|1), (UInt64(60)&127..=UInt64(48)&127:(-79)|1), (UInt64(108)&127..UInt64(89)&127:103|1), (UInt64(81)&127..UInt64(21)&127:(-14)|1), (UInt64(230)&127..UInt64(244)&127:1|1), (UInt64(228)&127..UInt64(244)&127:114|1), (UInt64(41)&127..UInt64(12)&127:99|1), (UInt64(136)&127..=UInt64(143)&127:65|1), (UInt64(136)&127..=UInt64(113)&127:(-35)|1)];
            Option<Float64>.Some(var1533)
        
        case _ => 
            if (var387) { Option<Float64>.None } else { Option<Float64>.None } 
        
    } ?? func1912<Unit>(var2250, (UInt64(150), var95, (var1516, (-27.0), var387, [UInt8(130), UInt8(69), UInt8(112), UInt8(177), UInt8(244), UInt8(164), UInt8(140), UInt8(100), UInt8(55), UInt8(35)], Float32(71.0), Int16(36)), var1224))), if ((Float32(-27.0), 70.0, true, [UInt8(54), var67, UInt8(111), UInt8(20), UInt8(150), UInt8(222), UInt8(156), UInt8(223), UInt8(247), var67], var1516, Int16(86))[2]) { // block id: 2283
        let var2285 : Unit = ();
        var2285;
        true
    } else if ((var2595|>var2590)) { // block id: 2597
        var67 >= var67
    } else { // block id: 2601
        var387
    }, match (match ((UInt64(101), UInt64(180), var2609, var1533)) {
            case _ => 
                var2367
            
            case _ => 
                var1138;
                'W'
            
            case (caseVar2623,caseVar2624,caseVar2625 : Int16,_ : Interface26) => 
                if (false) { 'l' } else { var2367 } 
            
            case _ => 
                var95--;
                var795--;
                var2367
            
        }) {
        case caseVar2640 : Array<Array<Unit>> => 
            ();
            [UInt8(203), UInt8(113), var67, var67, var67, var67, var67, UInt8(132), var67, UInt8(196)]
        
        case 's' | 'H' => 
            var2658
        
        case 'g' => 
            if (false) { Option<Float64>.None } else { var2667 } ;
            [UInt8(88), var67, var67, var2676, var67, UInt8(141), var2681, var2676, UInt8(10), UInt8(176)]
        
        case _ : Range<UInt32> => 
            """
^|H+L
VVh/y
""";
            var1403 - var1403;
            var2694
        
        case _ => 
            if (var2700) { [var2681, UInt8(147), UInt8(193), UInt8(40), UInt8(121), var2710, var2681, var2681, var2681, var2710] } else { [UInt8(3), UInt8(179), UInt8(130), UInt8(39), UInt8(48), UInt8(113), UInt8(149), UInt8(7), UInt8(104), UInt8(202)] } 
        
    }, var2721, Int16(Int8(Int8(41))))
}




public func func934<T0, T1>(optionalParam935 ! : UInt64 = UInt64(UInt64(Int8(-124))), namedParam939 ! : (Float32, Float64, Bool, Array<UInt8>, Float32, Int16), namedParam940 ! : Interface24<Array<Option<Unit>>, Option<UInt32>, Option<Interface27>>) : Array<Range<UInt64>> where T0 <: Option<Int64>, T1 <: Option<(Interface27, String)> { // block id: 941
    let var948 : Class943 = Class943();
    var948.func951<Float32, Option<Range<Int16>>, Rune>(optionalParam952 : var548, optionalParam990 : match (var2939) {
        case caseVar2947 => 
            (Int8(52)&127..=Int8(76)&127:(-9)|1)
        
        case caseVar2952 => 
            let var2961 : Range<Int8> = (Int8(-21)&127..=Int8(-3)&127:41|1);
            if (var387) { (Int8(-17)&127..var825&127:((-92)|1)) } else { var2961 } 
        
        case _ : Range<Int8> => 
            (Int16(-8)&127..Int16(23)&127:((-66)|1));
            var2971;
            (var825&127..=var2976&127:(var532|1))
        
        case _ => 
            var var2984 : Range<Int8> = (Int8(-50)&127..Int8(Int8(UInt8(6)))&127:(Int64(Int8(112))|1));
            if (false) { var2984 } else { (Int8(65)&127..=Int8(107)&127:(32|1)) } 
        
    });
    let var3016 : ?Array<Range<UInt64>> = Option<Array<Range<UInt64>>>.None;
    let var3043 : Bool = (Int32(Int8(40)) is Float32);
    ((if (var387) { var3009 } else { var3009 }  ?? if (var387) { var3016 } else { var3016 } ) ?? (try { // block id: 3021
        (var2976&127..var825&127:(var532|1));
        (var783&127..UInt16(123)&127:((-117)|1));
        var3016
    } catch (e: Exception) { // block id: 3031
        UInt8(6) - var67;
        var3016
    } finally { // block id: 3036
        var532 /= ((14) | 1);
        var3016
    } ?? if (var3043) { [(UInt64(253)&127..=UInt64(210)&127:(-69)|1), (UInt64(197)&127..=UInt64(56)&127:(-73)|1), (UInt64(202)&127..UInt64(95)&127:(-88)|1), (UInt64(65)&127..UInt64(53)&127:28|1), (UInt64(143)&127..=UInt64(10)&127:(-42)|1), (UInt64(118)&127..UInt64(247)&127:(-90)|1), (UInt64(55)&127..UInt64(244)&127:34|1), (UInt64(30)&127..=UInt64(237)&127:71|1), (UInt64(96)&127..=UInt64(22)&127:29|1), (UInt64(239)&127..=UInt64(46)&127:(-107)|1)] } else { [(UInt64(77)&127..=UInt64(3)&127:(-18)|1), (UInt64(23)&127..=UInt64(27)&127:(-83)|1), (UInt64(152)&127..=UInt64(1)&127:75|1), (UInt64(148)&127..=UInt64(108)&127:(-108)|1), (UInt64(73)&127..=UInt64(157)&127:(-64)|1), (UInt64(72)&127..UInt64(157)&127:(-111)|1), (UInt64(171)&127..UInt64(190)&127:(-75)|1), (UInt64(223)&127..UInt64(249)&127:113|1), (UInt64(66)&127..UInt64(43)&127:(-114)|1), (UInt64(160)&127..=UInt64(30)&127:114|1)] } ))
}

public func func15(param16 : UInt32) : Option<Int64> { // block id: 17
    var29.func32();
    var var38 : Int16 = Int16(Int8(-10));
    let var169 : Range<Int16> = (Int16(-66)&127..=Int16(UInt16(Int16(-54)))&127:((-50)|1));
    try { // block id: 35
        var38 *= Int16(-89);
        var var44 : Bool = true;
        var44 ||= var44;
        try { // block id: 48
            Class19<Option<Option<Int64>>>();
            """
mA\\4&
4SRr3
""";
            UInt8(114)
        } finally { // block id: 52
            UInt8(163)
        }
    } catch (e: Exception) { // block id: 54
        [var67, UInt8(72), UInt8(197), var67, var67, UInt8(6), UInt8(180), UInt8(241), var67, UInt8(59)][6]
    } finally { // block id: 79
        var169|>func81
    };
    var var221 : UInt8 = UInt8(11);
    let var296 : Interface27 = Class19<Option<Option<Int64>>>();
    let var304 : Bool = false;
    let var308 : Float32 = Float32(-22.0);
    let var313 : Array<UInt8> = Array<UInt8>(10){ i => UInt8(254) };
    let var357 : (Float32, Float64, Bool, Array<UInt8>, Float32, Int16) = (Float32(58.0), Float64((-74.0)), ((43&127..=Int64(UInt8(237))&127:((-124)|1)) is Range<UInt8>), [UInt8(138), UInt8(59), UInt8(55), UInt8(120), UInt8(178), UInt8(171), UInt8(165), UInt8(127), UInt8(133), UInt8(136)], Float32(Float32(51.0)), Int16(-26));
    func func272(param273 : Range<Int16>, namedParam274 ! : Range<Int16>, optionalParam275 ! : Int8 = Int8(22), namedParam277 ! : Range<Int8>) : Bool { // block id: 278
        match (func283(Option<Int64>.None, optionalParam285 : var296, namedParam289 : UInt32(157))) {
            case _ : Int16 => 
                if (var304) { (var308, (-10.0), true, var313, Float32(-8.0), Int16(37)) } else { (var308, var344, true, var313, Float32(79.0), Int16(104)) } 
            
            case caseVar352 : Int16 => 
                (-72);
                var101;
                var357
            
            case caseVar374 : Range<UInt16> => 
                (Float32(28.0), var344, false, [UInt8(147), UInt8(67), UInt8(147), UInt8(44), UInt8(71), UInt8(59), UInt8(211), UInt8(220), UInt8(18), UInt8(136)], var308, Int16(103))
            
            case _ => 
                var387 ||= true;
                var357
            
        }[2]
    }
;
    let var450 : Interface24<Array<Option<Unit>>, Option<UInt32>, Option<Interface27>> = Class19<Option<Option<Int64>>>();
    let var723 : Bool = true;
    func func660(param661 : Interface26, param662 : (Range<Int16>) -> UInt8, optionalParam665 ! : Int8 = Int8(Int8(12)), namedParam668 ! : Int16) : Option<Int64> { // block id: 669
        let var673 : String = """
kMB'B
F=Ugd
""";
        try { // block id: 671
            var673;
            Class19<Option<Option<Int64>>>()
        } catch (e: Exception) { // block id: 676
            var var695 : Int8 = Int8(-24);
            match ([var101, (), var101, (), (), (), var101, (), var101, var101]) {
                case _ => 
                    ();
                    ();
                    var695 &= var695
                
            };
            func283(var700, namedParam289 : UInt32(87))
        } finally { // block id: 703
            try { // block id: 705
                var101;
                var95;
                Option<UInt8>.None
            } catch (_) { // block id: 709
                [UInt8(167), UInt8(39), var67, UInt8(202), UInt8(102), UInt8(46), var67, UInt8(40), UInt8(107), var67];
                if (var723) { var495 } else { var495 } 
            } finally { // block id: 727
                var435;
                var532 |= var532;
                var495
            };
            let var734 : ??Int64 = Option<Option<Int64>>.None;
            var734;
            (Option<Interface23>.None ?? var292)
        };
        var var924 : (Option<Int64>, Interface27, Unit, UInt32) -> Interface23 = { lambdaParameter927 : Option<Int64>, lambdaParameter928 : Interface27, lambdaParameter929 : Unit, lambdaParameter930 : UInt32 => Class19<Option<Option<Int64>>>() };
        var var3056 : Float32 = Float32(Float32(84.0));
        ((var924|>func747), func934<Option<Int64>, Option<(Interface27, String)>>(optionalParam935 : var1138, namedParam939 : (var308, 101.0, false, [UInt8(34), UInt8(162), UInt8(211), UInt8(41), UInt8(245), UInt8(56), UInt8(240), UInt8(145), UInt8(74), UInt8(72)], var3056, Int16(-125)), namedParam940 : Class19<Option<Option<Int64>>>()), (var29 as Int64))[2]
    }
;
    try { // block id: 177
        var var180 : Bool = false;
        if (var180) { // block id: 182
            ();
            ();
            ()
        };
        (var192 ?? UInt32(7));
        Option<Option<Int64>>.None.getOrThrow()
    } finally { // block id: 201
        var var208 : ?Unit = (((-116)&127..=(-9)&127:105|1) as Unit);
        (var208 ?? ());
        try { // block id: 213
            ();
            [var67, UInt8(8), var67, UInt8(77), var221, var221, UInt8(236), UInt8(23), var67, var67];
            Class19<Option<Option<Int64>>>()
        } catch (e: Exception) { // block id: 229
            if (false) { [var101, (), var101, (), (), (), (), var101, var101, var101] } else { [(), var101, var101, var101, var101, (), var101, (), var101, var101] } ;
            var255
        } finally { // block id: 257
            ();
            var67 - UInt8(0);
            Class19<Option<Option<Int64>>>()
        };
        let var483 : Range<UInt8> = (UInt8(226)&127..=UInt8(185)&127:(-85)|1);
        func func264(namedParam265 ! : Interface27, namedParam266 ! : Option<Unit>, optionalParam267 ! : UInt32 = UInt32(46)) : Option<Int64> { // block id: 269
            let var408 : Aggregate404 = Aggregate404();
            if (func272(var169, namedParam274 : (var400 ?? (Int16(32)&127..=Int16(58)&127:106|1)), optionalParam275 : var408.var411, namedParam277 : match (UInt64(211)) {
                case 83 | 251 | 165 => 
                    (Int8(15)&127..=Int8(-109)&127:(-50)|1)
                
                case 149 => 
                    Option<UInt8>.None;
                    var var427 : Range<Int8> = (Int8(90)&127..=Int8(7)&127:(-91)|1);
                    if (var387) { (Int8(-27)&127..=Int8(-75)&127:90|1) } else { var427 } 
                
                case 27 | 9 => 
                    if (var304) { var435 } else { var435 } 
                
                case _ => 
                    var387 ||= var387;
                    (Int8(-42)&127..=Int8(20)&127:((-127)|1))
                
            })) { // block id: 447
                match (var450) {
                    case caseVar454 : Range<UInt32> => 
                        var457;
                        ();
                        if (var387) { var255 } else { Class19<Option<Option<Int64>>>() } 
                    
                    case _ : Option<Int64> => 
                        var101;
                        var var471 : String = ###"?'+( mC`)G"###;
                        if (var304) { var471 } else { "L?${var471}z1dV3$*j" } ;
                        if (true) { var255 } else { Class19<Option<Option<Int64>>>() } 
                    
                    case caseVar480 => 
                        var483;
                        Class19<Option<Option<Int64>>>()
                    
                    case caseVar488 => 
                        var101;
                        Class19<Option<Option<Int64>>>()
                    
                    case _ => 
                        var495;
                        var255
                    
                };
                Class19<Option<Option<Int64>>>.var501
            } else if ((match (var192) {
                case caseVar628 => 
                    Float32(-119.0) / Float32((Int32(var308)) | 1)
                
                case caseVar635 => 
                    var308 ** Float32(Int32(var640) & 3)
                
                case _ => 
                    ();
                    var308 ** Float32(Int32(var308) & 3)
                
                case _ => 
                    var29;
                    Float32(-78.0)
                
            }|>func504)) { // block id: 654
                ();
                [(), (), (), (), (), (), (), (), (), ()][8]
            };
            func660(var255, func81, optionalParam665 : Int8(-94), namedParam668 : Int16(64) | var795)
        }
;
        func264(namedParam265 : Class19<Option<Option<Int64>>>(), namedParam266 : Option<Unit>.None, optionalParam267 : param16)
    }
}

main(): Int64 {
    try {
        let var7 : Float32 = Float32(-30.0);
        var7;
        (func15(UInt32(134)) ?? Int64(var3076))
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var116*var116), 64)
        crccheck.updateBuffer(UInt64(var520*var520), 64)
        crccheck.updateBuffer(UInt64(var3076*var3076), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Class943 {
    func func951<T0, T1, T2>(optionalParam952 ! : (UInt64, Int32, (Float32, Float64, Bool, Array<UInt8>, Float32, Int16), UInt32) = (UInt64(UInt8(Int8(79))), Int32(2), (Float32(Float32(Float32(-128.0))), Float64(Float32(Float32(-41.0))), (Class19<Option<Option<Int64>>>() is Int32), [UInt8(134), UInt8(12), UInt8(Int8(-99)), UInt8(151), UInt8(249), UInt8(Int8(-121)), UInt8(Int8(-44)), UInt8(181), UInt8(Int8(-109)), UInt8(UInt8(108))], Float32(68.0), Int16(UInt8(Int8(1)))), UInt32(UInt16(Int16(-23)))), optionalParam990 ! : Range<Int8> = (Int8(-80)&127..Int8(61)&127:(-38)|1)) : Unit where T0 <: Float32, T1 <: Option<Range<Int16>>, T2 <: Rune { // block id: 992
        let var1021 : ?Int64 = Option<Int64>.Some(21);
        let var1092 : (Range<Int32>, Float64, Range<Int16>, Int64, Range<UInt64>, Int32, Array<Range<UInt64>>) = ((Int32(108)&127..Int32(-39)&127:(-66)|1), Float64(Float32(Float32(Float32(-78.0)))), (Int16(Int16(14))&127..=Int16(92)&127:(40|1)), Int64(UInt64(47)), (UInt64(88)&127..=UInt64(139)&127:20|1), Int32(UInt16(226)), [(UInt64(61)&127..=UInt64(252)&127:24|1), (UInt64(130)&127..=UInt64(140)&127:(-126)|1), (UInt64(194)&127..=UInt64(25)&127:79|1), (UInt64(235)&127..UInt64(83)&127:(-84)|1), (UInt64(175)&127..=UInt64(78)&127:42|1), (UInt64(198)&127..=UInt64(65)&127:(-81)|1), (UInt64(96)&127..UInt64(184)&127:49|1), (UInt64(245)&127..=UInt64(209)&127:11|1), (UInt64(217)&127..UInt64(7)&127:(-10)|1), (UInt64(117)&127..=UInt64(15)&127:35|1)]);
        var var1114 : Bool = false;
        if ([false, true, true, false, true, false, true, false, true, true][6]) { // block id: 998
            var1002[3];
            var95 = var95;
            (var1021 ?? var532)
        } else if (if (match (var1028) {
            case _ => 
                ();
                var387
            
        }) { // block id: 1053
            var387
        } else { // block id: 1055
            'D';
            true
        }) { // block id: 1058
            var var1061 : Bool = ([((UInt64(212), UInt64(86), (UInt16(62)&127..UInt16(28)&127:(-113)|1), 65.0) is Class19<Option<Option<Int64>>>), true, false, ((Int8(111)&127..Int8(-91)&127:((-83)|1)) is Range<Int16>), true, false, ((Int16(115)&127..Int16(-91)&127:((-74)|1)) is Int32), true, false, false] is Range<UInt32>);
            if (var1061) { 'N' } else { 'f' } ;
            var1092[3]
        } else { // block id: 1111
            var1114 ||= false;
            match (var95) {
                case caseVar1121 => 
                    ()
                
                case _ => 
                    var1128;
                    var101
                
                case caseVar1133 => 
                    Int16(-79);
                    var1138 <<= ((var1138) & 7);
                    ()
                
                case _ => 
                    (UInt16(203)&127..UInt16(157)&127:(-97)|1);
                    ();
                    var795 += var795
                
            };
            match {
                case var387 => 
                var532
                case _ => 
                (var795&127..=var795&127:(var532|1));
                var532
            }
        };
        var var2923 : UInt8 = UInt8(198);
        (func1165(namedParam1166 : if (true) { var2914 } else { var2914 } , namedParam1167 : ((UInt8(228)&127..var2923&127:(var532|1)), 'E', var1092, (Int32(-117)&127..Int32(-29)&127:(var532|1)), Option<Range<Int16>>.None)[4]) ?? var2923++)
    }

}

extend Aggregate404 {

}

