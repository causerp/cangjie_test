/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// (CJNATIVE) EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// (CJNATIVE) RUN-EXEC: %run %run_opt %output %run_args
// (not CJNATIVE) ERRCHECK: %compiler %overflow_wrapping %f %cmp_opt 

public const var_1694031620313_18 : Bool = true
public var var_1694031620313_124 : Int8 = Int8(-49)
public const var_1694031620313_295 : UInt8 = 17
public var var_1694031620313_359 : Bool = (Float64(Float64(11.0)) is Array<Int16>)
public var var_1694031620313_405 : Enum_1694031620313_393 = Enum_1694031620313_393.enumValue_1694031620313_407
var var_1694031620313_434 : Unit = ()
public let var_1694031620313_468 : Int32 = Int32(-12)
var var_1694031620313_471 : Enum_1694031620313_438 = Enum_1694031620313_438.enumValue_1694031620313_473(Float64(Float32(0.0)), ((Int8(Int8(2))&127)..(Int8(Int8(UInt8(Int8(23))))&127):(Int64(Int16(Int16(75)))|1)), Int8(UInt8(99)))
public var var_1694031620313_556 : Int16 = Int16(Int16(Int8(103)))
public let var_1694031620313_568 : Option<Int8> = (((UInt32(UInt32(227))&127)..(UInt32(UInt32(50))&127):(Int64(66)|1)) as Int8)
let var_1694031620313_657 : (Int8, Enum_1694031620313_75) = (Int8(-78), Enum_1694031620313_75.enumValue_1694031620313_661(Int16(-34), Enum_1694031620313_393.enumValue_1694031620313_407, func_1694031620313_288))
var var_1694031620313_810 : UInt16 = UInt16(215)
public let var_1694031620313_816 : ?Unit = Option<Unit>.None
var var_1694031620313_852 : Unit = ()
var var_1694031620313_942 : UInt32 = UInt32(1)
var var_1694031620313_1016 : Class_1694031620313_278 = Class_1694031620313_278()
public let var_1694031620313_1037 : Range<UInt32> = ((UInt32(UInt32(108))&127)..(UInt32(UInt32(211))&127):(Int64(41)|1))
public var var_1694031620313_1159 : Float32 = Float32(Float32(Float32(45.0)))
public var var_1694031620313_1175 : VArray<Int64, $8> = [Int64(-115), Int64(-67), Int64(-116), Int64(-92), Int64(16), Int64(-31), Int64(-73), Int64(44)]
public enum Enum_1694031620313_75 {
    defaultValue |
    enumValue_1694031620313_80(Range<UInt32>) |
    enumValue_1694031620313_661(Int16, Enum_1694031620313_393, (Range<Int8>) -> Array<Bool>)
}
public open class Class_1694031620313_190 {
    public init() { // block id: 192

    }
;
    static prop var_1694031620313_210 : Class_1694031620313_190 { // block id: 211
        get() { // block id: 213
            ();
            UInt32(Int32(Int8(UInt8(59))));
            Class_1694031620313_190()
        }

    };
    private static let var_1694031620313_524 : Range<Int32> = ((Int32(Int32(-112))&127)..=(Int32(Int32(-27))&127):(Int64(-21)|1));
    private static var var_1694031620313_551 : Array<UInt64> = [UInt64(182), UInt64(208), UInt64(145), UInt64(229), UInt64(2), UInt64(83), UInt64(53), UInt64(51), UInt64(143), UInt64(5)];
    public static func func_1694031620313_383(namedParam_1694031620313_384 ! : Int8, optionalParam_1694031620313_385 ! : Range<UInt16> = ((UInt16(UInt16(Int8(24)))&127)..(UInt16(UInt16(170))&127):(Int64(-79)|1))) : Unit { // block id: 391
        var var_1694031620313_401 : Option<Enum_1694031620313_393> = (Int32(-49) as Enum_1694031620313_393);
        let var_1694031620313_426 : Unit = ();
        match ((var_1694031620313_401 ?? var_1694031620313_405)) {
            case enumValue_1694031620313_407 => 
                let var_1694031620313_412 : Unit = ();
                var_1694031620313_412
            
            case _ => 
                ((UInt16(UInt16(176))&127)..=(UInt16(UInt16(87))&127):(Int64(-7)|1));
                ()
            
            case enumValue_1694031620313_407 => 
                var_1694031620313_426;
                Int64(-38);
                var_1694031620313_426
            
            case _ => 
                var_1694031620313_434
            
        };
        match (match (try { // block id: 441
            var_1694031620313_434;
            ();
            var var_1694031620313_454 : UInt64 = UInt64(127);
            const var_1694031620313_459 : UInt = 141;
            if (var_1694031620313_359) { Enum_1694031620313_438.enumValue_1694031620313_447([UInt64(21), var_1694031620313_454, UInt64(204), var_1694031620313_454, var_1694031620313_459, UInt64(22), UInt64(23), var_1694031620313_454, var_1694031620313_454, var_1694031620313_454], Float32(-39.0), var_1694031620313_468) } else { var_1694031620313_471 } 
        } finally { // block id: 489
            let var_1694031620313_491 : Range<Int64> = ((Int64(Int64(60))&127)..=(Int64(Int64(37))&127):(Int64(-21)|1));
            var_1694031620313_491;
            var var_1694031620313_495 : Float64 = Float64(Float32(-42.0));
            var_1694031620313_495 /= Float64((Int32(Float64(-61.0))) | 1);
            Enum_1694031620313_438.enumValue_1694031620313_473(Float64(100.0), ((Int8(Int8(-48))&127)..=(Int8(Int8(-26))&127):(Int64(107)|1)), var_1694031620313_124)
        }) {
            case _ : Int32 => 
                Int8(-57) * var_1694031620313_124
            
            case defaultValue => 
                Int8(117) * Int8(-70)
            
            case _ : Range<UInt8> => 
                ();
                Option<Range<Int32>>.Some(var_1694031620313_524);
                var_1694031620313_124
            
            case _ => 
                var_1694031620313_359 &&= var_1694031620313_18;
                var_1694031620313_124
            
        }) {
            case caseVar_1694031620313_536 => 
                var_1694031620313_426
            
            case -64 => 
                var_1694031620313_434
            
            case _ : Option<Range<Int32>> => 
                ()
            
            case _ => 
                var_1694031620313_551;
                ();
                var_1694031620313_556 %= ((Int16(23)) | 1)
            
        };
        ()
    }
;
    static prop var_1694031620313_579 : (Option<Int8>, Class_1694031620313_190, Class_1694031620313_278, Enum_1694031620313_438, Range<Int64>) { // block id: 580
        get() { // block id: 582
            ();
            ((UInt64(UInt64(101))&127)..=(UInt64(UInt64(237))&127):(Int64(50)|1));
            (([Int16(-100), Int16(-60), Int16(-11), Int16(7), Int16(101), Int16(57), Int16(16), Int16(91), Int16(120), Int16(-124)] as Int8), Class_1694031620313_190(), Class_1694031620313_278(), Enum_1694031620313_438.enumValue_1694031620313_601(VArray<Bool, $8>({ i => true}), (Int32(40) is (Range<Int8>) -> Array<Bool>), ([true, false, true, false, false, false, true, false, true, false] as Int8)), ((Int64(Int64(-98))&127)..(Int64(Int64(44))&127):(Int64(-4)|1)))
        }

    };
    func func_1694031620313_275() : Range<UInt16> { // block id: 276
        let var_1694031620313_704 : Int = Int64(-75);
        let var_1694031620313_729 : (VArray<Bool, $8>, Bool, Range<UInt8>, Int64, (Int8, Enum_1694031620313_75), VArray<Bool, $8>) = (VArray<Bool, $8>(repeat: ([Int16(28), Int16(113), Int16(116), Int16(85), Int16(-107), Int16(-71), Int16(55), Int16(4), Int16(-29), Int16(96)] is Enum_1694031620313_75)), false, ((UInt8(UInt8(84))&127)..(UInt8(UInt8(Int8(-92)))&127):(Int64(-10)|1)), Int64(Int16(UInt8(UInt8(215)))), (Int8(-19), Enum_1694031620313_75.enumValue_1694031620313_80(((UInt32(UInt32(241))&127)..=(UInt32(UInt32(51))&127):(Int64(-61)|1)))), VArray<Bool, $8>({ i => true}));
        func func_1694031620313_282<T0>() : Class_1694031620313_278 { // block id: 283
            var var_1694031620313_698 : Range<UInt8> = ((UInt8(UInt8(217))&127)..(UInt8(UInt8(54))&127):(Int64(81)|1));
            const var_1694031620313_1011 : UInt64 = 224;
            if ((((Int8(Int8(-91))&127)..(Int8(Int8(85))&127):(Int64(-10)|1))|>func_1694031620313_288)[7]) { // block id: 376
                func_1694031620313_378()
            } else if (try { // block id: 633
                let var_1694031620313_646 : Range<UInt8> = ((UInt8(UInt8(UInt8(76)))&127)..=(UInt8(UInt8(13))&127):(Int64(Int8(64))|1));
                let var_1694031620313_654 : Int = Int64(12);
                (VArray<Bool, $8>(repeat: var_1694031620313_18), var_1694031620313_18, var_1694031620313_646, var_1694031620313_654, var_1694031620313_657, VArray<Bool, $8>({ i => true}))
            } catch (e: Exception) { // block id: 679
                UInt8(221) & UInt8(224);
                UInt16(26);
                const var_1694031620313_694 : Bool = true;
                (VArray<Bool, $8>(repeat: var_1694031620313_18), var_1694031620313_694, var_1694031620313_698, var_1694031620313_704, (var_1694031620313_124, Enum_1694031620313_75.enumValue_1694031620313_661(Int16(-27), Enum_1694031620313_393.enumValue_1694031620313_407, func_1694031620313_288)), VArray<Bool, $8>(repeat: var_1694031620313_359))
            } finally { // block id: 721
                var var_1694031620313_724 : UInt32 = UInt32(Int8(-121));
                var_1694031620313_724--;
                var_1694031620313_359;
                var_1694031620313_729
            }[1]) { // block id: 789
                try { // block id: 791
                    if (var_1694031620313_359) { Class_1694031620313_278([UInt64(34), UInt64(245), UInt64(212), UInt64(159), UInt64(193), UInt64(135), UInt64(78), UInt64(48), UInt64(46), UInt64(119)], ((UInt64(var_1694031620313_1011)&127)..=(UInt64(var_1694031620313_1011)&127):(Int64(-45)|1))) } else { var_1694031620313_1016 } 
                } finally { // block id: 1018
                    var_1694031620313_1016
                }
            } else { // block id: 1020
                try { // block id: 1022
                    var_1694031620313_1016
                } finally { // block id: 1024
                    ((UInt32(UInt32(78))&127)..(UInt32(UInt32(177))&127):(Int64(77)|1));
                    var_1694031620313_1016
                }
            }
        }
;
        func_1694031620313_282<Int32>().var_1694031620313_1028
    }

}

public func func_1694031620313_194(param_1694031620313_195 : Rune, param_1694031620313_196 : Range<Int32>, namedParam_1694031620313_197 ! : UInt8, optionalParam_1694031620313_198 ! : Enum_1694031620313_75 = Enum_1694031620313_75.enumValue_1694031620313_80(((UInt32(UInt32(183))&127)..=(UInt32(UInt32(UInt8(237)))&127):(Int64(Int8(108))|1)))) : Class_1694031620313_190 { // block id: 206
    Class_1694031620313_190.var_1694031620313_210
}


public open class Class_1694031620313_278 <: Class_1694031620313_190 {
    public init() { // block id: 280

    }
;
    init(param_1694031620313_796 : Array<UInt64>, param_1694031620313_797 : Range<UInt64>) { // block id: 798
        var var_1694031620313_861 : Unit = ();
        let var_1694031620313_868 : (VArray<Bool, $8>, Bool, Range<UInt8>, Int64, (Int8, Enum_1694031620313_75), VArray<Bool, $8>) = (VArray<Bool, $8>(repeat: ([true, true, true, true, false, false, false, false, true, false] is UInt64)), (((Int16(Int16(98))&127)..=(Int16(Int16(12))&127):(Int64(4)|1)) is Option<Range<Int32>>), ((UInt8(UInt8(49))&127)..=(UInt8(UInt8(207))&127):(Int64(72)|1)), Int64(Int64(-61)), (Int8(58), Enum_1694031620313_75.enumValue_1694031620313_661(Int16(25), Enum_1694031620313_393.enumValue_1694031620313_407, func_1694031620313_288)), VArray<Bool, $8>(repeat: (Option<Range<Int32>>.None is Range<Int8>)));
        var var_1694031620313_953 : Array<Bool> = [false, (Int64(UInt32(Int32(88))) is (Option<Int8>, Class_1694031620313_190, Class_1694031620313_278, Enum_1694031620313_438, Range<Int64>)), (VArray<Bool, $8>({ i => false}) is (VArray<Bool, $8>, Bool, Range<UInt8>, Int64, (Int8, Enum_1694031620313_75), VArray<Bool, $8>)), false, true, true, true, (Option<Int8>.None is Array<Option<Unit>>), ((UInt32(Int8(1)) as Int8) is Int64), true];
        (try { // block id: 807
            var_1694031620313_810 %= ((UInt16(119)) | 1);
            ();
            [var_1694031620313_816, var_1694031620313_816, var_1694031620313_816, Option<Unit>.Some(var_1694031620313_434), var_1694031620313_816, Option<Unit>.Some(var_1694031620313_434), var_1694031620313_816, Option<Unit>.None, Option<Unit>.Some(var_1694031620313_434), Option<Unit>.None]
        } finally { // block id: 830
            const var_1694031620313_833 : Int8 = 74;
            -var_1694031620313_833;
            let var_1694031620313_838 : ?Unit = (((UInt16(UInt16(Int16(UInt8(196))))&127)..=(UInt16(UInt16(UInt8(Int8(-26))))&127):(Int64(Int32(Int16(-116)))|1)) as Unit);
            [var_1694031620313_816, var_1694031620313_838, Option<Unit>.Some(var_1694031620313_852), Option<Unit>.Some(var_1694031620313_852), var_1694031620313_838, Option<Unit>.None, Option<Unit>.None, Option<Unit>.Some(var_1694031620313_861), var_1694031620313_816, Option<Unit>.None]
        }[9] ?? match (var_1694031620313_868) {
            case caseVar_1694031620313_938 : (VArray<Bool, $8>, Bool, Range<UInt8>, Int64, (Int8, Enum_1694031620313_75), VArray<Bool, $8>) => 
                var_1694031620313_942++;
                var_1694031620313_359 ||= var_1694031620313_18
            
            case (_ : (Int8, Enum_1694031620313_75),caseVar_1694031620313_949 : VArray<Bool, $8>,caseVar_1694031620313_950 : UInt64,_,_ : Range<Int8>,_ : Range<Int8>) => 
                var_1694031620313_953;
                var_1694031620313_861
            
            case (caseVar_1694031620313_995,caseVar_1694031620313_996 : Bool,caseVar_1694031620313_997 : UInt64,caseVar_1694031620313_998 : Array<Int16>,_ : Array<Option<Unit>>,_) => 
                var_1694031620313_556;
                var_1694031620313_852
            
            case _ => 
                var_1694031620313_942 += var_1694031620313_942
            
        })
    }
;
    var var_1694031620313_1028 : Range<UInt16> = ((UInt16(UInt16(28))&127)..=(UInt16(UInt16(87))&127):(Int64(-56)|1));
    public static const var_1694031620313_1183 : UInt32 = 109
}

func func_1694031620313_288(param_1694031620313_289 : Range<Int8>) : Array<Bool> { // block id: 290
    var var_1694031620313_301 : Bool = ([UInt64(UInt32(10)), UInt64(Int64(24)), UInt64(103), UInt64(39), UInt64(Int16(Int16(65))), UInt64(UInt16(UInt8(242))), UInt64(UInt32(8)), UInt64(7), UInt64(Int8(-17)), UInt64(Int64(UInt16(203)))] is Range<Int16>);
    var var_1694031620313_331 : VArray<Bool, $8> = [true, false, true, false, false, true, false, true];
    match (if (var_1694031620313_295 != UInt8(152)) { // block id: 298
        var_1694031620313_301 ||= var_1694031620313_301;
        var var_1694031620313_326 : Class_1694031620313_278 = Class_1694031620313_278();
        var_1694031620313_326;
        var_1694031620313_124
    } else if ((var_1694031620313_331 is Int16)) { // block id: 333
        var_1694031620313_124 + Int8(62)
    } else { // block id: 337
        let var_1694031620313_342 : Range<UInt16> = ((UInt16(UInt16(183))&127)..=(UInt16(UInt16(130))&127):(Int64(-77)|1));
        if (var_1694031620313_301) { ((UInt16(UInt16(129))&127)..=(UInt16(UInt16(86))&127):(Int64(-9)|1)) } else { var_1694031620313_342 } ;
        ();
        -Int8(-59)
    }) {
        case _ => 
            false || var_1694031620313_18;
            var var_1694031620313_371 : Array<Bool> = [false, true, true, false, false, true, true, false, false, true];
            if (true) { [false, false, var_1694031620313_359, true, false, var_1694031620313_301, var_1694031620313_18, var_1694031620313_301, var_1694031620313_359, false] } else { var_1694031620313_371 } 
        
    }
}

public enum Enum_1694031620313_393 {
    defaultValue |
    enumValue_1694031620313_407
}

public enum Enum_1694031620313_438 {
    defaultValue |
    enumValue_1694031620313_447(Array<UInt64>, Float32, Int32) |
    enumValue_1694031620313_473(Float64, Range<Int8>, Int8) |
    enumValue_1694031620313_601(VArray<Bool, $8>, Bool, Option<Int8>)
}

func func_1694031620313_378() : Class_1694031620313_278 { // block id: 379
    let var_1694031620313_572 : Int8 = Int8(-31);
    Class_1694031620313_190.func_1694031620313_383(namedParam_1694031620313_384 : (var_1694031620313_568 ?? var_1694031620313_572));
    Class_1694031620313_190.var_1694031620313_579[2]
}



main(): Int64 {
    try {
        var var_1694031620313_24 : UInt32 = UInt32(Int16(63));
        let var_1694031620313_51 : Range<Int64> = ((Int64(Int64(101))&127)..(Int64(Int64(45))&127):(Int64(17)|1));
        let var_1694031620313_56 : Unit = ();
        if (var_1694031620313_18 && true) { // block id: 21
            let var_1694031620313_28 : UInt32 = UInt32(Int32(38));
            var_1694031620313_24 -= var_1694031620313_28;
            var_1694031620313_24;
            [Int16(-12), Int16(-116), Int16(-17), Int16(-51), Int16(75), Int16(-60), Int16(14), Int16(-38), Int16(-33), Int16(96)]
        } else if (VArray<Bool, $8>(repeat: var_1694031620313_18)[5]) { // block id: 45
            if (var_1694031620313_18) { r'W' } else { r'a' } ;
            var_1694031620313_51;
            [Int16(88), Int16(-47), Int16(-57), Int16(-25), Int16(32), Int16(46), Int16(2), Int16(119), Int16(93), Int16(-21)]
        } else { // block id: 54
            var_1694031620313_56;
            let var_1694031620313_60 : Int16 = Int16(7);
            [var_1694031620313_60, Int16(106), var_1694031620313_60, Int16(-86), Int16(34), Int16(100), Int16(16), Int16(64), Int16(-8), Int16(23)]
        }[0];
        let var_1694031620313_78 : Enum_1694031620313_75 = Enum_1694031620313_75.enumValue_1694031620313_80(((UInt32(UInt32(156))&127)..(UInt32(UInt32(Int32(-4)))&127):(Int64(-14)|1)));
        const var_1694031620313_235 : Bool = false;
        let var_1694031620313_238 : Rune = r'v';
        let var_1694031620313_247 : Option<Range<Int32>> = (Float32(Float32(97.0)) as Range<Int32>);
        let var_1694031620313_252 : Range<Int32> = ((Int32(Int32(UInt16(Int16(Int16(-111)))))&127)..(Int32(Int32(UInt16(UInt8(244))))&127):(Int64(UInt8(109))|1));
        let var_1694031620313_1098 : Class_1694031620313_190 = Class_1694031620313_190();
        func func_1694031620313_186<T0, T1>(param_1694031620313_187 : UInt16) : Array<UInt64> { // block id: 188
            var var_1694031620313_228 : Int32 = Int32(-27);
            func_1694031620313_194(if (var_1694031620313_18) { // block id: 222
                r'x'
            } else if (var_1694031620313_18) { // block id: 225
                var_1694031620313_228++;
                r'D'
            } else { // block id: 231
                ();
                if (var_1694031620313_235) { var_1694031620313_238 } else { r'z' } 
            }, (var_1694031620313_247 ?? var_1694031620313_252), namedParam_1694031620313_197 : UInt8(31), optionalParam_1694031620313_198 : (var_1694031620313_124, Enum_1694031620313_75.enumValue_1694031620313_80(((UInt32(UInt32(163))&127)..(UInt32(UInt32(244))&127):(Int64(101)|1))))[1]).func_1694031620313_275();
            var var_1694031620313_1064 : Array<UInt64> = [UInt64(UInt64(Int16(UInt16(138)))), UInt64(UInt64(UInt64(165))), UInt64(39), UInt64(Int16(UInt8(Int8(66)))), UInt64(38), UInt64(Int16(UInt8(183))), UInt64(UInt8(Int8(UInt8(10)))), UInt64(UInt8(131)), UInt64(147), UInt64(Int8(-95))];
            if (match ((Enum_1694031620313_75.enumValue_1694031620313_80(var_1694031620313_1037), var_1694031620313_405, var_1694031620313_295, var_1694031620313_78, Class_1694031620313_190(), var_1694031620313_1016)[3]) {
                case _ => 
                    "L=t++GcPP2";
                    const var_1694031620313_1050 : Unit = ();
                    var_1694031620313_1050;
                    Int64(79) <= Int64(105)
                
            }) { // block id: 1055
                var var_1694031620313_1110 : UInt64 = UInt64(31);
                if (true) { // block id: 1058
                    if (true) { Class_1694031620313_278() } else { Class_1694031620313_278(var_1694031620313_1064, ((UInt64(UInt64(6))&127)..(UInt64(UInt64(253))&127):(Int64(112)|1))) } 
                } else if (var_1694031620313_359) { // block id: 1093
                    var_1694031620313_852;
                    if (var_1694031620313_18) { var_1694031620313_1098 } else { var_1694031620313_1098 } ;
                    Class_1694031620313_278()
                } else { // block id: 1102
                    var_1694031620313_56;
                    ();
                    if (var_1694031620313_235) { Class_1694031620313_278([var_1694031620313_1110, var_1694031620313_1110, var_1694031620313_1110, var_1694031620313_1110, UInt64(84), UInt64(109), UInt64(87), var_1694031620313_1110, var_1694031620313_1110, UInt64(152)], ((UInt64(UInt64(224))&127)..=(UInt64(var_1694031620313_1110)&127):(Int64(29)|1))) } else { var_1694031620313_1098 } 
                };
                var var_1694031620313_1135 : UInt = UInt64(213);
                [var_1694031620313_1110, UInt64(116), var_1694031620313_1110, UInt64(210), var_1694031620313_1110, UInt64(98), UInt64(228), var_1694031620313_1135, UInt64(75), UInt64(90)]
            } else { // block id: 1139
                try { // block id: 1141
                    var_1694031620313_1064
                } catch (e: Exception) { // block id: 1143
                    if (var_1694031620313_359) { Enum_1694031620313_393.enumValue_1694031620313_407 } else { var_1694031620313_405 } ;
                    if (var_1694031620313_235) { var_1694031620313_78 } else { var_1694031620313_78 } ;
                    if (false) { [UInt64(137), UInt64(199), UInt64(147), UInt64(71), UInt64(70), UInt64(48), UInt64(152), UInt64(102), UInt64(110), UInt64(194)] } else { [UInt64(176), UInt64(26), UInt64(122), UInt64(172), UInt64(116), UInt64(248), UInt64(141), UInt64(242), UInt64(126), UInt64(147)] } 
                } finally { // block id: 1156
                    var_1694031620313_1159 += var_1694031620313_1159;
                    var var_1694031620313_1167 : Range<UInt64> = ((UInt64(UInt64(64))&127)..=(UInt64(UInt64(104))&127):(Int64(52)|1));
                    if (var_1694031620313_18) { var_1694031620313_1167 } else { ((UInt64(UInt64(241))&127)..=(UInt64(UInt64(9))&127):(Int64(30)|1)) } ;
                    [UInt64(173), UInt64(250), UInt64(102), UInt64(211), UInt64(230), UInt64(243), UInt64(233), UInt64(69), UInt64(253), UInt64(40)]
                }
            }
        }
;
        const var_1694031620313_1192 : Int64 = 66;
        try { // block id: 73
            var var_1694031620313_94 : Int16 = Int16(Int8(Int8(76)));
            var var_1694031620313_111 : Float32 = Float32(-64.0);
            var var_1694031620313_132 : Unit = ();
            match (var_1694031620313_78) {
                case enumValue_1694031620313_80(_ : Float32) => 
                    var_1694031620313_56;
                    var_1694031620313_56;
                    var_1694031620313_94 <<= ((Int16(-109)) & 7)
                
                case enumValue_1694031620313_80(_ : UInt64) => 
                    var var_1694031620313_105 : UInt32 = UInt32(Int16(Int16(33)));
                    var_1694031620313_24 / ((var_1694031620313_105) | 1);
                    var_1694031620313_111 -= Float32(-70.0)
                
                case caseVar_1694031620313_116 : Array<UInt64> => 
                    var_1694031620313_56
                
                case _ : Int32 => 
                    var_1694031620313_124 -= var_1694031620313_124;
                    ()
                
                case _ => 
                    var_1694031620313_132
                
            };
            var var_1694031620313_138 : UInt16 = UInt16(193);
            var var_1694031620313_163 : Bool = (Enum_1694031620313_75.enumValue_1694031620313_80(((UInt32(UInt32(Int16(119)))&127)..=(UInt32(UInt32(182))&127):(Int64(UInt32(158))|1))) is Float32);
            if (false) { // block id: 136
                var_1694031620313_138;
                VArray<Bool, $8>(repeat: var_1694031620313_18)
            } else if (false) { // block id: 150
                VArray<Bool, $8>(repeat: var_1694031620313_18)
            } else { // block id: 160
                var_1694031620313_163 ||= true;
                VArray<Bool, $8>(repeat: true)
            };
            Int64(Int64(102))
        } catch (_) { // block id: 184
            func_1694031620313_186<String, Int32>(var_1694031620313_810);
            var_1694031620313_1175[5]
        } finally { // block id: 1178
            ((Int32(Int32(91))&127)..(Int32(Int32(104))&127):(Int64(-58)|1));
            Class_1694031620313_278.var_1694031620313_1183;
            (Option<Int64>.Some(var_1694031620313_1192) ?? Int64(-110))
        }
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var_1694031620313_24*var_1694031620313_24), 64)
        crccheck.updateBuffer(UInt64(var_1694031620313_124*var_1694031620313_124), 64)
        crccheck.updateBuffer(UInt64(var_1694031620313_295*var_1694031620313_295), 64)
        crccheck.updateBuffer(UInt64(var_1694031620313_468*var_1694031620313_468), 64)
        crccheck.updateBuffer(UInt64(var_1694031620313_556*var_1694031620313_556), 64)
        crccheck.updateBuffer(UInt64(var_1694031620313_810*var_1694031620313_810), 64)
        crccheck.updateBuffer(UInt64(var_1694031620313_942*var_1694031620313_942), 64)
        crccheck.updateBuffer(UInt64(var_1694031620313_1192*var_1694031620313_1192), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Int32 {
        var i = 0
        var res = ""
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
        if ( res == "234341414412270664443420225637303027" ){
            return 0
        }
        return 1
    }
}
extend Enum_1694031620313_75 {

}

extend Enum_1694031620313_438 {

}

extend Enum_1694031620313_393 {

}
// ASSERT: scan-1 sema_varray_captured
// ASSERT: scan-1 sema_varray_cjvm_in_ref_type

