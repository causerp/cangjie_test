/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// EXEC: %compiler %overflow_wrapping %cmp_opt %f -o %output
// RUN-EXEC: %run %run_opt %output %run_args 

public var var_1669219250438_10 : UInt8 = UInt8(Int8(UInt8(102)))
var var_1669219250438_53 : Interface_1669219250438_18 = Class_1669219250438_15()
public var var_1669219250438_70 : Rune = r'U'
public let var_1669219250438_93 : Bool = (r'z' is (Int16, Rune))
public var var_1669219250438_97 : Array<(Int16, Rune)> = [(Int16(97), r'C'), (Int16(Int16(-52)), r'9'), (Int16(-113), r'D'), (Int16(UInt16(UInt16(63))), r'W'), (Int16(-120), r'Z'), (Int16(-50), r'X'), (Int16(92), r'V'), (Int16(Int16(-119)), r'Q'), (Int16(Int8(-96)), r'c'), (Int16(UInt16(124)), r'G')]
public let var_1669219250438_139 : Array<UInt64> = [UInt64(127), UInt64(90), UInt64(243), UInt64(UInt64(73)), UInt64(Int16(38)), UInt64(20), UInt64(Int32(UInt32(UInt16(235)))), UInt64(53), UInt64(245), UInt64(227)]
public var var_1669219250438_165 : Unit = ()
public var var_1669219250438_187 : Bool = true
public let var_1669219250438_258 : Int16 = Int16(Int16(-81))
public var var_1669219250438_279 : UInt16 = UInt16(14)
var var_1669219250438_331 : Int64 = 44
public var var_1669219250438_380 : Range<Int32> = ((Int32(58)&127)..=(Int32(-55)&127):((-46)|1))
public var var_1669219250438_383 : UInt32 = UInt32(59)
public let var_1669219250438_430 : Option<Int64> = Option<Int64>.None
public let var_1669219250438_438 : Bool = false
public let var_1669219250438_455 : Int16 = Int16(54)
public let var_1669219250438_476 : Int8 = Int8(UInt8(Int8(UInt8(60))))
var var_1669219250438_526 : Option<Bool> = ((UInt64(Int8(82)) as UInt8) as Bool)
public let var_1669219250438_536 : Array<UInt16> = [UInt16(218), UInt16(252), UInt16(209), UInt16(79), UInt16(234), UInt16(107), UInt16(111), UInt16(168), UInt16(102), UInt16(183)]
public let var_1669219250438_547 : UInt32 = UInt32(Int8(-121))
let var_1669219250438_557 : Int8 = Int8(UInt8(Int8(UInt8(150))))
public let var_1669219250438_578 : UInt64 = UInt64(Int64(Int32(Int8(Int8(92)))))
public var var_1669219250438_604 : (Int16, Rune) = (Int16(-15), r't')
public var var_1669219250438_666 : UInt64 = UInt64(186)
public var var_1669219250438_791 : Float32 = Float32(51.0)
public var var_1669219250438_800 : Int32 = Int32(UInt8(58))
public var var_1669219250438_811 : Range<Int8> = ((Int8(UInt8(UInt8(Int8(-104))))&127)..=(Int8(UInt8(135))&127):((Int64(UInt16(UInt8(Int8(-108))))|1)))
public let var_1669219250438_858 : Int16 = Int16(36)
public var var_1669219250438_899 : ?Option<(Int8, Array<UInt64>, Unit, Array<UInt16>)> = ((-55) as Option<(Int8, Array<UInt64>, Unit, Array<UInt16>)>)
public var var_1669219250438_948 : Interface_1669219250438_19<Int64> = Class_1669219250438_15()
var var_1669219250438_976 : Range<UInt16> = ((UInt16(148)&127)..=(UInt16(Int8(-92))&127):(((-60)|1)))
public let var_1669219250438_1005 : Float32 = Float32(Float32(-40.0))
var var_1669219250438_1215 : Int16 = Int16(34)
public var var_1669219250438_1264 : Int64 = 116
public interface Interface_1669219250438_18 {

}

public interface Interface_1669219250438_19<T0> {
    func func_1669219250438_1120() : Int64 { // block id: 1121
        var var_1669219250438_1132 : (Int64, Bool, (Unit, Range<Int16>, Array<UInt64>, Array<Bool>, Float32), Range<Int16>, Int16) = (Int64(UInt16(UInt8(UInt8(164)))), (69.0 is Rune), ((), ((Int16(-53)&127)..=(Int16(-95)&127):((46|1))), [UInt64(199), UInt64(50), UInt64(204), UInt64(164), UInt64(59), UInt64(218), UInt64(82), UInt64(192), UInt64(191), UInt64(25)], [false, true, false, (r'H' is (Range<Int64>, UInt16) -> Class_1669219250438_15), (UInt8(169) is (UInt64, Range<UInt64>, (Int16, Rune), Option<Range<Int8>>, Range<Int64>, Range<UInt8>, UInt8)), true, true, ([true, true, false, false, true, false, true, true, false, true] is (Int16, Rune)), true, (((), ((Int16(-115)&127)..(Int16(-22)&127):((10|1))), [UInt64(83), UInt64(140), UInt64(41), UInt64(144), UInt64(6), UInt64(168), UInt64(93), UInt64(213), UInt64(42), UInt64(131)], [false, true, false, false, true, true, false, false, false, true], Float32(98.0)) is Range<UInt16>)], Float32(72.0)), ((Int16(-109)&127)..(Int16(-57)&127):((82|1))), Int16(35));
        let var_1669219250438_1200 : (Unit, Range<Int16>, Array<UInt64>, Array<Bool>, Float32) = ((), ((Int16(7)&127)..=(Int16(108)&127):(24|1)), [UInt64(74), UInt64(151), UInt64(133), UInt64(213), UInt64(121), UInt64(43), UInt64(193), UInt64(86), UInt64(11), UInt64(215)], [false, false, true, true, false, true, false, false, false, false], Float32(Float32(Float32(Float32(105.0)))));
        var var_1669219250438_1227 : Int32 = Int32(UInt32(Int16(-43)));
        if ((Option<(Int64, Bool, (Unit, Range<Int16>, Array<UInt64>, Array<Bool>, Float32), Range<Int16>, Int16)>.Some(var_1669219250438_1132) ?? (71, var_1669219250438_438, var_1669219250438_1200, ((Int16(107)&127)..(Int16(16)&127):(((-45)|1))), var_1669219250438_1215))[1]) { // block id: 1218
            try { // block id: 1220
                if (var_1669219250438_438) { [false, true, false, false, true, false, false, false, true, false] } else { [true, false, true, true, true, true, false, false, true, false] } ;
                var_1669219250438_1227 %= ((Int32(-80)) | 1)
            } finally { // block id: 1232

            };
            let var_1669219250438_1255 : Int8 = Int8(UInt8(42));
            match ((var_1669219250438_165, ((Int16(7)&127)..(Int16(7)&127):((-34)|1)), var_1669219250438_139, [true, false, true, true, false, true, true, false, true, false], var_1669219250438_1005)) {
                case (_,caseVar_1669219250438_1242,_ : (Bool, Range<UInt8>),caseVar_1669219250438_1243 : Array<UInt64>,caseVar_1669219250438_1244 : Range<UInt32>) => 
                    var_1669219250438_536;
                    var_1669219250438_165
                
                case _ => 
                    var_1669219250438_165;
                    if (var_1669219250438_438) { ((var_1669219250438_1255&127)..(Int8(-80)&127):(((-24)|1))) } else { ((var_1669219250438_1255&127)..=(var_1669219250438_1255&127):((var_1669219250438_1264|1))) } ;
                    ()
                
            }
        };
        [(-71), 105, (-103), 97, 38, (-103), 80, 111, (-124), (-69)][9]
    }
;
    func func_1669219250438_294(param_1669219250438_295 : Range<Int16>, namedParam_1669219250438_296 ! : Range<Int32>, namedParam_1669219250438_297 ! : Range<Int8>, namedParam_1669219250438_298 ! : Range<UInt32>) : Unit 

}

public open class Class_1669219250438_15 <: Interface_1669219250438_18 & Interface_1669219250438_19<Int64> {
    public init() { // block id: 17

    }
;
    protected init(optionalParam_1669219250438_76 ! : Range<UInt16> = ((UInt16(10)&127)..=(UInt16(40)&127):(((-58)|1))), optionalParam_1669219250438_81 ! : Array<UInt64> = [UInt64(186), UInt64(252), UInt64(251), UInt64(197), UInt64(177), UInt64(137), UInt64(143), UInt64(246), UInt64(191), UInt64(72)], namedParam_1669219250438_83 ! : UInt8, optionalParam_1669219250438_84 ! : Range<Int64> = (((-122)&127)..(1&127):((-127)|1))) { // block id: 86
        if (var_1669219250438_93) { var_1669219250438_97 } else { var_1669219250438_97 } [7][0]
    }
;
    public init(namedParam_1669219250438_29 ! : Int8, namedParam_1669219250438_30 ! : Int16) { // block id: 31
        let var_1669219250438_57 : Interface_1669219250438_18 = Class_1669219250438_15();
        let var_1669219250438_160 : Int64 = 3;
        let var_1669219250438_172 : Interface_1669219250438_18 = Class_1669219250438_15();
        (Option<Interface_1669219250438_18>.Some([Class_1669219250438_15(), Class_1669219250438_15(), var_1669219250438_53, var_1669219250438_53, var_1669219250438_57, Class_1669219250438_15(), var_1669219250438_57, Class_1669219250438_15(), Class_1669219250438_15(), var_1669219250438_57][8]) ?? try { // block id: 66
            if (true) { var_1669219250438_70 } else { r's' } ;
            Int32(42);
            Class_1669219250438_15(optionalParam_1669219250438_81 : var_1669219250438_139, namedParam_1669219250438_83 : var_1669219250438_10, optionalParam_1669219250438_84 : ((72&127)..=(var_1669219250438_160&127):(((-7)|1))))
        } catch (_) { // block id: 163
            var_1669219250438_165;
            var_1669219250438_165;
            if (false) { var_1669219250438_53 } else { var_1669219250438_172 } 
        } finally { // block id: 174
            if (var_1669219250438_93) { var_1669219250438_53 } else { Class_1669219250438_15() } 
        })
    }
;
    public prop var_1669219250438_282 : Bool { // block id: 283
        get() { // block id: 285
            false
        }

    };
    func func_1669219250438_353<T0>(optionalParam_1669219250438_354 ! : Range<UInt16> = ((UInt16(84)&127)..(UInt16(239)&127):(58|1)), namedParam_1669219250438_356 ! : Option<Int16>, optionalParam_1669219250438_357 ! : Range<Int64> = ((Int64(Int32(UInt32(UInt16(234))))&127)..=((-7)&127):((8|1)))) : UInt64 { // block id: 365
        UInt64(80)
    }
;
    static prop var_1669219250438_612 : Class_1669219250438_15 { // block id: 613
        get() { // block id: 615
            ();
            Class_1669219250438_15()
        }

    };
    public var var_1669219250438_642 : Int32 = Int32(74);
    protected prop var_1669219250438_741 : (Int8, Array<UInt64>, Unit, Array<UInt16>) { // block id: 742
        get() { // block id: 744
            (Int8(78), [UInt64(Int16(65)), UInt64(231), UInt64(Int8(-96)), UInt64(17), UInt64(191), UInt64(248), UInt64(UInt8(9)), UInt64(48), UInt64(165), UInt64(147)], (), [UInt16(18), UInt16(158), UInt16(254), UInt16(29), UInt16(197), UInt16(60), UInt16(150), UInt16(33), UInt16(155), UInt16(177)])
        }

    };
    public open func func_1669219250438_294(param_1669219250438_295 : Range<Int16>, namedParam_1669219250438_296 ! : Range<Int32>, namedParam_1669219250438_297 ! : Range<Int8>, namedParam_1669219250438_298 ! : Range<UInt32>) : Unit { // block id: 299
        match (match (((var_1669219250438_578&127)..=(UInt64(48)&127):((var_1669219250438_331|1)))) {
            case _ => 
                var_1669219250438_165;
                Int16(119) - var_1669219250438_455;
                if (var_1669219250438_282) { var_1669219250438_430 } else { var_1669219250438_430 } 
            
        }) {
            case _ => 
                var_1669219250438_53;
                ((Int8(44)&127)..=(Int8(10)&127):((var_1669219250438_331|1)));
                var_1669219250438_604
            
        }|>func_1669219250438_301<UInt32, Float64>;
        match (match (Option<Class_1669219250438_15>.Some(var_1669219250438_612)) {
            case _ : Array<Interface_1669219250438_18> => 
                var_1669219250438_165;
                var_1669219250438_70;
                Option<Class_1669219250438_15>.Some(Class_1669219250438_15())
            
            case _ => 
                let var_1669219250438_632 : Option<Class_1669219250438_15> = Option<Class_1669219250438_15>.Some(Class_1669219250438_15(namedParam_1669219250438_29 : Int8(UInt8(62)), namedParam_1669219250438_30 : Int16(-67)));
                if (var_1669219250438_187) { Option<Class_1669219250438_15>.None } else { var_1669219250438_632 } 
            
            case _ => 
                var_1669219250438_642 += Int32(-69);
                -var_1669219250438_557;
                let var_1669219250438_650 : Option<Class_1669219250438_15> = (() as Class_1669219250438_15);
                if (true) { var_1669219250438_650 } else { Option<Class_1669219250438_15>.Some(Class_1669219250438_15()) } 
            
        }) {
            case _ => 
                var_1669219250438_165
            
            case _ => 
                (-78.0) + (-45.0);
                var_1669219250438_666++
            
        };
        var var_1669219250438_735 : Class_1669219250438_15 = Class_1669219250438_15(namedParam_1669219250438_29 : Int8(-7), namedParam_1669219250438_30 : Int16(UInt8(232)));
        (try { // block id: 676
            Option<(Int8, Array<UInt64>, Unit, Array<UInt16>)>.None
        } finally { // block id: 678
            ();
            var var_1669219250438_685 : (Int8, Array<UInt64>, Unit, Array<UInt16>) = (Int8(Int8(Int8(UInt8(86)))), [UInt64(UInt8(7)), UInt64(Int8(111)), UInt64(Int32(72)), UInt64(Int64(UInt32(67))), UInt64(69), UInt64(Int8(125)), UInt64(UInt8(UInt8(226))), UInt64(28), UInt64(Int32(61)), UInt64(177)], (), [UInt16(UInt8(100)), UInt16(148), UInt16(UInt8(Int8(-117))), UInt16(UInt16(UInt16(241))), UInt16(85), UInt16(Int8(Int8(-109))), UInt16(133), UInt16(UInt16(UInt8(132))), UInt16(UInt8(8)), UInt16(124)]);
            if (false) { Option<(Int8, Array<UInt64>, Unit, Array<UInt16>)>.None } else { Option<(Int8, Array<UInt64>, Unit, Array<UInt16>)>.Some(var_1669219250438_685) } 
        } ?? var_1669219250438_735.var_1669219250438_741)[2]
    }
;
    public init(param_1669219250438_908 : UInt32, optionalParam_1669219250438_909 ! : Int64 = (-62)) { // block id: 911
        let var_1669219250438_926 : Option<Range<Int8>> = Option<Range<Int8>>.Some(((Int8(-52)&127)..=(Int8(50)&127):((-125)|1)));
        match (((Option<Option<Option<Range<Int8>>>>.None ?? Option<Option<Range<Int8>>>.Some(var_1669219250438_926)) ?? (UInt64(89), ((var_1669219250438_666&127)..(UInt64(193)&127):((var_1669219250438_331|1))), var_1669219250438_604, Option<Range<Int8>>.None, (((-37)&127)..=(43&127):((-38)|1)), ((UInt8(137)&127)..(UInt8(40)&127):(107|1)), var_1669219250438_10)[3])) {
            case _ => 
                Option<Option<Range<Int8>>>.None;
                var_1669219250438_948;
                UInt8(6)
            
            case caseVar_1669219250438_953 => 
                var_1669219250438_165;
                Option<Option<(Int8, Array<UInt64>, Unit, Array<UInt16>)>>.Some(Option<(Int8, Array<UInt64>, Unit, Array<UInt16>)>.None);
                UInt8(201)
            
            case _ => 
                UInt8(124)
            
            case _ => 
                var_1669219250438_187 &&= true;
                UInt8(212)
            
        };
        var var_1669219250438_1010 : Range<Int16> = ((Int16(66)&127)..(Int16(38)&127):((-123)|1));
        try { // block id: 970
            var var_1669219250438_986 : UInt16 = UInt16(UInt8(188));
            try { // block id: 972
                if (false) { var_1669219250438_976 } else { ((UInt16(234)&127)..=(UInt16(73)&127):(32|1)) } 
            } catch (e: Exception) { // block id: 983
                ((var_1669219250438_986&127)..(var_1669219250438_279&127):((var_1669219250438_331|1)))
            } finally { // block id: 991
                if (false) { ((UInt16(238)&127)..=(UInt16(97)&127):(6|1)) } else { ((UInt16(167)&127)..=(UInt16(163)&127):(((-45)|1))) } 
            }
        } finally { // block id: 999
            var_1669219250438_165;
            let var_1669219250438_1014 : Int32 = Int32(Int16(Int8(Int8(Int8(-9)))));
            let var_1669219250438_1021 : (Unit, Range<Int16>, Array<UInt64>, Array<Bool>, Float32) = ((), ((Int16(UInt8(115))&127)..(Int16(UInt16(Int16(15)))&127):((Int64(Int16(-2))|1))), [UInt64(Int64(Int32(-68))), UInt64(Int64(Int32(-88))), UInt64(89), UInt64(118), UInt64(Int16(UInt16(197))), UInt64(Int16(Int8(94))), UInt64(142), UInt64((-108)), UInt64(65), UInt64(221)], [true, ((Int32(58), Option<UInt8>.Some(UInt8(242))) is Int64), (Int16(Int8(-33)) is Array<Bool>), false, true, ((Float32(-112.0), (-94), ((Int16(61)&127)..=(Int16(-8)&127):((-66)|1)), UInt8(104), Int32(-43), ((), ((Int16(-91)&127)..=(Int16(16)&127):(124|1)), [UInt64(70), UInt64(61), UInt64(154), UInt64(45), UInt64(118), UInt64(80), UInt64(66), UInt64(160), UInt64(248), UInt64(100)], [false, true, true, false, true, false, false, false, false, true], Float32(107.0)), Float32(-126.0), (Int8(-106), [UInt64(32), UInt64(180), UInt64(137), UInt64(90), UInt64(224), UInt64(139), UInt64(170), UInt64(94), UInt64(249), UInt64(47)], (), [UInt16(205), UInt16(8), UInt16(12), UInt16(214), UInt16(244), UInt16(36), UInt16(247), UInt16(40), UInt16(83), UInt16(231)]), UInt32(90)) is Int32), true, false, false, (((Int32(22)&127)..(Int32(-117)&127):(((-113)|1))) is (UInt64) -> Unit)], Float32(Float32(Float32(-106.0))));
            (var_1669219250438_1005, (-50), var_1669219250438_1010, var_1669219250438_10, var_1669219250438_1014, var_1669219250438_1021, Float32(70.0), (var_1669219250438_557, var_1669219250438_139, (), [var_1669219250438_279, UInt16(39), var_1669219250438_279, UInt16(100), UInt16(213), UInt16(203), var_1669219250438_279, var_1669219250438_279, UInt16(77), UInt16(150)]), UInt32(74))[4];
            [((UInt16(132)&127)..=(UInt16(143)&127):(122|1)), ((UInt16(235)&127)..(UInt16(250)&127):((-64)|1)), ((UInt16(177)&127)..(UInt16(180)&127):(58|1)), ((UInt16(35)&127)..=(UInt16(20)&127):((-104)|1)), ((UInt16(29)&127)..(UInt16(38)&127):((-80)|1)), ((UInt16(219)&127)..=(UInt16(41)&127):((-66)|1)), ((UInt16(233)&127)..(UInt16(56)&127):((-41)|1)), ((UInt16(6)&127)..=(UInt16(40)&127):((-5)|1)), ((UInt16(244)&127)..=(UInt16(208)&127):(90|1)), ((UInt16(222)&127)..=(UInt16(147)&127):(118|1))][1]
        }
    }

}




public func func_1669219250438_321<T0, T1>(param_1669219250438_322 : Range<Int32>, param_1669219250438_323 : UInt32) : Int16 { // block id: 324
    func func_1669219250438_326(param_1669219250438_327 : UInt64) : Unit { // block id: 328
        var_1669219250438_331 /= ((try { // block id: 334
            UInt32(172) % ((UInt32(141)) | 1);
            ();
            (-93)
        } catch (_) { // block id: 340
            ();
            var_1669219250438_331
        } finally { // block id: 343
            ();
            var_1669219250438_331 ** UInt64(126)
        }) | 1)
    }
;
    var var_1669219250438_350 : Class_1669219250438_15 = Class_1669219250438_15();
    let var_1669219250438_369 : Range<Int64> = ((Int64(UInt32(Int8(Int8(-19))))&127)..=((-46)&127):((Int64(UInt32(191))|1)));
    func_1669219250438_326(var_1669219250438_350.func_1669219250438_353<Range<Int64>>(namedParam_1669219250438_356 : Option<Int16>.None, optionalParam_1669219250438_357 : var_1669219250438_369));
    var_1669219250438_258
}


func func_1669219250438_308(param_1669219250438_309 : Interface_1669219250438_19<Int64>) : Array<Bool> { // block id: 310
    let var_1669219250438_318 : ?Int16 = Option<Int16>.None;
    var var_1669219250438_393 : Option<Class_1669219250438_15> = (((Int8(72)&127)..=(Int8(67)&127):((-120)|1)) as Class_1669219250438_15);
    var var_1669219250438_405 : UInt64 = UInt64(Int32(UInt16(216)));
    var var_1669219250438_410 : UInt64 = UInt64(Int64(UInt64(Int8(-47))));
    ((var_1669219250438_318 ?? func_1669219250438_321<Range<UInt8>, Array<Interface_1669219250438_18>>(var_1669219250438_380, var_1669219250438_383))&127)..(var_1669219250438_258&127):(((match (var_1669219250438_393) {
       case caseVar_1669219250438_398 =>
            var_1669219250438_70 = var_1669219250438_70;
            var_1669219250438_405 >>= ((var_1669219250438_410) & 7);
            Option<Int64>.Some(var_1669219250438_331)
        
        case _ => 
            var_1669219250438_165;
            var var_1669219250438_422 : Option<Int64> = Option<Int64>.Some(Int64(Int64(Int16(90))));
            var_1669219250438_422
        
        case _ => 
            var_1669219250438_430
        
    } ?? try { // block id: 433
        65
    } catch (e: Exception) { // block id: 435
        if (var_1669219250438_438) { ((var_1669219250438_410&127)..=(var_1669219250438_410&127):(((-106)|1))) } else { ((UInt64(114)&127)..(UInt64(162)&127):((120|1))) } ;
        var_1669219250438_331
    })|1));
    let var_1669219250438_459 : (Unit, Range<Int16>, Array<UInt64>, Array<Bool>, Float32) = ((), ((Int16(-50)&127)..(Int16(97)&127):((-29)|1)), [UInt64(57), UInt64(87), UInt64(217), UInt64(83), UInt64(201), UInt64(80), UInt64(234), UInt64(41), UInt64(193), UInt64(68)], [false, false, true, true, false, false, false, true, true, false], Float32(-128.0));
    try { // block id: 452
        (var_1669219250438_455, r'V');
        var_1669219250438_459
    } finally { // block id: 466
        var_1669219250438_279;
        if (true) { var_1669219250438_459 } else { var_1669219250438_459 } 
    }[3]
}



public func func_1669219250438_301<T0, T1>(param_1669219250438_302 : (Int16, Rune)) : UInt8 { // block id: 303
    if ((Class_1669219250438_15(namedParam_1669219250438_29 : var_1669219250438_476, namedParam_1669219250438_30 : Int16(86))|>func_1669219250438_308)[0]) { // block id: 483

    };
    var_1669219250438_165;
    let var_1669219250438_499 : (Int32, Option<UInt8>) = (Int32(Int16(Int16(Int8(-78)))), (((UInt16(128)&127)..=(UInt16(UInt8(151))&127):((Int64(Int8(-67))|1))) as UInt8));
    (try { // block id: 493
        Option<UInt8>.None;
        22 == (-125);
        var_1669219250438_499
    } catch (e: Exception) { // block id: 512
        var_1669219250438_165;
        ();
        (Int32(-27), Option<UInt8>.None)
    }[1] ?? if ((var_1669219250438_526 ?? var_1669219250438_93)) { // block id: 532
        if (false) { var_1669219250438_536 } else { [UInt16(50), UInt16(60), UInt16(14), UInt16(236), UInt16(205), UInt16(118), UInt16(74), UInt16(168), UInt16(42), UInt16(44)] } ;
        ();
        UInt8(154)
    } else if (if (var_1669219250438_438) { // block id: 543
        UInt32(75) <= var_1669219250438_547
    } else { // block id: 550
        26 * var_1669219250438_331;
        var_1669219250438_476 >= var_1669219250438_557
    }) { // block id: 562
        var_1669219250438_10 >> ((var_1669219250438_10) & 7)
    } else { // block id: 566
        var var_1669219250438_568 : Float32 = Float32(Float32(-5.0));
        var_1669219250438_568;
        var_1669219250438_165;
        UInt8(40)
    })
}



public struct Struct_1669219250438_866<T0> {
    init() { // block id: 868

    }
;
    public static let var_1669219250438_871 : (Bool, Range<UInt8>) = (true, ((UInt8(142)&127)..(UInt8(106)&127):((-23)|1)))
}



func func_1669219250438_21<T0, T1>(param_1669219250438_22 : Class_1669219250438_15, param_1669219250438_23 : Int64, optionalParam_1669219250438_24 ! : Interface_1669219250438_19<Int64> = Class_1669219250438_15(), optionalParam_1669219250438_26 ! : Class_1669219250438_15 = Class_1669219250438_15(namedParam_1669219250438_29 : Int8(Int8(UInt8(UInt8(84)))), namedParam_1669219250438_30 : Int16(6))) : Class_1669219250438_15 { // block id: 184
    let var_1669219250438_262 : Class_1669219250438_15 = Class_1669219250438_15();
    func func_1669219250438_191(optionalParam_1669219250438_192 ! : Range<Int64> = ((Int64(UInt32(244))&127)..(22&127):((Int64(Int64(UInt16(Int8(-13))))|1))), namedParam_1669219250438_201 ! : UInt16) : Class_1669219250438_15 { // block id: 202
        var_1669219250438_165;
        try { // block id: 205
            var loopTimeVar_1669219250438_209 : Array<(Int16, Rune)> = [(Int16(UInt16(243)), r'C'), (Int16(Int8(55)), r'9'), (Int16(6), r'w'), (Int16(-55), r'i'), (Int16(UInt16(UInt16(99))), r'h'), (Int16(Int16(Int16(61))), r'R'), (Int16(52), r'n'), (Int16(-74), r'P'), (Int16(Int16(109)), r'j'), (Int16(Int16(104)), r'1')];
            for (i in loopTimeVar_1669219250438_209 where true) {

            };
            (Option<Class_1669219250438_15>.Some(Class_1669219250438_15(namedParam_1669219250438_29 : Int8(-115), namedParam_1669219250438_30 : var_1669219250438_258)) ?? var_1669219250438_262)
        } catch (_) { // block id: 265
            try { // block id: 267
                ();
                Class_1669219250438_15(namedParam_1669219250438_29 : Int8(-71), namedParam_1669219250438_30 : Int16(-32))
            } finally { // block id: 272
                if (false) { Class_1669219250438_15() } else { Class_1669219250438_15() } ;
                Class_1669219250438_15()
            }
        }
    }
;
    var_1669219250438_187 ||= func_1669219250438_191(namedParam_1669219250438_201 : var_1669219250438_279).var_1669219250438_282;
    var var_1669219250438_829 : Int16 = Int16(85);
    func_1669219250438_191(namedParam_1669219250438_201 : [UInt16(84), UInt16(53), UInt16(68), UInt16(225), UInt16(46), UInt16(170), UInt16(102), UInt16(123), UInt16(61), UInt16(168)][2]).func_1669219250438_294((var_1669219250438_165, ((Int16(17)&127)..=(Int16(-94)&127):(37|1)), [UInt64(88), UInt64(212), var_1669219250438_578, var_1669219250438_578, var_1669219250438_666, var_1669219250438_666, UInt64(197), UInt64(213), UInt64(140), UInt64(176)], [var_1669219250438_438, var_1669219250438_93, false, var_1669219250438_438, false, false, var_1669219250438_93, true, var_1669219250438_438, true], var_1669219250438_791)[1], namedParam_1669219250438_296 : if (false) { var_1669219250438_380 } else { ((Int32(-85)&127)..(var_1669219250438_800&127):(((-6)|1))) } , namedParam_1669219250438_297 : (Option<Range<Int8>>.Some(var_1669219250438_811) ?? var_1669219250438_811), namedParam_1669219250438_298 : try { // block id: 825
        ();
        var_1669219250438_829 /= ((var_1669219250438_829) | 1);
        ((var_1669219250438_383&127)..(var_1669219250438_547&127):(((-121)|1)))
    } finally { // block id: 836
        UInt64(70);
        let var_1669219250438_848 : (Int16, Rune) = (Int16(-74), r'o');
        [(Int16(36), var_1669219250438_70), var_1669219250438_604, (var_1669219250438_455, var_1669219250438_70), var_1669219250438_604, var_1669219250438_848, var_1669219250438_848, var_1669219250438_848, var_1669219250438_848, var_1669219250438_848, (var_1669219250438_858, var_1669219250438_70)];
        ((UInt32(152)&127)..=(UInt32(204)&127):(10|1))
    });
    if (Struct_1669219250438_866<Unit>.var_1669219250438_871[0]) { (if ((var_1669219250438_383 > UInt32(224))) { (Option<Class_1669219250438_15>.Some(Class_1669219250438_15()) ?? var_1669219250438_262) } else { (if (false) { var_1669219250438_262 } else { var_1669219250438_262 } ) } ) } else { match ((var_1669219250438_899 ?? Option<(Int8, Array<UInt64>, Unit, Array<UInt16>)>.None)) {
        case _ => 
            Class_1669219250438_15()
        
    } } 
}




main(): Int64 {
    try {
        Int8(UInt8(var_1669219250438_10));
        func_1669219250438_21<UInt8, UInt16>(Class_1669219250438_15(UInt32(120)), (-60)).func_1669219250438_1120()
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var_1669219250438_800*var_1669219250438_800), 64)
        crccheck.updateBuffer(UInt64(var_1669219250438_858*var_1669219250438_858), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
