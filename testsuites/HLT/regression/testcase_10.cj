/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// LEVEL: 0
// ERRCHECK: %compiler %cmp_opt %f -o %output

public let var40 : Float64 = 3.0
public var var74 : Unit = ()
public var var88 : Bool = (Class43() is Interface47)
public var var97 : Int32 = Int32(-1)
public var var145 : UInt64 = UInt64(12)
public var var153 : ?UInt64 = Option<UInt64>.None
public let var158 : Range<Int8> = ((Int8(-7)&127)..=(Int8(90)&127):((-114)|1))
public var var162 : Array<Float32> = [Float32(-110.0), Float32(115.0), Float32(-21.0), Float32(123.0), Float32(-77.0), Float32(31.0), Float32(15.0), Float32(43.0), Float32(-122.0), Float32(-13.0)]
public let var165 : Interface51 = Class43()
public var var190 : UInt64 = UInt64(UInt8(UInt8(87)))
public var var200 : Range<UInt32> = ((UInt32(178)&127)..(UInt32(62)&127):((-5)|1))
public let var259 : Array<Option<Bool>> = [Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, (Option<Bool>.None as Bool), (((((95&127)..((-97)&127):(95|1)), 73.0, r'W', ((UInt8(75)&127)..=(UInt8(117)&127):(((-61)|1))), false, UInt64(90)) as Bool) as Bool), Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, (Int16(Int8(80)) as Bool)]
public var var288 : (Range<Int64>, Range<Int32>, Range<UInt8>, UInt64, Array<Option<Bool>>, Int16, Rune, Float32, Float64) = (((Int64(Int16(-83))&127)..(Int64(Int32(-58))&127):(((-26)|1))), ((Int32(76)&127)..(Int32(Int32(73))&127):((36|1))), ((UInt8(191)&127)..=(UInt8(149)&127):((-16)|1)), UInt64(Int8(UInt8(UInt8(106)))), [(((UInt8(15)&127)..(UInt8(52)&127):((16|1))) as Bool), (((Int8(-91)&127)..(Int8(12)&127):(((-104)|1))) as Bool), (((Int8(20)&127)..(Int8(-85)&127):(((-52)|1))) as Bool), Option<Bool>.None, ([Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None] as Bool), Option<Bool>.None, Option<Bool>.None, (UInt8(157) as Bool), Option<Bool>.None, (Class43() as Bool)], Int16(-57), r'O', Float32(18.0), Float64(Float32(-38.0)))
public var var379 : ?Interface50 = Option<Interface50>.None
public let var386 : Int64 = Int64(Int32(Int8(UInt8(Int8(96)))))
public var var422 : Enum419 = Enum419.defaultValue
public var var466 : Unit = ()
public var var477 : Array<Bool> = [false, true, (((UInt32(129)&127)..(UInt32(Int16(-56))&127):(((-24)|1))) is Range<UInt8>), (24.0 is Class43), true, ((((UInt64(88)&127)..=(UInt64(121)&127):((50|1))), ((UInt16(248)&127)..(UInt16(38)&127):(((-119)|1)))) is Option<Interface50>), true, (112 is Range<UInt64>), (Class43() is (Range<Int64>, Range<Int32>, Range<UInt8>, UInt64, Array<Option<Bool>>, Int16, Rune, Float32, Float64)), true]
public var var533 : Float32 = Float32(61.0)
public let var547 : Rune = r'2'
public let var560 : Range<UInt64> = ((UInt64(127)&127)..(UInt64(UInt32(UInt32(187)))&127):((Int64(Int16(UInt16(UInt16(22))))|1)))
public let var588 : Int32 = Int32(-40)
public var var671 : Int8 = Int8(-38)
public let var695 : ?Bool = (UInt32(Int16(76)) as Bool)
let var729 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()]
public var var833 : (Bool, Bool, Int8, Int32, Range<Int32>, UInt64) = (true, (Class43() is Int32), Int8(Int8(UInt8(Int8(94)))), Int32(42), ((Int32(-40)&127)..=(Int32(Int8(72))&127):((16|1))), UInt64(160))
public var var877 : UInt16 = UInt16(111)
public var var918 : (Range<UInt64>, Range<UInt16>) = (((UInt64(91)&127)..(UInt64(90)&127):(49|1)), ((UInt16(36)&127)..=(UInt16(98)&127):((-106)|1)))
public let var923 : (Int64, Range<Int32>, (Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64), UInt32) = (Int64(Int32(14)), ((Int32(-100)&127)..(Int32(-63)&127):((-109)|1)), ((((-32)&127)..=((-77)&127):(66|1)), 52.0, r'6', ((UInt8(95)&127)..(UInt8(133)&127):((-20)|1)), true, UInt64(221)), UInt32(0))
public var var976 : Int16 = Int16(Int16(Int16(-19)))
public let var1013 : UInt8 = UInt8(182)
public var var1028 : UInt32 = UInt32(UInt16(Int8(Int8(Int8(23)))))
public let var1058 : (Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64) = ((((-119)&127)..=(5&127):((-28)|1)), Float64(Float32(-47.0)), r'1', ((UInt8(69)&127)..(UInt8(UInt8(UInt8(53)))&127):((Int64(UInt8(152))|1))), (((((((UInt64(129)&127)..(UInt64(1)&127):(((-128)|1))), ((UInt16(122)&127)..(UInt16(34)&127):((87|1)))), (107, ((Int32(94)&127)..(Int32(95)&127):((-30)|1)), ((((-61)&127)..=((-91)&127):(((-3)|1))), (-55.0), r'D', ((UInt8(188)&127)..(UInt8(76)&127):(126|1)), false, UInt64(99)), UInt32(231))) is (Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64)), true, Int8(41), Int32(UInt32(109)), ((Int32(33)&127)..=(Int32(86)&127):(120|1)), UInt64(47)) is Array<Unit>), UInt64(198))
public let var1118 : (Array<Unit>, Int64, (Bool, Bool, Int8, Int32, Range<Int32>, UInt64), ((Float64, UInt32, Range<UInt8>, Int8, (Bool, Bool, Int8, Int32, Range<Int32>, UInt64), (Bool, Bool, Int8, Int32, Range<Int32>, UInt64), Float32), Int8, Int16, Range<Int32>), ((Float64, UInt32, Range<UInt8>, Int8, (Bool, Bool, Int8, Int32, Range<Int32>, UInt64), (Bool, Bool, Int8, Int32, Range<Int32>, UInt64), Float32), Int8, Int16, Range<Int32>), ((Float64, UInt32, Range<UInt8>, Int8, (Bool, Bool, Int8, Int32, Range<Int32>, UInt64), (Bool, Bool, Int8, Int32, Range<Int32>, UInt64), Float32), Int8, Int16, Range<Int32>), UInt16, Int8) = ([(), (), (), (), (), (), (), (), (), ()], Int64(UInt32(Int8(Int8(-15)))), (([false, false, false, true, true, false, true, true, true, true] is Unit), false, Int8(Int8(Int8(107))), Int32(-22), ((Int32(-74)&127)..=(Int32(-17)&127):((-113)|1)), UInt64(20)), ((60.0, UInt32(36), ((UInt8(156)&127)..(UInt8(199)&127):(96|1)), Int8(62), (false, false, Int8(2), Int32(24), ((Int32(-36)&127)..=(Int32(1)&127):(92|1)), UInt64(46)), (true, true, Int8(-62), Int32(56), ((Int32(13)&127)..(Int32(-8)&127):(((-8)|1))), UInt64(165)), Float32(104.0)), Int8(30), Int16(Int16(-114)), ((Int32(-82)&127)..=(Int32(-56)&127):(83|1))), ((Float64(Float32(20.0)), UInt32(10), ((UInt8(142)&127)..(UInt8(18)&127):(((-61)|1))), Int8(-65), (true, true, Int8(43), Int32(89), ((Int32(56)&127)..(Int32(59)&127):(((-9)|1))), UInt64(192)), (true, false, Int8(74), Int32(-122), ((Int32(94)&127)..(Int32(126)&127):(((-42)|1))), UInt64(183)), Float32(97.0)), Int8(56), Int16(32), ((Int32(UInt32(247))&127)..=(Int32(Int32(-70))&127):(((-38)|1)))), ((Float64(20.0), UInt32(58), ((UInt8(235)&127)..=(UInt8(226)&127):(2|1)), Int8(UInt8(177)), (true, true, Int8(-3), Int32(5), ((Int32(-41)&127)..=(Int32(-4)&127):((-10)|1)), UInt64(110)), (false, false, Int8(-111), Int32(-41), ((Int32(-98)&127)..(Int32(84)&127):(((-114)|1))), UInt64(241)), Float32(Float32(-62.0))), Int8(-46), Int16(Int8(-69)), ((Int32(Int8(1))&127)..=(Int32(Int8(-35))&127):(((-30)|1)))), UInt16(Int8(-110)), Int8(93))
public let var1284 : Interface49 = Class43()
public let var1539 : ?Bool = Option<Bool>.None
public let var1621 : UInt64 = UInt64(Int16(-54))
public let var1732 : Range<Int32> = ((Int32(45)&127)..(Int32(52)&127):((-91)|1))
public var var1771 : Range<Int16> = ((Int16(-75)&127)..=(Int16(-115)&127):(118|1))
public var var1833 : (Bool, (Bool, Bool, Int8, Int32, Range<Int32>, UInt64), Range<UInt64>, Array<Float32>, Unit, Array<Range<Int16>>) = (true, ((Float32(Float32(125.0)) is Int16), (() is (Range<Int32>) -> UInt8), Int8(68), Int32(116), ((Int32(-74)&127)..(Int32(45)&127):((-94)|1)), UInt64(Int64(UInt64(96)))), ((UInt64(UInt8(16))&127)..(UInt64(UInt64(68))&127):((Int64(UInt64(UInt16(3)))|1))), [Float32(49.0), Float32(-11.0), Float32(0.0), Float32(-77.0), Float32(-65.0), Float32(1.0), Float32(-7.0), Float32(68.0), Float32(97.0), Float32(-66.0)], (), [((Int16(-6)&127)..=(Int16(116)&127):(70|1)), ((Int16(-66)&127)..(Int16(-51)&127):(49|1)), ((Int16(118)&127)..(Int16(25)&127):(14|1)), ((Int16(115)&127)..=(Int16(13)&127):(19|1)), ((Int16(114)&127)..=(Int16(69)&127):((-77)|1)), ((Int16(12)&127)..=(Int16(-54)&127):(34|1)), ((Int16(67)&127)..=(Int16(124)&127):((-113)|1)), ((Int16(-8)&127)..(Int16(95)&127):((-98)|1)), ((Int16(54)&127)..=(Int16(67)&127):((-56)|1)), ((Int16(-75)&127)..(Int16(27)&127):((-96)|1))])
public var var1904 : (Float64, UInt32, Range<UInt8>, Int8, (Bool, Bool, Int8, Int32, Range<Int32>, UInt64), (Bool, Bool, Int8, Int32, Range<Int32>, UInt64), Float32) = ((-46.0), UInt32(1), ((UInt8(197)&127)..(UInt8(Int8(-66))&127):((Int64(Int8(-114))|1))), Int8(5), (true, true, Int8(-75), Int32(UInt32(Int8(-54))), ((Int32(21)&127)..(Int32(58)&127):((17|1))), UInt64(65)), (true, true, Int8(-65), Int32(-55), ((Int32(-95)&127)..=(Int32(12)&127):((Int64(Int32(-56))|1))), UInt64(Int16(-55))), Float32(Float32(Float32(Float32(-88.0)))))
public var var1951 : Range<UInt8> = ((UInt8(48)&127)..(UInt8(25)&127):((-114)|1))
public let var1962 : UInt64 = UInt64(Int32(Int8(UInt8(Int8(109)))))
public let var2126 : ?UInt8 = Option<UInt8>.None
public var var2199 : ((Range<UInt64>, Range<UInt16>), (Int64, Range<Int32>, (Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64), UInt32)) = ((((UInt64(UInt32(245))&127)..=(UInt64(51)&127):(((-32)|1))), ((UInt16(196)&127)..(UInt16(37)&127):(9|1))), ((-61), ((Int32(26)&127)..=(Int32(-124)&127):((-8)|1)), (((100&127)..((-100)&127):((73|1))), (-13.0), r'b', ((UInt8(190)&127)..=(UInt8(164)&127):((-54)|1)), true, UInt64(26)), UInt32(Int8(Int8(114)))))
public var var2229 : ((Range<UInt64>, Range<UInt16>), (Int64, Range<Int32>, (Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64), UInt32)) = ((((UInt64(181)&127)..(UInt64(240)&127):(119|1)), ((UInt16(212)&127)..=(UInt16(Int16(-103))&127):((Int64(UInt64(86))|1)))), ((-39), ((Int32(-39)&127)..(Int32(UInt8(121))&127):((Int64(UInt32(194))|1))), (((62&127)..(105&127):(103|1)), 66.0, r'1', ((UInt8(72)&127)..=(UInt8(116)&127):(((-23)|1))), true, UInt64(254)), UInt32(158)))
public let var2315 : (Int64, Range<Int32>, (Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64), UInt32) = (75, ((Int32(-5)&127)..(Int32(37)&127):((Int64(UInt32(78))|1))), ((((-126)&127)..((-116)&127):((Int64(UInt64(254))|1))), (-35.0), r'A', ((UInt8(226)&127)..=(UInt8(209)&127):((15|1))), (() is Range<Int32>), UInt64((-25))), UInt32(UInt16(108)))
public let var2345 : (Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64) = (((32&127)..(107&127):((-64)|1)), (-113.0), r'I', ((UInt8(244)&127)..=(UInt8(229)&127):(((-123)|1))), false, UInt64(61))
public let var2417 : ??Interface50 = (Int8(Int8(23)) as Option<Interface50>)
public let var2460 : ???Interface50 = (UInt8(Int8(UInt8(92))) as Option<Option<Interface50>>)
public let var2476 : Interface46 = Class43()
public let var2511 : ?Interface51 = (Class43() as Interface51)
public let var2564 : Bool = ([((Int16(-51)&127)..(Int16(UInt16(131))&127):((Int64(Int32(-20))|1))), ((Int16(-62)&127)..(Int16(-6)&127):((Int64(Int32(58))|1))), ((Int16(-1)&127)..=(Int16(57)&127):(((-26)|1))), ((Int16(16)&127)..(Int16(Int8(-118))&127):((Int64(UInt8(57))|1))), ((Int16(-20)&127)..(Int16(-10)&127):(4|1)), ((Int16(-90)&127)..=(Int16(116)&127):(((-103)|1))), ((Int16(UInt8(50))&127)..(Int16(UInt16(58))&127):(((-65)|1))), ((Int16(-65)&127)..(Int16(Int16(-99))&127):((Int64(Int32(-10))|1))), ((Int16(Int16(62))&127)..(Int16(UInt8(0))&127):((Int64(UInt64(237))|1))), ((Int16(-19)&127)..(Int16(-52)&127):((-41)|1))] is (Float64, Int32) -> Int32)
let var2627 : ??Bool = Option<Option<Bool>>.None
public let var2888 : ((Float64, UInt32, Range<UInt8>, Int8, (Bool, Bool, Int8, Int32, Range<Int32>, UInt64), (Bool, Bool, Int8, Int32, Range<Int32>, UInt64), Float32), Int8, Int16, Range<Int32>) = ((Float64(Float32(Float32(60.0))), UInt32(Int32(UInt16(234))), ((UInt8(96)&127)..=(UInt8(128)&127):((-109)|1)), Int8(Int8(UInt8(208))), (true, (Option<Interface50>.None is Array<Option<Bool>>), Int8(UInt8(113)), Int32(Int16(-86)), ((Int32(0)&127)..(Int32(-105)&127):(15|1)), UInt64(246)), (true, false, Int8(UInt8(77)), Int32(-63), ((Int32(-125)&127)..(Int32(28)&127):(32|1)), UInt64(Int16(-52))), Float32(Float32(-34.0))), Int8(Int8(Int8(-105))), Int16(-86), ((Int32(112)&127)..(Int32(-15)&127):(78|1)))
public var var2959 : Int64 = (-86)
var var2987 : ??(Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64) = ((((Int16(-50)&127)..=(Int16(100)&127):((-31)|1)), Int8(-110), ([UInt64(146), UInt64(222), UInt64(13), UInt64(17), UInt64(29), UInt64(75), UInt64(148), UInt64(221), UInt64(26), UInt64(68)] is (Array<Unit>, Int64, (Bool, Bool, Int8, Int32, Range<Int32>, UInt64), ((Float64, UInt32, Range<UInt8>, Int8, (Bool, Bool, Int8, Int32, Range<Int32>, UInt64), (Bool, Bool, Int8, Int32, Range<Int32>, UInt64), Float32), Int8, Int16, Range<Int32>), ((Float64, UInt32, Range<UInt8>, Int8, (Bool, Bool, Int8, Int32, Range<Int32>, UInt64), (Bool, Bool, Int8, Int32, Range<Int32>, UInt64), Float32), Int8, Int16, Range<Int32>), ((Float64, UInt32, Range<UInt8>, Int8, (Bool, Bool, Int8, Int32, Range<Int32>, UInt64), (Bool, Bool, Int8, Int32, Range<Int32>, UInt64), Float32), Int8, Int16, Range<Int32>), UInt16, Int8)), ((Int16(60)&127)..=(Int16(-115)&127):((Int64(Int16(-100))|1))), UInt8(UInt8(68)), r'u', ((UInt64(121)&127)..(UInt64(138)&127):((-58)|1)), UInt16(Int16(92))) as Option<(Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64)>)
public let var3061 : UInt32 = UInt32(Int8(107))
public var var3068 : ?Bool = ((((Int16(36)&127)..(Int16(5)&127):((-54)|1)), Int8(Int8(92)), true, ((Int16(120)&127)..(Int16(-46)&127):((-83)|1)), UInt8(UInt8(241)), r'i', ((UInt64(164)&127)..(UInt64(114)&127):(18|1)), UInt16(UInt8(Int8(-73)))) as Bool)
public let var3087 : Array<Int64> = [Int64(UInt64(124)), Int64(UInt8(UInt8(Int8(104)))), Int64(UInt16(Int8(Int8(108)))), (-85), (-37), (-105), Int64(Int8(58)), 98, 22, Int64(UInt64(214))]
public let var3131 : UInt64 = UInt64(58)
public let var3134 : UInt64 = UInt64(UInt64(3))
public var var3186 : Float64 = Float64(Float32(-64.0))
public let var3297 : Int8 = Int8(Int8(Int8(UInt8(146))))
public let var3329 : ?Interface47 = Option<Interface47>.None
public let var3335 : ?Bool = Option<Bool>.None
public var var3540 : UInt8 = UInt8(Int8(-119))
public let var3557 : ?UInt8 = Option<UInt8>.None
public let var3592 : Interface52 = Class43()
public let var3619 : Unit = ()
public let var3641 : Range<UInt16> = ((UInt16(39)&127)..(UInt16(Int8(UInt8(18)))&127):(((-114)|1)))
public var var3680 : Range<Int64> = ((22&127)..((-125)&127):((-108)|1))
public let var3761 : Array<Range<Int16>> = [((Int16(-27)&127)..(Int16(Int8(-26))&127):((65|1))), ((Int16(-51)&127)..(Int16(-74)&127):(66|1)), ((Int16(-12)&127)..(Int16(-101)&127):(108|1)), ((Int16(24)&127)..(Int16(-127)&127):((-7)|1)), ((Int16(63)&127)..(Int16(Int16(UInt8(252)))&127):(((-105)|1))), ((Int16(-34)&127)..(Int16(-68)&127):((Int64((-75))|1))), ((Int16(-10)&127)..(Int16(112)&127):((76|1))), ((Int16(-42)&127)..(Int16(40)&127):((-83)|1)), ((Int16(Int16(-118))&127)..=(Int16(-19)&127):((66|1))), ((Int16(107)&127)..(Int16(108)&127):(3|1))]
public var var3914 : Unit = ()
public var var3952 : Int64 = (-128)
public var var4161 : Float32 = Float32(93.0)
public var var4195 : Range<UInt64> = ((UInt64(198)&127)..(UInt64(82)&127):(45|1))
public var var4202 : Interface50 = Class43()
public let var4225 : (Range<Int16>, Int8, Bool, Range<Int16>, UInt8, Rune, Range<UInt64>, UInt16) = (((Int16(123)&127)..(Int16(-55)&127):(12|1)), Int8(Int8(Int8(-28))), false, ((Int16(Int16(114))&127)..=(Int16(112)&127):((Int64(Int16(-30))|1))), UInt8(205), r'V', ((UInt64(227)&127)..(UInt64(Int16(UInt8(80)))&127):(((-20)|1))), UInt16(82))
public var var4372 : ?Bool = Option<Bool>.None
public var var4408 : Bool = true
public var var4496 : ?Bool = Option<Bool>.None
public let var4510 : Bool = (Option<Option<(Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64)>>.None is ((Int32) -> Int8, Interface52, Array<Option<UInt8>>, Range<UInt32>) -> Range<Int64>)
public var var4587 : (Range<Int16>, Int8, Bool, Range<Int16>, UInt8, Rune, Range<UInt64>, UInt16) = (((Int16(123)&127)..=(Int16(118)&127):(52|1)), Int8(Int8(-122)), false, ((Int16(-28)&127)..(Int16(120)&127):((Int64(UInt8(136))|1))), UInt8(Int8(Int8(UInt8(158)))), r'B', ((UInt64(49)&127)..=(UInt64(UInt32(Int8(-62)))&127):((Int64(UInt64(UInt16(23)))|1))), UInt16(109))
public let var4703 : Option<Option<Option<UInt32>>> = (r'g' as Option<Option<UInt32>>)
public var var4922 : ?Interface49 = (Class43() as Interface49)
public var var4947 : Array<Option<UInt8>> = [Option<UInt8>.None, (Class43() as UInt8), Option<UInt8>.None, (((0, ((Int32(52)&127)..=(Int32(-49)&127):((71|1))), ((((-86)&127)..=(24&127):((59|1))), (-81.0), r'U', ((UInt8(58)&127)..(UInt8(62)&127):((-42)|1)), true, UInt64(24)), UInt32(49)) as Bool) as UInt8), Option<UInt8>.None, Option<UInt8>.None, Option<UInt8>.None, Option<UInt8>.None, (Option<Option<Interface50>>.None as UInt8), Option<UInt8>.None]
public var var5045 : ?UInt32 = (((Int8(112)&127)..(Int8(-115)&127):(3|1)) as UInt32)
public let var5069 : ?Option<Option<Option<UInt32>>> = (Option<Interface50>.None as Option<Option<Option<UInt32>>>)
var var5105 : ?(Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64) = Option<(Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64)>.None
public var var5141 : UInt8 = UInt8(213)
public let var5178 : ?(Int64, Range<Int32>, (Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64), UInt32) = (((((UInt64(51)&127)..=(UInt64(1)&127):(((-109)|1))), ((UInt16(186)&127)..=(UInt16(181)&127):((-8)|1))), (Int64(Int32(0)), ((Int32(-76)&127)..=(Int32(-38)&127):(26|1)), ((((-127)&127)..=((-97)&127):(109|1)), (-23.0), r'w', ((UInt8(248)&127)..=(UInt8(179)&127):((-65)|1)), false, UInt64(8)), UInt32(205))) as (Int64, Range<Int32>, (Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64), UInt32))
public var var5238 : ??Array<Range<Int16>> = Option<Option<Array<Range<Int16>>>>.None
public let var5244 : ?Array<Range<Int16>> = (Option<Range<Int64>>.None as Array<Range<Int16>>)
public var var5254 : Option<Range<Int16>> = Option<Range<Int16>>.None
public var var5271 : Rune = r'M'
public let var5357 : Bool = false
public let var5379 : Unit = ()
public var var5433 : Float32 = Float32(-106.0)
public var var5468 : Int64 = Int64(Int64(UInt32(81)))
public let var5527 : ?Array<Option<Bool>> = (Option<Option<Array<Option<Bool>>>>.None as Array<Option<Bool>>)
public let var5680 : Bool = ([(), (), (), (), (), (), (), (), (), ()] is Interface47)
public var var5704 : ?(Range<Int16>, Int8, Bool, Range<Int16>, UInt8, Rune, Range<UInt64>, UInt16) = (Option<Interface47>.None as (Range<Int16>, Int8, Bool, Range<Int16>, UInt8, Rune, Range<UInt64>, UInt16))
public let var5780 : ?Unit = Option<Unit>.None
public var var5791 : Option<Array<Bool>> = (Option<(Int64, Range<Int32>, (Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64), UInt32)>.None as Array<Bool>)
public var var5880 : Bool = true
public let var5885 : ?Int32 = Option<Int32>.None
public let var6020 : Unit = ()
public var var6033 : Class43 = Class43()
public var var6059 : Bool = (r'8' is Range<UInt64>)
public let var6139 : Bool = (([Int64(UInt64(96)), Int64(UInt16(30)), Int64(25), Int64(UInt8(216)), Int64(UInt8(156)), 55, (-10), 117, (-125), 109] as (Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64)) is Option<Interface51>)
public var var6242 : Int64 = Int64(Int32(6))
public var var6279 : Array<UInt64> = Array<UInt64>(10){ i => UInt64(Int8(Int8(UInt8(157)))) }
public let var6324 : Interface47 = Class43()
public func func16(optionalParam17 ! : Float64 = Float64(Float32(Float32(Float32(Float32(13.0))))), optionalParam23 ! : Int32 = Int32(Int16(106))) : Int32 { // block id: 26
    match (false) {
        case _ =>
            var var33 : Int64 = (-51);
            var33 = 16;
            optionalParam23 + optionalParam23

    }
}

public interface Interface51 {

}

public interface Interface50 <: Interface51 {

}

public interface Interface52 <: Interface51 {
    func func1107(namedParam1108 ! : Int16, namedParam1109 ! : Option<UInt64>) : Int8 { // block id: 1110
        var1118[3][0][3]
    }

}

public interface Interface49 <: Interface50 & Interface52 {

}

public interface Interface48 <: Interface49 {

}

public interface Interface47 <: Interface48 & Interface49 {
    static func func138(namedParam139 ! : Array<Float32>, namedParam140 ! : Array<Float32>, namedParam141 ! : Interface51) : Option<Bool> { // block id: 142
        var145 *= (var153 ?? var145);
        (var158 as Bool)
    }
;
    func func1107(namedParam1108 ! : Int16, namedParam1109 ! : Option<UInt64>) : Int8 { // block id: 1110
        var1118[3][0][3]
    }

}

public interface Interface46 <: Interface47 & Interface48 {
    func func1107(namedParam1108 ! : Int16, namedParam1109 ! : Option<UInt64>) : Int8 { // block id: 1110
        var1118[3][0][3]
    }

}

public open class Class43 <: Interface46 & Interface48 & Resource {
    public init() { // block id: 45

    }
;
    public static var var83 : Float32 = Float32(-119.0);
    public static var var1476 : Int8 = Int8(-67);
    private static var var1581 : ((Float64, UInt32, Range<UInt8>, Int8, (Bool, Bool, Int8, Int32, Range<Int32>, UInt64), (Bool, Bool, Int8, Int32, Range<Int32>, UInt64), Float32), Int8, Int16, Range<Int32>) = (((-75.0), UInt32(66), ((UInt8(223)&127)..=(UInt8(107)&127):((-48)|1)), Int8(-14), (true, true, Int8(-51), Int32(4), ((Int32(105)&127)..(Int32(-74)&127):(((-89)|1))), UInt64(155)), (false, false, Int8(35), Int32(-101), ((Int32(-15)&127)..(Int32(29)&127):(97|1)), UInt64(195)), Float32(42.0)), Int8(-1), Int16(0), ((Int32(120)&127)..(Int32(48)&127):((-52)|1)));
    static let var1643 : Range<Int16> = ((Int16(-10)&127)..=(Int16(-42)&127):(6|1));
    static let var3200 : Range<Int64> = ((22&127)..((-98)&127):((-75)|1));
    public init(param2946 : Range<UInt8>, param2947 : (Interface52, Int64, (Interface50) -> Int8) -> Range<Int32>, param2952 : Option<Bool>, namedParam2953 ! : Array<Range<Int16>>) { // block id: 2954
        try { // block id: 2956
            var2959 &= var2959;
            Float32(-111.0)|>func2963
        } catch (_) { // block id: 3193
            var loopTimeVar3198 : Int64 = 0;
            do {
                loopTimeVar3198++;

            } while ((true) && loopTimeVar3198 < 100 ) ;
            var3200
        } finally { // block id: 3202
            (var3200, ((var588&127)..=(var97&127):((123|1))), param2946, var3134, [var1539, var1539, Option<Bool>.None, Option<Bool>.None, Option<Bool>.Some(false), Option<Bool>.None, var1539, var1539, Option<Bool>.None, var1539], var976, var547, Float32(52.0), var40);
            (var2417 as Bool);
            (((-17)&127)..=((-84)&127):(20|1))
        };
        ();
        var loopTimeVar3244 : Int64 = 0;
        do {
            loopTimeVar3244++;

        } while (((Option<Int16>.Some(var976) ?? var976) <= var976) && loopTimeVar3244 < 100 )
    }
;
    public init(namedParam1493 ! : Range<UInt8>) { // block id: 1494
        match (match (var259) {
                case _ =>
                    ();
                    var547

                case caseVar1507 =>
                    var466;
                    var190;
                    if (var88) { r'K' } else { var547 }

                case _ =>
                    var547

                case _ =>
                    if (var88) { (false, true, var671, Int32(105), ((var97&127)..=(Int32(23)&127):((114|1))), UInt64(60)) } else { var833 } ;
                    if (false) { var259 } else { [var1539, var1539, var1539, Option<Bool>.None, Option<Bool>.Some(var88), Option<Bool>.None, Option<Bool>.Some(var88), Option<Bool>.None, Option<Bool>.None, Option<Bool>.None] } ;
                    if (false) { r'n' } else { r'T' }

            }) {
            case caseVar1558 =>
                let var1567 : Bool = ((-81) is (Float64, Int32) -> Int32);
                (var40, var1028, namedParam1493, var1476, (var1567, false, Int8(-36), var97, ((var588&127)..(var588&127):((126|1))), UInt64(137)), var833, Float32(64.0));
                var1581;
                (false, (true, var1567, Int8(-45), Int32(-67), ((Int32(-119)&127)..=(Int32(-84)&127):(20|1)), UInt64(198)), ((UInt64(224)&127)..(var1621&127):(((-44)|1))), var162, (), [((Int16(-128)&127)..=(Int16(126)&127):(88|1)), ((Int16(113)&127)..=(Int16(-62)&127):((39|1))), ((Int16(36)&127)..(Int16(-103)&127):((var386|1))), ((Int16(69)&127)..(Int16(115)&127):((-75)|1)), ((var976&127)..=(var976&127):((114|1))), var1643, var1643, ((Int16(43)&127)..(var976&127):((var386|1))), ((Int16(-16)&127)..(Int16(12)&127):(59|1)), var1643])

            case r'0' | r'E' | r'2' =>
                ();
                UInt32(23);
                let var1660 : (Bool, (Bool, Bool, Int8, Int32, Range<Int32>, UInt64), Range<UInt64>, Array<Float32>, Unit, Array<Range<Int16>>) = (false, (((113, ((Int32(-116)&127)..(Int32(-24)&127):(45|1)), (((103&127)..=(70&127):(54|1)), 112.0, r'C', ((UInt8(119)&127)..=(UInt8(216)&127):(123|1)), false, UInt64(60)), UInt32(109)) is Int8), (Class43() is UInt8), Int8(5), Int32(40), ((Int32(-66)&127)..=(Int32(85)&127):((-36)|1)), UInt64(113)), ((UInt64(234)&127)..=(UInt64(106)&127):((-61)|1)), [Float32(42.0), Float32(-73.0), Float32(-33.0), Float32(-43.0), Float32(52.0), Float32(42.0), Float32(43.0), Float32(64.0), Float32(-50.0), Float32(-38.0)], (), [((Int16(Int8(13))&127)..(Int16(UInt16(235))&127):((Int64(UInt32(0))|1))), ((Int16(-21)&127)..(Int16(82)&127):(9|1)), ((Int16(UInt16(62))&127)..=(Int16(-4)&127):((Int64(UInt32(211))|1))), ((Int16(79)&127)..=(Int16(Int8(30))&127):((Int64(Int8(125))|1))), ((Int16(-62)&127)..=(Int16(-22)&127):(2|1)), ((Int16(Int8(-128))&127)..=(Int16(Int8(125))&127):((Int64(44)|1))), ((Int16(Int16(24))&127)..=(Int16(UInt16(95))&127):((Int64(Int16(120))|1))), ((Int16(52)&127)..(Int16(90)&127):((-88)|1)), ((Int16(6)&127)..=(Int16(-59)&127):(57|1)), ((Int16(-79)&127)..(Int16(43)&127):(122|1))]);
                let var1760 : Range<Int16> = ((Int16(-87)&127)..(Int16(Int16(Int16(Int16(-1))))&127):(((-94)|1)));
                if (false) { var1660 } else { (var88, (false, true, Int8(-23), Int32(-125), var1732, var1621), ((UInt64(241)&127)..(var145&127):(((-92)|1))), [Float32(36.0), Float32(-58.0), var83, Float32(4.0), Float32(-99.0), Float32(48.0), var533, Float32(13.0), var533, Float32(-109.0)], (), [((Int16(-89)&127)..=(Int16(-2)&127):((66|1))), var1643, var1643, var1643, var1760, var1643, var1760, var1771, var1643, ((Int16(-72)&127)..(var976&127):((119|1)))]) }

            case r'z' | r'r' | r's' | r'z' =>
                ();
                var1013 * var1013;
                var var1788 : (Bool, (Bool, Bool, Int8, Int32, Range<Int32>, UInt64), Range<UInt64>, Array<Float32>, Unit, Array<Range<Int16>>) = ((Option<Bool>.Some((108 is (Int16, Option<UInt64>) -> Int8)) is (Range<UInt64>, Range<UInt16>)), ((Option<Option<Bool>>.None is Interface51), false, Int8(29), Int32(36), ((Int32(69)&127)..(Int32(-41)&127):((-9)|1)), UInt64(UInt16(3))), ((UInt64(177)&127)..=(UInt64(85)&127):(67|1)), [Float32(76.0), Float32(Float32(Float32(72.0))), Float32(Float32(-117.0)), Float32(Float32(46.0)), Float32(Float32(119.0)), Float32(80.0), Float32(Float32(Float32(100.0))), Float32(Float32(Float32(11.0))), Float32(Float32(Float32(-80.0))), Float32(Float32(11.0))], (), [((Int16(47)&127)..(Int16(-118)&127):(103|1)), ((Int16(124)&127)..=(Int16(-47)&127):((-30)|1)), ((Int16(-27)&127)..=(Int16(-23)&127):(93|1)), ((Int16(-84)&127)..(Int16(41)&127):(109|1)), ((Int16(-16)&127)..=(Int16(-119)&127):(58|1)), ((Int16(115)&127)..(Int16(-68)&127):((-15)|1)), ((Int16(35)&127)..(Int16(8)&127):((-103)|1)), ((Int16(-120)&127)..(Int16(-35)&127):((-92)|1)), ((Int16(-17)&127)..=(Int16(-113)&127):((-86)|1)), ((Int16(-72)&127)..(Int16(45)&127):(104|1))]);
                if (var88) { var1788 } else { var1788 }

            case _ =>
                var1833

        }[4];
        var loopTimeVar3974 : Int64 = 0;
        while (((func3969|>func1862)) && loopTimeVar3974 < 100 ) {
            loopTimeVar3974++;

        };
        let var3997 : Interface50 = Class43(((UInt8(205)&127)..=(UInt8(226)&127):(27|1)), func1868, (((Int32(Int32(-48))&127)..(Int32(Int32(104))&127):(((-123)|1))) as Bool), namedParam2953 : [((Int16(36)&127)..=(Int16(114)&127):((-43)|1)), ((Int16(2)&127)..(Int16(-13)&127):(12|1)), ((Int16(UInt16(98))&127)..(Int16(95)&127):((Int64(UInt64(252))|1))), ((Int16(46)&127)..=(Int16(UInt8(145))&127):(((-38)|1))), ((Int16(-77)&127)..(Int16(80)&127):((Int64(UInt64(179))|1))), ((Int16(-128)&127)..=(Int16(UInt8(132))&127):((38|1))), ((Int16(11)&127)..=(Int16(Int8(104))&127):((Int64(Int8(121))|1))), ((Int16(-88)&127)..(Int16(109)&127):(52|1)), ((Int16(UInt8(9))&127)..=(Int16(-59)&127):(((-37)|1))), ((Int16(81)&127)..=(Int16(UInt16(45))&127):((Int64(UInt16(112))|1)))]);
        if ((var1539 ?? (Option<Bool>.None ?? true))) { // block id: 3985
            (Option<Unit>.None ?? var3914);
            var loopTimeVar4052 : Int64 = 0;
            while ((var2564) && loopTimeVar4052 < 100 ) {
                loopTimeVar4052++;
                var3997;
                var74
            }
        } else if (if (match {
            case var2564 =>
            var3997;
            ();
            true || false
            case false =>
            var918;
            var2564
            case _ =>
            var1028 /= ((UInt32(99)) | 1);
            Int32(-27);
            true
        }) { // block id: 4072
            Int8(-2);
            UInt32(48);
            var588 > Int32(-70)
        } else if (if (false) { // block id: 4080
            var var4082 : ??(Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64) = ((Int32(UInt16(149)) as Range<Int64>) as Option<(Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64)>);
            var4082;
            var3914;
            false
        } else { // block id: 4089
            var976 *= var976;
            Option<Bool>.None;
            false
        }) { // block id: 4095
            var1028 %= ((UInt32(231)) | 1);
            false
        } else { // block id: 4100
            var2959--;
            var288;
            var2564
        }) { // block id: 4105
            match (()) {
                case _ : UInt8 =>
                    ();
                    var466;
                    var833

                case () | () =>
                    Option<Bool>.None;
                    var2959 %= (((-16)) | 1);
                    var833

                case () =>
                    (true, var2564, Int8(104), Int32(11), ((Int32(-71)&127)..(Int32(6)&127):((-102)|1)), UInt64(94))

                case _ =>
                    var3329;
                    let var4141 : Range<Int32> = ((Int32(-88)&127)..=(Int32(-77)&127):(14|1));
                    (false, var88, var3297, Int32(-58), var4141, var3134)

            };
            var loopTimeVar4147 : Range<UInt64> = ((UInt64(UInt64(177))&127)..=(UInt64(121)&127):((Int64(Int8(-54))|1)));
            for (i in loopTimeVar4147 where var2564) {

            }
        }
    }
;
    public let var5096 : Unit = ();
    static var var6173 : Float32 = Float32(-32.0);
    public static func func65(optionalParam66 ! : Interface49 = Class43(), optionalParam68 ! : UInt16 = UInt16(UInt16(Int16(-47)))) : Unit { // block id: 72
        var74;
        let var93 : Interface48 = Class43();
        if (if (true) { // block id: 80
            Int16(-125);
            var83
        } else { // block id: 85
            if (var88) { Class43() } else { var93 } ;
            var97 >> ((var97) & 7);
            Float32(2.0)
        } < [Float32(119.0), var83, Float32(-120.0), Float32(-97.0), Float32(117.0), var83, Float32(-66.0), Float32(37.0), Float32(102.0), var83][5]) { // block id: 123
            var loopTimeVar131 : Int64 = 0;
            while ((false) && loopTimeVar131 < 100 ) {
                loopTimeVar131++;
                var40 ** Float64(Int32(var40) & 3)
            }
        } else if ((func138(namedParam139 : [Float32(23.0), Float32(26.0), Float32(72.0), Float32(111.0), Float32(-82.0), Float32(-56.0), Float32(-79.0), Float32(-59.0), Float32(-96.0), Float32(91.0)], namedParam140 : var162, namedParam141 : var165) ?? func2864(var671))) { // block id: 6167
            if (true) { // block id: 6170
                var6173 = var533;
                Option<Interface47>.None;
                var1581
            } else if (false) { // block id: 6179
                var2888
            } else { // block id: 6181
                if (var6059) { var1581 } else { var2888 }
            };
            match (var3761) {
                case _ =>
                    var3200;
                    var3619

                case _ =>
                    if (false) { Option<Int32>.None } else { Option<Int32>.None } ;
                    var5379;
                    ()

            };
            if (var6139) { // block id: 6203
                var5379;
                var5379
            }
        }
    }
;
    public func func1107(namedParam1108 ! : Int16, namedParam1109 ! : Option<UInt64>) : Int8 { // block id: 1110
        var1118[3][0][3]
    }

    public func isClosed(): Bool { return true }
    public func close(): Unit {}
}





public enum Enum419 {
    defaultValue |
    enumValue2640
}
public func func515(namedParam516 ! : Array<Float32>, optionalParam517 ! : Interface50 = Class43(), optionalParam519 ! : Array<Bool> = [false, false, false, false, true, false, false, true, false, true], optionalParam521 ! : String = """
S}~X-
mUl@E
""") : Range<Int16> { // block id: 523
    ((Int16(-22)&127)..(Int16(-38)&127):((-18)|1))
}

public func func413(param414 : Interface50) : Int8 { // block id: 415
    match (var422) {
        case defaultValue =>
            let var430 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
            if (false) { var430 } else { [(), (), (), (), (), (), (), (), (), ()] }

        case caseVar445 =>
            var74;
            var97;
            if (true) { [(), (), (), (), (), (), (), (), (), ()] } else { [(), (), (), (), (), (), (), (), (), ()] }

        case defaultValue =>
            [var74, var74, var74, var74, var74, var74, (), (), var466, ()]

        case _ =>
            [(), (), (), (), (), (), (), (), (), ()]

    }[1];
    var var552 : Int8 = Int8(-113);
    match {
        case var477[7] =>
        let var511 : ?Bool = Option<Bool>.None;
        if (var88) { var511 } else { var511 } ;
        func515(namedParam516 : [Float32(17.0), Float32(47.0), Float32(82.0), Float32(1.0), Float32(-45.0), Float32(-35.0), var533, var533, Float32(-28.0), Float32(-95.0)], optionalParam517 : Class43(), optionalParam519 : [true, true, true, false, false, true, false, false, false, false]);
        var var544 : Bool = true;
        try { // block id: 541
            if (var544) { var547 } else { r'd' } ;
            var552 - Int8(41)
        } finally { // block id: 555
            if (var544) { (var560, ((UInt16(128)&127)..=(UInt16(154)&127):((-81)|1))) } else { (((UInt64(94)&127)..=(var145&127):(((-45)|1))), ((UInt16(169)&127)..=(UInt16(11)&127):(12|1))) } ;
            Int8(-67)
        }
        case (var88, var88, var552, Int32(90), ((var588&127)..=(Int32(-71)&127):((24|1))), UInt64(198))[2] < if (var88) { // block id: 596
        Int8(-10) + Int8(-124)
    } else { // block id: 600
        if (var88) { ((Int8(-18)&127)..(Int8(94)&127):(1|1)) } else { ((var552&127)..=(var552&127):(((-27)|1))) } ;
        var552
    } =>
        match (Option<Bool>.Some(var88)) {
            case caseVar615 =>
                var552

            case _ =>
                var552

            case _ =>
                Int8(18)

            case _ : (Bool, Bool, Int8, Int32, Range<Int32>, UInt64) =>
                var552

            case _ =>
                Int8(99)

        }
        case _ =>
        try { // block id: 635
            Option<Bool>.Some(true)
        } catch (e: Exception) { // block id: 638
            UInt32(254) + UInt32(68);
            Option<Bool>.Some(var88)
        };
        var var645 : Range<UInt8> = ((UInt8(67)&127)..=(UInt8(Int8(-38))&127):((Int64(UInt32(201))|1)));
        var645;
        Int8(var552)
    }
}

public func func655(param656 : Int32) : Int8 { // block id: 657
    var var666 : Rune = r'c';
    match (try { // block id: 660
            ();
            var547
        } finally { // block id: 663
            var74;
            var666
        }) {
        case _ =>
            var671

    }
}



public func func827(param828 : Range<Int32>) : UInt8 { // block id: 829
    var loopTimeVar852 : Int64 = 0;
    do {
        loopTimeVar852++;

    } while ((var833[0]) && loopTimeVar852 < 100 ) ;
    var var871 : UInt8 = UInt8(UInt8(49));
    try { // block id: 856
        let var862 : Int16 = Int16(UInt16(243));
        var var880 : (Range<Int16>, Int8, Bool, Range<Int16>, UInt8, Rune, Range<UInt64>, UInt16) = (((Int16(-3)&127)..=(Int16(-43)&127):(61|1)), Int8(UInt8(251)), false, ((Int16(80)&127)..=(Int16(-35)&127):((-6)|1)), UInt8(174), r'Q', ((UInt64(170)&127)..=(UInt64(44)&127):((122|1))), UInt16(127));
        if (var88) { (((var862&127)..(Int16(-110)&127):((9|1))), Int8(-97), var88, ((Int16(-81)&127)..(Int16(98)&127):((-88)|1)), var871, var547, var560, var877) } else { var880 }
    } catch (e: Exception) { // block id: 894
        var var897 : Float64 = Float64(Float32(Float32(112.0)));
        // var897 %= Float64((Int32(var897)) | 1);
        (((Int16(-98)&127)..=(Int16(47)&127):((-120)|1)), var671, var88, ((Int16(27)&127)..(Int16(-68)&127):(91|1)), var871, var547, var560, var877)
    }[4]
}

public func func791(namedParam792 ! : Range<Int16>, optionalParam793 ! : Array<Option<Bool>> = [(Int8(-12) as Bool), Option<Bool>.Some((Option<Option<Bool>>.None is Option<UInt64>)), ((((12&127)..((-85)&127):(122|1)), Float64(Float32(-86.0)), r'I', ((UInt8(25)&127)..(UInt8(130)&127):(117|1)), (Option<UInt64>.None is Array<Unit>), UInt64(UInt16(163))) as Bool), Option<Bool>.Some(([true, true, false, true, false, true, true, true, false, false] is Range<UInt64>)), (Class43() as Bool), (Class43() as Bool), Option<Bool>.None, Option<Bool>.None, (((UInt64(173)&127)..=(UInt64(223)&127):((-114)|1)) as Bool), (Int32(58) as Bool)]) : Class43 { // block id: 824
    ();
    (var918, var923)[1][1]|>func827;
    Class43()
}

public func func1294(param1295 : Range<Int16>) : Unit { // block id: 1296
    var422;
    if (true) { // block id: 1300

    }
}

public func func2049(param2050 : Range<Int32>) : Range<Int32> { // block id: 2051
    var1732
}

public func func1868(namedParam1869 ! : Interface52, namedParam1870 ! : Int64, optionalParam1871 ! : (Interface50) -> Int8 = { lambdaParameter1874 : Interface50 => Int8(Int8(63)) }) : Range<Int32> { // block id: 1880
    var var1989 : Int8 = Int8(Int8(Int8(-9)));
    if (match ([UInt64(77), var1621, UInt64(240), var1621, UInt64(32), var1621, UInt64(77), var145, UInt64(95), UInt64(150)][1]) {
        case 79 =>
            if (var88) { (var1904, Int8(-25), Int16(24), var1732) } else { ((45.0, var1028, var1951, Int8(-70), var833, (var88, true, var671, Int32(-100), var1732, var1962), Float32(-100.0)), Int8(-16), var976, var1732) } ;
            var671 >= var671

        case _ =>
            false;
            var88

    }) { // block id: 1979
        var477;
        if (var88) { Option<(Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64)>.Some(var1058) } else { Option<(Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64)>.None } ;
        var671 &= var1989
    } else if (match (UInt32(230) >> ((var1028) & 7)) {
        case caseVar1999 : Interface46 =>
            var1989;
            let var2005 : Float32 = Float32(38.0);
            var533 -= var2005;
            var88

        case caseVar2010 : Option<(Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64)> =>
            var533 > Float32(122.0)

        case 44 | 86 | 202 =>
            var976 != var976

        case _ =>
            Option<(Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64)>.Some(var1058);
            var88

    }) { // block id: 2026
        var loopTimeVar2036 : Int64 = 0;
        do {
            loopTimeVar2036++;
            var74;
            ((var1962&127)..(UInt64(165)&127):((namedParam1870|1)))
        } while ((true) && loopTimeVar2036 < 100 ) ;
        var loopTimeVar2046 : Int64 = 0;
        do {
            loopTimeVar2046++;
            ((var1013&127)..=(UInt8(123)&127):((51|1)));
            ()
        } while ((var88) && loopTimeVar2046 < 100 )
    };
    match ((if (var88) { ((var97&127)..(var97&127):(((-72)|1))) } else { ((var97&127)..=(Int32(-15)&127):((53|1))) } |>func2049)) {
        case caseVar2066 =>
            ((Int32(99)&127)..(Int32(81)&127):((-73)|1))

        case _ =>
            if (var88) { Option<Bool>.None } else { Option<Bool>.None } ;
            ((namedParam1870&127)..=(namedParam1870&127):(((-55)|1)));
            ((Int32(44)&127)..(Int32(-122)&127):(((-72)|1)))

    }
}


public func func2163(param2164 : (Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64)) : Option<Interface50> { // block id: 2165
    var var2180 : (Int64, Range<Int32>, (Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64), UInt32) = (19, ((Int32(-111)&127)..(Int32(5)&127):(78|1)), ((((-59)&127)..=((-54)&127):(112|1)), Float64(Float32(Float32(6.0))), r'J', ((UInt8(253)&127)..(UInt8(111)&127):((Int64(UInt8(4))|1))), true, UInt64(177)), UInt32(228));
    var var2270 : ((Range<UInt64>, Range<UInt16>), (Int64, Range<Int32>, (Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64), UInt32)) = ((((UInt64(240)&127)..=(UInt64(204)&127):((-49)|1)), ((UInt16(239)&127)..(UInt16(151)&127):(64|1))), (Int64(UInt32(Int32(-102))), ((Int32(78)&127)..(Int32(46)&127):((-2)|1)), ((((-39)&127)..=((-111)&127):((31|1))), 9.0, r'H', ((UInt8(189)&127)..(UInt8(19)&127):(((-64)|1))), (((Int16(-92)&127)..(Int16(-120)&127):((41|1))) is (Array<Float32>, Array<Float32>, Interface51) -> Option<Bool>), UInt64(UInt8(195))), UInt32(191)));
    var loopTimeVar2302 : Int64 = 0;
    do {
        loopTimeVar2302++;

    } while (((match (((Int16(31)&127)..=(Int16(34)&127):((-25)|1))) {
        case _ =>
            ();
            var466;
            if (var88) { (var918, var2180) } else { var2199 }

        case _ : Interface51 =>
            var2229

        case _ =>
            ((Int8(120)&127)..=(Int8(-127)&127):((var386|1)));
            (var560, ((UInt16(236)&127)..=(UInt16(206)&127):((-76)|1)));
            if (true) { var2270 } else { var2270 }

    } is Enum419)) && loopTimeVar2302 < 100 ) ;
    match (if (([(-93), (-13), (-74), 90, 66, (-111), 1, 59, (-125), (-50)] is UInt64)) { // block id: 2307
            var671 = Int8(29);
            var533;
            if (var88) { var2315 } else { (var386, ((Int32(71)&127)..(Int32(116)&127):((-10)|1)), var2345, var1028) }
        } else if ((Option<Bool>.Some(false) ?? false)) { // block id: 2361
            var2180
        } else { // block id: 2363
            if (false) { Option<UInt8>.None } else { Option<UInt8>.Some(var1013) } ;
            ((Int8(-77)&127)..=(Int8(15)&127):((-52)|1));
            var2315
        }) {
        case caseVar2373 : Interface47 =>
            var74;
            var1284;
            ((UInt8(181)&127)..(UInt8(191)&127):((-73)|1))

        case (_,_ : (Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64),(_,caseVar2380,_,caseVar2381 : UInt8,caseVar2382 : Rune,_ : (Range<UInt64>, Range<UInt16>)),_ : Range<Int16>) =>
            var466;
            Float32(-84.0);
            ((UInt8(52)&127)..=(UInt8(123)&127):((117|1)))

        case caseVar2392 : Int32 =>
            var877 <<= ((UInt16(38)) & 7);
            ();
            ((UInt8(175)&127)..=(UInt8(57)&127):(82|1))

        case _ =>
            if (var88) { var547 } else { var547 } ;
            ((UInt8(250)&127)..(UInt8(183)&127):((-117)|1))

    };
    Option<Interface50>.None
}




public func func2556(namedParam2557 ! : (Int64, Range<Int32>, (Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64), UInt32), optionalParam2558 ! : Range<UInt8> = ((UInt8(189)&127)..=(UInt8(170)&127):(99|1))) : Bool { // block id: 2560
    var var2638 : Enum419 = Enum419.enumValue2640;
    try { // block id: 2562
        var2564
    } catch (_) { // block id: 2613
        if (false) { // block id: 2616
            if (false) { var2417 } else { var2417 } ;
            if (false) { Option<Option<Bool>>.Some(Option<Bool>.Some(true)) } else { var2627 } ;
            ()
        } else if (true) { // block id: 2631
            ();
            var145 ^= var1621
        };
        match (var2638) {
            case _ =>
                [var1539, var1539, var1539, Option<Bool>.Some(true), var1539, Option<Bool>.Some(false), var1539, Option<Bool>.None, Option<Bool>.Some(var2564), var1539];
                var74;
                false

        }
    }
}

public func func2486(namedParam2487 ! : (Float64, Int32) -> Int32, namedParam2491 ! : Range<UInt16>, optionalParam2492 ! : Range<Int8> = ((Int8(105)&127)..(Int8(103)&127):((-91)|1))) : Option<Option<Interface50>> { // block id: 2494
    try { // block id: 2496
        try (resource = Class43()) { // block id: 2498
            ((UInt16(35)&127)..(UInt16(154)&127):(57|1));
            var145 *= var1621;
            var466
        } finally { // block id: 2504

        };
        (var2511 ?? Class43())
    } finally { // block id: 2515
        if (true) { // block id: 2518
            (((Int16(44)&127)..=(Int16(5)&127):(12|1)), Int8(-23), var88, var1771, UInt8(6), r'N', ((UInt64(42)&127)..(UInt64(128)&127):((-42)|1)), UInt16(14));
            if (var88) { ((Int32(-37)&127)..(Int32(-56)&127):(51|1)) } else { ((var97&127)..(Int32(-61)&127):((90|1))) } ;
            var466
        };
        UInt8(106);
        try { // block id: 2538
            var877 ^= var877;
            ((Int8(-57)&127)..=(Int8(-77)&127):((-32)|1));
            Class43()
        } catch (e: Exception) { // block id: 2544
            if (false) { var1058 } else { var1058 } ;
            ();
            Class43()
        } finally { // block id: 2551
            var165
        }
    };
    let var2681 : ((Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64)) -> Option<Interface50> = func2163;
    Option<Option<Interface50>>.Some(if (func2556(namedParam2557 : (92, ((Int32(33)&127)..(Int32(111)&127):((-61)|1)), var2345, var1028))) { try { // block id: 2665
        var74;
        if (var2564) { Option<Interface50>.Some(Class43()) } else { Option<Interface50>.None }
    } finally { // block id: 2672
        var877;
        ((var671&127)..(Int8(70)&127):(((-33)|1)));
        Option<Interface50>.None
    } } else { (var1058|>var2681) } )
}


public func func2967(param2968 : Option<Bool>, namedParam2969 ! : Array<UInt64>, optionalParam2970 ! : Array<Float32> = [Float32(89.0), Float32(57.0), Float32(82.0), Float32(120.0), Float32(94.0), Float32(-45.0), Float32(-50.0), Float32(121.0), Float32(29.0), Float32(9.0)], namedParam2972 ! : (Array<Float32>, Interface50, Array<Bool>, String) -> Range<Int16>) : Int16 { // block id: 2978
    try (resource = Class43()) { // block id: 2980
        var2987.getOrThrow();
        if (true) { // block id: 3017
            ();
            Class43();
            ()
        }
    } catch (e: Exception) { // block id: 3023
        if (var88) { // block id: 3026
            var74
        }
    };
    ();
    var976
}


public func func2963(param2964 : Float32) : Range<Int64> { // block id: 2965
    func2967(match (if (false) { Option<UInt8>.None } else { Option<UInt8>.Some(var1013) } ) {
        case _ =>
            Class43();
            var695

        case _ : Array<UInt64> =>
            var695

        case _ =>
            ();
            ((((UInt64(71)&127)..=(UInt64(84)&127):((-22)|1)), ((UInt16(2)&127)..=(var877&127):(((-117)|1)))), (24, ((Int32(126)&127)..(Int32(75)&127):((-105)|1)), var2345, var3061));
            if (false) { var695 } else { var3068 }

        case _ =>
            ();
            var3087;
            if (var2564) { var3068 } else { var3068 }

    }, namedParam2969 : if (var2564) { [UInt64(171), UInt64(74), UInt64(211), UInt64(234), UInt64(185), UInt64(166), UInt64(187), UInt64(47), UInt64(216), UInt64(67)] } else { try { // block id: 3116
        var976 |= Int16(116);
        var40 * var40;
        [UInt64(77), UInt64(25), UInt64(49), UInt64(250), UInt64(94), UInt64(202), UInt64(27), UInt64(98), UInt64(97), UInt64(150)]
    } finally { // block id: 3124
        var var3144 : Array<UInt64> = [UInt64(28), UInt64(114), UInt64(113), UInt64(65), UInt64(38), UInt64(162), UInt64(171), UInt64(35), UInt64(17), UInt64(5)];
        if (var2564) { [UInt64(38), var1621, var3131, var3134, var3131, var1962, var145, UInt64(162), UInt64(10), UInt64(240)] } else { var3144 }
    } } , optionalParam2970 : try { // block id: 3147
        var466;
        (((Int16(48)&127)..(Int16(82)&127):(50|1)), Int8(121), var2564, ((Int16(-107)&127)..(Int16(-123)&127):((-4)|1)), UInt8(171), var547, var560, UInt16(205));
        var162
    } finally { // block id: 3159
        var153;
        var162
    }, namedParam2972 : func515);
    var var3168 : Interface47 = Class43();
    try { // block id: 3164
        if (false) { var3168 } else { var3168 } ;
        var88 ||= false;
        Float64(param2964)
    } finally { // block id: 3176
        (Option<Unit>.None ?? var74);
        var3186 / Float64((Int32(68.0)) | 1)
    };
    ((84&127)..=((-109)&127):((-32)|1))
}


public func func2864(param2865 : Interface47) : Bool { // block id: 2866
    var74;
    var var2929 : (Float64, UInt32, Range<UInt8>, Int8, (Bool, Bool, Int8, Int32, Range<Int32>, UInt64), (Bool, Bool, Int8, Int32, Range<Int32>, UInt64), Float32) = (Float64(Float64((-90.0))), UInt32(Int16(-76)), ((UInt8(32)&127)..(UInt8(UInt8(245))&127):((117|1))), Int8(-112), ((Class43(((UInt8(65)&127)..(UInt8(127)&127):(((-36)|1))), func1868, Option<Bool>.None, namedParam2953 : [((Int16(-36)&127)..=(Int16(97)&127):((-59)|1)), ((Int16(-42)&127)..(Int16(-41)&127):((-42)|1)), ((Int16(-40)&127)..(Int16(-78)&127):(7|1)), ((Int16(-78)&127)..=(Int16(23)&127):(104|1)), ((Int16(-119)&127)..(Int16(83)&127):(48|1)), ((Int16(-39)&127)..(Int16(6)&127):(18|1)), ((Int16(-52)&127)..=(Int16(10)&127):((-23)|1)), ((Int16(-10)&127)..(Int16(-4)&127):((-47)|1)), ((Int16(1)&127)..=(Int16(-83)&127):(9|1)), ((Int16(11)&127)..(Int16(107)&127):((-110)|1))]) is (Range<Int16>, Int8, Bool, Range<Int16>, UInt8, Rune, Range<UInt64>, UInt16)), ((Option<Option<Bool>>.None as Int16) is String), Int8(99), Int32(-58), ((Int32(-16)&127)..(Int32(17)&127):(90|1)), UInt64(229)), ((((-4.0), UInt32(189), ((UInt8(64)&127)..(UInt8(60)&127):(((-32)|1))), Int8(-91), (true, true, Int8(0), Int32(-24), ((Int32(122)&127)..=(Int32(51)&127):(88|1)), UInt64(3)), (true, true, Int8(78), Int32(-68), ((Int32(57)&127)..(Int32(-48)&127):((-5)|1)), UInt64(106)), Float32(6.0)) is Option<Option<(Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64)>>), true, Int8(UInt8(210)), Int32(UInt8(Int8(-125))), ((Int32(-56)&127)..(Int32(114)&127):(78|1)), UInt64(162)), Float32(Float32(Float32(Float32(96.0)))));
    var1028 >= UInt32(match (var976) {
        case -125 | 45 | 83 | -39 =>
            var671

        case -121 | -65 | -89 =>
            var466;
            Int8(-36)

        case -101 | 8 | -89 | 59 =>
            if (false) { var2888 } else { (var2929, var3297, Int16(-119), ((var588&127)..(var97&127):((var386|1)))) } ;
            var74;
            let var3309 : Int8 = Int8(Int8(-111));
            var3309

        case -62 | -4 | -103 | -127 =>
            var671

        case _ =>
            var74;
            Int8(46)

    })
}



public func func2440(optionalParam2441 ! : Interface49 = Class43(), optionalParam2443 ! : Int16 = Int16(Int16(-8)), namedParam2446 ! : (Interface52, Int64, (Interface50) -> Int8) -> Range<Int32>) : Bool { // block id: 2451
    let var2685 : (Float64, Int32) -> Int32 = func16;
    try { // block id: 2453
        var2460.getOrThrow()
    } catch (_) { // block id: 2465
        match (var588) {
            case 103 =>
                Class43()

            case _ =>
                var74;
                var2476

        };
        var var2480 : UInt8 = UInt8(UInt8(UInt8(205)));
        var2480 = UInt8(152);
        let var2688 : Range<UInt16> = ((UInt16(36)&127)..=(UInt16(47)&127):((-111)|1));
        func2486(namedParam2487 : var2685, namedParam2491 : var2688)
    };
    let var3489 : ?Range<Int64> = ([(Class43() is () -> Option<Bool>), (((Int16(-98)&127)..=(Int16(104)&127):((-35)|1)) is Option<Bool>), true, false, true, true, false, false, ((((-70.0), UInt32(123), ((UInt8(137)&127)..(UInt8(28)&127):(((-6)|1))), Int8(71), (false, false, Int8(-52), Int32(-121), ((Int32(111)&127)..=(Int32(52)&127):((-117)|1)), UInt64(166)), (true, false, Int8(111), Int32(112), ((Int32(-62)&127)..(Int32(-98)&127):(111|1)), UInt64(131)), Float32(-88.0)), Int8(23), Int16(108), ((Int32(-24)&127)..(Int32(73)&127):(6|1))) is Array<Option<Bool>>), (() is UInt16)] as Range<Int64>);
    func func2691(namedParam2692 ! : (Int32) -> Int8, namedParam2695 ! : Interface52, optionalParam2696 ! : Array<Option<UInt8>> = [Option<UInt8>.None, Option<UInt8>.None, (((UInt32(59)&127)..=(UInt32(112)&127):((-88)|1)) as UInt8), Option<UInt8>.Some(UInt8(139)), Option<UInt8>.None, Option<UInt8>.Some(UInt8(UInt8(137))), Option<UInt8>.None, (Int32(UInt32(UInt8(79))) as UInt8), ([Option<UInt8>.Some(UInt8(223)), Option<UInt8>.Some(UInt8(163)), (((((UInt64(194)&127)..=(UInt64(248)&127):(122|1)), ((UInt16(200)&127)..=(UInt16(216)&127):(12|1))), ((-52), ((Int32(7)&127)..=(Int32(112)&127):(6|1)), (((114&127)..=(76&127):(84|1)), 105.0, r't', ((UInt8(252)&127)..(UInt8(157)&127):(90|1)), true, UInt64(26)), UInt32(133))) as UInt8), (Class43() as UInt8), ([Option<UInt8>.None, Option<UInt8>.None, Option<UInt8>.None, Option<UInt8>.None, Option<UInt8>.Some(UInt8(179)), Option<UInt8>.None, Option<UInt8>.Some(UInt8(82)), Option<UInt8>.None, Option<UInt8>.Some(UInt8(150)), Option<UInt8>.None] as UInt8), (Option<Option<Interface50>>.None as UInt8), (((Int8(44)&127)..(Int8(53)&127):(((-51)|1))) as UInt8), (UInt64(49) as UInt8), Option<UInt8>.Some(UInt8(17)), Option<UInt8>.None] as UInt8), (([(), (), (), (), (), (), (), (), (), ()], Int64((-12)), (true, true, Int8(13), Int32(-125), ((Int32(71)&127)..(Int32(-77)&127):((-22)|1)), UInt64(242)), ((119.0, UInt32(12), ((UInt8(9)&127)..=(UInt8(44)&127):((-110)|1)), Int8(-59), (false, false, Int8(-105), Int32(33), ((Int32(84)&127)..(Int32(110)&127):(((-126)|1))), UInt64(197)), (false, true, Int8(82), Int32(14), ((Int32(-122)&127)..=(Int32(-92)&127):((-27)|1)), UInt64(48)), Float32(-21.0)), Int8(54), Int16(-10), ((Int32(93)&127)..=(Int32(-82)&127):(126|1))), (((-92.0), UInt32(77), ((UInt8(97)&127)..(UInt8(176)&127):(56|1)), Int8(97), (true, false, Int8(-10), Int32(65), ((Int32(4)&127)..=(Int32(3)&127):(73|1)), UInt64(146)), (true, false, Int8(-43), Int32(-63), ((Int32(93)&127)..=(Int32(-59)&127):(19|1)), UInt64(38)), Float32(33.0)), Int8(-106), Int16(91), ((Int32(-100)&127)..(Int32(124)&127):((-123)|1))), (((-14.0), UInt32(205), ((UInt8(86)&127)..=(UInt8(161)&127):((-89)|1)), Int8(94), (false, false, Int8(-22), Int32(-127), ((Int32(77)&127)..(Int32(-2)&127):((39|1))), UInt64(202)), (false, true, Int8(47), Int32(-128), ((Int32(-28)&127)..=(Int32(126)&127):((83|1))), UInt64(231)), Float32(124.0)), Int8(-101), Int16(-12), ((Int32(106)&127)..=(Int32(112)&127):(102|1))), UInt16(60), Int8(Int8(125))) as UInt8)], namedParam2860 ! : Range<UInt32>) : Range<Int64> { // block id: 2861
        var var3321 : (Interface47) -> Bool = func2864;
        let var3338 : Array<Range<Int16>> = Array<Range<Int16>>(10){ i => ((Int16(-94)&127)..=(Int16(-48)&127):((-93)|1)) };
        if (((var3329 ?? Class43(((UInt8(235)&127)..=(UInt8(151)&127):((-90)|1)), func1868, var3335, namedParam2953 : var3338))|>var3321)) { match (if (true) { // block id: 3367
                var2627;
                UInt32(115)
            } else if (var88) { // block id: 3371
                UInt64(219);
                UInt32(171)
            } else { // block id: 3377
                UInt32(156) % ((UInt32(118)) | 1)
            }) {
            case _ =>
                ();
                var1951

            case _ =>
                [(), (), (), (), (), (), (), (), (), ()];
                if (var88) { ((UInt8(126)&127)..=(var1013&127):((var2959|1))) } else { ((UInt8(227)&127)..(UInt8(236)&127):((-20)|1)) }

        } } else { ((UInt8(157)&127)..=(UInt8(113)&127):(16|1)) } ;
        (try { // block id: 3403
            if (true) { Option<Range<Int64>>.Some(((var386&127)..=((-49)&127):((0|1)))) } else { Option<Range<Int64>>.Some(((16&127)..((-89)&127):((-95)|1))) }
        } catch (e: Exception) { // block id: 3413
            var var3416 : ?(Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64) = Option<(Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64)>.Some((((Int64(UInt8(195))&127)..((-120)&127):((Int64(UInt32(78))|1))), 98.0, r'J', ((UInt8(UInt8(222))&127)..(UInt8(UInt8(253))&127):(((-50)|1))), ((false, (false, false, Int8(-77), Int32(-123), ((Int32(-21)&127)..(Int32(26)&127):((85|1))), UInt64(150)), ((UInt64(5)&127)..(UInt64(249)&127):((76|1))), [Float32(-32.0), Float32(-74.0), Float32(-126.0), Float32(31.0), Float32(-35.0), Float32(94.0), Float32(-97.0), Float32(-20.0), Float32(-58.0), Float32(23.0)], (), [((Int16(47)&127)..(Int16(29)&127):(((-83)|1))), ((Int16(121)&127)..=(Int16(108)&127):(((-90)|1))), ((Int16(-41)&127)..=(Int16(-31)&127):(8|1)), ((Int16(-84)&127)..(Int16(-116)&127):((108|1))), ((Int16(-40)&127)..=(Int16(-83)&127):((10|1))), ((Int16(122)&127)..=(Int16(70)&127):((-96)|1)), ((Int16(116)&127)..(Int16(-52)&127):(80|1)), ((Int16(-80)&127)..(Int16(72)&127):(55|1)), ((Int16(102)&127)..(Int16(-108)&127):((-115)|1)), ((Int16(-125)&127)..=(Int16(-16)&127):((-74)|1))]) is (Int32) -> Int8), UInt64(Int16(Int8(-4)))));
            Option<Option<(Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64)>>.Some(var3416);
            var3489
        } finally { // block id: 3532
            var74;
            var3489
        } ?? (try { // block id: 3537
            var3540 &= UInt8(80);
            var386
        } catch (e: Exception) { // block id: 3545
            [Option<UInt8>.Some(var1013), Option<UInt8>.Some(var3540), var2126, var2126, var2126, var2126, var2126, var3557, var2126, var3557];
            (-68)
        } finally { // block id: 3562
            var386
        }&127)..=(if (var2564) { // block id: 3566
            var386
        } else if (true) { // block id: 3569
            if (false) { var2627 } else { Option<Option<Bool>>.Some(var3068) } ;
            54
        } else { // block id: 3576
            var74;
            var2959
        }&127):(if (true) { // block id: 3581
            ();
            var386 - var2959
        } else { // block id: 3586
            (-74)
        }|1))
    }
;
    let var3589 : (Int32) -> Int8 = func655;
    func2691(namedParam2692 : var3589, namedParam2695 : var3592, namedParam2860 : ((UInt32(191)&127)..=(UInt32(128)&127):((-15)|1)));
    match (match (Option<Option<Interface50>>.None) {
            case _ : Interface52 =>
                var671

            case _ =>
                var3540 >>= ((UInt8(231)) & 7);
                var3297

        }) {
        case caseVar3613 =>
            var97 |= Int32(-44);
            var3619;
            UInt8(137) != var1013

        case -46 =>
            var3297 >= var3297

        case caseVar3632 =>
            true

        case -25 | -22 | -35 =>
            (var560, var3641);
            var88

        case _ =>
            var422;
            var3540 |= var3540;
            var88

    }
}

public func func2435(param2436 : Option<Interface50>) : (Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64) { // block id: 2437
    var var3675 : (Interface52, Int64, (Interface50) -> Int8) -> Range<Int32> = func1868;
    var loopTimeVar3691 : Int64 = 0;
    while ((func2440(optionalParam2443 : match (var158) {
        case _ : (Int64, Range<Int32>, (Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64), UInt32) =>
            ();
            Int16(72)

        case _ =>
            ();
            ();
            var976 - Int16(113)

        case _ =>
            Int16(72)

    }, namedParam2446 : var3675)) && loopTimeVar3691 < 100 ) {
        loopTimeVar3691++;
        (var3680, var40, var547, ((UInt8(88)&127)..(UInt8(90)&127):((var386|1))), true, var3131)
    };
    try { // block id: 3693
        if (var88) { var923 } else { var923 }
    } finally { // block id: 3698
        let var3709 : (Int64, Range<Int32>, (Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64), UInt32) = (77, ((Int32(UInt32(61))&127)..(Int32(14)&127):((86|1))), (((Int64((-49))&127)..=(Int64(UInt64(185))&127):(((-7)|1))), Float64(Float32(Float32(120.0))), r'B', ((UInt8(UInt8(41))&127)..(UInt8(10)&127):((71|1))), false, UInt64(UInt64((-99)))), UInt32(UInt16(112)));
        try { // block id: 3700
            if (false) { var2315 } else { var2315 }
        } catch (_) { // block id: 3705
            if (true) { var3709 } else { ((-19), ((Int32(-102)&127)..=(Int32(113)&127):((-5)|1)), var2345, var1028) }
        }
    };
    if (try { // block id: 3746
        Option<Interface51>.None;
        var88
    } finally { // block id: 3749
        var200;
        var1962 != var3131
    }) { (if ((Class43(((UInt8(42)&127)..(UInt8(39)&127):((-52)|1)), var3675, var3068, namedParam2953 : var3761) is Option<(Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64)>)) { if (false) { // block id: 3795
        ();
        Class43(var1951, var3675, Option<Bool>.None, namedParam2953 : [((Int16(53)&127)..=(Int16(-118)&127):(62|1)), ((Int16(116)&127)..=(Int16(-79)&127):((23|1))), ((Int16(78)&127)..(Int16(-14)&127):((-15)|1)), ((var976&127)..(Int16(-75)&127):((63|1))), ((Int16(-49)&127)..(Int16(-35)&127):(4|1)), var1771, ((var976&127)..(var976&127):((78|1))), ((Int16(-22)&127)..(Int16(64)&127):(109|1)), ((Int16(-91)&127)..=(Int16(-28)&127):((-35)|1)), ((Int16(18)&127)..(Int16(-84)&127):(((-33)|1)))]);
        if (true) { (var3680, var3186, r'o', var1951, var2564, var3134) } else { var1058 }
    } else { // block id: 3834
        (var3680, 5.0, var547, ((var1013&127)..=(var3540&127):(((-76)|1))), var2564, var3131)
    } } else { (Option<(Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64)>.None ?? (var3680, (-21.0), r'e', ((UInt8(217)&127)..(UInt8(93)&127):((var386|1))), var2564, UInt64(238))) } ) } else { (if ((true is (Range<Int16>) -> Unit)) { (if (var2564) { var2345 } else { (var3680, 56.0, var547, ((var1013&127)..(var3540&127):((var2959|1))), var2564, var145) } ) } else { try { // block id: 3874
        ((UInt8(108)&127)..=(var1013&127):(((-110)|1)));
        (((89&127)..=(109&127):((-115)|1)), (-128.0), var547, ((UInt8(207)&127)..(UInt8(185)&127):((-110)|1)), true, UInt64(102))
    } finally { // block id: 3886
        var88 ||= var2564;
        var2345
    } } ) }
}

public func func1862(param1863 : (Range<Int32>) -> UInt8) : Bool { // block id: 1866
    func1868(namedParam1869 : Class43(), namedParam1870 : [(-99), 116, (-38), 2, (-7), (-24), 23, 20, (-54), 74][6]);
    let var2140 : ?UInt8 = (Int8(UInt8(Int8(Int8(25)))) as UInt8);
    let var3901 : (Interface52, Int64, (Interface50) -> Int8) -> Range<Int32> = func1868;
    func func2090(optionalParam2091 ! : Int8 = Int8(UInt8(UInt8(Int8(55)))), optionalParam2096 ! : Range<Int8> = ((Int8(-56)&127)..=(Int8(Int8(-49))&127):(((-56)|1))), optionalParam2102 ! : Array<Int64> = [67, (-80), 11, 34, (-127), 70, (-116), (-72), 2, 117]) : Bool { // block id: 2104
        ();
        (match (Float32(24.0)) {
            case _ =>
                var1028;
                let var2119 : Interface48 = Class43();
                var2119;
                if (true) { [Option<UInt8>.None, var2126, var2126, Option<UInt8>.Some(var1013), Option<UInt8>.None, Option<UInt8>.None, Option<UInt8>.None, var2126, Option<UInt8>.None, var2126] } else { [Option<UInt8>.None, var2140, var2140, var2140, Option<UInt8>.Some(UInt8(148)), Option<UInt8>.None, Option<UInt8>.None, Option<UInt8>.Some(var1013), var2126, var2126] }

        }[3] ?? UInt8(Int64(UInt8(180)) ** UInt64(UInt8(95) & 3)) );
        let var3892 : (Option<Interface50>) -> (Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64) = func2435;
        match (((Option<Interface50>.Some(Class43(((UInt8(34)&127)..=(var1013&127):(((-14)|1))), var3901, var695, namedParam2953 : var3761))|>var3892)|>{ lambdaParameter2409 : (Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64) => (var2417 ?? try { // block id: 2422
                var379
            } catch (_) { // block id: 2424
                var190 &= UInt64(0);
                if (var88) { Option<Interface50>.None } else { var379 }
            } finally { // block id: 2432
                Option<Interface50>.None
            }) })) {
            case caseVar3907 =>
                true

            case _ =>
                var3914;
                ((UInt8(27)&127)..(UInt8(251)&127):(124|1));
                var88

            case _ =>
                let var3921 : Bool = false;
                var3921

        }
    }
;
    var var3961 : ?Unit = Option<Unit>.Some(());
    var loopTimeVar3966 : Int64 = 0;
    while ((func2090(optionalParam2091 : try { // block id: 3924
        Option<Option<Option<Interface50>>>.Some(var2417);
        Int8(34)
    } finally { // block id: 3928
        var3540 ^= UInt8(245);
        var3329;
        var671 & var671
    }, optionalParam2096 : ((Int8(76)&127)..(Int8(-7)&127):(58|1)), optionalParam2102 : try { // block id: 3938
        var3619;
        let var3941 : Unit = ();
        var3941;
        [var2959, (-98), var386, var2959, var386, 58, var2959, var3952, var386, var3952]
    } finally { // block id: 3956
        var3087
    })) && loopTimeVar3966 < 100 ) {
        loopTimeVar3966++;
        (var3961 ?? ())
    };
    var2564
}

public func func3969(param828 : Range<Int32>) : UInt8 { // block id: 829
    var loopTimeVar852 : Int64 = 0;
    do {
        loopTimeVar852++;

    } while ((var833[0]) && loopTimeVar852 < 100 ) ;
    var var871 : UInt8 = UInt8(UInt8(49));
    try { // block id: 856
        let var862 : Int16 = Int16(UInt16(243));
        var var880 : (Range<Int16>, Int8, Bool, Range<Int16>, UInt8, Rune, Range<UInt64>, UInt16) = (((Int16(-3)&127)..=(Int16(-43)&127):(61|1)), Int8(UInt8(251)), false, ((Int16(80)&127)..=(Int16(-35)&127):((-6)|1)), UInt8(174), r'Q', ((UInt64(170)&127)..=(UInt64(44)&127):((122|1))), UInt16(127));
        if (var88) { (((var862&127)..(Int16(-110)&127):((9|1))), Int8(-97), var88, ((Int16(-81)&127)..(Int16(98)&127):((-88)|1)), var871, var547, var560, var877) } else { var880 }
    } catch (e: Exception) { // block id: 894
        var var897 : Float64 = Float64(Float32(Float32(112.0)));
        // var897 %= Float64((Int32(var897)) | 1);
        (((Int16(-98)&127)..=(Int16(47)&127):((-120)|1)), var671, var88, ((Int16(27)&127)..(Int16(-68)&127):(91|1)), var871, var547, var560, var877)
    }[4]
}




public func func1484(namedParam1485 ! : Rune, namedParam1486 ! : Range<UInt64>, optionalParam1487 ! : Option<Bool> = Option<Bool>.None, namedParam1489 ! : UInt32) : Unit { // block id: 1490
    Class43(namedParam1493 : ((UInt8(193)&127)..(UInt8(196)&127):(69|1)));
    try { // block id: 4156
        [Float32(5.0), var533, var4161, var533, var4161, Float32(53.0), Float32(48.0), var533, var4161, Float32(-72.0)]
    } catch (e: Exception) { // block id: 4170
        var loopTimeVar4178 : Int64 = 0;
        while ((false) && loopTimeVar4178 < 100 ) {
            loopTimeVar4178++;
            var877 ^= UInt16(152)
        };
        try { // block id: 4180
            var145;
            """
Ew1z.
y`B64
""";
            Option<Interface50>.None
        } catch (_) { // block id: 4184
            (var2564, (var2564, false, Int8(-107), var588, var1732, var1621), var4195, var162, var3914, [((Int16(61)&127)..(Int16(-120)&127):(125|1)), ((Int16(-20)&127)..=(Int16(96)&127):((-108)|1)), ((Int16(-42)&127)..=(Int16(-91)&127):((-106)|1)), ((Int16(61)&127)..(Int16(-14)&127):((-101)|1)), ((Int16(-6)&127)..(Int16(-32)&127):((-37)|1)), ((Int16(-7)&127)..(Int16(-115)&127):(68|1)), ((Int16(-109)&127)..(Int16(108)&127):((-71)|1)), ((Int16(67)&127)..=(Int16(-37)&127):((-70)|1)), ((Int16(12)&127)..(Int16(-101)&127):(33|1)), ((Int16(91)&127)..(Int16(-27)&127):(95|1))]);
            Option<Interface50>.Some(var4202)
        };
        [Float32(90.0), Float32(119.0), Float32(-39.0), Float32(84.0), Float32(91.0), Float32(63.0), Float32(42.0), Float32(-98.0), Float32(37.0), Float32(113.0)]
    } finally { // block id: 4205
        var88 ||= true;
        (Option<Unit>.Some(var74) ?? var74);
        var162
    };
    var var4394 : Rune = r'M';
    match ((try { // block id: 4217
            var1539;
            var466;
            var1771
        } catch (e: Exception) { // block id: 4221
            ((Int16(54)&127)..(Int16(57)&127):((-64)|1))
        }, match (var4225) {
            case (caseVar4249 : Range<Int64>,caseVar4250 : UInt8,caseVar4251,caseVar4252,caseVar4253,caseVar4254 : Option<(Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64)>,caseVar4255,caseVar4256 : Range<UInt64>) =>
                Int8(-77)

            case (_,caseVar4261 : Array<Unit>,_ : Rune,caseVar4262 : Array<UInt64>,caseVar4263,_ : Unit,_ : Option<Option<Interface50>>,_ : Interface46) =>
                var2199;
                ();
                var671

            case caseVar4270 : (Float64, UInt32, Range<UInt8>, Int8, (Bool, Bool, Int8, Int32, Range<Int32>, UInt64), (Bool, Bool, Int8, Int32, Range<Int32>, UInt64), Float32) =>
                var74;
                Class43();
                var671

            case _ =>
                if (true) { var3761 } else { var3761 } ;
                Int8(-101)

        }, (Option<Bool>.None ?? var88), match (Option<Bool>.None) {
            case _ =>
                UInt16(80) << ((var877) & 7);
                var1771

            case _ =>
                (true, true, Int8(24), var97, ((Int32(15)&127)..=(Int32(-121)&127):(((-87)|1))), var3134);
                ((Int16(21)&127)..=(Int16(101)&127):(5|1))

        }, match (Option<Int16>.None) {
            case _ =>
                var1904;
                UInt8(178) / ((UInt8(163)) | 1)

            case caseVar4322 =>
                UInt8(133) * var1013

            case _ =>
                var4225;
                if (var2564) { Class43() } else { Class43() } ;
                UInt8(138) >> ((var3540) & 7)

            case _ =>
                var3540 << ((UInt8(82)) & 7)

            case _ =>
                var3540 & var3540

        }, if (var2564) { // block id: 4351
            ();
            if (var88) { r'j' } else { var547 }
        } else if (var88) { // block id: 4358
            ();
            r'i'
        } else { // block id: 4361
            if (var2564) { [var1539, Option<Bool>.None, var1539, Option<Bool>.Some(false), var1539, var4372, var1539, var1539, var1539, Option<Bool>.None] } else { [var4372, Option<Bool>.Some(var88), var1539, var4372, Option<Bool>.Some(var2564), Option<Bool>.Some(false), Option<Bool>.Some(true), var1539, var4372, var4372] } ;
            var4394
        }, if (true) { var560 } else { ((var145&127)..=(var1962&127):(((-104)|1))) } , match ([false, var88, var4408, var4408, var2564, var88, false, var4408, false, var4408]) {
            case _ =>
                var877

        })) {
        case (_,caseVar4422,caseVar4423 : Range<Int32>,_,_,_ : Range<UInt8>,caseVar4424,caseVar4425) =>
            if (false) { ((UInt8(142)&127)..(UInt8(50)&127):((-123)|1)) } else { ((UInt8(231)&127)..=(UInt8(153)&127):((-97)|1)) } ;
            ()

        case _ =>
            ();
            var var4438 : UInt32 = UInt32(215);
            var4438 = namedParam1489;
            var877 |= var877

        case (caseVar4446,caseVar4447 : Int8,caseVar4448 : Option<Option<Interface50>>,_ : (Float64, UInt32, Range<UInt8>, Int8, (Bool, Bool, Int8, Int32, Range<Int32>, UInt64), (Bool, Bool, Int8, Int32, Range<Int32>, UInt64), Float32),_,_ : Interface46,caseVar4449 : Option<Bool>,_) =>
            ()

        case _ =>
            if (var2564) { (((Int16(-22)&127)..=(var976&127):((var3952|1))), var3297, false, var1771, UInt8(205), namedParam1485, namedParam1486, UInt16(160)) } else { var4225 } ;
            var3914

        case _ =>
            let var4478 : Interface47 = Class43();
            if (var88) { Class43(namedParam1493 : var1951) } else { var4478 } ;
            var74

    }
}





public func func1480(param1481 : Range<UInt64>) : Int8 { // block id: 1482
    let var4540 : ?UInt32 = (((Option<Bool>.None as Option<(Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64)>) as Unit) as UInt32);
    func1484(namedParam1485 : var547, namedParam1486 : var560, optionalParam1487 : match ((Option<(Int64, Range<Int32>, (Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64), UInt32)>.None ?? var923)) {
        case _ =>
            var4496

        case (caseVar4500 : (Float64, UInt32, Range<UInt8>, Int8, (Bool, Bool, Int8, Int32, Range<Int32>, UInt64), (Bool, Bool, Int8, Int32, Range<Int32>, UInt64), Float32),caseVar4501,(caseVar4502 : Enum419,_ : Option<Bool>,caseVar4503 : Interface51,caseVar4504,caseVar4505,caseVar4506),_ : Array<Option<Bool>>) =>
            if (var4510) { Class43() } else { Class43(((UInt8(153)&127)..=(UInt8(89)&127):(15|1)), func1868, var3068, namedParam2953 : [((Int16(-44)&127)..=(Int16(-46)&127):(39|1)), ((Int16(45)&127)..(Int16(48)&127):(118|1)), ((Int16(114)&127)..(Int16(30)&127):(99|1)), ((Int16(-119)&127)..=(Int16(86)&127):(33|1)), ((Int16(-110)&127)..=(Int16(82)&127):(66|1)), ((Int16(-106)&127)..=(Int16(-112)&127):((-117)|1)), ((Int16(18)&127)..(Int16(104)&127):((-23)|1)), ((Int16(-86)&127)..=(Int16(38)&127):(85|1)), ((Int16(47)&127)..(Int16(122)&127):(95|1)), ((Int16(61)&127)..=(Int16(120)&127):((-34)|1))]) } ;
            if (false) { Option<Bool>.Some(var4510) } else { var695 }

        case _ =>
            Option<Bool>.Some(true)

    }, namedParam1489 : ((Option<Option<UInt32>>.None ?? var4540) ?? match (Option<Bool>.None) {
        case _ =>
            if (var88) { Option<Interface51>.None } else { Option<Interface51>.Some(Class43(namedParam1493 : ((var1013&127)..=(var1013&127):((var3952|1))))) } ;
            UInt32(164)

        case _ =>
            -var1028

    }));
    match (Option<Bool>.Some(var2564)) {
        case _ : Interface49 =>
            ((Int32(87)&127)..=(Int32(-64)&127):((-108)|1));
            (((Int16(37)&127)..(Int16(85)&127):((-96)|1)), Int8(84), false, ((var976&127)..=(Int16(57)&127):((var3952|1))), var3540, var547, var560, var877)

        case _ =>
            var466;
            var4587

    };
    var var4685 : Int8 = Int8(13);
    if ((try { // block id: 4615
        Float32(99.0)
    } catch (_) { // block id: 4617
        var3914;
        ();
        Float32(Float64(var533) ** Float64(Float32(Int32(Float32(-20.0)) & 3)))
    } is (Float64, Int32) -> Int32)) { // block id: 4623
        if (true) { // block id: 4626
            if (var2564) { Option<UInt32>.Some(var3061) } else { Option<UInt32>.Some(UInt32(176)) } ;
            var976 & Int16(-120)
        } else { // block id: 4636
            ();
            var3952 -= var386;
            var976
        };
        try { // block id: 4643
            var74;
            if (var4510) { ((var3061&127)..(UInt32(216)&127):(((-96)|1))) } else { ((UInt32(113)&127)..=(UInt32(149)&127):((-70)|1)) }
        } finally { // block id: 4652
            let var4658 : Float32 = Float32(Float32(Float32(1.0)));
            [var4161, var4161, Float32(-120.0), var4658, Float32(99.0), Float32(21.0), var533, var4161, Float32(-54.0), Float32(-36.0)];
            var200
        };
        if (true) { // block id: 4671
            Int16(113);
            Int8(2) + var3297
        } else if (false) { // block id: 4677
            Int8(Int64(var3297) ** UInt64((Int8(-29) & 3)))
        } else { // block id: 4681
            var3297 * var4685
        }
    } else if (try { // block id: 4688
        ();
        ();
        true
    } finally { // block id: 4692
        ();
        var3914;
        var2564
    }) { // block id: 4696
        (var4703 ?? Option<Option<UInt32>>.None);
        var74;
        var var4715 : Bool = true;
        if (true) { // block id: 4710
            var3297
        } else { // block id: 4712
            if (var4715) { Option<Interface50>.Some(var4202) } else { var379 } ;
            var671 | Int8(-114)
        }
    } else { // block id: 4723
        var4685
    }
}

public func func4726(param4727 : Interface50) : Range<UInt64> { // block id: 4728
    var loopTimeVar4740 : Int64 = 0;
    while ((try { // block id: 4731
        var671 |= Int8(0);
        true
    } finally { // block id: 4736
        var4510
    }) && loopTimeVar4740 < 100 ) {
        loopTimeVar4740++;

    };
    var var4759 : ?Unit = ([([Option<Bool>.Some(true), Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None] is Option<Interface47>), (UInt16(UInt8(65)) is Float32), (UInt32(Int8(-24)) is (Range<Int16>, Array<Option<Bool>>) -> Class43), true, (Option<Bool>.None is Option<(Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64)>), (Option<Option<Bool>>.Some(Option<Bool>.Some(true)) is Option<Bool>), ([(), (), (), (), (), (), (), (), (), ()] is (Array<Unit>, Int64, (Bool, Bool, Int8, Int32, Range<Int32>, UInt64), ((Float64, UInt32, Range<UInt8>, Int8, (Bool, Bool, Int8, Int32, Range<Int32>, UInt64), (Bool, Bool, Int8, Int32, Range<Int32>, UInt64), Float32), Int8, Int16, Range<Int32>), ((Float64, UInt32, Range<UInt8>, Int8, (Bool, Bool, Int8, Int32, Range<Int32>, UInt64), (Bool, Bool, Int8, Int32, Range<Int32>, UInt64), Float32), Int8, Int16, Range<Int32>), ((Float64, UInt32, Range<UInt8>, Int8, (Bool, Bool, Int8, Int32, Range<Int32>, UInt64), (Bool, Bool, Int8, Int32, Range<Int32>, UInt64), Float32), Int8, Int16, Range<Int32>), UInt16, Int8)), (((false, true, Int8(-126), Int32(-30), ((Int32(-12)&127)..=(Int32(114)&127):(((-44)|1))), UInt64(50)) as Option<UInt32>) is Array<UInt64>), false, true] as Unit);
    try { // block id: 4742
        ();
        var loopTimeVar4747 : Range<UInt64> = ((UInt64(1)&127)..=(UInt64(45)&127):(((-96)|1)));
        for (i in loopTimeVar4747 where false) {

        };
        ((var190&127)..(UInt64(94)&127):((82|1)))
    } finally { // block id: 4756
        var var4812 : ?Int16 = (UInt64(UInt16(UInt8(UInt8(65)))) as Int16);
        match (var4759) {
            case _ =>
                if (var4510) { Option<Int16>.Some(var976) } else { var4812 } ;
                var877 /= ((UInt16(240)) | 1);
                var560

            case _ =>
                [var2126, var2126, Option<UInt8>.None, var2126, Option<UInt8>.Some(var3540), var2126, Option<UInt8>.Some(var3540), Option<UInt8>.Some(var1013), Option<UInt8>.Some(UInt8(56)), Option<UInt8>.None];
                ((UInt64(162)&127)..=(UInt64(86)&127):(((-86)|1)))

        }
    }
}

public func func1468(param1469 : Interface49, namedParam1470 ! : Range<Int32>) : ((Range<UInt64>, Range<UInt16>), (Int64, Range<Int32>, (Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64), UInt32)) { // block id: 1471
    var var4844 : (Interface50) -> Range<UInt64> = func4726;
    Class43.var1476 |= (if (false) { Class43() } else { var4202 } |>(var4844~>func1480));
    let var4887 : Range<Int64> = ((120&127)..=(11&127):((82|1)));
    if (try { // block id: 4852
        var97 <<= ((var588) & 7);
        !var4510
    } catch (_) { // block id: 4858
        if (false) { Option<(Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64)>.Some(var2345) } else { Option<(Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64)>.Some(var2345) } ;
        true
    }) { // block id: 4866
        (Option<UInt32>.None as UInt32);
        var loopTimeVar4872 : Range<UInt64> = ((UInt64(Int32(Int32(UInt16(69))))&127)..(UInt64(99)&127):((Int64(126)|1)));
        for (i in loopTimeVar4872 where var4408) {

        };
        var2229
    } else { // block id: 4882
        try (resource = Class43()) { // block id: 4884
            (var4887, ((var588&127)..(var588&127):(((-103)|1))), ((UInt8(33)&127)..=(UInt8(186)&127):((-12)|1)), var145, var259, var976, r'a', Float32(123.0), var3186);
            var3619
        } finally { // block id: 4904
            var1028--
        };
        var877--;
        if (var2564) { // block id: 4911
            [UInt64(208), UInt64(106), UInt64(237), UInt64(94), UInt64(16), UInt64(75), UInt64(132), UInt64(61), UInt64(141), UInt64(7)];
            var2199
        } else { // block id: 4914
            var2229
        }
    }
}


public func func1354(optionalParam1355 ! : Range<UInt64> = ((UInt64(Int16(-72))&127)..(UInt64(162)&127):((Int64(UInt16(Int8(125)))|1))), optionalParam1363 ! : (Range<Int64>, Range<Int32>, Range<UInt8>, UInt64, Array<Option<Bool>>, Int16, Rune, Float32, Float64) = ((((-81)&127)..(90&127):(64|1)), ((Int32(41)&127)..=(Int32(-37)&127):((Int64(Int8(UInt8(95)))|1))), ((UInt8(159)&127)..=(UInt8(13)&127):(((-58)|1))), UInt64(UInt16(221)), [(Class43() as Bool), Option<Bool>.Some(([(), (), (), (), (), (), (), (), (), ()] is Option<UInt64>)), (Float32(-97.0) as Bool), (UInt16(87) as Bool), Option<Bool>.None, ([((Int16(-86)&127)..(Int16(-74)&127):((-108)|1)), ((Int16(76)&127)..(Int16(-69)&127):(18|1)), ((Int16(-17)&127)..=(Int16(95)&127):(((-97)|1))), ((Int16(5)&127)..=(Int16(-52)&127):((-34)|1)), ((Int16(98)&127)..(Int16(119)&127):((-117)|1)), ((Int16(126)&127)..=(Int16(-31)&127):(11|1)), ((Int16(106)&127)..=(Int16(-99)&127):((-89)|1)), ((Int16(61)&127)..=(Int16(105)&127):(((-54)|1))), ((Int16(77)&127)..=(Int16(30)&127):(((-95)|1))), ((Int16(-23)&127)..=(Int16(-39)&127):(((-122)|1)))] as Bool), (((((-8)&127)..(85&127):((-16)|1)), (-21.0), r'O', ((UInt8(1)&127)..(UInt8(163)&127):((-81)|1)), true, UInt64(208)) as Bool), (UInt16(UInt8(85)) as Bool), (Class43() as Bool), ((((UInt64(244)&127)..=(UInt64(83)&127):((-16)|1)), ((UInt16(135)&127)..=(UInt16(157)&127):((115|1)))) as Bool)], Int16(Int8(81)), r'S', Float32(Float32(12.0)), 31.0)) : ((Range<UInt64>, Range<UInt16>), (Int64, Range<Int32>, (Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64), UInt32)) { // block id: 1439
    if (if ((var976 is Option<Interface50>)) { // block id: 1444
        var74;
        var877 > var877
    } else if (match (var158) {
        case caseVar1453 : String =>
            var88

        case _ =>
            Class43();
            var88

    }) { // block id: 1460
        var74;
        false
    } else { // block id: 1463
        Float32(-98.0) > Float32(15.0)
    }) { func1468((var4922 ?? Class43(namedParam1493 : var1951)), namedParam1470 : var1732) } else { var2229 }
}


public func func1350(param1351 : ((Range<UInt64>, Range<UInt16>), (Int64, Range<Int32>, (Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64), UInt32))) : Range<Int16> { // block id: 1352
    var var4943 : ?UInt8 = Option<UInt8>.None;
    let var5006 : Int16 = Int16(-79);
    func1354(optionalParam1363 : match (if (var4408) { [var2126, Option<UInt8>.None, Option<UInt8>.None, var3557, var3557, Option<UInt8>.Some(UInt8(80)), Option<UInt8>.None, Option<UInt8>.None, var4943, Option<UInt8>.None] } else { var4947 } ) {
        case _ =>
            var var4990 : Int64 = (-36);
            if (var4510) { (var3680, ((Int32(44)&127)..=(Int32(82)&127):(28|1)), ((var3540&127)..(var3540&127):((var4990|1))), var145, [var1539, var4372, Option<Bool>.Some(true), Option<Bool>.None, var1539, var1539, Option<Bool>.None, var1539, Option<Bool>.None, var1539], var5006, r'L', var533, var40) } else { (var3680, var1732, ((UInt8(76)&127)..(UInt8(61)&127):((-97)|1)), var3134, var259, Int16(41), r'N', var533, (-18.0)) }

    });
    (match (match (Option<Interface49>.Some(Class43(namedParam1493 : ((UInt8(163)&127)..=(UInt8(182)&127):(69|1))))) {
            case caseVar5033 =>
                var466;
                var3914;
                Option<UInt32>.Some(var1028)

            case _ =>
                ();
                Option<Option<UInt32>>.Some(var5045);
                Option<UInt32>.None

            case _ =>
                var74;
                Int32(67) >= Int32(24);
                Option<UInt32>.Some(UInt32(96))

            case _ =>
                Option<UInt32>.None

        }) {
        case _ =>
            ();
            var877 -= UInt16(179);
            var5069

        case _ =>
            var5069

        case _ =>
            Option<Option<Option<Option<UInt32>>>>.Some(var4703)

    } ?? try { // block id: 5081
        var97 <<= ((Int32(-87)) & 7);
        if (var88) { var4703 } else { Option<Option<Option<UInt32>>>.None }
    } catch (_) { // block id: 5089
        var162;
        var4703
    });
    ((Int16(-50)&127)..=(Int16(-65)&127):(125|1))
}

public func func1344<T0, T1, T2>(param1345 : String) : Range<UInt8> { // block id: 1346
    func791(namedParam792 : (var2199|>func1350)).var5096;
    var379;
    (((r'6' as UInt8) ?? match (var5105) {
        case _ : Float64 =>
            UInt8(75)

        case _ =>
            if (true) { param1345 } else { "Gf:K7M98tP" } ;
            var1013

    })&127)..=(UInt8(if (var88) { // block id):( 5121
        ((var1028&127)..=(UInt32(155)&127):((71|1)));
        var1013
    } else if (true) { // block id: 5128
        var1028 ^= UInt32(116);
        var1013
    } else { // block id: 5133
        var3914;
        var1028 %= ((var3061) | 1);
        UInt8(236) + var5141
    })&127):(var386|1)
}




public func func1305(optionalParam1306 ! : Array<Range<Int16>> = [((Int16(45)&127)..(Int16(-113)&127):((94|1))), ((Int16(Int8(-25))&127)..(Int16(Int16(48))&127):((Int64(Int64(Int32(-99)))|1))), ((Int16(-67)&127)..=(Int16(-107)&127):((-88)|1)), ((Int16(71)&127)..=(Int16(-68)&127):(50|1)), ((Int16(48)&127)..(Int16(-62)&127):(125|1)), ((Int16(-80)&127)..=(Int16(44)&127):((-56)|1)), ((Int16(36)&127)..(Int16(75)&127):(100|1)), ((Int16(-67)&127)..(Int16(-96)&127):((Int64(UInt8(Int8(69)))|1))), ((Int16(72)&127)..=(Int16(-29)&127):(64|1)), ((Int16(-86)&127)..(Int16(-80)&127):(67|1))], optionalParam1333 ! : (Range<Int16>) -> Unit = { lambdaParameter1336 : Range<Int16> =>  }, namedParam1340 ! : Int16) : Array<Range<Int16>> { // block id: 1341
    let var5153 : Bool = ((((77&127)..((-109)&127):((114|1))), Float64(Float32(Float32(-35.0))), r'D', ((UInt8(16)&127)..=(UInt8(133)&127):(80|1)), true, UInt64(144)) is (Array<Float32>, Array<Float32>, Interface51) -> Option<Bool>);
    let var5208 : Int64 = 74;
    match (("""
hL`\"Z
kBUIx
"""|>func1344<Float64, Range<Int32>, Range<Int32>>)) {
        case caseVar5148 =>
            var88 &&= var5153

        case _ : Int32 =>
            ()

        case _ =>
            var var5213 : Range<UInt8> = ((UInt8(191)&127)..=(UInt8(Int8(-40))&127):((Int64(UInt32(UInt32(Int16(-3))))|1)));
            if (var2564) { var5178 } else { Option<(Int64, Range<Int32>, (Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64), UInt32)>.Some(((-127), ((Int32(-56)&127)..=(Int32(-73)&127):((-89)|1)), ((((-16)&127)..=((-83)&127):((var5208|1))), var40, var547, var5213, var5153, UInt64(20)), var3061)) } ;
            var3619;
            ()

    };
    var var5307 : String = """
'R|V,
\\OiU\"
""";
    ((var5238 ?? if (var2564) { Option<Array<Range<Int16>>>.None } else { var5244 } ) ?? [(var5254 ?? ((Int16(78)&127)..(Int16(95)&127):(51|1))), var1771, if (false) { var1771 } else { ((Int16(-124)&127)..=(Int16(-108)&127):(91|1)) } , match (var379) {
        case caseVar5266 =>
            ();
            var5271 = r'E';
            if (var88) { ((Int16(-63)&127)..(Int16(-10)&127):((-76)|1)) } else { ((Int16(-37)&127)..=(Int16(48)&127):((13|1))) }

        case _ : Option<Bool> =>
            ((Int16(-96)&127)..=(Int16(61)&127):(68|1))

        case _ : Class43 =>
            ();
            var153;
            ((var976&127)..=(Int16(-70)&127):((var3952|1)))

        case _ =>
            ((namedParam1340&127)..(var976&127):(((-29)|1)))

    }, var1771, try { // block id: 5305
        var5307;
        if (false) { ((Int16(-83)&127)..=(Int16(60)&127):(117|1)) } else { ((Int16(92)&127)..=(Int16(62)&127):(96|1)) }
    } finally { // block id: 5313
        var3592;
        if (var5153) { var1771 } else { var1771 }
    }, ((var976&127)..=(var976&127):((var2959|1))), if (false) { ((Int16(-42)&127)..=(Int16(-36)&127):(73|1)) } else { var1771 } , try { // block id: 5328
        ();
        Option<(Int64, Range<Int32>, (Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64), UInt32)>.Some(var2315);
        if (true) { ((Int16(-17)&127)..(namedParam1340&127):((var386|1))) } else { ((Int16(-31)&127)..(Int16(58)&127):((-86)|1)) }
    } finally { // block id: 5339
        ();

        var1771
    }, match (r'x') {
        case r'c' | r'Y' | r'S' | r'o' =>
            ((Int16(-61)&127)..(Int16(72)&127):((-101)|1))

        case r'x' | r'r' =>
            var74;
            if (var5357) { [(), var3619, var466, (), (), var466, var74, (), (), ()] } else { [(), (), var3619, var466, var74, (), (), var5379, var3619, var3914] } ;
            ((Int16(-37)&127)..(Int16(-91)&127):((-85)|1))

        case r'W' =>
            var3914;
            ((Int16(100)&127)..(Int16(79)&127):((var2959|1)))

        case _ =>
            UInt64(125) ^ var145;
            if (false) { var2987 } else { var2987 } ;
            if (false) { ((Int16(92)&127)..(Int16(-11)&127):(86|1)) } else { ((Int16(18)&127)..(Int16(-19)&127):((-41)|1)) }

    }])
}



public func func1279(param1280 : Range<Int8>) : Option<UInt64> { // block id: 1281
    ();
    var1284;
    let var5481 : (Interface52, Int64, (Interface50) -> Int8) -> Range<Int32> = func1868;
    func func1287(param1288 : (Interface50) -> Int8, param1291 : Array<Option<Bool>>) : Option<UInt64> { // block id: 1292
        func1305(namedParam1340 : Int16(43))[9]|>func1294;
        Option<UInt64>.None;
        let var5445 : (Interface52, Int64, (Interface50) -> Int8) -> Range<Int32> = func1868;
        if (((var1621 > var1962) && (var88 || false))) { (match ([(), (), (), (), (), (), (), (), (), ()]) {
            case caseVar5421 : Interface51 =>
                // var4161 %= Float32((Int32(var533)) | 1);
                var3592

            case caseVar5429 : Array<Int64> =>
                var5433 != var533;

                if (true) { Class43() } else { Class43(var1951, var5445, var4496, namedParam2953 : [var1771, ((Int16(-32)&127)..=(Int16(-128)&127):(11|1)), ((Int16(-42)&127)..=(var976&127):(((-118)|1))), ((var976&127)..=(var976&127):((var386|1))), ((Int16(-14)&127)..=(Int16(-69)&127):((-101)|1)), ((Int16(-90)&127)..=(Int16(36)&127):((-86)|1)), var1771, ((Int16(73)&127)..(Int16(-12)&127):((-114)|1)), ((Int16(-40)&127)..=(Int16(116)&127):((-113)|1)), ((Int16(21)&127)..=(Int16(117)&127):((var5468|1)))]) }

            case _ =>
                var5379;
                var466;
                if (false) { Class43(((UInt8(43)&127)..(UInt8(194)&127):(63|1)), var5481, var3335, namedParam2953 : var3761) } else { Class43() }

        } as UInt64) } else { match (var165) {
            case _ =>
                ();
                Option<UInt64>.Some(var1621)

            case caseVar5496 : Range<UInt16> =>
                var3914;
                var466;
                Option<UInt64>.None

            case _ : Range<UInt8> =>
                if (true) { var153 } else { var153 }

            case _ =>
                var74;
                var466;
                Option<UInt64>.Some(UInt64(132))

        } }
    }
;
    func1287(func413, ((Option<Option<Array<Option<Bool>>>>.Some(var5527) ?? var5527) ?? [Option<Bool>.None, var1539, Option<Bool>.Some(var88), var4372, var4372, var1539, var4372, Option<Bool>.Some(true), Option<Bool>.None, var4372]))
}


public func func5548(param5549 : Interface50) : Int32 { // block id: 5550
    var3619;
    var var5567 : ?Int32 = ((([(), (), (), (), (), (), (), (), (), ()] as Range<Int16>) as Bool) as Int32);
    var var5620 : ??UInt32 = (((Int64(UInt64(UInt64(145)))&127)..(Int64(Int8(Int8(116)))&127):((Int64(UInt64(UInt16(249)))|1))) as Option<UInt32>);
    (try { // block id: 5558
        if (var2564) { var5238 } else { var5238 } ;
        if (var4408) { Option<Int32>.None } else { var5567 }
    } finally { // block id: 5582
        Option<Int32>.Some(Int32(-89))
    } ?? (match ((true, var2564, Int8(-97), Int32(107), ((var588&127)..=(Int32(56)&127):((123|1))), var3131)) {
        case caseVar5599 : Option<(Int64, Range<Int32>, (Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64), UInt32)> =>
            var5271 = r'I';
            var190 &= var3131;
            if (false) { var5567 } else { var5567 }

        case (_,caseVar5613,caseVar5614 : Interface51,caseVar5615 : Bool,caseVar5616,caseVar5617) =>
            var5620;
            if (caseVar5613) { Option<Int32>.None } else { Option<Int32>.None }

        case _ =>
            var466;
            var1771;
            if (false) { Option<Int32>.None } else { var5567 }

    } ?? Int32(-32)))
}

public func func368(param369 : Int16) : Int8 { // block id: 370
    let var408 : Range<UInt64> = ((UInt64(85)&127)..(UInt64(147)&127):(1|1));
    if (((var379 ?? Class43()) is Array<Float32>)) { try { // block id: 383
        ((var386&127)..=(var386&127):((var386|1)));
        ((UInt64(157)&127)..=(UInt64(131)&127):((-99)|1))
    } finally { // block id: 395
        var var397 : Range<UInt64> = ((UInt64(UInt32(199))&127)..(UInt64(34)&127):((Int64(Int8(46))|1)));
        var397
    } } else { (var408, ((UInt16(205)&127)..(UInt16(189)&127):(16|1)))[0] } ;
    let var782 : Range<UInt8> = ((UInt8(103)&127)..(UInt8(205)&127):((-71)|1));
    func func679(namedParam680 ! : Int32, namedParam681 ! : (Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64), optionalParam682 ! : Range<UInt32> = ((UInt32(18)&127)..=(UInt32(122)&127):((-84)|1)), namedParam684 ! : Range<Int16>) : Class43 { // block id: 685
        var var707 : UInt32 = UInt32(UInt16(UInt8(UInt8(138))));
        var loopTimeVar731 : Range<UInt64> = ((UInt64(Int8(106))&127)..=(UInt64(Int64(Int64(Int8(-102))))&127):(((-49)|1)));
        for (i in loopTimeVar731 where (try { // block id: 689
            var97++;
            if (var88) { var695 } else { Option<Bool>.Some(var88) }
        } catch (_) { // block id: 701
            UInt32(93) >> ((UInt32(26)) & 7);
            var707 <<= ((var707) & 7);
            Option<Bool>.Some(true)
        } finally { // block id: 715
            ((Int8(-40)&127)..=(Int8(29)&127):(113|1));
            var466;
            Option<Bool>.None
        } ?? match (var153) {
            case _ =>
                var671 * var671;
                var88

        })) {
            var729
        };
        try { // block id: 741
            let var748 : ?(Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64) = Option<(Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64)>.Some((((119&127)..(Int64(Int32(-36))&127):(((-17)|1))), (-73.0), r'G', ((UInt8(163)&127)..=(UInt8(103)&127):((-118)|1)), false, UInt64(UInt32(Int8(75)))));
            var748.getOrThrow()
        } finally { // block id: 763
            (Option<Option<Bool>>.None ?? Option<Bool>.Some(true));
            ((-107), ((Int32(-88)&127)..=(Int32(-55)&127):(63|1)), ((((-26)&127)..(26&127):((-27)|1)), 44.0, r'9', var782, true, var145), var707)[2]
        };
        try { // block id: 789
            func791(namedParam792 : namedParam684)
        } catch (e: Exception) { // block id: 940
            var var945 : ?Bool = Option<Bool>.None;
            func791(namedParam792 : namedParam684, optionalParam793 : [var945, var945, Option<Bool>.None, Option<Bool>.None, Option<Bool>.None, var945, var945, var945, var945, var945])
        }
    }
;
    let var989 : (Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64) = (((112&127)..=(5&127):((103|1))), Float64(Float32(Float32(Float32(-13.0)))), r'U', ((UInt8(1)&127)..(UInt8(229)&127):(94|1)), (UInt64(221) is Array<Bool>), UInt64(27));
    let var5646 : (Interface50) -> Int32 = func5548;
    try { // block id: 5649
        ((-67), var1732, var989, UInt32(120));
        if (true) { var4202 } else { var4202 }
    } catch (e: Exception) { // block id: 5659
        var4202
    }|>(var5646~>{ lambdaParameter675 : Int32 => let var968 : Interface48 = Class43(); var var1016 : UInt8 = UInt8(Int8(Int8(-107))); var var5545 : (Range<Int8>) -> Option<UInt64> = func1279; func679(namedParam680 : try { // block id: 957
        ();
        lambdaParameter675
    } catch (e: Exception) { // block id: 960
        if (false) { var729 } else { var729 } ;
        if (var88) { var968 } else { Class43() } ;
        var97
    } finally { // block id: 972
        ();

        var97
    }, namedParam681 : match (Int32(85)) {
        case _ : Interface49 =>
            var74;
            var989;
            if (true) { var989 } else { (((7&127)..((-110)&127):((-66)|1)), 101.0, var547, ((var1013&127)..(var1016&127):((11|1))), var88, UInt64(34)) }

        case _ : Option<Bool> =>

            (((var386&127)..=(var386&127):(((-126)|1))), 105.0, r'T', var782, var88, UInt64(47))

        case _ =>
            ();
            if (true) { (((35&127)..((-79)&127):((-78)|1)), var40, r'k', var782, false, UInt64(7)) } else { var1058 }

    }, namedParam684 : ((Int16(7)&127)..(Int16(15)&127):(74|1))).func1107(namedParam1108 : match (((var877&127)..(UInt16(47)&127):((var386|1)))) {
        case _ =>
            param369

        case caseVar1265 : Interface52 =>
            param369

        case caseVar1270 =>
            Int16(-63)

        case _ =>
            param369 * Int16(-128)

    }, namedParam1109 : (var158|>var5545)) })
}



func func364(param365 : Unit) : Bool { // block id: 366
    try { // block id: 5664
        ();
        Int16(-44) << ((var976) & 7)
    } catch (_) { // block id: 5669
        var1904;
        ();
        Int16(-114)
    } - if (var88) { // block id: 5675
        ();
        var3914;
        Int16(-126)
    } else if (var5680) { // block id: 5683
        var976 - Int16(121)
    } else { // block id: 5687
        Int16(-27) >> ((Int16(-11)) & 7)
    }|>func368;
    let var5714 : ?(Range<Int16>, Int8, Bool, Range<Int16>, UInt8, Rune, Range<UInt64>, UInt16) = Option<(Range<Int16>, Int8, Bool, Range<Int16>, UInt8, Rune, Range<UInt64>, UInt16)>.None;
    var var5748 : Int16 = Int16(UInt16(Int16(Int16(Int16(70)))));
    var var5758 : Bool = (((true as Option<Array<Range<Int16>>>) as Option<Option<Interface50>>) is Option<Array<Option<Bool>>>);
    (match (Option<Int16>.Some(Int16(-24))) {
        case _ : Option<Option<Interface50>> =>
            var5379;
            var5704

        case caseVar5709 =>
            if (true) { var5714 } else { var5714 }

        case caseVar5719 =>

            if (true) { [var1771, ((Int16(103)&127)..=(Int16(-109)&127):(85|1)), ((Int16(8)&127)..(var976&127):((var3952|1))), ((Int16(-98)&127)..(Int16(-80)&127):((-10)|1)), ((var976&127)..(Int16(-47)&127):((47|1))), var1771, ((Int16(-47)&127)..(Int16(89)&127):(87|1)), var1771, ((var976&127)..=(Int16(60)&127):((114|1))), ((var976&127)..(var5748&127):(((-113)|1)))] } else { [((Int16(8)&127)..=(Int16(66)&127):(39|1)), ((Int16(-38)&127)..(Int16(-30)&127):(27|1)), ((Int16(50)&127)..(Int16(49)&127):((-40)|1)), ((Int16(-6)&127)..=(Int16(-71)&127):(76|1)), ((Int16(105)&127)..=(Int16(-67)&127):((-29)|1)), ((Int16(33)&127)..=(Int16(-54)&127):(89|1)), ((Int16(-107)&127)..(Int16(-82)&127):((-61)|1)), ((Int16(-40)&127)..=(Int16(85)&127):(74|1)), ((Int16(-79)&127)..(Int16(-119)&127):((-7)|1)), ((Int16(-11)&127)..(Int16(27)&127):(125|1))] } ;
            if (var5758) { var5704 } else { Option<(Range<Int16>, Int8, Bool, Range<Int16>, UInt8, Rune, Range<UInt64>, UInt16)>.Some((((Int16(-122)&127)..=(Int16(-88)&127):((-9)|1)), var3297, true, ((Int16(-122)&127)..=(Int16(-106)&127):(((-58)|1))), UInt8(50), r'l', var560, var877)) }

        case _ =>
            var5780;
            Option<(Range<Int16>, Int8, Bool, Range<Int16>, UInt8, Rune, Range<UInt64>, UInt16)>.None

    } ?? var4225);
    let var5868 : Int16 = Int16(100);
    match ((var5791 ?? match (var259) {
            case _ =>
                if (var4408) { var1904 } else { var1904 } ;
                if (false) { [true, false, true, false, true, false, true, true, false, true] } else { [false, true, false, var5758, false, false, var5758, false, var5680, var5357] }

            case caseVar5819 : String =>
                if (true) { [false, false, var2564, var4408, var4408, false, false, true, var88, false] } else { var477 }

            case caseVar5837 =>
                if (var88) { [true, false, true, true, false, true, false, true, false, true] } else { [true, true, false, false, true, true, false, true, false, true] }

            case _ =>
                [var5680, var4510, true, var4510, false, var4408, true, true, var5680, false]

            case _ =>
                [true, false, true, false, false, true, true, true, true, false]

        })) {
        case caseVar5862 : UInt8 =>
            var var5871 : ?Int16 = Option<Int16>.None;
            if (false) { Option<Int16>.Some(var5868) } else { var5871 } ;
            var3619;
            var var5875 : Bool = true;
            var5875

        case _ =>
            var5880

    }
}

public func func173(param174 : Range<UInt64>) : Bool { // block id: 175
    let var223 : UInt32 = UInt32(UInt16(13));
    let var238 : Int64 = (-21);
    let var245 : Range<UInt8> = ((UInt8(UInt8(UInt8(48)))&127)..(UInt8(133)&127):((Int64(Int64(Int64(UInt32(220))))|1)));
    func func228() : Option<Bool> { // block id: 229
        if ((((var238&127)..((-117)&127):(((-18)|1))), 27.0, r'E', var245, false, UInt64(83))[4]) { var259 } else { var288[4] } [7]
    }
;
    let var354 : ?Bool = (((UInt16(162)&127)..=(UInt16(150)&127):(91|1)) as Bool);
    let var5892 : String = """
=6mnR
?nUF2
""";
    func func177(param178 : Class43) : Bool { // block id: 179
        Int32(-16);
        (if (match (Option<UInt64>.Some(var190)) {
            case _ : Float32 =>
                if (var88) { var200 } else { ((UInt32(158)&127)..(UInt32(110)&127):(((-96)|1))) } ;
                true

            case caseVar209 =>
                if (var88) { Class43() } else { Class43() } ;
                ();
                true

            case _ =>
                Int16(-95);
                ();
                var223 >= var223

        }) { func228() } else { try { // block id: 350
            ();
            ();
            var354
        } catch (_) { // block id: 357
            UInt32(122) + var223;
            var158;
            var354
        } }  ?? (match (var5885) {
            case caseVar5889 : Option<Bool> =>
                var5892;
                var877 += UInt16(125)

            case _ =>
                if (var5680) { var4202 } else { Class43() } ;
                var5379;
                var3914

        }|>func364))
    }
;
    var var5952 : Interface47 = Class43();
    let var5970 : Range<Int16> = ((Int16(77)&127)..=(Int16(Int16(-8))&127):(((-49)|1)));
    let var6001 : (Interface52, Int64, (Interface50) -> Int8) -> Range<Int32> = func1868;
    func177(match (if (false) { // block id: 5908
            if (false) { Class43() } else { var165 } ;
            var223
        } else if (false) { // block id: 5915
            var1028
        } else { // block id: 5917
            (false, var833, ((UInt64(54)&127)..(UInt64(210)&127):((-105)|1)), [var5433, Float32(14.0), var4161, var4161, Float32(78.0), Float32(-28.0), var5433, var533, Float32(-48.0), Float32(-125.0)], (), [((Int16(42)&127)..=(Int16(-13)&127):((-35)|1)), ((Int16(55)&127)..(Int16(-29)&127):(61|1)), var1771, ((Int16(60)&127)..(Int16(79)&127):((-36)|1)), var1771, var1771, ((Int16(68)&127)..=(Int16(61)&127):(13|1)), ((Int16(-98)&127)..=(Int16(39)&127):((var2959|1))), ((Int16(-37)&127)..=(Int16(-13)&127):(17|1)), ((Int16(-100)&127)..(Int16(-121)&127):(5|1))]);
            var var5980 : Int64 = (-20);
            if (true) { Option<Interface47>.Some(var5952) } else { Option<Interface47>.Some(Class43(((var5141&127)..=(var3540&127):((var5468|1))), func1868, var4496, namedParam2953 : [var1771, ((Int16(21)&127)..(Int16(100)&127):((78|1))), var1771, var5970, ((var976&127)..(var976&127):((var5980|1))), ((Int16(-104)&127)..=(Int16(-68)&127):(71|1)), var5970, ((Int16(93)&127)..(Int16(113)&127):((var238|1))), ((Int16(75)&127)..=(Int16(-84)&127):(58|1)), var1771])) } ;
            var223
        }) {
        case caseVar5993 : Range<UInt64> =>
            var3619;
            var var6006 : Class43 = Class43();
            if (true) { Class43(((UInt8(198)&127)..=(UInt8(106)&127):((-55)|1)), var6001, var695, namedParam2953 : [((Int16(38)&127)..(Int16(53)&127):((-88)|1)), ((Int16(37)&127)..(Int16(38)&127):((-21)|1)), ((Int16(39)&127)..=(Int16(123)&127):(37|1)), ((Int16(71)&127)..=(Int16(-115)&127):((-125)|1)), ((Int16(-42)&127)..=(Int16(28)&127):(108|1)), ((Int16(65)&127)..(Int16(43)&127):(44|1)), ((Int16(-37)&127)..(Int16(-122)&127):(55|1)), ((Int16(-28)&127)..(Int16(18)&127):((-119)|1)), ((Int16(-22)&127)..(Int16(79)&127):(90|1)), ((Int16(17)&127)..(Int16(-122)&127):((-77)|1))]) } else { var6006 }

        case 81 =>
            var4496;
            if (var2564) { [(), (), (), var3914, var6020, (), (), (), (), var3619] } else { [(), (), (), (), (), (), (), (), (), ()] } ;
            Class43()

        case _ : Interface47 =>
            var6033

        case _ : Option<Interface49> =>
            if (false) { var5244 } else { Option<Array<Range<Int16>>>.None } ;
            ();
            if (var5357) { var6033 } else { var6033 }

        case _ =>
            if (false) { var6033 } else { Class43(var1951, var6001, Option<Bool>.None, namedParam2953 : var3761) }

    })
}


public func func2864(param169 : Int8) : Bool { // block id: 170
    var loopTimeVar6088 : Int64 = 0;
    do {
        loopTimeVar6088++;
        var loopTimeVar6076 : Int64 = 0;
        do {
            loopTimeVar6076++;
            ();
            // var3186 %= Float64((Int32(var40)) | 1)
        } while ((var88) && loopTimeVar6076 < 100 ) ;
        var loopTimeVar6086 : Int64 = 0;
        do {
            loopTimeVar6086++;
            if (var5880) { var379 } else { Option<Interface50>.None } ;
            var3761
        } while ((var2564) && loopTimeVar6086 < 100 )
    } while ((func173(if (var6059) { ((UInt64(103)&127)..(UInt64(92)&127):(29|1)) } else { ((UInt64(77)&127)..(UInt64(182)&127):((var5468|1))) } )) && loopTimeVar6088 < 100 ) ;
    let var6091 : ?Unit = (((((UInt64(114)&127)..(UInt64(98)&127):(((-90)|1))), ((UInt16(44)&127)..=(UInt16(173)&127):((0|1)))) as Option<(Range<Int64>, Float64, Rune, Range<UInt8>, Bool, UInt64)>) as Unit);
    (var6091 ?? try (resource = Class43()) { // block id: 6104
        let var6106 : Interface47 = Class43(((UInt8(UInt8(98))&127)..=(UInt8(Int8(Int8(-40)))&127):((Int64(UInt8(UInt8(244)))|1))), func1868, Option<Bool>.Some(((Option<Option<Option<Option<UInt32>>>>.None as Bool) is (Range<UInt64>) -> Bool)), namedParam2953 : [((Int16(124)&127)..=(Int16(89)&127):(88|1)), ((Int16(110)&127)..=(Int16(3)&127):((-90)|1)), ((Int16(90)&127)..=(Int16(-126)&127):((-109)|1)), ((Int16(83)&127)..(Int16(-60)&127):((-104)|1)), ((Int16(-87)&127)..(Int16(-58)&127):(68|1)), ((Int16(29)&127)..=(Int16(-97)&127):(37|1)), ((Int16(71)&127)..(Int16(-124)&127):(120|1)), ((Int16(-83)&127)..(Int16(9)&127):(25|1)), ((Int16(82)&127)..(Int16(60)&127):(53|1)), ((Int16(-64)&127)..=(Int16(56)&127):(65|1))]);
        var6106;
        var3297 ^ var3297;
        var6020
    } catch (_) { // block id: 6127
        ();
        ()
    } finally { // block id: 6130

    });
    ((if (var6139) { Option<Option<Bool>>.Some(Option<Bool>.None) } else { Option<Option<Bool>>.None }  ?? var1539) ?? ((param169 >> ((Int8(43)) & 7)) is (Float32) -> Range<Int64>))
}



public func func8(optionalParam9 ! : UInt32 = UInt32(222), optionalParam11 ! : Bool = ("UH?(Rg1;\"#" is Int8)) : Unit { // block id: 14
    func16(optionalParam17 : var40, optionalParam23 : Class43.func55(namedParam60 : var2959));
    (Option<Unit>.Some((var671 = Int8(-1))) ?? var3619);
    try (resource = Class43()) { // block id: 6317
        if (false) { // block id: 6320
            if (var5680) { var6324 } else { Class43() } ;
            var3914;
            ()
        };
        let var6335 : ?Unit = (Float32(Float32(55.0)) as Unit);
        (var6335 ?? ())
    } catch (e: Exception) { // block id: 6340

    }
}

main(): Int64 {
    try {
        func8();
        Int64(104)
        // CRC Check All Variables
        var crccheck = CrcCheck(5000, 32)
        crccheck.updateBuffer(UInt64(var97*var97), 64)
        crccheck.updateBuffer(UInt64(var877*var877), 64)
        crccheck.updateBuffer(UInt64(var976*var976), 64)
        crccheck.updateBuffer(UInt64(var1013*var1013), 64)
        crccheck.updateBuffer(UInt64(var1028*var1028), 64)
        crccheck.updateBuffer(UInt64(var3061*var3061), 64)
        crccheck.updateBuffer(UInt64(var3297*var3297), 64)
        crccheck.updateBuffer(UInt64(var3540*var3540), 64)
        crccheck.updateBuffer(UInt64(var3952*var3952), 64)
        crccheck.updateBuffer(UInt64(var5468*var5468), 64)
        crccheck.updateBuffer(UInt64(var6242*var6242), 64)
        crccheck.crcCheck()
        crccheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
extend Enum419 {

}

extend Class43 {
    public static func func55(optionalParam56 ! : Int16 = Int16(UInt16(Int16(-94))), namedParam60 ! : Int64) : Int32 { // block id: 61
        var var6213 : Interface49 = Class43(namedParam1493 : ((UInt8(95)&127)..=(UInt8(181)&127):((50|1))));
        var var6224 : Bool = true;
        var var6260 : Range<Int16> = ((Int16(-26)&127)..=(Int16(Int16(Int8(Int8(99))))&127):((12|1)));
        Class43.func65(optionalParam66 : try { // block id: 6207
            if (var6139) { var1732 } else { var1732 } ;
            var6213
        } finally { // block id: 6219
            var4202;
            ();
            let var6229 : (Interface52, Int64, (Interface50) -> Int8) -> Range<Int32> = func1868;
            if (var6224) { Class43(((UInt8(178)&127)..=(UInt8(103)&127):(76|1)), var6229, Option<Bool>.None, namedParam2953 : [((Int16(-32)&127)..(optionalParam56&127):((16|1))), var1771, ((var976&127)..(var976&127):((var6242|1))), ((Int16(77)&127)..=(Int16(-5)&127):((-42)|1)), ((optionalParam56&127)..=(var976&127):((var5468|1))), ((optionalParam56&127)..=(Int16(100)&127):((18|1))), var1643, ((Int16(30)&127)..=(var976&127):((95|1))), var6260, var1643]) } else { Class43(namedParam1493 : var1951) }
        });
        ((var6213 as Array<UInt64>) ?? var6279);
        Int32(56)
    }

}
// ASSERT: scan sema_unreachable_pattern
// ASSERT: scan chir_typecast_overflow
// ASSERT: scan chir_dce_unused_variable
// ASSERT: scan chir_dce_unused_expression
// ASSERT: scan chir_arithmetic_operator_overflow
// ASSERT: scan chir_dce_unused_operator


