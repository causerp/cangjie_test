/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

// LEVEL: 2
// DEPENDENCE: EnumDecl_06.cj
// (CJNATIVE and not OHOS) EXEC: %compiler %import-cangjie-stdx %cmp_opt %f -o %output %cmp_utest_opt
// (CJNATIVE and not OHOS) RUN-EXEC: %run_stdx %output %run_utest_opt %run_args

import stdx.syntax.*

@Test
func test_EnumDecl_06() {
    let res = parseFile("./EnumDecl_06.cj")
    var diags = res.diags
    @Assert(diags.size, 0)

    let sourcefile: SourceFile = res.node.getOrThrow()
    @Expect(sourcefile.toString().contains(##"enum a_b <: I1 & I2 {
    A1(T, T)
    | B1 (T, U) |
    C1(U, U) | D1((Int64, Int64))
}"##))

    var enumDecl: EnumDecl = (sourcefile.topLevelDecls[0] as EnumDecl).getOrThrow()
    @Expect(enumDecl.toString(), ##"enum a_b <: I1 & I2 {
    A1(T, T)
    | B1 (T, U) |
    C1(U, U) | D1((Int64, Int64))
}"##)
    @Assert(enumDecl.body.memberDecls.size, 4)
    @Assert(enumDecl.body.memberDecls[0] is EnumConstructor)
    @Assert(enumDecl.body.memberDecls[0].toString(), ##"A1(T, T)"##)
    @Assert(enumDecl.body.memberDecls[1] is EnumConstructor)
    @Assert(enumDecl.body.memberDecls[1].toString(), ##"B1 (T, U)"##)
    @Assert(enumDecl.body.memberDecls[2] is EnumConstructor)
    @Assert(enumDecl.body.memberDecls[2].toString(), ##"C1(U, U)"##)
    @Assert(enumDecl.body.memberDecls[3] is EnumConstructor)
    @Assert(enumDecl.body.memberDecls[3].toString(), ##"D1((Int64, Int64))"##)

    @Assert(enumDecl.name, "a_b")
    @Assert(enumDecl.isNonExhaustive, false)
    @Assert(enumDecl.modifiers.size, 0)
    @Assert(enumDecl.genericConstraints.isNone())
    @Assert(enumDecl.genericParams.size, 0)
    @Assert(enumDecl.superTyAnnotations.size, 2)
    @Assert(enumDecl.superTyAnnotations[0].toString(), ##"I1"##)
    @Assert(enumDecl.superTyAnnotations[1].toString(), ##"I2"##)
    @Assert(enumDecl.annotations.size, 0)
}
