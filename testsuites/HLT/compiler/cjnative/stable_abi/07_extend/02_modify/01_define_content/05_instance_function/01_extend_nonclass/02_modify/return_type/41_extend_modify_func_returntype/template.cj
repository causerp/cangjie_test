/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
 
// ASSERT: scan-full Compatible!\n
package test_stable_abi

// test extend: instance function
open public class Father {
    public const init(){}
}
public class Son <: Father {
    public const init(){
        Father()
    }
}

interface Addable {
    func add(other: Int64): Int64
}
struct MyInt <: Addable {
    var value = 0
    public const init(){}
    public func add(other: Int64): Int64 {
        value + other
    }
}


public struct TestStruct {
    public const init() {}
}
extend TestStruct {
    public func foo_public_sub():Father {
        Father()
    }
    public func foo_public_sub_notclass_or_interface():Addable {
        MyInt()
    }
    public func foo_public_notsub():String {
        "String"
    }


    const func foo_const_sub():Father {
        Father()
    }
    const func foo_const_sub_notclass_or_interface():Addable {
        MyInt()
    }
    const func foo_const_notsub():String {
        "String"
    }


    func foo_frozen_sub():Father {
        Father()
    }
    func foo_frozen_sub_notclass_or_interface():Addable {
        MyInt()
    }
    func foo_frozen_notsub():String {
        "String"
    }


    func foo_nonpublic():String {
        "String"
    }

}
public const func foo_1(){
    let x = TestStruct().foo_const_sub()
    let x2 = TestStruct().foo_const_sub_notclass_or_interface()
    let x3 = TestStruct().foo_const_notsub()
}
@Frozen
public func foo_2(){
    let x = TestStruct().foo_frozen_sub()
    let x2 = TestStruct().foo_frozen_sub_notclass_or_interface()
    let x3 = TestStruct().foo_frozen_notsub()
}

public struct TestStruct_unexport<T> {
    public var a: Int64 = 0
}
private interface I1 {}
extend<T> TestStruct_unexport<T> where T <: I1 {
    public func foo_unexport():String{
        "String"
    }
}

